- title: __initial_text__
  contents:
  - '             Mesh-enhanced Service Location Protocol (mSLP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Mesh-enhanced Service Location Protocol\n\
    \   (mSLP).  mSLP enhances the Service Location Protocol (SLP) with a\n   scope-based\
    \ fully-meshed peering Directory Agent (DA) architecture.\n   Peer DAs exchange\
    \ new service registrations in shared scopes via\n   anti-entropy and direct forwarding.\
    \  mSLP improves the reliability\n   and consistency of SLP DA services, and simplifies\
    \ Service Agent (SA)\n   registrations in systems with multiple DAs.  mSLP is\
    \ backward\n   compatible with SLPv2 and can be deployed incrementally.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1.  Notation Conventions . . . . . . . . . . . . .\
    \ . . . . .  2\n       1.2.  Terminology  . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       1.3.  Compatibility  . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n   2.  Scope-based Fully-meshed Peering DA Architecture . . . . .\
    \ . .  4\n   3.  Peer Relationship Management . . . . . . . . . . . . . . . .\
    \ .  6\n       3.1.  Learning about New Peers . . . . . . . . . . . . . . . .\
    \  6\n       3.2.  Establishing a Peering Connection  . . . . . . . . . . .  6\n\
    \       3.3.  Exchanging Information about Existing Peers  . . . . . .  6\n  \
    \     3.4.  Maintaining a Peer Relationship  . . . . . . . . . . . .  7\n    \
    \   3.5.  Tearing Down a Peer Relationship . . . . . . . . . . . .  7\n   4. \
    \ Registration Propagation Control . . . . . . . . . . . . . . .  7\n       4.1.\
    \  Accept ID and Propagation Order  . . . . . . . . . . . .  7\n       4.2.  Version\
    \ Timestamp and Registration Version Resolution  .  8\n       4.3.  Mesh Forwarding\
    \ Extension  . . . . . . . . . . . . . . .  8\n       4.4.  Summary Vector . .\
    \ . . . . . . . . . . . . . . . . . . .  9\n       4.5.  Service Deregistration\
    \ . . . . . . . . . . . . . . . . . 10\n       4.6.  Anti-entropy Request Message\
    \ . . . . . . . . . . . . . . 10\n       4.7.  Anti-entropy . . . . . . . . .\
    \ . . . . . . . . . . . . . 11\n       4.8.  Direct Forwarding  . . . . . . .\
    \ . . . . . . . . . . . . 11\n       4.9.  SrvAck Message . . . . . . . . . .\
    \ . . . . . . . . . . . 12\n       4.10. Control Information  . . . . . . . .\
    \ . . . . . . . . . . 12\n   5.  Summary  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 12\n   6.  Protocol Timing Defaults . . . . . . . . . . .\
    \ . . . . . . . . 13\n   7.  IANA Considerations  . . . . . . . . . . . . . .\
    \ . . . . . . . 13\n   8.  Security Considerations  . . . . . . . . . . . . .\
    \ . . . . . . 13\n   9.  Acknowledgments  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n   10. References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 13\n       10.1. Normative References . . . . . . . . . . . . . . .\
    \ . . . 13\n       10.2. Informative References . . . . . . . . . . . . . . .\
    \ . . 14\n   11. Authors' Addresses . . . . . . . . . . . . . . . . . . . . .\
    \ . 14\n   12. Full Copyright Statement . . . . . . . . . . . . . . . . . . .\
    \ 15\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In the Service Location Protocol (SLPv2 [RFC2608]), Directory\
    \ Agents\n   (DAs) accept service registrations from Service Agents (SAs) and\n\
    \   answer queries from User Agents (UAs); they enhance the performance\n   and\
    \ scalability of SLPv2.  The use of scopes in SLPv2 further\n   improves its scalability.\
    \  In general, a DA can serve multiple\n   scopes, and a scope can be served by\
    \ multiple DAs.  When multiple DAs\n   are present for a scope, how should they\
    \ interact with each other?\n   This document describes the Mesh-enhanced Service\
    \ Location Protocol\n   (mSLP), addressing this open issue in SLPv2.\n   mSLP\
    \ defines a scope-based fully-meshed peering DA architecture: for\n   each scope,\
    \ all DAs serving the scope form a fully-meshed peer\n   relationship (similar\
    \ to IBGP [RFC1771]).  Peer DAs exchange new\n   service registrations in shared\
    \ scopes via anti-entropy [EPID-\n   ALGO,UPDA-PROP] and direct forwarding.  mSLP\
    \ improves the reliability\n   and consistency of SLP DA services, and simplifies\
    \ SA registrations\n   in systems with multiple DAs.\n"
- title: 1.1. Notation Conventions
  contents:
  - "1.1. Notation Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [RFC2119].\n"
- title: 1.2. Terminology
  contents:
  - "1.2. Terminology\n   Peer DAs (or Peers)\n      DAs that share one or multiple\
    \ scopes are peers.\n   Peering Connection\n      A persistent connection (e.g.,\
    \ TCP) that provides reliable and\n      ordered transfers between two peers.\
    \  The closing of a peering\n      connection terminates the peer relationship.\n\
    \   Mesh-enhanced DA (MDA)\n      An MDA carries the \"mesh-enhanced\" attribute\
    \ keyword in its DA\n      Advertisement (DAAdvert) message, maintains peering\
    \ connections to\n      all peers, and properly interacts with peers.\n   Mesh-enhanced\
    \ SA (MSA)\n      An MSA uses the Mesh Forwarding extension (Section 4.3) when\
    \ it\n      registers with MDAs.\n   Registration Update\n      A registration\
    \ update refers to a Service Registration (SrvReg) or\n      Service Deregistration\
    \ (SrvDeReg) message.\n   Registration State\n      A registration state refers\
    \ to an entry in the registration\n      database.\n   Accept DA\n      When a\
    \ DA accepts a registration update from an SA, the DA is the\n      accept DA\
    \ for the update.\n   Accept Timestamp\n      The arrival timestamp of a registration\
    \ update at its accept DA is\n      the accept timestamp of the update.  All accept\
    \ timestamps\n      assigned by the same DA MUST be monotonically increasing.\n\
    \   Version Timestamp\n      When an MSA sends a registration update to an MDA,\
    \ the MSA assigns\n      a version timestamp to the update.  All version timestamps\n\
    \      assigned by the same MSA MUST be monotonically increasing.\n"
- title: 1.3. Compatibility
  contents:
  - "1.3. Compatibility\n   mSLP is designed as a lightweight enhancement to SLPv2.\
    \  It is\n   backward compatible with SLPv2.  mSLP defines two enhanced entities:\n\
    \   MDAs and MSAs.  They can be deployed incrementally.  An enhanced\n   entity\
    \ supports extended operations without affecting its original\n   functionality\
    \ as defined in RFC 2608 [RFC2608].  For simplicity and\n   compatibility, an\
    \ enhanced entity works as a non-enhanced entity to\n   interact with non-enhanced\
    \ entities.  Table 1 summarizes all\n   interactions involving an MDA or MSA.\n\
    \            Interaction       Equivalent To     Defined In\n            ----------------------------------------------\n\
    \            MDA <--> MDA                           mSLP\n            MDA <-->\
    \ MSA                           mSLP\n            MDA <--> DA        DA <--> DA\
    \        RFC 2608\n            MDA <--> SA        DA <--> SA        RFC 2608\n\
    \            MDA <--> UA        DA <--> UA        RFC 2608\n            MSA <-->\
    \ DA        SA <--> DA        RFC 2608\n            MSA <--> UA        SA <-->\
    \ UA        RFC 2608\n             Table 1. Interactions involving an MDA or MSA\n"
- title: 2. Scope-based Fully-meshed Peering DA Architecture
  contents:
  - "2. Scope-based Fully-meshed Peering DA Architecture\n                       \
    \          (x,y)\n          +--------------------------------------------------+\n\
    \          |                  +------------+                  |\n          | \
    \                 |  MDA4 (z)  |                  |\n          |             \
    \     +------------+                  |\n          |                        |\
    \ (z)                     |\n   +------------+     (y)    +------------+     (y)\
    \    +------------+\n   | MDA1 (x,y) | ---------- | MDA3 (y,z) | ---------- |\
    \ MDA2 (x,y) |\n   +------------+            +------------+            +------------+\n\
    \      Figure 1. A scope-based fully-meshed peering DA architecture\n   mSLP employs\
    \ a scope-based fully-meshed peering DA architecture.  For\n   each scope, all\
    \ MDAs that serve the scope form a fully-meshed peer\n   relationship.  Figure\
    \ 1 shows an example for four MDAs and three\n   scopes (x, y, and z).  Note that\
    \ a single peering connection is\n   needed between two peers for exchanging all\
    \ service registrations in\n   their shared scopes.\n   This architecture enhances\
    \ SLP DA services.  First, it improves the\n   consistency among peer DAs by automatically\
    \ reconciling inconsistent\n   states among them.  Second, it enables newly booted\
    \ and rebooted MDAs\n   to catch up on all new registrations at once from their\
    \ peers, purely\n   through DA interaction, without involving SAs.\n   This architecture\
    \ also simplifies SA registrations.  In SLPv2, an SA\n   needs to discover and\
    \ register with all existing DAs in its scopes,\n   and re-register when new DAs\
    \ are discovered or old DAs are found to\n   have rebooted.  In mSLP, for all\
    \ MDAs, an MSA only needs to discover\n   and register with a sufficient number\
    \ of them, such that the union of\n   their scopes covers its scopes; the registrations\
    \ will then be\n   propagated automatically to other MDAs in the registration\
    \ scopes.\n   For example, in Figure 2, MSA1 only needs to discover and register\n\
    \   with MDA2, or with both MDA1 and MDA3.\n                 (option2)  +------------+\
    \  (option2)\n         +----------------- | MSA1 (x,y) | -----------------+\n\
    \         |                  +------------+                  |\n         |   \
    \                     | (option1)               |\n         V                \
    \        V                         V\n   +----------+             +------------+\
    \             +----------+\n   | MDA1 (x) | ----------- | MDA2 (x,y) | -----------\
    \ | MDA3 (y) |\n   +----------+             +------------+             +----------+\n\
    \            Figure 2. Options for registering with MDAs\n   Furthermore, this\
    \ architecture provides scaling advantages.  Consider\n   a scope that has N SAs\
    \ and M DAs, and assume N > M >= 2.  Although\n   mSLP and SLPv2 need the same\
    \ number of SLP messages to distribute\n   registrations from N SAs to M DAs,\
    \ mSLP can reduce the number of\n   agents needed for taking care of registration\
    \ distribution, and\n   reduce the number of TCP connections needed if each SA\
    \ uses TCP for\n   its registrations.  More specifically, the agents that need\
    \ to take\n   care of registration distribution are all N SAs in SLPv2, but only\
    \ M\n   DAs in mSLP.  Also, the number of needed TCP connections is N*M in\n \
    \  SLPv2 as each SA has to connect with each DA and register, but only\n   N+M*(M-1)/2\
    \ in mSLP as each SA only needs to connect to one\n   contacting DA of a full\
    \ mesh of M node and register, then\n   registrations are propagated through the\
    \ DA mesh.  For N=100 and\n   M=10, SLPv2 needs 1000 TCP connections, but mSLP\
    \ only needs 145 such\n   connections.\n   Note that as mSLP employs full-mesh\
    \ topology, which is mainly for\n   simplicity and reliability, it cannot scale\
    \ to a large number of MDAs\n   in a single mesh.  In general, mSLP can be applied\
    \ if the number of\n   MDAs in a mesh is on the order of tens or below.  One way\
    \ to avoid\n   having a large number of MDAs in a mesh is to split the scope into\n\
    \   several finer scopes.  For example, if we have N MDAs for scope \"x\",\n \
    \  and N is too large, then we can split \"x\" into two finer scopes:\n   \"x-1\"\
    \ and \"x-2\", with N1 MDAs for \"x-1\" only, N2 MDAs for \"x-2\" only,\n   N3\
    \ MDAs for both \"x-1\" and \"x-2\", and N1+N2+N3=N.  Thus, instead of\n   having\
    \ a large full mesh of size N, we now have two smaller full\n   meshes of size\
    \ N1+N3 and N2+N3, respectively.  Accordingly, a service\n   registration that\
    \ previously targets for scope \"x\", now needs to be\n   registered under both\
    \ \"x-1\" and \"x-2\".\n"
- title: 3. Peer Relationship Management
  contents:
  - '3. Peer Relationship Management

    '
- title: 3.1. Learning about New Peers
  contents:
  - "3.1. Learning about New Peers\n   An MDA can learn about new peers via static\
    \ configuration, DHCP\n   [RFC2610], and DAAdvert multicast and unicast.  In any\
    \ case, an MDA\n   MUST get a peer's DAAdvert before establishing a peer relationship\
    \ to\n   the peer.\n"
- title: 3.2. Establishing a Peering Connection
  contents:
  - "3.2. Establishing a Peering Connection\n   After getting a new peer's DAAdvert,\
    \ an MDA establishes a peering\n   connection (if such a connection does not exist\
    \ yet) to the peer, and\n   sends its DAAdvert via the connection (Figure 3).\
    \  An MDA can\n   identify a peering connection initiated by a peer by receiving\
    \ the\n   peer's DAAdvert from the connection.  Normally, a single peering\n \
    \  connection is set up between two peers, but there is a small\n   possibility\
    \ that a pair of peering connections might be created\n   between two peers if\
    \ they try to initiate a connection to each other\n   at almost the same time.\
    \  Thus, when an MDA identifies a new peering\n   connection initiated by a peer,\
    \ it SHOULD check whether it has\n   initiated another peering connection to the\
    \ peer.  If this is the\n   case, and it has a lower-numbered IP address than\
    \ the peer, then the\n   MDA SHOULD terminate the connection it has initiated.\n\
    \      +------+    (1) MDA2's DAAdvert |                 +------+\n      |   \
    \   | <----------------------+                 |      |\n      | MDA1 |    (2)\
    \ Create a Peering Connection       | MDA2 |\n      |      | --------------------------------------->\
    \ |      |\n      +------+    (3) MDA1's DAAdvert                   +------+\n\
    \             Figure 3. Establishing a peering connection\n"
- title: 3.3. Exchanging Information about Existing Peers
  contents:
  - "3.3. Exchanging Information about Existing Peers\n   After establishing a peering\
    \ connection, two peers (say, MDA1 and\n   MDA2) exchange information about their\
    \ existing peers by forwarding\n   peers' DAAdverts via the peering connection\
    \ (Figure 4).  MDA1 will\n   forward the DAAdvert of a peer (say, MDA3) to MDA2\
    \ if:\n      (1) MDA3 shares scopes with MDA2, and\n      (2) MDA3 is an active\
    \ peer of MDA1 (i.e., there is a peering\n          connection between MDA3 and\
    \ MDA1) or an accept DA for\n          registrations currently maintained by MDA1\
    \ (i.e., MDA1\n          has registrations originally accepted by MDA3).\n   MDA2\
    \ operates similarly.  Note that all DAAdverts can be sent as one\n   TCP stream\
    \ for efficiency.  Exchanging information about existing\n   peers enables an\
    \ MDA to learn about new peers incrementally.\n      +------+      DAAdverts of\
    \ MDA1's existing peers     +------+\n      |      | ------------------------------------------>\
    \ |      |\n      | MDA1 |             (Peering Connection)            | MDA2\
    \ |\n      |      | <------------------------------------------ |      |\n   \
    \   +------+      DAAdverts of MDA2's existing peers     +------+\n          Figure\
    \ 4. Exchanging information about existing peers\n"
- title: 3.4. Maintaining a Peer Relationship
  contents:
  - "3.4. Maintaining a Peer Relationship\n      +------+              MDA1's DAAdvert\
    \             +------+\n      |      | --------------------------------------->\
    \ |      |\n      | MDA1 |           (Peering Connection)           | MDA2 |\n\
    \      |      | <--------------------------------------- |      |\n      +------+\
    \              MDA2's DAAdvert             +------+\n            Figure 5. Maintaining\
    \ a peer relationship\n   To detect failures (network partitions and peer crashes),\
    \ mSLP uses a\n   heart-beat mechanism.  An MDA sends its DAAdvert to peers (Figure\
    \ 5)\n   every CONFIG_DA_KEEPALIVE seconds.  The timeout value for this\n   message\
    \ is CONFIG_DA_TIMEOUT seconds (Section 6).\n"
- title: 3.5. Tearing Down a Peer Relationship
  contents:
  - "3.5. Tearing Down a Peer Relationship\n   An MDA SHOULD tear down a peer relationship\
    \ when it finds that the\n   peer has closed the peering connection, when it receives\
    \ a DAAdvert\n   multicast from the peer with a DA stateless boot timestamp set\
    \ to 0\n   (meaning that the peer is going to shutdown), or when it has not\n\
    \   received the peer's DAAdvert for more than CONFIG_DA_TIMEOUT seconds.\n"
- title: 4. Registration Propagation Control
  contents:
  - '4. Registration Propagation Control

    '
- title: 4.1. Accept ID and Propagation Order
  contents:
  - "4.1. Accept ID and Propagation Order\n   When an MDA accepts a registration update\
    \ from an MSA, the MDA\n   assigns a unique accept ID to the update.  An accept\
    \ ID has two\n   components: an accept DA URL and an accept timestamp.  The accept\n\
    \   timestamp is a 64-bit integer representing elapsed microseconds since\n  \
    \ 00:00 Coordinated Universal Time (UTC), January 1, 1900.  Figure 6\n   shows\
    \ the format for an accept ID entry.  A registration state has\n   the same accept\
    \ ID as that of the latest update applied to it.\n       0                   1\
    \                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Accept Timestamp                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Accept Timestamp, cont'd.              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Length of Accept DA URL    |         Accept DA URL         \\\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \                    Figure 6. Accept ID entry\n   An MDA MUST propagate registrations\
    \ in the increasing order of their\n   accept IDs, i.e., registrations having\
    \ the same accept DA MUST be\n   propagated in the increasing order of their accept\
    \ timestamps.  Note\n   that registrations having different accept DAs MAY be\
    \ propagated in\n   any order.\n"
- title: 4.2. Version Timestamp and Registration Version Resolution
  contents:
  - "4.2. Version Timestamp and Registration Version Resolution\n   When registrations\
    \ are propagated among MDAs, their arrival\n   timestamps at MDAs cannot be used\
    \ for version resolution.  For\n   example, assume that MSA1 sends a registration\
    \ (R1) to MDA1 first,\n   and a new version of the same registration (R2) to MDA2\
    \ later.  When\n   R1 and R2 are propagated, the arrival timestamp of R1 at MDA2\
    \ is\n   later than that of R2, but R1 SHOULD NOT overwrite R2 at MDA2 as R2\n\
    \   is a newer version.\n   mSLP resolves registration versions using version\
    \ timestamps.  When\n   an MSA sends a registration update to an MDA, the MSA\
    \ assigns a\n   version timestamp to the update.  The version timestamp is a 64-bit\n\
    \   integer representing elapsed microseconds since 00:00 UTC, January 1,\n  \
    \ 1900.  mSLP assumes that each registration is updated only by one SA,\n   thus\
    \ an MDA does not need to compare version timestamps from\n   different MSAs.\
    \  An MDA installs a registration update if the update\n   has a newer version\
    \ timestamp (from an MSA), or the update does not\n   have the Mesh Forwarding\
    \ extension (from a non-MSA).\n"
- title: 4.3. Mesh Forwarding Extension
  contents:
  - "4.3. Mesh Forwarding Extension\n   The Mesh Forwarding (MeshFwd) extension carries\
    \ a version timestamp\n   and an accept ID entry.  Figure 7 shows its format and\
    \ two defined\n   Forwarding IDs (Fwd-IDs).\n   The MeshFwd extension is used\
    \ with a Srv(De)Reg message, but it can\n   only be used with a fresh SrvReg,\
    \ or a complete SrvDeReg.\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | MeshFwd Extension ID = 0x0006 |  Next Extension Offset (NEO)  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ NEO, cont'd.  |     Fwd-ID    |       Version Timestamp       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  Version Timestamp, cont'd.                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Version Timestamp, cont'd.  |       Accept ID Entry         \\\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Fwd-ID         Abbreviation\n                        1 \
    \             RqstFwd\n                        2              Fwded\n        \
    \         Figure 7. MeshFwd extension and its Fwd-IDs\n   An MSA uses the RqstFwd\
    \ MeshFwd extension (Fwd-ID = RqstFwd, accept\n   timestamp = 0) in a Srv(De)Reg\
    \ to explicitly request an MDA (the\n   accept DA) to forward the message.\n \
    \  An MDA uses the Fwded MeshFwd extension (Fwd-ID = Fwded, accept\n   timestamp\
    \ != 0) in each Srv(De)Reg sent from it to another MDA,\n   either forwarding\
    \ a Srv(De)Reg received from an MSA (if the message\n   has the RqstFwd MeshFwd\
    \ extension), or propagating a registration\n   state in its database.\n"
- title: 4.4. Summary Vector
  contents:
  - "4.4. Summary Vector\n   An MDA uses a summary vector to represent its received\
    \ Srv(De)Reg(s)\n   that have a MeshFwd extension.  This summary vector records\
    \ the\n   latest accept timestamp for each accept DA that appears in the\n   MeshFwd\
    \ extension.  For example, consider n MDAs for a scope, if MDAi\n   has a summary\
    \ vector as ((MDA1, T1), (MDA2, T2), ..., (MDAn, Tn)),\n   then MDAi has received\
    \ all registrations originally accepted by MDAj\n   up to timestamp Tj, where\
    \ 1<=i,j<=n.\n   An MDA updates its summary vector when it receives a Srv(De)Reg\
    \ that\n   has a MeshFwd extension.  The MDA adds a new accept ID to its summary\n\
    \   vector if the Srv(De)Reg has a new accept DA; the MDA updates the\n   accept\
    \ timestamp of an existing accept ID in its summary vector if\n   the Srv(De)Reg\
    \ has an existing accept DA.\n"
- title: 4.5. Service Deregistration
  contents:
  - "4.5. Service Deregistration\n   When an MDA receives a SrvDeReg that has a MeshFwd\
    \ extension, it\n   SHOULD retain the corresponding registration in the database,\
    \ and\n   mark it as deleted.  This way, the registration will not appear in\n\
    \   any query reply, and an earlier SrvReg will not mistakenly cause the\n   registration\
    \ to reappear in the database.  A registration state will\n   be purged from the\
    \ database when it expires.\n"
- title: 4.6. Anti-entropy Request Message
  contents:
  - "4.6. Anti-entropy Request Message\n   The Anti-entropy Request (AntiEtrpRqst)\
    \ message carries an anti-\n   entropy type ID and a list of accept ID entries.\
    \  Figure 8 shows its\n   format and two defined anti-entropy type IDs.\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Service Location Header (AntiEtrpRqst Function-ID =  12)   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Anti-Entropy Type ID     |  Number of Accept ID Entries  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Accept ID Entry 1         . . .         Accept ID Entry k   \\\n  \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \               Anti-Entropy Type       Type ID\n                       selective\
    \               1\n                       complete                2\n        \
    \  Figure 8. AntiEtrpRqst message and anti-entropy types\n   The AntiEtrpRqst\
    \ message is used by an MDA to request new\n   registration states from a peer.\
    \  The anti-entropy type is either\n   selective or complete.  If the anti-entropy\
    \ type is selective, only\n   registration states that have an accept ID greater\
    \ than any specified\n   accept ID in the message are requested.  If the anti-entropy\
    \ type is\n   complete, all registration states that have an accept ID greater\
    \ than\n   any specified accept ID in the message or have an accept DA not\n \
    \  specified in the message are requested.\n   For example, consider three MDAs\
    \ (MDA1, MDA2, and MDA3) for a scope.\n   MDA2 has registration states originally\
    \ accepted by MDA1, MDA2, and\n   MDA3.  If MDA1 sends a selective AntiEtrpRqst\
    \ to MDA2 using an accept\n   ID list as ((MDA2, T2)), then MDA1 only requests\
    \ registration states\n   that are originally accepted by MDA2, and have an accept\
    \ timestamp\n   greater than T2.  If MDA1 sends a complete AntiEtrpRqst to MDA2\
    \ using\n   an accept ID list as ((MDA2, T2)), then MDA1 requests all\n   registration\
    \ states originally accepted by MDA1 and MDA3, plus those\n   originally accepted\
    \ by MDA2 and having an accept timestamp greater\n   than T2.\n"
- title: 4.7. Anti-entropy
  contents:
  - "4.7. Anti-entropy\n   Anti-entropy is used for exchanging initial registration\
    \ states when\n   two peers recognize each other for the first time, and for updating\n\
    \   new registration states after failures.\n   When an MDA receives an AntiEtrpRqst\
    \ from a peer, it sends the\n   requested new registration states in the increasing\
    \ order of their\n   accept IDs.  At last a Service Acknowledgment (SrvAck) message\
    \ is\n   sent to indicate that the processing of a corresponding AntiEtrpRqst\n\
    \   has been completed (Figure 9).  A new registration state is sent as a\n  \
    \ fresh SrvReg with its remaining lifetime.  A newly deregistered state\n   is\
    \ propagated as a SrvDeReg.  Note that multiple Srv(De)Reg(s) can be\n   sent\
    \ as one TCP stream for efficiency.\n      +------+                AntiEtrpRqst\
    \                  +------+\n      |      | ------------------------------------------->\
    \ |      |\n      | MDA1 |            (Peering Connection)              | MDA2\
    \ |\n      |      | <------------------------------------------- |      |\n  \
    \    +------+     New States via Srv(De)Reg(s) + SrvAck    +------+\n      Figure\
    \ 9. Anti-entropy via AntiEtrpRqst, Srv(De)Reg(s) and SrvAck\n"
- title: 4.8. Direct Forwarding
  contents:
  - '4.8. Direct Forwarding

    '
- title: +------+   RqstFwd Srv(De)Reg   +------+   Fwded Srv(De)Reg    +------+
  contents:
  - '+------+   RqstFwd Srv(De)Reg   +------+   Fwded Srv(De)Reg    +------+

    '
- title: '|      | ---------------------> |      | --------------------> |      |'
  contents:
  - '|      | ---------------------> |      | --------------------> |      |

    '
- title: '| MSA1 |                        | MDA1 |                       | MDA2 |'
  contents:
  - '| MSA1 |                        | MDA1 |                       | MDA2 |

    '
- title: '|      | <--------------------- |      |                       |      |'
  contents:
  - '|      | <--------------------- |      |                       |      |

    '
- title: +------+         SrvAck         +------+                       +------+
  contents:
  - "+------+         SrvAck         +------+                       +------+\n   \
    \         Figure 10. Direct forwarding of a Srv(De)Reg\n   After sending all new\
    \ registration states accepted by itself to a\n   peer (via anti-entropy), an\
    \ MDA directly forwards newly received\n   registration updates from MSAs to the\
    \ peer until a failure occurs.\n   In Figure 10, when a Srv(De)Reg is directly\
    \ forwarded from MDA1 to\n   MDA2, its Fwd-ID is set to Fwded, and its accept\
    \ timestamp is set to\n   its arrival timestamp at MDA1.  Note that a direct forwarding\
    \ is\n   performed asynchronously: MDA1 can send a SrvAck to MSA1 before it\n\
    \   forwards the Srv(De)Reg to MDA2.  Also note that the direct\n   forwarding\
    \ of a Srv(De)Reg goes only one-hop from its accept DA (say,\n   MDA1) to all\
    \ MDA1's peers that are in the registration scopes.\n"
- title: 4.9. SrvAck Message
  contents:
  - "4.9. SrvAck Message\n   According to [RFC2608], a DA MUST reply with a SrvAck\
    \ to a Srv(De)Reg\n   when the message is received from an SA.  However, an MDA\
    \ SHOULD NOT\n   reply with a SrvAck to a Srv(De)Reg if the message is received\
    \ from a\n   peer.  This is for efficiency because peers exchange Srv(De)Reg\n\
    \   messages via reliable peering connections.  Note that an MDA MUST\n   reply\
    \ with a SrvAck to an AntiEtrpRqst.\n"
- title: 4.10. Control Information
  contents:
  - "4.10. Control Information\n   For each registration entry, an MDA maintains the\
    \ following control\n   information: an accept ID (for registration propagation),\
    \ a version\n   timestamp (for registration version resolution - rejecting previous\n\
    \   updates), and a deletion flag (deregistered or not).\n   For all registration\
    \ entries, an MDA maintains a summary vector to\n   reflect its received registrations\
    \ so far.\n"
- title: 5. Summary
  contents:
  - "5. Summary\n   mSLP extends SLPv2 with three new definitions: a new attribute\
    \ -\n   \"mesh-enhanced\" for DAAdvert, a new message extension - MeshFwd, and\n\
    \   a new message type - AntiEtrpRqst.\n   A UA MAY prefer an MDA to a non-MDA\
    \ since an MDA is more likely to\n   reliably contain the complete set of current\
    \ service registrations\n   for the UA's scopes.\n   A non-MSA needs to discover\
    \ and register with all DAs in its scopes.\n   It does not use the MeshFwd extension.\n\
    \   A non-MDA accepts Srv(De)Reg(s) from SAs.  It does not forward them.\n   For\
    \ all MDAs, an MSA only needs to discover and register with\n   sufficient number\
    \ of them, such that they cover its scopes.  It uses\n   the MeshFwd extension\
    \ when it registers with MDAs.\n   An MDA carries the \"mesh-enhanced\" attribute\
    \ keyword in its DAAdvert.\n   It maintains a peer relationship to each peer.\
    \  It accepts\n   registrations from SAs and peers, propagates registrations via\
    \ anti-\n   entropy and direct forwarding to peers.\n"
- title: 6. Protocol Timing Defaults
  contents:
  - "6. Protocol Timing Defaults\n     Interval Name          Default Value      Defined\
    \ in\n   -------------------      -------------      -----------\n   CONFIG_DA_KEEPALIVE\
    \       200 seconds       Section 3.4\n   CONFIG_DA_TIMEOUT         300 seconds\
    \       Section 3.4\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   The Mesh Forwarding (MeshFwd) extension ID, 0x0006,\
    \ described in\n   Section 4.3, has been assigned by IANA out of the SLP extension\
    \ space\n   (RFC 2608, Section 9.1) reserved for \"optional to implement\"\n \
    \  extensions (i.e., the 0x0000-0x3FFF range).\n   The function-ID of the Anti-entropy\
    \ Request (AntiEtrpRqst) message\n   type, 12, described in Section 4.6, has been\
    \ assigned by IANA (RFC\n   2608, Section 15).\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   mSLP uses standard SLPv2 authentication.  First,\
    \ an MDA SHOULD\n   authenticate other MDAs before setting up a peer relationship\
    \ with\n   them so as to prevent any malicious MDA from joining the DA mesh.\n\
    \   Second, as a successful attack at an MDA may affect all MDAs in the\n   DA\
    \ mesh, an MDA SHOULD authenticate MSAs before accepting and\n   forwarding their\
    \ Srv(De)Reg messages to prevent illegitimate\n   modification or elimination\
    \ of service registrations.  Third, as an\n   MSA depends on the MDA with which\
    \ it registers to forward its\n   Srv(De)Reg messages, it SHOULD authenticate\
    \ the MDA to avoid using a\n   malicious MDA.\n"
- title: 9. Acknowledgments
  contents:
  - "9. Acknowledgments\n   Thomas Narten, James Kempf, Mike Day, Mikael Pahmp, Ira\
    \ McDonald,\n   Qiaobing Xie and Xingang Guo provided valuable comments for this\n\
    \   document.\n"
- title: 10. References
  contents:
  - '10. References

    '
- title: 10.1. Normative References
  contents:
  - "10.1. Normative References\n   [RFC2608]   Guttman, E., Perkins, C., Veizades,\
    \ J. and M. Day,\n               \"Service Location Protocol, Version 2\", RFC\
    \ 2608, June\n               1999.\n   [RFC2119]   Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 10.2. Informative References
  contents:
  - "10.2. Informative References\n   [RFC1771]   Rekhter, R. and T. Li, \"A Border\
    \ Gateway Protocol 4\n               (BGP-4)\", RFC 1771, March 1995.\n   [RFC2610]\
    \   Perkins, C. and E. Guttman, \"DHCP Options for Service\n               Location\
    \ Protocol\", RFC 2610, June, 1999.\n   [EPID-ALGO] A. Demers, D. Greene, C. Hauser,\
    \ W. Irish, J. Larson, S.\n               Shenker, H. Sturgis, D. Swinehart and\
    \ D. Terry, \"Epidemic\n               algorithms for replicated database maintenance\"\
    , the\n               sixth ACM symposium on principles of distributed\n     \
    \          computing, Vancouver, Canada, 1987.\n   [UPDA-PROP] K. Petersen, M.\
    \ Spreizer, D. Terry, M. Theimer and A.\n               Demers, \"Flexible update\
    \ propagation for weakly\n               consistent replication\", the sixteenth\
    \ ACM symposium on\n               operating systems principles, Saint Malo, France,\
    \ 1997.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Weibin Zhao\n   Department of Computer Science\n \
    \  Columbia University\n   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027-7003\n\
    \   EMail: zwb@cs.columbia.edu\n   Henning Schulzrinne\n   Department of Computer\
    \ Science\n   Columbia University\n   1214 Amsterdam Avenue, MC 0401\n   New York,\
    \ NY 10027-7003\n   EMail: hgs@cs.columbia.edu\n   Erik Guttman\n   Sun Microsystems\n\
    \   Eichhoelzelstr. 7\n   74915 Waibstadt\n   Germany\n   EMail: Erik.Guttman@sun.com\n"
- title: 12. Full Copyright Statement
  contents:
  - "12. Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
