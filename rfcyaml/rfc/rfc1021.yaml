- title: __initial_text__
  contents:
  - '             THE HIGH-LEVEL ENTITY MANAGEMENT SYSTEM (HEMS)

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   An overview of the RFCs which comprise the High-Level\
    \ Entity\n   Management System is provided.  This system is experimental, and\
    \ is\n   currently being tested in portions of the Internet.  It is hoped that\n\
    \   this work will help lead to a standard for IP internetwork\n   management.\
    \  Distribution of this memo is unlimited.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   Until recently, a majority of critical components in IP networks,\n\
    \   such as gateways, have come from a very small set of vendors.  While\n   each\
    \ vendor had their own set of management protocols and mechanisms,\n   the collection\
    \ was small, and a knowledgeable system administrator\n   could be expected to\
    \ learn them all.\n   Now, however, the number of vendors has grown quite large,\
    \ and the\n   lack of an accepted standard for management of network components\
    \ is\n   causing severe management problems.  Compounding this problem is the\n\
    \   explosive growth of the connected IP networks known as the Internet.\n   The\
    \ combination of increased size and heterogeneity is making\n   internetwork management\
    \ extremely difficult.  This memo discusses an\n   effort to devise a standard\
    \ protocol for all devices, which should\n   help alleviate the management problem.\n\
    \   The RFCs that currently define the High-Level Entity Management\n   System\
    \ are this memo along with RFC-1022, 1024, and 1023.  This list\n   is expected\
    \ to change and grow over time, and readers are strongly\n   encouraged to check\
    \ the RFC Index to find the most current versions.\n"
- title: MONITORING AND CONTROL
  contents:
  - "MONITORING AND CONTROL\n   Historically, the IP community has divided network\
    \ management into\n   two distinct types of activities: monitoring and control.\
    \  Monitoring\n   is the activity of extracting or collecting data from the network\
    \ or\n   a part of the network to observe its behavior.  Control is the\n   activity\
    \ of taking actions to effect changes in the behavior of the\n   network or a\
    \ part of the network in real-time, typically in an\n   attempt to improve the\
    \ network's performance.\n   Note that the ability to control presupposes the\
    \ ability to monitor.\n   Changing the behavior of the network without being able\
    \ to observe\n   the effects of the changes is not useful.  On the other hand,\n\
    \   monitoring without control makes some sense.  Simply understanding\n   what\
    \ is causing a network to misbehave can be useful.\n   Control is also a more\
    \ difficult functionality to define.  Control\n   operations other than the most\
    \ generic, are usually device-specific.\n   The problem is not just a matter of\
    \ providing a mechanism for\n   control, but also defining a set of control operations\
    \ which are\n   generally applicable across a diverse set of devices.  Permitting\n\
    \   remote applications to exercise control over an entity also implies\n   the\
    \ need for a suite of safeguards to ensure that unauthorized\n   applications\
    \ cannot harm the network.\n   Because monitoring is the key first step, in this\
    \ initial design of\n   the system, the authors have concentrated more heavily\
    \ on the\n   problems of effective monitoring.  Although the basic control\n \
    \  mechanisms are defined, many components need for control, such as\n   strong\
    \ access control mechanisms, have not been fully defined.\n"
- title: OVERVIEW OF THE HEMS
  contents:
  - "OVERVIEW OF THE HEMS\n   The HEMS is made up of three parts: a query processor\
    \ which can\n   reside on any addressable entity, an event generator which also\n\
    \   resides on entities, and applications which know how to send requests\n  \
    \ to the query processor and interpret the replies.  The query\n   processor and\
    \ applications communicate using a message protocol which\n   runs over a standard\
    \ transport protocol.\n"
- title: The Query Processor
  contents:
  - "The Query Processor\n   The query processor is the key to the management system.\
    \  It\n   interprets all monitoring and control requests.  For optimal network\n\
    \   management, we would like to see query processors on most network\n   entities.\n\
    \   To encourage the implementations of query processors, one of the\n   primary\
    \ goals in designing the query processor was to make it as\n   small and simple\
    \ as possible, consistent with management\n   requirements.\n   Defining the management\
    \ requirements was no small task, since the\n   networking community has not yet\
    \ reached a consensus about what kinds\n   of monitoring information should be\
    \ available from network entities,\n   nor what control functions are required\
    \ to properly manage those\n   entities.  The standards for HEMS were developed\
    \ through discussions\n   with several interest groups, and represent the authors'\
    \ best effort\n   to distill the varying sets of needs.\n   The authors settled\
    \ on a system which was extensible, robust and\n   host-architecture independent,\
    \ and as simple as possible, consistent\n   with the other goals.  Extensibility\
    \ was essential because it is\n   clear that management needs will continue to\
    \ evolve, and a closed\n   system which could not be changed would be obsolete\
    \ almost as soon as\n   it was defined.  Unfortunately, extensibility is also\
    \ the requirement\n   least consistent with simplicity since the need to make\
    \ the system\n   extensible led the authors to use self-describing data formats\
    \ and an\n   interpreted query language.\n   A robust system is required if the\
    \ system is to be useful for\n   diagnosing network failures.  If the monitoring\
    \ system cannot survive\n   at least moderate network failures, it is not useful.\n\
    \   The query processor is designed to be highly extensible.  An\n   application\
    \ sends the query processor instructions about objects to\n   be examined or changed.\
    \  The query processor locates the objects in\n   its host entity, and performs\
    \ the requested operations.  The objects\n   are self-describing, using the binary-encoding\
    \ scheme defined in ISO\n   Standard ASN.1.  Care has been taken to use a limited\
    \ set of the\n   ASN.1 coding set, so that query processor's handling of data\
    \ can be\n   optimized.\n   It is a key feature of HEMS that messages to the query\
    \ processor\n   contain multiple instructions.  The authors felt that this would\
    \ give\n   much higher performance than a remote procedure system which limited\n\
    \   an application to one operation per message.\n   The set of maintained objects\
    \ is standardized across all entities.\n   Every entity is required to manage\
    \ a small set of objects.  In\n   addition, entities of a particular type (e.g.,\
    \ a gateway) may be\n   required to manage a larger set of objects, which are\
    \ optional on\n   other entities.  Entities are also permitted to make additional,\n\
    \   entity-specific objects available to applications.  A method for\n   discovering\
    \ the existence of additional objects is defined.\n   The combination of self-describing\
    \ data, the ability to add to the\n   standard data set, and a query language\
    \ which can be easily enhanced\n   appeared to offer the necessary extensibility.\n"
- title: Event Generator
  contents:
  - "Event Generator\n   On many network entities, particularly critical network components\n\
    \   such as gateways, it is necessary to have a way for the devices to\n   send\
    \ unsolicited status messages to network management centers.  In\n   the IP community,\
    \ these messages have historically been referred to\n   as \"traps\", but for\
    \ compatibility with the ISO nomenclature, in the\n   HEMS system they are called\
    \ \"events\".\n   In the HEMS system, events are handled as slightly specialized\n\
    \   replies to queries, and are sent to one or more management centers.\n   Like\
    \ all other HEMS messages, events are formatted in ASN.1 format.\n   Each event\
    \ is given a well-known code, which is standardized across\n   all entities. \
    \ Provision is also made for entity specific event\n   codes.\n"
- title: Applications
  contents:
  - "Applications\n   The HEMS expects that applications will be more intelligent\
    \ than the\n   query processor.  Among other functions, the applications will\
    \ have\n   to be able to identify and parse entity-specific values which may be\n\
    \   returned.\n   The details of applications are largely not discussed in the\
    \ HEMS\n   specifications because there is very little that needs to be\n   standardized.\
    \  Applications must send requests using the protocols\n   discussed in the next\
    \ section, but the interfaces the applications\n   provide for displaying monitoring\
    \ or control information are entirely\n   application dependent.\n"
- title: Protocols
  contents:
  - "Protocols\n   Query processors and applications communicate using an application-\n\
    \   specific monitoring protocol, the High-Level Entity Management\n   Protocol\
    \ (HEMP).  This protocol provides the formatting rules for the\n   queries and\
    \ their replies.\n   HEMP runs over a standard transport protocol.  There was\
    \ a certain\n   amount of debate in the community about what type of transport\n\
    \   protocol was best suited for monitoring.  The key issue was how\n   reliable\
    \ monitoring interactions needed to be.\n   The authors expect that three types\
    \ of management activities will\n   predominate: status monitoring, firefighting,\
    \ and event reporting.\n   Status monitoring is envisioned as occasional retrieval\
    \ of monitoring\n   information, possibly in response to the receipt of event\
    \ messages.\n   In these situations, the network is expected to be in good working\n\
    \   condition, and monitoring exchanges could probably comfortably work\n   with\
    \ an unreliable transport protocol.  The chance of data loss is\n   small, and\
    \ probably not a serious problem since the data is unlikely\n   to be so important\
    \ that it must be reliably delivered.  (However, it\n   should be noted that some\
    \ applications may prefer reliable delivery\n   because it is more convenient.)\n\
    \   Firefighting is a completely different situation.  In this scenario,\n   one\
    \ or more sites are using management applications to try to locate\n   and fix\
    \ a network problem.  Here we must assume that while the\n   network functions\
    \ (i.e., data can get through), it is not very\n   healthy.  We should assume\
    \ that packets are being lost, that network\n   routes will be non-optimal and\
    \ that it is essential that the\n   monitoring data (which is presumably diagnostic)\
    \ get back to the\n   application and that control requests are reliably delivered\
    \ to the\n   entity.  In such circumstances, a reliable protocol is essential.\n\
    \   Events provide yet another bit of complexity.  Events contain useful\n   status\
    \ information, but experience suggests that this information\n   does not have\
    \ to be delivered reliably.  If the problem is serious\n   enough, it will re-occur\
    \ and the event will be sent again.\n   Furthermore, events will often be sent\
    \ to more than one management\n   center, which would appear to preclude the use\
    \ of connection-\n   oriented, reliable protocols such as TCP for events.\n  \
    \ The current decision has been to establish two possible transport\n   options\
    \ for HEMS.  More experimental systems may use the Versatile\n   Message Transaction\
    \ Protocol (VMTP), an experimental IP transaction\n   protocol.  Near term production\
    \ systems can use a combination of the\n   Transmission Control Protocol (TCP)\
    \ and the User Datagram Protocol\n   (UDP), as described in RFC-1022.\n"
- title: Compatibility with Common Management Information Protocol (CMIP)
  contents:
  - "Compatibility with Common Management Information Protocol (CMIP)\n   Several\
    \ groups have expressed interest in being able to develop\n   applications which\
    \ can use both HEMS and the emerging ISO-defined\n   Common Management Information\
    \ Protocol (CMIP).  It turns out that\n   such a co-existence is feasible, and\
    \ the authors have made an effort\n   to accomodate it.\n   At the highest level,\
    \ both CMIP and HEMS perform operations on\n   objects stored in remote entities,\
    \ and both systems use ASN.1\n   formatting to represent those objects.  This\
    \ makes it possible to\n   develop a standard set of interface routines which\
    \ can be used to\n   access either system, even though underlying mechanics of\
    \ the systems\n   are quite different.\n"
