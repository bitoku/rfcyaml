- contents:
  - '                NETCONF Call Home and RESTCONF Call Home

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This RFC presents NETCONF Call Home and RESTCONF Call Home, which\n
    \  enable a NETCONF or RESTCONF server to initiate a secure connection\n   to
    a NETCONF or RESTCONF client, respectively.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8071.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Motivation  . . . . . . . . . . . . . . . . . . . .
    . . .   3\n     1.2.  Requirements Terminology  . . . . . . . . . . . . . . .
    .   3\n     1.3.  Applicability Statement . . . . . . . . . . . . . . . . .   4\n
    \    1.4.  Relation to RFC 4253  . . . . . . . . . . . . . . . . . .   4\n     1.5.
    \ The NETCONF/RESTCONF Convention . . . . . . . . . . . . .   4\n   2.  Solution
    Overview . . . . . . . . . . . . . . . . . . . . . .   5\n   3.  The NETCONF or
    RESTCONF Client  . . . . . . . . . . . . . . .   5\n     3.1.  Client Protocol
    Operation . . . . . . . . . . . . . . . .   5\n     3.2.  Client Configuration
    Data Model . . . . . . . . . . . . .   7\n   4.  The NETCONF or RESTCONF Server
    \ . . . . . . . . . . . . . . .   7\n     4.1.  Server Protocol Operation . .
    . . . . . . . . . . . . . .   7\n     4.2.  Server Configuration Data Model .
    . . . . . . . . . . . .   8\n   5.  Security Considerations . . . . . . . . .
    . . . . . . . . . .   9\n   6.  IANA Considerations . . . . . . . . . . . . .
    . . . . . . . .  10\n   7.  References  . . . . . . . . . . . . . . . . . . .
    . . . . . .  11\n     7.1.  Normative References  . . . . . . . . . . . . . .
    . . . .  11\n     7.2.  Informative References  . . . . . . . . . . . . . . .
    . .  12\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 13\n   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This RFC presents NETCONF Call Home and RESTCONF Call Home,
    which\n   enable a NETCONF or RESTCONF server to initiate a secure connection\n
    \  to a NETCONF or RESTCONF client, respectively.\n   NETCONF Call Home supports
    both of the secure transports used by the\n   Network Configuration Protocol (NETCONF)
    [RFC6241], Secure Shell\n   (SSH), and Transport Layer Security (TLS).  The NETCONF
    protocol's\n   binding to SSH is defined in [RFC6242].  The NETCONF protocol's\n
    \  binding to TLS is defined in [RFC7589].\n   RESTCONF Call Home only supports
    TLS, the same as the RESTCONF\n   protocol [RFC8040].  The RESTCONF protocol's
    binding to TLS is\n   defined in [RFC8040].\n   The SSH protocol is defined in
    [RFC4253].  The TLS protocol is\n   defined in [RFC5246].  Both the SSH and TLS
    protocols are layered on\n   top of the TCP protocol, which is defined in [RFC793].\n
    \  Both NETCONF Call Home and RESTCONF Call Home preserve all but one of\n   the
    client/server roles in their respective protocol stacks, as\n   compared to client-initiated
    NETCONF and RESTCONF connections.  The\n   one and only role reversal that occurs
    is at the TCP layer; that is,\n   which peer is the TCP client and which is the
    TCP server.\n   For example, a network element is traditionally the TCP server.\n
    \  However, when calling home, the network element initially assumes the\n   role
    of the TCP client.  The network element's secure transport-layer\n   roles (SSH
    server, TLS server) and its application-layer roles\n   (NETCONF server, RESTCONF
    server) all remain the same.\n   Having consistency in both the secure transport-layer
    (SSH, TLS) and\n   application-layer (NETCONF, RESTCONF) roles conveniently enables\n
    \  deployed network management infrastructure to support call home also.\n   For
    instance, existing certificate chains and user authentication\n   mechanisms are
    unaffected by call home.\n"
  - contents:
    - "1.1.  Motivation\n   Call home is generally useful for both the initial deployment
      and\n   ongoing management of networking elements.  Here are some scenarios\n
      \  enabled by call home:\n   o  The network element may proactively \"call home\"
      after being\n      powered on for the first time in order to register itself
      with its\n      management system.\n   o  The network element may access the
      network in a way that\n      dynamically assigns it an IP address, but does
      not register its\n      assigned IP address to a mapping service (e.g., dynamic
      DNS).\n   o  The network element may be deployed behind a firewall that\n      implements
      Network Address Translation (NAT) for all internal\n      network IP addresses.\n
      \  o  The network element may be deployed behind a firewall that does\n      not
      allow any management access to the internal network.\n   o  The network element
      may be configured in \"stealth mode\", and thus\n      does not have any open
      ports for the management system to connect\n      to.\n   o  The operator may
      prefer to have network elements initiate\n      management connections, believing
      it is easier to secure one open\n      port in the data center than to have
      an open port on each network\n      element in the network.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n"
    title: 1.2.  Requirements Terminology
  - contents:
    - "1.3.  Applicability Statement\n   The techniques described in this document
      are suitable for network\n   management scenarios such as the ones described
      in Section 1.1.\n   However, these techniques are only defined for NETCONF Call
      Home and\n   RESTCONF Call Home, as described in this document.\n   The reason
      for this restriction is that different protocols have\n   different security
      assumptions.  The NETCONF and RESTCONF protocols\n   require clients and servers
      to verify the identity of the other\n   party.  This requirement is specified
      for the NETCONF protocol in\n   Section 2.2 of [RFC6241], and is specified for
      the RESTCONF protocol\n   in Sections 2.4 and 2.5 of [RFC8040].\n   This contrasts
      with the base SSH and TLS protocols, which do not\n   require programmatic verification
      of the other party (Section 9.3.4\n   of [RFC4251], Section 4 of [RFC4252],
      and Section 7.3 of [RFC5246]).\n   In such circumstances, allowing the SSH/TLS
      server to contact the\n   SSH/TLS client would open new vulnerabilities.  Any
      use of call home\n   with SSH/TLS for purposes other than NETCONF or RESTCONF
      will need a\n   thorough contextual risk assessment.  A risk assessment for
      this RFC\n   is in the Security Considerations section (Section 5).\n"
    title: 1.3.  Applicability Statement
  - contents:
    - "1.4.  Relation to RFC 4253\n   This document uses the SSH Transport Layer Protocol
      [RFC4253] with\n   the exception that the statement \"The client initiates the\n
      \  connection\" made in Section 4 of RFC 4253 does not apply.  Assuming\n   the
      reference to the client means \"SSH client\" and the reference to\n   the connection
      means \"TCP connection\", this statement doesn't hold\n   true in call home,
      where the network element is the SSH server and\n   yet still initiates the
      TCP connection.  Security implications\n   related to this change are discussed
      in Section 5.\n"
    title: 1.4.  Relation to RFC 4253
  - contents:
    - "1.5.  The NETCONF/RESTCONF Convention\n   Throughout the remainder of this
      document, the term \"NETCONF/\n   RESTCONF\" is used as an abbreviation in place
      of the text \"the\n   NETCONF or the RESTCONF\".  The NETCONF/RESTCONF abbreviation
      is not\n   intended to require or to imply that a client or server must\n   implement
      both the NETCONF standard and the RESTCONF standard.\n"
    title: 1.5.  The NETCONF/RESTCONF Convention
  title: 1.  Introduction
- contents:
  - "2.  Solution Overview\n   The diagram below illustrates call home from a protocol-layering\n
    \  perspective:\n          NETCONF/RESTCONF                    NETCONF/RESTCONF\n
    \              Server                              Client\n                 |
    \                                   |\n                 |         1. TCP                     |\n
    \                |----------------------------------->|\n                 |                                    |\n
    \                |                                    |\n                 |         2.
    SSH/TLS                 |\n                 |<-----------------------------------|\n
    \                |                                    |\n                 |                                    |\n
    \                |         3. NETCONF/RESTCONF        |\n                 |<-----------------------------------|\n
    \                |                                    |\n                Note:
    Arrows point from the \"client\" to\n                  the \"server\" at each
    protocol layer.\n                   Figure 1: Call Home Sequence Diagram\n   This
    diagram makes the following points:\n   1.  The NETCONF/RESTCONF server begins
    by initiating a TCP connection\n       to the NETCONF/RESTCONF client.\n   2.
    \ Using this TCP connection, the NETCONF/RESTCONF client initiates\n       an
    SSH/TLS session to the NETCONF/RESTCONF server.\n   3.  Using this SSH/TLS session,
    the NETCONF/RESTCONF client initiates\n       a NETCONF/RESTCONF session to the
    NETCONF/RESTCONF server.\n"
  title: 2.  Solution Overview
- contents:
  - "3.  The NETCONF or RESTCONF Client\n   The term \"client\" is defined in [RFC6241],
    Section 1.1.  In the\n   context of network management, the NETCONF/RESTCONF client
    might be a\n   network management system.\n"
  - contents:
    - "3.1.  Client Protocol Operation\n   C1  The NETCONF/RESTCONF client listens
      for TCP connection requests\n       from NETCONF/RESTCONF servers.  The client
      MUST support accepting\n       TCP connections on the IANA-assigned ports defined
      in Section 6,\n       but MAY be configured to listen to a different port.\n
      \  C2  The NETCONF/RESTCONF client accepts an incoming TCP connection\n       request
      and a TCP connection is established.\n   C3  Using this TCP connection, the
      NETCONF/RESTCONF client starts\n       either the SSH client [RFC4253] or the
      TLS client [RFC5246]\n       protocol.  For example, assuming the use of the
      IANA-assigned\n       ports, the SSH client protocol is started when the connection
      is\n       accepted on port 4334 and the TLS client protocol is started when\n
      \      the connection is accepted on either port 4335 or port 4336.\n   C4  When
      using TLS, the NETCONF/RESTCONF client MUST advertise\n       \"peer_allowed_to_send\",
      as defined by [RFC6520].  This is\n       required so that NETCONF/RESTCONF
      servers can depend on it being\n       there for call home connections, when
      keep-alives are needed the\n       most.\n   C5  As part of establishing an
      SSH or TLS connection, the NETCONF/\n       RESTCONF client MUST validate the
      server's presented host key or\n       certificate.  This validation MAY be
      accomplished by certificate\n       path validation or by comparing the host
      key or certificate to a\n       previously trusted or \"pinned\" value.  If
      a certificate is\n       presented and it contains revocation-checking information,
      the\n       NETCONF/RESTCONF client SHOULD check the revocation status of the\n
      \      certificate.  If it is determined that a certificate has been\n       revoked,
      the client MUST immediately close the connection.\n   C6  If certificate path
      validation is used, the NETCONF/RESTCONF\n       client MUST ensure that the
      presented certificate has a valid\n       chain of trust to a preconfigured
      issuer certificate, and that\n       the presented certificate encodes an \"identifier\"
      [RFC6125] that\n       the client was aware of before the connection attempt.
      \ How\n       identifiers are encoded in certificates MAY be determined by a\n
      \      policy associated with the certificate's issuer.  For instance, a\n       given
      issuer may be known to only sign IDevID certificates\n       [Std-802.1AR-2009]
      having a unique identifier (e.g., a serial\n       number) in the X.509 certificate's
      \"CommonName\" field.\n   C7  After the server's host key or certificate is
      validated, the SSH\n       or TLS protocol proceeds as normal to establish an
      SSH or TLS\n       connection.  When performing client authentication with the\n
      \      NETCONF/RESTCONF server, the NETCONF/RESTCONF client MUST only\n       use
      credentials that it had previously associated for the\n       NETCONF/RESTCONF
      server's presented host key or server\n       certificate.\n   C8  Once the
      SSH or TLS connection is established, the NETCONF/\n       RESTCONF client starts
      either the NETCONF client [RFC6241] or\n       RESTCONF client [RFC8040] protocol.
      \ Assuming the use of the\n       IANA-assigned ports, the NETCONF client protocol
      is started when\n       the connection is accepted on either port 4334 or port
      4335 and\n       the RESTCONF client protocol is started when the connection
      is\n       accepted on port 4336.\n"
    title: 3.1.  Client Protocol Operation
  - contents:
    - "3.2.  Client Configuration Data Model\n   How a NETCONF or RESTCONF client
      is configured is outside the scope\n   of this document.  For instance, such
      a configuration might be used\n   to enable listening for call home connections,
      configuring trusted\n   certificate issuers, or configuring identifiers for
      expected\n   connections.  That said, YANG [RFC7950] data modules for configuring\n
      \  NETCONF and RESTCONF clients, including call home, are provided in\n   [NETCONF-MODELS]
      and [RESTCONF-MODELS].\n"
    title: 3.2.  Client Configuration Data Model
  title: 3.  The NETCONF or RESTCONF Client
- contents:
  - "4.  The NETCONF or RESTCONF Server\n   The term \"server\" is defined in [RFC6241],
    Section 1.1.  In the\n   context of network management, the NETCONF/RESTCONF server
    might be a\n   network element or a device.\n"
  - contents:
    - "4.1.  Server Protocol Operation\n   S1  The NETCONF/RESTCONF server initiates
      a TCP connection request to\n       the NETCONF/RESTCONF client.  The source
      port may be per local\n       policy or randomly assigned by the operating system.
      \ The server\n       MUST support connecting to one of the IANA-assigned ports
      defined\n       in Section 6, but MAY be configured to connect to a different\n
      \      port.  Using the IANA-assigned ports, the server connects to port\n       4334
      for NETCONF over SSH, port 4335 for NETCONF over TLS, and\n       port 4336
      for RESTCONF over TLS.\n   S2  The TCP connection request is accepted and a
      TCP connection is\n       established.\n   S3  Using this TCP connection, the
      NETCONF/RESTCONF server starts\n       either the SSH server [RFC4253] or the
      TLS server [RFC5246]\n       protocol, depending on how it is configured.  For
      example,\n       assuming the use of the IANA-assigned ports, the SSH server\n
      \      protocol is used after connecting to the remote port 4334 and the\n       TLS
      server protocol is used after connecting to either remote\n       port 4335
      or remote port 4336.\n   S4  As part of establishing the SSH or TLS connection,
      the NETCONF/\n       RESTCONF server will send its host key or certificate to
      the\n       client.  If a certificate is sent, the server MUST also send all\n
      \      intermediate certificates leading up to a well-known and trusted\n       issuer.
      \ How to send a list of certificates is defined for SSH in\n       [RFC6187],
      Section 2.1, and for TLS in [RFC5246], Section 7.4.2.\n   S5  Establishing an
      SSH or TLS session requires server authentication\n       of client credentials
      in all cases except with RESTCONF, where\n       some client authentication
      schemes occur after the secure\n       transport connection (TLS) has been established.
      \ If transport-\n       level (SSH or TLS) client authentication is required,
      and the\n       client is unable to successfully authenticate itself to the\n
      \      server in an amount of time defined by local policy, the server\n       MUST
      close the connection.\n   S6  Once the SSH or TLS connection is established,
      the NETCONF/\n       RESTCONF server starts either the NETCONF server [RFC6241]
      or\n       RESTCONF server [RFC8040] protocol, depending on how it is\n       configured.
      \ Assuming the use of the IANA-assigned ports, the\n       NETCONF server protocol
      is used after connecting to remote port\n       4334 or remote port 4335, and
      the RESTCONF server protocol is\n       used after connecting to remote port
      4336.\n   S7  If a persistent connection is desired, the NETCONF/RESTCONF\n
      \      server, as the connection initiator, SHOULD actively test the\n       aliveness
      of the connection using a keep-alive mechanism.  For\n       TLS-based connections,
      the NETCONF/RESTCONF server SHOULD send\n       HeartbeatRequest messages, as
      defined by [RFC6520].  For SSH-\n       based connections, per Section 4 of
      [RFC4254], the server SHOULD\n       send an SSH_MSG_GLOBAL_REQUEST message
      with a purposely\n       nonexistent \"request name\" value (e.g., keepalive@ietf.org)
      and\n       the \"want reply\" value set to '1'.\n"
    title: 4.1.  Server Protocol Operation
  - contents:
    - "4.2.  Server Configuration Data Model\n   How a NETCONF or RESTCONF server
      is configured is outside the scope\n   of this document.  This includes configuration
      that might be used to\n   specify hostnames, IP addresses, ports, algorithms,
      or other relevant\n   parameters.  That said, YANG [RFC7950] data modules for
      configuring\n   NETCONF and RESTCONF servers, including call home, are provided
      in\n   [NETCONF-MODELS] and [RESTCONF-MODELS].\n"
    title: 4.2.  Server Configuration Data Model
  title: 4.  The NETCONF or RESTCONF Server
- contents:
  - "5.  Security Considerations\n   The security considerations described in [RFC6242]
    and [RFC7589], and\n   by extension [RFC4253], [RFC5246], and [RFC8040] apply
    here as well.\n   This RFC deviates from standard SSH and TLS usage by having
    the SSH/\n   TLS server initiate the underlying TCP connection.  This reversal
    is\n   incongruous with [RFC4253], which says \"the client initiates the\n   connection\"
    and also [RFC6125], which says \"the client MUST construct\n   a list of acceptable
    reference identifiers, and MUST do so\n   independently of the identifiers presented
    by the service.\"\n   Risks associated with these variances are centered around
    server\n   authentication and the inability for clients to compare an\n   independently
    constructed reference identifier to one presented by\n   the server.  To mitigate
    against these risks, this RFC requires that\n   the NETCONF/RESTCONF client validate
    the server's SSH host key or\n   certificate, by certificate path validation to
    a preconfigured issuer\n   certificate, or by comparing the host key or certificate
    to a\n   previously trusted or \"pinned\" value.  Furthermore, when a\n   certificate
    is used, this RFC requires that the client be able to\n   match an identifier
    encoded in the presented certificate with an\n   identifier the client was preconfigured
    to expect (e.g., a serial\n   number).\n   For cases when the NETCONF/RESTCONF
    server presents an X.509\n   certificate, NETCONF/RESTCONF clients should ensure
    that the\n   preconfigured issuer certificate used for certificate path validation\n
    \  is unique to the manufacturer of the server.  That is, the\n   certificate
    should not belong to a third-party certificate authority\n   that might issue
    certificates for more than one manufacturer.  This\n   is especially important
    when a client authentication mechanism\n   passing a shared secret (e.g., a password)
    to the server is used.\n   Not doing so could otherwise lead to a case where the
    client sends\n   the shared secret to another server that happens to have the
    same\n   identity (e.g., a serial number) as the server the client was\n   configured
    to expect.\n   Considerations not associated with server authentication follow
    next.\n   Internet-facing hosts running NETCONF Call Home or RESTCONF Call Home\n
    \  will be fingerprinted via scanning tools such as \"zmap\" [zmap].  Both\n   SSH
    and TLS provide many ways in which a host can be fingerprinted.\n   SSH and TLS
    servers are fairly mature and able to withstand attacks,\n   but SSH and TLS clients
    may not be as robust.  Implementers and\n   deployments need to ensure that software
    update mechanisms are\n   provided so that vulnerabilities can be fixed in a timely
    fashion.\n   An attacker could launch a denial-of-service (DoS) attack on the\n
    \  NETCONF/RESTCONF client by having it perform computationally\n   expensive
    operations, before deducing that the attacker doesn't\n   possess a valid key.
    \ For instance, in TLS 1.3 [TLS1.3], the\n   ClientHello message contains a Key
    Share value based on an expensive\n   asymmetric key operation.  Common precautions
    mitigating DoS attacks\n   are recommended, such as temporarily blacklisting the
    source address\n   after a set number of unsuccessful login attempts.\n   When
    using call home with the RESTCONF protocol, special care is\n   required when
    using some HTTP authentication schemes, especially the\n   Basic [RFC7617] and
    Digest [RFC7616] schemes, which convey a shared\n   secret (e.g., a password).
    \ Implementers and deployments should be\n   sure to review the Security Considerations
    section in the RFC for any\n   HTTP client authentication scheme used.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has assigned three TCP port numbers in the \"User
    Ports\" range\n   with the service names \"netconf-ch-ssh\", \"netconf-ch-tls\",
    and\n   \"restconf-ch-tls\".  These ports will be the default ports for NETCONF\n
    \  Call Home and RESTCONF Call Home protocols.  Below is the\n   registration
    template following the rules in [RFC6335].\n   Service Name:           netconf-ch-ssh\n
    \  Port Number:            4334\n   Transport Protocol(s):  TCP\n   Description:
    \           NETCONF Call Home (SSH)\n   Assignee:               IESG <iesg@ietf.org>\n
    \  Contact:                IETF Chair <chair@ietf.org>\n   Reference:              RFC
    8071\n   Service Name:           netconf-ch-tls\n   Port Number:            4335\n
    \  Transport Protocol(s):  TCP\n   Description:            NETCONF Call Home (TLS)\n
    \  Assignee:               IESG <iesg@ietf.org>\n   Contact:                IETF
    Chair <chair@ietf.org>\n   Reference:              RFC 8071\n   Service Name:
    \          restconf-ch-tls\n   Port Number:            4336\n   Transport Protocol(s):
    \ TCP\n   Description:            RESTCONF Call Home (TLS)\n   Assignee:               IESG
    <iesg@ietf.org>\n   Contact:                IETF Chair <chair@ietf.org>\n   Reference:
    \             RFC 8071\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC793]   Postel, J., \"Transmission Control
      Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n
      \             <http://www.rfc-editor.org/info/rfc793>.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4251]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Protocol
      Architecture\", RFC 4251, DOI 10.17487/RFC4251,\n              January 2006,
      <http://www.rfc-editor.org/info/rfc4251>.\n   [RFC4252]  Ylonen, T. and C. Lonvick,
      Ed., \"The Secure Shell (SSH)\n              Authentication Protocol\", RFC
      4252, DOI 10.17487/RFC4252,\n              January 2006, <http://www.rfc-editor.org/info/rfc4252>.\n
      \  [RFC4253]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Transport
      Layer Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n              January 2006,
      <http://www.rfc-editor.org/info/rfc4253>.\n   [RFC4254]  Ylonen, T. and C. Lonvick,
      Ed., \"The Secure Shell (SSH)\n              Connection Protocol\", RFC 4254,
      DOI 10.17487/RFC4254,\n              January 2006, <http://www.rfc-editor.org/info/rfc4254>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125, March\n              2011, <http://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6187]  Igoe, K. and D. Stebila, \"X.509v3 Certificates for Secure\n              Shell
      Authentication\", RFC 6187, DOI 10.17487/RFC6187,\n              March 2011,
      <http://www.rfc-editor.org/info/rfc6187>.\n   [RFC6241]  Enns, R., Ed., Bjorklund,
      M., Ed., Schoenwaelder, J., Ed.,\n              and A. Bierman, Ed., \"Network
      Configuration Protocol\n              (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241,
      June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n   [RFC6242]
      \ Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <http://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire,
      \"Internet Assigned Numbers Authority (IANA)\n              Procedures for the
      Management of the Service Name and\n              Transport Protocol Port Number
      Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n
      \             <http://www.rfc-editor.org/info/rfc6335>.\n   [RFC6520]  Seggelmann,
      R., Tuexen, M., and M. Williams, \"Transport\n              Layer Security (TLS)
      and Datagram Transport Layer Security\n              (DTLS) Heartbeat Extension\",
      RFC 6520,\n              DOI 10.17487/RFC6520, February 2012,\n              <http://www.rfc-editor.org/info/rfc6520>.\n
      \  [RFC7589]  Badra, M., Luchuk, A., and J. Schoenwaelder, \"Using the\n              NETCONF
      Protocol over Transport Layer Security (TLS) with\n              Mutual X.509
      Authentication\", RFC 7589,\n              DOI 10.17487/RFC7589, June 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7589>.\n   [RFC8040]  Bierman,
      A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\", RFC
      8040, DOI 10.17487/RFC8040, January 2017,\n              <http://www.rfc-editor.org/info/rfc8040>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [NETCONF-MODELS]\n              Watsen, K.,
      Wu, G., and J. Schoenwaelder, \"NETCONF Client\n              and Server Models\",
      Work in Progress, draft-ietf-netconf-\n              netconf-client-server-01,
      November 2016.\n   [RESTCONF-MODELS]\n              Watsen, K. and J. Schoenwaelder,
      \"RESTCONF Client and\n              Server Models\", Work in Progress draft-ietf-netconf-\n
      \             restconf-client-server-01, November 2016.\n   [RFC7616]  Shekh-Yusef,
      R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n              Digest Access Authentication\",
      RFC 7616,\n              DOI 10.17487/RFC7616, September 2015,\n              <http://www.rfc-editor.org/info/rfc7616>.\n
      \  [RFC7617]  Reschke, J., \"The 'Basic' HTTP Authentication Scheme\",\n              RFC
      7617, DOI 10.17487/RFC7617, September 2015,\n              <http://www.rfc-editor.org/info/rfc7617>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <http://www.rfc-editor.org/info/rfc7950>.\n
      \  [Std-802.1AR-2009]\n              IEEE, \"IEEE Standard for Local and metropolitan
      area\n              networks - Secure Device Identity\", IEEE Std 802.1AR-2009,\n
      \             DOI 10.1109/IEEESTD.2009.5367679, December 2009,\n              <http://standards.ieee.org/findstds/\n
      \             standard/802.1AR-2009.html>.\n   [TLS1.3]   Rescorla, E., \"The
      Transport Layer Security (TLS) Protocol\n              Version 1.3\", Work in
      Progress, draft-ietf-tls-tls13-18,\n              October 2016.\n   [zmap]     Durumeric,
      Z., Wustrow, E., and J. Halderman, \"ZMap: Fast\n              Internet-Wide
      Scanning and its Security Applications\",\n              22nd Usenix Security
      Symposium, August 2013,\n              <https://zmap.io/paper.html>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The author would like to thank the following (ordered by
    last name)\n   for lively discussions on the mailing list and in the halls: Jari\n
    \  Arkko, Andy Bierman, Martin Bjorklund, Ben Campbell, Spencer Dawkins,\n   Mehmet
    Ersue, Stephen Farrell, Wes Hardaker, Stephen Hanna, David\n   Harrington, Jeffrey
    Hutzelman, Simon Josefsson, Radek Krejci, Suresh\n   Krishnan, Barry Leiba, Alan
    Luchuk, Kathleen Moriarty, Mouse, Russ\n   Mundy, Tom Petch, Peter Saint-Andre,
    Joseph Salowey, Juergen\n   Schoenwaelder, Martin Stiemerling, Joe Touch, Hannes
    Tschofenig, Sean\n   Turner, and Bert Wijnen.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Kent Watsen\n   Juniper Networks\n   Email: kwatsen@juniper.net\n"
  title: Author's Address
