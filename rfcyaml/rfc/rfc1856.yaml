- title: __initial_text__
  contents:
  - '        The Opstat Client-Server Model for Statistics Retrieval

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Network administrators gather data related to the performance,\n\
    \   utilization, usability and growth of their data network.  The amount\n   of\
    \ raw data gathered is usually quite large, typically ranging\n   somewhere between\
    \ several megabytes to several gigabytes of data each\n   month.  Few (if any)\
    \ tools exist today for the sharing of that raw\n   data among network operators\
    \ or between a network service provider\n   (NSP) and its customers.  This document\
    \ defines a model and protocol\n   for a set of tools which could be used by NSPs\
    \ and Network Operation\n   Centers (NOCs) to share data among themselves and\
    \ with customers.\n"
- title: 1.0  Introduction
  contents:
  - "1.0  Introduction\n   Network administrators gather data related to the performance,\n\
    \   utilization, usability and growth of their data network.  The primary\n  \
    \ goal of gathering the data is to facilitate near-term problem\n   isolation\
    \ and longer-term network planning within the organization.\n   The amount of\
    \ raw data gathered is usually quite large, typically\n   ranging somewhere between\
    \ several megabytes to several gigabytes of\n   data each month.  From this raw\
    \ data, the network administrator\n   produces various types of reports.  Few\
    \ (if any) tools exist today\n   for the sharing of that raw data among network\
    \ operators or between a\n   network service provider (NSP) and its customers.\
    \  This document\n   defines a model and protocol for a set of tools which could\
    \ be used\n   by NSPs and Network Operation Centers (NOCs) to share data among\n\
    \   themselves and with customers.\n"
- title: 1.1 The OPSTAT Model
  contents:
  - "1.1 The OPSTAT Model\n   Under the Operational Statistics model [1], there exists\
    \ a common\n   model under which tools exist for the collection, storage, retrieval\n\
    \   and presentation of network management data.\n   This document defines a protocol\
    \ which would allow a client on a\n   remote machine to retrieve data from a central\
    \ server, which itself\n   retrieves from the common statistics database.  The\
    \ client then\n   presents the data to the user in the form requested (maybe to\
    \ a X-\n   window, or to paper).\n   The basic model used for the retrieval methods\
    \ defined in this\n   document is a client-server model.  This architecture envisions\
    \ that\n   each NOC (or NSP) should install a server which provides locally\n\
    \   collected information for clients.  Using a query language the client\n  \
    \ should be able to define the network object of interest, the\n   interface,\
    \ the metrics and the time period to be examined.  Using a\n   reliable transport-layer\
    \ protocol (e.g., TCP), the server will\n   transmit the requested data.  Once\
    \ this data is received by the\n   client it could be processed and presented\
    \ by a variety of tools\n   including displaying the data in a X window, sending\
    \ postscript to a\n   printer, or displaying the raw data on the user's terminal.\n\
    \   The remainder of this document describes how the client and server\n   interact,\
    \ describes the protocol used between the client and server,\n   and discusses\
    \ a variety of other issues surrounding the sharing of\n   data.\n"
- title: 2.0  Client-Server Description
  contents:
  - '2.0  Client-Server Description

    '
- title: 2.1  The Client
  contents:
  - "2.1  The Client\n   The basic function of the client is to retrieve data from\
    \ the server.\n   It will accept requests from the user, translate those requests\
    \ into\n   the common retrieval protocol and transmit them to the server, wait\n\
    \   for the server's reply, and send that reply to the user.\n   Note that this\
    \ document does not define how the data should be\n   presented to the user. \
    \ There are many methods of doing this\n   including:\n    - use a X based tool\
    \ that displays graphs (line, histogram, etc.)\n    - generate PostScript output\
    \ to be sent to a printer\n    - dump the raw data to the user's terminal\n  \
    \ Future documents based on the Operational Statistics model may define\n   standard\
    \  graphs  and variables to be displayed, but this is work yet\n   to be done\
    \ (as of this writing).\n"
- title: 2.2  The Server
  contents:
  - "2.2  The Server\n   The basic function of the server is to accept connections\
    \ from a\n   client, accept some series of commands from the client and perform\
    \ a\n   series of actions based on the commands, and then close the\n   connection\
    \ to the client.\n   The server must have some type of configuration file, which\
    \ is left\n   undefined in this document.  The configuration file would list users\n\
    \   that could access the server along with the authentication they would\n  \
    \ use.  The configuration file should also allow the specification of\n   the\
    \ data items that the user should be permitted to access (and, by\n   implication,\
    \ not allowed to access).  Server security concerns are\n   specifically addressed\
    \ in Section 4.\n"
- title: 3.0  Protocol Commands
  contents:
  - "3.0  Protocol Commands\n   This section defines the commands which may be transmitted\
    \ to the\n   server and the server responses to those commands.  The available\n\
    \   commands are:\n    LOGIN  - accept new connection\n    EXIT   - disconnect\n\
    \    LIST   - show available variables\n    SELECT - mark data for retrieval\n\
    \    STATUS - show the state of the server\n    GET    - download data to the\
    \ client\n   In addition, a state machine describing specific actions by the\n\
    \   server is included.  Server security concerns are addressed in\n   Section\
    \ 4.\n   Note that in some of the descriptions below, the term <ASCII-STRING>\n\
    \   is used.  This refers to printable ASCII characters, defined as all\n   letters,\
    \ numbers, and special characters such as $, %, or *.  It\n   specifically excludes\
    \ all special control characters in the lower\n   parts of the character set (i.e.,\
    \ 0x00 - 0x1F), and any such\n   characters that are received by the server or\
    \ client should be\n   ignored.\n"
- title: 3.1  Command Return Codes
  contents:
  - "3.1  Command Return Codes\n   The responses a server will return to a client\
    \ are of the form:\n    RETURN-INFO  ::=  <RETURN-CODE> \" <ASCII-STRING> \" |\
    \ <RETURN-CODE>\n    RETURN-CODE  ::=  <MAIN-CODE><COMMAND><SUB-CODE>\n    MAIN-CODE\
    \    ::=  1..9\n    COMMAND      ::=  1..9\n    SUB-CODE     ::=  0..9\n   For\
    \ each command sent to the server, the server returns a series of\n   three digit\
    \ numeric codes which specifies the result of the\n   operation, plus optional\
    \ ASCII text for humans.  The value of MAIN-\n   CODE specifies what happened,\
    \ as in:\n    1   Error\n    9   Success / Informational\n    The commands are\
    \ encoded as:\n    1   LOGIN\n    2   SELECT\n    3   STATUS\n    4   LIST\n \
    \   5   GET\n    9   EXIT\n   The following specific error codes must be supported\
    \ by  all  servers\n   and clients:\n    110  Login Invalid\n    113  Scanning\
    \ Error during LOGIN\n    120  SELECT Failed\n    130  STATUS Failed\n    140\
    \  LIST Failed\n    141  Bad LIST encoding\n    150  GET Failed\n    151  GET\
    \ doesn't support that type of encoding\n    910  Login Accepted\n    920  SELECT\
    \ successful\n    931  STATUS Output Starting\n    932  STATUS Output Done\n \
    \   941  LIST lookup successful, here comes the data!\n    942  LIST dump done!\n\
    \    951  GET lookup successful, here comes the data!\n    952  GET dump done!\n\
    \    990  Server closing connection after EXIT received\n   Other codes may be\
    \ used, but may not be supported by all clients or\n   servers.\n"
- title: 3.2  The LOGIN Command
  contents:
  - "3.2  The LOGIN Command\n   The LOGIN command authenticates a user to the server.\
    \  The format  of\n   the LOGIN command is:\n    LOGIN-CMD    ::=  LOGIN <username>\
    \ <auth-type>\n    USERNAME     ::=  \" <ASCII-STRING> \"\n    AUTH-TYPE    ::=\
    \  \"none\" | \"password\" | \" <ASCII-STRING> \"\n    CHAL-CMD     ::=  CHAL\
    \ \" <ASCII-STRING> \"\n    AUTH-CMD     ::=  AUTH \" <ASCII-STRING> \"\n   The\
    \ authentication types supported by each server will vary, but must\n   include\
    \ \"none\" and \"password\".  Note that a server may or may not\n   choose to\
    \ allow logins via either of these methods, but it must\n   recognize the two\
    \ special authentication types.\n   In processing a LOGIN command sequence, the\
    \ server first checks the\n   username and authentication type requested.  If\
    \ the username is\n   invalid (e.g., there's no such user known to the server)\
    \ or the\n   authentication type requested is not supported by the server, then\n\
    \   the server must return a 110 error and close the connection after\n   faking\
    \ the challenge/authentication process (see examples below).\n   After passing\
    \ the username and authentication type checking, a\n   challenge must be sent.\
    \  Note that the challenge will be specific to\n   the type of authentication\
    \ requested, and the ASCII string may be an\n   empty string if no specific challenge\
    \ is needed (such as in the\n   password-only case). The next command the client\
    \ returns must be an\n   AUTH response, and if not, the server must close the\
    \ connection.\n   After processing the authentication information, the server\
    \ must\n   return a 910 code if the authentication process is successful, or a\n\
    \   110 error messsage if unsuccessful. Additionally, if the\n   authentication\
    \ fails, the server must immediately close the\n   connection.\n   If, at any\
    \ point, during the LOGIN sequence, a syntax error occurs (a\n   client doesn't\
    \ send the correct number of arguments in the LOGIN\n   command, for example),\
    \ the server must return a 113 error and close\n   the connection.\n   If the\
    \ special AUTH-TYPE of \"none\" is used, and the server allows the\n   specified\
    \ username (such as anonymous) to login without\n   authentication, then the server\
    \ should still send a \"CHAL\" response\n   to get additional information about\
    \ the person logging in.  The\n   server may then choose to allow or disallow\
    \ the login based on the\n   information returned in the AUTH response.\n   An\
    \ example of an invalid authentication type requested:\n    >LOGIN \"cow\" \"\
    s/key\"\n    <CHAL \"lo35098 98\"\n    >AUTH \"COW DOG BARK CAT MOO MEOW\"\n \
    \   <110 \"Login invalid\"\n    The server didn't support S/Key, but it made it\
    \ appear to the user as\n    if it did.  An example of an authentication failure:\n\
    \    >LOGIN \"dog\" \"securid\"\n    <CHAL \"enter passcode\"\n    >AUTH \"103945\"\
    \n    <110 \"Login invalid\"\n   The user gave the wrong number for SecurID authentication.\
    \  An\n   example of a successful login:\n    >LOGIN \"cat\" \"password\"\n  \
    \  <CHAL \"send the dumb clear-text password\"\n    >AUTH \"foobar\"\n    <910\
    \ \"Login accepted\"\n    or\n    >LOGIN \"anonymous\" \"none\"\n    <CHAL \"\
    tell me who you are anyway\"\n    >AUTH \"bessie@barn.farm.com\"\n    <910 \"\
    Login accepted\"\n    An example of a invalid username:\n    >LOGIN \"mule\" \"\
    skey\"\n    <CHAL \"78 lo39065\"\n    >AUTH \"COW DOG FRED LOG COLD WAR\"\n  \
    \  <110 \"Login invalid\"\n   The server should have some type of logging mechanism\
    \ to record  both\n   successful  and unsuccessful login attempts for a system\
    \ adminstrator\n   to peruse.\n"
- title: 3.3  The EXIT Command
  contents:
  - "3.3  The EXIT Command\n   The EXIT command disconnects a current user from the\
    \ server.  The\n   format of the EXIT command is:\n   EXIT\n   Note that upon\
    \ reception of an EXIT command, the server must always\n   close the connection,\
    \ even if it would be appropriate to return an\n   ERROR return code.\n    A sample\
    \ EXIT command:\n    >EXIT\n    <990 \"OK, Bye now\"\n"
- title: 3.4  The SELECT Command
  contents:
  - "3.4  The SELECT Command\n   The SELECT command is the function used to tag data\
    \ for retrieval\n   from the server.  The SELECT command has the format:\n   \
    \ SELECT-COM   ::=  SELECT <NETWORK> <DEVICE> <INTERFACE> <VARNAME>\n        \
    \              <GRANULARITY> <START-DATE> <START-TIME> <END-DATE>\n          \
    \            <END-TIME> <AGG> <SELECT-COND>\n    NETWORK      ::=  <ASCII-STRING>\n\
    \    DEVICE       ::=  <ASCII-STRING>\n    INTERFACE    ::=  <ASCII-STRING>\n\
    \    VARNAME      ::=  <ASCII-STRING>\n    GRANULARITY  ::=  <ASCII-STRING>\n\
    \    START-DATE   ::=  <DATE-TYPE>\n    END-DATE     ::=  <DATE-TYPE>\n    DATE-TYPE\
    \    ::=  YYYY-MM-YY\n    START-TIME   ::=  <TIME-TYPE>\n    END-TIME     ::=\
    \  <TIME-TYPE>\n    TIME-TYPE    ::=  HH:MM:SS\n    AGG          ::=  <AGG-TYPE>\
    \ | NULL\n    AGG-TYPE     ::=  TOTAL | PEAK\n    SELECT-COND  ::=  <SELECT-STMT>\
    \ | NULL\n    SELECT-STMT  ::=  WITH DATA <COND-TYPE> <ASCII-STRING>\n    COND-TYPE\
    \    ::=  LE | GE | EQ | NE | LT | GT\n   If any conditional within the SELECT\
    \ does not match existing data\n   within the database (such as VARNAME, the S-DATE\
    \ or E-DATE, or\n   GRANULARITY), the server must return an ERROR (and hopefully\
    \ a\n   meaningful error message).  The time values must be specified in GMT,\n\
    \   and hours are specified in the range from 0-23.  The granularity\n   should\
    \ always be specified in seconds. A sample query might be:\n      SELECT net rtr1\
    \ eth-0 ifInOctets 900 1992-01-01 00:00:00 1992-02-\n      01 23:59:59\n   which\
    \ would select all data from network \"net\" device \"rtr1\"\n   interface \"\
    eth-0\" from Jan 1, 1992 @ 00:00:00 to Feb 1, 1992 @\n   23:59:59.\n   Note that\
    \ if the client requests some type of aggregation to be\n   performed upon the\
    \ data, then the aggregation field specifies how to\n   perform the aggregration\
    \ (i.e., total or peak) and the granularity\n   specifies to what interval (in\
    \ seconds) to agggregate the data to.\n   For more details about the granularity\
    \ types, see [1].  If the server\n   cannot perform the requested action, then\
    \ it must return a 120 error.\n   The server may, if it wishes, use other error\
    \ codes in the range\n   121-129 to convey more information about the specific\
    \ error that\n   occured.  In either case, its recommended that the server return\n\
    \   ASCII text describing the error.\n   Upon completion of the data lookup, the\
    \ SELECT must return the an\n   indication of whether the lookup was successful\
    \ and (if the search\n   was successful) the tag associated with that data.  If\
    \ the lookup was\n   successful, then information in the return code should be\
    \ encoded as:\n    920 \" TAG <ASCII-STRING> \"\n   In this case, the use of the\
    \ word TAG is used as a handle for the\n   selected data on the server.  Note\
    \ that this single handle may refer\n   to one or more specific SNMP variables\
    \ (refer to [1] for a further\n   explanation).\n   For example, if the tag \"\
    foobar\" were assigned to the select example\n   above, then the OK would be as:\n\
    \    920 \"TAG foobar\"\n   It is recommended that the return tag string be less\
    \ than 10 bytes\n   long (this gives many tag combinations), although the server\
    \ (and\n   client) should be capable of handling arbitrary length strings.\n \
    \  There is no requirement that the TAG have any particular meaning and\n   may\
    \ be composed of arbitrary strings.\n   The server must keep any internal information\
    \ it needs during a\n   session so that all SELECT tags can be processed by GET\
    \ or other\n   commands.  If a server doesn't have the resources to process the\n\
    \   given SELECT, it must return an error message.\n   It is the responsibility\
    \ of the client to store information about the\n   data that a particular tag\
    \ corresponds to, i.e., if the server had\n   returned a tag \"1234\" for ifInOctet\
    \ data for October 1993, then the\n   client must store that information someplace\
    \ as the variables which\n   correspond to that tag cannot be retrieved from the\
    \ server.\n"
- title: 3.5  The STATUS Command
  contents:
  - "3.5  The STATUS Command\n   The STATUS command shows the general state of the\
    \ server plus listing\n   all data sets which have been tagged via the SELECT\
    \ command.  The\n   STATUS command has no arguments.  The output from a STATUS\
    \ command\n   is:\n    STATUS-DATA      ::=  <SERVER-STATUS> <SERVER-TAG-LIST>\n\
    \    SERVER-STATUS    ::=  \"STATUS= \" <STATUS-FIELDS>\n    STATUS-FIELDS   \
    \ ::=  \"OK\" | \"NOT-OK\"\n    SERVER-TAG-LIST  ::=  <SERVER-TAG> | NULL\n  \
    \  SERVER-TAG       ::=  \"TAG\" <TAG-ID> \"SIZE\" <NUMBER>\n   The number returned\
    \ in the SIZE field represents the number of octets\n   of data represented by\
    \ the particular TAG.  The server must return a\n   931 message before the STATUS\
    \ output starts, and a 932 message at the\n   end of the STATUS output.  If any\
    \ type of failure occurs, then a 130\n   error messages must be sent.  If the\
    \ server prefers, it may send a\n   message in the range of 131-139 if it wishes,\
    \ but its recommended\n   that the server always return ASCII describing the enoutered\
    \ error.\n   For example, a sample output might look like:\n    >STATUS\n    <931\
    \ \"STATUS Command Starting\"\n    <STATUS= OK\n    <TAG 1234 SIZE 123456\n  \
    \  <TAG ABCD SIZE 654321\n    <932 \"STATUS Command successful\"\n    or\n   \
    \ >STATUS\n    <130 \"Can't get STATUS right now, sorry.\"\n    or\n    >STATUS\n\
    \    <931 \"STATUS Command Starting\"\n    <STATUS= OK\n    <TAG 1234 SIZE 1\n\
    \    <131 \"Oops, error reading TAG table, sorry.\"\n 3.6  The GET Command\n \
    \  The GET command actually retrieves the data chosen via a previous\n   SELECT\
    \ command.  The GET command has the format:\n    GET-CMD  ::=  GET <TAG> <TYPE>\n\
    \    TAG      ::=  <ASCII-STRING>\n    TYPE     ::=  1404 | <ASCII-STRING>\n \
    \  If the TAG matches a previously returned TAG from a SELECT statement,\n   then\
    \ the previously tagged data is returned.  If the TAG is invalid\n   (i.e., it\
    \ hasn't been previously assigned by the server), then the\n   server must return\
    \ an error.  The TYPE specifies the encoding of the\n   data stream.  All servers\
    \ must support \"1404\" encoding.  Others forms\n   may be supported as desired.\n\
    \   If the server, while retrieving the data, cannot retrieve some\n   portion\
    \ of the data (i.e., some of the data previously found\n   disappeared between\
    \ the time of the SELECT and the time of the GET),\n   then the server must return\
    \ a 150 error.  If the client requests an\n   encoding type not supported by the\
    \ server, then the server must\n   return a 151 error.\n   The format of the returned\
    \ data is as follows:\n    RETURN-DATA-TYPE   ::=   START-DATA  <RETURN-TYPE>\
    \  <DATA>   END-DATA\n    RETURN-TYPE       ::=  1404 | <ASCII-STRING>\n    An\
    \ example would be:\n    >GET ABC 1404\n    <951 \"OK, here it comes!\"\n    <START-DATA\
    \ 1404\n    1404 data stream here...\n    <END-DATA\n    <952 \"All done!\"\n\
    \    Error examples:\n    >GET ABC STRONG-CRYPT\n    <151 \"Sorry, that encoding\
    \ not available here\"\n    or\n    >GET ABC 1404\n    <951 \"OK, here it comes!\"\
    \n    <START-DATA 1404\n    1404 data stream here...\n    <END-DATA\n    <150\
    \ \"Whoa, bad data...\"\n   If any type of error code is returned by the server,\
    \ the client must\n   discard all data received from the server.\n"
- title: 3.7  The LIST Command
  contents:
  - "3.7  The LIST Command\n   The LIST command allows the client to query the server\
    \ about\n   available data residing on the server.  The LIST command has the\n\
    \   format:\n    LIST-CMD  ::=  LIST <net> <dev> <intf> <var> <gran> <sdate> <stime>\n\
    \                   <edate> <etime>\n    <net>     ::=  <ASCII-STRING> | *\n \
    \   <dev>     ::=  <ASCII-STRING> | *\n    <intf>    ::=  <ASCII-STRING> | *\n\
    \    <var>     ::=  <ASCII-STRING> | *\n    <gran>    ::=  <ASCII-STRING> | *\n\
    \    <sdate>   ::=  <DATE-TYPE>    | *\n    <edate>   ::=  <DATE-TYPE>    | *\n\
    \    <stime>   ::=  <TIME-TYPE>    | *\n    <etime>   ::=  <TIME-TYPE>    | *\n\
    \   For example, to get a list of networks that the server has data for,\n   you\
    \ would use the command:\n    LIST * * * * * * * * *\n    The command\n    LIST\
    \ netx rtry * * * * * * *\n    will list all interfaces for rtry.  The command\n\
    \    LIST netx rtry * ifInOctets * 1993-02-01 * * *\n   will get the list of interfaces\
    \ on device \"rtry\" in network \"netx\"\n   which have values for the variable\
    \ \"ifInOctets\" after the start date\n   of Februrary 1, 1993.\n   To process\
    \ wildcards in a LIST command, follow these rules:\n    1)  Only the leftmost\
    \ wildcard will be serviced for a given\n        LIST command\n    2)  If all\
    \ fields to the right of the leftmost wildcard are\n        wildcards, then all\
    \ values for the wildcard being processed\n        will be returned.\n    3) \
    \ If specific values are given for fields to the right of the\n        wildcard\
    \ being serviced, then the specific values must match\n        a known value\n\
    \   The output from the LIST command is formatted as follows:\n    LIST-RETURN\
    \  ::=  START-LIST <LIST-ENTRY> END-LIST\n    LIST-ENTRY   ::=  <net> <device>\
    \ <intf> <var> <gran> <sdate> <stime>\n                      <edate> <etime>\n\
    \    <net>        ::=  <ASCII-STRING>\n    <device>     ::=  <ASCII-STRING> |\
    \ <NULL>\n    <intf>       ::=  <ASCII-STRING> | <NULL>\n    <var>        ::=\
    \  <ASCII-STRING> | <NULL>\n    <gran>       ::=  <ASCII-STRING> | <NULL>\n  \
    \  <sdate>      ::=  <DATE-TYPE>    | <NULL>\n    <edate>      ::=  <DATE-TYPE>\
    \    | <NULL>\n    <stime>      ::=  <TIME-TYPE>    | <NULL>\n    <etime>    \
    \  ::=  <TIME-TYPE>    | <NULL>\n   Note that only the fields with values in them\
    \ will be returned by the\n   server.  For example, the query to find the interfaces\
    \ on rtry:\n    >LIST netx rtry * * * * * * *\n    <941 \"OK, here comes the list...\"\
    \n    <START-LIST\n    <netx rtry intf1\n    <netx rtry intf2\n    <netx rtry\
    \ intf3\n    <END-LIST\n    <942 \"all done\"\n   The query to find interfaces\
    \ having ifInOctets data with a 15 minute\n   granularity:\n    >LIST netx rtry\
    \ * ifInOctets 15min * * * *\n    <941 \"OK, here comes the list...\"\n    <START-LIST\n\
    \    <netx rtry intf1\n    <netx rtry intf2\n    <netx rtry intf3\n    <END-LIST\n\
    \    <942 \"all done\"\n   If, while processing a LIST command, the server encounters\
    \ an error,\n   then the server must return a 140 error message.  If the server\n\
    \   cannot process the LIST command (syntax error, etc.), then it must\n   return\
    \ a 141 message.  For example:\n    >LIST netx rtry\n    <141 \"huh, bad list\
    \ dude\"\n    or\n    >LIST netx rtry * ifInOctets 15min * * * *\n    <941 \"\
    OK, here comes the list...\"\n    <START-LIST\n    <netx rtry intf1\n    <netx\
    \ rtry intf2\n    <netx rtry intf3\n    <END-LIST\n    <140 \"Whoa, bad list dude,\
    \ please ignore\"\n"
- title: 3.8  The Server State Machine
  contents:
  - "3.8  The Server State Machine\n   The state machine pictured below describes\
    \ how a server should\n   interact with a client:\n                         +------+\n\
    \               +-------->| WAIT |<-----+\n               |         +------+ \
    \     |\n               |  New       |          |\n               |  Connect \
    \  |          |  LOGIN Failure\n     EXIT      |           \\ /         |\n  \
    \   Received  |         +-------+     |\n               |         | LOGIN |-----+\n\
    \               |         +-------+\n               |             |\n        \
    \       |             |  LOGIN Successful\n               |            \\ /\n\
    \               |        +---------+\n               +--------| PROCESS |<----+\n\
    \                        +---------+     |\n                             |   \
    \       |  Process Commands\n                             |          |\n     \
    \                        +----------+\n   The server normally stays in WAIT (after\
    \ starting and initialization)\n   until a new connection is made from a client.\
    \  The first command a\n   client must issue is a LOGIN command, otherwise the\
    \ server must\n   immediately close the connection.  If the login process fails\
    \ in any\n   way (as described in 3.2), then the server must immediately close\
    \ the\n   connection and return to the WAIT state.\n   Once a successful LOGIN\
    \ is received, the server enters the PROCESS\n   state where it processes some\
    \ number of LIST, GET, STATUS, and SELECT\n   commands. Any other command received\
    \ while in this state must be\n   ignored, except for the EXIT command.  Once\
    \ an EXIT command is\n   received, the server exits immediately (after perfoming\
    \ any needed\n   internal bookkeeping) and returns to the WAIT state.  Any command\
    \ a\n   server receives while processing a command (e.g., if you send an\n   \"\
    EXIT\" while a large \"GET\" is being processed) will be ignored until\n   the\
    \ command being processed completes.\n   If the data connection to the client\
    \ closes for any reason while the\n   server is in the PROCESS state, the server\
    \ must immediately close its\n   connection and do any associated internal cleanup\
    \ and return to the\n   LOGIN state.\n"
- title: 4.0  Security Issues
  contents:
  - "4.0  Security Issues\n   There are legal, ethical and political concerns of data\
    \ sharing.  For\n   this reason there is a need to insure integrity and confidentiality\n\
    \   of any shared data.  Although not specified in this standard,\n   mechanisms\
    \ to control a user's access to specific data about specific\n   objects may need\
    \ to be included in server implementations.  This\n   could potentially be done\
    \ in several ways, including a configuration\n   file that listed the objects\
    \ a user was allowed to access or limiting\n   file access by using file permissions\
    \ within a given file system.  At\n   a minimum, the server should not allow default\
    \ access to all data on\n   the server.\n   Additionally, the server should strictly\
    \ follow the state diagram\n   shown in section 3.8.  The server should be tested\
    \ with arbitrary\n   strings in the command fields to ensure that no unexpected\
    \ security\n   problems will be caused by the server.  The server should\n   specifically\
    \ discard illegal ASCII characters as discussed in section\n   3.0.  If the server\
    \ executes other programs, then the server must\n   verify that no unexpected\
    \ side-effects will occur as the result of\n   the invocation or the arguments\
    \ given to that program.  The server\n   should always verify that all data is\
    \ contained within the input\n   buffer, and that a long input string from a client\
    \ will not cause\n   unexpected side-effects.\n   Finally, given the relative\
    \ insecurity of the global Internet, and\n   the presence of packet-sniffing capability,\
    \ several considerations\n   must be weighed.  The authentication process via\
    \ the LOGIN process\n   must be strictly adhered to, and the use of one-time authentication\n\
    \   is strongly encouraged.  It is also suggested that the data returned\n   from\
    \ the server be protected (such as through encryption) so that no\n   sensitive\
    \ data is revealed by accident.\n"
- title: 5.0  Summary
  contents:
  - "5.0  Summary\n   This document defines a protocol which could be used in a client-\n\
    \   server relationship to retrieve statistics from a remote database\n   server.\n\
    \   Much work remains to be done in the area of Operational Statistics\n   including\
    \ questions such as:\n    - what \"standard\" graphs or \"variables\" should always\
    \ be made\n      available to the user?\n    - what additions to the standard\
    \ MIB would make the network\n      manager's job easier?\n"
- title: 6.0  References
  contents:
  - "6.0  References\n   [1] Stockman, B., \"A Model for Common Operational Statistics\"\
    , RFC\n       1404, NORDUnet/SUNET, January 1993.\n"
- title: 'Appendix A:  Sample Client-Server Sessions'
  contents:
  - "Appendix A:  Sample Client-Server Sessions\n   Session 1: Check available variables\
    \ on device rtr1 interface eth0\n    >LOGIN \"henry\" \"skey\"\n    <CHAL \"78\
    \ lo35098\"\n    >AUTH \"COW MOO DOG BARK CAT MEOW\"\n    <910 \"Login OK, what\
    \ now?\"\n    >LIST OARnet rtr1 eth0 * * * *\n    <941 \"List lookup OK, here\
    \ it comes!\"\n    <START-LIST\n    <OARnet rtr1 eth0 ifInOctets\n    <OARnet\
    \ rtr1 eth0 ifOutOctets\n    <OARnet rtr1 eth0 ifInErrors\n    <OARnet rtr1 eth0\
    \ ifOutErrors\n    <END-LIST\n    <942 \"List done!\"\n    >EXIT\n    <990 \"\
    OK, Bye now!\"\n    Session 2: Retrieve a bit of data from the server\n    >LOGIN\
    \ henryc \"skey\"\n    <CHAL \"78 lo35098\"\n    >AUTH \"COW MOO DOG BARK CAT\
    \ MEOW\"\n    <910 \"Login OK, what now?\"\n    >SELECT OARnet rtr1 eth0 InBytes\
    \ 15min 1993-02-01 00:00:00 1993-03-01 23:59:59\n    <920 \"TAG blah\"\n    >STATUS\n\
    \    <931 \"here it comes...\"\n    <STATUS= OK\n    <TAG blah SIZE 654321\n \
    \   <932 \"all done\"\n    >GET blah 1404\n    <951 \"here it comes...\"\n   \
    \ <START-DATA 1404\n      1404 data here\n    <END-DATA\n    <952 \"wow, all done\"\
    \n    >EXIT\n    <990 \"OK, bye\"\n"
- title: Author's Address
  contents:
  - 'Author''s Address

    '
- title: Henry Clark
  contents:
  - 'Henry Clark

    '
- title: BBN Planet Corp.
  contents:
  - 'BBN Planet Corp.

    '
- title: 150 Cambridge Park Dr.
  contents:
  - '150 Cambridge Park Dr.

    '
- title: Cambridge, MA 02140
  contents:
  - 'Cambridge, MA 02140

    '
- title: 'Phone:  (617) 873-4622'
  contents:
  - 'Phone:  (617) 873-4622

    '
- title: 'EMail:  henryc@bbnplanet.com'
  contents:
  - 'EMail:  henryc@bbnplanet.com

    '
