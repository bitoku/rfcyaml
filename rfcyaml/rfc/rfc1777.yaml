- title: __initial_text__
  contents:
  - '                 Lightweight Directory Access Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The protocol described in this document is designed to provide access\n\
    \   to the X.500 Directory while not incurring the resource requirements\n   of\
    \ the Directory Access Protocol (DAP). This protocol is specifically\n   targeted\
    \ at simple management applications and browser applications\n   that provide\
    \ simple read/write interactive access to the X.500\n   Directory, and is intended\
    \ to be a complement to the DAP itself.\n   Key aspects of LDAP are:\n   - Protocol\
    \ elements are carried directly over TCP or other transport,\n     bypassing much\
    \ of the session/presentation overhead.\n   - Many protocol data elements are\
    \ encoding as ordinary strings (e.g.,\n     Distinguished Names).\n   - A lightweight\
    \ BER encoding is used to encode all protocol elements.\n"
- title: 1.  History
  contents:
  - "1.  History\n   The tremendous interest in X.500 [1,2] technology in the Internet\
    \ has\n   lead to efforts to reduce the high \"cost of entry\" associated with\n\
    \   use of the technology, such as the Directory Assistance Service [3]\n   and\
    \ DIXIE [4]. While efforts such as these have met with success,\n   they have\
    \ been solutions based on particular implementations and as\n   such have limited\
    \ applicability.  This document continues the efforts\n   to define Directory\
    \ protocol alternatives but departs from previous\n   efforts in that it consciously\
    \ avoids dependence on particular\n   implementations.\n"
- title: 2.  Protocol Model
  contents:
  - "2.  Protocol Model\n   The general model adopted by this protocol is one of clients\n\
    \   performing protocol operations against servers. In this model, this\n   is\
    \ accomplished by a client transmitting a protocol request\n   describing the\
    \ operation to be performed to a server, which is then\n   responsible for performing\
    \ the necessary operations on the Directory.\n   Upon completion of the necessary\
    \ operations, the server returns a\n   response containing any results or errors\
    \ to the requesting client.\n   In keeping with the goal of easing the costs associated\
    \ with use of\n   the Directory, it is an objective of this protocol to minimize\
    \ the\n   complexity of clients so as to facilitate widespread deployment of\n\
    \   applications capable of utilizing the Directory.\n   Note that, although servers\
    \ are required to return responses whenever\n   such responses are defined in\
    \ the protocol, there is no requirement\n   for synchronous behavior on the part\
    \ of either client or server\n   implementations: requests and responses for multiple\
    \ operations may\n   be exchanged by client and servers in any order, as long\
    \ as clients\n   eventually receive a response for every request that requires\
    \ one.\n   Consistent with the model of servers performing protocol operations\n\
    \   on behalf of clients, it is also to be noted that protocol servers\n   are\
    \ expected to handle referrals without resorting to the return of\n   such referrals\
    \ to the client. This protocol makes no provisions for\n   the return of referrals\
    \ to clients, as the model is one of servers\n   ensuring the performance of all\
    \ necessary operations in the\n   Directory, with only final results or errors\
    \ being returned by\n   servers to clients.\n   Note that this protocol can be\
    \ mapped to a strict subset of the\n   directory abstract service, so it can be\
    \ cleanly provided by the DAP.\n"
- title: 3.  Mapping Onto Transport Services
  contents:
  - "3.  Mapping Onto Transport Services\n   This protocol is designed to run over\
    \ connection-oriented, reliable\n   transports, with all 8 bits in an octet being\
    \ significant in the data\n   stream.  Specifications for two underlying services\
    \ are defined here,\n   though others are also possible.\n"
- title: 3.1.  Transmission Control Protocol (TCP)
  contents:
  - "3.1.  Transmission Control Protocol (TCP)\n   The LDAPMessage PDUs are mapped\
    \ directly onto the TCP bytestream.\n   Server implementations running over the\
    \ TCP should provide a protocol\n   listener on port 389.\n"
- title: 3.2.  Connection Oriented Transport Service (COTS)
  contents:
  - "3.2.  Connection Oriented Transport Service (COTS)\n   The connection is established.\
    \  No special use of T-Connect is made.\n   Each LDAPMessage PDU is mapped directly\
    \ onto T-Data.\n"
- title: 4.  Elements of Protocol
  contents:
  - "4.  Elements of Protocol\n   For the purposes of protocol exchanges, all protocol\
    \ operations are\n   encapsulated in a common envelope, the LDAPMessage, which\
    \ is defined\n   as follows:\n     LDAPMessage ::=\n         SEQUENCE {\n    \
    \          messageID      MessageID,\n              protocolOp     CHOICE {\n\
    \                                  bindRequest         BindRequest,\n        \
    \                          bindResponse        BindResponse,\n               \
    \                   unbindRequest       UnbindRequest,\n                     \
    \             searchRequest       SearchRequest,\n                           \
    \       searchResponse      SearchResponse,\n                                \
    \  modifyRequest       ModifyRequest,\n                                  modifyResponse\
    \      ModifyResponse,\n                                  addRequest         \
    \ AddRequest,\n                                  addResponse         AddResponse,\n\
    \                                  delRequest          DelRequest,\n         \
    \                         delResponse         DelResponse,\n                 \
    \                 modifyRDNRequest    ModifyRDNRequest,\n                    \
    \              modifyRDNResponse   ModifyRDNResponse,\n                      \
    \            compareDNRequest    CompareRequest,\n                           \
    \       compareDNResponse   CompareResponse,\n                               \
    \   abandonRequest      AbandonRequest\n                             }\n     \
    \    }\n     MessageID ::= INTEGER (0 .. maxInt)\n   The function of the LDAPMessage\
    \ is to provide an envelope containing\n   common fields required in all protocol\
    \ exchanges. At this time the\n   only common field is a message ID, which is\
    \ required to have a value\n   different from the values of any other requests\
    \ outstanding in the\n   LDAP session of which this message is a part.\n   The\
    \ message ID value must be echoed in all LDAPMessage envelopes\n   encapsulting\
    \ responses corresponding to the request contained in the\n   LDAPMessage in which\
    \ the message ID value was originally used.\n   In addition to the LDAPMessage\
    \ defined above, the following\n   definitions are also used in defining protocol\
    \ operations:\n     LDAPString ::= OCTET STRING\n   The LDAPString is a notational\
    \ convenience to indicate that, although\n   strings of LDAPString type encode\
    \ as OCTET STRING types, the legal\n   character set in such strings is limited\
    \ to the IA5 character set.\n     LDAPDN ::= LDAPString\n     RelativeLDAPDN ::=\
    \ LDAPString\n   An LDAPDN and a RelativeLDAPDN are respectively defined to be\
    \ the\n   representation of a Distinguished Name and a Relative Distinguished\n\
    \   Name after encoding according to the specification in [5], such that\n   \
    \  <distinguished-name> ::= <name>\n     <relative-distinguished-name> ::= <name-component>\n\
    \   where <name> and <name-component> are as defined in [5].\n     AttributeValueAssertion\
    \ ::=\n         SEQUENCE {\n              attributeType       AttributeType,\n\
    \              attributeValue      AttributeValue\n         }\n   The AttributeValueAssertion\
    \ type definition  is similar to the one in\n   the X.500 Directory standards.\n\
    \     AttributeType ::= LDAPString\n     AttributeValue ::= OCTET STRING\n   An\
    \ AttributeType value takes on as its value the textual string\n   associated\
    \ with that AttributeType in the X.500 Directory standards.\n   For example, the\
    \ AttributeType 'organizationName' with object\n   identifier 2.5.4.10 is represented\
    \ as an AttributeType in this\n   protocol by the string \"organizationName\"\
    .  In the event that a\n   protocol implementation encounters an Attribute Type\
    \ with which it\n   cannot associate a textual string, an ASCII string encoding\
    \ of the\n   object identifier associated with the Attribute Type may be\n   subsitituted.\
    \  For example, the organizationName AttributeType may be\n   represented by the\
    \ ASCII string \"2.5.4.10\" if a protocol\n   implementation is unable to associate\
    \ the string \"organizationName\"\n   with it.\n   A field of type AttributeValue\
    \ takes on as its value an octet string\n   encoding of a Directory AttributeValue\
    \ type. The definition of these\n   string encodings for different Directory AttributeValue\
    \ types may be\n   found in companions to this document that define the encodings\
    \ of\n   various attribute syntaxes such as [6].\n     LDAPResult ::=\n      \
    \   SEQUENCE {\n             resultCode    ENUMERATED {\n                    \
    \         success                      (0),\n                             operationsError\
    \              (1),\n                             protocolError              \
    \  (2),\n                             timeLimitExceeded            (3),\n    \
    \                         sizeLimitExceeded            (4),\n                \
    \             compareFalse                 (5),\n                            \
    \ compareTrue                  (6),\n                             authMethodNotSupported\
    \       (7),\n                             strongAuthRequired           (8),\n\
    \                             noSuchAttribute              (16),\n           \
    \                  undefinedAttributeType       (17),\n                      \
    \       inappropriateMatching        (18),\n                             constraintViolation\
    \          (19),\n                             attributeOrValueExists       (20),\n\
    \                             invalidAttributeSyntax       (21),\n           \
    \                  noSuchObject                 (32),\n                      \
    \       aliasProblem                 (33),\n                             invalidDNSyntax\
    \              (34),\n                             isLeaf                    \
    \   (35),\n                             aliasDereferencingProblem    (36),\n \
    \                            inappropriateAuthentication  (48),\n            \
    \                 invalidCredentials           (49),\n                       \
    \      insufficientAccessRights     (50),\n                             busy \
    \                        (51),\n                             unavailable     \
    \             (52),\n                             unwillingToPerform         \
    \  (53),\n                             loopDetect                   (54),\n  \
    \                           namingViolation              (64),\n             \
    \                objectClassViolation         (65),\n                        \
    \     notAllowedOnNonLeaf          (66),\n                             notAllowedOnRDN\
    \              (67),\n                             entryAlreadyExists        \
    \   (68),\n                             objectClassModsProhibited    (69),\n \
    \                            other                        (80)\n             \
    \              },\n             matchedDN     LDAPDN,\n             errorMessage\
    \  LDAPString\n         }\n   The LDAPResult is the construct used in this protocol\
    \ to return\n   success or failure indications from servers to clients. In response\n\
    \   to various requests, servers will return responses containing fields\n   of\
    \ type LDAPResult to indicate the final status of a protocol\n   operation request.\
    \  The errorMessage field of this construct may, at\n   the servers option, be\
    \ used to return an ASCII string containing a\n   textual, human-readable error\
    \ diagnostic. As this error diagnostic is\n   not standardized, implementations\
    \ should not rely on the values\n   returned.  If the server chooses not to return\
    \ a textual diagnostic,\n   the errorMessage field of the LDAPResult type should\
    \ contain a zero\n   length string.\n   For resultCodes of noSuchObject, aliasProblem,\
    \ invalidDNSyntax,\n   isLeaf, and aliasDereferencingProblem, the matchedDN field\
    \ is set to\n   the name of the lowest entry (object or alias) in the DIT that\
    \ was\n   matched and is a truncated form of the name provided or, if an alias\n\
    \   has been dereferenced, of the resulting name.  The matchedDN field\n   should\
    \ be set to NULL DN (a zero length string) in all other cases.\n"
- title: 4.1.  Bind Operation
  contents:
  - "4.1.  Bind Operation\n   The function of the Bind Operation is to initiate a\
    \ protocol session\n   between a client and a server, and to allow the authentication\
    \ of the\n   client to the server. The Bind Operation must be the first operation\n\
    \   request received by a server from a client in a protocol session.\n   The\
    \ Bind Request is defined as follows:\n     BindRequest ::=\n         [APPLICATION\
    \ 0] SEQUENCE {\n                             version   INTEGER (1 .. 127),\n\
    \                             name      LDAPDN,\n                            \
    \ authentication CHOICE {\n                                  simple        [0]\
    \ OCTET STRING,\n                                  krbv42LDAP    [1] OCTET STRING,\n\
    \                                  krbv42DSA     [2] OCTET STRING\n          \
    \                   }\n         }\n   Parameters of the Bind Request are:\n  \
    \ - version: A version number indicating the version of the protocol to\n    \
    \ be used in this protocol session.  This document describes version\n     2 of\
    \ the LDAP protocol.  Note that there is no version negotiation,\n     and the\
    \ client should just set this parameter to the version it\n     desires.\n   -\
    \ name: The name of the Directory object that the client wishes to\n     bind\
    \ as.  This field may take on a null value (a zero length\n     string) for the\
    \ purposes of anonymous binds.\n   - authentication: information used to authenticate\
    \ the name, if any,\n     provided in the Bind Request. The \"simple\" authentication\
    \ option\n     provides minimal authentication facilities, with the contents of\n\
    \     the authentication field consisting only of a cleartext password.\n    \
    \ This option should also be used when unauthenticated or anonymous\n     binds\
    \ are to be performed, with the field containing a zero length\n     string in\
    \ such cases. Kerberos version 4 [7] authentication to the\n     LDAP server and\
    \ the DSA is accomplished by using the \"krbv42LDAP\"\n     and \"krbv42DSA\"\
    \ authentication options, respectively.  Note that\n     though they are referred\
    \ to as separate entities here, there is no\n     requirement these two entities\
    \ be distinct (i.e., a DSA could speak\n     LDAP directly).  Two separate authentication\
    \ options are provided\n     to support all implementations.  Each octet string\
    \ should contain\n     the kerberos ticket (e.g., as returned by krb_mk_req())\
    \ for the\n     appropriate service.  The suggested service name for authentication\n\
    \     to the LDAP server is \"ldapserver\".  The suggested service name for\n\
    \     authentication to the DSA is \"x500dsa\".  In both cases, the\n     suggested\
    \ instance name for the service is the name of the host on\n     which the service\
    \ is running.  Of course, the actual service names\n     and instances will depend\
    \ on what is entered in the local kerberos\n     principle database.\n   The Bind\
    \ Operation requires a response, the Bind Response, which is\n   defined as:\n\
    \     BindResponse ::= [APPLICATION 1] LDAPResult\n   A Bind Response consists\
    \ simply of an indication from the server of\n   the status of the client's request\
    \ for the initiation of a protocol\n   session.\n   Upon receipt of a Bind Request,\
    \ a protocol server will authenticate\n   the requesting client if necessary,\
    \ and attempt to set up a protocol\n   session with that client. The server will\
    \ then return a Bind Response\n   to the client indicating the status of the session\
    \ setup request.\n"
- title: 4.2.  Unbind Operation
  contents:
  - "4.2.  Unbind Operation\n   The function of the Unbind Operation is to terminate\
    \ a protocol\n   session.  The Unbind Operation is defined as follows:\n     UnbindRequest\
    \ ::= [APPLICATION 2] NULL\n   The Unbind Operation has no response defined. Upon\
    \ transmission of an\n   UnbindRequest, a protocol client may assume that the\
    \ protocol session\n   is terminated. Upon receipt of an UnbindRequest, a protocol\
    \ server\n   may assume that the requesting client has terminated the session\
    \ and\n   that all outstanding requests may be discarded.\n"
- title: 4.3.  Search Operation
  contents:
  - "4.3.  Search Operation\n   The Search Operation allows a client to request that\
    \ a search be\n   performed on its behalf by a server. The Search Request is defined\
    \ as\n   follows:\n     SearchRequest ::=\n         [APPLICATION 3] SEQUENCE {\n\
    \             baseObject    LDAPDN,\n             scope         ENUMERATED {\n\
    \                                baseObject            (0),\n                \
    \                singleLevel           (1),\n                                wholeSubtree\
    \          (2)\n                           },\n             derefAliases  ENUMERATED\
    \ {\n                                        neverDerefAliases     (0),\n    \
    \                                    derefInSearching      (1),\n            \
    \                            derefFindingBaseObj   (2),\n                    \
    \                    derefAlways           (3)\n                             \
    \      },\n             sizeLimit     INTEGER (0 .. maxInt),\n             timeLimit\
    \     INTEGER (0 .. maxInt),\n             attrsOnly     BOOLEAN,\n          \
    \   filter        Filter,\n             attributes    SEQUENCE OF AttributeType\n\
    \     }\n     Filter ::=\n         CHOICE {\n             and                [0]\
    \ SET OF Filter,\n             or                 [1] SET OF Filter,\n       \
    \      not                [2] Filter,\n             equalityMatch      [3] AttributeValueAssertion,\n\
    \             substrings         [4] SubstringFilter,\n             greaterOrEqual\
    \     [5] AttributeValueAssertion,\n             lessOrEqual        [6] AttributeValueAssertion,\n\
    \             present            [7] AttributeType,\n             approxMatch\
    \        [8] AttributeValueAssertion\n         }\n     SubstringFilter\n     \
    \    SEQUENCE {\n             type               AttributeType,\n            \
    \ SEQUENCE OF CHOICE {\n                 initial        [0] LDAPString,\n    \
    \             any            [1] LDAPString,\n                 final         \
    \ [2] LDAPString\n             }\n         }\n   Parameters of the Search Request\
    \ are:\n   - baseObject: An LDAPDN that is the base object entry relative to\n\
    \     which the search is to be performed.\n   - scope: An indicator of the scope\
    \ of the search to be performed. The\n     semantics of the possible values of\
    \ this field are identical to the\n     semantics of the scope field in the Directory\
    \ Search Operation.\n   - derefAliases: An indicator as to how alias objects should\
    \ be\n     handled in searching.  The semantics of the possible values of\n  \
    \   this field are, in order of increasing value:\n             neverDerefAliases:\
    \ do not dereference aliases in searching\n             or in locating the base\
    \ object of the search;\n             derefInSearching: dereference aliases in\
    \ subordinates of\n             the base object in searching, but not in locating\
    \ the\n             base object of the search;\n             derefFindingBaseObject:\
    \ dereference aliases in locating\n             the base object of the search,\
    \ but not when searching\n             subordinates of the base object;\n    \
    \         derefAlways: dereference aliases both in searching and in\n        \
    \     locating the base object of the search.\n   - sizelimit: A sizelimit that\
    \ restricts the maximum number of entries\n     to be returned as a result of\
    \ the search. A value of 0 in this\n     field indicates that no sizelimit restrictions\
    \ are in effect for\n     the search.\n   - timelimit: A timelimit that restricts\
    \ the maximum time (in seconds)\n     allowed for a search. A value of 0 in this\
    \ field indicates that no\n     timelimit restrictions are in effect for the search.\n\
    \   - attrsOnly: An indicator as to whether search results should contain\n  \
    \   both attribute types and values, or just attribute types.  Setting\n     this\
    \ field to TRUE causes only attribute types (no values) to be\n     returned.\
    \  Setting this field to FALSE causes both attribute types\n     and values to\
    \ be returned.\n   - filter: A filter that defines the conditions that must be\
    \ fulfilled\n     in order for the search to match a given entry.\n   - attributes:\
    \ A list of the attributes from each entry found as a\n     result of the search\
    \ to be returned. An empty list signifies that\n     all attributes from each\
    \ entry found in the search are to be\n     returned.\n   The results of the search\
    \ attempted by the server upon receipt of a\n   Search Request are returned in\
    \ Search Responses, defined as follows:\n  Search Response ::=\n      CHOICE {\n\
    \           entry          [APPLICATION 4] SEQUENCE {\n                      \
    \         objectName     LDAPDN,\n                               attributes  \
    \   SEQUENCE OF SEQUENCE {\n                                                 \
    \  AttributeType,\n                                                   SET OF AttributeValue\n\
    \                                              }\n                          },\n\
    \           resultCode     [APPLICATION 5] LDAPResult\n       }\n   Upon receipt\
    \ of a Search Request, a server will perform the necessary\n   search of the DIT.\n\
    \   The server will return to the client a sequence of responses\n   comprised\
    \ of:\n   - Zero or more Search Responses each consisting of an entry found\n\
    \     during the search; with the response sequence terminated by\n   - A single\
    \ Search Response containing an indication of success, or\n     detailing any\
    \ errors that have occurred.\n   Each entry returned will contain all attributes,\
    \ complete with\n   associated values if necessary, as specified in the 'attributes'\n\
    \   field of the Search Request.\n   Note that an X.500 \"list\" operation can\
    \ be emulated by a one-level\n   LDAP search operation with a filter checking\
    \ for the existence of the\n   objectClass attribute, and that an X.500 \"read\"\
    \ operation can be\n   emulated by a base object LDAP search operation with the\
    \ same filter.\n"
- title: 4.4.  Modify Operation
  contents:
  - "4.4.  Modify Operation\n   The Modify Operation allows a client to request that\
    \ a modification\n   of the DIB be performed on its behalf by a server.  The Modify\n\
    \   Request is defined as follows:\n"
- title: ModifyRequest ::=
  contents:
  - "ModifyRequest ::=\n    [APPLICATION 6] SEQUENCE {\n         object         LDAPDN,\n\
    \         modification   SEQUENCE OF SEQUENCE {\n                            \
    \ operation      ENUMERATED {\n                                              \
    \   add       (0),\n                                                 delete  \
    \  (1),\n                                                 replace   (2)\n    \
    \                                        },\n                             modification\
    \   SEQUENCE {\n                                               type    AttributeType,\n\
    \                                               values  SET OF\n             \
    \                                            AttributeValue\n                \
    \                            }\n                        }\n    }\n   Parameters\
    \ of the Modify Request are:\n   - object: The object to be modified. The value\
    \ of this field should\n     name the object to be modified after all aliases\
    \ have been\n     dereferenced. The server will not perform any alias dereferencing\n\
    \     in determining the object to be modified.\n   - A list of modifications\
    \ to be performed on the entry to be modified.\n     The entire list of entry\
    \ modifications should be performed\n     in the order they are listed, as a single\
    \ atomic operation.  While\n     individual modifications may violate the Directory\
    \ schema, the\n     resulting entry after the entire list of modifications is\
    \ performed\n     must conform to the requirements of the Directory schema. The\n\
    \     values that may be taken on by the 'operation' field in each\n     modification\
    \ construct have the following semantics respectively:\n             add: add\
    \ values listed to the given attribute, creating\n             the attribute if\
    \ necessary;\n             delete: delete values listed from the given attribute,\n\
    \     removing the entire attribute if no values are listed, or\n     if all current\
    \ values of the attribute are listed for\n     deletion;\n     replace: replace\
    \ existing values of the given attribute\n     with the new values listed, creating\
    \ the attribute if\n     necessary.\n   The result of the modify attempted by\
    \ the server upon receipt of a\n   Modify Request is returned in a Modify Response,\
    \ defined as follows:\n     ModifyResponse ::= [APPLICATION 7] LDAPResult\n  \
    \ Upon receipt of a Modify Request, a server will perform the necessary\n   modifications\
    \ to the DIB.\n   The server will return to the client a single Modify Response\n\
    \   indicating either the successful completion of the DIB modification,\n   or\
    \ the reason that the modification failed. Note that due to the\n   requirement\
    \ for atomicity in applying the list of modifications in\n   the Modify Request,\
    \ the client may expect that no modifications of\n   the DIB have been performed\
    \ if the Modify Response received indicates\n   any sort of error, and that all\
    \ requested modifications have been\n   performed if the Modify Response indicates\
    \ successful completion of\n   the Modify Operation.\n"
- title: 4.5.  Add Operation
  contents:
  - "4.5.  Add Operation\n   The Add Operation allows a client to request the addition\
    \ of an entry\n   into the Directory. The Add Request is defined as follows:\n\
    \     AddRequest ::=\n         [APPLICATION 8] SEQUENCE {\n              entry\
    \          LDAPDN,\n              attrs          SEQUENCE OF SEQUENCE {\n    \
    \                              type          AttributeType,\n                \
    \                  values        SET OF AttributeValue\n                     \
    \        }\n         }\n   Parameters of the Add Request are:\n   - entry: the\
    \ Distinguished Name of the entry to be added. Note that\n     all components\
    \ of the name except for the last RDN component must\n     exist for the add to\
    \ succeed.\n   - attrs: the list of attributes that make up the content of the\
    \ entry\n     being added.\n   The result of the add attempted by the server upon\
    \ receipt of a Add\n   Request is returned in the Add Response, defined as follows:\n\
    \     AddResponse ::= [APPLICATION 9] LDAPResult\n   Upon receipt of an Add Request,\
    \ a server will attempt to perform the\n   add requested. The result of the add\
    \ attempt will be returned to the\n   client in the Add Response.\n"
- title: 4.6.  Delete Operation
  contents:
  - "4.6.  Delete Operation\n   The Delete Operation allows a client to request the\
    \ removal of an\n   entry from the Directory. The Delete Request is defined as\
    \ follows:\n     DelRequest ::= [APPLICATION 10] LDAPDN\n   The Delete Request\
    \ consists only of the Distinguished Name of the\n   entry to be deleted.  The\
    \ result of the delete attempted by the\n   server upon receipt of a Delete Request\
    \ is returned in the Delete\n   Response, defined as follows:\n     DelResponse\
    \ ::= [APPLICATION 11] LDAPResult\n   Upon receipt of a Delete Request, a server\
    \ will attempt to perform\n   the entry removal requested. The result of the delete\
    \ attempt will be\n   returned to the client in the Delete Response. Note that\
    \ only leaf\n   objects may be deleted with this operation.\n"
- title: 4.7.  Modify RDN Operation
  contents:
  - "4.7.  Modify RDN Operation\n   The Modify RDN Operation allows a client to change\
    \ the last component\n   of the name of an entry in the Directory. The Modify\
    \ RDN Request is\n   defined as follows:\n     ModifyRDNRequest ::=\n        \
    \ [APPLICATION 12] SEQUENCE {\n              entry          LDAPDN,\n        \
    \      newrdn         RelativeLDAPDN,\n              deleteoldrdn   BOOLEAN\n\
    \         }\n   Parameters of the Modify RDN Request are:\n   - entry: the name\
    \ of the entry to be changed.\n   - newrdn: the RDN that will form the last component\
    \ of the new name.\n   - deleteoldrdn: a boolean parameter that controls whether\
    \ the old RDN\n     attribute values should be retained as attributes of the entry\
    \ or\n     deleted from the entry.\n   The result of the name change attempted\
    \ by the server upon receipt of\n   a Modify RDN Request is returned in the Modify\
    \ RDN Response, defined\n   as follows:\n     ModifyRDNResponse ::= [APPLICATION\
    \ 13] LDAPResult\n   Upon receipt of a Modify RDN Request, a server will attempt\
    \ to\n   perform the name change. The result of the name change attempt will\n\
    \   be returned to the client in the Modify RDN Response. The attributes\n   that\
    \ make up the old RDN are deleted from the entry, or kept,\n   depending on the\
    \ setting of the deleteoldrdn parameter.\n"
- title: 4.8.  Compare Operation
  contents:
  - "4.8.  Compare Operation\n   The Compare Operation allows a client to compare\
    \ an assertion\n   provided with an entry in the Directory. The Compare Request\
    \ is\n   defined as follows:\n     CompareRequest ::=\n         [APPLICATION 14]\
    \ SEQUENCE {\n              entry          LDAPDN,\n              ava        \
    \    AttributeValueAssertion\n         }\n   Parameters of the Compare Request\
    \ are:\n   - entry: the name of the entry to be compared with.\n   - ava: the\
    \ assertion with which the entry is to be compared.\n   The result of the compare\
    \ attempted by the server upon receipt of a\n   Compare Request is returned in\
    \ the Compare Response, defined as\n   follows:\n     CompareResponse ::= [APPLICATION\
    \ 15] LDAPResult\n   Upon receipt of a Compare Request, a server will attempt\
    \ to perform\n   the requested comparison. The result of the comparison will be\n\
    \   returned to the client in the Compare Response. Note that errors and\n   the\
    \ result of comparison are all returned in the same construct.\n"
- title: 6.9.  Abandon Operation
  contents:
  - "6.9.  Abandon Operation\n   The function of the Abandon Operation is to allow\
    \ a client to request\n   that the server abandon an outstanding operation.  The\
    \ Abandon\n   Request is defined as follows:\n     AbandonRequest ::= [APPLICATION\
    \ 16] MessageID\n   There is no response defined in the Abandon Operation. Upon\n\
    \   transmission of an Abandon Operation, a client may expect that the\n   operation\
    \ identityfied by the Message ID in the Abandon Request has\n   been abandoned.\
    \ In the event that a server receives an Abandon\n   Request on a Search Operation\
    \ in the midst of transmitting responses\n   to that search, that server should\
    \ cease transmitting responses to\n   the abandoned search immediately.\n"
- title: 5.  Protocol Element Encodings
  contents:
  - "5.  Protocol Element Encodings\n   The protocol elements of LDAP are encoded\
    \ for exchange using the\n   Basic Encoding Rules (BER) [12] of ASN.1 [11]. However,\
    \ due to the\n   high overhead involved in using certain elements of the BER,\
    \ the\n   following additional restrictions are placed on BER-encodings of LDAP\n\
    \   protocol elements:\n   (1)  Only the definite form of length encoding will\
    \ be used.\n   (2)  Bitstrings and octet strings and all character string types\n\
    \        will be encoded in the primitive form only.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This version of the protocol provides facilities\
    \ only for simple\n   authentication using a cleartext password, and for kerberos\
    \ version 4\n   authentication.  Future versions of LDAP will likely include support\n\
    \   for other authentication methods.\n"
- title: 7.  Bibliography
  contents:
  - "7.  Bibliography\n   [1] The Directory: Overview of Concepts, Models and Service.\
    \  CCITT\n       Recommendation X.500, 1988.\n   [2] Information Processing Systems\
    \ -- Open Systems Interconnection --\n       The Directory: Overview of Concepts,\
    \ Models and Service.  ISO/IEC\n       JTC 1/SC21; International Standard 9594-1,\
    \ 1988\n   [3] Rose, M., \"Directory Assistance Service\", RFC 1202, Performance\n\
    \       Systems International, Inc., February 1991.\n   [4] Howes, T., Smith,\
    \ M., and B. Beecher, \"DIXIE Protocol\n       Specification, RFC 1249, University\
    \ of Michigan, August 1991.\n   [5] Kille, S., \"A String Representation of Distinguished\
    \ Names\", RFC\n       1779, ISODE Consortium, March 1995.\n   [6] Howes, T.,\
    \ Kille, S., Yeong, W., and C. Robbins, \"Lightweight\n       Directory Access\
    \ Protocol\", RFC 1488, University of Michigan,\n       ISODE Consortium, Performance\
    \ Systems International, NeXor Ltd.,\n       July 1993.\n   [7] Kerberos Authentication\
    \ and Authorization System.  S.P. Miller,\n       B.C. Neuman, J.I. Schiller,\
    \ J.H. Saltzer; MIT Project Athena\n       Documentation Section E.2.1, December\
    \ 1987.\n   [8] The Directory: Models.  CCITT Recommendation X.501 ISO/IEC JTC\n\
    \       1/SC21; International Standard 9594-2, 1988.\n  [10] The Directory: Abstract\
    \ Service Definition.  CCITT Recommendation\n       X.511, ISO/IEC JTC 1/SC21;\
    \ International Standard 9594-3, 1988.\n  [11] Specification of Abstract Syntax\
    \ Notation One (ASN.1).  CCITT\n       Recommendation X.208, 1988.\n  [12] Specification\
    \ of Basic Encoding Rules for Abstract Syntax\n       Notation One (ASN.1).  CCITT\
    \ Recommendation X.209, 1988.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n       Wengyik Yeong\n       PSI Inc.\n       510 Huntmar\
    \ Park Drive\n       Herndon, VA 22070\n       USA\n       Phone:  +1 703-450-8001\n\
    \       EMail:  yeongw@psilink.com\n       Tim Howes\n       University of Michigan\n\
    \       ITD Research Systems\n       535 W William St.\n       Ann Arbor, MI 48103-4943\n\
    \       USA\n       Phone:  +1 313 747-4454\n       EMail:   tim@umich.edu\n \
    \      Steve Kille\n       ISODE Consortium\n       PO Box 505\n       London\n\
    \       SW11 1DX\n       UK\n       Phone:  +44-71-223-4062\n       EMail:  S.Kille@isode.com\n"
- title: Appendix A - Complete ASN.1 Definition
  contents:
  - 'Appendix A - Complete ASN.1 Definition

    '
- title: Lightweight-Directory-Access-Protocol DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'Lightweight-Directory-Access-Protocol DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: LDAPMessage ::=
  contents:
  - "LDAPMessage ::=\n    SEQUENCE {\n         messageID      MessageID,\n       \
    \                 -- unique id in request,\n                        -- to be echoed\
    \ in response(s)\n         protocolOp     CHOICE {\n                         \
    \    searchRequest       SearchRequest,\n                             searchResponse\
    \      SearchResponse,\n                             modifyRequest       ModifyRequest,\n\
    \                             modifyResponse      ModifyResponse,\n          \
    \                   addRequest          AddRequest,\n                        \
    \     addResponse         AddResponse,\n                             delRequest\
    \          DelRequest,\n                             delResponse         DelResponse,\n\
    \                             modifyDNRequest     ModifyDNRequest,\n         \
    \                    modifyDNResponse    ModifyDNResponse,\n                 \
    \            compareDNRequest    CompareRequest,\n                           \
    \  compareDNResponse   CompareResponse,\n                             bindRequest\
    \         BindRequest,\n                             bindResponse        BindResponse,\n\
    \                             abandonRequest      AbandonRequest,\n          \
    \                   unbindRequest       UnbindRequest\n                      \
    \  }\n    }\n"
- title: BindRequest ::=
  contents:
  - "BindRequest ::=\n    [APPLICATION 0] SEQUENCE {\n         version        INTEGER\
    \ (1 .. 127),\n                        -- current version is 2\n         name\
    \           LDAPDN,\n                        -- null name implies an anonymous\
    \ bind\n         authentication CHOICE {\n                             simple\
    \        [0] OCTET STRING,\n                                       -- a zero length\
    \ octet string\n                                       -- implies an unauthenticated\n\
    \                                       -- bind.\n                           \
    \  krbv42LDAP    [1] OCTET STRING,\n                             krbv42DSA   \
    \  [2] OCTET STRING\n                                       -- values as returned\
    \ by\n                                       -- krb_mk_req()\n               \
    \                        -- Other values in later versions\n                 \
    \                      -- of this protocol.\n                        }\n    }\n"
- title: BindResponse ::= [APPLICATION 1] LDAPResult
  contents:
  - 'BindResponse ::= [APPLICATION 1] LDAPResult

    '
- title: UnbindRequest ::= [APPLICATION 2] NULL
  contents:
  - 'UnbindRequest ::= [APPLICATION 2] NULL

    '
- title: SearchRequest ::=
  contents:
  - "SearchRequest ::=\n    [APPLICATION 3] SEQUENCE {\n         baseObject     LDAPDN,\n\
    \         scope          ENUMERATED {\n                             baseObject\
    \            (0),\n                             singleLevel           (1),\n \
    \                            wholeSubtree          (2)\n                     \
    \   },\n         derefAliases   ENUMERATED {\n                             neverDerefAliases\
    \     (0),\n                             derefInSearching      (1),\n        \
    \                     derefFindingBaseObj   (2),\n                           \
    \  alwaysDerefAliases    (3)\n                        },\n         sizeLimit \
    \     INTEGER (0 .. maxInt),\n                        -- value of 0 implies no\
    \ sizelimit\n         timeLimit      INTEGER (0 .. maxInt),\n                \
    \        -- value of 0 implies no timelimit\n         attrsOnly     BOOLEAN,\n\
    \                        -- TRUE, if only attributes (without values)\n      \
    \                  -- to be returned.\n         filter         Filter,\n     \
    \    attributes     SEQUENCE OF AttributeType\n    }\n"
- title: SearchResponse ::=
  contents:
  - "SearchResponse ::=\n    CHOICE {\n         entry          [APPLICATION 4] SEQUENCE\
    \ {\n                             objectName     LDAPDN,\n                   \
    \          attributes     SEQUENCE OF SEQUENCE {\n                           \
    \                   AttributeType,\n                                         \
    \     SET OF\n                                                AttributeValue\n\
    \                                            }\n                        },\n \
    \        resultCode     [APPLICATION 5] LDAPResult\n    }\n"
- title: ModifyRequest ::=
  contents:
  - "ModifyRequest ::=\n    [APPLICATION 6] SEQUENCE {\n         object         LDAPDN,\n\
    \         modifications  SEQUENCE OF SEQUENCE {\n                            \
    \ operation     ENUMERATED {\n                                             add\
    \      (0),\n                                             delete   (1),\n    \
    \                                         replace  (2)\n                     \
    \                      },\n                             modification  SEQUENCE\
    \ {\n                                             type     AttributeType,\n  \
    \                                           values   SET OF\n                \
    \                                        AttributeValue\n                    \
    \                       }\n                        }\n    }\n"
- title: ModifyResponse ::= [APPLICATION 7] LDAPResult
  contents:
  - 'ModifyResponse ::= [APPLICATION 7] LDAPResult

    '
- title: AddRequest ::=
  contents:
  - "AddRequest ::=\n    [APPLICATION 8] SEQUENCE {\n         entry          LDAPDN,\n\
    \         attrs          SEQUENCE OF SEQUENCE {\n                            \
    \ type          AttributeType,\n                             values        SET\
    \ OF AttributeValue\n                        }\n    }\n"
- title: AddResponse ::= [APPLICATION 9] LDAPResult
  contents:
  - 'AddResponse ::= [APPLICATION 9] LDAPResult

    '
- title: DelRequest ::= [APPLICATION 10] LDAPDN
  contents:
  - 'DelRequest ::= [APPLICATION 10] LDAPDN

    '
- title: DelResponse ::= [APPLICATION 11] LDAPResult
  contents:
  - 'DelResponse ::= [APPLICATION 11] LDAPResult

    '
- title: ModifyRDNRequest ::=
  contents:
  - "ModifyRDNRequest ::=\n    [APPLICATION 12] SEQUENCE {\n         entry       \
    \   LDAPDN,\n         newrdn         RelativeLDAPDN -- old RDN always deleted\n\
    \    }\n"
- title: ModifyRDNResponse ::= [APPLICATION 13] LDAPResult
  contents:
  - 'ModifyRDNResponse ::= [APPLICATION 13] LDAPResult

    '
- title: CompareRequest ::=
  contents:
  - "CompareRequest ::=\n    [APPLICATION 14] SEQUENCE {\n         entry         \
    \ LDAPDN,\n         ava            AttributeValueAssertion\n    }\n"
- title: CompareResponse ::= [APPLICATION 15] LDAPResult
  contents:
  - 'CompareResponse ::= [APPLICATION 15] LDAPResult

    '
- title: AbandonRequest ::= [APPLICATION 16] MessageID
  contents:
  - 'AbandonRequest ::= [APPLICATION 16] MessageID

    '
- title: MessageID ::= INTEGER (0 .. maxInt)
  contents:
  - 'MessageID ::= INTEGER (0 .. maxInt)

    '
- title: LDAPDN ::= LDAPString
  contents:
  - 'LDAPDN ::= LDAPString

    '
- title: RelativeLDAPDN ::= LDAPString
  contents:
  - 'RelativeLDAPDN ::= LDAPString

    '
- title: Filter ::=
  contents:
  - "Filter ::=\n    CHOICE {\n        and            [0] SET OF Filter,\n       \
    \ or             [1] SET OF Filter,\n        not            [2] Filter,\n    \
    \    equalityMatch  [3] AttributeValueAssertion,\n        substrings     [4] SubstringFilter,\n\
    \        greaterOrEqual [5] AttributeValueAssertion,\n        lessOrEqual    [6]\
    \ AttributeValueAssertion,\n        present        [7] AttributeType,\n      \
    \  approxMatch    [8] AttributeValueAssertion\n    }\n"
- title: LDAPResult ::=
  contents:
  - "LDAPResult ::=\n    SEQUENCE {\n        resultCode    ENUMERATED {\n        \
    \                success                      (0),\n                        operationsError\
    \              (1),\n                        protocolError                (2),\n\
    \                        timeLimitExceeded            (3),\n                 \
    \       sizeLimitExceeded            (4),\n                        compareFalse\
    \                 (5),\n                        compareTrue                  (6),\n\
    \                        authMethodNotSupported       (7),\n                 \
    \       strongAuthRequired           (8),\n                        noSuchAttribute\
    \              (16),\n                        undefinedAttributeType       (17),\n\
    \                        inappropriateMatching        (18),\n                \
    \        constraintViolation          (19),\n                        attributeOrValueExists\
    \       (20),\n                        invalidAttributeSyntax       (21),\n  \
    \                      noSuchObject                 (32),\n                  \
    \      aliasProblem                 (33),\n                        invalidDNSyntax\
    \              (34),\n                        isLeaf                       (35),\n\
    \                        aliasDereferencingProblem    (36),\n                \
    \        inappropriateAuthentication  (48),\n                        invalidCredentials\
    \           (49),\n                        insufficientAccessRights     (50),\n\
    \                        busy                         (51),\n                \
    \        unavailable                  (52),\n                        unwillingToPerform\
    \           (53),\n                        loopDetect                   (54),\n\
    \                        namingViolation              (64),\n                \
    \        objectClassViolation         (65),\n                        notAllowedOnNonLeaf\
    \          (66),\n                        notAllowedOnRDN              (67),\n\
    \                        entryAlreadyExists           (68),\n                \
    \        objectClassModsProhibited    (69),\n                        other   \
    \                     (80)\n                      },\n        matchedDN     LDAPDN,\n\
    \        errorMessage  LDAPString\n    }\n"
- title: AttributeType ::= LDAPString
  contents:
  - "AttributeType ::= LDAPString\n                -- text name of the attribute,\
    \ or dotted\n                -- OID representation\n"
- title: AttributeValue ::= OCTET STRING
  contents:
  - 'AttributeValue ::= OCTET STRING

    '
- title: AttributeValueAssertion ::=
  contents:
  - "AttributeValueAssertion ::=\n    SEQUENCE {\n        attributeType        AttributeType,\n\
    \        attributeValue       AttributeValue\n    }\n"
- title: SubstringFilter ::=
  contents:
  - "SubstringFilter ::=\n    SEQUENCE {\n        type               AttributeType,\n\
    \        SEQUENCE OF CHOICE {\n          initial          [0] LDAPString,\n  \
    \        any              [1] LDAPString,\n          final            [2] LDAPString\n\
    \      }\n    }\n"
- title: LDAPString ::= OCTET STRING
  contents:
  - 'LDAPString ::= OCTET STRING

    '
- title: maxInt INTEGER ::= 65535
  contents:
  - 'maxInt INTEGER ::= 65535

    '
- title: END
  contents:
  - 'END

    '
