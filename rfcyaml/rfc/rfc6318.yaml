- title: __initial_text__
  contents:
  - '    Suite B in Secure/Multipurpose Internet Mail Extensions (S/MIME)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the conventions for using the United States\n\
    \   National Security Agency's Suite B algorithms in Secure/Multipurpose\n   Internet\
    \ Mail Extensions (S/MIME) as specified in RFC 5751.  This\n   document obsoletes\
    \ RFC 5008.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6318.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. ASN.1 ......................................................4\n    \
    \  1.3. Suite B Security Levels ....................................4\n   2. SHA-256\
    \ and SHA-384 Message Digest Algorithms ...................5\n   3. ECDSA Signature\
    \ Algorithm .......................................6\n   4. Key Management ..................................................7\n\
    \      4.1. ECDH Key Agreement Algorithm ...............................7\n  \
    \    4.2. AES Key Wrap ...............................................8\n    \
    \  4.3. Key Derivation Functions ...................................9\n   5. AES\
    \ CBC Content Encryption .....................................11\n   6. Security\
    \ Considerations ........................................12\n   7. References\
    \ .....................................................13\n      7.1. Normative\
    \ References ......................................13\n      7.2. Informative\
    \ References ....................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Fact Sheet on National Security Agency (NSA) Suite B\
    \ Cryptography\n   [NSA] states:\n      A Cryptographic Interoperability Strategy\
    \ (CIS) was developed to\n      find ways to increase assured rapid sharing of\
    \ information both\n      within the U.S. and between the U.S. and her partners\
    \ through the\n      use of a common suite of public standards, protocols, algorithms\n\
    \      and modes referred to as the \"Secure Sharing Suite\" or S.3.  The\n  \
    \    implementation of CIS will facilitate the development of a broader\n    \
    \  range of secure cryptographic products which will be available to\n      a\
    \ wide customer base.  The use of selected public cryptographic\n      standards\
    \ and protocols and Suite B is the core of CIS.\n      In 2005, NSA announced\
    \ Suite B Cryptography which built upon the\n      National Policy on the use\
    \ of the Advanced Encryption Standard\n      (AES) to Protect National Security\
    \ Systems and National Security\n      Information.  In addition to the AES algorithm,\
    \ Suite B includes\n      cryptographic algorithms for key exchanges, digital\
    \ signatures and\n      hashing.  Suite B cryptography has been selected from\
    \ cryptography\n      that has been approved by NIST for use by the U.S. Government\
    \ and\n      specified in NIST standards or recommendations.\n   This document\
    \ specifies the conventions for using the United States\n   National Security\
    \ Agency's Suite B algorithms [NSA] in\n   Secure/Multipurpose Internet Mail Extensions\
    \ (S/MIME) [MSG].  S/MIME\n   makes use of the Cryptographic Message Syntax (CMS)\
    \ [CMS].  In\n   particular, the signed-data and the enveloped-data content types\
    \ are\n   used.  This document only addresses Suite B compliance for S/MIME.\n\
    \   Other applications of CMS are outside the scope of this document.\n   Since\
    \ many of the Suite B algorithms enjoy uses in other environments\n   as well,\
    \ the majority of the conventions needed for the Suite B\n   algorithms are already\
    \ specified in other documents.  This document\n   references the source of these\
    \ conventions, with some relevant\n   details repeated to aid developers that\
    \ choose to support Suite B.\n   This specification obsoletes RFC 5008 [SUITEBSMIME].\
    \  The primary\n   reason for the publication of this document is to allow greater\n\
    \   flexibility in the use of the Suite B Security Levels as discussed in\n  \
    \ Section 1.3.  It also removes some duplication between this document\n   and\
    \ referenced RFCs.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [STDWORDS].\n"
- title: 1.2.  ASN.1
  contents:
  - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X.208-88], the Basic Encoding\n\
    \   Rules (BER) [X.209-88], and the Distinguished Encoding Rules (DER)\n   [X.509-88].\n"
- title: 1.3.  Suite B Security Levels
  contents:
  - "1.3.  Suite B Security Levels\n   Suite B offers two suites of algorithms for\
    \ key agreement, key\n   derivation, key wrap and content encryption, and two\
    \ possible\n   combinations of hash and signing algorithm.  Suite B algorithms\
    \ are\n   defined to support two minimum levels of cryptographic security: 128\n\
    \   and 192 bits.\n   For S/MIME signed messages, Suite B follows the direction\
    \ set by\n   RFC 5753 [CMSECC] and RFC 5754 [SHA2].  Suite B uses these\n   combinations\
    \ of message digest (hash) and signature functions (Sig\n   Sets):\n         \
    \                   Sig Set 1          Sig Set 2\n                           \
    \ ----------------   ----------------\n      Message Digest:       SHA-256   \
    \         SHA-384\n      Signature:            ECDSA with P-256   ECDSA with P-384\n\
    \   For S/MIME encrypted messages, Suite B follows the direction set by\n   RFC\
    \ 5753 [CMSECC] and follows the conventions set by RFC 3565\n   [CMSAES].\n  \
    \ Suite B uses these key establishment (KE) algorithms (KE Sets):\n          \
    \                  KE Set 1           KE Set 2\n                            ----------------\
    \   ----------------\n      Key Agreement:        ECDH with P-256    ECDH with\
    \ P-384\n      Key Derivation:       SHA-256            SHA-384\n      Key Wrap:\
    \             AES-128 Key Wrap   AES-256 Key Wrap\n      Content Encryption: \
    \  AES-128 CBC        AES-256 CBC\n   The two elliptic curves used in Suite B\
    \ are specified in [DSS], and\n   each appear in the literature under two different\
    \ names.  For the\n   sake of clarity, we list both names below:\n      Curve\
    \       NIST Name    SECG Name    OID  [DSS]\n      ---------------------------------------------------------\n\
    \      nistp256    P-256        secp256r1    1.2.840.10045.3.1.7\n      nistp384\
    \    P-384        secp384r1    1.3.132.0.34\n   If configured at a minimum level\
    \ of security of 128 bits, a Suite B\n   compliant S/MIME system performing encryption\
    \ MUST use either KE\n   Set 1 or KE Set 2, with KE Set 1 being the preferred\
    \ suite.  A\n   digital signature, if applied, MUST use either Sig Set 1 or Sig\
    \ Set\n   2, independent of the encryption choice.\n   A recipient in an S/MIME\
    \ system configured at a minimum level of\n   security of 128 bits MUST be able\
    \ to verify digital signatures from\n   Sig Set 1 and SHOULD be able to verify\
    \ digital signatures from Sig\n   Set 2.\n   Note that for S/MIME systems configured\
    \ at a minimum level of\n   security of 128 bits, the algorithm set used for a\
    \ signed-data\n   content type is independent of the algorithm set used for an\n\
    \   enveloped-data content type.\n   If configured at a minimum level of security\
    \ of 192 bits, a Suite B\n   compliant S/MIME system performing encryption MUST\
    \ use KE Set 2.  A\n   digital signature, if applied, MUST use Sig Set 2.\n  \
    \ A recipient in an S/MIME system configured at a minimum level of\n   security\
    \ of 192 bits MUST be able to verify digital signatures from\n   Sig Set 2.\n"
- title: 2.  SHA-256 and SHA-384 Message Digest Algorithms
  contents:
  - "2.  SHA-256 and SHA-384 Message Digest Algorithms\n   SHA-256 and SHA-384 are\
    \ the Suite B message digest algorithms.\n   RFC 5754 [SHA2] specifies the conventions\
    \ for using SHA-256 and\n   SHA-384 with the Cryptographic Message Syntax (CMS).\
    \  Suite B\n   compliant S/MIME implementations MUST follow the conventions in\n\
    \   RFC 5754.  Relevant details are repeated below.\n   Within the CMS signed-data\
    \ content type, message digest algorithm\n   identifiers are located in the SignedData\
    \ digestAlgorithms field and\n   the SignerInfo digestAlgorithm field.\n   The\
    \ SHA-256 and SHA-384 message digest algorithms are defined in FIPS\n   Pub 180-3\
    \ [SHA2FIPS].  The algorithm identifiers for SHA-256 and\n   SHA-384 are defined\
    \ in [SHA2] and are repeated here:\n      id-sha256  OBJECT IDENTIFIER  ::=  {\
    \ joint-iso-itu-t(2)\n          country(16) us(840) organization(1) gov(101) csor(3)\n\
    \          nistalgorithm(4) hashalgs(2) 1 }\n      id-sha384  OBJECT IDENTIFIER\
    \  ::=  { joint-iso-itu-t(2)\n          country(16) us(840) organization(1) gov(101)\
    \ csor(3)\n          nistalgorithm(4) hashalgs(2) 2 }\n   For both SHA-256 and\
    \ SHA-384, the AlgorithmIdentifier parameters\n   field is OPTIONAL, and if present,\
    \ the parameters field MUST contain\n   a NULL.  Implementations MUST accept SHA-256\
    \ and SHA-384\n   AlgorithmIdentifiers with absent parameters.  Implementations\
    \ MUST\n   accept SHA-256 and SHA-384 AlgorithmIdentifiers with NULL parameters.\n\
    \   As specified in RFC 5754 [SHA2], implementations MUST generate\n   SHA-256\
    \ and SHA-384 AlgorithmIdentifiers with absent parameters.\n"
- title: 3.  ECDSA Signature Algorithm
  contents:
  - "3.  ECDSA Signature Algorithm\n   In Suite B, public key certificates used to\
    \ verify S/MIME signatures\n   MUST be compliant with the Suite B Certificate\
    \ Profile specified in\n   RFC 5759 [SUITEBCERT].\n   The Elliptic Curve Digital\
    \ Signature Algorithm (ECDSA) is the Suite B\n   digital signature algorithm.\
    \  RFC 5753 [CMSECC] specifies the\n   conventions for using ECDSA with the Cryptographic\
    \ Message Syntax\n   (CMS).  Suite B compliant S/MIME implementations MUST follow\
    \ the\n   conventions in RFC 5753.  Relevant details are repeated below.\n   Within\
    \ the CMS signed-data content type, signature algorithm\n   identifiers are located\
    \ in the SignerInfo signatureAlgorithm field of\n   SignedData.  In addition,\
    \ signature algorithm identifiers are located\n   in the SignerInfo signatureAlgorithm\
    \ field of countersignature\n   attributes.\n   RFC 5480 [PKI-ALG] defines the\
    \ signature algorithm identifiers used\n   in CMS for ECDSA with SHA-256 and ECDSA\
    \ with SHA-384.  The\n   identifiers are repeated here:\n      ecdsa-with-SHA256\
    \  OBJECT IDENTIFIER  ::=  { iso(1) member-body(2)\n         us(840) ansi-X9-62(10045)\
    \ signatures(4) ecdsa-with-sha2(3) 2 }\n      ecdsa-with-SHA384  OBJECT IDENTIFIER\
    \  ::=  { iso(1) member-body(2)\n         us(840) ansi-X9-62(10045) signatures(4)\
    \ ecdsa-with-sha2(3) 3 }\n   When either the ecdsa-with-SHA256 or the ecdsa-with-SHA384\
    \ algorithm\n   identifier is used, the AlgorithmIdentifier parameters field MUST\
    \ be\n   absent.\n   When signing, the ECDSA algorithm generates two values, commonly\n\
    \   called r and s.  To transfer these two values as one signature, they\n   MUST\
    \ be encoded using the ECDSA-Sig-Value type specified in RFC 5480\n   [PKI-ALG]:\n\
    \      ECDSA-Sig-Value  ::=  SEQUENCE {\n         r  INTEGER,\n         s  INTEGER\
    \ }\n"
- title: 4.  Key Management
  contents:
  - "4.  Key Management\n   CMS accommodates the following general key management\
    \ techniques: key\n   agreement, key transport, previously distributed symmetric\
    \ key-\n   encryption keys, and passwords.  In Suite B for S/MIME, ephemeral-\n\
    \   static key agreement MUST be used as described in Section 4.1.\n   When a\
    \ key agreement algorithm is used, a key-encryption algorithm is\n   also needed.\
    \  In Suite B for S/MIME, the Advanced Encryption Standard\n   (AES) Key Wrap,\
    \ as specified in RFC 3394 [SH] and [AESWRAP], MUST be\n   used as the key-encryption\
    \ algorithm.  AES Key Wrap is discussed\n   further in Section 4.2.  The key-encryption\
    \ key used with the AES Key\n   Wrap algorithm is obtained from a key derivation\
    \ function (KDF).  In\n   Suite B for S/MIME, there are two KDFs -- one based\
    \ on SHA-256 and\n   one based on SHA-384.  These KDFs are discussed further in\n\
    \   Section 4.3.\n"
- title: 4.1.  ECDH Key Agreement Algorithm
  contents:
  - "4.1.  ECDH Key Agreement Algorithm\n   Elliptic Curve Diffie-Hellman (ECDH) is\
    \ the Suite B key agreement\n   algorithm.\n   S/MIME is used in store-and-forward\
    \ communications, which means that\n   ephemeral-static ECDH is always employed.\
    \  This means that the\n   message originator possesses an ephemeral ECDH key\
    \ pair and that the\n   message recipient possesses a static ECDH key pair whose\
    \ public key\n   is represented by an X.509 certificate.  In Suite B, the certificate\n\
    \   used to obtain the recipient's public key MUST be compliant with the\n   Suite\
    \ B Certificate Profile specified in RFC 5759 [SUITEBCERT].\n   Section 3.1 of\
    \ RFC 5753 [CMSECC] specifies the conventions for using\n   ECDH with the CMS.\
    \  Suite B compliant S/MIME implementations MUST\n   follow these conventions.\
    \  Relevant details are repeated below.\n   Within the CMS enveloped-data content\
    \ type, key agreement algorithm\n   identifiers are located in the EnvelopedData\
    \ RecipientInfos\n   KeyAgreeRecipientInfo keyEncryptionAlgorithm field.\n   keyEncryptionAlgorithm\
    \ MUST be one of the two algorithm identifiers\n   listed below, and the algorithm\
    \ identifier parameter field MUST be\n   present and identify the key wrap algorithm.\
    \  The key wrap algorithm\n   denotes the symmetric encryption algorithm used\
    \ to encrypt the\n   content-encryption key with the pairwise key-encryption key\
    \ generated\n   using the ephemeral-static ECDH key agreement algorithm (see\n\
    \   Section 4.3).\n   When implementing KE Set 1, the keyEncryptionAlgorithm MUST\
    \ be\n   dhSinglePass-stdDH-sha256kdf-scheme, and the keyEncryptionAlgorithm\n\
    \   parameter MUST be a KeyWrapAlgorithm containing id-aes128-wrap (see\n   Section\
    \ 4.2).  When implementing KE Set 2, the keyEncryptionAlgorithm\n   MUST be dhSinglePass-stdDH-sha384kdf-scheme,\
    \ and the\n   keyEncryptionAlgorithm parameter MUST be a KeyWrapAlgorithm\n  \
    \ containing id-aes256-wrap.\n   The algorithm identifiers for dhSinglePass-stdDH-sha256kdf-scheme\
    \ and\n   dhSinglePass-stdDH-sha384kdf-scheme, repeated from Section 7.1.4 of\n\
    \   [CMSECC], are:\n      dhSinglePass-stdDH-sha256kdf-scheme  OBJECT IDENTIFIER\
    \  ::=\n          { iso(1) identified-organization(3) certicom(132)\n        \
    \    schemes(1) 11 1 }\n      dhSinglePass-stdDH-sha384kdf-scheme  OBJECT IDENTIFIER\
    \  ::=\n          { iso(1) identified-organization(3) certicom(132)\n        \
    \    schemes(1) 11 2 }\n   Both of these algorithm identifiers use KeyWrapAlgorithm\
    \ as the type\n   for their parameter:\n      KeyWrapAlgorithm  ::=  AlgorithmIdentifier\n"
- title: 4.2.  AES Key Wrap
  contents:
  - "4.2.  AES Key Wrap\n   The AES Key Wrap key-encryption algorithm, as specified\
    \ in RFC 3394\n   [SH] and [AESWRAP], is used to encrypt the content-encryption\
    \ key\n   with a pairwise key-encryption key that is generated using ephemeral-\n\
    \   static ECDH.  Section 8 of RFC 5753 [CMSECC] specifies the\n   conventions\
    \ for using AES Key Wrap with the pairwise key generated\n   with ephemeral-static\
    \ ECDH with the CMS.  Suite B compliant S/MIME\n   implementations MUST follow\
    \ these conventions.  Relevant details are\n   repeated below.\n   When implementing\
    \ KE Set 1, the KeyWrapAlgorithm MUST be\n   id-aes128-wrap.  When implementing\
    \ KE Set 2, the KeyWrapAlgorithm\n   MUST be id-aes256-wrap.\n   Within the CMS\
    \ enveloped-data content type, key wrap algorithm\n   identifiers are located\
    \ in the KeyWrapAlgorithm parameters within the\n   EnvelopedData RecipientInfos\
    \ KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm field.\n   The algorithm identifiers\
    \ for AES Key Wrap are specified in RFC 3394\n   [SH], and the ones needed for\
    \ Suite B compliant S/MIME\n   implementations are repeated here:\n      id-aes128-wrap\
    \  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n         country(16) us(840)\
    \ organization(1) gov(101) csor(3)\n         nistAlgorithm(4) aes(1) 5 }\n   \
    \   id-aes256-wrap  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n         country(16)\
    \ us(840) organization(1) gov(101) csor(3)\n         nistAlgorithm(4) aes(1) 45\
    \ }\n"
- title: 4.3.  Key Derivation Functions
  contents:
  - "4.3.  Key Derivation Functions\n   KDFs based on SHA-256 and SHA-384 are used\
    \ to derive a pairwise key-\n   encryption key from the shared secret produced\
    \ by ephemeral-static\n   ECDH.  Sections 7.1.8 and 7.2 of RFC 5753 [CMSECC] specify\
    \ the\n   conventions for using the KDF with the shared secret generated with\n\
    \   ephemeral-static ECDH with the CMS.  Suite B compliant S/MIME\n   implementations\
    \ MUST follow these conventions.  Relevant details are\n   repeated below.\n \
    \  When implementing KE Set 1, the KDF based on SHA-256 MUST be used.\n   When\
    \ implementing KE Set 2, the KDF based on SHA-384 MUST be used.\n   As specified\
    \ in Section 7.2 of RFC 5753 [CMSECC], using ECDH with the\n   CMS enveloped-data\
    \ content type, the derivation of key-encryption\n   keys makes use of the ECC-CMS-SharedInfo\
    \ type, which is repeated\n   here:\n      ECC-CMS-SharedInfo  ::=  SEQUENCE {\n\
    \         keyInfo      AlgorithmIdentifier,\n         entityUInfo  [0] EXPLICIT\
    \ OCTET STRING OPTIONAL,\n         suppPubInfo  [2] EXPLICIT OCTET STRING }\n\
    \   In Suite B for S/MIME, the fields of ECC-CMS-SharedInfo are used as\n   follows:\n\
    \      keyInfo contains the object identifier of the key-encryption\n        \
    \ algorithm used to wrap the content-encryption key.  In Suite B\n         for\
    \ S/MIME, if the AES-128 Key Wrap is used, then the keyInfo\n         will contain\
    \ id-aes128-wrap, and the parameters will be absent.\n         In Suite B for\
    \ S/MIME, if AES-256 Key Wrap is used, then the\n         keyInfo will contain\
    \ id-aes256-wrap, and the parameters will be\n         absent.\n      entityUInfo\
    \ optionally contains a random value provided by the\n         message originator.\
    \  If the user keying material (ukm) is\n         present, then the entityUInfo\
    \ MUST be present, and it MUST\n         contain the ukm value.  If the ukm is\
    \ not present, then the\n         entityUInfo MUST be absent.\n      suppPubInfo\
    \ contains the length of the generated key-encryption\n         key, in bits,\
    \ represented as a 32-bit unsigned number, as\n         described in RFC 2631\
    \ [CMSDH].  When a 128-bit AES key is used,\n         the length MUST be 0x00000080.\
    \  When a 256-bit AES key is used,\n         the length MUST be 0x00000100.\n\
    \   ECC-CMS-SharedInfo is DER encoded and used as input to the key\n   derivation\
    \ function, as specified in Section 3.6.1 of [SEC1].  Note\n   that ECC-CMS-SharedInfo\
    \ differs from the OtherInfo specified in\n   [CMSDH].  Here, a counter value\
    \ is not included in the keyInfo field\n   because the KDF specified in [SEC1]\
    \ ensures that sufficient keying\n   data is provided.\n   The KDF specified in\
    \ [SEC1] provides an algorithm for generating an\n   essentially arbitrary amount\
    \ of keying material (KM) from the shared\n   secret produced by ephemeral-static\
    \ ECDH, which is called Z for the\n   remainder of this discussion.  The KDF can\
    \ be summarized as:\n      KM = Hash ( Z || Counter || ECC-CMS-SharedInfo )\n\
    \   To generate a key-encryption key (KEK), one or more KM blocks are\n   generated,\
    \ incrementing Counter appropriately, until enough material\n   has been generated.\
    \  The KM blocks are concatenated left to right:\n      KEK = KM ( counter=1 )\
    \ || KM ( counter=2 ) ...\n   The elements of the KDF are used as follows:\n \
    \     Hash is the one-way hash function.  If KE Set 1 is used, the\n         SHA-256\
    \ hash MUST be used.  If KE Set 2 is used, the SHA-384\n         hash MUST be\
    \ used.\n      Z is the shared secret value generated by ephemeral-static ECDH.\n\
    \         Leading zero bits MUST be preserved.  In Suite B for S/MIME, if\n  \
    \       KE Set 1 is used, Z MUST be exactly 256 bits.  In Suite B for\n      \
    \   S/MIME, if KE Set 2 is used, Z MUST be exactly 384 bits.\n      Counter is\
    \ a 32-bit unsigned number, represented in network byte\n         order.  Its\
    \ initial value MUST be 0x00000001 for any key\n         derivation operation.\
    \  In Suite B for S/MIME, with both KE\n         Set 1 and KE Set 2, exactly one\
    \ iteration is needed; the\n         Counter is not incremented.\n      ECC-CMS-SharedInfo\
    \ is composed as described above.  It MUST be DER\n         encoded.\n   To generate\
    \ a key-encryption key, one KM block is generated, with a\n   Counter value of\
    \ 0x00000001:\n      KEK = KM ( 1 ) = Hash ( Z || Counter=1 || ECC-CMS-SharedInfo\
    \ )\n   In Suite B for S/MIME, when KE Set 1 is used, the key-encryption key\n\
    \   MUST be the most significant 128 bits of the SHA-256 output value.\n   In\
    \ Suite B for S/MIME, when KE Set 2 is used, the key-encryption key\n   MUST be\
    \ the most significant 256 bits of the SHA-384 output value.\n   Note that the\
    \ only source of secret entropy in this computation is Z.\n   The effective key\
    \ space of the key-encryption key is limited by the\n   size of Z, in addition\
    \ to any security level considerations imposed\n   by the elliptic curve that\
    \ is used.  However, if entityUInfo is\n   different for each message, a different\
    \ key-encryption key will be\n   generated for each message.\n"
- title: 5.  AES CBC Content Encryption
  contents:
  - "5.  AES CBC Content Encryption\n   AES [AES] in Cipher Block Chaining (CBC) mode\
    \ [MODES] is the Suite B\n   for S/MIME content-encryption algorithm.  RFC 3565\
    \ [CMSAES] specifies\n   the conventions for using AES with the CMS.  Suite B\
    \ compliant S/MIME\n   implementations MUST follow these conventions.  Relevant\
    \ details are\n   repeated below.\n   In Suite B for S/MIME, if KE Set 1 is used,\
    \ AES-128 in CBC mode MUST\n   be used for content encryption.  In Suite B for\
    \ S/MIME, if KE Set 2\n   is used, AES-256 in CBC mode MUST be used.\n   Within\
    \ the CMS enveloped-data content type, content-encryption\n   algorithm identifiers\
    \ are located in the EnvelopedData\n   EncryptedContentInfo contentEncryptionAlgorithm\
    \ field.  The content-\n   encryption algorithm is used to encipher the content\
    \ located in the\n   EnvelopedData EncryptedContentInfo encryptedContent field.\n\
    \   The AES CBC content-encryption algorithm is described in [AES] and\n   [MODES].\
    \  The algorithm identifier for AES-128 in CBC mode is:\n      id-aes128-CBC \
    \ OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n         country(16) us(840) organization(1)\
    \ gov(101) csor(3)\n         nistAlgorithm(4) aes(1) 2 }\n   The algorithm identifier\
    \ for AES-256 in CBC mode is:\n      id-aes256-CBC  OBJECT IDENTIFIER  ::=  {\
    \ joint-iso-itu-t(2)\n         country(16) us(840) organization(1) gov(101) csor(3)\n\
    \         nistAlgorithm(4) aes(1) 42 }\n   The AlgorithmIdentifier parameters\
    \ field MUST be present, and the\n   parameters field must contain AES-IV:\n \
    \     AES-IV  ::=  OCTET STRING (SIZE(16))\n   The 16-octet initialization vector\
    \ is generated at random by the\n   originator.  See [RANDOM] for guidance on\
    \ generation of random\n   values.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document specifies the conventions for using\
    \ the NSA's Suite B\n   algorithms in S/MIME.  All of the algorithms and algorithm\n\
    \   identifiers have been specified in previous documents.\n   Two minimum levels\
    \ of security may be achieved using this\n   specification.  Users must consider\
    \ their risk environment to\n   determine which level is appropriate for their\
    \ own use.\n   See [RANDOM] for guidance on generation of random values.\n   The\
    \ security considerations in RFC 5652 [CMS] discuss the CMS as a\n   method for\
    \ digitally signing data and encrypting data.\n   The security considerations\
    \ in RFC 3370 [CMSALG] discuss\n   cryptographic algorithm implementation concerns\
    \ in the context of the\n   CMS.\n   The security considerations in RFC 5753 [CMSECC]\
    \ discuss the use of\n   elliptic curve cryptography (ECC) in the CMS.\n   The\
    \ security considerations in RFC 3565 [CMSAES] discuss the use of\n   AES in the\
    \ CMS.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [AES]       National Institute of Standards and\
    \ Technology, \"Advanced\n               Encryption Standard (AES)\", FIPS PUB\
    \ 197, November 2001.\n   [AESWRAP]   National Institute of Standards and Technology,\
    \ \"AES Key\n               Wrap Specification\", November 2001.\n   [DSS]   \
    \    National Institute of Standards and Technology, \"Digital\n             \
    \  Signature Standard (DSS)\", FIPS PUB 186-3, June 2009.\n   [CMS]       Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\",\n               STD 70, RFC 5652,\
    \ September 2009.\n   [CMSAES]    Schaad, J., \"Use of the Advanced Encryption\
    \ Standard\n               (AES) Encryption Algorithm in Cryptographic Message\n\
    \               Syntax (CMS)\", RFC 3565, July 2003.\n   [CMSALG]    Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\n               Algorithms\", RFC 3370,\
    \ August 2002.\n   [CMSDH]     Rescorla, E., \"Diffie-Hellman Key Agreement Method\"\
    ,\n               RFC 2631, June 1999.\n   [CMSECC]    Turner, S. and D. Brown,\
    \ \"Use of Elliptic Curve\n               Cryptography (ECC) Algorithms in Cryptographic\
    \ Message\n               Syntax (CMS)\", RFC 5753, January 2010.\n   [MODES]\
    \     National Institute of Standards and Technology, \"DES\n               Modes\
    \ of Operation\", FIPS Pub 81, December 1980.\n   [MSG]       Ramsdell, B. and\
    \ S. Turner, \"Secure/Multipurpose Internet\n               Mail Extensions (S/MIME)\
    \ Version 3.2 Message\n               Specification\", RFC 5751, January 2010.\n\
    \   [PKI-ALG]   Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n  \
    \             \"Elliptic Curve Cryptography Subject Public Key\n             \
    \  Information\", RFC 5480, March 2009.\n   [SEC1]      Standards for Efficient\
    \ Cryptography Group, \"SEC 1:\n               Elliptic Curve Cryptography\",\
    \ September 2000.\n               <http://www.secg.org/collateral/sec1_final.pdf>.\n\
    \   [SH]        Schaad, J. and R. Housley, \"Advanced Encryption Standard\n  \
    \             (AES) Key Wrap Algorithm\", RFC 3394, September 2002.\n   [SHA2]\
    \      Turner, S., \"Using SHA2 Algorithms with Cryptographic\n              \
    \ Message Syntax\", RFC 5754, January 2010.\n   [SHA2FIPS]  National Institute\
    \ of Standards and Technology, \"Secure\n               Hash Standard (SHS)\"\
    , FIPS 180-3, October 2008.\n   [STDWORDS]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [SUITEBCERT]\n               Solinas, J. and L. Zieglar, \"Suite B\
    \ Certificate and\n               Certificate Revocation List (CRL) Profile\"\
    , RFC 5759,\n               January 2010.\n   [SUITEBSMIME]\n               Housley,\
    \ R. and J. Solinas, \"Suite B in\n               Secure/Multipurpose Internet\
    \ Mail Extensions (S/MIME)\",\n               RFC 5008, September 2007.\n   [X.208-88]\
    \  CCITT.  Recommendation X.208: Specification of Abstract\n               Syntax\
    \ Notation One (ASN.1).  1988.\n   [X.209-88]  CCITT.  Recommendation X.209: Specification\
    \ of Basic\n               Encoding Rules for Abstract Syntax Notation One (ASN.1).\n\
    \               1988.\n   [X.509-88]  CCITT.  Recommendation X.509: The Directory\
    \ -\n               Authentication Framework.  1988.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RANDOM]    Eastlake 3rd, D., Schiller, J.,\
    \ and S. Crocker,\n               \"Randomness Requirements for Security\", BCP\
    \ 106,\n               RFC 4086, June 2005.\n   [NSA]       U.S. National Security\
    \ Agency, \"Fact Sheet NSA Suite B\n               Cryptography\", January 2009.\n\
    \               <http://www.nsa.gov/ia/programs/suiteb_cryptography>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring\
    \ Knoll Drive\n   Herndon, VA  20170\n   USA\n   EMail: housley@vigilsec.com\n\
    \   Jerome A. Solinas\n   National Information Assurance Laboratory\n   National\
    \ Security Agency\n   9800 Savage Road\n   Fort George G. Meade, MD  20755\n \
    \  USA\n   EMail: jasolin@orion.ncsc.mil\n"
