- contents:
  - '                    Scheduling Extensions to CalDAV

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines extensions to the Calendaring Extensions to\n
    \  WebDAV (CalDAV) \"calendar-access\" feature to specify a standard way\n   of
    performing scheduling operations with iCalendar-based calendar\n   components.
    \ This document defines the \"calendar-auto-schedule\"\n   feature of CalDAV.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6638.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n
    \     1.1. Terminology ................................................6\n      1.2.
    Notational Conventions .....................................7\n      1.3. XML
    Namespaces and Processing ..............................7\n   2. Scheduling Support
    ..............................................8\n      2.1. Scheduling Outbox
    Collection ...............................9\n           2.1.1. CALDAV:schedule-outbox-URL
    Property ................10\n      2.2. Scheduling Inbox Collection ...............................10\n
    \          2.2.1. CALDAV:schedule-inbox-URL Property .................11\n      2.3.
    Calendaring Reports Extensions ............................12\n      2.4. Additional
    Principal Properties ...........................12\n           2.4.1. CALDAV:calendar-user-address-set
    Property ..........12\n           2.4.2. CALDAV:calendar-user-type Property .................13\n
    \  3. Scheduling Operations ..........................................14\n      3.1.
    Identifying Scheduling Object Resources ...................14\n      3.2. Handling
    Scheduling Object Resources ......................15\n           3.2.1. Organizer
    Scheduling Object Resources ..............15\n                  3.2.1.1. Create
    ....................................16\n                  3.2.1.2. Modify ....................................17\n
    \                 3.2.1.3. Remove ....................................18\n           3.2.2.
    Attendee Scheduling Object Resources ...............18\n                  3.2.2.1.
    Allowed \"Attendee\" Changes ................18\n                  3.2.2.2. Create
    ....................................19\n                  3.2.2.3. Modify ....................................20\n
    \                 3.2.2.4. Remove ....................................21\n           3.2.3.
    HTTP Methods .......................................21\n                  3.2.3.1.
    PUT .......................................22\n                  3.2.3.2. DELETE
    ....................................22\n                  3.2.3.3. COPY ......................................23\n
    \                 3.2.3.4. MOVE ......................................24\n           3.2.4.
    Additional Method Preconditions ....................24\n                  3.2.4.1.
    CALDAV:unique-scheduling-object-resource\n                           Precondition
    ..............................24\n                  3.2.4.2. CALDAV:same-organizer-in-all-components\n
    \                          Precondition ..............................25\n                  3.2.4.3.
    CALDAV:allowed-organizer-scheduling-\n                              object-change
    Precondition .............25\n                  3.2.4.4. CALDAV:allowed-attendee-scheduling-\n
    \                             object-change Precondition .............26\n           3.2.5.
    DTSTAMP and SEQUENCE Properties ....................26\n           3.2.6. Restrict
    Recurrence Instances Sent to \"Attendees\" ..27\n           3.2.7. Forcing the
    Server to Send a Scheduling Message ....27\n           3.2.8. \"Attendee\" Participation
    Status ....................28\n           3.2.9. Schedule Status Values .............................29\n
    \          3.2.10. Avoiding Conflicts when Updating Scheduling Object\n                   Resources
    .........................................31\n                   3.2.10.1. PUT
    .....................................33\n                   3.2.10.2. DELETE,
    COPY, or MOVE ...................33\n   4. Processing Incoming Scheduling Messages
    ........................34\n      4.1. Processing \"Organizer\" Requests, Additions,
    and\n           Cancellations .............................................34\n
    \     4.2. Processing \"Attendee\" Replies .............................35\n      4.3.
    Default Calendar Collection ...............................35\n           4.3.1.
    Additional Method Preconditions ....................36\n                  4.3.1.1.
    CALDAV:default-calendar-needed\n                           Precondition ..............................36\n
    \                 4.3.1.2. CALDAV:valid-schedule-default-calendar-URL\n                           Precondition
    ..............................36\n   5. Request for Busy Time Information ..............................37\n
    \     5.1. Status Codes ..............................................38\n      5.2.
    Additional Method Preconditions ...........................38\n           5.2.1.
    CALDAV:valid-scheduling-message Precondition .......38\n           5.2.2. CALDAV:valid-organizer
    Precondition ................39\n   6. Scheduling Privileges ..........................................39\n
    \     6.1. Privileges on Scheduling Inbox Collections ................39\n           6.1.1.
    CALDAV:schedule-deliver Privilege ..................40\n           6.1.2. CALDAV:schedule-deliver-invite
    Privilege ...........40\n           6.1.3. CALDAV:schedule-deliver-reply Privilege
    ............40\n           6.1.4. CALDAV:schedule-query-freebusy Privilege ...........40\n
    \     6.2. Privileges on Scheduling Outbox Collections ...............40\n           6.2.1.
    CALDAV:schedule-send Privilege .....................41\n           6.2.2. CALDAV:schedule-send-invite
    Privilege ..............41\n           6.2.3. CALDAV:schedule-send-reply Privilege
    ...............41\n           6.2.4. CALDAV:schedule-send-freebusy Privilege ............41\n
    \     6.3. Aggregation of Scheduling Privileges ......................42\n   7.
    Additional iCalendar Property Parameters .......................42\n      7.1.
    Schedule Agent Parameter ..................................42\n      7.2. Schedule
    Force Send Parameter .............................44\n      7.3. Schedule Status
    Parameter .................................45\n   8. Additional Message Header
    Fields ...............................46\n      8.1. Schedule-Reply Request Header
    .............................46\n      8.2. Schedule-Tag Response Header ..............................46\n
    \     8.3. If-Schedule-Tag-Match Request Header ......................47\n   9.
    Additional WebDAV Properties ...................................47\n      9.1.
    CALDAV:schedule-calendar-transp Property ..................47\n      9.2. CALDAV:schedule-default-calendar-URL
    Property .............48\n      9.3. CALDAV:schedule-tag Property ..............................49\n
    \  10. XML Element Definitions .......................................50\n      10.1.
    CALDAV:schedule-response XML Element .....................50\n      10.2. CALDAV:response
    XML Element ..............................50\n      10.3. CALDAV:recipient XML
    Element .............................50\n      10.4. CALDAV:request-status XML
    Element ........................51\n   11. Security Considerations .......................................51\n
    \     11.1. Preventing Denial-of-Service Attacks .....................51\n      11.2.
    Verifying Scheduling Operations ..........................52\n      11.3. Verifying
    Busy Time Information Requests .................52\n      11.4. Privacy Issues
    ...........................................53\n      11.5. Mitigation of iTIP
    Threats ...............................53\n   12. IANA Considerations ...........................................54\n
    \     12.1. Message Header Field Registrations .......................54\n           12.1.1.
    Schedule-Reply ....................................54\n           12.1.2. Schedule-Tag
    ......................................54\n           12.1.3. If-Schedule-Tag-Match
    .............................54\n      12.2. iCalendar Property Parameter Registrations
    ...............55\n      12.3. iCalendar REQUEST-STATUS Value Registrations .............55\n
    \     12.4. Additional iCalendar Elements Registries .................55\n           12.4.1.
    Schedule Agent Values Registry ....................56\n           12.4.2. Schedule
    Force Send Values Registry ...............56\n   13. Acknowledgements ..............................................56\n
    \  14. References ....................................................57\n      14.1.
    Normative References .....................................57\n      14.2. Informative
    References ...................................58\n   Appendix A. Scheduling Privileges
    Summary .........................59\n     A.1. Scheduling Inbox Privileges ................................59\n
    \    A.2. Scheduling Outbox Privileges ...............................60\n   Appendix
    B. Example Scheduling Operations .........................60\n     B.1. Example:
    \"Organizer\" Inviting Multiple \"Attendees\" .........61\n     B.2. Example:
    \"Attendee\" Receiving an Invitation ................63\n     B.3. Example: \"Attendee\"
    Replying to an Invitation ..............64\n     B.4. Example: \"Organizer\" Receiving
    a Reply to an Invitation ....66\n     B.5. Example: \"Organizer\" Requesting Busy
    Time Information ......69\n     B.6. Example: User Attempting to Invite \"Attendee\"
    on\n          Behalf of \"Organizer\" ......................................71\n
    \    B.7. Example: \"Attendee\" Declining an Instance of a\n          Recurring
    Event ............................................72\n     B.8. Example: \"Attendee\"
    Removing an Instance of a\n          Recurring Event ............................................75\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies extensions to the CalDAV \"calendar-access\"\n
    \  [RFC4791] feature to enable scheduling of iCalendar-based [RFC5545]\n   calendar
    components between calendar users.\n   This extension leverages the scheduling
    methods defined in the\n   iCalendar Transport-independent Interoperability Protocol
    (iTIP)\n   [RFC5546] to permit calendar users to perform scheduling operations\n
    \  such as schedule, reschedule, respond to scheduling request, or\n   cancel
    calendar components, as well as search for busy time\n   information.  However,
    the following iTIP [RFC5546] features are not\n   covered: publishing, countering,
    delegating, refreshing, and\n   forwarding calendar components, as well as replacing
    the \"Organizer\"\n   of a calendar component.  It is expected that future extensions
    will\n   be developed to address these.\n   This specification defines a client/server
    scheduling protocol, where\n   the server is made responsible for sending scheduling
    messages and\n   processing incoming scheduling messages.  The client operations
    of\n   creating, modifying, or deleting a calendar component in a calendar\n   are
    enough to trigger the server to deliver the necessary scheduling\n   messages
    to the appropriate calendar users.  This approach is\n   sometimes referred to
    as \"implicit scheduling\".\n   This specification only addresses how scheduling
    occurs with users on\n   a single system (i.e., scheduling between CalDAV servers,
    or some\n   other calendaring and scheduling system, is not defined).  However,\n
    \  this specification is compatible with servers being able to send or\n   receive
    scheduling messages with \"external\" users (e.g., using the\n   iCalendar Message-Based
    Interoperability Protocol (iMIP) [RFC6047]).\n   Section 3 defines the automated
    \"Scheduling Operations\" that allow a\n   client to store iCalendar data on a
    CalDAV server, with the server\n   taking specific actions in response.  One of
    three scheduling\n   operations can take place -- \"create\", \"modify\", or \"remove\",
    based\n   on the HTTP method used for the request -- in addition to a\n   comparison
    between any existing and any new iCalendar data.\n   Section 4 defines how the
    server processes scheduling messages sent\n   as the result of a scheduling operation.\n
    \  Section 5 defines how freebusy requests with an immediate response\n   are
    accomplished.\n   Section 6 defines access control privileges for the scheduling\n
    \  operations defined in this specification.\n   For the majority of the following
    discussion, scheduling of events\n   will be discussed.  However, scheduling of
    to-dos is also fully\n   supported by this specification.\n   This specification
    has been under development for a number of years,\n   and most current implementations
    of CalDAV support it.  With the\n   publication of this document, it is expected
    that all new CalDAV\n   implementations will support it by default.  Interoperability
    tests\n   have been performed regularly.  Significant issues with incompatible\n
    \  CalDAV implementations are not anticipated.\n"
  - contents:
    - "1.1.  Terminology\n   This specification reuses much of the same terminology
      as iCalendar\n   [RFC5545], iTIP [RFC5546], WebDAV [RFC4918], and CalDAV [RFC4791].\n
      \  Additional terms used by this specification are as follows:\n   Scheduling
      object resource:  A calendar object resource contained in\n      a calendar
      collection for which the server will take care of\n      sending scheduling
      messages on behalf of the owner of the calendar\n      collection.\n   Organizer
      scheduling object resource:  A scheduling object resource\n      owned by the
      \"Organizer\".\n   Attendee scheduling object resource:  A scheduling object
      resource\n      owned by an \"Attendee\".\n   Scheduling operation:  Add, change,
      or remove operations on a\n      scheduling object resource for which the server
      will deliver\n      scheduling messages to other calendar users.\n   Scheduling
      message:  A calendar object that describes a scheduling\n      operation such
      as schedule, reschedule, reply, or cancel.\n   Scheduling Outbox collection:
      \ A resource at which busy time\n      information requests are targeted.\n
      \  Scheduling Inbox collection:  A collection in which incoming\n      scheduling
      messages are delivered.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n   The Augmented BNF (ABNF) syntax used by this document to specify
      the\n   format definition of new iCalendar elements is defined in [RFC5234].\n
      \  The ABNF syntax used by this document to specify the format\n   definition
      of new message header fields to be used with the HTTP/1.1\n   protocol is described
      in Section 2.1 of [RFC2616].  Since this\n   Augmented BNF uses the basic production
      rules provided in Section 2.2\n   of [RFC2616], these rules apply to this document
      as well.\n   The term \"protected\" is used in the Conformance field of WebDAV\n
      \  property definitions as defined in Section 15 of [RFC4918].\n   Calendaring
      and scheduling roles are referred to in quoted-strings of\n   text with the
      first character of each word in uppercase.  For\n   example, \"Organizer\" refers
      to a role of a calendar user within the\n   scheduling protocol defined by [RFC5546].\n"
    title: 1.2.  Notational Conventions
  - contents:
    - "1.3.  XML Namespaces and Processing\n   This document uses XML DTD fragments
      ([W3C.REC-xml-20081126],\n   Section 3.2) as a purely notational convention.
      \ WebDAV request and\n   response bodies cannot be validated by a DTD due to
      the specific\n   extensibility rules defined in Section 17 of [RFC4918] and
      due to the\n   fact that all XML elements defined by that specification use
      the XML\n   namespace name \"DAV:\".  In particular,\n   1.  element names use
      the \"DAV:\" namespace,\n   2.  element ordering is irrelevant unless explicitly
      stated,\n   3.  extension elements (elements not already defined as valid child\n
      \      elements) can be added anywhere, except when explicitly stated\n       otherwise,
      and\n   4.  extension attributes (attributes not already defined as valid for\n
      \      this element) can be added anywhere, except when explicitly\n       stated
      otherwise.\n   The XML elements specified in this document are defined in the\n
      \  \"urn:ietf:params:xml:ns:caldav\" XML namespace registered by CalDAV\n   [RFC4791].\n
      \  When XML element types in the namespaces \"DAV:\" and\n   \"urn:ietf:params:xml:ns:caldav\"
      are referenced in this document\n   outside of the context of an XML fragment,
      the strings \"DAV:\" and\n   \"CALDAV:\" will be prefixed to the element types,
      respectively.\n   This document inherits, and sometimes extends, DTD productions
      from\n   Section 14 of [RFC4918].\n   Also note that some CalDAV XML element
      names are identical to WebDAV\n   XML element names, though their namespace
      differs.  Care needs to be\n   taken not to confuse the two sets of names.\n"
    title: 1.3.  XML Namespaces and Processing
  title: 1.  Introduction
- contents:
  - "2.  Scheduling Support\n   A server that supports the features described in this
    document is\n   REQUIRED to support the CalDAV \"calendar-access\" [RFC4791] feature.\n
    \  Servers include \"calendar-auto-schedule\" as a field in the DAV\n   response
    header from an OPTIONS request on any resource that supports\n   any scheduling
    operations, properties, privileges, or methods.\n   This specification introduces
    new collection resource types that are\n   used to manage scheduling object resources,
    and scheduling privileges\n   (as per Section 6), as well as provide scheduling
    functionality.  It\n   is the server's responsibility to create these collection
    resources,\n   and clients have no way to create or delete them.\n"
  - contents:
    - "2.1.  Scheduling Outbox Collection\n   A scheduling Outbox collection is used
      as the target for busy time\n   information requests, and to manage privileges
      that apply to outgoing\n   scheduling requests.\n   A scheduling Outbox collection
      MUST report the DAV:collection and\n   CALDAV:schedule-outbox XML elements in
      the value of the DAV:\n   resourcetype property.  The element type declaration
      for CALDAV:\n   schedule-outbox is\n     <!ELEMENT schedule-outbox EMPTY>\n
      \  Example:\n     <D:resourcetype xmlns:D=\"DAV:\">\n       <D:collection/>\n
      \      <C:schedule-outbox xmlns:C=\"urn:ietf:params:xml:ns:caldav\"/>\n     </D:resourcetype>\n
      \  A scheduling Outbox collection MUST NOT be a child (at any depth) of\n   a
      calendar collection resource.\n   The following WebDAV properties specified
      in CalDAV \"calendar-access\"\n   [RFC4791] MAY also be defined on scheduling
      Outbox collections and\n   apply to scheduling messages submitted to the scheduling
      Outbox\n   collection with the POST method:\n   o  CALDAV:supported-calendar-component-set\n
      \  o  CALDAV:supported-calendar-data\n   o  CALDAV:max-resource-size\n   o  CALDAV:min-date-time\n
      \  o  CALDAV:max-date-time\n   o  CALDAV:max-attendees-per-instance\n   The
      use of child resources in a scheduling Outbox collection is\n   reserved for
      future revisions or extensions of this specification.\n   The following WebDAV
      property is defined on principal resources and\n   used to locate the corresponding
      Outbox collection for the associated\n   principal.\n"
    - contents:
      - "2.1.1.  CALDAV:schedule-outbox-URL Property\n   Name:  schedule-outbox-URL\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Identify the URL
        of the scheduling Outbox collection owned\n      by the associated principal
        resource.\n   Protected:  This property MAY be protected.\n   PROPFIND behavior:
        \ This property SHOULD NOT be returned by a\n      PROPFIND DAV:allprop request
        (as defined in Section 14.2 of\n      [RFC4918]).\n   COPY/MOVE behavior:
        \ This property value SHOULD be preserved in COPY\n      and MOVE operations.\n
        \  Description:  This property is needed for a client to determine where\n
        \     the scheduling Outbox collection of the current user is located so\n
        \     that sending of scheduling messages can occur.  If not present,\n      then
        the associated calendar user is not enabled for the sending\n      of scheduling
        messages on the server.\n   Definition:\n     <!ELEMENT schedule-outbox-URL
        (DAV:href)>\n"
      title: 2.1.1.  CALDAV:schedule-outbox-URL Property
    title: 2.1.  Scheduling Outbox Collection
  - contents:
    - "2.2.  Scheduling Inbox Collection\n   A scheduling Inbox collection contains
      copies of incoming scheduling\n   messages.  These can be requests sent by an
      \"Organizer\", or replies\n   sent by an \"Attendee\" in response to a request.
      \ The scheduling Inbox\n   collection is also used to manage scheduling privileges.\n
      \  A scheduling Inbox collection MUST report the DAV:collection and\n   CALDAV:schedule-inbox
      XML elements in the value of the DAV:\n   resourcetype property.  The element
      type declaration for CALDAV:\n   schedule-inbox is\n     <!ELEMENT schedule-inbox
      EMPTY>\n   Example:\n     <D:resourcetype xmlns:D=\"DAV:\">\n       <D:collection/>\n
      \      <C:schedule-inbox xmlns:C=\"urn:ietf:params:xml:ns:caldav\"/>\n     </D:resourcetype>\n
      \  Scheduling Inbox collections MUST only contain calendar object\n   resources
      that obey the restrictions specified in iTIP [RFC5546].\n   Consequently, scheduling
      Inbox collections MUST NOT contain any types\n   of collection resources.  Restrictions
      defined in Section 4.1 of\n   CalDAV \"calendar-access\" [RFC4791] on calendar
      object resources\n   contained in calendar collections (e.g., Unique Identifier
      (\"UID\")\n   uniqueness) do not apply to calendar object resources contained
      in a\n   scheduling Inbox collection.  Thus, multiple calendar object\n   resources
      contained in a scheduling Inbox collection can have the\n   same \"UID\" property
      value (i.e., multiple scheduling messages for the\n   same calendar component).\n
      \  A scheduling Inbox collection MUST NOT be a child (at any depth) of a\n   calendar
      collection resource.\n   The following WebDAV properties specified in CalDAV
      \"calendar-access\"\n   [RFC4791] MAY also be defined on scheduling Inbox collections
      and\n   apply to scheduling messages delivered to the collection:\n   o  CALDAV:supported-calendar-component-set\n
      \  o  CALDAV:supported-calendar-data\n   o  CALDAV:max-resource-size\n   o  CALDAV:min-date-time\n
      \  o  CALDAV:max-date-time\n   o  CALDAV:max-instances\n   o  CALDAV:max-attendees-per-instance\n
      \  o  CALDAV:calendar-timezone\n   The following WebDAV property is defined
      on principal resources and\n   used to locate the corresponding Inbox collection
      for the associated\n   principal.\n"
    - contents:
      - "2.2.1.  CALDAV:schedule-inbox-URL Property\n   Name:  schedule-inbox-URL\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Identify the URL
        of the scheduling Inbox collection owned\n      by the associated principal
        resource.\n   Protected:  This property MAY be protected.\n   PROPFIND behavior:
        \ This property SHOULD NOT be returned by a\n      PROPFIND DAV:allprop request
        (as defined in Section 14.2 of\n      [RFC4918]).\n   COPY/MOVE behavior:
        \ This property value SHOULD be preserved in COPY\n      and MOVE operations.\n
        \  Description:  This property allows a client to determine where the\n      scheduling
        Inbox collection of the current user is located so that\n      processing
        of scheduling messages can occur.  If not present, then\n      the associated
        calendar user is not enabled for reception of\n      scheduling messages on
        the server.\n   Definition:\n     <!ELEMENT schedule-inbox-URL (DAV:href)>\n"
      title: 2.2.1.  CALDAV:schedule-inbox-URL Property
    title: 2.2.  Scheduling Inbox Collection
  - contents:
    - "2.3.  Calendaring Reports Extensions\n   This specification extends the CALDAV:calendar-query
      and CALDAV:\n   calendar-multiget REPORTs to return results for calendar object\n
      \  resources in scheduling Inbox collections.\n   When a CALDAV:calendar-query
      REPORT includes a time-range query and\n   targets a scheduling Inbox collection,
      if any calendar object\n   resources contain \"VEVENT\" calendar components
      that do not include a\n   \"DTSTART\" iCalendar property (as allowed by iTIP
      [RFC5546]) then such\n   components MUST always match the time-range query test.\n
      \  Note that the CALDAV:free-busy-query REPORT is not supported on\n   scheduling
      Inbox collections.\n"
    title: 2.3.  Calendaring Reports Extensions
  - contents:
    - "2.4.  Additional Principal Properties\n   This section defines new properties
      for WebDAV principal resources as\n   defined in [RFC3744].  These properties
      are likely to be protected,\n   but the server MAY allow them to be written
      by appropriate users.\n"
    - contents:
      - "2.4.1.  CALDAV:calendar-user-address-set Property\n   Name:  calendar-user-address-set\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Identify the calendar
        addresses of the associated principal\n      resource.\n   Protected:  This
        property MAY be protected.\n   PROPFIND behavior:  This property SHOULD NOT
        be returned by a\n      PROPFIND DAV:allprop request (as defined in Section
        14.2 of\n      [RFC4918]).\n   COPY/MOVE behavior:  This property value SHOULD
        be preserved in COPY\n      and MOVE operations.\n   Description:  Support
        for this property is REQUIRED.  This property\n      is needed to map calendar
        user addresses in iCalendar data to\n      principal resources and their associated
        scheduling Inbox and\n      Outbox collections.  In the event that a user
        has no well-defined\n      identifier for his calendar user address, the URI
        of his principal\n      resource can be used.  This property SHOULD be searchable
        using\n      the DAV:principal-property-search REPORT.  The DAV:principal-\n
        \     search-property-set REPORT SHOULD identify this property as such.\n
        \     If not present, then the associated calendar user is not enabled\n      for
        scheduling on the server.\n   Definition:\n     <!ELEMENT calendar-user-address-set
        (DAV:href*)>\n   Example:\n     <C:calendar-user-address-set xmlns:D=\"DAV:\"\n
        \        xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n       <D:href>mailto:bernard@example.com</D:href>\n
        \      <D:href>mailto:bernard.desruisseaux@example.com</D:href>\n     </C:calendar-user-address-set>\n"
      title: 2.4.1.  CALDAV:calendar-user-address-set Property
    - contents:
      - "2.4.2.  CALDAV:calendar-user-type Property\n   Name:  calendar-user-type\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Identifies the
        calendar user type of the associated\n      principal resource.\n   Value:
        \ Same values allowed for the iCalendar \"CUTYPE\" property\n      parameter
        defined in Section 3.2.3 of [RFC5545].\n   Protected:  This property MAY be
        protected.\n   PROPFIND behavior:  This property SHOULD NOT be returned by
        a\n      PROPFIND DAV:allprop request (as defined in Section 14.2 of\n      [RFC4918]).\n
        \  COPY/MOVE behavior:  This property value SHOULD be preserved in COPY\n
        \     and MOVE operations.\n   Description:  Clients can query principal resources
        in order to look\n      up \"Attendees\" available on the server.  When doing
        this, it is\n      useful to know, or restrict the query to, certain types
        of\n      calendar users (e.g., only search for \"people\", or only search
        for\n      \"rooms\").  This property MAY be defined on principal resources
        to\n      indicate the type of calendar user associated with the principal\n
        \     resource.  Its value is the same as the iCalendar \"CUTYPE\"\n      property
        parameter that can be used on \"ATTENDEE\" properties.\n      This property
        SHOULD be searchable using the DAV:principal-\n      property-search REPORT.
        \ The DAV:principal-search-property-set\n      REPORT SHOULD identify this
        property as such.\n   Definition:\n     <!ELEMENT calendar-user-type (#PCDATA)>\n
        \  Example:\n     <C:calendar-user-type\n         xmlns:C=\"urn:ietf:params:xml:ns:caldav\">INDIVIDUAL<\n
        \    /C:calendar-user-type>\n"
      title: 2.4.2.  CALDAV:calendar-user-type Property
    title: 2.4.  Additional Principal Properties
  title: 2.  Scheduling Support
- contents:
  - "3.  Scheduling Operations\n   When a calendar object resource is created, modified,
    or removed from\n   a calendar collection, the server examines the calendar data
    and\n   checks to see whether the data represents a scheduling object\n   resource.
    \ If it does, the server will automatically attempt to\n   deliver a scheduling
    message to the appropriate calendar users.\n   Several types of scheduling operations
    can occur in this case,\n   equivalent to iTIP \"REQUEST\", \"REPLY\", \"CANCEL\",
    and \"ADD\"\n   operations.\n"
  - contents:
    - "3.1.  Identifying Scheduling Object Resources\n   Calendar object resources
      on which the server performs scheduling\n   operations are referred to as scheduling
      object resources.  There are\n   two types of scheduling object resources: organizer
      scheduling object\n   resources, and attendee scheduling object resources.\n
      \  A calendar object resource is considered to be a valid organizer\n   scheduling
      object resource if the \"ORGANIZER\" iCalendar property is\n   present and set
      in all the calendar components to a value that\n   matches one of the calendar
      user addresses of the owner of the\n   calendar collection.\n   A calendar object
      resource is considered to be a valid attendee\n   scheduling object resource
      if the \"ORGANIZER\" iCalendar property is\n   present and set in all the calendar
      components to the same value and\n   doesn't match one of the calendar user
      addresses of the owner of the\n   calendar collection, and if at least one of
      the \"ATTENDEE\" iCalendar\n   property values matches one of the calendar user
      addresses of the\n   owner of the calendar collection.\n   The creation of attendee
      scheduling object resources is typically\n   done by the server, with the resource
      being created in an appropriate\n   calendar collection (see Section 4.3).\n"
    title: 3.1.  Identifying Scheduling Object Resources
  - contents:
    - "3.2.  Handling Scheduling Object Resources\n   The server's behavior when processing
      a scheduling object resource\n   depends on whether it is owned by the \"Organizer\"
      or an \"Attendee\"\n   specified in the calendar data.\n"
    - contents:
      - "3.2.1.  Organizer Scheduling Object Resources\n   An \"Organizer\" can create,
        modify, or remove a scheduling object\n   resource, subject to access privileges,
        preconditions, and the\n   restrictions defined in Section 4.1 of [RFC4791].
        \ These operations\n   are each described next, and how they are invoked via
        HTTP requests\n   is described in Section 3.2.3.\n   The \"Organizer\" of
        a calendar component can also be an \"Attendee\" of\n   that calendar component.
        \ In such cases, the server MUST NOT send a\n   scheduling message to the
        \"Attendee\" that matches the \"Organizer\".\n   The server SHOULD reject
        any attempt to set the \"PARTSTAT\" iCalendar\n   property parameter value
        of the \"ATTENDEE\" iCalendar property of\n   other users in the calendar
        object resource to a value other than\n   \"NEEDS-ACTION\" if the \"SCHEDULE-AGENT\"
        property parameter value is\n   not present or set to the value \"SERVER\".\n
        \  The server MAY reject attempts to create a scheduling object resource\n
        \  that specifies a \"UID\" property value already specified in a\n   scheduling
        object resource contained in another calendar collection\n   of the \"Organizer\".\n"
      - contents:
        - "3.2.1.1.  Create\n   When an \"Organizer\" creates a scheduling object
          resource, the server\n   MUST inspect each \"ATTENDEE\" property to determine
          whether to send a\n   scheduling message.  The table below indicates the
          appropriate iTIP\n   method used by the server, taking into account any
          \"SCHEDULE-AGENT\"\n   property parameter (see Section 7.1) specified on
          each \"ATTENDEE\"\n   property.\n                    +------------------+-------------+\n
          \                   | SCHEDULE-AGENT   | iTIP METHOD |\n                    +------------------+-------------+\n
          \                   | SERVER (default) | REQUEST     |\n                    |
          \                 |             |\n                    | CLIENT           |
          --          |\n                    |                  |             |\n
          \                   | NONE             | --          |\n                    +------------------+-------------+\n
          \  \"SCHEDULE-STATUS\" iCalendar property parameters are added or changed\n
          \  on \"ATTENDEE\" iCalendar properties in the scheduling object resource\n
          \  being created as described in Section 7.3, with the value set as\n   described
          in Section 3.2.9.  This will result in the created calendar\n   object resource
          differing from the calendar data sent in the HTTP\n   request.  As a result,
          clients MAY reload the calendar data from the\n   server in order to update
          to the new server-generated state\n   information.\n   The server MUST add
          a \"SCHEDULE-STATUS\" iCalendar property parameter\n   (see Section 7.3)
          to the \"ATTENDEE\" iCalendar property in the\n   scheduling object resource
          being created, and set its value as\n   described in Section 3.2.9.  This
          will result in the created calendar\n   object resource differing from the
          calendar data sent in the HTTP\n   request.  As a result, clients MAY reload
          the calendar data from the\n   server in order to update to the new server-generated
          state\n   information.  Servers MUST NOT set the \"SCHEDULE-STATUS\" property\n
          \  parameter on the \"ATTENDEE\" property of \"Attendees\" for which it
          did\n   not attempt to deliver a scheduling message.\n   The server MUST
          return an error with the CALDAV:allowed-organizer-\n   scheduling-object-change
          precondition code (Section 3.2.4.3) when the\n   \"Organizer\" attempts
          to change the iCalendar data in a manner that is\n   forbidden.\n"
        title: 3.2.1.1.  Create
      - contents:
        - "3.2.1.2.  Modify\n   When an \"Organizer\" modifies a scheduling object
          resource, the server\n   MUST inspect each \"ATTENDEE\" property in both
          the original and\n   modified iCalendar data on a per-instance basis to
          determine whether\n   to send a scheduling message.  The table below indicates
          the\n   appropriate iTIP method used by the server, taking into account
          any\n   \"SCHEDULE-AGENT\" property parameter (see Section 7.1) specified
          on\n   each \"ATTENDEE\" property.  The values \"SERVER\", \"CLIENT\", and
          \"NONE\"\n   in the top and left titles of the table refer to the \"SCHEDULE-AGENT\"\n
          \  parameter value of the \"ATTENDEE\" property, and the values \"<Absent>\"\n
          \  and \"<Removed>\" are used to cover the cases where the \"ATTENDEE\"\n
          \  property is not present (Original) or is being removed (Modified).\n
          \  +---------------+-----------------------------------------------+\n   |
          \              |                   Modified                    |\n   |               +-----------+-----------+-----------+-----------+\n
          \  |               | <Removed> | SERVER    | CLIENT    | NONE      |\n   |
          \              |           | (default) |           |           |\n   +===+===========+===========+===========+===========+===========+\n
          \  |   | <Absent>  |  --       | REQUEST / | --        | --        |\n   |
          O |           |           | ADD       |           |           |\n   | r
          +-----------+-----------+-----------+-----------+-----------+\n   | i |
          SERVER    |  CANCEL   | REQUEST   | CANCEL    | CANCEL    |\n   | g | (default)
          |           |           |           |           |\n   | i +-----------+-----------+-----------+-----------+-----------+\n
          \  | n | CLIENT    |  --       | REQUEST / | --        | --        |\n   |
          a |           |           | ADD       |           |           |\n   | l
          +-----------+-----------+-----------+-----------+-----------+\n   |   |
          NONE      |  --       | REQUEST / | --        | --        |\n   |   |           |
          \          | ADD       |           |           |\n   +---+-----------+-----------+-----------+-----------+-----------+\n
          \  \"SCHEDULE-STATUS\" iCalendar property parameters are added or changed\n
          \  on \"ATTENDEE\" iCalendar properties in the scheduling object resource\n
          \  being modified as described in Section 7.3, with the value set as\n   described
          in Section 3.2.9.  This will result in the created calendar\n   object resource
          differing from the calendar data sent in the HTTP\n   request.  As a result,
          clients MAY reload the calendar data from the\n   server in order to update
          to the new server-generated state\n   information.\n   The server MUST return
          an error with the CALDAV:allowed-organizer-\n   scheduling-object-change
          precondition code (Section 3.2.4.3) when the\n   \"Organizer\" attempts
          to change the iCalendar data in a manner that is\n   forbidden.\n"
        title: 3.2.1.2.  Modify
      - contents:
        - "3.2.1.3.  Remove\n   When an \"Organizer\" removes a scheduling object
          resource, the server\n   MUST inspect each \"ATTENDEE\" property to determine
          whether to send a\n   scheduling message.  The table below indicates the
          appropriate iTIP\n   method used by the server, taking into account any
          \"SCHEDULE-AGENT\"\n   property parameter (see Section 7.1) specified on
          each \"ATTENDEE\"\n   property.\n                    +------------------+-------------+\n
          \                   | SCHEDULE-AGENT   | iTIP METHOD |\n                    +------------------+-------------+\n
          \                   | SERVER (default) | CANCEL      |\n                    |
          \                 |             |\n                    | CLIENT           |
          --          |\n                    |                  |             |\n
          \                   | NONE             | --          |\n                    +------------------+-------------+\n"
        title: 3.2.1.3.  Remove
      title: 3.2.1.  Organizer Scheduling Object Resources
    - contents:
      - "3.2.2.  Attendee Scheduling Object Resources\n   An \"Attendee\" can create,
        modify, or remove a scheduling object\n   resource.  These operations are
        each described next, and how they are\n   invoked via HTTP requests is described
        in Section 3.2.3.\n"
      - contents:
        - "3.2.2.1.  Allowed \"Attendee\" Changes\n   \"Attendees\" are allowed to
          make some changes to a scheduling object\n   resource, though key properties
          such as start time, end time,\n   location, and summary are typically under
          the control of the\n   \"Organizer\".\n   Servers MUST allow \"Attendees\"
          to make the following iCalendar data\n   changes, subject to other restrictions,
          such as access privileges and\n   preconditions:\n   1.   change their own
          \"PARTSTAT\" iCalendar property parameter value.\n   2.   add, modify, or
          remove any \"TRANSP\" iCalendar properties.\n   3.   add, modify, or remove
          any \"PERCENT-COMPLETE\" iCalendar\n        properties.\n   4.   add, modify,
          or remove any \"COMPLETED\" iCalendar properties.\n   5.   add, modify,
          or remove any \"VALARM\" iCalendar components.\n   6.   add, modify, or
          remove the \"CALSCALE\" iCalendar property within\n        the top-level
          \"VCALENDAR\" component.\n   7.   modify the \"PRODID\" iCalendar property
          within the top-level\n        \"VCALENDAR\" component.\n   8.   add \"EXDATE\"
          iCalendar properties and possibly remove components\n        for overridden
          recurrence instances.\n   9.   add, modify, or remove any \"CREATED\", \"DTSTAMP\",
          and\n        \"LAST-MODIFIED\" iCalendar properties.\n   10.  add, modify,
          or remove \"SCHEDULE-STATUS\" iCalendar property\n        parameters on
          \"ATTENDEE\" properties that have a \"SCHEDULE-AGENT\"\n        parameter
          set to \"CLIENT\".\n   11.  add new components to represent overridden recurrence
          instances,\n        provided the only changes to the recurrence instance
          follow the\n        rules above.\n   The server MUST return an error with
          the CALDAV:allowed-attendee-\n   scheduling-object-change precondition code
          (Section 3.2.4.4) when the\n   \"Attendee\" attempts to change the iCalendar
          data in a manner\n   forbidden by the server.\n"
        title: 3.2.2.1.  Allowed "Attendee" Changes
      - contents:
        - "3.2.2.2.  Create\n   Typically, an \"Attendee\" does not create scheduling
          object resources,\n   as scheduling messages delivered to him on the server
          are\n   automatically processed by the server and placed on one of his\n
          \  calendars (see Section 4).  However, in some cases, a scheduling\n   message
          can get delivered directly to the client (e.g., via email\n   [RFC6047]),
          and the \"Attendee\" might wish to store that on the\n   server.  In that
          case, the client creates a scheduling object\n   resource in a calendar
          belonging to the \"Attendee\".  It can then set\n   the \"SCHEDULE-AGENT\"
          iCalendar property parameter on all \"ORGANIZER\"\n   iCalendar properties
          in the resource to determine how the server\n   treats the resource.  The
          value of the \"SCHEDULE-AGENT\" iCalendar\n   property parameter on all
          \"ORGANIZER\" iCalendar properties MUST be\n   the same.\n   +----------------+--------------------------------------------------+\n
          \  | SCHEDULE-AGENT | Action                                           |\n
          \  +----------------+--------------------------------------------------+\n
          \  | SERVER         | The server will attempt to process changes to    |\n
          \  | (default)      | the resource using the normal rules for attendee |\n
          \  |                | scheduling object resources.                     |\n
          \  |                |                                                  |\n
          \  | CLIENT         | The server does no special processing of the     |\n
          \  |                | resource.  The client is assumed to be handling  |\n
          \  |                | \"Attendee\" replies, etc.                         |\n
          \  |                |                                                  |\n
          \  | NONE           | The server does no special processing of the     |\n
          \  |                | resource.                                        |\n
          \  +----------------+--------------------------------------------------+\n
          \  \"SCHEDULE-STATUS\" iCalendar property parameters are added or changed\n
          \  on \"ORGANIZER\" iCalendar properties in the scheduling object resource\n
          \  being created as described in Section 7.3, with the value set as\n   described
          in Section 3.2.9.\n"
        title: 3.2.2.2.  Create
      - contents:
        - "3.2.2.3.  Modify\n   When a scheduling object resource is modified by an
          \"Attendee\", the\n   server's behavior depends on the value of the \"SCHEDULE-AGENT\"\n
          \  iCalendar property parameter on the \"ORGANIZER\" iCalendar properties:\n
          \  +----------------+--------------------------------------------------+\n
          \  | SCHEDULE-AGENT | Action                                           |\n
          \  +----------------+--------------------------------------------------+\n
          \  | SERVER         | The server will attempt to process the update    |\n
          \  | (default)      | using the behavior listed below.                 |\n
          \  |                |                                                  |\n
          \  | CLIENT         | The server does no special processing of the     |\n
          \  |                | resource.  The client is assumed to be handling  |\n
          \  |                | any \"Attendee\" replies, etc.                     |\n
          \  |                |                                                  |\n
          \  | NONE           | The server does no special processing of the     |\n
          \  |                | resource.                                        |\n
          \  +----------------+--------------------------------------------------+\n
          \  The server will inspect the changes by comparing the new scheduling\n
          \  object resource with the existing scheduling object resource.\n   If
          the \"Attendee\" changes one or more \"PARTSTAT\" iCalendar property\n   values
          on any component, or adds an overridden component with a\n   changed \"PARTSTAT\"
          property, then the server MUST deliver an iTIP\n   \"REPLY\" scheduling
          message to the \"Organizer\" to indicate the new\n   participation status
          of the \"Attendee\".\n   If the \"Attendee\" adds an \"EXDATE\" property
          value to effectively\n   remove a recurrence instance, the server MUST deliver
          an iTIP \"REPLY\"\n   scheduling message to the \"Organizer\" to indicate
          that the \"Attendee\"\n   has declined the instance.\n   \"SCHEDULE-STATUS\"
          iCalendar property parameters are added or changed\n   on \"ORGANIZER\"
          iCalendar properties in the scheduling object resource\n   being modified
          as described in Section 7.3, with the value set as\n   described in Section
          3.2.9.  This will result in the updated calendar\n   object resource differing
          from the calendar data sent in the HTTP\n   request.  As a result, clients
          MAY reload the calendar data from the\n   server in order to update to the
          new server-generated state\n   information.\n"
        title: 3.2.2.3.  Modify
      - contents:
        - "3.2.2.4.  Remove\n   When a scheduling object resource is removed by an
          \"Attendee\", the\n   server's behavior depends on the value of the \"SCHEDULE-AGENT\"\n
          \  iCalendar property parameter on the \"ORGANIZER\" iCalendar properties:\n
          \  +----------------+--------------------------------------------------+\n
          \  | SCHEDULE-AGENT | Action                                           |\n
          \  +----------------+--------------------------------------------------+\n
          \  | SERVER         | The server will attempt to process the removal,  |\n
          \  | (default)      | taking into account any \"Schedule-Reply\" request
          |\n   |                | header as per Section 8.1.                       |\n
          \  |                |                                                  |\n
          \  | CLIENT         | The server does no special processing of the     |\n
          \  |                | resource.  The client is assumed to be handling  |\n
          \  |                | any \"Attendee\" replies, etc.                     |\n
          \  |                |                                                  |\n
          \  | NONE           | The server does no special processing of the     |\n
          \  |                | resource.                                        |\n
          \  +----------------+--------------------------------------------------+\n"
        title: 3.2.2.4.  Remove
      title: 3.2.2.  Attendee Scheduling Object Resources
    - contents:
      - "3.2.3.  HTTP Methods\n   This section describes how the use of various HTTP
        [RFC2616] and\n   WebDAV [RFC4918] methods on a scheduling object resource
        will cause a\n   create, modify, or remove operation on that resource as described\n
        \  above.  The use of these methods is subject to the restrictions in\n   [RFC4791],
        in addition to what is described below.\n"
      - contents:
        - "3.2.3.1.  PUT\n   When the server receives a PUT method request, it MUST
          execute the\n   following operations, provided all appropriate preconditions
          are met:\n   +------------------------+--------------------------+---------------+\n
          \  | Existing Destination   | Resulting Destination    | Server        |\n
          \  | Resource               | Resource                 | Operation     |\n
          \  +------------------------+--------------------------+---------------+\n
          \  | None                   | Calendar object resource | None          |\n
          \  |                        |                          |               |\n
          \  | None                   | Scheduling object        | Create        |\n
          \  |                        | resource                 |               |\n
          \  |                        |                          |               |\n
          \  | Calendar object        | Calendar object resource | None          |\n
          \  | resource               |                          |               |\n
          \  |                        |                          |               |\n
          \  | Calendar object        | Scheduling object        | Create        |\n
          \  | resource               | resource                 |               |\n
          \  | Scheduling object      | Calendar object resource | Remove        |\n
          \  | resource               |                          |               |\n
          \  |                        |                          |               |\n
          \  | Scheduling object      | Scheduling object        | Modify        |\n
          \  | resource               | resource                 |               |\n
          \  +------------------------+--------------------------+---------------+\n"
        title: 3.2.3.1.  PUT
      - contents:
        - "3.2.3.2.  DELETE\n   When the server receives a DELETE method request targeted
          at a\n   scheduling object resource, it MUST execute the Remove operation.\n
          \  When the server receives a DELETE method request targeted at a\n   calendar
          collection, it MUST execute the Remove operation on all\n   scheduling object
          resources contained in the calendar collection.\n"
        title: 3.2.3.2.  DELETE
      - contents:
        - "3.2.3.3.  COPY\n   When the server receives a COPY method request, it MUST
          execute the\n   following operations based on the source and destination
          collections\n   in the request:\n   +-----------------------+------------------------+------------------+\n
          \  | Source Collection     | Destination Collection | Server Operation |\n
          \  +-----------------------+------------------------+------------------+\n
          \  | Non-calendar          | Non-calendar           | None             |\n
          \  | collection            | collection             |                  |\n
          \  |                       |                        |                  |\n
          \  | Non-calendar          | Calendar collection    | (1)              |\n
          \  | collection            |                        |                  |\n
          \  |                       |                        |                  |\n
          \  | Calendar collection   | Non-calendar           | None             |\n
          \  |                       | collection             |                  |\n
          \  |                       |                        |                  |\n
          \  | Calendar collection   | Calendar collection    | (2)              |\n
          \  +-----------------------+------------------------+------------------+\n
          \  Note (1):  The rules in Section 3.2.3.1 are applied for the\n              destination
          of the COPY request.\n   Note (2):  The server MAY reject this as per Section
          3.2.4.1;\n              otherwise, None.\n   The behavior of a COPY method
          request on a calendar collection is\n   undefined.\n"
        title: 3.2.3.3.  COPY
      - contents:
        - "3.2.3.4.  MOVE\n   When the server receives a MOVE method request, it MUST
          execute the\n   following operations based on the source and destination
          collections\n   in the request:\n   +-----------------------+------------------------+------------------+\n
          \  | Source Collection     | Destination Collection | Server Operation |\n
          \  +-----------------------+------------------------+------------------+\n
          \  | Non-calendar          | Non-calendar           | None             |\n
          \  | collection            | collection             |                  |\n
          \  |                       |                        |                  |\n
          \  | Non-calendar          | Calendar collection    | (1)              |\n
          \  | collection            |                        |                  |\n
          \  |                       |                        |                  |\n
          \  | Calendar collection   | Non-calendar           | (2)              |\n
          \  |                       | collection             |                  |\n
          \  |                       |                        |                  |\n
          \  | Calendar collection   | Calendar collection    | None             |\n
          \  +-----------------------+------------------------+------------------+\n
          \  Note (1):  The rules in Section 3.2.3.1 are applied for the\n              destination
          of the MOVE request.\n   Note (2):  The rules in Section 3.2.3.2 are applied
          for the source of\n              the MOVE request.\n   The behavior of a
          MOVE method request on a calendar collection is\n   undefined.\n"
        title: 3.2.3.4.  MOVE
      title: 3.2.3.  HTTP Methods
    - contents:
      - "3.2.4.  Additional Method Preconditions\n   This specification defines method
        preconditions (see Section 16 of\n   WebDAV [RFC4918]), in addition to those
        in [RFC4791], to provide\n   machine-parseable information in error responses.\n"
      - contents:
        - "3.2.4.1.  CALDAV:unique-scheduling-object-resource Precondition\n   Name:
          \ unique-scheduling-object-resource\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
          \  Apply to:  PUT, COPY, and MOVE\n   Use with:  403 Forbidden\n   Purpose:
          \ (precondition) -- Servers MAY reject requests to create a\n      scheduling
          object resource with an iCalendar \"UID\" property value\n      already
          in use by another scheduling object resource owned by the\n      same user
          in other calendar collections.  Servers SHOULD report\n      the URL of
          the scheduling object resource that is already making\n      use of the
          same \"UID\" property value in the DAV:href element.\n   Definition:\n     <!ELEMENT
          unique-scheduling-object-resource (DAV:href?)>\n   Example:\n     <C:unique-scheduling-object-resource
          xmlns:D=\"DAV:\"\n         xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n
          \      <D:href>/home/bernard/calendars/personal/abc123.ics</D:href>\n     </C:unique-scheduling-object-resource>\n"
        title: 3.2.4.1.  CALDAV:unique-scheduling-object-resource Precondition
      - contents:
        - "3.2.4.2.  CALDAV:same-organizer-in-all-components Precondition\n   Name:
          \ same-organizer-in-all-components\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
          \  Apply to:  PUT, COPY, and MOVE\n   Use with:  403 Forbidden\n   Purpose:
          \ (precondition) -- All the calendar components in a\n      scheduling object
          resource MUST contain the same \"ORGANIZER\"\n      property value when
          present.\n   Definition:\n     <!ELEMENT same-organizer-in-all-components
          EMPTY>\n"
        title: 3.2.4.2.  CALDAV:same-organizer-in-all-components Precondition
      - contents:
        - "3.2.4.3.  CALDAV:allowed-organizer-scheduling-object-change Precondition\n
          \  Name:  allowed-organizer-scheduling-object-change\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
          \  Apply to:  PUT, COPY, and MOVE\n   Use with:  403 Forbidden\n   Purpose:
          \ (precondition) -- Servers MAY impose restrictions on\n      modifications
          allowed by an \"Organizer\".  For instance, servers\n      MAY prevent the
          \"Organizer\" from setting the \"PARTSTAT\" property\n      parameter to
          a value other than \"NEEDS-ACTION\" if the\n      corresponding \"ATTENDEE\"
          property has the \"SCHEDULE-AGENT\"\n      property parameter set to \"SERVER\",
          or does not have the\n      \"SCHEDULE-AGENT\" property parameter.  See
          Section 3.2.1.\n   Definition:\n     <!ELEMENT allowed-organizer-scheduling-object-change
          EMPTY>\n"
        title: 3.2.4.3.  CALDAV:allowed-organizer-scheduling-object-change Precondition
      - contents:
        - "3.2.4.4.  CALDAV:allowed-attendee-scheduling-object-change Precondition\n
          \  Name:  allowed-attendee-scheduling-object-change\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
          \  Apply to:  PUT, COPY, and MOVE\n   Use with:  403 Forbidden\n   Purpose:
          \ (precondition) -- Servers MAY impose restrictions on\n      modifications
          allowed by an \"Attendee\", subject to the allowed\n      changes specified
          in Section 3.2.2.1.\n   Definition:\n     <!ELEMENT allowed-attendee-scheduling-object-change
          EMPTY>\n"
        title: 3.2.4.4.  CALDAV:allowed-attendee-scheduling-object-change Precondition
      title: 3.2.4.  Additional Method Preconditions
    - contents:
      - "3.2.5.  DTSTAMP and SEQUENCE Properties\n   The server MUST ensure that a
        \"DTSTAMP\" iCalendar property is present\n   and set the value to the UTC
        time that the scheduling message was\n   generated (as required by iCalendar).\n
        \  The server MUST ensure that for each type of scheduling operation,\n   the
        \"SEQUENCE\" iCalendar property value is updated as per iTIP\n   [RFC5546].\n"
      title: 3.2.5.  DTSTAMP and SEQUENCE Properties
    - contents:
      - "3.2.6.  Restrict Recurrence Instances Sent to \"Attendees\"\n   Servers MUST
        ensure that \"Attendees\" only get information about\n   recurrence instances
        that explicitly include them as an \"Attendee\",\n   when delivering scheduling
        messages for recurring calendar\n   components.\n   For example, if an \"Attendee\"
        is invited to only a single instance of\n   a recurring event, the organizer
        scheduling object resource will\n   contain an overridden instance in the
        form of a separate calendar\n   component.  That separate calendar component
        will include the\n   \"ATTENDEE\" property referencing the \"one-off\" \"Attendee\".
        \ That\n   \"Attendee\" will not be listed in any other calendar components
        in the\n   scheduling object resource.  Any scheduling messages delivered
        to the\n   \"Attendee\" will only contain information about this overridden\n
        \  instance.\n   As another example, an \"Attendee\" could be excluded from
        one instance\n   of a recurring event.  In that case, the organizer scheduling
        object\n   resource will include an overridden instance with an \"ATTENDEE\"
        list\n   that does not include the \"Attendee\" being excluded.  Any scheduling\n
        \  messages delivered to the \"Attendee\" will not specify the overridden\n
        \  instance but rather will include an \"EXDATE\" property in the \"master\"\n
        \  component that defines the recurrence set.\n"
      title: 3.2.6.  Restrict Recurrence Instances Sent to "Attendees"
    - contents:
      - "3.2.7.  Forcing the Server to Send a Scheduling Message\n   The iCalendar
        property parameter \"SCHEDULE-FORCE-SEND\", defined in\n   Section 7.2, can
        be used by a calendar user to force the server to\n   send a scheduling message
        to an \"Attendee\" or the \"Organizer\" in a\n   situation where the server
        would not normally send a scheduling\n   message.  For instance, an \"Organizer\"
        could use this property\n   parameter to request an \"Attendee\" that previously
        declined an\n   invitation to reconsider his participation status without
        being\n   forced to modify the event.\n"
      title: 3.2.7.  Forcing the Server to Send a Scheduling Message
    - contents:
      - "3.2.8.  \"Attendee\" Participation Status\n   This section specifies additional
        requirements on the handling of the\n   \"PARTSTAT\" property parameter when
        the \"SCHEDULE-AGENT\" property\n   parameter on the corresponding \"ATTENDEE\"
        property is set to the\n   value \"SERVER\" or is not present.\n   A reschedule
        occurs when any \"DTSTART\", \"DTEND\", \"DURATION\", \"DUE\",\n   \"RRULE\",
        \"RDATE\", or \"EXDATE\" property changes in a calendar\n   component such
        that existing recurrence instances are impacted by the\n   changes, as shown
        in the table below.  Servers MUST reset the\n   \"PARTSTAT\" property parameter
        value of all \"ATTENDEE\" properties,\n   except the one that corresponds
        to the \"Organizer\", to \"NEEDS-ACTION\"\n   for each calendar component
        change that causes any instance to be\n   rescheduled.\n   +-----------+-------------------------------------------------------+\n
        \  | Property  | Server Action                                         |\n
        \  +-----------+-------------------------------------------------------+\n
        \  | DTSTART,  | Any change to these properties results in \"PARTSTAT\"  |\n
        \  | DTEND,    | being set to \"NEEDS-ACTION\".                          |\n
        \  | DURATION, |                                                       |\n
        \  | DUE       |                                                       |\n
        \  |           |                                                       |\n
        \  | RRULE     | A change to or addition of this property that results |\n
        \  |           | in the addition of new recurring instances or a       |\n
        \  |           | change in time for existing recurring instances       |\n
        \  |           | results in \"PARTSTAT\" being reset to \"NEEDS-ACTION\"   |\n
        \  |           | on each affected component.                           |\n
        \  |           |                                                       |\n
        \  | RDATE     | A change to or addition of this property that results |\n
        \  |           | in the addition of new recurring instances or a       |\n
        \  |           | change in time for existing recurring instances       |\n
        \  |           | results in \"PARTSTAT\" being reset to \"NEEDS-ACTION\"   |\n
        \  |           | on each affected component.                           |\n
        \  |           |                                                       |\n
        \  | EXDATE    | A change to or removal of this property that results  |\n
        \  |           | in the reinstatement of recurring instances results   |\n
        \  |           | in \"PARTSTAT\" being set to \"NEEDS-ACTION\" on each     |\n
        \  |           | affected component.                                   |\n
        \  +-----------+-------------------------------------------------------+\n
        \  The server MAY allow the \"Organizer's\" client to change an\n   \"Attendee's\"
        \"PARTSTAT\" property parameter value to \"NEEDS-ACTION\" at\n   any other
        time (e.g., when the \"LOCATION\" property value changes, an\n   \"Organizer\"
        might wish to re-invite \"Attendees\" who might be impacted\n   by the change).\n"
      title: 3.2.8.  "Attendee" Participation Status
    - contents:
      - "3.2.9.  Schedule Status Values\n   When scheduling with an \"Attendee\",
        there are two types of status\n   information that can be returned during
        the operation.  The first\n   type of status information is a \"delivery\"
        status that indicates\n   whether the scheduling message from the \"Organizer\"
        to the \"Attendee\"\n   was delivered or not, or what the current status of
        delivery is.  The\n   second type of status information is a \"reply\" status
        corresponding\n   to the \"Attendee's\" own \"REQUEST-STATUS\" information
        from the\n   scheduling message reply that is sent back to the \"Organizer\".\n
        \  Similarly, when an \"Attendee\" sends a reply back to the \"Organizer\",\n
        \  there will be \"delivery\" status information for the scheduling\n   message
        sent to the \"Organizer\".  However, there is no\n   \"REQUEST-STATUS\" sent
        back by the \"Organizer\", so there is no\n   equivalent of the \"reply\"
        status as per scheduling messages to\n   \"Attendees\".\n   The \"delivery\"
        status information on an \"ORGANIZER\" or \"ATTENDEE\"\n   iCalendar property
        is conveyed in the \"SCHEDULE-STATUS\" property\n   parameter value (Section
        7.3).  The status code value for \"delivery\"\n   status can be one of the
        following:\n   +----------+--------------------------------------------------------+\n
        \  | Delivery | Description                                            |\n
        \  | Status   |                                                        |\n
        \  | Code     |                                                        |\n
        \  +----------+--------------------------------------------------------+\n
        \  | 1.0      | The scheduling message is pending.  That is, the       |\n
        \  |          | server is still in the process of sending the message. |\n
        \  |          | The status code value can be expected to change once   |\n
        \  |          | the server has completed its sending and delivery      |\n
        \  |          | attempts.                                              |\n
        \  |          |                                                        |\n
        \  | 1.1      | The scheduling message has been successfully sent.     |\n
        \  |          | However, the server does not have explicit information |\n
        \  |          | about whether the scheduling message was successfully  |\n
        \  |          | delivered to the recipient.  This state can occur with |\n
        \  |          | \"store and forward\" style scheduling protocols such as |\n
        \  |          | iMIP [RFC6047] (iTIP using email).                     |\n
        \  |          |                                                        |\n
        \  | 1.2      | The scheduling message has been successfully           |\n
        \  |          | delivered.                                             |\n
        \  |          |                                                        |\n
        \  | 3.7      | The scheduling message was not delivered because the   |\n
        \  |          | server did not recognize the calendar user address as  |\n
        \  |          | a valid calendar user.  Note that this code applies to |\n
        \  |          | both \"Organizer\" and \"Attendee\" calendar user          |\n
        \  |          | addresses.                                             |\n
        \  |          |                                                        |\n
        \  | 3.8      | The scheduling message was not delivered due to        |\n
        \  |          | insufficient privileges.  Note that this code applies  |\n
        \  |          | to privileges granted by both the \"Organizer\" and      |\n
        \  |          | \"Attendee\" calendar users.                             |\n
        \  |          |                                                        |\n
        \  | 5.1      | The scheduling message was not delivered because the   |\n
        \  |          | server could not complete delivery of the message.     |\n
        \  |          | This is likely due to a temporary failure, and the     |\n
        \  |          | originator can try to send the message again at a      |\n
        \  |          | later time.                                            |\n
        \  |          |                                                        |\n
        \  | 5.2      | The scheduling message was not delivered because the   |\n
        \  |          | server was not able to find a way to deliver the       |\n
        \  |          | message.  This is likely a permanent failure, and the  |\n
        \  |          | originator ought not try to send the message again, at |\n
        \  |          | least without verifying/correcting the calendar user   |\n
        \  |          | address of the recipient.                              |\n
        \  |          |                                                        |\n
        \  | 5.3      | The scheduling message was not delivered and was       |\n
        \  |          | rejected because scheduling with that recipient is not |\n
        \  |          | allowed.  This is likely a permanent failure, and the  |\n
        \  |          | originator ought not try to send the message again.    |\n
        \  +----------+--------------------------------------------------------+\n
        \  The status code for \"reply\" status can be any of the valid iTIP\n   [RFC5546]
        \"REQUEST-STATUS\" values.\n   The 1.xx \"REQUEST-STATUS\" codes are new.
        \ This specification modifies\n   item (2) of Section 3.6 of [RFC5546] by
        adding the following\n   restriction:\n      For a 1.xx code, all components
        MUST have exactly the same code.\n   Definition of the new 1.xx codes is as
        follows:\n"
      - contents:
        - "3.2.9.1.  Status Code 1.0\n   Status Code:  1.0\n   Status Description:
          \ Pending.\n   Status Exception Data:  None.\n   Description:  Delivery
          of the iTIP message is pending.\n"
        title: 3.2.9.1.  Status Code 1.0
      - contents:
        - "3.2.9.2.  Status Code 1.1\n   Status Code:  1.1\n   Status Description:
          \ Sent.\n   Status Exception Data:  None.\n   Description:  The iTIP message
          has been sent, though no information\n      about successful delivery is
          known.\n"
        title: 3.2.9.2.  Status Code 1.1
      - contents:
        - "3.2.9.3.  Status Code 1.2\n   Status Code:  1.2\n   Status Description:
          \ Delivered.\n   Status Exception Data:  None.\n   Description:  The iTIP
          message has been sent and delivered.\n"
        title: 3.2.9.3.  Status Code 1.2
      title: 3.2.9.  Schedule Status Values
    - contents:
      - "3.2.10.  Avoiding Conflicts when Updating Scheduling Object Resources\n   Scheduling
        object resources on the server might change frequently as\n   \"Attendees\"
        change their participation status, triggering updates to\n   the \"Organizer\",
        and refreshes of other \"Attendees'\" copies of the\n   scheduling object
        resource.  This can lead to an \"inconsequential\"\n   change to a calendar
        user's data -- one that does not directly impact\n   the user's own participation
        status.  When this occurs, clients have\n   to reload calendar data and reconcile
        with changes being made by\n   calendar users.  To avoid the need for this,
        the server can instead\n   merge calendar data changes from a client with
        changes made as a\n   result of a scheduling operation carried out by some
        other calendar\n   user.\n   This specification introduces a new WebDAV resource
        property CALDAV:\n   schedule-tag with a corresponding response header \"Schedule-Tag\",
        and\n   a new \"If-Schedule-Tag-Match\" request header to allow client changes\n
        \  to be appropriately merged with server changes in the case where the\n
        \  changes on the server were the result of an \"inconsequential\"\n   scheduling
        message update (one that simply updates the status\n   information of \"Attendees\"
        due to a reply from another \"Attendee\").\n   Servers MUST automatically
        resolve conflicts with \"inconsequential\"\n   changes done to scheduling
        object resources when the \"If-Schedule-\n   Tag-Match\" request header is
        specified.  The If-Schedule-Tag-Match\n   request header applies only to the
        Request-URI, and not to the\n   destination of a COPY or MOVE.\n   A response
        to any successful GET or PUT request targeting a\n   scheduling object resource
        MUST include a Schedule-Tag response\n   header with the value set to the
        same value as the CALDAV:schedule-\n   tag WebDAV property of the resource.\n
        \  A response to any successful COPY or MOVE request that specifies a\n   Destination
        request header targeting a scheduling object resource\n   MUST include a Schedule-Tag
        response header with the value set to the\n   same value as the CALDAV:schedule-tag
        WebDAV property of the\n   destination resource.\n   Clients SHOULD use the
        If-Schedule-Tag-Match header on requests that\n   update scheduling object
        resources, instead of HTTP ETag-based\n   precondition tests (e.g., If-Match).
        \ Normal ETag-based precondition\n   tests are used in all other cases, e.g.,
        for synchronization.\n   The value of the CALDAV:schedule-tag property changes
        according to\n   these rules:\n   o  For an \"Organizer's\" copy of a scheduling
        object resource:\n      1.  The server MUST NOT change the CALDAV:schedule-tag
        property\n          value when the scheduling object resource is updated as
        the\n          result of automatically processing a scheduling message reply\n
        \         from an \"Attendee\".  For instance, when an \"Attendee\" replies\n
        \         to the \"Organizer\", the CALDAV:schedule-tag property is\n          unchanged
        after the \"Organizer's\" scheduling object resource\n          has been automatically
        updated by the server with the\n          \"Attendee's\" new participation
        status.\n      2.  The server MUST change the CALDAV:schedule-tag property
        value\n          when the scheduling object resource is changed directly via
        an\n          HTTP request (e.g., PUT, COPY, or MOVE).\n   o  For an \"Attendee's\"
        copy of a scheduling object resource:\n      1.  The server MUST change the
        CALDAV:schedule-tag property value\n          when the scheduling object resource
        is changed as the result\n          of processing a scheduling message update
        from an \"Organizer\"\n          that contains changes other than just the
        participation status\n          of \"Attendees\".\n      2.  The server MUST
        NOT change the CALDAV:schedule-tag property\n          value when the scheduling
        object resource is changed as the\n          result of processing a scheduling
        message update from an\n          \"Organizer\" that only specifies changes
        in the participation\n          status of \"Attendees\".  For instance, when
        \"Attendee\" \"A\"\n          replies to \"Organizer\" \"O\", and \"Attendee\"
        \"B\" receives a\n          scheduling message update from \"Organizer\" \"O\"
        with the new\n          participation status of \"Attendee\" \"A\", the CALDAV:schedule-\n
        \         tag property of \"Attendee\" \"B\"'s scheduling object resource\n
        \         would remain the same.\n      3.  The server MUST change the CALDAV:schedule-tag
        property value\n          when the scheduling object resource is changed directly
        via an\n          HTTP request (e.g., PUT, COPY, or MOVE).\n"
      - contents:
        - "3.2.10.1.  PUT\n   Clients MAY use the If-Schedule-Tag-Match request header
          to do a PUT\n   request that ensures that \"inconsequential\" changes on
          the server do\n   not result in a precondition error.  The value of the
          request header\n   is set to the last Schedule-Tag value received for the
          resource being\n   modified.  If the value of the If-Schedule-Tag-Match
          header matches\n   the current value of the CALDAV:schedule-tag property,
          the server\n   MUST take any \"ATTENDEE\" property changes for all \"Attendees\"
          other\n   than the owner of the scheduling object resource and apply those
          to\n   the new resource being stored.  Otherwise, the server MUST fail the\n
          \  request with a 412 Precondition Failed status code.\n"
        title: 3.2.10.1.  PUT
      - contents:
        - "3.2.10.2.  DELETE, COPY, or MOVE\n   Clients MAY use the If-Schedule-Tag-Match
          request header to do a\n   DELETE, COPY, or MOVE request that ensures that
          \"inconsequential\"\n   changes on the server do not result in a precondition
          error.  The\n   value of the request header is set to the last Schedule-Tag
          value\n   received for the resource being deleted.  If the value of the\n
          \  If-Schedule-Tag-Match header matches the current value of the CALDAV:\n
          \  schedule-tag property, the server performs the normal DELETE, COPY,\n
          \  or MOVE request processing for the resource.  Otherwise, the server\n
          \  MUST fail the request with a 412 Precondition Failed status code.\n"
        title: 3.2.10.2.  DELETE, COPY, or MOVE
      title: 3.2.10.  Avoiding Conflicts when Updating Scheduling Object Resources
    title: 3.2.  Handling Scheduling Object Resources
  title: 3.  Scheduling Operations
- contents:
  - "4.  Processing Incoming Scheduling Messages\n   Scheduling operations can cause
    the delivery of a scheduling message\n   into an \"Organizer's\" or \"Attendee's\"
    scheduling Inbox collection.\n   Servers MUST automatically process incoming scheduling
    messages using\n   the rules defined by [RFC5546], by creating or updating the\n
    \  corresponding scheduling object resources on calendars owned by the\n   owner
    of the scheduling Inbox collection.  In addition, the\n   scheduling message is
    stored in the scheduling Inbox collection as an\n   indicator to the client that
    a scheduling operation has taken place.\n   Scheduling messages are typically
    removed from the scheduling Inbox\n   collection by the client once the calendar
    user has acknowledged the\n   change.\n   The server MUST take into account privileges
    on the scheduling Inbox\n   collection when processing incoming scheduling messages,
    to determine\n   whether delivery of the scheduling message is allowed.  Privileges
    on\n   calendars containing any matching scheduling object resource are not\n
    \  considered in this case (i.e., a schedule message from another user\n   can
    cause modifications to resources in calendar collections that the\n   other user
    would not normally have read or write access to).\n   Additionally, servers MUST
    take into account any scheduling Inbox\n   collection preconditions (see Section
    2.2) when delivering the\n   scheduling message, and MUST take into account the
    similar\n   preconditions on any calendar collection that contains, or would\n
    \  contain, the corresponding scheduling object resource.\n"
  - contents:
    - "4.1.  Processing \"Organizer\" Requests, Additions, and Cancellations\n   For
      a scheduling message sent by an \"Organizer\", the server first\n   tries to
      locate a corresponding scheduling object resource belonging\n   to the \"Attendee\".
      \ If no matching scheduling object resource exists,\n   the server treats the
      scheduling message as a new message; otherwise,\n   it is treated as an update.\n
      \  In the case of a new message, the server processes the scheduling\n   message
      and creates a new scheduling object resource as per\n   Section 4.3.\n   In
      the case of an update, the server processes the scheduling message\n   and updates
      the matching scheduling object resource belonging to the\n   \"Attendee\" to
      reflect the changes sent by the \"Organizer\".\n   In each case, the scheduling
      message MUST only appear in the\n   \"Attendee's\" scheduling Inbox collection
      once all automatic\n   processing has been done.\n"
    title: 4.1.  Processing "Organizer" Requests, Additions, and Cancellations
  - contents:
    - "4.2.  Processing \"Attendee\" Replies\n   For a scheduling message reply sent
      by an \"Attendee\", the server\n   first locates the corresponding scheduling
      object resource belonging\n   to the \"Organizer\".  If the corresponding scheduling
      object resource\n   cannot be found, the server SHOULD ignore the scheduling
      message.\n   The server MUST then update the \"PARTSTAT\" iCalendar property\n
      \  parameter value of each \"ATTENDEE\" iCalendar property in the\n   scheduling
      object resource to match the changes indicated in the\n   reply (taking into
      account the fact that an \"Attendee\" could have\n   created a new overridden
      iCalendar component to indicate different\n   participation status on one or
      more instances of a recurring event).\n   The server MUST also update or add
      the \"SCHEDULE-STATUS\" property\n   parameter on each matching \"ATTENDEE\"
      iCalendar property and set its\n   value to that of the \"REQUEST-STATUS\" property
      in the reply, or to\n   \"2.0\" if \"REQUEST-STATUS\" is not present (also taking
      into account\n   recurrence instances).  If there are multiple \"REQUEST-STATUS\"\n
      \  properties in the reply, the \"SCHEDULE-STATUS\" property parameter\n   value
      is set to a comma-separated list of status codes, one from each\n   \"REQUEST-STATUS\"
      property.\n   The server SHOULD send scheduling messages to all the other\n
      \  \"Attendees\" indicating the change in participation status of the\n   \"Attendee\"
      replying, subject to the recurrence requirements of\n   Section 3.2.6.\n   The
      scheduling message MUST only appear in the \"Organizer's\"\n   scheduling Inbox
      collection once all automatic processing has been\n   done.\n"
    title: 4.2.  Processing "Attendee" Replies
  - contents:
    - "4.3.  Default Calendar Collection\n   The server processes scheduling messages
      received for an \"Attendee\"\n   by creating a new scheduling object resource
      in a calendar collection\n   belonging to the \"Attendee\", when one does not
      already exist.  A\n   calendar user that is an \"Attendee\" in a scheduling
      operation MUST\n   have at least one valid calendar collection available.  If
      there is\n   no valid calendar collection, then the server MUST reject the attempt\n
      \  to deliver the scheduling message to the \"Attendee\".\n   Servers MAY provide
      support for a default calendar collection -- that\n   is, the calendar collection
      in which new scheduling object resources\n   will be created.  The CALDAV:schedule-default-calendar-URL
      WebDAV\n   property, which can be present on the scheduling Inbox collection
      of\n   a calendar user, specifies whether this calendar user has a default\n
      \  calendar collection.  See Section 9.2.\n   Servers SHOULD create new scheduling
      object resources in the default\n   calendar collection, if the CALDAV:schedule-default-calendar-URL\n
      \  WebDAV property is set.\n   Servers MAY allow clients to change the default
      calendar collection\n   by changing the value of the CALDAV:schedule-default-calendar-URL\n
      \  WebDAV property on the scheduling Inbox collection.  However, the\n   server
      MUST ensure that any new value for that property refers to a\n   valid calendar
      collection belonging to the owner of the scheduling\n   Inbox collection.\n
      \  Servers MUST reject any attempt to delete the default calendar\n   collection.\n"
    - contents:
      - "4.3.1.  Additional Method Preconditions\n   This specification defines additional
        method preconditions (see\n   Section 16 of WebDAV [RFC4918]) to provide machine-parseable\n
        \  information in error responses.\n"
      - contents:
        - "4.3.1.1.  CALDAV:default-calendar-needed Precondition\n   Name:  default-calendar-needed\n
          \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Apply to:  DELETE\n   Use
          with:  403 Forbidden\n   Purpose:  (precondition) -- The client attempted
          to delete the\n      calendar collection currently referenced by the CALDAV:schedule-\n
          \     default-calendar-URL property, or attempted to remove the CALDAV:\n
          \     schedule-default-calendar-URL property on the scheduling Inbox\n      collection
          on a server that doesn't allow such operations.\n   Definition:\n     <!ELEMENT
          default-calendar-needed EMPTY>\n"
        title: 4.3.1.1.  CALDAV:default-calendar-needed Precondition
      - contents:
        - "4.3.1.2.  CALDAV:valid-schedule-default-calendar-URL Precondition\n   Name:
          \ valid-schedule-default-calendar-URL\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
          \  Apply to:  PROPPATCH\n   Use with:  403 Forbidden\n   Purpose:  (precondition)
          -- The client attempted to set the CALDAV:\n      schedule-default-calendar-URL
          property to a DAV:href element that\n      doesn't reference a valid calendar
          collection.  Note: Servers that\n      do not allow clients to change the
          CALDAV:schedule-default-\n      calendar-URL property would simply return
          the DAV:cannot-modify-\n      protected-property precondition defined in
          Section 16 of WebDAV\n      [RFC4918].\n   Definition:\n     <!ELEMENT valid-schedule-default-calendar-URL
          EMPTY>\n"
        title: 4.3.1.2.  CALDAV:valid-schedule-default-calendar-URL Precondition
      title: 4.3.1.  Additional Method Preconditions
    title: 4.3.  Default Calendar Collection
  title: 4.  Processing Incoming Scheduling Messages
- contents:
  - "5.  Request for Busy Time Information\n   Busy time information of one or more
    calendar users can be determined\n   by submitting a POST request targeted at
    the scheduling Outbox\n   collection of the calendar user requesting the information
    (the\n   \"Organizer\").  To accomplish this, the request body MUST contain a\n
    \  \"VFREEBUSY\" calendar component with the \"METHOD\" iCalendar property\n   set
    to the value \"REQUEST\" as specified in Section 3.3.2 of iTIP\n   [RFC5546].
    \ The resource identified by the Request-URI MUST be a\n   resource collection
    of type CALDAV:schedule-outbox (Section 2.1).\n   The \"ORGANIZER\" property value
    in the \"VFREEBUSY\" component MUST\n   match one of the calendar user addresses
    of the owner of the Outbox\n   collection.\n   A response to a busy time request
    that indicates status for one or\n   more calendar users MUST be an XML document
    with a CALDAV:schedule-\n   response XML element as its root element.  This element
    MUST contain\n   one CALDAV:response element for each calendar user, with each
    such\n   element in turn containing elements that indicate which calendar user\n
    \  they correspond to, the scheduling status for that calendar user, any\n   error
    codes, and an optional description.  For a successful busy time\n   request, a
    CALDAV:calendar-data element is also present for each\n   calendar user, containing
    the actual busy time information (i.e., an\n   iCalendar \"VFREEBUSY\" component).
    \ See Section 10 for details on the\n   child elements.  See Appendix B.5 for
    an example busy time request\n   and response.\n"
  - contents:
    - "5.1.  Status Codes\n   The list below summarizes the most common status codes
      used for this\n   method.  However, clients need to be prepared to handle other\n
      \  2/3/4/5xx series status codes as well.\n      200 (OK) - The command succeeded.\n
      \     204 (No Content) - The command succeeded.\n      400 (Bad Request) - The
      client has provided an invalid scheduling\n      message.\n      403 (Forbidden)
      - The client cannot submit a scheduling message to\n      the specified Request-URI.\n
      \     404 (Not Found) - The URL in the Request-URI was not present.\n      423
      (Locked) - The specified resource is locked, and the client\n      either is
      not a lock owner or the lock type requires a lock token\n      to be submitted
      and the client did not submit it.\n"
    title: 5.1.  Status Codes
  - contents:
    - "5.2.  Additional Method Preconditions\n   The following are existing preconditions
      that are reused for the POST\n   method on an Outbox collection.\n   o  DAV:need-privileges
      [RFC3744]\n   o  CALDAV:supported-calendar-data [RFC4791]\n   o  CALDAV:valid-calendar-data
      [RFC4791]\n   o  CALDAV:max-resource-size [RFC4791]\n   The following are new
      method preconditions for the POST method on an\n   Outbox collection.\n"
    - contents:
      - "5.2.1.  CALDAV:valid-scheduling-message Precondition\n   Name:  valid-scheduling-message\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Apply to:  POST\n   Use with:
        \ 400 Bad Request\n   Purpose:  (precondition) -- The resource submitted in
        the POST\n      request MUST obey all the restrictions specified in Section
        3.3.2\n      of iTIP [RFC5546].\n   Definition:\n     <!ELEMENT valid-scheduling-message
        EMPTY>\n"
      title: 5.2.1.  CALDAV:valid-scheduling-message Precondition
    - contents:
      - "5.2.2.  CALDAV:valid-organizer Precondition\n   Name:  valid-organizer\n
        \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Apply to:  POST\n   Use with:
        \ 403 Forbidden\n   Purpose:  (precondition) -- The \"ORGANIZER\" property
        value in the\n      POST request's scheduling message MUST match one of the
        calendar\n      user addresses of the owner of the scheduling Outbox collection\n
        \     being targeted by the request.\n   Definition:\n     <!ELEMENT valid-organizer
        EMPTY>\n"
      title: 5.2.2.  CALDAV:valid-organizer Precondition
    title: 5.2.  Additional Method Preconditions
  title: 5.  Request for Busy Time Information
- contents:
  - "6.  Scheduling Privileges\n   New scheduling privileges are defined in this section.
    \ All the\n   scheduling privileges MUST be non-abstract and MUST appear in the\n
    \  DAV:supported-privilege-set property of scheduling Outbox and Inbox\n   collections
    on which they are defined.\n   The tables specified in Appendix A clarify which
    scheduling methods\n   (e.g., \"REQUEST\", \"REPLY\", etc.) are controlled by
    each scheduling\n   privilege defined in this section.\n"
  - contents:
    - "6.1.  Privileges on Scheduling Inbox Collections\n   This section defines new
      WebDAV Access Control List (ACL) [RFC3744]\n   privileges that are defined for
      use on scheduling Inbox collections.\n   These privileges determine whether
      delivery of scheduling messages\n   from a calendar user is allowed by the calendar
      user who \"owns\" the\n   scheduling Inbox collection.  This allows calendar
      users to choose\n   which other calendar users can schedule with them.\n   Note
      that when a scheduling message is delivered to a calendar user,\n   in addition
      to a scheduling object resource being created in the\n   calendar user's scheduling
      Inbox collection, a new scheduling object\n   resource might be created or an
      existing one updated in a calendar\n   belonging to the calendar user.  In that
      case, the ability to create\n   or update the scheduling object resource in
      the calendar is\n   controlled by the privileges assigned to the scheduling
      Inbox\n   collection.\n   The privileges defined in this section are ignored
      if applied to a\n   resource other than a scheduling Inbox collection.\n"
    - contents:
      - "6.1.1.  CALDAV:schedule-deliver Privilege\n   CALDAV:schedule-deliver is
        an aggregate privilege as per Section 6.3.\n     <!ELEMENT schedule-deliver
        EMPTY>\n"
      title: 6.1.1.  CALDAV:schedule-deliver Privilege
    - contents:
      - "6.1.2.  CALDAV:schedule-deliver-invite Privilege\n   The CALDAV:schedule-deliver-invite
        privilege controls the processing\n   and delivery of scheduling messages
        coming from an \"Organizer\".\n     <!ELEMENT schedule-deliver-invite EMPTY>\n"
      title: 6.1.2.  CALDAV:schedule-deliver-invite Privilege
    - contents:
      - "6.1.3.  CALDAV:schedule-deliver-reply Privilege\n   The CALDAV:schedule-deliver-reply
        privilege controls the processing\n   and delivery of scheduling messages
        coming from an \"Attendee\".\n     <!ELEMENT schedule-deliver-reply EMPTY>\n"
      title: 6.1.3.  CALDAV:schedule-deliver-reply Privilege
    - contents:
      - "6.1.4.  CALDAV:schedule-query-freebusy Privilege\n   The CALDAV:schedule-query-freebusy
        privilege controls freebusy\n   requests targeted at the owner of the scheduling
        Inbox collection.\n     <!ELEMENT schedule-query-freebusy EMPTY>\n"
      title: 6.1.4.  CALDAV:schedule-query-freebusy Privilege
    title: 6.1.  Privileges on Scheduling Inbox Collections
  - contents:
    - "6.2.  Privileges on Scheduling Outbox Collections\n   This section defines
      new WebDAV ACL [RFC3744] privileges that are\n   defined for use on scheduling
      Outbox collections.  These privileges\n   determine which calendar users are
      allowed to send scheduling\n   messages on behalf of the calendar user who \"owns\"
      the scheduling\n   Outbox collection.  This allows calendar users to choose
      other\n   calendar users who can act on their behalf (e.g., assistants working\n
      \  on behalf of their boss).\n   The privileges defined in this section are
      ignored if applied to a\n   resource other than a scheduling Outbox collection.\n"
    - contents:
      - "6.2.1.  CALDAV:schedule-send Privilege\n   CALDAV:schedule-send is an aggregate
        privilege as per Section 6.3.\n     <!ELEMENT schedule-send EMPTY>\n"
      title: 6.2.1.  CALDAV:schedule-send Privilege
    - contents:
      - "6.2.2.  CALDAV:schedule-send-invite Privilege\n   The CALDAV:schedule-send-invite
        privilege controls the sending of\n   scheduling messages by \"Organizers\".\n
        \  Users granted the DAV:bind privilege on a calendar collection, or the\n
        \  DAV:write privilege on scheduling object resources, will also need\n   the
        CALDAV:schedule-send-invite privilege granted on the scheduling\n   Outbox
        collection of the owner of the calendar collection or\n   scheduling object
        resource in order to be allowed to create, modify,\n   or delete scheduling
        object resources in a way that will trigger the\n   CalDAV server to deliver
        scheduling messages to \"Attendees\".\n     <!ELEMENT schedule-send-invite
        EMPTY>\n"
      title: 6.2.2.  CALDAV:schedule-send-invite Privilege
    - contents:
      - "6.2.3.  CALDAV:schedule-send-reply Privilege\n   The CALDAV:schedule-send-reply
        privilege controls the sending of\n   scheduling messages by \"Attendees\".\n
        \  Users granted the DAV:bind privilege on a calendar collection, or the\n
        \  DAV:write privilege on scheduling object resources, will also need\n   the
        CALDAV:schedule-send-reply privilege granted on the scheduling\n   Outbox
        collection of the owner of the calendar collection or\n   scheduling object
        resource in order to be allowed to create, modify,\n   or delete scheduling
        object resources in a way that will trigger the\n   CalDAV server to deliver
        scheduling message replies to the\n   \"Organizer\".\n     <!ELEMENT schedule-send-reply
        EMPTY>\n"
      title: 6.2.3.  CALDAV:schedule-send-reply Privilege
    - contents:
      - "6.2.4.  CALDAV:schedule-send-freebusy Privilege\n   The CALDAV:schedule-send-freebusy
        privilege controls the use of the\n   POST method to submit scheduling messages
        that specify the scheduling\n   method \"REQUEST\" with a \"VFREEBUSY\" calendar
        component.\n     <!ELEMENT schedule-send-freebusy EMPTY>\n"
      title: 6.2.4.  CALDAV:schedule-send-freebusy Privilege
    title: 6.2.  Privileges on Scheduling Outbox Collections
  - contents:
    - "6.3.  Aggregation of Scheduling Privileges\n   Server implementations MUST
      aggregate the scheduling privileges as\n   follows:\n      DAV:all contains
      CALDAV:schedule-deliver and CALDAV:schedule-send;\n      CALDAV:schedule-deliver
      contains CALDAV:schedule-deliver-invite,\n      CALDAV:schedule-deliver-reply,
      and CALDAV:schedule-query-freebusy;\n      CALDAV:schedule-send contains CALDAV:schedule-send-invite,
      CALDAV:\n      schedule-send-reply, and CALDAV:schedule-send-freebusy.\n   The
      following diagram illustrates how scheduling privileges are\n   aggregated according
      to the above requirements.\n   [DAV:all] (aggregate)\n       |\n       +-- [CALDAV:schedule-deliver]
      (aggregate)\n       |      |\n       |      +-- [CALDAV:schedule-deliver-invite]\n
      \      |      +-- [CALDAV:schedule-deliver-reply]\n       |      +-- [CALDAV:schedule-query-freebusy]\n
      \      |\n       +-- [CALDAV:schedule-send] (aggregate)\n              |\n              +--
      [CALDAV:schedule-send-invite]\n              +-- [CALDAV:schedule-send-reply]\n
      \             +-- [CALDAV:schedule-send-freebusy]\n"
    title: 6.3.  Aggregation of Scheduling Privileges
  title: 6.  Scheduling Privileges
- contents:
  - "7.  Additional iCalendar Property Parameters\n   This specification defines additional
    iCalendar property parameters\n   to support the CalDAV scheduling extensions.\n"
  - contents:
    - "7.1.  Schedule Agent Parameter\n   Parameter Name:  SCHEDULE-AGENT\n   Purpose:
      \ To specify the agent expected to deliver scheduling\n      messages to the
      corresponding \"Organizer\" or \"Attendee\".\n   Format Definition:  This property
      parameter is defined by the\n      following notation:\n     scheduleagentparam
      = \"SCHEDULE-AGENT\" \"=\"\n                      (\"SERVER\"      ; The server
      handles scheduling\n                     / \"CLIENT\"      ; The client handles
      scheduling\n                     / \"NONE\"        ; No scheduling\n                     /
      x-name        ; Experimental type\n                     / iana-token)   ; Other
      IANA-registered type\n     ;\n     ; If the parameter is not present, its value
      defaults to SERVER.\n     ; \"x-name\" and \"iana-token\" are defined in Section
      3.1 of\n     ; [RFC5545].\n   Description:  This property parameter MAY be specified
      on \"ORGANIZER\"\n      or \"ATTENDEE\" iCalendar properties.  In the absence
      of this\n      parameter, the value \"SERVER\" MUST be used for the default\n
      \     behavior.  The value determines whether or not a scheduling\n      operation
      on a server will cause a scheduling message to be sent\n      to the corresponding
      calendar user identified by the \"ORGANIZER\"\n      or \"ATTENDEE\" property
      value.  When the value \"SERVER\" is\n      specified, or the parameter is absent,
      then it is the server's\n      responsibility to send a scheduling message as
      part of a\n      scheduling operation.  When the value \"CLIENT\" is specified,
      that\n      indicates that the client is handling scheduling messages with the\n
      \     calendar user itself.  When \"NONE\" is specified, no scheduling\n      messages
      are being sent to the calendar user.\n      Servers MUST NOT include this parameter
      in any scheduling messages\n      sent as the result of a scheduling operation.\n
      \     Clients MUST NOT include this parameter in any scheduling messages\n      that
      they themselves send.\n      The parameter value MUST be the same on every \"ORGANIZER\"
      property\n      in a scheduling object resource.\n      The parameter value
      MUST be the same on each \"ATTENDEE\" property\n      whose values match in
      a scheduling object resource.\n      Servers and clients MUST treat x-name and
      iana-token values they\n      do not recognize the same way as they would the
      \"NONE\" value.\n   Example:\n     ORGANIZER;SCHEDULE-AGENT=SERVER:mailto:bernard@example.com\n
      \    ATTENDEE;SCHEDULE-AGENT=NONE:mailto:cyrus@example.com\n"
    title: 7.1.  Schedule Agent Parameter
  - contents:
    - "7.2.  Schedule Force Send Parameter\n   Parameter Name:  SCHEDULE-FORCE-SEND\n
      \  Purpose:  To force a scheduling message to be sent to the calendar\n      user
      specified by the property.\n   Format Definition:  This property parameter is
      defined by the\n      following notation:\n     scheduleforcesendparam = \"SCHEDULE-FORCE-SEND\"
      \"=\"\n                            (\"REQUEST\"    ; Force a \"REQUEST\"\n                           /
      \"REPLY\"      ; Force a \"REPLY\"\n                           / iana-token)\n
      \    ;\n     ; \"iana-token\" is defined in Section 3.1 of [RFC5545].  Its value\n
      \    ; MUST be an IANA-registered iCalendar \"METHOD\" property value.\n   Description:
      \ This property parameter MAY be specified on \"ATTENDEE\"\n      and \"ORGANIZER\"
      properties on which the \"SCHEDULE-AGENT\" property\n      parameter is set
      to the value \"SERVER\" or is not specified.  This\n      property parameter
      is used to force a server to send a scheduling\n      message to a specific
      calendar user in situations where the server\n      would not send a scheduling
      message otherwise (e.g., when no\n      change that warrants the delivery of
      a new scheduling message was\n      performed on the scheduling object resource).
      \ An \"Organizer\" MAY\n      specify this parameter on an \"ATTENDEE\" property
      with the value\n      \"REQUEST\" to force a \"REQUEST\" scheduling message
      to be sent to\n      this \"Attendee\".  An \"Attendee\" MAY specify this parameter
      on the\n      \"ORGANIZER\" with the value \"REPLY\" to force a \"REPLY\" scheduling\n
      \     message to be sent to the \"Organizer\".\n      Servers MUST NOT preserve
      this property parameter in scheduling\n      object resources, nor include it
      in any scheduling messages sent\n      as the result of a scheduling operation.\n
      \     Clients MUST NOT include this parameter in any scheduling messages\n      that
      they themselves send.\n      Servers MUST set the \"SCHEDULE-STATUS\" parameter
      of the \"ATTENDEE\"\n      or \"ORGANIZER\" to 2.3 (i.e., \"Success; invalid
      property parameter\n      ignored\"; see Section 3.6 of [RFC5546]) when the
      \"SCHEDULE-FORCE-\n      SEND\" parameter is set to an iana-token value they
      do not\n      recognize.\n   Example:\n     ORGANIZER;SCHEDULE-FORCE-SEND=REPLY:mailto:cyrus@example.com\n
      \    ATTENDEE;SCHEDULE-FORCE-SEND=REQUEST:mailto:bernard@example.com\n"
    title: 7.2.  Schedule Force Send Parameter
  - contents:
    - "7.3.  Schedule Status Parameter\n   Parameter Name:  SCHEDULE-STATUS\n   Purpose:
      \ To specify the status codes returned from processing of the\n      most recent
      scheduling message sent to the corresponding\n      \"Attendee\", or received
      from the corresponding \"Organizer\".\n   Format Definition:  This property
      parameter is defined by the\n      following notation:\n     schedulestatusparam
      = \"SCHEDULE-STATUS\" \"=\"\n                         ( statcode\n                        /
      DQUOTE statcode *(\",\" statcode) DQUOTE)\n     ;\n     ; \"statcode\" is defined
      in Section 3.8.8.3 of [RFC5545].  The\n     ; value is a single \"statcode\"
      or a comma-separated list of\n     ; \"statcode\" values.\n   Description:  This
      property parameter MAY be specified on the\n      \"ATTENDEE\" and \"ORGANIZER\"
      properties.\n      Servers MUST only add or change this property parameter on
      any\n      \"ATTENDEE\" properties corresponding to calendar users who were\n
      \     sent a scheduling message via a scheduling operation.  Clients\n      SHOULD
      NOT change or remove this parameter if it was provided by\n      the server.
      \ In the case where the client is handling the\n      scheduling, the client
      MAY add, change, or remove this parameter\n      to indicate the last scheduling
      message status it received.\n      Servers MUST add this parameter to any \"ORGANIZER\"
      properties\n      corresponding to calendar users who were sent a scheduling
      message\n      reply by an \"Attendee\" via a scheduling operation.  Clients
      SHOULD\n      NOT change or remove this parameter if it was provided by the\n
      \     server.  In the case where the client is handling the scheduling,\n      the
      client MAY add, change, or remove this parameter to indicate\n      the last
      scheduling message status it received.\n      Servers MUST NOT include this
      parameter in any scheduling messages\n      sent as the result of a scheduling
      operation.\n      Clients MUST NOT include this parameter in any scheduling
      messages\n      that they themselves send.\n      Values for this property parameter
      are described in Section 3.2.9.\n   Example:\n     ATTENDEE;SCHEDULE-STATUS=\"2.0\":mailto:bernard@example.com\n
      \    ATTENDEE;SCHEDULE-STATUS=\"2.0,2.4\":mailto:cyrus@example.com\n"
    title: 7.3.  Schedule Status Parameter
  title: 7.  Additional iCalendar Property Parameters
- contents:
  - "8.  Additional Message Header Fields\n   This specification defines additional
    HTTP request and response\n   headers for use with CalDAV.\n"
  - contents:
    - "8.1.  Schedule-Reply Request Header\n     Schedule-Reply = \"Schedule-Reply\"
      \":\" (\"T\" | \"F\")\n   Example:\n     Schedule-Reply: F\n   When an \"Attendee\"
      removes a scheduling object resource as per\n   Section 3.2.2.4, and the Schedule-Reply
      header is set to the value\n   \"T\" (true) or is not present, the server MUST
      send an appropriate\n   reply scheduling message with the \"Attendee's\" \"PARTSTAT\"
      iCalendar\n   property parameter value set to \"DECLINED\" as part of its normal\n
      \  scheduling operation processing.\n   When the Schedule-Reply header is set
      to the value \"F\" (false), the\n   server MUST NOT send a scheduling message
      as part of its normal\n   scheduling operation processing.\n   The Schedule-Reply
      request header is used by a client to indicate to\n   a server whether or not
      a scheduling operation ought to occur when an\n   \"Attendee\" deletes a scheduling
      object resource.  In particular, it\n   controls whether a reply scheduling
      message is sent to the\n   \"Organizer\" as a result of the removal.  There
      are situations in\n   which unsolicited scheduling messages need to be silently
      removed (or\n   ignored) for security or privacy reasons.  This request header
      allows\n   the scheduling object resource to be removed if such a need arises.\n"
    title: 8.1.  Schedule-Reply Request Header
  - contents:
    - "8.2.  Schedule-Tag Response Header\n   The Schedule-Tag response header provides
      the current value of the\n   CALDAV:schedule-tag property value.  The behavior
      of this response\n   header is described in Section 3.2.10.\n   All scheduling
      object resources MUST support the Schedule-Tag header.\n     Schedule-Tag =
      \"Schedule-Tag\" \":\" opaque-tag\n     ; \"opaque-tag\" is defined in Section
      3.11 of [RFC2616].\n   Example:\n     Schedule-Tag: \"12ab34-cd56ef\"\n"
    title: 8.2.  Schedule-Tag Response Header
  - contents:
    - "8.3.  If-Schedule-Tag-Match Request Header\n   The If-Schedule-Tag-Match request
      header field is used with a method\n   to make it conditional.  Clients can
      set this header to the value\n   returned in the Schedule-Tag response header,
      or the CALDAV:schedule-\n   tag property, of a scheduling object resource previously
      retrieved\n   from the server to avoid overwriting \"consequential\" changes
      to the\n   scheduling object resource.\n   All scheduling object resources MUST
      support the If-Schedule-Tag-\n   Match header.\n     If-Schedule-Tag-Match =
      \"If-Schedule-Tag-Match\" \":\" opaque-tag\n     ; \"opaque-tag\" is defined
      in Section 3.11 of [RFC2616].\n   Example:\n     If-Schedule-Tag-Match: \"12ab34-cd56ef\"\n"
    title: 8.3.  If-Schedule-Tag-Match Request Header
  title: 8.  Additional Message Header Fields
- contents:
  - "9.  Additional WebDAV Properties\n   This specification defines the following
    new WebDAV properties for\n   use with CalDAV.\n"
  - contents:
    - "9.1.  CALDAV:schedule-calendar-transp Property\n   Name:  schedule-calendar-transp\n
      \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Determines whether
      the calendar object resources in a\n      calendar collection will affect the
      owner's busy time information.\n   Protected:  This property MAY be protected
      and SHOULD NOT be returned\n      by a PROPFIND DAV:allprop request (as defined
      in Section 14.2 of\n      [RFC4918]).\n   COPY/MOVE behavior:  This property
      value SHOULD be kept during a MOVE\n      operation, and SHOULD be copied and
      preserved in a COPY.\n   Description:  This property SHOULD be defined on all
      calendar\n      collections.  If present, it contains one of two XML elements
      that\n      indicate whether the calendar object resources in the calendar\n
      \     collection ought to contribute to the owner's busy time.  When the\n      CALDAV:opaque
      element is used, all calendar object resources in\n      the corresponding calendar
      collection MUST contribute to busy\n      time, assuming that access privileges
      and other iCalendar\n      properties allow it to.  When the CALDAV:transparent
      XML element\n      is used, the calendar object resources in the corresponding\n
      \     calendar collection MUST NOT contribute to busy time.\n      If this property
      is not present on a calendar collection, then the\n      default value CALDAV:opaque
      MUST be assumed.\n   Definition:\n     <!ELEMENT schedule-calendar-transp (opaque
      | transparent)>\n     <!ELEMENT opaque EMPTY>\n     <!-- Affects busy time searches
      -->\n     <!ELEMENT transparent EMPTY>\n     <!-- Invisible to busy time searches
      -->\n   Example:\n     <C:schedule-calendar-transp\n          xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n
      \      <C:opaque/>\n     </C:schedule-calendar-transp>\n"
    title: 9.1.  CALDAV:schedule-calendar-transp Property
  - contents:
    - "9.2.  CALDAV:schedule-default-calendar-URL Property\n   Name:  schedule-default-calendar-URL\n
      \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Specifies a default
      calendar for an \"Attendee\" where new\n      scheduling object resources are
      created.\n   Protected:  This property MAY be protected in the case where a
      server\n      does not support changing the default calendar, or does not\n
      \     support a default calendar.\n   COPY/MOVE behavior:  This property is
      only defined on a scheduling\n      Inbox collection that cannot be moved or
      copied.\n   Description:  This property MAY be defined on a scheduling Inbox\n
      \     collection.  If present, it contains zero or one DAV:href XML\n      elements.
      \ When a DAV:href element is present, its value indicates\n      a URL to a
      calendar collection that is used as the default\n      calendar.  When no DAV:href
      element is present, it indicates that\n      there is no default calendar.  In
      the absence of this property,\n      there is no default calendar.  When there
      is no default calendar,\n      the server is free to choose the calendar in
      which a new\n      scheduling object resource is created.  See Section 4.3.\n
      \  Definition:\n     <!ELEMENT schedule-default-calendar-URL (DAV:href?)>\n
      \  Example:\n     <C:schedule-default-calendar-URL xmlns:D=\"DAV:\"\n         xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n
      \      <D:href>/home/cyrus/calendars/work/</D:href>\n     </C:schedule-default-calendar-URL>\n"
    title: 9.2.  CALDAV:schedule-default-calendar-URL Property
  - contents:
    - "9.3.  CALDAV:schedule-tag Property\n   Name:  schedule-tag\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
      \  Purpose:  Indicates whether a scheduling object resource has had a\n      \"consequential\"
      change made to it.\n   Value:  opaque-tag (defined in Section 3.11 of [RFC2616])\n
      \  Protected:  This property MUST be protected, as only the server can\n      update
      the value.\n   COPY/MOVE behavior:  This property value is determined by the
      server\n      and MAY be different from the value on the source resource.\n
      \  Description:  The CALDAV:schedule-tag property MUST be defined on all\n      scheduling
      object resources.  This property is described in\n      Section 3.2.10.\n   Definition:\n
      \    <!ELEMENT schedule-tag (#PCDATA)>\n   Example:\n     <C:schedule-tag xmlns:C=\"urn:ietf:params:xml:ns:caldav\"\n
      \    >\"12345-67890\"</C:schedule-tag>\n"
    title: 9.3.  CALDAV:schedule-tag Property
  title: 9.  Additional WebDAV Properties
- contents:
  - '10.  XML Element Definitions

    '
  - contents:
    - "10.1.  CALDAV:schedule-response XML Element\n   Name:  schedule-response\n
      \  Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  Contains the set
      of responses for a POST method request.\n   Description:  See Section 5.\n   Definition:\n
      \    <!ELEMENT schedule-response (response*)>\n"
    title: 10.1.  CALDAV:schedule-response XML Element
  - contents:
    - "10.2.  CALDAV:response XML Element\n   Name:  response\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
      \  Purpose:  Contains a single response for a POST method request.\n   Description:
      \ See Section 5.\n   Definition:\n     <!ELEMENT response (recipient,\n                         request-status,\n
      \                        calendar-data?,\n                         DAV:error?,\n
      \                        DAV:responsedescription?)>\n     <!-- CALDAV:calendar-data
      is defined in Section 9.6 of\n     RFC 4791 and when used here uses the definition
      with\n     content (#PCDATA) only. -->\n"
    title: 10.2.  CALDAV:response XML Element
  - contents:
    - "10.3.  CALDAV:recipient XML Element\n   Name:  recipient\n   Namespace:  urn:ietf:params:xml:ns:caldav\n
      \  Purpose:  The calendar user address that the enclosing response for a\n      POST
      method request is for.\n   Description:  See Section 5.\n   Definition:\n     <!ELEMENT
      recipient (DAV:href)>\n"
    title: 10.3.  CALDAV:recipient XML Element
  - contents:
    - "10.4.  CALDAV:request-status XML Element\n   Name:  request-status\n   Namespace:
      \ urn:ietf:params:xml:ns:caldav\n   Purpose:  The iTIP \"REQUEST-STATUS\" property
      value for this response.\n   Description:  See Section 5.\n   Definition:\n
      \    <!ELEMENT request-status (#PCDATA)>\n"
    title: 10.4.  CALDAV:request-status XML Element
  title: 10.  XML Element Definitions
- contents:
  - "11.  Security Considerations\n   The process of scheduling involves the sending
    and receiving of\n   scheduling messages.  As a result, the security problems
    related to\n   messaging in general are relevant here.  In particular, the\n   authenticity
    of the scheduling messages needs to be verified.\n   Servers and clients MUST
    use an HTTP connection protected with\n   Transport Layer Security (TLS) as defined
    in [RFC2818] for all\n   scheduling operations.  Clients MUST use the procedures
    detailed in\n   Section 6 of [RFC6125] to verify the authenticity of the server.\n
    \  Servers MUST make use of HTTP authentication [RFC2617] to verify the\n   authenticity
    of the calendar user for whom the client is sending\n   requests.\n"
  - contents:
    - "11.1.  Preventing Denial-of-Service Attacks\n   Servers MUST ensure that clients
      cannot consume excessive server\n   resources by carrying out \"large\" scheduling
      operations.  In\n   particular, servers SHOULD enforce CALDAV:max-resource-size,
      CALDAV:\n   max-instances, and CALDAV:max-attendees-per-instance preconditions
      as\n   applicable for scheduling Inbox and Outbox collections.\n"
    title: 11.1.  Preventing Denial-of-Service Attacks
  - contents:
    - "11.2.  Verifying Scheduling Operations\n   When handling a scheduling operation:\n
      \  1.  Servers MUST verify that the principal associated with the DAV:\n       owner
      of the calendar collection in which a scheduling object\n       resource is
      being manipulated contains a CALDAV:schedule-outbox-\n       URL property value.\n
      \  2.  Servers MUST verify that the currently authenticated user has the\n       CALDAV:schedule-send
      privilege, or a sub-privilege aggregated\n       under this privilege, on the
      scheduling Outbox collection of the\n       DAV:owner of the calendar collection
      in which a scheduling object\n       resource is being manipulated.\n   3.  Servers
      MUST only deliver scheduling messages to recipients when\n       the CALDAV:schedule-deliver
      privilege, or a sub-privilege\n       aggregated under this privilege, is granted
      on the recipient's\n       scheduling Inbox collection for the principal associated
      with the\n       DAV:owner of the calendar collection in which a scheduling
      object\n       resource is being manipulated.\n   4.  To prevent impersonation
      of calendar users, the server MUST\n       verify that the \"ORGANIZER\" property
      in an organizer scheduling\n       object resource matches one of the calendar
      user addresses of the\n       DAV:owner of the calendar collection in which
      the resource is\n       stored.\n   5.  To prevent spoofing of an existing scheduling
      object resource,\n       servers MUST verify that the \"UID\" iCalendar property
      value in a\n       new scheduling object resource does not match that of an
      existing\n       scheduling object resource with a different \"ORGANIZER\" property\n
      \      value.\n"
    title: 11.2.  Verifying Scheduling Operations
  - contents:
    - "11.3.  Verifying Busy Time Information Requests\n   When handling a POST request
      on a scheduling Outbox collection:\n   1.  Servers MUST verify that the principal
      associated with the\n       calendar user address specified in the \"ORGANIZER\"
      property of\n       the scheduling message data in the request contains a CALDAV:\n
      \      schedule-outbox-URL property value that matches the scheduling\n       Outbox
      collection targeted by the request.\n   2.  Servers MUST verify that the currently
      authenticated user has the\n       CALDAV:schedule-send privilege, or a sub-privilege
      aggregated\n       under this privilege, on the scheduling Outbox collection\n
      \      targeted by the request.\n   3.  Servers MUST only return valid freebusy
      information for\n       recipients when the CALDAV:schedule-deliver privilege,
      or a\n       sub-privilege aggregated under this privilege, is granted on the\n
      \      recipient's scheduling Inbox collection for the principal\n       associated
      with the DAV:owner of the scheduling Outbox collection\n       targeted by the
      request.\n"
    title: 11.3.  Verifying Busy Time Information Requests
  - contents:
    - "11.4.  Privacy Issues\n   This specification only defines how calendar users
      on the same server\n   are able to schedule with each other -- unauthenticated
      users have no\n   way to carry out scheduling operations.  Access control privileges\n
      \  (as per Section 6) can control which of those users can schedule with\n   others.
      \ Calendar users not wishing to expose their calendar\n   information to other
      users can do so by denying privileges to\n   specific users, or all users, for
      all scheduling operations, or\n   perhaps only freebusy.\n   \"Attendees\" can
      also use the Schedule-Reply request header\n   (Section 8.1) with the value
      set to \"F\" to prevent notification to an\n   \"Organizer\" that a scheduling
      object resource was deleted.  This\n   allows \"Attendees\" to remove unwanted
      scheduling messages without any\n   response to the \"Organizer\".\n   Servers
      MUST NOT expose any private iCalendar data, or WebDAV\n   resource state information
      (URLs, WebDAV properties, etc.) for one\n   calendar user to another via scheduling
      messages or error responses\n   to scheduling operations.  In particular, as
      per Section 8.1 of\n   [RFC4918], authorization errors MUST take preference
      over other\n   errors.\n"
    title: 11.4.  Privacy Issues
  - contents:
    - "11.5.  Mitigation of iTIP Threats\n   Section 6.1 of iTIP [RFC5546] defines
      a set of potential threats in a\n   scheduling system, and Section 6.2 of [RFC5546]
      defines\n   recommendations on how those can be addressed in protocols using\n
      \  iTIP.  This specification addresses the iTIP threats in the following\n   manner:\n
      \  Spoofing the \"Organizer\":  Addressed by item 4 in Section 11.2.\n   Spoofing
      the \"Attendee\":  Addressed by Section 3.2.2.1 and item 2 in\n      Section
      11.2.\n   Unauthorized Replacement of the \"Organizer\":  Addressed by item
      5 in\n      Section 11.2.\n   Eavesdropping and Data Integrity:  Addressed by
      requiring TLS.\n   Flooding a Calendar:  Addressed by requirements in Section
      11.1.\n   Unauthorized REFRESH Requests:  This specification does not support\n
      \     the REFRESH method.\n"
    title: 11.5.  Mitigation of iTIP Threats
  title: 11.  Security Considerations
- contents:
  - '12.  IANA Considerations

    '
  - contents:
    - "12.1.  Message Header Field Registrations\n   The message header fields below
      have been added to the Permanent\n   Message Header Field Registry (see [RFC3864]).\n"
    - contents:
      - "12.1.1.  Schedule-Reply\n   Header field name: Schedule-Reply\n   Applicable
        protocol: http\n   Status: standard\n   Author/Change controller: IETF\n   Specification
        document(s): this specification (Section 8.1)\n   Related information: none\n"
      title: 12.1.1.  Schedule-Reply
    - contents:
      - "12.1.2.  Schedule-Tag\n   Header field name: Schedule-Tag\n   Applicable
        protocol: http\n   Status: standard\n   Author/Change controller: IETF\n   Specification
        document(s): this specification (Section 8.2)\n   Related information: none\n"
      title: 12.1.2.  Schedule-Tag
    - contents:
      - "12.1.3.  If-Schedule-Tag-Match\n   Header field name: If-Schedule-Tag-Match\n
        \  Applicable protocol: http\n   Status: standard\n   Author/Change controller:
        IETF\n   Specification document(s): this specification (Section 8.3)\n   Related
        information: none\n"
      title: 12.1.3.  If-Schedule-Tag-Match
    title: 12.1.  Message Header Field Registrations
  - contents:
    - "12.2.  iCalendar Property Parameter Registrations\n   The following iCalendar
      property parameter names have been added to\n   the iCalendar Parameters Registry
      defined in Section 8.3.3 of\n   [RFC5545].\n         +---------------------+---------+-----------------------+\n
      \        | Parameter           | Status  | Reference             |\n         +---------------------+---------+-----------------------+\n
      \        | SCHEDULE-AGENT      | Current | RFC 6638, Section 7.1 |\n         |
      \                    |         |                       |\n         | SCHEDULE-STATUS
      \    | Current | RFC 6638, Section 7.3 |\n         |                     |         |
      \                      |\n         | SCHEDULE-FORCE-SEND | Current | RFC 6638,
      Section 7.2 |\n         +---------------------+---------+-----------------------+\n"
    title: 12.2.  iCalendar Property Parameter Registrations
  - contents:
    - "12.3.  iCalendar REQUEST-STATUS Value Registrations\n   The following iCalendar
      \"REQUEST-STATUS\" values have been added to\n   the iCalendar REQUEST-STATUS
      Value Registry defined in Section 7.3 of\n   [RFC5546].\n           +-------------+---------+---------------------------+\n
      \          | Status Code | Status  | Reference                 |\n           +-------------+---------+---------------------------+\n
      \          | 1.0         | Current | RFC 6638, Section 3.2.9.1 |\n           |
      \            |         |                           |\n           | 1.1         |
      Current | RFC 6638, Section 3.2.9.2 |\n           |             |         |
      \                          |\n           | 1.2         | Current | RFC 6638,
      Section 3.2.9.3 |\n           +-------------+---------+---------------------------+\n"
    title: 12.3.  iCalendar REQUEST-STATUS Value Registrations
  - contents:
    - "12.4.  Additional iCalendar Elements Registries\n   Per this specification,
      two new IANA registries for iCalendar\n   elements have been added.  Additional
      codes MAY be used, provided the\n   process described in Section 8.2.1 of [RFC5545]
      is used to register\n   them.\n"
    - contents:
      - "12.4.1.  Schedule Agent Values Registry\n   The following table has been
        used to initialize the Schedule Agent\n   Values Registry.\n           +----------------+---------+-----------------------+\n
        \          | Schedule Agent | Status  | Reference             |\n           +----------------+---------+-----------------------+\n
        \          | SERVER         | Current | RFC 6638, Section 7.1 |\n           |
        \               |         |                       |\n           | CLIENT         |
        Current | RFC 6638, Section 7.1 |\n           |                |         |
        \                      |\n           | NONE           | Current | RFC 6638,
        Section 7.1 |\n           +----------------+---------+-----------------------+\n"
      title: 12.4.1.  Schedule Agent Values Registry
    - contents:
      - "12.4.2.  Schedule Force Send Values Registry\n   The following table has
        been used to initialize the Schedule Force\n   Send Values Registry.\n         +---------------------+---------+-----------------------+\n
        \        | Schedule Force Send | Status  | Reference             |\n         +---------------------+---------+-----------------------+\n
        \        | REQUEST             | Current | RFC 6638, Section 7.2 |\n         |
        \                    |         |                       |\n         | REPLY
        \              | Current | RFC 6638, Section 7.2 |\n         +---------------------+---------+-----------------------+\n"
      title: 12.4.2.  Schedule Force Send Values Registry
    title: 12.4.  Additional iCalendar Elements Registries
  title: 12.  IANA Considerations
- contents:
  - "13.  Acknowledgements\n   The authors would like to thank the following individuals
    for\n   contributing their ideas and support for writing this specification:\n
    \  Mike Douglass, Lisa Dusseault, Red Dutta, Jacob Farkas, Jeffrey\n   Harris,
    Helge Hess, Eliot Lear, Andrew McMillan, Alexey Melnikov,\n   Arnaud Quillaud,
    Julian F. Reschke, Wilfredo Sanchez Vega, and Simon\n   Vaillancourt.\n   The
    authors would also like to thank the Calendaring and Scheduling\n   Consortium
    for advice with this specification, and for organizing\n   interoperability testing
    events to help refine it.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2617]  Franks, J., Hallam-Baker,
      P., Hostetler, J., Lawrence, S.,\n              Leach, P., Luotonen, A., and
      L. Stewart, \"HTTP\n              Authentication: Basic and Digest Access Authentication\",\n
      \             RFC 2617, June 1999.\n   [RFC2818]  Rescorla, E., \"HTTP Over
      TLS\", RFC 2818, May 2000.\n   [RFC3744]  Clemm, G., Reschke, J., Sedlar, E.,
      and J. Whitehead, \"Web\n              Distributed Authoring and Versioning
      (WebDAV)\n              Access Control Protocol\", RFC 3744, May 2004.\n   [RFC3864]
      \ Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures
      for Message Header Fields\", BCP 90, RFC 3864,\n              September 2004.\n
      \  [RFC4791]  Daboo, C., Desruisseaux, B., and L. Dusseault,\n              \"Calendaring
      Extensions to WebDAV (CalDAV)\", RFC 4791,\n              March 2007.\n   [RFC4918]
      \ Dusseault, L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring
      and Versioning (WebDAV)\", RFC 4918, June 2007.\n   [RFC5234]  Crocker, D.,
      Ed., and P. Overell, \"Augmented BNF for\n              Syntax Specifications:
      ABNF\", STD 68, RFC 5234,\n              January 2008.\n   [RFC5545]  Desruisseaux,
      B., Ed., \"Internet Calendaring and\n              Scheduling Core Object Specification
      (iCalendar)\",\n              RFC 5545, September 2009.\n   [RFC5546]  Daboo,
      C., Ed., \"iCalendar Transport-Independent\n              Interoperability Protocol
      (iTIP)\", RFC 5546,\n              December 2009.\n   [RFC6125]  Saint-Andre,
      P. and J. Hodges, \"Representation and\n              Verification of Domain-Based
      Application Service Identity\n              within Internet Public Key Infrastructure
      Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n
      \             Security (TLS)\", RFC 6125, March 2011.\n   [W3C.REC-xml-20081126]\n
      \             Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E.,\n              and
      F. Yergeau, \"Extensible Markup Language (XML) 1.0\n              (Fifth Edition)\",
      World Wide Web Consortium\n              Recommendation REC-xml-20081126, November
      2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [RFC6047]  Melnikov, A., Ed., \"iCalendar
      Message-Based\n              Interoperability Protocol (iMIP)\", RFC 6047,\n
      \             December 2010.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - 'Appendix A.  Scheduling Privileges Summary

    '
  - contents:
    - "A.1.  Scheduling Inbox Privileges\n   The following tables specify which scheduling
      privileges grant the\n   right to a calendar user to deliver a scheduling message
      to the\n   scheduling Inbox collection of another calendar user.  The\n   appropriate
      behavior depends on the calendar component type as well\n   as the scheduling
      \"METHOD\" specified in the scheduling message.\n                                 +--------------------------------+\n
      \                                |  METHOD for VEVENT and VTODO   |\n   +-----------------------------+---------+-------+-----+--------+\n
      \  | Scheduling Inbox Privilege  | REQUEST | REPLY | ADD | CANCEL |\n   +-----------------------------+---------+-------+-----+--------+\n
      \  | schedule-deliver            |    *    |   *   |  *  |   *    |\n   |   schedule-deliver-invite
      \  |    *    |       |  *  |   *    |\n   |   schedule-deliver-reply    |         |
      \  *   |     |        |\n   |   schedule-query-freebusy   |         |       |
      \    |        |\n   +-----------------------------+---------+-------+-----+--------+\n
      \                                +----------------------+\n                                 |
      METHOD for VFREEBUSY |\n   +-----------------------------+----------------------+\n
      \  | Scheduling Inbox Privilege  |       REQUEST        |\n   +-----------------------------+----------------------+\n
      \  | schedule-deliver            |          *           |\n   |   schedule-deliver-invite
      \  |                      |\n   |   schedule-deliver-reply    |                      |\n
      \  |   schedule-query-freebusy   |          *           |\n   +-----------------------------+----------------------+\n"
    title: A.1.  Scheduling Inbox Privileges
  - contents:
    - "A.2.  Scheduling Outbox Privileges\n   The following tables specify which scheduling
      privileges grant the\n   right to a calendar user to perform busy time information
      requests\n   and to submit scheduling messages to other calendar users as the\n
      \  result of a scheduling operation.  The appropriate behavior depends\n   on
      the calendar component type as well as the scheduling \"METHOD\"\n   specified
      in the scheduling message.\n                                 +--------------------------------+\n
      \                                |  METHOD for VEVENT and VTODO   |\n   +-----------------------------+---------+-------+-----+--------+\n
      \  | Scheduling Outbox Privilege | REQUEST | REPLY | ADD | CANCEL |\n   +-----------------------------+---------+-------+-----+--------+\n
      \  | schedule-send               |    *    |   *   |  *  |   *    |\n   |   schedule-send-invite
      \     |    *    |       |  *  |   *    |\n   |   schedule-send-reply       |
      \        |   *   |     |        |\n   |   schedule-send-freebusy    |         |
      \      |     |        |\n   +-----------------------------+---------+-------+-----+--------+\n
      \                                +----------------------+\n                                 |
      METHOD for VFREEBUSY |\n   +-----------------------------+----------------------+\n
      \  | Scheduling Outbox Privilege |       REQUEST        |\n   +-----------------------------+----------------------+\n
      \  | schedule-send               |          *           |\n   |   schedule-send-invite
      \     |                      |\n   |   schedule-send-reply       |                      |\n
      \  |   schedule-send-freebusy    |          *           |\n   +-----------------------------+----------------------+\n"
    title: A.2.  Scheduling Outbox Privileges
  title: Appendix A.  Scheduling Privileges Summary
- contents:
  - "Appendix B.  Example Scheduling Operations\n   This section describes some example
    scheduling operations that give a\n   general idea of how scheduling is carried
    out between CalDAV clients\n   and servers from the perspective of meeting \"Organizers\"
    and\n   \"Attendees\".\n   The server is assumed to be hosted in the \"example.com\"
    domain, and\n   users whose email addresses are at the \"example.com\" domain
    are\n   assumed to be hosted by the server.  In addition, the email addresses\n
    \  in the \"example.net\" domain are also valid email addresses for\n   calendar
    users hosted by the server.  Calendar users with an email\n   address at the \"example.org\"
    domain are assumed to not be hosted by\n   the server.\n   In the following examples,
    the requests and responses are incomplete\n   and are only for illustrative purposes.
    \ In particular, HTTP\n   authentication headers and behaviors are not shown,
    even though they\n   are required in normal operation.\n"
  - contents:
    - "B.1.  Example: \"Organizer\" Inviting Multiple \"Attendees\"\n   In the following
      example, Cyrus invites Wilfredo, Bernard, and Mike\n   to a single instance
      event by simply creating a new scheduling object\n   resource in one of his
      calendar collections by using the PUT method.\n   >> Request <<\n   PUT /home/cyrus/calendars/work/9263504FD3AD.ics
      HTTP/1.1\n   Host: cal.example.com\n   Content-Type: text/calendar; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   If-None-Match: *\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Client//EN\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n
      \  SEQUENCE:0\n   DTSTAMP:20090602T185254Z\n   DTSTART:20090602T160000Z\n   DTEND:20090602T170000Z\n
      \  TRANSP:OPAQUE\n   SUMMARY:Lunch\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:wilfredo@\n
      \   example.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@ex\n    ample.net\n
      \  ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n    CTION;RSVP=TRUE:mailto:mike@example.org\n
      \  END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1 201 Created\n
      \  Content-Length: 0\n   Date: Tue, 02 Jun 2009 18:52:54 GMT\n   Last-Modified:
      Tue, 02 Jun 2009 18:52:54 GMT\n   ETag: \"d85561cfe74a4e785eb4639451b434fb\"\n
      \  Schedule-Tag: \"488177c8-2ea7-4176-a6cb-fab8cfccdea2\"\n   Once the event
      creation has been completed, Cyrus's client will\n   retrieve the event back
      from the server to get the schedule status of\n   each \"Attendee\", as well
      as record the Schedule-Tag value for future\n   use.  In this example, the server
      reports that a scheduling message\n   was delivered to Wilfredo, a scheduling
      message is still pending for\n   Bernard, and the server was unable to deliver
      a scheduling message to\n   Mike.\n   >> Request <<\n   GET /home/cyrus/calendars/work/9263504FD3AD.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
      \  Date: Tue, 02 Jun 2009 18:52:58 GMT\n   Last-Modified: Tue, 02 Jun 2009 18:52:58
      GMT\n   ETag: \"eb897deabc8939589da116714bc99265\"\n   Schedule-Tag: \"488177c8-2ea7-4176-a6cb-fab8cfccdea2\"\n
      \  Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n
      \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n
      \  BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T185300Z\n
      \  DTSTART:20090602T160000Z\n   DTEND:20090602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n
      \  ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus
      Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=\n
      \   1.2:mailto:wilfredo@e\n    xample.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=\n    1.0:mailto:bernard@example.net\n
      \  ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n    CTION;RSVP=TRUE;SCHEDULE-STATUS=3.7:mailto:mike@example.org\n
      \  END:VEVENT\n   END:VCALENDAR\n"
    title: 'B.1.  Example: "Organizer" Inviting Multiple "Attendees"'
  - contents:
    - "B.2.  Example: \"Attendee\" Receiving an Invitation\n   In the following example,
      Wilfredo's client retrieves and deletes the\n   new scheduling message that
      appeared in his scheduling Inbox\n   collection after the server automatically
      processed it and created a\n   new scheduling object resource in his default
      calendar collection.\n   >> Request <<\n   GET /home/wilfredo/calendars/inbox/27d93fc0a58c.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
      \  Date: Tue, 02 Jun 2009 18:59:58 GMT\n   Last-Modified: Tue, 02 Jun 2009 18:59:58
      GMT\n   ETag: \"da116714bc9926c89395895eb897deab\"\n   Content-Type: text/calendar;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Server//EN\n   METHOD:REQUEST\n   BEGIN:VEVENT\n
      \  UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T185254Z\n   DTSTART:20090602T160000Z\n
      \  DTEND:20090602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n   ORGANIZER;CN=\"Cyrus
      Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n
      \   mailto:cyrus@example.com\n   ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n
      \   =NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:wilfredo@\n    example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n    NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@ex\n
      \   ample.net\n   ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n
      \   CTION;RSVP=TRUE:mailto:mike@example.org\n   END:VEVENT\n   END:VCALENDAR\n
      \  >> Request <<\n   DELETE /home/wilfredo/calendars/inbox/27d93fc0a58c.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 204 No Content\n
      \  Date: Tue, 02 Jun 2009 20:40:36 GMT\n"
    title: 'B.2.  Example: "Attendee" Receiving an Invitation'
  - contents:
    - "B.3.  Example: \"Attendee\" Replying to an Invitation\n   In the following
      example, Wilfredo accepts Cyrus's invitation and\n   sets an alarm reminder
      on the event.  It uses the If-Schedule-Tag-\n   Match precondition behavior
      to ensure it does not overwrite any\n   significant changes from the \"Organizer\"
      that might have occurred\n   after it retrieved the initial resource data.\n
      \  >> Request <<\n   PUT /home/wilfredo/calendars/work/BB64861C2228.ics HTTP/1.1\n
      \  Host: cal.example.com\n   If-Schedule-Tag-Match: \"e78f23ed-0188-4bab-938d-2aeb3324c7e8\"\n
      \  Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n
      \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n
      \  BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T185254Z\n
      \  DTSTART:20090602T160000Z\n   DTEND:20090602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n
      \  ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus
      Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =ACCEPTED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:wilfredo@exam\n
      \   ple.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@ex\n    ample.net\n
      \  ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n    CTION;RSVP=TRUE:mailto:mike@example.org\n
      \  BEGIN:VALARM\n   TRIGGER:-PT15M\n   ACTION:DISPLAY\n   DESCRIPTION:Reminder\n
      \  END:VALARM\n   END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1
      200 OK\n   Content-Length: 0\n   Date: Tue, 02 Jun 2009 18:57:54 GMT\n   Last-Modified:
      Tue, 02 Jun 2009 18:57:54 GMT\n   ETag: \"eb4639451b434fbd85561cfe74a4e785\"\n
      \  Schedule-Tag: \"8893ee45-eb9d-428f-b53c-c777daf19e41\"\n   Once the event
      modification has been completed, Wilfredo's client\n   will retrieve the event
      back from the server to get the schedule\n   status of the \"Organizer\".\n
      \  >> Request <<\n   GET /home/wilfredo/calendars/work/BB64861C2228.ics HTTP/1.1\n
      \  Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n   Date: Tue,
      02 Jun 2009 19:03:03 GMT\n   Last-Modified: Tue, 02 Jun 2009 19:02:21 GMT\n
      \  ETag: \"5eb897deabda116714bc9926c8939589\"\n   Schedule-Tag: \"8893ee45-eb9d-428f-b53c-c777daf19e41\"\n
      \  Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n
      \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n
      \  BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T190221Z\n
      \  DTSTART:20090602T160000Z\n   DTEND:20090602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n
      \  ORGANIZER;CN=\"Cyrus Daboo\";SCHEDULE-STATUS=1.2:mailto:cyrus@ex\n    ample.com\n
      \  ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n    =ACCEPTED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:wilfredo@exam\n
      \   ple.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@ex\n    ample.net\n
      \  ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n    CTION;RSVP=TRUE:mailto:mike@example.org\n
      \  BEGIN:VALARM\n   TRIGGER:-PT15M\n   ACTION:DISPLAY\n   DESCRIPTION:Reminder\n
      \  END:VALARM\n   END:VEVENT\n   END:VCALENDAR\n"
    title: 'B.3.  Example: "Attendee" Replying to an Invitation'
  - contents:
    - "B.4.  Example: \"Organizer\" Receiving a Reply to an Invitation\n   On reception
      of Wilfredo's reply, Cyrus's server will automatically\n   update Cyrus's scheduling
      object resource, make Wilfredo's scheduling\n   message available in Cyrus's
      scheduling Inbox collection, and deliver\n   an updated scheduling message to
      Bernard to share Wilfredo's updated\n   participation status.  In this example,
      Cyrus's client retrieves and\n   deletes this scheduling message in his scheduling
      Inbox collection.\n   >> Request <<\n   GET /home/cyrus/calendars/inbox/c0a58c27d93f.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
      \  Date: Tue, 02 Jun 2009 19:05:02 GMT\n   Last-Modified: Tue, 02 Jun 2009 19:04:20
      GMT\n   ETag: \"9265eb897deabc8939589da116714bc9\"\n   Content-Type: text/calendar;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Server//EN\n   METHOD:REPLY\n   BEGIN:VEVENT\n
      \  UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T185754Z\n   DTSTART:20090602T160000Z\n
      \  DTEND:20090602T170000Z\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";PARTSTAT=ACCEPTED:mailto:w\n    ilfredo@example.com\n
      \  REQUEST-STATUS:2.0;Success\n   END:VEVENT\n   END:VCALENDAR\n   >> Request
      <<\n   DELETE /home/cyrus/calendars/inbox/c0a58c27d93f.ics HTTP/1.1\n   Host:
      cal.example.com\n   >> Response <<\n   HTTP/1.1 204 No Content\n   Date: Tue,
      02 Jun 2009 19:05:05 GMT\n   Cyrus's client then retrieves the event back from
      the server with\n   Wilfredo's updated participation status.\n   >> Request
      <<\n   GET /home/cyrus/calendars/work/9263504FD3AD.ics HTTP/1.1\n   Host: cal.example.com\n
      \  >> Response <<\n   HTTP/1.1 200 OK\n   Date: Tue, 02 Jun 2009 19:05:02 GMT\n
      \  Last-Modified: Tue, 02 Jun 2009 19:04:20 GMT\n   ETag: \"eb897deabc8939589da116714bc99265\"\n
      \  Schedule-Tag: \"132cab27-1fe3-67ab-de13-abd348d1dee3\"\n   Content-Type:
      text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n   BEGIN:VCALENDAR\n
      \  VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n   BEGIN:VEVENT\n
      \  UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T190420Z\n   DTSTART:20090602T160000Z\n
      \  DTEND:20090602T170000Z\n   TRANSP:OPAQUE\n   SUMMARY:Lunch\n   ORGANIZER;CN=\"Cyrus
      Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n
      \   mailto:cyrus@example.com\n   ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT\n
      \   =ACCEPTED;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=2.0:\n    mailto:wilfredo@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n    NEEDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE;SCHEDULE-STATUS=1\n
      \   .0:mailto:bernard@example.net\n   ATTENDEE;CN=\"Mike Douglass\";CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-A\n
      \   CTION;RSVP=TRUE;SCHEDULE-STATUS=3.7:mailto:mike@example.org\n   END:VEVENT\n
      \  END:VCALENDAR\n"
    title: 'B.4.  Example: "Organizer" Receiving a Reply to an Invitation'
  - contents:
    - "B.5.  Example: \"Organizer\" Requesting Busy Time Information\n   In this example,
      Cyrus requests the busy time information of\n   Wilfredo, Bernard, and Mike.\n
      \  >> Request <<\n   POST /home/cyrus/calendars/outbox/ HTTP/1.1\n   Host: cal.example.com\n
      \  Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n
      \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n
      \  METHOD:REQUEST\n   BEGIN:VFREEBUSY\n   UID:4FD3AD926350\n   DTSTAMP:20090602T190420Z\n
      \  DTSTART:20090602T000000Z\n   DTEND:20090604T000000Z\n   ORGANIZER;CN=\"Cyrus
      Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Wilfredo Sanchez Vega\":mailto:wilfredo@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\":mailto:bernard@example.net\n   ATTENDEE;CN=\"Mike
      Douglass\":mailto:mike@example.org\n   END:VFREEBUSY\n   END:VCALENDAR\n   >>
      Response <<\n   HTTP/1.1 200 OK\n   Date: Tue, 02 Jun 2009 20:07:34 GMT\n   Content-Type:
      application/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\"
      encoding=\"utf-8\" ?>\n   <C:schedule-response xmlns:D=\"DAV:\"\n          xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n
      \  <C:response>\n   <C:recipient>\n   <D:href>mailto:wilfredo@example.com</D:href>\n
      \  </C:recipient>\n   <C:request-status>2.0;Success</C:request-status>\n   <C:calendar-data>BEGIN:VCALENDAR\n
      \  VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n   METHOD:REPLY\n
      \  BEGIN:VFREEBUSY\n   UID:4FD3AD926350\n   DTSTAMP:20090602T200733Z\n   DTSTART:20090602T000000Z\n
      \  DTEND:20090604T000000Z\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\":mailto:wilfredo@example.com\n   FREEBUSY;FBTYPE=BUSY:20090602T110000Z/20090602T120000Z\n
      \  FREEBUSY;FBTYPE=BUSY:20090603T170000Z/20090603T180000Z\n   END:VFREEBUSY\n
      \  END:VCALENDAR\n   </C:calendar-data>\n   </C:response>\n   <C:response>\n
      \  <C:recipient>\n   <D:href>mailto:bernard@example.net</D:href>\n   </C:recipient>\n
      \  <C:request-status>2.0;Success</C:request-status>\n   <C:calendar-data>BEGIN:VCALENDAR\n
      \  VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n   METHOD:REPLY\n
      \  BEGIN:VFREEBUSY\n   UID:4FD3AD926350\n   DTSTAMP:20090602T200733Z\n   DTSTART:20090602T000000Z\n
      \  DTEND:20090604T000000Z\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\":mailto:bernard@example.net\n   FREEBUSY;FBTYPE=BUSY:20090602T150000Z/20090602T160000Z\n
      \  FREEBUSY;FBTYPE=BUSY:20090603T090000Z/20090603T100000Z\n   FREEBUSY;FBTYPE=BUSY:20090603T180000Z/20090603T190000Z\n
      \  END:VFREEBUSY\n   END:VCALENDAR\n   </C:calendar-data>\n   </C:response>\n
      \  <C:response>\n   <C:recipient>\n   <D:href>mailto:mike@example.org</D:href>\n
      \  </C:recipient>\n   <C:request-status>3.7;Invalid calendar user</C:request-status>\n
      \  </C:response>\n   </C:schedule-response>\n"
    title: 'B.5.  Example: "Organizer" Requesting Busy Time Information'
  - contents:
    - "B.6.  Example: User Attempting to Invite \"Attendee\" on Behalf of\n      \"Organizer\"\n
      \  In the following example, Cyrus attempts to create, on behalf of\n   Wilfredo,
      an event with Bernard specified as an \"Attendee\".  The\n   request fails,
      since Wilfredo didn't grant Cyrus the right to invite\n   other calendar users
      on his behalf.\n   >> Request <<\n   PUT /home/wilfredo/calendars/work/def456.ics
      HTTP/1.1\n   Host: cal.example.com\n   Content-Type: text/calendar; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   If-None-Match: *\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Client//EN\n   BEGIN:VEVENT\n   UID:3504F926D3AD\n
      \  SEQUENCE:0\n   DTSTAMP:20090602T190221Z\n   DTSTART:20090602T230000Z\n   DTEND:20090603T000000Z\n
      \  TRANSP:OPAQUE\n   SUMMARY:Dinner\n   ORGANIZER;CN=\"Wilfredo Sanchez Vega\":mailto:wilfredo@example.com\n
      \  ATTENDEE;CN=\"Wilfredo Sanchez Vega\";CUTYPE=INDIVIDUAL;PARTSTAT=A\n    CCEPTED:mailto:wilfredo@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=NE\n    EDS-ACTION;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@exampl\n
      \   e.net\n   END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1 403
      Forbidden\n   Content-Type: application/xml; charset=\"utf-8\"\n   Content-Length:
      xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:error xmlns:D=\"DAV:\"
      xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n     <D:need-privileges>\n       <D:resource>\n
      \        <D:href>/home/wilfredo/calendars/outbox/</D:href>\n         <D:privilege><C:schedule-send-invite/></D:privilege>\n
      \      </D:resource>\n     </D:need-privileges>\n   </D:error>\n"
    title: 'B.6.  Example: User Attempting to Invite "Attendee" on Behalf of'
  - contents:
    - "B.7.  Example: \"Attendee\" Declining an Instance of a Recurring Event\n   In
      the following example, Bernard declines the second recurrence\n   instance of
      a daily recurring event he's been invited to by Cyrus.\n   >> Request <<\n   PUT
      /home/bernard/calendars/work/4FD3AD926350.ics HTTP/1.1\n   Host: cal.example.com\n
      \  Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length: xxxx\n
      \  If-Schedule-Tag-Match: \"7775FB30-7534-489E-A79A-0EA147B933EB\"\n   BEGIN:VCALENDAR\n
      \  VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n   BEGIN:VTIMEZONE\n
      \  TZID:America/Montreal\n   BEGIN:STANDARD\n   DTSTART:20071104T020000\n   RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\n
      \  TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n
      \  BEGIN:DAYLIGHT\n   DTSTART:20070311T020000\n   RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\n
      \  TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n
      \  END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090602T185254Z\n
      \  DTSTART;TZID=America/Montreal:20090601T150000\n   DTEND;TZID=America/Montreal:20090601T160000\n
      \  RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5\n   TRANSP:OPAQUE\n   SUMMARY:Review
      Internet-Draft\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus
      Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n    ACCEPTED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@exampl\n
      \   e.net\n   END:VEVENT\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n
      \  DTSTAMP:20090603T183823Z\n   RECURRENCE-ID;TZID=America/Montreal:20090602T150000\n
      \  DTSTART;TZID=America/Montreal:20090602T150000\n   DTEND;TZID=America/Montreal:20090602T160000\n
      \  TRANSP:TRANSPARENT\n   SUMMARY:Review Internet-Draft\n   ORGANIZER;CN=\"Cyrus
      Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n
      \   mailto:cyrus@example.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   DECLINED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@exampl\n    e.net\n
      \  END:VEVENT\n   END:VCALENDAR\n   >> Response <<\n   HTTP/1.1 200 OK\n   Content-Length:
      0\n   Date: Tue, 02 Jun 2009 18:52:54 GMT\n   Last-Modified: Tue, 02 Jun 2009
      18:52:54 GMT\n   ETag: \"d85561cfe74a4e785eb4639451b434fb\"\n   Schedule-Tag:
      \"488177c8-2ea7-4176-a6cb-fab8cfccdea2\"\n   Bernard's participation status
      update will cause his server to\n   deliver a scheduling message to Cyrus.  Cyrus's
      client will find the\n   following reply message from Bernard in Cyrus's scheduling
      Inbox\n   collection:\n   >> Request <<\n   GET /home/cyrus/calendars/inbox/9263504FD3AD.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
      \  Date: Tue, 02 Jun 2009 18:52:58 GMT\n   Last-Modified: Tue, 02 Jun 2009 18:52:58
      GMT\n   ETag: \"eb897deabc8939589da116714bc99265\"\n   Content-Type: text/calendar;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Client//EN\n   METHOD:REPLY\n   BEGIN:VTIMEZONE\n
      \  TZID:America/Montreal\n   BEGIN:STANDARD\n   DTSTART:20071104T020000\n   RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\n
      \  TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n
      \  BEGIN:DAYLIGHT\n   DTSTART:20070311T020000\n   RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\n
      \  TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n
      \  END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090603T183823Z\n
      \  RECURRENCE-ID;TZID=America/Montreal:20090602T150000\n   DTSTART;TZID=America/Montreal:20090602T150000\n
      \  DTEND;TZID=America/Montreal:20090602T160000\n   SUMMARY:Review Internet-Draft\n
      \  ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Bernard
      Desruisseaux\";PARTSTAT=DECLINED:\n    mailto:bernard@example.net\n   REQUEST-STATUS:2.0;Success\n
      \  END:VEVENT\n   END:VCALENDAR\n"
    title: 'B.7.  Example: "Attendee" Declining an Instance of a Recurring Event'
  - contents:
    - "B.8.  Example: \"Attendee\" Removing an Instance of a Recurring Event\n   In
      the following example, Bernard removes from his calendar the third\n   recurrence
      instance of a daily recurring event he's been invited to\n   by Cyrus.  This
      is accomplished by the addition of an \"EXDATE\"\n   property to the scheduling
      object resource stored by Bernard.\n   >> Request <<\n   PUT /home/bernard/calendars/work/4FD3AD926350.ics
      HTTP/1.1\n   Host: cal.example.com\n   Content-Type: text/calendar; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   If-Schedule-Tag-Match: \"488177c8-2ea7-4176-a6cb-fab8cfccdea2\"\n
      \  BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Client//EN\n
      \  BEGIN:VTIMEZONE\n   TZID:America/Montreal\n   BEGIN:STANDARD\n   DTSTART:20071104T020000\n
      \  RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\n   TZNAME:EST\n   TZOFFSETFROM:-0400\n
      \  TZOFFSETTO:-0500\n   END:STANDARD\n   BEGIN:DAYLIGHT\n   DTSTART:20070311T020000\n
      \  RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\n   TZNAME:EDT\n   TZOFFSETFROM:-0500\n
      \  TZOFFSETTO:-0400\n   END:DAYLIGHT\n   END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n
      \  SEQUENCE:0\n   DTSTAMP:20090602T185254Z\n   DTSTART;TZID=America/Montreal:20090601T150000\n
      \  DTEND;TZID=America/Montreal:20090601T160000\n   RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5\n
      \  EXDATE;TZID=America/Montreal:20090603T150000\n   TRANSP:OPAQUE\n   SUMMARY:Review
      Internet-Draft\n   ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus
      Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n    mailto:cyrus@example.com\n
      \  ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n    ACCEPTED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@exampl\n
      \   e.net\n   END:VEVENT\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n
      \  DTSTAMP:20090603T183823Z\n   RECURRENCE-ID;TZID=America/Montreal:20090602T150000\n
      \  DTSTART;TZID=America/Montreal:20090602T150000\n   DTEND;TZID=America/Montreal:20090602T160000\n
      \  TRANSP:TRANSPARENT\n   SUMMARY:Review Internet-Draft\n   ORGANIZER;CN=\"Cyrus
      Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Cyrus Daboo\";CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:\n
      \   mailto:cyrus@example.com\n   ATTENDEE;CN=\"Bernard Desruisseaux\";CUTYPE=INDIVIDUAL;PARTSTAT=\n
      \   DECLINED;ROLE=REQ-PARTICIPANT;RSVP=TRUE:mailto:bernard@exampl\n    e.net\n
      \  END:VEVENT\n   END:VCALENDAR\n   Bernard's deletion of a recurrence instance
      will cause his server to\n   deliver a scheduling message to Cyrus.  Cyrus's
      client will find the\n   following reply message from Bernard in Cyrus's scheduling
      Inbox\n   collection:\n   >> Request <<\n   GET /home/cyrus/calendars/inbox/6504923FD3AD.ics
      HTTP/1.1\n   Host: cal.example.com\n   >> Response <<\n   HTTP/1.1 200 OK\n
      \  Date: Tue, 02 Jun 2009 18:52:58 GMT\n   Last-Modified: Tue, 02 Jun 2009 18:52:58
      GMT\n   ETag: \"eb897deabc8939589da116714bc99265\"\n   Content-Type: text/calendar;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   BEGIN:VCALENDAR\n   VERSION:2.0\n
      \  PRODID:-//Example Corp.//CalDAV Client//EN\n   METHOD:REPLY\n   BEGIN:VTIMEZONE\n
      \  TZID:America/Montreal\n   BEGIN:STANDARD\n   DTSTART:20071104T020000\n   RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\n
      \  TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n
      \  BEGIN:DAYLIGHT\n   DTSTART:20070311T020000\n   RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\n
      \  TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n
      \  END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:9263504FD3AD\n   SEQUENCE:0\n   DTSTAMP:20090603T183823Z\n
      \  RECURRENCE-ID;TZID=America/Montreal:20090603T150000\n   DTSTART;TZID=America/Montreal:20090603T150000\n
      \  DTEND;TZID=America/Montreal:20090603T160000\n   SUMMARY:Review Internet-Draft\n
      \  ORGANIZER;CN=\"Cyrus Daboo\":mailto:cyrus@example.com\n   ATTENDEE;CN=\"Bernard
      Desruisseaux\";PARTSTAT=DECLINED:\n    mailto:bernard@example.net\n   REQUEST-STATUS:2.0;Success\n
      \  END:VEVENT\n   END:VCALENDAR\n"
    title: 'B.8.  Example: "Attendee" Removing an Instance of a Recurring Event'
  title: Appendix B.  Example Scheduling Operations
- contents:
  - "Authors' Addresses\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino,
    CA  95014\n   USA\n   EMail: cyrus@daboo.name\n   URI:   http://www.apple.com/\n
    \  Bernard Desruisseaux\n   Oracle Corporation\n   600 Blvd. de Maisonneuve West\n
    \  Suite 1900\n   Montreal, QC  H3A 3J2\n   CANADA\n   EMail: bernard.desruisseaux@oracle.com\n
    \  URI:   http://www.oracle.com/\n"
  title: Authors' Addresses
