- title: __initial_text__
  contents:
  - '                          IP and ARP on HIPPI

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The ANSI X3T9.3 committee has drafted a proposal for the\n   encapsulation\
    \ of IEEE 802.2 LLC PDUs and, by implication, IP on\n   HIPPI.  Another X3T9.3\
    \ draft describes the operation of HIPPI\n   physical switches.  X3T9.3 chose\
    \ to leave HIPPI networking issues\n   largely outside the scope of their standards;\
    \ this document discusses\n   methods of using of ANSI standard HIPPI hardware\
    \ and protocols in the\n   context of the Internet, including the use of HIPPI\
    \ switches as LANs\n   and interoperation with other networks.  \n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      Introduction                                       \
    \            2\n      Scope                                                  \
    \        2\n      Definitions                                                \
    \    3\n      Equipment                                                      4\n\
    \      Protocol                                                       6\n    \
    \     Packet Format                                               6\n        \
    \ 48 bit Universal LAN MAC addresses                         10\n         I-Field\
    \ Format                                             11\n         Rules For Connections\
    \                                      13\n         MTU                      \
    \                                  15\n      Camp-on                         \
    \                              16\n      Address Resolution                  \
    \                          16\n         ARP and RARP Message Format          \
    \                      17\n         ARP Procedure                            \
    \                  21\n         ARP Implementation Methods                   \
    \              22\n         ARP Example                                      \
    \          23\n         Discovery of One's Own Switch Address                \
    \      25\n      Path MTU Discovery                                          \
    \  27\n      Channel Data Rate Discovery                                   27\n\
    \      Performance                                                   29\n    \
    \  Sharing the Switch                                            31\n      Appendix\
    \ A -- HIPPI Basics                                    31\n      Appendix B --\
    \ How to Build a Practical HIPPI LAN              37\n      References       \
    \                                             41\n      Security Considerations\
    \                                       42\n      Authors' Addresses         \
    \                                   42\n"
- title: Introduction
  contents:
  - "Introduction\n   The ANSI High-Performance Parallel Interface (HIPPI) is a simplex\n\
    \   data channel.  Configured in pairs, HIPPI can send and receive data\n   simultaneously\
    \ at nearly 800 megabits per second.  (HIPPI has an\n   equally applicable 1600\
    \ megabit/second option.) Between 1987 and\n   1991, the ANSI X3T9.3 HIPPI working\
    \ group drafted four documents that\n   bear on the use of HIPPI as a network\
    \ interface.  They cover the\n   physical and electrical specification (HIPPI-PH\
    \ [1]), the framing of\n   a stream of octets (HIPPI-FP [2]), encapsulation of\
    \ IEEE 802.2 LLC\n   (HIPPI-LE [3]), and the behavior of a standard physical layer\
    \ switch\n   (HIPPI-SC [4]).  HIPPI-LE also implies the encapsulation of Internet\n\
    \   Protocol[5].  The reader should be familiar with the ANSI HIPPI\n   documents,\
    \ copies of which are archived at the site\n   \"nsco.network.com\" in the directory\
    \ \"hippi,\" and may be obtained via\n   anonymous FTP until they become published\
    \ standards.\n   HIPPI switches can be used to connect a variety of computers\
    \ and\n   peripheral equipment for many purposes, but the working group stopped\n\
    \   short of describing their use as Local Area Networks.  This memo\n   takes\
    \ up where the working group left off, using the guiding\n   principle that except\
    \ for length and hardware header, Internet\n   datagrams sent on HIPPI should\
    \ be identical to the same datagrams\n   sent on a conventional network, and that\
    \ any datagram sent on a\n   conventional 802 network[6] should be valid on HIPPI.\n"
- title: Scope
  contents:
  - "Scope\n   This memo describes the HIPPI interface between a host and a\n   crosspoint\
    \ switch that complies with the HIPPI-SC draft standard.\n   Issues that have\
    \ no impact on host implementations are outside the\n   scope of this memo.  Host\
    \ implementations that comply with this memo\n   are believed to be interoperable\
    \ on a network composed of a single\n   HIPPI-SC switch.  They are also interoperable\
    \ on a simple point-to-\n   point, two-way HIPPI connection with no switch between\
    \ them.  They\n   may as well be interoperable on more complex networks, depending\
    \ on\n   the internals of the switches and how they are interconnected;\n   however,\
    \ these details are implementation dependent and outside the\n   scope of this\
    \ memo.  To the extent that a gateway acts as a host on a\n   HIPPI-SC LAN, its\
    \ behavior is within the scope of this memo.\n   Within the scope of this memo\
    \ are:\n   1.  Packet format and header contents, including HIPPI-FP, HIPPI-LE,\n\
    \       IEEE 802.2 LLC[7], SNAP and ARP\n   2.  I-Field contents\n   3.  HIPPI\
    \ switch address resolution, including self discovery\n   4.  Rules for the use\
    \ of connections.\n   Outside of the scope are\n   1.  Vendor dependent solutions\
    \ for multicast or third party ARP\n   2.  Network configuration and management\n\
    \   3.  Host internal optimizations\n   4.  The interface between a host and an\
    \ outboard protocol processor.\n"
- title: Definitions
  contents:
  - "Definitions\n   Conventional\n      Used with respect to networks, this refers\
    \ to Ethernet, FDDI and\n      802 LAN types, as distinct from HIPPI-SC LANs.\n\
    \   Destination\n      The HIPPI implementation that receives data from a HIPPI\
    \ Source.\n   Node\n      An entity consisting of one HIPPI Source/Destination\
    \ pair that is\n      connected by parallel or serial HIPPI to a HIPPI-SC switch\
    \ and\n      that transmits and receives ARP and IP datagrams.  A node may be\n\
    \      an Internet host, bridge, router or gateway.  This memo uses the\n    \
    \  term node in place of the usual \"host\" to indicate that a host\n      might\
    \ be connected to the HIPPI LAN not directly, but through an\n      external adaptor\
    \ that does some of the protocol processing for the\n      host.\n   Serial HIPPI\n\
    \      An implementation of HIPPI in serial fashion on coaxial cable or\n    \
    \  optical fiber, informally standardized by implementor's agreement\n      in\
    \ the Spring of 1991.\n   Switch Address\n      A value used as the address of\
    \ a node on a HIPPI-SC network.  It\n      is transmitted in the I-field.  HIPPI-SC\
    \ switches may map Switch\n      Addresses to physical port numbers.\n   Source\n\
    \      The HIPPI implementation that generates data to send to a HIPPI\n     \
    \ Destination.\n   Universal LAN Address (ULA)\n      A 48 bit globally unique\
    \ address, administered by the IEEE,\n      assigned to each node on an Ethernet,\
    \ FDDI, 802 network or HIPPI-\n      SC LAN.\n"
- title: Equipment
  contents:
  - "Equipment\n   A HIPPI network can be composed of nodes with HIPPI interfaces,\
    \ HIPPI\n   cables or serial links, HIPPI-SC switches, gateways to other networks\n\
    \   and, possibly, proprietary equipment that multicasts or responds to\n   ARP\
    \ requests on behalf of the real nodes.\n   Each HIPPI interconnection between\
    \ a node and a switch shall consist\n   of a pair of HIPPI links, one in each\
    \ direction.\n   If a link between a node and the switch is capable of the 1600\n\
    \   Megabit/second data rate option (i.e. Cable B installed for 64 bit\n   wide\
    \ operation) in either direction, the node's HIPPI-PH\n   implementation shall\
    \ also be capable of 32 bit operation (Cable B\n   data suppressed) and shall\
    \ be able to select or deselect the 1600Mb/s\n   data rate option at the establishment\
    \ of each new connection.\n   The following figure shows a sample HIPPI switch\
    \ configuration.\n                                                   +-----+\n\
    \   |                                               | H 4 |\n   |            \
    \                                   +--+--+\n   |                   +----+   \
    \ +----+    +----+     |\n   |                   | H1 |    | H2 |    | H3 |  \
    \ +-++\n   |   +--+            +-++-+    +-++-+    +-++-+   |PP|\n   +---+H5|\
    \              ||        ||        ||     ++++\n   |   +--+              ||  \
    \      ||        ||      ||\n   |                 +---++--------++--------++------++----+\n\
    \   |                 |                                     |    +---+\n   | \
    \  +----+        |              HIPPI-SC               +----+ARP|\n   +---+ G1\
    \ +--------+                                     +----+   |\n   |   |    +--------+\
    \               Switch                |    +---+\n   |   +----+        |     \
    \                                |\n   |                 +---++--------++--------++------++----+\n\
    \   |   +--+              ||        ||        ||      ||\n   +---+H6|        \
    \      ||                         ++++\n   |   +--+            +-++-+        \
    \               |PP|\n   |                   |    |                       +-++\n\
    \   |                   | G2 |                         |\n   |               \
    \    |    |                      +--+--+\n   |                   +--+-+      \
    \                | H 7 |\n   |                      |                        +-----+\n\
    \                          |\n        -----+------------+-------+-----------+-------------+------\n\
    \             |                    |           |             |\n             |\
    \                    |           |             |\n          +--+--+          \
    \    +--+--+     +--+--+       +--+--+\n          | H 8 |              | H 9 |\
    \     | H10 |       | H11 |\n          +-----+              +-----+     +-----+\
    \       +-----+\n   Legend:  ---+---+---+--  =  802 network, Ethernet or FDDI\n\
    \                        ||  =  Paired HIPPI link\n                         H\
    \  =  Host computer\n                        PP  =  Outboard Protocol Processor\n\
    \                         G  =  Gateway\n                       ARP  =  ARP Agent\n\
    \                    A possible HIPPI configuration\n   A single HIPPI-SC switch\
    \ has a \"non-blocking\" characteristic, which\n   means there is always a path\
    \ available from any Source to any\n   Destination.  If the network consists of\
    \ more than one switch, the\n   path from a Source to a Destination may include\
    \ a HIPPI link between\n   switches.  If this link is used by more than one Source/Destination\n\
    \   pair, a \"blocking\" network is created: one Source may be blocked from\n\
    \   access to a Destination because another Source is using the link it\n   shares.\
    \  Strategies for establishing connections may be more\n   complicated on blocking\
    \ networks than on non-blocking ones.\n   This memo ignores blocking issues, assuming\
    \ that the HIPPI LAN\n   consists of one HIPPI-SC switch or, if the network is\
    \ more complex\n   than that, it presents no additional problems that a node must\
    \ be\n   aware of.\n"
- title: Protocol
  contents:
  - "Protocol\n   Packet Format\n   The HIPPI packet format for Internet datagrams\
    \ shall conform to the\n   HIPPI-FP and HIPPI-LE draft standards.  The HIPPI-FP\
    \ D1_Area shall\n   contain the HIPPI-LE header.  The HIPPI-FP D2_Area, when present,\n\
    \   shall contain one IEEE 802.2 Type 1 LLC Unnumbered Information (UI)\n   PDU.\
    \  Support of IEEE 802.2 XID, TEST and Type 2 PDUs is not required\n   on HIPPI,\
    \ and Destinations that receive these PDUs may either ignore\n   them or respond\
    \ correctly according to IEEE 802.2 requirements.\n   The length of a HIPPI packet,\
    \ including trailing fill, shall be a\n   multiple of eight octets as required\
    \ by HIPPI-LE.\n   +----------+-----------+---------------------+----------- \
    \  ------+\n   |          |           |                     | IP . . .     0 -\
    \ 7 |\n   | HIPPI-FP | HIPPI-LE  | IEEE 802.2 LLC/SNAP |              octets|\n\
    \   |(8 octets)|(24 octets)|     (8 octets)      | ARP . . .     fill |\n   +----------+-----------+---------------------+-----------\
    \   ------+\n                        HIPPI Packet Structure\n      HIPPI-FP Header\n\
    \         ULP-id (8 bits) shall contain 4.\n         D1_Data_Set_Present (1 bit)\
    \ shall be set.\n         Start_D2_on_Burst_Boundary (1 bit) shall be zero.\n\
    \         Reserved (11 bits) shall contain zero.\n         D1_Area_Size (8 bits)\
    \ should be sent as 3.  Destinations shall\n         accept any value that HIPPI-FP\
    \ defines as legal: from 3 to 127\n         (32 bit HIPPI) or 3 to 255 (64 bit\
    \ HIPPI).\n         D2_Offset (3 bits) may be any value from 0 to 7.\n       \
    \  D2_Size (32 bits) Shall contain the number of octets in the\n         IEEE\
    \ 802.2 LLC Type 1 PDU, or zero if no PDU is present.  It\n         shall not\
    \ exceed 65,288 (decimal).  This value includes the\n         IEEE 802.2 LLC/SNAP\
    \ header and the IP datagram.  It does not\n         include trailing fill octets.\
    \  (See \"MTU,\" below.)\n         The first octet of the IEEE 802.2 LLC PDU (SSAP)\
    \ shall be\n         located at offset \"n\" of the packet, where\n          \
    \   n = 8 + (D1_Area_Size*8) + D2_Offset\n         as specified in HIPPI-FP.\n\
    \      HIPPI-LE Header\n         FC (3 bits) shall contain zero unless otherwise\
    \ defined by\n         local administration.\n         Double_Wide (1 bit) shall\
    \ contain one if the Destination\n         associated with the sending Source\
    \ supports 64 bit HIPPI\n         operation.  Otherwise it shall contain zero.\n\
    \         Message_Type (4 bits) contains a code identifying the type of\n    \
    \     HIPPI-LE PDU.  Defined values (binary) are:\n            0  Data PDU\n \
    \           1  Address Resolution Request PDU (AR_Request)\n            2  Address\
    \ Resolution Response PDU (AR_Response)\n            3  Self Address Resolution\
    \ Request PDU (AR_S_Request)\n            4  Self Address Resolution Response\
    \ PDU (AR_S_Response)\n            5-11 Reserved by the ANSI X3T9.3 committee\n\
    \            12-15 Locally Assigned\n         Destination_Switch_Address is a\
    \ 24-bit field containing the\n         Switch Address of the Destination if known,\
    \ otherwise zero.  If\n         the address comprises less than 24 bits, it shall\
    \ be right\n         justified (occupying the least significant bits) in the field.\n\
    \         Destination_Address_Type (4 bits) and Source_Address_Type (4\n     \
    \    bits) contain codes identifying the type of addresses in the\n         Destination_Switch_Address\
    \ and Source_Switch_Address fields\n         respectively.  Defined values (binary)\
    \ are:\n            0  Unspecified\n            1  HIPPI-SC Source Route (24 bits)\n\
    \            2  HIPPI-SC Address (12 bits)\n            3-11 Reserved by the ANSI\
    \ X3T9.3 committee\n            12-15 Locally Assigned\n         Source_Switch_Address\
    \ is a 24-bit field containing the Switch\n         Address of the Source.  If\
    \ the address comprises less than 24\n         bits, it shall be right justified\
    \ (occupying the least\n         significant bits) in the field.\n         Reserved\
    \ (16 bits) shall contain zero.\n         Destination_IEEE_Address (48 bits) shall\
    \ contain the 48 bit\n         Universal LAN MAC Address of the Destination if\
    \ known,\n         otherwise zero.\n         LE_Locally_Administered (16 bits)\
    \ shall contain zero unless\n         otherwise defined by local administration.\n\
    \         Source_IEEE_Address (48 bits) shall contain the 48 bit\n         Universal\
    \ LAN MAC Address of the Source if known, otherwise\n         zero.\n      IEEE\
    \ 802.2 LLC\n         The IEEE 802.2 LLC Header shall begin in the first octet\
    \ of the\n         HIPPI-FP D2_Area.\n         SSAP (8 bits) shall contain 170\
    \ (decimal).\n         DSAP (8 bits) shall contain 170 (decimal).\n         CTL\
    \ (8 bits) shall contain 3 (Unnumbered Information).\n      SNAP\n         Organization\
    \ Code (24 bits) shall be zero.\n         EtherType (16 bits) shall be set as\
    \ defined in Assigned Numbers\n         [8] (IP = 2048, ARP = 2054, RARP = 32,821).\n\
    \      31    28        23  21          15        10     7         2   0\n    \
    \  +-----+---------+-+-+-----------+---------+-----+---------+-----+\n    0 |\
    \      04       |1|0|       Reserved      |      03       |  0  |\n      +---------------+-+-+---------------------+---------------+-----+\n\
    \    1 |                             (n+8)                             |\n   \
    \   +-----+-+-------+-----------------------------------------------+\n    2 |[LA]\
    \ |W|M_Type |          Destination_Switch_Address           |\n      +-----+-+-------+-----------------------------------------------+\n\
    \    3 | D_A_T | S_A_T |             Source_Switch_Address             |\n   \
    \   +-------+-------+---------------+-------------------------------+\n    4 |\
    \            Reserved           |  [Destination_IEEE_Address]   |\n      +-------------------------------+\
    \                               |\n    5 |                                   \
    \                            |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |     [Source_IEEE_Address]     |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                                                               |\n      +===============+===============+===============+===============+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |         [EtherType]           |\n      +---------------+---------------+---------------+---------------+\n\
    \   10 |Message octet 0|Message octet 1|Message octet 2| . . .         |\n   \
    \   +---------------+---------------+---------------+---            |\n      |\
    \                            .  .  .\n                                       \
    \                               |\n      |        -------+---------------+---------------+---------------+\n\
    \      |         . . . |  octet (n-2)  |  octet (n-1)  |     FILL      |\n   \
    \   +---------------+---------------+---------------+---------------+\n   N-1|\
    \      FILL     |     FILL      |     FILL      |     FILL      |\n      +---------------+---------------+---------------+---------------+\n\
    \                           HIPPI Packet Format\n      Words 0-1:  HIPPI-FP Header\n\
    \      Words 2-7:  D1 Area (HIPPI-LE Header)\n      Words 8-9:  D2 Area (IEEE\
    \ 802.2 LLC/SNAP)\n      Words 10-(N-1):  D2 Area (IP or ARP message)\n      (n)\
    \ is the number of octets in the IP or ARP message.\n      +====+ denotes the\
    \ boundary between D1 and D2 areas.\n      [LA] fields are zero unless used otherwise\
    \ locally.\n      Abbreviations:  \"W\"      = Double_Wide field;\n          \
    \            \"M_Type\" = Message_Type field;\n                      \"D_A_T\"\
    \  = Destination_Address_Type;\n                      \"S_A_T\"  = Source_Address_Type;\n\
    \      [FILL] octets complete the HIPPI packet to an even\n      number of 32\
    \ bit words.  The number of fill octets\n      is not counted in the data length.\n\
    \   IEEE 802.2 Data\n      The IEEE 802.2 Data shall follow the EtherType field\
    \ immediately.\n      Fill octets shall be used following the Data as necessary\
    \ to make\n      the number of octets in the packet a multiple of 8.  In accordance\n\
    \      with HIPPI-FP, the amount of this fill is not included in the\n      D2_Size\
    \ value in the HIPPI-FP Header.\n      The order of the octets in the data stream\
    \ is from higher numbered\n      to lower numbered data signal (left to right)\
    \ within the HIPPI\n      word, as specified in HIPPI-FP Clause 7, \"Word and\
    \ byte formats.\"\n      With the 1600 megabit/second data rate option (64 bit)\
    \ bits 32\n      through 63 are on Cable B, so that the four octets on Cable B\
    \ come\n      logically before those on Cable A.  Within each octet, the most\n\
    \      significant bit is the highest numbered signal.\n"
- title: 48 bit Universal LAN MAC Addresses
  contents:
  - "48 bit Universal LAN MAC Addresses\n   IEEE Standard 802.1A specifies the Universal\
    \ LAN MAC Address.  The\n   globally unique part of the 48 bit space is administered\
    \ by the IEEE.\n   Each node on a HIPPI-SC LAN should be assigned a ULA.  Multiple\
    \ ULAs\n   may be used if a node contains more than one IEEE 802.2 LLC protocol\n\
    \   entity.\n   The format of the address within its 48 bit HIPPI-LE fields follows\n\
    \   IEEE 802.1A canonical bit order and HIPPI-FP bit and byte order:\n   31  \
    \            23              15               7              0\n   +-------------------------------+---------------+---------------+\n\
    \   |      (not used for ULA)       |ULA octet 0|L|G|  ULA octet 1  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |  ULA octet 2  |  ULA octet 3  |  ULA octet 4  |  ULA octet 5  |\n   +---------------+---------------+---------------+---------------+\n\
    \                    Universal LAN MAC Address Format\n      L (U/L bit) = 1 for\
    \ Locally administered addresses, 0 for\n      Universal.\n      G (I/G bit) =\
    \ 1 for Group addresses, 0 for Individual.\n   The use of ULAs is optional, but\
    \ encouraged.  Although ULAs are not\n   used by HIPPI-SC switches, they are helpful\
    \ for HIPPI Switch Address\n   resolution, and for distinguishing between multiple\
    \ logical entities\n   that may exist within one node.  They may also be used\
    \ by gateway\n   devices that replace HIPPI hardware headers with the MAC headers\
    \ of\n   other LANs.  Carrying the ULAs in the HIPPI header may simplify these\n\
    \   devices, and it may also help if HIPPI is used as an interface to\n   some\
    \ future HIPPI based LAN that uses ULAs for addressing.\n"
- title: Recommended HIPPI-FP Options
  contents:
  - "Recommended HIPPI-FP Options\n   HIPPI-FP allows some flexibility in the construction\
    \ of a HIPPI\n   packet, including placement of short bursts, optional fill and\
    \ offset\n   octets between the D1 and D2 areas and fill following the D2 data.\n\
    \   For efficiency, Sources should limit the use of these options:\n   1.  Send\
    \ the short burst as the last burst of the packet rather than\n       the first.\n\
    \   2.  Do not place fill octets between the HIPPI-LE header and the\n       start\
    \ of the D2_Area.\n   3.  Use no more than seven octets after the D2 Data, as\
    \ needed to\n       make the total packet length a multiple of 8 octets.\n"
- title: 'One HIPPI-FP option is forbidden: setting the Start_D2_on_Burst_Boundary'
  contents:
  - 'One HIPPI-FP option is forbidden: setting the Start_D2_on_Burst_Boundary

    '
- title: flag to one.  This places no limitation on the formation of packets into
  contents:
  - 'flag to one.  This places no limitation on the formation of packets into

    '
- title: a series of bursts; a Source may segment the packet in any legal manner
  contents:
  - 'a series of bursts; a Source may segment the packet in any legal manner

    '
- title: according to HIPPI-FP, including forcing the D2_Area to start on a burst
  contents:
  - 'according to HIPPI-FP, including forcing the D2_Area to start on a burst

    '
- title: boundary.  The purpose of the Start_D2_on_Burst_Boundary flag is to help
  contents:
  - 'boundary.  The purpose of the Start_D2_on_Burst_Boundary flag is to help

    '
- title: preserve the segmentation of the packet for some device-control
  contents:
  - 'preserve the segmentation of the packet for some device-control

    '
- title: protocols that use the first burst boundary to separate command and data
  contents:
  - 'protocols that use the first burst boundary to separate command and data

    '
- title: areas within the packet.  Requiring this flag to be clear means that
  contents:
  - 'areas within the packet.  Requiring this flag to be clear means that

    '
- title: when a packet arrives at the Destination its burst boundaries might not
  contents:
  - 'when a packet arrives at the Destination its burst boundaries might not

    '
- title: be exactly as the Source sent them.  This may occur if a HIPPI packet
  contents:
  - 'be exactly as the Source sent them.  This may occur if a HIPPI packet

    '
- title: passes over some other medium in the route between HIPPI LANs.
  contents:
  - 'passes over some other medium in the route between HIPPI LANs.

    '
- title: Notwithstanding these recommendations, each Destination shall accept any
  contents:
  - 'Notwithstanding these recommendations, each Destination shall accept any

    '
- title: well-formed HIPPI packet within the definitions in HIPPI-FP.
  contents:
  - 'well-formed HIPPI packet within the definitions in HIPPI-FP.

    '
- title: Note that neither HIPPI-FP nor HIPPI-LE limits the number of fill bytes
  contents:
  - 'Note that neither HIPPI-FP nor HIPPI-LE limits the number of fill bytes

    '
- title: placed between the end of the IP packet and the end of the HIPPI-PH
  contents:
  - 'placed between the end of the IP packet and the end of the HIPPI-PH

    '
- title: packet.  Some source implementations may add fill sufficient to overflow
  contents:
  - 'packet.  Some source implementations may add fill sufficient to overflow

    '
- title: a destination input buffer.  To avoid interpreting valid packets as
  contents:
  - 'a destination input buffer.  To avoid interpreting valid packets as

    '
- title: errors, destinations should ignore overflow conditions and verify that
  contents:
  - 'errors, destinations should ignore overflow conditions and verify that

    '
- title: at least the number of bytes indicated by the IP header actually
  contents:
  - 'at least the number of bytes indicated by the IP header actually

    '
- title: arrived.
  contents:
  - 'arrived.

    '
- title: I-Field format
  contents:
  - "I-Field format\n   The I-field bits, as defined in HIPPI-SC, shall be set as\
    \ follows:\n      Locally Administered (bit 31) shall be zero.\n      Reserved\
    \ (bits 30, 29) should be zero.  Destinations shall accept\n      any value for\
    \ these bits.\n      Double wide (bit 28) shall be set when Source Cable B is\
    \ connected\n      and the Source wants a 64 bit connection.  It shall be zero\n\
    \      otherwise.\n      Direction (bit 27) should be sent as zero, however Destinations\n\
    \      shall accept either zero or one and interpret the Routing Control\n   \
    \   field accordingly, per HIPPI-SC.\n      Path Selection (bits 26, 25) shall\
    \ be 00, 01, or 11 (binary) at\n      the Source's option.  00 (source route mode)\
    \ indicates that the\n      I-field bits 23-00 contain a 24 bit source route;\
    \ 01 or 11\n      (logical address mode) indicate that bits 23-00 contain 12 bit\n\
    \      Source and Destination Addresses.  The value 11 is meaningful when\n  \
    \    more than one route exists from a Source to a Destination; it\n      allows\
    \ the switch to choose the route.  Use of 01 forces the\n      switch always to\
    \ use the same route for the same\n      Source/Destination pair.\n      Camp-on\
    \ (bit 24) may be 1 or 0; however, a Source shall not make\n      consecutive\
    \ requests without Camp-on to the same Destination while\n      the requests are\
    \ being rejected.  The purpose of this restriction\n      is to prevent a node\
    \ from circumventing the fair share arbitration\n      mechanism of the switch\
    \ by repeating requests at a very high rate.\n      If logical address mode is\
    \ used:\n         Source Address (bits 23-12) is not used.\n         Destination\
    \ Address (bits 11-0) shall contain the Switch\n         Address of the Destination.\n\
    \      If source route mode is used:\n         Routing control (bits 23-00) shall\
    \ contain the route to the\n         Destination.\n      Note:  the outcome of\
    \ Switch Address Resolution (see \"Address\n      Resolution\" below) determines\
    \ whether to use logical address mode\n      or source route mode.  If source\
    \ route mode is used with multiple\n      interconnected switches, different sources\
    \ may use different\n      addresses to reach the same destination, and multicast-based\n\
    \      address resolution may not be possible because a target node may\n    \
    \  not know the route to itself from a given remote source.\n      Regardless\
    \ of this difficulty, it may be possible to use source\n      route mode if the\
    \ network consists of a single switch, or if\n      address resolution is supported\
    \ by an ARP agent that is able to\n      deliver correct routes to each node.\
    \  The nodes themselves need\n      not be concerned with these problems if they\
    \ use the addressing\n      mode suggested by the value of the Source_Address_Type\
    \ field in a\n      HIPPI-LE Address Resolution Response packet.\n"
- title: Rules For Connections
  contents:
  - "Rules For Connections\n   The following rules for connection management by Source\
    \ and\n   Destination are intended to insure frequent, fair share access to\n\
    \   Destinations for which multiple Sources are contending.  If possible,\n  \
    \ nodes should transfer data at full HIPPI speeds and hold connections\n   no\
    \ longer than necessary.\n   A source may hold a connection for as long as it\
    \ takes to send 68\n   HIPPI bursts at what ever speed the two connected nodes\
    \ can achieve\n   together.  The number of packets sent in one connection is not\n\
    \   limited, except that the number of bursts over all the packets should\n  \
    \ not exceed 68.  This is not a recommendation to send as many packets\n   as\
    \ possible per connection; one packet per connection is acceptable.\n   The purpose\
    \ of this limit is to give each Source an fair share of a\n   common Destination's\
    \ bandwidth.  Without a limit, if there is a\n   Destination that is constantly\
    \ in demand by multiple Sources, the\n   Source that sends the most data per connection\
    \ wins the greatest\n   share of bandwidth.\n   The limit of 68 bursts is not\
    \ absolute.  An implementation may check\n   the burst count after transmission\
    \ of a packet and end the connection\n   if it is greater than or equal to some\
    \ threshold.  If this is done,\n   the threshold should be less than 68 depending\
    \ on the typical packet\n   size, to ensure that the 68 burst limit is not normally\
    \ exceeded.\n   For instance, a Source sending 64K packets would send two per\n\
    \   connection (130 bursts) if it checked for 68 at the end of each\n   packet.\
    \  In this situation the Source is required to check for a\n   value small enough\
    \ that it will not send a second packet in the same\n   connection.\n   Destinations\
    \ shall accept all packets that arrive during a\n   connection, and may discard\
    \ those that exceed its buffering capacity.\n   A Destination shall not abort\
    \ a connection (deassert CONNECT) simply\n   because too many bursts were received;\
    \ however a Destination may\n   abort a connection whose duration has exceeded\
    \ a time period of the\n   Destination's choosing, as long as the Source is allowed\
    \ ample time\n   to transmit its quota of bursts.\n   The rules admonish the node\
    \ to do certain things as fast as it can,\n   however there is no absolute measure\
    \ of compliance.  Nodes that\n   cannot transfer data at full HIPPI speeds can\
    \ still interoperate but\n   the faster the implementation, the better the performance\
    \ of the\n   network will be.\n   Assuming that bursts flow at the maximum rate,\
    \ the most important\n   factor in network throughput is the connection switching\
    \ time,\n   measured from the deassertion of REQUEST by the Source at the end\
    \ of\n   one connection to its first assertion of BURST after the\n   establishment\
    \ of the new connection.  Implementations should keep\n   this time as short as\
    \ possible.  For a guideline, assuming parallel\n   HIPPI and a single HIPPI-SC\
    \ switch, ten microseconds permits nearly\n   full HIPPI throughput with full-sized\
    \ packets, and at 60 microseconds\n   the available throughput is reduced by about\
    \ 10%.  (See\n   \"Performance,\" below.)\n   All HIPPI electrical signaling shall\
    \ comply with HIPPI-PH.  In every\n   case, the following rules go beyond what\
    \ HIPPI-PH requires.\n   Rules for the Source\n      1.  Do not assert REQUEST\
    \ until a packet is ready to send.\n      2.  Transmit bursts as quickly as READYs\
    \ permit.  Except for the\n          required HIPPI Source Wait states, there\
    \ should be no delay in\n          the assertion of BURST whenever the Source's\
    \ READY counter is\n          nonzero.\n      3.  Make a best effort to ensure\
    \ that connection durations do not\n          exceed 68 bursts.\n      4.  Deassert\
    \ REQUEST immediately when no packet is available for\n          immediate transmission\
    \ or the last packet of the connection\n          has been sent.\n   Rules for\
    \ the Destination\n      1.  Reject all connections if unable to receive packets.\
    \  This\n          frees the requesting Source to connect to other Destinations\n\
    \          with a minimum of delay.  Inability to receive packets is not\n   \
    \       a transient condition, but is the state of the Destination\n         \
    \ when its network interface is not initialized.\n      2.  A HIPPI node should\
    \ be prepared to efficiently accept\n          connections and process incoming\
    \ data packets.  While this may\n          be best achieved by not asserting connect\
    \ unless 68 bursts\n          worth of buffers is available, it may be possible\
    \ to meet this\n          requirement with fewer buffers.  This may be due to\
    \ a priori\n          agreement between nodes on packet sizes, the speed of the\n\
    \          interface to move buffers, or other implementation dependent\n    \
    \      considerations.\n      3.  Accept a connection immediately when buffers\
    \ are available.\n          The Destination should never delay the acceptance\
    \ of a\n          connection unnecessarily.\n      4.  Once initialized, a Destination\
    \ may reject connection requests\n          only for one of the following reasons:\n\
    \          1.  The I-field was received with incorrect parity.\n          2. \
    \ The I-field contents are invalid, e.g. the \"W\" bit set\n              when\
    \ the Destination does not support the 1600 megabit\n              data rate option,\
    \ the \"Locally Administered\" bit is set,\n              the Source is not permitted\
    \ to send to this Destination,\n              etc.\n          Transient conditions\
    \ within the Destination, such as temporary\n          buffer shortages, must\
    \ never cause rejected connections.\n      5.  Ignore aborted connection sequences.\
    \  Sources may time out and\n          abandon attempts to connect; therefore\
    \ aborted connection\n          sequences are normal events.\n   MTU\n      Maximum\
    \ Transmission Unit (MTU) is defined as the length of the IP\n      packet, including\
    \ IP header, but not including any overhead below\n      IP.  Conventional LANs\
    \ have MTU sizes determined by physical layer\n      specification.  MTUs may\
    \ be required simply because the chosen\n      medium won't work with larger packets,\
    \ or they may serve to limit\n      the amount of time a node must wait for an\
    \ opportunity to send a\n      packet.\n      HIPPI has no inherent limit on packet\
    \ size.  The HIPPI-FP header\n      contains a 32 bit D2_Size field that, while\
    \ it may limit packets\n      to about 4 gigabytes, imposes no practical limit\
    \ for networking\n      purposes.  Even so, a HIPPI-SC switch used as a LAN needs\
    \ an MTU\n      so that Destination buffer sizes can be determined.\n      The\
    \ MTU for HIPPI-SC LANs is 65280 (decimal) octets.\n      This value was selected\
    \ because it allows the IP packet to fit in\n      one 64K octet buffer with up\
    \ to 256 octets of overhead.  The\n      overhead is 40 octets at the present\
    \ time; there are 216 octets of\n      room for expansion.\n         HIPPI-FP\
    \ Header                  8 octets\n         HIPPI-LE Header                 24\
    \ octets\n         IEEE 802.2 LLC/SNAP Headers      8 octets\n         Maximum\
    \ IP packet size (MTU) 65280 octets\n                                      ------------\n\
    \                           Total      65320 octets (64K - 216)\n"
- title: Camp-on
  contents:
  - "Camp-on\n   When several Sources contend for a single Destination, the Camp-on\n\
    \   feature allows the HIPPI-SC switch to arbitrate and ensure that all\n   Sources\
    \ have fair access.  (HIPPI-SC does not specify the method of\n   arbitration.)\
    \  Without Camp-on, the contending Sources would simply\n   have to retry the\
    \ connection repeatedly until it was accepted, and\n   the fastest Source would\
    \ usually win.  To guarantee fair share\n   arbitration, Sources are prohibited\
    \ from making repeated requests to\n   the same Destination without Camp-on in\
    \ such a way as to defeat the\n   arbitration.\n   There is another important\
    \ reason to use Camp-on: when a connection\n   without Camp-on is rejected, the\
    \ Source cannot determine whether the\n   rejection came from the requested Destination\
    \ or from the switch.\n   The Source also cannot tell the reason for the rejection,\
    \ which could\n   be either that the Destination was off line or not cabled, or\
    \ the I-\n   field was erroneous or had incorrect parity.  Sources should not\n\
    \   treat a rejection of a request without Camp-on as an error.  Camp-on\n   prevents\
    \ rejection due to the temporary busy case; with one\n   exception, rejection\
    \ of a Camp-on request indicates an error\n   condition, and an error event can\
    \ be recorded.  The exception occurs\n   when a 64 bit connection is attempted\
    \ to a Destination that does not\n   have Cable B connected, resulting in a reject.\
    \  This case is covered\n   in \"Channel Data Rate Discovery,\" below.\n"
- title: Address Resolution
  contents:
  - "Address Resolution\n   The Internet Address Resolution Protocol (ARP) is defined\
    \ in RFC 826\n   [9].  Ethernet, FDDI and 802 networks use ARP to discover another\n\
    \   host's ULA knowing the Internet address.  Reverse ARP [10] is used to\n  \
    \ discover the Internet address, knowing the ULA.  ARP can be used in\n   the\
    \ conventional way on HIPPI-SC LANs equipped with a multicast\n   capability or\
    \ third party ARP agent.\n   HIPPI-LE defines similar lower-level address resolution\
    \ between ULAs\n   and switches.  HIPPI-LE adds a self-address resolution mechanism\
    \ not\n   defined for Internet ARP, which allows a node to discover its own\n\
    \   switch address dynamically.\n   ARP for the purpose of discovering ULAs is\
    \ not necessary for the\n   operation of a HIPPI-SC LAN, but it serves as the\
    \ vehicle for\n   discovery of HIPPI-SC Switch Addresses, without which the HIPPI-SC\n\
    \   LAN cannot function.  In other words, at the same time a node is\n   using\
    \ ARP to map another node's IP address to its ULA, it is also\n   mapping the\
    \ ULA to the 12 bit HIPPI Switch Address, from which it\n   will construct the\
    \ I-field value for sending messages to that node.\n   This additional level of\
    \ hardware addressing uses the address fields\n   in the HIPPI-LE header.\n  \
    \ In the following discussion, the terms \"requester\" and \"target\" are\n  \
    \ used to identify the node requesting address resolution and the node\n   whose\
    \ address it wishes to discover, respectively.  In third party\n   ARP (see \"\
    ARP Implementation Methods,\" below) the source of a reply\n   is an ARP agent\
    \ node, not the target node.\n   ARP and RARP Message Format\n      The HIPPI\
    \ ARP/RARP protocol uses the same packet format as ARP for\n      Ethernet.  ARP\
    \ packets shall be transmitted with a hardware type\n      code of 1 (as for Ethernet).\
    \  Furthermore, ARP packets shall be\n      accepted if received with hardware\
    \ type codes of either 1 or 6\n      (IEEE 802 networks).\n      ar$hrd (16 bits)\
    \ shall contain 1.\n      ar$pro (16 bits) shall contain the IP protocol code\
    \ 2048\n      (decimal).\n      ar$hln (8 bits) shall contain 6.\n      ar$pln\
    \ (8 bits) shall contain 4.\n      ar$op  (16 bits) shall contain 1 for requests,\
    \ 2 for responses.\n      ar$sha (48 bits) in requests shall contain the requester's\
    \ ULA.\n      In replies it shall contain the target node's ULA.\n      ar$spa\
    \ (32 bits) in requests shall contain the requester's IP\n      address if known,\
    \ otherwise zero.  In replies it shall contain the\n      target node's IP address.\n\
    \      ar$tha (48 bits) in requests shall contain the target's ULA if\n      known,\
    \ otherwise zero.  In replies it shall contain the\n      requester's ULA.\n \
    \     ar$tpa (32 bits) in requests shall contain the target's IP address\n   \
    \   if known, otherwise zero.  In replies it shall contain the\n      requester's\
    \ IP address.\n      The format of the six octets of the ULA shall be the same\
    \ as\n      required in the HIPPI-LE header (see \"48 bit Universal LAN MAC\n\
    \      Addresses\" above), except for the alignment of the Source ULA with\n \
    \     respect to the 32 bit HIPPI word, which is different between ARP\n     \
    \ and HIPPI-LE.  No bit reversal is necessary as is required with\n      FDDI\
    \ [11].\n      31    28        23  21          15        10     7         2  \
    \ 0\n      +-----+---------+-+-+-----------+---------+-----+---------+-----+\n\
    \    0 |      04       |1|0|         000         |      03       |  0  |\n   \
    \   +---------------+-+-+---------------------+---------------+-----+\n    1 |\
    \                              36                               |\n      +-----+-+-------+-----------------------+-----------------------+\n\
    \    2 |[LA] |W|   1   |          000          |   Target Switch Addr  |\n   \
    \   +-----+-+-------+-----------------------+-----------------------+\n    3 |\
    \   2   |   2   |          000          |Requester's Switch Addr|\n      +---------------+---------------+-------+-----------------------+\n\
    \    4 |             00 00             |                               |\n   \
    \   +-------------------------------+                               |\n    5 |\
    \                           Target ULA                          |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |                               |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                        Requester's ULA                        |\n      +===============+===============+===============+===============+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |        EtherType (2054)       |\n      +---------------+---------------+-------------------------------+\n\
    \   10 |            hrd (1)            |           pro (2048)          |\n   \
    \   +---------------+---------------+-------------------------------+\n   11 |\
    \    hln (6)    |    pln (4)    |            op (1)             |\n      +---------------+---------------+-------------------------------+\n\
    \   12 |                 Requester's ULA octets 0 - 3                  |\n   \
    \   +-------------------------------+-------------------------------+\n   13 |\
    \ Requester's ULA octets 4 - 5  | Requester's IP Address upper  |\n      +-------------------------------+-------------------------------+\n\
    \   14 | Requester's IP Address lower  |    Target ULA octets 0 - 1    |\n   \
    \   +-------------------------------+-------------------------------+\n   15 |\
    \                   Target ULA octets 2 - 5                     |\n      +---------------------------------------------------------------+\n\
    \   16 |                       Target IP Address                       |\n   \
    \   +---------------------------------------------------------------+\n      \
    \          HIPPI ARP/RARP Request (logical address mode)\n   All ARP requests\
    \ shall be sent with the I-field bit 28 set to zero,\n   i.e. requesting a 32\
    \ bit connection.\n   Unless another convention is locally defined for ARP requests,\
    \ the\n   I-field Path Selection bits may be set to binary 01 or 11 (logical\n\
    \   address mode), and Destination Address field set to the HIPPI-SC\n   address\
    \ reserved for traffic conventionally directed to the IEEE\n   802.1[12] broadcast\
    \ address (which HIPPI-SC defines as FE0, hex).\n   Reply packets shall be sent\
    \ with I-field Path Selection and Routing\n   Control fields set according to\
    \ the Source_Address_Type and\n   Source_Switch_Address fields in the request.\n\
    \   In the HIPPI-LE header of ARP/RARP requests and replies the following\n  \
    \ fields shall be set:\n   Double-Wide should be 1 if the HIPPI Destination at\
    \ the sending node\n   can accept 64 bit HIPPI connections.\n   Message_Type shall\
    \ contain an address resolution type code as defined\n   in HIPPI-LE.  It shall\
    \ be set appropriately to the value of the ARP\n   operation code (ar$op) in piggybacked\
    \ ARP messages:\n         +-----------------------+-----------------------+\n\
    \         |       ARP ar$op       | HIPPI-LE Message_Type |\n         +=======================+=======================+\n\
    \         |ARP Request (1)        |AR_Request (1)         |\n         |ARP Reply\
    \ (2)          |AR_Response (2)        |\n         +-----------------------+-----------------------+\n\
    \         |Reverse ARP Request (3)|AR_Request (1)         |\n         |Reverse\
    \ ARP Reply (4)  |AR_Response (2)        |\n         +-----------------------+-----------------------+\n\
    \   There is no ARP message corresponding to HIPPI-LE self address\n   discovery;\
    \ these packets are sent without ULP data.\n   Destination_Switch_Address in requests\
    \ shall be the Switch Address of\n   the target node if known, otherwise zero.\
    \  In replies it shall be the\n   requesting node's Switch Address\n   Destination_Address_Type\
    \ shall be 1 if the Destination_Switch_Address\n   is a source route, 2 if it\
    \ is a 12 bit address.\n   Source_Address_Type shall be 1 if the Source_Switch_Address\
    \ is a\n   source route, 2 if it is a 12 bit address.\n   Source_Switch_Address\
    \ in requests shall be the Switch Address of the\n   requesting node if known,\
    \ otherwise zero.  In replies it shall be the\n   target node's Switch Address.\n\
    \   Destination_IEEE_Address shall be the same as the ar$tha field in the\n  \
    \ ARP message.\n   Source_IEEE_Address shall be the same as the ar$sha field in\
    \ the ARP\n   message.\n      31    28        23  21          15        10   \
    \  7         2   0\n      +-----+---------+-+-+-----------+---------+-----+---------+-----+\n\
    \    0 |      04       |1|0|         000         |      03       |  0  |\n   \
    \   +---------------+-+-+---------------------+---------------+-----+\n    1 |\
    \                              36                               |\n      +-----+-+-------+-----------------------+-----------------------+\n\
    \    2 |[LA] |W|   2   |          000          |Requester's Switch Addr|\n   \
    \   +-----+-+-------+-----------------------+-----------------------+\n    3 |\
    \   2   |   2   |          000          | Target Switch Address |\n      +---------------+---------------+-------+-----------------------+\n\
    \    4 |             00 00             |                               |\n   \
    \   +-------------------------------+                               |\n    5 |\
    \                        Requester's ULA                        |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |                               |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                           Target ULA                          |\n      +===============+===============+===============+===============+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |        EtherType (2054)       |\n      +---------------+---------------+-------------------------------+\n\
    \   10 |            hrd (1)            |           pro (2048)          |\n   \
    \   +---------------+---------------+-------------------------------+\n   11 |\
    \    hln (6)    |    pln (4)    |            op (2)             |\n      +---------------+---------------+-------------------------------+\n\
    \   12 |                    Target ULA octets 0 - 3                    |\n   \
    \   +-------------------------------+-------------------------------+\n   13 |\
    \    Target ULA octets 4 - 5    |    Target IP Address upper    |\n      +-------------------------------+-------------------------------+\n\
    \   14 |    Target IP Address lower    | Requester's ULA octets 0 - 1  |\n   \
    \   +-------------------------------+-------------------------------+\n   15 |\
    \                 Requester's ULA octets 2 - 5                  |\n      +---------------------------------------------------------------+\n\
    \   16 |                    Requester's IP Address                     |\n   \
    \   +---------------------------------------------------------------+\n      \
    \               HIPPI ARP/RARP Reply (logical address mode)\n"
- title: ARP procedure
  contents:
  - "ARP procedure\n   The combined HIPPI-LE/ARP packet contains six addresses, three\
    \ each\n   for the requester and the target:\n      Requester's IP Address   \
    \       (ARP)\n      Requester's ULA                 (ARP and HIPPI-LE)\n    \
    \  Requester's Switch Address      (HIPPI-LE)\n      Target's IP Address     \
    \        (ARP)\n      Target's ULA                    (ARP and HIPPI-LE)\n   \
    \   Target's Switch Address         (HIPPI-LE)\n   Internet ARP concerns the IP\
    \ Address and ULA; HIPPI-LE address\n   resolution concerns the ULA and Switch\
    \ Address.  Thus the ULA appears\n   in both parts of the packet.\n   Successful\
    \ ARP results in tables in each node that map remote nodes'\n   IP addresses to\
    \ ULAs and ULAs to Switch Addresses, so that when an\n   application requests\
    \ a connection to a remote node by its IP address,\n   both the remote ULA and\
    \ Switch Address can be determined, a correct\n   HIPPI-LE header can be built,\
    \ and a connection to the node can be\n   established using the correct Switch\
    \ Address in the I-field.  Any\n   recipient of an ARP request or reply may use\
    \ information in the\n   packet to augment its tables, even if it is neither the\
    \ target node\n   nor the requester.\n   Note that the use of ULAs with HIPPI\
    \ is not required.  In both the\n   HIPPI-LE header and the Internet ARP message,\
    \ the fields that contain\n   ULAs should be set to zero when the ULA is not known.\
    \  Address\n   resolution consists of two separate protocols, HIPPI-LE address\n\
    \   resolution and Internet ARP, neither of which can function\n   independently\
    \ without ULAs.  However HIPPI Switch Address resolution\n   can work without\
    \ ULAs if the two protocols are piggybacked and\n   treated as one operation in\
    \ which Internet addresses are mapped\n   directly to switch addresses.  With\
    \ the exception of the optional\n   self-address resolution request, which has\
    \ no analogous Internet\n   protocol, HIPPI-LE address resolution and Internet\
    \ ARP messages\n   should be sent together as a single HIPPI packet.\n   If ULAs\
    \ are used, the HIPPI-LE address resolution request can be sent\n   without a\
    \ piggybacked 802.2 LLC PDU, so it is possible to map ULAs to\n   HIPPI Switch\
    \ Addresses without using ARP.  Nodes shall accept both\n   piggybacked and non-piggybacked\
    \ forms of HIPPI-LE address resolution\n   messages.\n   The recipient of an address\
    \ resolution request, having first updated\n   its address mapping tables with\
    \ any new information it can find in\n   the request, checks to see if it is the\
    \ target node.  If it is, it\n   generates a reply by filling in the unknown target\
    \ address fields\n   according to the HIPPI-LE message type and the ARP operation\
    \ code,\n   and swapping the four pairs of source/target address fields.  Then\
    \ it\n   connects to the requesting node with the Source Switch Address from\n\
    \   the request, and sends the reply packet.\n   A node is the target of an address\
    \ resolution request if the request\n   contains one of the following:\n   1.\
    \  the node's ULA in the Destination_IEEE_Address field of a HIPPI-\n       LE\
    \ AR_Request message\n   2.  the node's IP address in the target protocol address\
    \ field\n       (ar$tpa) of a piggybacked Internet ARP message\n   If two target\
    \ fields are known but are not mapped together in the\n   recipient's address\
    \ mapping tables, it may do one of three things:\n   1.  treat the request as\
    \ having two targets, and send correct replies\n       for both to the requester.\n\
    \   2.  assume its own tables are invalid and ignore the request.\n   3.  assume\
    \ one of the \"known\" target fields is correct and respond as\n       if the\
    \ other had been unknown.\n   The best choice depends on which fields conflict\
    \ and the nature of\n   the implementation.  Choice 3 is probably best for ordinary\
    \ nodes,\n   but third party ARP agents may have reason to use one of the other\n\
    \   two.  Future experience may shed light on this.\n"
- title: ARP Implementation Methods
  contents:
  - "ARP Implementation Methods\n   The requirements for nodes to handle address resolution\
    \ messages\n   depend on the means by which address resolution is implemented\
    \ on the\n   LAN.\n   In conventional networks ARP is a distributed function.\
    \ ARP requests\n   are broadcast; each host may update its address mappings with\
    \ any ARP\n   request or reply it sees, and responds to ARP requests that contain\n\
    \   its own address in the target protocol address field.  HIPPI-SC\n   switches\
    \ are not required to provide multicast service, although some\n   do.  Even if\
    \ the switches do not multicast, one or more nodes can act\n   as multicast servers,\
    \ receiving packets sent to the HIPPI-SC\n   broadcast address and repeating them\
    \ to each other node in turn.\n   Either way, if multicast exists on a HIPPI-SC\
    \ LAN, ARP can be a\n   distributed function.  In this situation each node is\
    \ required to\n   respond correctly to address resolution requests for which it\
    \ is the\n   target.\n   Third party ARP is a second method that does not depend\
    \ on multicast.\n   The switches can map the HIPPI ARP multicast address to a\
    \ node that\n   acts as an ARP agent, replying to ARP requests on behalf of the\
    \ real\n   target nodes.  Ordinary nodes never receive ARP requests or generate\n\
    \   replies and never have the opportunity to update mapping tables based\n  \
    \ on ARP requests from other nodes, as usually happens on conventional\n   networks.\
    \  Each node must request any address information it needs,\n   but never has\
    \ to process ARP information it doesn't need.  Under\n   third party ARP a node\
    \ should not receive address resolution\n   requests, and each node that is not\
    \ an ARP agent should ignore those\n   that it does receive.\n   As a third possibility,\
    \ one can omit the implementation of ARP\n   entirely, choosing instead to build\
    \ address mapping tables in each\n   node from information available to a network\
    \ administrator.  Such a\n   technique is implementation dependent and outside\
    \ the scope of this\n   memo.  It may be helpful in prototype networks without\
    \ multicast\n   where no ARP agent is yet implemented.  In this case, nodes are\
    \ not\n   required to respond to address resolution requests, but must accept\n\
    \   any they may receive.\n"
- title: ARP Example
  contents:
  - "ARP Example\n   Assume a HIPPI-SC switch is installed with two nodes, X and Y,\n\
    \   connected.  Each node has a unique Switch Address.  Both nodes have\n   access\
    \ to the host data base (e.g. /etc/hosts) in which the network\n   administrator\
    \ has configured the network and given the two nodes IP\n   addresses.  There\
    \ is an ARP agent connected to a switch port that is\n   mapped to the address\
    \ FE0 (hex).  The ARP agent contains no mappings\n   of any IP, IEEE or Switch\
    \ addresses.  Both nodes know their own ULAs\n   and Switch Addresses.  They want\
    \ to talk to each other; each knows\n   the other's IP address (from the host\
    \ data base) but neither knows\n   the other's ULA or Switch Address.  Node X\
    \ starts:\n   1.  Node X connects to FE0 and sends a piggyback ARP Request\n \
    \      requesting addresses for Y:\n           HIPPI-LE Message_Type is 1, AR_Request\n\
    \           HIPPI-LE Destination_Switch_Address = 0\n           HIPPI-LE Source_Switch_Address\
    \ = X's Switch Address\n           HIPPI-LE Destination_IEEE_Address = 0\n   \
    \        HIPPI-LE Source_IEEE_Address = X's ULA\n           ARP ar$op = 1 (request)\n\
    \           ARP ar$sha = X's ULA\n           ARP ar$spa = X's IP Address\n   \
    \        ARP ar$tha = 0\n           ARP ar$tpa = Y's IP Address\n   2.  The ARP\
    \ agent receives the ARP request and adds an entry for X to\n       its address\
    \ mapping table.  It does not know about Y, so it does\n       not generate a\
    \ reply.\n   3.  Node X waits for a reply.  It may set a timer to retransmit the\n\
    \       request periodically, but its requests will be ignored until node\n  \
    \     Y sends an ARP request.\n   4.  Node Y connects to FE0 and sends an ARP\
    \ request requesting\n       addresses for X:\n           HIPPI-LE Message_Type\
    \ is 1, AR_Request\n           HIPPI-LE Destination_Switch_Address = 0\n     \
    \      HIPPI-LE Source_Switch_Address = Y's Switch Address\n           HIPPI-LE\
    \ Destination_IEEE_Address = 0\n           HIPPI-LE Source_IEEE_Address = Y's\
    \ ULA\n           ARP ar$op = 1 (request)\n           ARP ar$sha = Y's ULA\n \
    \          ARP ar$spa = Y's IP Address\n           ARP ar$tha = 0\n          \
    \ ARP ar$tpa = X's IP Address\n   5.  The ARP agent receives Y's request and adds\
    \ an entry for Y to its\n       address mapping table.  It knows about the target\
    \ node, X, so it\n       connects to Y (using the Source_Switch_Address given\
    \ in the\n       request) and sends an ARP Reply:\n           HIPPI-LE Message_Type\
    \ is 2, AR_Reply\n           HIPPI-LE Destination_Switch_Address = Y's Switch\
    \ Address\n           HIPPI-LE Source_Switch_Address = X's Switch Address\n  \
    \         HIPPI-LE Destination_IEEE_Address = Y's ULA\n           HIPPI-LE Source_IEEE_Address\
    \ = X's ULA\n           ARP ar$op = 2 (reply)\n           ARP ar$sha = X's ULA\n\
    \           ARP ar$spa = X's IP Address\n           ARP ar$tha = Y's ULA\n   \
    \        ARP ar$tpa = Y's IP Address\n   6.  Node Y receives the ARP reply and\
    \ builds its address mapping\n       table entry for Node X.\n   7.  Node Y connects\
    \ to node X and transmits an IP packet with the\n       following information\
    \ in the HIPPI-LE header:\n           HIPPI-LE Message_Type is 0, AR_Data\n  \
    \         HIPPI-LE Destination_Switch_Address = X's Switch Address\n         \
    \  HIPPI-LE Source_Switch_Address = Y's Switch Address\n           HIPPI-LE Destination_IEEE_Address\
    \ = X's ULA\n           HIPPI-LE Source_IEEE_Address = Y's ULA\n   8.  Node X\
    \ receives the IP packet.  Since the ARP agent now knows\n       about node Y,\
    \ node X can retransmit its ARP request (repeating\n       step 1) and receive\
    \ an ARP reply:\n           HIPPI-LE Message_Type is 2, AR_Reply\n           HIPPI-LE\
    \ Destination_Switch_Address = X's Switch Address\n           HIPPI-LE Source_Switch_Address\
    \ = Y's Switch Address\n           HIPPI-LE Destination_IEEE_Address = X's ULA\n\
    \           HIPPI-LE Source_IEEE_Address = Y's ULA\n           ARP ar$op = 2 (reply)\n\
    \           ARP ar$sha = Y's ULA\n           ARP ar$spa = Y's IP Address\n   \
    \        ARP ar$tha = X's ULA\n           ARP ar$tpa = X's IP Address\n   Address\
    \ resolution is now complete for both nodes.\n   If there had been a multicast\
    \ facility instead of the ARP agent in\n   the configuration, the target nodes\
    \ themselves would have received\n   the requests and responded to them in the\
    \ same way the ARP agent did.\n"
- title: Discovery of One's Own Switch Address
  contents:
  - "Discovery of One's Own Switch Address\n   The ARP example above assumed that\
    \ each node had prior knowledge of\n   its own switch address.  This may be manually\
    \ configured, by means\n   that are outside the scope of this memo, when each\
    \ node is connected\n   to the switch.  If a multicast capability exists, the\
    \ node may\n   discover its own address automatically when it starts up, using\
    \ a\n   protocol defined in HIPPI-LE.\n   In the self-address discovery protocol,\
    \ a node connects to a\n   multicast address and sends a HIPPI-LE message containing\
    \ its own\n   ULA.  It receives a multicast copy of its own message, and learns\
    \ its\n   own switch address from the destination address field of the received\n\
    \   I-field.\n   HIPPI-LE self address resolution uses the same HIPPI-LE message\n\
    \   format described in \"ARP and RARP Message Format,\" above, with the\n   AR_S_Request\
    \ and AR_S_Response message type codes and no piggybacked\n   ULP data.  The HIPPI-LE\
    \ header contents for the request are:\n       Message_Type is 3, AR_S_Request\n\
    \       Destination_Address_Type = 0 (undefined)\n       Destination_Switch_Address\
    \ = 0 (unknown)\n       Source_Address_Type = 0 (undefined)\n       Source_Switch_Address\
    \ = 0 (unknown)\n       Destination_IEEE_Address = my ULA\n       Source_IEEE_Address\
    \ = my ULA\n   There is no D2 data; the packet contains only the HIPPI-FP header\
    \ and\n   D1_Area containing the HIPPI-LE header.\n   The node that wants to discover\
    \ its address connects to the multicast\n   address for this purpose (hex FE0\
    \ in HIPPI-SC) and transmits the\n   request packet.  What happens next depends\
    \ on the particular network:\n   With multicast:\n      The node receives its\
    \ own request and can learn its own switch\n      address from the I-field it\
    \ receives.  This is the only time a\n      node should use an address from a\
    \ received I-field.\n   With an ARP agent:\n      The node may receive an AR_S_Response\
    \ message with its own ULA in\n      the Destination_IEEE_Address field and its\
    \ own switch address in\n      the Destination_Switch_Address field.  This address\
    \ may be\n      different from the address contained in the I-field, and should\
    \ be\n      used instead.\n   The ARP agent response alternative requires that\
    \ the agent have prior\n   knowledge of the node's location and ULA through some\
    \ process not\n   specified by this memo.  The node may receive both its request\
    \ and\n   the agent's response if both an ARP agent and multicast are active.\n\
    \   In this case the address it learns from the I-field is later replaced\n  \
    \ by the address given by the ARP agent in the response.  Agents may\n   assign\
    \ new addresses to nodes and inform them by sending unsolicited\n   AR_S_Response\
    \ messages.  Any node whose switch address is updated in\n   this way should invalidate\
    \ the switch addresses it has saved for\n   other nodes, and use ARP to rediscover\
    \ them.\n   If the node reacts correctly to either the multicast request or\n\
    \   agent-generated response, it can discover its address without having\n   to\
    \ know whether or not an ARP agent is active.  The full procedure\n   is:\n  \
    \ 1.  Transmit the AR_S_Request\n   2.  When a connection arrives, accept it and\
    \ save the I-field for\n       later analysis.\n   3.  Receive the message and\
    \ look at the HIPPI-LE header.  If the\n       message is Message Type AR_S_Request,\
    \ analyze the I-field to\n       discover the node's own switch address.  HIPPI-SC\
    \ I-field formats\n       suggest the following:\n          if bit 25 == 1\n \
    \                 Address type is HIPPI-SC logical address.\n                \
    \  if bit 27 == 1\n                          take address from bits 23-12\n  \
    \                else\n                          take address from bits 11-00\n\
    \                  endif\n          else\n                  Address is unusable\
    \ (source route)\n          endif\n       This is a one-time operation.  Once\
    \ the node knows an address for\n       itself, it should not take any new address\
    \ from a received I-\n       field.\n   4.  If a message of type AR_S_Response\
    \ arrives and the\n       Destination_IEEE_Address field contains the node's own\
    \ ULA, take\n       the new switch address from the Destination_Switch_Address\
    \ field\n       and its type from the Destination_Address_Type field.\n   5. \
    \ The node should invalidate its ARP tables when an AR_S_Response\n       changes\
    \ its own switch address, to force retransmission of ARP\n       requests containing\
    \ its new address to all the remote nodes with\n       which it communicates.\n"
- title: Path MTU Discovery
  contents:
  - "Path MTU Discovery\n   RFC 1191 [13] describes the method of determining MTU\
    \ restrictions on\n   an arbitrary network path between two hosts.  HIPPI nodes\
    \ may use\n   this method without modification to discover restrictions on paths\n\
    \   between HIPPI-SC LANs and other networks.  Gateways between HIPPI-SC\n   LANs\
    \ and other types of networks should implement RFC 1191.\n"
- title: Channel Data Rate Discovery
  contents:
  - "Channel Data Rate Discovery\n   HIPPI exists in two data rate options (800 megabit/second\
    \ and 1600\n   megabit/second).  The higher data rate is achieved by making the\n\
    \   HIPPI 64 bits parallel instead of 32, using an extra cable containing\n  \
    \ 32 additional data bits and four parity bits.  HIPPI-SC switches can\n   be\
    \ designed to attach to both.  Source and Destination HIPPI\n   implementations\
    \ can be designed to operate at either rate, selectable\n   at the time a connection\
    \ is established.  The \"W\" bit (bit 28) of the\n   I-field controls the width\
    \ of the connection through the switch.\n   Sources with both cables A and B attached\
    \ to the switch may set the\n   \"W\" bit to request a 1600 megabit/second connection.\
    \  If the\n   requested destination also has both cables attached, the switch\
    \ can\n   connect Source to Destination on both cables.  If the requested\n  \
    \ Destination has only Cable A, the switch rejects the request.\n   Sixty-four\
    \ bit Sources can connect to 32 bit Destinations by\n   requesting with the \"\
    W\" bit clear and not using Cable B.  Sixty-four\n   bit Destinations must examine\
    \ the \"W\" bit in the received I-field and\n   use or ignore Cable B accordingly.\
    \  Note that both INTERCONNECT\n   signals stay active while a 64 bit HIPPI is\
    \ used in 32 bit mode.\n   The following table summarizes the possible combinations,\
    \ the\n   switch's action for each, and the width of the resulting connection.\n\
    \                                     Destination\n                      +-------------------+-------------------+\n\
    \                      |        32         |        64         |\n           +----+-----+-------------------+-------------------+\n\
    \           |    | W=0 |     Accept 32     |     Accept 32     |\n           |\
    \ 32 +-----+-------------------+-------------------+\n           |    | W=1 |\
    \        N/A        |        N/A        |\n   Source  +----+-----+-------------------+-------------------+\n\
    \           |    | W=0 |     Accept 32     |     Accept 32     |\n           |\
    \ 64 +-----+-------------------+-------------------+\n           |    | W=1 |\
    \      Reject       |     Accept 64     |\n           +----+-----+-------------------+-------------------+\n\
    \                      HIPPI Connection Combinations\n   If the path between a\
    \ 64 bit Source and a 64 bit Destination includes\n   more than one switch, and\
    \ the route between switches uses a link that\n   is only 32 bits wide, the switch\
    \ rejects 64 bit connection requests\n   as if the Destination did not have 64\
    \ bit capability.\n   In a mixed LAN of 32 bit and 64 bit HIPPIs, a 64 bit Source\
    \ needs to\n   know the data rates available at each Destination and on the path\
    \ to\n   it.  This can be known a priori by manual configuration, or it can be\n\
    \   discovered dynamically.  The only reliable method of discovery is\n   simply\
    \ to attempt a 64 bit connection with Camp-on.  As long as 64\n   bit connections\
    \ succeed, the Source knows the Destination and path\n   are double width.  If\
    \ a 64 bit connection is rejected, the Source\n   tries to connect for 32 bits.\
    \  If the 32 bit connection succeeds, the\n   Source assumes that the Destination\
    \ or path is not capable of double\n   width operation, and uses only 32 bit requests\
    \ after that.  If the 32\n   bit request is rejected, the Source assumes that\
    \ the Destination or\n   path is down and makes no determination of its capability.\n\
    \   The Double_Wide bit in the HIPPI-LE header, if nonzero, gives the\n   node\
    \ that receives it a hint that the 64 bit connection attempt may\n   be worthwhile\
    \ when sending on the return path.\n   Note that Camp-on must be used at least\
    \ in the 64 bit attempt,\n   because it removes some ambiguity from the meaning\
    \ of rejects.  If\n   the request is made with the \"W\" bit and no Camp-on, a\
    \ reject could\n   mean either that the Destination has no Cable B or that it\
    \ is simply\n   busy, and no conclusion can be drawn as to its status for 64 bit\n\
    \   connections.\n"
- title: Performance
  contents:
  - "Performance\n   The HIPPI connection rules are designed to permit best utilization\
    \ of\n   the available HIPPI throughput under the constraint that each\n   Destination\
    \ must be made available frequently to receive packets from\n   different Sources.\
    \  This discipline asks both Sources and\n   Destinations to minimize connection\
    \ setup overhead to deliver high\n   performance.  Low connection setup times\
    \ are easily achieved by\n   hardware implementations, but overhead may be too\
    \ high if software is\n   required to execute between the initial request of a\
    \ connection and\n   the beginning of data transfer.  Hardware implementations\
    \ in which\n   connection setup and data transfer proceed from a single software\n\
    \   action are very desirable.\n   HIPPI connections are controlled by HIPPI Sources;\
    \ a Destination,\n   being unable to initiate a disconnect without the possibility\
    \ of data\n   loss, is a slave to the Source once it has accepted a connection.\n\
    \   Optimizations of connection strategy are therefore the province of\n   the\
    \ HIPPI Source, and several optimizations are permitted.\n   If the rate of available\
    \ message traffic is less than the available\n   HIPPI throughput and Destinations\
    \ are seldom busy when a connection\n   is requested, connection optimizations\
    \ do not pay off and the\n   simplest strategy of waiting indefinitely for each\
    \ connection to be\n   made and sending messages strictly in the order queued\
    \ cannot be\n   improved upon.  However if some nodes are slow, or network\n \
    \  applications can send or receive messages at a higher aggregate rate\n   than\
    \ the available HIPPI bandwidth, Sources may frequently encounter\n   a busy Destination.\
    \  In these cases, certain host output queuing\n   strategies may enhance channel\
    \ utilization.  Sources may maintain\n   separate output queues for different\
    \ HIPPI Destinations, and abandon\n   one Destination in favor of another if a\
    \ connection attempt without\n   Camp-on is rejected or a connection request with\
    \ Camp-on is not\n   accepted within a predetermined interval.  Such a strategy\
    \ results in\n   aborted connection sequences (defined in HIPPI-PH:  REQUEST is\n\
    \   deasserted before any data is sent).  Destinations must treat these\n   as\
    \ normal events, perhaps counting them but otherwise ignoring them.\n   Two components\
    \ of connection setup time are out of the control of\n   both Source and Destination.\
    \  One is the time required for the switch\n   to connect Source to Destination,\
    \ currently less than four\n   microseconds in the largest commercially available\
    \ (32 port) switch.\n   The second component is the round trip propagation time\
    \ of the\n   REQUEST and CONNECT signals, negligible on a standard 25 meter copper\n\
    \   HIPPI cable, but contributing a total of about 10 microseconds per\n   kilometer\
    \ on fiber optic links.  HIPPI-SC LANs spanning more than a\n   few kilometers\
    \ will have reduced throughput.  Limited span networks\n   with buffered gateways\
    \ or bridges between them may perform better\n   than long serial HIPPI links.\n\
    \   A Source is required to drop its connection after the transmission of\n  \
    \ 68 HIPPI bursts.  This number was chosen to allow the transmission of\n   one\
    \ maximum sized packet or a reasonable number of smaller sized\n   packets.  The\
    \ following table lists some possibilities, with\n   calculated maximum burst\
    \ and throughput rates in millions (10**6) of\n   bytes per second:\n        \
    \             Maximum HIPPI Throughput Rates\n        Number  Number  Hold  Burst\
    \  ------Max throughput MB/sec-------\n   User   of      of    Time  Rate    Connection\
    \ Setup Overhead (usec)\n   Data Packets Bursts (usec) MB/sec  10    30    60\
    \    90   120   150\n   ---- ------- ------ ------ ------ ----  ----  ----  ----\
    \  ----  ----\n   63K     1      64    654    98.7  97.2  94.4  90.4  86.8  83.4\
    \  80.3\n   32K     2      66    665    98.6  97.1  94.3  90.4  86.8  83.5  80.4\n\
    \   16K     4      68    667    98.3  96.8  94.1  90.2  86.6  83.3  80.2\n   \
    \ 8K     7      63    587    97.8  96.1  93.0  88.7  84.8  81.2  77.8\n    4K\
    \    13      65    551    96.7  95.0  91.7  87.2  83.1  79.4  76.0\n    2K   \
    \ 22      66    476    94.6  92.7  89.0  84.0  79.6  75.6  72.0\n    1K    34\
    \      68    384    90.8  88.5  84.2  78.5  73.5  75.8  65.3\n   These calculations\
    \ are based 259 40 ns clock periods to transmit a\n   full burst and 23 clock\
    \ periods for a short burst.  (HIPPI-PH\n   specifies three clock periods of overhead\
    \ per burst.) A packet of \"n\"\n   kilobytes of user data consists of \"n\" full\
    \ bursts and one short\n   burst equal in length to the number of bytes in the\
    \ HIPPI, LLC, IP\n   and TCP headers.  \"Hold Time\" is the minimum connection\
    \ duration\n   needed to send the packets.  \"Burst Rate\" is the effective transfer\n\
    \   rate for the duration of the connection, not counting connection\n   switching\
    \ time.  Throughput rates are in megabytes/second, accounting\n   for connection\
    \ switching times of 10, 30, 60, 90, 120 and 150\n   microseconds.  These calculations\
    \ ignore any limit on the rate at\n   which a Source or Destination can process\
    \ small packets; such limits\n   may further reduce the available throughput if\
    \ small packets are\n   used.\n"
- title: Sharing the Switch
  contents:
  - "Sharing the Switch\n   Network interconnection is only one potential application\
    \ of HIPPI\n   and HIPPI-SC switches.  While network applications need very frequent\n\
    \   transient connections, other applications may favor longer term or\n   even\
    \ permanent connections between Source and Destination.  Since the\n   switch\
    \ can serve each Source or Destination with hardware paths\n   totally separate\
    \ from every other, it is quite feasible to use the\n   same switch to support\
    \ LAN interconnects and computer/peripheral\n   applications simultaneously.\n\
    \   Switch sharing is no problem when unlike applications do not share a\n   HIPPI\
    \ cable on any path.  However if a host must use a single input\n   or output\
    \ cable for network as well as other kinds of traffic, or if\n   a link between\
    \ switches must be shared, care must be taken to ensure\n   that all applications\
    \ are compatible with the connection discipline\n   described in this memo.  Applications\
    \ that hold connections too long\n   on links shared with network traffic may\
    \ cause loss of network\n   packets or serious degradation of network service.\n"
- title: Appendix A -- HIPPI Basics
  contents:
  - "Appendix A -- HIPPI Basics\n   This section is included as an aid to readers\
    \ who are not completely\n   familiar with the HIPPI standards.\n   HIPPI-PH describes\
    \ a parallel copper data channel between a Source\n   and a Destination.  HIPPI\
    \ transmits data in one direction only, so\n   that two sets are required for\
    \ bidirectional flow.  The following\n   figure shows a simple point-to-point\
    \ link between two computer\n   systems:\n   +----------+                    \
    \                    +----------+\n   |          |                           \
    \             |          |\n   |          +--------+                      +--------+\
    \          |\n   |          | HIPPI  |        Cable         | HIPPI  |       \
    \   |\n   |          |        +--------------------->|        |          |\n \
    \  |          | Source |                      | Dest.  |          |\n   |  System\
    \  +--------+                      +--------+  System  |\n   |    X     +--------+\
    \                      +--------+    Y     |\n   |          | HIPPI  |       \
    \ Cable         | HIPPI  |          |\n   |          |        |<---------------------+\
    \        |          |\n   |          | Dest.  |                      | Source\
    \ |          |\n   |          +--------+                      +--------+     \
    \     |\n   |          |                                        |          |\n\
    \   +----------+                                        +----------+\n       \
    \               A Simple HIPPI Duplex Link\n   Parallel copper cables may be up\
    \ to 25 meters in length.\n   In this document, all HIPPI connections are assumed\
    \ to be paired\n   HIPPI channels.\n   HIPPI-PH has a single optional feature:\
    \ it can use a single cable in\n   each direction for a 32 bit parallel channel\
    \ with a maximum data rate\n   of 800 megabit/second, or two cables for 64 bits\
    \ and 1600\n   megabit/second.  Cable A carries bits 0-31 and is used in both\
    \ modes;\n   Cable B carries bits 32-63 and is use only with the 1600\n   megabit/second\
    \ data rate option.\n   HIPPI Signal Hierarchy\n      HIPPI has the following\
    \ hardware signals:\n      Source to Destination\n         INTERCONNECT A\n  \
    \       INTERCONNECT B (64 bit only)\n         CLOCK (25 MHz)\n         REQUEST\n\
    \         PACKET\n         BURST\n         DATA (32 or 64 signals)\n         PARITY\
    \ (4 or 8 signals)\n      Destination to Source\n         INTERCONNECT A\n   \
    \      INTERCONNECT B (64 bit only)\n         CONNECT\n         READY\n      The\
    \ INTERCONNECT lines carry DC voltages that indicate that the\n      cable is\
    \ connected and that the remote interface has power.\n      INTERCONNECT is not\
    \ used for signaling.\n      The CLOCK signal is a continuous 25 MHz (40 ns period)\
    \ square\n      wave.  All Source-to-Destination signals are synchronized to the\n\
    \      clock.\n      The REQUEST and CONNECT lines are used to establish logical\n\
    \      connections.  A connection is always initiated by a Source as it\n    \
    \  asserts REQUEST.  At the same time it puts 32 bits of data on DATA\n      lines\
    \ 0-31, called the I-field.  The Destination samples the DATA\n      lines and\
    \ can complete a connection by asserting CONNECT.  Packets\n      can be transmitted\
    \ only while both REQUEST and CONNECT are\n      asserted.\n      A Destination\
    \ can also reject a connection by asserting CONNECT\n      for only a short interval\
    \ between 4 and 16 HIPPI clock periods\n      (160-640 nanoseconds).  The Source\
    \ knows a connection has been\n      accepted when CONNECT is asserted for more\
    \ than 16 clocks or it\n      receives a READY pulse.\n      Either Source or\
    \ Destination can terminate a connection by\n      deasserting REQUEST or CONNECT,\
    \ respectively.  Normally\n      connections are terminated by the Source after\
    \ its last Packet has\n      been sent.  A Destination cannot terminate a connection\
    \ without\n      potential loss of data.\n                +------+-------------------------+------+\n\
    \                | Idle |        Connected        | Idle | . . .\n           \
    \     +------+-------------------------+------+\n                     /      \
    \                     \\\n                    /                             \\\
    \n                   /                               \\\n                  / \
    \                                \\\n                 /                      \
    \             \\\n                +-------+ +-------+ +-------+ +-------+\n  \
    \              |I-field| |Packet | |Packet | |Packet |\n                +-------+\
    \ +-------+ +-------+ +-------+\n                         /         \\\n     \
    \                   /           \\\n                       /             \\\n\
    \                      /               \\\n                     /            \
    \     \\\n                    /                   \\\n                   /   \
    \                  \\\n                  +-----+ +-----+   +-----+\n         \
    \         |Burst| |Burst|...|Burst|\n                  +-----+ +-----+   +-----+\n\
    \                   HIPPI Logical Framing Hierarchy\n      The Source asserts\
    \ PACKET for the duration of a Packet\n      transmission, deasserting it to indicate\
    \ the end of a Packet.  A\n      sequence of Bursts comprise a Packet.  To send\
    \ a burst, a Source\n      asserts the BURST signal for 256 clock periods, during\
    \ which it\n      places 256 words of data on the DATA lines.  The first or last\n\
    \      Burst of a Packet may be less than 256 clock periods, allowing the\n  \
    \    transmission of any integral number of 32 or 64 bit words in a\n      Packet.\n\
    \      The READY signal is a pulse four or more clock periods long.  Each\n  \
    \    pulse signals the Source that the Destination can receive one\n      Burst.\
    \  The Destination need not wait for a burst before sending\n      another READY\
    \ if it has burst buffers available; up to 63\n      unanswered READYs may be\
    \ sent, allowing HIPPI to operate at full\n      speed over distances of many\
    \ kilometers.  If a Source must wait\n      for flow control, it inserts idle\
    \ periods between Bursts.\n                +------------------------------------------------+\n\
    \      REQUEST---+                                                +----\n    \
    \                  +--------------------------------------------+\n      CONNECT---------+\
    \                                            +--\n                         +---------------------------------------+\n\
    \      PACKET-------------+                                       +----\n    \
    \                   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+\n      READY------------+\
    \ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +--\n                         +-------+\
    \ +-------+ +-------+ +-----+\n      BURST--------------+       +-+       +-+\
    \       +-+     +--------\n      DATA------I-field----DATA------DATA------DATA-----DATA----------\n\
    \                        HIPPI Signal Timing Diagram\n   Serial HIPPI\n      There\
    \ is no ANSI standard for HIPPI other than the parallel copper\n      cable version.\
    \  However an implementors' agreement exists,\n      specifying a serial protocol\
    \ to extend HIPPI signals on optical\n      fiber or coaxial copper cable.  Serial\
    \ links may be used\n      interchangeably with parallel links to overcome HIPPI\
    \ distance\n      limitations; they are transparent to the Source and Destination,\n\
    \      except for the possibility of longer propagation delays.\n   I-Field and\
    \ Switch Control\n      The REQUEST, CONNECT and I-field features of HIPPI-PH\
    \ were\n      designed for the control of switches as described in HIPPI-SC. \
    \ A\n      switch is a hub with a number of input and output HIPPI ports.\n  \
    \    HIPPI Sources are cabled to switch input ports, and switch output\n     \
    \ ports are cabled to HIPPI Destinations.  When a HIPPI Source\n      requests\
    \ a connection, the switch interprets the I-field to select\n      an output port\
    \ and electrically connects the HIPPI Source to the\n      HIPPI Destination on\
    \ that port.  Once connected, the switch does\n      not interact with the HIPPIs\
    \ in any way until REQUEST or CONNECT\n      is deasserted, at which time it breaks\
    \ the physical connection and\n      deasserts its output signals to both sides.\
    \  Some existing switch\n      implementations can switch connections in less\
    \ than one\n      microsecond.  There is the potential for as many simultaneous\n\
    \      connections, each transferring data at HIPPI speeds, as there are\n   \
    \   input or output ports on the switch.  A switch offers much greater\n     \
    \ total throughput capacity than broadcast or ring media.\n      31    28  26\
    \    23                      11                     0\n      +-+---+-+-+---+-+-----------------------+-----------------------+\n\
    \      |L|   |W|D|PS |C|    Source Address     |  Destination Address  |\n   \
    \   +-+---+-+-+---+-+-----------------------+-----------------------+\n      \
    \            HIPPI-SC I-field Format (Logical Address Mode)\n           L  = Locally\
    \ defined (1 => entire I-field is locally defined)\n           W  = Width (1 =>\
    \ 64 bit connection)\n           D  = Direction (1 => swap Source and Destination\
    \ Address)\n           PS = Path Selection (01 => Logical Address Mode)\n    \
    \       C  = Camp-on (1 => wait until Destination is free)\n      HIPPI-SC defines\
    \ I-field formats for two different addressing\n      modes.  The first, called\
    \ Source Routing, encodes a string of port\n      numbers in the lower 24 bits.\
    \  This string specifies a route over\n      a number of switches.  A Destination's\
    \ address may differ from one\n      Source to another if multiple switches are\
    \ used.\n      The second format, called Logical Address Mode, defines two 12\
    \ bit\n      fields, Source Address and Destination Address.  A Destination's\n\
    \      12 bit Switch Address is the same for all Sources.  Switches\n      commonly\
    \ have address lookup tables to map 12 bit logical\n      addresses to physical\
    \ ports.  This mode is used for networking.\n      Control fields in the I-field\
    \ are:\n      L  The \"Locally Defined\" bit, when set, indicates that the I-field\n\
    \         is not in the standard format.  The meaning of bits 30-0 are\n     \
    \    locally defined.\n      W  The Width bit, when set, requests a 64 bit connection\
    \ through\n         the switch.  It is meaningless if Cable B is not installed\
    \ at\n         the Source.  If W is set and either the Source or the requested\n\
    \         Destination has no Cable B to the switch, the switch rejects\n     \
    \    the connection.  Otherwise the switch connects both Cable A and\n       \
    \  Cable B if W is set, or Cable A only if W is clear.  This\n         feature\
    \ is useful if both Source and Destination\n         implementations can selectively\
    \ disable or enable Cable B on\n         each new connection.\n      D  The Direction\
    \ bit, when set, reverses the sense of the Source\n         Address and Destination\
    \ Address fields.  In other words, D=1\n         means that the Source Address\
    \ is in bits 0-11 and the\n         Destination Address is in bits 12-23.  This\
    \ bit was defined to\n         give devices a simple way to route return messages.\
    \  It is not\n         useful for LAN operations.\n      PS The Path Selection\
    \ field determines whether the I-field\n         contains Source Route or Address\
    \ information, and in Logical\n         Address mode, whether the switch may select\
    \ from multiple\n         possible routes to the destination.  The value \"01\"\
    \ selects\n         Logical Address mode and fixed routes.\n      C  The Camp-on\
    \ bit requests the switch not to reject the\n         connection if the selected\
    \ Destination is busy (connected to\n         another Source) but wait and make\
    \ the connection when the\n         Destination is free.\n"
- title: Appendix B -- How to Build a Practical HIPPI LAN
  contents:
  - "Appendix B -- How to Build a Practical HIPPI LAN\n   \"IP and ARP on HIPPI\"\
    \ describes the network host's view of a HIPPI\n   local area network without\
    \ providing much information on the\n   architecture of the network itself.  Here\
    \ we describe a network\n   constructed from available HIPPI components, having\
    \ the following\n   characteristics:\n   1.  A tree structure with a central HIPPI-SC\
    \ compliant hub and\n       optional satellite switches\n   2.  Each satellite\
    \ is connected to the hub by just one bidirectional\n       HIPPI link.\n   3.\
    \  Serial HIPPI or transparent fiber optic HIPPI extender devices\n       may\
    \ be used in any link.\n   4.  Some satellites may be a particular switch product\
    \ which is not\n       HIPPI-SC compliant.\n   5.  Host systems are attached either\
    \ directly to the hub or to\n       satellites, by single bidirectional links\
    \ in which both HIPPI\n       cables go to the same numbered switch port.\n  \
    \ 6.  A server system is attached to the hub.  It provides multicast\n       and\
    \ ARP services.\n   7.  All options of the Internet Draft are supported.  Hosts\
    \ may use\n       any form of address resolution: manual configuration, ARP with\n\
    \       multicast, or ARP with a server.\n   Switch Address Management\n     \
    \ Switch addresses use a flat address space.  The 12-bit address is\n      subdivided\
    \ into 6 bits of switch number and 6 bits of port number.\n      11          \
    \             5                     0\n      +-----------------------+-----------------------+\n\
    \      |     Switch Number     |      Port Number      |\n      +-----------------------+-----------------------+\n\
    \                 Logical Address Construction\n      Switches may be numbered\
    \ arbitrarily.  A given host's address\n      consists of the number of the switch\
    \ it is directly attached to\n      and the physical port number on that switch\
    \ to which its input\n      channel is attached.\n      In the singly-connected\
    \ tree structure, there is exactly one path\n      between any pair of hosts.\
    \  Since each satellite must be connected\n      directly to the hub, the maximum\
    \ length of this path is three\n      hops, and the minimum length is one.  Each\
    \ HIPPI-SC compliant\n      switch is programmed to map each of the host switch\
    \ addresses to\n      the appropriate output port: either the port to which the\
    \ host is\n      directly attached or a port that is linked to another switch\
    \ in\n      the path to it.\n   Special Treatment of Nonstandard Switches\n  \
    \    There is one commercially available switch that was designed\n      before\
    \ the drafting of HIPPI-SC and is not fully compliant.  It is\n      in common\
    \ use, so it is worth making some special provisions to\n      allow its use in\
    \ a HIPPI LAN.  This switch supports only the\n      Source Route mode of addressing\
    \ with a four bit right shift that\n      can be disabled by a hardware switch\
    \ on each input port.\n      Addresses cannot be mapped.  The switch does not\
    \ support the \"W,\"\n      \"D,\" or \"PS\" fields of the I-field; it ignores\
    \ their contents.\n      Use of this switch as a satellite will require a slight\
    \ deviation\n      from normal I-field usage by the hosts that are directly attached\n\
    \      to it.  Hosts attached to standard switches are not affected.\n      For\
    \ a destination connected to a non compliant satellite, the\n      satellite uses\
    \ only the least significant four bits of the I-field\n      as the address. \
    \ Since the address contains the destination's\n      physical port number in\
    \ the least significant bits, its port will\n      be selected.  Nonstandard switches\
    \ should be set to disable I-\n      field shifting at the input from the hub,\
    \ so that the destination\n      host will see its correct switch address in the\
    \ I-field when\n      performing self-address discovery.  I-field shifting must\
    \ be\n      enabled on the satellite for each input port to which a host is\n\
    \      attached.\n      Hosts attached to nonstandard satellites must deviate\
    \ from the\n      normal I-field usage when connecting to hosts on another switch.\n\
    \      It is suggested that all host implementations have this capability\n  \
    \    as long as the nonstandard switches remain in use.  The host must\n     \
    \ know, by some manual configuration method, that it is connected to\n      a\
    \ nonstandard switch, and it must have its \"link port\" number;\n      that is,\
    \ the number of the port on the satellite that is connected\n      to the hub.\n\
    \      The normal I-field format for a 32-bit connection, per the\n      Internet\
    \ Draft, is this:\n      31        26    23                      11          \
    \           0\n      +---------+---+-+-----------------------+-----------------------+\n\
    \      |0 0 0 0 0|x 1|C|        Unused         |  Destination Address  |\n   \
    \   +---------+---+-+-----------------------+-----------------------+\n      The\
    \ special I-field format is:\n      31        26  24                15       \
    \              4 3     0\n      +---------+---+-+---------------+-----------------------+-------+\n\
    \      |0 0 0 0 0|x 1|C|    Unused     |  Destination Address  | Link  |\n   \
    \   +---------+---+-+---------------+-----------------------+-------+\n      This\
    \ I-field is altered by shifting the lower 24 bits left by four\n      and adding\
    \ the link port number.  Camp-on is optional, and the PS\n      field is set to\
    \ 01 or 11 (the host's option) as if the switch\n      supported logical address\
    \ mode.  All other I-field bits are set to\n      zero.  When the host requests\
    \ a connection with this I-field, the\n      switch selects a connection through\
    \ the link port to the hub, and\n      shifts the lower 24 bits of the I-field\
    \ right by four bits.  The\n      link port number is discarded and the I-field\
    \ passed through to\n      the hub is a proper HIPPI-SC I-field selecting logical\
    \ address\n      mode.\n      A host on a nonstandard satellite may use the special\
    \ I-field\n      format for all connection requests.  If connecting to another\
    \ host\n      on the same satellite, this will cause the connection to take an\n\
    \      unnecessarily long path through the hub and back.  If an\n      optimization\
    \ is desired, the host can be given additional\n      information to allow it\
    \ to use the standard I-field format when\n      connecting to another host on\
    \ the same switch.  This information\n      could consist of a list of the other\
    \ hosts on the same switch, or\n      the details of address formation, along\
    \ with the switch number of\n      the local satellite, which would allow the\
    \ host to analyze the\n      switch address to determine whether or not the destination\
    \ is on\n      the local switch.  This optimization is fairly complicated and\
    \ may\n      not always be worthwhile.\n   Server Algorithm\n      Different host\
    \ implementations may take any of three approaches to\n      address resolution:\n\
    \      1.  Manual configuration, no ARP\n      2.  Send ARP requests but expect\
    \ a server to reply on its behalf\n      3.  Send ARP requests and expect to receive\
    \ them via multicast.\n      If the network includes a server that is capable\
    \ of both multicast\n      and ARP service, and that knows the services expected\
    \ by each\n      host, all can coexist on the same net.\n      The HIPPI-SC compliant\
    \ switches are programmed to route the\n      HIPPI-SC \"broadcast\" address FE0\
    \ (hex) to the server's port.  It\n      is initially given the following information\
    \ by a human network\n      administrator:\n      1.  The list of all addresses\
    \ eligible to be used by network hosts\n      2.  The list of addresses that should\
    \ not receive multicast\n          messages (a subset of list 1).  This is also\
    \ the list of all\n          hosts that either do manual configuration or expect\
    \ a server\n          to answer ARP requests.\n      3.  The list of addresses\
    \ of hosts that do manual configuration\n          and do not send ARP requests\
    \ (a subset of list 2) with the IP\n          address corresponding to each one.\n\
    \      The server maintains an address resolution cache that it\n      initializes\
    \ from list 3 (the manually configured hosts).  It will\n      add to its cache\
    \ as other hosts send ARP requests.\n      When the server receives a message\
    \ sent to the broadcast address\n      FE0, it\n      1.  Repeats the message\
    \ to all addresses in list 1 but not in list\n          2\n      2.  If the message\
    \ is a HIPPI-LE AR_Request with a piggybacked ARP\n          Request, update the\
    \ cache with information about the sender.\n      3.  If the message is a HIPPI-LE\
    \ AR_Request with a piggybacked ARP\n          Request, the target system has\
    \ an entry in the cache and the\n          target is in list 2, respond to the\
    \ ARP request.\n      Server Optimizations\n         1.  The server could be given\
    \ a topological map of the hub and\n             satellites from which it could\
    \ construct list 1.\n         2.  If all the hosts in list 2 ignore ARP messages\
    \ as required\n             in the Internet Draft, list 2 may be eliminated and\
    \ the\n             server can respond to all ARP requests (redundant replies\n\
    \             may be sent).\n   Sharing Switch Hardware With Other Devices\n \
    \     Some host channels and peripheral devices that are connected to\n      the\
    \ switches may use protocols other than IP, and not participate\n      in the\
    \ LAN.  Since connections in a switch are independent, these\n      applications\
    \ can share switch hardware with no effect on LAN\n      operation.  To ensure\
    \ success:\n         The server's lists of addresses should not include addresses\n\
    \         for ports that are not used by LAN links or hosts.\n         If non-LAN\
    \ applications use paths between switches, separate\n         links should be\
    \ installed for them so that they do not use the\n         same inter-switch links\
    \ the LAN does.\n"
- title: References
  contents:
  - 'References

    '
- title: '[1]  ANSI X3.183-1991, High-Performance Parallel Interface - Mechanical,'
  contents:
  - "[1]  ANSI X3.183-1991, High-Performance Parallel Interface - Mechanical,\n  \
    \   Electrical and Signalling Protocol Specification (HIPPI-PH).\n"
- title: '[2]  ANSI X3.210-199X, High-Performance Parallel Interface - Framing'
  contents:
  - "[2]  ANSI X3.210-199X, High-Performance Parallel Interface - Framing\n     Protocol\
    \ (HIPPI-FP).\n"
- title: '[3]  ANSI X3.218-199X, High-Performance Parallel Interface -'
  contents:
  - "[3]  ANSI X3.218-199X, High-Performance Parallel Interface -\n     Encapsulation\
    \ of IEEE 802.2 (IEEE Std 802.2) Logical Link Control\n     Protocol Data Units\
    \ (802.2 Link Encapsulation) (HIPPI-LE).\n"
- title: '[4]  ANSI X3.222-199X, High-Performance Parallel Interface - Physical'
  contents:
  - "[4]  ANSI X3.222-199X, High-Performance Parallel Interface - Physical\n     Switch\
    \ Control (HIPPI-SC).\n"
- title: '[5]  Postel, J., "Internet Protocol", RFC 791, USC/Information Sciences'
  contents:
  - "[5]  Postel, J., \"Internet Protocol\", RFC 791, USC/Information Sciences\n \
    \    Institute, September 1981.\n"
- title: '[6]  Postel, J., and Reynolds, J., "A Standard for the Transmission of'
  contents:
  - "[6]  Postel, J., and Reynolds, J., \"A Standard for the Transmission of\n   \
    \  IP Datagrams over IEEE 802 Networks\", RFC 1042, USC/Information\n     Sciences\
    \ Institute, February 1988.\n"
- title: '[7]  IEEE, "IEEE Standards for Local Area Networks: Logical Link'
  contents:
  - "[7]  IEEE, \"IEEE Standards for Local Area Networks: Logical Link\n     Control\"\
    , IEEE, New York, New York, 1985.\n"
- title: '[8]  Reynolds, J.K., and Postel, J., "Assigned Numbers", RFC 1340,'
  contents:
  - "[8]  Reynolds, J.K., and Postel, J., \"Assigned Numbers\", RFC 1340,\n     USC/Information\
    \ Sciences Institute, July 1992.\n"
- title: '[9]  Plummer, D., "An Ethernet Address Resolution Protocol - or -'
  contents:
  - "[9]  Plummer, D., \"An Ethernet Address Resolution Protocol - or -\n     Converting\
    \ Network Protocol Addresses to 48.bit Ethernet Address\n     for Transmission\
    \ on Ethernet Hardware\", RFC 826, MIT, November\n     1982.\n"
- title: '[10] Finlayson, R., Mann, T., Mogul, J., and  Theimer, M., "A Reverse'
  contents:
  - "[10] Finlayson, R., Mann, T., Mogul, J., and  Theimer, M., \"A Reverse\n    \
    \ Address Resolution Protocol\", RFC 903, Stanford University, June\n     1984.\n"
- title: '[11] Katz, D., "A Proposed Standard for the Transmission of IP Datagrams'
  contents:
  - "[11] Katz, D., \"A Proposed Standard for the Transmission of IP Datagrams\n \
    \    over FDDI Networks\", RFC 1188, Merit/NSFNET, October, 1990.\n"
- title: '[12] IEEE, "Draft Standard P802.1A--Overview and Architecture", 1989.'
  contents:
  - '[12] IEEE, "Draft Standard P802.1A--Overview and Architecture", 1989.

    '
- title: '[13] Mogul, J.C., and Deering, S.E., "Path MTU discovery", RFC 1191,'
  contents:
  - "[13] Mogul, J.C., and Deering, S.E., \"Path MTU discovery\", RFC 1191,\n    \
    \ Stanford University, November, 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John K. Renwick\n   Cray Research, Inc.\n   655F Lone\
    \ Oak Drive\n   Eagan, MN 55121\n   Phone: (612) 683-5573\n   Mailing List: (none)\n\
    \   EMail: jkr@CRAY.COM\n   Andy Nicholson\n   Cray Research, Inc.\n   655F Lone\
    \ Oak Drive\n   Eagan, MN 55121\n   Phone: (612) 683-5473\n   Mailing List: (none)\n\
    \   EMail: droid@CRAY.COM\n"
