- contents:
  - '                          The S Hexdump Format

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the S Hexdump Format (SHF), a new, XML-based\n
    \  open format for describing binary data in hexadecimal notation.  SHF\n   provides
    the ability to describe both small and large, simple and\n   complex hexadecimal
    data dumps in an open, modern, transport- and\n   vendor-neutral format.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   In the computing, network, and embedded systems communities,
    several\n   different types of data formats for hexadecimal data are being used.\n
    \  One of the more common formats is known as \"S-records\" (and several\n   derivatives),
    which reportedly originated at the Motorola company.\n   The S Hexdump Format
    is named in its honour.\n   Typical uses of these dump formats include executable
    object code for\n   embedded systems (i.e., \"firmware\"), on-chip flash memories
    and\n   filesystems, FPGA configuration bitstreams, graphics and other\n   application
    resources, routing tables, etc.  Unfortunately, none of\n   the formats used are
    truly open, vendor-neutral, and/or well-defined.\n   Even more problematic is
    the fact that none of these formats are able\n   to represent the large data sizes
    that are getting more and more\n   common.  Data dumps comprised of multiple sub-blocks
    with different\n   Word sizes, and data sizes spanning anywhere from a few Bytes
    of data\n   to much larger than 2^32 bits are not handled.  Also, the checksums\n
    \  included in these formats are too simplistic and for larger data\n   sizes,
    they provide insufficient ability to accurately detect errors.\n   Alternatively,
    the overhead needed for proper error detection is very\n   large.\n   Therefore,
    the S Hexdump format is an effort to provide a modern,\n   XML-based format that
    is not too complex for simple tools and\n   computing environments to implement,
    generate, parse, and use.  Yet\n   the format is able to handle large data sizes
    and complex data\n   structures, and can provide high quality error detection
    by\n   leveraging standardized cryptographic hash functions.\n   One of the simplifications
    introduced in the format is to disallow\n   other number systems such as octal
    or decimal notation, and to allow\n   for Word sizes of even bytes (8-bit groups)
    only.  This is\n   intentional and was done to simplify implementations aimed
    for\n   practical present-day applications.  Formats aimed for esoteric\n   number
    systems or odd Word sizes may be implemented elsewhere.\n   At present, the usage
    of the SHF format may be mainly for Internet\n   transport and file storage on
    development machinery.  A parser for\n   the XML format is presently not easily
    deployed in hardware devices,\n   but the parsing and checksumming of the SHF
    data may be done by a\n   workstation computer, which in turn converts the SHF
    tokens to an\n   ordinary bitstream before the last step (e.g., of a firmware
    upgrade)\n   commences.\n   SHF is a dump format only and shall not be confused
    with similar\n   applications, such as binary configuration formats or patches,
    which\n   are intended to, for example, alter contents of a core memory.  Such\n
    \  applications require the possibility of modifying individual bits or\n   groups
    of bits in the memory of a machine, and is not the intended\n   usage of the mechanism
    described in the present document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [1].\n   The
    key word \"Byte\" is to be interpreted as a group of 8 bits.  The\n   key word
    \"Octet\" is another name for Byte.\n   The key word \"Word\" is to be interpreted
    as a group containing an\n   integral number of Bytes.\n   The key word \"Block\"
    is to be interpreted as an ordered sequence of\n   Words, beginning at a certain
    address, running from lower to higher\n   addresses.  A Block typically represents
    a sequence of Words at a\n   certain address range in the memory of a computer.\n
    \  The key word \"Dump\" is to be interpreted as a sequence of Blocks,\n   which
    may or may not be in a particular order.  A Dump typically\n   represents some
    non-continuous, interesting parts of the memory of a\n   computer, such that the
    Dump as a whole has a certain meaning, for\n   example (but not limited to) a
    complete firmware for an embedded\n   system.\n   The expression \"2^n\" is to
    be interpreted as the value two (2) raised\n   to the n:th power.  For example,
    2^8 equals the value 256.\n"
  title: 2.  Terminology
- contents:
  - "3.  Features and Functionality\n   The SHF-format has the following features:\n
    \  o  Support for arbitrarily wide data Words\n   o  Support for very large data
    Blocks\n   o  Support for an arbitrary number of independent data Blocks\n   o
    \ Data integrity detection against errors provided by the RFC3174\n      specified
    (see [2]) SHA-1 cryptographic signature\n   o  An XML-based format\n   In the
    embedded systems domain, 8- and 16-bit processors are still\n   used in large
    numbers and will continue to be used for any\n   foreseeable future.  Simultaneously,
    more and more systems are using\n   64-bit and even larger Word sizes.\n   SHF
    supports all of these systems by allowing the Word size to be\n   specified.  The
    Word size MUST be an integer number of Bytes and at\n   least one (1) Byte.\n
    \  SHF is able to represent both large and small data Blocks.  The data\n   Block
    MUST contain at least one (1) Word.  Additionally, the data\n   Block MUST NOT
    be larger than (2^64)-1 bits.\n   The SHF Dump MUST contain at least one (1) data
    Block.  The maximum\n   number of Blocks supported is 2^64.  Each data Block in
    the Dump MAY\n   have different Word sizes and start at different addresses.\n
    \  The checksum (or message digest) used to verify the correctness or\n   data
    integrity of each Block is 20 Bytes (160 bits) long.  The digest\n   MUST be calculated
    on the data actually represented by the SHF data\n   Block, NOT the representation,
    i.e., NOT the ASCII-code.  SHA-1 is\n   only able to calculate a digest for a
    data Block no larger than\n   (2^64)-1 bits and this limits the size of each data
    Block in SHF to\n   (2^64)-1 bits.\n"
  title: 3.  Features and Functionality
- contents:
  - "4.  SHF XML Specification\n   The SHF format consists of an XML data structure
    representing a Dump.\n   The Dump consists of a Dump header section and one (1)
    or more Block\n   sections containing data.  Each Block of data is independent
    of any\n   other Block.\n   A short, symbolic example of an SHF Dump is illustrated
    by the\n   following structure:\n   <dump name=\"(Human readable string)\" blocks=\"(64-bit
    value)\">\n     <block name=\"(Human readable string)\" start_address=\"(64-bit\n
    \           value)\" word_size=\"(64-bit value)\" length=\"(64-bit value)\"\n
    \           checksum=\"(20-Byte digest)\">\n        (Data)\n     </block>\n   </dump>\n"
  - contents:
    - "4.1.  Header Section\n   The header section comprises the Dump tag, which includes
      the\n   following attributes:\n   o  name: A compulsory string of arbitrary
      length used by any\n      interested party to identify the specific SHF Dump.\n
      \  o  blocks: An optional 64-bit hexadecimal value representing the\n      number
      of Blocks in the specific SHF Dump.  Whenever available,\n      this value should
      be supplied.  However, there are potential\n      scenarios where the number
      of Blocks cannot be given beforehand.\n      If the value is present, it should
      be verified by implementers; if\n      the value is untrue, the behaviour is
      implementation-defined.\n   After the opening Dump tag, one or more subsections
      of Blocks must\n   follow.  Finally, the complete SHF Dump ends with a closing
      Dump tag.\n"
    title: 4.1.  Header Section
  - contents:
    - "4.2.  Block Subsection\n   The Block subsection contains a Block tag and a
      number of data words.\n   The Block tag includes the following attributes:\n
      \  o  name: A compulsory string of arbitrary length used by any\n      interested
      party to identify the specific Block.\n   o  start_address: A compulsory, 64-bit
      hexadecimal value representing\n      the start address in Bytes for the data
      in the Block.\n   o  word_size: A compulsory 64-bit hexadecimal value representing
      the\n      number of Bytes (the width) of one Word of the data.\n   o  length:
      A compulsory hexadecimal representation of an unsigned\n      64-bit integer
      indicating the number of Words following inside the\n      Block element.  If
      this value turns out to be untrue, the Block\n      MUST be discarded.\n   o
      \ checksum: A compulsory hexadecimal representation of the 20 Byte\n      SHA-1
      digest of the data in the Block.\n   The total size of the data in the Block
      (in bits) is given by the\n   expression (8 * word_size * length).  The expression
      MUST NOT be\n   larger than (2^64)-1.\n   After the opening Block tag, a hexadecimal
      representation of the\n   actual data in the Block follows.  Finally, the Block
      section ends\n   with a closing Block tag.\n"
    title: 4.2.  Block Subsection
  title: 4.  SHF XML Specification
- contents:
  - "5.  SHF Rules and Limits\n   There are several rules and limits in SHF:\n   o
    \ All attribute values representing an actual value and the data\n      MUST be
    in hexadecimal notation.  The only attribute excluded from\n      this rule is
    the name attribute in the Dump and Block tags.  This\n      restriction has been
    imposed for ease of reading the dump: a\n      reader shall not be uncertain about
    whether a figure is in hex\n      notation or not, and can always assume it is
    hexadecimal.\n   o  All attribute values, with the exception of the checksum,
    MAY omit\n      leading zeros.  Conversely, the checksum MUST NOT omit leading\n
    \     zeros.\n   o  The data represented in a Block MUST NOT be larger than (2^64)-1\n
    \     bits.\n   o  The size of a Word MUST NOT be larger than (2^64)-1 bits.  This\n
    \     implies that a Block with a Word defined to the maximum width\n      cannot
    contain more than one Word.  An SHF consumer shall assure\n      that it can handle
    a certain Word length before beginning to parse\n      blocks of an SHF Dump.
    \ Failure to do so may cause buffer\n      overflows and endanger the stability
    and security of the system\n      running the consuming application.\n   o  The
    attribute values representing an actual value MUST be in\n      big-endian format.
    \ This means that the most significant\n      hexadecimal digits are to be put
    to the left in a hexadecimal\n      Word, address, or similar field.  For example,
    the address value\n      1234 represents the address 1234 and not 3412.  While
    some\n      computing architectures may be using little-endian Words as their\n
    \     native format, it is the responsibility of any SHF producer\n      running
    on such an architecture to swap the attribute values to a\n      big-endian format.
    \ The reverse holds for a consumer receiving the\n      big-endian SHF attributes:
    if the consumer is little-endian, the\n      values have to be swapped around.\n
    \  o  Likewise, the words inside a Dump MUST be stored in a big-endian\n      format
    if the word size is larger than one Byte.  Here, the same\n      need for swapping
    Bytes around may arise, as mentioned in the\n      previous paragraph.\n"
  title: 5.  SHF Rules and Limits
- contents:
  - "6.  SHF DTD\n   The contents of the element named \"block\" and the attributes\n
    \  \"blocks\", \"address\", \"word_size\" and \"checksum\" should only contain\n
    \  the characters that are valid hexbyte sequences.  These are:\n    whitespace
    ::= (#x20 | #x9 | #xC | #xD | #xA)\n    hexdigit   ::= [0-9A-Fa-f]\n    hexbytes
    \  ::= whitespace* hexdigit (hexdigit|whitespace)*\n   A parser reading in an
    SHF file should silently ignore any other\n   characters that (by mistake) appear
    in any of these elements or\n   attributes.  These alien characters should be
    treated as if they did\n   not exist.  Also note that \"whitespace\" has no semantic
    meaning; it\n   is only valid for the reason of improving the human readability
    of\n   the Dump.  Whitespace may be altogether removed and the hexbyte\n   sequences
    concatenated if desired.  Notice that the fact that word\n   size is to be given
    in a number of bytes implies that the number of\n   hexadecimal digits inside
    a block need to be even.  Malformed blocks\n   should be ignored by implementations.\n
    \  <!--\n     DTD for the S Hexdump Format, as of 2003-10-10\n     Linus Walleij,
    Joachim Strombergson, Patrik Faltstrom 2003\n     Refer to this DTD as:\n     <!ENTITY
    % SHF PUBLIC \"-//IETF//DTD SHF//EN\"\n                \"http://ietf.org/dtd/shf.dtd\">\n
    \         %SHF;\n   -->\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <!ELEMENT
    dump (block)+>\n   <!ATTLIST dump\n          name          CDATA    #REQUIRED\n
    \         blocks        CDATA    #IMPLIED>\n   <!ELEMENT block (#PCDATA)>\n   <!ATTLIST
    block\n          name          CDATA    #REQUIRED\n          address       CDATA
    \   #REQUIRED\n          word_size     CDATA    #REQUIRED\n          length        CDATA
    \   #REQUIRED\n          checksum      CDATA    #REQUIRED>\n"
  title: 6.  SHF DTD
- contents:
  - "7.  SHF Examples\n   This section contains three different SHF examples, illustrating
    the\n   usage of SHF and the attributes in SHF.\n   The first example is a simple
    SHF Dump with a single Block of data:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
    \  <dump name=\"Simple SHF example\" blocks=\"01\">\n     <block name=\"Important
    message in hex format\" address=\"0400\"\n       word_size=\"01\" length=\"1f\"\n
    \      checksum=\"5601b6acad7da5c7b92036786250b053f05852c3\">\n         41 6c
    6c 20 79 6f 75 72 20 62 61 73 65 20 61 72\n         65 20 62 65 6c 6f 6e 67 20
    74 6f 20 75 73 0a\n     </block>\n   </dump>\n   The second example is a program
    in 6502 machine code residing at\n   memory address 0x1000, which calculates the
    13 first Fibonacci\n   numbers and stores them at 0x1101-0x110d:\n   <?xml version=\"1.0\"
    encoding=\"UTF-8\"?>\n   <dump name=\"6502 Fibonacci\" blocks=\"02\">\n     <block
    name=\"Code\" address=\"1000\" word_size=\"01\" length=\"2a\"\n       checksum=\"5cab5bf8ee299af1ad17e8093d941914eb5930c7\">\n
    \        a9 01 85 20 85 21 20 1e 10 20 1e 10 18 a5 21 aa\n         65 20 86 20
    85 21 20 1e 10 c9 c8 90 ef 60 ae 00\n         11 a5 21 9d 00 11 ee 00 11 60\n
    \    </block>\n     <block name=\"Mem\" address=\"1100\" word_size=\"01\" length=\"e\"\n
    \      checksum=\"c8c2001c42b0226a5d9f7c2f24bd47393166487a\">\n         01 00
    00 00 00 00 00 00 00 00 00 00 00 00\n     </block>\n   </dump>\n   The final example
    contains a Block of 40-bit wide data:\n"
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
  - "<dump name=\"Example of an SHF dump with wide data words\" blocks=\"00001\">\n
    \ <block name=\"SMIL memory dump\" address=\"000\" word_size=\"5\"\n        length=\"1A\"
    checksum=\"ff2033489aff0e4e4f0cd7901afc985f7a213c97\">\n      00100 00200 00000
    00090 00000 00036 00300 00400\n      00852 00250 00230 00858 00500 00600 014DC
    00058\n      002A8 000B8 00700 00800 000B0 00192 00100 00000\n      00900 00A00
    00000 0000A 40000 00000 00B00 00C00\n      00000 00000 00000 00001 00D00 00E00
    00000 00100\n      0CCCC CCCCD 00F00 01000 00000 00010 80000 00000\n      00100
    00790 00000 00234\n  </block>\n"
  - '</dump>

    '
  title: 7.  SHF Examples
- contents:
  - "8.  SHF Security Considerations\n   The SHF format is a format for representing
    hexadecimal data that one\n   wants to transfer, manage, or transform.  The format
    itself does not\n   guarantee that the represented data is not falsely represented,\n
    \  malicious, or otherwise dangerous.\n   The data integrity of the SHF file as
    a whole is to be provided, if\n   needed, by means external to the SHF file, such
    as the generic\n   signing mechanism described by RFC 3275 [3].\n"
  title: 8.  SHF Security Considerations
- contents:
  - "9.  IANA Considerations\n   This section contains the registration information
    for the MIME type\n   to SHF.  The media type has been chosen to comply with the
    guidelines\n   in [4].\n   o  Registration: application/shf+xml\n   o  MIME media
    type name: application\n   o  MIME subtype name: shf+xml\n   o  Required parameters:
    charset\n   Required parameters: charset\n   This parameter must exist and must
    be set to \"UTF-8\".  No other\n   character sets are allowed for transporting
    SHF data.  The character\n   set designator MUST be uppercase.\n   Encoding considerations:\n
    \  This media type may contain binary content; accordingly, when used\n   over
    a transport that does not permit binary transfer, an appropriate\n   encoding
    must be applied.\n   Security considerations:\n   A hex Dump in itself has no
    other security considerations than what\n   applies for any other XML file.  However,
    the included binary data\n   may in decoded form contain any executable code for
    a target\n   platform.  If additional security is desired, additional transport\n
    \  security solutions may be applied.  For target code contained in a\n   hex
    Dump, developers may want to include certificates, checksums, and\n   the like
    in hexdump form for the target platform.  Such uses are\n   outside the scope
    of this document and a matter of implementation.\n   Interoperability considerations:\n
    \  n/a\n   Published specification:\n   This media type is a proper subset of
    the XML 1.0 specification [5].\n   One restriction is made: no entity references
    other than the five\n   predefined general entities references (\"&amp;\", \"&lt;\",
    \"&gt;\",\n   \"&apos;\", and \"&quot;\") and numeric entity references may be
    present.\n   Neither the \"XML\" declaration (e.g., <?xml version=\"1.0\" ?>)
    nor the\n   \"DOCTYPE\" declaration (e.g., <!DOCTYPE ...>) need be present.  (XML\n
    \  fragments are allowed.)  All other XML 1.0 instructions (e.g., CDATA\n   blocks,
    processing instructions, and so on) are allowed.\n   Applications that use this
    media type: any program or individual\n   wishing to make use of this XML 1.0
    subset for hexdump exchange.\n   Additional information:\n   o  Magic number:
    There is no single initial Byte sequence that is\n      always present for SHF
    files\n   o  File extension: shf\n   o  Macintosh File Type code: none\n   Intended
    usage: COMMON.\n   Author/Change controller: this MIME transport type is controlled
    by\n   the IETF.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Extensions\n   The attributes of elements in the SHF XML format may be extended
    when\n   need arises.  For example, certain applications will want to\n   represent
    executable code as an SHF Dump, and may then need an\n   execution start address
    to be associated with certain Dump Blocks, so\n   that the address can be configured
    as a starting point for the CPU\n   part of any processor code present in the
    Block, as opposed to the\n   raw data, which is already given a start address
    by way of the\n   \"address\" attribute.  This can be done by extending the Block
    tag\n   with a \"start_address\" attribute.\n   Another possible scenario is when
    a dump is applied to a computer\n   system with several independent address spaces,
    such as a system with\n   two CPUs, each with independent memories.  In this case,
    a user may\n   want to add an \"address_space\" attribute.\n   As long as such
    new attributes are added, with no attributes being\n   removed or redefined, the
    resulting Dump shall be considered a valid\n   SHF Dump and transported using
    the application/xml+shf transport\n   type.  Parsers unaware of the modified namespace
    shall silently\n   ignore any such extended attributes, or simply duplicate them
    from\n   input to output when processing an SHF file as a filter.  The\n   management
    of such extended attributes is a matter of convention\n   between different classes
    of users and not a matter of the IETF.\n"
  title: 10.  Extensions
- contents:
  - "11.  Additional Information\n   Contact for further information: c.f., the \"Authors'
    Addresses\"\n   section of this memo.\n   Acknowledgements: The SMIL memory Dump
    was kindly provided by Sten\n   Henriksson at Lund University.  Proofreading and
    good feedback on the\n   SHF document was generously provided by Peter Lindgren,
    Tony Hansen,\n   Larry Masinter, and Clive D.W. Feather.  We also want to thank
    the\n   Applications area workgroup for their help during development.\n"
  title: 11.  Additional Information
- contents:
  - "12.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
    \ Eastlake, 3rd, D. and P. Jones, \"US Secure Hash Algorithm 1\n        (SHA1)\",
    BCP 14, RFC 3174, September 2001.\n   [3]  Eastlake, 3rd, D., Joseph, J., and
    D. David, \"(Extensible Markup\n        Language) XML-Signature Syntax and Processing\",
    BCP 14,\n        RFC 3275, March 2002.\n   [4]  Makoto, M., Simon, S., and D.
    Dan, \"(Extensible Markup Language)\n        XML Media Types\", RFC 3023, January
    2001.\n   [5]  Bray, Tim, Paoli, Jean, Sperberg-McQueen, C. M. and Maler, Eve,\n
    \       Yergeau, Francois, \"Extensible Markup Language (XML) 1.0 (Third\n        Edition)\",
    http://www.w3.org/TR/REC-xml.\n"
  title: 12.  Normative References
- contents:
  - "Authors' Addresses\n   Joachim Strombergson\n   InformAsic AB\n   Hugo Grauers
    gata 5a\n   Gothenburg  411 33\n   SE\n   Phone: +46 31 68 54 90\n   EMail: Joachim.Strombergson@InformAsic.com\n
    \  URI:   http://www.InformAsic.com/\n   Linus Walleij\n   Lunds Tekniska Hogskola\n
    \  Master Olofs Vag 24\n   Lund  224 66\n   SE\n   Phone: +46 703 193678\n   EMail:
    triad@df.lth.se\n   Patrik Faltstrom\n   Cisco Systems Inc\n   Ledasa\n   273
    71 Lovestad\n   Sweden\n   EMail: paf@cisco.com\n   URI:   http://www.cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
