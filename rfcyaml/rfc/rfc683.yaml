- title: __initial_text__
  contents:
  - "                FTPSRV - TENEX FTP EXTENSIONS FOR PAGED FILES\n             \
    \           R. Clements - BBN - 3 April 75\n1   Introduction\n    In response\
    \ to a long-known need for the ability to transfer TENEX paged\nfiles over the\
    \ net via FTP, the TENEX FTP implementation has been extended.\n    This implementation\
    \ is an extension to the \"OLD\" protocol (RFC 354).  It\nwas built after useful\
    \ discussions with Postel, Neigus, et al.  I do not mean\nto imply that they agreed\
    \ that this implementation is correct, nor for that\nmatter do I feel it is correct.\
    \  A \"correct\" implementation will be negotiated\nand implemented in the \"\
    NEW\" protocol (RFC 542), if funding ever appears for\nthat task.\n2   The Problem(s)\n\
    \    This extension attacks two separate problems: Network reliability and\nTENEX\
    \ disk file format's incompatibility with FTP.  A checksummed and\nblock-sequence-numbered\
    \ transmission mode is seriously needed, in my opinion.\nThis mode should also\
    \ allow data compression.\n    It is also necessary to handle paged, holey TENEX\
    \ files.  This latter\nproblem, seriously needed for NLS, is the motivation for\
    \ the current\nextension.\n    The former problem requires a new MODE command,\
    \ if done correctly;\nprobably two MODEs, to allow data compression in addition\
    \ to checksumming.\nActually, I think that is the tip of an iceberg which grows\
    \ as 2**N for\nadditional sorts of modes, so maybe some mode combination system\
    \ needs to be\ndreamed up.  Cf the AN, AT, AC, EN, ET, EC TYPEs.  Also, one should\
    \ be able to\nuse MODE B and MODE C together (NEW protocol) to gain both the compression\
    \ and\nrestart facilities if one wanted.\n    The second problem, TENEX files,\
    \ are probably a new kind of STRUcture.\nHowever, it should be possible to send\
    \ a paper tape to a disk file, or vice\nversa, with the transfer looking like\
    \ a paged file; so perhaps we are dealing\nwith a data representation TYPE.  This\
    \ argument is a bit strained, though, so\na paged STRUcture is quite likely correct.\
    \  I admit to feeling very unsure\nabout what is a MODE, what is a TYPE and what\
    \ is a STRUcture.\n3   The (Incorrect) choices made\n    Having decided that new\
    \ MODEs and STRUctures were needed, I instead\nimplemented the whole thing as\
    \ a single new TYPE.  After all, I rationalize,\nchecksumming the data on the\
    \ network (MODE) and representing the data in the\nprocessing system as a checksummed\
    \ TYPE are really just a matter of where you\ndraw the imaginary line between\
    \ the net and the data.  Also, a single new TYPE\ncommand reduced the size of\
    \ the surgery required on the FTP user and server\nprograms.\n4   Implementation\
    \ details\n    The name of the new TYPE is \"XTP\".  I propose this as a standard\
    \ for all\nthe Key Letter class of FTP commands: the \"X\" stands for \"experimental\"\
    \ --\nagreed on between cooperating sites.  The letter after the \"X\" is signed\
    \ out\nfrom the protocol deity by an implementor for a given system.  In this\
    \ case,\n\"T\" is for TENEX.  Subsequent letter(s) distinguish among possibly\
    \ multiple\nprivate values of the FTP command.  Here \"P\" is \"Paged\" type.\n\
    \   TYPE XTP is only implemented for STRU F, BYTE 36, and MODE S.\n    Information\
    \ of TYPE XTP is transfered in chunks (I intentionally avoid the\nwords RECORD\
    \ and BLOCK) which consist of a header and some data.  The data in\na chunk may\
    \ be part of the data portion of the file being transferred, or it\nmay be the\
    \ FDB (File Descriptor Block) associated with the file.  \n5   Diversion: the\
    \ TENEX Disk File\n    For those not familiar with the TENEX file system, a brief\
    \ dissertation is\nincluded here to make the rest of the implementation meaningful.\n\
    \    A TENEX disk file consists of four things: a pathname, a page table, a\n\
    (possibly empty) set of pages, and a set of attributes.\n    The pathname is specified\
    \ in the RETR or STOR verb.  It includes the\ndirectory name, file name, file\
    \ name extension, and version number.\n    The page table contains up to 2**18\
    \ entries.  Each entry may be EMPTY, or\nmay point to a page.  If it is not empty,\
    \ there are also some page-specific\naccess bits; not all pages of a file need\
    \ have the same access protection.\n    A page is a contiguous set of 512 words\
    \ of 36 bits each.\n    The attributes of the file, in the FDB, contain such things\
    \ as creation\ntime, write time, read time, writer's byte-size, end of file pointer,\
    \ count of\nreads and writes, backup system tape numbers, etc.\n    NOTE: there\
    \ is NO requirement that pages in the page table be contiguous.\nThere may be\
    \ empty page table slots between occupied ones.  Also, the end of\nfile pointer\
    \ is simply a number.  There is no requirement that it in fact\npoint at the \"\
    last\" datum in the file. Ordinary sequential I/O calls in TENEX\nwill cause the\
    \ end of file pointer to be left after the last datum written,\nbut other operations\
    \ may cause it not to be so, if a particular programming\nsystem so requires.\n\
    \    In fact both of these special cases, \"holey\" files and end-of-file\npointers\
    \ not at the end of the file, occur with NLS data files.  These files\nwere the\
    \ motivation for the new TYPE.\n6   Meanwhile, back at the implementation,...\n\
    \    Each chunk of information has a header.  The first byte, which is the\nfirst\
    \ word (since TYPE XTP is only implemented for BYTE 36) of the chunk, is a\nsmall\
    \ number, currently 6, which is the number of following words which are\nstill\
    \ in the header.  Next come those six words, and then come some data\nwords.\n\
    \   The six header words are:\n      Word 1: a checksum.\n         This is a one's\
    \ complement sum (magnitude and end-around carry) of \n         the six header\
    \ words and the following data words (but not the \n         leading \"6\" itself).\
    \  The sum of all words including the checksum \n         must come out + or -\
    \ zero.\n      Word 2: A sequence number.\n         The first chunk is number\
    \ 1, the second is number 2, etc.\n      Word 3: NDW,\n         the number of\
    \ data words in this chunk, following the header.  Thus\n         the total length\
    \ of the chunk is 1 (the word containing NHEAD) + \n         NHEAD +NDW.  The\
    \ checksum checks all but the first of these.\n      Word 4: Page number.\n  \
    \       If the data is a disk file page, this is the number of that page in\n\
    \         the file's page map.  Empty pages (holes) in the file are simply \n\
    \         not sent.  Note that a hole is NOT the same as a page of zeroes.\n \
    \     Word 5: ACCESS.\n         The access bits associated with the page in the\
    \ file's page map.  \n         (This full word quantity is put into AC2 of an\
    \ SPACS by the program\n         reading from net to disk.)\n      Word 6: TYPE.\n\
    \         A code for what type of chunk this is. Currently, only type zero \n\
    \         for a data page, and type -3 for an FDB are sent.\n    After the header\
    \ are NDW data words.  NDW is currently either 1000 octal\nfor a data page or\
    \ 25 octal for an FDB.  Trailing zeroes in a disk file page\nwill soon be discarded,\
    \ making NDW less than 1000 in that case.  The receiving\nportions of FTP server\
    \ and user will accept these shortened pages.  The sender\ndoesn't happen to send\
    \ them that way yet.\nVerification is performed such that an error is reported\
    \ if either:\n   The checksum fails,\n   The sequence number is not correct,\n\
    \   NDW is unreasonable for the given chunk type, or\n   The network file ends\
    \ at some point other than immediately following the \ndata portion of an FDB\
    \ chunk.\n7   Closing comments\n    This FTP server and user are in operation\
    \ on all the BBN systems and at\nsome other sites -- the user being more widely\
    \ distributed since fewer sites\nhave made local modifications to the user process.\n\
    \    I believe the issues of checksumming and sequencing should be addressed\n\
    for the \"NEW\" protocol.  I hope the dissertation on TENEX files has been\nuseful\
    \ to users of other systems.  It may explain my lack of comprehension of\nthe\
    \ \"record\" concept, for example.  A TENEX file is just a bunch of words\npointed\
    \ to by a page table.  If those words contain CRLF's, fine -- but that\ndoesn't\
    \ mean \"record\" to TENEX. I think this RFC also points out clearly that\nnet\
    \ data transfers are implemented like the layers of an onion: some\ncharacters\
    \ are packaged into a line.  Some lines are packaged into a file.\nThe file is\
    \ broken into other managable units for transmission.  Those units\nhave compression\
    \ applied to them.  The units may be flagged by restart markers\n(has anyone actually\
    \ done that?).  The compressed units may be checksummed,\nsequence numbered, date-and-time\
    \ stamped, and flagged special delivery.  On\nthe other end, the process is reversed.\
    \  Perhaps MODE, TYPE, and STRU don't\n"
