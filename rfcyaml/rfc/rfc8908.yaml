- contents:
  - '                           Captive Portal API

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an HTTP API that allows clients to interact\n
    \  with a Captive Portal system.  With this API, clients can discover\n   how
    to get out of captivity and fetch state about their Captive\n   Portal sessions.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8908.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Workflow\n
    \  4.  API Connection Details\n     4.1.  Server Authentication\n   5.  API State
    Structure\n   6.  Example Interaction\n   7.  Security Considerations\n     7.1.
    \ Privacy Considerations\n   8.  IANA Considerations\n     8.1.  Captive Portal
    API JSON Media Type Registration\n     8.2.  Captive Portal API Keys Registry\n
    \  9.  References\n     9.1.  Normative References\n     9.2.  Informative References\n
    \  Acknowledgments\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a HyperText Transfer Protocol (HTTP)\n
    \  Application Programming Interface (API) that allows clients to\n   interact
    with a Captive Portal system.  The API defined in this\n   document has been designed
    to meet the requirements in the Captive\n   Portal Architecture [CAPPORT-ARCH].
    \ Specifically, the API provides:\n   *  The state of captivity (whether or not
    the client has access to\n      the Internet).\n   *  A URI of a user-facing web
    portal that can be used to get out of\n      captivity.\n   *  Authenticated and
    encrypted connections, using TLS for connections\n      to both the API and user-facing
    web portal.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This document leverages the terminology and components described
    in\n   [CAPPORT-ARCH] and additionally defines the following terms:\n   Captive
    Portal Client\n      The client that interacts with the Captive Portal API is
    typically\n      some application running on the user equipment that is connected\n
    \     to the captive network.  This is also referred to as the \"client\"\n      in
    this document.\n   Captive Portal API Server\n      The server exposing the APIs
    defined in this document to the\n      client.  This is also referred to as the
    \"API server\" in this\n      document.\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
    interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,
    they appear in all\n   capitals, as shown here.\n"
  title: 2.  Terminology
- contents:
  - "3.  Workflow\n   The Captive Portal Architecture defines several categories of\n
    \  interaction between clients and Captive Portal systems:\n   1.  Provisioning,
    in which a client discovers that a network has a\n       captive portal and learns
    the URI of the API server.\n   2.  API Server interaction, in which a client queries
    the state of\n       captivity and retrieves the necessary information to get
    out of\n       captivity\n   3.  Enforcement, in which the enforcement device
    in the network\n       blocks disallowed traffic.\n   This document defines the
    mechanisms used in the second category.  It\n   is assumed that the location of
    the Captive Portal API server has\n   been discovered by the client as part of
    provisioning.  A set of\n   mechanisms for discovering the API server endpoint
    is defined in\n   [RFC8910].\n"
  title: 3.  Workflow
- contents:
  - "4.  API Connection Details\n   The API server endpoint MUST be accessed over
    HTTP using an https URI\n   [RFC2818] and SHOULD use the default https port.  For
    example, if the\n   Captive Portal API server is hosted at \"example.org\", the
    URI of the\n   API could be \"https://example.org/captive-portal/api\".\n   The
    client SHOULD NOT assume that the URI of the API server for a\n   given network
    will stay the same and SHOULD rely on the discovery or\n   provisioning process
    each time it joins the network.\n   As described in Section 3 of [CAPPORT-ARCH],
    the identity of the\n   client needs to be visible to the Captive Portal API server
    in order\n   for the server to correctly reply with the client's portal state.
    \ If\n   the identifier used by the Captive Portal system is the client's set\n
    \  of IP addresses, the system needs to ensure that the same IP\n   addresses
    are visible to both the API server and the enforcement\n   device.\n   If the
    API server needs information about the client identity that is\n   not otherwise
    visible to it, the URI provided to the client during\n   provisioning SHOULD be
    distinct per client.  Thus, depending on how\n   the Captive Portal system is
    configured, the URI will be unique for\n   each client host and between sessions
    for the same client host.\n   For example, a Captive Portal system that uses per-client
    session\n   URIs could use \"https://example.org/captive-portal/api/X54PD39JV\"
    as\n   its API URI.\n"
  - contents:
    - "4.1.  Server Authentication\n   The purpose of accessing the Captive Portal
      API over an HTTPS\n   connection is twofold: first, the encrypted connection
      protects the\n   integrity and confidentiality of the API exchange from other
      parties\n   on the local network; second, it provides the client of the API
      an\n   opportunity to authenticate the server that is hosting the API.  This\n
      \  authentication allows the client to ensure that the entity providing\n   the
      Captive Portal API has a valid certificate for the hostname\n   provisioned
      by the network using the mechanisms defined in [RFC8910],\n   by validating
      that a DNS-ID [RFC6125] on the certificate is equal to\n   the provisioned hostname.\n
      \  Clients performing revocation checking will need some means of\n   accessing
      revocation information for certificates presented by the\n   API server.  Online
      Certificate Status Protocol [RFC6960] (OCSP)\n   stapling, using the TLS Certificate
      Status Request extension\n   [RFC6066], SHOULD be used.  OCSP stapling allows
      a client to perform\n   revocation checks without initiating new connections.
      \ To allow for\n   other forms of revocation checking, especially for clients
      that do\n   not support OCSP stapling, a captive network SHOULD permit\n   connections
      to OCSP responders or Certificate Revocation Lists (CRLs)\n   that are referenced
      by certificates provided by the API server.  For\n   more discussion on certificate
      revocation checks, see Section 6.5 of\n   BCP 195 [RFC7525].  In addition to
      connections to OCSP responders and\n   CRLs, a captive network SHOULD also permit
      connections to Network\n   Time Protocol (NTP) [RFC5905] servers or other time-sync
      mechanisms\n   to allow clients to accurately validate certificates.\n   Certificates
      with missing intermediate certificates that rely on\n   clients validating the
      certificate chain using the URI specified in\n   the Authority Information Access
      (AIA) extension [RFC5280] SHOULD NOT\n   be used by the Captive Portal API server.
      \ If the certificates do\n   require the use of AIA, the captive network MUST
      allow client access\n   to the host specified in the URI.\n   If the client
      is unable to validate the certificate presented by the\n   API server, it MUST
      NOT proceed with any of the behavior for API\n   interaction described in this
      document.  The client will proceed to\n   interact with the captive network
      as if the API capabilities were not\n   present.  It may still be possible for
      the user to access the network\n   if the network redirects a cleartext webpage
      to a web portal.\n"
    title: 4.1.  Server Authentication
  title: 4.  API Connection Details
- contents:
  - "5.  API State Structure\n   The Captive Portal API data structures are specified
    in JavaScript\n   Object Notation (JSON) [RFC8259].  Requests and responses for
    the\n   Captive Portal API use the \"application/captive+json\" media type.\n
    \  Clients SHOULD include this media type as an Accept header in their\n   GET
    requests, and servers MUST mark this media type as their Content-\n   Type header
    in responses.\n   The following key MUST be included in the top level of the JSON\n
    \  structure returned by the API server:\n    | Key     | Type    | Description
    \                               |\n    | captive | boolean | Indicates whether
    the client is in a state |\n    |         |         | of captivity, i.e, it has
    not satisfied    |\n    |         |         | the conditions to access the external
    \     |\n    |         |         | network.  If the client is captive (i.e.,  |\n
    \   |         |         | captive=true), it will still be allowed    |\n    |
    \        |         | enough access for it to perform server     |\n    |         |
    \        | authentication (Section 4.1).              |\n   The following keys
    can be optionally included in the top level of the\n   JSON structure returned
    by the API server:\n    | Key                | Type    | Description                      |\n
    \   | user-portal-url    | string  | Provides the URL of a web portal |\n    |
    venue-info-url     | string  | Provides the URL of a webpage or |\n    | can-extend-session
    | boolean | Indicates that the URL specified |\n    | seconds-remaining  | number
    \ | An integer that indicates the    |\n    | bytes-remaining    | number  | An
    integer that indicates the    |\n   The valid JSON keys can be extended by adding
    entries to the Captive\n   Portal API Keys Registry (Section 8.2).  If a client
    receives a key\n   that it does not recognize, it MUST ignore the key and any
    associated\n   values.  All keys other than the ones defined in this document
    as\n   \"required\" will be considered optional.\n   Captive Portal JSON content
    can contain per-client data that is not\n   appropriate to store in an intermediary
    cache.  Captive Portal API\n   servers SHOULD set the Cache-Control header field
    in any responses to\n   \"private\" or a more restrictive value, such as \"no-store\"
    [RFC7234].\n   Client behavior for issuing requests for updated JSON content is\n
    \  implementation specific and can be based on user interaction or the\n   indications
    of seconds and bytes remaining in a given session.  If at\n   any point the client
    does not receive valid JSON content from the API\n   server, either due to an
    error or due to receiving no response, the\n   client SHOULD continue to apply
    the most recent valid content it had\n   received or, if no content had been received
    previously, proceed to\n   interact with the captive network as if the API capabilities
    were not\n   present.\n"
  title: 5.  API State Structure
- contents:
  - "6.  Example Interaction\n   Upon discovering the URI of the API server, a client
    connected to a\n   captive network will query the API server to retrieve information\n
    \  about its captive state and conditions to escape captivity.  In this\n   example,
    the client discovered the URI \"https://example.org/captive-\n   portal/api/X54PD39JV\"
    using one of the mechanisms defined in\n   [RFC8910].\n   To request the Captive
    Portal JSON content, a client sends an HTTP\n   GET request:\n   GET /captive-portal/api/X54PD39JV
    HTTP/1.1\n   Host: example.org\n   Accept: application/captive+json\n   The server
    then responds with the JSON content for that client:\n   HTTP/1.1 200 OK\n   Cache-Control:
    private\n   Date: Mon, 02 Mar 2020 05:07:35 GMT\n   Content-Type: application/captive+json\n
    \  {\n      \"captive\": true,\n      \"user-portal-url\": \"https://example.org/portal.html\"\n
    \  }\n   Upon receiving this information, the client will use it to direct the\n
    \  user to the web portal (as specified by the user-portal-url value) to\n   enable
    access to the external network.  Once the user satisfies the\n   requirements
    for external network access, the client SHOULD query the\n   API server again
    to verify that it is no longer captive.\n   When the client requests the Captive
    Portal JSON content after\n   gaining external network access, the server responds
    with updated\n   JSON content:\n   HTTP/1.1 200 OK\n   Cache-Control: private\n
    \  Date: Mon, 02 Mar 2020 05:08:13 GMT\n   Content-Type: application/captive+json\n
    \  {\n      \"captive\": false,\n      \"user-portal-url\": \"https://example.org/portal.html\",\n
    \     \"venue-info-url\": \"https://flight.example.com/entertainment\",\n      \"seconds-remaining\":
    326,\n      \"can-extend-session\": true\n   }\n"
  title: 6.  Example Interaction
- contents:
  - "7.  Security Considerations\n   One of the goals of this protocol is to improve
    the security of the\n   communication between client hosts and Captive Portal
    systems.\n   Client traffic is protected from passive listeners on the local\n
    \  network by requiring TLS-encrypted connections between the client and\n   the
    Captive Portal API server, as described in Section 4.  All\n   communication between
    the clients and the API server MUST be\n   encrypted.\n   In addition to encrypting
    communications between clients and Captive\n   Portal systems, this protocol requires
    a basic level of\n   authentication from the API server, as described in Section
    4.1.\n   Specifically, the API server MUST present a valid certificate on\n   which
    the client can perform revocation checks.  This allows the\n   client to ensure
    that the API server has authority for the hostname\n   that was provisioned by
    the network using [RFC8910].  Note that this\n   validation only confirms that
    the API server matches what the\n   network's provisioning mechanism (such as
    DHCP or IPv6 Router\n   Advertisements) provided; it is not validating the security
    of those\n   provisioning mechanisms or the user's trust relationship to the\n
    \  network.\n"
  - contents:
    - "7.1.  Privacy Considerations\n   Information passed between a client and the
      user-facing web portal\n   may include a user's personal information, such as
      a full name and\n   credit card details.  Therefore, it is important that both
      the user-\n   facing web portal and the API server that points a client to the
      web\n   portal are only accessed over encrypted connections.\n   It is important
      to note that although communication to the user-\n   facing web portal requires
      use of TLS, the authentication only\n   validates that the web portal server
      matches the name in the URI\n   provided by the API server.  Since this is not
      a name that a user\n   typed in, the hostname of the website that would be presented
      to the\n   user may include \"confusable characters\", which can mislead the
      user.\n   See Section 12.5 of [RFC8264] for a discussion of confusable\n   characters.\n"
    title: 7.1.  Privacy Considerations
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   IANA has registered the \"application/captive+json\"
    media type\n   (Section 8.1) and created a registry for fields in that format\n
    \  (Section 8.2).\n"
  - contents:
    - "8.1.  Captive Portal API JSON Media Type Registration\n   This document registers
      the media type for Captive Portal API JSON\n   text, \"application/captive+json\".\n
      \  Type name:  application\n   Subtype name:  captive+json\n   Required parameters:
      \ N/A\n   Optional parameters:  N/A\n   Encoding considerations:  Encoding considerations
      are identical to\n      those specified for the \"application/json\" media type.\n
      \  Security considerations:  See Section 7\n   Interoperability considerations:
      \ This document specifies format of\n      conforming messages and the interpretation
      thereof.\n   Published specification:  RFC 8908\n   Applications that use this
      media type:  This media type is intended\n      to be used by servers presenting
      the Captive Portal API, and\n      clients connecting to such captive networks.\n
      \  Fragment identifier considerations:  N/A\n   Additional Information:  N/A\n
      \  Person and email address to contact for further information:\n      See Authors'
      Addresses section\n   Intended usage:  COMMON\n   Restrictions on usage:  N/A\n
      \  Author:  CAPPORT IETF WG\n   Change controller:  IETF\n"
    title: 8.1.  Captive Portal API JSON Media Type Registration
  - contents:
    - "8.2.  Captive Portal API Keys Registry\n   IANA has created a new registry
      called \"Captive Portal API Keys\",\n   which reserves JSON keys for use in
      Captive Portal API data\n   structures.  The initial contents of this registry
      are provided in\n   Section 5.\n   Each entry in the registry contains the following
      fields:\n   Key:  The JSON key being registered in string format.\n   Type:
      \ The type of the JSON value to be stored, as one of the value\n      types
      defined in [RFC8259].\n   Description:  A brief description explaining the meaning
      of the\n      value, how it might be used, and/or how it should be interpreted\n
      \     by clients.\n   Reference:  A reference to a specification that defines
      the key and\n      explains its usage.\n   New assignments for the \"Captive
      Portal API Keys\" registry will be\n   administered by IANA using the Specification
      Required policy\n   [RFC8126].  The designated expert is expected to validate
      the\n   existence of documentation describing new keys in a permanent,\n   publicly
      available specification, such as an Internet-Draft or RFC.\n   The expert is
      expected to validate that new keys have a clear meaning\n   and do not create
      unnecessary confusion or overlap with existing\n   keys.  Keys that are specific
      to nongeneric use cases, particularly\n   ones that are not specified as part
      of an IETF document, are\n   encouraged to use a domain-specific prefix.\n"
    title: 8.2.  Captive Portal API Keys Registry
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network
      Time Protocol Version 4: Protocol and Algorithms\n              Specification\",
      RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <https://www.rfc-editor.org/info/rfc5905>.\n
      \  [RFC6066]  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:
      Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January
      2011,\n              <https://www.rfc-editor.org/info/rfc6066>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125, March\n              2011, <https://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6960]  Santesson, S., Myers, M., Ankney, R., Malpani, A.,\n              Galperin,
      S., and C. Adams, \"X.509 Internet Public Key\n              Infrastructure
      Online Certificate Status Protocol - OCSP\",\n              RFC 6960, DOI 10.17487/RFC6960,
      June 2013,\n              <https://www.rfc-editor.org/info/rfc6960>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CAPPORT-ARCH]\n              Larose, K.,
      Dolson, D., and H. Liu, \"CAPPORT\n              Architecture\", Work in Progress,
      Internet-Draft, draft-\n              ietf-capport-architecture-08, 11 May 2020,\n
      \             <https://tools.ietf.org/html/draft-ietf-capport-\n              architecture-08>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC8264]
      \ Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n              Preparation,
      Enforcement, and Comparison of\n              Internationalized Strings in Application
      Protocols\",\n              RFC 8264, DOI 10.17487/RFC8264, October 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8264>.\n   [RFC8910]  Kumari,
      W. and E. Kline, \"Captive-Portal Identification in\n              DHCP and
      Router Advertisement (RA)\", RFC 8910,\n              DOI 10.17487/RFC8910,
      September 2020,\n              <https://www.rfc-editor.org/info/rfc8910>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   This work was started by Mark Donnelly and Margaret Cullen.
    \ Thanks\n   to everyone in the CAPPORT Working Group who has given input.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Tommy Pauly (editor)\n   Apple Inc.\n   One Apple Park
    Way\n   Cupertino, CA 95014\n   United States of America\n   Email: tpauly@apple.com\n
    \  Darshak Thakore (editor)\n   CableLabs\n   858 Coal Creek Circle\n   Louisville,
    CO 80027\n"
  title: Authors' Addresses
