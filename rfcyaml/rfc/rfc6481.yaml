- contents:
  - '        A Profile for Resource Certificate Repository Structure

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a profile for the structure of the Resource\n
    \  Public Key Infrastructure (RPKI) distributed repository.  Each\n   individual
    repository publication point is a directory that contains\n   files that correspond
    to X.509/PKIX Resource Certificates,\n   Certificate Revocation Lists and signed
    objects.  This profile\n   defines the object (file) naming scheme, the contents
    of repository\n   publication points (directories), and a suggested internal structure\n
    \  of a local repository cache that is intended to facilitate\n   synchronization
    across a distributed collection of repository\n   publication points and to facilitate
    certification path construction.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6481.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................3\n   2.
    RPKI Repository Publication Point Content and Structure .........4\n      2.1.
    Manifests ..................................................5\n      2.2. CA Repository
    Publication Points ...........................6\n   3. Resource Certificate Publication
    Repository Considerations ......8\n   4. Certificate Reissuance and Repositories
    ........................10\n   5. Synchronizing Repositories with a Local Cache
    ..................10\n   6. Security Considerations ........................................11\n
    \  7. IANA Considerations ............................................12\n      7.1.
    Media Types ...............................................12\n           7.1.1.
    application/rpki-manifest ..........................12\n           7.1.2. application/rpki-roa
    ...............................13\n      7.2. RPKI Repository Name Scheme Registry
    ......................13\n   8. Acknowledgements ...............................................13\n
    \  9. References .....................................................14\n      9.1.
    Normative References ......................................14\n      9.2. Informative
    References ....................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   To validate attestations made in the context of the Resource
    Public\n   Key Infrastructure (RPKI) [RFC6480], relying parties (RPs) need\n   access
    to all the X.509/PKIX Resource Certificates, Certificate\n   Revocation Lists
    (CRLs), and signed objects that collectively define\n   the RPKI.\n   Each issuer
    of a certificate, CRL, or a signed object makes it\n   available for download
    to RPs through the publication of the object\n   in an RPKI repository.\n   The
    repository system is a collection of all signed objects that MUST\n   be globally
    accessible to all RPs.  When certificates, CRLs and\n   signed objects are created,
    they are uploaded to a repository\n   publication point, from whence they can
    be downloaded for use by RPs.\n   This profile defines the recommended object
    (file) naming scheme, the\n   recommended contents of repository publication points
    (directories),\n   and a suggested internal structure of a local repository cache
    that\n   is intended to facilitate synchronization across a distributed\n   collection
    of repository publication points and facilitate\n   certification path construction.\n
    \  A resource certificate attests to a binding of an entity's public key\n   to
    a set of IP address blocks and AS numbers.  The subject of a\n   resource certificate
    can demonstrate that it is the holder of the\n   resources enumerated in the certificate
    by using its private key to\n   generate a digital signature (that can be verified
    using the public\n   key from the certificate).\n"
  - contents:
    - "1.1.  Terminology\n   It is assumed that the reader is familiar with the terms
      and concepts\n   described in \"Internet X.509 Public Key Infrastructure Certificate\n
      \  and Certificate Revocation List (CRL) Profile\" [RFC5280], and \"X.509\n
      \  Extensions for IP Addresses and AS Identifiers\" [RFC3779].\n   In addition,
      the following terms are used in this document:\n   Repository Object (or Object):\n
      \     This refers to a terminal object in a repository publication\n      point.
      \ A terminal object is conventionally implemented as a file\n      in a publicly
      accessible directory, where the file is not a\n      directory itself, although
      another form of object that has an\n      analogous public appearance to a file
      is encompassed by this term.\n   Repository Publication Point:\n      This refers
      to a collection of Repository Objects that are\n      published at a common
      publication point.  This is conventionally\n      implemented as a directory
      in a publicly accessible filesystem\n      that is identified by a URI [RFC3986],
      although another form of\n      local storage that has an analogous public appearance
      to a simple\n      directory of files is also encompassed by this term.\n   Repository
      Instance:\n      This refers to a collection of one or more Repository Publication\n
      \     Points that share a common publication instance.  This\n      conventionally
      is implemented as a collection of filesystem\n      directories that share a
      common URI prefix, where each directory\n      is also identifiable by its own
      unique URI.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  RPKI Repository Publication Point Content and Structure\n   The RPKI does
    not require that a single repository instance contain\n   all published RPKI objects.
    \ Instead, the RPKI repository system is\n   comprised of multiple repository
    instances.  Each individual\n   repository instance is composed of one or more
    repository publication\n   points.  Each repository publication point is used
    by one or more\n   entities referenced in RPKI certificates, as defined in the\n
    \  certificate's Subject Information Access (SIA) extension.\n   This section
    describes the collection of objects (RPKI certificates,\n   CRLs, manifests, and
    signed objects) held in repository publication\n   points.\n   For every Certification
    Authority (CA) certificate in the RPKI, there\n   is a corresponding repository
    publication point that is the\n   authoritative publication point for all current
    certificates and CRLs\n   issued by this CA.  The certificate's SIA extension
    contains a URI\n   [RFC3986] that references this repository publication point
    and\n   identifies the repository access mechanisms.  Additionally, a\n   certificate's
    Authority Information Access (AIA) extension contains a\n   URI that references
    the authoritative location for the CA certificate\n   under which the given certificate
    was issued.\n   For example, if the subject of certificate A has issued certificates\n
    \  B and C, then the AIA extensions of certificates B and C both point\n   to
    the publication point for the certificate A object, and the SIA\n   extension
    of certificate A points to a repository publication point\n   (directory) containing
    certificates B and C (see Figure 1).\n                         +--------+\n              +--------->|
    Cert A |<----+\n              |          |  AIA   |     |\n              |  +---------
    SIA   |     |\n              |  |       +--------+     |\n              |  |                      |\n
    \             |  |  +-------------------|------------------+\n              |
    \ |  |                   |                  |\n              |  +->|   +--------+
    \     |   +--------+     |\n              |     |   | Cert B |      |   | Cert
    C |     |\n              |     |   | CRLDP-------+ |   | CRLDP-----+  |\n              +-----------
    AIA   |    | +----- AIA   |  |  |\n                    |   |  SIA------+ |     |
    \ SIA------------+\n                    |   +--------+  | |     +--------+  |
    \ |  |\n                    |               | V                 V  |  |\n                    |
    \              | +-----------------+  |  |\n                    |               |
    | CRL issued by A |  |  |\n                    | A's Repository| +-----------------+
    \ |  |\n                    | Directory     |                      |  |\n                    +---------------|----------------------+
    \ |\n                                    |                         |\n          +----------------+
    \       |    +----------------+   |\n          | B's Repository |<-------+    |
    C's Repository |<--+\n          |  Directory     |             |  Directory     |\n
    \         +----------------+             +----------------+\n          Figure
    1.  Use of AIA and SIA Extensions in the RPKI\n   In Figure 1, certificates B
    and C are issued by CA A.  Therefore, the\n   AIA extensions of certificates B
    and C point to (certificate) A, and\n   the SIA extension of certificate A points
    to the repository\n   publication point of CA A's subordinate products, which
    includes\n   certificates B and C, as well as the CRL issued by A.  The CRL\n
    \  Distribution Points (CRLDP) extension in certificates B and C both\n   point
    to the CRL issued by A.\n   In this distributed repository structure, an instance
    of a CA's\n   repository publication point contains all published certificates\n
    \  issued by that CA, and the CRL issued by that CA.  This repository\n   also
    contains all published digitally signed objects that are\n   verified by an end-entity
    (EE) certificate issued by this CA.\n"
  - contents:
    - "2.1.  Manifests\n   Every repository publication point MUST contain a manifest
      [RFC6486].\n   The manifest contains a list of the names of all objects, as
      well as\n   the hash value of each object's contents that are currently published\n
      \  by a CA or an EE.\n   An authority MAY perform a number of object operations
      on a\n   publication repository within the scope of a repository change before\n
      \  issuing a single manifest that covers all the operations within the\n   scope
      of this change.  Repository operators SHOULD implement some\n   form of directory
      management regime function on the repository to\n   ensure that RPs who are
      performing retrieval operations on the\n   repository are not exposed to intermediate
      states during changes to\n   the repository and the associated manifest.  (It
      is noted that if no\n   such access regime is in place, then RPs MAY be exposed
      to\n   intermediate repository states where the manifest and the repository\n
      \  contents may not be precisely aligned.  Specific cases and actions in\n   such
      a situation of misalignment of the manifest and the repository\n   contents
      are considered in [RFC6486].)\n"
    title: 2.1.  Manifests
  - contents:
    - "2.2.  CA Repository Publication Points\n   A CA certificate has two accessMethod
      elements specified in its SIA\n   field.  The id-ad-caRepository accessMethod
      element has an associated\n   accessLocation element that points to the repository
      publication\n   point of the certificates issued by this CA, as specified in\n
      \  [RFC6487].  The id-ad-rpkiManifest accessMethod element has an\n   associated
      accessLocation element that points to the manifest object,\n   as an object
      URI (as distinct to a directory URI), that is associated\n   with this CA.\n
      \  A CA's publication repository contains the current (non-expired and\n   non-revoked)
      certificates issued by this CA, the most recent CRL\n   issued by this CA, the
      current manifest, and all other current signed\n   objects that can be verified
      using an EE certificate [RFC6487] issued\n   by this CA.\n   The CA's manifest
      contains the names of this collection of objects,\n   together with the hash
      value of each object's contents, with the\n   single exception of the manifest
      itself.\n   The RPKI design requires that a CA be uniquely associated with a\n
      \  single key pair.  Thus, the administrative entity that is a CA\n   performs
      key rollover by generating a new CA certificate with a new\n   subject name,
      as well as a new key pair [RFC6489].  (The reason for\n   the new subject name
      is that in the context of the RPKI, the subject\n   names in all certificates
      issued by a CA are intended to be unique,\n   and because the RPKI key rollover
      procedure creates a new instance of\n   a CA with the new key, the name constraint
      implies the need for a new\n   subject name for the CA with the new key.)  In
      such cases, the entity\n   SHOULD continue to use the same repository publication
      point for both\n   CA instances during the key rollover, ensuring that the value
      of the\n   AIA extension in indirect subordinate objects that refer to the\n
      \  certificates issued by this CA remain valid across the key rollover,\n   and
      that the reissuance of subordinate certificates in a key rollover\n   is limited
      to the collection of immediate subordinate products of\n   this CA [RFC6489].
      \ In such cases, the repository publication point\n   will contain the CRL,
      manifest and subordinate certificates of both\n   CA instances.  (It is feasible
      for the entity to use distinct\n   repository publication points for the old
      and new CA keys, but, in\n   such a case, very careful coordination would be
      required with\n   subordinate CAs and EEs to ensure that the AIA pointers in
      the\n   indirect subordinate levels of the RPKI hierarchy are correctly\n   aligned
      to the subordinate products of the new CA.)\n   The following paragraphs provide
      guidelines for naming objects in a\n   CA's repository publication point:\n
      \  CRL:\n      When a CA issues a new CRL, it replaces the previous CRL (issued\n
      \     under the same CA key pair) in the repository publication point.\n      CAs
      MUST NOT continue to publish previous CRLs in the repository\n      publication
      point.  Thus, it MUST replace (overwrite) previous\n      CRLs signed by the
      same CA (instance).  A non-normative guideline\n      for naming such objects
      is that the file name chosen for the CRL\n      in the repository be a value
      derived from the public key of the\n      CA.  One such method of generating
      a CRL publication name is\n      described in Section 2.1 of [RFC4387]; convert
      the 160-bit hash of\n      a CA's public key value into a 27-character string
      using a\n      modified form of Base64 encoding, with an additional modification\n
      \     as proposed in Section 5, table 2, of [RFC4648].  The filename\n      extension
      of \".crl\" MUST be used to denote the file as a CRL.\n      Each \".crl\" file
      contains exactly one CRL encoded in DER format.\n   Manifest:\n      When a
      new instance of a manifest is published, it MUST replace\n      the previous
      manifest to avoid confusion.  CAs MUST NOT continue\n      to publish previous
      CA manifests in the repository publication\n      point.  A non-normative guideline
      for naming such objects is that\n      the filename chosen for the manifest
      in the publication repository\n      be a value derived from the public key
      part of the entity's key\n      pair, using the algorithm described for CRLs
      above for generation\n      of filenames.  The filename extension of \".mft\"
      MUST be used to\n      denote the object as a manifest.\n   Certificates:\n
      \     Within the RPKI framework, it is possible that a CA MAY issue a\n      series
      of certificates to the same subject name, the same subject\n      public key,
      and the same resource collection.  However, a relying\n      party requires
      access only to the most recently published\n      certificate in such a series.
      \ Thus, such a series of certificates\n      SHOULD share the same filename.
      \ This ensures that each successive\n      issued certificate in such a series
      effectively overwrites the\n      previous instance of the certificate.  It
      is feasible to use\n      different filenames, but this imposes a burden on
      the validating\n      user.  A non-normative guideline for naming such objects
      is for\n      the CA to adopt a (local) policy requiring a subject to use a\n
      \     unique key pair for each unique instance of a certificate series\n      issued
      to the same subject, thereby allowing the CA to use a file\n      name generation
      scheme based on the subject's public key, e.g.,\n      using the algorithm described
      above for CRLs above.  Published\n      certificates MUST use a filename extension
      of \".cer\" to denote the\n      object as a certificate.  Each \".cer\" file
      contains exactly one\n      certificate encoded in DER format.\n   Signed Objects:\n
      \     RPKI signed objects [RFC6488] are published in the repository\n      publication
      point referenced by the SIA of the CA certificate that\n      issued the EE
      certificate used to validate the digital signature\n      of the signed object
      (and are directly referenced by the SIA of\n      that EE certificate).  A general
      non-normative guideline for\n      naming such RPKI signed objects is for the
      filename of such\n      objects to be derived from the associated EE certificate's
      public\n      key, applying the algorithm described above.  Published RPKI\n
      \     signed objects MUST NOT use the filename extensions \".crl\",\n      \".mft\",
      or \".cer\".\n      One form of signed object defined at the time of publication
      of\n      this document is a Route Origination Authorization (ROA)\n      [RFC6482].
      \ Published ROAs MUST use a filename extension of \".roa\"\n      to denote
      the object as a ROA.\n"
    title: 2.2.  CA Repository Publication Points
  title: 2.  RPKI Repository Publication Point Content and Structure
- contents:
  - "3.  Resource Certificate Publication Repository Considerations\n   Each issuer
    MAY publish its issued certificates and CRL in any\n   repository.  However, there
    are a number of considerations that guide\n   the choice of a suitable repository
    publication structure:\n      *  The publication repository SHOULD be hosted on
    a highly\n         available service and high-capacity publication platform.\n
    \     *  The publication repository MUST be available using rsync\n         [RFC5781]
    [RSYNC].  Support of additional retrieval mechanisms\n         is the choice of
    the repository operator.  The supported\n         retrieval mechanisms MUST be
    consistent with the accessMethod\n         element value(s) specified in the SIA
    of the associated CA or\n         EE certificate.\n      *  Each CA repository
    publication point SHOULD contain the\n         products of this CA, including
    those objects that can be\n         verified by EE certificates that have been
    issued by this CA.\n         The signed products of related CA's that are operated
    by the\n         same entity MAY share this CA repository publication point.\n
    \        Aside from subdirectories, any other objects SHOULD NOT be\n         placed
    in a repository publication point.\n         Any such subdirectory SHOULD be the
    repository publication\n         point of a CA or EE certificate that is contained
    in the CA\n         directory.  These considerations also apply recursively to\n
    \        subdirectories of these directories.  Detection of content that\n         is
    not a CA product has the potential to cause confusion to\n         RPs, and in
    such a case RPs should exercise caution not to\n         invalidate the valid
    CA products found at the CA's repository\n         publication point.\n      *
    \ Signed objects are published in the location indicated by the\n         SIA
    field of the EE certificate used to verify the signature of\n         each object.
    \ Signed objects are published in the repository\n         publication point of
    the CA certificate that issued the EE\n         certificate.  The SIA extension
    of the EE certificate\n         references this object rather than the repository
    publication\n         directory [RFC6487].\n      *  Section 2.1 states that repository
    operators SHOULD implement\n         some form of directory management regime
    function on the\n         repository to ensure that RPs who are performing retrieval\n
    \        operations on the repository are not exposed to intermediate\n         states
    during changes to the repository and the associated\n         manifest.  Notwithstanding
    the following commentary, RPs SHOULD\n         NOT assume that a consistent repository
    and manifest state are\n         assured, and they SHOULD organize their retrieval
    operations\n         accordingly (see Section 5).\n         The manner in which
    a repository operator can implement a\n         directory update regime that mitigates
    the risk of the manifest\n         and directory contents being inconsistent,
    to some extent, is\n         dependent on the operational characteristics of the
    filesystem\n         that hosts the repository, so the following comments are
    non-\n         normative in terms of any implicit guidelines for repository\n
    \        operators.\n         A commonly used technique to avoid exposure to inconsistent\n
    \        retrieval states during updates to a large directory is to\n         batch
    a set of changes to be made, create a working copy of the\n         directory's
    contents, and then perform the batch of changes to\n         the local copy of
    the directory.  On completion, rename the\n         filesystem symbolic link of
    the repository directory name to\n         point to this working copy of the directory.
    \ The old\n         repository directory contents can be purged at a slightly
    later\n         time.  However, it is noted that the outcomes of this technique\n
    \        in terms of ensuring the integrity of client synchronization\n         functions
    performed over the directory depend on the\n         interaction between the supported
    access mechanisms and the\n         local filesystem behavior.  It is probable
    that this technique\n         will not remove all possibilities for RPs to see
    inconsistent\n         states between the manifest and the repository.  Because
    a\n         repository has the potential to be in an partially updated\n         state,
    it cannot be guaranteed to be internally self consistent\n         all the time.\n"
  title: 3.  Resource Certificate Publication Repository Considerations
- contents:
  - "4.  Certificate Reissuance and Repositories\n   If a CA certificate is reissued,
    e.g., due to changes in the set of\n   resources contained in the number resource
    extensions, it should not\n   be necessary to reissue all certificates issued
    under it.  Because\n   these certificates contain AIA extensions that point to
    the\n   publication point for the CA certificate, a CA SHOULD use a name for\n
    \  its repository publication point that persists across certificate\n   reissuance
    events.  That is, reissued CA certificates SHOULD use the\n   same repository
    publication point as previously issued CA\n   certificates having the same subject
    and subject public key, such\n   that certificate reissuance SHOULD intentionally
    overwrite the\n   previously issued certificate within the repository publication\n
    \  point.\n   It is noted in Section 2.2 that when a CA performs a key rollover,\n
    \  the entity SHOULD use a name for its repository publication point\n   that
    persists across key rollover.  In such cases, the repository\n   publication point
    will contain the CRLs and manifests of both CA\n   instances as a transient state
    in the key rollover procedure.  The\n   RPKI key rollover procedure [RFC6489]
    requires that the subordinate\n   products of the old CA be overwritten in the
    common repository\n   publication point by subordinate products issued by the
    new CA.\n"
  title: 4.  Certificate Reissuance and Repositories
- contents:
  - "5.  Synchronizing Repositories with a Local Cache\n   It is possible to perform
    the validation-related task of certificate\n   path construction using the retrieval
    of individual certificates, and\n   certificate revocation lists using online
    retrieval of individual\n   certificates, sets of candidate certificates and certificate\n
    \  revocation lists based on the AIA, SIA, and CRLDP certificate fields.\n   This
    is NOT recommended in circumstances where speed and efficiency\n   are relevant
    considerations.\n   To enable efficient validation of RPKI certificates, CRLs,
    and signed\n   objects, it is recommended that each relying party maintain a local\n
    \  repository containing a synchronized copy of all valid certificates,\n   current
    certificate revocation lists, and all related signed objects.\n   The general
    approach to repository synchronization is one of a \"top-\n   down\" walk of the
    distributed repository structure.  This commences\n   with the collection of locally
    selected trust anchor material\n   corresponding to the local choice of Trust
    Anchors, which can be used\n   to load the initial set of self-signed resource
    certificate(s) that\n   form the \"seed\" of this process [RFC6490].  The process
    then\n   populates the local repository cache with all valid certificates that\n
    \  have been issued by these issuers.  This procedure can be recursively\n   applied
    to each of these subordinate certificates.  Such a repository\n   traversal process
    SHOULD support a locally configured maximal chain\n   length from the initial
    trust anchors.  If this is not done, then\n   there might be a SIA pointer loop,
    or other degenerate forms of the\n   logical RPKI hierarchy, that would cause
    an RP to malfunction when\n   performing a repository synchronization operation
    with the RP's local\n   RPKI cache.\n   RPs SHOULD ensure that this local synchronization
    uses the retrieved\n   manifests [RFC6486] to ensure that they are synchronizing
    against a\n   current, consistent state of each repository publication point.
    \ It\n   is noted in Section 3 that when the repository publication point\n   contents
    are updated, a repository operator cannot assure RPs that\n   the manifest contents
    and the repository contents will be precisely\n   aligned at all times.  RPs SHOULD
    use a retrieval algorithm that\n   takes this potential for transient inconsistency
    into account.  For\n   the RP to mitigate this situation, possible algorithms
    include\n   performing the synchronization across the repository twice in\n   succession,
    or performing a manifest retrieval both before and after\n   the synchronization
    of the directory contents, and repeating the\n   synchronization function if the
    second copy of the manifest differs\n   from the first.\n"
  title: 5.  Synchronizing Repositories with a Local Cache
- contents:
  - "6.  Security Considerations\n   Repositories are not assumed to be integrity-protected
    databases, and\n   repository retrieval operations might be vulnerable to various
    forms\n   of \"man-in-the-middle\" attacks.  Corruption of retrieved objects is\n
    \  detectable by a relying party through the validation of the signature\n   associated
    with each retrieved object.  Replacement of newer\n   instances of an object with
    an older instance of the same object is\n   detectable through the use of manifests.
    \ Insertion of revoked,\n   deleted certificates is detected through the retrieval
    and processing\n   of CRLs at scheduled intervals.  However, even the use of manifests\n
    \  and CRLs will not allow a relying party to detect all forms of\n   substitution
    attacks based on older (but not expired) valid objects.\n   Confidentiality is
    not provided by the repository or by the signed\n   objects published in the repository.
    \ Data that is subject to\n   controlled access should not be included in signed
    objects in the\n   repository unless there is some specified mechanism used to
    ensure\n   the confidentiality of the data contained in the signed object.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  Media Types\n   IANA has registered the following two media types:\n
      \     application/rpki-manifest\n      application/rpki-roa\n   This document
      also uses the .cer and .crl file extensions from the\n   application/pkix-cert
      and application/pkix-crl media registries\n   defined in [RFC2585].\n"
    - contents:
      - "7.1.1.  application/rpki-manifest\n   MIME media type name:  application\n
        \  MIME subtype name:  rpki-manifest\n   Required parameters:  None\n   Optional
        parameters:  None\n   Encoding considerations:  binary\n   Security considerations:
        \ Carries an RPKI Manifest [RFC6486]\n   Interoperability considerations:
        \ None\n   Published specification:  This document\n   Applications that use
        this media type:  Any MIME-complaint transport\n   Additional information:\n
        \     Magic number(s):  None\n      File extension(s):  .mft\n      Macintosh
        File Type Code(s):\n   Person & email address to contact for further information:\n
        \     Geoff Huston <gih@apnic.net>\n   Intended usage:  COMMON\n   Author/Change
        controller:  Geoff Huston <gih@apnic.net>\n"
      title: 7.1.1.  application/rpki-manifest
    - contents:
      - "7.1.2.  application/rpki-roa\n   MIME media type name:  application\n   MIME
        subtype name:  rpki-roa\n   Required parameters:  None\n   Optional parameters:
        \ None\n   Encoding considerations:  binary\n   Security considerations:  Carries
        an RPKI ROA [RFC6482]\n   Interoperability considerations:  None\n   Published
        specification:  This document\n   Applications that use this media type:  Any
        MIME-complaint transport\n   Additional information:\n      Magic number(s):
        \ None\n      File extension(s):  .roa\n      Macintosh File Type Code(s):\n
        \  Person & email address to contact for further information:\n      Geoff
        Huston <gih@apnic.net>\n   Intended usage:  COMMON\n   Author/Change controller:
        \ Geoff Huston <gih@apnic.net>\n"
      title: 7.1.2.  application/rpki-roa
    title: 7.1.  Media Types
  - contents:
    - "7.2.  RPKI Repository Name Scheme Registry\n   IANA has created the \"RPKI
      Repository Name Scheme\" registry.  The\n   registry contains three-letter filename
      extensions for RPKI\n   repository objects.  The registry's contents are managed
      by IETF\n   Review [RFC5226].  The initial contents of this registry are the\n
      \  following:\n   Filename extension  RPKI Object                     Reference\n
      \     .cer             Certificate                     [RFC6481]\n      .crl
      \            Certificate Revocation List     [RFC6481]\n      .mft             Manifest
      \                       [RFC6481]\n      .roa             Route Origination
      Authorization [RFC6481]\n"
    title: 7.2.  RPKI Repository Name Scheme Registry
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   This document has benefitted from helpful review comments
    and input\n   from Stephen Kent, Matt Lepenski, Michael Elkins, Russ Housley,
    and\n   Sean Turner.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in
      RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC6482] Lepinski, M., Kent, S., and D. Kong, \"A Profile for Route\n
      \            Origin Authorizations (ROAs)\", RFC 6482, February 2012.\n   [RFC6486]
      Austein, R., Huston, G., Kent, S., and M. Lepinski,\n             \"Manifests
      for the Resource Public Key Infrastructure\n             (RPKI)\", RFC 6486,
      February 2012.\n   [RFC6487] Huston, G., Michaelson, G., and R. Loomans, \"A
      Profile for\n             X.509 PKIX Resource Certificates\", RFC 6487, February
      2012.\n   [RFC6488] Lepinski, M., Chi, A., and S. Kent, \"Signed Object Template\n
      \            for the Resource Public Key Infrastructure (RPKI)\", RFC\n             6488,
      February 2012.\n   [RSYNC]   rsync web pages, <http://rsync.samba.org/>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2585] Housley, R. and P. Hoffman, \"Internet
      X.509 Public Key\n             Infrastructure Operational Protocols: FTP and
      HTTP\", RFC\n             2585, May 1999.\n   [RFC3779] Lynn, C., Kent, S.,
      and K. Seo, \"X.509 Extensions for IP\n             Addresses and AS Identifiers\",
      RFC 3779, June 2004.\n   [RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter,
      \"Uniform\n             Resource Identifier (URI): Generic Syntax\", STD 66,
      RFC\n             3986, January 2005.\n   [RFC4387] Gutmann, P., Ed., \"Internet
      X.509 Public Key Infrastructure\n             Operational Protocols: Certificate
      Store Access via HTTP\",\n             RFC 4387, February 2006.\n   [RFC4648]
      Josefsson, S., \"The Base16, Base32, and Base64 Data\n             Encodings\",
      RFC 4648, October 2006.\n   [RFC5226] Narten, T. and H. Alvestrand, \"Guidelines
      for Writing an\n             IANA Considerations Section in RFCs\", BCP 26,
      RFC 5226, May\n             2008.\n   [RFC5280] Cooper, D., Santesson, S., Farrell,
      S., Boeyen, S.,\n             Housley, R., and W. Polk, \"Internet X.509 Public
      Key\n             Infrastructure Certificate and Certificate Revocation List\n
      \            (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5781] Weiler, S.,
      Ward, D., and R. Housley, \"The rsync URI\n             Scheme\", RFC 5781,
      February 2010.\n   [RFC6480] Lepinski, M. and S. Kent, \"An Infrastructure to
      Support\n             Secure Internet Routing\", RFC 6480, February 2012.\n
      \  [RFC6489] Huston, G., Michaelson, G., and S. Kent, \"Certification\n             Authority
      (CA) Key Rollover in the Resource Public Key\n             Infrastructure (RPKI)\",
      BCP 174, RFC 6489, February 2012.\n   [RFC6490] Huston, G., Weiler, S., Michaelson,
      G., and S. Kent,\n             \"Resource Public Key Infrastructure (RPKI) Trust
      Anchor\n             Locator\", RFC 6490, February 2012.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Geoff Huston\n   APNIC\n   EMail: gih@apnic.net\n   URI:
    \  http://www.apnic.net\n   Robert Loomans\n   APNIC\n   EMail: robertl@apnic.net\n
    \  URI:   http://www.apnic.net\n   George Michaelson\n   APNIC\n   EMail: ggm@apnic.net\n
    \  URI:   http://www.apnic.net\n"
  title: Authors' Addresses
