- title: __initial_text__
  contents:
  - "  FCAST: Object Delivery for the Asynchronous Layered Coding (ALC) and\n    \
    \       NACK-Oriented Reliable Multicast (NORM) Protocols\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces the FCAST reliable object (e.g., file)\n\
    \   delivery application.  It is designed to operate either on top of the\n  \
    \ underlying Asynchronous Layered Coding (ALC) / Layered Coding\n   Transport\
    \ (LCT) reliable multicast transport protocol or the NACK-\n   Oriented Reliable\
    \ Multicast (NORM) transport protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6968.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Notation ......................................4\n  \
    \    1.2. Definitions, Notations, and Abbreviations ..................5\n   2.\
    \ FCAST Data Formats ..............................................6\n      2.1.\
    \ Compound Object Format .....................................6\n      2.2. Carousel\
    \ Instance Descriptor Format ........................9\n   3. FCAST Principles\
    \ ...............................................12\n      3.1. FCAST Content\
    \ Delivery Service ............................12\n      3.2. Compound Object\
    \ and Metadata Transmission .................13\n      3.3. Metadata Content ..........................................13\n\
    \      3.4. Carousel Transmission .....................................15\n  \
    \    3.5. Carousel Instance Descriptor Special Object ...............15\n    \
    \  3.6. Compound Object Identification ............................17\n      3.7.\
    \ FCAST Sender Behavior .....................................18\n      3.8. FCAST\
    \ Receiver Behavior ...................................19\n   4. Requirements\
    \ for Compliant Implementations .....................20\n      4.1. Requirements\
    \ Related to the Object Metadata ...............20\n      4.2. Requirements Related\
    \ to the Carousel Instance Descriptor ..21\n   5. Security Considerations ........................................22\n\
    \      5.1. Problem Statement .........................................22\n  \
    \    5.2. Attacks against the Data Flow .............................22\n    \
    \       5.2.1. Attacks Meant to Gain Access to\n                  Confidential\
    \ Objects ...............................23\n           5.2.2. Attacks Meant to\
    \ Corrupt Objects ...................23\n      5.3. Attacks against the Session\
    \ Control Parameters and\n           Associated Building Blocks ................................24\n\
    \           5.3.1. Attacks against the Session Description ............25\n  \
    \         5.3.2. Attacks against the FCAST CID ......................25\n    \
    \       5.3.3. Attacks against the Object Metadata ................25\n      \
    \     5.3.4. Attacks against the ALC/LCT and NORM Parameters ....26\n        \
    \   5.3.5. Attacks against the Associated Building Blocks .....26\n      5.4.\
    \ Other Security Considerations .............................27\n      5.5. Minimum\
    \ Security Recommendations ..........................27\n   6. Operational Considerations\
    \ .....................................28\n   7. IANA Considerations ............................................29\n\
    \      7.1. Creation of the FCAST Object Metadata Format Registry .....29\n  \
    \    7.2. Creation of the FCAST Object Metadata Encoding Registry ...30\n    \
    \  7.3. Creation of the FCAST Object Metadata Types Registry ......30\n   8. Acknowledgments\
    \ ................................................32\n   9. References .....................................................32\n\
    \      9.1. Normative References ......................................32\n  \
    \    9.2. Informative References ....................................33\n   Appendix\
    \ A. FCAST Examples ........................................35\n     A.1. Simple\
    \ Compound Object Example .............................35\n     A.2. Carousel\
    \ Instance Descriptor Example .......................36\n   Appendix B. Additional\
    \ Metadata Transmission Mechanisms ...........37\n     B.1. Supporting Additional\
    \ Mechanisms ...........................37\n     B.2. Using NORM_INFO Messages\
    \ with FCAST/NORM ...................38\n       B.2.1. Example ................................................38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document introduces the FCAST reliable and scalable\
    \ object\n   (e.g., file) delivery application.  Two variants of FCAST exist:\n\
    \   o  FCAST/ALC, which relies on the Asynchronous Layered Coding (ALC)\n    \
    \  [RFC5775] and Layered Coding Transport (LCT) [RFC5651] reliable\n      multicast\
    \ transport protocol, and\n   o  FCAST/NORM, which relies on the NACK-Oriented\
    \ Reliable Multicast\n      (NORM) [RFC5740] transport protocol.\n   Hereafter,\
    \ the term \"FCAST\" denotes either FCAST/ALC or FCAST/NORM.\n   FCAST is not\
    \ a new protocol specification per se.  Instead, it is a\n   set of data format\
    \ specifications and instructions on how to use ALC\n   and NORM to implement\
    \ a file-casting service.\n   FCAST is expected to work in many different environments\
    \ and is\n   designed to be flexible.  The service provided by FCAST can differ\n\
    \   according to the exact conditions under which FCAST is used.  For\n   instance,\
    \ the delivery service provided by FCAST might be fully\n   reliable, or only\
    \ partially reliable, depending upon the exact way\n   FCAST is used.  Indeed,\
    \ if FCAST/ALC is used for a finite duration\n   over purely unidirectional networks\
    \ (where no feedback is possible),\n   a fully reliable service may not be possible\
    \ in practice.  This is\n   different with NORM, which can collect reception and\
    \ loss feedback\n   from receivers.  This is discussed in Section 6.\n   The delivery\
    \ service provided by FCAST might also differ in terms of\n   scalability with\
    \ respect to the number of receivers.  The FCAST/ALC\n   service is naturally\
    \ massively scalable, since neither FCAST nor ALC\n   limits the number of receivers\
    \ (there is no feedback message at all).\n   Conversely, the scalability of FCAST/NORM\
    \ is typically limited by\n   NORM itself, as NORM relies on feedback messages\
    \ from the receivers.\n   However, NORM is designed in such a way to offer a reasonably\n\
    \   scalable service (e.g., through the use of proactive Forward Error\n   Correction\
    \ (FEC) codes [RFC6363]), and so does the service provided\n   by FCAST/NORM.\
    \  This aspect is also discussed in Section 6.\n   A design goal behind FCAST\
    \ is to define a streamlined solution, in\n   order to enable lightweight implementations\
    \ of the protocol stack and\n   to limit the operational processing and storage\
    \ requirements.  A\n   consequence of this choice is that FCAST cannot be considered\
    \ a\n   versatile application capable of addressing all the possible use-\n  \
    \ cases.  On the contrary, FCAST has some intrinsic limitations.  From\n   this\
    \ point of view, it differs from the File Delivery over\n   Unidirectional Transport\
    \ (FLUTE) [RFC6726], which favors flexibility\n   at the expense of some additional\
    \ complexity.\n   A good example of the design choices meant to favor simplicity\
    \ is the\n   way FCAST manages the object metadata: by default, the metadata and\n\
    \   the object content are sent together, in a Compound Object.  This\n   solution\
    \ has many advantages in terms of simplicity, as will be\n   described later on.\
    \  However, this solution has an intrinsic\n   limitation, since it does not enable\
    \ a receiver to decide in advance,\n   before beginning the reception of the Compound\
    \ Object, whether the\n   object is of interest or not, based on the information\
    \ that may be\n   provided in the metadata.  Therefore, this document discusses\n\
    \   additional techniques that may be used to mitigate this limitation.\n   When\
    \ use-cases require that each receiver download the whole set of\n   objects sent\
    \ in the session (e.g., with mirroring tools), this\n   limitation is not considered\
    \ a problem.\n   Finally, Section 4 provides guidance for compliant implementation\
    \ of\n   the specification and identifies those features that are optional.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Definitions, Notations, and Abbreviations
  contents:
  - "1.2.  Definitions, Notations, and Abbreviations\n   This document uses the following\
    \ definitions:\n   FCAST/ALC:  denotes the FCAST application running on top of\
    \ the\n      ALC/LCT transport protocol.\n   FCAST/NORM:  denotes the FCAST application\
    \ running on top of the NORM\n      transport protocol.\n   FCAST:  denotes either\
    \ FCAST/ALC or FCAST/NORM.\n   Compound Object:  denotes an ALC or NORM transport\
    \ object composed of\n      the FCAST Header and the Object Data (some Compound\
    \ Objects may\n      not include any Object Data).\n   FCAST Header:  denotes\
    \ the header prepended to the Object Data, which\n      together form the Compound\
    \ Object.  This FCAST Header usually\n      contains the object metadata, among\
    \ other things.\n   Object Data:  denotes the original object (e.g., a file) that\
    \ forms\n      the payload of the Compound Object.\n   Carousel:  denotes the\
    \ building block that enables an FCAST sender to\n      transmit Compound Objects\
    \ in a cyclic manner.\n   Carousel Instance:  denotes a fixed set of registered\
    \ Compound\n      Objects that are sent by the carousel during a certain number\
    \ of\n      cycles.  Whenever Compound Objects need to be added or removed, a\n\
    \      new Carousel Instance is defined.\n   Carousel Instance Descriptor (CID):\
    \  denotes a special object that\n      lists the Compound Objects that comprise\
    \ a given Carousel\n      Instance.\n   Carousel Instance IDentifier (CIID): \
    \ numeric value that identifies a\n      Carousel Instance.\n   Carousel Cycle:\
    \  denotes a transmission round within which all the\n      Compound Objects registered\
    \ in the Carousel Instance are\n      transmitted a certain number of times. \
    \ By default, Compound\n      Objects are transmitted once per cycle, but higher\
    \ values, which\n      might differ on a per-object basis, are possible.\n   Transport\
    \ Object Identifier (TOI):  denotes the numeric identifier\n      associated with\
    \ a specific object by the underlying transport\n      protocol.  In the case\
    \ of ALC, this corresponds to the TOI\n      described in [RFC5651].  In the case\
    \ of NORM, this corresponds to\n      the NormTransportId described in [RFC5740].\n\
    \   FEC Object Transmission Information (FEC OTI):  FEC information\n      associated\
    \ with an object and that is essential for the FEC\n      decoder to decode a\
    \ specific object.\n"
- title: 2.  FCAST Data Formats
  contents:
  - "2.  FCAST Data Formats\n   This section details the various data formats used\
    \ by FCAST.\n"
- title: 2.1.  Compound Object Format
  contents:
  - "2.1.  Compound Object Format\n   In an FCAST session, Compound Objects are constructed\
    \ by prepending\n   the FCAST Header (which usually contains the metadata of the\
    \ object)\n   to the Object Data (see Section 3.2).  Figure 1 illustrates the\n\
    \   associated format.  All multi-byte fields MUST be in network (Big\n   Endian)\
    \ byte order.\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ^\n   | Ver\
    \ |Resvd|G|C| MDFmt | MDEnc |           Checksum            |  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  |\n   |                      FCAST Header Length                      |  h\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|  d\n   |\
    \               Object Metadata (variable length)               |  r\n   |   \
    \                            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |\n   |      \
    \                         |      Padding (optional)       |  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  v\n   |                                                               |\n \
    \  .          Object Data (optional, variable length)              .\n   .   \
    \                                                            .\n   .         \
    \                                                      .\n                   \
    \  Figure 1: Compound Object Format\n   The FCAST Header fields are:\n   +------------+------------------------------------------------------+\n\
    \   |      Field | Description                                          |\n  \
    \ +------------+------------------------------------------------------+\n   |\
    \    Version | 3-bit field that MUST be set to 0 in this            |\n   |  \
    \          | specification and that indicates the FCAST protocol  |\n   |    \
    \        | version number.                                      |\n   |      \
    \      |                                                      |\n   |   Reserved\
    \ | 3-bit field that MUST be set to 0 in this            |\n   |            |\
    \ specification and is reserved for future use.        |\n   |            | Receivers\
    \ MUST ignore this field.                    |\n   |            |            \
    \                                          |\n   |          G | 1-bit field that,\
    \ when set to 1, indicates that the  |\n   |            | checksum encompasses\
    \ the whole Compound Object       |\n   |            | (Global checksum).  When\
    \ set to 0, this field        |\n   |            | indicates that the checksum\
    \ encompasses only the     |\n   |            | FCAST Header.                \
    \                        |\n   |            |                                \
    \                      |\n   |          C | 1-bit field that, when set to 1, indicates\
    \ that the  |\n   |            | object is a CID.  When set to 0, this field \
    \         |\n   |            | indicates that the transported object is a standard\
    \  |\n   |            | object.                                              |\n\
    \   |            |                                                      |\n  \
    \ |   Metadata | 4-bit field that defines the format of the Object    |\n   |\
    \     Format | Metadata field (see Section 7).  An HTTP/1.1         |\n   |  \
    \  (MDFmt) | metainformation format [RFC2616] MUST be supported   |\n   |    \
    \        | and is associated to value 0.  Other formats (e.g.,  |\n   |      \
    \      | XML) may be defined in the future.                   |\n   |        \
    \    |                                                      |\n   |   Metadata\
    \ | 4-bit field that defines the optional encoding of    |\n   |   Encoding |\
    \ the Object Metadata field (see Section 7).  Two      |\n   |    (MDEnc) | values\
    \ are currently defined.  A value of 0          |\n   |            | indicates\
    \ that the field contains UTF-8 encoded      |\n   |            | [RFC3629] text.\
    \  A value of 1 indicates that the     |\n   |            | field contains GZIP\
    \ [RFC1952] compressed UTF-8       |\n   |            | encoded text.        \
    \                                |\n   |            |                        \
    \                              |\n   |   Checksum | 16-bit field that contains\
    \ the checksum computed     |\n   |            | over either the whole Compound\
    \ Object (when G is set |\n   |            | to 1) or over the FCAST Header (when\
    \ G is set to 0), |\n   |            | using the Internet checksum algorithm specified\
    \ in   |\n   |            | [RFC1071].  More precisely, the Checksum field is\
    \    |\n   |            | the 16-bit one's complement of the one's complement\
    \  |\n   |            | sum of all 16-bit words to be considered.  If a      |\n\
    \   |            | segment contains an odd number of octets to be       |\n  \
    \ |            | checksummed, the last octet is padded on the right   |\n   |\
    \            | with zeros to form a 16-bit word for checksum        |\n   |  \
    \          | purposes (this pad is not transmitted).  While       |\n   |    \
    \        | computing the checksum, the Checksum field itself    |\n   |      \
    \      | MUST be set to zero.                                 |\n   |        \
    \    |                                                      |\n   |      FCAST\
    \ | 32-bit field indicating total length (in bytes) of   |\n   |     Header |\
    \ all fields of the FCAST Header, except the optional  |\n   |     Length | padding.\
    \  An FCAST Header Length field set to value  |\n   |            | 8 means that\
    \ there is no metadata included.  When    |\n   |            | this size is not\
    \ a multiple of 32-bit words and when |\n   |            | the FCAST Header is\
    \ followed by non-null Object      |\n   |            | Data, padding MUST be\
    \ added.  It should be noted     |\n   |            | that the Object Metadata\
    \ field maximum size is equal |\n   |            | to (2^32 - 8) bytes.      \
    \                           |\n   |            |                             \
    \                         |\n   |     Object | Variable-length field that contains\
    \ the metadata     |\n   |   Metadata | associated to the object.  The format\
    \ and encoding   |\n   |            | of this field are defined by the MDFmt and\
    \ MDEnc     |\n   |            | fields, respectively.  With the default format\
    \ and   |\n   |            | encoding, the Object Metadata field, if not empty,\
    \   |\n   |            | MUST contain UTF-8 encoded text that follows the    \
    \ |\n   |            | \"TYPE\" \":\" \"VALUE\" \"<CR-LF>\" format used in HTTP/1.1\
    \ |\n   |            | for metainformation [RFC2616].  The various          |\n\
    \   |            | metadata items can appear in any order.  The         |\n  \
    \ |            | receiver MUST NOT assume that this string is NULL-   |\n   |\
    \            | terminated.  When no metadata is communicated, this  |\n   |  \
    \          | field MUST be empty and the FCAST Header Length MUST |\n   |    \
    \        | be equal to 8.                                       |\n   |      \
    \      |                                                      |\n   |    Padding\
    \ | Optional, variable-length field of zero-value bytes  |\n   |            |\
    \ to align the start of the Object Data to a 32-bit    |\n   |            | boundary.\
    \  Padding is only used when the FCAST       |\n   |            | Header Length\
    \ value, in bytes, is not a multiple of  |\n   |            | 4 and when the FCAST\
    \ Header is followed by non-null  |\n   |            | Object Data.          \
    \                               |\n   +------------+------------------------------------------------------+\n\
    \   The FCAST Header is then followed by the Object Data, i.e., either an\n  \
    \ original object (possibly encoded by FCAST) or a CID.  Note that the\n   length\
    \ of the Object Data content is the ALC or NORM transported\n   object length\
    \ (e.g., as specified by the FEC OTI) minus the FCAST\n   Header Length and optional\
    \ padding, if any.\n"
- title: 2.2.  Carousel Instance Descriptor Format
  contents:
  - "2.2.  Carousel Instance Descriptor Format\n   In an FCAST session, a CID MAY\
    \ be sent in order to carry the list of\n   Compound Objects that are part of\
    \ a given Carousel Instance (see\n   Section 3.5).  The format of the CID that\
    \ is sent as a special\n   Compound Object is given in Figure 2.  Being a special\
    \ case of\n   Compound Object, this format is in line with the format described\
    \ in\n   Section 2.1.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ^\n\
    \   | Ver |Resvd|G|C| MDFmt | MDEnc |           Checksum            |  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  |\n   |                      FCAST Header Length                      |  h\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|  d\n   |\
    \               Object Metadata (variable length)               |  r\n   |   \
    \                            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |\n   |      \
    \                         |      Padding (optional)       |  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  v\n   .                                                               .  ^\n\
    \   .                Object List (variable length)                  .  |\n   .\
    \                                                               .  o\n   .   \
    \                                            +-+-+-+-+-+-+-+-+  b\n   .      \
    \                                         |                  j\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                  v\n               Figure 2: Carousel Instance Descriptor Format\n\
    \   Because the CID is transmitted as a special Compound Object, the\n   following\
    \ CID-specific metadata entries are defined and MUST be\n   supported:\n   o \
    \ Fcast-CID-Complete: this is an optional entry that, when set to\n      \"Fcast-CID-Complete:\
    \ 1\", indicates no new object (if we ignore CID\n      Compound Objects) in addition\
    \ to the ones whose TOIs are listed in\n      this CID or the ones that have been\
    \ listed in the previous CID(s),\n      will be sent in the future.  Conversely,\
    \ if it is set to\n      \"Fcast-CID-Complete: 0\", or if this entry is absent,\
    \ it indicates\n      that the session is not complete.  An FCAST sender MUST\
    \ NOT use\n      any other value for this entry.\n   o  Fcast-CID-ID: this entry\
    \ contains the Carousel Instance\n      IDentifier, or CIID.  It starts from 0\
    \ upon FCAST session creation\n      and is incremented by 1 for each new Carousel\
    \ Instance.  This\n      entry is optional if the FCAST session consists of a\
    \ single,\n      complete Carousel Instance (no need for the FCAST sender to\n\
    \      specify it and for the FCAST receiver to process it).  In all\n      other\
    \ cases, this entry MUST be defined.  In particular, the CIID\n      is used by\
    \ the TOI equivalence mechanism, thanks to which any\n      object is uniquely\
    \ identified, even if the TOI is updated (e.g.,\n      after re-enqueuing the\
    \ object with NORM).  The Fcast-CID-ID value\n      can also be useful for detecting\
    \ possible gaps in the Carousel\n      Instances, for instance, gaps caused by\
    \ long disconnection\n      periods.  Finally, it can also be useful for avoiding\
    \ problems\n      when TOI wrapping to 0 takes place to differentiate the various\n\
    \      incarnations of the TOIs if need be.\n   The following standard metadata\
    \ entry types are also used\n   (Section 3.3):\n   o  Content-Length: specifies\
    \ the size in bytes of the Object List,\n      before any content encoding (if\
    \ any).\n   o  Content-Encoding: specifies the optional encoding of the Object\n\
    \      List, performed by FCAST.\n   An empty Object List is valid and indicates\
    \ that the current Carousel\n   Instance does not include any objects (Section\
    \ 3.5).  This can be\n   specified by using the following metadata entry:\n  \
    \       Content-Length: 0\n   or simply by leaving the Object List empty.  In\
    \ both cases, padding\n   MUST NOT be used, and consequently the ALC or NORM transported\
    \ object\n   length (e.g., as specified by the FEC OTI) minus the FCAST Header\n\
    \   Length equals zero.\n   The Object List, when non-empty and with MDEnc=0,\
    \ is UTF-8-encoded\n   text that is not necessarily NULL-terminated.  It can contain\
    \ two\n   things:\n   o  a list of TOI values, and\n   o  a list of TOI equivalences.\n\
    \   A list of TOIs included in the current Carousel Instance is specified\n  \
    \ as an ASCII string containing comma-delimited individual TOI values\n   and/or\
    \ TOI intervals.  Individual TOIs consist of a single integer\n   value, while\
    \ TOI intervals are a hyphen-delimited pair of TOI values\n   to indicate an inclusive\
    \ range of TOI values (e.g., \"1,2,4-6\" would\n   indicate the list of TOI values\
    \ of 1, 2, 4, 5, and 6).  For a TOI\n   interval indicated by \"TOI_a-TOI_b\"\
    , the \"TOI_a\" value MUST be\n   strictly inferior to the \"TOI_b\" value.  If\
    \ a TOI wrapping to 0\n   occurs in an interval, then two TOI intervals MUST be\
    \ specified:\n   TOI_a-MAX_TOI and 0-TOI_b.\n   This string can also contain the\
    \ TOI equivalences, if any.  The\n   format is a comma-separated list of equivalence\
    \ TOI value pairs with\n   a delimiting equals sign '=' to indicate the equivalence\
    \ assignment\n   (e.g., \" newTOI \"=\" 1stTOI \"/\" 1stCIID \").  Each equivalence\n\
    \   indicates that the new TOI, for the current Carousel Instance, is\n   equivalent\
    \ to (i.e., refers to the same object as) the provided\n   identifier, 1stTOI,\
    \ for the Carousel Instance of ID 1stCIID.  In the\n   case of the NORM protocol,\
    \ where NormTransportId values need to\n   monotonically increase for NACK-based\
    \ protocol operation, this allows\n   an object from a prior Carousel Instance\
    \ to be relisted in a\n   subsequent Carousel Instance with the receiver set informed\
    \ of the\n   equivalence so that unnecessary retransmission requests can be\n\
    \   avoided.\n   The ABNF [RFC5234] is as follows:\n   cid-list     =  *(list-elem\
    \ *( \",\" list-elem))\n   list-elem    =  toi-elem / toieq-elem\n   toi-elem\
    \     =  toi-value / toi-interval\n   toi-value    =  1*DIGIT\n   toi-interval\
    \ =  toi-value \"-\" toi-value\n                   ; additionally, the first toi-value\
    \ MUST be\n                   ; strictly inferior to the second toi-value\n  \
    \ toieq-elem   =  \"(\" toi-value \"=\" toi-value \"/\" ciid-value \")\"\n   ciid-value\
    \   =  1*DIGIT\n   DIGIT        =  %x30-39\n                   ; a digit between\
    \ 0 and 9, inclusive\n   For readability purposes and to simplify processing,\
    \ the TOI\n   values in the list MUST be given in increasing order, handling wrap\n\
    \   of the TOI space appropriately.  TOI equivalence elements MUST be\n   grouped\
    \ together at the end of the list in increasing newTOI order.\n   Specifying a\
    \ TOI equivalence for a given newTOI relieves the sender\n   from specifying newTOI\
    \ explicitly in the TOI list.  A receiver MUST\n   be able to handle situations\
    \ where the same TOI appears both in the\n   TOI value and TOI equivalence lists.\
    \  Finally, a given TOI value or\n   TOI equivalence item MUST NOT be included\
    \ multiple times in either\n   list.\n   For instance, the following Object List\
    \ specifies that the current\n   Carousel Instance is composed of 8 objects, and\
    \ that TOIs 100 to 104\n   are equivalent to TOIs 10 to 14 of Carousel Instance\
    \ ID 2 and refer\n   to the same objects:\n   97,98,99,(100=10/2),(101=11/2),(102=12/2),(103=13/2),(104=14/2)\n\
    \   or equivalently:\n   97-104,(100=10/2),(101=11/2),(102=12/2),(103=13/2),(104=14/2)\n"
- title: 3.  FCAST Principles
  contents:
  - "3.  FCAST Principles\n   This section details the principles of FCAST.\n"
- title: 3.1.  FCAST Content Delivery Service
  contents:
  - "3.1.  FCAST Content Delivery Service\n   The basic goal of FCAST is to transmit\
    \ objects to a group of\n   receivers in a reliable way, where the receiver set\
    \ may be restricted\n   to a single receiver or may include possibly a very large\
    \ number of\n   receivers.  FCAST supports two forms of operation:\n   1.  FCAST/ALC,\
    \ where the FCAST application works on top of the\n       ALC/LCT reliable multicast\
    \ transport protocol, without any\n       feedback from the receivers, and\n \
    \  2.  FCAST/NORM, where the FCAST application works on top of the NORM\n    \
    \   transport protocol, which requires positive/negative\n       acknowledgments\
    \ from the receivers.\n   This specification is designed such that both forms\
    \ of operation\n   share as much commonality as possible.  Section 6 discusses\
    \ some\n   operational aspects and the content delivery service that is provided\n\
    \   by FCAST for a given use-case.\n"
- title: 3.2.  Compound Object and Metadata Transmission
  contents:
  - "3.2.  Compound Object and Metadata Transmission\n   FCAST carries metadata elements\
    \ by prepending them to the object they\n   refer to.  As a result, a Compound\
    \ Object is created that is composed\n   of an FCAST Header followed by the Object\
    \ Data (Figure 3).  This\n   header is itself composed of the object metadata\
    \ (if any) as well as\n   several fields (e.g., to indicate format, encoding,\
    \ or boundaries\n   (Section 2.1)).\n   <------------------------ Compound Object\
    \ ----------------------->\n   +-------------------------+--------------------------------------+\n\
    \   |       FCAST Header      |              Object Data             |\n   | (can\
    \ include metadata)  |       (can be encoded by FCAST)      |\n   +-------------------------+--------------------------------------+\n\
    \                   Figure 3: Compound Object Composition\n   Attaching the metadata\
    \ to the object is an efficient solution, since\n   it guarantees that metadata\
    \ are received along with the associated\n   object, and it allows the transport\
    \ of the metadata to benefit from\n   any transport-layer erasure protection of\
    \ the Compound Object (e.g.,\n   using FEC encoding and/or NACK-based repair).\
    \  However, a limit of\n   this scheme is that a client does not know the metadata\
    \ of an object\n   before beginning its reception, and in the case of erasures\
    \ affecting\n   the metadata, not until the object decoding is completed.  The\n\
    \   details of course depend upon the transport protocol and the FEC code\n  \
    \ used.\n   Appendix B describes extensions that provide additional means to\n\
    \   carry metadata, e.g., to communicate metadata ahead of time.\n"
- title: 3.3.  Metadata Content
  contents:
  - "3.3.  Metadata Content\n   The following metadata types are defined in [RFC2616]:\n\
    \   o  Content-Location: the URI of the object, which gives the name and\n   \
    \   location of the object.\n   o  Content-Type: a string that contains the MIME\
    \ type of the object.\n   o  Content-Length: an unsigned 64-bit integer that contains\
    \ the size\n      in bytes of the initial object, before any content encoding\
    \ (if\n      any) and without considering the FCAST Header.  Note that the use\n\
    \      of certain FEC schemes MAY further limit the maximum value of the\n   \
    \   object.\n   o  Content-Encoding: a string that contains the optional encoding\
    \ of\n      the object performed by FCAST.  For instance:\n            Content-Encoding:\
    \ gzip\n      indicates that the object has been encoded with GZIP [RFC1952].\n\
    \      If there is no Content-Encoding entry, the receiver MUST assume\n     \
    \ that FCAST did not modify the original encoding of the object\n      (default).\n\
    \   The following additional metadata types are defined to check object\n   integrity:\n\
    \   o  Fcast-Obj-Digest-SHA256: a string that contains the \"base64\"\n      [RFC4648]\
    \ encoding of the SHA-256 message digest of the object\n      [RFC3174] [RFC6234],\
    \ before any content encoding is applied (if\n      any) and without considering\
    \ the FCAST Header.  This digest is\n      meant to protect from transmission\
    \ and processing errors, not from\n      deliberate attacks by an intelligent\
    \ attacker (see Section 5).\n      This digest only protects the object, not the\
    \ header, and\n      therefore not the metadata.  A separate checksum is provided\
    \ for\n      that purpose (Section 2.1).\n   o  Fcast-Obj-Digest-SHA1: similar\
    \ to Fcast-Obj-Digest-SHA256, except\n      that SHA-256 is replaced by SHA-1.\
    \  An FCAST sender MAY include\n      both an Fcast-Obj-Digest-SHA1 and an Fcast-Obj-Digest-SHA256\n\
    \      message digest in the metadata, in order to let a receiver select\n   \
    \   the most appropriate algorithm (e.g., depending on local\n      processing\
    \ power).\n   The following additional metadata types are used for dealing with\n\
    \   very large objects (e.g., objects that largely exceed the working\n   memory\
    \ of a receiver).  When this happens, the metadata associated to\n   each sub-object\
    \ MUST include the following entries:\n   o  Fcast-Obj-Slice-Nb: an unsigned 32-bit\
    \ integer that contains the\n      total number of slices.  A value greater than\
    \ 1 indicates that\n      this object is the result of a split of the original\
    \ object.\n   o  Fcast-Obj-Slice-Idx: an unsigned 32-bit integer that contains\
    \ the\n      slice index (in the {0 .. SliceNb - 1} interval).\n   o  Fcast-Obj-Slice-Offset:\
    \ an unsigned 64-bit integer that contains\n      the offset at which this slice\
    \ starts within the original object.\n   Future IANA assignments to extend the\
    \ set of metadata types supported\n   by FCAST are to be made through Expert Review\
    \ [RFC5226].\n"
- title: 3.4.  Carousel Transmission
  contents:
  - "3.4.  Carousel Transmission\n   A set of FCAST Compound Objects scheduled for\
    \ transmission is\n   considered a logical \"Carousel\".  A given \"Carousel Instance\"\
    \ is\n   comprised of a fixed set of Compound Objects.  Whenever the FCAST\n \
    \  application needs to add new Compound Objects to or remove old\n   Compound\
    \ Objects from the transmission set, a new Carousel Instance\n   is defined, since\
    \ the set of Compound Objects changes.  Because of\n   the native object multiplexing\
    \ capability of both ALC and NORM, a\n   sender and receiver(s) are both capable\
    \ of multiplexing and\n   demultiplexing FCAST Compound Objects.\n   For a given\
    \ Carousel Instance, one or more transmission cycles are\n   possible.  During\
    \ each cycle, all of the Compound Objects comprising\n   the carousel are sent.\
    \  By default, each object is transmitted once\n   per cycle.  However, in order\
    \ to allow different levels of priority,\n   some objects MAY be transmitted more\
    \ often than others during a cycle\n   and/or benefit from higher FEC protection\
    \ than others.  For example,\n   this can be the case for the CID objects (Section\
    \ 3.5), where extra\n   protection can benefit overall carousel integrity.  For\
    \ some FCAST\n   usage (e.g., a unidirectional \"push\" mode), a Carousel Instance\
    \ may\n   be sent in a single transmission cycle.  In other cases, it may be\n\
    \   conveyed in a large number of transmission cycles (e.g., in\n   \"on-demand\"\
    \ mode, where objects are made available for download\n   during a long period\
    \ of time).\n"
- title: 3.5.  Carousel Instance Descriptor Special Object
  contents:
  - "3.5.  Carousel Instance Descriptor Special Object\n   The FCAST sender can transmit\
    \ an OPTIONAL CID.  The CID carries the\n   list of the Compound Objects that\
    \ are part of a given Carousel\n   Instance by specifying their respective Transport\
    \ Object Identifiers\n   (TOIs).  However, the CID does not describe the objects\
    \ themselves\n   (i.e., there is no metadata).  Additionally, the CID MAY include\
    \ an\n   \"Fcast-CID-Complete: 1\" metadata entry to indicate that no further\n\
    \   modification to the enclosed list will be done in the future.\n   Finally,\
    \ the CID MAY include a Carousel Instance ID (CIID) that\n   identifies the Carousel\
    \ Instance it pertains to.  These aspects are\n   discussed in Section 2.2.\n\
    \   There is no reserved TOI value for the CID Compound Object itself,\n   since\
    \ this special object is regarded by ALC/LCT or NORM as a\n   standard object.\
    \  On the contrary, the nature of this object (CID) is\n   indicated by means\
    \ of a specific FCAST Header field (the \"C\" flag\n   from Figure 1) so that\
    \ it can be recognized and processed by the\n   FCAST application as needed. \
    \ A direct consequence is that since a\n   receiver does not know in advance which\
    \ TOI will be used for the\n   following CID (in the case of a dynamic session),\
    \ it MUST NOT filter\n   out packets that are not in the current CID's TOI list.\
    \  Said\n   differently, the goal of the CID is not to set up ALC or NORM packet\n\
    \   filters (this mechanism would not be secure in any case).\n   The use of a\
    \ CID remains OPTIONAL.  If it is not used, then the\n   clients progressively\
    \ learn what files are part of the Carousel\n   Instance by receiving ALC or NORM\
    \ packets with new TOIs.  However,\n   using a CID has several benefits:\n   o\
    \  When an \"Fcast-CID-Complete\" metadata entry set to\n      \"Fcast-CID-Complete:\
    \ 1\" is included, the receivers know when they\n      can leave the session,\
    \ i.e., when they have received all the\n      objects that are part of the last\
    \ Carousel Instance of this\n      delivery session.\n   o  In the case of a session\
    \ with a dynamic set of objects, the sender\n      can reliably inform the receivers\
    \ that some objects have been\n      removed from the carousel with the CID. \
    \ This solution is more\n      robust than the Close Object \"B\" flag of ALC/LCT,\
    \ since a client\n      with intermittent connectivity might lose all the packets\n\
    \      containing this \"B\" flag.  And while NORM provides a robust object\n\
    \      cancellation mechanism in the form of its NORM_CMD(SQUELCH)\n      message\
    \ in response to receiver NACK repair requests, the use of\n      the CID provides\
    \ an additional means for receivers to learn of\n      objects for which it is\
    \ futile to request repair.\n   o  The TOI equivalence (Section 3.6) is signaled\
    \ within the CID.\n   During idle periods, when the Carousel Instance does not\
    \ contain any\n   object, a CID with an empty TOI list MAY be transmitted.  In\
    \ that\n   case, a new Carousel Instance ID MUST be used to differentiate this\n\
    \   (empty) Carousel Instance from the other ones.  This mechanism can be\n  \
    \ useful to inform the receivers that:\n   o  all the previously sent objects\
    \ have been removed from the\n      carousel.  This therefore improves the robustness\
    \ of FCAST even\n      during \"idle\" periods.\n   o  the session is still active\
    \ even if there is currently no content\n      being sent.  Said differently,\
    \ it can be used as a heartbeat\n      mechanism.  If no \"Fcast-CID-Complete\"\
    \ metadata entry is included\n      (or if set to \"Fcast-CID-Complete: 0\"),\
    \ it informs the receivers\n      that the Carousel Instance may be modified and\
    \ that new objects\n      could be sent in the future.\n"
- title: 3.6.  Compound Object Identification
  contents:
  - "3.6.  Compound Object Identification\n   The FCAST Compound Objects are directly\
    \ associated with the object-\n   based transport service that the ALC and NORM\
    \ protocols provide.  In\n   each protocol, the packets containing transport object\
    \ content are\n   labeled with a numeric transport object identifier: the TOI\
    \ with ALC,\n   and the NormTransportId with NORM.  For the purposes of this\n\
    \   document, this identifier in either case (ALC or NORM) is referred to\n  \
    \ as the TOI.\n   There are several differences between ALC and NORM:\n   o  ALC's\
    \ use of the TOI is rather flexible, since several TOI field\n      sizes are\
    \ possible (from 16 to 112 bits); since this size can be\n      changed at any\
    \ time, on a per-packet basis; and since the\n      management of the TOI is totally\
    \ free as long as each object is\n      associated to a unique TOI (if no wraparound\
    \ occurred).\n   o  NORM's use of the TOI serves a more \"directive\" purpose,\
    \ since the\n      TOI field is 16 bits long and since TOIs MUST be managed\n\
    \      sequentially.\n   In both NORM and ALC, it is possible that the transport\n\
    \   identification space eventually wraps for long-lived sessions\n   (especially\
    \ with NORM, where this phenomenon is expected to happen\n   more frequently).\
    \  This can possibly introduce some ambiguity in\n   FCAST object identification\
    \ if a sender retains some older objects in\n   newer Carousel Instances with\
    \ updated object sets.  To avoid\n   ambiguity, the active TOIs (i.e., the TOIs\
    \ corresponding to objects\n   being transmitted) can only occupy half of the\
    \ TOI sequence space.\n   If an old object whose TOI has fallen outside the current\
    \ window\n   needs to be transmitted again, a new TOI must be used for it.  In\
    \ the\n   case of NORM, this constraint limits to 32768 the maximum number of\n\
    \   objects that can be part of any Carousel Instance.\n   In order to allow receivers\
    \ to properly combine the transport packets\n   with a newly assigned TOI to those\
    \ associated to the previously\n   assigned TOI, a mechanism is required to equate\
    \ the objects with the\n   new and the old TOIs.  This mechanism consists of signaling,\
    \ within\n   the CID, that the newly assigned TOI for the current Carousel\n \
    \  Instance is equivalent to the TOI used within a previous Carousel\n   Instance.\
    \  By convention, the reference tuple for any object is the\n   {TOI; CIID} tuple\
    \ used for its first transmission within a Carousel\n   Instance.  This tuple\
    \ MUST be used whenever a TOI equivalence is\n   provided.  Section 2.2 details\
    \ how to describe these TOI\n   equivalences.\n"
- title: 3.7.  FCAST Sender Behavior
  contents:
  - "3.7.  FCAST Sender Behavior\n   This section provides an informative description\
    \ of expected FCAST\n   sender behavior.  The following operations can take place\
    \ at a\n   sender:\n   1.  The user (or another application) selects a set of\
    \ objects (e.g.,\n       files) to deliver and submits them, along with their\
    \ metadata, to\n       the FCAST application.\n   2.  For each object, FCAST creates\
    \ the Compound Object and registers\n       it in the Carousel Instance.\n   3.\
    \  The user then informs FCAST that all the objects of the set have\n       been\
    \ submitted.  If the user knows that no new object will be\n       submitted in\
    \ the future (i.e., if the session's content is now\n       complete), the user\
    \ informs FCAST.  Finally, the user specifies\n       how many transmission cycles\
    \ are desired (this number may be\n       infinite).\n   4.  At this point, the\
    \ FCAST application knows the full list of\n       Compound Objects that are part\
    \ of the Carousel Instance and can\n       create a CID if desired, possibly with\
    \ \"Fcast-CID-Complete: 1\" if\n       no new objects will be sent in the future.\n\
    \   5.  The FCAST application can now define a transmission schedule of\n    \
    \   these Compound Objects, including the optional CID.  This\n       schedule\
    \ defines in which order the packets of the various\n       Compound Objects should\
    \ be sent.  This document does not specify\n       any scheme.  This is left to\
    \ the developer within the provisions\n       of the underlying ALC or NORM protocol\
    \ used and the knowledge of\n       the target use-case.\n   6.  The FCAST application\
    \ then starts the carousel transmission, for\n       the number of cycles specified.\
    \  Transmissions take place until:\n       *  the desired number of transmission\
    \ cycles has been reached, or\n       *  the user wants to prematurely stop the\
    \ transmissions, or\n       *  the user wants to add one or several new objects\
    \ to the\n          carousel, or on the contrary wants to remove old objects from\n\
    \          the carousel.  In that case, a new Carousel Instance must be\n    \
    \      created.\n   7.  If the session is not finished, then continue at Step\
    \ 1 above.\n"
- title: 3.8.  FCAST Receiver Behavior
  contents:
  - "3.8.  FCAST Receiver Behavior\n   This section provides an informative description\
    \ of expected FCAST\n   receiver behavior.  The following operations can take\
    \ place at a\n   receiver:\n   1.  The receiver joins the session and collects\
    \ incoming packets.\n   2.  If the header portion of a Compound Object is entirely\
    \ received\n       (which may happen before receiving the entire object with some\n\
    \       ALC/NORM configurations), or if the metadata is sent by means of\n   \
    \    another mechanism prior to the object, the receiver processes the\n     \
    \  metadata and chooses whether or not to continue to receive the\n       object\
    \ content.\n   3.  When a Compound Object has been entirely received, the receiver\n\
    \       processes the header, retrieves the object metadata, perhaps\n       decodes\
    \ the metadata, and processes the object accordingly.\n   4.  When a CID is received,\
    \ as indicated by the \"C\" flag set in the\n       FCAST Header, the receiver\
    \ decodes the CID and retrieves the list\n       of objects that are part of the\
    \ current Carousel Instance.  This\n       list can be used to remove objects\
    \ sent in a previous Carousel\n       Instance that might not have been totally\
    \ decoded and that are no\n       longer part of the current Carousel Instance.\n\
    \   5.  When a CID is received, the receiver also retrieves the list of\n    \
    \   TOI equivalences, if any, and takes appropriate measures, for\n       instance,\
    \ by informing the transport layer.\n   6.  When a receiver receives a CID with\
    \ an \"Fcast-CID-Complete\"\n       metadata entry set to \"Fcast-CID-Complete:\
    \ 1\" and has\n       successfully received all the objects of the current Carousel\n\
    \       Instance, it can safely exit from the current FCAST session.\n   7.  Otherwise,\
    \ continue at Step 2 above.\n"
- title: 4.  Requirements for Compliant Implementations
  contents:
  - "4.  Requirements for Compliant Implementations\n   This section lists the features\
    \ that any compliant FCAST/ALC or\n   FCAST/NORM implementation MUST support,\
    \ and those that remain\n   OPTIONAL, e.g., in order to enable some optimizations\
    \ for a given\n   use-case, at a receiver.\n"
- title: 4.1.  Requirements Related to the Object Metadata
  contents:
  - "4.1.  Requirements Related to the Object Metadata\n   Metadata transmission mechanisms:\n\
    \   +------------------+------------------------------------------------+\n  \
    \ | Feature          | Status                                         |\n   +------------------+------------------------------------------------+\n\
    \   | metadata         | An FCAST sender MUST send metadata with the    |\n  \
    \ | transmission     | in-band mechanism provided by FCAST, i.e.,     |\n   |\
    \ using FCAST's    | within the FCAST Header.  All the FCAST        |\n   | in-band\
    \          | receivers MUST be able to process metadata     |\n   | mechanism\
    \        | sent with this FCAST in-band mechanism.        |\n   |            \
    \      |                                                |\n   | metadata     \
    \    | In addition to the FCAST in-band transmission  |\n   | transmission   \
    \  | of metadata, an FCAST sender MAY send a subset |\n   | using other      |\
    \ or all of the metadata using another           |\n   | mechanisms       | mechanism.\
    \  Supporting this mechanism in a     |\n   |                  | compliant FCAST\
    \ receiver is OPTIONAL, and its  |\n   |                  | use is OPTIONAL too.\
    \  An FCAST receiver MAY    |\n   |                  | support this mechanism\
    \ and take advantage of   |\n   |                  | the metadata sent in this\
    \ way.  If that is     |\n   |                  | not the case, the FCAST receiver\
    \ will receive  |\n   |                  | and process metadata sent in-band anyway.\
    \      |\n   |                  | See Appendix B.                            \
    \    |\n   +------------------+------------------------------------------------+\n\
    \   Metadata format and encoding:\n   +-----------------+-------------------------------------------------+\n\
    \   | Feature         | Status                                          |\n  \
    \ +-----------------+-------------------------------------------------+\n   |\
    \ Metadata Format | All FCAST implementations MUST support an       |\n   | (MDFmt\
    \ field)   | HTTP/1.1 metainformation format [RFC2616].      |\n   |         \
    \        |                                                 |\n   | Metadata  \
    \      | All FCAST implementations MUST support both     |\n   | Encoding (MDEnc\
    \ | UTF-8 encoded text and GZIP compressed          |\n   | field)          |\
    \ [RFC1952] UTF-8 encoded text for the Object     |\n   |                 | Metadata\
    \ field.                                 |\n   +-----------------+-------------------------------------------------+\n\
    \   Metadata items (Section 3.3):\n   +-------------------------------+-----------------------------------+\n\
    \   | Feature                       | Status                            |\n  \
    \ +-------------------------------+-----------------------------------+\n   |\
    \ Content-Location              | MUST be supported.                |\n   |  \
    \                             |                                   |\n   | Content-Type\
    \                  | MUST be supported.                |\n   |               \
    \                |                                   |\n   | Content-Length  \
    \              | MUST be supported.                |\n   |                   \
    \            |                                   |\n   | Content-Encoding    \
    \          | MUST be supported.  All FCAST     |\n   |                       \
    \        | implementations MUST support GZIP |\n   |                         \
    \      | encoding [RFC1952].               |\n   |                           \
    \    |                                   |\n   | Fcast-Obj-Digest-SHA1       \
    \  | MUST be supported.                |\n   |                               |\
    \                                   |\n   | Fcast-Obj-Digest-SHA256       | MUST\
    \ be supported.                |\n   |                               |       \
    \                            |\n   | Fcast-Obj-Slice-Nb            | MUST be supported.\
    \                |\n   |                               |                     \
    \              |\n   | Fcast-Obj-Slice-Idx           | MUST be supported.    \
    \            |\n   |                               |                         \
    \          |\n   | Fcast-Obj-Slice-Offset        | MUST be supported.        \
    \        |\n   +-------------------------------+-----------------------------------+\n"
- title: 4.2.  Requirements Related to the Carousel Instance Descriptor
  contents:
  - "4.2.  Requirements Related to the Carousel Instance Descriptor\n   Any compliant\
    \ FCAST implementation MUST support the CID mechanism, in\n   order to list the\
    \ Compound Objects that are part of a given Carousel\n   Instance.  However, its\
    \ use is OPTIONAL.\n   CID-specific Metadata items (Section 2.2):\n          \
    \       +--------------------+--------------------+\n                 | Feature\
    \            | Status             |\n                 +--------------------+--------------------+\n\
    \                 | Fcast-CID-Complete | MUST be supported. |\n              \
    \   | Fcast-CID-ID       | MUST be supported. |\n                 +--------------------+--------------------+\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Problem Statement
  contents:
  - "5.1.  Problem Statement\n   A content delivery system may be subject to attacks\
    \ that target:\n   o  the network, to compromise the delivery infrastructure (e.g.,\
    \ by\n      creating congestion),\n   o  the Content Delivery Protocol (CDP),\
    \ to compromise the delivery\n      mechanism (i.e., FCAST in this case), or\n\
    \   o  the content itself, to corrupt the objects being transmitted.\n   These\
    \ attacks can be launched against all or any subset of the\n   following:\n  \
    \ o  the data flow itself (e.g., by sending forged packets),\n   o  the session\
    \ control parameters sent either in-band or out-of-band\n      (e.g., by corrupting\
    \ the session description, the CID, the object\n      metadata, or the ALC/LCT\
    \ control parameters), or\n   o  some associated building blocks (e.g., the congestion\
    \ control\n      component).\n   More details on these possible attacks are provided\
    \ in the following\n   sections, along with possible countermeasures.  Recommendations\
    \ are\n   made in Section 5.5.\n"
- title: 5.2.  Attacks against the Data Flow
  contents:
  - "5.2.  Attacks against the Data Flow\n   The following types of attacks against\
    \ the data flow exist:\n   o  attacks that are meant to gain unauthorized access\
    \ to a\n      confidential object (e.g., obtaining non-free content without\n\
    \      purchasing it) and\n   o  attacks that try to corrupt the object being\
    \ transmitted (e.g., to\n      inject malicious code within an object, or to prevent\
    \ a receiver\n      from using an object; this would be a denial-of-service (DoS)\n\
    \      attack).\n"
- title: 5.2.1.  Attacks Meant to Gain Access to Confidential Objects
  contents:
  - "5.2.1.  Attacks Meant to Gain Access to Confidential Objects\n   Modern cryptographic\
    \ mechanisms can provide access control to\n   transmitted objects.  One way to\
    \ do this is by encrypting the entire\n   object prior to transmission, knowing\
    \ that authenticated receivers\n   have the cryptographic mechanisms to decrypt\
    \ the content.  Another\n   way is to encrypt individual packets using IPsec/ESP\
    \ [RFC4303] (see\n   also Section 5.5).  These two techniques can also provide\n\
    \   confidentiality to the objects being transferred.\n   If access control and/or\
    \ confidentiality services are desired, one of\n   these mechanisms is RECOMMENDED\
    \ and SHOULD be deployed.\n"
- title: 5.2.2.  Attacks Meant to Corrupt Objects
  contents:
  - "5.2.2.  Attacks Meant to Corrupt Objects\n   Protection against attacks on the\
    \ data integrity of the object may be\n   achieved by a mechanism agreed upon\
    \ between the sender and receiver\n   that features sender authentication and\
    \ a method to verify that the\n   object integrity has remained intact during\
    \ transmission.  This\n   service can be provided at the object level, but in\
    \ that case a\n   receiver has no way to identify what symbols are corrupted if\
    \ the\n   object is detected as corrupted.  This service can also be provided\n\
    \   at the packet level.  In some cases, after removing all corrupted\n   packets,\
    \ the object may be recovered.  Several techniques can provide\n   data integrity\
    \ and sender authentication services:\n   o  At the object level, the object can\
    \ be digitally signed, for\n      instance, by using RSASSA-PKCS1-v1_5 [RFC3447].\
    \  This signature\n      enables a receiver to check the object integrity.  Even\
    \ if digital\n      signatures are computationally expensive, this calculation\
    \ occurs\n      only once per object, which is usually acceptable.\n   o  At the\
    \ packet level, each packet can be digitally signed\n      [RFC6584].  A major\
    \ limitation is the high computational and\n      transmission overheads that\
    \ this solution requires.\n   o  At the packet level, a Group-keyed Message Authentication\
    \ Code\n      (MAC) [RFC2104] [RFC6584] scheme can be used, for instance, by\n\
    \      using HMAC-SHA-256 with a secret key shared by all the group\n      members,\
    \ senders, and receivers.  This technique creates a\n      cryptographically secured\
    \ digest of a packet that is sent along\n      with the packet itself.  The Group-keyed\
    \ MAC scheme does not\n      create prohibitive processing loads or transmission\
    \ overhead, but\n      it has a major limitation: it only provides a group\n \
    \     authentication/integrity service, since all group members share\n      the\
    \ same secret group key; this means that each member can send a\n      forged\
    \ packet.  It is therefore restricted to situations where\n      group members\
    \ are fully trusted, or in association with another\n      technique as a preliminary\
    \ check to quickly detect attacks\n      initiated by non-group members and to\
    \ discard their packets.\n   o  At the packet level, Timed Efficient Stream Loss-Tolerant\n\
    \      Authentication (TESLA) [RFC4082] [RFC5776] is an attractive\n      solution\
    \ that is robust to losses, provides an authentication and\n      integrity verification\
    \ service, and does not create any\n      prohibitive processing load or transmission\
    \ overhead.  Yet, a\n      delay is incurred in checking a TESLA authenticated\
    \ packet; this\n      delay may be more than what is desired in some use-cases.\n\
    \   o  At the packet level, IPsec/ESP [RFC4303] can be used to check the\n   \
    \   integrity and authenticate the sender of all the packets being\n      exchanged\
    \ in a session (see Section 5.5).\n   Techniques relying on public key cryptography\
    \ (digital signatures and\n   TESLA during the bootstrap process, when used) require\
    \ that public\n   keys be securely associated to the entities.  This can be achieved\n\
    \   via a Public Key Infrastructure (PKI), a Pretty Good Privacy (PGP)\n   Web\
    \ of Trust, or by securely preplacing the public keys of each group\n   member.\n\
    \   Techniques relying on symmetric key cryptography (Group-keyed MAC)\n   require\
    \ that a secret key be shared by all group members.  This can\n   be achieved\
    \ by means of a group key management protocol or simply by\n   securely preplacing\
    \ the secret key (but this manual solution has many\n   limitations).\n   It is\
    \ up to the developer and deployer, who know the security\n   requirements and\
    \ features of the target application area, to define\n   which solution is the\
    \ most appropriate.  In any case, whenever there\n   is a threat of object corruption,\
    \ it is RECOMMENDED that at least one\n   of these techniques be used.  Section\
    \ 5.5 defines minimum security\n   recommendations that can be used to provide\
    \ such services.\n"
- title: 5.3.  Attacks against the Session Control Parameters and Associated
  contents:
  - "5.3.  Attacks against the Session Control Parameters and Associated\n      Building\
    \ Blocks\n   Let us now consider attacks against the session control parameters\n\
    \   and the associated building blocks.  The attacker can target, among\n   other\
    \ things, the following:\n   o  the session description,\n   o  the FCAST CID,\n\
    \   o  the metadata of an object,\n   o  the ALC/LCT parameters, carried within\
    \ the LCT header, or\n   o  the FCAST associated building blocks, for instance,\
    \ the multiple\n      rate congestion control protocol.\n   The consequences of\
    \ these attacks are potentially serious, since they\n   can compromise the behavior\
    \ of the content delivery system or even\n   compromise the network itself.\n"
- title: 5.3.1.  Attacks against the Session Description
  contents:
  - "5.3.1.  Attacks against the Session Description\n   An FCAST receiver may potentially\
    \ obtain an incorrect session\n   description for the session.  The consequence\
    \ is that legitimate\n   receivers with the wrong session description will be\
    \ unable to\n   correctly receive the session content or will inadvertently try\
    \ to\n   receive at a much higher rate than they are capable of, thereby\n   possibly\
    \ disrupting other traffic in the network.\n   To avoid these problems, it is\
    \ RECOMMENDED that measures be taken to\n   prevent receivers from accepting incorrect\
    \ session descriptions.  One\n   such measure is sender authentication to ensure\
    \ that receivers only\n   accept legitimate session descriptions from authorized\
    \ senders.  How\n   these measures are achieved is outside the scope of this document,\n\
    \   since this session description is usually carried out-of-band.\n"
- title: 5.3.2.  Attacks against the FCAST CID
  contents:
  - "5.3.2.  Attacks against the FCAST CID\n   Corrupting the FCAST CID is one way\
    \ to create a DoS attack.  For\n   example, the attacker can insert an \"Fcast-CID-Complete:\
    \ 1\" metadata\n   entry to make the receivers believe that no further modification\
    \ will\n   be done.\n   It is therefore RECOMMENDED that measures be taken to\
    \ guarantee the\n   integrity and to check the sender's identity of the CID. \
    \ To that\n   purpose, one of the countermeasures mentioned above (Section 5.2.2)\n\
    \   SHOULD be used.  These measures will either be applied at the packet\n   level\
    \ or globally over the whole CID object.  When there is no\n   packet-level integrity\
    \ verification scheme, it is RECOMMENDED to\n   digitally sign the CID.\n"
- title: 5.3.3.  Attacks against the Object Metadata
  contents:
  - "5.3.3.  Attacks against the Object Metadata\n   Modifying the object metadata\
    \ is another way to launch an attack.\n   For example, the attacker may change\
    \ the message digest associated to\n   an object, leading a receiver to reject\
    \ an object even if it has been\n   correctly received.  More generally, a receiver\
    \ SHOULD be very\n   careful during metadata processing.  For instance, a receiver\
    \ SHOULD\n   NOT try to follow links (e.g., the URI contained in the\n   Content-Location\
    \ metadata).  As another example, malformed HTTP\n   content can be used as an\
    \ attack vector, and a receiver should take\n   great care with such content.\n\
    \   It is therefore RECOMMENDED that measures be taken to guarantee the\n   integrity\
    \ and to check the identity of the sender of the Compound\n   Object.  To that\
    \ purpose, one of the countermeasures mentioned above\n   (Section 5.2.2) SHOULD\
    \ be used.  These measures will either be\n   applied at the packet level or globally\
    \ over the whole Compound\n   Object.  When there is no packet-level integrity\
    \ verification scheme,\n   it is RECOMMENDED to digitally sign the Compound Object.\n"
- title: 5.3.4.  Attacks against the ALC/LCT and NORM Parameters
  contents:
  - "5.3.4.  Attacks against the ALC/LCT and NORM Parameters\n   By corrupting the\
    \ ALC/LCT header (or header extensions), one can\n   execute attacks on the underlying\
    \ ALC/LCT implementation.  For\n   example, sending forged ALC packets with the\
    \ Close Session \"A\" flag\n   set to 1 can lead the receiver to prematurely close\
    \ the session.\n   Similarly, sending forged ALC packets with the Close Object\
    \ \"B\" flag\n   set to 1 can lead the receiver to prematurely give up the reception\n\
    \   of an object.  The same comments can be made for NORM.\n   It is therefore\
    \ RECOMMENDED that measures be taken to guarantee the\n   integrity and to check\
    \ the sender's identity in each ALC or NORM\n   packet received.  To that purpose,\
    \ one of the countermeasures\n   mentioned above (Section 5.2.2) SHOULD be used.\n"
- title: 5.3.5.  Attacks against the Associated Building Blocks
  contents:
  - "5.3.5.  Attacks against the Associated Building Blocks\n   Let us first focus\
    \ on the congestion control building block that may\n   be used in an ALC or NORM\
    \ session.  A receiver with an incorrect or\n   corrupted implementation of the\
    \ multiple rate congestion control\n   building block may affect the health of\
    \ the network in the path\n   between the sender and the receiver and may also\
    \ affect the reception\n   rates of other receivers who joined the session.\n\
    \   When congestion control is applied with FCAST, it is therefore\n   RECOMMENDED\
    \ that receivers be authenticated as legitimate receivers\n   before they can\
    \ join the session.  If authenticating a receiver does\n   not prevent that receiver\
    \ from launching an attack, the network\n   operator will still be able to easily\
    \ identify the receiver that\n   launched the attack and take countermeasures.\
    \  The details of how\n   this is done are outside the scope of this document.\n\
    \   When congestion control is applied with FCAST, it is also RECOMMENDED\n  \
    \ that a packet-level authentication scheme be used, as explained in\n   Section\
    \ 5.2.2.  Some of them, like TESLA, only provide a delayed\n   authentication\
    \ service, whereas congestion control requires a rapid\n   reaction.  It is therefore\
    \ RECOMMENDED [RFC5775] that a receiver\n   using TESLA quickly reduce its subscription\
    \ level when the receiver\n   believes that congestion did occur, even if the\
    \ packet has not yet\n   been authenticated.  Therefore, TESLA will not prevent\
    \ DoS attacks\n   where an attacker makes the receiver believe that congestion\n\
    \   occurred.  This is an issue for the receiver, but this will not\n   compromise\
    \ the network.  Other authentication methods that do not\n   feature this delayed\
    \ authentication might be preferable, or a Group-\n   keyed MAC scheme could be\
    \ used in parallel with TESLA to prevent\n   attacks launched from outside of\
    \ the group.\n"
- title: 5.4.  Other Security Considerations
  contents:
  - "5.4.  Other Security Considerations\n   Lastly, we note that the security considerations\
    \ that apply to, and\n   are described in, ALC [RFC5775], LCT [RFC5651], NORM\
    \ [RFC5740], and\n   FEC [RFC5052] also apply to FCAST, as FCAST builds on those\n\
    \   specifications.  In addition, any security considerations that apply\n   to\
    \ any congestion control building block used in conjunction with\n   FCAST also\
    \ apply to FCAST.  Finally, the security discussion of\n   [RMT-SEC] also applies\
    \ here.\n"
- title: 5.5.  Minimum Security Recommendations
  contents:
  - "5.5.  Minimum Security Recommendations\n   We now introduce a security configuration\
    \ that is mandatory to\n   implement but not necessarily mandatory to use, in\
    \ the sense of\n   [RFC3365].  Since FCAST/ALC relies on ALC/LCT, it inherits\
    \ the\n   \"baseline secure ALC operation\" of [RFC5775].  Similarly, since\n\
    \   FCAST/NORM relies on NORM, it inherits the \"baseline secure NORM\n   operation\"\
    \ of [RFC5740].  Therefore, IPsec/ESP in transport mode MUST\n   be implemented,\
    \ but not necessarily used, in accordance with\n   [RFC5775] and [RFC5740].  [RFC4303]\
    \ explains that ESP can be used to\n   potentially provide confidentiality, data\
    \ origin authentication,\n   content integrity, anti-replay, and (limited) traffic\
    \ flow\n   confidentiality.  [RFC5775] specifies that the data origin\n   authentication,\
    \ content integrity, and anti-replay services SHALL be\n   used, and that the\
    \ confidentiality service is RECOMMENDED.  If a\n   short-lived session MAY rely\
    \ on manual keying, it is also RECOMMENDED\n   that an automated key management\
    \ scheme be used, especially in the\n   case of long-lived sessions.\n   Therefore,\
    \ the RECOMMENDED solution for FCAST provides per-packet\n   security, with data\
    \ origin authentication, integrity verification,\n   and anti-replay.  This is\
    \ sufficient to prevent most of the in-band\n   attacks listed above.  If confidentiality\
    \ is required, a per-packet\n   encryption SHOULD also be used.\n"
- title: 6.  Operational Considerations
  contents:
  - "6.  Operational Considerations\n   FCAST is compatible with any congestion control\
    \ protocol designed for\n   ALC/LCT or NORM.  However, depending on the use-case,\
    \ the data flow\n   generated by the FCAST application might not be constant but\
    \ might\n   instead be bursty in nature.  Similarly, depending on the use-case,\n\
    \   an FCAST session might be very short.  Whether and how this will\n   impact\
    \ the congestion control protocol is out of the scope of the\n   present document.\n\
    \   FCAST is compatible with any security mechanism designed for ALC/LCT\n   or\
    \ NORM.  The use of a security scheme is strongly RECOMMENDED (see\n   Section\
    \ 5).\n   FCAST is compatible with any FEC scheme designed for ALC/LCT or NORM.\n\
    \   Whether FEC is used or not, and the kind of FEC scheme used, are to\n   some\
    \ extent transparent to FCAST.\n   FCAST is compatible with both IPv4 and IPv6.\
    \  Nothing in the FCAST\n   specification has any implication on the source or\
    \ destination IP\n   address type.\n   The delivery service provided by FCAST\
    \ might be fully reliable, or\n   only partially reliable, depending upon:\n \
    \  o  the way ALC or NORM is used (e.g., whether FEC encoding and/or\n      NACK-based\
    \ repair requests are used or not),\n   o  the way the FCAST carousel is used\
    \ (e.g., whether the objects are\n      made available for a long time span or\
    \ not), and\n   o  the way in which FCAST itself is deployed (e.g., whether there\
    \ is\n      a session control application that might automatically extend an\n\
    \      existing FCAST session until all receivers have received the\n      transmitted\
    \ content).\n   The receiver set can be restricted to a single receiver or possibly\
    \ a\n   very large number of receivers.  While the choice of the underlying\n\
    \   transport protocol (i.e., ALC or NORM) and its parameters may limit\n   the\
    \ practical receiver group size, nothing in FCAST itself limits it.\n   For instance,\
    \ if FCAST/ALC is used on top of purely unidirectional\n   transport channels\
    \ with no feedback information at all, which is the\n   default mode of operation,\
    \ then scalability is at a maximum, since\n   neither FCAST, ALC, UDP, nor IP\
    \ generates any feedback message.  On\n   the contrary, the scalability of FCAST/NORM\
    \ is typically limited by\n   the scalability of NORM itself.  For example, NORM\
    \ can be configured\n   to operate using proactive FEC without feedback, similar\
    \ to ALC, with\n   receivers configured to provide NACK and, optionally, ACK feedback,\n\
    \   or a hybrid combination of these.  Similarly, if FCAST is used along\n   with\
    \ a session control application that collects reception\n   information from the\
    \ receivers, then this session control application\n   may limit the scalability\
    \ of the global object delivery system.  This\n   situation can of course be mitigated\
    \ by using a hierarchy of servers\n   or feedback message aggregation.  The details\
    \ of this are out of the\n   scope of the present document.\n   The content of\
    \ a Carousel Instance MAY be described by means of an\n   OPTIONAL CID (Section\
    \ 3.5).  The decision of whether the CID\n   mechanism should be used or not is\
    \ left to the sender.  When it is\n   used, the question of how often and when\
    \ a CID should be sent is also\n   left to the sender.  These considerations depend\
    \ on many parameters,\n   including the target use-case and the session dynamics.\
    \  For\n   instance, it may be appropriate to send a CID at the beginning of\n\
    \   each new Carousel Instance and then periodically.  These operational\n   aspects\
    \ are out of the scope of the present document.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Per this specification, IANA has created three new\
    \ registries.\n"
- title: 7.1.  Creation of the FCAST Object Metadata Format Registry
  contents:
  - "7.1.  Creation of the FCAST Object Metadata Format Registry\n   IANA has created\
    \ a new registry, \"FCAST Object Metadata Format\"\n   (MDFmt), with a reference\
    \ to this document.  The registry entries\n   consist of a numeric value from\
    \ 0 to 15, inclusive (i.e., they are\n   4-bit positive integers), that defines\
    \ the format of the object\n   metadata (see Section 2.1).\n   The initial value\
    \ for this registry is defined below.  Future\n   assignments are to be made through\
    \ Expert Review with Specification\n   Required [RFC5226].\n   +-------------+---------------------+--------------+----------------+\n\
    \   | Value       |     Format Name     |    Format    |   Reference    |\n  \
    \ |             |                     |  Reference   |                |\n   +-------------+---------------------+--------------+----------------+\n\
    \   | 0 (default) |       HTTP/1.1      |  [RFC2616],  |      This      |\n  \
    \ |             |   metainformation   | Section 7.1  | specification  |\n   |\
    \             |        format       |              |                |\n   +-------------+---------------------+--------------+----------------+\n"
- title: 7.2.  Creation of the FCAST Object Metadata Encoding Registry
  contents:
  - "7.2.  Creation of the FCAST Object Metadata Encoding Registry\n   IANA has created\
    \ a new registry, \"FCAST Object Metadata Encoding\"\n   (MDEnc), with a reference\
    \ to this document.  The registry entries\n   consist of a numeric value from\
    \ 0 to 15, inclusive (i.e., they are\n   4-bit positive integers), that defines\
    \ the encoding of the Object\n   Metadata field (see Section 2.1).\n   The initial\
    \ values for this registry are defined below.  Future\n   assignments are to be\
    \ made through Expert Review [RFC5226].\n   +---------+------------------+-----------------+--------------------+\n\
    \   |  Value  |  Encoding Name   |     Encoding    |     Reference      |\n  \
    \ |         |                  |    Reference    |                    |\n   +---------+------------------+-----------------+--------------------+\n\
    \   |    0    |  UTF-8 encoded   |    [RFC3629]    | This specification |\n  \
    \ |         |       text       |                 |                    |\n   |\
    \         |                  |                 |                    |\n   |  \
    \  1    |  GZIP'ed UTF-8   |    [RFC1952],   | This specification |\n   |    \
    \     |   encoded text   |    [RFC3629]    |                    |\n   +---------+------------------+-----------------+--------------------+\n"
- title: 7.3.  Creation of the FCAST Object Metadata Types Registry
  contents:
  - "7.3.  Creation of the FCAST Object Metadata Types Registry\n   IANA has created\
    \ a new registry, \"FCAST Object Metadata Types\"\n   (MDType), with a reference\
    \ to this document.  The registry entries\n   consist of additional text metadata\
    \ type identifiers and descriptions\n   for metadata item types that are specific\
    \ to FCAST operation and not\n   previously defined in [RFC2616].  The initial\
    \ values are those\n   described in Section 3.3 of this specification.  This table\n\
    \   summarizes those initial registry entries.  Future assignments are to\n  \
    \ be made through Expert Review [RFC5226].\n   +-------------------------+-----------------------+-----------------+\n\
    \   | Metadata Type           | Description           |    Reference    |\n  \
    \ +-------------------------+-----------------------+-----------------+\n   |\
    \ Fcast-Obj-Digest-SHA1   | A string that         |       This      |\n   |  \
    \                       | contains the \"base64\" |  specification  |\n   |  \
    \                       | encoding of the SHA-1 |                 |\n   |    \
    \                     | message digest of the |                 |\n   |      \
    \                   | object before any     |                 |\n   |        \
    \                 | content encoding is   |                 |\n   |          \
    \               | applied (if any) and  |                 |\n   |            \
    \             | without considering   |                 |\n   |              \
    \           | the FCAST Header      |                 |\n   |                \
    \         |                       |                 |\n   | Fcast-Obj-Digest-SHA256\
    \ | A string that         |       This      |\n   |                         |\
    \ contains the \"base64\" |  specification  |\n   |                         |\
    \ encoding of the       |                 |\n   |                         | SHA-256\
    \ message       |                 |\n   |                         | digest of\
    \ the object  |                 |\n   |                         | before any content\
    \    |                 |\n   |                         | encoding is applied \
    \  |                 |\n   |                         | (if any) and without  |\
    \                 |\n   |                         | considering the FCAST |  \
    \               |\n   |                         | Header                |    \
    \             |\n   |                         |                       |      \
    \           |\n   | Fcast-Obj-Slice-Nb      | Unsigned 32-bit       |       This\
    \      |\n   |                         | integer that contains |  specification\
    \  |\n   |                         | the total number of   |                 |\n\
    \   |                         | slices.  A value      |                 |\n  \
    \ |                         | greater than 1        |                 |\n   |\
    \                         | indicates that this   |                 |\n   |  \
    \                       | object is the result  |                 |\n   |    \
    \                     | of a split of the     |                 |\n   |      \
    \                   | original object       |                 |\n   |        \
    \                 |                       |                 |\n   | Fcast-Obj-Slice-Idx\
    \     | Unsigned 32-bit       |       This      |\n   |                      \
    \   | integer that contains |  specification  |\n   |                        \
    \ | the slice index (in   |                 |\n   |                         |\
    \ the {0 .. SliceNb -   |                 |\n   |                         | 1}\
    \ interval)          |                 |\n   |                         |     \
    \                  |                 |\n   | Fcast-Obj-Slice-Offset  | Unsigned\
    \ 64-bit       |       This      |\n   |                         | integer that\
    \ contains |  specification  |\n   |                         | the byte offset\
    \ at    |                 |\n   |                         | which this slice \
    \     |                 |\n   |                         | starts within the  \
    \   |                 |\n   |                         | original object      \
    \ |                 |\n   +-------------------------+-----------------------+-----------------+\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors are grateful to the authors of [ALC-00] for\
    \ specifying\n   the first version of FCAST/ALC.  The authors are also grateful\
    \ to\n   David Harrington, Gorry Fairhurst, and Lorenzo Vicisano for their\n \
    \  valuable comments.  The authors are also grateful to Jari Arkko,\n   Ralph\
    \ Droms, Wesley Eddy, Roni Even, Stephen Farrell, Russ Housley,\n   Chris Lonvick,\
    \ Pete Resnick, Joseph Yee, and Martin Stiemerling.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1071]  Braden, R., Borman, D., Partridge,\
    \ C., and W. Plummer,\n              \"Computing the Internet checksum\", RFC\
    \ 1071,\n              September 1988.\n   [RFC1952]  Deutsch, P., \"GZIP file\
    \ format specification version 4.3\",\n              RFC 1952, May 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2616]  Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC3174]  Eastlake, D. and P. Jones, \"US Secure Hash Algorithm 1\n     \
    \         (SHA1)\", RFC 3174, September 2001.\n   [RFC3629]  Yergeau, F., \"UTF-8,\
    \ a transformation format of\n              ISO 10646\", STD 63, RFC 3629, November\
    \ 2003.\n   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n\
    \              Encodings\", RFC 4648, October 2006.\n   [RFC5226]  Narten, T.\
    \ and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5651]  Luby, M., Watson, M.,\
    \ and L. Vicisano, \"Layered Coding\n              Transport (LCT) Building Block\"\
    , RFC 5651, October 2009.\n   [RFC5740]  Adamson, B., Bormann, C., Handley, M.,\
    \ and J. Macker,\n              \"NACK-Oriented Reliable Multicast (NORM) Transport\n\
    \              Protocol\", RFC 5740, November 2009.\n   [RFC5775]  Luby, M., Watson,\
    \ M., and L. Vicisano, \"Asynchronous\n              Layered Coding (ALC) Protocol\
    \ Instantiation\", RFC 5775,\n              April 2010.\n   [RFC6234]  Eastlake,\
    \ D. and T. Hansen, \"US Secure Hash Algorithms\n              (SHA and SHA-based\
    \ HMAC and HKDF)\", RFC 6234, May 2011.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ALC-00]   Luby, M., Gemmell, J., Vicisano,\
    \ L., Rizzo, L., Crowcroft,\n              J., and B. Lueckenhoff, \"Asynchronous\
    \ Layered Coding: A\n              scalable reliable multicast protocol\", Work\
    \ in Progress,\n              March 2000.\n   [RFC2104]  Krawczyk, H., Bellare,\
    \ M., and R. Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\"\
    , RFC 2104,\n              February 1997.\n   [RFC3365]  Schiller, J., \"Strong\
    \ Security Requirements for Internet\n              Engineering Task Force Standard\
    \ Protocols\", BCP 61,\n              RFC 3365, August 2002.\n   [RFC3447]  Jonsson,\
    \ J. and B. Kaliski, \"Public-Key Cryptography\n              Standards (PKCS)\
    \ #1: RSA Cryptography Specifications\n              Version 2.1\", RFC 3447,\
    \ February 2003.\n   [RFC4082]  Perrig, A., Song, D., Canetti, R., Tygar, J.,\
    \ and B.\n              Briscoe, \"Timed Efficient Stream Loss-Tolerant\n    \
    \          Authentication (TESLA): Multicast Source Authentication\n         \
    \     Transform Introduction\", RFC 4082, June 2005.\n   [RFC4303]  Kent, S.,\
    \ \"IP Encapsulating Security Payload (ESP)\",\n              RFC 4303, December\
    \ 2005.\n   [RFC5052]  Watson, M., Luby, M., and L. Vicisano, \"Forward Error\n\
    \              Correction (FEC) Building Block\", RFC 5052, August 2007.\n   [RFC5510]\
    \  Lacan, J., Roca, V., Peltotalo, J., and S. Peltotalo,\n              \"Reed-Solomon\
    \ Forward Error Correction (FEC) Schemes\",\n              RFC 5510, April 2009.\n\
    \   [RFC5776]  Roca, V., Francillon, A., and S. Faurite, \"Use of Timed\n    \
    \          Efficient Stream Loss-Tolerant Authentication (TESLA) in\n        \
    \      the Asynchronous Layered Coding (ALC) and NACK-Oriented\n             \
    \ Reliable Multicast (NORM) Protocols\", RFC 5776,\n              April 2010.\n\
    \   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"Forward Error\n         \
    \     Correction (FEC) Framework\", RFC 6363, October 2011.\n   [RFC6584]  Roca,\
    \ V., \"Simple Authentication Schemes for the\n              Asynchronous Layered\
    \ Coding (ALC) and NACK-Oriented\n              Reliable Multicast (NORM) Protocols\"\
    , RFC 6584,\n              April 2012.\n   [RFC6726]  Paila, T., Walsh, R., Luby,\
    \ M., Roca, V., and R. Lehtonen,\n              \"FLUTE - File Delivery over Unidirectional\
    \ Transport\",\n              RFC 6726, November 2012.\n   [RMT-SEC]  Adamson,\
    \ B., Roca, V., and H. Asaeda, \"Security and\n              Reliable Multicast\
    \ Transport Protocols: Discussions and\n              Guidelines\", Work in Progress,\
    \ May 2013.\n"
- title: Appendix A.  FCAST Examples
  contents:
  - "Appendix A.  FCAST Examples\n   This appendix provides informative examples of\
    \ FCAST Compound Objects\n   and Carousel Instance Descriptor formats.\n"
- title: A.1.  Simple Compound Object Example
  contents:
  - "A.1.  Simple Compound Object Example\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Ver=0|  0  |1|0|MDFmt=0|MDEnc=0|           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     FCAST Header Length=41                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   .                                                               .\n   . \"\
    Content-Location: example_1.txt<CR-LF>\" metadata (33 bytes)  .\n   .        \
    \                                                       .\n   +              \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |               |    \
    \                Padding                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                                                               .\n   .  \
    \                       Object Data                           .\n   .        \
    \                                                       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 4: Simple Compound Object Example\n   Figure 4 shows\
    \ a simple Compound Object where the metadata string, in\n   HTTP/1.1 metainformation\
    \ format (MDFmt=0), contains:\n         Content-Location: example_1.txt<CR-LF>\n\
    \   This UTF-8 encoded text (since MDEnc=0) is 33 bytes long (there is no\n  \
    \ final '\\0' character).  Therefore, 3 padding bytes are added.  There\n   is\
    \ no Content-Length metadata entry for the object transported\n   (without FCAST\
    \ additional encoding) in the Object Data field, since\n   this length can easily\
    \ be calculated by the receiver as the FEC OTI\n   Transfer Length minus the header\
    \ length.  Finally, the checksum\n   encompasses the whole Compound Object (G=1).\n"
- title: A.2.  Carousel Instance Descriptor Example
  contents:
  - "A.2.  Carousel Instance Descriptor Example\n       0                   1    \
    \               2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Ver=0|  0  |1|1|MDFmt=0|MDEnc=0|           Checksum            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   FCAST Header Length=31                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \      .                                                               .\n   \
    \   .   \"Fcast-CID-Complete: 1<CR-LF>\" metadata string (23 bytes)   .\n    \
    \  .                                                               .\n      +\
    \                                               +-+-+-+-+-+-+-+-+\n      |   \
    \                                            |    Padding    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \      .                                                               .\n   \
    \   .                Object List string                             .\n      .\
    \                                                               .\n      .   \
    \            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .      \
    \         |\n      +-+-+-+-+-+-+-+-+\n               Figure 5: CID Object Example:\
    \ Static Session\n   Figure 5 shows an example CID object, in the case of a static\
    \ FCAST\n   session, i.e., a session where the set of objects is set once and\
    \ for\n   all.  The metadata UTF-8 encoded text only contains the following\n\
    \   entry, since Fcast-CID-ID is implicit:\n         Fcast-CID-Complete: 1<CR-LF>\n\
    \   This UTF-8 encoded text (since MDEnc=0) is 23 bytes long (there is no\n  \
    \ final '\\0' character).  Therefore, 1 padding byte is added.\n   The Object\
    \ List contains the following 25-byte-long string (there is\n   no final '\\0'\
    \ character):\n         1,2,3,100-104,200-203,299\n   There are therefore a total\
    \ of 3+5+4+1 = 13 objects in the Carousel\n   Instance and therefore in the FCAST\
    \ session.  There is no metadata\n   associated to this CID.  As the session is\
    \ static and composed of a\n   single Carousel Instance, the sender did not feel\
    \ the necessity to\n   carry a Carousel Instance ID metadata.\n"
- title: Appendix B.  Additional Metadata Transmission Mechanisms
  contents:
  - 'Appendix B.  Additional Metadata Transmission Mechanisms

    '
- title: B.1.  Supporting Additional Mechanisms
  contents:
  - "B.1.  Supporting Additional Mechanisms\n   In certain use-cases, FCAST can take\
    \ advantage of another in-band\n   (e.g., via NORM_INFO messages (Appendix B.2))\
    \ or out-of-band\n   signaling mechanism.  This section provides an overview of\
    \ how other\n   signaling mechanisms could be employed and a normative specification\n\
    \   for how FCAST information is embedded when NORM_INFO messages are\n   used\
    \ for carrying FCAST Headers.  Such additional signaling schemes\n   can be used\
    \ to carry the whole metadata, or a subset of it, ahead of\n   time, before the\
    \ associated Compound Object.  Therefore, based on the\n   information retrieved\
    \ in this way, a receiver could decide in advance\n   (i.e., before beginning\
    \ the reception of the compound object) whether\n   the object is of interest\
    \ or not; this would mitigate the limitations\n   of FCAST.  While out-of-band\
    \ techniques are out of the scope of this\n   document, we explain below how this\
    \ can be achieved in the case of\n   FCAST/NORM.\n   Supporting additional mechanisms\
    \ is OPTIONAL in FCAST\n   implementations.  In any case, an FCAST sender MUST\
    \ continue to send\n   all the required metadata in the Compound Object, even\
    \ if the whole\n   metadata, or a subset of it, is sent by another mechanism\n\
    \   (Section 4).  Additionally, when metadata is sent several times,\n   there\
    \ MUST NOT be any contradiction in the information provided by\n   the different\
    \ mechanisms.  If a mismatch is detected, the metadata\n   contained in the Compound\
    \ Object MUST be used as the definitive\n   source.\n   When metadata elements\
    \ are communicated out-of-band, in advance of\n   data transmission, the following\
    \ piece of information can be useful:\n   o  TOI: a positive integer that contains\
    \ the Transport Object\n      Identifier (TOI) of the object, in order to enable\
    \ a receiver to\n      easily associate the metadata to the object.  The valid\
    \ range for\n      TOI values is discussed in Section 3.6.\n"
- title: B.2.  Using NORM_INFO Messages with FCAST/NORM
  contents:
  - "B.2.  Using NORM_INFO Messages with FCAST/NORM\n   The NORM_INFO message of NORM\
    \ can convey \"out-of-band\" content with\n   respect to a given transport object.\
    \  With FCAST, this message MAY be\n   used as an additional mechanism to transmit\
    \ metadata.  In that case,\n   the NORM_INFO message carries a new Compound Object\
    \ that contains all\n   the metadata of the original object, or a subset of it.\
    \  The\n   NORM_INFO Compound Object MUST NOT contain any Object Data field\n\
    \   (i.e., it is only composed of the header), it MUST feature a\n   non-global\
    \ checksum, and it MUST NOT include a Padding field.\n   Finally, note that the\
    \ availability of NORM_INFO for a given object\n   is signaled through the use\
    \ of a dedicated flag in the NORM_DATA\n   message header.  Along with NORM's\
    \ NACK-based repair request\n   signaling, it allows a receiver to quickly (and\
    \ independently)\n   request an object's NORM_INFO content.  However, a limitation\
    \ here is\n   that the FCAST Header MUST fit within the byte size limit defined\
    \ by\n   the NORM sender's configured \"segment size\" (typically a little less\n\
    \   than the network MTU).\n"
- title: B.2.1.  Example
  contents:
  - "B.2.1.  Example\n   In the case of FCAST/NORM, the object metadata (or a subset\
    \ of it)\n   can be carried as part of a NORM_INFO message, as a new Compound\n\
    \   Object that does not contain any Object Data.  In the following\n   informative\
    \ example, we assume that the whole metadata is carried in\n   such a message.\
    \  Figure 6 shows an example NORM_INFO message that\n   contains the FCAST Header,\
    \ including metadata.  In this example, the\n   first 16 bytes are the NORM_INFO\
    \ base header; the next 12 bytes are a\n   NORM EXT_FTI header extension containing\
    \ the FEC Object Transport\n   Information for the associated object; and the\
    \ remaining bytes are\n   the FCAST Header, including metadata.  Note that \"\
    padding\" MUST NOT\n   be used and that the FCAST checksum only encompasses the\
    \ Compound\n   Object Header (G=0).\n   0                   1                \
    \   2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ --\n   |version| type=1|  hdr_len = 7  |          sequence             |  ^\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |\n   |\
    \                           source_id                           |  n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  o\n   |          instance_id          |     grtt      |backoff| gsize |  r\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  m\n   |\
    \     flags     |  fec_id = 5   |     object_transport_id       |  v\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ --\n   |   HET = 64    |    HEL = 3    |                               |  ^\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +  f\n   |\
    \                     Transfer Length = 41                      |  t\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  i\n   |   Encoding Symbol Length (E)  | MaxBlkLen (B) |     max_n     |  v\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ --\n   |\
    \  0  | 0   |0|0|   0   |   0   |           Checksum            |  ^\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \  |\n   |                               41                              |  f\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|  c\n   .\
    \                                                               .  a\n   .   \
    \         metadata UTF-8 encoded text (32 bytes)             .  s\n   .      \
    \                                                         .  t\n   +         \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  |\n   |            \
    \   |                                                  v\n   +-+-+-+-+-+-+-+-+\
    \                                                 --\n    Figure 6: NORM_INFO\
    \ Message Containing an EXT_FTI Header Extension\n                           \
    \ and an FCAST Header\n   The NORM_INFO message shown in Figure 6 contains the\
    \ EXT_FTI header\n   extension to carry the FEC OTI.  In this example, the FEC\
    \ OTI format\n   is that of the Reed-Solomon FEC coding scheme for fec_id = 5,\
    \ as\n   described in [RFC5510].  Other alternatives for providing the FEC OTI\n\
    \   would have been to either include it directly in the metadata of the\n   FCAST\
    \ Header or to include an EXT_FTI header extension to all\n   NORM_DATA packets\
    \ (or a subset of them).  Note that the NORM\n   \"Transfer Length\" is the total\
    \ length of the associated Compound\n   Object, i.e., 41 bytes.\n   The Compound\
    \ Object in this example does contain the same metadata\n   and is formatted as\
    \ in the example of Figure 4.  With the combination\n   of the FEC_OTI and the\
    \ FCAST metadata, the NORM protocol and FCAST\n   application have all of the\
    \ information needed to reliably receive\n   and process the associated object.\
    \  Indeed, the NORM protocol\n   provides rapid (NORM_INFO has precedence over\
    \ the associated object\n   content), reliable delivery of the NORM_INFO message\
    \ and its payload,\n   the FCAST Compound Object.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vincent Roca\n   INRIA\n   655, av. de l'Europe\n   Inovallee;\
    \ Montbonnot\n   ST ISMIER cedex  38334\n   France\n   EMail: vincent.roca@inria.fr\n\
    \   URI:   http://planete.inrialpes.fr/people/roca/\n   Brian Adamson\n   Naval\
    \ Research Laboratory\n   Washington, DC  20375\n   USA\n   EMail: adamson@itd.nrl.navy.mil\n\
    \   URI:   http://cs.itd.nrl.navy.mil\n"
