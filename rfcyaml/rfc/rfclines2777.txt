Abstract This document describes a method for making random selections in such a way that the unbiased nature of the choice is publicly verifiable.
As an example, the selection of the voting members of the IETF Nominations Committee from the pool of eligible volunteers is used.
Similar techniques would be applicable to other cases.
Introduction Under the IETF rules, each year 10 persons are randomly selected from among the eligible persons who volunteer to be the voting members of the nominations committee (NomCom) to nominate members of the Internet Engineering Steering Group (IESG) and the Internet Architecture Board (IAB)
The number of eligible volunteers in recent years has varied in the approximate range of 40 to 60.
It is highly desireable that the random selection of the voting NomCom be done in a unimpeachable fashion so that no reasonable charges of bias or favoritism can be brought.
This is for the protection of the IETF from bias and protection of the administrator of the selection (currently, the appointed non voting NomCom chair) from suspicion of bias.
A method such that public information will enable any person to verify the randomness of the selection meets this criterion.
This document gives an example of such a method.
General Flow of a Publicly Verifiable Process
In general, a selection of NomCom members publicly verifiable as unbiased or similar selection could follow the three steps given below.
2.1 Determination of the Pool First, you need to determine the pool from which the selection is to be made.
Volunteers are solicited by the appointed (non voting) NomCom chair.
Their names are then passed through the IETF Secretariat to check eligibility.
(Current eligibility criteria relate to IETF meeting attendance, records of which are maintained by the Secretariat.)
The full list of eligible volunteers is made public early enough that there is a reasonable time to resolve any disputes as to who should be in the pool, probably a week to ten days before the selection.
2.2 Publication of the Algorithm
The exact algorithm to be used, including the public future sources of randomness, is made public.
For example, the members of the final list of eligible volunteers are ordered by publicly numbering them, several public future sources of randomness such as government run lotteries are specified, and an exact algorithm is specified whereby eligible volunteers are selected based on a strong hash function [RFC 1750] of these future sources of randomness.
2.3 Publication of Selection When the prespecified sources of randomness produce their output, those values plus a summary of the execution of the algorithm for selection should be announced so that anyone can verify that the correct randomness source values were used and the algorithm properly executed.
A cut off time for any complaint that the algorithm was run with the wrong inputs or not faithfully executed should be specified to finalize the output and provide a stable NomCom.
The crux of the unbiased nature of the selection is that it is based exactly on random information which will be revealed in the future and thus can not be known to the person specifying the algorithm by which that random information will be used to select the NomCom members.
The random information must be such that it will be publicly revealed in a timely fashion.
The random sources should not include anything that any reasonable person would believe to be under the control or influence of the IETF or its components, such as IETF meeting attendance statistics, numbers of documents issued, or the like.
3.1 Sources of Randomness Examples of good information to use are lottery winning numbers for specified runnings of specified lotteries.
Particularly for government run lotteries, great care is usually taken to see that they produce random quantities.
Even in the unlikely case one were to have been rigged, it would almost certainly be in connection with winning money in the lottery, not in connection with IETF use.
Other possibilities are such things as the closing price of a stock on a particular day, daily balance in the US Treasury on a specified day, the volume of trading on the New York Stock exchange on a specified day, etc.
(However, the reference code given below will not handle integers that are too large.)
Sporting events can be used but only with care to specify exactly what quantities are being presumed random and what will be done if they are cancelled or delayed.
It is important that the last source of randomness, chronologically, produce a substantial amount of the entropy needed.
If most of the randomness has come from the earlier of the specified sources, and someone has even limited influence on the final source, they might do an exhaustive analysis and exert such influence so as to bias the selection in the direction they wanted.
Thus it is best for the last source to be an especially strong and unbiased source of a large amount of randomness such as a government run lottery.
It is best not to use too many different sources.
Every additional source increases the probability that it might be delayed or cancelled calling into play contingency plans or, worst of all, possibly creating a situation that was not anticipated.
This would either require arbitrary judgement by the Nomcom chair, defeating the randomness of the selection, or a re run with a new set of sources, causing much delay.
Probably a good number of sources is three.
Skew Many of the sources of randomness suggested above produce data which is not uniformly distributed.
This is certainly true of stock prices and horse race results, for example.
However, use of a strong mixing function [RFC 1750] will extract the available entropy and produce a hash value whose bits, remainder modulo a small divisor, etc., are uniformly distributed.
3.3 Entropy Needed What we are doing is selection N items without replacement from a population of P items.
To do this in a completely random fashion requires as many random bits as the logarithm base 2 of that quantity.
Some sample calculated approximate number of random bits for the selection of 10 nomcom members from various pool sizes is given below: Random Selection of Ten Items From Pool Pool size
Using an inadequate number of bits means that not all of the possible selections would be available.
For a substantially inadequate amount of entropy, there would be substantial correlations between the selection of two members of the pool, for example.
However, as a practical matter, for pool sizes likely to be encountered in IETF nomcom membership selection, 40 bits of entropy should always be adequate.
Even if there is a large pool and theoretically more bits are needed for complete randomness, 40 bits of entropy will assure that the probability of selection of each pool member differs from that of other pool members, the correlation between the selection of any pair of pool members, etc., differs only insignificantly from that for completely random selection.
An MD5 [RFC 1321] hash has 128 bits and therefore can produce no more than that number of bits of entropy.
However, this is three times what is likely to ever been needed for IETF nomcom membership selection.
It is important that a precise algorithm be given for mixing the random sources specified and making the selection based thereon.
Sources suggested above each produce either a single positive number (i.e., closing price for a stock) or a small set of positive numbers (many lotteries provide 6 numbers in the range of 1 through 40 or the like, a sporting event could produce the scores of two teams, etc.).
A sample precise algorithm is as follows:
For each source producing multiple numeric values, represent each as a decimal number terminated by a period (or with a period separating the whole from the fractional part) and without leading zeroes (except for a single leading zero if the integer part is zero) or trailing zeroes after the period.
You can then produce a sequence of random values derived from a strong mixing of these sources by calculating the MD5 hash [RFC 1321] of this string prefixed and suffixed with a zero byte for the first value, the string prefixed and suffixed by a 0x01 byte for the second value, etc.
Treat each of these derived random values as a positive multiprecision integer.
If there are P eligible volunteers, select the first voting member by dividing the first derived random value by P and using the remainder plus one as the position of the selectee in the ordered list or volunteers.
Select the second voting member by dividing the second derived random value by P 1 and using the remainder plus one as the position of the selectee in the list with the first selectee eliminated.
It is recommended that alphanumeric random sources be avoided due to the greater difficulty in canonicalizing them in an independently repeatable fashion; however, if any are used, all white space, punctuation, and special characters should be removed and all letters set to upper case.
Assume the following ordered list of 25 eligible volunteers is published in advance of selection:
Smith Assume the following (fake example) ordered list of randomness sources: 1.
The People's Democracy of Betastani State Lottery six winning numbers (ignoring the seventh "extra" number) for 1 October 1998.
Numbers of the winning horses at Hialeia for all races for the first day on or after x September 1998 on which at least two races are run.
The Republic of Alphaland State Lottery daily number for 1 October 1998 treated as a single four digit integer.
Closing price of Example Corporation stock on the Lunar Stock Exchange for the first business day after x September 1998 when it trades.
Randomness publicly produced: Source 1:  9, 18, 26, 34, 41, 45 Source 2:  2, 5, 12, 8, 10 Source 3:  9319 Source 4:  13 11/16 Resulting key string: 9.18.26.34.41.45./2.5.8.10.12./9319./13.6875/ The table below gives the hex of the MD5 of the above key string bracketed with a byte whose value is successively 0x00, 0x01, 0x02, through 0x09.
The divisor for the number size of the remaining pool at each stage is given and the index of the selectee as per the original number of those in the pool.
Resulting selection, in order selected: 1.
Careful choice of should be made of randomness inputs so that there is no reasonable suspicion that they are under the control of the administrator.
Guidelines given above to use a small number of inputs with a substantial amount of entropy from the last shoud be followed.
And equal care needs to be given that the algorithm selected is faithfully executed with the designated inputs values.
Publication of the results and a week or so window for the community of interest to duplicate the calculations should give a reasonable assurance against implementation tampering.
To maintain the unpredictable character of selections, should a member of the nomcom need to be replaced due to death, resignation, expulsion, etc., new publicly announced future random sources should be used for the selection of their replacement.
This code makes use of the MD5 reference code from [RFC 1321] ("RSA Data Security,
Inc. MD5 Message Digest Algorithm").
The portion of the code dealing with multiple floating point numbers was written by Matt Crawford.
> #include <math.h> #include <stdio.h
> #include <string.h> #include "global.h"
so the user may be able to tell if truncation or other glitches occur.
/ j   sscanf ( buffer, "float %ld.%[0
, sarray[0], &array[1], sarray[1], &array[2], sarray[2], &array[3], sarray[3], &array[4], sarray[4], &array[5], sarray[5], &array[6], sarray[6], &array[7]
, sarray[7], &array[8], sarray[8], &array[9]
, sarray[9], &array[10], sarray[10], &array[11], sarray[11], &array[12], sarray[12], &array[13], sarray[13], &array[14], sarray[14], &array[15], sarray[15] )
selecting all of pool or more?
/ Appendix: History of NomCom Member Selection
For reference purposes, here is a list of the IETF Nominations Committee member selection techniques and chairs so far:
This Algorithm 1999/2000  Avri Doria
This Alogrithm Clergy   Names were written on pieces of paper, placed in a receptacle, and a member of the clergy picked the Nomcom members.
Spouse   Same as Clergy except chair's spouse made the selection.
Algorithm   Algorithmic selection based on the same concepts as documented herein.
This Algorithm   Algorithmic selection using the algorithm and reference code (but not the fake example sources of randomness) described herein.
