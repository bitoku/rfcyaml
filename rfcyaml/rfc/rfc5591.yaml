- contents:
  - "                    Transport Security Model for the\n               Simple Network
    Management Protocol (SNMP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes a Transport Security Model for the Simple Network\n
    \  Management Protocol (SNMP).\n   This memo also defines a portion of the Management
    Information Base\n   (MIB) for monitoring and managing the Transport Security
    Model for\n   SNMP.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. The Internet-Standard Management Framework .................3\n      1.2.
    Conventions ................................................3\n      1.3. Modularity
    .................................................4\n      1.4. Motivation .................................................5\n
    \     1.5. Constraints ................................................5\n   2.
    How the Transport Security Model Fits in the Architecture .......6\n      2.1.
    Security Capabilities of this Model ........................6\n           2.1.1.
    Threats .............................................6\n           2.1.2. Security
    Levels .....................................7\n      2.2. Transport Sessions .........................................7\n
    \     2.3. Coexistence ................................................7\n           2.3.1.
    Coexistence with Message Processing Models ..........7\n           2.3.2. Coexistence
    with Other Security Models ..............8\n           2.3.3. Coexistence with
    Transport Models ...................8\n   3. Cached Information and References
    ...............................8\n      3.1. Transport Security Model Cached Information
    ................9\n           3.1.1. securityStateReference ..............................9\n
    \          3.1.2. tmStateReference ....................................9\n           3.1.3.
    Prefixes and securityNames ..........................9\n   4. Processing an Outgoing
    Message .................................10\n      4.1. Security Processing for
    an Outgoing Message ...............10\n      4.2. Elements of Procedure for Outgoing
    Messages ...............11\n   5. Processing an Incoming SNMP Message ............................12\n
    \     5.1. Security Processing for an Incoming Message ...............12\n      5.2.
    Elements of Procedure for Incoming Messages ...............13\n   6. MIB Module
    Overview ............................................14\n      6.1. Structure
    of the MIB Module ...............................14\n           6.1.1. The snmpTsmStats
    Subtree ...........................14\n           6.1.2. The snmpTsmConfiguration
    Subtree ...................14\n      6.2. Relationship to Other MIB Modules .........................14\n
    \          6.2.1. MIB Modules Required for IMPORTS ...................15\n   7.
    MIB Module Definition ..........................................15\n   8. Security
    Considerations ........................................20\n      8.1. MIB Module
    Security .......................................20\n   9. IANA Considerations
    ............................................21\n   10. Acknowledgments ...............................................22\n
    \  11. References ....................................................22\n      11.1.
    Normative References .....................................22\n      11.2. Informative
    References ...................................23\n   Appendix A.  Notification
    Tables Configuration ....................24\n     A.1.  Transport Security Model
    Processing for Notifications .....25\n   Appendix B.  Processing Differences between
    USM and Secure\n                Transport ............................................26\n
    \    B.1.  USM and the RFC 3411 Architecture .........................26\n     B.2.
    \ Transport Subsystem and the RFC 3411 Architecture .........27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo describes a Transport Security Model for the Simple
    Network\n   Management Protocol for use with secure Transport Models in the\n
    \  Transport Subsystem [RFC5590].\n   This memo also defines a portion of the
    Management Information Base\n   (MIB) for monitoring and managing the Transport
    Security Model for\n   SNMP.\n   It is important to understand the SNMP architecture
    and the\n   terminology of the architecture to understand where the Transport\n
    \  Security Model described in this memo fits into the architecture and\n   interacts
    with other subsystems and models within the architecture.\n   It is expected that
    readers will have also read and understood\n   [RFC3411], [RFC3412], [RFC3413],
    and [RFC3418].\n"
  - contents:
    - "1.1.  The Internet-Standard Management Framework\n   For a detailed overview
      of the documents that describe the current\n   Internet-Standard Management
      Framework, please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed
      objects are accessed via a virtual information store, termed\n   the Management
      Information Base or MIB.  MIB objects are generally\n   accessed through the
      Simple Network Management Protocol (SNMP).\n   Objects in the MIB are defined
      using the mechanisms defined in the\n   Structure of Management Information
      (SMI).  This memo specifies a MIB\n   module that is compliant to the SMIv2,
      which is described in STD 58,\n   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579]
      and STD 58, RFC 2580\n   [RFC2580].\n"
    title: 1.1.  The Internet-Standard Management Framework
  - contents:
    - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  Lowercase versions of the keywords should be read as in normal\n   English.
      \ They will usually, but not always, be used in a context\n   that relates to
      compatibility with the RFC 3411 architecture or the\n   subsystem defined here
      but that might have no impact on on-the-wire\n   compatibility.  These terms
      are used as guidance for designers of\n   proposed IETF models to make the designs
      compatible with RFC 3411\n   subsystems and Abstract Service Interfaces (ASIs).
      \ Implementers are\n   free to implement differently.  Some usages of these
      lowercase terms\n   are simply normal English usage.\n   For consistency with
      SNMP-related specifications, this document\n   favors terminology as defined
      in STD 62, rather than favoring\n   terminology that is consistent with non-SNMP
      specifications that use\n   different variations of the same terminology.  This
      is consistent\n   with the IESG decision to not require the SNMPv3 terminology
      be\n   modified to match the usage of other non-SNMP specifications when\n   SNMPv3
      was advanced to Full Standard.\n   Authentication in this document typically
      refers to the English\n   meaning of \"serving to prove the authenticity of\"
      the message, not\n   data source authentication or peer identity authentication.\n
      \  The terms \"manager\" and \"agent\" are not used in this document\n   because,
      in the RFC 3411 architecture, all SNMP entities have the\n   capability of acting
      as manager, agent, or both depending on the SNMP\n   applications included in
      the engine.  Where distinction is needed,\n   the application names of command
      generator, command responder,\n   notification originator, notification receiver,
      and proxy forwarder\n   are used.  See \"Simple Network Management Protocol
      (SNMP)\n   Applications\" [RFC3413] for further information.\n   While security
      protocols frequently refer to a user, the terminology\n   used in [RFC3411]
      and in this memo is \"principal\".  A principal is\n   the \"who\" on whose
      behalf services are provided or processing takes\n   place.  A principal can
      be, among other things, an individual acting\n   in a particular role, a set
      of individuals each acting in a\n   particular role, an application or a set
      of applications, or a\n   combination of these within an administrative domain.\n"
    title: 1.2.  Conventions
  - contents:
    - "1.3.  Modularity\n   The reader is expected to have read and understood the
      description of\n   the SNMP architecture, as defined in [RFC3411], and the architecture\n
      \  extension specified in \"Transport Subsystem for the Simple Network\n   Management
      Protocol (SNMP)\" [RFC5590], which enables the use of\n   external \"lower-layer
      transport\" protocols to provide message\n   security.  Transport Models are
      tied into the SNMP architecture\n   through the Transport Subsystem.  The Transport
      Security Model is\n   designed to work with such lower-layer, secure Transport
      Models.\n   In keeping with the RFC 3411 design decisions to use self-contained\n
      \  documents, this memo includes the elements of procedure plus\n   associated
      MIB objects that are needed for processing the Transport\n   Security Model
      for SNMP.  These MIB objects SHOULD NOT be referenced\n   in other documents.
      \ This allows the Transport Security Model to be\n   designed and documented
      as independent and self-contained, having no\n   direct impact on other modules.
      \ It also allows this module to be\n   upgraded and supplemented as the need
      arises, and to move along the\n   standards track on different time-lines from
      other modules.\n   This modularity of specification is not meant to be interpreted
      as\n   imposing any specific requirements on implementation.\n"
    title: 1.3.  Modularity
  - contents:
    - "1.4.  Motivation\n   This memo describes a Security Model to make use of Transport
      Models\n   that use lower-layer, secure transports and existing and commonly\n
      \  deployed security infrastructures.  This Security Model is designed\n   to
      meet the security and operational needs of network administrators,\n   maximize
      usability in operational environments to achieve high\n   deployment success,
      and at the same time minimize implementation and\n   deployment costs to minimize
      the time until deployment is possible.\n"
    title: 1.4.  Motivation
  - contents:
    - "1.5.  Constraints\n   The design of this SNMP Security Model is also influenced
      by the\n   following constraints:\n   1.  In times of network stress, the security
      protocol and its\n       underlying security mechanisms SHOULD NOT depend solely
      upon the\n       ready availability of other network services (e.g., Network
      Time\n       Protocol (NTP) or Authentication, Authorization, and Accounting\n
      \      (AAA) protocols).\n   2.  When the network is not under stress, the Security
      Model and its\n       underlying security mechanisms MAY depend upon the ready\n
      \      availability of other network services.\n   3.  It might not be possible
      for the Security Model to determine when\n       the network is under stress.\n
      \  4.  A Security Model SHOULD NOT require changes to the SNMP\n       architecture.\n
      \  5.  A Security Model SHOULD NOT require changes to the underlying\n       security
      protocol.\n"
    title: 1.5.  Constraints
  title: 1.  Introduction
- contents:
  - "2.  How the Transport Security Model Fits in the Architecture\n   The Transport
    Security Model is designed to fit into the RFC 3411\n   architecture as a Security
    Model in the Security Subsystem and to\n   utilize the services of a secure Transport
    Model.\n   For incoming messages, a secure Transport Model will pass a\n   tmStateReference
    cache, described in [RFC5590].  To maintain RFC 3411\n   modularity, the Transport
    Model will not know which securityModel\n   will process the incoming message;
    the Message Processing Model will\n   determine this.  If the Transport Security
    Model is used with a non-\n   secure Transport Model, then the cache will not
    exist or will not be\n   populated with security parameters, which will cause
    the Transport\n   Security Model to return an error (see Section 5.2).\n   The
    Transport Security Model will create the securityName and\n   securityLevel to
    be passed to applications, and will verify that the\n   tmTransportSecurityLevel
    reported by the Transport Model is at least\n   as strong as the securityLevel
    requested by the Message Processing\n   Model.\n   For outgoing messages, the
    Transport Security Model will create a\n   tmStateReference cache (or use an existing
    one), and will pass the\n   tmStateReference to the specified Transport Model.\n"
  - contents:
    - '2.1.  Security Capabilities of this Model

      '
    - contents:
      - "2.1.1.  Threats\n   The Transport Security Model is compatible with the RFC
        3411\n   architecture and provides protection against the threats identified\n
        \  by the RFC 3411 architecture.  However, the Transport Security Model\n
        \  does not provide security mechanisms such as authentication and\n   encryption
        itself.  Which threats are addressed and how they are\n   mitigated depends
        on the Transport Model used.  To avoid creating\n   potential security vulnerabilities,
        operators should configure their\n   system so this Security Model is always
        used with a Transport Model\n   that provides appropriate security, where
        \"appropriate\" for a\n   particular deployment is an administrative decision.\n"
      title: 2.1.1.  Threats
    - contents:
      - "2.1.2.  Security Levels\n   The RFC 3411 architecture recognizes three levels
        of security:\n      - without authentication and without privacy (noAuthNoPriv)\n
        \     - with authentication but without privacy (authNoPriv)\n      - with
        authentication and with privacy (authPriv)\n   The model-independent securityLevel
        parameter is used to request\n   specific levels of security for outgoing
        messages and to assert that\n   specific levels of security were applied during
        the transport and\n   processing of incoming messages.\n   The transport-layer
        algorithms used to provide security should not be\n   exposed to the Transport
        Security Model, as the Transport Security\n   Model has no mechanisms by which
        it can test whether an assertion\n   made by a Transport Model is accurate.\n
        \  The Transport Security Model trusts that the underlying secure\n   transport
        connection has been properly configured to support security\n   characteristics
        at least as strong as reported in\n   tmTransportSecurityLevel.\n"
      title: 2.1.2.  Security Levels
    title: 2.1.  Security Capabilities of this Model
  - contents:
    - "2.2.  Transport Sessions\n   The Transport Security Model does not work with
      transport sessions\n   directly.  Instead the transport-related state is associated
      with a\n   unique combination of transportDomain, transportAddress,\n   securityName,
      and securityLevel, and is referenced via the\n   tmStateReference parameter.
      \ How and if this is mapped to a\n   particular transport or channel is the
      responsibility of the\n   Transport Subsystem.\n"
    title: 2.2.  Transport Sessions
  - contents:
    - "2.3.  Coexistence\n   In the RFC 3411 architecture, a Message Processing Model
      determines\n   which Security Model SHALL be called.  As of this writing, IANA
      has\n   registered four Message Processing Models (SNMPv1, SNMPv2c, SNMPv2u/\n
      \  SNMPv2*, and SNMPv3) and three other Security Models (SNMPv1,\n   SNMPv2c,
      and the User-based Security Model).\n"
    - contents:
      - "2.3.1.  Coexistence with Message Processing Models\n   The SNMPv1 and SNMPv2c
        message processing described in BCP 74\n   [RFC3584] always selects the SNMPv1(1)
        and SNMPv2c(2) Security\n   Models.  Since there is no mechanism defined in
        RFC 3584 to select an\n   alternative Security Model, SNMPv1 and SNMPv2c messages
        cannot use\n   the Transport Security Model.  Messages might still be able
        to be\n   conveyed over a secure transport protocol, but the Transport Security\n
        \  Model will not be invoked.\n   The SNMPv2u/SNMPv2* Message Processing Model
        is an historic artifact\n   for which there is no existing IETF specification.\n
        \  The SNMPv3 message processing defined in [RFC3412] extracts the\n   securityModel
        from the msgSecurityModel field of an incoming\n   SNMPv3Message.  When this
        value is transportSecurityModel(4),\n   security processing is directed to
        the Transport Security Model.  For\n   an outgoing message to be secured using
        the Transport Security Model,\n   the application MUST specify a securityModel
        parameter value of\n   transportSecurityModel(4) in the sendPdu Abstract Service
        Interface\n   (ASI).\n"
      title: 2.3.1.  Coexistence with Message Processing Models
    - contents:
      - "2.3.2.  Coexistence with Other Security Models\n   The Transport Security
        Model uses its own MIB module for processing\n   to maintain independence
        from other Security Models.  This allows the\n   Transport Security Model
        to coexist with other Security Models, such\n   as the User-based Security
        Model (USM) [RFC3414].\n"
      title: 2.3.2.  Coexistence with Other Security Models
    - contents:
      - "2.3.3.  Coexistence with Transport Models\n   The Transport Security Model
        (TSM) MAY work with multiple Transport\n   Models, but the RFC 3411 Abstract
        Service Interfaces (ASIs) do not\n   carry a value for the Transport Model.
        \ The MIB module defined in\n   this memo allows an administrator to configure
        whether or not TSM\n   prepends a Transport Model prefix to the securityName.
        \ This will\n   allow SNMP applications to consider Transport Model as a factor
        when\n   making decisions, such as access control, notification generation,\n
        \  and proxy forwarding.\n   To have SNMP properly utilize the security services
        coordinated by\n   the Transport Security Model, this Security Model MUST
        only be used\n   with Transport Models that know how to process a tmStateReference,\n
        \  such as the Secure Shell Transport Model [RFC5592].\n"
      title: 2.3.3.  Coexistence with Transport Models
    title: 2.3.  Coexistence
  title: 2.  How the Transport Security Model Fits in the Architecture
- contents:
  - "3.  Cached Information and References\n   When performing SNMP processing, there
    are two levels of state\n   information that might need to be retained: the immediate
    state\n   linking a request-response pair and a potentially longer-term state\n
    \  relating to transport and security.  \"Transport Subsystem for the\n   Simple
    Network Management Protocol (SNMP)\" [RFC5590] defines general\n   requirements
    for caches and references.\n   This document defines additional cache requirements
    related to the\n   Transport Security Model.\n"
  - contents:
    - "3.1.  Transport Security Model Cached Information\n   The Transport Security
      Model has specific responsibilities regarding\n   the cached information.\n"
    - contents:
      - "3.1.1.  securityStateReference\n   The Transport Security Model adds the
        tmStateReference received from\n   the processIncomingMsg ASI to the securityStateReference.
        \ This\n   tmStateReference can then be retrieved during the generateResponseMsg\n
        \  ASI so that it can be passed back to the Transport Model.\n"
      title: 3.1.1.  securityStateReference
    - contents:
      - "3.1.2.  tmStateReference\n   For outgoing messages, the Transport Security
        Model uses parameters\n   provided by the SNMP application to look up or create
        a\n   tmStateReference.\n   For the Transport Security Model, the security
        parameters used for a\n   response MUST be the same as those used for the
        corresponding\n   request.  This Security Model uses the tmStateReference
        stored as\n   part of the securityStateReference when appropriate.  For responses\n
        \  and reports, this Security Model sets the tmSameSecurity flag to true\n
        \  in the tmStateReference before passing it to a Transport Model.\n   For
        incoming messages, the Transport Security Model uses parameters\n   provided
        in the tmStateReference cache to establish a securityName,\n   and to verify
        adequate security levels.\n"
      title: 3.1.2.  tmStateReference
    - contents:
      - "3.1.3.  Prefixes and securityNames\n   The SNMP-VIEW-BASED-ACM-MIB module
        [RFC3415], the SNMP-TARGET-MIB\n   module [RFC3413], and other MIB modules
        contain objects to configure\n   security parameters for use by applications
        such as access control,\n   notification generation, and proxy forwarding.\n
        \  Transport domains and their corresponding prefixes are coordinated\n   via
        the IANA registry \"SNMP Transport Domains\".\n   If snmpTsmConfigurationUsePrefix
        is set to true, then all\n   securityNames provided by, or provided to, the
        Transport Security\n   Model MUST include a valid transport domain prefix.\n
        \  If snmpTsmConfigurationUsePrefix is set to false, then all\n   securityNames
        provided by, or provided to, the Transport Security\n   Model MUST NOT include
        a transport domain prefix.\n   The tmSecurityName in the tmStateReference
        stored as part of the\n   securityStateReference does not contain a prefix.\n"
      title: 3.1.3.  Prefixes and securityNames
    title: 3.1.  Transport Security Model Cached Information
  title: 3.  Cached Information and References
- contents:
  - "4.  Processing an Outgoing Message\n   An error indication might return an Object
    Identifier (OID) and value\n   for an incremented counter, a value for securityLevel,
    values for\n   contextEngineID and contextName for the counter, and the\n   securityStateReference,
    if this information is available at the point\n   where the error is detected.\n"
  - contents:
    - "4.1.  Security Processing for an Outgoing Message\n   This section describes
      the procedure followed by the Transport\n   Security Model.\n   The parameters
      needed for generating a message are supplied to the\n   Security Model by the
      Message Processing Model via the\n   generateRequestMsg() or the generateResponseMsg()
      ASI.  The Transport\n   Subsystem architectural extension has added the transportDomain,\n
      \  transportAddress, and tmStateReference parameters to the original RFC\n   3411
      ASIs.\n    statusInformation =                -- success or errorIndication\n
      \         generateRequestMsg(\n          IN   messageProcessingModel  -- typically,
      SNMP version\n          IN   globalData              -- message header, admin
      data\n          IN   maxMessageSize          -- of the sending SNMP entity\n
      \         IN   transportDomain         -- (NEW) specified by application\n          IN
      \  transportAddress        -- (NEW) specified by application\n          IN   securityModel
      \          -- for the outgoing message\n          IN   securityEngineID        --
      authoritative SNMP entity\n          IN   securityName            -- on behalf
      of this principal\n          IN   securityLevel           -- Level of Security
      requested\n          IN   scopedPDU               -- message (plaintext) payload\n
      \         OUT  securityParameters      -- filled in by Security Module\n          OUT
      \ wholeMsg                -- complete generated message\n          OUT  wholeMsgLength
      \         -- length of generated message\n          OUT  tmStateReference        --
      (NEW) transport info\n               )\n  statusInformation = -- success or
      errorIndication\n          generateResponseMsg(\n          IN   messageProcessingModel
      \ -- typically, SNMP version\n          IN   globalData              -- message
      header, admin data\n          IN   maxMessageSize          -- of the sending
      SNMP entity\n          IN   transportDomain         -- (NEW) specified by application\n
      \         IN   transportAddress        -- (NEW) specified by application\n          IN
      \  securityModel           -- for the outgoing message\n          IN   securityEngineID
      \       -- authoritative SNMP entity\n          IN   securityName            --
      on behalf of this principal\n          IN   securityLevel           -- Level
      of Security requested\n          IN   scopedPDU               -- message (plaintext)
      payload\n          IN   securityStateReference  -- reference to security state\n
      \                                      -- information from original\n                                       --
      request\n          OUT  securityParameters      -- filled in by Security Module\n
      \         OUT  wholeMsg                -- complete generated message\n          OUT
      \ wholeMsgLength          -- length of generated message\n          OUT  tmStateReference
      \       -- (NEW) transport info\n               )\n"
    title: 4.1.  Security Processing for an Outgoing Message
  - contents:
    - "4.2.  Elements of Procedure for Outgoing Messages\n   1.  If there is a securityStateReference
      (Response or Report\n       message), then this Security Model uses the cached
      information\n       rather than the information provided by the ASI.  Extract
      the\n       tmStateReference from the securityStateReference cache.  Set the\n
      \      tmRequestedSecurityLevel to the value of the extracted\n       tmTransportSecurityLevel.
      \ Set the tmSameSecurity parameter in\n       the tmStateReference cache to
      true.  The cachedSecurityData for\n       this message can now be discarded.\n
      \  2.  If there is no securityStateReference (e.g., a Request-type or\n       Notification
      message), then create a tmStateReference cache.  Set\n       tmTransportDomain
      to the value of transportDomain,\n       tmTransportAddress to the value of
      transportAddress, and\n       tmRequestedSecurityLevel to the value of securityLevel.\n
      \      (Implementers might optimize by pointing to saved copies of these\n       session-specific
      values.)  Set the transaction-specific\n       tmSameSecurity parameter to false.\n
      \      If the snmpTsmConfigurationUsePrefix object is set to false, then\n       set
      tmSecurityName to the value of securityName.\n       If the snmpTsmConfigurationUsePrefix
      object is set to true, then\n       use the transportDomain to look up the corresponding
      prefix.\n       (Since the securityStateReference stores the tmStateReference\n
      \      with the tmSecurityName for the incoming message, and since\n       tmSecurityName
      never has a prefix, the prefix-stripping step only\n       occurs when we are
      not using the securityStateReference).\n          If the prefix lookup fails
      for any reason, then the\n          snmpTsmUnknownPrefixes counter is incremented,
      an error\n          indication is returned to the calling module, and message\n
      \         processing stops.\n          If the lookup succeeds, but there is
      no prefix in the\n          securityName, or the prefix returned does not match
      the prefix\n          in the securityName, or the length of the prefix is less
      than\n          1 or greater than 4 US-ASCII alpha-numeric characters, then\n
      \         the snmpTsmInvalidPrefixes counter is incremented, an error\n          indication
      is returned to the calling module, and message\n          processing stops.\n
      \         Strip the transport-specific prefix and trailing ':' character\n          (US-ASCII
      0x3a) from the securityName.  Set tmSecurityName to\n          the value of
      securityName.\n   3.  Set securityParameters to a zero-length OCTET STRING ('0400').\n
      \  4.  Combine the message parts into a wholeMsg and calculate\n       wholeMsgLength.\n
      \  5.  The wholeMsg, wholeMsgLength, securityParameters, and\n       tmStateReference
      are returned to the calling Message Processing\n       Model with the statusInformation
      set to success.\n"
    title: 4.2.  Elements of Procedure for Outgoing Messages
  title: 4.  Processing an Outgoing Message
- contents:
  - "5.  Processing an Incoming SNMP Message\n   An error indication might return
    an OID and value for an incremented\n   counter, a value for securityLevel, values
    for contextEngineID and\n   contextName for the counter, and the securityStateReference,
    if this\n   information is available at the point where the error is detected.\n"
  - contents:
    - "5.1.  Security Processing for an Incoming Message\n   This section describes
      the procedure followed by the Transport\n   Security Model whenever it receives
      an incoming message from a\n   Message Processing Model.  The ASI from a Message
      Processing Model to\n   the Security Subsystem for a received message is:\n
      \  statusInformation =  -- errorIndication or success\n                            --
      error counter OID/value if error\n   processIncomingMsg(\n   IN   messageProcessingModel
      \   -- typically, SNMP version\n   IN   maxMessageSize            -- from the
      received message\n   IN   securityParameters        -- from the received message\n
      \  IN   securityModel             -- from the received message\n   IN   securityLevel
      \            -- from the received message\n   IN   wholeMsg                  --
      as received on the wire\n   IN   wholeMsgLength            -- length as received
      on the wire\n   IN   tmStateReference          -- (NEW) from the Transport Model\n
      \  OUT  securityEngineID          -- authoritative SNMP entity\n   OUT  securityName
      \             -- identification of the principal\n   OUT  scopedPDU,                --
      message (plaintext) payload\n   OUT  maxSizeResponseScopedPDU  -- maximum size
      sender can handle\n   OUT  securityStateReference    -- reference to security
      state\n    )                         -- information, needed for response\n"
    title: 5.1.  Security Processing for an Incoming Message
  - contents:
    - "5.2.  Elements of Procedure for Incoming Messages\n   1.  Set the securityEngineID
      to the local snmpEngineID.\n   2.  If tmStateReference does not refer to a cache
      containing values\n       for tmTransportDomain, tmTransportAddress, tmSecurityName,
      and\n       tmTransportSecurityLevel, then the snmpTsmInvalidCaches counter\n
      \      is incremented, an error indication is returned to the calling\n       module,
      and Security Model processing stops for this message.\n   3.  Copy the tmSecurityName
      to securityName.\n       If the snmpTsmConfigurationUsePrefix object is set
      to true, then\n       use the tmTransportDomain to look up the corresponding
      prefix.\n          If the prefix lookup fails for any reason, then the\n          snmpTsmUnknownPrefixes
      counter is incremented, an error\n          indication is returned to the calling
      module, and message\n          processing stops.\n          If the lookup succeeds
      but the prefix length is less than 1 or\n          greater than 4 octets, then
      the snmpTsmInvalidPrefixes counter\n          is incremented, an error indication
      is returned to the calling\n          module, and message processing stops.\n
      \         Set the securityName to be the concatenation of the prefix, a\n          ':'
      character (US-ASCII 0x3a), and the tmSecurityName.\n   4.  Compare the value
      of tmTransportSecurityLevel in the\n       tmStateReference cache to the value
      of the securityLevel\n       parameter passed in the processIncomingMsg ASI.
      \ If securityLevel\n       specifies privacy (Priv) and tmTransportSecurityLevel
      specifies\n       no privacy (noPriv), or if securityLevel specifies authentication\n
      \      (auth) and tmTransportSecurityLevel specifies no authentication\n       (noAuth)
      was provided by the Transport Model, then the\n       snmpTsmInadequateSecurityLevels
      counter is incremented, an error\n       indication (unsupportedSecurityLevel)
      together with the OID and\n       value of the incremented counter is returned
      to the calling\n       module, and Transport Security Model processing stops
      for this\n       message.\n   5.  The tmStateReference is cached as cachedSecurityData
      so that a\n       possible response to this message will use the same security\n
      \      parameters.  Then securityStateReference is set for subsequent\n       references
      to this cached data.\n   6.  The scopedPDU component is extracted from the wholeMsg.\n
      \  7.  The maxSizeResponseScopedPDU is calculated.  This is the maximum\n       size
      allowed for a scopedPDU for a possible Response message.\n   8.  The statusInformation
      is set to success and a return is made to\n       the calling module passing
      back the OUT parameters as specified\n       in the processIncomingMsg ASI.\n"
    title: 5.2.  Elements of Procedure for Incoming Messages
  title: 5.  Processing an Incoming SNMP Message
- contents:
  - "6.  MIB Module Overview\n   This MIB module provides objects for use only by
    the Transport\n   Security Model.  It defines a configuration scalar and related
    error\n   counters.\n"
  - contents:
    - "6.1.  Structure of the MIB Module\n   Objects in this MIB module are arranged
      into subtrees.  Each subtree\n   is organized as a set of related objects.  The
      overall structure and\n   assignment of objects to their subtrees, and the intended
      purpose of\n   each subtree, is shown below.\n"
    - contents:
      - "6.1.1.  The snmpTsmStats Subtree\n   This subtree contains error counters
        specific to the Transport\n   Security Model.\n"
      title: 6.1.1.  The snmpTsmStats Subtree
    - contents:
      - "6.1.2.  The snmpTsmConfiguration Subtree\n   This subtree contains a configuration
        object that enables\n   administrators to specify if they want a transport
        domain prefix\n   prepended to securityNames for use by applications.\n"
      title: 6.1.2.  The snmpTsmConfiguration Subtree
    title: 6.1.  Structure of the MIB Module
  - contents:
    - "6.2.  Relationship to Other MIB Modules\n   Some management objects defined
      in other MIB modules are applicable\n   to an entity implementing the Transport
      Security Model.  In\n   particular, it is assumed that an entity implementing
      the Transport\n   Security Model will implement the SNMP-FRAMEWORK-MIB [RFC3411],
      the\n   SNMP-TARGET-MIB [RFC3413], the SNMP-VIEW-BASED-ACM-MIB [RFC3415], and\n
      \  the SNMPv2-MIB [RFC3418].  These are not needed to implement the\n   SNMP-TSM-MIB.\n"
    - contents:
      - "6.2.1.  MIB Modules Required for IMPORTS\n   The following MIB module imports
        items from [RFC2578], [RFC2579], and\n   [RFC2580].\n"
      title: 6.2.1.  MIB Modules Required for IMPORTS
    title: 6.2.  Relationship to Other MIB Modules
  title: 6.  MIB Module Overview
- contents:
  - '7.  MIB Module Definition

    '
  - 'SNMP-TSM-MIB DEFINITIONS ::= BEGIN

    '
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    mib-2, Counter32\n      FROM
    SNMPv2-SMI -- RFC2578\n    MODULE-COMPLIANCE, OBJECT-GROUP\n      FROM SNMPv2-CONF
    -- RFC2580\n    TruthValue\n       FROM SNMPv2-TC -- RFC2579\n    ;\n"
  - "snmpTsmMIB MODULE-IDENTITY\n    LAST-UPDATED \"200906090000Z\"\n    ORGANIZATION
    \"ISMS Working Group\"\n    CONTACT-INFO \"WG-EMail:   isms@lists.ietf.org\n                  Subscribe:
    \ isms-request@lists.ietf.org\n                  Chairs:\n                    Juergen
    Quittek\n                    NEC Europe Ltd.\n                    Network Laboratories\n
    \                   Kurfuersten-Anlage 36\n                    69115 Heidelberg\n
    \                   Germany\n                    +49 6221 90511-15\n                    quittek@netlab.nec.de\n
    \                   Juergen Schoenwaelder\n                    Jacobs University
    Bremen\n                    Campus Ring 1\n                    28725 Bremen\n
    \                   Germany\n                    +49 421 200-3587\n                    j.schoenwaelder@jacobs-university.de\n
    \                 Editor:\n                    David Harrington\n                    Huawei
    Technologies USA\n                    1700 Alma Dr.\n                    Plano
    TX 75075\n                    USA\n                    +1 603-436-8634\n                    ietfdbh@comcast.net\n
    \                   Wes Hardaker\n                    Cobham Analytic Solutions\n
    \                   P.O. Box 382\n                    Davis, CA  95617\n                    USA\n
    \                   +1 530 792 1913\n                    ietf@hardakers.net\n
    \                \"\n    DESCRIPTION\n       \"The Transport Security Model MIB.\n
    \       In keeping with the RFC 3411 design decisions to use\n        self-contained
    documents, the RFC that contains the definition\n        of this MIB module also
    includes the elements of procedure\n        that are needed for processing the
    Transport Security Model\n        for SNMP.  These MIB objects SHOULD NOT be modified
    via other\n        subsystems or models defined in other documents.  This allows\n
    \       the Transport Security Model for SNMP to be designed and\n        documented
    as independent and self-contained, having no direct\n        impact on other modules,
    and this allows this module to be\n        upgraded and supplemented as the need
    arises, and to move\n        along the standards track on different time-lines
    from other\n        modules.\n        Copyright (c) 2009 IETF Trust and the persons\n
    \       identified as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, are
    permitted provided that the\n        following conditions are met:\n        -
    Redistributions of source code must retain the above copyright\n          notice,
    this list of conditions and the following disclaimer.\n        - Redistributions
    in binary form must reproduce the above\n          copyright notice, this list
    of conditions and the following\n          disclaimer in the documentation and/or
    other materials\n          provided with the distribution.\n        - Neither
    the name of Internet Society, IETF or IETF Trust,\n          nor the names of
    specific contributors, may be used to endorse\n          or promote products derived
    from this software without\n          specific prior written permission.\n        THIS
    SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n        CONTRIBUTORS 'AS IS'
    AND ANY EXPRESS OR IMPLIED WARRANTIES,\n        INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF\n        MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE\n        DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n        CONTRIBUTORS
    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n        SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n        NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION)\n        HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
    IN\n        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n        OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n        EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.\n        This version of this MIB module is part
    of RFC 5591;\n        see the RFC itself for full legal notices.\"\n    REVISION
    \   \"200906090000Z\"\n    DESCRIPTION \"The initial version, published in RFC
    5591.\"\n    ::= { mib-2 190 }\n"
  - '-- ---------------------------------------------------------- --

    '
  - '-- subtrees in the SNMP-TSM-MIB

    '
  - '-- ---------------------------------------------------------- --

    '
  - 'snmpTsmNotifications OBJECT IDENTIFIER ::= { snmpTsmMIB 0 }

    '
  - 'snmpTsmMIBObjects    OBJECT IDENTIFIER ::= { snmpTsmMIB 1 }

    '
  - 'snmpTsmConformance   OBJECT IDENTIFIER ::= { snmpTsmMIB 2 }

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Objects

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Statistics for the Transport Security Model

    '
  - 'snmpTsmStats         OBJECT IDENTIFIER ::= { snmpTsmMIBObjects 1 }

    '
  - "snmpTsmInvalidCaches OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of incoming
    messages dropped because the\n                 tmStateReference referred to an
    invalid cache.\n                \"\n    ::= { snmpTsmStats 1 }\n"
  - "snmpTsmInadequateSecurityLevels OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of incoming
    messages dropped because\n                 the securityLevel asserted by the Transport
    Model was\n                 less than the securityLevel requested by the\n                 application.\n
    \               \"\n    ::= { snmpTsmStats 2 }\n"
  - "snmpTsmUnknownPrefixes OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of messages
    dropped because\n                 snmpTsmConfigurationUsePrefix was set to true
    and\n                 there is no known prefix for the specified transport\n                 domain.\n
    \               \"\n    ::= { snmpTsmStats 3 }\n"
  - "snmpTsmInvalidPrefixes OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of messages
    dropped because\n                 the securityName associated with an outgoing
    message\n                 did not contain a valid transport domain prefix.\n                \"\n
    \   ::= { snmpTsmStats 4 }\n"
  - '-- -------------------------------------------------------------

    '
  - '-- Configuration

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Configuration for the Transport Security Model

    '
  - 'snmpTsmConfiguration   OBJECT IDENTIFIER ::= { snmpTsmMIBObjects 2 }

    '
  - "snmpTsmConfigurationUsePrefix OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS
    \ read-write\n    STATUS      current\n    DESCRIPTION \"If this object is set
    to true, then securityNames\n                 passing to and from the application
    are expected to\n                 contain a transport-domain-specific prefix.
    \ If this\n                 object is set to true, then a domain-specific prefix\n
    \                will be added by the TSM to the securityName for\n                 incoming
    messages and removed from the securityName\n                 when processing outgoing
    messages.  Transport domains\n                 and prefixes are maintained in
    a registry by IANA.\n                 This object SHOULD persist across system
    reboots.\n                \"\n    DEFVAL { false }\n    ::= { snmpTsmConfiguration
    1 }\n"
  - '-- -------------------------------------------------------------

    '
  - '-- snmpTsmMIB - Conformance Information

    '
  - '-- -------------------------------------------------------------

    '
  - 'snmpTsmCompliances OBJECT IDENTIFIER ::= { snmpTsmConformance 1 }

    '
  - 'snmpTsmGroups      OBJECT IDENTIFIER ::= { snmpTsmConformance 2 }

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Compliance statements

    '
  - '-- -------------------------------------------------------------

    '
  - "snmpTsmCompliance MODULE-COMPLIANCE\n    STATUS      current\n    DESCRIPTION
    \"The compliance statement for SNMP engines that support\n                 the
    SNMP-TSM-MIB.\n                \"\n    MODULE\n        MANDATORY-GROUPS { snmpTsmGroup
    }\n    ::= { snmpTsmCompliances 1 }\n"
  - '-- -------------------------------------------------------------

    '
  - '-- Units of conformance

    '
  - '-- -------------------------------------------------------------

    '
  - "snmpTsmGroup OBJECT-GROUP\n    OBJECTS {\n        snmpTsmInvalidCaches,\n        snmpTsmInadequateSecurityLevels,\n
    \       snmpTsmUnknownPrefixes,\n        snmpTsmInvalidPrefixes,\n        snmpTsmConfigurationUsePrefix\n
    \   }\n    STATUS      current\n    DESCRIPTION \"A collection of objects for
    maintaining\n                 information of an SNMP engine that implements\n
    \                the SNMP Transport Security Model.\n                \"\n    ::=
    { snmpTsmGroups 2 }\n"
  - 'END

    '
  title: 7.  MIB Module Definition
- contents:
  - "8.  Security Considerations\n   This document describes a Security Model, compatible
    with the RFC\n   3411 architecture, that permits SNMP to utilize security services\n
    \  provided through an SNMP Transport Model.  The Transport Security\n   Model
    relies on Transport Models for mutual authentication, binding\n   of keys, confidentiality,
    and integrity.\n   The Transport Security Model relies on secure Transport Models
    to\n   provide an authenticated principal identifier and an assertion of\n   whether
    authentication and privacy are used during transport.  This\n   Security Model
    SHOULD always be used with Transport Models that\n   provide adequate security,
    but \"adequate security\" is a configuration\n   and/or run-time decision of the
    operator or management application.\n   The security threats and how these threats
    are mitigated should be\n   covered in detail in the specifications of the Transport
    Models and\n   the underlying secure transports.\n   An authenticated principal
    identifier (securityName) is used in SNMP\n   applications for purposes such as
    access control, notification\n   generation, and proxy forwarding.  This Security
    Model supports\n   multiple Transport Models.  Operators might judge some transports
    to\n   be more secure than others, so this Security Model can be configured\n
    \  to prepend a prefix to the securityName to indicate the Transport\n   Model
    used to authenticate the principal.  Operators can use the\n   prefixed securityName
    when making application decisions about levels\n   of access.\n"
  - contents:
    - "8.1.  MIB Module Security\n   There are a number of management objects defined
      in this MIB module\n   with a MAX-ACCESS clause of read-write and/or read-create.
      \ Such\n   objects may be considered sensitive or vulnerable in some network\n
      \  environments.  The support for SET operations in a non-secure\n   environment
      without proper protection can have a negative effect on\n   network operations.
      \ These are the tables and objects and their\n   sensitivity/vulnerability:\n
      \  o  The snmpTsmConfigurationUsePrefix object could be modified,\n      creating
      a denial of service or authorizing SNMP messages that\n      would not have
      previously been authorized by an Access Control\n      Model (e.g., the View-based
      Access Control Model (VACM)).\n   Some of the readable objects in this MIB module
      (i.e., objects with a\n   MAX-ACCESS other than not-accessible) may be considered
      sensitive or\n   vulnerable in some network environments.  It is thus important
      to\n   control even GET and/or NOTIFY access to these objects and possibly\n
      \  to even encrypt the values of these objects when sending them over\n   the
      network via SNMP.  These are the tables and objects and their\n   sensitivity/vulnerability:\n
      \  o  All the counters in this module refer to configuration errors and\n      do
      not expose sensitive information.\n   SNMP versions prior to SNMPv3 did not
      include adequate security.\n   Even if the network itself is secure (for example
      by using IPsec),\n   even then, there is no control as to who on the secure
      network is\n   allowed to access and GET/SET (read/change/create/delete) the
      objects\n   in this MIB module.\n   It is RECOMMENDED that implementers consider
      the security features as\n   provided by the SNMPv3 framework (see [RFC3410],
      section 8),\n   including full support for the USM and Transport Security Model\n
      \  cryptographic mechanisms (for authentication and privacy).\n   Further, deployment
      of SNMP versions prior to SNMPv3 is NOT\n   RECOMMENDED.  Instead, it is RECOMMENDED
      to deploy SNMPv3 and to\n   enable cryptographic security.  It is then a customer/operator\n
      \  responsibility to ensure that the SNMP entity giving access to an\n   instance
      of this MIB module is properly configured to give access to\n   the objects
      only to those principals (users) that have legitimate\n   rights to indeed GET
      or SET (change/create/delete) them.\n"
    title: 8.1.  MIB Module Security
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   IANA has assigned:\n   1.  An SMI number (190) with
    a prefix of mib-2 in the MIB module\n       registry for the MIB module in this
    document.\n   2.  A value (4) to identify the Transport Security Model, in the\n
    \      Security Models registry of the SNMP Number Spaces registry.\n       This
    results in the following table of values:\n   Value   Description                         References\n
    \  -----   -----------                         ----------\n     0     reserved
    for 'any'                  [RFC3411]\n     1     reserved for SNMPv1                 [RFC3411]\n
    \    2     reserved for SNMPv2c                [RFC3411]\n     3     User-Based
    Security Model (USM)     [RFC3411]\n     4     Transport Security Model (TSM)
    \     [RFC5591]\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Acknowledgments\n   The editors would like to thank Jeffrey Hutzelman for
    sharing his SSH\n   insights and Dave Shield for an outstanding job wordsmithing
    the\n   existing document to improve organization and clarity.\n   Additionally,
    helpful document reviews were received from Juergen\n   Schoenwaelder.\n"
  title: 10.  Acknowledgments
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2578]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,
      Ed., \"Structure of Management Information\n              Version 2 (SMIv2)\",
      STD 58, RFC 2578, April 1999.\n   [RFC2579]  McCloghrie, K., Ed., Perkins, D.,
      Ed., and J.\n              Schoenwaelder, Ed., \"Textual Conventions for SMIv2\",\n
      \             STD 58, RFC 2579, April 1999.\n   [RFC2580]  McCloghrie, K., Perkins,
      D., and J. Schoenwaelder,\n              \"Conformance Statements for SMIv2\",
      STD 58, RFC 2580,\n              April 1999.\n   [RFC3411]  Harrington, D.,
      Presuhn, R., and B. Wijnen, \"An\n              Architecture for Describing
      Simple Network Management\n              Protocol (SNMP) Management Frameworks\",
      STD 62, RFC 3411,\n              December 2002.\n   [RFC3412]  Case, J., Harrington,
      D., Presuhn, R., and B. Wijnen,\n              \"Message Processing and Dispatching
      for the Simple Network\n              Management Protocol (SNMP)\", STD 62,
      RFC 3412,\n              December 2002.\n   [RFC3413]  Levi, D., Meyer, P.,
      and B. Stewart, \"Simple Network\n              Management Protocol (SNMP) Applications\",
      STD 62,\n              RFC 3413, December 2002.\n   [RFC3414]  Blumenthal, U.
      and B. Wijnen, \"User-based Security Model\n              (USM) for version
      3 of the Simple Network Management\n              Protocol (SNMPv3)\", STD 62,
      RFC 3414, December 2002.\n   [RFC5590]  Harrington, D. and J. Schoenwaelder,
      \"Transport Subsystem\n              for the Simple Network Management Protocol
      (SNMP)\",\n              RFC 5590, June 2009.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC3410]  Case, J., Mundy, R., Partain,
      D., and B. Stewart,\n              \"Introduction and Applicability Statements
      for Internet-\n              Standard Management Framework\", RFC 3410, December
      2002.\n   [RFC3415]  Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n
      \             Access Control Model (VACM) for the Simple Network\n              Management
      Protocol (SNMP)\", STD 62, RFC 3415,\n              December 2002.\n   [RFC3418]
      \ Presuhn, R., \"Management Information Base (MIB) for the\n              Simple
      Network Management Protocol (SNMP)\", STD 62,\n              RFC 3418, December
      2002.\n   [RFC3584]  Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n              \"Coexistence
      between Version 1, Version 2, and Version 3\n              of the Internet-standard
      Network Management Framework\",\n              BCP 74, RFC 3584, August 2003.\n
      \  [RFC5592]  Harrington, D., Salowey, J., and W. Hardaker, \"Secure\n              Shell
      Transport Model for the Simple Network Management\n              Protocol (SNMP)\",
      RFC 5592, June 2009.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Notification Tables Configuration\n   The SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB
    [RFC3413] are used to\n   configure notification originators with the destinations
    to which\n   notifications should be sent.\n   Most of the configuration is Security-Model-independent
    and\n   Transport-Model-independent.\n   The values we will use in the examples
    for the five model-independent\n   security and transport parameters are:\n      transportDomain
    = snmpSSHDomain\n      transportAddress = 192.0.2.1:5162\n      securityModel
    = Transport Security Model\n      securityName = alice\n      securityLevel =
    authPriv\n   The following example will configure the notification originator
    to\n   send informs to a notification receiver at 192.0.2.1:5162 using the\n   securityName
    \"alice\". \"alice\" is the name for the recipient from the\n   standpoint of
    the notification originator and is used for processing\n   access controls before
    sending a notification.\n   The columns marked with an \"*\" are the items that
    are Security-Model-\n   specific or Transport-Model-specific.\n   The configuration
    for the \"alice\" settings in the SNMP-VIEW-BASED-\n   ACM-MIB objects are not
    shown here for brevity.  First, we configure\n   which type of notification will
    be sent for this taglist (toCRTag).\n   In this example, we choose to send an
    Inform.\n     snmpNotifyTable row:\n          snmpNotifyName                 CRNotif\n
    \         snmpNotifyTag                  toCRTag\n          snmpNotifyType                 inform\n
    \         snmpNotifyStorageType          nonVolatile\n          snmpNotifyColumnStatus
    \        createAndGo\n   Then we configure a transport address to which notifications\n
    \  associated with this taglist will be sent, and we specify which\n   snmpTargetParamsEntry
    will be used (toCR) when sending to this\n   transport address.\n          snmpTargetAddrTable
    row:\n             snmpTargetAddrName              toCRAddr\n         *   snmpTargetAddrTDomain
    \          snmpSSHDomain\n         *   snmpTargetAddrTAddress          192.0.2.1:5162\n
    \            snmpTargetAddrTimeout           1500\n             snmpTargetAddrRetryCount
    \       3\n             snmpTargetAddrTagList           toCRTag\n             snmpTargetAddrParams
    \           toCR   (MUST match below)\n             snmpTargetAddrStorageType
    \      nonVolatile\n             snmpTargetAddrColumnStatus      createAndGo\n
    \  Then we configure which principal at the host will receive the\n   notifications
    associated with this taglist.  Here, we choose \"alice\",\n   who uses the Transport
    Security Model.\n         snmpTargetParamsTable row:\n             snmpTargetParamsName
    \           toCR\n             snmpTargetParamsMPModel         SNMPv3\n         *
    \  snmpTargetParamsSecurityModel   TransportSecurityModel\n             snmpTargetParamsSecurityName
    \   \"alice\"\n             snmpTargetParamsSecurityLevel   authPriv\n             snmpTargetParamsStorageType
    \    nonVolatile\n             snmpTargetParamsRowStatus       createAndGo\n"
  - contents:
    - "A.1.  Transport Security Model Processing for Notifications\n   The Transport
      Security Model is called using the generateRequestMsg()\n   ASI, with the following
      parameters (those with an * are from the\n   above tables):\n    statusInformation
      =                -- success or errorIndication\n          generateRequestMsg(\n
      \         IN   messageProcessingModel  -- *snmpTargetParamsMPModel\n          IN
      \  globalData              -- message header, admin data\n          IN   maxMessageSize
      \         -- of the sending SNMP entity\n          IN   transportDomain         --
      *snmpTargetAddrTDomain\n          IN   transportAddress        -- *snmpTargetAddrTAddress\n
      \         IN   securityModel           -- *snmpTargetParamsSecurityModel\n          IN
      \  securityEngineID        -- immaterial; TSM will ignore.\n          IN   securityName
      \           -- snmpTargetParamsSecurityName\n          IN   securityLevel           --
      *snmpTargetParamsSecurityLevel\n          IN   scopedPDU               -- message
      (plaintext) payload\n          OUT  securityParameters      -- filled in by
      Security Module\n          OUT  wholeMsg                -- complete generated
      message\n          OUT  wholeMsgLength          -- length of generated message\n
      \         OUT  tmStateReference        -- reference to transport info\n               )\n
      \  The Transport Security Model will determine the Transport Model based\n   on
      the snmpTargetAddrTDomain.  The selected Transport Model will\n   select the
      appropriate transport connection using the\n   tmStateReference cache created
      from the values of\n   snmpTargetAddrTAddress, snmpTargetParamsSecurityName,
      and\n   snmpTargetParamsSecurityLevel.\n"
    title: A.1.  Transport Security Model Processing for Notifications
  title: Appendix A.  Notification Tables Configuration
- contents:
  - "Appendix B.  Processing Differences between USM and Secure Transport\n   USM
    and secure transports differ in the processing order and\n   responsibilities
    within the RFC 3411 architecture.  While the steps\n   are the same, they occur
    in a different order and might be done by\n   different subsystems.  The following
    lists illustrate the difference\n   in the flow and the responsibility for different
    processing steps for\n   incoming messages when using USM and when using a secure
    transport.\n   (These lists are simplified for illustrative purposes, and do not\n
    \  represent all details of processing.  Transport Models MUST provide\n   the
    detailed elements of procedure.)\n   With USM, SNMPv1, and SNMPv2c Security Models,
    security processing\n   starts when the Message Processing Model decodes portions
    of the\n   ASN.1 message to extract header fields that are used to determine\n
    \  which Security Model will process the message to perform\n   authentication,
    decryption, timeliness checking, integrity checking,\n   and translation of parameters
    to model-independent parameters.  By\n   comparison, a secure transport performs
    those security functions on\n   the message, before the ASN.1 is decoded.\n   Step
    6 cannot occur until after decryption occurs.  Steps 6 and\n   beyond are the
    same for USM and a secure transport.\n"
  - contents:
    - "B.1.  USM and the RFC 3411 Architecture\n   1) Decode the ASN.1 header (Message
      Processing Model).\n   2) Determine the SNMP Security Model and parameters (Message\n
      \     Processing Model).\n   3) Verify securityLevel (Security Model).\n   4)
      Translate parameters to model-independent parameters (Security\n      Model).\n
      \  5) Authenticate the principal, check message integrity and\n      timeliness,
      and decrypt the message (Security Model).\n   6) Determine the pduType in the
      decrypted portions (Message\n      Processing Model).\n   7) Pass on the decrypted
      portions with model-independent parameters.\n"
    title: B.1.  USM and the RFC 3411 Architecture
  - contents:
    - "B.2.  Transport Subsystem and the RFC 3411 Architecture\n   1) Authenticate
      the principal, check integrity and timeliness of the\n      message, and decrypt
      the message (Transport Model).\n   2) Translate parameters to model-independent
      parameters (Transport\n      Model).\n   3) Decode the ASN.1 header (Message
      Processing Model).\n   4) Determine the SNMP Security Model and parameters (Message\n
      \     Processing Model).\n   5) Verify securityLevel (Security Model).\n   6)
      Determine the pduType in the decrypted portions (Message\n      Processing Model).\n
      \  7) Pass on the decrypted portions with model-independent security\n      parameters.\n
      \  If a message is secured using a secure transport layer, then the\n   Transport
      Model will provide the translation from the authenticated\n   identity (e.g.,
      an SSH user name) to a human-friendly identifier\n   (tmSecurityName) in step
      2.  The Security Model will provide a\n   mapping from that identifier to a
      model-independent securityName.\n"
    title: B.2.  Transport Subsystem and the RFC 3411 Architecture
  title: Appendix B.  Processing Differences between USM and Secure Transport
- contents:
  - "Authors' Addresses\n   David Harrington\n   Huawei Technologies (USA)\n   1700
    Alma Dr. Suite 100\n   Plano, TX 75075\n   USA\n   Phone: +1 603 436 8634\n   EMail:
    ietfdbh@comcast.net\n   Wes Hardaker\n   Cobham Analytic Solutions\n   P.O. Box
    382\n   Davis, CA  95617\n   US\n   Phone: +1 530 792 1913\n   EMail: ietf@hardakers.net\n"
  title: Authors' Addresses
