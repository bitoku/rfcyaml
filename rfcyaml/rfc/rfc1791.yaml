- title: __initial_text__
  contents:
  - '           TCP And UDP Over IPX Networks With Fixed Path MTU

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document defines an Experimental Protocol for the\
    \ Internet\n   community.  This does not specify an Internet standard of any kind.\n\
    \   Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n   Internet Engineering Steering Group comment from\
    \ the Area Director\n   for Transport Services: Please note well that this memo\
    \ is an\n   individual product of the author.  Implementation experience,\n  \
    \ particularly on the effectiveness of the protocols in dual-stack\n   environments,\
    \ is needed.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Most of network applications run on some sort of transports.\
    \  And, if\n   one is to let such applications to run over a foreign network\n\
    \   protocol, the simplest way would be to allow the applications'\n   transports\
    \ to run over that network protocol. For TCP/IP\n   applications, that transport\
    \ is TCP or UDP.  Hence, to let TCP/IP\n   applications run over IPX, we would\
    \ need to  have TCP and UDP run\n   over IPX.  And, once TCP and UDP are allowed\
    \ to run over IPX, all TCP\n   and UDP based applications, such as HTTP for WWW,\
    \ or NFS, can easily\n   be made to work over IPX networks.\n   DLsw is another\
    \ example of such applications.  As it is a TCP\n   application (and TCP requires\
    \ IP), the administrator is forced to run\n   IP on his network in order to support\
    \ DLsw.  If the site was an IPX\n   shop, it means that he now must manage IP\
    \ protocol/addresses in\n   addition to IPX.  If TCP could be made to run on IPX,\
    \ then he would\n   not have to add IP to his repertoire of network protocols\
    \ to manage.\n   TCP/IPX allows TCP/IP applications to run over IPX networks by\n\
    \   letting TCP and UDP run over IPX.  And this memo specifies the packet\n  \
    \ format and operational procedures for running TCP and UDP over IPX.\n"
- title: 2.  Running UDP Over IPX
  contents:
  - "2.  Running UDP Over IPX\n   Since UDP datagrams can be up to 64K octets long,\
    \ and the size of IPX\n   packet is limited to that of the path MTU, large UDP\
    \ datagrams must\n   be fragmented.  And, since IPX does not support fragmentation,\
    \ large\n   UDP datagrams must be fragmented before they are passed to IPX.  For\n\
    \   that purpose, a new protocol called IPXF (IPX Fragmentation layer),\n   is\
    \ invented.  UDP must run on IPXF rather than directly on IPX.  IPXF\n   layer\
    \ is described in section 4.\n   To IPXF service users, IPXF behaves just like\
    \ IPX except that IPXF\n   accepts datagram larger than the IPX path MTU.  As\
    \ such, we describe\n   UDP in this section as if it is running on IPX.\n   UDP\
    \ must send and receive the packets on IPX/IPXF socket 0x9092.\n   Though it may\
    \ be possible to send a packet from sockets other than\n   0x9092, such sockets\
    \ cannot receive UDP datagram destined to a well\n   known socket 0x9092.  Hence,\
    \ the bidirectional communcation may not\n   be established if a socket other\
    \ than 0x9092 is used to send UDP\n   datagram.  For that reason.  UDP/IPX does\
    \ not allow source sockets\n   other than 0x9092.  If a datagram with source socket\
    \ number other\n   than 0x9092 is received, UDP/IPX should discard the packet\
    \ silently.\n   (And increment udpInDatagramErr MIB counter if it is instrumented.)\n\
    \   UDP over IPX uses the IPX packet type 4, a normal IPX packet type.\n   The\
    \ IPX packet type has no meaning to TCP/IPX protocol.  It simply is\n   a number\
    \ required by IPX for general IPX packets.\n   See Appendix B.1 and B.2 for UDP\
    \ over IPX packet format.\n   The UDP/IPX checksum uses a pseudo header similar\
    \ to UDP/IP pseudo\n   header.  The only difference is that IP addresses and protocol\
    \ ID are\n   replaced by IPX addresses and socket numbers.\n   See Appendix B.3\
    \ for the UDP/IPX pseudo header format.\n"
- title: 3.  Running TCP Over IPX
  contents:
  - "3.  Running TCP Over IPX\n   Unlike UDP, TCP runs directly over IPX. Since IPX\
    \ does not support\n   fragmentation, no TCP segment sent over IPX can be larger\
    \ than the\n   path MTU for the connection.  The discovery of the path MTU is\n\
    \   outside of scope of this paper.  If the  implementation does not have\n  \
    \ a way to dynamically determine the path MTU for each connection, it\n   should\
    \ at least allow a way to statically configure a reasonable\n   value for all\
    \ connections.  For example, if the internetwork made of\n   ethernets only, the\
    \ user may configure the segment size to be 1470\n   including the TCP header.\
    \  If the configuration of the segment size\n   is not possible, the implementation\
    \ should assume that the IPX path\n   MTU is 576 octects, and not send any TCP\
    \ segment larger than 546\n   octets including TCP header.  That will result in\
    \ IPX packet of 576\n   octets which is the minimum path MTU for IPX.  The implementation\
    \ is\n   then advised to comunicate the configured/default segment size to the\n\
    \   peer TCP by exchanging MSS option.\n   Note that this memo does not preclude\
    \ the possibility of running TCP\n   over IPXF instead of IPX.  Running on IPXF\
    \ can be done in the same\n   manner as running UDP over IPXF.  However, in general,\
    \ TCP should\n   refrain from sending large segments that may result in fragmentation.\n\
    \   Hence, running TCP over IPXF is not recommended.\n   The IPX socket number\
    \ 0x9091 is reserved for the TCP. All TCP packets\n   must be sent from and received\
    \ on the socket 0x9091.  If the received\n   TCP/IPX packet has the source IPX\
    \ socket number other than 0x9091,\n   the packet should be discarded silently.\
    \ (And increment tcpInErrs MIB\n   counter if it is instrumented.)\n   TCP, like\
    \ UDP, uses IPX packet type 4.  The IPX packet type has no\n   meaning to TCP/IPX\
    \ protocol.  It is packet type required by IPX for\n   general IPX packets.\n\
    \   See appendix A.1 for TCP/IPX packet format.\n   The TCP pseudo header, used\
    \ in checksuming for TCP over IPX, is\n   similar to TCP pseudo header for TCP\
    \ over IP.  Again, the difference\n   is that IPX addresses and IPX socket number\
    \ are substituted in place\n   of IP addresses and IP protocol number.\n   See\
    \ Appendix A.2 for the TCP/IPX pseudo header format.\n"
- title: 4.  IPXF Layer
  contents:
  - "4.  IPXF Layer\n   A large UDP datagram cannot be sent directly over IPX as IPX\
    \ does not\n   support datagrams larger than the path MTU.  Hence, large UDP\n\
    \   datagrams must be fragmented before it can be sent over IPX.  To have\n  \
    \ large UDP datagrams fragmented, UDP runs over IPXF layer instead of\n   running\
    \ directly IPX.\n   IPXF users treats IPXF as if it is IPX layer.  That is, they\
    \ pass\n   datagrams to IPXF specifying the destination IPX address/socket along\n\
    \   with the packet. They also must set the source socket number of the\n   datagram\
    \ to its actual IPX socket number, as it would when sending\n   packets to IPX\
    \ layer.  (For UDP, both source and destination sockets\n   are 0x9092.)\n   Datagrams\
    \ passed to IPXF can be upto 64K octets long.\n   IPXF fragments a datagram as\
    \ necessary, prepends each fragment with\n   the IPXF header and send them to\
    \ the IPX socket 0x9093 in the\n   destination IPX address.  The actual destination\
    \ socket number\n   (0x9092 for UDP) in the orignal IPX datagram is preserved\
    \ in IPXF\n   header. Refer to Appendix B.2 for UDP/IPXF/IPX packet format.\n\
    \   The largest possible IPX datagram that can be sent over the IPX path\n   is\
    \ limited by the path MTU size.  The mechanism to discover the path\n   MTU is\
    \ outside of the scope of the paper.  If an IPXF implementation\n   does not have\
    \ a mean to determine the path MTU, it should assume that\n   the largest IPX\
    \ packet size is 576. In that case, any UDP datagram\n   larger than 546 octects\
    \ will have to be fragmented.\n   If the datagram does not require fragmentation,\
    \ IPXF acts as a null\n   layer.  That is, the whole packet is directly sent to\
    \ the actual IPX\n   destination socket without the IPXF fragmentation header.\
    \  Refer to\n   Appendix B.1 for UDP/IPX packet format without the IPXF header.\n\
    \   An IPXF user receives datagrams by opening a socket with IPXF just as\n  \
    \ it would with IPX.  For example, UDP opens the socket 0x9092 with\n   IPXF to\
    \ receive UDP datagrams.  IPXF, in turn, opens IPX socket of\n   the same number\
    \ with IPX, so that unfragmented packets directed to\n   that socket will be delivered\
    \ by IPX directly to the IPXF user.\n   IPXF fragments are received by IPXF on\
    \ the IPX socket 0x9093.  The\n   receiving IPXF then reassembles the fragments\
    \ into a complete IPX\n   datagram, restores the actual detination IPX socket\
    \ number from the\n   IPXF header and delivers the reassembled IPX datagram to\
    \ its actual\n   recipient designated by the restored socket number.\n   Upon\
    \ receiving a fragment, IPXF must ignore the source socket number\n   in the IPX\
    \ header of the fragment.  The source IPX socket field in\n   IPX header contains\
    \ the actual source of the IPX datagram.  As such,\n   the source IPX socket number\
    \ in IPX header usually is not 0x9093, and\n   it is meaningful only to the actual\
    \ recepient of the assembled\n   datagram.\n   The fragmentation/reassembly algorithm\
    \ used by IPXF is identical to\n   that of IP, except for the following exceptions:\
    \ 1) the offset of\n   fragments are measured in units of octets rather than in\
    \ units of 8\n   octets.  2) if the receiving IPXF does not have sufficient resource\n\
    \   for the reassembly, it should discard fragments immediately.  The\n   receiving\
    \ IPXF can determine if it has sufficient resources by\n   looking at the length\
    \ of the original datagram included in every\n   fragment.\n   Note that, though\
    \ it is required only for UDP in this memo, IPXF can\n   also be used by any protocol\
    \ that requires IPX fragmentation support.\n"
- title: 5.  TCP/IPX Checksuming
  contents:
  - "5.  TCP/IPX Checksuming\n   TCP/IPX is checksummed in exactly same manner as\
    \ TCP/IP. It uses 16\n   bit 1's complement of 1's compliment sum of all 16 bit\
    \ words in the\n   pseudo header and text.  See Appendix A.2 and B.3 for the pseudo\n\
    \   header format for TCP and UDP.\n"
- title: 6.  Multiplexing
  contents:
  - "6.  Multiplexing\n   TCP and UDP data over IPX are delivered to the application\
    \ in the\n   same manner as in TCP/IP.  That is, they are delivered to the most\n\
    \   specific matching endpoint, with the match made on local port, remote\n  \
    \ port, local IPX address and remote IPX address.\n   When TCP or UDP is running\
    \ over both IPX and IP, the connection\n   endpoint also identifies the network\
    \ layer on which the endpoint is.\n   Hence, the triplet of network address, network\
    \ address family, and\n   the port number forms the socket.  And, the endpoint\
    \ match must be\n   made on the the network address familty as well.\n   For exmple,\
    \ an endpoint bound to IPX network layer would be\n   identified by AF_IPX, IPX\
    \ address and TCP port number.  On the other\n   hand, endpoints bound to IP network\
    \ layer would be identified by\n   AF_IP, IP address, and TCP port.  Finally,\
    \ endpoints not bound to any\n   network layer would be identified by AF_UNSPEC\
    \ and TCP port.\n   First, an attempt is made to deliver the data to the most\
    \ specific\n   endpoint that is bound to the network layer that the packet arrived\n\
    \   from.  If there is no such endpoint,  then the packet is delivered to\n  \
    \ the best matching endpoint that is not bound to any network layer at\n   all.\
    \  For example, if the packet arrived over IPX network, then the\n   packet is\
    \ delivered to the most specific matching endpoint that is\n   bound to IPX. If\
    \ there is no matching endpoint over IPX, then it is\n   delivered to an endpoint\
    \ that did not specify any network layer.\n   The use of endpoints not bound to\
    \ any network layer is similar to\n   TCP/IP endpoints with no IP address bound\
    \ to it.  Such endpoints are\n   usually used for listening for connection requests\
    \ from any of the\n   interfaces within the host.  Similarly, endpoints with no\
    \ network\n   layer bound to it are used to field the connection requests from\
    \ any\n   of the network layers.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   The author wishes to thank following folks, in alphabetical\
    \ order,\n   and others for their helpful comments and contributions to the work:\n\
    \   Lester Bird, Doug Kogan, Greg Minshall and Don Provan.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tae Sung\n   Novell, Inc.\n   2180 Fortune Drive\n   San\
    \ Jose, California, 95131\n   Phone: (408)577-8439\n   EMail: tae@novell.Com\n"
- title: Appendix A.1 -  TCP/IPX Packet Format
  contents:
  - "Appendix A.1 -  TCP/IPX Packet Format\n   A TCP/IPX Packet has following format:\n\
    \          +-------+-------+-------+-------+\n          | IPX Checksum  | IPX\
    \ Pkt Len   |\n          +-------+-------+-------+-------+\n          | Zero \
    \ |IPX PT | IPX Dest -\n          +-------+-------+-------+-------+\n        \
    \    Network | IPX Dest -\n          +-------+-------+-------+-------+\n     \
    \       Node                          |\n          +-------+-------+-------+-------+\n\
    \          | IPX Dest Skt  | IPX Src -\n          +-------+-------+-------+-------+\n\
    \            Network       | IPX Src -\n          +-------+-------+-------+-------+\n\
    \            Node                          |\n          +-------+-------+-------+-------+\n\
    \          | IPX Src Skt   | TCP Header and\n          +---------------+-------+-------+\n\
    \            Data...\n          +----...\n   IPX PT field contains the IPX packet\
    \ type.  It is set to 4 for\n   TCP/IPX packet.\n   Both Src Skt and Dest Skt\
    \ field in IPX header must be set to 0x9091\n   for TCP/IPX packet.  If the Src\
    \ Skt is not set to 0x9091, the\n   receiving TCP/IPX should discard the packet\
    \ silently.  (And increment\n   tcpInErrs mib object if it is instrumented.)\n"
- title: Appendix A.2 -  TCP/IPX Pseudo Header Format
  contents:
  - "Appendix A.2 -  TCP/IPX Pseudo Header Format\n   TCP/IPX uses following pseudo\
    \ header to compute checksum:\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Network               |\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Node\n             +-------+-------+-------+-------+\n\
    \                             | IPX Src Skt   |\n             +-------+-------+-------+-------+\n\
    \             | IPX Dest Network              |\n             +-------+-------+-------+-------+\n\
    \             | IPX Dest Node\n             +-------+-------+-------+-------+\n\
    \                             | IPX Dest Skt  |\n             +-------+-------+-------+-------+\n\
    \             | Zero          | TCP Length    |\n             +---------------+---------------+\n\
    \   IPX Src/Dest Network/Node/Skt are the fields from the IPX header.\n   TCP\
    \ Length is the IPX Pkt Len minus the IPX header length in octets.\n   Note that\
    \ IPX Src Skt is expected to be 0x9091 for TCP.  As such, one\n   may insert 0x9091\
    \ in IPX Src Skt field rather than getting the value\n   from IPX header.  Then\
    \ the implementation will not have to check the\n   IPX Src Skt field in the fast\
    \ path since the checksum failure will\n   also cover the unexpected value.  In\
    \ that case, the implementation\n   may want to examine if the checksum failure\
    \ was due to the IPX Src\n   Skt value other than 0x9091, so that it can increment\
    \ appropriate\n   counter, if proprietary counters other than tcpInErrs are used.\n"
- title: Appendix B.1 -  UDP/IPX Packet Format without Fragmentation
  contents:
  - "Appendix B.1 -  UDP/IPX Packet Format without Fragmentation\n   IPXF transmits\
    \ UDP packets over IPX in this format if the UDP\n   datagram does not have to\
    \ be fragmented:\n             +-------+-------+-------+-------+\n           \
    \  | IPX Checksum  | IPX Pkt Len   |\n             +-------+-------+-------+-------+\n\
    \             | Zero  |IPX PT | IPX Dest -\n             +-------+-------+-------+-------+\n\
    \               Network       | IPX Dest -\n             +-------+-------+-------+-------+\n\
    \               Node                          |\n             +-------+-------+-------+-------+\n\
    \             | IPX Dest Skt  | IPX Src -\n             +-------+-------+-------+-------+\n\
    \               Network       | IPX Src -\n             +-------+-------+-------+-------+\n\
    \               Node                          |\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Skt   | UDP Header and\n             +---------------+-------+-------+\n\
    \               Data...\n             +----...\n   The IPX PT field contains IPX\
    \ packet type.  It should be set to 4 for\n   all UDP/IPX packets.\n   Both IPX\
    \ Src Skt and IPX Dest Skt field must be set 0x9092.  The\n   receiving UDP/IPX\
    \ should discard the packet silently if the IPX Src\n   Skt field is not set to\
    \ 0x9092.  (And increment udpInErrors mib\n   object if it is instrumented.)\n"
- title: Appendix B.2 -  UDP/IPX Packet Format With Fragmentation
  contents:
  - "Appendix B.2 -  UDP/IPX Packet Format With Fragmentation\n   IPXF transmits fragmented\
    \ datagrams over IPX in the following format:\n             +-------+-------+-------+-------+\n\
    \             | IPX Checksum  | IPX Pkt Len   |\n             +-------+-------+-------+-------+\n\
    \             | Zero  |IPX PT | IPX Dest -\n             +-------+-------+-------+-------+\n\
    \               Network       | IPX Dest -\n             +-------+-------+-------+-------+\n\
    \               Node                          |\n             +-------+-------+-------+-------+\n\
    \               IPX Dest Skt   | IPX Src -\n             +-------+-------+-------+-------+\n\
    \               Network       | IPX Src -\n             +-------+-------+-------+-------+\n\
    \               Node                          |\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Skt   | IPXF Offset   |\n             +---------------+-------+-------+\n\
    \             | IPXF Frag Identification      |\n             +-------------------------------+\n\
    \             | IPXF Dest Skt | IPXF DG Len   |\n             +-------------------------------+\n\
    \             | UDP Header and Data ...\n             +--------...\n   The IPX\
    \ PT field contains IPX packet type.  It is set to the value\n   set by the IPXF\
    \ user in the IPX packet passed to IPXF. (UDP sets it\n   to 4.)\n   IPX Dest\
    \ Skt field must be set to 0x9093 for all IPXF Packets.\n   The value for IPX\
    \ Src Skt field is variable, and must be set to the\n   actual IPX socket number\
    \ of the IPXF user.  (For example, it must be\n   set to 0x9092 for UDP.)\n  \
    \ IPXF Offset field indicates where the fragment belongs in the\n   datagram.\
    \  The offset is measured is octet from the begining of the\n   UDP datagram.\
    \  The first fragment has the offset of 0.\n   IPXF Frag Identification field\
    \ is assigned a same value by the sender\n   for all fragements belonging to the\
    \ same datagram.  The receiver then\n   uses this field to reassemble all fragments\
    \ with same ID into a\n   datagram.\n   IPXF Dest Skt field contains the IPX socket\
    \ number of the actual\n   recipient that the reassembled datagram will be delivered\
    \ to.  (It is\n   0x9092 for UDP.)  All fragments of a datagram must have the\
    \ same\n   value in this field.\n   IPXF DG Len field is the total length of the\
    \ IPX datagram before the\n   fragmentation.  The sender should set it to the\
    \ value of IPX Pkt Len\n   of the original IPX datagram.  All fragments of a IPX\
    \ datagram must\n   have the same value in this field.\n"
- title: Appendix B.3 -  UDP/IPX Pseudo Header Format
  contents:
  - "Appendix B.3 -  UDP/IPX Pseudo Header Format\n   UDP/IPX uses following pseudo\
    \ header for computing the checksum:\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Network               |\n             +-------+-------+-------+-------+\n\
    \             | IPX Src Node\n             +-------+-------+-------+-------+\n\
    \                             | IPX Src Skt   |\n             +-------+-------+-------+-------+\n\
    \             | IPX Dest Network              |\n             +-------+-------+-------+-------+\n\
    \             | IPX Dest Node\n             +-------+-------+-------+-------+\n\
    \                             | IPX Dest Skt  |\n             +-------+-------+-------+-------+\n\
    \             | Zero          | UDP Length    |\n             +---------------+---------------+\n\
    \   IPX Src/Dest Network/Node/Skt fields are from the IPX packet.  Note\n   that,\
    \ if UDP is running over IPXF, the IPX Dest Skt field in IPX\n   packet header\
    \ is copied over from IPXF header before the reassembled\n   IPX packet is delivered\
    \ to UDP,  Hence, the pseudo header must be\n   derived from the reassembled IPX\
    \ header.\n   UDP Length is from UDP header.\n   Note that IPX Src Skt is expected\
    \ to be 0x9092 for UDP.  As such, one\n   may insert 0x9092 in IPX Src Skt field\
    \ rather than getting the value\n   from IPX header.  Then the implementation\
    \ will not have to check the\n   IPX Src Skt field in the fast path since the\
    \ checksum failure will\n   also cover the unexpected value.  In that case, the\
    \ implementation\n   may want to examine if the checksum failure was due to the\
    \ IPX Src\n   Skt value other than 0x9092, so that it can increment appropriate\n\
    \   counter, if proprietary counters other than udpInDatagramErr are\n   Datagr\n"
