- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        W. Simpson
  contents:
  - "Independent Submission                                        W. Simpson\n  \
    \                  TCP Cookie Transactions (TCPCT)\n"
- title: Abstract
  contents:
  - "Abstract\n   TCP Cookie Transactions (TCPCT) deter spoofing of connections and\n\
    \   prevent resource exhaustion, eliminating Responder (server) state\n   during\
    \ the initial handshake.  The Initiator (client) has sole\n   responsibility for\
    \ ensuring required delays between connections.  The\n   cookie exchange may carry\
    \ data, limited to inhibit amplification and\n   reflection denial of service\
    \ attacks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This is a contribution to the RFC Series, independently\n   of any other RFC\
    \ stream.  The RFC Editor has chosen to publish this\n   document at its discretion\
    \ and makes no statement about its value for\n   implementation or deployment.\
    \  Documents approved for publication by\n   the RFC Editor are not a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6013.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n   This document\
    \ may not be modified, and derivative works of it may not\n   be created, except\
    \ to format it for publication as an RFC or to\n   translate it into languages\
    \ other than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. Protocol Overview ...............................................4\n    \
    \  2.1. Message Summary (Simplified) ...............................6\n      2.2.\
    \ Compatibility and Transparency .............................7\n      2.3. Fully\
    \ Loaded Cookies .......................................7\n      2.4. TCP Header\
    \ Extension .......................................8\n      2.5. <SYN> Option\
    \ Handling ......................................9\n   3. Protocol Details ................................................9\n\
    \      3.1. TCP Cookie Option .........................................10\n  \
    \    3.2. TCP Cookie-Pair Standard Option ...........................10\n    \
    \  3.3. TCP Cookie-less Option ....................................11\n      3.4.\
    \ TCP Timestamps Extended Option ............................11\n      3.5. Cookie\
    \ Generation .........................................13\n   4. Cookie Exchange\
    \ ................................................16\n      4.1. Initiator <SYN>\
    \ ...........................................16\n      4.2. Responder <SYN,ACK(SYN)>\
    \ ..................................17\n      4.3. Initiator <ACK(SYN)> ......................................17\n\
    \      4.4. Responder <ACK> ...........................................18\n  \
    \    4.5. Simultaneous Open .........................................18\n   5.\
    \ Accelerated Close ..............................................19\n      5.1.\
    \ Initiator Close ...........................................20\n      5.2. Responder\
    \ Close ...........................................20\n   6. Accelerated Open\
    \ ...............................................21\n      6.1. Initiator <SYN>\
    \ Data ......................................21\n      6.2. Responder <SYN,ACK(SYN)>\
    \ Data .............................22\n      6.3. Initiator <ACK(SYN)> Data .................................23\n\
    \      6.4. Responder <ACK> Data ......................................24\n  \
    \ 7. Advisory Reset .................................................24\n   8.\
    \ Interactions with Other Options ................................24\n      8.1.\
    \ TCP Selective Acknowledgment ..............................25\n      8.2. TCP\
    \ Timestamps ............................................25\n      8.3. TCP Extensions\
    \ for Transactions ...........................25\n      8.4. TCP MD5 Signature\
    \ .........................................25\n      8.5. TCP Authentication ........................................25\n\
    \   9. History ........................................................26\n  \
    \ 10. Acknowledgments ...............................................27\n   11.\
    \ IESG Considerations ...........................................27\n   12. Operational\
    \ Considerations ....................................28\n   13. Security Considerations\
    \ .......................................28\n   Appendix A. Example Headers .......................................30\n\
    \      A.1. Example <SYN> Options .....................................30\n  \
    \    A.2. Example <ACK(SYN)> with Sack ..............................31\n    \
    \  A.3. Example <ACK(SYN)> with 64-bit Timestamps .................32\n   Normative\
    \ References ..............................................33\n   Informative\
    \ References ............................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TCP Cookie Transactions (TCPCT) provide a cryptologically\
    \ secure\n   mechanism to guard against simple flooding attacks sent with bogus\
    \ IP\n   [RFC791] Sources or TCP [RFC793] Ports.  The initial TCP <SYN>\n   exchange\
    \ is vulnerable to forged IP Addresses, predictable Ports, and\n   discoverable\
    \ Sequence Numbers [Morris1985] [Gont2009].  (See also\n   [RFC2827], [RFC3704],\
    \ and [RFC4953].)\n   During connection establishment, the cookie (nonce) exchange\n\
    \   negotiates elimination of Responder (server) state.  These cookies\n   are\
    \ later used to inhibit premature closing of connections, and\n   reduce retention\
    \ of state after the connection has terminated.\n   The cookie pair is much too\
    \ large to fit with the other recommended\n   options in the maximal 60 byte TCP\
    \ header (40 bytes of option space).\n   A successful option exchange signals\
    \ availability of the TCP header\n   extension, adding space for additional options.\n\
    \   Also, implementations may optionally exchange limited amounts of\n   transaction\
    \ data during the initial cookie exchange, reducing network\n   latency and host\
    \ task context switching.\n   Finally, implementations may optionally rapidly\
    \ recycle prior\n   connections.  For otherwise stateless applications, this\n\
    \   transparently facilitates persistent connections and pipelining of\n   requests\
    \ over each connection.\n   Many of these ideas have been previously proposed\
    \ in one form or\n   another (see History and Acknowledgments sections).  This\n\
    \   specification integrates these improvements into a coherent whole.\n   Further\
    \ motivation and rationale were detailed in [MSV2009].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MAY\", \"MUST, \"MUST NOT\", \"OPTIONAL\"\
    , \"RECOMMENDED\",\n   \"REQUIRED\", \"SHOULD\", and \"SHOULD NOT\" in this document\
    \ are to be\n   interpreted as described in [RFC2119].\n   byte     An 8-bit quantity;\
    \ also known as \"octet\" in standardese.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   The TCPCT extensions consist of several simple phases:\n\
    \   1. Each party passes a \"cookie\" to the other.  Due to limited space,\n \
    \     only the most basic options are included.\n      The Cookie option also\
    \ indicates that optional <SYN> data is\n      acceptable.  This data MAY be ignored\
    \ by either party.\n      A Responder that understands the Cookie option remains\
    \ stateless.\n   2. During the remainder of the standard TCP three-way handshake,\
    \ the\n      Timestamps and Cookie-Pair options guard the exchange.\n      Other\
    \ options present in the original <SYN> that were successfully\n      returned\
    \ in the <SYN,ACK(SYN)> MUST be included with the\n      <ACK(SYN)>.  Additional\
    \ options MAY also be included as desired.\n      As there is no Responder state,\
    \ it has no record of acknowledging\n      previous data.  Any optional <SYN>\
    \ data MUST be retransmitted.\n      Upon verification of the Timestamps and Cookie-Pair,\
    \ the Responder\n      creates its Transport Control Block (TCB) [RFC793].\n \
    \     Note that the Responder returns the Cookie-Pair with its initial\n     \
    \ data, but subsequent data segments need only the Timestamps.\n   3. During close\
    \ (or reset) of the TCP connection, the Timestamps and\n      Cookie-Pair options\
    \ guard the exchange.\n      Upon verification of the Timestamps and Cookie-Pair,\
    \ the Responder\n      removes its TCB.\n   The sequence of messages is summarized\
    \ in the diagram below.\n"
- title: 2.1.  Message Summary (Simplified)
  contents:
  - "2.1.  Message Summary (Simplified)\n   Initiator                            Responder\n\
    \   =========                            =========\n   <SYN>                 \
    \         ->\n   base options\n   Timestamps\n   Cookie\n   [request data]\n \
    \                                  <-   <SYN,ACK(SYN)>\n                     \
    \                   base options\n                                        Timestamps\n\
    \                                        Cookie\n                            \
    \            [response data]\n                                        (stateless)\n\
    \   <ACK(SYN)>                     ->\n   full options\n   Timestamps\n   Cookie-Pair\n\
    \   [Sack(response)]\n   data\n                                   <-   <ACK>\n\
    \                                        full options\n                      \
    \                  Timestamps\n                                        Cookie-Pair\n\
    \                                        data\n                              \
    \          (TCB state created)\n                                   <-   <ACK>\n\
    \                                        Timestamps\n                        \
    \                data\n                                   <-   <FIN,ACK>\n   \
    \                                     Timestamps\n                           \
    \             Cookie-Pair\n   <FIN,ACK(FIN)>                 ->\n   Timestamps\n\
    \   Cookie-Pair\n                                   <-   <ACK(FIN)>\n        \
    \                                Timestamps\n                                \
    \        Cookie-Pair\n                                        (TCB state removed)\n\
    \   TIME-WAIT\n"
- title: 2.2.  Compatibility and Transparency
  contents:
  - "2.2.  Compatibility and Transparency\n      It is usually better that data arrive\
    \ slowly, than not at all.\n   Many/most unmanaged middleboxes [RFC3234] (such\
    \ as stateless\n   firewalls, load balancers, intrusion detection systems, or\
    \ network\n   address translators [RFC3022]) cannot carry transport traffic other\n\
    \   than TCP and UDP.\n   Every TCP implementation MUST ignore without error any\
    \ TCP option it\n   does not implement ([RFC1122] section 4.2.2.5).  In a study\
    \ of the\n   effects of middleboxes on transport protocols [MAF2004], the vast\n\
    \   majority of modern TCP stacks correctly handle unknown TCP options.\n   But\
    \ it is still prudent to follow the [RFC793] \"general principle of\n   robustness:\
    \ be conservative in what you do, be liberal in what you\n   accept from others.\"\
    \n   Therefore, for each of the extensions defined here, an extension\n   option\
    \ will be sent in a <SYN,ACK(SYN)> segment only after the\n   corresponding option\
    \ was received in the original <SYN> segment.\n   Furthermore, TCP options will\
    \ be sent on later segments only after an\n   exchange of options has indicated\
    \ that both parties understand the\n   extension (see [RFC1323] [rfc1323bis] and\
    \ its antecedents).\n   Unfortunately, not all middleware adheres to these long-standing\n\
    \   requirements.  Instead, unknown <SYN> options are copied to the\n   <SYN,ACK(SYN)>.\
    \  This is indistinguishable from a Monkey in the\n   Middle (MITM) reflection\
    \ attack.\n"
- title: 2.3.  Fully Loaded Cookies
  contents:
  - "2.3.  Fully Loaded Cookies\n             One Kind to aid them all, One Kind to\
    \ find them,\n          One Kind to hold them all and in the header bind them.\n\
    \   The cookie exchange provides a singular opportunity to extend TCP\n   with\
    \ backward compatibility.  Semantics for the option have been\n   \"overloaded\"\
    \ with a baker's dozen of capabilities and facilities.\n   A. First and foremost,\
    \ the cookie exchange improves operational\n      security for vulnerable servers\
    \ against flooding attacks.  The\n      cookie exchange indicates that the Responder\
    \ (server) will discard\n      its initial state.  All other semantics are subordinate.\n\
    \   B. Together with Sequence and Timestamp values, Cookie values protect\n  \
    \    against insertion and reflection attacks.\n   C. Cookie values allow applications\
    \ to detect replay attacks.\n   D. Cookie values MAY be used as an index or nonce\
    \ for application\n      security protocols.  This facility is beyond the scope\
    \ of this\n      specification.\n   E. The <SYN> and <SYN,ACK(SYN)> MAY carry\
    \ application data.  This\n      feature is entirely optional, and data is not\
    \ guaranteed to pass\n      successfully through middleware.  Nor are the parties\
    \ guaranteed\n      to process this data without changes to the Application Program\n\
    \      Interface (API).  Such changes are beyond the scope of this\n      specification.\n\
    \   F. The size of the cookies precludes most other options in the\n      standard\
    \ TCP header space.  The cookie exchange negotiates TCP\n      header extension.\n\
    \   G. The cookie exchange and resulting TCP header extension permit\n      negotiation\
    \ of larger 64-bit (or 128-bit) Timestamps for paths\n      with large bandwidth-delay\
    \ products.\n   H. TCP header extension frees some space for additional options.\n\
    \   I. Previously SYN-only options can be updated.\n   J. The cookie exchange\
    \ indicates agreement to use accelerated close.\n   K. The cookie exchange indicates\
    \ agreement that only the Initiator\n      (client) handles TIME-WAIT state.\n\
    \   L. The Timestamps and Cookie-Pair combination inhibits third parties\n   \
    \   from disrupting communications with <FIN> and <RST>.\n   M. The Timestamps\
    \ and Cookie-Pair combination facilitates rapid reuse\n      of the TCP Source\
    \ Port with a common destination.\n"
- title: 2.4.  TCP Header Extension
  contents:
  - "2.4.  TCP Header Extension\n   Once the Cookie option has been successfully exchanged,\
    \ TCP header\n   extension is permitted.  The Timestamps extended option (defined\n\
    \   below) indicates the presence of the header extension.\n   Validation of known\
    \ timestamp values protects against data corruption\n   by misbehaving middleboxes.\n"
- title: 2.5.  <SYN> Option Handling
  contents:
  - "2.5.  <SYN> Option Handling\n   As the Responder retains no TCB state after the\
    \ initial TCP <SYN>\n   exchange, all options present in the original <SYN> MUST\
    \ be repeated.\n   For example, an option defined in the [RFC793] original specification\n\
    \   -- Maximum Segment Size (MSS) -- previously appeared only in a <SYN>\n   bearing\
    \ segment (including <SYN,ACK(SYN)>).  If present, MSS will be\n   repeated in\
    \ the Initiator <ACK(SYN)>, together with any additional\n   options.\n   Generally,\
    \ the Initiator MAY propose SYN-only options -- such as MSS\n   -- anytime both\
    \ Timestamps and Cookie-Pair options are present.\n   These options are treated\
    \ the same as with an original <SYN>.  The\n   Responder acknowledges using a\
    \ subsequent <ACK> segment containing\n   both Timestamps and Cookie-Pair options\
    \ (similar to <SYN,ACK(SYN)>\n   processing).\n   This facility allows previously\
    \ SYN-only options to be updated from\n   time to time.  They take effect upon\
    \ receipt.\n   However, <ACK> segments without data will not be delivered reliably.\n\
    \   Any otherwise SYN-only options sent without data MUST be\n   retransmitted\
    \ with successive segments until sent with data (or\n   <FIN>), and an <ACK> is\
    \ received.\n"
- title: 3.  Protocol Details
  contents:
  - "3.  Protocol Details\n   Another solution [RFC5452] describes use of an unpredictable\
    \ Source\n   Port.  That is RECOMMENDED by this specification.  See [RFC6056]\
    \ for\n   further information.\n   An earlier solution [RFC1948] describes an\
    \ unpredictable Initial\n   Sequence Number (ISN).  That is REQUIRED by this specification.\n\
    \   Support for the (32-bit) TCP Timestamps Option [RFC1323] is REQUIRED.\n  \
    \ A TSoffset SHOULD be generated per connection [GO2010].  The Don't\n   Fragment\
    \ (DF) bit MUST be set in the IP (v4) header.\n   The TCP User Timeout Option\
    \ [RFC5482] is RECOMMENDED.\n   Only one instance is permitted of any of the Cookie,\
    \ Cookie-less, or\n   Cookie-Pair option(s).  Segments with duplicative or mutually\n\
    \   exclusive options MUST be silently discarded.\n   For examples, see Appendix\
    \ A.\n"
- title: 3.1.  TCP Cookie Option
  contents:
  - "3.1.  TCP Cookie Option\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |      Kind     |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                          Cookie                             ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Kind             1 byte: constant 253 (experimental).\n   Length         \
    \  1 byte: range 10 to 18 (bytes); limited by remaining\n                    space\
    \ in the options field.  The number MUST be\n                    even; the cookie\
    \ is a multiple of 16 bits.\n   Cookie           8 to 16 bytes (Length - 2): an\
    \ unpredictable value.\n   Options with invalid Length values MUST be ignored.\
    \  The minimum\n   Cookie size is 64 bits.  If there is not sufficient space for\
    \ a\n   64-bit cookie, this option MUST NOT be used.\n   The Responder Cookie\
    \ MUST be the same size as the Initiator Cookie.\n   The cookie pair is a multiple\
    \ of 32 bits.\n   Although the diagram shows a cookie aligned on 32-bit boundaries,\n\
    \   that is not required.\n"
- title: 3.2.  TCP Cookie-Pair Standard Option
  contents:
  - "3.2.  TCP Cookie-Pair Standard Option\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   |      Kind     |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Kind             1 byte: constant 253 (experimental).\n   Length         \
    \  1 byte: range 18 to 34 (bytes).  The number MUST be\n                    even;\
    \ the cookie pair is a multiple of 32 bits.\n   Initiator-Cookie 8 to 16 bytes,\
    \ from the original <SYN>.\n   Responder-Cookie 8 to 16 bytes, from the <SYN,ACK(SYN)>.\n\
    \   The Cookie-Pair standard option only appears after the Timestamps\n   extended\
    \ option (below).\n   Options with invalid Length values MUST be ignored.  As\
    \ the minimum\n   Initiator-Cookie size is 64 bits, the minimum cookie pair is\
    \ 128 bits\n   (64 bits followed by 64 bits), while the maximum is 256 bits (128\n\
    \   bits followed by 128 bits).\n"
- title: 3.3.  TCP Cookie-less Option
  contents:
  - "3.3.  TCP Cookie-less Option\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    \
    \  Kind     |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Kind \
    \            1 byte: constant 253 (experimental).\n   Length           1 byte:\
    \ constant 2 (bytes).  This distinguishes the\n                    option from\
    \ other Cookie options.\n   Although no cookie is attached, this indicates that\
    \ other features of\n   this specification are available, including TCP header\
    \ extension,\n   Accelerated Close, Accelerated Open, and Advisory Reset.  This\
    \ is\n   intended for use with TCP authentication options, beyond the scope of\n\
    \   this specification.\n"
- title: 3.4.  TCP Timestamps Extended Option
  contents:
  - "3.4.  TCP Timestamps Extended Option\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Kind     |    Length     |    Extend     |    R    |  S  |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                                                               |\n   ~  \
    \                         TS Value                            ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       TS Echo Reply                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Kind             1 byte: constant 254 (experimental).\n   Length         \
    \  1 byte: constant 4 (bytes).\n   Extend           1 byte: range 9 to 255; the\
    \ data offset (in 32-bit\n                    words) following the standard TCP\
    \ header.  Note this\n                    value MUST include the timestamp pair\
    \ indicated by\n                    (S)ize.\n   (R)eserved       5 bits: default\
    \ zero.  Reserved for future use.\n   (S)ize           3 bits:\n             \
    \       1. 32-bit timestamps.\n                    2. 64-bit timestamps.\n   \
    \                 4. 128-bit timestamps.\n                    Other values are\
    \ beyond the scope of this\n                    specification.\n   TS Value  \
    \       4, 8, or 16 bytes.  The current value of the\n                    timestamp\
    \ for the sender.\n   TS Echo Reply    4, 8, or 16 bytes.  A copy of the most\
    \ recently\n                    received TS Value.\n   The full timestamp pair\
    \ follows the TCP header (indicated by +=+\n   delimiters) and maintains 32-bit\
    \ alignment.\n   This TCP header extension is ignored for sequence number\n  \
    \ computations.  The Sequence Number of the first byte of segment data\n   will\
    \ be the Initial Sequence Number (ISN) plus one (1) for the <SYN>.\n   Every TCPCT\
    \ implementation MUST recognize a Timestamps extended\n   option.  The larger\
    \ 64-bit (or 128-bit) timestamps only appear in an\n   extended option.\n   Segments\
    \ with invalid Extend values MUST be silently discarded.\n   Only one instance\
    \ is permitted of either the (32-bit) Timestamps\n   standard option or this Timestamps\
    \ extended option.  Segments with\n   duplicative or mutually exclusive options\
    \ MUST be silently discarded.\n   Implementation Notes:\n      Serendipitous alignment\
    \ allows simple loads and stores, instead of\n      slower byte by byte iterations.\n\
    \      When the TCP header is aligned on a 32-bit boundary and this is\n     \
    \ the only option, the timestamps in the extended header SHOULD be\n      aligned\
    \ on a 64-bit boundary.  For both 32-bit and 64-bit\n      timestamps, any data\
    \ following the extended header will be aligned\n      on a 64-bit boundary.\n\
    \      However, the 128-bit timestamps are not 128-bit aligned.\n"
- title: 3.5.  Cookie Generation
  contents:
  - "3.5.  Cookie Generation\n   The technique by which a party generates a cookie\
    \ is implementation\n   dependent.  The method chosen must satisfy some basic\
    \ requirements:\n   1. The cookie MUST depend on the specific parties.  This prevents\
    \ an\n      attacker from obtaining a cookie using a real IP address and TCP\n\
    \      port, and then using it to swamp the victim with requests from\n      randomly\
    \ chosen IP addresses or ports.\n   2. It MUST NOT be possible for anyone other\
    \ than the issuing entity\n      to generate cookies that will be accepted by\
    \ that entity.  This\n      implies that the issuing entity will use local secret\
    \ information\n      in the generation and subsequent verification of a cookie.\
    \  It\n      must not be possible to deduce this secret information from any\n\
    \      particular cookie.\n   3. The cookie generation and verification methods\
    \ MUST be fast to\n      thwart attacks intended to sabotage CPU resources.\n\
    \   A recommended technique is to use a cryptographic hashing function.\n   An\
    \ incoming cookie can be verified at any time by regenerating it\n   locally from\
    \ values contained in the incoming datagram and the local\n   secret random value.\n"
- title: 3.5.1.  Initiator Cookie
  contents:
  - "3.5.1.  Initiator Cookie\n   The Initiator secret value that affects its cookie\
    \ SHOULD change for\n   each new exchange, and is thereafter internally cached\
    \ per TCB.  This\n   provides improved synchronization and protection against\
    \ replay\n   attacks.\n   An alternative is to cache the cookie instead of the\
    \ secret value.\n   Incoming cookies can be compared directly without the computational\n\
    \   cost of regeneration.\n   It is RECOMMENDED that the cookie be calculated\
    \ over the secret\n   value, the IP Source and Destination addresses, the TCP\
    \ Source and\n   Destination ports, and any (optional) Initiator <SYN> segment\
    \ data.\n   Implementation Notes:\n      Although the recommendation includes\
    \ the TCP Source Port, this is\n      very implementation specific.  For example,\
    \ it might not be\n      included when the value is constant or unknown.\n   \
    \   Likewise, segment data might not be included directly.  For\n      example,\
    \ a pointer to the data could be included instead, with\n      care taken to ensure\
    \ the pointer changes anytime the data changes.\n      However, it is important\
    \ that the implementation protect mutually\n      suspicious users of the same\
    \ system from generating the same\n      cookie.\n"
- title: 3.5.2.  Responder Cookie
  contents:
  - "3.5.2.  Responder Cookie\n   The Responder secret value that affects its cookies\
    \ remains the same\n   for many different Initiators.  However, this secret SHOULD\
    \ be\n   changed periodically to limit the time for use of its cookies\n   (typically\
    \ each 600 seconds).\n   The Responder-Cookie calculation MUST include its own\
    \ TCP Sequence\n   and Acknowledgment Numbers (after updating values), its own\
    \ TCP\n   Timestamps value, and the Initiator-Cookie value.  This provides\n \
    \  improved synchronization and protection against replay attacks.\n   It is RECOMMENDED\
    \ that the cookie be calculated over the secret\n   value, the IP Source and Destination\
    \ addresses, its own TCP\n   Destination Port (that is, the incoming Source Port),\
    \ and the\n   required values (above), followed by the secret value again.\n \
    \  The cookie is not cached per Initiator to avoid saving state during\n   the\
    \ initial TCP <SYN> exchange.  On receipt of a TCP <ACK(SYN)>, the\n   Responder\
    \ regenerates its cookie for validation.\n   Implementation Notes:\n      Although\
    \ the recommendation does not include the TCP Source Port,\n      this is very\
    \ implementation specific.  It might be successfully\n      included in some variants.\n\
    \      The Responder Cookie depends on the TCP Sequence and\n      Acknowledgment\
    \ Numbers as they will appear for future\n      verification.  The Sequence Number\
    \ will be the Initial Sequence\n      Number (ISN) plus one (1) for its <SYN>\
    \ that will be acknowledged.\n      The Acknowledgment Number will be the Initial\
    \ Sequence Number\n      (ISN) plus one (1) for the <SYN> that it is now acknowledging.\n\
    \      The (32-bit) TCP Timestamps standard option MAY change to the\n      larger\
    \ 64-bit (or 128-bit) extended form; only the least\n      significant 32 bits\
    \ are included.  The Initiator Timestamp field\n      value MAY increment during\
    \ the exchange; it MUST NOT be included.\n      The secret value is included twice\
    \ to better protect against pre-\n      calculated attacks using substitutions\
    \ for variable length data.\n      Some examples using this technique are IP-MAC\
    \ and H-MAC, and it is\n      likely that existing code could be shared.\n   \
    \   The Responder SHOULD designate a (fixed or randomly selected) bit\n      of\
    \ its cookie to distinguish each changed secret value.  The bit\n      is set\
    \ to a (fixed or randomly selected) constant 0 or 1, and\n      checked upon receipt\
    \ before further verification.  This ensures\n      that only one verification\
    \ calculation is necessary (on average)\n      during Denial of Service (DoS)\
    \ attacks.\n      If a Responder Cookie is identical to the Initiator Cookie,\
    \ the\n      Responder SHOULD change one or more bits of its cookie to prevent\n\
    \      its accidental appearance as a reflection attack.\n"
- title: 3.5.3.  Responder Secret Value
  contents:
  - "3.5.3.  Responder Secret Value\n   Each Responder maintains up to two secret\
    \ values concurrently for\n   efficient secret rollover.  Each secret value has\
    \ 4 states:\n   Generating\n      Generates new Responder-Cookies, but not yet\
    \ used for primary\n      verification.  This is a short-term state, typically\
    \ lasting only\n      one Round Trip Time (RTT).\n   Primary\n      Used both\
    \ for generation and primary verification.\n   Retiring\n      Used for verification,\
    \ until the first failure that can be\n      verified by the newer Generating\
    \ secret.  At that time, this\n      cookie's state is changed to Secondary, and\
    \ the Generating\n      cookie's state is changed to Primary.  This is a short-term\
    \ state,\n      typically lasting only one RTT.\n   Secondary\n      Used for\
    \ secondary verification, after primary verification\n      failures.  This state\
    \ lasts no more than twice the Maximum Segment\n      Lifetime (2MSL).  Then,\
    \ the secret is discarded.\n   Implementation Notes:\n      Care MUST be taken\
    \ to ensure that any expired secrets are promptly\n      wiped from memory, and\
    \ secrets are never saved to external\n      storage.\n      The first secret\
    \ after initialization begins in Primary state.\n      The system might have shutdown\
    \ and restarted rapidly during the\n      previous first secret.  Thus, the first\
    \ secret MUST be partially\n      time dependent, to ensure that it differs from\
    \ previous first\n      secrets, usually by appending a time to lengthen the first\
    \ secret.\n      Those that are not the first secret SHOULD NOT include the time.\n\
    \      At the same time, there is no TCP TIME-WAIT requirement before\n      accepting\
    \ connections, and there may be pent up demand for a busy\n      service.  Also,\
    \ there may be outstanding datagrams attempting to\n      complete an earlier\
    \ cookie exchange.  The first secret is likely\n      to be the weakest, as no\
    \ recent entropy has been included.\n      Therefore, while terminating outstanding\
    \ exchanges with the first\n      secret, a new Generating secret SHOULD be created\
    \ after no more\n      than one Maximum Segment Lifetime (1MSL).  Subsequent secrets\n\
    \      SHOULD be generated at the usual rate (typically 600 seconds).\n      The\
    \ implementation SHOULD continually gather additional entropy\n      from checksums,\
    \ cookies, timestamps, and packet arrival timing.\n"
- title: 4.  Cookie Exchange
  contents:
  - "4.  Cookie Exchange\n   A successful option exchange signals availability of\
    \ additional\n   features.\n"
- title: 4.1.  Initiator <SYN>
  contents:
  - "4.1.  Initiator <SYN>\n   The Cookie exchange MAY be initiated at any time, limited\
    \ only by the\n   frequency of the timestamp clock.\n   If the TCB exists from\
    \ a prior (or ongoing) connection, the timestamp\n   MUST be incremented in the\
    \ option.\n   The Initiator generates its unpredictable cookie value, and includes\n\
    \   the Cookie option.\n   During the initial exchange, the Initiator is solely\
    \ responsible for\n   retransmission.  Although the cookie and sequence have not\
    \ changed,\n   each retransmission appears to the Responder as another original\n\
    \   <SYN>.\n   Implementation Notes:\n      Sending the <SYN> SHOULD NOT affect\
    \ any existing TCB.  This allows\n      an additional RTT for duplicate or out-of-sequence\
    \ segments to\n      drain.\n      The new TCB information SHOULD be temporarily\
    \ cached until a valid\n      matching <SYN,ACK(SYN)> arrives.  Then, any old\
    \ TCB values are\n      replaced.\n"
- title: 4.2.  Responder <SYN,ACK(SYN)>
  contents:
  - "4.2.  Responder <SYN,ACK(SYN)>\n   Upon receipt of the <SYN> with a Cookie option,\
    \ the Responder\n   determines whether there are sufficient resources to begin\
    \ another\n   connection.\n   If the TCB exists from a prior (or ongoing) connection,\
    \ the timestamp\n   MUST be incremented in the option.\n   Each Sequence Number\
    \ MUST be randomized [RFC1948].\n   The Responder generates its unpredictable\
    \ cookie value, and includes\n   the Cookie option.\n   As the Responder retains\
    \ no TCB state, retransmission timers are not\n   available.  Arrival of an Initiator's\
    \ retransmission appears to be an\n   original <SYN> transmission.  There are\
    \ no differences in processing.\n   Implementation Notes:\n      Sending the <SYN,ACK(SYN)>\
    \ MUST NOT affect any existing TCB.  This\n      allows an additional RTT for\
    \ duplicate or out-of-sequence segments\n      to drain.\n      This also inhibits\
    \ third parties from disrupting communications.\n"
- title: 4.3.  Initiator <ACK(SYN)>
  contents:
  - "4.3.  Initiator <ACK(SYN)>\n   Upon receipt of the <SYN,ACK(SYN)> with a Cookie\
    \ option, the\n   Initiator validates its cookie, timestamp, and corresponding\n\
    \   Acknowledgment Number.  The existing TCB is updated as necessary.\n   All\
    \ Initiator <SYN> options are always retransmitted on this first\n   <ACK(SYN)>,\
    \ allowing the Responder to validate its cookie and\n   establish its state.\n\
    \   This segment contains both Timestamps and Cookie-Pair options.\n   The Initiator\
    \ sends the Timestamps extended option with an\n   appropriate Size -- chosen\
    \ by a configurable parameter, or\n   automatically based on its analysis of the\
    \ bandwidth-delay product\n   discovered through the RTT of its <SYN> timestamp.\
    \  When the chosen\n   Size is greater than 32 bits, the Initiator adds a random\
    \ prefix to\n   its own timestamp, and a random prefix to the Responder timestamp\n\
    \   echo reply.\n   Implementation Notes:\n      A Responder Cookie identical\
    \ to the Initiator Cookie MUST be\n      discarded.  This is usually an indication\
    \ of a Monkey in the\n      Middle (MITM) reflection attack or a seriously misconfigured\n\
    \      network, and SHOULD be logged.\n"
- title: 4.4.  Responder <ACK>
  contents:
  - "4.4.  Responder <ACK>\n   Upon receipt of the <ACK(SYN)> with a Cookie-Pair option,\
    \ the\n   Responder validates its cookie, timestamp, and corresponding\n   Acknowledgment\
    \ Number, and establishes state for the connection.  Any\n   existing TCB is updated\
    \ as necessary.\n   This segment contains both Timestamps and Cookie-Pair options.\n\
    \   However, the Responder MAY refuse to negotiate the larger 64-bit (or\n   128-bit)\
    \ Timestamps extended option by returning the least\n   significant bits in a\
    \ smaller Timestamps extended option.\n   Implementation Notes:\n      An <ACK(SYN)>\
    \ that fails to validate MUST be discarded, and SHOULD\n      be logged.\n"
- title: 4.5.  Simultaneous Open
  contents:
  - "4.5.  Simultaneous Open\n   TCP allows two parties to simultaneously initiate\
    \ the connection.\n   Both parties send and receive an original <SYN> without\
    \ an\n   intervening <SYN,ACK(SYN)> (see [RFC793] section 3.4 and Figure 8).\n\
    \   Each party receives a Cookie for a <Source Address, Source Port,\n   Destination\
    \ Address, Destination Port> connection that has also\n   issued a Cookie.\n \
    \  This condition will be unusual.  The Source Port SHOULD be randomized\n   [RFC5452],\
    \ and SHOULD be chosen to differ from the Destination Port.\n   In particular,\
    \ the Source Port SHOULD be greater than 1024,\n   preventing intervening network\
    \ equipment from incorrectly classifying\n   the return traffic.  The Destination\
    \ Port is most likely to be a\n   well-known port less than 1024 [RFC3232].\n\
    \   In the event that these protections are insufficient, the conflict is\n  \
    \ resolved in an orderly fashion:\n   a. The lesser TCP Port number becomes the\
    \ Responder;\n   b. The lesser IP Address becomes the Responder;\n   c. The lesser\
    \ Cookie becomes the Responder;\n   d. All of the above being equal, there is\
    \ an egregiously insufficient\n      source of randomness, but both Initiators\
    \ are probably present on\n      the same host: the lesser TCB memory address\
    \ becomes the\n      Responder.\n   The Initiator silently discards the simultaneous\
    \ <SYN>.  The\n   Responder revises its Cookie option, and sends the <SYN,ACK(SYN)>\
    \ as\n   usual, but without removing its existing TCB.\n   Implementation Notes:\n\
    \      This is usually an indication of a Monkey in the Middle (MITM)\n      reflection\
    \ attack or a seriously misconfigured network, and SHOULD\n      be logged.\n"
- title: 5.  Accelerated Close
  contents:
  - "5.  Accelerated Close\n   Support for accelerated close is REQUIRED.  Accelerated\
    \ close relies\n   on the presence of cookies and timestamps.  This provides improved\n\
    \   synchronization and protection against replay attacks.\n   Either party MAY\
    \ close with <FIN> at any time.  This <FIN> SHOULD be\n   sent with the final\
    \ data segment.\n   This segment contains both Timestamps and Cookie-Pair options.\n\
    \   When all segments preceding the <FIN> have been processed and\n   acknowledged,\
    \ each party SHOULD acknowledge the <FIN>.\n   In general, <FIN> is treated as\
    \ advisory.  A persistent connection\n   can be rapidly re-established.  This\
    \ also inhibits third parties from\n   disrupting communications.\n   Rapidly\
    \ closing the connection expedites removing Responder state.\n   Any <FIN> bearing\
    \ segment SHOULD terminate delayed <ACK> [RFC5681].\n   Retransmit at the latest\
    \ Timestamps estimated Smoothed Round Trip\n   Time (SRTT).  Backoff SHOULD NOT\
    \ be used for <FIN> bearing\n   retransmissions [RFC2988].\n   As the Responder\
    \ retains no TCB state after closing, a successful\n   option exchange signals\
    \ the Initiator will be responsible for\n   handling TIME-WAIT state.  (For previous\
    \ proposal and rationale, see\n   [FTY1999] section 3.)\n   A new Cookie exchange\
    \ MAY be initiated at any time.  This facilitates\n   persistent connections through\
    \ intervening network equipment.\n"
- title: 5.1.  Initiator Close
  contents:
  - "5.1.  Initiator Close\n   Upon receipt of the Initiator <FIN> (and verification\
    \ of the\n   Timestamps and Cookie-Pair options), the Responder sends its\n  \
    \ <FIN,ACK(FIN)> unless there is additional data pending.  In the\n   latter case,\
    \ the <FIN> is ignored until the data has been processed\n   and acknowledged.\n\
    \   Upon receipt of the Responder <FIN,ACK(FIN)> (and verification of the\n  \
    \ Timestamps and Cookie-Pair options), the Initiator sends its final\n   <ACK(FIN)>\
    \ unless there is additional data pending.  The Initiator\n   enters TIME-WAIT\
    \ state.\n   This segment contains both Timestamps and Cookie-Pair options.\n\
    \   Upon receipt of the Initiator <ACK(FIN)> (and verification of the\n   Timestamps\
    \ and Cookie-Pair options), the Responder removes its TCB.\n   Upon arrival of\
    \ more data prompting a new Cookie exchange, the\n   Initiator SHOULD NOT send\
    \ a final <ACK(FIN)> and/or SHOULD NOT wait\n   the remaining TIME-WAIT interval.\
    \  Any existing TSoffset SHOULD be\n   incremented.  TSoffset will be removed\
    \ (with the TCB itself) at the\n   conclusion of a future TIME-WAIT state.\n"
- title: 5.2.  Responder Close
  contents:
  - "5.2.  Responder Close\n   Upon receipt of the Responder <FIN> (and verification\
    \ of the\n   Timestamps and Cookie-Pair options), the Initiator sends its\n  \
    \ <FIN,ACK(FIN)> unless there is additional data pending.  In the\n   latter case,\
    \ the <FIN> is ignored until the data has been processed\n   and acknowledged.\n\
    \   Upon receipt of the Initiator <FIN,ACK(FIN)> (and verification of the\n  \
    \ Timestamps and Cookie-Pair options), the Responder sends its final\n   <ACK(FIN)>\
    \ and removes its TCB.\n   This segment contains both Timestamps and Cookie-Pair\
    \ options.\n   If the Responder's final <ACK(FIN)> is lost, the Responder is likely\n\
    \   to send a <RST> (as the Responder retains no TCB state).  This\n   distinguished\
    \ <RST> SHOULD copy both Timestamps and Cookie-Pair\n   options.\n   Upon receipt\
    \ of the Responder's final <ACK(FIN)> (and verification of\n   the Timestamps\
    \ and Cookie-Pair options), the Initiator enters TIME-\n   WAIT state.\n   Upon\
    \ arrival of more data prompting a new Cookie exchange, the\n   Initiator SHOULD\
    \ NOT send a <FIN,ACK(FIN)> and/or SHOULD NOT wait the\n   remaining TIME-WAIT\
    \ interval.  Any existing TSoffset SHOULD be\n   incremented.  TSoffset will be\
    \ removed (with the TCB itself) at the\n   conclusion of a future TIME-WAIT state.\n"
- title: 6.  Accelerated Open
  contents:
  - "6.  Accelerated Open\n   Support for accelerated open is OPTIONAL.\n   When an\
    \ application is capable of idempotent transactions (such as a\n   query that\
    \ returns a consistent result or service response heading),\n   the application\
    \ sets the appropriate limit separately for each port\n   or connection.  Applications\
    \ are responsible for ensuring that\n   retransmissions do not cause duplication\
    \ of data.\n   This facility allows single data segment transactions without\n\
    \   establishing TCB state at the Responder (server).  For longer\n   transactions,\
    \ a short look-ahead of upcoming data allows the\n   Initiator (client) to select\
    \ alternatives for further processing.\n"
- title: 6.1.  Initiator <SYN> Data
  contents:
  - "6.1.  Initiator <SYN> Data\n   By default, the Initiator <SYN> does not contain\
    \ data.  The\n   application sets the TCP_SYN_DATA_LIMIT to indicate that the\
    \ <SYN>\n   MAY be sent with data.\n   The Responder Maximum Segment Size (MSS)\
    \ is unknown, and the default\n   MSS (536 bytes) MUST be used instead ([RFC1122]\
    \ section 4.2.2.6).\n   This is further reduced by the total length of the TCP\
    \ options (in\n   this case, commonly 496 bytes).  Applications MAY specify a\
    \ shorter\n   limit.\n   If the data will not entirely fit within the initial\
    \ segment, data\n   MUST NOT be sent until after the Responder's <SYN,ACK(SYN)>\
    \ is\n   received.\n   Unlike T/TCP [RFC1644], <FIN> SHOULD NOT be sent with <SYN>\
    \ data.\n   This facilitates persistent connections.\n   Likewise, <PSH> SHOULD\
    \ NOT be set.  Although the application might\n   use push to indicate that its\
    \ data is ready to send, the push is\n   implied for <SYN> data segments.\n  \
    \ During the initial exchange, the Initiator is solely responsible for\n   retransmission.\
    \  Although the cookie and sequence have not changed,\n   each retransmission\
    \ appears to the Responder as another original\n   <SYN>.\n   Implementation Notes:\n\
    \      Initiator <SYN,FIN> with the Cookie option and no segment data is\n   \
    \   permitted in a test environment.  This combination SHOULD be\n      silently\
    \ discarded.\n      Initiator <SYN,FIN> with both the Cookie option and segment\
    \ data\n      is similar to T/TCP [RFC1644].  However, whenever the Responder\n\
    \      <SYN,ACK(SYN),FIN> has been sent with data (there is no further\n     \
    \ data expected), TCB state has not been saved at the Responder.\n      There\
    \ is no need to send <FIN> to close the connection.\n"
- title: 6.2.  Responder <SYN,ACK(SYN)> Data
  contents:
  - "6.2.  Responder <SYN,ACK(SYN)> Data\n   By default, the Responder <SYN,ACK(SYN)>\
    \ does not contain data.  The\n   application sets the TCP_SYN_ACK_DATA_LIMIT\
    \ to indicate that the\n   <SYN,ACK(SYN)> MAY be sent with data.\n   Segment data\
    \ is limited to the Maximum Transmission Unit (MTU).\n   Applications MAY specify\
    \ a shorter limit to prevent spoofed\n   amplification and reflection attacks\
    \ [RFC5358].\n   Upon receipt of the <SYN> with a Cookie option, the Responder\
    \ MAY\n   process any data present.  If the initial data is not accepted, the\n\
    \   Acknowledgment Number will be the received Sequence Number plus one\n   (1)\
    \ for the <SYN>.\n   If the segment data is the entire response (there is no further\
    \ data\n   expected), <FIN> MAY be set.\n   However, <PSH> SHOULD NOT be set.\
    \  Although the application might use\n   push to indicate that its data is ready\
    \ to send, the push is implied\n   for <FIN> data segments (see [RFC793] section\
    \ 3.7, page 41).\n   As the Responder retains no TCB state, retransmission timers\
    \ are not\n   available.  Arrival of an Initiator's retransmission appears to\
    \ be an\n   original <SYN> transmission.  There are no differences in processing.\n\
    \   Implementation Notes:\n      The Responder Cookie depends on the TCP Sequence\
    \ and\n      Acknowledgment Numbers after processing <SYN>.  Therefore, neither\n\
    \      will include data.\n"
- title: 6.3.  Initiator <ACK(SYN)> Data
  contents:
  - "6.3.  Initiator <ACK(SYN)> Data\n   Upon receipt of the <SYN,ACK(SYN)> with a\
    \ Cookie option, the\n   Initiator MAY process any data present.  In this case,\
    \ the internal\n   RCV.NXT is advanced to provide at-most-once semantics.\n  \
    \ If the segment data is the entire response (there is no further data\n   expected),\
    \ the Initiator enters TIME-WAIT state.\n   Otherwise, original <SYN> data is\
    \ retransmitted in <ACK(SYN)>, as its\n   processing is optional.  The Acknowledgment\
    \ Number will be the\n   received Sequence Number plus one (1) for the <SYN>.\
    \  The Sequence\n   Number will be the Initial Sequence Number (ISN) plus one\
    \ (1) for the\n   <SYN>.\n   Unlike T/TCP [RFC1644], there is no implicit acknowledgment.\n\
    \   If the Selective Acknowledgment (Sack) option [RFC2018] has been\n   successfully\
    \ negotiated, a short Sack acknowledging the response data\n   MAY be sent following\
    \ the Cookie-Pair in the extended header.\n   At this time, any second segment\
    \ may be sent without awaiting an\n   <ACK>, according to the usual [RFC5681]\
    \ TCP congestion control\n   process.\n   Implementation Notes:\n      Upon arrival\
    \ of more data prompting a new Cookie exchange, there\n      is no need to increment\
    \ the previous timestamp; TCB state has not\n      been saved at the Responder.\
    \  Instead, use the saved RCV.NXT, plus\n      one (1) for the (actual or implied)\
    \ <FIN>.\n      Initiator <ACK(SYN),FIN> with the Cookie-Pair option and no\n\
    \      segment data is never required; TCB state has not been saved at\n     \
    \ the Responder.  This combination MUST be silently discarded.\n"
- title: 6.4.  Responder <ACK> Data
  contents:
  - "6.4.  Responder <ACK> Data\n   Upon receipt of the <ACK(SYN)> with a Cookie-Pair\
    \ option (and\n   verification of the Timestamps and Cookie-Pair options), the\n\
    \   Responder SHOULD process any data present.\n   Since the TCP Sequence and\
    \ Acknowledgment Numbers have not advanced,\n   the Responder will process the\
    \ same incoming data, and transmit the\n   same response.\n   If the Selective\
    \ Acknowledgment (Sack) option [RFC2018] has been\n   successfully negotiated,\
    \ with a short Sack covering earlier response\n   data, only additional unacknowledged\
    \ response data is sent.\n   At this time, any second segment may be sent without\
    \ awaiting an\n   <ACK>, according to the usual [RFC5681] TCP congestion control\n\
    \   process.\n"
- title: 7.  Advisory Reset
  contents:
  - "7.  Advisory Reset\n   When a TCB with matching Addresses and Ports is found,\
    \ but the\n   Cookie-Pair fails to verify, the datagram MUST be silently discarded.\n\
    \   When no TCB with matching Addresses and Ports is found, a <RST> is\n   sent\
    \ as usual.  The Timestamps option SHOULD be copied [RFC1323].  A\n   Cookie-Pair\
    \ option MUST also be copied.  The Cookie option (or\n   Cookie-less option) MUST\
    \ NOT be copied.\n   Any <RST> is always treated as advisory.  A <RST> without\
    \ a matching\n   Cookie-Pair option could be caused by antique duplicates.  Receipt\n\
    \   has no effect on the operation of the protocol.  The implementation\n   SHOULD\
    \ continue until a USER TIMEOUT expires.  (See [RFC5482] for\n   additional information.)\n\
    \   This also inhibits third parties from disrupting communications.\n"
- title: 8.  Interactions with Other Options
  contents:
  - "8.  Interactions with Other Options\n   A successful Cookie (or Cookie-less)\
    \ option exchange signals\n   availability of the TCP header extension.  Other\
    \ options with large\n   data portions MAY also use this feature.  The extended\
    \ option data is\n   processed in the order that the options appear.\n"
- title: 8.1.  TCP Selective Acknowledgment
  contents:
  - "8.1.  TCP Selective Acknowledgment\n   (Kind 5 [RFC2018].)  The pairs of 32-bit\
    \ fields are well suited to\n   the header extension.  Because of its variable\
    \ size, this is\n   RECOMMENDED as the final extended option.\n   During the cookie\
    \ exchange, the <ACK(SYN)> MAY include this option to\n   acknowledge any optional\
    \ transaction response data.\n"
- title: 8.2.  TCP Timestamps
  contents:
  - "8.2.  TCP Timestamps\n   (Kind 8 [RFC1323].)  Support is REQUIRED.  See also\
    \ section 3.\n   When a segment needs no header extension, and 32-bit timestamps\
    \ have\n   been negotiated, this option MUST be sent.\n"
- title: 8.3.  TCP Extensions for Transactions
  contents:
  - "8.3.  TCP Extensions for Transactions\n   (Kinds 11-13 [RFC1644].)  Incompatible\
    \ with this specification, and\n   MUST be ignored on receipt.\n"
- title: 8.4.  TCP MD5 Signature
  contents:
  - "8.4.  TCP MD5 Signature\n   (Kind 19 [RFC2385].)  This option is beyond the scope\
    \ of this\n   specification.  Because specific configuration is required, sending\n\
    \   is under the complete control of the operator.  Segments lacking this\n  \
    \ option will be silently discarded.\n   The size of the option itself precludes\
    \ use with the Cookie option in\n   the <SYN>.  Regardless of the system default,\
    \ the Cookie option MUST\n   NOT be sent, and MUST be ignored on receipt.  Instead,\
    \ the Cookie-\n   less extension option indicates that other features of this\n\
    \   specification are available.\n"
- title: 8.5.  TCP Authentication
  contents:
  - "8.5.  TCP Authentication\n   (Kind 29 [RFC5925].)  This option is beyond the\
    \ scope of this\n   specification.  Because specific configuration is required,\
    \ sending\n   is under the complete control of the operator.  Segments lacking\
    \ this\n   option will be silently discarded.\n   The size of the option itself\
    \ precludes use with the Cookie option in\n   the <SYN>.  Regardless of the system\
    \ default, the Cookie option MUST\n   NOT be sent, and MUST be ignored on receipt.\
    \  Instead, the Cookie-\n   less extension option indicates that other features\
    \ of this\n   specification are available.\n"
- title: 9.  History
  contents:
  - "9.  History\n   T/TCP [RFC1379] [RFC1644] permits lightweight TCP transactions\
    \ for\n   applications that traditionally have used UDP.  However, T/TCP has\n\
    \   unacceptable security issues [Hannum1996] [Phrack1998].\n   The initial specification\
    \ [KS1995] of Photuris [RFC2522], now called\n   version 1 (December 1994 to March\
    \ 1995), was based on a short list of\n   design requirements, and simple experimental\
    \ code by Phil Karn.  A\n   \"Cookie\" Exchange guards against simple flooding\
    \ attacks sent with\n   bogus IP Sources or UDP Ports.\n   During 1995, the Photuris\
    \ efficient secret rollover and many other\n   extensions were specified.  Multiple\
    \ interoperable implementations\n   were produced.\n   By September 1996, the\
    \ long anticipated Denial of Service (DoS)\n   attacks in the form of TCP SYN\
    \ floods were devastating popular (and\n   unpopular) servers and sites.  Phil\
    \ Karn informally mentioned\n   adapting anti-clogging cookies to TCP.  Perry\
    \ Metzger proposed adding\n   Karn's cookies as part of a \"TCP++\" effort [Metzger1996].\n\
    \   Later in 1996, Daniel J. Bernstein implemented \"SYN cookies\", small\n  \
    \ cookies embedded in the TCP SYN Initial Sequence Number (ISN).  This\n   technique\
    \ was exceptionally clever, because it did not require\n   cooperation of the\
    \ remote party and could be deployed unilaterally.\n   However, SYN cookies can\
    \ only be used in emergencies; they are\n   incompatible with most TCP options.\
    \  As there is insufficient space\n   in the Sequence Number, the cookie is not\
    \ considered cryptologically\n   secure.  Therefore, the mechanism remains inactive\
    \ until the system\n   is under attack, and thus is not well tested in operation.\
    \  SYN\n   cookies were not accepted for publication until recently [RFC4987].\n\
    \   In 1998, Perry Metzger proposed adding Karn's cookies as part of a\n   \"\
    TCPng\" discussion [Metzger1998].\n   In 1999, Faber, Touch, and Yue [FTY1999]\
    \ proposed using an option to\n   negotiate the party that would maintain TIME-WAIT\
    \ state.  This\n   permits a server to entirely eliminate state after closing\
    \ a\n   connection.\n   In 2000, the Stream Control Transmission Protocol (SCTP)\
    \ [RFC2960]\n   was published with an inadequate partial cookie mechanism claiming\
    \ to\n   be based upon Photuris.  It featured a deficient checksum (replaced\n\
    \   in 2002 by [RFC3309] without graceful transition), and has undergone\n   subsequent\
    \ revisions [RFC4960].\n   In 2006, the Datagram Congestion Control Protocol (DCCP)\
    \ [RFC4340]\n   was published with a mechanism analogous to SYN cookies.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Andre Broido informally described utilizing cookies\
    \ for Transport\n   Layer Security (TLS) session identifiers, in place of the\
    \ [RFC5077]\n   ticket.  Rapid TLS session resumption would improve both latency\
    \ and\n   privacy, but is beyond the scope of this specification.  Also, he\n\
    \   provided numerous helpful comments and additional references, such as\n  \
    \ [KBC2005].\n   H. K. Jerry Chu and Arvind Jain informally described retaining\n\
    \   existing cookies for accelerated open on subsequent connections.\n   That\
    \ feature was subsumed by this specification.\n   Wesley M. Eddy and Adam Langley\
    \ previously proposed another pair of\n   options [EL2008] extending the TCP header\
    \ option space.\n   Adam Langley previously proposed another option [Langley2008]\n\
    \   permitting <SYN,ACK(SYN)> constant payload data.  His (August 2008)\n   code\
    \ was a base for the initial TCPCT implementation.\n   Joe Touch postulated a\
    \ (hopefully hypothetical) failure mode: options\n   re-ordered by middleware.\
    \  This caused a change in specifications,\n   and has considerably complicated\
    \ option interactions and processing.\n   His helpful comments were appreciated.\n\
    \   Many thanks to Fernando Gont for suggestions, and Rick Jones for\n   performance\
    \ testing.\n"
- title: 11.  IESG Considerations
  contents:
  - "11.  IESG Considerations\n   Two TCP Option numbers are reserved for general\
    \ experimental use\n   under the rules laid out in [RFC4727] and [RFC3692] section\
    \ 1.  Such\n   values reserved for experimental use are never to be made permanent;\n\
    \   permanent assignments should be obtained through standard processes.\n   Experimental\
    \ numbers are intended for experimentation and testing and\n   are not intended\
    \ for wide or general deployments.\n   For further information, contact the author.\n"
- title: 12.  Operational Considerations
  contents:
  - "12.  Operational Considerations\n   Any implementation of this specification\
    \ SHOULD be configurable,\n   separately for each port or connection.\n   TCPCT_COOKIE_DESIRED\n\
    \      Values: 0 (disabled), 8, 10, 12, 14, 16.  Default: 16.  Send the\n    \
    \  Cookie option with the <SYN>.\n   TCPCT_EXTEND_TS[32|64|128]\n      Default:\
    \ off.  If defined, may designate 32-bit, 64-bit, or\n      128-bit timestamps\
    \ extension.\n   TCPCT_IN_ALWAYS\n      Default: off.  Silently discard any incoming\
    \ <SYN> that is missing\n      the Cookie option.\n   TCPCT_OUT_NEVER\n      Default:\
    \ off.  Refuse to send (override) the Cookie option.\n   TCP_SYN_DATA_LIMIT\n\
    \      Default: 0.  Maximum: 496.  The maximum amount of data transmitted\n  \
    \    with the <SYN>.  Wait for data before sending.\n   TCP_SYN_ACK_DATA_LIMIT\n\
    \      Default: 0.  Maximum: 1220.  The maximum amount of data\n      transmitted\
    \ with the <SYN,ACK(SYN)>.  Wait for data before\n      sending.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   TCPCT was based on currently available tools,\
    \ by experienced network\n   protocol designers with an interest in cryptography,\
    \ rather than by\n   cryptographers with an interest in network protocols.  This\n\
    \   specification is intended to be readily implementable without\n   requiring\
    \ an extensive background in cryptology.\n   Therefore, only minimal background\
    \ cryptologic discussion and\n   rationale is included in this document.  Although\
    \ some review has\n   been provided by the general cryptologic community, it is\
    \ anticipated\n   that design decisions and tradeoffs will be thoroughly analysed\
    \ in\n   subsequent dissertations and debated for many years to come.\n   Cryptologic\
    \ details are reserved for separate documents that may be\n   more readily and\
    \ timely updated with new analysis.\n   The security depends on the quality of\
    \ the random numbers generated\n   by each party.  Generating cryptographic quality\
    \ random numbers on a\n   general purpose computer without hardware assistance\
    \ is a very tricky\n   problem (see [RFC4086] for discussion).\n   TCPCT is not\
    \ intended to prevent or recover from all possible\n   security threats.  Rather,\
    \ it is designed to inhibit inadvertent\n   middlebox interference, while protecting\
    \ against Denial of Service\n   (DoS) attacks.  (See [RFC4732], and [RFC3552]\
    \ section 4.6.3 et seq.)\n   The cookie exchange does not protect against an interloper\
    \ that can\n   race to substitute another value, nor an interceptor that can modify\n\
    \   and/or replace a value.  These attacks are considerably more\n   difficult\
    \ than passive vacuum-cleaner monitoring.\n   Note that each incoming <SYN,ACK(SYN)>\
    \ replaces the Responder cookie.\n   The initial exchange is most fragile, as\
    \ protection against spoofing\n   relies entirely upon the sequence and timestamp.\
    \  This replacement\n   strategy allows the correct pair to pass through, while\
    \ any others\n   will be filtered via Responder verification later.\n"
- title: Appendix A. Example Headers
  contents:
  - 'Appendix A. Example Headers

    '
- title: A.1.  Example <SYN>
  contents:
  - "A.1.  Example <SYN>\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=MSS      | Length=4      |            (value)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=UTO      | Length=4      |           (timeout)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=SackOK   | Length=2      | Kind=TS       | Length=10     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           TS Value                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         TS Echo Reply                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=Cookie   | Length=16     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                            Cookie          \
    \                   +\n   |                                                  \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ | Kind=wscale   | Length=3      |    (value)    | Kind=EOL      |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   A 14 byte (112-bit) Cookie barely fits with the other recommended\n   options\
    \ in the maximal 60 byte TCP header (40 bytes of option space).\n   Since the\
    \ cookies are required to be the same size and meet a 32-bit\n   alignment requirement,\
    \ the implementor recognizes that this order\n   provides optimal packing.\n \
    \  The UserTimeOut (UTO) option can appear in other locations instead,\n   such\
    \ as following the Cookie option.  Because some middleboxes are\n   sensitive\
    \ to the order of options, UTO should not appear before MSS\n   nor between the\
    \ TS and Cookie.\n"
- title: A.2.  Example <ACK(SYN)> with Sack
  contents:
  - "A.2.  Example <ACK(SYN)> with Sack\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=TSX      | Length=4      | Extend=16     |    0    | S=1 |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                           TS Value                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         TS Echo Reply                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=nop      | Kind=nop      | Kind=Cookie   | Length=30     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \         Initiator-Cookie                        +\n   |                    \
    \                                           |\n   +                          \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      \
    \                         +\n   |                                            \
    \                   |\n   +                       Responder-Cookie           \
    \             +\n   |                                                        \
    \       |\n   +                                                              \
    \ +\n   |                                                               |\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Kind=MSS\
    \      | Length=4      |            (value)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=UTO      | Length=4      |           (timeout)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=nop      | Kind=nop      | Kind=Sack     | Length=10     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Starting Value                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Ending Value                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=wscale   | Length=3      |    (value)    | Kind=EOL      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Sack implies SackOK.\n"
- title: A.3.  Example <ACK(SYN)> with 64-bit Timestamps
  contents:
  - "A.3.  Example <ACK(SYN)> with 64-bit Timestamps\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=TSX      | Length=4      | Extend=15     |    0    | S=2 |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                                                               |\n   +  \
    \                         TS Value                            +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                       TS Echo Reply                         +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=SackOK   | Length=2      | Kind=Cookie   | Length=30     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \         Initiator-Cookie                        +\n   |                    \
    \                                           |\n   +                          \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+      \
    \                         +\n   |                                            \
    \                   |\n   +                       Responder-Cookie           \
    \             +\n   |                                                        \
    \       |\n   +                                                              \
    \ +\n   |                                                               |\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Kind=MSS\
    \      | Length=4      |            (value)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=UTO      | Length=4      |           (timeout)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Kind=wscale   | Length=3      |    (value)    | Kind=EOL      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The larger 64-bit (or 128-bit) Timestamps extended option MUST be\n   recognized,\
    \ although the Responder MAY return a smaller Timestamps\n   extended option.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\", STD 5,\
    \ RFC 791, September\n              1981.\n   [RFC793]   Postel, J., \"Transmission\
    \ Control Protocol\", STD 7, RFC\n              793, September 1981.\n   [RFC1122]\
    \  Braden, R., Ed., \"Requirements for Internet Hosts -\n              Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [RFC1323]  Jacobson, V., Braden,\
    \ R., and D. Borman, \"TCP Extensions\n              for High Performance\", RFC\
    \ 1323, May 1992.\n   [RFC1948]  Bellovin, S., \"Defending Against Sequence Number\
    \ Attacks\",\n              RFC 1948, May 1996.\n   [RFC2018]  Mathis, M., Mahdavi,\
    \ J., Floyd, S., and A. Romanow, \"TCP\n              Selective Acknowledgment\
    \ Options\", RFC 2018, October 1996.\n   [RFC2119]  Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2988]  Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n\
    \              Timer\", RFC 2988, November 2000.\n   [RFC3232]  Reynolds, J.,\
    \ Ed., \"Assigned Numbers: RFC 1700 is Replaced\n              by an On-line Database\"\
    , RFC 3232, January 2002.\n   [RFC5452]  Hubert, A. and R. van Mook, \"Measures\
    \ for Making DNS More\n              Resilient against Forged Answers\", RFC 5452,\
    \ January 2009.\n   [RFC5482]  Eggert, L. and F. Gont, \"TCP User Timeout Option\"\
    , RFC\n              5482, March 2009.\n   [RFC5681]  Allman, M., Paxson, V.,\
    \ and E. Blanton, \"TCP Congestion\n              Control\", RFC 5681, September\
    \ 2009.\n"
- title: Informative References
  contents:
  - "Informative References\n   [EL2008]   Eddy, W. and A. Langley, \"Extending the\
    \ Space Available\n              for TCP Options\", Work in Progress, July 2008.\n\
    \   [FTY1999]  Faber, T., Touch, J., and W. Yue, \"The TIME-WAIT state in\n  \
    \            TCP and Its Effect on Busy Servers\", IEEE INFOCOM 99, pp.\n    \
    \          1573-1584.\n   [Gont2009] Gont, F., \"Security assessment of the Transmission\
    \ Control\n              Protocol (TCP)\", February 2009.\n              https://www.cpni.gov.uk/Docs/tn-03-09-security-\n\
    \              assessment-TCP.pdf\n   [GO2010]   Gont, F. and A. Oppermann, \"\
    On the generation of TCP\n              timestamps\", Work in Progress, June 2010.\n\
    \   [Hannum1996]\n              Hannum, C., \"Security Problems Associated With\
    \ T/TCP\",\n              unpublished work in progress, September 1996.\n    \
    \          http://www.mid-way.org/doc/ttcp-sec.txt\n   [KBC2005]  Kohno, T., Broido,\
    \ A., and K. C. Claffy, \"Remote physical\n              device fingerprinting\"\
    , IEEE Symposium on Security and\n              Privacy, May 2005.  http://www.caida.org/\n\
    \              outreach/papers/2005/fingerprinting/\n              KohnoBroidoClaffy05-devicefingerprinting.pdf\n\
    \   [KS1995]   Karn, P. and W. Simpson, \"The Photuris Session Key\n         \
    \     Management Protocol\", March 1995.\n              Published as: \"Photuris:\
    \ Design Criteria\", Proceedings of\n              Sixth Annual Workshop on Selected\
    \ Areas in Cryptography,\n              LNCS 1758, Springer-Verlag.  August 1999.\n\
    \   [Langley2008]\n              Langley, A., \"Faster application handshakes\
    \ with SYN/ACK\n              payloads\", Work in Progress, August 2008.\n   [MAF2004]\
    \  Medina, A., Allman, M., and S. Floyd, \"Measuring\n              Interactions\
    \ Between Transport Protocols and Middleboxes\",\n              Proceedings 4th\
    \ ACM SIGCOMM/USENIX Conference on Internet\n              Measurement, October\
    \ 2004.\n              http://www.icsi.berkeley.edu/pubs/networking/tbit-\n  \
    \            Aug2004.pdf\n   [Metzger1996]\n              Metzger, P., \"Re: SYN\
    \ floods (was: does history repeat\n              itself?)\", September 9, 1996.\n\
    \              http://www.merit.net/mail.archives/nanog/\n              1996-09/msg00235.html\n\
    \   [Metzger1998]\n              Metzger, P., \"Re: what a new TCP header might\
    \ look like\",\n              May 12, 1998.  ftp://ftp.isi.edu/end2end/end2end-\n\
    \              interest-1998.mail\n   [Morris1985]\n              Morris, R.,\
    \ \"A Weakness in the 4.2BSD Unix TCP/IP\n              Software\", Technical\
    \ Report CSTR-117, AT&T Bell\n              Laboratories, February 1985.\n   \
    \           http://pdos.csail.mit.edu/~rtm/papers/117.pdf\n   [MSV2009]  Metzger,\
    \ P., Simpson, W., and P. Vixie, \"Improving TCP\n              Security With\
    \ Robust Cookies\", Usenix ;login:, December\n              2009.  http://www.usenix.org/publications/login/\n\
    \              2009-12/openpdfs/metzger.pdf\n   [Phrack1998]\n              route|daemon9,\
    \ \"T/TCP vulnerabilities\", Phrack Magazine,\n              Volume 8, Issue 53,\
    \ July 8, 1998.\n              http://www.phrack.org/issues.html?issue=53&id=6\n\
    \   [RFC1379]  Braden, R., \"Extending TCP for Transactions -- Concepts\",\n \
    \             RFC 1379, November 1992.\n   [RFC1644]  Braden, R., \"T/TCP -- TCP\
    \ Extensions for Transactions\n              Functional Specification\", RFC 1644,\
    \ July 1994.\n   [RFC2385]  Heffernan, A., \"Protection of BGP Sessions via the\
    \ TCP MD5\n              Signature Option\", RFC 2385, August 1998.\n   [RFC2522]\
    \  Karn, P. and W. Simpson, \"Photuris: Session-Key Management\n             \
    \ Protocol\", RFC 2522, March 1999.\n   [RFC2827]  Ferguson, P. and D. Senie,\
    \ \"Network Ingress Filtering:\n              Defeating Denial of Service Attacks\
    \ which employ IP Source\n              Address Spoofing\", BCP 38, RFC 2827,\
    \ May 2000.\n   [RFC2960]  Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n \
    \             Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\n         \
    \     Zhang, L., and V. Paxson, \"Stream Control Transmission\n              Protocol\"\
    , RFC 2960, October 2000.\n   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional\
    \ IP Network\n              Address Translator (Traditional NAT)\", RFC 3022,\
    \ January\n              2001.\n   [RFC3234]  Carpenter, B. and S. Brim, \"Middleboxes:\
    \ Taxonomy and\n              Issues\", RFC 3234, February 2002.\n   [RFC3309]\
    \  Stone, J., Stewart, R., and D. Otis, \"Stream Control\n              Transmission\
    \ Protocol (SCTP) Checksum Change\", RFC 3309,\n              September 2002.\n\
    \   [RFC3552]  Rescorla, E. and B. Korver, \"Guidelines for Writing RFC\n    \
    \          Text on Security Considerations\", BCP 72, RFC 3552, July\n       \
    \       2003.\n   [RFC3692]  Narten, T., \"Assigning Experimental and Testing\
    \ Numbers\n              Considered Useful\", BCP 82, RFC 3692, January 2004.\n\
    \   [RFC3704]  Baker, F. and P. Savola, \"Ingress Filtering for Multihomed\n \
    \             Networks\", BCP 84, RFC 3704, March 2004.\n   [RFC4086]  Eastlake\
    \ 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness Requirements\
    \ for Security\", BCP 106, RFC 4086,\n              June 2005.\n   [RFC4340] \
    \ Kohler, E., Handley, M., and S. Floyd, \"Datagram\n              Congestion\
    \ Control Protocol (DCCP)\", RFC 4340, March 2006.\n   [RFC4727]  Fenner, B.,\
    \ \"Experimental Values In IPv4, IPv6, ICMPv4,\n              ICMPv6, UDP, and\
    \ TCP Headers\", RFC 4727, November 2006.\n   [RFC4732]  Handley, M., Ed., Rescorla,\
    \ E., Ed., and Internet\n              Architecture Board, \"Internet Denial-of-Service\n\
    \              Considerations\", RFC 4732, November 2006.\n   [RFC4953]  Touch,\
    \ J., \"Defending TCP Against Spoofing Attacks\", RFC\n              4953, July\
    \ 2007.\n   [RFC4960]  Stewart, R., Ed., \"Stream Control Transmission Protocol\"\
    ,\n              RFC 4960, September 2007.\n   [RFC4987]  Eddy, W., \"TCP SYN\
    \ Flooding Attacks and Common\n              Mitigations\", RFC 4987, August 2007.\n\
    \   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n       \
    \       \"Transport Layer Security (TLS) Session Resumption without\n        \
    \      Server-Side State\", RFC 5077, January 2008.\n   [RFC5358]  Damas, J. and\
    \ F. Neves, \"Preventing Use of Recursive\n              Nameservers in Reflector\
    \ Attacks\", BCP 140, RFC 5358,\n              October 2008.\n   [RFC5925]  Touch,\
    \ J., Mankin, A., and R. Bonica, \"The TCP\n              Authentication Option\"\
    , RFC 5925, June 2010.\n   [RFC6056]  Larson, M. and F. Gont, \"Recommendations\
    \ for Transport-\n              Protocol Port Randomization\", BCP 156, RFC 6056,\
    \ January\n              2011.\n   [rfc1323bis]\n              Borman, D., Braden,\
    \ R., and V. Jacobson., \"TCP Extensions\n              for High Performance\"\
    , Work in Progress, March 2009.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this document can be directed to:\n   William\
    \ Allen Simpson\n   DayDreamer\n   Computer Systems Consulting Services\n   1384\
    \ Fontaine\n   Madison Heights, Michigan 48071\n   EMail: William.Allen.Simpson@Gmail.com\n"
