- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       M. Blanchet
  contents:
  - "Independent Submission                                       M. Blanchet\n  \
    \      IPv6 Tunnel Broker with the Tunnel Setup Protocol (TSP)\n"
- title: Abstract
  contents:
  - "Abstract\n   A tunnel broker with the Tunnel Setup Protocol (TSP) enables the\n\
    \   establishment of tunnels of various inner protocols, such as IPv6 or\n   IPv4,\
    \ inside various outer protocols packets, such as IPv4, IPv6, or\n   UDP over\
    \ IPv4 for IPv4 NAT traversal.  The control protocol (TSP) is\n   used by the\
    \ tunnel client to negotiate the tunnel with the broker.  A\n   mobile node implementing\
    \ TSP can be connected to both IPv4 and IPv6\n   networks whether it is on IPv4\
    \ only, IPv4 behind a NAT, or on IPv6\n   only.  A tunnel broker may terminate\
    \ the tunnels on remote tunnel\n   servers or on itself.  This document describes\
    \ the TSP within the\n   model of the tunnel broker model.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This is a contribution to the RFC Series, independently\n   of any other RFC\
    \ stream.  The RFC Editor has chosen to publish this\n   document at its discretion\
    \ and makes no statement about its value for\n   implementation or deployment.\
    \  Documents approved for publication by\n   the RFC Editor are not a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5572.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The content of this RFC was at one time considered by the IETF,\
    \ and\n   therefore it may resemble a current IETF work in progress or a\n   published\
    \ IETF work.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Description of the TSP Framework ................................4\n  \
    \    2.1. NAT Discovery ..............................................6\n    \
    \  2.2. Any Encapsulation ..........................................6\n      2.3.\
    \ Mobility ...................................................6\n   3. Advantages\
    \ of TSP ...............................................7\n   4. Protocol Description\
    \ ............................................7\n      4.1. Terminology ................................................7\n\
    \      4.2. Topology ...................................................8\n  \
    \    4.3. Overview ...................................................8\n    \
    \  4.4. TSP Signaling ..............................................9\n      \
    \     4.4.1. Signaling Transport .................................9\n        \
    \   4.4.2. Authentication Phase ...............................11\n          \
    \ 4.4.3. Command and Response Phase .........................14\n      4.5. Tunnel\
    \ Establishment ......................................16\n           4.5.1. IPv6-over-IPv4\
    \ Tunnels .............................16\n           4.5.2. IPv6-over-UDP Tunnels\
    \ ..............................16\n      4.6. Tunnel Keep-Alive .........................................16\n\
    \      4.7. XML Messaging .............................................17\n  \
    \         4.7.1. Tunnel .............................................17\n    \
    \       4.7.2. Client Element .....................................18\n      \
    \     4.7.3. Server Element .....................................19\n        \
    \   4.7.4. Broker Element .....................................19\n   5. Tunnel\
    \ Request Examples ........................................19\n      5.1. Host\
    \ Tunnel Request and Reply .............................19\n      5.2. Router\
    \ Tunnel Request with a /48 Prefix Delegation\n           and Reply .................................................20\n\
    \      5.3. IPv4 over IPv6 Tunnel Request .............................22\n  \
    \    5.4. NAT Traversal Tunnel Request ..............................23\n   6.\
    \ Applicability of TSP in Different Networks .....................24\n      6.1.\
    \ Provider Networks with Enterprise Customers ...............24\n      6.2. Provider\
    \ Networks with Home/Small Office Customers ........25\n      6.3. Enterprise\
    \ Networks .......................................25\n      6.4. Wireless Networks\
    \ .........................................25\n      6.5. Unmanaged Networks ........................................26\n\
    \      6.6. Mobile Hosts and Mobile Networks ..........................26\n  \
    \ 7. IANA Considerations ............................................26\n   8.\
    \ Security Considerations ........................................27\n   9. Conclusion\
    \ .....................................................27\n   10. Acknowledgements\
    \ ..............................................27\n   11. References ....................................................28\n\
    \      11.1. Normative References .....................................28\n  \
    \    11.2. Informative References ...................................28\n   Appendix\
    \ A.  The TSP DTD ..........................................30\n   Appendix B.\
    \  Error Codes ..........................................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document first describes the TSP framework, the protocol\n\
    \   details, and the different profiles used.  It then describes the\n   applicability\
    \ of TSP in different environments, some of which were\n   described in the v6ops\
    \ scenario documents.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\
    \ \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Description of the TSP Framework
  contents:
  - "2.  Description of the TSP Framework\n   Tunnel Setup Protocol (TSP) is a signaling\
    \ protocol to set up tunnel\n   parameters between two tunnel endpoints.  TSP\
    \ is implemented as a\n   tiny client code in the requesting tunnel endpoint.\
    \  The other\n   endpoint is the server that will set up the tunnel service. \
    \ TSP uses\n   XML [W3C.REC-xml-2004] basic messaging over TCP or UDP.  The use\
    \ of\n   XML gives extensibility and easy option processing.\n   TSP negotiates\
    \ tunnel parameters between the two tunnel endpoints.\n   Parameters that are\
    \ always negotiated are:\n   o  Authentication of the users, using any kind of\
    \ authentication\n      mechanism (through Simple Authentication and Security\
    \ Layer (SASL)\n      [RFC4422]) including anonymous\n   o  Tunnel encapsulation:\n\
    \      *  IPv6 over IPv4 tunnels [RFC4213]\n      *  IPv4 over IPv6 tunnels [RFC2473]\n\
    \      *  IPv6 over UDP-IPv4 tunnels for NAT traversal\n   o  IP address assignment\
    \ for the tunnel endpoints\n   o  DNS registration of the IP endpoint address\
    \ (AAAA)\n   Other tunnel parameters that may be negotiated are:\n   o  Tunnel\
    \ keep-alive\n   o  IPv6 prefix assignment when the client is a router\n   o \
    \ DNS delegation of the inverse tree, based on the IPv6 prefix\n      assigned\n\
    \   o  Routing protocols\n   The tunnel encapsulation can be explicitly specified\
    \ by the client,\n   or can be determined during the TSP exchange by the broker.\
    \  The\n   latter is used to detect the presence of NAT in the path and select\n\
    \   IPv6 over UDP-IPv4 encapsulation.\n   The TSP connection can be established\
    \ between two nodes, where each\n   node can control a tunnel endpoint.\n   The\
    \ nodes involved in the framework are:\n   1.  the TSP client\n   2.  the client\
    \ tunnel endpoint\n   3.  the TSP server\n   4.  the server tunnel endpoint\n\
    \   1,3, and 4 form the tunnel broker model [RFC3053], where 3 is the\n   tunnel\
    \ broker and 4 is the tunnel server (Figure 1).  The tunnel\n   broker may control\
    \ one or many tunnel servers.\n   In its simplest model, one node is the client\
    \ configured as a tunnel\n   endpoint (1 and 2 on the same node), and the second\
    \ node is the\n   server configured as the other tunnel endpoint (3 and 4 on the\
    \ same\n   node).  This model is shown in Figure 2:\n                        \
    \      _______________\n                             | TUNNEL BROKER |--> Databases\
    \ (DNS)\n                             |               |\n                    \
    \         |  TSP          |\n                             | SERVER        |\n\
    \                             |_______________|\n                            \
    \     |     |\n            __________           |     |          ________\n  \
    \         |           |         |     |         |        |\n           |   TSP\
    \     |--[TSP]--      +---------|        |\n           |  CLIENT   |         \
    \                | TUNNEL |--[NETWORK]--\n   [HOST]--|           |<==[CONFIGURED\
    \ TUNNEL]==>| SERVER |\n           |___________|                         |   \
    \     |\n                                                 |________|\n       \
    \ Figure 1: Tunnel Setup Protocol Used on Tunnel Broker Model\n            ___________\
    \                           ________\n           |           |               \
    \          |  TSP   |\n           |   TSP     |-----------[TSP]---------| SERVER\
    \ |\n           |  CLIENT   |                         |        |--[NETWORK]--\n\
    \   [HOST]--|           |<==[CONFIGURED TUNNEL]==>| TUNNEL |\n           |___________|\
    \                         | SERVER |\n                                       \
    \          |________|\n        Figure 2: Tunnel Setup Protocol Used on Tunnel\
    \ Server Model\n   From the point of view of an operating system, TSP is implemented\
    \ as\n   a client application that is able to configure network parameters of\n\
    \   the operating system.\n"
- title: 2.1.  NAT Discovery
  contents:
  - "2.1.  NAT Discovery\n   TSP is also used to discover if a NAT is in the path.\
    \  In this\n   discovery mode, the client sends a TSP message over UDP, containing\n\
    \   its tunnel request information (such as its source IPv4 address) to\n   the\
    \ TSP server.  The TSP server compares the IPv4 source address of\n   the packet\
    \ with the address in the TSP message.  If they differ, one\n   or many IPv4 NATs\
    \ are in the path.\n   If an IPv4 NAT is discovered, then IPv6 over UDP-IPv4 tunnel\n\
    \   encapsulation is selected.  Once the TSP signaling is done, the\n   tunnel\
    \ is established over the same UDP channel used for TSP, so the\n   same NAT address-port\
    \ mapping is used for both the TSP session and\n   the IPv6 traffic.  If no IPv4\
    \ NAT is detected in the path by the TSP\n   server, then IPv6 over IPv4 encapsulation\
    \ is used.\n   A keep-alive mechanism is also included to keep the NAT mapping\n\
    \   active.\n   The IPv4 NAT discovery builds the most effective tunnel for all\n\
    \   cases, including in a dynamic situation where the client moves.\n"
- title: 2.2.  Any Encapsulation
  contents:
  - "2.2.  Any Encapsulation\n   TSP is used to negotiate IPv6 over IPv4 tunnels,\
    \ IPv6 over UDP-IPv4\n   tunnels, and IPv4 over IPv6 tunnels.  IPv4 over IPv6\
    \ tunnels is used\n   in the Dual-Stack Transition Mechanism (DSTM) together with\
    \ TSP\n   [DSTM].\n"
- title: 2.3.  Mobility
  contents:
  - "2.3.  Mobility\n   When a node moves to a different IP network (i.e., change\
    \ of its IPv4\n   address when doing IPv6 over IPv4 encapsulation), the TSP client\n\
    \   reconnects automatically to the broker to re-establish the tunnel\n   (keep-alive\
    \ mechanism).  On the IPv6 layer, if the client uses user\n   authentication,\
    \ the same IPv6 address and prefix are kept and re-\n   established, even if the\
    \ IPv4 address or tunnel encapsulation type\n   changes.\n"
- title: 3.  Advantages of TSP
  contents:
  - "3.  Advantages of TSP\n   o  Tunnels established by TSP are static tunnels, which\
    \ are more\n      secure than automated tunnels [RFC3964]; no third-party relay\n\
    \      required.\n   o  Stability of the IP address and prefix, enabling applications\n\
    \      needing stable address to be deployed and used.  For example, when\n  \
    \    tunneling IPv6, there is no dependency on the underlying IPv4\n      address.\n\
    \   o  Prefix assignment supported.  Can use provider address space.\n   o  Signaling\
    \ protocol flexible and extensible (XML, SASL)\n   o  One solution to many encapsulation\
    \ techniques: IPv6 in IPv4, IPv4\n      in IPv6, IPv6 over UDP over IPv4.  Can\
    \ be extended to other\n      encapsulation types, such as IPv6 in IPv6.\n   o\
    \  Discovery of IPv4 NAT in the path, establishing the most optimized\n      tunneling\
    \ technique depending on the discovery.\n"
- title: 4.  Protocol Description
  contents:
  - '4.  Protocol Description

    '
- title: 4.1.  Terminology
  contents:
  - "4.1.  Terminology\n   Tunnel Broker:  In a tunnel broker model, the broker is\
    \ taking charge\n      of all communication between tunnel servers (TSs) and tunnel\n\
    \      clients (TCs).  Tunnel clients query brokers for a tunnel and the\n   \
    \   broker finds a suitable tunnel server, asks the tunnel server to\n      set\
    \ up the tunnel, and sends the tunnel information to the tunnel\n      Client.\n\
    \   Tunnel Server:  Tunnel servers are providing the specific tunnel\n      service\
    \ to a tunnel client.  It can receive the tunnel request\n      from a tunnel\
    \ broker (as in the tunnel broker model) or directly\n      from the tunnel client.\
    \  The tunnel server is the tunnel endpoint.\n   Tunnel Client:  The tunnel client\
    \ is the entity that needs a tunnel\n      for a particular service or connectivity.\
    \  A tunnel client can be\n      either a host or a router.  The tunnel client\
    \ is the other tunnel\n      endpoint.\n   v6v4:  IPv6-over-IPv4 tunnel encapsulation\n\
    \   v6udpv4:  IPv6-over-UDP-over-IPv4 tunnel encapsulation\n   v4v6:  IPv4-over-IPv6\
    \ tunnel encapsulation\n"
- title: 4.2.  Topology
  contents:
  - "4.2.  Topology\n   The following diagrams describe typical TSP scenarios.  The\
    \ goal is\n   to establish a tunnel between tunnel client and tunnel server.\n"
- title: 4.3.  Overview
  contents:
  - "4.3.  Overview\n   The Tunnel Setup Protocol is initiated from a client node\
    \ to a tunnel\n   broker.  The Tunnel Setup Protocol has three phases:\n   Authentication\
    \ phase:  The Authentication phase is when the tunnel\n      broker/server advertises\
    \ its capability to a tunnel client and\n      when a tunnel client authenticate\
    \ to the broker/server.\n   Command phase:  The command phase is where the client\
    \ requests or\n      updates a tunnel.\n   Response phase:  The response phase\
    \ is where the tunnel client\n      receives the request response from the tunnel\
    \ broker/server, and\n      the client accepts or rejects the tunnel offered.\n\
    \   For each command sent by a tunnel client, there is an expected\n   response\
    \ from the server.\n   After the response phase is completed, a tunnel is established\
    \ as\n   requested by the client.  If requested, periodic keep-alive packets\n\
    \   can be sent from the client to the server.\n           tunnel            \
    \                  tunnel\n           client                              broker\n\
    \             +|         Send version              +\n             ||--------------------------------->\
    \ ||\n             ||         Send capabilities         ||\n             ||<---------------------------------\
    \ +| Authentication\n             ||         SASL authentication       || phase\n\
    \             ||<--------------------------------> ||\n    TSP      ||       \
    \  Authentication OK         ||\n    signaling||<---------------------------------\
    \ +\n             ||         Tunnel request            || Command\n          \
    \   ||---------------------------------> || phase\n             ||         Tunnel\
    \ response           +\n             ||<--------------------------------- || Response\n\
    \             ||         Tunnel acknowledge        || phase\n             ||--------------------------------->\
    \ +\n             +|                                   |\n             ||    \
    \     Tunnel established        |\n    Data     ||===================================|\n\
    \    phase    ||                                   |\n             +|        \
    \   (keep-alive)            |\n                 Figure 3: Tunnel Setup Protocol\
    \ Exchange\n"
- title: 4.4.  TSP Signaling
  contents:
  - "4.4.  TSP Signaling\n   The following sections describe in detail the TSP and\
    \ the different\n   phases in the TSP signaling.\n"
- title: 4.4.1.  Signaling Transport
  contents:
  - "4.4.1.  Signaling Transport\n   TSP signaling can be transported over TCP or\
    \ UDP, and over IPv4 or\n   IPv6.  The tunnel client selects the transport according\
    \ to the\n   tunnel encapsulation being requested.  Figure 4 shows the transport\n\
    \   used for TSP signaling with possible tunnel encapsulation requested.\n   TSP\
    \ signaling over UDP/v4 MUST be used if a v6 over UDP over IPv4\n   (v6udpv4)\
    \ tunnel is to be requested (e.g., for NAT traversal).\n       Tunnel\n      \
    \ Encapsulation   Valid       Valid\n       Requested       Transport   Address\
    \ family\n       ------------------------------------------\n       v6anyv4  \
    \       TCP UDP     IPv4\n       v6v4            TCP UDP     IPv4\n       v6udpv4\
    \             UDP     IPv4\n       v4v6            TCP UDP     IPv6\n        \
    \             Figure 4: TSP Signaling Transport\n   Note that the TSP framework\
    \ allows for other type of encapsulation to\n   be defined, such as IPv6 over\
    \ Generic Routing Encapsulation (GRE) or\n   IPv6 over IPv6.\n"
- title: 4.4.1.1.  TSP Signaling over TCP
  contents:
  - "4.4.1.1.  TSP Signaling over TCP\n   TSP over TCP is sent over port number 3653\
    \ (IANA assigned).  TSP data\n   used during signaling is detailed in the next\
    \ sections.\n                      +------+-----------+----------+\n         \
    \             |  IP  | TCP       | TSP data |\n                      |      |\
    \ port 3653 |          |\n                      +------+-----------+----------+\n\
    \                      where IP is IPv4 or IPv6\n            Figure 5: Tunnel\
    \ Setup Protocol Packet Format (TCP)\n"
- title: 4.4.1.2.  TSP Signaling over UDP/v4
  contents:
  - "4.4.1.2.  TSP Signaling over UDP/v4\n   While TCP provides the connection-oriented\
    \ and reliable data delivery\n   features required during the TSP signaling session,\
    \ UDP does not\n   offer any reliability.  This reliability is added inside the\
    \ TSP\n   session as an extra header at the beginning of the UDP payload.\n  \
    \                 +------+-----------+------------+----------+\n             \
    \      | IPv4 | UDP       | TSP header | TSP data |\n                   |    \
    \  | port 3653 |            |          |\n                   +------+-----------+------------+----------+\n\
    \            Figure 6: Tunnel Setup Protocol Packet Format (UDP)\n   The algorithm\
    \ used to add reliability to TSP packets sent over UDP is\n   described in Section\
    \ 22.5 of [UNP].\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  0xF  |                 Sequence Number                       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Timestamp                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                            TSP data                           |\n    \
    \ ...\n                   Figure 7: TSP Header for Reliable UDP\n      The 4-bit\
    \ field (0-3) is set to 0xF.  This marker is used by the\n      tunnel broker\
    \ to identify a TSP signaling packet that is sent\n      after an IPv6 over UDP\
    \ is established.  This is explained in\n      Section 4.5.2\n   Sequence Number:\
    \  28-bit field.  Set by the tunnel client.  Value is\n      increased by one\
    \ for every new packet sent to the tunnel broker.\n      The return packet from\
    \ the broker contains the unaltered sequence\n      number.\n   Timestamp:  32-bit\
    \ field.  Set by the tunnel client.  Generated from\n      the client local-time\
    \ value.  The return packet from the broker\n      contains the unaltered timestamp.\n\
    \   TSP data:  Same as in the TCP/v4 case.  Content described in later\n     \
    \ sections.\n   The TSP client builds its UDP packet as described above and sends\
    \ it\n   to the tunnel broker.  When the tunnel broker responds, the same\n  \
    \ values for the sequence number and timestamp MUST be sent back to the\n   client.\
    \  The TSP client can use the timestamp to determine the\n   retransmission timeout\
    \ (current time minus the packet timestamp).\n   The client SHOULD retransmit\
    \ the packet when the retransmission\n   timeout is reached.  The retransmitted\
    \ packet MUST use the same\n   sequence number as the original packet so that\
    \ the server can detect\n   duplicate packets.  The client SHOULD use exponential\
    \ backoff when\n   retransmitting packets to avoid network congestion.\n"
- title: 4.4.2.  Authentication Phase
  contents:
  - "4.4.2.  Authentication Phase\n   The authentication phase has 3 steps:\n   o\
    \  Client's protocol version identification\n   o  Server's capability advertisement\n\
    \   o  Client authentication\n   When a TCP or UDP session is established to a\
    \ tunnel broker, the\n   tunnel client sends the current protocol version it is\
    \ supporting.\n   The version number syntax is:\n      VERSION=2.0.0 CR LF\n \
    \  Version 2.0.0 is the version number of this specification.  Version\n   1.0.0\
    \ was defined in earlier documents.\n   If the server doesn't support the protocol\
    \ version, it sends an error\n   message and closes the session.  The server can\
    \ optionally send a\n   server list that may support the protocol version of the\
    \ client.\n   Example of an unsupported client version (without a server list):\n\
    \         -- Successful TCP Connection --\n         C:VERSION=0.1 CR LF\n    \
    \     S:302 Unsupported client version CR LF\n         -- Connection closed --\n\
    \              Figure 8: Example of Unsupported Client Version\n   Example of\
    \ a version not supported (with a server list):\n         -- Successful TCP Connection\
    \ --\n         C:VERSION=1.1 CR LF\n         S:1302 Unsupported client version\
    \ CR LF\n           <tunnel action=\"list\" type=\"broker\">\n              <broker>\n\
    \                 <address type=\"ipv4\">1.2.3.4</address>\n              </broker>\n\
    \              <broker>\n                 <address type=\"dn\">ts1.isp1.com</address>\n\
    \              </broker>\n           </tunnel>\n         -- Connection closed\
    \ --\n       Figure 9: Example of Unsupported Client Version, with Server\n  \
    \                              Redirection\n   If the server supports the version\
    \ sent by the client, then the\n   server sends a list of the capabilities supported\
    \ for authentication\n   and tunnels.\n      CAPABILITY TUNNEL=V6V4 TUNNEL=V6UDPV4\
    \ AUTH=ANONYMOUS AUTH=PLAIN\n      AUTH=DIGEST-MD5 CR LF\n   Tunnel types must\
    \ be registered with IANA and their profiles are\n   defined in Section 7.  Authentication\
    \ is done using SASL [RFC4422].\n   Each authentication mechanism should be a\
    \ registered SASL mechanism.\n   Description of such mechanisms is not in the\
    \ scope of this document.\n   The tunnel client can then choose to close the session\
    \ if none of the\n   capabilities fit its needs.  If the tunnel client chooses\
    \ to\n   continue, it authenticates to the server using one of the advertised\n\
    \   mechanisms using SASL.  If the authentication fails, the server sends\n  \
    \ an error message and closes the session.\n   The example in Figure 10 shows\
    \ a failed authentication where the\n   tunnel client requests an anonymous authentication\
    \ that is not\n   supported by the server.\n   Note that linebreaks and indentation\
    \ within a \"C:\" or \"S:\" are\n   editorial and not part of the protocol.\n\
    \   -- Successful TCP Connection --\n   C:VERSION=2.0.0 CR LF\n   S:CAPABILITY\
    \ TUNNEL=V6V4 AUTH=DIGEST-MD5 CR LF\n   C:AUTHENTICATE ANONYMOUS CR LF\n   S:300\
    \ Authentication failed CR LF\n                Figure 10: Example of Failed Authentication\n\
    \   Figure 11 shows a successful anonymous authentication.\n   -- Successful TCP\
    \ Connection --\n   C:VERSION=2.0.0 CR LF\n   S:CAPABILITY TUNNEL=V6V4 TUNNEL=V6UDPV4\
    \ AUTH=ANONYMOUS AUTH=PLAIN\n     AUTH=DIGEST-MD5 CR LF\n   C:AUTHENTICATE ANONYMOUS\
    \ CR LF\n   S:200 Success CR LF\n              Figure 11: Successful Anonymous\
    \ Authentication\n   Digest-MD5 authentication with SASL follows [RFC2831].  Figure\
    \ 12\n   shows a successful digest-MD5 SASL authentication.\n   -- Successful\
    \ TCP Connection --\n   C:VERSION=2.0.0 CR LF\n   S:CAPABILITY TUNNEL=V6V4 TUNNEL=V6UDPV4\
    \ AUTH=ANONYMOUS AUTH=PLAIN\n     AUTH=DIGEST-MD5 CR LF\n   C:AUTHENTICATE DIGEST-MD5\
    \ CR LF\n   S:cmVhbG09aGV4b3Msbm9uY2U9MTExMzkwODk2OCxxb3A9YXV0aCxhbGdvcml0aG09bWQ\n\
    \     1LXNlc3MsY2hhcnNldD11dGY4\n   C:Y2hhcnNldD11dGY4LHVzZXJuYW1lPSJ1c2VybmFtZTEiLHJlYWxtPSJoZXhvcyIsbm9\n\
    \     uY2U9IjExMTM5MDg5NjgiLG5jPTAwMDAwMDAxLGNub25jZT0iMTExMzkyMzMxMSIsZG\n  \
    \   lnZXN0LXVyaT0idHNwL2hleG9zIixyZXNwb25zZT1mOGU0MmIzYzUwYzU5NzcxODUzZ\n    \
    \ jYyNzRmY2ZmZDFjYSxxb3A9YXV0aA==\n   S:cnNwYXV0aD03MGQ1Y2FiYzkyMzU1NjhiZTM4MGJhMmM5MDczODFmZQ==\n\
    \   S:200 Success CR LF\n              Figure 12: Successful Digest-MD5 Authentication\n\
    \   The base64-decoded version of the SASL exchange is:\n   S:realm=\"hexos\"\
    ,nonce=\"1113908968\",qop=\"auth\",algorithm=md5-sess,\n     charset=utf8\n  \
    \ C:charset=utf8,username=\"username1\",realm=\"hexos\",nonce=\"1113908968\",\n\
    \     nc=00000001,cnonce=\"1113923311\",digest-uri=\"tsp/hexos\",\n     response=f8e42b3c50c59771853f6274fcffd1ca,qop=auth\n\
    \   S:rspauth=70d5cabc9235568be380ba2c907381fe\n   Once the authentication succeeds,\
    \ the server sends a success return\n   code and the protocol enters the Command\
    \ phase.\n"
- title: 4.4.3.  Command and Response Phase
  contents:
  - "4.4.3.  Command and Response Phase\n   The Command phase is where the tunnel\
    \ client sends a tunnel request\n   or a tunnel update to the server.  In this\
    \ phase, commands are sent\n   as XML messages.  The first line is a \"Content-length\"\
    \ directive that\n   indicates the size of the following XML message.  When the\
    \ server\n   sends a response, the first line is the \"Content-length\" directive,\n\
    \   the second is the return code, and third one is the XML message, if\n   any.\
    \  The \"Content-length\" is calculated from the first character of\n   the return\
    \ code line to the last character of the XML message,\n   inclusively.\n   Spaces\
    \ can be inserted freely.\n         -- UDP session established --\n         C:VERSION=2.0.0\
    \ CR LF\n         S:CAPABILITY TUNNEL=V6V4 TUNNEL=V6UDPV4 AUTH=ANONYMOUS\n   \
    \        AUTH=PLAIN AUTH=DIGEST-MD5 CR LF\n         C:AUTHENTICATE ANONYMOUS CR\
    \ LF\n         S:200 Success CR LF\n         C:Content-length: 205 CR LF\n   \
    \      <tunnel action=\"create\" type=\"v6udpv4\">\n          <client>\n     \
    \      <address type=\"ipv4\">192.0.2.135</address>\n         <keepalive interval=\"\
    30\"></keepalive>\n         </client>\n         </tunnel> CR LF\n         S:Content-length:\
    \ 501 CR LF\n         200 Success CR LF\n         <tunnel action=\"info\" type=\"\
    v6udpv4\" lifetime=\"604800\">\n           <server>\n             <address type=\"\
    ipv4\">192.0.2.115</address>\n             <address type=\"ipv6\">\n         \
    \    2001:db8:8000:0000:0000:0000:0000:38b2\n             </address>\n       \
    \    </server>\n           <client>\n             <address type=\"ipv4\">192.0.2.135</address>\n\
    \             <address type=\"ipv6\">\n             2001:db8:8000:0000:0000:0000:0000:38b3\n\
    \             </address>\n             <keepalive interval=\"30\">\n         \
    \      <address type=\"ipv6\">\n               2001:db8:8000:0000:0000:0000:0000:38b2\n\
    \               </address>\n             </keepalive>\n           </client>\n\
    \         </tunnel> CR LF\n         C:Content-length: 35 CR LF\n         <tunnel\
    \ action=\"accept\"></tunnel> CR LF\n             Figure 13: Example of a Command/Response\
    \ Sequence\n   The example in Figure 13 shows a client requesting an anonymous\n\
    \   v6udpv4 tunnel, indicating that a keep-alive packet will be sent\n   every\
    \ 30 seconds.  The tunnel broker responds with the tunnel\n   parameters and indicates\
    \ its acceptance of the keep-alive period\n   (Section 4.6).  Finally, the client\
    \ sends an accept message to the\n   server.\n   Once the accept message has been\
    \ sent, the server and client\n   configure their tunnel endpoint based on the\
    \ negotiated tunnel\n   parameters.\n"
- title: 4.5.  Tunnel Establishment
  contents:
  - '4.5.  Tunnel Establishment

    '
- title: 4.5.1.  IPv6-over-IPv4 Tunnels
  contents:
  - "4.5.1.  IPv6-over-IPv4 Tunnels\n   Once the TSP signaling is complete, a tunnel\
    \ can be established on\n   the tunnel server and client node.  If a v6v4 tunnel\
    \ has been\n   negotiated, then an IPv6-over-IPv4 tunnel [RFC4213] is established\n\
    \   using the operating system tunneling interface.  On the client node,\n   this\
    \ is accomplished by the TSP client calling the appropriate OS\n   commands or\
    \ system calls.\n"
- title: 4.5.2.  IPv6-over-UDP Tunnels
  contents:
  - "4.5.2.  IPv6-over-UDP Tunnels\n   If a v6udpv4 tunnel is configured, the same\
    \ source/destination\n   address and port used during the TSP signaling are used\
    \ to configure\n   the v6udpv4 tunnel.  If a NAT is in the path between the TSP\
    \ client\n   and the tunnel broker, the TSP signaling session will have created\
    \ a\n   UDP state in the NAT.  By reusing the same UDP socket parameters to\n\
    \   transport IPv6, the traffic will flow across the NAT using the same\n   state.\n\
    \                   +------+-----------+--------+\n                   | IPv4 |\
    \ UDP       |  IPv6  |\n                   | hdr. | port 3653 |        |\n   \
    \                +------+-----------+--------+\n                    Figure 14:\
    \ IPv6 Transport over UDP\n   At any time, a client may re-establish a TSP signaling\
    \ session.  The\n   client disconnects the current tunnel and starts a new TSP\
    \ signaling\n   session as described in Section 4.4.1.2.  If a NAT is present\
    \ and the\n   new TSP session uses the same UDP mapping in the NAT as for the\n\
    \   tunnel, the tunnel broker will need to disconnect the client tunnel\n   before\
    \ the client can establish a new TSP session.\n"
- title: 4.6.  Tunnel Keep-Alive
  contents:
  - "4.6.  Tunnel Keep-Alive\n   A TSP client may select to send periodic keep-alive\
    \ messages to the\n   server in order to maintain its tunnel connectivity.  This\
    \ allows the\n   client to detect network changes and enable automatic tunnel\n\
    \   re-establishment.  In the case of IPv6-over-UDP tunnels, periodic\n   keep-alive\
    \ messages can help refresh the connection state in a NAT if\n   such a device\
    \ is in the tunnel path.\n   For IPv6-over-IPv4 and IPv6-over-UDP tunnels, the\
    \ keep-alive message\n   is an ICMPv6 echo request [RFC4443] sent from the client\
    \ to the\n   tunnel server.  The IPv6 destination address of the echo message\
    \ MUST\n   be the address from the 'keepalive' element sent in the tunnel\n  \
    \ response during the TSP signaling (Section 4.4.3).  The echo message\n   is\
    \ sent over the configured tunnel.\n   The tunnel server responds to the ICMPv6\
    \ echo requests and can keep\n   track of which tunnel is active.  Any client\
    \ traffic can also be used\n   to verify if the tunnel is active.  This can be\
    \ used by the broker to\n   disconnect tunnels that are no longer in use.\n  \
    \ The broker can send a different keep-alive interval from the value\n   specified\
    \ in the client request.  The client MUST conform to the\n   broker-specified\
    \ keep-alive interval.  The client SHOULD apply a\n   random \"jitter\" value\
    \ to avoid synchronization of keep-alive messages\n   from many clients to the\
    \ server [FJ93].  This is achieved by using an\n   interval value in the range\
    \ of [0.75T - T], where T is the keep-alive\n   interval specified by the server.\n"
- title: 4.7.  XML Messaging
  contents:
  - "4.7.  XML Messaging\n   This section describes the XML messaging used in the\
    \ TSP signaling\n   during the command and response phase.  The XML elements and\n\
    \   attributes are listed in the DTD (Appendix A).\n"
- title: 4.7.1.  Tunnel
  contents:
  - "4.7.1.  Tunnel\n   The client and server use the tunnel token with an action\
    \ attribute.\n   Valid actions for this profile are: 'create', 'delete', 'info',\n\
    \   'accept', and 'reject'.\n   create:  action used to request a new tunnel or\
    \ update an existing\n      tunnel.  Sent by the tunnel client.\n   delete:  action\
    \ used to remove an existing tunnel from the server.\n      Sent by the tunnel\
    \ client.\n   info:  action used to request current properties of an existing\n\
    \      tunnel.  This action is also used by the tunnel broker to send\n      tunnel\
    \ parameters following a client 'create' action.\n   accept:  action used by the\
    \ client to acknowledge the server that the\n      tunnel parameters are accepted.\
    \  The client will establish a\n      tunnel.\n   reject:  action used by the\
    \ client to signal the server that the\n      tunnel parameters offered are rejected\
    \ and no tunnel will be\n      established.\n   The tunnel 'lifetime' attribute\
    \ is set by the tunnel broker and\n   specifies the lifetime of the tunnel in\
    \ minutes.  The lifetime is an\n   administratively set value.  When a tunnel\
    \ lifetime has expired, it\n   is disconnected on the tunnel server.\n   The 'tunnel'\
    \ message contains three elements:\n   <client>:   Client's information\n   <server>:\
    \   Server's information\n   <broker>:   List of other servers\n"
- title: 4.7.2.  Client Element
  contents:
  - "4.7.2.  Client Element\n   The 'client' element contains 3 sub-elements: 'address',\
    \ 'router',\n   and 'keepalive'.  These elements are used to describe the client\n\
    \   request and will be used by the server to create the appropriate\n   tunnel.\
    \  The client element is the only element sent by a client.\n   The 'address'\
    \ element is used to identify the client IP endpoint of\n   the tunnel.  When\
    \ tunneling over IPv4, the client MUST send only its\n   IPv4 address to the server.\
    \  When tunneling over IPv6, the client\n   MUST only send its IPv6 address to\
    \ the server.\n   The broker then returns the assigned IPv6 or IPv4 address endpoint\n\
    \   and domain name inside the 'client' element when the tunnel is\n   created\
    \ or updated.  If supported by the broker, the 'client' element\n   MAY contain\
    \ the registered DNS name for the address endpoint assigned\n   to the client.\n\
    \   Optionally, a client MAY send a 'router' element to ask for a prefix\n   delegation.\n\
    \   Optionally, a client MAY send a 'keepalive' element that contains the\n  \
    \ keep-alive time interval requested by the client.\n"
- title: 4.7.3.  Server Element
  contents:
  - "4.7.3.  Server Element\n   The 'server' element contains two elements: 'address'\
    \ and 'router'.\n   These elements are used to describe the server's tunnel endpoint.\n\
    \   The 'address' element is used to provide both IPv4 and IPv6 addresses\n  \
    \ of the server's tunnel endpoint, while the 'router' element provides\n   information\
    \ for the routing method chosen by the client.\n"
- title: 4.7.4.  Broker Element
  contents:
  - "4.7.4.  Broker Element\n   The 'broker' element is used by a tunnel broker to\
    \ provide an\n   alternate list of brokers to a client in the case where the server\
    \ is\n   not able to provide the requested tunnel.\n   The 'broker' element contains\
    \ an 'address' element or a series of\n   'address' elements.\n"
- title: 5.  Tunnel Request Examples
  contents:
  - "5.  Tunnel Request Examples\n   This section presents multiple examples of requests.\n"
- title: 5.1.  Host Tunnel Request and Reply
  contents:
  - "5.1.  Host Tunnel Request and Reply\n   A simple tunnel request consist of a\
    \ 'tunnel' element that contains\n   only an 'address' element.  The tunnel action\
    \ is 'create', specifying\n   a 'v6v4' tunnel encapsulation type.  The response\
    \ sent by the tunnel\n   broker is an 'info' action.  Note that the registered\
    \ Fully-Qualified\n   Domain Name (FQDN) of the assigned client IPv6 address is\
    \ also\n   returned to the tunnel client.\n         -- Successful TCP Connection\
    \ --\n         C:VERSION=2.0.0 CR LF\n         S:CAPABILITY TUNNEL=V6V4 AUTH=ANONYMOUS\
    \ CR LF\n         C:AUTHENTICATE ANONYMOUS CR LF\n         S:200 Authentication\
    \ successful CR LF\n         C:Content-length: 123 CR LF\n           <tunnel action=\"\
    create\" type=\"v6v4\">\n              <client>\n                  <address type=\"\
    ipv4\">1.1.1.1</address>\n              </client>\n           </tunnel> CR LF\n\
    \         S: Content-length: 234 CR LF\n            200 OK CR LF\n           \
    \ <tunnel action=\"info\" type=\"v6v4\" lifetime=\"1440\">\n              <server>\n\
    \                 <address type=\"ipv4\">192.0.2.114</address>\n             \
    \    <address type=\"ipv6\">\n                 2001:db8:c18:ffff:0000:0000:0000:0000\n\
    \                 </address>\n              </server>\n              <client>\n\
    \                 <address type=\"ipv4\">1.1.1.1</address>\n                 <address\
    \ type=\"ipv6\">\n                 2001:db8:c18:ffff::0000:0000:0000:0001\n  \
    \               </address>\n                 <address type=\"dn\">userid.domain</address>\n\
    \              </client>\n            </tunnel> CR LF\n         C: Content-length:\
    \ 35 CR LF\n            <tunnel action=\"accept\"></tunnel> CR LF\n          \
    \   Figure 15: Simple Tunnel Request Made by a Client\n"
- title: 5.2.  Router Tunnel Request with a /48 Prefix Delegation and Reply
  contents:
  - "5.2.  Router Tunnel Request with a /48 Prefix Delegation and Reply\n   A tunnel\
    \ request with a prefix consists of a 'tunnel' element that\n   contains an 'address'\
    \ element and a 'router' element.  The 'router'\n   element also contains the\
    \ 'dns_server' element that is used to\n   request a DNS delegation of the assigned\
    \ IPv6 prefix.  The\n   'dns_server' element lists the IP address of the DNS servers\
    \ to be\n   registered for the reverse-mapping zone.\n   Tunnel request with prefix\
    \ and static routes.\n   C: Content-length: 234 CR LF\n      <tunnel action=\"\
    create\" type=\"v6v4\">\n       <client>\n        <address type=\"ipv4\">192.0.2.9</address>\n\
    \        <router>\n         <prefix length=\"48\"/>\n         <dns_server>\n \
    \         <address type=\"ipv4\">192.0.2.5</address>\n          <address type=\"\
    ipv4\">192.0.2.4</address>\n          <address type=\"ipv6\">2001:db8::1</address>\n\
    \         </dns_server>\n        </router>\n       </client>\n      </tunnel>\
    \ CR LF\n   S: Content-length: 234 CR LF\n      200 OK CR LF\n      <tunnel action=\"\
    info\" type=\"v6v4\" lifetime=\"1440\">\n       <server>\n        <address type=\"\
    ipv4\">192.0.2.114</address>\n        <address type=\"ipv6\">\n        2001:db8:c18:ffff:0000:0000:0000:0000\n\
    \        </address>\n       </server>\n       <client>\n        <address type=\"\
    ipv4\">192.0.2.9</address>\n        <address type=\"ipv6\">\n        2001:db8:c18:ffff::0000:0000:0000:0001\n\
    \        </address>\n        <address type=\"dn\">userid.domain</address>\n  \
    \      <router>\n         <prefix length=\"48\">2001:db8:c18:1234::</prefix>\n\
    \         <dns_server>\n          <address type=\"ipv4\">192.0.2.5</address>\n\
    \          <address type=\"ipv4\">192.0.2.4</address>\n          <address type=\"\
    ipv6\">2001:db8::1</address>\n         </dns_server>\n        </router>\n    \
    \   </client>\n      </tunnel> CR LF\n   C: Content-length: 35 CR LF\n      <tunnel\
    \ action=\"accept\"></tunnel> CR LF\n         Figure 16: Tunnel Request with Prefix\
    \ and DNS Delegation\n"
- title: 5.3.  IPv4 over IPv6 Tunnel Request
  contents:
  - "5.3.  IPv4 over IPv6 Tunnel Request\n   This is similar to the previous 'create'\
    \ action, but with the tunnel\n   type is set to 'v4v6'.\n             -- Successful\
    \ TCP Connection --\n             C:VERSION=1.0 CR LF\n             S:CAPABILITY\
    \ TUNNEL=V4V6 AUTH=DIGEST-MD5 AUTH=ANONYMOUS\n               CR LF\n         \
    \    C:AUTHENTICATE ANONYMOUS CR LF\n             S:OK Authentication successful\
    \ CR LF\n             C:Content-length: 228 CR LF\n               <tunnel action=\"\
    create\" type=\"v4v6\">\n                  <client>\n                      <address\
    \ type=\"ipv6\">\n                      2001:db8:0c18:ffff:0000:0000:0000:0001\n\
    \                      </address>\n                  </client>\n             \
    \  </tunnel> CR LF\n             Figure 17: Simple Tunnel Request Made by a Client\n\
    \   If the allocation request is accepted, the broker will acknowledge\n   the\
    \ allocation to the client by sending a 'tunnel' element with the\n   attribute\
    \ 'action' set to 'info', 'type' set to 'v4v6' and the\n   'lifetime' attribute\
    \ set to the period of validity or lease time of\n   the allocation.  The 'tunnel'\
    \ element contains 'server' and 'client'\n   elements.\n             S: Content-length:\
    \ 370 CR LF\n                200 OK CR LF\n                <tunnel action=\"info\"\
    \ type=\"v4v6\" lifetime=\"1440\">\n                  <server>\n             \
    \        <address type=\"ipv4\" length=\"30\">\n                     192.0.2.2\n\
    \                     </address>\n                     <address type=\"ipv6\"\
    >\n                     2001:db8:c18:ffff:0000:0000:0000:0002\n              \
    \       </address>\n                  </server>\n                  <client>\n\
    \                     <address type=\"ipv4\" length=\"30\">\n                \
    \     192.0.2.1\n                     </address>\n                     <address\
    \ type=\"ipv6\">\n                     2001:db8:c18:ffff::0000:0000:0000:0001\n\
    \                     </address>\n                  </client>\n              \
    \  </tunnel> CR LF\n                 Figure 18: IPv4 over IPv6 Tunnel Response\n\
    \   In DSTM [DSTM] terminology, the DSTM server is the TSP broker and the\n  \
    \ Tunnel Endpoint (TEP) is the tunnel server.\n"
- title: 5.4.  NAT Traversal Tunnel Request
  contents:
  - "5.4.  NAT Traversal Tunnel Request\n   When a client is capable of both IPv6\
    \ over IPv4 and IPv6 over UDP\n   over IPv4 encapsulation, it can request the\
    \ broker, by using the\n   \"v6anyv4\" tunnel mode, to determine if it is behind\
    \ a NAT and to send\n   the appropriate tunnel encapsulation mode as part of the\
    \ response.\n   The client can also explicitly request an IPv6 over UDP over IPv4\n\
    \   tunnel by specifying \"v6udpv4\" in its request.\n   In the following example,\
    \ the client informs the broker that it\n   requests to send keep-alives every\
    \ 30 seconds.  In its response, the\n   broker accepted the client-suggested keep-alive\
    \ interval, and the\n   IPv6 destination address for the keep-alive packets is\
    \ specified.\n     C:VERSION=2.0.0 CR LF\n     S:CAPABILITY TUNNEL=V6V4 TUNNEL=V6UDPV4\
    \ AUTH=DIGEST-MD5 CR LF\n     C:AUTHENTICATE ... CR LF\n     S:200 Authentication\
    \ successful CR LF\n     C:Content-length: ... CR LF\n       <tunnel action=\"\
    create\" type=\"v6anyv4\">\n          <client>\n              <address type=\"\
    ipv4\">10.1.1.1</address>\n              <keepalive interval=\"30\"></keepalive>\n\
    \          </client>\n       </tunnel> CR LF\n     S: Content-length: ... CR LF\n\
    \        200 OK CR LF\n        <tunnel action=\"info\" type=\"v6udpv4\" lifetime=\"\
    1440\">\n          <server>\n             <address type=\"ipv4\">192.0.2.114</address>\n\
    \             <address type=\"ipv6\">\n             2001:db8:c18:ffff:0000:0000:0000:0002\n\
    \             </address>\n          </server>\n          <client>\n          \
    \   <address type=\"ipv4\">10.1.1.1</address>\n             <address type=\"ipv6\"\
    >\n             2001:db8:c18:ffff::0000:0000:0000:0003\n             </address>\n\
    \             <keepalive interval=\"30\">\n                <address type=\"ipv6\"\
    >\n                2001:db8:c18:ffff:0000:0000:0000:0002\n                </address>\n\
    \             </keepalive>\n          </client>\n        </tunnel> CR LF\n   \
    \            Figure 19: Tunnel Request Using v6anyv4 Mode\n"
- title: 6.  Applicability of TSP in Different Networks
  contents:
  - "6.  Applicability of TSP in Different Networks\n   This section describes the\
    \ applicability of TSP in different\n   networks.\n"
- title: 6.1.  Provider Networks with Enterprise Customers
  contents:
  - "6.1.  Provider Networks with Enterprise Customers\n   In a provider network where\
    \ IPv4 is dominant, a tunneled\n   infrastructure can be used to provide IPv6\
    \ services to the enterprise\n   customers, before a full IPv6 native infrastructure\
    \ is built.  In\n   order to start deploying in a controlled manner and to give\n\
    \   enterprise customers a prefix, the TSP framework is used.  The TSP\n   server\
    \ can be in the core, in the aggregation points or in the Points\n   of Presence\
    \ (PoPs) to offer the service to the customers.  IPv6 over\n   IPv4 encapsulation\
    \ can be used.  If the customers are behind an IPv4\n   NAT, then IPv6 over UDP-IPv4\
    \ encapsulation can be used.  TSP can be\n   used in combination with other techniques.\n"
- title: 6.2.  Provider Networks with Home/Small Office Customers
  contents:
  - "6.2.  Provider Networks with Home/Small Office Customers\n   In a provider network\
    \ where IPv4 is dominant, a tunneled\n   infrastructure can be used to provide\
    \ IPv6 services to the home/small\n   office customers, before a full IPv6 native\
    \ infrastructure is built.\n   The small networks such as Home/Small offices have\
    \ a non-upgradable\n   gateway with NAT.  TSP with NAT traversal is used to offer\
    \ IPv6\n   connectivity and a prefix to the internal network.\n   Automation of\
    \ the prefix assignment and DNS delegation, done by TSP,\n   is a very important\
    \ feature for a provider in order to substantially\n   decrease support costs.\
    \  The provider can use the same\n   Authentication, Authorization, and Accounting\
    \ (AAA) database that is\n   used to authenticate the IPv4 broadband users.  Customers\
    \ can deploy\n   home IPv6 networks without any intervention of the provider support\n\
    \   people.\n   With the NAT discovery function of TSP, providers can use the\
    \ same\n   TSP infrastructure for both NAT and non-NAT parts of the network.\n"
- title: 6.3.  Enterprise Networks
  contents:
  - "6.3.  Enterprise Networks\n   In an enterprise network where IPv4 is dominant,\
    \ a tunneled\n   infrastructure can be used to provide IPv6 services to the IPv6\n\
    \   islands (hosts or networks) inside the enterprise, before a full IPv6\n  \
    \ native infrastructure is built [RFC4057].  TSP can be used to give\n   IPv6\
    \ connectivity, prefix, and routing for the islands.  This gives\n   the enterprise\
    \ a fully controlled deployment of IPv6 while\n   maintaining automation and permanence\
    \ of the IPv6 assignments to the\n   islands.\n"
- title: 6.4.  Wireless Networks
  contents:
  - "6.4.  Wireless Networks\n   In a wireless network where IPv4 is dominant, hosts\
    \ and networks move\n   and change IPv4 address.  TSP enables the automatic re-establishment\n\
    \   of the tunnel when the IPv4 address changes.\n   In a wireless network where\
    \ IPv6 is dominant, hosts and networks\n   move.  TSP enables the automatic re-establishment\
    \ of the IPv4 over\n   IPv6 tunnel.\n"
- title: 6.5.  Unmanaged Networks
  contents:
  - "6.5.  Unmanaged Networks\n   An unmanaged network is where no network manager\
    \ or staff is\n   available to configure network devices [RFC3904].  TSP is\n\
    \   particularly useful in this context where automation of all necessary\n  \
    \ information for the IPv6 connectivity is handled by TSP: tunnel\n   endpoint\
    \ parameters, prefix assignment, DNS delegation, and routing.\n   An unmanaged\
    \ network may (or may not) be behind a NAT.  With the NAT\n   discovery function,\
    \ TSP works automatically in both cases.\n"
- title: 6.6.  Mobile Hosts and Mobile Networks
  contents:
  - "6.6.  Mobile Hosts and Mobile Networks\n   Mobile hosts are common and used.\
    \  Laptops moving from wireless,\n   wired in an office, home, etc., are examples.\
    \  They often have IPv4\n   connectivity, but not necessarily IPv6.  The TSP framework\
    \ enables\n   the mobile hosts to have IPv6 connectivity wherever they are, by\n\
    \   having the TSP client send updated information of the new environment\n  \
    \ to the TSP server, when a change occurs.  Together with NAT discovery\n   and\
    \ traversal, the mobile host can always be IPv6 connected wherever\n   it is.\n\
    \   Mobile here means only the change of IPv4 address.  Mobile-IP\n   mechanisms\
    \ and fast hand-off take care of additional constraints in\n   mobile environments.\n\
    \   Mobile networks share the applicability of the mobile hosts.\n   Moreover,\
    \ in the TSP framework, they also keep their prefix\n   assignment and can control\
    \ the routing.  NAT discovery can also be\n   used.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   A tunnel type registry has been created by IANA.\
    \  The following\n   strings are defined in this document:\n   o  \"v6v4\" for\
    \ IPv6 in IPv4 encapsulation (using IPv4 protocol 41)\n   o  \"v6udpv4\" for IPv6\
    \ in UDP in IPv4 encapsulation\n   o  \"v6anyv4\" for IPv6 in IPv4 or IPv6 in\
    \ UDP in IPv4 encapsulation\n   o  \"v4v6\" for IPv4 in IPv6 encapsulation\n \
    \  Registration of a new tunnel type can be obtained on a first come,\n   first\
    \ served policy [RFC5226].  A new registration should provide a\n   point of contact,\
    \ the tunnel type string, and a brief description on\n   the applicability.\n\
    \   IANA assigned 3653 as the TSP port number.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Authentication of the TSP session uses the SASL\
    \ [RFC4422] framework,\n   where the authentication mechanism is negotiated between\
    \ the client\n   and the server.  The framework uses the level of authentication\n\
    \   needed for securing the session, based on the policies.\n   Static tunnels\
    \ are created when the TSP negotiation is terminated.\n   Static tunnels are not\
    \ open gateways and exhibit less security issues\n   than automated tunnels. \
    \ Static IPv6 in IPv4 tunnel security\n   considerations are described in [RFC4213].\n\
    \   In order to help ensure that the traffic is traceable to its correct\n   source\
    \ network, a tunnel server implementation should allow ingress\n   filtering on\
    \ the user tunnel [RFC3704].\n   A customer A behind a NAT can use a large number\
    \ of (private) IPv4\n   addresses and/or source ports and request multiple v6udpv4\
    \ tunnels.\n   That would quickly saturate the tunnel server capacity.  The tunnel\n\
    \   broker implementation should offer a way to throttle and limit the\n   number\
    \ of tunnel established to the same IPv4 address.\n"
- title: 9.  Conclusion
  contents:
  - "9.  Conclusion\n   The Tunnel Setup Protocol (TSP) is applicable in many environments,\n\
    \   such as: providers, enterprises, wireless, unmanaged networks, mobile\n  \
    \ hosts, and networks.  TSP gives the two tunnel endpoints the ability\n   to\
    \ negotiate tunnel parameters, as well as prefix assignment, DNS\n   delegation\
    \ and routing in an authenticated session.  It also provides\n   an IPv4 NAT discovery\
    \ function by using the most effective\n   encapsulation.  It also supports the\
    \ IPv4 mobility of the nodes.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document is the merge of many previous documents\
    \ about TSP.\n   Octavio Medina has contributed to an earlier document (IPv4 in\
    \ IPv6).\n   Thanks to the following people for comments on improving and\n  \
    \ clarifying this document: Pekka Savola, Alan Ford, Jeroen Massar, and\n   Jean-Francois\
    \ Tremblay.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]           Bradner, S., \"Key words\
    \ for use in RFCs to\n                       Indicate Requirement Levels\", BCP\
    \ 14, RFC 2119,\n                       March 1997.\n   [RFC2473]           Conta,\
    \ A. and S. Deering, \"Generic Packet\n                       Tunneling in IPv6\
    \ Specification\", RFC 2473,\n                       December 1998.\n   [RFC2831]\
    \           Leach, P. and C. Newman, \"Using Digest\n                       Authentication\
    \ as a SASL Mechanism\", RFC 2831,\n                       May 2000.\n   [RFC4213]\
    \           Nordmark, E. and R. Gilligan, \"Basic Transition\n               \
    \        Mechanisms for IPv6 Hosts and Routers\", RFC 4213,\n                \
    \       October 2005.\n   [RFC4422]           Melnikov, A. and K. Zeilenga, \"\
    Simple\n                       Authentication and Security Layer (SASL)\",\n \
    \                      RFC 4422, June 2006.\n   [RFC4443]           Conta, A.,\
    \ Deering, S., and M. Gupta, \"Internet\n                       Control Message\
    \ Protocol (ICMPv6) for the\n                       Internet Protocol Version\
    \ 6 (IPv6)\n                       Specification\", RFC 4443, March 2006.\n  \
    \ [W3C.REC-xml-2004]  Yergeau, F., Paoli, J., Sperberg-McQueen, C.,\n        \
    \               Bray, T., and E. Maler, \"Extensible Markup\n                \
    \       Language (XML) 1.0 (Third Edition)\", W3C REC REC-\n                 \
    \      xml-20040204, February 2004.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [DSTM]              Bound, J., Toutain, L.,\
    \ and JL. Richier, \"Dual\n                       Stack IPv6 Dominant Transition\
    \ Mechanism\", Work\n                       in Progress, October 2005.\n   [FJ93]\
    \              Floyd, S. and V. Jacobson, \"The Synchronization\n            \
    \           of Periodic Routing Messages\", Proceedings of\n                 \
    \      ACM SIGCOMM, September 1993.\n   [RFC3053]           Durand, A., Fasano,\
    \ P., Guardini, I., and D.\n                       Lento, \"IPv6 Tunnel Broker\"\
    , RFC 3053,\n                       January 2001.\n   [RFC3704]           Baker,\
    \ F. and P. Savola, \"Ingress Filtering for\n                       Multihomed\
    \ Networks\", BCP 84, RFC 3704,\n                       March 2004.\n   [RFC3904]\
    \           Huitema, C., Austein, R., Satapati, S., and R.\n                 \
    \      van der Pol, \"Evaluation of IPv6 Transition\n                       Mechanisms\
    \ for Unmanaged Networks\", RFC 3904,\n                       September 2004.\n\
    \   [RFC3964]           Savola, P. and C. Patel, \"Security Considerations\n \
    \                      for 6to4\", RFC 3964, December 2004.\n   [RFC4057]    \
    \       Bound, J., \"IPv6 Enterprise Network Scenarios\",\n                  \
    \     RFC 4057, June 2005.\n   [RFC5226]           Narten, T. and H. Alvestrand,\
    \ \"Guidelines for\n                       Writing an IANA Considerations Section\
    \ in RFCs\",\n                       BCP 26, RFC 5226, May 2008.\n   [UNP]   \
    \            Stevens, R., Fenner, B., and A. Rudoff, \"Unix\n                \
    \       Network Programming, 3rd edition\", Addison\n                       Wesley\
    \ ISBN 0-13-141155-1, 2004.\n"
- title: Appendix A.  The TSP DTD
  contents:
  - "Appendix A.  The TSP DTD\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE tunnel  [\n\
    \   <!ELEMENT tunnel (server?,client?,broker?)>\n     <!ATTLIST tunnel action\n\
    \                  (create|delete|info|accept|reject) #REQUIRED >\n     <!ATTLIST\
    \ tunnel type\n                  (v6v4|v4v6|v6anyv4|v6udpv4) #REQUIRED >\n   \
    \  <!ATTLIST tunnel lifetime CDATA \"1440\"    >\n   <!ELEMENT server        (address+,router?)>\n\
    \   <!ELEMENT client        (address+,router?)>\n   <!ELEMENT broker        (address+)>\n\
    \   <!ELEMENT router        (prefix?,dns_server?)>\n   <!ELEMENT dns_server  \
    \  (address+)>\n   <!ELEMENT prefix        (#PCDATA)>\n     <!ATTLIST prefix length\
    \ CDATA #REQUIRED>\n   <!ELEMENT address       (#PCDATA)>\n     <!ATTLIST address\
    \ type (ipv4|ipv6|dn) #REQUIRED>\n     <!ATTLIST address length CDATA \"\">\n\
    \   <!ELEMENT keepalive (address?)>\n     <!ATTLIST keepalive interval CDATA #REQUIRED>\n\
    \   ]>\n                            Figure 20: TSP DTD\n"
- title: Appendix B.  Error Codes
  contents:
  - "Appendix B.  Error Codes\n   Error codes are sent as a numeric value followed\
    \ by a text message\n   describing the code, similar to SMTP.  The codes are sent\
    \ from the\n   broker to the client.  The currently defined error codes are shown\n\
    \   below.  Upon receiving an error, the client will display the\n   appropriate\
    \ message to the user.\n   New error messages may be defined in the future.  For\n\
    \   interoperability purpose, the error code range to use should be from\n   300\
    \ to 599.\n   The reply code 200 is used to inform the client that an action\n\
    \   successfully completed.  For example, this reply code is used in\n   response\
    \ to an authentication request and a tunnel creation request.\n   The server may\
    \ redirect the client to another broker.  The details on\n   how these brokers\
    \ are known or discovered is beyond the scope of this\n   document.  When a list\
    \ of tunnel brokers follows the error code as a\n   referral service, then 1000\
    \ is added to the error code.\n   The predefined values are:\n   200 Success:\
    \  Successful operation.\n   300 Authentication failed:  Invalid userid, password,\
    \ or\n      authentication mechanism.\n   301 No more tunnels available:  The\
    \ server has reached its capacity\n      limit.\n   302 Unsupported client version:\
    \  The client version is not supported\n      by the server.\n   303 Unsupported\
    \ tunnel type:  The server does not provide the\n      requested tunnel type.\n\
    \   310 Server side error:  Undefined server error.\n   500 Invalid request format\
    \ or specified length:  The received request\n      has invalid syntax or is truncated.\n\
    \   501 Invalid IPv4 address:  The IPv4 address specified by the client\n    \
    \  is invalid.\n   502 Invalid IPv6 address:  The IPv6 address specified by the\
    \ client\n      is invalid.\n   506 IPv4 address already used for existing tunnel:\
    \  An IPv6-over-IPv4\n      tunnel already exists using the same IPv4 address\
    \ endpoints.\n   507 Requested prefix length cannot be assigned:  The requested\
    \ prefix\n      length cannot be allocated on the server.\n   521 Request already\
    \ in progress:  The client tunnel request is being\n      processed by the server.\
    \  Temporary error.\n   530 Server too busy:  Request cannot be processed, insufficient\n\
    \      resources.  Temporary error.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marc Blanchet\n   Viagenie\n   2600 boul. Laurier, suite\
    \ 625\n   Quebec, QC  G1V 4W1\n   Canada\n   Phone: +1-418-656-9254\n   EMail:\
    \ Marc.Blanchet@viagenie.ca\n   Florent Parent\n   Beon Solutions\n   Quebec,\
    \ QC\n   Canada\n   Phone: +1 418 265 7357\n   EMail: Florent.Parent@beon.ca\n"
