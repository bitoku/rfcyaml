- contents:
  - '                  Record Size Limit Extension for TLS

    '
  title: __initial_text__
- contents:
  - "Abstract\n   An extension to Transport Layer Security (TLS) is defined that allows\n
    \  endpoints to negotiate the maximum size of protected records that\n   each
    will send the other.\n   This replaces the maximum fragment length extension defined
    in\n   RFC 6066.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8449.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Conventions and Definitions . . . . . . . . . . . . . .
    . . .   3\n   3.  Limitations of the \"max_fragment_length\" Extension  . . .
    . .   3\n   4.  The \"record_size_limit\" Extension . . . . . . . . . . . . .
    .   4\n     4.1.  Record Expansion Limits . . . . . . . . . . . . . . . . .   6\n
    \  5.  Deprecating \"max_fragment_length\" . . . . . . . . . . . . . .   6\n   6.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .   7\n   7.  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .   7\n   8.  References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .   7\n     8.1.  Normative
    References  . . . . . . . . . . . . . . . . . .   7\n     8.2.  Informative References
    \ . . . . . . . . . . . . . . . . .   8\n   Acknowledgments . . . . . . . . .
    . . . . . . . . . . . . . . . .   8\n   Author's Address  . . . . . . . . . .
    . . . . . . . . . . . . . .   8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Implementing Transport Layer Security (TLS) [TLS] or Datagram
    TLS\n   (DTLS) [DTLS] for constrained devices can be challenging.  However,\n
    \  recent improvements to the design and implementation of cryptographic\n   algorithms
    have made TLS accessible to some highly limited devices\n   (see, for example,
    [RFC7925]).\n   Receiving large protected records can be particularly difficult
    for a\n   device with limited operating memory.  TLS versions 1.2 [RFC5246] and\n
    \  earlier permit senders to generate records 16384 octets in size, plus\n   any
    expansion from compression and protection up to 2048 octets\n   (though typically
    this expansion is only 16 octets).  TLS 1.3 reduces\n   the allowance for expansion
    to 256 octets.  Allocating up to 18K of\n   memory for ciphertext is beyond the
    capacity of some implementations.\n   An Authentication Encryption with Additional
    Data (AEAD) cipher (see\n   [RFC5116]) API requires that an entire record be present
    to decrypt\n   and authenticate it.  Similarly, other ciphers cannot produce\n
    \  authenticated data until the entire record is present.  Incremental\n   processing
    of records exposes endpoints to the risk of forged data.\n   The \"max_fragment_length\"
    extension [RFC6066] was designed to enable\n   constrained clients to negotiate
    a lower record size.  However,\n   \"max_fragment_length\" suffers from several
    design problems (see\n   Section 3).\n   This document defines a \"record_size_limit\"
    extension (Section 4).\n   This extension replaces \"max_fragment_length\" [RFC6066],
    which this\n   document deprecates.  This extension is valid in all versions of
    TLS.\n   A smaller protected record size is just one of many problems that a\n
    \  constrained implementation might need to address.  The\n   \"record_size_limit\"
    extension only addresses the memory allocation\n   problem; it does not address
    limits of code size, processing\n   capability, or bandwidth capacity.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 2.  Conventions and Definitions
- contents:
  - "3.  Limitations of the \"max_fragment_length\" Extension\n   The \"max_fragment_length\"
    extension has several limitations that make\n   it unsuitable for use.\n   A client
    that has no constraints preventing it from accepting a large\n   record cannot
    use \"max_fragment_length\" without risking a reduction\n   in the size of records.
    \ The maximum value that the extension permits\n   is 2^12, much smaller than
    the maximum record size of 2^14 that the\n   protocol permits.\n   For large data
    transfers, small record sizes can materially affect\n   performance.  Every record
    incurs additional costs, both in the\n   additional octets for record headers
    and for expansion due to\n   encryption.  Processing more records also adds computational\n
    \  overheads that can be amortized more effectively for larger record\n   sizes.
    \ Consequently, clients that are capable of receiving large\n   records could
    be unwilling to risk reducing performance by offering\n   the extension, especially
    if the extension is rarely needed.\n   This would not be an issue if a codepoint
    were available or could be\n   added for fragments of 2^14 octets.  However, RFC
    6066 requires that\n   servers abort the handshake with an \"illegal_parameter\"
    alert if they\n   receive the extension with a value they don't understand.  This
    makes\n   it impossible to add new values to the extension without the risk of\n
    \  failed connection attempts.\n   A server that negotiates \"max_fragment_length\"
    is required to echo\n   the value selected by the client.  The server cannot request
    a lower\n   limit than the one the client offered.  This is a significant problem\n
    \  if a server is more constrained than the clients it serves.\n   The \"max_fragment_length\"
    extension is also ill-suited to cases where\n   the capabilities of client and
    server are asymmetric.  Constraints on\n   record size are often receiver constraints.\n
    \  In comparison, an implementation might be able to send data\n   incrementally.
    \ Encryption does not have the same atomicity\n   requirement.  Some ciphers can
    be encrypted and sent progressively.\n   Thus, an endpoint might be willing to
    send records larger than the\n   limit it advertises for records that it receives.\n
    \  If these disincentives are sufficient to discourage clients from\n   deploying
    the \"max_fragment_length\" extension, then constrained\n   servers are unable
    to limit record sizes.\n"
  title: 3.  Limitations of the "max_fragment_length" Extension
- contents:
  - "4.  The \"record_size_limit\" Extension\n   The ExtensionData of the \"record_size_limit\"
    extension is\n   RecordSizeLimit:\n      uint16 RecordSizeLimit;\n   The value
    of RecordSizeLimit is the maximum size of record in octets\n   that the endpoint
    is willing to receive.  This value is used to limit\n   the size of records that
    are created when encoding application data\n   and the protected handshake message
    into records.\n   When the \"record_size_limit\" extension is negotiated, an endpoint\n
    \  MUST NOT generate a protected record with plaintext that is larger\n   than
    the RecordSizeLimit value it receives from its peer.\n   Unprotected messages
    are not subject to this limit.\n   This value is the length of the plaintext of
    a protected record.  The\n   value includes the content type and padding added
    in TLS 1.3 (that\n   is, the complete length of TLSInnerPlaintext).  In TLS 1.2
    and\n   earlier, the limit covers all input to compression and encryption\n   (that
    is, the data that ultimately produces TLSCiphertext.fragment).\n   Padding added
    as part of encryption, such as that added by a block\n   cipher, is not included
    in this count (see Section 4.1).\n   An endpoint that supports all record sizes
    can include any limit up\n   to the protocol-defined limit for maximum record
    size.  For TLS 1.2\n   and earlier, that limit is 2^14 octets.  TLS 1.3 uses a
    limit of\n   2^14+1 octets.  Higher values are currently reserved for future\n
    \  versions of the protocol that may allow larger records; an endpoint\n   MUST
    NOT send a value higher than the protocol-defined maximum record\n   size unless
    explicitly allowed by such a future version or extension.\n   A server MUST NOT
    enforce this restriction; a client might advertise\n   a higher limit that is
    enabled by an extension or version the server\n   does not understand.  A client
    MAY abort the handshake with an\n   \"illegal_parameter\" alert if the record_size_limit
    extension includes\n   a value greater than the maximum record size permitted
    by the\n   negotiated protocol version and extensions.\n   Even if a larger record
    size limit is provided by a peer, an endpoint\n   MUST NOT send records larger
    than the protocol-defined limit, unless\n   explicitly allowed by a future TLS
    version or extension.\n   The record size limit only applies to records sent toward
    the\n   endpoint that advertises the limit.  An endpoint can send records\n   that
    are larger than the limit it advertises as its own limit.  A TLS\n   endpoint
    that receives a record larger than its advertised limit MUST\n   generate a fatal
    \"record_overflow\" alert; a DTLS endpoint that\n   receives a record larger than
    its advertised limit MAY either\n   generate a fatal \"record_overflow\" alert
    or discard the record.\n   Endpoints SHOULD advertise the \"record_size_limit\"
    extension, even if\n   they have no need to limit the size of records.  For clients,
    this\n   allows servers to advertise a limit at their discretion.  For\n   servers,
    this allows clients to know that their limit will be\n   respected.  If this extension
    is not negotiated, endpoints can send\n   records of any size permitted by the
    protocol or other negotiated\n   extensions.\n   Endpoints MUST NOT send a \"record_size_limit\"
    extension with a value\n   smaller than 64.  An endpoint MUST treat receipt of
    a smaller value\n   as a fatal error and generate an \"illegal_parameter\" alert.\n
    \  In TLS 1.3, the server sends the \"record_size_limit\" extension in the\n   EncryptedExtensions
    message.\n   During renegotiation or resumption, the record size limit is\n   renegotiated.
    \ Records are subject to the limits that were set in the\n   handshake that produces
    the keys that are used to protect those\n   records.  This admits the possibility
    that the extension might not be\n   negotiated when a connection is renegotiated
    or resumed.\n   The Path Maximum Transmission Unit (PMTU) in DTLS also limits
    the\n   size of records.  The record size limit does not affect PMTU\n   discovery
    and SHOULD be set independently.  The record size limit is\n   fixed during the
    handshake and so should be set based on constraints\n   at the endpoint and not
    based on the current network environment.  In\n   comparison, the PMTU is determined
    by the network path and can change\n   dynamically over time.  See [PMTU] and
    Section 4.1.1.1 of [DTLS] for\n   more detail on PMTU discovery.\n   PMTU governs
    the size of UDP datagrams, which limits the size of\n   records, but does not
    prevent records from being smaller.  An\n   endpoint that sends small records
    is still able to send multiple\n   records in a single UDP datagram.\n"
  - contents:
    - "4.1.  Record Expansion Limits\n   The size limit expressed in the \"record_size_limit\"
      extension doesn't\n   account for expansion due to compression or record protection.
      \ It is\n   expected that a constrained device will disable compression to avoid\n
      \  unpredictable increases in record size.  Stream ciphers and existing\n   AEAD
      ciphers don't permit variable amounts of expansion, but block\n   ciphers do
      permit variable expansion.\n   In TLS 1.2, block ciphers allow from 1 to 256
      octets of padding.\n   When a limit lower than the protocol-defined limit is
      advertised, a\n   second limit applies to the length of records that use block
      ciphers.\n   An endpoint MUST NOT add padding to records that would cause the\n
      \  protected record to exceed the size of a protected record that\n   contains
      the maximum amount of plaintext and the minimum permitted\n   amount of padding.\n
      \  For example, TLS_RSA_WITH_AES_128_CBC_SHA has 16-octet blocks and a\n   20-octet
      MAC.  Given a record size limit of 256, a record of that\n   length would require
      a minimum of 11 octets of padding (for\n   [RFC5246], where the MAC is covered
      by encryption); or 15 octets if\n   the \"encrypt_then_mac\" extension [RFC7366]
      is negotiated.  With this\n   limit, a record with 250 octets of plaintext could
      be padded to the\n   same length by including at most 17 octets of padding,
      or 21 octets\n   with \"encrypt_then_mac\".\n   An implementation that always
      adds the minimum amount of padding will\n   always comply with this requirement.\n"
    title: 4.1.  Record Expansion Limits
  title: 4.  The "record_size_limit" Extension
- contents:
  - "5.  Deprecating \"max_fragment_length\"\n   The \"record_size_limit\" extension
    replaces the \"max_fragment_length\"\n   extension [RFC6066].  A server that supports
    the \"record_size_limit\"\n   extension MUST ignore a \"max_fragment_length\"
    that appears in a\n   ClientHello if both extensions appear.  A client MUST treat
    receipt\n   of both \"max_fragment_length\" and \"record_size_limit\" as a fatal\n
    \  error, and it SHOULD generate an \"illegal_parameter\" alert.\n   Clients that
    depend on having a small record size MAY continue to\n   advertise the \"max_fragment_length\".\n"
  title: 5.  Deprecating "max_fragment_length"
- contents:
  - "6.  Security Considerations\n   Very small record sizes might generate additional
    work for senders\n   and receivers, limiting throughput and increasing exposure
    to denial\n   of service.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document registers the \"record_size_limit\"
    extension in the \"TLS\n   ExtensionType Values\" registry established in [RFC5246].
    \ The\n   \"record_size_limit\" extension has been assigned a code point of 28.\n
    \  The IANA registry [TLS-REGISTRY] lists this extension as\n   \"Recommended\"
    (i.e., \"Y\") and indicates that it may appear in the\n   ClientHello (CH) or
    EncryptedExtensions (EE) messages in TLS 1.3\n   [TLS].\n   In the same registry,
    the \"max_fragment_length\" has been changed to\n   not recommended (i.e., \"N\").\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6066]
      \ Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:
      Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January
      2011,\n              <https://www.rfc-editor.org/info/rfc6066>.\n   [RFC7366]
      \ Gutmann, P., \"Encrypt-then-MAC for Transport Layer\n              Security
      (TLS) and Datagram Transport Layer Security\n              (DTLS)\", RFC 7366,
      DOI 10.17487/RFC7366, September 2014,\n              <https://www.rfc-editor.org/info/rfc7366>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [TLS]      Rescorla, E., \"The
      Transport Layer Security (TLS) Protocol\n              Version 1.3\", RFC 8446,
      DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [DTLS]     Rescorla, E. and N. Modadugu, \"Datagram
      Transport Layer\n              Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n
      \             January 2012, <https://www.rfc-editor.org/info/rfc6347>.\n   [PMTU]
      \    McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed.,\n              \"Path
      MTU Discovery for IP version 6\", STD 87, RFC 8201,\n              DOI 10.17487/RFC8201,
      July 2017,\n              <https://www.rfc-editor.org/info/rfc8201>.\n   [RFC5116]
      \ McGrew, D., \"An Interface and Algorithms for Authenticated\n              Encryption\",
      RFC 5116, DOI 10.17487/RFC5116, January 2008,\n              <https://www.rfc-editor.org/info/rfc5116>.\n
      \  [RFC7925]  Tschofenig, H., Ed. and T. Fossati, \"Transport Layer\n              Security
      (TLS) / Datagram Transport Layer Security (DTLS)\n              Profiles for
      the Internet of Things\", RFC 7925,\n              DOI 10.17487/RFC7925, July
      2016,\n              <https://www.rfc-editor.org/info/rfc7925>.\n   [TLS-REGISTRY]\n
      \             Salowey, J. and S. Turner, \"IANA Registry Updates for TLS\n              and
      DTLS\", RFC 8447, DOI 10.17487/RFC8447, August 2018,\n              <https://www.rfc-editor.org/info/rfc8447>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgments\n   Thomas Pornin and Hannes Tschofenig provided significant
    input to\n   this document.  Alan DeKok identified an issue with the interaction\n
    \  between record size limits and PMTU.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Martin Thomson\n   Mozilla\n   Email: martin.thomson@gmail.com\n"
  title: Author's Address
