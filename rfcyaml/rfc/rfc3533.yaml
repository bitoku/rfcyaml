- title: __initial_text__
  contents:
  - '                 The Ogg Encapsulation Format Version 0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Ogg bitstream format version 0, which\
    \ is\n   a general, freely-available encapsulation format for media streams.\n\
    \   It is able to encapsulate any kind and number of video and audio\n   encoding\
    \ formats as well as other data streams in a single bitstream.\n"
- title: Terminology
  contents:
  - "Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119 [2].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2. Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3. Requirements for a generic encapsulation format  . . . .\
    \ . . .   3\n   4. The Ogg bitstream format . . . . . . . . . . . . . . . . .\
    \ . .   3\n   5. The encapsulation process  . . . . . . . . . . . . . . . . .\
    \ .   6\n   6. The Ogg page format  . . . . . . . . . . . . . . . . . . . . .\
    \   9\n   7. Security Considerations  . . . . . . . . . . . . . . . . . . .  11\n\
    \   8. References . . . . . . . . . . . . . . . . . . . . . . . . . .  12\n  \
    \ A. Glossary of terms and abbreviations  . . . . . . . . . . . . .  13\n   B.\
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . . .  14\n      Author's\
    \ Address . . . . . . . . . . . . . . . . . . . . . . .  14\n      Full Copyright\
    \ Statement . . . . . . . . . . . . . . . . . . .  15\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Ogg bitstream format has been developed as a part of\
    \ a larger\n   project aimed at creating a set of components for the coding and\n\
    \   decoding of multimedia content (codecs) which are to be freely\n   available\
    \ and freely re-implementable, both in software and in\n   hardware for the computing\
    \ community at large, including the Internet\n   community.  It is the intention\
    \ of the Ogg developers represented by\n   Xiph.Org that it be usable without\
    \ intellectual property concerns.\n   This document describes the Ogg bitstream\
    \ format and how to use it to\n   encapsulate one or several media bitstreams\
    \ created by one or several\n   encoders.  The Ogg transport bitstream is designed\
    \ to provide\n   framing, error protection and seeking structure for higher-level\n\
    \   codec streams that consist of raw, unencapsulated data packets, such\n   as\
    \ the Vorbis audio codec or the upcoming Tarkin and Theora video\n   codecs. \
    \ It is capable of interleaving different binary media and\n   other time-continuous\
    \ data streams that are prepared by an encoder as\n   a sequence of data packets.\
    \  Ogg provides enough information to\n   properly separate data back into such\
    \ encoder created data packets at\n   the original packet boundaries without relying\
    \ on decoding to find\n   packet boundaries.\n   Please note that the MIME type\
    \ application/ogg has been registered\n   with the IANA [1].\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   For describing the Ogg encapsulation process, a set of terms\
    \ will be\n   used whose meaning needs to be well understood.  Therefore, some\
    \ of\n   the most fundamental terms are defined now before we start with the\n\
    \   description of the requirements for a generic media stream\n   encapsulation\
    \ format, the process of encapsulation, and the concrete\n   format of the Ogg\
    \ bitstream.  See the Appendix for a more complete\n   glossary.\n   The result\
    \ of an Ogg encapsulation is called the \"Physical (Ogg)\n   Bitstream\".  It\
    \ encapsulates one or several encoder-created\n   bitstreams, which are called\
    \ \"Logical Bitstreams\".  A logical\n   bitstream, provided to the Ogg encapsulation\
    \ process, has a\n   structure, i.e., it is split up into a sequence of so-called\n\
    \   \"Packets\".  The packets are created by the encoder of that logical\n   bitstream\
    \ and represent meaningful entities for that encoder only\n   (e.g., an uncompressed\
    \ stream may use video frames as packets).  They\n   do not contain boundary information\
    \ - strung together they appear to\n   be streams of random bytes with no landmarks.\n\
    \   Please note that the term \"packet\" is not used in this document to\n   signify\
    \ entities for transport over a network.\n"
- title: 3. Requirements for a generic encapsulation format
  contents:
  - "3. Requirements for a generic encapsulation format\n   The design idea behind\
    \ Ogg was to provide a generic, linear media\n   transport format to enable both\
    \ file-based storage and stream-based\n   transmission of one or several interleaved\
    \ media streams independent\n   of the encoding format of the media data.  Such\
    \ an encapsulation\n   format needs to provide:\n   o  framing for logical bitstreams.\n\
    \   o  interleaving of different logical bitstreams.\n   o  detection of corruption.\n\
    \   o  recapture after a parsing error.\n   o  position landmarks for direct random\
    \ access of arbitrary positions\n      in the bitstream.\n   o  streaming capability\
    \ (i.e., no seeking is needed to build a 100%\n      complete bitstream).\n  \
    \ o  small overhead (i.e., use no more than approximately 1-2% of\n      bitstream\
    \ bandwidth for packet boundary marking, high-level\n      framing, sync and seeking).\n\
    \   o  simplicity to enable fast parsing.\n   o  simple concatenation mechanism\
    \ of several physical bitstreams.\n   All of these design considerations have\
    \ been taken into consideration\n   for Ogg.  Ogg supports framing and interleaving\
    \ of logical\n   bitstreams, seeking landmarks, detection of corruption, and stream\n\
    \   resynchronisation after a parsing error with no more than\n   approximately\
    \ 1-2% overhead.  It is a generic framework to perform\n   encapsulation of time-continuous\
    \ bitstreams.  It does not know any\n   specifics about the codec data that it\
    \ encapsulates and is thus\n   independent of any media codec.\n"
- title: 4. The Ogg bitstream format
  contents:
  - "4. The Ogg bitstream format\n   A physical Ogg bitstream consists of multiple\
    \ logical bitstreams\n   interleaved in so-called \"Pages\".  Whole pages are\
    \ taken in order\n   from multiple logical bitstreams multiplexed at the page\
    \ level.  The\n   logical bitstreams are identified by a unique serial number\
    \ in the\n   header of each page of the physical bitstream.  This unique serial\n\
    \   number is created randomly and does not have any connection to the\n   content\
    \ or encoder of the logical bitstream it represents.  Pages of\n   all logical\
    \ bitstreams are concurrently interleaved, but they need\n   not be in a regular\
    \ order - they are only required to be consecutive\n   within the logical bitstream.\
    \  Ogg demultiplexing reconstructs the\n   original logical bitstreams from the\
    \ physical bitstream by taking the\n   pages in order from the physical bitstream\
    \ and redirecting them into\n   the appropriate logical decoding entity.\n   Each\
    \ Ogg page contains only one type of data as it belongs to one\n   logical bitstream\
    \ only.  Pages are of variable size and have a page\n   header containing encapsulation\
    \ and error recovery information.  Each\n   logical bitstream in a physical Ogg\
    \ bitstream starts with a special\n   start page (bos=beginning of stream) and\
    \ ends with a special page\n   (eos=end of stream).\n   The bos page contains\
    \ information to uniquely identify the codec type\n   and MAY contain information\
    \ to set up the decoding process.  The bos\n   page SHOULD also contain information\
    \ about the encoded media - for\n   example, for audio, it should contain the\
    \ sample rate and number of\n   channels.  By convention, the first bytes of the\
    \ bos page contain\n   magic data that uniquely identifies the required codec.\
    \  It is the\n   responsibility of anyone fielding a new codec to make sure it\
    \ is\n   possible to reliably distinguish his/her codec from all other codecs\n\
    \   in use.  There is no fixed way to detect the end of the codec-\n   identifying\
    \ marker.  The format of the bos page is dependent on the\n   codec and therefore\
    \ MUST be given in the encapsulation specification\n   of that logical bitstream\
    \ type.  Ogg also allows but does not require\n   secondary header packets after\
    \ the bos page for logical bitstreams\n   and these must also precede any data\
    \ packets in any logical\n   bitstream.  These subsequent header packets are framed\
    \ into an\n   integral number of pages, which will not contain any data packets.\n\
    \   So, a physical bitstream begins with the bos pages of all logical\n   bitstreams\
    \ containing one initial header packet per page, followed by\n   the subsidiary\
    \ header packets of all streams, followed by pages\n   containing data packets.\n\
    \   The encapsulation specification for one or more logical bitstreams is\n  \
    \ called a \"media mapping\".  An example for a media mapping is \"Ogg\n   Vorbis\"\
    , which uses the Ogg framework to encapsulate Vorbis-encoded\n   audio data for\
    \ stream-based storage (such as files) and transport\n   (such as TCP streams\
    \ or pipes).  Ogg Vorbis provides the name and\n   revision of the Vorbis codec,\
    \ the audio rate and the audio quality on\n   the Ogg Vorbis bos page.  It also\
    \ uses two additional header pages\n   per logical bitstream.  The Ogg Vorbis\
    \ bos page starts with the byte\n   0x01, followed by \"vorbis\" (a total of 7\
    \ bytes of identifier).\n   Ogg knows two types of multiplexing: concurrent multiplexing\
    \ (so-\n   called \"Grouping\") and sequential multiplexing (so-called\n   \"\
    Chaining\").  Grouping defines how to interleave several logical\n   bitstreams\
    \ page-wise in the same physical bitstream.  Grouping is for\n   example needed\
    \ for interleaving a video stream with several\n   synchronised audio tracks using\
    \ different codecs in different logical\n   bitstreams.  Chaining on the other\
    \ hand, is defined to provide a\n   simple mechanism to concatenate physical Ogg\
    \ bitstreams, as is often\n   needed for streaming applications.\n   In grouping,\
    \ all bos pages of all logical bitstreams MUST appear\n   together at the beginning\
    \ of the Ogg bitstream.  The media mapping\n   specifies the order of the initial\
    \ pages.  For example, the grouping\n   of a specific Ogg video and Ogg audio\
    \ bitstream may specify that the\n   physical bitstream MUST begin with the bos\
    \ page of the logical video\n   bitstream, followed by the bos page of the audio\
    \ bitstream.  Unlike\n   bos pages, eos pages for the logical bitstreams need\
    \ not all occur\n   contiguously.  Eos pages may be 'nil' pages, that is, pages\n\
    \   containing no content but simply a page header with position\n   information\
    \ and the eos flag set in the page header.  Each grouped\n   logical bitstream\
    \ MUST have a unique serial number within the scope\n   of the physical bitstream.\n\
    \   In chaining, complete logical bitstreams are concatenated.  The\n   bitstreams\
    \ do not overlap, i.e., the eos page of a given logical\n   bitstream is immediately\
    \ followed by the bos page of the next.  Each\n   chained logical bitstream MUST\
    \ have a unique serial number within the\n   scope of the physical bitstream.\n\
    \   It is possible to consecutively chain groups of concurrently\n   multiplexed\
    \ bitstreams.  The groups, when unchained, MUST stand on\n   their own as a valid\
    \ concurrently multiplexed bitstream.  The\n   following diagram shows a schematic\
    \ example of such a physical\n   bitstream that obeys all the rules of both grouped\
    \ and chained\n   multiplexed bitstreams.\n               physical bitstream with\
    \ pages of\n          different logical bitstreams grouped and chained\n     \
    \ -------------------------------------------------------------\n      |*A*|*B*|*C*|A|A|C|B|A|B|#A#|C|...|B|C|#B#|#C#|*D*|D|...|#D#|\n\
    \      -------------------------------------------------------------\n       bos\
    \ bos bos             eos           eos eos bos       eos\n   In this example,\
    \ there are two chained physical bitstreams, the first\n   of which is a grouped\
    \ stream of three logical bitstreams A, B, and C.\n   The second physical bitstream\
    \ is chained after the end of the grouped\n   bitstream, which ends after the\
    \ last eos page of all its grouped\n   logical bitstreams.  As can be seen, grouped\
    \ bitstreams begin\n   together - all of the bos pages MUST appear before any\
    \ data pages.\n   It can also be seen that pages of concurrently multiplexed bitstreams\n\
    \   need not conform to a regular order.  And it can be seen that a\n   grouped\
    \ bitstream can end long before the other bitstreams in the\n   group end.\n \
    \  Ogg does not know any specifics about the codec data except that each\n   logical\
    \ bitstream belongs to a different codec, the data from the\n   codec comes in\
    \ order and has position markers (so-called \"Granule\n   positions\").  Ogg does\
    \ not have a concept of 'time': it only knows\n   about sequentially increasing,\
    \ unitless position markers.  An\n   application can only get temporal information\
    \ through higher layers\n   which have access to the codec APIs to assign and\
    \ convert granule\n   positions or time.\n   A specific definition of a media\
    \ mapping using Ogg may put further\n   constraints on its specific use of the\
    \ Ogg bitstream format.  For\n   example, a specific media mapping may require\
    \ that all the eos pages\n   for all grouped bitstreams need to appear in direct\
    \ sequence.  An\n   example for a media mapping is the specification of \"Ogg\
    \ Vorbis\".\n   Another example is the upcoming \"Ogg Theora\" specification which\n\
    \   encapsulates Theora-encoded video data and usually comes multiplexed\n   with\
    \ a Vorbis stream for an Ogg containing synchronised audio and\n   video.  As\
    \ Ogg does not specify temporal relationships between the\n   encapsulated concurrently\
    \ multiplexed bitstreams, the temporal\n   synchronisation between the audio and\
    \ video stream will be specified\n   in this media mapping.  To enable streaming,\
    \ pages from various\n   logical bitstreams will typically be interleaved in chronological\n\
    \   order.\n"
- title: 5. The encapsulation process
  contents:
  - "5. The encapsulation process\n   The process of multiplexing different logical\
    \ bitstreams happens at\n   the level of pages as described above.  The bitstreams\
    \ provided by\n   encoders are however handed over to Ogg as so-called \"Packets\"\
    \ with\n   packet boundaries dependent on the encoding format.  The process of\n\
    \   encapsulating packets into pages will be described now.\n   From Ogg's perspective,\
    \ packets can be of any arbitrary size.  A\n   specific media mapping will define\
    \ how to group or break up packets\n   from a specific media encoder.  As Ogg\
    \ pages have a maximum size of\n   about 64 kBytes, sometimes a packet has to\
    \ be distributed over\n   several pages.  To simplify that process, Ogg divides\
    \ each packet\n   into 255 byte long chunks plus a final shorter chunk.  These\
    \ chunks\n   are called \"Ogg Segments\".  They are only a logical construct and\
    \ do\n   not have a header for themselves.\n   A group of contiguous segments\
    \ is wrapped into a variable length page\n   preceded by a header.  A segment\
    \ table in the page header tells about\n   the \"Lacing values\" (sizes) of the\
    \ segments included in the page.  A\n   flag in the page header tells whether\
    \ a page contains a packet\n   continued from a previous page.  Note that a lacing\
    \ value of 255\n   implies that a second lacing value follows in the packet, and\
    \ a value\n   of less than 255 marks the end of the packet after that many\n \
    \  additional bytes.  A packet of 255 bytes (or a multiple of 255 bytes)\n   is\
    \ terminated by a lacing value of 0.  Note also that a 'nil' (zero\n   length)\
    \ packet is not an error; it consists of nothing more than a\n   lacing value\
    \ of zero in the header.\n   The encoding is optimized for speed and the expected\
    \ case of the\n   majority of packets being between 50 and 200 bytes large.  This\
    \ is a\n   design justification rather than a recommendation.  This encoding\n\
    \   both avoids imposing a maximum packet size as well as imposing\n   minimum\
    \ overhead on small packets.  In contrast, e.g., simply using\n   two bytes at\
    \ the head of every packet and having a max packet size of\n   32 kBytes would\
    \ always penalize small packets (< 255 bytes, the\n   typical case) with twice\
    \ the segmentation overhead.  Using the lacing\n   values as suggested, small\
    \ packets see the minimum possible byte-\n   aligned overhead (1 byte) and large\
    \ packets (>512 bytes) see a fairly\n   constant ~0.5% overhead on encoding space.\n\
    \   The following diagram shows a schematic example of a media mapping\n   using\
    \ Ogg and grouped logical bitstreams:\n          logical bitstream with packet\
    \ boundaries\n -----------------------------------------------------------------\n\
    \ > |       packet_1             | packet_2         | packet_3 |  <\n -----------------------------------------------------------------\n\
    \                     |segmentation (logically only)\n                     v\n\
    \      packet_1 (5 segments)          packet_2 (4 segs)    p_3 (2 segs)\n    \
    \ ------------------------------ -------------------- ------------\n ..  |seg_1|seg_2|seg_3|seg_4|s_5\
    \ | |seg_1|seg_2|seg_3|| |seg_1|s_2 | ..\n     ------------------------------\
    \ -------------------- ------------\n                     | page encapsulation\n\
    \                     v\n page_1 (packet_1 data)   page_2 (pket_1 data)   page_3\
    \ (packet_2 data)\n"
- title: '------------------------  ----------------  ------------------------'
  contents:
  - '------------------------  ----------------  ------------------------

    '
- title: '|H|------------------- |  |H|----------- |  |H|------------------- |'
  contents:
  - '|H|------------------- |  |H|----------- |  |H|------------------- |

    '
- title: '|D||seg_1|seg_2|seg_3| |  |D|seg_4|s_5 | |  |D||seg_1|seg_2|seg_3| | ...'
  contents:
  - '|D||seg_1|seg_2|seg_3| |  |D|seg_4|s_5 | |  |D||seg_1|seg_2|seg_3| | ...

    '
- title: '|R|------------------- |  |R|----------- |  |R|------------------- |'
  contents:
  - '|R|------------------- |  |R|----------- |  |R|------------------- |

    '
- title: '------------------------  ----------------  ------------------------'
  contents:
  - "------------------------  ----------------  ------------------------\n      \
    \              |\n"
- title: pages of            |
  contents:
  - 'pages of            |

    '
- title: other    --------|  |
  contents:
  - 'other    --------|  |

    '
- title: logical         -------
  contents:
  - 'logical         -------

    '
- title: bitstreams      | MUX |
  contents:
  - "bitstreams      | MUX |\n                -------\n                   |\n    \
    \               v\n              page_1  page_2          page_3\n      ------\
    \  ------  -------  -----  -------\n ...  ||   |  ||   |  ||    |  ||  |  || \
    \   |  ...\n      ------  ------  -------  -----  -------\n              physical\
    \ Ogg bitstream\n   In this example we take a snapshot of the encapsulation process\
    \ of\n   one logical bitstream.  We can see part of that bitstream's\n   subdivision\
    \ into packets as provided by the codec.  The Ogg\n   encapsulation process chops\
    \ up the packets into segments.  The\n   packets in this example are rather large\
    \ such that packet_1 is split\n   into 5 segments - 4 segments with 255 bytes\
    \ and a final smaller one.\n   Packet_2 is split into 4 segments - 3 segments\
    \ with 255 bytes and a\n   final very small one - and packet_3 is split into two\
    \ segments.  The\n   encapsulation process then creates pages, which are quite\
    \ small in\n   this example.  Page_1 consists of the first three segments of\n\
    \   packet_1, page_2 contains the remaining 2 segments from packet_1, and\n  \
    \ page_3 contains the first three pages of packet_2.  Finally, this\n   logical\
    \ bitstream is multiplexed into a physical Ogg bitstream with\n   pages of other\
    \ logical bitstreams.\n"
- title: 6. The Ogg page format
  contents:
  - "6. The Ogg page format\n   A physical Ogg bitstream consists of a sequence of\
    \ concatenated\n   pages.  Pages are of variable size, usually 4-8 kB, maximum\
    \ 65307\n   bytes.  A page header contains all the information needed to\n   demultiplex\
    \ the logical bitstreams out of the physical bitstream and\n   to perform basic\
    \ error recovery and landmarks for seeking.  Each page\n   is a self-contained\
    \ entity such that the page decode mechanism can\n   recognize, verify, and handle\
    \ single pages at a time without\n   requiring the overall bitstream.\n   The\
    \ Ogg page header has the following format:\n 0                   1          \
    \         2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1| Byte\n"
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '| capture_pattern: Magic number for page start "OggS"           | 0-3'
  contents:
  - '| capture_pattern: Magic number for page start "OggS"           | 0-3

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '| version       | header_type   | granule_position              | 4-7'
  contents:
  - '| version       | header_type   | granule_position              | 4-7

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                                                               | 8-11'
  contents:
  - '|                                                               | 8-11

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               | bitstream_serial_number       | 12-15'
  contents:
  - '|                               | bitstream_serial_number       | 12-15

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               | page_sequence_number          | 16-19'
  contents:
  - '|                               | page_sequence_number          | 16-19

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               | CRC_checksum                  | 20-23'
  contents:
  - '|                               | CRC_checksum                  | 20-23

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                               |page_segments  | segment_table | 24-27'
  contents:
  - '|                               |page_segments  | segment_table | 24-27

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '| ...                                                           | 28-'
  contents:
  - '| ...                                                           | 28-

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The LSb\
    \ (least significant bit) comes first in the Bytes.  Fields\n   with more than\
    \ one byte length are encoded LSB (least significant\n   byte) first.\n   The\
    \ fields in the page header have the following meaning:\n   1. capture_pattern:\
    \ a 4 Byte field that signifies the beginning of a\n      page.  It contains the\
    \ magic numbers:\n            0x4f 'O'\n            0x67 'g'\n            0x67\
    \ 'g'\n            0x53 'S'\n      It helps a decoder to find the page boundaries\
    \ and regain\n      synchronisation after parsing a corrupted stream.  Once the\n\
    \      capture pattern is found, the decoder verifies page sync and\n      integrity\
    \ by computing and comparing the checksum.\n   2. stream_structure_version: 1\
    \ Byte signifying the version number of\n      the Ogg file format used in this\
    \ stream (this document specifies\n      version 0).\n   3. header_type_flag:\
    \ the bits in this 1 Byte field identify the\n      specific type of this page.\n\
    \      *  bit 0x01\n         set: page contains data of a packet continued from\
    \ the previous\n            page\n         unset: page contains a fresh packet\n\
    \      *  bit 0x02\n         set: this is the first page of a logical bitstream\
    \ (bos)\n         unset: this page is not a first page\n      *  bit 0x04\n  \
    \       set: this is the last page of a logical bitstream (eos)\n         unset:\
    \ this page is not a last page\n   4. granule_position: an 8 Byte field containing\
    \ position information.\n      For example, for an audio stream, it MAY contain\
    \ the total number\n      of PCM samples encoded after including all frames finished\
    \ on this\n      page.  For a video stream it MAY contain the total number of\
    \ video\n      frames encoded after this page.  This is a hint for the decoder\n\
    \      and gives it some timing and position information.  Its meaning is\n  \
    \    dependent on the codec for that logical bitstream and specified in\n    \
    \  a specific media mapping.  A special value of -1 (in two's\n      complement)\
    \ indicates that no packets finish on this page.\n   5. bitstream_serial_number:\
    \ a 4 Byte field containing the unique\n      serial number by which the logical\
    \ bitstream is identified.\n   6. page_sequence_number: a 4 Byte field containing\
    \ the sequence\n      number of the page so the decoder can identify page loss.\
    \  This\n      sequence number is increasing on each logical bitstream\n     \
    \ separately.\n   7. CRC_checksum: a 4 Byte field containing a 32 bit CRC checksum\
    \ of\n      the page (including header with zero CRC field and page content).\n\
    \      The generator polynomial is 0x04c11db7.\n   8. number_page_segments: 1\
    \ Byte giving the number of segment entries\n      encoded in the segment table.\n\
    \   9. segment_table: number_page_segments Bytes containing the lacing\n     \
    \ values of all segments in this page.  Each Byte contains one\n      lacing value.\n\
    \   The total header size in bytes is given by:\n   header_size = number_page_segments\
    \ + 27 [Byte]\n   The total page size in Bytes is given by:\n   page_size = header_size\
    \ + sum(lacing_values: 1..number_page_segments)\n   [Byte]\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   The Ogg encapsulation format is a container format\
    \ and only\n   encapsulates content (such as Vorbis-encoded audio).  It does not\n\
    \   provide for any generic encryption or signing of itself or its\n   contained\
    \ content bitstreams.  However, it encapsulates any kind of\n   content bitstream\
    \ as long as there is a codec for it, and is thus\n   able to contain encrypted\
    \ and signed content data.  It is also\n   possible to add an external security\
    \ mechanism that encrypts or signs\n   an Ogg physical bitstream and thus provides\
    \ content confidentiality\n   and authenticity.\n   As Ogg encapsulates binary\
    \ data, it is possible to include executable\n   content in an Ogg bitstream.\
    \  This can be an issue with applications\n   that are implemented using the Ogg\
    \ format, especially when Ogg is\n   used for streaming or file transfer in a\
    \ networking scenario.  As\n   such, Ogg does not pose a threat there.  However,\
    \ an application\n   decoding Ogg and its encapsulated content bitstreams has\
    \ to ensure\n   correct handling of manipulated bitstreams, of buffer overflows\
    \ and\n   the like.\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Walleij, L., \"The application/ogg Media Type\", RFC 3534,\
    \ May\n       2003.\n   [2] Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: Appendix A. Glossary of terms and abbreviations
  contents:
  - "Appendix A. Glossary of terms and abbreviations\n   bos page: The initial page\
    \ (beginning of stream) of a logical\n      bitstream which contains information\
    \ to identify the codec type\n      and other decoding-relevant information.\n\
    \   chaining (or sequential multiplexing): Concatenation of two or more\n    \
    \  complete physical Ogg bitstreams.\n   eos page: The final page (end of stream)\
    \ of a logical bitstream.\n   granule position: An increasing position number\
    \ for a specific\n      logical bitstream stored in the page header.  Its meaning\
    \ is\n      dependent on the codec for that logical bitstream and specified in\n\
    \      a specific media mapping.\n   grouping (or concurrent multiplexing): Interleaving\
    \ of pages of\n      several logical bitstreams into one complete physical Ogg\n\
    \      bitstream under the restriction that all bos pages of all grouped\n   \
    \   logical bitstreams MUST appear before any data pages.\n   lacing value: An\
    \ entry in the segment table of a page header\n      representing the size of\
    \ the related segment.\n   logical bitstream: A sequence of bits being the result\
    \ of an encoded\n      media stream.\n   media mapping: A specific use of the\
    \ Ogg encapsulation format\n      together with a specific (set of) codec(s).\n\
    \   (Ogg) packet: A subpart of a logical bitstream that is created by the\n  \
    \    encoder for that bitstream and represents a meaningful entity for\n     \
    \ the encoder, but only a sequence of bits to the Ogg encapsulation.\n   (Ogg)\
    \ page: A physical bitstream consists of a sequence of Ogg pages\n      containing\
    \ data of one logical bitstream only.  It usually\n      contains a group of contiguous\
    \ segments of one packet only, but\n      sometimes packets are too large and\
    \ need to be split over several\n      pages.\n   physical (Ogg) bitstream: The\
    \ sequence of bits resulting from an Ogg\n      encapsulation of one or several\
    \ logical bitstreams.  It consists\n      of a sequence of pages from the logical\
    \ bitstreams with the\n      restriction that the pages of one logical bitstream\
    \ MUST come in\n      their correct temporal order.\n   (Ogg) segment: The Ogg\
    \ encapsulation process splits each packet into\n      chunks of 255 bytes plus\
    \ a last fractional chunk of less than 255\n      bytes.  These chunks are called\
    \ segments.\n"
- title: Appendix B. Acknowledgements
  contents:
  - "Appendix B. Acknowledgements\n   The author gratefully acknowledges the work\
    \ that Christopher\n   Montgomery  and the Xiph.Org foundation have done in defining\
    \ the Ogg\n   multimedia project and as part of it the open file format described\n\
    \   in this document.  The author hopes that providing this document to\n   the\
    \ Internet community will help in promoting the Ogg multimedia\n   project at\
    \ http://www.xiph.org/.  Many thanks also for the many\n   technical and typo\
    \ corrections that C. Montgomery and the Ogg\n   community provided as feedback\
    \ to this RFC.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Silvia Pfeiffer\n   CSIRO, Australia\n   Locked Bag 17\n\
    \   North Ryde, NSW  2113\n   Australia\n   Phone: +61 2 9325 3141\n   EMail:\
    \ Silvia.Pfeiffer@csiro.au\n   URI:   http://www.cmis.csiro.au/Silvia.Pfeiffer/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
