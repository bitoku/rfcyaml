- title: __initial_text__
  contents:
  - '     Protocol Complications with the IP Network Address Translator

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Many internet applications can be adversely affected when end nodes\n\
    \   are not in the same address realm and seek the assistance of an IP\n   Network\
    \ Address Translator (NAT) enroute to bridge the realms.  The\n   NAT device alone\
    \ cannot provide the necessary application/protocol\n   transparency in all cases\
    \ and seeks the assistance of Application\n   Level Gateways (ALGs) where possible,\
    \ to provide transparency.  The\n   purpose of this document is to identify the\
    \ protocols and\n   applications that break with NAT enroute.  The document also\
    \ attempts\n   to identify any known workarounds.  It is not possible to capture\
    \ all\n   applications that break with NAT in a single document.  This document\n\
    \   attempts to capture as much information as possible, but is by no\n   means\
    \ a comprehensive coverage.  We hope the coverage provides\n   sufficient clues\
    \ for applications not covered.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0 Introduction ..............................................\
    \  2\n   2.0 Common Characteristics of Protocols broken by NAT .........  2\n\
    \   3.0 Protocols that cannot work with NAT enroute ...............  4\n   4.0\
    \ Protocols that can work with the aid of an ALG ............  8\n   5.0 Protocols\
    \ designed explicitly to work with NAT enroute .... 16\n   6.0 Acknowledgements\
    \ .......................................... 17\n   7.0 Security Considerations\
    \ ................................... 17\n   8.0 References ................................................\
    \ 17\n   9.0 Authors' Addresses ........................................ 19\n\
    \   10.0 Full Copyright Statement  ................................ 20\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   This document requires the reader to be familiar with the\
    \ terminology\n   and function of NAT devices as described in [NAT-TERM].  In\
    \ a\n   nutshell, NAT attempts to provide a transparent routing solution to\n\
    \   end hosts requiring communication to disparate address realms.  NAT\n   modifies\
    \ end node addresses (within the IP header of a packet) en-\n   route and maintains\
    \ state for these updates so that datagrams\n   pertaining to a session are transparently\
    \ routed to the right end-\n   node in either realm.  Where possible, application\
    \ specific ALGs may\n   be used in conjunction with NAT to provide application\
    \ level\n   transparency.  Unlike NAT, the function of ALG is application\n  \
    \ specific and would likely require examination and recomposition of IP\n   payload.\n\
    \   The following sections attempt to list applications that are known to\n  \
    \ have been impacted by NAT devices enroute.  However, this is by no\n   means\
    \ a comprehensive list of all known protocols and applications\n   that have complications\
    \ with NAT - rather just a subset of the list\n   gathered by the authors.  It\
    \ is also important to note that this\n   document is not intended to advocate\
    \ NAT, but rather to point out the\n   complications with protocols and applications\
    \ when NAT devices are\n   enroute.\n"
- title: 2.0 Common Characteristics of Protocols broken by NAT
  contents:
  - "2.0 Common Characteristics of Protocols broken by NAT\n   [NAT-TERM] and [NAT-TRAD]\
    \ have sections listing the specific nature\n   of problems and limitations to\
    \ NAT devices.  Some of these\n   limitations are being restated in this section\
    \ to summarize\n   characteristics of protocols that are broken by NAT.\n"
- title: 2.1 Realm-specific IP address information in payload
  contents:
  - "2.1 Realm-specific IP address information in payload\n   A wide range of applications\
    \ fail with NAT enroute when IP packets\n   contain realm-specific IP address\
    \ or port information in payload.  An\n   ALG may be able to provide work around\
    \ in some cases.  But, if the\n   packet payload is IPsec secured (or secure by\
    \ a transport or\n   application level security mechanisms), the application is\
    \ bound to\n   fail.\n"
- title: 2.2 Bundled session applications
  contents:
  - "2.2 Bundled session applications\n   Bundled session applications such as FTP,\
    \ H.323, SIP and RTSP, which\n   use a control connection to establish a data\
    \ flow are also usually\n   broken by NAT devices enroute.  This is because these\
    \ applications\n   exchange address and port parameters within control session\
    \ to\n   establish data sessions and session orientations.  NAT cannot know\n\
    \   the inter-dependency of the bundled sessions and would treat each\n   session\
    \ to be unrelated to one another.  Applications in this case\n   can fail for\
    \ a variety of reasons.  Two most likely reasons for\n   failures are:  (a) addressing\
    \ information in control payload is\n   realm-specific and is not valid once packet\
    \ crosses the originating\n   realm, (b) control session permits data session(s)\
    \ to originate in a\n   direction that NAT might not permit.\n   When DNS names\
    \ are used in control payload, NAT device in conjunction\n   with a DNS-ALG might\
    \ be able to offer the necessary application level\n   transparency, if NAT has\
    \ no contention with data session orientation.\n   However, using DNS names in\
    \ place of realm-specific IP addresses may\n   not be an option to many of these\
    \ applications (e.g., FTP).\n   When realm-specific addressing is specified in\
    \ payload, and the\n   payload is not encrypted, an ALG may in some cases be able\
    \ to provide\n   the work around necessary to make the applications run transparently\n\
    \   across realms.  The complexity of ALG depends on the application\n   level\
    \ knowledge required to process payload and maintain state.\n"
- title: 2.3 Peer-to-peer applications
  contents:
  - "2.3 Peer-to-peer applications\n   Peer-to-peer applications more than client-server\
    \ based applications\n   are likely to break with NAT enroute.  Unlike Client-server\n\
    \   applications, Peer-to-peer applications can be originated by any of\n   the\
    \ peers.  When peers are distributed across private and public\n   realms, a session\
    \ originated from an external realm is just as likely\n   as the session from\
    \  a host in private realm.  External peers will be\n   able to locate their peers\
    \ in private realm only when they know the\n   externally assigned IP address\
    \ or the FQDN ahead of time.  FQDN name\n   to assigned address mapping can happen\
    \ only so long as the enroute\n   NAT device supports DNS-ALG.  Examples of Peer-to-peer\
    \ applications\n   include interactive games, Internet telephony and event-based\n\
    \   protocols (such as Instant-Messaging).\n   This is particularly a problem\
    \ with traditional NAT and may be less\n   of an issue with bi-directional NAT,\
    \ where sessions are permitted in\n   both directions.\n   A possible work-around\
    \ for this type of problem with traditional-NAT\n   is for private hosts to maintain\
    \ an outbound connection with a server\n   acting as their representative to the\
    \ globally routed Internet.\n"
- title: 2.4 IP fragmentation with NAPT enroute
  contents:
  - "2.4 IP fragmentation with NAPT enroute\n   IP fragmentation with NAPT enroute\
    \ is not an issue with any single\n   application, but pervades across all TCP/UDP\
    \ applications.  The\n   problem is described in detail in [NAT-TRAD].  Briefly,\
    \ the problem\n   goes as follows.  Say, two private hosts originated fragmented\n\
    \   TCP/UDP packets to the same destination host.  And, they happened to\n   use\
    \ the same fragmentation identifier.  When the target host receives\n   the two\
    \ unrelated datagrams, carrying same fragmentation id, and from\n   the same assigned\
    \ host address, the target host is unable to\n   determine which of the two sessions\
    \ the datagrams belong to.\n   Consequently, both sessions will be corrupted.\n"
- title: 2.5 Applications requiring retention of address mapping
  contents:
  - "2.5 Applications requiring retention of address mapping\n   NAT will most likely\
    \ break applications that require address mapping\n   to be retained across contiguous\
    \ sessions.  These applications\n   require the private-to-external address mapping\
    \ to be retained\n   between sessions so the same external address may be reused\
    \ for\n   subsequent session interactions.  NAT cannot know this requirement\n\
    \   and may reassign external address to different hosts between\n   sessions.\n\
    \   Trying to keep NAT from discarding an address mapping would require a\n  \
    \ NAT extension protocol to the application that would allow the\n   application\
    \ to inform the NAT device to retain the mappings.\n   Alternately, an ALG may\
    \ be required to interact with NAT to keep the\n   address mapping from being\
    \ discarded by NAT.\n"
- title: 2.6 Applications requiring more public addresses than available
  contents:
  - "2.6 Applications requiring more public addresses than available\n   This is a\
    \ problem when the number of private hosts is larger than the\n   external addresses\
    \ available to map the private addresses into.  Take\n   for example the rlogin\
    \ service initiated from a host in private realm\n   supported by NAPT.  Rlogin\
    \ service clients use well-known rlogin port\n   512 as their TCP port ID.  No\
    \ more than one host in private realm can\n   initiate the service.  This is a\
    \ case of trying to use a service that\n   fundamentally requires more public\
    \ addresses than are available.  NAT\n   devices can conserve addresses, but they\
    \ cannot create more\n   addresses.\n"
- title: 3.0 Protocols that cannot work with NAT enroute
  contents:
  - '3.0 Protocols that cannot work with NAT enroute

    '
- title: 3.1 IPsec and IKE
  contents:
  - "3.1 IPsec and IKE\n   NAT fundamentally operates by modifying end node addresses\
    \ (within\n   the IP header) en-route.  The IPsec AH standard [IPsec-AH] on the\n\
    \   other hand is explicitly designed to detect alterations to IP packet\n   header.\
    \  So when NAT alters the address information enroute in IP\n   header, the destination\
    \ host receiving the altered packet will\n   invalidate the packet since the contents\
    \ of the headers have been\n   altered.  The IPsec AH secure packet traversing\
    \ NAT will simply not\n   reach the target application, as a result.\n   IPsec\
    \ ESP ([IPsec-ESP]) encrypted packets may be altered by NAT\n   device enroute\
    \ only in a limited number of cases.  In the case of\n   TCP/UDP packets, NAT\
    \ would need to update the checksum in TCP/UDP\n   headers, when an address in\
    \ IP header is changed.  However, as the\n   TCP/UDP header is encrypted by the\
    \ ESP, NAT would not be able to make\n   this checksum update.  As a result, TCP/UDP\
    \ packets encrypted in\n   transport mode ESP, traversing a NAT device will fail\
    \ the TCP/UDP\n   checksum validation on the receiving end and will simply not\
    \ reach\n   the target application.\n   Internet Key Exchange Protocol IKE can\
    \ potentially pass IP addresses\n   as node identifiers during Main, Aggressive\
    \ and Quick Modes.  In\n   order for an IKE negotiation to correctly pass through\
    \ a NAT, these\n   payloads would need to be modified.  However, these payloads\
    \ are\n   often protected by hash or obscured by encryption.  Even in the case\n\
    \   where IP addresses are not used in IKE payloads and an IKE\n   negotiation\
    \ could occur uninterrupted, there is difficulty with\n   retaining the private-to-external\
    \ address mapping on NAT from the\n   time IKE completed negotiation to the time\
    \ IPsec uses the key on an\n   application.  In the end, the use of end-to-end\
    \ IPsec is severely\n   hampered anyway, as described earlier.\n   For all practical\
    \ purposes, end-to-end IPsec is impossible to\n   accomplish with NAT enroute.\n"
- title: 3.2 Kerberos 4
  contents:
  - "3.2 Kerberos 4\n   Kerberos 4 tickets are encrypted.  Therefore, an ALG cannot\
    \ be\n   written.  When the KDC receives a ticket request, it includes the\n \
    \  source IP address in the returned ticket.  Not all Kerberos 4\n   services\
    \ actually check source IP addresses.  AFS is a good example\n   of a Kerberos\
    \ 4 service which does not.  Services which don't check\n   are not picky about\
    \ NAT devices enroute.  Kerberos tickets are tied\n   to the IP address that requested\
    \ the ticket and the service with\n   which to use the ticket.\n   The K4 ticket\
    \ (response) contains a single IP address describing the\n   interface used by\
    \ the  client to retrieve the ticket from the TGT\n   from the perspective of\
    \ KDC.  This works fine if the KDC is across a\n   NAT gateway and as long as\
    \ all of the Kerberos services are also\n   across a NAT gateway.  The end user\
    \ on private network will not\n   notice any problems.\n   There is also the caveat\
    \ that NAT uses the same address mapping for\n   the private host for the connection\
    \ between the client and the KDC as\n   for the connection between the client\
    \ and the application server.  A\n   work around this problem would be to keep\
    \ an arbitrary connection\n   open to remote server during throughout the ticket\
    \ lifetime, so as\n   not to let NAT drop the address binding.  Alternately, an\
    \ ALG will\n   need to be deployed to ensure that NAT would not change address\n\
    \   bindings during the lifetime of a ticket and between the time a\n   ticket\
    \ is issued to private host and the time the ticket is used by\n   private host.\n\
    \   But, the ticket will be valid from any host within the private realm\n   of\
    \ NAPT.  Without NAPT, an attacker needs to be able to spoof the\n   source IP\
    \ addresses of a connection that is being made in order to\n   use a stolen ticket\
    \ on a different host.  With NAPT, all the attacker\n   needs to do from the private\
    \ realm of NAPT is to simply gain\n   possession of a ticket.  Of course, this\
    \ assumes, NAPT private domain\n   is not a trusted network - not surprisingly,\
    \ since many attacks occur\n   from inside the organization.\n"
- title: 3.3 Kerberos 5
  contents:
  - "3.3 Kerberos 5\n   Just as with Kerberos 4, Kerberos 5 tickets are encrypted.\n\
    \   Therefore, an ALG cannot be written.\n   In Kerberos 5, the client specifies\
    \ a list of IP addresses which the\n   ticket should be valid for, or it can ask\
    \ for a ticket valid for all\n   IP addresses.  By asking for an all-IP-addresses\
    \ ticket or a ticket\n   containing the NAPT device address, you can get krb5\
    \ to work with an\n   NAPT device, although it isn't very transparent (it requires\
    \ the\n   clients to behave differently than they otherwise would).  The MIT\n\
    \   krb5 1.0 implementation didn't have any configurability for what IP\n   addresses\
    \ the client asked for (it always asked for the set of its\n   interface addresses)\
    \ and did not interact well with NAT.  The MIT\n   krb5 1.1 implementation allows\
    \ you to put \"noaddresses\" somewhere in\n   krb5.conf to request all-IP-addresses-valid\
    \ tickets.\n   The K5 ticket (response) contains IP addresses, as requested by\
    \ the\n   client node, from which the ticket is to be considered valid.  If the\n\
    \   services being accessed with Kerberos authentication are on the\n   public\
    \ side of the NAT, then the Kerberos authentication will fail\n   because the\
    \ IP address used by the NAT (basic NAT or NAPT) is not in\n   the list of acceptable\
    \ addresses.\n   There are two workarounds in Kerberos 5 both of which reduce\
    \ the\n   security of the tickets.  The first is to have the clients in NAPT\n\
    \   private realm specify the public IP address of the NAPT in the\n   ticket's\
    \ IP list.  But this leads to the same security problem\n   detailed for K4. \
    \ Plus, it is not obvious for the client in the\n   private domain to find out\
    \ the public IP Address of the NAPT.  That\n   would be a change of application\
    \ behavior on end-host.\n   The second method is to remove all IP addresses from\
    \ the K5 tickets\n   but this now makes theft of the ticket even worse since the\
    \ tickets\n   can be used from anywhere.  Not just from within the private network.\n"
- title: 3.4 The X Windowing System and X-term/Telnet
  contents:
  - "3.4 The X Windowing System and X-term/Telnet\n   The X Windowing system is TCP\
    \ based.  However, the client-server\n   relationship with these applications\
    \ is reverse compared to most\n   other applications.  The X server or Open-windows\
    \ server is the\n   display/mouse/keyboard unit (i.e., the one that controls the\
    \ actual\n   Windows interface).  The clients are the application programs driving\n\
    \   the Windows interface.\n   Some machines run multiple X Windows servers on\
    \ the same machine.\n   The first X Windows server is at TCP port 6000.  The first\
    \ Open\n   Windows server can be at port 6000 or port 2000 (more flexible).  We\n\
    \   will mainly refer X windowing system for illustration purposes here.\n   X-term\
    \ Transmits IP addresses from the client to the server for the\n   purpose of\
    \ setting the DISPLAY variable.  When set the DISPLAY\n   variable is used for\
    \ subsequent connections from X clients on the\n   host to an X server on the\
    \ workstation.  The DISPLAY variable is sent\n   inline during the TELNET negotiations\
    \ as\n     DISPLAY=<local-ip-addr>:<server>.<display>\n   where the <local-ip-addr>\
    \ is retrieved by looking at the local ip\n   address associated with the socket\
    \ used to connect to <server>.  The\n   <server> determines which port (6000 +\
    \ <server>) should be used to\n   make the connection.  <display> is used to indicate\
    \ which monitor\n   attached to the X server should be used but is not important\
    \ to this\n   discussion.\n   The <local-ip-addr> used is not a DNS name because:\n\
    \    . The is no ability for the local machine to know its DNS name\n      without\
    \ performing a reverse DNS lookup on the local-ip-addr\n    . There is no guarantee\
    \ that the name returned by a reverse\n      DNS lookup actually maps back to\
    \ the local IP address.\n    . Lastly, without DNSSEC, it may not be safe to use\
    \ DNS addresses\n      because they can easily be spoofed.  NAT and DNS-ALG cannot\
    \ work\n      unless DNSSEC is disabled.\n   A common use of this application\
    \ is people dialing in to corporate\n   offices from their X terminals at home.\
    \  Say, the X client is running\n   on a host on the public side of the NAT and\
    \ X server is running on a\n   host on the private side of the NAT.  The DISPLAY\
    \ variable is\n   transmitted inline to the host the X client is running in some\
    \ way.\n   The process transmitting the contents of the DISPLAY variable does\n\
    \   not know the address of the NAT.\n   If the channel transmitting the DISPLAY\
    \ variable is not encrypted,\n   NAT device might solicit the help of an ALG to\
    \ replace the IP address\n   and configure a port in the valid display range (ports\
    \ 6000 and\n   higher) to act as a gateway.  Alternately, NAT may be configured\
    \ to\n   listen for incoming connections to provide access to the X Server(s),\n\
    \   without requiring an ALG.  But, this approach increases the security\n   risk\
    \ by providing access to the X server that would not otherwise be\n   available.\
    \  As the ALG tampers with the IP addresses it will also not\n   be possible for\
    \ X Authorization methods other than MIT-MAGIC-COOKIE-1\n   to be used.  MIT-MAGIC-COOKIE-1\
    \ is the least secure of all the\n   documented X Authorization methods.\n   When\
    \ START_TLS is used there may be client certificate verification\n   problems\
    \ caused by the NAT depending on the information provided in\n   the certificate.\n"
- title: 3.5 RSH/RLOGIN
  contents:
  - "3.5 RSH/RLOGIN\n   RSH uses multiple sessions to support separate streams for\
    \ stdout and\n   stderr.  A random port number is transmitted inline from the\
    \ client\n   to the server for use as stderr port.  The stderr socket is a\n \
    \  connection back from the server to the client.  And unlike FTP, there\n   is\
    \ no equivalent to PASV mode.  For traditional NAT, this is a\n   problem as traditional\
    \ NAT would not permit incoming sessions.\n   RLOGIN does not use multiple sessions.\
    \  But the Kerberos protected\n   versions of RSH and RLOGIN will not work in\
    \ a NAT environment due to\n   the ticket problems and the use of multiple sessions.\n"
- title: 4.0 Protocols that can work with the aid of an ALG
  contents:
  - "4.0 Protocols that can work with the aid of an ALG\n   This document predominantly\
    \ addresses problems associated with\n   Traditional NAT, especially NAPT.\n"
- title: 4.1 FTP
  contents:
  - "4.1 FTP\n   FTP is a TCP based application, used to reliably transfer files\n\
    \   between two hosts.  FTP uses bundled session approach to accomplish\n   this.\n\
    \   FTP is initiated by a client accessing a well-known port number 21 on\n  \
    \ the FTP server.  This is called the FTP control session.  Often, an\n   additional\
    \ data session accompanies the control session.  By default,\n   the data session\
    \ would be from TCP port 20 on server to the TCP port\n   client used to initiate\
    \ control session.  However, the data session\n   ports may be altered within\
    \ the FTP control sessions using ASCII\n   encoded PORT and PASV commands and\
    \ responses.\n   Say, an FTP client is in a NAT supported private network.  An\
    \ FTP ALG\n   will be required to monitor the FTP control session (for both PORT\n\
    \   and PASV modes) to identify the FTP data session port numbers and\n   modify\
    \ the private address and port number with the externally valid\n   address and\
    \ port number.  In addition, the sequence and\n   acknowledgement numbers, TCP\
    \ checksum, IP packet length and checksum\n   have to be updated.  Consequently\
    \ the sequence numbers in all\n   subsequent packets for that stream must be adjusted\
    \ as well as TCP\n   ACK fields and checksums.\n   In rare cases, increasing the\
    \ size of the packet could cause it to\n   exceed the MTU of a given transport\
    \ link.  The packet would then have\n   to be fragmented which could affect performance.\
    \  Or, if the packet\n   has the DF bit set, it would be ICMP rejected and the\
    \ originating\n   host would then have to perform Path MTU Discovery.  This could\
    \ have\n   an adverse effect on performance.\n   Note however, if the control\
    \ command channel is secured, it will be\n   impossible for an ALG to update the\
    \ IP addresses in the command\n   exchange.\n   When AUTH is used with Kerberos\
    \ 4, Kerberos 5, and TLS, the same\n   problems that occur with X-Term/Telnet\
    \ occur with FTP.\n   Lastly, it is of interest to note section 4 of RFC 2428\
    \ (FTP\n   extensions for IPv6 and NATs) which describes how a new FTP port\n\
    \   command (EPSV ALL) can be used to allow NAT devices to fast-track the\n  \
    \ FTP protocol, eliminating further processing through ALG, if the\n   remote\
    \ server accepts \"EPSV ALL\".\n"
- title: 4.2 RSVP
  contents:
  - "4.2 RSVP\n   RSVP is positioned in the protocol stack at the transport layer,\n\
    \   operating on top of IP (either IPv4 or IPv6).  However, unlike other\n   transport\
    \ protocols, RSVP does not transport application data but\n   instead acts like\
    \ other Internet control protocols (for example,\n   ICMP, IGMP, routing protocols).\
    \  RSVP messages are sent hop-by-hop\n   between RSVP-capable routers as raw IP\
    \ datagrams using protocol\n   number 46.  It is intended that raw IP datagrams\
    \ should be used\n   between the end systems and the first (or last) hop router.\
    \  However,\n   this may not always be possible as not all systems can do raw\
    \ network\n   I/O.  Because of this, it is possible to encapsulate RSVP messages\n\
    \   within UDP datagrams for end-system communication.  UDP-encapsulated\n   RSVP\
    \ messages are sent to either port 1698 (if sent by an end system)\n   or port\
    \ 1699 (if sent by an RSVP-enabled router).  For more\n   information concerning\
    \ UDP encapsulation of RSVP messages; consult\n   Appendix C of RFC 2205.\n  \
    \ An RSVP session, a data flow with a particular destination and\n   transport-layer\
    \ protocol, is defined by:\n   Destination Address - the destination IP address\
    \ for the data\n   packets.  This may be either a unicast or a multicast address.\n\
    \   Protocol ID - the IP protocol ID (for example, UDP or TCP).\n   Destination\
    \ Port - a generalized destination port that is used for\n   demultiplexing at\
    \ a layer above the IP layer.\n   NAT devices are presented with unique problems\
    \ when it comes to\n   supporting RSVP.  Two issues are:\n   1. RSVP message objects\
    \ may contain IP addresses.  The result is that\n   an RSVP-ALG must be able to\
    \ replace the IP addresses based upon the\n   direction and type of the message.\
    \  For example, if an external\n   sender were to send an RSVP Path message to\
    \ an internal receiver, the\n   RSVP session will specify the IP address that\
    \ the external sender\n   believes is the IP address of the internal receiver.\
    \  However, when\n   the RSVP Path message reaches the NAT device, the RSVP session\
    \ must\n   be changed to reflect the IP address that is used internally for the\n\
    \   receiver.  Similar actions must be taken for all message objects that\n  \
    \ contain IP addresses.\n   2. RSVP provides a means, the RSVP Integrity object,\
    \ to guarantee the\n   integrity of RSVP messages.  The problem is that because\
    \ of the first\n   point, a NAT device must be able to change IP addresses within\
    \ the\n   RSVP messages.  However, when this is done, the RSVP Integrity object\n\
    \   is no longer valid as the RSVP message has been changed.  Therefore\n   an\
    \ RSVP-ALG will not work when RSVP Integrity Object is used.\n"
- title: 4.3 DNS
  contents:
  - "4.3 DNS\n   DNS is a TCP/UDP based protocol.  Domain Names are an issue for hosts\n\
    \   which use local DNS servers in NAT private realm.  DNS name to\n   address\
    \ mapping for hosts in private domain should be configured on\n   an authoritative\
    \ name server within private domain.  This server\n   would be accessed by external\
    \ and internal hosts alike for name\n   resolutions.  A DNS-ALG would be required\
    \ to perform address to name\n   conversions on DNS queries and responses.  [DNS-ALG]\
    \ describes DNS-\n   ALG\n   in detail.  If DNS packets are encrypted/authenticated\
    \ per DNSSEC,\n   then DNS_ALG will fail because it won't be able to perform payload\n\
    \   modifications.\n   Applications using DNS resolver to resolve a DNS name into\
    \ an IP\n   address, assume availability of address assignment for reuse by the\n\
    \   application specific session.  As a result, DNS-ALG will be required\n   to\
    \ keep the address assignment (between private and external\n   addresses) valid\
    \ for a pre-configured period of time, past the DNS\n   query.\n   Alternately,\
    \ if there isn't a need for a name server within private\n   domain, private domain\
    \ hosts could simply point to an external name\n   server for external name lookup.\
    \  No ALG is required when the name\n   server is located in external domain.\n"
- title: 4.4 SMTP
  contents:
  - "4.4 SMTP\n   SMTP is a TCP based protocol ([SMTP]), used by Internet email\n\
    \   programs such as sendmail to send TCP-based email messages to well-\n   known\
    \ port 25.  The mail server may be located within or outside\n   private domain.\
    \  But, the server must be assigned a global name and\n   address, accessible\
    \ by external hosts.  When mail server is located\n   within private domain, inbound\
    \ SMTP sessions must be redirected to\n   the private host from its externally\
    \ assigned address.  No special\n   mapping is required when Mail server is located\
    \ in external domain.\n   Generally speaking, mail systems are configured such\
    \ that all users\n   specify a single centralized address (such as fooboo@company.com),\n\
    \   instead of including individual hosts (such as\n   fooboo@hostA.company.com).\
    \  The central address must have an MX\n   record specified in the DNS name server\
    \ accessible by external hosts.\n   In the majority of cases, mail messages do\
    \ not contain reference to\n   private IP addresses or links to content data via\
    \ names that are not\n   visible to outside.  However, some mail messages do contain\
    \ IP\n   addresses of the MTAs that relay the message in the \"Received: \"\n\
    \   field.  Some mail messages use IP addresses in place of FQDN for\n   debug\
    \ purposes or due to lack of a DNS record, in \"Mail From: \"\n   field.\n   If\
    \ one or more MTAs were to be located behind NAT in a private\n   domain, and\
    \ the mail messages are not secured by signature or\n   cryptographic keys, an\
    \ SMTP-ALG may be used to translate the IP\n   address information registered\
    \ by the MTAs.  If the MTAs have static\n   address mapping, the translation would\
    \ be valid across realms for\n   long periods of time.\n   The ability to trace\
    \ the mail route may be hampered or prevented by\n   NAT alone, without the ALG.\
    \  This can cause problems when debugging\n   mail problems or tracking down abusive\
    \ users of mail.\n"
- title: 4.5 SIP
  contents:
  - "4.5 SIP\n   SIP (Refer [SIP]) can run on either TCP or UDP, but by default on\
    \ the\n   same port 5060.\n   When used with UDP, a response to a SIP request\
    \ does not go to the\n   source port the request came from.  Rather the SIP message\
    \ contains\n   the port number the response should be sent to.  SIP makes use\
    \ of\n   ICMP port unreachable errors in the response to request\n   transmissions.\
    \  Request messages are usually sent on the connected\n   socket.  If responses\
    \ are sent to the source port in the request,\n   each thread handling a request\
    \ would have to listen on the socket it\n   sent the request on.  However, by\
    \ allowing responses to come to a\n   single port, a single thread can be used\
    \ for listening instead.\n   A server may prefer to place the source port of each\
    \ connected socket\n   in the message.  Then each thread can listen for responses\n\
    \   separately.  Since the port number for a response may not go to the\n   source\
    \ port of the request, SIP will not normally traverse a NAT and\n   would require\
    \ a SIP-ALG.\n   SIP messages carry arbitrary content, which is defined by a MIME\n\
    \   type.  For multimedia sessions, this is usually the Session\n   Description\
    \ Protocol (SDP RFC 2327).  SDP may specify IP addresses or\n   ports to be used\
    \ for the exchange of multimedia.  These may loose\n   significance when traversing\
    \ a NAT.  Thus a SIP-ALG would need the\n   intelligence to decipher and translate\
    \ realm-relevant information.\n   SIP carries URL's in its Contact, To and From\
    \ fields that specify\n   signaling addresses.  These URL's can contain IP addresses\
    \ or domain\n   names in the host port portion of the URL.  These may not be valid\n\
    \   once they traverse a NAT.\n   As an alternative to an SIP-ALG, SIP supports\
    \ a proxy server which\n   could co-reside with NAT and function on the globally\
    \ significant NAT\n   port.  Such a proxy would have a locally specific configuration.\n"
- title: 4.6 RealAudio
  contents:
  - "4.6 RealAudio\n   In default mode, RealAudio clients (say, in a private domain)\
    \ access\n   TCP port 7070 to initiate conversation with a real-audio server (say,\n\
    \   located an external domain) and to exchange control messages during\n   playback\
    \ (ex: pausing or stopping the audio stream).  Audio session\n   parameters are\
    \ embedded in the TCP control session as byte stream.\n   The actual audio traffic\
    \ is carried in the opposite direction on\n   incoming UDP based packets (originated\
    \ from the server) directed to\n   ports in the range of 6970-7170.\n   As a result,\
    \ RealAudio is broken by default on a traditional NAT\n   device.  A work around\
    \ for this would be for the ALG to examine the\n   TCP traffic to determine the\
    \ audio session parameters and selectively\n   enable inbound UDP sessions for\
    \ the ports agreed upon in the TCP\n   control session.  Alternately, the ALG\
    \ could simply redirect all\n   inbound UDP sessions directed to ports 6970-7170\
    \ to the client\n   address in the private domain.\n   For bi-Directional NAT,\
    \ you will not need an ALG.  Bi-directional NAT\n   could simply treat each of\
    \ the TCP and UDP sessions as 2 unrelated\n   sessions and perform IP and TCP/UDP\
    \ header level translations.\n   The readers may contact RealNetworks for detailed\
    \ guidelines on how\n   their applications can be made to work, traversing through\
    \ NAT and\n   firewall devices.\n"
- title: 4.7 H.323
  contents:
  - "4.7 H.323\n   H.323 is complex, uses dynamic ports, and includes multiple UDP\n\
    \   streams.  Here is a summary of the relevant issues:\n   An H.323 call is made\
    \ up of many different simultaneous connections.\n   At least two of the connections\
    \ are TCP.  For an audio-only\n   conference, there may be up to 4 different UDP\
    \ 'connections' made.\n   All connections except one are made to ephemeral (dynamic)\
    \ ports.\n   Calls can be initiated from the private as well as the external\n\
    \   domain.  For conferencing to be useful, external users need to be\n   able\
    \ to establish calls directly with internal users' desktop\n   systems.\n   The\
    \ addresses and port numbers are exchanged within the data stream\n   of the 'next\
    \ higher' connection.  For example, the port number for\n   the H.245 connection\
    \ is established within the Q.931 data stream.\n   (This makes it particularly\
    \ difficult for the ALG, which will be\n   required to modify the addresses inside\
    \ these data streams.)  To make\n   matters worse, it is possible in Q.931, for\
    \ example, to specify that\n   the H.245 connection should be secure (encrypted).\
    \  If a session is\n   encrypted, it is impossible for the ALG to decipher the\
    \ data stream,\n   unless it has access to the shared key.\n   Most of the control\
    \ information is encoded in ASN.1 (only the User-\n   User Information within\
    \ Q.931 Protocol Data Units, or PDUs, is\n   ASN.1-encoded (other parts of each\
    \ Q.931 PDU are not encoded).  For\n   those unfamiliar with ASN.1, suffice it\
    \ to say that it is a complex\n   encoding scheme, which does not end up with\
    \ fixed byte offsets for\n   address information.  In fact, the same version of\
    \ the same\n   application connecting to the same destination may negotiate to\n\
    \   include different options, changing the byte offsets.\n   Below is the protocol\
    \ exchange for a typical H.323 call between User\n   A and User B.  A's IP address\
    \ is 88.88.88.88 and B's IP address is\n   99.99.99.99.  Note that the Q.931 and\
    \ H.245 messages are encoded in\n   ASN.1 in the payload of an RTP packet.  So\
    \ to accomplish a connection\n   through a NAT device, an H.323-ALG will be required\
    \ to examine the\n   packet, decode the ASN.1, and translate the various H.323\
    \ control IP\n   addresses.\n   User A                                       \
    \           User B\n         A establishes connection to B on well-\n        \
    \ known Q.931 port (1720)\n         ----------------------------------------------->\n\
    \         Q.931 Setup caller address = 88.88.88.88\n                     caller\
    \ port    = 1120\n                     callee address = 99.99.99.99\n        \
    \             callee port    = 1720\n         <-----------------------------------------------\n\
    \         Q.931 Alerting\n         <-----------------------------------------------\n\
    \         Q.931 Connect H.245 address = 99.99.99.99\n                       H.245\
    \ port    = 1092\n         User A establishes connection to User B at\n      \
    \   99.99.99.99, port 1092\n         <---------------------------------------------->\n\
    \         Several H.245 messages are exchanged (Terminal\n         Capability\
    \ Set, Master Slave Determination and\n         their respective ACKs)\n     \
    \    <-----------------------------------------------\n         H.245 Open Logical\
    \ Channel, channel = 257\n                   RTCP address = 99.99.99.99\n    \
    \               RTCP port    = 1093\n         ----------------------------------------------->\n\
    \         H.245 Open Logical Channel Ack, channel = 257\n                   RTP\
    \ address = 88.88.88.88\n                   RTP port    = 2002\n             \
    \      (This is where User A would like RTP\n                    data sent to)\n\
    \                   RTCP address = 88.88.88.88\n                   RTCP port \
    \   = 2003\n         ----------------------------------------------->\n      \
    \   H.245 Open Logical Channel, channel = 257\n                   RTCP address\
    \ = 88.88.88.88\n                   RTCP port    = 2003\n         <-----------------------------------------------\n\
    \         H.245 Open Logical Channel Ack, channel = 257\n                   RTP\
    \ address = 99.99.99.99\n                   RTP port    = 1092\n             \
    \      (This is where User B would like RTP data\n                    sent to)\n\
    \                   RTCP address = 99.99.99.99\n                   RTP port  \
    \   = 1093\n   Also note that if an H.323 Gateway resided inside a NAT boundary,\
    \ the\n   ALG would have to be cognizant of the various gateway discovery\n  \
    \ schemes and adapt to those schemes as well.  Or if just the H.323\n   host/terminal\
    \ was inside the NAT boundary and tried to register with\n   a Gatekeeper, the\
    \ IP information in the registration messages would\n   have to be translated\
    \ by NAT.\n"
- title: 4.8 SNMP
  contents:
  - "4.8 SNMP\n   SNMP is a network management protocol based on UDP.  SNMP payload\
    \ may\n   contain IP addresses or may refer IP addresses through an index into\n\
    \   a table.  As a result, when devices within a private network are\n   managed\
    \ by an external node, SNMP packets transiting a NAT device may\n   contain information\
    \ that is not relevant in external domain.  In some\n   cases, as described in\
    \ [SNMP-ALG], an SNMP ALG may be used to\n   transparently convert realm-specific\
    \ addresses into globally unique\n   addresses.  Such an ALG assumes static address\
    \ mapping and bi-\n   directional NAT.  It can only work for the set of data types\
    \ (textual\n   conventions) understood by the SNMP-ALG implementation and for\
    \ a\n   given set of MIB modules.  Furthermore, replacing IP addresses in the\n\
    \   SNMP payload may lead to communication failures due to changes in\n   message\
    \ size or changes in the lexicographic ordering.\n   Making SNMP ALGs completely\
    \ transparent to all management\n   applications is not an achievable task.  The\
    \ ALGs will run into\n   problems with SNMPv3 security features, when authentication\
    \ (and\n   optionally privacy) is enabled, unless the ALG has access to security\n\
    \   keys.  [NAT-ARCH] also hints at potential issues with SNMP management\n  \
    \ via NAT.\n   Alternately,  SNMP proxies, as defined in [SNMP-APPL], may be used\
    \ in\n   conjunction with NAT to forward SNMP messages to external SNMP\n   engines\
    \ (and vice versa).  SNMP proxies are tailored to the private\n   domain context\
    \ and can hence operate independent of the specific\n   managed object types being\
    \ accessed.  The proxy solution will require\n   the external management application\
    \ to be aware of the proxy\n   forwarder and the individual nodes being managed\
    \ will need to be\n   configured to direct their SNMP traffic (notifications and\
    \ requests)\n   to the proxy forwarder.\n"
- title: 5.0 Protocols designed explicitly to work with NAT enroute
  contents:
  - '5.0 Protocols designed explicitly to work with NAT enroute

    '
- title: 5.1 Activision Games
  contents:
  - "5.1 Activision Games\n   Activision Games were designed to be NAT-friendly so\
    \ as not to\n   require an ALG for the games to work transparently through\n \
    \  traditional NAT devices.  Game players within a private domain can\n   play\
    \ with other players in the same domain or external domain.\n   Activision gaming\
    \ protocol is proprietary and is based on UDP.  The\n   address server uses UDP\
    \ port number 21157 and is expected to be\n   located in the global address realm.\n\
    \   Game players connect to the address server first, and send their\n   private\
    \ IP address information (such as private IP address and UDP\n   port number)\
    \ in the initial connect message.  The server notes\n   private address information\
    \ from the connect message and external\n   address information from the IP and\
    \ UDP headers.  The server then\n   sends both the private and external address\
    \ information of the game\n   player to all the other peer players.  At this point,\
    \ each game\n   player knows the private and public address information of every\n\
    \   other peer.  Subsequent to this, each client opens up symmetrical\n   direct\
    \ connection to each other and uses whichever address (private\n   or external)\
    \ works first.\n   Now, the clients can have a session directly with other clients\
    \ (or)\n   they can have session with other clients via the gaming server.  The\n\
    \   key is to allow reuse of the same (global address, assigned UDP port)\n  \
    \ tuple used for initial connection to the game server for all\n   subsequent\
    \ connections to the client.  A game player is recognized by\n   one of (private\
    \ address, UDP port) or (global address, assigned UDP\n   port) by all other peer\
    \ players.  So, the binding between tuples\n   should remain unchanged on NAT,\
    \ so long as the gaming player is in\n   session with one or multiple other players.\n\
    \   Opening a connection to a game server in external realm from a\n   private\
    \ host is no problem.  All NAT would have to do is provide\n   routing transparency\
    \ and retain the same private-to-external address\n   binding so long as there\
    \ is a minimum of one gaming session with an\n   external node.  But, an NAPT\
    \ configuration must allow multiple\n   simultaneous UDP connections on the same\
    \ assigned global\n   address/port.\n   The above approach has some problems.\
    \  For example, a client could\n   try contacting a private address, but that\
    \ private address could be\n   in use locally, when the private address at some\
    \ other realm is\n   meant. If the node that was contacted wrongfully has some\
    \ other\n   service or no service registered for the UDP port, the Activision\n\
    \   connect messages are expected to be simply dropped.  In the unlikely\n   event,\
    \ a registered application chooses to interpret the message, the\n   results can\
    \ be unpredictable.\n   The readers may refer to Activision for the proprietary,\
    \ detailed\n   information on the function and design of this protocol.\n"
- title: 6.0 Acknowledgements
  contents:
  - "6.0 Acknowledgements\n   The authors would like to express sincere thanks to\
    \ Bernard Aboba,\n   Bill Sommerfield, Dave Cridland, Greg Hudson, Henning Schulzrine,\n\
    \   Jeffrey Altman, Keith Moore, Thomas Narten, Vernon Shryver and others\n  \
    \ that had provided valuable input in preparing this document.  Special\n   thanks\
    \ to Dan Kegel for sharing the Activision games design\n   methodology.\n"
- title: 7.0 Security Considerations
  contents:
  - "7.0 Security Considerations\n   The security considerations outlined in [NAT-TERM]\
    \ are relevant to\n   all NAT devices.  This document does not warrant additional\
    \ security\n   considerations.\n"
- title: 8.0 References
  contents:
  - "8.0 References\n   [NAT-TERM]   Srisuresh, P. and M. Holdrege, \"IP Network Address\n\
    \                Translator (NAT) Terminology and Considerations\", RFC\n    \
    \            2663, August 1999.\n   [NAT-TRAD]   Srisuresh, P. and K. Egevang,\
    \ \"Traditional IP Network\n                Address Translator (Traditional NAT)\"\
    , RFC 3022, January\n                2001.\n   [H.323]      ITU-T SG16 H.323,\
    \ Intel white paper, \"H.323 and\n                Firewalls\", Dave Chouinard,\
    \ John Richardson, Milind\n                Khare (with further assistance from\
    \ Jamie Jason).\n   [SNMP-ALG]   Raz, D., Schoenwaelder, J. and B. Sugla, \"An\
    \ SNMP\n                Application Level Gateway for Payload Address\n      \
    \          Translation\", RFC 2962, October 2000.\n   [SNMP-APPL]  Levi, D., Meyer,\
    \ P. and B. Stewart, \"SNMP Applications\",\n                RFC 2573, April 1999.\n\
    \   [NAT-ARCH]   Hain, T. \"Architectural Implications of NAT\", RFC 2993,\n \
    \               November 2000.\n   [SMTP]       Postel, J., \"Simple Mail Transfer\
    \ Protocol\", STDl 10,\n                RFC 821, August 1982.\n   [FTP]      \
    \  Postel, J. and J. Reynolds, \"File Transfer Protocol\n                (FTP)\"\
    , STD 9, RFC 959, October 1985.\n   [SIP]        Handley, M., Schulzrinne, H.,\
    \ Schooler, E. and J.\n                Rosenberg, \"SIP: Session Initiation Protocol\"\
    , RFC 2543,\n                March 1999.\n   [X Windows]  Scheifler, B., \"FYI\
    \ on the X Window System\", FYI 6, RFC\n                1198, January 1991.\n\
    \   [RSVP]       Braden, R., Zhang. L., Berson. S., Herzog, S. and S.\n      \
    \          Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version\n        \
    \        1 Functional Specification\", RFC 2205, September 1997.\n   [DNS-TERMS]\
    \  Mockapetris, P., \"Domain Names - Concepts and\n                Facilities\"\
    , STD 13, RFC 1034, November 1987.\n   [DNS-IMPL]   Mockapetris, P., \"Domain\
    \ Names - Implementation and\n                Specification\", STD 13, RFC 1035,\
    \ November 1987.\n   [DNS-ALG]    Srisuresh, P., Tsirtsis, G., Akkiraju, P. and\
    \ A.\n                Heffernan, \"DNS extensions to Network Address\n       \
    \         Translators (DNS_ALG)\", RFC 2694, September 1999.\n   [IPsec]     \
    \ Kent, S. and R. Atkinson, \"Security Architecture for the\n                Internet\
    \ Protocol\", RFC 2401, November 1998.\n   [IPsec-ESP]  Kent, S. and R. Atkinson,\
    \ \"IP Encapsulating Security\n                Payload (ESP)\", RFC 2406, November\
    \ 1998.\n   [IPsec-AH]   Kent, S. and R. Atkinson, \"IP Authentication Header\"\
    ,\n                RFC 2402, November 1998.\n   [IPsec-DOCS] Thayer, R., Doraswamy,\
    \ N. and R. Glenn, \"IP Security\n                Document Roadmap\", RFC 2411,\
    \ November 1998.\n   [NAT-SEC]    Srisuresh, P., \"Security Model with Tunnel-mode\
    \ IPsec\n                for NAT Domains\", RFC 2709, October 1999.\n   [PRIV-ADDR]\
    \  Rekhter, Y., Moskowitz, B., Karrenberg, D., G. de Groot,\n                and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n                BCP\
    \ 5, RFC 1918, February 1996.\n   [ADDR-BEHA]  Carpenter, B., Crowcroft, J. and\
    \ Y. Rekhter, \"IPv4\n                Address Behaviour Today\", RFC 2101, February\
    \ 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Matt Holdrege\n   ipVerse\n   223 Ximeno Ave.\n   Long\
    \ Beach, CA 90803\n   EMail: matt@ipverse.com\n   Pyda Srisuresh\n   Jasmine Networks,\
    \ Inc.\n   3061 Zanker Road, Suite B\n   San Jose, CA 95134\n   U.S.A.\n   Phone:\
    \ (408) 895-5032\n   EMail: srisuresh@yahoo.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
