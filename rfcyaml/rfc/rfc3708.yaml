- title: __initial_text__
  contents:
  - "      Using TCP Duplicate Selective Acknowledgement (DSACKs) and\n         Stream\
    \ Control Transmission Protocol (SCTP) Duplicate\n        Transmission Sequence\
    \ Numbers (TSNs) to Detect Spurious\n                            Retransmissions\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   TCP and Stream Control Transmission Protocol (SCTP) provide\n  \
    \ notification of duplicate segment receipt through Duplicate Selective\n   Acknowledgement\
    \ (DSACKs) and Duplicate Transmission Sequence Number\n   (TSN) notification,\
    \ respectively.  This document presents\n   conservative methods of using this\
    \ information to identify\n   unnecessary retransmissions for various applications.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TCP [RFC793] and SCTP [RFC2960] provide notification of\
    \ duplicate\n   segment receipt through duplicate selective acknowledgment (DSACK)\n\
    \   [RFC2883] and Duplicate TSN notifications, respectively.  Using this\n   information,\
    \ a TCP or SCTP sender can generally determine when a\n   retransmission was sent\
    \ in error.  This document presents two methods\n   for using duplicate notifications.\
    \  The first method is simple and\n   can be used for accounting applications.\
    \  The second method is a\n   conservative algorithm to disambiguate unnecessary\
    \ retransmissions\n   from loss events for the purpose of undoing unnecessary\
    \ congestion\n   control changes.\n   This document is intended to outline reasonable\
    \ and safe algorithms\n   for detecting spurious retransmissions and discuss some\
    \ of the\n   considerations involved.  It is not intended to describe the only\n\
    \   possible method for achieving the goal, although the guidelines in\n   this\
    \ document should be taken into consideration when designing\n   alternate algorithms.\
    \  Additionally, this document does not outline\n   what a TCP or SCTP sender\
    \ may do after a spurious retransmission is\n   detected.  A number of proposals\
    \ have been developed (e.g.,\n   [RFC3522], [SK03], [BDA03]), but it is not yet\
    \ clear which of these\n   proposals are appropriate.  In addition, they all rely\
    \ on detecting\n   spurious retransmits and so can share the algorithm specified\
    \ in this\n   document.\n   Finally, we note that to simplify the text much of\
    \ the following\n   discussion is in terms of TCP DSACKs, while applying to both\
    \ TCP and\n   SCTP.\n   Terminology\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Counting Duplicate Notifications
  contents:
  - "2.  Counting Duplicate Notifications\n   For certain applications a straight\
    \ count of duplicate notifications\n   will suffice.  For instance, if a stack\
    \ simply wants to know (for\n   some reason) the number of spuriously retransmitted\
    \ segments,\n   counting all duplicate notifications for retransmitted segments\n\
    \   should work well.  Another application of this strategy is to monitor\n  \
    \ and adapt transport algorithms so that the transport is not sending\n   large\
    \ amounts of spurious data into the network.  For instance,\n   monitoring duplicate\
    \ notifications could be used by the Early\n   Retransmit [AAAB03] algorithm to\
    \ determine whether fast\n   retransmitting [RFC2581] segments with a lower than\
    \ normal duplicate\n   ACK threshold is working, or if segment reordering is causing\n\
    \   spurious retransmits.\n   More speculatively, duplicate notification has been\
    \ proposed as an\n   integral part of estimating TCP's total loss rate [AEO03]\
    \ for the\n   purposes of mitigating the impact of corruption-based losses on\n\
    \   transport protocol performance.  [EOA03] proposes altering the\n   transport's\
    \ congestion response to the fraction of losses that are\n   actually due to congestion\
    \ by requiring the network to provide the\n   corruption-based loss rate and making\
    \ the transport sender estimate\n   the total loss rate.  Duplicate notifications\
    \ are a key part of\n   estimating the total loss rate accurately [AEO03].\n"
- title: 3.  Congestion/Duplicate Disambiguation Algorithm
  contents:
  - "3.  Congestion/Duplicate Disambiguation Algorithm\n   When the purpose of detecting\
    \ spurious retransmissions is to \"undo\"\n   unnecessary changes made to the\
    \ congestion control state, as\n   suggested in [RFC2883], the data sender ideally\
    \ needs to determine:\n   (a) That spurious retransmissions in a particular window\
    \ of data do\n       not mask real segment loss (congestion).\n       For example,\
    \ assume segments N and N+1 are retransmitted even\n       though only segment\
    \ N was dropped by the network (thus, segment\n       N+1 was needlessly retransmitted).\
    \  When the sender receives the\n       notification that segment N+1 arrived\
    \ more than once it can\n       conclude that segment N+1 was needlessly resent.\
    \  However, it\n       cannot conclude that it is appropriate to revert the congestion\n\
    \       control state because the window of data contained at least one\n    \
    \   valid congestion indication (i.e., segment N was lost).\n   (b) That network\
    \ duplication is not the cause of the duplicate\n       notification.\n      \
    \ Determining whether a duplicate notification is caused by network\n       duplication\
    \ of a packet or a spurious retransmit is a nearly\n       impossible task in\
    \ theory.  Since [Pax97] shows that packet\n       duplication by the network\
    \ is rare, the algorithm in this section\n       simply ceases to function when\
    \ network duplication is detected\n       (by receiving a duplication notification\
    \ for a segment that was\n       not retransmitted by the sender).\n   The algorithm\
    \ specified below gives reasonable, but not complete,\n   protection against both\
    \ of these cases.\n   We assume the TCP sender has a data structure to hold selective\n\
    \   acknowledgment information (e.g., as outlined in [RFC3517]).  The\n   following\
    \ steps require an extension of such a 'scoreboard' to\n   incorporate a slightly\
    \ longer history of retransmissions than called\n   for in [RFC3517].  The following\
    \ steps MUST be taken upon the receipt\n   of each DSACK or duplicate TSN notification:\n\
    \   (A) Check the corresponding sequence range or TSN to determine\n       whether\
    \ the segment has been retransmitted.\n       (A.1) If the SACK scoreboard is\
    \ empty (i.e., the TCP sender has\n             received no SACK information from\
    \ the receiver) and the\n             left edge of the incoming DSACK is equal\
    \ to SND.UNA,\n             processing of this DSACK MUST be terminated and the\n\
    \             congestion control state MUST NOT be reverted during the\n     \
    \        current window of data.  This clause intends to cover the\n         \
    \    case when an entire window of acknowledgments have been\n             dropped\
    \ by the network.  In such a case, the reverse path\n             seems to be\
    \ in a congested state and so reducing TCP's\n             sending rate is the\
    \ conservative approach.\n       (A.2) If the segment was retransmitted exactly\
    \ one time, mark it\n             as a duplicate.\n       (A.3) If the segment\
    \ was retransmitted more than once processing\n             of this DSACK MUST\
    \ be terminated and the congestion control\n             state MUST NOT be reverted\
    \ to its previous state during the\n             current window of data.\n   \
    \    (A.4) If the segment was not retransmitted the incoming DSACK\n         \
    \    indicates that the network duplicated the segment in\n             question.\
    \  Processing of this DSACK MUST be terminated.  In\n             addition, the\
    \ algorithm specified in this document MUST NOT\n             be used for the\
    \ remainder of the connection, as future\n             DSACK reports may be indicating\
    \ network duplication rather\n             than unnecessary retransmission.  Note\
    \ that some techniques\n             to further disambiguate network duplication\
    \ from\n             unnecessary retransmission (e.g., the TCP timestamp option\n\
    \             [RFC1323]) may be used to refine the algorithm in this\n       \
    \      document further.  Using such a technique in conjunction\n            \
    \ with an algorithm similar to the one presented herein may\n             allow\
    \ for the continued use of the algorithm in the face of\n             duplicated\
    \ segments.  We do not delve into such an\n             algorithm in this document\
    \ due the current rarity of\n             network duplication.  However, future\
    \ work should include\n             tackling this problem.\n   (B) Assuming processing\
    \ is allowed to continue (per the (A) rules),\n       check all retransmitted\
    \ segments in the previous window of data.\n       (B.1) If all segments or chunks\
    \ marked as retransmitted have also\n             been marked as acknowledged\
    \ and duplicated, we conclude\n             that all retransmissions in the previous\
    \ window of data\n             were spurious and no loss occurred.\n       (B.2)\
    \ If any segment or chunk is still marked as retransmitted\n             but not\
    \ marked as duplicate, there are outstanding\n             retransmissions that\
    \ could indicate loss within this window\n             of data.  We can make no\
    \ conclusions based on this\n             particular DSACK/duplicate TSN notification.\n\
    \   In addition to keeping the state mentioned in [RFC3517] (for TCP) and\n  \
    \ [RFC2960] (for SCTP), an implementation of this algorithm must track\n   all\
    \ sequence numbers or TSNs that have been acknowledged as\n   duplicates.\n"
- title: 4.  Related Work
  contents:
  - "4.  Related Work\n   In addition to the mechanism for detecting spurious retransmits\n\
    \   outlined in this document, several other proposals for finding\n   needless\
    \ retransmits have been developed.\n   [BA02] uses the algorithm outlined in this\
    \ document as the basis for\n   investigating several methods to make TCP more\
    \ robust to reordered\n   packets.\n   The Eifel detection algorithm [RFC3522]\
    \ uses the TCP timestamp option\n   [RFC1323] to determine whether the ACK for\
    \ a given retransmit is for\n   the original transmission or a retransmission.\
    \  More generally,\n   [LK00] outlines the benefits of detecting spurious retransmits\
    \ and\n   reverting from needless congestion control changes using the\n   timestamp-based\
    \ scheme or a mechanism that uses a \"retransmit bit\" to\n   flag retransmits\
    \ (and ACKs of retransmits).  The Eifel detection\n   algorithm can detect spurious\
    \ retransmits more rapidly than a DSACK-\n   based scheme.  However, the tradeoff\
    \ is that the overhead of the 12-\n   byte timestamp option must be incurred in\
    \ every packet transmitted\n   for Eifel to function.\n   The F-RTO scheme [SK03]\
    \ slightly alters TCP's sending pattern\n   immediately following a retransmission\
    \ timeout and then observes the\n   pattern of the returning ACKs.  This pattern\
    \ can indicate whether the\n   retransmitted segment was needed.  The advantage\
    \ of F-RTO is that the\n   algorithm only needs to be implemented on the sender\
    \ side of the TCP\n   connection and that nothing extra needs to cross the network\
    \ (e.g.,\n   DSACKs, timestamps, special flags, etc.).  The downside is that the\n\
    \   algorithm is a heuristic that can be confused by network pathologies\n   (e.g.,\
    \ duplication or reordering of key packets).  Finally, note that\n   F-RTO only\
    \ works for spurious retransmits triggered by the\n   transport's retransmission\
    \ timer.\n   Finally, [AP99] briefly investigates using the time between\n   retransmitting\
    \ a segment via the retransmission timeout and the\n   arrival of the next ACK\
    \ as an indicator of whether the retransmit was\n   needed.  The scheme compares\
    \ this time delta with a fraction (f) of\n   the minimum RTT observed thus far\
    \ on the connection.  If the time\n   delta is less than f*minRTT then the retransmit\
    \ is labeled spurious.\n   When f=1/2 the algorithm identifies roughly 59% of\
    \ the needless\n   retransmission timeouts and identifies needed retransmits only\
    \ 2.5%\n   of the time.  As with F-RTO, this scheme only detects spurious\n  \
    \ retransmits sent by the transport's retransmission timer.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   It is possible for the receiver to falsely indicate\
    \ spurious\n   retransmissions in the case of actual loss, potentially causing\
    \ a TCP\n   or SCTP sender to inaccurately conclude that no loss took place (and\n\
    \   possibly cause inappropriate changes to the senders congestion\n   control\
    \ state).\n   Consider the following scenario: A receiver watches every segment\
    \ or\n   chunk that arrives and acknowledges any segment that arrives out of\n\
    \   order by more than some threshold amount as a duplicate, assuming\n   that\
    \ it is a retransmission.  A sender using the above algorithm will\n   assume\
    \ that the retransmission was spurious.\n   The ECN nonce sum proposal [RFC3540]\
    \ could possibly help mitigate the\n   ability of the receiver to hide real losses\
    \ from the sender with\n   modest extension.  In the common case of receiving\
    \ an original\n   transmission and a spurious retransmit a receiver will have\
    \ received\n   the nonce from the original transmission and therefore can \"prove\"\
    \ to\n   the sender that the duplication notification is valid.  In the case\n\
    \   when the receiver did not receive the original and is trying to\n   improperly\
    \ induce the sender into transmitting at an inappropriately\n   high rate, the\
    \ receiver will not know the ECN nonce from the original\n   segment and therefore\
    \ will probabilistically not be able to fool the\n   sender for long.  [RFC3540]\
    \ calls for disabling nonce sums on\n   duplicate ACKs, which means that the nonce\
    \ sum is not directly\n   suitable for use as a mitigation to the problem of receivers\
    \ lying\n   about DSACK information.  However, future efforts may be able to use\n\
    \   [RFC3540] as a starting point for building protection should it be\n   needed.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   Sourabh Ladha and Reiner Ludwig made several useful comments\
    \ on an\n   earlier version of this document.  The second author thanks BBN\n\
    \   Technologies and NASA's Glenn Research Center for supporting this\n   work.\n"
- title: 7. References
  contents:
  - '7. References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC\n             793, September 1981.\n   [RFC2119] Bradner, S., \"\
    Key words for use in RFCs to Indicate\n             Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2883] Floyd, S., Mahdavi, J., Mathis, M. and\
    \ M. Podolsky, \"An\n             Extension to the Selective Acknowledgement (SACK)\
    \ Option\n             for TCP\", RFC 2883, July 2000.\n   [RFC2960] Stewart,\
    \ R., Xie, Q., Morneault, K., Sharp, C.,\n             Schwarzbauer, H., Taylor,\
    \ T., Rytina, I., Kalla, M., Zhang,\n             L. and V. Paxson, \"Stream Control\
    \ Transmission Protocol\",\n             RFC 2960, October 2000.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [AAAB03]  Allman, M., Avrachenkov, K., Ayesta,\
    \ U. and J. Blanton,\n             \"Early Retransmit for TCP\", Work in Progress,\
    \ June 2003.\n   [AEO03]   Allman, M., Eddy, E. and S. Ostermann, \"Estimating\
    \ Loss\n             Rates With TCP\", Work in Progress, August 2003.\n   [AP99]\
    \    Allman, M. and V. Paxson, \"On Estimating End-to-End Network\n          \
    \   Path Properties\", SIGCOMM 99.\n   [BA02]    Blanton, E. and M. Allman.  On\
    \ Making TCP More Robust to\n             Packet Reordering.  ACM Computer Communication\
    \ Review,\n             32(1), January 2002.\n   [BDA03]   Blanton, E., Dimond,\
    \ R. and M. Allman, \"Practices for TCP\n             Senders in the Face of Segment\
    \ Reordering\", Work in\n             Progress, February 2003.\n   [EOA03]   Eddy,\
    \ W., Ostermann, S. and M. Allman, \"New Techniques for\n             Making Transport\
    \ Protocols Robust to Corruption-Based\n             Loss\", Work in Progress,\
    \ July 2003.\n   [LK00]    R. Ludwig, R. H. Katz.  The Eifel Algorithm: Making\
    \ TCP\n             Robust Against Spurious Retransmissions.  ACM Computer\n \
    \            Communication Review, 30(1), January 2000.\n   [Pax97]   V. Paxson.\
    \  End-to-End Internet Packet Dynamics.  In ACM\n             SIGCOMM, September\
    \ 1997.\n   [RFC1323] Jacobson, V., Braden, R. and D. Borman,  \"TCP Extensions\n\
    \             for High Performance\", RFC 1323, May 1992.\n   [RFC3517] Blanton,\
    \ E., Allman, M., Fall, K. and L. Wang, \"A\n             Conservative Selective\
    \ Acknowledgment (SACK)-based Loss\n             Recovery Algorithm for TCP\"\
    , RFC 3517, April 2003.\n   [RFC3522] Ludwig, R. and M. Meyer, \"The Eifel Detection\
    \ Algorithm for\n             TCP,\" RFC 3522, April 2003.\n   [RFC3540] Spring,\
    \ N., Wetherall, D. and D. Ely, \"Robust Explicit\n             Congestion Notification\
    \ (ECN) Signaling with Nonces\", RFC\n             3540, June 2003.\n   [SK03]\
    \    Sarolahti, P. and M. Kojo, \"F-RTO: An Algorithm for\n             Detecting\
    \ Spurious Retransmission Timeouts with TCP and\n             SCTP\", Work in\
    \ Progress, June 2003.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Ethan Blanton\n   Purdue University Computer Sciences\n\
    \   1398 Computer Science Building\n   West Lafayette, IN  47907\n   EMail: eblanton@cs.purdue.edu\n\
    \   Mark Allman\n   ICSI Center for Internet Research\n   1947 Center Street,\
    \ Suite 600\n   Berkeley, CA 94704-1198\n   Phone: 216-243-7361\n   EMail: mallman@icir.org\n\
    \   http://www.icir.org/mallman/\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004). \
    \ This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
