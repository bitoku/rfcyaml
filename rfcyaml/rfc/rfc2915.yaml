- title: __initial_text__
  contents:
  - '        The Naming Authority Pointer (NAPTR) DNS Resource Record

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000). All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a Domain Name System (DNS) resource record\n\
    \   which specifies a regular expression based rewrite rule that, when\n   applied\
    \ to an existing string, will produce a new domain label or\n   Uniform Resource\
    \ Identifier (URI).  Depending on the value of the\n   flags field of the resource\
    \ record, the resulting domain label or URI\n   may be used in subsequent queries\
    \ for the Naming Authority Pointer\n   (NAPTR) resource records (to delegate the\
    \ name lookup) or as the\n   output of the entire process for which this system\
    \ is used (a\n   resolution server for URI resolution, a service URI for ENUM\
    \ style\n   e.164 number to URI mapping, etc).\n   This allows the DNS to be used\
    \ to lookup services for a wide variety\n   of resource names (including URIs)\
    \ which are not in domain name\n   syntax.  Reasons for doing this range from\
    \ URN Resource Discovery\n   Systems to moving out-of-date services to new domains.\n\
    \   This document updates the portions of RFC 2168 specifically dealing\n   with\
    \ the definition of the NAPTR records and how other, non-URI\n   specific applications,\
    \ might use NAPTR.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  NAPTR RR Format  . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   3.  Substitution Expression Grammar  . . . . . . . . . . . . .\
    \ .   7\n   4.  The Basic NAPTR Algorithm  . . . . . . . . . . . . . . . . . \
    \  8\n   5.  Concerning How NAPTR Uses SRV Records  . . . . . . . . . . .   9\n\
    \   6.  Application Specifications . . . . . . . . . . . . . . . . .  10\n   7.\
    \  Examples . . . . . . . . . . . . . . . . . . . . . . . . . .  10\n   7.1 Example\
    \ 1  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n   7.2 Example 2 \
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  12\n   7.3 Example 3  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  13\n   8.  DNS Packet Format\
    \  . . . . . . . . . . . . . . . . . . . . .  13\n   9.  Master File Format .\
    \ . . . . . . . . . . . . . . . . . . . .  14\n   10. Advice for DNS Administrators\
    \  . . . . . . . . . . . . . . .  14\n   11. Notes  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  15\n   12. IANA Considerations  . . . . . . . .\
    \ . . . . . . . . . . . .  15\n   13. Security Considerations  . . . . . . . .\
    \ . . . . . . . . . .  15\n   14. Acknowledgments  . . . . . . . . . . . . . .\
    \ . . . . . . . .  16\n       References . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  16\n       Authors' Addresses . . . . . . . . . . . . . . . . .\
    \ . . . .  17\n       Full Copyright Statement . . . . . . . . . . . . . . . .\
    \ . .  18\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This RR was originally produced by the URN Working Group\
    \ [3] as a way\n   to encode rule-sets in DNS so that the delegated sections of\
    \ a URI\n   could be decomposed in such a way that they could be changed and re-\n\
    \   delegated over time.  The result was a Resource Record that included\n   a\
    \ regular expression that would be used by a client program to\n   rewrite a string\
    \ into a domain name.  Regular expressions were chosen\n   for their compactness\
    \ to expressivity ratio allowing for a great deal\n   of information to be encoded\
    \ in a rather small DNS packet.\n   The function of rewriting a string according\
    \ to the rules in a record\n   has usefulness in several different applications.\
    \  This document\n   defines the basic assumptions to which all of those applications\
    \ must\n   adhere to.  It does not define the reasons the rewrite is used, what\n\
    \   the expected outcomes are, or what they are used for.  Those are\n   specified\
    \ by applications that define how they use the NAPTR record\n   and algorithms\
    \ within their contexts.\n   Flags and other fields are also specified in the\
    \ RR to control the\n   rewrite procedure in various ways or to provide information\
    \ on how to\n   communicate with the host at the domain name that was the result\
    \ of\n   the rewrite.\n   The final result is a RR that has several fields that\
    \ interact in a\n   non-trivial but implementable way.  This document specifies\
    \ those\n   fields and their values.\n   This document does not define applications\
    \ that utilizes this rewrite\n   functionality. Instead it specifies just the\
    \ mechanics of how it is\n   done.  Why its done, what the rules concerning the\
    \ inputs, and the\n   types of rules used are reserved for other documents that\
    \ fully\n   specify a particular application.  This separation is due to several\n\
    \   different applications all wanting to take advantage of the rewrite\n   rule\
    \ lookup process.  Each one has vastly different reasons for why\n   and how it\
    \ uses the service, thus requiring that the definition of\n   the service be generic.\n\
    \      The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\n\
    \      NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \n      in this document are to be interpreted as described in RFC 2119.\n   \
    \   All references to Uniform Resource Identifiers in this document\n      adhere\
    \ to the 'absoluteURI' production of the \"Collected ABNF\"\n      found in RFC\
    \ 2396 [9].  Specifically, the semantics of URI\n      References do not apply\
    \ since the concept of a Base makes no sense\n      here.\n"
- title: 2. NAPTR RR Format
  contents:
  - "2. NAPTR RR Format\n   The format of the NAPTR RR is given below.  The DNS type\
    \ code [1] for\n   NAPTR is 35.\n   Domain TTL Class Type Order Preference Flags\
    \ Service Regexp\n   Replacement\n   Domain\n      The domain name to which this\
    \ resource record refers.  This is the\n      'key' for this entry in the rule\
    \ database.  This value will either\n      be the first well known key (<something>.uri.arpa\
    \ for example) or\n      a new key that is the output of a replacement or regexp\
    \ rewrite.\n      Beyond this, it has the standard DNS requirements [1].\n   TTL\n\
    \      Standard DNS meaning [1].\n   Class\n      Standard DNS meaning [1].\n\
    \   Type\n      The Type Code [1] for NAPTR is 35.\n   Order\n      A 16-bit unsigned\
    \ integer specifying the order in which the NAPTR\n      records MUST be processed\
    \ to ensure the correct ordering of\n      rules.  Low numbers are processed before\
    \ high numbers, and once a\n      NAPTR is found whose rule \"matches\" the target,\
    \ the client MUST\n      NOT consider any NAPTRs with a higher value for order\
    \ (except as\n      noted below for the Flags field).\n   Preference\n      A\
    \ 16-bit unsigned integer that specifies the order in which NAPTR\n      records\
    \ with equal \"order\" values SHOULD be processed, low\n      numbers being processed\
    \ before high numbers.  This is similar to\n      the preference field in an MX\
    \ record, and is used so domain\n      administrators can direct clients towards\
    \ more capable hosts or\n      lighter weight protocols.  A client MAY look at\
    \ records with\n      higher preference values if it has a good reason to do so\
    \ such as\n      not understanding the preferred protocol or service.\n      The\
    \ important difference between Order and Preference is that\n      once a match\
    \ is found the client MUST NOT consider records with a\n      different Order\
    \ but they MAY process records with the same Order\n      but different Preferences.\
    \  I.e., Preference is used to give weight\n      to rules that are considered\
    \ the same from an authority\n      standpoint but not from a simple load balancing\
    \ standpoint.\n   Flags\n      A <character-string> containing flags to control\
    \ aspects of the\n      rewriting and interpretation of the fields in the record.\
    \  Flags\n      are single characters from the set [A-Z0-9].  The case of the\n\
    \      alphabetic characters is not significant.\n      At this time only four\
    \ flags, \"S\", \"A\", \"U\", and \"P\", are\n      defined.  The \"S\", \"A\"\
    \ and \"U\" flags denote a terminal lookup.\n      This means that this NAPTR\
    \ record is the last one and that the\n      flag determines what the next stage\
    \ should be.  The \"S\" flag\n      means that the next lookup should be for SRV\
    \ records [4].  See\n      Section 5 for additional information on how NAPTR uses\
    \ the SRV\n      record type.  \"A\" means that the next lookup should be for\
    \ either\n      an A, AAAA, or A6 record.  The \"U\" flag means that the next\
    \ step\n      is not a DNS lookup but that the output of the Regexp field is an\n\
    \      URI that adheres to the 'absoluteURI' production found in the\n      ABNF\
    \ of RFC 2396 [9].  Since there may be applications that use\n      NAPTR to also\
    \ lookup aspects of URIs, implementors should be\n      aware that this may cause\
    \ loop conditions and should act\n      accordingly.\n      The \"P\" flag says\
    \ that the remainder of the application side\n      algorithm shall be carried\
    \ out in a Protocol-specific fashion.\n      The new set of rules is identified\
    \ by the Protocol specified in\n      the Services field.  The record that contains\
    \ the 'P' flag is the\n      last record that is interpreted by the rules specified\
    \ in this\n      document.  The new rules are dependent on the application for\n\
    \      which they are being used and the protocol specified.  For\n      example,\
    \ if the application is a URI RDS and the protocol is WIRE\n      then the new\
    \ set of rules are governed by the algorithms\n      surrounding the WIRE HTTP\
    \ specification and not this document.\n      The remaining alphabetic flags are\
    \ reserved for future versions\n      of the NAPTR specification.  The numeric\
    \ flags may be used for\n      local experimentation.  The S, A, U and P flags\
    \ are all mutually\n      exclusive, and resolution libraries MAY signal an error\
    \ if more\n      than one is given.  (Experimental code and code for assisting\
    \ in\n      the creation of NAPTRs would be more likely to signal such an\n  \
    \    error than a client such as a browser).  It is anticipated that\n      multiple\
    \ flags will be allowed in the future, so implementers\n      MUST NOT assume\
    \ that the flags field can only contain 0 or 1\n      characters.  Finally, if\
    \ a client encounters a record with an\n      unknown flag, it MUST ignore it\
    \ and move to the next record.  This\n      test takes precedence even over the\
    \ \"order\" field.  Since flags\n      can control the interpretation placed on\
    \ fields, a novel flag\n      might change the interpretation of the regexp and/or\
    \ replacement\n      fields such that it is impossible to determine if a record\n\
    \      matched a given target.\n      The \"S\", \"A\", and \"U\"  flags are called\
    \ 'terminal' flags since\n      they halt the looping rewrite algorithm.  If those\
    \ flags are not\n      present, clients may assume that another NAPTR RR exists\
    \ at the\n      domain name produced by the current rewrite rule.  Since the \"\
    P\"\n      flag specifies a new algorithm, it may or may not be 'terminal'.\n\
    \      Thus, the client cannot assume that another NAPTR exists since\n      this\
    \ case is determined elsewhere.\n      DNS servers MAY interpret these flags and\
    \ values and use that\n      information to include appropriate SRV and A,AAAA,\
    \ or A6 records\n      in the additional information portion of the DNS packet.\
    \  Clients\n      are encouraged to check for additional information but are not\n\
    \      required to do so.\n   Service\n      Specifies the service(s) available\
    \ down this rewrite path.  It may\n      also specify the particular protocol\
    \ that is used to talk with a\n      service.  A protocol MUST be specified if\
    \ the flags field states\n      that the NAPTR is terminal.  If a protocol is\
    \ specified, but the\n      flags field does not state that the NAPTR is terminal,\
    \ the next\n      lookup MUST be for a NAPTR.  The client MAY choose not to perform\n\
    \      the next lookup if the protocol is unknown, but that behavior\n      MUST\
    \ NOT be relied upon.\n      The service field may take any of the values below\
    \ (using the\n      Augmented BNF of RFC 2234 [5]):\n                 service_field\
    \ = [ [protocol] *(\"+\" rs)]\n                 protocol      = ALPHA *31ALPHANUM\n\
    \                 rs            = ALPHA *31ALPHANUM\n                 ; The protocol\
    \ and rs fields are limited to 32\n                 ; characters and must start\
    \ with an alphabetic.\n      For example, an optional protocol specification followed\
    \ by 0 or\n      more resolution services.  Each resolution service is indicated\
    \ by\n      an initial '+' character.\n      Note that the empty string is also\
    \ a valid service field.  This\n      will typically be seen at the beginning\
    \ of a series of rules,\n      when it is impossible to know what services and\
    \ protocols will be\n      offered by a particular service.\n      The actual\
    \ format of the service request and response will be\n      determined by the\
    \ resolution protocol, and is the subject for\n      other documents.  Protocols\
    \ need not offer all services.  The\n      labels for service requests shall be\
    \ formed from the set of\n      characters [A-Z0-9].  The case of the alphabetic\
    \ characters is\n      not significant.\n      The list of \"valid\" protocols\
    \ for any given NAPTR record is any\n      protocol that implements some or all\
    \ of the services defined for\n      a NAPTR application.  Currently, THTTP [6]\
    \ is the only protocol\n      that is known to make that claim at the time of\
    \ publication.  Any\n      other protocol that is to be used must have documentation\n\
    \      specifying:\n      *  how it implements the services of the application\n\
    \      *  how it is to appear in the NAPTR record (i.e., the string id\n     \
    \    of the protocol)\n      The list of valid Resolution Services is defined\
    \ by the documents\n      that specify individual NAPTR based applications.\n\
    \      It is worth noting that the interpretation of this field is\n      subject\
    \ to being changed by new flags, and that the current\n      specification is\
    \ oriented towards telling clients how to talk\n      with a URN resolver.\n \
    \  Regexp\n      A STRING containing a substitution expression that is applied\
    \ to\n      the original string held by the client in order to construct the\n\
    \      next domain name to lookup.  The grammar of the substitution\n      expression\
    \ is given in the next section.\n      The regular expressions MUST NOT be used\
    \ in a cumulative fashion,\n      that is, they should only be applied to the\
    \ original string held\n      by the client, never to the domain name produced\
    \ by a previous\n      NAPTR rewrite.  The latter is tempting in some applications\
    \ but\n      experience has shown such use to be extremely fault sensitive,\n\
    \      very error prone, and extremely difficult to debug.\n   Replacement\n \
    \     The next NAME to query for NAPTR, SRV, or address records\n      depending\
    \ on the value of the flags field.  This MUST be a fully\n      qualified domain-name.\
    \ Unless and until permitted by future\n      standards action, name compression\
    \ is not to be used for this\n      field.\n"
- title: 3. Substitution Expression Grammar
  contents:
  - "3. Substitution Expression Grammar\n   The content of the regexp field is a substitution\
    \ expression.  True\n   sed(1) and Perl style substitution expressions are not\
    \ appropriate\n   for use in this application for a variety of reasons stemming\
    \ from\n   internationalization requirements and backref limitations, therefore\n\
    \   the contents of the regexp field MUST follow the grammar below:\n"
- title: subst_expr   = delim-char  ere  delim-char  repl  delim-char  *flags
  contents:
  - 'subst_expr   = delim-char  ere  delim-char  repl  delim-char  *flags

    '
- title: delim-char   = "/" / "!" / ... <Any non-digit or non-flag character
  contents:
  - "delim-char   = \"/\" / \"!\" / ... <Any non-digit or non-flag character\n   \
    \            other than backslash '\\'. All occurances of a delim_char\n     \
    \          in a subst_expr must be the same character.>\n"
- title: ere          = POSIX Extended Regular Expression
  contents:
  - 'ere          = POSIX Extended Regular Expression

    '
- title: repl         = 1 * ( OCTET /  backref )
  contents:
  - 'repl         = 1 * ( OCTET /  backref )

    '
- title: backref      = "\" 1POS_DIGIT
  contents:
  - 'backref      = "\" 1POS_DIGIT

    '
- title: flags        = "i"
  contents:
  - 'flags        = "i"

    '
- title: POS_DIGIT    = %x31-39                 ; 0 is not an allowed backref
  contents:
  - "POS_DIGIT    = %x31-39                 ; 0 is not an allowed backref\n   The\
    \ definition of a POSIX Extended Regular Expression can be found in\n   [8], section\
    \ 2.8.4.\n   The result of applying the substitution expression to the original\n\
    \   URI MUST result in either a string that obeys the syntax for DNS\n   domain-names\
    \ [1] or a URI [9] if the Flags field contains a 'u'.\n   Since it is possible\
    \ for the regexp field to be improperly specified,\n   such that a non-conforming\
    \ domain-name can be constructed, client\n   software SHOULD verify that the result\
    \ is a legal DNS domain-name\n   before making queries on it.\n   Backref expressions\
    \ in the repl portion of the substitution\n   expression are replaced by the (possibly\
    \ empty) string of characters\n   enclosed by '(' and ')' in the ERE portion of\
    \ the substitution\n   expression. N is a single digit from 1 through 9, inclusive.\
    \  It\n   specifies the N'th backref expression, the one that begins with the\n\
    \   N'th '(' and continues to the matching ')'.  For example, the ERE\n      \
    \                      (A(B(C)DE)(F)G)\n         has backref expressions:\n  \
    \                          \\1  = ABCDEFG\n                            \\2  =\
    \ BCDE\n                            \\3  = C\n                            \\4\
    \  = F\n                            \\5..\\9  = error - no matching subexpression\n\
    \   The \"i\" flag indicates that the ERE matching SHALL be performed in a\n \
    \  case-insensitive fashion. Furthermore, any backref replacements MAY\n   be\
    \ normalized to lower case when the \"i\" flag is given.\n   The first character\
    \ in the substitution expression shall be used as\n   the character that delimits\
    \ the components of the substitution\n   expression.  There must be exactly three\
    \ non-escaped occurrences of\n   the delimiter character in a substitution expression.\
    \  Since escaped\n   occurrences of the delimiter character will be interpreted\
    \ as\n   occurrences of that character, digits MUST NOT be used as delimiters.\n\
    \   Backrefs would be confused with literal digits were this allowed.\n   Similarly,\
    \ if flags are specified in the substitution expression, the\n   delimiter character\
    \ must not also be a flag character.\n"
- title: 4. The Basic NAPTR Algorithm
  contents:
  - "4. The Basic NAPTR Algorithm\n   The behavior and meaning of the flags and services\
    \ assume an\n   algorithm where the output of one rewrite is a new key that points\
    \ to\n   another rule.  This looping algorithm allows NAPTR records to\n   incrementally\
    \ specify a complete rule.  These incremental rules can\n   be delegated which\
    \ allows other entities to specify rules so that one\n   entity does not need\
    \ to understand _all_ rules.\n   The algorithm starts with a string and some known\
    \ key (domain).\n   NAPTR records for this key are retrieved, those with unknown\
    \ Flags or\n   inappropriate Services are discarded and the remaining records\
    \ are\n   sorted by their Order field.  Within each value of Order, the records\n\
    \   are further sorted by the Preferences field.\n   The records are examined\
    \ in sorted order until a matching record is\n   found.  A record is considered\
    \ a match iff:\n   o  it has a Replacement field value instead of a Regexp field\
    \ value.\n   o  or the Regexp field matches the string held by the client.\n \
    \  The first match MUST be the match that is used.  Once a match is\n   found,\
    \ the Services field is examined for whether or not this rule\n   advances toward\
    \ the desired result.  If so, the rule is applied to\n   the target string.  If\
    \ not, the process halts.  The domain that\n   results from the regular expression\
    \ is then used as the domain of the\n   next loop through the NAPTR algorithm.\
    \  Note that the same target\n   string is used throughout the algorithm.\n  \
    \ This looping is extremely important since it is the method by which\n   complex\
    \ rules are broken down into manageable delegated chunks.  The\n   flags fields\
    \ simply determine at which point the looping should stop\n   (or other specialized\
    \ behavior).\n   Since flags are valid at any level of the algorithm, the degenerative\n\
    \   case is to never loop but to look up the NAPTR and then stop.  In\n   many\
    \ specialized cases this is all that is needed.  Implementors\n   should be aware\
    \ that the degenerative case should not become the\n   common case.\n"
- title: 5. Concerning How NAPTR Uses SRV Records
  contents:
  - "5. Concerning How NAPTR Uses SRV Records\n   When the SRV record type was originally\
    \ specified it assumed that the\n   client did not know the specific domain-name\
    \ before hand.  The client\n   would construct a domain-name more in the form\
    \ of a question than the\n   usual case of knowing ahead of time that the domain-name\
    \ should\n   exist.  I.e., if the client wants to know if there is a TCP based\n\
    \   HTTP server running at a particular domain, the client would\n   construct\
    \ the domain-name _http._tcp.somedomain.com and ask the DNS\n   if that records\
    \ exists. The underscores are used to avoid collisions\n   with potentially 'real'\
    \ domain-names.\n   In the case of NAPTR, the actual domain-name is specified\
    \ by the\n   various fields in the NAPTR record.  In this case the client isn't\n\
    \   asking a question but is instead attempting to get at information\n   that\
    \ it has been told exists in an SRV record at that particular\n   domain-name.\
    \  While this usage of SRV is slightly different than the\n   SRV authors originally\
    \ intended it does not break any of the\n   assumptions concerning what SRV contains.\
    \  Also, since the NAPTR\n   explicitly spells out the domain-name for which an\
    \ SRV exists, that\n   domain-name MUST be used in SRV queries with NO transformations.\
    \  Any\n   given NAPTR record may result in a domain-name to be used for SRV\n\
    \   queries that may or may not contain the SRV standardized underscore\n   characters.\
    \  NAPTR applications that make use of SRV MUST NOT attempt\n   to understand\
    \ these domains or use them according to how the SRV\n   specification structures\
    \ its query domains.\n"
- title: 6. Application Specifications
  contents:
  - "6. Application Specifications\n   It should be noted that the NAPTR algorithm\
    \ is the basic assumption\n   about how NAPTR works.  The reasons for the rewrite\
    \ and the expected\n   output and its use are specified by documents that define\
    \ what\n   applications the NAPTR record and algorithm are used for.  Any\n  \
    \ document that defines such an application must define the following:\n   o \
    \ The first known domain-name or how to build it\n   o  The valid Services and\
    \ Protocols\n   o  What the expected use is for the output of the last rewrite\n\
    \   o  The validity and/or behavior of any 'P' flag protocols.\n   o  The general\
    \ semantics surrounding why and how NAPTR and its\n      algorithm are being used.\n"
- title: 7. Examples
  contents:
  - "7. Examples\n   NOTE: These are examples only.  They are taken from ongoing work\
    \ and\n   may not represent the end result of that work. They are here for\n \
    \  pedagogical reasons only.\n"
- title: 7.1 Example 1
  contents:
  - "7.1 Example 1\n   NAPTR was originally specified for use with the a Uniform Resource\n\
    \   Name Resolver Discovery System.  This example details how a\n   particular\
    \ URN would use the NAPTR record to find a resolver service.\n   Consider a URN\
    \ namespace based on MIME Content-Ids.  The URN might\n   look like this:\n  \
    \    urn:cid:39CB83F7.A8450130@fake.gatech.edu\n   (Note that this example is\
    \ chosen for pedagogical purposes, and does\n   not conform to the CID URL scheme.)\n\
    \   The first step in the resolution process is to find out about the CID\n  \
    \ namespace.  The namespace identifier [3], 'cid', is extracted from\n   the URN,\
    \ prepended to urn.arpa. 'cid.urn.arpa' then becomes the first\n   'known' key\
    \ in the NAPTR algorithm.  The NAPTR records for\n   cid.urn.arpa looked up and\
    \ return a single record:\n   cid.urn.arpa.\n   ;;       order pref flags service\
    \        regexp           replacement\n   IN NAPTR 100   10   \"\"  \"\"  \"/urn:cid:.+@([^\\\
    .]+\\.)(.*)$/\\2/i\"    .\n   There is only one NAPTR response, so ordering the\
    \ responses is not a\n   problem.  The replacement field is empty, so the pattern\
    \ provided in\n   the regexp field is used.  We apply that regexp to the entire\
    \ URN to\n   see if it matches, which it does.  The \\2 part of the substitution\n\
    \   expression returns the string \"gatech.edu\".  Since the flags field\n   does\
    \ not contain \"s\" or \"a\", the lookup is not terminal and our next\n   probe\
    \ to DNS is for more NAPTR records where the new domain is '\n   gatech.edu' and\
    \ the string is the same string as before.\n   Note that the rule does not extract\
    \ the full domain name from the\n   CID, instead it assumes the CID comes from\
    \ a host and extracts its\n   domain.  While all hosts, such as mordred, could\
    \ have their very own\n   NAPTR, maintaining those records for all the machines\
    \ at a site as\n   large as Georgia Tech would be an intolerable burden.  Wildcards\
    \ are\n   not appropriate here since they only return results when there is no\n\
    \   exactly matching names already in the system.\n   The record returned from\
    \ the query on \"gatech.edu\" might look like:\n"
- title: ;;       order pref flags service           regexp  replacement
  contents:
  - ";;       order pref flags service           regexp  replacement\n IN NAPTR 100\
    \  50  \"s\"  \"z3950+I2L+I2C\"     \"\"  _z3950._tcp.gatech.edu.\n IN NAPTR 100\
    \  50  \"s\"  \"rcds+I2C\"          \"\"  _rcds._udp.gatech.edu.\n IN NAPTR 100\
    \  50  \"s\"  \"http+I2L+I2C+I2R\"  \"\"  _http._tcp.gatech.edu.\n   Continuing\
    \ with the example, note that the values of the order and\n   preference fields\
    \ are equal in all records, so the client is free to\n   pick any record.  The\
    \ flags field tells us that these are the last\n   NAPTR patterns we should see,\
    \ and after the rewrite (a simple\n   replacement in this case) we should look\
    \ up SRV records to get\n   information on the hosts that can provide the necessary\
    \ service.\n   Assuming we prefer the Z39.50 protocol, our lookup might return:\n\
    \ ;;                        Pref Weight   Port Target\n _z3950._tcp.gatech.edu.\
    \ IN SRV 0    0      1000 z3950.gatech.edu.\n                         IN SRV 0\
    \    0      1000 z3950.cc.gatech.edu.\n                         IN SRV 0    0\
    \      1000 z3950.uga.edu.\n   telling us three hosts that could actually do the\
    \ resolution, and\n   giving us the port we should use to talk to their Z39.50\
    \ server.\n   Recall that the regular expression used \\2 to extract a domain\
    \ name\n   from the CID, and \\. for matching the literal '.' characters\n   separating\
    \ the domain name components. Since '\\' is the escape\n   character, literal\
    \ occurances of a backslash must be escaped by\n   another backslash.  For the\
    \ case of the cid.urn.arpa record above,\n   the regular expression entered into\
    \ the master file should be\n   \"/urn:cid:.+@([^\\\\.]+\\\\.)(.*)$/\\\\2/i\"\
    .  When the client code actually\n   receives the record, the pattern will have\
    \ been converted to\n   \"/urn:cid:.+@([^\\.]+\\.)(.*)$/\\2/i\".\n"
- title: 7.2 Example 2
  contents:
  - "7.2 Example 2\n   Even if URN systems were in place now, there would still be\
    \ a\n   tremendous number of URLs.  It should be possible to develop a URN\n \
    \  resolution system that can also provide location independence for\n   those\
    \ URLs.  This is related to the requirement that URNs be able to\n   grandfather\
    \ in names from other naming systems, such as ISO Formal\n   Public Identifiers,\
    \ Library of Congress Call Numbers, ISBNs, ISSNs,\n   etc.\n   The NAPTR RR could\
    \ also be used for URLs that have already been\n   assigned.  Assume we have the\
    \ URL for a very popular piece of\n   software that the publisher wishes to mirror\
    \ at multiple sites around\n   the world:\n   Using the rules specified for this\
    \ application we extract the prefix,\n   \"http\", and lookup NAPTR records for\
    \ http.uri.arpa.  This might\n   return a record of the form\n     http.uri.arpa.\
    \ IN NAPTR\n     ;;  order   pref flags service      regexp             replacement\n\
    \          100     90   \"\"      \"\"   \"!http://([^/:]+)!\\1!i\"       .\n\
    \   This expression returns everything after the first double slash and\n   before\
    \ the next slash or colon.  (We use the '!' character to delimit\n   the parts\
    \ of the substitution expression.  Otherwise we would have to\n   use backslashes\
    \ to escape the forward slashes and would have a regexp\n   in the zone file that\
    \ looked like \"/http:\\\\/\\\\/([^\\\\/:]+)/\\\\1/i\".).\n   Applying this pattern\
    \ to the URL extracts \"www.foo.com\".  Looking up\n   NAPTR records for that\
    \ might return:\n     www.foo.com.\n     ;;       order pref flags   service \
    \ regexp     replacement\n      IN NAPTR 100  100  \"s\"   \"http+I2R\"   \"\"\
    \    _http._tcp.foo.com.\n      IN NAPTR 100  100  \"s\"   \"ftp+I2R\"    \"\"\
    \    _ftp._tcp.foo.com.\n   Looking up SRV records for http.tcp.foo.com would\
    \ return information\n   on the hosts that foo.com has designated to be its mirror\
    \ sites.  The\n   client can then pick one for the user.\n"
- title: 7.3 Example 3
  contents:
  - "7.3 Example 3\n   A non-URI example is the ENUM application which uses a NAPTR\
    \ record\n   to map an e.164 telephone number to a URI.  In order to convert the\n\
    \   phone number to a domain name for the first iteration all characters\n   other\
    \ than digits are removed from the the telephone number, the\n   entire number\
    \ is inverted, periods are put between each digit and the\n   string \".e164.arpa\"\
    \ is put on the left-hand side.  For example, the\n   E.164 phone number \"+1-770-555-1212\"\
    \ converted to a domain-name it\n   would be \"2.1.2.1.5.5.5.0.7.7.1.e164.arpa.\"\
    \n   For this example telephone number we might get back the following\n   NAPTR\
    \ records:\n"
- title: $ORIGIN 2.1.2.1.5.5.5.0.7.7.1.e164.arpa.
  contents:
  - "$ORIGIN 2.1.2.1.5.5.5.0.7.7.1.e164.arpa.\n IN NAPTR 100 10 \"u\" \"sip+E2U\"\
    \  \"!^.*$!sip:information@tele2.se!\"     .\n IN NAPTR 102 10 \"u\" \"mailto+E2U\"\
    \ \"!^.*$!mailto:information@tele2.se!\"  .\n   This application uses the same\
    \ 'u' flag as the URI Resolution\n   application. This flag states that the Rule\
    \ is terminal and that the\n   output is a URI which contains the information\
    \ needed to contact that\n   telephone service.  ENUM also uses the same format\
    \ for its Service\n   field except that it defines the 'E2U' service instead of\
    \ the 'I2*'\n   services that URI resolution uses.  The example above states that\
    \ the\n   available protocols used to access that telephone's service are\n  \
    \ either the Session Initiation Protocol or SMTP mail.\n"
- title: 8. DNS Packet Format
  contents:
  - "8. DNS Packet Format\n         The packet format for the NAPTR record is:\n \
    \                                         1  1  1  1  1  1\n            0  1 \
    \ 2  3  4  5  6  7  8  9  0  1  2  3  4  5\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                     ORDER                     |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                   PREFERENCE                  |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          /                     FLAGS                     /\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          /                   SERVICES                    /\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          /                    REGEXP                     /\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          /                  REPLACEMENT                  /\n          /    \
    \                                           /\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \    where:\n   FLAGS A <character-string> which contains various flags.\n   SERVICES\
    \ A <character-string> which contains protocol and service\n      identifiers.\n\
    \   REGEXP A <character-string> which contains a regular expression.\n   REPLACEMENT\
    \ A <domain-name> which specifies the new value in the\n      case where the regular\
    \ expression is a simple replacement\n      operation.\n   <character-string>\
    \ and <domain-name> as used here are defined in\n   RFC1035 [1].\n"
- title: 9. Master File Format
  contents:
  - "9. Master File Format\n   The master file format follows the standard rules in\
    \ RFC-1035 [1].\n   Order and preference, being 16-bit unsigned integers, shall\
    \ be an\n   integer between 0 and 65535.  The Flags and Services and Regexp\n\
    \   fields are all quoted <character-string>s.  Since the Regexp field\n   can\
    \ contain numerous backslashes and thus should be treated with\n   care.  See\
    \ Section 10 for how to correctly enter and escape the\n   regular expression.\n"
- title: 10. Advice for DNS Administrators
  contents:
  - "10. Advice for DNS Administrators\n   Beware of regular expressions.  Not only\
    \ are they difficult to get\n   correct on their own, but there is the previously\
    \ mentioned\n   interaction with DNS.  Any backslashes in a regexp must be entered\n\
    \   twice in a zone file in order to appear once in a query response.\n   More\
    \ seriously, the need for double backslashes has probably not been\n   tested\
    \ by all implementors of DNS servers.\n   The \"a\" flag allows the next lookup\
    \ to be for address records (A,\n   AAAA, A6) rather than SRV records.  Since\
    \ there is no place for a\n   port specification in the NAPTR record, when the\
    \ \"A\" flag is used the\n   specified protocol must be running on its default\
    \ port.\n   The URN Syntax draft defines a canonical form for each URN, which\n\
    \   requires %encoding characters outside a limited repertoire.  The\n   regular\
    \ expressions MUST be written to operate on that canonical\n   form.  Since international\
    \ character sets will end up with extensive\n   use of %encoded characters, regular\
    \ expressions operating on them\n   will be essentially impossible to read or\
    \ write by hand.\n"
- title: 11. Notes
  contents:
  - "11. Notes\n   o  A client MUST process multiple NAPTR records in the order\n\
    \      specified by the \"order\" field, it MUST NOT simply use the first\n  \
    \    record that provides a known protocol and service combination.\n   o  When\
    \ multiple RRs have the same \"order\" and all other criteria\n      being equal,\
    \ the client should use the value of the preference\n      field to select the\
    \ next NAPTR to consider.  However, because it\n      will often be the case where\
    \ preferred protocols or services\n      exist, clients may use this additional\
    \ criteria to sort\n      the records.\n   o  If the lookup after a rewrite fails,\
    \ clients are strongly\n      encouraged to report a failure, rather than backing\
    \ up to pursue\n      other rewrite paths.\n   o  Note that SRV RRs impose additional\
    \ requirements on clients.\n"
- title: 12. IANA Considerations
  contents:
  - "12. IANA Considerations\n   The only registration function that impacts the IANA\
    \ is for the\n   values that are standardized for the Services and Flags fields.\
    \  To\n   extend the valid values of the Flags field beyond what is specified\n\
    \   in this document requires a published specification that is approved\n   by\
    \ the IESG.\n   The values for the Services field will be determined by the\n\
    \   application that makes use of the NAPTR record.  Those values must be\n  \
    \ specified in a published specification and approved by the IESG.\n"
- title: 13. Security Considerations
  contents:
  - "13. Security Considerations\n   The interactions with DNSSEC are currently being\
    \ studied.  It is\n   expected that NAPTR records will be signed with SIG records\
    \ once the\n   DNSSEC work is deployed.\n   The rewrite rules make identifiers\
    \ from other namespaces subject to\n   the same attacks as normal domain names.\
    \  Since they have not been\n   easily resolvable before, this may or may not\
    \ be considered a\n   problem.\n   Regular expressions should be checked for sanity,\
    \ not blindly passed\n   to something like PERL.\n   This document has discussed\
    \ a way of locating a service, but has not\n   discussed any detail of how the\
    \ communication with that service takes\n   place.  There are significant security\
    \ considerations attached to the\n   communication with a service.  Those considerations\
    \ are outside the\n   scope of this document, and must be addressed by the specifications\n\
    \   for particular communication protocols.\n"
- title: 14. Acknowledgments
  contents:
  - "14. Acknowledgments\n   The editors would like to thank Keith Moore for all his\
    \ consultations\n   during the development of this memo.  We would also like to\
    \ thank\n   Paul Vixie for his assistance in debugging our implementation, and\n\
    \   his answers on our questions.  Finally, we would like to acknowledge\n   our\
    \ enormous intellectual debt to the participants in the Knoxville\n   series of\
    \ meetings, as well as to the participants in the URI and URN\n   working groups.\n"
- title: References
  contents:
  - "References\n   [1]  Mockapetris, P., \"Domain names - implementation and\n  \
    \      specification\", STD 13, RFC 1035, November 1987.\n   [2]  Mockapetris,\
    \ P., \"Domain names - concepts and facilities\", STD\n        13, RFC 1034, November\
    \ 1987.\n   [3]  Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [4]  Gulbrandsen,\
    \ A., Vixie, P. and L. Esibov, \"A DNS RR for\n        specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n        February 2000.\n   [5]  Crocker,\
    \ D., \"Augmented BNF for Syntax Specifications: ABNF\",\n        RFC 2234, November\
    \ 1997.\n   [6]  Daniel, R., \"A Trivial Convention for using HTTP in URN\n  \
    \      Resolution\", RFC 2169, June 1997.\n   [7]  Daniel, R. and M. Mealling,\
    \ \"Resolution of Uniform Resource\n        Identifiers using the Domain Name\
    \ System\", RFC 2168, June 1997.\n   [8]  IEEE, \"IEEE Standard for Information\
    \ Technology - Portable\n        Operating System Interface (POSIX) - Part 2:\
    \ Shell and Utilities\n        (Vol. 1)\", IEEE Std 1003.2-1992, January 1993.\n\
    \   [9]  Berners-Lee, T., Fielding, R.T. and L. Masinter, \"Uniform\n        Resource\
    \ Identifiers (URI): Generic Syntax\", RFC 2396, August\n        1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Mealling\n   Network Solutions, Inc.\n   505 Huntmar\
    \ Park Drive\n   Herndon, VA  22070\n   US\n   Phone: +1 770 921 2251\n   EMail:\
    \ michaelm@netsol.com\n   URI:   http://www.netsol.com\n   Ron Daniel\n   DATAFUSION,\
    \ Inc.\n   139 Townsend Street, Ste. 100\n   San Francisco, CA  94107\n   US\n\
    \   Phone: +1 415 222 0100\n   EMail: rdaniel@datafusion.net\n   URI:   http://www.datafusion.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
