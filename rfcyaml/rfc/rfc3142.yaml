- title: __initial_text__
  contents:
  - '               An IPv6-to-IPv4 Transport Relay Translator

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The document describes an IPv6-to-IPv4 transport relay translator\n\
    \   (TRT).  It enables IPv6-only hosts to exchange {TCP,UDP} traffic with\n  \
    \ IPv4-only hosts.  A TRT system, which locates in the middle,\n   translates\
    \ {TCP,UDP}/IPv6 to {TCP,UDP}/IPv4, or vice versa.\n   The memo talks about how\
    \ to implement a TRT system using existing\n   technologies.  It does not define\
    \ any new protocols.\n"
- title: 1.  Problem domain
  contents:
  - "1.  Problem domain\n   When you deploy an IPv6-only network, you still want to\
    \ gain access\n   to IPv4-only network resources outside, such as IPv4-only web\n\
    \   servers.  To solve this problem, many IPv6-to-IPv4 translation\n   technologies\
    \ are proposed, mainly in the IETF ngtrans working group.\n   The memo describes\
    \ a translator based on the transport relay\n   technique to solve the same problem.\n\
    \   In this memo, we call this kind of translator \"TRT\" (transport relay\n \
    \  translator).  A TRT system locates between IPv6-only hosts and IPv4\n   hosts\
    \ and translates {TCP,UDP}/IPv6 to {TCP,UDP}/IPv4, vice versa.\n   Advantages\
    \ of TRT are as follows:\n   o  TRT is designed to require no extra modification\
    \ on IPv6-only\n      initiating hosts, nor that on IPv4-only destination hosts.\
    \  Some\n      other translation mechanisms need extra modifications on IPv6-only\n\
    \      initiating hosts, limiting possibility of deployment.\n   o  The IPv6-to-IPv4\
    \ header converters have to take care of path MTU\n      and fragmentation issues.\
    \  However, TRT is free from this problem.\n   Disadvantages of TRT are as follows:\n\
    \   o  TRT supports bidirectional traffic only.  The IPv6-to-IPv4 header\n   \
    \   converters may be able to support other cases, such as\n      unidirectional\
    \ multicast datagrams.\n   o  TRT needs a stateful TRT system between the communicating\
    \ peers,\n      just like NAT systems.  While it is possible to place multiple\
    \ TRT\n      systems in a site (see Appendix A), a transport layer connection\n\
    \      goes through particular, a single TRT system.  The TRT system thus\n  \
    \    can be considered a single point of failure, again like NAT\n      systems.\
    \  Some other mechanisms, such as SIIT [Nordmark, 2000],\n      use stateless\
    \ translator systems which can avoid a single point of\n      failure.\n   o \
    \ Special code is necessary to relay NAT-unfriendly protocols.  Some\n      of\
    \ NAT-unfriendly protocols, including IPsec, cannot be used\n      across TRT\
    \ system.\n   This memo assumes that traffic is initiated by an IPv6-only host\n\
    \   destined to an IPv4-only host.  The memo can be extended to handle\n   opposite\
    \ direction, if an appropriate address mapping mechanism is\n   introduced.\n"
- title: 2.  IPv4-to-IPv4 transport relay
  contents:
  - "2.  IPv4-to-IPv4 transport relay\n   To help understanding of the proposal in\
    \ the next section, here we\n   describe the transport relay in general.  The\
    \ transport relay\n   technique itself is not new, as it has been used in many\
    \ of\n   firewall-related products.\n"
- title: 2.1.  TCP relay
  contents:
  - "2.1.  TCP relay\n   TCP relay systems have been used in firewall-related products.\
    \  These\n   products are designed to achieve the following goals: (1) disallow\n\
    \   forwarding of IP packets across a system, and (2) allow {TCP,UDP}\n   traffic\
    \ to go through the system indirectly.  For example, consider a\n   network constructed\
    \ like the following diagram.  \"TCP relay system\"\n   in the diagram does not\
    \ forward IP packet across the inner network to\n   the outer network, vice versa.\
    \  It only relays TCP traffic on a\n   specific port, from the inner network to\
    \ the outer network, vice\n   versa.  (Note:  The diagram has only two subnets,\
    \ one for inner and\n   one for outer.  Actually both sides can be more complex,\
    \ and there\n   can be as many subnets and routers as you wish.)\n      destination\
    \ host\n        |X\n      ==+=======+== outer network\n                |Y\n  \
    \            TCP relay system\n                |B\n      ==+=======+== inner network\n\
    \        |A\n      initiating host\n   When the initiating host (whose IP address\
    \ is A) tries to make a TCP\n   connection to the destination host (X), TCP packets\
    \ are routed toward\n   the TCP relay system based on routing decision.  The TCP\
    \ relay system\n   receives and accepts the packets, even though the TCP relay\
    \ system\n   does not own the destination IP address (X).  The TCP relay system\n\
    \   pretends to having IP address X, and establishes TCP connection with\n   the\
    \ initiating host as X.  The TCP relay system then makes a another\n   TCP connection\
    \ from Y to X, and relays traffic from A to X, and the\n   other way around.\n\
    \   Thus, two TCP connections are established in the picture: from A to B\n  \
    \ (as X), and from Y to X, like below:\n      TCP/IPv4: the initiating host (A)\
    \ --> the TCP relay system (as X)\n          address on IPv4 header: A -> X\n\
    \      TCP/IPv4: the TCP relay system (Y) --> the destination host (X)\n     \
    \     address on IPv4 header: Y -> X\n   The TCP relay system needs to capture\
    \ some of TCP packets that is not\n   destined to its address.  The way to do\
    \ it is implementation\n   dependent and outside the scope of this memo.\n"
- title: 2.2.  UDP relay
  contents:
  - "2.2.  UDP relay\n   If you can recognize UDP inbound and outbound traffic pair\
    \ in some\n   way, UDP relay can be implemented in similar manner as TCP relay.\
    \  An\n   implementation can recognize UDP traffic pair like NAT systems does,\n\
    \   by recording address/port pairs onto an table and managing table\n   entries\
    \ with timeouts.\n"
- title: 3.  IPv6-to-IPv4 transport relay translator
  contents:
  - "3.  IPv6-to-IPv4 transport relay translator\n   We propose a transport relay\
    \ translator for IPv6-to-IPv4 protocol\n   translation, TRT.  In the following\
    \ description, TRT for TCP is\n   described.  TRT for UDP can be implemented in\
    \ similar manner.\n   For address mapping, we reserve an IPv6 prefix referred\
    \ to by\n   C6::/64.  C6::/64 should be a part of IPv6 unicast address space\n\
    \   assigned to the site.  Routing information must be configured so that\n  \
    \ packets to C6::/64 are routed toward the TRT system.  The following\n   diagram\
    \ shows the network configuration.  The subnet marked as \"dummy\n   prefix\"\
    \ does not actually exist.  Also, now we assume that the\n   initiating host to\
    \ be IPv6-only, and the destination host to be\n   IPv4-only.\n      destination\
    \ host\n        |X4\n      ==+=======+== outer network\n                |Y4\n\
    \              TRT system --- dummy prefix (C6::/64)\n                |B6\n  \
    \    ==+=======+== inner network\n        |A6\n      initiating host\n   When\
    \ the initiating host (whose IPv6 address is A6) wishes to make a\n   connection\
    \ to the destination host (whose IPv4 address is X4), it\n   needs to make an\
    \ TCP/IPv6 connection toward C6::X4.  For example, if\n   C6::/64 equals to fec0:0:0:1::/64,\
    \ and X4 equals to 10.1.1.1, the\n   destination address to be used is fec0:0:0:1::10.1.1.1.\
    \  The packet\n   is routed toward the TRT system, and is captured by it.  The\
    \ TRT\n   system accepts the TCP/IPv6 connection between A6 and C6::X4, and\n\
    \   communicate with the initiating host, using TCP/IPv6.  Then, the TRT\n   system\
    \ investigates the lowermost 32bit of the destination address\n   (IPv6 address\
    \ C6::X4) to get the real IPv4 destination (IPv4 address\n   X4).  It makes an\
    \ TCP/IPv4 connection from Y4 to X4, and forward\n   traffic across the two TCP\
    \ connections.\n   There are two TCP connections.  One is TCP/IPv6 and another\
    \ is\n   TCP/IPv4, in the picture: from A6 to B6 (as C6::X4), and Y4 to X4,\n\
    \   like below:\n      TCP/IPv6: the initiating host (A6) --> the TRT system (as\
    \ C6::X4)\n          address on IPv6 header: A6 -> C6::X4\n      TCP/IPv4: the\
    \ TRT system (Y4) --> the destination host (X4)\n          address on IPv4 header:\
    \ Y4 -> X4\n"
- title: 4.  Address mapping
  contents:
  - "4.  Address mapping\n   As seen in the previous section, an initiating host must\
    \ use a\n   special form of IPv6 address to connect to an IPv4 destination host.\n\
    \   The special form can be resolved from a hostname by static address\n   mapping\
    \ table on the initiating host (like /etc/hosts in UNIX),\n   special DNS server\
    \ implementation, or modified DNS resolver\n   implementation on initiating host.\n"
- title: 5.  Notes to implementers
  contents:
  - "5.  Notes to implementers\n   TRT for UDP must take care of path MTU issues on\
    \ the UDP/IPv6 side.\n   The good thing is that, as we do not relay IP layer packets\
    \ between\n   IPv4 and IPv6, we can decide IPv6 path MTU independently from IPv4\n\
    \   traffic.  A simple solution would be to always fragment packets from\n   the\
    \ TRT system to UDP/IPv6 side to IPv6 minimum MTU (1280 octets), to\n   eliminate\
    \ the need for IPv6 path MTU discovery.\n   Though the TRT system only relays\
    \ {TCP,UDP} traffic, it needs to\n   check ICMPv6 packets destined to C6::X4 as\
    \ well, so that it can\n   recognize path MTU discovery messages and other notifications\
    \ between\n   A6 and C6::X4.\n   When forwarding TCP traffic, a TRT system needs\
    \ to handle urgent data\n   [Postel, 1981] carefully.\n   To relay NAT-unfriendly\
    \ protocols [Hain, 2000] a TRT system may need\n   to modify data content, just\
    \ like any translators which modifies the\n   IP addresses.\n   Scalability issues\
    \ must carefully be considered when you deploy TRT\n   systems to a large IPv6\
    \ site.  Scalability parameters would be (1)\n   number of connections the operating\
    \ system kernel can accept, (2)\n   number of connections a userland process can\
    \ forward (equals to\n   number of filehandles per process), and (3) number of\
    \ transport\n   relaying processes on a TRT system.  Design decision must be made\
    \ to\n   use proper number of userland processes to support proper number of\n\
    \   connections.\n   To make TRT for TCP more scalable in a large site, it is\
    \ possible to\n   have multiple TRT systems in a site.  This can be done by taking\
    \ the\n   following steps: (1) configure multiple TRT systems, (2) configure\n\
    \   different dummy prefix to them, (3) and let the initiating host pick\n   a\
    \ dummy prefix randomly for load-balancing.  (3) can be implemented\n   as follows;\
    \ If you install special DNS server to the site, you may\n   (3a) configure DNS\
    \ servers differently to return different dummy\n   prefixes and tell initiating\
    \ hosts of different DNS servers.  Or you\n   can (3b) let DNS server pick a dummy\
    \ prefix randomly for load-\n   balancing.  The load-balancing is possible because\
    \ you will not be\n   changing destination address (hence the TRT system), once\
    \ a TCP\n   connection is established.\n   For address mapping, the authors recommend\
    \ use of a special DNS\n   server for large-scale installation, and static mapping\
    \ for small-\n   scale installation.  It is not always possible to have special\n\
    \   resolver on the initiating host, and assuming it would cause\n   deployment\
    \ problems.\n"
- title: 6.  Applicability statement
  contents:
  - "6.  Applicability statement\n   Combined with a special DNS server implementation\
    \ (which translates\n   IPv4 addresses into IPv6), TRT systems support IPv6-to-IPv4\n\
    \   translation very well.  It requires no change to existing IPv6\n   clients,\
    \ nor IPv4 servers, so the TRT system can be installed very\n   easily to existing\
    \ IPv6-capable networks.\n   IPv4-to-IPv6 translation is much harder to support\
    \ with any of the\n   translator techniques [Yamamoto, 1998].  While it is possible\
    \ to use\n   TRT system for IPv4-to-IPv6 translation, it requires nontrivial\n\
    \   mapping between DNS names to temporary IPv4 addresses, as presented\n   in\
    \ NAT-PT RFC [Tsirtsis, 2000].\n   As presented in the earlier sections, TRT systems\
    \ use transport layer\n   (TCP/UDP) relay technique to translate IPv6 traffic\
    \ to IPv4 traffic.\n   It gives two major benefits: (1) the implementation of\
    \ the TRT system\n   can be done very simple, (2) with the TRT system path MTU\
    \ discovery\n   issue is easier to deal with, as we can decide IPv6 path MTU\n\
    \   independently from IPv4 path MTU.  Even with the simplicity, the TRT\n   system\
    \ can cover most of the daily applications (HTTP, SMTP, SSH, and\n   many other\
    \ protocols).  For NAT-unfriendly protocols, a TRT system\n   may need to modify\
    \ data content, just like any translators/NATs.  As\n   the TRT system reside\
    \ in transport layer, it is not possible for the\n   TRT system to translate protocols\
    \ that are not known to the TRT\n   system.\n   Normally users do not want to\
    \ translate DNS query/reply traffic using\n   the TRT system.  Instead, it makes\
    \ more sense to run standard DNS\n   server, or special DNS server that helps\
    \ TRT system, somewhere in the\n   site IPv6 network.  There are two reasons to\
    \ it:\n   o  Transport issue - It is a lot easier to provide recursive DNS\n \
    \     server, accessible via IPv6, than to translate DNS queries/replies\n   \
    \   across the TRT system.  If someone tries to ask TRT to translate\n      DNS\
    \ packets, the person would put C6::X (where C6 is TRT reserved\n      prefix\
    \ and X is an IPv4 address of a DNS server) into\n      /etc/resolv.conf.  The\
    \ configuration is rather complicated than we\n      normally want.\n   o  Payload\
    \ issue - In some installation it makes more sense to\n      transmit queries/replies\
    \ unmodified, across the TRT system.  In\n      some installation it makes more\
    \ sense to translate IPv4 DNS\n      queries (like queries for AAAA record) into\
    \ queries for A record,\n      and vice versa, to invite traffic into the TRT\
    \ system.  It depends\n      on the installation/configuration at the user's site.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Malicious party may try to use TRT systems akin\
    \ to an SMTP open relay\n   [Lindberg, 1999] for traffic to IPv4 destinations,\
    \ which is similar\n   to circumventing ingress filtering [Ferguson, 1998] , or\
    \ to achieve\n   some other improper use.  TRT systems should implement some sorts\
    \ of\n   access control to prevent such improper usage.\n   A careless TRT implementation\
    \ may be subject to buffer overflow\n   attack, but this kind of issue is implementation\
    \ dependent and\n   outside the scope of this memo.\n   Due to the nature of TCP/UDP\
    \ relaying service, it is not recommended\n   to use TRT for protocols that use\
    \ authentication based on source IP\n   address (i.e., rsh/rlogin).\n   A transport\
    \ relay system intercepts TCP connection between two nodes.\n   This may not be\
    \ a legitimate behavior for an IP node.  The document\n   does not try to claim\
    \ it to be legitimate.\n   IPsec cannot be used across a relay.\n   Use of DNS\
    \ proxies that modify the RRs will make it impossible for\n   the resolver to\
    \ verify DNSsec signatures.\n"
- title: References
  contents:
  - "References\n   [Nordmark, 2000.] Nordmark, E., \"Stateless IP/ICMP Translator\n\
    \                     (SIIT)\", RFC 2765, February 2000.\n   [Postel, 1981.] \
    \  Postel, J., \"Transmission Control Protocol\", STD 7,\n                   \
    \  RFC 793 September 1981.\n   [Hain, 2000.]     Hain, T., \"Architectural Implications\
    \ of NAT\", RFC\n                     2993, November 2000.\n   [Yamamoto, 1998]\
    \  K. Yamamoto, A. Kato, M Sumikawa, and J. Murai,\n                     \"Deployment\
    \ and Experiences of WIDE 6bone\", in\n                     Proceedings of INET98,\
    \ 1998.\n   [Tsirtsis, 2000.] Tsirtsis, G. and P. Srisuresh, \"Network Address\n\
    \                     Translation - Protocol Translation (NAT-PT)\", RFC\n   \
    \                  2766, February 2000.\n   [Lindberg, 1999.] Lindberg, G., \"\
    Anti-Spam Recommendations for SMTP\n                     MTAs\", RFC 2505, February\
    \ 1999.\n   [Ferguson, 1998.] Ferguson, P. and D. Senie, \"Network Ingress\n \
    \                    Filtering: Defeating Denial of Service Attacks\n        \
    \             which employ IP Source Address Spoofing\", RFC 2267,\n         \
    \            January 1998.\n"
- title: Appendix A. Operational experiences
  contents:
  - "Appendix A. Operational experiences\n   WIDE KAME IPv6 stack implements TRT for\
    \ TCP, called \"FAITH\".  The\n   implementation came from WIDE Hydrangea IPv6\
    \ stack, which is one of\n   ancestors of the KAME IPv6 stack.\n   The FAITH code\
    \ has been available and operational for more than 5\n   years.  The implementation\
    \ has been used at WIDE research group\n   offsite meeting, and IETF ipngwg 1999\
    \ Tokyo interim meeting.  At the\n   latter occasion, we configured IPv6-only\
    \ terminal network cluster\n   just like we do in IETF meetings, and used a TRT\
    \ system to support\n   more than 100 IPv6 hosts on the meeting network to connect\
    \ to outside\n   IPv4 hosts.  From statistics we gathered SSH, FTP, HTTP, and\
    \ POP3 are\n   the most popular protocol we have relayed.  The implementation\
    \ was\n   also used in the terminal cluster IPv6 network at IETF48, IETF49 and\n\
    \   IETF50.\n   The source code is available as free software, bundled in the\
    \ KAME\n   IPv6 stack kit.\n   Special DNS server implementations are available\
    \ as \"newbie\" DNS\n   server implementation by Yusuke DOI, and \"totd\" DNS\
    \ proxy server from\n   University of Tromso (Norway).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank people who were involved\
    \ in\n   implementing KAME FAITH translator code, including Kei-ichi SHIMA and\n\
    \   Munechika SUMIKAWA.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jun-ichiro itojun HAGINO\n   Research Laboratory, Internet\
    \ Initiative Japan Inc.\n   Takebashi Yasuda Bldg.,\n   3-13 Kanda Nishiki-cho,\n\
    \   Chiyoda-ku, Tokyo 101-0054, JAPAN\n   Phone: +81-3-5259-6350\n   Fax:   +81-3-5259-6351\n\
    \   EMail: itojun@iijlab.net\n   Kazu YAMAMOTO\n   Research Laboratory, Internet\
    \ Initiative Japan Inc.\n   Takebashi Yasuda Bldg.,\n   3-13 Kanda Nishiki-cho,\n\
    \   Chiyoda-ku, Tokyo 101-0054, JAPAN\n   Phone: +81-3-5259-6350\n   Fax:   +81-3-5259-6351\n\
    \   EMail: kazu@iijlab.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
