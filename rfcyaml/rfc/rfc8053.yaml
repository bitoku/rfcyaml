- title: __initial_text__
  contents:
  - '         HTTP Authentication Extensions for Interactive Clients

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies extensions for the HTTP authentication\n\
    \   framework for interactive clients.  Currently, fundamental features\n   of\
    \ HTTP-level authentication are insufficient for complex\n   requirements of various\
    \ Web-based applications.  This forces these\n   applications to implement their\
    \ own authentication frameworks by\n   means such as HTML forms, which becomes\
    \ one of the hurdles against\n   introducing secure authentication mechanisms\
    \ handled jointly by\n   servers and user agents.  The extended framework fills\
    \ gaps between\n   Web application requirements and HTTP authentication provisions\
    \ to\n   solve the above problems, while maintaining compatibility with\n   existing\
    \ Web and non-Web uses of HTTP authentication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8053.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     2.1.  Terms for Describing Authentication Protocol Flow . .\
    \ . .   5\n     2.2.  Syntax Notation . . . . . . . . . . . . . . . . . . . .\
    \ .   8\n   3.  Optional Authentication . . . . . . . . . . . . . . . . . . .\
    \   8\n     3.1.  Note on Optional-WWW-Authenticate and Use of\n           WWW-Authenticate\
    \ Header with Non-401 Status . . . . . . .  10\n   4.  Authentication-Control\
    \ Header . . . . . . . . . . . . . . . .  11\n     4.1.  Non-ASCII Extended Header\
    \ Parameters  . . . . . . . . . .  13\n     4.2.  Auth-Style Parameter  . . .\
    \ . . . . . . . . . . . . . . .  13\n     4.3.  Location-When-Unauthenticated\
    \ Parameter . . . . . . . . .  14\n     4.4.  No-Auth Parameter . . . . . . .\
    \ . . . . . . . . . . . . .  15\n     4.5.  Location-When-Logout Parameter  .\
    \ . . . . . . . . . . . .  16\n     4.6.  Logout-Timeout Parameter  . . . . .\
    \ . . . . . . . . . . .  17\n     4.7.  Username Parameter  . . . . . . . . .\
    \ . . . . . . . . . .  17\n   5.  Usage Examples  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  18\n     5.1.  Example 1: A Portal Site  . . . . . . . .\
    \ . . . . . . . .  19\n       5.1.1.  Case 1: A Simple Application  . . . . .\
    \ . . . . . . .  19\n       5.1.2.  Case 2: Specific Action Required on Logout\
    \  . . . . .  20\n       5.1.3.  Case 3: Specific Page Displayed before Login\
    \  . . . .  20\n     5.2.  Example 2: Authenticated User-Only Sites  . . . . .\
    \ . . .  20\n     5.3.  When to Use Cookies . . . . . . . . . . . . . . . . .\
    \ . .  21\n     5.4.  Parallel Deployment with Form/Cookie Authentication . .\
    \ .  22\n   6.  Methods to Extend This Protocol . . . . . . . . . . . . . . .\
    \  23\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23\n\
    \   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  24\n  \
    \   8.1.  Security Implication of the Username Parameter  . . . . .  24\n   9.\
    \  References  . . . . . . . . . . . . . . . . . . . . . . . . .  25\n     9.1.\
    \  Normative References  . . . . . . . . . . . . . . . . . .  25\n     9.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  26\n   Appendix A.  (Informative)\
    \ Applicability of Features for Each\n                Message  . . . . . . . .\
    \ . . . . . . . . . . . . . .  27\n   Authors' Addresses  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines several extensions to the current\
    \ HTTP\n   authentication framework, to provide functionality comparable with\n\
    \   current, widely used, form-based Web authentication.  A majority of\n   the\
    \ recent websites on the Internet use custom application-layer\n   authentication\
    \ implementations using Web forms.  The reasons for\n   these may vary, but many\
    \ people believe that the current HTTP Basic\n   and Digest authentication methods\
    \ do not have enough functionality\n   (including good user interfaces) to support\
    \ most realistic Web-based\n   applications.  However, such use of form-based\
    \ Web authentication has\n   several weaknesses against attacks like phishing,\
    \ because all\n   behavior of the authentication is controlled from the server-side\n\
    \   application.  This makes it really hard to implement any\n   cryptographically\
    \ strong authentication mechanisms into Web systems.\n   To overcome this problem,\
    \ we need to \"modernize\" the HTTP\n   authentication framework so that better\
    \ client-controlled secure\n   methods can be used with Web applications.  The\
    \ extensions proposed\n   in this document include:\n   o  optional authentication\
    \ on HTTP (Section 3),\n   o  log out from both the server and client side (Section\
    \ 4), and\n   o  finer control for redirection depending on the authentication\n\
    \      status (Section 4)\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   This document distinguishes the terms \"\
    client\" and \"user\" in the\n   following way: a \"client\" is an entity understanding\
    \ and talking HTTP\n   and the specified authentication protocol, usually computer\
    \ software;\n   a \"user\" is a (usually natural) person who wants to access data\n\
    \   resources using \"a client\".\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: 2.1.  Terms for Describing Authentication Protocol Flow
  contents:
  - "2.1.  Terms for Describing Authentication Protocol Flow\n   HTTP Authentication\
    \ defined in [RFC7235] can involve several pairs of\n   HTTP requests/responses.\
    \  Throughout this document, the following\n   terms are used to categorize those\
    \ messages.\n   For requests:\n   1) A non-authenticating request is a request\
    \ not attempting any\n      authentication: a request without any Authorization\
    \ header field.\n   2) An authenticating request is the opposite: a request with\
    \ an\n      Authorization header field.\n   For responses:\n   1) A non-authenticated\
    \ response is a response that does not involve\n      any HTTP authentication.\
    \  It does not contain any WWW-Authenticate\n      ([RFC7235]) or Authentication-Info\
    \ header field ([RFC7615]).\n      Servers send this response when the requested\
    \ resource is not\n      protected by an HTTP authentication mechanism.  In the\
    \ context of\n      this specification, non-authentication-related negative responses\n\
    \      (e.g., 403 and 404) are also considered non-authenticated\n      responses.\n\
    \      (See the note on successfully authenticated responses below for\n     \
    \ some ambiguous cases.)\n   2) An authentication-initializing response is a response\
    \ that\n      requires or allows clients to start authentication attempts.\n \
    \     Servers send this response when the requested resource is\n      protected\
    \ by an HTTP authentication mechanism, and the request\n      meets one of the\
    \ following cases:\n      *  The request is a non-authenticating request, or\n\
    \      *  The request contained an authentication trial directed to a\n      \
    \   protection space (realm) other than the one that the server\n         expected.\n\
    \      The server will specify the protection space for authentication in\n  \
    \    this response.\n      Upon receiving this response, the client's behavior\
    \ is further\n      divided to two possible cases:\n      *  If the client has\
    \ no prior knowledge on authentication\n         credentials (e.g., a username\
    \ and a password) related to the\n         requested protection space, the protocol\
    \ flow terminates and\n         the client will ask the user to provide authentication\n\
    \         credentials.\n      *  On the other hand, if the client already has\
    \ enough\n         authentication credentials to the requested protection space,\n\
    \         the client will automatically send an authenticating request.\n    \
    \     Such cases often occur when the client does not know beforehand\n      \
    \   that the current request-URL requires authentication.\n   3) A successfully\
    \ authenticated response is a response for an\n      authenticating request meaning\
    \ that the authentication attempt was\n      granted.  (Note: if the authentication\
    \ scheme used does not use an\n      Authentication-Info header field, it can't\
    \ be distinguished from a\n      non-authenticated response.)\n   4) An intermediate\
    \ authenticating response is a response for an\n      authenticating request that\
    \ requires more reaction by the client\n      software without involving users.\
    \  Such a response is required\n      when an authentication scheme requires two\
    \ or more round-trip\n      messages to perform authentication, or when an authentication\n\
    \      scheme uses some speculative short-cut method (such as uses of\n      cached\
    \ shared secrets) and it fails.\n   5) A negatively authenticated response is\
    \ a response for an\n      authenticating request, which means that the authentication\n\
    \      attempt was declined and cannot continue without a different set\n    \
    \  of authentication credentials.  Clients typically erase the memory\n      of\
    \ the active credentials and ask the user for other ones.\n      Usually the format\
    \ of these responses is the same as the one for\n      authentication-initializing\
    \ responses.  Clients can distinguish\n      negatively authenticated responses\
    \ from authentication-\n      initializing responses by comparing the protection\
    \ spaces\n      contained in the request and in the response.\n   Figure 1 shows\
    \ a state diagram of generic HTTP authentication with\n   the above message categorization.\
    \  Note that many authentication\n   schemes use only a subset of the transitions\
    \ described in the\n   diagram.  Labels in the figure show the abbreviated names\
    \ of response\n   types.\n         ===========                               \
    \ -----------------\n         NEW REQUEST                               ( UNAUTHENTICATED\
    \ )\n         ===========                                -----------------\n \
    \             |                                            ^ non-auth.\n     \
    \         v                                            | response\n   +----------------------+\
    \ NO                         +-------------+\n   | The requested URI    |--------------------------->|\
    \ send normal |\n   | known to be auth'ed? |           ---------------->|   request\
    \   |\n   +----------------------+          /                 +-------------+\n\
    \          YES |                     /             initializing|\n           \
    \   v                    /                          |\n     +------------------+\
    \ NO      /                           |\n     | Can auth-req.(*1)|---------  \
    \                          |\n     | be constructed?  |                      \
    \               |\n     +------------------+                                 \
    \    |\n          YES |            initializing                       |\n    \
    \          |      ---------------------------------------. |\n              |\
    \     /                                       v v\n              |    |      \
    \      ----------------    NO  +-----------+\n              |    |           (\
    \ AUTH-REQUESTED )<------| passwords |\n              |    |            ----------------\
    \        |etc. known?|\n              v    |                                 \
    \   +-----------+\n        +-----------+ negative   -------------   negative \
    \    |YES\n        |   send    |---------->( AUTH-FAILED )<---------,    |\n \
    \      /| auth-req  |            -------------           |    |\n      / +-----------+\\\
    \                                   |    v\n     |             \\  \\  intermediate\
    \                   +-----------+\n     |              \\  -------------------------------->|\
    \   send    |\n     |               \\                                  | auth-req\
    \  |\n     | non-auth.      \\successful            successful +-----------+\n\
    \     | response (*2)   \\                               /     |    ^\n     v\
    \                  \\                             /      |    |\n    -----------------\
    \    \\       --------------      /       `----'\n   ( UNAUTHENTICATED )    ----->(\
    \ AUTH-SUCCEED )<----    intermediate\n    -----------------            --------------\n\
    \          Figure 1: Generic State Diagram for HTTP Authentication\n   Notes:\n\
    \   (*1) For example, the \"Digest\" scheme requires a server-provided\n   nonce\
    \ to construct client-side challenges.\n   (*2) In \"Basic\" and some others,\
    \ this cannot be distinguished from a\n   successfully authenticated response.\n"
- title: 2.2.  Syntax Notation
  contents:
  - "2.2.  Syntax Notation\n   This specification uses an extended ABNF syntax defined\
    \ in [RFC7230]\n   and [RFC5234].  The following syntax definitions are quoted\
    \ from\n   [RFC7230] and [RFC7235]: auth-scheme, quoted-string, auth-param, SP,\n\
    \   BWS, header-field, and challenge.  It also uses the convention of\n   using\
    \ header field names for specifying the syntax of values for the\n   header field.\n\
    \   Additionally, this specification uses the following syntax\n   definitions\
    \ as a refinement for token and the right-hand-side of\n   auth-param in [RFC7235].\n\
    \    bare-token           = bare-token-lead-char *bare-token-char\n    bare-token-lead-char\
    \ = %x30-39 / %x41-5A / %x61-7A\n    bare-token-char      = %x30-39 / %x41-5A\
    \ / %x61-7A / \"-\" / \"_\"\n    extension-token      = \"-\" bare-token 1*(\"\
    .\" bare-token)\n    extensive-token      = bare-token / extension-token\n   \
    \ integer              = \"0\" / (%x31-39 *%x30-39)  ; no leading zeros\n    \
    \           Figure 2: The BNF Syntax for Common Notations\n   Extensive-tokens\
    \ are used in this protocol where the set of\n   acceptable tokens includes private\
    \ extensions.  Any extensions of\n   this protocol MAY use either bare-tokens\
    \ allocated by IANA (under the\n   procedure described in Section 7), or extension-tokens\
    \ with the\n   format \"-<token>.<domain-name>\", where <domain-name> is a valid\n\
    \   (sub-)domain name on the Internet owned by the party who defines the\n   extension.\n"
- title: 3.  Optional Authentication
  contents:
  - "3.  Optional Authentication\n   The Optional-WWW-Authenticate header enables\
    \ a non-mandatory\n   authentication, which is not possible under the current\
    \ HTTP\n   authentication mechanism.\n   In several Web applications, users can\
    \ access the same contents as\n   both a guest user and an authenticated user.\
    \  In most Web\n   applications, this functionality is implemented using HTTP\
    \ cookies\n   [RFC6265] and custom form-based authentication.  The new\n   authentication\
    \ method using this message will provide a replacement\n   for these authentication\
    \ systems.\n   Servers MAY send HTTP non-interim responses containing the\n  \
    \ Optional-WWW-Authenticate header as a replacement for a 401 response\n   when\
    \ it is authentication-initializing.  The\n   Optional-WWW-Authenticate header\
    \ MUST NOT be sent on 401 responses\n   (i.e., a usual WWW-Authenticate header\
    \ MUST be used on 401\n   responses).\n    Optional-WWW-Authenticate = 1#challenge\n\
    \         Figure 3: BNF Syntax for Optional-WWW-Authenticate Header\n      Example:\n\
    \      HTTP/1.1 200 OK\n      Optional-WWW-Authenticate: Basic realm=\"xxxx\"\n\
    \   The challenges contained in the Optional-WWW-Authenticate header are\n   the\
    \ same as those for a 401 response corresponding to the same\n   request.  For\
    \ authentication-related matters, an optional\n   authentication request will\
    \ have the same meaning as a 401 message\n   with a corresponding WWW-Authenticate\
    \ header (as an authentication-\n   initializing response).  (The behavior for\
    \ other matters MAY be\n   different between the optional authentication and 401\
    \ messages.  For\n   example, clients MAY choose to cache the 200 messages with\
    \ the\n   Optional-WWW-Authenticate header field but not the 401 messages by\n\
    \   default.)\n   A response with an Optional-WWW-Authenticate header SHOULD be\n\
    \   returned from the server only when the request is either non-\n   authenticated\
    \ or authenticating to a wrong (not the server's\n   expected) protection space.\
    \  If a response is either an intermediate\n   or a negative response to a client's\
    \ authentication attempt, the\n   server MUST respond with a 401 status response\
    \ with a\n   WWW-Authenticate header instead.  Failure to comply with this rule\n\
    \   will render clients unable to distinguish between authentication\n   successes\
    \ and failures.\n   The server is NOT RECOMMENDED to include an Optional-WWW-Authenticate\n\
    \   header in a positive response when a client's authentication attempt\n   succeeds.\n\
    \   Whenever an authentication scheme supports servers sending some\n   parameter\
    \ that gives a hint about the URL space for the corresponding\n   protection space\
    \ for the same realm (e.g., \"path\" or \"domain\"),\n   servers requesting non-mandatory\
    \ authentication SHOULD send such a\n   parameter with the response.  Clients\
    \ supporting non-mandatory\n   authentication MUST recognize the parameter and\
    \ MUST send a request\n   with an appropriate authentication credential in an\
    \ Authorization\n   header for any URI inside the specified paths.\n   Implementations\
    \ are not required to support this header for all of\n   their supported authentication\
    \ schemes (i.e., they may choose to\n   implement it only for a subset of their\
    \ supported schemes).  New\n   authentication schemes can require support of the\
    \ optional\n   authentication as a prerequisite, though.\n"
- title: 3.1.  Note on Optional-WWW-Authenticate and Use of WWW-Authenticate
  contents:
  - "3.1.  Note on Optional-WWW-Authenticate and Use of WWW-Authenticate\n      Header\
    \ with Non-401 Status\n   In the current specification of HTTP/1.1, it is clarified\
    \ that the\n   WWW-Authenticate header can be used with messages with status codes\n\
    \   other than 401 (Authentication Required).  In particular, the use of\n   the\
    \ WWW-Authenticate header with the 200 status messages implies a\n   very similar\
    \ meaning to the above-defined Optional-WWW-Authenticate\n   header.\n   The design\
    \ of Optional-WWW-Authenticate header expects that the use\n   of a new header\
    \ guarantees that clients that are unaware of this\n   extension will ignore the\
    \ header, and that Web developers can rely on\n   that behavior to implement a\
    \ secondary fallback method of\n   authentication.  Several behavioral requirements\
    \ written in the above\n   section also assume this property and define a necessary\n\
    \   functionality to implement an optional authentication reliably and\n   consistently.\n\
    \   On the other hand, some experiments and discussions on the IETF\n   mailing\
    \ list revealed that most of (but not necessarily all of) the\n   existing HTTP\
    \ clients, at the time of writing, just ignore the WWW-\n   Authenticate headers\
    \ in non-401 messages, giving similar behavior\n   with the Optional-WWW-Authenticate.\
    \  However, every corner case of\n   behavior was not fully tested or well-defined\
    \ in the existing\n   specifications.\n   Considering these situations, the authors\
    \ of this document chose to\n   use a new header for a new feature \"experiment\"\
    .  This is to avoid\n   defining every corner-case behavior for the existing standard\
    \ WWW-\n   Authentication header in this experimental document, which could be\n\
    \   considered by some implementers as an incompatible changes to\n   existing\
    \ specification.\n   Experimentally, the authors propose that implementers of\
    \ the standard\n   HTTP/1.1 specification (especially implementers of this extension)\n\
    \   implement undefined (implementation-dependent) detailed handling of\n   the\
    \ WWW-Authenticate header with non-401 status messages similar as\n   those defined\
    \ above for the Optional-WWW-Authenticate header.  For\n   example, we propose\
    \ that servers return the 401 status for failed\n   authentication attempts, even\
    \ when the unauthenticated request to the\n   same resource will result in the\
    \ 200 status.  This can determine how\n   (whether) non-mandatory authentication\
    \ using the standard header\n   fields and status codes can be implemented.  If\
    \ this experiment is\n   successful, a future revision of this experimental document\
    \ may\n   \"bless\" and recommend the use of a standard WWW-Authenticate header,\n\
    \   with some stricter requirements on some corner-case behavior.\n"
- title: 4.  Authentication-Control Header
  contents:
  - "4.  Authentication-Control Header\n    Authentication-Control = 1#auth-control-entry\n\
    \    auth-control-entry     = auth-scheme 1*SP 1#auth-control-param\n    auth-control-param\
    \     = extensive-token BWS \"=\" BWS token\n                           / extensive-token\
    \ \"*\" BWS \"=\" BWS ext-value\n    ext-value              = <see RFC 5987, Section\
    \ 3.2>\n      Figure 4: The BNF Syntax for the Authentication-Control Header\n\
    \   The Authentication-Control header provides more precise control of\n   the\
    \ client behavior for Web applications using an HTTP authentication\n   protocol.\
    \  This header is supposed to be generated in the application\n   layer, as opposed\
    \ to the WWW-Authenticate headers, which will usually\n   be generated by the\
    \ Web servers.\n   Clients MAY freely choose any subset of these parameters to\
    \ be\n   supported.  Also, these may choose to support any of the parameters\n\
    \   for only a subset of their supported authentication schemes.\n   However,\
    \ authentication schemes can require/recommend support for\n   some of these parameters\
    \ as a prerequisite.\n   The Authentication-Control header contains one or more\n\
    \   \"authentication control entries\", each of which corresponds to a\n   single\
    \ realm for a specific authentication scheme.  If the\n   auth-scheme specified\
    \ for an entry supports the HTTP \"realm\" feature,\n   that entry MUST contain\
    \ the \"realm\" parameter.  If not, the entry\n   MUST NOT contain the \"realm\"\
    \ parameter.\n   Among the multiple entries in the header, the relevant entries\
    \ in the\n   header are those corresponding to an auth-scheme and a realm (if\
    \ any)\n   for which \"the authentication process is being performed or going\
    \ to\n   be performed\".  In more detail:\n   (1)  If the response is either an\
    \ authentication-initializing\n        response or a negatively authenticated\
    \ response, there can be\n        multiple challenges in the WWW-Authenticate\
    \ header (or the\n        Optional-WWW-Authenticate header defined in this extension),\n\
    \        each of which corresponds to a different scheme and realm.  In\n    \
    \    this case, the client has a choice about the scheme and realm\n        they\
    \ will use to authenticate.  Only the entry in the\n        Authentication-Control\
    \ header corresponding to that scheme and\n        realm are relevant.\n   (2)\
    \  If the response is either an intermediate authenticating\n        response\
    \ or a successfully authenticated response, the scheme\n        and realm given\
    \ in the Authorization header of the HTTP request\n        will determine the\
    \ currently ongoing authentication process.\n        Only the entry corresponding\
    \ to that scheme and realm are\n        relevant.\n   The server MAY send an Authentication-Control\
    \ header containing non-\n   relevant entries.  The client MUST ignore all non-relevant\
    \ entries it\n   received.\n   Every entry contains one or more parameters, each\
    \ of which is a name-\n   value pair.  The name of each parameter MUST be an extensive-token.\n\
    \   Clients MUST ignore any unknown parameters contained in this header.\n   The\
    \ entries for the same auth-scheme and the realm MUST NOT contain\n   duplicated\
    \ parameters for the same name.  Clients MAY either take any\n   one of those\
    \ duplicated entries or ignore all of them.\n   The type of parameter value depends\
    \ on the parameter name as defined\n   in the following subsections.  Regardless\
    \ of the type, however, the\n   recipients MUST accept both quoted and unquoted\
    \ representations of\n   values as defined in HTTP.  If the parameter is defined\
    \ to have a\n   string value, implementations MUST send any value outside of the\n\
    \   \"token\" ABNF syntax in either a quoted form or an ext-value form (see\n\
    \   Section 4.1).  If the parameter is defined as a token (or similar) or\n  \
    \ an integer, the value SHOULD follow the corresponding ABNF syntax\n   after\
    \ possible unquoting of the quoted-string value (as defined in\n   HTTP) and MUST\
    \ be sent in a plain (not an ext-value) form.  (Note:\n   the rest of this document\
    \ will show all string-value parameters in\n   quoted forms, and it will show\
    \ others in unquoted forms.)\n   Any parameters contained in this header MAY be\
    \ ignored by clients.\n   Also, even when a client accepts this header, users\
    \ are able to\n   circumvent the semantics of this header.  Therefore, if this\
    \ header\n   is used for security purposes, its use MUST be limited to providing\n\
    \   some non-fundamental additional security measures valuable for end-\n   users\
    \ (such as client-side logout for protection against console\n   takeover).  Server-side\
    \ applications MUST NOT rely on the use of this\n   header for protecting server-side\
    \ resources.\n   Note: The header syntax allows servers to specify Authentication-\n\
    \   Control for multiple authentication schemes, either as multiple\n   occurrences\
    \ of this header or as a combined single header (see\n   Section 3.2.2 of [RFC7230]\
    \ for rationale).  The same care as for\n   parsing multiple authentication challenges\
    \ needs to be taken.\n"
- title: 4.1.  Non-ASCII Extended Header Parameters
  contents:
  - "4.1.  Non-ASCII Extended Header Parameters\n   Parameters contained in the Authentication-Control\
    \ header MAY be\n   extended to non-ASCII values using the framework described\
    \ in\n   [RFC5987].  All servers and clients MUST be capable of receiving and\n\
    \   sending values encoded in [RFC5987] syntax.\n   If a value to be sent contains\
    \ only ASCII characters, the field MUST\n   be sent using plain RFC 7235 syntax.\
    \  The syntax as extended by\n   ext-value MUST NOT be used in this case.\n  \
    \ If a value (except the \"realm\" header) contains one or more non-ASCII\n  \
    \ characters, the parameter SHOULD be sent using the ext-value syntax\n   defined\
    \ in Section 3.2 of [RFC5987].  Such a parameter MUST have a\n   charset value\
    \ of \"UTF-8\", and the language value MUST always be\n   omitted (have an empty\
    \ value).  The same parameter MUST NOT be sent\n   more than once, regardless\
    \ of the syntax used.\n   For example, a parameter \"username\" with the value\
    \ \"Renee of France\"\n   SHOULD be sent as < username=\"Renee of France\" >.\
    \  If the value is\n   \"Ren<e acute>e of France\", it SHOULD be sent as\n   <\
    \ username*=UTF-8''Ren%C3%89e%20of%20France > instead.\n   Interoperability note:\
    \ [RFC7235], Section 2.2, defines the \"realm\"\n   authentication parameter that\
    \ cannot be replaced by the \"realm*\"\n   extend parameter.  This means that\
    \ the use of non-ASCII values for an\n   authentication realm is not the defined\
    \ behavior in HTTP.\n   Unfortunately, some people currently use a non-ASCII realm\
    \ parameter\n   in reality, but even its encoding scheme is not well defined.\n\
    \   Given this background, this document does not specify how to handle a\n  \
    \ non-ASCII \"realm\" parameter in the extended header fields.  If\n   needed,\
    \ the authors propose using a non-extended \"realm\" parameter\n   form, with\
    \ a wish for maximum interoperability.\n"
- title: 4.2.  Auth-Style Parameter
  contents:
  - "4.2.  Auth-Style Parameter\n   Example:\n   Authentication-Control: Digest realm=\"\
    protected space\",\n   auth-style=modal\n   The parameter \"auth-style\" specifies\
    \ the server's preference for user\n   interface behavior for user authentication.\
    \  This parameter can be\n   included in any kind of response; however, it is\
    \ only meaningful for\n   either authentication-initializing or negatively authenticated\n\
    \   responses.  The value of this parameter MUST be one of the bare-\n   tokens,\
    \ \"modal\" or \"non-modal\".  When the Optional-WWW-Authenticate\n   header is\
    \ used, the value of this parameter MUST be disregarded and\n   the value \"non-modal\"\
    \ is implied.\n   The value \"modal\" means that the server thinks the content\
    \ of the\n   response (body and other content-related headers) is valuable only\n\
    \   for users refusing the authentication request.  The clients are\n   expected\
    \ to ask the user for a password before processing the\n   content.  This behavior\
    \ is common for most of the current\n   implementations of Basic and Digest authentication\
    \ schemes.\n   The value \"non-modal\" means that the server thinks that the content\n\
    \   of the response (body and other content-related headers) is valuable\n   for\
    \ users before processing an authentication request.  The clients\n   are expected\
    \ to first process the content and then provide users with\n   the opportunity\
    \ to perform authentication.\n   The default behavior for clients is implementation\
    \ dependent, and it\n   may also depend on authentication schemes.  The proposed\
    \ default\n   behavior is \"modal\" for all authentication schemes unless otherwise\n\
    \   specified.\n   The above two different methods of authentication possibly\
    \ introduce\n   an observable difference of semantics when the response contains\n\
    \   state-changing side effects; for example, it can affect how Cookie\n   headers\
    \ [RFC6265] in 401 responses are processed.  However, the\n   server applications\
    \ SHOULD NOT depend on the existence of such side\n   effects.\n"
- title: 4.3.  Location-When-Unauthenticated Parameter
  contents:
  - "4.3.  Location-When-Unauthenticated Parameter\n   Example:\n   Authentication-Control:\
    \ Mutual realm=\"auth-space-1\",\n   location-when-unauthenticated=\"http://www.example.com/login.html\"\
    \n   The parameter \"location-when-unauthenticated\" specifies a location to\n\
    \   which any unauthenticated clients should be redirected.  This header\n   can\
    \ be used, for example, when there is a central login page for the\n   entire\
    \ Web application.  The value of this parameter is a string that\n   contains\
    \ a URL location.  If a received URL is not absolute, the\n   clients SHOULD consider\
    \ it a relative URL from the current location.\n   This parameter MAY be used\
    \ with a 401 response for an authentication-\n   initializing response.  It can\
    \ also be contained, although this is\n   NOT RECOMMENDED, in a positive response\
    \ with an\n   Optional-WWW-Authenticate header.  The clients MUST ignore this\n\
    \   parameter when a response is either successfully authenticated or\n   intermediately\
    \ authenticated.\n   When a client receives an authentication-initiating response\
    \ with\n   this parameter, and if the client has to ask users for authentication\n\
    \   credentials, the client will treat the entire response as if it were\n   a\
    \ 303 \"See Other\" response with a Location header that contains the\n   value\
    \ of this parameter (i.e., the client will be redirected to the\n   specified\
    \ location with a GET request).  Unlike a normal 303\n   response, if the client\
    \ can process authentication without the user's\n   interaction, this parameter\
    \ MUST be ignored.\n"
- title: 4.4.  No-Auth Parameter
  contents:
  - "4.4.  No-Auth Parameter\n   Example:\n   Authentication-Control: Basic realm=\"\
    entrance\", no-auth=true\n   The parameter \"no-auth\" is a variant of the\n \
    \  location-when-unauthenticated parameter; it specifies that new\n   authentication\
    \ attempts are not to be performed on this location in\n   order to improve the\
    \ user experience, without specifying the\n   redirection on the HTTP level. \
    \ This header can be used, for example,\n   when there is a central login page\
    \ for the entire Web application and\n   when an explicit user interaction with\
    \ the Web content is desired\n   before authentication.  The value of this parameter\
    \ MUST be a token\n   \"true\".  If the value is incorrect, the client MAY ignore\
    \ this\n   parameter.\n   This parameter MAY be used with authentication-initiating\
    \ responses.\n   It can also be contained, although this is NOT RECOMMENDED, in\
    \ a\n   positive response with an Optional-WWW-Authenticate header.  The\n   clients\
    \ MUST ignore this parameter when a response is either\n   successfully authenticated\
    \ or intermediately authenticated.\n   When a client receives an authentication-initiating\
    \ response with\n   this parameter, if the client has to ask users for authentication\n\
    \   credentials, the client will ignore the WWW-Authenticate header\n   contained\
    \ in the response and treat the whole response as a normal\n   negative 4xx-class\
    \ response instead of giving the user an opportunity\n   to start authentication.\
    \  If the client can process authentication\n   without the user's interaction,\
    \ this parameter MUST be ignored.\n   Using this parameter along with the location-when-unauthenticated\n\
    \   parameter is meaningless.  If both were supplied, clients SHOULD\n   ignore\
    \ the location-when-unauthenticated parameter.\n   This parameter SHOULD NOT be\
    \ used as a security measure to prevent\n   authentication attempts, as it is\
    \ easily circumvented by users.  This\n   parameter SHOULD be used solely for\
    \ improving the user experience of\n   Web applications.\n"
- title: 4.5.  Location-When-Logout Parameter
  contents:
  - "4.5.  Location-When-Logout Parameter\n   Example:\n   Authentication-Control:\
    \ Digest realm=\"protected space\",\n   location-when-logout=\"http://www.example.com/byebye.html\"\
    \n   The parameter \"location-when-logout\" specifies a location where the\n \
    \  client is to be redirected when the user explicitly requests a\n   logout.\
    \  The value of this parameter MUST be a string that contains a\n   URL location.\
    \  If a given URL is not absolute, the clients MUST\n   consider it a relative\
    \ URL from the current location.\n   This parameter MAY be used with successfully\
    \ authenticated responses.\n   If this parameter is contained in other kinds of\
    \ responses, the\n   clients MUST ignore this parameter.\n   When the user tells\
    \ the client to terminate the current\n   authentication period, if the client\
    \ currently displays a page\n   supplied by a response with this parameter, the\
    \ client will\n   automatically change the current location to the location specified\n\
    \   in this parameter using a new GET request, as if it has received a\n   303\
    \ response.  Any operations related to logout (e.g., erasing\n   memories of username,\
    \ authentication credential, and all related one-\n   time credentials such as\
    \ nonce or keys) SHOULD occur before\n   processing a page transition.\n   When\
    \ the user requests the client for the termination of an\n   authentication period,\
    \ if the client supports this parameter but the\n   server response does not contain\
    \ this parameter, the client's\n   RECOMMENDED behavior is as follows: if the\
    \ request corresponding to\n   the current content was the GET method, reload\
    \ the page without the\n   authentication credential.  Otherwise, keep the current\
    \ content as-is\n   and simply forget the authentication status.  The client SHOULD\
    \ NOT\n   replay a non-idempotent request without the user's explicit approval.\n\
    \   Web applications are encouraged to send this parameter with an\n   appropriate\
    \ value for any responses (except those with redirection\n   (3XX) statuses) for\
    \ non-GET requests.\n   See Section 5 for some examples for possible deployment\
    \ of this\n   parameter.\n"
- title: 4.6.  Logout-Timeout Parameter
  contents:
  - "4.6.  Logout-Timeout Parameter\n   Example:\n   Authentication-Control: Basic\
    \ realm=\"entrance\", logout-timeout=300\n   The parameter \"logout-timeout\"\
    , when contained in a successfully\n   authenticated response, means that any\
    \ authentication credentials and\n   state related to the current protection space\
    \ are to be discarded if\n   the time specified in this header (in seconds) has\
    \ passed since the\n   time this header was received.  The value MUST be an integer.\
    \  As a\n   special case, the value 0 means that the server is logging the client\n\
    \   out immediately from the current authentication space and that the\n   client\
    \ is now returned to the unauthenticated state.  This does not,\n   however, mean\
    \ that the long-term memories for the passwords and\n   passwords-related details\
    \ (such as password reminders and auto fill-\n   ins) should be removed.  If a\
    \ new timeout value is received for the\n   same authentication space, it cancels\
    \ the previous timeout and sets a\n   new timeout.\n"
- title: 4.7.  Username Parameter
  contents:
  - "4.7.  Username Parameter\n   Example:\n   Authentication-Control: Basic realm=\"\
    configuration\", username=\"admin\"\n   The parameter \"username\" tells us that\
    \ the only \"username\" to be\n   accepted by the server is the value given in\
    \ this parameter.\n   This parameter is particularly useful, for example, for\
    \ routers and\n   other network appliances with a Web configuration interface.\
    \  Many of\n   those use an HTTP Basic authentication with one predefined username,\n\
    \   with many varieties such as \"admin\", \"root\", \"user\", etc.  In the\n\
    \   current situation, users have almost no hint about the valid username\n  \
    \ upon the authentication request.  Some show the valid value in a\n   \"realm\"\
    \ string, some in the 401-status response page, shown _after_\n   the user gave\
    \ up the authentication and canceled the authentication\n   dialog.  If this parameter\
    \ is given, the client Web browser can auto-\n   fill the username field in the\
    \ authentication dialog before the users\n   attempt to authenticate themselves.\n\
    \   This parameter MAY be used with authentication-initiating responses\n   or\
    \ negatively authenticated responses requiring another attempt at\n   authentication.\
    \  The clients MUST ignore this parameter when a\n   response is either successfully\
    \ authenticated or intermediately\n   authenticated.\n   If the authentication\
    \ scheme to be used has a syntax limitation on\n   the allowed usernames (e.g.,\
    \ Basic and Digest do not allow colons in\n   usernames); the specified value\
    \ MUST follow that limitation.  Clients\n   SHOULD ignore any values that do not\
    \ conform to such limitations.\n   Also, if the used authentication scheme requires\
    \ a specific style of\n   text preparation for the username (e.g., PRECIS [RFC7564]\
    \ string\n   preparation or Unicode normalization), the server SHOULD send the\n\
    \   values satisfying such requirements (so that clients can use the\n   given\
    \ username as is).\n   Clients MAY still send any authentication requests with\
    \ other\n   usernames, possibly in vain.  Clients are not required (also not\n\
    \   forbidden) to give users opportunities for supplying a username\n   different\
    \ from the server-specified one.  Servers are also not\n   strictly required to\
    \ reject usernames other than specified, but doing\n   so will usually result\
    \ in bad user experiences and may confuse users\n   and clients.\n   Although\
    \ this parameter is useful in a specific class of use cases,\n   using it in a\
    \ general use case has many security implications and\n   possible pitfalls. \
    \ Please consult Section 8.1 before deciding to use\n   this parameter.\n"
- title: 5.  Usage Examples
  contents:
  - "5.  Usage Examples\n   This section shows some examples for applying this extension\
    \ to\n   typical websites that use forms and cookies for managing\n   authentication\
    \ and authorization.  The content of this section is not\n   normative and is\
    \ for illustrative purposes only.\n   In these examples, we assume that there\
    \ are two kinds of clients (Web\n   browsers).  One kind of these implements all\
    \ features described in\n   the previous sections.  We also assume that browsers\
    \ will have a user\n   interface that allows users to deactivate (log out from)\
    \ current\n   authentication sessions.  The other kind are the \"existing\"\n\
    \   implementations that do not support any of these features.\n   When not explicitly\
    \ specified, all settings described below are to be\n   applied with Authentication-Control\
    \ headers, and these can be sent to\n   clients regardless of the authentication\
    \ status (these will be\n   silently ignored whenever not effective).\n"
- title: '5.1.  Example 1: A Portal Site'
  contents:
  - "5.1.  Example 1: A Portal Site\n   This subsection provides an example application\
    \ for a site whose\n   structure is somewhat similar to conventional portal sites.\
    \  In\n   particular, most Web pages are available for guest (unauthenticated)\n\
    \   users, and, if authentication is performed, the content of these\n   pages\
    \ is customized for each user.  We assume that the site has the\n   following\
    \ kinds of pages currently:\n   o  Content pages\n   o  Pages/mechanism for performing\
    \ authentication:\n      *  There is one page that asks for a username and a password\
    \ using\n         a HTML POST form.\n      *  After the authentication attempt,\
    \ the user will be redirected\n         to either the page that was previously\
    \ displayed before the\n         authentication or some specific page.\n   o \
    \ A de-authentication (logout) page.\n"
- title: '5.1.1.  Case 1: A Simple Application'
  contents:
  - "5.1.1.  Case 1: A Simple Application\n   When such a site does not require specific\
    \ actions upon login and\n   logout, the following simple settings can be used:\n\
    \   o  Set up an optional authentication to all pages available to\n      guests.\
    \  Set up an Authentication-Control header with the \"auth-\n      style=non-modal\"\
    \ setting.\n   o  If there are pages only available to authenticated users, set\
    \ up a\n      mandatory authentication with the \"auth-style=non-modal\" setting.\n\
    \   o  No specific pages for authentication are needed.  It will be\n      performed\
    \ automatically, directed by the above setting.\n   o  A de-authentication page\
    \ is also not needed.  If the site has one,\n      put \"logout-timeout=0\" there.\n\
    \   o  For all pages for POST requests, it is advisable to have a\n      \"location-when-logout=<some\
    \ page>\".\n"
- title: '5.1.2.  Case 2: Specific Action Required on Logout'
  contents:
  - "5.1.2.  Case 2: Specific Action Required on Logout\n   If the site requires specific\
    \ actions upon logout, the following\n   settings can be used:\n   o  All settings\
    \ in Case 1 are applied.\n   o  For all pages, set up the Authentication-Control\
    \ header \"location-\n      when-logout=<de-authentication page>\".\n   o  In\
    \ the de-authentication page, no specific setup is needed.  If\n      there are\
    \ any direct links to the de-authentication page, put\n      \"logout-timeout=0\"\
    .\n"
- title: '5.1.3.  Case 3: Specific Page Displayed before Login'
  contents:
  - "5.1.3.  Case 3: Specific Page Displayed before Login\n   If the site needs to\
    \ display a specific page before login actions\n   (some announcements, user notices,\
    \ or even advertisements), the\n   following settings can be applied:\n   o  Set\
    \ up an optional authentication to all pages available to\n      guests.  Set\
    \ up an Authentication-Control header with\n      \"no-auth=true\".  Put a link\
    \ to a specific login page in contents.\n   o  If there are pages only available\
    \ to authenticated users, set up a\n      mandatory authentication with the\n\
    \      \"location-when-unauthenticated=<the login page>\".\n   o  For the specific\
    \ login page, set up a mandatory authentication.\n   o  For all pages for POST\
    \ requests, it is advisable to have\n      \"location-when-logout=<some page>\"\
    , too.\n   o  De-authentication pages are not needed.  If the site has one, put\n\
    \      \"logout-timeout=0\".\n"
- title: '5.2.  Example 2: Authenticated User-Only Sites'
  contents:
  - "5.2.  Example 2: Authenticated User-Only Sites\n   If almost all pages in the\
    \ target site require authentication (e.g.,\n   an Internet banking site), or\
    \ if there is no need to support both\n   unauthenticated and authenticated users\
    \ on the same resource, the\n   settings will become simpler.  The following are\
    \ examples for such a\n   site:\n   o  Set up a mandatory authentication to all\
    \ pages available to\n      authenticated users.  Set up an Authentication-Control\
    \ header with\n      the \"auth-style=non-modal\" setting.\n   o  Set up a handler\
    \ for the 401-status that requests users to\n      authenticate.\n   o  For all\
    \ pages for POST requests, it is advisable to have a\n      \"location-when-logout=<some\
    \ page>\", too.\n   o  De-authentication pages are not needed.  If the site will\
    \ have\n      one, put \"logout-timeout=0\" there.\n"
- title: 5.3.  When to Use Cookies
  contents:
  - "5.3.  When to Use Cookies\n   In current websites using form-based authentication,\
    \ Cookies\n   [RFC6265] are used for managing both authorization and application\n\
    \   sessions.  Using the extensions in this document, the former features\n  \
    \ will be provided by using (extended) HTTP authentication/\n   authorization\
    \ mechanisms.  In some cases, there will be ambiguity on\n   whether some functions\
    \ are for authorization management or for\n   session management.  The following\
    \ hints will be helpful for deciding\n   which features to use.\n   o  If there\
    \ is a need to serve multiple sessions for a single user\n      using multiple\
    \ browsers concurrently, use a Cookie for\n      distinguishing between sessions\
    \ for the same user.  (C.f. if there\n      is a need to distinguish between sessions\
    \ in the same browser,\n      HTML5 Web Storage [W3C.REC-webstorage-20130730]\
    \ features can be\n      used instead of Cookies.)\n   o  If a website is currently\
    \ deploying a session time-out feature,\n      consider who benefits from the\
    \ feature.  In most cases, the main\n      requirement for such a feature is to\
    \ protect users from having\n      their consoles and browsers hijacked (i.e.,\
    \ benefits are on the\n      users' side).  In such cases, the time-out features\
    \ provided in\n      this extension can be used.  On the other hand, the requirement\
    \ is\n      to protect the server's privilege (e.g., when some regulations\n \
    \     require limiting the time difference between a user's two-factor\n     \
    \ authentication and financial transaction commitment; the\n      requirement\
    \ is strictly on the servers' side), that should be\n      managed on the server\
    \ side using Cookies or other session-\n      management mechanisms.\n"
- title: 5.4.  Parallel Deployment with Form/Cookie Authentication
  contents:
  - "5.4.  Parallel Deployment with Form/Cookie Authentication\n   In some transition\
    \ periods, sites may need to support both HTTP-layer\n   and form-based authentication.\
    \  The following example shows one way\n   to achieve that.\n   o  If Cookies\
    \ are used even for HTTP-authenticated users, each\n      session determined by\
    \ Cookies SHOULD identify which authentication\n      has been used for the session.\n\
    \   o  First, set up any of the above settings for enabling HTTP-layer\n     \
    \ authentication.\n   o  For unauthenticated users, add the following things to\
    \ the Web\n      pages, unless the client supports this extension and HTTP-level\n\
    \      authentication:\n      *  For non-mandatory authenticated pages, add a\
    \ link to the form-\n         based authenticated pages.\n      *  For mandatory\
    \ authenticated pages, either put a link to form-\n         based authenticated\
    \ pages or put an HTML-level redirection\n         (using <META http-equiv=\"\
    refresh\" ...> element) to such pages.\n   o  In the form-based authenticated\
    \ pages, if users are not\n      authenticated, the page can provide a redirection\
    \ for HTTP-level\n      authentication by the \"location-when-unauthenticated\"\
    \ setting.\n   o  Users are identified for authorization and content customization\n\
    \      by the following logic:\n      *  First, check the result of the HTTP-level\
    \ authentication.  If\n         there is a Cookie session tied to a specific user,\
    \ both should\n         match.\n      *  If the user is not authenticated on the\
    \ HTTP-level, use the\n         conventional form-based method to determine the\
    \ user.\n      *  If there is a Cookie tied to HTTP authentication but there is\n\
    \         no corresponding HTTP authentication result, that session will\n   \
    \      be discarded (because it means that authentication is\n         deactivated\
    \ by the corresponding user).\n"
- title: 6.  Methods to Extend This Protocol
  contents:
  - "6.  Methods to Extend This Protocol\n   If a private extension to this protocol\
    \ is implemented, it MUST use\n   the extension-param to avoid conflicts with\
    \ this protocol and any\n   other extensions.  (Standardized extensions or extensions\
    \ that are\n   being standardized MAY use either bare-tokens or extension-tokens.)\n\
    \   When bare-tokens are used in this protocol, these MUST be allocated\n   by\
    \ IANA.  Any tokens used for non-private, non-experimental\n   parameters are\
    \ RECOMMENDED to be registered with IANA, regardless of\n   the kind of tokens\
    \ used.\n   Extension-tokens MAY be freely used for any non-standard, private,\n\
    \   and/or experimental uses.  An extension-token MUST use the format\n   \"-<bare-token>.<domain-name>\"\
    , where <domain-name> is a validly\n   registered (sub-)domain name on the Internet\
    \ owned by the party that\n   defines the extensions.  Any unknown parameter name\
    \ is to be ignored\n   regardless of whether it is an extension-token or a bare-token.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines two new entries for the \"\
    Permanent Message\n   Header Field Names\" registry.\n   +-------------+---------------------------+-------------------------+\n\
    \   |             | Entry 1:                  | Entry 2:                |\n  \
    \ +-------------+---------------------------+-------------------------+\n   |\
    \ Header      | Optional-WWW-Authenticate | Authentication-Control  |\n   | Field\
    \ Name  |                           |                         |\n   | Protocol\
    \    | http                      | http                    |\n   | Status    \
    \  | experimental              | experimental            |\n   | Change      |\
    \ IETF                      | IETF                    |\n   | Control     |  \
    \                         |                         |\n   | Spec.       | Section\
    \ 3 of this         | Section 4 of this       |\n   | Document    | document \
    \                 | document                |\n   +-------------+---------------------------+-------------------------+\n\
    \   This document also establishes the \"HTTP Authentication Control\n   Parameters\"\
    \ registry.  The registry manages case-insensitive ASCII\n   strings.  The string\
    \ MUST follow the extensive-token syntax defined\n   in Section 2.2.\n   To acquire\
    \ registered tokens, a specification for the use of such\n   tokens MUST be available\
    \ as a publicly accessible document (see\n   \"Specification Required\" in [RFC5226]).\n\
    \   Registrations for authentication control parameters are required to\n   include\
    \ a description of the control extension.  New registrations\n   are advised to\
    \ provide the following information:\n   o  Token: A token used in HTTP headers\
    \ for identifying the algorithm.\n   o  Specification: A reference for the specification\
    \ defining the\n      algorithm.\n   The initial content of this registry is as\
    \ follows:\n     +-------------------------------+------------------------------+\n\
    \     | Token                         | Specification                |\n     +-------------------------------+------------------------------+\n\
    \     | auth-style                    | Section 4.2 of this document |\n     |\
    \ location-when-unauthenticated | Section 4.3 of this document |\n     | no-auth\
    \                       | Section 4.4 of this document |\n     | location-when-logout\
    \          | Section 4.5 of this document |\n     | logout-timeout           \
    \     | Section 4.6 of this document |\n     | username                      |\
    \ Section 4.7 of this document |\n     +-------------------------------+------------------------------+\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The purpose of the logout timeout feature in\
    \ the Authentication-\n   control header is to protect users of clients from impersonation\n\
    \   caused by an attacker having access to the same console.  The server\n   application\
    \ implementers SHOULD be aware that the directive may\n   always be ignored by\
    \ either malicious clients or clients not\n   supporting this extension.  If the\
    \ purpose of introducing a timeout\n   for an authentication period is to protect\
    \ server-side resources,\n   this protection MUST be implemented by other means\
    \ such as HTTP\n   Cookies [RFC6265].\n   All parameters in the Authentication-Control\
    \ header SHOULD NOT be\n   used for any security-enforcement purposes.  Server-side\
    \ applications\n   MUST NOT assume that the header will be honored by clients\
    \ and users.\n"
- title: 8.1.  Security Implication of the Username Parameter
  contents:
  - "8.1.  Security Implication of the Username Parameter\n   The \"username\" parameter\
    \ sometimes reveals sensitive information\n   about the HTTP server and its configurations\
    \ that are useful for\n   security attacks.  In general, common security practice\
    \ suggests that\n   any kind of information on the existence/non-existence of\
    \ a specific\n   username shall not be disclosed before successful authentication.\n\
    \   Obviously, the \"username\" parameter contradicts this practice.\n   Given\
    \ this background, the use of the \"username\" parameter SHOULD be\n   strictly\
    \ limited to cases where all of the following conditions are\n   met:\n   (1)\
    \  the valid username is pre-configured and not modifiable (such as\n        root,\
    \ admin, or similar ones);\n   (2)  the valid username for such an appliance is\
    \ publicly known (for\n        example, written in a manual document); and\n \
    \  (3)  either the valid username for the server is easily guessable by\n    \
    \    other means (for example, from the model number shown in an\n        unauthenticated\
    \ page), or the server is accessible only from\n        limited networks.\n  \
    \ Most importantly, the \"username\" parameter SHOULD NOT be used in any\n   case\
    \ when the valid usernames can be changed/configured by users or\n   administrators.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5987]\
    \  Reschke, J., \"Character Set and Language Encoding for\n              Hypertext\
    \ Transfer Protocol (HTTP) Header Field\n              Parameters\", RFC 5987,\
    \ DOI 10.17487/RFC5987, August 2010,\n              <http://www.rfc-editor.org/info/rfc5987>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC6265]  Barth, A., \"HTTP State Management\
    \ Mechanism\", RFC 6265,\n              DOI 10.17487/RFC6265, April 2011,\n  \
    \            <http://www.rfc-editor.org/info/rfc6265>.\n   [RFC7564]  Saint-Andre,\
    \ P. and M. Blanchet, \"PRECIS Framework:\n              Preparation, Enforcement,\
    \ and Comparison of\n              Internationalized Strings in Application Protocols\"\
    ,\n              RFC 7564, DOI 10.17487/RFC7564, May 2015,\n              <http://www.rfc-editor.org/info/rfc7564>.\n\
    \   [RFC7615]  Reschke, J., \"HTTP Authentication-Info and Proxy-\n          \
    \    Authentication-Info Response Header Fields\", RFC 7615,\n              DOI\
    \ 10.17487/RFC7615, September 2015,\n              <http://www.rfc-editor.org/info/rfc7615>.\n\
    \   [W3C.REC-webstorage-20130730]\n              Hickson, I., \"Web Storage\"\
    , World Wide Web Consortium\n              Recommendation REC-webstorage-20130730,\
    \ July 2013,\n              <http://www.w3.org/TR/2013/REC-webstorage-20130730>.\n"
- title: Appendix A.  (Informative) Applicability of Features for Each Message
  contents:
  - "Appendix A.  (Informative) Applicability of Features for Each Message\n   This\
    \ section provides a cross-reference table showing the\n   applicability of the\
    \ features provided in this specification to each\n   kind of response described\
    \ in Section 2.1.  The table provided in\n   this section is for informative purposes\
    \ only.\n        +-------------------+-------+----------+-----------+------+\n\
    \        |                   | init. | success. | intermed. | neg. |\n       \
    \ +-------------------+-------+----------+-----------+------+\n        | Optional\
    \ auth.    | O     | n        | N         | N    |\n        | auth-style     \
    \   | O     | -        | -         | O    |\n        | loc.-when-unauth. | O \
    \    | I        | I         | i    |\n        | no-auth           | O     | I\
    \        | I         | i    |\n        | loc.-when-logout  | -     | O       \
    \ | -         | -    |\n        | logout-timeout    | -     | O        | -   \
    \      | -    |\n        | username          | O     | -        | -         |\
    \ O    |\n        +-------------------+-------+----------+-----------+------+\n\
    \   Legends:\n   O = MAY contain; n = SHOULD NOT contain; N = MUST NOT contain\n\
    \   i = SHOULD be ignored; I = MUST be ignored;\n   - = meaningless (to be ignored)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yutaka Oiwa\n   National Institute of Advanced Industrial\
    \ Science and Technology\n   Information Technology Research Institute\n   Tsukuba\
    \ Central 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: y.oiwa@aist.go.jp\n\
    \   Hajime Watanabe\n   National Institute of Advanced Industrial Science and\
    \ Technology\n   Information Technology Research Institute\n   Tsukuba Central\
    \ 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: h-watanabe@aist.go.jp\n\
    \   Hiromitsu Takagi\n   National Institute of Advanced Industrial Science and\
    \ Technology\n   Information Technology Research Institute\n   Tsukuba Central\
    \ 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: takagi.hiromitsu@aist.go.jp\n\
    \   Kaoru Maeda\n   Lepidum Co. Ltd.\n   Village Sasazuka 3, Suite #602\n   1-30-3\
    \ Sasazuka\n   Shibuya-ku, Tokyo\n   Japan\n   Email: maeda@lepidum.co.jp\n  \
    \ Tatsuya Hayashi\n   Lepidum Co. Ltd.\n   Village Sasazuka 3, Suite #602\n  \
    \ 1-30-3 Sasazuka\n   Shibuya-ku, Tokyo\n   Japan\n   Email: hayashi@lepidum.co.jp\n\
    \   Yuichi Ioku\n   Individual Contributor\n   Email: mutual-work@ioku.org\n"
