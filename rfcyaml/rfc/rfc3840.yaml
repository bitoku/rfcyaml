- contents:
  - "                 Indicating User Agent Capabilities in\n                 the
    Session Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification defines mechanisms by which a Session Initiation\n
    \  Protocol (SIP) user agent can convey its capabilities and\n   characteristics
    to other user agents and to the registrar for its\n   domain.  This information
    is conveyed as parameters of the Contact\n   header field.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . . . .
    . .  4\n   4.  Usage of the Content Negotiation Framework . . . . . . . . . .
    \ 6\n   5.  Computing Capabilities . . . . . . . . . . . . . . . . . . . .  7\n
    \  6.  Expressing Capabilities in a Registration  . . . . . . . . . . 10\n   7.
    \ Indicating Feature Sets in Remote Target URIs  . . . . . . . . 12\n   8.  OPTIONS
    Processing . . . . . . . . . . . . . . . . . . . . . . 13\n   9.  Contact Header
    Field . . . . . . . . . . . . . . . . . . . . . 13\n   10. Media Feature Tag Definitions
    \ . . . . . . . . . . . . . . . . 14\n       10.1.  Audio . . . . . . . . . .
    . . . . . . . . . . . . . . . 15\n       10.2.  Application . . . . . . . . .
    . . . . . . . . . . . . . 16\n       10.3.  Data. . . . . . . . . . . . . . .
    . . . . . . . . . . . 16\n       10.4.  Control . . . . . . . . . . . . . . .
    . . . . . . . . . 17\n       10.5.  Video . . . . . . . . . . . . . . . . . .
    . . . . . . . 17\n       10.6.  Text. . . . . . . . . . . . . . . . . . . . .
    . . . . . 18\n       10.7.  Automata. . . . . . . . . . . . . . . . . . . . .
    . . . 18\n       10.8.  Class . . . . . . . . . . . . . . . . . . . . . . . .
    . 19\n       10.9.  Duplex. . . . . . . . . . . . . . . . . . . . . . . . . 20\n
    \      10.10. Mobility. . . . . . . . . . . . . . . . . . . . . . . . 20\n       10.11.
    Description . . . . . . . . . . . . . . . . . . . . . . 21\n       10.12. Event
    Packages. . . . . . . . . . . . . . . . . . . . . 22\n       10.13. Priority.
    . . . . . . . . . . . . . . . . . . . . . . . 22\n       10.14. Methods . . .
    . . . . . . . . . . . . . . . . . . . . . 23\n       10.15. Extensions. . . .
    . . . . . . . . . . . . . . . . . . . 24\n       10.16. Schemes . . . . . . .
    . . . . . . . . . . . . . . . . . 24\n       10.17. Actor . . . . . . . . . .
    . . . . . . . . . . . . . . . 25\n       10.18. Is Focus. . . . . . . . . . .
    . . . . . . . . . . . . . 26\n   11. Security Considerations  . . . . . . . .
    . . . . . . . . . . . 26\n       11.1.  Considerations for Media Feature Tags
    . . . . . . . . . 26\n       11.2.  Considerations for Registrations. . . . .
    . . . . . . . 27\n       11.3.  Considerations for OPTIONS Responses. . . . .
    . . . . . 28\n       11.4.  Considerations for Dialog Initiating Messages . .
    . . . 28\n   12. IANA Considerations  . . . . . . . . . . . . . . . . . . . .
    . 28\n       12.1.  SIP Media Feature Tag Registration Tree . . . . . . . . 28\n
    \      12.2.  Media Feature Tags. . . . . . . . . . . . . . . . . . . 29\n       12.3.
    \ SIP Option Tag. . . . . . . . . . . . . . . . . . . . . 30\n   13. Acknowledgments
    \ . . . . . . . . . . . . . . . . . . . . . . . 30\n   14. References . . . .
    . . . . . . . . . . . . . . . . . . . . . . 31\n       14.1.  Normative References.
    . . . . . . . . . . . . . . . . . 31\n       14.2.  Informative References. .
    . . . . . . . . . . . . . . . 31\n   Appendix.  Overview of RFC 2533. . . . .
    . . . . . . . . . . . . . 33\n   Authors' Addresses . . . . . . . . . . . . .
    . . . . . . . . . . . 35\n   Full Copyright Statement . . . . . . . . . . . .
    . . . . . . . . . 36\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Session Initiation Protocol (SIP) [1] user agents vary widely
    in\n   their capabilities and in the types of devices they represent.\n   Frequently,
    it is important for another SIP element to learn the\n   capabilities and characteristics
    of a SIP UA.  Some of the\n   applications of this information include:\n   o
    \ One user agent, a PC-based application, is communicating with\n      another
    that is embedded in a limited-function device.  The PC\n      would like to be
    able to \"grey out\" those components of the user\n      interface that represent
    features or capabilities not supported by\n      its peer.  To do that, there
    needs to be a way to exchange\n      capability information within a dialog.\n
    \  o  A user has two devices at their disposal.  One is a videophone,\n      and
    the other, a voice-only wireless phone.  A caller wants to\n      interact with
    the user using video.  As such, they would like\n      their call preferentially
    routed to the device which supports\n      video.  To do this, the INVITE request
    can contain parameters that\n      express a preference for routing to a device
    with the specified\n      capabilities [11].\n   o  A network application would
    like to asynchronously send\n      information to a user agent in a MESSAGE [16]
    request.  However,\n      before sending it, they would like to know if the UA
    has the\n      capabilities necessary to receive the message.  To do that, they\n
    \     would ideally query a user database managed by the domain which\n      holds
    such information.  Population of such a database would\n      require that a UA
    convey its capabilities as part of its\n      registration.  Thus, there is a
    need for conveying capabilities in\n      REGISTER requests.\n   SIP has some
    support for expression of capabilities.  The Allow,\n   Accept, Accept-Language,
    and Supported header fields convey some\n   information about the capabilities
    of a user agent.  However, these\n   header fields convey only a small part of
    the information that is\n   needed.  They do not provide a general framework for
    expression of\n   capabilities.  Furthermore, they only specify capabilities\n
    \  indirectly; the header fields really indicate the capabilities of the\n   UA
    as they apply to this request.  SIP also has no ability to convey\n   characteristics,
    that is, information that describes a UA.\n   As a result, this specification
    provides a more general framework for\n   an indication of capabilities and characteristics
    in SIP.  Capability\n   and characteristic information about a UA is carried as
    parameters of\n   the Contact header field.  These parameters can be used within\n
    \  REGISTER requests and responses, OPTIONS responses, and requests and\n   responses
    that create dialogs (such as INVITE).\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in BCP 14, RFC 2119\n   [2]
    and indicate requirement levels for compliant implementations.\n"
  title: 2.  Terminology
- contents:
  - "3.  Definitions\n   Feature: As defined in RFC 2703 [17], a piece of information
    about\n      the media handling properties of a message passing system\n      component
    or of a data resource.  For example, the SIP methods\n      supported by a UA
    represent a feature.\n   Feature Tag: As defined in RFC 2703 [17], a feature tag
    is a name\n      that identifies a feature.  An example is \"sip.methods\".\n
    \  Media Feature: As defined in RFC 2703, [17], a media feature is\n      information
    that indicates facilities assumed to be available for\n      the message content
    to be properly rendered or otherwise\n      presented.  Media features are not
    intended to include information\n      that affects message transmission.\n      In
    the context of this specification, a media feature is\n      information that
    indicates facilities for handling SIP requests,\n      rather than specifically
    for content.  In that sense, it is used\n      synonymously with feature.\n   Feature
    Collection: As defined in RFC 2533 [4], a feature collection\n      is a collection
    of different media features and associated values.\n      This might be viewed
    as describing a specific rendering of a\n      specific instance of a document
    or resource by a specific\n      recipient.\n   Feature Set: As defined in RFC
    2703 [17], a feature set is\n      information about a sender, recipient, or other
    participant in a\n      message transfer which describes the set of features that
    it can\n      handle.  Where a 'feature' describes a single identified attribute\n
    \     of a resource, a 'feature set' describes a full set of possible\n      attributes.\n
    \  Feature Parameters: A set of SIP header field parameters that can\n      appear
    in the Contact header field.  The feature parameters\n      represent an encoding
    of a feature set.  Each set of feature\n      parameters maps to a feature set
    predicate.\n   Capability: As defined in RFC 2703 [17], a capability is an attribute\n
    \     of a sender or receiver (often the receiver) which indicates an\n      ability
    to generate or process a particular type of message\n      content.  A capability
    is distinct from a characteristic in that a\n      capability may or may not be
    utilized in any particular call,\n      whereas a characteristic is a non-negotiable
    property of a UA.\n      SIP itself will often negotiate whether or not capabilities
    are\n      used in a call.\n   Characteristic: A characteristic is like a capability,
    but describes\n      an aspect of a UA which is not negotiable.  As an example,
    whether\n      or not a UA is a mobile phone is a characteristic, not a\n      capability.
    \ The semantics of this specification do not\n      differentiate between capability
    and characteristic, but the\n      distinction is useful for illustrative purposes.
    \ Indeed, in the\n      text below, when we say \"capability\", it refers to both\n
    \     capabilities and characteristics, unless the text explicitly says\n      otherwise.\n
    \  Filter: A single expression in a feature set predicate.\n   Simple Filter:
    An expression in a feature set predicate which is a\n      comparison (equality
    or inequality) of a feature tag against a\n      feature value.\n   Disjunction:
    A boolean OR operation across some number of terms.\n   Conjunction: A boolean
    AND operation across some number of terms.\n   Predicate: A boolean expression.\n
    \  Feature Set Predicate: From RFC 2533 [4], a feature set predicate is\n      a
    function of an arbitrary feature collection value which returns\n      a Boolean
    result.  A TRUE result is taken to mean that the\n      corresponding feature
    collection belongs to some set of media\n      feature handling capabilities defined
    by this predicate.\n   Contact Predicate: The feature set predicate associated
    with a URI\n      registered in the Contact header field of a REGISTER request.
    \ The\n      contact predicate is derived from the feature parameters in the\n
    \     Contact header field.\n"
  title: 3.  Definitions
- contents:
  - "4.  Usage of the Content Negotiation Framework\n   This specification makes heavy
    use of the terminology and concepts in\n   the content negotiation work carried
    out within the IETF, and\n   documented in several RFCs.  The ones relevant to
    this specification\n   are RFC 2506 [3], which provides a template for registering
    media\n   feature tags, RFC 2533 [4], which presents a syntax and matching\n   algorithm
    for media feature sets, RFC 2738 [5], which provides a\n   minor update to RFC
    2533, and RFC 2703 [17], which provides a general\n   framework for content negotiation.\n
    \  In case the reader does not have the time to read those\n   specifications,
    Appendix A provides a brief overview of the concepts\n   and terminology in those
    documents that is critical for understanding\n   this specification.\n   Since
    the content negotiation work was primarily meant to apply to\n   documents or
    other resources with a set of possible renderings, it is\n   not immediately apparent
    how it is used to model SIP user agents.  A\n   feature set is composed of a set
    of feature collections, each of\n   which represents a specific rendering supported
    by the entity\n   described by the feature set.  In the context of a SIP user
    agent, a\n   feature collection represents an instantaneous modality.  That is,
    if\n   you look at the run time processing of a SIP UA and take a snapshot\n   in
    time, the feature collection describes what it is doing at that\n   very instant.\n
    \  This model is important, since it provides guidance on how to\n   determine
    whether something is a value for a particular feature tag,\n   or a feature tag
    by itself.  If two properties can be exhibited by a\n   UA simultaneously so that
    both are present in an instantaneous\n   modality, they need to be represented
    by separate media feature tags.\n   For example, a UA may be able to support some
    number of media types -\n   audio, video, and control.  Should each of these be
    different values\n   for a single \"media-types\" feature tag, or should each
    of them be a\n   separate boolean feature tag?  The model provides the answer.
    \ Since,\n   at any instance in time, a UA could be handling both audio and video,\n
    \  they need to be separate media feature tags.  However, the SIP\n   methods
    supported by a UA can each be represented as different values\n   for the same
    media feature tag (the \"sip.methods\" tag), because\n   fundamentally, a UA processes
    a single request at a time.  It may be\n   multi-threading, so that it appears
    that this is not so, but at a\n   purely functional level, it is true.\n   Clearly,
    there are weaknesses in this model, but it serves as a\n   useful guideline for
    applying the concepts of RFC 2533 to the problem\n   at hand.\n"
  title: 4.  Usage of the Content Negotiation Framework
- contents:
  - "5.  Computing Capabilities\n   To construct a set of Contact header field parameters
    that indicate\n   capabilities, a UA constructs a feature predicate for that contact.\n
    \  This process is described in terms of RFC 2533 [4] (and its minor\n   update,
    RFC 2738 [5]) syntax and constructs, followed by a conversion\n   to the syntax
    used in this specification.  However, this represents a\n   logical flow of processing.
    \ There is no requirement that an\n   implementation actually use RFC 2533 syntax
    as an intermediate step.\n   A UA MAY use any feature tags that are registered
    through IANA in the\n   SIP tree (Established in Section 12.1), IETF, or global
    trees [3];\n   this document registers several into the SIP tree.  The feature
    tags\n   discussed in this specification are referred to as base tags.  While\n
    \  other tags can be used, in order to identify them as feature\n   parameters
    (as opposed to parameters for another SIP extension), they\n   are encoded with
    a leading \"+\" sign in the Contact header field.  It\n   is also permissible
    to use the URI tree [3] for expressing vendor-\n   specific feature tags.  Feature
    tags in any other trees created\n   through IANA MAY also be used.\n   When using
    the \"sip.methods\" feature tag, a UA MUST NOT include\n   values that correspond
    to methods not standardized in IETF standards\n   track RFCs.  When using the
    \"sip.events\" feature tag, a UA MUST NOT\n   include values that correspond to
    event packages not standardized in\n   IETF standards track RFCs.  When using
    the \"sip.schemes\" feature tag,\n   a UA MUST NOT include values that correspond
    to schemes not\n   standardized in IETF standards track RFCs.  When using the\n
    \  \"sip.extensions\" feature tag, a UA MUST NOT include values that\n   correspond
    to option tags not standardized in IETF standards track\n   RFCs.\n   Note that
    the \"sip.schemes\" feature tag does not indicate the scheme\n   of the registered
    URI.  Rather, it indicates schemes that a UA is\n   capable of sending requests
    to, should such a URI be received in a\n   web page or Contact header field of
    a redirect response.\n   It is RECOMMENDED that a UA provide complete information
    in its\n   contact predicate.  That is, it SHOULD provide information on as many\n
    \  feature tags as possible.  The mechanisms in this specification work\n   best
    when user agents register complete feature sets.  Furthermore,\n   when a UA registers
    values for a particular feature tag, it MUST list\n   all values that it supports.
    \ For example, when including the\n   \"sip.methods\" feature tag, a UA MUST list
    all methods it supports.\n   The contact predicate constructed by a UA MUST be
    an AND of terms\n   (called a conjunction).  Each term is either an OR (called
    a\n   disjunction) of simple filters or negations of simple filters, or a\n   single
    simple filter or negation of a single filter.  In the case of\n   a disjunction,
    each filter in the disjunction MUST indicate feature\n   values for the same feature
    tag (i.e., the disjunction represents a\n   set of values for a particular feature
    tag), while each element of\n   the conjunction MUST be for a different feature
    tag.  Each simple\n   filter can be an equality, or in the case of numeric feature
    tags, an\n   inequality or range.   If a string (as defined in RFC 2533 [4]) is\n
    \  used as the value of a simple filter, that value MUST NOT include the\n   \"<\"
    or \">\" characters, the simple filter MUST NOT be negated, and it\n   MUST be
    the only simple filter for that particular feature tag.  This\n   contact predicate
    is then converted to a list of feature parameters,\n   following the procedure
    outlined below.\n   The contact predicate is a conjunction of terms.  Each term
    indicates\n   constraints on a single feature tag, and each term is represented
    by\n   a separate feature parameter that will be present in the Contact\n   header
    field.  The syntax of this parameter depends on the feature\n   tag.  Each forward
    slash in the feature tag is converted to a single\n   quote, and each colon are
    converted to an exclamation point.  For the\n   base tags - that is, those feature
    tags documented in this\n   specification (sip.audio, sip.automata, sip.class,
    sip.duplex,\n   sip.data, sip.control, sip.mobility, sip.description, sip.events,\n
    \  sip.priority, sip.methods, sip.extensions, sip.schemes,\n   sip.application,
    sip.video, language, type, sip.isfocus, sip.actor\n   and sip.text), the leading
    \"sip.\", if present, is stripped.  For\n   feature tags not in this list, the
    leading \"sip.\" MUST NOT be\n   stripped if present, and indeed, a plus sign
    (\"+\") MUST be added as\n   the first character of the Contact header field parameter.
    \ The\n   result is the feature parameter name.  As a result of these rules,\n
    \  the base tags appear \"naked\" in the Contact header field - they have\n   neither
    a \"+\" nor a \"sip.\" prefix.  All other tags will always have a\n   leading
    \"+\" when present in the Contact header field, and will\n   additionally have
    a \"sip.\" if the tag is in the SIP tree.\n   The value of the feature parameter
    depends on the term of the\n   conjunction.  If the term is a boolean expression
    with a value of\n   true, i.e., (sip.audio=TRUE), the contact parameter has no
    value.  If\n   the term of the conjunction is a disjunction, the value of the\n
    \  contact parameter is a quoted string.  The quoted string is a comma\n   separated
    list of strings, each one derived from one of the terms in\n   the disjunction.
    \ If the term of the conjunction is a negation, the\n   value of the contact parameter
    is a quoted string.  The quoted string\n   begins with an exclamation point (!),
    and the remainder is\n   constructed from the expression being negated.\n   The
    remaining operation is to compute a string from a primitive\n   filter. If the
    filter is a simple filter that is performing a numeric\n   comparison, the string
    starts with an octothorpe (#), followed by the\n   comparator in the filter (=,
    >=, or <=), followed by the value from\n   the filter.  If the value from the
    filter is expressed in rational\n   form (X / Y), then X and Y are divided, yielding
    a decimal number,\n   and this decimal number is output to the string.\n      RFC
    2533 uses a fractional notation to describe rational numbers.\n      This specification
    uses a decimal form.  The above text merely\n      converts between the two representations.
    \ Practically speaking,\n      this conversion is not needed since the numbers
    are the same in\n      either case.  However, it is described in case implementations\n
    \     wish to directly plug the predicates generated by the rules in\n      this
    section into an RFC 2533 implementation.\n   If the filter is a range (foo=X..Y),
    the string is equal to X:Y,\n   where X and Y have been converted from fractional
    numbers (A / B) to\n   their decimal equivalent.\n   If the filter is an equality
    over a token or boolean, then that token\n   or boolean value (\"TRUE\" or \"FALSE\")
    is output to the string.\n   If the filter is an equality over a quoted string,
    the output is a\n   less than (<), followed by the quoted string, followed by
    a greater\n   than (>).\n   As an example, this feature predicate:\n   (& (sip.mobility=fixed)\n
    \     (| (! (sip.events=presence)) (sip.events=message-summary))\n      (| (language=en)
    (language=de))\n      (sip.description=\"PC\")\n      (sip.newparam=TRUE)\n      (rangeparam=-4..5125/1000))\n
    \  would be converted into the following feature parameters:\n   mobility=\"fixed\";events=\"!presence,message-summary\";language=\"en,de\"\n
    \     ;description=\"<PC>\";+sip.newparam;+rangeparam=\"#-4:+5.125\"\n   These
    feature tags would then appear as part of the Contact header\n   field:\n   Contact:
    <sip:user@pc.example.com>\n             ;mobility=\"fixed\";events=\"!presence,message-summary\"\n
    \            ;language=\"en,de\";description=\"<PC>\"\n             ;+sip.newparam;+rangeparam=\"#-4:+5.125\"\n
    \  Notice how the leading \"sip.\" was stripped from the sip.mobility,\n   sip.events
    and sip.description feature tags before encoding them in\n   the Contact header
    field.  This is because these feature tags are\n   amongst the base tags listed
    above.  It is for this reason that these\n   feature tags were not encoded with
    a leading \"+\" either.  However,\n   the sip.newparam feature tag was encoded
    with both the \"+\" and its\n   leading \"sip.\", and the rangeparam was also
    encoded with a leading\n   \"+\".  This is because neither of these feature tags
    are defined in\n   this specification.  As such, the leading \"sip.\" is not stripped
    off,\n   and a \"+\" is added.\n"
  title: 5.  Computing Capabilities
- contents:
  - "6.  Expressing Capabilities in a Registration\n   When a UA registers, it can
    choose to indicate a feature set\n   associated with a registered contact.  Whether
    or not a UA does so\n   depends on what the registered URI represents.  If the
    registered URI\n   represents a UA instance (the common case in registrations),
    a UA\n   compliant to this specification SHOULD indicate a feature set using\n
    \  the mechanisms described here.  If, however, the registered URI\n   represents
    an address-of-record, or some other resource that is not\n   representable by
    a single feature set, it SHOULD NOT include a\n   feature set.  As an example,
    if a user wishes to forward calls from\n   sip:user1@example.com to sip:user2@example.org,
    it could generate a\n   registration that looks like, in part:\n   REGISTER sip:example.com
    SIP/2.0\n   To: sip:user1@example.com\n   Contact: sip:user2@example.org\n   In
    this case, the registered contact is not identifying a UA, but\n   rather, another
    address-of-record.  In such a case, the registered\n   contact would not indicate
    a feature set.\n   However, in some cases, a UA may wish to express feature parameters\n
    \  for an address-of-record.  One example is an AOR which represents a\n   multiplicity
    of devices in a home network, and routes to a proxy\n   server in the user's home.
    \ Since all devices in the home are for\n   personal use, the AOR itself can be
    described with the\n   ;class=\"personal\" feature parameter.  A registration
    that forwards\n   calls to this home AOR could make use of that feature parameter.\n
    \  Generally speaking, a feature parameter can only be associated with\n   an
    address-of-record if all devices bound to that address-of-record\n   share the
    exact same set of values for that feature parameter.\n   Similarly, in some cases,
    a UA can exhibit one characteristic or\n   another, but the characteristic is
    not known in advance.  For\n   example, a UA could represent a device that is
    a phone with an\n   embedded answering machine.  The ideal way to treat such devices
    is\n   to model them as if they were actually a proxy fronting two devices -\n
    \  a phone (which is never an answering machine), and an answering\n   machine
    (which is never a phone).  The registration from this device\n   would be constructed
    as if it were an AOR, as per the procedures\n   above.  Generally, this means
    that, unless the characteristic is\n   identical between the logical devices,
    that characteristic will not\n   be present in any registration generated by the
    actual device.\n   The remainder of this section assumes that a UA would like
    to\n   associate a feature set with a contact that it is registering.  This\n
    \  feature set is constructed and converted to a series of Contact\n   header
    field parameters, as described in Section 5, and those feature\n   parameters
    are added to the Contact header field value containing the\n   URI to which the
    parameters apply.  The Allow, Accept, Accept-\n   Language and Allow-Events [9]
    header fields are allowed in REGISTER\n   requests, and also indicate capabilities.
    \ However, their semantic in\n   REGISTER is different, indicating capabilities,
    used by the\n   registrar, for generation of the response.  As such, they are
    not a\n   substitute or an alternate for the Contact feature parameters, which\n
    \  indicate the capabilities of the UA generally speaking.\n   The REGISTER request
    MAY contain a Require header field with the\n   value \"pref\" if the client wants
    to be sure that the registrar\n   understands the extensions defined in this specification.
    \ This means\n   that the registrar will store the feature parameters, and make
    them\n   available to elements accessing the location service within the\n   domain.
    \ In the absence of the Require header field, a registrar that\n   does not understand
    this extension will simply ignore the Contact\n   header field parameters.\n   If
    a UA registers against multiple separate addresses-of-record, and\n   the contacts
    registered for each have different capabilities, a UA\n   MUST use different URIs
    in each registration.  This allows the UA to\n   uniquely determine the feature
    set that is associated with the\n   request URI of an incoming request.\n   As
    an example, a voicemail server that is a UA that supports audio\n   and video
    media types and is not mobile would construct a feature\n   predicate like this:\n
    \  (& (sip.audio=TRUE)\n      (sip.video=TRUE)\n      (sip.actor=msg-taker)\n
    \     (sip.automata=TRUE)\n      (sip.mobility=fixed)\n      (| (sip.methods=INVITE)
    (sip.methods=BYE) (sip.methods=OPTIONS)\n         (sip.methods=ACK) (sip.methods=CANCEL)))\n
    \  These would be converted into feature parameters and included in the\n   REGISTER
    request:\n   REGISTER sip:example.com SIP/2.0\n   From: sip:user@example.com;tag=asd98\n
    \  To: sip:user@example.com\n   Call-ID: hh89as0d-asd88jkk@host.example.com\n
    \  CSeq: 9987 REGISTER\n   Max-Forwards: 70\n   Via: SIP/2.0/UDP host.example.com;branch=z9hG4bKnashds8\n
    \  Contact: <sip:user@host.example.com>;audio;video\n     ;actor=\"msg-taker\";automata;mobility=\"fixed\"\n
    \    ;methods=\"INVITE,BYE,OPTIONS,ACK,CANCEL\"\n   Content-Length: 0\n   Note
    that a voicemail server is usually an automata and a message\n   taker.\n   When
    a UAC refreshes its registration, it MUST include its feature\n   parameters in
    that refresh if it wishes for them to remain active.\n   Furthermore, when a registrar
    returns a 200 OK response to a REGISTER\n   request, each Contact header field
    value MUST include all of the\n   feature parameters associated with that URI.\n"
  title: 6.  Expressing Capabilities in a Registration
- contents:
  - "7.  Indicating Feature Sets in Remote Target URIs\n   Target refresh requests
    and responses are used to establish and\n   modify the remote target URI in a
    dialog.  The remote target URI is\n   conveyed in the Contact header field.  A
    UAC or UAS MAY add feature\n   parameters to the Contact header field value in
    target refresh\n   requests and responses for the purpose of indicating the capabilities\n
    \  of the UA.  To do that, it constructs a set of feature parameters\n   according
    to Section 5.  These are then added as Contact header field\n   parameters in
    the request or response.\n   The feature parameters can be included in both initial
    requests and\n   mid-dialog requests, and MAY change mid-dialog to signal a change
    in\n   UA capabilities.\n   There is overlap in the callee capabilities mechanism
    with the Allow,\n   Accept, Accept-Language, and Allow-Events [9] header fields,
    which\n   can also be used in target refresh requests.  Specifically, the Allow\n
    \  header field and \"sip.methods\" feature tag indicate the same\n   information.
    \ The Accept header field and the \"type\" feature tag\n   indicate the same information.
    \ The Accept-Language header field and\n   the \"language\" feature tag indicate
    the same information.  The\n   Allow-Events header field and the \"sip.events\"
    feature tag indicate\n   the same information.  It is possible that other header
    fields and\n   feature tags defined in the future may also overlap.  When there\n
    \  exists a feature tag that describes a capability that can also be\n   represented
    with a SIP header field, a UA MUST use the header field\n   to describe the capability.
    \ A UA receiving a message that contains\n   both the header field and the feature
    tag MUST use the header field,\n   and not the feature tag.\n"
  title: 7.  Indicating Feature Sets in Remote Target URIs
- contents:
  - "8.  OPTIONS Processing\n   When a UAS compliant to this specification receives
    an OPTIONS\n   request, it MAY add feature parameters to the Contact header field
    in\n   the OPTIONS response for the purpose of indicating the capabilities\n   of
    the UA.  To do that, it constructs a set of feature parameters\n   according to
    Section 5.  These are then added as Contact header field\n   parameters in OPTIONS
    response.  Indeed, if feature parameters were\n   included in the registration
    generated by that UA, those same\n   parameters SHOULD be used in the OPTIONS
    response.\n   The guidelines in Section 7 regarding the overlap of the various\n
    \  callee capabilities feature tags with SIP header fields applies to\n   the
    generation of OPTIONS responses as well.  In particular, they\n   apply when a
    Contact header field is describing the UA which\n   generated the OPTIONS response.
    \ When a Contact header field in the\n   OPTIONS response is identifying a different
    UA, there is no overlap.\n"
  title: 8.  OPTIONS Processing
- contents:
  - "9.  Contact Header Field\n   This specification extends the Contact header field.
    \ In particular,\n   it allows for the Contact header field parameters to include\n
    \  feature-param.  Feature-param is a feature parameter that describes a\n   feature
    of the UA associated with the URI in the Contact header\n   field.  Feature parameters
    are identifiable because they either\n   belong to the well known set of base
    feature tags, or they begin with\n   a plus sign.\n   feature-param    =  enc-feature-tag
    [EQUAL LDQUOT (tag-value-list\n                       / string-value ) RDQUOT]\n
    \  enc-feature-tag  =  base-tags / other-tags\n   base-tags        =  \"audio\"
    / \"automata\" /\n                       \"class\" / \"duplex\" / \"data\" /\n
    \                      \"control\" / \"mobility\" / \"description\" /\n                       \"events\"
    / \"priority\" / \"methods\" /\n                       \"schemes\" / \"application\"
    / \"video\" /\n                       \"language\" / \"type\" / \"isfocus\" /\n
    \                      \"actor\" / \"text\" / \"extensions\"\n   other-tags      =
    \ \"+\" ftag-name\n   ftag-name       =  ALPHA *( ALPHA / DIGIT / \"!\" / \"'\"
    /\n                      \".\" / \"-\" / \"%\" )\n   tag-value-list  =  tag-value
    *(\",\" tag-value)\n   tag-value       =  [\"!\"] (token-nobang / boolean / numeric)\n
    \  token-nobang    =  1*(alphanum / \"-\" / \".\" / \"%\" / \"*\"\n                      /
    \"_\" / \"+\" / \"`\" / \"'\" / \"~\" )\n   boolean         =  \"TRUE\" / \"FALSE\"\n
    \  numeric         =  \"#\" numeric-relation number\n   numeric-relation  =  \">=\"
    / \"<=\" / \"=\" / (number \":\")\n   number          =  [ \"+\" / \"-\" ] 1*DIGIT
    [\".\" 0*DIGIT]\n   string-value    =  \"<\" *(qdtext-no-abkt / quoted-pair )
    \">\"\n   qdtext-no-abkt  =  LWS / %x21 / %x23-3B / %x3D\n                           /
    %x3F-5B / %x5D-7E / UTF8-NONASCII\n   Note that the tag-value-list uses an actual
    comma instead of the\n   COMMA construction because it appears within a quoted
    string, where\n   line folding cannot take place.\n   The production for qdtext
    can be found in RFC 3261 [1].\n   There are additional constraints on the usage
    of feature-param that\n   cannot be represented in a BNF.  There MUST only be
    one instance of\n   any feature tag in feature-param.  Any numbers present in
    a feature\n   parameter MUST be representable using an ANSI C double.\n   The
    following production updates the one in RFC 3261 [1] for\n   contact-params:\n
    \  contact-params    =  c-p-q / c-p-expires / feature-param\n                        /
    contact-extension\n"
  title: 9.  Contact Header Field
- contents:
  - "10.  Media Feature Tag Definitions\n   This specification defines an initial
    set of media feature tags for\n   use with this specification.  This section serves
    as the IANA\n   registration for these feature tags, which are made into the SIP\n
    \  media feature tag tree.  New media feature tags are registered in the\n   IETF
    or global trees based on the process defined for feature tag\n   registrations
    [3], or in the SIP tree based on the process defined in\n   Section 12.1.\n   Any
    registered feature tags MAY be used with this specification.\n   However, several
    existing ones appear to be particularly applicable.\n   These include the language
    feature tag [6], which can be used to\n   specify the language of the human or
    automata represented by the UA,\n   and the type feature tag [7], which can be
    used to specify the MIME\n   types that a SIP UA can receive in a SIP message.
    \ The audio, video,\n   application, data, and control feature tags in the SIP
    tree (each of\n   which indicate a media type, as defined in RFC 2327 [8]) are\n
    \  different.  They do not indicate top level MIME types which can be\n   received
    in SIP requests.  Rather, they indicate media types that can\n   be used in media
    streams, and as a result, match up with the types\n   defined in RFC 2327 [8].\n
    \  If a new SDP media type were to be defined, such as \"message\", a new\n   feature
    tag registration SHOULD be created for it in the SIP tree.\n   The name of the
    feature tag MUST equal \"sip.\" concatenated with the\n   name of the media type,
    unless there is an unlikely naming collision\n   between the new media type and
    an existing feature tag registration.\n   As a result, implementations can safely
    construct caller preferences\n   and callee capabilities for the new media type
    before it is\n   registered, as long as there is no naming conflict.\n   If a
    new media feature tag is registered with the intent of using\n   that tag with
    this specification, the registration is done for the\n   unencoded form of the
    tag (see Section 5).  In other words, if a new\n   feature tag \"foo\" is registered
    in the IETF tree, the IANA\n   registration would be for the tag \"foo\" and not
    \"+foo\".  Similarly,\n   if a new feature tag \"sip.gruu\" is registered in the
    SIP tree, the\n   IANA registration would be for the tag \"sip.gruu\" and not
    \"+sip.gruu\"\n   or \"gruu\".  As such, all registrations into the SIP tree will
    have\n   the \"sip.\" prefix.\n   The feature tags in this section are all registered
    in the SIP media\n   feature tag tree created by Section 12.1.\n"
  - contents:
    - "10.1.  Audio\n   Media feature tag name: sip.audio\n   ASN.1 Identifier: 1.3.6.1.8.4.1\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      that the device supports audio as a streaming media\n      type.\n   Values
      appropriate for use with this feature tag: Boolean.\n   The feature tag is intended
      primarily for use in the following\n      applications, protocols, services,
      or negotiation mechanisms: This\n      feature tag is most useful in a communications
      application for\n      describing the capabilities of a device, such as a phone
      or PDA.\n   Examples of typical use: Routing a call to a phone that can support\n
      \     audio.\n   Related standards or documents: RFC 3840\n   Security Considerations:
      Security considerations for this media\n      feature tag are discussed in Section
      11.1 of RFC 3840.\n"
    title: 10.1.  Audio
  - contents:
    - "10.2.  Application\n   Media feature tag name: sip.application\n   ASN.1 Identifier:
      1.3.6.1.8.4.2\n   Summary of the media feature indicated by this tag: This feature
      tag\n      indicates that the device supports application as a streaming\n      media
      type.  This feature tag exists primarily for completeness.\n      Since so many
      MIME types are underneath application, indicating\n      the ability to support
      applications provides little useful\n      information.\n   Values appropriate
      for use with this feature tag: Boolean.\n   The feature tag is intended primarily
      for use in the following\n      applications, protocols, services, or negotiation
      mechanisms: This\n      feature tag is most useful in a communications application,
      for\n      describing the capabilities of a device, such as a phone or PDA.\n
      \  Examples of typical use: Routing a call to a phone that can support a\n      media
      control application.\n   Related standards or documents: RFC 3840\n   Security
      Considerations: Security considerations for this media\n      feature tag are
      discussed in Section 11.1 of RFC 3840.\n"
    title: 10.2.  Application
  - contents:
    - "10.3.  Data\n   Media feature tag name: sip.data\n   ASN.1 Identifier: 1.3.6.1.8.4.3\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      that the device supports data as a streaming media type.\n   Values appropriate
      for use with this feature tag: Boolean.\n   The feature tag is intended primarily
      for use in the following\n      applications, protocols, services, or negotiation
      mechanisms: This\n      feature tag is most useful in a communications application
      for\n      describing the capabilities of a device, such as a phone or PDA.\n
      \  Examples of typical use: Routing a call to a phone that can support\n      a
      data streaming application.\n   Related standards or documents: RFC 3840\n   Security
      Considerations: Security considerations for this media\n      feature tag are
      discussed in Section 11.1 of RFC 3840.\n"
    title: 10.3.  Data
  - contents:
    - "10.4.  Control\n   Media feature tag name: sip.control\n   ASN.1 Identifier:
      1.3.6.1.8.4.4\n   Summary of the media feature indicated by this tag: This feature
      tag\n      indicates that the device supports control as a streaming media\n
      \     type.\n   Values appropriate for use with this feature tag: Boolean.\n
      \  The feature tag is intended primarily for use in the following\n      applications,
      protocols, services, or negotiation mechanisms: This\n      feature tag is most
      useful in a communications application for\n      describing the capabilities
      of a device, such as a phone or PDA.\n   Examples of typical use: Routing a
      call to a phone that can support\n      a floor control application.\n   Related
      standards or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.4.  Control
  - contents:
    - "10.5.  Video\n   Media feature tag name: sip.video\n   ASN.1 Identifier: 1.3.6.1.8.4.5\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      that the device supports video as a streaming media\n      type.\n   Values
      appropriate for use with this feature tag: Boolean.\n   The feature tag is intended
      primarily for use in the following\n      applications, protocols, services,
      or negotiation mechanisms: This\n      feature tag is most useful in a communications
      application for\n      describing the capabilities of a device, such as a phone
      or PDA.\n   Examples of typical use: Routing a call to a phone that can support\n
      \     video.\n   Related standards or documents: RFC 3840\n   Security Considerations:
      Security considerations for this media\n      feature tag are discussed in Section
      11.1 of RFC 3840.\n"
    title: 10.5.  Video
  - contents:
    - "10.6.  Text\n   Media feature tag name: sip.text\n   ASN.1 Identifier: 1.3.6.1.8.4.6\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      that the device supports text as a streaming media type.\n   Values appropriate
      for use with this feature tag: Boolean.\n   The feature tag is intended primarily
      for use in the following\n      applications, protocols, services, or negotiation
      mechanisms: This\n      feature tag is most useful in a communications application
      for\n      describing the capabilities of a device, such as a phone or PDA.\n
      \  Examples of typical use: Routing a call to a phone that can support\n      text.\n
      \  Related standards or documents: RFC 3840\n   Security Considerations: Security
      considerations for this media\n      feature tag are discussed in Section 11.1
      of RFC 3840.\n"
    title: 10.6.  Text
  - contents:
    - "10.7.  Automata\n   Media feature tag name: sip.automata\n   ASN.1 Identifier:
      1.3.6.1.8.4.7\n   Summary of the media feature indicated by this tag: The sip.automata\n
      \     feature tag is a boolean value that indicates whether the UA\n      represents
      an automata (such as a voicemail server, conference\n      server, IVR, or recording
      device) or a human.\n   Values appropriate for use with this feature tag: Boolean.
      \ TRUE\n      indicates that the UA represents an automata.\n   The feature
      tag is intended primarily for use in the following\n      applications, protocols,
      services, or negotiation mechanisms: This\n      feature tag is most useful
      in a communications application for\n      describing the capabilities of a
      device, such as a phone or PDA.\n   Examples of typical use: Refusing to communicate
      with an automata\n      when it is known that automated services are unacceptable.\n
      \  Related standards or documents: RFC 3840\n   Security Considerations: Security
      considerations for this media\n      feature tag are discussed in Section 11.1
      of RFC 3840.\n"
    title: 10.7.  Automata
  - contents:
    - "10.8.  Class\n   Media feature tag name: sip.class\n   ASN.1 Identifier: 1.3.6.1.8.4.8\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      the setting, business or personal, in which a\n      communications device is
      used.\n   Values appropriate for use with this feature tag: Token with an\n
      \     equality relationship.  Typical values include:\n      business: The device
      is used for business communications.\n      personal: The device is used for
      personal communications.\n   The feature tag is intended primarily for use in
      the following\n      applications, protocols, services, or negotiation mechanisms:
      This\n      feature tag is most useful in a communications application, for\n
      \     describing the capabilities of a device, such as a phone or PDA.\n   Examples
      of typical use: Choosing between a business phone and a home\n      phone.\n
      \  Related standards or documents: RFC 3840\n   Security Considerations: Security
      considerations for this media\n      feature tag are discussed in Section 11.1
      of RFC 3840.\n"
    title: 10.8.  Class
  - contents:
    - "10.9.  Duplex\n   Media feature tag name: sip.duplex\n   ASN.1 Identifier:
      1.3.6.1.8.4.9\n   Summary of the media feature indicated by this tag: The sip.duplex\n
      \     media feature tag indicates whether a communications device can\n      simultaneously
      send and receive media (\"full\"), alternate between\n      sending and receiving
      (\"half\"), can only receive (\"receive-only\")\n      or only send (\"send-only\").\n
      \  Values appropriate for use with this feature tag: Token with an\n      equality
      relationship.  Typical values include:\n      full: The device can simultaneously
      send and receive media.\n      half: The device can alternate between sending
      and receiving\n         media.\n      receive-only: The device can only receive
      media.\n      send-only: The device can only send media.\n   The feature tag
      is intended primarily for use in the following\n      applications, protocols,
      services, or negotiation mechanisms:\n      This feature tag is most useful
      in a communications application\n      for describing the capabilities of a
      device, such as a phone or\n      PDA.\n   Examples of typical use: Choosing
      to communicate with a broadcast\n      server, as opposed to a regular phone,
      when making a call to hear\n      an announcement.\n   Related standards or
      documents: RFC 3840\n   Security Considerations: Security considerations for
      this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.9.  Duplex
  - contents:
    - "10.10.  Mobility\n   Media feature tag name: sip.mobility\n   ASN.1 Identifier:
      1.3.6.1.8.4.10\n   Summary of the media feature indicated by this tag: The sip.mobility\n
      \     feature tag indicates whether the device is fixed (meaning that it\n      is
      associated with a fixed point of contact with the network), or\n      mobile
      (meaning that it is not associated with a fixed point of\n      contact).  Note
      that cordless phones are fixed, not mobile, based\n      on this definition.\n
      \  Values appropriate for use with this feature tag: Token with an\n      equality
      relationship.  Typical values include:\n      fixed: The device is stationary.\n
      \     mobile: The device can move around with the user.\n   The feature tag
      is intended primarily for use in the following\n      applications, protocols,
      services, or negotiation mechanisms:\n      This feature tag is most useful
      in a communications application\n      for describing the capabilities of a
      device, such as a phone or\n      PDA.\n   Examples of typical use: Choosing
      to communicate with a wireless\n      phone instead of a desktop phone.\n   Related
      standards or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.10.  Mobility
  - contents:
    - "10.11.  Description\n   Media feature tag name: sip.description\n   ASN.1 Identifier:
      1.3.6.1.8.4.11\n   Summary of the media feature indicated by this tag: The\n
      \     sip.description feature tag provides a textual description of the\n      device.\n
      \  Values appropriate for use with this feature tag: String with an\n      equality
      relationship.\n   The feature tag is intended primarily for use in the following\n
      \     applications, protocols, services, or negotiation mechanisms: This\n      feature
      tag is most useful in a communications application for\n      describing the
      capabilities of a device, such as a phone or PDA.\n   Examples of typical use:
      Indicating that a device is of a certain\n      make and model.\n   Related
      standards or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.11.  Description
  - contents:
    - "10.12.  Event Packages\n   Media feature tag name: sip.events\n   ASN.1 Identifier:
      1.3.6.1.8.4.12\n   Summary of the media feature indicated by this tag: Each
      value of the\n      sip.events (note the plurality) feature tag indicates a
      SIP event\n      package [9] supported by a SIP UA.  The values for this tag
      equal\n      the event package names that are registered by each event package.\n
      \  Values appropriate for use with this feature tag: Token with an\n      equality
      relationship.  Values are taken from the IANA SIP Event\n      types namespace
      registry.\n   The feature tag is intended primarily for use in the following\n
      \     applications, protocols, services, or negotiation mechanisms: This\n      feature
      tag is most useful in a communications application for\n      describing the
      capabilities of a device, such as a phone or PDA.\n   Examples of typical use:
      Choosing to communicate with a server that\n      supports the message waiting
      event package, such as a voicemail\n      server [12].\n   Related standards
      or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.12.  Event Packages
  - contents:
    - "10.13.  Priority\n   Media feature tag name: sip.priority\n   ASN.1 Identifier:
      1.3.6.1.8.4.13\n   Summary of the media feature indicated by this tag: The sip.priority\n
      \     feature tag indicates the call priorities the device is willing to\n      handle.
      \ A value of X means that the device is willing to take\n      requests with
      priority X and higher.  This does not imply that a\n      phone has to reject
      calls of lower priority.  As always, the\n      decision on handling of such
      calls is a matter of local policy.\n   Values appropriate for use with this
      feature tag: An integer.  Each\n      integral value corresponds to one of the
      possible values of the\n      Priority header field as specified in SIP [1].
      \ The mapping is\n      defined as:\n      non-urgent: Integral value of 10.
      \ The device supports non-urgent\n         calls.\n      normal: Integral value
      of 20.  The device supports normal calls.\n      urgent: Integral value of 30.
      \ The device supports urgent calls.\n      emergency: Integral value of 40.
      \ The device supports calls in the\n         case of an emergency situation.\n
      \  The feature tag is intended primarily for use in the following\n      applications,
      protocols, services, or negotiation mechanisms: This\n      feature tag is most
      useful in a communications application for\n      describing the capabilities
      of a device, such as a phone or PDA.\n   Examples of typical use: Choosing to
      communicate with the emergency\n      cell phone of a user.\n   Related standards
      or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.13.  Priority
  - contents:
    - "10.14.  Methods\n   Media feature tag name: sip.methods\n   ASN.1 Identifier:
      1.3.6.1.8.4.14\n   Summary of the media feature indicated by this tag: Each
      value of the\n      sip.methods (note the plurality) feature tag indicates a
      SIP\n      method supported by this UA.  In this case, \"supported\" means that\n
      \     the UA can receive requests with this method.  In that sense, it\n      has
      the same connotation as the Allow header field.\n   Values appropriate for use
      with this feature tag: Token with an\n      equality relationship.  Values are
      taken from the Methods table\n      defined in the IANA SIP parameters registry.\n
      \  The feature tag is intended primarily for use in the following\n      applications,
      protocols, services, or negotiation mechanisms: This\n      feature tag is most
      useful in a communications application for\n      describing the capabilities
      of a device, such as a phone or PDA.\n   Examples of typical use: Choosing to
      communicate with a presence\n      application on a PC, instead of a PC phone
      application.\n   Related standards or documents: RFC 3840\n   Security Considerations:
      Security considerations for this media\n      feature tag are discussed in Section
      11.1 of RFC 3840.\n"
    title: 10.14.  Methods
  - contents:
    - "10.15.  Extensions\n   Media feature tag name: sip.extensions\n   ASN.1 Identifier:
      1.3.6.1.8.4.15\n   Summary of the media feature indicated by this tag: Each
      value of the\n      sip.extensions feature tag (note the plurality) is a SIP
      extension\n      (each of which is defined by an option-tag registered with
      IANA)\n      that is understood by the UA.  Understood, in this context, means\n
      \     that the option tag would be included in a Supported header field\n      in
      a request.\n   Values appropriate for use with this feature tag: Token with
      an\n      equality relationship.  Values are taken from the option tags\n      table
      in the IANA SIP parameters registry.\n   The feature tag is intended primarily
      for use in the following\n      applications, protocols, services, or negotiation
      mechanisms: This\n      feature tag is most useful in a communications application
      for\n      describing the capabilities of a device, such as a phone or PDA.\n
      \  Examples of typical use: Choosing to communicate with a phone that\n      supports
      quality of service preconditions instead of one that does\n      not.\n   Related
      standards or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.15.  Extensions
  - contents:
    - "10.16.  Schemes\n   Media feature tag name: sip.schemes\n   ASN.1 Identifier:
      1.3.6.1.8.4.16\n   Summary of the media feature indicated by this tag: Each
      value of the\n      sip.schemes (note the plurality) media feature tag indicates
      a URI\n      scheme [10] that is supported by a UA.  Supported implies, for\n
      \     example, that the UA would know how to handle a URI of that scheme\n      in
      the Contact header field of a redirect response.\n   Values appropriate for
      use with this feature tag: Token with an\n      equality relationship.  Values
      are taken from the IANA URI scheme\n      registry.\n   The feature tag is intended
      primarily for use in the following\n      applications, protocols, services,
      or negotiation mechanisms: This\n      feature tag is most useful in a communications
      application for\n      describing the capabilities of a device, such as a phone
      or PDA.\n   Examples of typical use: Choosing to get redirected to a phone number\n
      \     when a called party is busy, rather than a web page.\n   Related standards
      or documents: RFC 3840\n   Security Considerations: Security considerations
      for this media\n      feature tag are discussed in Section 11.1 of RFC 3840.\n"
    title: 10.16.  Schemes
  - contents:
    - "10.17.  Actor\n   Media feature tag name: sip.actor\n   ASN.1 Identifier: 1.3.6.1.8.4.17\n
      \  Summary of the media feature indicated by this tag: This feature tag\n      indicates
      the type of entity that is available at this URI.\n   Values appropriate for
      use with this feature tag: Token with an\n      equality relationship.  The
      following values are defined:\n      principal: The device provides communication
      with the principal\n         that is associated with the device.  Often this
      will be a\n         specific human being, but it can be an automata (for example,\n
      \        when calling a voice portal).\n      attendant: The device provides
      communication with an automaton or\n         person that will act as an intermediary
      in contacting the\n         principal associated with the device, or a substitute.\n
      \     msg-taker: The device provides communication with an automaton or\n         person
      that will take messages and deliver them to the\n         principal.\n      information:
      The device provides communication with an automaton\n         or person that
      will provide information about the principal.\n   The feature tag is intended
      primarily for use in the following\n      applications, protocols, services,
      or negotiation mechanisms: This\n      feature tag is most useful in a communications
      application for\n      describing the capabilities of a device, such as a phone
      or PDA.\n   Examples of typical use: Requesting that a call not be routed to\n
      \     voicemail.\n   Related standards or documents: RFC 3840\n   Security Considerations:
      Security considerations for this media\n      feature tag are discussed in Section
      11.1 of RFC 3840.\n"
    title: 10.17.  Actor
  - contents:
    - "10.18.  Is Focus\n   Media feature tag name: sip.isfocus\n   ASN.1 Identifier:
      1.3.6.1.8.4.18\n   Summary of the media feature indicated by this tag: This
      feature tag\n      indicates that the UA is a conference server, also known
      as a\n      focus, and will mix together the media for all calls to the same\n
      \     URI [13].\n   Values appropriate for use with this feature tag: Boolean.\n
      \  The feature tag is intended primarily for use in the following\n      applications,
      protocols, services, or negotiation mechanisms: This\n      feature tag is most
      useful in a communications application for\n      describing the capabilities
      of a device, such as a phone or PDA.\n   Examples of typical use: Indicating
      to a UA that the server to which\n      it has connected is a conference server.\n
      \  Related standards or documents: RFC 3840\n   Security Considerations: Security
      considerations for this media\n      feature tag are discussed in Section 11.1
      of RFC 3840.\n"
    title: 10.18.  Is Focus
  title: 10.  Media Feature Tag Definitions
- contents:
  - '11.  Security Considerations

    '
  - contents:
    - "11.1.  Considerations for Media Feature Tags\n   This section discusses security
      considerations for the media feature\n   tags, including, but not limited to,
      this specification.\n   The media feature tags defined in Section 10 reveal
      sensitive\n   information about a user or the user agent they are describing.
      \ Some\n   of the feature tags convey capability information about the agent
      -\n   for example, the media types it can support, the SIP methods it can\n
      \  support, and the SIP extensions it can support.  This capability\n   information
      might be used for industrial espionage, for example, and\n   so its protection
      may be important.  Other attributes, such as the\n   mobility, priority, and
      isfocus attributes, reveal characteristics of\n   the user agent.  These attributes
      are more sensitive than the\n   capability information.  They describe the way
      in which a user agent\n   is utilized by a user, and thus reveal information
      about user\n   preferences and the ways in which they want calls handled.  Some\n
      \  feature tags, such as languages, reveal information about the user\n   themself.
      \ As a result, applications which utilize these media\n   feature tags SHOULD
      provide a means for ensuring their\n   confidentiality.\n   The media feature
      tags can be used in ways which affect application\n   behaviors.  For example,
      the SIP caller preferences extension [11]\n   allows for call routing decisions
      to be based on the values of these\n   parameters.  Therefore, if an attacker
      can modify the values of these\n   feature tags, they may be able to affect
      the behavior of\n   applications.  As a result of this, applications which utilize
      these\n   media feature tags SHOULD provide a means for ensuring their\n   integrity.
      \ Similarly, media feature tags should only be trusted as\n   valid when they
      come from the user or user agent described by those\n   feature tags.  As a
      result, mechanisms for conveying feature tags\n   SHOULD provide a mechanism
      for guaranteeing authenticity.\n"
    title: 11.1.  Considerations for Media Feature Tags
  - contents:
    - "11.2.  Considerations for Registrations\n   As per the general requirements
      in Section 11.1, when media feature\n   tags are carried in a registration,
      authenticity, confidentiality,\n   and integrity need to be provided.  To accomplish
      this, registrations\n   containing capability information SHOULD be made by
      addressing the\n   registration to a SIPS URI (in other words, the Request URI
      of the\n   request would be sips:example.com when creating a registration in
      the\n   example.com domain).  Furthermore, the registrar SHOULD challenge the\n
      \  UA using digest over TLS, to verify its authenticity.  The\n   combination
      of TLS and digest provide integrity, confidentiality, and\n   authenticity,
      as required.\n   It is not necessary for the Contact in the registration to
      itself\n   contain a sips URI, since the feature tags are not carried in\n   incoming
      requests sent to the UA.\n"
    title: 11.2.  Considerations for Registrations
  - contents:
    - "11.3.  Considerations for OPTIONS Responses\n   When including information
      on capabilities in a response to an\n   OPTIONS request, a UA SHOULD verify
      with the user (either through a\n   user interface or though prior configuration)
      whether or not\n   capability information should be divulged to the requester.
      \ If the\n   identity of the requester cannot be cryptographically verified
      (using\n   digest or the SIP identity enhancements [15]), the user SHOULD also\n
      \  be alerted to this fact, and be allowed to choose whether such\n   information
      should be divulged.\n   If the user does wish to reveal capability information
      to the\n   requester, and wishes to guarantee its confidentiality, but the\n
      \  request did not arrive using SIPS, the UAS SHOULD redirect the\n   request
      to a sips URI.  This will cause the UAC to send the OPTIONS\n   request using
      SIPS instead, and therefore provide confidentiality of\n   any responses sent
      over the secure connections.\n   Furthermore, S/MIME MAY be used in the OPTIONS
      response.  In that\n   case, the capability information would be contained only
      in the\n   secured S/MIME body, and not in the header fields of the OPTIONS\n
      \  response.\n"
    title: 11.3.  Considerations for OPTIONS Responses
  - contents:
    - "11.4.  Considerations for Dialog Initiating Messages\n   When a UAS generates
      a response that will initiate a dialog, and they\n   wish to include capability
      information in the Contact header field,\n   the same considerations as described
      in Section 11.3 apply.\n   When a UAC generates a request that will initiate
      a dialog, it SHOULD\n   obtain permission from the user (either through a user
      interface or\n   apriori configuration) before including capability information
      in the\n   Contact header field of the request.  Confidentiality and integrity\n
      \  of the information SHOULD be provided using SIPS.  S/MIME MAY be\n   used.\n"
    title: 11.4.  Considerations for Dialog Initiating Messages
  title: 11.  Security Considerations
- contents:
  - "12.  IANA Considerations\n   There are a number of IANA considerations associated
    with this\n   specification.\n"
  - contents:
    - "12.1.  SIP Media Feature Tag Registration Tree\n   This specification serves
      to create a new media feature tag\n   registration tree, per the guidelines
      of Section 3.1.4 of RFC 2506\n   [3].  The name of this tree is the \"SIP Media
      Feature Tag\n   Registration Tree\", and its prefix is \"sip.\".  It is used
      for the\n   registration of media feature tags that are applicable to the Session\n
      \  Initiation Protocol, and whose meaning is only defined within that\n   usage.\n
      \  The addition of entries into this registry occurs through IETF\n   consensus,
      as defined in RFC 2434 [18].  This requires the\n   publication of an RFC that
      contains the registration.  The\n   information required in the registration
      is identical to the IETF\n   tree.  As such, specifications adding entries to
      the registry should\n   use the template provided in Section 3.4 of RFC 2506.
      \ Note that all\n   media feature tags registered in the SIP tree will have
      names with a\n   prefix of \"sip.\".  No leading \"+\" is used in the registrations
      in any\n   of the media feature tag trees.\n"
    title: 12.1.  SIP Media Feature Tag Registration Tree
  - contents:
    - "12.2.  Media Feature Tags\n   This specification registers a number of new
      Media feature tags\n   according to the procedures of RFC 2506 [3].  These registrations
      are\n   all made in the newly created SIP tree for media feature tags.  These\n
      \  registrations are:\n   sip.audio: The information for registering the sip.audio
      media\n      feature tag is contained in Section 10.1.\n   sip.application:
      The information for registering the sip.application\n      media feature tag
      is contained in Section 10.2.\n   sip.data: The information for registering
      the sip.data media feature\n      tag is contained in Section 10.3.\n   sip.control:
      The information for registering the sip.control media\n      feature tag is
      contained in Section 10.4.\n   sip.video: The information for registering the
      sip.video media\n      feature tag is contained in Section 10.5.\n   sip.text:
      The information for registering the sip.text media feature\n      tag is contained
      in Section 10.6.\n   sip.automata: The information for registering the sip.automata
      media\n      feature tag is contained in Section 10.7.\n   sip.class: The information
      for registering the sip.class media\n      feature tag is contained in Section
      10.8.\n   sip.duplex: The information for registering the sip.duplex media\n
      \     feature tag is contained in Section 10.9.\n   sip.mobility: The information
      for registering the sip.mobility media\n      feature tag is contained in Section
      10.10.\n   sip.description: The information for registering the sip.description\n
      \     media feature tag is contained in Section 10.11.\n   sip.events: The information
      for registering the sip.events media\n      feature tag is contained in Section
      10.12.\n   sip.priority: The information for registering the sip.priority media\n
      \     feature tag is contained in Section 10.13.\n   sip.methods: The information
      for registering the sip.methods media\n      feature tag is contained in Section
      10.14.\n   sip.extensions: The information for registering the sip.extensions\n
      \     media feature tag is contained in Section 10.15.\n   sip.schemes: The
      information for registering the sip.schemes media\n      feature tag is contained
      in Section 10.16.\n   sip.actor: The information for registering the sip.actor
      media\n      feature tag is contained in Section 10.17.\n   sip.isfocus: The
      information for registering the sip.isfocus media\n      feature tag is contained
      in Section 10.18.\n"
    title: 12.2.  Media Feature Tags
  - contents:
    - "12.3.  SIP Option Tag\n   This specification registers a single SIP option
      tag, pref.  The\n   required information for this registration, as specified
      in RFC 3261\n   [1], is:\n      Name: pref\n      Description: This option tag
      is used in a Require header field of\n         a registration to ensure that
      the registrar supports the caller\n         preferences extensions.\n"
    title: 12.3.  SIP Option Tag
  title: 12.  IANA Considerations
- contents:
  - "13.  Acknowledgments\n   The initial set of media feature tags used by this specification
    were\n   influenced by Scott Petrack's CMA design.  Jonathan Lennox, Bob\n   Penfield,
    Ben Campbell, Mary Barnes, Rohan Mahy, and John Hearty\n   provided helpful comments.
    \ Graham Klyne provided assistance on the\n   usage of RFC 2533.  Thanks to Allison
    Mankin for her comments and\n   support, and to Ted Hardie for his guidance on
    usage of the media\n   feature tags.\n"
  title: 13.  Acknowledgments
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]
      \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",
      BCP 14, RFC 2119, March 1997.\n   [3]   Holtman, K., Mutz, A., and T. Hardie,
      \"Media Feature Tag\n         Registration Procedure\", BCP 31, RFC 2506, March
      1999.\n   [4]   Klyne, G., \"A Syntax for Describing Media Feature Sets\", RFC\n
      \        2533, March 1999.\n   [5]   Klyne, G., \"Corrections to \"A Syntax
      for Describing Media\n         Feature Sets\"\", RFC 2738, December 1999.\n
      \  [6]   Hoffman, P., \"Registration of Charset and Languages Media\n         Features
      Tags\", RFC 2987, November 2000.\n   [7]   Klyne, G., \"MIME Content Types in
      Media Feature Expressions\",\n         RFC 2913, September 2000.\n   [8]   Handley,
      M. and V. Jacobson, \"SDP: Session Description\n         Protocol\", RFC 2327,
      April 1998.\n   [9]   Roach, A.B., \"Session Initiation Protocol (SIP)-Specific
      Event\n         Notification\", RFC 3265, June 2002.\n   [10]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n         Resource Identifiers
      (URI): Generic Syntax\", RFC 2396, August\n         1998.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [11]  Rosenberg, J., Schulzrinne, H. and
      P. Kyzivat, \"Caller\n         Preferences for the Session Initiation Protocol
      (SIP)\", RFC\n         3841, August 2004.\n   [12]  Mahy, R., \"A Message Summary
      and Message Waiting Indication\n         Event Package for the Session Initiation
      Protocol (SIP)\", RFC\n         3842, August 2004.\n   [13]  Rosenberg, J.,
      \"A Framework for Conferencing with the Session\n         Initiation Protocol\",
      Work in Progress, May 2003.\n   [14]  Howes, T. and M. Smith, \"LDAP: String
      Representation of Search\n         Filters\", Work in Progress, March 2003.\n
      \  [15]  Peterson, J., \"Enhancements for Authenticated Identity\n         Management
      in the Session  Initiation Protocol (SIP)\", Work in\n         Progress, March
      2003.\n   [16]  Campbell, B., Rosenberg, J., Schulzrinne, H., Huitema, C., and\n
      \        D. Gurle, \"Session Initiation Protocol (SIP) Extension for\n         Instant
      Messaging\", RFC 3428, December 2002.\n   [17]  Klyne, G., \"Protocol-independent
      Content Negotiation\n         Framework\", RFC 2703, September 1999.\n   [18]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n         Considerations
      Section in RFCs\", BCP 26, RFC 2434, October\n         1998.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A. Overview of RFC 2533\n   This section provides a brief overview of
    RFC 2533 and related\n   specifications that form the content negotiation framework.
    \ This\n   section does not represent normative behavior.  In the event of any\n
    \  conflict between the tutorial material here and the normative text in\n   RFC
    2533, RFC 2533 takes precedence.\n   A critical concept in the framework is that
    of a feature set.  A\n   feature set is information about an entity (in our case,
    a UA), which\n   describes a set of features it can handle.  A feature set can
    be\n   thought of as a region in N-dimensional space.  Each dimension in\n   this
    space is a different media feature, identified by a media\n   feature tag.  For
    example, one dimension (or axis) might represent\n   languages, another might
    represent methods, and another, MIME types.\n   A feature collection represents
    a single point in this space.  It\n   represents a particular rendering or instance
    of an entity (in our\n   case, a UA).  For example, a \"rendering\" of a UA would
    define an\n   instantaneous mode of operation that it can support.  One such\n
    \  rendering would be processing the INVITE method, which carried the\n   application/sdp
    MIME type, sent to a UA for a user that is speaking\n   English.\n   A feature
    set can therefore be defined as a set of feature\n   collections.  In other words,
    a feature set is a region of N-\n   dimensional feature-space, that region being
    defined by the set of\n   points - feature collections - that make up the space.
    \ If a\n   particular feature collection is in the space, it means that the\n
    \  rendering described by that feature collection is supported by the\n   device
    with that feature set.\n   How does one represent a feature set?  There are many
    ways to\n   describe an N-dimensional space.  One way is to identify mathematical\n
    \  functions which identify its contours.  Clearly, that is too complex\n   to
    be useful.  The solution taken in RFC 2533 is to define the space\n   with a feature
    set predicate.  A feature predicate defines a relation\n   over an N-dimensional
    space; its input is any point in that space\n   (i.e., a feature collection),
    and is true for all points that are in\n   the region thus defined.\n   RFC 2533
    describes a syntax for writing down these N-dimensional\n   boolean functions,
    borrowed from LDAP [14].  It uses a prolog-style\n   syntax which is fairly self-explanatory.
    \ This representation is\n   called a feature set predicate.  The base unit of
    the predicate is a\n   filter, which is a boolean expression encased in round
    brackets.  A\n   filter can be complex, where it contains conjunctions and\n   disjunctions
    of other filters, or it can be simple.  A simple filter\n   is one that expresses
    a comparison operation on a single media\n   feature tag.\n   For example, consider
    the feature set predicate:\n      (& (foo=A)\n         (bar=B)\n         (| (baz=C)
    (& (baz=D) (bif=E))))\n   This defines a function over four media features - foo,
    bar, baz, and\n   bif.  Any point in feature space with foo equal to A, bar equal
    to B,\n   and baz equal to either C or D, and bif equal to E, is in the feature\n
    \  set defined by this feature set predicate.\n   Note that the predicate doesn't
    say anything about the number of\n   dimensions in feature space.  The predicate
    operates on a feature\n   space of any number of dimensions, but only those dimensions
    labeled\n   foo, bar, baz, and bif matter.  The result is that values of other\n
    \  media features don't matter.  The feature collection\n   {foo=A,bar=B,baz=C,bop=F}
    is in the feature set described by the\n   predicate, even though the media feature
    tag \"bop\" isn't mentioned.\n   Feature set predicates are therefore inclusive
    by default.  A feature\n   collection is present unless the boolean predicate
    rules it out.\n   This was a conscious design choice in RFC 2533.\n   RFC 2533
    also talks about matching a preference with a capability\n   set.  This is accomplished
    by representing both with a feature set.\n   A preference is a feature set - its
    a specification of a number of\n   feature collections, any one of which would
    satisfy the requirements\n   of the sender.  A capability is also a feature set
    - its a\n   specification of the feature collections that the recipient supports.\n
    \  There is a match when the spaces defined by both feature sets\n   overlap.
    \ When there is overlap, there exists at least one feature\n   collection that
    exists in both feature sets, and therefore a modality\n   or rendering desired
    by the sender which is supported by the\n   recipient.\n   This leads directly
    to the definition of a match.  Two feature sets\n   match if there exists at least
    one feature collection present in both\n   feature sets.\n   Computing a match
    for two general feature set predicates is not easy.\n   Section 5 of RFC 2533
    presents an algorithm for doing it by expanding\n   an arbitrary expression into
    disjunctive normal form.  However, the\n   feature set predicates used by this
    specification are constrained.\n   They are always in conjunctive normal form,
    with each term in the\n   conjunction describing values for different media features.
    \ This\n   makes computation of a match easy.  It is computed independently for\n
    \  each media feature, and then the feature sets overlap if media\n   features
    specified in both sets overlap.  Computing the overlap of a\n   single media feature
    is very straightforward, and is a simple matter\n   of computing whether two finite
    sets overlap.\n"
  title: Appendix A. Overview of RFC 2533
- contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   600 Lanidex Plaza\n
    \  Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@dynamicsoft.com\n
    \  URI:   http://www.jdrosen.net\n   Henning Schulzrinne\n   Columbia University\n
    \  M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY  10027\n   US\n   EMail:
    schulzrinne@cs.columbia.edu\n   URI:   http://www.cs.columbia.edu/~hgs\n   Paul
    Kyzivat\n   Cisco Systems\n   1414 Massachusetts Avenue\n   BXB500 C2-2\n   Boxboro,
    MA  01719\n   US\n   EMail: pkyzivat@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
