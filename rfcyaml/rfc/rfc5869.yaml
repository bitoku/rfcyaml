- title: __initial_text__
  contents:
  - '      HMAC-based Extract-and-Expand Key Derivation Function (HKDF)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a simple Hashed Message Authentication Code\n\
    \   (HMAC)-based key derivation function (HKDF), which can be used as a\n   building\
    \ block in various protocols and applications.  The key\n   derivation function\
    \ (KDF) is intended to support a wide range of\n   applications and requirements,\
    \ and is conservative in its use of\n   cryptographic hash functions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5869.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A key derivation function (KDF) is a basic and essential\
    \ component of\n   cryptographic systems.  Its goal is to take some source of\
    \ initial\n   keying material and derive from it one or more cryptographically\n\
    \   strong secret keys.\n   This document specifies a simple HMAC-based [HMAC]\
    \ KDF, named HKDF,\n   which can be used as a building block in various protocols\
    \ and\n   applications, and is already used in several IETF protocols,\n   including\
    \ [IKEv2], [PANA], and [EAP-AKA].  The purpose is to document\n   this KDF in\
    \ a general way to facilitate adoption in future protocols\n   and applications,\
    \ and to discourage the proliferation of multiple KDF\n   mechanisms.  It is not\
    \ intended as a call to change existing\n   protocols and does not change or update\
    \ existing specifications using\n   this KDF.\n   HKDF follows the \"extract-then-expand\"\
    \ paradigm, where the KDF\n   logically consists of two modules.  The first stage\
    \ takes the input\n   keying material and \"extracts\" from it a fixed-length\
    \ pseudorandom\n   key K.  The second stage \"expands\" the key K into several\
    \ additional\n   pseudorandom keys (the output of the KDF).\n   In many applications,\
    \ the input keying material is not necessarily\n   distributed uniformly, and\
    \ the attacker may have some partial\n   knowledge about it (for example, a Diffie-Hellman\
    \ value computed by a\n   key exchange protocol) or even partial control of it\
    \ (as in some\n   entropy-gathering applications).  Thus, the goal of the \"extract\"\
    \n   stage is to \"concentrate\" the possibly dispersed entropy of the input\n\
    \   keying material into a short, but cryptographically strong,\n   pseudorandom\
    \ key.  In some applications, the input may already be a\n   good pseudorandom\
    \ key; in these cases, the \"extract\" stage is not\n   necessary, and the \"\
    expand\" part can be used alone.\n   The second stage \"expands\" the pseudorandom\
    \ key to the desired\n   length; the number and lengths of the output keys depend\
    \ on the\n   specific cryptographic algorithms for which the keys are needed.\n\
    \   Note that some existing KDF specifications, such as NIST Special\n   Publication\
    \ 800-56A [800-56A], NIST Special Publication 800-108\n   [800-108] and IEEE Standard\
    \ 1363a-2004 [1363a], either only consider\n   the second stage (expanding a pseudorandom\
    \ key), or do not explicitly\n   differentiate between the \"extract\" and \"\
    expand\" stages, often\n   resulting in design shortcomings.  The goal of this\
    \ specification is\n   to accommodate a wide range of KDF requirements while minimizing\
    \ the\n   assumptions about the underlying hash function.  The \"extract-then-\n\
    \   expand\" paradigm supports well this goal (see [HKDF-paper] for more\n   information\
    \ about the design rationale).\n"
- title: 2.  HMAC-based Key Derivation Function (HKDF)
  contents:
  - '2.  HMAC-based Key Derivation Function (HKDF)

    '
- title: 2.1.  Notation
  contents:
  - "2.1.  Notation\n   HMAC-Hash denotes the HMAC function [HMAC] instantiated with\
    \ hash\n   function 'Hash'.  HMAC always has two arguments: the first is a key\n\
    \   and the second an input (or message).  (Note that in the extract\n   step,\
    \ 'IKM' is used as the HMAC input, not as the HMAC key.)\n   When the message\
    \ is composed of several elements we use concatenation\n   (denoted |) in the\
    \ second argument; for example, HMAC(K, elem1 |\n   elem2 | elem3).\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [KEYWORDS].\n"
- title: '2.2.  Step 1: Extract'
  contents:
  - "2.2.  Step 1: Extract\n   HKDF-Extract(salt, IKM) -> PRK\n   Options:\n     \
    \ Hash     a hash function; HashLen denotes the length of the\n              \
    \ hash function output in octets\n   Inputs:\n      salt     optional salt value\
    \ (a non-secret random value);\n               if not provided, it is set to a\
    \ string of HashLen zeros.\n      IKM      input keying material\n   Output:\n\
    \      PRK      a pseudorandom key (of HashLen octets)\n   The output PRK is calculated\
    \ as follows:\n   PRK = HMAC-Hash(salt, IKM)\n"
- title: '2.3.  Step 2: Expand'
  contents:
  - "2.3.  Step 2: Expand\n   HKDF-Expand(PRK, info, L) -> OKM\n   Options:\n    \
    \  Hash     a hash function; HashLen denotes the length of the\n             \
    \  hash function output in octets\n   Inputs:\n      PRK      a pseudorandom key\
    \ of at least HashLen octets\n               (usually, the output from the extract\
    \ step)\n      info     optional context and application specific information\n\
    \               (can be a zero-length string)\n      L        length of output\
    \ keying material in octets\n               (<= 255*HashLen)\n   Output:\n   \
    \   OKM      output keying material (of L octets)\n   The output OKM is calculated\
    \ as follows:\n   N = ceil(L/HashLen)\n   T = T(1) | T(2) | T(3) | ... | T(N)\n\
    \   OKM = first L octets of T\n   where:\n   T(0) = empty string (zero length)\n\
    \   T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\n   T(2) = HMAC-Hash(PRK, T(1) |\
    \ info | 0x02)\n   T(3) = HMAC-Hash(PRK, T(2) | info | 0x03)\n   ...\n   (where\
    \ the constant concatenated to the end of each T(n) is a\n   single octet.)\n"
- title: 3.  Notes to HKDF Users
  contents:
  - "3.  Notes to HKDF Users\n   This section contains a set of guiding principles\
    \ regarding the use\n   of HKDF.  A much more extensive account of such principles\
    \ and design\n   rationale can be found in [HKDF-paper].\n"
- title: 3.1.  To Salt or not to Salt
  contents:
  - "3.1.  To Salt or not to Salt\n   HKDF is defined to operate with and without\
    \ random salt.  This is\n   done to accommodate applications where a salt value\
    \ is not available.\n   We stress, however, that the use of salt adds significantly\
    \ to the\n   strength of HKDF, ensuring independence between different uses of\
    \ the\n   hash function, supporting \"source-independent\" extraction, and\n \
    \  strengthening the analytical results that back the HKDF design.\n   Random\
    \ salt differs fundamentally from the initial keying material in\n   two ways:\
    \ it is non-secret and can be re-used.  As such, salt values\n   are available\
    \ to many applications.  For example, a pseudorandom\n   number generator (PRNG)\
    \ that continuously produces outputs by\n   applying HKDF to renewable pools of\
    \ entropy (e.g., sampled system\n   events) can fix a salt value and use it for\
    \ multiple applications of\n   HKDF without having to protect the secrecy of the\
    \ salt.  In a\n   different application domain, a key agreement protocol deriving\n\
    \   cryptographic keys from a Diffie-Hellman exchange can derive a salt\n   value\
    \ from public nonces exchanged and authenticated between\n   communicating parties\
    \ as part of the key agreement (this is the\n   approach taken in [IKEv2]).\n\
    \   Ideally, the salt value is a random (or pseudorandom) string of the\n   length\
    \ HashLen.  Yet, even a salt value of less quality (shorter in\n   size or with\
    \ limited entropy) may still make a significant\n   contribution to the security\
    \ of the output keying material; designers\n   of applications are therefore encouraged\
    \ to provide salt values to\n   HKDF if such values can be obtained by the application.\n\
    \   It is worth noting that, while not the typical case, some\n   applications\
    \ may even have a secret salt value available for use; in\n   such a case, HKDF\
    \ provides an even stronger security guarantee.  An\n   example of such application\
    \ is IKEv1 in its \"public-key encryption\n   mode\", where the \"salt\" to the\
    \ extractor is computed from nonces that\n   are secret; similarly, the pre-shared\
    \ mode of IKEv1 uses a secret\n   salt derived from the pre-shared key.\n"
- title: 3.2.  The 'info' Input to HKDF
  contents:
  - "3.2.  The 'info' Input to HKDF\n   While the 'info' value is optional in the\
    \ definition of HKDF, it is\n   often of great importance in applications.  Its\
    \ main objective is to\n   bind the derived key material to application- and context-specific\n\
    \   information.  For example, 'info' may contain a protocol number,\n   algorithm\
    \ identifiers, user identities, etc.  In particular, it may\n   prevent the derivation\
    \ of the same keying material for different\n   contexts (when the same input\
    \ key material (IKM) is used in such\n   different contexts).  It may also accommodate\
    \ additional inputs to\n   the key expansion part, if so desired (e.g., an application\
    \ may want\n   to bind the key material to its length L, thus making L part of\
    \ the\n   'info' field).  There is one technical requirement from 'info': it\n\
    \   should be independent of the input key material value IKM.\n"
- title: 3.3.  To Skip or not to Skip
  contents:
  - "3.3.  To Skip or not to Skip\n   In some applications, the input key material\
    \ IKM may already be\n   present as a cryptographically strong key (for example,\
    \ the premaster\n   secret in TLS RSA cipher suites would be a pseudorandom string,\n\
    \   except for the first two octets).  In this case, one can skip the\n   extract\
    \ part and use IKM directly to key HMAC in the expand step.  On\n   the other\
    \ hand, applications may still use the extract part for the\n   sake of compatibility\
    \ with the general case.  In particular, if IKM\n   is random (or pseudorandom)\
    \ but longer than an HMAC key, the extract\n   step can serve to output a suitable\
    \ HMAC key (in the case of HMAC\n   this shortening via the extractor is not strictly\
    \ necessary since\n   HMAC is defined to work with long keys too).  Note, however,\
    \ that if\n   the IKM is a Diffie-Hellman value, as in the case of TLS with Diffie-\n\
    \   Hellman, then the extract part SHOULD NOT be skipped.  Doing so would\n  \
    \ result in using the Diffie-Hellman value g^{xy} itself (which is NOT\n   a uniformly\
    \ random or pseudorandom string) as the key PRK for HMAC.\n   Instead, HKDF should\
    \ apply the extract step to g^{xy} (preferably\n   with a salt value) and use\
    \ the resultant PRK as a key to HMAC in the\n   expansion part.\n   In the case\
    \ where the amount of required key bits, L, is no more than\n   HashLen, one could\
    \ use PRK directly as the OKM.  This, however, is\n   NOT RECOMMENDED, especially\
    \ because it would omit the use of 'info'\n   as part of the derivation process\
    \ (and adding 'info' as an input to\n   the extract step is not advisable -- see\
    \ [HKDF-paper]).\n"
- title: 3.4.  The Role of Independence
  contents:
  - "3.4.  The Role of Independence\n   The analysis of key derivation functions assumes\
    \ that the input\n   keying material (IKM) comes from some source modeled as a\
    \ probability\n   distribution over bit streams of a certain length (e.g., streams\n\
    \   produced by an entropy pool, values derived from Diffie-Hellman\n   exponents\
    \ chosen at random, etc.); each instance of IKM is a sample\n   from that distribution.\
    \  A major goal of key derivation functions is\n   to ensure that, when applying\
    \ the KDF to any two values IKM and IKM'\n   sampled from the (same) source distribution,\
    \ the resultant keys OKM\n   and OKM' are essentially independent of each other\
    \ (in a statistical\n   or computational sense).  To achieve this goal, it is\
    \ important that\n   inputs to KDF are selected from appropriate input distributions\
    \ and\n   also that inputs are chosen independently of each other (technically,\n\
    \   it is necessary that each sample will have sufficient entropy, even\n   when\
    \ conditioned on other inputs to KDF).\n   Independence is also an important aspect\
    \ of the salt value provided\n   to a KDF.  While there is no need to keep the\
    \ salt secret, and the\n   same salt value can be used with multiple IKM values,\
    \ it is assumed\n   that salt values are independent of the input keying material.\
    \  In\n   particular, an application needs to make sure that salt values are\n\
    \   not chosen or manipulated by an attacker.  As an example, consider\n   the\
    \ case (as in IKE) where the salt is derived from nonces supplied\n   by the parties\
    \ in a key exchange protocol.  Before the protocol can\n   use such salt to derive\
    \ keys, it needs to make sure that these nonces\n   are authenticated as coming\
    \ from the legitimate parties rather than\n   selected by the attacker (in IKE,\
    \ for example this authentication is\n   an integral part of the authenticated\
    \ Diffie-Hellman exchange).\n"
- title: 4.  Applications of HKDF
  contents:
  - "4.  Applications of HKDF\n   HKDF is intended for use in a wide variety of KDF\
    \ applications.\n   These include the building of pseudorandom generators from\
    \ imperfect\n   sources of randomness (such as a physical random number generator\n\
    \   (RNG)); the generation of pseudorandomness out of weak sources of\n   randomness,\
    \ such as entropy collected from system events, user's\n   keystrokes, etc.; the\
    \ derivation of cryptographic keys from a shared\n   Diffie-Hellman value in a\
    \ key-agreement protocol; derivation of\n   symmetric keys from a hybrid public-key\
    \ encryption scheme; key\n   derivation for key-wrapping mechanisms; and more.\
    \  All of these\n   applications can benefit from the simplicity and multi-purpose\
    \ nature\n   of HKDF, as well as from its analytical foundation.\n   On the other\
    \ hand, it is anticipated that some applications will not\n   be able to use HKDF\
    \ \"as-is\" due to specific operational requirements,\n   or will be able to use\
    \ it but without the full benefits of the\n   scheme.  One significant example\
    \ is the derivation of cryptographic\n   keys from a source of low entropy, such\
    \ as a user's password.  The\n   extract step in HKDF can concentrate existing\
    \ entropy but cannot\n   amplify entropy.  In the case of password-based KDFs,\
    \ a main goal is\n   to slow down dictionary attacks using two ingredients: a\
    \ salt value,\n   and the intentional slowing of the key derivation computation.\
    \  HKDF\n   naturally accommodates the use of salt; however, a slowing down\n\
    \   mechanism is not part of this specification.  Applications interested\n  \
    \ in a password-based KDF should consider whether, for example, [PKCS5]\n   meets\
    \ their needs better than HKDF.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   In spite of the simplicity of HKDF, there are\
    \ many security\n   considerations that have been taken into account in the design\
    \ and\n   analysis of this construction.  An exposition of all of these aspects\n\
    \   is beyond the scope of this document.  Please refer to [HKDF-paper]\n   for\
    \ detailed information, including rationale for the design and for\n   the guidelines\
    \ presented in Section 3.\n   A major effort has been made in the above paper\
    \ [HKDF-paper] to\n   provide a cryptographic analysis of HKDF as a multi-purpose\
    \ KDF that\n   exercises much care in the way it utilizes cryptographic hash\n\
    \   functions.  This is particularly important due to the limited\n   confidence\
    \ we have in the strength of current hash functions.  This\n   analysis, however,\
    \ does not imply the absolute security of any\n   scheme, and it depends heavily\
    \ on the strength of the underlying hash\n   function and on modeling choices.\
    \  Yet, it serves as a strong\n   indication of the correct structure of the HKDF\
    \ design and its\n   advantages over other common KDF schemes.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   The authors would like to thank members of the CFRG (Crypto\
    \ Forum\n   Research Group) list for their useful comments, and to Dan Harkins\n\
    \   for providing test vectors.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [HMAC]       Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n                Hashing for Message Authentication\"\
    , RFC 2104,\n                February 1997.\n   [KEYWORDS]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n                Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [SHS]        National Institute of Standards and\
    \ Technology, \"Secure\n                Hash Standard\", FIPS PUB 180-3, October\
    \ 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [1363a]      Institute of Electrical and Electronics\
    \ Engineers, \"IEEE\n                Standard Specifications for Public-Key Cryptography\
    \ -\n                Amendment 1: Additional Techniques\", IEEE Std\n        \
    \        1363a-2004, 2004.\n   [800-108]    National Institute of Standards and\
    \ Technology,\n                \"Recommendation for Key Derivation Using Pseudorandom\n\
    \                Functions\", NIST Special Publication 800-108,\n            \
    \    November 2008.\n   [800-56A]    National Institute of Standards and Technology,\n\
    \                \"Recommendation for Pair-Wise Key Establishment Schemes\n  \
    \              Using Discrete Logarithm Cryptography (Revised)\", NIST\n     \
    \           Special Publication 800-56A, March 2007.\n   [EAP-AKA]    Arkko, J.,\
    \ Lehtovirta, V., and P. Eronen, \"Improved\n                Extensible Authentication\
    \ Protocol Method for 3rd\n                Generation Authentication and Key Agreement\
    \ (EAP-AKA')\",\n                RFC 5448, May 2009.\n   [HKDF-paper] Krawczyk,\
    \ H., \"Cryptographic Extraction and Key\n                Derivation: The HKDF\
    \ Scheme\", Proceedings of CRYPTO 2010\n                (to appear), 2010, <http://eprint.iacr.org/2010/264>.\n\
    \   [IKEv2]      Kaufman, C., Ed., \"Internet Key Exchange (IKEv2)\n         \
    \       Protocol\", RFC 4306, December 2005.\n   [PANA]       Forsberg, D., Ohba,\
    \ Y., Ed., Patil, B., Tschofenig, H.,\n                and A. Yegin, \"Protocol\
    \ for Carrying Authentication for\n                Network Access (PANA)\", RFC\
    \ 5191, May 2008.\n   [PKCS5]      Kaliski, B., \"PKCS #5: Password-Based Cryptography\n\
    \                Specification Version 2.0\", RFC 2898, September 2000.\n"
- title: Appendix A.  Test Vectors
  contents:
  - "Appendix A.  Test Vectors\n   This appendix provides test vectors for SHA-256\
    \ and SHA-1 hash\n   functions [SHS].\n"
- title: A.1.  Test Case 1
  contents:
  - "A.1.  Test Case 1\n   Basic test case with SHA-256\n   Hash = SHA-256\n   IKM\
    \  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)\n   salt = 0x000102030405060708090a0b0c\
    \ (13 octets)\n   info = 0xf0f1f2f3f4f5f6f7f8f9 (10 octets)\n   L    = 42\n  \
    \ PRK  = 0x077709362c2e32df0ddc3f0dc47bba63\n          90b6c73bb50f9c3122ec844ad7c2b3e5\
    \ (32 octets)\n   OKM  = 0x3cb25f25faacd57a90434f64d0362f2a\n          2d2d0a90cf1a5a4c5db02d56ecc4c5bf\n\
    \          34007208d5b887185865 (42 octets)\n"
- title: A.2.  Test Case 2
  contents:
  - "A.2.  Test Case 2\n   Test with SHA-256 and longer inputs/outputs\n   Hash =\
    \ SHA-256\n   IKM  = 0x000102030405060708090a0b0c0d0e0f\n          101112131415161718191a1b1c1d1e1f\n\
    \          202122232425262728292a2b2c2d2e2f\n          303132333435363738393a3b3c3d3e3f\n\
    \          404142434445464748494a4b4c4d4e4f (80 octets)\n   salt = 0x606162636465666768696a6b6c6d6e6f\n\
    \          707172737475767778797a7b7c7d7e7f\n          808182838485868788898a8b8c8d8e8f\n\
    \          909192939495969798999a9b9c9d9e9f\n          a0a1a2a3a4a5a6a7a8a9aaabacadaeaf\
    \ (80 octets)\n   info = 0xb0b1b2b3b4b5b6b7b8b9babbbcbdbebf\n          c0c1c2c3c4c5c6c7c8c9cacbcccdcecf\n\
    \          d0d1d2d3d4d5d6d7d8d9dadbdcdddedf\n          e0e1e2e3e4e5e6e7e8e9eaebecedeeef\n\
    \          f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff (80 octets)\n   L    = 82\n   PRK\
    \  = 0x06a6b88c5853361a06104c9ceb35b45c\n          ef760014904671014a193f40c15fc244\
    \ (32 octets)\n   OKM  = 0xb11e398dc80327a1c8e7f78c596a4934\n          4f012eda2d4efad8a050cc4c19afa97c\n\
    \          59045a99cac7827271cb41c65e590e09\n          da3275600c2f09b8367793a9aca3db71\n\
    \          cc30c58179ec3e87c14c01d5c1f3434f\n          1d87 (82 octets)\n"
- title: A.3.  Test Case 3
  contents:
  - "A.3.  Test Case 3\n   Test with SHA-256 and zero-length salt/info\n   Hash =\
    \ SHA-256\n   IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)\n\
    \   salt = (0 octets)\n   info = (0 octets)\n   L    = 42\n   PRK  = 0x19ef24a32c717b167f33a91d6f648bdf\n\
    \          96596776afdb6377ac434c1c293ccb04 (32 octets)\n   OKM  = 0x8da4e775a563c18f715f802a063c5a31\n\
    \          b8a11f5c5ee1879ec3454e5f3c738d2d\n          9d201395faa4b61a96c8 (42\
    \ octets)\n"
- title: A.4.  Test Case 4
  contents:
  - "A.4.  Test Case 4\n   Basic test case with SHA-1\n   Hash = SHA-1\n   IKM  =\
    \ 0x0b0b0b0b0b0b0b0b0b0b0b (11 octets)\n   salt = 0x000102030405060708090a0b0c\
    \ (13 octets)\n   info = 0xf0f1f2f3f4f5f6f7f8f9 (10 octets)\n   L    = 42\n  \
    \ PRK  = 0x9b6c18c432a7bf8f0e71c8eb88f4b30baa2ba243 (20 octets)\n   OKM  = 0x085a01ea1b10f36933068b56efa5ad81\n\
    \          a4f14b822f5b091568a9cdd4f155fda2\n          c22e422478d305f3f896 (42\
    \ octets)\n"
- title: A.5.  Test Case 5
  contents:
  - "A.5.  Test Case 5\n   Test with SHA-1 and longer inputs/outputs\n   Hash = SHA-1\n\
    \   IKM  = 0x000102030405060708090a0b0c0d0e0f\n          101112131415161718191a1b1c1d1e1f\n\
    \          202122232425262728292a2b2c2d2e2f\n          303132333435363738393a3b3c3d3e3f\n\
    \          404142434445464748494a4b4c4d4e4f (80 octets)\n   salt = 0x606162636465666768696a6b6c6d6e6f\n\
    \          707172737475767778797a7b7c7d7e7f\n          808182838485868788898a8b8c8d8e8f\n\
    \          909192939495969798999a9b9c9d9e9f\n          a0a1a2a3a4a5a6a7a8a9aaabacadaeaf\
    \ (80 octets)\n   info = 0xb0b1b2b3b4b5b6b7b8b9babbbcbdbebf\n          c0c1c2c3c4c5c6c7c8c9cacbcccdcecf\n\
    \          d0d1d2d3d4d5d6d7d8d9dadbdcdddedf\n          e0e1e2e3e4e5e6e7e8e9eaebecedeeef\n\
    \          f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff (80 octets)\n   L    = 82\n   PRK\
    \  = 0x8adae09a2a307059478d309b26c4115a224cfaf6 (20 octets)\n   OKM  = 0x0bd770a74d1160f7c9f12cd5912a06eb\n\
    \          ff6adcae899d92191fe4305673ba2ffe\n          8fa3f1a4e5ad79f3f334b3b202b2173c\n\
    \          486ea37ce3d397ed034c7f9dfeb15c5e\n          927336d0441f4c4300e2cff0d0900b52\n\
    \          d3b4 (82 octets)\n"
- title: A.6.  Test Case 6
  contents:
  - "A.6.  Test Case 6\n   Test with SHA-1 and zero-length salt/info\n   Hash = SHA-1\n\
    \   IKM  = 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b (22 octets)\n   salt\
    \ = (0 octets)\n   info = (0 octets)\n   L    = 42\n   PRK  = 0xda8c8a73c7fa77288ec6f5e7c297786aa0d32d01\
    \ (20 octets)\n   OKM  = 0x0ac1af7002b3d761d1e55298da9d0506\n          b9ae52057220a306e07b6b87e8df21d0\n\
    \          ea00033de03984d34918 (42 octets)\n"
- title: A.7.  Test Case 7
  contents:
  - "A.7.  Test Case 7\n   Test with SHA-1, salt not provided (defaults to HashLen\
    \ zero octets),\n   zero-length info\n   Hash = SHA-1\n   IKM  = 0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c\
    \ (22 octets)\n   salt = not provided (defaults to HashLen zero octets)\n   info\
    \ = (0 octets)\n   L    = 42\n   PRK  = 0x2adccada18779e7c2077ad2eb19d3f3e731385dd\
    \ (20 octets)\n   OKM  = 0x2c91117204d745f3500d636a62f64f0a\n          b3bae548aa53d423b0d1f27ebba6f5e5\n\
    \          673a081d70cce7acfc48 (42 octets)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hugo Krawczyk\n   IBM Research\n   19 Skyline Drive\n\
    \   Hawthorne, NY 10532\n   USA\n   EMail: hugokraw@us.ibm.com\n   Pasi Eronen\n\
    \   Nokia Research Center\n   P.O. Box 407\n   FI-00045 Nokia Group\n   Finland\n\
    \   EMail: pasi.eronen@nokia.com\n"
