- contents:
  - "         A Simple Authentication and Security Layer (SASL) and\n    Generic Security
    Service Application Program Interface (GSS-API)\n                          Mechanism
    for OpenID\n"
  title: __initial_text__
- contents:
  - "Abstract\n   OpenID has found its usage on the Internet for Web Single Sign-On.\n
    \  Simple Authentication and Security Layer (SASL) and the Generic\n   Security
    Service Application Program Interface (GSS-API) are\n   application frameworks
    to generalize authentication.  This memo\n   specifies a SASL and GSS-API mechanism
    for OpenID that allows the\n   integration of existing OpenID Identity Providers
    with applications\n   using SASL and GSS-API.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6616.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Terminology  . . . . . . . . . . . . . . . . . . .
    . . . .  4\n     1.2.  Applicability  . . . . . . . . . . . . . . . . . . . .
    . .  4\n   2.  Applicability for Application Protocols other than HTTP  . . .
    \ 4\n     2.1.  Binding SASL to OpenID in the Relying Party  . . . . . . .  7\n
    \    2.2.  Discussion . . . . . . . . . . . . . . . . . . . . . . . .  8\n   3.
    \ OpenID SASL Mechanism Specification  . . . . . . . . . . . . .  8\n     3.1.
    \ Initiation . . . . . . . . . . . . . . . . . . . . . . . .  9\n     3.2.  Authentication
    Request . . . . . . . . . . . . . . . . . .  9\n     3.3.  Server Response  .
    . . . . . . . . . . . . . . . . . . . . 10\n     3.4.  Error Handling . . . .
    . . . . . . . . . . . . . . . . . . 11\n   4.  OpenID GSS-API Mechanism Specification
    . . . . . . . . . . . . 11\n     4.1.  GSS-API Principal Name Types for OpenID
    \ . . . . . . . . . 12\n   5.  Example  . . . . . . . . . . . . . . . . . . .
    . . . . . . . . 12\n   6.  Security Considerations  . . . . . . . . . . . . .
    . . . . . . 14\n     6.1.  Binding OpenIDs to Authorization Identities  . . .
    . . . . 14\n     6.2.  RP Redirected by Malicious URL to Take an Improper\n           Action
    . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n     6.3.  User Privacy
    . . . . . . . . . . . . . . . . . . . . . . . 14\n   7.  IANA Considerations  .
    . . . . . . . . . . . . . . . . . . . . 15\n   8.  Acknowledgments  . . . . .
    . . . . . . . . . . . . . . . . . . 15\n   9.  References . . . . . . . . . .
    . . . . . . . . . . . . . . . . 15\n     9.1.  Normative References . . . . .
    . . . . . . . . . . . . . . 15\n     9.2.  Informative References . . . . . .
    . . . . . . . . . . . . 17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   OpenID 2.0 [OpenID] is a web-based three-party protocol
    that provides\n   a means for a user to offer identity assertions and other attributes\n
    \  to a web server (Relying Party) via the help of an identity provider.\n   The
    purpose of this system is to provide a way to verify that an end\n   user controls
    an identifier.\n   Simple Authentication and Security Layer (SASL) [RFC4422] is
    used by\n   application protocols such as IMAP [RFC3501], Post Office Protocol\n
    \  (POP) [RFC1939], and Extensible Messaging and Presence Protocol\n   (XMPP)
    [RFC6120], with the goal of modularizing authentication and\n   security layers,
    so that newer mechanisms can be added as needed.\n   This memo specifies just
    such a mechanism.\n   The Generic Security Service Application Program Interface
    (GSS-API)\n   [RFC2743] provides a framework for applications to support multiple\n
    \  authentication mechanisms through a unified interface.  This document\n   defines
    a pure SASL mechanism for OpenID, but it conforms to the new\n   bridge between
    SASL and the GSS-API called GS2 [RFC5801].  This means\n   that this document
    defines both a SASL mechanism and a GSS-API\n   mechanism.  Implementors of the
    SASL component MAY implement the GSS-\n   API interface as well.\n   This mechanism
    specifies interworking between SASL and OpenID in\n   order to assert identity
    and other attributes to Relying Parties.  As\n   such, while SASL servers (as
    Relying Parties) will advertise SASL\n   mechanisms, clients will select the OpenID
    mechanism.\n   The OpenID mechanism described in this memo aims to reuse the OpenID\n
    \  mechanism to the maximum extent and therefore does not establish a\n   separate
    authentication, integrity, and confidentiality mechanism.\n   It is anticipated
    that existing security layers, such as Transport\n   Layer Security (TLS) [RFC5246],
    continue to be used.  Minimal changes\n   are required to non-web applications,
    as most of the transaction\n   occurs through a normal web browser.  Hence, this
    specification is\n   only appropriate for use when such a browser is available.\n
    \  Figure 1 describes the interworking between OpenID and SASL.  This\n   document
    requires enhancements to the Relying Party and to the Client\n   (as the two SASL
    communication end points), but no changes to the\n   OpenID Provider (OP) are
    necessary.  To accomplish this goal,\n   indirect messaging required by the OpenID
    specification is tunneled\n   through the SASL/GSS-API mechanism.\n                                    +-----------+\n
    \                                   |  Relying  |\n                                   >|
    \ Party /  |\n                                  / |   SASL    |\n                                //
    \ |  Server   |\n                              //    +-----------+\n                            //
    \           ^\n                   OpenID //           +--|--+\n                        //
    \            | O|  | G\n                       /             S | p|  | S\n                     //
    \             A | e|  | S\n                   //                S | n|  | A\n
    \                //                  L | I|  | P\n               //                      |
    D|  | I\n             </                        +--|--+\n      +------------+
    \                     v\n      |            |                 +----------+\n      |
    \ OpenID    |   OpenID        |          |\n      |  Provider  |<--------------->|
    \ Client  |\n      |            |                 |          |\n      +------------+
    \                +----------+\n                    Figure 1: Interworking Architecture\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [RFC2119].\n   The reader is assumed to be familiar with the terms used
      in the\n   OpenID 2.0 specification.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Applicability\n   Because this mechanism transports information that
      should not be\n   controlled by an attacker, the OpenID mechanism MUST only
      be used\n   over channels protected by TLS, and the client MUST successfully\n
      \  validate the server certificate [RFC5280][RFC6125].\n"
    title: 1.2.  Applicability
  title: 1.  Introduction
- contents:
  - "2.  Applicability for Application Protocols other than HTTP\n   OpenID was originally
    envisioned for HTTP- [RFC2616] and HTML-based\n   [W3C.REC-html401-19991224] communications,
    and with the associated\n   semantic; the idea being that the user would be redirected
    by the\n   Relying Party (RP) to an identity provider (IdP) who authenticates\n
    \  the user and then sends identity information and other attributes\n   (either
    directly or indirectly) to the Relying Party.  The identity\n   provider in the
    OpenID specifications is referred to as an OpenID\n   Provider (OP).  The actual
    protocol flow can be found in Section 3 of\n   the OpenID 2.0 specification [OpenID].
    \ The reader is strongly\n   encouraged to be familiar with that specification
    before continuing.\n   When considering that flow in the context of SASL, we note
    that while\n   the RP and the client both need to change their code to implement\n
    \  this SASL mechanism, it is a design constraint that the OP behavior\n   remain
    untouched, in order for implementations to interoperate with\n   existing IdPs.
    \ Hence, an analog flow that interfaces the three\n   parties needs to be created.
    \ In the analog, we note that unlike a\n   web server, the SASL server already
    has some sort of session\n   (probably a TCP connection) established with the
    client.  However, it\n   may be necessary for a SASL client to invoke to another
    application.\n   This will be discussed below.  By doing so, we externalize much
    of\n   the authentication from SASL.\n   The steps are listed below:\n   1.   The
    SASL server advertises support for the SASL OpenID mechanism\n        to the client.\n
    \  2.   The client initiates a SASL authentication and transmits the\n        User-Supplied
    Identifier as its first response.  The SASL\n        mechanism is client-first,
    and, as explained in [RFC4422], the\n        server will send an empty challenge
    if needed.\n   3.   After normalizing the User-Supplied Identifier as discussed
    in\n        [OpenID], the Relying Party performs discovery on it and\n        establishes
    the OP Endpoint URL that the end user uses for\n        authentication.\n   4.
    \  The Relying Party and the OP optionally establish an association\n        --
    a shared secret established using Diffie-Hellman Key\n        Exchange.  The OP
    uses an association to validate those messages\n        through the use of a Hashed
    Message Authentication Code (HMAC);\n        this removes the need for subsequent
    direct requests to verify\n        the signature after each authentication request/response.\n
    \  5.   The Relying Party transmits an authentication request to the OP\n        to
    obtain an assertion in the form of an indirect request.\n        These messages
    are passed through the client rather than\n        directly between the RP and
    the OP.  OpenID defines two methods\n        for indirect communication -- namely,
    HTTP redirects and HTML\n        form submission.  Neither mechanism is directly
    applicable for\n        usage with SASL.  To ensure that an OP that is OpenID
    2.0\n        capable can be used, a new method is defined in this document\n        that
    requires the OpenID message content to be encoded using a\n        Universal Resource
    Identifier (URI) [RFC3986].  Note that any\n        Internationalized Resource
    Identifiers (IRIs) must be normalized\n        to URIs by the SASL client, as
    specified in [RFC3987], prior to\n        transmitting them to the SASL server.\n
    \  6.   The SASL client now sends a response consisting of \"=\" to the\n        server,
    to indicate that authentication continues via the normal\n        OpenID flow.\n
    \  7.   At this point, the client application MUST construct a URL\n        containing
    the content received in the previous message from the\n        RP.  This URL is
    transmitted to the OP by either the SASL client\n        application or an appropriate
    handler, such as a browser.\n   8.   Next, the end user optionally authenticates
    to the OP and then,\n        depending on the OP, may approve or disapprove authentication
    to\n        the Relying Party.  For reasons of its own, the OP has the\n        option
    of not authenticating a request.  The manner in which the\n        end user is
    authenticated to their respective OP and any\n        policies surrounding such
    authentication are out of scope of\n        OpenID and, hence, also out of scope
    for this specification.\n        This step happens out of band from SASL.\n   9.
    \  The OP will convey information about the success or failure of\n        the
    authentication phase back to the RP, again using an indirect\n        response
    via the client browser or handler.  The client\n        transmits to the RP (over
    HTTP/TLS) the redirect of the OP\n        result.  This step happens out of band
    from SASL.\n   10.  The RP MAY send an OpenID check_authentication request directly\n
    \       to the OP, if no association has been established, and the OP\n        should
    respond.  Again, this step happens out of band from SASL.\n   11.  The SASL server
    sends an appropriate SASL response to the\n        client, with optional Open
    Simple Registry (SREG) attributes.\n         SASL Serv.       RP/Client       OP\n
    \           |>-----(1)----->|              | Advertisement\n            |               |
    \             |\n            |<-----(2)-----<|              | Initiation\n            |
    \              |              |\n            |> - - (3) - - - - - - - - - ->|
    Discovery\n            |                              |\n            |>- - -(4)-
    - - - - - - - - - >| Association\n            |<- - -(4)- - - - - - - - - - <|\n
    \           |               |              |\n            |>-----(5)----->|              |
    Indirect Auth Request\n            |               |              |\n            |<-----(6)-----<|
    \             | Client \"=\" Response\n            |               |              |\n
    \           |               |>- - (7)- - ->| Client GET to the OP (ext.)\n            |
    \              |              |\n            |               |<- - (8)- - ->|
    Client / OP Auth. (ext.)\n            |               |              |\n            |<-
    - -(9)- - - + - - - - - - <| HTTPS Indirect id_res\n            |               |
    \             |\n            |<- - -(10)- - - - - - - - - ->| Optional\n            |
    \              |              | check_authentication\n            |               |
    \             |\n            |>-----(11)---->|              | SASL completion
    with status\n        ----- = SASL\n        - - - = HTTPS\n   Note the directionality
    in SASL is such that the client MUST send the\n   \"=\" response.  Specifically,
    the SASL client processes the redirect\n   and then awaits a final SASL decision,
    while the rest of the OpenID\n   authentication process continues.\n"
  - contents:
    - "2.1.  Binding SASL to OpenID in the Relying Party\n   OpenID is meant to be
      used in serial within the web, where browser\n   cookies are easily accessible.
      \ As such, there are no transaction IDs\n   within the protocol.  To ensure
      that a specific request is bound, and\n   in particular to ease inter-process
      communication, the Relying Party\n   MUST encode a nonce or transaction ID in
      the URIs it transmits\n   through the client for success or failure, as either
      a base URI or\n   fragment component to the \"return_to\" URI.  This value is
      to be used\n   to uniquely identify each authentication transaction.  The nonce\n
      \  value MUST be at least 2^32 bits and large enough to handle well in\n   excess
      of the number of concurrent transactions a SASL server shall\n   see.\n"
    title: 2.1.  Binding SASL to OpenID in the Relying Party
  - contents:
    - "2.2.  Discussion\n   As mentioned above, OpenID is primarily designed to interact
      with\n   web-based applications.  Portions of the authentication stream are\n
      \  only defined in the crudest sense.  That is, when one is prompted to\n   approve
      or disapprove an authentication, anything that one might find\n   on a browser
      is allowed, including JavaScript, complex style-sheets,\n   etc.  Because of
      this lack of structure, implementations will need to\n   invoke a rich browser
      in order to ensure that the authentication can\n   be completed.\n   Once there
      is an outcome, the SASL server needs to know about it.\n   The astute reader
      will hopefully by now have noticed an \"=\" client\n   SASL response.  This
      is not to say that nothing is happening, but\n   rather that authentication
      flow has shifted from SASL and the client\n   application to OpenID within the
      browser, and it will return to the\n   client application when the server has
      an outcome to hand to the\n   client.  The alternative to this flow would be
      some sort of signal\n   from the HTML browser to the SASL client of the results
      that would in\n   turn be passed to the SASL server.  The inter-process communication\n
      \  issue this raises is substantial.  Better, we conclude, to\n   externalize
      the authentication to the browser and have an \"=\" client\n   response.\n"
    title: 2.2.  Discussion
  title: 2.  Applicability for Application Protocols other than HTTP
- contents:
  - "3.  OpenID SASL Mechanism Specification\n   This section specifies the details
    of the OpenID SASL mechanism.\n   Recall Section 5 of [RFC4422] for what needs
    to be described here.\n   The name of this mechanism is \"OPENID20\".  The mechanism
    is capable\n   of transferring an authorization identity (via \"gs2-header\").
    \ The\n   mechanism does not offer a security layer.\n   The mechanism is client-first.
    \ The first mechanism message is from\n   the client to the server, and it is
    the \"initial-response\" described\n   below.  As described in [RFC4422], if the
    application protocol does\n   not support sending a client-response together with
    the\n   authentication request, the server will send an empty server-\n   challenge
    to let the client begin.\n   The second mechanism message is from the server to
    the client, and it\n   is the \"authentication_request\" described below.\n   The
    third mechanism message is from client to the server, and it is\n   the fixed
    message consisting of \"=\".\n   The fourth mechanism message is from the server
    to the client,\n   described below as \"outcome_data\" (with SREG attributes),
    sent as\n   additional data when indicating a successful outcome.\n"
  - contents:
    - "3.1.  Initiation\n   A client initiates an OpenID authentication with SASL
      by sending the\n   GS2 header followed by the URI, as specified in the OpenID\n
      \  specification.\n   The ABNF [RFC5234] syntax is as follows:\n   initial-response
      = gs2-header Auth-Identifier\n   Auth-Identifier = Identifier ; authentication
      identifier\n   Identifier = URI             ; Identifier is specified in\n                                ;
      Sec. 7.2 of the OpenID 2.0 spec.\n   The syntax and semantics of the \"gs2-header\"
      are specified in\n   [RFC5801], and we use it here with the following limitations:
      The\n   \"gs2-nonstd-flag\" MUST NOT be present.  The \"gs2-cb-flag\" MUST be
      \"n\"\n   because channel binding is not supported by this mechanism.\n   URI
      is specified in [RFC3986].  Extensible Resource Identifiers\n   (XRIs) [XRI2.0]
      MUST NOT be used.\n"
    title: 3.1.  Initiation
  - contents:
    - "3.2.  Authentication Request\n   The SASL server sends the URL resulting from
      the OpenID\n   authentication request, containing an \"openid.mode\" of either\n
      \  \"checkid_immediate\" or \"checkid_setup\", as specified in Section 9.1\n
      \  of the OpenID 2.0 specification [OpenID].\n          authentication-request
      = URI\n   As part of this request, the SASL server MUST append a unique\n   transaction
      ID to the \"return_to\" portion of the request.  The form\n   of this transaction
      is left to the RP to decide, but it SHOULD be\n   large enough to be resistant
      to being guessed or attacked.\n   The client now sends that request via an HTTP
      GET to the OP, as if\n   redirected to do so from an HTTP server.\n   The client
      MUST handle both user authentication to the OP and\n   confirmation or rejection
      of the authentication by the RP via this\n   SASL mechanism.\n   After all authentication
      has been completed by the OP, and after the\n   response has been sent to the
      client, the client will relay the\n   response to the Relying Party via HTTP/TLS,
      as specified previously\n   in the transaction (\"return_to\").\n"
    title: 3.2.  Authentication Request
  - contents:
    - "3.3.  Server Response\n   The Relying Party now validates the response it received
      from the\n   client via HTTP/TLS, as specified in the OpenID specification,
      using\n   the \"return_to\" URI given previously in the transaction.\n   The
      response by the Relying Party constitutes a SASL mechanism\n   outcome, and
      it SHALL be used to set state in the server accordingly.\n   Also, it SHALL
      be used by the server to report that state to the SASL\n   client as described
      in Section 3.6 of [RFC4422].  In the additional\n   data, the server MAY include
      OpenID Simple Registry (SREG) attributes\n   that are listed in Section 4 of
      [SREG1.0].  SREG attributes are\n   encoded as follows:\n   1.  Strip \"openid.sreg.\"
      from each attribute name.\n   2.  Treat the concatenation of results as URI
      parameters that are\n       separated by an ampersand (&) and encode as one
      would a URI,\n       absent the scheme, authority, and the question mark.\n
      \  For example: email=lear@example.com&fullname=Eliot%20Lear\n   More formally:\n
      \        outcome-data = [ sreg-avp *( \",\" sreg-avp ) ]\n         sreg-avp
      \    = sreg-attr \"=\" sreg-val\n         sreg-attr    = sreg-word\n         sreg-val
      \    = sreg-word\n         sreg-word    = 1*( unreserved / pct-encoded )\n                        ;
      pct-encoded from Section 2.1 of RFC 3986\n                        ; unreserved
      from Section 2.3 of RFC 3986\n   A client who does not support SREG MUST ignore
      SREG attributes sent\n   by the server.  Similarly, a client MUST ignore unknown
      attributes.\n   In the case of failures, the response MUST follow this syntax:\n
      \       outcome-data = \"openid.error\" \"=\" sreg-val *( \",\" sregp-avp )\n"
    title: 3.3.  Server Response
  - contents:
    - "3.4.  Error Handling\n   Section 3.6 of [RFC4422] explicitly prohibits additional
      information\n   in an unsuccessful authentication outcome.  Therefore, the\n
      \  openid.error and openid.error_code are to be sent as an additional\n   challenge
      in the event of an unsuccessful outcome.  In this case, as\n   the protocol
      is in lockstep, the client will follow with an\n   additional exchange containing
      \"=\", after which the server will\n   respond with an application-level outcome.\n"
    title: 3.4.  Error Handling
  title: 3.  OpenID SASL Mechanism Specification
- contents:
  - "4.  OpenID GSS-API Mechanism Specification\n   This section MUST be observed
    to properly implement the GSS-API\n   mechanism that is described below.\n   The
    OpenID SASL mechanism is actually also a GSS-API mechanism.  The\n   OpenID user
    takes the role of the GSS-API Initiator and the OpenID\n   Relying Party takes
    the role of the GSS-API Acceptor.  The OpenID\n   Provider does not have a role
    in GSS-API and is considered an\n   internal matter for the OpenID mechanism.
    \ The messages are the same,\n   but a) the GS2 header on the client's first message
    and channel\n   binding data are excluded when OpenID is used as a GSS-API mechanism,\n
    \  and b) the initial context token header (described in Section 3.1 of\n   RFC
    2743) is prefixed to the client's first authentication message\n   (context token).\n
    \  The GSS-API OID for the OpenID 2.0 mechanism is 1.3.6.1.5.5.16 (see\n   Section
    7 for more information).  The DER encoding of the OID is 0x2b\n   0x06 0x01 0x05
    0x05 0x10.\n   OpenID security contexts MUST have the mutual_state flag\n   (GSS_C_MUTUAL_FLAG)
    set to TRUE.  OpenID does not support credential\n   delegation; therefore, OpenID
    security contexts MUST have the\n   deleg_state flag (GSS_C_DELEG_FLAG) set to
    FALSE.\n   The mutual authentication property of this mechanism relies on\n   successfully
    comparing the TLS server identity with the negotiated\n   target name.  Since
    the TLS channel is managed by the application\n   outside of the GSS-API mechanism,
    the mechanism itself is unable to\n   confirm the name while the application is
    able to perform this\n   comparison for the mechanism.  For this reason, applications
    MUST\n   match the TLS server identity with the target name, as discussed in\n
    \  [RFC6125].\n   The OpenID mechanism does not support per-message tokens or\n
    \  GSS_Pseudo_random.\n   The [RFC5587] mechanism attributes for this mechanism
    are\n   GSS_C_MA_MECH_CONCRETE, GSS_C_MA_ITOK_FRAMED, and GSS_C_MA_AUTH_INIT.\n"
  - contents:
    - "4.1.  GSS-API Principal Name Types for OpenID\n   OpenID supports standard
      generic name syntaxes for acceptors such as\n   GSS_C_NT_HOSTBASED_SERVICE (see
      Section 4.1 of [RFC2743]).\n   OpenID supports only a single name type for initiators:\n
      \  GSS_C_NT_USER_NAME.  GSS_C_NT_USER_NAME is the default name type for\n   OpenID.\n
      \  OpenID name normalization is covered by the OpenID specification; see\n   Section
      7.2 of [OpenID].\n   The query, display, and exported name syntaxes for OpenID
      principal\n   names are all the same.  There are no OpenID-specific name syntaxes\n
      \  -- applications should use generic GSS-API name types such as\n   GSS_C_NT_USER_NAME
      and GSS_C_NT_HOSTBASED_SERVICE (see Section 4 of\n   [RFC2743]).  The exported
      name token does, of course, conform to\n   Section 3.2 of [RFC2743], but the
      \"NAME\" part of the token should be\n   treated as a potential input string
      to the OpenID name normalization\n   rules.  For example, the OpenID Identifier
      \"https://openid.example/\"\n   will have a GSS_C_NT_USER_NAME value of \"https://openid.example/\".\n
      \  GSS-API name attributes may be defined in the future to hold the\n   normalized
      OpenID Identifier.\n"
    title: 4.1.  GSS-API Principal Name Types for OpenID
  title: 4.  OpenID GSS-API Mechanism Specification
- contents:
  - "5.  Example\n   Suppose a user has an OpenID of https://openid.example and wishes
    to\n   authenticate his IMAP connection to mail.example (where .example is\n   the
    top-level domain specified in [RFC2606]).  The user would input\n   his OpenID
    into his mail user agent when he configures the account.\n   In this case, no
    association is attempted between the OpenID RP and\n   the OP.  The client will
    make use of the \"return_to\" attribute to\n   capture results of the authentication
    to be redirected to the server.\n   Note the use of [RFC4959] for the initial
    response.  The\n   authentication on the wire would then look something like the\n
    \  following:\n     (S = IMAP server; C = IMAP client)\n     C: < connects to
    IMAP port>\n     S: * OK\n     C: C1 CAPABILITY\n     S: * CAPABILITY IMAP4rev1
    SASL-IR SORT [...] AUTH=OPENID20\n     S: C1 OK Capability Completed\n     C:
    C2 AUTHENTICATE OPENID biwsaHR0cHM6Ly9vcGVuaWQuZXhhbXBsZS8=\n     [  This is the
    base64 encoding of \"n,,https://openid.example/\".\n        Server performs discovery
    on http://openid.example/ ]\n     S: + aHR0cHM6Ly9vcGVuaWQuZXhhbXBsZS9vcGVuaWQvP29wZW5pZC5ucz1\n
    \         odHRwOi8vc3BlY3Mub3BlbmlkLm5ldC9hdXRoLzIuMCZvcGVuaWQucm\n          V0dXJuX3RvPWh0dHBzOi8vbWFpbC5leGFtcGxlL2NvbnN1bWVyLzFlZ\n
    \         jg4OGMmb3BlbmlkLmNsYWltZWRfaWQ9aHR0cHM6Ly9vcGVuaWQuZXhh\n          bXBsZS8mb3BlbmlkLmlkZW50aXR5PWh0dHBzOi8vb3BlbmlkLmV4YW1\n
    \         wbGUvJm9wZW5pZC5yZWFsbT1pbWFwOi8vbWFpbC5leGFtcGxlJm9wZW\n          5pZC5tb2RlPWNoZWNraWRfc2V0dXA=\n
    \    [ This is the base64 encoding of \"https://openid.example/openid/\n           ?openid.ns=http://specs.openid.net/auth/2.0\n
    \          &openid.return_to=https://mail.example/consumer/1ef888c\n           &openid.claimed_id=https://openid.example/\n
    \          &openid.identity=https://openid.example/\n           &openid.realm=imap://mail.example\n
    \          &openid.mode=checkid_setup\"\n        with line breaks and spaces added
    here for readability.\n     ]\n     C: PQ==\n     [ The client now sends the URL
    it received to a browser for\n       processing.  The user logs into https://openid.example
    and\n       agrees to authenticate imap://mail.example.  A redirect is\n       passed
    back to the client browser that then connects to\n       https://imap.example/consumer
    via SSL with the results.\n       From an IMAP perspective, however, the client
    sends the \"=\"\n       response, and awaits mail.example.\n       Server mail.example
    would now contact openid.example with an\n       openid.check_authentication message.
    \ After that...\n     ]\n     S: + ZW1haWw9bGVhckBtYWlsLmV4YW1wbGUsZnVsbG5hbWU9RWxp\n
    \         b3QlMjBMZWFy\n       [ Here, the IMAP server has returned an SREG attribute
    of\n         email=lear@mail.example,fullname=Eliot%20Lear.\n         Line break
    in response added in this example for readability. ]\n     C:\n       [ In IMAP,
    client must send a blank response after receiving\n         the SREG data. ]\n
    \    S: C2 OK\n   In this example, the SASL server / RP has made use of a transaction\n
    \  ID 1ef888c.\n"
  title: 5.  Example
- contents:
  - "6.  Security Considerations\n   This section will address only security considerations
    associated\n   with the use of OpenID with SASL and GSS-API.  For considerations\n
    \  relating to OpenID in general, the reader is referred to the OpenID\n   specification
    [OpenID] and to other literature [OpReview].\n   Similarly, for general SASL [RFC4422]
    and GSS-API [RFC5801] security\n   considerations, the reader is referred to those
    specifications.\n"
  - contents:
    - "6.1.  Binding OpenIDs to Authorization Identities\n   As specified in [RFC4422],
      the server is responsible for binding\n   credentials to a specific authorization
      identity.  It is therefore\n   necessary that a registration process takes place
      in advance that\n   binds specific OpenIDs to specific authorization identities,
      or that\n   only specific trusted OpenID Providers be allowed, where a mapping
      is\n   predefined.  For example, it could be prearranged between an IdP and\n
      \  RP that \"https://example.com/user\" maps to \"user\" for purposes of\n   authorization.\n"
    title: 6.1.  Binding OpenIDs to Authorization Identities
  - contents:
    - "6.2.  RP Redirected by Malicious URL to Take an Improper Action\n   In the
      initial SASL client response, a user or host can transmit a\n   malicious response
      to the RP for purposes of taking advantage of\n   weaknesses in the RP's OpenID
      implementation.  It is possible to add\n   port numbers to the URL so that the
      outcome is that the RP does a\n   port scan of the site.  The URL could contain
      an unauthorized host or\n   even the local host.  The URL could contain a protocol
      other than\n   http or https, such as file or ftp.\n   One mitigation would
      be for RPs to have a list of authorized URI\n   bases.  OPs SHOULD only redirect
      to RPs with the same domain\n   component of the base URI.  RPs MUST NOT automatically
      retry on\n   failed attempts.  A log of those sites that fail SHOULD be kept,
      and\n   limitations on queries from clients SHOULD be imposed, just as with\n
      \  any other authentication attempt.  Applications SHOULD NOT invoke\n   browsers
      to communicate with OPs that they are not themselves\n   configured with.\n"
    title: 6.2.  RP Redirected by Malicious URL to Take an Improper Action
  - contents:
    - "6.3.  User Privacy\n   The OP is aware of each RP that a user logs into.  There
      is nothing\n   in the protocol to hide this information from the OP.  It is
      not a\n   requirement to track the visits, but there is nothing that prohibits\n
      \  the collection of information.  SASL servers should be aware that\n   OpenID
      Providers will be able to track -- to some extent -- user\n   access to their
      services and any additional information that OP\n   provides.\n"
    title: 6.3.  User Privacy
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   IANA has updated the \"SASL Mechanisms\" registry
    using the following\n   template, as described in [RFC4422].\n   SASL mechanism
    name: OPENID20\n   Security Considerations: See this document\n   Published specification:
    See this document\n   Person & email address to contact for further information:
    Authors of\n   this document\n   Intended usage: COMMON\n   Owner/Change controller:
    IESG\n   Note: None\n   IANA has also assigned an OID for this GSS mechanism in
    the \"SMI\n   Security for Mechanism Codes\" registry, with the prefix of\n   iso.org.dod.internet.security.mechanisms
    (1.3.6.1.5.5) and\n   referencing this specification in the registry.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   The authors would like to thank Alexey Melnikov, Joe
    Hildebrand, Mark\n   Crispin, Chris Newman, Leif Johansson, Sam Hartman, Nico
    Williams,\n   Klaas Wierenga, Stephen Farrell, and Stephen Kent for their review\n
    \  and contributions.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [OpenID]   OpenID Foundation, \"OpenID Authentication
      2.0 - Final\",\n              December 2007, <http://specs.openid.net/auth/2.0>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2606]  Eastlake, D. and A. Panitz,
      \"Reserved Top Level DNS\n              Names\", BCP 32, RFC 2606, June 1999.\n
      \  [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2743]  Linn, J., \"Generic Security
      Service Application Program\n              Interface Version 2, Update 1\",
      RFC 2743, January 2000.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L.
      Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\",
      STD 66,\n              RFC 3986, January 2005.\n   [RFC3987]  Duerst, M. and
      M. Suignard, \"Internationalized Resource\n              Identifiers (IRIs)\",
      RFC 3987, January 2005.\n   [RFC4422]  Melnikov, A. and K. Zeilenga, \"Simple
      Authentication and\n              Security Layer (SASL)\", RFC 4422, June 2006.\n
      \  [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla,
      \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",
      RFC 5246, August 2008.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S.,
      Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public
      Key\n              Infrastructure Certificate and Certificate Revocation List\n
      \             (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5587]  Williams,
      N., \"Extended Generic Security Service Mechanism\n              Inquiry APIs\",
      RFC 5587, July 2009.\n   [RFC5801]  Josefsson, S. and N. Williams, \"Using Generic
      Security\n              Service Application Program Interface (GSS-API) Mechanisms\n
      \             in Simple Authentication and Security Layer (SASL): The\n              GS2
      Mechanism Family\", RFC 5801, July 2010.\n   [RFC6125]  Saint-Andre, P. and
      J. Hodges, \"Representation and\n              Verification of Domain-Based
      Application Service Identity\n              within Internet Public Key Infrastructure
      Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n
      \             Security (TLS)\", RFC 6125, March 2011.\n   [SREG1.0]  OpenID
      Foundation, \"OpenID Simple Registration Extension\n              version 1.0\",
      June 2006, <http://openid.net/sreg/1.0>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [OpReview] \"Google Sites OpenID Reference
      Page\",\n              <http://sites.google.com/site/openidreview/resources>.\n
      \  [RFC1939]  Myers, J. and M. Rose, \"Post Office Protocol - Version 3\",\n
      \             STD 53, RFC 1939, May 1996.\n   [RFC3501]  Crispin, M., \"INTERNET
      MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC 3501, March 2003.\n
      \  [RFC4959]  Siemborski, R. and A. Gulbrandsen, \"IMAP Extension for\n              Simple
      Authentication and Security Layer (SASL) Initial\n              Client Response\",
      RFC 4959, September 2007.\n   [RFC6120]  Saint-Andre, P., \"Extensible Messaging
      and Presence\n              Protocol (XMPP): Core\", RFC 6120, March 2011.\n
      \  [W3C.REC-html401-19991224]\n              Hors, A., Raggett, D., and I. Jacobs,
      \"HTML 4.01\n              Specification\", World Wide Web Consortium\n              Recommendation
      REC-html401-19991224, December 1999,\n              <http://www.w3.org/TR/1999/REC-html401-19991224>.\n
      \  [XRI2.0]   Reed, D., Ed. and D. McAlpin, Ed., \"Extensible Resource\n              Identifier
      (XRI) Syntax V2.0\", OASIS Standard xri-syntax-\n              V2.0-cs, September
      2005, <http://www.oasis-open.org/\n              committees/download.php/15376/xri-syntax-V2.0-cs.html>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Eliot Lear\n   Cisco Systems GmbH\n   Richtistrasse 7\n
    \  CH-8304 Wallisellen\n   Switzerland\n   Phone: +41 44 878 9200\n   EMail: lear@cisco.com\n
    \  Hannes Tschofenig\n   Nokia Siemens Networks\n   Linnoitustie 6\n   Espoo  02600\n
    \  Finland\n   Phone: +358 (50) 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n
    \  URI:   http://www.tschofenig.priv.at\n   Henry Mauldin\n   Cisco Systems, Inc.\n
    \  170 West Tasman Drive\n   San Jose, CA  95134\n   USA\n   Phone: +1 (800) 553-6387\n
    \  EMail: hmauldin@cisco.com\n   Simon Josefsson\n   SJD AB\n   Johan Olof Wallins
    vag 13\n   171 64 Solna\n   Sweden\n   EMail: simon@josefsson.org\n   URI:   http://josefsson.org/\n"
  title: Authors' Addresses
