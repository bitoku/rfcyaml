- contents:
  - "       Signaling System 7 (SS7) Message Transfer Part 3 (MTP3) -\n                      User
    Adaptation Layer (M3UA)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines a protocol for supporting the transport of any
    SS7\n   MTP3-User signalling (e.g., ISUP and SCCP messages) over IP using the\n
    \  services of the Stream Control Transmission Protocol.  Also,\n   provision
    is made for protocol elements that enable a seamless\n   operation of the MTP3-User
    peers in the SS7 and IP domains.  This\n   protocol would be used between a Signalling
    Gateway (SG) and a Media\n   Gateway Controller (MGC) or IP-resident Database,
    or between two IP-\n   based applications.  It is assumed that the SG receives
    SS7\n   signalling over a standard SS7 interface using the SS7 Message\n   Transfer
    Part (MTP) to provide transport.  This document obsoletes\n   RFC 3332.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................6\n
    \     1.1. Scope ......................................................6\n      1.2.
    Terminology ................................................6\n      1.3. M3UA
    Overview ..............................................9\n           1.3.1. Protocol
    Architecture ...............................9\n           1.3.2. Services Provided
    by the M3UA Layer ................10\n                  1.3.2.1. Support for the
    Transport of\n                           MTP3-User Messages ........................10\n
    \                 1.3.2.2. Native Management Functions ...............11\n                  1.3.2.3.
    Interworking with MTP3 Network\n                           Management Functions
    ......................11\n                  1.3.2.4. Support for the Management
    of SCTP\n                           Associations between the ..................11\n
    \                 1.3.2.5. Support for the Management of\n                           Connections
    to Multiple SGPs ..............12\n      1.4. Functional Areas ..........................................12\n
    \          1.4.1. Signalling Point Code Representation ...............12\n           1.4.2.
    Routing Contexts and Routing Keys ..................14\n                  1.4.2.1.
    Overview ..................................14\n                  1.4.2.2. Routing
    Key Limitations ...................15\n                  1.4.2.3. Managing Routing
    Contexts and\n                           Routing Keys ..............................15\n
    \                 1.4.2.4. Message Distribution at the SGP ...........15\n                  1.4.2.5.
    Message Distribution at the ASP ...........16\n           1.4.3. SS7 and M3UA
    Interworking ..........................16\n                  1.4.3.1. Signalling
    Gateway SS7 Layers .............16\n                  1.4.3.2. SS7 and M3UA Interworking
    at the SG .......17\n                  1.4.3.3. Application Server ........................17\n
    \                 1.4.3.4. IPSP Considerations .......................18\n           1.4.4.
    Redundancy Models ..................................18\n                  1.4.4.1.
    Application Server Redundancy .............18\n           1.4.5. Flow Control
    .......................................18\n           1.4.6. Congestion Management
    ..............................19\n           1.4.7. SCTP Stream Mapping ................................19\n
    \          1.4.8. SCTP Client/Server Model ...........................19\n      1.5.
    Sample Configuration ......................................20\n           1.5.1.
    Example 1: ISUP Message Transport ..................20\n           1.5.2. Example
    2: SCCP Transport between IPSPs ............21\n           1.5.3. Example 3: SGP
    Resident SCCP Layer, with\n                  Remote ASP .........................................22\n
    \     1.6. Definition of M3UA Boundaries .............................23\n           1.6.1.
    Definition of the Boundary between M3UA and\n                  an MTP3-User .......................................23\n
    \          1.6.2. Definition of the Boundary between M3UA and SCTP ...23\n           1.6.3.
    Definition of the Boundary between M3UA and\n                  Layer Management
    ...................................24\n   2. Conventions ....................................................27\n
    \  3. M3UA Protocol Elements .........................................28\n      3.1.
    Common Message Header .....................................28\n           3.1.1.
    M3UA Protocol Version: 8 bits (unsigned integer) ...28\n           3.1.2. Message
    Classes and Types ..........................28\n           3.1.3. Reserved: 8
    Bits ...................................30\n           3.1.4. Message Length:
    32-Bits (Unsigned Integer) .........30\n      3.2. Variable-Length Parameter Format
    ..........................30\n      3.3. Transfer Messages .........................................33\n
    \          3.3.1. Payload Data Message (DATA) ........................33\n      3.4.
    SS7 Signalling Network Management (SSNM) Messages .........36\n           3.4.1.
    Destination Unavailable (DUNA) .....................36\n           3.4.2. Destination
    Available (DAVA) .......................39\n           3.4.3. Destination State
    Audit (DAUD) .....................40\n           3.4.4. Signalling Congestion
    (SCON) .......................40\n           3.4.5. Destination User Part Unavailable
    (DUPU) ...........43\n           3.4.6. Destination Restricted (DRST) ......................45\n
    \     3.5. ASP State Maintenance (ASPSM) Messages ....................45\n           3.5.1.
    ASP Up .............................................45\n           3.5.2. ASP
    Up Acknowledgement (ASP Up Ack) ................46\n           3.5.3. ASP Down
    ...........................................47\n           3.5.4. ASP Down Acknowledgement
    (ASP Down Ack) ............48\n           3.5.5. Heartbeat (BEAT) ...................................48\n
    \          3.5.6. Heartbeat Acknowledgement (BEAT Ack) ...............49\n      3.6.
    Routing Key Management (RKM) Messages [Optional] ..........49\n           3.6.1.
    Registration Request (REG REQ) .....................49\n           3.6.2. Registration
    Response (REG RSP) ....................54\n           3.6.3. Deregistration Request
    (DEREG REQ) .................56\n           3.6.4. Deregistration Response (DEREG
    RSP) ................57\n      3.7. ASP Traffic Maintenance (ASPTM) Messages ..................59\n
    \          3.7.1. ASP Active .........................................59\n           3.7.2.
    ASP Active Acknowledgement (ASP Active Ack) ........60\n           3.7.3. ASP
    Inactive .......................................61\n           3.7.4. ASP Inactive
    Acknowledgement (ASP Inactive Ack) ....62\n      3.8. Management (MGMT) Messages
    ................................63\n           3.8.1. Error ..............................................63\n
    \          3.8.2. Notify .............................................67\n   4.
    Procedures .....................................................70\n      4.1.
    Procedures to Support the M3UA-User .......................70\n           4.1.1.
    Receipt of Primitives from the M3UA-User ...........70\n      4.2. Receipt of
    Primitives from the Layer Management ...........71\n           4.2.1. Receipt
    of M3UA Peer Management Messages ...........72\n      4.3. AS and ASP/IPSP State
    Maintenance .........................73\n           4.3.1. ASP/IPSP States ....................................74\n
    \          4.3.2. AS States ..........................................76\n           4.3.3.
    M3UA Management Procedures for Primitives ..........78\n           4.3.4. ASPM
    Procedures for Peer-to-Peer Messages ..........79\n                  4.3.4.1.
    ASP Up Procedures .........................79\n                  4.3.4.2. ASP-Down
    Procedures .......................81\n                  4.3.4.3. ASP Active Procedures
    .....................82\n                  4.3.4.4. ASP Inactive Procedures ...................86\n
    \                 4.3.4.5. Notify Procedures .........................88\n                  4.3.4.6.
    Heartbeat Procedures ......................89\n      4.4. Routing Key Management
    Procedures [Optional] ..............90\n           4.4.1. Registration .......................................90\n
    \          4.4.2. Deregistration .....................................92\n           4.4.3.
    IPSP Considerations (REG/DEREG) ....................93\n      4.5. Procedures
    to Support the Availability or\n           Congestion Status of SS7 Destination
    ......................93\n           4.5.1. At an SGP ..........................................93\n
    \          4.5.2. At an ASP ..........................................94\n                  4.5.2.1.
    Single SG Configurations ..................94\n                  4.5.2.2. Multiple
    SG Configurations ................94\n           4.5.3. ASP Auditing .......................................94\n
    \     4.6. MTP3 Restart ..............................................96\n      4.7.
    NIF Not Available .........................................97\n      4.8. M3UA
    Version Control ......................................97\n      4.9. M3UA Termination
    ..........................................97\n   5. Examples of M3UA Procedures
    ....................................98\n      5.1. Establishment of Association
    and Traffic between\n           SGPs and ASPs .............................................98\n
    \          5.1.1. Single ASP in an Application Server (\"1+0\"\n                  sparing),
    No Registration ..........................98\n                  5.1.1.1. Single
    ASP in an Application\n                           Server (\"1+0\" Sparing), No
    Registration ...98\n                  5.1.1.2. Single ASP in Application Server\n
    \                          (\"1+0\" Sparing), Dynamic Registration .....99\n                  5.1.1.3.
    Single ASP in Multiple\n                           Application Servers (Each with
    \"1+0\"\n                           Sparing), Dynamic Registration (Case 1\n                           -
    Multiple Registration Requests) ........100\n                  5.1.1.4. Single
    ASP in Multiple\n                           Application Servers (each with \"1+0\"\n
    \                          sparing), Dynamic Registration (Case 2\n                           -
    Single Registration Request) ...........101\n           5.1.2. Two ASPs in Application
    Server (\"1+1\" Sparing) ....102\n           5.1.3. Two ASPs in an Application
    Server (\"1+1\"\n                  Sparing, Loadsharing Case) ........................103\n
    \          5.1.4. Three ASPs in an Application Server (\"n+k\"\n                  Sparing,
    Loadsharing Case) ........................104\n      5.2. ASP Traffic Failover
    Examples ............................105\n           5.2.1. 1+1 Sparing, Withdrawal
    of ASP, Backup Override ...105\n           5.2.2. 1+1 Sparing, Backup Override
    ......................105\n           5.2.3. n+k Sparing, Loadsharing Case, Withdrawal
    of ASP ..106\n      5.3. Normal Withdrawal of an ASP from an Application Server
    ...106\n      5.4. Auditing Examples ........................................107\n
    \          5.4.1. SG State: Uncongested/Available ...................107\n           5.4.2.
    SG State: Congested (Congestion Level=2) /\n                  Available .........................................107\n
    \          5.4.3. SG State: Unknown/Available .......................107\n           5.4.4.
    SG State: Unavailable .............................108\n      5.5. M3UA/MTP3-User
    Boundary Examples .........................108\n           5.5.1. At an ASP .........................................108\n
    \                 5.5.1.1. Support for MTP-TRANSFER\n                           Primitives
    at the ASP ....................108\n           5.5.2. At an SGP .........................................109\n
    \                 5.5.2.1. Support for MTP-TRANSFER Request\n                           Primitive
    at the SGP .....................109\n                  5.5.2.2. Support for MTP-TRANSFER\n
    \                          Indication Primitive at the SGP ..........110\n                  5.5.2.3.
    Support for MTP-PAUSE,\n                           MTP-RESUME, MTP-STATUS Indication\n
    \                          Primitives ...............................110\n      5.6.
    Examples for IPSP Communication ..........................112\n           5.6.1.
    Single Exchange ...................................112\n           5.6.2. Double
    Exchange ...................................113\n   6. Security Considerations
    .......................................113\n   7. IANA Considerations ...........................................114\n
    \     7.1. SCTP Payload Protocol Identifier .........................114\n      7.2.
    M3UA Port Number .........................................114\n      7.3. M3UA
    Protocol Extensions .................................114\n           7.3.1. IETF-Defined
    Message Classes ......................115\n           7.3.2. IETF Defined Message
    Types ........................115\n           7.3.3. IETF-Defined Parameter Extension
    ..................115\n   8. Acknowledgements ..............................................115\n
    \  9. Document Contributors .........................................116\n   10.
    References ...................................................116\n      10.1.
    Normative References ....................................116\n      10.2. Informative
    References ..................................117\n   Appendix A .......................................................119\n
    \  A.1. Signalling Network Architecture .............................119\n   A.2.
    Redundancy Models ...........................................121\n        A.2.1.
    Application Server Redundancy ........................121\n        A.2.2. Signalling
    Gateway Redundancy ........................122\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo defines a protocol for supporting the transport
    of any SS7\n   MTP3-User signalling (e.g., ISUP and SCCP messages) over IP using
    the\n   services of the Stream Control Transmission Protocol [18].  Also,\n   provision
    is made for protocol elements that enable a seamless\n   operation of the MTP3-User
    peers in the SS7 and IP domains.  This\n   protocol would be used between a Signalling
    Gateway (SG) and a Media\n   Gateway Controller (MGC) or IP-resident Database
    [12], or between two\n   IP-based applications.\n"
  - contents:
    - "1.1.  Scope\n   There is a need for Switched Circuit Network (SCN) signalling\n
      \  protocol delivery from an SS7 Signalling Gateway (SG) to a Media\n   Gateway
      Controller (MGC) or IP-resident Database as described in the\n   Framework Architecture
      for Signalling Transport [12].  The delivery\n   mechanism should meet the following
      criteria:\n   *  Support for the transfer of all SS7 MTP3-User Part messages
      (e.g.,\n      ISUP [1,2,3], SCCP [4,5,6], TUP [13], etc.)\n   *  Support for
      the seamless operation of MTP3-User protocol peers\n   *  Support for the management
      of SCTP transport associations and\n      traffic between an SG and one or more
      MGCs or IP-resident\n      Databases\n   *  Support for MGC or IP-resident database
      process failover and load\n      sharing\n   *  Support for the asynchronous
      reporting of status changes to\n      management\n   In simplistic transport
      terms, the SG will terminate SS7 MTP2 and\n   MTP3 protocol layers [7,8,9] and
      deliver ISUP, SCCP, and/or any other\n   MTP3-User protocol messages, as well
      as certain MTP network\n   management events, over SCTP transport associations
      to MTP3-User\n   peers in MGCs or IP-resident databases.\n"
    title: 1.1.  Scope
  - contents:
    - "1.2.  Terminology\n   Application Server (AS) - A logical entity serving a
      specific Routing\n   Key.  An example of an Application Server is a virtual
      switch element\n   handling all call processing for a signalling relation, identified
      by\n   an SS7 DPC/OPC.  Another example is a virtual database element,\n   handling
      all HLR transactions for a particular SS7 SIO/DPC/OPC\n   combination.  The
      AS contains a set of one or more unique Application\n   Server Processes, of
      which one or more is normally actively\n   processing traffic.  Note that there
      is a 1:1 relationship between an\n   AS and a Routing Key.\n   Application Server
      Process (ASP) - A process instance of an\n   Application Server.  An Application
      Server Process serves as an\n   active or backup process of an Application Server
      (e.g., part of a\n   distributed virtual switch or database).  Examples of ASPs
      are\n   processes (or process instances) of MGCs, IP SCPs, or IP HLRs.  An\n
      \  ASP contains an SCTP endpoint and may be configured to process\n   signalling
      traffic within more than one Application Server.\n   Association - An association
      refers to an SCTP association.  The\n   association provides the transport for
      the delivery of MTP3-User\n   protocol data units and M3UA adaptation layer
      peer messages.\n   IP Server Process (IPSP) - A process instance of an IP-based\n
      \  application.  An IPSP is essentially the same as an ASP, except that\n   it
      uses M3UA in a point-to-point fashion.  Conceptually, an IPSP does\n   not use
      the services of a Signalling Gateway node.\n   Failover - The capability to
      reroute signalling traffic as required\n   to an alternate Application Server
      Process, or group of ASPs, within\n   an Application Server in the event of
      failure or unavailability of a\n   currently used Application Server Process.
      \ Failover also applies\n   upon the return to service of a previously unavailable
      Application\n   Server Process.\n   Host - The computing platform that the process
      (SGP, ASP or IPSP) is\n   running on.\n   Layer Management - Layer Management
      is a nodal function that handles\n   the inputs and outputs between the M3UA
      layer and a local management\n   entity.\n   Linkset - A number of signalling
      links that directly interconnect two\n   signalling points, which are used as
      a module.\n   MTP - The Message Transfer Part of the SS7 protocol.\n   MTP3
      - MTP Level 3, the signalling network layer of SS7.\n   MTP3-User - Any protocol
      normally using the services of the SS7 MTP3\n   (e.g., ISUP, SCCP, TUP, etc.).\n
      \  Network Appearance - The Network Appearance is a M3UA local reference\n   shared
      by SG and AS (typically an integer) that, together with an\n   Signaling Point
      Code, uniquely identifies an SS7 node by indicating\n   the specific SS7 network
      to which it belongs.  It can be used to\n   distinguish between signalling traffic
      associated with different\n   networks being sent between the SG and the ASP
      over a common SCTP\n   association.  An example scenario is where an SG appears
      as an\n   element in multiple separate national SS7 networks and the same\n
      \  Signaling Point Code value may be reused in different networks.\n   Network
      Byte Order - Most significant byte first, a.k.a Big Endian.\n   Routing Key
      - A Routing Key describes a set of SS7 parameters and\n   parameter values that
      uniquely define the range of signalling traffic\n   to be handled by a particular
      Application Server.  Parameters within\n   the Routing Key cannot extend across
      more than a single Signalling\n   Point Management Cluster.\n   Routing Context
      - A value that uniquely identifies a Routing Key.\n   Routing Context values
      are configured either using a configuration\n   management interface, or by
      using the routing key management\n   procedures defined in this document.\n
      \  Signaling End Point (SEP) - A node in the SS7 network associated with\n   an
      originating or terminating local exchange (switch) or a gateway\n   exchange.\n
      \  Signalling Gateway Process (SGP) - A process instance of a Signalling\n   Gateway.
      \ It serves as an active, backup, load-sharing, or broadcast\n   process of
      a Signalling Gateway.\n   Signalling Gateway (SG) - An SG is a signaling agent
      that\n   receives/sends SCN native signaling at the edge of the IP network\n
      \  [12].  An SG appears to the SS7 network as an SS7 Signalling Point.\n   An
      SG contains a set of one or more unique Signalling Gateway\n   Processes, of
      which one or more is normally actively processing\n   traffic.  Where an SG
      contains more than one SGP, the SG is a logical\n   entity, and the contained
      SGPs are assumed to be coordinated into a\n   single management view to the
      SS7 network and to the supported\n   Application Servers.\n   Signalling Process
      - A process instance that uses M3UA to communicate\n   with other signalling
      processes.  An ASP, an SGP, and an IPSP are all\n   signalling processes.\n
      \  Signalling Point Management Cluster (SPMC) - The complete set of\n   Application
      Servers represented to the SS7 network under a single MTP\n   entity (Signalling
      Point) in one specific Network Appearance.  SPMCs\n   are used to aggregate
      the availability, congestion, and user part\n   status of an MTP entity (Signalling
      Point) that is distributed in the\n   IP domain, for the purpose of supporting
      MTP3 management procedures\n   towards the SS7 network.  In some cases, the
      SG itself may also be a\n   member of the SPMC.  In this case, the SG\n   availability/congestion/User_Part
      status should also be taken into\n   account when considering any supporting
      MTP3 management actions.\n   Signaling Transfer Point (STP) - A node in the
      SS7 network that\n   provides network access and performs message routing, screening
      and\n   transfer of signaling messages.\n   Stream - An SCTP stream; a unidirectional
      logical channel established\n   from one SCTP endpoint to another associated
      SCTP endpoint, within\n   which all user messages are delivered in-sequence
      except for those\n   submitted to the unordered delivery service.\n"
    title: 1.2.  Terminology
  - contents:
    - '1.3.  M3UA Overview

      '
    - contents:
      - "1.3.1.  Protocol Architecture\n   The framework architecture that has been
        defined for SCN signalling\n   transport over IP [12] uses multiple components,
        including a common\n   signalling transport protocol and an adaptation module
        to support the\n   services expected by a particular SCN signalling protocol
        from its\n   underlying protocol layer.\n   Within the framework architecture,
        this document defines an MTP3-User\n   adaptation module suitable for supporting
        the transfer of messages of\n   any protocol layer that is identified to the
        MTP Level 3 as an MTP\n   User.  The list of these protocol layers includes
        but is not limited\n   to ISDN User Part (ISUP) [1,2,3], Signalling Connection
        Control Part\n   (SCCP) [4,5,6], and Telephone User Part (TUP) [13].  TCAP
        [14,15,16]\n   or RANAP [16] messages are transferred transparently by the
        M3UA\n   protocol as SCCP payload, as they are SCCP-User protocols.\n   It
        is recommended that M3UA use the services of the Stream Control\n   Transmission
        Protocol (SCTP) [18] as the underlying reliable common\n   signalling transport
        protocol.  This is to take advantage of various\n   SCTP features, such as:\n
        \     - Explicit packet-oriented delivery (not stream-oriented)\n      - Sequenced
        delivery of user messages within multiple streams,\n        with an option
        for order-of-arrival delivery of individual\n        user messages\n      -
        Optional multiplexing of user messages into SCTP datagrams\n      - Network-level
        fault tolerance through support of multi-homing\n        at either or both
        ends of an association\n      - Resistance to flooding and masquerade attacks\n
        \     - Data segmentation to conform to discovered path MTU size\n   Under
        certain scenarios, such as back-to-back connections without\n   redundancy
        requirements, the SCTP functions above might not be a\n   requirement, and
        TCP MAY be used as the underlying common transport\n   protocol.\n"
      title: 1.3.1.  Protocol Architecture
    - contents:
      - "1.3.2.  Services Provided by the M3UA Layer\n   The M3UA Layer at an ASP
        or IPSP provides the equivalent set of\n   primitives at its upper layer to
        the MTP3-Users as provided by the\n   MTP Level 3 to its local MTP3-Users
        at an SS7 SEP.  In this way, the\n   ISUP and/or SCCP layer at an ASP or IPSP
        is unaware that the expected\n   MTP3 services are offered remotely from an
        MTP3 Layer at an SGP, and\n   not by a local MTP3 layer.  The MTP3 layer at
        an SGP may also be\n   unaware that its local users are actually remote user
        parts over\n   M3UA.  In effect, the M3UA extends access to the MTP3 layer
        services\n   to a remote IP-based application.  The M3UA layer does not itself\n
        \  provide the MTP3 services.  However, in the case where an ASP is\n   connected
        to more than one SG, the M3UA layer at an ASP should\n   maintain the status
        of configured SS7 destinations and route messages\n   according to the availability
        and congestion status of the routes to\n   these destinations via each SG.\n
        \  The M3UA layer may also be used for point-to-point signalling between\n
        \  two IP Server Processes (IPSPs).  In this case, the M3UA layer\n   provides
        the same set of primitives and services at its upper layer\n   as the MTP3.
        \ However, in this case the expected MTP3 services are\n   not offered remotely
        from an SGP.  The MTP3 services are provided,\n   but the procedures to support
        these services are a subset of the MTP3\n   procedures, due to the simplified
        point-to-point nature of the IPSP-\n   to-IPSP relationship.\n"
      - contents:
        - "1.3.2.1.  Support for the Transport of MTP3-User Messages\n   The M3UA
          layer provides the transport of MTP-TRANSFER primitives\n   across an established
          SCTP association between an SGP and an ASP or\n   between IPSPs.\n   At
          an ASP, in the case where a destination is reachable via multiple\n   SGPs,
          the M3UA layer must also choose via which SGP the message is to\n   be routed
          or support load balancing across the SGPs, thereby\n   minimizing missequencing.\n
          \  The M3UA layer does not impose a 272-octet signalling information\n   field
          (SIF) length limit as specified by the SS7 MTP Level 2 protocol\n   [7,8,9].
          \ Larger information blocks can be accommodated directly by\n   M3UA/SCTP,
          without the need for an upper layer segmentation/\n   re-assembly procedure
          as specified in recent SCCP or ISUP versions.\n   However, in the context
          of an SG, the maximum 272-octet block size\n   must be followed when interworking
          to a SS7 network that does not\n   support the transfer of larger information
          blocks to the final\n   destination.  This avoids potential ISUP or SCCP
          fragmentation\n   requirements at the SGPs.  The provisioning and configuration
          of the\n   SS7 network determines the restriction placed on the maximum
          block\n   size.  Some configurations (e.g., Broadband MTP [19,20,22]) may\n
          \  permit larger block sizes.\n"
        title: 1.3.2.1.  Support for the Transport of MTP3-User Messages
      - contents:
        - "1.3.2.2.  Native Management Functions\n   The M3UA layer provides the capability
          to indicate errors associated\n   with received M3UA messages and to notify,
          as appropriate, local\n   management and/or the peer M3UA.\n"
        title: 1.3.2.2.  Native Management Functions
      - contents:
        - "1.3.2.3.  Interworking with MTP3 Network Management Functions\n   At the
          SGP, the M3UA layer provides interworking with MTP3 management\n   functions
          to support seamless operation of the user SCN signalling\n   applications
          in the SS7 and IP domains.  This includes\n   - providing an indication
          to MTP3-Users at an ASP that a destination\n     in the SS7 network is not
          reachable;\n   - providing an indication to MTP3-Users at an ASP that a
          destination\n     in the SS7 network is now reachable;\n   - providing an
          indication to MTP3-Users at an ASP that messages to a\n     destination
          in the SS7 network are experiencing SS7 congestion;\n   - providing an indication
          to the M3UA layer at an ASP that the routes\n     to a destination in the
          SS7 network are restricted; and\n   - providing an indication to MTP3-Users
          at an ASP that a MTP3-User\n     peer is unavailable.\n   The M3UA layer
          at an ASP keeps the state of the routes to remote SS7\n   destinations and
          may initiate an audit of the availability and the\n   restricted or the
          congested state of remote SS7 destinations.  This\n   information is requested
          from the M3UA layer at the SGP.\n   The M3UA layer at an ASP may also indicate
          to the SG that the M3UA\n   layer itself or the ASP or the ASP's Host is
          congested.\n"
        title: 1.3.2.3.  Interworking with MTP3 Network Management Functions
      - contents:
        - "1.3.2.4.  Support for the Management of SCTP Associations between the\n
          \         SGP and ASPs\n   The M3UA layer at the SGP maintains the availability
          state of all\n   configured remote ASPs, to manage the SCTP Associations
          and the\n   traffic between the M3UA peers.  Also, the active/inactive and\n
          \  congestion state of remote ASPs is maintained.\n   The M3UA layer MAY
          be instructed by local management to establish an\n   SCTP association to
          a peer M3UA node.  This can be achieved using the\n   M-SCTP_ESTABLISH primitives
          (see Section 1.6.3 for a description of\n   management primitives) to request,
          indicate, and confirm the\n   establishment of an SCTP association with
          a peer M3UA node.  In order\n   to avoid redundant SCTP associations between
          two M3UA peers, one side\n   (client) SHOULD be designated to establish
          the SCTP association, or\n   M3UA configuration information maintained to
          detect redundant\n   associations (e.g., via knowledge of the expected local
          and remote\n   SCTP endpoint addresses).\n   Local management MAY request
          from the M3UA layer the status of the\n   underlying SCTP associations using
          the M-SCTP_STATUS request and\n   confirm primitives.  Also, the M3UA MAY
          autonomously inform local\n   management of the reason for the release of
          an SCTP association,\n   determined either locally within the M3UA layer
          or by a primitive\n   from the SCTP.\n   Also, the M3UA layer MAY inform
          the local management of the change in\n   status of an ASP or AS.  This
          MAY be achieved using the M-ASP_STATUS\n   request or M-AS_STATUS request
          primitives.\n"
        title: 1.3.2.4.  Support for the Management of SCTP Associations between the
      - contents:
        - "1.3.2.5.  Support for the Management of Connections to Multiple SGPs\n
          \  As shown in Figure 1, an ASP may be connected to multiple SGPs.  In\n
          \  such a case, a particular SS7 destination may be reachable via more\n
          \  than one SGP and/or SG; i.e., via more than one route.  As MTP3 users\n
          \  only maintain status on a destination and not on a route basis, the\n
          \  M3UA layer must maintain the status (availability, restriction,\n   and/or
          congestion of route to destination) of the individual routes,\n   derive
          the overall availability or congestion status of the\n   destination from
          the status of the individual routes, and inform the\n   MTP3 users of this
          derived status whenever it changes.\n"
        title: 1.3.2.5.  Support for the Management of Connections to Multiple SGPs
      title: 1.3.2.  Services Provided by the M3UA Layer
    title: 1.3.  M3UA Overview
  - contents:
    - '1.4.  Functional Areas

      '
    - contents:
      - "1.4.1.  Signalling Point Code Representation\n   For example, within an SS7
        network, a Signalling Gateway might be\n   charged with representing a set
        of nodes in the IP domain into the\n   SS7 network for routing purposes.  The
        SG itself, as a signalling\n   point in the SS7 network, might also be addressable
        with an SS7 Point\n   Code for MTP3 Management purposes.  The SG Point Code
        might also be\n   used for addressing any local MTP3-Users at the SG such
        as a local\n   SCCP layer.\n   An SG may be logically partitioned to operate
        in multiple SS7 network\n   appearances.  In such a case, the SG could be
        addressable with a\n   Point Code in each network appearance, and it represents
        a set of\n   nodes in the IP domain into each SS7 network.  Alias Point Codes
        [8]\n   may also be used within an SG network appearance.\n   Where an SG
        contains more than one SGP, the MTP3 routeset, SPMC, and\n   remote AS/ASP
        states of each SGP SHOULD be coordinated across all the\n   SGPs.  Rerouting
        of traffic between the SGPs MAY also be supported.\n   Application Servers
        can be represented under the same Point Code of\n   the SG, under their own
        individual Point Codes, or grouped with other\n   Application Servers for
        Point Code preservation purposes.  A single\n   Point Code may be used to
        represent the SG and all the Application\n   Servers together, if desired.\n
        \  If an ASP or group of ASPs is available to the SS7 network via more\n   than
        one SG, each with its own Point Code, the ASP(s) will typically\n   be represented
        by a Point Code that is separate from any SG Point\n   Code.  This allows,
        for example, these SGs to be viewed from the SS7\n   network as \"STPs\",
        each having an ongoing \"route\" to the same ASP(s).\n   Under failure conditions
        where the ASP(s) become(s) unavailable from\n   one of the SGs, this approach
        enables MTP3 route management messaging\n   between the SG and SS7 network,
        allowing simple SS7 rerouting through\n   an alternate SG without changing
        the Destination Point Code Address\n   of SS7 traffic to the ASP(s).\n   Where
        a particular AS can be reached via more than one SGP, the\n   corresponding
        Routing Keys in the SGPs should be identical.  (Note:\n   It is possible for
        the SGP Routing Key configuration data to be\n   temporarily out of sync during
        configuration updates).\n                                 +--------+\n                                 |
        \       |\n                    +------------+  SG 1  +--------------+\n        +-------+
        \  |  SS7 links | \"STP\"  |  IP network  |     ----\n        |  SEP  +---+
        \           +--------+              +---/      \\\n        |   or  |                    |*
        \                     | ASPs  |\n        |  STP  +---+            +--------+
        \             +---\\      /\n        +-------+   |            |        |              |
        \    ----\n                    +------------+  SG 2  +--------------+\n                                 |
        \"STP\"  |\n                                 +--------+\n                       Figure
        1.  Example with mated SGs\n      * Note: SG-to-SG communication (i.e., \"C-links\")
        is recommended\n      for carrier grade networks, using an MTP3 linkset or
        an\n      equivalent, to allow rerouting between the SGs in the event of\n
        \     route failures.  Where SGPs are used, inter-SGP communication\n      might
        be used.  Inter-SGP protocol is outside of the scope of this\n      document.\n
        \     The following example shows a signalling gateway partitioned into\n
        \     two network appearances.\n                                     SG\n
        \       +-------+              +---------------+\n        |  SEP  +--------------|
        SS7 Ntwk.|M3UA|              ----\n        +-------+   SS7 links  |   \"A\"
        \   |    |            /      \\\n                               |__________|
        \   +-----------+  ASPs  |\n                               |          |    |
        \           \\      /\n        +-------+              | SS7 Ntwk.|    |              ----\n
        \       |  SEP  +--------------+   \"B\"    |    |\n        +-------+              +---------------+\n
        \                Figure 2.  Example with multiple network\n"
      title: 1.4.1.  Signalling Point Code Representation
    - contents:
      - '1.4.2.  Routing Contexts and Routing Keys

        '
      - contents:
        - "1.4.2.1.  Overview\n   The distribution of SS7 messages between the SGP
          and the Application\n   Servers is determined by the Routing Keys and their
          associated\n   Routing Contexts.  A Routing Key is essentially a set of
          SS7\n   parameters used to filter SS7 messages, whereas the Routing Context\n
          \  parameter is a 4-octet value (integer) that is associated to that\n   Routing
          Key in a 1:1 relationship.  The Routing Context therefore can\n   be viewed
          as an index into a sending node's Message Distribution\n   Table containing
          the Routing Key entries.\n   Possible SS7 address/routing information that
          comprise a Routing Key\n   entry includes, for example, the OPC, DPC, and
          SIO found in the MTP3\n   routing label.  Some example Routing Keys are:
          the DPC alone, the\n   DPC/OPC combination, or the DPC/OPC/SI combination.
          \ The particular\n   information used to define an M3UA Routing Key is application
          and\n   network dependent, and none of the above examples are mandated.\n
          \  An Application Server Process may be configured to process signalling\n
          \  traffic related to more than one Application Server, over a single\n
          \  SCTP Association.  In ASP Active and ASP Inactive management\n   messages,
          the signalling traffic to be started or stopped is\n   discriminated by
          the Routing Context parameter.  At an ASP, the\n   Routing Context parameter
          uniquely identifies the range of signalling\n   traffic associated with
          each Application Server that the ASP is\n   configured to receive.\n"
        title: 1.4.2.1.  Overview
      - contents:
        - "1.4.2.2.  Routing Key Limitations\n   Routing Keys SHOULD be unique in
          the sense that each received SS7\n   signalling message SHOULD have a full
          or partial match to a single\n   routing result.  An example of a partial
          match would be a default\n   Routing Key that would be the result if there
          are no other Routing\n   Keys to which the message belongs.  It is not necessary
          for the\n   parameter range values within a particular Routing Key to be\n
          \  contiguous.\n"
        title: 1.4.2.2.  Routing Key Limitations
      - contents:
        - "1.4.2.3.  Managing Routing Contexts and Routing Keys\n   There are two
          ways to provision a Routing Key at an SGP.  A Routing\n   Key may be configured
          statically using an implementation dependent\n   management interface, or
          dynamically using the M3UA Routing Key\n   registration procedure.\n   When
          using a management interface to configure Routing Keys, the\n   message
          distribution function within the SGP is not limited to the\n   set of parameters
          defined in this document.  Other implementation-\n   dependent distribution
          algorithms may be used.\n"
        title: 1.4.2.3.  Managing Routing Contexts and Routing Keys
      - contents:
        - "1.4.2.4.  Message Distribution at the SGP\n   To direct messages received
          from the SS7 MTP3 network to the\n   appropriate IP destination, the SGP
          must perform a message\n   distribution function using information from
          the received MTP3-User\n   message.\n   To support this message distribution,
          the SGP might, for example,\n   maintain the equivalent of a network address
          translation table,\n   mapping incoming SS7 message information to an Application
          Server for\n   a particular application and range of traffic.  This could
          be\n   accomplished by comparing elements of the incoming SS7 message to\n
          \  currently defined Routing Keys in the SGP.\n   These Routing Keys could
          in turn map directly to an Application\n   Server that is enabled by one
          or more ASPs.  These ASPs provide\n   dynamic status information regarding
          their availability, traffic-\n   handling capability and congestion to the
          SGP using various\n   management messages defined in the M3UA protocol.\n
          \  The list of ASPs in an AS is assumed to be dynamic, taking into\n   account
          the availability, traffic-handling capability, and congestion\n   status
          of the individual ASPs in the list, as well as configuration\n   changes
          and possible failover mechanisms.\n   Normally, one or more ASPs are active
          (i.e., currently processing\n   traffic) in the AS, but in certain failure
          and transition cases it is\n   possible that there may be no active ASP
          available.  Broadcast,\n   loadsharing, and backup scenarios are supported.\n
          \  When there is no matching Routing Key entry for an incoming SS7\n   message,
          a default treatment MAY be specified.  Possible solutions\n   are to provide
          a default Application Server at the SGP that directs\n   all unallocated
          traffic to a (set of) default ASPs, or to drop the\n   message and provide
          a notification to layer management.  The\n   treatment of unallocated traffic
          is implementation dependent.\n"
        title: 1.4.2.4.  Message Distribution at the SGP
      - contents:
        - "1.4.2.5.  Message Distribution at the ASP\n   The ASP must choose an SGP
          to direct a message to the SS7 network.\n   This is accomplished by observing
          the Destination Point Code (and\n   possibly other elements of the outgoing
          message, such as the SLS\n   value).  The ASP must also take into account
          whether the related\n   Routing Context is active or not (see Section 4.3.4.3).\n
          \  Implementation Note: Where more than one route (or SGP) is possible\n
          \  for routing to the SS7 network, the ASP could, for example, maintain\n
          \  a dynamic table of available SGP routes for the SS7 destinations,\n   taking
          into account the SS7 destination\n   availability/restricted/congestion
          status received from the SGP(s),\n   the availability status of the individual
          SGPs, and configuration\n   changes and failover mechanisms.  There is,
          however, no M3UA\n   messaging to manage the status of an SGP (e.g., SGP-\n
          \  Up/Down/Active/Inactive messaging).\n   Whenever an SCTP association
          to an SGP exists, the SGP is assumed to\n   be ready for the purposes of
          responding to M3UA ASPSM messages (refer\n   to Section 3).\n"
        title: 1.4.2.5.  Message Distribution at the ASP
      title: 1.4.2.  Routing Contexts and Routing Keys
    - contents:
      - "1.4.3.  SS7 and M3UA Interworking\n   In the case of SS7 and M3UA interworking,
        the M3UA adaptation layer\n   is designed to provide an extension of the MTP3-defined
        user\n   primitives.\n"
      - contents:
        - "1.4.3.1.  Signalling Gateway SS7 Layers\n   The SG is responsible for terminating
          MTP Level 3 of the SS7\n   protocol, and offering an IP-based extension
          to its users.\n   From an SS7 perspective, it is expected that the Signalling
          Gateway\n   transmits and receives SS7 Message Signalling Units (MSUs) over
          a\n   standard SS7 network interface, using the SS7 Message Transfer Part\n
          \  (MTP) [7,8,9].\n   As a standard SS7 network interface, the use of MTP
          Level 2\n   signalling links is not the only possibility.  ATM-based High
          Speed\n   Links can also be used with the services of the Signalling ATM\n
          \  Adaptation Layer (SAAL) [19,20].\n   Note: It is also possible for IP-based
          interfaces to be present,\n   using the services of the MTP2-User Adaptation
          Layer (M2UA) [24] or\n   M2PA [25].\n   These could be terminated at a Signalling
          Transfer Point (STP) or\n   Signalling End Point (SEP).  Using the services
          of MTP3, the SG could\n   be capable of communicating with remote SS7 SEPs
          in a quasi-\n   associated fashion, where STPs may be present in the SS7
          path between\n   the SEP and the SG.\n"
        title: 1.4.3.1.  Signalling Gateway SS7 Layers
      - contents:
        - "1.4.3.2.  SS7 and M3UA Interworking at the SG\n   The SGP provides a functional
          interworking of transport functions\n   between the SS7 network and the
          IP network by also supporting the\n   M3UA adaptation layer.  It allows
          the transfer of MTP3-User\n   signalling messages to and from an IP-based
          Application Server\n   Process where the peer MTP3-User protocol layer exists.\n
          \  For SS7 user part management, it is required that the MTP3-User\n   protocols
          at ASPs receive indications of SS7 signalling point\n   availability, SS7
          network congestion, and remote User Part\n   unavailability, as would be
          expected in an SS7 SEP node.  To\n   accomplish this, the MTP-PAUSE, MTP-RESUME,
          and MTP-STATUS indication\n   primitives received at the MTP3 upper layer
          interface at the SG need\n   to be propagated to the remote MTP3-User lower
          layer interface at the\n   ASP.\n   MTP3 management messages (such as TFPs
          or TFAs received from the SS7\n   network) MUST NOT be encapsulated as Data
          message Payload Data and\n   sent either from SG to ASP or from ASP to SG.
          \ The SG MUST terminate\n   these messages and generate M3UA messages, as
          appropriate.\n"
        title: 1.4.3.2.  SS7 and M3UA Interworking at the SG
      - contents:
        - "1.4.3.3.  Application Server\n   A cluster of application servers is responsible
          for providing the\n   overall support for one or more SS7 upper layers.
          \ From an SS7\n   standpoint, a Signalling Point Management Cluster (SPMC)
          provides\n   complete support for the upper layer service for a given point
          code.\n   As an example, an SPMC providing MGC capabilities could provide\n
          \  complete support for ISUP (and any other MTP3 user located at the\n   point
          code of the SPMC) for a given point code.\n   In the case where an ASP is
          connected to more than one SGP, the M3UA\n   layer must maintain the status
          of configured SS7 destinations and\n   route messages according to the availability/congestion/restricted\n
          \  status of the routes to these SS7 destinations.\n"
        title: 1.4.3.3.  Application Server
      - contents:
        - "1.4.3.4.  IPSP Considerations\n   Since IPSPs use M3UA in a point-to-point
          fashion, there is no concept\n   of routing of messages beyond the remote
          end.  Therefore, SS7 and\n   M3UA interworking is not necessary for this
          model.\n"
        title: 1.4.3.4.  IPSP Considerations
      title: 1.4.3.  SS7 and M3UA Interworking
    - contents:
      - '1.4.4.  Redundancy Models

        '
      - contents:
        - "1.4.4.1 Application Server Redundancy\n   All MTP3-User messages (e.g.,
          ISUP, SCCP) that match a provisioned\n   Routing Key at an SGP are mapped
          to an Application Server.\n   The Application Server is the set of all ASPs
          associated with a\n   specific Routing Key.  Each ASP in this set may be
          active, inactive,\n   or unavailable.  Active ASPs handle traffic; inactive
          ASPs might be\n   used when active ASPs become unavailable.\n   The failover
          model supports an \"n+k\" redundancy model, where \"n\" ASPs\n   is the
          minimum number of redundant ASPs required to handle traffic\n   and \"k\"
          ASPs are available to take over for a failed or unavailable\n   ASP.  Traffic
          SHOULD be sent after \"n\" ASPs are active.  \"k\" ASPs MAY\n   be either
          active at the same time as \"n\" or kept inactive until\n   needed due to
          a failed or unavailable ASP.\n   A \"1+1\" active/backup redundancy is a
          subset of this model.  A\n   simplex \"1+0\" model is also supported as
          a subset, with no ASP\n   redundancy.\n"
        title: 1.4.4.1 Application Server Redundancy
      title: 1.4.4.  Redundancy Models
    - contents:
      - "1.4.5.  Flow Control\n   Local Management at an ASP may wish to stop traffic
        across an SCTP\n   association to temporarily remove the association from
        service or to\n   perform testing and maintenance activity.  The function
        could\n   optionally be used to control the start of traffic on to a newly\n
        \  available SCTP association.\n"
      title: 1.4.5.  Flow Control
    - contents:
      - "1.4.6.  Congestion Management\n   The M3UA layer is informed of local and
        IP network congestion by\n   means of an implementation-dependent function
        (e.g., an\n   implementation-dependent indication from the SCTP of IP network\n
        \  congestion).\n   At an ASP or IPSP, the M3UA layer indicates IP network
        congestion to\n   local MTP3-Users by means of an MTP-STATUS primitive, as
        per current\n   MTP3 procedures, to invoke appropriate upper-layer responses.\n
        \  When an SG determines that the transport of SS7 messages to a\n   Signalling
        Point Management Cluster (SPMC) is encountering IP network\n   congestion,
        the SG MAY trigger SS7 MTP3 Transfer Controlled\n   management messages to
        originating SS7 nodes, per the congestion\n   procedures of the relevant MTP3
        standard.  The triggering of SS7 MTP3\n   Management messages from an SG is
        an implementation-dependent\n   function.\n   The M3UA layer at an ASP or
        IPSP MAY indicate local congestion to an\n   M3UA peer with an SCON message.
        \ When an SG receives a congestion\n   message (SCON) from an ASP and the
        SG determines that an SPMC is now\n   encountering congestion, it MAY trigger
        SS7 MTP3 Transfer Controlled\n   management messages to concerned SS7 destinations
        according to\n   congestion procedures of the relevant MTP3 standard.\n"
      title: 1.4.6.  Congestion Management
    - contents:
      - "1.4.7.  SCTP Stream Mapping\n   The M3UA layer at both the SGP and ASP also
        supports the assignment\n   of signalling traffic into streams within an SCTP
        association.\n   Traffic that requires sequencing SHOULD be assigned to the
        same\n   stream.  To accomplish this, MTP3-User traffic may be assigned to\n
        \  individual streams based on, for example, the SLS value in the MTP3\n   Routing
        Label, subject of course to the maximum number of streams\n   supported by
        the underlying SCTP association.\n   The following rules apply (see Section
        3.1.2):\n   1. The DATA message MUST NOT be sent on stream 0.\n   2. The ASPSM,
        MGMT, RKM classes SHOULD be sent on stream 0 (other\n      than BEAT, BEAT
        ACK and NTFY messages).\n   3. The SSNM, ASPTM classes and BEAT, BEAT ACK
        and NTFY messages can\n      be sent on any stream.\n"
      title: 1.4.7.  SCTP Stream Mapping
    - contents:
      - "1.4.8.  SCTP Client/Server Model\n   It is recommended that the SGP and ASP
        be able to support both client\n   and server operation.  The peer endpoints
        using M3UA SHOULD be\n   configured so that one always takes on the role of
        client and the\n   other the role of server for initiating SCTP associations.
        \ The\n   default orientation would be for the SGP to take on the role of\n
        \  server while the ASP is the client.  In this case, ASPs SHOULD\n   initiate
        the SCTP association to the SGP.\n   In the case of IPSP to IPSP communication,
        the peer endpoints using\n   M3UA SHOULD be configured so that one always
        takes on the role of\n   client and the other the role of server for initiating
        SCTP\n   associations.\n   The SCTP and TCP Registered User Port Number Assignment
        for M3UA is\n   2905.\n"
      title: 1.4.8.  SCTP Client/Server Model
    title: 1.4.  Functional Areas
  - contents:
    - '1.5.  Sample Configuration

      '
    - contents:
      - "1.5.1.  Example 1: ISUP Message Transport\n      ********   SS7   *****************
        \  IP   ********\n      * SEP  *---------*      SGP      *--------* ASP  *\n
        \     ********         *****************        ********\n      +------+         +---------------+
        \       +------+\n      | ISUP |         |     (NIF)     |        | ISUP |\n
        \     +------+         +------+ +------+        +------+\n      | MTP3 |         |
        MTP3 | | M3UA |        | M3UA |\n      +------|         +------+-+------+
        \       +------+\n      | MTP2 |         | MTP2 | | SCTP |        | SCTP |\n
        \     +------+         +------+ +------+        +------+\n      |  L1  |         |
        \ L1  | |  IP  |        |  IP  |\n      +------+         +------+ +------+
        \       +------+\n          |_______________|         |______________|\n      SEP
        - SS7 Signalling End Point\n      SCTP - Stream Control Transmission Protocol\n
        \     NIF - Nodal Interworking Function\n   In this example, the SGP provides
        an implementation-dependent nodal\n   interworking function (NIF) that allows
        the MGC to exchange SS7\n   signalling messages with the SS7-based SEP.  The
        NIF within the SGP\n   serves as the interface within the SGP between the
        MTP3 and M3UA.\n   This nodal interworking function has no visible peer protocol
        with\n   either the MGC or SEP.  It also provides network status information\n
        \  to one or both sides of the network.\n   For internal SGP modeling purposes,
        at the NIF level, SS7 signalling\n   messages that are destined to the MGC
        are received as MTP-TRANSFER\n   indication primitives from the MTP Level
        3 upper layer interface,\n   translated to MTP-TRANSFER request primitives,
        and sent to the local\n   M3UA-resident message distribution function for
        ongoing routing to\n   the final IP destination.  Messages received from the
        local M3UA\n   network address translation and mapping function as MTP-TRANSFER\n
        \  indication primitives are sent to the MTP Level 3 upper-layer\n   interface
        as MTP-TRANSFER request primitives for ongoing MTP Level 3\n   routing to
        an SS7 SEP.  For the purposes of providing SS7 network\n   status information,
        the NIF also delivers MTP-PAUSE, MTP-RESUME, and\n   MTP-STATUS indication
        primitives received from the MTP Level 3\n   upper-layer interface to the
        local M3UA-resident management function.\n   In addition, as an implementation
        and network option, restricted\n   destinations are communicated from MTP
        network management to the\n   local M3UA-resident management function.\n"
      title: '1.5.1.  Example 1: ISUP Message Transport'
    - contents:
      - "1.5.2.  Example 2: SCCP Transport between IPSPs\n               ********
        \   IP    ********\n               * IPSP *          * IPSP *\n               ********
        \         ********\n               +------+          +------+\n               |SCCP-
        |          |SCCP- |\n               | User |          | User |\n               +------+
        \         +------+\n               | SCCP |          | SCCP |\n               +------+
        \         +------+\n               | M3UA |          | M3UA |\n               +------+
        \         +------+\n               | SCTP |          | SCTP |\n               +------+
        \         +------+\n               |  IP  |          |  IP  |\n               +------+
        \         +------+\n                   |________________|\n   This example
        shows an architecture where no Signalling Gateway is\n   used.  In this example,
        SCCP messages are exchanged directly between\n   two IP-resident IPSPs with
        resident SCCP-User protocol instances,\n   such as RANAP or TCAP.  SS7 network
        interworking is not required;\n   therefore, there is no MTP3 network management
        status information for\n   the SCCP and SCCP-User protocols to consider.  Any
        MTP-PAUSE, MTP-\n   RESUME, or MTP-STATUS indications from the M3UA layer
        to the SCCP\n   layer should consider the status of the SCTP Association and\n
        \  underlying IP network and any congestion information received from\n   the
        remote site.\n"
      title: '1.5.2.  Example 2: SCCP Transport between IPSPs'
    - contents:
      - "1.5.3.  Example 3: SGP Resident SCCP Layer, with Remote ASP\n         ********
        \  SS7   *****************   IP   ********\n         * SEP  *---------*               *--------*
        \     *\n         *  or  *         *      SGP      *        * ASP  *\n         *
        STP  *         *               *        *      *\n         ********         *****************
        \       ********\n         +------+         +---------------+        +------+\n
        \        | SCCP-|         |     SCCP      |        | SCCP-|\n         | User
        |         +---------------+        | User |\n         +------+           |
        \  _____   |          +------+\n         | SCCP |           |  |     |  |
        \         | SCCP |\n         +------+         +------+-+------+        +------+\n
        \        | MTP3 |         | MTP3 | | M3UA |        | M3UA |\n         +------|
        \        +------+ +------+        +------+\n         | MTP2 |         | MTP2
        | | SCTP |        | SCTP |\n         +------+         +------+ +------+        +------+\n
        \        |  L1  |         |  L1  | |  IP  |        |  IP  |\n         +------+
        \        +------+ +------+        +------+\n             |_______________|
        \        |______________|\n                 STP - SS7 Signalling Transfer
        Point\n   In this example, the SGP contains an instance of the SS7 SCCP\n
        \  protocol layer that may, for example, perform the SCCP Global Title\n   Translation
        (GTT) function for messages logically addressed to the SG\n   SCCP.  If the
        result of a GTT for an SCCP message yields an SS7 DPC\n   or DPC/SSN address
        of an SCCP peer located in the IP domain, the\n   resulting MTP-TRANSFER request
        primitive is sent to the local M3UA-\n   resident network address translation
        and mapping function for ongoing\n   routing to the final IP destination.\n
        \  Similarly, the SCCP instance in an SGP can perform the SCCP GTT\n   service
        for messages logically addressed to it from SCCP peers in the\n   IP domain.
        \ In this case, MTP-TRANSFER indication primitives are sent\n   from the local
        M3UA-resident network address translation and mapping\n   function to the
        SCCP for GTT.  If the result of the GTT yields the\n   address of an SCCP
        peer in the SS7 network, then the resulting MTP-\n   TRANSFER request primitive
        is given to the MTP3 for delivery to an\n   SS7-resident node.\n   It is possible
        that the above SCCP GTT at the SGP could yield the\n   address of an SCCP
        peer in the IP domain, and that the resulting\n   MTP-TRANSFER request primitive
        would be sent back to the M3UA layer\n   for delivery to an IP destination.\n
        \  For internal SGP modeling purposes, this may be accomplished with the\n
        \  use of an implementation-dependent nodal interworking function within\n
        \  the SGP that effectively sits below the SCCP and routes MTP-TRANSFER\n
        \  request/indication messages to/from both the MTP3 and the M3UA layer,\n
        \  based on the SS7 DPC or DPC/SI address information.  This nodal\n   interworking
        function has no visible peer protocol with either the\n   ASP or SEP.\n   Note
        that the services and interface provided by the M3UA layer are\n   the same
        as in Example 1 and that the functions taking place in the\n   SCCP entity
        are transparent to the M3UA layer.  The SCCP protocol\n   functions are not
        reproduced in the M3UA protocol.\n"
      title: '1.5.3.  Example 3: SGP Resident SCCP Layer, with Remote ASP'
    title: 1.5.  Sample Configuration
  - contents:
    - "1.6.  Definition of M3UA Boundaries\n   This section provides a definition
      of the boundaries of the M3UA\n   protocol.  They consist of SCTP, Layer Management,
      and the MTP3-User.\n           +-----------+\n           | MTP3-User |\n           +-----------+\n
      \                |\n                 |\n           +-----------+     +------------+\n
      \          |    M3UA   |-----| Layer Mgmt |\n           +-----------+     +------------+\n
      \                |\n                 |\n           +-----------+\n           |
      \   SCTP   |\n           +-----------+\n"
    - contents:
      - "1.6.1.  Definition of the Boundary between M3UA and an MTP3-User\n   From
        ITU Q.701 [7]:\n      MTP-TRANSFER request\n      MTP-TRANSFER indication\n
        \     MTP-PAUSE indication\n      MTP-RESUME indication\n      MTP-STATUS
        indication\n"
      title: 1.6.1.  Definition of the Boundary between M3UA and an MTP3-User
    - contents:
      - "1.6.2.  Definition of the Boundary between M3UA and SCTP\n   An example of
        the upper-layer primitives provided by the SCTP are\n   provided in Reference
        [18], Section 10.\n"
      title: 1.6.2.  Definition of the Boundary between M3UA and SCTP
    - contents:
      - "1.6.3.  Definition of the Boundary between M3UA and Layer Management\n   M-SCTP_ESTABLISH
        request\n   Direction: LM -> M3UA\n   Purpose: LM requests that ASP establish
        an SCTP association with its\n   peer.\n   M-SCTP_ESTABLISH confirm\n   Direction:
        M3UA -> LM\n   Purpose: ASP confirms to LM that it has established an SCTP\n
        \  association with its peer.\n   M-SCTP_ESTABLISH indication\n   Direction:
        M3UA -> LM\n   Purpose: M3UA informs LM that a remote ASP has established
        an SCTP\n   association.\n   M-SCTP_RELEASE request\n   Direction: LM -> M3UA\n
        \  Purpose: LM requests that ASP release an SCTP association with its\n   peer.\n
        \  M-SCTP_RELEASE confirm\n   Direction: M3UA -> LM\n   Purpose: ASP confirms
        to LM that it has released SCTP association\n   with its peer.\n   M-SCTP_RELEASE
        indication\n   Direction: M3UA -> LM\n   Purpose: M3UA informs LM that a remote
        ASP has released an SCTP\n   Association or that the SCTP association has
        failed.\n   M-SCTP_RESTART indication\n   Direction: M3UA -> LM\n   Purpose:
        M3UA informs LM that an SCTP restart indication has been\n   received.\n   M-SCTP_STATUS
        request\n   Direction: LM -> M3UA\n   Purpose: LM requests that M3UA report
        the status of an SCTP\n   association.\n   M-SCTP_STATUS confirm\n   Direction:
        M3UA -> LM\n   Purpose: M3UA responds with the status of an SCTP association.\n
        \  M-SCTP STATUS indication\n   Direction: M3UA -> LM\n   Purpose: M3UA reports
        the status of an SCTP association.\n   M-ASP_STATUS request\n   Direction:
        LM -> M3UA\n   Purpose: LM requests that M3UA report the status of a local
        or remote\n   ASP.\n   M-ASP_STATUS confirm\n   Direction: M3UA -> LM\n   Purpose:
        M3UA reports the status of local or remote ASP.\n   M-AS_STATUS request\n
        \  Direction: LM -> M3UA\n   Purpose: LM requests that M3UA report the status
        of an AS.\n   M-AS_STATUS confirm\n   Direction: M3UA -> LM\n   Purpose: M3UA
        reports the status of an AS.\n   M-NOTIFY indication\n   Direction: M3UA ->
        LM\n   Purpose: M3UA reports that it has received a Notify message\n   from
        its peer.\n   M-ERROR indication\n   Direction: M3UA -> LM\n   Purpose: M3UA
        reports that it has received an Error message from\n   its peer or that a
        local operation has been unsuccessful.\n   M-ASP_UP request\n   Direction:
        LM -> M3UA\n   Purpose: LM requests that ASP start its operation and send
        an ASP Up\n   message to its peer.\n   M-ASP_UP confirm\n   Direction: M3UA
        -> LM\n   Purpose: ASP reports that it has received an ASP UP Ack message
        from\n   its peer.\n   M-ASP_UP indication\n   Direction: M3UA -> LM\n   Purpose:
        M3UA reports that it has successfully processed an incoming\n   ASP Up message
        from its peer.\n   M-ASP_DOWN request\n   Direction: LM -> M3UA\n   Purpose:
        LM requests that ASP stop its operation and send an ASP Down\n   message to
        its peer.\n   M-ASP_DOWN confirm\n   Direction: M3UA -> LM\n   Purpose: ASP
        reports that it has received an ASP Down Ack message\n   from its peer.\n
        \  M-ASP_DOWN indication\n   Direction: M3UA -> LM\n   Purpose: M3UA reports
        that it has successfully processed an incoming\n   ASP Down message from its
        peer, or the SCTP association has\n   been lost/reset.\n   M-ASP_ACTIVE request\n
        \  Direction: LM -> M3UA\n   Purpose: LM requests that ASP send an ASP Active
        message to its peer.\n   M-ASP_ACTIVE confirm\n   Direction: M3UA -> LM\n
        \  Purpose: ASP reports that it has received an ASP Active\n   Ack message
        from its peer.\n   M-ASP_ACTIVE indication\n   Direction: M3UA -> LM\n   Purpose:
        M3UA reports that it has successfully processed an incoming\n   ASP Active
        message from its peer.\n   M-ASP_INACTIVE request\n   Direction: LM -> M3UA\n
        \  Purpose: LM requests that ASP send an ASP Inactive message to its\n   peer.\n
        \  M-ASP_INACTIVE confirm\n   Direction: LM -> M3UA\n   Purpose: ASP reports
        that it has received an ASP Inactive\n   Ack message from its peer.\n   M-ASP_INACTIVE
        indication\n   Direction: M3UA -> LM\n   Purpose: M3UA reports that it has
        successfully processed an incoming\n   ASP Inactive message from its peer.\n
        \  M-AS_ACTIVE indication\n   Direction: M3UA -> LM\n   Purpose: M3UA reports
        that an AS has moved to the AS-ACTIVE state.\n   M-AS_INACTIVE indication\n
        \  Direction: M3UA -> LM\n   Purpose: M3UA reports that an AS has moved to
        the AS-INACTIVE state.\n   M-AS_DOWN indication\n   Direction: M3UA -> LM\n
        \  Purpose: M3UA reports that an AS has moved to the AS-DOWN state.\n   If
        dynamic registration of RK is supported by the M3UA layer, the\n   layer MAY
        support the following additional primitives:\n   M-RK_REG request\n   Direction:
        LM -> M3UA\n   Purpose: LM requests that ASP register RK(s) with its peer
        by sending\n   an REG REQ message\n   M-RK_REG confirm\n   Direction: M3UA
        -> LM\n   Purpose: ASP reports that it has received REG RSP message with a\n
        \  registration status of successful from its peer.\n   M-RK_REG indication\n
        \  Direction: M3UA -> LM\n   Purpose: M3UA informs LM that it has successfully
        processed an\n   incoming REG REQ message.\n   M-RK_DEREG request\n   Direction:
        LM -> M3UA\n   Purpose: LM requests that ASP deregister RK(s) with its peer
        by\n   sending a DEREG REQ message.\n   M-RK_DEREG confirm\n   Direction:
        M3UA -> LM\n   Purpose: ASP reports that it has received DEREG REQ message
        with a\n   deregistration status of successful from its peer.\n   M-RK_DEREG
        indication\n   Direction: M3UA -> LM\n   Purpose: M3UA informs LM that it
        has successfully processed an\n   incoming DEREG REQ from its peer.\n"
      title: 1.6.3.  Definition of the Boundary between M3UA and Layer Management
    title: 1.6.  Definition of M3UA Boundaries
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   In this document, the keywords MUST, MUST NOT, REQUIRED,
    SHALL, SHALL\n   NOT, SHOULD, SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and\n
    \  OPTIONAL are to be interpreted as described in [21].\n"
  title: 2.  Conventions
- contents:
  - "3.  M3UA Protocol Elements\n   The general M3UA message format includes a Common
    Message Header\n   followed by zero or more parameters as defined by the Message
    Type.\n   For forward compatibility, all Message Types may have attached\n   parameters
    even if none are specified in this version.\n"
  - contents:
    - "3.1.  Common Message Header\n   The protocol messages for MTP3-User Adaptation
      require a message\n   header that contains the adaptation layer version, the
      message type,\n   and message length.\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Version    |   Reserved    | Message Class | Message Type  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                        Message Length                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     \\                                                               \\\n
      \     /                                                               /\n   All
      fields in an M3UA message MUST be transmitted in network byte\n   order, unless
      otherwise stated.\n"
    - contents:
      - "3.1.1.  M3UA Protocol Version: 8 bits (unsigned integer)\n   The version
        field contains the version of the M3UA adaptation layer.\n   The supported
        versions are as follows:\n         1      Release 1.0\n"
      title: '3.1.1.  M3UA Protocol Version: 8 bits (unsigned integer)'
    - contents:
      - "3.1.2.  Message Classes and Types\n   The following list contains the valid
        Message Classes:\n      Message Class: 8 bits (unsigned integer)\n   The following
        list contains the valid Message Type Classes:\n        0     Management (MGMT)
        Messages\n        1     Transfer Messages\n        2     SS7 Signalling Network
        Management (SSNM) Messages\n        3     ASP State Maintenance (ASPSM) Messages\n
        \       4     ASP Traffic Maintenance (ASPTM) Messages\n        5     Reserved
        for Other SIGTRAN Adaptation Layers\n        6     Reserved for Other SIGTRAN
        Adaptation Layers\n        7     Reserved for Other SIGTRAN Adaptation Layers\n
        \       8     Reserved for Other SIGTRAN Adaptation Layers\n        9     Routing
        Key Management (RKM) Messages\n       10 to 127 Reserved by the IETF\n      128
        to 255 Reserved for IETF-Defined Message Class extensions\n      Message Type:
        8 bits (unsigned integer)\n      The following list contains the message types
        for the defined\n      messages.\n      Management (MGMT) Messages (see Section
        3.8)\n           0        Error (ERR)\n           1        Notify (NTFY)\n
        \       2 to 127    Reserved by the IETF\n      128 to 255    Reserved for
        IETF-Defined MGMT extensions\n      Transfer Messages (see Section 3.3)\n
        \          0        Reserved\n           1        Payload Data (DATA)\n        2
        to 127    Reserved by the IETF\n      128 to 255    Reserved for IETF-Defined
        Transfer extensions\n      SS7 Signalling Network Management (SSNM) Messages
        (see Section\n      3.4)\n           0        Reserved\n           1        Destination
        Unavailable (DUNA)\n           2        Destination Available (DAVA)\n           3
        \       Destination State Audit (DAUD)\n           4        Signalling Congestion
        (SCON)\n           5        Destination User Part Unavailable (DUPU)\n           6
        \       Destination Restricted (DRST)\n        7 to 127    Reserved by the
        IETF\n      128 to 255    Reserved for IETF-Defined SSNM extensions\n      ASP
        State Maintenance (ASPSM) Messages (see Section 3.5)\n           0        Reserved\n
        \          1        ASP Up (ASPUP)\n           2        ASP Down (ASPDN)\n
        \          3        Heartbeat (BEAT)\n           4        ASP Up Acknowledgement
        (ASPUP ACK)\n           5        ASP Down Acknowledgement (ASPDN ACK)\n           6
        \       Heartbeat Acknowledgement (BEAT ACK)\n        7 to 127    Reserved
        by the IETF\n      128 to 255    Reserved for IETF-Defined ASPSM extensions\n
        \     ASP Traffic Maintenance (ASPTM) Messages (see Section 3.7)\n           0
        \       Reserved\n           1        ASP Active (ASPAC)\n           2        ASP
        Inactive (ASPIA)\n           3        ASP Active Acknowledgement (ASPAC ACK)\n
        \          4        ASP Inactive Acknowledgement (ASPIA ACK)\n        5 to
        127    Reserved by the IETF\n      128 to 255    Reserved for IETF-Defined
        ASPTM extensions\n      Routing Key Management (RKM) Messages (see Section
        3.6)\n           0        Reserved\n           1        Registration Request
        (REG REQ)\n           2        Registration Response (REG RSP)\n           3
        \       Deregistration Request (DEREG REQ)\n           4        Deregistration
        Response (DEREG RSP)\n        5 to 127    Reserved by the IETF\n      128
        to 255    Reserved for IETF-Defined RKM extensions\n"
      title: 3.1.2.  Message Classes and Types
    - contents:
      - "3.1.3.  Reserved: 8 Bits\n   The Reserved field SHOULD be set to all '0's
        and ignored by the\n   receiver.\n"
      title: '3.1.3.  Reserved: 8 Bits'
    - contents:
      - "3.1.4.  Message Length: 32-Bits (Unsigned Integer)\n   The Message Length
        defines the length of the message in octets,\n   including the Common Header.
        \ The Message Length MUST include\n   parameter padding octets, if there are
        any.\n   Note: A receiver SHOULD accept the message whether or not the final\n
        \  parameter padding is included in the message length.\n"
      title: '3.1.4.  Message Length: 32-Bits (Unsigned Integer)'
    title: 3.1.  Common Message Header
  - contents:
    - "3.2.  Variable-Length Parameter Format\n   M3UA messages consist of a Common
      Header followed by zero or more\n   variable-length parameters, as defined by
      the message type.  All the\n   parameters contained in a message are defined
      in a Tag Length-Value\n   format, as shown below.\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |          Parameter Tag        |       Parameter Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     \\                                                               \\\n
      \     /                       Parameter Value                         /\n      \\
      \                                                              \\\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Where more than one parameter is included in a message, the\n   parameters
      may be in any order, except where explicitly mandated.  A\n   receiver SHOULD
      accept the parameters in any order.\n   Unless explicitly stated or shown in
      a message format diagram, only\n   one parameter of the same type is allowed
      in a message.\n   Parameter Tag: 16 bits (unsigned integer)\n      The Tag field
      is a 16-bit identifier of the type of parameter.  It\n      takes a value of
      0 to 65534.  Common parameters used by adaptation\n      layers are in the range
      of 0x00 to 0x3f.  M3UA-specific parameters\n      have Tags in the range 0x0200
      to 0x02ff.  The parameter Tags\n      defined are as follows:\n      Common
      Parameters.  These TLV parameters are common across the\n      different adaptation
      layers:\n        Parameter Name                     Parameter ID\n        ==============
      \                    ============\n        Reserved                              0x0000\n
      \       Not Used in M3UA                      0x0001\n        Not Used in M3UA
      \                     0x0002\n        Not Used in M3UA                      0x0003\n
      \       INFO String                           0x0004\n        Not Used in M3UA
      \                     0x0005\n        Routing Context                       0x0006\n
      \       Diagnostic Information                0x0007\n        Not Used in M3UA
      \                     0x0008\n        Heartbeat Data                        0x0009\n
      \       Not Used in M3UA                      0x000a\n        Traffic Mode Type
      \                    0x000b\n        Error Code                            0x000c\n
      \       Status                                0x000d\n        Not Used in M3UA
      \                     0x000e\n        Not Used in M3UA                      0x000f\n
      \       Not Used in M3UA                      0x0010\n        ASP Identifier
      \                       0x0011\n        Affected Point Code                   0x0012\n
      \       Correlation ID                        0x0013\n   M3UA-Specific parameters.
      \ These TLV parameters are specific to the\n   M3UA protocol:\n        Network
      Appearance                    0x0200\n        Reserved                              0x0201\n
      \       Reserved                              0x0202\n        Reserved                              0x0203\n
      \       User/Cause                            0x0204\n        Congestion Indications
      \               0x0205\n        Concerned Destination                 0x0206\n
      \       Routing Key                           0x0207\n        Registration Result
      \                  0x0208\n        Deregistration Result                 0x0209\n
      \       Local Routing Key Identifier          0x020a\n        Destination Point
      Code                0x020b\n        Service Indicators                    0x020c\n
      \       Reserved                              0x020d\n        Originating Point
      Code List           0x020e\n        Reserved                              0x020f\n
      \       Protocol Data                         0x0210\n        Reserved                              0x0211\n
      \       Registration Status                   0x0212\n        Deregistration
      Status                 0x0213\n        Reserved by the IETF             0x0214
      to 0xffff\n      The value of 65535 is reserved for IETF-defined extensions.\n
      \     Values other than those defined in specific parameter descriptions\n      are
      reserved for use by the IETF.  An RFC is required to make use\n      of parameter
      values \"Reserved by the IETF\".\n   Parameter Length: 16 bits (unsigned integer)\n
      \     The Parameter Length field contains the size of the parameter in\n      octets,
      including the Parameter Tag, Parameter Length, and\n      Parameter Value fields.
      \ Thus, a parameter with a zero-length\n      Parameter Value field would have
      a Length field of 4.  The\n      Parameter Length does not include any padding
      octets.  If the\n      parameter contains subparameters, the Parameter Length
      field will\n      include all the octets of each subparameter, including\n      subparameter
      padding octets (if there are any).\n   Parameter Value: variable length\n      The
      Parameter Value field contains the actual information to be\n      transferred
      in the parameter.\n      The total length of a parameter (including Tag, Parameter
      Length,\n      and Value fields) MUST be a multiple of 4 octets.  If the length\n
      \     of the parameter is not a multiple of 4 octets, the sender pads\n      the
      Parameter at the end (i.e., after the Parameter Value field)\n      with all
      zero octets.  The length of the padding is NOT included\n      in the parameter
      length field.  A sender MUST NOT pad with more\n      than 3 octets.  The receiver
      MUST ignore the padding octets.\n"
    title: 3.2.  Variable-Length Parameter Format
  - contents:
    - "3.3.  Transfer Messages\n   The following section describes the Transfer messages
      and parameter\n   contents.\n"
    - contents:
      - "3.3.1.  Payload Data Message (DATA)\n   The DATA message contains the SS7
        MTP3-User protocol data, which is\n   an MTP-TRANSFER primitive, including
        the complete MTP3 Routing Label.\n   The DATA message contains the following
        variable-length parameters:\n        Network Appearance       Optional\n        Routing
        Context          Conditional\n        Protocol Data            Mandatory\n
        \       Correlation Id           Optional\n   The following format MUST be
        used for the Data Message:\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0200           |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                       Network Appearance                      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0006           |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        Routing Context                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0210           |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                        Protocol Data                          /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0013           |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        Correlation Id                         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Network Appearance: 32 bits (unsigned integer)\n      The Network Appearance
        parameter identifies the SS7 network\n      context for the message and implicitly
        identifies the SS7 Point\n      Code format used, the SS7 Network Indicator
        value, and the MTP3\n      and possibly the MTP3-User protocol type/variant/version
        used\n      within the specific SS7 network.  Where an SG operates in the\n
        \     context of a single SS7 network, or if individual SCTP\n      associations
        are dedicated to each SS7 network context, the\n      Network Appearance parameter
        is not required.  In other cases, the\n      parameter may be configured to
        be present for the use of the\n      receiver.\n      The Network Appearance
        parameter value is of local significance\n      only, coordinated between
        the SGP and ASP.  Therefore, in the case\n      where an ASP is connected
        to more than one SGP, the same SS7\n      network context may be identified
        by different Network Appearance\n      values, depending on which SGP a message
        is being transmitted/\n      received.\n      Where the optional Network Appearance
        parameter is present, it\n      MUST be the first parameter in the message,
        as it defines the\n      format of the Protocol Data field.\n      IMPLEMENTATION
        NOTE: For simplicity of configuration, it may be\n      desirable to use the
        same NA value across all nodes sharing a\n      particular network context.\n
        \  Routing Context: 32 bits (unsigned integer)\n      The Routing Context
        parameter contains the Routing Context value\n      associated with the DATA
        message.  Where a Routing Key has not\n      been coordinated between the
        SGP and ASP, sending of Routing\n      Context is not required.  Where multiple
        Routing Keys and Routing\n      Contexts are used across a common association,
        the Routing Context\n      MUST be sent to identify the traffic flow, assisting
        in the\n      internal distribution of Data messages.\n   Protocol Data: variable
        length\n      The Protocol Data parameter contains the original SS7 MTP3\n
        \     message, including the Service Information Octet and Routing\n      Label.\n
        \     The Protocol Data parameter contains the following fields:\n         Service
        Indicator\n         Network Indicator\n         Message Priority\n         Destination
        Point Code\n         Originating Point Code\n         Signalling Link Selection
        Code (SLS)\n         User Protocol Data, which includes\n            MTP3-User
        protocol elements (e.g., ISUP, SCCP, or TUP\n            parameters)\n   The
        Protocol Data parameter is encoded as follows:\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                     Originating Point Code                    |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                     Destination Point Code                    |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |       SI      |       NI      |      MP       |      SLS      |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      \\                                                               \\\n
        \      /                     User Protocol Data                        /\n
        \      \\                                                               \\\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Originating Point Code: 32 bits (unsigned integer)\n      Destination
        Point Code: 32 bits (unsigned integer)\n   The Originating and Destination
        Point Code fields contains the OPC\n   and DPC from the routing label of the
        original SS7 message in Network\n   Byte Order, justified to the least significant
        bit.  Unused bits are\n   coded `0'.\n   Service Indicator: 8 bits (unsigned
        integer)\n   The Service Indicator field contains the SI field from the original\n
        \  SS7 message justified to the least significant bit.  Unused bits are\n
        \  coded `0'.\n   Network Indicator: 8 bits (unsigned integer)\n   The Network
        Indicator contains the NI field from the original SS7\n   message justified
        to the least significant bit.  Unused bits are\n   coded `0'.\n   Message
        Priority: 8 bits (unsigned integer)\n   The Message Priority field contains
        the MP bits (if any) from the\n   original SS7 message, both for ANSI-style
        and TTC-style [26] message\n   priority bits.  The MP bits are aligned to
        the least significant bit.\n   Unused bits are coded `0'.\n   Signalling Link
        Selection: 8 bits (unsigned integer)\n   The Signalling Link Selection field
        contains the SLS bits from the\n   routing label of the original SS7 message
        justified to the least\n   significant bit and in Network Byte Order.  Unused
        bits are coded\n   `0'.\n   User Protocol Data: variable-length octet string\n
        \  The User Protocol Data field contains an octet string of MTP-User\n   information
        from the original SS7 message, starting with the first\n   octet of the original
        SS7 message following the Routing Label\n   [7][8][26].\n   Correlation Id:
        32 bits (unsigned integer)\n   The Correlation Id parameter uniquely identifies
        the MSU carried in\n   the Protocol Data within an AS.  This Correlation Id
        parameter is\n   assigned by the sending M3UA.\n"
      title: 3.3.1.  Payload Data Message (DATA)
    title: 3.3.  Transfer Messages
  - contents:
    - '3.4.  SS7 Signalling Network Management (SSNM) Messages

      '
    - contents:
      - "3.4.1.  Destination Unavailable (DUNA)\n   The DUNA message is sent from
        an SGP in an SG to all concerned ASPs\n   to indicate that the SG has determined
        that one or more SS7\n   destinations are unreachable.  It is also sent by
        an SGP in response\n   to a message from the ASP to an unreachable SS7 destination.
        \ As an\n   implementation option, the SG may suppress the sending of subsequent\n
        \  \"response\" DUNA messages regarding a certain unreachable SS7\n   destination
        for a certain period to give the remote side time to\n   react.  If there
        is no alternate route via another SG, the MTP3-User\n   at the ASP is expected
        to stop traffic to the affected destination\n   via the SG as per the defined
        MTP3-User procedures.\n   The DUNA message contains the following parameters:\n
        \     Network Appearance      Optional\n      Routing Context         Conditional\n
        \     Affected Point Code     Mandatory\n      INFO String             Optional\n
        \  The format for DUNA Message parameters is as follows:\n      0                   1
        \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |         Tag = 0x0200          |          Length = 8           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      Network Appearance                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Tag = 0x0006           |             Length            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    \\                                                               \\\n
        \    /                       Routing Context                         /\n     \\
        \                                                              \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |         Tag = 0x0012          |             Length            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Mask      |                 Affected PC 1                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    \\                                                               \\\n
        \    /                              ...                              /\n     \\
        \                                                              \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Mask      |                 Affected PC n                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Tag = 0x0004         |             Length            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    \\                                                               \\\n
        \    /                          INFO String                          /\n     \\
        \                                                              \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Network Appearance: 32-bit unsigned integer\n      The description of Network
        Appearance in Section 3.3.1 applies,\n      with the exception that Network
        Appearance does not have to be the\n      first parameter in this message.\n
        \  Routing Context: n x 32 bits (unsigned integer)\n      The conditional
        Routing Context parameter contains the Routing\n      Context values associated
        with the DUNA message.  Where a Routing\n      Key has not been coordinated
        between the SGP and ASP, sending of\n      Routing Context is not required.
        \ Where multiple Routing Keys and\n      Routing Contexts are used across
        a common association, the Routing\n      Context(s) MUST be sent to identify
        the concerned traffic flows\n      for which the DUNA message applies, assisting
        in outgoing traffic\n      management and internal distribution of MTP-PAUSE
        indications to\n      MTP3-Users at the receiver.\n   Affected Point Code:
        n x 32 bits\n      The Affected Point Code parameter contains a list of Affected\n
        \     Destination Point Code fields, each a three-octet parameter to\n      allow
        for 14-, 16-, and 24-bit binary formatted SS7 Point Codes.\n      Affected
        Point Codes that are less than 24 bits are padded on the\n      left to the
        24-bit boundary.  The encoding is shown below for ANSI\n      and ITU Point
        Code examples.\n   ANSI 24-bit Point Code\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |     Mask      |    Network    |    Cluster    |     Member    |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                      |MSB-----------------------------------------LSB|\n
        \     ITU 14-bit Point Code\n        0                   1                   2
        \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |     Mask      |0 0 0 0 0 0 0 0 0 0|Zone |     Region    | SP  |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                                           |MSB--------------------LSB|\n
        \     It is optional to send an Affected Point Code parameter with more\n
        \     than one Affected PC, but it is mandatory to receive it.\n      Including
        multiple Affected PCs may be useful when receipt of an\n      MTP3 management
        message or a linkset event simultaneously affects\n      the availability
        status of a list of destinations at an SG.\n   Mask: 8 bits (unsigned integer)\n
        \     The Mask field can be used to identify a contiguous range of\n      Affected
        Destination Point Codes.  Identifying a contiguous range\n      of Affected
        DPCs may be useful when receipt of an MTP3 management\n      message or a
        linkset event simultaneously affects the availability\n      status of a series
        of destinations at an SG.\n      The Mask parameter is an integer representing
        a bit mask that can\n      be applied to the related Affected PC field.  The
        bit mask\n      identifies how many bits of the Affected PC field are significant\n
        \     and which are effectively \"wildcarded\".  For example, a mask of\n
        \     \"8\" indicates that the last eight bits of the PC are \"wildcarded\".\n
        \     For an ANSI 24-bit Affected PC, this is equivalent to signalling\n      that
        all PCs in an ANSI Cluster are unavailable.  A mask of \"3\"\n      indicates
        that the last three bits of the PC are \"wildcarded\".\n      For a 14-bit
        ITU Affected PC, this is equivalent to signaling that\n      an ITU Region
        is unavailable.  A mask value equal (or greater\n      than) the number of
        bits in the PC indicates that the entire\n      network appearance is affected;
        this is used to indicate network\n      isolation to the ASP.\n   INFO String:
        variable length\n      The optional INFO String parameter can carry any meaningful
        UTF-8\n      [10] character string along with the message.  Length of the
        INFO\n      String parameter is from 0 to 255 octets.  No procedures are\n
        \     presently identified for its use, but the INFO String MAY be used\n
        \     for debugging purposes.  An INFO String with a zero-length\n      parameter
        is not considered an error (a zero length parameter is\n      one in which
        the Length field in the TLV will be set to 4).\n"
      title: 3.4.1.  Destination Unavailable (DUNA)
    - contents:
      - "3.4.2.  Destination Available (DAVA)\n   The DAVA message is sent from an
        SGP to all concerned ASPs to\n   indicate that the SG has determined that
        one or more SS7 destinations\n   are now reachable (and not restricted), or
        in response to a DAUD\n   message, if appropriate.  If the ASP M3UA layer
        previously had no\n   routes to the affected destinations, the ASP MTP3-User
        protocol is\n   informed and may now resume traffic to the affected destination.
        \ The\n   ASP M3UA layer now routes the MTP3-user traffic through the SG\n
        \  initiating the DAVA message.\n   The DAVA message contains the following
        parameters:\n      Network Appearance       Optional\n      Routing Context
        \         Conditional\n      Affected Point Code      Mandatory\n      INFO
        String              Optional\n   The format and description of the Network
        Appearance, Routing\n   Context, Affected Point Code, and INFO String parameters
        are the same\n   as for the DUNA message (See Section 3.4.1).\n"
      title: 3.4.2.  Destination Available (DAVA)
    - contents:
      - "3.4.3.  Destination State Audit (DAUD)\n   The DAUD message MAY be sent from
        the ASP to the SGP to audit the\n   availability/congestion state of SS7 routes
        from the SG to one or\n   more affected destinations.\n   The DAUD message
        contains the following parameters:\n      Network Appearance      Optional\n
        \     Routing Context         Conditional\n      Affected Point Code     Mandatory\n
        \     INFO String             Optional\n   The format and description of DAUD
        Message parameters are the same as\n   for the DUNA message (See Section 3.4.1).\n
        \  It is recommended that during normal operation (traffic handling) the\n
        \  mask field of the Affected Point Code parameter in the DAUD message\n   be
        kept to a zero value in order to avoid SG overloading.\n"
      title: 3.4.3.  Destination State Audit (DAUD)
    - contents:
      - "3.4.4.  Signalling Congestion (SCON)\n   The SCON message can be sent from
        an SGP to all concerned ASPs to\n   indicate that an SG has determined that
        there is congestion in the\n   SS7 network to one or more destinations, or
        to an ASP in response to\n   a DATA or DAUD message, as appropriate.  For
        some MTP protocol\n   variants (e.g., ANSI MTP) the SCON message may be sent
        when the SS7\n   congestion level changes.  The SCON message MAY also be sent
        from the\n   M3UA layer of an ASP to an M3UA peer, indicating that the congestion\n
        \  level of the M3UA layer or the ASP has changed.\n     IMPLEMENTATION NOTE:
        An M3UA node may maintain a timer to control\n     congestion notification
        validity, if desired.  This timer will be\n     useful in cases where the
        peer node fails to indicate congestion\n     abatement.\n     The SCON message
        contains the following parameters:\n        Network Appearance       Optional\n
        \       Routing Context          Conditional\n        Affected Point Code
        \     Mandatory\n        Concerned Destination    Optional\n        Congestion
        Indications   Optional\n        INFO String              Optional\n     The
        format for SCON Message parameters is as follows:\n       0                   1
        \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0200          |           Length = 8          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                       Network Appearance                      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0006           |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                       Routing Context                         /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0012          |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      Mask     |                 Affected PC 1                 |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                              ...                              /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      Mask     |                 Affected PC n                 |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0206          |             Length = 8        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |    reserved   |                 Concerned DPC                 |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0205          |             Length = 8        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                   Reserved                    |  Cong.  Level  |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |            Tag = 0x0004       |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                         INFO String                           /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    The format and description of the Network Appearance, Routing\n     Context,
        Affected Point Code, and INFO String parameters are the\n     same as for
        the DUNA message (see Section 3.4.1).\n     The Affected Point Code parameter
        can be used to indicate\n     congestion of multiple destinations or ranges
        of destinations.\n   Concerned Destination: 32 bits\n      The optional Concerned
        Destination parameter is only used if the\n      SCON message is sent from
        an ASP to the SGP.  It contains the\n      point code of the originator of
        the message that triggered the\n      SCON message.  The Concerned Destination
        parameter contains one\n      Concerned Destination Point Code field, a three-octet
        parameter to\n      allow for 14-, 16-, and 24-bit binary formatted SS7 Point
        Codes.\n      A Concerned Point Code that is less than 24 bits is padded on
        the\n      left to the 24-bit boundary.  Any resulting Transfer Controlled\n
        \     (TFC) message from the SG is sent to the Concerned Point Code\n      using
        the single Affected DPC contained in the SCON message to\n      populate the
        (affected) Destination field of the TFC message\n   Congested Indications:
        32 bits\n      The optional Congestion Indications parameter contains a\n
        \     Congestion Level field.  This optional parameter is used to\n      communicate
        congestion levels in national MTP networks with\n      multiple congestion
        thresholds, such as in ANSI MTP3.  For MTP\n      congestion methods without
        multiple congestion levels (e.g., the\n      ITU international method) the
        parameter is not included.\n   Congestion Level field: 8 bits (unsigned integer)\n
        \     The Congestion Level field, associated with all of the Affected\n      DPC(s)
        in the Affected Destinations parameter, contains one of the\n      following
        values:\n         0     No Congestion or Undefined\n         1     Congestion
        Level 1\n         2     Congestion Level 2\n         3     Congestion Level
        3\n      The congestion levels are defined in the congestion method in the\n
        \     appropriate national MTP recommendations [7,8].\n"
      title: 3.4.4.  Signalling Congestion (SCON)
    - contents:
      - "3.4.5.  Destination User Part Unavailable (DUPU)\n   The DUPU message is
        used by an SGP to inform concerned ASPs that a\n   remote peer MTP3-User Part
        (e.g., ISUP or SCCP) at an SS7 node is\n   unavailable.\n   The DUPU message
        contains the following parameters:\n      Network Appearance       Optional\n
        \     Routing Context          Conditional\n      Affected Point Code      Mandatory\n
        \     User/Cause               Mandatory\n      INFO String              Optional\n
        \  The format for DUPU message parameters is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0200          |             Length = 8        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                      Network Appearance                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |        Tag = 0x0006           |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                       Routing Context                         /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0012          |          Length = 8           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |   Mask = 0    |                  Affected PC                  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0204          |          Length = 8           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |             Cause             |            User               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0004          |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                          INFO String                          /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  User/Cause: 32 bits\n      The Unavailability Cause and MTP3-User Identity
        fields, associated\n      with the Affected PC in the Affected Point Code
        parameter, are\n      encoded as follows:\n   Unavailability Cause field:
        16 bits (unsigned integer)\n      The Unavailability Cause parameter provides
        the reason for the\n      unavailability of the MTP3-User.  The valid values
        for the\n      Unavailability Cause parameter are shown in the following table.\n
        \     The values agree with those provided in the SS7 MTP3 User Part\n      Unavailable
        message.  Depending on the MTP3 protocol used in the\n      Network Appearance,
        additional values may be used; the\n      specification of the relevant MTP3
        protocol variant/version\n      recommendation is definitive.\n         0
        \        Unknown\n         1         Unequipped Remote User\n         2         Inaccessible
        Remote User\n   MTP3-User Identity field: 16 bits (unsigned integer)\n      The
        MTP3-User Identity describes the specific MTP3-User that is\n      unavailable
        (e.g., ISUP, SCCP, etc.).  Some of the valid values\n      for the MTP3-User
        Identity are shown below.  The values align with\n      those provided in
        the SS7 MTP3 User Part Unavailable message and\n      Service Indicator.  Depending
        on the MTP3 protocol variant/version\n      used in the Network Appearance,
        additional values may be used.\n      The relevant MTP3 protocol variant/version
        recommendation is\n      definitive.\n          0 to 2   Reserved\n             3
        \    SCCP\n             4     TUP\n             5     ISUP\n          6 to
        8   Reserved\n             9     Broadband ISUP\n            10     Satellite
        ISUP\n            11     Reserved\n            12     AAL type 2 Signalling\n
        \           13     Bearer Independent Call Control (BICC)\n            14
        \    Gateway Control Protocol\n            15     Reserved\n      The format
        and description of the Affected Point Code parameter\n      are the same as
        for the DUNA message (see Section 3.4.1.) except\n      that the Mask field
        is not used and only a single Affected DPC is\n      included.  Ranges and
        lists of Affected DPCs cannot be signaled in\n      a DUPU message, but this
        is consistent with UPU operation in the\n      SS7 network.  The Affected
        Destinations parameter in an MTP3 User\n      Part Unavailable message (UPU)
        received by an SGP from the SS7\n      network contains only one destination.\n
        \     The format and description of the Network Appearance, Routing\n      Context,
        and INFO String parameters are the same as for the DUNA\n      message (see
        Section 3.4.1).\n"
      title: 3.4.5.  Destination User Part Unavailable (DUPU)
    - contents:
      - "3.4.6.  Destination Restricted (DRST)\n      The DRST message is optionally
        sent from the SGP to all concerned\n      ASPs to indicate that the SG has
        determined that one or more SS7\n      destinations are now restricted from
        the point of view of the SG,\n      or in response to a DAUD message, if appropriate.
        \ The M3UA layer\n      at the ASP is expected to send traffic to the affected
        destination\n      via an alternate SG with a route of equal priority, but
        only if\n      such an alternate route exists and is available.  If the affected\n
        \     destination is currently considered unavailable by the ASP, The\n      MTP3-User
        should be informed that traffic to the affected\n      destination can be
        resumed.  In this case, the M3UA layer should\n      route the traffic through
        the SG initiating the DRST message.\n      This message is optional for the
        SG to send, and it is optional\n      for the ASP to act on any information
        received in the message.  It\n      is for use in the \"STP\" case described
        in Section 1.4.1.\n      The DRST message contains the following parameters:\n
        \        Network Appearance       Optional\n         Routing Context          Conditional\n
        \        Affected Point Code      Mandatory\n         INFO String              Optional\n
        \     The format and description of the Network Appearance, Routing\n      Context,
        Affected Point Code, and INFO String parameters are the\n      same as for
        the DUNA message (see Section 3.4.1).\n"
      title: 3.4.6.  Destination Restricted (DRST)
    title: 3.4.  SS7 Signalling Network Management (SSNM) Messages
  - contents:
    - '3.5.  ASP State Maintenance (ASPSM) Messages

      '
    - contents:
      - "3.5.1.  ASP Up\n      The ASP Up message is used to indicate to a remote
        M3UA peer that\n      the adaptation layer is ready to receive any ASPSM/ASPTM
        messages\n      for all Routing Keys that the ASP is configured to serve.\n
        \     The ASP Up message contains the following parameters:\n         ASP
        Identifier                Optional\n         INFO String                   Optional\n
        \     The format for ASP Up message parameters is as follows:\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Tag = 0x0011          |           Length = 8          |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                         ASP Identifier                        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |         Tag = 0x0004          |             Length            |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      \\                                                               \\\n
        \      /                          INFO String                          /\n
        \      \\                                                               \\\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  ASP Identifier: 32-bit unsigned integer\n      The optional ASP Identifier
        parameter contains a unique value that\n      is locally significant among
        the ASPs that support an AS.  The SGP\n      should save the ASP Identifier
        to be used, if necessary, with the\n      Notify message (see Section 3.8.2).\n
        \     The format and description of the optional INFO String parameter\n      are
        the same as for the DUNA message (see Section 3.4.1).\n"
      title: 3.5.1.  ASP Up
    - contents:
      - "3.5.2.  ASP Up Acknowledgement (ASP Up Ack)\n   The ASP UP Ack message is
        used to acknowledge an ASP Up message\n   received from a remote M3UA peer.\n
        \  The ASP Up Ack message contains the following parameters:\n        ASP
        Identifier                Optional\n        INFO String                   Optional\n
        \  The format for ASP Up Ack message parameters is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0011          |           Length = 8          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                         ASP Identifier                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag =0x0004           |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                          INFO String                          /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The optional ASP Identifier parameter is specifically useful for IPSP\n
        \  communication.  In that case, the IPSP answering the ASP Up message\n   MAY
        include its own ASP Identifier value.\n   The format and description of the
        optional INFO String parameter are\n   the same as for the DUNA message (see
        Section 3.4.1).  The INFO\n   String in an ASP Up Ack message is independent
        from the INFO String\n   in the ASP Up message (i.e., it does not have to
        echo back the INFO\n   String received).\n"
      title: 3.5.2.  ASP Up Acknowledgement (ASP Up Ack)
    - contents:
      - "3.5.3.  ASP Down\n   The ASP Down message is used to indicate to a remote
        M3UA peer that\n   the adaptation layer is NOT ready to receive DATA, SSNM,
        RKM, or\n   ASPTM messages.\n   The ASP Down message contains the following
        parameter:\n      INFO String    Optional\n   The format for the ASP Down
        message parameters is as follows:\n     0                   1                   2
        \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag =0x0004           |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                         INFO String                           /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format and description of the optional INFO String parameter are\n
        \  the same as for the DUNA message (see Section 3.4.1).\n"
      title: 3.5.3.  ASP Down
    - contents:
      - "3.5.4.  ASP Down Acknowledgement (ASP Down Ack)\n   The ASP Down Ack message
        is used to acknowledge an ASP Down message\n   received from a remote M3UA
        peer.\n   The ASP Down Ack message contains the following parameter:\n      INFO
        String     Optional\n   The format for the ASP Down Ack message parameters
        is as follows:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0004          |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                         INFO String                           /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format and description of the optional INFO String parameter are\n
        \  the same as for the DUNA message (See Section 3.4.1).\n   The INFO String
        in an ASP Down Ack message is independent from the\n   INFO String in the
        ASP Down message (i.e., it does not have to echo\n   back the INFO String
        received).\n"
      title: 3.5.4.  ASP Down Acknowledgement (ASP Down Ack)
    - contents:
      - "3.5.5.  Heartbeat (BEAT)\n   The BEAT message is optionally used to ensure
        that the M3UA peers are\n   still available to each other.  It is recommended
        for use when the\n   M3UA runs over a transport layer other than the SCTP,
        which has its\n   own heartbeat.\n   The BEAT message contains the following
        parameter:\n      Heartbeat Data         Optional\n   The format for the BEAT
        message is as follows:\n     0                   1                   2                   3\n
        \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0009          |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                       Heartbeat Data                          /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The Heartbeat Data parameter contents are defined by the sending\n   node.
        \ The Heartbeat Data could include, for example, a Heartbeat\n   Sequence
        Number and/or Timestamp.  The receiver of a BEAT message\n   does not process
        this field, as it is only of significance to the\n   sender.  The receiver
        MUST respond with a BEAT Ack message.\n"
      title: 3.5.5.  Heartbeat (BEAT)
    - contents:
      - "3.5.6.  Heartbeat Acknowledgement (BEAT Ack)\n   The BEAT Ack message is
        sent in response to a received BEAT message.\n   It includes all the parameters
        of the received BEAT message, without\n   any change.\n"
      title: 3.5.6.  Heartbeat Acknowledgement (BEAT Ack)
    title: 3.5.  ASP State Maintenance (ASPSM) Messages
  - contents:
    - '3.6.  Routing Key Management (RKM) Messages [Optional]

      '
    - contents:
      - "3.6.1.  Registration Request (REG REQ)\n   The REG REQ message is sent by
        an ASP to indicate to a remote M3UA\n   peer that it wishes to register one
        or more given Routing Keys with\n   the remote peer.  Typically, an ASP would
        send this message to an SGP\n   and expect to receive a REG RSP message in
        return with an associated\n   Routing Context value.\n   The REG REQ message
        contains the following parameter:\n      Routing Key           Mandatory\n
        \  One or more Routing Key parameters MAY be included.  The format for\n   the
        REG REQ message is as follows:\n     0                   1                   2
        \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |          Tag = 0x0207         |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                         Routing Key 1                         /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                              ...                              /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |          Tag = 0x0207         |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                         Routing Key n                         /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Routing Key: variable length\n      The Routing Key parameter is mandatory.
        \ The sender of this\n      message expects that the receiver of this message
        will create a\n      Routing Key entry and assign a unique Routing Context
        value to it,\n      if the Routing Key entry does not already exist.\n      The
        Routing Key parameter may be present multiple times in the\n      same message.
        \ This is used to allow the registration of multiple\n      Routing Keys in
        a single message.\n   The format of the Routing Key parameter is as follows:\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                       Local-RK-Identifier                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                   Routing Context (optional)                  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                  Traffic Mode Type (optional)                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                     Destination Point Code                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                  Network Appearance (optional)                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                  Service Indicators (optional)                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |              Originating Point Code List (optional)           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                              ...                              /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                     Destination Point Code                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                  Service Indicators (optional)                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |              Originating Point Code List (optional)           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Note: The Destination Point Code, Service Indicators, and\n      Originating
        Point Code List parameters MAY be repeated as a\n      grouping within the
        Routing Key parameter, in the structure shown\n      above.\n   Local-RK-Identifier:
        32-bit unsigned integer\n      The mandatory Local-RK-Identifier field is
        used to uniquely\n      identify the registration request.  The Identifier
        value is\n      assigned by the ASP and used to correlate the response in
        an REG\n      RSP message with the original registration request.  The\n      Identifier
        value must remain unique until the REG RSP message is\n      received.\n   The
        format of the Local-RK-Identifier field is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x020a          |         Length = 8            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                  Local-RK-Identifier value                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Traffic Mode Type: 32-bit (unsigned integer)\n   The optional Traffic Mode
        Type parameter identifies the traffic mode\n   of operation of the ASP(s)
        within an Application Server.  The format\n   of the Traffic Mode Type Identifier
        is as follows:\n     0                   1                   2                   3\n
        \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x000b          |         Length = 8            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                       Traffic Mode Type                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The valid values for Traffic Mode Type are shown in the following\n   table:\n
        \        1     Override\n         2     Loadshare\n         3     Broadcast\n
        \  Destination Point Code\n         The Destination Point Code parameter is
        mandatory, and it\n         identifies the Destination Point Code of incoming
        SS7 traffic\n         for which the ASP is registering.  For an alias point
        code\n         configuration, the DPC parameter would be repeated for each\n
        \        point code.  The format is the same as described for the\n         Affected
        Destination parameter in the DUNA message (see Section\n         3.4.1).  Its
        format is:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x020b          |         Length = 8            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |    Mask = 0   |            Destination Point Code             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Network Appearance\n      The optional Network Appearance parameter field
        identifies the SS7\n      network context for the Routing Key, and it has
        the same format as\n      in the DATA message (see Section 3.3.1) with the
        exception that it\n      does not have to be the first parameter in the message.
        \ If the\n      Network Appearance is not specified and the Routing Key applies
        to\n      all Network Appearances, then this Routing Key MUST be the only\n
        \     one registered for the association; that is, Routing Context is\n      implied,
        and DATA and SSNM messages are discriminated on Network\n      Appearance
        rather than on Routing Context.  Where Network\n      Appearance is not specified
        and there is only one Network\n      Appearance, then Network Appearance is
        implied.  Its format is:\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0200          |         Length = 8            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                     Network Appearance                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Service Indicators (SI): n X 8-bit integers\n      The optional SI [7,8]
        field contains one or more Service\n      Indicators from the values described
        in the MTP3-User Identity\n      field of the DUPU message.  The absence of
        the SI parameter in the\n      Routing Key indicates the use of any SI value,
        excluding of course\n      MTP management.  Where an SI parameter does not
        contain a multiple\n      of four SIs, the parameter is padded out to 32-byte
        alignment.\n      The SI format is:\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x020c          |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      SI #1    |     SI #2     |    SI #3      |    SI #4      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     /                              ...                              /\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      SI #n    |             0 Padding, if necessary           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  OPC List\n      The Originating Point Code List parameter contains one
        or more SS7\n      OPC entries, and its format is the same as for the Destination\n
        \     Point Code parameter.  The absence of the OPC List parameter in\n      the
        Routing Key indicates the use of any OPC value.\n       0                   1
        \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x020e          |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      Mask     |          Origination Point Code #1            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      Mask     |          Origination Point Code #2            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     /                              ...                              /\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |      Mask     |          Origination Point Code #n            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 3.6.1.  Registration Request (REG REQ)
    - contents:
      - "3.6.2.  Registration Response (REG RSP)\n   The REG RSP message is used as
        a response to the REG REQ message from\n   a remote M3UA peer.  It contains
        indications of success/failure for\n   registration requests and returns a
        unique Routing Context value for\n   successful registration requests, to
        be used in subsequent M3UA\n   Traffic Management protocol.\n   The REG RSP
        message contains the following parameter:\n   Registration Result   Mandatory\n
        \  One or more Registration Result parameters MUST be included.  The\n   format
        for the REG RSP message is as follows:\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag = 0x0208         |              Length           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                    Registration Result 1                      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                              ...                              /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           Tag = 0x0208        |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                    Registration Result n                      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Registration Results\n      The Registration Result parameter contains
        the registration result\n      for a single Routing Key in an REG REQ message.
        \ The number of\n      results in a single REG RSP message MUST be anywhere
        from one to\n      the total number of number of Routing Key parameters found
        in the\n      corresponding REG REQ message.  Where multiple REG RSP messages\n
        \     are used in reply to REG REQ message, a specific result SHOULD be\n
        \     in only one REG RSP message.  The format of each result is as\n      follows:\n
        \      0                   1                   2                   3\n       0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x020a        |          Length = 8             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                  Local-RK-Identifier value                    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           Tag = 0x0212      |          Length = 8             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                      Registration Status                      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           Tag = 0x0006      |          Length = 8             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        Routing Context                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Local-RK-Identifier: 32-bit integer\n      The Local-RK-Identifier contains
        the same value as found in the\n      matching Routing Key parameter found
        in the REG REQ message (See\n      Section 3.6.1).\n   Registration Status:
        32-bit integer\n      The Registration Result Status field indicates the success
        or the\n      reason for failure of a registration request.\n      Its values
        may be:\n        0           Successfully Registered\n        1           Error
        - Unknown\n        2           Error - Invalid DPC\n        3           Error
        - Invalid Network Appearance\n        4           Error - Invalid Routing
        Key\n        5           Error - Permission Denied\n        6           Error
        - Cannot Support Unique Routing\n        7           Error - Routing Key not
        Currently Provisioned\n        8           Error - Insufficient Resources\n
        \       9           Error - Unsupported RK parameter Field\n        10          Error
        - Unsupported/Invalid Traffic Handling Mode\n        11          Error - Routing
        Key Change Refused\n        12          Error - Routing Key Already Registered\n
        \  Routing Context: 32-bit integer\n      The Routing Context field contains
        the Routing Context value for\n      the associated Routing Key if the registration
        was successful.  It\n      is set to \"0\" if the registration was not successful.\n"
      title: 3.6.2.  Registration Response (REG RSP)
    - contents:
      - "3.6.3.  Deregistration Request (DEREG REQ)\n   The DEREG REQ message is sent
        by an ASP to indicate to a remote M3UA\n   peer that it wishes to deregister
        a given Routing Key.  Typically, an\n   ASP would send this message to an
        SGP and expects to receive a DEREG\n   RSP message in return with the associated
        Routing Context value.\n   The DEREG REQ message contains the following parameters:\n
        \     Routing Context       Mandatory\n   The format for the DEREG REQ message
        is as follows:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0006          |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                       Routing Context                         /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Routing Context: n X 32-bit integers\n      The Routing Context parameter
        contains (a list of) integers\n      indexing the Application Server traffic
        that the sending ASP is\n      currently registered to receive from the SGP
        but now wishes to\n      deregister.\n"
      title: 3.6.3.  Deregistration Request (DEREG REQ)
    - contents:
      - "3.6.4.  Deregistration Response (DEREG RSP)\n   The DEREG RSP message is
        used as a response to the DEREG REQ message\n   from a remote M3UA peer.\n
        \  The DEREG RSP message contains the following parameter:\n      Deregistration
        Result    Mandatory\n   One or more Deregistration Result parameters MUST
        be included.  The\n   format for the DEREG RSP message is as follows:\n       0
        \                  1                   2                   3\n       0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag = 0x0209         |               Length          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                   Deregistration Result 1                     |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                              ...                              /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           Tag = 0x0209        |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                   Deregistration Result n                     |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Deregistration Results\n      The Deregistration Result parameter contains
        the deregistration\n      status for a single Routing Context in a DEREG REQ
        message.  The\n      number of results in a single DEREG RSP message MAY be
        anywhere\n      from one to the total number of number of Routing Context
        values\n      found in the corresponding DEREG REQ message.\n      Where multiple
        DEREG RSP messages are used in reply to DEREG REQ\n      message, a specific
        result SHOULD be in only one DEREG RSP\n      message.  The format of each
        result is as follows:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0006          |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        Routing Context                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0213          |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                     Deregistration Status                     |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Routing Context: 32-bit integer\n      The Routing Context field contains
        the Routing Context value of\n      the matching Routing Key to deregister,
        as found in the DEREG REQ\n      message.\n      Deregistration Status: 32-bit
        integer\n      The Deregistration Result Status field indicates the success
        or\n      the reason for failure of the deregistration.\n      Its values
        may be:\n         0           Successfully Deregistered\n         1           Error
        - Unknown\n         2           Error - Invalid Routing Context\n         3
        \          Error - Permission Denied\n         4           Error - Not Registered\n
        \        5           Error - ASP Currently Active for Routing Context\n"
      title: 3.6.4.  Deregistration Response (DEREG RSP)
    title: 3.6.  Routing Key Management (RKM) Messages [Optional]
  - contents:
    - '3.7.  ASP Traffic Maintenance (ASPTM) Messages

      '
    - contents:
      - "3.7.1.  ASP Active\n   The ASP Active message is sent by an ASP to indicate
        to a remote M3UA\n   peer that it is ready to process signalling traffic for
        a particular\n   Application Server.  The ASP Active message affects only
        the ASP\n   state for the Routing Keys identified by the Routing Contexts,
        if\n   present.\n   The ASP Active message contains the following parameters:\n
        \     Traffic Mode Type     Optional\n      Routing Context       Optional\n
        \     INFO String           Optional\n   The format for the ASP Active message
        is as follows:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x000b          |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                      Traffic Mode Type                        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0006          |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                       Routing Context                         /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0004          |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                          INFO String                          /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Traffic Mode Type: 32-bit (unsigned integer)\n      The Traffic Mode Type
        parameter identifies the traffic mode of\n      operation of the ASP within
        an AS.  The valid values for Traffic\n      Mode Type are shown in the following
        table:\n         1         Override\n         2         Loadshare\n         3
        \        Broadcast\n      Within a particular Routing Context, Override, Loadshare,
        and\n      Broadcast SHOULD NOT be mixed.  The Override value indicates that\n
        \     the ASP is operating in Override mode, in which the ASP takes over\n
        \     all traffic in an Application Server (i.e., primary/backup\n      operation),
        overriding any currently active ASPs in the AS.  In\n      Loadshare mode,
        the ASP will share in the traffic distribution\n      with any other currently
        active ASPs.  In Broadcast mode, the ASP\n      will receive the same messages
        as any other currently active ASP.\n   Routing Context: n X 32-bit integers\n
        \     The optional Routing Context parameter contains (a list of)\n      integers
        indexing the Application Server traffic that the sending\n      ASP is configured/registered
        to receive.\n      There is a one-to-one relationship between an index entry
        and an\n      SGP Routing Key or AS Name.  Because an AS can only appear in
        one\n      Network Appearance, the Network Appearance parameter is not\n      required
        in the ASP Active message.\n      An Application Server Process may be configured
        to process traffic\n      for more than one logical Application Server.  From
        the\n      perspective of an ASP, a Routing Context defines a range of\n      signalling
        traffic that the ASP is currently configured to receive\n      from the SGP.
        \ For example, an ASP could be configured to support\n      signalling for
        multiple MTP3-Users, identified by separate SS7\n      DPC/OPC/SI ranges.\n
        \  The format and description of the optional INFO String parameter are\n
        \  the same as for the DUNA message (see Section 3.4.1).\n"
      title: 3.7.1.  ASP Active
    - contents:
      - "3.7.2.  ASP Active Acknowledgement (ASP Active Ack)\n   The ASP Active Ack
        message is used to acknowledge an ASP Active\n   message received from a remote
        M3UA peer.\n   The ASP Active Ack message contains the following parameters:\n
        \     Traffic Mode Type     Optional\n      Routing Context       Optional\n
        \     INFO String           Optional\n   The format for the ASP Active Ack
        message is as follows:\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |           Tag = 0x000b        |          Length = 8           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      Traffic Mode Type                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |            Tag = 0x0006       |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    \\                                                               \\\n
        \    /                       Routing Context                         /\n     \\
        \                                                              \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |           Tag = 0x0004        |             Length            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    \\                                                               \\\n
        \    /                          INFO String                          /\n     \\
        \                                                              \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format and description of the optional INFO String parameter are\n
        \  the same as for the DUNA message (see Section 3.4.1).\n   The INFO String
        in an ASP Active Ack message is independent from the\n   INFO String in the
        ASP Active message (i.e., it does not have to echo\n   back the INFO String
        received).\n   The format of the Traffic Mode Type and Routing Context parameters
        is\n   the same as for the ASP Active message.  (See Section 3.7.1.)\n"
      title: 3.7.2.  ASP Active Acknowledgement (ASP Active Ack)
    - contents:
      - "3.7.3.  ASP Inactive\n   The ASP Inactive message is sent by an ASP to indicate
        to a remote\n   M3UA peer that it is no longer an active ASP to be used from
        within a\n   list of ASPs.  The ASP Inactive message affects only the ASP
        state in\n   the Routing Keys identified by the Routing Contexts, if present.\n
        \  The ASP Inactive message contains the following parameters:\n      Routing
        Context         Optional\n      INFO String             Optional\n   The format
        for the ASP Inactive message parameters is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0006          |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                       Routing Context                         /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0004          |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                          INFO String                          /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format and description of the optional Routing Context and INFO\n   String
        parameters are the same as for the ASP Active message (see\n   Section 3.5.5.)\n"
      title: 3.7.3.  ASP Inactive
    - contents:
      - "3.7.4.  ASP Inactive Acknowledgement (ASP Inactive Ack)\n   The ASP Inactive
        Ack message is used to acknowledge an ASP Inactive\n   message received from
        a remote M3UA peer.\n   The ASP Inactive Ack message contains the following
        parameters:\n      Routing Context       Optional\n      INFO String           Optional\n
        \  The format for the ASP Inactive Ack message is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0006          |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                       Routing Context                         /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Tag = 0x0004          |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   \\                                                               \\\n
        \   /                          INFO String                          /\n    \\
        \                                                              \\\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format and description of the optional INFO String parameter are\n
        \  the same as for the DUNA message (see Section 3.4.1).\n   The INFO String
        in an ASP Inactive Ack message is independent from\n   the INFO String in
        the ASP Inactive message (i.e., it does not have\n   to echo back the INFO
        String received).\n   The format of the Routing Context parameter is the same
        as for the\n   ASP Inactive message.  (see Section 3.7.3.)\n"
      title: 3.7.4.  ASP Inactive Acknowledgement (ASP Inactive Ack)
    title: 3.7.  ASP Traffic Maintenance (ASPTM) Messages
  - contents:
    - '3.8.  Management (MGMT) Messages

      '
    - contents:
      - "3.8.1.  Error\n   The Error message is used to notify a peer of an error
        event\n   associated with an incoming message.  For example, the message type\n
        \  might be unexpected given the current state, or a parameter value\n   might
        be invalid.  Error messages MUST NOT be generated in response\n   to other
        Error messages.\n   The Error message contains the following parameters:\n
        \     Error Code                 Mandatory\n      Routing Context            Mandatory*\n
        \     Network Appearance         Mandatory*\n      Affected Point Code        Mandatory*\n
        \     Diagnostic Information     Conditional\n      * Only mandatory for specific
        Error Codes.\n   The format for the Error message is as follows:\n       0
        \                  1                   2                   3\n       0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag = 0x000c         |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                          Error Code                           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag = 0x0006         |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                        Routing Context                        /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag - 0x0012         |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |     Mask      |             Affected Point Code  1            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                                ...                            /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |     Mask      |             Affected Point Code  n            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           Tag = 0x0200        |           Length = 8          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                      Network Appearance                       |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |          Tag = 0x0007         |            Length             |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                     Diagnostic Information                    /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Error Code: 32 bits (unsigned integer)\n      The Error Code parameter
        indicates the reason for the Error\n      Message.  The Error parameter value
        can be one of the following\n      values:\n      0x01      Invalid Version\n
        \     0x02      Not Used in M3UA\n      0x03      Unsupported Message Class\n
        \     0x04      Unsupported Message Type\n      0x05      Unsupported Traffic
        Mode Type\n      0x06      Unexpected Message\n      0x07      Protocol Error\n
        \     0x08      Not Used in M3UA\n      0x09      Invalid Stream Identifier\n
        \     0x0a      Not Used in M3UA\n      0x0b      Not Used in M3UA\n      0x0c
        \     Not Used in M3UA\n      0x0d      Refused - Management Blocking\n      0x0e
        \     ASP Identifier Required\n      0x0f      Invalid ASP Identifier\n      0x10
        \     Not Used in M3UA\n      0x11      Invalid Parameter Value\n      0x12
        \     Parameter Field Error\n      0x13      Unexpected Parameter\n      0x14
        \     Destination Status Unknown\n      0x15      Invalid Network Appearance\n
        \     0x16      Missing Parameter\n      0x17      Not Used in M3UA\n      0x18
        \     Not Used in M3UA\n      0x19      Invalid Routing Context\n      0x1a
        \     No Configured AS for ASP\n   The \"Invalid Version\" error is sent if
        a message with an unsupported\n   version is received.  The receiving end
        responds with an Error\n   message, indicating the version the receiving node
        supports, and\n   notifies layer management.\n   The \"Unsupported Message
        Class\" error is sent if a message with an\n   unexpected or unsupported Message
        Class is received.  For this error,\n   the Diagnostic Information parameter
        MUST be included with the first\n   40 octets of the offending message.\n
        \  The \"Unsupported Message Type\" error is sent if a message with an\n   unexpected
        or unsupported Message Type is received.  For this error,\n   the Diagnostic
        Information parameter MUST be included with the first\n   40 octets of the
        offending message.\n   The \"Unsupported Traffic Mode Type\" error is sent
        by a SGP if an ASP\n   sends an ASP Active message with an unsupported Traffic
        Mode Type or\n   a Traffic Mode Type that is inconsistent with the presently\n
        \  configured mode for the Application Server.  An example would be a\n   case
        in which the SGP did not support loadsharing.\n   The \"Unexpected Message\"
        error MAY be sent if a defined and\n   recognized message is received that
        is not expected in the current\n   state (in some cases, the ASP may optionally
        silently discard the\n   message and not send an Error message).  For example,
        silent discard\n   is used by an ASP if it received a DATA message from an
        SGP while it\n   was in the ASP-INACTIVE state.  If the Unexpected message
        contained\n   Routing Contexts, the Routing Contexts SHOULD be included in
        the\n   Error message.\n   The \"Protocol Error\" error is sent for any protocol
        anomaly (i.e.,\n   receipt of a parameter that is syntactically correct but
        unexpected\n   in the current situation).\n   The \"Invalid Stream Identifier\"
        error is sent if a message is\n   received on an unexpected SCTP stream (e.g.,
        a Management message was\n   received on a stream other than \"0\").\n   The
        \"Refused - Management Blocking\" error is sent when an ASP Up or\n   ASP
        Active message is received and the request is refused for\n   management reasons
        (e.g., management lockout).  If this error is in\n   response to an ASP Active
        message, the Routing Context(s) in the ASP\n   Active message SHOULD be included
        in the Error message.\n   The \"ASP Identifier Required\" error is sent by
        an SGP in response to\n   an ASP Up message that does not contain an ASP Identifier
        parameter\n   when the SGP requires one.  The ASP SHOULD resend the ASP Up
        message\n   with an ASP Identifier.\n   The \"Invalid ASP Identifier\" error
        is sent by an SGP in response to\n   an ASP Up message with an invalid (i.e.,
        non-unique) ASP Identifier.\n   The \"Invalid Parameter Value\" error is sent
        if a message is received\n   with an invalid parameter value (e.g., a DUPU
        message was received\n   with a Mask value other than \"0\".\n   The \"Parameter
        Field Error\" would be sent if a message is received\n   with a parameter
        having a wrong length field.\n   The \"Unexpected Parameter\" error would
        be sent if a message contains\n   an invalid parameter.\n   The \"Destination
        Status Unknown\" error MAY be sent if a DAUD is\n   received at an SG enquiring
        of the availability/congestion status of\n   a destination and the SG does
        not wish to provide the status (e.g.,\n   the sender is not authorized to
        know the status).  For this error,\n   the invalid or unauthorized Point Code(s)
        MUST be included along with\n   the Network Appearance and/or Routing Context
        associated with the\n   Point Code(s).\n   The \"Invalid Network Appearance\"
        error is sent by an SGP if an ASP\n   sends a message with an invalid (unconfigured)
        Network Appearance\n   value.  For this error, the invalid (unconfigured)
        Network Appearance\n   MUST be included in the Network Appearance parameter.\n
        \  The \"Missing Parameter\" error would be sent if a mandatory parameter\n
        \  were not included in a message.  This error is also sent if a\n   conditional
        parameter is not included in the message but is required\n   in the context
        of the received message.\n   The \"Invalid Routing Context\" error is sent
        if a message is received\n   from a peer with an invalid (unconfigured) Routing
        Context value.\n   For this error, the invalid Routing Context(s) MUST be
        included in\n   the Error message.\n   The \"No Configured AS for ASP\" error
        is sent if a message is received\n   from a peer without a Routing Context
        parameter and it is not known\n   by configuration data which Application
        Servers are referenced.\n   Diagnostic Information: variable length\n      When
        included, the optional Diagnostic Information can be any\n      information
        germane to the error condition, to assist in\n      identification of the
        error condition.  The Diagnostic Information\n      SHOULD contain the offending
        message.  A Diagnostic Information\n      parameter with a zero length parameter
        is not considered an error\n      (this means that the Length field in the
        TLV will be set to 4).\n"
      title: 3.8.1.  Error
    - contents:
      - "3.8.2.  Notify\n   The Notify message used to provide an autonomous indication
        of M3UA\n   events to an M3UA peer.\n   The Notify message contains the following
        parameters:\n      Status                     Mandatory\n      ASP Identifier
        \            Conditional\n      Routing Context            Optional\n      INFO
        String                Optional\n   The format for the Notify message is as
        follows:\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x000d           |          Length = 8           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Status Type            |       Status Information      |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0011           |             Length = 8        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                        ASP Identifier                         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |        Tag = 0x0006           |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                       Routing Context                         /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         Tag = 0x0004          |             Length            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     \\                                                               \\\n
        \     /                          INFO String                          /\n
        \     \\                                                               \\\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Status Type: 16 bits (unsigned integer)\n      The Status Type parameter
        identifies the type of the Notify\n      message.  The following are the valid
        Status Type values:\n         1     Application Server State Change (AS-State_Change)\n
        \        2     Other\n   Status Information: 16 bits (unsigned integer)\n
        \     The Status Information parameter contains more detailed\n      information
        for the notification, based on the value of the Status\n      Type.  If the
        Status Type is AS-State_Change the following Status\n      Information values
        are used:\n         1    Reserved\n         2    Application Server Inactive
        (AS-INACTIVE)\n         3    Application Server Active (AS-ACTIVE)\n         4
        \   Application Server Pending (AS-PENDING)\n      These notifications are
        sent from an SGP to an ASP upon a change\n      in status of a particular
        Application Server.  The value reflects\n      the new state of the Application
        Server.\n      If the Status Type is Other, then the following Status Information\n
        \     values are defined:\n         1    Insufficient ASP Resources Active
        in AS\n         2    Alternate ASP Active\n         3    ASP Failure\n      These
        notifications are not based on the SGP reporting the state\n      change of
        an ASP or AS.  In the Insufficient ASP Resources case,\n      the SGP is indicating
        to an ASP_INACTIVE ASP in the AS that\n      another ASP is required to handle
        the load of the AS (Loadsharing\n      or Broadcast mode).  For the Alternate
        ASP Active case, an ASP is\n      informed when an alternate ASP transitions
        to the ASP-ACTIVE state\n      in Override mode.  The ASP Identifier (if available)
        of the\n      Alternate ASP MUST be placed in the message.  For the ASP Failure\n
        \     case, the SGP is indicating to ASPs in the AS that one of the\n      ASPs
        has failed.  The ASP Identifier (if available) of the failed\n      ASP MUST
        be placed in the message.\n   The format and description of the conditional
        ASP Identifier is the\n   same as for the ASP Up message (see Section 3.5.1).
        \ The format and\n   description of the Routing Context and Info String parameters
        are the\n   same as for the ASP Active message (See Section 3.7.1)\n"
      title: 3.8.2.  Notify
    title: 3.8.  Management (MGMT) Messages
  title: 3.  M3UA Protocol Elements
- contents:
  - "4.  Procedures\n   The M3UA layer needs to respond to various local primitives
    it\n   receives from other layers, as well as to the messages that it\n   receives
    from the peer M3UA layer.  This section describes the M3UA\n   procedures in response
    to these events.\n"
  - contents:
    - '4.1.  Procedures to Support the M3UA-User

      '
    - contents:
      - "4.1.1.  Receipt of Primitives from the M3UA-User\n   On receiving an MTP-TRANSFER
        request primitive from an upper layer at\n   an ASP/IPSP, or the nodal interworking
        function at an SGP, the M3UA\n   layer sends a corresponding DATA message
        (see Section 3) to its M3UA\n   peer.  The M3UA peer receiving the DATA message
        sends an MTP-TRANSFER\n   indication primitive to the upper layer.\n   The
        M3UA message distribution function (see Section 1.4.2.1)\n   determines the
        Application Server (AS) by comparing the information\n   in the MTP-TRANSFER
        request primitive with a provisioned Routing Key.\n   From the list of ASPs
        within the AS table, an ASP in the ASP-ACTIVE\n   state is selected and a
        DATA message is constructed and issued on the\n   corresponding SCTP association.
        \ If more than one ASP is in the ASP-\n   ACTIVE state (i.e., traffic is to
        be loadshared across more than one\n   ASP), one of the ASPs in the ASP-ACTIVE
        state is selected from the\n   list.  If the ASPs are in Broadcast Mode, all
        active ASPs will be\n   selected, and the message will be sent to each of
        the active ASPs.\n   The selection algorithm is implementation dependent but
        could, for\n   example, be round robin or based on the SLS or ISUP CIC.  The\n
        \  appropriate selection algorithm must be chosen carefully, as it is\n   dependent
        on application assumptions and understanding of the degree\n   of state coordination
        between the ASP-ACTIVE ASPs in the AS.\n   In addition, the message needs
        to be sent on the appropriate SCTP\n   stream, again taking care to meet the
        message sequencing needs of the\n   signalling application.  DATA messages
        MUST be sent on an SCTP stream\n   other than stream '0'.\n   When there is
        no Routing Key match, or only a partial match, for an\n   incoming SS7 message,
        a default treatment MAY be specified.  Possible\n   solutions are to provide
        a default Application Server at the SGP that\n   directs all unallocated traffic
        to a (set of) default ASP(s), or to\n   drop the message and provide a notification
        to Layer Management in an\n   M-ERROR indication primitive.  The treatment
        of unallocated traffic\n   is implementation dependent.\n"
      title: 4.1.1.  Receipt of Primitives from the M3UA-User
    title: 4.1.  Procedures to Support the M3UA-User
  - contents:
    - "4.2.  Receipt of Primitives from the Layer Management\n   On receiving primitives
      from the local Layer Management, the M3UA\n   layer will take the requested
      action and provide an appropriate\n   response primitive to Layer Management.\n
      \  An M-SCTP_ESTABLISH request primitive from Layer Management at an ASP\n   or
      IPSP will initiate the establishment of an SCTP association.  The\n   M3UA layer
      will attempt to establish an SCTP association with the\n   remote M3UA peer
      by sending an SCTP-ASSOCIATE primitive to the local\n   SCTP layer.\n   When
      an SCTP association has been successfully established, the SCTP\n   will send
      an SCTP-COMMUNICATION_UP notification primitive to the\n   local M3UA layer.
      \ At the SGP or IPSP that initiated the request, the\n   M3UA layer will send
      an M-SCTP_ESTABLISH confirm primitive to Layer\n   Management when the association
      setup is complete.  At the peer M3UA\n   layer, an M-SCTP_ESTABLISH indication
      primitive is sent to Layer\n   Management upon successful completion of an incoming
      SCTP association\n   setup.\n   An M-SCTP_RELEASE request primitive from Layer
      Management initiates\n   the teardown of an SCTP association.  The M3UA layer
      accomplishes a\n   graceful shutdown of the SCTP association by sending an SCTP-SHUTDOWN\n
      \  primitive to the SCTP layer.\n   When the graceful shutdown of the SCTP association
      has been\n   accomplished, the SCTP layer returns an SCTP-SHUTDOWN_COMPLETE\n
      \  notification primitive to the local M3UA layer.  At the M3UA Layer\n   that
      initiated the request, the M3UA layer will send an M-\n   SCTP_RELEASE confirm
      primitive to Layer Management when the\n   association shutdown is complete.
      \ At the peer M3UA Layer, an M-\n   SCTP_RELEASE indication primitive is sent
      to Layer Management upon\n   abort or successful shutdown of an SCTP association.\n
      \  An M-SCTP_STATUS request primitive supports a Layer Management query\n   of
      the local status of a particular SCTP association.  The M3UA layer\n   simply
      maps the M-SCTP_STATUS request primitive to an SCTP-STATUS\n   primitive to
      the SCTP layer.  When the SCTP responds, the M3UA layer\n   maps the association
      status information to an M-SCTP_STATUS confirm\n   primitive.  No peer protocol
      is invoked.\n   Similar LM-to-M3UA-to-SCTP and/or SCTP-to-M3UA-to-LM primitive\n
      \  mappings can be described for the various other SCTP Upper Layer\n   primitives
      in RFC2960 [18], such as INITIALIZE, SET PRIMARY, CHANGE\n   HEARTBEAT, REQUEST
      HEARTBEAT, GET SRTT REPORT, SET FAILURE THRESHOLD,\n   SET PROTOCOL PARAMETERS,
      DESTROY SCTP INSTANCE, SEND FAILURE, and\n   NETWORK STATUS CHANGE.  Alternatively,
      these SCTP Upper Layer\n   primitives (and Status as well) can be considered,
      for modeling\n   purposes, as a Layer Management interaction directly with the
      SCTP\n   Layer.\n   M-NOTIFY indication and M-ERROR indication primitives indicate
      to\n   Layer Management the notification or error information contained in a\n
      \  received M3UA Notify or Error message, respectively.  These\n   indications
      can also be generated based on local M3UA events.\n   An M-ASP_STATUS request
      primitive supports a Layer Management query\n   of the status of a particular
      local or remote ASP.  The M3UA layer\n   responds with the status in an M-ASP_STATUS
      confirm primitive.  No\n   M3UA peer protocol is invoked.\n   An M-AS_STATUS
      request supports a Layer Management query of the\n   status of a particular
      AS.  The M3UA responds with an M-AS_STATUS\n   confirm primitive.  No M3UA peer
      protocol is invoked.\n   M-ASP_UP, M-ASP_DOWN, M-ASP_ACTIVE, and M-ASP_INACTIVE
      request\n   primitives allow Layer Management at an ASP to initiate state\n
      \  changes.  Upon successful completion, a corresponding confirm\n   primitive
      is provided by the M3UA layer to Layer Management.  If an\n   invocation is
      unsuccessful, an Error indication primitive is provided\n   in the primitive.
      \ These requests result in outgoing ASP Up, ASP\n   Down, ASP Active, and ASP
      Inactive messages to the remote M3UA peer\n   at an SGP or IPSP.\n"
    - contents:
      - "4.2.1.  Receipt of M3UA Peer Management Messages\n   Upon successful state
        changes resulting from reception of ASP Up, ASP\n   Down, ASP Active, and
        ASP Inactive messages from a peer M3UA, the\n   M3UA layer MAY invoke corresponding
        M-ASP_UP, M-ASP_DOWN, M-\n   ASP_ACTIVE, M-ASP_INACTIVE, M-AS_ACTIVE, M-AS_INACTIVE,
        and M-AS_DOWN\n   indication primitives to the local Layer Management.\n   M-NOTIFY
        indication and M-ERROR indication primitives indicate to\n   Layer Management
        the notification or error information contained in a\n   received M3UA Notify
        or Error message.  These indications can also be\n   generated based on local
        M3UA events.\n   All non-Transfer and non-SSNM messages, except BEAT and BEAT
        Ack,\n   SHOULD be sent with sequenced delivery to ensure ordering.  ASPTM\n
        \  messages MAY be sent on one of the streams used to carry the data\n   traffic
        related to the Routing Context(s), to minimize possible\n   message loss.
        \ BEAT and BEAT Ack messages MAY be sent using out-of-\n   order delivery
        and MAY be sent on any stream.\n"
      title: 4.2.1.  Receipt of M3UA Peer Management Messages
    title: 4.2.  Receipt of Primitives from the Layer Management
  - contents:
    - "4.3.  AS and ASP/IPSP State Maintenance\n   The M3UA layer on the SGP maintains
      the state of each remote ASP, in\n   each Application Server that the ASP is
      configured to receive\n   traffic, as input to the M3UA message distribution
      function.\n   Similarly, where IPSPs use M3UA in a point-to-point fashion, the
      M3UA\n   layer in an IPSP maintains the state of remote IPSPs.\n   Two IPSP
      models are defined as follows:\n   1.  IPSP Single Exchange (SE) model.  Only
      a single exchange of ASPTM\n      and ASPSM messages is needed to change the
      IPSP states.  This\n      means that a set of requests from one end and acknowledgements\n
      \     from the other will be enough.  The RK must define both sides of\n      the
      traffic flow.  Each exchange of ASPTM or ASPSM messages can be\n      initiated
      by either IPSP.  For this exchange, the initiating IPSP\n      follows the procedures
      described in Section 4.3.1.\n   2.  IPSP Double Exchange (DE) model.  A double
      exchange of ASPTM and\n      ASPSM messages is normally needed (ASPSM single
      exchange is\n      optional as a simplification).  Each exchange of ASPTM or
      ASPSM\n      messages can be initiated by either IPSP.  The RKs define the\n
      \     traffic to be directed to the peer as in the AS-SG model.\n      Therefore,
      two different RKs are usually used, one installed on\n      each peer.\n      When
      using double exchanges for ASPSM messages, the management of\n      the connection
      in the two directions is considered independent.\n      This means that connections
      from IPSP-A to IPSP-B is handled\n      independently of connections from IPSP-B
      to IPSP-A.  Therefore, it\n      could happen that only one of the two directions
      is activated or\n      closed, while the other remains in the same state as
      it was.\n      When using single exchange of ASPSM, what is seen as a\n      simplification,
      only the activation phase (ASPTM messages) is\n      independent for each of
      the two directions.  In this case, it\n      could happen that the sending of
      the ASPSM from IPSP-A or IPSP-B\n      could have an effect in the whole communication,
      as it is defined\n      in the standard SG-AS communication.\n      Because
      of these differences, there should be an agreement on the\n      way ASPSM messages
      are being handled before starting DE-IPSP\n      communication.\n   In order
      to ensure interoperability, an M3UA implementation\n   supporting IPSP communication
      MUST support the IPSP SE model and MAY\n   implement the IPSP DE model.\n   In
      Section 4.3.1, ASP/IPSP States are described.\n   In Section 4.3.2, only the
      SGP-ASP scenario is described.  All of the\n   procedures referring to an AS
      served by ASPs are also applicable to\n   ASes served by IPSPs.\n   In Section
      4.3.3, only the Management procedures for the SGP-ASP\n   scenario are described.
      \ The corresponding Management procedures for\n   IPSPs are directly implied.\n
      \  The remaining sections contain specific IPSP Considerations\n   subsections.\n"
    - contents:
      - "4.3.1.  ASP/IPSP States\n   The state of each remote ASP/IPSP, in each AS
        that it is configured\n   to operate, is maintained in the peer M3UA layer
        (i.e., in the SGP or\n   peer IPSP, respectively).  The state of a particular
        ASP/IPSP in a\n   particular AS changes due to events.  The events include:\n
        \  * Receipt of messages from the peer M3UA layer at the ASP/IPSP;\n   * Receipt
        of some messages from the peer M3UA layer at other\n     ASPs/IPSPs in the
        AS (e.g., ASP Active message indicating\n     \"Override\");\n   * Receipt
        of indications from the SCTP layer; and\n   * Local Management intervention.\n
        \  The ASP/C-IPSP/D-IPSP state transition diagram is shown in Figure 3.\n
        \  The possible states of an ASP/D-IPSP/C-IPSP are:\n   ASP-DOWN: The remote
        M3UA peer at the ASP/IPSP is unavailable, and/or\n   the related SCTP association
        is down.  Initially, all ASPs/IPSPs will\n   be in this state.  An ASP/IPSP
        in this state SHOULD NOT be sent any\n   M3UA messages, with the exception
        of Heartbeat, ASP Down Ack, and\n   Error messages.\n   ASP-INACTIVE: The
        remote M3UA peer at the ASP/IPSP is available (and\n   the related SCTP association
        is up), but application traffic is\n   stopped.  In this state, the ASP/IPSP
        SHOULD NOT be sent any DATA or\n   SSNM messages for the AS for which the
        ASP/IPSP is inactive.\n   ASP-ACTIVE: The remote M3UA peer at the ASP/IPSP
        is available and\n   application traffic is active (for a particular Routing
        Context or\n   set of Routing Contexts).\n   SCTP CDI: The SCTP CDI denotes
        the local SCTP layer's Communication\n   Down Indication to the Upper Layer
        Protocol (M3UA) on an SGP.  The\n   local SCTP layer will send this indication
        when it detects the loss\n   of connectivity to the ASP's peer SCTP layer.
        \ SCTP CDI is understood\n   as either a SHUTDOWN_COMPLETE notification or
        a COMMUNICATION_LOST\n   notification from the SCTP layer.\n   SCTP RI: The
        local SCTP layer's Restart indication to the upper-layer\n   protocol (M3UA)
        on an SG.  The local SCTP will send this indication\n   when it detects a
        restart from the peer SCTP layer.\n                                      +--------------+\n
        \                                     |              |\n               +----------------------|
        \ ASP-ACTIVE  |\n               |   Other ASP/ +-------|              |\n
        \              |   IPSP in AS |       +--------------+\n               |    Overrides
        |           ^     |\n               |              |    ASPAC/ |     | ASPIA/\n
        \              |              |[ASPAC-Ack]|     | [ASPIA-Ack]\n               |
        \             |           |     v\n               |              |       +--------------+\n
        \              |              |       |              |\n               |              +------>|
        ASP-INACTIVE |\n               |                      |              |\n               |
        \                     +--------------+\n               |                          ^
        \    |\n        ASPDN/ |                          |     | ASPDN /\n   [ASPDN-Ack/]|
        \                  ASPUP/ |     | [ASPDN-Ack /]\n     SCTP CDI/ |              [ASPUP-Ack]
        |     | SCTP CDI/\n     SCTP RI   |                          |     | SCTP
        RI\n               |                          |     v\n               |                      +--------------+\n
        \              |                      |              |\n               +--------------------->|
        \  ASP-DOWN   |\n                                      |              |\n
        \                                     +--------------+\n              Figure
        3: ASP State Transition Diagram, per AS\n   The transitions are depicted as
        a result of the reception of ASP*M\n   messages or other events.  In some
        of the transitions, there are some\n   messages in brackets.  They mean that
        for a given node the state\n   transition will be different, depending on
        its role: whether or not\n   it is generating the ASP*M request message (i.e.,
        ASPUP, ASPAC, ASPIA\n   or ASPDN) or simply receiving it.  In a peer-to-peer
        based\n   architecture (IPSP), this role may change between the peers.\n   The
        transitions not in brackets are valid to track the states of ASPs\n   and
        IPSPs that send an ASP*M request message at the peer node.\n   The transition
        in brackets may be used in an ASP or in the IPSP that\n   receives an ASP*M
        request to track the peer SGP/IPSP states,\n   respectively.  There may be
        an SGP per AS state machine at ASPs.\n   Then, the transitions in brackets
        can be used for the IPSP DE model\n   communication (DE-IPSPs) and are related
        to the special cases when\n   just one ASP*M messages exchange is needed,
        as follows:\n   - ASPSM messages.  When ASPSM messages are exchanged using
        only a\n     single exchange (only one request and one acknowledgement).\n
        \    Example (see Section 5.6.2): Whenever a DE-IPSP is taking the\n     leading
        role to start communication to a peer DE-IPSP, it sends an\n     ASP Up message
        to the peer DE-IPSP.  The peer MAY consider the\n     initiating DE-IPSPs
        to be in ASP-INACTIVE state, as it already sent\n     a message, and answer
        back with ASP Up Ack.  Upon receipt of this\n     answer by the initiating
        DE-IPSP, it also MAY consider the peer to\n     be in ASP-INACTIVE state,
        since it did respond.  Therefore, a\n     second ASP Up message exchange to
        be started by the peer DE-IPSP\n     could be avoided.  In this case, the
        receipt of ASP Up Ack will\n     turn into a state change.\n   - ASPTM messages.
        \ When sending ASPTM messages to activate/deactivate\n     all the traffic
        independently of routing keys by not specifying any\n     RC, a single exchange
        could be sufficient.\n"
      title: 4.3.1.  ASP/IPSP States
    - contents:
      - "4.3.2.  AS States\n   The state of the AS is maintained in the M3UA layer
        on the SGPs.  The\n   state of an AS changes due to events.  These events
        include:\n      * ASP state transitions\n      * Recovery timer triggers\n
        \  The possible states of an AS are:\n   AS-DOWN: The Application Server is
        unavailable.  This state implies\n   that all related ASPs are in ASP-DOWN
        state for this AS.  Initially\n   the AS will be in this state.  An Application
        Server is in the AS-\n   DOWN state when it is removed from a configuration.\n
        \  AS-INACTIVE: The Application Server is available, but no application\n
        \  traffic is active.  One or more related ASPs are in ASP-INACTIVE\n   state,
        and/or the number of related ASPs in ASP-ACTIVE state has not\n   reached
        n (n is the number of ASPs required to be in ASP-ACTIVE state\n   before AS
        can transition to AS-ACTIVE; n = 1 for Override Traffic\n   Mode) for this
        AS.  The recovery timer T(r) is not running or has\n   expired.\n   AS-ACTIVE:
        The Application Server is available and application\n   traffic is active.
        \ The AS moves to this state after being in AS-\n   INACTIVE and getting n
        ASPs (n is the number of ASPs required to be\n   in ASP-ACTIVE state before
        AS can transition to AS-ACTIVE; n = 1 for\n   Override Traffic Mode) in ASP-ACTIVE
        state or after reaching AS-\n   ACTIVE and keeping one or more ASPs in ASP-ACTIVE
        state.  When one\n   ASP is considered enough to handle traffic (smooth start),
        the AS in\n   AS-INACTIVE MAY reach the AS-ACTIVE as soon as the first ASP
        moves to\n   the ASP-ACTIVE state.\n   AS-PENDING: An active ASP has transitioned
        to ASP-INACTIVE or ASP\n   DOWN and it was the last remaining active ASP in
        the AS.  A recovery\n   timer T(r) SHOULD be started, and all incoming signalling
        messages\n   SHOULD be queued by the SGP.  If an ASP becomes ASP-ACTIVE before\n
        \  T(r) expires, the AS is moved to the AS-ACTIVE state, and all the\n   queued
        messages will be sent to the ASP.\n   If T(r) expires before an ASP becomes
        ASP-ACTIVE, and the SGP has no\n   alternative, the SGP may stop queuing messages
        and discard all\n   previously queued messages.  The AS will move to the AS-INACTIVE\n
        \  state if at least one ASP is in ASP-INACTIVE; otherwise, it will move\n
        \  to AS-DOWN state.\n   Figure 4 shows an example AS state machine for the
        case where the\n   AS/ASP data is preconfigured and is an n+k redundancy model.
        \ In\n   other cases where the AS/ASP configuration data is created\n   dynamically,
        there would be differences in the state machine,\n   especially at creation
        of the AS.\n        +----------+          IA2AC              +-------------+\n
        \       |    AS-   |---------------------------->|     AS-     |\n        |
        INACTIVE |                             |   ACTIVE    |\n        |          |<-----------
        \                |             |\n        +----------+            \\                +-------------+\n
        \          ^   |                 \\                    ^   |\n           |
        \  | IA2DN            \\ PN2IA             |   | AC2PN\n           |   |                   \\
        \                 |   |\n     DN2IA |   |                    \\          PN2AC
        \ |   |\n           |   v                     \\                |   v\n        +----------+
        \                 \\          +-------------+\n        |          |                   ----------|
        \            |\n        | AS-DOWN  |                             | AS-PENDING
        \ |\n        |          |                  PN2DN      |  (queueing) |\n        |
        \         |<----------------------------|             |\n        +----------+
        \                            +-------------+\n                Figure 4: AS
        State Transition Diagram\n   DN2IA: One ASP moves from ASP-DOWN to ASP-INACTIVE
        state.\n   IA2DN: The last ASP in ASP-INACTIVE moves to ASP-DOWN, causing
        all\n   the ASPs to be in ASP-DOWN state.\n   IA2AC: One ASP moves to ASP-ACTIVE,
        causing the number of ASPs in the\n   ASP-ACTIVE state to be n.  In a special
        case of smooth start, this\n   transition MAY be done when the first ASP moves
        to ASP-ACTIVE state.\n   AC2PN: The last ASP in ASP-ACTIVE state moves to
        ASP-INACTIVE or\n   ASP-DOWN states, causing the number of ASPs in ASP-ACTIVE
        to drop\n   below 1.\n   PN2AC: One ASP moves to ASP-ACTIVE.\n   PN2IA: T(r)
        expiry; an ASP is in ASP-INACTIVE state but no ASPs are\n   in ASP-ACTIVE
        state.\n   PN2DN: T(r) expiry; all the ASPs are in ASP-DOWN state.\n   An
        AS becomes AS-ACTIVE right after n ASPs reach the ASP-ACTIVE state\n   during
        the startup phase (except for smooth start).  Once the traffic\n   is flowing,
        an AS keeps the AS-ACTIVE state till the last ASP turns\n   to another state
        different from ASP-ACTIVE, avoiding unnecessary\n   traffic disturbances as
        long as there are ASPs available (this\n   assumes that the system will not
        always be exposed to the maximum\n   load).\n   There are other cases where
        the AS/ASP configuration data is created\n   dynamically.  In those cases
        there would be differences in the state\n   machine, especially at creation
        of the AS.  For example, where the\n   AS/ASP configuration data is not created
        until Registration of the\n   first ASP, the AS-INACTIVE state is entered
        directly upon the nth\n   successful REG REQ from an ASP belonging to that
        AS.  Another example\n   is where the AS/ASP configuration data is not created
        until the nth\n   ASP successfully enters the ASP-ACTIVE state.  In this latter
        case,\n   the AS-ACTIVE state is entered directly.\n"
      title: 4.3.2.  AS States
    - contents:
      - "4.3.3.  M3UA Management Procedures for Primitives\n   Before the establishment
        of an SCTP association, the ASP state at\n   both the SGP and ASP is assumed
        to be in the state ASP-DOWN.\n   Once the SCTP association is established
        (see Section 4.2), assuming\n   that the local M3UA-User is ready, the local
        M3UA ASP Maintenance\n   (ASPM) function will initiate the relevant procedures,
        using the ASP\n   Up/ASP Down/ASP Active/ASP Inactive messages to convey the
        ASP state\n   to the SGP (see Section 4.3.4).\n   If the M3UA layer subsequently
        receives an SCTP-COMMUNICATION_DOWN or\n   SCTP-RESTART indication primitive
        from the underlying SCTP layer, it\n   will inform the Layer Management by
        invoking the M-SCTP_STATUS\n   indication primitive.  The state of the ASP
        will be moved to ASP-\n   DOWN.  At an ASP, the MTP3-User will be informed
        of the\n   unavailability of any affected SS7 destinations through the use
        of\n   MTP-PAUSE indication primitives.\n   In the case of SCTP-COMMUNICATION_DOWN,
        the SCTP client MAY try to\n   re-establish the SCTP Association.  This MAY
        be done by the M3UA\n   layer automatically, or Layer Management MAY reestablish
        using the\n   M-SCTP_ESTABLISH request primitive.\n   In the case of an SCTP-RESTART
        indication at an ASP, the ASP is now\n   considered to be in the ASP-DOWN
        state by its M3UA peer.  The ASP, if\n   it is to recover, must begin any
        recovery with the ASP-Up procedure.\n"
      title: 4.3.3.  M3UA Management Procedures for Primitives
    - contents:
      - '4.3.4.  ASPM Procedures for Peer-to-Peer Messages

        '
      - contents:
        - "4.3.4.1.  ASP Up Procedures\n   After an ASP has successfully established
          an SCTP association to an\n   SGP, the SGP waits for the ASP to send an
          ASP Up message, indicating\n   that the ASP M3UA peer is available.  The
          ASP is always the initiator\n   of the ASP Up message.  This action MAY
          be initiated at the ASP by an\n   M-ASP_UP request primitive from Layer
          Management or MAY be initiated\n   automatically by an M3UA management function.\n
          \  When an ASP Up message is received at an SGP and, internally, the\n   remote
          ASP is in the ASP-DOWN state and is not considered locked out\n   for local
          management reasons, the SGP marks the remote ASP in the\n   state ASP-INACTIVE
          and informs Layer Management with an M-ASP_Up\n   indication primitive.
          \ If the SGP is aware, via current configuration\n   data, which Application
          Servers the ASP is configured to operate in,\n   the SGP updates the ASP
          state to ASP-INACTIVE in each AS that it is a\n   member.\n   Alternatively,
          the SGP may move the ASP into a pool of Inactive ASPs\n   available for
          future configuration within Application Servers,\n   determined in a subsequent
          Registration Request or ASP Active\n   procedure.  If the ASP Up message
          contains an ASP Identifier, the SGP\n   should save the ASP Identifier for
          that ASP.  The SGP MUST send an\n   ASP Up Ack message in response to a
          received ASP Up message even if\n   the ASP is already marked as ASP-INACTIVE
          at the SGP.\n   If for any local reason (e.g., management lockout) the SGP
          cannot\n   respond with an ASP Up Ack message, the SGP responds to an ASP
          Up\n   message with an Error message with the reason \"Refused - Management\n
          \  Blocking\".\n   At the ASP, the ASP Up Ack message received is not acknowledged.\n
          \  Layer Management is informed with an M-ASP_UP confirm primitive.\n   When
          the ASP sends an ASP Up message, it starts timer T(ack).  If the\n   ASP
          does not receive a response to an ASP Up message within T(ack),\n   the
          ASP MAY restart T(ack) and resend ASP Up messages until it\n   receives
          an ASP Up Ack message.  T(ack) is provisionable, with a\n   default of 2
          seconds.  Alternatively, retransmission of ASP Up\n   messages MAY be put
          under control of Layer Management.  In this\n   method, expiry of T(ack)
          results in an M-ASP_UP confirm primitive\n   carrying a negative indication.\n
          \  The ASP must wait for the ASP Up Ack message before sending any other\n
          \  M3UA messages (e.g., ASP Active or REG REQ).  If the SGP receives any\n
          \  other M3UA messages before an ASP Up message is received (other than\n
          \  ASP Down; see Section 4.3.4.2), the SGP MAY discard them.\n   If an ASP
          Up message is received and, internally, the remote ASP is\n   in the ASP-ACTIVE
          state, an ASP Up Ack message is returned, as well\n   as an Error message
          (\"Unexpected Message\").  In addition, the remote\n   ASP state is changed
          to ASP-INACTIVE in all relevant Application\n   Servers, and all registered
          Routing Keys are considered deregistered.\n   If an ASP Up message is received
          and, internally, the remote ASP is\n   already in the ASP-INACTIVE state,
          an ASP Up Ack message is returned,\n   and no further action is taken.\n
          \  If the ASP receives an unexpected ASP Up Ack message, the ASP should\n
          \  consider itself in the ASP-INACTIVE state.  If the ASP was not in the\n
          \  ASP-INACTIVE state, it SHOULD send an Error message and then initiate\n
          \  procedures to return itself to its previous state.\n"
        - contents:
          - "4.3.4.1.1.  M3UA Version Control and ASP Up\n   If an ASP Up message
            with an unsupported version is received, the\n   receiving end responds
            with an Error message, indicating the version\n   the receiving node supports
            and notifies Layer Management.  See\n   Section 4.8 for more on this issue.\n"
          title: 4.3.4.1.1.  M3UA Version Control and ASP Up
        - contents:
          - "4.3.4.1.2.  IPSP Considerations (ASP Up)\n   An IPSP may be considered
            in the ASP-INACTIVE state after an ASP Up\n   or ASP Up Ack has been received
            from it.  An IPSP can be considered\n   in the ASP-DOWN state after an
            ASP Down or ASP Down Ack has been\n   received from it.  The IPSP may
            inform Layer Management of the change\n   in state of the remote IPSP
            using M-ASP_UP or M-ASP_DN indication or\n   confirmation primitives.\n
            \  Alternatively, when using the IPSP DE model, an interchange of ASP
            Up\n   messages from each end MUST be performed.  Four messages are needed\n
            \  for completion.\n   If for any local reason (e.g., management lockout)
            an IPSP cannot\n   respond to an ASP Up message with an ASP Up Ack message,
            it responds\n   to an ASP Up message with an Error message with the reason
            \"Refused\n   Management Blocking\" and leaves the remote IPSP in the
            ASP-DOWN\n   state.\n"
          title: 4.3.4.1.2.  IPSP Considerations (ASP Up)
        title: 4.3.4.1.  ASP Up Procedures
      - contents:
        - "4.3.4.2.  ASP-Down Procedures\n   The ASP will send an ASP Down message
          to an SGP when the ASP wishes\n   to be removed from service in all Application
          Servers that it is a\n   member and no longer receive any DATA, SSNM or,
          ASPTM messages.  This\n   action MAY be initiated at the ASP by an M-ASP_DOWN
          request primitive\n   from Layer Management or MAY be initiated automatically
          by an M3UA\n   management function.\n   Whether the ASP is permanently removed
          from any AS is a function of\n   configuration management.  In the case
          where the ASP previously used\n   the Registration procedures (see Section
          4.4.1) to register within\n   Application Servers but has not deregistered
          from all of them prior\n   to sending the ASP Down message, the SGP MUST
          consider the ASP\n   Deregistered in all Application Servers that it is
          still a member.\n   The SGP marks the ASP as ASP-DOWN, informs Layer Management
          with an\n   M-ASP_Down indication primitive, and returns an ASP Down Ack
          message\n   to the ASP.\n   The SGP MUST send an ASP Down Ack message in
          response to a received\n   ASP Down message from the ASP even if the ASP
          is already marked as\n   ASP-DOWN at the SGP.\n   At the ASP, the ASP Down
          Ack message received is not acknowledged.\n   Layer Management is informed
          with an M-ASP_DOWN confirm primitive.\n   If the ASP receives an ASP Down
          Ack without having sent an ASP Down\n   message, the ASP should now consider
          itself to be in the ASP-DOWN\n   state.\n   If the ASP was previously in
          the ASP-ACTIVE or ASP-INACTIVE state,\n   the ASP should then initiate procedures
          to return itself to its\n   previous state.\n   When the ASP sends an ASP
          Down message, it starts timer T(ack).  If\n   the ASP does not receive a
          response to an ASP Down message within\n   T(ack), the ASP MAY restart T(ack)
          and resend ASP Down messages until\n   it receives an ASP Down Ack message.
          \ T(ack) is provisionable, with a\n   default of 2 seconds.  Alternatively,
          retransmission of ASP Down\n   messages MAY be put under control of Layer
          Management.  In this\n   method, expiry of T(ack) results in an M-ASP_DOWN
          confirm primitive,\n   carrying a negative indication.\n"
        title: 4.3.4.2.  ASP-Down Procedures
      - contents:
        - "4.3.4.3.  ASP Active Procedures\n   Anytime after the ASP has received
          an ASP Up Ack message from the SGP\n   or IPSP, the ASP MAY send an ASP
          Active message to the SGP,\n   indicating that the ASP is ready to start
          processing traffic.  This\n   action MAY be initiated at the ASP by an M-ASP_ACTIVE
          request\n   primitive from Layer Management or MAY be initiated automatically
          by\n   an M3UA management function.  In the case where an ASP wishes to\n
          \  process the traffic for more than one Application Server across a\n   common
          SCTP association, the ASP Active message(s) SHOULD contain a\n   list of
          one or more Routing Contexts to indicate for which\n   Application Servers
          the ASP Active message applies.  It is not\n   necessary for the ASP to
          include all Routing Contexts of interest in\n   a single ASP Active message,
          thus requesting to become active in all\n   Routing Contexts at the same
          time.  Multiple ASP Active messages MAY\n   be used to activate within the
          Application Servers independently, or\n   in sets.\n   In the case where
          an ASP Active message does not contain a Routing\n   Context parameter,
          the receiver must know, via configuration data,\n   which Application Server(s)
          the ASP is a member.\n   For the Application Servers for which the ASP can
          be successfully\n   activated, the SGP or IPSP responds with one or more
          ASP Active Ack\n   messages, including the associated Routing Context(s)
          and reflecting\n   any Traffic Mode Type value present in the related ASP
          Active\n   message.  The Routing Context parameter MUST be included in the
          ASP\n   Active Ack message(s) if the received ASP Active message contained\n
          \  any Routing Contexts.  Depending on any Traffic Mode Type request in\n
          \  the ASP Active message, or local configuration data if there is no\n
          \  request, the SGP moves the ASP to the correct ASP traffic state\n   within
          the associated Application Server(s).  Layer Management is\n   informed
          with an M-ASP_Active indication.  If the SGP or IPSP\n   receives any Data
          messages before an ASP Active message is received,\n   the SGP or IPSP MAY
          discard them.  By sending an ASP Active Ack\n   message, the SGP or IPSP
          is now ready to receive and send traffic for\n   the related Routing Context(s).
          \ The ASP SHOULD NOT send Data or SSNM\n   messages for the related Routing
          Context(s) before receiving an ASP\n   Active Ack message, or it will risk
          message loss.\n   Multiple ASP Active Ack messages MAY be used in response
          to an ASP\n   Active message containing multiple Routing Contexts, allowing
          the SGP\n   or IPSP to independently acknowledge the ASP Active message
          for\n   different (sets of) Routing Contexts.\n   The ASP Active message
          will be responded to in the following way as a\n   function of the presence/need
          of the RC parameter:\n   - If the RC parameter is included in the ASP Active
          message and the\n     corresponding RK has been previously defined (by either
          static\n     configuration or dynamic registration), the peer node MUST
          respond\n     with an ASP Active Ack message.  If for any local reason (e.g.,\n
          \    management lockout) the SGP responds to an ASP Active message with\n
          \    an Error message with reason \"Refused Management Blocking\".\n   -
          If the RC parameter is included in the ASP Active message and a\n     corresponding
          RK has not been previously defined (by either static\n     configuration
          or dynamic registration), the peer MUST respond with\n     an ERROR message
          with the Error Code \"No configured AS for ASP\".\n   - If (1) the RC parameter
          is not included in the ASP Active message,\n     (2) there are RKs defined
          (by either static configuration or\n     dynamic registration) and (3) RC
          is not mandatory, the peer node\n     SHOULD respond with an ASP Active
          Ack message and activate all the\n     RKs it has defined for that specific
          ASP.\n   - If (!) the RC parameter is not included in the ASP Active message,\n
          \    (2) there are RKs defined (by either static configuration or\n     dynamic
          registration), (3) and RC is mandatory, the peer node MUST\n     respond
          with an ERROR message with the Error Code \"Missing\n     Parameter\".\n
          \  - If (1) the RC parameter is not included in the ASP Active message,\n
          \    (2) there are RKs defined (by either static configuration or\n     dynamic
          registration) and (3) RC is not mandatory, the peer node\n     MUST respond
          with an ASP Active Ack message if it is ready to\n     handle traffic; otherwise,
          it will send an ERROR message with the\n     Error Code \"No Configured
          AS for ASP\" (meaning that it is not ready\n     to become active).\n   -
          If the RC parameter is not included in the ASP Active message and\n     there
          are no RKs defined, the peer node SHOULD respond with and\n     ERROR message
          with the Error Code \"Invalid Routing Context\".\n   Independently of the
          RC, the SGP MUST send an ASP Active Ack message\n   in response to a received
          ASP Active message from the ASP, if the ASP\n   is already marked in the
          APS-ACTIVE state.\n   At the ASP, the ASP Active Ack message received is
          not acknowledged.\n   Layer Management is informed with an M-ASP_ACTIVE
          confirm primitive.\n   It is possible for the ASP to receive Data messages
          before the ASP\n   Active Ack message as the ASP Active Ack and Data messages
          from an SG\n   or IPSP may be sent on different SCTP streams.  Message loss
          is\n   possible, as the ASP does not consider itself in the ASP-ACTIVE state\n
          \  until receipt of the ASP Active Ack message.\n   When the ASP sends an
          ASP Active message, it starts the timer T(ack).\n   If the ASP does not
          receive a response to an ASP Active message\n   within T(ack), the ASP MAY
          restart T(ack) and resend ASP Active\n   messages until it receives an ASP
          Active Ack message.  T(ack) is\n   provisionable, with a default of 2 seconds.
          \ Alternatively,\n   retransmission of ASP Active messages MAY be put under
          control of\n   Layer Management.  In this method, expiry of T(ack) results
          in an M-\n   ASP_ACTIVE confirm primitive carrying a negative indication.\n
          \  There are three modes of Application Server traffic handling in the\n
          \  SGP M3UA layer: Override, Loadshare and Broadcast.  When included,\n
          \  the Traffic Mode Type parameter in the ASP Active message indicates\n
          \  the traffic handling mode to be used in a particular Application\n   Server.
          \ If the SGP determines that the mode indicated in an ASP\n   Active message
          is unsupported or incompatible with the mode currently\n   configured for
          the AS, the SGP responds with an Error message\n   (\"Unsupported / Invalid
          Traffic Handling Mode\").  If the traffic\n   handling mode of the Application
          Server is not already known via\n   configuration data, then the traffic
          handling mode indicated in the\n   first ASP Active message causing the
          transition of the Application\n   Server state to AS-ACTIVE MAY be used
          to set the mode.\n   In the case of an Override mode AS, receipt of an ASP
          Active message\n   at an SGP causes the (re)direction of all traffic for
          the AS to the\n   ASP that sent the ASP Active message.  Any previously
          active ASP in\n   the AS is now considered to be in the state ASP-INACTIVE
          and SHOULD\n   no longer receive traffic from the SGP within the AS.  The
          SGP or\n   IPSP then MUST send a Notify message (\"Alternate ASP_Active\")
          to the\n   previously active ASP in the AS and SHOULD stop traffic to/from
          that\n   ASP.  The ASP receiving this Notify MUST consider itself now in
          the\n   ASP-INACTIVE state, if it is not already aware of this via inter-ASP\n
          \  communication with the Overriding ASP.\n   In the case of a Loadshare
          mode AS, receipt of an ASP Active message\n   at an SGP or IPSP causes direction
          of traffic to the ASP sending the\n   ASP Active message, in addition to
          all the other ASPs that are\n   currently active in the AS.  The algorithm
          at the SGP for loadsharing\n   traffic within an AS to all the active ASPs
          is implementation\n   dependent.  The algorithm could, for example, be round-robin
          or based\n   on information in the Data message (e.g., the SLS, SCCP SSN,
          or ISUP\n   CIC value).  An SGP or IPSP, upon receipt of an ASP Active message\n
          \  for the first ASP in a Loadshare AS, MAY choose not to direct traffic\n
          \  to a newly active ASP until it determines that there are sufficient\n
          \  resources to handle the expected load (e.g., until there are \"n\" ASPs\n
          \  in state ASP-ACTIVE in the AS).  In this case, the SGP or IPSP SHOULD\n
          \  withhold the Notify (AS-ACTIVE) until there are sufficient resources.\n
          \  For the n+k redundancy case, ASPs that are in that AS should\n   coordinate
          among themselves the number of active ASPs in the AS and\n   should start
          sending traffic only after n ASPs are active.  All ASPs\n   within a loadsharing
          mode AS must be able to process any Data message\n   received for the AS,
          to accommodate any potential failover or\n   rebalancing of the offered
          load.\n   In the case of a Broadcast mode AS, receipt of an ASP Active message\n
          \  at an SGP or IPSP causes direction of traffic to the ASP sending the\n
          \  ASP Active message, in addition to all the other ASPs that are\n   currently
          active in the AS.  The algorithm at the SGP for\n   broadcasting traffic
          within an AS to all the active ASPs is a simple\n   broadcast algorithm,
          where every message is sent to each of the\n   active ASPs.\n   At startup
          or restart phases, an SGP or IPSP, upon receipt of an ASP\n   Active message
          for the first ASP in a Loadshare AS, SHOULD NOT direct\n   traffic to a
          newly active ASP until it determines that there are\n   sufficient resources
          to handle the expected load (e.g., until there\n   are \"n\" ASPs in state
          ASP-ACTIVE in the AS).  In this case, the SGP\n   or IPSP SHOULD withhold
          the Notify (AS-ACTIVE) until there are\n   sufficient resources.\n   An
          SGP or IPSP, upon receipt of an ASP Active message for the first\n   ASP
          in a Broadcast AS, MAY choose not to direct traffic to a newly\n   active
          ASP until it determines that there are sufficient resources to\n   handle
          the expected load (e.g., until there are \"n\" ASPs in state\n   ASP-ACTIVE
          in the AS).  In this case, the SGP or IPSP SHOULD withhold\n   the Notify
          (AS-ACTIVE) until there are sufficient resources.\n   For the n+k redundancy
          case, ASPs that are in that AS should\n   coordinate among themselves the
          number of active ASPs in the AS and\n   should start sending traffic only
          after n ASPs are active.\n   Whenever an ASP in a Broadcast mode AS becomes
          ASP-ACTIVE, the SGP\n   MUST tag the first DATA message broadcast in each
          traffic flow with a\n   unique Correlation Id parameter.  The purpose of
          this Id is to permit\n   the newly active ASP to synchronize its processing
          of traffic in each\n   traffic flow with the other ASPs in the broadcast
          group.\n"
        - contents:
          - "4.3.4.3.1.  IPSP Considerations (ASP Active)\n   Either of the IPSPs
            can initiate communication.  When an IPSP\n   receives an ASP Active,
            it should mark the peer as ASP-ACTIVE and\n   return an ASP Active Ack
            message.  An ASP receiving an ASP Active Ack\n   message may mark the
            peer as ASP-Active, if it is not already in the\n   ASP-ACTIVE state.\n
            \  Alternatively, when using the IPSP DE model, an interchange of ASP\n
            \  Active messages from each end MUST be performed.  Four messages are\n
            \  needed for completion.\n"
          title: 4.3.4.3.1.  IPSP Considerations (ASP Active)
        title: 4.3.4.3.  ASP Active Procedures
      - contents:
        - "4.3.4.4.  ASP Inactive Procedures\n   When an ASP wishes to withdraw from
          receiving traffic within an AS or\n   the ASP wants to initiate the process
          of deactivation, the ASP sends\n   an ASP Inactive message to the SGP or
          IPSP.\n   An ASP Inactive message MUST always be responded to by the peer\n
          \  (although other messages may be sent in the middle) in the following\n
          \  way:\n      - If the received ASP Inactive message contains an RC parameter\n
          \       and the corresponding RK is defined (by either static\n        configuration
          or dynamic registration), the SGP/IPSP MUST\n        respond with an ASP
          Inactive Ack message.\n      - If the received ASP Inactive message contains
          an RC parameter\n        that is not defined (by either static configuration
          or dynamic\n        registration), the SGP/IPSP MUST respond with an ERROR
          message\n        with the Error Code \"Invalid Routing Context\".\n      -
          If the received ASP Inactive message does not contain an RC\n        parameter
          and the RK is defined (by either static configuration\n        or dynamic
          registration), the SGP/IPSP must turn the ASP/IPSP to\n        ASP-INACTIVE
          state in all the ASes it serves and MUST respond\n        with an ASP Inactive
          Ack message.\n      - If the received ASP Inactive message does not contain
          an RC\n        parameter and the RK is not defined (by either static\n        configuration
          or dynamic registration), the SGP/IPSP MUST\n        respond with an ERROR
          message with the Error Code \"No configured\n        AS for ASP\".\n   The
          action of sending the ASP Inactive message MAY be initiated at\n   the ASP
          by an M-ASP_INACTIVE request primitive from Layer Management\n   or MAY
          be initiated automatically by an M3UA management function.  In\n   the case
          where an ASP is processing the traffic for more than one\n   Application
          Server across a common SCTP association, the ASP Inactive\n   message contains
          one or more Routing Contexts to indicate for which\n   Application Servers
          the ASP Inactive message applies.\n   In the case where an ASP Inactive
          message does not contain a Routing\n   Context parameter, the receiver must
          know, via configuration data,\n   which Application Servers the ASP is a
          member of and then move the\n   ASP to the ASP-INACTIVE state in all Application
          Servers.\n   In the case of an Override mode AS, where another ASP has already\n
          \  taken over the traffic within the AS with an ASP Active (\"Override\")\n
          \  message, the ASP that sends the ASP Inactive message is already\n   considered
          to be in ASP-INACTIVE state by the SGP.  An ASP Inactive\n   Ack message
          is sent to the ASP, after ensuring that all traffic is\n   stopped to the
          ASP.\n   In the case of a Loadshare mode AS, the SGP moves the ASP to the\n
          \  ASP-INACTIVE state, and the AS traffic is reallocated across the\n   remaining
          ASPs in the state ASP-ACTIVE, as per the loadsharing\n   algorithm currently
          used within the AS.  A Notify message\n   (\"Insufficient ASP resources
          active in AS\") MAY be sent to all\n   inactive ASPs, if required.  An ASP
          Inactive Ack message is sent to\n   the ASP after all traffic is halted,
          and Layer Management is informed\n   with an M-ASP_INACTIVE indication primitive.\n
          \  In the case of a Broadcast mode AS, the SGP moves the ASP to the\n   ASP-INACTIVE
          state, and the AS traffic is broadcast only to the\n   remaining ASPs in
          the state ASP-ACTIVE.  A Notify message\n   (\"Insufficient ASP resources
          active in AS\") MAY be sent to all\n   inactive ASPs, if required.  An ASP
          Inactive Ack message is sent to\n   the ASP after all traffic is halted,
          and Layer Management is informed\n   with an M-ASP_INACTIVE indication primitive.\n
          \  Multiple ASP Inactive Ack messages MAY be used in response to an ASP\n
          \  Inactive message containing multiple Routing Contexts, allowing the\n
          \  SGP or IPSP to independently acknowledge for different (sets of)\n   Routing
          Contexts.  The SGP or IPSP sends an Error message (\"Invalid\n   Routing
          Context\") message for each invalid or unconfigured Routing\n   Context
          value in a received ASP Inactive message.\n   The SGP MUST send an ASP Inactive
          Ack message in response to a\n   received ASP Inactive message from the
          ASP; the ASP is already marked\n   as ASP-INACTIVE at the SGP.\n   At the
          ASP, the ASP Inactive Ack message received is not\n   acknowledged.  Layer
          Management is informed with an M-ASP_INACTIVE\n   confirm primitive.  If
          the ASP receives an ASP Inactive Ack without\n   having sent an ASP Inactive
          message, the ASP should now consider\n   itself to be in the ASP-INACTIVE
          state.  If the ASP was previously in\n   the ASP-ACTIVE state, the ASP should
          then initiate procedures to\n   return itself to its previous state.\n   When
          the ASP sends an ASP Inactive message, it starts the timer\n   T(ack).  If
          the ASP does not receive a response to an ASP Inactive\n   message within
          T(ack), the ASP MAY restart T(ack) and resend ASP\n   Inactive messages
          until it receives an ASP Inactive Ack message.\n   T(ack) is provisionable,
          with a default of 2 seconds.  Alternatively,\n   retransmission of ASP Inactive
          messages MAY be put under control of\n   Layer Management.  In this method,
          expiry of T(ack) results in an M-\n   ASP_Inactive confirm primitive carrying
          a negative indication.\n   If no other ASPs in the Application Server are
          in the state ASP-\n   ACTIVE, the SGP MUST send a Notify message (\"AS-Pending\")
          to all ASPs\n   in the AS that are in the state ASP-INACTIVE.  The SGP SHOULD
          start\n   buffering the incoming messages for T(r) seconds, after which\n
          \  messages MAY be discarded.  T(r) is configurable by the network\n   operator.
          \ If the SGP receives an ASP Active message from an ASP in\n   the AS before
          expiry of T(r), the buffered traffic is directed to\n   that ASP, and the
          timer is cancelled.  If T(r) expires, the AS is\n   moved to the AS-INACTIVE
          state.\n"
        - contents:
          - "4.3.4.4.1.  IPSP Considerations (ASP Inactive)\n   An IPSP may be considered
            in the ASP-INACTIVE state by a remote IPSP\n   after an ASP Inactive or
            ASP Inactive Ack message has been received\n   from it.\n   Alternatively,
            when using IPSP DE model, an interchange of ASP\n   Inactive messages
            from each end MUST be performed.  Four messages are\n   needed for completion.\n"
          title: 4.3.4.4.1.  IPSP Considerations (ASP Inactive)
        title: 4.3.4.4.  ASP Inactive Procedures
      - contents:
        - "4.3.4.5.  Notify Procedures\n   A Notify message reflecting a change in
          the AS state MUST be sent to\n   all ASPs in the AS, except those in the
          ASP-DOWN state, with\n   appropriate Status Information and any ASP Identifier
          of the failed\n   ASP.  At the ASP, Layer Management is informed with an
          M-NOTIFY\n   indication primitive.  The Notify message must be sent whether
          the AS\n   state change was a result of an ASP failure or receipt of an
          ASP\n   State management (ASPSM) / ASP Traffic Management (ASPTM) message.\n
          \  In the second case, the Notify message MUST be sent after any related\n
          \  acknowledgement messages (e.g., ASP Up Ack, ASP Down Ack, ASP Active\n
          \  Ack, or ASP Inactive Ack).\n   When an ASP moves from ASP-DOWN to ASP-INACTIVE
          within a particular\n   AS, a Notify message SHOULD be sent, by the ASP-UP
          receptor, after\n   sending the ASP-UP-ACK, in order to inform the ASP of
          the current AS\n   state.\n   In the case where a Notify message (\"AS-PENDING\")
          message is sent by\n   an SGP that now has no ASPs active to service the
          traffic, or where a\n   Notify (\"Insufficient ASP resources active in AS\")
          message is sent in\n   the Loadshare or Broadcast mode, the Notify message
          does not\n   explicitly compel the ASP(s) receiving the message to become
          active.\n   The ASPs remain in control of what (and when) traffic action
          is\n   taken.\n   In the case where a Notify message does not contain a
          Routing Context\n   parameter, the receiver must know, via configuration
          data, of which\n   Application Servers the ASP is a member and take the
          appropriate\n   action in each AS.\n"
        - contents:
          - "4.3.4.5.1.  IPSP Considerations (NTFY)\n   Notify works in the same manner
            as in the SG-AS case.  One of the\n   IPSPs can send this message to any
            remote IPSP that is not in the\n   ASP-DOWN state.\n"
          title: 4.3.4.5.1.  IPSP Considerations (NTFY)
        title: 4.3.4.5.  Notify Procedures
      - contents:
        - "4.3.4.6.  Heartbeat Procedures\n   The optional Heartbeat procedures MAY
          be used when operating over\n   transport layers that do not have their
          own heartbeat mechanism for\n   detecting loss of the transport association
          (i.e., other than SCTP).\n   Either M3UA peer may optionally send Heartbeat
          messages periodically,\n   subject to a provisionable timer, T(beat).  Upon
          receiving a\n   Heartbeat message, the M3UA peer MUST respond with a Heartbeat
          Ack\n   message.\n   If no Heartbeat Ack message (or any other M3UA message)
          is received\n   from the M3UA peer within 2*T(beat), the remote M3UA peer
          is\n   considered unavailable.  Transmission of Heartbeat messages is\n
          \  stopped, and the signalling process SHOULD attempt to re-establish\n
          \  communication if it is configured as the client for the disconnected\n
          \  M3UA peer.\n   The Heartbeat message may optionally contain an opaque
          Heartbeat Data\n   parameter that MUST be echoed back unchanged in the related
          Heartbeat\n   Ack message.  The sender, upon examining the contents of the
          returned\n   Heartbeat Ack message, MAY choose to consider the remote M3UA
          peer as\n   unavailable.  The contents/format of the Heartbeat Data parameter
          is\n   implementation-dependent and only of local interest to the original\n
          \  sender.  The contents may be used, for example, to support a\n   Heartbeat
          sequence algorithm (to detect missing Heartbeats), and/or a\n   timestamp
          mechanism (to evaluate delays).\n   Note: Heartbeat-related events are not
          shown in Figure 3 \"ASP state\n   transition diagram\".\n"
        title: 4.3.4.6.  Heartbeat Procedures
      title: 4.3.4.  ASPM Procedures for Peer-to-Peer Messages
    title: 4.3.  AS and ASP/IPSP State Maintenance
  - contents:
    - '4.4.  Routing Key Management Procedures [Optional]

      '
    - contents:
      - "4.4.1.  Registration\n   An ASP MAY dynamically register with an SGP as an
        ASP within an\n   Application Server using the REG REQ message.  A Routing
        Key\n   parameter in the REG REQ message specifies the parameters associated\n
        \  with the Routing Key.\n   The SGP examines the contents of the received
        Routing Key parameter\n   and compares it with the currently provisioned Routing
        Keys.  If the\n   received Routing Key matches an existing SGP Routing Key
        entry and\n   the ASP is not currently included in the list of ASPs for the
        related\n   Application Server, the SGP MAY authorize the ASP to be added
        to the\n   AS.  Or, if the Routing Key does not currently exist and the received\n
        \  Routing Key data is valid and unique, an SGP supporting dynamic\n   configuration
        MAY authorize the creation of a new Routing Key and\n   related Application
        Server and add the ASP to the new AS.  In either\n   case, the SGP returns
        a Registration Response message to the ASP,\n   containing the same Local-RK-Identifier
        as provided in the initial\n   request, and a Registration Result \"Successfully
        Registered\".  A\n   unique Routing Context value assigned to the SGP Routing
        Key is\n   included.  The method of Routing Context value assignment at the
        SGP\n   is implementation dependent but must be guaranteed to be unique for\n
        \  each Application Server or Routing Key supported by the SGP.\n   If the
        SGP does not support the registration procedure, the SGP\n   returns an Error
        message to the ASP, with an error code of\n   \"Unsupported Message Class\".\n
        \  If the SGP determines that the received Routing Key data is invalid,\n
        \  or contains invalid parameter values, the SGP returns a Registration\n
        \  Response message to the ASP, containing a Registration Result \"Error\n
        \  Invalid Routing Key\", \"Error - Invalid DPC\", or \"Error - Invalid\n
        \  Network Appearance\", as appropriate.\n   If the SGP determines that the
        requested RK partially, but not\n   exactly, matches an existing RK, and that
        an incoming signalling\n   message received at an SGP could possibly match
        both the requested\n   and the existing RK, the SGP returns a Registration
        Response message\n   to the ASP, with a Registration Status of \"Error - \"Cannot
        Support\n   Unique Routing\".  An incoming signalling message received at
        an SGP\n   should not match against more than one Routing Key.\n   If the
        SGP determines that the received RK was already registered,\n   fully and
        exactly, either statically or dynamically, by the sending\n   ASP, the SGP
        returns a Registration Response message to the ASP,\n   containing a Registration
        Result \"Error - Routing Key Already\n   Registered\".  This error applies
        whether the sending ASP/IPSP is in\n   ASP-ACTIVE or ASP-INACTIVE for the
        corresponding AS.  For this error\n   code, the RC field in the Registration
        Response message MUST be\n   populated with the actual value of RC in SGP
        corresponding to the\n   specified RK in the Registration Request message.\n
        \  An ASP MAY request modification of an existing Routing Key by\n   including
        a Routing Context parameter in a Registration Request\n   message.  Upon receipt
        of a Registration Request message containing a\n   Routing Context, if the
        SGP determines that the Routing Context\n   applies to an existing Routing
        Key, the SGP MAY adjust the existing\n   Routing Key to match the new information
        provided in the Routing Key\n   parameter.  A Registration Response \"ERR
        Routing Key Change Refused\"\n   is returned if the SGP does not support this
        re-registration\n   procedure or RC does not exist.  Otherwise, a Registration
        Response\n   \"Successfully Registered\" is returned.\n   If the SGP does
        not authorize an otherwise valid registration\n   request, the SGP returns
        a REG RSP message to the ASP containing the\n   Registration Result \"Error
        - Permission Denied\".\n   If an SGP determines that a received Routing Key
        does not currently\n   exist, and that the SGP does not support dynamic configuration,
        the\n   SGP returns a Registration Response message to the ASP, containing
        a\n   Registration Result \"Error - Routing Key not Currently Provisioned\".\n
        \  If an SGP determines that a received Routing Key does not currently\n   exist
        and that the SGP supports dynamic configuration but does not\n   have the
        capacity to add new Routing Key and Application Server\n   entries, the SGP
        returns a Registration Response message to the ASP,\n   containing a Registration
        Result \"Error - Insufficient Resources\".\n   If an SGP determines that a
        received Routing Key does not currently\n   exist, and the SGP supports dynamic
        configuration but requires that\n   the Routing Key first be manually provisioned
        at the SGP, the SGP\n   returns a Registration Response message to the ASP,
        containing a\n   Registration Result \"Error - Routing Key not Currently Provisioned\".\n
        \  If an SGP determines that one or more of the Routing Key parameters\n   are
        not supported for the purpose of creating new Routing Key\n   entries, the
        SGP returns a Registration Response message to the ASP,\n   containing a Registration
        Result \"Error - Unsupported RK parameter\n   field\".\n   A Registration
        Response \"Error - Unsupported Traffic Handling Mode\"\n   is returned if
        the Routing Key in the REG REQ contains an Traffic\n   Handling Mode that
        is inconsistent with the presently configured mode\n   for the matching Application
        Server.\n   An ASP MAY register multiple Routing Keys at once by including
        a\n   number of Routing Key parameters in a single REG REQ message.  The\n
        \  SGP MAY respond to each registration request in a single REG RSP\n   message,
        indicating the success or failure result for each Routing\n   Key in a separate
        Registration Result parameter.  Alternatively the\n   SGP MAY respond with
        multiple REG RSP messages, each with one or more\n   Registration Result parameters.
        \ The ASP uses the Local-RK-Identifier\n   parameter to correlate the requests
        with the responses.\n   Upon successful registration of an ASP in an AS, the
        SGP can now send\n   related SS7 Signalling Network Management messaging,
        if this did not\n   previously start upon the ASP transitioning to state ASP-INACTIVE\n"
      title: 4.4.1.  Registration
    - contents:
      - "4.4.2.  Deregistration\n   An ASP MAY dynamically deregister with an SGP
        as an ASP within an\n   Application Server using the DEREG REQ message.  A
        Routing Context\n   parameter in the DEREG REQ message specifies which Routing
        Keys to\n   deregister.  An ASP SHOULD move to the ASP-INACTIVE state for
        an\n   Application Server before attempting to deregister the Routing Key\n
        \  (i.e., deregister after receiving an ASP Inactive Ack).  Also, an ASP\n
        \  SHOULD deregister from all Application Servers of which it is a\n   member
        before attempting to move to the ASP-Down state.\n   The SGP examines the
        contents of the received Routing Context\n   parameter and validates that
        the ASP is currently registered in the\n   Application Server(s) related to
        the included Routing Context(s).  If\n   validated, the ASP is deregistered
        as an ASP in the related\n   Application Server.\n   The deregistration procedure
        does not necessarily imply the deletion\n   of Routing Key and Application
        Server configuration data at the SG.\n   Other ASPs may continue to be associated
        with the Application Server,\n   in which case the Routing Key data SHOULD
        NOT be deleted.  If a\n   Deregistration results in no more ASPs in an Application
        Server, an\n   SG MAY delete the Routing Key data.\n   The SGP acknowledges
        the deregistration request by returning a DEREG\n   RSP message to the requesting
        ASP.  The result of the deregistration\n   is found in the Deregistration
        Result parameter, indicating success\n   or failure with cause.\n   An ASP
        MAY deregister multiple Routing Contexts at once by including\n   a number
        of Routing Contexts in a single DEREG REQ message.  The SGP\n   MAY respond
        to each deregistration request in a single DEREG RSP\n   message, indicating
        the success or failure result for each Routing\n   Context in a separate Deregistration
        Result parameter.\n"
      title: 4.4.2.  Deregistration
    - contents:
      - "4.4.3.  IPSP Considerations (REG/DEREG)\n   The Registration/Deregistration
        procedures work in the IPSP cases in\n   the same way as in AS-SG cases.  An
        IPSP may register an RK in the\n   remote IPSP.  An IPSP is responsible for
        deregistering the RKs that\n   it has registered.\n"
      title: 4.4.3.  IPSP Considerations (REG/DEREG)
    title: 4.4.  Routing Key Management Procedures [Optional]
  - contents:
    - "4.5.  Procedures to Support the Availability or Congestion Status of\n      SS7
      Destination\n"
    - contents:
      - "4.5.1.  At an SGP\n   On receiving an MTP-PAUSE, MTP-RESUME or MTP-STATUS
        indication\n   primitive from the nodal interworking function at an SGP, the
        SGP\n   M3UA layer will send a corresponding SS7 Signalling Network\n   Management
        (SSNM) DUNA, DAVA, SCON, or DUPU message (see Section 3.4)\n   to the M3UA
        peers at concerned ASPs.  The M3UA layer must fill in\n   various fields of
        the SSNM messages consistently with the information\n   received in the primitives.\n
        \  The SGP M3UA layer determines the set of concerned ASPs to be\n   informed
        based on the specific SS7 network for which the primitive\n   indication is
        relevant.  In this way, all ASPs configured to\n   send/receive traffic within
        a particular Network Appearance are\n   informed.  If the SGP operates within
        a single SS7 Network\n   Appearance, then all ASPs are informed.\n   For the
        particular case that an ASP becomes active for an AS and\n   destinations
        normally accessible to the AS are inaccessible,\n   restricted, or congested,
        the SG MAY send DUNA, DRST, or SCON\n   messages for the inaccessible, restricted,
        or congested destinations\n   to the ASP newly active for the AS to prevent
        the ASP from sending\n   traffic for destinations that it might not otherwise
        know that are\n   inaccessible, restricted, or congested.  For the newly activating
        ASP\n   from which the SGP has received an ASP Active message, these DUNA,\n
        \  DRST, and SCON messages MAY be sent before sending the ASP Active Ack\n
        \  that completes the activation procedure.\n   DUNA, DAVA, SCON, and DRST
        messages may be sent sequentially and\n   processed at the receiver in the
        order sent.\n   Sequencing is not required for the DUPU or DAUD messages,
        which MAY\n   be sent unsequenced.\n"
      title: 4.5.1.  At an SGP
    - contents:
      - '4.5.2.  At an ASP

        '
      - contents:
        - "4.5.2.1.  Single SG Configurations\n   At an ASP, upon receiving an SS7
          Signalling Network Management (SSNM)\n   message from the remote M3UA Peer,
          the M3UA layer invokes the\n   appropriate primitive indications to the
          resident M3UA-Users.  Local\n   management is informed.\n   In the case
          where a local event has caused the unavailability or\n   congestion status
          of SS7 destinations, the M3UA layer at the ASP\n   SHOULD pass up appropriate
          indications in the primitives to the M3UA\n   User, as though equivalent
          SSNM messages were received.  For example,\n   the loss of an SCTP association
          to an SGP may cause the\n   unavailability of a set of SS7 destinations.
          \ MTP-PAUSE indication\n   primitives to the M3UA User are appropriate.\n"
        title: 4.5.2.1.  Single SG Configurations
      - contents:
        - "4.5.2.2.  Multiple SG Configurations\n   At an ASP, upon receiving a Signalling
          Network Management message\n   from the remote M3UA Peer, the M3UA layer
          updates the status of the\n   affected route(s) via the originating SG and
          determines whether or\n   not the overall availability or congestion status
          of the affected\n   destination(s) has changed.  If so, the M3UA layer invokes
          the\n   appropriate primitive indications to the resident M3UA-Users.  Local\n
          \  management is informed.\n   Implementation Note: To accomplish this,
          the M3UA layer at an ASP\n   maintains the status of routes via the SG,
          much like an MTP3 layer\n   maintains route-set status.\n"
        title: 4.5.2.2.  Multiple SG Configurations
      title: 4.5.2.  At an ASP
    - contents:
      - "4.5.3.  ASP Auditing\n   An ASP may optionally initiate an audit procedure
        to enquire of an\n   SGP the availability and (if the national congestion
        method with\n   multiple congestion levels and message priorities is used)
        congestion\n   status of an SS7 destination or set of destinations.  A Destination\n
        \  Audit (DAUD) message is sent from the ASP to the SGP, requesting the\n
        \  current availability and congestion status of one or more SS7\n   Destination
        Point Codes.\n   The DAUD message MAY be sent unsequenced.  The DAUD MAY be
        sent by\n   the ASP in the following cases:\n      - Periodic.  A Timer originally
        set upon receipt of a DUNA, SCON,\n        or DRST message has expired without
        a subsequent DAVA, DUNA,\n        SCON, or DRST message updating the availability/congestion\n
        \       status of the affected Destination Point Codes.  The Timer is\n        reset
        upon issuing a DAUD.  In this case, the DAUD is sent to\n        the SGP that
        originally sent the SSNM message.\n      - Isolation.  The ASP is newly ASP-ACTIVE
        or has been isolated\n        from an SGP for an extended period.  The ASP
        MAY request the\n        availability/congestion status of one or more SS7
        destinations\n        to which it expects to communicate.\n     Implementation
        Note: In the first of the cases above, the auditing\n     procedure must not
        be invoked for the case of a received SCON\n     message containing a congestion
        level value of \"no congestion\" or\n     \"undefined\" (i.e., congestion
        Level = \"0\").\n   The SGP SHOULD respond to a DAUD message with the MTP3\n
        \  availability/congestion status of the routeset associated with each\n   Destination
        Point Codes in the DAUD message.  The status of each SS7\n   destination requested
        is indicated in a DUNA message (if\n   unavailable), a DAVA message (if available),
        or a DRST (if restricted\n   and the SGP supports this feature in national
        networks).  For\n   national networks, the SGP SHOULD additionally respond
        with a SCON\n   message (if the destination is congested) before the DAVA
        or DRST.\n   Where the SGP does not maintain the congestion status of the
        SS7\n   destination, the response to a DAUD message should always only be
        a\n   DAVA, DRST, or DUNA message, as appropriate.\n   Any DUNA or DAVA message
        in response to a DAUD message MAY contain a\n   list of Affected Point Codes.\n
        \  An SG MAY refuse to provide the availability or congestion status of\n
        \  a destination if, for example, the ASP is not authorized to know the\n
        \  status of the destination.  The SG MAY respond with an Error Message\n
        \  (Error Code = \"Destination Status Unknown\").\n   An SG SHOULD respond
        with a DUNA message when DAUD was received with\n   an unknown Signalling
        Point Code.\n"
      title: 4.5.3.  ASP Auditing
    title: 4.5.  Procedures to Support the Availability or Congestion Status of
  - contents:
    - "4.6.  MTP3 Restart\n   In the case where the MTP3 in the SG undergoes an MTP
      restart, event\n   communication SHOULD be handled as follows:\n   When the
      SG discovers SS7 network isolation, the SGPs send an\n   indication to all concerned
      available ASPs (i.e., ASPs in the ASP-\n   ACTIVE state), using DUNA messages
      for the concerned destinations.\n   When the SG has completed the MTP Restart
      procedure, the M3UA layers\n   at the SGPs inform all concerned ASPs in the
      ASP-ACTIVE state of any\n   available/restricted SS7 destinations, using the
      DAVA/DRST messages.\n   No message is necessary for those destinations still
      unavailable\n   after the restart procedure.\n   When the M3UA layer at an ASP
      receives a DUNA message indicating SS7\n   destination unavailability at an
      SG, MTP Users will receive an MTP-\n   PAUSE indication and will stop any affected
      traffic to this\n   destination.  When the M3UA receives a DAVA/DRST message,
      MTP Users\n   will receive an MTP-RESUME indication and can resume traffic to
      the\n   newly available SS7 destination, provided that the ASP is in the\n   ASP-ACTIVE
      state towards this SGP.\n   The ASP MAY choose to audit the availability of
      unavailable\n   destinations by sending DAUD messages.  This would be the case
      when,\n   for example, an AS becomes active at an ASP and does not have current\n
      \  destination statuses.  If MTP restart is in progress at the SG, the\n   SGP
      returns a DUNA message for that destination, even if it received\n   an indication
      that the destination became available or restricted.\n   When an ASP becomes
      active for an AS and the SG is experiencing SS7\n   network isolation or is
      performing the MTP Restart procedure for the\n   AS, the SG MAY send a DUNA
      message for the concerned destinations to\n   the newly active ASP to prevent
      the ASP from sending traffic.  These\n   messages can be sent after receiving
      the ASP Active, and before\n   sending the ASP Active Ack, to ensure that traffic
      is not initiated\n   by the ASP to these destinations before the SSNM are received.
      \ In\n   addition to DUNA messages, SCON, DRST, and DAVA can also be sent.\n
      \  In the IPSP case, MTP restart could be considered if the IPSP also\n   has
      connection to an SS7 network.  In that case, the same behavior as\n   described
      above for the SGP would apply to the restarting IPSP.  This\n   would also be
      the case if the IPSPs were perceived as exchanging MTP\n   Peer PDUs, instead
      of MTP primitives between MTP User and MTP\n   Provider.  In other words, M3UA
      does not provide the equivalent to\n   Traffic Restart Allowed messages indicating
      the end of the restart\n   procedure between peer IPSPs that would also be connected
      to an SS7\n   network.\n"
    title: 4.6.  MTP3 Restart
  - contents:
    - "4.7.  NIF Not Available\n   Implementation Note: Although the NIF is decided
      to be an\n   implementation dependent function, here are some guidelines that
      may\n   be useful to follow:\n   - If an SGP is isolated entirely from the NIF,
      the SGP should send\n     ASP Down Ack to all its connected ASPs.  Upon receiving
      an ASP Up\n     message while isolated from the NIF, the SGP should respond
      with an\n     Error (\"Refused - Management Blocking\").\n   - If an SGP suffers
      a partial failure (where an SGP can continue to\n     service one or more active
      AS but due to a partial failure it is\n     unable to service one or more other
      active AS), the SGP should send\n     ASP Inactive Ack to all its connected
      ASPs for the affected AS.\n     Upon receiving an ASP Active message for an
      affected AS while still\n     partially isolated from the NIF, the SGP should
      respond with an\n     Error (\"Refused - Management Blocking\").\n   - If SG
      is isolated from NIF, it means that each SGP within an SG\n     should follow
      the procedure mentioned above.\n"
    title: 4.7.  NIF Not Available
  - contents:
    - "4.8.  M3UA Version Control\n   If a message with an unsupported version is
      received, the receiving\n   end responds with an Error message indicating the
      version the\n   receiving node supports and notifies Layer Management.\n   This
      is useful when protocol version upgrades are being performed in\n   a network.
      \ A node upgraded to a newer version should support the\n   older versions used
      on other nodes it is communicating with.  Because\n   ASPs initiate the ASP
      Up procedure, it is likely that the message\n   having an unsupported version
      is an ASP Up message and therefore that\n   the Error message would normally
      come from the SGP.\n"
    title: 4.8.  M3UA Version Control
  - contents:
    - "4.9.  M3UA Termination\n   Whenever a M3UA node wants to stop the communication
      with the peer\n   node, it MAY use one of the following procedures:\n     a)
      Send the sequence of ASP-INACTIVE, DEREG (optionally whenever\n        dynamic
      registration is used), and ASP-DOWN messages and perform\n        the SCTP Shutdown
      procedure after that.\n     b) Just do the SCTP Shutdown procedure.\n"
    title: 4.9.  M3UA Termination
  title: 4.  Procedures
- contents:
  - '5.  Examples of M3UA Procedures

    '
  - contents:
    - "5.1.  Establishment of Association and Traffic between SGPs and ASPs\n   These
      scenarios show examples of M3UA message flows for the\n   establishment of traffic
      between an SGP and an ASP or between two\n   IPSPs.  In all cases it is assumed
      that the SCTP association is\n   already set up.\n"
    - contents:
      - "5.1.1.  Single ASP in an Application Server (\"1+0\" sparing),\n        No
        Registration\n   These scenarios show examples of M3UA message flows for the\n
        \  establishment of traffic between an SGP and an ASP where only one ASP\n
        \  is configured within an AS (no backup).\n"
      - contents:
        - "5.1.1.1.  Single ASP in an Application Server (\"1+0\" Sparing),\n          No
          Registration\n                 SGP                             ASP1\n                  |
          \                              |\n                  |<-------------ASP Up-----------|\n
          \                 |-----------ASP Up Ack--------->|\n                  |
          \                              |\n                  |-----NTFY(AS-INACTIVE)(RCn)--->|\n
          \                 |                               |\n                  |<-------
          ASP Active(RCn)-------|  RC: Routing Context\n                  |-----ASP
          Active Ack (RCn)----->|      (optional)\n                  |                               |\n
          \                 |-----NTFY(AS-ACTIVE)(RCn)----->|\n                  |
          \                              |\n   Note: If the ASP Active message contains
          an optional Routing Context\n   parameter, the ASP Active message only applies
          for the specified RC\n   value(s).  For an unknown RC value, the SGP responds
          with an Error\n   message.\n"
        title: 5.1.1.1.  Single ASP in an Application Server ("1+0" Sparing),
      - contents:
        - "5.1.1.2.  Single ASP in Application Server (\"1+0\" Sparing),\n          Dynamic
          Registration\n   This scenario is the same as for 5.1.1.1 but with the optional\n
          \  exchange of registration information.  In this case, the Registration\n
          \  is accepted by the SGP.\n                SGP                             ASP1\n
          \                |                               |\n                 |<------------ASP
          Up------------|\n                 |----------ASP Up Ack---------->|\n                 |
          \                              |\n                 |                               |\n
          \                |<----REGISTER REQ(LRCn,RKn)----|  LRC: Local Routing\n
          \                |                               |       Key Id\n                 |----REGISTER
          RESP(LRCn,RCn)--->|   RK: Routing Key\n                 |                               |
          \  RC: Routing Context\n                 |----NTFY(AS-INACTIVE)(RCn)---->|\n
          \                |                               |\n                 |                               |\n
          \                |<------- ASP Active(RCn)-------|\n                 |-----ASP
          Active Ack (RCn)----->|\n                 |                               |\n
          \                |-----NTFY(AS-ACTIVE)(RCn)----->|\n                 |                               |\n
          \  Note: In the case of an unsuccessful registration attempt (e.g.,\n   invalid
          RKn), the Register Response message will contain an\n   unsuccessful indication,
          and the ASP will not subsequently send an\n   ASP Active message.\n"
        title: 5.1.1.2.  Single ASP in Application Server ("1+0" Sparing),
      - contents:
        - "5.1.1.3.  Single ASP in Multiple Application Servers (Each\n          with
          \"1+0\" Sparing), Dynamic Registration (Case 1 - Multiple\n          Registration
          Requests)\n                SGP                             ASP1\n                 |
          \                              |\n                 |<------------ASP Up------------|\n
          \                |----------ASP Up Ack---------->|\n                 |                               |\n
          \                |<----REGISTER REQ(LRC1,RK1)----|  LRC: Local Routing\n
          \                |                               |       Key Id\n                 |----REGISTER
          RESP(LRC1,RC1)--->|   RK: Routing Key\n                 |                               |
          \  RC: Routing Context\n                 |---NOTIFY(AS-INACTIVE)(RC1)--->|\n
          \                |                               |\n                 |                               |\n
          \                |<------- ASP Active(RC1)-------|\n                 |-----ASP
          Active Ack (RC1)----->|\n                 |                               |\n
          \                |----NOTIFY(AS-ACTIVE)(RC1)---->|\n                 |                               |\n
          \                ~                               ~\n                 |                               |\n
          \                |<----REGISTER REQ(LRCn,RKn)----|\n                 |                               |\n
          \                |----REGISTER RESP(LRCn,RCn)--->|\n                 |                               |\n
          \                |---NOTIFY(AS-INACTIVE)(RCn)--->|\n                 |                               |\n
          \                |<------- ASP Active(RCn)-------|\n                 |-----ASP
          Active Ack (RCn)----->|\n                 |                               |\n
          \                |----NOTIFY(AS-ACTIVE)(RCn)---->|\n                 |                               |\n
          \  Note: In the case of an unsuccessful registration attempt (e.g.,\n   invalid
          RKn), the Register Response message will contain an\n   unsuccessful indication,
          and the ASP will not subsequently send an\n   ASP Active message.  Each
          LRC/RK pair registration is considered\n   independently.\n   It is not
          necessary to follow a Registration Request/Response message\n   pair with
          an ASP Active message before sending the next Registration\n   Request.
          \ The ASP Active message can be sent at any time after the\n   related successful
          registration.\n"
        title: 5.1.1.3.  Single ASP in Multiple Application Servers (Each
      - contents:
        - "5.1.1.4.  Single ASP in Multiple Application Servers (each\n          with
          \"1+0\" sparing), Dynamic Registration (Case 2 - Single\n          Registration
          Request)\n                  SGP                             ASP1\n                   |
          \                              |\n                   |<------------ASP Up------------|\n
          \                  |----------ASP Up Ack---------->|\n                   |
          \                              |\n                   |                               |\n
          \                  |<---REGISTER REQ({LRC1,RK1},   |\n                   |
          \                  ...,        |\n                   |                 {LRCn,RKn}),--|\n
          \                  |                               |\n                   |---REGISTER
          RESP({LRC1,RC1},-->|\n                   |                  ...,         |\n
          \                  |                 (LRCn,RCn})   |\n                   |
          \                              |\n                   |--NTFY(AS-INACTIVE)(RC1..RCn)->|\n
          \                  |                               |\n                   |
          \                              |\n                   |<------- ASP Active(RC1)-------|\n
          \                  |-----ASP Active Ack (RC1)----->|\n                   |
          \                              |\n                   |----NOTIFY(AS-ACTIVE)(RC1)---->|\n
          \                  |                               |\n                   :
          \                              :\n                   :                               :\n
          \                  |                               |\n                   |<-------
          ASP Active(RCn)-------|\n                   |-----ASP Active Ack (RCn)----->|\n
          \                  |                               |\n                   |----NOTIFY(AS-ACTIVE)(RCn)---->|\n
          \                  |                               |\n   Note: In the case
          of an unsuccessful registration attempt (e.g.,\n   Invalid RKn), the Register
          Response message will contain an\n   unsuccessful indication, and the ASP
          will not subsequently send an\n   ASP Active message.  Each LRC/RK pair
          registration is considered\n   independently.\n   The ASP Active message
          can be sent at any time after the related\n   successful registration and
          may have more than one RC.\n"
        title: 5.1.1.4.  Single ASP in Multiple Application Servers (each
      title: 5.1.1.  Single ASP in an Application Server ("1+0" sparing),
    - contents:
      - "5.1.2.  Two ASPs in Application Server (\"1+1\" Sparing)\n   This scenario
        shows example M3UA message flows for the establishment\n   of traffic between
        an SGP and two ASPs in the same Application\n   Server, where ASP1 is configured
        to be in the ASP-ACTIVE state and\n   ASP2 is to be a \"backup\" in the event
        of communication failure or the\n   withdrawal from service of ASP1.  ASP2
        may act as a hot, warm, or\n   cold backup, depending on the extent to which
        ASP1 and ASP2 share\n   call/transaction state or can communicate call state
        under\n   failure/withdrawal events.  The example message flow is the same\n
        \  whether the ASP Active messages indicate \"Override\", \"Loadshare\", or\n
        \  \"Broadcast\" mode, although typically this example would use an\n   Override
        mode.\n         SGP                      ASP1                       ASP2\n
        \         |                        |                          |\n          |<--------ASP
        Up---------|                          |\n          |-------ASP Up Ack------>|
        \                         |\n          |                        |                          |\n
        \         |--NOTIFY(AS-INACTIVE)-->|                          |\n          |
        \                       |                          |\n          |<----------------------------ASP
        Up----------------|\n          |----------------------------ASP Up Ack------------>|\n
        \         |                        |                          |\n          |--------------------------NOTIFY(AS-INACTIVE)----->|\n
        \         |                        |                          |\n          |
        \                       |                          |\n          |<-------ASP
        Active------|                          |\n          |------ASP Active Ack--->|
        \                         |\n          |                        |                          |\n
        \         |---NOTIFY(AS-ACTIVE)--->|                          |\n          |--------------------------NOTIFY(AS-ACTIVE)------->|\n
        \         |                        |                          |\n"
      title: 5.1.2.  Two ASPs in Application Server ("1+1" Sparing)
    - contents:
      - "5.1.3.  Two ASPs in an Application Server (\"1+1\" Sparing,\n        Loadsharing
        Case)\n   This scenario shows a case similar to Section 5.1.2, but where the\n
        \  two ASPs are brought to the state ASP-ACTIVE and subsequently\n   loadshare
        the traffic.  In this case, one ASP is sufficient to handle\n   the total
        traffic load.\n         SGP                      ASP1                       ASP2\n
        \         |                        |                          |\n          |<---------ASP
        Up--------|                          |\n          |--------ASP Up Ack----->|
        \                         |\n          |                        |                          |\n
        \         |--NOTIFY(AS-INACTIVE)-->|                          |\n          |
        \                       |                          |\n          |<-----------------------------ASP
        Up---------------|\n          |----------------------------ASP Up Ack------------>|\n
        \         |                        |                          |\n          |--------------------------NOTIFY(AS-INACTIVE)----->|\n
        \         |                        |                          |\n          |<--ASP
        Active (Ldshr)---|                          |\n          |-----ASP-Active
        Ack---->|                          |\n          |                        |
        \                         |\n          |---NOTIFY (AS-ACTIVE)-->|                          |\n
        \         |-----------------------------NOTIFY(AS-ACTIVE)---->|\n          |
        \                       |                          |\n          |<---------------------------ASP
        Active (Ldshr)-----|\n          |------------------------------ASP Active
        Ack------>|\n          |                        |                          |\n"
      title: 5.1.3.  Two ASPs in an Application Server ("1+1" Sparing,
    - contents:
      - "5.1.4.  Three ASPs in an Application Server (\"n+k\" Sparing,\n        Loadsharing
        Case)\n   This scenario shows example M3UA message flows for the establishment\n
        \  of traffic between an SGP and three ASPs in the same Application\n   Server,
        where two of the ASPs are brought to the state ASP-ACTIVE and\n   subsequently
        share the load.  In this case, a minimum of two ASPs are\n   required to handle
        the total traffic load (2+1 sparing).\n        SGP                 ASP1                ASP2
        \               ASP3\n          |                   |                   |
        \                  |\n          |<------ASP Up------|                   |
        \                  |\n          |-----ASP Up Ack--->|                   |
        \                  |\n          |                   |                   |
        \                  |\n          |NTFY(AS-INACTIVE)->|                   |
        \                  |\n          |                   |                   |
        \                  |\n          |<-------------------------ASP Up-------|
        \                  |\n          |------------------------ASP Up Ack---->|
        \                  |\n          |                   |                   |
        \                  |\n          |------------------NOTIFY(AS-INACTIVE)->|
        \                  |\n          |                   |                   |
        \                  |\n          |<--------------------------------------------ASP
        Up--------|\n          |--------------------------------------------ASP Up
        Ack---->|\n          |                   |                   |                   |\n
        \         |--------------------------------------NOTIFY(AS-INACTIVE)->|\n
        \         |                   |                   |                   |\n
        \         |                   |                   |                   |\n
        \         |<--ASP Act (Ldshr)-|                   |                   |\n
        \         |----ASP Act Ack--->|                   |                   |\n
        \         |                   |                   |                   |\n
        \         |                   |                   |                   |\n
        \         |<-------------------ASP Act. (Ldshr)---|                   |\n
        \         |----------------------ASP Act Ack----->|                   |\n
        \         |                   |                   |                   |\n
        \         |--NTFY(AS-ACTIVE)->|                   |                   |\n
        \         |--------------------NOTIFY(AS-ACTIVE)->|                   |\n
        \         |----------------------------------------NOTIFY(AS-ACTIVE)->|\n
        \         |                   |                   |                   |\n
        \         |                   |                   |                   |\n"
      title: 5.1.4.  Three ASPs in an Application Server ("n+k" Sparing,
    title: 5.1.  Establishment of Association and Traffic between SGPs and ASPs
  - contents:
    - '5.2.  ASP Traffic Failover Examples

      '
    - contents:
      - "5.2.1.  1+1 Sparing, Withdrawal of ASP, Backup Override\n   Following from
        the example in Section 5.1.2, ASP1 withdraws from\n   service:\n               SGP
        \                     ASP1                       ASP2\n                |                        |
        \                         |\n                |<-----ASP Inactive------|                          |\n
        \               |----ASP Inactive Ack--->|                          |\n                |
        \                       |                          |\n                |----NTFY(AS-PENDING)--->|
        \                         |\n                |-----------------------NTFY(AS-PENDING)----------->|\n
        \               |                        |                          |\n                |<-----------------------------
        ASP Active----------|\n                |-----------------------------ASP Active
        Ack------->|\n                |                        |                          |\n
        \               |----NTFY(AS-ACTIVE)---->|                          |\n                |-----------------------NTFY(AS-ACTIVE)------------>|\n
        \  Note: If the SGP M3UA layer detects the loss of the M3UA peer (e.g.,\n
        \  M3UA heartbeat loss or detection of SCTP failure), the initial ASP\n   Inactive
        message exchange (i.e., SGP to ASP1) would not occur.\n"
      title: 5.2.1.  1+1 Sparing, Withdrawal of ASP, Backup Override
    - contents:
      - "5.2.2.  1+1 Sparing, Backup Override\n   Following on from the example in
        Section 5.1.2, ASP2 wishes to\n   Override ASP1 and take over the traffic:\n
        \              SGP                      ASP1                       ASP2\n
        \               |                        |                          |\n                |<-----------------------------
        ASP Active----------|\n                |------------------------------ASP
        Active Ack------>|\n                |----NTFY(Alt ASP-Act)-->|                          |\n
        \               |                        |                          |\n"
      title: 5.2.2.  1+1 Sparing, Backup Override
    - contents:
      - "5.2.3.  n+k Sparing, Loadsharing Case, Withdrawal of ASP\n   Following from
        the example in Section 5.1.4, ASP1 withdraws from\n   service:\n        SGP
        \                ASP1                ASP2                ASP3\n          |
        \                  |                   |                   |\n          |<----ASP
        Inact.----|                   |                   |\n          |---ASP Inact
        Ack-->|                   |                   |\n          |                   |
        \                  |                   |\n          |--NTFY(Ins. ASPs)->|
        \                  |                   |\n          |---------------------------------------NOTIFY(Ins.
        ASPs)-->|\n          |                   |                   |                   |\n
        \         |                   |                   |                   |\n
        \         |<----------------------------------------ASP Act (Ldshr)---|\n
        \         |------------------------------------------ASP Act (Ack)--->|\n
        \         |                   |                   |                   |\n
        \         |-NTFY(AS-ACTIVE)-->|                   |                   |\n
        \         |-------------------NOTIFY(AS-ACTIVE)-->|                   |\n
        \         |---------------------------------------NOTIFY(AS-ACTIVE)-->|\n
        \         |                   |                   |                   |\n
        \         |                   |                   |                   |\n
        \  For the Notify message to be sent, the SG maintains knowledge of the\n
        \  minimum ASP resources required (e.g., if the SG knows that \"n+k\" =\n
        \  \"2+1\" for a Loadshare AS and \"n\" currently equals \"1\").\n   Note:
        If the SGP detects loss of the ASP1 M3UA peer (e.g., M3UA\n   heartbeat loss
        or detection of SCTP failure), the initial ASP\n   Inactive message exchange
        (i.e., SGP-ASP1) would not occur.\n"
      title: 5.2.3.  n+k Sparing, Loadsharing Case, Withdrawal of ASP
    title: 5.2.  ASP Traffic Failover Examples
  - contents:
    - "5.3.  Normal Withdrawal of an ASP from an Application Server\n      and Teardown
      of an Association\n   An ASP that is now confirmed in the state ASP-INACTIVE
      (i.e., the ASP\n   has received an ASP Inactive Ack message) may now proceed
      to the\n   ASP-DOWN state, if it is to be removed from service.  Following from\n
      \  Section 5.2.1 or 5.2.3, where ASP1 has moved to the \"Inactive\" state:\n
      \              SGP                            ASP1\n                |                              |\n
      \               |<-----ASP Inactive (RCn)------|    RC: Routing Context\n                |----ASP
      Inactive Ack (RCn)--->|\n                |                              |\n
      \               |<-----DEREGISTER REQ(RCn)-----|    See Notes\n                |
      \                             |\n                |---DEREGISTER RESP(LRCn,RCn)->|\n
      \               |                              |\n                :                              :\n
      \               |                              |\n                |<-----------ASP
      Down----------|\n                |---------ASP Down Ack-------->|\n                |
      \                             |\n   Note: The Deregistration procedure will
      typically be used if the ASP\n   previously used the Registration procedures
      for configuration within\n   the Application Server.  ASP Inactive and Deregister
      messages\n   exchanges may contain multiple Routing Contexts.\n   The ASP should
      be in the ASP-INACTIVE state and should have\n   deregistered in all its Routing
      Contexts before attempting to move to\n   the ASP-DOWN state.\n"
    title: 5.3.  Normal Withdrawal of an ASP from an Application Server
  - contents:
    - '5.4.  Auditing Examples

      '
    - contents:
      - "5.4.1.  SG State: Uncongested/Available\n          ASP                          SGP\n
        \         ---                          ---\n           |  -------- DAUD --------->
        \ |\n           |  <------ SCON(0) --------  |\n           |  <------- DAVA
        ----------  |\n"
      title: '5.4.1.  SG State: Uncongested/Available'
    - contents:
      - "5.4.2.  SG State: Congested (Congestion Level=2) / Available\n          ASP
        \                         SGP\n          ---                          ---\n
        \          |  -------- DAUD --------->  |\n           |  <------ SCON(2) --------
        \ |\n           |  <------- DAVA ----------  |\n"
      title: '5.4.2.  SG State: Congested (Congestion Level=2) / Available'
    - contents:
      - "5.4.3.  SG State: Unknown/Available\n          ASP                          SGP\n
        \         ---                          ---\n           |  -------- DAUD --------->
        \ |\n           |  <------- DAVA ----------  |\n"
      title: '5.4.3.  SG State: Unknown/Available'
    - contents:
      - "5.4.4.  SG State: Unavailable\n          ASP                          SGP\n
        \         ---                          ---\n           |  -------- DAUD --------->
        \ |\n           |  <------- DUNA ----------  |\n"
      title: '5.4.4.  SG State: Unavailable'
    title: 5.4.  Auditing Examples
  - contents:
    - '5.5.  M3UA/MTP3-User Boundary Examples

      '
    - contents:
      - "5.5.1.  At an ASP\n   This section describes the primitive mapping between
        the MTP3 User\n   and the M3UA layer at an ASP.\n"
      - contents:
        - '5.5.1.1.  Support for MTP-TRANSFER Primitives at the ASP

          '
        - contents:
          - "5.5.1.1.1.  Support for MTP-TRANSFER Request Primitive\n   When the MTP3-User
            on the ASP has data to send to a remote MTP3-User,\n   it uses the MTP-TRANSFER
            request primitive.  The M3UA layer at the\n   ASP will do the following
            when it receives an MTP-TRANSFER request\n   primitive from the M3UA user:\n
            \     - Determine the correct SGP.\n      - Determine the correct association
            to the chosen SGP.\n      - Determine the correct stream in the association
            (e.g.,\n        based on SLS).\n      - Determine whether to complete
            the optional fields of the DATA\n        message.\n      - Map the MTP-TRANSFER
            request primitive into the Protocol Data\n        field of a DATA message.\n
            \     - Send the DATA message to the remote M3UA peer at the SGP,\n        over
            the SCTP association.\n            SGP                       ASP\n             |
            \                        |\n             |<-----DATA Message-------|<--MTP-TRANSFER
            req.\n             |                         |\n"
          title: 5.5.1.1.1.  Support for MTP-TRANSFER Request Primitive
        - contents:
          - "5.5.1.1.2.  Support for the MTP-TRANSFER Indication Primitive\n   When
            the M3UA layer on the ASP receives a DATA message from the M3UA\n   peer
            at the remote SGP, it will do the following:\n      - Evaluate the optional
            fields of the DATA message, if present.\n      - Map the Protocol Data
            field of a DATA message into the\n        MTP-TRANSFER indication primitive.\n
            \     - Pass the MTP-TRANSFER indication primitive to the user part.  In\n
            \       case of multiple user parts, the optional fields of the Data\n
            \       message are used to determine the concerned user part.\n            SGP
            \                      ASP\n             |                         |\n
            \            |------Data Message------>|-->MTP-Transfer ind.\n             |
            \                        |\n"
          title: 5.5.1.1.2.  Support for the MTP-TRANSFER Indication Primitive
        - contents:
          - "5.5.1.1.3.  Support for ASP Querying of SS7 Destination States\n   There
            are situations such as temporary loss of connectivity to the\n   SGP that
            may cause the M3UA layer at the ASP to audit SS7 destination\n   availability/congestion
            states.  Note: there is no primitive for the\n   MTP3-User to request
            this audit from the M3UA layer, as this is\n   initiated by an internal
            M3UA management function.\n            SGP                        ASP\n
            \            |                          |\n             |<----------DAUD-----------|\n
            \            |<----------DAUD-----------|\n             |<----------DAUD-----------|\n
            \            |                          |\n             |                          |\n"
          title: 5.5.1.1.3.  Support for ASP Querying of SS7 Destination States
        title: 5.5.1.1.  Support for MTP-TRANSFER Primitives at the ASP
      title: 5.5.1.  At an ASP
    - contents:
      - "5.5.2.  At an SGP\n   This section describes the primitive mapping between
        the MTP3-User\n   and the M3UA layer at an SGP.\n"
      - contents:
        - "5.5.2.1.  Support for MTP-TRANSFER Request Primitive at the SGP\n   When
          the M3UA layer at the SGP has received DATA messages from its\n   peer destined
          to the SS7 network, it will do the following:\n      - Evaluate the optional
          fields of the DATA message, if present, to\n        determine the Network
          Appearance.\n      - Map the Protocol data field of the DATA message into
          an\n        MTP-TRANSFER request primitive.\n      - Pass the MTP-TRANSFER
          request primitive to the MTP3 of the\n        concerned Network Appearance.\n
          \                              SGP                        ASP\n                                |
          \                         |\n           <---MTP-TRANSFER req.|<---------DATA
          -----------|\n                                |                          |\n"
        title: 5.5.2.1.  Support for MTP-TRANSFER Request Primitive at the SGP
      - contents:
        - "5.5.2.2.  Support for MTP-TRANSFER Indication Primitive at the SGP\n   When
          the MTP3 layer at the SGP has data to pass its user parts, it\n   will use
          the MTP-TRANSFER indication primitive.  The M3UA layer at\n   the SGP will
          do the following when it receives an MTP-TRANSFER\n   indication primitive:\n
          \     - Determine the correct AS, using the distribution function;\n      -
          Select an ASP in the ASP-ACTIVE state.\n      - Determine the correct association
          to the chosen ASP.\n      - Determine the correct stream in the SCTP association
          (e.g.,\n        based on SLS).\n      - Determine whether to complete the
          optional fields of the DATA\n        message.\n      - Map the MTP-TRANSFER
          indication primitive into the Protocol Data\n        field of a DATA message.\n
          \     - Send the DATA message to the remote M3UA peer in the ASP, over\n
          \       the SCTP association.\n                              SGP                        ASP\n
          \                              |                          |\n          --MTP-TRANSFER
          ind.->|-----------DATA --------->|\n                               |                          |\n"
        title: 5.5.2.2.  Support for MTP-TRANSFER Indication Primitive at the SGP
      - contents:
        - "5.5.2.3.  Support for MTP-PAUSE, MTP-RESUME, MTP-STATUS Indication\n          Primitives\n
          \  The MTP-PAUSE, MTP-RESUME, and MTP-STATUS indication primitives from\n
          \  the MTP3 upper layer interface at the SGP need to be made available\n
          \  to the remote MTP3 User Part lower-layer interface at the concerned\n
          \  ASP(s).\n"
        - contents:
          - "5.5.2.3.1.  Destination Unavailable\n   The MTP3 layer at the SGP will
            generate an MTP-PAUSE indication\n   primitive when it determines locally
            that an SS7 destination is\n   unreachable.  The M3UA layer will map this
            primitive to a DUNA\n   message.  The SGP M3UA layer determines the set
            of concerned ASPs to\n   be informed based on internal SS7 network information
            associated with\n   the MTP-PAUSE indication primitive indication.\n                      SGP
            \                      ASP\n                       |                         |\n
            \   --MTP-PAUSE ind.-->|---------DUNA----------->|--MTP-PAUSE ind.-->\n
            \                      |                         |\n"
          title: 5.5.2.3.1.  Destination Unavailable
        - contents:
          - "5.5.2.3.2.  Destination Available\n   The MTP3 at the SGP will generate
            an MTP-RESUME indication primitive\n   when it determines locally that
            an SS7 destination that was\n   previously unreachable is now reachable.
            \ The M3UA layer will map\n   this primitive to a DAVA message.  The SGP
            M3UA determines the set of\n   concerned ASPs to be informed based on
            internal SS7 network\n   information associated with the MTP-RESUME indication
            primitive.\n                        SGP                       ASP\n                         |
            \                        |\n     --MTP-RESUME ind.-->|-----------DAVA--------->|--MTP-RESUME
            ind.-->\n                         |                         |\n"
          title: 5.5.2.3.2.  Destination Available
        - contents:
          - "5.5.2.3.3.  SS7 Network Congestion\n   The MTP3 layer at the SGP will
            generate an MTP-STATUS indication\n   primitive when it determines locally
            that the route to an SS7\n   destination is congested.  The M3UA layer
            will map this primitive to\n   a SCON message.  It will determine which
            ASP(s) to send the SCON\n   message to, based on the intended Application
            Server.\n                        SGP                       ASP\n                         |
            \                        |\n     --MTP-STATUS ind.-->|-----------SCON--------->|--MTP-STATUS
            ind.-->\n                         |                         |\n"
          title: 5.5.2.3.3.  SS7 Network Congestion
        - contents:
          - "5.5.2.3.4.  Destination User Part Unavailable\n   The MTP3 layer at the
            SGP will generate an MTP-STATUS indication\n   primitive when it receives
            an UPU message from the SS7 network.  The\n   M3UA layer will map this
            primitive to a DUPU message.  It will\n   determine which ASP(s) to send
            the DUPU to based on the intended\n   Application Server.\n                      SGP
            \                      ASP\n                       |                         |\n
            \  --MTP-STATUS ind.-->|----------DUPU---------->|--MTP-STATUS ind.-->\n
            \                      |                         |\n"
          title: 5.5.2.3.4.  Destination User Part Unavailable
        title: 5.5.2.3.  Support for MTP-PAUSE, MTP-RESUME, MTP-STATUS Indication
      title: 5.5.2.  At an SGP
    title: 5.5.  M3UA/MTP3-User Boundary Examples
  - contents:
    - "5.6.  Examples for IPSP Communication\n   These scenarios show a basic example
      for IPSP communication for the\n   three phases of the connection (establishment,
      data exchange,\n   disconnection).  It is assumed that the SCTP association
      is already\n   set up.  Both single exchange and double exchange behavior are\n
      \  included for illustrative purposes.\n"
    - contents:
      - "5.6.1.  Single Exchange\n               IPSP-A                           IPSP-B\n
        \                |                                |\n                 |-------------ASP
        Up------------>|\n                 |<----------ASP Up Ack-----------|\n                 |
        \                               |\n                 |<------- ASP Active(RCb)--------|
        \ RC: Routing Context\n                 |-----ASP Active Ack (RCb)------>|
        \     (optional)\n                 |                                |\n                 |
        \                               |\n                 |<=========  DATA (RCb)
        ========>|\n                 |                                |\n                 |<-----ASP
        Inactive (RCb)--------|  RC: Routing Context\n                 |----ASP Inactive
        Ack (RCb)----->|      (optional)\n                 |                                |\n
        \                |<-----------ASP Down------------|\n                 |---------ASP
        Down Ack---------->|\n                 |                                |\n
        \  Routing Context is previously agreed to be the same in both\n   directions.\n"
      title: 5.6.1.  Single Exchange
    - contents:
      - "5.6.2.  Double Exchange\n               IPSP-A                           IPSP-B\n
        \                |                                |\n                 |<-------------ASP
        Up------------|\n                 |-----------ASP Up Ack---------->|\n                 |
        \                               |\n                 |-------------ASP Up------------>|
        \ (optional)\n                 |<----------ASP Up Ack-----------|  (optional)\n
        \                |                                |\n                 |<-------
        ASP Active(RCb)--------|  RC: Routing Context\n                 |-----ASP
        Active Ack (RCb)------>|      (optional)\n                 |                                |\n
        \                |------- ASP Active(RCa)-------->|  RC: Routing Context\n
        \                |<-----ASP Active Ack (RCa)------|      (optional)\n                 |
        \                               |\n                 |<=========  DATA (RCa)
        =========|\n                 |==========  DATA (RCb) ========>|\n                 |
        \                               |\n                 |<-----ASP Inactive (RCb)--------|
        \ RC: Routing Context\n                 |----ASP Inactive Ack (RCb)----->|\n
        \                |                                |\n                 |------ASP
        Inactive (RCa)------->|  RC: Routing Context\n                 |<----ASP Inactive
        Ack (RCa)-----|\n                 |                                |\n                 |<-----------ASP
        Down------------|\n                 |---------ASP Down Ack---------->|\n                 |
        \                               |\n                 |------------ASP Down----------->|
        \ (optional)\n                 |<--------ASP Down Ack-----------|  (optional)\n
        \                |                                |\n   In this approach,
        only one single exchange of ASP Up message can be\n   considered sufficient
        since the response by the other peer can be\n   considered a notice that it
        is in ASP_UP state.\n   For the same reason, only one ASP Down message is
        needed, since once\n   an IPSP receives ASP_Down ack message it is itself
        considered to be\n   in the ASP_Down state and not allowed to receive ASPSM
        messages.\n"
      title: 5.6.2.  Double Exchange
    title: 5.6.  Examples for IPSP Communication
  title: 5.  Examples of M3UA Procedures
- contents:
  - "6.  Security Considerations\n   Implementations MUST follow the normative guidance
    of RFC3788 [11] on\n   the integration and usage of security mechanisms in SIGTRAN\n
    \  protocols.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document contains no new actions for IANA.  The
    subsections\n   below are retained for historical purposes.\n"
  - contents:
    - "7.1.  SCTP Payload Protocol Identifier\n   IANA has assigned an M3UA value
      for the Payload Protocol Identifier\n   in the SCTP DATA chunk.  The following
      SCTP Payload Protocol\n   Identifier has been registered:\n         M3UA    \"3\"\n
      \  The SCTP Payload Protocol Identifier value \"3\" SHOULD be included in\n
      \  each SCTP DATA chunk, to indicate that the SCTP is carrying the M3UA\n   protocol.
      \ The value \"0\" (unspecified) is also allowed but any other\n   values MUST
      not be used.  This Payload Protocol Identifier is not\n   directly used by SCTP
      but MAY be used by certain network entities to\n   identify the type of information
      being carried in a DATA chunk.\n   The User Adaptation peer MAY use the Payload
      Protocol Identifier as a\n   way of determining additional information about
      the data being\n   presented to it by SCTP.\n"
    title: 7.1.  SCTP Payload Protocol Identifier
  - contents:
    - "7.2.  M3UA Port Number\n   IANA has registered SCTP (and UDP/TCP) Port Number
      2905 for M3UA.  It\n   is recommended that SGPs use this SCTP port number for
      listening for\n   new connections.  SGPs MAY also use statically configured
      SCTP port\n   numbers instead.\n"
    title: 7.2.  M3UA Port Number
  - contents:
    - "7.3.  M3UA Protocol Extensions\n   This protocol may also be extended through
      IANA in three ways:\n      - Through definition of additional message classes.\n
      \     - Through definition of additional message types.\n      - Through definition
      of additional message parameters.\n   The definition and use of new message
      classes, types, and parameters\n   is an integral part of SIGTRAN adaptation
      layers.  Thus, these\n   extensions are assigned by IANA through an IETF Consensus
      action as\n   defined in Guidelines for Writing an IANA Considerations Section
      in\n   RFCs [23].\n   The proposed extension must in no way adversely affect
      the general\n   working of the protocol.\n"
    - contents:
      - "7.3.1.  IETF-Defined Message Classes\n   The documentation for a new message
        class MUST include the following\n   information:\n      (a) A long and short
        name for the new message class.\n      (b) A detailed description of the purpose
        of the message class.\n"
      title: 7.3.1.  IETF-Defined Message Classes
    - contents:
      - "7.3.2.  IETF Defined Message Types\n   The documentation for a new message
        type MUST include the following\n   information:\n      (a) A long and short
        name for the new message type.\n      (b) A detailed description of the structure
        of the message.\n      (c) A detailed definition and description of intended
        use for each\n          field within the message.\n      (d) A detailed procedural
        description of the use of the new\n          message type within the operation
        of the protocol.\n      (e) A detailed description of error conditions when
        receiving this\n          message type.\n   When an implementation receives
        a message type that it does not\n   support, it MUST respond with an Error
        (ERR) message (\"Unsupported\n   Message Type\").\n"
      title: 7.3.2.  IETF Defined Message Types
    - contents:
      - "7.3.3.  IETF-Defined Parameter Extension\n   Documentation of the message
        parameter MUST contain the following\n   information:\n      (a) Name of the
        parameter type.\n      (b) Detailed description of the structure of the parameter
        field.\n          This structure MUST conform to the general type-length-value\n
        \         format described in Section 3.2.\n      (c) Detailed definition
        of each component of the parameter value.\n      (d) Detailed description
        of the intended use of this parameter\n          type, and an indication of
        whether and under what\n          circumstances multiple instances of this
        parameter type may be\n          found within the same message.\n"
      title: 7.3.3.  IETF-Defined Parameter Extension
    title: 7.3.  M3UA Protocol Extensions
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   The authors would like to thank Antonio Roque Alvarez,
    Joyce\n   Archibald, Tolga Asveren, Maria-Cruz Bartolome-Rodrigo, Dan Brendes,\n
    \  Antonio Canete, Nikhil Jain, Roland Jesske, Joe Keller, Kurt Kite,\n   Ming
    Lin, Steve Lorusso, Naoto Makinae, Howard May, Francois\n   Mouillaud, Barry Nagelberg,
    Neil Olson, Heinz Prantner, Shyamal\n   Prasad, Mukesh Punhani, Selvam Rengasami,
    John Schantz, Ray Singh,\n   Michael Tuexen, Nitin Tomar, Gery Verwimp, Tim Vetter,
    Kazuo\n   Watanabe, Ben Wilson, and many others for their valuable comments and\n
    \  suggestions.\n"
  title: 8.  Acknowledgements
- contents:
  - "9.  Document Contributors\n   Ian Rytina - Ericsson\n   Guy Mousseau - Nortel
    Networks\n   Lyndon Ong - Ciena\n   Hanns Juergen Schwarzbauer - Siemens\n   Klaus
    Gradischnig - Detecon Inc.\n   Mallesh Kalla - Telcordia\n   Normand Glaude -
    Performance Technologies\n   Brian Bidulock - OpenSS7\n   John Loughney - Nokia\n
    \  Greg Sidebottom - Signatus Technologies\n"
  title: 9.  Document Contributors
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [1]  ITU-T Recommendations Q.761 to Q.767,
      \"Signalling System No.7\n        (SS7) - ISDN User Part (ISUP)\"\n   [2]  ANSI
      T1.113 - \"Signaling System Number 7 - ISDN User Part\"\n   [3]  ETSI ETS 300
      356-1 \"Integrated Services Digital Network (ISDN);\n        Signalling System
      No.7; ISDN User Part (ISUP) version 2 for the\n        international interface;
      Part 1: Basic services\"\n   [4]  ITU-T Recommendations Q.711 to Q.715, \"Signalling
      System No.  7\n        (SS7) - Signalling Connection Control Part (SCCP)\"\n
      \  [5]  ANSI T1.112 \"Signaling System Number 7 - Signaling Connection\n        Control
      Part\"\n   [6]  ETSI ETS 300 009-1, \"Integrated Services Digital Network (ISDN);\n
      \       Signalling System No.7; Signalling Connection Control Part\n        (SCCP)
      (connectionless and connection-oriented class 2) to\n        support international
      interconnection; Part 1: Protocol\n        specification\"\n   [7]  ITU-T Recommendations
      Q.700 to Q.705, \"Signalling System No.  7\n        (SS7) - Message Transfer
      Part (MTP)\"\n   [8]  ANSI T1.111 \"Signaling System Number 7 - Message Transfer
      Part\"\n   [9]  ETSI ETS 300 008-1, \"Integrated Services Digital Network (ISDN);\n
      \       Signalling System No.7; Message Transfer Part (MTP) to support\n        international
      interconnection; Part 1: Protocol specification\"\n   [10] Yergeau, F., \"UTF-8,
      a transformation format of ISO 10646\", STD\n        63, RFC 3629, November
      2003.\n   [11] Loughney, J., Tuexen, M., and J.  Pastor-Balbas, \"Security\n
      \       Considerations for Signaling Transport (SIGTRAN) Protocols\", RFC\n
      \       3788, June 2004.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [12] Ong, L., Rytina, I., Garcia, M., Schwarzbauer,
      H., Coene, L.,\n        Lin, H., Juhasz, I., Holdrege, M., and C. Sharp, \"Framework\n
      \       Architecture for Signaling Transport\", RFC 2719, October 1999.\n   [13]
      ITU-T Recommendation Q.720, \"Telephone User Part\"\n   [14] ITU-T Recommendations
      Q.771 to Q.775 \"Signalling System No.  7\n        (SS7) - Transaction Capabilities
      (TCAP)\"\n   [15] ANSI T1.114 \"Signaling System Number 7 - Transaction\n        Capabilities
      Application Part\"\n   [16] ETSI ETS 300 287-1, \"Integrated Services Digital
      Network (ISDN);\n        Signalling System No.7; Transaction Capabilities (TC)
      version 2;\n        Part 1: Protocol specification\"\n   [17] 3G TS 25.410 V4.0.0
      (2001-04) \"Technical Specification - 3rd\n        Generation partnership Project;
      Technical Specification Group\n        Radio Access Network; UTRAN Iu Interface:
      General Aspects and\n        Principles\"\n   [18] Stewart, R., Xie, Q., Morneault,
      K., Sharp, C., Schwarzbauer,\n        H., Taylor, T., Rytina, I., Kalla, M.,
      Zhang, L., and V. Paxson,\n        \"Stream Control Transmission Protocol\",
      RFC 2960, October 2000.\n   [19] ITU-T Recommendation Q.2140 \"B-ISDN ATM Adaptation
      Layer -\n        Service Specific Coordination Function for signalling at the\n
      \       Network Node Interface (SSCF at NNI)\"\n   [20] ITU-T Recommendation
      Q.2110 \"B-ISDN ATM Adaptation Layer -\n        Service Specific Connection
      Oriented Protocol (SSCOP)\"\n   [21] Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [22]
      ITU-T Recommendation Q.2210 \"Message Transfer Part Level 3\n        functions
      and messages using the services of ITU Recommendation\n        Q.2140\"\n   [23]
      Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n        Considerations
      Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [24] Morneault, K., Dantu,
      R., Sidebottom, G., Bidulock, B., and J.\n        Heitz, \"Signaling System
      7 (SS7) Message Transfer Part 2 (MTP2)\n        - User Adaptation Layer\", RFC
      3331, September 2002.\n   [25] George, T., Bidulock, B., Dantu, R., Schwarzbauer,
      H., and K.\n        Morneault, \"Signaling System 7 (SS7) Message Transfer Part
      2\n        (MTP2) - User Peer-to-Peer Adaptation Layer (M2PA)\", RFC 4165,\n
      \       September 2005.\n   [26] Telecommunication Technology Committee (TTC)
      Standard JT-Q704,\n        \"Message Transfer Part Signaling Network Functions\",
      April 28,\n        1992.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - 'Appendix A

    '
  - contents:
    - "A.1.  Signalling Network Architecture\n   A Signalling Gateway is used to support
      the transport of MTP3-User\n   signalling traffic received from the SS7 network
      to multiple\n   distributed ASPs (e.g., MGCs and IP Databases).  Clearly, the
      M3UA\n   protocol is not designed to meet the performance and reliability\n
      \  requirements for such transport by itself.  However, the conjunction\n   of
      distributed architecture and redundant networks provides support\n   for reliable
      transport of signalling traffic over IP.  The M3UA\n   protocol is flexible
      enough to allow its operation and management in\n   a variety of physical configurations,
      enabling Network Operators to\n   meet their performance and reliability requirements.\n
      \  To meet the stringent SS7 signalling reliability and performance\n   requirements
      for carrier grade networks, Network Operators might\n   require that no single
      point of failure is present in the end-to-end\n   network architecture between
      an SS7 node and an IP-based application.\n   This can typically be achieved
      through the use of redundant SGPs or\n   SGs, redundant hosts, and the provision
      of redundant QOS-bounded IP\n   network paths for SCTP Associations between
      SCTP End Points.\n   Obviously, the reliability of the SG, the MGC, and other
      IP-based\n   functional elements also needs to be taken into account.  The\n
      \  distribution of ASPs and SGPs within the available Hosts MAY also be\n   considered.
      \ As an example, for a particular Application Server, the\n   related ASPs could
      be distributed over at least two Hosts.\n   One example of a physical network
      architecture relevant to SS7\n   carrier grade operation in the IP network domain
      is shown in Figure\n   A-1, below:\n          SGs                                     MGCs\n
      \  Host#1 **************                          ************** Host#3\n          *
      \ ********__*__________________________*__********  *   =\n          *  *SGP1.1*__*_____
      \     _______________*__* ASP1 *  *  MGC1\n          *  ********  *     \\    /
      \              *  ********  *\n          *  ********__*______\\__/________________*__********
      \ *\n          *  *SGP2.1*__*_______\\/______      _____*__* ASP2 *  *\n          *
      \ ********  *       /\\      |    |     *  ********  *\n          *      :     *
      \     /  \\     |    |     *      :     *\n          *  ********  *     /    \\
      \   |    |     *  ********  *\n          *  * SGPn *  *     |    |    |    |
      \    *  * ASPn *  *\n          *  ********  *     |    |    |    |     *  ********
      \ *\n          **************     |    |    |    |     **************\n                             |
      \   |    \\    /\n   Host#2 **************     |    |     \\  /      **************
      Host#4\n          *  ********__*_____|    |______\\/_______*__********  *   =\n
      \         *  *SGP1.2*__*_________________/\\_______*__* ASP1 *  *  MGC2\n          *
      \ ********  *                /  \\      *  ********  *\n          *  ********__*_______________/
      \   \\_____*__********  *\n          *  *SGP2.2*__*__________________________*__*
      ASP2 *  *\n          *  ********  *                          *  ********  *\n
      \         *      :     *     SCTP Associations    *      :     *\n          *
      \ ********  *                          *  ********  *\n          *  * SGPn *
      \ *                          *  * ASPn *  *\n          *  ********  *                          *
      \ ********  *\n          **************                          **************\n
      \  SGP1.1 and SGP1.2 are part of SG1\n   SGP2.1 and SGP2.2 are part of SG2\n
      \                        Figure A-1 - Physical Model\n   In this model, each
      host may have many application processes.  In the\n   case of the MGC, an ASP
      may provide service to one or more\n   Application Servers, and is identified
      as an SCTP end point.  One or\n   more Signalling Gateway Processes make up
      a single Signalling\n   Gateway.\n   This example model can also be applied
      to IPSP-IPSP signalling.  In\n   this case, each IPSP may have its services
      distributed across 2 or\n   more hosts, and may have multiple server processes
      on each host.\n   In the example above, each signalling process (SGP, ASP, or
      IPSP) is\n   the end point to more than one SCTP association, leading to more
      than\n   one other signalling processes.  To support this, a signalling\n   process
      must be able to support distribution of M3UA messages to many\n   simultaneous
      active associations.  This message distribution function\n   is based on the
      status of provisioned Routing Keys, the status of the\n   signalling routes
      to signalling points in the SS7 network, and the\n   redundancy model (active-standby,
      load sharing, broadcast, n+k) of\n   the remote signalling processes.\n   For
      carrier grade networks, the failure or isolation of a particular\n   signalling
      process should not cause stable calls or transactions to\n   be lost.  This
      implies that signalling processes need, in some cases,\n   to share the call/transaction
      state or be able to pass the call state\n   information between each other.
      \ In the case of ASPs performing call\n   processing, coordination may also
      be required with the related Media\n   Gateway to transfer the MGC control for
      a particular trunk\n   termination.  However, this sharing or communication
      of\n   call/transaction state information is outside the scope of this\n   document.\n
      \  This model serves as an example.  M3UA imposes no restrictions as to\n   the
      exact layout of the network elements, the message distribution\n   algorithms,
      and the distribution of the signalling processes.\n   Instead, it provides a
      framework and a set of messages that allow for\n   a flexible and scalable signalling
      network architecture, aiming to\n   provide reliability and performance.\n"
    title: A.1.  Signalling Network Architecture
  - contents:
    - 'A.2.  Redundancy Models

      '
    - contents:
      - "A.2.1.  Application Server Redundancy\n   At the SGP, an Application Server
        list contains active and inactive\n   ASPs to support ASP broadcast, loadsharing,
        and failover procedures.\n   The list of ASPs within a logical Application
        Server is kept updated\n   in the SGP to reflect the active Application Server
        Process(es).\n   For example, in the network shown in Figure 1, all messages
        to DPC x\n   could be sent to ASP1 in Host3 or ASP1 in Host4.  The AS list
        at SGP1\n   in Host 1 might look like the following:\n      Routing Key {DPC=x)
        - \"Application Server #1\"\n         ASP1/Host3  - State = Active\n         ASP1/Host4
        \ - State = Inactive\n   In this \"1+1\" redundancy case, ASP1 in Host3 would
        be sent any\n   incoming message with DPC=x.  ASP1 in Host4 would normally
        be brought\n   to the \"active\" state upon failure of, or loss of connectivity
        to,\n   ASP1/Host1.\n   The AS List at SGP1 in Host1 might also be set up
        in loadshare mode:\n      Routing Key {DPC=x) - \"Application Server #1\"\n
        \        ASP1/Host3 - State = Active\n         ASP1/Host4 - State = Active\n
        \  In this case, both the ASPs would be sent a portion of the traffic.\n   For
        example, the two ASPs could together form a database, where\n   incoming queries
        may be sent to any active ASP.\n   Care might need to be exercised by a Network
        Operator in the\n   selection of the routing information to be used as the
        Routing Key\n   for a particular AS.\n   In the process of failover, it is
        recommended that, in the case of\n   ASPs supporting call processing, stable
        calls do not fail.  It is\n   possible that calls in \"transition\" may fail,
        although measures of\n   communication between the ASPs involved can be used
        to mitigate this.\n   For example, the two ASPs may share call state via shared
        memory, or\n   may use an ASP to ASP protocol to pass call state information.
        \ Any\n   ASP-to-ASP protocol to support this function is outside the scope
        of\n   this document.\n"
      title: A.2.1.  Application Server Redundancy
    - contents:
      - "A.2.2.  Signalling Gateway Redundancy\n   Signalling Gateways may also be
        distributed over multiple hosts.\n   Much like the AS model, SGs may comprise
        one or more SG Processes\n   (SGPs), distributed over one or more hosts, using
        an active/backup or\n   a loadsharing model.  Should an SGP lose all or partial
        SS7\n   connectivity and other SGPs exist, the SGP may terminate the SCTP\n
        \  associations to the concerned ASPs.\n   It is therefore possible for an
        ASP to route signalling messages\n   destined to the SS7 network using more
        than one SGP.  In this model,\n   a Signalling Gateway is deployed as a cluster
        of hosts acting as a\n   single SG.  A primary/backup redundancy model is
        possible, where the\n   unavailability of the SCTP association to a primary
        SGP could be used\n   to reroute affected traffic to an alternate SGP.  A
        loadsharing model\n   is possible, where the signalling messages are loadshared
        between\n   multiple SGPs.  A broadcast model is also possible, where signalling\n
        \  messages are sent to each active SGP in the SG.  The distribution of\n
        \  the MTP3-user messages over the SGPs should be done in such a way to\n
        \  minimize message missequencing, as required by the SS7 User Parts.\n   It
        may also be possible for an ASP to use more than one SG to access\n   a specific
        SS7 end point, in a model that resembles an SS7 STP mated\n   pair.  Typically,
        SS7 STPs are deployed in mated pairs, with traffic\n   loadshared between
        them.  Other models are also possible, subject to\n   the limitations of the
        local SS7 network provisioning guidelines.\n   From the perspective of the
        M3UA layer at an ASP, a particular SG is\n   capable of transferring traffic
        to a provisioned SS7 destination X if\n   an SCTP association with at least
        one SGP of the SG is established,\n   the SGP has returned an acknowledgement
        to the ASP to indicate that\n   the ASP is actively handling traffic for that
        destination X, the SGP\n   has not indicated that the destination X is inaccessible,
        and the SGP\n   has not indicated MTP Restart.  When an ASP is configured
        to use\n   multiple SGPs for transferring traffic to the SS7 network, the
        ASP\n   must maintain knowledge of the current capability of the SGPs to\n
        \  handle traffic to destinations of interest.  This information is\n   crucial
        to the overall reliability of the service, for active/backup,\n   loadsharing,
        and broadcast models, in the event of failures and\n   recovery and maintenance
        activities.  The ASP M3UA may also use this\n   information for congestion
        avoidance purposes.  The distribution of\n   the MTP3-user messages over the
        SGPs should be done in such a way as\n   to minimize message missequencing,
        as required by the SS7 User Parts.\n"
      title: A.2.2.  Signalling Gateway Redundancy
    title: A.2.  Redundancy Models
  title: Appendix A
- contents:
  - "Editors' Addresses\n   Ken Morneault\n   Cisco Systems Inc.\n   13615 Dulles
    Technology Drive\n   Herndon, VA, USA  20171\n   EMail: kmorneau@cisco.com\n   Javier
    Pastor-Balbas\n   Ericsson Espana S.A.\n   C/ Retama 1\n   28045 Madrid - Spain\n
    \  EMail: j.javier.pastor@ericsson.com\n"
  title: Editors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
