- title: __initial_text__
  contents:
  - '                          TN3270 Enhancements

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol that more fully supports 3270\n\
    \   devices than do the existing tn3270 practices.  Specifically, it\n   defines\
    \ a method of emulating both the terminal and printer members\n   of the 3270\
    \ family of devices via Telnet; it provides for the ability\n   of a Telnet client\
    \ to request that it be assigned a specific device-\n   name (also referred to\
    \ as \"LU name\" or \"network name\"); finally, it\n   adds support for a variety\
    \ of functions such as the ATTN key, the\n   SYSREQ key, and SNA response handling.\n\
    \   This protocol would be negotiated and implemented under a new Telnet\n   Option\
    \ and would be unrelated to the Telnet 3270 Regime Option as\n   defined in RFC\
    \ 1041 [1].\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n   1.  Introduction ...............................................\
    \  2\n   2.  TN3270E OVERVIEW ...........................................  3\n\
    \   3.  COMMAND NAMES AND CODES ....................................  4\n   4.\
    \  COMMAND MEANINGS ...........................................  5\n   5.  DEFAULT\
    \ SPECIFICATION ......................................  6\n   6.  MOTIVATION .................................................\
    \  7\n   7.  TN3270E SUB-NEGOTIATION RULES ..............................  7\n\
    \      7.1  DEVICE-TYPE Negotiation ................................  7\n    \
    \      7.1.1 Device Pools ......................................  8\n        \
    \  7.1.2 CONNECT Command ...................................  9\n          7.1.3\
    \ ASSOCIATE Command ................................. 10\n          7.1.4 Device\
    \ Selection Rules ............................ 10\n          7.1.5 Accepting a\
    \ Request ............................... 11\n          7.1.6 REJECT Command ....................................\
    \ 12\n      7.2  FUNCTIONS Negotiation .................................. 13\n\
    \          7.2.1 Commands .......................................... 13\n    \
    \      7.2.2 List of TN3270E Functions ......................... 14\n   8.  TN3270E\
    \ DATA MESSAGES ...................................... 15\n      8.1  The TN3270E\
    \ Message Header ............................. 16\n          8.1.1 DATA-TYPE Field\
    \ ................................... 16\n          8.1.2 REQUEST-FLAG Field ................................\
    \ 17\n          8.1.3 RESPONSE-FLAG Field ............................... 17\n\
    \          8.1.4 SEQ-NUMBER Field .................................. 18\n   9.\
    \  BASIC TN3270E .............................................. 18\n      9.1\
    \  3270 Mode and NVT Mode ................................. 19\n   10. DETAILS\
    \ OF PROCESSING TN3270E FUNCTIONS .................... 20\n      10.1 The SCS-CTL-CODES\
    \ Function ............................. 20\n      10.2 The DATA-STREAM-CTL Function\
    \ ........................... 20\n      10.3 The BIND-IMAGE Function ................................\
    \ 21\n      10.4 The RESPONSES Function ................................. 22\n\
    \         10.4.1 Response Messages ................................. 23\n    \
    \  10.5 The SYSREQ Function .................................... 26\n        \
    \ 10.5.1 Background ........................................ 26\n         10.5.2\
    \ TN3270E Implementation of SYSREQ .................. 27\n   11. THE 3270 ATTN\
    \ KEY .......................................... 28\n   12. 3270 STRUCTURED FIELDS\
    \ ..................................... 29\n   13. IMPLEMENTATION GUIDELINES ..................................\
    \ 29\n      13.1 3270 Data Stream Notes ................................. 29\n\
    \      13.2 Negotiation of the TN3270E Telnet Option ............... 30\n    \
    \  13.3 A \"Keep-alive\" Mechanism ............................... 30\n      13.4\
    \ Examples ............................................... 31\n   14. SECURITY\
    \ CONSIDERATIONS .................................... 33\n   15. REFERENCES .................................................\
    \ 33\n   16. AUTHOR'S NOTE .............................................. 34\n\
    \   17. AUTHOR'S ADDRESS ........................................... 34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Currently, support for 3270 terminal emulation over Telnet\
    \ is\n   accomplished by the de facto standard of negotiating three separate\n\
    \   Telnet Options - Terminal-Type [2], Binary Transmission [3], and End\n   of\
    \ Record [4].  Note that there is no RFC that specifies this\n   negotiation as\
    \ a standard.  RFC 1041 attempted to standardize the\n   method of negotiating\
    \ 3270 terminal support by defining the 3270\n   Regime Telnet Option.  Very few\
    \ developers and vendors ever\n   implemented RFC 1041.\n   This document will\
    \ refer to the existing practice of negotiating\n   these three Telnet Options\
    \ before exchanging the 3270 data stream as\n   \"traditional tn3270\".\n   NOTE:\
    \ Except where otherwise stated, this document does not\n   distinguish between\
    \ Telnet servers that represent SNA devices and\n   those that represent non-SNA\
    \ 3270 devices.\n   All references in this document to the 3270 data stream, 3270\
    \ data\n   stream commands, orders, structured fields and the like rely on [5].\n\
    \   References to SNA Request and Response Units rely on [6].  References\n  \
    \ to SNA versus non-SNA operation rely on [7].\n   There are several shortcomings\
    \ in traditional tn3270; among them are\n   the following:\n    - It provides\
    \ no capability for Telnet clients to emulate the 328x\n      class of printers.\n\
    \    - There is no mechanism by which a Telnet client can request that\n     \
    \ a connection be associated with a given 3270 device-name.  This\n      can be\
    \ of importance when a terminal session is being\n      established, since many\
    \ host applications behave differently\n      depending on the network name of\
    \ the terminal.  In the case of\n      printer emulation, this capability is an\
    \ absolute necessity\n      because a large number of host applications have some\
    \ method of\n      pre-defining printer destinations.\n    - The 3270 ATTN and\
    \ SYSREQ keys are not universally supported.\n    - There is no support for the\
    \ SNA positive/negative response\n      process.  This is particularly important\
    \ if printer emulation is\n      to function properly, but is also useful for\
    \ some terminal\n      applications.  A positive response is used to indicate\
    \ that\n      the previously received data has been successfully processed.\n\
    \      A negative response indicates some sort of error has occurred\n      while\
    \ processing the previously received data; this could be\n      caused by the\
    \ host application building a 3270 data stream that\n      contains an invalid\
    \ command, or by a mechanical error at the\n      client side, among other things.\n\
    \    - There is no mechanism by which the client can access the SNA\n      Bind\
    \ information.  The Bind image contains a detailed\n      description of the session\
    \ between the Telnet server and the\n      host application.\n    - There is no\
    \ mechanism by which the server can determine whether\n      a client supports\
    \ 3270 structured fields, or a client can\n      request that it receive them.\n"
- title: 2.  TN3270E Overview
  contents:
  - "2.  TN3270E Overview\n   In order to address these issues, this document proposes\
    \ a new Telnet\n   Option - TN3270E.  Telnet clients and servers would be free\
    \ to\n   negotiate support of the TN3270E option or not. If either side does\n\
    \   not support TN3270E, traditional tn3270 can be used; otherwise, a\n   sub-negotiation\
    \ will occur to determine what subset of TN3270E will\n   be used on the session.\
    \  It is anticipated that a client or server\n   capable of both types of 3270\
    \ emulation would attempt to negotiate\n   TN3270E first, and only negotiate traditional\
    \ tn3270 if the other\n   side refuses TN3270E.\n   Once a client and server have\
    \ agreed to use TN3270E, negotiation of\n   the TN3270E suboptions can begin.\
    \  The two major elements of TN3270E\n   sub-negotiation are:\n    - a device-type\
    \ negotiation that is similar to, but somewhat\n      more complicated than, the\
    \ existing Telnet Terminal-Type Option.\n    - the negotiation of a set of supported\
    \ 3270 functions, such as\n      printer data stream type (3270 data stream or\
    \ SNA Character\n      Stream), positive/negative response exchanges, device status\n\
    \      information, and the passing of BIND information from server to\n     \
    \ client.\n   Successful negotiation of these two suboptions signals the beginning\n\
    \   of 3270 data stream transmission. In order to support several of the\n   new\
    \ functions in TN3270E, each data message must be prefixed by a\n   header.  This\
    \ header will contain flags and indicators that convey\n   such things as positive\
    \ and negative responses and what type of data\n   follows the header (for example,\
    \ 3270 data stream, SNA Character\n   Stream, or device status information).\n"
- title: 3.  Command Names and Codes
  contents:
  - "3.  Command Names and Codes\n       TN3270E            40\n         ASSOCIATE\
    \          00\n         CONNECT            01\n         DEVICE-TYPE        02\n\
    \         FUNCTIONS          03\n         IS                 04\n         REASON\
    \             05\n         REJECT             06\n         REQUEST           \
    \ 07\n         SEND               08\n       Reason-codes\n         CONN-PARTNER\
    \       00\n         DEVICE-IN-USE      01\n         INV-ASSOCIATE      02\n \
    \        INV-DEVICE-NAME    03\n         INV-DEVICE-TYPE    04\n         TYPE-NAME-ERROR\
    \    05\n         UNKNOWN-ERROR      06\n         UNSUPPORTED-REQ    07\n    \
    \   Function Names\n         BIND-IMAGE         00\n         DATA-STREAM-CTL \
    \   01\n         RESPONSES          02\n         SCS-CTL-CODES      03\n     \
    \    SYSREQ             04\n"
- title: 4.  Command Meanings
  contents:
  - "4.  Command Meanings\n   IAC WILL TN3270E\n      The sender of this command is\
    \ willing to send TN3270E\n      information in subsequent sub-negotiations.\n\
    \   IAC WON'T TN3270E\n      The sender of this command refuses to send TN3270E\
    \ information.\n   IAC DO TN3270E\n      The sender of this command is willing\
    \ to receive TN3270E\n      information in subsequent sub-negotiations.\n   IAC\
    \ DON'T TN3270E\n      The sender of this command refuses to receive TN3270E\n\
    \      information.\n   Note that while they are not explicitly negotiated, the\
    \ equivalent of\n   the Telnet Binary Transmission Option [3] and the Telnet End\
    \ of\n   Record Option [4] is implied in the negotiation of the TN3270E\n   Option.\
    \  That is, a party to the negotiation that agrees to support\n   TN3270E is automatically\
    \ required to support bi-directional binary\n   and EOR transmissions.\n   IAC\
    \ SB TN3270E SEND DEVICE-TYPE IAC SE\n      Only the server may send this command.\
    \  This command is used to\n      request that the client transmit a device-type\
    \ and, optionally,\n      device-name information.\n   IAC SB TN3270E DEVICE-TYPE\
    \ REQUEST <device-type>\n          [CONNECT | ASSOCIATE <device-name>] IAC SE\n\
    \      Only the client may send this command.  It is used in response\n      to\
    \ the server's SEND DEVICE-TYPE command, as well as to suggest\n      another\
    \ device-type after the server has sent a DEVICE-TYPE\n      REJECT command (see\
    \ below).  This command requests emulation of\n      a specific 3270 device type\
    \ and model.  The REQUEST command may\n      optionally include either the CONNECT\
    \ or the ASSOCIATE command\n      (but not both).  If present, CONNECT and ASSOCIATE\
    \ must both be\n      followed by <device-name>.  (See the section entitled\n\
    \      \"DEVICE-TYPE Negotiation\" for more detailed information.)\n   IAC SB\
    \ TN3270E DEVICE-TYPE IS <device-type> CONNECT\n          <device-name> IAC SE\n\
    \      Only the server may send this command.  This command is used to\n     \
    \ accept a client's DEVICE-TYPE REQUEST command and to return the\n      server-defined\
    \ device-name.\n   IAC SB TN3270E DEVICE-TYPE REJECT REASON <reason-code> IAC\
    \ SE\n      Only the server may send this command.  This command is used to\n\
    \      reject a client's DEVICE-TYPE REQUEST command.\n   IAC SB TN3270E FUNCTIONS\
    \ REQUEST <function-list> IAC SE\n      Either side may send this command.  This\
    \ command is used to\n      suggest a set of 3270 functions that will be supported\
    \ on this\n      session.  It is also sent as an implicit rejection of a previous\n\
    \      FUNCTIONS REQUEST command sent by the other side (see the\n      section\
    \ entitled \"FUNCTIONS Negotiation\" for more information).\n      Note that when\
    \ used to reject a FUNCTIONS REQUEST command, the\n      function-list must not\
    \ be identical to that received in the\n      previous REQUEST command.\n   IAC\
    \ SB TN3270E FUNCTIONS IS <function-list> IAC SE\n      Either side may send this\
    \ command.  This command is sent as a\n      response to a FUNCTIONS REQUEST command\
    \ and implies acceptance\n      of the set of functions sent to it in the REQUEST\
    \ command.  Note\n      that the list of functions in the FUNCTIONS IS command\
    \ must\n      match the list that was received in the previous FUNCTIONS\n   \
    \   REQUEST command.\n"
- title: 5.  Default Specification
  contents:
  - "5.  Default Specification\n   WON'T TN3270E\n   DON'T TN3270E\n   i.e., TN3270E\
    \ will not be used.\n"
- title: 6.  Motivation
  contents:
  - "6.  Motivation\n   See the section entitled \"Introduction\".\n"
- title: 7.  TN3270E Sub-negotiation Rules
  contents:
  - "7.  TN3270E Sub-negotiation Rules\n   All TN3270E commands and parameters are\
    \ NVT ASCII strings in which\n   upper and lower case are considered equivalent.\n\
    \   Once it has been agreed that TN3270E will be supported, the first\n   sub-negotiation\
    \ must concern the DEVICE-TYPE (and possibly DEVICE-\n   NAME) information.  Only\
    \ after that has been successfully negotiated\n   can the client and server exchange\
    \ FUNCTIONS information.  Only after\n   both DEVICE-TYPE and FUNCTIONS have been\
    \ successfully negotiated can\n   3270 data stream transmission occur.\n   7.1\
    \ DEVICE-TYPE Negotiation\n      Device-type (and device-name) negotiation begins\
    \ when the server\n      transmits the DEVICE-TYPE SEND command to the client.\
    \  The client\n      responds with the DEVICE-TYPE REQUEST command, which must\
    \ include\n      a device-type and may include a device-name request.\n      Valid\
    \ device-types are:\n       terminals: IBM-3278-2  IBM-3278-2-E  (24 row x 80\
    \ col display)\n                  IBM-3278-3  IBM-3278-3-E  (32 row x 80 col display)\n\
    \                  IBM-3278-4  IBM-3278-4-E  (43 row x 80 col display)\n     \
    \             IBM-3278-5  IBM-3278-5-E  (27 row x 132 col display)\n         \
    \         IBM-DYNAMIC            (no pre-defined display size)\n        printers:\
    \ IBM-3287-1\n      Note that the use of '3278' and '3287' is NOT intended to\
    \ exclude\n      any particular device capabilities; they are used here only\n\
    \      because they are commonly known designations for a terminal and a\n   \
    \   printer member of the 3270 family of devices.  The intention is to\n     \
    \ simplify the device-type negotiation (in comparison to traditional\n      tn3270)\
    \ by minimizing the number of possible device-types, and by\n      breaking the\
    \ association of a specific piece of IBM hardware with\n      a related set of\
    \ data stream capabilities.  For example,\n      negotiation of device-type IBM-3278-2-E\
    \ does NOT in and of itself\n      preclude the use of any of the functions associated\
    \ with a\n      physical 3279 model S2B.  A client's ability to support the more\n\
    \      advanced functions of the 3270 data stream will be indicated not\n    \
    \  by negotiation of an IBM device type and model number, but rather\n      by\
    \ the combination of Read Partition Query and Query Reply.\n      All of the terminal\
    \ device-types support a \"primary\" display size\n      of 24 rows by 80 columns.\
    \  The \"-3\", \"-4\" and \"-5\" types each\n      support an \"alternate\" display\
    \ size as noted in the above list.\n      The IBM-DYNAMIC device-type implies\
    \ no pre-defined alternate\n      display size; this value will be passed from\
    \ the client to host\n      applications as part of the Query Reply structured\
    \ field, and it\n      can represent any display size the client and the host\
    \ application\n      can support.\n      Terminal device-types with the \"-E\"\
    \ suffix should only be\n      negotiated by clients that are willing to support\
    \ some subset of\n      the 3270 \"extended data stream\".  This usually includes\
    \ at a\n      minimum support for extended colors and highlighting, but may also\n\
    \      include a number of other functions, such as graphics capability,\n   \
    \   alternate character sets, and partitions.\n      Clients that negotiate a\
    \ terminal device-type with the \"-E\" suffix\n      or the DYNAMIC type, as well\
    \ as those that negotiate a printer\n      device-type, must be able to accept\
    \ and respond to a Read\n      Partition Query command (see the section entitled\
    \ \"3270 Structured\n      Fields\").  This allows the client to indicate to host\
    \ applications\n      which subsets of the 3270 extended data stream the client\
    \ is\n      willing to support.\n      In a VTAM/SNA environment, negotiation\
    \ of IBM-DYNAMIC as the\n      device-type should result in a Bind in which the\
    \ Presentation\n      Services Usage screen field (the eleventh byte in the logmode's\n\
    \      PSERVIC field) is set to 0x03, indicating that the alternate\n      screen\
    \ size will be determined by the Query Reply (Usable Area)\n      7.1.1 Device\
    \ Pools\n         An explanation of the CONNECT and ASSOCIATE commands first\n\
    \         requires a discussion of the organization of terminal and\n        \
    \ printer device pools that the server maintains and from which\n         it selects\
    \ device-names to assign to session requests.  (The\n         terms \"device-name\"\
    , \"LU name\" and \"network name\" can be\n         considered interchangeable\
    \ in this document.)  Also, for the\n         purposes of this discussion, the\
    \ term \"generic session request\"\n         will be used to describe a request\
    \ for a session by a Telnet\n         client (either traditional or TN3270E) that\
    \ does not include a\n         request for a specific device-name.  The term \"\
    specific session\n         request\" will be used to describe a request for a\
    \ session by a\n         TN3270E client that includes a request for a specific\
    \ device-\n         name (either via CONNECT or ASSOCIATE).\n         As is the\
    \ case with traditional tn3270, the TN3270E server must\n         maintain a set\
    \ of terminal device-names.  A generic request for\n         a terminal session\
    \ would result in the server selecting any\n         available device-name from\
    \ this pool.  The server, however, may\n         also maintain a separate pool\
    \ of terminal device-names which\n         can only be used to satisfy specific\
    \ terminal session requests.\n         This is to ensure that a terminal device\
    \ that has some\n         significance to host applications (and is therefore\
    \ likely to\n         be the target of a specific session request) is not\n  \
    \       \"accidentally\" assigned to a generic request and winds up\n        \
    \ associated with a client that has no use for it.  Note that the\n         reverse\
    \ situation is allowed.  That is, a specific terminal\n         session request\
    \ could ask for a device-name that happens to be\n         in the \"generic terminal\
    \ pool\".\n         For each terminal device (in both the \"generic\" and the\n\
    \         \"specific\" pools), the TN3270E server could also have defined a\n\
    \         \"partner\" or \"paired\" printer device.  There should be a\n     \
    \    unique, one-to-one mapping between a terminal and its\n         associated\
    \ printer.  The reasoning behind such a configuration\n         is to allow for\
    \ those host applications that produce printed\n         output bound for a printer\
    \ whose device-name is determined by\n         the device-name of the terminal\
    \ that initiated the print\n         request.  These printer devices can only\
    \ be assigned to\n         specific printer session requests that use the ASSOCIATE\n\
    \         command (see below).\n         In addition, the TN3270E server may also\
    \ maintain a pool of\n         printer device-names that are not associated with\
    \ any terminal.\n         These printer devices can only be assigned to specific\
    \ printer\n         session requests that use the CONNECT command (see below).\n\
    \         This allows for those host applications that generate printed\n    \
    \     output bound for a printer whose device-name is determined by\n        \
    \ something other than the device-name of the terminal that\n         initiated\
    \ the print request (for example, when the userid of\n         the person signed\
    \ on to a terminal determines the print\n         destination).\n         Finally,\
    \ it is possible that a pool of printer device-names\n         could be maintained\
    \ and used only to satisfy generic requests\n         for printers.\n      7.1.2\
    \ CONNECT Command\n         CONNECT is used by the client to request that the\
    \ server assign\n         a specific device-name to this Telnet session; it may\
    \ be used\n         when requesting either a terminal or a printer session.  The\n\
    \         specified device-name must not conflict with the device-type;\n    \
    \     e.g., if the client requests DEVICE-TYPE IBM-3287-1 (a printer)\n      \
    \   and specifies CONNECT T1000001, but T1000001 is defined at the\n         host\
    \ as a terminal, then the server should deny the request.\n         Further, if\
    \ the requested device-name is already associated\n         with some other Telnet\
    \ session, or if it is not defined to the\n         server, the server should\
    \ deny the request.\n      7.1.3 ASSOCIATE Command\n         ASSOCIATE can be\
    \ used by the client only when requesting a\n         DEVICE-TYPE that represents\
    \ a printer. The ASSOCIATE command\n         requests that this session be assigned\
    \ the device-name of the\n         printer that is paired with the terminal named\
    \ in the request.\n         If the device-type does not represent a printer, or\
    \ if the\n         device-name is not that of a terminal, then the server should\n\
    \         deny the request.  It is anticipated that the device-name\n        \
    \ specified in this request would be one returned by the server\n         when\
    \ accepting a previous terminal session request (see the IS\n         command\
    \ below).  Since no means of authentication has been\n         provided for, it\
    \ is possible that the printer paired with the\n         terminal specified in\
    \ the ASSOCIATE command has already been\n         assigned to some other Telnet\
    \ session; in this case, the server\n         should deny the request.\n     \
    \ 7.1.4 Device Selection Rules\n         To summarize, assume a TN3270E server\
    \ has the following device\n         pools defined to it (device-names that begin\
    \ with a \"T\" are\n         terminal devices; those that begin with a \"P\" are\
    \ printers):\n          Generic Terminal Pool              Specific Terminal Pool\n\
    \          ---------------------              ----------------------\n       \
    \   TG000001 <--> PTG00001             TS000001 <--> PTS00001\n          TG000002\
    \ <--> PTG00002             TS000002 <--> PTS00002\n          TG000003 <--> PTG00003\
    \             TS000003 <--> PTS00003\n          Generic Printer Pool         \
    \      Specific Printer Pool\n          --------------------               ----------------------\n\
    \               PG000001                            PS000001\n               PG000002\
    \                            PS000002\n               PG000003               \
    \             PS000003\n         Note that the only pool that absolutely must\
    \ be defined to the\n         server is the generic terminal pool.  The absence\
    \ of other\n         pools (or of partner printers for a terminal pool) simply\
    \ means\n         that the server is unable to satisfy as wide a variety of\n\
    \         requests as would be possible if all pools were defined to it.\n   \
    \      Given the above configuration, the following rules apply:\n         - a\
    \ generic terminal request can only be satisfied from the\n           generic\
    \ terminal pool (device-names TG000001 - TG000003).\n         - a specific terminal\
    \ request (allowable only via the CONNECT\n           command) can be satisfied\
    \ from either the generic or the\n           specific terminal pool, although\
    \ it is anticipated that the\n           majority of such requests would ask for\
    \ terminals in the\n           specific terminal pool (TS000001 - TS000003).\n\
    \         - a generic printer request can only be satisfied from the\n       \
    \    generic printer pool (device-names PG000001 - PG000003).\n         - a specific\
    \ printer request may come in one of two forms:\n           via ASSOCIATE: the\
    \ request can only be satisfied using the\n                          partner of\
    \ the specified terminal, which\n                          may be in the generic\
    \ or the specific\n                          terminal pool; therefore, devices\
    \ in the\n                          ranges PTG00001 - PTG00003 and PTS00001 -\n\
    \                          PTS00003 can be used to satisfy the request.\n    \
    \       via CONNECT:   the request can be satisfied either from\n            \
    \              the generic or the specific printer pools\n                   \
    \       (although, as with specific terminal requests,\n                     \
    \     it is likely that most such requests will name\n                       \
    \   printers in the specific printer pool); this\n                          request\
    \ cannot be satisfied with the partner\n                          printer of a\
    \ terminal in either the specific or\n                          the generic terminal\
    \ pools.\n      7.1.5 Accepting a Request\n         The server must accept the\
    \ client's request or deny it as a\n         whole - it cannot, for example, accept\
    \ the DEVICE-TYPE request\n         but deny the CONNECT portion.\n         If\
    \ the server wishes to accept the request, it sends back the\n         DEVICE-TYPE\
    \ IS command confirming the requested device-type and\n         the CONNECT command\
    \ specifying the device-name of the terminal\n         or printer assigned to\
    \ this Telnet session.  This device-name\n         may be the one directly requested\
    \ (via CONNECT) by the client,\n         the one indirectly requested (via ASSOCIATE)\
    \ by the client, or\n         one chosen by the server if the client specified\
    \ neither\n         CONNECT nor ASSOCIATE.\n      7.1.6 REJECT Command\n     \
    \    If the server wishes to deny the request, it sends back the\n         DEVICE-TYPE\
    \ REJECT command with one of the following reason-\n         codes:\n        \
    \ Reason code name         Explanation\n         ----------------         -----------------------------------\n\
    \         INV-DEVICE-TYPE          The server does not support the\n         \
    \                         requested device-type.\n         INV-DEVICE-NAME   \
    \       The device-name specified in the\n                                  CONNECT\
    \ or ASSOCIATE command is\n                                  not known to the\
    \ server.\n         DEVICE-IN-USE            The requested device-name is\n  \
    \                                already associated with another\n           \
    \                       Telnet session.\n         TYPE-NAME-ERROR          The\
    \ requested device-name is\n                                  incompatible with\
    \ the requested\n                                  device-type (such as terminal/\n\
    \                                  printer mismatch).\n         UNSUPPORTED-REQ\
    \          The server is unable to satisfy\n                                 \
    \ the type of request sent by the\n                                  client; e.g.,\
    \ a specific terminal\n                                  or printer was requested\
    \ but the\n                                  server does not have such a pool\
    \ of\n                                  device-names defined to it, or the\n \
    \                                 ASSOCIATE command was used but no\n        \
    \                          partner printers are defined to the\n             \
    \                     server.\n         INV-ASSOCIATE            The client used\
    \ the ASSOCIATE\n                                  command and either the device-type\n\
    \                                  is not a printer or the device-name\n     \
    \                             is not a terminal.\n         CONN-PARTNER      \
    \       The client used the CONNECT command\n                                \
    \  to request a specific printer but\n                                  the device-name\
    \ requested is the\n                                  partner to some terminal.\n\
    \         UNKNOWN-ERROR            Any other error in device type or\n       \
    \                           name processing has occurred.\n         The process\
    \ of negotiating a device-type and device-name that\n         are acceptable to\
    \ both client and server may entail several\n         iterations of DEVICE-TYPE\
    \ REQUEST and DEVICE-TYPE REJECT\n         commands.  The client should make use\
    \ of the reason-code\n         specified by the server in any DEVICE-TYPE REJECT\
    \ command(s) to\n         minimize the amount of negotiation necessary.  For example,\
    \ if\n         the client initially requests that it be assigned a specific\n\
    \         terminal device-name via the CONNECT command, and the server\n     \
    \    rejects the request with a reason-code of UNSUPPORTED-REQ, the\n        \
    \ client should make no further specific terminal requests in the\n         negotiations.\
    \  If at any point in the process either side\n         wishes to \"bail out,\"\
    \ it can simply send a WON'T (or DON'T)\n         TN3270E command to the other\
    \ side.  At this point both sides\n         are free to negotiate other Telnet\
    \ options (including\n         traditional tn3270).\n   7.2 FUNCTIONS Negotiation\n\
    \      Once the DEVICE-TYPE negotiation has successfully completed (i.e,\n   \
    \   when the client receives the DEVICE-TYPE IS command), the client\n      should\
    \ initiate the FUNCTIONS negotiation by sending the \\.\n      FUNCTIONS REQUEST\
    \ command to the server.  After this initial\n      REQUEST command, both sides\
    \ are free to transmit FUNCTIONS REQUEST\n      and FUNCTIONS IS commands as needed.\n\
    \      7.2.1 Commands\n         The FUNCTIONS REQUEST command contains a list\
    \ of the 3270\n         functions that the sender would like to see supported\
    \ on this\n         session.  All functions not in the list are to be considered\n\
    \         unsupported.  The function-list consists of a string of 2-byte\n   \
    \      entries separated from one another by a single space character.\n     \
    \    The list is terminated by the IAC code that precedes the SE\n         command.\
    \  Functions may appear in any order in the list.\n         Upon receipt of a\
    \ FUNCTIONS REQUEST command, the recipient has\n         two choices:\n      \
    \ - it may respond in the positive (meaning it agrees to support\n         all\
    \ functions in the list, and not to transmit any data\n         related to functions\
    \ not in the list).  To do this, it sends\n         the FUNCTIONS IS command with\
    \ the function-list exactly as it\n         was received.  At this point, FUNCTIONS\
    \ negotiation has\n         successfully completed.\n       - it may respond in\
    \ the negative by sending a FUNCTIONS\n         REQUEST command in which the function-list\
    \ differs from the\n         one it received (and not simply in the order of appearance\n\
    \         of functions in the list; at least one function must have\n        \
    \ been added to, or removed from, the list).\n         To avoid endlessly looping,\
    \ neither party should add to the\n         function-list it receives any function\
    \ that it has previously\n         added and that the other side has removed.\n\
    \         The process of sending FUNCTIONS REQUEST commands back and\n       \
    \  forth continues until one side receives a function-list it is\n         willing\
    \ to live with.  It uses the FUNCTIONS IS command to\n         accept the list,\
    \ and, once this command is received by the\n         other side, all necessary\
    \ negotiation has been completed.  At\n         this point, 3270 data stream transmission\
    \ can begin.\n         Note that it is possible that the function-list agreed\
    \ to is\n         null; this is referred to as \"basic TN3270E\".  See the section\n\
    \         entitled \"Basic TN3270E\" for more information.\n      7.2.2 List of\
    \ TN3270E Functions\n         The following list briefly describes the 3270 functions\
    \ that\n         may be negotiated in the function-list:\n         Function Name\
    \       Description\n         -------------       -----------\n         SCS-CTL-CODES\
    \       (Printer sessions only).  Allows the use\n                           \
    \  of the SNA Character Stream (SCS) and SCS\n                             control\
    \ codes on the session.  SCS is\n                             used with LU type\
    \ 1 SNA sessions.\n         DATA-STREAM-CTL     (Printer sessions only).  Allows\
    \ the use\n                             of the standard 3270 data stream.  This\n\
    \                             corresponds to LU type 3 SNA sessions.\n       \
    \  RESPONSES           Provides support for positive and\n                   \
    \          negative response handling.  Allows the\n                         \
    \    server to reflect to the client any and\n                             all\
    \ definite, exception, and no response\n                             requests\
    \ sent by the host application.\n         BIND-IMAGE          Allows the server\
    \ to send the SNA Bind\n                             image and Unbind notification\
    \ to the\n                             client.\n         SYSREQ              Allows\
    \ the client and server to emulate\n                             some (or all,\
    \ depending on the server) of\n                             the functions of the\
    \ SYSREQ key in an SNA\n                             environment.\n         See\
    \ the section entitled \"Details of Processing TN3270E\n         Functions\" for\
    \ a more detailed explanation of the meaning and\n         use of these functions.\n"
- title: 8.  TN3270E Data Messages
  contents:
  - "8.  TN3270E Data Messages\n   3270 device communications are generally understood\
    \ to be block\n   oriented in nature.  That is, each partner buffers data until\
    \ an\n   entire \"message\" has been built, at which point the data is sent to\n\
    \   the other side.  The \"outbound message\" (from host to device)\n   consists\
    \ of a 3270 command and a series of buffer orders, buffer\n   addresses, and data,\
    \ while the \"inbound message\" contains only buffer\n   orders, addresses and\
    \ data.  The end of a message is understood to be\n   the last byte transmitted\
    \ (note that this discussion disregards SNA\n   chaining).  The Telnet EOR command\
    \ is used to delimit these natural\n   blocks of 3270 data within the Telnet data\
    \ stream.\n   In TN3270E, each 3270 message must be prefixed with a TN3270E header,\n\
    \   which consists of five bytes and whose format is defined below (see\n   the\
    \ section entitled \"The TN3270E Message Header\").\n   A \"data message\" in\
    \ TN3270E therefore has the following construction:\n          <TN3270E Header><data><IAC\
    \ EOR>\n   It should be noted that it is possible that, for certain message\n\
    \   types, there is no data portion present.  In this case, the TN3270E\n   data\
    \ message consists of:\n          <TN3270E Header><IAC EOR>\n   If either side\
    \ wishes to transmit the decimal value 255 and have it\n   interpreted as data,\
    \ it must \"double\" this byte.  In other words, a\n   single occurrence of decimal\
    \ 255 will be interpreted by the other\n   side as an IAC, while two successive\
    \ bytes containing decimal 255\n   will be treated as one data byte with a value\
    \ of decimal 255.\n   It is strongly recommended that Telnet commands (other than\
    \ IAC IAC)\n   should be sent between TN3270E data messages, with no header and\
    \ no\n   trailing IAC EOR.  If a TN3270E data message containing either IAC IP\n\
    \   (to be interpreted as 3270 Attention) or IAC AO (to be interpreted as\n  \
    \ SYSREQ) is received, the receiver should defer processing the command\n   until\
    \ the 3270 data has been processed (see the appropriate sections\n   for discussion\
    \ of 3270 Attention and SYSREQ).  If a TN3270E data\n   message containing any\
    \ other IAC-command sequence (other than IAC\n   IAC) is received, it is implementation\
    \ dependent when the IAC-command\n   sequence will be processed, but it must be\
    \ processed.  The receiver\n   may process it immediately, which in effect causes\
    \ it to be processed\n   as if it had been received before the current TN3270E\
    \ data message,\n   or the processing may be deferred until after the current\
    \ TN3270E\n   data message has been processed.  It is because of this ambiguity\n\
    \   that the presence of Telnet commands within a TN3270E data message\n   (i.e.,\
    \ between the header and the trailing IAC EOR) is not\n   recommended; neither\
    \ clients nor servers should send such data.\n   8.1 The TN3270E Message Header\n\
    \      As stated earlier, each data message in TN3270E must be prefixed\n    \
    \  by a header, which consists of five bytes and is formatted as\n      follows:\n\
    \      -----------------------------------------------------------\n      | DATA-TYPE\
    \ | REQUEST-FLAG | RESPONSE-FLAG |  SEQ-NUMBER  |\n      -----------------------------------------------------------\n\
    \         1 byte        1 byte         1 byte         2 bytes\n      8.1.1 DATA-TYPE\
    \ Field\n         The DATA-TYPE field indicates how the data portion of the\n\
    \         message is to be interpreted by the receiver.  Possible values\n   \
    \      for the DATA-TYPE field are:\n         Data-type Name   Code          \
    \      Meaning\n         --------------   ----   ---------------------------------\n\
    \         3270-DATA        0x00   The data portion of the message\n          \
    \                       contains only the 3270 data stream.\n         SCS-DATA\
    \         0x01   The data portion of the message\n                           \
    \      contains SNA Character Stream data.\n         RESPONSE         0x02   The\
    \ data portion of the message\n                                 constitutes device-status\
    \ information\n                                 and the RESPONSE-FLAG field indicates\n\
    \                                 whether this is a positive or negative\n   \
    \                              response (see below).\n         BIND-IMAGE    \
    \   0x03   The data portion of the message is\n                              \
    \   the SNA bind image from the session\n                                 established\
    \ between the server and the\n                                 host application.\n\
    \         UNBIND           0x04   The data portion of the message is\n       \
    \                          an Unbind reason code.\n         NVT-DATA         0x05\
    \   The data portion of the message is to\n                                 be\
    \ interpreted as NVT data.\n         REQUEST          0x06   There is no data\
    \ portion present in\n                                 the message.  Only the\
    \ REQUEST-FLAG\n                                 field has any meaning.\n    \
    \     SSCP-LU-DATA     0x07   The data portion of the message is\n           \
    \                      data from the SSCP-LU session.\n      8.1.2 REQUEST-FLAG\
    \ Field\n         The REQUEST-FLAG field only has meaning when the DATA-TYPE\n\
    \         field has a value of REQUEST; otherwise, the REQUEST-FLAG field\n  \
    \       must be ignored by the receiver and should be set to 0x00 by\n       \
    \  the sender.  Possible values for the REQUEST-FLAG field are:\n         Request-Flag\
    \ Name   Code                Meaning\n         -----------------   ----   ---------------------------------\n\
    \         ERR-COND-CLEARED    0x00   The client sends this to the server\n   \
    \                                 when some previously encountered\n         \
    \                           printer error condition has been\n               \
    \                     cleared.  (See the section entitled\n                  \
    \                  \"The RESPONSES Function\" below.)\n      8.1.3 RESPONSE-FLAG\
    \ Field\n         The RESPONSE-FLAG field only has meaning for certain values\
    \ of\n         the DATA-TYPE field.  For DATA-TYPE field values of 3270-DATA\n\
    \         and SCS-DATA, the RESPONSE-FLAG is an indication of whether or\n   \
    \      not the sender of the data expects to receive a response.  In\n       \
    \  this case the possible values of RESPONSE-FLAG are:\n         Response-Flag\
    \ Name  Code                Meaning\n         ------------------  ----   ---------------------------------\n\
    \         NO-RESPONSE         0x00   The sender does not expect the\n        \
    \                            receiver to respond either\n                    \
    \                positively or negatively to this\n                          \
    \          message.  The receiver must\n                                    therefore\
    \ not send any response\n                                    to this data-message.\n\
    \         ERROR-RESPONSE      0x01   The sender only expects the\n           \
    \                         receiver to respond to this message\n              \
    \                      if some type of error occurred, in\n                  \
    \                  which case a negative response must\n                     \
    \               be sent by the receiver.\n         ALWAYS-RESPONSE     0x02  \
    \ The sender expects the receiver to\n                                    respond\
    \ negatively if an error\n                                    occurs, or positively\
    \ if no errors\n                                    occur.  One or the other must\n\
    \                                    always be sent by the receiver.\n       \
    \  For a DATA-TYPE field value of RESPONSE, the RESPONSE-FLAG is\n         an\
    \ actual response to a previous data message (which must by\n         definition\
    \ have had a DATA-TYPE of either 3270-DATA or SCS-DATA\n         and a RESPONSE-FLAG\
    \ value of either ERROR-RESPONSE or ALWAYS-\n         RESPONSE).  In this case\
    \ the possible values of RESPONSE-FLAG\n         are:\n         Response-Flag\
    \ Name  Code                Meaning\n         ------------------  ----   ---------------------------------\n\
    \         POSITIVE-RESPONSE   0x00   The previous message was received\n     \
    \                               and executed successfully with\n             \
    \                       no errors.\n         NEGATIVE-RESPONSE   0x01   The previous\
    \ message was received\n                                    but an error(s) occurred\
    \ while\n                                    processing it.\n         Accompanying\
    \ status information will be found in the data\n         portion of the message.\n\
    \         For any other values of the DATA-TYPE field, the RESPONSE-FLAG\n   \
    \      field must be ignored by the receiver and should be set to 0x00\n     \
    \    by the sender.\n      8.1.4 SEQ-NUMBER Field\n         The SEQ-NUMBER field\
    \ is only used when the RESPONSES function\n         has been agreed to.  It contains\
    \ a 2 byte binary number, and is\n         used to correlate positive and negative\
    \ responses to the data\n         messages for which they were intended.  See\
    \ the section\n         entitled \"The RESPONSES Function\" for further information.\n\
    \         When the RESPONSES function is not agreed to, this field should\n  \
    \       always be set to 0x0000 by the sender and ignored by the\n         receiver.\n"
- title: 9.  Basic TN3270E
  contents:
  - "9.  Basic TN3270E\n   As has been stated earlier, whether or not the use of each\
    \ of the\n   TN3270E functions is allowed on a session is negotiated when the\n\
    \   connection is established.  It is possible that none of the functions\n  \
    \ are agreed to (in this case, the function-list in the FUNCTIONS\n   REQUEST\
    \ and FUNCTIONS IS commands is null).  This mode of operation\n   is referred\
    \ to as \"basic TN3270E\".  Note that, since neither the\n   SCS-CTL-CODES function\
    \ nor the DATA-STREAM-CTL function is agreed to,\n   basic TN3270E refers to terminal\
    \ sessions only.\n   Basic TN3270E requires the support of only the following\
    \ TN3270E\n   header values:\n          Header field         Value\n         \
    \ ------------         -----\n           DATA-TYPE          3270-DATA\n      \
    \     DATA-TYPE          NVT-DATA\n   The REQUEST-FLAG, RESPONSE-FLAG and SEQ-NUMBER\
    \ fields are not used in\n   basic TN3270E.\n   9.1 3270 Mode and NVT Mode\n \
    \     At any given time, a TN3270E connection can be considered to be\n      operating\
    \ in either \"3270 mode\" or \"NVT mode\".  In 3270 mode, each\n      party may\
    \ send data messages with the DATA-TYPE flag set to 3270-\n      DATA; sending\
    \ a DATA-TYPE flag set to NVT-DATA constitutes a\n      request to switch modes.\
    \  In NVT mode, each party may send data\n      messages with the DATA-TYPE flag\
    \ set to NVT-DATA; sending 3270-\n      DATA is a request to switch modes.  The\
    \ connection is initially in\n      3270 mode when TN3270E operation is successfully\
    \ negotiated.  When\n      a party receives a message with a DATA-TYPE different\
    \ from the\n      mode it is operating in, the mode of operation for the connection\n\
    \      is switched.  Switching modes results in the client performing the\n  \
    \    equivalent of a 3270 Erase/Reset operation, as described in [5],\n      using\
    \ the default partition (screen) size.  The server cannot\n      assume the client\
    \ preserves any attributes of the previous\n      environment across a mode switch.\n\
    \      Note that even when sending NVT-DATA, each side should buffer data\n  \
    \    until an entire message is built (for the client, this would\n      normally\
    \ mean until the user presses Enter).  At that point, a\n      complete TN3270E\
    \ data message should be built to transmit the NVT\n      data.\n      Typically,\
    \ NVT data is used by a server to interact with the user\n      of a client. \
    \ It allows the server to do this using a simple NVT\n      data stream, instead\
    \ of requiring a 3270 data stream.  An example\n      would be a server which\
    \ displays a list of 3270 applications to\n      which it can connect the client.\
    \  The server would use NVT data to\n      display the list and read the user's\
    \ choice.  Then the server\n      would connect to the application, and begin\
    \ the exchange of 3270\n      data between the application and the client.\n"
- title: 10.  Details of Processing TN3270E Functions
  contents:
  - "10.  Details of Processing TN3270E Functions\n   Agreement by both parties to\
    \ a specific function in the FUNCTIONS\n   REQUEST function-list implies agreement\
    \ by each party to support a\n   related set of values in the TN3270E header.\
    \  It also implies a\n   willingness to adhere to the rules governing the processing\
    \ of data\n   messages with regard to the agreed upon function.  Either party\
    \ that\n   fails to accept header values associated either with agreed upon\n\
    \   functions or with basic TN3270E, or attempts to use header values\n   associated\
    \ with a function that is not a part of basic TN3270E and\n   was not agreed upon,\
    \ will be considered non-conforming and in\n   violation of the protocol.  The\
    \ following sections detail for each\n   TN3270E function the associated header\
    \ values and processing rules.\n   10.1 The SCS-CTL-CODES Function\n      This\
    \ function can only be supported on a 3270 printer session.\n      Agreement to\
    \ support this function requires that the party support\n      the following TN3270E\
    \ header values:\n          Header field         Value\n          ------------\
    \         -----\n           DATA-TYPE          SCS-DATA\n      A client representing\
    \ a printer device uses this function to\n      indicate its willingness to accept\
    \ a data stream that includes SCS\n      control codes.  For the purposes of NVT\
    \ mode versus 3270 mode,\n      SCS-DATA should be treated exactly like 3270-DATA\
    \ (i.e., it can\n      cause a switch from NVT mode to 3270 mode).\n      When\
    \ a printer device-type has been negotiated, either the SCS-\n      CTL-CODES\
    \ function or the DATA-STREAM-CTL function, or both, must\n      be negotiated.\
    \  This enables the server to know when it should and\n      should not accept\
    \ a session with a host application on behalf of\n      the client.  If only the\
    \ SCS-CTL-CODES function is agreed to, then\n      the server will not establish\
    \ sessions with host applications that\n      would send 3270 data stream control.\
    \  If both SCS-CTL-CODES and\n      DATA-STREAM-CTL are agreed to, then the server\
    \ will establish\n      sessions both with host applications that would send SCS\
    \ control\n      codes and with those that would send 3270 orders.\n   10.2 The\
    \ DATA-STREAM-CTL Function\n      This function can only be supported on a 3270\
    \ printer session.\n      Agreement to support this function requires that the\
    \ party support\n      the following TN3270E header values:\n          Header\
    \ field         Value\n          ------------         -----\n           DATA-TYPE\
    \          3270-DATA\n      A client representing a printer device uses this function\
    \ to\n      indicate its willingness to accept a data stream that includes\n \
    \     3270 orders and attributes.\n      When a printer device-type has been negotiated,\
    \ either the SCS-\n      CTL-CODES function or the DATA-STREAM-CTL function, or\
    \ both, must\n      be negotiated.  This enables the server to know when it should\
    \ and\n      should not accept a session with a host application on behalf of\n\
    \      the client.  If only the DATA-STREAM-CTL function is agreed to,\n     \
    \ then the server will not establish sessions with host applications\n      that\
    \ would send SCS control codes in a data stream.  If both SCS-\n      CTL-CODES\
    \ and DATA-STREAM-CTL are agreed to, then the server will\n      establish sessions\
    \ both with host applications that would send SCS\n      control codes and with\
    \ those that would send 3270 orders.\n   10.3 The BIND-IMAGE Function\n      This\
    \ function can only be supported when the TN3270E server\n      represents SNA\
    \ terminals and printers.\n      Agreement to support this function requires that\
    \ the party support\n      the following TN3270E header values:\n          Header\
    \ field         Value\n          ------------         -----\n           DATA-TYPE\
    \          BIND-IMAGE\n           DATA-TYPE          UNBIND\n           DATA-TYPE\
    \          SSCP-LU-DATA\n      When BIND-IMAGE is in effect, the server must inform\
    \ the client\n      when an SNA session has been established with a host application,\n\
    \      and when such a session has been terminated.  It uses DATA-TYPE\n     \
    \ values of BIND-IMAGE and UNBIND to convey this information.\n      When establishing\
    \ an SNA session on behalf of a client, the server\n      will receive a Bind\
    \ RU from the host application.  It will also\n      receive a Start Data Traffic\
    \ RU.  Once both of these have been\n      responded to positively by the server,\
    \ it must then inform the\n      client of the presence of this session by sending\
    \ it a data\n      message with the DATA-TYPE flag set to BIND-IMAGE.  The data\n\
    \      portion of this message must contain the bind image exactly as it\n   \
    \   was received in the Bind RU that the server accepted on behalf of\n      the\
    \ client.\n      When an SNA session between the server and a host application\
    \ is\n      terminated, the server should send a data message to the client\n\
    \      with the DATA-TYPE flag set to UNBIND.  If the server was notified\n  \
    \    of the session termination via an SNA Unbind RU, it should include\n    \
    \  the Unbind reason code in the data portion of the message it sends\n      to\
    \ the client.  If the server itself requested the SNA session\n      termination\
    \ (for example, as part of SYSREQ key processing), it\n      should set the data\
    \ portion of the UNBIND message to 0x01,\n      indicating \"normal end of session\"\
    .\n      Another aspect of the BIND-IMAGE function alters the allowable\n    \
    \  DATA-TYPE flag values slightly from the behavior described in the\n      section\
    \ entitled \"Basic TN3270E\".  When BIND-IMAGE is in effect,\n      data messages\
    \ with DATA-TYPE set to 3270-DATA or SCS-DATA are not\n      allowed before the\
    \ first BIND-IMAGE is received by the client;\n      only SSCP-LU-DATA or NVT-DATA\
    \ can be used to transmit user-\n      oriented data.  The same applies to data\
    \ messages exchanged after\n      an UNBIND is sent and before another BIND-IMAGE\
    \ is received by the\n      client.  Once the client receives a BIND-IMAGE data\
    \ message, the\n      allowable DATA-TYPE values include 3270-DATA and/or SCS-DATA,\n\
    \      depending on whether a terminal or printer device-type was\n      negotiated,\
    \ and whether a printer client agreed to DATA-STREAM-CTL\n      or SCS-CTL-CODES,\
    \ or both.  (See the section entitled \"The SYSREQ\n      Function\" for further\
    \ discussion of the SSCP-LU session in an SNA\n      environment.)\n   10.4 The\
    \ RESPONSES Function\n      This function can be supported for both terminal and\
    \ printer\n      sessions connected to both SNA and non-SNA servers.\n      Agreement\
    \ to support this function requires that the party support\n      the following\
    \ TN3270E header values:\n          Header field         Value\n          ------------\
    \         -----\n           DATA-TYPE          RESPONSE\n           DATA-TYPE\
    \          REQUEST\n           RESPONSE-FLAG      -all values-\n           REQUEST-FLAG\
    \       ERR-COND-CLEARED\n           SEQ-NUMBER         binary values from 0-32767\n\
    \      Whenever a data message is sent with a DATA-TYPE of either SCS-\n     \
    \ DATA or 3270-DATA, the sender must set the RESPONSE-FLAG field to\n      either\
    \ NO-RESPONSE, ERROR-RESPONSE, or ALWAYS-RESPONSE.  It is\n      anticipated that\
    \ the client side will normally set RESPONSE-FLAG\n      to NO-RESPONSE.  The\
    \ server, if it represents an SNA device,\n      should set RESPONSE-FLAG to reflect\
    \ the response value set in the\n      RH of the RU that generated this data message\
    \ - Definite Response\n      resulting in a RESPONSE-FLAG value of ALWAYS-RESPONSE,\
    \ Exception\n      Response resulting in ERROR-RESPONSE being set, and No Response\n\
    \      causing a setting of NO-RESPONSE.  A non-SNA server should set\n      RESPONSE-FLAG\
    \ to ERROR-RESPONSE.\n      In addition, the sender must keep a count of the messages\
    \ with a\n      DATA-TYPE of 3270-DATA or SCS-DATA that it sends on a given\n\
    \      session.  This counter should start at zero for the first such\n      message,\
    \ and be incremented by one for each subsequent message.\n      If the counter\
    \ reaches the maximum of 32767, it should be\n      restarted at zero.  The sender\
    \ should place this value in the\n      SEQ-NUMBER field of the TN3270E header\
    \ before it sends the\n      message.  Note that the SEQ-NUMBER field must be\
    \ set regardless of\n      the value of the RESPONSE-FLAG field.\n      10.4.1\
    \ Response Messages\n         Whenever a data message with a DATA-TYPE of either\
    \ SCS-DATA or\n         3270-DATA is received, the receiver must attempt to process\
    \ the\n         data in the data portion of the message, then determine whether\n\
    \         or not it should send a data message with a DATA-TYPE of\n         RESPONSE.\
    \  If the data message it has just processed had a\n         RESPONSE-FLAG value\
    \ of NO-RESPONSE, or if it had a value of\n         ERROR-RESPONSE and there were\
    \ no errors encountered while\n         processing the data, then no RESPONSE\
    \ type message should be\n         sent.  Otherwise, a data message should be\
    \ sent in which the\n         header DATA-TYPE field is set to RESPONSE, and in\
    \ which the\n         SEQ-NUMBER field is a copy of the SEQ-NUMBER field from\
    \ the\n         message to which this response corresponds.  The RESPONSE-FLAG\n\
    \         field in this header must have a value of either POSITIVE-\n       \
    \  RESPONSE or NEGATIVE-RESPONSE.  A POSITIVE-RESPONSE should be\n         sent\
    \ if the previously processed message's header specified\n         ALWAYS-RESPONSE\
    \ and no errors were encountered in processing\n         the data.  A NEGATIVE-RESPONSE\
    \ should be sent when\n          1) the previously processed message specified\
    \ ERROR-RESPONSE\n             or ALWAYS-RESPONSE and\n          2) some kind\
    \ of error occurred while processing the data.\n         Normally only the client\
    \ will be constructing and sending these\n         RESPONSE messages.  A negative\
    \ response sent by the client to\n         the server is the equivalent of a Unit\
    \ Check Status [7].  All\n         references to device status and sense codes\
    \ in this section\n         rely on [7].\n         The data portion of a RESPONSE\
    \ message must consist of one byte\n         of binary data.  The value of this\
    \ byte gives a more detailed\n         account of the results of having processed\
    \ the previously\n         received data message.  The possible values for this\
    \ byte are:\n           For a RESPONSE-FLAG value of POSITIVE-RESPONSE -\n   \
    \          Value            Meaning\n             -----            -------\n \
    \            0x00      Successful completion (when sent by the client,\n     \
    \                  this is equivalent to \"Device End\").\n           For a RESPONSE-FLAG\
    \ value of NEGATIVE-RESPONSE -\n             Value            Meaning\n      \
    \       -----            -------\n             0x00      An invalid 3270 command\
    \ was received\n                       (equivalent to \"Command Reject\").\n \
    \            0x01      Printer is not ready (equivalent to\n                 \
    \      \"Intervention Required\").\n             0x02      An illegal 3270 buffer\
    \ address or order\n                       sequence was received (equivalent to\n\
    \                       \"Operation Check\").\n             0x03      Printer\
    \ is powered off or not connected\n                       (equivalent to \"Component\
    \ Disconnected\").\n         When the server receives any of the above responses,\
    \ it should\n         pass along the appropriate information to the host application.\n\
    \         The appropriate information is determined by whether the server\n  \
    \       represents an SNA or a non-SNA device.\n         An SNA server should\
    \ pass along a POSITIVE-RESPONSE from the\n         client as an SNA positive\
    \ Response Unit to the host\n         application.  It should translate a NEGATIVE-RESPONSE\
    \ from the\n         client into an SNA negative Response Unit in which the Sense\n\
    \         Data Indicator bit is on and which contains one of the\n         following\
    \ sense codes:\n             RESPONSE-FLAG        Equivalent        SNA Sense\
    \ Code\n             -------------        ----------        --------------\n \
    \                0x00           Command Reject        0x10030000\n           \
    \      0x01        Intervention Required    0x08020000\n                 0x02\
    \           Operation Check       0x10050000\n                 0x03        Component\
    \ Disconnected   0x08310000\n         A non-SNA server should pass along a POSITIVE-RESPONSE\
    \ from the\n         client by setting the Device End Status bit on.  It should\n\
    \         reflect a NEGATIVE-RESPONSE from the client by setting the Unit\n  \
    \       Check Status Bit on, and setting either the Command Reject,\n        \
    \ Intervention Required, or Operation Check Sense bit on when\n         responding\
    \ to the Sense command.\n         In the case of Intervention Required or Component\
    \ Disconnected\n         being passed by the server to the host application, the\
    \ host\n         would normally refrain from sending any further data to the\n\
    \         printer.  If and when the error condition at the client has\n      \
    \   been resolved, the client must send to the server a data\n         message\
    \ whose header DATA-TYPE field is set to REQUEST, and\n         whose REQUEST-FLAG\
    \ is set to ERR-COND-CLEARED.  Note that this\n         message has no data portion.\
    \  Upon receipt of this message, the\n         server should pass along the appropriate\
    \ information to the\n         host application so that it may resume sending\
    \ printer output.\n         Again, the form of this information depends on whether\
    \ the\n         server represents an SNA or a non-SNA device.\n         An SNA\
    \ server should reflect an ERR-COND-CLEARED to the host\n         application\
    \ by sending an SNA LUSTAT RU with one of the\n         following sense codes:\n\
    \          - if the previous error condition was an Intervention\n           \
    \ Required, the server should send sense code 0x00010000\n          - if the previous\
    \ error condition was Component\n            Disconnected, the server should send\
    \ sense code 0x082B0000\n         A non-SNA server should set the corresponding\
    \ bits in the\n         Ending Status and Sense Condition bytes.\n   10.5 The\
    \ SYSREQ Function\n      This function can only be supported when the TN3270E\
    \ server\n      represents SNA devices.\n      Agreement to support this function\
    \ requires that the party support\n      the following TN3270E header values:\n\
    \          Header field         Value\n          ------------         -----\n\
    \           DATA-TYPE          SSCP-LU-DATA\n      The 3270 SYSREQ key can be\
    \ useful in an SNA environment when the\n      ATTN key is not sufficient to terminate\
    \ a process.  (See the\n      section entitled \"The 3270 ATTN Key\" for more\
    \ information.)\n      10.5.1 Background\n         In SNA, there is a session\
    \ between the host application (the\n         PLU, or Primary Logical Unit) and\
    \ the TN3270E server\n         representing the client (the SLU, or Secondary\
    \ Logical Unit).\n         This is referred to as the PLU-SLU session, and it\
    \ is the one\n         on which normal communications flow.  There is also a session\n\
    \         between the host telecommunications access method (the SSCP, or\n  \
    \       System Services Control Point) and the SLU, and it is referred\n     \
    \    to as the SSCP-LU session.  This session is used to carry\n         various\
    \ control information and is normally transparent to the\n         user; normal\
    \ 3270 data stream orders are not allowed in this\n         data.  For more information,\
    \ refer to [7].\n         The terminal display and keyboard are usually \"owned\"\
    \ by the\n         PLU-SLU session, meaning any data the user types is sent to\
    \ the\n         host application.  The SYSREQ key is used to toggle ownership\n\
    \         of the keyboard and display between the PLU-SLU session and the\n  \
    \       SSCP-LU session.  In other words, the user is able to press\n        \
    \ SYSREQ and then communicate directly with the host SSCP.  The\n         user\
    \ may then enter any valid Unformatted Systems Services\n         commands, which\
    \ are defined in the USS table associated with\n         the SLU.  The most common\
    \ USS command users employ is \"LOGOFF,\"\n         which requests that the SSCP\
    \ immediately terminate the PLU-SLU\n         session.  The usual reason for requesting\
    \ such an action is\n         that the host application (the PLU) has stopped\
    \ responding\n         altogether.\n         Whenever the keyboard and display\
    \ are owned by the SSCP-LU\n         session, no data is allowed to flow in either\
    \ direction on the\n         PLU-SLU session.  Once \"in\" the SSCP-LU session,\
    \ the user may\n         decide to switch back to the PLU-SLU session by again\
    \ pressing\n         the SYSREQ key.\n      10.5.2 TN3270E Implementation of SYSREQ\n\
    \         The design of some TN3270E servers allows them to fully support\n  \
    \       the SYSREQ key because they are allowed to send USS commands on\n    \
    \     the SSCP-LU session.  Other TN3270E servers operate in an\n         environment\
    \ which does not allow them to send USS commands to\n         the SSCP; this makes\
    \ full support of the SYSREQ key impossible.\n         For such servers, TN3270E\
    \ provides for emulation of a minimal\n         subset of functions, namely, for\
    \ the sequence of pressing\n         SYSREQ and typing LOGOFF that many users\
    \ employ to immediately\n         terminate the PLU-SLU session.\n         The\
    \ Telnet Abort Output (AO) command is the mechanism used to\n         implement\
    \ SYSREQ key support in TN3270E because, in a real SNA\n         session, once\
    \ the user presses the SYSREQ key, the host\n         application is prevented\
    \ from sending any more output to the\n         terminal (unless the user presses\
    \ SYSREQ a second time), but\n         the user's process continues to execute.\n\
    \         In order to implement SYSREQ key support, TN3270E clients that\n   \
    \      have agreed to the SYSREQ function should provide a key (or\n         combination\
    \ of keys) that is identified as mapping to the 3270\n         SYSREQ key.  When\
    \ the user presses this key(s), the client\n         should transmit a Telnet\
    \ AO command to the server.\n         Upon receipt of the AO command, a TN3270E\
    \ server that has\n         agreed to the SYSREQ function should enter what will\
    \ be loosely\n         termed \"suspended mode\" for the connection.  If a server\
    \ that\n         has not agreed to the SYSREQ function receives an AO command,\n\
    \         it should simply ignore it.  Any attempt by the host\n         application\
    \ to send data to the client while the connection is\n         \"suspended\" should\
    \ be responded to by the server with a\n         negative response, sense code\
    \ 0x082D, indicating an \"LU Busy\"\n         condition.  The server should not\
    \ transmit anything to the\n         client on behalf of the host application.\
    \  While the connection\n         is \"suspended,\" any data messages (except\
    \ TN3270E responses)\n         exchanged between the client and server should\
    \ have the DATA-\n         TYPE flag set to SSCP-LU-DATA.\n         At this point,\
    \ the behavior of the server depends upon whether\n         or not it is allowed\
    \ to send USS commands on the SSCP-LU\n         session.  Servers that have this\
    \ ability should simply act as a\n         vehicle for passing USS commands and\
    \ responses between the\n         client and the SSCP.\n         Servers that\
    \ are not allowed to send USS commands on the SSCP-\n         LU session should\
    \ behave as follows:\n      - if the user transmits the string LOGOFF (upper or\
    \ lower case),\n        the server should send an Unbind SNA RU to the host\n\
    \        application.  This will result in termination of the PLU-SLU\n      \
    \  session.  If the BIND-IMAGE function was agreed upon, then\n        the server\
    \ should also send a data message to the client with\n        the DATA-TYPE flag\
    \ set to UNBIND and the data portion set to\n        0x01.\n      - if the user\
    \ transmits anything other than LOGOFF, the server\n        should respond with\
    \ the string \"COMMAND UNRECOGNIZED\" to the\n        client.  The server should\
    \ not send anything to the host\n        application on behalf of the client.\n\
    \         Regardless of which kind of server is present (i.e., whether or\n  \
    \       not it may send USS commands on the SSCP-LU session), while the\n    \
    \     connection is suspended, the user may press the \"SYSREQ\" key\n       \
    \  again.  This will result in the transmission of another AO to\n         the\
    \ server.  The server should then send to the host\n         application an LUSTAT\
    \ RU with a value of 0x082B indicating\n         \"presentation space integrity\
    \ lost\".  The server will then\n         \"un-suspend\" the Telnet connection\
    \ to the client, meaning it\n         will allow the host application to once\
    \ again send data to the\n         client.\n"
- title: 11.  The 3270 ATTN Key
  contents:
  - "11.  The 3270 ATTN Key\n   The 3270 ATTN key is interpreted by many host applications\
    \ in an SNA\n   environment as an indication that the user wishes to interrupt\
    \ the\n   execution of the current process.  The Telnet Interrupt Process (IP)\n\
    \   command was defined expressly for such a purpose, so it is used to\n   implement\
    \ support for the 3270 ATTN key.  This requires two things:\n       - TN3270E\
    \ clients should provide as part of their keyboard\n         mapping a single\
    \ key or a combination of keys that map to\n         the 3270 ATTN key.  When\
    \ the user presses this key(s), the\n         client should transmit a Telnet\
    \ IP command to the server.\n       - TN3270E servers should translate the IP\
    \ command received from\n         a TN3270E client into the appropriate form and\
    \ pass it along\n         to the host application as an ATTN key.  In other words,\
    \ the\n         server representing an SLU in an SNA session should send\n   \
    \      a SIGNAL RU to the host application.\n   The ATTN key is not supported\
    \ in a non-SNA environment; therefore, a\n   TN3270E server representing non-SNA\
    \ 3270 devices should ignore any\n   Telnet IP commands it receives from a client.\n"
- title: 12.  3270 Structured Fields
  contents:
  - "12.  3270 Structured Fields\n   3270 structured fields provide a much wider range\
    \ of features than\n   \"old-style\" 3270 data, such as support for graphics,\
    \ partitions and\n   IPDS printer data streams. It would be unreasonable to expect\
    \ all\n   TN3270E clients to support all possible structured field functions,\n\
    \   yet there must be a mechanism by which those clients that are capable\n  \
    \ of supporting some or all structured field functions can indicate\n   their\
    \ wishes.\n   The design of 3270 structured fields provides a convenient means\
    \ to\n   convey the level of support (including no support) for the various\n\
    \   structured field functions.  This mechanism is the Read Partition\n   Query\
    \ command, which is sent from the host application to the device.\n   The device\
    \ responds with a Query Reply structured field(s) listing\n   which, if any, structured\
    \ field functions it supports.\n   The Query Reply is also used to indicate some\
    \ device capabilities\n   which do not require the use of structured fields, such\
    \ as extended\n   color support and extended highlighting capability.  Most host\n\
    \   applications will use Read Partition Query to precisely determine a\n   device's\
    \ capabilities when there has been some indication that the\n   device supports\
    \ the \"extended data stream\".\n   Therefore, all TN3270E clients that negotiate\
    \ a terminal device-type\n   that contains a \"-E\" suffix, the DYNAMIC terminal\
    \ type, or a printer\n   device-type, must be able to respond to a Read Partition\
    \ Query\n   command.  Note that these clients must support both the Read\n   Partition\
    \ Query (Type 02), and all forms of the Read Partition Query\n   List (Type 03).\n"
- title: 13.  Implementation Guidelines
  contents:
  - "13.  Implementation Guidelines\n   13.1 3270 Data Stream Notes\n      Implementors\
    \ of TN3270E clients should note that the command codes\n      for the various\
    \ 3270 Read and Write commands have different values\n      depending on how the\
    \ server is connected to the host (local versus\n      remote, SNA versus non-SNA).\
    \  Clients should be coded to check for\n      the various possible values if\
    \ they wish to be compatible with the\n      widest range of servers.  See [7]\
    \ for further details.\n   13.2 Negotiation of the TN3270E Telnet Option\n   \
    \   Since TN3270E is a Telnet Option governed by [8], both client and\n      server\
    \ are free to attempt to initiate negotiation of TN3270E by\n      sending a DO\
    \ TN3270E command.  However, just as is usually the\n      case with the Telnet\
    \ DO TERMINAL-TYPE, it is anticipated that the\n      server will normally be\
    \ the one sending the DO TN3270E, and the\n      client will be responding with\
    \ a WILL or a WON'T TN3270E.\n   13.3 A \"Keep-alive\" Mechanism\n      In many\
    \ environments, it is very helpful to have in place a\n      mechanism that allows\
    \ timely notification of the loss of a 3270\n      session.  TN3270E does not\
    \ require that any form of keep-alive\n      mechanism be employed by either clients\
    \ or servers, but\n      implementors wishing to support such a mechanism should\
    \ consider\n      the following guidelines.\n      There are at least two possible\
    \ means of providing a keep-alive\n      mechanism in TN3270E: the Telnet IAC\
    \ NOP command [8], and the\n      Telnet DO TIMING-MARK option [9].  Both methods\
    \ have their\n      advantages and disadvantages.  It is recommended that TN3270E\n\
    \      clients and servers that support keep-alives should accept both\n     \
    \ NOPs and TIMING-MARKs, and that both sides should always respond\n      to TIMING-MARKs.\n\
    \      Note that both clients and servers could be configured to\n      \"actively\"\
    \ implement keep-alives.  That is, both sides could send\n      a TIMING-MARK\
    \ or a NOP in order to determine whether or not the\n      partner is still alive.\
    \  Alternatively, network administrators may\n      wish to configure only one\
    \ side to send TIMING-MARKs or NOPs; in\n      this case, the other side would\
    \ be a \"passive\" participant which\n      simply responds to the keep-alives\
    \ it receives.\n      Implementors who want their code to be capable of being\
    \ an\n      \"active\" keep-alive participant should make their client or server\n\
    \      configurable so that administrators can set which, if any, keep-\n    \
    \  alive mechanism should be employed, and how often the NOP or\n      TIMING-MARK\
    \ should be sent on each session.\n      Upon failure of a session on which keep-alives\
    \ are used, both\n      parties should make the proper notifications.  A client\
    \ should\n      give the user some indication of the failure, such as an error\n\
    \      code in the Operator Information Area of the screen.  A server\n      should\
    \ notify the host application that the session has been\n      terminated, for\
    \ example by sending an UNBIND with type CLEANUP in\n      an SNA environment.\n\
    \   13.4 Examples\n      The following example shows a TN3270E-capable server\
    \ and a\n      traditional tn3270 client establishing a connection:\n        Server:\
    \  IAC DO TN3270E\n        Client:  IAC WON'T TN3270E\n        Server:  IAC DO\
    \ TERMINAL-TYPE\n        Client:  IAC WILL TERMINAL-TYPE\n        Server:  IAC\
    \ SB TERMINAL-TYPE SEND IAC SE\n        Client:  IAC SB TERMINAL-TYPE IS IBM-3278-2\
    \ IAC SE\n        Server:  IAC DO EOR IAC WILL EOR\n        Client:  IAC WILL\
    \ EOR IAC DO EOR\n        Server:  IAC DO BINARY IAC WILL BINARY\n        Client:\
    \  IAC WILL BINARY IAC DO BINARY\n           (3270 data stream is exchanged)\n\
    \      The following example shows a TN3270E-capable server and a\n      TN3270E-capable\
    \ client establishing a generic pool (non-specific)\n      terminal session:\n\
    \        Server:  IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:\
    \  IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE\
    \ REQUEST IBM-3278-2 IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2\
    \ CONNECT\n                        anyterm IAC SE\n        Client:  IAC SB TN3270E\
    \ FUNCTIONS REQUEST RESPONSES IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS\
    \ IS RESPONSES IAC SE\n           (3270 data stream is exchanged)\n      The following\
    \ example shows a TN3270E-capable server and a\n      TN3270E-capable client establishing\
    \ a terminal session where the\n      client requests a specific device-name:\n\
    \        Server:  IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:\
    \  IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE\
    \ REQUEST IBM-3278-5-E\n                        CONNECT myterm IAC SE\n      \
    \  Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-5-E CONNECT\n             \
    \           myterm IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST RESPONSES\n\
    \                        BIND-IMAGE IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS\
    \ IS RESPONSES BIND-IMAGE\n                        IAC SE\n           (3270 data\
    \ stream is exchanged)\n      The following example shows a TN3270E-capable server\
    \ and a\n      TN3270E-capable client attempting to establish a terminal session;\n\
    \      multiple attempts are necessary because the device-name initially\n   \
    \   requested by the client is already in use:\n        Server:  IAC DO TN3270E\n\
    \        Client:  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE\
    \ IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-5\n   \
    \                     CONNECT myterm IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE\
    \ REJECT REASON\n                        DEVICE-IN-USE IAC SE\n        Client:\
    \  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-2\n                        CONNECT\
    \ herterm IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2 CONNECT\n\
    \                        herterm IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS\
    \ REQUEST RESPONSES IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS IS RESPONSES\
    \ IAC SE\n           (3270 data stream is exchanged)\n      The following example\
    \ shows a TN3270E-capable server and a\n      TN3270E-capable client establishing\
    \ a printer session where the\n      client requests a specific device-name, and\
    \ where some amount of\n      3270 function negotiation is required before an\
    \ agreement is\n      reached:\n        Server:  IAC DO TN3270E\n        Client:\
    \  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE IAC SE\n\
    \        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3287-1 CONNECT\n    \
    \                    myprt IAC SE\n        Server:  IAC SB TN3270E DEVICE-TYPE\
    \ IS IBM-3287-1 CONNECT\n                        myprt IAC SE\n        Client:\
    \  IAC SB TN3270E FUNCTIONS REQUEST DATA-STREAM-CTL IAC\n        Server:  IAC\
    \ SB TN3270E FUNCTIONS REQUEST DATA-STREAM-CTL\n                        RESPONSES\
    \ IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST DATA-STREAM-CTL IAC\n\
    \        Server:  IAC SB TN3270E FUNCTIONS IS DATA-STREAM-CTL IAC SE\n       \
    \    (3270 data stream is exchanged)\n      The following example shows a TN3270E-capable\
    \ server and a\n      TN3270E-capable client establishing first a generic terminal\n\
    \      session, then a printer session where the \"partner\" printer for\n   \
    \   the assigned terminal is requested:\n        Server:  IAC DO TN3270E\n   \
    \     Client:  IAC WILL TN3270E\n        Server:  IAC SB TN3270E SEND DEVICE-TYPE\
    \ IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE REQUEST IBM-3278-2 IAC SE\n\
    \        Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3278-2 CONNECT\n         \
    \               termXYZ IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST\
    \ RESPONSES IAC SE\n        Server:  IAC SB TN3270E FUNCTIONS IS RESPONSES IAC\
    \ SE\n           (3270 data stream is exchanged)\n             .            .\n\
    \             .            .\n           (user decides to request a printer session,\n\
    \            so client again connects to Telnet port on server)\n        Server:\
    \  IAC DO TN3270E\n        Client:  IAC WILL TN3270E\n        Server:  IAC SB\
    \ TN3270E SEND DEVICE-TYPE IAC SE\n        Client:  IAC SB TN3270E DEVICE-TYPE\
    \ REQUEST IBM-3287-1\n                        ASSOCIATE termXYZ IAC SE\n     \
    \   Server:  IAC SB TN3270E DEVICE-TYPE IS IBM-3287-1 CONNECT\n              \
    \          termXYZ's-prt IAC SE\n        Client:  IAC SB TN3270E FUNCTIONS REQUEST\
    \ SCS-CTL-CODES\n                        RESPONSES IAC SE\n        Server:  IAC\
    \ SB TN3270E FUNCTIONS IS SCS-CTL-CODES RESPONSES\n                        IAC\
    \ SE\n           (3270 data stream is exchanged)\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Security issues are not addressed in this document.\
    \  It is\n   anticipated that once authentication mechanisms have become well\n\
    \   established, use of them can be made by TN3270E.  One of the\n   important\
    \ uses of authentication would be to answer the question of\n   whether or not\
    \ a given user should be allowed to \"use\" a specific\n   terminal or printer\
    \ device-name.\n"
- title: 15.  References
  contents:
  - "15.  References\n   [1] Rekhter, J., \"Telnet 3270 Regime Option\", RFC 1041,\
    \ IBM\n       Corporation, January 1988.\n   [2] VanBokkelen, J., \"Telnet Terminal-Type\
    \ Option\", RFC 1091, FTP\n       Software, Inc., February 1989.\n   [3] Postel,\
    \ J., and J. Reynolds, \"Telnet Binary Transmission\", STD\n       27, RFC 856,\
    \ USC/Information Sciences Institute, May 1983.\n   [4] Postel, J., \"Telnet End\
    \ of Record Option\", RFC 885, USC/\n       Information Sciences Institute, December\
    \ 1983.\n   [5] \"3270 Information Display System - Data Stream Programmer's\n\
    \       Reference\", publication number GA24-0059, IBM Corporation.\n   [6] \"\
    SNA Formats\", publication number GA27-3136, IBM Corporation.\n   [7] \"3174 Establishment\
    \ Controller Functional Description\",\n       publication number GA23-0218, IBM\
    \ Corporation.\n   [8] Postel, J., and J. Reynolds, \"Telnet Protocol Specification\"\
    , STD\n       8, RFC 854, USC/Information Sciences Institute, May 1983.\n   [9]\
    \ Postel, J., and J. Reynolds, \"Telnet Timing Mark Option\", STD 31,\n      \
    \ RFC 860, USC/Information Sciences Institute, May 1983.\n"
- title: 16.  Author's Note
  contents:
  - "16.  Author's Note\n   Portions of this document were drawn from the following\
    \ sources:\n    - A White Paper written by Owen Reddecliffe, WRQ Corporation,\n\
    \      October 1991.\n    - Experimental work on the part of Cleve Graves and\
    \ Michelle\n      Angel, OpenConnect Systems, 1992 - 1993.\n    - Discussions\
    \ at the 1993 IETF meetings.\n    - Discussions on the \"TN3270E\" list, 1993-94.\n"
- title: 17. Author's Address
  contents:
  - "17. Author's Address\n   Bill Kelly\n   Division of University Computing\n  \
    \ 144 Parker Hall\n   Auburn University, AL  36849\n   Phone: (205) 844-4512\n\
    \   EMail: kellywh@mail.auburn.edu\n"
