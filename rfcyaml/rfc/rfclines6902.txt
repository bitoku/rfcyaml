Abstract JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document; it is suitable for use with the HTTP PATCH method.
The "application/json patch json" media type is used to identify such patch documents.
Introduction JavaScript Object Notation (JSON)
[RFC4627] is a common format for the exchange and storage of structured data.
HTTP PATCH [RFC5789] extends the Hypertext Transfer Protocol (HTTP)
[RFC2616] with a method to perform partial modifications to resources.
JSON Patch is a format (identified by the media type "application/ json patch json") for expressing a sequence of operations to apply to a target JSON document; it is suitable for use with the HTTP PATCH method.
This format is also potentially useful in other cases in which it is necessary to make partial updates to a JSON document or to a data structure that has similar constraints (i.e., they can be serialized as an object or an array using the JSON grammar).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
A JSON Patch document is a JSON [RFC4627] document that represents an array of objects.
Each object represents a single operation to be applied to the target JSON document.
The following is an example JSON Patch document, transferred in an HTTP PATCH request:
Host: example.org Content Length: 326 Content Type: application/json patch json
Operations are applied sequentially in the order they appear in the array.
Each operation in the sequence is applied to the target document; the resulting document becomes the target of the next operation.
Evaluation continues until all operations are successfully applied or until an error condition is encountered.
Operations Operation objects MUST have exactly one "op" member, whose value indicates the operation to perform.
Its value MUST be one of "add", "remove", "replace", "move", "copy", or "test"; other values are errors.
The semantics of each object is defined below.
Additionally, operation objects MUST have exactly one "path" member.
That member's value is a string containing a JSON Pointer value [RFC6901] that references a location within the target document (the "target location") where the operation is performed.
The meanings of other operation object members are defined by operation (see the subsections below).
Members that are not explicitly defined for the operation in question MUST be ignored (i.e., the operation will complete as if the undefined member did not appear in the object).
Note that the ordering of members in JSON objects is not significant
add The "add" operation performs one of the following functions,
depending upon what the target location references:  If the target location specifies an array index, a new value is inserted into the array at the specified index.
If the target location specifies an object member that does not already exist, a new member is added to the object.
If the target location specifies an object member that does exist, that member's value is replaced.
The operation object MUST contain a "value" member whose content specifies the value to be added.
the specified value becomes the entire content of the target document.
A member to add to an existing object
whereupon the supplied value is added to that object at the indicated location.
If the member already exists, it is replaced by the specified value.
An element to add to an existing array whereupon the supplied value is added to the array at the indicated location.
Any elements at or above the specified index are shifted one position to the right.
The specified index MUST NOT be greater than the number of elements in the array.
Because this operation is designed to add to existing objects and arrays, its target location will often not exist.
Although the pointer's error handling algorithm will thus be invoked, this specification defines the error handling behavior for "add" pointers to ignore that error and add the value as specified.
However, the object itself or an array containing it does need to exist, and it remains an error for that not to be the case.
removes the value at the target location.
The target location MUST exist for the operation to be successful.
If removing an element from an array, any elements above the specified index are shifted one position to the left.
The "replace" operation replaces the value at the target location with a new value.
The operation object MUST contain a "value" member whose content specifies the replacement value.
The target location MUST exist for the operation to be successful.
This operation is functionally identical to a "remove" operation for a value, followed immediately by an "add" operation at the same location with the replacement value.
The "move" operation removes the value at a specified location and adds it to the target location.
The operation object MUST contain a "from" member, which is a string containing a JSON Pointer value that references the location in the target document to move the value from.
The "from" location MUST exist for the operation to be successful.
"/a/b/d" } This operation is functionally identical to a "remove" operation on the "from" location, followed immediately by an "add" operation at the target location with the value that was just removed.
The "from" location MUST NOT be a proper prefix of the "path" location; i.e., a location cannot be moved into one of its children.
copy The "copy" operation copies the value at a specified location to the target location.
The operation object MUST contain a "from" member, which is a string containing a JSON Pointer value that references the location in the target document to copy the value from.
The "from" location MUST exist for the operation to be successful.
" } This operation is functionally identical to an "add" operation at the target location using the value specified in the "from" member. 4.6.
The "test" operation tests that a value at the target location is equal to a specified value.
The operation object MUST contain a "value" member that conveys the value to be compared to the target location's value.
The target location MUST be equal to the "value" value for the operation to be considered successful.
Here, "equal" means that the value at the target location and the value conveyed by "value" are of the same JSON type, and that they are considered equal by the following rules for that type:  strings: are considered equal if they contain the same number of Unicode characters and their code points are byte by byte equal.
numbers: are considered equal if their values are numerically equal.
arrays: are considered equal if they contain the same number of values, and if each value can be considered equal to the value at the corresponding position in the other array, using this list of type specific rules.
objects: are considered equal if they contain the same number of members, and if each member can be considered equal to a member in the other object, by comparing their keys (as strings) and their values (using this list of type specific rules).
literals (false, true, and null): are considered equal if they are the same.
Note that the comparison that is done is a logical comparison; e.g., whitespace between the member values of an array is not significant.
Also, note that ordering of the serialization of object members is not significant.
If a normative requirement is violated by a JSON Patch document, or if an operation is not successful, evaluation of the JSON Patch document SHOULD terminate and application of the entire patch document SHALL NOT be deemed successful.
See [RFC5789], Section 2.2 for considerations regarding handling errors when JSON Patch is used with the HTTP PATCH method, including suggested status codes to use to indicate various conditions.
Note that the HTTP PATCH method is atomic, as per [RFC5789].
The Internet media type for a JSON Patch document is application/ json patch json.
Type name:  application Subtype name:  json patch json Required parameters:  none Optional parameters:   none Encoding considerations:  binary Security considerations
: See Security Considerations in Section 7.
N/A Published specification: RFC 6902 Applications that use this media type: Applications that manipulate JSON documents.
Additional information: Magic number(s):  N/
.json patch Macintosh file type code(s):  TEXT Person & email address to contact for further information
: Paul C. Bryan <pbryan@anode.ca
Intended usage:  COMMON Restrictions on usage:  none Author:  Paul C. Bryan
This specification has the same security considerations as JSON [RFC4627] and JSON Pointer [RFC6901].
A few older Web browsers can be coerced into loading an arbitrary JSON document whose root is an array, leading to a situation in which a JSON Patch document containing sensitive information could be exposed to attackers, even if access is authenticated.
This is known as a Cross Site Request Forgery (CSRF) attack [CSRF].
However, such browsers are not widely used (at the time of writing, it is estimated that they are used in less than 1% of the market).
Publishers who are nevertheless concerned about this attack are advised to avoid making such documents available with HTTP GET.
Adding to a Nonexistent Target
This JSON Patch document, applied to the target JSON document above, would result in an error (therefore, it would not be applied), because the "add" operation's target location that references neither the root of the document, nor a member of an existing object, nor a member of an existing array.
This JSON Patch document cannot be treated as an "add" operation, because it contains a later "op":"remove" element.
JSON requires that object member names be unique with a "SHOULD" requirement, and there is no standard error handling for duplicates.
This results in an error, because the test fails.
The document value is numeric, whereas the value being tested for is a string.
