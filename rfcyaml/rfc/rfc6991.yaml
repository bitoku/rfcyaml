- contents:
  - '                         Common YANG Data Types

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document introduces a collection of common data types to be
    used\n   with the YANG data modeling language.  This document obsoletes RFC\n
    \  6021.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6991.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Overview ........................................................3\n   3.
    Core YANG Derived Types .........................................4\n   4. Internet-Specific
    Derived Types ................................14\n   5. IANA Considerations ............................................24\n
    \  6. Security Considerations ........................................25\n   7.
    Contributors ...................................................25\n   8. Acknowledgments
    ................................................25\n   9. References .....................................................26\n
    \     9.1. Normative References ......................................26\n      9.2.
    Informative References ....................................26\n   Appendix A.
    \ Changes from RFC 6021 ................................30\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   YANG [RFC6020] is a data modeling language used to model\n
    \  configuration and state data manipulated by the Network Configuration\n   Protocol
    (NETCONF) [RFC6241].  The YANG language supports a small set\n   of built-in data
    types and provides mechanisms to derive other types\n   from the built-in types.\n
    \  This document introduces a collection of common data types derived\n   from
    the built-in YANG data types.  The derived types are designed to\n   be applicable
    for modeling all areas of management information.  The\n   definitions are organized
    in several YANG modules.  The\n   \"ietf-yang-types\" module contains generally
    useful data types.  The\n   \"ietf-inet-types\" module contains definitions that
    are relevant for\n   the Internet protocol suite.\n   This document adds new type
    definitions to the YANG modules and\n   obsoletes [RFC6021].  For further details,
    see the revision\n   statements of the YANG modules in Sections 3 and 4 or the
    summary in\n   Appendix A.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in BCP\n   14 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   This section provides a short overview of the types defined
    in\n   subsequent sections and their equivalent Structure of Management\n   Information
    Version 2 (SMIv2) [RFC2578][RFC2579] data types.  A YANG\n   data type is equivalent
    to an SMIv2 data type if the data types have\n   the same set of values and the
    semantics of the values are\n   equivalent.\n   Table 1 lists the types defined
    in the ietf-yang-types YANG module\n   and the corresponding SMIv2 types (- indicates
    there is no\n   corresponding SMIv2 type).\n        +-----------------------+--------------------------------+\n
    \       | YANG type             | Equivalent SMIv2 type (module) |\n        +-----------------------+--------------------------------+\n
    \       | counter32             | Counter32 (SNMPv2-SMI)         |\n        |
    zero-based-counter32  | ZeroBasedCounter32 (RMON2-MIB) |\n        | counter64
    \            | Counter64 (SNMPv2-SMI)         |\n        | zero-based-counter64
    \ | ZeroBasedCounter64 (HCNUM-TC)  |\n        | gauge32               | Gauge32
    (SNMPv2-SMI)           |\n        | gauge64               | CounterBasedGauge64
    (HCNUM-TC) |\n        | object-identifier     | -                              |\n
    \       | object-identifier-128 | OBJECT IDENTIFIER              |\n        |
    yang-identifier       | -                              |\n        | date-and-time
    \        | -                              |\n        | timeticks             |
    TimeTicks (SNMPv2-SMI)         |\n        | timestamp             | TimeStamp
    (SNMPv2-TC)          |\n        | phys-address          | PhysAddress (SNMPv2-TC)
    \       |\n        | mac-address           | MacAddress (SNMPv2-TC)         |\n
    \       | xpath1.0              | -                              |\n        |
    hex-string            | -                              |\n        | uuid                  |
    -                              |\n        | dotted-quad           | -                              |\n
    \       +-----------------------+--------------------------------+\n                         Table
    1: ietf-yang-types\n   Table 2 lists the types defined in the ietf-inet-types
    YANG module\n   and the corresponding SMIv2 types (if any).\n   +----------------------+--------------------------------------------+\n
    \  | YANG type            | Equivalent SMIv2 type (module)             |\n   +----------------------+--------------------------------------------+\n
    \  | ip-version           | InetVersion (INET-ADDRESS-MIB)             |\n   |
    dscp                 | Dscp (DIFFSERV-DSCP-TC)                    |\n   | ipv6-flow-label
    \     | IPv6FlowLabel (IPV6-FLOW-LABEL-MIB)        |\n   | port-number          |
    InetPortNumber (INET-ADDRESS-MIB)          |\n   | as-number            | InetAutonomousSystemNumber
    \                |\n   |                      | (INET-ADDRESS-MIB)                         |\n
    \  | ip-address           | -                                          |\n   |
    ipv4-address         | -                                          |\n   | ipv6-address
    \        | -                                          |\n   | ip-address-no-zone
    \  | -                                          |\n   | ipv4-address-no-zone |
    -                                          |\n   | ipv6-address-no-zone | -                                          |\n
    \  | ip-prefix            | -                                          |\n   |
    ipv4-prefix          | -                                          |\n   | ipv6-prefix
    \         | -                                          |\n   | domain-name          |
    -                                          |\n   | host                 | -                                          |\n
    \  | uri                  | Uri (URI-TC-MIB)                           |\n   +----------------------+--------------------------------------------+\n
    \                        Table 2: ietf-inet-types\n"
  title: 2.  Overview
- contents:
  - "3.  Core YANG Derived Types\n   The ietf-yang-types YANG module references [IEEE802],
    [ISO9834-1],\n   [RFC2578], [RFC2579], [RFC2856], [RFC3339], [RFC4122], [RFC4502],\n
    \  [RFC6020], [XPATH], and [XSD-TYPES].\n   <CODE BEGINS> file \"ietf-yang-types@2013-07-15.yang\"\n
    \  module ietf-yang-types {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n
    \    prefix \"yang\";\n     organization\n      \"IETF NETMOD (NETCONF Data Modeling
    Language) Working Group\";\n     contact\n      \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
    \      WG List:  <mailto:netmod@ietf.org>\n       WG Chair: David Kessens\n                 <mailto:david.kessens@nsn.com>\n
    \      WG Chair: Juergen Schoenwaelder\n                 <mailto:j.schoenwaelder@jacobs-university.de>\n
    \      Editor:   Juergen Schoenwaelder\n                 <mailto:j.schoenwaelder@jacobs-university.de>\";\n
    \    description\n      \"This module contains a collection of generally useful
    derived\n       YANG data types.\n       Copyright (c) 2013 IETF Trust and the
    persons identified as\n       authors of the code.  All rights reserved.\n       Redistribution
    and use in source and binary forms, with or\n       without modification, is permitted
    pursuant to, and subject\n       to the license terms contained in, the Simplified
    BSD License\n       set forth in Section 4.c of the IETF Trust's Legal Provisions\n
    \      Relating to IETF Documents\n       (http://trustee.ietf.org/license-info).\n
    \      This version of this YANG module is part of RFC 6991; see\n       the RFC
    itself for full legal notices.\";\n     revision 2013-07-15 {\n       description\n
    \       \"This revision adds the following new data types:\n         - yang-identifier\n
    \        - hex-string\n         - uuid\n         - dotted-quad\";\n       reference\n
    \       \"RFC 6991: Common YANG Data Types\";\n     }\n     revision 2010-09-24
    {\n       description\n        \"Initial revision.\";\n       reference\n        \"RFC
    6021: Common YANG Data Types\";\n     }\n     /*** collection of counter and gauge
    types ***/\n     typedef counter32 {\n       type uint32;\n       description\n
    \       \"The counter32 type represents a non-negative integer\n         that
    monotonically increases until it reaches a\n         maximum value of 2^32-1 (4294967295
    decimal), when it\n         wraps around and starts increasing again from zero.\n
    \        Counters have no defined 'initial' value, and thus, a\n         single
    value of a counter has (in general) no information\n         content.  Discontinuities
    in the monotonically increasing\n         value normally occur at re-initialization
    of the\n         management system, and at other times as specified in the\n         description
    of a schema node using this type.  If such\n         other times can occur, for
    example, the creation of\n         a schema node of type counter32 at times other
    than\n         re-initialization, then a corresponding schema node\n         should
    be defined, with an appropriate type, to indicate\n         the last discontinuity.\n
    \        The counter32 type should not be used for configuration\n         schema
    nodes.  A default statement SHOULD NOT be used in\n         combination with the
    type counter32.\n         In the value set and its semantics, this type is equivalent\n
    \        to the Counter32 type of the SMIv2.\";\n       reference\n        \"RFC
    2578: Structure of Management Information Version 2\n                   (SMIv2)\";\n
    \    }\n     typedef zero-based-counter32 {\n       type yang:counter32;\n       default
    \"0\";\n       description\n        \"The zero-based-counter32 type represents
    a counter32\n         that has the defined 'initial' value zero.\n         A schema
    node of this type will be set to zero (0) on creation\n         and will thereafter
    increase monotonically until it reaches\n         a maximum value of 2^32-1 (4294967295
    decimal), when it\n         wraps around and starts increasing again from zero.\n
    \        Provided that an application discovers a new schema node\n         of
    this type within the minimum time to wrap, it can use the\n         'initial'
    value as a delta.  It is important for a management\n         station to be aware
    of this minimum time and the actual time\n         between polls, and to discard
    data if the actual time is too\n         long or there is no defined minimum time.\n
    \        In the value set and its semantics, this type is equivalent\n         to
    the ZeroBasedCounter32 textual convention of the SMIv2.\";\n       reference\n
    \        \"RFC 4502: Remote Network Monitoring Management Information\n                    Base
    Version 2\";\n     }\n     typedef counter64 {\n       type uint64;\n       description\n
    \       \"The counter64 type represents a non-negative integer\n         that
    monotonically increases until it reaches a\n         maximum value of 2^64-1 (18446744073709551615
    decimal),\n         when it wraps around and starts increasing again from zero.\n
    \        Counters have no defined 'initial' value, and thus, a\n         single
    value of a counter has (in general) no information\n         content.  Discontinuities
    in the monotonically increasing\n         value normally occur at re-initialization
    of the\n         management system, and at other times as specified in the\n         description
    of a schema node using this type.  If such\n         other times can occur, for
    example, the creation of\n         a schema node of type counter64 at times other
    than\n         re-initialization, then a corresponding schema node\n         should
    be defined, with an appropriate type, to indicate\n         the last discontinuity.\n
    \        The counter64 type should not be used for configuration\n         schema
    nodes.  A default statement SHOULD NOT be used in\n         combination with the
    type counter64.\n         In the value set and its semantics, this type is equivalent\n
    \        to the Counter64 type of the SMIv2.\";\n       reference\n        \"RFC
    2578: Structure of Management Information Version 2\n                   (SMIv2)\";\n
    \    }\n     typedef zero-based-counter64 {\n       type yang:counter64;\n       default
    \"0\";\n       description\n        \"The zero-based-counter64 type represents
    a counter64 that\n         has the defined 'initial' value zero.\n         A schema
    node of this type will be set to zero (0) on creation\n         and will thereafter
    increase monotonically until it reaches\n         a maximum value of 2^64-1 (18446744073709551615
    decimal),\n         when it wraps around and starts increasing again from zero.\n
    \        Provided that an application discovers a new schema node\n         of
    this type within the minimum time to wrap, it can use the\n         'initial'
    value as a delta.  It is important for a management\n         station to be aware
    of this minimum time and the actual time\n         between polls, and to discard
    data if the actual time is too\n         long or there is no defined minimum time.\n
    \        In the value set and its semantics, this type is equivalent\n         to
    the ZeroBasedCounter64 textual convention of the SMIv2.\";\n       reference\n
    \       \"RFC 2856: Textual Conventions for Additional High Capacity\n                   Data
    Types\";\n     }\n     typedef gauge32 {\n       type uint32;\n       description\n
    \       \"The gauge32 type represents a non-negative integer, which\n         may
    increase or decrease, but shall never exceed a maximum\n         value, nor fall
    below a minimum value.  The maximum value\n         cannot be greater than 2^32-1
    (4294967295 decimal), and\n         the minimum value cannot be smaller than 0.
    \ The value of\n         a gauge32 has its maximum value whenever the information\n
    \        being modeled is greater than or equal to its maximum\n         value,
    and has its minimum value whenever the information\n         being modeled is
    smaller than or equal to its minimum value.\n         If the information being
    modeled subsequently decreases\n         below (increases above) the maximum (minimum)
    value, the\n         gauge32 also decreases (increases).\n         In the value
    set and its semantics, this type is equivalent\n         to the Gauge32 type of
    the SMIv2.\";\n       reference\n        \"RFC 2578: Structure of Management Information
    Version 2\n                   (SMIv2)\";\n     }\n     typedef gauge64 {\n       type
    uint64;\n       description\n        \"The gauge64 type represents a non-negative
    integer, which\n         may increase or decrease, but shall never exceed a maximum\n
    \        value, nor fall below a minimum value.  The maximum value\n         cannot
    be greater than 2^64-1 (18446744073709551615), and\n         the minimum value
    cannot be smaller than 0.  The value of\n         a gauge64 has its maximum value
    whenever the information\n         being modeled is greater than or equal to its
    maximum\n         value, and has its minimum value whenever the information\n
    \        being modeled is smaller than or equal to its minimum value.\n         If
    the information being modeled subsequently decreases\n         below (increases
    above) the maximum (minimum) value, the\n         gauge64 also decreases (increases).\n
    \        In the value set and its semantics, this type is equivalent\n         to
    the CounterBasedGauge64 SMIv2 textual convention defined\n         in RFC 2856\";\n
    \      reference\n        \"RFC 2856: Textual Conventions for Additional High
    Capacity\n                   Data Types\";\n     }\n     /*** collection of identifier-related
    types ***/\n     typedef object-identifier {\n       type string {\n         pattern
    '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))'\n               + '(\\.(0|([1-9]\\d*)))*';\n
    \      }\n       description\n        \"The object-identifier type represents
    administratively\n         assigned names in a registration-hierarchical-name
    tree.\n         Values of this type are denoted as a sequence of numerical\n         non-negative
    sub-identifier values.  Each sub-identifier\n         value MUST NOT exceed 2^32-1
    (4294967295).  Sub-identifiers\n         are separated by single dots and without
    any intermediate\n         whitespace.\n         The ASN.1 standard restricts
    the value space of the first\n         sub-identifier to 0, 1, or 2.  Furthermore,
    the value space\n         of the second sub-identifier is restricted to the range\n
    \        0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n         the
    ASN.1 standard requires that an object identifier\n         has always at least
    two sub-identifiers.  The pattern\n         captures these restrictions.\n         Although
    the number of sub-identifiers is not limited,\n         module designers should
    realize that there may be\n         implementations that stick with the SMIv2
    limit of 128\n         sub-identifiers.\n         This type is a superset of the
    SMIv2 OBJECT IDENTIFIER type\n         since it is not restricted to 128 sub-identifiers.
    \ Hence,\n         this type SHOULD NOT be used to represent the SMIv2 OBJECT\n
    \        IDENTIFIER type; the object-identifier-128 type SHOULD be\n         used
    instead.\";\n       reference\n        \"ISO9834-1: Information technology --
    Open Systems\n         Interconnection -- Procedures for the operation of OSI\n
    \        Registration Authorities: General procedures and top\n         arcs of
    the ASN.1 Object Identifier tree\";\n     }\n     typedef object-identifier-128
    {\n       type object-identifier {\n         pattern '\\d*(\\.\\d*){1,127}';\n
    \      }\n       description\n        \"This type represents object-identifiers
    restricted to 128\n         sub-identifiers.\n         In the value set and its
    semantics, this type is equivalent\n         to the OBJECT IDENTIFIER type of
    the SMIv2.\";\n       reference\n        \"RFC 2578: Structure of Management Information
    Version 2\n                   (SMIv2)\";\n     }\n     typedef yang-identifier
    {\n       type string {\n         length \"1..max\";\n         pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n
    \        pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n       }\n       description\n
    \        \"A YANG identifier string as defined by the 'identifier'\n          rule
    in Section 12 of RFC 6020.  An identifier must\n          start with an alphabetic
    character or an underscore\n          followed by an arbitrary sequence of alphabetic
    or\n          numeric characters, underscores, hyphens, or dots.\n          A
    YANG identifier MUST NOT start with any possible\n          combination of the
    lowercase or uppercase character\n          sequence 'xml'.\";\n       reference\n
    \        \"RFC 6020: YANG - A Data Modeling Language for the Network\n                    Configuration
    Protocol (NETCONF)\";\n     }\n     /*** collection of types related to date and
    time***/\n     typedef date-and-time {\n       type string {\n         pattern
    '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?'\n               + '(Z|[\\+\\-]\\d{2}:\\d{2})';\n
    \      }\n       description\n        \"The date-and-time type is a profile of
    the ISO 8601\n         standard for representation of dates and times using the\n
    \        Gregorian calendar.  The profile is defined by the\n         date-time
    production in Section 5.6 of RFC 3339.\n         The date-and-time type is compatible
    with the dateTime XML\n         schema type with the following notable exceptions:\n
    \        (a) The date-and-time type does not allow negative years.\n         (b)
    The date-and-time time-offset -00:00 indicates an unknown\n             time zone
    (see RFC 3339) while -00:00 and +00:00 and Z\n             all represent the same
    time zone in dateTime.\n         (c) The canonical format (see below) of data-and-time
    values\n             differs from the canonical format used by the dateTime XML\n
    \            schema type, which requires all times to be in UTC using\n             the
    time-offset 'Z'.\n         This type is not equivalent to the DateAndTime textual\n
    \        convention of the SMIv2 since RFC 3339 uses a different\n         separator
    between full-date and full-time and provides\n         higher resolution of time-secfrac.\n
    \        The canonical format for date-and-time values with a known time\n         zone
    uses a numeric time zone offset that is calculated using\n         the device's
    configured known offset to UTC time.  A change of\n         the device's offset
    to UTC time will cause date-and-time values\n         to change accordingly.  Such
    changes might happen periodically\n         in case a server follows automatically
    daylight saving time\n         (DST) time zone offset changes.  The canonical
    format for\n         date-and-time values with an unknown time zone (usually\n
    \        referring to the notion of local time) uses the time-offset\n         -00:00.\";\n
    \      reference\n        \"RFC 3339: Date and Time on the Internet: Timestamps\n
    \        RFC 2579: Textual Conventions for SMIv2\n         XSD-TYPES: XML Schema
    Part 2: Datatypes Second Edition\";\n     }\n     typedef timeticks {\n       type
    uint32;\n       description\n        \"The timeticks type represents a non-negative
    integer that\n         represents the time, modulo 2^32 (4294967296 decimal),
    in\n         hundredths of a second between two epochs.  When a schema\n         node
    is defined that uses this type, the description of\n         the schema node identifies
    both of the reference epochs.\n         In the value set and its semantics, this
    type is equivalent\n         to the TimeTicks type of the SMIv2.\";\n       reference\n
    \       \"RFC 2578: Structure of Management Information Version 2\n                   (SMIv2)\";\n
    \    }\n     typedef timestamp {\n       type yang:timeticks;\n       description\n
    \       \"The timestamp type represents the value of an associated\n         timeticks
    schema node at which a specific occurrence\n         happened.  The specific occurrence
    must be defined in the\n         description of any schema node defined using
    this type.  When\n         the specific occurrence occurred prior to the last
    time the\n         associated timeticks attribute was zero, then the timestamp\n
    \        value is zero.  Note that this requires all timestamp values\n         to
    be reset to zero when the value of the associated timeticks\n         attribute
    reaches 497+ days and wraps around to zero.\n         The associated timeticks
    schema node must be specified\n         in the description of any schema node
    using this type.\n         In the value set and its semantics, this type is equivalent\n
    \        to the TimeStamp textual convention of the SMIv2.\";\n       reference\n
    \       \"RFC 2579: Textual Conventions for SMIv2\";\n     }\n     /*** collection
    of generic address types ***/\n     typedef phys-address {\n       type string
    {\n         pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n       }\n       description\n
    \       \"Represents media- or physical-level addresses represented\n         as
    a sequence octets, each octet represented by two hexadecimal\n         numbers.
    \ Octets are separated by colons.  The canonical\n         representation uses
    lowercase characters.\n         In the value set and its semantics, this type
    is equivalent\n         to the PhysAddress textual convention of the SMIv2.\";\n
    \      reference\n        \"RFC 2579: Textual Conventions for SMIv2\";\n     }\n
    \    typedef mac-address {\n       type string {\n         pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n
    \      }\n       description\n        \"The mac-address type represents an IEEE
    802 MAC address.\n         The canonical representation uses lowercase characters.\n
    \        In the value set and its semantics, this type is equivalent\n         to
    the MacAddress textual convention of the SMIv2.\";\n       reference\n        \"IEEE
    802: IEEE Standard for Local and Metropolitan Area\n                   Networks:
    Overview and Architecture\n         RFC 2579: Textual Conventions for SMIv2\";\n
    \    }\n     /*** collection of XML-specific types ***/\n     typedef xpath1.0
    {\n       type string;\n       description\n        \"This type represents an
    XPATH 1.0 expression.\n         When a schema node is defined that uses this type,
    the\n         description of the schema node MUST specify the XPath\n         context
    in which the XPath expression is evaluated.\";\n       reference\n        \"XPATH:
    XML Path Language (XPath) Version 1.0\";\n     }\n     /*** collection of string
    types ***/\n     typedef hex-string {\n       type string {\n         pattern
    '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n       }\n       description\n        \"A
    hexadecimal string with octets represented as hex digits\n         separated by
    colons.  The canonical representation uses\n         lowercase characters.\";\n
    \    }\n     typedef uuid {\n       type string {\n         pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-'\n
    \              + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n       }\n       description\n
    \       \"A Universally Unique IDentifier in the string representation\n         defined
    in RFC 4122.  The canonical representation uses\n         lowercase characters.\n
    \        The following is an example of a UUID in string representation:\n         f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n
    \        \";\n       reference\n        \"RFC 4122: A Universally Unique IDentifier
    (UUID) URN\n                   Namespace\";\n     }\n     typedef dotted-quad
    {\n       type string {\n         pattern\n           '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'\n
    \        + '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n       }\n       description\n
    \        \"An unsigned 32-bit number expressed in the dotted-quad\n          notation,
    i.e., four octets written as decimal numbers\n          and separated with the
    '.' (full stop) character.\";\n     }\n   }\n   <CODE ENDS>\n"
  title: 3.  Core YANG Derived Types
- contents:
  - "4.  Internet-Specific Derived Types\n   The ietf-inet-types YANG module references
    [RFC0768], [RFC0791],\n   [RFC0793], [RFC0952], [RFC1034], [RFC1123], [RFC1930],
    [RFC2460],\n   [RFC2474], [RFC2780], [RFC2782], [RFC3289], [RFC3305], [RFC3595],\n
    \  [RFC3986], [RFC4001], [RFC4007], [RFC4271], [RFC4291], [RFC4340],\n   [RFC4960],
    [RFC5017], [RFC5890], [RFC5952], and [RFC6793].\n   <CODE BEGINS> file \"ietf-inet-types@2013-07-15.yang\"\n
    \  module ietf-inet-types {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n
    \    prefix \"inet\";\n     organization\n      \"IETF NETMOD (NETCONF Data Modeling
    Language) Working Group\";\n     contact\n      \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
    \      WG List:  <mailto:netmod@ietf.org>\n       WG Chair: David Kessens\n                 <mailto:david.kessens@nsn.com>\n
    \      WG Chair: Juergen Schoenwaelder\n                 <mailto:j.schoenwaelder@jacobs-university.de>\n
    \      Editor:   Juergen Schoenwaelder\n                 <mailto:j.schoenwaelder@jacobs-university.de>\";\n
    \    description\n      \"This module contains a collection of generally useful
    derived\n       YANG data types for Internet addresses and related things.\n       Copyright
    (c) 2013 IETF Trust and the persons identified as\n       authors of the code.
    \ All rights reserved.\n       Redistribution and use in source and binary forms,
    with or\n       without modification, is permitted pursuant to, and subject\n
    \      to the license terms contained in, the Simplified BSD License\n       set
    forth in Section 4.c of the IETF Trust's Legal Provisions\n       Relating to
    IETF Documents\n       (http://trustee.ietf.org/license-info).\n       This version
    of this YANG module is part of RFC 6991; see\n       the RFC itself for full legal
    notices.\";\n     revision 2013-07-15 {\n       description\n        \"This revision
    adds the following new data types:\n         - ip-address-no-zone\n         -
    ipv4-address-no-zone\n         - ipv6-address-no-zone\";\n       reference\n        \"RFC
    6991: Common YANG Data Types\";\n     }\n     revision 2010-09-24 {\n       description\n
    \       \"Initial revision.\";\n       reference\n        \"RFC 6021: Common YANG
    Data Types\";\n     }\n     /*** collection of types related to protocol fields
    ***/\n     typedef ip-version {\n       type enumeration {\n         enum unknown
    {\n           value \"0\";\n           description\n            \"An unknown or
    unspecified version of the Internet\n             protocol.\";\n         }\n         enum
    ipv4 {\n           value \"1\";\n           description\n            \"The IPv4
    protocol as defined in RFC 791.\";\n         }\n         enum ipv6 {\n           value
    \"2\";\n           description\n            \"The IPv6 protocol as defined in
    RFC 2460.\";\n         }\n       }\n       description\n        \"This value represents
    the version of the IP protocol.\n         In the value set and its semantics,
    this type is equivalent\n         to the InetVersion textual convention of the
    SMIv2.\";\n       reference\n        \"RFC  791: Internet Protocol\n         RFC
    2460: Internet Protocol, Version 6 (IPv6) Specification\n         RFC 4001: Textual
    Conventions for Internet Network Addresses\";\n     }\n     typedef dscp {\n       type
    uint8 {\n         range \"0..63\";\n       }\n       description\n        \"The
    dscp type represents a Differentiated Services Code Point\n         that may be
    used for marking packets in a traffic stream.\n         In the value set and its
    semantics, this type is equivalent\n         to the Dscp textual convention of
    the SMIv2.\";\n       reference\n        \"RFC 3289: Management Information Base
    for the Differentiated\n                   Services Architecture\n         RFC
    2474: Definition of the Differentiated Services Field\n                   (DS
    Field) in the IPv4 and IPv6 Headers\n         RFC 2780: IANA Allocation Guidelines
    For Values In\n                   the Internet Protocol and Related Headers\";\n
    \    }\n     typedef ipv6-flow-label {\n       type uint32 {\n         range \"0..1048575\";\n
    \      }\n       description\n        \"The ipv6-flow-label type represents the
    flow identifier or Flow\n         Label in an IPv6 packet header that may be used
    to\n         discriminate traffic flows.\n         In the value set and its semantics,
    this type is equivalent\n         to the IPv6FlowLabel textual convention of the
    SMIv2.\";\n       reference\n        \"RFC 3595: Textual Conventions for IPv6
    Flow Label\n         RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n
    \    }\n     typedef port-number {\n       type uint16 {\n         range \"0..65535\";\n
    \      }\n       description\n        \"The port-number type represents a 16-bit
    port number of an\n         Internet transport-layer protocol such as UDP, TCP,
    DCCP, or\n         SCTP.  Port numbers are assigned by IANA.  A current list of\n
    \        all assignments is available from <http://www.iana.org/>.\n         Note
    that the port number value zero is reserved by IANA.  In\n         situations
    where the value zero does not make sense, it can\n         be excluded by subtyping
    the port-number type.\n         In the value set and its semantics, this type
    is equivalent\n         to the InetPortNumber textual convention of the SMIv2.\";\n
    \      reference\n        \"RFC  768: User Datagram Protocol\n         RFC  793:
    Transmission Control Protocol\n         RFC 4960: Stream Control Transmission
    Protocol\n         RFC 4340: Datagram Congestion Control Protocol (DCCP)\n         RFC
    4001: Textual Conventions for Internet Network Addresses\";\n     }\n     /***
    collection of types related to autonomous systems ***/\n     typedef as-number
    {\n       type uint32;\n       description\n        \"The as-number type represents
    autonomous system numbers\n         which identify an Autonomous System (AS).
    \ An AS is a set\n         of routers under a single technical administration,
    using\n         an interior gateway protocol and common metrics to route\n         packets
    within the AS, and using an exterior gateway\n         protocol to route packets
    to other ASes.  IANA maintains\n         the AS number space and has delegated
    large parts to the\n         regional registries.\n         Autonomous system
    numbers were originally limited to 16\n         bits.  BGP extensions have enlarged
    the autonomous system\n         number space to 32 bits.  This type therefore
    uses an uint32\n         base type without a range restriction in order to support\n
    \        a larger autonomous system number space.\n         In the value set and
    its semantics, this type is equivalent\n         to the InetAutonomousSystemNumber
    textual convention of\n         the SMIv2.\";\n       reference\n        \"RFC
    1930: Guidelines for creation, selection, and registration\n                   of
    an Autonomous System (AS)\n         RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n
    \        RFC 4001: Textual Conventions for Internet Network Addresses\n         RFC
    6793: BGP Support for Four-Octet Autonomous System (AS)\n                   Number
    Space\";\n     }\n     /*** collection of types related to IP addresses and hostnames
    ***/\n     typedef ip-address {\n       type union {\n         type inet:ipv4-address;\n
    \        type inet:ipv6-address;\n       }\n       description\n        \"The
    ip-address type represents an IP address and is IP\n         version neutral.
    \ The format of the textual representation\n         implies the IP version.  This
    type supports scoped addresses\n         by allowing zone identifiers in the address
    format.\";\n       reference\n        \"RFC 4007: IPv6 Scoped Address Architecture\";\n
    \    }\n     typedef ipv4-address {\n       type string {\n         pattern\n
    \          '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'\n         +
    \ '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\n         + '(%[\\p{N}\\p{L}]+)?';\n
    \      }\n       description\n         \"The ipv4-address type represents an IPv4
    address in\n          dotted-quad notation.  The IPv4 address may include a zone\n
    \         index, separated by a % sign.\n          The zone index is used to disambiguate
    identical address\n          values.  For link-local addresses, the zone index
    will\n          typically be the interface index number or the name of an\n          interface.
    \ If the zone index is not present, the default\n          zone of the device
    will be used.\n          The canonical format for the zone index is the numerical\n
    \         format\";\n     }\n     typedef ipv6-address {\n       type string {\n
    \        pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'\n               +
    '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'\n               + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'\n
    \              + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'\n               +
    '(%[\\p{N}\\p{L}]+)?';\n         pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'\n
    \              + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'\n               + '(%.+)?';\n
    \      }\n       description\n        \"The ipv6-address type represents an IPv6
    address in full,\n         mixed, shortened, and shortened-mixed notation.  The
    IPv6\n         address may include a zone index, separated by a % sign.\n         The
    zone index is used to disambiguate identical address\n         values.  For link-local
    addresses, the zone index will\n         typically be the interface index number
    or the name of an\n         interface.  If the zone index is not present, the
    default\n         zone of the device will be used.\n         The canonical format
    of IPv6 addresses uses the textual\n         representation defined in Section
    4 of RFC 5952.  The\n         canonical format for the zone index is the numerical\n
    \        format as described in Section 11.2 of RFC 4007.\";\n       reference\n
    \       \"RFC 4291: IP Version 6 Addressing Architecture\n         RFC 4007: IPv6
    Scoped Address Architecture\n         RFC 5952: A Recommendation for IPv6 Address
    Text\n                   Representation\";\n     }\n     typedef ip-address-no-zone
    {\n       type union {\n         type inet:ipv4-address-no-zone;\n         type
    inet:ipv6-address-no-zone;\n       }\n       description\n        \"The ip-address-no-zone
    type represents an IP address and is\n         IP version neutral.  The format
    of the textual representation\n         implies the IP version.  This type does
    not support scoped\n         addresses since it does not allow zone identifiers
    in the\n         address format.\";\n       reference\n        \"RFC 4007: IPv6
    Scoped Address Architecture\";\n     }\n     typedef ipv4-address-no-zone {\n
    \      type inet:ipv4-address {\n         pattern '[0-9\\.]*';\n       }\n       description\n
    \        \"An IPv4 address without a zone index.  This type, derived from\n          ipv4-address,
    may be used in situations where the zone is\n          known from the context
    and hence no zone index is needed.\";\n     }\n     typedef ipv6-address-no-zone
    {\n       type inet:ipv6-address {\n         pattern '[0-9a-fA-F:\\.]*';\n       }\n
    \      description\n         \"An IPv6 address without a zone index.  This type,
    derived from\n          ipv6-address, may be used in situations where the zone
    is\n          known from the context and hence no zone index is needed.\";\n       reference\n
    \       \"RFC 4291: IP Version 6 Addressing Architecture\n         RFC 4007: IPv6
    Scoped Address Architecture\n         RFC 5952: A Recommendation for IPv6 Address
    Text\n                   Representation\";\n     }\n     typedef ip-prefix {\n
    \      type union {\n         type inet:ipv4-prefix;\n         type inet:ipv6-prefix;\n
    \      }\n       description\n        \"The ip-prefix type represents an IP prefix
    and is IP\n         version neutral.  The format of the textual representations\n
    \        implies the IP version.\";\n     }\n     typedef ipv4-prefix {\n       type
    string {\n         pattern\n            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'\n
    \         +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\n          +
    '/(([0-9])|([1-2][0-9])|(3[0-2]))';\n       }\n       description\n        \"The
    ipv4-prefix type represents an IPv4 address prefix.\n         The prefix length
    is given by the number following the\n         slash character and must be less
    than or equal to 32.\n         A prefix length value of n corresponds to an IP
    address\n         mask that has n contiguous 1-bits from the most\n         significant
    bit (MSB) and all other bits set to 0.\n         The canonical format of an IPv4
    prefix has all bits of\n         the IPv4 address set to zero that are not part
    of the\n         IPv4 prefix.\";\n     }\n     typedef ipv6-prefix {\n       type
    string {\n         pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'\n
    \              + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'\n               +
    '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'\n               + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'\n
    \              + '(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n         pattern
    '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'\n               + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'\n
    \              + '(/.+)';\n       }\n       description\n        \"The ipv6-prefix
    type represents an IPv6 address prefix.\n         The prefix length is given by
    the number following the\n         slash character and must be less than or equal
    to 128.\n         A prefix length value of n corresponds to an IP address\n         mask
    that has n contiguous 1-bits from the most\n         significant bit (MSB) and
    all other bits set to 0.\n         The IPv6 address should have all bits that
    do not belong\n         to the prefix set to zero.\n         The canonical format
    of an IPv6 prefix has all bits of\n         the IPv6 address set to zero that
    are not part of the\n         IPv6 prefix.  Furthermore, the IPv6 address is represented\n
    \        as defined in Section 4 of RFC 5952.\";\n       reference\n        \"RFC
    5952: A Recommendation for IPv6 Address Text\n                   Representation\";\n
    \    }\n     /*** collection of domain name and URI types ***/\n     typedef domain-name
    {\n       type string {\n         pattern\n           '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*'\n
    \        + '([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)'\n         +
    '|\\.';\n         length \"1..253\";\n       }\n       description\n        \"The
    domain-name type represents a DNS domain name.  The\n         name SHOULD be fully
    qualified whenever possible.\n         Internet domain names are only loosely
    specified.  Section\n         3.5 of RFC 1034 recommends a syntax (modified in
    Section\n         2.1 of RFC 1123).  The pattern above is intended to allow\n
    \        for current practice in domain name use, and some possible\n         future
    expansion.  It is designed to hold various types of\n         domain names, including
    names used for A or AAAA records\n         (host names) and other records, such
    as SRV records.  Note\n         that Internet host names have a stricter syntax
    (described\n         in RFC 952) than the DNS recommendations in RFCs 1034 and\n
    \        1123, and that systems that want to store host names in\n         schema
    nodes using the domain-name type are recommended to\n         adhere to this stricter
    standard to ensure interoperability.\n         The encoding of DNS names in the
    DNS protocol is limited\n         to 255 characters.  Since the encoding consists
    of labels\n         prefixed by a length bytes and there is a trailing NULL\n
    \        byte, only 253 characters can appear in the textual dotted\n         notation.\n
    \        The description clause of schema nodes using the domain-name\n         type
    MUST describe when and how these names are resolved to\n         IP addresses.
    \ Note that the resolution of a domain-name value\n         may require to query
    multiple DNS records (e.g., A for IPv4\n         and AAAA for IPv6).  The order
    of the resolution process and\n         which DNS record takes precedence can
    either be defined\n         explicitly or may depend on the configuration of the\n
    \        resolver.\n         Domain-name values use the US-ASCII encoding.  Their
    canonical\n         format uses lowercase US-ASCII characters.  Internationalized\n
    \        domain names MUST be A-labels as per RFC 5890.\";\n       reference\n
    \       \"RFC  952: DoD Internet Host Table Specification\n         RFC 1034:
    Domain Names - Concepts and Facilities\n         RFC 1123: Requirements for Internet
    Hosts -- Application\n                   and Support\n         RFC 2782: A DNS
    RR for specifying the location of services\n                   (DNS SRV)\n         RFC
    5890: Internationalized Domain Names in Applications\n                   (IDNA):
    Definitions and Document Framework\";\n     }\n     typedef host {\n       type
    union {\n         type inet:ip-address;\n         type inet:domain-name;\n       }\n
    \      description\n        \"The host type represents either an IP address or
    a DNS\n         domain name.\";\n     }\n     typedef uri {\n       type string;\n
    \      description\n        \"The uri type represents a Uniform Resource Identifier\n
    \        (URI) as defined by STD 66.\n         Objects using the uri type MUST
    be in US-ASCII encoding,\n         and MUST be normalized as described by RFC
    3986 Sections\n         6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n         percent-encoding
    is removed, and all case-insensitive\n         characters are set to lowercase
    except for hexadecimal\n         digits, which are normalized to uppercase as
    described in\n         Section 6.2.2.1.\n         The purpose of this normalization
    is to help provide\n         unique URIs.  Note that this normalization is not\n
    \        sufficient to provide uniqueness.  Two URIs that are\n         textually
    distinct after this normalization may still be\n         equivalent.\n         Objects
    using the uri type may restrict the schemes that\n         they permit.  For example,
    'data:' and 'urn:' schemes\n         might not be appropriate.\n         A zero-length
    URI is not a valid URI.  This can be used to\n         express 'URI absent' where
    required.\n         In the value set and its semantics, this type is equivalent\n
    \        to the Uri SMIv2 textual convention defined in RFC 5017.\";\n       reference\n
    \       \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n         RFC
    3305: Report from the Joint W3C/IETF URI Planning Interest\n                   Group:
    Uniform Resource Identifiers (URIs), URLs,\n                   and Uniform Resource
    Names (URNs): Clarifications\n                   and Recommendations\n         RFC
    5017: MIB Textual Conventions for Uniform Resource\n                   Identifiers
    (URIs)\";\n     }\n   }\n   <CODE ENDS>\n"
  title: 4.  Internet-Specific Derived Types
- contents:
  - "5.  IANA Considerations\n   This document registers two URIs in the IETF XML
    registry [RFC3688].\n   Following the format in RFC 3688, the following registrations
    have\n   been made.\n     URI: urn:ietf:params:xml:ns:yang:ietf-yang-types\n     Registrant
    Contact: The NETMOD WG of the IETF.\n     XML: N/A, the requested URI is an XML
    namespace.\n     URI: urn:ietf:params:xml:ns:yang:ietf-inet-types\n     Registrant
    Contact: The NETMOD WG of the IETF.\n     XML: N/A, the requested URI is an XML
    namespace.\n   This document registers two YANG modules in the YANG Module Names\n
    \  registry [RFC6020].\n     name:         ietf-yang-types\n     namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-types\n
    \    prefix:       yang\n     reference:    RFC 6991\n     name:         ietf-inet-types\n
    \    namespace:    urn:ietf:params:xml:ns:yang:ietf-inet-types\n     prefix:       inet\n
    \    reference:    RFC 6991\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This document defines common data types using
    the YANG data modeling\n   language.  The definitions themselves have no security
    impact on the\n   Internet, but the usage of these definitions in concrete YANG
    modules\n   might have.  The security considerations spelled out in the YANG\n
    \  specification [RFC6020] apply for this document as well.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Contributors\n   The following people contributed significantly to the initial
    version\n   of this document:\n    - Andy Bierman (Brocade)\n    - Martin Bjorklund
    (Tail-f Systems)\n    - Balazs Lengyel (Ericsson)\n    - David Partain (Ericsson)\n
    \   - Phil Shafer (Juniper Networks)\n"
  title: 7.  Contributors
- contents:
  - "8.  Acknowledgments\n   The editor wishes to thank the following individuals
    for providing\n   helpful comments on various versions of this document: Andy
    Bierman,\n   Martin Bjorklund, Benoit Claise, Joel M. Halpern, Ladislav Lhotka,\n
    \  Lars-Johan Liman, and Dan Romascanu.\n   Juergen Schoenwaelder was partly funded
    by Flamingo, a Network of\n   Excellence project (ICT-318488) supported by the
    European Commission\n   under its Seventh Framework Programme.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3339]    Klyne, G., Ed. and C. Newman, \"Date and Time on
      the\n                Internet: Timestamps\", RFC 3339, July 2002.\n   [RFC3688]
      \   Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n                January
      2004.\n   [RFC3986]    Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n
      \               Resource Identifier (URI): Generic Syntax\", STD 66,\n                RFC
      3986, January 2005.\n   [RFC4007]    Deering, S., Haberman, B., Jinmei, T.,
      Nordmark, E., and\n                B. Zill, \"IPv6 Scoped Address Architecture\",
      RFC 4007,\n                March 2005.\n   [RFC4122]    Leach, P., Mealling,
      M., and R. Salz, \"A Universally\n                Unique IDentifier (UUID) URN
      Namespace\", RFC 4122,\n                July 2005.\n   [RFC4291]    Hinden,
      R. and S. Deering, \"IP Version 6 Addressing\n                Architecture\",
      RFC 4291, February 2006.\n   [RFC6020]    Bjorklund, M., Ed., \"YANG - A Data
      Modeling Language for\n                the Network Configuration Protocol (NETCONF)\",
      RFC 6020,\n                October 2010.\n   [XPATH]      Clark, J. and S. DeRose,
      \"XML Path Language (XPath)\n                Version 1.0\", World Wide Web Consortium\n
      \               Recommendation REC-xpath-19991116, November 1999,\n                <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [IEEE802]    IEEE, \"IEEE Standard for Local
      and Metropolitan Area\n                Networks: Overview and Architecture\",
      IEEE Std. 802-\n                2001, 2001.\n   [ISO9834-1]  ISO/IEC, \"Information
      technology -- Open Systems\n                Interconnection -- Procedures for
      the operation of OSI\n                Registration Authorities: General procedures
      and top\n                arcs of the ASN.1 Object Identifier tree\", ISO/\n
      \               IEC 9834-1:2008, 2008.\n   [RFC0768]    Postel, J., \"User Datagram
      Protocol\", STD 6, RFC 768,\n                August 1980.\n   [RFC0791]    Postel,
      J., \"Internet Protocol\", STD 5, RFC 791,\n                September 1981.\n
      \  [RFC0793]    Postel, J., \"Transmission Control Protocol\", STD 7,\n                RFC
      793, September 1981.\n   [RFC0952]    Harrenstien, K., Stahl, M., and E. Feinler,
      \"DoD\n                Internet host table specification\", RFC 952,\n                October
      1985.\n   [RFC1034]    Mockapetris, P., \"Domain names - concepts and\n                facilities\",
      STD 13, RFC 1034, November 1987.\n   [RFC1123]    Braden, R., \"Requirements
      for Internet Hosts -\n                Application and Support\", STD 3, RFC
      1123, October 1989.\n   [RFC1930]    Hawkinson, J. and T. Bates, \"Guidelines
      for creation,\n                selection, and registration of an Autonomous
      System\n                (AS)\", BCP 6, RFC 1930, March 1996.\n   [RFC2460]    Deering,
      S. and R. Hinden, \"Internet Protocol, Version 6\n                (IPv6) Specification\",
      RFC 2460, December 1998.\n   [RFC2474]    Nichols, K., Blake, S., Baker, F.,
      and D. Black,\n                \"Definition of the Differentiated Services Field
      (DS\n                Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n                December
      1998.\n   [RFC2578]    McCloghrie, K., Ed., Perkins, D., Ed., and J.\n                Schoenwaelder,
      Ed., \"Structure of Management Information\n                Version 2 (SMIv2)\",
      STD 58, RFC 2578, April 1999.\n   [RFC2579]    McCloghrie, K., Ed., Perkins,
      D., Ed., and J.\n                Schoenwaelder, Ed., \"Textual Conventions for
      SMIv2\",\n                STD 58, RFC 2579, April 1999.\n   [RFC2780]    Bradner,
      S. and V. Paxson, \"IANA Allocation Guidelines\n                For Values In
      the Internet Protocol and Related\n                Headers\", BCP 37, RFC 2780,
      March 2000.\n   [RFC2782]    Gulbrandsen, A., Vixie, P., and L. Esibov, \"A
      DNS RR for\n                specifying the location of services (DNS SRV)\",\n
      \               RFC 2782, February 2000.\n   [RFC2856]    Bierman, A., McCloghrie,
      K., and R. Presuhn, \"Textual\n                Conventions for Additional High
      Capacity Data Types\",\n                RFC 2856, June 2000.\n   [RFC3289]    Baker,
      F., Chan, K., and A. Smith, \"Management\n                Information Base for
      the Differentiated Services\n                Architecture\", RFC 3289, May 2002.\n
      \  [RFC3305]    Mealling, M. and R. Denenberg, \"Report from the Joint\n                W3C/IETF
      URI Planning Interest Group: Uniform Resource\n                Identifiers (URIs),
      URLs, and Uniform Resource Names\n                (URNs): Clarifications and
      Recommendations\", RFC 3305,\n                August 2002.\n   [RFC3595]    Wijnen,
      B., \"Textual Conventions for IPv6 Flow Label\",\n                RFC 3595,
      September 2003.\n   [RFC4001]    Daniele, M., Haberman, B., Routhier, S., and
      J.\n                Schoenwaelder, \"Textual Conventions for Internet Network\n
      \               Addresses\", RFC 4001, February 2005.\n   [RFC4271]    Rekhter,
      Y., Li, T., and S. Hares, \"A Border Gateway\n                Protocol 4 (BGP-4)\",
      RFC 4271, January 2006.\n   [RFC4340]    Kohler, E., Handley, M., and S. Floyd,
      \"Datagram\n                Congestion Control Protocol (DCCP)\", RFC 4340,\n
      \               March 2006.\n   [RFC4502]    Waldbusser, S., \"Remote Network
      Monitoring Management\n                Information Base Version 2\", RFC 4502,
      May 2006.\n   [RFC4960]    Stewart, R., \"Stream Control Transmission Protocol\",\n
      \               RFC 4960, September 2007.\n   [RFC5017]    McWalter, D., \"MIB
      Textual Conventions for Uniform\n                Resource Identifiers (URIs)\",
      RFC 5017, September 2007.\n   [RFC5890]    Klensin, J., \"Internationalized
      Domain Names for\n                Applications (IDNA): Definitions and Document\n
      \               Framework\", RFC 5890, August 2010.\n   [RFC5952]    Kawamura,
      S. and M. Kawashima, \"A Recommendation for\n                IPv6 Address Text
      Representation\", RFC 5952,\n                August 2010.\n   [RFC6021]    Schoenwaelder,
      J., \"Common YANG Data Types\", RFC 6021,\n                October 2010.\n   [RFC6241]
      \   Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J.,\n                Ed.,
      and A. Bierman, Ed., \"Network Configuration\n                Protocol (NETCONF)\",
      RFC 6241, June 2011.\n   [RFC6793]    Vohra, Q. and E. Chen, \"BGP Support for
      Four-Octet\n                Autonomous System (AS) Number Space\", RFC 6793,\n
      \               December 2012.\n   [XSD-TYPES]  Biron, P. and A. Malhotra, \"XML
      Schema Part 2: Datatypes\n                Second Edition\", World Wide Web Consortium\n
      \               Recommendation REC-xmlschema-2-20041028, October 2004,\n                <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Changes from RFC 6021\n   This version adds new type definitions
    to the YANG modules.  The\n   following new data types have been added to the
    ietf-yang-types\n   module:\n   o  yang-identifier\n   o  hex-string\n   o  uuid\n
    \  o  dotted-quad\n   The following new data types have been added to the ietf-inet-types\n
    \  module:\n   o  ip-address-no-zone\n   o  ipv4-address-no-zone\n   o  ipv6-address-no-zone\n"
  title: Appendix A.  Changes from RFC 6021
- contents:
  - "Author's Address\n   Juergen Schoenwaelder (editor)\n   Jacobs University\n   EMail:
    j.schoenwaelder@jacobs-university.de\n"
  title: Author's Address
