- title: __initial_text__
  contents:
  - "   On the Applicability of Various Multimedia Internet KEYing (MIKEY)\n     \
    \                     Modes and Extensions\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Multimedia Internet Keying (MIKEY) is a key management protocol\
    \ that\n   can be used for real-time applications.  In particular, it has been\n\
    \   defined focusing on the support of the Secure Real-time Transport\n   Protocol\
    \ (SRTP).  MIKEY itself is standardized within RFC 3830 and\n   defines four key\
    \ distribution methods.  Moreover, it is defined to\n   allow extensions of the\
    \ protocol.  As MIKEY becomes more and more\n   accepted, extensions to the base\
    \ protocol arise, especially in terms\n   of additional key distribution methods\
    \ but also in terms of payload\n   enhancements.\n   This document provides an\
    \ overview about the MIKEY base document in\n   general as well as the existing\
    \ extensions for MIKEY, which have been\n   defined or are in the process of definition.\
    \  It is intended as an\n   additional source of information for developers or\
    \ architects to\n   provide more insight in use case scenarios and motivations\
    \ as well as\n   advantages and disadvantages for the different key distribution\n\
    \   schemes.  The use cases discussed in this document are strongly\n   related\
    \ to dedicated SIP call scenarios providing challenges for key\n   management\
    \ in general, among them media before Session Description\n   Protocol (SDP) answer,\
    \ forking, and shared key conferencing.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology and Definitions  . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  MIKEY Overview . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  7\n     3.1.  Pre-Shared Key (PSK) Protected Distribution  . . . .\
    \ . . .  9\n     3.2.  Public Key Encrypted Key Distribution  . . . . . . . .\
    \ . .  9\n     3.3.  Diffie-Hellman Key Agreement Protected with Digital\n   \
    \        Signatures . . . . . . . . . . . . . . . . . . . . . . . . 10\n     3.4.\
    \  Unprotected Key Distribution . . . . . . . . . . . . . . . 11\n     3.5.  Diffie-Hellman\
    \ Key Agreement Protected with Pre-Shared\n           Secrets  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 12\n     3.6.  SAML-Assisted DH key Agreement\
    \ . . . . . . . . . . . . . . 12\n     3.7.  Asymmetric Key Distribution with\
    \ In-Band Certificate\n           Exchange . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 15\n   4.  Further MIKEY Extensions . . . . . . . . . . . . .\
    \ . . . . . . 16\n     4.1.  ECC Algorithms Support . . . . . . . . . . . . .\
    \ . . . . . 16\n       4.1.1.  Elliptic Curve Integrated Encryption Scheme\n \
    \              application in MIKEY . . . . . . . . . . . . . . . . . 17\n   \
    \    4.1.2.  Elliptic Curve Menezes-Qu-Vanstone Scheme\n               Application\
    \ in MIKEY . . . . . . . . . . . . . . . . . 17\n     4.2.  New MIKEY Payload\
    \ for Bootstrapping TESLA  . . . . . . . . 17\n     4.3.  MBMS Extensions to the\
    \ Key ID Information Type . . . . . . 18\n     4.4.  OMA BCAST MIKEY General Extension\
    \ Payload Specification  . 18\n     4.5.  Supporting Integrity Transform Carrying\
    \ the Rollover\n           Counter  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 19\n   5.  Selection and Interworking of MIKEY Modes  . . . . . . .\
    \ . . . 19\n     5.1.  MIKEY and Early Media  . . . . . . . . . . . . . . . .\
    \ . . 21\n     5.2.  MIKEY and Forking  . . . . . . . . . . . . . . . . . . .\
    \ . 22\n     5.3.  MIKEY and Call Transfer/Redirect/Retarget  . . . . . . . .\
    \ 23\n     5.4.  MIKEY and Shared Key Conferencing  . . . . . . . . . . . . 23\n\
    \     5.5.  MIKEY Mode Summary . . . . . . . . . . . . . . . . . . . . 24\n  \
    \ 6.  Transport of MIKEY Messages  . . . . . . . . . . . . . . . . . 24\n   7.\
    \  MIKEY Alternatives for SRTP Security Parameter Negotiation . . 25\n   8.  Summary\
    \ of MIKEY-Related IANA Registrations  . . . . . . . . . 26\n   9.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 26\n   10. Acknowledgments  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 27\n   11. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 27\n     11.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 27\n     11.2. Informative References . . .\
    \ . . . . . . . . . . . . . . . 27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Key distribution describes the process of delivering cryptographic\n\
    \   keys to the required parties.  MIKEY [RFC3830], the Multimedia\n   Internet\
    \ Keying, has been defined focusing on support for the\n   establishment of security\
    \ context for the Secure Real-time Transport\n   Protocol [RFC3711].  Note that\
    \ RFC 3830 is not restricted to be used\n   for SRTP only, as it features a generic\
    \ approach and allows for\n   extensions to the key distribution schemes.  Thus,\
    \ it may also be\n   used for security parameter negotiation for other protocols.\n\
    \   For MIKEY, meanwhile, seven key distribution methods are described:\n   o\
    \  Symmetric key distribution as defined in [RFC3830] (MIKEY-PSK)\n   o  Asymmetric\
    \ key distribution as defined in [RFC3830] (MIKEY-RSA)\n   o  Diffie-Hellman key\
    \ agreement protected by digital signatures as\n      defined in [RFC3830] (MIKEY-DHSIGN)\n\
    \   o  Unprotected key distribution (MIKEY-NULL)\n   o  Diffie-Hellman key agreement\
    \ protected by symmetric pre-shared\n      keys as defined in [RFC4650] (MIKEY-DHHMAC)\n\
    \   o  Security Assertion Markup Language (SAML) assisted Diffie-Hellman\n   \
    \   key agreement as defined (not available as a separate document,\n      but\
    \ discussions are reflected within this document (MIKEY-DHSAML))\n   o  Asymmetric\
    \ key distribution (based on asymmetric encryption) with\n      in-band certificate\
    \ provision as defined in [RFC4738]\n      (MIKEY-RSA-R)\n   Note that the latter\
    \ three modes are extensions to MIKEY as there\n   have been scenarios where none\
    \ of the first four modes defined in\n   [RFC3830] fits perfectly.  There are\
    \ further extensions to MIKEY\n   comprising algorithm enhancements and a new\
    \ payload definition\n   supporting protocols other than SRTP.\n   Algorithm extensions\
    \ are defined in the following document:\n   o  Elliptic Curve Cryptography (ECC)\
    \ algorithms for MIKEY as defined\n      in [MSEC-MIKEY]\n   Payload extensions\
    \ are defined in the following documents:\n   o  Bootstrapping TESLA, defining\
    \ a new payload for the Timed\n      Efficient Stream Loss-tolerant Authentication\
    \ (TESLA) protocol\n      [RFC4082] as defined in [RFC4442]\n   o  The Key ID\
    \ information type for the general extension payload as\n      defined in [RFC4563]\n\
    \   o  Open Mobile Alliance (OMA) Broadcast (BCAST) MIKEY General\n      Extension\
    \ Payload Specification as defined in [RFC4909]\n   o  Integrity Transform Carrying\
    \ Roll-over Counter for SRTP as defined\n      in [RFC4771].  Note that this is\
    \ rather an extension to SRTP and\n      requires MIKEY to carry a new parameter,\
    \ but is stated here for\n      completeness.\n   This document provides an overview\
    \ about RFC 3830 and the relations\n   to the different extensions to provide\
    \ a framework when using MIKEY.\n   It is intended as an additional source of\
    \ information for developers\n   or architects to provide more insight in use\
    \ case scenarios and\n   motivations as well as advantages and disadvantages for\
    \ the different\n   key distribution schemes.  The use cases discussed in this\
    \ document\n   are inspired by specific protocol workings of SIP that have proved\
    \ to\n   be problematic for a general key distribution mechanisms in general.\n\
    \   These protocol workings are described in detail in Wing, et al.\n   [SIP-MEDIA]\
    \ and include the following:\n   o  Early Media (i.e., media that arrives before\
    \ the SDP answer)\n   o  Forking\n   o  Call Transfer/Redirect/Retarget\n   o\
    \  Shared Key Conferencing\n"
- title: 2.  Terminology and Definitions
  contents:
  - "2.  Terminology and Definitions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   The following definitions have been taken from [RFC3830]:\n\
    \   (Data) Security Protocol:  the security protocol used to protect the\n   \
    \                           actual data traffic.  Examples of security\n     \
    \                         protocols are IPsec and SRTP.\n   Data SA        Data\
    \ Security Association information for the security\n                  protocol,\
    \ including a TEK and a set of parameters/\n                  policies.\n   CS\
    \             Crypto Session, uni- or bidirectional data stream(s),\n        \
    \          protected by a single instance of a security protocol.\n   CSB    \
    \        Crypto Session Bundle, collection of one or more\n                  Crypto\
    \ Sessions, which can have common TGKs (see\n                  below) and security\
    \ parameters.\n   CS ID          Crypto Session ID, unique identifier for the\
    \ CS within\n                  a CSB.\n   CSB ID         Crypto Session Bundle\
    \ ID, unique identifier for the\n                  CSB.\n   TGK            TEK\
    \ Generation Key, a bit-string agreed upon by two or\n                  more parties,\
    \ associated with CSB.  From the TGK,\n                  Traffic-Encrypting Keys\
    \ can then be generated without\n                  needing further communication.\n\
    \   TEK            Traffic-Encrypting Key, the key used by the security\n    \
    \              protocol to protect the CS (this key may be used\n            \
    \      directly by the security protocol or may be used to\n                 \
    \ derive further keys depending on the security\n                  protocol).\
    \  The TEKs are derived from the CSB's TGK.\n   TGK re-keying  the process of\
    \ re-negotiating/updating the TGK (and\n                  consequently future\
    \ TEK(s)).\n   Initiator      the initiator of the key management protocol, not\n\
    \                  necessarily the initiator of the communication.\n   Responder\
    \      the responder in the key management protocol.\n   Salting key    a random\
    \ or pseudo-random (see [RFC4086]) string used\n                  to protect against\
    \ some off-line pre-computation\n                  attacks on the underlying security\
    \ protocol.\n   HDR            the protocol header\n   PRF(k,x)       a keyed\
    \ pseudo-random function\n   E(k,m)         encryption of m with the key k\n \
    \  RAND           random value\n   T              timestamp\n   CERTx        \
    \  the certificate of x\n   SIGNx          the signature from x using the private\
    \ key of x\n   PKx            the public key of x\n   IDx            the identity\
    \ of x\n   []             an optional piece of information\n   {}            \
    \ zero or more occurrences\n   ||             concatenation\n   |            \
    \  OR (selection operator)\n   ^              exponentiation\n   XOR         \
    \   exclusive or\n   The following definitions have been added to the ones from\
    \ [RFC3830]:\n   SSRC           Synchronization Source Identifier\n   KEMAC  \
    \        MIKEY Key Data Transport Payload, containing a set of\n             \
    \     encrypted sub-payloads and a Message Authentication\n                  Code\
    \ (MAC).\n   V              MIKEY Verification Message\n   SP             Security\
    \ Parameter\n   Forking        The ability of a SIP proxy to replicate an incoming\n\
    \                  request to multiple outgoing requests in order to\n       \
    \           efficiently find the called party for rendezvous.  SIP\n         \
    \         forking can be done in serial (depth-first search) or\n            \
    \      in parallel (breadth-first search).\n   Redirect       The ability of a\
    \ SIP proxy to send a final response\n                  that redirects the caller\
    \ to send a request to an\n                  alternate location.\n   Retarget\
    \       The ability of a SIP proxy to re-write the Request-URI\n             \
    \     thereby altering the destination of the request\n                  without\
    \ explicitly notifying the user agent client.\n"
- title: 3.  MIKEY Overview
  contents:
  - "3.  MIKEY Overview\n   This section will provide an overview about MIKEY.  MIKEY\
    \ focuses on\n   the setup of cryptographic context to secure multimedia sessions\
    \ in a\n   heterogeneous environment.  MIKEY is mainly intended to be used for\n\
    \   peer-to-peer, simple one-to-many, and small-size (interactive)\n   groups.\
    \  One objective of MIKEY is to produce a data security\n   association (SA) for\
    \ the security protocol, including a Traffic-\n   Encrypting Key (TEK), which\
    \ is derived from a TEK Generation Key\n   (TGK), and used as input for the security\
    \ protocol.\n   MIKEY supports the possibility of establishing keys and parameters\n\
    \   for more than one security protocol (or for several instances of the\n   same\
    \ security protocol) at the same time.  The concept of Crypto\n   Session Bundle\
    \ (CSB) is used to denote a collection of one or more\n   Crypto Sessions that\
    \ can have common TGK and security parameters, but\n   that obtain distinct TEKs\
    \ from MIKEY.\n   MIKEY as defined in RFC 3830 may proceed with one roundtrip\
    \ at most,\n   using a so-called Initiator message for the forward direction and\
    \ a\n   Responder message for the backward direction.  Note that there exist\n\
    \   MIKEY schemes that may proceed within a half roundtrip (e.g., based\n   on\
    \ a pre-shared key), while other schemes require a full roundtrip\n   (e.g., Diffie-Hellman-based\
    \ schemes).  The main objective of the\n   Initiator's message (I_MESSAGE) is\
    \ to transport one or more TGKs\n   (carried in the KEMAC field) and a set of\
    \ security parameters (SPs)\n   to the Responder in a secure manner.  As the verification\
    \ message\n   from the Responder is optional for some schemes, the Initiator\n\
    \   indicates whether or not it requires a verification message from the\n   Responder.\n\
    \   The focus of the following subsections lies on the key distribution\n   methods\
    \ as well as the discussion about advantages and disadvantages\n   of the different\
    \ schemes.  Note that the MIKEY key distribution\n   schemes rely on loosely synchronized\
    \ clocks.  If clock\n   synchronization is not available, the replay handling\
    \ of MIKEY (cf.\n   [RFC3830]) may not work.  This is due to the fact that MIKEY\
    \ does not\n   use a challenge-response mechanism for replay handling; instead,\n\
    \   timestamps are used together with message caching.  Thus, the\n   required\
    \ synchronization depends on the number of messages that can\n   be cached on\
    \ either side.  Therefore, MIKEY recommends adjusting the\n   cache size depending\
    \ on the clock skew in the deployment environment.\n   Moreover, RFC 3830 recommends\
    \ the ISO time synchronization protocol\n   [ISO_sec_time].  If replay handling\
    \ is not available, an attacker may\n   be able to replay an older message that\
    \ he eavesdropped earlier,\n   leading to different TGKs on both sides.  As these\
    \ are fed to the\n   application utilizing MIKEY (e.g., SRTP or TESLA), both sides\
    \ may\n   rely on different keys and thus may be unable to communicate with\n\
    \   each other.  The format applied to the timestamps submitted in MIKEY\n   have\
    \ to match the NTP format described in [RFC1305].  In other cases,\n   such as\
    \ of a SIP endpoint, clock synchronization by deriving time\n   from a trusted\
    \ outbound proxy may be appropriate .\n   The different MIKEY-related schemes\
    \ are compared regarding the\n   following criteria:\n   o  Mandatory for implementation:\
    \ provides information, if RFC 3830\n      requires the implementation of this\
    \ scheme.\n   o  Scalability: describes the technical feasibility to easily deploy\n\
    \      a solution based on the considered scheme.\n   o  Dependency on PKI: states\
    \ if the support of a PKI is required to\n      support this scheme.  Note that\
    \ PKI here relates to PKI services\n      like key generation, distribution, and\
    \ revocation.\n   o  Provision of Perfect Forward Secrecy (PFS): describes the\
    \ support\n      of PFS, which is, according to RFC 4949 [RFC4949], the property\n\
    \      that compromising the long-term keying material does not\n      compromise\
    \ session keys that were previously derived from the\n      long-term material.\n\
    \   o  Key generation involvement: describes if both or just one of the\n    \
    \  participants is actively involved in key generation.  The option\n      to\
    \ involve both parties in the key generation is considered here\n      as it addresses\
    \ several points:\n      *  If both sides contribute public entropy, it is ensured\
    \ that\n         each side can guarantee that keys are fresh to avoid replay\n\
    \         attacks.\n      *  Involvement of both sides avoids that one side generates\n\
    \         (intentionally or unintentionally) weak (predictable) nonces,\n    \
    \     which in turn may result in weak keys.\n   o  Support of group keying: feasibility\
    \ of the MIKEY option to be\n      used also for group keying, e.g., in conferencing\
    \ scenarios.\n   If MIKEY is used for SRTP [RFC3711] bootstrapping, it also uses\
    \ the\n   SSRC to associate security policies with actual sessions.  The SSRC\n\
    \   identifies the synchronization source.  The value is chosen randomly,\n  \
    \ with the intent that no two synchronization sources within the same\n   SRTP\
    \ session will have the same SSRC.  Although the probability of\n   multiple sources\
    \ choosing the same identifier is low, all (S)RTP\n   implementations must be\
    \ prepared to detect and resolve collisions.\n   Nevertheless, in multimedia communication\
    \ scenarios supporting\n   forking (see Section 5.2) or retargeting (see Section\
    \ 5.3) collisions\n   may occur leading to so-called two-time pads; i.e., the\
    \ same key is\n   used for media streams to different destinations.  This occurs\
    \ if two\n   branches have the same TEK (based on the MIKEY key establishment)\
    \ and\n   choose the same 32-bit SSRC for the SRTP streams.  The SRTP key\n  \
    \ derivation will then produce the same session keys (as the input\n   values\
    \ are the same) and also derive the same initialization vector\n   per packet,\
    \ as the SSRCs are the same.  Note that two time pads may\n   also occur for media\
    \ streams to the same destination.  This is\n   outlined in [RFC3711].\n"
- title: 3.1.  Pre-Shared Key (PSK) Protected Distribution
  contents:
  - "3.1.  Pre-Shared Key (PSK) Protected Distribution\n   This option of the key\
    \ management uses a pre-shared secret key to\n   derive key material for integrity\
    \ protection and encryption to\n   protect the actual exchange of key material.\
    \  Note that the pre-\n   shared secret is agreed upon before the session, e.g.,\
    \ by out-of-band\n   means.  The responder message is optional and may be used\
    \ for mutual\n   authentication (proof of possession of the pre-shared secret)\
    \ or\n   error signaling.\n   Initiator                                  Responder\n\
    \   I_MESSAGE =\n   HDR, T, RAND, [IDi],[IDr],\n       {SP}, KEMAC           \
    \     --->\n                                              R_MESSAGE =\n      \
    \                           [<---]       HDR, T, [IDr], V\n   The advantages of\
    \ this approach lay in the fact that there is no\n   dependency on a PKI (Public\
    \ Key Infrastructure), the solution\n   consumes low bandwidth and enables high\
    \ performance, and is all in\n   all a simple straightforward master key provisioning.\
    \  The\n   disadvantages are that perfect forward secrecy is not provided and\n\
    \   key generation is just performed by the Initiator.  Furthermore, the\n   approach\
    \ is not scalable to larger configurations but is acceptable\n   in small-sized\
    \ groups.  Note that according to [RFC3830], this option\n   is mandatory to implement.\n"
- title: 3.2.  Public Key Encrypted Key Distribution
  contents:
  - "3.2.  Public Key Encrypted Key Distribution\n   Using the asymmetric option of\
    \ the key management, the Initiator\n   generates the key material (TGKs) to be\
    \ transmitted and sends it\n   encrypted with a so-called envelope key, which\
    \ in turn is encrypted\n   with the receiver's public key.  The envelope key,\
    \ env-key, which is\n   a random number, is used to derive the auth-key and the\
    \ enc-key.\n   Moreover, the envelope key may be used as a pre-shared key to\n\
    \   establish further crypto sessions.  The responder message is optional\n  \
    \ and may be used for mutual authentication or error signaling.\n   Initiator\
    \                                    Responder\n   I_MESSAGE =\n   HDR, T, RAND,\
    \ [IDi|CERTi],\n     [IDr], {SP}, KEMAC, [CHASH],\n     PKE, SIGNi           \
    \        --->\n                                               R_MESSAGE =\n  \
    \                               [<---]         HDR, T, [IDr], V\n   An advantage\
    \ of this approach is that it allows the usage of self-\n   signed certificates,\
    \ which in turn can avoid a full-blown PKI.  Note\n   that using self-signed certificates\
    \ may result in limited scalability\n   and also require additional means for\
    \ authentication such as exchange\n   of fingerprints of the certificates or similar\
    \ techniques.  The\n   disadvantages comprise the necessity of a PKI for full\
    \ scalability,\n   the performance of the key generation just by the Initiator,\
    \ and no\n   provision of perfect forward secrecy.  Additionally, the Responder\n\
    \   certificate needs to be available in advance at the sender's side.\n   Furthermore,\
    \ the verification of certificates may not be done in real\n   time.  This could\
    \ be the case in scenarios where the revocation\n   status of certificates is\
    \ checked through a further component.\n   Depending on the Initiator role, this\
    \ scheme can also be applied in\n   group-based communication, where a central\
    \ server distributes the\n   group key protected with the public keys of the associated\
    \ clients.\n   Note that according to [RFC3830], this option is mandatory to\n\
    \   implement.\n"
- title: 3.3.  Diffie-Hellman Key Agreement Protected with Digital Signatures
  contents:
  - "3.3.  Diffie-Hellman Key Agreement Protected with Digital Signatures\n   The\
    \ Diffie-Hellman option of the key management enables a shared\n   secret establishment\
    \ between the Initiator and Responder in a way\n   where both parties contribute\
    \ to the shared secret.  The Diffie-\n   Hellman key agreement is authenticated\
    \ (and integrity protected)\n   using digital signatures.\n   Initiator      \
    \                           Responder\n   I_MESSAGE =\n   HDR, T, RAND, [IDi|CERTi],\n\
    \        [IDr], {SP}, DHi, SIGNi   --->\n                                    \
    \         R_MESSAGE =\n                                  <---        HDR, T, [IDr|CERTr],\n\
    \                                               IDi, DHr, DHi, SIGNr\n   [RFC3830]\
    \ does mandate the support of RSA as a specific asymmetric\n   algorithm for the\
    \ signature generation.  Additionally, the algorithm\n   used for signature or\
    \ public key encryption is defined by, and\n   dependent on, the certificate used.\
    \  Besides the use of X.509v3\n   certificates, it is mandatory to support the\
    \ Diffie-Hellman group\n   \"OAKLEY5\" [RFC2412].  It is also possible to use\
    \ other Diffie-Hellman\n   groups within MIKEY.  This can be done by defining\
    \ a new mapping sub-\n   payload and the associated policy payload according to\
    \ [RFC3830].\n   The advantages of this approach are a fair, mutual key agreement\n\
    \   (both parties provide to the key), perfect forward secrecy, and the\n   absence\
    \ of the need to fetch a certificate in advance as needed for\n   the MIKEY-RSA\
    \ method depicted above.  Moreover, it also provides the\n   option to use self-signed\
    \ certificates to avoid a PKI deployment.\n   Note that, depending on the security\
    \ policy, self-signed certificates\n   may not be suitable for every use case.\n\
    \   Negatively to remark is that this approach scales mainly to point-to-\n  \
    \ point and depends on PKI for full scalability.  Multiparty\n   conferencing\
    \ is not supported using just MIKEY-DHSIGN.  Nevertheless,\n   the established\
    \ Diffie-Hellman-Secret may serve as a pre-shared key\n   to bootstrap group-related\
    \ security parameter.  Furthermore, as for\n   the MIKEY-RSA mode described above,\
    \ the verification of certificates\n   may not necessarily be done in real time.\
    \  This could be the case in\n   scenarios where the revocation status of certificates\
    \ is checked\n   through a further component.  Note that, according to [RFC3830],\
    \ it\n   is optional to implement this scheme.\n"
- title: 3.4.  Unprotected Key Distribution
  contents:
  - "3.4.  Unprotected Key Distribution\n   RFC 3830 also supports a mode to provide\
    \ a key in an unprotected\n   manner (MIKEY-NULL).  This is based on the symmetric\
    \ key encryption\n   option depicted in Section 3.1 but is used with the NULL\
    \ encryption\n   and the NULL authentication algorithms.  It may be compared with\
    \ the\n   plain approach in SDP security descriptions [RFC4568].  MIKEY-NULL\n\
    \   completely relies on the security of the underlying layer, e.g.,\n   provided\
    \ by TLS.  This option should be used with caution as it does\n   not protect\
    \ the key management.\n   Based on the missing cryptographic protection of this\
    \ method, it is\n   obvious that perfect forward secrecy is not provided.  As\
    \ it is based\n   on the pre-shared secret mode, only the Initiator contributes\
    \ to the\n   key management.  The method itself is highly scalable, but again,\n\
    \   without proper protection through an underlying security layer, it is\n  \
    \ not advisable for use.\n"
- title: 3.5.  Diffie-Hellman Key Agreement Protected with Pre-Shared Secrets
  contents:
  - "3.5.  Diffie-Hellman Key Agreement Protected with Pre-Shared Secrets\n   This\
    \ is an additional option, which has been defined in [RFC4650].\n   In contrast\
    \ to the method described in Section 3.3, here the Diffie-\n   Hellman key agreement\
    \ is authenticated (and integrity protected)\n   using a pre-shared secret and\
    \ keyed hash function.\n   Initiator                                  Responder\n\
    \   I_MESSAGE =\n       HDR, T, RAND, [IDi],\n       IDr, {SP}, DHi, KEMAC   \
    \   --->\n                                             R_MESSAGE =\n         \
    \                         <---           HDR, T,[IDr], IDi,\n                \
    \                                 DHr, DHi, KEMAC\n   TGK = g^(xi * yi)      \
    \                  TGK = g^(xi * yi)\n   For the integrity protection of the Diffie-Hellman\
    \ key agreement,\n   [RFC4650] mandates the use of HMAC SHA-1.  Regarding Diffie-Hellman\n\
    \   groups, [RFC3830] is referenced.  Thus, it is mandatory to support\n   the\
    \ Diffie-Hellman group \"OAKLEY5\" [RFC2412].  It is also possible to\n   use\
    \ other Diffie-Hellman groups within MIKEY.  This can be done by\n   defining\
    \ a new mapping sub-payload and the associated policy payload\n   according to\
    \ RFC 3830.  This option has also several advantages, as\n   there are the fair\
    \ mutual key agreement, the perfect forward secrecy,\n   and no dependency on\
    \ a PKI and PKI standards.  Moreover, this scheme\n   has a sound performance\
    \ and reduced bandwidth requirements compared\n   to MIKEY-DH-SIGN and provides\
    \ a simple and straightforward master key\n   provisioning.  The establishment\
    \ of shared secrets and the lack of\n   support for group keying is a disadvantage.\n\
    \   This mode of operation provides an efficient scheme in deployments\n   where\
    \ there is a central trusted server that is provisioned with\n   shared secrets\
    \ for many clients.  Such setups could, for example, be\n   enterprise Private\
    \ Branch Exchanges (PBXs), service provider proxies,\n   etc.  In contrast to\
    \ the plain pre-shared key encryption-based mode,\n   described in Section 3.1,\
    \ this mode offers perfect forward secrecy as\n   well as active involvement in\
    \ the key generation of both parties\n   involved.\n"
- title: 3.6.  SAML-Assisted DH key Agreement
  contents:
  - "3.6.  SAML-Assisted DH key Agreement\n   There has been a longer discussion during\
    \ IETF meetings and also on\n   the IETF MSEC mailing list about a SAML-assisted\
    \ DH approach.  This\n   idea has not been submitted as a separate document. \
    \ Nevertheless,\n   the discussion is reflected here as it is targeted to fulfill\
    \ general\n   requirements on key management approaches.  Those requirements can\
    \ be\n   summarized as:\n   1.  Mutual authentication of involved parties\n  \
    \ 2.  Both parties involved contribute to the session key generation\n   3.  Provide\
    \ perfect forward secrecy\n   4.  Support distribution of group session keys\n\
    \   5.  Provide liveliness tests when involved parties do not have a\n       reliable\
    \ clock\n   6.  Support of limited parties involved\n   To fulfill all of the\
    \ requirements, it was proposed to use a classic\n   Diffie-Hellman key agreement\
    \ protocol for key establishment in\n   conjunction with a User Agent's (UA's)\
    \ SIP server signed element,\n   authenticating the Diffie-Hellman key and the\
    \ ID using the SAML\n   (Security Assertion Markup Language [SAML_overview]) approach.\
    \  Here\n   the client's public Diffie-Hellman credentials are signed by the\n\
    \   server to form a SAML assertion (referred to as CRED below), which\n   may\
    \ be used for later sessions with other clients.  This assertion\n   needs at\
    \ least to convey the ID, public DH key, expiry, and the\n   signature from the\
    \ server.  It provides the involved clients with\n   mutual authentication and\
    \ message integrity of the key management\n   messages exchanged.\n   Initiator\
    \                             Responder\n   I_MESSAGE =\n   HDR, T, RAND1, [CREDi],\n\
    \   IDr, {SP}                      --->\n                                    \
    \     R_MESSAGE =\n                                  <---   HDR, T, [CREDr], IDi,\
    \ DHr,\n                                         RAND2, (SP)\n          TGK =\
    \ HMACx(RAND1|RAND2), where x = g^(xi * xr).\n   Additionally, the scheme proposes\
    \ a second roundtrip to avoid the\n   dependence on synchronized clocks and provide\
    \ liveliness checks.\n   This is achieved by exchanging nonces, protected with\
    \ the session\n   key.  The second roundtrip can also be used for distribution\
    \ of group\n   keys or to leverage a weak DH key for a stronger session key. \
    \ The\n   trigger for the second roundtrip would be handled via SP, the\n   security\
    \ policy communicated via MIKEY.\n   Initiator                             Responder\n\
    \   I_MESSAGE =\n   HDR, SIGN(ENC(RAND3))          --->\n                    \
    \                     R_MESSAGE =\n                                  <---   SIGN(ENC(RAND4))\n\
    \   Note that if group keys are to be provided, RAND would be substituted\n  \
    \ by that group key.\n   With the second roundtrip, this approach also provides\
    \ an option for\n   all of the other key distribution methods, when liveliness\
    \ checks are\n   needed.  The drawback of the second roundtrip is that these messages\n\
    \   need to be integrated into the call flow of the signaling protocol.\n   In\
    \ a straight-forward call, one roundtrip may be enough to set up a\n   session.\
    \  Thus, this second roundtrip would require additional\n   messages to be exchanged.\n\
    \   Regarding the different criteria discussed in the introduction of\n   this\
    \ section, the advantages of this approach are a fair, mutual key\n   agreement\
    \ (both parties provide to the key), and perfect forward\n   secrecy.  Through\
    \ the second roundtrip, the dependency on\n   synchronized clocks can be avoided.\
    \  Moreover, this second roundtrip\n   enables the distribution of a group key\
    \ and thus enhances the\n   scalability from mainly point-to-point to also multiparty\n\
    \   conferencing.  The usage of SAML-assisted DH may decrease the hidden\n   latency\
    \ cost through the credential validation necessary to be done\n   for the signed\
    \ DH scheme described in Section 3.3.  If the UA\n   received its SAML assertion\
    \ from its domain's SIP server, it is\n   trusting the server implicitly, thus,\
    \ it may extend that trust to\n   relying on it to validate the other party's\
    \ SAML assertion.  This\n   eliminates not only the hidden validation latency\
    \ but also its\n   computational cost to the UA.\n   Negatively to remark is that\
    \ this proposal does have one significant\n   security risk.  The UA's SIP server\
    \ can cheat and create an extra\n   authentication object for the UA where it\
    \ has the Diffie-Hellman\n   private key.  With this, the (SIP) server issuing\
    \ the SAML assertion\n   can successfully launch a Man-in-the-Middle (MITM) attack\
    \ against two\n   of its UAs.  Also, two SIP servers can collude so that either\
    \ can\n   successfully launch a MITM attack against their UAs.  A UA can block\n\
    \   this attack if its Diffie-Hellman key is authenticated by a\n   trustworthy\
    \ third party and this whole object is signed by the SIP\n   server.  Moreover,\
    \ this approach uses two roundtrips, increasing the\n   necessary bandwidth and\
    \ also the setup time, which may be crucial for\n   many scenarios.  For the credential\
    \ generation, usually a separate\n   component (server) is necessary, so serverless\
    \ call setup is not\n   supported.\n"
- title: 3.7.  Asymmetric Key Distribution with In-Band Certificate Exchange
  contents:
  - "3.7.  Asymmetric Key Distribution with In-Band Certificate Exchange\n   This\
    \ is an additional option, which has been defined in [RFC4738].\n   It describes\
    \ the asymmetric key distribution with optional in-band\n   certificate exchange.\n\
    \   Initiator                             Responder\n   I_MESSAGE =\n   HDR, T,\
    \ [IDi|CERTi], [IDr],\n         {SP}, [RAND], SIGNi      --->\n              \
    \                           R_MESSAGE =\n                                  <---\
    \   HDR, [GenExt(CSB-ID)], T,\n                                           RAND,\
    \ [IDr|CERTr], [SP],\n                                           KEMAC, SIGNr\n\
    \   This option has some advantages compared to the asymmetric key\n   distribution\
    \ stated in Section 3.2.  Here, the sender and receiver do\n   not need to know\
    \ the certificate of the other peer in advance as it\n   may be sent in the MIKEY\
    \ Initiator message (if the receiver knows the\n   certificate in advance, RFC\
    \ 3830's MIKEY-RSA mode may be used\n   instead).  Thus, the receiver of this\
    \ message can utilize the\n   received key material to encrypt the session parameter\
    \ and send them\n   back as part of the MIKEY responder message.  The certificate\
    \ check\n   may be done depending on the signing authority.  If the certificate\n\
    \   is signed by a publicly accepted authority, the certificate\n   validation\
    \ can be done in a straightforward manner, by using the\n   commonly known certificate\
    \ authority's public key.  In the other\n   case, additional steps may be necessary.\
    \  The disadvantage is that no\n   perfect forward secrecy is provided.\n   This\
    \ mode is meant to provide an easy option for certificate\n   provisioning when\
    \ PKI is present and/or required.  Specifically in\n   SIP, session invitations\
    \ can be retargeted or forked.  MIKEY modes\n   that require the Initiator to\
    \ target a single well-known Responder\n   may be impractical here as they may\
    \ require multiple roundtrips to do\n   key negotiation.  By allowing the Responder\
    \ to generate secret\n   material used for key derivation, this mode allows for\
    \ an efficient\n   key delivery scheme.  Note that the Initiator can contribute\
    \ to the\n   key material since the key is derived from CSB-ID and RAND payloads\n\
    \   in unicast use cases.  This mode is also useful in multicast\n   scenarios\
    \ where multiple clients are contacting a known server and\n   are downloading\
    \ the key.  Responder workload is significantly reduced\n   in these scenarios\
    \ compared to MIKEY in public key mode.  This is due\n   to the fact that the\
    \ RSA asymmetric encryption requires less effort\n   compared to the decryption\
    \ using the private key (the public key is\n   usually shorter than the private\
    \ key, hence less performance for\n   encryption compared to decryption).  Examples\
    \ of deployments where\n   this mode can be used are enterprises with PKI, service\
    \ provider\n   setups where the service provider decides to provision certificates\n\
    \   to its users, etc.\n"
- title: 4.  Further MIKEY Extensions
  contents:
  - "4.  Further MIKEY Extensions\n   This section will provide an overview about\
    \ further MIKEY [RFC3830]\n   extensions for crypto algorithms and generic payload\
    \ enhancements, as\n   well as enhancements to support the negotiation of security\n\
    \   parameters for security protocols other than SRTP.  These extensions\n   have\
    \ been defined in several additional documents.\n"
- title: 4.1.  ECC Algorithms Support
  contents:
  - "4.1.  ECC Algorithms Support\n   [MSEC-MIKEY] proposes extensions to the authentication,\
    \ encryption,\n   and digital signature methods described for use in MIKEY, employing\n\
    \   elliptic curve cryptography (ECC).  These extensions are defined to\n   align\
    \ MIKEY with other ECC implementations and standards.\n   The motivation for supporting\
    \ ECC within MIKEY stems from the\n   following advantages:\n   o  ECC modes are\
    \ more and more added to security protocols.\n   o  ECC support requires considerably\
    \ smaller keys by keeping the same\n      security level compared to other asymmetric\
    \ techniques (like RSA).\n      Elliptic curve algorithms are capable of providing\
    \ security\n      consistent with Advanced Encryption Standard (AES) keys of 128,\n\
    \      192, and 256 bits without extensive growth in asymmetric key\n      sizes.\n\
    \   o  As stated in [MSEC-MIKEY], implementations have shown that\n      elliptic\
    \ curve algorithms can significantly improve performance\n      and security-per-bit\
    \ over other recommended algorithms.\n   These advantages make the usage of ECC\
    \ especially interesting for\n   embedded devices, which may have only limited\
    \ performance and storage\n   capabilities.\n   [MSEC-MIKEY] proposes several\
    \ ECC-based mechanisms to enhance the\n   MIKEY key distribution schemes:\n  \
    \ o  Use of ECC methods extending the Diffie-Hellman key exchange:\n      MIKEY-DHSIGN\
    \ with ECDSA or ECGDSA\n   o  Use of ECC methods extending the Diffie-Hellman\
    \ key exchange:\n      MIKEY-DHSIGN with ECDH\n   o  Use of Elliptic Curve Integrated\
    \ Encryption Scheme (MIKEY-ECIES)\n   o  Use of Elliptic Curve Menezes-Qu-Vanstone\
    \ Scheme(MIKEY-ECMQV)\n   The following subsections will provide more detailed\
    \ information\n   about the message exchanges for MIKEY-ECIES and MIKEY-ECMQV.\n"
- title: 4.1.1.  Elliptic Curve Integrated Encryption Scheme application in MIKEY
  contents:
  - "4.1.1.  Elliptic Curve Integrated Encryption Scheme application in MIKEY\n  \
    \ The following figure shows the message exchange for the MIKEY-ECIES\n   scheme:\n\
    \   Initiator                                       Responder\n   I_MESSAGE =\n\
    \   HDR, T, RAND, [IDi|CERTi],\n       [IDr], {SP}, KEMAC,\n       [CHASH], PKE,\
    \ SIGNi        --->\n                                                   R_MESSAGE\
    \ =\n                                 [<---]            HDR, T, [IDr], V\n"
- title: 4.1.2.  Elliptic Curve Menezes-Qu-Vanstone Scheme Application in MIKEY
  contents:
  - "4.1.2.  Elliptic Curve Menezes-Qu-Vanstone Scheme Application in MIKEY\n   The\
    \ following figure shows the message exchange for the MIKEY-ECMQV\n   scheme:\n\
    \   Initiator                                      Responder\n   I_MESSAGE =\n\
    \   HDR, T, RAND, [IDi|CERTi],\n      [IDr], {SP},\n      ECCPTi, SIGNi      \
    \         --->\n                                                  R_MESSAGE =\n\
    \                                 [<---]           HDR, T, [IDr], V\n"
- title: 4.2.  New MIKEY Payload for Bootstrapping TESLA
  contents:
  - "4.2.  New MIKEY Payload for Bootstrapping TESLA\n   TESLA [RFC4082] is a protocol\
    \ for providing source authentication in\n   multicast scenarios.  TESLA is an\
    \ efficient protocol with low\n   communication and computation overhead, which\
    \ scales to large numbers\n   of receivers, and also tolerates packet loss.  TESLA\
    \ is based on\n   loose time synchronization between the sender and the receivers.\n\
    \   Source authentication is realized in TESLA by using Message\n   Authentication\
    \ Code (MAC) chaining.  The use of TESLA within the\n   Secure Real-time Transport\
    \ Protocol (SRTP) has been published in\n   [RFC4383] targeting multicast authentication\
    \ in scenarios, where SRTP\n   is applied to protect the multimedia data.  This\
    \ solution assumes\n   that TESLA parameters are made available by out-of-band\
    \ mechanisms.\n   [RFC4442] specifies payloads for MIKEY to bootstrap TESLA for\
    \ source\n   authentication of secure group communications using SRTP.  TESLA\
    \ may\n   be bootstrapped using one of the MIKEY key management approaches\n \
    \  described above by sending the MIKEY message via unicast, multicast,\n   or\
    \ broadcast.  This approach provides the necessary parameter payload\n   extensions\
    \ for the usage of TESLA in SRTP.  Nevertheless, if the\n   parameter set is also\
    \ sufficient for other TESLA use cases, it can be\n   applied as well.\n"
- title: 4.3.  MBMS Extensions to the Key ID Information Type
  contents:
  - "4.3.  MBMS Extensions to the Key ID Information Type\n   This extension specifies\
    \ a new Type (the Key ID Information Type) for\n   the General Extension Payload.\
    \  This is used in, e.g., the Multimedia\n   Broadcast/Multicast Service (MBMS)\
    \ specified in the 3rd Generation\n   Partnership Project (3GPP).  MBMS requires\
    \ the use of MIKEY to convey\n   the keys and related security parameters needed\
    \ to secure the\n   multimedia that is multicast or broadcast.\n   One of the\
    \ requirements that MBMS puts on security is the ability to\n   perform frequent\
    \ updates of the keys.  The rationale behind this is\n   that it will be costly\
    \ for subscribers to re-distribute the\n   decryption keys to non-subscribers.\
    \  The cost for re-distributing the\n   keys using the unicast channel should\
    \ be higher than the cost of\n   purchasing the keys for this scheme to have an\
    \ effect.  To achieve\n   this, MBMS uses a three-level key management, to distribute\
    \ group\n   keys to the clients, and be able to re-key by pushing down a new\n\
    \   group key.  MBMS has the need to identify which types of keys are\n   involved\
    \ in the MIKEY message and their identity.\n   [RFC4563] specifies a new Type\
    \ for the General Extension Payload in\n   MIKEY, to identify the type and identity\
    \ of involved keys.  Moreover,\n   as MBMS uses MIKEY both as a registration protocol\
    \ and a re-key\n   protocol, this RFC specifies the necessary additions that allow\
    \ MIKEY\n   to function both as a unicast and multicast re-key protocol in the\n\
    \   MBMS setting.\n"
- title: 4.4.  OMA BCAST MIKEY General Extension Payload Specification
  contents:
  - "4.4.  OMA BCAST MIKEY General Extension Payload Specification\n   The document\
    \ [RFC4909] specifies a new general extension payload type\n   for use in the\
    \ Open Mobile Alliance (OMA) Browser and Content\n   Broadcast (BCAST) group.\
    \  OMA BCAST's service and content protection\n   specification uses short-term\
    \ key message and long-term key message\n   payloads that in certain broadcast\
    \ distribution systems are carried\n   in MIKEY.  The document defines a general\
    \ extension payload to allow\n   possible extensions to MIKEY without defining\
    \ a new payload.  The\n   general extension payload can be used in any MIKEY message\
    \ and is\n   part of the authenticated or signed data part.  Note that only a\n\
    \   parameter description is included, but no key information.\n"
- title: 4.5.  Supporting Integrity Transform Carrying the Rollover Counter
  contents:
  - "4.5.  Supporting Integrity Transform Carrying the Rollover Counter\n   The document\
    \ [RFC4771] defines a new integrity transform for SRTP\n   [RFC3711] providing\
    \ the option to also transmit the Roll Over Counter\n   (ROC) as part of dedicated\
    \ SRTP packets.  This extension has been\n   defined for use in the 3GPP multicast/broadcast\
    \ service.  While the\n   communicating parties did agree on a starting ROC, in\
    \ some cases the\n   receiver may not be able to synchronize his ROC with the\
    \ one used by\n   the sender even if it is signaled to him out of band.  Here\
    \ the new\n   extension provides the possibility for the receiver to re-synchronize\n\
    \   to the sender's ROC.  To signal the use of the new integrity\n   transform,\
    \ new definitions for certain MIKEY payloads need to be\n   done.  These new definitions\
    \ comprise the integrity transform itself\n   as well as a new integrity transform\
    \ parameters.  Moreover, the\n   document specifies additional parameter, to enable\
    \ the usage of\n   different integrity transforms for SRTP and SRTCP.\n"
- title: 5.  Selection and Interworking of MIKEY Modes
  contents:
  - "5.  Selection and Interworking of MIKEY Modes\n   While MIKEY and its extensions\
    \ provide a variety of choices in terms\n   of modes of operation, an implementation\
    \ may choose to simplify its\n   behavior.  This can be achieved by operating\
    \ in a single mode of\n   operation when in the Initiator's role.  Where PKI is\
    \ available\n   and/or required, an implementation may choose, for example, to\
    \ start\n   all sessions in RSA-R mode, and it would be trivial for it to act\
    \ as\n   a Responder in public key mode.  If envelope keys are cached, it can\n\
    \   then also choose to do re-keying in shared key mode.  It is outside\n   the\
    \ scope of MIKEY or MIKEY extensions if the caching of envelope\n   keys is allowed.\
    \  This is a matter of the configuration of the\n   involved components.  This\
    \ local configuration is also outside the\n   scope of MIKEY.  In general, modes\
    \ of operation where the Initiator\n   generates keying material are useful when\
    \ two peers are aware of each\n   other before the MIKEY communication takes place.\
    \  If a peer chooses\n   not to operate in the public key mode, it may reject\
    \ the certificate\n   of the Initiator.  The same applies to peers that choose\
    \ to operate\n   in one of the DH modes exclusively.\n   Forward MIKEY modes,\
    \ where the Initiator provides the key material,\n   like public key or shared\
    \ key mode when used in SIP/SDP may lead to\n   complications in some call scenarios,\
    \ for example, forking scenarios\n   where key derivation material gets distributed\
    \ to multiple parties.\n   As mentioned earlier, this may be impractical as some\
    \ of the\n   destinations may not have the resources to validate the message and\n\
    \   may cause the Initiator to drop the session invitation.  Even in the\n   case\
    \ in which all parties involved have all the prerequisites for\n   interpreting\
    \ the MIKEY message received, there is a possible problem\n   with multiple Responders\
    \ starting media sessions using the same key.\n   While the SSRCs will be different\
    \ in most of the cases, they are only\n   32 bits long and there is a high probability\
    \ of a two-time pad\n   problem.  This is due to the support of scenarios like\
    \ forking (see\n   also Section 5.2) or retargeting (see also Section 5.3), where\
    \ a two-\n   time pad occurs if two branches have the same TEK (based on the MIKEY\n\
    \   key establishment) and choose the same 32-bit SSRC for the SRTP\n   streams\
    \ and transmit SRTP packets.  As suggested earlier, forward\n   modes are most\
    \ useful when the two peers are aware of each other\n   before the communication\
    \ takes place (as is the case in key renewal\n   scenarios when costly public\
    \ key operations can be avoided by using\n   the envelope key).\n   The following\
    \ list gives an idea how the different MIKEY modes may be\n   used or combined,\
    \ depending on available key material at the\n   Initiator side.\n   1.  If the\
    \ Initiator has a PSK with the Responder, it uses the PSK\n       mode.\n   2.\
    \  If the Initiator has a PSK with the Responder, but needs PFS or\n       knows\
    \ that the Responder has a policy that both parties should\n       provide entropy\
    \ to the key, then it uses the DH-HMAC mode.\n   3.  If the Initiator has the\
    \ RSA key of the Responder, it uses the\n       RSA mode to establish the TGK.\
    \  Note that the TGK may be used as\n       PSK together with Option 1 for further\
    \ key management operations.\n   4.  If the Initiator does not expect the responder\
    \ to have his\n       certificate, he may use RSA-R.  Using RSA-R, he can provide\
    \ the\n       Initiator's certificate information in-band to the receiver.\n \
    \      Moreover, the Initiator may also provide a random number that can\n   \
    \    be used by the receiver for key generation.  Thus, both parties\n       can\
    \ be involved in the key management.  But as the inclusion of\n       the random\
    \ number cannot be forced by the Initiator, true PFS\n       cannot be provided.\
    \  Note that in this mode, after establishing\n       the TGK, it may be used\
    \ as PSK with other MIKEY modes.\n   5.  The Initiator uses DH-SIGN when PFS is\
    \ required by his policy and\n       he knows that the Responder has a policy\
    \ that both parties should\n       provide entropy.  Note that also in this mode,\
    \ after establishing\n       the TGK, it may be used as PSK with other MIKEY modes.\n\
    \   6.  If no PSK or certificate is available at the Initiator's side\n      \
    \ (and likewise at the responder's side) but lower-level security\n       (like\
    \ TLS or IPsec) is in place the user may use the unprotected\n       mode of MIKEY.\
    \  It has to considered that using the unprotected\n       mode enables intermediate\
    \ nodes like proxies to actually get the\n       exchanged master key in plain.\
    \  This may not be intended,\n       especially in cases where the intermediate\
    \ node is not trusted.\n   Besides the available key material, choosing between\
    \ the different\n   modes of MIKEY depends strongly on the use case.  This section\
    \ will\n   depict dedicated scenarios to discuss the feasibility of the\n   different\
    \ modes in these scenarios.  A comparison of the different\n   modes of operation\
    \ regarding the influences and requirements to the\n   deploying infrastructure\
    \ as well as the cryptographic strength can be\n   found in [SIP-MEDIA].  The\
    \ following list provides the most prominent\n   call scenarios and are matter\
    \ of further discussion:\n   o  Early Media\n   o  Forking\n   o  Call Transfer/Redirect/Retarget\n\
    \   o  Shared Key Conferencing\n"
- title: 5.1.  MIKEY and Early Media
  contents:
  - "5.1.  MIKEY and Early Media\n   The term early media describes two different\
    \ scenarios.  The first\n   one relates to the case where media data are received\
    \ before the\n   actual SDP signaling answer has been received.  This may arise\n\
    \   through the different latency on the signaling and media path.  This\n   case\
    \ is often referred to as media before signaling answer.  The\n   second scenario\
    \ describes the case were media data are send from the\n   callee before sending\
    \ the final SIP 200 OK message.  This situation\n   appears usually in call center\
    \ scenarios, when queuing a waiting loop\n   or when providing personal ring tones.\n\
    \   In early media scenarios, SRTP data may be received before the answer\n  \
    \ over the SIP signaling arrives.  The two MIKEY modes, which only\n   require\
    \ one message to be transported (Section 3.1 and Section 3.2),\n   work nicely\
    \ in early media situations, as both sender and receiver\n   have all the necessary\
    \ parameters in place before actually sending/\n   receiving encrypted data. \
    \ The other modes, featuring either Diffie-\n   Hellman key agreement (Section\
    \ 3.3, Section 3.5, and Section 3.6) or\n   the enhanced asymmetric variant (Section\
    \ 3.7), suffer from the\n   requirements that the Initiator has to wait for the\
    \ response before\n   being able to decrypt the incoming SRTP media.  In fact,\
    \ even if\n   early media is not used, in other words if media is not sent before\n\
    \   the SDP answer, a similar problem may arise from the fact that SIP/\n   SDP\
    \ signaling has to traverse multiple proxies on its way back and\n   media may\
    \ arrive before the SDP answer.  It is expected that this\n   delay would be significantly\
    \ shorter than in the case of early media\n   though.\n   It is worth mentioning\
    \ here that security descriptions [RFC4568] have\n   basically the same problem\
    \ as the initiating end needs the SDP answer\n   before it can start decrypting\
    \ SRTP media.\n   To cope with the early media problem, there are further approaches\
    \ to\n   describe security preconditions [RFC5027]; i.e., certain\n   preconditions\
    \ need to be met to enable voice data encryption.  One\n   example, for instance,\
    \ is that a scenario where a provisional\n   response, containing the required\
    \ MIKEY parameter, is sent before\n   encrypted media is processed.\n"
- title: 5.2.  MIKEY and Forking
  contents:
  - "5.2.  MIKEY and Forking\n   In SIP forking scenarios, a SIP proxy server sends\
    \ an INVITE request\n   to more than one location.  This means also that the MIKEY\
    \ payload,\n   which is part of the SDP, is sent to several (different) locations.\n\
    \   MIKEY modes supporting signatures may be used in forking scenarios\n   (Section\
    \ 3.3 and Section 3.7) as here the receiver can validate the\n   signature.  There\
    \ are limitations with the symmetric key encryption\n   as well as the asymmetric\
    \ key encryption modes (Section 3.1 and\n   Section 3.2).  This is due to the\
    \ fact that in symmetric encryption\n   the recipient needs to possess the symmetric\
    \ key before handling the\n   MIKEY data.  For asymmetric MIKEY modes, if the\
    \ sender is aware of\n   the forking he may not know in advance to which location\
    \ the INVITE\n   is forked and thus may not use the right receiver certificate\
    \ to\n   encrypt the MIKEY envelope key.  Note that the sender may include\n \
    \  several MIKEY containers into the same INVITE message to cope with\n   forking,\
    \ but this requires the knowledge of all forking targets in\n   advance and also\
    \ requires the possession of the target certificates.\n   It is out of the scope\
    \ of MIKEY to specify behavior in such a case.\n   MIKEY Diffie Hellman modes\
    \ or MIKEY-RSA_R Section 3.7 do not have\n   this problem.  In scenarios where\
    \ the sender is not aware of forking,\n   only the intended receiver is able to\
    \ decrypt the MIKEY container.\n   If forking is combined with early media, the\
    \ situation gets\n   aggravated.  If MIKEY modes requiring a full roundtrip are\
    \ used, like\n   the signed Diffie-Hellman, multiple responses may overload the\
    \ end\n   device.  An example is forking to 30 destinations (group pickup),\n\
    \   while MIKEY is used with the signed Diffie-Hellman mode together with\n  \
    \ security preconditions.  Here, every target would answer with a\n   provisional\
    \ response, leading to 30 signature validations and Diffie-\n   Hellman calculations\
    \ at the sender's site.  This may lead to a\n   prolonged media setup delay.\n\
    \   Moreover, depending on the MIKEY mode chosen, a two-time pad may\n   occur\
    \ in dependence of the negotiated key material and the SSRC.  For\n   the non\
    \ Diffie-Hellman modes other than RSA-R, a two-time pad may\n   occur when multiple\
    \ receivers pick the same SSRC.\n"
- title: 5.3.  MIKEY and Call Transfer/Redirect/Retarget
  contents:
  - "5.3.  MIKEY and Call Transfer/Redirect/Retarget\n   In a SIP environment, MIKEY\
    \ exchange is tied to SDP offer/answer and\n   irrespective of the implementation\
    \ model used for call transfer the\n   same properties and limitations of MIKEY\
    \ modes apply as in a normal\n   call setup scenario.\n   In certain SIP scenarios,\
    \ the functionality of redirect is supported.\n   In redirect scenarios, the call\
    \ initiator gets a response that the\n   called party for instance has temporarily\
    \ moved and may be reached at\n   a different destination.  The caller can now\
    \ perform a call\n   establishment with the new destination.  Depending on the\
    \ originally\n   chosen MIKEY mode, the caller may not be able to perform this\
    \ mode\n   with the new destination.  To be more precise, MIKEY-PSK and MIKEY-\n\
    \   DHHMAC require a pre-shared secret in advance.  MIKEY-RSA requires\n   the\
    \ knowledge about the target's certificate.  Thus, these modes may\n   influence\
    \ the ability of the caller to initiate a session.\n   Another functionality that\
    \ may be supported in SIP is retargeting.\n   In contrast to redirect, the call\
    \ initiator does not get a response\n   about the different target.  The SIP proxy\
    \ sends the request to a\n   different target about receiving a redirect response\
    \ from the\n   originally called target.  This most likely will lead to problems\n\
    \   when using MIKEY modes requiring a pre-shared key (MIKEY-PSK, MIKEY-\n   DHHMAC)\
    \ or where the caller used asymmetric key encryption (MIKEY-\n   RSA) because\
    \ the key management was originally targeted to a\n   different destination.\n"
- title: 5.4.  MIKEY and Shared Key Conferencing
  contents:
  - "5.4.  MIKEY and Shared Key Conferencing\n   First of all, not all modes of MIKEY\
    \ support shared key conferencing.\n   Mainly the Diffie-Hellman modes cannot\
    \ be used straight-forward for\n   conferencing as this mechanism results in a\
    \ pair wise shared secret\n   key.  All other modes can be applied in conferencing\
    \ scenarios by\n   obeying the Initiator and Responder roles; i.e., the half roundtrip\n\
    \   modes need to be initiated by the conferencing unit to be able to\n   distribute\
    \ the conferencing key.  The remaining full roundtrip mode,\n   MIKEY RSA-R, will\
    \ be initiated by the client, while the conferencing\n   unit provides the conferencing\
    \ key based on the received certificate.\n   An example conferencing architecture\
    \ is defined in the IETF's XCON\n   WG.  The scope of this working group relates\
    \ to a mechanism for\n   membership and authorization control, a mechanism to\
    \ manipulate and\n   describe media \"mixing\" or \"topology\" for multiple media\
    \ types\n   (audio, video, text), a mechanism for notification of conference-\n\
    \   related events/changes (for example, a floor change), and a basic\n   floor\
    \ control protocol.  A document describing possible use case\n   scenarios is\
    \ available in [RFC4597].\n"
- title: 5.5.  MIKEY Mode Summary
  contents:
  - "5.5.  MIKEY Mode Summary\n   The following two tables summarize the discussion\
    \ from the previous\n   subsections.  The first table matches the scenarios discussed\
    \ in this\n   section to the different MIKEY modes.\n   MIKEY             Early\
    \    Secure      Retarget   Redirect   Shared\n   mode              Media    Forking\
    \                           Key Conf\n   ---------------------------------------------------------------------\n\
    \   PSK  (3.1)         Yes                                        Yes*\n   RSA\
    \  (3.2)         Yes                                        Yes*\n   DH-SIGN (3.3)\
    \                Yes*         Yes       Yes\n   Unprotected (3.4)  Yes\n   DH-HMAC\
    \ (3.5)\n   RSA-R  (3.7)                 Yes          Yes       Yes       Yes\n\
    \   * In centralized conferencing, the media mixer needs to send the\n     MIKEY\
    \ Initiator message.\n   The following table maps the MIKEY modes to key management-related\n\
    \   properties.\n   MIKEY             Manual    Needs      PFS    Key Generation\n\
    \   mode              Keys      PKI               Involvement\n   --------------------------------------------------------------\n\
    \   PSK  (3.1)         Yes      No          No     Initiator\n   RSA  (3.2)  \
    \       No       Yes         No     Initiator\n   DH-SIGN (3.3)      No      \
    \ Yes         Yes    Both\n   Unprotected (3.4)  No       No          No     Initiator\n\
    \   DH-HMAC (3.5)      Yes      No          Yes    Both\n   RSA-R  (3.7)     \
    \  No       Yes         No     Both*\n   * Assumed the Initiator provides the\
    \ (optional) RAND value\n"
- title: 6.  Transport of MIKEY Messages
  contents:
  - "6.  Transport of MIKEY Messages\n   MIKEY defines message formats to transport\
    \ key information and\n   security policies between communicating entities.  It\
    \ does not define\n   the embedding of these messages into the used signaling\
    \ protocol.\n   This definition is provided in separate documents, depending on\
    \ the\n   used signaling protocol.  Nevertheless, MIKEY can also be transported\n\
    \   over plain UDP or TCP to port 2269.\n   Several IETF-defined protocols utilize\
    \ the Session Description\n   Protocol (SDP, [RFC4566]) to transport the session\
    \ parameters.\n   Examples are the Session Initiation Protocol (SIP, [RFC3261]\
    \ or the\n   Gateway Control Protocol (GCP, [RFC5125]).  The transport of MIKEY\n\
    \   messages as part of SDP is described in [RFC4567].  Here, the\n   complete\
    \ MIKEY message is base64 encoded and transmitted as part of\n   the SDP part\
    \ of the signaling protocol message.  Note that as several\n   key distribution\
    \ messages may be transported within one SDP\n   container, [RFC4567] also comprises\
    \ an integrity protection regarding\n   all supplied key distribution attempts.\
    \  Thus, bidding-down attacks\n   will be recognized.  Regarding RTSP, [RFC4567]\
    \ defines header\n   extensions allowing the transport of MIKEY messages.  Here,\
    \ the\n   initial messages uses SDP, while the remaining part of the key\n   management\
    \ is performed using the header extensions.\n   MIKEY is also applied in ITU-T\
    \ protocols like H.323, which is used to\n   establish communication sessions\
    \ similar to SIP.  For H.323, a\n   security framework exists, which is defined\
    \ in H.235.  Within this\n   framework, H.235.7 [H.235.7] describes the usage\
    \ of MIKEY and SRTP in\n   the context of H.323.  In contrast to SIP, H.323 uses\
    \ ASN.1 (Abstract\n   Syntax Notation).  Thus, there is no need to encode the\
    \ MIKEY\n   container as base64.  Within H.323, the MIKEY container is binary\n\
    \   encoded.\n"
- title: 7.  MIKEY Alternatives for SRTP Security Parameter Negotiation
  contents:
  - "7.  MIKEY Alternatives for SRTP Security Parameter Negotiation\n   Besides MIKEY,\
    \ there exist several approaches to handle the security\n   parameter establishment.\
    \  This is due to the fact that some\n   limitations in certain scenarios have\
    \ been seen.  Examples are early\n   media and forking situations as described\
    \ in Section 5.  The\n   following list provides a short summary about possible\
    \ alternatives:\n   o  sdescription - [RFC4568] describes a key management scheme,\
    \ which\n      uses SDP for transport and completely relies on underlying\n  \
    \    protocol security.  For transport, the document defines an SDP\n      attribute\
    \ transmitting all necessary SRTP parameter in clear.  For\n      security, it\
    \ references TLS and S/MIME.  In contrast to MIKEY, the\n      SRTP parameter\
    \ in the Initiator-to-Responder direction is actually\n      sent in the message\
    \ from the Initiator to the Responder rather\n      than vice versa.  This may\
    \ lead to problems in early media\n      scenarios.\n   o  sdescription with early\
    \ media support - [WING-MMUSIC] enhances the\n      above scheme with the possibility\
    \ to also be usable in early media\n      scenarios, when security preconditions\
    \ are not used.\n   o  Encrypted Key Transport for Secure RTP - [MCGREW-SRTP]\
    \ is an\n      extension to SRTP that provides for the secure transport of SRTP\n\
    \      master keys, Rollover Counters, and other information, within\n      SRTCP.\
    \  This facility enables SRTP to work for decentralized\n      conferences with\
    \ minimal control, and to handle situations caused\n      by SIP forking and early\
    \ media.  It may also be used in\n      conjunction with MIKEY.\n   o  Diffie-Hellman\
    \ support in SDP - [BAUGHER] defines a new SDP\n      attribute for exchanging\
    \ Diffie-Hellman public keys.  The\n      attribute is an SDP session-level attribute\
    \ for describing DH\n      keys, and there is a new media-level parameter for\
    \ describing\n      public keying material for SRTP key generation.\n   o  DTLS-SRTP\
    \ describing SRTP extensions for DTLS - [AVT-DTLS]\n      describes a method of\
    \ using DTLS key management for SRTP by using\n      a new extension that indicates\
    \ that SRTP is to be used for data\n      protection and that establishes SRTP\
    \ keys.\n   o  ZRTP - [ZIMMERMANN] defines ZRTP as RTP header extensions for a\n\
    \      Diffie-Hellman exchange to agree on a session key and parameters\n    \
    \  for establishing SRTP sessions.  The ZRTP protocol is completely\n      self-contained\
    \ in RTP and does not require support in the\n      signaling protocol or assume\
    \ a PKI.\n   There has been a long discussion regarding a preferred key management\n\
    \   approach in the IETF coping with the different scenarios and\n   requirements\
    \ continuously sorting out key management approaches.\n   During IETF 68, three\
    \ options were considered: MIKEY in an updated\n   version (referred to as MIKEYv2),\
    \ ZRTP, and DTLS-SRTP.  The potential\n   key management protocol for the standards\
    \ track for media security\n   was voted in favor of DTLS-SRTP.  Thus, the reader\
    \ is pointed to the\n   appropriate resources for further information on DTLS-SRTP\n\
    \   [AVT-DTLS].  Note that MIKEY has already been deployed for setting up\n  \
    \ SRTP security context and is also targeted for use in MBMS\n   applications.\n"
- title: 8.  Summary of MIKEY-Related IANA Registrations
  contents:
  - "8.  Summary of MIKEY-Related IANA Registrations\n   For MIKEY and the extensions\
    \ to MIKEY, IANA registrations have been\n   made.  Here only a link to the appropriate\
    \ IANA registration is\n   provided to avoid inconsistencies.  The IANA registrations\
    \ for MIKEY\n   payloads can be found under\n   http://www.iana.org/assignments/mikey-payloads.\
    \  These registrations\n   comprise the MIKEY base registrations as well as registrations\
    \ made\n   by MIKEY extensions regarding the payload.\n   The IANA registrations\
    \ for MIKEY port numbers can be found under\n   http://www.iana.org/assignments/port-numbers\
    \ (search for MIKEY).\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document does not define extensions to existing\
    \ protocols.  It\n   rather provides an overview about the set of MIKEY modes\
    \ and\n   available extensions and provides information about the applicability\n\
    \   of the different modes in different scenarios to support the decision\n  \
    \ making for network architects regarding the appropriate MIKEY scheme\n   or\
    \ extension to be used in a dedicated target scenario.  Choosing\n   between the\
    \ different schemes described in this document strongly\n   influences the security\
    \ of the target system as the different schemes\n   provide different levels of\
    \ security and also require different\n   infrastructure support.\n   As this\
    \ document is based on the MIKEY base specification as well as\n   the different\
    \ specifications of the extensions, the reader is\n   referred to the original\
    \ documents for the specific security\n   considerations.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors would like to thank Lakshminath Dondeti\
    \ for his document\n   reviews and for his guidance.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]        Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC3830]        Arkko, J., Carrara, E., Lindholm, F.,\
    \ Naslund, M.,\n                    and K. Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\",\n                    RFC 3830, August 2004.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [AVT-DTLS]       McGrew, D. and E. Rescorla,\
    \ \"Datagram Transport\n                    Layer Security (DTLS) Extension to\
    \ Establish Keys\n                    for Secure Real-time Transport Protocol\
    \ (SRTP)\",\n                    Work in Progress, February 2008.\n   [BAUGHER]\
    \        Baugher, M. and D. McGrew, \"Diffie-Hellman Exchanges\n             \
    \       for Multimedia Sessions\", Work in Progress,\n                    February\
    \ 2006.\n   [H.235.7]        \"\"ITU-T Recommendation H.235.7: Usage of the MIKEY\n\
    \                    Key Management Protocol for the Secure Real Time\n      \
    \              Transport Protocol (SRTP) within H.235\"\", 2005.\n   [ISO_sec_time]\
    \   \"\"ISO/IEC 18014 Information technology - Security\n                    techniques\
    \ - Time-stamping services, Part 1-\n                    3.http://www.oasis-open.org/committees/\n\
    \                    documents.php?wg_abbrev=security\"\", 2002.\n   [MCGREW-SRTP]\
    \    McGrew, D., \"Encrypted Key Transport for Secure\n                    RTP\"\
    , Work in Progress, March 2007.\n   [MSEC-MIKEY]     Milne, A., \"ECC Algorithms\
    \ for MIKEY\", Work in\n                    Progress, June 2007.\n   [RFC1305]\
    \        Mills, D., \"Network Time Protocol (Version 3)\n                    Specification,\
    \ Implementation\", RFC 1305,\n                    March 1992.\n   [RFC2412] \
    \       Orman, H., \"The OAKLEY Key Determination Protocol\",\n              \
    \      RFC 2412, November 1998.\n   [RFC3261]        Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G.,\n                    Johnston, A., Peterson, J., Sparks,\
    \ R., Handley, M.,\n                    and E. Schooler, \"SIP: Session Initiation\
    \ Protocol\",\n                    RFC 3261, June 2002.\n   [RFC3711]        Baugher,\
    \ M., McGrew, D., Naslund, M., Carrara, E.,\n                    and K. Norrman,\
    \ \"The Secure Real-time Transport\n                    Protocol (SRTP)\", RFC\
    \ 3711, March 2004.\n   [RFC4082]        Perrig, A., Song, D., Canetti, R., Tygar,\
    \ J., and B.\n                    Briscoe, \"Timed Efficient Stream Loss-Tolerant\n\
    \                    Authentication (TESLA): Multicast Source\n              \
    \      Authentication Transform Introduction\", RFC 4082,\n                  \
    \  June 2005.\n   [RFC4086]        Eastlake, D., Schiller, J., and S. Crocker,\n\
    \                    \"Randomness Requirements for Security\", BCP 106,\n    \
    \                RFC 4086, June 2005.\n   [RFC4383]        Baugher, M. and E.\
    \ Carrara, \"The Use of Timed\n                    Efficient Stream Loss-Tolerant\
    \ Authentication\n                    (TESLA) in the Secure Real-time Transport\
    \ Protocol\n                    (SRTP)\", RFC 4383, February 2006.\n   [RFC4442]\
    \        Fries, S. and H. Tschofenig, \"Bootstrapping Timed\n                \
    \    Efficient Stream Loss-Tolerant Authentication\n                    (TESLA)\"\
    , RFC 4442, March 2006.\n   [RFC4563]        Carrara, E., Lehtovirta, V., and\
    \ K. Norrman, \"The\n                    Key ID Information Type for the General\
    \ Extension\n                    Payload in Multimedia Internet KEYing (MIKEY)\"\
    ,\n                    RFC 4563, June 2006.\n   [RFC4566]        Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP:\n                    Session Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC4567]        Arkko, J., Lindholm, F.,\
    \ Naslund, M., Norrman, K.,\n                    and E. Carrara, \"Key Management\
    \ Extensions for\n                    Session Description Protocol (SDP) and Real\
    \ Time\n                    Streaming Protocol (RTSP)\", RFC 4567, July 2006.\n\
    \   [RFC4568]        Andreasen, F., Baugher, M., and D. Wing, \"Session\n    \
    \                Description Protocol (SDP) Security Descriptions for\n      \
    \              Media Streams\", RFC 4568, July 2006.\n   [RFC4597]        Even,\
    \ R. and N. Ismail, \"Conferencing Scenarios\",\n                    RFC 4597,\
    \ August 2006.\n   [RFC4650]        Euchner, M., \"HMAC-Authenticated Diffie-Hellman\
    \ for\n                    Multimedia Internet KEYing (MIKEY)\", RFC 4650,\n \
    \                   September 2006.\n   [RFC4738]        Ignjatic, D., Dondeti,\
    \ L., Audet, F., and P. Lin,\n                    \"MIKEY-RSA-R: An Additional\
    \ Mode of Key Distribution\n                    in Multimedia Internet KEYing\
    \ (MIKEY)\", RFC 4738,\n                    November 2006.\n   [RFC4771]     \
    \   Lehtovirta, V., Naslund, M., and K. Norrman,\n                    \"Integrity\
    \ Transform Carrying Roll-Over Counter for\n                    the Secure Real-time\
    \ Transport Protocol (SRTP)\",\n                    RFC 4771, January 2007.\n\
    \   [RFC4909]        Dondeti, L., Castleford, D., and F. Hartung,\n          \
    \          \"Multimedia Internet KEYing (MIKEY) General\n                    Extension\
    \ Payload for Open Mobile Alliance BCAST\n                    LTKM/STKM Transport\"\
    , RFC 4909, June 2007.\n   [RFC4949]        Shirey, R., \"Internet Security Glossary,\
    \ Version 2\",\n                    RFC 4949, August 2007.\n   [RFC5027]     \
    \   Andreasen, F. and D. Wing, \"Security Preconditions\n                    for\
    \ Session Description Protocol (SDP) Media\n                    Streams\", RFC\
    \ 5027, October 2007.\n   [RFC5125]        Taylor, T., \"Reclassification of RFC\
    \ 3525 to\n                    Historic\", RFC 5125, February 2008.\n   [SAML_overview]\
    \  Huges, J. and E. Maler, \"Security Assertion Markup\n                    Language\
    \ (SAML) 2.0 Technical Overview, Working\n                    Draft\", 2005.\n\
    \   [SIP-MEDIA]      Wing, D., Fries, S., Tschofenig, H., and F. Audet,\n    \
    \                \"Requirements and Analysis of Media Security\n             \
    \       Management Protocols\", Work in Progress, June 2008.\n   [WING-MMUSIC]\
    \    Raymond, R. and D. Wing, \"Security Descriptions\n                    Extension\
    \ for Early Media\", Work in Progress,\n                    October 2005.\n  \
    \ [ZIMMERMANN]     Zimmermann, P., Johnston, A., and J. Callas, \"ZRTP:\n    \
    \                Media Path Key Agreement for Secure RTP\", Work in\n        \
    \            Progress, June 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Steffen Fries\n   Siemens Corporate Technology\n   Otto-Hahn-Ring\
    \ 6\n   Munich, Bavaria  81739\n   Germany\n   EMail: steffen.fries@siemens.com\n\
    \   Dragan Ignjatic\n   Polycom\n   3605 Gilmore Way\n   Burnaby, BC  V5G 4X5\n\
    \   Canada\n   EMail: dignjatic@polycom.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
