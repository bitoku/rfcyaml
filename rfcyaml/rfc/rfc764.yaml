- title: __initial_text__
  contents:
  - '                     TELNET PROTOCOL SPECIFICATION

    '
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   The purpose of the TELNET Protocol is to provide a fairly general,\n\
    \   bi-directional, eight-bit byte oriented communications facility.  Its\n  \
    \ primary goal is to allow a standard method of interfacing terminal\n   devices\
    \ and terminal-oriented processes to each other.  It is\n   envisioned that the\
    \ protocol may also be used for terminal-terminal\n   communication (\"linking\"\
    ) and process-process communication\n   (distributed computation).\n"
- title: GENERAL CONSIDERATIONS
  contents:
  - "GENERAL CONSIDERATIONS\n   A TELNET connection is a Transmission Control Protocol\
    \ (TCP)\n   connection used to transmit data with interspersed TELNET control\n\
    \   information.  TCP and the connection establishment procedure are\n   documentented\
    \ in the ARPA Internet Protocol Handbook.\n   The TELNET Protocol is built upon\
    \ three main ideas:  first, the\n   concept of a \"Network Virtual Terminal\"\
    ; second, the principle of\n   negotiated options; and third, a symmetric view\
    \ of terminals and\n   processes.\n   1.  When a TELNET connection is first established,\
    \ each end is\n   assumed to originate and terminate at a \"Network Virtual Terminal\"\
    ,\n   or NVT.  An NVT is an imaginary device which provides a standard,\n   network-wide,\
    \ intermediate representation of a canonical terminal.\n   This eliminates the\
    \ need for \"server\" and \"user\" Hosts* to keep\n   information about the characteristics\
    \ of each other's terminals and\n   terminal handling conventions.  All Hosts,\
    \ both user and server, map\n   their local device characteristics and conventions\
    \ so as to appear to\n   be dealing with an NVT over the network, and each can\
    \ assume a\n   similar mapping by the other party.  The NVT is intended to strike\
    \ a\n   balance between being overly restricted (not providing Hosts a rich\n\
    \   enough vocabulary for mapping into their local character sets), and\n   being\
    \ overly inclusive (penalizing users with modest terminals).\n      *NOTE:  The\
    \ \"user\" Host is the Host to which the physical terminal\n      is normally\
    \ attached, and the \"server\" host is the Host which is\n      normally providing\
    \ some service.  As an alternate point of view,\n      applicable even in terminal-to-terminal\
    \ or process-to-process\n      communications, the \"user\" Host is the Host which\
    \ initiated the\n      communication.\n"
- title: Postel                                                          [Page 1]
  contents:
  - "Postel                                                          [Page 1]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \ 2.  The principle of negotiated options takes cognizance of the fact\n   that\
    \ many sites will wish to provide additional services over and\n   above those\
    \ available within an NVT, and many users will have\n   sophisticated terminals\
    \ and would like to have elegant, rather than\n   minimal, services.  Independent\
    \ of, but structured within, the TELNET\n   Protocol various \"options\" will\
    \ be sanctioned which can be used with\n   the \"DO, DON'T, WILL, WON'T\" structure\
    \ (discussed below) to allow a\n   user and server to agree to use a more elaborate\
    \ (or perhaps just\n   different) set of conventions for their TELNET connection.\
    \  Such\n   options could include changing the character set, the echo mode, the\n\
    \   line width, the page length, etc.\n   The basic strategy for setting up the\
    \ use of options is to have\n   either party (or both) initiate a request that\
    \ some option take\n   effect.  The other party may then either accept or reject\
    \ the\n   request.  If the request is accepted the option immediately takes\n\
    \   effect; if it is rejected the associated aspect of the connection\n   remains\
    \ as specified for an NVT.  Clearly, a party may always refuse\n   a request to\
    \ enable, and must never refuse a request to disable, some\n   option since all\
    \ parties must be prepared to support the NVT.\n   The syntax of option negotiation\
    \ has been set up so that if both\n   parties request an option simultaneously,\
    \ each will see the other's\n   request as the positive acknowledgment of its\
    \ own.\n   3.  The symmetry of the negotiation syntax can potentially lead to\n\
    \   nonterminating acknowledgment loops -- each party seeing the incoming\n  \
    \ commands not as acknowledgments but as new requests which must be\n   acknowledged.\
    \  To prevent such loops, the following rules prevail:\n      a.  Parties may\
    \ only request a change in option status; i.e., a\n          party may not send\
    \ out a \"request\" merely to announce what\n          mode it is in.\n      b.\
    \  If a party receives what appears to be a request to enter some\n          mode\
    \ it is already in, the request should not be acknowledged.\n      c.  Whenever\
    \ one party sends an option command to a second party,\n          whether as a\
    \ request or an acknowledgment, and use of the\n          option will have any\
    \ effect on the processing of the data\n          being sent from the first party\
    \ to the second, then the\n          command must be inserted in the data stream\
    \ at the point where\n          it is desired that it take effect.  (It should\
    \ be noted that\n          some time will elapse between the transmission of a\
    \ request\n          and the receipt of an acknowledgment, which may be negative.\n\
    \          Thus, a site may wish to buffer data, after requesting an\n"
- title: '[Page 2]                                                          Postel'
  contents:
  - "[Page 2]                                                          Postel\f  \
    \        option, until it learns whether the request is accepted or\n        \
    \  rejected, in order to hide the \"uncertainty period\" from the\n          user.)\n\
    \   Option requests are likely to flurry back and forth when a TELNET\n   connection\
    \ is first established, as each party attempts to get the\n   best possible service\
    \ from the other party.  Beyond that, however,\n   options can be used to dynamically\
    \ modify the characteristics of the\n   connection to suit changing local conditions.\
    \  For example, the NVT,\n   as will be explained later, uses a transmission discipline\
    \ well\n   suited to the many \"line at a time\" applications such as BASIC, but\n\
    \   poorly suited to the many \"character at a time\" applications such as\n \
    \  NLS.  A server might elect to devote the extra processor overhead\n   required\
    \ for a \"character at a time\" discipline when it was suitable\n   for the local\
    \ process and would negotiate an appropriate option.\n   However, rather than\
    \ then being permanently burdened with the extra\n   processing overhead, it could\
    \ switch (i.e., negotiate) back to NVT\n   when the more \"taut\" control was\
    \ no longer necessary.\n   It is possible for requests initiated by processes\
    \ to stimulate a\n   nonterminating request loop if the process responds to a\
    \ rejection by\n   merely re-requesting the option.  To prevent such loops from\n\
    \   occurring, rejected requests should not be repeated until something\n   changes.\
    \  Operationally, this can mean the process is running a\n   different program,\
    \ or the user has given another command, or whatever\n   makes sense in the context\
    \ of the given process and the given option.\n   A good rule of thumb is that\
    \ a re-request should only occur as a\n   result of subsequent information from\
    \ the other end of the connection\n   or when demanded by local human intervention.\n\
    \   Option designers should not feel constrained by the somewhat limited\n   syntax\
    \ available for option negotiation.  The intent of the simple\n   syntax is to\
    \ make it easy to have options--since it is\n   correspondingly easy to profess\
    \ ignorance about them.  If some\n   particular option requires a richer negotiation\
    \ structure than\n   possible within \"DO, DON'T, WILL, WON'T\", the proper tack\
    \ is to use\n   \"DO, DON'T, WILL, WON'T\" to establish that both parties understand\n\
    \   the option, and once this is accomplished a more exotic syntax can be\n  \
    \ used freely.  For example, a party might send a request to alter\n   (establish)\
    \ line length.  If it is accepted, then a different syntax\n   can be used for\
    \ actually negotiating the line length--such a\n   \"sub-negotiation\" perhaps\
    \ including fields for minimum allowable,\n   maximum allowable and desired line\
    \ lengths.  The important concept is\n   that such expanded negotiations should\
    \ never begin until some prior\n   (standard) negotiation has established that\
    \ both parties are capable\n   of parsing the expanded syntax.\n"
- title: Postel                                                          [Page 3]
  contents:
  - "Postel                                                          [Page 3]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \ In summary, WILL XXX is sent, by either party, to indicate that\n   party's\
    \ desire (offer) to begin performing option XXX, DO XXX and\n   DON'T XXX being\
    \ its positive and negative acknowledgments; similarly,\n   DO XXX is sent to\
    \ indicate a desire (request) that the other party\n   (i.e., the recipient of\
    \ the DO) begin performing option XXX, WILL XXX\n   and WON'T XXX being the positive\
    \ and negative acknowledgments.  Since\n   the NVT is what is left when no options\
    \ are enabled, the DON'T and\n   WON'T responses are guaranteed to leave the connection\
    \ in a state\n   which both ends can handle.  Thus, all Hosts may implement their\n\
    \   TELNET processes to be totally unaware of options that are not\n   supported,\
    \ simply returning a rejection to (i.e., refusing) any\n   option request that\
    \ cannot be understood.\n   As much as possible, the TELNET protocol has been\
    \ made server-user\n   symmetrical so that it easily and naturally covers the\
    \ user-user\n   (linking) and server-server (cooperating processes) cases.  It\
    \ is\n   hoped, but not absolutely required, that options will further this\n\
    \   intent.  In any case, it is explicitly acknowledged that symmetry is\n   an\
    \ operating principle rather than an ironclad rule.\n   A companion document,\
    \ \"TELNET Option Specifications,\" should be\n   consulted for information about\
    \ the procedure for establishing new\n   options.  That document, as well as descriptions\
    \ of all currently\n   defined options, is contained in the TELNET section of\
    \ the ARPA\n   Internet Protocol Handbook.\n"
- title: THE NETWORK VIRTUAL TERMINAL
  contents:
  - "THE NETWORK VIRTUAL TERMINAL\n   The Network Virtual Terminal (NVT) is a bi-directional\
    \ character\n   device.  The NVT has a printer and a keyboard.  The printer responds\n\
    \   to incoming data and the keyboard produces outgoing data which is\n   sent\
    \ over the TELNET connection and, if \"echoes\" are desired, to the\n   NVT's\
    \ printer as well.  \"Echoes\" will not be expected to traverse the\n   network\
    \ (although options exist to enable a \"remote\" echoing mode of\n   operation,\
    \ no Host is required to implement this option).  The code\n   set is seven-bit\
    \ USASCII in an eight-bit field, except as modified\n   herein.  Any code conversion\
    \ and timing considerations are local\n   problems and do not affect the NVT.\n\
    \   TRANSMISSION OF DATA\n      Although a TELNET connection through the network\
    \ is intrinsically\n      full duplex, the NVT is to be viewed as a half-duplex\
    \ device\n      operating in a line-buffered mode.  That is, unless and until\n"
- title: '[Page 4]                                                          Postel'
  contents:
  - "[Page 4]                                                          Postel\f  \
    \    options are negotiated to the contrary, the following default\n      conditions\
    \ pertain to the transmission of data over the TELNET\n      connection:\n   \
    \      1)  Insofar as the availability of local buffer space permits,\n      \
    \   data should be accumulated in the Host where it is generated\n         until\
    \ a complete line of data is ready for transmission, or\n         until some locally-defined\
    \ explicit signal to transmit occurs.\n         This signal could be generated\
    \ either by a process or by a\n         human user.\n         The motivation for\
    \ this rule is the high cost, to some Hosts,\n         of processing network input\
    \ interrupts, coupled with the\n         default NVT specification that \"echoes\"\
    \ do not traverse the\n         network.  Thus, it is reasonable to buffer some\
    \ amount of data\n         at its source.  Many systems take some processing action\
    \ at the\n         end of each input line (even line printers or card punches\n\
    \         frequently tend to work this way), so the transmission should\n    \
    \     be triggered at the end of a line.  On the other hand, a user\n        \
    \ or process may sometimes find it necessary or desirable to\n         provide\
    \ data which does not terminate at the end of a line;\n         therefore implementers\
    \ are cautioned to provide methods of\n         locally signaling that all buffered\
    \ data should be transmitted\n         immediately.\n         2)  When a process\
    \ has completed sending data to an NVT printer\n         and has no queued input\
    \ from the NVT keyboard for further\n         processing (i.e., when a process\
    \ at one end of a TELNET\n         connection cannot proceed without input from\
    \ the other end),\n         the process must transmit the TELNET Go Ahead (GA)\
    \ command.\n         This rule is not intended to require that the TELNET GA command\n\
    \         be sent from a terminal at the end of each line, since server\n    \
    \     Hosts do not normally require a special signal (in addition to\n       \
    \  end-of-line or other locally-defined characters) in order to\n         commence\
    \ processing.  Rather, the TELNET GA is designed to help\n         a user's local\
    \ Host operate a physically half duplex terminal\n         which has a \"lockable\"\
    \ keyboard such as the IBM 2741.  A\n         description of this type of terminal\
    \ may help to explain the\n         proper use of the GA command.\n         The\
    \ terminal-computer connection is always under control of\n         either the\
    \ user or the computer.  Neither can unilaterally\n         seize control from\
    \ the other; rather the controlling end must\n         relinguish its control\
    \ explicitly.  At the terminal end, the\n         hardware is constructed so as\
    \ to relinquish control each time\n"
- title: Postel                                                          [Page 5]
  contents:
  - "Postel                                                          [Page 5]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \       that a \"line\" is terminated (i.e., when the \"New Line\" key is\n  \
    \       typed by the user).  When this occurs, the attached (local)\n        \
    \ computer processes the input data, decides if output should be\n         generated,\
    \ and if not returns control to the terminal.  If\n         output should be generated,\
    \ control is retained by the computer\n         until all output has been transmitted.\n\
    \         The difficulties of using this type of terminal through the\n      \
    \   network should be obvious.  The \"local\" computer is no longer\n        \
    \ able to decide whether to retain control after seeing an\n         end-of-line\
    \ signal or not; this decision can only be made by\n         the \"remote\" computer\
    \ which is processing the data.  Therefore,\n         the TELNET GA command provides\
    \ a mechanism whereby the \"remote\"\n         (server) computer can signal the\
    \ \"local\" (user) computer that\n         it is time to pass control to the user\
    \ of the terminal.  It\n         should be transmitted at those times, and only\
    \ at those times,\n         when the user should be given control of the terminal.\
    \  Note\n         that premature transmission of the GA command may result in\
    \ the\n         blocking of output, since the user is likely to assume that the\n\
    \         transmitting system has paused, and therefore he will fail to\n    \
    \     turn the line around manually.\n      The foregoing, of course, does not\
    \ apply to the user-to-server\n      direction of communication.  In this direction,\
    \ GAs may be sent at\n      any time, but need not ever be sent.  Also, if the\
    \ TELNET\n      connection is being used for process-to-process communication,\
    \ GAs\n      need not be sent in either direction.  Finally, for\n      terminal-to-terminal\
    \ communication, GAs may be required in\n      neither, one, or both directions.\
    \  If a Host plans to support\n      terminal-to-terminal communication it is\
    \ suggested that the Host\n      provide the user with a means of manually signaling\
    \ that it is\n      time for a GA to be sent over the TELNET connection; this,\n\
    \      however, is not a requirement on the implementer of a TELNET\n      process.\n\
    \   STANDARD REPRESENTATION OF CONTROL FUNCTIONS\n      As stated in the Introduction\
    \ to this document, the primary goal\n      of the TELNET protocol is the provision\
    \ of a standard interfacing\n      of terminal devices and terminal-oriented processes\
    \ through the\n      network.  Early experiences with this type of interconnection\
    \ have\n      shown that certain functions are implemented by most servers, but\n\
    \      that the methods of invoking these functions differ widely.  For a\n  \
    \    human user who interacts with several server systems, these\n      differences\
    \ are highly frustrating.  TELNET, therefore, defines a\n      standard representation\
    \ for five of these functions, as described\n"
- title: '[Page 6]                                                          Postel'
  contents:
  - "[Page 6]                                                          Postel\f  \
    \    below.  These standard representations have standard, but not\n      required,\
    \ meanings (with the exception that the IP function may be\n      required by\
    \ other protocols which use TELNET); that is, a system\n      which does not provide\
    \ the function to local users need not\n      provide it to network users and\
    \ may treat the standard\n      representation for the function as a No-operation.\
    \  On the other\n      hand, a system which does provide the function to local\
    \ is obliged\n      to provide the same function as a network user who transmits\
    \ the\n      standard representation for the function.\n      Interrupt Process\
    \ (IP)\n         Many systems provide a function which suspends, interrupts,\n\
    \         aborts, or terminates the operation of a user process.  This\n     \
    \    function is frequently used when a user believes his process is\n       \
    \  in an unending loop, or when an unwanted process has been\n         inadvertently\
    \ activated.  IP is the standard representation for\n         invoking this function.\
    \  It should be noted by implementers\n         that IP may be required by other\
    \ protocols which use TELNET,\n         and therefore should be implemented if\
    \ these other protocols\n         are to be supported.\n      Abort Output (AO)\n\
    \         Many systems provide a function which allows a process, which\n    \
    \     is generating output, to run to completion (or to reach the\n         same\
    \ stopping point it would reach if running to completion)\n         but without\
    \ sending the output to the user's terminal.\n         Further, this function\
    \ typically clears any output already\n         produced but not yet actually\
    \ printed (or displayed) on the\n         user's terminal.  AO is the standard\
    \ representation for\n         invoking this function.  For example, some subsystem\
    \ might\n         normally accept a user's command, send a long text string to\n\
    \         the user's terminal in response, and finally signal readiness\n    \
    \     to accept the next command by sending a \"prompt\" character\n         (preceded\
    \ by <CR><LF>) to the user's terminal.  If the AO were\n         received during\
    \ the transmission of the text string, a\n         reasonable implementation would\
    \ be to suppress the remainder of\n         the text string, but transmit the\
    \ prompt character and the\n         preceding <CR><LF>.  (This is possibly in\
    \ distinction to the\n         action which might be taken if an IP were received;\
    \ the IP\n         might cause suppression of the text string and an exit from\
    \ the\n         subsystem.)\n         It should be noted, by systems which provide\
    \ this function,\n         that there may be buffers external to the system (in\
    \ the\n"
- title: Postel                                                          [Page 7]
  contents:
  - "Postel                                                          [Page 7]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \       network and the user's \"local\" Host) which should be cleared;\n    \
    \     the appropriate way to do this is to transmit the \"Synch\"\n         signal\
    \ described below.\n      Are You There (AYT)\n         Many systems provide a\
    \ function which provides the user with\n         some visible (e.g., printable)\
    \ evidence that the system is\n         still up and running.  This function may\
    \ be invoked by the user\n         when the system is unexpectedly \"silent\"\
    \ for a long time,\n         because of the unanticipated (by the user) length\
    \ of a\n         computation, an unusually heavy system load, etc.  AYT is the\n\
    \         standard representation for invoking this function.\n      Erase Character\
    \ (EC)\n         Many systems provide a function which deletes the last\n    \
    \     preceding undeleted character or \"print position\"* from the\n        \
    \ stream of data being supplied by the user.  This function is\n         typically\
    \ used to edit keyboard input when typing mistakes are\n         made.  EC is\
    \ the standard representation for invoking this\n         function.\n        \
    \    *NOTE:  A \"print position\" may contain several characters\n           \
    \ which are the result of overstrikes, or of sequences such as\n            <char1>\
    \ BS <char2>...\n      Erase Line (EL)\n         Many systems provide a function\
    \ which deletes all the data in\n         the current \"line\" of input.  This\
    \ function is typically used\n         to edit keyboard input.  EL is the standard\
    \ representation for\n         invoking this function.\n   THE TELNET \"SYNCH\"\
    \ SIGNAL\n      Most time-sharing systems provide mechanisms which allow a\n \
    \     terminal user to regain control of a \"runaway\" process; the IP and\n \
    \     AO functions described above are examples of these mechanisms.\n      Such\
    \ systems, when used locally, have access to all of the signals\n      supplied\
    \ by the user, whether these are normal characters or\n      special \"out of\
    \ band\" signals such as those supplied by the\n      teletype \"BREAK\" key or\
    \ the IBM 2741 \"ATTN\" key.  This is not\n      necessarily true when terminals\
    \ are connected to the system\n"
- title: '[Page 8]                                                          Postel'
  contents:
  - "[Page 8]                                                          Postel\f  \
    \    through the network; the network's flow control mechanisms may\n      cause\
    \ such a signal to be buffered elsewhere, for example in the\n      user's Host.\n\
    \      To counter this problem, the TELNET \"Synch\" mechanism is\n      introduced.\
    \  A Synch signal consists of a TCP Urgent notification,\n      coupled with the\
    \ TELNET command DATA MARK.  The Urgent\n      notification, which is not subject\
    \ to the flow control pertaining\n      to the TELNET connection, is used to invoke\
    \ special handling of\n      the data stream by the process which receives it.\
    \  In this mode,\n      the data stream is immediately scanned for \"interesting\"\
    \ signals\n      as defined below, discarding intervening data.  The TELNET command\n\
    \      DATA MARK (DM) is the synchronizing mark in the data stream which\n   \
    \   indicates that any special signal has already occurred and the\n      recipient\
    \ can return to normal processing of the data stream.\n         The Synch is sent\
    \ via the TCP send operation with the Urgent\n         flag set and the DM as\
    \ the last (or only) data octet.\n      When several Synchs are sent in rapid\
    \ succession, the Urgent\n      notifications may be merged.  It is not possible\
    \ to count Urgents\n      since the number received will be less than or equal\
    \ the number\n      sent.  When in normal mode a DM is a no operation, when in\
    \ urgent\n      mode it signals the end of the urgent processing (this should\n\
    \      correspond with the end of Urgent pointer indicated by TCP).\n        \
    \ If TCP indicates the end of Urgent data before the DM is found,\n         TELNET\
    \ should continue the special handling of the data stream\n         until the\
    \ DM is found.\n      \"Interesting\" signals are defined to be:  the TELNET standard\n\
    \      representations of IP, AO, and AYT (but not EC or EL); the local\n    \
    \  analogs of these standard representations (if any); all other\n      TELNET\
    \ commands; other site-defined signals which can be acted on\n      without delaying\
    \ the scan of the data stream.\n      Since one effect of the SYNCH mechanism\
    \ is the discarding of\n      essentially all characters (except TELNET commands)\
    \ between the\n      sender of the Synch and its recipient, this mechanism is\
    \ specified\n      as the standard way to clear the data path when that is desired.\n\
    \      For example, if a user at a terminal causes an AO to be\n      transmitted,\
    \ the server which receives the AO (if it provides that\n      function at all)\
    \ should return a Synch to the user.\n      Finally, just as the TCP Urgent notification\
    \ is needed at the\n"
- title: Postel                                                          [Page 9]
  contents:
  - "Postel                                                          [Page 9]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \    TELNET level as an out-of-band signal, so other protocols which\n      make\
    \ use of TELNET may require a TELNET command which can be\n      viewed as an\
    \ out-of-band signal at a different level.\n      By convention the sequence [IP,\
    \ Synch] is to be used as such a\n      signal.  For example, suppose that some\
    \ other protocol, which uses\n      TELNET, defines the character string STOP\
    \ analogously to the\n      TELNET command AO.  Imagine that a user of this protocol\
    \ wishes a\n      server to process the STOP string, but the connection is blocked\n\
    \      because the server is processing other commands.  The user should\n   \
    \   instruct his system to:\n         1. Send the TELNET IP character;\n     \
    \    2. Send the TELNET SYNC sequence, that is:\n            Send the Data Mark\
    \ (DM) as the only character\n            in a TCP urgent mode send operation.\n\
    \         3. Send the character string STOP; and\n         4. Send the other protocol's\
    \ analog of the TELNET DM, if any.\n      The user (or process acting on his behalf)\
    \ must transmit the\n      TELNET SYNCH sequence of step 2 above to ensure that\
    \ the TELNET IP\n      gets through to the server's TELNET interpreter.\n    \
    \     The Urgent should wake up the TELNET process, the IP should\n         wake\
    \ up the next higher level process.\n   THE NVT PRINTER AND KEYBOARD\n      The\
    \ NVT printer has an unspecified carriage width and page length\n      and can\
    \ produce representations of all 95 USASCII graphics (codes\n      32 through\
    \ 126).  Of the 33 USASCII control codes (0 through 31\n      and 127), and the\
    \ 128 uncovered codes (128 through 255), the\n      following have specified meaning\
    \ to the NVT printer:\n         NAME                  CODE         MEANING\n \
    \        NULL (NUL)              0   A no operation\n         Line Feed (LF) \
    \        10   Moves the printer to the\n         Carriage Return (CR)   13   Moves\
    \ the printer to the left\n"
- title: '[Page 10]                                                         Postel'
  contents:
  - "[Page 10]                                                         Postel\f  \
    \       In addition, the following codes shall have defined, but not\n       \
    \  required, effects on the NVT printer.  Neither end of a TELNET\n         connection\
    \ may assume that the other party will take, or will\n         have taken, any\
    \ particular action upon receipt or transmission\n         of these:\n       \
    \  BELL (BEL)              7   Produces an audible or\n         Back Space (BS)\
    \         8   Moves the print head one\n         Horizontal Tab (HT)     9   Moves\
    \ the printer to the\n         Vertical Tab (VT)       11  Moves the printer to\
    \ the\n         Form Feed (FF)          12  Moves the printer to the top\n   \
    \   All remaining codes do not cause the NVT printer to take any\n      action.\n\
    \      The sequence \"CR LF\", as defined, will cause the NVT to be\n      positioned\
    \ at the left margin of the next print line (as would,\n      for example, the\
    \ sequence \"LF CR\").  However, many systems and\n      terminals do not treat\
    \ CR and LF independently, and will have to\n      go to some effort to simulate\
    \ their effect.  (For example, some\n      terminals do not have a CR independent\
    \ of the LF, but on such\n      terminals it may be possible to simulate a CR\
    \ by backspacing.)\n      Therefore, the sequence \"CR LF\" must be treated as\
    \ a single \"new\n      line\" character and used whenever their combined action\
    \ is\n      intended; the sequence \"CR NUL\" must be used where a carriage\n\
    \      return alone is actually desired; and the CR character must be\n      avoided\
    \ in other contexts.  This rule gives assurance to systems\n      which must decide\
    \ whether to perform a \"new line\" function or a\n      multiple-backspace that\
    \ the TELNET stream contains a character\n      following a CR that will allow\
    \ a rational decision.\n"
- title: Postel                                                         [Page 11]
  contents:
  - "Postel                                                         [Page 11]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n  \
    \       Note that \"CR LF\" or \"CR NUL\" is required in both directions\n   \
    \      (in the default ASCII mode), to preserve the symmetry of the\n        \
    \ NVT model.  Even though it may be known in some situations\n         (e.g.,\
    \ with remote echo and suppress go ahead options in\n         effect) that characters\
    \ are not being sent to an actual\n         printer, none the less, for the sake\
    \ of consistency, the\n         protocol requires that a NUL be inserted following\
    \ a CR not\n         followed by a LF in the data stream.  The converse of this\
    \ is\n         that a NUL received in the data stream after a CR (in the\n   \
    \      absence of options negotiations which explicitly specify\n         otherwise)\
    \ should be stripped out prior to applying the NVT to\n         local character\
    \ set mapping.\n      The NVT keyboard has keys, or key combinations, or key sequences,\n\
    \      for generating all 128 USASCII codes.  Note that although many\n      have\
    \ no effect on the NVT printer, the NVT keyboard is capable of\n      generating\
    \ them.\n      In addition to these codes, the NVT keyboard shall be capable of\n\
    \      generating the following additional codes which, except as noted,\n   \
    \   have defined, but not reguired, meanings.  The actual code\n      assignments\
    \ for these \"characters\" are in the TELNET Command\n      section, because they\
    \ are viewed as being, in some sense, generic\n      and should be available even\
    \ when the data stream is interpreted\n      as being some other character set.\n\
    \      Synch\n         This key allows the user to clear his data path to the\
    \ other\n         party.  The activation of this key causes a DM (see command\n\
    \         section) to be sent in the data stream and a TCP Urgent\n         notification\
    \ is associated with it.  The pair DM-Urgent is to\n         have required meaning\
    \ as defined previously.\n      Break (BRK)\n         This code is provided because\
    \ it is a signal outside the\n         USASCII set which is currently given local\
    \ meaning within many\n         systems.  It is intended to indicate that the\
    \ Break Key or the\n         Attention Key was hit.  Note, however, that this\
    \ is intended to\n         provide a 129th code for systems which require it,\
    \ not as a\n         synonym for the IP standard representation.\n"
- title: '[Page 12]                                                         Postel'
  contents:
  - "[Page 12]                                                         Postel\f  \
    \    Interrupt Process (IP)\n         Suspend, interrupt, abort or terminate the\
    \ process to which the\n         NVT is connected.  Also, part of the out-of-band\
    \ signal for\n         other protocols which use TELNET.\n      Abort Output (AO)\n\
    \         Allow the current process to (appear to) run to completion, but\n  \
    \       do not send its output to the user.  Also, send a Synch to the\n     \
    \    user.\n      Are You There (AYT)\n         Send back to the NVT some visible\
    \ (i.e., printable) evidence\n         that the AYT was received.\n      Erase\
    \ Character (EC)\n         The recipient should delete the last preceding undeleted\n\
    \         character or \"print position\" from the data stream.\n      Erase Line\
    \ (EL)\n         The recipient should delete characters from the data stream\n\
    \         back to, but not including, the last \"CR LF\" sequence sent over\n\
    \         the TELNET connection.\n      The spirit of these \"extra\" keys, and\
    \ also the printer format\n      effectors, is that they should represent a natural\
    \ extension of\n      the mapping that already must be done from \"NVT\" into\
    \ \"local\".\n      Just as the NVT data byte 104 should be mapped into whatever\
    \ the\n      local code for \"uppercase D\" is, so the EC character should be\n\
    \      mapped into whatever the local \"Erase Character\" function is.\n     \
    \ Further, just as the mapping for 174 is somewhat arbitrary in an\n      environment\
    \ that has no \"vertical bar\" character, the EL character\n      may have a somewhat\
    \ arbitrary mapping (or none at all) if there is\n      no local \"Erase Line\"\
    \ facility.  Similarly for format effectors:\n      if the terminal actually does\
    \ have a \"Vertical tab\", then the\n      mapping for VT is obvious, and only\
    \ when the terminal does not\n      have a vertical tab should the effect of VT\
    \ be unpredictable.\n"
- title: Postel                                                         [Page 13]
  contents:
  - "Postel                                                         [Page 13]\f"
- title: June 1980                                               RFC 764, IEN 148
  contents:
  - 'June 1980                                               RFC 764, IEN 148

    '
- title: Telnet Protocol Specification
  contents:
  - "Telnet Protocol Specification                                           \n"
- title: TELNET COMMAND STRUCTURE
  contents:
  - "TELNET COMMAND STRUCTURE\n   All TELNET commands consist of at least a two byte\
    \ sequence:  the\n   \"Interpret as Command\" (IAC) escape character followed\
    \ by the code\n   for the command.  The commands dealing with option negotiation\
    \ are\n   three byte sequences, the third byte being the code for the option\n\
    \   referenced.  This format was chosen so that as more comprehensive use\n  \
    \ of the \"data space\" is made -- by negotiations from the basic NVT, of\n  \
    \ course -- collisions of data bytes with reserved command values will\n   be\
    \ minimized, all such collisions requiring the inconvenience, and\n   inefficiency,\
    \ of \"escaping\" the data bytes into the stream.  With the\n   current set-up,\
    \ only the IAC need be doubled to be sent as data, and\n   the other 255 codes\
    \ may be passed transparently.\n   The following are the defined TELNET commands.\
    \  Note that these codes\n   and code sequences have the indicated meaning only\
    \ when immediately\n   preceded by an IAC.\n      NAME               CODE    \
    \          MEANING\n      SE                  240 End of subnegotiation parameters\n\
    \      NOP                 241 No operation\n      Data Mark           242 The\
    \ data stream portion of a Synch\n                              This should always\
    \ be accompanied\n                              by a TCP Urgent notification.\n\
    \      Break               243 NVT character BRK\n      Interrupt Process   244\
    \ The function IP\n      Abort output        245 The function AO\n      Are You\
    \ There       246 The function AYT\n      Erase character     247 The function\
    \ EC\n      Erase Line          248 The function EL\n      Go ahead          \
    \  249 The GA signal\n      SB                  250 Indicates that what follows\
    \ is\n                              subnegotiation of the indicated\n        \
    \                      option\n      WILL (option code)  251 Indicates the desire\
    \ to begin\n                              performing, or confirmation that\n \
    \                             you are now performing, the\n                  \
    \            indicated option\n      WON't (option code) 252 Indicates the refusal\
    \ to perform,\n                              or continue performing, the\n   \
    \                           indicated option.\n      DO (option code)    253 Indicates\
    \ the request that the\n                              other party perform, or\n\
    \                              confirmation that you are expecting\n         \
    \                     the other party to perform, the\n"
- title: '[Page 14]                                                         Postel'
  contents:
  - "[Page 14]                                                         Postel\f  \
    \                            indicated option.\n      DON'T (option code) 254\
    \ Indicates the demand that the\n                              other party stop\
    \ performing,\n                              or confirmation that you are no\n\
    \                              longer expecting the other party\n            \
    \                  to perform, the indicated option.\n      IAC              \
    \   255 Data Byte 255.\n"
- title: CONNECTION ESTABLISHMENT
  contents:
  - "CONNECTION ESTABLISHMENT\n   The TELNET TCP connection is established between\
    \ the user's port U\n   and the server's port L.  The server listens on its well\
    \ known port L\n   for such connections.  Since a TCP connection is full duplex\
    \ and\n   identified by the pair of ports, the server can engage in many\n   simultaneous\
    \ connections involving it's port L and different user\n   ports U.\n   Port Assignment\n\
    \      When used for remote user access to service hosts (i.e., remote\n     \
    \ terminal access) this protocol is assigned server port 23 (27\n      octal).\
    \  That is L=23.\n"
