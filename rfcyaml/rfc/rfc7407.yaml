- contents:
  - '                A YANG Data Model for SNMP Configuration

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a collection of YANG definitions for\n   configuring
    SNMP engines.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7407.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Data Model ......................................................3\n      2.1.
    Tree Diagrams ..............................................4\n      2.2. General
    Considerations .....................................4\n      2.3. Common Definitions
    .........................................4\n      2.4. Engine Configuration .......................................5\n
    \     2.5. Target Configuration .......................................6\n      2.6.
    Notification Configuration .................................7\n      2.7. Proxy
    Configuration ........................................8\n      2.8. Community
    Configuration ....................................8\n      2.9. View-Based Access
    Control Model Configuration ..............9\n      2.10. User-Based Security Model
    Configuration ..................10\n      2.11. Transport Security Model Configuration
    ...................11\n      2.12. Transport Layer Security Transport Model Configuration
    ...12\n      2.13. Secure Shell Transport Model Configuration ...............13\n
    \  3. Implementation Guidelines ......................................14\n      3.1.
    Supporting read-only SNMP Access ..........................15\n      3.2. Supporting
    read-write SNMP Access .........................15\n   4. Definitions ....................................................16\n
    \     4.1. Module 'ietf-x509-cert-to-name' ...........................16\n      4.2.
    Module 'ietf-snmp' ........................................22\n      4.3. Submodule
    'ietf-snmp-common' ..............................24\n      4.4. Submodule 'ietf-snmp-engine'
    ..............................28\n      4.5. Submodule 'ietf-snmp-target' ..............................32\n
    \     4.6. Submodule 'ietf-snmp-notification' ........................36\n      4.7.
    Submodule 'ietf-snmp-proxy' ...............................41\n      4.8. Submodule
    'ietf-snmp-community' ...........................44\n      4.9. Submodule 'ietf-snmp-vacm'
    ................................49\n      4.10. Submodule 'ietf-snmp-usm' ................................55\n
    \     4.11. Submodule 'ietf-snmp-tsm' ................................60\n      4.12.
    Submodule 'ietf-snmp-tls' ................................63\n      4.13. Submodule
    'ietf-snmp-ssh' ................................68\n   5. IANA Considerations
    ............................................71\n   6. Security Considerations
    ........................................72\n   7. References .....................................................75\n
    \     7.1. Normative References ......................................75\n      7.2.
    Informative References ....................................75\n   Appendix A.
    \ Example Configurations ...............................78\n     A.1.  Engine
    Configuration Example ..............................78\n     A.2.  Community Configuration
    Example ...........................78\n     A.3.  User-Based Security Model Configuration
    Example ...........79\n     A.4.  Target and Notification Configuration Example
    .............81\n     A.5.  Proxy Configuration Example ...............................82\n
    \    A.6.  View-Based Access Control Model Configuration Example .....85\n     A.7.
    \ Transport Layer Security Transport Model Configuration\n           Example ...................................................87\n
    \  Acknowledgments ...................................................88\n   Authors'
    Addresses ................................................88\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a YANG [RFC6020] data model for the\n
    \  configuration of SNMP engines.  The configuration model is consistent\n   with
    the MIB modules defined in [RFC3411], [RFC3412], [RFC3413],\n   [RFC3414], [RFC3415],
    [RFC3417], [RFC3418], [RFC3419], [RFC3584],\n   [RFC3826], [RFC5591], [RFC5592],
    and [RFC6353] but takes advantage of\n   YANG's ability to define hierarchical
    configuration data models.\n   The configuration data model in particular has
    been designed for SNMP\n   deployments where SNMP runs in read-only mode and the
    Network\n   Configuration Protocol (NETCONF) is used to configure the SNMP agent.\n
    \  Nevertheless, the data model allows implementations that support\n   write
    access both via SNMP and NETCONF in order to interwork with\n   SNMP management
    applications manipulating SNMP agent configuration\n   using SNMP.  Further details
    can be found in Section 3.\n   The YANG data model focuses on configuration.  Operational
    state\n   objects are not explicitly modeled.  The operational state of an SNMP\n
    \  agent can be accessed either directly via SNMP or, alternatively, via\n   NETCONF
    using the read-only translation of the relevant SNMP MIB\n   modules into YANG
    modules [RFC6643].\n   This document also defines a YANG data model for mapping
    an X.509\n   certificate to a name.\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in BCP\n   14 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Data Model\n   In order to preserve the modularity of SNMP, the YANG configuration\n
    \  data model is organized in a set of YANG submodules, all sharing the\n   same
    module namespace.  This allows adding configuration support for\n   additional
    SNMP features while keeping the number of namespaces that\n   have to be dealt
    with down to a minimum.\n"
  - contents:
    - "2.1.  Tree Diagrams\n   A simplified graphical representation of the data model
      is used in\n   this document.  The meaning of the symbols in these diagrams
      is as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n   o
      \ Abbreviations before data node names: \"rw\" means configuration\n      (read-write),
      and \"ro\" means state data (read-only).\n   o  Symbols after data node names:
      \"?\" means an optional node, \"!\"\n      means a presence container, and \"*\"
      denotes a list and leaf-list.\n   o  Parentheses enclose choice and case nodes,
      and case nodes are also\n      marked with a colon (\":\").\n   o  Ellipsis
      (\"...\") stands for contents of subtrees that are not\n      shown.\n"
    title: 2.1.  Tree Diagrams
  - contents:
    - "2.2.  General Considerations\n   Most YANG nodes are mapped 1-1 to the corresponding
      MIB object.  The\n   \"reference\" statement is used to indicate which corresponding
      MIB\n   object the YANG node is mapped to.  When there is not a simple 1-1\n
      \  mapping, the \"description\" statement explains the mapping.\n   The persistency
      models in SNMP and NETCONF are quite different.  In\n   NETCONF, the persistency
      is defined by the datastore, whereas in\n   SNMP, it is defined either explicitly
      in the data model or on a row-\n   by-row basis using the Textual Convention
      \"StorageType\".  Thus, in\n   the YANG model defined here, the \"StorageType\"
      columns are not\n   present.  For implementation guidelines, see Section 3.\n
      \  In SNMP, row creation and deletion are controlled using the Textual\n   Convention
      \"RowStatus\".  In NETCONF, creation and deletion are\n   handled by the protocol,
      not in the data model.  Thus, in the YANG\n   model defined here, the \"RowStatus\"
      columns are not present.\n"
    title: 2.2.  General Considerations
  - contents:
    - "2.3.  Common Definitions\n   The submodule \"ietf-snmp-common\" defines a set
      of common typedefs and\n   the top-level container \"snmp\".  All configuration
      parameters defined\n   in the other submodules are organized under this top-level
      container.\n"
    title: 2.3.  Common Definitions
  - contents:
    - "2.4.  Engine Configuration\n   The submodule \"ietf-snmp-engine\", which defines
      configuration\n   parameters that are specific to SNMP engines, has the following\n
      \  structure:\n      +--rw snmp\n         +--rw engine\n            +--rw enabled?
      \              boolean\n            +--rw listen* [name]\n            |  +--rw
      name    snmp:identifier\n            |  +--rw (transport)\n            |     +--:(udp)\n
      \           |        +--rw udp\n            |           +--rw ip      inet:ip-address\n
      \           |           +--rw port?   inet:port-number\n            +--rw version\n
      \           |  +--rw v1?    empty\n            |  +--rw v2c?   empty\n            |
      \ +--rw v3?    empty\n            +--rw engine-id?             snmp:engine-id\n
      \           +--rw enable-authen-traps?   boolean\n   The leaf \"/snmp/engine/enabled\"
      can be used to enable/disable an SNMP\n   engine.\n   The list \"/snmp/engine/listen\"
      provides configuration of the\n   transport endpoints the engine is listening
      to.  In this submodule,\n   SNMP over UDP is defined.  The Secure Shell (SSH)
      Protocol, Transport\n   Layer Security (TLS), and Datagram Transport Layer Security
      (DTLS)\n   are also supported, defined in \"ietf-snmp-ssh\" (Section 2.13) and\n
      \  \"ietf-snmp-tls\" (Section 2.12), respectively.  The \"transport\" choice\n
      \  is expected to be augmented for other transports.\n   The \"/snmp/engine/version\"
      container can be used to enable/disable\n   the different message processing
      models [RFC3411].\n"
    title: 2.4.  Engine Configuration
  - contents:
    - "2.5.  Target Configuration\n   The submodule \"ietf-snmp-target\", which defines
      configuration\n   parameters that correspond to the objects in SNMP-TARGET-MIB,
      has the\n   following structure:\n      +--rw snmp\n         +--rw target* [name]\n
      \        |  +--rw name       snmp:identifier\n         |  +--rw (transport)\n
      \        |  |  +--:(udp)\n         |  |     +--rw udp\n         |  |        +--rw
      ip               inet:ip-address\n         |  |        +--rw port?            inet:port-number\n
      \        |  |        +--rw prefix-length?   uint8\n         |  +--rw tag*       snmp:identifier\n
      \        |  +--rw timeout?   uint32\n         |  +--rw retries?   uint8\n         |
      \ +--rw target-params  snmp:identifier\n         +--rw target-params* [name]\n
      \           +--rw name    snmp:identifier\n            +--rw (params)?\n   An
      entry in the list \"/snmp/target\" corresponds to an\n   \"snmpTargetAddrEntry\".\n
      \  The \"snmpTargetAddrTDomain\" and \"snmpTargetAddrTAddress\" objects are\n
      \  mapped to transport-specific YANG nodes.  Each transport is\n   configured
      as a separate case in the \"transport\" choice.  In this\n   submodule, SNMP
      over UDP is defined.  TLS and DTLS are also\n   supported, defined in \"ietf-snmp-tls\"
      (Section 2.12).  The\n   \"transport\" choice is expected to be augmented for
      other transports.\n   An entry in the list \"/snmp/target-params\" corresponds
      to an\n   \"snmpTargetParamsEntry\".  This list contains a choice \"params\",
      which\n   is augmented by submodules specific to the security model, currently,\n
      \  \"ietf-snmp-community\" (Section 2.8), \"ietf-snmp-usm\" (Section 2.10),\n
      \  and \"ietf-snmp-tls\" (Section 2.12).\n"
    title: 2.5.  Target Configuration
  - contents:
    - "2.6.  Notification Configuration\n   The submodule \"ietf-snmp-notification\",
      which defines configuration\n   parameters that correspond to the objects in
      SNMP-NOTIFICATION-MIB,\n   has the following structure:\n      +--rw snmp\n
      \        +--rw notify* [name]\n         |  +--rw name    snmp:identifier\n         |
      \ +--rw tag     snmp:identifier\n         |  +--rw type?   enumeration\n         +--rw
      notify-filter-profile* [name]\n            +--rw name       snmp:identifier\n
      \           +--rw include*   snmp:wildcard-object-identifier\n            +--rw
      exclude*   snmp:wildcard-object-identifier\n   This submodule also augments
      the \"target-params\" list defined in the\n   \"ietf-snmp-target\" submodule
      (Section 2.5) with one leaf:\n      +--rw snmp\n         +--rw target-params*
      [name]\n            ...\n            +--rw notify-filter-profile?   leafref\n
      \  An entry in the list \"/snmp/notify\" corresponds to an\n   \"snmpNotifyEntry\".\n
      \  An entry in the list \"/snmp/notify-filter-profile\" corresponds to an\n
      \  \"snmpNotifyFilterProfileEntry\".  In the MIB, there is a sparse\n   relationship
      between \"snmpTargetParamsTable\" and\n   \"snmpNotifyFilterProfileTable\".
      \ In the YANG model, this sparse\n   relationship is represented with a leafref
      leaf\n   \"notify-filter-profile\" in the \"/snmp/target-params\" list, which\n
      \  refers to an entry in the \"/snmp/notify-filter-profile\" list.\n   The \"snmpNotifyFilterTable\"
      is represented as a list \"filter\" within\n   the \"/snmp/notify-filter-profile\"
      list.\n   This submodule defines the feature \"notification-filter\".  A server\n
      \  implements this feature if it supports SNMP notification filtering\n   [RFC3413].\n"
    title: 2.6.  Notification Configuration
  - contents:
    - "2.7.  Proxy Configuration\n   The submodule \"ietf-snmp-proxy\", which defines
      configuration\n   parameters that correspond to the objects in SNMP-PROXY-MIB,
      has the\n   following structure:\n      +--rw snmp\n         +--rw proxy* [name]\n
      \           +--rw name                    snmp:identifier\n            +--rw
      type                    enumeration\n            +--rw context-engine-id       snmp:engine-id\n
      \           +--rw context-name?           snmp:context-name\n            +--rw
      target-params-in?       snmp:identifier\n            +--rw single-target-out?
      \     snmp:identifier\n            +--rw multiple-target-out?    snmp:identifier\n
      \  An entry in the list \"/snmp/proxy\" corresponds to an\n   \"snmpProxyEntry\".\n
      \  This submodule defines the feature \"proxy\".  A server implements this\n
      \  feature if it can act as an SNMP proxy [RFC3413].\n"
    title: 2.7.  Proxy Configuration
  - contents:
    - "2.8.  Community Configuration\n   The submodule \"ietf-snmp-community\", which
      defines configuration\n   parameters that correspond to the objects in SNMP-COMMUNITY-MIB,
      has\n   the following structure:\n      +--rw snmp\n         +--rw community*
      [index]\n            +--rw index            snmp:identifier\n            +--rw
      (name)?\n            |  +--:(text-name)\n            |  |  +--rw text-name?
      \      string\n            |  +--:(binary-name)\n            |     +--rw binary-name?
      \    binary\n            +--rw security-name    snmp:security-name\n            +--rw
      engine-id?       snmp:engine-id\n            +--rw context?         snmp:context-name\n
      \           +--rw target-tag?      snmp:identifier\n   This submodule also augments
      the \"/snmp/target-params/params\" choice\n   with nodes for the Community-based
      Security Model used by SNMPv1 and\n   SNMPv2c:\n      +--rw snmp\n         +--rw
      target-params* [name]\n         |  ...\n         |  +--rw (params)?\n         |
      \    +--:(v1)\n         |     |  +--rw v1\n         |     |     +--rw security-name
      \   snmp:security-name\n         |     +--:(v2c)\n         |        +--rw v2c\n
      \        |           +--rw security-name    snmp:security-name\n         +--rw
      target* [name]\n            +--rw mms?       union\n   An entry in the list
      \"/snmp/community\" corresponds to an\n   \"snmpCommunityEntry\".\n   When a
      case \"v1\" or \"v2c\" is chosen, it implies an\n   snmpTargetParamsMPModel
      0 (SNMPv1) or 1 (SNMPv2), and an\n   snmpTargetParamsSecurityModel 1 (SNMPv1)
      or 2 (SNMPv2), respectively.\n   Both cases imply an snmpTargetParamsSecurityLevel
      of noAuthNoPriv.\n"
    title: 2.8.  Community Configuration
  - contents:
    - "2.9.  View-Based Access Control Model Configuration\n   The submodule \"ietf-snmp-vacm\",
      which defines configuration\n   parameters that correspond to the objects in
      SNMP-VIEW-BASED-ACM-MIB,\n   has the following structure:\n      +--rw snmp\n
      \        +--rw vacm\n            +--rw group* [name]\n            |  +--rw name
      \     group-name\n            |  +--rw member* [security-name]\n            |
      \ |  +--rw security-name     snmp:security-name\n            |  |  +--rw security-model*
      \  snmp:security-model\n            |  +--rw access* [context security-model
      security-level]\n            |     +--rw context           snmp:context-name\n
      \           |     +--rw context-match?    enumeration\n            |     +--rw
      security-model    snmp:security-model-or-any\n            |     +--rw security-level
      \   snmp:security-level\n            |     +--rw read-view?        view-name\n
      \           |     +--rw write-view?       view-name\n            |     +--rw
      notify-view?      view-name\n            +--rw view* [name]\n               +--rw
      name       view-name\n               +--rw include*   snmp:wildcard-object-identifier\n
      \              +--rw exclude*   snmp:wildcard-object-identifier\n   The \"vacmSecurityToGroupTable\"
      and \"vacmAccessTable\" are mapped to a\n   structure of nested lists in the
      YANG model.  Groups are defined in\n   the list \"/snmp/vacm/group\", and for
      each group, there is a sublist\n   \"member\" that maps to \"vacmSecurityToGroupTable\"
      and a sublist\n   \"access\" that maps to \"vacmAccessTable\".\n   MIB views
      are defined in the list \"/snmp/vacm/view\", and for each MIB\n   view, there
      is a leaf-list of included subtree families and a leaf-\n   list of excluded
      subtree families.  This is more compact and thus a\n   more readable representation
      of the \"vacmViewTreeFamilyTable\".\n"
    title: 2.9.  View-Based Access Control Model Configuration
  - contents:
    - "2.10.  User-Based Security Model Configuration\n   The submodule \"ietf-snmp-usm\",
      which defines configuration parameters\n   that correspond to the objects in
      SNMP-USER-BASED-SM-MIB, has the\n   following structure:\n      +--rw snmp\n
      \        +--rw usm\n            +--rw local\n            |  +--rw user* [name]\n
      \           |     +-- {common user params}\n            +--rw remote* [engine-id]\n
      \              +--rw engine-id    snmp:engine-id\n               +--rw user*
      [name]\n                  +-- {common user params}\n   The \"{common user params}\"
      are:\n      +--rw name    snmp:identifier\n      +--rw auth!\n      |  +--rw
      (protocol)\n      |     +--:(md5)\n      |     |  +--rw md5\n      |     |     +--
      rw key    yang:hex-string\n      |     +--:(sha)\n      |        +--rw sha\n
      \     |           +-- rw key    yang:hex-string\n      +--rw priv!\n         +--rw
      (protocol)\n            +--:(des)\n            |  +--rw des\n            |     +--
      rw key    yang:hex-string\n            +--:(aes)\n               +--rw aes\n
      \                 +-- rw key    yang:hex-string\n   This submodule also augments
      the \"/snmp/target-params/params\" choice\n   with nodes for the SNMP User-based
      Security Model.\n      +--rw snmp\n         +--rw target-params* [name]\n            ...\n
      \           +--rw (params)?\n               +--:(usm)\n                  +--rw
      usm\n                     +--rw user-name         snmp:security-name\n                     +--rw
      security-level    security-level\n   In the MIB, there is a single table with
      local and remote users,\n   indexed by the engine ID and user name.  In the
      YANG model, there is\n   one list of local users and a nested list of remote
      users.\n   In the MIB, there are several objects related to changing the\n   authentication
      and privacy keys.  These objects are not present in\n   the YANG model.  However,
      the localized key can be changed.  This\n   implies that if the engine ID is
      changed, all users keys need to be\n   changed as well.\n"
    title: 2.10.  User-Based Security Model Configuration
  - contents:
    - "2.11.  Transport Security Model Configuration\n   The submodule \"ietf-snmp-tsm\",
      which defines configuration parameters\n   that correspond to the objects in
      SNMP-TSM-MIB, has the following\n   structure:\n      +--rw snmp\n         +--rw
      tsm\n            +--rw use-prefix?   boolean\n   This submodule also augments
      the \"/snmp/target-params/params\" choice\n   with nodes for the SNMP Transport
      Security Model.\n      +--rw snmp\n         +--rw target-params* [name]\n            ...\n
      \           +--rw (params)?\n               +--:(tsm)\n                  +--rw
      tsm\n                     +--rw security-name     snmp:security-name\n                     +--rw
      security-level    security-level\n   This submodule defines the feature \"tsm\".
      \ A server implements this\n   feature if it supports the Transport Security
      Model (TSM) [RFC5591].\n"
    title: 2.11.  Transport Security Model Configuration
  - contents:
    - "2.12.  Transport Layer Security Transport Model Configuration\n   The submodule
      \"ietf-snmp-tls\", which defines configuration parameters\n   that correspond
      to the objects in SNMP-TLS-TM-MIB, has the following\n   structure:\n      +--rw
      snmp\n         ...\n         +--rw target* [name]\n         |  ...\n         |
      \ +--rw (transport)\n         |     ...\n         |     +--:(tls)\n         |
      \    |  +--rw tls\n         |     |     +-- {common (d)tls transport params}\n
      \        |     +--:(dtls)\n         |        +--rw dtls\n         |           +--
      {common (d)tls transport params}\n         +--rw tlstm\n            +--rw cert-to-name*
      [id]\n               +--rw id             uint32\n               +--rw fingerprint
      \   x509c2n:tls-fingerprint\n               +--rw map-type       identityref\n
      \              +--rw name           string\n   The \"{common (d)tls transport
      params}\" are:\n      +--rw ip?                   inet:host\n      +--rw port?
      \                inet:port-number\n      +--rw client-fingerprint?   x509c2n:tls-fingerprint\n
      \     +--rw server-fingerprint?   x509c2n:tls-fingerprint\n      +--rw server-identity?
      \     snmp:admin-string\n   This submodule also augments the \"/snmp/engine/listen/transport\"\n
      \  choice with objects for the D(TLS) transport endpoints:\n      +--rw snmp\n
      \        +--rw engine\n            ...\n            +--rw listen* [name]\n               ...\n
      \              +--rw (transport)\n                  ...\n                  +--:(tls)\n
      \                 |  +--rw tls\n                  |     +--rw ip      inet:ip-address\n
      \                 |     +--rw port?   inet:port-number\n                  +--:(dtls)\n
      \                    +--rw dtls\n                        +--rw ip      inet:ip-address\n
      \                       +--rw port?   inet:port-number\n   This submodule defines
      the feature \"tlstm\".  A server implements this\n   feature if it supports
      the Transport Layer Security (TLS) Transport\n   Model (TLSTM) [RFC6353].\n"
    title: 2.12.  Transport Layer Security Transport Model Configuration
  - contents:
    - "2.13.  Secure Shell Transport Model Configuration\n   The submodule \"ietf-snmp-ssh\",
      which defines configuration parameters\n   that correspond to the objects in
      SNMP-SSH-TM-MIB, has the following\n   structure:\n      +--rw snmp\n         ...\n
      \        +--rw target* [name]\n           ...\n           +--rw (transport)\n
      \             ...\n              +--:(ssh)\n                 +--rw ssh\n                    +--rw
      ip          inet:host\n                    +--rw port?       inet:port-number\n
      \                   +--rw username?   string\n   It also augments the \"/snmp/engine/listen/transport\"
      choice with\n   objects for the SSH transport endpoints:\n      +--rw snmp\n
      \        +--rw engine\n            ...\n            +--rw listen* [name]\n               ...\n
      \              +--rw (transport)\n                  ...\n                  +--:(ssh)\n
      \                    +--rw ssh\n                        +--rw ip          inet:host\n
      \                       +--rw port?       inet:port-number\n                        +--rw
      username?   string\n   This submodule defines the feature \"sshtm\".  A server
      implements this\n   feature if it supports the Secure Shell Transport Model
      (SSHTM)\n   [RFC5592].\n"
    title: 2.13.  Secure Shell Transport Model Configuration
  title: 2.  Data Model
- contents:
  - "3.  Implementation Guidelines\n   This section describes some challenges for
    implementations that\n   support both the YANG models defined in this document
    and either\n   read-write or read-only SNMP access to the same data, using the\n
    \  standard MIB modules.\n   As described in Section 2.2, the persistency models
    in NETCONF and\n   SNMP are quite different.  This poses a challenge for an\n
    \  implementation to support both NETCONF and SNMP access to the same\n   data,
    in particular if the data is writable over both protocols.\n   Specifically, the
    configuration data may exist in some combination of\n   the three NETCONF configuration
    datastores, and this data must be\n   mapped to rows in the SNMP tables, in some
    SNMP contexts, with proper\n   values for the StorageType columns.\n   This problem
    is not new; it has been handled in many implementations\n   that support configuration
    of the SNMP engine over a command line\n   interface (CLI), which normally have
    a persistency model similar to\n   NETCONF.\n   Since there is not one solution
    that works for all cases, this\n   document does not provide a recommended solution.
    \ Instead, some of\n   the challenges involved are described below.\n"
  - contents:
    - "3.1.  Supporting read-only SNMP Access\n   If a device implements only :writable-running,
      it is trivial to map\n   the contents of \"running\" to data in the SNMP tables,
      where all\n   instances of the StorageType columns have the value \"nonVolatile\".\n
      \  If a device implements :candidate but not :startup, the\n   implementation
      may choose to not expose the contents of the\n   \"candidate\" datastore over
      SNMP and map the contents of \"running\" as\n   described above.  As an option,
      the contents of \"candidate\" might be\n   accessible in a separate SNMP context.\n
      \  If a device implements :startup, the handling of StorageType becomes\n   more
      difficult.  Since the contents of \"running\" and \"startup\" might\n   differ,
      data in \"running\" cannot automatically be mapped to instances\n   with StorageType
      \"nonVolatile\".  If a particular entry exists in\n   \"running\" but not in
      \"startup\", its StorageType should be \"volatile\".\n   If a particular entry
      exists in \"startup\" but not \"running\", it\n   should not be mapped to an
      SNMP instance, at least not in the default\n   SNMP context.\n"
    title: 3.1.  Supporting read-only SNMP Access
  - contents:
    - "3.2.  Supporting read-write SNMP Access\n   If the implementation supports
      read-write access to data over SNMP,\n   and specifically creation of table
      rows, special attention has to be\n   given to the handling of the RowStatus
      and StorageType columns.  The\n   problem is to determine which table rows to
      store in the\n   configuration datastores and which configuration datastore
      is\n   appropriate for each row.\n   The SNMP tables contain a mix of configured
      data and operational\n   state, and only rows with an \"active\" RowStatus column
      should be\n   stored in a configuration datastore.\n   If a device implements
      only :writable-running, \"active\" rows with a\n   \"nonVolatile\" StorageType
      column can be stored in \"running\".  Rows\n   with a \"volatile\" StorageType
      column are operational state.\n   If a device implements :candidate but not
      :writable-running, all\n   configuration changes typically go through the \"candidate\",
      even if\n   they are done over SNMP.  An implementation might have to perform\n
      \  some automatic commit of the \"candidate\" when data is written over\n   SNMP,
      since there is no explicit \"commit\" operation in SNMP.\n   If a device implements
      :startup, \"nonVolatile\" rows cannot just be\n   written to \"running\"; they
      must also be copied into \"startup\".\n   \"volatile\" rows may be treated as
      operational state and not copied to\n   any datastore, or they may be copied
      into \"running\".\n   Cooperating SNMP management applications may use spin
      lock objects\n   (snmpTargetSpinLock [RFC3413], usmUserSpinLock [RFC3414],\n
      \  vacmViewSpinLock [RFC3415]) to coordinate concurrent write requests.\n   Implementations
      supporting modifications of MIB objects protected by\n   a spin lock via NETCONF
      should ensure that the spin lock objects are\n   properly incremented whenever
      objects are changed via NETCONF.  This\n   allows cooperating SNMP management
      applications to discover that\n   concurrent modifications are taking place.\n"
    title: 3.2.  Supporting read-write SNMP Access
  title: 3.  Implementation Guidelines
- contents:
  - '4.  Definitions

    '
  - contents:
    - "4.1.  Module 'ietf-x509-cert-to-name'\n   This YANG module imports typedefs
      from [RFC6991].\n   <CODE BEGINS> file \"ietf-x509-cert-to-name.yang\"\n   module
      ietf-x509-cert-to-name {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-x509-cert-to-name\";\n
      \    prefix x509c2n;\n     import ietf-yang-types {\n       prefix yang;\n     }\n
      \    organization\n       \"IETF NETMOD (NETCONF Data Modeling Language) Working
      Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This module contains a collection of YANG definitions
      for\n        extracting a name from an X.509 certificate.\n        The algorithm
      used to extract a name from an X.509 certificate\n        was first defined
      in RFC 6353.\n        Copyright (c) 2014 IETF Trust and the persons identified
      as\n        authors of the code.  All rights reserved.\n        Redistribution
      and use in source and binary forms, with or\n        without modification, is
      permitted pursuant to, and subject\n        to the license terms contained in,
      the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
      Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n
      \       This version of this YANG module is part of RFC 7407; see\n        the
      RFC itself for full legal notices.\";\n     reference\n       \"RFC 6353: Transport
      Layer Security (TLS) Transport Model for\n          the Simple Network Management
      Protocol (SNMP)\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     typedef tls-fingerprint {\n       type yang:hex-string
      {\n         pattern '([0-9a-fA-F]){2}(:([0-9a-fA-F]){2}){0,254}';\n       }\n
      \      description\n        \"A fingerprint value that can be used to uniquely
      reference\n         other data of potentially arbitrary length.\n         A
      tls-fingerprint value is composed of a 1-octet hashing\n         algorithm identifier
      followed by the fingerprint value.  The\n         first octet value identifying
      the hashing algorithm is taken\n         from the IANA 'TLS HashAlgorithm Registry'
      (RFC 5246).  The\n         remaining octets are filled using the results of
      the hashing\n         algorithm.\";\n       reference\n        \"RFC 6353: Transport
      Layer Security (TLS) Transport Model\n           for the Simple Network Management
      Protocol (SNMP).\n           SNMP-TLS-TM-MIB.SnmpTLSFingerprint\";\n     }\n
      \    /* Identities */\n     identity cert-to-name {\n       description\n         \"Base
      identity for algorithms to derive a name from a\n          certificate.\";\n
      \    }\n     identity specified {\n       base cert-to-name;\n       description\n
      \        \"Directly specifies the name to be used for the certificate.\n          The
      value of the leaf 'name' in the cert-to-name list is\n          used.\";\n       reference\n
      \        \"RFC 6353: Transport Layer Security (TLS) Transport Model\n            for
      the Simple Network Management Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertSpecified\";\n
      \    }\n     identity san-rfc822-name {\n       base cert-to-name;\n       description\n
      \        \"Maps a subjectAltName's rfc822Name to a name.  The local part\n          of
      the rfc822Name is passed unaltered, but the host-part of\n          the name
      must be passed in lowercase.  For example, the\n          rfc822Name field FooBar@Example.COM
      is mapped to name\n          FooBar@example.com.\";\n       reference\n         \"RFC
      6353: Transport Layer Security (TLS) Transport Model\n            for the Simple
      Network Management Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertSANRFC822Name\";\n
      \    }\n     identity san-dns-name {\n       base cert-to-name;\n       description\n
      \        \"Maps a subjectAltName's dNSName to a name after first\n          converting
      it to all lowercase (RFC 5280 does not specify\n          converting to lowercase,
      so this involves an extra step).\n          This mapping results in a 1:1 correspondence
      between\n          subjectAltName dNSName values and the name values.\";\n       reference\n
      \        \"RFC 6353: Transport Layer Security (TLS) Transport Model\n            for
      the Simple Network Management Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertSANDNSName\";\n
      \    }\n     identity san-ip-address {\n       base cert-to-name;\n       description\n
      \        \"Maps a subjectAltName's iPAddress to a name by\n          transforming
      the binary-encoded address as follows:\n            1) for IPv4, the value is
      converted into a\n               decimal-dotted quad address (e.g., '192.0.2.1').\n
      \           2) for IPv6 addresses, the value is converted into a\n               32-character,
      all-lowercase hexadecimal string\n               without any colon separators.\n
      \         This mapping results in a 1:1 correspondence between\n          subjectAltName
      iPAddress values and the name values.\";\n       reference\n         \"RFC 6353:
      Transport Layer Security (TLS) Transport Model\n            for the Simple Network
      Management Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertSANIpAddress\";\n
      \    }\n     identity san-any {\n       base cert-to-name;\n       description\n
      \        \"Maps any of the following fields using the corresponding\n          mapping
      algorithms:\n            +------------+-----------------+\n            | Type
      \      | Algorithm       |\n            |------------+-----------------|\n            |
      rfc822Name | san-rfc822-name |\n            | dNSName    | san-dns-name    |\n
      \           | iPAddress  | san-ip-address  |\n            +------------+-----------------+\n
      \         The first matching subjectAltName value found in the\n          certificate
      of the above types MUST be used when deriving\n          the name.  The mapping
      algorithm specified in the\n          'Algorithm' column MUST be used to derive
      the name.\n          This mapping results in a 1:1 correspondence between\n
      \         subjectAltName values and name values.  The three sub-mapping\n          algorithms
      produced by this combined algorithm cannot produce\n          conflicting results
      between themselves.\";\n       reference\n         \"RFC 6353: Transport Layer
      Security (TLS) Transport Model\n            for the Simple Network Management
      Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertSANAny\";\n     }\n
      \    identity common-name {\n       base cert-to-name;\n       description\n
      \        \"Maps a certificate's CommonName to a name after converting\n          it
      to a UTF-8 encoding.  The usage of CommonNames is\n          deprecated, and
      users are encouraged to use subjectAltName\n          mapping methods instead.
      \ This mapping results in a 1:1\n          correspondence between certificate
      CommonName values and name\n          values.\";\n       reference\n         \"RFC
      6353: Transport Layer Security (TLS) Transport Model\n            for the Simple
      Network Management Protocol (SNMP).\n            SNMP-TLS-TM-MIB.snmpTlstmCertCommonName\";\n
      \    }\n     /*\n      * Groupings\n      */\n     grouping cert-to-name {\n
      \      description\n         \"Defines nodes for mapping certificates to names.
      \ Modules\n          that use this grouping should describe how the resulting\n
      \         name is used.\";\n       list cert-to-name {\n         key id;\n         description\n
      \          \"This list defines how certificates are mapped to names.\n            The
      name is derived by considering each cert-to-name\n            list entry in
      order.  The cert-to-name entry's fingerprint\n            determines whether
      the list entry is a match:\n            1) If the cert-to-name list entry's
      fingerprint value\n               matches that of the presented certificate,
      then consider\n               the list entry a successful match.\n            2)
      If the cert-to-name list entry's fingerprint value\n               matches that
      of a locally held copy of a trusted CA\n               certificate, and that
      CA certificate was part of the CA\n               certificate chain to the presented
      certificate, then\n               consider the list entry a successful match.\n
      \          Once a matching cert-to-name list entry has been found, the\n           map-type
      is used to determine how the name associated with\n           the certificate
      should be determined.  See the map-type\n           leaf's description for details
      on determining the name value.\n           If it is impossible to determine
      a name from the cert-to-name\n           list entry's data combined with the
      data presented in the\n           certificate, then additional cert-to-name
      list entries MUST\n           be searched to look for another potential match.\n
      \          Security administrators are encouraged to make use of\n           certificates
      with subjectAltName fields that can be mapped to\n           names so that a
      single root CA certificate can allow all\n           child certificates' subjectAltName
      fields to map directly to\n           a name via a 1:1 transformation.\";\n
      \        reference\n          \"RFC 6353: Transport Layer Security (TLS) Transport
      Model\n             for the Simple Network Management Protocol (SNMP).\n             SNMP-TLS-TM-MIB.snmpTlstmCertToTSNEntry\";\n
      \        leaf id {\n           type uint32;\n           description\n             \"The
      id specifies the order in which the entries in the\n              cert-to-name
      list are searched.  Entries with lower\n              numbers are searched first.\";\n
      \          reference\n             \"RFC 6353: Transport Layer Security (TLS)
      Transport Model\n                for the Simple Network Management Protocol\n
      \               (SNMP).\n                SNMP-TLS-TM-MIB.snmpTlstmCertToTSNID\";\n
      \        }\n         leaf fingerprint {\n           type x509c2n:tls-fingerprint;\n
      \          mandatory true;\n           description\n             \"Specifies
      a value with which the fingerprint of the\n              full certificate presented
      by the peer is compared.  If\n              the fingerprint of the full certificate
      presented by the\n              peer does not match the fingerprint configured,
      then the\n              entry is skipped, and the search for a match continues.\";\n
      \          reference\n             \"RFC 6353: Transport Layer Security (TLS)
      Transport Model\n                for the Simple Network Management Protocol\n
      \               (SNMP).\n                SNMP-TLS-TM-MIB.snmpTlstmCertToTSNFingerprint\";\n
      \        }\n         leaf map-type {\n           type identityref {\n             base
      cert-to-name;\n           }\n           mandatory true;\n           description\n
      \            \"Specifies the algorithm used to map the certificate\n              presented
      by the peer to a name.\n              Mappings that need additional configuration
      objects should\n              use the 'when' statement to make them conditional
      based on\n              the map-type.\";\n           reference\n             \"RFC
      6353: Transport Layer Security (TLS) Transport Model\n                for the
      Simple Network Management Protocol\n                (SNMP).\n                SNMP-TLS-TM-MIB.snmpTlstmCertToTSNMapType\";\n
      \        }\n         leaf name {\n           when \"../map-type = 'x509c2n:specified'\";\n
      \          type string;\n           mandatory true;\n           description\n
      \            \"Directly specifies the NETCONF username when the\n              map-type
      is 'specified'.\";\n           reference\n             \"RFC 6353: Transport
      Layer Security (TLS) Transport Model\n                for the Simple Network
      Management Protocol\n                (SNMP).\n                SNMP-TLS-TM-MIB.snmpTlstmCertToTSNData\";\n
      \        }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.1.  Module 'ietf-x509-cert-to-name'
  - contents:
    - "4.2.  Module 'ietf-snmp'\n   <CODE BEGINS> file \"ietf-snmp.yang\"\n   module
      ietf-snmp {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-snmp\";\n     prefix
      snmp;\n     include ietf-snmp-common {\n       revision-date 2014-12-10;\n     }\n
      \    include ietf-snmp-engine {\n       revision-date 2014-12-10;\n     }\n
      \    include ietf-snmp-target {\n       revision-date 2014-12-10;\n     }\n
      \    include ietf-snmp-notification {\n       revision-date 2014-12-10;\n     }\n
      \    include ietf-snmp-proxy {\n       revision-date 2014-12-10;\n     }\n     include
      ietf-snmp-community {\n       revision-date 2014-12-10;\n     }\n     include
      ietf-snmp-usm {\n       revision-date 2014-12-10;\n     }\n     include ietf-snmp-tsm
      {\n       revision-date 2014-12-10;\n     }\n     include ietf-snmp-vacm {\n
      \      revision-date 2014-12-10;\n     }\n     include ietf-snmp-tls {\n       revision-date
      2014-12-10;\n     }\n     include ietf-snmp-ssh {\n       revision-date 2014-12-10;\n
      \    }\n     organization\n       \"IETF NETMOD (NETCONF Data Modeling Language)
      Working Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This module contains a collection of YANG definitions
      for\n        configuring SNMP engines.\n        Copyright (c) 2014 IETF Trust
      and the persons identified as\n        authors of the code.  All rights reserved.\n
      \       Redistribution and use in source and binary forms, with or\n        without
      modification, is permitted pursuant to, and subject\n        to the license
      terms contained in, the Simplified BSD License\n        set forth in Section
      4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n
      \       (http://trustee.ietf.org/license-info).\n        This version of this
      YANG module is part of RFC 7407; see\n        the RFC itself for full legal
      notices.\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.2.  Module 'ietf-snmp'
  - contents:
    - "4.3.  Submodule 'ietf-snmp-common'\n   <CODE BEGINS> file \"ietf-snmp-common.yang\"\n
      \  submodule ietf-snmp-common {\n     belongs-to ietf-snmp {\n       prefix
      snmp;\n     }\n     import ietf-yang-types {\n       prefix yang;\n     }\n
      \    organization\n       \"IETF NETMOD (NETCONF Data Modeling Language) Working
      Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of common YANG
      definitions\n        for configuring SNMP engines.\n        Copyright (c) 2014
      IETF Trust and the persons identified as\n        authors of the code.  All
      rights reserved.\n        Redistribution and use in source and binary forms,
      with or\n        without modification, is permitted pursuant to, and subject\n
      \       to the license terms contained in, the Simplified BSD License\n        set
      forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
      to IETF Documents\n        (http://trustee.ietf.org/license-info).\n        This
      version of this YANG module is part of RFC 7407; see\n        the RFC itself
      for full legal notices.\";\n     revision 2014-12-10 {\n       description\n
      \        \"Initial revision.\";\n       reference\n         \"RFC 7407: A YANG
      Data Model for SNMP Configuration\";\n     }\n     /* Collection of SNMP-specific
      data types */\n     typedef admin-string {\n       type string {\n         length
      \"0..255\";\n       }\n       description\n         \"Represents SnmpAdminString
      as defined in RFC 3411.\n         Note that the size of an SnmpAdminString is
      measured in\n         octets, not characters.\";\n       reference\n         \"RFC
      3411: An Architecture for Describing Simple Network\n            Management
      Protocol (SNMP) Management Frameworks.\n            SNMP-FRAMEWORK-MIB.SnmpAdminString\";\n
      \    }\n     typedef identifier {\n       type admin-string {\n         length
      \"1..32\";\n       }\n       description\n         \"Identifiers are used to
      name items in the SNMP configuration\n         datastore.\";\n     }\n     typedef
      context-name {\n       type admin-string {\n         length \"0..32\";\n       }\n
      \      description\n         \"The context type represents an SNMP context name.\";\n
      \      reference\n         \"RFC 3411: An Architecture for Describing Simple
      Network\n            Management Protocol (SNMP) Management Frameworks\";\n     }\n
      \    typedef security-name {\n       type admin-string {\n         length \"1..32\";\n
      \      }\n       description\n         \"The security-name type represents an
      SNMP security name.\";\n       reference\n         \"RFC 3411: An Architecture
      for Describing Simple Network\n            Management Protocol (SNMP) Management
      Frameworks\";\n     }\n     typedef security-model {\n       type union {\n
      \        type enumeration {\n           enum v1  { value 1; }\n           enum
      v2c { value 2; }\n           enum usm { value 3; }\n           enum tsm { value
      4; }\n         }\n         type int32 {\n           range \"1..2147483647\";\n
      \        }\n       }\n       reference\n         \"RFC 3411: An Architecture
      for Describing Simple Network\n            Management Protocol (SNMP) Management
      Frameworks\";\n     }\n     typedef security-model-or-any {\n       type union
      {\n         type enumeration {\n           enum any { value 0; }\n         }\n
      \        type security-model;\n       }\n       reference\n         \"RFC 3411:
      An Architecture for Describing Simple Network\n            Management Protocol
      (SNMP) Management Frameworks\";\n     }\n     typedef security-level {\n       type
      enumeration {\n         enum no-auth-no-priv { value 1; }\n         enum auth-no-priv
      \   { value 2; }\n         enum auth-priv       { value 3; }\n       }\n       reference\n
      \        \"RFC 3411: An Architecture for Describing Simple Network\n            Management
      Protocol (SNMP) Management Frameworks\";\n     }\n     typedef engine-id {\n
      \      type yang:hex-string {\n         pattern '([0-9a-fA-F]){2}(:([0-9a-fA-F]){2}){4,31}';\n
      \      }\n       description\n         \"The engine ID specified as a list of
      colon-specified\n         hexadecimal octets, e.g., '80:00:02:b8:04:61:62:63'.\";\n
      \      reference\n         \"RFC 3411: An Architecture for Describing Simple
      Network\n            Management Protocol (SNMP) Management Frameworks\";\n     }\n
      \    typedef wildcard-object-identifier {\n       type string;\n       description\n
      \        \"The wildcard-object-identifier type represents an SNMP object\n         identifier
      where subidentifiers can be given either as a label,\n         in numeric form,
      or a wildcard, represented by an asterisk\n         ('*').\";\n     }\n     typedef
      tag-value {\n       type string {\n         length \"0..255\";\n       }\n       description\n
      \        \"Represents SnmpTagValue as defined in RFC 3413.\n         Note that
      the size of an SnmpTagValue is measured in\n         octets, not characters.\";\n
      \      reference\n         \"RFC 3413: Simple Network Management Protocol (SNMP)\n
      \           Applications.\n            SNMP-TARGET-MIB.SnmpTagValue\";\n     }\n
      \    container snmp {\n       description\n         \"Top-level container for
      SNMP-related configuration and\n         status objects.\";\n     }\n   }\n
      \  <CODE ENDS>\n"
    title: 4.3.  Submodule 'ietf-snmp-common'
  - contents:
    - "4.4.  Submodule 'ietf-snmp-engine'\n   <CODE BEGINS> file \"ietf-snmp-engine.yang\"\n
      \  submodule ietf-snmp-engine {\n     belongs-to ietf-snmp {\n       prefix
      snmp;\n     }\n     import ietf-inet-types {\n       prefix inet;\n     }\n
      \    include ietf-snmp-common;\n     organization\n       \"IETF NETMOD (NETCONF
      Data Modeling Language) Working Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring SNMP engines.\n        Copyright (c) 2014 IETF Trust
      and the persons identified as\n        authors of the code.  All rights reserved.\n
      \       Redistribution and use in source and binary forms, with or\n        without
      modification, is permitted pursuant to, and subject\n        to the license
      terms contained in, the Simplified BSD License\n        set forth in Section
      4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n
      \       (http://trustee.ietf.org/license-info).\n        This version of this
      YANG module is part of RFC 7407; see\n        the RFC itself for full legal
      notices.\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     augment /snmp:snmp {\n       container engine
      {\n         description\n           \"Configuration of the SNMP engine.\";\n
      \        leaf enabled {\n           type boolean;\n           default \"false\";\n
      \          description\n             \"Enables the SNMP engine.\";\n         }\n
      \        list listen {\n           key \"name\";\n           description\n             \"Configuration
      of the transport endpoints on which the\n              engine listens.\";\n
      \          leaf name {\n             type snmp:identifier;\n             description\n
      \              \"An arbitrary name for the list entry.\";\n           }\n           choice
      transport {\n             mandatory true;\n             description\n               \"The
      transport-protocol-specific parameters for this\n                endpoint.  Submodules
      providing configuration for\n                additional transports are expected
      to augment this\n                choice.\";\n             case udp {\n               container
      udp {\n                 leaf ip {\n                   type inet:ip-address;\n
      \                  mandatory true;\n                   description\n                     \"The
      IPv4 or IPv6 address on which the engine\n                      listens.\";\n
      \                }\n                 leaf port {\n                   type inet:port-number;\n
      \                  description\n                     \"The UDP port on which
      the engine listens.\n                      If the port is not configured, an
      engine that\n                      acts as a Command Responder uses port 161,
      and\n                      an engine that acts as a Notification Receiver\n
      \                     uses port 162.\";\n                 }\n               }\n
      \            }\n           }\n         }\n         container version {\n           description\n
      \            \"SNMP version used by the engine.\";\n           leaf v1 {\n             type
      empty;\n           }\n           leaf v2c {\n             type empty;\n           }\n
      \          leaf v3 {\n             type empty;\n           }\n         }\n         leaf
      engine-id {\n           type snmp:engine-id;\n           description\n             \"The
      local SNMP engine's administratively assigned unique\n              identifier.\n
      \             If this leaf is not set, the device automatically\n              calculates
      an engine ID, as described in RFC 3411.  A\n              server MAY initialize
      this leaf with the automatically\n              created value.\";\n           reference\n
      \            \"RFC 3411: An Architecture for Describing Simple Network\n                Management
      Protocol (SNMP) Management\n                Frameworks.\n                SNMP-FRAMEWORK-MIB.snmpEngineID\";\n
      \        }\n         leaf enable-authen-traps {\n           type boolean;\n
      \          description\n             \"Indicates whether the SNMP entity is
      permitted to\n              generate authenticationFailure traps.\";\n           reference\n
      \            \"RFC 3418: Management Information Base (MIB) for the\n                Simple
      Network Management Protocol (SNMP)\n                SNMPv2-MIB.snmpEnableAuthenTraps\";\n
      \        }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.4.  Submodule 'ietf-snmp-engine'
  - contents:
    - "4.5.  Submodule 'ietf-snmp-target'\n   <CODE BEGINS> file \"ietf-snmp-target.yang\"\n
      \  submodule ietf-snmp-target {\n     belongs-to ietf-snmp {\n       prefix
      snmp;\n     }\n     import ietf-inet-types {\n       prefix inet;\n     }\n
      \    include ietf-snmp-common;\n     organization\n       \"IETF NETMOD (NETCONF
      Data Modeling Language) Working Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring SNMP targets.\n        Copyright (c) 2014 IETF Trust
      and the persons identified as\n        authors of the code.  All rights reserved.\n
      \       Redistribution and use in source and binary forms, with or\n        without
      modification, is permitted pursuant to, and subject\n        to the license
      terms contained in, the Simplified BSD License\n        set forth in Section
      4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n
      \       (http://trustee.ietf.org/license-info).\n        This version of this
      YANG module is part of RFC 7407; see\n        the RFC itself for full legal
      notices.\";\n     reference\n       \"RFC 3413: Simple Network Management Protocol
      (SNMP)\n          Applications\";\n     revision 2014-12-10 {\n       description\n
      \        \"Initial revision.\";\n       reference\n         \"RFC 7407: A YANG
      Data Model for SNMP Configuration\";\n     }\n     augment /snmp:snmp {\n       list
      target {\n         key name;\n         description\n           \"List of targets.\";\n
      \        reference\n           \"RFC 3413: Simple Network Management Protocol
      (SNMP)\n              Applications.\n              SNMP-TARGET-MIB.snmpTargetAddrTable\";\n
      \        leaf name {\n           type snmp:identifier;\n           description\n
      \            \"Identifies the target.\";\n           reference\n             \"RFC
      3413: Simple Network Management Protocol (SNMP)\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetAddrName\";\n         }\n         choice
      transport {\n           mandatory true;\n           description\n             \"Transport
      address of the target.\n              The snmpTargetAddrTDomain and snmpTargetAddrTAddress\n
      \             objects are mapped to transport-specific YANG nodes.  Each\n              transport
      is configured as a separate case in this\n              choice.  Submodules
      providing configuration for additional\n              transports are expected
      to augment this choice.\";\n           reference\n             \"RFC 3413: Simple
      Network Management Protocol (SNMP)\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetAddrTDomain\n
      \               SNMP-TARGET-MIB.snmpTargetAddrTAddress\";\n           case udp
      {\n             reference\n              \"RFC 3417: Transport Mappings for
      the Simple Network\n                 Management Protocol (SNMP).\n                 SNMPv2-TM.snmpUDPDomain\n
      \              RFC 3419: Textual Conventions for Transport Addresses.\n                 TRANSPORT-ADDRESS-MIB.transportDomainUdpIpv4\n
      \                TRANSPORT-ADDRESS-MIB.transportDomainUdpIpv4z\n                 TRANSPORT-ADDRESS-MIB.transportDomainUdpIpv6\n
      \                TRANSPORT-ADDRESS-MIB.transportDomainUdpIpv6z\";\n             container
      udp {\n               leaf ip {\n                 type inet:ip-address;\n                 mandatory
      true;\n                 reference\n                   \"RFC 3413: Simple Network
      Management Protocol (SNMP).\n                      SNMP-TARGET-MIB.snmpTargetAddrTAddress\";\n
      \              }\n               leaf port {\n                 type inet:port-number;\n
      \                default 162;\n                 description\n                   \"UDP
      port number.\";\n                 reference\n                   \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                      SNMP-TARGET-MIB.snmpTargetAddrTAddress\";\n
      \              }\n               leaf prefix-length {\n                 type
      uint8;\n                 description\n                   \"The value of this
      leaf must match the value of\n                    ../snmp:ip.  If ../snmp:ip
      contains an IPv4 address,\n                    this leaf must be less than or
      equal to 32.  If it\n                    contains an IPv6 address, it must be
      less than or\n                    equal to 128.\n                    Note that
      the prefix-length is currently only used\n                    by the Community-based
      Security Model to filter\n                    incoming messages.  Furthermore,
      the prefix-length\n                    filtering does not cover all possible
      filters\n                    supported by the corresponding MIB object.\";\n
      \                reference\n                   \"RFC 3584: Coexistence between
      Version 1, Version 2,\n                      and Version 3 of the Internet-standard\n
      \                     Network Management Framework.\n                      SNMP-COMMUNITY-MIB.snmpTargetAddrTMask\";\n
      \              }\n             }\n           }\n         }\n         leaf-list
      tag {\n           type snmp:tag-value;\n           description\n             \"List
      of tag values used to select target addresses.\";\n           reference\n             \"RFC
      3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetAddrTagList\";\n         }\n         leaf
      timeout {\n           type uint32;\n           units \"0.01 seconds\";\n           default
      1500;\n           description\n             \"Needed only if this target can
      receive\n              InformRequest-PDUs.\";\n           reference\n             \"RFC
      3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetAddrTimeout\";\n         }\n         leaf
      retries {\n           type uint8;\n           default 3;\n           description\n
      \            \"Needed only if this target can receive\n              InformRequest-PDUs.\";\n
      \          reference\n             \"RFC 3413: Simple Network Management Protocol
      (SNMP).\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetAddrRetryCount\";\n
      \        }\n         leaf target-params {\n           type snmp:identifier;\n
      \          mandatory true;\n           reference\n             \"RFC 3413: Simple
      Network Management Protocol (SNMP).\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetAddrParams\";\n
      \        }\n       }\n       list target-params {\n         key name;\n         description\n
      \          \"List of target parameters.\";\n         reference\n           \"RFC
      3413: Simple Network Management Protocol (SNMP).\n              Applications.\n
      \             SNMP-TARGET-MIB.snmpTargetParamsTable\";\n         leaf name {\n
      \          type snmp:identifier;\n         }\n         choice params {\n           description\n
      \            \"This choice is augmented with case nodes containing\n              configuration
      parameters specific to the security model.\";\n         }\n       }\n     }\n
      \  }\n   <CODE ENDS>\n"
    title: 4.5.  Submodule 'ietf-snmp-target'
  - contents:
    - "4.6.  Submodule 'ietf-snmp-notification'\n   <CODE BEGINS> file \"ietf-snmp-notification.yang\"\n
      \  submodule ietf-snmp-notification {\n     belongs-to ietf-snmp {\n       prefix
      snmp;\n     }\n     include ietf-snmp-common;\n     include ietf-snmp-target;\n
      \    organization\n       \"IETF NETMOD (NETCONF Data Modeling Language) Working
      Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring SNMP notifications.\n        Copyright (c) 2014 IETF
      Trust and the persons identified as\n        authors of the code.  All rights
      reserved.\n        Redistribution and use in source and binary forms, with or\n
      \       without modification, is permitted pursuant to, and subject\n        to
      the license terms contained in, the Simplified BSD License\n        set forth
      in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF
      Documents\n        (http://trustee.ietf.org/license-info).\n        This version
      of this YANG module is part of RFC 7407; see\n        the RFC itself for full
      legal notices.\";\n     reference\n       \"RFC 3413: Simple Network Management
      Protocol (SNMP)\n          Applications\";\n     revision 2014-12-10 {\n       description\n
      \        \"Initial revision.\";\n       reference\n         \"RFC 7407: A YANG
      Data Model for SNMP Configuration\";\n     }\n     feature notification-filter
      {\n       description\n         \"A server implements this feature if it supports
      SNMP\n         notification filtering.\";\n       reference\n         \"RFC
      3413: Simple Network Management Protocol (SNMP)\n            Applications\";\n
      \    }\n     augment /snmp:snmp {\n       list notify {\n         key name;\n
      \        description\n           \"Targets that will receive notifications.\n
      \           Entries in this list are mapped 1-1 to entries in\n            snmpNotifyTable,
      except that if an entry in snmpNotifyTable\n            has an snmpNotifyTag
      for which no snmpTargetAddrEntry\n            exists, then the snmpNotifyTable
      entry is not mapped to an\n            entry in this list.\";\n         reference\n
      \          \"RFC 3413: Simple Network Management Protocol (SNMP).\n              Applications.\n
      \             SNMP-NOTIFICATION-MIB.snmpNotifyTable\";\n         leaf name {\n
      \          type snmp:identifier;\n           description\n             \"An
      arbitrary name for the list entry.\";\n           reference\n             \"RFC
      3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-NOTIFICATION-MIB.snmpNotifyName\";\n         }\n         leaf
      tag {\n           type snmp:tag-value;\n           mandatory true;\n           description\n
      \            \"Target tag, selects a set of notification targets.\n              Implementations
      MAY restrict the values of this leaf\n              to be one of the available
      values of /snmp/target/tag in\n              a valid configuration.\";\n           reference\n
      \            \"RFC 3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-NOTIFICATION-MIB.snmpNotifyTag\";\n         }\n         leaf
      type {\n           type enumeration {\n             enum trap { value 1; }\n
      \            enum inform { value 2; }\n           }\n           default trap;\n
      \          description\n             \"Defines the notification type to be generated.\";\n
      \          reference\n             \"RFC 3413: Simple Network Management Protocol
      (SNMP).\n                Applications.\n                SNMP-NOTIFICATION-MIB.snmpNotifyType\";\n
      \        }\n       }\n       list notify-filter-profile {\n         if-feature
      snmp:notification-filter;\n         key name;\n         description\n           \"Notification
      filter profiles.\n            The leaf /snmp/target/notify-filter-profile is
      used\n            to associate a filter profile with a target.\n            If
      an entry in this list is referred to by one or more\n            /snmp/target/notify-filter-profile
      items, each such\n            notify-filter-profile is represented by one\n
      \           snmpNotifyFilterProfileEntry.\n            If an entry in this list
      is not referred to by any\n            /snmp/target/notify-filter-profile, the
      entry is not mapped\n            to snmpNotifyFilterProfileTable.\";\n         reference\n
      \          \"RFC 3413: Simple Network Management Protocol (SNMP).\n              Applications.\n
      \             SNMP-NOTIFICATION-MIB.snmpNotifyFilterProfileTable\n              SNMP-NOTIFICATION-MIB.snmpNotifyFilterTable\";\n
      \        leaf name {\n           type snmp:identifier;\n           description\n
      \            \"Name of the filter profile.\";\n           reference\n             \"RFC
      3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-NOTIFICATION-MIB.snmpNotifyFilterProfileName\";\n         }\n
      \        leaf-list include {\n           type snmp:wildcard-object-identifier;\n
      \          description\n             \"A family of subtrees included in this
      filter.\";\n           reference\n             \"RFC 3413: Simple Network Management
      Protocol (SNMP).\n                Applications.\n                SNMP-NOTIFICATION-MIB.snmpNotifyFilterSubtree\n
      \               SNMP-NOTIFICATION-MIB.snmpNotifyFilterMask\n                SNMP-NOTIFICATION-MIB.snmpNotifyFilterType\";\n
      \        }\n         leaf-list exclude {\n           type snmp:wildcard-object-identifier;\n
      \          description\n             \"A family of subtrees excluded from this
      filter.\";\n           reference\n             \"RFC 3413: Simple Network Management
      Protocol (SNMP).\n                Applications.\n                SNMP-NOTIFICATION-MIB.snmpNotifyFilterSubtree\n
      \               SNMP-NOTIFICATION-MIB.snmpNotifyFilterMask\n                SNMP-NOTIFICATION-MIB.snmpNotifyFilterType\";\n
      \        }\n       }\n     }\n     augment /snmp:snmp/snmp:target-params {\n
      \      reference\n         \"RFC 3413: Simple Network Management Protocol (SNMP).\n
      \           Applications.\n            SNMP-NOTIFICATION-MIB.snmpNotifyFilterProfileTable\";\n
      \      leaf notify-filter-profile {\n         if-feature snmp:notification-filter;\n
      \        type leafref {\n           path \"/snmp/notify-filter-profile/name\";\n
      \        }\n         description\n           \"This leafref leaf is used to
      represent the sparse\n            relationship between the /snmp/target-params
      list and the\n            /snmp/notify-filter-profile list.\";\n         reference\n
      \          \"RFC 3413: Simple Network Management Protocol (SNMP).\n              Applications.\n
      \             SNMP-NOTIFICATION-MIB.snmpNotifyFilterProfileName\";\n       }\n
      \    }\n   }\n   <CODE ENDS>\n"
    title: 4.6.  Submodule 'ietf-snmp-notification'
  - contents:
    - "4.7.  Submodule 'ietf-snmp-proxy'\n   <CODE BEGINS> file \"ietf-snmp-proxy.yang\"\n
      \  submodule ietf-snmp-proxy {\n     belongs-to ietf-snmp {\n       prefix snmp;\n
      \    }\n     include ietf-snmp-common;\n     include ietf-snmp-target;\n     organization\n
      \      \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n     contact\n
      \      \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n        WG List:  <mailto:netmod@ietf.org>\n
      \       WG Chair: Thomas Nadeau\n                  <mailto:tnadeau@lucidvision.com>\n
      \       WG Chair: Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring SNMP proxies.\n        Copyright (c) 2014 IETF Trust
      and the persons identified as\n        authors of the code.  All rights reserved.\n
      \       Redistribution and use in source and binary forms, with or\n        without
      modification, is permitted pursuant to, and subject\n        to the license
      terms contained in, the Simplified BSD License\n        set forth in Section
      4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n
      \       (http://trustee.ietf.org/license-info).\n        This version of this
      YANG module is part of RFC 7407; see\n        the RFC itself for full legal
      notices.\";\n     reference\n       \"RFC 3413: Simple Network Management Protocol
      (SNMP)\n          Applications\";\n     revision 2014-12-10 {\n       description\n
      \        \"Initial revision.\";\n       reference\n         \"RFC 7407: A YANG
      Data Model for SNMP Configuration\";\n     }\n     feature proxy {\n       description\n
      \        \"A server implements this feature if it can act as an\n         SNMP
      proxy.\";\n       reference\n         \"RFC 3413: Simple Network Management
      Protocol (SNMP)\n            Applications\";\n     }\n     augment /snmp:snmp
      {\n       if-feature snmp:proxy;\n       list proxy {\n         key name;\n
      \        description\n           \"List of proxy parameters.\";\n         reference\n
      \          \"RFC 3413: Simple Network Management Protocol (SNMP).\n              Applications.\n
      \             SNMP-PROXY-MIB.snmpProxyTable\";\n         leaf name {\n           type
      snmp:identifier;\n           description\n             \"Identifies the proxy
      parameter entry.\";\n           reference\n             \"RFC 3413: Simple Network
      Management Protocol (SNMP).\n                Applications.\n                SNMP-PROXY-MIB.snmpProxyName\";\n
      \        }\n         leaf type {\n           type enumeration {\n             enum
      read { value 1; }\n             enum write { value 2; }\n             enum trap
      { value 3; }\n             enum inform { value 4; }\n           }\n           mandatory
      true;\n           reference\n             \"RFC 3413: Simple Network Management
      Protocol (SNMP).\n                Applications.\n                SNMP-PROXY-MIB.snmpProxyType\";\n
      \        }\n         leaf context-engine-id {\n           type snmp:engine-id;\n
      \          mandatory true;\n           reference\n             \"RFC 3413: Simple
      Network Management Protocol (SNMP).\n                Applications.\n                SNMP-PROXY-MIB.snmpProxyContextEngineID\";\n
      \        }\n         leaf context-name {\n           type snmp:context-name;\n
      \          reference\n             \"RFC 3413: Simple Network Management Protocol
      (SNMP).\n                Applications.\n                SNMP-PROXY-MIB.snmpProxyContextName\";\n
      \        }\n         leaf target-params-in {\n           type snmp:identifier;\n
      \          description\n             \"The name of a target parameters list
      entry.\n              Implementations MAY restrict the values of this\n              leaf
      to be one of the available values of\n              /snmp/target-params/name
      in a valid configuration.\";\n           reference\n             \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-PROXY-MIB.snmpProxyTargetParamsIn\";\n         }\n         leaf
      single-target-out {\n           when \"../type = 'read' or ../type = 'write'\";\n
      \          type snmp:identifier;\n           description\n             \"Implementations
      MAY restrict the values of this leaf\n              to be one of the available
      values of /snmp/target/name in\n              a valid configuration.\";\n           reference\n
      \            \"RFC 3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-PROXY-MIB.snmpProxySingleTargetOut\";\n         }\n         leaf
      multiple-target-out {\n           when \"../type = 'trap' or ../type = 'inform'\";\n
      \          type snmp:tag-value;\n           description\n             \"Implementations
      MAY restrict the values of this leaf\n              to be one of the available
      values of /snmp/target/tag in\n              a valid configuration.\";\n           reference\n
      \            \"RFC 3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-PROXY-MIB.snmpProxyMultipleTargetOut\";\n         }\n       }\n
      \    }\n   }\n   <CODE ENDS>\n"
    title: 4.7.  Submodule 'ietf-snmp-proxy'
  - contents:
    - "4.8.  Submodule 'ietf-snmp-community'\n   <CODE BEGINS> file \"ietf-snmp-community.yang\"\n
      \  submodule ietf-snmp-community {\n     belongs-to ietf-snmp {\n       prefix
      snmp;\n     }\n     import ietf-netconf-acm {\n       prefix nacm;\n     }\n
      \    include ietf-snmp-common;\n     include ietf-snmp-target;\n     include
      ietf-snmp-proxy;\n     organization\n       \"IETF NETMOD (NETCONF Data Modeling
      Language) Working Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring community-based SNMP.\n        Copyright (c) 2014 IETF
      Trust and the persons identified as\n        authors of the code.  All rights
      reserved.\n        Redistribution and use in source and binary forms, with or\n
      \       without modification, is permitted pursuant to, and subject\n        to
      the license terms contained in, the Simplified BSD License\n        set forth
      in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF
      Documents\n        (http://trustee.ietf.org/license-info).\n        This version
      of this YANG module is part of RFC 7407; see\n        the RFC itself for full
      legal notices.\";\n     reference\n       \"RFC 3584: Coexistence between Version
      1, Version 2, and\n          Version 3 of the Internet-standard Network\n          Management
      Framework\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     augment /snmp:snmp {\n       list community {\n
      \        key index;\n         description\n           \"List of communities.\";\n
      \        reference\n           \"RFC 3584: Coexistence between Version 1, Version
      2,\n              and Version 3 of the Internet-standard\n              Network
      Management Framework.\n              SNMP-COMMUNITY-MIB.snmpCommunityTable\";\n
      \        leaf index {\n           type snmp:identifier;\n           description\n
      \            \"Index into the community list.\";\n           reference\n             \"RFC
      3584: Coexistence between Version 1, Version 2,\n                and Version
      3 of the Internet-standard\n                Network Management Framework.\n
      \               SNMP-COMMUNITY-MIB.snmpCommunityIndex\";\n         }\n         choice
      name {\n           nacm:default-deny-all;\n           description\n             \"The
      community name, specified as either a string or\n              a binary value.
      \ The binary name is used when the\n              community name contains characters
      that are not legal\n              in a string.\n              If not set, the
      value of 'security-name' is operationally\n              used as the snmpCommunityName.\";\n
      \          reference\n             \"RFC 3584: Coexistence between Version 1,
      Version 2,\n                and Version 3 of the Internet-standard\n                Network
      Management Framework.\n                SNMP-COMMUNITY-MIB.snmpCommunityName\";\n
      \          leaf text-name {\n             type string;\n             description\n
      \              \"A community name that can be represented as a\n                YANG
      string.\";\n           }\n           leaf binary-name {\n             type binary;\n
      \            description\n               \"A community name represented as a
      binary value.\";\n           }\n         }\n         leaf security-name {\n
      \          type snmp:security-name;\n           mandatory true;\n           nacm:default-deny-all;\n
      \          description\n             \"The snmpCommunitySecurityName of this
      entry.\";\n           reference\n             \"RFC 3584: Coexistence between
      Version 1, Version 2,\n                and Version 3 of the Internet-standard\n
      \               Network Management Framework.\n                SNMP-COMMUNITY-MIB.snmpCommunitySecurityName\";\n
      \        }\n         leaf engine-id {\n           if-feature snmp:proxy;\n           type
      snmp:engine-id;\n           description\n             \"If not set, the value
      of the local SNMP engine is\n              operationally used by the device.\";\n
      \          reference\n             \"RFC 3584: Coexistence between Version 1,
      Version 2,\n                and Version 3 of the Internet-standard\n                Network
      Management Framework.\n                SNMP-COMMUNITY-MIB.snmpCommunityContextEngineID\";\n
      \        }\n         leaf context {\n           type snmp:context-name;\n           default
      \"\";\n           description\n             \"The context in which management
      information is accessed\n              when using the community string specified
      by this entry.\";\n           reference\n             \"RFC 3584: Coexistence
      between Version 1, Version 2,\n                and Version 3 of the Internet-standard\n
      \               Network Management Framework.\n                SNMP-COMMUNITY-MIB.snmpCommunityContextName\";\n
      \        }\n         leaf target-tag {\n           type snmp:tag-value;\n           description\n
      \            \"Used to limit access for this community to the specified\n              targets.\n
      \             Implementations MAY restrict the values of this leaf\n              to
      be one of the available values of /snmp/target/tag in\n              a valid
      configuration.\";\n           reference\n             \"RFC 3584: Coexistence
      between Version 1, Version 2,\n                and Version 3 of the Internet-standard\n
      \               Network Management Framework.\n                SNMP-COMMUNITY-MIB.snmpCommunityTransportTag\";\n
      \        }\n       }\n     }\n     grouping v1-target-params {\n       container
      v1 {\n         description\n           \"SNMPv1 parameters type.\n            Represents
      snmpTargetParamsMPModel '0',\n            snmpTargetParamsSecurityModel '1',
      and\n            snmpTargetParamsSecurityLevel 'noAuthNoPriv'.\";\n         leaf
      security-name {\n           type snmp:security-name;\n           mandatory true;\n
      \          description\n             \"Implementations MAY restrict the values
      of this leaf\n              to be one of the available values of\n              /snmp/community/security-name
      in a valid configuration.\";\n           reference\n             \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetParamsSecurityName\";\n         }\n
      \      }\n     }\n     grouping v2c-target-params {\n       container v2c {\n
      \        description\n           \"SNMPv2 community parameters type.\n            Represents
      snmpTargetParamsMPModel '1',\n            snmpTargetParamsSecurityModel '2',
      and\n            snmpTargetParamsSecurityLevel 'noAuthNoPriv'.\";\n         leaf
      security-name {\n           type snmp:security-name;\n           mandatory true;\n
      \          description\n             \"Implementations MAY restrict the values
      of this leaf\n              to be one of the available values of\n              /snmp/community/security-name
      in a valid configuration.\";\n           reference\n             \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetParamsSecurityName\";\n         }\n
      \      }\n     }\n     augment /snmp:snmp/snmp:target-params/snmp:params {\n
      \      case v1 {\n         uses v1-target-params;\n       }\n       case v2c
      {\n         uses v2c-target-params;\n       }\n     }\n     augment /snmp:snmp/snmp:target
      {\n       when \"snmp:v1 or snmp:v2c\";\n       leaf mms {\n         type union
      {\n           type enumeration {\n             enum \"unknown\" { value 0; }\n
      \          }\n           type int32 {\n             range \"484..max\";\n           }\n
      \        }\n         default \"484\";\n         description\n           \"The
      maximum message size.\";\n         reference\n           \"RFC 3584: Coexistence
      between Version 1, Version 2,\n              and Version 3 of the Internet-standard\n
      \             Network Management Framework.\n              SNMP-COMMUNITY-MIB.snmpTargetAddrMMS\";\n
      \      }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.8.  Submodule 'ietf-snmp-community'
  - contents:
    - "4.9.  Submodule 'ietf-snmp-vacm'\n   <CODE BEGINS> file \"ietf-snmp-vacm.yang\"\n
      \  submodule ietf-snmp-vacm {\n     belongs-to ietf-snmp {\n       prefix snmp;\n
      \    }\n     include ietf-snmp-common;\n     organization\n       \"IETF NETMOD
      (NETCONF Data Modeling Language) Working Group\";\n     contact\n       \"WG
      Web:   <http://tools.ietf.org/wg/netmod/>\n        WG List:  <mailto:netmod@ietf.org>\n
      \       WG Chair: Thomas Nadeau\n                  <mailto:tnadeau@lucidvision.com>\n
      \       WG Chair: Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions\n
      \       for configuring the View-based Access Control Model (VACM)\n        of
      SNMP.\n        Copyright (c) 2014 IETF Trust and the persons identified as\n
      \       authors of the code.  All rights reserved.\n        Redistribution and
      use in source and binary forms, with or\n        without modification, is permitted
      pursuant to, and subject\n        to the license terms contained in, the Simplified
      BSD License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n
      \       Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n
      \       This version of this YANG module is part of RFC 7407; see\n        the
      RFC itself for full legal notices.\";\n     reference\n       \"RFC 3415: View-based
      Access Control Model (VACM) for the\n          Simple Network Management Protocol
      (SNMP)\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     typedef view-name {\n       type snmp:identifier;\n
      \      description\n         \"The view-name type represents an SNMP VACM view
      name.\";\n     }\n     typedef group-name {\n       type snmp:identifier;\n
      \      description\n         \"The group-name type represents an SNMP VACM group
      name.\";\n     }\n     augment /snmp:snmp {\n       container vacm {\n         description\n
      \          \"Configuration of the View-based Access Control Model.\";\n         list
      group {\n           key name;\n           description\n             \"VACM groups.\n
      \             This data model has a different structure than the MIB.\n              Groups
      are explicitly defined in this list, and group\n              members are defined
      in the 'member' list (mapped to\n              vacmSecurityToGroupTable), and
      access for the group is\n              defined in the 'access' list (mapped
      to\n              vacmAccessTable).\";\n           reference\n             \"RFC
      3415: View-based Access Control Model (VACM) for the\n                Simple
      Network Management Protocol (SNMP).\n                SNMP-VIEW-BASED-ACM-MIB.vacmSecurityToGroupTable\n
      \               SNMP-VIEW-BASED-ACM-MIB.vacmAccessTable\";\n           leaf
      name {\n             type group-name;\n             description\n               \"The
      name of this VACM group.\";\n             reference\n               \"RFC 3415:
      View-based Access Control Model (VACM) for the\n                  Simple Network
      Management Protocol (SNMP).\n                  SNMP-VIEW-BASED-ACM-MIB.vacmGroupName\";\n
      \          }\n           list member {\n             key \"security-name\";\n
      \            description\n               \"A member of this VACM group.\n                A
      specific combination of security-name and\n                security-model MUST
      NOT be present in more than\n                one group.\";\n             reference\n
      \              \"RFC 3415: View-based Access Control Model (VACM) for the\n
      \                 Simple Network Management Protocol (SNMP).\n                  SNMP-VIEW-BASED-ACM-MIB.vacmSecurityToGroupTable\";\n
      \            leaf security-name {\n               type snmp:security-name;\n
      \              description\n                 \"The securityName of a group member.\";\n
      \              reference\n                 \"RFC 3415: View-based Access Control
      Model (VACM) for\n                    the Simple Network Management Protocol
      (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmSecurityName\";\n             }\n
      \            leaf-list security-model {\n               type snmp:security-model;\n
      \              min-elements 1;\n               description\n                 \"The
      security models under which this security-name\n                  is a member
      of this group.\";\n               reference\n                 \"RFC 3415: View-based
      Access Control Model (VACM) for\n                    the Simple Network Management
      Protocol (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmSecurityModel\";\n
      \            }\n           }\n           list access {\n             key \"context
      security-model security-level\";\n             description\n               \"Definition
      of access right for groups.\";\n             reference\n               \"RFC
      3415: View-based Access Control Model (VACM) for\n                  the Simple
      Network Management Protocol (SNMP).\n                  SNMP-VIEW-BASED-ACM-MIB.vacmAccessTable\";\n
      \            leaf context {\n               type snmp:context-name;\n               description\n
      \                \"The context (prefix) under which the access rights\n                  apply.\";\n
      \              reference\n                 \"RFC 3415: View-based Access Control
      Model (VACM) for\n                    the Simple Network Management Protocol
      (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessContextPrefix\";\n
      \            }\n             leaf context-match {\n               type enumeration
      {\n                 enum exact { value 1; }\n                 enum prefix {
      value 2; }\n               }\n               default exact;\n               reference\n
      \                \"RFC 3415: View-based Access Control Model (VACM) for\n                    the
      Simple Network Management Protocol (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessContextMatch\";\n
      \            }\n             leaf security-model {\n               type snmp:security-model-or-any;\n
      \              description\n                 \"The security model under which
      the access rights\n                 apply.\";\n               reference\n                 \"RFC
      3415: View-based Access Control Model (VACM) for\n                    the Simple
      Network Management Protocol (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessSecurityModel\";\n
      \            }\n             leaf security-level {\n               type snmp:security-level;\n
      \              description\n                 \"The minimum security level under
      which the access\n                  rights apply.\";\n               reference\n
      \                \"RFC 3415: View-based Access Control Model (VACM) for\n                    the
      Simple Network Management Protocol (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessSecurityLevel\";\n
      \            }\n             leaf read-view {\n               type view-name;\n
      \              description\n                 \"The name of the MIB view of the
      SNMP context\n                  authorizing read access.  If this leaf does
      not\n                  exist in a configuration, it maps to a zero-length\n
      \                 vacmAccessReadViewName.\n                  Implementations
      MAY restrict the values of this\n                  leaf to be one of the available
      values of\n                  /snmp/vacm/view/name in a valid configuration.\";\n
      \              reference\n                 \"RFC 3415: View-based Access Control
      Model (VACM) for\n                    the Simple Network Management Protocol
      (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessReadViewName\";\n
      \            }\n             leaf write-view {\n               type view-name;\n
      \              description\n                 \"The name of the MIB view of the
      SNMP context\n                  authorizing write access.  If this leaf does
      not\n                  exist in a configuration, it maps to a zero-length\n
      \                 vacmAccessWriteViewName.\n                  Implementations
      MAY restrict the values of this\n                  leaf to be one of the available
      values of\n                  /snmp/vacm/view/name in a valid configuration.\";\n
      \              reference\n                 \"RFC 3415: View-based Access Control
      Model (VACM) for\n                    the Simple Network Management Protocol
      (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmAccessWriteViewName\";\n
      \            }\n             leaf notify-view {\n               type view-name;\n
      \              description\n                 \"The name of the MIB view of the
      SNMP context\n                  authorizing notify access.  If this leaf does
      not\n                  exist in a configuration, it maps to a zero-length\n
      \                 vacmAccessNotifyViewName.\n                  Implementations
      MAY restrict the values of this\n                  leaf to be one of the available
      values of\n                  /snmp/vacm/view/name in a valid configuration.\";\n
      \              reference\n                 \"RFC 3415: View-based Access Control
      Model (VACM) for\n                      the Simple Network Management Protocol
      (SNMP).\n                      SNMP-VIEW-BASED-ACM-MIB.vacmAccessNotifyViewName\";\n
      \            }\n           }\n         }\n         list view {\n           key
      name;\n           description\n             \"Definition of MIB views.\";\n
      \          reference\n             \"RFC 3415: View-based Access Control Model
      (VACM) for\n                the Simple Network Management Protocol (SNMP).\n
      \               SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyTable\";\n           leaf
      name {\n             type view-name;\n             description\n               \"The
      name of this VACM MIB view.\";\n             reference\n               \"RFC
      3415: View-based Access Control Model (VACM) for\n                  the Simple
      Network Management Protocol (SNMP).\n                  SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyName\";\n
      \          }\n           leaf-list include {\n             type snmp:wildcard-object-identifier;\n
      \            description\n               \"A family of subtrees included in
      this MIB view.\";\n             reference\n                 \"RFC 3415: View-based
      Access Control Model (VACM) for\n                    the Simple Network Management
      Protocol (SNMP).\n                    SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilySubtree\n
      \                   SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyMask\n                    SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyType\";\n
      \          }\n           leaf-list exclude {\n             type snmp:wildcard-object-identifier;\n
      \            description\n               \"A family of subtrees excluded from
      this MIB view.\";\n             reference\n               \"RFC 3415: View-based
      Access Control Model (VACM) for\n                  the Simple Network Management
      Protocol (SNMP).\n                  SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilySubtree\n
      \                 SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyMask\n                  SNMP-VIEW-BASED-ACM-MIB.vacmViewTreeFamilyType\";\n
      \          }\n         }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.9.  Submodule 'ietf-snmp-vacm'
  - contents:
    - "4.10.  Submodule 'ietf-snmp-usm'\n   This YANG submodule imports YANG extensions
      from [RFC6536].\n   <CODE BEGINS> file \"ietf-snmp-usm.yang\"\n   submodule
      ietf-snmp-usm {\n     belongs-to ietf-snmp {\n       prefix snmp;\n     }\n
      \    import ietf-yang-types {\n       prefix yang;\n     }\n     import ietf-netconf-acm
      {\n       prefix nacm;\n     }\n     include ietf-snmp-common;\n     include
      ietf-snmp-target;\n     include ietf-snmp-proxy;\n     organization\n       \"IETF
      NETMOD (NETCONF Data Modeling Language) Working Group\";\n     contact\n       \"WG
      Web:   <http://tools.ietf.org/wg/netmod/>\n        WG List:  <mailto:netmod@ietf.org>\n
      \       WG Chair: Thomas Nadeau\n                  <mailto:tnadeau@lucidvision.com>\n
      \       WG Chair: Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions
      for\n        configuring the User-based Security Model (USM) of SNMP.\n        Copyright
      (c) 2014 IETF Trust and the persons identified as\n        authors of the code.
      \ All rights reserved.\n        Redistribution and use in source and binary
      forms, with or\n        without modification, is permitted pursuant to, and
      subject\n        to the license terms contained in, the Simplified BSD License\n
      \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
      to IETF Documents\n        (http://trustee.ietf.org/license-info).\n        This
      version of this YANG module is part of RFC 7407; see\n        the RFC itself
      for full legal notices.\";\n     reference\n       \"RFC 3414: User-based Security
      Model (USM) for version 3 of the\n          Simple Network Management Protocol
      (SNMPv3)\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     grouping key {\n       leaf key {\n         type
      yang:hex-string;\n         mandatory true;\n         nacm:default-deny-all;\n
      \        description\n           \"Localized key specified as a list of colon-specified\n
      \           hexadecimal octets.\";\n       }\n     }\n     grouping user-list
      {\n       list user {\n         key \"name\";\n         reference\n           \"RFC
      3414: User-based Security Model (USM) for version 3\n              of the Simple
      Network Management Protocol (SNMPv3).\n              SNMP-USER-BASED-SM-MIB.usmUserTable\";\n
      \        leaf name {\n           type snmp:identifier;\n           reference\n
      \            \"RFC 3414: User-based Security Model (USM) for version 3\n                of
      the Simple Network Management Protocol (SNMPv3).\n                SNMP-USER-BASED-SM-MIB.usmUserName\";\n
      \        }\n         container auth {\n           presence \"enables authentication\";\n
      \          description\n             \"Enables authentication of the user.\";\n
      \          choice protocol {\n             mandatory true;\n             reference\n
      \              \"RFC 3414: User-based Security Model (USM) for version 3\n                  of
      the Simple Network Management Protocol (SNMPv3).\n                  SNMP-USER-BASED-SM-MIB.usmUserAuthProtocol\";\n
      \            container md5 {\n               uses key;\n               reference\n
      \                \"RFC 3414: User-based Security Model (USM) for\n                    version
      3 of the Simple Network Management Protocol\n                    (SNMPv3).\n
      \                   SNMP-USER-BASED-SM-MIB.usmHMACMD5AuthProtocol\";\n             }\n
      \            container sha {\n               uses key;\n               reference\n
      \                \"RFC 3414: User-based Security Model (USM) for\n                    version
      3 of the Simple Network Management Protocol\n                    (SNMPv3).\n
      \                   SNMP-USER-BASED-SM-MIB.usmHMACSHAAuthProtocol\";\n             }\n
      \          }\n         }\n         container priv {\n           must \"../auth\"
      {\n             error-message\n               \"when privacy (confidentiality)
      is used, \"\n             + \"authentication must also be used\";\n           }\n
      \          presence \"enables encryption\";\n           description\n             \"Enables
      encryption of SNMP messages.\";\n           choice protocol {\n             mandatory
      true;\n             reference\n               \"RFC 3414: User-based Security
      Model (USM) for version 3\n                  of the Simple Network Management
      Protocol (SNMPv3).\n                  SNMP-USER-BASED-SM-MIB.usmUserPrivProtocol\";\n
      \            container des {\n               uses key;\n               reference\n
      \                \"RFC 3414: User-based Security Model (USM) for\n                    version
      3 of the Simple Network Management Protocol\n                    (SNMPv3).\n
      \                   SNMP-USER-BASED-SM-MIB.usmDESPrivProtocol\";\n             }\n
      \            container aes {\n               uses key;\n               reference\n
      \                \"RFC 3826: The Advanced Encryption Standard (AES)\n                    Cipher
      Algorithm in the SNMP User-based Security\n                    Model.\n                    SNMP-USM-AES-MIB.usmAesCfb128Protocol\";\n
      \            }\n           }\n         }\n       }\n     }\n     augment /snmp:snmp
      {\n       container usm {\n         description\n           \"Configuration
      of the User-based Security Model.\";\n         container local {\n           uses
      user-list;\n         }\n         list remote {\n           key \"engine-id\";\n
      \          leaf engine-id {\n             type snmp:engine-id;\n             reference\n
      \              \"RFC 3414: User-based Security Model (USM) for version 3\n                  of
      the Simple Network Management Protocol (SNMPv3).\n                  SNMP-USER-BASED-SM-MIB.usmUserEngineID\";\n
      \          }\n           uses user-list;\n         }\n       }\n     }\n     grouping
      usm-target-params {\n       container usm {\n         description\n           \"User-based
      SNMPv3 parameters type.\n            Represents snmpTargetParamsMPModel '3'
      and\n            snmpTargetParamsSecurityModel '3'.\";\n         leaf user-name
      {\n           type snmp:security-name;\n           mandatory true;\n           reference\n
      \            \"RFC 3413: Simple Network Management Protocol (SNMP).\n                Applications.\n
      \               SNMP-TARGET-MIB.snmpTargetParamsSecurityName\";\n         }\n
      \        leaf security-level {\n           type snmp:security-level;\n           mandatory
      true;\n           reference\n             \"RFC 3413: Simple Network Management
      Protocol (SNMP).\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetParamsSecurityLevel\";\n
      \        }\n       }\n     }\n     augment /snmp:snmp/snmp:target-params/snmp:params
      {\n       case usm {\n         uses usm-target-params;\n       }\n     }\n   }\n
      \  <CODE ENDS>\n"
    title: 4.10.  Submodule 'ietf-snmp-usm'
  - contents:
    - "4.11.  Submodule 'ietf-snmp-tsm'\n   <CODE BEGINS> file \"ietf-snmp-tsm.yang\"\n
      \  submodule ietf-snmp-tsm {\n     belongs-to ietf-snmp {\n       prefix snmp;\n
      \    }\n     include ietf-snmp-common;\n     include ietf-snmp-target;\n     include
      ietf-snmp-proxy;\n     organization\n       \"IETF NETMOD (NETCONF Data Modeling
      Language) Working Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions
      for\n        configuring the Transport Security Model (TSM) of SNMP.\n        Copyright
      (c) 2014 IETF Trust and the persons identified as\n        authors of the code.
      \ All rights reserved.\n        Redistribution and use in source and binary
      forms, with or\n        without modification, is permitted pursuant to, and
      subject\n        to the license terms contained in, the Simplified BSD License\n
      \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
      to IETF Documents\n        (http://trustee.ietf.org/license-info).\n        This
      version of this YANG module is part of RFC 7407; see\n        the RFC itself
      for full legal notices.\";\n     reference\n       \"RFC 5591: Transport Security
      Model for the\n          Simple Network Management Protocol (SNMP)\";\n     revision
      2014-12-10 {\n       description\n         \"Initial revision.\";\n       reference\n
      \        \"RFC 7407: A YANG Data Model for SNMP Configuration\";\n     }\n     feature
      tsm {\n       description\n         \"A server implements this feature if it
      supports the\n         Transport Security Model for SNMP.\";\n       reference\n
      \        \"RFC 5591: Transport Security Model for the\n            Simple Network
      Management Protocol (SNMP)\";\n     }\n     augment /snmp:snmp {\n       if-feature
      tsm;\n       container tsm {\n         description\n           \"Configuration
      of the Transport Security Model.\";\n         leaf use-prefix {\n           type
      boolean;\n           default false;\n           reference\n             \"RFC
      5591: Transport Security Model for the Simple\n                Network Management
      Protocol (SNMP).\n                SNMP-TSM-MIB.snmpTsmConfigurationUsePrefix\";\n
      \        }\n       }\n     }\n     grouping tsm-target-params {\n       container
      tsm {\n         description\n           \"Transport-based security SNMPv3 parameters
      type.\n            Represents snmpTargetParamsMPModel '3' and\n            snmpTargetParamsSecurityModel
      '4'.\";\n         leaf security-name {\n           type snmp:security-name;\n
      \          mandatory true;\n           reference\n             \"RFC 3413: Simple
      Network Management Protocol (SNMP).\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetParamsSecurityName\";\n
      \        }\n         leaf security-level {\n           type snmp:security-level;\n
      \          mandatory true;\n           reference\n             \"RFC 3413: Simple
      Network Management Protocol (SNMP).\n                Applications.\n                SNMP-TARGET-MIB.snmpTargetParamsSecurityLevel\";\n
      \        }\n       }\n     }\n     augment /snmp:snmp/snmp:target-params/snmp:params
      {\n       if-feature tsm;\n       case tsm {\n         uses tsm-target-params;\n
      \      }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.11.  Submodule 'ietf-snmp-tsm'
  - contents:
    - "4.12.  Submodule 'ietf-snmp-tls'\n   <CODE BEGINS> file \"ietf-snmp-tls.yang\"\n
      \  submodule ietf-snmp-tls {\n     belongs-to ietf-snmp {\n       prefix snmp;\n
      \    }\n     import ietf-inet-types {\n       prefix inet;\n     }\n     import
      ietf-x509-cert-to-name {\n       prefix x509c2n;\n     }\n     include ietf-snmp-common;\n
      \    include ietf-snmp-engine;\n     include ietf-snmp-target;\n     organization\n
      \      \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n     contact\n
      \      \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n        WG List:  <mailto:netmod@ietf.org>\n
      \       WG Chair: Thomas Nadeau\n                  <mailto:tnadeau@lucidvision.com>\n
      \       WG Chair: Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions
      for\n        configuring the Transport Layer Security Transport Model (TLSTM)\n
      \       of SNMP.\n        Copyright (c) 2014 IETF Trust and the persons identified
      as\n        authors of the code.  All rights reserved.\n        Redistribution
      and use in source and binary forms, with or\n        without modification, is
      permitted pursuant to, and subject\n        to the license terms contained in,
      the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
      Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n
      \       This version of this YANG module is part of RFC 7407; see\n        the
      RFC itself for full legal notices.\";\n     reference\n       \"RFC 6353: Transport
      Layer Security (TLS) Transport Model for\n          the Simple Network Management
      Protocol (SNMP)\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     feature tlstm {\n       description\n         \"A
      server implements this feature if it supports the\n         Transport Layer
      Security Transport Model for SNMP.\";\n       reference\n         \"RFC 6353:
      Transport Layer Security (TLS) Transport Model for\n            the Simple Network
      Management Protocol (SNMP)\";\n     }\n     augment /snmp:snmp/snmp:engine/snmp:listen/snmp:transport
      {\n       if-feature tlstm;\n       case tls {\n         container tls {\n           description\n
      \            \"A list of IPv4 and IPv6 addresses and ports to which the\n              engine
      listens for SNMP messages over TLS.\";\n           leaf ip {\n             type
      inet:ip-address;\n             mandatory true;\n             description\n               \"The
      IPv4 or IPv6 address on which the engine listens\n                for SNMP messages
      over TLS.\";\n           }\n           leaf port {\n             type inet:port-number;\n
      \            description\n               \"The TCP port on which the engine
      listens for SNMP\n                messages over TLS.\n                If the
      port is not configured, an engine that\n                acts as a Command Responder
      uses port 10161, and\n                an engine that acts as a Notification
      Receiver\n                uses port 10162.\";\n           }\n         }\n       }\n
      \      case dtls {\n         container dtls {\n           description\n             \"A
      list of IPv4 and IPv6 addresses and ports to which the\n              engine
      listens for SNMP messages over DTLS.\";\n           leaf ip {\n             type
      inet:ip-address;\n             mandatory true;\n             description\n               \"The
      IPv4 or IPv6 address on which the engine listens\n                for SNMP messages
      over DTLS.\";\n           }\n           leaf port {\n             type inet:port-number;\n
      \            description\n               \"The UDP port on which the engine
      listens for SNMP\n                messages over DTLS.\n                If the
      port is not configured, an engine that\n                acts as a Command Responder
      uses port 10161, and\n                an engine that acts as a Notification
      Receiver\n                uses port 10162.\";\n           }\n         }\n       }\n
      \    }\n     augment /snmp:snmp {\n       if-feature tlstm;\n       container
      tlstm {\n         uses x509c2n:cert-to-name {\n           description\n             \"Defines
      how certificates are mapped to names.  The\n              resulting name is
      used as a security name.\";\n           refine cert-to-name/map-type {\n             description\n
      \              \"Mappings that use the snmpTlstmCertToTSNData column\n                need
      to augment the cert-to-name list with\n                additional configuration
      objects corresponding\n                to the snmpTlstmCertToTSNData value.
      \ Such objects\n                should use the 'when' statement to make them\n
      \               conditional based on the map-type.\";\n           }\n         }\n
      \      }\n     }\n     grouping tls-transport {\n       leaf ip {\n         type
      inet:host;\n         mandatory true;\n         reference\n           \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n              Applications.\n              SNMP-TARGET-MIB.snmpTargetAddrTAddress\n
      \           RFC 6353: Transport Layer Security (TLS) Transport Model\n              for
      the Simple Network Management Protocol (SNMP).\n              SNMP-TLS-TM-MIB.SnmpTLSAddress\";\n
      \      }\n       leaf port {\n         type inet:port-number;\n         default
      10161;\n         reference\n           \"RFC 3413: Simple Network Management
      Protocol (SNMP).\n              Applications.\n              SNMP-TARGET-MIB.snmpTargetAddrTAddress\n
      \           RFC 6353: Transport Layer Security (TLS) Transport Model\n              for
      the Simple Network Management Protocol (SNMP).\n              SNMP-TLS-TM-MIB.SnmpTLSAddress\";\n
      \      }\n       leaf client-fingerprint {\n         type x509c2n:tls-fingerprint;\n
      \        reference\n           \"RFC 6353: Transport Layer Security (TLS) Transport
      Model\n              for the Simple Network Management Protocol (SNMP).\n              SNMP-TLS-TM-MIB.snmpTlstmParamsClientFingerprint\";\n
      \      }\n       leaf server-fingerprint {\n         type x509c2n:tls-fingerprint;\n
      \        reference\n           \"RFC 6353: Transport Layer Security (TLS) Transport
      Model\n              for the Simple Network Management Protocol (SNMP).\n              SNMP-TLS-TM-MIB.snmpTlstmAddrServerFingerprint\";\n
      \      }\n       leaf server-identity {\n         type snmp:admin-string;\n
      \        reference\n           \"RFC 6353: Transport Layer Security (TLS) Transport
      Model\n              for the Simple Network Management Protocol (SNMP).\n              SNMP-TLS-TM-MIB.snmpTlstmAddrServerIdentity\";\n
      \      }\n     }\n     augment /snmp:snmp/snmp:target/snmp:transport {\n       if-feature
      tlstm;\n       case tls {\n         reference\n           \"RFC 6353: Transport
      Layer Security (TLS) Transport Model\n              for the Simple Network Management
      Protocol (SNMP).\n              SNMP-TLS-TM-MIB.snmpTLSTCPDomain\";\n         container
      tls {\n           uses tls-transport;\n         }\n       }\n     }\n     augment
      /snmp:snmp/snmp:target/snmp:transport {\n       if-feature tlstm;\n       case
      dtls {\n         reference\n           \"RFC 6353: Transport Layer Security
      (TLS) Transport Model\n              for the Simple Network Management Protocol
      (SNMP).\n              SNMP-TLS-TM-MIB.snmpDTLSUDPDomain\";\n         container
      dtls {\n           uses tls-transport;\n         }\n       }\n     }\n   }\n
      \  <CODE ENDS>\n"
    title: 4.12.  Submodule 'ietf-snmp-tls'
  - contents:
    - "4.13.  Submodule 'ietf-snmp-ssh'\n   <CODE BEGINS> file \"ietf-snmp-ssh.yang\"\n
      \  submodule ietf-snmp-ssh {\n     belongs-to ietf-snmp {\n       prefix snmp;\n
      \    }\n     import ietf-inet-types {\n       prefix inet;\n     }\n     include
      ietf-snmp-common;\n     include ietf-snmp-engine;\n     include ietf-snmp-target;\n
      \    organization\n       \"IETF NETMOD (NETCONF Data Modeling Language) Working
      Group\";\n     contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n
      \       WG List:  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n
      \                 <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen
      Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\n
      \       Editor:   Juergen Schoenwaelder\n                  <mailto:j.schoenwaelder@jacobs-university.de>\";\n
      \    description\n       \"This submodule contains a collection of YANG definitions
      for\n        configuring the Secure Shell Transport Model (SSHTM)\n        of
      SNMP.\n        Copyright (c) 2014 IETF Trust and the persons identified as\n
      \       authors of the code.  All rights reserved.\n        Redistribution and
      use in source and binary forms, with or\n        without modification, is permitted
      pursuant to, and subject\n        to the license terms contained in, the Simplified
      BSD License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n
      \       Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n
      \       This version of this YANG module is part of RFC 7407; see\n        the
      RFC itself for full legal notices.\";\n     reference\n       \"RFC 5592: Secure
      Shell Transport Model for the\n          Simple Network Management Protocol
      (SNMP)\";\n     revision 2014-12-10 {\n       description\n         \"Initial
      revision.\";\n       reference\n         \"RFC 7407: A YANG Data Model for SNMP
      Configuration\";\n     }\n     feature sshtm {\n       description\n         \"A
      server implements this feature if it supports the\n         Secure Shell Transport
      Model for SNMP.\";\n       reference\n         \"RFC 5592: Secure Shell Transport
      Model for the\n            Simple Network Management Protocol (SNMP)\";\n     }\n
      \    augment /snmp:snmp/snmp:engine/snmp:listen/snmp:transport {\n       if-feature
      sshtm;\n       case ssh {\n         container ssh {\n           description\n
      \            \"The IPv4 or IPv6 address and port to which the\n              engine
      listens for SNMP messages over SSH.\";\n           leaf ip {\n             type
      inet:ip-address;\n             mandatory true;\n             description\n               \"The
      IPv4 or IPv6 address on which the engine listens\n                for SNMP messages
      over SSH.\";\n           }\n           leaf port {\n             type inet:port-number;\n
      \            description\n               \"The TCP port on which the engine
      listens for SNMP\n                messages over SSH.\n                If the
      port is not configured, an engine that\n                acts as a Command Responder
      uses port 5161, and\n                an engine that acts as a Notification Receiver\n
      \               uses port 5162.\";\n           }\n         }\n       }\n     }\n
      \    augment /snmp:snmp/snmp:target/snmp:transport {\n       if-feature sshtm;\n
      \      case ssh {\n         reference\n           \"RFC 5592: Secure Shell Transport
      Model for the\n              Simple Network Management Protocol (SNMP).\n              SNMP-SSH-TM-MIB.snmpSSHDomain\";\n
      \        container ssh {\n           leaf ip {\n             type inet:host;\n
      \            mandatory true;\n             reference\n               \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                  Applications.\n
      \                 SNMP-TARGET-MIB.snmpTargetAddrTAddress\n                RFC
      5592: Secure Shell Transport Model for the\n                  Simple Network
      Management Protocol (SNMP).\n                  SNMP-SSH-TM-MIB.SnmpSSHAddress\";\n
      \          }\n           leaf port {\n             type inet:port-number;\n
      \            default 5161;\n             reference\n               \"RFC 3413:
      Simple Network Management Protocol (SNMP).\n                  Applications.\n
      \                 SNMP-TARGET-MIB.snmpTargetAddrTAddress\n                RFC
      5592: Secure Shell Transport Model for the\n                  Simple Network
      Management Protocol (SNMP).\n                  SNMP-SSH-TM-MIB.SnmpSSHAddress\";\n
      \          }\n           leaf username {\n             type string;\n             reference\n
      \              \"RFC 3413: Simple Network Management Protocol (SNMP).\n                  Applications.\n
      \                 SNMP-TARGET-MIB.snmpTargetAddrTAddress\n                RFC
      5592: Secure Shell Transport Model for the\n                  Simple Network
      Management Protocol (SNMP).\n                  SNMP-SSH-TM-MIB.SnmpSSHAddress\";\n
      \          }\n         }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.13.  Submodule 'ietf-snmp-ssh'
  title: 4.  Definitions
- contents:
  - "5.  IANA Considerations\n   This document registers two URIs in the \"IETF XML
    Registry\"\n   [RFC3688].  Following the format in RFC 3688, the following\n   registrations
    have been made.\n        URI: urn:ietf:params:xml:ns:yang:ietf-snmp\n        Registrant
    Contact: The NETMOD WG of the IETF.\n        XML: N/A, the requested URI is an
    XML namespace.\n        URI: urn:ietf:params:xml:ns:yang:ietf-x509-cert-to-name\n
    \       Registrant Contact: The NETMOD WG of the IETF.\n        XML: N/A, the
    requested URI is an XML namespace.\n   This document registers the following YANG
    modules in the \"YANG\n   Module Names\" registry [RFC6020].\n        name:         ietf-snmp\n
    \       namespace:    urn:ietf:params:xml:ns:yang:ietf-snmp\n        prefix:       snmp\n
    \       reference:    RFC 7407\n        name:         ietf-x509-cert-to-name\n
    \       namespace:    urn:ietf:params:xml:ns:yang:ietf-x509-cert-to-name\n        prefix:
    \      x509c2n\n        reference:    RFC 7407\n   The document registers the
    following YANG submodules in the \"YANG\n   Module Names\" registry [RFC6020].\n
    \       name:         ietf-snmp-common\n        parent:       ietf-snmp\n        reference:
    \   RFC 7407\n        name:         ietf-snmp-engine\n        parent:       ietf-snmp\n
    \       reference:    RFC 7407\n        name:         ietf-snmp-community\n        parent:
    \      ietf-snmp\n        reference:    RFC 7407\n        name:         ietf-snmp-notification\n
    \       parent:       ietf-snmp\n        reference:    RFC 7407\n        name:
    \        ietf-snmp-target\n        parent:       ietf-snmp\n        reference:
    \   RFC 7407\n        name:         ietf-snmp-vacm\n        parent:       ietf-snmp\n
    \       reference:    RFC 7407\n        name:         ietf-snmp-usm\n        parent:
    \      ietf-snmp\n        reference:    RFC 7407\n        name:         ietf-snmp-tsm\n
    \       parent:       ietf-snmp\n        reference:    RFC 7407\n        name:
    \        ietf-snmp-tls\n        parent:       ietf-snmp\n        reference:    RFC
    7407\n        name:         ietf-snmp-ssh\n        parent:       ietf-snmp\n        reference:
    \   RFC 7407\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The YANG module and submodules defined in this
    memo are designed to\n   be accessed via the NETCONF protocol [RFC6241].  The
    lowest NETCONF\n   layer is the secure transport layer and the mandatory to implement\n
    \  secure transport is SSH [RFC6242].  The NETCONF access control model\n   [RFC6536]
    provides the means to restrict access for particular\n   NETCONF users to a pre-configured
    subset of all available NETCONF\n   protocol operations and content.\n   There
    are a number of data nodes defined in the YANG module and\n   submodules which
    are writable/creatable/deletable (i.e., config true,\n   which is the default).
    \ These data nodes may be considered sensitive\n   or vulnerable in some network
    environments.  Write operations (e.g.,\n   edit-config) to these data nodes without
    proper protection can have a\n   negative effect on network operations.  These
    are the subtrees and\n   data nodes and their sensitivity/vulnerability:\n   o
    \ The \"/snmp/engine\" subtree contains the configuration of general\n      parameters
    of an SNMP engine such as the endpoints to listen on,\n      the transports and
    SNMP versions enabled, or the engine's\n      identity.  Write access to this
    subtree should only be granted to\n      entities configuring general SNMP engine
    parameters.\n   o  The \"/snmp/target\" subtree contains the configuration of
    SNMP\n      targets and, in particular, which transports to use and their\n      security
    parameters.  Write access to this subtree should only be\n      granted to the
    security administrator and entities configuring\n      SNMP notification forwarding
    behavior.\n   o  The \"/snmp/notify\" and \"/snmp/notify-filter-profile\" subtrees\n
    \     contain the configuration for the SNMP notification forwarding and\n      filtering
    mechanism.  Write access to these subtrees should only\n      be granted to entities
    configuring SNMP notification forwarding\n      behavior.\n   o  The \"/snmp/proxy\"
    subtree contains the configuration for SNMP\n      proxies.  Write access to this
    subtree should only be granted to\n      entities configuring SNMP proxies.\n
    \  o  The \"/snmp/community\" subtree contains the configuration of the\n      Community-based
    Security Model.  Write access to this subtree\n      should only be granted to
    the security administrator.\n   o  The \"/snmp/usm\" subtree contains the configuration
    of the User-\n      based Security Model.  Write access to this subtree should
    only be\n      granted to the security administrator.\n   o  The \"/snmp/tsm\"
    subtree contains the configuration of the\n      Transport Layer Security (TLS)
    Transport Model for SNMP.  Write\n      access to this subtree should only be
    granted to the security\n      administrator.\n   o  The \"/snmp/tlstm\" subtree
    contains the configuration of the SNMP\n      transport over (D)TLS and, in particular,
    the configuration of how\n      certificates are mapped to SNMP security names.
    \ Write access to\n      this subtree should only be granted to the security administrator.\n
    \  o  The \"/snmp/vacm\" subtree contains the configuration of the View-\n      based
    Access Control Model used by SNMP to authorize access to\n      management information
    via SNMP.  Write access to this subtree\n      should only be granted to the security
    administrator.\n   Some of the readable data nodes in the YANG module and submodules
    may\n   be considered sensitive or vulnerable in some network environments.\n
    \  It is thus important to control read access (e.g., via get, get-\n   config,
    or notification) to these data nodes.  These are the subtrees\n   and data nodes
    and their sensitivity/vulnerability:\n   o  The \"/snmp/engine\" subtree exposes
    general information about an\n      SNMP engine such as which version(s) of SNMP
    are enabled or which\n      transports are enabled.\n   o  The \"/snmp/target\"
    subtree exposes information about which\n      transports are used to reach certain
    SNMP targets and which\n      transport-specific parameters are used.\n   o  The
    \"/snmp/notify\" and \"/snmp/notify-filter-profile\" subtrees\n      expose information
    about how notifications are filtered and\n      forwarded to notification targets.\n
    \  o  The \"/snmp/proxy\" subtree exposes information about proxy\n      relationships.\n
    \  o  The \"/snmp/community\", \"/snmp/usm\", \"/snmp/tsm\", \"/snmp/tlstm\",\n
    \     and \"/snmp/vacm\" subtrees are specifically sensitive since they\n      expose
    information about the authentication and authorization\n      policy used by an
    SNMP engine.\n   Changes to the SNMP access control rules should be done in an
    atomic\n   way (through a single edit-config or a single commit), or care must\n
    \  be taken that they are done in a sequence that does not temporarily\n   open
    access to resources.  Implementations supporting SNMP write\n   access must ensure
    that any SNMP access control rule changes over\n   NETCONF are also atomic to
    the SNMP instrumentation.  In particular,\n   changes involving an internal delete/create
    cycle (e.g., to move a\n   user to a different group) must be done with sufficient
    protections\n   such that even a power fail immediately after the delete does
    not\n   leave the administrator locked out.\n   Security administrators need to
    ensure that NETCONF access control\n   rules and SNMP access control rules implement
    a consistent security\n   policy.  Specifically, the SNMP access control rules
    should prevent\n   accidental leakage of sensitive security parameters such as
    community\n   strings.  See the Security Considerations section of [RFC3584] for\n
    \  further details.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC6020]
      \ Bjorklund, M., \"YANG - A Data Modeling Language for the\n              Network
      Configuration Protocol (NETCONF)\", RFC 6020,\n              October 2010, <http://www.rfc-editor.org/info/rfc6020>.\n
      \  [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and A.\n              Bierman,
      \"Network Configuration Protocol (NETCONF)\", RFC\n              6241, June
      2011, <http://www.rfc-editor.org/info/rfc6241>.\n   [RFC6242]  Wasserman, M.,
      \"Using the NETCONF Protocol over Secure\n              Shell (SSH)\", RFC 6242,
      June 2011,\n              <http://www.rfc-editor.org/info/rfc6242>.\n   [RFC6536]
      \ Bierman, A. and M. Bjorklund, \"Network Configuration\n              Protocol
      (NETCONF) Access Control Model\", RFC 6536, March\n              2012, <http://www.rfc-editor.org/info/rfc6536>.\n
      \  [RFC6991]  Schoenwaelder, J., \"Common YANG Data Types\", RFC 6991,\n              July
      2013, <http://www.rfc-editor.org/info/rfc6991>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC3411]  Harrington, D., Presuhn, R., and
      B. Wijnen, \"An\n              Architecture for Describing Simple Network Management\n
      \             Protocol (SNMP) Management Frameworks\", STD 62, RFC 3411,\n              December
      2002, <http://www.rfc-editor.org/info/rfc3411>.\n   [RFC3412]  Case, J., Harrington,
      D., Presuhn, R., and B. Wijnen,\n              \"Message Processing and Dispatching
      for the Simple Network\n              Management Protocol (SNMP)\", STD 62,
      RFC 3412, December\n              2002, <http://www.rfc-editor.org/info/rfc3412>.\n
      \  [RFC3413]  Levi, D., Meyer, P., and B. Stewart, \"Simple Network\n              Management
      Protocol (SNMP) Applications\", STD 62, RFC\n              3413, December 2002,\n
      \             <http://www.rfc-editor.org/info/rfc3413>.\n   [RFC3414]  Blumenthal,
      U. and B. Wijnen, \"User-based Security Model\n              (USM) for version
      3 of the Simple Network Management\n              Protocol (SNMPv3)\", STD 62,
      RFC 3414, December 2002,\n              <http://www.rfc-editor.org/info/rfc3414>.\n
      \  [RFC3415]  Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n              Access
      Control Model (VACM) for the Simple Network\n              Management Protocol
      (SNMP)\", STD 62, RFC 3415, December\n              2002, <http://www.rfc-editor.org/info/rfc3415>.\n
      \  [RFC3417]  Presuhn, R., \"Transport Mappings for the Simple Network\n              Management
      Protocol (SNMP)\", STD 62, RFC 3417, December\n              2002, <http://www.rfc-editor.org/info/rfc3417>.\n
      \  [RFC3418]  Presuhn, R., \"Management Information Base (MIB) for the\n              Simple
      Network Management Protocol (SNMP)\", STD 62, RFC\n              3418, December
      2002,\n              <http://www.rfc-editor.org/info/rfc3418>.\n   [RFC3419]
      \ Daniele, M. and J. Schoenwaelder, \"Textual Conventions for\n              Transport
      Addresses\", RFC 3419, December 2002,\n              <http://www.rfc-editor.org/info/rfc3419>.\n
      \  [RFC3584]  Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n              \"Coexistence
      between Version 1, Version 2, and Version 3\n              of the Internet-standard
      Network Management Framework\",\n              BCP 74, RFC 3584, August 2003,\n
      \             <http://www.rfc-editor.org/info/rfc3584>.\n   [RFC3688]  Mealling,
      M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004,
      <http://www.rfc-editor.org/info/rfc3688>.\n   [RFC3826]  Blumenthal, U., Maino,
      F., and K. McCloghrie, \"The\n              Advanced Encryption Standard (AES)
      Cipher Algorithm in the\n              SNMP User-based Security Model\", RFC
      3826, June 2004,\n              <http://www.rfc-editor.org/info/rfc3826>.\n
      \  [RFC5591]  Harrington, D. and W. Hardaker, \"Transport Security Model\n              for
      the Simple Network Management Protocol (SNMP)\", STD\n              78, RFC
      5591, June 2009,\n              <http://www.rfc-editor.org/info/rfc5591>.\n
      \  [RFC5592]  Harrington, D., Salowey, J., and W. Hardaker, \"Secure\n              Shell
      Transport Model for the Simple Network Management\n              Protocol (SNMP)\",
      RFC 5592, June 2009,\n              <http://www.rfc-editor.org/info/rfc5592>.\n
      \  [RFC6353]  Hardaker, W., \"Transport Layer Security (TLS) Transport\n              Model
      for the Simple Network Management Protocol (SNMP)\",\n              STD 78,
      RFC 6353, July 2011,\n              <http://www.rfc-editor.org/info/rfc6353>.\n
      \  [RFC6643]  Schoenwaelder, J., \"Translation of Structure of Management\n
      \             Information Version 2 (SMIv2) MIB Modules to YANG\n              Modules\",
      RFC 6643, July 2012,\n              <http://www.rfc-editor.org/info/rfc6643>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - 'Appendix A.  Example Configurations

    '
  - contents:
    - "A.1.  Engine Configuration Example\n   Below is an XML instance document showing
      a configuration of an SNMP\n   engine listening on UDP port 161 on IPv4 and
      IPv6 endpoints and\n   accepting SNMPv2c and SNMPv3 messages.\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <engine>\n       <enabled>true</enabled>\n       <listen>\n         <name>all-ipv4-udp</name>\n
      \        <udp>\n           <ip>0.0.0.0</ip>\n           <port>161</port>\n         </udp>\n
      \      </listen>\n       <listen>\n         <name>all-ipv6-udp</name>\n         <udp>\n
      \          <ip>::</ip>\n           <port>161</port>\n         </udp>\n       </listen>\n
      \      <version>\n         <v2c/>\n         <v3/>\n       </version>\n       <engine-id>80:00:02:b8:04:61:62:63</engine-id>\n
      \    </engine>\n   </snmp>\n"
    title: A.1.  Engine Configuration Example
  - contents:
    - "A.2.  Community Configuration Example\n   Below is an XML instance document
      showing a configuration that maps\n   the community name \"public\" to the security-name
      \"community-public\"\n   on the local engine with the default context name.
      \ The target tag\n   \"community-public-access\" filters the access to this
      community name.\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <community>\n       <index>1</index>\n       <text-name>public</text-name>\n
      \      <security-name>community-public</security-name>\n       <target-tag>community-public-access</target-tag>\n
      \    </community>\n     <target>\n       <name>management-station</name>\n       <udp>\n
      \        <ip>2001:db8::abcd</ip>\n         <port>161</port>\n       </udp>\n
      \      <tag>blue</tag>\n       <tag>community-public-access</tag>\n       <target-params>v2c-public</target-params>\n
      \    </target>\n     <target-params>\n       <name>v2c-public</name>\n       <v2c>\n
      \        <security-name>community-public</security-name>\n       </v2c>\n     </target-params>\n
      \  </snmp>\n"
    title: A.2.  Community Configuration Example
  - contents:
    - "A.3.  User-Based Security Model Configuration Example\n   Below is an XML instance
      document showing the configuration of a\n   local user \"joey\" who has no authentication
      or privacy keys.  For the\n   remote SNMP engine identified by the snmpEngineID\n
      \  '800002b804616263'H, two users are configured.  The user \"matt\" has a\n
      \  localized SHA authentication key, and the user \"russ\" has a localized\n
      \  SHA authentication key and an AES encryption key.\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <usm>\n       <local>\n         <user>\n           <name>joey</name>\n
      \        </user>\n       </local>\n       <remote>\n         <engine-id>00:00:00:00:00:00:00:00:00:00:00:02</engine-id>\n
      \        <user>\n           <name>matt</name>\n           <auth>\n             <sha>\n
      \              <!--\n                   The 'key' value is split into two lines
      to conform to\n                   the RFC formatting rules.\n               -->\n
      \              <key>66:95:fe:bc:92:88:e3:62:82:23:\n                    5f:c7:15:1f:12:84:97:b3:8f:3f</key>\n
      \            </sha>\n           </auth>\n         </user>\n         <user>\n
      \          <name>russ</name>\n           <auth>\n             <sha>\n               <!--\n
      \                  The 'key' value is split into two lines to conform to\n                   the
      RFC formatting rules.\n               -->\n               <key>66:95:fe:bc:92:88:e3:62:82:23:\n
      \                   5f:c7:15:1f:12:84:97:b3:8f:3f</key>\n             </sha>\n
      \          </auth>\n           <priv>\n             <aes>\n               <!--\n
      \                  The 'key' value is split into two lines to conform to\n                   the
      RFC formatting rules.\n               -->\n               <key>66:95:fe:bc:92:88:e3:62:82:23:\n
      \                   5f:c7:15:1f:12:84</key>\n             </aes>\n           </priv>\n
      \        </user>\n       </remote>\n     </usm>\n     <target>\n       <name>bluebox</name>\n
      \      <udp>\n         <ip>2001:db8::abcd</ip>\n         <port>161</port>\n
      \      </udp>\n       <tag>blue</tag>\n       <target-params>matt-auth</target-params>\n
      \    </target>\n     <target-params>\n       <name>matt-auth</name>\n       <usm>\n
      \        <user-name>matt</user-name>\n         <security-level>auth-no-priv</security-level>\n
      \      </usm>\n     </target-params>\n   </snmp>\n"
    title: A.3.  User-Based Security Model Configuration Example
  - contents:
    - "A.4.  Target and Notification Configuration Example\n   Below is an XML instance
      document showing the configuration of a\n   notification generator application
      (see Appendix A of [RFC3413]).\n   Note that the USM-specific objects are defined
      in the \"ietf-snmp-usm\"\n   submodule.\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <target>\n       <name>addr1</name>\n       <udp>\n         <ip>192.0.2.3</ip>\n
      \        <port>162</port>\n       </udp>\n       <tag>group1</tag>\n       <target-params>joe-auth</target-params>\n
      \    </target>\n     <target>\n       <name>addr2</name>\n       <udp>\n         <ip>192.0.2.6</ip>\n
      \        <port>162</port>\n       </udp>\n       <tag>group1</tag>\n       <target-params>joe-auth</target-params>\n
      \    </target>\n     <target>\n       <name>addr3</name>\n       <udp>\n         <ip>192.0.2.9</ip>\n
      \        <port>162</port>\n       </udp>\n       <tag>group2</tag>\n       <target-params>bob-priv</target-params>\n
      \    </target>\n     <target-params>\n       <name>joe-auth</name>\n       <usm>\n
      \        <user-name>joe</user-name>\n         <security-level>auth-no-priv</security-level>\n
      \      </usm>\n     </target-params>\n     <target-params>\n       <name>bob-priv</name>\n
      \      <usm>\n         <user-name>bob</user-name>\n         <security-level>auth-priv</security-level>\n
      \      </usm>\n     </target-params>\n     <notify>\n       <name>group1</name>\n
      \      <tag>group1</tag>\n       <type>trap</type>\n     </notify>\n     <notify>\n
      \      <name>group2</name>\n       <tag>group2</tag>\n       <type>trap</type>\n
      \    </notify>\n   </snmp>\n"
    title: A.4.  Target and Notification Configuration Example
  - contents:
    - "A.5.  Proxy Configuration Example\n   Below is an XML instance document showing
      the configuration of a\n   proxy forwarder application.  It proxies SNMPv2c
      messages from\n   command generators to a file server running an SNMPv1 agent
      that\n   recognizes two community strings, \"private\" and \"public\", with\n
      \  different associated read views.  The file server is represented as\n   two
      \"target\" instances, one for each community string.\n   If the proxy receives
      an SNMPv2c message with the community string\n   \"public\" from a device in
      the \"Office Network\" or \"Home Office\n   Network\", it gets tagged as \"trusted\",
      and the proxy uses the\n   \"private\" community string when sending the message
      to the file\n   server.  Other SNMPv2c messages with the community string \"public\"\n
      \  get tagged as \"non-trusted\", and the proxy uses the \"public\"\n   community
      string for these messages.  There is also a special\n   \"backdoor\" community
      string that can be used from any location to get\n   \"trusted\" access.\n   The
      \"Office Network\" and \"Home Office Network\" are represented as two\n   \"target\"
      instances.  These \"target\" instances have target-params\n   \"none\", which
      refers to a non-existing target-params entry.\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <target>\n       <name>File Server (private)</name>\n       <udp>\n         <ip>192.0.2.1</ip>\n
      \      </udp>\n       <target-params>v1-private</target-params>\n     </target>\n
      \    <target>\n       <name>File Server (public)</name>\n       <udp>\n         <ip>192.0.2.1</ip>\n
      \      </udp>\n       <target-params>v1-public</target-params>\n     </target>\n
      \    <target>\n       <name>Office Network</name>\n       <udp>\n         <ip>192.0.2.0</ip>\n
      \        <prefix-length>24</prefix-length>\n       </udp>\n       <tag>office</tag>\n
      \      <target-params>none</target-params>\n     </target>\n     <target>\n
      \      <name>Home Office Network</name>\n       <udp>\n         <ip>203.0.113.0</ip>\n
      \        <prefix-length>24</prefix-length>\n       </udp>\n       <tag>home-office</tag>\n
      \      <target-params>none</target-params>\n     </target>\n     <target-params>\n
      \      <name>v1-private</name>\n       <v1>\n         <security-name>private</security-name>\n
      \      </v1>\n     </target-params>\n     <target-params>\n       <name>v1-public</name>\n
      \      <v1>\n         <security-name>public</security-name>\n       </v1>\n
      \    </target-params>\n     <target-params>\n       <name>v2c-public</name>\n
      \      <v2c>\n         <security-name>public</security-name>\n       </v2c>\n
      \    </target-params>\n     <!--\n         Communities c1, c2, c3, and c4 are
      used for incoming messages\n         that should be forwarded.\n         Communities
      c3 and c5 are used for outgoing messages to the\n         file server.\n     -->\n
      \    <community>\n       <index>c1</index>\n       <security-name>public</security-name>\n
      \      <engine-id>80:00:61:81:c8</engine-id>\n       <context>trusted</context>\n
      \      <target-tag>office</target-tag>\n     </community>\n     <community>\n
      \      <index>c2</index>\n       <security-name>public</security-name>\n       <engine-id>80:00:61:81:c8</engine-id>\n
      \      <context>trusted</context>\n       <target-tag>home-office</target-tag>\n
      \    </community>\n     <community>\n       <index>c3</index>\n       <security-name>public</security-name>\n
      \      <engine-id>80:00:61:81:c8</engine-id>\n       <context>not-trusted</context>\n
      \    </community>\n     <community>\n       <index>c4</index>\n       <text-name>backdoor</text-name>\n
      \      <security-name>public</security-name>\n       <engine-id>80:00:61:81:c8</engine-id>\n
      \      <context>trusted</context>\n     </community>\n     <community>\n       <index>c5</index>\n
      \      <security-name>private</security-name>\n       <engine-id>80:00:61:81:c8</engine-id>\n
      \      <context>trusted</context>\n     </community>\n     <proxy>\n       <name>p1</name>\n
      \      <type>read</type>\n       <context-engine-id>80:00:61:81:c8</context-engine-id>\n
      \      <context-name>trusted</context-name>\n       <target-params-in>v2c-public</target-params-in>\n
      \      <single-target-out>File Server (private)</single-target-out>\n     </proxy>\n
      \    <proxy>\n       <name>p2</name>\n       <type>read</type>\n       <context-engine-id>80:00:61:81:c8</context-engine-id>\n
      \      <context-name>not-trusted</context-name>\n       <target-params-in>v2c-public</target-params-in>\n
      \      <single-target-out>File Server (public)</single-target-out>\n     </proxy>\n
      \  </snmp>\n   If an SNMPv2c Get request with community string \"public\" is
      received\n   from an IP address tagged as \"office\" or \"home-office\", or
      if the\n   request is received from anywhere else with community string\n   \"backdoor\",
      the implied context is \"trusted\" so proxy entry \"p1\"\n   matches.  The request
      is forwarded to the file server as SNMPv1 with\n   community \"private\" using
      community table entry \"c5\" for outbound\n   params lookup.\n   If an SNMPv2c
      Get request with community string \"public\" is received\n   from any other
      IP address, the implied context is \"not-trusted\" so\n   proxy entry \"p2\"
      matches, and the request is forwarded to the file\n   server as SNMPv1 with
      community \"public\".\n"
    title: A.5.  Proxy Configuration Example
  - contents:
    - "A.6.  View-Based Access Control Model Configuration Example\n   Below is an
      XML instance document showing the minimum-secure VACM\n   configuration (see
      Appendix A of [RFC3415]).\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <vacm>\n       <group>\n         <name>initial</name>\n         <member>\n
      \          <security-name>initial</security-name>\n           <security-model>usm</security-model>\n
      \        </member>\n         <access>\n           <context></context>\n           <security-model>usm</security-model>\n
      \          <security-level>no-auth-no-priv</security-level>\n           <read-view>restricted</read-view>\n
      \          <notify-view>restricted</notify-view>\n         </access>\n         <access>\n
      \          <context></context>\n           <security-model>usm</security-model>\n
      \          <security-level>auth-no-priv</security-level>\n           <read-view>internet</read-view>\n
      \          <write-view>internet</write-view>\n           <notify-view>internet</notify-view>\n
      \        </access>\n       </group>\n       <view>\n         <name>initial</name>\n
      \        <include>1.3.6.1</include>\n       </view>\n       <view>\n         <name>restricted</name>\n
      \        <include>1.3.6.1</include>\n       </view>\n     </vacm>\n   </snmp>\n
      \  The following XML instance document shows the semi-secure VACM\n   configuration
      (only the view configuration is different).\n   <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\">\n
      \    <vacm>\n       <group>\n         <name>initial</name>\n         <member>\n
      \          <security-name>initial</security-name>\n           <security-model>usm</security-model>\n
      \        </member>\n         <access>\n           <context></context>\n           <security-model>usm</security-model>\n
      \          <security-level>no-auth-no-priv</security-level>\n           <read-view>restricted</read-view>\n
      \          <notify-view>restricted</notify-view>\n         </access>\n         <access>\n
      \          <context></context>\n           <security-model>usm</security-model>\n
      \          <security-level>auth-no-priv</security-level>\n           <read-view>internet</read-view>\n
      \          <write-view>internet</write-view>\n           <notify-view>internet</notify-view>\n
      \        </access>\n       </group>\n       <view>\n         <name>initial</name>\n
      \        <include>1.3.6.1</include>\n       </view>\n       <view>\n         <name>restricted</name>\n
      \        <include>1.3.6.1.2.1.1</include>\n         <include>1.3.6.1.2.1.11</include>\n
      \        <include>1.3.6.1.6.3.10.2.1</include>\n         <include>1.3.6.1.6.3.11.2.1</include>\n
      \        <include>1.3.6.1.6.3.15.1.1</include>\n       </view>\n     </vacm>\n
      \  </snmp>\n"
    title: A.6.  View-Based Access Control Model Configuration Example
  - contents:
    - "A.7.  Transport Layer Security Transport Model Configuration Example\n   Below
      is an XML instance document showing the configuration of the\n   mapping of
      certificate to security name (see Appendices A.2 and A.3\n   of [RFC6353]).\n
      \  <snmp xmlns=\"urn:ietf:params:xml:ns:yang:ietf-snmp\"\n         xmlns:x509c2n=\n
      \          \"urn:ietf:params:xml:ns:yang:ietf-x509-cert-to-name\">\n     <tlstm>\n
      \      <cert-to-name>\n         <id>1</id>\n         <fingerprint>11:0A:05:11:00</fingerprint>\n
      \        <map-type>x509c2n:san-any</map-type>\n       </cert-to-name>\n       <cert-to-name>\n
      \        <id>2</id>\n         <fingerprint>11:0A:05:11:00</fingerprint>\n         <map-type>x509c2n:specified</map-type>\n
      \        <name>\n           Joe Cool\n         </name>\n       </cert-to-name>\n
      \    </tlstm>\n   </snmp>\n"
    title: A.7.  Transport Layer Security Transport Model Configuration Example
  title: Appendix A.  Example Configurations
- contents:
  - "Acknowledgments\n   The authors want to thank Wes Hardaker and David Spakes for
    their\n   detailed reviews.  Additional valuable comments were provided by\n   David
    Harrington, Borislav Lukovic, and Randy Presuhn.\n   Juergen Schoenwaelder was
    partly funded by Flamingo, a Network of\n   Excellence project (ICT-318488) supported
    by the European Commission\n   under its Seventh Framework Programme.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Martin Bjorklund\n   Tail-f Systems\n   EMail: mbj@tail-f.com\n
    \  Juergen Schoenwaelder\n   Jacobs University\n   EMail: j.schoenwaelder@jacobs-university.de\n"
  title: Authors' Addresses
