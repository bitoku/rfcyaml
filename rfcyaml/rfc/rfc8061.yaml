- title: __initial_text__
  contents:
  - '    Locator/ID Separation Protocol (LISP) Data-Plane Confidentiality

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism for encrypting traffic\n   encapsulated\
    \ using the Locator/ID Separation Protocol (LISP).  The\n   design describes how\
    \ key exchange is achieved using existing LISP\n   control-plane mechanisms as\
    \ well as how to secure the LISP data plane\n   from third-party surveillance\
    \ attacks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8061.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Notation ...........................................4\n  \
    \ 3. Definition of Terms .............................................4\n   4.\
    \ Overview ........................................................4\n   5. Diffie-Hellman\
    \ Key Exchange .....................................5\n   6. Encoding and Transmitting\
    \ Key Material ..........................6\n   7. Shared Keys Used for the Data\
    \ Plane .............................8\n   8. Data-Plane Operation ...........................................10\n\
    \   9. Procedures for Encryption and Decryption .......................11\n  \
    \ 10. Dynamic Rekeying ..............................................12\n   11.\
    \ Future Work ...................................................13\n   12. Security\
    \ Considerations .......................................14\n      12.1. SAAG Support\
    \ .............................................14\n      12.2. LISP-Crypto Security\
    \ Threats .............................14\n   13. IANA Considerations ...........................................15\n\
    \   14. References ....................................................16\n  \
    \    14.1. Normative References .....................................16\n    \
    \  14.2. Informative References ...................................17\n   Acknowledgments\
    \ ...................................................18\n   Authors' Addresses\
    \ ................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a mechanism for encrypting LISP-encapsulated\n\
    \   traffic.  The design describes how key exchange is achieved using\n   existing\
    \ LISP control-plane mechanisms as well as how to secure the\n   LISP data plane\
    \ from third-party surveillance attacks.\n   The Locator/ID Separation Protocol\
    \ [RFC6830] defines a set of\n   functions for routers to exchange information\
    \ used to map from\n   non-routable Endpoint Identifiers (EIDs) to routable Routing\
    \ Locators\n   (RLOCs).  LISP Ingress Tunnel Routers (ITRs) and Proxy Ingress\
    \ Tunnel\n   Routers (PITRs) encapsulate packets to Egress Tunnel Routers (ETRs)\n\
    \   and Re-encapsulating Tunnel Routers (RTRs).  Packets that arrive at\n   the\
    \ ITR or PITR may not be encrypted, which means no protection or\n   privacy of\
    \ the data is added.  When the source host encrypts the data\n   stream, encapsulated\
    \ packets do not need to be encrypted by LISP.\n   However, when plaintext packets\
    \ are sent by hosts, this design can\n   encrypt the user payload to maintain\
    \ privacy on the path between the\n   encapsulator (the ITR or PITR) to a decapsulator\
    \ (ETR or RTR).  The\n   encrypted payload is unidirectional.  However, return\
    \ traffic uses\n   the same procedures but with different key values by the same\
    \ xTRs or\n   potentially different xTRs when the paths between LISP sites are\n\
    \   asymmetric.\n   This document has the following requirements (as well as the\
    \ general\n   requirements from [RFC6973]) for the solution space:\n   o  Do not\
    \ require a separate Public Key Infrastructure (PKI) that is\n      out of scope\
    \ of the LISP control-plane architecture.\n   o  The budget for key exchange MUST\
    \ be one round-trip time.  That is,\n      only a two-packet exchange can occur.\n\
    \   o  Use symmetric keying so faster cryptography can be performed in\n     \
    \ the LISP data plane.\n   o  Avoid a third-party trust anchor if possible.\n\
    \   o  Provide for rekeying when secret keys are compromised.\n   o  Support Authenticated\
    \ Encryption with packet integrity checks.\n   o  Support multiple Cipher Suites\
    \ so new crypto algorithms can be\n      easily introduced.\n   Satisfying the\
    \ above requirements provides the following benefits:\n   o  Avoiding a PKI reduces\
    \ the operational cost of managing a secure\n      network.  Key management is\
    \ distributed and independent from any\n      other infrastructure.\n   o  Packet\
    \ transport is optimized due to fewer packet headers.  Packet\n      loss is reduced\
    \ by a more efficient key exchange.\n   o  Authentication and privacy are provided\
    \ with a single mechanism\n      thereby providing less per-packet overhead and\
    \ therefore more\n      resource efficiency.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Definition of Terms
  contents:
  - "3.  Definition of Terms\n   AEAD: Authenticated Encryption with Associated Data\
    \ [RFC5116]\n   ICV: Integrity Check Value\n   LCAF: LISP Canonical Address Format\
    \ [RFC8060]\n   xTR: A general reference to ITRs, ETRs, RTRs, and PxTRs\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   The approach proposed in this document is NOT to rely on the\
    \ LISP\n   mapping system (or any other key-infrastructure system) to store\n\
    \   security keys.  This will provide for a simpler and more secure\n   mechanism.\
    \  Secret shared keys will be negotiated between the ITR and\n   the ETR in Map-Request\
    \ and Map-Reply messages.  Therefore, when an\n   ITR needs to obtain the RLOC\
    \ of an ETR, it will get security material\n   to compute a shared secret with\
    \ the ETR.\n   The ITR can compute three shared secrets per ETR the ITR is\n \
    \  encapsulating to.  When the ITR encrypts a packet before\n   encapsulation,\
    \ it will identify the key it used for the crypto\n   calculation so the ETR knows\
    \ which key to use for decrypting the\n   packet after decapsulation.  By using\
    \ key-ids in the LISP header, we\n   can also get fast rekeying functionality.\n\
    \   The key management described in this document is unidirectional from\n   the\
    \ ITR (the encapsulator) to the ETR (the decapsultor).\n"
- title: 5.  Diffie-Hellman Key Exchange
  contents:
  - "5.  Diffie-Hellman Key Exchange\n   LISP will use a Diffie-Hellman [RFC2631]\
    \ key exchange sequence and\n   computation for computing a shared secret.  The\
    \ Diffie-Hellman\n   parameters will be passed via Cipher Suite code-points in\
    \ Map-Request\n   and Map-Reply messages.\n   Here is a brief description how\
    \ Diffie-Hellman works:\n   +----------------------------+---------+----------------------------+\n\
    \   |              ITR           |         |           ETR              |\n  \
    \ +------+--------+------------+---------+------------+---------------+\n   |Secret|\
    \ Public | Calculates |  Sends  | Calculates | Public |Secret|\n   +------|--------|------------|---------|------------|--------|------+\n\
    \   |  i   |  p,g   |            | p,g --> |            |        |  e   |\n  \
    \ +------|--------|------------|---------|------------|--------|------+\n   |\
    \  i   | p,g,I  |g^i mod p=I |  I -->  |            | p,g,I  |  e   |\n   +------|--------|------------|---------|------------|--------|------+\n\
    \   |  i   | p,g,I  |            |  <-- E  |g^e mod p=E |  p,g   |  e   |\n  \
    \ +------|--------|------------|---------|------------|--------|------+\n   |\
    \ i,s  |p,g,I,E |E^i mod p=s |         |I^e mod p=s |p,g,I,E | e,s  |\n   +------|--------|------------|---------|------------|--------|------+\n\
    \        Public-Key Exchange for Computing a Shared Private Key [DH]\n   Diffie-Hellman\
    \ parameters 'p' and 'g' must be the same values used by\n   the ITR and ETR.\
    \  The ITR computes public key 'I' and transmits 'I'\n   in a Map-Request packet.\
    \  When the ETR receives the Map-Request, it\n   uses parameters 'p' and 'g' to\
    \ compute the ETR's public key 'E'.  The\n   ETR transmits 'E' in a Map-Reply\
    \ message.  At this point, the ETR has\n   enough information to compute 's',\
    \ the shared secret, by using 'I' as\n   the base and the ETR's private key 'e'\
    \ as the exponent.  When the ITR\n   receives the Map-Reply, it uses the ETR's\
    \ public key 'E' with the\n   ITR's private key 'i' to compute the same 's' shared\
    \ secret the ETR\n   computed.  The value 'p' is used as a modulus to create the\
    \ width of\n   the shared secret 's' (see Section 6).\n"
- title: 6.  Encoding and Transmitting Key Material
  contents:
  - "6.  Encoding and Transmitting Key Material\n   The Diffie-Hellman key material\
    \ is transmitted in Map-Request and\n   Map-Reply messages.  Diffie-Hellman parameters\
    \ are encoded in the\n   LISP Security Key LCAF Type [RFC8060].\n     0      \
    \             1                   2                   3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |           AFI = 16387         |     Rsvd1     |     Flags     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Type = 11   |      Rsvd2    |             6 + n             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Key Count   |      Rsvd3    | Cipher Suite  |   Rsvd4     |R|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |           Key Length          |     Public Key Material ...   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                    ... Public Key Material                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              AFI = x          |       Locator Address ...     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Cipher Suite Field Contains DH Key Exchange and Cipher/Hash Functions\n  \
    \ The Key Count field encodes the number of {'Key-Length',\n   'Key-Material'}\
    \ fields included in the encoded LCAF.  The maximum\n   number of keys that can\
    \ be encoded is three, each identified by\n   key-id 1, followed by key-id 2,\
    \ and finally key-id 3.\n   The R bit is not used for this use case of the Security\
    \ Key LCAF Type\n   but is reserved for [LISP-DDT] security.  Therefore, the R\
    \ bit SHOULD\n   be transmitted as 0 and MUST be ignored on receipt.\n Cipher\
    \ Suite 0:\n    Reserved\n Cipher Suite 1 (LISP_2048MODP_AES128_CBC_SHA256):\n\
    \    Diffie-Hellman Group: 2048-bit MODP [RFC3526]\n    Encryption:  AES with\
    \ 128-bit keys in CBC mode [AES-CBC]\n    Integrity:   Integrated with AEAD_AES_128_CBC_HMAC_SHA_256\
    \ [AES-CBC]\n    IV length:   16 bytes\n    KDF:         HMAC-SHA-256\n Cipher\
    \ Suite 2 (LISP_EC25519_AES128_CBC_SHA256):\n    Diffie-Hellman Group: 256-bit\
    \ Elliptic-Curve 25519 [CURVE25519]\n    Encryption:  AES with 128-bit keys in\
    \ CBC mode [AES-CBC]\n    Integrity:   Integrated with AEAD_AES_128_CBC_HMAC_SHA_256\
    \ [AES-CBC]\n    IV length:   16 bytes\n    KDF:         HMAC-SHA-256\n Cipher\
    \ Suite 3 (LISP_2048MODP_AES128_GCM):\n    Diffie-Hellman Group: 2048-bit MODP\
    \ [RFC3526]\n    Encryption:  AES with 128-bit keys in GCM mode [RFC5116]\n  \
    \  Integrity:   Integrated with AEAD_AES_128_GCM [RFC5116]\n    IV length:   12\
    \ bytes\n    KDF:         HMAC-SHA-256\n Cipher Suite 4 (LISP_3072MODP_AES128_GCM):\n\
    \    Diffie-Hellman Group: 3072-bit MODP [RFC3526]\n    Encryption:  AES with\
    \ 128-bit keys in GCM mode [RFC5116]\n    Integrity:   Integrated with AEAD_AES_128_GCM\
    \ [RFC5116]\n    IV length:   12 bytes\n    KDF:         HMAC-SHA-256\n Cipher\
    \ Suite 5 (LISP_256_EC25519_AES128_GCM):\n    Diffie-Hellman Group: 256-bit Elliptic-Curve\
    \ 25519 [CURVE25519]\n    Encryption:  AES with 128-bit keys in GCM mode [RFC5116]\n\
    \    Integrity:   Integrated with AEAD_AES_128_GCM [RFC5116]\n    IV length: \
    \  12 bytes\n    KDF:         HMAC-SHA-256\n Cipher Suite 6 (LISP_256_EC25519_CHACHA20_POLY1305):\n\
    \    Diffie-Hellman Group: 256-bit Elliptic-Curve 25519 [CURVE25519]\n    Encryption:\
    \ Chacha20-Poly1305 [CHACHA-POLY] [RFC7539]\n    Integrity:  Integrated with AEAD_CHACHA20_POLY1305\
    \ [CHACHA-POLY]\n    IV length:  8 bytes\n    KDF:        HMAC-SHA-256\n   The\
    \ Public Key Material field contains the public key generated by\n   one of the\
    \ Cipher Suites defined above.  The length of the key, in\n   octets, is encoded\
    \ in the Key Length field.\n   When an ITR, PITR, or RTR sends a Map-Request,\
    \ they will encode their\n   own RLOC in the Security Key LCAF Type format within\
    \ the ITR-RLOCs\n   field.  When an ETR or RTR sends a Map-Reply, they will encode\
    \ their\n   RLOCs in Security Key LCAF Type format within the RLOC-record field\n\
    \   of each EID-record supplied.\n   If an ITR, PITR, or RTR sends a Map-Request\
    \ with the Security Key\n   LCAF Type included and the ETR or RTR does not want\
    \ to have\n   encapsulated traffic encrypted, they will return a Map-Reply with\
    \ no\n   RLOC-records encoded with the Security Key LCAF Type.  This signals\n\
    \   to the ITR, PITR, or RTR not to encrypt traffic (it cannot encrypt\n   traffic\
    \ anyway since no ETR public key was returned).\n   Likewise, if an ITR or PITR\
    \ wishes to include multiple key-ids in the\n   Map-Request, but the ETR or RTR\
    \ wishes to use some but not all of the\n   key-ids, it returns a Map-Reply only\
    \ for those key-ids it wishes to\n   use.\n"
- title: 7.  Shared Keys Used for the Data Plane
  contents:
  - "7.  Shared Keys Used for the Data Plane\n   When an ITR or PITR receives a Map-Reply\
    \ accepting the Cipher Suite\n   sent in the Map-Request, it is ready to create\
    \ data-plane keys.  The\n   same process is followed by the ETR or RTR returning\
    \ the Map-Reply.\n   The first step is to create a shared secret, using the peer's\
    \ shared\n   Diffie-Hellman Public Key Material combined with the device's own\n\
    \   private keying material, as described in Section 5.  The Diffie-\n   Hellman\
    \ parameters used are defined in the Cipher Suite sent in the\n   Map-Request\
    \ and copied into the Map-Reply.\n   The resulting shared secret is used to compute\
    \ an AEAD-key for the\n   algorithms specified in the Cipher Suite.  A Key Derivation\
    \ Function\n   (KDF) in counter mode, as specified by [NIST-SP800-108], is used\
    \ to\n   generate the data-plane keys.  The amount of keying material that is\n\
    \   derived depends on the algorithms in the Cipher Suite.\n   The inputs to the\
    \ KDF are as follows:\n   o  KDF function.  This is HMAC-SHA-256 in this document,\
    \ but\n      generally specified in each Cipher Suite definition.\n   o  A key\
    \ for the KDF function.  This is the computed Diffie-Hellman\n      shared secret.\n\
    \   o  Context that binds the use of the data-plane keys to this session.\n  \
    \    The context is made up of the following fields, which are\n      concatenated\
    \ and provided as the data to be acted upon by the KDF\n      function.  A Context\
    \ is made up of the following components:\n      *  A counter, represented as\
    \ a two-octet value in network byte\n         order.\n      *  The null-terminated\
    \ string \"lisp-crypto\".\n      *  The ITR's nonce from the Map-Request the Cipher\
    \ Suite was\n         included in.\n      *  The number of bits of keying material\
    \ required (L), represented\n         as a two-octet value in network byte order.\n\
    \   The counter value in the context is first set to 1.  When the amount\n   of\
    \ keying material exceeds the number of bits returned by the KDF\n   function,\
    \ then the KDF function is called again with the same inputs\n   except that the\
    \ counter increments for each call.  When enough keying\n   material is returned,\
    \ it is concatenated and used to create keys.\n   For example, AES with 128-bit\
    \ keys requires 16 octets (128 bits) of\n   keying material, and HMAC-SHA1-96\
    \ requires another 16 octets (128\n   bits) of keying material in order to maintain\
    \ a consistent 128 bits\n   of security.  Since 32 octets (256 bits) of keying\
    \ material are\n   required, and the KDF function HMAC-SHA-256 outputs 256 bits,\
    \ only\n   one call is required.  The inputs are as follows:\n   key-material\
    \ = HMAC-SHA-256(dh-shared-secret, context)\n       where: context = 0x0001 ||\
    \ \"lisp-crypto\" || <itr-nonce> || 0x0100\n   In contrast, a Cipher Suite specifying\
    \ AES with 256-bit keys requires\n   32 octets (256 bits) of keying material,\
    \ and HMAC-SHA256-128 requires\n   another 32 octets (256 bits) of keying material\
    \ in order to maintain\n   a consistent 256 bits of security.  Since 64 octets\
    \ (512 bits) of\n   keying material are required, and the KDF function HMAC-SHA-256\n\
    \   outputs 256 bits, two calls are required.\n   key-material-1 = HMAC-SHA-256(dh-shared-secret,\
    \ context)\n       where: context = 0x0001 || \"lisp-crypto\" || <itr-nonce> ||\
    \ 0x0200\n   key-material-2 = HMAC-SHA-256(dh-shared-secret, context)\n      \
    \ where: context = 0x0002 || \"lisp-crypto\" || <itr-nonce> || 0x0200\n   key-material\
    \ = key-material-1 || key-material-2\n   If the key-material is longer than the\
    \ required number of bits (L),\n   then only the most significant L bits are used.\n\
    \   From the derived key-material, the most significant 256 bits are used\n  \
    \ for the AEAD-key by AEAD ciphers.  The 256-bit AEAD-key is divided\n   into\
    \ a 128-bit encryption key and a 128-bit integrity check key\n   internal to the\
    \ cipher used by the ITR.\n"
- title: 8.  Data-Plane Operation
  contents:
  - "8.  Data-Plane Operation\n   The LISP encapsulation header [RFC6830] requires\
    \ changes to encode\n   the key-id for the key being used for encryption.\n  \
    \   0                   1                   2                   3\n     0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  / |       Source Port = xxxx      |       Dest Port = 4341        |\n"
- title: UDP +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "UDP +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \\ |\
    \           UDP Length          |        UDP Checksum           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: L / |N|L|E|V|I|R|K|K|            Nonce/Map-Version                  |\ \
  contents:
  - 'L / |N|L|E|V|I|R|K|K|            Nonce/Map-Version                  |\ \

    '
- title: I   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |A
  contents:
  - 'I   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |A

    '
- title: S \ |                 Instance ID/Locator-Status-Bits               | |D
  contents:
  - 'S \ |                 Instance ID/Locator-Status-Bits               | |D

    '
- title: P   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |/
  contents:
  - "P   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |/\n  \
    \  |                   Initialization Vector (IV)                  | I\n"
- title: E   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ C
  contents:
  - 'E   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ C

    '
- title: n / |                                                               | V
  contents:
  - 'n / |                                                               | V

    '
- title: c   |                                                               | |
  contents:
  - 'c   |                                                               | |

    '
- title: r   |                Packet Payload with EID Header ...             | |
  contents:
  - 'r   |                Packet Payload with EID Header ...             | |

    '
- title: y   |                                                               | |
  contents:
  - 'y   |                                                               | |

    '
- title: p \ |                                                               |/
  contents:
  - 'p \ |                                                               |/

    '
- title: t   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "t   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     K-bits\
    \ Indicate When a Packet Is Encrypted and Which Key Is Used\n   When the KK bits\
    \ are 00, the encapsulated packet is not encrypted.\n   When the value of the\
    \ KK bits is 1, 2, or 3, it encodes the key-id of\n   the secret keys computed\
    \ during the Diffie-Hellman\n   Map-Request/Map-Reply exchange.  When the KK bits\
    \ are not 0, the\n   payload is prepended with an Initialization Vector (IV).\
    \  The length\n   of the IV field is based on the Cipher Suite used.  Since all\
    \ Cipher\n   Suites defined in this document do Authenticated Encryption with\n\
    \   Associated Data (AEAD), an ICV field does not need to be present in\n   the\
    \ packet since it is included in the ciphertext.  The Additional\n   Data (AD)\
    \ used for the ICV is shown above and includes the LISP\n   header, the IV field,\
    \ and the packet payload.\n   When an ITR or PITR receives a packet to be encapsulated,\
    \ the device\n   will first decide what key to use, encode the key-id into the\
    \ LISP\n   header, and use that key to encrypt all packet data that follows the\n\
    \   LISP header.  Therefore, the outer header, UDP header, and LISP\n   header\
    \ travel as plaintext.\n   At the time of writing, there is an open working group\
    \ item to\n   discuss if the data encapsulation header needs change for encryption\n\
    \   or any new applications.  This document proposes changes to the\n   existing\
    \ header so experimentation can continue without making large\n   changes to the\
    \ data plane at this time.  This document allocates two\n   bits of the previously\
    \ unused three flag bits (note the R-bit above\n   is still a reserved flag bit,\
    \ as documented in [RFC6830]) for the KK\n   bits.\n"
- title: 9.  Procedures for Encryption and Decryption
  contents:
  - "9.  Procedures for Encryption and Decryption\n   When an ITR, PITR, or RTR encapsulates\
    \ a packet and has already\n   computed an AEAD-key (detailed in Section 7) that\
    \ is associated with\n   a destination RLOC, the following encryption and encapsulation\n\
    \   procedures are performed:\n   1.  The encapsulator creates an IV and prepends\
    \ the IV value to the\n       packet being encapsulated.  For GCM and ChaCha20\
    \ Cipher Suites,\n       the IV is incremented for every packet (beginning with\
    \ a value of\n       1 in the first packet) and sent to the destination RLOC.\
    \  For CBC\n       Cipher Suites, the IV is a new random number for every packet\n\
    \       sent to the destination RLOC.  For the ChaCha20 Cipher Suite, the\n  \
    \     IV is an 8-byte random value that is appended to a 4-byte counter\n    \
    \   that is incremented for every packet (beginning with a value of 1\n      \
    \ in the first packet).\n   2.  Next encrypt with cipher function AES or ChaCha20\
    \ using the AEAD-\n       key over the packet payload following the AEAD specification\n\
    \       referenced in the Cipher Suite definition.  This does not include\n  \
    \     the IV.  The IV must be transmitted as plaintext so the decrypter\n    \
    \   can use it as input to the decryption cipher.  The payload should\n      \
    \ be padded to an integral number of bytes a block cipher may\n       require.\
    \  The result of the AEAD operation may contain an ICV,\n       the size of which\
    \ is defined by the referenced AEAD\n       specification.  Note that the AD (i.e.,\
    \ the LISP header exactly\n       as will be prepended in the next step and the\
    \ IV) must be given\n       to the AEAD encryption function as the \"associated\
    \ data\"\n       argument.\n   3.  Prepend the LISP header.  The key-id field\
    \ of the LISP header is\n       set to the key-id value that corresponds to key-pair\
    \ used for the\n       encryption cipher.\n   4.  Lastly, prepend the UDP header\
    \ and outer IP header onto the\n       encrypted packet and send packet to destination\
    \ RLOC.\n   When an ETR, PETR, or RTR receives an encapsulated packet, the\n \
    \  following decapsulation and decryption procedures are performed:\n   1.  The\
    \ outer IP header, UDP header, LISP header, and IV field are\n       stripped\
    \ from the start of the packet.  The LISP header and IV\n       are retained and\
    \ given to the AEAD decryption operation as the\n       \"associated data\" argument.\n\
    \   2.  The packet is decrypted using the AEAD-key and the IV from the\n     \
    \  packet.  The AEAD-key is obtained from a local-cache associated\n       with\
    \ the key-id value from the LISP header.  The result of the\n       decryption\
    \ function is a plaintext packet payload if the cipher\n       returned a verified\
    \ ICV.  Otherwise, the packet is invalid and is\n       discarded.  If the AEAD\
    \ specification included an ICV, the AEAD\n       decryption function will locate\
    \ the ICV in the ciphertext and\n       compare it to a version of the ICV that\
    \ the AEAD decryption\n       function computes.  If the computed ICV is different\
    \ than the ICV\n       located in the ciphertext, then it will be considered tampered.\n\
    \   3.  If the packet was not tampered with, the decrypted packet is\n       forwarded\
    \ to the destination EID.\n"
- title: 10.  Dynamic Rekeying
  contents:
  - "10.  Dynamic Rekeying\n   Since multiple keys can be encoded in both control\
    \ and data messages,\n   an ITR can encapsulate and encrypt with a specific key\
    \ while it is\n   negotiating other keys with the same ETR.  As soon as an ETR\
    \ or RTR\n   returns a Map-Reply, it should be prepared to decapsulate and decrypt\n\
    \   using the new keys computed with the new Diffie-Hellman parameters\n   received\
    \ in the Map-Request and returned in the Map-Reply.\n   RLOC-probing can be used\
    \ to change keys or Cipher Suites by the ITR\n   at any time.  And when an initial\
    \ Map-Request is sent to populate the\n   ITR's map-cache, the Map-Request flows\
    \ across the mapping system\n   where a single ETR from the Map-Reply RLOC-set\
    \ will respond.  If the\n   ITR decides to use the other RLOCs in the RLOC-set,\
    \ it MUST send a\n   Map-Request directly to negotiate security parameters with\
    \ the ETR.\n   This process may be used to test reachability from an ITR to an\
    \ ETR\n   initially when a map-cache entry is added for the first time, so an\n\
    \   ITR can get both reachability status and keys negotiated with one\n   Map-Request/Map-Reply\
    \ exchange.\n   A rekeying event is defined to be when an ITR or PITR changes\
    \ the\n   Cipher Suite or public key in the Map-Request.  The ETR or RTR\n   compares\
    \ the Cipher Suite and public key it last received from the\n   ITR for the key-id,\
    \ and if any value has changed, it computes a new\n   public key and Cipher Suite\
    \ requested by the ITR from the Map-Request\n   and returns it in the Map-Reply.\
    \  Now a new shared secret is computed\n   and can be used for the key-id for\
    \ encryption by the ITR and\n   decryption by the ETR.  When the ITR or PITR starts\
    \ this process of\n   negotiating a new key, it must not use the corresponding\
    \ key-id in\n   encapsulated packets until it receives a Map-Reply from the ETR\
    \ with\n   the same Cipher Suite value it expects (the values it sent in a Map-\n\
    \   Request).\n   Note when RLOC-probing continues to maintain RLOC reachability\
    \ and\n   rekeying is not desirable, the ITR or RTR can either not include the\n\
    \   Security Key LCAF Type in the Map-Request or supply the same key\n   material\
    \ as it received from the last Map-Reply from the ETR or RTR.\n   This approach\
    \ signals to the ETR or RTR that no rekeying event is\n   requested.\n"
- title: 11.  Future Work
  contents:
  - "11.  Future Work\n   For performance considerations, newer Elliptic-Curve Diffie-Hellman\n\
    \   (ECDH) groups can be used as specified in [RFC4492] and [RFC6090] to\n   reduce\
    \ CPU cycles required to compute shared secret keys.\n   For better security considerations\
    \ as well as to be able to build\n   faster software implementations, newer approaches\
    \ to ciphers and\n   authentication methods will be researched and tested.  Some\
    \ examples\n   are ChaCha20 and Poly1305 [CHACHA-POLY] [RFC7539].\n"
- title: 12.  Security Considerations
  contents:
  - '12.  Security Considerations

    '
- title: 12.1.  SAAG Support
  contents:
  - "12.1.  SAAG Support\n   The LISP working group received security advice and guidance\
    \ from the\n   Security Area Advisory Group (SAAG).  The SAAG has been involved\n\
    \   early in the design process, and their input and reviews have been\n   included\
    \ in this document.\n   Comments from the SAAG included:\n   1.  Do not use asymmetric\
    \ ciphers in the data plane.\n   2.  Consider adding ECDH early in the design.\n\
    \   3.  Add Cipher Suites because ciphers are created more frequently\n      \
    \ than protocols that use them.\n   4.  Consider the newer AEAD technology so\
    \ authentication comes with\n       doing encryption.\n"
- title: 12.2.  LISP-Crypto Security Threats
  contents:
  - "12.2.  LISP-Crypto Security Threats\n   Since ITRs and ETRs participate in key\
    \ exchange over a public\n   non-secure network, a man in the middle (MITM) could\
    \ circumvent the\n   key exchange and compromise data-plane confidentiality. \
    \ This can\n   happen when the MITM is acting as a Map-Replier and provides its\
    \ own\n   public key so the ITR and the MITM generate a shared secret key\n  \
    \ between them.  If the MITM is in the data path between the ITR and\n   ETR,\
    \ it can use the shared secret key to decrypt traffic from the\n   ITR.\n   Since\
    \ LISP can secure Map-Replies by the authentication process\n   specified in [LISP-SEC],\
    \ the ITR can detect when a MITM has signed a\n   Map-Reply for an EID-prefix\
    \ for which it is not authoritative.  When\n   an ITR determines that the signature\
    \ verification fails, it discards\n   and does not reuse the key exchange parameters,\
    \ avoids using the ETR\n   for encapsulation, and issues a severe log message\
    \ to the network\n   administrator.  Optionally, the ITR can send RLOC-probes\
    \ to the\n   compromised RLOC to determine if the authoritative ETR is reachable.\n\
    \   And when the ITR validates the signature of a Map-Reply, it can begin\n  \
    \ encrypting and encapsulating packets to the RLOC of ETR.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document describes a mechanism for encrypting\
    \ LISP-encapsulated\n   packets based on Diffie-Hellman key exchange procedures.\
    \  During the\n   exchange, the devices have to agree on a Cipher Suite to be\
    \ used\n   (i.e., the cipher and hash functions used to encrypt/decrypt and to\n\
    \   sign/verify packets).  The 8-bit Cipher Suite field is reserved for\n   such\
    \ purpose in the security material section of the Map-Request and\n   Map-Reply\
    \ messages.\n   IANA has created a new registry (as outlined in [RFC5226]) titled\n\
    \   \"LISP Crypto Cipher Suite\".  Initial values for the registry are\n   provided\
    \ below.  Future assignments are to be made on a \"First Come,\n   First Served\"\
    \ basis [RFC5226].\n   +-----+--------------------------------------------+------------+\n\
    \   |Value| Suite                                      | Reference  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  0  | Reserved                                   | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  1  | LISP_2048MODP_AES128_CBC_SHA256            | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  2  | LISP_EC25519_AES128_CBC_SHA256             | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  3  | LISP_2048MODP_AES128_GCM                   | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  4  | LISP_3072MODP_AES128_GCM                   | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  5  | LISP_256_EC25519_AES128_GCM                | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \   |  6  | LISP_256_EC25519_CHACHA20_POLY1305         | Section 6  |\n   +-----+--------------------------------------------+------------+\n\
    \                         LISP Crypto Cipher Suites\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [NIST-SP800-108]\n              National Institute\
    \ of Standards and Technology,\n              \"Recommendation for Key Derivation\
    \ Using Pseudorandom\n              Functions\", NIST Special Publication SP 800-108,\n\
    \              DOI 10.6028/NIST.SP.800-108, October 2009.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2631]  Rescorla, E.,\
    \ \"Diffie-Hellman Key Agreement Method\",\n              RFC 2631, DOI 10.17487/RFC2631,\
    \ June 1999,\n              <http://www.rfc-editor.org/info/rfc2631>.\n   [RFC3526]\
    \  Kivinen, T. and M. Kojo, \"More Modular Exponential (MODP)\n              Diffie-Hellman\
    \ groups for Internet Key Exchange (IKE)\",\n              RFC 3526, DOI 10.17487/RFC3526,\
    \ May 2003,\n              <http://www.rfc-editor.org/info/rfc3526>.\n   [RFC4492]\
    \  Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B.\n              Moeller,\
    \ \"Elliptic Curve Cryptography (ECC) Cipher Suites\n              for Transport\
    \ Layer Security (TLS)\", RFC 4492,\n              DOI 10.17487/RFC4492, May 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4492>.\n   [RFC5116]  McGrew,\
    \ D., \"An Interface and Algorithms for Authenticated\n              Encryption\"\
    , RFC 5116, DOI 10.17487/RFC5116, January 2008,\n              <http://www.rfc-editor.org/info/rfc5116>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC6090]  McGrew, D., Igoe, K., and M. Salter, \"Fundamental Elliptic\n \
    \             Curve Cryptography Algorithms\", RFC 6090,\n              DOI 10.17487/RFC6090,\
    \ February 2011,\n              <http://www.rfc-editor.org/info/rfc6090>.\n  \
    \ [RFC6830]  Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The\n     \
    \         Locator/ID Separation Protocol (LISP)\", RFC 6830,\n              DOI\
    \ 10.17487/RFC6830, January 2013,\n              <http://www.rfc-editor.org/info/rfc6830>.\n\
    \   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n        \
    \      Morris, J., Hansen, M., and R. Smith, \"Privacy\n              Considerations\
    \ for Internet Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6973>.\n   [RFC7539]\
    \  Nir, Y. and A. Langley, \"ChaCha20 and Poly1305 for IETF\n              Protocols\"\
    , RFC 7539, DOI 10.17487/RFC7539, May 2015,\n              <http://www.rfc-editor.org/info/rfc7539>.\n\
    \   [RFC8060]  Farinacci, D., Meyer, D., and J. Snijders, \"LISP Canonical\n \
    \             Address Format (LCAF)\", RFC 8060, DOI 10.17487/RFC8060,\n     \
    \         February 2017, <http://www.rfc-editor.org/info/rfc8060>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [AES-CBC]  McGrew, D., Foley, J., and K. Paterson,\
    \ \"Authenticated\n              Encryption with AES-CBC and HMAC-SHA\", Work\
    \ in Progress,\n              draft-mcgrew-aead-aes-cbc-hmac-sha2-05, July 2014.\n\
    \   [CHACHA-POLY]\n              Langley, A. and W. Chang, \"ChaCha20 and Poly1305\
    \ based\n              Cipher Suites for TLS\", Work in Progress,\n          \
    \    draft-agl-tls-chacha20poly1305-04, November 2013.\n   [CURVE25519]\n    \
    \          Bernstein, D., \"Curve25519: new Diffie-Hellman speed\n           \
    \   records\", DOI 10.1007/11745853_14,\n              <http://www.iacr.org/cryptodb/archive/2006/\n\
    \              PKC/3351/3351.pdf>.\n   [DH]       Wikipedia, \"Diffie-Hellman\
    \ key exchange\", January 2017,\n              <https://en.wikipedia.org/w/index.php?title=Diffie%E2%80%9\n\
    \              3Hellman_key_exchange&oldid=759611604>.\n   [LISP-DDT] Fuller,\
    \ V., Lewis, D., Ermagan, V., Jain, A., and A.\n              Smirnov, \"LISP\
    \ Delegated Database Tree\", Work in\n              Progress, draft-ietf-lisp-ddt-08,\
    \ September 2016.\n   [LISP-SEC] Maino, F., Ermagan, V., Cabellos, A., and D.\
    \ Saucez,\n              \"LISP-Security (LISP-SEC)\", Work in Progress,\n   \
    \           draft-ietf-lisp-sec-12, November 2016.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Dan Harkins, Joel Halpern,\
    \ Fabio\n   Maino, Ed Lopez, Roger Jorgensen, and Watson Ladd for their interest,\n\
    \   suggestions, and discussions about LISP data-plane security.  An\n   individual\
    \ thank you to LISP WG Chair Luigi Iannone for shepherding\n   this document as\
    \ well as contributing to the IANA Considerations\n   section.\n   The authors\
    \ would like to give a special thank you to Ilari Liusvaara\n   for his extensive\
    \ commentary and discussion.  He has contributed his\n   security expertise to\
    \ make lisp-crypto as secure as the state of the\n   art in cryptography.\n  \
    \ In addition, the support and suggestions from the SAAG working group\n   were\
    \ helpful and appreciated.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dino Farinacci\n   lispers.net\n   San Jose, California\
    \  95120\n   United States of America\n   Phone: 408-718-2001\n   Email: farinacci@gmail.com\n\
    \   Brian Weis\n   Cisco Systems\n   170 West Tasman Drive\n   San Jose, California\
    \  95124-1706\n   United States of America\n   Phone: 408-526-4796\n   Email:\
    \ bew@cisco.com\n"
