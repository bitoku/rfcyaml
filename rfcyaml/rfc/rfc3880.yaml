- contents:
  - "                    Call Processing Language (CPL):\n       A Language for User
    Control of Internet Telephony Services\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines the Call Processing Language (CPL), a language\n
    \  to describe and control Internet telephony services.  It is designed\n   to
    be implementable on either network servers or user agents.  It is\n   meant to
    be simple, extensible, easily edited by graphical clients,\n   and independent
    of operating system or signalling protocol.  It is\n   suitable for running on
    a server where users may not be allowed to\n   execute arbitrary programs, as
    it has no variables, loops, or ability\n   to run external programs.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n       1.1.   Conventions of This Document. . . . . . . . . .
    . . . .  4\n   2.  Structure of CPL Scripts . . . . . . . . . . . . . . . . .
    . .  4\n       2.1.   High-level Structure. . . . . . . . . . . . . . . . . .
    \ 4\n       2.2.   Abstract Structure of a Call Processing Action. . . . .  5\n
    \      2.3.   Location Model. . . . . . . . . . . . . . . . . . . . .  6\n       2.4.
    \  XML Structure . . . . . . . . . . . . . . . . . . . . .  6\n   3.  Script Structure:
    Overview . . . . . . . . . . . . . . . . . .  7\n   4.  Switches . . . . . . .
    . . . . . . . . . . . . . . . . . . . .  8\n       4.1.   Address Switches. .
    . . . . . . . . . . . . . . . . . .  9\n              4.1.1.  Usage of \"address-switch\"
    with SIP. . . . . . . 11\n       4.2.   String Switches . . . . . . . . . . .
    . . . . . . . . . 12\n              4.2.1.  Usage of \"string-switch\" with SIP
    . . . . . . . 13\n       4.3.   Language Switches . . . . . . . . . . . . . .
    . . . . . 14\n              4.3.1.  Usage of \"language-switch\" with SIP . .
    . . . . 14\n       4.4.   Time Switches . . . . . . . . . . . . . . . . . . .
    . . 15\n              4.4.1.  iCalendar differences and implementation\n                      issues.
    . . . . . . . . . . . . . . . . . . . . 20\n       4.5.   Priority Switches .
    . . . . . . . . . . . . . . . . . . 21\n              4.5.1.  Usage of \"priority-switch\"
    with SIP . . . . . . 22\n   5.  Location Modifiers . . . . . . . . . . . . . .
    . . . . . . . . 22\n       5.1.   Explicit Location . . . . . . . . . . . . .
    . . . . . . 23\n              5.1.1.  Usage of \"location\" with SIP. . . . .
    . . . . . 23\n       5.2.   Location Lookup . . . . . . . . . . . . . . . . .
    . . . 24\n              5.2.1.  Usage of \"lookup\" with SIP. . . . . . . . .
    . . 25\n       5.3.   Location Removal. . . . . . . . . . . . . . . . . . . .
    25\n              5.3.1.  Usage of \"remove-location\" with SIP . . . . . . 26\n
    \  6.  Signalling Operations. . . . . . . . . . . . . . . . . . . . . 26\n       6.1.
    \  Proxy . . . . . . . . . . . . . . . . . . . . . . . . . 26\n              6.1.1.
    \ Usage of \"proxy\" with SIP . . . . . . . . . . . 29\n       6.2.   Redirect.
    . . . . . . . . . . . . . . . . . . . . . . . 29\n              6.2.1.  Usage
    of \"redirect\" with SIP. . . . . . . . . . 30\n       6.3.   Reject. . . . .
    . . . . . . . . . . . . . . . . . . . . 30\n              6.3.1.  Usage of \"reject\"
    with SIP. . . . . . . . . . . 30\n   7.  Non-signalling Operations. . . . . .
    . . . . . . . . . . . . . 31\n       7.1.   Mail. . . . . . . . . . . . . . .
    . . . . . . . . . . . 31\n              7.1.1.  Suggested Content of Mailed Information
    . . . . 32\n       7.2.   Log . . . . . . . . . . . . . . . . . . . . . . . .
    . . 32\n   8.  Subactions . . . . . . . . . . . . . . . . . . . . . . . . . .
    33\n   9.  Ancillary Information. . . . . . . . . . . . . . . . . . . . . 34\n
    \  10. Default Behavior . . . . . . . . . . . . . . . . . . . . . . . 35\n   11.
    CPL Extensions . . . . . . . . . . . . . . . . . . . . . . . . 35\n   12. Examples
    . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n       12.1.  Example:
    Call Redirect Unconditional. . . . . . . . . . 37\n       12.2.  Example: Call
    Forward Busy/No Answer. . . . . . . . . . 38\n       12.3.  Example: Call Forward:
    Redirect and Default . . . . . . 39\n       12.4.  Example: Call Screening . .
    . . . . . . . . . . . . . . 40\n       12.5.  Example: Priority and Language Routing.
    . . . . . . . . 41\n       12.6.  Example: Outgoing Call Screening. . . . . .
    . . . . . . 42\n       12.7.  Example: Time-of-day Routing. . . . . . . . . .
    . . . . 43\n       12.8.  Example: Location Filtering . . . . . . . . . . . .
    . . 44\n       12.9.  Example: Non-signalling Operations. . . . . . . . . . .
    45\n       12.10. Example: Hypothetical Extensions. . . . . . . . . . . . 46\n
    \      12.11. Example: A Complex Example. . . . . . . . . . . . . . . 48\n   13.
    Security Considerations. . . . . . . . . . . . . . . . . . . . 49\n   14. IANA
    Considerations. . . . . . . . . . . . . . . . . . . . . . 49\n       14.1.  URN
    Sub-Namespace Registration for\n              urn:ietf:params:xml:ns:cpl. . .
    . . . . . . . . . . . . 49\n       14.2.  Schema registration . . . . . . . .
    . . . . . . . . . . 50\n       14.3.  MIME Registration . . . . . . . . . . .
    . . . . . . . . 50\n   15. Acknowledgments. . . . . . . . . . . . . . . . . .
    . . . . . . 51\n   A.  An Algorithm for Resolving Time Switches . . . . . . .
    . . . . 52\n   B.  Suggested Usage of CPL with H.323. . . . . . . . . . . . .
    . . 53\n       B.1.   Usage of \"address-switch\" with H.323. . . . . . . . .
    . 53\n       B.2.   Usage of \"string-switch\" with H.323 . . . . . . . . . .
    55\n       B.3.   Usage of \"language-switch\" with H.323 . . . . . . . . . 55\n
    \      B.4.   Usage of \"priority-switch\" with H.323 . . . . . . . . . 55\n       B.5.
    \  Usage of \"location\" with H.323. . . . . . . . . . . . . 56\n       B.6.   Usage
    of \"lookup\" with H.323. . . . . . . . . . . . . . 56\n       B.7.   Usage of
    \"remove-location\" with H.323 . . . . . . . . . 56\n   C.  The XML Schema for
    CPL . . . . . . . . . . . . . . . . . . . . 56\n   Normative References . . .
    . . . . . . . . . . . . . . . . . . . . 70\n   Informative References . . . .
    . . . . . . . . . . . . . . . . . . 71\n   Authors' Addresses . . . . . . . .
    . . . . . . . . . . . . . . . . 73\n   Full Copyright Statement . . . . . . .
    . . . . . . . . . . . . . . 74\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Call Processing Language (CPL) is a language that can
    be used to\n   describe and control Internet telephony services.  It is not tied
    to\n   any particular signalling architecture or protocol; it is anticipated\n
    \  that it will be used with both the Session Initiation Protocol (SIP)\n   [1]
    and H.323 [16].\n   CPL is powerful enough to describe a large number of services
    and\n   features, but it is limited in power so that it can run safely in\n   Internet
    telephony servers.  The intention is to make it impossible\n   for users to do
    anything more complex (and dangerous) than describe\n   Internet telephony services.
    \ The language is not Turing-complete,\n   and provides no way to write loops
    or recursion.\n   CPL is also designed to be easily created and edited by graphical\n
    \  tools.  It is based on the Extensible Markup Language (XML) [2], so\n   parsing
    it is easy and many parsers for it are publicly available.\n   The structure of
    the language maps closely to its behavior, so an\n   editor can understand any
    valid script, even ones written by hand.\n   The language is also designed so
    that a server can easily confirm the\n   validity of a script when the server
    receives it, rather than\n   discovering problems while a call is being processed.\n
    \  Implementations of CPL are expected to take place both in Internet\n   telephony
    servers and in advanced clients; both can usefully process\n   and direct users'
    calls.  This document primarily addresses the usage\n   in servers.  A mechanism
    will be needed to transport scripts between\n   clients and servers; this document
    does not describe such a\n   mechanism, but related documents will.\n   The framework
    and requirements for the CPL architecture are described\n   in RFC 2824, \"Call
    Processing Language Framework and Requirements\"\n   [17].\n"
  - contents:
    - "1.1.  Conventions of This Document\n   In this document, the key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are to be interpreted
      as described in BCP 14, RFC 2119\n   [3] and indicate requirement levels for
      compliant CPL\n   implementations.\n      Some paragraphs are indented, like
      this; they give motivations of\n      design choices, advice to implementors,
      or thoughts on future\n      development of or extensions to CPL.  They are
      not essential to\n      the specification of the language, and are non-normative.\n"
    title: 1.1.  Conventions of This Document
  title: 1.  Introduction
- contents:
  - '2.  Structure of CPL Scripts

    '
  - contents:
    - "2.1.  High-level Structure\n   A CPL script consists of two types of information:
      ancillary\n   information about the script, and call processing actions.\n   A
      call processing action is a structured tree that describes the\n   operations
      and decisions a telephony signalling server performs on a\n   call set-up event.
      \ There are two types of call processing actions:\n   top-level actions and
      subactions.  Top-level actions are actions that\n   are triggered by signalling
      events that arrive at the server.  Two\n   top-level actions are defined: \"incoming\",
      the action performed when\n   a call arrives whose destination is the owner
      of the script, and\n   \"outgoing\", the action performed when a call arrives
      whose originator\n   is the owner of the script.\n   Subactions are actions
      which can be called from other actions.  CPL\n   forbids subactions from being
      called recursively: see Section 8.\n   Ancillary information is information
      which is necessary for a server\n   to correctly process a script, but which
      does not directly describe\n   any operations or decisions.  Currently, no ancillary
      information is\n   defined, but the section is reserved for use by extensions.\n"
    title: 2.1.  High-level Structure
  - contents:
    - "2.2.  Abstract Structure of a Call Processing Action\n   Abstractly, a call
      processing action is described by a collection of\n   nodes that describe operations
      that can be performed or decisions\n   that can be made.  A node may have several
      parameters, which specify\n   the precise behavior of the node; they usually
      also have outputs,\n   which depend on the result of the decision or action.\n
      \  For a graphical representation of a CPL action, see Figure 1.  Nodes\n   and
      outputs can be thought of informally as boxes and arrows; CPL is\n   designed
      so that actions can be conveniently edited graphically using\n   this representation.
      \ Nodes are arranged in a tree, starting at a\n   single root node; outputs
      of nodes are connected to additional nodes.\n   When an action is run, the action
      or decision described by the\n   action's top-level node is performed; based
      on the result of that\n   node, the server follows one of the node's outputs,
      and the\n   subsequent node it points to is performed; this process continues\n
      \  until a node with no specified outputs is reached.  Because the graph\n   is
      acyclic, this will occur after a bounded and predictable number of\n   nodes
      are visited.\n   If an output to a node does not point to another node, it indicates\n
      \  that the CPL server should perform a node- or protocol-specific\n   action.
      \ Some nodes have specific default behavior associated with\n   them; for others,
      the default behavior is implicit in the underlying\n   signalling protocol,
      or can be configured by the administrator of the\n   server.  For further details
      on this, see Section 10.\n        _________________      ___________________
      \   ________  busy\n       | Address-switch  |    | location          |  | proxy
      \ |--------\\\n"
    - "Call-->|  field: origin  |  ->|   url: sip:jones@ |->|timeout:| timeout|\n
      \      |  subfield: host | /  |     example.com   |  |  10s   |--------|\n       |-----------------|/
      \  |___________________|  |        | failure|\n       | subdomain-of:   |                           |________|--------|\n
      \      |   example.com   |                                             |\n       |-----------------|
      \ ___________________________________________/\n       | otherwise       | /........................................\n
      \      |                 |\\|. Voicemail                            .\n       |_________________|
      \\.  ____________________                .\n                            ->|
      location           |   __________  .\n                            . |   url:
      sip:jones@  |  | redirect | .\n                            . |        voicemail.
      \ |->|          | .\n                            . |        example.com |  |__________|
      .\n                            . |____________________|               .\n                            ........................................\n
      \  Figure 1: Sample CPL Action: Graphical Version\n"
    title: 2.2.  Abstract Structure of a Call Processing Action
  - contents:
    - "2.3.  Location Model\n   For flexibility, one piece of information necessary
      for CPL is not\n   given as node parameters: the set of locations to which a
      call is to\n   be directed.  Instead, this set of locations is stored as an
      implicit\n   global variable throughout the execution of a processing action
      (and\n   its subactions).  This allows locations to be retrieved from external\n
      \  sources, filtered, and so forth, without requiring general language\n   support
      for such operations (which could harm the simplicity and\n   tractability of
      understanding the language).  The specific operations\n   which add, retrieve,
      or filter location sets are given in Section 5.\n   For the incoming top-level
      call processing action, the location set\n   is initialized to the empty set.
      \ For the outgoing action, it is\n   initialized to the destination address
      of the call.\n"
    title: 2.3.  Location Model
  - contents:
    - "2.4.  XML Structure\n   Syntactically, CPL scripts are represented by XML documents.
      \ XML is\n   thoroughly specified by the XML specification [2], and implementors\n
      \  of this specification should be familiar with that document.\n   However,
      as a brief overview, XML consists of a hierarchical\n   structure of tags; each
      tag can have a number of attributes.  It is\n   visually and structurally very
      similar to HTML [18], as both\n   languages are simplifications of the earlier
      and larger standard SGML\n   [19].\n   See Figure 2 for the XML document corresponding
      to the graphical\n   representation of the CPL script in Figure 1.  Both nodes
      and outputs\n   in CPL are represented by XML tags; parameters are represented
      by XML\n   tag attributes.  Typically, node tags contain output tags, and vice-\n
      \  versa (with a few exceptions: see Sections 5.1, 5.3, 7.1, and 7.2).\n   The
      connection between the output of a node and another node is\n   represented
      by enclosing the tag representing the pointed-to node\n   inside the tag for
      the outer node's output.  Convergence (several\n   outputs pointing to a single
      node) is represented by subactions,\n   discussed further in Section 8.\n   The
      higher-level structure of a CPL script is represented by tags\n   corresponding
      to each piece of ancillary information, subactions, and\n   top-level actions,
      in order.  This higher-level information is all\n   enclosed in a special tag
      \"cpl\", the outermost tag of the XML\n   document.\n   A complete XML Schema
      for CPL is provided in Appendix C.  The\n   remainder of the main sections of
      this document describe the\n   semantics of CPL, while giving its syntax informally.
      \ For the formal\n   syntax, please see the appendix.\n"
    title: 2.4.  XML Structure
  title: 2.  Structure of CPL Scripts
- contents:
  - "3.  Script Structure: Overview\n   As mentioned, a CPL script consists of ancillary
    information,\n   subactions, and top-level actions.  The full syntax of the \"cpl\"
    node\n   is given in Figure 3.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
    \  <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
    \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <subaction
    id=\"voicemail\">\n       <location url=\"sip:jones@voicemail.example.com\">\n
    \        <redirect />\n       </location>\n     </subaction>\n     <incoming>\n
    \      <address-switch field=\"origin\" subfield=\"host\">\n         <address
    subdomain-of=\"example.com\">\n           <location url=\"sip:jones@example.com\">\n
    \            <proxy timeout=\"10\">\n               <busy> <sub ref=\"voicemail\"
    /> </busy>\n               <noanswer> <sub ref=\"voicemail\" /> </noanswer>\n
    \              <failure> <sub ref=\"voicemail\" /> </failure>\n             </proxy>\n
    \          </location>\n         </address>\n         <otherwise>\n           <sub
    ref=\"voicemail\" />\n         </otherwise>\n       </address-switch>\n     </incoming>\n
    \  </cpl>\n   Figure 2: Sample CPL Script: XML Version\n           Tag:  \"cpl\"\n
    \   Parameters:  None\n      Sub-tags:  \"ancillary\"  See Section 9\n                 \"subaction\"
    \ See Section 8\n                 \"outgoing\"   Top-level actions to take on
    this user's\n                              outgoing calls\n                 \"incoming\"
    \  Top-level actions to take on this user's\n                              incoming
    calls\n   Figure 3: Syntax of the top-level \"cpl\" tag\n   Call processing actions,
    both top-level actions and subactions,\n   consist of a tree of nodes and outputs.
    \ Nodes and outputs are both\n   described by XML tags.  There are four categories
    of CPL nodes:\n   switches, which represent choices a CPL script can make, location\n
    \  modifiers, which add or remove locations from the location set,\n   signalling
    operations, which cause signalling events in the\n   underlying protocol, and
    non-signalling operations, which trigger\n   behavior which does not effect the
    underlying protocol.\n"
  title: '3.  Script Structure: Overview'
- contents:
  - "4.  Switches\n   Switches represent choices a CPL script can make, based on either\n
    \  attributes of the original call request or items independent of the\n   call.\n
    \  All switches are arranged as a list of conditions that can match a\n   variable.
    \ Each condition corresponds to a node output; the output\n   points to the next
    node that should be executed if the condition is\n   true.  The conditions are
    tried in the order they are presented in\n   the script; the output corresponding
    to the first node to match is\n   taken.\n   There are two special switch outputs
    that apply to every switch type.\n   The output \"not-present\", which MAY occur
    anywhere in the list of\n   outputs, is true if the variable the switch was to
    match was not\n   present in the original call setup request.  (In this document,
    this\n   is sometimes described by saying that the information is \"absent\".)\n
    \  The output \"otherwise\", which MUST be the last output specified if it\n   is
    present, matches if no other condition matched.\n   If no condition matches and
    no \"otherwise\" output was present in the\n   script, the default script behavior
    is taken.  See Section 10 for\n   more information on this.\n   Switches MAY contain
    no outputs.  They MAY only contain an\n   \"otherwise\" output.\n      Such switches
    are not particularly useful, but might be created by\n      tools which automatically
    generate CPL scripts.\n"
  - contents:
    - "4.1.  Address Switches\n   Address switches allow a CPL script to make decisions
      based on one of\n   the addresses present in the original call request.  They
      are\n   summarized in Figure 4.\n          Node:  \"address-switch\"\n       Outputs:
      \ \"address\"         Specific addresses to match\n    Parameters:  \"field\"
      \          \"origin\", \"destination\",\n                                   or
      \"original-destination\"\n                 \"subfield\"        \"address-type\",
      \"user\", \"host\",\n                                   \"port\", \"tel\", or
      \"display\"\n                                   (also: \"password\" and \"alias-type\")\n
      \       Output:  \"address\"\n    Parameters:  \"is\"              Exact match\n
      \                \"contains\"        Substring match (for \"display\" only)\n
      \                \"subdomain-of\"    Sub-domain match (for \"host\", \"tel\")\n
      \  Figure 4: Syntax of the \"address-switch\" node\n   Address switches have
      two node parameters: \"field\" and \"subfield\".\n   The mandatory \"field\"
      parameter allows the script to specify which\n   address is to be considered
      for the switch: either the call's origin\n   address (field \"origin\"), its
      current destination address (field\n   \"destination\"), or its original destination
      (field \"original-\n   destination\"), the destination the call had before any
      earlier\n   forwarding was invoked.  Servers MAY define additional field values.\n
      \  The optional \"subfield\" specifies which part of the address is to be\n
      \  considered.  The possible subfield values are: \"address-type\",\n   \"user\",
      \"host\", \"port\", \"tel\", and \"display\".  Additional subfield\n   values
      MAY be defined for protocol-specific values.  (The subfield\n   \"password\"
      is defined for SIP in Section 4.1.1; the subfield \"alias-\n   type\" is defined
      for H.323 in Appendix B.1.)  If no subfield is\n   specified, the \"entire\"
      address is matched; the precise meaning of\n   this is defined for each underlying
      signalling protocol.  Servers MAY\n   define additional subfield values.\n   The
      subfields are defined as follows:\n      address-type: This indicates the type
      of the underlying address,\n            i.e., the URI scheme, if the address
      can be represented by a\n            URI.  The types specifically discussed
      by this document are\n            \"sip\", \"tel\", and \"h323\".  The address
      type is not case-\n            sensitive.  It has a value for all defined address
      types.\n      user: This subfield of the address indicates, for e-mail style\n
      \           addresses, the user part of the address.  For a telephone\n            number
      style address, it includes the subscriber number.\n            This subfield
      is case-sensitive; it may be absent.\n      host: This subfield of the address
      indicates the Internet host\n            name or IP address corresponding to
      the address, in host\n            name, IPv4, or IPv6 [4] textual representation
      format.  Host\n            names are compared as strings.  IP addresses are
      compared\n            numerically.  (In particular, the presence or location
      of an\n            IPv6 :: omitted-zero-bits block is not significant for\n
      \           matching purposes.)  Host names are never equal to IP\n            addresses
      -- no DNS resolution is performed.  IPv4 addresses\n            are never equal
      to IPv6 addresses, even if the IPv6 address\n            is a v4-in-v6 embedding.
      \ This subfield is not case\n            sensitive, and may be absent.\n            For
      host names only, subdomain matching is supported with\n            the \"subdomain-of\"
      match operator.  The \"subdomain-of\"\n            operator ignores leading
      dots in the hostname or match\n            pattern, if any.\n      port: This
      subfield indicates the TCP or UDP port number of the\n            address, numerically,
      in decimal format.  It is not case\n            sensitive, as it MUST only contain
      decimal digits.  Leading\n            zeros are ignored.\n      tel:  This subfield
      indicates a telephone subscriber number, if\n            the address contains
      such a number.  It is not case\n            sensitive (telephone numbers may
      contain the symbols 'A',\n            'B', 'C', or 'D'), and may be absent.
      \ It may be matched\n            using the \"subdomain-of\" match operator.
      \ Punctuation and\n            separator characters in telephone numbers are
      discarded.\n      display: This subfield indicates a \"display name\" or user-visible\n
      \           name corresponding to an address.  It is a Unicode string,\n            and
      is matched using the case-insensitive algorithm\n            described in Section
      4.2.  The \"contains\" operator may be\n            applied to it.  It may be
      absent.\n   For any completely unknown subfield, the server MAY reject the script\n
      \  at the time it is submitted with an indication of the problem; if a\n   script
      with an unknown subfield is executed, the server MUST consider\n   the \"not-present\"
      output to be the valid one.\n   The \"address\" output tag may take exactly
      one of three possible\n   parameters, indicating the kind of matching allowed.\n
      \     is:   An output with this match operator is followed if the\n            subfield
      being matched in the \"address-switch\" exactly\n            matches the argument
      of the operator.  It may be used for\n            any subfield, or for the entire
      address if no subfield was\n            specified.\n      subdomain-of: This
      match operator applies only for the subfields\n            \"host\" and \"tel\".
      \ In the former case, it matches if the\n            hostname being matched
      is a subdomain of the domain given in\n            the argument of the match
      operator; thus, subdomain-\n            of=\"example.com\" would match the hostnames
      \"example.com\",\n            \"research.example.com\", and\n            \"zaphod.sales.internal.example.com\".
      \ IP addresses may be\n            given as arguments to this operator; however,
      they only\n            match exactly.  In the case of the \"tel\" subfield,
      the\n            output matches if the telephone number being matched has a\n
      \           prefix that matches the argument of the match operator;\n            subdomain-of=\"1212555\"
      would match the telephone number \"1\n            212 555 1212.\"\n      contains:
      This match operator applies only for the subfield\n            \"display\".
      \ The output matches if the display name being\n            matched contains
      the argument of the match as a substring.\n"
    - contents:
      - "4.1.1.  Usage of \"address-switch\" with SIP\n   For SIP, the \"origin\"
        address corresponds to the address in the\n   \"From\" header, \"destination\"
        corresponds to the \"Request-URI\", and\n   \"original-destination\" corresponds
        to the \"To\" header.\n   The \"display\" subfield of an address is the display-name
        part of the\n   address, if it is present.  Because of SIP's syntax, the\n
        \  \"destination\" address field will never have a \"display\" subfield.\n
        \  The \"address-type\" subfield of an address is the URI scheme of that\n
        \  address.  Other address fields depend on that \"address-type\".\n   For
        SIP URIs, the \"user\", \"host\", and \"port\" subfields correspond to\n   the
        \"user,\" \"host,\" and \"port\" elements of the URI syntax.  (Note\n   that,
        following the definitions of RFC 3261 [1], a SIP URI which does\n   not specify
        a port is not the same as an explicit port 5060; the\n   former is indicated
        by an absent port subfield.)  The \"tel\" subfield\n   is defined to be the
        \"user\" part of the URI, with visual separators\n   stripped, if the \"user=phone\"
        parameter is given to the URI, or if\n   the server is otherwise configured
        to recognize the user part as a\n   telephone number.  An additional subfield,
        \"password\", is defined to\n   correspond to the \"password\" element of
        the SIP URI, and is case-\n   sensitive.  However, use of this field is NOT
        RECOMMENDED for general\n   security reasons.\n   For tel URLs, the \"tel\"
        and \"user\" subfields are the subscriber name;\n   in the former case, visual
        separators are stripped.  The \"host\" and\n   \"port\" subfields are both
        not present.\n   For h323 URLs, subfields MAY be set according to the scheme
        described\n   in Appendix B.\n   For other URI schemes, only the \"address-type\"
        subfield is defined by\n   this specification; servers MAY set other pre-defined
        subfields, or\n   MAY support additional subfields.\n   If no subfield is
        specified for addresses in SIP messages, the string\n   matched is the URI
        part of the address.  For \"is\" matches, standard\n   SIP URI matching rules
        are used; for \"contains\" matches, the URI is\n   used verbatim.\n"
      title: 4.1.1.  Usage of "address-switch" with SIP
    title: 4.1.  Address Switches
  - contents:
    - "4.2.  String Switches\n   String switches allow a CPL script to make decisions
      based on free-\n   form strings present in a call request.  They are summarized
      in\n   Figure 5.\n               Node:  \"string-switch\"\n            Outputs:
      \ \"string\"         Specific string to match\n         Parameters:  \"field\"
      \         \"subject\", \"organization\",\n                                       \"user-agent\",
      or \"display\"\n             Output:  \"string\"\n         Parameters:  \"is\"
      \            Exact match\n                      \"contains\"       Substring
      match\n   Figure 5: Syntax of the \"string-switch\" node\n   String switches
      have one node parameter: \"field\".  The mandatory\n   \"field\" parameter specifies
      which string is to be matched.\n   String switches are dependent on the call
      signalling protocol being\n   used.\n   Four fields are defined and listed below.
      \ The value of each of these\n   fields is a free-form Unicode string with no
      other structure defined.\n      subject: The subject of the call.\n      organization:
      The organization of the originator of the call.\n      user-agent: The name
      of the program or device with which the call\n            request was made.\n
      \     display: Free-form text associated with the call, intended to be\n            displayed
      to the recipient, with no other semantics defined\n            by the signalling
      protocol.\n   Strings are matched as case-insensitive Unicode strings, in the\n
      \  following manner.  First, strings are canonicalized to the\n   \"Compatibility
      Composition\" (KC) form, as specified in Unicode\n   Standard Annex #15 [5].
      \ Then, strings are compared using locale-\n   insensitive caseless mapping,
      as specified in Unicode Standard Annex\n   #21 [6].\n      Code to perform the
      first step, in Java and Perl, is available;\n      see the links from Annex
      5 of UAX 15 [5].  The case-insensitive\n      string comparison in the Java
      standard class libraries already\n      performs the second step; other Unicode-aware
      libraries should be\n      similar.\n   The output tag of string matching is
      named \"string\", and has a\n   mandatory argument, one of \"is\" or \"contains\",
      indicating whole-\n   string match or substring match, respectively.\n"
    - contents:
      - "4.2.1.  Usage of \"string-switch\" with SIP\n   For SIP, the fields \"subject\",
        \"organization\", and \"user-agent\"\n   correspond to the SIP header fields
        with the same name.  These are\n   used verbatim as they appear in the message.\n
        \  The field \"display\" is not used, and is never present.\n"
      title: 4.2.1.  Usage of "string-switch" with SIP
    title: 4.2.  String Switches
  - contents:
    - "4.3.  Language Switches\n   Language switches allow a CPL script to make decisions
      based on the\n   languages in which the originator of the call wishes to communicate.\n
      \  They are summarized in Figure 6.\n            Node:  \"language-switch\"\n
      \        Outputs:  \"language\"         Specific string to match\n      Parameters:
      \ None\n          Output:  \"language\"\n      Parameters:  \"matches\"          Match
      if the given language\n                                      matches a language-range
      of the\n                                      call.\n      Figure 6: Syntax
      of the \"language-switch\" node\n   Language switches take no parameters.\n
      \  The \"language\" output takes one parameter, \"matches\".  The value of\n
      \  the parameter is a language-tag, as defined in RFC 3066 [7].  The\n   caller
      may have specified a set of language-ranges, also as defined\n   in RFC 3066.
      \ The CPL server checks each language-tag specified by\n   the script against
      the language-ranges specified in the request.\n   See RFC 3066 for the details
      of how language-ranges match language-\n   tags.  Briefly, a language-range
      matches a language-tag if it exactly\n   equals the tag, or if it exactly equals
      a prefix of the tag such that\n   the first character following the prefix is
      \"-\".\n   If the caller specified the special language-range \"*\", it is ignored\n
      \  for the purpose of matching.  Languages with a \"q\" value of 0 are\n   also
      ignored.\n   This switch MAY be not-present.\n"
    - contents:
      - "4.3.1.  Usage of \"language-switch\" with SIP\n   The language-ranges for
        the \"language-switch\" switch are obtained\n   from the SIP \"Accept-Language\"
        header field.  The switch is not-\n   present if the initial SIP request did
        not contain this header field.\n      Note that because of CPL's first-match
        semantics in switches, \"q\"\n      values other than 0 of the \"Accept-Language\"
        header fields are\n      ignored.\n"
      title: 4.3.1.  Usage of "language-switch" with SIP
    title: 4.3.  Language Switches
  - contents:
    - "4.4.  Time Switches\n   Time switches allow a CPL script to make decisions
      based on the time\n   and/or date the script is being executed.  They are summarized
      in\n   Figure 7.\n   Time switches are independent of the underlying signalling
      protocol.\n         Node:  \"time-switch\"\n      Outputs:  \"time\"         Specific
      time to match\n   Parameters:  \"tzid\"         RFC 2445 Time Zone Identifier\n
      \               \"tzurl\"        RFC 2445 Time Zone URL\n       Output:  \"time\"\n
      \  Parameters:  \"dtstart\"      Start of interval (RFC 2445 DATE-TIME)\n                \"dtend\"
      \       End of interval (RFC 2445 DATE-TIME)\n                \"duration\"     Length
      of interval (RFC 2445 DURATION)\n                \"freq\"         Frequency
      of recurrence (\"secondly\",\n                               \"minutely\", \"hourly\",
      \"daily\",\n                               \"weekly\", \"monthly\", or \"yearly\")\n
      \               \"interval\"     How often the recurrence repeats\n                \"until\"
      \       Bound of recurrence (RFC 2445 DATE-TIME)\n                \"count\"
      \       Number of occurrences of recurrence\n                \"bysecond\"     List
      of seconds within a minute\n                \"byminute\"     List of minutes
      within an hour\n                \"byhour\"       List of hours of the day\n
      \               \"byday\"        List of days of the week\n                \"bymonthday\"
      \  List of days of the month\n                \"byyearday\"    List of days
      of the year\n                \"byweekno\"     List of weeks of the year\n                \"bymonth\"
      \     List of months of the year\n                \"wkst\"         First day
      of the work week\n                \"bysetpos\"     List of values within\n                               set
      of events specified\n   Figure 7: Syntax of the \"time-switch\" node\n   Time
      switches are based closely on the specification of recurring\n   intervals of
      time in the Internet Calendaring and Scheduling Core\n   Object Specification
      (iCalendar COS), RFC 2445 [8].\n      This allows CPL scripts to be generated
      automatically from\n      calendar books.  It also allows us to re-use the extensive\n
      \     existing work specifying time intervals.\n   If future standards-track
      documents are published that update or\n   obsolete RFC 2445, any changes or
      clarifications those documents make\n   to recurrence handling apply to CPL
      time-switches as well.\n   An algorithm to determine whether an instant falls
      within a given\n   recurrence is given in Appendix A.\n   The \"time-switch\"
      tag takes two optional parameters, \"tzid\" and\n   \"tzurl\", both of which
      are defined in RFC 2445 (Sections 4.8.3.1 and\n   4.8.3.5 respectively).  The
      \"tzid\" is the identifying label by which\n   a time zone definition is referenced.
      \ If it begins with a forward\n   slash (solidus), it references a to-be-defined
      global time zone\n   registry; otherwise it is locally-defined at the server.
      \ The \"tzurl\"\n   gives a network location from which an up-to-date VTIMEZONE\n
      \  definition for the timezone can be retrieved.\n   While \"tzid\" labels that
      do not begin with a forward slash are\n   locally defined, it is RECOMMENDED
      that servers support at least the\n   naming scheme used by the Olson Time Zone
      database [9].  Examples of\n   timezone databases that use the Olson scheme
      are the zoneinfo files\n   on most Unix-like systems, and the standard Java
      TimeZone class.\n   Servers SHOULD resolve \"tzid\" and \"tzurl\" references
      to time zone\n   definitions at the time the script is uploaded.  They MAY\n
      \  periodically refresh these resolutions to obtain the most up-to-date\n   definition
      of a time zone.  If a \"tzurl\" becomes invalid, servers\n   SHOULD remember
      the most recent valid data retrieved from the URL.\n   If a script is uploaded
      with a \"tzid\" and \"tzurl\" which the CPL\n   server does not recognize or
      cannot resolve, it SHOULD diagnose and\n   reject this at script upload time.
      \ If neither \"tzid\" nor \"tzurl\" are\n   present, all non-UTC times within
      this time switch should be\n   interpreted as being \"floating\" times, i.e.,
      that they are specified\n   in the local timezone of the CPL server.\n      Because
      of daylight-savings-time changes over the course of a\n      year, it is necessary
      to specify time switches in a given\n      timezone.  UTC offsets are not sufficient,
      or a time-of-day\n      routing rule which held between 9 am and 5 pm in the
      eastern\n      United States would start holding between 8 am and 4 pm at the
      end\n      of October.\n   Authors of CPL servers should be careful to handle
      correctly the\n   intervals when local time is discontinuous, at the beginning
      or end\n   of daylight-savings time.  Note especially that some times may occur\n
      \  more than once when clocks are set back.  The algorithm in Appendix A\n   is
      believed to handle this correctly.\n   Time nodes specify a list of periods
      during which their output should\n   be taken.  They have two required parameters:
      \"dtstart\", which\n   specifies the beginning of the first period of the list,
      and exactly\n   one of \"dtend\" or \"duration\", which specify the ending time
      or the\n   duration of the period, respectively.  The \"dtstart\" and \"dtend\"\n
      \  parameters are formatted as iCalendar COS DATE-TIME values, as\n   specified
      in Section 4.3.5 of RFC 2445 [8].  Because time zones are\n   specified in the
      top-level \"time-switch\" tag, only forms 1 or 2\n   (floating or UTC times)
      can be used.  The \"duration\" parameter is\n   given as an iCalendar COS DURATION
      parameter, as specified in section\n   4.3.6 of RFC 2445.  Both the DATE-TIME
      and the DURATION syntaxes are\n   subsets of the corresponding syntaxes from
      ISO 8601 [20].\n   For a recurring interval, the \"duration\" parameter MUST
      be small\n   enough such that subsequent intervals do not overlap.  For non-\n
      \  recurring intervals, durations of any positive length are permitted.\n   Zero-length
      and negative-length durations are not allowed.\n   If no other parameters are
      specified, a time node indicates only a\n   single period of time.  More complicated
      sets of period intervals are\n   constructed as recurrences.  A recurrence is
      specified by including\n   the \"freq\" parameter, which indicates the type
      of recurrence rule.\n   Parameters other than \"dtstart\", \"dtend\", and \"duration\"
      SHOULD NOT\n   be specified unless \"freq\" is present, though CPL servers SHOULD\n
      \  accept scripts with such parameters present, and ignore the other\n   parameters.\n
      \  The \"freq\" parameter takes one of the following values: \"secondly\",\n
      \  to specify repeating periods based on an interval of a second or\n   more,
      \"minutely\", to specify repeating periods based on an interval\n   of a minute
      or more, \"hourly\", to specify repeating periods based on\n   an interval of
      an hour or more, \"daily\", to specify repeating periods\n   based on an interval
      of a day or more, \"weekly\", to specify repeating\n   periods based on an interval
      of a week or more, \"monthly\", to specify\n   repeating periods based on an
      interval of a month or more, and\n   \"yearly\", to specify repeating periods
      based on an interval of a year\n   or more.  These values are not case-sensitive.\n
      \  The \"interval\" parameter contains a positive integer representing how\n
      \  often the recurrence rule repeats.  The default value is \"1\", meaning\n
      \  every second for a \"secondly\" rule, every minute for a \"minutely\"\n   rule,
      every hour for an \"hourly\" rule, every day for a \"daily\" rule,\n   every
      week for a \"weekly\" rule, every month for a \"monthly\" rule, and\n   every
      year for a \"yearly\" rule.\n   The \"until\" parameter defines an iCalendar
      COS DATE or DATE-TIME\n   value which bounds the recurrence rule in an inclusive
      manner.  If\n   the value specified by \"until\" is synchronized with the specified\n
      \  recurrence, this date or date-time becomes the last instance of the\n   recurrence.
      \ If specified as a date-time value, then it MUST be\n   specified in UTC time
      format.  If not present, and the \"count\"\n   parameter is not also present,
      the recurrence is considered to repeat\n   forever.\n   The \"count\" parameter
      defines the number of occurrences at which to\n   range-bound the recurrence.
      \ The \"dtstart\" parameter counts as the\n   first occurrence.  The \"until\"
      and \"count\" parameters MUST NOT occur\n   in the same \"time\" output.\n   The
      \"bysecond\" parameter specifies a comma-separated list of seconds\n   within
      a minute.  Valid values are 0 to 59.  The \"byminute\" parameter\n   specifies
      a comma-separated list of minutes within an hour.  Valid\n   values are 0 to
      59.  The \"byhour\" parameter specifies a comma-\n   separated list of hours
      of the day.  Valid values are 0 to 23.\n   The \"byday\" parameter specifies
      a comma-separated list of days of the\n   week.  \"MO\" indicates Monday, \"TU\"
      indicates Tuesday, \"WE\" indicates\n   Wednesday, \"TH\" indicates Thursday,
      \"FR\" indicates Friday, \"SA\"\n   indicates Saturday, and \"SU\" indicates
      Sunday.  These values are not\n   case-sensitive.\n   Each \"byday\" value can
      also be preceded by a positive (+n) or\n   negative (-n) integer.  If present,
      this indicates the nth occurrence\n   of the specific day within the \"monthly\"
      or \"yearly\" recurrence.  For\n   example, within a \"monthly\" rule, +1MO
      (or simply 1MO) represents the\n   first Monday within the month, whereas -1MO
      represents the last\n   Monday of the month.  If an integer modifier is not
      present, it means\n   all days of this type within the specified frequency.
      \ For example,\n   within a \"monthly\" rule, MO represents all Mondays within
      the month.\n   The \"bymonthday\" parameter specifies a comma-separated list
      of days\n   of the month.  Valid values are 1 to 31 or -31 to -1.  For example,\n
      \  -10 represents the tenth to the last day of the month.\n   The \"byyearday\"
      parameter specifies a comma-separated list of days of\n   the year.  Valid values
      are 1 to 366 or -366 to -1.  For example, -1\n   represents the last day of
      the year (December 31st) and -306\n   represents the 306th to the last day of
      the year (March 1st).\n   The \"byweekno\" parameter specifies a comma-separated
      list of ordinals\n   specifying weeks of the year.  Valid values are 1 to 53
      or -53 to -1.\n   This corresponds to weeks according to week numbering as defined
      in\n   ISO 8601 [20].  A week is defined as a seven day period, starting on\n
      \  the day of the week defined to be the week start (see \"wkst\").  Week\n
      \  number one of the calendar year is the first week which contains at\n   least
      four (4) days in that calendar year.  This parameter is only\n   valid for \"yearly\"
      rules.  For example, 3 represents the third week\n   of the year.\n      Note:
      Assuming a Monday week start, week 53 can only occur when\n      January 1 is
      a Thursday or, for leap years, if January 1 is a\n      Wednesday.\n   The \"bymonth\"
      parameter specifies a comma-separated list of months of\n   the year.  Valid
      values are 1 to 12.\n   The \"wkst\" parameter specifies the day on which the
      work week starts.\n   Valid values are \"MO\", \"TU\", \"WE\", \"TH\", \"FR\",
      \"SA\" and \"SU\".  This\n   is significant when a \"weekly\" recurrence has
      an interval greater\n   than 1, and a \"byday\" parameter is specified.  This
      is also\n   significant in a \"yearly\" recurrence when a \"byweekno\" parameter
      is\n   specified.  The default value is \"MO\", following ISO 8601 [20].\n   The
      \"bysetpos\" parameter specifies a comma-separated list of values\n   which
      corresponds to the nth occurrence within the set of events\n   specified by
      the rule.  Valid values are 1 to 366 or -366 to -1.  It\n   MUST only be used
      in conjunction with another byxxx parameter.  For\n   example, \"the last work
      day of the month\" could be represented as:\n      <time -timerange- freq=\"monthly\"
      byday=\"MO,TU,WE,TH,FR\"\n            bysetpos=\"-1\">\n   Each \"bysetpos\"
      value can include a positive (+n) or negative (-n)\n   integer.  If present,
      this indicates the nth occurrence of the\n   specific occurrence within the
      set of events specified by the rule.\n   If byxxx parameter values are found
      which are beyond the available\n   scope (i.e., bymonthday=\"30\" in February),
      they are simply ignored.\n   Byxxx parameters modify the recurrence in some
      manner.  Byxxx rule\n   parts for a period of time which is the same or greater
      than the\n   frequency generally reduce or limit the number of occurrences of
      the\n   recurrence generated.  For example, freq=\"daily\" bymonth=\"1\" reduces\n
      \  the number of recurrence instances from all days (if the \"bymonth\"\n   parameter
      is not present) to all days in January.  Byxxx parameters\n   for a period of
      time less than the frequency generally increase or\n   expand the number of
      occurrences of the recurrence.  For example,\n   freq=\"yearly\" bymonth=\"1,2\"
      increases the number of days within the\n   yearly recurrence set from 1 (if
      \"bymonth\" parameter is not present)\n   to 2.\n   If multiple Byxxx parameters
      are specified, then after evaluating the\n   specified \"freq\" and \"interval\"
      parameters, the Byxxx parameters are\n   applied to the current set of evaluated
      occurrences in the following\n   order: \"bymonth\", \"byweekno\", \"byyearday\",
      \"bymonthday\", \"byday\",\n   \"byhour\", \"byminute\", \"bysecond\", and \"bysetpos\";
      then \"count\" and\n   \"until\" are evaluated.\n   Here is an example of evaluating
      multiple Byxxx parameters.\n      <time dtstart=\"19970105T083000\" duration=\"10M\"\n
      \           freq=\"yearly\" interval=\"2\" bymonth=\"1\" byday=\"SU\"\n            byhour=\"8,9\"
      byminute=\"30\">\n   First, the interval=\"2\" would be applied to freq=\"yearly\"
      to arrive\n   at \"every other year.\"  Then, bymonth=\"1\" would be applied
      to arrive\n   at \"every January, every other year.\"  Then, byday=\"SU\" would
      be\n   applied to arrive at \"every Sunday in January, every other year.\"\n
      \  Then, byhour=\"8,9\" would be applied to arrive at \"every Sunday in\n   January
      at 8 AM and 9 AM, every other year.\"  Then, byminute=\"30\"\n   would be applied
      to arrive at \"every Sunday in January at 8:30 AM and\n   9:30 AM, every other
      year.\"  Then the second is derived from\n   \"dtstart\" to end up in \"every
      Sunday in January from 8:30:00 AM to\n   8:40:00 AM, and from and 9:30:00 AM
      to 9:40:00 AM, every other year.\"\n   Similarly, if the \"byminute\", \"byhour\",
      \"byday\", \"bymonthday\", or\n   \"bymonth\" parameter were missing, the appropriate
      minute, hour, day,\n      or month would have been retrieved from the \"dtstart\"
      parameter.\n   The iCalendar COS RDATE, EXRULE, and EXDATE recurrence rules
      are not\n   specifically mapped to components of the time-switch node.\n   Equivalent
      functionality to the exception rules can be attained by\n   using the ordering
      of switch rules to exclude times using earlier\n   rules; equivalent functionality
      to the additional-date RDATE rules\n   can be attained by using \"sub\" nodes
      (see Section 8) to link multiple\n   outputs to the same subsequent node.\n
      \  The \"not-present\" output is never true for a time switch.  However,\n   it
      MAY be included to allow switch processing to be more regular.\n"
    - contents:
      - "4.4.1.  iCalendar Differences and Implementation Issues\n   (This sub-sub-section
        is non-normative.)\n   The specification of recurring events in this section
        is identical\n   (except for syntax and formatting issues) to that of RFC
        2445 [8],\n   with only one additional restriction.  That one restriction
        is that\n   consecutive instances of recurrence intervals may not overlap.\n
        \  It was a matter of some debate, during the design of CPL, whether the\n
        \  entire iCalendar COS recurrence specification should be included in\n   CPL,
        or whether only a subset should be included.  It was eventually\n   decided
        that compatibility between the two protocols was of primary\n   importance.
        \ This imposes some additional implementation issues on\n   implementors of
        CPL servers.\n   It does not appear to be possible to determine, in constant
        time,\n   whether a given instant of time falls within one of the intervals\n
        \  defined by a full iCalendar COS recurrence.  The primary concerns are\n
        \  as follows:\n      o  The \"count\" parameter cannot be checked in constant
        running\n         time, since it requires that the server enumerate all\n
        \        recurrences from \"dtstart\" to the present time, in order to\n         determine
        whether the current recurrence satisfies the\n         parameter.  However,
        a server can expand a \"count\" parameter\n         once, off-line, to determine
        the date of the last recurrence.\n         This date can then be treated as
        a virtual \"until\" parameter\n         for the server's internal processing.\n
        \     o  Similarly, the \"bysetpos\" parameter requires that the server\n
        \        enumerate all instances of the occurrence from the start of the\n
        \        current recurrence set until the present time.  This requires\n         somewhat
        more complex pre-processing, but generally, a single\n         recurrence
        with a \"bysetpos\" parameter can be split up into\n         several recurrences
        without them.\n      o  Finally, constant running time of time switches also
        requires\n         that a candidate starting time for a recurrence can be\n
        \        established quickly and uniquely, to check whether it satisfies\n
        \        the other restrictions.  This requires that a recurrence's\n         duration
        not be longer than its repetition interval, so that a\n         given instant
        cannot fall within several consecutive potential\n         repetitions of
        the recurrence.  The restriction that\n         consecutive intervals not
        overlap partially satisfies this\n         condition, but does not fully ensure
        it.  Again, to some extent\n         pre-processing can help resolve this.\n
        \  The algorithm given in Appendix A runs in constant time after these\n   pre-processing
        steps.\n   Servers ought to check that recurrence rules do not create any
        absurd\n   run-time or memory requirements, and reject those that do, just
        as\n   they ought to check that CPL scripts in general are not absurdly\n
        \  large.\n"
      title: 4.4.1.  iCalendar Differences and Implementation Issues
    title: 4.4.  Time Switches
  - contents:
    - "4.5.  Priority Switches\n   Priority switches allow a CPL script to make decisions
      based on the\n   priority specified for the original call.  They are summarized
      in\n   Figure 8.  They are dependent on the underlying signalling protocol.\n
      \            Node:  \"priority-switch\"\n          Outputs:  \"priority\"         Specific
      priority to match\n       Parameters:  None\n           Output:  \"priority\"\n
      \      Parameters:  \"less\"             Match if priority is less\n                                       than
      that specified\n                    \"greater\"          Match if priority is
      greater\n                                       than that specified\n                    \"equal\"
      \           Match if priority is equal\n                                       to
      that specified\n   Figure 8: Syntax of the \"priority-switch\" node\n   Priority
      switches take no parameters.\n   The \"priority\" tag takes one of the three
      parameters \"greater\",\n   \"less\", or \"equal\".  The values of these parameters
      are one of the\n   following priorities: in decreasing order, \"emergency\",
      \"urgent\",\n   \"normal\", and \"non-urgent\".  These values are matched in
      a case-\n   insensitive manner.  Outputs with the \"less\" parameter are taken
      if\n   the priority of the call is less than the priority given in the\n   argument,
      and so forth.\n   If no priority is specified in a message, the priority is
      considered\n   to be \"normal\".  If an unknown priority is specified in the
      call, it\n   is considered to be equivalent to \"normal\" for the purposes of\n
      \  \"greater\" and \"less\" comparisons, but it is compared literally for\n
      \  \"equal\" comparisons.\n   Since every message has a priority, the \"not-present\"
      output is never\n   true for a priority switch.  However, it MAY be included,
      to allow\n   switch processing to be more regular.\n"
    - contents:
      - "4.5.1.  Usage of \"priority-switch\" with SIP\n   The priority of a SIP message
        corresponds to the \"Priority\" header in\n   the initial \"INVITE\" message.\n"
      title: 4.5.1.  Usage of "priority-switch" with SIP
    title: 4.5.  Priority Switches
  title: 4.  Switches
- contents:
  - "5.  Location Modifiers\n   The abstract location model of CPL is described in
    Section 2.3.  The\n   behavior of several of the signalling operations (defined
    in Section\n   6) is dependent on the current location set specified.  Location\n
    \  nodes add or remove locations from the location set.\n   There are three types
    of location nodes defined.  Explicit locations\n   add literally-specified locations
    to the current location set,\n   location lookups obtain locations from some outside
    source, and\n   location filters remove locations from the set, based on some\n
    \  specified criteria.\n"
  - contents:
    - "5.1.  Explicit Location\n   Explicit location nodes specify a location literally.
      \ Their syntax\n   is described in Figure 9.\n   Explicit location nodes are
      dependent on the underlying signalling\n   protocol.\n          Node:  \"location\"\n
      \      Outputs:  None        (Next node follows directly)\n     Next node:  Any
      node\n    Parameters:  \"url\"       URL of address to add to location set\n
      \                \"priority\"  Priority of this location (0.0-1.0)\n                 \"clear\"
      \    Whether to clear the location set before\n                             adding
      the new value\n   Figure 9: Syntax of the \"location\" node\n   Explicit location
      nodes have three node parameters.  The mandatory\n   \"url\" parameter's value
      is the URL of the address to add to the\n   location set.  Only one address
      may be specified per location node;\n   multiple locations may be specified
      by cascading these nodes.\n   The optional \"priority\" parameter specifies
      a priority for the\n   location.  Its value is a floating-point number between
      0.0 and 1.0.\n   If it is not specified, the server SHOULD assume a default
      priority\n   of 1.0.  The optional \"clear\" parameter specifies whether the\n
      \  location set should be cleared before adding the new location to it.\n   Its
      value can be \"yes\" or \"no\", with \"no\" as the default.\n   Basic location
      nodes have only one possible result, since there is no\n   way that they can
      fail.  (If a basic location node specifies a\n   location which isn't supported
      by the underlying signalling protocol,\n   the script server SHOULD detect this
      and report it to the user at the\n   time the script is submitted.)  Therefore,
      their XML representations\n   do not have explicit output tags; the <location>
      tag directly\n   contains another node.\n"
    - contents:
      - "5.1.1.  Usage of \"location\" with SIP\n   All SIP locations are represented
        as URLs, so the locations specified\n   in \"location\" tags are interpreted
        directly.\n"
      title: 5.1.1.  Usage of "location" with SIP
    title: 5.1.  Explicit Location
  - contents:
    - "5.2.  Location Lookup\n   Locations can also be specified up through external
      means, through\n   the use of location lookups.  The syntax of these tags is
      given in\n   Figure 10.\n   Location lookup is dependent on the underlying signalling
      protocol.\n          Node:  \"lookup\"\n       Outputs:  \"success\"   Next
      node if lookup was successful\n                 \"notfound\"  Next node if lookup
      found no addresses\n                 \"failure\"   Next node if lookup failed\n
      \   Parameters:  \"source\"    Source of the lookup\n                 \"timeout\"
      \  Time to try before giving up on the lookup\n                 \"clear\"     Whether
      to clear the location set before\n                             adding the new
      values\n        Output:  \"success\"\n    Parameters:  none\n        Output:
      \ \"notfound\"\n    Parameters:  none\n        Output:  \"failure\"\n    Parameters:
      \ none\n   Figure 10: Syntax of the \"lookup\" node\n   Location lookup nodes
      have one mandatory parameter and two optional\n   parameters.  The mandatory
      parameter is \"source\", the source of the\n   lookup.  This can either be a
      URI, or a non-URI value.  If the value\n   of \"source\" is a URI, it indicates
      a location which the CPL server\n   can query to obtain an object with the text/uri-list
      media type (see\n   the IANA registration of this type, which also appears in
      RFC 2483\n   [10]).  The query is performed verbatim, with no additional\n   information
      (such as URI parameters) added.  The server adds the\n   locations contained
      in this object to the location set.\n   CPL servers MAY refuse to allow URI-based
      sources for location\n   queries for some or all URI schemes.  In this case,
      they SHOULD\n   reject the script at script upload time.\n      There has been
      discussion of having CPL servers add URI parameters\n      to the location request,
      so that (for instance) CGI scripts could\n      be used to resolve them.  However,
      the consensus was that this\n      should be a CPL extension, not a part of
      the base specification.\n   Non-URL sources indicate a source not specified
      by a URL which the\n   server can query for addresses to add to the location
      set.  The only\n   non-URL source currently defined is \"registration\", which
      specifies\n   all the locations currently registered with the server.\n   The
      \"lookup\" node also has two optional parameters.  The \"timeout\"\n   parameter
      specifies the time, as a positive integer number of\n   seconds, the script
      is willing to wait for the lookup to be\n   performed.  If this is not specified,
      its default value is 30.  The\n   \"clear\" parameter specifies whether the
      location set should be\n   cleared before the new locations are added.\n   Lookup
      has three outputs: \"success\", \"notfound\", and \"failure\".\n   Notfound
      is taken if the lookup process succeeded but did not find\n   any locations;
      failure is taken if the lookup failed for some reason,\n   including that the
      specified timeout was exceeded.  If a given output\n   is not present, script
      execution terminates and the default behavior\n   is performed.\n"
    - contents:
      - "5.2.1.  Usage of \"lookup\" with SIP\n   For SIP, the \"registration\" lookup
        source corresponds to the\n   locations registered with the server using \"REGISTER\"
        messages.\n"
      title: 5.2.1.  Usage of "lookup" with SIP
    title: 5.2.  Location Lookup
  - contents:
    - "5.3.  Location Removal\n   A CPL script can also remove locations from the
      location set, through\n   the use of the \"remove-location\" node.  The syntax
      of this node is\n   defined in Figure 11.\n   The meaning of this node is dependent
      on the underlying signalling\n   Protocol.\n             Node:  \"remove-location\"\n
      \         Outputs:  None               (Next node follows directly)\n        Next
      node:  Any node\n       Parameters:  \"location\"         Location to remove\n
      \  Figure 11: Syntax of the \"remove-location\" node\n   A \"remove-location\"
      node removes locations from the location set.  It\n   is primarily useful following
      a \"lookup\" node.  An example of this is\n   given in Section 12.8.\n   The
      \"remove-location\" node has one optional parameter.  The parameter\n   \"location\"
      gives the URI of a location to be removed from the set, in\n   a signalling-protocol-dependent
      manner.  If this parameter is not\n   given, all locations are removed from
      the set.\n   The \"remove-location\" node has no explicit output tags.  In the
      XML\n   syntax, the XML \"remove-location\" tag directly encloses the next\n
      \  node's tag.\n"
    - contents:
      - "5.3.1.  Usage of \"remove-location\" with SIP\n   The location specified
        in the \"location\" parameter of the \"remove-\n   location\" node is matched
        against the location set using the standard\n   rules for SIP URI matching
        (as are used, e.g., to match Contact\n   addresses when refreshing registrations).\n"
      title: 5.3.1.  Usage of "remove-location" with SIP
    title: 5.3.  Location Removal
  title: 5.  Location Modifiers
- contents:
  - "6.  Signalling Operations\n   Signalling operation nodes cause signalling events
    in the underlying\n   signalling protocol.  Three signalling operations are defined:\n
    \  \"proxy,\" \"redirect,\" and \"reject.\"\n"
  - contents:
    - "6.1.  Proxy\n   Proxy causes the triggering call to be forwarded on to the
      currently\n   specified set of locations.  The syntax of the proxy node is given
      in\n   Figure 12.\n   The specific signalling events invoked by the \"proxy\"
      node are\n   signalling-protocol-dependent, though the general concept should\n
      \  apply to any signalling protocol.\n         Node:  \"proxy\"\n      Outputs:
      \ \"busy\"         Next node if call attempt returned \"busy\"\n                \"noanswer\"
      \    Next node if call attempt was not\n                               answered
      before timeout\n                \"redirection\"  Next node if call attempt was
      redirected\n                \"failure\"      Next node if call attempt failed\n
      \               \"default\"      Default next node for unspecified outputs\n
      \  Parameters:  \"timeout\"      Time to try before giving up on the\n                               call
      attempt\n                \"recurse\"      Whether to recursively look up\n                               redirections\n
      \               \"ordering\"     What order to try the location set in.\n       Output:
      \ \"busy\"\n   Parameters:  none\n       Output:  \"noanswer\"\n   Parameters:
      \ none\n       Output:  \"redirection\"\n   Parameters:  none\n       Output:
      \ \"failure\"\n   Parameters:  none\n       Output:  \"default\"\n   Parameters:
      \ none\n   Figure 12: Syntax of the \"proxy\" node\n   After a proxy operation
      has completed, the CPL server chooses the\n   \"best\" response to the call
      attempt, as defined by the signalling\n   protocol or the server's administrative
      configuration rules.\n   If the call attempt was successful, CPL execution terminates
      and the\n   server proceeds to its default behavior (normally, to allow the
      call\n   to be set up).  Otherwise, the next node corresponding to one of the\n
      \  \"proxy\" node's outputs is taken.  The \"busy\" output is followed if\n
      \  the call was busy, \"noanswer\" is followed if the call was not\n   answered
      before the \"timeout\" parameter expired, \"redirection\" is\n   followed if
      the call was redirected, and \"failure\" is followed if the\n   call setup failed
      for any other reason.\n   If one of the conditions above is true, but the corresponding
      output\n   was not specified, the \"default\" output of the \"proxy\" node is\n
      \  followed instead.  If there is also no \"default\" node specified, CPL\n
      \  execution terminates and the server returns to its default behavior\n   (normally,
      to forward the best response upstream to the originator).\n      Note: CPL extensions
      to allow in-call or end-of-call operations\n      will require an additional
      output, such as \"success\", to be added.\n   If no locations were present in
      the set, or if the only locations in\n   the set were locations to which the
      server cannot proxy a call (for\n   example, \"http\" URLs), the \"failure\"
      output is taken.\n   Proxy has three optional parameters.  The \"timeout\" parameter\n
      \  specifies the time, as a positive integer number of seconds, to wait\n   for
      the call to be completed or rejected; after this time has\n   elapsed, the call
      attempt is terminated and the \"noanswer\" branch is\n   taken.  If this parameter
      is not specified, the default value is 20\n   seconds if the \"proxy\" node
      has a \"noanswer\" or \"default\" output\n   specified; otherwise the server
      SHOULD allow the call to ring for a\n   reasonably long period of time (to the
      maximum extent that server\n   policy allows).\n   The second optional parameter
      is \"recurse\", which can take two\n   values, \"yes\" or \"no\".  This specifies
      whether the server should\n   automatically attempt to place further call attempts
      to telephony\n   addresses in redirection responses that were returned from
      the\n   initial server.  Note that if the value of \"recurse\" is \"yes\", the\n
      \  \"redirection\" output to the script is never taken.  In this case this\n
      \  output SHOULD NOT be present.  The default value of this parameter is\n   \"yes\".\n
      \  The third optional parameter is \"ordering\".  This can have three\n   possible
      values: \"parallel\", \"sequential\", and \"first-only\".  This\n   parameter
      specifies in what order the locations of the location set\n   should be tried.
      \ Parallel asks that they all be tried\n   simultaneously; sequential asks that
      the one with the highest\n   priority be tried first, the one with the next-highest
      priority\n   second, and so forth, until one succeeds or the set is exhausted.\n
      \  First-only instructs the server to try only the highest-priority\n   address
      in the set, and then follow one of the outputs.  The priority\n   of locations
      in a set is determined by server policy, though CPL\n   servers SHOULD honor
      the \"priority\" parameter of the \"location\" tag.\n   The default value of
      this parameter is \"parallel\".\n   Once a proxy operation completes, if control
      is passed on to other\n   nodes, all locations which have been used are cleared
      from the\n   location set.  That is, the location set is emptied of proxyable\n
      \  locations if the \"ordering\" was \"parallel\" or \"sequential\"; the\n   highest-priority
      item in the set is removed from the set if\n   \"ordering\" was \"first-only\".
      \ (In all cases, non-proxyable locations\n   such as \"http\" URIs remain.)
      \ In the case of a \"redirection\" output,\n   the new addresses to which the
      call was redirected are then added to\n   the location set.\n"
    - contents:
      - "6.1.1.  Usage of \"proxy\" with SIP\n   For SIP, the best response to a \"proxy\"
        node is determined by the\n   algorithm of the SIP specification.  The node's
        outputs correspond to\n   the following events:\n      busy: A 486 or 600
        response was the best response received for the\n            call request.\n
        \     redirection: A 3xx response was the best response received for the\n
        \           call request.\n      failure: Any other 4xx, 5xx, or 6xx response
        was the best response\n            received for the call request.\n      no-answer:
        No final response was received for the call request\n            before the
        timeout expired.\n   SIP servers SHOULD honor the \"q\" parameter of SIP registrations
        when\n   determining location priority.\n"
      title: 6.1.1.  Usage of "proxy" with SIP
    title: 6.1.  Proxy
  - contents:
    - "6.2.  Redirect\n   Redirect causes the server to direct the calling party to
      attempt to\n   place its call to the currently specified set of locations.  The\n
      \  syntax of this node is specified in Figure 13.\n   The specific behavior
      the redirect node invokes is dependent on the\n   underlying signalling protocol
      involved, though its semantics are\n   generally applicable.\n             Node:
      \ \"redirect\"\n          Outputs:  None         (No node may follow)\n        Next
      node:  None\n       Parameters:  \"permanent\"  Whether the redirection should
      be\n                                 considered permanent\n   Figure 13: Syntax
      of the \"redirect\" node\n   Redirect immediately terminates execution of the
      CPL script, so this\n   node has no outputs and no next node.  It has one parameter,\n
      \  \"permanent\", which specifies whether the result returned should\n   indicate
      that this is a permanent redirection.  The value of this\n   parameter is either
      \"yes\" or \"no\" and its default value is \"no.\"\n"
    - contents:
      - "6.2.1.  Usage of \"redirect\" with SIP\n   The SIP server SHOULD send a 3xx
        class response to a call request\n   upon executing a \"redirect\" tag.  If
        \"permanent\" was \"yes\", the\n   server SHOULD send the response \"301\"
        (Moved permanently), otherwise\n   it SHOULD send \"302\" (Moved temporarily).\n"
      title: 6.2.1.  Usage of "redirect" with SIP
    title: 6.2.  Redirect
  - contents:
    - "6.3.  Reject\n   Reject nodes cause the server to reject the call attempt.
      \ Their\n   syntax is given in Figure 14.  The specific behavior they invoke
      is\n   dependent on the underlying signalling protocol involved, though\n   their
      semantics are generally applicable.\n                    Node:  \"reject\"\n
      \                Outputs:  None      (No node may follow)\n               Next
      node:  None\n              Parameters:  \"status\"  Status code to return\n
      \                          \"reason\"  Reason phrase to return\n   Figure 14:
      Syntax of the \"reject\" node\n   A reject node immediately terminates the execution
      of a CPL script,\n   so this node has no outputs and no next node.\n   This
      node has two arguments: \"status\" and \"reason\".  The \"status\"\n   argument
      is required, and can take one of the values \"busy\",\n   \"notfound\", \"reject\",
      \"error\", or a signalling-protocol-defined\n   status.\n   The \"reason\" argument
      optionally allows the script to specify a\n   reason for the rejection.\n"
    - contents:
      - "6.3.1.  Usage of \"reject\" with SIP\n   Servers which implement SIP SHOULD
        also allow the \"status\" field to\n   be a numeric argument corresponding
        to a SIP status in the 4xx, 5xx,\n   or 6xx range.\n   They SHOULD send the
        \"reason\" parameter in the SIP reason phrase.\n   A suggested mapping of
        the named statuses is as follows.  Servers MAY\n   use a different mapping,
        though similar semantics SHOULD be\n   preserved.\n      \"busy\": 486 Busy
        Here\n      \"notfound\": 404 Not Found\n      \"reject\": 603 Decline\n      \"error\":
        500 Internal Server Error\n"
      title: 6.3.1.  Usage of "reject" with SIP
    title: 6.3.  Reject
  title: 6.  Signalling Operations
- contents:
  - "7.  Non-signalling Operations\n   In addition to the signalling operations, CPL
    defines several\n   operations which do not affect and are not dependent on the
    telephony\n   signalling protocol.\n"
  - contents:
    - "7.1.  Mail\n   The mail node causes the server to notify a user of the status
      of the\n   CPL script through electronic mail.  Its syntax is given in Figure\n
      \  15.\n          Node:  \"mail\"\n       Outputs:  None      (Next node follows
      directly)\n     Next node:  Any node\n    Parameters:  \"url\"     Mailto url
      to which the mail should be sent\n   Figure 15: Syntax of the \"mail\" node\n
      \  The \"mail\" node takes one argument: a \"mailto\" URL giving the\n   address,
      and any additional desired parameters, of the mail to be\n   sent.  The server
      sends the message containing the content to the\n   given url; it SHOULD also
      include other status information about the\n   original call request and the
      CPL script at the time of the\n   notification.\n      Using a full \"mailto\"
      URL rather than just an e-mail address\n      allows additional e-mail headers
      to be specified, such as\n      <mail url=\"mailto:jones@example.com?subject=Lookup%20failed\"
      />.\n   A mail node has only one possible result, since failure of e-mail\n
      \  delivery cannot reliably be known in real time.  Therefore, its XML\n   representation
      does not have output tags: the <mail> tag directly\n   contains another node
      tag.\n   Note that the syntax of XML requires that ampersand characters, \"&\",\n
      \  which are used as parameter separators in \"mailto\" URLs, be quoted as\n
      \  \"&amp;\" inside parameter values (see Section C.12 of the XML\n   specification
      [2]).\n"
    - contents:
      - "7.1.1.  Suggested Content of Mailed Information\n   This section presents
        suggested guidelines for the mail sent as a\n   result of the \"mail\" node,
        for requests triggered by SIP.  The\n   message mailed (triggered by any protocol)
        SHOULD contain all this\n   information, but servers MAY elect to use a different
        format.\n      1. If the \"mailto\" URI did not specify a subject header,
        the\n         subject of the e-mail is \"[CPL]\", followed by the subject\n
        \        header of the SIP request.  If the URI specified a subject\n         header,
        it is used instead.\n      2. The \"From\" field of the e-mail is set to a
        CPL server\n         configured address, overriding any \"From\" field in
        the \"mailto\"\n         URI.\n      3. Any \"Reply-To\" header in the URI
        is honored.  If none is given,\n         then an e-mail-ized version of the
        origin field of the request\n         is used, if possible (e.g., a SIP \"From\"
        header with a sip: URI\n         would be converted to an e-mail address by
        stripping the URI\n         scheme).\n      4. If the \"mailto\" URI specifies
        a body, it is used.  If none was\n         specified, the body SHOULD contain
        at least the identity of the\n         caller (both the caller's display name
        and address), the date\n         and time of day, the call subject, and if
        available, the call\n         priority.\n   The server SHOULD honor the user's
        requested languages, and send the\n   mail notification using an appropriate
        language and character set.\n"
      title: 7.1.1.  Suggested Content of Mailed Information
    title: 7.1.  Mail
  - contents:
    - "7.2.  Log\n   The Log node causes the server to log information about the call
      to\n   non-volatile storage.  Its syntax is specified in Figure 16.\n               Node:
      \ \"log\"\n            Outputs:  None       (Next node follows directly)\n          Next
      node:  Any node\n         Parameters:  \"name\"     Name of the log file to
      use\n                      \"comment\"  Comment to be placed in log file\n   Figure
      16: Syntax of the \"log\" node\n   Log takes two arguments, both optional: \"name\",
      which specifies the\n   name of the log, and \"comment\", which gives a comment
      about the\n   information being logged.  Servers SHOULD also include other\n
      \  information in the log, such as the time of the logged event,\n   information
      that triggered the call to be logged, and so forth.  Logs\n   are specific to
      the owner of the script which logged the event.  If\n   the \"name\" parameter
      is not given, the event is logged to a standard,\n   server-defined log file
      for the script owner.  This specification\n   does not define how users may
      retrieve their logs from the server.\n   The name of a log is a logical name
      only, and does not necessarily\n   correspond to any physical file on the server.
      \ The interpretation of\n   the log file name is server defined, as is a mechanism
      to access\n   these logs.  The CPL server SHOULD NOT directly map log names\n
      \  uninterpreted onto local file names, for security reasons, lest a\n   security-critical
      file be overwritten.\n   A correctly operating CPL server SHOULD NOT ever allow
      the \"log\"\n   event to fail.  As such, log nodes can have only one possible
      result,\n   and their XML representation does not have explicit output tags.
      \ A\n   CPL <log> tag directly contains another node tag.\n"
    title: 7.2.  Log
  title: 7.  Non-signalling Operations
- contents:
  - "8.  Subactions\n   XML syntax defines a tree.  To allow more general call flow
    diagrams,\n   and to allow script re-use and modularity, we define subactions.\n
    \  Two tags are defined for subactions: subaction definitions and\n   subaction
    references.  Their syntax is given in Figure 17.\n               Tag:  \"subaction\"\n
    \          Subtags:  Any node\n        Parameters:  \"id\"              Name of
    this subaction\n       Pseudo-node:  \"sub\"\n           Outputs:  None in XML
    tree\n        Parameters:  \"ref\"             Name of subaction to execute\n
    \  Figure 17: Syntax of subactions and \"sub\" pseudo-nodes\n   Subactions are
    defined through \"subaction\" tags.  These tags are\n   placed in the CPL script
    after any ancillary information (see Section\n   9), but before any top-level
    tags.  They take one argument: \"id\", a\n   token indicating a script-chosen
    name for the subaction.  The \"id\"\n   value for every \"subaction\" tag in a
    script MUST be unique within\n   that script.\n   Subactions are called from \"sub\"
    tags.  The \"sub\" tag is a \"pseudo-\n   node\", and can be used anyplace in
    a CPL action that a true node\n   could be used.  It takes one parameter, \"ref\",
    the name of the\n   subaction to be called.  The \"sub\" tag contains no outputs
    of its\n   own, instead control passes to the subaction.\n   References to subactions
    MUST refer to subactions defined before the\n   current action.  A \"sub\" tag
    MUST NOT refer to the action it appears\n   in, or to any action defined later
    in the CPL script.  Top-level\n   actions cannot be called from \"sub\" tags,
    or through any other means.\n   Script servers MUST verify at the time the script
    is submitted that\n   no \"sub\" node refers to any subaction that is not its
    proper\n   predecessor.\n      Allowing only back-references of subs forbids any
    sort of\n      recursion.  Recursion would introduce the possibility of non-\n
    \     terminating or non-decidable CPL scripts, a possibility our\n      requirements
    specifically excluded.\n   Every sub MUST refer to a subaction ID defined within
    the same CPL\n   script.  No external links are permitted.\n   Subaction IDs are
    case sensitive.\n      If any subsequent version or extension defines external
    linkages,\n      it should probably use a different tag, perhaps XLink [21].\n
    \     Ensuring termination in the presence of external links is a\n      difficult
    problem.\n"
  title: 8.  Subactions
- contents:
  - "9.  Ancillary Information\n   No ancillary information is defined in the base
    CPL specification.\n   If ancillary information, not part of any operation, is
    found to be\n   necessary for a CPL extension, it SHOULD be placed within this
    tag.\n   The (trivial) definition of the ancillary information tag is given in\n
    \  Figure 18.\n      It may be useful to include timezone definitions inside CPL\n
    \     scripts directly, rather than referencing them externally with\n      \"tzid\"
    and \"tzurl\" parameters.  If it is, an extension could be\n      defined to include
    them here.\n                            Tag:  \"ancillary\"\n                     Parameters:
    \ None\n                        Subtags:  None\n   Figure 18: Syntax of the \"ancillary\"
    tag\n"
  title: 9.  Ancillary Information
- contents:
  - "10.  Default Behavior\n   When a CPL node reaches an unspecified output, either
    because the\n   output tag is not present, or because the tag is present but does
    not\n   contain a node, the CPL server's behavior is dependent on the current\n
    \  state of script execution.  This section gives the operations that\n   should
    be taken in each case.\n      no location modifications or signalling operations
    performed,\n           location set empty: Look up the user's location through\n
    \          whatever mechanism the server would use if no CPL script were\n           in
    effect.  Proxy, redirect, or send a rejection message,\n           using whatever
    policy the server would use in the absence of\n           a CPL script.\n      no
    location modifications or signalling operations performed,\n           location
    set non-empty: (This can only happen for outgoing\n           calls.)  Proxy the
    call to the addresses in the location set.\n      location modifications performed,
    no signalling operations:  Proxy\n           or redirect the call, whichever is
    the server's standard\n           policy, to the addresses in the current location
    set.  If the\n           location set is empty, return a \"notfound\" rejection.\n
    \     noanswer output of proxy, no timeout given: (This is a special\n           case.)
    \ If the \"noanswer\" output of a proxy node is\n           unspecified, and no
    timeout parameter was given to the proxy\n           node, the call should be
    allowed to ring for the maximum\n           length of time allowed by the server
    (or the request, if the\n           request specified a timeout).\n      proxy
    operation previously taken: Return whatever the \"best\"\n           response
    is of all accumulated responses to the call to this\n           point, according
    to the rules of the underlying signalling\n           protocol.\n"
  title: 10.  Default Behavior
- contents:
  - "11.  CPL Extensions\n   Servers MAY support additional CPL features beyond those
    listed in\n   this document.  Some of the extensions which have been suggested
    are\n   a means of querying how a call has been authenticated, richer control\n
    \  over H.323 addressing, end-system or administrator-specific features,\n   regular-expression
    matching for strings and addresses, and mid-call\n   or end-of-call controls.\n
    \  CPL extensions are indicated by XML namespaces [11].  Every extension\n   MUST
    have an appropriate XML namespace assigned to it.  The XML\n   namespace of the
    extension MUST be different from the XML namespace\n   defined in Section 14.
    \ The extension MUST NOT change the syntax or\n   semantics of the CPL schema
    defined in this document.  All XML tags\n   and attributes that are part of the
    extension MUST be appropriately\n   qualified so as to place them within that
    namespace.\n   Tags or attributes in a CPL script which are in the global namespace\n
    \  (i.e., not associated with any namespace) are equivalent to tags and\n   attributes
    in the CPL namespace \"urn:ietf:params:xml:ns:cpl\".\n   A CPL script SHOULD NOT
    specify any namespaces it does not use.  For\n   compatibility with non-namespace-aware
    parsers, a CPL script MAY omit\n   the base CPL namespace for a script which does
    not use any\n   extensions.\n   A CPL server MUST reject any script containing
    a reference to a\n   namespace it does not understand.  It MUST reject any script\n
    \  containing an extension tag or attribute that is not qualified to be\n   in
    an appropriate namespace.\n      A syntax such as\n      <extension-switch>\n
    \       <extension has=\"http://www.example.com/foo\">\n           [extended things]\n
    \       </extension>\n        <otherwise>\n           [non-extended things]\n
    \       </otherwise>\n      </extension-switch>\n      was suggested as an alternate
    way of handling extensions.  This\n      would allow scripts to be uploaded to
    a server without requiring a\n      script author to somehow determine which extensions
    a server\n      supports.  However, experience developing other languages, notably\n
    \     Sieve [22], was that this added excessive complexity to languages.\n      The
    \"extension-switch\" tag could, of course, itself be defined in\n      a CPL extension.\n
    \  In the XML schema of CPL, we introduce three abstract elements,\n   namely
    'toplevelaction', 'switch', and 'action', which accordingly\n   have the abstract
    type 'TopLevelActionType', 'SwitchType', and\n   'ActionType'.  Any top-level
    action in a CPL extension MUST be\n   defined as the substitutionGroup of the
    abstract 'toplevelaction'\n   element, and have the type extended from the 'TopLevelActionType'.\n
    \  Any switch in a CPL extension MUST be defined as the\n   substitutionGroup
    of the abstract 'switch' element, and have the type\n   extended from the 'SwitchType'.
    \ Any action in a CPL extension MUST\n   be defined as the substitutionGroup of
    the abstract 'action' element,\n   and have the type extended from the 'ActionType'.\n"
  title: 11.  CPL Extensions
- contents:
  - '12.  Examples

    '
  - contents:
    - "12.1.  Example: Call Redirect Unconditional\n   The script in Figure 19 is
      a simple script that redirects all calls\n   to a single fixed location.\n      <?xml
      version=\"1.0\" encoding=\"UTF-8\"?>\n      <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
      \       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd \">\n        <incoming>\n          <location url=\"sip:smith@phone.example.com\">\n
      \           <redirect/>\n          </location>\n        </incoming>\n      </cpl>\n
      \  Figure 19: Example Script: Call Redirect Unconditional\n"
    title: '12.1.  Example: Call Redirect Unconditional'
  - contents:
    - "12.2.  Example: Call Forward Busy/No Answer\n   The script in Figure 20 illustrates
      some more complex behavior.  We\n   see an initial proxy attempt to one address,
      with further operations\n   if that fails.  We also see how several outputs
      take the same action\n   subtree, through the use of subactions.\n   <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <subaction
      id=\"voicemail\">\n       <location url=\"sip:jones@voicemail.example.com\">\n
      \        <proxy/>\n       </location>\n     </subaction>\n     <incoming>\n
      \      <location url=\"sip:jones@jonespc.example.com\">\n         <proxy timeout=\"8\">\n
      \          <busy>\n             <sub ref=\"voicemail\"/>\n           </busy>\n
      \          <noanswer>\n             <sub ref=\"voicemail\"/>\n           </noanswer>\n
      \        </proxy>\n       </location>\n     </incoming>\n   </cpl>\n   Figure
      20: Example Script: Call Forward Busy/No Answer\n"
    title: '12.2.  Example: Call Forward Busy/No Answer'
  - contents:
    - "12.3.  Example: Call Forward: Redirect and Default\n   The script in Figure
      21 illustrates further proxy behavior.  The\n   server initially tries to proxy
      to a single address.  If this attempt\n   is redirected, a new redirection is
      generated using the locations\n   returned.  In all other failure cases for
      the proxy node, a default\n   operation -- forwarding to voicemail -- is performed.\n
      \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
      \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd \">\n     <incoming>\n       <location url=\"sip:jones@jonespc.example.com\">\n
      \        <proxy>\n           <redirection>\n             <redirect/>\n           </redirection>\n
      \          <default>\n             <location url=\"sip:jones@voicemail.example.com\">\n
      \              <proxy/>\n             </location>\n           </default>\n         </proxy>\n
      \      </location>\n     </incoming>\n   </cpl>\n   Figure 21: Example Script:
      Call Forward: Redirect and Default\n"
    title: '12.3.  Example: Call Forward: Redirect and Default'
  - contents:
    - "12.4.  Example: Call Screening\n   The script in Figure 22 illustrates address
      switches and call\n   rejection, in the form of a call screening script.  Note
      also that\n   because the address-switch lacks an \"otherwise\" clause, if the\n
      \  initial pattern does not match, the script does not define any\n   operations.
      \ The server therefore proceeds with its default behavior,\n   which would presumably
      be to contact the user.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <cpl
      xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <incoming>\n
      \      <address-switch field=\"origin\" subfield=\"user\">\n         <address
      is=\"anonymous\">\n           <reject status=\"reject\" reason=\"I reject anonymous
      calls\"/>\n         </address>\n       </address-switch>\n     </incoming>\n
      \  </cpl>\n   Figure 22: Example Script: Call Screening\n"
    title: '12.4.  Example: Call Screening'
  - contents:
    - "12.5.  Example: Priority and Language Routing\n   The script in Figure 23 illustrates
      service selection based on a\n   call's priority value and language settings.
      \ If the call request had\n   a priority of \"urgent\" or higher, the default
      script behavior is\n   performed.  Otherwise, the language field is checked
      for the language\n   \"es\" (Spanish).  If it is present, the call is proxied
      to a Spanish-\n   speaking operator; other calls are proxied to an English-speaking\n
      \  operator.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
      \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd \">\n     <incoming>\n       <priority-switch>\n         <priority greater=\"urgent\"/>\n
      \        <otherwise>\n           <language-switch>\n             <language matches=\"es\">\n
      \              <location url=\"sip:spanish@operator.example.com\">\n                 <proxy/>\n
      \              </location>\n             </language>\n             <otherwise>\n
      \              <location url=\"sip:english@operator.example.com\">\n                 <proxy/>\n
      \              </location>\n             </otherwise>\n           </language-switch>\n
      \        </otherwise>\n       </priority-switch>\n     </incoming>\n   </cpl>\n
      \  Figure 23: Example Script: Priority and Language Routing\n"
    title: '12.5.  Example: Priority and Language Routing'
  - contents:
    - "12.6.  Example: Outgoing Call Screening\n   The script in Figure 24 illustrates
      a script filtering outgoing\n   calls, in the form of a script which prevent
      1-900 (premium) calls\n   from being placed.  This script also illustrates subdomain
      matching.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
      \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd \">\n     <outgoing>\n       <address-switch field=\"original-destination\"
      subfield=\"tel\">\n         <address subdomain-of=\"1900\">\n           <reject
      status=\"reject\"\n               reason=\"Not allowed to make 1-900 calls.\"/>\n
      \        </address>\n       </address-switch>\n     </outgoing>\n   </cpl>\n
      \  Figure 24: Example Script: Outgoing Call Screening\n"
    title: '12.6.  Example: Outgoing Call Screening'
  - contents:
    - "12.7.  Example: Time-of-day Routing\n   Figure 25 illustrates time-based conditions
      and timezones.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
      \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd \">\n     <incoming>\n       <time-switch tzid=\"America/New_York\"\n
      \          tzurl=\"http://zones.example.com/tz/America/New_York\">\n         <time
      dtstart=\"20000703T090000\" duration=\"PT8H\" freq=\"weekly\"\n             byday=\"MO,TU,WE,TH,FR\">\n
      \          <lookup source=\"registration\">\n             <success>\n               <proxy/>\n
      \            </success>\n           </lookup>\n         </time>\n         <otherwise>\n
      \          <location url=\"sip:jones@voicemail.example.com\">\n             <proxy/>\n
      \          </location>\n         </otherwise>\n       </time-switch>\n     </incoming>\n
      \  </cpl>\n   Figure 25: Example Script: Time-of-day Routing\n"
    title: '12.7.  Example: Time-of-day Routing'
  - contents:
    - "12.8.  Example: Location Filtering\n   Figure 26 illustrates filtering operations
      on the location set.  In\n   this example, we assume that version 0.9beta2 of
      the \"Inadequate\n   Software SIP User Agent\" mis-implements some features,
      and so we must\n   work around its problems.  We know that it cannot talk successfully\n
      \  to one particular mobile device we may have registered, so we remove\n   that
      location from the location set.  Once this operation has been\n   completed,
      call setup is allowed to proceed normally.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <incoming>\n
      \      <string-switch field=\"user-agent\">\n         <string is=\"Inadequate
      Software SIP User Agent/0.9beta2\">\n           <lookup source=\"registration\">\n
      \            <success>\n               <remove-location location=\"sip:me@mobile.provider.net\">\n
      \                <proxy/>\n               </remove-location>\n             </success>\n
      \          </lookup>\n         </string>\n       </string-switch>\n     </incoming>\n
      \  </cpl>\n   Figure 26: Example Script: Location Filtering\n"
    title: '12.8.  Example: Location Filtering'
  - contents:
    - "12.9.  Example: Non-signalling Operations\n   Figure 27 illustrates non-signalling
      operations; in particular,\n   alerting a user by electronic mail if the lookup
      server failed.  The\n   primary motivation for having the \"mail\" node is to
      allow this sort\n   of out-of-band notification of error conditions, as the
      user might\n   otherwise be unaware of any problem.\n   <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <incoming>\n
      \      <lookup\n           source=\"http://www.example.com/cgi-bin/locate.cgi?user=mary\"\n
      \          timeout=\"8\">\n         <success>\n           <proxy/>\n         </success>\n
      \        <failure>\n           <mail url=\"mailto:mary@example.com?subject=Lookup%20failed\"/>\n
      \        </failure>\n       </lookup>\n     </incoming>\n   </cpl>\n   Figure
      27: Example Script: Non-signalling Operations\n"
    title: '12.9.  Example: Non-signalling Operations'
  - contents:
    - "12.10.  Example: Hypothetical Extensions\n   The example in Figure 28 shows
      a hypothetical extension that\n   implements distinctive ringing.  The XML namespace\n
      \  \"http://www.example.com/distinctive-ring\" specifies a new node named\n
      \  \"ring\".\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"http://www.example.com/distinctive-ring\"\n
      \    xmlns=\"http://www.example.com/distinctive-ring\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:CPL=\"urn:ietf:params:xml:ns:cpl\"\n
      \    elementFormDefault=\"qualified\"\n     attributeFormDefault=\"unqualified\">\n
      \    <xs:import namespace=\"urn:ietf:params:xml:ns:cpl\"\n         schemaLocation=\"cpl.xsd\"/>\n
      \    <xs:complexType name=\"DRingAction\">\n       <xs:complexContent>\n         <xs:extension
      base=\"CPL:ActionType\">\n           <xs:attribute name=\"ringstyle\" type=\"xs:string\"\n
      \              use=\"optional\"/>\n         </xs:extension>\n       </xs:complexContent>\n
      \    </xs:complexType>\n     <xs:element name=\"ring\" type=\"DRingAction\"\n
      \        substitutionGroup=\"CPL:action\"/>\n   </xs:schema>\n   <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n   <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:dr=\"http://www.example.com/distinctive-ring\"\n
      \    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl
      cpl.xsd\n         http://www.example.com/distinctive-ring distinctive-ring.xsd\">\n
      \    <incoming>\n       <address-switch field=\"origin\">\n         <address
      is=\"sip:boss@example.com\">\n           <dr:ring ringstyle=\"warble\"/>\n         </address>\n
      \      </address-switch>\n     </incoming>\n   </cpl>\n   Figure 28: Example
      Schema and Script: Hypothetical\n              Distinctive-Ringing Extension\n
      \  The example in Figure 29 implements a hypothetical new attribute for\n   address
      switches, to allow regular-expression matches.  It defines a\n   new attribute
      \"regex\" for the standard \"address\" node.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <incoming>\n
      \      <address-switch field=\"origin\" subfield=\"user\"\n           xmlns:re=\"http://www.example.com/regex\">\n
      \        <address re:regex=\"(.*.smith|.*.jones)\">\n           <reject status=\"reject\"\n
      \              reason=\"I don't want to talk to Smiths or Joneses\"/>\n         </address>\n
      \      </address-switch>\n     </incoming>\n   </cpl>\n   Figure 29: Example
      Script: Hypothetical Regular-Expression Extension\n"
    title: '12.10.  Example: Hypothetical Extensions'
  - contents:
    - "12.11.  Example: A Complex Example\n   Finally, Figure 30 is a complex example
      which shows the sort of\n   sophisticated behavior that can be achieved by combining
      CPL nodes.\n   In this case, the user attempts to have his calls reach his desk;
      if\n   he does not answer within a small amount of time, calls from his boss\n
      \  are forwarded to his mobile phone, and all other calls are directed\n   to
      voicemail.  If the call setup failed, no operation is specified,\n   so the
      server's default behavior is performed.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <cpl xmlns=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
      \    xsi:schemaLocation=\"urn:ietf:params:xml:ns:cpl cpl.xsd \">\n     <subaction
      id=\"voicemail\">\n       <location url=\"sip:jones@voicemail.example.com\">\n
      \        <redirect />\n       </location>\n     </subaction>\n     <incoming>\n
      \      <location url=\"sip:jones@phone.example.com\">\n         <proxy timeout=\"8\">\n
      \          <busy>\n             <sub ref=\"voicemail\" />\n           </busy>\n
      \          <noanswer>\n             <address-switch field=\"origin\">\n               <address
      is=\"sip:boss@example.com\">\n                 <location url=\"tel:+19175551212\">\n
      \                  <proxy />\n                 </location>\n               </address>\n
      \              <otherwise>\n                 <sub ref=\"voicemail\" />\n               </otherwise>\n
      \            </address-switch>\n           </noanswer>\n         </proxy>\n
      \      </location>\n     </incoming>\n   </cpl>\n   Figure 30: Example Script:
      A Complex Example\n"
    title: '12.11.  Example: A Complex Example'
  title: 12.  Examples
- contents:
  - "13.  Security Considerations\n   CPL is designed to allow services to be specified
    in a manner which\n   prevents potentially hostile or mis-configured scripts from
    launching\n   security attacks, including denial-of-service attacks.  Because\n
    \  script runtime is strictly bounded by acyclicity, and because the\n   number
    of possible script operations are strictly limited, scripts\n   should not be
    able to inflict damage upon a CPL server.\n   Because scripts can direct users'
    telephone calls, the method by\n   which scripts are transmitted from a client
    to a server MUST be\n   strongly authenticated.  Such a method is not specified
    in this\n   document.\n   Script servers SHOULD allow server administrators to
    control the\n   details of what CPL operations are permitted.\n"
  title: 13.  Security Considerations
- contents:
  - "14.  IANA Considerations\n   This document registers a new MIME type, application/cpl+xml,
    and a\n   new URN per RFC 2141 [12], RFC 2648 [13], and RFC 3688 [14].\n   The
    XML namespace urn:ietf:params:xml:ns:cpl will only refer to the\n   version of
    CPL in this document and will not change.  Any CPL\n   enhancements MUST be made
    by extensions and MUST have different\n   namespaces.\n"
  - contents:
    - "14.1.  URN Sub-Namespace Registration for urn:ietf:params:xml:ns:cpl\n     URI:
      urn:ietf:params:xml:ns:cpl\n     Registrant Contact: Jonathan Lennox <lennox@cs.columbia.edu>\n
      \         Xiaotao Wu <xiaotaow@cs.columbia.edu>\n          Henning Schulzrinne
      <hgs@cs.columbia.edu>\n     XML:\n           BEGIN\n           <?xml version=\"1.0\"?>\n
      \          <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n               \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n
      \          <html xmlns=\"http://www.w3.org/1999/xhtml\">\n           <head>\n
      \            <meta http-equiv=\"content-type\"\n                content=\"text/html;charset=iso-8859-1\"/>\n
      \            <title>Call Processing Language Namespace</title>\n           </head>\n
      \          <body>\n             <h1>Namespace for Call Processing Language</h1>\n
      \            <h2>urn:ietf:params:xml:ns:cpl</h2>\n             <p><a href=\"ftp://ftp.rfc-editor.org/in-notes/rfc3880.txt\">\n
      \                  RFC3880</a>.</p>\n           </body>\n           </html>\n
      \          END\n"
    title: 14.1.  URN Sub-Namespace Registration for urn:ietf:params:xml:ns:cpl
  - contents:
    - "14.2.  Schema registration\n   This specification registers XML Schema for
      CPL, as per the\n   guidelines in [14].\n      URI: urn:ietf:params:xml:schema:cpl\n
      \     Registrant contact:\n           Jonathan Lennox <lennox@cs.columbia.edu>\n
      \          Xiaotao Wu <xiaotaow@cs.columbia.edu>\n           Henning Schulzrinne
      <hgs@cs.columbia.edu>\n      XML: The XML can be found in Appendix C.\n"
    title: 14.2.  Schema registration
  - contents:
    - "14.3.  MIME Registration\n   As an XML type, CPL's MIME registration conforms
      with \"XML Media\n   Types,\" RFC 3023 [15].\n      MIME media type name: application\n
      \     MIME subtype name: cpl+xml\n      Mandatory parameters: none\n      Optional
      parameters: charset\n           As for application/xml in RFC 3023.\n      Encoding
      considerations: As for application/xml in RFC 3023.\n      Security considerations:
      See Section 13, and Section 10 of RFC\n           3023.\n      Interoperability
      considerations: Different CPL servers may use\n           incompatible address
      types.  However, all potential\n           interoperability issues should be
      resolvable at the time a\n           script is uploaded; there should be no
      interoperability\n           issues which cannot be detected until runtime.\n
      \     Published specification: This document.\n      Applications which use
      this media type: SIP proxy servers and\n           other telephony servers,
      and client software to control\n           their behavior.\n      Additional
      information:\n           Magic number: None\n           File extension: .cpl
      or .xml\n           Macintosh file type code: \"TEXT\"\n      Person and e-mail
      address for further information:\n           Jonathan Lennox <lennox@cs.columbia.edu>\n
      \          Xiaotao Wu <xiaotaow@cs.columbia.edu>\n           Henning Schulzrinne
      <hgs@cs.columbia.edu>\n      Intended usage: COMMON\n      Author/Change Controller:
      The IETF.\n"
    title: 14.3.  MIME Registration
  title: 14.  IANA Considerations
- contents:
  - "15.  Acknowledgments\n   This document was reviewed and commented upon by the
    IETF IP\n   Telephony Working Group.  We specifically acknowledge the following\n
    \  people for their help:\n   The outgoing call screening script was written by
    Kenny Hom.\n   Paul E. Jones contributed greatly to the mappings of H.323 addresses.\n
    \  The text of the time-switch section was taken (lightly modified) from\n   RFC
    2445 [8], by Frank Dawson and Derik Stenerson.\n   We drew a good deal of inspiration,
    notably the language's lack of\n   Turing-completeness and the syntax of string
    matching, from the\n   specification of Sieve [22], a language for user filtering
    of\n   electronic mail messages.\n   Thomas F. La Porta and Jonathan Rosenberg
    had many useful\n   discussions, contributions, and suggestions.\n   Richard Gumpertz
    performed a very useful last-minute technical and\n   editorial review of the
    specification.\n"
  - "A.  An Algorithm for Resolving Time Switches\n   The following algorithm determines
    whether a given instant falls\n   within a repetition of a \"time-switch\" recurrence.
    \ If the pre-\n   processing described in Section 4.4.1 has been done, it operates
    in\n   constant time.  Open-source Java code implementing this algorithm is\n
    \  available at http://www.cs.columbia.edu/~lennox/Cal-Code/ on the\n   world
    wide web.\n   This algorithm is believed to be correct, but this section is non-\n
    \  normative.  Section 4.4, and RFC 2445 [8], are the definitive\n   definitions
    of recurrences.\n      1. Compute the time of the call, in the timezone of the
    time\n         switch.\n      2. If the call time is earlier than \"dtstart\",
    fail NOMATCH.\n      3. If the call time is less than \"duration\" after dtstart,
    succeed\n         MATCH.\n      4. Determine the smallest unit specified in a
    \"byxxx\" rule or by\n         the \"freq.\"  Call this the Minimum Unit.  Determine
    the\n         previous instant (before or equal to the call time) when all\n         the
    time units smaller than the minimum unit are the same as\n         those of \"dtstart.\"
    \ If the minimum unit is a second, this time\n         is the same as the instant.
    \ If the minimum unit is a minute or\n         an hour, the minutes or the minutes
    and hours, respectively,\n         must be the same as \"dtstart\".  For all other
    minimum units,\n         the time-of-day must be the same as \"dtstart.\"  If
    the minimum\n         unit is a week, the day-of-the-week must be the same as\n
    \        \"dtstart.\"  If the minimum unit is a month, the day-of-the-\n         month
    must be the same as \"dtstart.\"  If the minimum unit is a\n         year, the
    month and day-of-month must both be the same as\n         \"dtstart.\"  (Note
    that this means it may be necessary to roll\n         back more than one minimum
    unit -- if the minimum unit is a\n         month, then some months do not have
    a 31st (or 30th or 29th)\n         day; if the minimum unit is a year, then some
    years do not have\n         a February 29th.  In the Gregorian calendar, it is
    never\n         necessary to roll back more than two months if the minimum unit\n
    \        is a month, or eight years if the minimum unit is a year.\n         Between
    1904 and 2096, it is never necessary to roll back more\n         than four years
    -- the eight-year rollback can only occur when\n         the Gregorian calendar
    \"skips\" a leap year.\n         Call this instant the Candidate Start Time.\n
    \     5. If the time between the candidate start time and the call time\n         is
    more than the duration, fail NOMATCH.\n      6. If the candidate start time is
    later than the \"until\" parameter\n         of the recurrence (or the virtual
    \"until\" computed off-line\n         from \"count\"), fail NOMATCH.\n      7.
    Call the unit of the \"freq\" parameter of the recurrence the\n         Frequency
    Unit.  Determine the frequency unit enclosing the\n         Candidate Start Time,
    and that enclosing \"dtstart\".  Calculate\n         the number of frequency units
    that have passed between these\n         two times.  If this is not a multiple
    of the \"interval\"\n         parameter, fail NOMATCH.\n      8. For every \"byxxx\"
    rule, confirm that the candidate start time\n         matches one of the options
    specified by that \"byxxx\" rule.  If\n         so, succeed MATCH.\n      9. Calculate
    a previous candidate start time.  Repeat until the\n         difference between
    the candidate start time and the call time\n         is more than the duration.
    \ If no candidate start time has been\n         validated, fail NOMATCH.\n"
  - "B.  Suggested Usage of CPL with H.323\n   This appendix gives a suggested usage
    of CPL with H.323 [16].   Study\n   Group 16 of the ITU, which developed H.323,
    is proposing to work on\n   official CPL mappings for that protocol.  This section
    is therefore\n   not normative.\n"
  - contents:
    - "B.1.  Usage of \"address-switch\" with H.323\n   Address switches are specified
      in Section 4.1.  This section\n   specifies the mapping between H.323 messages
      and the fields and\n   subfields of address-switches.\n   For H.323, the \"origin\"
      address corresponds to the alias addresses in\n   the \"sourceAddress\" field
      of the \"Setup-UUIE\" user-user information\n   element, and to the Q.931 [23]
      information element \"Calling party\n   number.\"  If both fields are present,
      or if multiple alias addresses\n   for \"sourceAddress\" are present, which
      one has priority is a matter\n   of local server policy; the server SHOULD use
      the same resolution as\n   it would use for routing decisions in this case.
      \ Similarly, the\n   \"destination\" address corresponds to the alias addresses
      of the\n   \"destinationAddress\" field, and to the Q.931 information element\n
      \  \"Called party number.\"\n   The \"original-destination\" address corresponds
      to the \"Redirecting\n   number\" Q.931 information element, if it is present;
      otherwise it is\n   the same as the \"destination\" address.\n   The mapping
      of H.323 addresses into subfields depends on the type of\n   the alias address.
      \ An additional subfield type, \"alias-type\", is\n   defined for H.323 servers,
      corresponding to the type of the address.\n   Possible values are \"dialedDigits\",
      \"h323-ID\", \"url-ID\",\n   \"transportID\", \"email-ID\", \"partyNumber\",
      \"mobileUIM\", and \"Q.931IE\".\n   If future versions of the H.323 specification
      define additional types\n   of alias addresses, those names MAY also be used.\n
      \  In versions of H.323 prior to version 4, \"dialedDigits\" was known as\n
      \  \"e164\".  The two names SHOULD be treated as synonyms.\n   The value of
      the \"address-type\" subfield for H.323 messages is \"h323\"\n   unless the
      alias type is \"url-ID\" and the URL scheme is something\n   other than h323;
      in this case the address-type is the URL scheme, as\n   specified in Section
      4.1.1 for SIP.\n   An H.323-aware CPL server SHOULD map the address subfields
      from the\n   primary alias used for routing.  It MAY also map subfields from
      other\n   aliases, if subfields in the primary address are not present.\n   The
      following mappings are used for H.323 alias types:\n      dialedDigits, partyNumber,
      mobileUIM, and Q.931IE: the \"tel\" and\n           \"user\" subfields are the
      string of digits, as is the\n           \"entire-address\" form.  The \"host\"
      and \"port\" subfields are\n           not present.\n      url-ID: the same
      mappings are used as for SIP, in Section 4.1.1.\n      h323-ID: the \"user\"
      field is the string of characters, as is the\n           \"entire-address\"
      form.  All other subfields are not present.\n      email-ID: the \"user\" and
      \"host\" subfields are set to the\n           corresponding parts of the e-mail
      address.  The \"port\" and\n           \"tel\" subfields are not present.  The
      \"entire-address\" form\n           corresponds to the entire e-mail address.\n
      \     transportID: if the TransportAddress is of type \"ipAddress,\"\n           \"ipSourceRoute,\"
      or \"ip6Address,\" the \"host\" subfield is set\n           to the \"ip\" element
      of the sequence, translated into the\n           standard IPv4 or IPv6 textual
      representation, and the \"port\"\n           subfield is set to the \"port\"
      element of the sequence\n           represented in decimal.  The \"tel\" and
      \"user\" fields are not\n           present.  The \"entire-address\" form is
      not defined.  The\n           representation and mapping of transport addresses
      is not\n           defined for non-IP addresses.\n   H.323 [16] defines an \"h323\"
      URI scheme.  This appendix defines a\n   mapping for these URIs onto the CPL
      \"address-switch\" subfields, as\n   given in Section 4.1.  This definition
      is also available as RFC 3508\n   [24], which is an excerpt from the H.323 specification.\n
      \  For h323 URIs, the \"user\", \"host\", and \"port\" subfields are set to\n
      \  the corresponding parts of the H.323 URL.  The \"tel\" subfield is not\n
      \  present.  The \"entire-address\" form corresponds to the entire URI.\n   This
      mapping MAY be used both for h323 URIs in an h323 \"url-ID\"\n   address alias,
      and for h323 URIs in SIP messages.\n"
    title: B.1.  Usage of "address-switch" with H.323
  - contents:
    - "B.2.  Usage of \"string-switch\" with H.323\n   For H.323, the \"string-switch\"
      node (see Section 4.2) is used as\n   follows.  The field \"display\" corresponds
      to the Q.931 information\n   element of the same name, copied verbatim.  The
      fields \"subject\",\n   \"organization\", and \"user-agent\" are not used and
      are never present.\n      The \"display\" IE is conventionally used for Caller-ID
      purposes, so\n      arguably it should be mapped to the \"display\" subfield
      of an\n      \"address-match\" with the field \"originator\".  However, since
      a) it\n      is a message-level information element, not an address-level one,\n
      \     and b) the Q.931 specification [23] says only that \"[t]he purpose\n      of
      the Display information element is to supply display\n      information that
      may be displayed by the user,\" it seems to be\n      more appropriate to allow
      it to be matched in a \"string-switch\"\n      instead.\n"
    title: B.2.  Usage of "string-switch" with H.323
  - contents:
    - "B.3.  Usage of \"language-switch\" with H.323\n   The language-ranges for the
      \"language-switch\" switch are obtained\n   from the H.323 UUIE \"language\".
      \ The switch is not-present if the\n   initial message did not contain this
      UUIE.\n"
    title: B.3.  Usage of "language-switch" with H.323
  - contents:
    - "B.4.  Usage of \"priority-switch\" with H.323\n   All H.323 messages are considered
      to have priority \"normal\" for the\n   purpose of a priority switch (see Section
      4.5).\n"
    title: B.4.  Usage of "priority-switch" with H.323
  - contents:
    - "B.5.  Usage of \"location\" with H.323\n   Locations in explicit location nodes
      (Section 5.1) are specified as\n   URLs.  Therefore, all locations added in
      this manner are interpreted\n   as being of alias type \"url-ID\" in H.323.\n
      \  Specifications of other H.323 address alias types will require a CPL\n   extension
      (see Section 11).\n"
    title: B.5.  Usage of "location" with H.323
  - contents:
    - "B.6.  Usage of \"lookup\" with H.323\n   For location lookup nodes (Section
      5.2), the \"registration\" lookup\n   source corresponds to the locations registered
      with the server using\n   \"RAS\" messages.\n"
    title: B.6.  Usage of "lookup" with H.323
  - contents:
    - "B.7.  Usage of \"remove-location\" with H.323\n   Location removal nodes (Section
      5.3) remove addresses with the alias\n   type \"url-ID\" using verbatim string
      matching on the URLs.  If a \"tel\"\n   URL is specified as the location, matching
      addresses (ignoring visual\n   separators) with the alias types \"dialedDigits\"
      (\"e164\"),\n   \"partyNumber\", \"mobileUIM\", or \"Q.931IE\" are also removed.
      \ No\n   mechanism is provided to remove other alias types.\n"
    title: B.7.  Usage of "remove-location" with H.323
  title: 15.  Acknowledgments
- contents:
  - "C.  The XML Schema for CPL\n   This section includes a full XML Schema describing
    the XML syntax of\n   CPL.   Every script submitted to a CPL server SHOULD comply
    with this\n   XML Schema.   When parsing scripts comply with the CPL DTD in earlier\n
    \  documents, the DOCTYPE lines in the scripts should be ignored.  Note\n   that
    compliance with this schema is not a sufficient condition for\n   correctness
    of a CPL script, as many of the conditions described in\n   this specification
    are not expressible in schema syntax.  Figure 31\n   shows the structure of the
    schema.  'incoming' and 'outgoing' are\n   defined as the substitutionGroup of
    the 'toplevelaction'.  All the\n   switches are defined as the substitutionGroup
    of the 'switch'\n   element.  All the actions are defined as the substitutionGroup
    of the\n   'action' element.\n         +---------+    +------+                    +--address\n
    \      +-+ancillary|    |switch|** +--------------+ | +-not-present\n       |
    +---------+    +---+--+ **|address-switch+-+-+-address\n       |                    |
    \   * +--------------+ +--otherwise\n       | +---------+ +----+ |    *                   +--language\n
    \      +-+subaction+-+Node| |    * +---------------+ | +-not-present\n       |
    +---------+ +----+ |    **|language-switch|-+-+-language\n       |                    |
    \   * +---------------+ +--otherwise\n       |                    |    *                   +--priority\n
    \      |                    |    * +---------------+ | +-not-present\n       |
    \                   |    **|priority-switch|-+-+-priority\n       |                    |
    \   * +---------------+ +--otherwise\n       |                    |    *                 +--string\n
    \  cpl-+                    |    * +-------------+ | +-not-present\n       |                    |
    \   **|string-switch|-+ +-string\n       |                    |    * +-------------+
    +--otherwise\n       |                    |    *               +--time\n       |
    +--------------+ +-+--+ * +-----------+ | +-not-present\n       +-+toplevelaction+-+Node|
    \ *|time-switch|-+-+-time\n         +-----*--------+ +-+--+   +-----------+ +--otherwise\n
    \             *             |              +--------+ +----+\n             *              |
    \           **|location+-|Node|\n             *              | +--------+ * +--------+
    +----+\n             * +--------+   |-+modifier|** +------+ +-success-Node\n             **|incoming|
    \  | +--------+ *-|lookup+-+-notfound-Node\n             * +--------+   |            *
    +------+ +-failure-Node\n             *              | +---+      * +---------------+
    +----+\n             * +--------+   +-+Sub+-sub  **|remove-location+-+Node|\n
    \             *|outgoing|   | +---+        +---------------+ +----+\n               +--------+
    \  |            +---+\n                            |          **|log+-Node\n                            |
    \         * +---+\n                            |          * +----+\n                            |
    +------+ **|mail+-Node\n                            +-+action|** +----+     +-busy-Node\n
    \       ----  contains        +------+ * +-----+    |\n                                       **|proxy+----+-noanswer-Node\n
    \       ****  substitutes              * +-----+    |\n                                       *
    +--------+ +-failure-Node\n                                       **|redirect|
    |\n                                       * +--------+ +-redirection-Node\n                                       *
    +------+   |\n                                        *|reject|   +-default-Node\n
    \                                        +------+\n   Figure 31: The structure
    of the XML schema for CPL\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
    \  <xs:schema targetNamespace=\"urn:ietf:params:xml:ns:cpl\"\n     xmlns=\"urn:ietf:params:xml:ns:cpl\"\n
    \    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     elementFormDefault=\"qualified\"\n
    \    attributeFormDefault=\"unqualified\">\n     <xs:complexType name=\"TopLevelActionType\"
    abstract=\"true\">\n       <xs:group ref=\"Node\"/>\n     </xs:complexType>\n
    \    <xs:element name=\"toplevelaction\" type=\"TopLevelActionType\"/>\n     <xs:complexType
    name=\"ActionType\" abstract=\"true\"/>\n     <xs:element name=\"action\" type=\"ActionType\"/>\n
    \    <xs:complexType name=\"SwitchType\" abstract=\"true\"/>\n     <xs:element
    name=\"switch\" type=\"SwitchType\"/>\n     <xs:complexType name=\"ModifierType\"
    abstract=\"true\"/>\n     <xs:element name=\"modifier\" type=\"ModifierType\"/>\n
    \    <xs:element name=\"location\" type=\"LocationType\"\n         substitutionGroup=\"modifier\"/>\n
    \    <xs:element name=\"lookup\" type=\"LookupType\"\n         substitutionGroup=\"modifier\"/>\n
    \    <xs:element name=\"remove-location\" type=\"RemoveLocationType\"\n         substitutionGroup=\"modifier\"/>\n
    \    <xs:element name=\"sub\" type=\"SubAction\"/>\n     <xs:group name=\"Node\">\n
    \      <xs:choice>\n         <xs:element ref=\"switch\" minOccurs=\"0\" maxOccurs=\"1\"/>\n
    \        <xs:element ref=\"modifier\" minOccurs=\"0\" maxOccurs=\"1\"/>\n         <xs:element
    ref=\"sub\" minOccurs=\"0\" maxOccurs=\"1\"/>\n         <xs:element ref=\"action\"
    minOccurs=\"0\" maxOccurs=\"1\"/>\n       </xs:choice>\n     </xs:group>\n     <xs:complexType
    name=\"OtherwiseAction\">\n       <xs:group ref=\"Node\"/>\n     </xs:complexType>\n
    \    <xs:complexType name=\"NotPresentAction\">\n       <xs:group ref=\"Node\"/>\n
    \    </xs:complexType>\n     <xs:simpleType name=\"YesNoType\">\n       <xs:restriction
    base=\"xs:NMTOKEN\">\n         <xs:enumeration value=\"yes\"/>\n         <xs:enumeration
    value=\"no\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType
    name=\"StatusType\">\n       <xs:union>\n         <xs:simpleType>\n           <xs:restriction
    base=\"xs:NMTOKEN\">\n             <xs:enumeration value=\"busy\"/>\n             <xs:enumeration
    value=\"notfound\"/>\n             <xs:enumeration value=\"reject\"/>\n             <xs:enumeration
    value=\"error\"/>\n           </xs:restriction>\n         </xs:simpleType>\n         <xs:simpleType>\n
    \          <xs:restriction base=\"xs:string\"/>\n         </xs:simpleType>\n       </xs:union>\n
    \    </xs:simpleType>\n     <xs:simpleType name=\"OrderingType\">\n       <xs:restriction
    base=\"xs:NMTOKEN\">\n         <xs:enumeration value=\"parallel\"/>\n         <xs:enumeration
    value=\"sequential\"/>\n         <xs:enumeration value=\"first-only\"/>\n       </xs:restriction>\n
    \    </xs:simpleType>\n     <xs:simpleType name=\"AddressFieldType\">\n       <xs:union>\n
    \        <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n             <xs:enumeration
    value=\"origin\"/>\n             <xs:enumeration value=\"destination\"/>\n             <xs:enumeration
    value=\"original-destination\"/>\n           </xs:restriction>\n         </xs:simpleType>\n
    \        <xs:simpleType>\n           <xs:restriction base=\"xs:string\"/>\n         </xs:simpleType>\n
    \      </xs:union>\n     </xs:simpleType>\n     <xs:simpleType name=\"AddressSubfieldType\">\n
    \      <xs:union>\n         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n
    \            <xs:enumeration value=\"address-type\"/>\n             <xs:enumeration
    value=\"user\"/>\n             <xs:enumeration value=\"host\"/>\n             <xs:enumeration
    value=\"port\"/>\n             <xs:enumeration value=\"tel\"/>\n             <xs:enumeration
    value=\"display\"/>\n             <xs:enumeration value=\"password\"/>\n             <xs:enumeration
    value=\"alias-type\"/>\n           </xs:restriction>\n         </xs:simpleType>\n
    \        <xs:simpleType>\n           <xs:restriction base=\"xs:string\"/>\n         </xs:simpleType>\n
    \      </xs:union>\n     </xs:simpleType>\n     <xs:complexType name=\"AddressType\">\n
    \      <xs:annotation>\n         <xs:documentation>Exactly one of the three attributes
    must\n             appear</xs:documentation>\n       </xs:annotation>\n       <xs:group
    ref=\"Node\"/>\n       <xs:attribute name=\"is\" type=\"xs:string\" use=\"optional\"/>\n
    \      <xs:attribute name=\"contains\" type=\"xs:string\" use=\"optional\">\n
    \        <xs:annotation>\n           <xs:documentation>for \"display\" only</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"subdomain-of\"
    type=\"xs:string\"\n           use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>for
    \"host\", \"tel\" only</xs:documentation>\n         </xs:annotation>\n       </xs:attribute>\n
    \      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n     </xs:complexType>\n
    \    <xs:complexType name=\"AddressSwitchType\">\n       <xs:complexContent>\n
    \        <xs:extension base=\"SwitchType\">\n           <xs:sequence>\n             <xs:element
    name=\"address\" type=\"AddressType\" minOccurs=\"0\"\n                 maxOccurs=\"unbounded\"/>\n
    \            <xs:sequence minOccurs=\"0\">\n               <xs:element name=\"not-present\"
    type=\"NotPresentAction\"/>\n               <xs:element name=\"address\" type=\"AddressType\"\n
    \                  minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n             </xs:sequence>\n
    \            <xs:element name=\"otherwise\" type=\"OtherwiseAction\"\n                 minOccurs=\"0\"/>\n
    \          </xs:sequence>\n           <xs:attribute name=\"field\" type=\"AddressFieldType\"\n
    \              use=\"required\"/>\n           <xs:attribute name=\"subfield\"
    type=\"AddressSubfieldType\"\n               use=\"optional\"/>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"address-switch\"
    type=\"AddressSwitchType\"\n         substitutionGroup=\"switch\"/>\n     <xs:simpleType
    name=\"StringFieldType\">\n       <xs:restriction base=\"xs:NMTOKEN\">\n         <xs:enumeration
    value=\"subject\"/>\n         <xs:enumeration value=\"organization\"/>\n         <xs:enumeration
    value=\"user-agent\"/>\n         <xs:enumeration value=\"display\"/>\n       </xs:restriction>\n
    \    </xs:simpleType>\n     <xs:complexType name=\"StringType\">\n       <xs:group
    ref=\"Node\"/>\n       <xs:attribute name=\"is\" type=\"xs:string\" use=\"optional\"/>\n
    \      <xs:attribute name=\"contains\" type=\"xs:string\" use=\"optional\"/>\n
    \      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n     </xs:complexType>\n
    \    <xs:complexType name=\"StringSwitchType\">\n       <xs:complexContent>\n
    \        <xs:extension base=\"SwitchType\">\n           <xs:sequence>\n             <xs:element
    name=\"string\" type=\"StringType\" minOccurs=\"0\"\n                 maxOccurs=\"unbounded\"/>\n
    \            <xs:sequence minOccurs=\"0\">\n               <xs:element name=\"not-present\"
    type=\"NotPresentAction\"/>\n               <xs:element name=\"string\" type=\"StringType\"
    minOccurs=\"0\"\n                   maxOccurs=\"unbounded\"/>\n             </xs:sequence>\n
    \            <xs:element name=\"otherwise\" type=\"OtherwiseAction\"\n                 minOccurs=\"0\"/>\n
    \          </xs:sequence>\n           <xs:attribute name=\"field\" type=\"StringFieldType\"\n
    \              use=\"required\">\n             <xs:annotation>\n               <xs:documentation>Strings
    are matched as case-insensitive\n                   Unicode strings.</xs:documentation>\n
    \            </xs:annotation>\n           </xs:attribute>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"string-switch\"
    type=\"StringSwitchType\"\n         substitutionGroup=\"switch\"/>\n     <xs:complexType
    name=\"LanguageType\">\n       <xs:group ref=\"Node\"/>\n       <xs:attribute
    name=\"matches\" type=\"xs:string\" use=\"required\">\n         <xs:annotation>\n
    \          <xs:documentation>The value of one of these parameters is a\n               language-tag,
    as defined in RFC\n               3066.</xs:documentation>\n         </xs:annotation>\n
    \      </xs:attribute>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n
    \    </xs:complexType>\n     <xs:complexType name=\"LanguageSwitchType\">\n       <xs:complexContent>\n
    \        <xs:extension base=\"SwitchType\">\n           <xs:sequence>\n             <xs:element
    name=\"language\" type=\"LanguageType\"\n                 minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n
    \            <xs:sequence minOccurs=\"0\">\n               <xs:element name=\"not-present\"
    type=\"NotPresentAction\"/>\n               <xs:element name=\"language\" type=\"LanguageType\"\n
    \                  minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n             </xs:sequence>\n
    \            <xs:element name=\"otherwise\" type=\"OtherwiseAction\"\n                 minOccurs=\"0\"/>\n
    \          </xs:sequence>\n         </xs:extension>\n       </xs:complexContent>\n
    \    </xs:complexType>\n     <xs:element name=\"language-switch\" type=\"LanguageSwitchType\"\n
    \        substitutionGroup=\"switch\"/>\n     <xs:simpleType name=\"FreqType\">\n
    \      <xs:restriction base=\"xs:NMTOKEN\">\n         <xs:pattern value=\"[s|S][e|E][c|C][o|O][n|N][d|D][l|L][y|Y]\"/>\n
    \        <xs:pattern value=\"[m|M][i|I][n|N][u|U][t|T][e|E][l|L][y|Y]\"/>\n         <xs:pattern
    value=\"[h|H][o|O][u|U][r|R][l|L][y|Y]\"/>\n         <xs:pattern value=\"[d|D][a|A][i|I][l|L][y|Y]\"/>\n
    \        <xs:pattern value=\"[w|W][e|E][e|E][k|K][l|L][y|Y]\"/>\n         <xs:pattern
    value=\"[m|M][o|N][n|N][t|T][h|H][l|L][y|Y]\"/>\n         <xs:pattern value=\"[y|Y][e|E][a|A][r|R][l|L][y|Y]\"/>\n
    \      </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType name=\"YearDayType\">\n
    \      <xs:union>\n         <xs:simpleType>\n           <xs:restriction base=\"xs:integer\">\n
    \            <xs:minInclusive value=\"-366\"/>\n             <xs:maxInclusive
    value=\"-1\"/>\n           </xs:restriction>\n         </xs:simpleType>\n         <xs:simpleType>\n
    \          <xs:restriction base=\"xs:integer\">\n             <xs:minInclusive
    value=\"1\"/>\n             <xs:maxExclusive value=\"366\"/>\n           </xs:restriction>\n
    \        </xs:simpleType>\n       </xs:union>\n     </xs:simpleType>\n     <xs:simpleType
    name=\"DayType\">\n       <xs:restriction base=\"xs:NMTOKEN\">\n         <xs:pattern
    value=\"[m|M][o|O]\"/>\n         <xs:pattern value=\"[t|T][u|U]\"/>\n         <xs:pattern
    value=\"[w|W][e|E]\"/>\n         <xs:pattern value=\"[t|T][h|H]\"/>\n         <xs:pattern
    value=\"[f|F][r|R]\"/>\n         <xs:pattern value=\"[s|S][a|A]\"/>\n         <xs:pattern
    value=\"[s|S][u|U]\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:complexType
    name=\"TimeType\">\n       <xs:annotation>\n         <xs:documentation>Exactly
    one of the two attributes \"dtend\" and\n             \"duration\" must occur.
    \ None of the attributes following\n             freq are meaningful unless freq
    appears.\n             </xs:documentation>\n       </xs:annotation>\n       <xs:group
    ref=\"Node\"/>\n       <xs:attribute name=\"dtstart\" type=\"xs:string\" use=\"required\">\n
    \        <xs:annotation>\n           <xs:documentation>RFC 2445 DATE-TIME</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"dtend\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>RFC
    2445 DATE-TIME</xs:documentation>\n         </xs:annotation>\n       </xs:attribute>\n
    \      <xs:attribute name=\"duration\" type=\"xs:string\" use=\"optional\">\n
    \        <xs:annotation>\n           <xs:documentation>RFC 2445 DURATION</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"freq\"
    type=\"FreqType\" use=\"optional\"/>\n       <xs:attribute name=\"interval\" type=\"xs:positiveInteger\"\n
    \          default=\"1\"/>\n       <xs:attribute name=\"until\" type=\"xs:string\"
    use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>RFC
    2445 DATE-TIME</xs:documentation>\n         </xs:annotation>\n       </xs:attribute>\n
    \      <xs:attribute name=\"count\" type=\"xs:positiveInteger\"\n           use=\"optional\"/>\n
    \      <xs:attribute name=\"bysecond\" type=\"xs:string\" use=\"optional\">\n
    \        <xs:annotation>\n           <xs:documentation>Comma-separated list of
    seconds within a\n               minute.  Valid values are 0 to 59.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"byminute\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of minutes within an\n               hour.  Valid values are 0 to 59.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"byhour\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of hours of the day.\n               Valid values are 0 to 23.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"byday\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of days of the week.\n               Valid values are \"MO\", \"TU\", \"WE\",
    \"TH\", \"FR\", \"SA\" and\n               \"SU\".  These values are not case-sensitive.
    \ Each can be\n               preceded by a positive (+n) or negative (-n)\n               integer.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"bymonthday\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of days of the month.\n               Valid values are 1 to 31 or -31 to\n
    \              -1.</xs:documentation>\n         </xs:annotation>\n       </xs:attribute>\n
    \      <xs:attribute name=\"byyearday\" type=\"xs:string\" use=\"optional\">\n
    \        <xs:annotation>\n           <xs:documentation>Comma-separated list of
    days of the year.\n               Valid values are 1 to 366 or -366 to\n               -1.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"byweekno\"
    type=\"xs:string\" use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of ordinals specifying\n               weeks of the year.  Valid values are
    1 to 53 or -53 to\n               -1.</xs:documentation>\n         </xs:annotation>\n
    \      </xs:attribute>\n       <xs:attribute name=\"bymonth\" type=\"xs:string\"
    use=\"optional\">\n         <xs:annotation>\n           <xs:documentation>Comma-separated
    list of months of the year.\n               Valid values are 1 to 12.</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:attribute name=\"wkst\"
    type=\"DayType\" default=\"MO\"/>\n       <xs:attribute name=\"bysetpos\" type=\"YearDayType\"/>\n
    \      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n     </xs:complexType>\n
    \    <xs:simpleType name=\"TZIDType\">\n       <xs:restriction base=\"xs:string\"/>\n
    \    </xs:simpleType>\n     <xs:simpleType name=\"TZURLType\">\n       <xs:restriction
    base=\"xs:anyURI\"/>\n     </xs:simpleType>\n     <xs:complexType name=\"TimeSwitchType\">\n
    \      <xs:complexContent>\n         <xs:extension base=\"SwitchType\">\n           <xs:sequence>\n
    \            <xs:element name=\"time\" type=\"TimeType\" minOccurs=\"0\"\n                 maxOccurs=\"unbounded\"/>\n
    \            <xs:sequence minOccurs=\"0\">\n               <xs:element name=\"not-present\"
    type=\"NotPresentAction\"/>\n               <xs:element name=\"time\" type=\"TimeType\"
    minOccurs=\"0\"\n                   maxOccurs=\"unbounded\"/>\n             </xs:sequence>\n
    \            <xs:element name=\"otherwise\" type=\"OtherwiseAction\"\n                 minOccurs=\"0\"/>\n
    \          </xs:sequence>\n           <xs:attribute name=\"tzid\" type=\"TZIDType\"/>\n
    \          <xs:attribute name=\"tzurl\" type=\"TZURLType\"/>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"time-switch\"
    type=\"TimeSwitchType\"\n         substitutionGroup=\"switch\"/>\n     <xs:simpleType
    name=\"PriorityValues\">\n       <xs:restriction base=\"xs:NMTOKEN\">\n         <xs:pattern\n
    \            value=\"[e|E][m|M][e|E][r|R][g|G][e|E][n|N][c|C][y|Y]\"/>\n         <xs:pattern
    value=\"[u|U][r|R][g|G][e|E][n|N][t|T]\"/>\n         <xs:pattern value=\"[n|N][o|O][r|R][m|M][a|A][l|L]\"/>\n
    \        <xs:pattern\n             value=\"[n|N][o|O][n|N]-[u|U][r|R][g|G][e|E][n|N][t|T]\"/>\n
    \      </xs:restriction>\n     </xs:simpleType>\n     <xs:complexType name=\"PriorityType\">\n
    \      <xs:annotation>\n         <xs:documentation>Exactly one of the three attributes
    must\n             appear </xs:documentation>\n       </xs:annotation>\n       <xs:group
    ref=\"Node\"/>\n       <xs:attribute name=\"less\" type=\"PriorityValues\"/>\n
    \      <xs:attribute name=\"greater\" type=\"PriorityValues\"/>\n       <xs:attribute
    name=\"equal\" type=\"xs:string\">\n         <xs:annotation>\n           <xs:documentation>case-insensitive</xs:documentation>\n
    \        </xs:annotation>\n       </xs:attribute>\n       <xs:anyAttribute namespace=\"##any\"
    processContents=\"lax\"/>\n     </xs:complexType>\n     <xs:complexType name=\"PrioritySwitchType\">\n
    \      <xs:complexContent>\n         <xs:extension base=\"SwitchType\">\n           <xs:sequence>\n
    \            <xs:element name=\"priority\" type=\"PriorityType\"\n                 minOccurs=\"0\"
    maxOccurs=\"unbounded\"/>\n             <xs:sequence minOccurs=\"0\">\n               <xs:element
    name=\"not-present\" type=\"NotPresentAction\"/>\n               <xs:element name=\"priority\"
    type=\"PriorityType\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n
    \            </xs:sequence>\n             <xs:element name=\"otherwise\" type=\"OtherwiseAction\"\n
    \                minOccurs=\"0\"/>\n           </xs:sequence>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"priority-switch\"
    type=\"PrioritySwitchType\"\n         substitutionGroup=\"switch\"/>\n     <xs:simpleType
    name=\"LocationPriorityType\">\n       <xs:restriction base=\"xs:float\">\n         <xs:minInclusive
    value=\"0.0\"/>\n         <xs:maxInclusive value=\"1.0\"/>\n       </xs:restriction>\n
    \    </xs:simpleType>\n     <xs:complexType name=\"LocationType\">\n       <xs:complexContent>\n
    \        <xs:extension base=\"ModifierType\">\n           <xs:group ref=\"Node\"/>\n
    \          <xs:attribute name=\"url\" type=\"xs:anyURI\" use=\"required\"/>\n
    \          <xs:attribute name=\"priority\" type=\"LocationPriorityType\"\n               use=\"optional\"
    default=\"1.0\"/>\n           <xs:attribute name=\"clear\" type=\"YesNoType\"
    default=\"no\"/>\n         </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n
    \    <xs:complexType name=\"LookupType\">\n       <xs:complexContent>\n         <xs:extension
    base=\"ModifierType\">\n           <xs:all>\n             <xs:element name=\"success\"
    minOccurs=\"0\">\n               <xs:complexType>\n                 <xs:group
    ref=\"Node\"/>\n               </xs:complexType>\n             </xs:element>\n
    \            <xs:element name=\"notfound\" minOccurs=\"0\">\n               <xs:complexType>\n
    \                <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n             <xs:element name=\"failure\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n           </xs:all>\n           <xs:attribute name=\"source\"
    type=\"xs:string\"\n               use=\"required\"/>\n           <xs:attribute
    name=\"timeout\" type=\"xs:positiveInteger\"\n               default=\"30\"/>\n
    \          <xs:attribute name=\"clear\" type=\"YesNoType\" default=\"no\"/>\n
    \        </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n
    \    <xs:complexType name=\"RemoveLocationType\">\n       <xs:complexContent>\n
    \        <xs:extension base=\"ModifierType\">\n           <xs:group ref=\"Node\"/>\n
    \          <xs:attribute name=\"location\" type=\"xs:string\"\n               use=\"optional\"/>\n
    \        </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n
    \    <xs:complexType name=\"LogAction\">\n       <xs:complexContent>\n         <xs:extension
    base=\"ActionType\">\n           <xs:group ref=\"Node\"/>\n           <xs:attribute
    name=\"name\" type=\"xs:string\" use=\"optional\"/>\n           <xs:attribute
    name=\"comment\" type=\"xs:string\"\n               use=\"optional\"/>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"log\"
    type=\"LogAction\"\n         substitutionGroup=\"action\"/>\n     <xs:complexType
    name=\"IncomingType\">\n       <xs:complexContent>\n         <xs:extension base=\"TopLevelActionType\"/>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"incoming\"
    type=\"IncomingType\"\n         substitutionGroup=\"toplevelaction\"/>\n     <xs:complexType
    name=\"OutgoingType\">\n       <xs:complexContent>\n         <xs:extension base=\"TopLevelActionType\"/>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"outgoing\"
    type=\"OutgoingType\"\n         substitutionGroup=\"toplevelaction\"/>\n     <xs:complexType
    name=\"ProxyAction\">\n       <xs:complexContent>\n         <xs:extension base=\"ActionType\">\n
    \          <xs:all>\n             <xs:element name=\"busy\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n             <xs:element name=\"noanswer\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n             <xs:element name=\"failure\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n             <xs:element name=\"redirection\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n             <xs:element name=\"default\" minOccurs=\"0\">\n
    \              <xs:complexType>\n                 <xs:group ref=\"Node\"/>\n               </xs:complexType>\n
    \            </xs:element>\n           </xs:all>\n           <xs:attribute name=\"timeout\"
    type=\"xs:positiveInteger\"\n               use=\"optional\" default=\"20\"/>\n
    \          <xs:attribute name=\"recurse\" type=\"YesNoType\"\n               use=\"optional\"
    default=\"yes\"/>\n           <xs:attribute name=\"ordering\" type=\"OrderingType\"\n
    \              use=\"optional\" default=\"parallel\"/>\n         </xs:extension>\n
    \      </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"proxy\"
    type=\"ProxyAction\"\n         substitutionGroup=\"action\"/>\n     <xs:complexType
    name=\"RedirectAction\">\n       <xs:complexContent>\n         <xs:extension base=\"ActionType\">\n
    \          <xs:attribute name=\"permanent\" type=\"YesNoType\"\n               default=\"no\"/>\n
    \        </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n
    \    <xs:element name=\"redirect\" type=\"RedirectAction\"\n         substitutionGroup=\"action\"/>\n
    \    <xs:complexType name=\"RejectAction\">\n       <xs:complexContent>\n         <xs:extension
    base=\"ActionType\">\n           <xs:attribute name=\"status\" type=\"StatusType\"\n
    \              use=\"required\"/>\n           <xs:attribute name=\"reason\" type=\"xs:string\"\n
    \              use=\"optional\"/>\n         </xs:extension>\n       </xs:complexContent>\n
    \    </xs:complexType>\n     <xs:element name=\"reject\" type=\"RejectAction\"\n
    \        substitutionGroup=\"action\"/>\n     <xs:complexType name=\"MailAction\">\n
    \      <xs:complexContent>\n         <xs:extension base=\"ActionType\">\n           <xs:group
    ref=\"Node\"/>\n           <xs:attribute name=\"url\" type=\"xs:anyURI\" use=\"required\"/>\n
    \        </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n
    \    <xs:element name=\"mail\" type=\"MailAction\"\n         substitutionGroup=\"action\"/>\n
    \    <xs:complexType name=\"SubAction\">\n       <xs:attribute name=\"ref\" type=\"xs:string\"
    use=\"required\"/>\n     </xs:complexType>\n     <xs:complexType name=\"AncillaryType\"/>\n
    \    <xs:complexType name=\"SubactionType\">\n       <xs:group ref=\"Node\"/>\n
    \      <xs:attribute name=\"id\" use=\"required\"/>\n     </xs:complexType>\n
    \    <xs:complexType name=\"CPLType\">\n       <xs:sequence>\n         <xs:element
    name=\"ancillary\" type=\"AncillaryType\" minOccurs=\"0\"\n             maxOccurs=\"1\"/>\n
    \        <xs:element name=\"subaction\" type=\"SubactionType\" minOccurs=\"0\"\n
    \            maxOccurs=\"unbounded\"/>\n         <xs:element ref=\"toplevelaction\"
    minOccurs=\"0\"\n             maxOccurs=\"unbounded\">\n           <xs:annotation>\n
    \            <xs:documentation>Any toplevel action MUST NOT appear more\n                 than
    once.</xs:documentation>\n           </xs:annotation>\n         </xs:element>\n
    \      </xs:sequence>\n     </xs:complexType>\n     <xs:element name=\"cpl\" type=\"CPLType\"/>\n
    \  </xs:schema>\n   END\n"
  title: C.  The XML Schema for CPL
- contents:
  - "Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,
    Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,
    \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]  Bray,
    T., Paoli, J., Sperberg-McQueen, C. M., Maler, E., and F.\n        Yergeau, \"Extensible
    Markup Language (XML) 1.0 (Third Edition)\",\n        W3C Recommendation REC-xml-20040204,
    World Wide Web Consortium\n        (W3C), February 2004.  Available at http://www.w3.org/XML/.\n
    \  [3]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
    BCP 14, RFC 2119, March 1997.\n   [4]  Hinden, R. and S. Deering, \"Internet Protocol
    Version 6 (IPv6)\n        Addressing Architecture\", RFC 3513, April 2003.\n   [5]
    \ Davis, M. F. and M. Duerst, \"Unicode Normalization Forms\",\n        Unicode
    Standard Annex #15, Unicode Consortium, April 2003.\n        Revision 23; part
    of Unicode 4.0.0. Available at\n        http://www.unicode.org/unicode/reports/tr15/.\n
    \  [6]  Davis, M. F., \"Case Mappings\", Unicode Standard Annex #21,\n        Unicode
    Consortium, March 2001.  Revision 5; part of Unicode\n        3.2.0.  Available
    at\n        http://www.unicode.org/unicode/reports/tr21/.\n   [7]  Alvestrand,
    H., \"Tags for the Identification of Languages\", BCP\n        47, RFC 3066, January
    2001.\n   [8]  Dawson, F. and D. Stenerson, \"Internet Calendaring and\n        Scheduling
    Core Object Specification (iCalendar)\", RFC 2445,\n        November 1998.\n   [9]
    \ Eggert, P., \"Sources for Time Zone and Daylight Saving Time\n        Data\".
    \ Available at http://www.twinsun.com/tz/tz-link.htm.\n   [10] Mealling, M. and
    R. Daniel, \"URI Resolution Services Necessary\n        for URN Resolution\",
    RFC 2483, January 1999.\n   [11] Bray, T., Hollander, D., and A. Layman, \"Namespaces
    in XML\", W3C\n        Recommendation REC-xml-names-19990114, World Wide Web Consortium\n
    \       (W3C), January 1999.  Available at http://www.w3.org/TR/REC-\n        xml-names/.\n
    \  [12] Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [13] Moats, R., \"A
    URN Namespace for IETF Documents\", RFC 2648,\n        August 1999.\n   [14] Mealling,
    M., \"The IETF XML Registry\", BCP 81, RFC 3688, January\n        2004.\n   [15]
    Murata, M., St.Laurent, S., and D. Kohn, \"XML Media Types\", RFC\n        3023,
    January 2001.\n"
  title: Normative References
- contents:
  - "Informative References\n   [16] International Telecommunication Union, \"Packet-based
    multimedia\n        communication systems\", Recommendation H.323, Telecommunication\n
    \       Standardization Sector of ITU, Geneva, Switzerland, July 2003.\n   [17]
    Lennox, J. and H. Schulzrinne, \"Call Processing Language\n        Framework and
    Requirements\", RFC 2824, May 2000.\n   [18] Raggett, D., Le Hors, A., and I.
    Jacobs, \"HTML 4.01\n        Specification\", W3C Recommendation REC-html401-19991224,
    World\n        Wide Web Consortium (W3C), December 1999.  Available at\n        http://www.w3.org/TR/html4/.\n
    \  [19] ISO (International Organization for Standardization),\n        \"Information
    processing -- Text and office systems -- Standard\n        Generalized Markup
    Language (SGML)\", ISO Standard ISO\n        8879:1986(E), International Organization
    for Standardization,\n        Geneva, Switzerland, October 1986.\n   [20] ISO
    (International Organization for Standardization), \"Data\n        elements and
    interchange formats -- Information interchange --\n        Representation of dates
    and times\", ISO Standard ISO\n        8601:2000(E), International Organization
    for Standardization,\n        Geneva, Switzerland, December 2000.\n   [21] DeRose,
    S., Maler, E., Orchard, D., and B. Trafford, \"XML\n        Linking Language (XLink)
    Version 1.0\", W3C Recommendation REC-\n        xlink-20010627, World Wide Web
    Consortium (W3C), June 2001.\n        Available at http://www.w3.org/TR/xlink/.\n
    \  [22] Showalter, T., \"Sieve: A Mail Filtering Language\", RFC 3028,\n        January
    2001.\n   [23] International Telecommunication Union, \"Digital Subscriber\n        Signalling
    System No. 1 (DSS 1) - ISDN user-network interface\n        layer 3 specification
    for basic call control\", Recommendation\n        Q.931, International Telecommunication
    Union, Geneva,\n        Switzerland, March 1993.\n   [24] Levin, O., \"H.323 Uniform
    Resource Locator (URL) Scheme\n        Registration\", RFC 3508, April 2003.\n"
  title: Informative References
- contents:
  - "Authors' Addresses\n   Jonathan Lennox\n   Dept. of Computer Science\n   Columbia
    University\n   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027\n   USA\n
    \  EMail: lennox@cs.columbia.edu\n   Xiaotao Wu\n   Dept. of Computer Science\n
    \  Columbia University\n   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027\n
    \  USA\n   EMail: xiaotaow@cs.columbia.edu\n   Henning Schulzrinne\n   Dept. of
    Computer Science\n   Columbia University\n   1214 Amsterdam Avenue, MC 0401\n
    \  New York, NY 10027\n   USA\n   EMail: schulzrinne@cs.columbia.edu\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
