- title: __initial_text__
  contents:
  - '                    PROPOSED HOST-FRONT END PROTOCOL

    '
- title: Status Of This Memo
  contents:
  - "Status Of This Memo\n   The reader should be aware of several things in regard\
    \ to what the\n   present document is up to.  First and foremost, IT IS A PROPOSAL\
    \ FOR\n   A STANDARD, NOT A STANDARD ITSELF.  Next, it assumes that the\n   separate\
    \ document, RFC 928, which is an introduction to the present\n   document, has\
    \ been read before it is. Next, it should be understood\n   that \"final cut\"\
    \ over this version of the document has been exercised\n   by the author of RFC\
    \ 928, not by the primary author of the present\n   document, so any readers bothered\
    \ by style considerations should feel\n   free to blame the former, who's used\
    \ to it, rather than the latter,\n   who may well be guiltless.  (Editing at a\
    \ distance finally become too\n   hard to manage, so if I'm typing it myself I'm\
    \ going to fiddle with\n   it myself too, including, but not limited to, sticking\
    \ my own section\n   on the Conceptual Model in before Joel's words start, rather\
    \ than\n   leaving it in the Introduction.  MAP)\n   Finally, it should be noted\
    \ that this is not a finished document.\n   That is, the intent is eventually\
    \ to supply appendices for all of the\n   protocol offloadings, describing their\
    \ uses of protocol idiosyncratic\n   parameters and even their interpretations\
    \ of the standard per-command\n   parameters, but in order to get what we've got\
    \ into circulation we\n   haven't waited until all such appendices have been written\
    \ up.  (We\n   do have notes on how to handle FTP, e.g., and UDP will be pretty\n\
    \   straightforward, but getting them ready would have delayed things\n   into\
    \ still another calendar year, which would have been very annoying\n   ... not\
    \ to say embarrassing.) For that matter, it's not even a\n   finished document\
    \ with respect to what is here. Not only is it our\n   stated intention to revise\
    \ the protocol based upon implementation\n   experience gained from volunteer\
    \ test implementations, but it's also\n   the case that it hasn't proven feasible\
    \ to iron out all known\n   wrinkles in what is being presented.  For example,\
    \ the response codes\n   almost certainly need clarification and expansion, and\
    \ at least one\n   of us doesn't think mandatory initial parameters need control\
    \ flags.\n   However, to try too hard for polish would be to stay in subcommittee\n\
    \   for the better part of forever, so what you see is what we've got,\n   but\
    \ certainly isn't meant to be what you or we are stuck with.\n   This RFC suggests\
    \ a proposed protocol for the ARPA-Internet\n   community, and requests discussion\
    \ and suggestions for improvements.\n   Distribution of this memo is unlimited.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - 'Proposed Host-Front End Protocol

    '
- title: Conceptual Model
  contents:
  - "Conceptual Model\n   There are two fundamental motivations for doing outboard\
    \ processing.\n   One is to conserve the Hosts' resources (CPU cycles and memory)\
    \ in a\n   resource sharing intercomputer network, by offloading as much of the\n\
    \   required networking software from the Hosts to Outboard Processing\n   Environments\
    \ (or \"Network Front-Ends\") as possible. The other is to\n   facilitate procurement\
    \ of implementations of the various\n   intercomputer networking protocols for\
    \ the several types of Host in\n   play in a typical heterogeneous intercomputer\
    \ network, by employing\n   common implementations in the OPE.  A third motivation,\
    \ of basing a\n   network security approach on trusted mandatory OPEs, will not\
    \ be\n   dealt with here, but is at least worthy of mention.\n   Neither motivation\
    \ should be allowed to detract from the underlying,\n   assumed desire to perform\
    \ true intercomputer networking, however.\n   Therefore, it is further assumed\
    \ that OPEs will be attached to Hosts\n   via a flexible attachment strategy,\
    \ as described in [1]. That is, at\n   the software level an explicit Host-Front\
    \ End Protocol (H-FP) will be\n   employed between Hosts and OPEs, rather than\
    \ having OPEs emulate\n   devices or device controllers already \"known\" to Host\
    \ operating\n   systems (in order to avoid introducing new code into the Host).\n\
    \   For reasons discussed in the Introduction, an H-FP resolves into\n   three\
    \ layers.  The Link layer enables the exchange of bits between\n   Host and OPE.\
    \  The Channel layer enables the bit streams to be\n   demultiplexed and flow\
    \ controlled  (both the Channel and Link layers\n   may use preexisting per-Host\
    \ mechanizations, it should be recalled).\n   The Command (or \"Service Access\"\
    ) layer is our primary concern at\n   present. It serves as the distributed processing\
    \ mechanism which\n   allows processes on Hosts to manipulate protocol interpreters\
    \ (PIs)\n   in OPEs on their behalf; for convenience, it will be referred to as\n\
    \   \"the H-FP\" here.  (It should be noted that the Link and Channel\n   layers\
    \ may be viewed as roughly equivalent to the inboard processing\n   investment\
    \ for a Host-comm subnet processor PI and device driver, so\n   in practical terms\
    \ the savings of resources achieved by outboard\n   processing come from making\
    \ the H-FP \"smaller\" than the inboard\n   implementations of the protocols it\
    \ allows to be offloaded.)\n   The crucial property of the H-FP conceptually is\
    \ that it stands as\n   the interface between a (Host) process and a PI (which\
    \ is actually\n   outboard).  Usually, the model is that of a closed subroutine\n\
    \   interface, although in some cases an interprocess communication\n   mechanism\
    \ model must be appealed to.  That is, the interactions\n   between cooperating\
    \ H-FP PIs in some sense mimic subroutine or IPC\n   calls, from the perspective\
    \ of Host processes calling upon their own\n   H-FP PIs, which in turn are of\
    \ course interfacing via just such\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   mechanisms themselves. Another way of putting\
    \ it is that \"if the\n   protocols were inboard,\" the processes invoking H-FP\
    \ wouldn't know\n   the difference.  H-FP, then, may be viewed as a roundabout\
    \ way of\n   letting Host processes \"get at\" various PIs.\n   Naturally, the\
    \ mechanization of the desired concept cannot be\n   particularly literal.  After\
    \ all, the Hosts and the OPEs are\n   different processors, so we're not envisioning\
    \ a passing through of\n   parameters in an exact fashion.  However, in broad\
    \ terms the model is\n   just that of a somewhat funny interface between a process\
    \ and a PI.\n   (This should not be construed as ruling out the occurrence of\
    \ events\n   which prompt the OPE to initiate an exchange of commands with the\n\
    \   Host, though; see the Introduction for more on the topic of\n   \"Symmetric\
    \ Begins.\")\n"
- title: Interaction Discipline
  contents:
  - "Interaction Discipline\n   The interaction between the Host and the OPE must\
    \ be capable of\n   providing a suitable interface between processes (or protocol\n\
    \   interpreters) in the Host and the off-loaded protocol interpreters in\n  \
    \ the OPE.  This interaction must not, however, burden the Host more\n   heavily\
    \ than would have resulted from supporting the protocols\n   inboard, lest the\
    \ advantage of using an OPE be overridden.\n   Channel Level Interaction\n   As\
    \ stated elsewhere, the Channel level protocol (implicitly in\n   conjunction\
    \ with the Link level) provides two major functions. These\n   are demultiplexing\
    \ the traffic from the Link level into distinct data\n   streams, and providing\
    \ flow control between the Host and the OPE on a\n   per stream basis.  These\
    \ hold even if the Host-OPE attachment is DMA.\n   The data streams between the\
    \ Host and the OPE are bidirectional. In\n   this document, the basic unit of\
    \ data transferred by the Channel\n   level is referred to as a \"chunk\".  The\
    \ primary motivation for this\n   terminology is that the H-FP permits the Channel\
    \ level to be one of\n   several possible protocols, each with its own terminology.\
    \  For\n   example, a chunk on an X.25 Channel would be a packet, while a chunk\n\
    \   on the DTI H-FP channel would be a message.  While the Command level\n   is,\
    \ in a sense, \"more efficient\" when the chunk size is permitted to\n   be large,\
    \ the flexibility permitted in the choice of protocols at the\n   Channel level\
    \ precludes any assumptions about the chunk size.\n   Each data stream is fully\
    \ asynchronous.  A Channel protocol user can\n   send data at any time, once the\
    \ channel has been properly opened.\n   (The Command level's logic may render\
    \ some actions meaningless,\n   however.) The data transfer service provided by\
    \ the Channel protocol\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   is reliable;  this entails delivery in the\
    \ correct order, without\n   duplication, and checked for bit errors.  All retransmission,\
    \ error\n   checking, and duplicate detection is provided by this protocol in\
    \ a\n   way that is transparent to the user.  (If the attachment is DMA,\n   stream\
    \ identification and chunk length must still be provided for.)\n   The flow control\
    \ at the Channel level is provided to prevent the OPE\n   and the Host from overloading\
    \ each other's resources by excessive\n   transmissions.  In general, this flow\
    \ control should not directly\n   affect the outboard protocol interpreters' operation.\
    \  On the other\n   had, this flow control has the same effect as explicit interface\n\
    \   events that provide flow control between the user and the protocol\n   interpreter\
    \ (e.g., the Allocate event of the interface specification\n   for TCP found in\
    \ MIL-STD 1778).  Hence, such events do not need to be\n   communicated explicitly\
    \ at the Command level.  (If the attachment is\n   DMA, flow control must still\
    \ be provided for.)\n   Should Hosts require an OPE to be attached via a Link\
    \ Level that\n   furnishes physical demultiplexing (e.g., a group of RS232 ports),\
    \ any\n   attempt to avoid furnishing reliability and explicit flow control, is\n\
    \   done at their peril;  we have not chosen to assist such an\n   enterprise,\
    \ but neither have we precluded it.  (It would certainly\n   violate the spirit\
    \ of the thing, however.)\n   Command Level Interaction\n   The approach chosen\
    \ for this H-FP is to base the interaction on a\n   small set of commands, separately\
    \ applicable to a given Channel Level\n   channel. The commands are simple, but\
    \ sufficiently flexible to permit\n   the off-loading of the interpreters of the\
    \ large number of protocols\n   at various levels in the hierarchy.  This flexibility\
    \ is made\n   possible in part by the similar nature of the interfaces to most\n\
    \   protocols, combined with the provision of \"protocol idiosyncratic\n   parameters\"\
    . These parameters are defined for each offloaded protocol\n   interpreter in\
    \ the OPE.  The use of such parameters does not\n   complicate the basic design\
    \ of the OPE, since it must be customized\n   for each off-loaded protocol anyway,\
    \ and all that is required of the\n   OPE for those parameters is to pass them\
    \ to the off-loaded protocol\n   interpreter.  Hence, an interface tailored to\
    \ a particular protocol\n   can be created in a straightforward and cost-effective\
    \ way.\n   The command dialog is more or less asynchronous.  Commands can be\n\
    \   issued at any particular time (except when there is a pending\n   command,\
    \ which will be discussed below), and there is no need for\n   dummy traffic on\
    \ a channel when no commands are issued.\n   Associated with each command is a\
    \ response.  The purpose of this\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   response is to indicate, at some level that\
    \ depends in part on the\n   particular protocol interpreter that is offloaded\
    \ to the OPE, whether\n   the command was successfully executed, and if unsuccessful,\
    \ the\n   reason.  Often, generating the response involves interaction with the\n\
    \   protocol interpreter before a response can be generated.\n   When a command\
    \ is issued, the issuer must wait for a response before\n   another command is\
    \ issued.  The nature of the communication between\n   the Host and the OPE is\
    \ thus a lock step command/response dialog.\n   There are two major exceptions\
    \ to this principle, however. One\n   exception is the abrupt form of the End\
    \ command, which can be issued\n   at any time to cancel any previously issued\
    \ commands, and indicate\n   that services are no longer desired.  The other exception\
    \ is the\n   Signal command.  Since a Signal is out-of-band and usually of high\n\
    \   importance, forcing it to wait on a response would be undesirable.\n   Hence,\
    \ a Signal command can be issued while commands (other than\n   Signal) are pending.\
    \  However, a Signal command should not be issued\n   before a successful response\
    \ to the Begin command has been received.\n   Since it is possible for more than\
    \ one command of different types to\n   be pending at one time, a mechanism to\
    \ distinguish responses is\n   needed.  Since there are never two commands of\
    \ the same type pending,\n   including the command name in the response is sufficient\
    \ to make this\n   distinction.\n   A special case command is the Transmit command.\
    \  Details of the\n   Transmit command are provided in the next section. Essentially,\
    \ the\n   Transmit command is used to invoke the data transfer services of the\n\
    \   off-loaded protocol (when issued by the Host) or to indicate the\n   arrival\
    \ of new data from the network (when issued by the OPE).  The\n   nature of specific\
    \ protocol interfaces for these events varies widely\n   between protocols.  Some\
    \ may block until the data is accepted by the\n   remote counterpart (or \"peer\"\
    ) protocol interpreter, while others may\n   not.  Hence, there is a special parameter\
    \ which indicates the nature\n   of the Transmit command interface.  It can either\
    \ require that the\n   response should be generated immediately after determining\
    \ the\n   Transmit command is complete and formed properly, or can indicate\n\
    \   that the response should not be generated until the appropriate\n   interface\
    \ event is given by the remote protocol interpreter.  The\n   default action for\
    \ all Transmit commands can be initialized using the\n   Begin command and changed\
    \ using the Condition command.  Also, the\n   default action can be temporarily\
    \ overridden by specifying a\n   parameter with the Transmit command. The net\
    \ result of this mechanism\n   is to allow the Host to determine within reason\
    \ just how lock-stepped\n   transmissions are to be.  (It is assumed that the\
    \ usual case will be\n   to transfer the burden of buffering to the OPE by taking\
    \ immediate\n   responses, provided that doing so \"makes sense\" with the particular\n\
    \   offloaded protocol in play.)\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   Some protocols provide a block-oriented\
    \ data transfer service rather\n   than a stream-oriented one.  With such a service,\
    \ the data associated\n   with a transfer request is viewed as an integral unit.\
    \  For actual\n   network transmission, the protocol may permit these units to\
    \ be\n   grouped or fragmented. However, the receiving end must deliver the\n\
    \   data in the original, integral units. Protocols that conform to this\n   model\
    \ include some datagram protocols such as IP and UDP, and also\n   some connection\
    \ protocols such as NBS TP.\n   To cater to these types of protocols, it is a\
    \ convention that\n   commands, their parameters, and any associated data be transferred\n\
    \   between the Host and the OPE in a single chunk. Any data associated\n   with\
    \ an H-FP command is viewed as an integral unit which is used in\n   the corresponding\
    \ service request given to the outboard protocol\n   interpreter or delivered\
    \ as a complete unit to the process in the\n   Host. Operation of stream-oriented\
    \ protocols such as TCP will not be\n   adversely affected by this convention.\n\
    \   To accommodate Channel protocols that do not provide for arbitrarily\n   large\
    \ chunks, a mechanism at the Command level is required to permit\n   the linking\
    \ of multiple chunks into a single command, in order to\n   transfer the burden\
    \ of buffering as much as possible from the Host to\n   the OPE.  The facility\
    \ proposed here would consist of an indication\n   at the beginning of each chunk\
    \ which would distinguish integral\n   commands, fragments of a command for which\
    \ more fragments are yet to\n   arrive, and the final fragment of a command. \
    \ The details of this\n   mechanism are discussed in the section on the syntax\
    \ of commands and\n   responses.\n   It is a convention for this H-FP that any\
    \ data associated with a\n   command must start on a word boundary (as defined\
    \ by the local\n   system).  Consequently, there is a need to provide padding\
    \ within the\n   commands.  Such padding is used only to fill to the next appropriate\n\
    \   boundary, and has no semantic significance to the command interpreter\n  \
    \ (i.e., two commands that are identical except for the amount of\n   padding\
    \ should behave identically).  The details of this padding are\n   discussed in\
    \ the section on the syntax of commands and responses.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - 'Proposed Host-Front End Protocol

    '
- title: Syntax Rules
  contents:
  - "Syntax Rules\n   At the Command Level, communication between the Host and the\
    \ OPE\n   takes the form of commands and responses.  A command is a request for\n\
    \   some particular action, and the response indicates the success or\n   failure\
    \ of performing the requested action.\n   All commands and responses are coded\
    \ in ASCII characters. (Nothing\n   precludes OPEs from accepting EBCDIC from\
    \ Hosts that use it in native\n   mode, but that is not required.) These characters\
    \ are sent in some\n   way convenient for the Host, and the OPE is sufficiently\
    \ flexible to\n   interpret them.  (i.e., OPEs are expected to accommodate Host\n\
    \   idiosyncracies in regard to such things as use of 7-bit ASCII in a\n   9-bit\
    \ field.) This approach offers several advantages:\n   Adaptabilities in most\
    \ Hosts:  Most Hosts have the ability to\n   generate and interpret ASCII character\
    \ streams.  Hence, integrating\n   H-FP into a Host will not require difficult\
    \ software.\n   Script generation:  Generation of test and operational command\n\
    \   scripts will be simplified, since they will not need to contain\n   special\
    \ characters.\n   Terminal Operation:  Using simple command streams simplifies\
    \ the\n   conversion of an OPE to a generic virtual terminal support machine.\n\
    \   This is particularly useful during development and testing.\n   Testing: \
    \ Testing will not require special hardware to interpret\n   commands and responses.\
    \  A terminal or data line analyzer would be\n   adequate.\n   The specific format\
    \ for the commands and responses will be discussed\n   in the sections that follow.\
    \ In those sections, the quote character\n   is used to indicate strings.  The\
    \ symbols \"<\" and \">\" (referred to as\n   angle brackets) are used as meta-characters.\n\
    \   Syntax of Commands\n   As alluded to in the section discussing the interaction\
    \ discipline\n   between the Host and the OPE, a function is provided by which\
    \ a chunk\n   can be used to carry either a complete command or a fragment of\
    \ a\n   command.  The mechanism chosen to provide this function entails use\n\
    \   of the first character position in the chunk as a chunk usage\n   identifier.\
    \  The character \"C\" in the first position indicates a\n   chunk containing\
    \ a single, complete command.  \"F\" in the first\n   position indicates a chunk\
    \ which is the first part of a multichunk\n   command. \"M\" in the first position\
    \ indicates the chunk is a middle\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   part (neither the first nor the last chunk)\
    \ of a command.  Finally,\n   \"L\" indicates the chunk is the last chunk of a\
    \ multi-chunk command.\n   Hence, the following sequences of chunks (the letter\
    \ corresponds to\n   the chunk usage identifier in each chunk, and the angle brackets\n\
    \   enclose a chunk) are legal:\n      <C>\n      <F><L>\n      <F><M><M><L>\n\
    \   while the following are not legal:\n      <L>\n      <M><L>\n      <F><C>\n\
    \   Tactics for handling multiple chunks with regard to OPE buffering\n   limits\
    \ are left to the ingenuity of OPE builders. The spirit is to\n   take as much\
    \ as you can, in order to relieve the Host of the\n   necessity of buffering itself.\n\
    \   A command always begins immediately following the indicator\n   character,\
    \ with possible intervening spaces.  This implies a chunk\n   can contain at most\
    \ one complete command.  The end of the command\n   (not including the data) is\
    \ signified by a newline (denoted as <nl>\n   in this document) that does not\
    \ appear inside a quoted string (see\n   below).  The end of the data is designated\
    \ by the end of the last\n   chunk.\n   Commands take the form of an ASCII string.\
    \  The command identifier is\n   the first word of the chunk.  It consists of\
    \ at least the first two\n   letters of the command, in either upper or lower\
    \ case (e.g., the\n   sequences \"BE\", \"Be\", \"bE\", and \"be\" all identify\
    \ the Begin command).\n   Additional letters of the command name can be included\
    \ if desired to\n   aid readability of the command stream.\n   Following the command\
    \ identifier is a list of parameters. These\n   parameters are also represented\
    \ as ASCII strings, although the\n   specific format will depend on the particular\
    \ parameter.  The data to\n   be transmitted is not considered a control parameter,\
    \ however, and\n   need not be ASCII data.\n   Parameters are separated by one\
    \ or more spaces.  Tabs, newlines, and\n   other white space are not legal parameter\
    \ separators.\n   Parameter strings may be quoted, using the character <\">. Any\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   characters between the <\"> characters are\
    \ a part of the parameter,\n   including spaces and newlines.  The character <\"\
    > that is part of the\n   parameter is represented inside a quoted string as <\"\
    \">.\n   The order in which the parameters appear within the command is\n   significant\
    \ to their interpretation by the Host and by the OPE.\n   Optional parameters\
    \ may be skipped by using the characters \",,\" to\n   indicate a NULL parameter.\
    \  Such a NULL parameter takes its default\n   value.  Alternatively, each parameter\
    \ has a MULTICS/UNIX style\n   Control Argument/Flag associated with it that can\
    \ be used to identify\n   the parameter, without placing NULL parameters for each\
    \ parameter\n   skipped.  This flag consists of one or two ASCII characters, and\n\
    \   either upper or lower case may be used.  For example, if the fourth\n   parameter\
    \ of a command had a flag of \"-p\" and the user wished the\n   first three parameters\
    \ to be null, he could use:\n      command -p value\n   or\n      command -P value\n\
    \   instead of\n      command ,, ,, ,, value\n   if it were more convenient for\
    \ the Host to do so.  Flagged parameters\n   must still appear in the correct\
    \ sequence within the command,\n   however.\n   There may be data associated with\
    \ some of the commands.  Any such\n   data is placed into the chunk following\
    \ all the parameters and the\n   unquoted newline. Padding can be provided by\
    \ placing spaces between\n   the end of the final parameter string and the newline,\
    \ so that data\n   begins on a word boundary. The OPE will always pad to a host\
    \ word\n   boundary.  Padding by hosts is optional.\n   Syntax of Responses\n\
    \   Responses are actually just a special form of a command.  It is\n   anticipated\
    \ that all responses would fit into a single channel chunk,\n   although the mechanisms\
    \ described for multichunk commands can\n   certainly be used in responses.  The\
    \ ASCII string used to uniquely\n   identify the response command is \"RE\" (\"\
    Re\", \"rE\", and \"re\" are also\n   permitted).\n   After the response command\
    \ identifier is the original command\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   identifier, so the response can be associated\
    \ with the proper\n   command.  Following this identifier is a three ASCII digit\
    \ response\n   code, a set of protocol idiosyncratic parameters, and a textual\n\
    \   message.  The protocol idiosyncratic parameters are used to transfer\n   interface\
    \ information between the Host and the OPE, and may not be\n   needed when off-loading\
    \ some protocol interpreters.  The textual\n   message is intended for human interpretation\
    \ of the response codes,\n   and is not required by the protocol.  The three digits\
    \ uniquely\n   identify the semantics of the response, at least within the context\n\
    \   of a particular command and particular outboarded protocol\n   interpreter.\n\
    \   Responses are numerically grouped by the type of information they\n   convey.\
    \  The first digit identifies this group, and the last two\n   digits further\
    \ qualify the reply.  The following list illustrates\n   this grouping.\n    \
    \  0XX Successful:  The command was executed successfully. The\n          response\
    \ code may contain further information.\n      1XX Conditional Success:  The command\
    \ was executed successfully,\n          but not exactly according to the service\
    \ and flow control\n          suggestions.  If those suggestions were particularly\
    \ important\n          to the requester, he may wish to issue an End command.\
    \  The\n          response code contains information on what suggestion or\n \
    \         suggestions could not be followed.\n      2XX Command Level Error: \
    \ An error at the command level has\n          occurred.  This could include requesting\
    \ services of a\n          protocol not supported, or a problem in the way those\
    \ services\n          were requested.  This level does not include problems with\
    \ the\n          syntax of the command or its parameters.\n      3XX Syntax and\
    \ Parameter Errors:  An error in the syntax of the\n          command or a problem\
    \ with one of its parameters has occurred.\n          A problem with a parameter\
    \ may be other than syntactical, such\n          as illegal address.\n      4XX\
    \ Off-loaded Protocol Interpreter Problems:  Some problem with\n          the\
    \ particular off-loaded protocol has occurred.\n      5XX Local OPE Internal Problems:\
    \  Problems, such as insufficient\n          OPE resources, or problems with OPE\
    \ to subnet interface.\n      6XX Security Problem:  Some problem with Host, network,\
    \ or OPE\n          security has occurred.  The response code indicates the\n\
    \          problem.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      7XX Reserved for Future Expansion\n \
    \     8XX Reserved for Future Expansion\n      9XX Protocol Idiosyncratic Errors:\
    \  Some error occurred that is\n          idiosyncratic to the particular off-loaded\
    \ protocol being\n          used.  The response code indicates the error.\n"
- title: Description of the Commands
  contents:
  - "Description of the Commands\n   As stated above, communication between the Host\
    \ and the OPE at the\n   Command Level is accomplished using commands and responses.\
    \  Commands\n   may be issued by either the Host or the OPE, and are used to\n\
    \   stimulate activity in the other entity. Some commands may only have a\n  \
    \ meaningful interpretation in one direction, however.  A response\n   indicates\
    \ that the activity started by the command was completed, and\n   a code indicates\
    \ success or failure of the command, and perhaps other\n   information related\
    \ to the command as well.\n   Associated with each command is a set of parameters.\
    \  The order in\n   which the parameters appear is significant to the correct\
    \ operation\n   of the protocols.  More information on the syntax of command\n\
    \   parameters can be found in the syntax descriptions.\n   The commands are:\n\
    \      - Begin: initiate communication between a process in the Host and\n   \
    \   an off-loaded protocol interpreter in the OPE.  (A Channel level\n      stream/connection\
    \ will typically have been opened as a prior step.\n      All other commands,\
    \ except No-op, apply to a stream on which a\n      successful Begin has been\
    \ done.)\n      - Transmit: transmit data between a process in the Host and an\n\
    \      off-loaded protocol interpreter in the OPE.\n      - Signal:  cause an\
    \ out-of-band signal to be sent by the\n      off-loaded protocol interpreter\
    \ to its peer, or indicate the\n      arrival of such a signal from the remote\
    \ side.\n      - Condition: alter the off-loaded protocol interpreter's\n    \
    \  operational characteristics.\n      - Status: transfer status requests or information\
    \ between a\n      process in the Host and an off-loaded protocol interpreter\
    \ in the\n      OPE.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      - End: indicate that services from the\
    \ off-loaded protocol\n      interpreter are no longer required, or will no longer\
    \ be provided.\n      - No-op:  performs no operation, but facilitates testing.\n\
    \   These commands will be discussed in the following sections. Each of\n   these\
    \ sections includes a discussion of the purpose of the command, a\n   description\
    \ of each of the parameters used with the command, a list\n   of responses for\
    \ the command, an example of the command, and a set of\n   notes for the implementor.\
    \  (An appendix will eventually be furnished\n   for each protocol offloading,\
    \ showing the use of its protocol\n   idiosyncratic parameters as well as of the\
    \ general parameters on a\n   per-command basis.  Initially, only representative\
    \ offloadings will\n   be treated in appendices, with others to be added after\
    \ the protocol\n   gains acceptance.)\n   Begin\n      Purpose of the Begin Command\n\
    \         The purpose of a Begin command is to initiate communication\n      \
    \   between the Host and the OPE on a particular stream or channel\n         (the\
    \ channel is opened as a separate step, of course). The\n         interpretation\
    \ of the command is somewhat dependent upon\n         whether it was issued by\
    \ the Host of the OPE.\n         - If the command was issued by the Host, it means\
    \ some process\n         in the Host is requesting services of a protocol that\
    \ was\n         off-loaded to the OPE.  The user request results in the\n    \
    \     establishment of a channel connection between the Host and the\n       \
    \  OPE, and a Begin command to the Command interpreter in the OPE.\n         -\
    \ If the command was issued by the OPE, it means some protocol\n         interpreter\
    \ in the OPE has data for some process in the Host\n         which is not currently\
    \ known by the OPE.  An example would be\n         an incoming UDP datagram on\
    \ a new port, or if no Begin for UDP\n         had been issued at all by the Host.\
    \  (An incoming TCP\n         connection request could be handled by a response\
    \ to the user's\n         Passive Open request, which had previously caused a\
    \ Begin\n         request from the Host; an incoming TCP connection request to\
    \ a\n         port on which no Listen had been issued would cause an OPE\n   \
    \      generated Begin, however.)\n         As indicated earlier, any particular\
    \ Host is not required to\n         support two-way Begins.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      Parameters of the Begin Command\n   \
    \      The Begin command has several parameters associated with it.\n        \
    \ These parameters contain information needed by the offloaded\n         protocol\
    \ to provide an adequate level of network service.  This\n         information\
    \ includes protocol, source and destination\n         addresses, and also type\
    \ of service and flow control advice.\n         These parameters are discussed\
    \ in detail below.\n      Protocol\n         The protocol parameter identifies\
    \ that off-loaded protocol in\n         the OPE to which Begin is directed, or\
    \ which issued the Begin\n         to the Host.  For example, if the user wished\
    \ to utilize TCP\n         services, and the TCP software was off-loaded into\
    \ the OPE,\n         then the Protocol parameter for the Begin command would be\
    \ TCP.\n         There are two categories of protocol parameters -- generic and\n\
    \         specific.  A generic parameter identifies a type of protocol\n     \
    \    service required, but does not identify the actual protocol.\n         Use\
    \ of generic protocols allows a Host process to obtain\n         network services\
    \ without specific knowledge of what protocol is\n         being used; this could\
    \ be appropriate for use in situations\n         where no specific aspect(s) of\
    \ a specific protocol is/are\n         required.  For example, the user may select\
    \ a generic\n         Host-to-Host connection protocol, and (at some point in\
    \ the\n         future) may actually receive services from either TCP or the\n\
    \         NBS Transport Protocol, depending on the network (or even the\n    \
    \     foreign Host) in question.  A specific protocol parameter\n         identifies\
    \ some particular protocol, e.g., TCP, whose use is\n         required for the\
    \ given channel.\n         The valid entries for the protocol field include:\n\
    \            Generic   Specific  Comment\n            GIP       IP        Datagram\
    \ Internetwork Protocol\n            HHP       TCP       Connection Transport/Host-Host\
    \ Protocol\n            GDP       UDP       Datagram Transport/Host-Host Protocol\n\
    \            VTP       TEL       Virtual Terminal (Telnet) Protocol\n        \
    \    GFP       FTP       File Transfer Protocol\n            MAIL      SMTP  \
    \    Mail Transfer Protocol\n            PROX      PROX      Proximate Net Interface\
    \ Protocol\n         (Note that the final line is meant to allow for a process\
    \ in an\n         OPE'd Host's getting at the PI of the Network Interface\n  \
    \       Protocol for whatever the proximate network is.  Of course, so\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         doing only makes sense in specialized\
    \ contexts.  We conceive of\n         the desirability of \"pumping bits at a\
    \ peripheral\" on a LAN,\n         though, and don't want to preclude it, even\
    \ if it would be\n         impossible on many LAN's to deal with the problem of\n\
    \         distinguishing traffic coming back on the LAN in this \"raw\"\n    \
    \     mode from normal, IP traffic.  Indeed, in some contexts it is\n        \
    \ likely that administrative considerations would preclude\n         avoidance\
    \ of IP even if technical considerations allowed it,\n         but it's still\
    \ the case that \"the protocol\" should provide a\n         hook for going directly\
    \ to the L I protocol in play.)\n         There is no default value for this parameter.\
    \  If it is not\n         present, the Begin command is in error.  The control\
    \ flag for\n         this parameter is -pr.\n      Active/Passive\n         The\
    \ Active/Passive parameter indicates whether the issuer of\n         the Begin\
    \ command desires to be the Active or Passive user of\n         the protocol.\
    \  This parameter is particularly relevant to\n         connection-oriented protocols\
    \ such as TCP, where the user may\n         actively pursue connection establishment,\
    \ or else may passively\n         wait for the remote entity to actively establish\
    \ the\n         connection; it also allows some process to establish itself as\n\
    \         the Host \"fielder\" of incoming traffic for a connectionless\n    \
    \     protocol such as IP.\n         Active is requested using the single character\
    \ \"A\".  Passive is\n         indicated using the character \"P\".  The default\
    \ value of this\n         parameter is \"A\". Also, when the OPE issues the Begin\
    \ command,\n         the value must be \"A\".  The control flag for this parameter\
    \ is\n         -ap.\n      Foreign Address Primary Component\n         The addressing\
    \ structure supported by H-FP is two level. Each\n         address has two components,\
    \ the primary and the secondary.  The\n         exact interpretation of these\
    \ two components is protocol\n         specific, but some generalities do apply.\
    \  The primary\n         component of the address identifies where the protocol\
    \ is to\n         deliver the information. The secondary component identifies\n\
    \         which recipient at that location is to receive the information.\n  \
    \       For example, the TCP primary address component is the Host's\n       \
    \  Internet Address, while the secondary address component is the\n         TCP\
    \ port.  Similarly, IP's primary address component is the\n         Host's Internet\
    \ Address, and the secondary address component is\n         the IP ULP field.\
    \  Some protocols provide only a single level\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         of addressing, or the secondary level\
    \ can be deduced from some\n         other information (e.g., Telnet).  In these\
    \ cases, only the\n         primary component is used.  To cater to such cases,\
    \ the\n         secondary component parameter comes later in the parameter\n \
    \        list.\n         The Foreign Address Primary Component parameter contains\
    \ the\n         primary component of the destination address.  It may be in\n\
    \         either a numeric or symbolic form.  (Note that this allows for\n   \
    \      the OPE to exercise a Name Server type of protocol if\n         appropriate,\
    \ as well as freeing the Host from the necessity of\n         maintaining an in-board\
    \ name to address table.) The default\n         value for this parameter, although\
    \ it only makes sense for\n         Passive Begins, is \"Any Host\".  The control\
    \ flag for this\n         parameter is -fp.\n      Mediation Level\n         The\
    \ mediation level parameter is an indication of the role the\n         Host wishes\
    \ the OPE to play in the operation of the protocol.\n         The extreme ranges\
    \ of this mediation would be the case where\n         the Host wished to remain\
    \ completely uninvolved, and the case\n         where the Host wished to make\
    \ every possible decision.  The\n         specific interpretation of this parameter\
    \ is dependent upon the\n         particular off-loaded protocol.\n         The\
    \ concept of mediation level can best be clarified by means\n         of example.\
    \  A full inboard implementation of the Telnet\n         protocol places several\
    \ responsibilities on the Host. These\n         responsibilities include negotiation\
    \ and provision of protocol\n         options, translation between local and network\
    \ character codes\n         and formats, and monitoring the well-known socket\
    \ for incoming\n         connection requests.  The mediation level indicates whether\n\
    \         these responsibilities are assigned to the Host or to the OPE\n    \
    \     when the Telnet implementation is outboard.  If no OPE\n         mediation\
    \ is selected, the Host is involved with all\n         negotiation of the Telnet\
    \ options, and all format conversions.\n         With full OPE mediation, all\
    \ option negotiation and all format\n         conversions are performed by the\
    \ OPE.  An intermediate level of\n         mediation might have ordinary option\
    \ negotiation, format\n         conversion, and socket monitoring done in the\
    \ OPE, while\n         options not known to the OPE are handled by the Host.\n\
    \         The parameter is represented with a single ASCII digit.  The\n     \
    \    value 9 represents full OPE mediation, and the value 0\n         represents\
    \ no OPE mediation.  Other values may be defined for\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         some protocols (e.g., the intermediate\
    \ mediation level\n         discussed above for Telnet).  The default value for\
    \ this\n         parameter is 9.  The control flag for this parameter is -m.\n\
    \      Transmit Response Discipline\n         The Transmit Response Discipline\
    \ parameter is used to set the\n         desired action on the OPE's part for\
    \ generating responses to\n         Transmit commands.  Essentially the parameter\
    \ determines when\n         the OPE's response to the transmit command occurs\
    \ (i.e.,\n         immediately or delayed).\n         The Transmit Response Discipline\
    \ value is represented by a\n         single ASCII character.  The character \"\
    N\" is used for\n         nonblocking Transmit commands, which implies that responses\
    \ for\n         Transmit commands should be generated as soon as the command\n\
    \         has been examined for correctness (i.e., that the syntax is\n      \
    \   good and the parameters appear reasonable).  In other words,\n         the\
    \ outboard protocol interpreter has the data in its queue,\n         but hasn't\
    \ necessarily transmitted it to the net.  The\n         character \"B\" is used\
    \ for blocking Transmit commands, which\n         requests that the response not\
    \ be generated until the protocol\n         interpreter has successfully transmitted\
    \ the data (unless, of\n         course, the Transmit command was badly formed).\
    \ The default\n         value for this parameter is \"N\", or a nonblocking Transmit\n\
    \         command.  The control flag for this parameter is -tr.\n         (Depending\
    \ on the protocol in play, \"successfully transmitted\"\n         might well imply\
    \ that an acknowledgment of some sort has been\n         received from the foreign\
    \ Host, but for other protocols it\n         might only mean that the given collection\
    \ of bits has been\n         passed from the OPE to the proximate net.)\n    \
    \  Foreign Address Secondary Component\n         The addressing mechanisms supported\
    \ by this level of H-FP are\n         discussed above.  The Foreign Address Secondary\
    \ Component\n         parameter contains the value of the destination address's\n\
    \         secondary component.  Some protocols do not require this\n         parameter,\
    \ or can obtain it from other information.  Therefore,\n         the default value\
    \ for this parameter is NULL.  A NULL secondary\n         component might be an\
    \ error for some protocols, however.  The\n         secondary component can be\
    \ expressed either numerically or\n         symbolically.  The control flag for\
    \ this parameter is -fs.\n         (Note that it is intended to be \"legal\" to\
    \ specify a Secondary\n         Component other than the Well-Known Socket for\
    \ the protocol in\n         play; in such cases, the result should be that the\
    \ virtualizing\n         of the given protocol be applied to the stream, in the\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         expectation that that's what the other\
    \ side is expecting.  This\n         is to cater to, for example, a Terminal-Terminal\
    \ protocol that\n         merely \"does Telnet\" to a socket other than the usual\
    \ Logger.)\n      Local Address Secondary Component\n         The Local Address\
    \ Secondary Component parameter contains the\n         value of the local address's\
    \ secondary component.  (The primary\n         component is assumed to be the\
    \ default for the Host, but can be\n         altered as well; see below.) Some\
    \ protocols do not require this\n         parameter, or can obtain it from other\
    \ information.  In some\n         cases, the OPE may already know the value for\
    \ this parameter\n         and therefore not require it. The default value of\
    \ this\n         parameter is NULL.  The local address secondary component can\n\
    \         be expressed either numerically or symbolically.  The control\n    \
    \     flag for this parameter is -ls.\n      Begin Timeout Interval\n        \
    \ After a Begin command is issued, a timer can be started.  If\n         the activity\
    \ requested cannot be performed within some timed\n         interval, then the\
    \ Begin command may expire.  An expired Begin\n         command returns a response\
    \ code indicating a Begin timeout\n         occurred.  The Begin Timeout Interval\
    \ parameter contains the\n         length of time the timer will run before the\
    \ Begin timeout\n         occurs.\n         The parameter is represented as a\
    \ string of ASCII digits\n         indicating the time interval in seconds.  The\
    \ default value of\n         this parameter is infinity (i.e., the Begin command\
    \ will never\n         timeout).  The control flag for this parameter is -bt.\n\
    \      Type of Service Advice\n         The Type of Service Advice parameter contains\
    \ information on\n         the service characteristics the user desires from the\
    \ offloaded\n         protocol.  Included in this parameter is the precedence\
    \ of the\n         data transfer, and also indication of whether high throughput,\n\
    \         fast response time, or low error rate is the primary goal.\n       \
    \  The format of this parameter is a letter immediately (i.e. no\n         intervening\
    \ spaces) followed by a digit.  The letter \"T\"\n         indicates that high\
    \ throughput is desired.  The letter \"R\"\n         indicates minimal response\
    \ time is the goal.  The letter \"E\"\n         indicates that low error rates\
    \ are the goal.  The letter \"N\"\n         indicates there are no special service\
    \ requirements to be\n         conveyed.  The digit immediately following the\
    \ character\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         indicates the desired precedence level,\
    \ with zero being the\n         lowest, and nine being the highest.  The specific\n\
    \         interpretation of this parameter is dependent on what service\n    \
    \     options are provided by the protocol.  The default value of\n         this\
    \ parameter is the lowest precedence (ROUTINE), and no\n         special service\
    \ requests.  The control flag for this parameter\n         is -ts.\n      Flow\
    \ Control Advice\n         The Flow Control Advice parameter contains information\
    \ on the\n         flow characteristics desired by the user.  Some applications\n\
    \         such as file transfer operate more efficiently if the data is\n    \
    \     transferred in large pieces, while other, more interactive\n         applications\
    \ are more efficiently served if smaller pieces are\n         used.  This parameter\
    \ then indicates whether large or small\n         data blocks should be used.\
    \  It is only relevant in stream or\n         connection-oriented protocols, where\
    \ the user sends more than a\n         single piece of data.\n         This parameter\
    \ is represented by a single ASCII digit. A value\n         0 means the data should\
    \ be sent in relatively small blocks\n         (e.g., character or line oriented\
    \ applications), while a value\n         9 means the data should be sent in relatively\
    \ large blocks\n         (e.g., block or file oriented applications). Other values\n\
    \         represent sizes between those extremes.  The character \"N\"\n     \
    \    indicates that no special flow control advice is provided.  The\n       \
    \  actual interpretation of this parameter is dependent on the\n         particular\
    \ protocol in the OPE.  The default value of this\n         parameter is no flow\
    \ control advice. In this case, the protocol\n         in the OPE will operate\
    \ based only on information available in\n         the OPE.  The control flag\
    \ for this parameter is -fc.\n      Local Address Primary Component\n        \
    \ This parameter contains the local address primary component. It\n         is\
    \ anticipated that under most circumstances, this component is\n         known\
    \ to both the Host and the OPE.  Consequently, this\n         parameter is seldom\
    \ required.  It would be useful if the Host\n         desired to select one of\
    \ several valid addresses, however.  The\n         control flag for this parameter\
    \ is -lp.\n      Security\n         The security parameters contain a set of security\
    \ level,\n         compartment, community of interest, and handling restriction\n\
    \         information.  Currently, security is provided by performing all\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         processing at system high level or\
    \ at a single level.\n         Consequently, these parameters are probably redundant,\
    \ since\n         the security information is known.  In the future, however,\n\
    \         these parameters may be required.  Therefore a field is\n         provided.\
    \ The control flag for this parameter is -s.\n      Protcol Idiosyncratic Parameters\n\
    \         The remaining parameters are protocol idiosyncratic.  That is,\n   \
    \      each protocol that is off-loaded may have a set of these\n         parameters,\
    \ which are documented with a description of the\n         off-loaded protocol.\
    \  The default value for these parameters is\n         NULL, unless otherwise\
    \ specified by a particular offloaded\n         protocol.  The control flag for\
    \ this set of parameters is -pi,\n         which identifies the first protocol\
    \ idiosyncratic parameters.\n         Control flags for other protocol idiosyncratic\
    \ parameters must\n         be defined for each off-loaded protocol.\n      Data\n\
    \         After the Protocol Idiosyncratic Parameters, if any, and the\n     \
    \    required <nl>, if the protocol in play allows for it at this\n         juncture\
    \ the rest of the chunk will be interpreted as data to\n         be transmitted.\
    \  That is, in connection oriented protocols data\n         may or may not be\
    \ permitted at connection initiation time, but\n         in connectionless protocols\
    \ it certainly makes sense to allow\n         the H-FP Begin command to convey\
    \ data. (This will also be\n         useful when we get to the Condition command.)\n\
    \      Responses\n         The following responses have been identified for the\
    \ Begin\n         command:\n            000    Command completed successfully\n\
    \            101    Throughput not available; using maximum\n            102 \
    \   Reliability not available; using maximum\n            103    Delay not available;\
    \ using minimum\n            110    Flow Control advice not followed; smaller\
    \ blocks used\n            111    Flow Control advice not followed; larger blocks\
    \ used\n            201    Failed; Begin not implemented in this direction\n \
    \           202    Failed; timeout\n            203    Failed; Begin command on\
    \ already active channel\n            300    Problem with multiple chunks\n  \
    \          301    Syntax problem with Begin command\n            302    Protocol\
    \ not supported in OPE/Host\n            303    Active service not available\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            304    Passive service not available\n\
    \            305    Invalid Foreign Address Primary Component\n            306\
    \    Invalid Transmit Discipline\n            307    Invalid Foreign Address Secondary\
    \ Component\n            308    Invalid Local Address Secondary Component\n  \
    \          309    Invalid Timeout Interval\n            310    Invalid Type of\
    \ Service Advice\n            311    Invalid Flow control Advice\n           \
    \ 312    Invalid Local Address Primary Component\n            401    Protocol\
    \ Interpreter in OPE not responding\n            402    Remote Protocol Interpreter\
    \ not available\n            403    Failed; insufficient protocol interpreter\
    \ resources\n            501    Failed; insufficient OPE resources\n         \
    \   601    Request violates security policy\n            602    Security parameter\
    \ problem\n         Additionally, protocol idiosyncratic responses will be defined\n\
    \         for each off-loaded protocol.\n      Example of Begin Command\n    \
    \     The Begin command is the most complex of the H-FP Command\n         Level.\
    \ When the off-loaded protocol is TCP, the Begin command\n         is used to\
    \ open TCP connections.  One possible example of a\n         Begin command issued\
    \ by an inboard Telnet interpreter to open a\n         TCP connection to ISIA,\
    \ with no begin timeout interval, is:\n            C BE TCP A ISIA 9 N 23 ,, ,,\
    \ N0 S <nl>\n         Where:\n            TCP    The code for the protocol TCP\n\
    \            A      Indicates Active Begin\n            ISIA   The name of a Host\
    \ at USC-ISI\n            9      Mediation Level 9:  Full OPE mediation\n    \
    \        N      Non-blocking transmit\n            23     Destination Telnet Port\n\
    \            ,,     skip  over parameters  (Local Address Secondary,\n       \
    \            Begin Timeout Interval)\n            N0     Type of Service Advice:\
    \  No special Advice,\n                   Normal Precedence\n            S   \
    \   Flow Control Advice: use small blocks\n         This command will cause the\
    \ OPE to invoke the TCP interpreter\n         to generate the initial SYN packet\
    \ to the well-known Telnet\n         socket on Host ISIA.  It also informs the\
    \ OPE to do all TCP\n         related processing via the Mediation Level, accepts\
    \ default\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         Local Address parameters, and sets\
    \ the Begin Timeout Interval\n         to infinity.  The precedence of the TCP\
    \ connection is Normal,\n         and the TCP interpreter is informed that the\
    \ data stream will\n         consist of primarily small blocks.\n      Notes to\
    \ the Implementor\n         Response 203 might seem silly to some readers, but\
    \ it's there\n         in case somebody goofed in using the Channel Layer.\n \
    \  Transmit\n      Purpose of the Transmit Command\n         The purpose of the\
    \ Transmit command is to permit the process in\n         the Host to send data\
    \ using an off-loaded protocol interpreter\n         in the OPE, and also to permit\
    \ the OPE to deliver data received\n         from the network destined for the\
    \ process in the Host.  The\n         Transmit command is particularly relevant\
    \ to connection and\n         stream type protocols, although it has applications\
    \ for\n         connectionless protocols as well.  After the Begin command is\n\
    \         issued successfully and the proper Response received, Transmit\n   \
    \      commands can be issued on the given channel.  The semantics of\n      \
    \   the Transmit command depend on whether it was issued by the\n         Host\
    \ or the OPE.\n         - If the Host issues the Transmit command, a process in\
    \ the\n         Host wishes to send the data to the destination specified to\n\
    \         the off-loaded protocol interpreter that was established\n         (typically)\
    \ by a previous Begin command on the given H-FP\n         channel.\n         -\
    \ If the OPE issues the command, the OPE has received data\n         destined\
    \ for a process in the Host from a connection or stream\n         supported by\
    \ the off-loaded protocol that was established by a\n         previous Begin command\
    \ on the given H-FP channel.\n      Parameters of the Transmit Command\n     \
    \    The Transmit command has one parameter associated with it. It\n         is\
    \ an optional parameter, to temporarily override the response\n         discipline\
    \ for this particular transmit command. Some protocols\n         may have protocol-idiosyncratic\
    \ parameters as well.  The\n         transmit command also has data associated\
    \ with it.  All\n         parameters must precede the data to be transmitted.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      Response Discipline Override\n      \
    \   The Response Discipline Override parameter indicates the\n         desired\
    \ response discipline for that individual Transmit\n         Command, overriding\
    \ the default response discipline.  A single\n         ASCII character is used\
    \ to indicate the desired discipline.\n         The character \"N\" indicates\
    \ that this Transmit command should\n         not block, and should return a response\
    \ as soon as the data is\n         given to the protocol interpreter in the OPE.\
    \ The character \"B\"\n         indicates that this Transmit command should block,\
    \ meaning that\n         a response should not be generated until the data has\
    \ been sent\n         to the destination.  The default value of this parameter\
    \ is the\n         currently defined Transmit Command response discipline.  The\n\
    \         use of this parameter does not alter the currently defined\n       \
    \  Transmit command response discipline; the default is changed\n         with\
    \ the Condition command.  The control flag for this\n         parameter is -rd.\n\
    \      Protocol-Idiosyncratic Parameters\n         Any other parameters to the\
    \ Transmit command are\n         protocol-idiosyncratic. That is, each protocol\
    \ that is\n         off-loaded has a set of these parameters, which are documented\n\
    \         with a description of the off-loaded protocol.  The default\n      \
    \   value for these parameters is NULL, unless otherwise specified\n         by\
    \ a particular off-loaded protocol.  The control flag for this\n         set of\
    \ parameters is -pi, which identifies the first\n         protocol-idiosyncratic\
    \ parameters.  Control flags for other\n         protocol-idiosyncratic parameters\
    \ must be defined for each\n         off-loaded protocol.\n      Responses\n \
    \        The following responses for the Transmit command have been\n        \
    \ identified:\n            000    Transmit Command completed successfully\n  \
    \          201    Transmit Command not appropriate\n            300    Problem\
    \ with multiple chunks\n            301    Syntax problem with Transmit Command\n\
    \            302    Invalid Transmit Command Response Discipline\n           \
    \ 401    Protocol Interpreter in OPE not responding\n            402    Failure\
    \ in remote protocol interpreter\n            403    Failed; insufficient protocol\
    \ interpreter resources\n            501    Failed; insufficient OPE resources\n\
    \            601    Request violates security policy\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         Additionally, protocol-idiosyncratic\
    \ responses will be defined\n         for each off-loaded protocol.\n      Example\
    \ of Transmit Command\n         The transmit command is used in TCP to provide\
    \ the TCP write\n         call.  An example of such a transmit command would be:\n\
    \            C TR N <nl> <DATA>\n         Where N indicates non-blocking transmission\
    \ discipline, <nl> is\n         the required command-ending newline, and <DATA>\
    \ is presumed to\n         be the user's data that is to be transmitted.\n   \
    \   Notes to the Implementor\n         If you get a 403 or a 501 response and\
    \ have sent a multiple\n         chunk it probably makes sense to try a single\
    \ chunk; if you've\n         sent a single chunk, it makes sense to wait a while\
    \ and try\n         again a few times before giving up on the stream/channel.\n\
    \   Condition\n      Purpose of the Condition Command\n         The primary purpose\
    \ of the Condition command is to permit a\n         process to alter the characteristics\
    \ that were originally set\n         up with the Begin command. (That is, \"condition\"\
    \ is a verb.)\n         These characteristics include the addresses, the mediation\n\
    \         level, the type of service, and the flow control parameters\n      \
    \   from Begin. They may also include protocol-idiosyncratic\n         characteristics.\
    \ (Although Condition is usually thought of as a\n         Host->OPE command,\
    \ it may also be used OPE->Host in some\n         contexts.)\n         Condition\
    \ is a generic command that may find little use in some\n         off-loaded protocols.\
    \  In others, only some of the parameters\n         identified may make sense.\
    \  For example, changing the\n         destination address of a TCP connection\
    \ involves closing one\n         connection and opening another.  Consequently,\
    \ in may make more\n         sense to first issue an End command, and then a Begin\
    \ with the\n         new address.  In other protocols, such as IP or UDP, changing\n\
    \         the address on each datagram would be a perfectly reasonable\n     \
    \    thing to do.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      Parameters of the Condition Command\n\
    \         The Condition command has the same parameters as the Begin\n       \
    \  command.  Any parameters expressed in a Condition command\n         indicate\
    \ the new values of the characteristics to be altered;\n         all parameters\
    \ not expressed retain the current value.\n         Although it is possible to\
    \ express the change of any of the\n         characteristics originally set up\
    \ in the Begin command using\n         the Condition command, there are some characteristics\
    \ that do\n         not make sense to alter, at least for some protocols. For\n\
    \         example, once a connection is opened, it does not make much\n      \
    \   sense to change the Foreign Address Primary or Secondary\n         Components.\
    \  Doing so is inconsistent with current versions of\n         TCP, and would\
    \ require the closing of the existing connection\n         and opening a new one\
    \ to another address.  Earlier versions of\n         TCP did permit connections\
    \ to be moved.  If a protocol that\n         provided such a feature was implemented\
    \ in the OPE, the\n         changing the Secondary Address Components would be\
    \ a reasonable\n         thing to do.\n      Responses\n         The responses\
    \ to the Condition command are the same as those to\n         the Begin command.\n\
    \      Example of Condition Command\n         The Condition Command can be quite\
    \ complex, and can be used for\n         many purposes.  One conceived use of\
    \ the condition command\n         would be to change the type of service advice\
    \ associated with\n         the channel. An example of this (which also demonstrates\
    \ the\n         ability to skip parameters) is:\n            C -ts T <nl>\n  \
    \       which causes the offloaded PI associated with the current\n         channel\
    \ to attempt to achieve high throughput (in its use of\n         the comm subnet(s)\
    \ in play).\n      Notes to the Implementor\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   Signal\n      Purpose of Signal Command\n\
    \         The purpose of the Signal Command (implicitly at least) is to\n    \
    \     permit the transfer of out-of-band signals or information\n         between\
    \ the Host and the OPE, in order to utilize (explicitly)\n         out-of-band\
    \ signaling services of the off-loaded protocol. The\n         semantics of the\
    \ Signal command depend upon whether it was\n         issued by the Host or the\
    \ OPE.\n         - If the Signal command was issued by the Host, it means a\n\
    \         process in the Host desires to send out-of-band data or an\n       \
    \  out-of-band signal.\n         - If the Signal command was issued by the OPE,\
    \ it means\n         out-of-band data or an out-of-band signal arrived for the\n\
    \         process associated with the channel in the Host.\n      Parameters of\
    \ the Signal Command\n         The basic usage of the Signal command is with no\
    \ parameters,\n         which sends or reports the receipt of an out-of-band signal.\n\
    \         Some protocols, such as the NBS Transport Protocol, permit the\n   \
    \      user to send data with the out-of-band signal.  Hence, data is\n      \
    \   permitted to accompany the Signal command.  There may also be\n         protocol-idiosyncratic\
    \ parameters for the Signal command.  If\n         this is the case, these parameters\
    \ would come before the data.\n      Protocol-Idiosyncratic Parameters\n     \
    \    The parameters for the Signal command are protocol\n         idiosyncratic.\
    \  That is, each protocol off-loaded has a set of\n         these parameters.\
    \  The default value for these parameters is\n         their previous values.\
    \ Control flags for multiple\n         protocol-idiosyncratic parameters must\
    \ be defined for each\n         off-loaded protocol.\n      Responses\n      \
    \   The following responses have been identified for the Signal\n         command:\n\
    \            000    Command completed successfully\n            201    Command\
    \ not appropriate\n            300    Problem with multiple chunks\n         \
    \   301    Syntax problem with Command\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            401    Protocol Interpreter in\
    \ OPE not responding\n            402    Failure in remote protocol interpreter\n\
    \            403    Failed; insufficient protocol interpreter resources\n    \
    \        501    Failed; insufficient OPE resources\n            601    Request\
    \ violates security policy\n         Additionally, protocol-idiosyncratic responses\
    \ will be defined\n         for each off-loaded protocol.\n      Example of Signal\
    \ Command\n         The major perceived use for the Signal command when offloading\n\
    \         a connection protocol is sending an out-of-band signal with no\n   \
    \      data.  In such a case, the appropriate signal command would be:\n     \
    \       C SI <nl>\n      Notes to the Implementor\n         Some protocols may\
    \ allow only only one outstanding signal at a\n         time.  For these protocols,\
    \ it is an implementation issue\n         whether the OPE will buffer several\
    \ signals, but a good case\n         could be made for the position that a scrupulous\
    \ OPE would\n         reflect a 202 response back to the Host in such cases.\n\
    \         There is some question as to the proper handling of the\n         \"\
    expedited data\" notion of some (particularly ISO) protocols.\n         It might\
    \ be more appropriate to deal with such a thing as a\n         protocol idiosyncratic\
    \ parameter on the Transmit command\n         instead of using the Signal command\
    \ (even if it's the closest\n         approximation to an out-of-band signal in\
    \ the given protocol).\n         If it's provided using the Signal command, the\
    \ expedited data\n         should not be passed as ASCII, and should appear after\
    \ the\n         command-terminating newline character (and appropriate padding\n\
    \         with space characters).\n   Status\n      Purpose of Status Command\n\
    \         The purpose of the Status command is to permit the Host to\n       \
    \  request and obtain status information from the OPE, and vice\n         versa.\
    \ This includes status request of a conventional protocol\n         interface\
    \ (e.g., in TCP, there is a request to determine the\n         state of a particular\
    \ connection).\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      Parameters of the Status Command\n  \
    \       The parameters for the Status command indicate whether it is a\n     \
    \    request or a response, and contain the status information.\n         Request/Report\n\
    \            This parameter indicates whether the command is a Status\n      \
    \      request or a Status report.  It consists of a single ASCII\n          \
    \  character.  Q indicates a request (query), and R indicates a\n            report.\
    \  It should be noted that a report may be generated\n            as the result\
    \ of a query, or may be generated as the result\n            of specific protocol\
    \ mechanisms.\n      Protocol-Idiosyncratic Parameters\n         The parameters\
    \ to the status command are\n         protocol-idiosyncratic. That is, each protocol\
    \ off-loaded has a\n         set of these parameters.  The default value for these\n\
    \         parameters is their previous values.  Among these parameters is\n  \
    \       an identifier of the type of status information contained or\n       \
    \  requested, and a value or set of values that contain the\n         particular\
    \ status information. The status information itself\n         should be the last\
    \ item in the command. The control flag for\n         this set of parameters is\
    \ -pi, which identifies the first\n         protocol-idiosyncratic parameters.\
    \  Control flags for other\n         protocol-idiosyncratic parameters must be\
    \ defined for each\n         off-loaded protocol.\n      Responses\n         The\
    \ following responses have been identified for the Status\n         command:\n\
    \            000    Command completed successfully\n            201    Command\
    \ not appropriate\n            300    Problem with multiple chunks\n         \
    \   301    Syntax problem with Command\n            302    Inappropriate status\
    \ request\n            303    Inappropriate status response\n            401 \
    \   Protocol Interpreter in OPE not responding\n            402    Failure in\
    \ remote protocol interpreter\n            403    Failed; insufficient protocol\
    \ interpreter resources\n            501    Failed; insufficient OPE resources\n\
    \            601    Request violates security policy\n            9xx    Protocol\
    \ Idiosyncratic status responses\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      Example of Status Command\n         The\
    \ status command can be particularly complex, depending on\n         the protocol\
    \ and particular type of status information.  One\n         possible use of the\
    \ status command when off-loading TCP is to\n         communicate the status service\
    \ request.  For performing this\n         operation the status command would be:\n\
    \            C ST Q <nl>\n      Notes to the Implementor\n   End\n      Purpose\
    \ of the End Command\n         The purpose of the End command is to communicate\
    \ that services\n         of the off-loaded protocol are not required.  The semantics\
    \ of\n         the End command depends upon whether it was issued by the Host\n\
    \         or the OPE.\n         - If the Host issues the End command, it means\
    \ the process in\n         the Host no longer requires the services of the offloaded\n\
    \         protocol.\n         - If the OPE issues the End command, it means the\
    \ remote entity\n         has no more data to send (e.g., the off-loaded protocol\
    \ is TCP\n         and the remote user has issued a TCP close).\n      Parameters\
    \ of the End Command\n         One parameter is associated with the End Command.\
    \  It indicates\n         whether the termination should be \"graceful\" or \"\
    abrupt\" (see\n         below).\n         Graceful/Abrupt\n            The Graceful/Abrupt\
    \ parameter indicates whether the End\n            should be handled gracefully\
    \ or abruptly.  If it is handled\n            gracefully, then data in transit\
    \ is allowed to reach its\n            destination before service is actually\
    \ terminated.  An\n            abrupt End occurs immediately; all data transmitted\
    \ from the\n            Host but still pending in the OPE is discarded, and no\
    \ new\n            incoming data is sent to the Host from the OPE.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            The parameter is indicated by a\
    \ single ASCII character.  The\n            character \"G\" denotes graceful,\
    \ and \"A\" denotes abrupt.  The\n            default value for this parameter\
    \ is graceful.\n      Responses\n         The following responses have been identified\
    \ for the End\n         command:\n            000    Command completed successfully\n\
    \            201    Command not appropriate\n            300    Problem with multiple\
    \ chunks\n            301    Syntax problem with Command\n            302    Illegal\
    \ Type of End Command\n            401    Protocol Interpreter in OPE not responding\n\
    \            402    Failure in remote protocol interpreter\n            403  \
    \  Failed; insufficient protocol interpreter resources\n            501    Failed;\
    \ insufficient OPE resources\n            601    Request violates security policy\n\
    \         Additionally, protocol idiosyncratic responses will be defined\n   \
    \      for each off-loaded protocol.\n      Example of End Command\n         The\
    \ syntax of the End command is relatively straightforward. It\n         consists\
    \ of a chunk that contains only a chunk usage\n         identifier, the end command\
    \ string, and the parameter\n         indicating whether the end should be graceful\
    \ or abrupt.  A\n         possible valid (abrupt) End command would be:\n    \
    \        C EN A <nl>\n      Notes to the Implementor\n         Once an End has\
    \ been issued in a given direction any other\n         commands on the channel\
    \ in the same direction are in error and\n         should be responded to appropriately.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   No-op\n      Purpose of the No-op Command\n\
    \         The No-op command performs no operation.  Its purpose is to\n      \
    \   permit the Host and OPE to participate in a dialog which does\n         not\
    \ alter the state of communication activities, both for\n         debugging purposes\
    \ and to support features of certain protocols\n         (e.g., Telnet's Are You\
    \ There command).\n      Parameters of the No-op Command\n         There are no\
    \ parameters associated with the No-op command.\n      Responses\n         There\
    \ are only two possible legal responses to the No-op\n         command.  They\
    \ are:\n            000    No-op Command Completed Correctly\n            300\
    \    Problem with multiple chunks\n      Example of No-op Command\n         Syntactically\
    \ the No-op command is quite simple.  It consists\n         of a chunk that contains\
    \ only the chunk usage identifier and\n         the string for the command, and\
    \ the newline.  One possible\n         valid No-op command is:\n            C\
    \ NO <nl>\n      Notes to the Implementor\n         No-ops are included for use\
    \ in testing and initial\n         synchronization.  (The latter use is not mandatory,\
    \ however.\n         That is, no exchange of No-ops is required at start-up time,\n\
    \         but it is conceivable that some implementations might want to\n    \
    \     do it just for exercise.) They are also traditional.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - 'Proposed Host-Front End Protocol

    '
- title: References
  contents:
  - "References\n   (References [1]-[3] will be available in M. A. Padlipsky's \"\
    The\n   Elements of Networking Style\", Prentice Hall, 1985.)\n   [1] Padlipsky,\
    \ M. A., \"The Host-Front End Protocol Approach\",\n   MTR-3996, Vol. III, MITRE\
    \ Corp., 1980.\n   [2] Padlipsky, M. A., \"The Elements of Networking Style\"\
    , M81-41,\n   MITRE Corp., 1981.\n   [3] Padlipsky, M. A., \"A Perspective on\
    \ the ARPANET Reference Model\",\n   M82-47, MITRE Corp., 1982.\n   [4] Bailey,\
    \ G., \"Network Access Protocol\", S-216,718, National\n   Security Agency Central\
    \ Security Service, 1982.\n   [5] Day, J. D., G. R. Grossman, and R. H. Howe,\
    \ \"WWMCCS Host to Front\n   End Protocol\", 78012.C-INFE.14, Digital Technology\
    \ Incorporated,\n   1979.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - 'Proposed Host-Front End Protocol

    '
- title: APPENDIX
  contents:
  - "APPENDIX\n   Per-Protocol Offloading Descriptions\n   1.  Command Level Interface\
    \ to an Off-loaded TCP\n      This appendix discusses the use of the commands\
    \ described in the\n      body of this document to provide an interface between\
    \ a Host\n      process and an off-loaded interpreter of the DoD's Transmission\n\
    \      Control Protocol (TCP).  The interface described here is\n      functionally\
    \ equivalent to the interface found in the MIL-STD 1778\n      specification of\
    \ TCP.  It is not, however, identical, in that some\n      features of the interface\
    \ are particularly relevant only in an\n      inboard implementation.\n      The\
    \ first section describes the mapping between the interface\n      events of MIL-STD\
    \ 1778 and the commands and responses of this\n      H-FP, and highlights the\
    \ unique features of the interface.  The\n      next sections discuss the details\
    \ of each command.  These details\n      include the specialized usages of the\
    \ command and the\n      protocol-idiosyncratic parameters for that command.\n\
    \      1.1.  Relation to MIL-STD 1778 Interface\n         Most of the requests\
    \ and responses of the TCP interface\n         specified in MIL-STD 1778 are mapped\
    \ directly to H-FP Commands\n         and responses.  The exceptions are noted\
    \ in the following\n         descriptions.\n         1.1.1. Requests\n       \
    \     Unspecified Passive Open, Fully Specified Passive Open,\n            Active\
    \ Open, and Active Open with Data requests are all\n            implemented using\
    \ variations of the Begin command.  The\n            distinction between Passive\
    \ and Active Open is made using\n            the Active/Passive parameter of Begin.\
    \  The distinction\n            between unspecified and fully specified lies in\
    \ the presence\n            or absence of the destination address fields.  An\
    \ active\n            open with data is identical to a normal active open, except\n\
    \            for the presence of data following the command.\n            The\
    \ Send Service Request is implemented using the Transmit\n            command.\
    \  Special protocol idiosyncratic parameters are\n            provided for Urgent,\
    \ Push, and changing the ULP timeout\n            action and values.  The response\
    \ to the Transmit command\n            indicates that the appropriate Send call\
    \ has been made.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            There is no corresponding response\
    \ in the specified TCP\n            interface; its only significance is that the\
    \ Host can issue\n            another Transmit command.\n            The Allocate\
    \ event is a specification feature of MIL-STD\n            1778 to indicate the\
    \ willingness of the user to accept\n            incoming data across the interface.\
    \  However, because this\n            is precisely the type of flow control provided\
    \ by the\n            Channel level, the Allocate event would be a superfluous\n\
    \            mechanism.  Thus, there is no direct analogy to that event\n    \
    \        in the H-FP interface. A Host process indicates its\n            willingness\
    \ to accept new data by informing the channel via\n            its flow control\
    \ interface (if it has an explicit one).\n            Close and Abort are provided\
    \ by the End command.  Close uses\n            the graceful version of the End\
    \ command, while Abort uses\n            the abrupt version.  The response indicates\
    \ that the End\n            command has been received and the corresponding Close\
    \ or\n            Abort was issued.  There is no corresponding response in the\n\
    \            specified TCP interface.\n            Status is provided by using\
    \ the query form of the Status\n            command.  The response to the Status\
    \ command contains the\n            information (see below).\n         1.1.2.\
    \ Responses\n            The Open Id response is provided so that the user has\
    \ a\n            shorthand name by which to refer to the connection.  With an\n\
    \            outboarded TCP interpreter, there is a one-to-one mapping\n     \
    \       between TCP connections and H-FP channels.  Hence, the Open\n        \
    \    Id event is not needed, since the channel ID is sufficient\n            to\
    \ indicate the desired connection.\n            The Open Failure and Open Success\
    \ responses are provided\n            using OPE-generated responses to Begin commands\
    \ (which\n            provide the Active and Passive Service response primitives)\n\
    \            issued by the Host.  The value of the response code\n           \
    \ indicates whether the Begin command succeeded or failed, and\n            can\
    \ be mapped to the appropriate Open Failure or Open\n            Success indication\
    \ by the Host.\n            Deliver is provided by having the OPE issue a Transmit\n\
    \            command.  As mentioned above, the \"flow control\" between the\n\
    \            TCP interpreter and the Host is provided by the Channel\n       \
    \     layer, so no explicit interface events are needed.  The\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            response to the Transmit command\
    \ indicates the data was\n            received by the Host process.  There is\
    \ no corresponding\n            response in the specified TCP interface.\n   \
    \         The Closing and Terminate service responses are provided\n         \
    \   using the End command. Closing is indicated using the\n            graceful\
    \ version of the command, while terminate is provided\n            using the abrupt\
    \ version.  The response indicates the End\n            command was received by\
    \ the Host process.  There is no\n            corresponding response in the specified\
    \ TCP interface.\n            Status Response is provided by a response to the\
    \ query\n            version of the Status command.  The status information is\n\
    \            communicated via protocol-idiosyncratic parameters following\n  \
    \          the Response code.\n            Error messages are reported using the\
    \ spontaneously\n            generated version of the Status command issued by\
    \ the OPE.\n            The error message is provided in a parameter.  The response\n\
    \            indicates the error message was received by the Host\n          \
    \  process.  There is no corresponding event in the specified\n            TCP\
    \ interface.\n      1.2.  The Begin Command\n         The Begin command is used\
    \ in TCP in three major ways:\n            1. To inform the OPE that a process\
    \ in the Host wishes to\n            open a connection to a particular port on\
    \ a internet\n            address.\n            2. To inform the OPE that a process\
    \ in the Host wishes to be\n            informed when a connection attempt is\
    \ made to any or to a\n            specific port at this Host's internet address.\n\
    \            3. To inform the Host that a connection attempt to the OPE\n    \
    \        has arrived, and there was no Begin of the second type\n            (passive\
    \ open) issued by the Host relevant to that\n            particular port.\n  \
    \       1.2.1. Specialized Usage\n            There are four major aspects to\
    \ the specialized usage of the\n            Begin command and its parameters.\
    \  These parameters are:\n               1. The meaning of the Mediation Level\
    \ parameter\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n               2. The selection of blocking\
    \ treatment of Transmit\n                  command\n               3. The meaning\
    \ of the address components\n               4. The selection of the TCP Active\
    \ Open with Data\n                  primitive.\n            The Mediation Level\
    \ parameter has only two possible values\n            when offloading TCP.  These\
    \ are \"9\" and \"0\".  The normal\n            usage of an off-loaded TCP uses\
    \ the value \"9\", which means\n            the Host is in no way involved in\
    \ the operation of TCP.  The\n            value \"0\" indicates the Host wishes\
    \ to negotiate with the\n            TCP options.\n            The normal TCP\
    \ Send event is non-blocking.  That is, when a\n            user issues the send\
    \ command, it counts on the reliability\n            services of TCP, and is not\
    \ explicitly notified when the\n            data has reached the other end of\
    \ the connection and been\n            properly acknowledged. Hence, the default\
    \ value for this\n            parameter with TCP is \"N\".  There are some applications\n\
    \            where the user may not wish to receive a response to a\n        \
    \    Transmit command until the data has been acknowledged by the\n          \
    \  other end of the connection.  In these cases, the value \"B\"\n           \
    \ should be used for this parameter.  If such a feature is not\n            supported\
    \ by the offloaded TCP interpreter, then it is\n            acceptable to issue\
    \ a 100 level Conditional acceptance\n            indicating that blocking is\
    \ not supported, but the Begin\n            command will proceed using non-blocking\
    \ Transmits.\n            The primary address components of the local and remote\n\
    \            addresses refer to the internet addresses of (or a symbolic\n   \
    \         Host name for) the respective Hosts.  The secondary\n            components\
    \ refer to the particular sockets at those internet\n            addresses.  Normally,\
    \ the secondary components (ports) are\n            specified numerically. They\
    \ may, however, be specified by\n            name if the port is a well-known\
    \ service port. In an Active\n            Begin command, the remote addresses\
    \ primary and secondary\n            components must be specified.  The local\
    \ address components\n            need not be specified, unless the user wishes\
    \ to indicate\n            that the connection should be from a particular port\
    \ or a\n            particular internet address of a multi-homed Host.  In a\n\
    \            Passive Begin command, the remote addresses are specified\n     \
    \       only if connection attempts from one particular Host are of\n        \
    \    interest.  The local address secondary component must be\n            used\
    \ to indicate on which port to perform the Listen.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            The way the TCP Active Open with\
    \ data is provided is by\n            including the data with the Begin Command.\
    \  This data is\n            included in the same Channel level chunk, immediately\n\
    \            following the newline.  If the data is more than a single\n     \
    \       chunk can hold, then the multi-chunk command feature of the\n        \
    \    H-FP must be used.\n         1.2.2. Protocol-Idiosyncratic Parameters\n \
    \           The protocol-idiosyncratic parameter identified for the TCP\n    \
    \        interface is the \"ULP timeout\" information.  This\n            information\
    \ includes whether the offloaded interpreter\n            should abort the connection\
    \ on a ULP timeout or report it to\n            the inboard user, and also the\
    \ numerical value of the\n            timeout interval. The format chosen for\
    \ this parameter is a\n            single letter followed immediately (with no\
    \ spaces) by an\n            ASCII number. The letter can be either \"R\" or \"\
    A\", and\n            indicates that the ULP timeout should cause a report or\
    \ an\n            abort, respectively. The number is interpreted to be the\n \
    \           timeout interval in seconds.\n         1.2.3. Examples of the Command\n\
    \            An example of an Active Begin command that might be issued\n    \
    \        by an inboard user Telnet is:\n               C BE TCP A ISIA 9 N 23\
    \ ,, 60 R 0 -pi R120 <nl>\n            ISIA is the destination Host, 23 is the\
    \ well-known port\n            number for Telnet connections, a Begin timeout\
    \ of 60 seconds\n            was chosen.  The desired type of service is to strive\
    \ for\n            good response time, the transmissions are expected to be in\n\
    \            small units, and protocol-idiosyncratic parameter R120\n        \
    \    implies that a ULP timeout of 120 seconds should be\n            reported.\n\
    \            An example of a Passive Begin Command that might be issued\n    \
    \        by an inboard server Telnet is:\n               C BE TCP P ,, 9 N ,,\
    \ 23 ,, R 0 -pi R120 <nl>\n            The major differences are that no remote\
    \ address components\n            are specified, and the local secondary address\
    \ component is\n            identified as the socket on which the Listen is being\n\
    \            performed.  Also, the default (\"infinite\") timeout is taken.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      1.3.  The Transmit Command\n        \
    \ The Transmit command is used by the Host process to instruct\n         the off-loaded\
    \ TCP interpreter to send data to a remote site\n         via the TCP connection\
    \ associated with the command's channel.\n         It is used by the OPE to deliver\
    \ incoming data from the\n         connection to the process in the Host.\n  \
    \       1.3.1. Specialized Usage\n            The Transmit command must be capable\
    \ of providing all the\n            specialized features of the Send and Deliver\
    \ Event.  These\n            special features are Urgent, Push, and modification\
    \ of the\n            ULP Timeout action and/or interval.\n            Urgent\
    \ is a means to communicate that some point upcoming in\n            the data\
    \ stream has been marked as URGENT by the sender.\n            While the actual\
    \ Urgent bit travels through the connection\n            out-of-band, it carries\
    \ a pointer that is related to the\n            sequence numbers of the in-band\
    \ communication. Hence, the\n            urgency must be indicated in the Transmit\
    \ command rather\n            than the Signal command.\n            Push is a\
    \ feature of the TCP Send Event that is used to\n            indicate that the\
    \ data in the Transmit command should be\n            sent immediately (within\
    \ the flow control constraints),\n            rather than waiting for additional\
    \ send commands or a\n            timeout.  Push is indicated in the Transmit\
    \ Command. The\n            push feature has the same meaning when sent from the\
    \ OPE to\n            the Host.  If the Host implementation does no internal\n\
    \            queuing, the flag has no meaning.\n            The TCP Send event\
    \ permits the user to modify the \"ULP\n            timeout action\" and/or the\
    \ \"ULP timeout interval\" associated\n            with that connection.  When\
    \ changed, the new values take\n            effect for the remainder of the connection,\
    \ unless changed\n            later with another Send.  This feature is provided\
    \ in this\n            H-FP using the Transmit Command.\n         1.3.2. Protocol-Idiosyncratic\
    \ Parameters\n            The three features identified above are provided using\n\
    \            protocol-idiosyncratic parameters.\n            The first such parameter\
    \ is the Urgent parameter.  From the\n            point of view of the interface,\
    \ it is just a flag that\n            indicates the data is urgent (the actual\
    \ Urgent pointer is a\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            concern of the off-loaded TCP interpreter,\
    \ which is keeping\n            track of the sequence numbers).  When issued by\
    \ the Host\n            process, the Urgent flag means the stream should be marked.\n\
    \            When issued by the OPE, it means the receiver should go to\n    \
    \        (or remain in) the Urgent receive mode.  If the flag is not\n       \
    \     set in the Transmit issued by the OPE, then the receiver\n            should\
    \ remain in (or return to) the non-urgent receive mode.\n            The value\
    \ of this protocol-idiosyncratic parameter is \"U\" if\n            the Urgent\
    \ is set, or \"N\" if it is not set.  The default\n            value for this\
    \ parameter is \"N\".  Since this parameter is\n            the first protocol-idiosyncratic\
    \ parameter for the Transmit\n            command, it requires no special flag,\
    \ and can be indicated\n            using the flag -pi.\n            The second\
    \ protocol-idiosyncratic parameter is the Push\n            flag.  This parameter\
    \ is only issued by the Host, since\n            there is no Push in the TCP Deliver\
    \ event.  Its value is \"P\"\n            for push, or \"N\" for normal.  The\
    \ default value of this\n            parameter is \"N\".  Its control flag is\
    \ -pu.\n            The third protocol-idiosyncratic parameter is the ULP\n  \
    \          timeout action and value parameter.  The action part\n            indicates\
    \ whether the offloaded interpreter should abort the\n            connection on\
    \ a timeout or report it to the inboard user.\n            The value part is the\
    \ numerical value of the timeout\n            interval.  The format used for this\
    \ parameter is the same as\n            in the Begin command, which is a single\
    \ letter followed\n            immediately (with no spaces) by an ASCII number.\
    \  The letter\n            can be either \"R\" or \"A\", and indicates that the\
    \ ULP timeout\n            should cause a report or an abort, respectively.  The\
    \ number\n            is interpreted to be the timeout interval in seconds.  The\n\
    \            default interpretation for this parameter is its previous\n     \
    \       value. The control flag for this parameter is -ul.\n         1.3.3. Examples\
    \ of the Command\n            An example of a Transmit command issued by a Host\
    \ process is\n               C TR -pi N P R160 <nl> <DATA>\n            where\
    \ <DATA> is the data contained within the chunk.  This\n            command is\
    \ for a non-urgent but pushed TCP Send event, that\n            also resets the\
    \ timeout action and interval to Report with a\n            value of 160 seconds.\
    \ The response mode (i.e., nonblocking)\n            is derived from the Begin\
    \ command and not effected by\n            transmit.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            An example of a Transmit command\
    \ issued by the OPE is\n               C TR -pi N <nl> <DATA>\n            where\
    \ <DATA> is the data contained within the chunk.  This\n            command is\
    \ for a non-urgent delivery (presumably, after a\n            previous Urgent\
    \ delivery).\n      1.4.  The Condition Command\n         The Condition command\
    \ is used to modify the transmission\n         characteristics of the connection.\
    \  The parameters that make\n         sense to modify with TCP are the Transmit\
    \ Response discipline,\n         the Type of Service, and the Flow Control Advice.\n\
    \         1.4.1. Specialized Usage\n            There is no usage of the Condition\
    \ command with an offloaded\n            TCP interpreter that is particularly\
    \ specialized.\n         1.4.2. Protocol-Idiosyncratic Parameters\n          \
    \  There are no protocol-idiosyncratic parameters for the\n            condition\
    \ command for the off-loaded TCP. It would be\n            possible for the ULP\
    \ timeout action values to be changed\n            with a condition command. \
    \ However, this is accomplished\n            with the Transmit command, which\
    \ more closely models the\n            interface specified in MIL-STD 1778.  We\
    \ propose that the\n            condition command not provide this capability.\n\
    \         1.4.3. Examples of the Command\n            An example of the Condition\
    \ command to change the flow\n            control advice for a connection is\n\
    \               C CO -fc 1 <nl>\n            which indicates that relatively small\
    \ transmission units are\n            now expected.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      1.5.  The Signal Command\n         As\
    \ we currently understand it, TCP's URGENT feature provides an\n         INband\
    \ signal rather than a true out-of-band signal (and at\n         least one of\
    \ us deeply regrets this).  The actual URGENT bit is\n         sent out-of-band,\
    \ but it contains an URGENT pointer which\n         relates the URGENT to its\
    \ position in the data stream.  The\n         actual semantics of the URGENT is\
    \ left to the higher level\n         protocol (e.g., Telnet says to discard all\
    \ data up to the\n         URGENT pointer).  Since the Signal command is allowed\
    \ to cross\n         a pending Transmit in the H-FP channel, it would be potentially\n\
    \         dangerous to implement the interface to TCP URGENT using the\n     \
    \    Signal command since the wrong sequence number could be used as\n       \
    \  the urgent pointer.  Barring persuasive arguments to the\n         contrary,\
    \ it is proposed that Signal should not be used with\n         TCP.\n      1.6.\
    \  The Status Command\n         The Status command maps directly into the TCP\
    \ Status event when\n         issued by a Host process. It is also used for the\
    \ TCP error\n         event when issued by the OPE.  There is currently some question\n\
    \         as to how information from lower protocol levels (e.g., ICMP\n     \
    \    error messages) should be reported to TCP users. When these\n         issues\
    \ are resolved, there may be other uses for the Status\n         command.  We\
    \ solicit other ideas for the Status command with\n         this report.\n   \
    \      1.6.1. Specialized Usage\n            The major specialized usage of the\
    \ Status command is to\n            provide the error reporting service.  This\
    \ usage is a form\n            of the Status generated by the OPE.\n         1.6.2.\
    \ Protocol-Idiosyncratic Parameters\n            When used as a TCP Status request\
    \ (command issued by the\n            Host process), there are no protocol-idiosyncratic\n\
    \            parameters associated with the Status command.  The OPE\n       \
    \     response codes the TCP status.\n            When used as a TCP error report\
    \ (command issued by the OPE),\n            there is one protocol-idiosyncratic\
    \ parameter associated\n            with the Status command.  It is an error description\
    \ in the\n            form of a text string. It requires no special control flag\n\
    \            since the flag -pi is unambiguous and there are no other\n      \
    \      protocol-idiosyncratic parameters.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         1.6.3. Examples of the Command\n \
    \           An example of the Status command issued by the Host process\n    \
    \        to request status information is\n               C ST Q <nl>\n      \
    \      The status information is returned in the response to the\n           \
    \ status command.\n            An example of the Status command issued by the\
    \ OPE to report\n            an error from the TCP interpreter is\n          \
    \     C ST R -pi \"Connection already exists\" <nl>\n            which is issued\
    \ when a TCP open (HFP Begin) is issued to an\n            already opened (foreign)\
    \ connection.\n      1.7.  The End Command\n         The End command is used to\
    \ indicate that TCP services are no\n         longer required.  Thus, it can be\
    \ mapped into either the TCP\n         Graceful Close or the TCP Abort events.\
    \  It is also used as the\n         TCP Closing response (as contrasted with the\
    \ response by the\n         OPE to the close command), when issued by the OPE.\n\
    \         1.7.1. Specialized Usage\n            Because of the nature of the two-way\
    \ close provided by TCP,\n            there is a possibility that the Host and\
    \ the OPE wish to\n            gracefully terminate the connection at the same\
    \ instant.  If\n            this happens, then both the Host and the OPE would\
    \ issue End\n            commands at the same time.  To be prepared for this,\
    \ it is\n            necessary to make this the normal graceful closing sequence.\n\
    \            In other words, both the Graceful Close request and the\n       \
    \     Closing response are mapped to End commands, and the\n            response\
    \ to one of those commands only indicates that the\n            command has been\
    \ received and executed, but not that the\n            connection is actually\
    \ fully closed.  The connection is\n            gracefully closed when both End\
    \ commands have been issued,\n            and both successful responses have been\
    \ received.\n            With an abrupt end, a two-way exchange is not necessary.\n\
    \            Only the Host or the OPE need issue it, for the connection\n    \
    \        to be aborted.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         1.7.2. Protocol-Idiosyncratic Parameters\n\
    \            There are no protocol-idiosyncratic parameters for the End\n    \
    \        command used with TCP.\n         1.7.3. Examples of the Command\n   \
    \         An example of the End command used to indicate either a TCP\n      \
    \      Close request (from the Host process) or TCP Closing\n            response\
    \ (from the OPE) is\n               C EN G <nl>\n            An example of the\
    \ End command used as an Abort request (from\n            the Host process) or\
    \ as a Terminate response is\n               C EN A <nl>\n   2.  Command Level\
    \ Interface to an Off-loaded Telnet\n      This appendix is provided to discuss\
    \ the use of the commands\n      described in the body of this document to provide\
    \ an interface\n      between a Host process and an off-loaded interpreter of\
    \ the Telnet\n      protocol.\n      The interface described here is not based\
    \ on a formal interface.\n      There are several reasons for this, including\
    \ the lack of a widely\n      accepted standard interface to Telnet, and its headerless\
    \ nature.\n      Consequently, the interface described here is very similar to\
    \ the\n      actual Telnet data stream.\n      2.1.  The Begin Command\n     \
    \    The Begin command is used with Telnet to initiate Telnet\n         connections.\n\
    \         2.1.1. Specialized Usage\n            There are three major specialized\
    \ usages to the Begin\n            command.  They are the meaning of the Mediation\
    \ Level\n            parameter, the way the number of incoming Telnet connections\n\
    \            are supported, and the meaning of the secondary address\n       \
    \     components.\n            The mediation level is used in Telnet to control\
    \ which of\n            the various Telnet activities are performed by the OPE,\
    \ and\n            which are controlled by the Host.  It has been determined\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            that all monitoring of the Telnet\
    \ Socket should be performed\n            by the OPE.  Mediation level 9, which\
    \ is the default,\n            indicates the Host desires to play no role in Telnet\n\
    \            operation. Level 5 means that protocol-idiosyncratic\n          \
    \  parameters to this Begin command indicate which incoming\n            options\
    \ the Host wishes to handle; all other options, and\n            all NVT translations,\
    \ are to be performed by the OPE. Level\n            0 indicates that the Host\
    \ will handle all options, while all\n            NVT translations are to be performed\
    \ in the OPE (see Section\n            B.1.3).\n            The Host can either\
    \ accept the connections by fielding OPE\n            generated Begins, or by\
    \ issuing passive Begins to the OPE.\n            The Host may wish to restrict\
    \ the number of incoming Telnet\n            connections that it will handle at\
    \ any particular time.  It\n            can do this by rejecting OPE-generated\
    \ Begins above a\n            certain number, or by limiting the number of Host-issued\n\
    \            passive Begins.  However, precedence constraints dictate\n      \
    \      that the Host actually issue additional passive Begins or\n           \
    \ accept additional Begins from the OPE beyond the maximum\n            number\
    \ it is normally willing to support, so that\n            high-priority service\
    \ requests can be accommodated, possibly\n            by preempting lower priority\
    \ activities.\n            The secondary address component is used to refer to\
    \ specific\n            ports. Normally, they are used only when the standard\
    \ or\n            default ports are not used, such as special purpose\n      \
    \      applications or testing.\n         2.1.2. Protocol-Idiosyncratic Parameters\n\
    \            The protocol-idiosyncratic parameters to the Telnet Begin\n     \
    \       command are the identifiers for the options which the host\n         \
    \   wishes to negotiate when using mediation level 5.  On other\n            mediation\
    \ levels, these parameters are not used.\n         2.1.3. Examples of the Command\n\
    \            An example of a passive Begin for an outboard Telnet\n          \
    \  protocol is:\n               C BE TEL P ,, 5 N -fc 0 -pi 9 <nl>\n         \
    \   Where the parameters are:\n               TEL   Code for the Telnet Protocol\n\
    \               P     Passive Begin\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n               ,,    Skip the Foreign Address\
    \ Primary Component\n               5     Mediation Level is 5\n             \
    \  N     Non Blocking Transmits\n               -fc   Skips over parameters up\
    \ to Flow Control Advice\n               S     Small Blocks are appropriate for\
    \ Telnet\n               -pi   Skips over parameters to the Protocol Idiosyncratic\n\
    \                     List of Options to be Handled by the Host.\n           \
    \    9     Option Code for Line Length Option\n            Here, no remote address\
    \ component was specified, since the\n            Host will accept connections\
    \ from any Host.  Similarly, no\n            local addresses are specified, since\
    \ the default well-known\n            socket for this Host is to be used.  In\
    \ this example, the\n            Host specifies it will handle the line length\
    \ option (number\n            9).  Other options are handled in the OPE.\n   \
    \         An example of an active Begin for an outboard Telnet\n            protocol\
    \ is:\n               C BE TEL A ISIA 5 N -fc 0 -pi 9 <nl>\n            This command\
    \ is identical to the passive command, except\n            that a remote primary\
    \ address component is specified to\n            identify the intended Host. \
    \ No remote secondary component\n            is specified, since the well-known\
    \ socket at that Host is to\n            be used.  No local secondary address\
    \ components are\n            specified, since the connection can originate from\
    \ any\n            available socket of the appropriate type selected by the\n\
    \            OPE.\n      2.2.  The Transmit Command\n         The Transmit Command\
    \ is used to send data across a Telnet\n         connection.\n         2.2.1.\
    \ Specialized Usage\n            The Transmit command is used to transmit data\
    \ over the\n            Telnet connection.  There is one specialized aspect of\
    \ the\n            Transmit command used with an outboard Telnet interpreter.\n\
    \            This is the provision of the Go Ahead feature of Telnet that\n  \
    \          supports half-duplex devices.\n            Go Ahead is provided as\
    \ a protocol idiosyncratic parameter\n            to the Transmit.  It is only\
    \ used if the Host will support\n            it, however.  It is our opinion that\
    \ Go Ahead is probably\n            not a proper thing for the default case.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            Go Aheads are a matter between\
    \ the Host and the terminal. It\n            is difficult to offload the generation\
    \ of Go Aheads to the\n            OPE, since the OPE is not really cognizant\
    \ of the semantics\n            of the communication between the Host and the\
    \ terminal.\n            Hence, the OPE does not know when the Host is done\n\
    \            transmitting and willing to pass \"the turn\" back to the\n     \
    \       terminal. Similarly when the remote site relinquishes\n            control,\
    \ the OPE includes Go Ahead in its TR.\n            We don't believe this Go Ahead\
    \ problem to be an indictment\n            against outboard processing.  It merely\
    \ illustrates that\n            functionality not found in a Host cannot necessarily\
    \ be\n            provided by the OPE.  Hence, we provide this note to the\n \
    \           implementor:  if the Host cannot generate the\n            protocol-idiosyncratic\
    \ Go Ahead parameter, then the DO\n            Suppress Go Ahead must be issued\
    \ immediately after the\n            connection is established.\n         2.2.2.\
    \ Protocol Idiosyncratic Parameters\n            The protocol idiosyncratic parameter\
    \ is the Go Ahead\n            indicator.  When present, the character \"G\" is\
    \ used to mean\n            the Go Ahead can be sent to the other end of the connection,\n\
    \            but only after the data associated with that Transmit\n         \
    \   command is sent.  When the character is any other value, or\n            is\
    \ absent, the Go Ahead should not be sent.\n         2.2.3. Examples of the Command\n\
    \            An example of the Transmit command is:\n               C TR -pi G\
    \ <nl> <DATA>\n            With this command, the Go Ahead is passed to the other\
    \ side\n            after the data is sent.\n      2.3.  The Condition Command\n\
    \         The Condition command is used with Telnet to modify the\n         Transmission\
    \ characteristics and to enable or disable Telnet\n         options on a Telnet\
    \ connection.\n         2.3.1. Specialized Usage\n            The Condition command\
    \ takes on specialized usage with\n            Telnet, in addition to its normal\
    \ usage.  It is used to\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            control the option selection and\
    \ negotiation process, when\n            such selection is performed by the Host\
    \ (currently, this is\n            done at mediation levels 5 and 1, but not at\
    \ level 9).\n            A set of protocol-idiosyncratic parameters has been defined\n\
    \            for this purpose.  They are based heavily on the Telnet\n       \
    \     negotiation and subnegotiation mechanisms.  For simple\n            negotiations\
    \ there are two parameters, a negotiation type\n            (from the set {DO,\
    \ DONT, WILL, WONT}) followed by the code\n            (numeric) or name (symbolic)\
    \ for the desired option.  The\n            codes for the options are identified\
    \ below.  A basic\n            difference between the H-FP interface to Telnet\
    \ and the\n            internal Telnet protocol is that additional parameters\
    \ are\n            included with the request (DO or WILL). The Telnet protocol\n\
    \            subnegotiation is used internally to communicate that\n         \
    \   information in the Telnet data stream.  Option-specific,\n            protocol-idiosyncratic\
    \ parameters are used for these\n            additional parameters.\n        \
    \    Both the Host and the OPE can issue these Condition\n            commands.\
    \ When issued by the Host, it means the user wishes\n            to enable or\
    \ disable a particular option. The OPE proceeds\n            to issue the appropriate\
    \ negotiation commands (i.e., IAC\n            <DO> <code>) in the Telnet data\
    \ stream.  When the results of\n            the option negotiation are available,\
    \ a response is\n            generated by the OPE.  For the types DO and WILL,\
    \ a 000\n            Response indicates the appropriate acceptance (WILL or DO,\n\
    \            respectively). A nonzero Response code may indicate\n           \
    \ negotiation failure or negotiation rejection (among other\n            things).\
    \  For the types DONT and WONT, a 000 Response\n            indicates the option\
    \ will be disabled.  A negotiation\n            rejection should not be expected\
    \ in those cases.\n            When the Condition command is issued by the OPE,\
    \ it means\n            the other end of the connection is negotiating a change.\n\
    \            Here the response from the Host indicates the Host's desired\n  \
    \          action for the option negotiation.  Again, valid requests to\n    \
    \        disable options (DONT and WONT requests) should always get a\n      \
    \      000 Response.\n         2.3.2. Protocol-Idiosyncratic Parameters\n    \
    \        There are two protocol-idiosyncratic parameters for primary\n       \
    \     negotiation using the Condition command.  These are the\n            negotiation\
    \ type and the option code.  The negotiation type\n            is one of the set\
    \ of {DO, DONT, WILL, WONT}.  The option\n            code is a numeric value\
    \ used to identify the particular\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            option being negotiated.  The values\
    \ for these codes are\n            indicated here, but are identical to the codes\
    \ used in the\n            actual Telnet negotiation.  The codes are:\n      \
    \         Option Name     Option Code       Short Name\n               Transmit\
    \ Binary           0       Binary\n               Echo                      1\
    \       Echo\n               Suppress Go-Ahead         3       SuppressGA\n  \
    \             Approximate Message Size  4       NAMS\n               Status  \
    \                  5       Status\n               Timing Mark               6\
    \       TimingMark\n               RCTE                      7       RCTE\n  \
    \             Line Length               8       LineLength\n               Page\
    \ Size                 9       PageSize\n               Carriage Return Disp \
    \    10       CRDisp\n               Horizontal Tabstops      11       HTabStops\n\
    \               Horizontal Tab Disp      12       HTabDisp\n               Formfeed\
    \ Disposition     13       FFDisp\n               Vertical Tabstops        14\
    \       VTabStops\n               Vertical Tab Disposition 15       VTabDisp\n\
    \               Linefeed Disposition     16       LFDisp\n               Extended\
    \ ASCII           17       ExASCII\n               Logout                   18\
    \       Logout\n               Data Entry Terminal      20       DET\n       \
    \        Terminal Type            24       TermType\n               Extended options\
    \ list   255       ExOptions\n            Options not listed here may of course\
    \ be used. The code\n            number should be the same as the option code\
    \ used in Telnet\n            negotiation.\n            2.3.2.1.  Simple Options\n\
    \               Options that do not require additional parameters use the\n  \
    \             simple negotiation mechanisms described briefly above and\n    \
    \           in greater detail in the Telnet documentation.  No\n             \
    \  additional parameters are required.  These options\n               include\
    \ the Transmit Binary, Echo, Suppress Go Ahead,\n               Status, Timing\
    \ Mark, and Logout options.\n            2.3.2.2.  Approximate Message Size Option\n\
    \               The Approximate Message Size option requires two\n           \
    \    parameters. The first indicates whether the approximate\n               message\
    \ size being negotiated applies to the local or the\n               remote end\
    \ of the connection.  DS means the size applies\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n               to the sender of the command\
    \ (i.e., if the Host issues\n               the command, DS means the local end\
    \ of the connection;\n               if issued by the OPE, DS means the remote\
    \ end of the\n               connection).  DR means the size applies to the receiver\n\
    \               of the command (i.e., if the Host issues the command, DR\n   \
    \            means the remote end;  if issued by the OPE, DR means the\n     \
    \          local end of the connection).  This convention is\n               consistent\
    \ with the Telnet subnegotiation mechanisms.\n               The second character\
    \ is an ASCII encoded numeric value,\n               which is a character count\
    \ of the message size.\n         2.3.3. Line Width and Page Size Options\n   \
    \         The Line Width and Page Size Options require two additional\n      \
    \      parameters.  The first indicates whether the line width or\n          \
    \  page size being negotiated applies to the local or the\n            remote\
    \ end of the connection, and uses the DS and DR\n            convention described\
    \ above.  The second parameter is an\n            ASCII encoded numeric value,\
    \ which is interpreted as follows\n            (assuming the Condition command\
    \ was issued by the Host):\n               0         The Host requests that it\
    \ handle length or size\n                         considerations for the direction\
    \ indicated by\n                         the first parameter.\n              \
    \ 1 to 253  The Host requests that the remote end handle\n                   \
    \      the size or length considerations for the\n                         direction\
    \ indicated by the first parameter, but\n                         suggests that\
    \ the value indicated be used as\n                         the size or length.\n\
    \               254       The Host requests that the remote end handle\n     \
    \                    the size or length considerations for the\n             \
    \            direction indicated by the first parameter, but\n               \
    \          suggests that the size or length be considered\n                  \
    \       to be infinity.\n               255       The Host requests that the remote\
    \ end handle\n                         the tabstop considerations, and suggests\n\
    \                         nothing about what the value should be.\n          \
    \  If the Condition command is issued by the OPE, then the\n            roles\
    \ of the Host and the remote end are reversed.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n         2.3.4. Tabstop Options\n         \
    \   The Horizontal and Vertical Tabstops options require two\n            option\
    \ specific parameters.  The first is either DR or DS,\n            as was described\
    \ previously.  The second is a list of one or\n            more ASCII encoded\
    \ numeric values separated by spaces which,\n            assuming the Condition\
    \ command is issued by the Host, are\n            individually interpreted as:\n\
    \               0         The Host requests that it handle tabstops for\n    \
    \                     the direction indicated by the first parameter.\n      \
    \         1 to 250  The Host requests that the remote end handle\n           \
    \              the tabstop considerations for the direction\n                \
    \         indicated by the first parameter, but suggests\n                   \
    \      that the value(s) indicated should be used as\n                       \
    \  the tabstops.\n               255       The Host requests that the remote end\
    \ handle\n                         the tabstop considerations for the direction\n\
    \                         indicated by the first parameter, and suggests\n   \
    \                      nothing about what the value should be.\n            If\
    \ the Condition command is issued by the OPE, then the\n            roles of the\
    \ Host and the remote end are reversed.\n         2.3.5. Character Disposition\
    \ Options\n            The Carriage Return Disposition option, the Horizontal\
    \ Tab\n            Disposition option, the  Formfeed Disposition option, the\n\
    \            Vertical Tab Disposition option, and the Linefeed\n            Disposition\
    \ option are all considered character disposition\n            options from the\
    \ perspective of H-FP.  Two option-specific\n            parameters are required\
    \ for the character disposition\n            options.  The first is the DR or\
    \ DS code, which was\n            described previously. The second is a single\
    \ ASCII encoded\n            numeric value, which is interpreted as (assuming\
    \ that the\n            Host issued the Condition command):\n               0\
    \         The Host requests that it handle the character\n                   \
    \      disposition for this connection.\n               1 to 250  The Host suggests\
    \ that the remote end handle\n                         the character disposition\
    \ considerations, but\n                         suggests that the value indicated\
    \ should be\n                         taken as the number of nulls which should\
    \ be\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n                         inserted in the data\
    \ stream following the\n                         particular format character being\n\
    \                         subnegotiated.\n               251       The Host suggests\
    \ that the remote end handle\n                         the character disposition\
    \ considerations, but\n                         recommends that it replace the\
    \ character with\n                         some simplified character similar to\
    \ but not\n                         identical with it (e.g., replace a tab with\
    \ a\n                         space, or a formfeed with a newline).\n        \
    \       252       The Host suggests that the remote end handle\n             \
    \            the character disposition considerations, but\n                 \
    \        recommends that it discard the character.\n               253       The\
    \ Host suggests that the remote end handle\n                         the character\
    \ disposition, but recommends that\n                         the effect of the\
    \ character be simulated using\n                         other characters such\
    \ as spaces or linefeeds.\n               254       The Host suggests that the\
    \ remote end handle\n                         the character disposition considerations,\
    \ but\n                         recommends that it wait for additional data\n\
    \                         before sending more data.\n               255      \
    \ The Host suggests that the remote end handle\n                         the tabstop\
    \ considerations, and suggests\n                         nothing about what the\
    \ value should be.\n            Some of the codes between 251 and 254 are not\
    \ used with some\n            character disposition options. Refer to the ARPANET\n\
    \            documentation for additional details.\n            If the Condition\
    \ command is issued by the OPE, then the\n            roles of the Host and the\
    \ remote end are reversed.\n            2.3.5.1.  RCTE Option\n              \
    \ The Remote Controlled Transmission and Echoing option\n               requires\
    \ parameters to indicate the sets of break\n               characters and transmit\
    \ characters.  There are two\n               option-idiosyncratic parameters for\
    \ RCTE.  The first is a\n               list of the character classes that make\
    \ up the set of\n               break characters, as defined in the RCTE documentation.\n\
    \               The second is a list of character classes that make up\n     \
    \          the set of transmit characters, as defined in the RCTE\n          \
    \     documentation.  Since the two classes are optional and\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n               can be of arbitrary length,\
    \ it is necessary to precede\n               each list with a -bc (break characters)\
    \ or -tc (transmit\n               characters). The character classes are defined\
    \ as\n                  1 Upper Case Letters   A through Z\n                 \
    \ 2 Lower Case Letters   a through z\n                  3 Digits  0 through 9\n\
    \                  4 Format effectors  <BS> <CR> <LF> <FF> <HT> <VT>\n       \
    \           5 Non-format control codes, plus <ESC> and <DEL>\n               \
    \   6 Punctuation  . , ; : ? !\n                  7 Grouping    { [ ( < > ) ]\
    \ }\n                  8 Misc  ' ` \" / \\ % @ $ &   + - * = ^ _ | ~\n       \
    \           9 <space>\n            2.3.5.2.  Extended Option List\n          \
    \     The Extended Option List option requires a parameter to\n              \
    \ carry the number of the option on the extended list.\n               There is\
    \ thus one option specific parameter to the\n               Condition command\
    \ when used for this purpose, which is\n               the number of the option\
    \ on the extended option list.  It\n               can be expressed in ASCII using\
    \ an octal, decimal, or\n               hexadecimal format.\n            2.3.5.3.\
    \  Terminal Extension Options\n               The Extended ASCII, SUPDUP, and\
    \ Data Entry Terminal\n               options of Telnet were all attempts to extend\
    \ the basic\n               capabilities of the Telnet data stream beyond the\
    \ simple,\n               scroll mode terminal model that was the basis of the\n\
    \               original Telnet design.\n               All of these options have\
    \ limitations to their\n               effectiveness.  The Extended ASCII option\
    \ lacks a\n               standardized interpretation of the bit patterns into\n\
    \               extended ASCII characters.  The SUPDUP effort was\n          \
    \     actually an independent mode where a different virtual\n               terminal\
    \ protocol was used, and the option was there\n               merely to switch\
    \ to and from this protocol. The Data\n               Entry Terminal option requires\
    \ the excessive overhead of\n               subnegotiation for each use of extended\
    \ features.  All of\n               these options lack the more valuable asset\
    \ of widespread\n               implementation and use.\n               The way\
    \ these options should be handled is not detailed\n               in this appendix.\
    \ It is clear that the Condition command\n               could be used for initiating\
    \ and terminating the use of\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n               these options.  The actual transmission\
    \ of characters\n               related to the extended terminal features should\
    \ be\n               provided by the Transmit command, either as part of the\n\
    \               normal Host-to-OPE data stream or by using\n               protocol-idiosyncratic\
    \ parameters.\n               A more recent option, the Terminal Type option,\
    \ should be\n               mentioned here.  It permits one end of a connection\
    \ to\n               request information about the terminal at the other end\n\
    \               or send information about the terminal at the local end.\n   \
    \            This is convenient for systems that provide a wide\n            \
    \   variety of terminal support, but it clearly does not\n               follow\
    \ the model of reducing the MxN problem by use of a\n               virtual terminal.\
    \ Its use is very straightforward in the\n               H-FP context.  It only\
    \ requires sending the terminal type\n               to the other end, and activating\
    \ the Binary Transmission\n               Option.\n            2.3.5.4.  Status\
    \ Option\n               The Status option is enabled using the negotiation\n\
    \               mechanism of Telnet.  However, the means to transfer\n       \
    \        status information between OPE and the Host is provided\n           \
    \    via the Status command.  Therefore, details of status\n               negotiation\
    \ are irrelevant to the interface to the\n               outboard Telnet.\n  \
    \       2.3.6. Examples of the Command\n            The following example shows\
    \ the command issued by a Host to\n            the OPE, requesting that the OPE\
    \ negotiate with the other\n            side so that remote echo is performed.\n\
    \               C CO -pi DO 1 <nl>\n            The numeral 1 is the option code\
    \ for ECHO from the table\n            above. All of the simple options listed\
    \ above use this same\n            basic format.\n            The options with\
    \ additional parameters use straightforward\n            extensions of this syntax.\
    \  For example, a possible usage of\n            Condition by the Host to set\
    \ the approximate message size\n            is:\n               C CO -pi DO 4\
    \ DS 1024\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n            The 4 is the Option Code for the\
    \ Approximate Message Size\n            option, the DS indicates that Host's message\
    \ size should be\n            set, and 1024 is the desired size.\n      2.4. \
    \ The Signal Command\n         The Signal command is used with Telnet to provide\
    \ the Telnet\n         Interrupt Process and Abort Output services.\n        \
    \ 2.4.1. Specialized Usage\n            The Signal command is used with an outboard\
    \ Telnet\n            interpreter to interface to the Telnet synch mechanism.\n\
    \            This mechanism is used with a protocol-idiosyncratic\n          \
    \  parameter, which indicates what particular command is being\n            \"\
    synched.\" It is expected that normally, this Signal\n            mechanism will\
    \ only be used with the Interrupt Process and\n            Abort Output Telnet\
    \ signals.  When the Signal command is\n            issued by the Host, it goes\
    \ through the Channel\n            (out-of-band) to the OPE, where the Telnet\
    \ interpreter\n            issues the corresponding Telnet signal and synch sequence.\n\
    \            When such a sequence is received by the OPE, it immediately\n   \
    \         issues a Signal to the Host.  It is expected that a Host or\n      \
    \      OPE would not, in general, reject the Signal command unless\n         \
    \   it is badly formed.\n         2.4.2. Protocol-Idiosyncratic Parameters\n \
    \           The Telnet protocol-idiosyncratic parameter used with the\n      \
    \      Signal command identifies which Telnet signal is begin\n            issued.\
    \  Normally, it would have the value of either \"IP\" or\n            \"AO\",\
    \ for Interrupt Process or Abort Output.  If absent, the\n            default\
    \ value is \"IP\".\n         2.4.3. Examples of the Command\n            An example\
    \ of a Telnet Signal Command (in this case, to send\n            an Interrupt\
    \ Process signal) is:\n               C SI IP <nl>\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      2.5.  The Status Command\n         The\
    \ Status command is used with Telnet to obtain information\n         about the\
    \ Telnet connection and the options in effect.\n         2.5.1. Specialized Usage\n\
    \            The Status command has one specialized aspect when used to\n    \
    \        interface to an outboard Telnet interpreter.  That is to\n          \
    \  send and receive the Telnet Protocol status request\n            subnegotiation\
    \ message to and from the data stream.  In\n            order to invoke the status\
    \ command for this purpose,\n            however, the user must have previously\
    \ issued the Condition\n            Status command, which causes the ability to\
    \ request status\n            to be negotiated.  The OPE, when it receives a valid\
    \ Status\n            request command, immediately responds to the user indicating\n\
    \            the status.  The OPE can issue a status to request the\n        \
    \    Host's negotiated positions.\n         2.5.2. Protocol-Idiosyncratic Parameters\n\
    \            There are no protocol-idiosyncratic parameters to the Status\n  \
    \          query command. The Status Response command has a single\n         \
    \   protocol-idiosyncratic parameter.  It is an ASCII string\n            containing\
    \ the status of the various options (not at their\n            default values).\n\
    \         2.5.3. Examples of the Command\n            An example of a Status Query\
    \ command is:\n               C ST Q\n            An example of a Status Response\
    \ command is:\n               F ST R \"WILL ECHO  DO SUPPRESS-GO-AHEAD\n     \
    \          L WILL STATUS  DO STATUS\" <nl>\n            In the previous example,\
    \ note the opening quote is in the\n            first chunk, and the closing quote\
    \ is in the last chunk.\n            This technique permits parameters to span\
    \ chunk boundaries.\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n      2.6.  The End Command\n         The End\
    \ command is used to terminate the Telnet connection,\n         either gracefully\
    \ or abruptly.\n         2.6.1. Specialized Usage\n            The graceful termination\
    \ of a Telnet requires End commands\n            to be issued by both the Host\
    \ and the OPE.  This specialized\n            usage is identical to that of the\
    \ outboard TCP interface,\n            however.\n         2.6.2. Examples of the\
    \ Command\n            An example of the graceful End command is:\n          \
    \     C EN G <nl>\n            The abrupt End command is similar.\n      2.7.\
    \  The No-op Command\n         The No-op command is used with Telnet so the Host\
    \ can determine\n         if the OPE is active, and vice versa.\n         2.7.1.\
    \ Specialized Usage\n            The No-op command has one specialized usage when\
    \ offloading\n            Telnet.  This is to provide the Telnet Are You There\
    \ (AYT)\n            feature.  When an (AYT) message is received by the OPE, it\n\
    \            issues a No-op command to the Host. Upon receiving the\n        \
    \    response from the Host, the appropriate response is sent\n            back\
    \ in the data stream.\n         2.7.2. Protocol Idiosyncratic Parameters\n   \
    \         There are no protocol-idiosyncratic parameters to the No-op\n      \
    \      command.\n         2.7.3. Examples of the Command\n            An example\
    \ of the No-op command is:\n               C NO <nl>\n"
- title: RFC 929                                                    December 1984
  contents:
  - 'RFC 929                                                    December 1984

    '
- title: Proposed Host-Front End Protocol
  contents:
  - "Proposed Host-Front End Protocol\n   3. FTP Offloading\n      TBS\n   4. Mail\
    \ Offloading\n      TBS\n   5. Whatever Offloading\n      TBS\n   Where TBS nominally\
    \ = To Be Supplied, but really means: We'll argue\n   through these once we get\
    \ sufficiently positive feedback on the\n   others (and on the H-FP as a whole).\n"
