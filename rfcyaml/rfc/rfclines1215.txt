As reported in RFC 1052, IAB Recommendations for the Development of Internet Network Management Standards [1], a two prong strategy for network management of TCP/IP based internets was undertaken.
In the short term, the Simple Network Management Protocol (SNMP), defined in RFC 1067, was to be used to manage nodes in the Internet community.
In the long term, the use of the OSI network management framework was be examined.
Two documents were produced to define the management information: RFC 1065, which defined the Structure of Management Information (SMI), and RFC 1066, which defined the Management Information Base (MIB).
Both of these documents were designed so as to be compatible with both the SNMP and the OSI network management framework.
This strategy was quite successful in the short term:
Internet based network management technology was fielded, by both the research and commercial communities, within a few months.
As a result of this, portions of the Internet community became network manageable in a timely fashion.
As reported in RFC 1109, Report of the Second Ad Hoc Network Management Review Group [2], the requirements of the SNMP and the OSI network management frameworks were more different than anticipated.
As such, the requirement for compatibility between the SMI/MIB and both frameworks was suspended.
This action permitted the operational network management framework, based on the SNMP, to respond to new operational needs in the Internet community by producing MIB II.
In May of 1990, the core documents were elevated to "Standard Protocols" with "Recommended" status.
As such, the Internet standard network management framework consists of: Structure and Identification of Management Information for TCP/IP based internets, RFC 1155 [3], which describes how managed objects contained in the MIB are defined; Management Information Base for Network Management of TCP/IP based internets, which describes the managed objects contained in the MIB, RFC 1156 [4]; and, the Simple Network Management Protocol, RFC 1157 [5], which defines the protocol used to manage these objects.
Due to its initial requirement to be protocol independent, the Internet standard SMI does not provide a means for defining traps.
Instead, the SNMP defines a few standardized traps and provides a means for management enterprises to transmit enterprise specific traps.
However, with the introduction of experimental MIBs, some of which have a need to define experiment specific traps, a convenient means of defining traps is desirable.
It must be emphasized however, that the use of traps is STRONGLY discouraged in the Internet standard Network Management Framework.
The TRAP TYPE macro is intended to allow concise definitions of existing traps, not to spur the definition of new traps.
Mapping of the TRAP TYPE macro
It should be noted that the expansion of the TRAP TYPE macro is something which conceptually happens during implementation and not during run time.
Mapping of the ENTERPRISE clause
The ENTERPRISE clause, which must be present, defines the management enterprise under whose registration authority this trap is defined (for a discussion on delegation of registration authority, see the SMI [3]).
This value is placed inside the enterprise field of the SNMP Trap PDU.
By convention, if the value of the ENTERPRISE clause is snmp   OBJECT
then instead of using this value, the value of sysObjectID is placed in the enterprise field of the SNMP Trap  PDU.
This provides a simple means of using the TRAP TYPE macro to represent the existing standard SNMP traps; it is not intended to provide a means to define additional standard SNMP traps.
Mapping of the VARIABLES clause
The VARIABLES clause, which need not be present, defines the ordered sequence of MIB objects which are contained within every instance of the trap type.
Each variable is placed, in order, inside the variable bindings field of the SNMP Trap PDU.
Note that at the option of the agent, additional variables may follow in the variable bindings field.
, then the introduction of additional variables must not result in the serialized SNMP Message being larger than 484 octets.
Mapping of the DESCRIPTION clause
The DESCRIPTION clause, which need not be present, contains a textual definition of the trap type.
Note that in order to conform to the ASN.1 syntax, the entire value of this clause must be enclosed in double quotation marks, although the value may be multi line.
Further, note that if the MIB module does not contain a textual description of the trap elsewhere then the DESCRIPTION clause must be present.
Mapping of the REFERENCE clause
The REFERENCE clause, which need not be present, contains a textual cross reference to a trap, event, or alarm, defined in some other MIB module.
This is useful when de osifying a MIB produced by some other organization.
Mapping of the TRAP TYPE value
The value of an invocation of the TRAP TYPE macro is the (integer) number which is uniquely assigned to the trap by the registration authority indicated by the ENTERPRISE clause.
This value is placed inside the specific trap field of the SNMP Trap PDU, and the generic trap field is set to "enterpriseSpecific(6)".
By convention, if the value of the ENTERPRISE clause is snmp   OBJECT
, then the value of an invocation of the TRAP TYPE macro is placed inside the generic trap field of the SNMP Trap PDU, and the specific trap field is set to 0.
This provides a simple means of using the TRAP TYPE macro to represent the existing standard SNMP traps; it is not intended to provide a means to define additional standard SNMP traps.
{ ifIndex } DESCRIPTION "
A myLinkDown trap signifies that the sending SNMP application entity recognizes a failure in one of the communications links represented in the agent's configuration."
Generic Traps for use with the SNMP Consider how the standard SNMP traps might be defined:
"A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the rotocol entity implementation may be altered."
::  0 warmStart TRAP TYPE ENTERPRISE  snmp DESCRIPTION "A warmStart trap signifies that the sending protocol entity is reinitializing itself such that neither the agent configuration nor the protocol entity implementation is altered."
::  1 linkDown TRAP TYPE ENTERPRISE
{ ifIndex } DESCRIPTION "
A linkDown trap signifies that the sending protocol entity recognizes a failure in one of the communication links represented in the agent's configuration."
2 linkUp TRAP TYPE ENTERPRISE
{ ifIndex } DESCRIPTION "A linkUp trap signifies that the sending protocol entity recognizes that one of the communication links represented in the agent's configuration has come up."
3 authenticationFailure TRAP TYPE ENTERPRISE
An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated.
While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation  specific mechanism."
::  4 egpNeighborLoss TRAP TYPE ENTERPRISE
An egpNeighborLoss trap signifies that an EGP neighbor for whom the sending protocol entity was an EGP peer has been marked down and the peer relationship no longer obtains."
Security Considerations Security issues are not discussed in this memo.
