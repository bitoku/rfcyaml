- title: __initial_text__
  contents:
  - "                      Dynamic RARP Extensions for\n                 Automatic\
    \ Network Address Acquisition\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not define an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo describes extensions to the Reverse Address Resolution\n\
    \   Protocol (RARP [2]) and called Dynamic RARP (DRARP, pronounced D-\n   RARP).\
    \  The role of DRARP, and to some extent the configuration\n   protocol used in\
    \ conjunction with it, has subsequently been addressed\n   by the DHCP protocol\
    \ [9].  This memo is being published now to\n   document this protocol for the\
    \ record.\n   DRARP is used to acquire (or allocate) a protocol level address\
    \ given\n   the fixed hardware address for a host.  Its clients are systems being\n\
    \   installed or reconfigured, and its servers are integrated with other\n   network\
    \ administration services.  The protocol, along with adjunct\n   protocols as\
    \ briefly described here, supports several common styles\n   of \"Intranet\" administration\
    \ including networks which choose not to\n   support the simplified installation\
    \ and reconfiguration features\n   enabled by DRARP.\n   The rest of this introductory\
    \ section summarizes the system design of\n   which the DRARP protocol was a key\
    \ part.  The second section presents\n   the DRARP protocol, and the third section\
    \ discusses requirements\n   noted for an \"Address Authority\" managing addresses\
    \ in conjunction\n   with one or more cooperating DRARP servers.\n"
- title: 1.1  Automatic System Installation
  contents:
  - "1.1  Automatic System Installation\n   Dynamic RARP was used by certain Sun Microsystems\
    \ platforms beginning\n   in 1988.  (These platforms are no longer sold by Sun.)\
    \ In conjunction\n   with other administrative protocols, as summarized in the\
    \ next\n   subsection, it was part of a simplified network and domain\n   administration\
    \ framework for SunOS 4.0.  Accordingly, there was a\n   product requirement to\
    \ extend (rather than replace) the RARP/TFTP two\n   phase booting model [3],\
    \ in order to leverage the existing system\n   infrastructure.  This is in contrast\
    \ to the subsequent DHCP [9] work,\n   which extended BOOTP.\n   The \"hands-off\"\
    \ installation of all kinds of systems (including\n   diskless workstations, and\
    \ servers) was required, as supported by\n   LocalTalk networks [8].  However,\
    \ Internet administrative models are\n   not set up to allow that: there is no\
    \ way to set up a completely\n   functional IP network by just plugging machines\
    \ into a cable and\n   powering them up.  That procedure doesn't have a way to\
    \ input the\n   network number (and class) that must be used, or to bootstrap\
    \ the\n   host naming system.  An approach based on administered servers was\n\
    \   needed for IP-based \"Intranet\" systems, even though that\n   unfortunately\
    \ called for networks to be initially set up by\n   knowledgeable staff before\
    \ any \"hands-off\" installations could be\n   performed.\n"
- title: 1.2  System Overview
  contents:
  - "1.2  System Overview\n   DRARP was used by systems in the first phase of joining\
    \ a network, to\n   acquire a network address without personal intervention by\
    \ a network\n   administrator.  Once a system was given a network address, it\
    \ would\n   perform whatever network operations it desired, subject to a site's\n\
    \   access control policies.  During system installation, those network\n   operations\
    \ involved a (re)configuration protocol (\"Plug'n'Play\", or\n   PNP).  Diskless\
    \ sytems used TFTP to download code which could speak\n   the PNP protocol.\n\
    \   The PNP protocol would register the names of newly installed hosts in\n  \
    \ the naming service, using the address which was acquired using DRARP.\n   These\
    \ names could be chosen by users installing the system, but could\n   also be\
    \ assigned automatically.  Diskless systems used the PNP\n   protocol to assign\
    \ booting resources (e.g. filesystem space) on\n   servers.  All systems were\
    \ assigned public and private keys, also\n   initial (quasi-secret) \"root\" passwords,\
    \ so that they could use what\n   was then the strongest available ONC RPC authentication\
    \ system.\n   Servers for DRARP and for the configuration protocol (as well as\n\
    \   other administrative tools) needed to consult an authoritative\n   database\
    \ of which Internet addresses which were allocated to which\n   hosts (as identified\
    \ by hardware addresses).  This \"address\n   authority\" role was implemented\
    \ using a name service (NIS) and an\n   RPC-based centralized IP address allocation\
    \ protocol (\"IPalloc\").\n   Address allocation could be performed only by authorized\
    \ users,\n   including network administrators and DRARP servers.\n   Most systems\
    \ used DRARP and PNP each time they started, to\n   automatically reconfigure\
    \ applicable system and network policies.\n   For example, network addresses and\
    \ numbers were changed using these\n   protocols; host names changed less often.\
    \  The naming service (NIS)\n   held most information, such as the locations of\
    \ printers and users'\n   home directories.\n"
- title: 2.  Dynamic RARP Extensions
  contents:
  - "2.  Dynamic RARP Extensions\n   Dynamic RARP (DRARP) service is provided by any\
    \ of a small active set\n   of cooperating server systems on a network segment\
    \ (network or\n   subnetwork).  Those servers are contacted through link level\n\
    \   procedures, normally a packet broadcast.  One or more servers may\n   respond\
    \ to a given request.  It was intended that network segments\n   will be administered\
    \ together in domains [5] consisting of one or\n   more network segments.  Domains\
    \ sharing a network segment need to\n   share information about network addresses,\
    \ both hardware level and\n   protocol level, so an address authority (see section\
    \ 3) can avoid\n   reallocating protocol addresses which are already allocated\
    \ or in\n   use.\n   Dynamic RARP benefits from link layer addresses which are\
    \ scoped more\n   widely than just the local network segment.  It takes advantage\
    \ of\n   such scoping to detect hosts which move between network segments.\n \
    \  Such scoping is provided by IEEE 802 48-bit addresses [7], but not by\n   all\
    \ other kinds of network address.  Without such a widely scoped ID,\n   the case\
    \ of systems roaming between networks can't be detected by\n   Dynamic RARP.\n"
- title: 2.1  Mixing RARP and DRARP Servers
  contents:
  - "2.1  Mixing RARP and DRARP Servers\n   DRARP is an extension to RARP, so that\
    \ all Dynamic RARP servers are\n   also RARP servers.  However, DRARP provides\
    \ a more manageable service\n   model than RARP does:  while RARP allows multiple\
    \ servers to respond\n   to RARP requests, it does not expect all those servers\
    \ to be able to\n   respond, or to respond identically.  A given RARP server can\
    \ not be\n   relied upon to know whether a given link level address can be mapped\n\
    \   into a protocol address, and some other RARP server may have a\n   different\
    \ answer.\n   Dynamic RARP addresses this problem by requiring that all Dynamic\n\
    \   RARP servers on a network segment must communicate with the same\n   address\
    \ authority.  That address authority controls name and address\n   bindings, records\
    \ bindings between host identifiers and addresses,\n   makes decisions about how\
    \ to allocate addresses, and keeps records\n   about addresses in use.\n   This\
    \ means that in effect there may be a number of independent RARP\n   services\
    \ offered along with a single DRARP service.  DRARP service\n   may well be offered\
    \ through multiple servers, and the persistent\n   address bindings it serves\
    \ will be accessible as from a set of\n   coordinated RARP servers.\n   Not all\
    \ networks want to support dynamic address allocation services.\n   Even those\
    \ that do support it will need control over implementation\n   of the address\
    \ authority.  So DRARP servers need policy controls such\n   as \"restricting\"\
    \ them from assigning addresses (applied to an entire\n   network segment) as\
    \ well as disabling use of DRARP entirely.  (One\n   may need to disable servers\
    \ that would otherwise allocate new\n   addresses, in order to enable ones which\
    \ can speak to the \"correct\"\n   address authority.  Standards do not exist\
    \ for protocols and security\n   options used to talk to address authorities.)\n"
- title: 2.2  Packet Format
  contents:
  - "2.2  Packet Format\n   The packet format is identical to RARP and is encapsulated\
    \ using RARP\n   frames, with the same Ethernet/SNAP type field.  [1, 2, 6]. \
    \ That is,\n   a DRARP packet looks like a RARP packet, but it uses opcodes which\n\
    \   are ignored by RARP servers; DRARP servers must also support RARP\n   requests,\
    \ and hence ARP requests [1].\n"
- title: 2.2.1  RARP Packets
  contents:
  - "2.2.1  RARP Packets\n   The two RARP opcodes are described here, in order to\
    \ clarify the\n   overall presentation.  The name \"REVARP\", used in the opcode\n\
    \   descriptions, is a synonym for \"RARP\".\n   REVARP_REQUEST (3)\n        REVARP_REQUEST\
    \ packets are sent to RARP servers as a request to\n        map the target hardware\
    \ address (tha) into the corresponding\n        target protocol address (tpa),\
    \ sending the response to the\n        source hardware address (sha) as encoded\
    \ in the packet.  The\n        source hardware address will usually be the same\
    \ as the target\n        hardware address, that of the system sending the packet.\
    \  RARP\n        servers will consult their name and address databases, and\n\
    \        return a REVARP_REPLY packet if they can perform the reverse\n      \
    \  address resolution as requested.\n   REVARP_REPLY (4)\n        This packet\
    \ is sent by RARP servers in response to\n        REVARP_REQUEST packets.  The\
    \ target protocol address (tpa) is\n        filled in as requested, and the source\
    \ hardware and protocol\n        addresses (sha, spa) correspond to the RARP server.\
    \  The target\n        hardware address (tha) is from the corresponding REVARP_REQUEST\n\
    \        packet, and the packet is sent to the source hardware address\n     \
    \   (sha) from that packet.\n        This packet is also sent by Dynamic RARP\
    \ servers in response to\n        DRARP_REQUEST packets, if the protocol address\
    \ returned was not\n        a temporary one, but was instead what it would have\
    \ returned\n        given an otherwise identical REVARP_REQUEST packet.\n"
- title: 2.2.2  Dynamic RARP Packets
  contents:
  - "2.2.2  Dynamic RARP Packets\n        There are three opcodes defined for DRARP,\
    \ in addition to the\n        two already defined for RARP:\n   DRARP_REQUEST\
    \ (5)\n        DRARP_REQUEST packets have the same format as REVARP_REQUEST\n\
    \        packets, except for the operation code.  The semantics are simi-\n  \
    \      lar, except that in cases where a REVARP_REQUEST would produce\n      \
    \  no REVARP_REPLY (no persistent address mapping is stored in an\n        addressing\
    \ database) a DRARP_REQUEST will normally return a tem-\n        porary address\
    \ allocation in a DRARP_REPLY packet.  A\n        DRARP_ERROR packet may also\
    \ be returned; a Dynamic RARP server\n        will always provide a response,\
    \ unlike a REVARP server.\n   DRARP_REPLY (6)\n        DRARP_REPLY packets have\
    \ the same format, opcode excepted, as\n        REVARP_REPLY packets.  The interpretation\
    \ of the fields is the\n        same.\n        There are semantic differences\
    \ between the two packet types.\n        First, the protocol address bindings\
    \ returned in DRARP_REPLY\n        packets are temporary ones, which will be recycled\
    \ after some\n        period (e.g. an hour).  Those bindings returned in REVARP_REPLY\n\
    \        packets are \"persistent\" addresses which typically change much\n  \
    \      more slowly.  Second, it is explicitly a protocol error for\n        DRARP_REPLY\
    \ packets to be sent which differ except in the sender\n        address fields.\
    \  Also, DRARP_REPLY packets are generated only in\n        response to DRARP_REQUEST\
    \ packets.\n        These temporary addresses may be reallocated to another system\n\
    \        after some time period.  A configuration protocol is normally\n     \
    \   used to ensure that reallocation does not occur.\n   DRARP_ERROR (7)\n   \
    \     DRARP_ERROR packets may also be sent in response to\n        DRARP_REQUESTs.\
    \  The format is identical to REVARP_REPLY, except\n        for the opcode and\
    \ that the target protocol address (tpa) field\n        is replaced by an error\
    \ code field.  The error code field must\n        be at least one byte long, and\
    \ the first byte is used to encode\n        an error status describing why no\
    \ target protocol address (tpa)\n        is being returned.  The status values\
    \ are:\n        DRARPERR_RESTRICTED (1)\n             This network does not support\
    \ dynamic address allocation.\n             The response is definitive; the network\
    \ is controlled so\n             that no other DRARP_REPLY (for this hardware\
    \ address) is\n             legal until the network policy on dynamic address\n\
    \             allocation is changed, or until the client is otherwise\n      \
    \       assigned a persistent address binding.  A REVARP_REQUEST\n           \
    \  might yield a REVARP_REPLY, however; non-cooperating RARP\n             servers\
    \ could be the very reason that dynamic address allo-\n             cation was\
    \ disabled.\n        DRARPERR_NOADDRESSES (2)\n             This network supports\
    \ dynamic address allocation, but all\n             available protocol addresses\
    \ in the local segment are in\n             use, so none can be allocated now.\n\
    \        DRARPERR_SERVERDOWN (3)\n             The service providing access to\
    \ the address authority is\n             temporarily unavailable.  May also be\
    \ returned if an\n             address allocation was required and the required\
    \ response\n             took a \"long time\" to generate; this distinguishes\
    \ the case\n             of a network that didn't support DRARP from the case\
    \ of one\n             that does, but is slow.\n        DRARPERR_MOVED (4)\n \
    \            Analogous to the DRARPERR_RESTRICTED status in that no\n        \
    \     address was dynamically allocated.  This provides the addi-\n          \
    \   tional status that this client was recognized by the\n             administration\
    \ software for the domain as being on a dif-\n             ferent network segment\
    \ than expected; users will be able to\n             remedy the problem by connecting\
    \ the system to the correct\n             network segment.\n        DRARPERR_FAILURE\
    \ (5)\n             For some reason, no address could be returned.  No defined\n\
    \             status code known to the server explained the reason.\n   More opcodes\
    \ for the Address Resolution Protocol (ARP) family could\n   be defined in the\
    \ future, so unrecognized opcodes (and error codes)\n   should be ignored rather\
    \ than treated as errors.\n"
- title: 2.3  Protocol Exchanges
  contents:
  - "2.3  Protocol Exchanges\n   This section describes typical protocol exchanges\
    \ using RARP and\n   Dynamic RARP, and common fault modes of each exchange.\n"
- title: 2.3.1.  RARP Address Lookup
  contents:
  - "2.3.1.  RARP Address Lookup\n   To determine a previously published (\"persistent\"\
    ) protocol address\n   for itself or another system, a system may issue a REVARP_REQUEST\n\
    \   packet.  If a REVARP_REPLY packet arrives in response, then the\n   target\
    \ protocol address listed there should be used.\n   If no REVARP_REPLY response\
    \ packet arrives within some time interval,\n   a number of errors may have occurred.\
    \  The simplest one is that the\n   request or reply packet may never have arrived:\
    \  most RARP client\n   implementations retransmit requests to partially account\
    \ for this\n   error.  There is no clear point at which to stop retransmitting\
    \ a\n   request, so many implementations apply an exponential backoff to the\n\
    \   retransmit interval, to reduce what is typically broadcast traffic.\n   Otherwise\
    \ there are many different errors which all have the same\n   failure mode, including:\
    \ the system might not have a published\n   protocol address; it might be on the\
    \ wrong network segment, so its\n   published address is invalid; the RARP servers\
    \ which can supply the\n   published address may be unavailable; it might even\
    \ be on a network\n   without any RARP servers at all.\n"
- title: 2.3.2  Dynamic RARP Address Lookup
  contents:
  - "2.3.2  Dynamic RARP Address Lookup\n   Dynamic RARP may be used to determine\
    \ previously published protocol\n   addresses by clients who issue DRARP_REQUEST\
    \ packets.  If the client\n   has a published protocol address on the network\
    \ segment on which the\n   DRARP_REQUEST packet was issued, it is returned in\
    \ a REVARP_REPLY\n   packet.\n   If the client has a published protocol address\
    \ only on some other\n   network segment, then two basic responses are possible.\
    \  In the case\n   where dynamic address reallocation is enabled, a temporary\
    \ protocol\n   address may be allocated and returned in a DRARP_REPLY packet.\n\
    \   Otherwise if dynamic address reallocation is disabled, a DRARP_ERROR\n   packet\
    \ is returned with the status DRARPERR_MOVED.  Detection of host\n   movement\
    \ can be provided only with link level addresses that are\n   unique over the\
    \ catenet, such as are provided with IEEE 802 48 bit\n   addresses.  Without such\
    \ uniqueness guarantees, this case looks like\n   a request for a new address\
    \ as described in the next section.\n"
- title: 2.3.3  Dynamic RARP Address Allocation
  contents:
  - "2.3.3  Dynamic RARP Address Allocation\n   Dynamic RARP clients who issue DRARP_REQUEST\
    \ packets may acquire\n   newly allocated protocol addresses.  If the client has\
    \ no published\n   protocol address, there are three responses:\n   (a)  When\
    \ dynamic address allocation is enabled, a temporary protocol\n        address\
    \ is allocated and returned in a DRARP_REPLY packet.\n   (b)  Errors or delays\
    \ in the allocation process (with dynamic address\n        allocation enabled)\
    \ are reported in DRARP_ERROR packets with\n        error codes such as DRARPERR_SERVERDOWN,\
    \ DRARPERR_NOADDRESSES,\n        DRARPERR_MOVED, or even DRARPERR_FAILURE.\n \
    \  (c)  When dynamic address allocation is disabled (or \"restricted\"), a\n \
    \       DRARP_ERROR packet with status DRARPERR_RESTRICTED is returned.\n    \
    \    DRARP_REQUESTS are normally retransmitted until an address is\n        returned,\
    \ using backoff-style algorithms to minimize needless\n        network traffic.\
    \  When DRARP_ERROR responses are received, they\n        should be reported to\
    \ the user.  For example, knowing that the\n        server is busy could indicate\
    \ it's time for a cup of Java, but\n        if the network is restricted then\
    \ it might be time to contact a\n        network administrator for help instead.\n"
- title: 2.3.4  Discovering Other DRARP Servers
  contents:
  - "2.3.4  Discovering Other DRARP Servers\n        The existence of a DRARP server\
    \ can be discovered by the fact\n        that it puts its addressing information\
    \ in all DRARP_REPLY\n        packets that it sends.  DRARP servers can listen\
    \ for such\n        packets, as well as announcing themselves by sending such\
    \ a\n        packet to themselves.\n        It can be important to discover other\
    \ DRARP servers.  Users make\n        mistakes, and can inappropriately set up\
    \ DRARP servers that do\n        not coordinate their address allocation with\
    \ that done by the\n        other DRARP servers on their network segment.  That\
    \ causes\n        significant administrative problems, which can all but be\n\
    \        eliminated by DRARP servers which politely announce themselves,\n   \
    \     and when they detect an apparently spurious server, report this\n      \
    \  fact before entering a \"restricted\" mode to avoid creating any\n        problems\
    \ themselves.\n        As no further server-to-server protocol is defined here,\
    \ some\n        out-of-band mechanism, such as communication through the address\n\
    \        authority, must be used to help determine which servers are in\n    \
    \    fact spurious.\n"
- title: 2.4  Network Setup Concerns
  contents:
  - "2.4  Network Setup Concerns\n        Some internetwork environments connect multiple\
    \ network segments\n        using link level bridges or routers.  In such environments,\
    \ a\n        given broadcast accessible \"local\" area network will have two\n\
    \        problems worth noting.\n        First, it will extend over several cable\
    \ segments, and be\n        subject to partitioning faults.  Assigning one DRARP\
    \ server to\n        each segment (perhaps on systems acting as routers or bridges,\n\
    \        to serve multiple segments) can reduce the cost of such faults.\n   \
    \     Assigning more than one such server can help reduce the cost of\n      \
    \  failure to any single network segment; these cooperate in the\n        assignment\
    \ of addresses through the address authority.\n        Second, those networks\
    \ are sometimes shared by organizations\n        which don't cooperate much on\
    \ the management of protocol\n        addresses, or perhaps aren't even collocated.\
    \  A DRARP server\n        might need help from link level bridges/routers in\
    \ order to\n        ensure that local clients are tied to local servers (rather\n\
    \        than, for example, to servers across the country where they are\n   \
    \     prone to availability problems).  Or the server might need to\n        run\
    \ in \"restricted\" mode so that a network administrator\n        manually assigns\
    \ address and other resources to each system.\n"
- title: 3.  The Address Authority
  contents:
  - "3.  The Address Authority\n        While not part of the DRARP protocol, the\
    \ Address Authority used\n        by the DRARP servers on a network segment is\
    \ critical to\n        providing the address allocation functionality.  It manages\
    \ the\n        data needed to implement such service, which is required not\n\
    \        just for dynamic address allocation tools.  This section is\n       \
    \ provided to record one set of requirements for such an\n        authority, ignoring\
    \ implementation isssues such as whether\n        protocol support for replication\
    \ or partitioning is needed.\n"
- title: 3.1  Basic Requirements
  contents:
  - "3.1  Basic Requirements\n        For each network segment under its control,\
    \ an Address Authority\n        maintains at least:\n        -    persistent bindings\
    \ between hardware and protocol addresses\n             (for at least those hosts\
    \ which are DRARP clients);\n        -    temporary bindings between such addresses;\n\
    \        -    protocol addresses available for temporary bindings;\n   The Address\
    \ Authority is also responsible for presenting and managing\n   those bindings.\
    \  DRARP clients need it to support:\n        -    creating temporary bindings\
    \ initially,\n        -    looking up bindings (the distinction between temporary\
    \ and\n             persistent bindings is not usually significant here),\n  \
    \      -    deleting temporary or persistent bindings on request,\n        - \
    \   purging them automatically by noticing that a binding is\n             now\
    \ persistent or that the temporary address is available\n             for reuse.\n\
    \   Those clients will frequently make concurrent requests, and should be\n  \
    \ required to pass some kind of authorization check before they create\n   or\
    \ change any bindings.  They may also need to know about other\n   clients, in\
    \ order to determine (for example) if a given DRARP server\n   is spurious.\n"
- title: 3.2  Multiple Authorities and Segments
  contents:
  - "3.2  Multiple Authorities and Segments\n   Note there is only a single address\
    \ authority on a given network\n   segment.  It may be desirable to partition\
    \ that authority, though\n   that complicates implementation and administration\
    \ of the authority\n   substantially.\n   If detection of systems moving between\
    \ network segments is to be\n   provided, then the authorities for those two network\
    \ segments must\n   either be the same or (equivalently) must communicate with\
    \ one\n   another.  Also, as noted earlier, hardware addresses must be scoped\n\
    \   widely enough that the two segments do not assign the same link level\n  \
    \ address to different hosts.\n"
- title: 3.3  Quality of Service
  contents:
  - "3.3  Quality of Service\n   The records of temporary address bindings must be\
    \ persistent for at\n   least long enough to install a system and propagate its\
    \ records\n   through the site's administrative databases, even in the case of\n\
    \   server or network faults.  A timeout mechanism could be used to\n   ensure\
    \ that the limited address space was not used up too quickly.\n   The initial\
    \ implementation found that an hour's worth of caching,\n   before deleting temporary\
    \ bindings, was sufficient.\n   Experience has shown that many networks have addresses\
    \ in use which\n   are not listed in their name services (or other administrative\n\
    \   databases).  On such networks, the Address Authority should have a\n   way\
    \ to learn when an address which it thinks is available for\n   allocation is\
    \ instead being actively used.  Probing the network for\n   \"the truth\" before\
    \ handing out what turns out to be a duplicate IP\n   address is a worthwhile.\
    \  Both ARPing for the address and ICMP echo\n   request have been used for this.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Security concerns are not addressed in this memo.\
    \  They are\n   recognized as significant, but they also interact with site-specific\n\
    \   network administration policies.  Those policies need to be addressed\n  \
    \ at higher levels before ramifications at this level can be\n   understood.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [1]  Plummer, D., \"An Ethernet Address Resolution Protocol\"\
    , STD 37,\n        RFC 826, MIT, November 1982.\n   [2]  Finlayson, R., Mann,\
    \ T., Mogul, J., and M. Theimer, \"A Reverse\n        Address Resolution Protocol\"\
    , STD 38, RFC 903, Stanford, June\n        1984.\n   [3]  Finlayson, R., \"Bootstrap\
    \ Loading using TFTP\", RFC 906,\n        Stanford, June 1984.\n   [4]  Postel,\
    \ J., \"Multi-LAN Address Resolution\", RFC 925,\n        USC/Information Sciences\
    \ Institute, October 1984.\n   [5]  Mockapetris, P., \"Domain Names -- Concepts\
    \ and Facilities\", STD\n        13, RFC 1034, USC/Information Sciences Institute,\
    \ November 1987.\n   [6]  Postel, J., and J. Reynolds, \"A Standard for the Transmission\
    \ of\n        IP Datagrams over IEEE802 Networks\", STD 43, RFC 1042,\n      \
    \  USC/Information Sciences Institute, February 1988.\n   [7]  IEEE; \"IEEE Standards\
    \ for Local Area Networks:  Logical Link\n        Control\" (IEEE 802.2); IEEE,\
    \ New York, NY; 1985.\n   [8]  United States Patent No. 4,689,786; \"Local Area\
    \ Network with\n        Self Assigned Address Method\"; Issued August 25, 1987;\n\
    \        Inventors:  Sidhu, et al.; Assignee:  Apple Computer, Inc.\n   [9]  Droms,\
    \ R., \"Dynamic Host Configuration Protocol\", RFC 1541,\n        Bucknell University,\
    \ October 1993.\n   [10] Srinivasan, R., \"RPC:  Remote Procedure Call Protocol\n\
    \        Specification, Version 2\", RFC 1831, Sun Microsystems, August\n    \
    \    1995.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   David Brownell\n   SunSoft, Inc\n   2550 Garcia Way, MS\
    \ 19-215\n   Mountain View, CA  94043\n   Phone:  +1-415-336-1615\n   EMail: \
    \ dbrownell@sun.com\n"
