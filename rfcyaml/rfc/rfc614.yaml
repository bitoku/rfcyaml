- title: __initial_text__
  contents:
  - "    Response to RFC 607, \"Comments on the File Transfer Protocol\"\nMark Krilanovich\
    \ and George Gregg have pointed out a number of \"sticky\"\nissues in the current\
    \ File Transfer Protocol. Although we don't agree\nwith all of their proposed\
    \ protocol modifications, we do feel that each\nof the points they have raised\
    \ should be given some thought by everyone\nconcerned about FTP. Each numbered\
    \ paragraph in the discussion below is a\ncomment on the identically-numbered\
    \ paragraph in RFC 607.\n1. Instructions to the Server to be \"passive\" are defined\
    \ to apply only\nto the next single file transfer operation, after which the Server\n\
    reverts to active mode. RFC 607 does, however, point out a drawback in\nthe present\
    \ specification, in that there is no way for a user to \"change\nhis mind\": once\
    \ he has told a server to be \"passive\", he has to initiate\nsome file transfer\
    \ operation. The suggested solution is a welcome one. We\nsuggest that the text\
    \ of the \"successful reply\" to the ACTV command\nindicate whether the server\
    \ had previously been in \"active\" or \"passive\"\nmode, viz:\n200 MODE CHANGED\
    \ TO ACTIVE\nor\n200 MODE IS ALREADY ACTIVE\nIt is important to note that once\
    \ some servers \"listen\" on a connection\nin response to a PASV command, they\
    \ no longer can examine the Telnet\ncontrol connection for the possible arrival\
    \ of an ACTV command. User-FTP\nprograms should precede the ACTV command with\
    \ a SYNC sequence to ensure\nthat the server will see the ACTV command.\n2. While\
    \ the length of an FTP command -- either three or four characters\n-- might often\
    \ be irrelevant to a system which interacts over Telnet\nconnections on a line-at-a-time\
    \ basis, we can see how a variable command\nlength might be harder for a character-at-a-time\
    \ system to handle,\nespecially for a server implemented in assembly language.\
    \ Quite a bit is\ngained, and nothing seems to be lost, by requiring that FTP\
    \ commands be\nfour characters, so we agree with the suggestion in RFC 607.\n\
    3. While the FTP document may be somewhat ambiguous in its specification\nof the\
    \ order of the handshaking which takes place following a file\ntransfer command,\
    \ such an order does exist as far as is possible for the\ntwo asynchronous processes\
    \ described in \"The FTP Model\" (section II. B of\nData Transfer process. The\
    \ user is required to \"listen\" on the data\nconnection before sending the transfer\
    \ command.  Upon receipt of the\ncommand the server should first check that the\
    \ status of the file\nspecified by the argument to the file transfer command is\
    \ okay, and, if\nso, attempt to open the data connection. If there are file system\n\
    problems, no attempt should be made to open the connection. In this way,\nthe\
    \ primary response to the command gives an accurate picture of the\ntransfer status\
    \ -- i. e., connection opened and transfer started (250),\nor connection not opened\
    \ because of file problems (450, 451, 455, 457) or\nconnection problems (454).\
    \ The secondary reply follows the conclusion of\nthe transfer, and describes its\
    \ success or failure.\nIf a particular FTP implementation cannot monitor the data\
    \ connection and\nthe Telnet control connection simultaneously, then it must establish\
    \ a\ntimeout waiting for the data connection RFC. In addition, a minimum\ninterval\
    \ should be specified for which all servers must wait before\ndeciding that the\
    \ data connection cannot be opened. We suggest that this\ninterval be no shorter\
    \ than fifteen seconds.\n4. The protocol states that servers should return \"\
    success\", replies to\ncommands such as ACCT and ALLO which were irrelevant to\
    \ them. We\nrecommend that the protocol say \"must\" rather than \"should\".\n\
    5. Specification of maximum lengths for lines, pathnames, etc.  is a fine\nidea,\
    \ as is the suggestion of a Server poll.  Typical values for the\npresent Multics\
    \ implementation (provided by Ken Pogran) are as follows:\nTelnet lines: 256\n\
    User names: 32\nPasswords: 8\nAccount Numbers: (na)\nPathnames: 168 (yes, 168)\n\
    6. We strongly disagree with Mark on this point. The algorithm a user-FTP\nshould\
    \ use goes something like this:\na. Examine the first four characters of the reply.\
    \  \nb. If the fourth character is a space, the reply is not a multi-line reply.\
    \  \nc. If the fourth character is a hyphen, the reply is a multi-line reply,\n\
    and the text portion of this line and succeeding lines should be reported\nto\
    \ the user if this is desired.\nd. On each succeeding line, if the first four\
    \ characters are not the\nthree digits of the original reply code followed by\
    \ a space, the line is\nentirely a text line and should either be reported to\
    \ the user or\ndiscarded.\ne. If the first four characters on the line are the\
    \ three digits of the\nreply code followed by space, this line is the last line\
    \ of the reply.\nThis algorithm seems simple enough, if nesting of replies is\
    \ not required\n(see comments on paragraph 7, below). This sort of continuation-line\n\
    convention provides a number of benefits to the person coding a server.\nConsider\
    \ the problem of providing a directory listing, in response to a\nSTAT command\
    \ whose argument is the pathname of a directory. If the FTP\nTelnet control connection\
    \ is treated as a pseudo-typewriter (as most\nordinary Telnet connections are),\
    \ the writer of an FTP Server may be able\nto \"borrow\" the code from the system\
    \ command which provides directory\nstatus (listing) information, as follows (in\
    \ a pseudo-PL/l syntax):\ncall write_out_line (\"151- Directory listing follows\"\
    ) ;\ncall list_directory_contents (directory_pathname);\ncall write_out_line (\"\
    151 Directory listing complete\");\nThe same can be done for the file status reply\
    \ (code 150).  Otherwise, a\nprogram must be written which performs the function\
    \ of the\ndirectory-listing command, but uses a special output format. If the\n\
    implementor of an FTP Server wants to be \"nice\" and list file attributes,\n\
    as well as file names, in the directory listing (as many\ndirectory-listing commands\
    \ do), this could be a fairly big job. If\nalready-written software can be borrowed\
    \ and incorporated into the FTP\nServer, the implementor of the FTP Server can\
    \ put more of his effort into\ndoing a better job of building the \"guts\" of\
    \ the FTP Server.\n7. It is not obvious why multi-line replies are allowed to\
    \ be nested to\nan arbitrary depth. Only truly spontaneous replies may nest inside\
    \ other\nreplies -- and it is easy to convince yourself that they will only nest\n\
    to depth one. It was envisioned that some messages from \"the system\"\nmight\
    \ not allow the \"exterior\" multi-line message to finish; the scenario\nmight\
    \ go something like this:.\n151- Directory listing follows:\na1pha.p11\nalpha\n\
    rfc.runoff\nmailbox\n010- From Operator:\n010 Emergency shutdown in 5 mins. due\
    \ to hardware probs.\nbeta.fortran\nfoo.lisp\n151 Directory listing complete.\n\
    It has been pointed out to us that:\na. Messages from \"the system\" in general\
    \ cannot be guaranteed to come at\nthe beginning of a line.\nb. It may be difficult\
    \ to modify \"the system\" to preface such messages\nwith an appropriate FTP reply\
    \ code.\nTherefore, we propose that, since user-FTP implementations must handle\n\
    multi-line replies, system messages \"splattered\" into the middle of\nreplies\
    \ need not be escorted by FTP reply codes. The user-FTP thus need\nnot detect\
    \ and handle \"nested\" FTP replies.\n8. RFC 607 proposes that any data between\
    \ the last end-of-record marker\nof a file and the end-of-file marker be discarded.\
    \ We agree. The sender\nof the data has clearly violated the protocol, and the\
    \ receiver cannot\ndivine the sender's original intent.\n9-11. The suggestion\
    \ that reply codes beginning with the digit \"2\" be\ntaken as successful, and\
    \ all others be taken as failures, severely\nrestricts use of the available \"\
    reply code space\". We agree that the\npresent scheme is disorganized and requires\
    \ far too much \"intelligence\"\non the part of a user-ftp automaton. With the\
    \ present scheme, unless the\nautomaton's reply-interpretation is table-driven,\
    \ it is extremely likely\nto make a mistake. We feel that the whole reply code\
    \ strategy should be\nredesigned; some of the ideas proposed in RFC 607 could\
    \ fit in with such\na redesign, but we do not think that Mark's suggestion is\
    \ the way to go.\n12. 000 and 020 are used by the Server to indicate that it has\
    \ heard and\nanswered the ICP to socket 3, but cannot accept file transfer commands\n\
    yet. 020 was intended to indicate how much of a time delay could be\nexpected,\
    \ while 000 was ambiguous on this point. We suggest that the two\nbe merged to\
    \ mean \"I am here; please wait a specified or unspecified\namount of time\";\
    \ then, 300 would clearly mean \"I am ready; you may now\nsend me commands\".\n\
    13. There is no typographical error here. A TENEX representative\nsuggested that,\
    \ rather than give a \"fail\" reply to a particular request\nbecause the user\
    \ is not logged in, a server might ask for his account\nnumber (or ask him to\
    \ log in) and then proceed with the previous request,\nwhich has been held in\
    \ abeyance. While this may be convenient for a\nserver, it is not necessary, and\
    \ certainly ambiguous to hold a command in\nabeyance while obtaining an account\
    \ number.  Since any server may spring\nthis on a user, all user-FTP implementations\
    \ must be able to cope with\nthis twist, which adds a good deal of required complication\
    \ to the\n\"minimal\" user-FTP implementation. We propose that the 331 reply be\n\
    eliminated, and that the server forget the requested operation and return\na 4XX\
    \ reply if an account is needed.\nJon Postel has remarked that \"mail text should\
    \ follow the same limit as\ncommands and long 'lines' of mail text have been trouble\
    \ for some FTP\nServers.\" We agree. In fact, mail transmitted over the FTP Telnet\
    \ control\nconnection has other problems, too: Since FTP is (nominally, at least)\n\
    supposed to be usable from TIPs, Multics implemented its standard\ncharacter erase\
    \ and line kill conventions on the control connection for\nthe convenience of\
    \ TIP users (it was actually easier to have those\nconventions in effect than\
    \ to turn them off!). Of course, no erase/kill\nprocessing was done on the data\
    \ connection. The intent of the MAIL\nrequest was to allow users at terminals\
    \ to access an FTP Server directly\nand transmit mail; it was presumed that mail-sending\
    \ automata which\ngathered the mail to be sent into a file would use the MLFL\
    \ command and\ntransmit the mail over the data connection.  Presumably, long lines\
    \ would\nnot be a problem, and, of course, no erase/kill conventions would be\
    \ in\neffect. Well, at least one major system (TENEX) has a mail-sending\nautomaton\
    \ which transmits mail over the Telnet control connection using\nthe MAIL command\
    \ - even though it has previously gathered the mail into a\nfile!  Line-length\
    \ considerations could be a severe problem here, and the\nfact that the Multics\
    \ line-kill character is the at-sign (@) caused grief\nin reading mail from TENEX\
    \ users who included their \"return address\" in\nTENEX's SNDMSG syntax, as USERNAME@HOST.\
    \ We propose that mail-sending\nautomata be required to use MLFL, rather than\
    \ MAIL.\n"
