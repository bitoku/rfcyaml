- title: __initial_text__
  contents:
  - "           A Call Control and Multi-Party Usage Framework for\n             \
    \    the Session Initiation Protocol (SIP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a framework and the requirements for call\n\
    \   control and multi-party usage of the Session Initiation Protocol\n   (SIP).\
    \  To enable discussion of multi-party features and\n   applications, we define\
    \ an abstract call model for describing the\n   media relationships required by\
    \ many of these.  The model and actions\n   described here are specifically chosen\
    \ to be independent of the SIP\n   signaling and/or mixing approach chosen to\
    \ actually set up the media\n   relationships.  In addition to its dialog manipulation\
    \ aspect, this\n   framework includes requirements for communicating related information\n\
    \   and events such as conference and session state and session history.\n   This\
    \ framework also describes other goals that embody the spirit of\n   SIP applications\
    \ as used on the Internet such as the definition of\n   primitives (not services),\
    \ invoker and participant oriented\n   primitives, signaling and mixing model\
    \ independence, and others.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5850.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Motivation and Background  . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Key Concepts . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  6\n     2.1.  Conversation Space Model . . . . . . . . . . . . .\
    \ . . . .  7\n     2.2.  Relationship between Conversation Space, SIP Dialogs,\n\
    \           and SIP Sessions . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \   2.3.  Signaling Models . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \ 2.4.  Mixing Models  . . . . . . . . . . . . . . . . . . . . . . 10\n      \
    \ 2.4.1.  Tightly Coupled  . . . . . . . . . . . . . . . . . . . 11\n       2.4.2.\
    \  Loosely Coupled  . . . . . . . . . . . . . . . . . . . 12\n     2.5.  Conveying\
    \ Information and Events . . . . . . . . . . . . . 13\n     2.6.  Componentization\
    \ and Decomposition . . . . . . . . . . . . 15\n       2.6.1.  Media Intermediaries\
    \ . . . . . . . . . . . . . . . . . 15\n       2.6.2.  Text-to-Speech and Automatic\
    \ Speech Recognition  . . . 17\n       2.6.3.  VoiceXML . . . . . . . . . . .\
    \ . . . . . . . . . . . . 17\n     2.7.  Use of URIs  . . . . . . . . . . . .\
    \ . . . . . . . . . . . 18\n       2.7.1.  Naming Users in SIP  . . . . . . .\
    \ . . . . . . . . . . 19\n       2.7.2.  Naming Services with SIP URIs  . . .\
    \ . . . . . . . . . 20\n     2.8.  Invoker Independence . . . . . . . . . . .\
    \ . . . . . . . . 22\n     2.9.  Billing Issues . . . . . . . . . . . . . . .\
    \ . . . . . . . 23\n   3.  Catalog of Call Control Actions and Sample Features\
    \  . . . . . 23\n     3.1.  Remote Call Control Actions on Early Dialogs . . .\
    \ . . . . 24\n       3.1.1.  Remote Answer  . . . . . . . . . . . . . . . . .\
    \ . . . 24\n       3.1.2.  Remote Forward or Put  . . . . . . . . . . . . . .\
    \ . . 24\n       3.1.3.  Remote Busy or Error Out . . . . . . . . . . . . . .\
    \ . 24\n     3.2.  Remote Call Control Actions on Single Dialogs  . . . . . .\
    \ 24\n       3.2.1.  Remote Dial  . . . . . . . . . . . . . . . . . . . . . 24\n\
    \       3.2.2.  Remote On and Off Hold . . . . . . . . . . . . . . . . 25\n  \
    \     3.2.3.  Remote Hangup  . . . . . . . . . . . . . . . . . . . . 25\n    \
    \ 3.3.  Call Control Actions on Multiple Dialogs . . . . . . . . . 25\n      \
    \ 3.3.1.  Transfer . . . . . . . . . . . . . . . . . . . . . . . 25\n       3.3.2.\
    \  Take . . . . . . . . . . . . . . . . . . . . . . . . . 26\n       3.3.3.  Add\
    \  . . . . . . . . . . . . . . . . . . . . . . . . . 27\n       3.3.4.  Local\
    \ Join . . . . . . . . . . . . . . . . . . . . . . 28\n       3.3.5.  Insert .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 28\n       3.3.6.  Split  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 29\n       3.3.7.  Near-Fork  .\
    \ . . . . . . . . . . . . . . . . . . . . . 29\n       3.3.8.  Far-Fork . . .\
    \ . . . . . . . . . . . . . . . . . . . . 29\n   4.  Security Considerations \
    \ . . . . . . . . . . . . . . . . . . . 30\n   Appendix A.    Example Features\
    \  . . . . . . . . . . . . . . . . . 32\n   Appendix A.1.  Attended Transfer .\
    \ . . . . . . . . . . . . . . . . 32\n   Appendix A.2.  Auto Answer . . . . .\
    \ . . . . . . . . . . . . . . . 32\n   Appendix A.3.  Automatic Callback  . .\
    \ . . . . . . . . . . . . . . 32\n   Appendix A.4.  Barge-In  . . . . . . . .\
    \ . . . . . . . . . . . . . 32\n   Appendix A.5.  Blind Transfer  . . . . . .\
    \ . . . . . . . . . . . . 32\n   Appendix A.6.  Call Forwarding . . . . . . .\
    \ . . . . . . . . . . . 33\n   Appendix A.7.  Call Monitoring . . . . . . . .\
    \ . . . . . . . . . . 33\n   Appendix A.8.  Call Park . . . . . . . . . . . .\
    \ . . . . . . . . . 33\n   Appendix A.9.  Call Pickup . . . . . . . . . . . .\
    \ . . . . . . . . 33\n   Appendix A.10. Call Return . . . . . . . . . . . . .\
    \ . . . . . . . 34\n   Appendix A.11. Call Waiting  . . . . . . . . . . . . .\
    \ . . . . . . 34\n   Appendix A.12. Click-to-Dial . . . . . . . . . . . . . .\
    \ . . . . . 34\n   Appendix A.13. Conference Call . . . . . . . . . . . . . .\
    \ . . . . 34\n   Appendix A.14. Consultative Transfer . . . . . . . . . . . .\
    \ . . . 34\n   Appendix A.15. Distinctive Ring  . . . . . . . . . . . . . . .\
    \ . . 35\n   Appendix A.16. Do Not Disturb  . . . . . . . . . . . . . . . . .\
    \ . 35\n   Appendix A.17. Find-Me . . . . . . . . . . . . . . . . . . . . . .\
    \ 35\n   Appendix A.18. Hotline . . . . . . . . . . . . . . . . . . . . . . 35\n\
    \   Appendix A.19. IM Conference Alerts  . . . . . . . . . . . . . . . 35\n  \
    \ Appendix A.20. Inbound Call Screening  . . . . . . . . . . . . . . 35\n   Appendix\
    \ A.21. Intercom  . . . . . . . . . . . . . . . . . . . . . 36\n   Appendix A.22.\
    \ Message Waiting . . . . . . . . . . . . . . . . . . 36\n   Appendix A.23. Music\
    \ on Hold . . . . . . . . . . . . . . . . . . . 36\n   Appendix A.24. Outbound\
    \ Call Screening . . . . . . . . . . . . . . 36\n   Appendix A.25. Pre-Paid Calling\
    \  . . . . . . . . . . . . . . . . . 37\n   Appendix A.26. Presence-Enabled Conferencing\
    \ . . . . . . . . . . . 37\n   Appendix A.27. Single Line Extension/Multiple Line\
    \ Appearance  . . 37\n   Appendix A.28. Speakerphone Paging . . . . . . . . .\
    \ . . . . . . . 38\n   Appendix A.29. Speed Dial  . . . . . . . . . . . . . .\
    \ . . . . . . 38\n   Appendix A.30. Voice Message Screening . . . . . . . . .\
    \ . . . . . 38\n   Appendix A.31. Voice Portal  . . . . . . . . . . . . . . .\
    \ . . . . 39\n   Appendix A.32. Voicemail . . . . . . . . . . . . . . . . . .\
    \ . . . 40\n   Appendix A.33. Whispered Call Waiting  . . . . . . . . . . . .\
    \ . . 40\n   Appendix B.    Acknowledgments . . . . . . . . . . . . . . . . .\
    \ . 40\n   5.  Informative References . . . . . . . . . . . . . . . . . . . .\
    \ 40\n"
- title: 1.  Motivation and Background
  contents:
  - "1.  Motivation and Background\n   The Session Initiation Protocol (SIP) [RFC3261]\
    \ was defined for the\n   initiation, maintenance, and termination of sessions\
    \ or calls between\n   one or more users.  However, despite its origins as a large-scale\n\
    \   multi-party conferencing protocol, SIP is used today primarily for\n   point-to-point\
    \ calls.  This two-party configuration is the focus of\n   the SIP specification\
    \ and most of its extensions.\n   This document defines a framework and the requirements\
    \ for call\n   control and multi-party usage of SIP.  Most multi-party operations\n\
    \   manipulate SIP dialogs (also known as call legs) or SIP conference\n   media\
    \ policy to cause participants in a conversation to perceive\n   specific media\
    \ relationships.  In other protocols that deal with the\n   concept of calls,\
    \ this manipulation is known as call control.  In\n   addition to its dialog or\
    \ policy manipulation aspect, call control\n   also includes communicating information\
    \ and events related to\n   manipulating calls, including information and events\
    \ dealing with\n   session state and history, conference state, user state, and\
    \ even\n   message state.\n   Based on input from the SIP community, the authors\
    \ compiled the\n   following set of goals for SIP call control and multi-party\n\
    \   applications:\n   o  Define primitives, not services.  Allow for a handful\
    \ of robust\n      yet simple mechanisms that can be combined to deliver features\
    \ and\n      services.  Throughout this document, we refer to these simple\n \
    \     mechanisms as \"primitives\".  Primitives should be sufficiently\n     \
    \ robust so that when they are combined with each other, they can be\n      used\
    \ to build lots of services.  However, the goal is not to\n      define a provably\
    \ complete set of primitives.  Note that while the\n      IETF will NOT standardize\
    \ behavior or services, it may define\n      example services for informational\
    \ purposes, as in service\n      examples [RFC5359].\n   o  Be participant oriented.\
    \  The primitives should be designed to\n      provide services that are oriented\
    \ around the experience of the\n      participants.  The authors observe that\
    \ end users of features and\n      services usually don't care how a media relationship\
    \ is set up.\n      Their ultimate experience is only based on the resulting media\
    \ and\n      other externally visible characteristics.\n   o  Be signaling model\
    \ independent.  Support both a central-control\n      and a peer-to-peer feature\
    \ invocation model (and combinations of\n      the two).  Baseline SIP already\
    \ supports a centralized control\n      model described in 3pcc (third party call\
    \ control) [RFC3725], and\n      the SIP community has expressed a great deal\
    \ of interest in peer-\n      to-peer or distributed call control using primitives\
    \ such as those\n      defined in REFER [RFC3515], Replaces [RFC3891], and Join\n\
    \      [RFC3911].\n   o  Be mixing model independent.  The bulk of interesting\
    \ multi-party\n      applications involve mixing or combining media from multiple\n\
    \      participants.  This mixing can be performed by one or more of the\n   \
    \   participants or by a centralized mixing resource.  The experience\n      of\
    \ the participants should not depend on the mixing model used.\n      While most\
    \ examples in this document refer to audio mixing, the\n      framework applies\
    \ to any media type.  In this context, a \"mixer\"\n      refers to combining\
    \ media of the same type in an appropriate,\n      media-specific way.  This is\
    \ consistent with the model described\n      in the SIP conferencing framework.\n\
    \   o  Be invoker oriented.  Only the user who invokes a feature or a\n      service\
    \ needs to know exactly which service is invoked or why.\n      This is good because\
    \ it allows new services to be created without\n      requiring new primitives\
    \ from all of the participants; and it\n      allows for much simpler feature\
    \ authorization policies, for\n      example, when participation spans organizational\
    \ boundaries.  As\n      discussed in Section 2.7, this also avoids exponential\
    \ state\n      explosion when combining features.  The invoker only has to manage\n\
    \      a user interface or application programming interface (API) to\n      prevent\
    \ local feature interactions.  All the other participants\n      simply need to\
    \ manage the feature interactions of a much smaller\n      number of primitives.\n\
    \   o  Primitives make full use of URIs (uniform resource identifiers).\n    \
    \  URIs are a very powerful mechanism for describing users and\n      services.\
    \  They represent a plentiful resource that can be\n      extremely expressive\
    \ and easily routed, translated, and\n      manipulated -- even across organizational\
    \ boundaries.  URIs can\n      contain special parameters and informational header\
    \ fields that\n      need only be relevant to the owner of the namespace (domain)\
    \ of\n      the URI.  Just as a user who selects an http: URL need not\n     \
    \ understand the significance and organization of the web site it\n      references,\
    \ a user may encounter a SIP URI that translates into an\n      email-style group\
    \ alias, which plays a pre-recorded message or\n      runs some complex call-handling\
    \ logic.  Note that while this may\n      seem paradoxical to the previous goal,\
    \ both goals can be satisfied\n      by the same model.\n   o  Make use of SIP\
    \ header fields and SIP event packages to provide\n      SIP entities with information\
    \ about their environment.  These\n      should include information about the\
    \ status/handling of dialogs on\n      other user agents (UAs), information about\
    \ the history of other\n      contacts attempted prior to the current contact,\
    \ the status of\n      participants, the status of conferences, user presence\n\
    \      information, and the status of messages.\n   o  Encourage service decomposition,\
    \ and design to make use of\n      standard components using well-defined, simple\
    \ interfaces.  Sample\n      components include a SIP mixer, recording service,\
    \ announcement\n      server, and voice-dialog server.  (This is not an exhaustive\n\
    \      list).\n   o  Include authentication, authorization, policy, logging, and\n\
    \      accounting mechanisms to allow these primitives to be used safely\n   \
    \   among mutually untrusted participants.  Some of these mechanisms\n      may\
    \ be used to assist in billing, but no specific billing system\n      will be\
    \ endorsed.\n   o  Permit graceful fallback to baseline SIP.  Definitions for\
    \ new SIP\n      call control extensions/primitives must describe a graceful way\
    \ to\n      fallback to baseline SIP behavior.  Support for one primitive must\n\
    \      not imply support for another primitive.\n   o  Don't reinvent traditional\
    \ models, such as the model used for the\n      H.450 family of protocols, JTAPI\
    \ (Java Telephony Application\n      Programming Interface), or the CSTA (Computer-supported\n\
    \      telecommunications applications) call model, as these other models\n  \
    \    do not share the design goals presented in this document.\n   Note that the\
    \ flexibility in this model does have some disadvantages\n   in terms of interoperability.\
    \  It is possible to build a call control\n   feature in SIP using different combinations\
    \ of primitives.  For a\n   discussion of the issues associated with this, see\
    \ [BLISS-PROBLEM].\n"
- title: 2.  Key Concepts
  contents:
  - "2.  Key Concepts\n   This section introduces a number of key concepts that will\
    \ be used to\n   describe and explain various call control operations and services\
    \ in\n   the remainder of this document.  This includes the conversation space\n\
    \   model, signaling and mixing models, common components, and the use of\n  \
    \ URIs.\n"
- title: 2.1.  Conversation Space Model
  contents:
  - "2.1.  Conversation Space Model\n   This document introduces the concept of an\
    \ abstract \"conversation\n   space\" as a set of participants who believe they\
    \ are all\n   communicating among one another.  Each conversation space contains\n\
    \   one or more participants.\n   Participants are SIP UAs that send original\
    \ media to or terminate and\n   receive media from other members of the conversation\
    \ space.\n   Logically, every participant in the conversation space has access\
    \ to\n   all the media generated in that space (this is strictly true if all\n\
    \   participants share a common media type).  A SIP UA that does not\n   contribute\
    \ or consume any media is NOT a participant, nor is a UA\n   that merely forwards,\
    \ transcodes, mixes, or selects media originating\n   elsewhere in the conversation\
    \ space.\n      Note that a conversation space consists of zero or more SIP calls\n\
    \      or SIP conferences.  A conversation space is similar to the\n      definition\
    \ of a \"call\" in some other call models.\n   Participants may represent human\
    \ users or non-human users (referred\n   to as robots or automatons in this document).\
    \  Some participants may\n   be hidden within a conversation space.  Some examples\
    \ of hidden\n   participants include: robots that generate tones, images, or\n\
    \   announcements during a conference to announce users arriving and\n   departing,\
    \ a human call center supervisor monitoring a conversation\n   between a trainee\
    \ and a customer, and robots that record media for\n   training or archival purposes.\n\
    \   Participants may also be active or passive.  Active participants are\n   expected\
    \ to be intelligent enough to leave a conversation space when\n   they no longer\
    \ desire to participate.  (An attentive human\n   participant is obviously active.)\
    \  Some robotic participants (such as\n   a voice-messaging system, an instant-messaging\
    \ agent, or a voice-\n   dialog system) may be active participants if they can\
    \ leave the\n   conversation space when there is no human interaction.  Other\
    \ robots\n   (for example, our tone-generating robot from the previous example)\n\
    \   are passive participants.  A human participant \"on hold\" is passive.\n \
    \  An example diagram of a conversation space can be shown as a \"bubble\"\n \
    \  or ovals, or as a \"set\" in curly or square bracket notation.  Each\n   set,\
    \ oval, or bubble represents a conversation space.  Hidden\n   participants are\
    \ shown in lowercase letters.  Examples are given in\n   Figure 1.\n   Note that\
    \ while the term \"conversation\" usually applies to oral\n   exchange of information,\
    \ we apply the conversation space model to any\n   media exchange between participants.\n\
    \   { A , B }                   [ A , b, C, D ]\n      .-.                 .---.\n\
    \     /   \\               /     \\\n    /  A  \\             / A   b \\\n   (\
    \       )           (         )\n    \\  B  /             \\ C   D /\n     \\\
    \   /               \\     /\n      '-'                 '---'\n   Figure 1.  Conversation\
    \ Spaces\n"
- title: 2.2.  Relationship between Conversation Space, SIP Dialogs, and SIP
  contents:
  - "2.2.  Relationship between Conversation Space, SIP Dialogs, and SIP\n      Sessions\n\
    \   In [RFC3261], a call is \"an informal term that refers to some\n   communication\
    \ between peers, generally set up for the purposes of a\n   multimedia conversation\"\
    .  The concept of a conversation space is\n   needed because the SIP definition\
    \ of call is not sufficiently precise\n   for the purpose of describing the user\
    \ experience of multi-party\n   features.\n   Do any other definitions convey\
    \ the correct meaning?  SIP and SDP\n   (Session Description Protocol) [RFC4566]\
    \ both define a conference as\n   \"a multimedia session identified by a common\
    \ session description\".  A\n   session is defined as \"a set of multimedia senders\
    \ and receivers and\n   the data streams flowing from senders to receivers\".\
    \  The definition\n   of \"call\" in some call models is more similar to our definition\
    \ of a\n   conversation space.\n   Some examples of the relationship between conversation\
    \ spaces, SIP\n   dialogs, and SIP sessions are listed below.  In each example,\
    \ a human\n   user will perceive that there is a single call.\n   o  A simple\
    \ two-party call is a single conversation space, a single\n      session, and\
    \ a single dialog.\n   o  A locally mixed three-way call is two sessions and two\
    \ dialogs.\n      It is also a single conversation space.\n   o  A simple dial-in\
    \ audio conference is a single conversation space,\n      but is represented by\
    \ as many dialogs and sessions as there are\n      human participants.\n   o \
    \ A multicast conference is a single conversation space, a single\n      session,\
    \ and as many dialogs as participants.\n"
- title: 2.3.  Signaling Models
  contents:
  - "2.3.  Signaling Models\n   Obviously, to make changes to a conversation space,\
    \ you must be able\n   to use SIP signaling to cause these changes.  Specifically,\
    \ there\n   must be a way to manipulate SIP dialogs (call legs) to move\n   participants\
    \ into and out of conversation spaces.  Although this is\n   not as obvious, there\
    \ also must be a way to manipulate SIP dialogs to\n   include non-participant\
    \ UAs that are otherwise involved in a\n   conversation space (e.g., back-to-back\
    \ user agents or B2BUAs, third\n   party call control (3pcc) controllers, mixers,\
    \ transcoders,\n   translators, or relays).\n   Implementations may setup the\
    \ media relationships described in the\n   conversation space model using a centralized\
    \ control model.  One\n   common way to implement this using SIP is known as third\
    \ party call\n   control (3pcc) and is described in 3pcc [RFC3725].  The 3pcc\
    \ approach\n   relies on only the following three primitive operations:\n   o\
    \  Create a new dialog (INVITE)\n   o  Modify a dialog (reINVITE)\n   o  Destroy\
    \ a dialog (BYE)\n   The main advantage of the 3pcc approach is that it only requires\
    \ very\n   basic SIP support from end systems to support call control features.\n\
    \   As such, third party call control is a natural way to handle protocol\n  \
    \ conversion and mid-call features.  It also has the advantage and\n   disadvantage\
    \ that new features can/must be implemented in one place\n   only (the controller),\
    \ and it neither requires enhanced client\n   functionality nor takes advantage\
    \ of it.\n   In addition, a peer-to-peer approach is discussed at length in this\n\
    \   document.  The primary drawback of the peer-to-peer model is\n   additional\
    \ complexity in the end system and authentication and\n   management models. \
    \ The benefits of the peer-to-peer model include:\n   o  state remains at the\
    \ edges,\n   o  call signaling need only go through participants involved (there\n\
    \      are no additional points of failure), and\n   o  peers may take advantage\
    \ of end-to-end message integrity or\n      encryption\n   The peer-to-peer approach\
    \ relies on additional \"primitive\"\n   operations, some of which are identified\
    \ here.\n   o  Replace an existing dialog\n   o  Join a new dialog with an existing\
    \ dialog\n   o  Locally perform media forking (multi-unicast)\n   o  Ask another\
    \ user agent (UA) to send a request on your behalf\n   The peer-to-peer approach\
    \ also only results in a single SIP dialog,\n   directly between the two UAs.\
    \  The 3pcc approach results in two SIP\n   dialogs, between each UA and the controller.\
    \  As a result, the SIP\n   features and extensions that will be used during the\
    \ dialog are\n   limited to the those understood by the controller.  As a result,\
    \ in a\n   situation where both the UAs support an advanced SIP feature but the\n\
    \   controller does not, the feature will not be able to be used.\n   Many of\
    \ the features, primitives, and actions described in this\n   document also require\
    \ some type of media mixing, combining, or\n   selection as described in the next\
    \ section.\n"
- title: 2.4.  Mixing Models
  contents:
  - "2.4.  Mixing Models\n   SIP permits a variety of mixing models, which are discussed\
    \ here\n   briefly.  This topic is discussed more thoroughly in the SIP\n   conferencing\
    \ framework [RFC4353] and [RFC4579].  SIP supports both\n   tightly coupled and\
    \ loosely coupled conferencing, although more\n   sophisticated behavior is available\
    \ in tightly coupled conferences.\n   In a tightly coupled conference, a single\
    \ SIP user agent (called the\n   focus) has a direct dialog relationship with\
    \ each participant (and\n   may control non-participant user agents as well).\
    \  The focus can\n   authoritatively publish information about the character and\n\
    \   participants in a conference.  In a loosely coupled conference, there\n  \
    \ are no coordinated signaling relationships among the participants.\n   For brevity,\
    \ only the two most popular conferencing models are\n   significantly discussed\
    \ in this document (local and centralized\n   mixing).  Applications of the conversation\
    \ spaces model to loosely\n   coupled multicast and distributed full unicast mesh\
    \ conferences are\n   left as an exercise for the reader.  Note that a distributed\
    \ full\n   mesh conference can be used for basic conferences, but does not\n \
    \  easily allow for more complex conferencing actions like splitting,\n   merging,\
    \ and sidebars.\n   Call control features should be designed to allow a mixer\
    \ (local or\n   centralized) to decide when to reduce a conference back to a two-\n\
    \   party call, or drop all the participants (for example, if only two\n   automatons\
    \ are communicating).  The actual heuristics used to release\n   calls are beyond\
    \ the scope of this document, but may depend on\n   properties in the conversation\
    \ space, such as the number of active,\n   passive, or hidden participants and\
    \ the send-only, receive-only, or\n   send-and-receive orientation of various\
    \ participants.\n"
- title: 2.4.1.  Tightly Coupled
  contents:
  - "2.4.1.  Tightly Coupled\n   Tightly coupled conferences utilize a central point\
    \ for signaling and\n   authentication known as a focus [RFC4353].  The actual\
    \ media can be\n   centrally mixed or distributed.\n"
- title: 2.4.1.1.  (Single) End System Mixing
  contents:
  - "2.4.1.1.  (Single) End System Mixing\n   The first model we call \"end system\
    \ mixing\".  In this model, user A\n   calls user B, and they have a conversation.\
    \  At some point later, A\n   decides to conference in user C.  To do this, A\
    \ calls C, using a\n   completely separate SIP call.  This call uses a different\
    \ Call-ID,\n   different tags, etc.  There is no call set up directly between\
    \ B and\n   C.  No SIP extension or external signaling is needed.  A merely\n\
    \   decides to locally join two dialogs.\n      B     C\n       \\   /\n     \
    \   \\ /\n         A\n   Figure 2.  End System Mixing Example\n   In Figure 2,\
    \ A receives media streams from both B and C, and mixes\n   them.  A sends a stream\
    \ containing A's and C's streams to B, and a\n   stream containing A's and B's\
    \ streams to C.  Basically, user A\n   handles both signaling and media mixing.\n"
- title: 2.4.1.2.  Centralized Mixing
  contents:
  - "2.4.1.2.  Centralized Mixing\n   In a centralized mixing model, all participants\
    \ have a pairwise SIP\n   and media relationship with the mixer.  Common applications\
    \ of\n   centralized mixing include ad hoc conferences and scheduled dial-in\n\
    \   or dial-out conferences.  In Figure 3 below, the mixer M receives and\n  \
    \ sends media to participants A, B, C, D, and E.\n      B     C\n       \\   /\n\
    \        \\ /\n         M --- A\n        / \\\n       /   \\\n      D     E\n\
    \   Figure 3.  Centralized Mixing Example\n"
- title: 2.4.1.3.  Centralized Signaling, Distributed Media
  contents:
  - "2.4.1.3.  Centralized Signaling, Distributed Media\n   In this conferencing model,\
    \ there is a centralized controller, as in\n   the dial-in and dial-out cases.\
    \  However, the centralized server\n   handles signaling only.  The media is still\
    \ sent directly between\n   participants, using either multicast or multi-unicast.\
    \  Participants\n   perform their own mixing.  Multi-unicast is when a user sends\n\
    \   multiple packets (one for each recipient, addressed to that\n   recipient).\
    \  This is referred to as a \"Decentralized Multipoint\n   Conference\" in [H.323].\
    \  Full mesh media with centralized mixing is\n   another approach.\n"
- title: 2.4.2.  Loosely Coupled
  contents:
  - "2.4.2.  Loosely Coupled\n   In these models, there is no point of central control\
    \ of SIP\n   signaling.  As in the \"Centralized Signaling, Distributed Media\"\
    \ case\n   above, all endpoints send media to all other endpoints.\n   Consequently,\
    \ every endpoint mixes their own media from all the other\n   sources and sends\
    \ their own media to every other participant.\n"
- title: 2.4.2.1.  Large-Scale Multicast Conferences
  contents:
  - "2.4.2.1.  Large-Scale Multicast Conferences\n   Large-scale multicast conferences\
    \ were the original motivation for\n   both the Session Description Protocol (SDP)\
    \ [RFC4566] and SIP.  In a\n   large-scale multicast conference, one or more multicast\
    \ addresses are\n   allocated to the conference.  Each participant joins those\
    \ multicast\n   groups and sends their media to those groups.  Signaling is not\
    \ sent\n   to the multicast groups.  The sole purpose of the signaling is to\n\
    \   inform participants of which multicast groups to join.  Large-scale\n   multicast\
    \ conferences are usually pre-arranged, with specific start\n   and stop times.\
    \  However, multicast conferences do not need to be\n   pre-arranged, so long\
    \ as a mechanism exists to dynamically obtain a\n   multicast address.\n"
- title: 2.4.2.2.  Full Distributed Unicast Conferencing
  contents:
  - "2.4.2.2.  Full Distributed Unicast Conferencing\n   In this conferencing model,\
    \ each participant has both a pairwise\n   media relationship and a pairwise signaling\
    \ relationship with every\n   other participant (a full mesh).  This model requires\
    \ a mechanism to\n   maintain a consistent view of distributed state across the\
    \ group.\n   This is a classic, hard problem in computer science.  Also, this\n\
    \   model does not scale well for large numbers of participants.  For <n>\n  \
    \ participants, the number of media and signaling relationships is\n   approximately\
    \ n-squared.  As a result, this model is not generally\n   available in commercial\
    \ implementations; to the contrary, it is\n   primarily the topic of research\
    \ or experimental implementations.\n   Note that this model assumes peer-to-peer\
    \ signaling.\n"
- title: 2.5.  Conveying Information and Events
  contents:
  - "2.5.  Conveying Information and Events\n   Participants should have access to\
    \ information about the other\n   participants in a conversation space so that\
    \ this information can be\n   rendered to a human user or processed by an automaton.\
    \  Although some\n   of this information may be available from the Request-URI\
    \ or To,\n   From, Contact, or other SIP header fields, another mechanism of\n\
    \   reporting this information is necessary.\n   Many applications are driven\
    \ by knowledge about the progress of calls\n   and conferences.  In general, these\
    \ types of events allow for the\n   construction of distributed applications,\
    \ where the application\n   requires information on dialog and conference state,\
    \ but is not\n   necessarily a co-resident with an endpoint user agent or conference\n\
    \   server.  For example, a focus involved in a conversation space may\n   wish\
    \ to provide URIs for conference status and/or conference/floor\n   control.\n\
    \   The SIP Events architecture [RFC3265] defines general mechanisms for\n   subscription\
    \ to and notification of events within SIP networks.  It\n   introduces the notion\
    \ of a package that is a specific \"instantiation\"\n   of the events mechanism\
    \ for a well-defined set of events.\n   Event packages are needed to provide the\
    \ status of a user's dialogs,\n   the status of conferences and their participants,\
    \ user-presence\n   information, the status of registrations, and the status of\
    \ a user's\n   messages.  While this is not an exhaustive list, these are sufficient\n\
    \   to enable the sample features described in this document.\n   The conference\
    \ event package [RFC4575] allows users to subscribe to\n   information about an\
    \ entire tightly coupled SIP conference.\n   Notifications convey information\
    \ about the participants such as the\n   SIP URI identifying each user, their\
    \ status in the space (active,\n   declined, departed), URIs to invoke other features\
    \ (such as sidebar\n   conversations), links to other relevant information (such\
    \ as floor-\n   control policies), and if floor-control policies are in place,\
    \ the\n   user's floor-control status.  For conversation spaces created from\n\
    \   cascaded conferences, conversation state can be gathered from\n   relevant\
    \ foci and merged into a cohesive set of state.\n   The dialog package [RFC4235]\
    \ provides information about all the\n   dialogs the target user is maintaining,\
    \ in which conversations the\n   user is participating, and how these are correlated.\
    \  Likewise, the\n   registration package [RFC3680] provides notifications when\
    \ contacts\n   have changed for a specific address-of-record (AOR).  The combination\n\
    \   of these allows a user agent to learn about all conversations\n   occurring\
    \ for the entire registered contact set for an address-of-\n   record.\n   Note\
    \ that user presence in SIP [RFC3856] has a close relationship\n   with these\
    \ latter two event packages.  It is fundamental to the\n   presence model that\
    \ the information used to obtain user presence is\n   constructed from any number\
    \ of different input sources.  Examples of\n   other such sources include calendaring\
    \ information and uploads of\n   presence documents.  These two packages can be\
    \ considered another\n   mechanism that allows a presence agent to determine the\
    \ presence\n   state of the user.  Specifically, a user presence server can act\
    \ as a\n   subscriber for the dialog and registration packages to obtain\n   additional\
    \ information that can be used to construct a presence\n   document.\n   The multi-party\
    \ architecture may also need to provide a mechanism to\n   get information about\
    \ the status/handling of a dialog (for example,\n   information about the history\
    \ of other contacts attempted prior to\n   the current contact).  Finally, the\
    \ architecture should provide ample\n   opportunities to present informational\
    \ URIs that relate to calls,\n   conversations, or dialogs in some way.  For example,\
    \ consider the SIP\n   Call-Info header or Contact header fields returned in a\
    \ 300-class\n   response.  Frequently, additional information about a call or\
    \ dialog\n   can be fetched via non-SIP URIs.  For example, consider a web page\n\
    \   for package tracking when calling a delivery company or a web page\n   with\
    \ related documentation when joining a dial-in conference.  The\n   use of URIs\
    \ in the multi-party framework is discussed in more detail\n   in Section 3.7.\n\
    \   Finally, the interaction of SIP with stimulus-signaling-based\n   applications,\
    \ which allow a user agent to interact with an\n   application without knowledge\
    \ of the semantics of that application,\n   is discussed in the SIP application\
    \ interaction framework [RFC5629].\n   Stimulus signaling can occur with a user\
    \ interface running locally\n   with the client, or with a remote user interface,\
    \ through media\n   streams.  Stimulus signaling encompasses a wide range of mechanisms,\n\
    \   from clicking on hyperlinks, to pressing buttons, to traditional\n   Dual-Tone\
    \ Multi Frequency (DTMF) input.  In all cases, stimulus\n   signaling is supported\
    \ through the use of markup languages, which\n   play a key role in that framework.\n"
- title: 2.6.  Componentization and Decomposition
  contents:
  - "2.6.  Componentization and Decomposition\n   This framework proposes a decomposed\
    \ component architecture with a\n   very loose coupling of services and components.\
    \  This means that a\n   service (such as a conferencing server or an auto-attendant)\
    \ need not\n   be implemented as an actual server.  Rather, these services can\
    \ be\n   built by combining a few basic components in straightforward or\n   arbitrarily\
    \ complex ways.\n   Since the components are easily deployed on separate boxes,\
    \ by\n   separate vendors, or even with separate providers, we achieve a\n   separation\
    \ of function that allows each piece to be developed in\n   complete isolation.\
    \  We can also reuse existing components for new\n   applications.  This allows\
    \ rapid service creation, and the ability\n   for services to be distributed across\
    \ organizational domains anywhere\n   in the Internet.\n   For many of these components,\
    \ it is also desirable to discover their\n   capabilities, for example, querying\
    \ the ability of a mixer to host a\n   10-dialog conference or to reserve resources\
    \ for a specific time.\n   These actions could be provided in the form of URIs,\
    \ provided there\n   is an a priori means of understanding their semantics.  For\
    \ example,\n   if there is a published dictionary of operations, a way to query\
    \ the\n   service for the available operations and the associated URIs, the URI\n\
    \   can be the interface for providing these service operations.  This\n   concept\
    \ is described in more detail in the context of dialog\n   operations in Section\
    \ 3.\n"
- title: 2.6.1.  Media Intermediaries
  contents:
  - "2.6.1.  Media Intermediaries\n   Media intermediaries are not participants in\
    \ any conversation space,\n   although an entity that is also a media translator\
    \ may also have a\n   co-located participant component (for example, a mixer that\
    \ also\n   announces the arrival of a new participant; the announcement portion\n\
    \   is a participant, but the mixer itself is not).  Media intermediaries\n  \
    \ should be as transparent as possible to the end users -- offering a\n   useful,\
    \ fundamental service without getting in the way of new\n   features implemented\
    \ by participants.  Some common media\n   intermediaries are described below.\n"
- title: 2.6.1.1.  Mixer
  contents:
  - "2.6.1.1.  Mixer\n   A SIP mixer is a component that combines media from all dialogs\
    \ in\n   the same conversation in a media-specific way.  For example, the\n  \
    \ default combining for an audio conference might be an N-1\n   configuration,\
    \ while a text mixer might interleave text messages on a\n   per-line basis. \
    \ More details about how to manipulate the media\n   policy used by mixers is\
    \ discussed in [XCON-CCMP].\n"
- title: 2.6.1.2.  Transcoder
  contents:
  - "2.6.1.2.  Transcoder\n   A transcoder translates media from one encoding or format\
    \ to another\n   (for example, GSM (Global System for Mobile communications) voice\
    \ to\n   G.711, MPEG2 to H.261, or text/html to text/plain), or from one media\n\
    \   type to another (for example, text to speech).  A more thorough\n   discussion\
    \ of transcoding is described in the SIP transcoding\n   services invocation [RFC5369].\n"
- title: 2.6.1.3.  Media Relay
  contents:
  - "2.6.1.3.  Media Relay\n   A media relay terminates media and simply forwards\
    \ it to a new\n   destination without changing the content in any way.  Sometimes,\n\
    \   media relays are used to provide source IP address anonymity, to\n   facilitate\
    \ middlebox traversal, or to provide a trusted entity where\n   media can be forcefully\
    \ disconnected.\n"
- title: 2.6.1.4.  Queue Server
  contents:
  - "2.6.1.4.  Queue Server\n   A queue server is a location where calls can be entered\
    \ into one of\n   several FIFO (first-in, first-out) queues.  A queue server would\n\
    \   subscribe to the presence of groups or individuals who are interested\n  \
    \ in its queues.  When detecting that a user is available to service a\n   queue,\
    \ the server redirects or transfers the last call in the\n   relevant queue to\
    \ the available user.  On a queue-by-queue basis,\n   authorized users could also\
    \ subscribe to the call state (dialog\n   information) of calls within a queue.\
    \  Authorized users could use\n   this information to effectively pluck (take)\
    \ a call out of the queue\n   (for example, by sending an INVITE with a Replaces\
    \ header to one of\n   the user agents in the queue).\n"
- title: 2.6.1.5.  Parking Place
  contents:
  - "2.6.1.5.  Parking Place\n   A parking place is a location where calls can be\
    \ terminated\n   temporarily and then retrieved later.  While a call is \"parked\"\
    , it\n   can receive media \"on hold\" such as music, announcements, or\n   advertisements.\
    \  Such a service could be further decomposed such that\n   announcements or music\
    \ are handled by a separate component.\n"
- title: 2.6.1.6.  Announcements and Voice Dialogs
  contents:
  - "2.6.1.6.  Announcements and Voice Dialogs\n   An announcement server is a server\
    \ that can play digitized media\n   (frequently audio), such as music or recorded\
    \ speech.  These servers\n   are typically accessible via SIP, HTTP (Hyper Text\
    \ Transport\n   Protocol), or RTSP (Real-Time Streaming Protocol).  An analogous\n\
    \   service is a recording service that stores digitized media.  A\n   convention\
    \ for specifying announcements in SIP URIs is described in\n   [RFC4240].  Likewise,\
    \ the same server could easily provide a service\n   that records digitized media.\n\
    \   A \"voice dialog\" is a model of spoken interactive behavior between a\n \
    \  human and an automaton that can include synthesized speech, digitized\n   audio,\
    \ recognition of spoken and DTMF key input, a recording of\n   spoken input, and\
    \ interaction with call control.  Voice dialogs\n   frequently consist of forms\
    \ or menus.  Forms present information and\n   gather input; menus offer choices\
    \ of what to do next.\n   Spoken dialogs are a basic building block of applications\
    \ that use\n   voice.  Consider, for example, that a voicemail system, the\n \
    \  conference-id and passcode collection system for a conferencing\n   system,\
    \ and complicated voice-portal applications all require a\n   voice-dialog component.\n"
- title: 2.6.2.  Text-to-Speech and Automatic Speech Recognition
  contents:
  - "2.6.2.  Text-to-Speech and Automatic Speech Recognition\n   Text-to-speech (TTS)\
    \ is a service that converts text into digitized\n   audio.  TTS is frequently\
    \ integrated into other applications, but\n   when separated as a component, it\
    \ provides greater opportunity for\n   broad reuse.  Automatic Speech Recognition\
    \ (ASR) is a service that\n   attempts to decipher digitized speech based on a\
    \ proposed grammar.\n   Like TTS, ASR services can be embedded, or exposed so\
    \ that many\n   applications can take advantage of such services.  A standardized\n\
    \   (decomposed) interface to access standalone TTS and ASR services is\n   currently\
    \ being developed as described in [RFC4313].\n"
- title: 2.6.3.  VoiceXML
  contents:
  - "2.6.3.  VoiceXML\n   VoiceXML is a W3C (World Wide Web Consortium) recommendation\
    \ that was\n   designed to give authors control over the spoken dialog between\
    \ users\n   and applications.  The application and user take turns speaking: the\n\
    \   application prompts the user, and the user in turn responds.  Its\n   major\
    \ goal is to bring the advantages of web-based development and\n   content delivery\
    \ to interactive voice-response applications.  We\n   believe that VoiceXML represents\
    \ the ideal partner for SIP in the\n   development of distributed IVR (interactive\
    \ voice response) servers.\n   VoiceXML is an XML-based scripting language for\
    \ describing IVR\n   services at an abstract level.  VoiceXML supports DTMF recognition,\n\
    \   speech recognition, text-to-speech, and the playing out of recorded\n   media\
    \ files.  The results of the data collected from the user are\n   passed to a\
    \ controlling entity through an HTTP POST operation.  The\n   controller can then\
    \ return another script, or terminate the\n   interaction with the IVR server.\n\
    \   A VoiceXML server also need not be implemented as a monolithic\n   server.\
    \  Figure 4 shows a diagram of a VoiceXML browser that is split\n   into media\
    \ and non-media handling parts.  The VoiceXML interpreter\n   handles SIP dialog\
    \ state and state within a VoiceXML document, and\n   sends requests to the media\
    \ component over another protocol.\n                       +-------------+\n \
    \                      |             |\n                       | VoiceXML    |\n\
    \                       | Interpreter |\n                       | (signaling)\
    \ |\n                       +-------------+\n                         ^      \
    \    ^\n                         |          |\n                     SIP |    \
    \      | RTSP\n                         |          |\n                       \
    \  |          |\n                         v          v\n            +-------------+\
    \        +-------------+\n            |             |        |             |\n\
    \            |  SIP UA     |   RTP  | RTSP Server |\n            |           \
    \  |<------>|   (media)   |\n            |             |        |            \
    \ |\n            +-------------+        +-------------+\n   Figure 4.  Decomposed\
    \ VoiceXML Server\n"
- title: 2.7.  Use of URIs
  contents:
  - "2.7.  Use of URIs\n   All naming in SIP uses URIs.  URIs in SIP are used in a\
    \ plethora of\n   contexts: the Request-URI; Contact, To, From, and *-Info header\n\
    \   fields; application/uri bodies; and embedded in email, web pages,\n   instant\
    \ messages, and ENUM records.  The Request-URI identifies the\n   user or service\
    \ for which the call is destined.\n   SIP URIs embedded in informational SIP header\
    \ fields, SIP bodies, and\n   non-SIP content can also specify methods, special\
    \ parameters, header\n   fields, and even bodies.  For example:\n   sip:bob@b.example.com;method=REFER?Refer-To=http://example.com/~alice\n\
    \   Throughout this document, we discuss call control primitive\n   operations.\
    \  One of the biggest problems is defining how these\n   operations may be invoked.\
    \  There are a number of ways to do this.\n   One way is to define the primitives\
    \ in the protocol itself such that\n   SIP methods (for example, REFER) or SIP\
    \ header fields (for example,\n   Replaces) indicate a specific call control action.\
    \  Another way to\n   invoke call control primitives is to define a specific Request-URI\n\
    \   naming convention.  Either these conventions must be shared between\n   the\
    \ client (the invoker) and the server, or published by or on behalf\n   of the\
    \ server.  The former involves defining URI construction\n   techniques (e.g.,\
    \ URI parameters and/or token conventions) as\n   proposed in [RFC4240].  The\
    \ latter technique usually involves\n   discovering the URI via a SIP event package,\
    \ a web page, a business\n   card, or an instant message.  Yet, another means\
    \ to acquire the URIs\n   is to define a dictionary of primitives with well-defined\
    \ semantics\n   and provide a means to query the named primitives and corresponding\n\
    \   URIs that may be invoked on the service or dialogs.\n"
- title: 2.7.1.  Naming Users in SIP
  contents:
  - "2.7.1.  Naming Users in SIP\n   An address-of-record, or public SIP address,\
    \ is a SIP (or Secure SIP\n   (SIPS)) URI that points to a domain with a location\
    \ service that can\n   map the URI to set of Contact URIs where the user might\
    \ be available.\n   Typically, the Contact URIs are populated via registration.\n\
    \   Address-of-Record               Contacts\n   sip:bob@biloxi.example.com ->\
    \ sip:bob@babylon.biloxi.example.com:5060\n                                 sip:bbrown@mailbox.provider.example.net\n\
    \                                 sip:+1.408.555.6789@mobile.example.net\n   Callee\
    \ Capabilities [RFC3840] define a set of additional parameters\n   to the Contact\
    \ header field that define the characteristics of the\n   user agent at the specified\
    \ URI.  For example, there is a mobility\n   parameter that indicates whether\
    \ the UA is fixed or mobile.  When a\n   user agent registers, it places these\
    \ parameters in the Contact\n   header fields to characterize the URIs it is registering.\
    \  This\n   allows a proxy for that domain to have information about the contact\n\
    \   addresses for that user.\n   When a caller sends a request, it can optionally\
    \ request Caller\n   Preferences [RFC3841] by including the Accept-Contact, Request-\n\
    \   Disposition, and Reject-Contact header fields that request certain\n   handling\
    \ by the proxy in the target domain.  These header fields\n   contain preferences\
    \ that describe the set of desired URIs to which\n   the caller would like their\
    \ request routed.  The proxy in the target\n   domain matches these preferences\
    \ with the Contact characteristics\n   originally registered by the target user.\
    \  The target user can also\n   choose to run arbitrarily complex \"Find-me\"\
    \ feature logic on a proxy\n   in the target domain.\n   There is a strong asymmetry\
    \ in how preferences for callers and\n   callees can be presented to the network.\
    \  While a caller takes an\n   active role by initiating the request, the callee\
    \ takes a passive\n   role in waiting for requests.  This motivates the use of\
    \ callee-\n   supplied scripts and caller preferences included in the call request.\n\
    \   This asymmetry is also reflected in the appropriate relationship\n   between\
    \ caller and callee preferences.  A server for a callee should\n   respect the\
    \ wishes of the caller to avoid certain locations, while\n   the preferences among\
    \ locations has to be the callee's choice, as it\n   determines where, for example,\
    \ the phone rings and whether the callee\n   incurs mobile telephone charges for\
    \ incoming calls.\n   SIP User Agent implementations are encouraged to make intelligent\n\
    \   decisions based on the type of participants (active/passive, hidden,\n   human/robot)\
    \ in a conversation space.  This information is conveyed\n   via the dialog package\
    \ or in a SIP header field parameter\n   communicated using an appropriate SIP\
    \ header field.  For example, a\n   music on hold service may take the sensible\
    \ approach that if there\n   are two or more unhidden participants, it should\
    \ not provide hold\n   music; or that it will not send hold music to robots.\n\
    \   Multiple participants in the same conversation space may represent\n   the\
    \ same human user.  For example, the user may use one participant\n   device for\
    \ video, chat, and whiteboard media on a PC and another for\n   audio media on\
    \ a SIP phone.  In this case, the address-of-record is\n   the same for both user\
    \ agents, but the Contacts are different.  In\n   this case, there is really only\
    \ one human participant.  In addition,\n   human users may add robot participants\
    \ that act on their behalf (for\n   example, a call recording service or a calendar\
    \ announcement\n   reminder).  Call control features in SIP should continue to\
    \ function\n   as expected in such an environment.\n"
- title: 2.7.2.  Naming Services with SIP URIs
  contents:
  - "2.7.2.  Naming Services with SIP URIs\n   A critical piece of defining a session-level\
    \ service that can be\n   accessed by SIP is defining the naming of the resources\
    \ within that\n   service.  This point cannot be overstated.\n   In the context\
    \ of SIP control of application components, we take\n   advantage of the fact\
    \ that the left-hand side of a standard SIP URI\n   is a user part.  Most services\
    \ may be thought of as user automatons\n   that participate in SIP sessions. \
    \ It naturally follows that the user\n   part should be utilized as a service\
    \ indicator.\n   For example, media servers commonly offer multiple services at\
    \ a\n   single host address.  Use of the user part as a service indicator\n  \
    \ enables service consumers to direct their requests without ambiguity.\n   It\
    \ has the added benefit of enabling media services to register their\n   availability\
    \ with SIP Registrars just as any \"real\" SIP user would.\n   This maintains\
    \ consistency and provides enhanced flexibility in the\n   deployment of media\
    \ services in the network.\n   There has been much discussion about the potential\
    \ for confusion if\n   media-service URIs are not readily distinguishable from\
    \ other types\n   of SIP UAs.  The use of a service namespace provides a mechanism\
    \ to\n   unambiguously identify standard interfaces while not constraining the\n\
    \   development of private or experimental services.\n   In SIP, the Request-URI\
    \ identifies the user or service for which the\n   call is destined.  The great\
    \ advantage of using URIs (specifically,\n   the SIP Request-URI) as a service\
    \ identifier comes because of the\n   combination of two facts.  First, unlike\
    \ in the PSTN (Public Switched\n   Telephone Network), where the namespace (dialable\
    \ telephone numbers)\n   is limited, URIs come from an infinite space.  They are\
    \ plentiful,\n   and they are free.  Secondly, the primary function of SIP is\
    \ call\n   routing through manipulations of the Request-URI.  In the traditional\n\
    \   SIP application, this URI represents a person.  However, the URI can\n   also\
    \ represent a service, as we propose here.  This means we can\n   apply the routing\
    \ services SIP provides to the routing of calls to\n   services.  The result --\
    \ the problem of service invocation and\n   service location becomes a routing\
    \ problem, for which SIP provides a\n   scalable and flexible solution.  Since\
    \ there is such a vast namespace\n   of services, we can explicitly name each\
    \ service in a finely granular\n   way.  This allows the distribution of services\
    \ across the network.\n   For further discussion about services and SIP URIs,\
    \ see RFC 3087\n   [RFC3087].\n   Consider a conferencing service, where we have\
    \ separated the names of\n   ad hoc conferences from scheduled conferences, we\
    \ can program proxies\n   to route calls for ad hoc conferences to one set of\
    \ servers and calls\n   for scheduled ones to another, possibly even in a different\
    \ provider.\n   In fact, since each conference itself is given a URI, we can\n\
    \   distribute conferences across servers, and easily guarantee that\n   calls\
    \ for the same conference always get routed to the same server.\n   This is in\
    \ stark contrast to conferences in the telephone network,\n   where the equivalent\
    \ of the URI -- the phone number -- is scarce.  An\n   entire conferencing provider\
    \ generally has one or two numbers.\n   Conference IDs must be obtained through\
    \ IVR interactions with the\n   caller or through a human attendant.  This makes\
    \ it difficult to\n   distribute conferences across servers all over the network,\
    \ since the\n   PSTN routing only knows about the dialed number.\n   For more\
    \ examples, consider the URI conventions of RFC 4240 [RFC4240]\n   for media servers\
    \ and RFC 4458 [RFC4458] for voicemail and IVR\n   systems.\n   In practical applications,\
    \ it is important that an invoker does not\n   necessarily apply semantic rules\
    \ to various URIs it did not create.\n   Instead, it should allow any arbitrary\
    \ string to be provisioned, and\n   map the string to the desired behavior.  The\
    \ administrator of a\n   service may choose to provision specific conventions\
    \ or mnemonic\n   strings, but the application should not require it.  In any\
    \ large\n   installation, the system owner is likely to have preexisting rules\n\
    \   for mnemonic URIs, and any attempt by an application to define its\n   own\
    \ rules may create a conflict.  Implementations should allow an\n   arbitrary\
    \ mix of URIs from these schemes, or any other scheme that\n   renders valid SIP\
    \ URIs, rather than enforce only one particular\n   scheme.\n   As we have shown,\
    \ SIP URIs represent an ideal, flexible mechanism for\n   describing and naming\
    \ service resources, regardless of whether the\n   resources are queues, conferences,\
    \ voice dialogs, announcements,\n   voicemail treatments, or phone features.\n"
- title: 2.8.  Invoker Independence
  contents:
  - "2.8.  Invoker Independence\n   With functional signaling, only the invoker of\
    \ features in SIP needs\n   to know exactly which feature they are invoking. \
    \ One of the primary\n   benefits of this approach is that combinations of functional\
    \ features\n   work in SIP call control without requiring complex feature-\n \
    \  interaction matrices.  For example, let us examine the combination of\n   a\
    \ \"transfer\" of a call that is \"conferenced\".\n   Alice calls Bob.  Alice\
    \ silently \"conferences in\" her robotic\n   assistant Albert as a hidden party.\
    \  Bob transfers Alice to Carol.\n   If Bob asks Alice to Replace her leg with\
    \ a new one to Carol, then\n   both Alice and Albert should be communicating with\
    \ Carol\n   (transparently).\n   Using the peer-to-peer model, this combination\
    \ of features works fine\n   if A is doing local mixing (Alice replaces Bob's\
    \ dialog with\n   Carol's), or if A is using a central mixer (the mixer replaces\
    \ Bob's\n   dialog with Carol's).  A clever implementation using the 3pcc model\n\
    \   can generate similar results.\n   New extensions to the SIP Call Control Framework\
    \ should attempt to\n   preserve this property.\n"
- title: 2.9.  Billing Issues
  contents:
  - "2.9.  Billing Issues\n   Billing in the PSTN is typically based on who initiated\
    \ a call.  At\n   the moment, billing in a SIP network is neither consistent with\n\
    \   itself nor with the PSTN.  (A billing model for SIP should allow for\n   both\
    \ PSTN-style billing and non-PSTN billing.)  The example below\n   demonstrates\
    \ one such inconsistency.\n   Alice places a call to Bob.  Alice then blind transfers\
    \ Bob to Carol\n   through a PSTN gateway.  In current usage of REFER, Bob may\
    \ be billed\n   for a call he did not initiate (his UA originated the outgoing\n\
    \   dialog, however).  This is not necessarily a terrible thing, but it\n   demonstrates\
    \ a security concern (Bob must have appropriate local\n   policy to prevent fraud).\
    \  Also, Alice may wish to pay for Bob's\n   session with Carol.  There should\
    \ be a way to signal this in SIP.\n   Likewise, a Replacement call may maintain\
    \ the same billing\n   relationship as a Replaced call, so if Alice first calls\
    \ Carol, then\n   asks Bob to Replace this call, Alice may continue to receive\
    \ a bill.\n   Further work in SIP billing should define a way to set or discover\n\
    \   the direction of billing.\n"
- title: 3.  Catalog of Call Control Actions and Sample Features
  contents:
  - "3.  Catalog of Call Control Actions and Sample Features\n   Call control actions\
    \ can be categorized by the dialogs upon which\n   they operate.  The actions\
    \ may involve a single or multiple dialogs.\n   These dialogs can be early or\
    \ established.  Multiple dialogs may be\n   related in a conversation space to\
    \ form a conference or other\n   interesting media topologies.\n   It should be\
    \ noted that it is desirable to provide a means by which a\n   party can discover\
    \ the actions that may be performed on a dialog.\n   The interested party may\
    \ be independent or related to the dialogs.\n   One means of accomplishing this\
    \ is through the ability to define and\n   obtain URIs for these actions, as described\
    \ in Section 2.7.2.\n   Below are listed several call control \"actions\" that\
    \ establish or\n   modify dialogs and relate the participants in a conversation\
    \ space.\n   The names of the actions listed are for descriptive purposes only\n\
    \   (they are not normative).  This list of actions is not meant to be\n   exhaustive.\n\
    \   In the examples, all actions are initiated by the user \"Alice\"\n   represented\
    \ by UA \"A\".\n"
- title: 3.1.  Remote Call Control Actions on Early Dialogs
  contents:
  - "3.1.  Remote Call Control Actions on Early Dialogs\n   The following are a set\
    \ of actions that may be performed on a single\n   early dialog.  These actions\
    \ can be thought of as a set of remote\n   control operations.  For example, an\
    \ automaton might perform the\n   operation on behalf of a user.  Alternatively,\
    \ a user might use the\n   remote control in the form of an application to perform\
    \ the action on\n   the early dialog of a UA that may be out of reach.  All of\
    \ these\n   actions correspond to telling the UA how to respond to a request to\n\
    \   establish an early dialog.  These actions provide useful\n   functionality\
    \ for PDA-, PC-, and server-based applications that\n   desire the ability to\
    \ control a UA.  A proposed mechanism for this\n   type of functionality is described\
    \ in remote call control\n   [FEATURE-REF].\n"
- title: 3.1.1.  Remote Answer
  contents:
  - "3.1.1.  Remote Answer\n   A dialog is in some early dialog state such as 180\
    \ Ringing.  It may\n   be desirable to tell the UA to answer the dialog.  That\
    \ is, tell it\n   to send a 200 OK response to establish the dialog.\n"
- title: 3.1.2.  Remote Forward or Put
  contents:
  - "3.1.2.  Remote Forward or Put\n   It may be desirable to tell the UA to respond\
    \ with a 3xx class\n   response to forward an early dialog to another UA.\n"
- title: 3.1.3.  Remote Busy or Error Out
  contents:
  - "3.1.3.  Remote Busy or Error Out\n   It may be desirable to instruct the UA to\
    \ send an error response such\n   as 486 Busy Here.\n"
- title: 3.2.  Remote Call Control Actions on Single Dialogs
  contents:
  - "3.2.  Remote Call Control Actions on Single Dialogs\n   There is another useful\
    \ set of actions that operate on a single\n   established dialog.  These operations\
    \ are useful in building\n   productivity applications for aiding users in controlling\
    \ their\n   phones.  For example, a Customer Relationship Management (CRM)\n \
    \  application that sets up calls for a user eliminating the need for\n   the\
    \ user to actually enter an address.  These operations can also be\n   thought\
    \ of as remote control actions.  A proposed mechanism for this\n   type of functionality\
    \ is described in remote call control\n   [FEATURE-REF].\n"
- title: 3.2.1.  Remote Dial
  contents:
  - "3.2.1.  Remote Dial\n   This action instructs the UA to initiate a dialog.  This\
    \ action can\n   be performed using the REFER method.\n"
- title: 3.2.2.  Remote On and Off Hold
  contents:
  - "3.2.2.  Remote On and Off Hold\n   This action instructs the UA to put an established\
    \ dialog on hold.\n   Though this operation can conceptually be performed with\
    \ the REFER\n   method, there are no semantics defined as to what the referred\
    \ party\n   should do with the SDP.  There is no way to distinguish between the\n\
    \   desire to go on or off hold on a per-media stream basis.\n"
- title: 3.2.3.  Remote Hangup
  contents:
  - "3.2.3.  Remote Hangup\n   This action instructs the UA to terminate an early\
    \ or established\n   dialog.  A REFER request with the following Refer-To URI\
    \ and Target-\n   Dialog header field [RFC4538] performs this action.  Note: this\n\
    \   example does not show the full set of header fields.\n   REFER sip:carol@client.chicago.net\
    \ SIP/2.0\n   Refer-To: sip:bob@babylon.biloxi.example.com;method=BYE\n   Target-Dialog:\
    \ 13413098;local-tag=879738;remote-tag=023214\n"
- title: 3.3.  Call Control Actions on Multiple Dialogs
  contents:
  - "3.3.  Call Control Actions on Multiple Dialogs\n   These actions apply to a set\
    \ of related dialogs.\n"
- title: 3.3.1.  Transfer
  contents:
  - "3.3.1.  Transfer\n   This section describes how call transfer can be achieved\
    \ using\n   centralized (3pcc) and peer-to-peer (REFER) approaches.\n   The conversation\
    \ space changes as follows:\n    before            after\n   { A , B }  -->  \
    \ { C , B }\n   A replaces itself with C.\n   To make this happen using the peer-to-peer\
    \ approach, \"A\" would send\n   two SIP requests.  A shorthand for those requests\
    \ is shown below:\n   REFER B  Refer-To:C\n   BYE B\n   To make this happen using\
    \ the 3pcc approach instead, the controller\n   sends requests represented by\
    \ the shorthand below:\n   INVITE C (w/SDP of B)\n   reINVITE B (w/SDP of C)\n\
    \   BYE A\n   Features enabled by this action:\n   - blind transfer\n   - transfer\
    \ to a central mixer (some type of conference or forking)\n   - transfer to park\
    \ server (park)\n   - transfer to music on hold or announcement server\n   - transfer\
    \ to a \"queue\"\n   - transfer to a service (such as voice-dialog service)\n\
    \   - transition from local mixer to central mixer\n   This action is frequently\
    \ referred to as \"completing an attended\n   transfer\".  It is described in\
    \ more detail in [RFC5589].\n   Note that if a transfer requires URI hiding or\
    \ privacy, then the 3pcc\n   approach can more easily implement this.  For example,\
    \ if the URI of\n   C needs to be hidden from B, then the use of 3pcc helps accomplish\n\
    \   this.\n"
- title: 3.3.2.  Take
  contents:
  - "3.3.2.  Take\n   The conversation space changes as follows:\n   { B , C } -->\
    \ { B , A }\n   A forcibly replaces C with itself.  In most uses of this primitive,\
    \ A\n   is just \"un-replacing\" itself.\n   Using the peer-to-peer approach,\
    \ \"A\" sends:\n    INVITE B  Replaces: <dialog between B and C>\n   Using the\
    \ 3pcc approach (all requests sent from controller):\n    INVITE A (w/SDP of B)\n\
    \    reINVITE B (w/SDP of A)\n    BYE C\n   Features enabled by this action:\n\
    \   - transferee completes an attended transfer\n   - retrieve from central mixer\
    \ (not recommended)\n   - retrieve from music on hold or park\n   - retrieve from\
    \ queue\n   - call center take\n   - voice portal resuming ownership of a call\
    \ it originated\n   - answering-machine style screening (pickup)\n   - pickup\
    \ of a ringing call (i.e., early dialog)\n   Note that pick up of a ringing call\
    \ has perhaps some interesting\n   additional requirements.  First of all, it\
    \ is an early dialog as\n   opposed to an established dialog.  Secondly, the party\
    \ that is to\n   pick up the call may only wish to do so only while it is an early\n\
    \   dialog.  That is in the race condition where the ringing UA accepts\n   just\
    \ before it receives signaling from the party wishing to take the\n   call, the\
    \ taking party wishes to yield or cancel the take.  The goal\n   is to avoid yanking\
    \ an answered call from the called party.\n   This action is described in Replaces\
    \ [RFC3891] and in [RFC5589].\n"
- title: 3.3.3.  Add
  contents:
  - "3.3.3.  Add\n   Note that the following four actions are described in [RFC4579].\n\
    \   This is merely adding a participant to a SIP conference.  The\n   conversation\
    \ space changes as follows:\n   { A , B } --> { A , B , C }\n   A adds C to the\
    \ conversation.\n   Using the peer-to-peer approach, adding a party using local\
    \ mixing\n   requires no signaling.  To transition from a two-party call or a\n\
    \   locally mixed conference to central mixing, A could send the\n   following\
    \ requests:\n    REFER B  Refer-To: conference-URI\n    INVITE conference-URI\n\
    \    BYE B\n   To add a party to a conference:\n    REFER C  Refer-To: conference-URI\n\
    \                   or\n    REFER conference-URI  Refer-To: C\n   Using the 3pcc\
    \ approach to transition to centrally mixed, the\n   controller would send:\n\
    \    INVITE mixer leg 1 (w/SDP of A)\n    INVITE mixer leg 2 (w/SDP of B)\n  \
    \  INVITE C (late SDP)\n    reINVITE A (w/SDP of mixer leg 1)\n    reINVITE B\
    \ (w/SDP of mixer leg 2)\n    INVITE mixer leg3 (w/SDP of C)\n   To add a party\
    \ to a SIP conference:\n    INVITE C (late SDP)\n    INVITE conference-URI (w/SDP\
    \ of C)\n   Features enabled:\n   - standard conference feature\n   - call recording\n\
    \   - answering-machine style screening (screening)\n"
- title: 3.3.4.  Local Join
  contents:
  - "3.3.4.  Local Join\n   The conversation space changes like this:\n   { A , B\
    \ } , { A , C }  -->  { A , B , C }\n           or like this\n   { A , B } , {\
    \ C , D }  -->  { A , B , C , D }\n   A takes two conversation spaces and joins\
    \ them together into a single\n   space.\n   Using the peer-to-peer approach,\
    \ A can mix locally, or REFER the\n   participants of both conversation spaces\
    \ to the same central mixer\n   (as in Section 3.3.5).\n   For the 3pcc approach,\
    \ the call flows for inserting participants, and\n   joining and splitting conversation\
    \ spaces are tedious yet\n   straightforward, so these are left as an exercise\
    \ for the reader.\n   Features enabled:\n   - standard conference feature\n  \
    \ - leaving a sidebar to rejoin a larger conference\n"
- title: 3.3.5.  Insert
  contents:
  - "3.3.5.  Insert\n   The conversation space changes like this:\n   { B , C } -->\
    \ { A , B , C }\n   A inserts itself into a conversation space.\n   A proposed\
    \ mechanism for signaling this using the peer-to-peer\n   approach is to send\
    \ a new header field in an INVITE with \"joining\"\n   [RFC3911] semantics.  For\
    \ example:\n   INVITE B Join: <dialog id of B and C>\n   If B accepted the INVITE,\
    \ B would accept responsibility to set up the\n   dialogs and mixing necessary\
    \ (for example, to mix locally or to\n   transfer the participants to a central\
    \ mixer).\n   Features enabled:\n   - barge-in\n   - call center monitoring\n\
    \   - call recording\n"
- title: 3.3.6.  Split
  contents:
  - "3.3.6.  Split\n   { A , B , C , D } --> { A , B } , { C , D }\n   If using a\
    \ central conference with peer-to-peer\n    REFER C  Refer-To: conference-URI\
    \ (new URI)\n    REFER D  Refer-To: conference-URI (new URI)\n    BYE C\n    BYE\
    \ D\n   Features enabled:\n   - sidebar conversations during a larger conference\n"
- title: 3.3.7.  Near-Fork
  contents:
  - "3.3.7.  Near-Fork\n   A participates in two conversation spaces simultaneously:\n\
    \   { A, B } --> { B , A } & { A , C }\n   A is a participant in two conversation\
    \ spaces such that A sends the\n   same media to both spaces, and renders media\
    \ from both spaces,\n   presumably by mixing or rendering the media from both.\
    \  We can define\n   that A is the \"anchor\" point for both forks, each of which\
    \ is a\n   separate conversation space.\n   This action is purely local implementation\
    \ (it requires no special\n   signaling).  Local features such as switching calls\
    \ between the\n   background and foreground are possible using this media relationship.\n"
- title: 3.3.8.  Far-Fork
  contents:
  - "3.3.8.  Far-Fork\n   The conversation space diagram.\n   { A, B } --> { A , B\
    \ } & { B , C }\n   A requests B to be the \"anchor\" of two conversation spaces.\n\
    \   This is easily set up by creating a conference with two sub-\n   conferences\
    \ and setting the media policy appropriately such that B is\n   a participant\
    \ in both.  Media forking can also be set up using 3pcc,\n   as described in Section\
    \ 5.1 of RFC 3264 [RFC3264] (an offer/answer\n   model for SDP).  The session\
    \ descriptions for forking are quite\n   complex.  Controllers should verify that\
    \ endpoints can handle forked\n   media, for example, using prior configuration.\n\
    \   Features enabled:\n   - barge-in\n   - voice-portal services\n   - whisper\n\
    \   - key word detection\n   - sending DTMF somewhere else\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Call control primitives provide a powerful set\
    \ of features that can\n   be dangerous in the hands of an attacker.  To complicate\
    \ matters,\n   call control primitives are likely to be automatically authorized\n\
    \   without direct human oversight.\n   The class of attacks that are possible\
    \ using these tools includes the\n   ability to eavesdrop on calls, disconnect\
    \ calls, redirect calls,\n   render irritating content (including ringing) at\
    \ a user agent, cause\n   an action that has billing consequences, subvert billing\
    \ (theft-of-\n   service), and obtain private information.  Call control extensions\n\
    \   must take extra care to describe how these attacks will be prevented.\n  \
    \ We can also make some general observations about authorization and\n   trust\
    \ with respect to call control.  The security model is\n   dramatically dependent\
    \ on the signaling model chosen (see Section\n   2.3)\n   Let us first examine\
    \ the security model used in the 3pcc approach.\n   All signaling goes through\
    \ the controller, which is a trusted entity.\n   Traditional SIP authentication\
    \ and hop-by-hop encryption and message\n   integrity work fine in this environment,\
    \ but end-to-end encryption\n   and message integrity may not be possible.\n \
    \  When using the peer-to-peer approach, call control actions and\n   primitives\
    \ can be legitimately initiated by a) an existing\n   participant in the conversation\
    \ space, b) a former participant in the\n   conversation space, or c) an entity\
    \ trusted by one of the\n   participants.  For example, a participant always initiates\
    \ a\n   transfer; a retrieve from park (a take) is initiated on behalf of a\n\
    \   former participant, and a barge-in (insert or far-fork) is initiated\n   by\
    \ a trusted entity (an operator, for example).\n   Authenticating requests by\
    \ an existing participant or a trusted\n   entity can be done with baseline SIP\
    \ mechanisms.  In the case of\n   features initiated by a former participant,\
    \ these should be protected\n   against replay attacks, e.g., by using a unique\
    \ name or identifier\n   per invocation.  The Replaces header field exhibits this\
    \ behavior as\n   a by-product of its operation (once a Replaces operation is\n\
    \   successful, the dialog being Replaced no longer exists).  These\n   credentials\
    \ may, for example, need to be passed transitively or\n   fetched in an event\
    \ body.\n   To authorize call control primitives that trigger special behavior\n\
    \   (such as an INVITE with Replaces or Join semantics), the receiving\n   user\
    \ agent may have trouble finding appropriate credentials with\n   which to challenge\
    \ or authorize the request, as the sender may be\n   completely unknown to the\
    \ receiver, except through the introduction\n   of a third party.  These credentials\
    \ need to be passed transitively\n   in some way or fetched in an event body,\
    \ for example.\n   Standard SIP privacy and anonymity mechanisms such as [RFC3323]\
    \ and\n   [RFC3325] used during SIP session establishment apply equally well to\n\
    \   SIP call control operations.  SIP call control mechanisms should\n   address\
    \ privacy and anonymity issues associated with that operation.\n   For example,\
    \ privacy during a transfer operation using REFER is\n   discussed in Section\
    \ 7.2 of [RFC5589]\n"
- title: Appendix A.  Example Features
  contents:
  - "Appendix A.  Example Features\n   Primitives are defined in terms of their ability\
    \ to provide features.\n   These example features should require an amply robust\
    \ set of services\n   to demonstrate a useful set of primitives.  They are described\
    \ here\n   briefly.  Note that the descriptions of these features are non-\n \
    \  normative.  Note also that this document describes a mixture of both\n   features\
    \ originating in the world of telephones and features that are\n   clearly Internet\
    \ oriented.\n"
- title: Appendix A.1.  Attended Transfer
  contents:
  - "Appendix A.1.  Attended Transfer\n   In Attended Transfer [RFC5589], the transferring\
    \ party establishes a\n   session with the transfer target before completing the\
    \ transfer.\n"
- title: Appendix A.2.  Auto Answer
  contents:
  - "Appendix A.2.  Auto Answer\n   In Auto Answer, calls to a certain address or\
    \ URI answer immediately\n   via a speakerphone.  The Answer-Mode header field\
    \ [RFC5373] can be\n   used for this feature.\n"
- title: Appendix A.3.  Automatic Callback
  contents:
  - "Appendix A.3.  Automatic Callback\n   In Automatic Callback [RFC5359], Alice\
    \ calls Bob, but Bob is busy.\n   Alice would like Bob to call her automatically\
    \ when he is available.\n   When Bob hangs up, Alice's phone rings.  When Alice\
    \ answers, Bob's\n   phone rings.  Bob answers and they talk.\n"
- title: Appendix A.4.  Barge-In
  contents:
  - "Appendix A.4.  Barge-In\n   In Barge-in, Carol interrupts Alice who has an in-progress\
    \ call with\n   Bob.  In some variations, Alice forcibly joins a new conversation\n\
    \   with Carol, in other variations, all three parties are placed in the\n   same\
    \ conversation (basically a three-way conference).  Barge-in works\n   the same\
    \ as call monitoring except that it must indicate that the\n   send media stream\
    \ be mixed so that all of the other parties can hear\n   the stream from the UA\
    \ that is barging in.\n"
- title: Appendix A.5.  Blind Transfer
  contents:
  - "Appendix A.5.  Blind Transfer\n   In Blind Transfer [RFC5589], Alice is in a\
    \ conversation with Bob.\n   Alice asks Bob to contact Carol, but makes no attempt\
    \ to contact\n   Carol independently.  In many implementations, Alice does not\
    \ verify\n   Bob's success or failure in contacting Carol.\n"
- title: Appendix A.6.  Call Forwarding
  contents:
  - "Appendix A.6.  Call Forwarding\n   In call forwarding [RFC5359], before a dialog\
    \ is accepted, it is\n   redirected to another location, for example, because\
    \ the originally\n   intended recipient is busy, does not answer, is disconnected\
    \ from the\n   network, or has configured all requests to go elsewhere.\n"
- title: Appendix A.7.  Call Monitoring
  contents:
  - "Appendix A.7.  Call Monitoring\n   Call monitoring is a Join operation [RFC3911].\
    \  For example, a call\n   center supervisor joins an in-progress call for monitoring\
    \ purposes.\n   The monitoring UA sends a Join to the dialog to which it wants\
    \ to\n   listen.  It is able to discover the dialog via the dialog state on\n\
    \   the monitored UA.  The monitoring UA sends SDP in the INVITE that\n   indicates\
    \ receive-only media.  As the UA is only monitoring, it does\n   not matter whether\
    \ the UA indicates it wishes the send stream to be\n   mixed or point to point.\n"
- title: Appendix A.8.  Call Park
  contents:
  - "Appendix A.8.  Call Park\n   In Call Park [RFC5359], a participant parks a call\
    \ (essentially puts\n   the call on hold), and then retrieves it at a later time\
    \ (typically\n   from another location).  Call park requires the ability to put\
    \ a\n   dialog some place, advertise it to users in a pickup group, and to\n \
    \  uniquely identify it in a means that can be communicated (including\n   human\
    \ voice).  The dialog can be held locally on the UA parking the\n   dialog or\
    \ alternatively transferred to the park service for the\n   pickup group.  The\
    \ parked dialog then needs to be labeled (e.g.,\n   orbit 12) in a way that can\
    \ be communicated to the party that is to\n   pick up the call.  The UAs in the\
    \ pickup group discover the parked\n   dialog(s) via the dialog package from the\
    \ park service.  If the\n   dialog is parked locally, the park service merely\
    \ aggregates the\n   parked call states from the set of UAs in the pickup group.\n"
- title: Appendix A.9.  Call Pickup
  contents:
  - "Appendix A.9.  Call Pickup\n   There are two different features that are called\
    \ Call Pickup\n   [RFC5359].  The first is the pickup of a parked dialog.  The\
    \ UA from\n   which the dialog is to be picked up subscribes to the dialog state\
    \ of\n   the park service or the UA that has locally parked the dialog.\n   Dialogs\
    \ that are parked should be labeled with an identifier.  The\n   labels are used\
    \ by the UA to allow the user to indicate which dialog\n   is to be picked up.\
    \  The UA picking up the call invoked the URI in\n   the call state that is labeled\
    \ as replace-remote.\n   The other call pickup feature involves picking up an\
    \ early dialog\n   (typically ringing).  A party picks up a call that was ringing\
    \ at\n   another location.  One variation allows the caller to choose which\n\
    \   location, another variation just picks up any call in that user's\n   \"pickup\
    \ group\".  This feature uses some of the same primitives as the\n   pickup of\
    \ a parked call.  The call state of the UA ringing phone is\n   advertised using\
    \ the dialog package.  The UA that is to pick up the\n   early dialog subscribes\
    \ either directly to the ringing UA or to a\n   service aggregating the states\
    \ for UAs in the pickup group.  The call\n   state identifies early dialogs. \
    \ The UA uses the call state(s) to\n   help the user choose which early dialog\
    \ is to be picked up.  The UA\n   then invokes the URI in the call state labeled\
    \ as replace-remote.\n"
- title: Appendix A.10.  Call Return
  contents:
  - "Appendix A.10.  Call Return\n   In Call Return, Alice calls Bob.  Bob misses\
    \ the call or is\n   disconnected before he is finished talking to Alice.  Bob\
    \ invokes\n   Call return, which calls Alice, even if Alice did not provide her\n\
    \   real identity or location to Bob.\n"
- title: Appendix A.11.  Call Waiting
  contents:
  - "Appendix A.11.  Call Waiting\n   In Call Waiting, Alice is in a call, then receives\
    \ another call.\n   Alice can place the first call on hold, and talk with the\
    \ other\n   caller.  She can typically switch back and forth between the callers.\n"
- title: Appendix A.12.  Click-to-Dial
  contents:
  - "Appendix A.12.  Click-to-Dial\n   In Click-to-Dial [RFC5359], Alice looks in\
    \ her company directory for\n   Bob.  When she finds Bob, she clicks on a URI\
    \ to call him.  Her phone\n   rings (or possibly answers automatically), and when\
    \ she answers,\n   Bob's phone rings.  The application or server that hosts the\
    \ Click-\n   to-Dial application captures the URI to be dialed and can set up\
    \ the\n   call using 3pcc or can send a REFER request to the UA that is to dial\n\
    \   the address.  As users sometimes change their mind or wish to give up\n  \
    \ listing to a ringing or voicemail answered phone, this application\n   illustrates\
    \ the need to also have the ability to remotely hangup a\n   call.\n"
- title: Appendix A.13.  Conference Call
  contents:
  - "Appendix A.13.  Conference Call\n   In a Conference Call [RFC4579], there are\
    \ three or more active,\n   visible participants in the same conversation space.\n"
- title: Appendix A.14.  Consultative Transfer
  contents:
  - "Appendix A.14.  Consultative Transfer\n   In Consultative Transfer [RFC5589],\
    \ the transferring party\n   establishes a session with the target and mixes both\
    \ sessions\n   together so that all three parties can participate, then disconnects\n\
    \   leaving the transferee and transfer target with an active session.\n"
- title: Appendix A.15.  Distinctive Ring
  contents:
  - "Appendix A.15.  Distinctive Ring\n   In Distinctive Ring, incoming calls have\
    \ different ring cadences or\n   sample sounds depending on the From party, the\
    \ To party, or other\n   factors.  The target UA either makes a local decision\
    \ based on\n   information in an incoming INVITE (To, From, Contact, Request-URI)\
    \ or\n   trusts an Alert-Info header field [RFC3261] provided by the caller or\n\
    \   inserted by a trusted proxy.  In the latter case, the UA fetches the\n   content\
    \ described in the URI (typically via HTTP) and renders it to\n   the user.\n"
- title: Appendix A.16.  Do Not Disturb
  contents:
  - "Appendix A.16.  Do Not Disturb\n   In Do Not Disturb, Alice selects the Do Not\
    \ Disturb option.  Calls to\n   her either ring briefly or not at all and are\
    \ forwarded elsewhere.\n   Some variations allow specially authorized callers\
    \ to override this\n   feature and ring Alice anyway.  Do Not Disturb is best\
    \ implemented in\n   SIP using presence [RFC3856].\n"
- title: Appendix A.17.  Find-Me
  contents:
  - "Appendix A.17.  Find-Me\n   In Find-Me, Alice sets up complicated rules for how\
    \ she can be\n   reached (possibly using CPL (Call Processing Language) [RFC3880],\n\
    \   presence [RFC3856], or other factors).  When Bob calls Alice, his\n   call\
    \ is eventually routed to a temporary Contact where Alice happens\n   to be available.\n"
- title: Appendix A.18.  Hotline
  contents:
  - "Appendix A.18.  Hotline\n   In Hotline, Alice picks up a phone and is immediately\
    \ connected to\n   the technical support hotline, for example.  Hotline is also\n\
    \   sometimes known as a Ringdown line.\n"
- title: Appendix A.19.  IM Conference Alerts
  contents:
  - "Appendix A.19.  IM Conference Alerts\n   In IM Conference Alerts, a user receives\
    \ a notification as an instant\n   message whenever someone joins a conference\
    \ in which they are already\n   a participant.\n"
- title: Appendix A.20.  Inbound Call Screening
  contents:
  - "Appendix A.20.  Inbound Call Screening\n   In Inbound Call Screening, Alice doesn't\
    \ want to receive calls from\n   Matt.  Inbound Screening prevents Matt from disturbing\
    \ Alice.  In\n   some variations, this works even if Matt hides his identity.\n"
- title: Appendix A.21.  Intercom
  contents:
  - "Appendix A.21.  Intercom\n   In Intercom, Alice typically presses a button on\
    \ a phone that\n   immediately connects to another user or phone and causes that\
    \ phone\n   to play her voice over its speaker.  Some variations immediately set\n\
    \   up two-way communications, other variations require another button to\n  \
    \ be pressed to enable a two-way conversation.  The UA initiates a\n   dialog\
    \ using INVITE and the Answer-Mode: Auto header field as\n   described in [RFC5373].\
    \  The called UA accepts the INVITE with a 200\n   OK and automatically enables\
    \ the speakerphone.\n   Alternatively, this can be a local decision for the UA\
    \ to auto answer\n   based upon called-party identification.\n"
- title: Appendix A.22.  Message Waiting
  contents:
  - "Appendix A.22.  Message Waiting\n   In Message Waiting [RFC3842], Bob calls Alice\
    \ when she has stepped\n   away from her phone.  When she returns, a visible or\
    \ audible\n   indicator conveys that someone has left her a voicemail message.\
    \  The\n   message waiting indication may also convey how many messages are\n\
    \   waiting, from whom, at what time, and other useful pieces of\n   information.\n"
- title: Appendix A.23.  Music on Hold
  contents:
  - "Appendix A.23.  Music on Hold\n   In Music on Hold [RFC5359], when Alice places\
    \ a call with Bob on\n   hold, it replaces its audio with streaming content such\
    \ as music,\n   announcements, or advertisements.  Music on hold can be implemented\
    \ a\n   number of ways.  One way is to transfer the held call to a holding\n \
    \  service.  When the UA wishes to take the call off hold, it basically\n   performs\
    \ a take on the call from the holding service.  This involves\n   subscribing\
    \ to call state on the holding service and then invoking\n   the URI in the call\
    \ state labeled as replace-remote.\n   Alternatively, music on hold can be performed\
    \ as a local mixing\n   operation.  The UA holding the call can mix in the music\
    \ from the\n   music service via RTP (i.e., an additional dialog) or RTSP or other\n\
    \   streaming media source.  This approach is simpler (i.e., the held\n   dialog\
    \ does not move so there is less chance of loosing them) from a\n   protocol perspective,\
    \ however it does use more LAN bandwidth and\n   resources on the UA.\n"
- title: Appendix A.24.  Outbound Call Screening
  contents:
  - "Appendix A.24.  Outbound Call Screening\n   In Outbound Call Screening, Alice\
    \ is paged and unknowingly calls a\n   PSTN pay-service telephone number in the\
    \ Caribbean, but local policy\n   blocks her call, and possibly informs her why.\n"
- title: Appendix A.25.  Pre-Paid Calling
  contents:
  - "Appendix A.25.  Pre-Paid Calling\n   In Pre-paid Calling, Alice pays for a certain\
    \ currency or unit amount\n   of calling value.  When she places a call, she provides\
    \ her account\n   number somehow.  If her account runs out of calling value during\
    \ a\n   call, her call is disconnected or redirected to a service where she\n\
    \   can purchase more calling value.\n   For prepaid calling, the user's media\
    \ always passes through a device\n   that is trusted by the pre-paid provider.\
    \  This may be the other\n   endpoint (for example, a PSTN gateway).  In either\
    \ case, an\n   intermediary proxy or B2BUA can periodically verify the amount\
    \ of\n   time available on the pre-paid account, and use the session-timer\n \
    \  extension to cause the trusted endpoint (gateway) or intermediary\n   (media\
    \ relay) to send a reINVITE before that time runs out.  During\n   the reINVITE,\
    \ the SIP intermediary can re-verify the account and\n   insert another session-timer\
    \ header field.\n   Note that while most pre-paid systems on the PSTN use an IVR\
    \ to\n   collect the account number and destination, this isn't strictly\n   necessary\
    \ for a SIP-originated prepaid call.  SIP requests and SIP\n   URIs are sufficiently\
    \ expressive to convey the final destination, the\n   provider of the prepaid\
    \ service, the location from which the user is\n   calling, and the prepaid account\
    \ they want to use.  If a pre-paid IVR\n   is used, the mechanism described below\
    \ (Voice Portals) can be\n   combined as well.\n"
- title: Appendix A.26.  Presence-Enabled Conferencing
  contents:
  - "Appendix A.26.  Presence-Enabled Conferencing\n   In Presence-Enabled Conferencing,\
    \ Alice wants to set up a conference\n   call with Bob and Cathy when they all\
    \ happen to be available (rather\n   than scheduling a predefined time).  The\
    \ server providing the\n   application monitors their status, and calls all three\
    \ when they are\n   all \"online\", not idle, and not in another call.  This could\
    \ be\n   implemented using conferencing [RFC4579] and presence [RFC3264]\n   primitives.\n"
- title: Appendix A.27.  Single Line Extension/Multiple Line Appearance
  contents:
  - "Appendix A.27.  Single Line Extension/Multiple Line Appearance\n   In Single\
    \ Line Extension/Multiple Line Appearances, groups of phones\n   are all treated\
    \ as \"extensions\" of a single line or AOR.  A call for\n   one rings them all.\
    \  As soon as one answers, the others stop ringing.\n   If any extension is actively\
    \ in a conversation, another extension can\n   \"pick up\" and immediately join\
    \ the conversation.  This emulates the\n   behavior of a home telephone line with\
    \ multiple phones.  Incoming\n   calls ring all the extensions through basic parallel\
    \ forking.  Each\n   extension subscribes to dialog events from each other extension.\n\
    \   While one user has an active call, any other UA extension can insert\n   itself\
    \ into that conversation (it already knows the dialog\n   information) in the\
    \ same way as barge-in.\n   When implemented using SIP, this feature is known\
    \ as Shared\n   Appearances of an AOR [BLISS-SHARED].  Extensions to the dialog\n\
    \   package are used to convey appearance numbers (line numbers).\n"
- title: Appendix A.28.  Speakerphone Paging
  contents:
  - "Appendix A.28.  Speakerphone Paging\n   In Speakerphone Paging, Alice calls the\
    \ paging address and speaks.\n   Her voice is played on the speaker of every idle\
    \ phone in a\n   preconfigured group of phones.  Speakerphone paging can be\n\
    \   implemented using either multicast or through a simple multipoint\n   mixer.\
    \  In the multicast solution, the paging UA sends a multicast\n   INVITE with\
    \ send-only media in the SDP (see also [RFC3264]).  The\n   automatic answer and\
    \ enabling of the speakerphone is a locally\n   configured decision on the paged\
    \ UAs.  The paging UA sends RTP via\n   the multicast address indicated in the\
    \ SDP.\n   The multipoint solution is accomplished by sending an INVITE to the\n\
    \   multipoint mixer.  The mixer is configured to automatically answer\n   the\
    \ dialog.  The paging UA then sends REFER requests for each of the\n   UAs that\
    \ are to become paging speakers (the UA is likely to send out\n   a single REFER\
    \ that is parallel forked by the proxy server).  The UAs\n   performing as paging\
    \ speakers are configured to automatically answer\n   based upon caller identification\
    \ (e.g., the To field, URI, or\n   Referred-To header fields).\n   Finally, as\
    \ a third option, the user agent can send a mass-invitation\n   request to a conference\
    \ server, which would create a conference and\n   send INVITEs containing the\
    \ Answer-Mode: Auto header field to all\n   user agents in the paging group.\n"
- title: Appendix A.29.  Speed Dial
  contents:
  - "Appendix A.29.  Speed Dial\n   In Speed Dial, Alice dials an abbreviated number,\
    \ enters an alias, or\n   presses a special speed-dial button representing Bob.\
    \  Her action is\n   interpreted as if she specified the full address of Bob.\n"
- title: Appendix A.30.  Voice Message Screening
  contents:
  - "Appendix A.30.  Voice Message Screening\n   In Voice Message Screening, Bob calls\
    \ Alice.  Alice is screening her\n   calls, so Bob hears Alice's voicemail greeting.\
    \  Alice can hear Bob\n   leave his message.  If she decides to talk to Bob, she\
    \ can take the\n   call back from the voicemail system; otherwise, she can let\
    \ Bob leave\n   a message.  This emulates the behavior of a home telephone answering\n\
    \   machine.\n   At first, this is the same as Call Monitoring (Appendix A.7).\
    \  In\n   this case, the voicemail service is one of the UAs.  The UA screening\n\
    \   the message monitors the call on the voicemail service, and also\n   subscribes\
    \ to dialog information.  If the user screening their\n   messages decides to\
    \ answer, they perform a take from the voicemail\n   system (for example, send\
    \ an INVITE with Replaces to the UA leaving\n   the message).\n"
- title: Appendix A.31.  Voice Portal
  contents:
  - "Appendix A.31.  Voice Portal\n   Voice Portal is service that allows users to\
    \ access a portal site\n   using spoken dialog interaction.  For example, Alice\
    \ needs to\n   schedule a working dinner with her co-worker Carol.  Alice uses\
    \ a\n   voice portal to check Carol's flight schedule, find a restaurant near\n\
    \   her hotel, make a reservation, get directions there, and page Carol\n   with\
    \ this information.  A voice portal is essentially a complex\n   collection of\
    \ voice dialogs used to access interesting content.  One\n   of the most desirable\
    \ call control features of a Voice Portal is the\n   ability to start a new outgoing\
    \ call from within the context of the\n   Portal (to make a restaurant reservation,\
    \ or return a voicemail\n   message, for example).  Once the new call is over,\
    \ the user should be\n   able to return to the Portal by pressing a special key,\
    \ using some\n   DTMF sequence (e.g., a very long pound or hash tone), or by speaking\n\
    \   a key word (e.g., \"Main Menu\").\n   In order to accomplish this, the Voice\
    \ Portal starts with the\n   following media relationship:\n   { User , Voice\
    \ Portal }\n   The user then asks to make an outgoing call.  The Voice Portal\
    \ asks\n   the user to perform a far-fork.  In other words, the Voice Portal\n\
    \   wants the following media relationship:\n           { Target , User }  & \
    \ { User , Voice Portal }\n   The Voice Portal is now just listening for a key\
    \ word or the\n   appropriate DTMF.  As soon as the user indicates they are done,\
    \ the\n   Voice Portal takes the call from the old target, and we are back to\n\
    \   the original media relationship.\n   This feature can also be used by the\
    \ account number and phone number\n   collection menu in a pre-paid calling service.\
    \  A user can press a\n   DTMF sequence that presents them with the appropriate\
    \ menu again.\n"
- title: Appendix A.32.  Voicemail
  contents:
  - "Appendix A.32.  Voicemail\n   In Voicemail, Alice calls Bob who does not answer\
    \ or is not\n   available.  The call forwards to a voicemail server that plays\
    \ Bob's\n   greeting and records Alice's message for Bob.  An indication is sent\n\
    \   to Bob that a new message is waiting, and he retrieves the message at\n  \
    \ a later date.  This feature is implemented using features such as\n   Call Forwarding\
    \ (Appendix A.6) and the History-Info header field\n   [RFC4244] or voicemail\
    \ URI convention [RFC4458] and Message Waiting\n   [RFC3842] features.\n"
- title: Appendix A.33.  Whispered Call Waiting
  contents:
  - "Appendix A.33.  Whispered Call Waiting\n   In Whispered Call Waiting, Alice is\
    \ in a conversation with Bob.\n   Carol calls Alice.  Either Carol can \"whisper\"\
    \ to Alice directly\n   (\"Can you get lunch in 15 minutes?\"), or an automaton\
    \ whispers to\n   Alice informing her that Carol is trying to reach her.\n"
- title: Appendix B.  Acknowledgments
  contents:
  - "Appendix B.  Acknowledgments\n   The authors would like to acknowledge Ben Campbell\
    \ for his\n   contributions to the document and thank AC Mahendran, John Elwell,\n\
    \   and Xavier Marjou for their detailed Working-Group review of the\n   document.\
    \  The authors would like to thank Magnus Nystrom for his\n   review of the document.\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [RFC3261]        Rosenberg, J., Schulzrinne, H.,\
    \ Camarillo, G.,\n                    Johnston, A., Peterson, J., Sparks, R.,\
    \ Handley, M.,\n                    and E. Schooler, \"SIP: Session Initiation\
    \ Protocol\",\n                    RFC 3261, June 2002.\n   [RFC3264]        Rosenberg,\
    \ J. and H. Schulzrinne, \"An Offer/Answer\n                    Model with Session\
    \ Description Protocol (SDP)\",\n                    RFC 3264, June 2002.\n  \
    \ [RFC3265]        Roach, A., \"Session Initiation Protocol (SIP)-\n         \
    \           Specific Event Notification\", RFC 3265, June 2002.\n   [RFC4566]\
    \        Handley, M., Jacobson, V., and C. Perkins, \"SDP:\n                 \
    \   Session Description Protocol\", RFC 4566, July 2006.\n   [RFC5359]       \
    \ Johnston, A., Sparks, R., Cunningham, C., Donovan,\n                    S.,\
    \ and K. Summers, \"Session Initiation Protocol\n                    Service Examples\"\
    , BCP 144, RFC 5359, October 2008.\n   [RFC3725]        Rosenberg, J., Peterson,\
    \ J., Schulzrinne, H., and G.\n                    Camarillo, \"Best Current Practices\
    \ for Third Party\n                    Call Control (3pcc) in the Session Initiation\n\
    \                    Protocol (SIP)\", BCP 85, RFC 3725, April 2004.\n   [RFC3515]\
    \        Sparks, R., \"The Session Initiation Protocol (SIP)\n               \
    \     Refer Method\", RFC 3515, April 2003.\n   [RFC3891]        Mahy, R., Biggs,\
    \ B., and R. Dean, \"The Session\n                    Initiation Protocol (SIP)\
    \ \"Replaces\" Header\",\n                    RFC 3891, September 2004.\n   [RFC3911]\
    \        Mahy, R. and D. Petrie, \"The Session Initiation\n                  \
    \  Protocol (SIP) \"Join\" Header\", RFC 3911,\n                    October 2004.\n\
    \   [BLISS-PROBLEM]  Rosenberg, J., \"Basic Level of Interoperability for\n  \
    \                  Session Initiation Protocol (SIP)  Services (BLISS)\n     \
    \               Problem Statement\", Work in Progress, March 2009.\n   [RFC4235]\
    \        Rosenberg, J., Schulzrinne, H., and R. Mahy, \"An\n                 \
    \   INVITE-Initiated Dialog Event Package for the\n                    Session\
    \ Initiation Protocol (SIP)\", RFC 4235,\n                    November 2005.\n\
    \   [RFC4575]        Rosenberg, J., Schulzrinne, H., and O. Levin, \"A\n     \
    \               Session Initiation Protocol (SIP) Event Package for\n        \
    \            Conference State\", RFC 4575, August 2006.\n   [RFC3680]        Rosenberg,\
    \ J., \"A Session Initiation Protocol (SIP)\n                    Event Package\
    \ for Registrations\", RFC 3680,\n                    March 2004.\n   [RFC3856]\
    \        Rosenberg, J., \"A Presence Event Package for the\n                 \
    \   Session Initiation Protocol (SIP)\", RFC 3856,\n                    August\
    \ 2004.\n   [RFC4353]        Rosenberg, J., \"A Framework for Conferencing with\n\
    \                    the Session Initiation Protocol (SIP)\", RFC 4353,\n    \
    \                February 2006.\n   [RFC5629]        Rosenberg, J., \"A Framework\
    \ for Application\n                    Interaction in the Session Initiation Protocol\n\
    \                    (SIP)\", RFC 5629, October 2009.\n   [RFC5369]        Camarillo,\
    \ G., \"Framework for Transcoding with the\n                    Session Initiation\
    \ Protocol (SIP)\", RFC 5369,\n                    October 2008.\n   [XCON-CCMP]\
    \      Barnes, M., Boulton, C., Romano, S., and H.\n                    Schulzrinne,\
    \ \"Centralized Conferencing Manipulation\n                    Protocol\", Work\
    \ in Progress, February 2010.\n   [RFC5589]        Sparks, R., Johnston, A., and\
    \ D. Petrie, \"Session\n                    Initiation Protocol (SIP) Call Control\
    \ - Transfer\",\n                    BCP 149, RFC 5589, June 2009.\n   [RFC4579]\
    \        Johnston, A. and O. Levin, \"Session Initiation\n                   \
    \ Protocol (SIP) Call Control - Conferencing for User\n                    Agents\"\
    , BCP 119, RFC 4579, August 2006.\n   [RFC3840]        Rosenberg, J., Schulzrinne,\
    \ H., and P. Kyzivat,\n                    \"Indicating User Agent Capabilities\
    \ in the Session\n                    Initiation Protocol (SIP)\", RFC 3840, August\
    \ 2004.\n   [RFC3841]        Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n\
    \                    \"Caller Preferences for the Session Initiation\n       \
    \             Protocol (SIP)\", RFC 3841, August 2004.\n   [RFC3087]        Campbell,\
    \ B. and R. Sparks, \"Control of Service\n                    Context using SIP\
    \ Request-URI\", RFC 3087,\n                    April 2001.\n   [FEATURE-REF]\
    \    Audet, F., Johnston, A., Mahy, R., and C. Jennings,\n                   \
    \ \"Feature Referral in the Session Initiation Protocol\n                    (SIP)\"\
    , Work in Progress, February 2008.\n   [RFC4240]        Burger, E., Van Dyke,\
    \ J., and A. Spitzer, \"Basic\n                    Network Media Services with\
    \ SIP\", RFC 4240,\n                    December 2005.\n   [RFC4458]        Jennings,\
    \ C., Audet, F., and J. Elwell, \"Session\n                    Initiation Protocol\
    \ (SIP) URIs for Applications such\n                    as Voicemail and Interactive\
    \ Voice Response (IVR)\",\n                    RFC 4458, April 2006.\n   [RFC4538]\
    \        Rosenberg, J., \"Request Authorization through Dialog\n             \
    \       Identification in the Session Initiation Protocol\n                  \
    \  (SIP)\", RFC 4538, June 2006.\n   [RFC3880]        Lennox, J., Wu, X., and\
    \ H. Schulzrinne, \"Call\n                    Processing Language (CPL): A Language\
    \ for User\n                    Control of Internet Telephony Services\", RFC\
    \ 3880,\n                    October 2004.\n   [RFC5373]        Willis, D. and\
    \ A. Allen, \"Requesting Answering Modes\n                    for the Session\
    \ Initiation Protocol (SIP)\",\n                    RFC 5373, November 2008.\n\
    \   [RFC3842]        Mahy, R., \"A Message Summary and Message Waiting\n     \
    \               Indication Event Package for the Session Initiation\n        \
    \            Protocol (SIP)\", RFC 3842, August 2004.\n   [BLISS-SHARED]   Johnston,\
    \ A., Soroushnejad, M., and V.\n                    Venkataramanan, \"Shared Appearances\
    \ of a Session\n                    Initiation Protocol (SIP) Address of Record\
    \ (AOR)\",\n                    Work in Progress, October 2009.\n   [RFC4244]\
    \        Barnes, M., \"An Extension to the Session Initiation\n              \
    \      Protocol (SIP) for Request History Information\",\n                   \
    \ RFC 4244, November 2005.\n   [RFC4313]        Oran, D., \"Requirements for Distributed\
    \ Control of\n                    Automatic Speech Recognition (ASR), Speaker\n\
    \                    Identification/Speaker Verification (SI/SV), and\n      \
    \              Text-to-Speech (TTS) Resources\", RFC 4313,\n                 \
    \   December 2005.\n   [RFC3323]        Peterson, J., \"A Privacy Mechanism for\
    \ the Session\n                    Initiation Protocol (SIP)\", RFC 3323, November\
    \ 2002.\n   [RFC3325]        Jennings, C., Peterson, J., and M. Watson, \"Private\n\
    \                    Extensions to the Session Initiation Protocol (SIP)\n   \
    \                 for Asserted Identity within Trusted Networks\",\n         \
    \           RFC 3325, November 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rohan Mahy\n   Unaffiliated\n   EMail: rohan@ekabal.com\n\
    \   Robert Sparks\n   Tekelec\n   EMail: rjsparks@nostrum.com\n   Jonathan Rosenberg\n\
    \   jdrosen.net\n   EMail: jdrosen@jdrosen.net\n   Dan Petrie\n   SIPez\n   EMail:\
    \ dan.ietf@sipez.com\n   Alan Johnston (editor)\n   Avaya\n   EMail: alan.b.johnston@gmail.com\n"
