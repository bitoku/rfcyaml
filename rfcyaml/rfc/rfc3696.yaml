- title: __initial_text__
  contents:
  - '    Application Techniques for Checking and Transformation of Names

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Many Internet applications have been designed to deduce top-level\n\
    \   domains (or other domain name labels) from partial information.  The\n   introduction\
    \ of new top-level domains, especially non-country-code\n   ones, has exposed\
    \ flaws in some of the methods used by these\n   applications.  These flaws make\
    \ it more difficult, or impossible, for\n   users of the applications to access\
    \ the full Internet.  This memo\n   discusses some of the techniques that have\
    \ been used and gives some\n   guidance for minimizing their negative impact as\
    \ the domain name\n   environment evolves.  This document draws summaries of the\
    \ applicable\n   rules together in one place and supplies references to the actual\n\
    \   standards.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Restrictions on domain (DNS) names . . . . . . . . .\
    \ . . . . .  3\n   3.  Restrictions on email addresses  . . . . . . . . . . .\
    \ . . . .  5\n   4.  URLs and URIs  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  7\n       4.1.  URI syntax definitions and issues  . . . . . . . . .\
    \ . .  7\n       4.2.  The HTTP URL . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n       4.3.  The MAILTO URL . . . . . . . . . . . . . . . . . . . . .\
    \  9\n       4.4.  Guessing domain names in web contexts  . . . . . . . . . 11\n\
    \   5.  Implications of internationalization . . . . . . . . . . . . . 11\n  \
    \ 6.  Summary  . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n   7.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 13\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 13\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 14\n       9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . 14\n       9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . 15\n   10. Author's Address . . . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n   11. Full Copyright Statement . . . .\
    \ . . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Designers of user interfaces to Internet applications have\
    \ often\n   found it useful to examine user-provided values for validity before\n\
    \   passing them to the Internet tools themselves.  This type of test,\n   most\
    \ commonly involving syntax checks or application of other rules\n   to domain\
    \ names, email addresses, or \"web addresses\" (URLs or,\n   occasionally, extended\
    \ URI forms (see Section 4)) may enable better-\n   quality diagnostics for the\
    \ user than might be available from the\n   protocol itself.  Local validity tests\
    \ on values are also thought to\n   improve the efficiency of back-office processing\
    \ programs and to\n   reduce the load on the protocols themselves.  Certainly,\
    \ they are\n   consistent with the well-established principle that it is better\
    \ to\n   detect errors as early as possible.\n   The tests must, however, be made\
    \ correctly or at least safely.  If\n   criteria are applied that do not match\
    \ the protocols, users will be\n   inconvenienced, addresses and sites will effectively\
    \ become\n   inaccessible to some groups, and business and communications\n  \
    \ opportunities will be lost.  Experience in recent years indicates\n   that syntax\
    \ tests are often performed incorrectly and that tests for\n   top-level domain\
    \ names are applied using obsolete lists and\n   conventions.  We assume that\
    \ most of these incorrect tests are the\n   result of the inability to conveniently\
    \ locate exact definitions for\n   the criteria to be applied.  This document\
    \ draws summaries of the\n   applicable rules together in one place and supplies\
    \ references to the\n   actual standards.  It does not add anything to those standards;\
    \ it\n   merely draws the information together into a form that may be more\n\
    \   accessible.\n   Many experts on Internet protocols believe that tests and\
    \ rules of\n   these sorts should be avoided in applications and that the tests\
    \ in\n   the protocols and back-office systems should be relied on instead.\n\
    \   Certainly implementations of the protocols cannot assume that the\n   data\
    \ passed to them will be valid.  Unless the standards specify\n   particular behavior,\
    \ this document takes no position on whether or\n   not the testing is desirable.\
    \  It only identifies the correct tests\n   to be made if tests are to be applied.\n\
    \   The sections that follow discuss domain names, email addresses, and\n   URLs.\n"
- title: 2.  Restrictions on domain (DNS) names
  contents:
  - "2.  Restrictions on domain (DNS) names\n   The authoritative definitions of the\
    \ format and syntax of domain\n   names appear in RFCs 1035 [RFC1035], 1123 [RFC1123],\
    \ and 2181\n   [RFC2181].\n   Any characters, or combination of bits (as octets),\
    \ are permitted in\n   DNS names.  However, there is a preferred form that is\
    \ required by\n   most applications.  This preferred form has been the only one\n\
    \   permitted in the names of top-level domains, or TLDs.  In general, it\n  \
    \ is also the only form permitted in most second-level names registered\n   in\
    \ TLDs, although some names that are normally not seen by users obey\n   other\
    \ rules.  It derives from the original ARPANET rules for the\n   naming of hosts\
    \ (i.e., the \"hostname\" rule) and is perhaps better\n   described as the \"\
    LDH rule\", after the characters that it permits.\n   The LDH rule, as updated,\
    \ provides that the labels (words or strings\n   separated by periods) that make\
    \ up a domain name must consist of only\n   the ASCII [ASCII] alphabetic and numeric\
    \ characters, plus the hyphen.\n   No other symbols or punctuation characters\
    \ are permitted, nor is\n   blank space.  If the hyphen is used, it is not permitted\
    \ to appear at\n   either the beginning or end of a label.  There is an additional\
    \ rule\n   that essentially requires that top-level domain names not be all-\n\
    \   numeric.\n   When it is necessary to express labels with non-character octets,\
    \ or\n   to embed periods within labels, there is a mechanism for keying them\n\
    \   in that utilizes an escape sequence.  RFC 1035 [RFC1035] should be\n   consulted\
    \ if that mechanism is needed (most common applications,\n   including email and\
    \ the Web, will generally not permit those escaped\n   strings).  A special encoding\
    \ is now available for non-ASCII\n   characters, see the brief discussion in Section\
    \ 5.\n   Most internet applications that reference other hosts or systems\n  \
    \ assume they will be supplied with \"fully-qualified\" domain names,\n   i.e.,\
    \ ones that include all of the labels leading to the root,\n   including the TLD\
    \ name.  Those fully-qualified domain names are then\n   passed to either the\
    \ domain name resolution protocol itself or to the\n   remote systems.  Consequently,\
    \ purported DNS names to be used in\n   applications and to locate resources generally\
    \ must contain at least\n   one period (\".\") character.  Those that do not are\
    \ either invalid or\n   require the application to supply additional information.\
    \  Of course,\n   this principle does not apply when the purpose of the application\
    \ is\n   to process or query TLD names themselves.  The DNS specification also\n\
    \   permits a trailing period to be used to denote the root, e.g.,\n   \"a.b.c\"\
    \ and \"a.b.c.\" are equivalent, but the latter is more explicit\n   and is required\
    \ to be accepted by applications.  This convention is\n   especially important\
    \ when a TLD name is being referred to directly.\n   For example, while \".COM\"\
    \ has become the popular terminology for\n   referring to that top-level domain,\
    \ \"COM.\" would be strictly and\n   technically correct in talking about the\
    \ DNS, since it shows that\n   \"COM\" is a top-level domain name.\n   There is\
    \ a long history of applications moving beyond the \"one or\n   more periods\"\
    \ test in an attempt to verify that a valid TLD name is\n   actually present.\
    \  They have done this either by applying some\n   heuristics to the form of the\
    \ name or by consulting a local list of\n   valid names.  The historical heuristics\
    \ are no longer effective.  If\n   one is to keep a local list, much more effort\
    \ must be devoted to\n   keeping it up-to-date than was the case several years\
    \ ago.\n   The heuristics were based on the observation that, since the DNS was\n\
    \   first deployed, all top-level domain names were two, three, or four\n   characters\
    \ in length.  All two-character names were associated with\n   \"country code\"\
    \ domains, with the specific labels (with a few early\n   exceptions) drawn from\
    \ the ISO list of codes for countries and\n   similar entities [IS3166].  The\
    \ three-letter names were \"generic\"\n   TLDs, whose function was not country-specific,\
    \ and there was exactly\n   one four-letter TLD, the infrastructure domain \"\
    ARPA.\"  [RFC1591].\n   However, these length-dependent rules were conventions,\
    \ rather than\n   anything on which the protocols depended.\n   Before the mid-1990s,\
    \ lists of valid top-level domain names changed\n   infrequently.  New country\
    \ codes were gradually, and then more\n   rapidly, added as the Internet expanded,\
    \ but the list of generic\n   domains did not change at all between the establishment\
    \ of the \"INT.\"\n   domain in 1988 and ICANN's allocation of new generic TLDs\
    \ in 2000.\n   Some application developers responded by assuming that any two-letter\n\
    \   domain name could be valid as a TLD, but the list of generic TLDs was\n  \
    \ fixed and could be kept locally and tested.  Several of these\n   assumptions\
    \ changed as ICANN started to allocate new top-level\n   domains: one two-letter\
    \ domain that does not appear in the ISO 3166-1\n   table [ISO.3166.1988] was\
    \ tentatively approved, and new domains were\n   created with three, four, and\
    \ even six letter codes.\n   As of the first quarter of 2003, the list of valid,\
    \ non-country,\n   top-level domains was .AERO, .BIZ, .COM, .COOP, .EDU, .GOV,\
    \ .INFO,\n   .INT, .MIL, .MUSEUM, .NAME, .NET, .ORG, .PRO, and .ARPA.  ICANN is\n\
    \   expected to expand that list at regular intervals, so the list that\n   appears\
    \ here should not be used in testing.  Instead, systems that\n   filter by testing\
    \ top-level domain names should regularly update\n   their local tables of TLDs\
    \ (both \"generic\" and country-code-related)\n   by polling the list published\
    \ by IANA [DomainList].  It is\n   likely that the better strategy has now become\
    \ to make the \"at least\n   one period\" test, to verify LDH conformance (including\
    \ verification\n   that the apparent TLD name is not all-numeric), and then to\
    \ use the\n   DNS to determine domain name validity, rather than trying to maintain\n\
    \   a local list of valid TLD names.\n   A DNS label may be no more than 63 octets\
    \ long.  This is in the form\n   actually stored; if a non-ASCII label is converted\
    \ to encoded\n   \"punycode\" form (see Section 5), the length of that form may\
    \ restrict\n   the number of actual characters (in the original character set)\
    \ that\n   can be accommodated.  A complete, fully-qualified, domain name must\n\
    \   not exceed 255 octets.\n   Some additional mechanisms for guessing correct\
    \ domain names when\n   incomplete information is provided have been developed\
    \ for use with\n   the web and are discussed in Section 4.4.\n"
- title: 3.  Restrictions on email addresses
  contents:
  - "3.  Restrictions on email addresses\n   Reference documents: RFC 2821 [RFC2821]\
    \ and RFC 2822 [RFC2822]\n   Contemporary email addresses consist of a \"local\
    \ part\" separated from\n   a \"domain part\" (a fully-qualified domain name)\
    \ by an at-sign (\"@\").\n   The syntax of the domain part corresponds to that\
    \ in the previous\n   section.  The concerns identified in that section about\
    \ filtering and\n   lists of names apply to the domain names used in an email\
    \ context as\n   well.  The domain name can also be replaced by an IP address\
    \ in\n   square brackets, but that form is strongly discouraged except for\n \
    \  testing and troubleshooting purposes.\n   The local part may appear using the\
    \ quoting conventions described\n   below.  The quoted forms are rarely used in\
    \ practice, but are\n   required for some legitimate purposes.  Hence, they should\
    \ not be\n   rejected in filtering routines but, should instead be passed to the\n\
    \   email system for evaluation by the destination host.\n   The exact rule is\
    \ that any ASCII character, including control\n   characters, may appear quoted,\
    \ or in a quoted string.  When quoting\n   is needed, the backslash character\
    \ is used to quote the following\n   character.  For example\n      Abc\\@def@example.com\n\
    \   is a valid form of an email address.  Blank spaces may also appear,\n   as\
    \ in\n      Fred\\ Bloggs@example.com\n   The backslash character may also be\
    \ used to quote itself, e.g.,\n      Joe.\\\\Blow@example.com\n   In addition\
    \ to quoting using the backslash character, conventional\n   double-quote characters\
    \ may be used to surround strings.  For example\n      \"Abc@def\"@example.com\n\
    \      \"Fred Bloggs\"@example.com\n   are alternate forms of the first two examples\
    \ above.  These quoted\n   forms are rarely recommended, and are uncommon in practice,\
    \ but, as\n   discussed above, must be supported by applications that are\n  \
    \ processing email addresses.  In particular, the quoted forms often\n   appear\
    \ in the context of addresses associated with transitions from\n   other systems\
    \ and contexts; those transitional requirements do still\n   arise and, since\
    \ a system that accepts a user-provided email address\n   cannot \"know\" whether\
    \ that address is associated with a legacy\n   system, the address forms must\
    \ be accepted and passed into the email\n   environment.\n   Without quotes, local-parts\
    \ may consist of any combination of\n   alphabetic characters, digits, or any\
    \ of the special characters\n      ! # $ % & ' * + - / = ?  ^ _ ` . { | } ~\n\
    \   period (\".\") may also appear, but may not be used to start or end the\n\
    \   local part, nor may two or more consecutive periods appear.  Stated\n   differently,\
    \ any ASCII graphic (printing) character other than the\n   at-sign (\"@\"), backslash,\
    \ double quote, comma, or square brackets may\n   appear without quoting.  If\
    \ any of that list of excluded characters\n   are to appear, they must be quoted.\
    \  Forms such as\n      user+mailbox@example.com\n      customer/department=shipping@example.com\n\
    \      $A12345@example.com\n      !def!xyz%abc@example.com\n      _somename@example.com\n\
    \   are valid and are seen fairly regularly, but any of the characters\n   listed\
    \ above are permitted.  In the context of local parts,\n   apostrophe (\"'\")\
    \ and acute accent (\"`\") are ordinary characters, not\n   quoting characters.\
    \  Some of the characters listed above are used in\n   conventions about routing\
    \ or other types of special handling by some\n   receiving hosts.  But, since\
    \ there is no way to know whether the\n   remote host is using those conventions\
    \ or just treating these\n   characters as normal text, sending programs (and\
    \ programs evaluating\n   address validity) must simply accept the strings and\
    \ pass them on.\n   In addition to restrictions on syntax, there is a length limit\
    \ on\n   email addresses.  That limit is a maximum of 64 characters (octets)\n\
    \   in the \"local part\" (before the \"@\") and a maximum of 255 characters\n\
    \   (octets) in the domain part (after the \"@\") for a total length of 320\n\
    \   characters.  Systems that handle email should be prepared to process\n   addresses\
    \ which are that long, even though they are rarely\n   encountered.\n"
- title: 4.  URLs and URIs
  contents:
  - '4.  URLs and URIs

    '
- title: 4.1.  URI syntax definitions and issues
  contents:
  - "4.1.  URI syntax definitions and issues\n   The syntax for URLs (Uniform Resource\
    \ Locators) is specified in\n   [RFC1738].  The syntax for the more general \"\
    URI\" (Uniform Resource\n   Identifier) is specified in [RFC2396].  The URI syntax\
    \ is extremely\n   general, with considerable variations permitted according to\
    \ the type\n   of \"scheme\" (e.g., \"http\", \"ftp\", \"mailto\") that is being\
    \ used.\n   While it is possible to use the general syntax rules of RFC 2396 to\n\
    \   perform syntax checks, they are general enough --essentially only\n   specifying\
    \ the separation of the scheme name and \"scheme specific\n   part\" with a colon\
    \ (\":\") and excluding some characters that must be\n   escaped if used-- to\
    \ provide little significant filtering or\n   validation power.\n   The following\
    \ characters are reserved in many URIs -- they must be\n   used for either their\
    \ URI-intended purpose or must be encoded.  Some\n   particular schemes may either\
    \ broaden or relax these restrictions\n   (see the following sections for URLs\
    \ applicable to \"web pages\" and\n   electronic mail), or apply them only to\
    \ particular URI component\n   parts.\n      ; / ? : @ & = + $ , ?\n   In addition,\
    \ control characters, the space character, the double-\n   quote (\") character,\
    \ and the following special characters\n      < > # %\n   are generally forbidden\
    \ and must either be avoided or escaped, as\n   discussed below.\n   The colon\
    \ after the scheme name, and the percent sign used to escape\n   characters, are\
    \ specifically reserved for those purposes, although\n   \":\" may also be used\
    \ elsewhere in some schemes.\n   When it is necessary to encode these, or other,\
    \ characters, the\n   method used is to replace it with a percent-sign (\"%\"\
    ) followed by\n   two hexidecimal digits representing its octet value.  See section\n\
    \   2.4.1 of [RFC2396] for an exact definition.  Unless it is used as a\n   delimiter\
    \ of the URI scheme itself, any character may optionally be\n   encoded this way;\
    \ systems that are testing URI syntax should be\n   prepared for these encodings\
    \ to appear in any component of the URI\n   except the scheme name itself.\n \
    \  A \"generic URI\" syntax is specified and is more restrictive, but\n   using\
    \ it to test URI strings requires that one know whether or not\n   the particular\
    \ scheme in use obeys that syntax.  Consequently,\n   applications that intend\
    \ to check or validate URIs should normally\n   identify the scheme name and then\
    \ apply scheme-specific tests.  The\n   rules for two of those -- HTTP [RFC1738]\
    \ and MAILTO [RFC2368] URLs --\n   are discussed below, but the author of an application\
    \ which intends\n   to make very precise checks, or to reject particular syntax\
    \ rather\n   than just warning the user, should consult the relevant scheme-\n\
    \   definition documents for precise syntax and relationships.\n"
- title: 4.2.  The HTTP URL
  contents:
  - "4.2.  The HTTP URL\n   Absolute HTTP URLs consist of the scheme name, a host\
    \ name (expressed\n   as a domain name or IP address), and optional port number,\
    \ and then,\n   optionally, a path, a search part, and a fragment identifier.\
    \  These\n   are separated, respectively, by a colon and the two slashes that\n\
    \   precede the host name, a colon, a slash, a question mark, and a hash\n   mark\
    \ (\"#\").  So we have\n      http://host:port/path?search#fragment\n      http://host/path/\n\
    \      http://host/path#fragment\n      http://host/path?search\n      http://host\n\
    \   and other variations on that form.  There is also a \"relative\" form,\n \
    \  but it almost never appears in text that a user might, e.g., enter\n   into\
    \ a form.  See [RFC2616] for details.\n   The characters\n      / ; ?\n   are\
    \ reserved within the path and search parts and must be encoded;\n   the first\
    \ of these may be used unencoded, and is often used within\n   the path, to designate\
    \ hierarchy.\n"
- title: 4.3.  The MAILTO URL
  contents:
  - "4.3.  The MAILTO URL\n   MAILTO is a URL type whose content is an email address.\
    \  It can be\n   used to encode any of the email address formats discussed in\
    \ Section\n   3 above.  It can also support multiple addresses and the inclusion\
    \ of\n   headers (e.g., Subject lines) within the body of the URL.  MAILTO is\n\
    \   authoritatively defined in RFC 2368 [RFC2368]; anyone expecting to\n   accept\
    \ and test multiple addresses or mail header or body formats\n   should consult\
    \ that document carefully.\n   In accepting text for, or validating, a MAILTO\
    \ URL, it is important\n   to note that, while it can be used to encode any valid\
    \ email address,\n   it is not sufficient to copy an email address into a MAILTO\
    \ URL since\n   email addresses may include a number of characters that are invalid\n\
    \   in, or have reserved uses for, URLs.  Those characters must be\n   encoded,\
    \ as outlined in Section 4.1 above, when the addresses are\n   mapped into the\
    \ URL form.  Conversely, addresses in MAILTO URLs\n   cannot, in general, be copied\
    \ directly into email contexts, since few\n   email programs will reverse the\
    \ decodings (and doing so might be\n   interpreted as a protocol violation).\n\
    \   The following characters may appear in MAILTO URLs only with the\n   specific\
    \ defined meanings given.  If they appear in an email address\n   (i.e., for some\
    \ other purpose), they must be encoded:\n      :       The colon in \"mailto:\"\
    \n      < > # \" % { } | \\ ^ ~ `\n      These characters are \"unsafe\" in any\
    \ URL, and must always be\n      encoded.\n   The following characters must also\
    \ be encoded if they appear in a\n   MAILTO URL\n      ? & =\n         Used to\
    \ delimit headers and their values when these are encoded\n         into URLs.\n\
    \   Some examples may be helpful:\n   +-------------------------+-----------------------------+-----------+\n\
    \   |      Email address      |         MAILTO URL          |   Notes   |\n  \
    \ +-------------------------+-----------------------------+-----------+\n   |\
    \     Joe@example.com     |  mailto:joe@example.com     |     1     |\n   |  \
    \                       |                             |           |\n   |  user+mailbox@example\
    \   |         mailto:             |     2     |\n   |          .com          \
    \ |  user%2Bmailbox@example     |           |\n   |                         |\
    \          .com               |           |\n   |                         |  \
    \                           |           |\n   |  customer/department=   |  mailto:customer%2F\
    \         |     3     |\n   |  shipping@example.com   | department=shipping@example\
    \ |           |\n   |                         |          .com               |\
    \           |\n   |                         |                             |  \
    \         |\n   |   $A12345@example.com   |  mailto:$A12345@example     |    \
    \ 4     |\n   |                         |          .com               |      \
    \     |\n   |                         |                             |        \
    \   |\n   |  !def!xyz%abc@example   |  mailto:!def!xyz%25abc      |     5    \
    \ |\n   |          .com           |       @example.com          |           |\n\
    \   |                         |                             |           |\n  \
    \ |  _somename@example.com  |  mailto:_somename@example   |     4     |\n   |\
    \                         |          .com               |           |\n   +-------------------------+-----------------------------+-----------+\n\
    \                                  Table 1\n   Notes on Table\n   1.  No characters\
    \ appear in the email address that require escaping,\n       so the body of the\
    \ MAILTO URL is identical to the email address.\n   2.  There is actually some\
    \ uncertainty as to whether or not the \"+\"\n       characters requires escaping\
    \ in MAILTO URLs (the standards are\n       not precisely clear).  But, since\
    \ any character in the address\n       specification may optionally be encoded,\
    \ it is probably safer to\n       encode it.\n   3.  The \"/\" character is generally\
    \ reserved in URLs, and must be\n       encoded as %2F.\n   4.  Neither the \"\
    $\" nor the \"_\" character are given any special\n       interpretation in MAILTO\
    \ URLs, so need not be encoded.\n   5.  While the \"!\" character has no special\
    \ interpretation, the \"%\"\n       character is used to introduce encoded sequences\
    \ and hence it\n       must always be encoded.\n"
- title: 4.4.  Guessing domain names in web contexts
  contents:
  - "4.4.  Guessing domain names in web contexts\n   Several web browsers have adopted\
    \ a practice that permits an\n   incomplete domain name to be used as input instead\
    \ of a complete URL.\n   This has, for example, permitted users to type \"microsoft\"\
    \ and have\n   the browser interpret the input as \"http://www.microsoft.com/\"\
    .\n   Other browser versions have gone even further, trying to build DNS\n   names\
    \ up through a series of heuristics, testing each variation in\n   turn to see\
    \ if it appears in the DNS, and accepting the first one\n   found as the intended\
    \ domain name.  Still, others automatically\n   invoke search engines if no period\
    \ appears or if the reference fails.\n   If any of these approaches are to be\
    \ used, it is often critical that\n   the browser recognize the complete list\
    \ of TLDs.  If an incomplete\n   list is used, complete domain names may not be\
    \ recognized as such and\n   the system may try to turn them into completely different\
    \ names.  For\n   example, \"example.aero\" is a fully-qualified name, since \"\
    AERO.\" is a\n   TLD name.  But, if the system doesn't recognize \"AERO\" as a\
    \ TLD name,\n   it is likely to try to look up \"example.aero.com\" and\n   \"\
    www.example.aero.com\" (and then fail or find the wrong host), rather\n   than\
    \ simply looking up the user-supplied name.\n   As discussed in Section 2 above,\
    \ there are dangers associated with\n   software that attempts to \"know\" the\
    \ list of top-level domain names\n   locally and take advantage of that knowledge.\
    \  These name-guessing\n   heuristics are another example of that situation: if\
    \ the lists are\n   up-to-date and used carefully, the systems in which they are\
    \ embedded\n   may provide an easier, and more attractive, experience for at least\n\
    \   some users.  But finding the wrong host, or being unable to find a\n   host\
    \ even when its name is precisely known, constitute bad\n   experiences by any\
    \ measure.\n   More generally, there have been bad experiences with attempts to\n\
    \   \"complete\" domain names by adding additional information to them.\n   These\
    \ issues are described in some detail in RFC 1535 [RFC1535].\n"
- title: 5.  Implications of internationalization
  contents:
  - "5.  Implications of internationalization\n   The IETF has adopted a series of\
    \ proposals ([RFC3490] - [RFC3492])\n   whose purpose is to permit encoding internationalized\
    \ (i.e., non-\n   ASCII) names in the DNS.  The primary standard, and the group\n\
    \   generically, are known as \"IDNA\".  The actual strings stored in the\n  \
    \ DNS are in an encoded form: the labels begin with the characters\n   \"xn--\"\
    \ followed by the encoded string.  Applications should be\n   prepared to accept\
    \ and process the encoded form (those strings are\n   consistent with the \"LDH\
    \ rule\" (see Section 2) so should not raise\n   any separate issues) and the\
    \ use of local, and potentially other,\n   characters as appropriate to local\
    \ systems and circumstances.\n   The IDNA specification describes the exact process\
    \ to be used to\n   validate a name or encoded string.  The process is sufficiently\n\
    \   complex that shortcuts or heuristics, especially for versions of\n   labels\
    \ written directly in Unicode or other coded character sets, are\n   likely to\
    \ fail and cause problems.  In particular, the strings cannot\n   be validated\
    \ with syntax or semantic rules of any of the usual sorts:\n   syntax validity\
    \ is defined only in terms of the result of executing a\n   particular function.\n\
    \   In addition to the restrictions imposed by the protocols themselves,\n   many\
    \ domains are implementing rules about just which non-ASCII names\n   they will\
    \ permit to be registered (see, e.g., [JET], [RegRestr]).\n   This work is still\
    \ relatively new, and the rules and conventions are\n   likely to be different\
    \ for each domain, or at least each language or\n   script group.  Attempting\
    \ to test for those rules in a client program\n   to see if a user-supplied name\
    \ might possibly exist in the relevant\n   domain would almost certainly be ill-advised.\n\
    \   One quick local test however, may be reasonable: as of the time of\n   this\
    \ writing, there should be no instances of labels in the DNS that\n   start with\
    \ two characters, followed by two hyphens, where the two\n   characters are not\
    \ \"xn\" (in, of course, either upper or lower case).\n   Such label strings,\
    \ if they appear, are probably erroneous or\n   obsolete, and it may be reasonable\
    \ to at least warn the user about\n   them.\n   There is ongoing work in the IETF\
    \ and elsewhere to define\n   internationalized formats for use in other protocols,\
    \ including email\n   addresses.  Those forms may or may not conform to existing\
    \ rules for\n   ASCII-only identifiers; anyone designing evaluators or filters\
    \ should\n   watch that work closely.\n"
- title: 6.  Summary
  contents:
  - "6.  Summary\n   When an application accepts a string from the user and ultimately\n\
    \   passes it on to an API for a protocol, the desirability of testing or\n  \
    \ filtering the text in any way not required by the protocol itself is\n   hotly\
    \ debated.  If it must divide the string into its components, or\n   otherwise\
    \ interpret it, it obviously must make at least enough tests\n   to validate that\
    \ process.  With, e.g., domain names or email\n   addresses that can be passed\
    \ on untouched, the appropriateness of\n   trying to figure out which ones are\
    \ valid and which ones are not\n   requires a more complex decision, one that\
    \ should include\n   considerations of how to make exactly the correct tests and\
    \ to keep\n   information that changes and evolves up-to-date.  A test containing\n\
    \   obsolete information, can be extremely frustrating for potential\n   correspondents\
    \ or customers and may harm desired relationships.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Since this document merely summarizes the requirements\
    \ of existing\n   standards, it does not introduce any new security issues.  However,\n\
    \   many of the techniques that motivate the document raise important\n   security\
    \ concerns of their own.  Rejecting valid forms of domain\n   names, email addresses,\
    \ or URIs often denies service to the user of\n   those entities.  Worse, guessing\
    \ at the user's intent when an\n   incomplete address, or other string, is given\
    \ can result in\n   compromises to privacy or accuracy of reference if the wrong\
    \ target\n   is found and returned.  From a security standpoint, the optimum\n\
    \   behavior is probably to never guess, but instead, to force the user\n   to\
    \ specify exactly what is wanted.  When that position involves a\n   tradeoff\
    \ with an acceptable user experience, good judgment should be\n   used and the\
    \ fact that it is a tradeoff recognized.\n   Some characters have special or privileged\
    \ meanings on some systems\n   (i.e., ` on Unix).  Applications should be careful\
    \ to escape those\n   locally if necessary.  By the same token, they are valid,\
    \ and should\n   not be disallowed locally, or escaped when transmitted through\n\
    \   Internet protocols, for such reasons if a remote site chooses to use\n   them.\n\
    \   The presence of local checking does not permit remote checking to be\n   bypassed.\
    \  Note that this can apply to a single machine; in\n   particular, a local MTA\
    \ should not assume that a local MUA has\n   properly escaped locally-significant\
    \ special characters.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The author would like to express his appreciation for\
    \ helpful\n   comments from Harald Alvestrand, Eric A. Hall, and the RFC Editor,\n\
    \   and for partial support of this work from SITA.  Responsibility for\n   any\
    \ errors remains, of course, with the author.\n   The first Internet-Draft on\
    \ this subject was posted in February 2003.\n   The document was submitted to\
    \ the RFC Editor on 20 June 2003,\n   returned for revisions on 19 August, and\
    \ resubmitted on 5 September\n   2003.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1035]       Mockapetris, P., \"Domain names\
    \ - implementation and\n                   specification\", STD 13, RFC 1035,\
    \ November 1987.\n   [RFC1123]       Braden, R., Ed., \"Requirements for Internet\
    \ Hosts -\n                   Application and Support\", STD 3, RFC 1123, October\n\
    \                   1989.\n   [RFC1535]       Gavron, E., \"A Security Problem\
    \ and Proposed\n                   Correction With Widely Deployed DNS Software\"\
    , RFC\n                   1535, October 1993.\n   [RFC1738]       Berners-Lee,\
    \ T., Masinter, L. and M. McCahill,\n                   \"Uniform Resource Locators\
    \ (URL)\", RFC 1738, December\n                   1994.\n   [RFC2181]       Elz,\
    \ R. and R. Bush, \"Clarifications to the DNS\n                   Specification\"\
    , RFC 2181, July 1997.\n   [RFC2368]       Hoffman, P., Masinter, L. and J. Zawinski,\
    \ \"The\n                   mailto URL scheme\", RFC 2368, July 1998.\n   [RFC2396]\
    \       Berners-Lee, T., Fielding, R. and L. Masinter,\n                   \"\
    Uniform Resource Identifiers (URI): Generic Syntax\",\n                   RFC\
    \ 2396, August 1998.\n   [RFC2616]       Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H.,\n                   Masinter, L., Leach, P. and T. Berners-Lee,\n\
    \                   \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616,\n \
    \                  June 1999.\n   [RFC2821]       Klensin, J., Ed., \"Simple Mail\
    \ Transfer Protocol\",\n                   RFC 2821, April 2001.\n   [RFC2822]\
    \       Resnick, P., Ed., \"Internet Message Format\", RFC\n                 \
    \  2822, April 2001.\n   [RFC3490]       Faltstrom, P., Hoffman, P. and A. Costello,\n\
    \                   \"Internationalizing Domain Names in Applications\n      \
    \             (IDNA)\", RFC 3490, March 2003.\n   [RFC3491]       Hoffman, P.\
    \ and M. Blanchet, \"Nameprep: A Stringprep\n                   Profile for Internationalized\
    \ Domain Names (IDN)\",\n                   RFC 3491, March 2003.\n   [RFC3492]\
    \       Costello, A., \"Punycode: A Bootstring encoding of\n                 \
    \  Unicode for Internationalized Domain Names in\n                   Applications\
    \ (IDNA)\", RFC 3492, March 2003.\n   [ASCII]         American National Standards\
    \ Institute (formerly\n                   United States of America Standards Institute),\
    \ \"USA\n                   Code for Information Interchange\", ANSI X3.4-1968.\n\
    \                   ANSI X3.4-1968 has been replaced by newer versions\n     \
    \              with slight modifications, but the 1968 version\n             \
    \      remains definitive for the Internet.\n   [DomainList]    Internet Assigned\
    \ Numbers Authority (IANA), Untitled\n                   alphabetical list of\
    \ current top-level domains.\n                   http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n\
    \                   ftp://data.iana.org/TLD/tlds-alpha-by-domain.txt\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ISO.3166.1988] International Organization for\
    \ Standardization,\n                   \"Codes for the representation of names\
    \ of countries,\n                   3rd edition\", ISO Standard 3166, August 1988.\n\
    \   [JET]           Konishi, K., et al., \"Internationalized Domain Names\n  \
    \                 Registration and Administration Guideline for\n            \
    \       Chinese, Japanese and Korean\", Work in Progress.\n   [RFC1591]      \
    \ Postel, J., \"Domain Name System Structure and\n                   Delegation\"\
    , RFC 1591, March 1994.\n   [RegRestr]      Klensin, J., \"Registration of Internationalized\n\
    \                   Domain Names: Overview and Method\", Work in Progress,\n \
    \                  February 2004.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   John C Klensin\n   1770 Massachusetts Ave, #322\n \
    \  Cambridge, MA  02140\n   USA\n   Phone: +1 617 491 5735\n   EMail: john-ietf@jck.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
