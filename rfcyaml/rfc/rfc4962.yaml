- title: __initial_text__
  contents:
  - "   Guidance for Authentication, Authorization, and Accounting (AAA)\n       \
    \                      Key Management\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides guidance to designers of Authentication,\n\
    \   Authorization, and Accounting (AAA) key management protocols.  The\n   guidance\
    \ is also useful to designers of systems and solutions that\n   include AAA key\
    \ management protocols.  Given the complexity and\n   difficulty in designing\
    \ secure, long-lasting key management\n   algorithms and protocols by experts\
    \ in the field, it is almost\n   certainly inappropriate for IETF working groups\
    \ without deep\n   expertise in the area to be designing their own key management\n\
    \   algorithms and protocols based on Authentication, Authorization, and\n   Accounting\
    \ (AAA) protocols.  The guidelines in this document apply to\n   documents requesting\
    \ publication as IETF RFCs.  Further, these\n   guidelines will be useful to other\
    \ standards development\n   organizations (SDOs) that specify AAA key management.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Specification .................................3\n  \
    \    1.2. Mandatory to Implement .....................................3\n    \
    \  1.3. Terminology ................................................3\n   2. AAA\
    \ Environment Concerns ........................................5\n   3. AAA Key\
    \ Management Requirements .................................7\n   4. AAA Key Management\
    \ Recommendations .............................13\n   5. Security Considerations\
    \ ........................................14\n   6. Normative References ...........................................15\n\
    \   7. Informative References .........................................15\n  \
    \ Appendix: AAA Key Management History ..............................20\n   Acknowledgments\
    \ ...................................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides architectural guidance to designers\
    \ of AAA key\n   management protocols.  The guidance is also useful to designers\
    \ of\n   systems and solutions that include AAA key management protocols.\n  \
    \ AAA key management often includes a collection of protocols, one of\n   which\
    \ is the AAA protocol.  Other protocols are used in conjunction\n   with the AAA\
    \ protocol to provide an overall solution.  These other\n   protocols often provide\
    \ authentication and security association\n   establishment.\n   Given the complexity\
    \ and difficulty in designing secure, long-lasting\n   key management algorithms\
    \ and protocols by experts in the field, it\n   is almost certainly inappropriate\
    \ for IETF working groups without\n   deep expertise in the area to be designing\
    \ their own key management\n   algorithms and protocols based on Authentication,\
    \ Authorization and\n   Accounting (AAA) protocols.  These guidelines apply to\
    \ documents\n   requesting publication as IETF RFCs.  Further, these guidelines\
    \ will\n   be useful to other standards development organizations (SDOs) that\n\
    \   specify AAA key management that depends on IETF specifications for\n   protocols\
    \ such as Extensible Authentication Protocol (EAP) [RFC3748],\n   Remote Authentication\
    \ Dial-In User Service (RADIUS) [RFC2865], and\n   Diameter [RFC3588].\n   In\
    \ March 2003, at the IETF 56 AAA Working Group Session, Russ Housley\n   gave\
    \ a presentation on \"Key Management in AAA\" [H].  That\n   presentation established\
    \ the vast majority of the requirements\n   contained in this document.  Over\
    \ the last three years, this\n   collection of requirements have become known\
    \ as the \"Housley\n   Criteria\".\n"
- title: 1.1.  Requirements Specification
  contents:
  - "1.1.  Requirements Specification\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,\
    \ SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they\
    \ appear in this\n   document, are to be interpreted as described in RFC 2119\
    \ [RFC2119].\n   An AAA key management proposal is not compliant with this\n \
    \  specification if it fails to satisfy one or more of the MUST or MUST\n   NOT\
    \ statements.  An AAA key management proposal that satisfies all\n   the MUST,\
    \ MUST NOT, SHOULD, and SHOULD NOT statements is said to be\n   \"unconditionally\
    \ compliant\"; one that satisfies all the MUST and MUST\n   NOT statements but\
    \ not all the SHOULD or SHOULD NOT requirements is\n   said to be \"conditionally\
    \ compliant\".\n"
- title: 1.2.  Mandatory to Implement
  contents:
  - "1.2.  Mandatory to Implement\n   The guidance provided in this document is mandatory\
    \ to implement.\n   However, it is not mandatory to use.  That is, configuration\
    \ at the\n   time of deployment may result in a deployed implementation that does\n\
    \   not conform with all of these requirements.\n   For example, [RFC4072] enables\
    \ EAP keying material to be delivered\n   from a AAA server to an AAA client without\
    \ disclosure to third\n   parties.  Thus, key confidentiality is mandatory to\
    \ implement in\n   Diameter [RFC3588].  However, key confidentiality is not mandatory\
    \ to\n   use.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This section defines terms that are used in this document.\n\
    \      AAA\n         Authentication, Authorization, and Accounting (AAA).  AAA\n\
    \         protocols include RADIUS [RFC2865] and Diameter [RFC3588].\n      Authenticator\n\
    \         The party initiating EAP authentication.  The term\n         authenticator\
    \ is used in [802.1X], and authenticator has the\n         same meaning in this\
    \ document.\n      Backend authentication server\n         A backend authentication\
    \ server is an entity that provides an\n         authentication service to an\
    \ authenticator.  This terminology\n         is also used in [802.1X].\n     \
    \ CHAP\n         Challenge Handshake Authentication Protocol; a one-way\n    \
    \     challenge/response authentication protocol defined in\n         [RFC1994].\n\
    \      EAP\n         Extensible Authentication Protocol, defined in [RFC3748].\n\
    \      EAP server\n         The entity that terminates the EAP authentication\
    \ method with\n         the peer.  In the case where no backend authentication\
    \ server\n         is used, the EAP server is part of the authenticator.  In the\n\
    \         case where the authenticator operates in pass-through mode, the\n  \
    \       EAP server is located on the backend authentication server.\n      Key\
    \ Wrap\n         The encryption of one symmetric cryptographic key in another.\n\
    \         The algorithm used for the encryption is called a key wrap\n       \
    \  algorithm or a key encryption algorithm.  The key used in the\n         encryption\
    \ process is called a key-encryption key (KEK).\n      PAP\n         Password\
    \ Authentication Protocol; a deprecated cleartext\n         password PPP authentication\
    \ protocol, originally defined in\n         [RFC1334].\n      Party\n        \
    \ A party is a processing entity that can be identified as a\n         single\
    \ role in a protocol.\n      Peer\n         The end of the link that responds\
    \ to the authenticator.  In\n         [802.1X], this end is known as the supplicant.\n\
    \      PPP\n         Point-to-Point Protocol, defined in [RFC1661], provides support\n\
    \         for multiprotocol serial datalinks.  PPP is the primary IP\n       \
    \  datalink used for dial-in NAS connection service.\n      Secure Association\
    \ Protocol\n         A protocol for managing security associations derived from\
    \ EAP\n         and/or AAA exchanges.  The protocol establishes a security\n \
    \        association, which includes symmetric keys and a context for\n      \
    \   the use of the keys.  An example of a Secure Association\n         Protocol\
    \ is the 4-way handshake defined within [802.11i].\n      Session Keys\n     \
    \    Keying material used to protect data exchanged after\n         authentication\
    \ has successfully completed, using the negotiated\n         ciphersuite.\n  \
    \    Network Access Server (NAS)\n         A device that provides an access service\
    \ for a user to a\n         network.  The service may be a network connection,\
    \ or a value\n         added service such as terminal emulation, as described\
    \ in\n         [RFC2881].\n      4-Way Handshake\n         A Secure Association\
    \ Protocol, defined in [802.11i], which\n         confirms mutual possession of\
    \ a Pairwise Master Key by two\n         parties and distributes a Group Key.\n"
- title: 2.  AAA Environment Concerns
  contents:
  - "2.  AAA Environment Concerns\n   Examples of serious flaws plague the history\
    \ of key management\n   protocol development, starting with the very first attempt\
    \ to define\n   a key management protocol in the open literature, which was published\n\
    \   in 1978 [NS].  A flaw and a fix were published in 1981 [DS], and the\n   fix\
    \ was broken in 1994 [AN].  In 1995 [L], a new flaw was found in\n   the original\
    \ 1978 version, in an area not affected by the 1981/1994\n   issue.  All of these\
    \ flaws were blindingly obvious once described,\n   yet no one spotted them earlier.\
    \  Note that the original protocol, if\n   it were revised to employ certificates,\
    \ which of course had yet to be\n   invented, was only three messages.  Many proposed\
    \ AAA key management\n   schemes are significantly more complicated.\n   This\
    \ bit of history shows that key management protocols are subtle.\n   Experts can\
    \ easily miss a flaw.  As a result, peer review by multiple\n   experts is essential,\
    \ especially since many proposed AAA key\n   management schemes are significantly\
    \ more complicated.  In addition,\n   formal methods can help uncover problems\
    \ [M].\n   AAA-based key management is being incorporated into standards\n   developed\
    \ by the IETF and other standards development organizations\n   (SDOs), such as\
    \ IEEE 802.  However, due to ad hoc development of\n   AAA-based key management,\
    \ AAA-based key distribution schemes have\n   poorly understood security properties,\
    \ even when well-studied\n   cryptographic algorithms are employed.  More academic\
    \ research is\n   needed to fully understand the security properties of AAA-based\
    \ key\n   management in the diverse protocol environments where it is being\n\
    \   employed today.  In the absence of such research results, pragmatic\n   guidance\
    \ based on sound security engineering principles is needed.\n   In addition to\
    \ the need for interoperability, cryptographic algorithm\n   independent solutions\
    \ are greatly preferable.  Without algorithm\n   independence, the AAA-based key\
    \ management protocol must be changed\n   whenever a problem is discovered with\
    \ any of the selected algorithms.\n   As AAA history shows, problems are inevitable.\
    \  Problems can surface\n   due to age or design failure.\n   DES [FIPS46] was\
    \ a well-designed encryption algorithm, and it\n   provided protection for many\
    \ years.  Yet, the 56-bit key size was\n   eventually overcome by Moore's Law.\
    \  No significant cryptographic\n   deficiencies have been discovered in DES.\n\
    \   The history of AAA underlines the importance of algorithm\n   independence\
    \ as flaws have been found in authentication mechanisms\n   such as CHAP, MS-CHAPv1\
    \ [SM1], MS-CHAPv2 [SM2], Kerberos\n   [W][BM][DLS], and LEAP [B].  Unfortunately,\
    \ RADIUS [RFC2865] mandates\n   use of the MD5 algorithm for integrity protection,\
    \ which has known\n   deficiencies, and RADIUS has no provisions to negotiate\
    \ substitute\n   algorithms.  Similarly, the vendor-specific key wrap mechanism\n\
    \   defined in [RFC2548] has no provisions to negotiate substitute\n   algorithms.\n\
    \   The principle of least privilege is an important design guideline.\n   This\
    \ principle requires that a party be given no more privilege than\n   necessary\
    \ to perform the task assigned to them.  Ensuring least\n   privilege requires\
    \ clear identification of the tasks assigned to each\n   party, and explicit determination\
    \ of the minimum set of privileges\n   required to perform those tasks.  Only\
    \ those privileges necessary to\n   perform the tasks are granted.  By denying\
    \ to parties unneeded\n   privileges, those denied privileges cannot be used to\
    \ circumvent\n   security policy or enable attackers.  With this principle in\
    \ mind,\n   AAA key management schemes need to be designed in a manner where each\n\
    \   party has only the privileges necessary to perform their role.  That\n   is,\
    \ no party should have access to any keying material that is not\n   needed to\
    \ perform their own role.  A party has access to a particular\n   key if it has\
    \ access to all of the secret information needed to\n   derive it.\n   EAP is\
    \ being used in new ways.  The inclusion of support for EAP\n   within Internet\
    \ Key Exchange Protocol version 2 (IKEv2) and the\n   standardization of robust\
    \ Wireless LAN security [802.11i] based on\n   EAP are two examples.  EAP has\
    \ also been proposed within IEEE 802.16e\n   [802.16e] and by the IETF PANA Working\
    \ Group.  AAA-based key\n   management is being incorporated into standards developed\
    \ by the IETF\n   and other standards development organizations (SDOs), such as\
    \ IEEE\n   802.  However, due to ad hoc development of AAA-based key management,\n\
    \   AAA-based key distribution schemes have poorly understood security\n   properties,\
    \ even when well-studied cryptographic algorithms are\n   employed.  More academic\
    \ research is needed to fully understand the\n   security properties of AAA-based\
    \ key management in the diverse\n   protocol environments where it is being employed\
    \ today.  In the\n   absence of research results, pragmatic guidance based on\
    \ sound\n   security engineering principles is needed.\n   EAP selects one end-to-end\
    \ authentication mechanism.  The mechanisms\n   defined in [RFC3748] only support\
    \ unilateral authentication, and they\n   do not support mutual authentication\
    \ or key derivation.  As a result,\n   these mechanisms do not fulfill the security\
    \ requirements for many\n   deployment scenarios, including Wireless LAN authentication\n\
    \   [RFC4017].\n   To ensure adequate security and interoperability, EAP applications\n\
    \   need to specify mandatory-to-implement algorithms.  As described in\n   [RFC3748],\
    \ EAP methods seeking publication as an IETF RFC need to\n   document their security\
    \ claims.  However, some EAP methods are not\n   based on well-studied models,\
    \ which makes the validity of these\n   security claims difficult to determine.\n\
    \   In the context of EAP, the EAP peer and server are the parties\n   involved\
    \ in the EAP method conversation, and they gain access to key\n   material when\
    \ the conversation completes successfully.  However, the\n   lower-layer needs\
    \ keying material to provide the desired protection\n   through the use of cryptographic\
    \ mechanisms.  As a result, a \"pass-\n   through\" mode is used to provide the\
    \ keying material, and the lower-\n   layer keying material is replicated from\
    \ the AAA server to the\n   authenticator.  The only parties authorized to obtain\
    \ all of the\n   keying material are the EAP peer and server; the authenticator\n\
    \   obtains only the keying material necessary for its specific role.  No\n  \
    \ other party can obtain direct access to any of the keying material;\n   however,\
    \ other parties may receive keys that are derived from this\n   keying material\
    \ for a specific purpose as long as the requirements\n   defined in the next section\
    \ are met.\n"
- title: 3.  AAA Key Management Requirements
  contents:
  - "3.  AAA Key Management Requirements\n   The overall goal of AAA key management\
    \ is to provide cryptographic\n   keying material in situations where key derivation\
    \ cannot be used by\n   the peer and authenticator.  It may not be possible because\
    \ the\n   authenticator lacks computational power, because it lacks the\n   resources\
    \ necessary to implement the various authentication\n   mechanisms that might\
    \ be required, or because it is undesirable for\n   each authenticator to engage\
    \ in a separate key management\n   conversation.\n   This section provides guidance\
    \ to AAA protocol designers, EAP method\n   designers, and security association\
    \ protocol designers.  Acceptable\n   solutions MUST meet all of these requirements.\n\
    \      Cryptographic algorithm independent\n         The AAA key management protocol\
    \ MUST be cryptographic algorithm\n         independent.  However, an EAP method\
    \ MAY depend on a specific\n         cryptographic algorithm.  The ability to\
    \ negotiate the use of a\n         particular cryptographic algorithm provides\
    \ resilience against\n         compromise of a particular cryptographic algorithm.\
    \  Algorithm\n         independence is also REQUIRED with a Secure Association\n\
    \         Protocol if one is defined.  This is usually accomplished by\n     \
    \    including an algorithm identifier and parameters in the\n         protocol,\
    \ and by specifying the algorithm requirements in the\n         protocol specification.\
    \  While highly desirable, the ability to\n         negotiate key derivation functions\
    \ (KDFs) is not required.  For\n         interoperability, at least one suite\
    \ of mandatory-to-implement\n         algorithms MUST be selected.  Note that\
    \ without protection by\n         IPsec as described in [RFC3579] Section 4.2,\
    \ RADIUS [RFC2865]\n         does not meet this requirement, since the integrity\
    \ protection\n         algorithm cannot be negotiated.\n         This requirement\
    \ does not mean that a protocol must support\n         both public-key and symmetric-key\
    \ cryptographic algorithms.  It\n         means that the protocol needs to be\
    \ structured in such a way\n         that multiple public-key algorithms can be\
    \ used whenever a\n         public-key algorithm is employed.  Likewise, it means\
    \ that the\n         protocol needs to be structured in such a way that multiple\n\
    \         symmetric-key algorithms can be used whenever a symmetric-key\n    \
    \     algorithm is employed.\n      Strong, fresh session keys\n         While\
    \ preserving algorithm independence, session keys MUST be\n         strong and\
    \ fresh.  Each session deserves an independent session\n         key.  Fresh keys\
    \ are required even when a long replay counter\n         (that is, one that \"\
    will never wrap\") is used to ensure that\n         loss of state does not cause\
    \ the same counter value to be used\n         more than once with the same session\
    \ key.\n         Some EAP methods are capable of deriving keys of varying\n  \
    \       strength, and these EAP methods MUST permit the generation of\n      \
    \   keys meeting a minimum equivalent key strength.  BCP 86\n         [RFC3766]\
    \ offers advice on appropriate key sizes.  The National\n         Institute for\
    \ Standards and Technology (NIST) also offers\n         advice on appropriate\
    \ key sizes in [SP800-57].\n         A fresh cryptographic key is one that is\
    \ generated specifically\n         for the intended use.  In this situation, a\
    \ secure association\n         protocol is used to establish session keys.  The\
    \ AAA protocol\n         and EAP method MUST ensure that the keying material supplied\
    \ as\n         an input to session key derivation is fresh, and the secure\n \
    \        association protocol MUST generate a separate session key for\n     \
    \    each session, even if the keying material provided by EAP is\n         cached.\
    \  A cached key persists after the authentication\n         exchange has completed.\
    \  For the AAA/EAP server, key caching\n         can happen when state is kept\
    \ on the server.  For the NAS or\n         client, key caching can happen when\
    \ the NAS or client does not\n         destroy keying material immediately following\
    \ the derivation of\n         session keys.\n         Session keys MUST NOT be\
    \ dependent on one another.  Multiple\n         session keys may be derived from\
    \ a higher-level shared secret\n         as long as a one-time value, usually\
    \ called a nonce, is used to\n         ensure that each session key is fresh.\
    \  The mechanism used to\n         generate session keys MUST ensure that the\
    \ disclosure of one\n         session key does not aid the attacker in discovering\
    \ any other\n         session keys.\n      Limit key scope\n         Following\
    \ the principle of least privilege, parties MUST NOT\n         have access to\
    \ keying material that is not needed to perform\n         their role.  A party\
    \ has access to a particular key if it has\n         access to all of the secret\
    \ information needed to derive it.\n         Any protocol that is used to establish\
    \ session keys MUST\n         specify the scope for session keys, clearly identifying\
    \ the\n         parties to whom the session key is available.\n      Replay detection\
    \ mechanism\n         The AAA key management protocol exchanges MUST be replay\n\
    \         protected, including AAA, EAP, and Secure Association Protocol\n   \
    \      exchanges.  Replay protection allows a protocol message\n         recipient\
    \ to discard any message that was recorded during a\n         previous legitimate\
    \ dialogue and presented as though it\n         belonged to the current dialogue.\n\
    \      Authenticate all parties\n         Each party in the AAA key management\
    \ protocol MUST be\n         authenticated to the other parties with whom they\
    \ communicate.\n         Authentication mechanisms MUST maintain the confidentiality\
    \ of\n         any secret values used in the authentication process.\n       \
    \  When a secure association protocol is used to establish session\n         keys,\
    \ the parties involved in the secure association protocol\n         MUST identify\
    \ themselves using identities that are meaningful\n         in the lower-layer\
    \ protocol environment that will employ the\n         session keys.  In this situation,\
    \ the authenticator and peer\n         may be known by different identifiers in\
    \ the AAA protocol\n         environment and the lower-layer protocol environment,\
    \ making\n         authorization decisions difficult without a clear key scope.\n\
    \         If the lower-layer identifier of the peer will be used to make\n   \
    \      authorization decisions, then the pair of identifiers\n         associated\
    \ with the peer MUST be authorized by the\n         authenticator and/or the AAA\
    \ server.\n         AAA protocols, such as RADIUS [RFC2865] and Diameter [RFC3588],\n\
    \         provide a mechanism for the identification of AAA clients;\n       \
    \  since the EAP authenticator and AAA client are always co-\n         resident,\
    \ this mechanism is applicable to the identification of\n         EAP authenticators.\n\
    \         When multiple base stations and a \"controller\" (such as a WLAN\n \
    \        switch) comprise a single EAP authenticator, the \"base station\n   \
    \      identity\" is not relevant; the EAP method conversation takes\n       \
    \  place between the EAP peer and the EAP server.  Also, many base\n         stations\
    \ can share the same authenticator identity.  The\n         authenticator identity\
    \ is important in the AAA protocol\n         exchange and the secure association\
    \ protocol conversation.\n         Authentication mechanisms MUST NOT employ plaintext\
    \ passwords.\n         Passwords may be used provided that they are not sent to\n\
    \         another party without confidentiality protection.\n      Peer and authenticator\
    \ authorization\n         Peer and authenticator authorization MUST be performed.\
    \  These\n         entities MUST demonstrate possession of the appropriate keying\n\
    \         material, without disclosing it.  Authorization is REQUIRED\n      \
    \   whenever a peer associates with a new authenticator.  The\n         authorization\
    \ checking prevents an elevation of privilege\n         attack, and it ensures\
    \ that an unauthorized authenticator is\n         detected.\n         Authorizations\
    \ SHOULD be synchronized between the peer, NAS,\n         and backend authentication\
    \ server.  Once the AAA key management\n         protocol exchanges are complete,\
    \ all of these parties should\n         hold a common view of the authorizations\
    \ associated with the\n         other parties.\n         In addition to authenticating\
    \ all parties, key management\n         protocols need to demonstrate that the\
    \ parties are authorized\n         to possess keying material.  Note that proof\
    \ of possession of\n         keying material does not necessarily prove authorization\
    \ to\n         hold that keying material.  For example, within an IEEE\n     \
    \    802.11i, the 4-way handshake demonstrates that both the peer\n         and\
    \ authenticator possess the same EAP keying material.\n         However, by itself,\
    \ this possession proof does not demonstrate\n         that the authenticator\
    \ was authorized by the backend\n         authentication server to possess that\
    \ keying material.  As\n         noted in RFC 3579 in Section 4.3.7, where AAA\
    \ proxies are\n         present, it is possible for one authenticator to impersonate\n\
    \         another, unless each link in the AAA chain implements checks\n     \
    \    against impersonation.  Even with these checks in place, an\n         authenticator\
    \ may still claim different identities to the peer\n         and the backend authentication\
    \ server.  As described in RFC\n         3748 in Section 7.15, channel binding\
    \ is required to enable the\n         peer to verify that the authenticator claim\
    \ of identity is both\n         consistent and correct.\n      Keying material\
    \ confidentiality and integrity\n         While preserving algorithm independence,\
    \ confidentiality and\n         integrity of all keying material MUST be maintained.\n\
    \      Confirm ciphersuite selection\n         The selection of the \"best\" ciphersuite\
    \ SHOULD be securely\n         confirmed.  The mechanism SHOULD detect attempted\
    \ roll-back\n         attacks.\n      Uniquely named keys\n         AAA key management\
    \ proposals require a robust key naming\n         scheme, particularly where key\
    \ caching is supported.  The key\n         name provides a way to refer to a key\
    \ in a protocol so that it\n         is clear to all parties which key is being\
    \ referenced.  Objects\n         that cannot be named cannot be managed.  All\
    \ keys MUST be\n         uniquely named, and the key name MUST NOT directly or\n\
    \         indirectly disclose the keying material.  If the key name is\n     \
    \    not based on the keying material, then one can be sure that it\n        \
    \ cannot be used to assist in a search for the key value.\n      Prevent the Domino\
    \ effect\n         Compromise of a single peer MUST NOT compromise keying material\n\
    \         held by any other peer within the system, including session\n      \
    \   keys and long-term keys.  Likewise, compromise of a single\n         authenticator\
    \ MUST NOT compromise keying material held by any\n         other authenticator\
    \ within the system.  In the context of a key\n         hierarchy, this means\
    \ that the compromise of one node in the\n         key hierarchy must not disclose\
    \ the information necessary to\n         compromise other branches in the key\
    \ hierarchy.  Obviously, the\n         compromise of the root of the key hierarchy\
    \ will compromise all\n         of the keys; however, a compromise in one branch\
    \ MUST NOT\n         result in the compromise of other branches.  There are many\n\
    \         implications of this requirement; however, two implications\n      \
    \   deserve highlighting.  First, the scope of the keying material\n         must\
    \ be defined and understood by all parties that communicate\n         with a party\
    \ that holds that keying material.  Second, a party\n         that holds keying\
    \ material in a key hierarchy must not share\n         that keying material with\
    \ parties that are associated with\n         other branches in the key hierarchy.\n\
    \         Group keys are an obvious exception.  Since all members of the\n   \
    \      group have a copy of the same key, compromise of any one of the\n     \
    \    group members will result in the disclosure of the group key.\n      Bind\
    \ key to its context\n         Keying material MUST be bound to the appropriate\
    \ context.  The\n         context includes the following.\n            o  The\
    \ manner in which the keying material is expected to be\n               used.\n\
    \            o  The other parties that are expected to have access to the\n  \
    \             keying material.\n            o  The expected lifetime of the keying\
    \ material.  Lifetime\n               of a child key SHOULD NOT be greater than\
    \ the lifetime of\n               its parent in the key hierarchy.\n         Any\
    \ party with legitimate access to keying material can\n         determine its\
    \ context.  In addition, the protocol MUST ensure\n         that all parties with\
    \ legitimate access to keying material have\n         the same context for the\
    \ keying material.  This requires that\n         the parties are properly identified\
    \ and authenticated, so that\n         all of the parties that have access to\
    \ the keying material can\n         be determined.\n         The context will\
    \ include the peer and NAS identities in more\n         than one form.  One (or\
    \ more) name form is needed to identify\n         these parties in the authentication\
    \ exchange and the AAA\n         protocol.  Another name form may be needed to\
    \ identify these\n         parties within the lower layer that will employ the\
    \ session\n         key.\n"
- title: 4.  AAA Key Management Recommendations
  contents:
  - "4.  AAA Key Management Recommendations\n   Acceptable solutions SHOULD meet all\
    \ of these requirements.\n      Confidentiality of identity\n         In many\
    \ environments, it is important to provide\n         confidentiality protection\
    \ for identities.  However, this is\n         not important in other environments.\
    \  For this reason, EAP\n         methods are encouraged to provide a mechanism\
    \ for identity\n         protection of EAP peers, but such protection is not a\n\
    \         requirement.\n      Authorization restriction\n         If peer authorization\
    \ is restricted, then the peer SHOULD be\n         made aware of the restriction.\
    \  Otherwise, the peer may\n         inadvertently attempt to circumvent the restriction.\
    \  For\n         example, authorization restrictions in an IEEE 802.11\n     \
    \    environment include:\n            o  Key lifetimes, where the keying material\
    \ can only be used\n               for a certain period of time;\n           \
    \ o  SSID restrictions, where the keying material can only be\n              \
    \ used with a specific IEEE 802.11 SSID;\n            o  Called-Station-ID restrictions,\
    \ where the keying material\n               can only be used with a single IEEE\
    \ 802.11 BSSID; and\n            o  Calling-Station-ID restrictions, where the\
    \ keying\n               material can only be used with a single peer IEEE 802\
    \ MAC\n               address.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document provides architectural guidance\
    \ to designers of AAA key\n   management protocols.  The guidance is also useful\
    \ to designers of\n   systems and solutions that include AAA key management protocols.\n\
    \   In some deployment scenarios, more than one party in the AAA key\n   management\
    \ protocol can reside on the same host.  For example, the\n   EAP authenticator\
    \ and AAA client are expected to reside on the same\n   entity.  Colocation enables\
    \ a single unique authenticator identity to\n   be sent by the authenticator to\
    \ the AAA server as well as by the\n   authenticator to the EAP peer.  Use of\
    \ the same identity in both\n   conversations enables the peer and AAA server\
    \ to confirm that the\n   authenticator is consistent in its identification, avoiding\
    \ potential\n   impersonation attacks.  If the authenticator and AAA client are\
    \ not\n   colocated, then the authenticator and AAA client identities will\n \
    \  differ, and the key scope will not be synchronized between the EAP\n   peer,\
    \ authenticator, and server.  Lack of key scope synchronization\n   enables a\
    \ number of security vulnerabilities, including\n   impersonation.  For this reason,\
    \ a design needs to include mechanisms\n   to ensure that the key scope and key\
    \ naming are unambiguous.\n   The AAA server is a trusted entity.  When keying\
    \ material is present\n   at all, it establishes keying material with the peer\
    \ and distributes\n   keying material to the authenticator using the AAA protocol.\
    \  It is\n   trusted to only distribute keying material to the authenticator that\n\
    \   was established with the peer, and it is trusted to provide that\n   keying\
    \ material to no other parties.  In many systems, keying\n   material established\
    \ by the EAP peer and EAP server are combined with\n   publicly available data\
    \ to derive other keys.  The AAA server is\n   trusted to refrain from deriving\
    \ these same keys even though it has\n   access to the secret values that are\
    \ needed to do so.\n   The authenticator is also a trusted party.  The authenticator\
    \ is\n   trusted not to distribute keying material provided by the AAA server\n\
    \   to any other parties.  If the authenticator uses a key derivation\n   function\
    \ to derive additional keying material, the authenticator is\n   trusted to distribute\
    \ the derived keying material only to the\n   appropriate party that is known\
    \ to the peer, and no other party.\n   When this approach is used, care must be\
    \ taken to ensure that the\n   resulting key management system meets all of the\
    \ principles in this\n   document, confirming that keys used to protect data are\
    \ to be known\n   only by the peer and authenticator.\n   EAP is used to authenticate\
    \ the peer to the AAA/EAP server.\n   Following successful authentication, the\
    \ AAA/EAP server authorizes\n   the peer.  In many situations, this is accomplished\
    \ by sending keying\n   material to the authenticator and the peer in separate\
    \ protocol\n   messages.  The authenticator is not directly authenticated to the\n\
    \   peer.  Rather, the peer determines that the authenticator has been\n   authorized\
    \ by the AAA/EAP server by confirming that the authenticator\n   has the same\
    \ AAA/EAP server-provided keying material.  In some\n   systems, explicit authenticator\
    \ and peer mutual authentication is\n   possible.  This is desirable since it\
    \ greatly improves\n   accountability.\n   When MIB modules are developed for\
    \ AAA protocols or EAP methods,\n   these MIB modules might include managed objects\
    \ for keying material.\n   The existence of managed objects associated with keying\
    \ material\n   offers an additional avenue for key compromise if these objects\n\
    \   include the keying material itself.  Therefore, these MIB modules\n   MUST\
    \ NOT include objects for private keys or symmetric keys.\n   However, these MIB\
    \ modules MAY include management objects that expose\n   names and context associated\
    \ with keys, and they MAY provide a means\n   to delete keys.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [802.1X]   IEEE Standards for Local and Metropolitan\
    \ Area Networks:\n              Port based Network Access Control, IEEE Std 802.1X-2004,\n\
    \              December 2004.\n   [802.11i]  Institute of Electrical and Electronics\
    \ Engineers,\n              \"Supplement to Standard for Telecommunications and\n\
    \              Information Exchange Between Systems -- LAN/MAN Specific\n    \
    \          Requirements - Part 11: Wireless LAN Medium Access Control\n      \
    \        (MAC) and Physical Layer (PHY) Specifications:\n              Specification\
    \ for Enhanced Security\", IEEE 802.11i, July\n              2004.\n   [802.16e]\
    \  Institute of Electrical and Electronics Engineers,\n              \"Supplement\
    \ to Standard for Telecommunications and\n              Information Exchange Between\
    \ Systems -- LAN/MAN Specific\n              Requirements - Part 16: Air Interface\
    \ for Fixed and Mobile\n              Broadband Wireless Access Systems -- Amendment\
    \ for\n              Physical and Medium Access Control Layers for Combined\n\
    \              Fixed and Mobile Operation in Licensed Bands\", Draft, IEEE\n \
    \             802.16e/D8, May 2005.\n   [AN]       M. Abadi and R. Needham, \"\
    Prudent Engineering Practice for\n              Cryptographic Protocols\", Proc.\
    \ IEEE Computer Society\n              Symposium on Research in Security and Privacy,\
    \ May 1994.\n   [B]        Brewin, B., \"LEAP attack tool author says he wants\
    \ to\n              alert users to risks\", Computerworld, October 17, 2003.\n\
    \   [BM]       Bellovin, S. and M. Merrit, \"Limitations of the Kerberos\n   \
    \           authentication system\", Proceedings of the 1991 Winter\n        \
    \      USENIX Conference, pp. 253-267, 1991.\n   [DDNN39.2] DCA DDN Program Management\
    \ Office, \"MILNET TAC Access\n              Control\", Defense Data Network Newsletter,\
    \ DDN News 39,\n              Special Issue, 26 Apr 1985, <http://www.isi.edu/\n\
    \              in-notes/museum/ddn-news/ddn-news.n39.2>.\n   [DLS]      Dole,\
    \ B., Lodin, S. and E. Spafford, \"Misplaced trust:\n              Kerberos 4\
    \ session keys\", Proceedings of the Internet\n              Society Network and\
    \ Distributed System Security Symposium,\n              pp. 60-70, March 1997.\n\
    \   [DS]       D. Denning and G. Sacco.  \"Timestamps in key distributed\n   \
    \           protocols\", Communication of the ACM, 24(8):533--535,\n         \
    \     1981.\n   [FIPS46]   Federal Information Processing Standards Publication\
    \ (FIPS\n              PUB) 46, Data Encryption Standard, 1977 January 15.\n \
    \  [H]        Housley, R., \"Key Management in AAA\", Presentation to the\n  \
    \            AAA WG at IETF 56, March 2003, <http://www.ietf.org/\n          \
    \    proceedings/03mar/slides/aaa-5/index.html>.\n   [L]        G. Lowe.  \"An\
    \ attack on the Needham-Schroeder public key\n              authentication protocol\"\
    , Information Processing Letters,\n              56(3):131--136, November 1995.\n\
    \   [M]        Meadows, C., \"Analysis of the Internet Key Exchange\n        \
    \      Protocol using the NRL Protocol Analyser\", Proceedings of\n          \
    \    the 1999 IEEE Symposium on Security & Privacy, Oakland,\n              CA,\
    \ USA, IEEE Computer Society, May 1999,\n              <http://chacs.nrl.navy.mil/publications/CHACS/1999/\n\
    \              1999meadows-IEEE99.pdf>.\n   [NS]       R. Needham and M. Schroeder.\
    \ \"Using encryption for\n              authentication in large networks of computers\"\
    ,\n              Communications of the ACM, 21(12), December 1978.\n   [RFC0927]\
    \  Anderson, B.A., \"TACACS user identification Telnet\n              option\"\
    , RFC 927, December 1984.\n   [RFC1334]  Lloyd, B. and B. Simpson, \"PPP Authentication\
    \ Protocols\",\n              RFC 1334, October 1992, Obsoleted by RFC 1994.\n\
    \   [RFC1492]  Finseth, C., \"An Access Control Protocol, Sometimes Called\n \
    \             TACACS\", RFC 1492, July 1993.\n   [RFC1661]  Simpson, W., \"The\
    \ Point-to-Point Protocol (PPP)\", STD 51,\n              RFC 1661, July 1994.\n\
    \   [RFC1968]  Meyer, G., \"The PPP Encryption Protocol (ECP)\", RFC 1968,\n \
    \             June 1996.\n   [RFC1994]  Simpson, W., \"PPP Challenge Handshake\
    \ Authentication\n              Protocol (CHAP)\", RFC 1994, August 1996.\n  \
    \ [RFC2284]  Blunk, L. and J. Vollbrecht, \"PPP Extensible\n              Authentication\
    \ Protocol (EAP)\", RFC 2284, March 1998.\n   [RFC2409]  Harkins, D. and D. Carrel,\
    \ \"The Internet Key Exchange\n              (IKE)\", RFC 2409, November 1998.\n\
    \   [RFC2419]  Sklower, K. and G. Meyer, \"The PPP DES Encryption\n          \
    \    Protocol, Version 2 (DESE-bis)\", RFC 2419, September 1998.\n   [RFC2420]\
    \  Hummert, K., \"The PPP Triple-DES Encryption Protocol\n              (3DESE)\"\
    , RFC 2420, September 1998.\n   [RFC2433]  Zorn, G. and S. Cobb, \"Microsoft PPP\
    \ CHAP Extensions\", RFC\n              2433, October 1998.\n   [RFC2548]  Zorn,\
    \ G., \"Microsoft Vendor-specific RADIUS Attributes\",\n              RFC 2548,\
    \ March 1999.\n   [RFC2637]  Hamzeh, K., Pall, G., Verthein, W., Taarud, J., Little,\n\
    \              W., and G.  Zorn, \"Point-to-Point Tunneling Protocol\n       \
    \       (PPTP)\", RFC 2637, July 1999.\n   [RFC2716]  Aboba, B. and D. Simon,\
    \ \"PPP EAP TLS Authentication\n              Protocol\", RFC 2716, October 1999.\n\
    \   [RFC2759]  Zorn, G., \"Microsoft PPP CHAP Extensions, Version 2\", RFC\n \
    \             2759, January 2000.\n   [RFC2865]  Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n              \"Remote Authentication Dial In User Service\
    \ (RADIUS)\", RFC\n              2865, June 2000.\n   [RFC2881]  Mitton, D. and\
    \ M. Beadles, \"Network Access Server\n              Requirements Next Generation\
    \ (NASREQNG) NAS Model\", RFC\n              2881, July 2000.\n   [RFC3078]  Pall,\
    \ G. and G. Zorn, \"Microsoft Point-To-Point Encryption\n              (MPPE)\
    \ Protocol\", RFC 3078, March 2001.\n   [RFC3079]  Zorn, G., \"Deriving Keys for\
    \ use with Microsoft Point-to-\n              Point Encryption (MPPE)\", RFC 3079,\
    \ March 2001.\n   [RFC3579]  Aboba, B. and P. Calhoun, \"RADIUS (Remote Authentication\n\
    \              Dial In User Service) Support For Extensible\n              Authentication\
    \ Protocol (EAP)\", RFC 3579, September 2003.\n   [RFC3588]  Calhoun, P., Loughney,\
    \ J., Guttman, E., Zorn, G., and J.\n              Arkko, \"Diameter Base Protocol\"\
    , RFC 3588, September 2003.\n   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J.,\
    \ Carlson, J., and H.\n              Levkowetz, \"Extensible Authentication Protocol\
    \ (EAP)\", RFC\n              3748, June 2004.\n   [RFC3766]  Orman, H. and P.\
    \ Hoffman, \"Determining Strength for Public\n              Keys Used For Exchanging\
    \ Symmetric Keys\", BCP 86, RFC\n              3766, April 2004.\n   [RFC4017]\
    \  Stanley, D., Walker, J., and B. Aboba, \"Extensible\n              Authentication\
    \ Protocol (EAP) Method Requirements for\n              Wireless LANs\", RFC 4017,\
    \ March 2005.\n   [RFC4072]  Eronen, P., Ed., Hiller, T., and G. Zorn, \"Diameter\n\
    \              Extensible Authentication Protocol (EAP) Application\", RFC\n \
    \             4072, August 2005.\n   [RFC4306]  Kaufman, C., Ed., \"Internet Key\
    \ Exchange (IKEv2)\n              Protocol\", RFC 4306, December 2005.\n   [SM1]\
    \      Schneier, B. and Mudge, \"Cryptanalysis of Microsoft's\n              Point-to-Point\
    \ Tunneling Protocol\", Proceedings of the 5th\n              ACM Conference on\
    \ Communications and Computer Security,\n              ACM Press, November 1998.\n\
    \   [SM2]      Schneier, B. and Mudge, \"Cryptanalysis of Microsoft's PPTP\n \
    \             Authentication Extensions (MS-CHAPv2)\", CQRE 99,\n            \
    \  Springer-Verlag, 1999, pp. 192-203.\n   [SP800-57] National Institute of Standards\
    \ and Technology,\n              \"Recommendation for Key Management\", Special\
    \ Publication\n              800-57, May 2006.\n   [W]        Wu, T., \"A Real-World\
    \ Analysis of Kerberos Password\n              Security\", Proceedings of the\
    \ 1999 ISOC Network and\n              Distributed System Security Symposium,\n\
    \              <http://www.isoc.org/isoc/conferences/ndss/99/\n              proceedings/papers/wu.pdf>.\n"
- title: 'Appendix: AAA Key Management History'
  contents:
  - "Appendix: AAA Key Management History\n   Protocols for Authentication, Authorization,\
    \ and Accounting (AAA)\n   were originally developed to support deployments of\
    \ Network Access\n   Servers (NASes).  In the ARPAnet, the Terminal Access Controller\n\
    \   (TAC) provided a means for \"dumb terminals\" to access the network,\n   and\
    \ the TACACS [RFC0927][RFC1492] AAA protocol was designed by BBN\n   under contract\
    \ to the Defense Data Network Program Management Office\n   (DDN PMO) for this\
    \ environment.  [RFC1492] documents a later version\n   of TACACS, not the original\
    \ version that was widely deployed in\n   ARPAnet and MILNET [DDNN39.2].\n   Later,\
    \ additional AAA protocols were developed to support deployments\n   of NASes\
    \ providing access to the Internet via PPP [RFC1661].  In\n   deployments supporting\
    \ more than a modest number of users, it became\n   impractical for each NAS to\
    \ contain its own list of users and\n   associated credentials.  As a result,\
    \ additional AAA protocols were\n   developed, including RADIUS [RFC2865] and\
    \ Diameter [RFC3588].  These\n   protocols enabled a central AAA server to authenticate\
    \ users\n   requesting network access, as well as providing authorization and\n\
    \   accounting.\n   While PPP [RFC1661] originally supported only PAP [RFC1334]\
    \ and CHAP\n   [RFC1661] authentication, the limitations of these authentication\n\
    \   mechanisms became apparent.  For example, both PAP and CHAP are\n   unilateral\
    \ authentication schemes supporting only authentication of\n   the PPP peer to\
    \ the NAS.  Since PAP is a cleartext password scheme,\n   it is vulnerable to\
    \ snooping by an attacker with access to the\n   conversation between the PPP\
    \ peer and NAS.  In addition, the use of\n   PAP creates vulnerabilities within\
    \ RADIUS as described in Section 4.3\n   of [RFC3579].  As a result, use of PAP\
    \ is deprecated.  While CHAP, a\n   challenge-response scheme based on MD5, offers\
    \ better security than\n   cleartext passwords, it does not provide for mutual\
    \ authentication,\n   and CHAP is vulnerable to dictionary attack.\n   With the\
    \ addition of the Encryption Control Protocol (ECP) to PPP\n   [RFC1968] as well\
    \ as the definition of PPP ciphersuites in [RFC2419],\n   [RFC2420], and [RFC3078],\
    \ the need arose to provide keying material\n   for use with link layer ciphersuites.\
    \  As with user authentication,\n   provisioning of static keys on each NAS did\
    \ not scale well.\n   Additional vendor-specific PPP authentication protocols\
    \ such as\n   MS-CHAP [RFC2433] and MS-CHAPv2 [RFC2759] were developed to provide\n\
    \   mutual authentication as well as key derivation [RFC3079] for use\n   with\
    \ negotiated ciphersuites, and they were subsequently adapted for\n   use with\
    \ PPP-based VPNs [RFC2637].  As with PAP and CHAP, flaws were\n   subsequently\
    \ found in these new mechanisms [SM1][SM2].\n   Even though PPP provided for negotiation\
    \ of authentication\n   algorithms, addressing the vulnerabilities found in authentication\n\
    \   mechanisms still proved painful, since new code needed to be deployed\n  \
    \ on PPP peers as well as on the AAA server.  In order to enable more\n   rapid\
    \ deployment of new authentication mechanisms, as well as fixes\n   for vulnerabilities\
    \ found in existing methods, the Extensible\n   Authentication Protocol (EAP)\
    \ [RFC3748] was developed, along with\n   support for centralized authentication\
    \ via RADIUS/EAP [RFC3579].\n   By enabling \"pass through\" authentication on\
    \ the NAS, EAP enabled\n   deployment of new authentication methods or updates\
    \ to existing\n   methods by revising code only on the EAP peer and AAA server.\
    \  The\n   initial authentication mechanisms defined in [RFC2284] (MD5-\n   Challenge,\
    \ One-Time Password (OTP), and Generic Token Card (GTC))\n   only supported unilateral\
    \ authentication, and these mechanisms do not\n   support key derivation.  Subsequent\
    \ authentication methods such as\n   EAP-TLS [RFC2716] supported mutual authentication\
    \ and key derivation.\n   In order to support the provisioning of dynamic keying\
    \ material for\n   link layer ciphersuites in an environment supporting centralized\n\
    \   authentication, a mechanism was needed for the transport of keying\n   material\
    \ between the AAA server and NAS.  Vendor-specific RADIUS\n   attributes were\
    \ developed for this purpose [RFC2548].\n   Vulnerabilities were subsequently\
    \ found in the key wrap technique, as\n   described in Section 4.3 of [RFC3579].\n\
    \   In theory, public key authentication mechanisms such as EAP-TLS are\n   capable\
    \ of supporting mutual authentication and key derivation\n   between the EAP peer\
    \ and NAS without requiring AAA key distribution.\n   However, in practice, such\
    \ pure two-party schemes are rarely\n   deployed.  Operation of a centralized\
    \ AAA server significantly\n   reduces the effort required to deploy certificates\
    \ to NASes, and even\n   though an AAA server may not be required for key derivation\
    \ and\n   possibly authentication, its participation is required for service\n\
    \   authorization and accounting.\n   \"Pass-through\" authentication and AAA\
    \ key distribution has retained\n   popularity even in the face of rapid improvements\
    \ in processor and\n   memory capabilities.  In addition to producing NAS devices\
    \ of\n   increased capability for enterprise and carrier customers,\n   implementers\
    \ have also produced low-cost/high-volume NAS devices such\n   as 802.11 Access\
    \ Points, causing the resources available on an\n   average NAS to increase more\
    \ slowly than Moore's law.  Despite\n   widespread support for certificate handling\
    \ and sophisticated key\n   derivation mechanisms such as IKEv1 [RFC2409] within\
    \ host operating\n   systems, these security capabilities are rarely deployed\
    \ on low-end\n   NASes and clients.\n   Even on more capable NASes, such as VPN\
    \ servers, centralized\n   authentication and AAA key management has proven popular.\
    \  For\n   example, one of the major limitations of IKEv1 [RFC2409] was the lack\n\
    \   of integration with EAP and AAA, requiring proprietary extensions to\n   enable\
    \ use of IPsec VPNs by organizations deploying password or\n   authentication\
    \ tokens.  These limitations were addressed in IKEv2\n   [RFC4306], which while\
    \ handling key derivation solely between the VPN\n   client and server, supports\
    \ EAP methods for user authentication.  In\n   order to enable cryptographic binding\
    \ of EAP user authentication to\n   keys derived within the IKEv2 exchange, the\
    \ transport of EAP-derived\n   keys within AAA is required where the selected\
    \ EAP method supports\n   key derivation.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to James Kempf, Sam Hartman, and Joe Salowey\
    \ for their\n   quality review and encouragement.\n   Thanks to the IETF AAA Working\
    \ Group and the IETF EAP Working Group\n   for their review and comment.  The\
    \ document is greatly improved by\n   their contribution.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring\
    \ Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n\
    \   Phone: +1 703-435-1775\n   Fax:   +1 703-435-1274\n   Bernard Aboba\n   Microsoft\
    \ Corporation\n   One Microsoft Way\n   Redmond, WA 98052\n   USA\n   EMail: bernarda@microsoft.com\n\
    \   Phone: +1 425-706-6605\n   Fax:   +1 425-936-7329\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
