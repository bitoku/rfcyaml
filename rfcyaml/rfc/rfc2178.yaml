- title: __initial_text__
  contents:
  - '                             OSPF Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo documents version 2 of the OSPF protocol. OSPF is a link-\n\
    \   state routing protocol.  It is designed to be run internal to a\n   single\
    \ Autonomous System.  Each OSPF router maintains an identical\n   database describing\
    \ the Autonomous System's topology.  From this\n   database, a routing table is\
    \ calculated by constructing a shortest-\n   path tree.\n   OSPF recalculates\
    \ routes quickly in the face of topological changes,\n   utilizing a minimum of\
    \ routing protocol traffic.  OSPF provides\n   support for equal-cost multipath.\
    \  An area routing capability is\n   provided, enabling an additional level of\
    \ routing protection and a\n   reduction in routing protocol traffic.  In addition,\
    \ all OSPF routing\n   protocol exchanges are authenticated.\n   The differences\
    \ between this memo and RFC 1583 are explained in\n   Appendix G. All differences\
    \ are backward-compatible in nature.\n   Implementations of this memo and of RFC\
    \ 1583 will interoperate.\n   Please send comments to ospf@gated.cornell.edu.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1        Introduction ...........................................\
    \ 5\n    1.1      Protocol Overview ...................................... 5\n\
    \    1.2      Definitions of commonly used terms ..................... 6\n   \
    \ 1.3      Brief history of link-state routing technology ........  9\n    1.4\
    \      Organization of this document ......................... 10\n    1.5   \
    \   Acknowledgments ....................................... 11\n    2        The\
    \ link-state database: organization and calculations  11\n    2.1      Representation\
    \ of routers and networks ................ 11\n    2.1.1    Representation of\
    \ non-broadcast networks .............. 13\n    2.1.2    An example link-state\
    \ database ........................ 14\n    2.2      The shortest-path tree ................................\
    \ 18\n    2.3      Use of external routing information ................... 20\n\
    \    2.4      Equal-cost multipath .................................. 22\n   \
    \ 3        Splitting the AS into Areas ........................... 22\n    3.1\
    \      The backbone of the Autonomous System ................. 23\n    3.2   \
    \   Inter-area routing .................................... 23\n    3.3      Classification\
    \ of routers ............................. 24\n    3.4      A sample area configuration\
    \ ........................... 25\n    3.5      IP subnetting support .................................\
    \ 31\n    3.6      Supporting stub areas ................................. 32\n\
    \    3.7      Partitions of areas ................................... 33\n   \
    \ 4        Functional Summary .................................... 34\n    4.1\
    \      Inter-area routing .................................... 35\n    4.2   \
    \   AS external routes .................................... 35\n    4.3      Routing\
    \ protocol packets .............................. 35\n    4.4      Basic implementation\
    \ requirements ..................... 38\n    4.5      Optional OSPF capabilities\
    \ ............................ 39\n    5        Protocol data structures ..............................\
    \ 40\n    6        The Area Data Structure ............................... 42\n\
    \    7        Bringing Up Adjacencies ............................... 44\n   \
    \ 7.1      The Hello Protocol .................................... 44\n    7.2\
    \      The Synchronization of Databases ...................... 45\n    7.3   \
    \   The Designated Router ................................. 46\n    7.4      The\
    \ Backup Designated Router .......................... 47\n    7.5      The graph\
    \ of adjacencies .............................. 48\n    8        Protocol Packet\
    \ Processing ............................ 49\n    8.1      Sending protocol packets\
    \ .............................. 49\n    8.2      Receiving protocol packets ............................\
    \ 51\n    9        The Interface Data Structure .......................... 54\n\
    \    9.1      Interface states ...................................... 57\n   \
    \ 9.2      Events causing interface state changes ................ 59\n    9.3\
    \      The Interface state machine ........................... 61\n    9.4   \
    \   Electing the Designated Router ........................ 64\n    9.5      Sending\
    \ Hello packets ................................. 66\n    9.5.1    Sending Hello\
    \ packets on NBMA networks ................ 67\n    10       The Neighbor Data\
    \ Structure ........................... 68\n    10.1     Neighbor states .......................................\
    \ 70\n    10.2     Events causing neighbor state changes ................. 75\n\
    \    10.3     The Neighbor state machine ............................ 76\n   \
    \ 10.4     Whether tocome adjacent    ............................ 82\n    10.5\
    \     Receiving Hello Packets ............................... 83\n    10.6   \
    \  Receiving Database Description Packets ................ 85\n    10.7     Receiving\
    \ Link State Request Packets .................. 88\n    10.8     Sending Database\
    \ Description Packets .................. 89\n    10.9     Sending Link State Request\
    \ Packets .................... 90\n    10.10    An Example ............................................\
    \ 91\n    11       The Routing Table Structure ........................... 93\n\
    \    11.1     Routing table lookup .................................. 96\n   \
    \ 11.2     Sample routing table, without areas ................... 97\n    11.3\
    \     Sample routing table, with areas ...................... 97\n    12     \
    \  Link State Advertisements (LSAs) ......................100\n    12.1     The\
    \ LSA Header ........................................100\n    12.1.1   LS age\
    \ ............................................... 101\n    12.1.2   Options ..............................................\
    \ 101\n    12.1.3   LS type .............................................. 102\n\
    \    12.1.4   Link State ID ........................................ 102\n   \
    \ 12.1.5   Advertising Router ................................... 104\n    12.1.6\
    \   LS sequence number ................................... 104\n    12.1.7   LS\
    \ checksum .......................................... 105\n    12.2     The link\
    \ state database .............................. 105\n    12.3     Representation\
    \ of TOS ................................ 106\n    12.4     Originating LSAs .....................................\
    \ 107\n    12.4.1   Router-LSAs .......................................... 110\n\
    \    12.4.1.1 Describing point-to-point interfaces ................. 112\n   \
    \ 12.4.1.2 Describing broadcast and NBMA interfaces ............. 113\n    12.4.1.3\
    \ Describing virtual links ............................. 113\n    12.4.1.4 Describing\
    \ Point-to-MultiPoint interfaces ............ 114\n    12.4.1.5 Examples of router-LSAs\
    \ .............................. 114\n    12.4.2   Network-LSAs .........................................\
    \ 116\n    12.4.2.1 Examples of network-LSAs ............................. 116\n\
    \    12.4.3   Summary-LSAs ......................................... 117\n   \
    \ 12.4.3.1 Originating summary-LSAs into stub areas ............. 119\n    12.4.3.2\
    \ Examples of summary-LSAs ............................. 119\n    12.4.4   AS-external-LSAs\
    \ ..................................... 120\n    12.4.4.1 Examples of AS-external-LSAs\
    \ ......................... 121\n    13       The Flooding Procedure ...............................\
    \ 122\n    13.1     Determining which LSA is newer ....................... 126\n\
    \    13.2     Installing LSAs in the database ...................... 127\n   \
    \ 13.3     Next step in the flooding procedure .................. 128\n    13.4\
    \     Receiving self-originated LSAs ....................... 130\n    13.5   \
    \  Sending Link State Acknowledgment packets ............ 131\n    13.6     Retransmitting\
    \ LSAs .................................. 133\n    13.7     Receiving link state\
    \ acknowledgments ................. 134\n    14       Aging The Link State Database\
    \ ........................ 134\n    14.1     Premature aging of LSAs ..............................\
    \ 135\n    15       Virtual Links ........................................ 135\n\
    \    16       Calculation of the routing table ..................... 137\n   \
    \ 16.1     Calculating the shortest-path tree for an area ....... 138\n    16.1.1\
    \   The next hop calculation ............................. 144\n    16.2     Calculating\
    \ the inter-area routes .................... 145\n    16.3     Examining transit\
    \ areas' summary-LSAs ................ 146\n    16.4     Calculating AS external\
    \ routes ....................... 149\n    16.4.1   External path preferences ............................\
    \ 151\n    16.5     Incremental updates -- summary-LSAs .................. 151\n\
    \    16.6     Incremental updates -- AS-external-LSAs .............. 152\n   \
    \ 16.7     Events generated as a result of routing table changes  153\n    16.8\
    \     Equal-cost multipath ................................. 154\n           \
    \  Footnotes ............................................ 155\n             References\
    \ ........................................... 158\n    A        OSPF data formats\
    \ .................................... 160\n    A.1      Encapsulation of OSPF\
    \ packets ........................ 160\n    A.2      The Options field ....................................\
    \ 162\n    A.3      OSPF Packet Formats .................................. 163\n\
    \    A.3.1    The OSPF packet header ............................... 164\n   \
    \ A.3.2    The Hello packet ..................................... 166\n    A.3.3\
    \    The Database Description packet ...................... 168\n    A.3.4   \
    \ The Link State Request packet ........................ 170\n    A.3.5    The\
    \ Link State Update packet ......................... 171\n    A.3.6    The Link\
    \ State Acknowledgment packet ................. 172\n    A.4      LSA formats\
    \ .......................................... 173\n    A.4.1    The LSA header\
    \ ....................................... 174\n    A.4.2    Router-LSAs ..........................................\
    \ 176\n    A.4.3    Network-LSAs ......................................... 179\n\
    \    A.4.4    Summary-LSAs ......................................... 180\n   \
    \ A.4.5    AS-external-LSAs ..................................... 182\n    B \
    \       Architectural Constants .............................. 184\n    C    \
    \    Configurable Constants ............................... 186\n    C.1     \
    \ Global parameters .................................... 186\n    C.2      Area\
    \ parameters ...................................... 187\n    C.3      Router interface\
    \ parameters .......................... 188\n    C.4      Virtual link parameters\
    \ .............................. 190\n    C.5      NBMA network parameters ..............................\
    \ 191\n    C.6      Point-to-MultiPoint network parameters ............... 191\n\
    \    C.7      Host route parameters ................................ 192\n   \
    \ D        Authentication ....................................... 193\n    D.1\
    \      Null authentication .................................. 193\n    D.2   \
    \   Simple password authentication ....................... 193\n    D.3      Cryptographic\
    \ authentication ......................... 194\n    D.4      Message generation\
    \ ................................... 196\n    D.4.1    Generating Null authentication\
    \ ....................... 196\n    D.4.2    Generating Simple password authentication\
    \ ............ 197\n    D.4.3    Generating Cryptographic authentication ..............\
    \ 197\n    D.5      Message verification ................................. 198\n\
    \    D.5.1    Verifying Null authentication ........................ 199\n   \
    \ D.5.2    Verifying Simple password authentication ............. 199\n    D.5.3\
    \    Verifying Cryptographic authentication ............... 199\n    E       \
    \ An algorithm for assigning Link State IDs ............ 201\n    F        Multiple\
    \ interfaces to the same network/subnet ....... 203\n    G        Differences\
    \ from RFC 1583 ............................ 204\n    G.1      Enhancements to\
    \ OSPF authentication .................. 204\n    G.2      Addition of Point-to-MultiPoint\
    \ interface ............ 204\n    G.3      Support for overlapping area ranges\
    \ .................. 205\n    G.4      A modification to the flooding algorithm\
    \ ............. 206\n    G.5      Introduction of the MinLSArrival constant ............\
    \ 206\n    G.6      Optionally advertising point-to-point links as subnets 207\n\
    \    G.7      Advertising same external route from multiple areas .. 207\n   \
    \ G.8      Retransmission of initial Database Description packets 209\n    G.9\
    \      Detecting interface MTU mismatches ................... 209\n    G.10  \
    \   Deleting the TOS routing option ...................... 209\n             Security\
    \ Considerations .............................. 210\n             Author's Address\
    \ ..................................... 211\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is a specification of the Open Shortest Path\
    \ First\n   (OSPF) TCP/IP internet routing protocol.  OSPF is classified as an\n\
    \   Interior Gateway Protocol (IGP).  This means that it distributes\n   routing\
    \ information between routers belonging to a single Autonomous\n   System.  The\
    \ OSPF protocol is based on link-state or SPF technology.\n   This is a departure\
    \ from the Bellman-Ford base used by traditional\n   TCP/IP internet routing protocols.\n\
    \   The OSPF protocol was developed by the OSPF working group of the\n   Internet\
    \ Engineering Task Force.  It has been designed expressly for\n   the TCP/IP internet\
    \ environment, including explicit support for CIDR\n   and the tagging of externally-derived\
    \ routing information. OSPF also\n   provides for the authentication of routing\
    \ updates, and utilizes IP\n   multicast when sending/receiving the updates. \
    \ In addition, much work\n   has been done to produce a protocol that responds\
    \ quickly to topology\n   changes, yet involves small amounts of routing protocol\
    \ traffic.\n"
- title: 1.1.  Protocol overview
  contents:
  - "1.1.  Protocol overview\n   OSPF routes IP packets based solely on the destination\
    \ IP address\n   found in the IP packet header. IP packets are routed \"as is\"\
    \ -- they\n   are not encapsulated in any further protocol headers as they transit\n\
    \   the Autonomous System. OSPF is a dynamic routing protocol.  It\n   quickly\
    \ detects topological changes in the AS (such as router\n   interface failures)\
    \ and calculates new loop-free routes after a\n   period of convergence.  This\
    \ period of convergence is short and\n   involves a minimum of routing traffic.\n\
    \   In a link-state routing protocol, each router maintains a database\n   describing\
    \ the Autonomous System's topology.  This database is\n   referred to as the link-state\
    \ database. Each participating router has\n   an identical database.  Each individual\
    \ piece of this database is a\n   particular router's local state (e.g., the router's\
    \ usable interfaces\n   and reachable neighbors).  The router distributes its\
    \ local state\n   throughout the Autonomous System by flooding.\n   All routers\
    \ run the exact same algorithm, in parallel. From the\n   link-state database,\
    \ each router constructs a tree of shortest paths\n   with itself as root.  This\
    \ shortest-path tree gives the route to each\n   destination in the Autonomous\
    \ System.  Externally derived routing\n   information appears on the tree as leaves.\n\
    \   When several equal-cost routes to a destination exist, traffic is\n   distributed\
    \ equally among them.  The cost of a route is described by\n   a single dimensionless\
    \ metric.\n   OSPF allows sets of networks to be grouped together.  Such a grouping\n\
    \   is called an area.  The topology of an area is hidden from the rest\n   of\
    \ the Autonomous System.  This information hiding enables a\n   significant reduction\
    \ in routing traffic.  Also, routing within the\n   area is determined only by\
    \ the area's own topology, lending the area\n   protection from bad routing data.\
    \  An area is a generalization of an\n   IP subnetted network.\n   OSPF enables\
    \ the flexible configuration of IP subnets.  Each route\n   distributed by OSPF\
    \ has a destination and mask.  Two different\n   subnets of the same IP network\
    \ number may have different sizes (i.e.,\n   different masks).  This is commonly\
    \ referred to as variable length\n   subnetting.  A packet is routed to the best\
    \ (i.e., longest or most\n   specific) match.  Host routes are considered to be\
    \ subnets whose\n   masks are \"all ones\" (0xffffffff).\n   All OSPF protocol\
    \ exchanges are authenticated.  This means that only\n   trusted routers can participate\
    \ in the Autonomous System's routing.\n   A variety of authentication schemes\
    \ can be used; in fact, separate\n   authentication schemes can be configured\
    \ for each IP subnet.\n   Externally derived routing data (e.g., routes learned\
    \ from an\n   Exterior Gateway Protocol such as BGP; see [Ref23]) is advertised\n\
    \   throughout the Autonomous System.  This externally derived data is\n   kept\
    \ separate from the OSPF protocol's link state data.  Each\n   external route\
    \ can also be tagged by the advertising router, enabling\n   the passing of additional\
    \ information between routers on the boundary\n   of the Autonomous System.\n"
- title: 1.2.  Definitions of commonly used terms
  contents:
  - "1.2.  Definitions of commonly used terms\n   This section provides definitions\
    \ for terms that have a specific\n   meaning to the OSPF protocol and that are\
    \ used throughout the text.\n   The reader unfamiliar with the Internet Protocol\
    \ Suite is referred to\n   [Ref13] for an introduction to IP.\n   Router\n   \
    \   A level three Internet Protocol packet switch.  Formerly called a\n      gateway\
    \ in much of the IP literature.\n   Autonomous System\n      A group of routers\
    \ exchanging routing information via a common\n      routing protocol.  Abbreviated\
    \ as AS.\n   Interior Gateway Protocol\n      The routing protocol spoken by the\
    \ routers belonging to an\n      Autonomous system. Abbreviated as IGP.  Each\
    \ Autonomous System has\n      a single IGP.  Separate Autonomous Systems may\
    \ be running\n      different IGPs.\n   Router ID\n      A 32-bit number assigned\
    \ to each router running the OSPF protocol.\n      This number uniquely identifies\
    \ the router within an Autonomous\n      System.\n   Network\n      In this memo,\
    \ an IP network/subnet/supernet.  It is possible for\n      one physical network\
    \ to be assigned multiple IP network/subnet\n      numbers.  We consider these\
    \ to be separate networks.  Point-to-\n      point physical networks are an exception\
    \ - they are considered a\n      single network no matter how many (if any at\
    \ all) IP\n      network/subnet numbers are assigned to them.\n   Network mask\n\
    \      A 32-bit number indicating the range of IP addresses residing on a\n  \
    \    single IP network/subnet/supernet.  This specification displays\n      network\
    \ masks as hexadecimal numbers.  For example, the network\n      mask for a class\
    \ C IP network is displayed as 0xffffff00.  Such a\n      mask is often displayed\
    \ elsewhere in the literature as\n      255.255.255.0.\n   Point-to-point networks\n\
    \      A network that joins a single pair of routers.  A 56Kb serial line\n  \
    \    is an example of a point-to-point network.\n   Broadcast networks\n     \
    \ Networks supporting many (more than two) attached routers,\n      together with\
    \ the capability to address a single physical message\n      to all of the attached\
    \ routers (broadcast).  Neighboring routers\n      are discovered dynamically\
    \ on these nets using OSPF's Hello\n      Protocol.  The Hello Protocol itself\
    \ takes advantage of the\n      broadcast capability.  The OSPF protocol makes\
    \ further use of\n      multicast capabilities, if they exist.  Each pair of routers\
    \ on a\n      broadcast network is assumed to be able to communicate directly.\n\
    \      An ethernet is an example of a broadcast network.\n   Non-broadcast networks\n\
    \      Networks supporting many (more than two) routers, but having no\n     \
    \ broadcast capability.  Neighboring routers are maintained on these\n      nets\
    \ using OSPF's Hello Protocol. However, due to the lack of\n      broadcast capability,\
    \ some configuration information may be\n      necessary to aid in the discovery\
    \ of neighbors. On non-broadcast\n      networks, OSPF protocol packets that are\
    \ normally multicast need\n      to be sent to each neighboring router, in turn.\
    \ An X.25 Public\n      Data Network (PDN) is an example of a non-broadcast network.\n\
    \      OSPF runs in one of two modes over non-broadcast networks.  The\n     \
    \ first mode, called non-broadcast multi-access or NBMA, simulates\n      the\
    \ operation of OSPF on a broadcast network. The second mode,\n      called Point-to-MultiPoint,\
    \ treats the non-broadcast network as a\n      collection of point-to-point links.\
    \  Non-broadcast networks are\n      referred to as NBMA networks or Point-to-MultiPoint\
    \ networks,\n      depending on OSPF's mode of operation over the network.\n \
    \  Interface\n      The connection between a router and one of its attached networks.\n\
    \      An interface has state information associated with it, which is\n     \
    \ obtained from the underlying lower level protocols and the routing\n      protocol\
    \ itself.  An interface to a network has associated with it\n      a single IP\
    \ address and mask (unless the network is an unnumbered\n      point-to-point\
    \ network).  An interface is sometimes also referred\n      to as a link.\n  \
    \ Neighboring routers\n      Two routers that have interfaces to a common network.\
    \  Neighbor\n      relationships are maintained by, and usually dynamically\n\
    \      discovered by, OSPF's Hello Protocol.\n   Adjacency\n      A relationship\
    \ formed between selected neighboring routers for the\n      purpose of exchanging\
    \ routing information.  Not every pair of\n      neighboring routers become adjacent.\n\
    \   Link state advertisement\n      Unit of data describing the local state of\
    \ a router or network.\n      For a router, this includes the state of the router's\
    \ interfaces\n      and adjacencies.  Each link state advertisement is flooded\n\
    \      throughout the routing domain. The collected link state\n      advertisements\
    \ of all routers and networks forms the protocol's\n      link state database.\
    \  Throughout this memo, link state\n      advertisement is abbreviated as LSA.\n\
    \   Hello Protocol\n      The part of the OSPF protocol used to establish and\
    \ maintain\n      neighbor relationships.  On broadcast networks the Hello Protocol\n\
    \      can also dynamically discover neighboring routers.\n   Flooding\n     \
    \ The part of the OSPF protocol that distributes and synchronizes\n      the link-state\
    \ database between OSPF routers.\n   Designated Router\n      Each broadcast and\
    \ NBMA network that has at least two attached\n      routers has a Designated\
    \ Router.  The Designated Router generates\n      an LSA for the network and has\
    \ other special responsibilities in\n      the running of the protocol.  The Designated\
    \ Router is elected by\n      the Hello Protocol.\n      The Designated Router\
    \ concept enables a reduction in the number of\n      adjacencies required on\
    \ a broadcast or NBMA network.  This in turn\n      reduces the amount of routing\
    \ protocol traffic and the size of the\n      link-state database.\n   Lower-level\
    \ protocols\n      The underlying network access protocols that provide services\
    \ to\n      the Internet Protocol and in turn the OSPF protocol.  Examples of\n\
    \      these are the X.25 packet and frame levels for X.25 PDNs, and the\n   \
    \   ethernet data link layer for ethernets.\n"
- title: 1.3.  Brief history of link-state routing technology
  contents:
  - "1.3.  Brief history of link-state routing technology\n   OSPF is a link state\
    \ routing protocol.  Such protocols are also\n   referred to in the literature\
    \ as SPF-based or distributed-database\n   protocols.  This section gives a brief\
    \ description of the\n   developments in link-state technology that have influenced\
    \ the OSPF\n   protocol.\n   The first link-state routing protocol was developed\
    \ for use in the\n   ARPANET packet switching network.  This protocol is described\
    \ in\n   [Ref3].  It has formed the starting point for all other link-state\n\
    \   protocols.  The homogeneous ARPANET environment, i.e., single-vendor\n   packet\
    \ switches connected by synchronous serial lines, simplified the\n   design and\
    \ implementation of the original protocol.\n   Modifications to this protocol\
    \ were proposed in [Ref4].  These\n   modifications dealt with increasing the\
    \ fault tolerance of the\n   routing protocol through, among other things, adding\
    \ a checksum to\n   the LSAs (thereby detecting database corruption).  The paper\
    \ also\n   included means for reducing the routing traffic overhead in a link-\n\
    \   state protocol.  This was accomplished by introducing mechanisms\n   which\
    \ enabled the interval between LSA originations to be increased\n   by an order\
    \ of magnitude.\n   A link-state algorithm has also been proposed for use as an\
    \ ISO IS-IS\n   routing protocol.  This protocol is described in [Ref2].  The\n\
    \   protocol includes methods for data and routing traffic reduction when\n  \
    \ operating over broadcast networks.  This is accomplished by election\n   of\
    \ a Designated Router for each broadcast network, which then\n   originates an\
    \ LSA for the network.\n   The OSPF Working Group of the IETF has extended this\
    \ work in\n   developing the OSPF protocol.  The Designated Router concept has\
    \ been\n   greatly enhanced to further reduce the amount of routing traffic\n\
    \   required.  Multicast capabilities are utilized for additional routing\n  \
    \ bandwidth reduction.  An area routing scheme has been developed\n   enabling\
    \ information hiding/protection/reduction.  Finally, the\n   algorithms have been\
    \ tailored for efficient operation in TCP/IP\n   internets.\n"
- title: 1.4.  Organization of this document
  contents:
  - "1.4.  Organization of this document\n   The first three sections of this specification\
    \ give a general\n   overview of the protocol's capabilities and functions.  Sections\
    \ 4-16\n   explain the protocol's mechanisms in detail.  Packet formats,\n   protocol\
    \ constants and configuration items are specified in the\n   appendices.\n   Labels\
    \ such as HelloInterval encountered in the text refer to\n   protocol constants.\
    \  They may or may not be configurable.\n   Architectural constants are summarized\
    \ in Appendix B.  Configurable\n   constants are summarized in Appendix C.\n \
    \  The detailed specification of the protocol is presented in terms of\n   data\
    \ structures.  This is done in order to make the explanation more\n   precise.\
    \  Implementations of the protocol are required to support the\n   functionality\
    \ described, but need not use the precise data structures\n   that appear in this\
    \ memo.\n"
- title: 1.5.  Acknowledgments
  contents:
  - "1.5.  Acknowledgments\n   The author would like to thank Ran Atkinson, Fred Baker,\
    \ Jeffrey\n   Burgan, Rob Coltun, Dino Farinacci, Vince Fuller, Phanindra\n  \
    \ Jujjavarapu, Milo Medin, Tom Pusateri, Kannan Varadhan, Zhaohui Zhang\n   and\
    \ the rest of the OSPF Working Group for the ideas and support they\n   have given\
    \ to this project.\n   The OSPF Point-to-MultiPoint interface is based on work\
    \ done by Fred\n   Baker.\n   The OSPF Cryptographic Authentication option was\
    \ developed by Fred\n   Baker and Ran Atkinson.\n"
- title: '2.  The Link-state Database: organization and calculations'
  contents:
  - "2.  The Link-state Database: organization and calculations\n   The following\
    \ subsections describe the organization of OSPF's link-\n   state database, and\
    \ the routing calculations that are performed on\n   the database in order to\
    \ produce a router's routing table.\n"
- title: 2.1.  Representation of routers and networks
  contents:
  - "2.1.  Representation of routers and networks\n   The Autonomous System's link-state\
    \ database describes a directed\n   graph.  The vertices of the graph consist\
    \ of routers and networks.  A\n   graph edge connects two routers when they are\
    \ attached via a physical\n   point-to-point network.  An edge connecting a router\
    \ to a network\n   indicates that the router has an interface on the network.\
    \ Networks\n   can be either transit or stub networks. Transit networks are those\n\
    \   capable of carrying data traffic that is neither locally originated\n   nor\
    \ locally destined. A transit network is represented by a graph\n   vertex having\
    \ both incoming and outgoing edges. A stub network's\n   vertex has only incoming\
    \ edges.\n   The neighborhood of each network node in the graph depends on the\n\
    \   network's type (point-to-point, broadcast, NBMA or Point-to-\n   MultiPoint)\
    \ and the number of routers having an interface to the\n   network.  Three cases\
    \ are depicted in Figure 1a.  Rectangles indicate\n   routers.  Circles and oblongs\
    \ indicate networks.  Router names are\n   prefixed with the letters RT and network\
    \ names with the letter N.\n   Router interface names are prefixed by the letter\
    \ I.  Lines between\n   routers indicate point-to-point networks.  The left side\
    \ of the\n   figure shows networks with their connected routers, with the\n  \
    \ resulting graphs shown on the right.\n                                     \
    \             **FROM**\n                                           *      |RT1|RT2|\n\
    \                +---+Ia    +---+           *   ------------\n               \
    \ |RT1|------|RT2|           T   RT1|   | X |\n                +---+    Ib+---+\
    \           O   RT2| X |   |\n                                           *   \
    \ Ia|   | X |\n                                           *    Ib| X |   |\n \
    \                   Physical point-to-point networks\n                       \
    \                           **FROM**\n                      +---+            \
    \    *\n                      |RT7|                *      |RT7| N3|\n        \
    \              +---+                T   ------------\n                       \
    \ |                  O   RT7|   |   |\n            +----------------------+  \
    \     *    N3| X |   |\n                       N3                  *\n       \
    \                      Stub networks\n                +---+      +---+\n     \
    \           |RT3|      |RT4|              |RT3|RT4|RT5|RT6|N2 |\n            \
    \    +---+      +---+        *  ------------------------\n                  |\
    \    N2    |          *  RT3|   |   |   |   | X |\n            +----------------------+\
    \    T  RT4|   |   |   |   | X |\n                  |          |          O  RT5|\
    \   |   |   |   | X |\n                +---+      +---+        *  RT6|   |   |\
    \   |   | X |\n                |RT5|      |RT6|        *   N2| X | X | X | X |\
    \   |\n                +---+      +---+\n                       Broadcast or NBMA\
    \ networks\n                   Figure 1a: Network map components\n   Networks\
    \ and routers are represented by vertices.  An edge connects\n   Vertex A to Vertex\
    \ B iff the intersection of Column A and Row B is\n   marked with an X.\n   The\
    \ top of Figure 1a shows two routers connected by a point-to-point\n   link. In\
    \ the resulting link-state database graph, the two router\n   vertices are directly\
    \ connected by a pair of edges, one in each\n   direction. Interfaces to point-to-point\
    \ networks need not be assigned\n   IP addresses.  When interface addresses are\
    \ assigned, they are\n   modelled as stub links, with each router advertising\
    \ a stub\n   connection to the other router's interface address. Optionally, an\
    \ IP\n   subnet can be assigned to the point-to-point network. In this case,\n\
    \   both routers advertise a stub link to the IP subnet, instead of\n   advertising\
    \ each others' IP interface addresses.\n   The middle of Figure 1a shows a network\
    \ with only one attached router\n   (i.e., a stub network). In this case, the\
    \ network appears on the end\n   of a stub connection in the link-state database's\
    \ graph.\n   When multiple routers are attached to a broadcast network, the link-\n\
    \   state database graph shows all routers bidirectionally connected to\n   the\
    \ network vertex. This is pictured at the bottom of Figure 1a.\n   Each network\
    \ (stub or transit) in the graph has an IP address and\n   associated network\
    \ mask.  The mask indicates the number of nodes on\n   the network.  Hosts attached\
    \ directly to routers (referred to as host\n   routes) appear on the graph as\
    \ stub networks.  The network mask for a\n   host route is always 0xffffffff,\
    \ which indicates the presence of a\n   single node.\n"
- title: 2.1.1. Representation of non-broadcast networks
  contents:
  - "2.1.1. Representation of non-broadcast networks\n   As mentioned previously,\
    \ OSPF can run over non-broadcast networks in\n   one of two modes: NBMA or Point-to-MultiPoint.\
    \  The choice of mode\n   determines the way that the Hello protocol and flooding\
    \ work over the\n   non-broadcast network, and the way that the network is represented\
    \ in\n   the link-state database.\n   In NBMA mode, OSPF emulates operation over\
    \ a broadcast network: a\n   Designated Router is elected for the NBMA network,\
    \ and the Designated\n   Router originates an LSA for the network. The graph representation\n\
    \   for broadcast networks and NBMA networks is identical. This\n   representation\
    \ is pictured in the middle of Figure 1a.\n   NBMA mode is the most efficient\
    \ way to run OSPF over non-broadcast\n   networks, both in terms of link-state\
    \ database size and in terms of\n   the amount of routing protocol traffic.  However,\
    \ it has one\n   significant restriction: it requires all routers attached to\
    \ the NBMA\n   network to be able to communicate directly. This restriction may\
    \ be\n   met on some non-broadcast networks, such as an ATM subnet utilizing\n\
    \   SVCs. But it is often not met on other non-broadcast networks, such\n   as\
    \ PVC-only Frame Relay networks. On non-broadcast networks where not\n   all routers\
    \ can communicate directly you can break the non-broadcast\n   network into logical\
    \ subnets, with the routers on each subnet being\n   able to communicate directly,\
    \ and then run each separate subnet as an\n   NBMA network (see [Ref15]). This\
    \ however requires quite a bit of\n   administrative overhead, and is prone to\
    \ misconfiguration. It is\n   probably better to run such a non-broadcast network\
    \ in Point-to-\n   Multipoint mode.\n   In Point-to-MultiPoint mode, OSPF treats\
    \ all router-to-router\n   connections over the non-broadcast network as if they\
    \ were point-to-\n   point links. No Designated Router is elected for the network,\
    \ nor is\n   there an LSA generated for the network. In fact, a vertex for the\n\
    \   Point-to-MultiPoint network does not appear in the graph of the\n   link-state\
    \ database.\n   Figure 1b illustrates the link-state database representation of\
    \ a\n   Point-to-MultiPoint network. On the left side of the figure, a\n   Point-to-MultiPoint\
    \ network is pictured. It is assumed that all\n   routers can communicate directly,\
    \ except for routers RT4 and RT5. I3\n   though I6 indicate the routers' IP interface\
    \ addresses on the Point-\n   to-MultiPoint network.  In the graphical representation\
    \ of the link-\n   state database, routers that can communicate directly over\
    \ the\n   Point-to-MultiPoint network are joined by bidirectional edges, and\n\
    \   each router also has a stub connection to its own IP interface\n   address\
    \ (which is in contrast to the representation of real point-\n   to-point links;\
    \ see Figure 1a).\n   On some non-broadcast networks, use of Point-to-MultiPoint\
    \ mode and\n   data-link protocols such as Inverse ARP (see [Ref14]) will allow\n\
    \   autodiscovery of OSPF neighbors even though broadcast support is not\n   available.\n"
- title: 2.1.2.  An example link-state database
  contents:
  - "2.1.2.  An example link-state database\n   Figure 2 shows a sample map of an\
    \ Autonomous System.  The rectangle\n   labelled H1 indicates a host, which has\
    \ a SLIP connection to Router\n   RT12. Router RT12 is therefore advertising a\
    \ host route.  Lines\n   between routers indicate physical point-to-point networks.\
    \  The only\n   point-to-point network that has been assigned interface addresses\
    \ is\n   the one joining Routers RT6 and RT10.  Routers RT5 and RT7 have BGP\n\
    \   connections to other Autonomous Systems.  A set of BGP-learned routes\n  \
    \ have been displayed for both of these routers.\n   A cost is associated with\
    \ the output side of each router interface.\n   This cost is configurable by the\
    \ system administrator.  The lower the\n   cost,the more likely the interface\
    \ is to be used to forward data\n   traffic.  Costs are also associated with the\
    \ externally derived\n   routing data (e.g., the BGP-learned routes).\n   The\
    \ directed graph resulting from the map in Figure 2 is depicted in\n   Figure\
    \ 3.  Arcs are labelled with the cost of the corresponding\n   router output interface.\
    \ Arcs having no labelled cost have a cost of\n   0.  Note that arcs leading from\
    \ networks to routers always have cost\n   0; they are significant nonetheless.\
    \  Note also that the externally\n   derived routing data appears on the graph\
    \ as stubs.\n                                                  **FROM**\n    \
    \            +---+      +---+\n                |RT3|      |RT4|              |RT3|RT4|RT5|RT6|\n\
    \                +---+      +---+        *  --------------------\n           \
    \     I3|    N2    |I4        *  RT3|   | X | X | X |\n            +----------------------+\
    \    T  RT4| X |   |   | X |\n                I5|          |I6        O  RT5|\
    \ X |   |   | X |\n                +---+      +---+        *  RT6| X | X | X |\
    \   |\n                |RT5|      |RT6|        *   I3| X |   |   |   |\n     \
    \           +---+      +---+            I4|   | X |   |   |\n                \
    \                            I5|   |   | X |   |\n                           \
    \                 I6|   |   |   | X |\n                   Figure 1b: Network map\
    \ components\n                      Point-to-MultiPoint networks\n          All\
    \ routers can communicate directly over N2, except\n             routers RT4 and\
    \ RT5. I3 through I6 indicate IP\n                          interface addresses\n\
    \                 +\n                 | 3+---+                     N12      N14\n\
    \               N1|--|RT1|\\ 1                    \\ N13 /\n                 |\
    \  +---+ \\                     8\\ |8/8\n                 +         \\ ____ \
    \                \\|/\n                            /    \\   1+---+8    8+---+6\n\
    \                           *  N3  *---|RT4|------|RT5|--------+\n           \
    \                 \\____/    +---+      +---+        |\n                  +  \
    \       /   |                  |7         |\n                  | 3+---+ /    |\
    \                  |          |\n                N2|--|RT2|/1    |1          \
    \       |6         |\n                  |  +---+    +---+8            6+---+ \
    \       |\n                  +           |RT3|--------------|RT6|        |\n \
    \                             +---+              +---+        |\n            \
    \                    |2               Ia|7         |\n                       \
    \         |                  |          |\n                           +---------+\
    \             |          |\n                               N4                \
    \  |          |\n                                                   |        \
    \  |\n                                                   |          |\n      \
    \                 N11                         |          |\n                 \
    \  +---------+                     |          |\n                        |   \
    \                       |          |    N12\n                        |3      \
    \                   |          |6 2/\n                      +---+            \
    \            |        +---+/\n                      |RT9|                    \
    \    |        |RT7|---N15\n                      +---+                       \
    \ |        +---+ 9\n                        |1                   +     |     \
    \     |1\n                       _|__                  |   Ib|5       __|_\n \
    \                     /    \\      1+----+2   |  3+----+1   /    \\\n        \
    \             *  N9  *------|RT11|----|---|RT10|---*  N6  *\n                \
    \      \\____/       +----+    |   +----+    \\____/\n                       \
    \ |                    |                |\n                        |1        \
    \           +                |1\n             +--+   10+----+                N8\
    \              +---+\n             |H1|-----|RT12|                           \
    \     |RT8|\n             +--+SLIP +----+                                +---+\n\
    \                        |2                                    |4\n          \
    \              |                                     |\n                   +---------+\
    \                            +--------+\n                       N10          \
    \                          N7\n                  Figure 2: A sample Autonomous\
    \ System\n                                **FROM**\n                 |RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|\n\
    \                 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|N3|N6|N8|N9|\n        \
    \      ----- ---------------------------------------------\n              RT1|\
    \  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT2|  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT3|  |  |  |  |  |6 |\
    \  |  |  |  |  |  |0 |  |  |  |\n              RT4|  |  |  |  |8 |  |  |  |  |\
    \  |  |  |0 |  |  |  |\n              RT5|  |  |  |8 |  |6 |6 |  |  |  |  |  |\
    \  |  |  |  |\n              RT6|  |  |8 |  |7 |  |  |  |  |5 |  |  |  |  |  |\
    \  |\n              RT7|  |  |  |  |6 |  |  |  |  |  |  |  |  |0 |  |  |\n   \
    \       *   RT8|  |  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |\n          *\
    \   RT9|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |0 |\n          T  RT10| \
    \ |  |  |  |  |7 |  |  |  |  |  |  |  |0 |0 |  |\n          O  RT11|  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |0 |0 |\n          *  RT12|  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |\n          *    N1|3 |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |\n               N2|  |3 |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |\n               N3|1 |1 |1 |1 |  |  |  |  |  |  |  |  |  |  |  |\
    \  |\n               N4|  |  |2 |  |  |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \            N6|  |  |  |  |  |  |1 |1 |  |1 |  |  |  |  |  |  |\n           \
    \    N7|  |  |  |  |  |  |  |4 |  |  |  |  |  |  |  |  |\n               N8| \
    \ |  |  |  |  |  |  |  |  |3 |2 |  |  |  |  |  |\n               N9|  |  |  |\
    \  |  |  |  |  |1 |  |1 |1 |  |  |  |  |\n              N10|  |  |  |  |  |  |\
    \  |  |  |  |  |2 |  |  |  |  |\n              N11|  |  |  |  |  |  |  |  |3 |\
    \  |  |  |  |  |  |  |\n              N12|  |  |  |  |8 |  |2 |  |  |  |  |  |\
    \  |  |  |  |\n              N13|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |\
    \  |\n              N14|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \           N15|  |  |  |  |  |  |9 |  |  |  |  |  |  |  |  |  |\n           \
    \    H1|  |  |  |  |  |  |  |  |  |  |  |10|  |  |  |  |\n                 Figure\
    \ 3: The resulting directed graph\n           Networks and routers are represented\
    \ by vertices.\n          An edge of cost X connects Vertex A to Vertex B iff\n\
    \            the intersection of Column A and Row B is marked\n              \
    \                 with an X.\n   The link-state database is pieced together from\
    \ LSAs generated by the\n   routers.  In the associated graphical representation,\
    \ the\n   neighborhood of each router or transit network is represented in a\n\
    \   single, separate LSA.  Figure 4 shows these LSAs graphically. Router\n   RT12\
    \ has an interface to two broadcast networks and a SLIP line to a\n   host.  Network\
    \ N6 is a broadcast network with three attached routers.\n   The cost of all links\
    \ from Network N6 to its attached routers is 0.\n   Note that the LSA for Network\
    \ N6 is actually generated by one of the\n   network's attached routers: the router\
    \ that has been elected\n   Designated Router for the network.\n"
- title: 2.2.  The shortest-path tree
  contents:
  - "2.2.  The shortest-path tree\n   When no OSPF areas are configured, each router\
    \ in the Autonomous\n   System has an identical link-state database, leading to\
    \ an identical\n   graphical representation.  A router generates its routing table\
    \ from\n   this graph by calculating a tree of shortest paths with the router\n\
    \   itself as root.  Obviously, the shortest- path tree depends on the\n   router\
    \ doing the calculation.  The shortest-path tree for Router RT6\n   in our example\
    \ is depicted in Figure 5.\n   The tree gives the entire path to any destination\
    \ network or host.\n   However, only the next hop to the destination is used in\
    \ the\n   forwarding process.   Note also that the best route to any router has\n\
    \   also been calculated.  For the processing of external data, we note\n   the\
    \ next hop and distance to any router advertising external routes.\n   The resulting\
    \ routing table for Router RT6 is pictured in Table 2.\n   Note that there is\
    \ a separate route for each end of a numbered\n   point-to-point network (in this\
    \ case, the serial line between Routers\n   RT6 and RT10).\n                 \
    \    **FROM**                       **FROM**\n                  |RT12|N9|N10|H1|\
    \                 |RT9|RT11|RT12|N9|\n           *  --------------------     \
    \     *  ----------------------\n           *  RT12|    |  |   |  |          *\
    \   RT9|   |    |    |0 |\n           T    N9|1   |  |   |  |          T  RT11|\
    \   |    |    |0 |\n           O   N10|2   |  |   |  |          O  RT12|   | \
    \   |    |0 |\n           *    H1|10  |  |   |  |          *    N9|   |    | \
    \   |  |\n           *                                *\n                RT12's\
    \ router-LSA              N9's network-LSA\n               Figure 4: Individual\
    \ link state components\n           Networks and routers are represented by vertices.\n\
    \          An edge of cost X connects Vertex A to Vertex B iff\n            the\
    \ intersection of Column A and Row B is marked\n                             \
    \  with an X.\n                                RT6(origin)\n                 \
    \   RT5 o------------o-----------o Ib\n                       /|\\    6      |\\\
    \     7\n                     8/8|8\\          | \\\n                     /  |\
    \  \\        6|  \\\n                    o   |   o        |   \\7\n          \
    \         N12  o  N14       |    \\\n                       N13        2  |  \
    \   \\\n                            N4 o-----o RT3  \\\n                     \
    \               /        \\    5\n                                  1/     RT10\
    \ o-------o Ia\n                                  /           |\\\n          \
    \             RT4 o-----o N3        3| \\1\n                                /|\
    \            |  \\ N6     RT7\n                               / |         N8 o\
    \   o---------o\n                              /  |            |   |        /|\n\
    \                         RT2 o   o RT1        |   |      2/ |9\n            \
    \                /    |            |   |RT8   /  |\n                         \
    \  /3    |3      RT11 o   o     o   o\n                          /      |    \
    \        |   |    N12 N15\n                      N2 o       o N1        1|   |4\n\
    \                                              |   |\n                       \
    \                    N9 o   o N7\n                                           \
    \  /|\n                                            / |\n                     \
    \   N11      RT9       /  |RT12\n                         o--------o-------o \
    \  o--------o H1\n                             3                |   10\n     \
    \                                         |2\n                               \
    \               |\n                                              o N10\n     \
    \            Figure 5: The SPF tree for Router RT6\n  Edges that are not marked\
    \ with a cost have a cost of of zero (these\n are network-to-router links). Routes\
    \ to networks N12-N15 are external\n             information that is considered\
    \ in Section 2.3\n           Destination   Next  Hop   Distance\n           __________________________________\n\
    \           N1            RT3         10\n           N2            RT3       \
    \  10\n           N3            RT3         7\n           N4            RT3  \
    \       8\n           Ib            *           7\n           Ia            RT10\
    \        12\n           N6            RT10        8\n           N7           \
    \ RT10        12\n           N8            RT10        10\n           N9     \
    \       RT10        11\n           N10           RT10        13\n           N11\
    \           RT10        14\n           H1            RT10        21\n        \
    \   __________________________________\n           RT5           RT5         6\n\
    \           RT7           RT10        8\n    Table 2: The portion of Router RT6's\
    \ routing table listing local\n                             destinations.\n  \
    \ Routes to networks belonging to other AS'es (such as N12) appear as\n   dashed\
    \ lines on the shortest path tree in Figure 5.  Use of this\n   externally derived\
    \ routing information is considered in the next\n   section.\n"
- title: 2.3.  Use of external routing information
  contents:
  - "2.3.  Use of external routing information\n   After the tree is created the external\
    \ routing information is\n   examined.  This external routing information may\
    \ originate from\n   another routing protocol such as BGP, or be statically configured\n\
    \   (static routes).  Default routes can also be included as part of the\n   Autonomous\
    \ System's external routing information.\n   External routing information is flooded\
    \ unaltered throughout the AS.\n   In our example, all the routers in the Autonomous\
    \ System know that\n   Router RT7 has two external routes, with metrics 2 and\
    \ 9.\n   OSPF supports two types of external metrics.  Type 1 external metrics\n\
    \   are expressed in the same units as OSPF interface cost (i.e., in\n   terms\
    \ of the link state metric).  Type 2 external metrics are an\n   order of magnitude\
    \ larger; any Type 2 metric is considered greater\n   than the cost of any path\
    \ internal to the AS.  Use of Type 2 external\n   metrics assumes that routing\
    \ between AS'es is the major cost of\n   routing a packet, and eliminates the\
    \ need for conversion of external\n   costs to internal link state metrics.\n\
    \   As an example of Type 1 external metric processing, suppose that the\n   Routers\
    \ RT7 and RT5 in Figure 2 are advertising Type 1 external\n   metrics.  For each\
    \ advertised external route, the total cost from\n   Router RT6 is calculated\
    \ as the sum of the external route's\n   advertised cost and the distance from\
    \ Router RT6 to the advertising\n   router.  When two routers are advertising\
    \ the same external\n   destination, RT6 picks the advertising router providing\
    \ the minimum\n   total cost. RT6 then sets the next hop to the external destination\n\
    \   equal to the next hop that would be used when routing packets to the\n   chosen\
    \ advertising router.\n   In Figure 2, both Router RT5 and RT7 are advertising\
    \ an external\n   route to destination Network N12.  Router RT7 is preferred since\
    \ it\n   is advertising N12 at a distance of 10 (8+2) to Router RT6, which is\n\
    \   better than Router RT5's 14 (6+8).  Table 3 shows the entries that\n   are\
    \ added to the routing table when external routes are examined:\n            \
    \     Destination   Next  Hop   Distance\n                 __________________________________\n\
    \                 N12           RT10        10\n                 N13         \
    \  RT5         14\n                 N14           RT5         14\n           \
    \      N15           RT10        17\n          Table 3: The portion of Router\
    \ RT6's routing table\n                     listing external destinations.\n \
    \  Processing of Type 2 external metrics is simpler.  The AS boundary\n   router\
    \ advertising the smallest external metric is chosen, regardless\n   of the internal\
    \ distance to the AS boundary router.  Suppose in our\n   example both Router\
    \ RT5 and Router RT7 were advertising Type 2\n   external routes.  Then all traffic\
    \ destined for Network N12 would be\n   forwarded to Router RT7, since 2 < 8.\
    \ When several equal-cost Type 2\n   routes exist, the internal distance to the\
    \ advertising routers is\n   used to break the tie.\n   Both Type 1 and Type 2\
    \ external metrics can be present in the AS at\n   the same time.  In that event,\
    \ Type 1 external metrics always take\n   precedence.\n   This section has assumed\
    \ that packets destined for external\n   destinations are always routed through\
    \ the advertising AS boundary\n   router.  This is not always desirable.  For\
    \ example, suppose in\n   Figure 2 there is an additional router attached to Network\
    \ N6, called\n   Router RTX. Suppose further that RTX does not participate in\
    \ OSPF\n   routing, but does exchange BGP information with the AS boundary\n \
    \  router RT7.  Then, Router RT7 would end up advertising OSPF external\n   routes\
    \ for all destinations that should be routed to RTX.  An extra\n   hop will sometimes\
    \ be introduced if packets for these destinations\n   need always be routed first\
    \ to Router RT7 (the advertising router).\n   To deal with this situation, the\
    \ OSPF protocol allows an AS boundary\n   router to specify a \"forwarding address\"\
    \ in its AS- external-LSAs. In\n   the above example, Router RT7 would specify\
    \ RTX's IP address as the\n   \"forwarding address\" for all those destinations\
    \ whose packets should\n   be routed directly to RTX.\n   The \"forwarding address\"\
    \ has one other application.  It enables\n   routers in the Autonomous System's\
    \ interior to function as \"route\n   servers\".  For example, in Figure 2 the\
    \ router RT6 could become a\n   route server, gaining external routing information\
    \ through a\n   combination of static configuration and external routing protocols.\n\
    \   RT6 would then start advertising itself as an AS boundary router, and\n  \
    \ would originate a collection of OSPF AS-external-LSAs.  In each AS-\n   external-LSA,\
    \ Router RT6 would specify the correct Autonomous System\n   exit point to use\
    \ for the destination through appropriate setting of\n   the LSA's \"forwarding\
    \ address\" field.\n"
- title: 2.4.  Equal-cost multipath
  contents:
  - "2.4.  Equal-cost multipath\n   The above discussion has been simplified by considering\
    \ only a single\n   route to any destination.  In reality, if multiple equal-cost\
    \ routes\n   to a destination exist, they are all discovered and used.  This\n\
    \   requires no conceptual changes to the algorithm, and its discussion\n   is\
    \ postponed until we consider the tree-building process in more\n   detail.\n\
    \   With equal cost multipath, a router potentially has several available\n  \
    \ next hops towards any given destination.\n"
- title: 3.  Splitting the AS into Areas
  contents:
  - "3.  Splitting the AS into Areas\n   OSPF allows collections of contiguous networks\
    \ and hosts to be\n   grouped together.  Such a group, together with the routers\
    \ having\n   interfaces to any one of the included networks, is called an area.\n\
    \   Each area runs a separate copy of the basic link-state routing\n   algorithm.\
    \ This means that each area has its own link-state database\n   and corresponding\
    \ graph, as explained in the previous section.\n   The topology of an area is\
    \ invisible from the outside of the area.\n   Conversely, routers internal to\
    \ a given area know nothing of the\n   detailed topology external to the area.\
    \  This isolation of knowledge\n   enables the protocol to effect a marked reduction\
    \ in routing traffic\n   as compared to treating the entire Autonomous System\
    \ as a single\n   link-state domain.\n   With the introduction of areas, it is\
    \ no longer true that all routers\n   in the AS have an identical link-state database.\
    \  A router actually\n   has a separate link-state database for each area it is\
    \ connected to.\n   (Routers connected to multiple areas are called area border\
    \ routers).\n   Two routers belonging to the same area have, for that area, identical\n\
    \   area link-state databases.\n   Routing in the Autonomous System takes place\
    \ on two levels, depending\n   on whether the source and destination of a packet\
    \ reside in the same\n   area (intra-area routing is used) or different areas\
    \ (inter-area\n   routing is used).  In intra-area routing, the packet is routed\
    \ solely\n   on information obtained within the area; no routing information\n\
    \   obtained from outside the area can be used.  This protects intra-area\n  \
    \ routing from the injection of bad routing information.  We discuss\n   inter-area\
    \ routing in Section 3.2.\n"
- title: 3.1.  The backbone of the Autonomous System
  contents:
  - "3.1.  The backbone of the Autonomous System\n   The OSPF backbone is the special\
    \ OSPF Area 0 (often written as Area\n   0.0.0.0, since OSPF Area ID's are typically\
    \ formatted as IP\n   addresses). The OSPF backbone always contains all area border\n\
    \   routers. The backbone is responsible for distributing routing\n   information\
    \ between non-backbone areas. The backbone must be\n   contiguous. However, it\
    \ need not be physically contiguous; backbone\n   connectivity can be established/maintained\
    \ through the configuration\n   of virtual links.\n   Virtual links can be configured\
    \ between any two backbone routers that\n   have an interface to a common non-backbone\
    \ area.  Virtual links\n   belong to the backbone.  The protocol treats two routers\
    \ joined by a\n   virtual link as if they were connected by an unnumbered point-to-\n\
    \   point backbone network.  On the graph of the backbone, two such\n   routers\
    \ are joined by arcs whose costs are the intra-area distances\n   between the\
    \ two routers.  The routing protocol traffic that flows\n   along the virtual\
    \ link uses intra-area routing only.\n"
- title: 3.2.  Inter-area routing
  contents:
  - "3.2.  Inter-area routing\n   When routing a packet between two non-backbone areas\
    \ the backbone is\n   used.  The path that the packet will travel can be broken\
    \ up into\n   three contiguous pieces: an intra-area path from the source to an\n\
    \   area border router, a backbone path between the source and\n   destination\
    \ areas, and then another intra-area path to the\n   destination.  The algorithm\
    \ finds the set of such paths that have the\n   smallest cost.\n   Looking at\
    \ this another way, inter-area routing can be pictured as \n   forcing a star\
    \ configuration on the Autonomous System, with the\n   backbone as hub and each\
    \ of the non-backbone areas as spokes.\n   The topology of the backbone dictates\
    \ the backbone paths used between\n   areas.  The topology of the backbone can\
    \ be enhanced by adding\n   virtual links.  This gives the system administrator\
    \ some control over\n   the routes taken by inter-area traffic.\n   The correct\
    \ area border router to use as the packet exits the source\n   area is chosen\
    \ in exactly the same way routers advertising external\n   routes are chosen.\
    \  Each area border router in an area summarizes for\n   the area its cost to\
    \ all networks external to the area.  After the\n   SPF tree is calculated for\
    \ the area, routes to all inter-area\n   destinations are calculated by examining\
    \ the summaries of the area\n   border routers.\n"
- title: 3.3.  Classification of routers
  contents:
  - "3.3.  Classification of routers\n   Before the introduction of areas, the only\
    \ OSPF routers having a\n   specialized function were those advertising external\
    \ routing\n   information, such as Router RT5 in Figure 2.  When the AS is split\n\
    \   into OSPF areas, the routers are further divided according to\n   function\
    \ into the following four overlapping categories:\n   Internal routers\n     \
    \ A router with all directly connected networks belonging to the\n      same area.\
    \ These routers run a single copy of the basic routing\n      algorithm.\n   Area\
    \ border routers\n      A router that attaches to multiple areas.  Area border\
    \ routers run\n      multiple copies of the basic algorithm, one copy for each\
    \ attached\n      area. Area border routers condense the topological information\
    \ of\n      their attached areas for distribution to the backbone.  The\n    \
    \  backbone in turn distributes the information to the other areas.\n   Backbone\
    \ routers\n      A router that has an interface to the backbone area.  This\n\
    \      includes all routers that interface to more than one area (i.e.,\n    \
    \  area border routers).  However, backbone routers do not have to be\n      area\
    \ border routers.  Routers with all interfaces connecting to\n      the backbone\
    \ area are supported.\n   AS boundary routers\n      A router that exchanges routing\
    \ information with routers belonging\n      to other Autonomous Systems.  Such\
    \ a router advertises AS external\n      routing information throughout the Autonomous\
    \ System.  The paths\n      to each AS boundary router are known by every router\
    \ in the AS.\n      This classification is completely independent of the previous\n\
    \      classifications: AS boundary routers may be internal or area\n      border\
    \ routers, and may or may not participate in the backbone.\n"
- title: 3.4.  A sample area configuration
  contents:
  - "3.4.  A sample area configuration\n   Figure 6 shows a sample area configuration.\
    \  The first area consists\n   of networks N1-N4, along with their attached routers\
    \ RT1-RT4.  The\n   second area consists of networks N6-N8, along with their attached\n\
    \   routers RT7, RT8, RT10 and RT11.  The third area consists of networks\n  \
    \ N9-N11 and Host H1, along with their attached routers RT9, RT11 and\n   RT12.\
    \  The third area has been configured so that networks N9-N11 and\n   Host H1\
    \ will all be grouped into a single route, when advertised\n   external to the\
    \ area (see Section 3.5 for more details).\n   In Figure 6, Routers RT1, RT2,\
    \ RT5, RT6, RT8, RT9 and RT12 are\n   internal routers.  Routers RT3, RT4, RT7,\
    \ RT10 and RT11 are area\n   border routers.  Finally, as before, Routers RT5\
    \ and RT7 are AS\n   boundary routers.\n   Figure 7 shows the resulting link-state\
    \ database for the Area 1.  The\n   figure completely describes that area's intra-area\
    \ routing.\n             ...........................\n             .   +     \
    \                .\n             .   | 3+---+              .      N12      N14\n\
    \             . N1|--|RT1|\\ 1           .        \\ N13 /\n             .   |\
    \  +---+ \\            .        8\\ |8/8\n             .   +         \\ ____ \
    \     .          \\|/\n             .              /    \\   1+---+8    8+---+6\n\
    \             .             *  N3  *---|RT4|------|RT5|--------+\n           \
    \  .              \\____/    +---+      +---+        |\n             .    +  \
    \       /      \\   .           |7         |\n             .    | 3+---+ /   \
    \     \\  .           |          |\n             .  N2|--|RT2|/1        1\\ .\
    \           |6         |\n             .    |  +---+            +---+8    6+---+\
    \        |\n             .    +                   |RT3|------|RT6|        |\n\
    \             .                        +---+      +---+        |\n           \
    \  .                      2/ .         Ia|7         |\n             .        \
    \              /  .           |          |\n             .             +---------+\
    \ .           |          |\n             .Area 1           N4      .         \
    \  |          |\n             ...........................           |        \
    \  |\n          ..........................               |          |\n      \
    \    .            N11         .               |          |\n          .      \
    \  +---------+     .               |          |\n          .             |   \
    \       .               |          |    N12\n          .             |3      \
    \   .             Ib|5         |6 2/\n          .           +---+        .   \
    \          +----+     +---+/\n          .           |RT9|        .    .........|RT10|.....|RT7|---N15.\n\
    \          .           +---+        .    .        +----+     +---+ 9    .\n  \
    \        .             |1         .    .    +  /3    1\\      |1       .\n   \
    \       .            _|__        .    .    | /        \\   __|_       .\n    \
    \      .           /    \\      1+----+2   |/          \\ /    \\      .\n   \
    \       .          *  N9  *------|RT11|----|            *  N6  *     .\n     \
    \     .           \\____/       +----+    |             \\____/      .\n     \
    \     .             |          .    .    |                |        .\n       \
    \   .             |1         .    .    +                |1       .\n         \
    \ .  +--+   10+----+       .    .   N8              +---+      .\n          .\
    \  |H1|-----|RT12|       .    .                   |RT8|      .\n          .  +--+SLIP\
    \ +----+       .    .                   +---+      .\n          .            \
    \ |2         .    .                     |4       .\n          .             |\
    \          .    .                     |        .\n          .        +---------+\
    \     .    .                 +--------+   .\n          .            N10      \
    \   .    .                     N7       .\n          .                       \
    \ .    .Area 2                        .\n          .Area 3                  .\
    \    ................................\n          ..........................\n\
    \               Figure 6: A sample OSPF area configuration\n   It also shows the\
    \ complete view of the internet for the two internal\n   routers RT1 and RT2.\
    \  It is the job of the area border routers, RT3\n   and RT4, to advertise into\
    \ Area 1 the distances to all destinations\n   external to the area.  These are\
    \ indicated in Figure 7 by the dashed\n   stub routes.  Also, RT3 and RT4 must\
    \ advertise into Area 1 the\n   location of the AS boundary routers RT5 and RT7.\
    \  Finally, AS-\n   external-LSAs from RT5 and RT7 are flooded throughout the\
    \ entire AS,\n   and in particular throughout Area 1.  These LSAs are included\
    \ in Area\n   1's database, and yield routes to Networks N12-N15.\n   Routers\
    \ RT3 and RT4 must also summarize Area 1's topology for\n   distribution to the\
    \ backbone.  Their backbone LSAs are shown in Table\n   4.  These summaries show\
    \ which networks are contained in Area 1\n   (i.e., Networks N1-N4), and the distance\
    \ to these networks from the\n   routers RT3 and RT4 respectively.\n   The link-state\
    \ database for the backbone is shown in Figure 8.  The\n   set of routers pictured\
    \ are the backbone routers.  Router RT11 is a\n   backbone router because it belongs\
    \ to two areas.  In order to make\n   the backbone connected, a virtual link has\
    \ been configured between\n   Routers R10 and R11.\n   The area border routers\
    \ RT3, RT4, RT7, RT10 and RT11 condense the\n   routing information of their attached\
    \ non-backbone areas for\n   distribution via the backbone; these are the dashed\
    \ stubs that appear\n   in Figure 8.  Remember that the third area has been configured\
    \ to\n   condense Networks N9-N11 and Host H1 into a single route.  This\n   yields\
    \ a single dashed line for networks N9-N11 and Host H1 in Figure\n   8.  Routers\
    \ RT5 and RT7 are AS boundary routers; their externally\n   derived information\
    \ also appears on the graph in Figure 8 as stubs.\n                     Network\
    \   RT3 adv.   RT4 adv.\n                     _____________________________\n\
    \                     N1        4          4\n                     N2        4\
    \          4\n                     N3        1          1\n                  \
    \   N4        2          3\n              Table 4: Networks advertised to the\
    \ backbone\n                        by Routers RT3 and RT4.\n                \
    \          |RT|RT|RT|RT|RT|RT|\n                          |1 |2 |3 |4 |5 |7 |N3|\n\
    \                       ----- -------------------\n                       RT1|\
    \  |  |  |  |  |  |0 |\n                       RT2|  |  |  |  |  |  |0 |\n   \
    \                    RT3|  |  |  |  |  |  |0 |\n                   *   RT4|  |\
    \  |  |  |  |  |0 |\n                   *   RT5|  |  |14|8 |  |  |  |\n      \
    \             T   RT7|  |  |20|14|  |  |  |\n                   O    N1|3 |  |\
    \  |  |  |  |  |\n                   *    N2|  |3 |  |  |  |  |  |\n         \
    \          *    N3|1 |1 |1 |1 |  |  |  |\n                        N4|  |  |2 |\
    \  |  |  |  |\n                     Ia,Ib|  |  |20|27|  |  |  |\n            \
    \            N6|  |  |16|15|  |  |  |\n                        N7|  |  |20|19|\
    \  |  |  |\n                        N8|  |  |18|18|  |  |  |\n               \
    \  N9-N11,H1|  |  |29|36|  |  |  |\n                       N12|  |  |  |  |8 |2\
    \ |  |\n                       N13|  |  |  |  |8 |  |  |\n                   \
    \    N14|  |  |  |  |8 |  |  |\n                       N15|  |  |  |  |  |9 |\
    \  |\n                      Figure 7: Area 1's Database.\n           Networks\
    \ and routers are represented by vertices.\n          An edge of cost X connects\
    \ Vertex A to Vertex B iff\n            the intersection of Column A and Row B\
    \ is marked\n                               with an X.\n                     \
    \                             **FROM**\n                            |RT|RT|RT|RT|RT|RT|RT\n\
    \                            |3 |4 |5 |6 |7 |10|11|\n                        \
    \ ------------------------\n                         RT3|  |  |  |6 |  |  |  |\n\
    \                         RT4|  |  |8 |  |  |  |  |\n                        \
    \ RT5|  |8 |  |6 |6 |  |  |\n                         RT6|8 |  |7 |  |  |5 | \
    \ |\n                         RT7|  |  |6 |  |  |  |  |\n                    \
    \ *  RT10|  |  |  |7 |  |  |2 |\n                     *  RT11|  |  |  |  |  |3\
    \ |  |\n                     T    N1|4 |4 |  |  |  |  |  |\n                 \
    \    O    N2|4 |4 |  |  |  |  |  |\n                     *    N3|1 |1 |  |  |\
    \  |  |  |\n                     *    N4|2 |3 |  |  |  |  |  |\n             \
    \             Ia|  |  |  |  |  |5 |  |\n                          Ib|  |  |  |7\
    \ |  |  |  |\n                          N6|  |  |  |  |1 |1 |3 |\n           \
    \               N7|  |  |  |  |5 |5 |7 |\n                          N8|  |  |\
    \  |  |4 |3 |2 |\n                   N9-N11,H1|  |  |  |  |  |  |11|\n       \
    \                  N12|  |  |8 |  |2 |  |  |\n                         N13|  |\
    \  |8 |  |  |  |  |\n                         N14|  |  |8 |  |  |  |  |\n    \
    \                     N15|  |  |  |  |9 |  |  |\n                   Figure 8:\
    \ The backbone's database.\n           Networks and routers are represented by\
    \ vertices.\n          An edge of cost X connects Vertex A to Vertex B iff\n \
    \           the intersection of Column A and Row B is marked\n               \
    \                with an X.\n   The backbone enables the exchange of summary information\
    \ between area\n   border routers.  Every area border router hears the area summaries\n\
    \   from all other area border routers.  It then forms a picture of the\n   distance\
    \ to all networks outside of its area by examining the\n   collected LSAs, and\
    \ adding in the backbone distance to each\n   advertising router.\n   Again using\
    \ Routers RT3 and RT4 as an example, the procedure goes as\n   follows: They first\
    \ calculate the SPF tree for the backbone.  This\n   gives the distances to all\
    \ other area border routers.  Also noted are\n   the distances to networks (Ia\
    \ and Ib) and AS boundary routers (RT5\n   and RT7) that belong to the backbone.\
    \  This calculation is shown in\n   Table 5.\n   Next, by looking at the area\
    \ summaries from these area border\n   routers, RT3 and RT4 can determine the\
    \ distance to all networks\n   outside their area.  These distances are then advertised\
    \ internally\n   to the area by RT3 and RT4.  The advertisements that Router RT3\
    \ and\n   RT4 will make into Area 1 are shown in Table 6.  Note that Table 6\n\
    \   assumes that an area range has been configured for the backbone which\n  \
    \ groups Ia and Ib into a single LSA.\n   The information imported into Area 1\
    \ by Routers RT3 and RT4 enables\n   an internal router, such as RT1, to choose\
    \ an area border router\n   intelligently.  Router RT1 would use RT4 for traffic\
    \ to Network N6,\n   RT3 for traffic to Network N10, and would load share between\
    \ the two\n   for traffic to Network N8.\n                              dist \
    \ from   dist  from\n                              RT3          RT4\n        \
    \           __________________________________\n                   to  RT3   \
    \ *            21\n                   to  RT4    22           *\n            \
    \       to  RT7    20           14\n                   to  RT10   15         \
    \  22\n                   to  RT11   18           25\n                   __________________________________\n\
    \                   to  Ia     20           27\n                   to  Ib    \
    \ 15           22\n                   __________________________________\n   \
    \                to  RT5    14           8\n                   to  RT7    20 \
    \          14\n                 Table 5: Backbone distances calculated\n     \
    \                   by Routers RT3 and RT4.\n                   Destination  \
    \ RT3 adv.   RT4 adv.\n                   _________________________________\n\
    \                   Ia,Ib         20         27\n                   N6       \
    \     16         15\n                   N7            20         19\n        \
    \           N8            18         18\n                   N9-N11,H1     29 \
    \        36\n                   _________________________________\n          \
    \         RT5           14         8\n                   RT7           20    \
    \     14\n              Table 6: Destinations advertised into Area 1\n       \
    \                 by Routers RT3 and RT4.\n   Router RT1 can also determine in\
    \ this manner the shortest path to the\n   AS boundary routers RT5 and RT7.  Then,\
    \ by looking at RT5 and RT7's\n   AS-external-LSAs, Router RT1 can decide between\
    \ RT5 or RT7 when\n   sending to a destination in another Autonomous System (one\
    \ of the\n   networks N12-N15).\n   Note that a failure of the line between Routers\
    \ RT6 and RT10 will\n   cause the backbone to become disconnected.  Configuring\
    \ a virtual\n   link between Routers RT7 and RT10 will give the backbone more\n\
    \   connectivity and more resistance to such failures.\n"
- title: 3.5.  IP subnetting support
  contents:
  - "3.5.  IP subnetting support\n   OSPF attaches an IP address mask to each advertised\
    \ route.  The mask\n   indicates the range of addresses being described by the\
    \ particular\n   route.  For example, a summary-LSA for the destination 128.185.0.0\n\
    \   with a mask of 0xffff0000 actually is describing a single route to\n   the\
    \ collection of destinations 128.185.0.0 - 128.185.255.255.\n   Similarly, host\
    \ routes are always advertised with a mask of\n   0xffffffff, indicating the presence\
    \ of only a single destination.\n   Including the mask with each advertised destination\
    \ enables the\n   implementation of what is commonly referred to as variable-length\n\
    \   subnetting.  This means that a single IP class A, B, or C network\n   number\
    \ can be broken up into many subnets of various sizes. For\n   example, the network\
    \ 128.185.0.0 could be broken up into 62\n   variable-sized subnets: 15 subnets\
    \ of size 4K, 15 subnets of size\n   256, and 32 subnets of size 8.  Table 7 shows\
    \ some of the resulting\n   network addresses together with their masks.\n   \
    \               Network address   IP address mask   Subnet size\n            \
    \      _______________________________________________\n                  128.185.16.0\
    \      0xfffff000        4K\n                  128.185.1.0       0xffffff00  \
    \      256\n                  128.185.0.8       0xfffffff8        8\n        \
    \           Table 7: Some sample subnet sizes.\n   There are many possible ways\
    \ of dividing up a class A, B, and C\n   network into variable sized subnets.\
    \  The precise procedure for doing\n   so is beyond the scope of this specification.\
    \  This specification\n   however establishes the following guideline: When an\
    \ IP packet is\n   forwarded, it is always forwarded to the network that is the\
    \ best\n   match for the packet's destination.  Here best match is synonymous\n\
    \   with the longest or most specific match.  For example, the default\n   route\
    \ with destination of 0.0.0.0 and mask 0x00000000 is always a\n   match for every\
    \ IP destination.  Yet it is always less specific than\n   any other match.  Subnet\
    \ masks must be assigned so that the best\n   match for any IP destination is\
    \ unambiguous.\n   Attaching an address mask to each route also enables the support\
    \ of\n   IP supernetting. For example, a single physical network segment could\n\
    \   be assigned the [address,mask] pair [192.9.4.0,0xfffffc00]. The\n   segment\
    \ would then be single IP network, containing addresses from\n   the four consecutive\
    \ class C network numbers 192.9.4.0 through\n   192.9.7.0. Such addressing is\
    \ now becoming commonplace with the\n   advent of CIDR (see [Ref10]).\n   In order\
    \ to get better aggregation at area boundaries, area address\n   ranges can be\
    \ employed (see Section C.2 for more details).  Each\n   address range is defined\
    \ as an [address,mask] pair.  Many separate\n   networks may then be contained\
    \ in a single address range, just as a\n   subnetted network is composed of many\
    \ separate subnets.  Area border\n   routers then summarize the area contents\
    \ (for distribution to the\n   backbone) by advertising a single route for each\
    \ address range.  The\n   cost of the route is the maximum cost to any of the\
    \ networks falling\n   in the specified range.\n   For example, an IP subnetted\
    \ network might be configured as a single\n   OSPF area.  In that case, a single\
    \ address range could be configured:\n   a class A, B, or C network number along\
    \ with its natural IP mask.\n   Inside the area, any number of variable sized\
    \ subnets could be\n   defined.  However, external to the area a single route\
    \ for the entire\n   subnetted network would be distributed, hiding even the fact\
    \ that the\n   network is subnetted at all.  The cost of this route is the maximum\n\
    \   of the set of costs to the component subnets.\n"
- title: 3.6.  Supporting stub areas
  contents:
  - "3.6.  Supporting stub areas\n   In some Autonomous Systems, the majority of the\
    \ link-state database\n   may consist of AS-external-LSAs.  An OSPF AS-external-LSA\
    \ is usually\n   flooded throughout the entire AS.  However, OSPF allows certain\
    \ areas\n   to be configured as \"stub areas\".  AS-external-LSAs are not flooded\n\
    \   into/throughout stub areas; routing to AS external destinations in\n   these\
    \ areas is based on a (per-area) default only.  This reduces the\n   link-state\
    \ database size, and therefore the memory requirements, for\n   a stub area's\
    \ internal routers.\n   In order to take advantage of the OSPF stub area support,\
    \ default\n   routing must be used in the stub area.  This is accomplished as\n\
    \   follows.  One or more of the stub area's area border routers must\n   advertise\
    \ a default route into the stub area via summary-LSAs.  These\n   summary defaults\
    \ are flooded throughout the stub area, but no\n   further.  (For this reason\
    \ these defaults pertain only to the\n   particular stub area).  These summary\
    \ default routes will be used for\n   any destination that is not explicitly reachable\
    \ by an intra-area or\n   inter-area path (i.e., AS external destinations).\n\
    \   An area can be configured as a stub when there is a single exit point\n  \
    \ from the area, or when the choice of exit point need not be made on a\n   per-external-destination\
    \ basis.  For example, Area 3 in Figure 6\n   could be configured as a stub area,\
    \ because all external traffic must\n   travel though its single area border router\
    \ RT11.  If Area 3 were\n   configured as a stub, Router RT11 would advertise\
    \ a default route for\n   distribution inside Area 3 (in a summary-LSA), instead\
    \ of flooding\n   the AS-external-LSAs for Networks N12-N15 into/throughout the\
    \ area.\n   The OSPF protocol ensures that all routers belonging to an area agree\n\
    \   on whether the area has been configured as a stub.  This guarantees\n   that\
    \ no confusion will arise in the flooding of AS-external-LSAs.\n   There are a\
    \ couple of restrictions on the use of stub areas.  Virtual\n   links cannot be\
    \ configured through stub areas.  In addition, AS\n   boundary routers cannot\
    \ be placed internal to stub areas.\n"
- title: 3.7.  Partitions of areas
  contents:
  - "3.7.  Partitions of areas\n   OSPF does not actively attempt to repair area partitions.\
    \  When an\n   area becomes partitioned, each component simply becomes a separate\n\
    \   area.  The backbone then performs routing between the new areas.\n   Some\
    \ destinations reachable via intra-area routing before the\n   partition will\
    \ now require inter-area routing.\n   However, in order to maintain full routing\
    \ after the partition, an\n   address range must not be split across multiple\
    \ components of the\n   area partition. Also, the backbone itself must not partition.\
    \  If it\n   does, parts of the Autonomous System will become unreachable.\n \
    \  Backbone partitions can be repaired by configuring virtual links (see\n   Section\
    \ 15).\n   Another way to think about area partitions is to look at the\n   Autonomous\
    \ System graph that was introduced in Section 2.  Area IDs\n   can be viewed as\
    \ colors for the graph's edges.[1] Each edge of the\n   graph connects to a network,\
    \ or is itself a point-to-point network.\n   In either case, the edge is colored\
    \ with the network's Area ID.\n   A group of edges, all having the same color,\
    \ and interconnected by\n   vertices, represents an area.  If the topology of\
    \ the Autonomous\n   System is intact, the graph will have several regions of\
    \ color, each\n   color being a distinct Area ID.\n   When the AS topology changes,\
    \ one of the areas may become\n   partitioned.  The graph of the AS will then\
    \ have multiple regions of\n   the same color (Area ID).  The routing in the Autonomous\
    \ System will\n   continue to function as long as these regions of same color\
    \ are\n   connected by the single backbone region.\n"
- title: 4.  Functional Summary
  contents:
  - "4.  Functional Summary\n   A separate copy of OSPF's basic routing algorithm\
    \ runs in each area.\n   Routers having interfaces to multiple areas run multiple\
    \ copies of\n   the algorithm.  A brief summary of the routing algorithm follows.\n\
    \   When a router starts, it first initializes the routing protocol data\n   structures.\
    \  The router then waits for indications from the lower-\n   level protocols that\
    \ its interfaces are functional.\n   A router then uses the OSPF's Hello Protocol\
    \ to acquire neighbors.\n   The router sends Hello packets to its neighbors, and\
    \ in turn receives\n   their Hello packets.  On broadcast and point-to-point networks,\
    \ the\n   router dynamically detects its neighboring routers by sending its\n\
    \   Hello packets to the multicast address AllSPFRouters.  On non-\n   broadcast\
    \ networks, some configuration information may be necessary\n   in order to discover\
    \ neighbors.  On broadcast and NBMA networks the\n   Hello Protocol also elects\
    \ a Designated router for the network.\n   The router will attempt to form adjacencies\
    \ with some of its newly\n   acquired neighbors.  Link-state databases are synchronized\
    \ between\n   pairs of adjacent routers. On broadcast and NBMA networks, the\n\
    \   Designated Router determines which routers should become adjacent.\n   Adjacencies\
    \ control the distribution of routing information.  Routing\n   updates are sent\
    \ and received only on adjacencies.\n   A router periodically advertises its state,\
    \ which is also called link\n   state.  Link state is also advertised when a router's\
    \ state changes.\n   A router's adjacencies are reflected in the contents of its\
    \ LSAs.\n   This relationship between adjacencies and link state allows the\n\
    \   protocol to detect dead routers in a timely fashion.\n   LSAs are flooded\
    \ throughout the area.  The flooding algorithm is\n   reliable, ensuring that\
    \ all routers in an area have exactly the same\n   link-state database.  This\
    \ database consists of the collection of\n   LSAs originated by each router belonging\
    \ to the area.  From this\n   database each router calculates a shortest-path\
    \ tree, with itself as\n   root.  This shortest-path tree in turn yields a routing\
    \ table for the\n   protocol.\n"
- title: 4.1.  Inter-area routing
  contents:
  - "4.1.  Inter-area routing\n   The previous section described the operation of\
    \ the protocol within a\n   single area.  For intra-area routing, no other routing\
    \ information is\n   pertinent.  In order to be able to route to destinations\
    \ outside of\n   the area, the area border routers inject additional routing\n\
    \   information into the area.  This additional information is a\n   distillation\
    \ of the rest of the Autonomous System's topology.\n   This distillation is accomplished\
    \ as follows: Each area border router\n   is by definition connected to the backbone.\
    \  Each area border router\n   summarizes the topology of its attached non-backbone\
    \ areas for\n   transmission on the backbone, and hence to all other area border\n\
    \   routers. An area border router then has complete topological\n   information\
    \ concerning the backbone, and the area summaries from each\n   of the other area\
    \ border routers.  From this information, the router\n   calculates paths to all\
    \ inter-area destinations.  The router then\n   advertises these paths into its\
    \ attached areas.  This enables the\n   area's internal routers to pick the best\
    \ exit router when forwarding\n   traffic inter-area destinations.\n"
- title: 4.2.  AS external routes
  contents:
  - "4.2.  AS external routes\n   Routers that have information regarding other Autonomous\
    \ Systems can\n   flood this information throughout the AS.  This external routing\n\
    \   information is distributed verbatim to every participating router.\n   There\
    \ is one exception: external routing information is not flooded\n   into \"stub\"\
    \ areas (see Section 3.6).\n   To utilize external routing information, the path\
    \ to all routers\n   advertising external information must be known throughout\
    \ the AS\n   (excepting the stub areas).  For that reason, the locations of these\n\
    \   AS boundary routers are summarized by the (non-stub) area border\n   routers.\n"
- title: 4.3.  Routing protocol packets
  contents:
  - "4.3.  Routing protocol packets\n   The OSPF protocol runs directly over IP, using\
    \ IP protocol 89.  OSPF\n   does not provide any explicit fragmentation/reassembly\
    \ support.  When\n   fragmentation is necessary, IP fragmentation/reassembly is\
    \ used.\n   OSPF protocol packets have been designed so that large protocol\n\
    \   packets can generally be split into several smaller protocol packets.\n  \
    \ This practice is recommended; IP fragmentation should be avoided\n   whenever\
    \ possible.\n   Routing protocol packets should always be sent with the IP TOS\
    \ field\n   set to 0.  If at all possible, routing protocol packets should be\n\
    \   given preference over regular IP data traffic, both when being sent\n   and\
    \ received.  As an aid to accomplishing this, OSPF protocol packets\n   should\
    \ have their IP precedence field set to the value Internetwork\n   Control (see\
    \ [Ref5]).\n   All OSPF protocol packets share a common protocol header that is\n\
    \   described in Appendix A.  The OSPF packet types are listed below in\n   Table\
    \ 8.  Their formats are also described in Appendix A.\n     Type   Packet  name\n\
    \           Protocol  function\n     __________________________________________________________\n\
    \     1      Hello                  Discover/maintain  neighbors\n     2     \
    \ Database Description   Summarize database contents\n     3      Link State Request\
    \     Database download\n     4      Link State Update      Database update\n\
    \     5      Link State Ack         Flooding acknowledgment\n                \
    \      Table 8: OSPF packet types.\n   OSPF's Hello protocol uses Hello packets\
    \ to discover and maintain\n   neighbor relationships.  The Database Description\
    \ and Link State\n   Request packets are used in the forming of adjacencies. \
    \ OSPF's\n   reliable update mechanism is implemented by the Link State Update\
    \ and\n   Link State Acknowledgment packets.\n   Each Link State Update packet\
    \ carries a set of new link state\n   advertisements (LSAs) one hop further away\
    \ from their point of\n   origination.  A single Link State Update packet may\
    \ contain the LSAs\n   of several routers.  Each LSA is tagged with the ID of\
    \ the\n   originating router and a checksum of its link state contents.  Each\n\
    \   LSA also has a type field; the different types of OSPF LSAs are\n   listed\
    \ below in Table 9.\n   OSPF routing packets (with the exception of Hellos) are\
    \ sent only\n   over adjacencies.  This means that all OSPF protocol packets travel\
    \ a\n   single IP hop, except those that are sent over virtual adjacencies.\n\
    \   The IP source address of an OSPF protocol packet is one end of a\n   router\
    \ adjacency, and the IP destination address is either the other\n   end of the\
    \ adjacency or an IP multicast address.\n        LS     LSA                LSA\
    \ description\n        type   name\n        ________________________________________________________\n\
    \        1      Router-LSAs        Originated by all routers.\n              \
    \                    This LSA describes\n                                  the\
    \ collected states of the\n                                  router's interfaces\
    \ to an\n                                  area. Flooded throughout a\n      \
    \                            single area only.\n        ________________________________________________________\n\
    \        2      Network-LSAs       Originated for broadcast\n                \
    \                  and NBMA networks by\n                                  the\
    \ Designated Router. This\n                                  LSA contains the\n\
    \                                  list of routers connected\n               \
    \                   to the network. Flooded\n                                \
    \  throughout a single area only.\n        ________________________________________________________\n\
    \        3,4    Summary-LSAs       Originated by area border\n               \
    \                   routers, and flooded through-\n                          \
    \        out the LSA's associated\n                                  area. Each\
    \ summary-LSA\n                                  describes a route to a\n    \
    \                              destination outside the area,\n               \
    \                   yet still inside the AS\n                                \
    \  (i.e., an inter-area route).\n                                  Type 3 summary-LSAs\
    \ describe\n                                  routes to networks. Type 4\n   \
    \                               summary-LSAs describe\n                      \
    \            routes to AS boundary routers.\n        ________________________________________________________\n\
    \        5      AS-external-LSAs   Originated by AS boundary\n               \
    \                   routers, and flooded through-\n                          \
    \        out the AS. Each\n                                  AS-external-LSA describes\n\
    \                                  a route to a destination in\n             \
    \                     another Autonomous System.\n                           \
    \       Default routes for the AS can\n                                  also\
    \ be described by\n                                  AS-external-LSAs.\n     \
    \       Table 9: OSPF link state advertisements (LSAs).\n"
- title: 4.4.  Basic implementation requirements
  contents:
  - "4.4.  Basic implementation requirements\n   An implementation of OSPF requires\
    \ the following pieces of system\n   support:\n   Timers\n      Two different\
    \ kind of timers are required. The first kind, called\n      \"single shot timers\"\
    , fire once and cause a protocol event to be\n      processed.  The second kind,\
    \ called \"interval timers\", fire at\n      continuous intervals.  These are\
    \ used for the sending of packets\n      at regular intervals.  A good example\
    \ of this is the regular\n      broadcast of Hello packets. The granularity of\
    \ both kinds of\n      timers is one second.\n      Interval timers should be\
    \ implemented to avoid drift.  In some\n      router implementations, packet processing\
    \ can affect timer\n      execution.  When multiple routers are attached to a\
    \ single\n      network, all doing broadcasts, this can lead to the\n      synchronization\
    \ of routing packets (which should be avoided).  If\n      timers cannot be implemented\
    \ to avoid drift, small random amounts\n      should be added to/subtracted from\
    \ the interval timer at each\n      firing.\n   IP multicast\n      Certain OSPF\
    \ packets take the form of IP multicast datagrams.\n      Support for receiving\
    \ and sending IP multicast datagrams, along\n      with the appropriate lower-level\
    \ protocol support, is required.\n      The IP multicast datagrams used by OSPF\
    \ never travel more than one\n      hop. For this reason, the ability to forward\
    \ IP multicast\n      datagrams is not required.  For information on IP multicast,\
    \ see\n      [Ref7].\n   Variable-length subnet support\n      The router's IP\
    \ protocol support must include the ability to\n      divide a single IP class\
    \ A, B, or C network number into many\n      subnets of various sizes.  This is\
    \ commonly called variable-length\n      subnetting; see Section 3.5 for details.\n\
    \   IP supernetting support\n      The router's IP protocol support must include\
    \ the ability to\n      aggregate contiguous collections of IP class A, B, and\
    \ C networks\n      into larger quantities called supernets.  Supernetting has\
    \ been\n      proposed as one way to improve the scaling of IP routing in the\n\
    \      worldwide Internet. For more information on IP supernetting, see\n    \
    \  [Ref10].\n   Lower-level protocol support\n      The lower level protocols\
    \ referred to here are the network access\n      protocols, such as the Ethernet\
    \ data link layer.  Indications must\n      be passed from these protocols to\
    \ OSPF as the network interface\n      goes up and down.  For example, on an ethernet\
    \ it would be\n      valuable to know when the ethernet transceiver cable becomes\n\
    \      unplugged.\n   Non-broadcast lower-level protocol support\n      On non-broadcast\
    \ networks, the OSPF Hello Protocol can be aided by\n      providing an indication\
    \ when an attempt is made to send a packet\n      to a dead or non-existent router.\
    \  For example, on an X.25 PDN a\n      dead neighboring router may be indicated\
    \ by the reception of a\n      X.25 clear with an appropriate cause and diagnostic,\
    \ and this\n      information would be passed to OSPF.\n   List manipulation primitives\n\
    \      Much of the OSPF functionality is described in terms of its\n      operation\
    \ on lists of LSAs.  For example, the collection of LSAs\n      that will be retransmitted\
    \ to an adjacent router until\n      acknowledged are described as a list.  Any\
    \ particular LSA may be\n      on many such lists.  An OSPF implementation needs\
    \ to be able to\n      manipulate these lists, adding and deleting constituent\
    \ LSAs as\n      necessary.\n   Tasking support\n      Certain procedures described\
    \ in this specification invoke other\n      procedures.  At times, these other\
    \ procedures should be executed\n      in-line, that is, before the current procedure\
    \ is finished.  This\n      is indicated in the text by instructions to execute\
    \ a procedure.\n      At other times, the other procedures are to be executed\
    \ only when\n      the current procedure has finished.  This is indicated by\n\
    \      instructions to schedule a task.\n"
- title: 4.5.  Optional OSPF capabilities
  contents:
  - "4.5.  Optional OSPF capabilities\n   The OSPF protocol defines several optional\
    \ capabilities.  A router\n   indicates the optional capabilities that it supports\
    \ in its OSPF\n   Hello packets, Database Description packets and in its LSAs.\
    \  This\n   enables routers supporting a mix of optional capabilities to coexist\n\
    \   in a single Autonomous System.\n   Some capabilities must be supported by\
    \ all routers attached to a\n   specific area.  In this case, a router will not\
    \ accept a neighbor's\n   Hello Packet unless there is a match in reported capabilities\
    \ (i.e.,\n   a capability mismatch prevents a neighbor relationship from forming).\n\
    \   An example of this is the ExternalRoutingCapability (see below).\n   Other\
    \ capabilities can be negotiated during the Database Exchange\n   process.  This\
    \ is accomplished by specifying the optional\n   capabilities in Database Description\
    \ packets.  A capability mismatch\n   with a neighbor in this case will result\
    \ in only a subset of the link\n   state database being exchanged between the\
    \ two neighbors.\n   The routing table build process can also be affected by the\n\
    \   presence/absence of optional capabilities.  For example, since the\n   optional\
    \ capabilities are reported in LSAs, routers incapable of\n   certain functions\
    \ can be avoided when building the shortest path\n   tree.\n   The OSPF optional\
    \ capabilities defined in this memo are listed below.\n   See Section A.2 for\
    \ more information.\n   ExternalRoutingCapability\n      Entire OSPF areas can\
    \ be configured as \"stubs\" (see Section 3.6).\n      AS-external-LSAs will not\
    \ be flooded into stub areas.  This\n      capability is represented by the E-bit\
    \ in the OSPF Options field\n      (see Section A.2).  In order to ensure consistent\
    \ configuration of\n      stub areas, all routers interfacing to such an area\
    \ must have the\n      E-bit clear in their Hello packets (see Sections 9.5 and\
    \ 10.5).\n"
- title: 5.  Protocol Data Structures
  contents:
  - "5.  Protocol Data Structures\n   The OSPF protocol is described herein in terms\
    \ of its operation on\n   various protocol data structures.  The following list\
    \ comprises the\n   top-level OSPF data structures.  Any initialization that needs\
    \ to be\n   done is noted.  OSPF areas, interfaces and neighbors also have\n \
    \  associated data structures that are described later in this\n   specification.\n\
    \   Router ID\n      A 32-bit number that uniquely identifies this router in the\
    \ AS.\n      One possible implementation strategy would be to use the smallest\n\
    \      IP interface address belonging to the router. If a router's OSPF\n    \
    \  Router ID is changed, the router's OSPF software should be\n      restarted\
    \ before the new Router ID takes effect.  In this case the\n      router should\
    \ flush its self-originated LSAs from the routing\n      domain (see Section 14.1)\
    \ before restarting, or they will persist\n      for up to MaxAge minutes.\n \
    \  Area structures\n      Each one of the areas to which the router is connected\
    \ has its own\n      data structure.  This data structure describes the working\
    \ of the\n      basic OSPF algorithm.  Remember that each area runs a separate\n\
    \      copy of the basic OSPF algorithm.\n   Backbone (area) structure\n     \
    \ The OSPF backbone area is responsible for the dissemination of\n      inter-area\
    \ routing information.\n   Virtual links configured\n      The virtual links configured\
    \ with this router as one endpoint.  In\n      order to have configured virtual\
    \ links, the router itself must be\n      an area border router.  Virtual links\
    \ are identified by the Router\n      ID of the other endpoint -- which is another\
    \ area border router.\n      These two endpoint routers must be attached to a\
    \ common area,\n      called the virtual link's Transit area.  Virtual links are\
    \ part of\n      the backbone, and behave as if they were unnumbered point-to-point\n\
    \      networks between the two routers.  A virtual link uses the intra-\n   \
    \   area routing of its Transit area to forward packets.  Virtual\n      links\
    \ are brought up and down through the building of the\n      shortest-path trees\
    \ for the Transit area.\n   List of external routes\n      These are routes to\
    \ destinations external to the Autonomous\n      System, that have been gained\
    \ either through direct experience\n      with another routing protocol (such\
    \ as BGP), or through\n      configuration information, or through a combination\
    \ of the two\n      (e.g., dynamic external information to be advertised by OSPF\
    \ with\n      configured metric). Any router having these external routes is\n\
    \      called an AS boundary router.  These routes are advertised by the\n   \
    \   router into the OSPF routing domain via AS-external-LSAs.\n   List of AS-external-LSAs\n\
    \      Part of the link-state database.  These have originated from the\n    \
    \  AS boundary routers.  They comprise routes to destinations\n      external\
    \ to the Autonomous System.  Note that, if the router is\n      itself an AS boundary\
    \ router, some of these AS-external-LSAs have\n      been self-originated.\n \
    \  The routing table\n      Derived from the link-state database.  Each entry\
    \ in the routing\n      table is indexed by a destination, and contains the destination's\n\
    \      cost and a set of paths to use in forwarding packets to the\n      destination.\
    \ A path is described by its type and next hop.  For\n      more information,\
    \ see Section 11.\n   Figure 9 shows the collection of data structures present\
    \ in a typical\n   router.  The router pictured is RT10, from the map in Figure\
    \ 6.  Note\n   that Router RT10 has a virtual link configured to Router RT11,\
    \ with\n   Area 2 as the link's Transit area.  This is indicated by the dashed\n\
    \   line in Figure 9.  When the virtual link becomes active, through the\n   building\
    \ of the shortest path tree for Area 2, it becomes an\n   interface to the backbone\
    \ (see the two backbone interfaces depicted\n   in Figure 9).\n              \
    \                +----+\n                              |RT10|------+\n       \
    \                       +----+       \\+-------------+\n                     \
    \        /      \\       |Routing Table|\n                            /      \
    \  \\      +-------------+\n                           /          \\\n       \
    \       +------+    /            \\    +--------+\n              |Area 2|---+\
    \              +---|Backbone|\n              +------+***********+          +--------+\n\
    \             /        \\           *        /          \\\n            /    \
    \      \\           *      /            \\\n       +---------+  +---------+  \
    \  +------------+       +------------+\n       |Interface|  |Interface|    |Virtual\
    \ Link|       |Interface Ib|\n       |  to N6  |  |  to N8  |    |   to RT11 \
    \ |       +------------+\n       +---------+  +---------+    +------------+  \
    \           |\n           /  \\           |               |                  \
    \ |\n          /    \\          |               |                   |\n   +--------+\
    \ +--------+  |        +-------------+      +------------+\n   |Neighbor| |Neighbor|\
    \  |        |Neighbor RT11|      |Neighbor RT6|\n   |  RT8   | |  RT7   |  | \
    \       +-------------+      +------------+\n   +--------+ +--------+  |\n   \
    \                       |\n                     +-------------+\n            \
    \         |Neighbor RT11|\n                     +-------------+\n            \
    \    Figure 9: Router RT10's Data structures\n"
- title: 6.  The Area Data Structure
  contents:
  - "6.  The Area Data Structure\n   The area data structure contains all the information\
    \ used to run the\n   basic OSPF routing algorithm. Each area maintains its own\
    \ link-state\n   database. A network belongs to a single area, and a router interface\n\
    \   connects to a single area. Each router adjacency also belongs to a\n   single\
    \ area.\n   The OSPF backbone is the special OSPF area responsible for\n   disseminating\
    \ inter-area routing information.\n   The area link-state database consists of\
    \ the collection of router-\n   LSAs, network-LSAs and summary-LSAs that have\
    \ originated from the\n   area's routers.  This information is flooded throughout\
    \ a single area\n   only. The list of AS-external-LSAs (see Section 5) is also\
    \ considered\n   to be part of each area's link-state database.\n   Area ID\n\
    \      A 32-bit number identifying the area. The Area ID of 0.0.0.0 is\n     \
    \ reserved for the backbone.\n   List of area address ranges\n      In order to\
    \ aggregate routing information at area boundaries, area\n      address ranges\
    \ can be employed. Each address range is specified by\n      an [address,mask]\
    \ pair and a status indication of either Advertise\n      or DoNotAdvertise (see\
    \ Section 12.4.3).\n   Associated router interfaces\n      This router's interfaces\
    \ connecting to the area.  A router\n      interface belongs to one and only one\
    \ area (or the backbone).  For\n      the backbone area this list includes all\
    \ the virtual links.  A\n      virtual link is identified by the Router ID of\
    \ its other endpoint;\n      its cost is the cost of the shortest intra-area path\
    \ through the\n      Transit area that exists between the two routers.\n   List\
    \ of router-LSAs\n      A router-LSA is generated by each router in the area.\
    \  It\n      describes the state of the router's interfaces to the area.\n   List\
    \ of network-LSAs\n      One network-LSA is generated for each transit broadcast\
    \ and NBMA\n      network in the area.  A network-LSA describes the set of routers\n\
    \      currently connected to the network.\n   List of summary-LSAs\n      Summary-LSAs\
    \ originate from the area's area border routers.  They\n      describe routes\
    \ to destinations internal to the Autonomous System,\n      yet external to the\
    \ area (i.e., inter-area destinations).\n   Shortest-path tree\n      The shortest-path\
    \ tree for the area, with this router itself as\n      root.  Derived from the\
    \ collected router-LSAs and network-LSAs by\n      the Dijkstra algorithm (see\
    \ Section 16.1).\n   TransitCapability\n      This parameter indicates whether\
    \ the area can carry data traffic\n      that neither originates nor terminates\
    \ in the area itself. This\n      parameter is calculated when the area's shortest-path\
    \ tree is\n      built (see Section 16.1, where TransitCapability is set to TRUE\
    \ if\n      and only if there are one or more fully adjacent virtual links\n \
    \     using the area as Transit area), and is used as an input to a\n      subsequent\
    \ step of the routing table build process (see Section\n      16.3). When an area's\
    \ TransitCapability is set to TRUE, the area\n      is said to be a \"transit\
    \ area\".\n   ExternalRoutingCapability\n      Whether AS-external-LSAs will be\
    \ flooded into/throughout the area.\n      This is a configurable parameter. \
    \ If AS-external-LSAs are\n      excluded from the area, the area is called a\
    \ \"stub\". Within stub\n      areas, routing to AS external destinations will\
    \ be based solely on\n      a default summary route.  The backbone cannot be configured\
    \ as a\n      stub area.  Also, virtual links cannot be configured through stub\n\
    \      areas.  For more information, see Section 3.6.\n   StubDefaultCost\n  \
    \    If the area has been configured as a stub area, and the router\n      itself\
    \ is an area border router, then the StubDefaultCost\n      indicates the cost\
    \ of the default summary-LSA that the router\n      should advertise into the\
    \ area. See Section 12.4.3 for more\n      information.\n   Unless otherwise specified,\
    \ the remaining sections of this document\n   refer to the operation of the OSPF\
    \ protocol within a single area.\n"
- title: 7.  Bringing Up Adjacencies
  contents:
  - "7.  Bringing Up Adjacencies\n   OSPF creates adjacencies between neighboring\
    \ routers for the purpose\n   of exchanging routing information. Not every two\
    \ neighboring routers\n   will become adjacent.  This section covers the generalities\
    \ involved\n   in creating adjacencies.  For further details consult Section 10.\n"
- title: 7.1.  The Hello Protocol
  contents:
  - "7.1.  The Hello Protocol\n   The Hello Protocol is responsible for establishing\
    \ and maintaining\n   neighbor relationships.  It also ensures that communication\
    \ between\n   neighbors is bidirectional.  Hello packets are sent periodically\
    \ out\n   all router interfaces.  Bidirectional communication is indicated when\n\
    \   the router sees itself listed in the neighbor's Hello Packet.  On\n   broadcast\
    \ and NBMA networks, the Hello Protocol elects a Designated\n   Router for the\
    \ network.\n   The Hello Protocol works differently on broadcast networks, NBMA\n\
    \   networks and Point-to-MultiPoint networks.  On broadcast networks,\n   each\
    \ router advertises itself by periodically multicasting Hello\n   Packets.  This\
    \ allows neighbors to be discovered dynamically.  These\n   Hello Packets contain\
    \ the router's view of the Designated Router's\n   identity, and the list of routers\
    \ whose Hello Packets have been seen\n   recently.\n   On NBMA networks some configuration\
    \ information may be necessary for\n   the operation of the Hello Protocol.  Each\
    \ router that may\n   potentially become Designated Router has a list of all other\
    \ routers\n   attached to the network.  A router, having Designated Router\n \
    \  potential, sends Hello Packets to all other potential Designated\n   Routers\
    \ when its interface to the NBMA network first becomes\n   operational.  This\
    \ is an attempt to find the Designated Router for\n   the network.  If the router\
    \ itself is elected Designated Router, it\n   begins sending Hello Packets to\
    \ all other routers attached to the\n   network.\n   On Point-to-MultiPoint networks,\
    \ a router sends Hello Packets to all\n   neighbors with which it can communicate\
    \ directly. These neighbors may\n   be discovered dynamically through a protocol\
    \ such as Inverse ARP (see\n   [Ref14]), or they may be configured.\n   After\
    \ a neighbor has been discovered, bidirectional communication\n   ensured, and\
    \ (if on a broadcast or NBMA network) a Designated Router\n   elected, a decision\
    \ is made regarding whether or not an adjacency\n   should be formed with the\
    \ neighbor (see Section 10.4). If an\n   adjacency is to be formed, the first\
    \ step is to synchronize the\n   neighbors' link-state databases.  This is covered\
    \ in the next\n   section.\n"
- title: 7.2.  The Synchronization of Databases
  contents:
  - "7.2.  The Synchronization of Databases\n   In a link-state routing algorithm,\
    \ it is very important for all\n   routers' link-state databases to stay synchronized.\
    \  OSPF simplifies\n   this by requiring only adjacent routers to remain synchronized.\
    \  The\n   synchronization process begins as soon as the routers attempt to\n\
    \   bring up the adjacency.  Each router describes its database by\n   sending\
    \ a sequence of Database Description packets to its neighbor.\n   Each Database\
    \ Description Packet describes a set of LSAs belonging to\n   the router's database.\
    \  When the neighbor sees an LSA that is more\n   recent than its own database\
    \ copy, it makes a note that this newer\n   LSA should be requested.\n   This\
    \ sending and receiving of Database Description packets is called\n   the \"Database\
    \ Exchange Process\".  During this process, the two\n   routers form a master/slave\
    \ relationship.  Each Database Description\n   Packet has a sequence number. \
    \ Database Description Packets sent by\n   the master (polls) are acknowledged\
    \ by the slave through echoing of\n   the sequence number.  Both polls and their\
    \ responses contain\n   summaries of link state data.  The master is the only\
    \ one allowed to\n   retransmit Database Description Packets.  It does so only\
    \ at fixed\n   intervals, the length of which is the configured per-interface\n\
    \   constant RxmtInterval.\n   Each Database Description contains an indication\
    \ that there are more\n   packets to follow --- the M-bit.  The Database Exchange\
    \ Process is\n   over when a router has received and sent Database Description\
    \ Packets\n   with the M-bit off.\n   During and after the Database Exchange Process,\
    \ each router has a\n   list of those LSAs for which the neighbor has more up-to-date\n\
    \   instances.  These LSAs are requested in Link State Request Packets.\n   Link\
    \ State Request packets that are not satisfied are retransmitted\n   at fixed\
    \ intervals of time RxmtInterval.  When the Database\n   Description Process has\
    \ completed and all Link State Requests have\n   been satisfied, the databases\
    \ are deemed synchronized and the routers\n   are marked fully adjacent.  At this\
    \ time the adjacency is fully\n   functional and is advertised in the two routers'\
    \ router-LSAs.\n   The adjacency is used by the flooding procedure as soon as\
    \ the\n   Database Exchange Process begins.  This simplifies database\n   synchronization,\
    \ and guarantees that it finishes in a predictable\n   period of time.\n"
- title: 7.3.  The Designated Router
  contents:
  - "7.3.  The Designated Router\n   Every broadcast and NBMA network has a Designated\
    \ Router.  The\n   Designated Router performs two main functions for the routing\n\
    \   protocol:\n   o   The Designated Router originates a network-LSA on behalf\
    \ of\n       the network.  This LSA lists the set of routers (including\n    \
    \   the Designated Router itself) currently attached to the\n       network. \
    \ The Link State ID for this LSA (see Section\n       12.1.4) is the IP interface\
    \ address of the Designated\n       Router.  The IP network number can then be\
    \ obtained by using\n       the network's subnet/network mask.\n   o   The Designated\
    \ Router becomes adjacent to all other routers\n       on the network.  Since\
    \ the link state databases are\n       synchronized across adjacencies (through\
    \ adjacency bring-up\n       and then the flooding procedure), the Designated\
    \ Router\n       plays a central part in the synchronization process.\n   The\
    \ Designated Router is elected by the Hello Protocol.  A router's\n   Hello Packet\
    \ contains its Router Priority, which is configurable on a\n   per-interface basis.\
    \  In general, when a router's interface to a\n   network first becomes functional,\
    \ it checks to see whether there is\n   currently a Designated Router for the\
    \ network.  If there is, it\n   accepts that Designated Router, regardless of\
    \ its Router Priority.\n   (This makes it harder to predict the identity of the\
    \ Designated\n   Router, but ensures that the Designated Router changes less often.\n\
    \   See below.)  Otherwise, the router itself becomes Designated Router\n   if\
    \ it has the highest Router Priority on the network.  A more\n   detailed (and\
    \ more accurate) description of Designated Router\n   election is presented in\
    \ Section 9.4.\n   The Designated Router is the endpoint of many adjacencies.\
    \  In order\n   to optimize the flooding procedure on broadcast networks, the\n\
    \   Designated Router multicasts its Link State Update Packets to the\n   address\
    \ AllSPFRouters, rather than sending separate packets over each\n   adjacency.\n\
    \   Section 2 of this document discusses the directed graph\n   representation\
    \ of an area.  Router nodes are labelled with their\n   Router ID.  Transit network\
    \ nodes are actually labelled with the IP\n   address of their Designated Router.\
    \  It follows that when the\n   Designated Router changes, it appears as if the\
    \ network node on the\n   graph is replaced by an entirely new node.  This will\
    \ cause the\n   network and all its attached routers to originate new LSAs.  Until\n\
    \   the link-state databases again converge, some temporary loss of\n   connectivity\
    \ may result.  This may result in ICMP unreachable\n   messages being sent in\
    \ response to data traffic.  For that reason,\n   the Designated Router should\
    \ change only infrequently.  Router\n   Priorities should be configured so that\
    \ the most dependable router on\n   a network eventually becomes Designated Router.\n"
- title: 7.4.  The Backup Designated Router
  contents:
  - "7.4.  The Backup Designated Router\n   In order to make the transition to a new\
    \ Designated Router smoother,\n   there is a Backup Designated Router for each\
    \ broadcast and NBMA\n   network.  The Backup Designated Router is also adjacent\
    \ to all\n   routers on the network, and becomes Designated Router when the\n\
    \   previous Designated Router fails.  If there were no Backup Designated\n  \
    \ Router, when a new Designated Router became necessary, new\n   adjacencies would\
    \ have to be formed between the new Designated Router\n   and all other routers\
    \ attached to the network.  Part of the adjacency\n   forming process is the synchronizing\
    \ of link-state databases, which\n   can potentially take quite a long time. \
    \ During this time, the\n   network would not be available for transit data traffic.\
    \  The Backup\n   Designated obviates the need to form these adjacencies, since\
    \ they\n   already exist.  This means the period of disruption in transit\n  \
    \ traffic lasts only as long as it takes to flood the new LSAs (which\n   announce\
    \ the new Designated Router).\n   The Backup Designated Router does not generate\
    \ a network-LSA for the\n   network.  (If it did, the transition to a new Designated\
    \ Router would\n   be even faster.  However, this is a tradeoff between database\
    \ size\n   and speed of convergence when the Designated Router disappears.)\n\
    \   The Backup Designated Router is also elected by the Hello Protocol.\n   Each\
    \ Hello Packet has a field that specifies the Backup Designated\n   Router for\
    \ the network.\n   In some steps of the flooding procedure, the Backup Designated\
    \ Router\n   plays a passive role, letting the Designated Router do more of the\n\
    \   work.  This cuts down on the amount of local routing traffic.  See\n   Section\
    \ 13.3 for more information.\n"
- title: 7.5.  The graph of adjacencies
  contents:
  - "7.5.  The graph of adjacencies\n   An adjacency is bound to the network that\
    \ the two routers have in\n   common.  If two routers have multiple networks in\
    \ common, they may\n   have multiple adjacencies between them.\n   One can picture\
    \ the collection of adjacencies on a network as forming\n   an undirected graph.\
    \  The vertices consist of routers, with an edge\n   joining two routers if they\
    \ are adjacent.  The graph of adjacencies\n   describes the flow of routing protocol\
    \ packets, and in particular\n   Link State Update Packets, through the Autonomous\
    \ System.\n   Two graphs are possible, depending on whether a Designated Router\
    \ is\n   elected for the network.  On physical point-to-point networks,\n   Point-to-MultiPoint\
    \ networks and virtual links, neighboring routers\n   become adjacent whenever\
    \ they can communicate directly.  In contrast,\n   on broadcast and NBMA networks\
    \ only the Designated Router and the\n   Backup Designated Router become adjacent\
    \ to all other routers\n   attached to the network.\n   These graphs are shown\
    \ in Figure 10.  It is assumed that Router RT7\n   has become the Designated Router,\
    \ and Router RT3 the Backup\n   Designated Router, for the Network N2.  The Backup\
    \ Designated Router\n   performs a lesser function during the flooding procedure\
    \ than the\n   Designated Router (see Section 13.3).  This is the reason for the\n\
    \   dashed lines connecting the Backup Designated Router RT3.\n          +---+\
    \            +---+\n          |RT1|------------|RT2|            o---------------o\n\
    \          +---+    N1      +---+           RT1             RT2\n            \
    \                                     RT7\n                                  \
    \                o---------+\n            +---+   +---+   +---+              \
    \  /|\\        |\n            |RT7|   |RT3|   |RT4|               / | \\     \
    \  |\n            +---+   +---+   +---+              /  |  \\      |\n       \
    \       |       |       |               /   |   \\     |\n         +-----------------------+\
    \        RT5o RT6o    oRT4 |\n                  |       |     N2            *\
    \   *   *     |\n                +---+   +---+                  *  *  *      |\n\
    \                |RT5|   |RT6|                   * * *       |\n             \
    \   +---+   +---+                    ***        |\n                          \
    \                        o---------+\n                                       \
    \          RT3\n                  Figure 10: The graph of adjacencies\n"
- title: 8.  Protocol Packet Processing
  contents:
  - "8.  Protocol Packet Processing\n   This section discusses the general processing\
    \ of OSPF routing\n   protocol packets.  It is very important that the router\
    \ link-state\n   databases remain synchronized.  For this reason, routing protocol\n\
    \   packets should get preferential treatment over ordinary data packets,\n  \
    \ both in sending and receiving.\n   Routing protocol packets are sent along adjacencies\
    \ only (with the\n   exception of Hello packets, which are used to discover the\n\
    \   adjacencies).  This means that all routing protocol packets travel a\n   single\
    \ IP hop, except those sent over virtual links.\n   All routing protocol packets\
    \ begin with a standard header. The\n   sections below provide details on how\
    \ to fill in and verify this\n   standard header.  Then, for each packet type,\
    \ the section giving more\n   details on that particular packet type's processing\
    \ is listed.\n"
- title: 8.1.  Sending protocol packets
  contents:
  - "8.1.  Sending protocol packets\n   When a router sends a routing protocol packet,\
    \ it fills in the fields\n   of the standard OSPF packet header as follows.  For\
    \ more details on\n   the header format consult Section A.3.1:\n   Version #\n\
    \      Set to 2, the version number of the protocol as documented in this\n  \
    \    specification.\n   Packet type\n      The type of OSPF packet, such as Link\
    \ state Update or Hello\n      Packet.\n   Packet length\n      The length of\
    \ the entire OSPF packet in bytes, including the\n      standard OSPF packet header.\n\
    \   Router ID\n      The identity of the router itself (who is originating the\
    \ packet).\n   Area ID\n      The OSPF area that the packet is being sent into.\n\
    \   Checksum\n      The standard IP 16-bit one's complement checksum of the entire\n\
    \      OSPF packet, excluding the 64-bit authentication field.  This\n      checksum\
    \ is calculated as part of the appropriate authentication\n      procedure; for\
    \ some OSPF authentication types, the checksum\n      calculation is omitted.\
    \  See Section D.4 for details.\n   AuType and Authentication\n      Each OSPF\
    \ packet exchange is authenticated.  Authentication types\n      are assigned\
    \ by the protocol and are documented in Appendix D.  A\n      different authentication\
    \ procedure can be used for each IP\n      network/subnet.  Autype indicates the\
    \ type of authentication\n      procedure in use.  The 64-bit authentication field\
    \ is then for use\n      by the chosen authentication procedure.  This procedure\
    \ should be\n      the last called when forming the packet to be sent.  See Section\n\
    \      D.4 for details.\n   The IP destination address for the packet is selected\
    \ as follows.  On\n   physical point-to-point networks, the IP destination is\
    \ always set to\n   the address AllSPFRouters.  On all other network types (including\n\
    \   virtual links), the majority of OSPF packets are sent as unicasts,\n   i.e.,\
    \ sent directly to the other end of the adjacency.  In this case,\n   the IP destination\
    \ is just the Neighbor IP address associated with\n   the other end of the adjacency\
    \ (see Section 10).  The only packets\n   not sent as unicasts are on broadcast\
    \ networks; on these networks\n   Hello packets are sent to the multicast destination\
    \ AllSPFRouters,\n   the Designated Router and its Backup send both Link State\
    \ Update\n   Packets and Link State Acknowledgment Packets to the multicast\n\
    \   address AllSPFRouters, while all other routers send both their Link\n   State\
    \ Update and Link State Acknowledgment Packets to the multicast\n   address AllDRouters.\n\
    \   Retransmissions of Link State Update packets are ALWAYS sent as\n   unicasts.\n\
    \   The IP source address should be set to the IP address of the sending\n   interface.\
    \  Interfaces to unnumbered point-to-point networks have no\n   associated IP\
    \ address.  On these interfaces, the IP source should be\n   set to any of the\
    \ other IP addresses belonging to the router.  For\n   this reason, there must\
    \ be at least one IP address assigned to the\n   router.[2] Note that, for most\
    \ purposes, virtual links act precisely\n   the same as unnumbered point-to-point\
    \ networks.  However, each\n   virtual link does have an IP interface address\
    \ (discovered during the\n   routing table build process) which is used as the\
    \ IP source when\n   sending packets over the virtual link.\n   For more information\
    \ on the format of specific OSPF packet types,\n   consult the sections listed\
    \ in Table 10.\n             Type   Packet name            detailed section (transmit)\n\
    \             _________________________________________________________\n    \
    \         1      Hello                  Section  9.5\n             2      Database\
    \ description   Section 10.8\n             3      Link state request     Section\
    \ 10.9\n             4      Link state update      Section 13.3\n            \
    \ 5      Link state ack         Section 13.5\n    Table 10: Sections describing\
    \ OSPF protocol packet transmission.\n"
- title: 8.2.  Receiving protocol packets
  contents:
  - "8.2.  Receiving protocol packets\n   Whenever a protocol packet is received by\
    \ the router it is marked\n   with the interface it was received on.  For routers\
    \ that have virtual\n   links configured, it may not be immediately obvious which\
    \ interface\n   to associate the packet with.  For example, consider the Router\
    \ RT11\n   depicted in Figure 6.  If RT11 receives an OSPF protocol packet on\n\
    \   its interface to Network N8, it may want to associate the packet with\n  \
    \ the interface to Area 2, or with the virtual link to Router RT10\n   (which\
    \ is part of the backbone).  In the following, we assume that\n   the packet is\
    \ initially associated with the non-virtual  link.[3]\n   In order for the packet\
    \ to be accepted at the IP level, it must pass\n   a number of tests, even before\
    \ the packet is passed to OSPF for\n   processing:\n   o   The IP checksum must\
    \ be correct.\n   o   The packet's IP destination address must be the IP address\n\
    \       of the receiving interface, or one of the IP multicast\n       addresses\
    \ AllSPFRouters or AllDRouters.\n   o   The IP protocol specified must be OSPF\
    \ (89).\n   o   Locally originated packets should not be passed on to OSPF.\n\
    \       That is, the source IP address should be examined to make\n       sure\
    \ this is not a multicast packet that the router itself\n       generated.\n \
    \  Next, the OSPF packet header is verified.  The fields specified\n   in the\
    \ header must match those configured for the receiving\n   interface.  If they\
    \ do not, the packet should be discarded:\n   o   The version number field must\
    \ specify protocol version 2.\n   o   The Area ID found in the OSPF header must\
    \ be verified.  If\n       both of the following cases fail, the packet should\
    \ be\n       discarded.  The Area ID specified in the header must either:\n  \
    \     (1) Match the Area ID of the receiving interface.  In this\n           case,\
    \ the packet has been sent over a single hop.\n           Therefore, the packet's\
    \ IP source address is required to\n           be on the same network as the receiving\
    \ interface.  This\n           can be verified by comparing the packet's IP source\n\
    \           address to the interface's IP address, after masking\n           both\
    \ addresses with the interface mask.  This comparison\n           should not be\
    \ performed on point-to-point networks. On\n           point-to-point networks,\
    \ the interface addresses of each\n           end of the link are assigned independently,\
    \ if they are\n           assigned at all.\n       (2) Indicate the backbone.\
    \  In this case, the packet has\n           been sent over a virtual link.  The\
    \ receiving router\n           must be an area border router, and the Router ID\n\
    \           specified in the packet (the source router) must be the\n        \
    \   other end of a configured virtual link.  The receiving\n           interface\
    \ must also attach to the virtual link's\n           configured Transit area.\
    \  If all of these checks\n           succeed, the packet is accepted and is from\
    \ now on\n           associated with the virtual link (and the backbone\n    \
    \       area).\n   o   Packets whose IP destination is AllDRouters should only\
    \ be\n       accepted if the state of the receiving interface is DR or\n     \
    \  Backup (see Section 9.1).\n   o   The AuType specified in the packet must match\
    \ the AuType\n       specified for the associated area.\n   o   The packet must\
    \ be authenticated.  The authentication\n       procedure is indicated by the\
    \ setting of AuType (see\n       Appendix D).  The authentication procedure may\
    \ use one or\n       more Authentication keys, which can be configured on a per-\n\
    \       interface basis.  The authentication procedure may also\n       verify\
    \ the checksum field in the OSPF packet header (which,\n       when used, is set\
    \ to the standard IP 16-bit one's complement\n       checksum of the OSPF packet's\
    \ contents after excluding the\n       64-bit authentication field).  If the authentication\n\
    \       procedure fails, the packet should be discarded.\n   If the packet type\
    \ is Hello, it should then be further processed by\n   the Hello Protocol (see\
    \ Section 10.5).  All other packet types are\n   sent/received only on adjacencies.\
    \  This means that the packet must\n   have been sent by one of the router's active\
    \ neighbors.  If the\n   receiving interface connects to a broadcast network,\
    \ Point-to-\n   MultiPoint network or NBMA network the sender is identified by\
    \ the IP\n   source address found in the packet's IP header.  If the receiving\n\
    \   interface connects to a point-to-point network or a virtual link, the\n  \
    \ sender is identified by the Router ID (source router) found in the\n   packet's\
    \ OSPF header.  The data structure associated with the\n   receiving interface\
    \ contains the list of active neighbors.  Packets\n   not matching any active\
    \ neighbor are discarded.\n   At this point all received protocol packets are\
    \ associated with an\n   active neighbor.  For the further input processing of\
    \ specific packet\n   types, consult the sections listed in Table 11.\n      Type\
    \   Packet name            detailed section (receive)\n      ________________________________________________________\n\
    \      1      Hello                  Section 10.5\n      2      Database description\
    \   Section 10.6\n      3      Link state request     Section 10.7\n      4  \
    \    Link state update      Section 13\n      5      Link state ack         Section\
    \ 13.7\n     Table 11: Sections describing OSPF protocol packet reception.\n"
- title: 9.  The Interface Data Structure
  contents:
  - "9.  The Interface Data Structure\n   An OSPF interface is the connection between\
    \ a router and a network.\n   We assume a single OSPF interface to each attached\
    \ network/subnet,\n   although supporting multiple interfaces on a single network\
    \ is\n   considered in Appendix F. Each interface structure has at most one IP\n\
    \   interface address.\n   An OSPF interface can be considered to belong to the\
    \ area that\n   contains the attached network.  All routing protocol packets\n\
    \   originated by the router over this interface are labelled with the\n   interface's\
    \ Area ID.  One or more router adjacencies may develop over\n   an interface.\
    \ A router's LSAs reflect the state of its interfaces and\n   their associated\
    \ adjacencies.\n   The following data items are associated with an interface.\
    \ Note that\n   a number of these items are actually configuration for the attached\n\
    \   network; such items must be the same for all routers connected to the\n  \
    \ network.\n   Type\n      The OSPF interface type is either point-to-point, broadcast,\
    \ NBMA,\n      Point-to-MultiPoint or virtual link.\n   State\n      The functional\
    \ level of an interface.  State determines whether or\n      not full adjacencies\
    \ are allowed to form over the interface.\n      State is also reflected in the\
    \ router's LSAs.\n   IP interface address\n      The IP address associated with\
    \ the interface.  This appears as the\n      IP source address in all routing\
    \ protocol packets originated over\n      this interface.  Interfaces to unnumbered\
    \ point-to-point networks\n      do not have an associated IP address.\n   IP\
    \ interface mask\n      Also referred to as the subnet mask, this indicates the\
    \ portion of\n      the IP interface address that identifies the attached network.\n\
    \      Masking the IP interface address with the IP interface mask yields\n  \
    \    the IP network number of the attached network.  On point-to-point\n     \
    \ networks and virtual links, the IP interface mask is not defined.\n      On\
    \ these networks, the link itself is not assigned an IP network\n      number,\
    \ and so the addresses of each side of the link are assigned\n      independently,\
    \ if they are assigned at all.\n   Area ID\n      The Area ID of the area to which\
    \ the attached network belongs.\n      All routing protocol packets originating\
    \ from the interface are\n      labelled with this Area ID.\n   HelloInterval\n\
    \      The length of time, in seconds, between the Hello packets that the\n  \
    \    router sends on the interface.  Advertised in Hello packets sent\n      out\
    \ this interface.\n   RouterDeadInterval\n      The number of seconds before the\
    \ router's neighbors will declare\n      it down, when they stop hearing the router's\
    \ Hello Packets.\n      Advertised in Hello packets sent out this interface.\n\
    \   InfTransDelay\n      The estimated number of seconds it takes to transmit\
    \ a Link State\n      Update Packet over this interface.  LSAs contained in the\
    \ Link\n      State Update packet will have their age incremented by this amount\n\
    \      before transmission.  This value should take into account\n      transmission\
    \ and propagation delays; it must be greater than zero.\n   Router Priority\n\
    \      An 8-bit unsigned integer.  When two routers attached to a network\n  \
    \    both attempt to become Designated Router, the one with the highest\n    \
    \  Router Priority takes precedence.  A router whose Router Priority\n      is\
    \ set to 0 is ineligible to become Designated Router on the\n      attached network.\
    \  Advertised in Hello packets sent out this\n      interface.\n   Hello Timer\n\
    \      An interval timer that causes the interface to send a Hello\n      packet.\
    \  This timer fires every HelloInterval seconds.  Note that\n      on non-broadcast\
    \ networks a separate Hello packet is sent to each\n      qualified neighbor.\n\
    \   Wait Timer\n      A single shot timer that causes the interface to exit the\
    \ Waiting\n      state, and as a consequence select a Designated Router on the\n\
    \      network.  The length of the timer is RouterDeadInterval seconds.\n   List\
    \ of neighboring routers\n      The other routers attached to this network.  This\
    \ list is formed\n      by the Hello Protocol.  Adjacencies will be formed to\
    \ some of\n      these neighbors.  The set of adjacent neighbors can be determined\n\
    \      by an examination of all of the neighbors' states.\n   Designated Router\n\
    \      The Designated Router selected for the attached network.  The\n      Designated\
    \ Router is selected on all broadcast and NBMA networks\n      by the Hello Protocol.\
    \  Two pieces of identification are kept for\n      the Designated Router: its\
    \ Router ID and its IP interface address\n      on the network.  The Designated\
    \ Router advertises link state for\n      the network; this network-LSA is labelled\
    \ with the Designated\n      Router's IP address.  The Designated Router is initialized\
    \ to\n      0.0.0.0, which indicates the lack of a Designated Router.\n   Backup\
    \ Designated Router\n      The Backup Designated Router is also selected on all\
    \ broadcast and\n      NBMA networks by the Hello Protocol.  All routers on the\
    \ attached\n      network become adjacent to both the Designated Router and the\n\
    \      Backup Designated Router.  The Backup Designated Router becomes\n     \
    \ Designated Router when the current Designated Router fails. The\n      Backup\
    \ Designated Router is initialized to 0.0.0.0, indicating the\n      lack of a\
    \ Backup Designated Router.\n   Interface output cost(s)\n      The cost of sending\
    \ a data packet on the interface, expressed in\n      the link state metric. \
    \ This is advertised as the link cost for\n      this interface in the router-LSA.\
    \ The cost of an interface must be\n      greater than zero.\n   RxmtInterval\n\
    \      The number of seconds between LSA retransmissions, for adjacencies\n  \
    \    belonging to this interface.  Also used when retransmitting\n      Database\
    \ Description and Link State Request Packets.\n   AuType\n      The type of authentication\
    \ used on the attached network/subnet.\n      Authentication types are defined\
    \ in Appendix D.  All OSPF packet\n      exchanges are authenticated.  Different\
    \ authentication schemes may\n      be used on different networks/subnets.\n \
    \  Authentication key\n      This configured data allows the authentication procedure\
    \ to\n      generate and/or verify OSPF protocol packets.  The Authentication\n\
    \      key can be configured on a per-interface basis.  For example, if\n    \
    \  the AuType indicates simple password, the Authentication key would\n      be\
    \ a 64-bit clear password which is inserted into the OSPF packet\n      header.\
    \ If instead Autype indicates Cryptographic authentication,\n      then the Authentication\
    \ key is a shared secret which enables the\n      generation/verification of message\
    \ digests which are appended to\n      the OSPF protocol packets. When Cryptographic\
    \ authentication is\n      used, multiple simultaneous keys are supported in order\
    \ to achieve\n      smooth key transition (see Section D.3).\n"
- title: 9.1.  Interface states
  contents:
  - "9.1.  Interface states\n   The various states that router interfaces may attain\
    \ is documented in\n   this section.  The states are listed in order of progressing\n\
    \   functionality.  For example, the inoperative state is listed first,\n   followed\
    \ by a list of intermediate states before the final, fully\n   functional state\
    \ is achieved.  The specification makes use of this\n   ordering by sometimes\
    \ making references such as \"those interfaces in\n   state greater than X\".\
    \  Figure 11 shows the graph of interface state\n   changes.  The arcs of the\
    \ graph are labelled with the event causing\n   the state change.  These events\
    \ are documented in Section 9.2.  The\n   interface state machine is described\
    \ in more detail in Section 9.3.\n   Down\n      This is the initial interface\
    \ state.  In this state, the lower-\n      level protocols have indicated that\
    \ the interface is unusable.  No\n      protocol traffic at all will be sent or\
    \ received on such a\n      interface.  In this state, interface parameters should\
    \ be set to\n      their initial values.\n                                  +----+\
    \   UnloopInd   +--------+\n                                  |Down|<--------------|Loopback|\n\
    \                                  +----+               +--------+\n         \
    \                            |\n                                     |InterfaceUp\n\
    \                          +-------+  |               +--------------+\n     \
    \                     |Waiting|<-+-------------->|Point-to-point|\n          \
    \                +-------+                  +--------------+\n               \
    \               |\n                     WaitTimer|BackupSeen\n               \
    \               |\n                              |\n                         \
    \     |   NeighborChange\n          +------+           +-+<---------------- +-------+\n\
    \          |Backup|<----------|?|----------------->|DROther|\n          +------+---------->+-+<-----+\
    \           +-------+\n                    Neighbor  |       |\n             \
    \       Change    |       |Neighbor\n                              |       |Change\n\
    \                              |     +--+\n                              +---->|DR|\n\
    \                                    +--+\n                   Figure 11: Interface\
    \ State changes\n             In addition to the state transitions pictured,\n\
    \           Event InterfaceDown always forces Down State, and\n              \
    \ Event LoopInd always forces Loopback State\n      All interface timers should\
    \ be disabled, and there should be no\n      adjacencies associated with the interface.\n\
    \   Loopback\n      In this state, the router's interface to the network is looped\n\
    \      back.  The interface may be looped back in hardware or software.\n    \
    \  The interface will be unavailable for regular data traffic.\n      However,\
    \ it may still be desirable to gain information on the\n      quality of this\
    \ interface, either through sending ICMP pings to\n      the interface or through\
    \ something like a bit error test.  For\n      this reason, IP packets may still\
    \ be addressed to an interface in\n      Loopback state.  To facilitate this,\
    \ such interfaces are\n      advertised in router-LSAs as single host routes,\
    \ whose destination\n      is the IP interface address.[4]\n   Waiting\n     \
    \ In this state, the router is trying to determine the identity of\n      the\
    \ (Backup) Designated Router for the network.  To do this, the\n      router monitors\
    \ the Hello Packets it receives.  The router is not\n      allowed to elect a\
    \ Backup Designated Router nor a Designated\n      Router until it transitions\
    \ out of Waiting state.  This prevents\n      unnecessary changes of (Backup)\
    \ Designated Router.\n   Point-to-point\n      In this state, the interface is\
    \ operational, and connects either\n      to a physical point-to-point network\
    \ or to a virtual link.  Upon\n      entering this state, the router attempts\
    \ to form an adjacency with\n      the neighboring router.  Hello Packets are\
    \ sent to the neighbor\n      every HelloInterval seconds.\n   DR Other\n    \
    \  The interface is to a broadcast or NBMA network on which another\n      router\
    \ has been selected to be the Designated Router.  In this\n      state, the router\
    \ itself has not been selected Backup Designated\n      Router either.  The router\
    \ forms adjacencies to both the\n      Designated Router and the Backup Designated\
    \ Router (if they\n      exist).\n   Backup\n      In this state, the router itself\
    \ is the Backup Designated Router\n      on the attached network.  It will be\
    \ promoted to Designated Router\n      when the present Designated Router fails.\
    \  The router establishes\n      adjacencies to all other routers attached to\
    \ the network.  The\n      Backup Designated Router performs slightly different\
    \ functions\n      during the Flooding Procedure, as compared to the Designated\n\
    \      Router (see Section 13.3).  See Section 7.4 for more details on\n     \
    \ the functions performed by the Backup Designated Router.\n   DR  In this state,\
    \ this router itself is the Designated Router\n      on the attached network.\
    \  Adjacencies are established to all other\n      routers attached to the network.\
    \  The router must also originate a\n      network-LSA for the network node. \
    \ The network-LSA will contain\n      links to all routers (including the Designated\
    \ Router itself)\n      attached to the network.  See Section 7.3 for more details\
    \ on the\n      functions performed by the Designated Router.\n"
- title: 9.2.  Events causing interface state changes
  contents:
  - "9.2.  Events causing interface state changes\n   State changes can be effected\
    \ by a number of events.  These events\n   are pictured as the labelled arcs in\
    \ Figure 11.  The label\n   definitions are listed below.  For a detailed explanation\
    \ of the\n   effect of these events on OSPF protocol operation, consult Section\n\
    \   9.3.\n   InterfaceUp\n      Lower-level protocols have indicated that the\
    \ network interface is\n      operational.  This enables the interface to transition\
    \ out of Down\n      state.  On virtual links, the interface operational indication\
    \ is\n      actually a result of the shortest path calculation (see Section\n\
    \      16.7).\n   WaitTimer\n      The Wait Timer has fired, indicating the end\
    \ of the waiting period\n      that is required before electing a (Backup) Designated\
    \ Router.\n   BackupSeen\n      The router has detected the existence or non-existence\
    \ of a Backup\n      Designated Router for the network.  This is done in one of\
    \ two\n      ways.  First, an Hello Packet may be received from a neighbor\n \
    \     claiming to be itself the Backup Designated Router.\n      Alternatively,\
    \ an Hello Packet may be received from a neighbor\n      claiming to be itself\
    \ the Designated Router, and indicating that\n      there is no Backup Designated\
    \ Router.  In either case there must\n      be bidirectional communication with\
    \ the neighbor, i.e., the router\n      must also appear in the neighbor's Hello\
    \ Packet.  This event\n      signals an end to the Waiting state.\n   NeighborChange\n\
    \      There has been a change in the set of bidirectional neighbors\n      associated\
    \ with the interface.  The (Backup) Designated Router\n      needs to be recalculated.\
    \  The following neighbor changes lead to\n      the NeighborChange event. For\
    \ an explanation of neighbor states,\n      see Section 10.1.\n       o   Bidirectional\
    \ communication has been established to a\n           neighbor.  In other words,\
    \ the state of the neighbor has\n           transitioned to 2-Way or higher.\n\
    \       o   There is no longer bidirectional communication with a\n          \
    \ neighbor.  In other words, the state of the neighbor has\n           transitioned\
    \ to Init or lower.\n       o   One of the bidirectional neighbors is newly declaring\n\
    \           itself as either Designated Router or Backup Designated\n        \
    \   Router.  This is detected through examination of that\n           neighbor's\
    \ Hello Packets.\n       o   One of the bidirectional neighbors is no longer\n\
    \           declaring itself as Designated Router, or is no longer\n         \
    \  declaring itself as Backup Designated Router.  This is\n           again detected\
    \ through examination of that neighbor's\n           Hello Packets.\n       o\
    \   The advertised Router Priority for a bidirectional\n           neighbor has\
    \ changed.  This is again detected through\n           examination of that neighbor's\
    \ Hello Packets.\n   LoopInd\n      An indication has been received that the interface\
    \ is now looped\n      back to itself.  This indication can be received either\
    \ from\n      network management or from the lower level protocols.\n   UnloopInd\n\
    \      An indication has been received that the interface is no longer\n     \
    \ looped back.  As with the LoopInd event, this indication can be\n      received\
    \ either from network management or from the lower level\n      protocols.\n \
    \  InterfaceDown\n      Lower-level protocols indicate that this interface is\
    \ no longer\n      functional. No matter what the current interface state is,\
    \ the new\n      interface state will be Down.\n"
- title: 9.3.  The Interface state machine
  contents:
  - "9.3.  The Interface state machine\n   A detailed description of the interface\
    \ state changes follows.  Each\n   state change is invoked by an event (Section\
    \ 9.2).  This event may\n   produce different effects, depending on the current\
    \ state of the\n   interface.  For this reason, the state machine below is organized\
    \ by\n   current interface state and received event. Each entry in the state\n\
    \   machine describes the resulting new interface state and the required\n   set\
    \ of additional actions.\n   When an interface's state changes, it may be necessary\
    \ to originate a\n   new router-LSA.  See Section 12.4 for more details.\n   Some\
    \ of the required actions below involve generating events for the\n   neighbor\
    \ state machine.  For example, when an interface becomes\n   inoperative, all\
    \ neighbor connections associated with the interface\n   must be destroyed.  For\
    \ more information on the neighbor state\n   machine, see Section 10.3.\n    State(s):\
    \  Down\n       Event:  InterfaceUp\n   New state:  Depends upon action routine\n\
    \      Action:  Start the interval Hello Timer, enabling the\n               periodic\
    \ sending of Hello packets out the interface.\n               If the attached\
    \ network is a physical point-to-point\n               network, Point-to-MultiPoint\
    \ network or virtual\n               link, the interface state transitions to\
    \ Point-to-\n               Point.  Else, if the router is not eligible to\n \
    \              become Designated Router the interface state\n               transitions\
    \ to DR Other.\n               Otherwise, the attached network is a broadcast\
    \ or\n               NBMA network and the router is eligible to become\n     \
    \          Designated Router.  In this case, in an attempt to\n              \
    \ discover the attached network's Designated Router\n               the interface\
    \ state is set to Waiting and the single\n               shot Wait Timer is started.\
    \  Additionally, if the\n               network is an NBMA network examine the\
    \ configured\n               list of neighbors for this interface and generate\n\
    \               the neighbor event Start for each neighbor that is\n         \
    \      also eligible to become Designated Router.\n    State(s):  Waiting\n  \
    \     Event:  BackupSeen\n   New state:  Depends upon action routine.\n      Action:\
    \  Calculate the attached network's Backup Designated\n               Router and\
    \ Designated Router, as shown in Section\n               9.4.  As a result of\
    \ this calculation, the new state\n               of the interface will be either\
    \ DR Other, Backup or\n               DR.\n    State(s):  Waiting\n       Event:\
    \  WaitTimer\n   New state:  Depends upon action routine.\n      Action:  Calculate\
    \ the attached network's Backup Designated\n               Router and Designated\
    \ Router, as shown in Section\n               9.4.  As a result of this calculation,\
    \ the new state\n               of the interface will be either DR Other, Backup\
    \ or\n               DR.\n    State(s):  DR Other, Backup or DR\n       Event:\
    \  NeighborChange\n   New state:  Depends upon action routine.\n      Action:\
    \  Recalculate the attached network's Backup Designated\n               Router\
    \ and Designated Router, as shown in Section\n               9.4.  As a result\
    \ of this calculation, the new state\n               of the interface will be\
    \ either DR Other, Backup or\n               DR.\n    State(s):  Any State\n \
    \      Event:  InterfaceDown\n   New state:  Down\n      Action:  All interface\
    \ variables are reset, and interface\n               timers disabled.  Also, all\
    \ neighbor connections\n               associated with the interface are destroyed.\
    \  This\n               is done by generating the event KillNbr on all\n     \
    \          associated neighbors (see Section 10.2).\n    State(s):  Any State\n\
    \       Event:  LoopInd\n   New state:  Loopback\n      Action:  Since this interface\
    \ is no longer connected to the\n               attached network the actions associated\
    \ with the\n               above InterfaceDown event are executed.\n    State(s):\
    \  Loopback\n       Event:  UnloopInd\n   New state:  Down\n      Action:  No\
    \ actions are necessary.  For example, the\n               interface variables\
    \ have already been reset upon\n               entering the Loopback state.  Note\
    \ that reception of\n               an InterfaceUp event is necessary before the\n\
    \               interface again becomes fully functional.\n"
- title: 9.4.  Electing the Designated Router
  contents:
  - "9.4.  Electing the Designated Router\n   This section describes the algorithm\
    \ used for calculating a network's\n   Designated Router and Backup Designated\
    \ Router.  This algorithm is\n   invoked by the Interface state machine.  The\
    \ initial time a router\n   runs the election algorithm for a network, the network's\
    \ Designated\n   Router and Backup Designated Router are initialized to 0.0.0.0.\
    \  This\n   indicates the lack of both a Designated Router and a Backup\n   Designated\
    \ Router.\n   The Designated Router election algorithm proceeds as follows: Call\n\
    \   the router doing the calculation Router X.  The list of neighbors\n   attached\
    \ to the network and having established bidirectional\n   communication with Router\
    \ X is examined.  This list is precisely the\n   collection of Router X's neighbors\
    \ (on this network) whose state is\n   greater than or equal to 2-Way (see Section\
    \ 10.1).  Router X itself\n   is also considered to be on the list.  Discard all\
    \ routers from the\n   list that are ineligible to become Designated Router. \
    \ (Routers\n   having Router Priority of 0 are ineligible to become Designated\n\
    \   Router.)  The following steps are then executed, considering only\n   those\
    \ routers that remain on the list:\n   (1) Note the current values for the network's\
    \ Designated Router\n       and Backup Designated Router.  This is used later\
    \ for\n       comparison purposes.\n   (2) Calculate the new Backup Designated\
    \ Router for the network\n       as follows.  Only those routers on the list that\
    \ have not\n       declared themselves to be Designated Router are eligible to\n\
    \       become Backup Designated Router.  If one or more of these\n       routers\
    \ have declared themselves Backup Designated Router\n       (i.e., they are currently\
    \ listing themselves as Backup\n       Designated Router, but not as Designated\
    \ Router, in their\n       Hello Packets) the one having highest Router Priority\
    \ is\n       declared to be Backup Designated Router.  In case of a tie,\n   \
    \    the one having the highest Router ID is chosen.  If no\n       routers have\
    \ declared themselves Backup Designated Router,\n       choose the router having\
    \ highest Router Priority, (again\n       excluding those routers who have declared\
    \ themselves\n       Designated Router), and again use the Router ID to break\n\
    \       ties.\n   (3) Calculate the new Designated Router for the network as\n\
    \       follows.  If one or more of the routers have declared\n       themselves\
    \ Designated Router (i.e., they are currently\n       listing themselves as Designated\
    \ Router in their Hello\n       Packets) the one having highest Router Priority\
    \ is declared\n       to be Designated Router.  In case of a tie, the one having\n\
    \       the highest Router ID is chosen.  If no routers have\n       declared\
    \ themselves Designated Router, assign the Designated\n       Router to be the\
    \ same as the newly elected Backup Designated\n       Router.\n   (4) If Router\
    \ X is now newly the Designated Router or newly the\n       Backup Designated\
    \ Router, or is now no longer the Designated\n       Router or no longer the Backup\
    \ Designated Router, repeat\n       steps 2 and 3, and then proceed to step 5.\
    \  For example, if\n       Router X is now the Designated Router, when step 2\
    \ is\n       repeated X will no longer be eligible for Backup Designated\n   \
    \    Router election.  Among other things, this will ensure that\n       no router\
    \ will declare itself both Backup Designated Router\n       and Designated Router.[5]\n\
    \   (5) As a result of these calculations, the router itself may now\n       be\
    \ Designated Router or Backup Designated Router.  See\n       Sections 7.3 and\
    \ 7.4 for the additional duties this would\n       entail.  The router's interface\
    \ state should be set\n       accordingly.  If the router itself is now Designated\
    \ Router,\n       the new interface state is DR.  If the router itself is now\n\
    \       Backup Designated Router, the new interface state is Backup.\n       Otherwise,\
    \ the new interface state is DR Other.\n   (6) If the attached network is an NBMA\
    \ network, and the router\n       itself has just become either Designated Router\
    \ or Backup\n       Designated Router, it must start sending Hello Packets to\n\
    \       those neighbors that are not eligible to become Designated\n       Router\
    \ (see Section 9.5.1).  This is done by invoking the\n       neighbor event Start\
    \ for each neighbor having a Router\n       Priority of 0.\n   (7) If the above\
    \ calculations have caused the identity of either\n       the Designated Router\
    \ or Backup Designated Router to change,\n       the set of adjacencies associated\
    \ with this interface will\n       need to be modified.  Some adjacencies may\
    \ need to be\n       formed, and others may need to be broken.  To accomplish\n\
    \       this, invoke the event AdjOK?  on all neighbors whose state\n       is\
    \ at least 2-Way.  This will cause their eligibility for\n       adjacency to\
    \ be reexamined (see Sections 10.3 and 10.4).\n   The reason behind the election\
    \ algorithm's complexity is the desire\n   for an orderly transition from Backup\
    \ Designated Router to Designated\n   Router, when the current Designated Router\
    \ fails.  This orderly\n   transition is ensured through the introduction of hysteresis:\
    \ no new\n   Backup Designated Router can be chosen until the old Backup accepts\n\
    \   its new Designated Router responsibilities.\n   The above procedure may elect\
    \ the same router to be both Designated\n   Router and Backup Designated Router,\
    \ although that router will never\n   be the calculating router (Router X) itself.\
    \  The elected Designated\n   Router may not be the router having the highest\
    \ Router Priority, nor\n   will the Backup Designated Router necessarily have\
    \ the second highest\n   Router Priority.  If Router X is not itself eligible\
    \ to become\n   Designated Router, it is possible that neither a Backup Designated\n\
    \   Router nor a Designated Router will be selected in the above\n   procedure.\
    \  Note also that if Router X is the only attached router\n   that is eligible\
    \ to become Designated Router, it will select itself\n   as Designated Router\
    \ and there will be no Backup Designated Router\n   for the network.\n"
- title: 9.5.  Sending Hello packets
  contents:
  - "9.5.  Sending Hello packets\n   Hello packets are sent out each functioning router\
    \ interface.  They\n   are used to discover and maintain neighbor relationships.[6]\
    \ On\n   broadcast and NBMA networks, Hello Packets are also used to elect the\n\
    \   Designated Router and Backup Designated Router.\n   The format of an Hello\
    \ packet is detailed in Section A.3.2.  The\n   Hello Packet contains the router's\
    \ Router Priority (used in choosing\n   the Designated Router), and the interval\
    \ between Hello Packets sent\n   out the interface (HelloInterval).  The Hello\
    \ Packet also indicates\n   how often a neighbor must be heard from to remain\
    \ active\n   (RouterDeadInterval).  Both HelloInterval and RouterDeadInterval\
    \ must\n   be the same for all routers attached to a common network.  The Hello\n\
    \   packet also contains the IP address mask of the attached network\n   (Network\
    \ Mask).  On unnumbered point-to-point networks and on virtual\n   links this\
    \ field should be set to 0.0.0.0.\n   The Hello packet's Options field describes\
    \ the router's optional OSPF\n   capabilities.  One optional capability is defined\
    \ in this\n   specification (see Sections 4.5 and A.2).  The E-bit of the Options\n\
    \   field should be set if and only if the attached area is capable of\n   processing\
    \ AS-external-LSAs (i.e., it is not a stub area). If the E-\n   bit is set incorrectly\
    \ the neighboring routers will refuse to accept\n   the Hello Packet (see Section\
    \ 10.5).  Unrecognized bits in the Hello\n   Packet's Options field should be\
    \ set to zero.\n   In order to ensure two-way communication between adjacent routers,\n\
    \   the Hello packet contains the list of all routers on the network from\n  \
    \ which Hello Packets have been seen recently.  The Hello packet also\n   contains\
    \ the router's current choice for Designated Router and Backup\n   Designated\
    \ Router.  A value of 0.0.0.0 in these fields means that one\n   has not yet been\
    \ selected.\n   On broadcast networks and physical point-to-point networks, Hello\n\
    \   packets are sent every HelloInterval seconds to the IP multicast\n   address\
    \ AllSPFRouters.  On virtual links, Hello packets are sent as\n   unicasts (addressed\
    \ directly to the other end of the virtual link)\n   every HelloInterval seconds.\
    \ On Point-to-MultiPoint networks,\n   separate Hello packets are sent to each\
    \ attached neighbor every\n   HelloInterval seconds. Sending of Hello packets\
    \ on NBMA networks is\n   covered in the next section.\n"
- title: 9.5.1.  Sending Hello packets on NBMA networks
  contents:
  - "9.5.1.  Sending Hello packets on NBMA networks\n   Static configuration information\
    \ may be necessary in order for the\n   Hello Protocol to function on non-broadcast\
    \ networks (see Sections\n   C.5 and C.6).  On NBMA networks, every attached router\
    \ which is\n   eligible to become Designated Router becomes aware of all of its\n\
    \   neighbors on the network (either through configuration or by some\n   unspecified\
    \ mechanism).  Each neighbor is labelled with the\n   neighbor's Designated Router\
    \ eligibility.\n   The interface state must be at least Waiting for any Hello\
    \ Packets to\n   be sent out the NBMA interface. Hello Packets are then sent directly\n\
    \   (as unicasts) to some subset of a router's neighbors.  Sometimes an\n   Hello\
    \ Packet is sent periodically on a timer; at other times it is\n   sent as a response\
    \ to a received Hello Packet.  A router's hello-\n   sending behavior varies depending\
    \ on whether the router itself is\n   eligible to become Designated Router.\n\
    \   If the router is eligible to become Designated Router, it must\n   periodically\
    \ send Hello Packets to all neighbors that are also\n   eligible. In addition,\
    \ if the router is itself the Designated Router\n   or Backup Designated Router,\
    \ it must also send periodic Hello Packets\n   to all other neighbors.  This means\
    \ that any two eligible routers are\n   always exchanging Hello Packets, which\
    \ is necessary for the correct\n   operation of the Designated Router election\
    \ algorithm.  To minimize\n   the number of Hello Packets sent, the number of\
    \ eligible routers on\n   an NBMA network should be kept small.\n   If the router\
    \ is not eligible to become Designated Router, it must\n   periodically send Hello\
    \ Packets to both the Designated Router and the\n   Backup Designated Router (if\
    \ they exist).  It must also send an Hello\n   Packet in reply to an Hello Packet\
    \ received from any eligible\n   neighbor (other than the current Designated Router\
    \ and Backup\n   Designated Router).  This is needed to establish an initial\n\
    \   bidirectional relationship with any potential Designated Router.\n   When\
    \ sending Hello packets periodically to any neighbor, the interval\n   between\
    \ Hello Packets is determined by the neighbor's state.  If the\n   neighbor is\
    \ in state Down, Hello Packets are sent every PollInterval\n   seconds.  Otherwise,\
    \ Hello Packets are sent every HelloInterval\n   seconds.\n"
- title: 10.  The Neighbor Data Structure
  contents:
  - "10.  The Neighbor Data Structure\n   An OSPF router converses with its neighboring\
    \ routers.  Each separate\n   conversation is described by a \"neighbor data structure\"\
    .  Each\n   conversation is bound to a particular OSPF router interface, and is\n\
    \   identified either by the neighboring router's OSPF Router ID or by\n   its\
    \ Neighbor IP address (see below). Thus if the OSPF router and\n   another router\
    \ have multiple attached networks in common, multiple\n   conversations ensue,\
    \ each described by a unique neighbor data\n   structure.  Each separate conversation\
    \ is loosely referred to in the\n   text as being a separate \"neighbor\".\n \
    \  The neighbor data structure contains all information pertinent to the\n   forming\
    \ or formed adjacency between the two neighbors.  (However,\n   remember that\
    \ not all neighbors become adjacent.)  An adjacency can\n   be viewed as a highly\
    \ developed conversation between two routers.\n   State\n      The functional\
    \ level of the neighbor conversation.  This is\n      described in more detail\
    \ in Section 10.1.\n   Inactivity Timer\n      A single shot timer whose firing\
    \ indicates that no Hello Packet\n      has been seen from this neighbor recently.\
    \  The length of the\n      timer is RouterDeadInterval seconds.\n   Master/Slave\n\
    \      When the two neighbors are exchanging databases, they form a\n      master/slave\
    \ relationship.  The master sends the first Database\n      Description Packet,\
    \ and is the only part that is allowed to\n      retransmit.  The slave can only\
    \ respond to the master's Database\n      Description Packets.  The master/slave\
    \ relationship is negotiated\n      in state ExStart.\n   DD Sequence Number\n\
    \      The DD Sequence number of the Database Description packet that is\n   \
    \   currently being sent to the neighbor.\n   Last received Database Description\
    \ packet\n      The initialize(I), more (M) and master(MS) bits, Options field,\n\
    \      and DD sequence number contained in the last Database Description\n   \
    \   packet received from the neighbor. Used to determine whether the\n      next\
    \ Database Description packet received from the neighbor is a\n      duplicate.\n\
    \   Neighbor ID\n      The OSPF Router ID of the neighboring router.  The Neighbor\
    \ ID is\n      learned when Hello packets are received from the neighbor, or is\n\
    \      configured if this is a virtual adjacency (see Section C.4).\n   Neighbor\
    \ Priority\n      The Router Priority of the neighboring router. Contained in\
    \ the\n      neighbor's Hello packets, this item is used when selecting the\n\
    \      Designated Router for the attached network.\n   Neighbor IP address\n \
    \     The IP address of the neighboring router's interface to the\n      attached\
    \ network.  Used as the Destination IP address when\n      protocol packets are\
    \ sent as unicasts along this adjacency.  Also\n      used in router-LSAs as the\
    \ Link ID for the attached network if the\n      neighboring router is selected\
    \ to be Designated Router (see\n      Section 12.4.1).  The Neighbor IP address\
    \ is learned when Hello\n      packets are received from the neighbor.  For virtual\
    \ links, the\n      Neighbor IP address is learned during the routing table build\n\
    \      process (see Section 15).\n   Neighbor Options\n      The optional OSPF\
    \ capabilities supported by the neighbor.  Learned\n      during the Database\
    \ Exchange process (see Section 10.6).  The\n      neighbor's optional OSPF capabilities\
    \ are also listed in its Hello\n      packets. This enables received Hello Packets\
    \ to be rejected (i.e.,\n      neighbor relationships will not even start to form)\
    \ if there is a\n      mismatch in certain crucial OSPF capabilities (see Section\
    \ 10.5).\n      The optional OSPF capabilities are documented in Section 4.5.\n\
    \   Neighbor's Designated Router\n      The neighbor's idea of the Designated\
    \ Router.  If this is the\n      neighbor itself, this is important in the local\
    \ calculation of the\n      Designated Router. Defined only on broadcast and NBMA\
    \ networks.\n   Neighbor's Backup Designated Router\n      The neighbor's idea\
    \ of the Backup Designated Router.  If this is\n      the neighbor itself, this\
    \ is important in the local calculation of\n      the Backup Designated Router.\
    \  Defined only on broadcast and NBMA\n      networks.\n   The next set of variables\
    \ are lists of LSAs.  These lists describe\n   subsets of the area link-state\
    \ database.  This memo defines five\n   distinct types of LSAs, all of which may\
    \ be present in an area link-\n   state database: router-LSAs, network-LSAs, and\
    \ Type 3 and 4 summary-\n   LSAs (all stored in the area data structure), and\
    \ AS- external-LSAs\n   (stored in the global data structure).\n   Link state\
    \ retransmission list\n      The list of LSAs that have been flooded but not acknowledged\
    \ on\n      this adjacency.  These will be retransmitted at intervals until\n\
    \      they are acknowledged, or until the adjacency is destroyed.\n   Database\
    \ summary list\n      The complete list of LSAs that make up the area link-state\n\
    \      database, at the moment the neighbor goes into Database Exchange\n    \
    \  state.  This list is sent to the neighbor in Database Description\n      packets.\n\
    \   Link state request list\n      The list of LSAs that need to be received from\
    \ this neighbor in\n      order to synchronize the two neighbors' link-state databases.\n\
    \      This list is created as Database Description packets are received,\n  \
    \    and is then sent to the neighbor in Link State Request packets.\n      The\
    \ list is depleted as appropriate Link State Update packets are\n      received.\n"
- title: 10.1.  Neighbor states
  contents:
  - "10.1.  Neighbor states\n   The state of a neighbor (really, the state of a conversation\
    \ being\n   held with a neighboring router) is documented in the following\n \
    \  sections.  The states are listed in order of progressing\n   functionality.\
    \  For example, the inoperative state is listed first,\n   followed by a list\
    \ of intermediate states before the final, fully\n   functional state is achieved.\
    \  The specification makes use of this\n   ordering by sometimes making references\
    \ such as \"those\n   neighbors/adjacencies in state greater than X\".  Figures\
    \ 12 and 13\n   show the graph of neighbor state changes.  The arcs of the graphs\
    \ are\n   labelled with the event causing the state change.  The neighbor\n  \
    \ events are documented in Section 10.2.\n   The graph in Figure 12 shows the\
    \ state changes effected by the Hello\n   Protocol.  The Hello Protocol is responsible\
    \ for neighbor acquisition\n   and maintenance, and for ensuring two way communication\
    \ between\n   neighbors.\n   The graph in Figure 13 shows the forming of an adjacency.\
    \  Not every\n   two neighboring routers become adjacent (see Section 10.4). \
    \ The\n   adjacency starts to form when the neighbor is in state ExStart.\n  \
    \ After the two routers discover their master/slave status, the state\n   transitions\
    \ to Exchange.  At this point the neighbor starts to be\n   used in the flooding\
    \ procedure, and the two neighboring routers begin\n   synchronizing their databases.\
    \  When this synchronization is\n   finished, the neighbor is in state Full and\
    \ we say that the two\n   routers are fully adjacent.  At this point the adjacency\
    \ is listed in\n   LSAs.\n   For a more detailed description of neighbor state\
    \ changes, together\n   with the additional actions involved in each change, see\
    \ Section\n   10.3.\n   Down\n      This is the initial state of a neighbor conversation.\
    \  It\n      indicates that there has been no recent information received from\n\
    \      the neighbor. On NBMA networks, Hello packets may still be sent to\n  \
    \    \"Down\" neighbors, although at a reduced frequency (see Section\n      9.5.1).\n\
    \                                   +----+\n                                 \
    \  |Down|\n                                   +----+\n                       \
    \              |\\\n                                     | \\Start\n         \
    \                            |  \\      +-------+\n                          \
    \   Hello   |   +---->|Attempt|\n                            Received |      \
    \   +-------+\n                                     |             |\n        \
    \                     +----+<-+             |HelloReceived\n                 \
    \            |Init|<---------------+\n                             +----+<--------+\n\
    \                                |           |\n                             \
    \   |2-Way      |1-Way\n                                |Received   |Received\n\
    \                                |           |\n              +-------+      \
    \   |        +-----+\n              |ExStart|<--------+------->|2-Way|\n     \
    \         +-------+                  +-----+\n           Figure 12: Neighbor state\
    \ changes (Hello Protocol)\n             In addition to the state transitions\
    \ pictured,\n                Event KillNbr always forces Down State,\n       \
    \     Event Inactivity Timer always forces Down State,\n                 Event\
    \ LLDown always forces Down State\n                                  +-------+\n\
    \                                  |ExStart|\n                               \
    \   +-------+\n                                    |\n                     NegotiationDone|\n\
    \                                    +->+--------+\n                         \
    \              |Exchange|\n                                    +--+--------+\n\
    \                                    |\n                            Exchange|\n\
    \                              Done  |\n                    +----+          |\
    \      +-------+\n                    |Full|<---------+----->|Loading|\n     \
    \               +----+<-+              +-------+\n                           \
    \ |  LoadingDone     |\n                            +------------------+\n   \
    \      Figure 13: Neighbor state changes (Database Exchange)\n             In\
    \ addition to the state transitions pictured,\n             Event SeqNumberMismatch\
    \ forces ExStart state,\n                  Event BadLSReq forces ExStart state,\n\
    \                     Event 1-Way forces Init state,\n                Event KillNbr\
    \ always forces Down State,\n            Event InactivityTimer always forces Down\
    \ State,\n                 Event LLDown always forces Down State,\n          \
    \  Event AdjOK? leads to adjacency forming/breaking\n   Attempt\n      This state\
    \ is only valid for neighbors attached to NBMA networks.\n      It indicates that\
    \ no recent information has been received from the\n      neighbor, but that a\
    \ more concerted effort should be made to\n      contact the neighbor.  This is\
    \ done by sending the neighbor Hello\n      packets at intervals of HelloInterval\
    \ (see Section 9.5.1).\n   Init\n      In this state, an Hello packet has recently\
    \ been seen from the\n      neighbor.  However, bidirectional communication has\
    \ not yet been\n      established with the neighbor (i.e., the router itself did\
    \ not\n      appear in the neighbor's Hello packet).  All neighbors in this\n\
    \      state (or higher) are listed in the Hello packets sent from the\n     \
    \ associated interface.\n   2-Way\n      In this state, communication between\
    \ the two routers is\n      bidirectional.  This has been assured by the operation\
    \ of the\n      Hello Protocol.  This is the most advanced state short of\n  \
    \    beginning adjacency establishment.  The (Backup) Designated Router\n    \
    \  is selected from the set of neighbors in state 2-Way or greater.\n   ExStart\n\
    \      This is the first step in creating an adjacency between the two\n     \
    \ neighboring routers.  The goal of this step is to decide which\n      router\
    \ is the master, and to decide upon the initial DD sequence\n      number.  Neighbor\
    \ conversations in this state or greater are\n      called adjacencies.\n   Exchange\n\
    \      In this state the router is describing its entire link state\n      database\
    \ by sending Database Description packets to the neighbor.\n      Each Database\
    \ Description Packet has a DD sequence number, and is\n      explicitly acknowledged.\
    \  Only one Database Description Packet is\n      allowed outstanding at any one\
    \ time.  In this state, Link State\n      Request Packets may also be sent asking\
    \ for the neighbor's more\n      recent LSAs.  All adjacencies in Exchange state\
    \ or greater are\n      used by the flooding procedure.  In fact, these adjacencies\
    \ are\n      fully capable of transmitting and receiving all types of OSPF\n \
    \     routing protocol packets.\n   Loading\n      In this state, Link State Request\
    \ packets are sent to the neighbor\n      asking for the more recent LSAs that\
    \ have been discovered (but not\n      yet received) in the Exchange state.\n\
    \   Full\n      In this state, the neighboring routers are fully adjacent.  These\n\
    \      adjacencies will now appear in router-LSAs and network-LSAs.\n"
- title: 10.2.  Events causing neighbor state changes
  contents:
  - "10.2.  Events causing neighbor state changes\n   State changes can be effected\
    \ by a number of events.  These events\n   are shown in the labels of the arcs\
    \ in Figures 12 and 13.  The label\n   definitions are as follows:\n   HelloReceived\n\
    \      An Hello packet has been received from the neighbor.\n   Start\n      This\
    \ is an indication that Hello Packets should now be sent to the\n      neighbor\
    \ at intervals of HelloInterval seconds.  This event is\n      generated only\
    \ for neighbors associated with NBMA networks.\n   2-WayReceived\n      Bidirectional\
    \ communication has been realized between the two\n      neighboring routers.\
    \  This is indicated by the router seeing\n      itself in the neighbor's Hello\
    \ packet.\n   NegotiationDone\n      The Master/Slave relationship has been negotiated,\
    \ and DD sequence\n      numbers have been exchanged.  This signals the start\
    \ of the\n      sending/receiving of Database Description packets.  For more\n\
    \      information on the generation of this event, consult Section 10.8.\n  \
    \ ExchangeDone\n      Both routers have successfully transmitted a full sequence\
    \ of\n      Database Description packets.  Each router now knows what parts of\n\
    \      its link state database are out of date.  For more information on\n   \
    \   the generation of this event, consult Section 10.8.\n   BadLSReq\n      A\
    \ Link State Request has been received for an LSA not contained in\n      the\
    \ database. This indicates an error in the Database Exchange\n      process.\n\
    \   Loading Done\n      Link State Updates have been received for all out-of-date\
    \ portions\n      of the database.  This is indicated by the Link state request\
    \ list\n      becoming empty after the Database Exchange process has completed.\n\
    \   AdjOK?\n      A decision must be made as to whether an adjacency should be\n\
    \      established/maintained with the neighbor.  This event will start\n    \
    \  some adjacencies forming, and destroy others.\n   The following events cause\
    \ well developed neighbors to revert to\n   lesser states.  Unlike the above events,\
    \ these events may occur when\n   the neighbor conversation is in any of a number\
    \ of states.\n   SeqNumberMismatch\n      A Database Description packet has been\
    \ received that either a) has\n      an unexpected DD sequence number, b) unexpectedly\
    \ has the Init bit\n      set or c) has an Options field differing from the last\
    \ Options\n      field received in a Database Description packet.  Any of these\n\
    \      conditions indicate that some error has occurred during adjacency\n   \
    \   establishment.\n   1-Way\n      An Hello packet has been received from the\
    \ neighbor, in which the\n      router is not mentioned. This indicates that communication\
    \ with\n      the neighbor is not bidirectional.\n   KillNbr\n      This is an\
    \ indication that all communication with the neighbor is\n      now impossible,\
    \ forcing the neighbor to revert to Down state.\n   InactivityTimer\n      The\
    \ inactivity Timer has fired.  This means that no Hello packets\n      have been\
    \ seen recently from the neighbor. The neighbor reverts to\n      Down state.\n\
    \   LLDown\n      This is an indication from the lower level protocols that the\n\
    \      neighbor is now unreachable.  For example, on an X.25 network this\n  \
    \    could be indicated by an X.25 clear indication with appropriate\n      cause\
    \ and diagnostic fields.  This event forces the neighbor into\n      Down state.\n"
- title: 10.3.  The Neighbor state machine
  contents:
  - "10.3.  The Neighbor state machine\n   A detailed description of the neighbor\
    \ state changes follows.  Each\n   state change is invoked by an event (Section\
    \ 10.2).  This event may\n   produce different effects, depending on the current\
    \ state of the\n   neighbor.  For this reason, the state machine below is organized\
    \ by\n   current neighbor state and received event.  Each entry in the state\n\
    \   machine describes the resulting new neighbor state and the required\n   set\
    \ of additional actions.\n   When a neighbor's state changes, it may be necessary\
    \ to rerun the\n   Designated Router election algorithm.  This is determined by\
    \ whether\n   the interface NeighborChange event is generated (see Section 9.2).\n\
    \   Also, if the Interface is in DR state (the router is itself\n   Designated\
    \ Router), changes in neighbor state may cause a new\n   network-LSA to be originated\
    \ (see Section 12.4).\n   When the neighbor state machine needs to invoke the\
    \ interface state\n   machine, it should be done as a scheduled task (see Section\
    \ 4.4).\n   This simplifies things, by ensuring that neither state machine will\n\
    \   be executed recursively.\n    State(s):  Down\n       Event:  Start\n   New\
    \ state:  Attempt\n      Action:  Send an Hello Packet to the neighbor (this neighbor\n\
    \               is always associated with an NBMA network) and start\n       \
    \        the Inactivity Timer for the neighbor.  The timer's\n               later\
    \ firing would indicate that communication with\n               the neighbor was\
    \ not attained.\n    State(s):  Attempt\n       Event:  HelloReceived\n   New\
    \ state:  Init\n      Action:  Restart the Inactivity Timer for the neighbor,\
    \ since\n               the neighbor has now been heard from.\n    State(s): \
    \ Down\n       Event:  HelloReceived\n   New state:  Init\n      Action:  Start\
    \ the Inactivity Timer for the neighbor.  The\n               timer's later firing\
    \ would indicate that the neighbor\n               is dead.\n    State(s):  Init\
    \ or greater\n       Event:  HelloReceived\n   New state:  No state change.\n\
    \      Action:  Restart the Inactivity Timer for the neighbor, since\n       \
    \        the neighbor has again been heard from.\n    State(s):  Init\n      \
    \ Event:  2-WayReceived\n   New state:  Depends upon action routine.\n      Action:\
    \  Determine whether an adjacency should be established\n               with the\
    \ neighbor (see Section 10.4).  If not, the\n               new neighbor state\
    \ is 2-Way.\n               Otherwise (an adjacency should be established) the\n\
    \               neighbor state transitions to ExStart.  Upon\n               entering\
    \ this state, the router increments the DD\n               sequence number in\
    \ the neighbor data structure.  If\n               this is the first time that\
    \ an adjacency has been\n               attempted, the DD sequence number should\
    \ be assigned\n               some unique value (like the time of day clock).\
    \  It\n               then declares itself master (sets the master/slave\n   \
    \            bit to master), and starts sending Database\n               Description\
    \ Packets, with the initialize (I), more\n               (M) and master (MS) bits\
    \ set.  This Database\n               Description Packet should be otherwise empty.\
    \  This\n               Database Description Packet should be retransmitted\n\
    \               at intervals of RxmtInterval until the next state is\n       \
    \        entered (see Section 10.8).\n    State(s):  ExStart\n       Event:  NegotiationDone\n\
    \   New state:  Exchange\n      Action:  The router must list the contents of\
    \ its entire area\n               link state database in the neighbor Database\
    \ summary\n               list.  The area link state database consists of the\n\
    \               router-LSAs, network-LSAs and summary-LSAs contained\n       \
    \        in the area structure, along with the AS-external-\n               LSAs\
    \ contained in the global structure.  AS-\n               external-LSAs are omitted\
    \ from a virtual neighbor's\n               Database summary list.  AS-external-LSAs\
    \ are omitted\n               from the Database summary list if the area has been\n\
    \               configured as a stub (see Section 3.6).  LSAs whose\n        \
    \       age is equal to MaxAge are instead added to the\n               neighbor's\
    \ Link state retransmission list.  A\n               summary of the Database summary\
    \ list will be sent to\n               the neighbor in Database Description packets.\
    \  Each\n               Database Description Packet has a DD sequence\n      \
    \         number, and is explicitly acknowledged.  Only one\n               Database\
    \ Description Packet is allowed outstanding\n               at any one time. \
    \ For more detail on the sending and\n               receiving of Database Description\
    \ packets, see\n               Sections 10.8 and 10.6.\n    State(s):  Exchange\n\
    \       Event:  ExchangeDone\n   New state:  Depends upon action routine.\n  \
    \    Action:  If the neighbor Link state request list is empty,\n            \
    \   the new neighbor state is Full.  No other action is\n               required.\
    \  This is an adjacency's final state.\n               Otherwise, the new neighbor\
    \ state is Loading.  Start\n               (or continue) sending Link State Request\
    \ packets to\n               the neighbor (see Section 10.9).  These are requests\n\
    \               for the neighbor's more recent LSAs (which were\n            \
    \   discovered but not yet received in the Exchange\n               state).  These\
    \ LSAs are listed in the Link state\n               request list associated with\
    \ the neighbor.\n    State(s):  Loading\n       Event:  Loading Done\n   New state:\
    \  Full\n      Action:  No action required.  This is an adjacency's final\n  \
    \             state.\n    State(s):  2-Way\n       Event:  AdjOK?\n   New state:\
    \  Depends upon action routine.\n      Action:  Determine whether an adjacency\
    \ should be formed with\n               the neighboring router (see Section 10.4).\
    \  If not,\n               the neighbor state remains at 2-Way.  Otherwise,\n\
    \               transition the neighbor state to ExStart and perform\n       \
    \        the actions associated with the above state machine\n               entry\
    \ for state Init and event 2-WayReceived.\n    State(s):  ExStart or greater\n\
    \       Event:  AdjOK?\n   New state:  Depends upon action routine.\n      Action:\
    \  Determine whether the neighboring router should\n               still be adjacent.\
    \  If yes, there is no state change\n               and no further action is necessary.\n\
    \               Otherwise, the (possibly partially formed) adjacency\n       \
    \        must be destroyed.  The neighbor state transitions\n               to\
    \ 2-Way.  The Link state retransmission list,\n               Database summary\
    \ list and Link state request list\n               are cleared of LSAs.\n    State(s):\
    \  Exchange or greater\n       Event:  SeqNumberMismatch\n   New state:  ExStart\n\
    \      Action:  The (possibly partially formed) adjacency is torn\n          \
    \     down, and then an attempt is made at\n               reestablishment.  The\
    \ neighbor state first\n               transitions to ExStart.  The Link state\n\
    \               retransmission list, Database summary list and Link\n        \
    \       state request list are cleared of LSAs.  Then the\n               router\
    \ increments the DD sequence number in the\n               neighbor data structure,\
    \ declares itself master\n               (sets the master/slave bit to master),\
    \ and starts\n               sending Database Description Packets, with the\n\
    \               initialize (I), more (M) and master (MS) bits set.\n         \
    \      This Database Description Packet should be otherwise\n               empty\
    \ (see Section 10.8).\n    State(s):  Exchange or greater\n       Event:  BadLSReq\n\
    \   New state:  ExStart\n      Action:  The action for event BadLSReq is exactly\
    \ the same as\n               for the neighbor event SeqNumberMismatch.  The\n\
    \               (possibly partially formed) adjacency is torn down,\n        \
    \       and then an attempt is made at reestablishment.  For\n               more\
    \ information, see the neighbor state machine\n               entry that is invoked\
    \ when event SeqNumberMismatch\n               is generated in state Exchange\
    \ or greater.\n    State(s):  Any state\n       Event:  KillNbr\n   New state:\
    \  Down\n      Action:  The Link state retransmission list, Database summary\n\
    \               list and Link state request list are cleared of\n            \
    \   LSAs.  Also, the Inactivity Timer is disabled.\n    State(s):  Any state\n\
    \       Event:  LLDown\n   New state:  Down\n      Action:  The Link state retransmission\
    \ list, Database summary\n               list and Link state request list are\
    \ cleared of\n               LSAs.  Also, the Inactivity Timer is disabled.\n\
    \    State(s):  Any state\n       Event:  InactivityTimer\n   New state:  Down\n\
    \      Action:  The Link state retransmission list, Database summary\n       \
    \        list and Link state request list are cleared of\n               LSAs.\n\
    \    State(s):  2-Way or greater\n       Event:  1-WayReceived\n   New state:\
    \  Init\n      Action:  The Link state retransmission list, Database summary\n\
    \               list and Link state request list are cleared of\n            \
    \   LSAs.\n    State(s):  2-Way or greater\n       Event:  2-WayReceived\n   New\
    \ state:  No state change.\n      Action:  No action required.\n    State(s):\
    \  Init\n       Event:  1-WayReceived\n   New state:  No state change.\n     \
    \ Action:  No action required.\n"
- title: 10.4.  Whether to become adjacent
  contents:
  - "10.4.  Whether to become adjacent\n   Adjacencies are established with some subset\
    \ of the router's\n   neighbors.  Routers connected by point-to-point networks,\
    \ Point-to-\n   MultiPoint networks and virtual links always become adjacent.\
    \  On\n   broadcast and NBMA networks, all routers become adjacent to both the\n\
    \   Designated Router and the Backup Designated Router.\n   The adjacency-forming\
    \ decision occurs in two places in the neighbor\n   state machine.  First, when\
    \ bidirectional communication is initially\n   established with the neighbor,\
    \ and secondly, when the identity of the\n   attached network's (Backup) Designated\
    \ Router changes.  If the\n   decision is made to not attempt an adjacency, the\
    \ state of the\n   neighbor communication stops at 2-Way.\n   An adjacency should\
    \ be established with a bidirectional neighbor when\n   at least one of the following\
    \ conditions holds:\n   o   The underlying network type is point-to-point\n  \
    \ o   The underlying network type is Point-to-MultiPoint\n   o   The underlying\
    \ network type is virtual link\n   o   The router itself is the Designated Router\n\
    \   o   The router itself is the Backup Designated Router\n   o   The neighboring\
    \ router is the Designated Router\n   o   The neighboring router is the Backup\
    \ Designated Router\n"
- title: 10.5.  Receiving Hello Packets
  contents:
  - "10.5.  Receiving Hello Packets\n   This section explains the detailed processing\
    \ of a received Hello\n   Packet.  (See Section A.3.2 for the format of Hello\
    \ packets.)  The\n   generic input processing of OSPF packets will have checked\
    \ the\n   validity of the IP header and the OSPF packet header.  Next, the\n \
    \  values of the Network Mask, HelloInterval, and RouterDeadInterval\n   fields\
    \ in the received Hello packet must be checked against the\n   values configured\
    \ for the receiving interface.  Any mismatch causes\n   processing to stop and\
    \ the packet to be dropped.  In other words, the\n   above fields are really describing\
    \ the attached network's\n   configuration.  However, there is one exception to\
    \ the above rule: on\n   point-to-point networks and on virtual links, the Network\
    \ Mask in the\n   received Hello Packet should be ignored.\n   The receiving interface\
    \ attaches to a single OSPF area (this could be\n   the backbone).  The setting\
    \ of the E-bit found in the Hello Packet's\n   Options field must match this area's\
    \ ExternalRoutingCapability.  If\n   AS-external-LSAs are not flooded into/throughout\
    \ the area (i.e, the\n   area is a \"stub\") the E-bit must be clear in received\
    \ Hello Packets,\n   otherwise the E-bit must be set.  A mismatch causes processing\
    \ to\n   stop and the packet to be dropped.  The setting of the rest of the\n\
    \   bits in the Hello Packet's Options field should be ignored.\n   At this point,\
    \ an attempt is made to match the source of the Hello\n   Packet to one of the\
    \ receiving interface's neighbors.  If the\n   receiving interface connects to\
    \ a broadcast, Point-to-MultiPoint or\n   NBMA network the source is identified\
    \ by the IP source address found\n   in the Hello's IP header.  If the receiving\
    \ interface connects to a\n   point-to-point link or a virtual link, the source\
    \ is identified by\n   the Router ID found in the Hello's OSPF packet header.\
    \  The\n   interface's current list of neighbors is contained in the interface's\n\
    \   data structure.  If a matching neighbor structure cannot be found,\n   (i.e.,\
    \ this is the first time the neighbor has been detected), one is\n   created.\
    \  The initial state of a newly created neighbor is set to\n   Down.\n   When\
    \ receiving an Hello Packet from a neighbor on a broadcast,\n   Point-to-MultiPoint\
    \ or NBMA network, set the neighbor structure's\n   Neighbor ID equal to the Router\
    \ ID found in the packet's OSPF header.\n   When receiving an Hello on a point-to-point\
    \ network (but not on a\n   virtual link) set the neighbor structure's Neighbor\
    \ IP address to the\n   packet's IP source address.\n   Now the rest of the Hello\
    \ Packet is examined, generating events to be\n   given to the neighbor and interface\
    \ state machines.  These state\n   machines are specified either to be executed\
    \ or scheduled (see\n   Section 4.4).  For example, by specifying below that the\
    \ neighbor\n   state machine be executed in line, several neighbor state transitions\n\
    \   may be effected by a single received Hello:\n   o   Each Hello Packet causes\
    \ the neighbor state machine to be\n       executed with the event HelloReceived.\n\
    \   o   Then the list of neighbors contained in the Hello Packet is\n       examined.\
    \  If the router itself appears in this list, the\n       neighbor state machine\
    \ should be executed with the event 2-\n       WayReceived.  Otherwise, the neighbor\
    \ state machine should\n       be executed with the event 1-WayReceived, and the\
    \ processing\n       of the packet stops.\n   o   Next, the Hello Packet's Router\
    \ Priority field is examined.\n       If this field is different than the one\
    \ previously received\n       from the neighbor, the receiving interface's state\
    \ machine\n       is scheduled with the event NeighborChange.  In any case,\n\
    \       the Router Priority field in the neighbor data structure\n       should\
    \ be updated accordingly.\n   o   Next the Designated Router field in the Hello\
    \ Packet is\n       examined.  If the neighbor is both declaring itself to be\n\
    \       Designated Router (Designated Router field = Neighbor IP\n       address)\
    \ and the Backup Designated Router field in the\n       packet is equal to 0.0.0.0\
    \ and the receiving interface is in\n       state Waiting, the receiving interface's\
    \ state machine is\n       scheduled with the event BackupSeen.  Otherwise, if\
    \ the\n       neighbor is declaring itself to be Designated Router and it\n  \
    \     had not previously, or the neighbor is not declaring itself\n       Designated\
    \ Router where it had previously, the receiving\n       interface's state machine\
    \ is scheduled with the event\n       NeighborChange.  In any case, the Neighbors'\
    \ Designated\n       Router item in the neighbor structure is updated\n      \
    \ accordingly.\n   o   Finally, the Backup Designated Router field in the Hello\n\
    \       Packet is examined.  If the neighbor is declaring itself to\n       be\
    \ Backup Designated Router (Backup Designated Router field\n       = Neighbor\
    \ IP address) and the receiving interface is in\n       state Waiting, the receiving\
    \ interface's state machine is\n       scheduled with the event BackupSeen.  Otherwise,\
    \ if the\n       neighbor is declaring itself to be Backup Designated Router\n\
    \       and it had not previously, or the neighbor is not declaring\n       itself\
    \ Backup Designated Router where it had previously, the\n       receiving interface's\
    \ state machine is scheduled with the\n       event NeighborChange.  In any case,\
    \ the Neighbor's Backup\n       Designated Router item in the neighbor structure\
    \ is updated\n       accordingly.\n   On NBMA networks, receipt of an Hello Packet\
    \ may also cause an Hello\n   Packet to be sent back to the neighbor in response.\
    \ See Section 9.5.1\n   for more details.\n"
- title: 10.6.  Receiving Database Description Packets
  contents:
  - "10.6.  Receiving Database Description Packets\n   This section explains the detailed\
    \ processing of a received Database\n   Description Packet.  The incoming Database\
    \ Description Packet has\n   already been associated with a neighbor and receiving\
    \ interface by\n   the generic input packet processing (Section 8.2).  Whether\
    \ the\n   Database Description packet should be accepted, and if so, how it\n\
    \   should be further processed depends upon the neighbor state.\n   If a Database\
    \ Description packet is accepted, the following packet\n   fields should be saved\
    \ in the corresponding neighbor data structure\n   under \"last received Database\
    \ Description packet\": the packet's\n   initialize(I), more (M) and master(MS)\
    \ bits, Options field, and DD\n   sequence number. If these fields are set identically\
    \ in two\n   consecutive Database Description packets received from the neighbor,\n\
    \   the second Database Description packet is considered to be a\n   \"duplicate\"\
    \ in the processing described below.\n   If the Interface MTU field in the Database\
    \ Description packet\n   indicates an IP datagram size that is larger than the\
    \ router can\n   accept on the receiving interface without fragmentation, the\
    \ Database\n   Description packet is rejected.  Otherwise, if the neighbor state\
    \ is:\n   Down\n      The packet should be rejected.\n   Attempt\n      The packet\
    \ should be rejected.\n   Init\n      The neighbor state machine should be executed\
    \ with the event 2-\n      WayReceived.  This causes an immediate state change\
    \ to either\n      state 2-Way or state ExStart. If the new state is ExStart,\
    \ the\n      processing of the current packet should then continue in this new\n\
    \      state by falling through to case ExStart below.\n   2-Way\n      The packet\
    \ should be ignored.  Database Description Packets are\n      used only for the\
    \ purpose of bringing up adjacencies.[7]\n   ExStart\n      If the received packet\
    \ matches one of the following cases, then\n      the neighbor state machine should\
    \ be executed with the event\n      NegotiationDone (causing the state to transition\
    \ to Exchange), the\n      packet's Options field should be recorded in the neighbor\n\
    \      structure's Neighbor Options field and the packet should be\n      accepted\
    \ as next in sequence and processed further (see below).\n      Otherwise, the\
    \ packet should be ignored.\n       o   The initialize(I), more (M) and master(MS)\
    \ bits are set,\n           the contents of the packet are empty, and the neighbor's\n\
    \           Router ID is larger than the router's own.  In this case\n       \
    \    the router is now Slave.  Set the master/slave bit to\n           slave,\
    \ and set the neighbor data structure's DD sequence\n           number to that\
    \ specified by the master.\n       o   The initialize(I) and master(MS) bits are\
    \ off, the\n           packet's DD sequence number equals the neighbor data\n\
    \           structure's DD sequence number (indicating\n           acknowledgment)\
    \ and the neighbor's Router ID is smaller\n           than the router's own. \
    \ In this case the router is\n           Master.\n   Exchange\n      Duplicate\
    \ Database Description packets are discarded by the\n      master, and cause the\
    \ slave to retransmit the last Database\n      Description packet that it had\
    \ sent. Otherwise (the packet is not\n      a duplicate):\n       o   If the state\
    \ of the MS-bit is inconsistent with the\n           master/slave state of the\
    \ connection, generate the\n           neighbor event SeqNumberMismatch and stop\
    \ processing the\n           packet.\n       o   If the initialize(I) bit is set,\
    \ generate the neighbor\n           event SeqNumberMismatch and stop processing\
    \ the packet.\n       o   If the packet's Options field indicates a different\
    \ set\n           of optional OSPF capabilities than were previously\n       \
    \    received from the neighbor (recorded in the Neighbor\n           Options\
    \ field of the neighbor structure), generate the\n           neighbor event SeqNumberMismatch\
    \ and stop processing the\n           packet.\n       o   Database Description\
    \ packets must be processed in\n           sequence, as indicated by the packets'\
    \ DD sequence\n           numbers. If the router is master, the next packet\n\
    \           received should have DD sequence number equal to the DD\n        \
    \   sequence number in the neighbor data structure. If the\n           router\
    \ is slave, the next packet received should have DD\n           sequence number\
    \ equal to one more than the DD sequence\n           number stored in the neighbor\
    \ data structure. In either\n           case, if the packet is the next in sequence\
    \ it should be\n           accepted and its contents processed as specified below.\n\
    \       o   Else, generate the neighbor event SeqNumberMismatch and\n        \
    \   stop processing the packet.\n   Loading or Full\n      In this state, the\
    \ router has sent and received an entire sequence\n      of Database Description\
    \ Packets.  The only packets received should\n      be duplicates (see above).\
    \ In particular, the packet's Options\n      field should match the set of optional\
    \ OSPF capabilities\n      previously indicated by the neighbor (stored in the\
    \ neighbor\n      structure's Neighbor Options field).  Any other packets received,\n\
    \      including the reception of a packet with the Initialize(I) bit\n      set,\
    \ should generate the neighbor event SeqNumberMismatch.[8]\n      Duplicates should\
    \ be discarded by the master.  The slave must\n      respond to duplicates by\
    \ repeating the last Database Description\n      packet that it had sent.\n  \
    \ When the router accepts a received Database Description Packet as the\n   next\
    \ in sequence the packet contents are processed as follows.  For\n   each LSA\
    \ listed, the LSA's LS type is checked for validity.  If the\n   LS type is unknown\
    \ (e.g., not one of the LS types 1-5 defined by this\n   specification), or if\
    \ this is an AS-external-LSA (LS type = 5) and\n   the neighbor is associated\
    \ with a stub area, generate the neighbor\n   event SeqNumberMismatch and stop\
    \ processing the packet.  Otherwise,\n   the router looks up the LSA in its database\
    \ to see whether it also\n   has an instance of the LSA.  If it does not, or if\
    \ the database copy\n   is less recent (see Section 13.1), the LSA is put on the\
    \ Link state\n   request list so that it can be requested (immediately or at some\n\
    \   later time) in Link State Request Packets.\n   When the router accepts a received\
    \ Database Description Packet as the\n   next in sequence, it also performs the\
    \ following actions, depending\n   on whether it is master or slave:\n   Master\n\
    \      Increments the DD sequence number in the neighbor data structure.\n   \
    \   If the router has already sent its entire sequence of Database\n      Description\
    \ Packets, and the just accepted packet has the more bit\n      (M) set to 0,\
    \ the neighbor event ExchangeDone is generated.\n      Otherwise, it should send\
    \ a new Database Description to the slave.\n   Slave\n      Sets the DD sequence\
    \ number in the neighbor data structure to the\n      DD sequence number appearing\
    \ in the received packet.  The slave\n      must send a Database Description Packet\
    \ in reply.  If the received\n      packet has the more bit (M) set to 0, and\
    \ the packet to be sent by\n      the slave will also have the M-bit set to 0,\
    \ the neighbor event\n      ExchangeDone is generated.  Note that the slave always\
    \ generates\n      this event before the master.\n"
- title: 10.7.  Receiving Link State Request Packets
  contents:
  - "10.7.  Receiving Link State Request Packets\n   This section explains the detailed\
    \ processing of received Link State\n   Request packets.  Received Link State\
    \ Request Packets specify a list\n   of LSAs that the neighbor wishes to receive.\
    \  Link State Request\n   Packets should be accepted when the neighbor is in states\
    \ Exchange,\n   Loading, or Full.  In all other states Link State Request Packets\n\
    \   should be ignored.\n   Each LSA specified in the Link State Request packet\
    \ should be located\n   in the router's database, and copied into Link State Update\
    \ packets\n   for transmission to the neighbor.  These LSAs should NOT be placed\
    \ on\n   the Link state retransmission list for the neighbor.  If an LSA\n   cannot\
    \ be found in the database, something has gone wrong with the\n   Database Exchange\
    \ process, and neighbor event BadLSReq should be\n   generated.\n"
- title: 10.8.  Sending Database Description Packets
  contents:
  - "10.8.  Sending Database Description Packets\n   This section describes how Database\
    \ Description Packets are sent to a\n   neighbor. The Database Description packet's\
    \ Interface MTU field is\n   set to the size of the largest IP datagram that can\
    \ be sent out the\n   sending interface, without fragmentation.  Common MTUs in\
    \ use in the\n   Internet can be found in Table 7-1 of [Ref22]. Interface MTU\
    \ should\n   be set to 0 in Database Description packets sent over virtual links.\n\
    \   The router's optional OSPF capabilities (see Section 4.5) are\n   transmitted\
    \ to the neighbor in the Options field of the Database\n   Description packet.\
    \  The router should maintain the same set of\n   optional capabilities throughout\
    \ the Database Exchange and flooding\n   procedures.  If for some reason the router's\
    \ optional capabilities\n   change, the Database Exchange procedure should be\
    \ restarted by\n   reverting to neighbor state ExStart.  One optional capability\
    \ is\n   defined in this specification (see Sections 4.5 and A.2). The E-bit\n\
    \   should be set if and only if the attached network belongs to a non-\n   stub\
    \ area. Unrecognized bits in the Options field should be set to\n   zero.  The\
    \ sending of Database Description packets depends on the\n   neighbor's state.\
    \  In state ExStart the router sends empty Database\n   Description packets, with\
    \ the initialize (I), more (M) and master\n   (MS) bits set.  These packets are\
    \ retransmitted every RxmtInterval\n   seconds.\n   In state Exchange the Database\
    \ Description Packets actually contain\n   summaries of the link state information\
    \ contained in the router's\n   database.  Each LSA in the area's link-state database\
    \ (at the time\n   the neighbor transitions into Exchange state) is listed in\
    \ the\n   neighbor Database summary list.  Each new Database Description Packet\n\
    \   copies its DD sequence number from the neighbor data structure and\n   then\
    \ describes the current top of the Database summary list.  Items\n   are removed\
    \ from the Database summary list when the previous packet\n   is acknowledged.\n\
    \   In state Exchange, the determination of when to send a Database\n   Description\
    \ packet depends on whether the router is master or slave:\n   Master\n      Database\
    \ Description packets are sent when either a) the slave\n      acknowledges the\
    \ previous Database Description packet by echoing\n      the DD sequence number\
    \ or b) RxmtInterval seconds elapse without\n      an acknowledgment, in which\
    \ case the previous Database Description\n      packet is retransmitted.\n   Slave\n\
    \      Database Description packets are sent only in response to Database\n  \
    \    Description packets received from the master.  If the Database\n      Description\
    \ packet received from the master is new, a new Database\n      Description packet\
    \ is sent, otherwise the previous Database\n      Description packet is resent.\n\
    \   In states Loading and Full the slave must resend its last Database\n   Description\
    \ packet in response to duplicate Database Description\n   packets received from\
    \ the master.  For this reason the slave must\n   wait RouterDeadInterval seconds\
    \ before freeing the last Database\n   Description packet.  Reception of a Database\
    \ Description packet from\n   the master after this interval will generate a SeqNumberMismatch\n\
    \   neighbor event.\n"
- title: 10.9.  Sending Link State Request Packets
  contents:
  - "10.9.  Sending Link State Request Packets\n   In neighbor states Exchange or\
    \ Loading, the Link state request list\n   contains a list of those LSAs that\
    \ need to be obtained from the\n   neighbor.  To request these LSAs, a router\
    \ sends the neighbor the\n   beginning of the Link state request list, packaged\
    \ in a Link State\n   Request packet.\n   When the neighbor responds to these\
    \ requests with the proper Link\n   State Update packet(s), the Link state request\
    \ list is truncated and\n   a new Link State Request packet is sent.  This process\
    \ continues\n   until the Link state request list becomes empty.  Unsatisfied\
    \ Link\n   State Request packets are retransmitted at intervals of RxmtInterval.\n\
    \   There should be at most one Link State Request packet outstanding at\n   any\
    \ one time.\n   When the Link state request list becomes empty, and the neighbor\n\
    \   state is Loading (i.e., a complete sequence of Database Description\n   packets\
    \ has been sent to and received from the neighbor), the Loading\n   Done neighbor\
    \ event is generated.\n"
- title: 10.10.  An Example
  contents:
  - "10.10.  An Example\n   Figure 14 shows an example of an adjacency forming.  Routers\
    \ RT1 and\n   RT2 are both connected to a broadcast network.  It is assumed that\n\
    \   RT2 is the Designated Router for the network, and that RT2 has a\n   higher\
    \ Router ID than Router RT1.\n   The neighbor state changes realized by each router\
    \ are listed on the\n   sides of the figure.\n   At the beginning of Figure 14,\
    \ Router RT1's interface to the network\n   becomes operational.  It begins sending\
    \ Hello Packets, although it\n   doesn't know the identity of the Designated Router\
    \ or of any other\n   neighboring routers.  Router RT2 hears this hello (moving\
    \ the\n   neighbor to Init state), and in its next Hello Packet indicates that\n\
    \   it is itself the Designated Router and that it has heard Hello\n   Packets\
    \ from RT1.  This in turn causes RT1 to go to state ExStart, as\n   it starts\
    \ to bring up the adjacency.\n   RT1 begins by asserting itself as the master.\
    \  When it sees that RT2\n   is indeed the master (because of RT2's higher Router\
    \ ID), RT1\n   transitions to slave state and adopts its neighbor's DD sequence\n\
    \   number.  Database Description packets are then exchanged, with polls\n   coming\
    \ from the master (RT2) and responses from the slave (RT1).\n   This sequence\
    \ of Database Description Packets ends when both the poll\n   and associated response\
    \ has the M-bit off.\n   In this example, it is assumed that RT2 has a completely\
    \ up to date\n   database.  In that case, RT2 goes immediately into Full state.\
    \  RT1\n   will go into Full state after updating the necessary parts of its\n\
    \   database.  This is done by sending Link State Request Packets, and\n   receiving\
    \ Link State Update Packets in response.  Note that, while\n   RT1 has waited\
    \ until a complete set of Database Description Packets\n   has been received (from\
    \ RT2) before sending any Link State Request\n   Packets, this need not be the\
    \ case.  RT1 could have interleaved the\n   sending of Link State Request Packets\
    \ with the reception of Database\n   Description Packets.\n            +---+ \
    \                                        +---+\n            |RT1|            \
    \                             |RT2|\n            +---+                       \
    \                  +---+\n            Down                                   \
    \       Down\n                            Hello(DR=0,seen=0)\n               \
    \        ------------------------------>\n                         Hello (DR=RT2,seen=RT1,...)\
    \      Init\n                       <------------------------------\n        \
    \    ExStart        D-D (Seq=x,I,M,Master)\n                       ------------------------------>\n\
    \                           D-D (Seq=y,I,M,Master)         ExStart\n         \
    \              <------------------------------\n            Exchange       D-D\
    \ (Seq=y,M,Slave)\n                       ------------------------------>\n  \
    \                         D-D (Seq=y+1,M,Master)         Exchange\n          \
    \             <------------------------------\n                           D-D\
    \ (Seq=y+1,M,Slave)\n                       ------------------------------>\n\
    \                                     ...\n                                  \
    \   ...\n                                     ...\n                          \
    \ D-D (Seq=y+n, Master)\n                       <------------------------------\n\
    \                           D-D (Seq=y+n, Slave)\n             Loading   ------------------------------>\n\
    \                                 LS Request                Full\n           \
    \            ------------------------------>\n                               \
    \  LS Update\n                       <------------------------------\n       \
    \                          LS Request\n                       ------------------------------>\n\
    \                                 LS Update\n                       <------------------------------\n\
    \             Full\n                Figure 14: An adjacency bring-up example\n"
- title: 11.  The Routing Table Structure
  contents:
  - "11.  The Routing Table Structure\n   The routing table data structure contains\
    \ all the information\n   necessary to forward an IP data packet toward its destination.\
    \  Each\n   routing table entry describes the collection of best paths to a\n\
    \   particular destination.  When forwarding an IP data packet, the\n   routing\
    \ table entry providing the best match for the packet's IP\n   destination is\
    \ located.  The matching routing table entry then\n   provides the next hop towards\
    \ the packet's destination.  OSPF also\n   provides for the existence of a default\
    \ route (Destination ID =\n   DefaultDestination, Address Mask = 0x00000000).\
    \  When the default\n   route exists, it matches all IP destinations (although\
    \ any other\n   matching entry is a better match). Finding the routing table entry\n\
    \   that best matches an IP destination is further described in Section\n   11.1.\n\
    \   There is a single routing table in each router.  Two sample routing\n   tables\
    \ are described in Sections 11.2 and 11.3.  The building of the\n   routing table\
    \ is discussed in Section 16.\n   The rest of this section defines the fields\
    \ found in a routing table\n   entry.  The first set of fields describes the routing\
    \ table entry's\n   destination.\n   Destination Type\n      Destination type\
    \ is either \"network\" or \"router\". Only network entries\n      are actually\
    \ used when forwarding IP data traffic.  Router routing\n      table entries are\
    \ used solely as intermediate steps in the routing\n      table build process.\n\
    \      A network is a range of IP addresses, to which IP data traffic may be\n\
    \      forwarded.  This includes IP networks (class A, B, or C), IP subnets,\n\
    \      IP supernets and single IP hosts.  The default route also falls into\n\
    \      this category.\n      Router entries are kept for area border routers and\
    \ AS boundary\n      routers.  Routing table entries for area border routers are\
    \ used when\n      calculating the inter-area routes (see Section 16.2), and when\n\
    \      maintaining configured virtual links (see Section 15).  Routing table\n\
    \      entries for AS boundary routers are used when calculating the AS\n    \
    \  external routes (see Section 16.4).\n   Destination ID\n      The destination's\
    \ identifier or name.  This depends on the\n      Destination Type.  For networks,\
    \ the identifier is their associated IP\n      address.  For routers, the identifier\
    \ is the OSPF Router ID.[9]\n   Address Mask\n      Only defined for networks.\
    \  The network's IP address together with its\n      address mask defines a range\
    \ of IP addresses.  For IP subnets, the\n      address mask is referred to as\
    \ the subnet mask.  For host routes, the\n      mask is \"all ones\" (0xffffffff).\n\
    \   Optional Capabilities\n      When the destination is a router this field indicates\
    \ the optional\n      OSPF capabilities supported by the destination router. \
    \ The only\n      optional capability defined by this specification is the ability\
    \ to\n      process AS-external-LSAs.  For a further discussion of OSPF's optional\n\
    \      capabilities, see Section 4.5.\n   The set of paths to use for a destination\
    \ may vary based on the OSPF\n   area to which the paths belong.  This means that\
    \ there may be\n   multiple routing table entries for the same destination, depending\
    \ on\n   the values of the next field.\n   Area\n      This field indicates the\
    \ area whose link state information has led\n      to the routing table entry's\
    \ collection of paths.  This is called\n      the entry's associated area.  For\
    \ sets of AS external paths, this\n      field is not defined.  For destinations\
    \ of type \"router\", there\n      may be separate sets of paths (and therefore\
    \ separate routing\n      table entries) associated with each of several areas.\
    \ For example,\n      this will happen when two area border routers share multiple\
    \ areas\n      in common.  For destinations of type \"network\", only the set\
    \ of\n      paths associated with the best area (the one providing the\n     \
    \ preferred route) is kept.\n   The rest of the routing table entry describes\
    \ the set of paths to the\n   destination.  The following fields pertain to the\
    \ set of paths as a\n   whole.  In other words, each one of the paths contained\
    \ in a routing\n   table entry is of the same path-type and cost (see below).\n\
    \   Path-type\n      There are four possible types of paths used to route traffic\
    \ to\n      the destination, listed here in order of preference: intra-area,\n\
    \      inter-area, type 1 external or type 2 external.  Intra-area paths\n   \
    \   indicate destinations belonging to one of the router's attached\n      areas.\
    \  Inter-area paths are paths to destinations in other OSPF\n      areas.  These\
    \ are discovered through the examination of received\n      summary-LSAs.  AS\
    \ external paths are paths to destinations\n      external to the AS.  These are\
    \ detected through the examination of\n      received AS-external-LSAs.\n   Cost\n\
    \      The link state cost of the path to the destination.  For all paths\n  \
    \    except type 2 external paths this describes the entire path's\n      cost.\
    \  For Type 2 external paths, this field describes the cost of\n      the portion\
    \ of the path internal to the AS.  This cost is\n      calculated as the sum of\
    \ the costs of the path's constituent\n      links.\n   Type 2 cost\n      Only\
    \ valid for type 2 external paths.  For these paths, this field\n      indicates\
    \ the cost of the path's external portion.  This cost has\n      been advertised\
    \ by an AS boundary router, and is the most\n      significant part of the total\
    \ path cost.  For example, a type 2\n      external path with type 2 cost of 5\
    \ is always preferred over a\n      path with type 2 cost of 10, regardless of\
    \ the cost of the two\n      paths' internal components.\n   Link State Origin\n\
    \      Valid only for intra-area paths, this field indicates the LSA\n      (router-LSA\
    \ or network-LSA) that directly references the\n      destination.  For example,\
    \ if the destination is a transit\n      network, this is the transit network's\
    \ network-LSA.  If the\n      destination is a stub network, this is the router-LSA\
    \ for the\n      attached router.  The LSA is discovered during the shortest-path\n\
    \      tree calculation (see Section 16.1).  Multiple LSAs may reference\n   \
    \   the destination, however a tie-breaking scheme always reduces the\n      choice\
    \ to a single LSA. The Link State Origin field is not used by\n      the OSPF\
    \ protocol, but it is used by the routing table calculation\n      in OSPF's Multicast\
    \ routing extensions (MOSPF).\n   When multiple paths of equal path-type and cost\
    \ exist to a\n   destination (called elsewhere \"equal-cost\" paths), they are\
    \ stored in\n   a single routing table entry.  Each one of the \"equal-cost\"\
    \ paths is\n   distinguished by the following fields:\n   Next hop\n      The\
    \ outgoing router interface to use when forwarding traffic to\n      the destination.\
    \  On broadcast, Point-to-MultiPoint and NBMA\n      networks, the next hop also\
    \ includes the IP address of the next\n      router (if any) in the path towards\
    \ the destination.\n   Advertising router\n      Valid only for inter-area and\
    \ AS external paths.  This field\n      indicates the Router ID of the router\
    \ advertising the summary-LSA\n      or AS-external-LSA that led to this path.\n"
- title: 11.1.  Routing table lookup
  contents:
  - "11.1.  Routing table lookup\n   When an IP data packet is received, an OSPF router\
    \ finds the routing\n   table entry that best matches the packet's destination.\
    \  This routing\n   table entry then provides the outgoing interface and next\
    \ hop router\n   to use in forwarding the packet. This section describes the process\n\
    \   of finding the best matching routing table entry. The process\n   consists\
    \ of a number of steps, wherein the collection of routing\n   table entries is\
    \ progressively pruned.  In the end, the single\n   routing table entry remaining\
    \ is called the \"best match\".\n   Before the lookup begins, \"discard\" routing\
    \ table entries should be\n   inserted into the routing table for each of the\
    \ router's active area\n   address ranges (see Section 3.5).  (An area range is\
    \ considered\n   \"active\" if the range contains one or more networks reachable\
    \ by\n   intra-area paths.) The destination of a \"discard\" entry is the set\
    \ of\n   addresses described by its associated active area address range, and\n\
    \   the path type of each \"discard\" entry is set to \"inter-area\".[10]\n  \
    \ Note that the steps described below may fail to produce a best match\n   routing\
    \ table entry (i.e., all existing routing table entries are\n   pruned for some\
    \ reason or another), or the best match routing table\n   entry may be one of\
    \ the above \"discard\" routing table entries. In\n   these cases, the packet's\
    \ IP destination is considered unreachable.\n   Instead of being forwarded, the\
    \ packet should be discarded and an\n   ICMP destination unreachable message should\
    \ be returned to the\n   packet's source.\n   (1) Select the complete set of \"\
    matching\" routing table entries\n       from the routing table.  Each routing\
    \ table entry describes\n       a (set of) path(s) to a range of IP addresses.\
    \ If the data\n       packet's IP destination falls into an entry's range of IP\n\
    \       addresses, the routing table entry is called a match. (It is\n       quite\
    \ likely that multiple entries will match the data\n       packet.  For example,\
    \ a default route will match all\n       packets.)\n   (2) Reduce the set of matching\
    \ entries to those having the most\n       preferential path-type (see Section\
    \ 11). OSPF has a four\n       level hierarchy of paths. Intra-area paths are\
    \ the most\n       preferred, followed in order by inter-area, type 1 external\n\
    \       and type 2 external paths.\n   (3) Select the remaining routing table\
    \ entry that provides the\n       most specific (longest) match. Another way of\
    \ saying this is\n       to choose the remaining entry that specifies the narrowest\n\
    \       range of IP addresses.[11] For example, the entry for the\n       address/mask\
    \ pair of (128.185.1.0, 0xffffff00) is more\n       specific than an entry for\
    \ the pair (128.185.0.0,\n       0xffff0000). The default route is the least specific\
    \ match,\n       since it matches all destinations.\n"
- title: 11.2.  Sample routing table, without areas
  contents:
  - "11.2.  Sample routing table, without areas\n   Consider the Autonomous System\
    \ pictured in Figure 2.  No OSPF areas\n   have been configured.  A single metric\
    \ is shown per outbound\n   interface.  The calculation of Router RT6's routing\
    \ table proceeds as\n   described in Section 2.2.  The resulting routing table\
    \ is shown in\n   Table 12.  Destination types are abbreviated: Network as \"\
    N\", Router\n   as \"R\".\n   There are no instances of multiple equal-cost shortest\
    \ paths in this\n   example.  Also, since there are no areas, there are no inter-area\n\
    \   paths.\n   Routers RT5 and RT7 are AS boundary routers.  Intra-area routes\
    \ have\n   been calculated to Routers RT5 and RT7.  This allows external routes\n\
    \   to be calculated to the destinations advertised by RT5 and RT7 (i.e.,\n  \
    \ Networks N12, N13, N14 and N15).  It is assumed all AS-external-LSAs\n   originated\
    \ by RT5 and RT7 are advertising type 1 external metrics.\n   This results in\
    \ type 1 external paths being calculated to\n   destinations N12-N15.\n"
- title: 11.3.  Sample routing table, with areas
  contents:
  - "11.3.  Sample routing table, with areas\n   Consider the previous example, this\
    \ time split into OSPF areas.  An\n   OSPF area configuration is pictured in Figure\
    \ 6.  Router RT4's\n   routing table will be described for this area configuration.\
    \  Router\n   RT4 has a connection to Area 1 and a backbone connection.  This\n\
    \   causes Router RT4 to view the AS as the concatenation of the two\n   graphs\
    \ shown in Figures 7 and 8.  The resulting routing table is\n   displayed in Table\
    \ 13.\n      Type   Dest   Area   Path  Type    Cost   Next     Adv.\n       \
    \                                         Hop(s)   Router(s)\n      ____________________________________________________________\n\
    \      N      N1     0      intra-area    10     RT3      *\n      N      N2 \
    \    0      intra-area    10     RT3      *\n      N      N3     0      intra-area\
    \    7      RT3      *\n      N      N4     0      intra-area    8      RT3  \
    \    *\n      N      Ib     0      intra-area    7      *        *\n      N  \
    \    Ia     0      intra-area    12     RT10     *\n      N      N6     0    \
    \  intra-area    8      RT10     *\n      N      N7     0      intra-area    12\
    \     RT10     *\n      N      N8     0      intra-area    10     RT10     *\n\
    \      N      N9     0      intra-area    11     RT10     *\n      N      N10\
    \    0      intra-area    13     RT10     *\n      N      N11    0      intra-area\
    \    14     RT10     *\n      N      H1     0      intra-area    21     RT10 \
    \    *\n      R      RT5    0      intra-area    6      RT5      *\n      R  \
    \    RT7    0      intra-area    8      RT10     *\n      ____________________________________________________________\n\
    \      N      N12    *      type 1 ext.   10     RT10     RT7\n      N      N13\
    \    *      type 1 ext.   14     RT5      RT5\n      N      N14    *      type\
    \ 1 ext.   14     RT5      RT5\n      N      N15    *      type 1 ext.   17  \
    \   RT10     RT7\n               Table 12: The routing table for Router RT6\n\
    \                         (no configured areas).\n   Again, Routers RT5 and RT7\
    \ are AS boundary routers.  Routers RT3,\n   RT4, RT7, RT10 and RT11 are area\
    \ border routers.  Note that there are\n   two routing entries for the area border\
    \ router RT3, since it has two\n   areas in common with RT4 (Area 1 and the backbone).\n\
    \   Backbone paths have been calculated to all area border routers.\n   These\
    \ are used when determining the inter-area routes.  Note that all\n   of the inter-area\
    \ routes are associated with the backbone; this is\n   always the case when the\
    \ calculating router is itself an area border\n   router.  Routing information\
    \ is condensed at area boundaries.  In\n   this example, we assume that Area 3\
    \ has been defined so that networks\n   N9-N11 and the host route to H1 are all\
    \ condensed to a single route\n   when advertised into the backbone (by Router\
    \ RT11).  Note that the\n   cost of this route is the maximum of the set of costs\
    \ to its\n   individual components.\n   There is a virtual link configured between\
    \ Routers RT10 and RT11.\n   Without this configured virtual link, RT11 would\
    \ be unable to\n   advertise a route for networks N9-N11 and Host H1 into the\
    \ backbone,\n   and there would not be an entry for these networks in Router RT4's\n\
    \   routing table.\n   In this example there are two equal-cost paths to Network\
    \ N12.\n   However, they both use the same next hop (Router RT5).\n   Type   Dest\
    \        Area   Path  Type    Cost   Next      Adv.\n                        \
    \                          Hops(s)   Router(s)\n   __________________________________________________________________\n\
    \   N      N1          1      intra-area    4      RT1       *\n   N      N2 \
    \         1      intra-area    4      RT2       *\n   N      N3          1   \
    \   intra-area    1      *         *\n   N      N4          1      intra-area\
    \    3      RT3       *\n   R      RT3         1      intra-area    1      * \
    \        *\n   __________________________________________________________________\n\
    \   N      Ib          0      intra-area    22     RT5       *\n   N      Ia \
    \         0      intra-area    27     RT5       *\n   R      RT3         0   \
    \   intra-area    21     RT5       *\n   R      RT5         0      intra-area\
    \    8      *         *\n   R      RT7         0      intra-area    14     RT5\
    \       *\n   R      RT10        0      intra-area    22     RT5       *\n   R\
    \      RT11        0      intra-area    25     RT5       *\n   __________________________________________________________________\n\
    \   N      N6          0      inter-area    15     RT5       RT7\n   N      N7\
    \          0      inter-area    19     RT5       RT7\n   N      N8          0\
    \      inter-area    18     RT5       RT7\n   N      N9-N11,H1   0      inter-area\
    \    36     RT5       RT11\n   __________________________________________________________________\n\
    \   N      N12         *      type 1 ext.   16     RT5       RT5,RT7\n   N   \
    \   N13         *      type 1 ext.   16     RT5       RT5\n   N      N14     \
    \    *      type 1 ext.   16     RT5       RT5\n   N      N15         *      type\
    \ 1 ext.   23     RT5       RT7\n                  Table 13: Router RT4's routing\
    \ table\n                       in the presence of areas.\n   Router RT4's routing\
    \ table would improve (i.e., some of the paths in\n   the routing table would\
    \ become shorter) if an additional virtual link\n   were configured between Router\
    \ RT4 and Router RT3.  The new virtual\n   link would itself be associated with\
    \ the first entry for area border\n   router RT3 in Table 13 (an intra-area path\
    \ through Area 1).  This\n   would yield a cost of 1 for the virtual link.  The\
    \ routing table\n   entries changes that would be caused by the addition of this\
    \ virtual\n   link are shown in Table 14.\n"
- title: 12.  Link State Advertisements (LSAs)
  contents:
  - "12.  Link State Advertisements (LSAs)\n   Each router in the Autonomous System\
    \ originates one or more link\n   state advertisements (LSAs).  This memo defines\
    \ five distinct types\n   of LSAs, which are described in Section 4.3.  The collection\
    \ of LSAs\n   forms the link-state database.  Each separate type of LSA has a\n\
    \   separate function. Router-LSAs and network-LSAs describe how an\n   area's\
    \ routers and networks are interconnected.  Summary-LSAs provide\n   a way of\
    \ condensing an area's routing information. AS-external-LSAs\n   provide a way\
    \ of transparently advertising externally-derived routing\n   information throughout\
    \ the Autonomous System.\n   Each LSA begins with a standard 20-byte header. \
    \ This LSA header is\n   discussed below.\n    Type   Dest        Area   Path\
    \  Type   Cost   Next     Adv.\n                                             \
    \     Hop(s)   Router(s)\n    ________________________________________________________________\n\
    \    N      Ib          0      intra-area   16     RT3      *\n    N      Ia \
    \         0      intra-area   21     RT3      *\n    R      RT3         0    \
    \  intra-area   1      *        *\n    R      RT10        0      intra-area  \
    \ 16     RT3      *\n    R      RT11        0      intra-area   19     RT3   \
    \   *\n    ________________________________________________________________\n\
    \    N      N9-N11,H1   0      inter-area   30     RT3      RT11\n           \
    \       Table 14: Changes resulting from an\n                        additional\
    \ virtual link.\n"
- title: 12.1.  The LSA Header
  contents:
  - "12.1.  The LSA Header\n   The LSA header contains the LS type, Link State ID\
    \ and Advertising\n   Router fields.  The combination of these three fields uniquely\n\
    \   identifies the LSA.\n   There may be several instances of an LSA present in\
    \ the Autonomous\n   System, all at the same time.  It must then be determined\
    \ which\n   instance is more recent.  This determination is made by examining\
    \ the\n   LS sequence, LS checksum and LS age fields.  These fields are also\n\
    \   contained in the 20-byte LSA header.\n   Several of the OSPF packet types\
    \ list LSAs.  When the instance is not\n   important, an LSA is referred to by\
    \ its LS type, Link State ID and\n   Advertising Router (see Link State Request\
    \ Packets).  Otherwise, the\n   LS sequence number, LS age and LS checksum fields\
    \ must also be\n   referenced.\n   A detailed explanation of the fields contained\
    \ in the LSA header\n   follows.\n"
- title: 12.1.1.  LS age
  contents:
  - "12.1.1.  LS age\n   This field is the age of the LSA in seconds.  It should be\
    \ processed\n   as an unsigned 16-bit integer.  It is set to 0 when the LSA is\n\
    \   originated.  It must be incremented by InfTransDelay on every hop of\n   the\
    \ flooding procedure.  LSAs are also aged as they are held in each\n   router's\
    \ database.\n   The age of an LSA is never incremented past MaxAge.  LSAs having\
    \ age\n   MaxAge are not used in the routing table calculation.  When an LSA's\n\
    \   age first reaches MaxAge, it is reflooded. An LSA of age MaxAge is\n   finally\
    \ flushed from the database when it is no longer needed to\n   ensure database\
    \ synchronization.  For more information on the aging\n   of LSAs, consult Section\
    \ 14.\n   The LS age field is examined when a router receives two instances of\n\
    \   an LSA, both having identical LS sequence numbers and LS checksums.\n   An\
    \ instance of age MaxAge is then always accepted as most recent;\n   this allows\
    \ old LSAs to be flushed quickly from the routing domain.\n   Otherwise, if the\
    \ ages differ by more than MaxAgeDiff, the instance\n   having the smaller age\
    \ is accepted as most recent.[12] See Section\n   13.1 for more details.\n"
- title: 12.1.2.  Options
  contents:
  - "12.1.2.  Options\n   The Options field in the LSA header indicates which optional\n\
    \   capabilities are associated with the LSA.  OSPF's optional\n   capabilities\
    \ are described in Section 4.5. One optional capability is\n   defined by this\
    \ specification, represented by the E-bit found in the\n   Options field.  The\
    \ unrecognized bits in the Options field should be\n   set to zero.  The E-bit\
    \ represents OSPF's ExternalRoutingCapability.\n   This bit should be set in all\
    \ LSAs associated with the backbone, and\n   all LSAs associated with non-stub\
    \ areas (see Section 3.6).  It should\n   also be set in all AS-external-LSAs.\
    \  It should be reset in all\n   router-LSAs, network-LSAs and summary-LSAs associated\
    \ with a stub\n   area.  For all LSAs, the setting of the E-bit is for informational\n\
    \   purposes only; it does not affect the routing table calculation.\n"
- title: 12.1.3.  LS type
  contents:
  - "12.1.3.  LS type\n   The LS type field dictates the format and function of the\
    \ LSA.  LSAs\n   of different types have different names (e.g., router-LSAs or\n\
    \   network-LSAs).  All LSA types defined by this memo, except the AS-\n   external-LSAs\
    \ (LS type = 5), are flooded throughout a single area\n   only.  AS-external-LSAs\
    \ are flooded throughout the entire Autonomous\n   System, excepting stub areas\
    \ (see Section 3.6).  Each separate LSA\n   type is briefly described below in\
    \ Table 15.\n"
- title: 12.1.4.  Link State ID
  contents:
  - "12.1.4.  Link State ID\n   This field identifies the piece of the routing domain\
    \ that is being\n   described by the LSA.  Depending on the LSA's LS type, the\
    \ Link State\n   ID takes on the values listed in Table 16.\n   Actually, for\
    \ Type 3 summary-LSAs (LS type = 3) and AS-external-LSAs\n   (LS type = 5), the\
    \ Link State ID may additionally have one or more of\n   the destination network's\
    \ \"host\" bits set. For example, when\n   originating an AS-external-LSA for\
    \ the network 10.0.0.0 with mask of\n   255.0.0.0, the Link State ID can be set\
    \ to anything in the range\n   10.0.0.0 through 10.255.255.255 inclusive (although\
    \ 10.0.0.0 should\n   be used whenever possible). The freedom to set certain host\
    \ bits\n   allows a router to originate separate LSAs for two networks having\n\
    \   the same address but different masks. See Appendix E for details.\n      \
    \      LS Type   LSA description\n            ________________________________________________\n\
    \            1         These are the router-LSAs.\n                      They\
    \ describe the collected\n                       states of the router's\n    \
    \                  interfaces. For more information,\n                      consult\
    \ Section 12.4.1.\n            ________________________________________________\n\
    \            2         These are the network-LSAs.\n                      They\
    \ describe the set of routers\n                      attached to the network.\
    \ For\n                      more information, consult\n                     \
    \ Section 12.4.2.\n            ________________________________________________\n\
    \            3 or 4    These are the summary-LSAs.\n                      They\
    \ describe inter-area routes,\n                      and enable the condensation\
    \ of\n                      routing information at area\n                    \
    \  borders. Originated by area border\n                      routers, the Type\
    \ 3 summary-LSAs\n                      describe routes to networks while the\n\
    \                      Type 4 summary-LSAs describe routes to\n              \
    \        AS boundary routers.\n            ________________________________________________\n\
    \            5         These are the AS-external-LSAs.\n                     \
    \ Originated by AS boundary routers,\n                      they describe routes\n\
    \                      to destinations external to the\n                     \
    \ Autonomous System. A default route for\n                      the Autonomous\
    \ System can also be\n                      described by an AS-external-LSA.\n\
    \            Table 15: OSPF link state advertisements (LSAs).\n            LS\
    \ Type   Link State ID\n            _______________________________________________\n\
    \            1         The originating router's Router ID.\n            2    \
    \     The IP interface address of the\n                      network's Designated\
    \ Router.\n            3         The destination network's IP address.\n     \
    \       4         The Router ID of the described AS\n                      boundary\
    \ router.\n            5         The destination network's IP address.\n     \
    \              Table 16: The LSA's Link State ID.\n   When the LSA is describing\
    \ a network (LS type = 2, 3 or 5), the\n   network's IP address is easily derived\
    \ by masking the Link State ID\n   with the network/subnet mask contained in the\
    \ body of the LSA.  When\n   the LSA is describing a router (LS type = 1 or 4),\
    \ the Link State ID\n   is always the described router's OSPF Router ID.\n   When\
    \ an AS-external-LSA (LS Type = 5) is describing a default route,\n   its Link\
    \ State ID is set to DefaultDestination (0.0.0.0).\n"
- title: 12.1.5.  Advertising Router
  contents:
  - "12.1.5.  Advertising Router\n   This field specifies the OSPF Router ID of the\
    \ LSA's originator.  For\n   router-LSAs, this field is identical to the Link\
    \ State ID field.\n   Network-LSAs are originated by the network's Designated\
    \ Router.\n   Summary-LSAs originated by area border routers.  AS-external-LSAs\
    \ are\n   originated by AS boundary routers.\n"
- title: 12.1.6.  LS sequence number
  contents:
  - "12.1.6.  LS sequence number\n   The sequence number field is a signed 32-bit\
    \ integer.  It is used to\n   detect old and duplicate LSAs.  The space of sequence\
    \ numbers is\n   linearly ordered.  The larger the sequence number (when compared\
    \ as\n   signed 32-bit integers) the more recent the LSA.  To describe to\n  \
    \ sequence number space more precisely, let N refer in the discussion\n   below\
    \ to the constant 2**31.\n   The sequence number -N (0x80000000) is reserved (and\
    \ unused).  This\n   leaves -N + 1 (0x80000001) as the smallest (and therefore\
    \ oldest)\n   sequence number; this sequence number is referred to as the constant\n\
    \   InitialSequenceNumber. A router uses InitialSequenceNumber the first\n   time\
    \ it originates any LSA.  Afterwards, the LSA's sequence number is\n   incremented\
    \ each time the router originates a new instance of the\n   LSA.  When an attempt\
    \ is made to increment the sequence number past\n   the maximum value of N - 1\
    \ (0x7fffffff; also referred to as\n   MaxSequenceNumber), the current instance\
    \ of the LSA must first be\n   flushed from the routing domain.  This is done\
    \ by prematurely aging\n   the LSA (see Section 14.1) and reflooding it.  As soon\
    \ as this flood\n   has been acknowledged by all adjacent neighbors, a new instance\
    \ can\n   be originated with sequence number of InitialSequenceNumber.\n   The\
    \ router may be forced to promote the sequence number of one of its\n   LSAs when\
    \ a more recent instance of the LSA is unexpectedly received\n   during the flooding\
    \ process. This should be a rare event.  This may\n   indicate that an out-of-date\
    \ LSA, originated by the router itself\n   before its last restart/reload, still\
    \ exists in the Autonomous\n   System.  For more information see Section 13.4.\n"
- title: 12.1.7.  LS checksum
  contents:
  - "12.1.7.  LS checksum\n   This field is the checksum of the complete contents\
    \ of the LSA,\n   excepting the LS age field.  The LS age field is excepted so\
    \ that an\n   LSA's age can be incremented without updating the checksum.  The\n\
    \   checksum used is the same that is used for ISO connectionless\n   datagrams;\
    \ it is commonly referred to as the Fletcher checksum.  It\n   is documented in\
    \ Annex B of [Ref6]. The LSA header also contains the\n   length of the LSA in\
    \ bytes; subtracting the size of the LS age field\n   (two bytes) yields the amount\
    \ of data to checksum.\n   The checksum is used to detect data corruption of an\
    \ LSA.  This\n   corruption can occur while an LSA is being flooded, or while\
    \ it is\n   being held in a router's memory.  The LS checksum field cannot take\n\
    \   on the value of zero; the occurrence of such a value should be\n   considered\
    \ a checksum failure.  In other words, calculation of the\n   checksum is not\
    \ optional.\n   The checksum of an LSA is verified in two cases: a) when it is\n\
    \   received in a Link State Update Packet and b) at times during the\n   aging\
    \ of the link state database.  The detection of a checksum\n   failure leads to\
    \ separate actions in each case.  See Sections 13 and\n   14 for more details.\n\
    \   Whenever the LS sequence number field indicates that two instances of\n  \
    \ an LSA are the same, the LS checksum field is examined.  If there is\n   a difference,\
    \ the instance with the larger LS checksum is considered\n   to be most recent.[13]\
    \ See Section 13.1 for more details.\n"
- title: 12.2.  The link state database
  contents:
  - "12.2.  The link state database\n   A router has a separate link state database\
    \ for every area to which\n   it belongs. All routers belonging to the same area\
    \ have identical\n   link state databases for the area.\n   The databases for\
    \ each individual area are always dealt with\n   separately.  The shortest path\
    \ calculation is performed separately\n   for each area (see Section 16).  Components\
    \ of the area link-state\n   database are flooded throughout the area only.  Finally,\
    \ when an\n   adjacency (belonging to Area A) is being brought up, only the\n\
    \   database for Area A is synchronized between the two routers.\n   The area\
    \ database is composed of router-LSAs, network-LSAs and\n   summary-LSAs (all\
    \ listed in the area data structure).  In addition,\n   external routes (AS-external-LSAs)\
    \ are included in all non-stub area\n   databases (see Section 3.6).\n   An implementation\
    \ of OSPF must be able to access individual pieces of\n   an area database.  This\
    \ lookup function is based on an LSA's LS type,\n   Link State ID and Advertising\
    \ Router.[14] There will be a single\n   instance (the most up-to-date) of each\
    \ LSA in the database.  The\n   database lookup function is invoked during the\
    \ LSA flooding procedure\n   (Section 13) and the routing table calculation (Section\
    \ 16).  In\n   addition, using this lookup function the router can determine whether\n\
    \   it has itself ever originated a particular LSA, and if so, with what\n   LS\
    \ sequence number.\n   An LSA is added to a router's database when either a) it\
    \ is received\n   during the flooding process (Section 13) or b) it is originated\
    \ by\n   the router itself (Section 12.4).  An LSA is deleted from a router's\n\
    \   database when either a) it has been overwritten by a newer instance\n   during\
    \ the flooding process (Section 13) or b) the router originates\n   a newer instance\
    \ of one of its self-originated LSAs (Section 12.4) or\n   c) the LSA ages out\
    \ and is flushed from the routing domain (Section\n   14).\n   Whenever an LSA\
    \ is deleted from the database it must also be removed\n   from all neighbors'\
    \ Link state retransmission lists (see Section 10).\n"
- title: 12.3.  Representation of TOS
  contents:
  - "12.3.  Representation of TOS\n   For backward compatibility with previous versions\
    \ of the OSPF\n   specification ([Ref9]), TOS-specific information can be included\
    \ in\n   router-LSAs, summary-LSAs and AS-external-LSAs.  The encoding of TOS\n\
    \   in OSPF LSAs is specified in Table 17. That table relates the OSPF\n   encoding\
    \ to the IP packet header's TOS field (defined in [Ref12]).\n   The OSPF encoding\
    \ is expressed as a decimal integer, and the IP\n   packet header's TOS field\
    \ is expressed in the binary TOS values used\n   in [Ref12].\n               \
    \     OSPF encoding   RFC 1349 TOS values\n                    ___________________________________________\n\
    \                    0               0000 normal service\n                   \
    \ 2               0001 minimize monetary cost\n                    4         \
    \      0010 maximize reliability\n                    6               0011\n \
    \                   8               0100 maximize throughput\n               \
    \     10              0101\n                    12              0110\n       \
    \             14              0111\n                    16              1000 minimize\
    \ delay\n                    18              1001\n                    20    \
    \          1010\n                    22              1011\n                  \
    \  24              1100\n                    26              1101\n          \
    \          28              1110\n                    30              1111\n  \
    \                Table 17: Representing TOS in OSPF.\n"
- title: 12.4.  Originating LSAs
  contents:
  - "12.4.  Originating LSAs\n   Into any given OSPF area, a router will originate\
    \ several LSAs.  Each\n   router originates a router-LSA.  If the router is also\
    \ the Designated\n   Router for any of the area's networks, it will originate\
    \ network-LSAs\n   for those networks.\n   Area border routers originate a single\
    \ summary-LSA for each known\n   inter-area destination.  AS boundary routers\
    \ originate a single AS-\n   external-LSA for each known AS external destination.\
    \  Destinations\n   are advertised one at a time so that the change in any single\
    \ route\n   can be flooded without reflooding the entire collection of routes.\n\
    \   During the flooding procedure, many LSAs can be carried by a single\n   Link\
    \ State Update packet.\n   As an example, consider Router RT4 in Figure 6.  It\
    \ is an area border\n   router, having a connection to Area 1 and the backbone.\
    \  Router RT4\n   originates 5 distinct LSAs into the backbone (one router-LSA,\
    \ and one\n   summary-LSA for each of the networks N1-N4).  Router RT4 will also\n\
    \   originate 8 distinct LSAs into Area 1 (one router-LSA and seven\n   summary-LSAs\
    \ as pictured in Figure 7).  If RT4 has been selected as\n   Designated Router\
    \ for Network N3, it will also originate a network-\n   LSA for N3 into Area 1.\n\
    \   In this same figure, Router RT5 will be originating 3 distinct AS-\n   external-LSAs\
    \ (one for each of the networks N12-N14).  These will be\n   flooded throughout\
    \ the entire AS, assuming that none of the areas\n   have been configured as stubs.\
    \  However, if area 3 has been\n   configured as a stub area, the AS-external-LSAs\
    \ for networks N12-N14\n   will not be flooded into area 3 (see Section 3.6).\
    \  Instead, Router\n   RT11 would originate a default summary- LSA that would\
    \ be flooded\n   throughout area 3 (see Section 12.4.3).  This instructs all of\
    \ area\n   3's internal routers to send their AS external traffic to RT11.\n \
    \  Whenever a new instance of an LSA is originated, its LS sequence\n   number\
    \ is incremented, its LS age is set to 0, its LS checksum is\n   calculated, and\
    \ the LSA is added to the link state database and\n   flooded out the appropriate\
    \ interfaces.  See Section 13.2 for details\n   concerning the installation of\
    \ the LSA into the link state database.\n   See Section 13.3 for details concerning\
    \ the flooding of newly\n   originated LSAs.\n   The ten events that can cause\
    \ a new instance of an LSA to be\n   originated are:\n   (1) The LS age field\
    \ of one of the router's self-originated LSAs\n       reaches the value LSRefreshTime.\
    \ In this case, a new\n       instance of the LSA is originated, even though the\
    \ contents\n       of the LSA (apart from the LSA header) will be the same.\n\
    \       This guarantees periodic originations of all LSAs.  This\n       periodic\
    \ updating of LSAs adds robustness to the link state\n       algorithm.  LSAs\
    \ that solely describe unreachable\n       destinations should not be refreshed,\
    \ but should instead be\n       flushed from the routing domain (see Section 14.1).\n\
    \   When whatever is being described by an LSA changes, a new LSA is\n   originated.\
    \  However, two instances of the same LSA may not be\n   originated within the\
    \ time period MinLSInterval.  This may require\n   that the generation of the\
    \ next instance be delayed by up to\n   MinLSInterval.  The following events may\
    \ cause the contents of an LSA\n   to change.  These events should cause new originations\
    \ if and only if\n   the contents of the new LSA would be different:\n   (2) An\
    \ interface's state changes (see Section 9.1).  This may\n       mean that it\
    \ is necessary to produce a new instance of the\n       router-LSA.\n   (3) An\
    \ attached network's Designated Router changes.  A new\n       router-LSA should\
    \ be originated.  Also, if the router itself\n       is now the Designated Router,\
    \ a new network-LSA should be\n       produced.  If the router itself is no longer\
    \ the Designated\n       Router, any network-LSA that it might have originated\
    \ for\n       the network should be flushed from the routing domain (see\n   \
    \    Section 14.1).\n   (4) One of the neighboring routers changes to/from the\
    \ FULL\n       state.  This may mean that it is necessary to produce a new\n \
    \      instance of the router-LSA.  Also, if the router is itself\n       the\
    \ Designated Router for the attached network, a new\n       network-LSA should\
    \ be produced.\n   The next four events concern area border routers only:\n  \
    \ (5) An intra-area route has been added/deleted/modified in the\n       routing\
    \ table.  This may cause a new instance of a summary-\n       LSA (for this route)\
    \ to be originated in each attached area\n       (possibly including the backbone).\n\
    \   (6) An inter-area route has been added/deleted/modified in the\n       routing\
    \ table.  This may cause a new instance of a summary-\n       LSA (for this route)\
    \ to be originated in each attached area\n       (but NEVER for the backbone).\n\
    \   (7) The router becomes newly attached to an area.  The router\n       must\
    \ then originate summary-LSAs into the newly attached\n       area for all pertinent\
    \ intra-area and inter-area routes in\n       the router's routing table.  See\
    \ Section 12.4.3 for more\n       details.\n   (8) When the state of one of the\
    \ router's configured virtual\n       links changes, it may be necessary to originate\
    \ a new\n       router-LSA into the virtual link's Transit area (see the\n   \
    \    discussion of the router-LSA's bit V in Section 12.4.1), as\n       well\
    \ as originating a new router-LSA into the backbone.\n   The last two events concern\
    \ AS boundary routers (and former AS\n   boundary routers) only:\n   (9) An external\
    \ route gained through direct experience with an\n       external routing protocol\
    \ (like BGP) changes.  This will\n       cause an AS boundary router to originate\
    \ a new instance of\n       an AS-external-LSA.\n   (10)\n       A router ceases\
    \ to be an AS boundary router, perhaps after\n       restarting. In this situation\
    \ the router should flush all\n       AS-external-LSAs that it had previously\
    \ originated.  These\n       LSAs can be flushed via the premature aging procedure\n\
    \       specified in Section 14.1.\n   The construction of each type of LSA is\
    \ explained in detail below. In\n   general, these sections describe the contents\
    \ of the LSA body (i.e.,\n   the part coming after the 20-byte LSA header).  For\
    \ information\n   concerning the building of the LSA header, see Section 12.1.\n"
- title: 12.4.1.  Router-LSAs
  contents:
  - "12.4.1.  Router-LSAs\n   A router originates a router-LSA for each area that\
    \ it belongs to.\n   Such an LSA describes the collected states of the router's\
    \ links to\n   the area.  The LSA is flooded throughout the particular area, and\
    \ no\n   further.  The format of a router-LSA is shown in Appendix A (Section\n\
    \   A.4.2).  The first 20 bytes of the LSA consist of the generic LSA\n   header\
    \ that was discussed in Section 12.1.  router-LSAs have LS type\n   = 1.\n   A\
    \ router also indicates whether it is an area border router, or an AS\n   boundary\
    \ router, by setting the appropriate bits\n                  ....................................\n\
    \                  . 192.1.2                   Area 1 .\n                  . \
    \    +                            .\n                  .     |               \
    \             .\n                  .     | 3+---+1                    .\n    \
    \              .  N1 |--|RT1|-----+               .\n                  .     |\
    \  +---+      \\              .\n                  .     |              \\  _______N3\
    \  .\n                  .     +               \\/       \\   .  1+---+\n     \
    \             .                     * 192.1.1 *------|RT4|\n                 \
    \ .     +               /\\_______/   .   +---+\n                  .     |   \
    \           /     |       .\n                  .     | 3+---+1     /      |  \
    \     .\n                  .  N2 |--|RT2|-----+      1|       .\n            \
    \      .     |  +---+           +---+8    .         6+---+\n                 \
    \ .     |                  |RT3|----------------|RT6|\n                  .   \
    \  +                  +---+     .          +---+\n                  . 192.1.3\
    \                  |2      .   18.10.0.6|7\n                  .              \
    \            |       .            |\n                  .                   +------------+\
    \ .\n                  .                     192.1.4 (N4) .\n                \
    \  ....................................\n               Figure 15: Area 1 with\
    \ IP addresses shown\n   (bit B and bit E, respectively) in its router-LSAs. This\
    \ enables\n   paths to those types of routers to be saved in the routing table,\
    \ for\n   later processing of summary-LSAs and AS-external-LSAs.  Bit B should\n\
    \   be set whenever the router is actively attached to two or more areas,\n  \
    \ even if the router is not currently attached to the OSPF backbone\n   area.\
    \  Bit E should never be set in a router-LSA for a stub area\n   (stub areas cannot\
    \ contain AS boundary routers).\n   In addition, the router sets bit V in its\
    \ router-LSA for Area A if\n   and only if the router is the endpoint of one or\
    \ more fully adjacent\n   virtual links having Area A as their Transit area. The\
    \ setting of bit\n   V enables other routers in Area A to discover whether the\
    \ area\n   supports transit traffic (see TransitCapability in Section 6).\n  \
    \ The router-LSA then describes the router's working connections (i.e.,\n   interfaces\
    \ or links) to the area.  Each link is typed according to\n   the kind of attached\
    \ network.  Each link is also labelled with its\n   Link ID.  This Link ID gives\
    \ a name to the entity that is on the\n   other end of the link.  Table 18 summarizes\
    \ the values used for the\n   Type and Link ID fields.\n           Link type \
    \  Description       Link ID\n           __________________________________________________\n\
    \           1           Point-to-point    Neighbor Router ID\n               \
    \        link\n           2           Link to transit   Interface address of\n\
    \                       network           Designated Router\n           3    \
    \       Link to stub      IP network number\n                       network\n\
    \           4           Virtual link      Neighbor Router ID\n               \
    \    Table 18: Link descriptions in the\n                              router-LSA.\n\
    \   In addition, the Link Data field is specified for each link.  This\n   field\
    \ gives 32 bits of extra information for the link.  For links to\n   transit networks,\
    \ numbered point-to-point links and virtual links,\n   this field specifies the\
    \ IP interface address of the associated\n   router interface (this is needed\
    \ by the routing table calculation,\n   see Section 16.1.1).  For links to stub\
    \ networks, this field\n   specifies the stub network's IP address mask. For unnumbered\
    \ point-\n   to-point links, the Link Data field should be set to the unnumbered\n\
    \   interface's MIB-II [Ref8] ifIndex value.\n   Finally, the cost of using the\
    \ link for output is specified.  The\n   output cost of a link is configurable.\
    \ With the exception of links to\n   stub networks, the output cost must always\
    \ be non-zero.\n   To further describe the process of building the list of link\n\
    \   descriptions, suppose a router wishes to build a router-LSA for Area\n   A.\
    \  The router examines its collection of interface data structures.\n   For each\
    \ interface, the following steps are taken:\n   o    If the attached network does\
    \ not belong to Area A, no\n       links are added to the LSA, and the next interface\
    \ should be\n       examined.\n   o    If the state of the interface is Down,\
    \ no links are added.\n   o    If the state of the interface is Loopback, add\
    \ a Type 3\n       link (stub network) as long as this is not an interface to\
    \ an\n       unnumbered point-to-point network.  The Link ID should be set to\n\
    \       the IP interface address, the Link Data set to the\n       mask 0xffffffff\
    \ (indicating a host route), and the cost set to 0.\n   o   Otherwise, the link\
    \ descriptions added to the router-LSA\n       depend on the OSPF interface type.\
    \ Link descriptions used for\n       point-to-point interfaces are specified in\
    \ Section 12.4.1.1, for\n       virtual links in Section 12.4.1.2, for broadcast\
    \ and NBMA\n       interfaces in 12.4.1.3, and for Point-to-MultiPoint interfaces\
    \ in\n       12.4.1.4.\n   After consideration of all the router interfaces, host\
    \ links are\n   added to the router-LSA by examining the list of attached hosts\n\
    \   belonging to Area A.  A host route is represented as a Type 3 link\n   (stub\
    \ network) whose Link ID is the host's IP address, Link Data is\n   the mask of\
    \ all ones (0xffffffff), and cost the host's configured\n   cost (see Section\
    \ C.7).\n"
- title: 12.4.1.1.  Describing point-to-point interfaces
  contents:
  - "12.4.1.1.  Describing point-to-point interfaces\n   For point-to-point interfaces,\
    \ one or more link descriptions are\n   added to the router-LSA as follows:\n\
    \   o   If the neighboring router is fully adjacent, add a\n       Type 1 link\
    \ (point-to-point). The Link ID should be set to the\n       Router ID of the\
    \ neighboring router. For numbered point-to-point\n       networks, the Link Data\
    \ should specify the IP interface address.\n       For unnumbered point-to-point\
    \ networks, the Link Data field\n       should specify the interface's MIB-II\
    \ [Ref8] ifIndex value. The\n       cost should be set to the output cost of the\
    \ point-to-point\n       interface.\n   o   In addition, as long as the state\
    \ of the interface\n       is \"Point-to-Point\" (and regardless of the neighboring\
    \ router\n       state), a Type 3 link (stub network) should be added. There are\n\
    \       two forms that this stub link can take:\n   Option 1\n      Assuming that\
    \ the neighboring router's IP address is known, set\n      the Link ID of the\
    \ Type 3 link to the neighbor's IP address, the\n      Link Data to the mask 0xffffffff\
    \ (indicating a host route), and\n      the cost to the interface's configured\
    \ output cost.[15]\n   Option 2\n      If a subnet has been assigned to the point-to-point\
    \ link, set the\n      Link ID of the Type 3 link to the subnet's IP address,\
    \ the Link\n      Data to the subnet's mask, and the cost to the interface's\n\
    \      configured output cost.[16]\n"
- title: 12.4.1.2.  Describing broadcast and NBMA interfaces
  contents:
  - "12.4.1.2.  Describing broadcast and NBMA interfaces\n   For operational broadcast\
    \ and NBMA interfaces, a single link\n   description is added to the router-LSA\
    \ as follows:\n   o   If the state of the interface is Waiting, add a Type\n \
    \      3 link (stub network) with Link ID set to the IP network number\n     \
    \  of the attached network, Link Data set to the attached network's\n       address\
    \ mask, and cost equal to the interface's configured output\n       cost.\n  \
    \ o   Else, there has been a Designated Router elected for\n       the attached\
    \ network.  If the router is fully adjacent to the\n       Designated Router,\
    \ or if the router itself is Designated Router\n       and is fully adjacent to\
    \ at least one other router, add a single\n       Type 2 link (transit network)\
    \ with Link ID set to the IP\n       interface address of the attached network's\
    \ Designated Router\n       (which may be the router itself), Link Data set to\
    \ the router's\n       own IP interface address, and cost equal to the interface's\n\
    \       configured output cost.  Otherwise, add a link as if the\n       interface\
    \ state were Waiting (see above).\n"
- title: 12.4.1.3.  Describing virtual links
  contents:
  - "12.4.1.3.  Describing virtual links\n   For virtual links, a link description\
    \ is added to the router-LSA only\n   when the virtual neighbor is fully adjacent.\
    \ In this case, add a Type\n   4 link (virtual link) with Link ID set to the Router\
    \ ID of the\n   virtual neighbor, Link Data set to the IP interface address\n\
    \   associated with the virtual link and cost set to the cost calculated\n   for\
    \ the virtual link during the routing table calculation (see\n   Section 15).\n"
- title: 12.4.1.4.  Describing Point-to-MultiPoint interfaces
  contents:
  - "12.4.1.4.  Describing Point-to-MultiPoint interfaces\n   For operational Point-to-MultiPoint\
    \ interfaces, one or more link\n   descriptions are added to the router-LSA as\
    \ follows:\n   o   A single Type 3 link (stub network) is added with\n       Link\
    \ ID set to the router's own IP interface address, Link Data\n       set to the\
    \ mask 0xffffffff (indicating a host route), and cost\n       set to 0.\n   o\
    \   For each fully adjacent neighbor associated with the\n       interface, add\
    \ an additional Type 1 link (point-to-point) with\n       Link ID set to the Router\
    \ ID of the neighboring router, Link Data\n       set to the IP interface address\
    \ and cost equal to the interface's\n       configured output cost.\n"
- title: 12.4.1.5.  Examples of router-LSAs
  contents:
  - "12.4.1.5.  Examples of router-LSAs\n   Consider the router-LSAs generated by\
    \ Router RT3, as pictured in\n   Figure 6.  The area containing Router RT3 (Area\
    \ 1) has been redrawn,\n   with actual network addresses, in Figure 15.  Assume\
    \ that the last\n   byte of all of RT3's interface addresses is 3, giving it the\n\
    \   interface addresses 192.1.1.3 and 192.1.4.3, and that the other\n   routers\
    \ have similar addressing schemes.  In addition, assume that\n   all links are\
    \ functional, and that Router IDs are assigned as the\n   smallest IP interface\
    \ address.\n   RT3 originates two router-LSAs, one for Area 1 and one for the\n\
    \   backbone.  Assume that Router RT4 has been selected as the Designated\n  \
    \ router for network 192.1.1.0.  RT3's router-LSA for Area 1 is then\n   shown\
    \ below.  It indicates that RT3 has two connections to Area 1,\n   the first a\
    \ link to the transit network 192.1.1.0 and the second a\n   link to the stub\
    \ network 192.1.4.0.  Note that the transit network is\n   identified by the IP\
    \ interface of its Designated Router (i.e., the\n   Link ID = 192.1.1.4 which\
    \ is the Designated Router RT4's IP interface\n   to 192.1.1.0).  Note also that\
    \ RT3 has indicated that it is an area\n   border router.\n     ; RT3's router-LSA\
    \ for Area 1\n     LS age = 0                     ;always true on origination\n\
    \     Options = (E-bit)              ;\n     LS type = 1                    ;indicates\
    \ router-LSA\n     Link State ID = 192.1.1.3      ;RT3's Router ID\n     Advertising\
    \ Router = 192.1.1.3 ;RT3's Router ID\n     bit E = 0                      ;not\
    \ an AS boundary router\n     bit B = 1                      ;area border router\n\
    \     #links = 2\n            Link ID = 192.1.1.4     ;IP address of Desig. Rtr.\n\
    \            Link Data = 192.1.1.3   ;RT3's IP interface to net\n            Type\
    \ = 2                ;connects to transit network\n            # TOS metrics =\
    \ 0\n            metric = 1\n            Link ID = 192.1.4.0     ;IP Network number\n\
    \            Link Data = 0xffffff00  ;Network mask\n            Type = 3     \
    \           ;connects to stub network\n            # TOS metrics = 0\n       \
    \     metric = 2\n   Next RT3's router-LSA for the backbone is shown.  It indicates\
    \ that\n   RT3 has a single attachment to the backbone.  This attachment is via\n\
    \   an unnumbered point-to-point link to Router RT6.  RT3 has again\n   indicated\
    \ that it is an area border router.\n     ; RT3's router-LSA for the backbone\n\
    \     LS age = 0                     ;always true on origination\n     Options\
    \ = (E-bit)              ;\n     LS type = 1                    ;indicates router-LSA\n\
    \     Link State ID = 192.1.1.3      ;RT3's router ID\n     Advertising Router\
    \ = 192.1.1.3 ;RT3's router ID\n     bit E = 0                      ;not an AS\
    \ boundary router\n     bit B = 1                      ;area border router\n \
    \    #links = 1\n            Link ID = 18.10.0.6     ;Neighbor's Router ID\n \
    \           Link Data = 0.0.0.3     ;MIB-II ifIndex of P-P link\n            Type\
    \ = 1                ;connects to router\n            # TOS metrics = 0\n    \
    \        metric = 8\n"
- title: 12.4.2.  Network-LSAs
  contents:
  - "12.4.2.  Network-LSAs\n   A network-LSA is generated for every transit broadcast\
    \ or NBMA\n   network.  (A transit network is a network having two or more attached\n\
    \   routers).  The network-LSA describes all the routers that are\n   attached\
    \ to the network.\n   The Designated Router for the network originates the LSA.\
    \  The\n   Designated Router originates the LSA only if it is fully adjacent to\n\
    \   at least one other router on the network.  The network-LSA is flooded\n  \
    \ throughout the area that contains the transit network, and no\n   further. \
    \ The network-LSA lists those routers that are fully adjacent\n   to the Designated\
    \ Router; each fully adjacent router is identified by\n   its OSPF Router ID.\
    \ The Designated Router includes itself in this\n   list.\n   The Link State ID\
    \ for a network-LSA is the IP interface address of\n   the Designated Router.\
    \  This value, masked by the network's address\n   mask (which is also contained\
    \ in the network-LSA) yields the\n   network's IP address.\n   A router that has\
    \ formerly been the Designated Router for a network,\n   but is no longer, should\
    \ flush the network-LSA that it had previously\n   originated.  This LSA is no\
    \ longer used in the routing table\n   calculation.  It is flushed by prematurely\
    \ incrementing the LSA's age\n   to MaxAge and reflooding (see Section 14.1).\
    \ In addition, in those\n   rare cases where a router's Router ID has changed,\
    \ any network-LSAs\n   that were originated with the router's previous Router\
    \ ID must be\n   flushed. Since the router may have no idea what it's previous\
    \ Router\n   ID might have been, these network-LSAs are indicated by having their\n\
    \   Link State ID equal to one of the router's IP interface addresses and\n  \
    \ their Advertising Router equal to some value other than the router's\n   current\
    \ Router ID (see Section 13.4 for more details).\n"
- title: 12.4.2.1.  Examples of network-LSAs
  contents:
  - "12.4.2.1.  Examples of network-LSAs\n   Again consider the area configuration\
    \ in Figure 6.  Network-LSAs are\n   originated for Network N3 in Area 1, Networks\
    \ N6 and N8 in Area 2,\n   and Network N9 in Area 3.  Assuming that Router RT4\
    \ has been selected\n   as the Designated Router for Network N3, the following\
    \ network-LSA is\n   generated by RT4 on behalf of Network N3 (see Figure 15 for\
    \ the\n   address assignments):\n     ; Network-LSA for Network N3\n     LS age\
    \ = 0                     ;always true on origination\n     Options = (E-bit)\
    \              ;\n     LS type = 2                    ;indicates network-LSA\n\
    \     Link State ID = 192.1.1.4      ;IP address of Desig. Rtr.\n     Advertising\
    \ Router = 192.1.1.4 ;RT4's Router ID\n     Network Mask = 0xffffff00\n      \
    \      Attached Router = 192.1.1.4    ;Router ID\n            Attached Router\
    \ = 192.1.1.1    ;Router ID\n            Attached Router = 192.1.1.2    ;Router\
    \ ID\n            Attached Router = 192.1.1.3    ;Router ID\n"
- title: 12.4.3.  Summary-LSAs
  contents:
  - "12.4.3.  Summary-LSAs\n   The destination described by a summary-LSA is either\
    \ an IP network,\n   an AS boundary router or a range of IP addresses.  Summary-LSAs\
    \ are\n   flooded throughout a single area only.  The destination described is\n\
    \   one that is external to the area, yet still belongs to the Autonomous\n  \
    \ System.\n   Summary-LSAs are originated by area border routers.  The precise\n\
    \   summary routes to advertise into an area are determined by examining\n   the\
    \ routing table structure (see Section 11) in accordance with the\n   algorithm\
    \ described below. Note that only intra-area routes are\n   advertised into the\
    \ backbone, while both intra-area and inter-area\n   routes are advertised into\
    \ the other areas.\n   To determine which routes to advertise into an attached\
    \ Area A, each\n   routing table entry is processed as follows.  Remember that\
    \ each\n   routing table entry describes a set of equal-cost best paths to a\n\
    \   particular destination:\n   o  Only Destination Types of network and AS boundary\
    \ router\n      are advertised in summary-LSAs.  If the routing table entry's\n\
    \      Destination Type is area border router, examine the next routing\n    \
    \  table entry.\n   o  AS external routes are never advertised in summary-LSAs.\n\
    \      If the routing table entry has Path-type of type 1 external or\n      type\
    \ 2 external, examine the next routing table entry.\n   o  Else, if the area associated\
    \ with this set of paths is\n      the Area A itself, do not generate a summary-LSA\
    \ for the\n      route.[17]\n   o  Else, if the next hops associated with this\
    \ set of paths\n      belong to Area A itself, do not generate a summary-LSA for\
    \ the\n      route.[18] This is the logical equivalent of a Distance Vector\n\
    \      protocol's split horizon logic.\n   o  Else, if the routing table cost\
    \ equals or exceeds the\n      value LSInfinity, a summary-LSA cannot be generated\
    \ for this\n      route.\n   o  Else, if the destination of this route is an AS\
    \ boundary\n      router, a summary-LSA should be originated if and only if the\n\
    \      routing table entry describes the preferred path to the AS\n      boundary\
    \ router (see Step 3 of Section 16.4).  If so, a Type 4\n      summary-LSA is\
    \ originated for the destination, with Link State ID\n      equal to the AS boundary\
    \ router's Router ID and metric equal to\n      the routing table entry's cost.\
    \ Note: these LSAs should not be\n      generated if Area A has been configured\
    \ as a stub area.\n   o  Else, the Destination type is network. If this is an\n\
    \      inter-area route, generate a Type 3 summary-LSA for the\n      destination,\
    \ with Link State ID equal to the network's address (if\n      necessary, the\
    \ Link State ID can also have one or more of the\n      network's host bits set;\
    \ see Appendix E for details) and metric\n      equal to the routing table cost.\n\
    \   o  The one remaining case is an intra-area route to a network.  This\n   \
    \   means that the network is contained in one of the router's\n      directly\
    \ attached areas.  In general, this information must be\n      condensed before\
    \ appearing in summary-LSAs.  Remember that an area\n      has a configured list\
    \ of address ranges, each range consisting of\n      an [address,mask] pair and\
    \ a status indication of either Advertise\n      or DoNotAdvertise.  At most a\
    \ single Type 3 summary-LSA is\n      originated for each range. When the range's\
    \ status indicates\n      Advertise, a Type 3 summary-LSA is generated with Link\
    \ State ID\n      equal to the range's address (if necessary, the Link State ID\
    \ can\n      also have one or more of the range's \"host\" bits set; see Appendix\n\
    \      E for details) and cost equal to the largest cost of any of the\n     \
    \ component networks. When the range's status indicates\n      DoNotAdvertise,\
    \ the Type 3 summary-LSA is suppressed and the\n      component networks remain\
    \ hidden from other areas.\n   By default, if a network is not contained in any\
    \ explicitly\n   configured address range, a Type 3 summary-LSA is generated with\
    \ Link\n   State ID equal to the network's address (if necessary, the Link State\n\
    \   ID can also have one or more of the network's \"host\" bits set; see\n   Appendix\
    \ E for details) and metric equal to the network's routing\n   table cost.\n \
    \  If an area is capable of carrying transit traffic (i.e., its\n   TransitCapability\
    \ is set to TRUE), routing information concerning\n   backbone networks should\
    \ not be condensed before being summarized\n   into the area.  Nor should the\
    \ advertisement of backbone networks\n   into transit areas be suppressed.  In\
    \ other words, the backbone's\n   configured ranges should be ignored when originating\
    \ summary-LSAs\n   into transit areas.\n   If a router advertises a summary-LSA\
    \ for a destination which then\n   becomes unreachable, the router must then flush\
    \ the LSA from the\n   routing domain by setting its age to MaxAge and reflooding\
    \ (see\n   Section 14.1).  Also, if the destination is still reachable, yet can\n\
    \   no longer be advertised according to the above procedure (e.g., it is\n  \
    \ now an inter-area route, when it used to be an intra-area route\n   associated\
    \ with some non-backbone area; it would thus no longer be\n   advertisable to\
    \ the backbone), the LSA should also be flushed from\n   the routing domain.\n"
- title: 12.4.3.1.  Originating summary-LSAs into stub areas
  contents:
  - "12.4.3.1.  Originating summary-LSAs into stub areas\n   The algorithm in Section\
    \ 12.4.3 is optional when Area A is an OSPF\n   stub area. Area border routers\
    \ connecting to a stub area can\n   originate summary-LSAs into the area according\
    \ to the Section\n   12.4.3's algorithm, or can choose to originate only a subset\
    \ of the\n   summary-LSAs, possibly under configuration control.  The fewer LSAs\n\
    \   originated, the smaller the stub area's link state database, further\n   reducing\
    \ the demands on its routers' resources. However, omitting\n   LSAs may also lead\
    \ to sub-optimal inter-area routing, although\n   routing will continue to function.\n\
    \   As specified in Section 12.4.3, Type 4 summary-LSAs (ASBR-summary-\n   LSAs)\
    \ are never originated into stub areas.\n   In a stub area, instead of importing\
    \ external routes each area border\n   router originates a \"default summary-LSA\"\
    \ into the area. The Link\n   State ID for the default summary-LSA is set to DefaultDestination,\n\
    \   and the metric set to the (per-area) configurable parameter\n   StubDefaultCost.\
    \  Note that StubDefaultCost need not be configured\n   identically in all of\
    \ the stub area's area border routers.\n"
- title: 12.4.3.2.  Examples of summary-LSAs
  contents:
  - "12.4.3.2.  Examples of summary-LSAs\n   Consider again the area configuration\
    \ in Figure 6.  Routers RT3, RT4,\n   RT7, RT10 and RT11 are all area border routers,\
    \ and therefore are\n   originating summary-LSAs.  Consider in particular Router\
    \ RT4.  Its\n   routing table was calculated as the example in Section 11.3. RT4\n\
    \   originates summary-LSAs into both the backbone and Area 1.  Into the\n   backbone,\
    \ Router RT4 originates separate LSAs for each of the\n   networks N1-N4.  Into\
    \ Area 1, Router RT4 originates separate LSAs for\n   networks N6-N8 and the AS\
    \ boundary routers RT5,RT7.  It also\n   condenses host routes Ia and Ib into\
    \ a single summary-LSA.  Finally,\n   the routes to networks N9,N10,N11 and Host\
    \ H1 are advertised by a\n   single summary-LSA.  This condensation was originally\
    \ performed by\n   the router RT11.\n   These LSAs are illustrated graphically\
    \ in Figures 7 and 8.  Two of\n   the summary-LSAs originated by Router RT4 follow.\
    \  The actual IP\n   addresses for the networks and routers in question have been\
    \ assigned\n   in Figure 15.\n     ; Summary-LSA for Network N1,\n     ; originated\
    \ by Router RT4 into the backbone\n     LS age = 0                  ;always true\
    \ on origination\n     Options = (E-bit)           ;\n     LS type = 3       \
    \          ;Type 3 summary-LSA\n     Link State ID = 192.1.2.0   ;N1's IP network\
    \ number\n     Advertising Router = 192.1.1.4       ;RT4's ID\n     metric = 4\n\
    \     ; Summary-LSA for AS boundary router RT7\n     ; originated by Router RT4\
    \ into Area 1\n     LS age = 0                  ;always true on origination\n\
    \     Options = (E-bit)           ;\n     LS type = 4                 ;Type 4\
    \ summary-LSA\n     Link State ID = Router RT7's ID\n     Advertising Router =\
    \ 192.1.1.4       ;RT4's ID\n     metric = 14\n"
- title: 12.4.4.  AS-external-LSAs
  contents:
  - "12.4.4.  AS-external-LSAs\n   AS-external-LSAs describe routes to destinations\
    \ external to the\n   Autonomous System.  Most AS-external-LSAs describe routes\
    \ to specific\n   external destinations; in these cases the LSA's Link State ID\
    \ is set\n   to the destination network's IP address (if necessary, the Link State\n\
    \   ID can also have one or more of the network's \"host\" bits set; see\n   Appendix\
    \ E for details).  However, a default route for the Autonomous\n   System can\
    \ be described in an AS-external-LSA by setting the LSA's\n   Link State ID to\
    \ DefaultDestination (0.0.0.0).  AS-external-LSAs are\n   originated by AS boundary\
    \ routers.  An AS boundary router originates\n   a single AS-external-LSA for\
    \ each external route that it has learned,\n   either through another routing\
    \ protocol (such as BGP), or through\n   configuration information.\n   AS-external-LSAs\
    \ are the only type of LSAs that are flooded\n   throughout the entire Autonomous\
    \ System; all other types of LSAs are\n   specific to a single area.  However,\
    \ AS-external-LSAs are not flooded\n   into/throughout stub areas (see Section\
    \ 3.6).  This enables a\n   reduction in link state database size for routers\
    \ internal to stub\n   areas.\n   The metric that is advertised for an external\
    \ route can be one of two\n   types.  Type 1 metrics are comparable to the link\
    \ state metric.  Type\n   2 metrics are assumed to be larger than the cost of\
    \ any intra-AS\n   path.\n   If a router advertises an AS-external-LSA for a destination\
    \ which\n   then becomes unreachable, the router must then flush the LSA from\
    \ the\n   routing domain by setting its age to MaxAge and reflooding (see\n  \
    \ Section 14.1).\n"
- title: 12.4.4.1.  Examples of AS-external-LSAs
  contents:
  - "12.4.4.1.  Examples of AS-external-LSAs\n   Consider once again the AS pictured\
    \ in Figure 6.  There are two AS\n   boundary routers: RT5 and RT7.  Router RT5\
    \ originates three AS-\n   external-LSAs, for networks N12-N14.  Router RT7 originates\
    \ two AS-\n   external-LSAs, for networks N12 and N15.  Assume that RT7 has learned\n\
    \   its route to N12 via BGP, and that it wishes to advertise a Type 2\n   metric\
    \ to the AS.  RT7 would then originate the following LSA for\n   N12:\n     ;\
    \ AS-external-LSA for Network N12,\n     ; originated by Router RT7\n     LS age\
    \ = 0                  ;always true on origination\n     Options = (E-bit)   \
    \        ;\n     LS type = 5                 ;AS-external-LSA\n     Link State\
    \ ID = N12's IP network number\n     Advertising Router = Router RT7's ID\n  \
    \   bit E = 1                   ;Type 2 metric\n     metric = 2\n     Forwarding\
    \ address = 0.0.0.0\n   In the above example, the forwarding address field has\
    \ been set to\n   0.0.0.0, indicating that packets for the external destination\
    \ should\n   be forwarded to the advertising OSPF router (RT7). This is not always\n\
    \   desirable.  Consider the example pictured in Figure 16.  There are\n   three\
    \ OSPF routers (RTA, RTB and RTC) connected to a common network.\n   Only one\
    \ of these routers, RTA, is exchanging BGP information with\n   the non-OSPF router\
    \ RTX.  RTA must then originate AS- external-LSAs\n   for those destinations it\
    \ has learned from RTX.  By using the AS-\n   external-LSA's forwarding address\
    \ field, RTA can specify that packets\n   for these destinations be forwarded\
    \ directly to RTX.  Without this\n   feature, Routers RTB and RTC would take an\
    \ extra hop to get to these\n   destinations.\n   Note that when the forwarding\
    \ address field is non-zero, it should\n   point to a router belonging to another\
    \ Autonomous System.\n   A forwarding address can also be specified for the default\
    \ route. For\n   example, in figure 16 RTA may want to specify that all externally-\n\
    \   destined packets should by default be forwarded to its BGP peer RTX.\n   The\
    \ resulting AS-external-LSA is pictured below.  Note that the Link\n   State ID\
    \ is set to DefaultDestination.\n     ; Default route, originated by Router RTA\n\
    \     ; Packets forwarded through RTX\n     LS age = 0                  ;always\
    \ true on origination\n     Options = (E-bit)           ;\n     LS type = 5  \
    \               ;AS-external-LSA\n     Link State ID = DefaultDestination  ; default\
    \ route\n     Advertising Router = Router RTA's ID\n     bit E = 1           \
    \        ;Type 2 metric\n     metric = 1\n     Forwarding address = RTX's IP address\n\
    \   In figure 16, suppose instead that both RTA and RTB exchange BGP\n   information\
    \ with RTX.  In this case, RTA and RTB would originate the\n   same set of AS-external-LSAs.\
    \  These LSAs, if they specify the same\n   metric, would be functionally equivalent\
    \ since they would specify the\n   same destination and forwarding address (RTX).\
    \ This leads to a clear\n   duplication of effort.  If only one of RTA or RTB\
    \ originated the set\n   of AS-external-LSAs, the routing would remain the same,\
    \ and the size\n   of the link state database would decrease.  However, it must\
    \ be\n   unambiguously defined as to which router originates the LSAs\n   (otherwise\
    \ neither may, or the identity of the originator may\n   oscillate). The following\
    \ rule is thereby established: if two\n   routers, both reachable from one another,\
    \ originate functionally\n   equivalent AS-external-LSAs (i.e., same destination,\
    \ cost and non-\n   zero forwarding address), then the LSA originated by the router\n\
    \   having the highest OSPF Router ID is used.  The router having the\n   lower\
    \ OSPF Router ID can then flush its LSA.  Flushing an LSA is\n   discussed in\
    \ Section 14.1.\n"
- title: 13.  The Flooding Procedure
  contents:
  - "13.  The Flooding Procedure\n   Link State Update packets provide the mechanism\
    \ for flooding LSAs.  A\n   Link State Update packet may contain several distinct\
    \ LSAs, and\n   floods each LSA one hop further from its point of origination.\
    \  To\n   make the flooding procedure reliable, each LSA must be acknowledged\n\
    \   separately.  Acknowledgments are transmitted in Link State\n   Acknowledgment\
    \ packets.  Many separate acknowledgments can also be\n   grouped together into\
    \ a single packet.\n   The flooding procedure starts when a Link State Update\
    \ packet has\n   been received.  Many consistency checks have been made on the\n\
    \   received packet before being handed to the flooding procedure (see\n   Section\
    \ 8.2).  In particular, the Link State Update packet has been\n   associated with\
    \ a particular neighbor, and a particular area.  If the\n   neighbor is in a lesser\
    \ state than Exchange, the packet should be\n   dropped without further processing.\n\
    \                                +\n                                |\n      \
    \                +---+.....|.BGP\n                      |RTA|-----|.....+---+\n\
    \                      +---+     |-----|RTX|\n                               \
    \ |     +---+\n                      +---+     |\n                      |RTB|-----|\n\
    \                      +---+     |\n                                |\n      \
    \                +---+     |\n                      |RTC|-----|\n            \
    \          +---+     |\n                                |\n                  \
    \              +\n                 Figure 16: Forwarding address example\n   All\
    \ types of LSAs, other than AS-external-LSAs, are associated with a\n   specific\
    \ area.  However, LSAs do not contain an area field.  An LSA's\n   area must be\
    \ deduced from the Link State Update packet header.\n   For each LSA contained\
    \ in a Link State Update packet, the following\n   steps are taken:\n    (1) Validate\
    \ the LSA's LS checksum.  If the checksum turns out to be\n        invalid, discard\
    \ the LSA and get the next one from the Link\n        State Update packet.\n \
    \   (2) Examine the LSA's LS type.  If the LS type is unknown, discard\n     \
    \   the LSA and get the next one from the Link State Update Packet.\n        This\
    \ specification defines LS types 1-5 (see Section 4.3).\n    (3) Else if this\
    \ is an AS-external-LSA (LS type = 5), and the area\n        has been configured\
    \ as a stub area, discard the LSA and get the\n        next one from the Link\
    \ State Update Packet.  AS-external-LSAs\n        are not flooded into/throughout\
    \ stub areas (see Section 3.6).\n    (4) Else if the LSA's LS age is equal to\
    \ MaxAge, and there is\n        currently no instance of the LSA in the router's\
    \ link state\n        database, then take the following actions:\n        (a)\
    \ Acknowledge the receipt of the LSA by sending a Link State\n            Acknowledgment\
    \ packet back to the sending neighbor (see\n            Section 13.5).\n     \
    \   (b) Purge all outstanding requests for equal or previous\n            instances\
    \ of the LSA from the sending neighbor's Link State\n            Request list\
    \ (see Section 10).\n        (c) If the sending neighbor is in state Exchange\
    \ or in state\n            Loading, then install the MaxAge LSA in the link state\n\
    \            database.  Otherwise, simply discard the LSA.  In either\n      \
    \      case, examine the next LSA (if any) listed in the Link State\n        \
    \    Update packet.\n    (5) Otherwise, find the instance of this LSA that is\
    \ currently\n        contained in the router's link state database.  If there\
    \ is no\n        database copy, or the received LSA is more recent than the\n\
    \        database copy (see Section 13.1 below for the determination of\n    \
    \    which LSA is more recent) the following steps must be performed:\n      \
    \  (a) If there is already a database copy, and if the database\n            copy\
    \ was installed less than MinLSArrival seconds ago,\n            discard the new\
    \ LSA (without acknowledging it) and examine\n            the next LSA (if any)\
    \ listed in the Link State Update\n            packet.\n        (b) Otherwise\
    \ immediately flood the new LSA out some subset of\n            the router's interfaces\
    \ (see Section 13.3).  In some cases\n            (e.g., the state of the receiving\
    \ interface is DR and the\n            LSA was received from a router other than\
    \ the Backup DR) the\n            LSA will be flooded back out the receiving interface.\
    \  This\n            occurrence should be noted for later use by the\n       \
    \     acknowledgment process (Section 13.5).\n        (c) Remove the current database\
    \ copy from all neighbors' Link\n            state retransmission lists.\n   \
    \     (d) Install the new LSA in the link state database (replacing\n        \
    \    the current database copy).  This may cause the routing\n            table\
    \ calculation to be scheduled.  In addition, timestamp\n            the new LSA\
    \ with the current time (i.e., the time it was\n            received).  The flooding\
    \ procedure cannot overwrite the\n            newly installed LSA until MinLSArrival\
    \ seconds have elapsed.\n            The LSA installation process is discussed\
    \ further in Section\n            13.2.\n        (e) Possibly acknowledge the\
    \ receipt of the LSA by sending a\n            Link State Acknowledgment packet\
    \ back out the receiving\n            interface.  This is explained below in Section\
    \ 13.5.\n        (f) If this new LSA indicates that it was originated by the\n\
    \            receiving router itself (i.e., is considered a self-\n          \
    \  originated LSA), the router must take special action, either\n            updating\
    \ the LSA or in some cases flushing it from the\n            routing domain. For\
    \ a description of how self-originated\n            LSAs are detected and subsequently\
    \ handled, see Section\n            13.4.\n    (6) Else, if there is an instance\
    \ of the LSA on the sending\n        neighbor's Link state request list, an error\
    \ has occurred in the\n        Database Exchange process.  In this case, restart\
    \ the Database\n        Exchange process by generating the neighbor event BadLSReq\
    \ for\n        the sending neighbor and stop processing the Link State Update\n\
    \        packet.\n    (7) Else, if the received LSA is the same instance as the\
    \ database\n        copy (i.e., neither one is more recent) the following two\
    \ steps\n        should be performed:\n        (a) If the LSA is listed in the\
    \ Link state retransmission list\n            for the receiving adjacency, the\
    \ router itself is expecting\n            an acknowledgment for this LSA.  The\
    \ router should treat the\n            received LSA as an acknowledgment by removing\
    \ the LSA from\n            the Link state retransmission list.  This is termed\
    \ an\n            \"implied acknowledgment\".  Its occurrence should be noted\n\
    \            for later use by the acknowledgment process (Section 13.5).\n   \
    \     (b) Possibly acknowledge the receipt of the LSA by sending a\n         \
    \   Link State Acknowledgment packet back out the receiving\n            interface.\
    \  This is explained below in Section 13.5.\n    (8) Else, the database copy is\
    \ more recent.  If the database copy\n        has LS age equal to MaxAge and LS\
    \ sequence number equal to\n        MaxSequenceNumber, simply discard the received\
    \ LSA without\n        acknowledging it. (In this case, the LSA's LS sequence\
    \ number is\n        wrapping, and the MaxSequenceNumber LSA must be completely\n\
    \        flushed before any new LSA instance can be introduced).\n        Otherwise,\
    \ send the database copy back to the sending neighbor,\n        encapsulated within\
    \ a Link State Update Packet. The Link State\n        Update Packet should be\
    \ unicast to the neighbor. In so doing, do\n        not put the database copy\
    \ of the LSA on the neighbor's link\n        state retransmission list, and do\
    \ not acknowledge the received\n        (less recent) LSA instance.\n"
- title: 13.1.  Determining which LSA is newer
  contents:
  - "13.1.  Determining which LSA is newer\n   When a router encounters two instances\
    \ of an LSA, it must determine\n   which is more recent.  This occurred above\
    \ when comparing a received\n   LSA to its database copy. This comparison must\
    \ also be done during\n   the Database Exchange procedure which occurs during\
    \ adjacency bring-\n   up.\n   An LSA is identified by its LS type, Link State\
    \ ID and Advertising\n   Router.  For two instances of the same LSA, the LS sequence\
    \ number,\n   LS age, and LS checksum fields are used to determine which instance\n\
    \   is more recent:\n   o   The LSA having the newer LS sequence number is more\
    \ recent.\n       See Section 12.1.6 for an explanation of the LS sequence number\n\
    \       space.  If both instances have the same LS sequence number, then:\n  \
    \ o   If the two instances have different LS checksums, then the\n       instance\
    \ having the larger LS checksum (when considered as a 16-\n       bit unsigned\
    \ integer) is considered more recent.\n   o   Else, if only one of the instances\
    \ has its LS age field set\n       to MaxAge, the instance of age MaxAge is considered\
    \ to be more\n       recent.\n   o   Else, if the LS age fields of the two instances\
    \ differ by\n       more than MaxAgeDiff, the instance having the smaller (younger)\n\
    \       LS age is considered to be more recent.\n   o   Else, the two instances\
    \ are considered to be identical.\n"
- title: 13.2.  Installing LSAs in the database
  contents:
  - "13.2.  Installing LSAs in the database\n   Installing a new LSA in the database,\
    \ either as the result of\n   flooding or a newly self-originated LSA, may cause\
    \ the OSPF routing\n   table structure to be recalculated.  The contents of the\
    \ new LSA\n   should be compared to the old instance, if present.  If there is\
    \ no\n   difference, there is no need to recalculate the routing table. When\n\
    \   comparing an LSA to its previous instance, the following are all\n   considered\
    \ to be differences in contents:\n   o   The LSA's Options field has changed.\n\
    \   o   One of the LSA instances has LS age set to MaxAge, and\n       the other\
    \ does not.\n   o   The length field in the LSA header has changed.\n   o   The\
    \ body of the LSA (i.e., anything outside the 20-byte\n       LSA header) has\
    \ changed. Note that this excludes changes in LS\n       Sequence Number and LS\
    \ Checksum.\n   If the contents are different, the following pieces of the routing\n\
    \   table must be recalculated, depending on the new LSA's LS type field:\n  \
    \ Router-LSAs and network-LSAs\n      The entire routing table must be recalculated,\
    \ starting with the\n      shortest path calculations for each area (not just\
    \ the area whose\n      link-state database has changed).  The reason that the\
    \ shortest\n      path calculation cannot be restricted to the single changed\
    \ area\n      has to do with the fact that AS boundary routers may belong to\n\
    \      multiple areas.  A change in the area currently providing the best\n  \
    \    route may force the router to use an intra-area route provided by\n     \
    \ a different area.[19]\n   Summary-LSAs\n      The best route to the destination\
    \ described by the summary-LSA\n      must be recalculated (see Section 16.5).\
    \  If this destination is\n      an AS boundary router, it may also be necessary\
    \ to re-examine all\n      the AS-external-LSAs.\n   AS-external-LSAs\n      The\
    \ best route to the destination described by the AS-external-LSA\n      must be\
    \ recalculated (see Section 16.6).\n      Also, any old instance of the LSA must\
    \ be removed from the\n      database when the new LSA is installed.  This old\
    \ instance must\n      also be removed from all neighbors' Link state retransmission\n\
    \      lists (see Section 10).\n"
- title: 13.3.  Next step in the flooding procedure
  contents:
  - "13.3.  Next step in the flooding procedure\n   When a new (and more recent) LSA\
    \ has been received, it must be\n   flooded out some set of the router's interfaces.\
    \  This section\n   describes the second part of flooding procedure (the first\
    \ part being\n   the processing that occurred in Section 13), namely, selecting\
    \ the\n   outgoing interfaces and adding the LSA to the appropriate neighbors'\n\
    \   Link state retransmission lists.  Also included in this part of the\n   flooding\
    \ procedure is the maintenance of the neighbors' Link state\n   request lists.\n\
    \   This section is equally applicable to the flooding of an LSA that the\n  \
    \ router itself has just originated (see Section 12.4).\n   For these LSAs, this\
    \ section provides the entirety of the flooding\n   procedure (i.e., the processing\
    \ of Section 13 is not performed,\n   since, for example, the LSA has not been\
    \ received from a neighbor and\n   therefore does not need to be acknowledged).\n\
    \   Depending upon the LSA's LS type, the LSA can be flooded out only\n   certain\
    \ interfaces.  These interfaces, defined by the following, are\n   called the\
    \ eligible interfaces:\n   AS-external-LSAs (LS Type = 5)\n      AS-external-LSAs\
    \ are flooded throughout the entire AS, with the\n      exception of stub areas\
    \ (see Section 3.6).  The eligible\n      interfaces are all the router's interfaces,\
    \ excluding virtual\n      links and those interfaces attaching to stub areas.\n\
    \   All other LS types\n      All other types are specific to a single area (Area\
    \ A).  The\n      eligible interfaces are all those interfaces attaching to the\
    \ Area\n      A.  If Area A is the backbone, this includes all the virtual\n \
    \     links.\n   Link state databases must remain synchronized over all adjacencies\n\
    \   associated with the above eligible interfaces.  This is accomplished\n   by\
    \ executing the following steps on each eligible interface.  It\n   should be\
    \ noted that this procedure may decide not to flood an LSA\n   out a particular\
    \ interface, if there is a high probability that the\n   attached neighbors have\
    \ already received the LSA.  However, in these\n   cases the flooding procedure\
    \ must be absolutely sure that the\n   neighbors eventually do receive the LSA,\
    \ so the LSA is still added to\n   each adjacency's Link state retransmission\
    \ list.  For each eligible\n   interface:\n   (1) Each of the neighbors attached\
    \ to this interface are\n       examined, to determine whether they must receive\
    \ the new\n       LSA.  The following steps are executed for each neighbor:\n\
    \       (a) If the neighbor is in a lesser state than Exchange, it\n         \
    \  does not participate in flooding, and the next neighbor\n           should\
    \ be examined.\n       (b) Else, if the adjacency is not yet full (neighbor state\n\
    \           is Exchange or Loading), examine the Link state request\n        \
    \   list associated with this adjacency.  If there is an\n           instance\
    \ of the new LSA on the list, it indicates that\n           the neighboring router\
    \ has an instance of the LSA\n           already.  Compare the new LSA to the\
    \ neighbor's copy:\n           o   If the new LSA is less recent, then examine\
    \ the next\n               neighbor.\n           o   If the two copies are the\
    \ same instance, then delete\n               the LSA from the Link state request\
    \ list, and\n               examine the next neighbor.[20]\n           o   Else,\
    \ the new LSA is more recent.  Delete the LSA\n               from the Link state\
    \ request list.\n       (c) If the new LSA was received from this neighbor, examine\n\
    \           the next neighbor.\n       (d) At this point we are not positive that\
    \ the neighbor has\n           an up-to-date instance of this new LSA.  Add the\
    \ new LSA\n           to the Link state retransmission list for the adjacency.\n\
    \           This ensures that the flooding procedure is reliable;\n          \
    \ the LSA will be retransmitted at intervals until an\n           acknowledgment\
    \ is seen from the neighbor.\n   (2) The router must now decide whether to flood\
    \ the new LSA out\n       this interface.  If in the previous step, the LSA was\
    \ NOT\n       added to any of the Link state retransmission lists, there\n   \
    \    is no need to flood the LSA out the interface and the next\n       interface\
    \ should be examined.\n   (3) If the new LSA was received on this interface, and\
    \ it was\n       received from either the Designated Router or the Backup\n  \
    \     Designated Router, chances are that all the neighbors have\n       received\
    \ the LSA already.  Therefore, examine the next\n       interface.\n   (4) If\
    \ the new LSA was received on this interface, and the\n       interface state\
    \ is Backup (i.e., the router itself is the\n       Backup Designated Router),\
    \ examine the next interface.  The\n       Designated Router will do the flooding\
    \ on this interface.\n       However, if the Designated Router fails the router\
    \ (i.e.,\n       the Backup Designated Router) will end up retransmitting the\n\
    \       updates.\n   (5) If this step is reached, the LSA must be flooded out\
    \ the\n       interface.  Send a Link State Update packet (including the\n   \
    \    new LSA as contents) out the interface.  The LSA's LS age\n       must be\
    \ incremented by InfTransDelay (which must be > 0)\n       when it is copied into\
    \ the outgoing Link State Update packet\n       (until the LS age field reaches\
    \ the maximum value of\n       MaxAge).\n       On broadcast networks, the Link\
    \ State Update packets are\n       multicast.  The destination IP address specified\
    \ for the\n       Link State Update Packet depends on the state of the\n     \
    \  interface.  If the interface state is DR or Backup, the\n       address AllSPFRouters\
    \ should be used.  Otherwise, the\n       address AllDRouters should be used.\n\
    \       On non-broadcast networks, separate Link State Update\n       packets\
    \ must be sent, as unicasts, to each adjacent neighbor\n       (i.e., those in\
    \ state Exchange or greater).  The destination\n       IP addresses for these\
    \ packets are the neighbors' IP\n       addresses.\n"
- title: 13.4.  Receiving self-originated LSAs
  contents:
  - "13.4.  Receiving self-originated LSAs\n   It is a common occurrence for a router\
    \ to receive self-originated\n   LSAs via the flooding procedure. A self-originated\
    \ LSA is detected\n   when either 1) the LSA's Advertising Router is equal to\
    \ the router's\n   own Router ID or 2) the LSA is a network-LSA and its Link State\
    \ ID is\n   equal to one of the router's own IP interface addresses.\n   However,\
    \ if the received self-originated LSA is newer than the last\n   instance that\
    \ the router actually originated, the router must take\n   special action.  The\
    \ reception of such an LSA indicates that there\n   are LSAs in the routing domain\
    \ that were originated by the router\n   before the last time it was restarted.\
    \  In most cases, the router\n   must then advance the LSA's LS sequence number\
    \ one past the received\n   LS sequence number, and originate a new instance of\
    \ the LSA.\n   It may be the case the router no longer wishes to originate the\n\
    \   received LSA. Possible examples include: 1) the LSA is a summary-LSA\n   or\
    \ AS-external-LSA and the router no longer has an (advertisable)\n   route to\
    \ the destination, 2) the LSA is a network-LSA but the router\n   is no longer\
    \ Designated Router for the network or 3) the LSA is a\n   network-LSA whose Link\
    \ State ID is one of the router's own IP\n   interface addresses but whose Advertising\
    \ Router is not equal to the\n   router's own Router ID (this latter case should\
    \ be rare, and it\n   indicates that the router's Router ID has changed since\
    \ originating\n   the LSA).  In all these cases, instead of updating the LSA,\
    \ the LSA\n   should be flushed from the routing domain by incrementing the\n\
    \   received LSA's LS age to MaxAge and reflooding (see Section 14.1).\n"
- title: 13.5.  Sending Link State Acknowledgment packets
  contents:
  - "13.5.  Sending Link State Acknowledgment packets\n   Each newly received LSA\
    \ must be acknowledged.  This is usually done\n   by sending Link State Acknowledgment\
    \ packets.  However,\n   acknowledgments can also be accomplished implicitly by\
    \ sending Link\n   State Update packets (see step 7a of Section 13).\n   Many\
    \ acknowledgments may be grouped together into a single Link State\n   Acknowledgment\
    \ packet.  Such a packet is sent back out the interface\n   which received the\
    \ LSAs.  The packet can be sent in one of two ways:\n   delayed and sent on an\
    \ interval timer, or sent directly (as a\n   unicast) to a particular neighbor.\
    \  The particular acknowledgment\n   strategy used depends on the circumstances\
    \ surrounding the receipt of\n   the LSA.\n   Sending delayed acknowledgments\
    \ accomplishes several things: 1) it\n   facilitates the packaging of multiple\
    \ acknowledgments in a single\n   Link State Acknowledgment packet, 2) it enables\
    \ a single Link State\n   Acknowledgment packet to indicate acknowledgments to\
    \ several\n   neighbors at once (through multicasting) and 3) it randomizes the\n\
    \   Link State Acknowledgment packets sent by the various routers\n   attached\
    \ to a common network.  The fixed interval between a router's\n   delayed transmissions\
    \ must be short (less than RxmtInterval) or\n   needless retransmissions will\
    \ ensue.\n   Direct acknowledgments are sent to a particular neighbor in response\n\
    \   to the receipt of duplicate LSAs.  These acknowledgments are sent as\n   unicasts,\
    \ and are sent immediately when the duplicate is received.\n   The precise procedure\
    \ for sending Link State Acknowledgment packets\n   is described in Table 19.\
    \  The circumstances surrounding the receipt\n   of the LSA are listed in the\
    \ left column.  The acknowledgment action\n   then taken is listed in one of the\
    \ two right columns.  This action\n   depends on the state of the concerned interface;\
    \ interfaces in state\n   Backup behave differently from interfaces in all other\
    \ states.\n   Delayed acknowledgments must be delivered to all adjacent routers\n\
    \   associated with the interface.  On broadcast networks, this is\n   accomplished\
    \ by sending the delayed Link State Acknowledgment packets\n   as multicasts.\
    \  The Destination IP address used depends on the state\n   of the interface.\
    \  If the interface state is DR or Backup, the\n   destination AllSPFRouters is\
    \ used.  In all other states, the\n   destination AllDRouters is used.  On non-broadcast\
    \ networks, delayed\n   Link State Acknowledgment packets must be unicast separately\
    \ over\n   each adjacency (i.e., neighbor whose state is >= Exchange).\n     \
    \                               Action taken in state\n    Circumstances     \
    \     Backup                All other states\n    _______________________________________________________________\n\
    \    LSA  has               No  acknowledgment    No  acknowledgment\n    been\
    \  flooded back     sent.                 sent.\n    out receiving  in-\n    terface\
    \  (see Sec-\n    tion 13, step 5b).\n    _______________________________________________________________\n\
    \    LSA   is               Delayed acknowledg-   Delayed       ack-\n    more\
    \  recent  than     ment sent if adver-   nowledgment sent.\n    database copy,\
    \ but     tisement   received\n    was   not  flooded     from    Designated\n\
    \    back out receiving     Router,  otherwise\n    interface              do\
    \ nothing\n    _______________________________________________________________\n\
    \    LSA is a               Delayed acknowledg-   No  acknowledgment\n    duplicate,\
    \ and was     ment sent if adver-   sent.\n    treated as an  im-     tisement\
    \   received\n    plied  acknowledg-     from    Designated\n    ment (see  Section\
    \     Router,  otherwise\n    13, step 7a).          do nothing\n    _______________________________________________________________\n\
    \    LSA is a               Direct acknowledg-    Direct acknowledg-\n    duplicate,\
    \ and was     ment sent.            ment sent.\n    not treated as  an\n    implied\
    \       ack-\n    nowledgment.\n    _______________________________________________________________\n\
    \    LSA's LS               Direct acknowledg-    Direct acknowledg-\n    age\
    \ is equal to        ment sent.            ment sent.\n    MaxAge, and there is\n\
    \    no current instance\n    of the LSA\n    in the link state\n    database\
    \ (see\n    Section 13, step 4).\n             Table 19: Sending link state acknowledgments.\n\
    \   The reasoning behind sending the above packets as multicasts is best\n   explained\
    \ by an example.  Consider the network configuration depicted\n   in Figure 15.\
    \  Suppose RT4 has been elected as Designated Router, and\n   RT3 as Backup Designated\
    \ Router for the network N3.  When Router RT4\n   floods a new LSA to Network\
    \ N3, it is received by routers RT1, RT2,\n   and RT3.  These routers will not\
    \ flood the LSA back onto net N3, but\n   they still must ensure that their link-state\
    \ databases remain\n   synchronized with their adjacent neighbors.  So RT1, RT2,\
    \ and RT4 are\n   waiting to see an acknowledgment from RT3.  Likewise, RT4 and\
    \ RT3 are\n   both waiting to see acknowledgments from RT1 and RT2.  This is best\n\
    \   achieved by sending the acknowledgments as multicasts.\n   The reason that\
    \ the acknowledgment logic for Backup DRs is slightly\n   different is because\
    \ they perform differently during the flooding of\n   LSAs (see Section 13.3,\
    \ step 4).\n"
- title: 13.6.  Retransmitting LSAs
  contents:
  - "13.6.  Retransmitting LSAs\n   LSAs flooded out an adjacency are placed on the\
    \ adjacency's Link\n   state retransmission list.  In order to ensure that flooding\
    \ is\n   reliable, these LSAs are retransmitted until they are acknowledged.\n\
    \   The length of time between retransmissions is a configurable per-\n   interface\
    \ value, RxmtInterval.  If this is set too low for an\n   interface, needless\
    \ retransmissions will ensue.  If the value is set\n   too high, the speed of\
    \ the flooding, in the face of lost packets, may\n   be affected.\n   Several\
    \ retransmitted LSAs may fit into a single Link State Update\n   packet.  When\
    \ LSAs are to be retransmitted, only the number fitting\n   in a single Link State\
    \ Update packet should be sent.  Another packet\n   of retransmissions can be\
    \ sent whenever some of the LSAs are\n   acknowledged, or on the next firing of\
    \ the retransmission timer.\n   Link State Update Packets carrying retransmissions\
    \ are always sent as\n   unicasts (directly to the physical address of the neighbor).\
    \  They\n   are never sent as multicasts.  Each LSA's LS age must be incremented\n\
    \   by InfTransDelay (which must be > 0) when it is copied into the\n   outgoing\
    \ Link State Update packet (until the LS age field reaches the\n   maximum value\
    \ of MaxAge).\n   If an adjacent router goes down, retransmissions may occur until\
    \ the\n   adjacency is destroyed by OSPF's Hello Protocol.  When the adjacency\n\
    \   is destroyed, the Link state retransmission list is cleared.\n"
- title: 13.7.  Receiving link state acknowledgments
  contents:
  - "13.7.  Receiving link state acknowledgments\n   Many consistency checks have\
    \ been made on a received Link State\n   Acknowledgment packet before it is handed\
    \ to the flooding procedure.\n   In particular, it has been associated with a\
    \ particular neighbor.  If\n   this neighbor is in a lesser state than Exchange,\
    \ the Link State\n   Acknowledgment packet is discarded.\n   Otherwise, for each\
    \ acknowledgment in the Link State Acknowledgment\n   packet, the following steps\
    \ are performed:\n   o   Does the LSA acknowledged have an instance on the Link\
    \ state\n       retransmission list for the neighbor?  If not, examine the\n \
    \      next acknowledgment.  Otherwise:\n   o   If the acknowledgment is for the\
    \ same instance that is\n       contained on the list, remove the item from the\
    \ list and\n       examine the next acknowledgment.  Otherwise:\n      o   Log\
    \ the questionable acknowledgment, and examine the next\n          one.\n"
- title: 14.  Aging The Link State Database
  contents:
  - "14.  Aging The Link State Database\n   Each LSA has an LS age field.  The LS\
    \ age is expressed in seconds.\n   An LSA's LS age field is incremented while\
    \ it is contained in a\n   router's database.  Also, when copied into a Link State\
    \ Update Packet\n   for flooding out a particular interface, the LSA's LS age\
    \ is\n   incremented by InfTransDelay.\n   An LSA's LS age is never incremented\
    \ past the value MaxAge.  LSAs\n   having age MaxAge are not used in the routing\
    \ table calculation.  As\n   a router ages its link state database, an LSA's LS\
    \ age may reach\n   MaxAge.[21]  At this time, the router must attempt to flush\
    \ the LSA\n   from the routing domain.  This is done simply by reflooding the\n\
    \   MaxAge LSA just as if it was a newly originated LSA (see Section\n   13.3).\n\
    \   When creating a Database summary list for a newly forming adjacency,\n   any\
    \ MaxAge LSAs present in the link state database are added to the\n   neighbor's\
    \ Link state retransmission list instead of the neighbor's\n   Database summary\
    \ list.  See Section 10.3 for more details.\n   A MaxAge LSA must be removed immediately\
    \ from the router's link state\n   database as soon as both a) it is no longer\
    \ contained on any neighbor\n   Link state retransmission lists and b) none of\
    \ the router's neighbors\n   are in states Exchange or Loading.\n   When, in the\
    \ process of aging the link state database, an LSA's LS\n   age hits a multiple\
    \ of CheckAge, its LS checksum should be verified.\n   If the LS checksum is incorrect,\
    \ a program or memory error has been\n   detected, and at the very least the router\
    \ itself should be\n   restarted.\n"
- title: 14.1.  Premature aging of LSAs
  contents:
  - "14.1.  Premature aging of LSAs\n   An LSA can be flushed from the routing domain\
    \ by setting its LS age\n   to MaxAge and reflooding the LSA.  This procedure\
    \ follows the same\n   course as flushing an LSA whose LS age has naturally reached\
    \ the\n   value MaxAge (see Section 14).  In particular, the MaxAge LSA is\n \
    \  removed from the router's link state database as soon as a) it is no\n   longer\
    \ contained on any neighbor Link state retransmission lists and\n   b) none of\
    \ the router's neighbors are in states Exchange or Loading.\n   We call the setting\
    \ of an LSA's LS age to MaxAge \"premature aging\".\n   Premature aging is used\
    \ when it is time for a self-originated LSA's\n   sequence number field to wrap.\
    \  At this point, the current LSA\n   instance (having LS sequence number MaxSequenceNumber)\
    \ must be\n   prematurely aged and flushed from the routing domain before a new\n\
    \   instance with sequence number equal to InitialSequenceNumber can be\n   originated.\
    \  See Section 12.1.6 for more information.\n   Premature aging can also be used\
    \ when, for example, one of the\n   router's previously advertised external routes\
    \ is no longer\n   reachable.  In this circumstance, the router can flush its\
    \ AS-\n   external-LSA from the routing domain via premature aging. This\n   procedure\
    \ is preferable to the alternative, which is to originate a\n   new LSA for the\
    \ destination specifying a metric of LSInfinity.\n   Premature aging is also be\
    \ used when unexpectedly receiving self-\n   originated LSAs during the flooding\
    \ procedure (see Section 13.4).\n   A router may only prematurely age its own\
    \ self-originated LSAs.  The\n   router may not prematurely age LSAs that have\
    \ been originated by\n   other routers. An LSA is considered self- originated\
    \ when either 1)\n   the LSA's Advertising Router is equal to the router's own\
    \ Router ID\n   or 2) the LSA is a network-LSA and its Link State ID is equal\
    \ to one\n   of the router's own IP interface addresses.\n"
- title: 15.  Virtual Links
  contents:
  - "15.  Virtual Links\n   The single backbone area (Area ID = 0.0.0.0) cannot be\
    \ disconnected,\n   or some areas of the Autonomous System will become unreachable.\
    \  To\n   establish/maintain connectivity of the backbone, virtual links can be\n\
    \   configured through non-backbone areas.  Virtual links serve to\n   connect\
    \ physically separate components of the backbone.  The two\n   endpoints of a\
    \ virtual link are area border routers.  The virtual\n   link must be configured\
    \ in both routers.  The configuration\n   information in each router consists\
    \ of the other virtual endpoint\n   (the other area border router), and the non-backbone\
    \ area the two\n   routers have in common (called the Transit area).  Virtual\
    \ links\n   cannot be configured through stub areas (see Section 3.6).\n   The\
    \ virtual link is treated as if it were an unnumbered point-to-\n   point network\
    \ belonging to the backbone and joining the two area\n   border routers.  An attempt\
    \ is made to establish an adjacency over\n   the virtual link.  When this adjacency\
    \ is established, the virtual\n   link will be included in backbone router-LSAs,\
    \ and OSPF packets\n   pertaining to the backbone area will flow over the adjacency.\
    \  Such\n   an adjacency has been referred to in this document as a \"virtual\n\
    \   adjacency\".\n   In each endpoint router, the cost and viability of the virtual\
    \ link\n   is discovered by examining the routing table entry for the other\n\
    \   endpoint router.  (The entry's associated area must be the configured\n  \
    \ Transit area).  This is called the virtual link's corresponding\n   routing\
    \ table entry. The InterfaceUp event occurs for a virtual link\n   when its corresponding\
    \ routing table entry becomes reachable.\n   Conversely, the InterfaceDown event\
    \ occurs when its routing table\n   entry becomes unreachable.  In other words,\
    \ the virtual link's\n   viability is determined by the existence of an intra-area\
    \ path,\n   through the Transit area, between the two endpoints. Note that a\n\
    \   virtual link whose underlying path has cost greater than hexadecimal\n   0xffff\
    \ (the maximum size of an interface cost in a router-LSA) should\n   be considered\
    \ inoperational (i.e., treated the same as if the path\n   did not exist).\n \
    \  The other details concerning virtual links are as follows:\n   o AS-external-LSAs\
    \ are NEVER flooded over virtual adjacencies.  This\n   would be duplication of\
    \ effort, since the same AS-external-LSAs are\n   already flooded throughout the\
    \ virtual link's Transit area.  For this\n   same reason, AS-external-LSAs are\
    \ not summarized over virtual\n   adjacencies during the Database Exchange process.\n\
    \   o The cost of a virtual link is NOT configured.  It is defined to be\n   the\
    \ cost of the intra-area path between the two defining area border\n   routers.\
    \  This cost appears in the virtual link's corresponding\n   routing table entry.\
    \  When the cost of a virtual link changes, a new\n   router-LSA should be originated\
    \ for the backbone area.\n   o Just as the virtual link's cost and viability are\
    \ determined by the\n   routing table build process (through construction of the\
    \ routing\n   table entry for the other endpoint), so are the IP interface address\n\
    \   for the virtual interface and the virtual neighbor's IP address.\n   These\
    \ are used when sending OSPF protocol packets over the virtual\n   link. Note\
    \ that when one (or both) of the virtual link endpoints\n   connect to the Transit\
    \ area via an unnumbered point-to-point link, it\n   may be impossible to calculate\
    \ either the virtual interface's IP\n   address and/or the virtual neighbor's\
    \ IP address, thereby causing the\n   virtual link to fail.\n   o In each endpoint's\
    \ router-LSA for the backbone, the virtual link is\n   represented as a Type 4\
    \ link whose Link ID is set to the virtual\n   neighbor's OSPF Router ID and whose\
    \ Link Data is set to the virtual\n   interface's IP address.  See Section 12.4.1\
    \ for more information.\n   o A non-backbone area can carry transit data traffic\
    \ (i.e., is\n   considered a \"transit area\") if and only if it serves as the\
    \ Transit\n   area for one or more fully adjacent virtual links (see\n   TransitCapability\
    \ in Sections 6 and 16.1). Such an area requires\n   special treatment when summarizing\
    \ backbone networks into it (see\n   Section 12.4.3), and during the routing calculation\
    \ (see Section\n   16.3).\n   o The time between link state retransmissions, RxmtInterval,\
    \ is\n   configured for a virtual link. This should be well over the expected\n\
    \   round-trip delay between the two routers.  This may be hard to\n   estimate\
    \ for a virtual link; it is better to err on the side of\n   making it too large.\n"
- title: 16.  Calculation of the routing table
  contents:
  - "16.  Calculation of the routing table\n   This section details the OSPF routing\
    \ table calculation.  Using its\n   attached areas' link state databases as input,\
    \ a router runs the\n   following algorithm, building its routing table step by\
    \ step.  At\n   each step, the router must access individual pieces of the link\
    \ state\n   databases (e.g., a router-LSA originated by a certain router).  This\n\
    \   access is performed by the lookup function discussed in Section 12.2.\n  \
    \ The lookup process may return an LSA whose LS age is equal to MaxAge.\n   Such\
    \ an LSA should not be used in the routing table calculation, and\n   is treated\
    \ just as if the lookup process had failed.\n   The OSPF routing table's organization\
    \ is explained in Section 11.\n   Two examples of the routing table build process\
    \ are presented in\n   Sections 11.2 and 11.3.  This process can be broken into\
    \ the\n   following steps:\n   (1) The present routing table is invalidated. \
    \ The routing table is\n        built again from scratch.  The old routing table\
    \ is saved so\n        that changes in routing table entries can be identified.\n\
    \   (2) The intra-area routes are calculated by building the shortest-\n     \
    \  path tree for each attached area.  In particular, all routing\n       table\
    \ entries whose Destination Type is \"area border router\" are\n       calculated\
    \ in this step.  This step is described in two parts.\n       At first the tree\
    \ is constructed by only considering those links\n       between routers and transit\
    \ networks.  Then the stub networks\n       are incorporated into the tree.  During\
    \ the area's shortest-path\n       tree calculation, the area's TransitCapability\
    \ is also\n       calculated for later use in Step 4.\n   (3) The inter-area routes\
    \ are calculated, through examination of\n       summary-LSAs.  If the router\
    \ is attached to multiple areas\n       (i.e., it is an area border router), only\
    \ backbone summary-LSAs\n       are examined.\n   (4) In area border routers connecting\
    \ to one or more transit areas\n       (i.e, non-backbone areas whose TransitCapability\
    \ is found to be\n       TRUE), the transit areas' summary-LSAs are examined to\
    \ see\n       whether better paths exist using the transit areas than were\n \
    \      found in Steps 2-3 above.\n   (5) Routes to external destinations are calculated,\
    \ through\n       examination of AS-external-LSAs.  The locations of the AS\n\
    \       boundary routers (which originate the AS-external-LSAs) have\n       been\
    \ determined in steps 2-4.\n   Steps 2-5 are explained in further detail below.\n\
    \   Changes made to routing table entries as a result of these\n   calculations\
    \ can cause the OSPF protocol to take further actions.\n   For example, a change\
    \ to an intra-area route will cause an area\n   border router to originate new\
    \ summary-LSAs (see Section 12.4).  See\n   Section 16.7 for a complete list of\
    \ the OSPF protocol actions\n   resulting from routing table changes.\n"
- title: 16.1.  Calculating the shortest-path tree for an area
  contents:
  - "16.1.  Calculating the shortest-path tree for an area\n   This calculation yields\
    \ the set of intra-area routes associated with\n   an area (called hereafter Area\
    \ A).  A router calculates the\n   shortest-path tree using itself as the root.[22]\
    \ The formation of the\n   shortest path tree is done here in two stages.  In\
    \ the first stage,\n   only links between routers and transit networks are considered.\n\
    \   Using the Dijkstra algorithm, a tree is formed from this subset of\n   the\
    \ link state database.  In the second stage, leaves are added to\n   the tree\
    \ by considering the links to stub networks.\n   The procedure will be explained\
    \ using the graph terminology that was\n   introduced in Section 2.  The area's\
    \ link state database is\n   represented as a directed graph.  The graph's vertices\
    \ are routers,\n   transit networks and stub networks.  The first stage of the\
    \ procedure\n   concerns only the transit vertices (routers and transit networks)\
    \ and\n   their connecting links.  Throughout the shortest path calculation,\n\
    \   the following data is also associated with each transit vertex:\n   Vertex\
    \ (node) ID\n       A 32-bit number uniquely identifying the vertex.  For router\n\
    \       vertices this is the router's OSPF Router ID.  For network\n       vertices,\
    \ this is the IP address of the network's Designated\n       Router.\n   An LSA\n\
    \       Each transit vertex has an associated LSA.  For router\n       vertices,\
    \ this is a router-LSA.  For transit networks, this\n       is a network-LSA (which\
    \ is actually originated by the\n       network's Designated Router).  In any\
    \ case, the LSA's Link\n       State ID is always equal to the above Vertex ID.\n\
    \   List of next hops\n       The list of next hops for the current set of shortest\
    \ paths\n       from the root to this vertex.  There can be multiple\n       shortest\
    \ paths due to the equal-cost multipath capability.\n       Each next hop indicates\
    \ the outgoing router interface to use\n       when forwarding traffic to the\
    \ destination.  On broadcast,\n       Point-to-MultiPoint and NBMA networks, the\
    \ next hop also\n       includes the IP address of the next router (if any) in\
    \ the\n       path towards the destination.\n   Distance from root\n       The\
    \ link state cost of the current set of shortest paths\n       from the root to\
    \ the vertex.  The link state cost of a path\n       is calculated as the sum\
    \ of the costs of the path's\n       constituent links (as advertised in router-LSAs\
    \ and\n       network-LSAs).  One path is said to be \"shorter\" than\n      \
    \ another if it has a smaller link state cost.\n   The first stage of the procedure\
    \ (i.e., the Dijkstra algorithm) can\n   now be summarized as follows. At each\
    \ iteration of the algorithm,\n   there is a list of candidate vertices.  Paths\
    \ from the root to these\n   vertices have been found, but not necessarily the\
    \ shortest ones.\n   However, the paths to the candidate vertex that is closest\
    \ to the\n   root are guaranteed to be shortest; this vertex is added to the\n\
    \   shortest-path tree, removed from the candidate list, and its adjacent\n  \
    \ vertices are examined for possible addition to/modification of the\n   candidate\
    \ list.  The algorithm then iterates again.  It terminates\n   when the candidate\
    \ list becomes empty.\n   The following steps describe the algorithm in detail.\
    \  Remember that\n   we are computing the shortest path tree for Area A.  All\
    \ references\n   to link state database lookup below are from Area A's database.\n\
    \   (1) Initialize the algorithm's data structures.  Clear the list\n       of\
    \ candidate vertices.  Initialize the shortest-path tree to\n       only the root\
    \ (which is the router doing the calculation).\n       Set Area A's TransitCapability\
    \ to FALSE.\n   (2) Call the vertex just added to the tree vertex V.  Examine\n\
    \       the LSA associated with vertex V.  This is a lookup in the\n       Area\
    \ A's link state database based on the Vertex ID.  If\n       this is a router-LSA,\
    \ and bit V of the router-LSA (see\n       Section A.4.2) is set, set Area A's\
    \ TransitCapability to\n       TRUE.  In any case, each link described by the\
    \ LSA gives the\n       cost to an adjacent vertex.  For each described link,\
    \ (say\n       it joins vertex V to vertex W):\n       (a) If this is a link to\
    \ a stub network, examine the next\n           link in V's LSA.  Links to stub\
    \ networks will be\n           considered in the second stage of the shortest\
    \ path\n           calculation.\n       (b) Otherwise, W is a transit vertex (router\
    \ or transit\n           network).  Look up the vertex W's LSA (router-LSA or\n\
    \           network-LSA) in Area A's link state database.  If the\n          \
    \ LSA does not exist, or its LS age is equal to MaxAge, or\n           it does\
    \ not have a link back to vertex V, examine the\n           next link in V's LSA.[23]\n\
    \       (c) If vertex W is already on the shortest-path tree,\n           examine\
    \ the next link in the LSA.\n       (d) Calculate the link state cost D of the\
    \ resulting path\n           from the root to vertex W.  D is equal to the sum\
    \ of the\n           link state cost of the (already calculated) shortest\n  \
    \         path to vertex V and the advertised cost of the link\n           between\
    \ vertices V and W.  If D is:\n           o   Greater than the value that already\
    \ appears for\n               vertex W on the candidate list, then examine the\n\
    \               next link.\n           o   Equal to the value that appears for\
    \ vertex W on the\n               candidate list, calculate the set of next hops\
    \ that\n               result from using the advertised link.  Input to\n    \
    \           this calculation is the destination (W), and its\n               parent\
    \ (V).  This calculation is shown in Section\n               16.1.1.  This set\
    \ of hops should be added to the\n               next hop values that appear for\
    \ W on the candidate\n               list.\n           o   Less than the value\
    \ that appears for vertex W on the\n               candidate list, or if W does\
    \ not yet appear on the\n               candidate list, then set the entry for\
    \ W on the\n               candidate list to indicate a distance of D from the\n\
    \               root.  Also calculate the list of next hops that\n           \
    \    result from using the advertised link, setting the\n               next hop\
    \ values for W accordingly.  The next hop\n               calculation is described\
    \ in Section 16.1.1; it takes\n               as input the destination (W) and\
    \ its parent (V).\n   (3) If at this step the candidate list is empty, the shortest-\n\
    \       path tree (of transit vertices) has been completely built\n       and\
    \ this stage of the procedure terminates.  Otherwise,\n       choose the vertex\
    \ belonging to the candidate list that is\n       closest to the root, and add\
    \ it to the shortest-path tree\n       (removing it from the candidate list in\
    \ the process). Note\n       that when there is a choice of vertices closest to\
    \ the root,\n       network vertices must be chosen before router vertices in\n\
    \       order to necessarily find all equal-cost paths. This is\n       consistent\
    \ with the tie-breakers that were introduced in the\n       modified Dijkstra\
    \ algorithm used by OSPF's Multicast routing\n       extensions (MOSPF).\n   (4)\
    \ Possibly modify the routing table.  For those routing table\n       entries\
    \ modified, the associated area will be set to Area A,\n       the path type will\
    \ be set to intra-area, and the cost will\n       be set to the newly discovered\
    \ shortest path's calculated\n       distance.\n       If the newly added vertex\
    \ is an area border router or AS\n       boundary router, a routing table entry\
    \ is added whose\n       destination type is \"router\".  The Options field found\
    \ in\n       the associated router-LSA is copied into the routing table\n    \
    \   entry's Optional capabilities field. Call the newly added\n       vertex Router\
    \ X.  If Router X is the endpoint of one of the\n       calculating router's virtual\
    \ links, and the virtual link\n       uses Area A as Transit area:  the virtual\
    \ link is declared\n       up, the IP address of the virtual interface is set\
    \ to the IP\n       address of the outgoing interface calculated above for\n \
    \      Router X, and the virtual neighbor's IP address is set to\n       Router\
    \ X's interface address (contained in Router X's\n       router-LSA) that points\
    \ back to the root of the shortest-\n       path tree; equivalently, this is the\
    \ interface that points\n       back to Router X's parent vertex on the shortest-path\
    \ tree\n       (similar to the calculation in Section 16.1.1).\n       If the\
    \ newly added vertex is a transit network, the routing\n       table entry for\
    \ the network is located.  The entry's\n       Destination ID is the IP network\
    \ number, which can be\n       obtained by masking the Vertex ID (Link State ID)\
    \ with its\n       associated subnet mask (found in the body of the associated\n\
    \       network-LSA).  If the routing table entry already exists\n       (i.e.,\
    \ there is already an intra-area route to the\n       destination installed in\
    \ the routing table), multiple\n       vertices have mapped to the same IP network.\
    \  For example,\n       this can occur when a new Designated Router is being\n\
    \       established.  In this case, the current routing table entry\n       should\
    \ be overwritten if and only if the newly found path is\n       just as short\
    \ and the current routing table entry's Link\n       State Origin has a smaller\
    \ Link State ID than the newly\n       added vertex' LSA.\n       If there is\
    \ no routing table entry for the network (the\n       usual case), a routing table\
    \ entry for the IP network should\n       be added.  The routing table entry's\
    \ Link State Origin\n       should be set to the newly added vertex' LSA.\n  \
    \ (5) Iterate the algorithm by returning to Step 2.\n   The stub networks are\
    \ added to the tree in the procedure's second\n   stage.  In this stage, all router\
    \ vertices are again examined.  Those\n   that have been determined to be unreachable\
    \ in the above first phase\n   are discarded.  For each reachable router vertex\
    \ (call it V), the\n   associated router-LSA is found in the link state database.\
    \  Each stub\n   network link appearing in the LSA is then examined, and the following\n\
    \   steps are executed:\n   (1) Calculate the distance D of stub network from\
    \ the root.  D\n       is equal to the distance from the root to the router vertex\n\
    \       (calculated in stage 1), plus the stub network link's\n       advertised\
    \ cost.  Compare this distance to the current best\n       cost to the stub network.\
    \  This is done by looking up the\n       stub network's current routing table\
    \ entry.  If the\n       calculated distance D is larger, go on to examine the\
    \ next\n       stub network link in the LSA.\n   (2) If this step is reached,\
    \ the stub network's routing table\n       entry must be updated.  Calculate the\
    \ set of next hops that\n       would result from using the stub network link.\
    \  This\n       calculation is shown in Section 16.1.1; input to this\n      \
    \ calculation is the destination (the stub network) and the\n       parent vertex\
    \ (the router vertex).  If the distance D is the\n       same as the current routing\
    \ table cost, simply add this set\n       of next hops to the routing table entry's\
    \ list of next hops.\n       In this case, the routing table already has a Link\
    \ State\n       Origin.  If this Link State Origin is a router-LSA whose\n   \
    \    Link State ID is smaller than V's Router ID, reset the Link\n       State\
    \ Origin to V's router-LSA.\n       Otherwise D is smaller than the routing table\
    \ cost.\n       Overwrite the current routing table entry by setting the\n   \
    \    routing table entry's cost to D, and by setting the entry's\n       list\
    \ of next hops to the newly calculated set.  Set the\n       routing table entry's\
    \ Link State Origin to V's router-LSA.\n       Then go on to examine the next\
    \ stub network link.\n   For all routing table entries added/modified in the second\
    \ stage, the\n   associated area will be set to Area A and the path type will\
    \ be set to\n   intra-area.  When the list of reachable router-LSAs is exhausted,\
    \ the\n   second stage is completed.  At this time, all intra-area routes\n  \
    \ associated with Area A have been determined.\n   The specification does not\
    \ require that the above two stage method be\n   used to calculate the shortest\
    \ path tree.  However, if another\n   algorithm is used, an identical tree must\
    \ be produced.  For this\n   reason, it is important to note that links between\
    \ transit vertices\n   must be bidirectional in order to be included in the above\
    \ tree.  It\n   should also be mentioned that more efficient algorithms exist\
    \ for\n   calculating the tree; for example, the incremental SPF algorithm\n \
    \  described in [Ref1].\n"
- title: 16.1.1.  The next hop calculation
  contents:
  - "16.1.1.  The next hop calculation\n   This section explains how to calculate\
    \ the current set of next hops\n   to use for a destination.  Each next hop consists\
    \ of the outgoing\n   interface to use in forwarding packets to the destination\
    \ together\n   with the IP address of the next hop router (if any).  The next\
    \ hop\n   calculation is invoked each time a shorter path to the destination is\n\
    \   discovered.  This can happen in either stage of the shortest-path\n   tree\
    \ calculation (see Section 16.1).  In stage 1 of the shortest-path\n   tree calculation\
    \ a shorter path is found as the destination is added\n   to the candidate list,\
    \ or when the destination's entry on the\n   candidate list is modified (Step\
    \ 2d of Stage 1).  In stage 2 a\n   shorter path is discovered each time the destination's\
    \ routing table\n   entry is modified (Step 2 of Stage 2).\n   The set of next\
    \ hops to use for the destination may be recalculated\n   several times during\
    \ the shortest-path tree calculation, as shorter\n   and shorter paths are discovered.\
    \  In the end, the destination's\n   routing table entry will always reflect the\
    \ next hops resulting from\n   the absolute shortest path(s).\n   Input to the\
    \ next hop calculation is a) the destination and b) its\n   parent in the current\
    \ shortest path between the root (the calculating\n   router) and the destination.\
    \  The parent is always a transit vertex\n   (i.e., always a router or a transit\
    \ network).\n   If there is at least one intervening router in the current shortest\n\
    \   path between the destination and the root, the destination simply\n   inherits\
    \ the set of next hops from the parent.  Otherwise, there are\n   two cases. \
    \ In the first case, the parent vertex is the root (the\n   calculating router\
    \ itself).  This means that the destination is\n   either a directly connected\
    \ network or directly connected router.\n   The outgoing interface in this case\
    \ is simply the OSPF interface\n   connecting to the destination network/router.\
    \ If the destination is a\n   router which connects to the calculating router\
    \ via a Point-to-\n   MultiPoint network, the destination's next hop IP address(es)\
    \ can be\n   determined by examining the destination's router-LSA: each link\n\
    \   pointing back to the calculating router and having a Link Data field\n   belonging\
    \ to the Point-to-MultiPoint network provides an IP address\n   of the next hop\
    \ router. If the destination is a directly connected\n   network, or a router\
    \ which connects to the calculating router via a\n   point-to-point interface,\
    \ no next hop IP address is required. If the\n   destination is a router connected\
    \ to the calculating router via a\n   virtual link, the setting of the next hop\
    \ should be deferred until\n   the calculation in Section 16.3.\n   In the second\
    \ case, the parent vertex is a network that directly\n   connects the calculating\
    \ router to the destination router.  The list\n   of next hops is then determined\
    \ by examining the destination's\n   router-LSA.  For each link in the router-LSA\
    \ that points back to the\n   parent network, the link's Link Data field provides\
    \ the IP address of\n   a next hop router.  The outgoing interface to use can\
    \ then be derived\n   from the next hop IP address (or it can be inherited from\
    \ the parent\n   network).\n"
- title: 16.2.  Calculating the inter-area routes
  contents:
  - "16.2.  Calculating the inter-area routes\n   The inter-area routes are calculated\
    \ by examining summary-LSAs.  If\n   the router has active attachments to multiple\
    \ areas, only backbone\n   summary-LSAs are examined.  Routers attached to a single\
    \ area examine\n   that area's summary-LSAs.  In either case, the summary-LSAs\
    \ examined\n   below are all part of a single area's link state database (call\
    \ it\n   Area A).\n   Summary-LSAs are originated by the area border routers.\
    \  Each\n   summary-LSA in Area A is considered in turn.  Remember that the\n\
    \   destination described by a summary-LSA is either a network (Type 3\n   summary-LSAs)\
    \ or an AS boundary router (Type 4 summary-LSAs).  For\n   each summary-LSA:\n\
    \   (1) If the cost specified by the LSA is LSInfinity, or if the\n       LSA's\
    \ LS age is equal to MaxAge, then examine the the next\n       LSA.\n   (2) If\
    \ the LSA was originated by the calculating router itself,\n       examine the\
    \ next LSA.\n   (3) If it is a Type 3 summary-LSA, and the collection of\n   \
    \    destinations described by the summary-LSA equals one of the\n       router's\
    \ configured area address ranges (see Section 3.5),\n       and the particular\
    \ area address range is active, then the\n       summary-LSA should be ignored.\
    \  \"Active\" means that there\n       are one or more reachable (by intra-area\
    \ paths) networks\n       contained in the area range.\n   (4) Else, call the\
    \ destination described by the LSA N (for Type\n       3 summary-LSAs, N's address\
    \ is obtained by masking the LSA's\n       Link State ID with the network/subnet\
    \ mask contained in the\n       body of the LSA), and the area border originating\
    \ the LSA\n       BR.  Look up the routing table entry for BR having Area A as\n\
    \       its associated area.  If no such entry exists for router BR\n       (i.e.,\
    \ BR is unreachable in Area A), do nothing with this\n       LSA and consider\
    \ the next in the list.  Else, this LSA\n       describes an inter-area path to\
    \ destination N, whose cost is\n       the distance to BR plus the cost specified\
    \ in the LSA. Call\n       the cost of this inter-area path IAC.\n   (5) Next,\
    \ look up the routing table entry for the destination N.\n       (If N is an AS\
    \ boundary router, look up the \"router\" routing\n       table entry associated\
    \ with Area A).  If no entry exists for\n       N or if the entry's path type\
    \ is \"type 1 external\" or \"type\n       2 external\", then install the inter-area\
    \ path to N, with\n       associated area Area A, cost IAC, next hop equal to\
    \ the list\n       of next hops to router BR, and Advertising router equal to\n\
    \       BR.\n   (6) Else, if the paths present in the table are intra-area\n \
    \      paths, do nothing with the LSA (intra-area paths are always\n       preferred).\n\
    \   (7) Else, the paths present in the routing table are also\n       inter-area\
    \ paths.  Install the new path through BR if it is\n       cheaper, overriding\
    \ the paths in the routing table.\n       Otherwise, if the new path is the same\
    \ cost, add it to the\n       list of paths that appear in the routing table entry.\n"
- title: 16.3.  Examining transit areas' summary-LSAs
  contents:
  - "16.3.  Examining transit areas' summary-LSAs\n   This step is only performed\
    \ by area border routers attached to one or\n   more non-backbone areas that are\
    \ capable of carrying transit traffic\n   (i.e., \"transit areas\", or those areas\
    \ whose TransitCapability\n   parameter has been set to TRUE in Step 2 of the\
    \ Dijkstra algorithm\n   (see Section 16.1).\n   The purpose of the calculation\
    \ below is to examine the transit areas\n   to see whether they provide any better\
    \ (shorter) paths than the paths\n   previously calculated in Sections 16.1 and\
    \ 16.2.  Any paths found\n   that are better than or equal to previously discovered\
    \ paths are\n   installed in the routing table.\n   The calculation proceeds as\
    \ follows. All the transit areas' summary-\n   LSAs are examined in turn.  Each\
    \ such summary-LSA describes a route\n   through a transit area Area A to a Network\
    \ N (N's address is obtained\n   by masking the LSA's Link State ID with the network/subnet\
    \ mask\n   contained in the body of the LSA) or in the case of a Type 4\n   summary-LSA,\
    \ to an AS boundary router N.  Suppose also that the\n   summary-LSA was originated\
    \ by an area border router BR.\n   (1) If the cost advertised by the summary-LSA\
    \ is LSInfinity, or\n       if the LSA's LS age is equal to MaxAge, then examine\
    \ the\n       next LSA.\n   (2) If the summary-LSA was originated by the calculating\
    \ router\n       itself, examine the next LSA.\n   (3) Look up the routing table\
    \ entry for N. (If N is an AS\n       boundary router, look up the \"router\"\
    \ routing table entry\n       associated with the backbone area). If it does not\
    \ exist, or\n       if the route type is other than intra-area or inter-area,\
    \ or\n       if the area associated with the routing table entry is not\n    \
    \   the backbone area, then examine the next LSA. In other\n       words, this\
    \ calculation only updates backbone intra-area\n       routes found in Section\
    \ 16.1 and inter-area routes found in\n       Section 16.2.\n   (4) Look up the\
    \ routing table entry for the advertising router\n       BR associated with the\
    \ Area A. If it is unreachable, examine\n       the next LSA. Otherwise, the cost\
    \ to destination N is the\n       sum of the cost in BR's Area A routing table\
    \ entry and the\n       cost advertised in the LSA. Call this cost IAC.\n   (5)\
    \ If this cost is less than the cost occurring in N's routing\n       table entry,\
    \ overwrite N's list of next hops with those used\n       for BR, and set N's\
    \ routing table cost to IAC. Else, if IAC\n       is the same as N's current cost,\
    \ add BR's list of next hops\n       to N's list of next hops. In any case, the\
    \ area associated\n       with N's routing table entry must remain the backbone\
    \ area,\n       and the path type (either intra-area or inter-area) must\n   \
    \    also remain the same.\n                      . Area 1 (transit)     .   \
    \         +\n                      .                      .            |\n   \
    \                   .      +---+1        1+---+100      |\n                  \
    \    .      |RT2|----------|RT4|=========|\n                      .    1/+---+*********\
    \ +---+         |\n                      .    /*******          .            |\n\
    \                      .  1/*Virtual          .            |\n               \
    \    1+---+/*  Link            .         Net|work\n             =======|RT1|*\
    \                   .            | N1\n                    +---+\\           \
    \        .            |\n                      .   \\                  .     \
    \       |\n                      .    \\                 .            |\n    \
    \                  .    1\\+---+1        1+---+20       |\n                  \
    \    .      |RT3|----------|RT5|=========|\n                      .      +---+\
    \          +---+         |\n                      .                      .   \
    \         |\n                      ........................            +\n   \
    \             Figure 17: Routing through transit areas\n   It is important to\
    \ note that the above calculation never makes\n   unreachable destinations reachable,\
    \ but instead just potentially\n   finds better paths to already reachable destinations.\
    \  The\n   calculation installs any better cost found into the routing table\n\
    \   entry, from which it may be readvertised in summary-LSAs to other\n   areas.\n\
    \   As an example of the calculation, consider the Autonomous System\n   pictured\
    \ in Figure 17. There is a single non-backbone area (Area 1)\n   that physically\
    \ divides the backbone into two separate pieces. To\n   maintain connectivity\
    \ of the backbone, a virtual link has been\n   configured between routers RT1\
    \ and RT4. On the right side of the\n   figure, Network N1 belongs to the backbone.\
    \ The dotted lines indicate\n   that there is a much shorter intra-area backbone\
    \ path between router\n   RT5 and Network N1 (cost 20) than there is between Router\
    \ RT4 and\n   Network N1 (cost 100). Both Router RT4 and Router RT5 will inject\n\
    \   summary-LSAs for Network N1 into Area 1.\n   After the shortest-path tree\
    \ has been calculated for the backbone in\n   Section 16.1, Router RT1 (left end\
    \ of the virtual link) will have\n   calculated a path through Router RT4 for\
    \ all data traffic destined\n   for Network N1. However, since Router RT5 is so\
    \ much closer to\n   Network N1, all routers internal to Area 1 (e.g., Routers\
    \ RT2 and\n   RT3) will forward their Network N1 traffic towards Router RT5,\n\
    \   instead of RT4. And indeed, after examining Area 1's summary-LSAs by\n   the\
    \ above calculation, Router RT1 will also forward Network N1\n   traffic towards\
    \ RT5. Note that in this example the virtual link\n   enables transit data traffic\
    \ to be forwarded through Area 1, but the\n   actual path the transit data traffic\
    \ takes does not follow the\n   virtual link.  In other words, virtual links allow\
    \ transit traffic to\n   be forwarded through an area, but do not dictate the\
    \ precise path\n   that the traffic will take.\n"
- title: 16.4.  Calculating AS external routes
  contents:
  - "16.4.  Calculating AS external routes\n   AS external routes are calculated by\
    \ examining AS-external-LSAs.\n   Each of the AS-external-LSAs is considered in\
    \ turn.  Most AS-\n   external-LSAs describe routes to specific IP destinations.\
    \  An AS-\n   external-LSA can also describe a default route for the Autonomous\n\
    \   System (Destination ID = DefaultDestination, network/subnet mask =\n   0x00000000).\
    \  For each AS-external-LSA:\n   (1) If the cost specified by the LSA is LSInfinity,\
    \ or if the\n       LSA's LS age is equal to MaxAge, then examine the next LSA.\n\
    \   (2) If the LSA was originated by the calculating router itself,\n       examine\
    \ the next LSA.\n   (3) Call the destination described by the LSA N.  N's address\
    \ is\n       obtained by masking the LSA's Link State ID with the\n       network/subnet\
    \ mask contained in the body of the LSA.  Look\n       up the routing table entries\
    \ (potentially one per attached\n       area) for the AS boundary router (ASBR)\
    \ that originated the\n       LSA. If no entries exist for router ASBR (i.e.,\
    \ ASBR is\n       unreachable), do nothing with this LSA and consider the next\n\
    \       in the list.\n       Else, this LSA describes an AS external path to destination\n\
    \       N.  Examine the forwarding address specified in the AS-\n       external-LSA.\
    \  This indicates the IP address to which\n       packets for the destination\
    \ should be forwarded.\n       If the forwarding address is set to 0.0.0.0, packets\
    \ should\n       be sent to the ASBR itself. Among the multiple routing table\n\
    \       entries for the ASBR, select the preferred entry as follows.\n       If\
    \ RFC1583Compatibility is set to \"disabled\", prune the set\n       of routing\
    \ table entries for the ASBR as described in\n       Section 16.4.1. In any case,\
    \ among the remaining routing\n       table entries, select the routing table\
    \ entry with the least\n       cost; when there are multiple least cost routing\
    \ table\n       entries the entry whose associated area has the largest OSPF\n\
    \       Area ID (when considered as an unsigned 32-bit integer) is\n       chosen.\n\
    \       If the forwarding address is non-zero, look up the\n       forwarding\
    \ address in the routing table.[24] The matching\n       routing table entry must\
    \ specify an intra-area or inter-area\n       path; if no such path exists, do\
    \ nothing with the LSA and\n       consider the next in the list.\n   (4) Let\
    \ X be the cost specified by the preferred routing table\n       entry for the\
    \ ASBR/forwarding address, and Y the cost\n       specified in the LSA.  X is\
    \ in terms of the link state\n       metric, and Y is a type 1 or 2 external metric.\n\
    \   (5) Look up the routing table entry for the destination N.  If\n       no\
    \ entry exists for N, install the AS external path to N,\n       with next hop\
    \ equal to the list of next hops to the\n       forwarding address, and advertising\
    \ router equal to ASBR.\n       If the external metric type is 1, then the path-type\
    \ is set\n       to type 1 external and the cost is equal to X+Y.  If the\n  \
    \     external metric type is 2, the path-type is set to type 2\n       external,\
    \ the link state component of the route's cost is X,\n       and the type 2 cost\
    \ is Y.\n   (6) Compare the AS external path described by the LSA with the\n \
    \      existing paths in N's routing table entry, as follows. If\n       the new\
    \ path is preferred, it replaces the present paths in\n       N's routing table\
    \ entry.  If the new path is of equal\n       preference, it is added to N's routing\
    \ table entry's list of\n       paths.\n       (a) Intra-area and inter-area paths\
    \ are always preferred\n           over AS external paths.\n       (b) Type 1\
    \ external paths are always preferred over type 2\n           external paths.\
    \ When all paths are type 2 external\n           paths, the paths with the smallest\
    \ advertised type 2\n           metric are always preferred.\n       (c) If the\
    \ new AS external path is still indistinguishable\n           from the current\
    \ paths in the N's routing table entry,\n           and RFC1583Compatibility is\
    \ set to \"disabled\", select\n           the preferred paths based on the intra-AS\
    \ paths to the\n           ASBR/forwarding addresses, as specified in Section\n\
    \           16.4.1.\n       (d) If the new AS external path is still indistinguishable\n\
    \           from the current paths in the N's routing table entry,\n         \
    \  select the preferred path based on a least cost\n           comparison.  Type\
    \ 1 external paths are compared by\n           looking at the sum of the distance\
    \ to the forwarding\n           address and the advertised type 1 metric (X+Y).\
    \  Type 2\n           external paths advertising equal type 2 metrics are\n  \
    \         compared by looking at the distance to the forwarding\n           addresses.\n"
- title: 16.4.1.  External path preferences
  contents:
  - "16.4.1.  External path preferences\n   When multiple intra-AS paths are available\
    \ to ASBRs/forwarding\n   addresses, the following rules indicate which paths\
    \ are preferred.\n   These rules apply when the same ASBR is reachable through\
    \ multiple\n   areas, or when trying to decide which of several AS-external-LSAs\n\
    \   should be preferred. In the former case the paths all terminate at\n   the\
    \ same ASBR, while in the latter the paths terminate at separate\n   ASBRs/forwarding\
    \ addresses. In either case, each path is represented\n   by a separate routing\
    \ table entry as defined in Section 11.\n   This section only applies when RFC1583Compatibility\
    \ is set to\n   \"disabled\".\n   The path preference rules, stated from highest\
    \ to lowest preference,\n   are as follows. Note that as a result of these rules,\
    \ there may still\n   be multiple paths of the highest preference. In this case,\
    \ the path\n   to use must be determined based on cost, as described in Section\n\
    \   16.4.\n    o   Intra-area paths using non-backbone areas are always the\n\
    \        most preferred.\n    o   Otherwise, intra-area backbone paths are preferred.\n\
    \    o   Inter-area paths are the least preferred.\n"
- title: 16.5.  Incremental updates -- summary-LSAs
  contents:
  - "16.5.  Incremental updates -- summary-LSAs\n   When a new summary-LSA is received,\
    \ it is not necessary to\n   recalculate the entire routing table.  Call the destination\
    \ described\n   by the summary-LSA N (N's address is obtained by masking the LSA's\n\
    \   Link State ID with the network/subnet mask contained in the body of\n   the\
    \ LSA), and let Area A be the area to which the LSA belongs. There\n   are then\
    \ two separate cases:\n   Case 1: Area A is the backbone and/or the router is\
    \ not an area\n   border router.\n      In this case, the following calculations\
    \ must be performed.\n      First, if there is presently an inter-area route to\
    \ the\n      destination N, N's routing table entry is invalidated, saving the\n\
    \      entry's values for later comparisons. Then the calculation in\n      Section\
    \ 16.2 is run again for the single destination N. In this\n      calculation,\
    \ all of Area A's summary-LSAs that describe a route to\n      N are examined.\
    \  In addition, if the router is an area border\n      router attached to one\
    \ or more transit areas, the calculation in\n      Section 16.3 must be run again\
    \ for the single destination.  If the\n      results of these calculations have\
    \ changed the cost/path to an AS\n      boundary router (as would be the case\
    \ for a Type 4 summary-LSA) or\n      to any forwarding addresses, all AS- external-LSAs\
    \ will have to be\n      reexamined by rerunning the calculation in Section 16.4.\n\
    \      Otherwise, if N is now newly unreachable, the calculation in\n      Section\
    \ 16.4 must be rerun for the single destination N, in case\n      an alternate\
    \ external route to N exists.\n   Case 2: Area A is a transit area and the router\
    \ is an area border\n   router.\n      In this case, the following calculations\
    \ must be performed.\n      First, if N's routing table entry presently contains\
    \ one or more\n      inter-area paths that utilize the transit area Area A, these\
    \ paths\n      should be removed. If this removes all paths from the routing\n\
    \      table entry, the entry should be invalidated.  The entry's old\n      values\
    \ should be saved for later comparisons. Next the calculation\n      in Section\
    \ 16.3 must be run again for the single destination N. If\n      the results of\
    \ this calculation have caused the cost to N to\n      increase, the complete\
    \ routing table calculation must be rerun\n      starting with the Dijkstra algorithm\
    \ specified in Section 16.1.\n      Otherwise, if the cost/path to an AS boundary\
    \ router (as would be\n      the case for a Type 4 summary-LSA) or to any forwarding\
    \ addresses\n      has changed, all AS-external-LSAs will have to be reexamined\
    \ by\n      rerunning the calculation in Section 16.4.  Otherwise, if N is now\n\
    \      newly unreachable, the calculation in Section 16.4 must be rerun\n    \
    \  for the single destination N, in case an alternate external route\n      to\
    \ N exists.\n"
- title: 16.6.  Incremental updates -- AS-external-LSAs
  contents:
  - "16.6.  Incremental updates -- AS-external-LSAs\n   When a new AS-external-LSA\
    \ is received, it is not necessary to\n   recalculate the entire routing table.\
    \  Call the destination described\n   by the AS-external-LSA N.  N's address is\
    \ obtained by masking the\n   LSA's Link State ID with the network/subnet mask\
    \ contained in the\n   body of the LSA. If there is already an intra- area or\
    \ inter-area\n   route to the destination, no recalculation is necessary (internal\n\
    \   routes take precedence).\n   Otherwise, the procedure in Section 16.4 will\
    \ have to be performed,\n   but only for those AS-external-LSAs whose destination\
    \ is N.  Before\n   this procedure is performed, the present routing table entry\
    \ for N\n   should be invalidated.\n"
- title: 16.7.  Events generated as a result of routing table changes
  contents:
  - "16.7.  Events generated as a result of routing table changes\n   Changes to routing\
    \ table entries sometimes cause the OSPF area border\n   routers to take additional\
    \ actions.  These routers need to act on the\n   following routing table changes:\n\
    \   o   The cost or path type of a routing table entry has changed.\n      If\
    \ the destination described by this entry is a Network or AS\n      boundary router,\
    \ and this is not simply a change of AS external\n      routes, new summary-LSAs\
    \ may have to be generated (potentially one\n      for each attached area, including\
    \ the backbone). See Section\n      12.4.3 for more information.  If a previously\
    \ advertised entry has\n      been deleted, or is no longer advertisable to a\
    \ particular area,\n      the LSA must be flushed from the routing domain by setting\
    \ its LS\n      age to MaxAge and reflooding (see Section 14.1).\n   o   A routing\
    \ table entry associated with a configured virtual\n      link has changed.  The\
    \ destination of such a routing table entry\n      is an area border router. \
    \ The change indicates a modification to\n      the virtual link's cost or viability.\n\
    \      If the entry indicates that the area border router is newly\n      reachable,\
    \ the corresponding virtual link is now operational.  An\n      InterfaceUp event\
    \ should be generated for the virtual link, which\n      will cause a virtual\
    \ adjacency to begin to form (see Section\n      10.3).  At this time the virtual\
    \ link's IP interface address and\n      the virtual neighbor's Neighbor IP address\
    \ are also calculated.\n      If the entry indicates that the area border router\
    \ is no longer\n      reachable, the virtual link and its associated adjacency\
    \ should be\n      destroyed.  This means an InterfaceDown event should be generated\n\
    \      for the associated virtual link.\n      If the cost of the entry has changed,\
    \ and there is a fully\n      established virtual adjacency, a new router-LSA\
    \ for the backbone\n      must be originated.  This in turn may cause further\
    \ routing table\n      changes.\n"
- title: 16.8.  Equal-cost multipath
  contents:
  - "16.8.  Equal-cost multipath\n   The OSPF protocol maintains multiple equal-cost\
    \ routes to all\n   destinations.  This can be seen in the steps used above to\
    \ calculate\n   the routing table, and in the definition of the routing table\n\
    \   structure.\n   Each one of the multiple routes will be of the same type (intra-area,\n\
    \   inter-area, type 1 external or type 2 external), cost, and will have\n   the\
    \ same associated area.  However, each route specifies a separate\n   next hop\
    \ and Advertising router.\n   There is no requirement that a router running OSPF\
    \ keep track of all\n   possible equal-cost routes to a destination.  An implementation\
    \ may\n   choose to keep only a fixed number of routes to any given\n   destination.\
    \  This does not affect any of the algorithms presented in\n   this specification.\n"
- title: Footnotes
  contents:
  - "Footnotes\n   [1]The graph's vertices represent either routers, transit networks,\n\
    \   or stub networks.  Since routers may belong to multiple areas, it is\n   not\
    \ possible to color the graph's vertices.\n   [2]It is possible for all of a router's\
    \ interfaces to be unnumbered\n   point-to-point links.  In this case, an IP address\
    \ must be assigned\n   to the router.  This address will then be advertised in\
    \ the router's\n   router-LSA as a host route.\n   [3]Note that in these cases\
    \ both interfaces, the non-virtual and the\n   virtual, would have the same IP\
    \ address.\n   [4]Note that no host route is generated for, and no IP packets\
    \ can be\n   addressed to, interfaces to unnumbered point-to-point networks. \
    \ This\n   is regardless of such an interface's state.\n   [5]It is instructive\
    \ to see what happens when the Designated Router\n   for the network crashes.\
    \  Call the Designated Router for the network\n   RT1, and the Backup Designated\
    \ Router RT2. If Router RT1 crashes (or\n   maybe its interface to the network\
    \ dies), the other routers on the\n   network will detect RT1's absence within\
    \ RouterDeadInterval seconds.\n   All routers may not detect this at precisely\
    \ the same time; the\n   routers that detect RT1's absence before RT2 does will,\
    \ for a time,\n   select RT2 to be both Designated Router and Backup Designated\
    \ Router.\n   When RT2 detects that RT1 is gone it will move itself to Designated\n\
    \   Router.  At this time, the remaining router having highest Router\n   Priority\
    \ will be selected as Backup Designated Router.\n   [6]On point-to-point networks,\
    \ the lower level protocols indicate\n   whether the neighbor is up and running.\
    \  Likewise, existence of the\n   neighbor on virtual links is indicated by the\
    \ routing table\n   calculation.  However, in both these cases, the Hello Protocol\
    \ is\n   still used.  This ensures that communication between the neighbors is\n\
    \   bidirectional, and that each of the neighbors has a functioning\n   routing\
    \ protocol layer.\n   [7]When the identity of the Designated Router is changing,\
    \ it may be\n   quite common for a neighbor in this state to send the router a\n\
    \   Database Description packet; this means that there is some momentary\n   disagreement\
    \ on the Designated Router's identity.\n   [8]Note that it is possible for a router\
    \ to resynchronize any of its\n   fully established adjacencies by setting the\
    \ adjacency's state back\n   to ExStart.  This will cause the other end of the\
    \ adjacency to\n   process a SeqNumberMismatch event, and therefore to also go\
    \ back to\n   ExStart state.\n   [9]The address space of IP networks and the address\
    \ space of OSPF\n   Router IDs may overlap.  That is, a network may have an IP\
    \ address\n   which is identical (when considered as a 32-bit number) to some\n\
    \   router's Router ID.\n   [10]\"Discard\" entries are necessary to ensure that\
    \ route\n   summarization at area boundaries will not cause packet looping.\n\
    \   [11]It is assumed that, for two different address ranges matching the\n  \
    \ destination, one range is more specific than the other. Non-\n   contiguous\
    \ subnet masks can be configured to violate this assumption.\n   Such subnet mask\
    \ configurations cannot be handled by the OSPF\n   protocol.\n   [12]MaxAgeDiff\
    \ is an architectural constant.  It indicates the\n   maximum dispersion of ages,\
    \ in seconds, that can occur for a single\n   LSA instance as it is flooded throughout\
    \ the routing domain.  If two\n   LSAs differ by more than this, they are assumed\
    \ to be different\n   instances of the same LSA. This can occur when a router\
    \ restarts and\n   loses track of the LSA's previous LS sequence number.  See\
    \ Section\n   13.4 for more details.\n   [13]When two LSAs have different LS checksums,\
    \ they are assumed to be\n   separate instances.  This can occur when a router\
    \ restarts, and loses\n   track of the LSA's previous LS sequence number.  In\
    \ the case where\n   the two LSAs have the same LS sequence number, it is not\
    \ possible to\n   determine which LSA is actually newer. However, if the wrong\
    \ LSA is\n   accepted as newer, the originating router will simply originate\n\
    \   another instance.  See Section 13.4 for further details.\n   [14]There is\
    \ one instance where a lookup must be done based on\n   partial information. \
    \ This is during the routing table calculation,\n   when a network-LSA must be\
    \ found based solely on its Link State ID.\n   The lookup in this case is still\
    \ well defined, since no two network-\n   LSAs can have the same Link State ID.\n\
    \   [15]This is the way RFC 1583 specified point-to-point representation.\n  \
    \ It has three advantages: a) it does not require allocating a subnet\n   to the\
    \ point-to-point link, b) it tends to bias the routing so that\n   packets destined\
    \ for the point-to-point interface will actually be\n   received over the interface\
    \ (which is useful for diagnostic purposes)\n   and c) it allows network bootstrapping\
    \ of a neighbor, without\n   requiring that the bootstrap program contain an OSPF\
    \ implementation.\n   [16]This is the more traditional point-to-point representation\
    \ used\n   by protocols such as RIP.\n   [17]This clause covers the case: Inter-area\
    \ routes are not summarized\n   to the backbone.  This is because inter-area routes\
    \ are always\n   associated with the backbone area.\n   [18]This clause is only\
    \ invoked when a non-backbone Area A supports\n   transit data traffic (i.e.,\
    \ has TransitCapability set to TRUE).  For\n   example, in the area configuration\
    \ of Figure 6, Area 2 can support\n   transit traffic due to the configured virtual\
    \ link between Routers\n   RT10 and RT11. As a result, Router RT11 need only originate\
    \ a single\n   summary-LSA into Area 2 (having the collapsed destination N9-N11,H1),\n\
    \   since all of Router RT11's other eligible routes have next hops\n   belonging\
    \ to Area 2 itself (and as such only need be advertised by\n   other area border\
    \ routers; in this case, Routers RT10 and RT7).\n   [19]By keeping more information\
    \ in the routing table, it is possible\n   for an implementation to recalculate\
    \ the shortest path tree for only\n   a single area.  In fact, there are incremental\
    \ algorithms that allow\n   an implementation to recalculate only a portion of\
    \ a single area's\n   shortest path tree [Ref1]. However, these algorithms are\
    \ beyond the\n   scope of this specification.\n   [20]This is how the Link state\
    \ request list is emptied, which\n   eventually causes the neighbor state to transition\
    \ to Full.  See\n   Section 10.9 for more details.\n   [21]It should be a relatively\
    \ rare occurrence for an LSA's LS age to\n   reach MaxAge in this fashion.  Usually,\
    \ the LSA will be replaced by a\n   more recent instance before it ages out.\n\
    \   [22]Strictly speaking, because of equal-cost multipath, the algorithm\n  \
    \ does not create a tree.  We continue to use the \"tree\" terminology\n   because\
    \ that is what occurs most often in the existing literature.\n   [23]Note that\
    \ the presence of any link back to V is sufficient; it\n   need not be the matching\
    \ half of the link under consideration from V\n   to W. This is enough to ensure\
    \ that, before data traffic flows\n   between a pair of neighboring routers, their\
    \ link state databases\n   will be synchronized.\n   [24]When the forwarding address\
    \ is non-zero, it should point to a\n   router belonging to another Autonomous\
    \ System.  See Section 12.4.4\n   for more details.\n"
- title: References
  contents:
  - "References\n   [Ref1]  McQuillan, J., I. Richer and E. Rosen, \"ARPANET Routing\n\
    \           Algorithm Improvements\", BBN Technical Report 3803, April\n     \
    \      1978.\n   [Ref2]  Digital Equipment Corporation, \"Information processing\n\
    \           systems -- Data communications -- Intermediate System to\n       \
    \    Intermediate System Intra-Domain Routing Protocol\", October\n          \
    \ 1987.\n   [Ref3]  McQuillan, J. et.al., \"The New Routing Algorithm for the\n\
    \           ARPANET\", IEEE Transactions on Communications, May 1980.\n   [Ref4]\
    \  Perlman, R., \"Fault-Tolerant Broadcast of Routing\n           Information\"\
    , Computer Networks, December 1983.\n   [Ref5]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n           USC/Information Sciences Institute, September 1981.\n\
    \   [Ref6]  McKenzie, A., \"ISO Transport Protocol specification ISO DP\n    \
    \       8073\", RFC 905, ISO, April 1984.\n   [Ref7]  Deering, S., \"Host extensions\
    \ for IP multicasting\", STD 5,\n           RFC 1112, Stanford University, May\
    \ 1988.\n   [Ref8]  McCloghrie, K., and M. Rose, \"Management Information Base\n\
    \           for network management of TCP/IP-based internets: MIB-II\",\n    \
    \       STD 17, RFC 1213, Hughes LAN Systems, Performance Systems\n          \
    \ International, March 1991.\n   [Ref9]  Moy, J., \"OSPF Version 2\", RFC 1583,\
    \ Proteon, Inc., March\n           1994.\n   [Ref10] Fuller, V., T. Li, J. Yu,\
    \ and K. Varadhan, \"Classless\n           Inter-Domain Routing (CIDR): an Address\
    \ Assignment and\n           Aggregation Strategy\", RFC1519, BARRNet, cisco,\
    \ MERIT,\n           OARnet, September 1993.\n   [Ref11] Reynolds, J., and J.\
    \ Postel, \"Assigned Numbers\", STD 2, RFC\n           1700, USC/Information Sciences\
    \ Institute, October 1994.\n   [Ref12] Almquist, P., \"Type of Service in the\
    \ Internet Protocol\n           Suite\", RFC 1349, July 1992.\n   [Ref13] Leiner,\
    \ B., et.al., \"The DARPA Internet Protocol Suite\", DDN\n           Protocol\
    \ Handbook, April 1985.\n   [Ref14] Bradley, T., and C. Brown, \"Inverse Address\
    \ Resolution\n           Protocol\", RFC 1293, January 1992.\n   [Ref15] deSouza,\
    \ O., and M. Rodrigues, \"Guidelines for Running OSPF\n           Over Frame Relay\
    \ Networks\", RFC 1586, March 1994.\n   [Ref16] Bellovin, S., \"Security Problems\
    \ in the TCP/IP Protocol\n           Suite\", ACM Computer Communications Review,\
    \ Volume 19,\n           Number 2, pp. 32-38, April 1989.\n   [Ref17] Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n           April 1992.\n\
    \   [Ref18] Moy, J., \"Multicast Extensions to OSPF\", RFC 1584, Proteon,\n  \
    \         Inc., March 1994.\n   [Ref19] Coltun, R. and V. Fuller, \"The OSPF NSSA\
    \ Option\", RFC 1587,\n           RainbowBridge Communications, Stanford University,\
    \ March\n           1994.\n   [Ref20] Ferguson, D., \"The OSPF External Attributes\
    \ LSA\", work in\n           progress.\n   [Ref21] Moy, J., \"Extending OSPF to\
    \ Support Demand Circuits\", RFC\n           1793, Cascade, April 1995.\n   [Ref22]\
    \ Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n           DECWRL,\
    \ Stanford University, November 1990.\n   [Ref23] Rekhter, Y. and T. Li, \"A Border\
    \ Gateway Protocol 4 (BGP-\n           4)\", RFC 1771, T.J. Watson Research Center,\
    \ IBM Corp., cisco\n           Systems, March 1995.\n   [Ref24] Hinden, R., \"\
    Internet Routing Protocol Standardization\n           Criteria\", BBN, October\
    \ 1991.\n"
- title: A. OSPF data formats
  contents:
  - "A. OSPF data formats\n   This appendix describes the format of OSPF protocol\
    \ packets and OSPF\n   LSAs.  The OSPF protocol runs directly over the IP network\
    \ layer.\n   Before any data formats are described, the details of the OSPF\n\
    \   encapsulation are explained.\n   Next the OSPF Options field is described.\
    \  This field describes\n   various capabilities that may or may not be supported\
    \ by pieces of\n   the OSPF routing domain. The OSPF Options field is contained\
    \ in OSPF\n   Hello packets, Database Description packets and in OSPF LSAs.\n\
    \   OSPF packet formats are detailed in Section A.3.  A description of\n   OSPF\
    \ LSAs appears in Section A.4.\n"
- title: A.1 Encapsulation of OSPF packets
  contents:
  - "A.1 Encapsulation of OSPF packets\n   OSPF runs directly over the Internet Protocol's\
    \ network layer.  OSPF\n   packets are therefore encapsulated solely by IP and\
    \ local data-link\n   headers.\n   OSPF does not define a way to fragment its\
    \ protocol packets, and\n   depends on IP fragmentation when transmitting packets\
    \ larger than the\n   network MTU. If necessary, the length of OSPF packets can\
    \ be up to\n   65,535 bytes (including the IP header). The OSPF packet types that\n\
    \   are likely to be large (Database Description Packets, Link State\n   Request,\
    \ Link State Update, and Link State Acknowledgment packets)\n   can usually be\
    \ split into several separate protocol packets, without\n   loss of functionality.\
    \  This is recommended; IP fragmentation should\n   be avoided whenever possible.\
    \ Using this reasoning, an attempt should\n   be made to limit the sizes of OSPF\
    \ packets sent over virtual links to\n   576 bytes unless Path MTU Discovery is\
    \ being performed (see [Ref22]).\n   The other important features of OSPF's IP\
    \ encapsulation are:\n   o  Use of IP multicast.  Some OSPF messages are multicast,\
    \ when\n      sent over broadcast networks.  Two distinct IP multicast addresses\n\
    \      are used.  Packets sent to these multicast addresses should never\n   \
    \   be forwarded; they are meant to travel a single hop only.  To\n      ensure\
    \ that these packets will not travel multiple hops, their IP\n      TTL must be\
    \ set to 1.\n   AllSPFRouters\n      This multicast address has been assigned\
    \ the value 224.0.0.5. All\n      routers running OSPF should be prepared to receive\
    \ packets sent to\n      this address.  Hello packets are always sent to this\
    \ destination.\n      Also, certain OSPF protocol packets are sent to this address\n\
    \      during the flooding procedure.\n   AllDRouters\n      This multicast address\
    \ has been assigned the value 224.0.0.6. Both\n      the Designated Router and\
    \ Backup Designated Router must be\n      prepared to receive packets destined\
    \ to this address.  Certain\n      OSPF protocol packets are sent to this address\
    \ during the flooding\n      procedure.\n   o   OSPF is IP protocol number 89.\
    \  This number has been registered\n       with the Network Information Center.\
    \  IP protocol number\n       assignments are documented in [Ref11].\n   o   All\
    \ OSPF routing protocol packets are sent using the normal\n       service TOS\
    \ value of binary 0000 defined in [Ref12].\n   o   Routing protocol packets are\
    \ sent with IP precedence set to\n       Internetwork Control.  OSPF protocol\
    \ packets should be given\n       precedence over regular IP data traffic, in\
    \ both sending and\n       receiving.  Setting the IP precedence field in the\
    \ IP header to\n       Internetwork Control [Ref5] may help implement this objective.\n"
- title: A.2 The Options field
  contents:
  - "A.2 The Options field\n   The OSPF Options field is present in OSPF Hello packets,\
    \ Database\n   Description packets and all LSAs.  The Options field enables OSPF\n\
    \   routers to support (or not support) optional capabilities, and to\n   communicate\
    \ their capability level to other OSPF routers.  Through\n   this mechanism routers\
    \ of differing capabilities can be mixed within\n   an OSPF routing domain.\n\
    \   When used in Hello packets, the Options field allows a router to\n   reject\
    \ a neighbor because of a capability mismatch.  Alternatively,\n   when capabilities\
    \ are exchanged in Database Description packets a\n   router can choose not to\
    \ forward certain LSAs to a neighbor because\n   of its reduced functionality.\
    \  Lastly, listing capabilities in LSAs\n   allows routers to forward traffic\
    \ around reduced functionality\n   routers, by excluding them from parts of the\
    \ routing table\n   calculation.\n   Five bits of the OSPF Options field have\
    \ been assigned, although only\n   one (the E-bit) is described completely by\
    \ this memo. Each bit is\n   described briefly below. Routers should reset (i.e.\
    \ clear)\n   unrecognized bits in the Options field when sending Hello packets\
    \ or\n   Database Description packets and when originating LSAs. Conversely,\n\
    \   routers encountering unrecognized Option bits in received Hello\n   Packets,\
    \ Database Description packets or LSAs should ignore the\n   capability and process\
    \ the packet/LSA normally.\n               +------------------------------------+\n\
    \               | * | * | DC | EA | N/P | MC | E | * |\n               +------------------------------------+\n\
    \                           The Options field\n   E-bit\n      This bit describes\
    \ the way AS-external-LSAs are flooded, as\n      described in Sections 3.6, 9.5,\
    \ 10.8 and 12.1.2 of this memo.\n   MC-bit\n      This bit describes whether IP\
    \ multicast datagrams are forwarded\n      according to the specifications in\
    \ [Ref18].\n   N/P-bit\n      This bit describes the handling of Type-7 LSAs,\
    \ as specified in\n      [Ref19].\n   EA-bit\n      This bit describes the router's\
    \ willingness to receive and\n      forward External-Attributes-LSAs, as specified\
    \ in [Ref20].\n   DC-bit\n      This bit describes the router's handling of demand\
    \ circuits, as\n      specified in [Ref21].\n"
- title: A.3 OSPF Packet Formats
  contents:
  - "A.3 OSPF Packet Formats\n   There are five distinct OSPF packet types. All OSPF\
    \ packet types\n   begin with a standard 24 byte header.  This header is described\n\
    \   first.  Each packet type is then described in a succeeding section.\n   In\
    \ these sections each packet's division into fields is displayed,\n   and then\
    \ the field definitions are enumerated.\n   All OSPF packet types (other than\
    \ the OSPF Hello packets) deal with\n   lists of LSAs.  For example, Link State\
    \ Update packets implement the\n   flooding of LSAs throughout the OSPF routing\
    \ domain.  Because of\n   this, OSPF protocol packets cannot be parsed unless\
    \ the format of\n   LSAs is also understood.  The format of LSAs is described\
    \ in Section\n   A.4.\n   The receive processing of OSPF packets is detailed in\
    \ Section 8.2.\n   The sending of OSPF packets is explained in Section 8.1.\n"
- title: A.3.1 The OSPF packet header
  contents:
  - "A.3.1 The OSPF packet header\n   Every OSPF packet starts with a standard 24\
    \ byte header.  This header\n   contains all the information necessary to determine\
    \ whether the\n   packet should be accepted for further processing.  This determination\n\
    \   is described in Section 8.2 of the specification.\n        0             \
    \      1                   2                   3\n        0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |     Type      |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version #\n      The OSPF version number.  This specification documents version\
    \ 2\n      of the protocol.\n   Type\n      The OSPF packet types are as follows.\
    \ See Sections A.3.2 through\n      A.3.6 for details.\n                  Type\
    \   Description\n                  ________________________________\n        \
    \          1      Hello\n                  2      Database Description\n     \
    \             3      Link State Request\n                  4      Link State Update\n\
    \                  5      Link State Acknowledgment\n   Packet length\n      The\
    \ length of the OSPF protocol packet in bytes.  This length\n      includes the\
    \ standard OSPF header.\n   Router ID\n      The Router ID of the packet's source.\n\
    \   Area ID\n      A 32 bit number identifying the area that this packet belongs\n\
    \      to.  All OSPF packets are associated with a single area.  Most\n      travel\
    \ a single hop only.  Packets travelling over a virtual\n      link are labelled\
    \ with the backbone Area ID of 0.0.0.0.\n   Checksum\n      The standard IP checksum\
    \ of the entire contents of the packet,\n      starting with the OSPF packet header\
    \ but excluding the 64-bit\n      authentication field.  This checksum is calculated\
    \ as the 16-bit\n      one's complement of the one's complement sum of all the\
    \ 16-bit\n      words in the packet, excepting the authentication field.  If the\n\
    \      packet's length is not an integral number of 16-bit words, the\n      packet\
    \ is padded with a byte of zero before checksumming.  The\n      checksum is considered\
    \ to be part of the packet authentication\n      procedure; for some authentication\
    \ types the checksum\n      calculation is omitted.\n   AuType\n      Identifies\
    \ the authentication procedure to be used for the\n      packet.  Authentication\
    \ is discussed in Appendix D of the\n      specification.  Consult Appendix D\
    \ for a list of the currently\n      defined authentication types.\n   Authentication\n\
    \      A 64-bit field for use by the authentication scheme. See\n      Appendix\
    \ D for details.\n"
- title: A.3.2 The Hello packet
  contents:
  - "A.3.2 The Hello packet\n   Hello packets are OSPF packet type 1.  These packets\
    \ are sent\n   periodically on all interfaces (including virtual links) in order\
    \ to\n   establish and maintain neighbor relationships.  In addition, Hello\n\
    \   Packets are multicast on those physical networks having a multicast\n   or\
    \ broadcast capability, enabling dynamic discovery of neighboring\n   routers.\n\
    \   All routers connected to a common network must agree on certain\n   parameters\
    \ (Network mask, HelloInterval and RouterDeadInterval).\n   These parameters are\
    \ included in Hello packets, so that differences\n   can inhibit the forming of\
    \ neighbor relationships. A detailed\n   explanation of the receive processing\
    \ for Hello packets is presented\n   in Section 10.5.  The sending of Hello packets\
    \ is covered in Section\n   9.5.\n        0                   1              \
    \     2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       1       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Network Mask                           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         HelloInterval         |    Options    |    Rtr Pri    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     RouterDeadInterval                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      Designated Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   Backup Designated Router                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Neighbor                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \ Network mask\n      The network mask associated with this interface.  For example,\n\
    \      if the interface is to a class B network whose third byte is\n      used\
    \ for subnetting, the network mask is 0xffffff00.\n   Options\n      The optional\
    \ capabilities supported by the router, as documented\n      in Section A.2.\n\
    \   HelloInterval\n      The number of seconds between this router's Hello packets.\n\
    \   Rtr Pri\n      This router's Router Priority.  Used in (Backup) Designated\n\
    \      Router election.  If set to 0, the router will be ineligible to\n     \
    \ become (Backup) Designated Router.\n   RouterDeadInterval\n      The number\
    \ of seconds before declaring a silent router down.\n   Designated Router\n  \
    \    The identity of the Designated Router for this network, in the\n      view\
    \ of the sending router.  The Designated Router is identified\n      here by its\
    \ IP interface address on the network.  Set to 0.0.0.0\n      if there is no Designated\
    \ Router.\n   Backup Designated Router\n      The identity of the Backup Designated\
    \ Router for this network,\n      in the view of the sending router.  The Backup\
    \ Designated Router\n      is identified here by its IP interface address on the\
    \ network.\n      Set to 0.0.0.0 if there is no Backup Designated Router.\n  \
    \ Neighbor\n      The Router IDs of each router from whom valid Hello packets\
    \ have\n      been seen recently on the network.  Recently means in the last\n\
    \      RouterDeadInterval seconds.\n"
- title: A.3.3 The Database Description packet
  contents:
  - "A.3.3 The Database Description packet\n   Database Description packets are OSPF\
    \ packet type 2.  These packets\n   are exchanged when an adjacency is being initialized.\
    \  They describe\n   the contents of the link-state database.  Multiple packets\
    \ may be\n   used to describe the database.  For this purpose a poll-response\n\
    \   procedure is used. One of the routers is designated to be the master,\n  \
    \ the other the slave.  The master sends Database Description packets\n   (polls)\
    \ which are acknowledged by Database Description packets sent\n   by the slave\
    \ (responses).  The responses are linked to the polls via\n   the packets' DD\
    \ sequence numbers.\n        0                   1                   2       \
    \            3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       2       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |         Interface MTU         |    Options    |0|0|0|0|0|I|M|MS\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                     DD sequence number                        |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                               |\n       +- \
    \                                                            -+\n       |    \
    \                                                           |\n       +-     \
    \                 An LSA Header                          -+\n       |        \
    \                                                       |\n       +-         \
    \                                                    -+\n       |            \
    \                                                   |\n       +-             \
    \                                                -+\n       |                \
    \                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \ The format of the Database Description packet is very similar to both\n   the\
    \ Link State Request and Link State Acknowledgment packets.  The\n   main part\
    \ of all three is a list of items, each item describing a\n   piece of the link-state\
    \ database.  The sending of Database\n   Description Packets is documented in\
    \ Section 10.8. The reception of\n   Database Description packets is documented\
    \ in Section 10.6.\n   Interface MTU\n      The size in bytes of the largest IP\
    \ datagram that can be sent out\n      the associated interface, without fragmentation.\
    \  The MTUs of\n      common Internet link types can be found in Table 7-1 of\
    \ [Ref22].\n      Interface MTU should be set to 0 in Database Description packets\n\
    \      sent over virtual links.\n   Options\n      The optional capabilities supported\
    \ by the router, as documented\n      in Section A.2.\n   I-bit\n      The Init\
    \ bit.  When set to 1, this packet is the first in the\n      sequence of Database\
    \ Description Packets.\n   M-bit\n      The More bit.  When set to 1, it indicates\
    \ that more Database\n      Description Packets are to follow.\n   MS-bit\n  \
    \    The Master/Slave bit.  When set to 1, it indicates that the router\n    \
    \  is the master during the Database Exchange process.  Otherwise,\n      the\
    \ router is the slave.\n   DD sequence number\n      Used to sequence the collection\
    \ of Database Description Packets.\n      The initial value (indicated by the\
    \ Init bit being set) should be\n      unique.  The DD sequence number then increments\
    \ until the complete\n      database description has been sent.\n   The rest of\
    \ the packet consists of a (possibly partial) list of the\n   link-state database's\
    \ pieces.  Each LSA in the database is described\n   by its LSA header. The LSA\
    \ header is documented in Section A.4.1.  It\n   contains all the information\
    \ required to uniquely identify both the\n   LSA and the LSA's current instance.\n"
- title: A.3.4 The Link State Request packet
  contents:
  - "A.3.4 The Link State Request packet\n   Link State Request packets are OSPF packet\
    \ type 3. After exchanging\n   Database Description packets with a neighboring\
    \ router, a router may\n   find that parts of its link-state database are out-of-date.\
    \  The Link\n   State Request packet is used to request the pieces of the neighbor's\n\
    \   database that are more up-to-date.  Multiple Link State Request\n   packets\
    \ may need to be used.\n   A router that sends a Link State Request packet has\
    \ in mind the\n   precise instance of the database pieces it is requesting. Each\n\
    \   instance is defined by its LS sequence number, LS checksum, and LS\n   age,\
    \ although these fields are not specified in the Link State\n   Request Packet\
    \ itself.  The router may receive even more recent\n   instances in response.\n\
    \   The sending of Link State Request packets is documented in Section\n   10.9.\
    \  The reception of Link State Request packets is documented in\n   Section 10.7.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       3       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          LS type                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Link State ID                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \ Each LSA requested is specified by its LS type, Link State ID, and\n   Advertising\
    \ Router.  This uniquely identifies the LSA, but not its\n   instance.  Link State\
    \ Request packets are understood to be requests\n   for the most recent instance\
    \ (whatever that might be).\n"
- title: A.3.5 The Link State Update packet
  contents:
  - "A.3.5 The Link State Update packet\n   Link State Update packets are OSPF packet\
    \ type 4.  These packets\n   implement the flooding of LSAs.  Each Link State\
    \ Update packet\n   carries a collection of LSAs one hop further from their origin.\n\
    \   Several LSAs may be included in a single packet.\n   Link State Update packets\
    \ are multicast on those physical networks\n   that support multicast/broadcast.\
    \  In order to make the flooding\n   procedure reliable, flooded LSAs are acknowledged\
    \ in Link State\n   Acknowledgment packets.  If retransmission of certain LSAs\
    \ is\n   necessary, the retransmitted LSAs are always carried by unicast Link\n\
    \   State Update packets.  For more information on the reliable flooding\n   of\
    \ LSAs, consult Section 13.\n        0                   1                   2\
    \                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       4       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                            # LSAs                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                                                               |\n      \
    \ +-                                                            +-+\n       |\
    \                             LSAs                              |\n       +- \
    \                                                           +-+\n       |    \
    \                          ...                              |\n   # LSAs\n   \
    \   The number of LSAs included in this update.\n   The body of the Link State\
    \ Update packet consists of a list of LSAs.\n   Each LSA begins with a common\
    \ 20 byte header, described in Section\n   A.4.1. Detailed formats of the different\
    \ types of LSAs are described\n   in Section A.4.\n"
- title: A.3.6 The Link State Acknowledgment packet
  contents:
  - "A.3.6 The Link State Acknowledgment packet\n   Link State Acknowledgment Packets\
    \ are OSPF packet type 5.  To make\n   the flooding of LSAs reliable, flooded\
    \ LSAs are explicitly\n   acknowledged.  This acknowledgment is accomplished through\
    \ the\n   sending and receiving of Link State Acknowledgment packets.  Multiple\n\
    \   LSAs can be acknowledged in a single Link State Acknowledgment\n   packet.\n\
    \   Depending on the state of the sending interface and the sender of the\n  \
    \ corresponding Link State Update packet, a Link State Acknowledgment\n   packet\
    \ is sent either to the multicast address AllSPFRouters, to the\n   multicast\
    \ address AllDRouters, or as a unicast.  The sending of Link\n   State Acknowledgment\
    \ packets is documented in Section 13.5.  The\n   reception of Link State Acknowledgment\
    \ packets is documented in\n   Section 13.7.\n   The format of this packet is\
    \ similar to that of the Data Description\n   packet.  The body of both packets\
    \ is simply a list of LSA headers.\n        0                   1            \
    \       2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       5       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                               |\n  \
    \     +-                                                             -+\n    \
    \   |                                                               |\n      \
    \ +-                         An LSA Header                       -+\n       |\
    \                                                               |\n       +- \
    \                                                            -+\n       |    \
    \                                                           |\n       +-     \
    \                                                        -+\n       |        \
    \                                                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \ Each acknowledged LSA is described by its LSA header.  The LSA header\n   is\
    \ documented in Section A.4.1.  It contains all the information\n   required to\
    \ uniquely identify both the LSA and the LSA's current\n   instance.\n"
- title: A.4 LSA formats
  contents:
  - "A.4 LSA formats\n   This memo defines five distinct types of LSAs.  Each LSA\
    \ begins with\n   a standard 20 byte LSA header.  This header is explained in\
    \ Section\n   A.4.1.  Succeeding sections then diagram the separate LSA types.\n\
    \   Each LSA describes a piece of the OSPF routing domain.  Every router\n   originates\
    \ a router-LSA.  In addition, whenever the router is elected\n   Designated Router,\
    \ it originates a network-LSA.  Other types of LSAs\n   may also be originated\
    \ (see Section 12.4). All LSAs are then flooded\n   throughout the OSPF routing\
    \ domain.  The flooding algorithm is\n   reliable, ensuring that all routers have\
    \ the same collection of LSAs.\n   (See Section 13 for more information concerning\
    \ the flooding\n   algorithm).  This collection of LSAs is called the link-state\n\
    \   database.\n   From the link state database, each router constructs a shortest\
    \ path\n   tree with itself as root.  This yields a routing table (see Section\n\
    \   11).  For the details of the routing table build process, see Section\n  \
    \ 16.\n"
- title: A.4.1 The LSA header
  contents:
  - "A.4.1 The LSA header\n   All LSAs begin with a common 20 byte header.  This header\
    \ contains\n   enough information to uniquely identify the LSA (LS type, Link\
    \ State\n   ID, and Advertising Router).  Multiple instances of the LSA may exist\n\
    \   in the routing domain at the same time.  It is then necessary to\n   determine\
    \ which instance is more recent.  This is accomplished by\n   examining the LS\
    \ age, LS sequence number and LS checksum fields that\n   are also contained in\
    \ the LSA header.\n        0                   1                   2         \
    \          3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |    Options    |    LS type    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   LS age\n\
    \      The time in seconds since the LSA was originated.\n   Options\n      The\
    \ optional capabilities supported by the described portion of\n      the routing\
    \ domain.  OSPF's optional capabilities are documented\n      in Section A.2.\n\
    \   LS type\n      The type of the LSA.  Each LSA type has a separate advertisement\n\
    \      format.  The LSA types defined in this memo are as follows (see\n     \
    \ Section 12.1.3 for further explanation):\n        LS Type   Description\n  \
    \      ___________________________________\n        1         Router-LSAs\n  \
    \      2         Network-LSAs\n        3         Summary-LSAs (IP network)\n \
    \       4         Summary-LSAs (ASBR)\n        5         AS-external-LSAs\n  \
    \ Link State ID\n      This field identifies the portion of the internet environment\n\
    \      that is being described by the LSA.  The contents of this field\n     \
    \ depend on the LSA's LS type.  For example, in network-LSAs the\n      Link State\
    \ ID is set to the IP interface address of the\n      network's Designated Router\
    \ (from which the network's IP address\n      can be derived).  The Link State\
    \ ID is further discussed in\n      Section 12.1.4.\n   Advertising Router\n \
    \     The Router ID of the router that originated the LSA.  For\n      example,\
    \ in network-LSAs this field is equal to the Router ID of\n      the network's\
    \ Designated Router.\n   LS sequence number\n      Detects old or duplicate LSAs.\
    \  Successive instances of an LSA\n      are given successive LS sequence numbers.\
    \  See Section 12.1.6\n      for more details.\n   LS checksum\n      The Fletcher\
    \ checksum of the complete contents of the LSA,\n      including the LSA header\
    \ but excluding the LS age field. See\n      Section 12.1.7 for more details.\n\
    \   length\n      The length in bytes of the LSA.  This includes the 20 byte LSA\n\
    \      header.\n"
- title: A.4.2 Router-LSAs
  contents:
  - "A.4.2 Router-LSAs\n   Router-LSAs are the Type 1 LSAs.  Each router in an area\
    \ originates a\n   router-LSA.  The LSA describes the state and cost of the router's\n\
    \   links (i.e., interfaces) to the area.  All of the router's links to\n   the\
    \ area must be described in a single router-LSA. For details\n   concerning the\
    \ construction of router-LSAs, see Section 12.4.1.\n        0                \
    \   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |       1       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \    0    |V|E|B|        0      |            # links            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          Link ID                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                         Link Data                             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \     Type      |     # TOS     |            metric             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |      TOS      |        0      |          TOS  metric          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Link ID                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                         Link Data                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n   In router-LSAs,\
    \ the Link State ID field is set to the router's OSPF\n   Router ID. Router-LSAs\
    \ are flooded throughout a single area only.\n   bit V\n      When set, the router\
    \ is an endpoint of one or more fully adjacent\n      virtual links having the\
    \ described area as Transit area (V is for\n      virtual link endpoint).\n  \
    \ bit E\n      When set, the router is an AS boundary router (E is for external).\n\
    \   bit B\n      When set, the router is an area border router (B is for border).\n\
    \   # links\n      The number of router links described in this LSA.  This must\
    \ be\n      the total collection of router links (i.e., interfaces) to the\n \
    \     area.\n   The following fields are used to describe each router link (i.e.,\n\
    \   interface). Each router link is typed (see the below Type field).\n   The\
    \ Type field indicates the kind of link being described. It may be\n   a link\
    \ to a transit network, to another router or to a stub network.\n   The values\
    \ of all the other fields describing a router link depend on\n   the link's Type.\
    \  For example, each link has an associated 32-bit\n   Link Data field. For links\
    \ to stub networks this field specifies the\n   network's IP address mask.  For\
    \ other link types the Link Data field\n   specifies the router interface's IP\
    \ address.\n   Type\n      A quick description of the router link.  One of the\
    \ following.\n      Note that host routes are classified as links to stub networks\n\
    \      with network mask of 0xffffffff.\n         Type   Description\n       \
    \  __________________________________________________\n         1      Point-to-point\
    \ connection to another router\n         2      Connection to a transit network\n\
    \         3      Connection to a stub network\n         4      Virtual link\n\
    \   Link ID\n      Identifies the object that this router link connects to.  Value\n\
    \      depends on the link's Type.  When connecting to an object that\n      also\
    \ originates an LSA (i.e., another router or a transit\n      network) the Link\
    \ ID is equal to the neighboring LSA's Link\n      State ID.  This provides the\
    \ key for looking up the neighboring\n      LSA in the link state database during\
    \ the routing table\n      calculation. See Section 12.2 for more details.\n \
    \      Type   Link ID\n       ______________________________________\n       1\
    \      Neighboring router's Router ID\n       2      IP address of Designated\
    \ Router\n       3      IP network/subnet number\n       4      Neighboring router's\
    \ Router ID\n   Link Data\n      Value again depends on the link's Type field.\
    \ For connections to\n      stub networks, Link Data specifies the network's IP\
    \ address\n      mask. For unnumbered point-to-point connections, it specifies\n\
    \      the interface's MIB-II [Ref8] ifIndex value. For the other link\n     \
    \ types it specifies the router interface's IP address. This\n      latter piece\
    \ of information is needed during the routing table\n      build process, when\
    \ calculating the IP address of the next hop.\n      See Section 16.1.1 for more\
    \ details.\n   # TOS\n      The number of different TOS metrics given for this\
    \ link, not\n      counting the required link metric (referred to as the TOS 0\n\
    \      metric in [Ref9]).  For example, if no additional TOS metrics\n      are\
    \ given, this field is set to 0.\n   metric\n      The cost of using this router\
    \ link.\n   Additional TOS-specific information may also be included, for\n  \
    \ backward compatibility with previous versions of the OSPF\n   specification\
    \ ([Ref9]). Within each link, and for each desired TOS,\n   TOS TOS-specific link\
    \ information may be encoded as follows:\n   TOS IP  Type of Service that this\
    \ metric refers to. The encoding of\n      TOS in OSPF LSAs is described in Section\
    \ 12.3.\n   TOS metric\n      TOS-specific metric information.\n"
- title: A.4.3 Network-LSAs
  contents:
  - "A.4.3 Network-LSAs\n   Network-LSAs are the Type 2 LSAs.  A network-LSA is originated\
    \ for\n   each broadcast and NBMA network in the area which supports two or\n\
    \   more routers.  The network-LSA is originated by the network's\n   Designated\
    \ Router. The LSA describes all routers attached to the\n   network, including\
    \ the Designated Router itself.  The LSA's Link\n   State ID field lists the IP\
    \ interface address of the Designated\n   Router.\n   The distance from the network\
    \ to all attached routers is zero.  This\n   is why metric fields need not be\
    \ specified in the network-LSA.  For\n   details concerning the construction of\
    \ network-LSAs, see Section\n   12.4.2.\n        0                   1       \
    \            2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |      Options  |      2        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Attached Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n   Network\
    \ Mask\n      The IP address mask for the network.  For example, a class A\n \
    \     network would have the mask 0xff000000.\n   Attached Router\n      The Router\
    \ IDs of each of the routers attached to the network.\n      Actually, only those\
    \ routers that are fully adjacent to the\n      Designated Router are listed.\
    \  The Designated Router includes\n      itself in this list.  The number of routers\
    \ included can be\n      deduced from the LSA header's length field.\n"
- title: A.4.4 Summary-LSAs
  contents:
  - "A.4.4 Summary-LSAs\n   Summary-LSAs are the Type 3 and 4 LSAs.  These LSAs are\
    \ originated by\n   area border routers. Summary-LSAs describe inter-area destinations.\n\
    \   For details concerning the construction of summary-LSAs, see Section\n   12.4.3.\n\
    \   Type 3 summary-LSAs are used when the destination is an IP network.\n   In\
    \ this case the LSA's Link State ID field is an IP network number\n   (if necessary,\
    \ the Link State ID can also have one or more of the\n   network's \"host\" bits\
    \ set; see Appendix E for details). When the\n   destination is an AS boundary\
    \ router, a Type 4 summary-LSA is used,\n   and the Link State ID field is the\
    \ AS boundary router's OSPF Router\n   ID.  (To see why it is necessary to advertise\
    \ the location of each\n   ASBR, consult Section 16.4.)  Other than the difference\
    \ in the Link\n   State ID field, the format of Type 3 and 4 summary-LSAs is identical.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |    3 or 4     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      0        |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |     TOS       |                TOS  metric                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                              ...                              |\n   For stub\
    \ areas, Type 3 summary-LSAs can also be used to describe a\n   (per-area) default\
    \ route.  Default summary routes are used in stub\n   areas instead of flooding\
    \ a complete set of external routes.  When\n   describing a default summary route,\
    \ the summary-LSA's Link State ID\n   is always set to DefaultDestination (0.0.0.0)\
    \ and the Network Mask is\n   set to 0.0.0.0.\n   Network Mask\n      For Type\
    \ 3 summary-LSAs, this indicates the destination network's\n      IP address mask.\
    \  For example, when advertising the location of a\n      class A network the\
    \ value 0xff000000 would be used.  This field is\n      not meaningful and must\
    \ be zero for Type 4 summary-LSAs.\n   metric\n      The cost of this route. \
    \ Expressed in the same units as the\n      interface costs in the router-LSAs.\n\
    \   Additional TOS-specific information may also be included, for\n   backward\
    \ compatibility with previous versions of the OSPF\n   specification ([Ref9]).\
    \ For each desired TOS, TOS-specific\n   information is encoded as follows:\n\
    \   TOS IP Type of Service that this metric refers to. The encoding of\n     \
    \ TOS in OSPF LSAs is described in Section 12.3.\n   TOS metric\n      TOS-specific\
    \ metric information.\n"
- title: A.4.5 AS-external-LSAs
  contents:
  - "A.4.5 AS-external-LSAs\n   AS-external-LSAs are the Type 5 LSAs.  These LSAs\
    \ are originated by\n   AS boundary routers, and describe destinations external\
    \ to the AS.\n   For details concerning the construction of AS-external-LSAs,\
    \ see\n   Section 12.4.3.\n   AS-external-LSAs usually describe a particular external\
    \ destination.\n   For these LSAs the Link State ID field specifies an IP network\
    \ number\n   (if necessary, the Link State ID can also have one or more of the\n\
    \   network's \"host\" bits set; see Appendix E for details).  AS-\n   external-LSAs\
    \ are also used to describe a default route.  Default\n   routes are used when\
    \ no specific route exists to the destination.\n   When describing a default route,\
    \ the Link State ID is always set to\n   DefaultDestination (0.0.0.0) and the\
    \ Network Mask is set to 0.0.0.0.\n        0                   1             \
    \      2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |      5        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |E|     0       |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Forwarding address                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                      External Route Tag                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |E|    TOS      |                TOS  metric                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Forwarding address                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                      External Route Tag                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \ Network Mask\n      The IP address mask for the advertised destination.  For\n\
    \      example, when advertising a class A network the mask 0xff000000\n     \
    \ would be used.\n   bit E\n      The type of external metric.  If bit E is set,\
    \ the metric\n      specified is a Type 2 external metric.  This means the metric\
    \ is\n      considered larger than any link state path.  If bit E is zero,\n \
    \     the specified metric is a Type 1 external metric.  This means\n      that\
    \ it is expressed in the same units as the link state metric\n      (i.e., the\
    \ same units as interface cost).\n   metric\n      The cost of this route.  Interpretation\
    \ depends on the external\n      type indication (bit E above).\n   Forwarding\
    \ address\n      Data traffic for the advertised destination will be forwarded\
    \ to\n      this address.  If the Forwarding address is set to 0.0.0.0, data\n\
    \      traffic will be forwarded instead to the LSA's originator (i.e.,\n    \
    \  the responsible AS boundary router).\n   External Route Tag\n       A 32-bit\
    \ field attached to each external route.  This is not\n       used by the OSPF\
    \ protocol itself.  It may be used to communicate\n       information between\
    \ AS boundary routers; the precise nature of\n       such information is outside\
    \ the scope of this specification.\n   Additional TOS-specific information may\
    \ also be included, for\n   backward compatibility with previous versions of the\
    \ OSPF\n   specification ([Ref9]). For each desired TOS, TOS-specific\n   information\
    \ is encoded as follows:\n   TOS The Type of Service that the following fields\
    \ concern. The\n      encoding of TOS in OSPF LSAs is described in Section 12.3.\n\
    \   bit E\n      For backward-compatibility with [Ref9].\n   TOS metric\n    \
    \  TOS-specific metric information.\n   Forwarding address\n      For backward-compatibility\
    \ with [Ref9].\n   External Route Tag\n      For backward-compatibility with [Ref9].\n"
- title: B. Architectural Constants
  contents:
  - "B. Architectural Constants\n   Several OSPF protocol parameters have fixed architectural\
    \ values.\n   These parameters have been referred to in the text by names such\
    \ as\n   LSRefreshTime.  The same naming convention is used for the\n   configurable\
    \ protocol parameters.  They are defined in Appendix C.\n   The name of each architectural\
    \ constant follows, together with its\n   value and a short description of its\
    \ function.\n   LSRefreshTime\n      The maximum time between distinct originations\
    \ of any particular\n      LSA.  If the LS age field of one of the router's self-originated\n\
    \      LSAs reaches the value LSRefreshTime, a new instance of the LSA is\n  \
    \    originated, even though the contents of the LSA (apart from the\n      LSA\
    \ header) will be the same.  The value of LSRefreshTime is set\n      to 30 minutes.\n\
    \   MinLSInterval\n      The minimum time between distinct originations of any\
    \ particular\n      LSA.  The value of MinLSInterval is set to 5 seconds.\n  \
    \ MinLSArrival\n      For any particular LSA, the minimum time that must elapse\n\
    \      between reception of new LSA instances during flooding. LSA\n      instances\
    \ received at higher frequencies are discarded. The value\n      of MinLSArrival\
    \ is set to 1 second.\n   MaxAge\n      The maximum age that an LSA can attain.\
    \ When an LSA's LS age field\n      reaches MaxAge, it is reflooded in an attempt\
    \ to flush the LSA\n      from the routing domain (See Section 14). LSAs of age\
    \ MaxAge are\n      not used in the routing table calculation.  The value of MaxAge\
    \ is\n      set to 1 hour.\n   CheckAge\n      When the age of an LSA in the link\
    \ state database hits a multiple\n      of CheckAge, the LSA's checksum is verified.\
    \  An incorrect\n      checksum at this time indicates a serious error.  The value\
    \ of\n      CheckAge is set to 5 minutes.\n   MaxAgeDiff\n      The maximum time\
    \ dispersion that can occur, as an LSA is flooded\n      throughout the AS.  Most\
    \ of this time is accounted for by the LSAs\n      sitting on router output queues\
    \ (and therefore not aging) during\n      the flooding process.  The value of\
    \ MaxAgeDiff is set to 15\n      minutes.\n   LSInfinity\n      The metric value\
    \ indicating that the destination described by an\n      LSA is unreachable. Used\
    \ in summary-LSAs and AS-external-LSAs as\n      an alternative to premature aging\
    \ (see Section 14.1). It is\n      defined to be the 24-bit binary value of all\
    \ ones: 0xffffff.\n   DefaultDestination\n      The Destination ID that indicates\
    \ the default route.  This route\n      is used when no other matching routing\
    \ table entry can be found.\n      The default destination can only be advertised\
    \ in AS-external-\n      LSAs and in stub areas' type 3 summary-LSAs.  Its value\
    \ is the IP\n      address 0.0.0.0. Its associated Network Mask is also always\n\
    \      0.0.0.0.\n   InitialSequenceNumber\n      The value used for LS Sequence\
    \ Number when originating the first\n      instance of any LSA. Its value is the\
    \ signed 32-bit integer\n      0x80000001.\n   MaxSequenceNumber\n      The maximum\
    \ value that LS Sequence Number can attain.  Its value\n      is the signed 32-bit\
    \ integer 0x7fffffff.\n"
- title: C. Configurable Constants
  contents:
  - "C. Configurable Constants\n   The OSPF protocol has quite a few configurable\
    \ parameters. These\n   parameters are listed below.  They are grouped into general\n\
    \   functional categories (area parameters, interface parameters, etc.).\n   Sample\
    \ values are given for some of the parameters.\n   Some parameter settings need\
    \ to be consistent among groups of\n   routers.  For example, all routers in an\
    \ area must agree on that\n   area's parameters, and all routers attached to a\
    \ network must agree\n   on that network's IP network number and mask.\n   Some\
    \ parameters may be determined by router algorithms outside of\n   this specification\
    \ (e.g., the address of a host connected to the\n   router via a SLIP line). \
    \ From OSPF's point of view, these items are\n   still configurable.\n"
- title: C.1 Global parameters
  contents:
  - "C.1 Global parameters\n   In general, a separate copy of the OSPF protocol is\
    \ run for each\n   area.  Because of this, most configuration parameters are defined\
    \ on\n   a per-area basis.  The few global configuration parameters are listed\n\
    \   below.\n   Router ID\n       This is a 32-bit number that uniquely identifies\
    \ the router in\n       the Autonomous System.  One algorithm for Router ID assignment\
    \ is\n       to choose the largest or smallest IP address assigned to the\n  \
    \     router.  If a router's OSPF Router ID is changed, the router's\n       OSPF\
    \ software should be restarted before the new Router ID takes\n       effect.\
    \ Before restarting in order to change its Router ID, the\n       router should\
    \ flush its self-originated LSAs from the routing\n       domain (see Section\
    \ 14.1), or they will persist for up to MaxAge\n       minutes.\n   RFC1583Compatibility\n\
    \       Controls the preference rules used in Section 16.4 when choosing\n   \
    \    among multiple AS-external-LSAs advertising the same destination.\n     \
    \  When set to \"enabled\", the preference rules remain those\n       specified\
    \ by RFC 1583 ([Ref9]). When set to \"disabled\", the\n       preference rules\
    \ are those stated in Section 16.4.1, which\n       prevent routing loops when\
    \ AS- external-LSAs for the same\n       destination have been originated from\
    \ different areas (see\n       Section G.7). Set to \"enabled\" by default.\n\
    \       In order to minimize the chance of routing loops, all OSPF\n       routers\
    \ in an OSPF routing domain should have\n       RFC1583Compatibility set identically.\
    \ When there are routers\n       present that have not been updated with the functionality\n\
    \       specified in Section 16.4.1 of this memo, all routers should have\n  \
    \     RFC1583Compatibility set to \"enabled\". Otherwise, all routers\n      \
    \ should have RFC1583Compatibility set to \"disabled\", preventing\n       all\
    \ routing loops.\n"
- title: C.2 Area parameters
  contents:
  - "C.2 Area parameters\n   All routers belonging to an area must agree on that area's\n\
    \   configuration.  Disagreements between two routers will lead to an\n   inability\
    \ for adjacencies to form between them, with a resulting\n   hindrance to the\
    \ flow of routing protocol and data traffic.  The\n   following items must be\
    \ configured for an area:\n   Area ID\n       This is a 32-bit number that identifies\
    \ the area.  The Area ID of\n       0.0.0.0 is reserved for the backbone.  If\
    \ the area represents a\n       subnetted network, the IP network number of the\
    \ subnetted network\n       may be used for the Area ID.\n   List of address ranges\n\
    \       An OSPF area is defined as a list of address ranges. Each address\n  \
    \     range consists of the following items:\n       [IP address, mask]\n    \
    \       Describes the collection of IP addresses contained in the\n          \
    \ address range. Networks and hosts are assigned to an area\n           depending\
    \ on whether their addresses fall into one of the\n           area's defining\
    \ address ranges.  Routers are viewed as\n           belonging to multiple areas,\
    \ depending on their attached\n           networks' area membership.\n       Status\
    \  Set to either Advertise or DoNotAdvertise. Routing\n           information\
    \ is condensed at area boundaries.  External to the\n           area, at most\
    \ a single route is advertised (via a summary-\n           LSA) for each address\
    \ range. The route is advertised if and\n           only if the address range's\
    \ Status is set to Advertise.\n           Unadvertised ranges allow the existence\
    \ of certain networks\n           to be intentionally hidden from other areas.\
    \ Status is set to\n           Advertise by default.\n           As an example,\
    \ suppose an IP subnetted network is to be its\n           own OSPF area.  The\
    \ area would be configured as a single\n           address range, whose IP address\
    \ is the address of the\n           subnetted network, and whose mask is the natural\
    \ class A, B,\n           or C address mask. A single route would be advertised\n\
    \           external to the area, describing the entire subnetted\n          \
    \ network.\n       ExternalRoutingCapability\n           Whether AS-external-LSAs\
    \ will be flooded into/throughout the\n           area.  If AS-external-LSAs are\
    \ excluded from the area, the\n           area is called a \"stub\".  Internal\
    \ to stub areas, routing to\n           external destinations will be based solely\
    \ on a default\n           summary route.  The backbone cannot be configured as\
    \ a stub\n           area.  Also, virtual links cannot be configured through stub\n\
    \           areas.  For more information, see Section 3.6.\n       StubDefaultCost\n\
    \           If the area has been configured as a stub area, and the\n        \
    \   router itself is an area border router, then the\n           StubDefaultCost\
    \ indicates the cost of the default summary-LSA\n           that the router should\
    \ advertise into the area.\n"
- title: C.3 Router interface parameters
  contents:
  - "C.3 Router interface parameters\n   Some of the configurable router interface\
    \ parameters (such as IP\n   interface address and subnet mask) actually imply\
    \ properties of the\n   attached networks, and therefore must be consistent across\
    \ all the\n   routers attached to that network.  The parameters that must be\n\
    \   configured for a router interface are:\n   IP interface address\n       The\
    \ IP protocol address for this interface.  This uniquely\n       identifies the\
    \ router over the entire internet.  An IP address is\n       not required on point-to-point\
    \ networks.  Such a point-to-point\n       network is called \"unnumbered\".\n\
    \   IP interface mask\n       Also referred to as the subnet/network mask, this\
    \ indicates the\n       portion of the IP interface address that identifies the\
    \ attached\n       network.  Masking the IP interface address with the IP interface\n\
    \       mask yields the IP network number of the attached network.  On\n     \
    \  point-to-point networks and virtual links, the IP interface mask\n       is\
    \ not defined. On these networks, the link itself is not\n       assigned an IP\
    \ network number, and so the addresses of each side\n       of the link are assigned\
    \ independently, if they are assigned at\n       all.\n   Area ID\n       The\
    \ OSPF area to which the attached network belongs.\n   Interface output cost\n\
    \       The cost of sending a packet on the interface, expressed in the\n    \
    \   link state metric.  This is advertised as the link cost for this\n       interface\
    \ in the router's router-LSA. The interface output cost\n       must always be\
    \ greater than 0.\n   RxmtInterval\n       The number of seconds between LSA retransmissions,\
    \ for\n       adjacencies belonging to this interface.  Also used when\n     \
    \  retransmitting Database Description and Link State Request\n       Packets.\
    \  This should be well over the expected round-trip delay\n       between any\
    \ two routers on the attached network.  The setting of\n       this value should\
    \ be conservative or needless retransmissions\n       will result.  Sample value\
    \ for a local area network: 5 seconds.\n   InfTransDelay\n       The estimated\
    \ number of seconds it takes to transmit a Link State\n       Update Packet over\
    \ this interface.  LSAs contained in the update\n       packet must have their\
    \ age incremented by this amount before\n       transmission.  This value should\
    \ take into account the\n       transmission and propagation delays of the interface.\
    \ It must be\n       greater than 0.  Sample value for a local area network: 1\
    \ second.\n   Router Priority\n       An 8-bit unsigned integer. When two routers\
    \ attached to a network\n       both attempt to become Designated Router, the\
    \ one with the\n       highest Router Priority takes precedence. If there is still\
    \ a\n       tie, the router with the highest Router ID takes precedence.  A\n\
    \       router whose Router Priority is set to 0 is ineligible to become\n   \
    \    Designated Router on the attached network.  Router Priority is\n       only\
    \ configured for interfaces to broadcast and NBMA networks.\n   HelloInterval\n\
    \       The length of time, in seconds, between the Hello Packets that\n     \
    \  the router sends on the interface.  This value is advertised in\n       the\
    \ router's Hello Packets.  It must be the same for all routers\n       attached\
    \ to a common network. The smaller the HelloInterval, the\n       faster topological\
    \ changes will be detected; however, more OSPF\n       routing protocol traffic\
    \ will ensue.  Sample value for a X.25 PDN\n       network: 30 seconds.  Sample\
    \ value for a local area network: 10\n       seconds.\n   RouterDeadInterval\n\
    \       After ceasing to hear a router's Hello Packets, the number of\n      \
    \ seconds before its neighbors declare the router down.  This is\n       also\
    \ advertised in the router's Hello Packets in their\n       RouterDeadInterval\
    \ field.  This should be some multiple of the\n       HelloInterval (say 4). \
    \ This value again must be the same for all\n       routers attached to a common\
    \ network.\n   AuType\n       Identifies the authentication procedure to be used\
    \ on the\n       attached network.  This value must be the same for all routers\n\
    \       attached to the network.  See Appendix D for a discussion of the\n   \
    \    defined authentication types.\n   Authentication key\n       This configured\
    \ data allows the authentication procedure to\n       verify OSPF protocol packets\
    \ received over the interface.  For\n       example, if the AuType indicates simple\
    \ password, the\n       Authentication key would be a clear 64-bit password.\n\
    \       Authentication keys associated with the other OSPF authentication\n  \
    \     types are discussed in Appendix D.\n"
- title: C.4 Virtual link parameters
  contents:
  - "C.4 Virtual link parameters\n   Virtual links are used to restore/increase connectivity\
    \ of the\n   backbone.  Virtual links may be configured between any pair of area\n\
    \   border routers having interfaces to a common (non-backbone) area.\n   The\
    \ virtual link appears as an unnumbered point-to-point link in the\n   graph for\
    \ the backbone.  The virtual link must be configured in both\n   of the area border\
    \ routers.\n   A virtual link appears in router-LSAs (for the backbone) as if\
    \ it\n   were a separate router interface to the backbone.  As such, it has\n\
    \   all of the parameters associated with a router interface (see Section\n  \
    \ C.3).  Although a virtual link acts like an unnumbered point-to-point\n   link,\
    \ it does have an associated IP interface address.  This address\n   is used as\
    \ the IP source in OSPF protocol packets it sends along the\n   virtual link,\
    \ and is set dynamically during the routing table build\n   process.  Interface\
    \ output cost is also set dynamically on virtual\n   links to be the cost of the\
    \ intra-area path between the two routers.\n   The parameter RxmtInterval must\
    \ be configured, and should be well\n   over the expected round-trip delay between\
    \ the two routers.  This may\n   be hard to estimate for a virtual link; it is\
    \ better to err on the\n   side of making it too large.  Router Priority is not\
    \ used on virtual\n   links.\n   A virtual link is defined by the following two\
    \ configurable\n   parameters: the Router ID of the virtual link's other endpoint,\
    \ and\n   the (non-backbone) area through which the virtual link runs (referred\n\
    \   to as the virtual link's Transit area).  Virtual links cannot be\n   configured\
    \ through stub areas.\n"
- title: C.5 NBMA network parameters
  contents:
  - "C.5 NBMA network parameters\n   OSPF treats an NBMA network much like it treats\
    \ a broadcast network.\n   Since there may be many routers attached to the network,\
    \ a Designated\n   Router is selected for the network.  This Designated Router\
    \ then\n   originates a network-LSA, which lists all routers attached to the\n\
    \   NBMA network.\n   However, due to the lack of broadcast capabilities, it may\
    \ be\n   necessary to use configuration parameters in the Designated Router\n\
    \   selection.  These parameters will only need to be configured in those\n  \
    \ routers that are themselves eligible to become Designated Router\n   (i.e.,\
    \ those router's whose Router Priority for the network is non-\n   zero), and\
    \ then only if no automatic procedure for discovering\n   neighbors exists:\n\
    \   List of all other attached routers\n       The list of all other routers attached\
    \ to the NBMA network.  Each\n       router is listed by its IP interface address\
    \ on the network.\n       Also, for each router listed, that router's eligibility\
    \ to become\n       Designated Router must be defined.  When an interface to a\
    \ NBMA\n       network comes up, the router sends Hello Packets only to those\n\
    \       neighbors eligible to become Designated Router, until the\n       identity\
    \ of the Designated Router is discovered.\n   PollInterval\n       If a neighboring\
    \ router has become inactive (Hello Packets have\n       not been seen for RouterDeadInterval\
    \ seconds), it may still be\n       necessary to send Hello Packets to the dead\
    \ neighbor.  These\n       Hello Packets will be sent at the reduced rate PollInterval,\n\
    \       which should be much larger than HelloInterval.  Sample value for\n  \
    \     a PDN X.25 network: 2 minutes.\n"
- title: C.6 Point-to-MultiPoint network parameters
  contents:
  - "C.6 Point-to-MultiPoint network parameters\n   On Point-to-MultiPoint networks,\
    \ it may be necessary to configure the\n   set of neighbors that are directly\
    \ reachable over the Point-to-\n   MultiPoint network. Each neighbor is identified\
    \ by its IP address on\n   the Point-to-MultiPoint network. Designated Routers\
    \ are not elected\n   on Point-to-MultiPoint networks, so the Designated Router\
    \ eligibility\n   of configured neighbors is undefined.\n   Alternatively, neighbors\
    \ on Point-to-MultiPoint networks may be\n   dynamically discovered by lower-level\
    \ protocols such as Inverse ARP\n   ([Ref14]).\n"
- title: C.7 Host route parameters
  contents:
  - "C.7 Host route parameters\n   Host routes are advertised in router-LSAs as stub\
    \ networks with mask\n   0xffffffff.  They indicate either router interfaces to\
    \ point-to-point\n   networks, looped router interfaces, or IP hosts that are\
    \ directly\n   connected to the router (e.g., via a SLIP line). For each host\n\
    \   directly connected to the router, the following items must be\n   configured:\n\
    \   Host IP address\n       The IP address of the host.\n   Cost of link to host\n\
    \       The cost of sending a packet to the host, in terms of the link\n     \
    \  state metric. However, since the host probably has only a single\n       connection\
    \ to the internet, the actual configured cost in many\n       cases is unimportant\
    \ (i.e., will have no effect on routing).\n   Area ID\n       The OSPF area to\
    \ which the host belongs.\n"
- title: D. Authentication
  contents:
  - "D. Authentication\n   All OSPF protocol exchanges are authenticated.  The OSPF\
    \ packet\n   header (see Section A.3.1) includes an authentication type field,\
    \ and\n   64-bits of data for use by the appropriate authentication scheme\n \
    \  (determined by the type field).\n   The authentication type is configurable\
    \ on a per-interface (or\n   equivalently, on a per-network/subnet) basis.  Additional\n\
    \   authentication data is also configurable on a per-interface basis.\n   Authentication\
    \ types 0, 1 and 2 are defined by this specification.\n   All other authentication\
    \ types are reserved for definition by the\n   IANA (iana@ISI.EDU).  The current\
    \ list of authentication types is\n   described below in Table 20.\n         \
    \ AuType       Description\n          ___________________________________________\n\
    \          0            Null authentication\n          1            Simple password\n\
    \          2            Cryptographic authentication\n          All others   Reserved\
    \ for assignment by the\n                       IANA (iana@ISI.EDU)\n        \
    \          Table 20: OSPF authentication types.\n"
- title: D.1 Null authentication
  contents:
  - "D.1 Null authentication\n   Use of this authentication type means that routing\
    \ exchanges over the\n   network/subnet are not authenticated. The 64-bit authentication\
    \ field\n   in the OSPF header can contain anything; it is not examined on packet\n\
    \   reception. When employing Null authentication, the entire contents of\n  \
    \ each OSPF packet (other than the 64-bit authentication field) are\n   checksummed\
    \ in order to detect data corruption.\n"
- title: D.2 Simple password authentication
  contents:
  - "D.2 Simple password authentication\n   Using this authentication type, a 64-bit\
    \ field is configured on a\n   per-network basis.  All packets sent on a particular\
    \ network must\n   have this configured value in their OSPF header 64-bit authentication\n\
    \   field.  This essentially serves as a \"clear\" 64- bit password. In\n   addition,\
    \ the entire contents of each OSPF packet (other than the\n   64-bit authentication\
    \ field) are checksummed in order to detect data\n   corruption.\n   Simple password\
    \ authentication guards against routers inadvertently\n   joining the routing\
    \ domain; each router must first be configured with\n   its attached networks'\
    \ passwords before it can participate in\n   routing.  However, simple password\
    \ authentication is vulnerable to\n   passive attacks currently widespread in\
    \ the Internet (see [Ref16]).\n   Anyone with physical access to the network can\
    \ learn the password and\n   compromise the security of the OSPF routing domain.\n"
- title: D.3 Cryptographic authentication
  contents:
  - "D.3 Cryptographic authentication\n   Using this authentication type, a shared\
    \ secret key is configured in\n   all routers attached to a common network/subnet.\
    \  For each OSPF\n   protocol packet, the key is used to generate/verify a \"\
    message\n   digest\" that is appended to the end of the OSPF packet. The message\n\
    \   digest is a one-way function of the OSPF protocol packet and the\n   secret\
    \ key. Since the secret key is never sent over the network in\n   the clear, protection\
    \ is provided against passive attacks.\n   The algorithms used to generate and\
    \ verify the message digest are\n   specified implicitly by the secret key. This\
    \ specification completely\n   defines the use of OSPF Cryptographic authentication\
    \ when the MD5\n   algorithm is used.\n   In addition, a non-decreasing sequence\
    \ number is included in each\n   OSPF protocol packet to protect against replay\
    \ attacks.  This\n   provides long term protection; however, it is still possible\
    \ to\n   replay an OSPF packet until the sequence number changes. To implement\n\
    \   this feature, each neighbor data structure\n        0                   1\
    \                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |              0                |    Key ID     | Auth Data Len |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                 Cryptographic sequence number                 |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \      Figure 18: Usage of the Authentication field\n              in the OSPF\
    \ packet header when Cryptographic\n                       Authentication is employed\n\
    \   contains a new field called the \"cryptographic sequence number\".\n   This\
    \ field is initialized to zero, and is also set to zero whenever\n   the neighbor's\
    \ state transitions to \"Down\". Whenever an OSPF packet\n   is accepted as authentic,\
    \ the cryptographic sequence number is set to\n   the received packet's sequence\
    \ number.\n   This specification does not provide a rollover procedure for the\n\
    \   cryptographic sequence number. When the cryptographic sequence number\n  \
    \ that the router is sending hits the maximum value, the router should\n   reset\
    \ the cryptographic sequence number that it is sending back to 0.\n   After this\
    \ is done, the router's neighbors will reject the router's\n   OSPF packets for\
    \ a period of RouterDeadInterval, and then the router\n   will be forced to reestablish\
    \ all adjacencies over the interface.\n   However, it is expected that many implementations\
    \ will use \"seconds\n   since reboot\" (or \"seconds since 1960\", etc.) as the\
    \ cryptographic\n   sequence number. Such a choice will essentially prevent rollover,\n\
    \   since the cryptographic sequence number field is 32 bits in length.\n   The\
    \ OSPF Cryptographic authentication option does not provide\n   confidentiality.\n\
    \   When cryptographic authentication is used, the 64-bit Authentication\n   field\
    \ in the standard OSPF packet header is redefined as shown in\n   Figure 18. The\
    \ new field definitions are as follows:\n   Key ID\n       This field identifies\
    \ the algorithm and secret key used to create\n       the message digest appended\
    \ to the OSPF packet. Key Identifiers\n       are unique per-interface (or equivalently,\
    \ per- subnet).\n   Auth Data Len\n       The length in bytes of the message digest\
    \ appended to the OSPF\n       packet.\n   Cryptographic sequence number\n   \
    \    An unsigned 32-bit non-decreasing sequence number. Used to guard\n      \
    \ against replay attacks.\n   The message digest appended to the OSPF packet is\
    \ not actually\n   considered part of the OSPF protocol packet: the message digest\
    \ is\n   not included in the OSPF header's packet length, although it is\n   included\
    \ in the packet's IP header length field.\n   Each key is identified by the combination\
    \ of interface and Key ID. An\n   interface may have multiple keys active at any\
    \ one time.  This\n   enables smooth transition from one key to another. Each\
    \ key has four\n   time constants associated with it. These time constants can\
    \ be\n   expressed in terms of a time-of-day clock, or in terms of a router's\n\
    \   local clock (e.g., number of seconds since last reboot):\n   KeyStartAccept\n\
    \       The time that the router will start accepting packets that\n       have\
    \ been created with the given key.\n   KeyStartGenerate\n       The time that\
    \ the router will start using the key for packet\n       generation.\n   KeyStopGenerate\n\
    \       The time that the router will stop using the key for packet\n       generation.\n\
    \   KeyStopAccept\n       The time that the router will stop accepting packets\
    \ that\n       have been created with the given key.\n   In order to achieve smooth\
    \ key transition, KeyStartAccept should be\n   less than KeyStartGenerate and\
    \ KeyStopGenerate should be less than\n   KeyStopAccept. If KeyStopGenerate and\
    \ KeyStopAccept are left\n   unspecified, the key's lifetime is infinite. When\
    \ a new key replaces\n   an old, the KeyStartGenerate time for the new key must\
    \ be less than\n   or equal to the KeyStopGenerate time of the old key.\n   Key\
    \ storage should persist across a system restart, warm or cold, to\n   avoid operational\
    \ issues. In the event that the last key associated\n   with an interface expires,\
    \ it is unacceptable to revert to an\n   unauthenticated condition, and not advisable\
    \ to disrupt routing.\n   Therefore, the router should send a \"last authentication\
    \ key\n   expiration\" notification to the network manager and treat the key as\n\
    \   having an infinite lifetime until the lifetime is extended, the key\n   is\
    \ deleted by network management, or a new key is configured.\n"
- title: D.4 Message generation
  contents:
  - "D.4 Message generation\n   After building the contents of an OSPF packet, the\
    \ authentication\n   procedure indicated by the sending interface's Autype value\
    \ is called\n   before the packet is sent. The authentication procedure modifies\
    \ the\n   OSPF packet as follows.\n"
- title: D.4.1 Generating Null authentication
  contents:
  - "D.4.1 Generating Null authentication\n   When using Null authentication, the\
    \ packet is modified as follows:\n   (1) The Autype field in the standard OSPF\
    \ header is set to\n       0.\n   (2) The checksum field in the standard OSPF\
    \ header is set to\n       the standard IP checksum of the entire contents of\
    \ the packet,\n       starting with the OSPF packet header but excluding the 64-bit\n\
    \       authentication field.  This checksum is calculated as the 16-bit\n   \
    \    one's complement of the one's complement sum of all the 16-bit\n       words\
    \ in the packet, excepting the authentication field.  If the\n       packet's\
    \ length is not an integral number of 16-bit words, the\n       packet is padded\
    \ with a byte of zero before checksumming.\n"
- title: D.4.2 Generating Simple password authentication
  contents:
  - "D.4.2 Generating Simple password authentication\n   When using Simple password\
    \ authentication, the packet is modified as\n   follows:\n   (1) The Autype field\
    \ in the standard OSPF header is set to 1.\n   (2) The checksum field in the standard\
    \ OSPF header is set to the\n       standard IP checksum of the entire contents\
    \ of the packet,\n       starting with the OSPF packet header but excluding the\
    \ 64-bit\n       authentication field.  This checksum is calculated as the 16-bit\n\
    \       one's complement of the one's complement sum of all the 16-bit\n     \
    \  words in the packet, excepting the authentication field.  If the\n       packet's\
    \ length is not an integral number of 16-bit words, the\n       packet is padded\
    \ with a byte of zero before checksumming.\n   (3) The 64-bit authentication field\
    \ in the OSPF packet header\n       is set to the 64-bit password (i.e., authentication\
    \ key) that has\n       been configured for the interface.\n"
- title: D.4.3 Generating Cryptographic authentication
  contents:
  - "D.4.3 Generating Cryptographic authentication\n   When using Cryptographic authentication,\
    \ there may be multiple keys\n   configured for the interface. In this case, among\
    \ the keys that are\n   valid for message generation (i.e, that have KeyStartGenerate\
    \ <=\n   current time < KeyStopGenerate) choose the one with the most recent\n\
    \   KeyStartGenerate time. Using this key, modify the packet as follows:\n   (1)\
    \ The Autype field in the standard OSPF header is set to\n       2.\n   (2) The\
    \ checksum field in the standard OSPF header is not\n       calculated, but is\
    \ instead set to 0.\n   (3) The Key ID (see Figure 18) is set to the chosen key's\n\
    \       Key ID.\n   (4) The Auth Data Len field is set to the length in bytes\
    \ of\n       the message digest that will be appended to the OSPF packet. When\n\
    \       using MD5 as the authentication algorithm, Auth Data Len will be\n   \
    \    16.\n   (5) The 32-bit Cryptographic sequence number (see Figure 18)\n  \
    \     is set to a non-decreasing value (i.e., a value at least as large\n    \
    \   as the last value sent out the interface).  The precise values to\n      \
    \ use in the cryptographic sequence number field are\n       implementation-specific.\
    \  For example, it may be based on a\n       simple counter, or be based on the\
    \ system's clock.\n   (6) The message digest is then calculated and appended to\n\
    \       the OSPF packet.  The authentication algorithm to be used in\n       calculating\
    \ the digest is indicated by the key itself.  Input to\n       the authentication\
    \ algorithm consists of the OSPF packet and the\n       secret key. When using\
    \ MD5 as the authentication algorithm, the\n       message digest calculation\
    \ proceeds as follows:\n          (a) The 16 byte MD5 key is appended to the OSPF\
    \ packet.\n          (b) Trailing pad and length fields are added, as specified\
    \ in\n              [Ref17].\n          (c) The MD5 authentication algorithm is\
    \ run over the\n              concatenation of the OSPF packet, secret key, pad\
    \ and\n              length fields, producing a 16 byte message digest (see\n\
    \              [Ref17]).\n          (d) The MD5 digest is written over the OSPF\
    \ key (i.e.,\n              appended to the original OSPF packet). The digest\
    \ is not\n              counted in the OSPF packet's length field, but is included\n\
    \              in the packet's IP length field. Any trailing pad or\n        \
    \      length fields beyond the digest are not counted or\n              transmitted.\n"
- title: D.5 Message verification
  contents:
  - "D.5 Message verification\n   When an OSPF packet has been received on an interface,\
    \ it must be\n   authenticated. The authentication procedure is indicated by the\n\
    \   setting of Autype in the standard OSPF packet header, which matches\n   the\
    \ setting of Autype for the receiving OSPF interface.\n   If an OSPF protocol\
    \ packet is accepted as authentic, processing of\n   the packet continues as specified\
    \ in Section 8.2. Packets which fail\n   authentication are discarded.\n"
- title: D.5.1 Verifying Null authentication
  contents:
  - "D.5.1 Verifying Null authentication\n   When using Null authentication, the checksum\
    \ field in the OSPF header\n   must be verified. It must be set to the 16-bit\
    \ one's complement of\n   the one's complement sum of all the 16-bit words in\
    \ the packet,\n   excepting the authentication field.  (If the packet's length\
    \ is not\n   an integral number of 16-bit words, the packet is padded with a byte\n\
    \   of zero before checksumming.)\n"
- title: D.5.2 Verifying Simple password authentication
  contents:
  - "D.5.2 Verifying Simple password authentication\n   When using Simple password\
    \ authentication, the received OSPF packet\n   is authenticated as follows:\n\
    \       (1) The checksum field in the OSPF header must be verified.\n        \
    \   It must be set to the 16-bit one's complement of the\n           one's complement\
    \ sum of all the 16-bit words in the\n           packet, excepting the authentication\
    \ field.  (If the\n           packet's length is not an integral number of 16-bit\n\
    \           words, the packet is padded with a byte of zero before\n         \
    \  checksumming.)\n       (2) The 64-bit authentication field in the OSPF packet\n\
    \           header must be equal to the 64-bit password (i.e.,\n           authentication\
    \ key) that has been configured for the\n           interface.\n"
- title: D.5.3 Verifying Cryptographic authentication
  contents:
  - "D.5.3 Verifying Cryptographic authentication\n   When using Cryptographic authentication,\
    \ the received OSPF packet is\n   authenticated as follows:\n       (1) Locate\
    \ the receiving interface's configured key having\n           Key ID equal to\
    \ that specified in the received OSPF\n           packet (see Figure 18). If the\
    \ key is not found, or if\n           the key is not valid for reception (i.e.,\
    \ current time <\n           KeyStartAccept or current time >= KeyStopAccept),\
    \ the\n           OSPF packet is discarded.\n       (2) If the cryptographic sequence\
    \ number found in the OSPF\n           header (see Figure 18) is less than the\
    \ cryptographic\n           sequence number recorded in the sending neighbor's\
    \ data\n           structure, the OSPF packet is discarded.\n       (3) Verify\
    \ the appended message digest in the following\n           steps:\n      (a) The\
    \ received digest is set aside.\n      (b) A new digest is calculated, as specified\
    \ in Step 6\n          of Section D.4.3.\n      (c) The calculated and received\
    \ digests are compared. If\n          they do not match, the OSPF packet is discarded.\
    \ If\n          they do match, the OSPF protocol packet is accepted\n        \
    \  as authentic, and the \"cryptographic sequence\n          number\" in the neighbor's\
    \ data structure is set to\n          the sequence number found in the packet's\
    \ OSPF\n          header.\n"
- title: E. An algorithm for assigning Link State IDs
  contents:
  - "E. An algorithm for assigning Link State IDs\n   The Link State ID in AS-external-LSAs\
    \ and summary-LSAs is usually set\n   to the described network's IP address. However,\
    \ if necessary one or\n   more of the network's host bits may be set in the Link\
    \ State ID.\n   This allows the router to originate separate LSAs for networks\
    \ having\n   the same address, yet different masks. Such networks can occur in\
    \ the\n   presence of supernetting and subnet 0s (see [Ref10]).\n   This appendix\
    \ gives one possible algorithm for setting the host bits\n   in Link State IDs.\
    \ The choice of such an algorithm is a local\n   decision. Separate routers are\
    \ free to use different algorithms,\n   since the only LSAs affected are the ones\
    \ that the router itself\n   originates. The only requirement on the algorithms\
    \ used is that the\n   network's IP address should be used as the Link State ID\
    \ whenever\n   possible; this maximizes interoperability with OSPF implementations\n\
    \   predating RFC 1583.\n   The algorithm below is stated for AS-external-LSAs.\
    \  This is only for\n   clarity; the exact same algorithm can be used for summary-LSAs.\n\
    \   Suppose that the router wishes to originate an AS-external-LSA for a\n   network\
    \ having address NA and mask NM1. The following steps are then\n   used to determine\
    \ the LSA's Link State ID:\n    (1) Determine whether the router is already originating\
    \ an AS-\n        external-LSA with Link State ID equal to NA (in such an LSA\
    \ the\n        router itself will be listed as the LSA's Advertising Router).\n\
    \        If not, the Link State ID is set equal to NA and the algorithm\n    \
    \    terminates. Otherwise,\n    (2) Obtain the network mask from the body of\
    \ the already existing\n        AS-external-LSA. Call this mask NM2. There are\
    \ then two cases:\n        o   NM1 is longer (i.e., more specific) than NM2. In\
    \ this case,\n            set the Link State ID in the new LSA to be the network\n\
    \            [NA,NM1] with all the host bits set (i.e., equal to NA or'ed\n  \
    \          together with all the bits that are not set in NM1, which is\n    \
    \        network [NA,NM1]'s broadcast address).\n        o   NM2 is longer than\
    \ NM1. In this case, change the existing\n            LSA (having Link State ID\
    \ of NA) to reference the new\n            network [NA,NM1] by incrementing the\
    \ sequence number,\n            changing the mask in the body to NM1 and inserting\
    \ the cost\n            of the new network. Then originate a new LSA for the old\n\
    \            network [NA,NM2], with Link State ID equal to NA or'ed\n        \
    \    together with the bits that are not set in NM2 (i.e.,\n            network\
    \ [NA,NM2]'s broadcast address).\n   The above algorithm assumes that all masks\
    \ are contiguous; this\n   ensures that when two networks have the same address,\
    \ one mask is\n   more specific than the other. The algorithm also assumes that\
    \ no\n   network exists having an address equal to another network's broadcast\n\
    \   address. Given these two assumptions, the above algorithm always\n   produces\
    \ unique Link State IDs. The above algorithm can also be\n   reworded as follows:\
    \ When originating an AS-external-LSA, try to use\n   the network number as the\
    \ Link State ID.  If that produces a\n   conflict, examine the two networks in\
    \ conflict. One will be a subset\n   of the other. For the less specific network,\
    \ use the network number\n   as the Link State ID and for the more specific use\
    \ the network's\n   broadcast address instead (i.e., flip all the \"host\" bits\
    \ to 1).  If\n   the most specific network was originated first, this will cause\
    \ you\n   to originate two LSAs at once.\n   As an example of the algorithm, consider\
    \ its operation when the\n   following sequence of events occurs in a single router\
    \ (Router A).\n    (1) Router A wants to originate an AS-external-LSA for\n  \
    \      [10.0.0.0,255.255.255.0]:\n        (a) A Link State ID of 10.0.0.0 is used.\n\
    \    (2) Router A then wants to originate an AS-external-LSA for\n        [10.0.0.0,255.255.0.0]:\n\
    \        (a) The LSA for [10.0.0,0,255.255.255.0] is reoriginated using a\n  \
    \          new Link State ID of 10.0.0.255.\n        (b) A Link State ID of 10.0.0.0\
    \ is used for\n            [10.0.0.0,255.255.0.0].\n    (3) Router A then wants\
    \ to originate an AS-external-LSA for\n        [10.0.0.0,255.0.0.0]:\n       \
    \ (a) The LSA for [10.0.0.0,255.255.0.0] is reoriginated using a\n           \
    \ new Link State ID of 10.0.255.255.\n        (b) A Link State ID of 10.0.0.0\
    \ is used for\n            [10.0.0.0,255.0.0.0].\n        (c) The network [10.0.0.0,255.255.255.0]\
    \ keeps its Link State ID\n            of 10.0.0.255.\n"
- title: F. Multiple interfaces to the same network/subnet
  contents:
  - "F. Multiple interfaces to the same network/subnet\n   There are at least two\
    \ ways to support multiple physical interfaces\n   to the same IP subnet. Both\
    \ methods will interoperate with\n   implementations of RFC 1583 (and of course\
    \ this memo). The two\n   methods are sketched briefly below. An assumption has\
    \ been made that\n   each interface has been assigned a separate IP address (otherwise,\n\
    \   support for multiple interfaces is more of a link-level or ARP issue\n   than\
    \ an OSPF issue).\n   Method 1:\n     Run the entire OSPF functionality over both\
    \ interfaces, sending and\n     receiving hellos, flooding, supporting separate\
    \ interface and\n     neighbor FSMs for each interface, etc. When doing this all\
    \ other\n     routers on the subnet will treat the two interfaces as separate\n\
    \     neighbors, since neighbors are identified (on broadcast and NBMA\n     networks)\
    \ by their IP address.\n     Method 1 has the following disadvantages:\n     (1)\
    \ You increase the total number of neighbors and adjacencies.\n     (2) You lose\
    \ the bidirectionality test on both interfaces, since\n         bidirectionality\
    \ is based on Router ID.\n     (3) You have to consider both interfaces together\
    \ during the\n         Designated Router election, since if you declare both to\
    \ be\n         DR simultaneously you can confuse the tie-breaker (which is\n \
    \        Router ID).\n   Method 2:\n     Run OSPF over only one interface (call\
    \ it the primary interface),\n     but include both the primary and secondary\
    \ interfaces in your\n     Router-LSA.\n     Method 2 has the following disadvantages:\n\
    \     (1) You lose the bidirectionality test on the secondary\n         interface.\n\
    \     (2) When the primary interface fails, you need to promote the\n        \
    \ secondary interface to primary status.\n"
- title: G. Differences from RFC 1583
  contents:
  - "G. Differences from RFC 1583\n   This section documents the differences between\
    \ this memo and RFC\n   1583.  All differences are backward-compatible. Implementations\
    \ of\n   this memo and of RFC 1583 will interoperate.\n"
- title: G.1 Enhancements to OSPF authentication
  contents:
  - "G.1 Enhancements to OSPF authentication\n   An additional OSPF authentication\
    \ type has been added: the\n   Cryptographic authentication type. This has been\
    \ defined so that any\n   arbitrary \"Keyed Message Digest\" algorithm can be\
    \ used for packet\n   authentication. Operation using the MD5 algorithm is completely\n\
    \   specified (see Appendix D).\n   A number of other changes were also made to\
    \ OSPF packet\n   authentication, affecting the following Sections:\n   o   The\
    \ authentication type is now specified per-interface,\n       rather than per-area\
    \ (Sections 6, 9, C.2 and C.3).\n   o   The OSPF packet header checksum is now\
    \ considered part of\n       the authentication procedure, and so has been moved\
    \ out of the\n       packet send and receive logic (Sections 8.1 and 8.2) and\
    \ into the\n       description of authentication types (Appendix D).\n   o   In\
    \ Appendix D, sections detailing message generation and\n       message verification\
    \ have been added.\n   o   For the OSPF Cryptographic authentication type, a discussion\n\
    \       of key management, including the requirement for simultaneous\n      \
    \ support of multiple keys, key lifetimes and smooth key\n       transition, has\
    \ been added to Appendix D.\n"
- title: G.2 Addition of Point-to-MultiPoint interface
  contents:
  - "G.2 Addition of Point-to-MultiPoint interface\n   This memo adds an additional\
    \ method for running OSPF over non-\n   broadcast networks: the Point-to-Multipoint\
    \ network. To implement\n   this addition, the language of RFC 1583 has been altered\
    \ slightly.\n   References to \"multi-access\" networks have been deleted. The\
    \ term\n   \"non-broadcast networks\" is now used to describe networks which can\n\
    \   connect many routers, but which do not natively support\n   broadcast/multicast\
    \ (such as a public Frame relay network).  Over\n   non-broadcast networks, there\
    \ are two options for running OSPF:\n   modelling them as \"NBMA networks\" or\
    \ as \"Point-to-MultiPoint\n   networks\".  NBMA networks require full mesh connectivity\
    \ between\n   routers; when employing NBMA networks in the presence of partial\
    \ mesh\n   connectivity, multiple NBMA networks must be configured, as described\n\
    \   in [Ref15].  In contrast, Point-to-Multipoint networks have been\n   designed\
    \ to work simply and naturally when faced with partial mesh\n   connectivity.\n\
    \   The addition of Point-to-MultiPoint networks has impacted the text in\n  \
    \ many places, which are briefly summarized below:\n   o   Section 2 describing\
    \ the OSPF link-state database has been\n       split into additional subsections,\
    \ with one of the subsections\n       (Section 2.1.1) describing the differing\
    \ map representations of\n       the two non-broadcast network options.  This\
    \ subsection also\n       contrasts the NBMA network and Point- to-MultiPoint\
    \ network\n       options, and describes the situations when one is preferable\
    \ to\n       the other.\n   o   In contrast to NBMA networks, Point-to-MultiPoint\
    \ networks\n       have the following properties. Adjacencies are established\n\
    \       between all neighboring routers (Sections 4, 7.1, 7.5, 9.5 and\n     \
    \  10.4). There is no Designated Router or Backup Designated Router\n       for\
    \ a Point-to-MultiPoint network (Sections 7.3 and 7.4). No\n       network-LSA\
    \ is originated for Point-to-MultiPoint networks\n       (Sections 12.4.2 and\
    \ A.4.3).  Router Priority is not configured\n       for Point-to-MultiPoint interfaces,\
    \ nor for neighbors on Point-\n       to-MultiPoint networks (Sections C.3 and\
    \ C.6).\n   o   The Interface FSM for a Point-to-MultiPoint interface is\n   \
    \    identical to that used for point-to-point interfaces. Two states\n      \
    \ are possible: \"Down\" and \"Point-to-Point\" (Section 9.3).\n   o   When originating\
    \ a router-LSA, and Point-to-MultiPoint\n       interface is reported as a collection\
    \ of \"point-to-point links\"\n       to all of the interface's adjacent neighbors,\
    \ together with a\n       single stub link advertising the interface's IP address\
    \ with a\n       cost of 0 (Section 12.4.1.4).\n   o   When flooding out a non-broadcast\
    \ interface (when either in\n       NBMA or Point-to-MultiPoint mode) the Link\
    \ State Update or Link\n       State Acknowledgment packet must be replicated\
    \ in order to be\n       sent to each of the interface's neighbors (see Sections\
    \ 13.3 and\n       13.5).\n"
- title: G.3 Support for overlapping area ranges
  contents:
  - "G.3 Support for overlapping area ranges\n   RFC 1583 requires that all networks\
    \ falling into a given area range\n   actually belong to a single area. This memo\
    \ relaxes that restriction.\n   This is useful in the following example. Suppose\
    \ that [10.0.0.0,\n   255.0.0.0] is carved up into subnets. Most of these subnets\
    \ are\n   assigned to a single OSPF area (call it Area X), while a few subnets\n\
    \   are assigned to other areas. In order to get this configuration to\n   work\
    \ with RFC 1583, you must not summarize the subnets of Area X with\n   the single\
    \ range [10.0.0.0, 255.0.0.0], because then the subnets of\n   10.0.0.0 belonging\
    \ to other areas would become unreachable. However,\n   with this memo you can\
    \ summarize the subnets in Area X, provided that\n   the subnets belonging to\
    \ other areas are not summarized.\n   Implementation details for this change can\
    \ be found in Sections 11.1\n   and 16.2.\n"
- title: G.4 A modification to the flooding algorithm
  contents:
  - "G.4 A modification to the flooding algorithm\n   The OSPF flooding algorithm\
    \ has been modified as follows. When a Link\n   State Update Packet is received\
    \ that contains an LSA instance which\n   is actually less recent than the the\
    \ router's current database copy,\n   the router will now in most cases respond\
    \ by flooding back its\n   database copy. This is in contrast to the RFC 1583\
    \ behavior, which\n   was to simply throw the received LSA away.\n   Detailed\
    \ description of the change can be found in Step 8 of Section\n   13.\n   This\
    \ change improves MaxAge processing. There are times when MaxAge\n   LSAs stay\
    \ in a router's database for extended intervals: 1) when they\n   are stuck in\
    \ a retransmission queue on a slow link or 2) when a\n   router is not properly\
    \ flushing them from its database, due to\n   software bugs. The prolonged existence\
    \ of these MaxAge LSAs can\n   inhibit the flooding of new instances of the LSA.\
    \ New instances\n   typically start with LS sequence number equal to\n   InitialSequenceNumber,\
    \ and are treated as less recent (and hence were\n   discarded according to RFC\
    \ 1583) by routers still holding MaxAge\n   instances. However, with the above\
    \ change to flooding, a router\n   holding a MaxAge instance will flood back the\
    \ MaxAge instance. When\n   this flood reaches the LSA's originator, it will then\
    \ pick the next\n   highest LS sequence number and reflood, overwriting the MaxAge\n\
    \   instance.\n"
- title: G.5 Introduction of the MinLSArrival constant
  contents:
  - "G.5 Introduction of the MinLSArrival constant\n   OSPF limits the frequency that\
    \ new instances of any particular LSA\n   can be accepted during flooding. This\
    \ is extra protection, just in\n   case a neighboring router is violating the\
    \ mandated limit on LSA\n   (re)originations (namely, one per LSA in any MinLSInterval).\n\
    \   In RFC 1583, the frequency at which new LSA instances were accepted\n   was\
    \ also set equal to once every MinLSInterval seconds.  However, in\n   some circumstances\
    \ this led to unwanted link state retransmissions,\n   even when the LSA originator\
    \ was obeying the MinLSInterval limit on\n   originations. This was due to either\
    \ 1) choice of clock granularity\n   in some OSPF implementations or 2) differing\
    \ clock speed in\n   neighboring routers.\n   To alleviate this problem, the frequency\
    \ at which new LSA instances\n   are accepted during flooding has now been increased\
    \ to once every\n   MinLSArrival seconds, whose value is set to 1.  This change\
    \ is\n   reflected in Steps 5a and 5d of Section 13, and in Appendix B.\n"
- title: G.6 Optionally advertising point-to-point links as subnets
  contents:
  - "G.6 Optionally advertising point-to-point links as subnets\n   When describing\
    \ a point-to-point interface in its router-LSA, a\n   router may now advertise\
    \ a stub link to the point-to-point network's\n   subnet. This is specified as\
    \ an alternative to the RFC 1583 behavior,\n   which is to advertise a stub link\
    \ to the neighbor's IP address. See\n   Sections 12.4.1 and 12.4.1.1 for details.\n"
- title: G.7 Advertising same external route from multiple areas
  contents:
  - "G.7 Advertising same external route from multiple areas\n   This document fixes\
    \ routing loops which can occur in RFC 1583 when\n   the same external destination\
    \ is advertised by AS boundary routers in\n   separate areas. There are two manifestations\
    \ of this problem. The\n   first, discovered by Dennis Ferguson, occurs when an\
    \ aggregated\n   forwarding address is in use. In this case, the desirability\
    \ of the\n   forwarding address can change for the worse as a packet crosses an\n\
    \   area aggregation boundary on the way to the forwarding address, which\n  \
    \ in turn can cause the preference of AS-external-LSAs to change,\n   resulting\
    \ in a routing loop.\n   The second manifestation was discovered by Richard Woundy.\
    \ It is\n   caused by an incomplete application of OSPF's preference of intra-\n\
    \   area routes over inter-area routes: paths to any given\n   ASBR/forwarding\
    \ address are selected first based on intra-area\n   preference, while the comparison\
    \ between separate ASBRs/forwarding\n   addresses is driven only by cost, ignoring\
    \ intra-area preference. His\n   example is replicated in Figure 19.  Both router\
    \ A3 and router B3 are\n   originating an AS-external-LSA for 10.0.0.0/8, with\
    \ the same type 2\n   metric. Router A1 selects B1 as its next hop towards 10.0.0.0/8,\n\
    \   based on shorter cost to ASBR B3 (via B1->B2->B3). However, the\n   shorter\
    \ route to B3 is not available to B1, due to B1's preference\n   for the (higher\
    \ cost) intra-area route to B3 through Area A. This\n   leads B1 to select A1\
    \ as its next hop to 10.0.0.0/8, resulting in a\n   routing loop.\n   The following\
    \ two changes have been made to prevent these routing\n   loops:\n   o   When\
    \ originating a type 3 summary-LSA for a configured area\n       address range,\
    \ the cost of the summary-LSA is now set to the\n       maximum cost of the range's\
    \ component networks (instead of the\n       previous algorithm which set the\
    \ cost to the minimum component\n       cost).  This change affects Sections 3.5\
    \ and 12.4.3, Figures 7\n       and 8, and Tables 6 and 13.\n   o   The preference\
    \ rules for choosing among multiple AS-\n       external-LSAs have been changed.\
    \ Where previously cost was the\n       only determining factor, now the preference\
    \ is driven first by\n       type of path (intra-area or inter-area, through non-backbone\
    \ area\n       or through backbone) to the ASBR/forwarding address, using cost\n\
    \       only to break ties. This change affects Sections 16.4 and 16.4.1.\n  \
    \ After implementing this change, the example in Figure 19 is modified\n   as\
    \ follows. Router A1 now chooses A3 as the next\n                            \
    \  10.0.0.0/8\n                              ----------\n                    \
    \               |\n                                +----+\n                  \
    \              | XX |\n                                +----+\n              \
    \     RIP          /    \\        RIP\n           ---------------------      --------------------\n\
    \           !                                             !\n           !    \
    \                                         !\n         +----+      +----+     \
    \  1       +----+......+----+....\n         | A3 |------| A1 |---------------|\
    \ B1 |------| B3 |   .\n         +----+   6  +----+               +----+  8  \
    \ +----+   .\n                                           1|  .         /     .\n\
    \                       OSPF backbone        |  .        /      .\n          \
    \                                +----+  2    /       .\n                    \
    \                      | B2 |-------  Area A.\n                              \
    \            +----+................\n                Figure 19: Example routing\
    \ loop when the\n            same external route is advertised from multiple\n\
    \                                 areas\n   hop to 10.0.0.0/8, while B1 chooses\
    \ B3 as next hop. The reason for\n   both choices is that ASBRs/forwarding addresses\
    \ are now chosen based\n   first on intra-area preference, and then by cost.\n\
    \   Unfortunately, this change is not backward compatible. While the\n   change\
    \ prevents routing loops when all routers run the new preference\n   rules, it\
    \ can actually create routing loops when some routers are\n   running the new\
    \ preference rules and other routers implement RFC\n   1583.  For this reason,\
    \ a new configuration parameter has been added:\n   RFC1583Compatibility. Only\
    \ when RFC1583Compatibility is set to\n   \"disabled\" will the new preference\
    \ rules take effect. See Appendix C\n   for more details.\n"
- title: G.8 Retransmission of initial Database Description packets
  contents:
  - "G.8 Retransmission of initial Database Description packets\n   This memo allows\
    \ retransmission of initial Database Description\n   packets, without resetting\
    \ the state of the adjacency. In some\n   environments, retransmission of the\
    \ initial Database Description\n   packet may be unavoidable. For example, the\
    \ link delay incurred by a\n   satellite link may exceed the value configured\
    \ for an interface's\n   RxmtInterval. In RFC 1583 such an environment prevents\
    \ a full\n   adjacency from ever forming.\n   In this memo, changes have been\
    \ made in the reception of Database\n   Description packets so that retransmitted\
    \ initial Database\n   Description packets are treated identically to any other\n\
    \   retransmitted Database Description packets. See Section 10.6 for\n   details.\n"
- title: G.9 Detecting interface MTU mismatches
  contents:
  - "G.9 Detecting interface MTU mismatches\n   When two neighboring routers have\
    \ a different interface MTU for their\n   common network segment, serious problems\
    \ can ensue: large packets are\n   prevented from being successfully transferred\
    \ from one router to the\n   other, impairing OSPF's flooding algorithm and possibly\
    \ creating\n   \"black holes\" for user data traffic.\n   This memo provides a\
    \ fix for the interface MTU mismatch problem by\n   advertising the interface\
    \ MTU in Database Description packets. When a\n   router receives a Database description\
    \ packet advertising an MTU\n   larger than the router can receive, the router\
    \ drops the Database\n   Description packet. This prevents an adjacency from forming,\
    \ telling\n   OSPF flooding and user data traffic to avoid the connection between\n\
    \   the two routers. For more information, see Sections 10.6, 10.8, and\n   A.3.3.\n"
- title: G.10 Deleting the TOS routing option
  contents:
  - "G.10 Deleting the TOS routing option\n   The TOS routing option has been deleted\
    \ from OSPF. This action was\n   required by the Internet standards process ([Ref24]),\
    \ due to lack of\n   implementation experience with OSPF's TOS routing.  However,\
    \ for\n   backward compatibility the formats of OSPF's various LSAs remain\n \
    \  unchanged, maintaining the ability to specify TOS metrics in router-\n   LSAs,\
    \ summary-LSAs, ASBR-summary-LSAs, and AS-external-LSAs (see\n   Sections 12.3,\
    \ A.4.2, A.4.4, and A.4.5).\n   To see OSPF's original TOS routing design, consult\
    \ [Ref9].\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   All OSPF protocol exchanges are authenticated. OSPF\
    \ supports multiple\n   types of authentication; the type of authentication in\
    \ use can be\n   configured on a per network segment basis. One of OSPF's\n  \
    \ authentication types, namely the Cryptographic authentication option,\n   is\
    \ believed to be secure against passive attacks and provide\n   significant protection\
    \ against active attacks. When using the\n   Cryptographic authentication option,\
    \ each router appends a \"message\n   digest\" to its transmitted OSPF packets.\
    \ Receivers then use the\n   shared secret key and received digest to verify that\
    \ each received\n   OSPF packet is authentic.\n   The quality of the security\
    \ provided by the Cryptographic\n   authentication option depends completely on\
    \ the strength of the\n   message digest algorithm (MD5 is currently the only\
    \ message digest\n   algorithm specified), the strength of the key being used,\
    \ and the\n   correct implementation of the security mechanism in all communicating\n\
    \   OSPF implementations. It also requires that all parties maintain the\n   secrecy\
    \ of the shared secret key.\n   None of the OSPF authentication types provide\
    \ confidentiality. Nor do\n   they protect against traffic analysis. Key management\
    \ is also not\n   addressed by this memo.\n   For more information, see Sections\
    \ 8.1, 8.2, and Appendix D.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   John Moy\n   Cascade Communications Corp.\n   5 Carlisle\
    \ Road\n   Westford, MA 01886\n   Phone: 508-952-1367\n   Fax:   508-692-9214\n\
    \   Email: jmoy@casc.com\n"
