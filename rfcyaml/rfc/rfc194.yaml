- title: __initial_text__
  contents:
  - "                  THE DATA RECONFIGURATION SERVICE --\n               COMPILER/INTERPRETER\
    \ IMPLEMENTATION NOTES\n                    I.  NEW FEATURES OF THE LANGUAGE\n\
    1.   The meaning of S(#,E,,l) is only find an arbitrary\n     number  (<=256)\
    \ of EBCDIC characters and store them in\n     identifier S.  This descriptor\
    \ is terminated only by\n     an invalid EBCDIC or by exceeding maximum permissible\n\
    \     character count (256).\n2.   The assignment (S .<=. T) causes all attributes\
    \ of\n     identifier T to be given to S, i.e., length, type,\n     and contents.\n\
    3.   (S .<=. T || X) concatenates X onto the right-hand\n     side of T and stores\
    \ the result in S.  If T and X\n     are binary the resulting value has a length\
    \ equal\n     to the sum L(T) + L(X).\n4.   T(X) joins L(X) and V(X) as a built-in\
    \ identifier\n     function.\n     T(X) = type of identifier X.\n     L(X) = length\
    \ of contents of X.\n     V(X) = contents of X converted to binary\n         \
    \   (decimal - binary is presently the only\n            transformation).\n5.\
    \   New types ED and AD are EBCDIC and ASCII encoded\n     decimal, respectively.\
    \  These have been added to\n     complement the V(X) function.\n6.   New type\
    \ SB has been added as signed binary.  Type B\n     is a logical binary string.\n\
    7.   The syntactic notation for return-from-a-form has\n     been changed.  See\
    \ new syntax.\nII.  NEW SYNTAX\nform              :: = rule | form\nrule     \
    \         :: = label  inputstream outputstream;\nlabel             :: = INTEGER\
    \ | NULL\ninputstream       :: = terms | NULL\nterms             :: = term | terms,\
    \ term\noutputstream      :: = :terms | NULL\nterm              :: = identifier\
    \ | identifier descriptor |\n                       descriptor | comparator\n\
    identifier        :: = <alpha followed by 0-3 alphanumerics>\ndescriptor     \
    \   :: = (replicationexpr, datatype, valueexpr,\n                       lengthexpr\
    \ control)\ncomparator        :: = (concatexpr connective concatexpr control)\
    \ |\n                       (identifier .<=. concatexpr control)\nreplicationexpr\
    \   :: = # | arithmetricexpr | NULL\ndatatype          :: = B | O | X | E | A\
    \ | ED | AD | SB | T (identifier)\nvalueexpr         :: = concatexpr | NULL\n\
    lengthexpr        :: = arithmeticexpr | NULL\nconnective        :: = .LE. | .LT.\
    \ | .GT. | .GE. | .EQ. | .NE.\nconcatexpr        :: = value | concatexpr    value\n\
    value             :: = literal | arithmeticexpr\narithmeticexpr    :: = primary\
    \ | arithmeticexpr operator primary\nprimary           :: = identifier | L(identifier)\
    \ | V(identifier) |\n                         INTEGER\noperator          :: =\
    \ + | - | * | /\nliteral           :: = literaltype \"string\"\nliteraltype  \
    \     :: = B | 0 | X | E | A | ED | AD | SB\nstring            :: = <from 0 to\
    \ 256 chars>\ncontrol           :: = :options | NULL\noptions           :: = SFUR\
    \ (arithmeticexpr) | SFUR (arithmeticexpr),\n                       SFUR (arithmeticexpr)\n\
    SFUR              :: = S | F | U | SR | FR | UR\nIII.  THE FORM INTERPRETER\n\
    Interpreter Overview\n     The interpreter is a simple minded machine having the\
    \ virtue of\nhelping the compiler writer by providing a rather powerful instruction\n\
    set for hard-to-compile operations.  Figure 1 shows the machine\nconfiguration:\n\
    \  +-------------+                        +--------------+\n  | inputstream |\
    \                        | outputstream |\n  +-------------+                 \
    \       +--------------+\n             /\\                           /\n     \
    \         \\                          /\n               \\                   \
    \     /\n                \\                     \\/\n                +-----------------------+\n\
    \                |         CPU           |\n                +-----------------------+\n\
    \                       |        /\\\n                       |         |\n   \
    \                    |         |\n                       \\/        |\n      \
    \          +-----------------------+\n    Storage:    | Instruction          \
    \ |\n                | Sequence              |\n                +-----------------------+\n\
    \                | Label Table           |\n                +-----------------------+\n\
    \                | Literal/Identifier    |\n                | Pool           \
    \       |\n                +-----------------------+\n                | Variable\
    \ length       |\n                | string area           |\n                +-----------------------+\n\
    \                Fig. 1. Form Interpreter\n    The CPU is a box full of miscellaneous\
    \ parts, the most important\nbeing the Arithmetic Logic Unit and the instruction\
    \ decoding unit.  The\nCPU also maintains a collection of state registers to keep\
    \ track of what\nit is doing.  Figure 2 shows the rough layout.\n   +-----------------+\
    \                +---------------+\n   | Instruction     |                | Instruction\
    \   |\n   | Counter         |                | Register      |\n   +-----------------+\
    \                +---------------+\n                                         \
    \  |\n                                           |\n                         \
    \                  V\n                                    +----------------+\n\
    \                                    | Operation Code |\n                    \
    \                | Decoding       |\n     Run Time Stack                 +----------------+\n\
    \   +------------------+                 /     |    \\\n   |   Operands      \
    \ |                /      |     \\\n   +------------------+              \\/ \
    \      V     \\/\n   |                  |               +-----------------+\n\
    \   +------------------+              /   Instruction     \\\n   |           \
    \       |              |   Interpreter     |\n   +------------------+        \
    \      |   Routines        |\n   |                  |               \\       \
    \          /\n   +------------------+                +---------------+\n   | \
    \                 |                    |      /\\\n   +------------------+   \
    \                 |       |\n   |                  |                    |    \
    \   |\n   +------------------+                    V       |\n   |            \
    \      |                +---------------+\n   +------------------+ <-------------\
    \ | Arithmetic    |\n   |                  | -------------> | Logic Unit    |\n\
    \   +------------------+                +---------------+\n   |              \
    \    |\n   +------------------+\n   |                  |\n   +------------------+\n\
    \   +------------------+                +------------------+\n   |Initial Input\
    \ Ptr.|                | Output pointer   |\n   +------------------+         \
    \       +------------------+\n   +------------------+                +------------------+\n\
    \   |Current Input Ptr.|                | True/False Flag  |\n   +------------------+\
    \                +------------------+\nFig.  2.  The Central Processor\n     The\
    \ CPU is a stack machine driven by a Polish postfix instruction\nsequence.  Operands\
    \ placed on the Run Time Stack are used for arithmetic\nexpression evaluation\
    \ and for parameter passing between the interpreter\nand the built-in functions.\n\
    \     The Current Input Pointer and the Output Pointer keep track of the\ntwo\
    \ data streams.  Two input pointers are needed because of the backup\nrequirement\
    \ in the event of rule failure.  All of these pointers are bit\npointers into\
    \ the two streams.\n     Various implementations of the Run Time Stack are independent\
    \ of\nthe interpretation of the DRS machine's instruction set.  It is\nsuggested\
    \ that the stack will contain instruction operands from the\ninstruction stream.\n\
    \     The format of a compiled instruction sequence for a form is shown\nin Fig.\
    \ 3.\n                        16 bits\n                 +--------/\\---------+\n\
    \                /                     \\\n                +---------------------+\n\
    \                |  length n in bytes  |\n           +--  +---------------------+\n\
    \           |    |                     |\n           |    |     compiled     \
    \   |\n           |    |     16-bit          |\n        n <     |     instructions\
    \    |\n           |    |                     |\n           |    |           \
    \          |\n           |    |                     |\n           +--  +---------------------+\n\
    \       Fig. 3.  Compiled Instruction Sequence Format\n   The format of the compiled\
    \ Label Table is shown in Fig. 4.\n                                       16 bits\n\
    \                                  +-----/\\-------+\n                       \
    \          /                \\\n                                 +-----------------+\n\
    \                                 |  length n       |\n                      \
    \           |  in bytes       |\n        +--   +------------------+-----------------+\n\
    \        |     | numeric value of |  byte offset    |\n        |     | statement\
    \ number |  in inst. seq.  |\n        |     +------------------+-----------------+\n\
    \        |     |        :                :          |\n     n <      |       \
    \ :                :          |\n        |     |        :                :   \
    \       |\n        |     |                                    |\n        |   \
    \  |                                    |\n        |     |                   \
    \                 |\n        +--   +------------------------------------+\n  \
    \            \\_________________ _________________/\n                        \
    \        V\n                              32 bits\n                    Fig. 4.\
    \  Compiled Label Table\n   Literals and Identifiers are compiled as shown in\
    \ fig. 5.\n                                   2              2\n             \
    \                 +----/\\----+   +----/\\----+\n                            \
    \ /            \\ /            \\\n                             +-------------+--------------+\n\
    \            1         1      | length n    |    length n  |\n         ___/\\\
    ____ ___/\\____ | in bytes    |    in bytes  |\n        +---------+----------+-------------+--------------+\n\
    \     /  |         |//////////|             |              |\n     |  | Type \
    \   |//////////| bit length  |  byte offset |\n     |  |         |//////////|\
    \             |              |\n     |  +---------+----------+-------------+--------------+\n\
    5*n <   |                           :                     |\n     |  |       \
    \                    :                     |\n     |  |                      \
    \     :                     | Identifiers\n     |  |                         \
    \                        |\n     \\  |                                       \
    \          |\n        +-------------------------------------------------+\n  \
    \   /  |                                                 |\n     |  |        \
    \    literals are                         |\n     |  |            byte-aligned\
    \                         | Literals\n  m <   |                              \
    \                   |\n     |  |                                             \
    \    |\n     |  |                                                 |\n     \\ \
    \ +-------------------------------------------------+\n     Legend:\n     Type\
    \ 0 = undefined\n          1 = B (binary)\n          2 = 0 (octal)\n         \
    \ 3 = X (hexadecimal)\n          4 = E (EBCDIC)\n          5 = A (ASCII)\n   \
    \       6 = ED (EBCDIC encoded decimal)\n          7 = AD (ASCII encoded decimal)\n\
    \          8 = SB (signed binary, two's complement)\n             Fig. 5.  Compiled\
    \ Literals and Identifiers\n   Types B, 0, X, AD, ED, and SB point to 32-bit word-\
    \ aligned data\n   shown below.\n +---+---+-----+-------+       +-------------------+\
    \    word-aligned,\n | T |///|  L  |    ---+-----> |                   |    32-bit\
    \ right-\n +---+---+-----+-------+       +-------------------+    justified\n\
    \      Types E and A point to byte-aligned symbol streams\nas shown below.\n \
    \                                byte-aligned, L <= 256\n +---+---+-----+-------+\
    \       +------------------------+\n | T |///|  L  |    ---+-----> |         \
    \               |\n +---+---+-----+-------+       +------------------------+\n\
    Instruction Format\n     Since literals and identifiers will be stored in the\
    \ same data\narea, more than 256 literals plus identifiers might be encountered\
    \ so\nmore than 8 bits are needed to reference literal/id pool.  Furthermore,\n\
    such references must be distinguished from operators in the instruction\nstream,\
    \ so a 16-bit instruction will be used, as shown below.\n     +--------+------------------------+\n\
    \     |    4   |          12            |\n     +--------+------------------------+\n\
    \         |\n        /\n       /\n      /\n     |\n     V\n     LD = 0  literal\
    \ or identifier reference (12-bit positive integer)\n     IC = 1  12-bit two's\
    \ complement integer constant\n     OP = 2  operator\n     AD = 3  address (12-bit\
    \ positive integer)\n    ARB = 4  indefinite replication factor\n   NULL = 5 \
    \ missing attribute of term\n     The operation code decoder picks up types 0,\
    \ 1, 3, 4,\nand 5 and deposits them on top of the stack (TOS).  LD is an\nindex\
    \ into the literal/identifier table, and AD is an index\ninto the instruction\
    \ sequence.\n     The decoder examines OP elements further:\n         4      \
    \  4            8\n     +--------+--------+----------------+\n     |  0010  |\
    \        |////////////////|\n     +--------+--------+----------------+\n     \
    \   OP        |\n                  +----------> 0 = binary operator\n        \
    \                       1 = unary operator\n                               2 =\
    \ special operator\nBinary Operators (*)\n     Let the TOS contain y and the next\
    \ level, x.  The binary operators\ncompute x  <bop> y, popping both x, y from\
    \ stack, and put the result\nback on top of the stack.\n                     +---+\
    \ <-- TOS  +-----+ <-- TOS\n                     | y |          | x-y |\n    \
    \ e.g.     x-y => +---+     ===> +-----+\n                     | x |         \
    \ |/////|\n                     +---+          +-----+\nBinary Operator Encoding\n\
    \                     4        4        4        4\n                +--------+--------+--------+--------+\n\
    \                |  0010  |  0000  |        |////////|\n                +--------+--------+--------+--------+\n\
    \                                       |\n            +--------------------------+\n\
    \            |\n            V\n     0 = integer +\n     1 = integer -\n     2\
    \ = integer x\n     3 = integer : (or /), no remainder\n     4 = concatenate ||\n\
    \     All binary operations except concatenate expect the top\ntwo elements on\
    \ the stack to describe type B, 0, X, or SB.  The\nresult is always a 32-bit type\
    \ B element.  The concatenate\noperator fails unless both types are identical.\
    \  For example:\n-------\n     (*) As suggested above, the stack really contains\
    \ instruction\noperands that describe data; for convenience in illustrations\n\
    the data rather than their descriptors are shown on the stack.\n        type \
    \    L    value             T       L     V\n       +------+------+------+   \
    \     +------+------+------+\nTOS -> |  B   |  32  |  4   |        |  B   |  32\
    \  |  12  | <- TOS\n       +------+------+------+   ==>  +------+------+------+\n\
    \       |  B   |  8   |  16  |        |//////|//////|//////|\n       +------+------+------+\
    \        +------+------+------+\n       Before-operation                after-operation\n\
    \       +------+------+------+        +------+------+------+\nTOS -> |  A   |\
    \  2   |  DE  |        |  A   |  5   |ABCDE | <- TOS\n       +------+------+------+\
    \   ==>  +------+------+------+\n       |  A   |  3   | ABC  |        |//////|//////|//////|\n\
    \       +------+------+------+        +------+------+------+\n       Before ||\
    \ operation             after || operation\nNo binary operator has any effect\
    \ on the TRUE/FALSE flag.\nUnary Operators\n         4        4        4     \
    \   4\n     +--------+--------+--------+--------+\n     |  0010  |  0001  |  \
    \      |        |\n     +--------+--------+--------+--------+\n              \
    \            |         |\n           +--------------+         |\n           |\
    \                        |\n           V                        |\n    0 = integer\
    \ minus               V\n    1 = load identifier          0 = evaluated contents\n\
    \                                     (after dec - binary\n                  \
    \                    conversion)\n                                 1 = length\
    \ field\n                                 2 = type field\n    2 = Label Table\
    \ Reference\n     For the unary minus operator the data described by the top of\
    \ the\nstack is replaced with its 2's complement.  The form fails if the TOS\n\
    type is not SB, B, 0, or X.\n     The Load identifier expects the TOS to describe\
    \ an index into the\nliteral/identifier pool (that is, an LD instruction) .  The\
    \ TOS\ndescribed data is replaced by 32-bit type B values.  The operation fails\n\
    if the contents cannot be converted from encoded decimal to binary.  B,\n0, and\
    \ X types are treated as unsigned integers, SB is treated as 2's\ncomplement.\n\
    \     The Label Table Reference operator expects a 32-bit type B value\ndescribed\
    \ by TOS and searches for this label in the label Table.  If\nfound, the TOS described\
    \ data is replaced by the relative address in the\ninstruction sequence of the\
    \ label (in the form of an AD instruction).\nIf not found, the form fails.  No\
    \ Unary operator has any effect on the\nTRUE/FALSE flag.\nSpecial Operators\n\
    \                4        4        4        4\n            +--------+--------+--------+--------+\n\
    \            |  0010  |  0010  |        |        |\n            +--------+--------+--------+--------+\n\
    \                                 |         |\n         +-----------------------+\
    \        /\n         |                               /\n         V           \
    \                   /\n   0 = store TOS                        |\n   1 = return\
    \                           V\n   2 = branch               0 = true, 1 = false,\
    \ 2 = unconditional\n   3 = compare              0 = .EQ.  2 = .LE.   4 = .GE.\n\
    \                            1 = .NE.  3 = .LT.   5 = .GT.\n   4 = move input\
    \ ptr       0 = store current into initial\n                            1 = store\
    \ initial into current\n   5 = input call           0 = no compare\n         \
    \                   1 = compare\n   6 = output call\nStore TOS\n    The TOS describes\
    \ an index into the ID table and the next lower\nelement in the stack describes\
    \ a value to be stored.  After execution,\nboth elements are popped off the stack.\n\
    Return\n     The TOS describes a value to be returned to the routine which\ninitiated\
    \ the FORM MACHINE.  The actual mechanism will be implementation\ndependent, but\
    \ the FORM MACHINE will relin- quish control after this\ninstruction completes\
    \ execution.\nBranch\n     The TOS describes an index into the instruction sequence\
    \ to be used\nas the new instruction counter (IC) if the branch conditions are\n\
    satisfied.  The branch instruction checks the state of the TRUE/FALSE\nflag register\
    \ and either increments the IC by 1 or replaces it with the\nTOS described element.\
    \  In any case, the TOS is popped.\nCompare\n     The compare operator takes the\
    \ two elements described by the two\ntop stack entries and compares them (.EQ.,.LT.,etc.).\
    \  If n is at the\ntop of the stack, and m is just below, then m.xx.n is performed,\
    \ and the\nTRUE/False flag is set accordingly.  For .xx. = .EQ. or .NE. we must\n\
    have identical type, length, and content for equality to hold.\n     The other\
    \ boolean comparators will not be attempted if types are\ndifferent (i.e., form\
    \ fails), but for same types, B, 0, X cause binary-\njustified compares, and A,\
    \ E, AD, ED cause left-justified string\ncompares with the shorter string padded\
    \ with blanks.\nMove Input Pointer\n     This operator (no operands) replaces\
    \ the Current Input Pointer with\nthe Initial Input Pointer (back-up), or the\
    \ Initial Input Pointer with\nthe current one (entry to rule).\nInput Call\n \
    \   This is the most complex operator thus far encountered.  It requires\nfour\
    \ operands from the run-time stack:\nTOS  +----------------------------+\n   \
    \  | binary or null             |  length to find\n     +----------------------------+\n\
    \     | LD to literal or null      |  value (literal)\n     +----------------------------+\n\
    \     | binary code                |  input data type\n     +----------------------------+\n\
    \     | binary, arbitrary, or null |  replication count\n     +----------------------------+\n\
    \     The input call operator can be invoked with the \"no compare\" flag\nset,\
    \ in which case the value expression parameter is ignored and only\nthe input\
    \ type and length expressions are used.  In this case, the input\nroutine tries\
    \ to find in the input stream as many characters of the\nrequired type (bits,\
    \ digits, etc.) as needed to fill the length\nexpression requirement.  If successful,\
    \ the TRUE/FALSE flag is set TRUE,\nthe stack is popped to remove the input parameters,\
    \ and the string\nobtained is described by the TOS.  If the input stream cannot\
    \ be matched\nthen the parameters are popped off the stack, and the TRUE/FALSE\
    \ flag is\nset FALSE.\n     If the \"compare\" flag is set, the input stream must\
    \ be searched for\nthe value expression.  However, we must take some care here\
    \ to be sure\nwe know what to look for.  There are several cases:\na)  The length\
    \ expression parameter is greater than the\n    length of the value expression\
    \ but the type of input de-\n    sired is the same as the value expression type.\
    \  For B, 0\n    and X types, right-justify value expression in length-\n    expression\
    \ field, sign bit is extended left if type BS.\n    If type A, E, AD, or ED pad\
    \ on the right with blanks.  b)  Same as\na) but length is too small.  B, 0, and\
    \ X type strings\n    are truncated on the left.  A, E, AD and ED are truncated\n\
    \    on the right.  c)  The type of the value expression and the type\nparameter\n\
    \    differ.  This case is deferred for discussion and pre-\n    sently is considered\
    \ an error causing form failure.\n     If the input string matches, then the TRUE/FALSE\
    \ flag is set true,\nthe parameters are popped from the stack, and the resulting\
    \ string is\ndescribed by the TOS.  Otherwise, the FALSE flag is set and the\n\
    parameters are popped.\n     When a successful match is found the input subroutine\
    \ always\nadvances the Current Input Pointer by the appropriate amount.  Since\
    \ we\nare dealing at the bit level this pointer must be maintained as a bit\n\
    pointer!\nOutput Call\n     This routine utilizes the same parameters as the input\
    \ call, but\noperates on the output stream.  The TRUE/FALSE flag is not distributed\n\
    by this operator.  As for input, there are four parameters on top of the\nstack,\
    \ the length expression value, the value expression value, the\ndesired output\
    \ type, and the replication expression value.  When there\nis a mis- match between\
    \ the output type and the value expression type, a\nconversion must take place.\
    \  The value expression is trans- formed into\nthe desired output type and fitted\
    \ into the field length specified by\nthe length expression.\nTruncation and Padding\
    \ Rules\na)  Character -> character (A,E,AD,ED -> A,E,AD,ED) conversion\n    is\
    \ left-justified and truncated or padded with blanks\n    on the right.  b)  Character\
    \ -> numeric and numeric -> character\nconversion is\n    right-justified and\
    \ truncated or padded on the left with\n    zeros.  Beware!  Two's complement\
    \ numbers may be bollixed\n    by this.  c)  Numeric -> character conversion is\
    \ right-justified and\n    left padded with blanks or left-truncated.  As for\
    \ the unary\noperators, a numeric bit-string is treated as unsigned, except SB\
    \ which\nis treated as two's complement.  Thus we have:\n                (1,ED,X\"\
    FF\",3) = E'255'\n               (1,ED,X\"100\",3) = E'256'\n     but (1,ED,SB\"\
    10000000\",4) = E'-256'\n     If the output routine is able to perform the desired\
    \ action, it\nadvances the Output Stream Pointer, and pops all parameters from\
    \ the\nrun-time stack.\nV.  INSTRUCTION SET\nit/id ref           LD <num>    \
    \             Literal or identifier\n                                        \
    \     reference -> TOS\nint const           IC <num>                 small 2's\
    \ comp. integer\n                                             constant -> TOS\n\
    address             AD <num>                 Address -> TOS\nnull parameter  \
    \    NULL                     missing term attribute\nadd                 ADD\
    \                      TOS = x,y     x + y -> TOS\nsubtract            SUB   \
    \                   TOS = x,y     x - y -> TOS\nmultiply            MUL      \
    \                TOS = x,y     x * y -> TOS\ndivide              DIV         \
    \             TOS = x,y     x/y -> TOS\nconcatenate         CON              \
    \        TOS = x,y     x||y -> TOS\nunary minus         UNIN                 \
    \    TOS = x       -x -> TOS\nload id value       LIV                      TOS\
    \ = LD x    V(LD x) -> TOS\nload id length      LIL                      TOS =\
    \ LD x    V(LD x) -> TOS\nload id type        LIT                      TOS = LD\
    \ x    V(LD x) -> TOS\nlook up label       LVL                      TOS = x  \
    \     AD x -> TOS\nsto                 STO                      TOS = x,y    \
    \ y -> x\nreturn              RET                      TOS = x       return to\n\
    \                                                           caller with x\nbranch\
    \ true         BT                       TOS = AD x    AD x -> Instr.\n       \
    \                                                            counter\nbranch false\
    \        BF                       TOS = AD x    AD x -> Instr.\n             \
    \                                                      counter\nbranch       \
    \       BU                       TOS = AD x    AD x -> Instr.\n              \
    \                                                     counter\ncompare equal \
    \      CEQ                      TOS = x,y     (y.EQ.x) ->\n                  \
    \                                                 TRUE/FALSE\n               \
    \                                                    flag\ncompare not equal \
    \  CNE                      TOS = x,y     (y.NE.x) -> T/FF\ncompare <=       \
    \   CLE                      TOS = x,y     (y.LE.x) -> T/FF\ncall output     \
    \    OUT                      TOS = r,t,v,l (r,t,v,l) -> output\ncall input  \
    \        IN ( INC = compare       TOS = r,t,v,l (r,t,v,l) -> TOS\n           \
    \              INN = no compare )\ncurrent -> initial  SCIP                  \
    \   CIP -> IIP    (store current input\n                                     \
    \                       ptr - initial IP)\ninitial -> current  SICP          \
    \           IIP -> CIP    (store initial input\n                             \
    \                               ptr - CIP)\nVI.  EXAMPLE COMPILATION\nFORM SOURCE\
    \               GENERATED POLISH INSTRUCTION SEQUENCE\n                     ADDR.\
    \ INSTR.     COMMENTS\n(NUMB.<=.1);         0     SICP     RULE PRELUDE\n    \
    \                 1     IC   1\n                     2     LD   0   REFERENCE\
    \ TO NUMB\n                     3     STO      STORE IN NUMB\n               \
    \      4     SCIP     RULE POSTLUDE\n1 CC(,E,,1:FR(99)),  5     SICP     RULE\
    \ PRELUDE\n                     6     NULL     NO REPLICATION EXPRESSION\n   \
    \                  7     IC   4   TYPE EBCDIC\n                     8     NULL\
    \     NO VALUE EXPRESSION\n                     9     IC   1   LENGTH\n      \
    \               10    INN      INPUT CALL WITH NO COMPARE\n                  \
    \   11    AD   15\n                     12    BT       SKIP RETURN IF INN SUCCEEDS\n\
    \                     13    IC   99  RETURN CODE\n                     14    RET\
    \      RETURN TO CALLER IF FAILED\n                     15    LD   1   REFERENCE\
    \ TO CC\n                     16    STO      STORE INPUT DATA IN CC\nLINE(,E,,121:\
    \        17    NULL     NO REPLICATION EXPRESSION\n         FR(99)),    18   \
    \ IC   4   TYPE IS EBCDIC\n                     19    NULL     NO VALUE EXPRESSION\n\
    \                     20    IC   121 LENGTH\n                     21    INN  \
    \    INPUT WITH NO COMPARE\n                     22    AD   26\n             \
    \        23    BT       SKIP RETURN IF OK\n                     24    IC   98\
    \  RETURN CODE\n                     25    RET      RETURN TO CALLER IF FAILED\n\
    \                     26    LD   2   REFERENCE TO LINE\n                     27\
    \    STO      STORE INPUT IN LINE\n:CC,                 28    SCIP     SUCCESSFUL\
    \ INPUT\n                     29    NULL     NO REPLICATION FACTOR\n         \
    \            30    LD   1   REFERENCE TO CC\n                     31    LIT  \
    \    TYPE OF CC\n                     32    LD   1   REFERENCE TO VALUE OF CC\n\
    \                     33    LD   1   CC AGAIN\n                     34    LIL\
    \      LENGTH OF CC\n                     35    OUT      OUTPUT CC\n(,ED,NUMB,2),\
    \        36    NULL     NO REPLICATION\n                     37    IC   6   TYPE\
    \ IS ED\n                     38    LD   0   REFERENCE TO VALUE OF NUMB\n    \
    \                 39    IC   2   LENGTH OF OUTPUT FIELD\n                    \
    \ 40    OUT      OUTPUT NUMB AS EBCDIC DEC.\n(,E,E\".\",1),         41    NULL\
    \     NO REPLICATION\n                     42    IC   4   TYPE IS EBCDIC\n   \
    \                  43    LD   3   REFERENCE TO E\".\"\n                     44\
    \    IC   1   LENGTH TO OUTPUT\n                     45    OUT      OUTPUT THE\
    \ PERIOD\n(,E,LINE,117),       46    NULL     NO REPLICATION\n               \
    \      47    IC   4   TYPE IS EBCDIC\n                     48    LD   2   REFERENCE\
    \ TO LINE\n                     49    IC   117 LENGTH TO OUTPUT\n            \
    \         50    OUT      PUT OUT CONTENTS OF LINE\n(NUMB.<=.NUMB+1:     51   \
    \ LD   0   REFERENCE TO NUMB\n         U(1));      52    IC   1   AMOUNT TO ADD\n\
    \                     53    ADD      ADD TO NUMB\n                     54    LD\
    \   0   REFERENCE TO NUMB\n                     55    STO      STORE BACK INTO\
    \ NUMB\n                     56    AD   5   PLACE TO GO\n                    \
    \ 57    B        UNCONDITIONAL BRANCH BACK\n                LITERAL/IDENTIFIER\
    \ TABLE\n                     0     NUMB\n                     1     CC\n    \
    \                 2     LINE\n                     3     E\".\"\n            \
    \         LABEL TABLE\n                  LABEL     OFFSET\n                  \
    \  1         5\n       [ This RFC was put into machine readable form for entry\
    \ ]\n         [ into the online RFC archives by Simone Demmel 6/97 ]\n"
