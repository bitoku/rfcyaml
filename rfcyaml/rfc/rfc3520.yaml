- contents:
  - '                 Session Authorization Policy Element

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the representation of a session authorization\n
    \  policy element for supporting policy-based per-session authorization\n   and
    admission control.  The goal of session authorization is to allow\n   the exchange
    of information between network elements in order to\n   authorize the use of resources
    for a service and to co-ordinate\n   actions between the signaling and transport
    planes.  This document\n   describes how a process on a system authorizes the
    reservation of\n   resources by a host and then provides that host with a session\n
    \  authorization policy element which can be inserted into a resource\n   reservation
    protocol (e.g., the Resource ReSerVation Protocol (RSVP)\n   PATH message) to
    facilitate proper and secure reservation of those\n   resources within the network.
    \ We describe the encoding of session\n   authorization information as a policy
    element conforming to the\n   format of a Policy Data object (RFC 2750) and provide
    details\n   relating to operations, processing rules and error scenarios.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Conventions used in this document..............................3\n
    \  2. Introduction...................................................3\n   3.
    Policy Element for Session Authorization.......................4\n      3.1 Policy
    Data Object Format..................................4\n      3.2 Session Authorization
    Policy Element.......................4\n      3.3 Session Authorization Attributes...........................4\n
    \       3.3.1 Authorizing Entity Identifier..........................6\n        3.3.2
    Session Identifier.....................................7\n        3.3.3 Source
    Address.........................................7\n        3.3.4 Destination Address....................................9\n
    \       3.3.5 Start time............................................10\n        3.3.6
    End time..............................................11\n        3.3.7 Resources
    Authorized..................................11\n        3.3.8 Authentication data...................................12\n
    \  4. Integrity of the AUTH_SESSION policy element..................13\n      4.1
    Shared symmetric keys.....................................13\n        4.1.1 Operational
    Setting using shared symmetric keys.......13\n      4.2 Kerberos..................................................14\n
    \       4.2.1. Operational Setting using Kerberos...................15\n      4.3
    Public Key................................................16\n        4.3.1. Operational
    Setting for public key based\n               authentication.......................................16\n
    \         4.3.1.1 X.509 V3 digital certificates.....................17\n          4.3.1.2
    PGP digital certificates..........................17\n   5. Framework.....................................................18\n
    \     5.1 The coupled model.........................................18\n      5.2
    The associated model with one policy server...............18\n      5.3 The associated
    model with two policy servers..............19\n      5.4 The non-associated model..................................19\n
    \  6. Message Processing Rules......................................20\n      6.1
    Generation of the AUTH_SESSION by the authorizing entity..20\n      6.2 Message
    Generation (RSVP Host)............................20\n      6.3 Message Reception
    (RSVP-aware Router).....................20\n      6.4 Authorization (Router/PDP)................................21\n
    \  7. Error Signaling...............................................22\n   8.
    IANA Considerations...........................................22\n   9. Security
    Considerations.......................................24\n   10. Acknowledgments..............................................24\n
    \  11. Normative References.........................................25\n   12.
    Informative References.......................................27\n   13. Intellectual
    Property Statement..............................27\n   14. Contributors.................................................28\n
    \  15. Authors' Addresses...........................................29\n   16.
    Full Copyright Statement.....................................30\n"
  title: Table of Contents
- contents:
  - "1. Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in BCP 14, RFC 2119\n   [RFC-2119].\n"
  title: 1. Conventions used in this document
- contents:
  - "2. Introduction\n   RSVP [RFC-2205] is one example of a resource reservation
    protocol\n   that is used by a host to request specific services from the network\n
    \  for particular application data streams or flows.  RSVP requests will\n   generally
    result in resources being reserved in each router along the\n   data path.  RSVP
    allows users to obtain preferential access to\n   network resources, under the
    control of an admission control\n   mechanism.  Such admission control is often
    based on user or\n   application identity [RFC-3182], however, it is also valuable
    to\n   provide the ability for per-session admission control.\n   In order to
    allow for per-session admission control, it is necessary\n   to provide a mechanism
    for ensuring use of resources by a host has\n   been properly authorized before
    allowing the reservation of those\n   resources.  In order to meet this requirement,
    there must be\n   information in the resource reservation message which may be
    used to\n   verify the validity of the reservation request.  This can be done
    by\n   providing the host with a session authorization policy element which\n
    \  is inserted into the resource reservation message and verified by the\n   network.\n
    \  This document describes the session authorization policy element\n   (AUTH_SESSION)
    used to convey information about the resources\n   authorized for use by a session.
    \ The host must obtain an\n   AUTH_SESSION element from an authorizing entity
    via a session\n   signaling protocol such as SIP [RFC-3261].  The host then inserts
    the\n   AUTH_SESSION element into the resource reservation message to allow\n
    \  verification of the network resource request; in the case of RSVP,\n   this
    element MUST be encapsulated in the Policy Data object [RFC-\n   2750] of an RSVP
    PATH message.  Network elements verify the request\n   and then process the resource
    reservation message based on admission\n   policy.\n   [RFC-3521] describes a
    framework in which a session authorization\n   policy element may be utilized
    to contain information relevant to the\n   network's decision to grant a reservation
    request.\n"
  title: 2. Introduction
- contents:
  - '3. Policy Element for Session Authorization

    '
  - contents:
    - "3.1 Policy Data Object Format\n   The Session Authorization policy element
      conforms to the format of a\n   POLICY_DATA object which contains policy information
      and is carried\n   by policy based admission protocols such as RSVP.  A detailed\n
      \  description of the POLICY_DATA object can be found in \"RSVP\n   Extensions
      for Policy Control\" [RFC-2750].\n"
    title: 3.1 Policy Data Object Format
  - contents:
    - "3.2 Session Authorization Policy Element\n   In this section we describe a
      policy element (PE) called session\n   authorization (AUTH_SESSION).  The AUTH_SESSION
      policy element\n   contains a list of fields which describe the session, along
      with\n   other attributes.\n          +-------------+-------------+-------------+-------------+\n
      \         | Length                    | P-Type = AUTH_SESSION     |\n          +-------------+-------------+-------------+-------------+\n
      \         // Session Authorization Attribute List                //\n          +-------------------------------------------------------+\n
      \  Length: 16 bits\n      The length of the policy element (including the Length
      and P-Type)\n      is in number of octets (MUST be in multiples of 4) and indicates\n
      \     the end of the session authorization information block.\n   P-Type: 16
      bits (Session Authorization Type)\n      AUTH_SESSION = 0x04\n      The Policy
      element type (P-type) of this element.  The Internet\n      Assigned Numbers
      Authority (IANA) acts as a registry for policy\n      element types as described
      in [RFC-2750].\n   Session Authorization Attribute List: variable length\n      The
      session authorization attribute list is a collection of\n      objects which
      describes the session and provides other information\n      necessary to verify
      the resource reservation request. An initial\n      set of valid objects is
      described in Section 3.3.\n"
    title: 3.2 Session Authorization Policy Element
  - contents:
    - "3.3 Session Authorization Attributes\n   A session authorization attribute
      may contain a variety of\n   information and has both an attribute type and
      subtype.  The\n   attribute itself MUST be a multiple of 4 octets in length,
      and any\n   attributes that are not a multiple of 4 octets long MUST be padded
      to\n   a 4-octet boundary.  All padding bytes MUST have a value of zero.\n      +--------+--------+--------+--------+\n
      \     | Length          | X-Type |SubType |\n      +--------+--------+--------+--------+\n
      \     | Value ...\n      +--------+--------+--------+--------+\n   Length: 16
      bits\n      The length field is two octets and indicates the actual length of\n
      \     the attribute (including Length, X-Type and SubType fields) in\n      number
      of octets.  The length does NOT include any bytes padding\n      to the value
      field to make the attribute a multiple of 4 octets\n      long.\n   X-Type:
      8 bits\n      Session authorization attribute type (X-Type) field is one octet.\n
      \     IANA acts as a registry for X-Types as described in section 7,\n      IANA
      Considerations.  Initially, the registry contains the\n      following X-Types:\n
      \     1  AUTH_ENT_ID          The unique identifier of the entity which\n                              authorized
      the session.\n      2  SESSION_ID           Unique identifier for this session.\n
      \     3  SOURCE_ADDR          Address specification for the session\n                              originator.\n
      \     4  DEST_ADDR            Address specification for the session\n                              end-point.\n
      \     5  START_TIME           The starting time for the session.\n      6  END_TIME
      \            The end time for the session.\n      7  RESOURCES            The
      resources which the user is authorized\n                              to request.\n
      \     8  AUTHENTICATION_DATA  Authentication data of the session\n                              authorization
      policy element.\n   SubType: 8 bits\n      Session authorization attribute sub-type
      is one octet in length.\n      The value of the SubType depends on the X-Type.\n
      \  Value: variable length\n      The attribute specific information.\n"
    - contents:
      - "3.3.1 Authorizing Entity Identifier\n   AUTH_ENT_ID is used to identify the
        entity which authorized the\n   initial service request and generated the
        session authorization\n   policy element.  The AUTH_ENT_ID may be represented
        in various\n   formats, and the SubType is used to define the format for the
        ID. The\n   format for AUTH_ENT_ID is as follows:\n      +-------+-------+-------+-------+\n
        \     | Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      AUTH_ENT_ID\n
        \  SubType\n      The following sub-types for AUTH_ENT_ID are defined.  IANA
        acts as\n      a registry for AUTH_ENT_ID sub-types as described in section
        7,\n      IANA Considerations.  Initially, the registry contains the\n      following
        sub-types of AUTH_ENT_ID:\n      1  IPV4_ADDRESS        IPv4 address represented
        in 32 bits\n      2  IPV6_ADDRESS        IPv6 address represented in 128 bits\n
        \     3  FQDN                Fully Qualified Domain Name as defined in\n                             RFC
        1034 as an ASCII string.\n      4  ASCII_DN            X.500 Distinguished
        name as defined in RFC\n                             2253 as an ASCII string.\n
        \     5  UNICODE_DN          X.500 Distinguished name as defined in RFC\n
        \                            2253 as a UTF-8 string.\n      6  URI                 Universal
        Resource Identifier, as defined\n                             in RFC 2396.\n
        \     7  KRB_PRINCIPAL       Fully Qualified Kerberos Principal name\n                             represented
        by the ASCII string of a\n                             principal followed
        by the @ realm name as\n                             defined in RFC 1510 (e.g.,\n
        \                            principalX@realmY).\n      8  X509_V3_CERT        The
        Distinguished Name of the subject of\n                             the certificate
        as defined in RFC 2253 as a\n                             UTF-8 string.\n
        \     9  PGP_CERT            The PGP digital certificate of the\n                             authorizing
        entity as defined in RFC 2440.\n   OctetString\n      Contains the authorizing
        entity identifier.\n"
      title: 3.3.1 Authorizing Entity Identifier
    - contents:
      - "3.3.2 Session Identifier\n   SESSION_ID is a unique identifier used by the
        authorizing entity to\n   identify the request.  It may be used for a number
        of purposes,\n   including replay detection, or to correlate this request
        to a policy\n   decision entry made by the authorizing entity.  For example,
        the\n   SESSION_ID can be based on simple sequence numbers or on a standard\n
        \  NTP timestamp.\n      +-------+-------+-------+-------+\n      | Length
        \       |X-Type |SubType|\n      +-------+-------+-------+-------+\n      |
        OctetString ...\n      +-------+-------+-------+-------+\n   Length\n      Length
        of the attribute, which MUST be > 4.\n    X-Type\n      SESSION_ID\n   SubType\n
        \     No subtypes for SESSION_ID are currently defined; this field MUST\n
        \     be set to zero.  The authorizing entity is the only network entity\n
        \     that needs to interpret the contents of the SESSION_ID therefore\n      the
        contents and format are implementation dependent.\n   OctetString\n      Contains
        the session identifier.\n"
      title: 3.3.2 Session Identifier
    - contents:
      - "3.3.3 Source Address\n   SOURCE_ADDR is used to identify the source address
        specification of\n   the authorized session.  This X-Type may be useful in
        some scenarios\n   to make sure the resource request has been authorized for
        that\n   particular source address and/or port.\n      +-------+-------+-------+-------+\n
        \     | Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      SOURCE_ADDR\n
        \  SubType\n      The following sub types for SOURCE_ADDR are defined.  IANA
        acts as\n      a registry for SOURCE_ADDR sub-types as described in section
        7,\n      IANA Considerations.  Initially, the registry contains the\n      following
        sub types for SOURCE_ADDR:\n      1  IPV4_ADDRESS        IPv4 address represented
        in 32 bits\n      2  IPV6_ADDRESS        IPv6 address represented in 128 bits\n
        \     3  UDP_PORT_LIST       list of UDP port specifications,\n                             represented
        as 16 bits per list entry.\n      4  TCP_PORT_LIST       list of TCP port
        specifications,\n                             represented as 16 bits per list
        entry.\n   OctetString\n      The OctetString contains the source address
        information.\n   In scenarios where a source address is required (see Section
        5), at\n   least one of the subtypes 1 through 2 (inclusive) MUST be included
        in\n   every Session Authorization Data Policy Element.  Multiple\n   SOURCE_ADDR
        attributes MAY be included if multiple addresses have\n   been authorized.
        \ The source address field of the resource\n   reservation datagram (e.g.,
        RSVP PATH) MUST match one of the\n   SOURCE_ADDR attributes contained in this
        Session Authorization Data\n   Policy Element.\n   At most, one instance of
        subtype 3 MAY be included in every Session\n   Authorization Data Policy Element.
        \ At most, one instance of subtype\n   4 MAY be included in every Session
        Authorization Data Policy Element.\n   Inclusion of a subtype 3 attribute
        does not prevent inclusion of a\n   subtype 4 attribute (i.e., both UDP and
        TCP ports may be authorized).\n   If no PORT attributes are specified, then
        all ports are considered\n   valid; otherwise, only the specified ports are
        authorized for use.\n   Every source address and port list must be included
        in a separate\n   SOURCE_ADDR attribute.\n"
      title: 3.3.3 Source Address
    - contents:
      - "3.3.4 Destination Address\n   DEST_ADDR is used to identify the destination
        address of the\n   authorized session.  This X-Type may be useful in some
        scenarios to\n   make sure the resource request has been authorized for that\n
        \  particular destination address and/or port.\n      +-------+-------+-------+-------+\n
        \     | Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      DEST_ADDR\n
        \  SubType\n      The following sub types for DEST_ADDR are defined.  IANA
        acts as a\n      registry for DEST_ADDR sub-types as described in section
        7, IANA\n      Considerations.  Initially, the registry contains the following\n
        \     sub types for DEST_ADDR:\n      1  IPV4_ADDRESS        IPv4 address
        represented in 32 bits\n      2  IPV6_ADDRESS        IPv6 address represented
        in 128 bits\n      3  UDP_PORT_LIST       list of UDP port specifications,\n
        \                            represented as 16 bits per list entry.\n      4
        \ TCP_PORT_LIST       list of TCP port specifications,\n                             represented
        as 16 bits per list entry.\n   OctetString\n      The OctetString contains
        the destination address specification.\n   In scenarios where a destination
        address is required (see Section 5),\n   at least one of the subtypes 1 through
        2 (inclusive) MUST be included\n   in every Session Authorization Data Policy
        Element.  Multiple\n   DEST_ADDR attributes MAY be included if multiple addresses
        have been\n   authorized.  The destination address field of the resource\n
        \  reservation datagram (e.g., RSVP PATH) MUST match one of the\n   DEST_ADDR
        attributes contained in this Session Authorization Data\n   Policy Element.\n
        \  At most, one instance of subtype 3 MAY be included in every Session\n   Authorization
        Data Policy Element.  At most, one instance of subtype\n   4 MAY be included
        in every Session Authorization Data Policy Element.\n   Inclusion of a subtype
        3 attribute does not prevent inclusion of a\n   subtype 4 attribute (i.e.,
        both UDP and TCP ports may be authorized).\n   If no PORT attributes are specified,
        then all ports are considered\n   valid; otherwise, only the specified ports
        are authorized for use.\n   Every destination address and port list must be
        included in a\n   separate DEST_ADDR attribute.\n"
      title: 3.3.4 Destination Address
    - contents:
      - "3.3.5 Start time\n   START_TIME is used to identify the start time of the
        authorized\n   session and can be used to prevent replay attacks.  If the\n
        \  AUTH_SESSION policy element is presented in a resource request, the\n   network
        SHOULD reject the request if it is not received within a few\n   seconds of
        the start time specified.\n      +-------+-------+-------+-------+\n      |
        Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      START_TIME\n
        \  SubType\n      The following sub types for START_TIME are defined.  IANA
        acts as\n      a registry for START_TIME sub-types as described in section
        7,\n      IANA Considerations.  Initially, the registry contains the\n      following
        sub types for START_TIME:\n      1  NTP_TIMESTAMP        NTP Timestamp Format
        as defined in\n                              RFC 1305.\n   OctetString\n      The
        OctetString contains the start time.\n"
      title: 3.3.5 Start time
    - contents:
      - "3.3.6 End time\n   END_TIME is used to identify the end time of the authorized
        session\n   and can be used to limit the amount of time that resources are\n
        \  authorized for use (e.g., in prepaid session scenarios).\n      +-------+-------+-------+-------+\n
        \     | Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      END_TIME\n
        \  SubType\n      The following sub types for END_TIME are defined.  IANA
        acts as a\n      registry for END_TIME sub-types as described in section 7,
        IANA\n      Considerations.  Initially, the registry contains the following\n
        \     sub types for END_TIME:\n      1  NTP_TIMESTAMP        NTP Timestamp
        Format as defined in\n                              RFC 1305.\n   OctetString\n
        \     The OctetString contains the end time.\n"
      title: 3.3.6 End time
    - contents:
      - "3.3.7 Resources Authorized\n   RESOURCES is used to define the characteristics
        of the authorized\n   session.  This X-Type may be useful in some scenarios
        to specify the\n   specific resources authorized to ensure the request fits
        the\n   authorized specifications.\n      +-------+-------+-------+-------+\n
        \     | Length        |X-Type |SubType|\n      +-------+-------+-------+-------+\n
        \     | OctetString ...\n      +-------+-------+-------+-------+\n   Length\n
        \     Length of the attribute, which MUST be > 4.\n   X-Type\n      RESOURCES\n
        \  SubType\n      The following sub-types for RESOURCES are defined.  IANA
        acts as a\n      registry for RESOURCES sub-types as described in section
        7, IANA\n      Considerations.  Initially, the registry contains the following\n
        \     sub types for RESOURCES:\n      1  BANDWIDTH     Maximum bandwidth (kbps)
        authorized.\n      2  FLOW_SPEC     Flow spec specification as defined in
        RFC 2205.\n      3  SDP           SDP Media Descriptor as defined in RFC 2327.\n
        \     4  DSCP          Differentiated services codepoint as defined in\n                       RFC
        2474.\n   OctetString\n      The OctetString contains the resources specification.\n
        \  In scenarios where a resource specification is required (see Section\n
        \  5), at least one of the subtypes 1 through 4 (inclusive) MUST be\n   included
        in every Session Authorization Data Policy Element.\n   Multiple RESOURCE
        attributes MAY be included if multiple types of\n   resources have been authorized
        (e.g., DSCP and BANDWIDTH).\n"
      title: 3.3.7 Resources Authorized
    - contents:
      - "3.3.8 Authentication data\n   The AUTHENTICATION_DATA attribute contains
        the authentication data of\n   the AUTH_SESSION policy element and signs all
        the data in the policy\n   element up to the AUTHENTICATION_DATA.  If the
        AUTHENTICATION_DATA\n   attribute has been included in the AUTH_SESSION policy
        element, it\n   MUST be the last attribute in the list.  The algorithm used
        to\n   compute the authentication data depends on the AUTH_ENT_ID SubType\n
        \  field.  See Section 4 entitled Integrity of the AUTH_SESSION policy\n   element.\n
        \  A summary of AUTHENTICATION_DATA attribute format is described below.\n
        \     +-------+-------+-------+-------+\n      | Length        |X-Type |SubType|\n
        \     +-------+-------+-------+-------+\n      | OctetString ...\n      +-------+-------+-------+-------+\n
        \  Length\n      Length of the attribute, which MUST be > 4.\n   X-Type\n
        \     AUTHENTICATION_DATA\n   SubType\n      No sub types for AUTHENTICATION_DATA
        are currently defined.  This\n      field MUST be set to 0.\n   OctetString\n
        \     The OctetString contains the authentication data of the\n      AUTH_SESSION.\n"
      title: 3.3.8 Authentication data
    title: 3.3 Session Authorization Attributes
  title: 3. Policy Element for Session Authorization
- contents:
  - "4. Integrity of the AUTH_SESSION policy element\n   This section describes how
    to ensure the integrity of the policy\n   element is preserved.\n"
  - contents:
    - "4.1 Shared symmetric keys\n   In shared symmetric key environments, the AUTH_ENT_ID
      MUST be of\n   subtypes: IPV4_ADDRESS, IPV6_ADDRESS, FQDN, ASCII_DN, UNICODE_DN
      or\n   URI.  An example AUTH_SESSION policy element is shown below.\n         +--------------+--------------+--------------+--------------+\n
      \        | Length                      | P-type = AUTH_SESSION       |\n         +--------------+--------------+--------------+--------------+\n
      \        | Length                      |SESSION_ID    |     zero     |\n         +--------------+--------------+--------------+--------------+\n
      \        | OctetString (The session identifier) ...\n         +--------------+--------------+--------------+--------------+\n
      \        | Length                      | AUTH_ENT_ID  | IPV4_ADDRESS |\n         +--------------+--------------+--------------+--------------+\n
      \        | OctetString (The authorizing entity's Identifier) ...\n         +--------------+--------------+--------------+--------------+\n
      \        | Length                      |AUTH DATA.    |     zero     |\n         +--------------+--------------+--------------+--------------+\n
      \        |                          KEY_ID                           |\n         +--------------+--------------+--------------+--------------+\n
      \        | OctetString (Authentication data) ...\n         +--------------+--------------+--------------+--------------+\n"
    - contents:
      - "4.1.1 Operational Setting using shared symmetric keys\n   This assumes both
        the Authorizing Entity and the Network router/PDP\n   are provisioned with
        shared symmetric keys and with policies\n   detailing which algorithm to be
        used for computing the authentication\n   data along with the expected length
        of the authentication data for\n   that particular algorithm.\n   Key maintenance
        is outside the scope of this document, but\n   AUTH_SESSION implementations
        MUST at least provide the ability to\n   manually configure keys and their
        parameters locally.  The key used\n   to produce the authentication data is
        identified by the AUTH_ENT_ID\n   field.  Since multiple keys may be configured
        for a particular\n   AUTH_ENT_ID value, the first 32 bits of the AUTH_DATA
        field MUST be a\n   key ID to be used to identify the appropriate key.  Each
        key must\n   also be configured with lifetime parameters for the time period\n
        \  within which it is valid as well as an associated cryptographic\n   algorithm
        parameter specifying the algorithm to be used with the key.\n   At a minimum,
        all AUTH_SESSION implementations MUST support the\n   HMAC-MD5-128 [RFC-2104],
        [RFC-1321] cryptographic algorithm for\n   computing the authentication data.
        \ New algorithms may be added by\n   the IETF standards process.\n   It is
        good practice to regularly change keys.  Keys MUST be\n   configurable such
        that their lifetimes overlap allowing smooth\n   transitions between keys.
        \ At the midpoint of the lifetime overlap\n   between two keys, senders should
        transition from using the current\n   key to the next/longer-lived key.  Meanwhile,
        receivers simply accept\n   any identified key received within its configured
        lifetime and reject\n   those that are not.\n"
      title: 4.1.1 Operational Setting using shared symmetric keys
    title: 4.1 Shared symmetric keys
  - contents:
    - "4.2 Kerberos\n   In a Kerberos environment, the AUTH_ENT_ID MUST be of the
      subtype\n   KRB_PRINCIPAL.  The KRB_PRINCIPAL field is defined as the Fully\n
      \  Qualified Kerberos Principal name of the authorizing entity.\n   Kerberos
      [RFC-1510] authentication uses a trusted third party (the\n   Kerberos Distribution
      Center - KDC) to provide for authentication of\n   the AUTH_SESSION to a network
      server.  It is assumed that a KDC is\n   present and both host and verifier
      of authentication information\n   (authorizing entity and router/PDP) implement
      Kerberos\n   authentication.\n   An example of the Kerberos AUTH_DATA policy
      element is shown below.\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      | P-type = AUTH_SESSION       |\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      |SESSION_ID    |     zero     |\n      +--------------+--------------+--------------+--------------+\n
      \     | OctetString (The session identifier) ...\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      | AUTH_ENT_ID  | KERB_P.      |\n      +--------------+--------------+--------------+--------------+\n
      \     | OctetString (The principal@realm name) ...\n      +--------------+--------------+--------------+--------------+\n"
    - contents:
      - "4.2.1. Operational Setting using Kerberos\n   An authorizing entity is configured
        to construct the AUTH_SESSION\n   policy element that designates use of the
        Kerberos authentication\n   method (KRB_PRINCIPAL) as defined in RFC 1510.
        \ Upon reception of the\n   resource reservation request, the router/PDP contacts
        the local KDC,\n   with a KRB_AS_REQ message, to request credentials for the
        authorizing\n   entity (principal@realm).  In this request, the client (router/PDP)\n
        \  sends (in cleartext) its own identity and the identity of the server\n
        \  (the authorizing entity taken from the AUTH_ENT_ID field) for which\n   it
        is requesting credentials.  The local KDC responds with these\n   credentials
        in a KRB_AS_REP message, encrypted in the client's key.\n   The credentials
        consist of 1) a \"ticket\" for the server and 2) a\n   temporary encryption
        key (often called a \"session key\").  The\n   router/PDP uses the ticket
        to access the authorizing entity with a\n   KRB_AP_REQ message.  The session
        key (now shared by the router/PDP\n   and the authorizing entity) is used
        to authenticate the router/PDP,\n   and is used to authenticate the authorizing
        entity.  The session key\n   is an encryption key and is also used to encrypt
        further\n   communication between the two parties.  The authorizing entity\n
        \  responds by sending a concatenated message of a KRB_AP_REP and a\n   KRB_SAFE.
        \ The KRB_AP_REP is used to authenticate the authorizing\n   entity.  The
        KRB_SAFE message contains the authentication data in the\n   safe-body field.
        \ The authentication data must be either a 16 byte\n   MD5 hash or 20 byte
        SHA-1 hash of all data in the AUTH_SESSION policy\n   element up to the AUTHENTICATION_DATA
        (note that when using Kerberos\n   the AUTH_SESSION PE should not include
        AUTHENTICATION_DATA as this is\n   sent in the KRB_SAFE message).  The router/PDP
        independently computes\n   the hash, and compares it with the received hash
        in the user-data\n   field of the KRB-SAFE-BODY [RFC-1510].\n   At a minimum,
        all AUTH_SESSION implementations using Kerberos MUST\n   support the Kerberos
        des-cbc-md5 encryption type [RFC-1510] (for\n   encrypted data in tickets
        and Kerberos messages) and the Kerberos\n   rsa-md5-des checksum type [RFC-1510]
        (for the KRB_SAFE checksum)\n   checksum.  New algorithms may be added by
        the IETF standards process.\n   Triple-DES encryption is supported in many
        Kerberos implementations\n   (although not specified in [RFC-1510]), and SHOULD
        be used over\n   single DES.\n   For cases where the authorizing entity is
        in a different realm (i.e.,\n   administrative domain, organizational boundary),
        the router/PDP needs\n   to fetch a cross-realm Ticket Granting Ticket (TGT)
        from its local\n   KDC.  This TGT can be used to fetch authorizing entity
        tickets from\n   the KDC in the remote realm.  Note that for performance\n
        \  considerations, tickets are typically cached for extended periods.\n"
      title: 4.2.1. Operational Setting using Kerberos
    title: 4.2 Kerberos
  - contents:
    - "4.3 Public Key\n   In a public key environment, the AUTH_ENT_ID MUST be of
      the subtypes:\n   X509_V3_CERT or PGP_CERT.  The authentication data is used
      for\n   authenticating the authorizing entity.  An example of the public key\n
      \  AUTH_SESSION policy element is shown below.\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      | P-type = AUTH_SESSION       |\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      |SESSION_ID    |     zero     |\n      +--------------+--------------+--------------+--------------+\n
      \     | OctetString (The session identifier) ...\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      | AUTH_ENT_ID  |   PGP_CERT   |\n      +--------------+--------------+--------------+--------------+\n
      \     | OctetString (Authorizing entity Digital Certificate) ...\n      +--------------+--------------+--------------+--------------+\n
      \     | Length                      |AUTH DATA.    |     zero     |\n      +--------------+--------------+--------------+--------------+\n
      \     | OctetString (Authentication data) ...\n      +--------------+--------------+--------------+--------------+\n"
    - contents:
      - "4.3.1. Operational Setting for public key based authentication\n      Public
        key based authentication assumes the following:\n      -  Authorizing entities
        have a pair of keys (private key and\n         public key).\n      -  Private
        key is secured with the authorizing entity.\n      -  Public keys are stored
        in digital certificates and a trusted\n         party, certificate authority
        (CA) issues these digital\n         certificates.\n      -  The verifier (PDP
        or router) has the ability to verify the\n         digital certificate.\n
        \  Authorizing entity uses its private key to generate\n   AUTHENTICATION_DATA.
        \ Authenticators (router, PDP) use the\n   authorizing entity's public key
        (stored in the digital certificate)\n   to verify and authenticate the policy
        element.\n"
      - contents:
        - "4.3.1.1 X.509 V3 digital certificates\n   When the AUTH_ENT_ID is of type
          X509_V3_CERT, AUTHENTICATION_DATA\n   MUST be generated following these
          steps:\n   -  A Signed-data is constructed as defined in section 5 of CMS\n
          \     [RFC-3369].  A digest is computed on the content (as specified in\n
          \     section 6.1) with a signer-specific message-digest algorithm.  The\n
          \     certificates field contains the chain of authorizing entity's\n      X.509
          V3 digital certificates.  The certificate revocation list is\n      defined
          in the crls field.  The digest output is digitally signed\n      following
          section 8 of RFC 3447, using the signer's private key.\n   When the AUTH_ENT_ID
          is of type X509_V3_CERT, verification MUST be\n   done following these steps:\n
          \  -  Parse the X.509 V3 certificate to extract the distinguished name\n
          \     of the issuer of the certificate.\n   -  Certification Path Validation
          is performed as defined in section 6\n      of RFC 3280.\n   -  Parse through
          the Certificate Revocation list to verify that the\n      received certificate
          is not listed.\n   -  Once  the X.509 V3 certificate is validated, the public
          key of the\n      authorizing entity can be extracted from the certificate.\n
          \  -  Extract the digest algorithm and the length of the digested data\n
          \     by parsing the CMS signed-data.\n   -  The recipient independently
          computes the message digest.  This\n      message digest and the signer's
          public key are used to verify the\n      signature value.\n   This verification
          ensures integrity, non-repudiation and data origin.\n"
        title: 4.3.1.1 X.509 V3 digital certificates
      - contents:
        - "4.3.1.2 PGP digital certificates\n   When the AUTH_ENT_ID is of type PGP_CERT,
          AUTHENTICATION_DATA MUST be\n   generated following these steps:\n   -  AUTHENTICATION_DATA
          contains a Signature Packet as defined in\n      section 5.2.3 of RFC 2440.
          \ In summary:\n      -  Compute the hash of all data in the AUTH_SESSION
          policy element\n         up to the AUTHENTICATION_DATA.\n      -  The hash
          output is digitally signed following section 8 of\n         RFC 3447, using
          the signer's private key.\n   When the AUTH_ENT_ID is of type PGP_CERT,
          verification MUST be done\n   following these steps:\n   -  Validate the
          certificate.\n   -  Once the PGP certificate is validated, the public key
          of the\n      authorizing entity can be extracted from the certificate.\n
          \  -  Extract the hash algorithm and the length of the hashed data by\n
          \     parsing the PGP signature packet.\n   -  The recipient independently
          computes the message digest.  This\n      message digest and the signer's
          public key are used to verify the\n      signature value.\n   This verification
          ensures integrity, non-repudiation and data origin.\n"
        title: 4.3.1.2 PGP digital certificates
      title: 4.3.1. Operational Setting for public key based authentication
    title: 4.3 Public Key
  title: 4. Integrity of the AUTH_SESSION policy element
- contents:
  - "5. Framework\n   [RFC-3521] describes a framework in which the AUTH_SESSION policy\n
    \  element may be utilized to transport information required for\n   authorizing
    resource reservation for media flows. [RFC-3521]\n   introduces 4 different models:\n
    \     1- the coupled model\n      2- the associated model with one policy server\n
    \     3- the associated model with two policy servers\n      4- the non-associated
    model.\n   The fields that are required in an AUTH SESSION policy element\n   dependent
    on which of the models is used.\n"
  - contents:
    - "5.1 The coupled model\n   In the Coupled Model, the only information that MUST
      be included in\n   the policy element is the SESSION_ID; it is used by the Authorizing\n
      \  Entity to correlate the resource reservation request with the media\n   authorized
      during session set up.  Since the End Host is assumed to\n   be untrusted, the
      Policy Server SHOULD take measures to ensure that\n   the integrity of the SESSION_ID
      is preserved in transit; the exact\n   mechanisms to be used and the format
      of the SESSION_ID are\n   implementation dependent.\n"
    title: 5.1 The coupled model
  - contents:
    - "5.2 The associated model with one policy server\n   In this model, the contents
      of the AUTH_SESSION policy element MUST\n   include:\n   -  A session identifier
      - SESSION_ID.  This is information that the\n      authorizing entity can use
      to correlate the resource reservation\n      request with the media authorized
      during session set up.\n   -  The identity of the authorizing entity - AUTH_ENT_ID.
      \ This\n      information is used by the Edge Router to determine which\n      authorizing
      entity (Policy Server) should be used to solicit\n      resource policy decisions.\n
      \  In some environments, an Edge Router may have no means for\n   determining
      if the identity refers to a legitimate Policy Server\n   within its domain.
      \ In order to protect against redirection of\n   authorization requests to a
      bogus authorizing entity, the\n   AUTH_SESSION MUST also include:\n   -  AUTHENTICATION_DATA.
      \ This authentication data is calculated over\n      all other fields of the
      AUTH_SESSION policy element.\n"
    title: 5.2 The associated model with one policy server
  - contents:
    - "5.3 The associated model with two policy servers\n   The content of the AUTH_SESSION
      Policy Element is identical to the\n   associated model with one policy server.\n"
    title: 5.3 The associated model with two policy servers
  - contents:
    - "5.4 The non-associated model\n   In this model, the AUTH_SESSION MUST contain
      sufficient information\n   to allow the Policy Server to make resource policy
      decisions\n   autonomously from the authorizing entity.  The policy element
      is\n   created using information about the session by the authorizing\n   entity.
      \ The information in the AUTH_SESSION policy element MUST\n   include:\n   -
      \ Calling party IP address or Identity (e.g., FQDN) - SOURCE_ADDR\n      X-TYPE\n
      \  -  Called party IP address or Identity (e.g., FQDN) - DEST_ADDR\n      X-TYPE\n
      \  -  The characteristics of (each of) the media stream(s) authorized\n      for
      this session - RESOURCES X-TYPE\n   -  The authorization lifetime - START_TIME
      X-TYPE\n   -  The identity of the authorizing entity to allow for validation
      of\n      the token in shared symmetric key and Kerberos schemes -\n      AUTH_ENT_ID
      X-TYPE\n   -  The credentials of the authorizing entity in a public-key\n      scheme
      - AUTH_ENT_ID X-TYPE\n   -  Authentication data used to prevent tampering with
      the\n      AUTH_SESSION policy element - AUTHENTICATION_DATA\n   Furthermore,
      the AUTH_SESSION policy element MAY contain:\n   -  The lifetime of (each of)
      the media stream(s) - END_TIME X-TYPE\n   -  Calling party port number - SOURCE_ADDR
      X-TYPE\n   -  Called party port number - DEST_ADDR X-TYPE\n   All AUTH_SESSION
      fields MUST match with the resource request.  If a\n   field does not match,
      the request SHOULD be denied.\n"
    title: 5.4 The non-associated model
  title: 5. Framework
- contents:
  - '6. Message Processing Rules

    '
  - contents:
    - "6.1 Generation of the AUTH_SESSION by the authorizing entity\n   1. Generate
      the AUTH_SESSION policy element with the appropriate\n      contents as specified
      in section 5.\n   2. If authentication is needed, the entire AUTH_SESSION policy\n
      \     element is constructed, excluding the length, type and subtype\n      fields
      of the AUTH_SESSION field.  Note that the message MUST\n      include either
      a START_TIME or a SESSION_ID (See Section 9), to\n      prevent replay attacks.
      \ The output of the authentication\n      algorithm, plus appropriate header
      information, is appended to the\n      AUTH_SESSION policy element.\n"
    title: 6.1 Generation of the AUTH_SESSION by the authorizing entity
  - contents:
    - "6.2 Message Generation (RSVP Host)\n   An RSVP message is created as specified
      in [RFC-2205] with the\n   following modifications.\n   1. RSVP message MUST
      contain at most one AUTH_SESSION policy element.\n   2. The AUTH SESSION policy
      element received from the authorizing\n      entity (Section 3.2) MUST be copied
      without modification into the\n      POLICY DATA object.\n   3. POLICY_DATA
      object (containing the AUTH_SESSION policy element) is\n      inserted in the
      RSVP message in the appropriate place.\n"
    title: 6.2 Message Generation (RSVP Host)
  - contents:
    - "6.3 Message Reception (RSVP-aware Router)\n   RSVP message is processed as
      specified in [RFC-2205] with following\n   modifications.\n   1. If router is
      policy aware then it SHOULD send the RSVP message to\n      the PDP and wait
      for response.  If the router is policy unaware\n      then it ignores the policy
      data objects and continues processing\n      the RSVP message.\n   2. Reject
      the message if the response from the PDP is negative.\n   3. Continue processing
      the RSVP message.\n"
    title: 6.3 Message Reception (RSVP-aware Router)
  - contents:
    - "6.4 Authorization (Router/PDP)\n   1. Retrieve the AUTH_SESSION policy element.
      \ Check the PE type field\n      and return an error if the identity type is
      not supported.\n   2. Verify the message integrity.\n      -  Shared symmetric
      key authentication: The Network router/PDP\n         uses the AUTH_ENT_ID field
      to consult a table keyed by that\n         field.  The table should identify
      the cryptographic\n         authentication algorithm to be used along with the
      expected\n         length of the authentication data and the shared symmetric
      key\n         for the authorizing entity.  Verify that the indicated length\n
      \        of the authentication data is consistent with the configured\n         table
      entry and validate the authentication data.\n      -  Public Key: Validate the
      certificate chain against the trusted\n         Certificate Authority (CA) and
      validate the message signature\n         using the public key.\n      -  Kerberos
      Ticket: If the AUTH_ENT_ID is of subtype\n         KRB_PRINCIPAL, Request a
      ticket for the authorizing entity\n         (principal@realm) from the local
      KDC.  Use the ticket to access\n         the authorizing entity and obtain authentication
      data for the\n         message.\n   3. Once the identity of the authorizing
      entity and the validity of\n      the service request has been established,
      the authorizing\n      router/PDP MUST then consult its local policy tables
      (the contents\n      of which are a local matter) in order to determine whether
      or not\n      the specific request is authorized.  To the extent to which these\n
      \     access control decisions require supplementary information,\n      routers/PDPs
      MUST ensure that supplementary information is\n      obtained securely.  An
      example of insecure access control\n      decisions would be if the authorizing
      party relies upon an\n      insecure database (such as DNS or a public LDAP
      directory) and\n      authorizes with a certificate or an FQDN.\n   4. Verify
      the requested resources do not exceed the authorized QoS.\n"
    title: 6.4 Authorization (Router/PDP)
  title: 6. Message Processing Rules
- contents:
  - "7. Error Signaling\n   If a PDP fails to verify the AUTH_SESSION policy element
    then it MUST\n   return a policy control failure (Error Code = 02) to the PEP.
    \ The\n   error values are described in [RFC-2205] and [RFC-2750].  Also the\n
    \  PDP SHOULD supply a policy data object containing an AUTH_DATA Policy\n   Element
    with A-Type=POLICY_ERROR_CODE containing more details on the\n   Policy Control
    failure [RFC-3182].  If RSVP is being used, the PEP\n   MUST include this Policy
    Data object in the outgoing RSVP Error\n   message.\n"
  title: 7. Error Signaling
- contents:
  - "8. IANA Considerations\n   Following the policies outlined in [IANA-CONSIDERATIONS],
    Standard\n   RSVP Policy Elements (P-type values) are assigned by IETF Consensus\n
    \  action as described in [RFC-2750].\n   P-Type AUTH_SESSION is assigned the
    value 0x04.\n   Following the policies outlined in [IANA-CONSIDERATIONS], session\n
    \  authorization attribute types (X-Type)in the range 0-127 are\n   allocated
    through an IETF Consensus action; X-Type values between\n   128-255 are reserved
    for Private Use and are not assigned by IANA.\n   X-Type AUTH_ENT_ID is assigned
    the value 1.\n   X-Type SESSION_ID is assigned the value 2.\n   X-Type SOURCE_ADDR
    is assigned the value 3.\n   X-Type DEST_ADDR is assigned the value 4.\n   X-Type
    START_TIME is assigned the value 5.\n   X-Type END_TIME is assigned the value
    6.\n   X-Type RESOURCES is assigned the value 7.\n   X-Type AUTHENTICATION_DATA
    is assigned the value 8.\n   Following the policies outlined in [IANA-CONSIDERATIONS],\n
    \  AUTH_ENT_ID SubType values in the range 0-127 are allocated through\n   an
    IETF Consensus action; SubType values between 128-255 are\n   reserved for Private
    Use and are not assigned by IANA.\n   AUTH_ENT_ID SubType IPV4_ADDRESS is assigned
    the value 1.\n   SubType IPV6_ADDRESS is assigned the value 2.\n   SubType FQDN
    is assigned the value 3.\n   SubType ASCII_DN is assigned the value 4.\n   SubType
    UNICODE_DN is assigned the value 5.\n   SubType URI is assigned the value 6.\n
    \  SubType KRB_PRINCIPAL is assigned the value 7.\n   SubType X509_V3_CERT is
    assigned the value 8.\n   SubType PGP_CERT is assigned the value 9.\n   Following
    the policies outlined in [IANA-CONSIDERATIONS],\n   SOURCE_ADDR SubType values
    in the range 0-127 are allocated through\n   an IETF Consensus action; SubType
    values between 128-255 are\n   reserved for Private Use and are not assigned by
    IANA.\n   SOURCE_ADDR SubType IPV4_ADDRESS is assigned the value 1.\n   SubType
    IPV6_ADDRESS is assigned the value 2.\n   SubType UDP_PORT_LIST is assigned the
    value 3.\n   SubType TCP_PORT_LIST is assigned the value 4.\n   Following the
    policies outlined in [IANA-CONSIDERATIONS],\n   DEST_ADDR SubType values in the
    range 0-127 are allocated through an\n   IETF Consensus action; SubType values
    between 128-255 are reserved\n   for Private Use and are not assigned by IANA.\n
    \  DEST_ADDR SubType IPV4_ADDRESS is assigned the value 1.\n   SubType IPV6_ADDRESS
    is assigned the value 2.\n   SubType UDP_PORT_LIST is assigned the value 3.\n
    \  SubType TCP_PORT_LIST is assigned the value 4.\n   Following the policies outlined
    in [IANA-CONSIDERATIONS],\n   START_TIME SubType values in the range 0-127 are
    allocated through an\n   IETF Consensus action; SubType values between 128-255
    are\n   reserved for Private Use and are not assigned by IANA.\n   START_TIME
    SubType NTP_TIMESTAMP is assigned the value 1.\n   Following the policies outlined
    in [IANA-CONSIDERATIONS],\n   END_TIME SubType values in the range 0-127 are allocated
    through an\n   IETF Consensus action; SubType values between 128-255 are reserved\n
    \  for Private Use and are not assigned by IANA.\n   END_TIME SubType NTP_TIMESTAMP
    is assigned the value 1.\n   Following the policies outlined in [IANA-CONSIDERATIONS],\n
    \  RESOURCES SubType values in the range 0-127 are allocated through an\n   IETF
    Consensus action; SubType values between 128-255 are reserved\n   for Private
    Use and are not assigned by IANA.\n   RESOURCES SubType BANDWIDTH is assigned
    the value 1.\n   SubType FLOW_SPEC is assigned the value 2.\n   SubType SDP is
    assigned the value 3.\n   SubType DSCP is assigned the value 4.\n"
  title: 8. IANA Considerations
- contents:
  - "9. Security Considerations\n   The purpose of this document is to describe a
    mechanism for session\n   authorization to prevent theft of service.\n   Replay
    attacks MUST be prevented.  In the non-associated model, the\n   AUTH_SESSION
    policy element MUST include a START_TIME field and the\n   Policy Servers MUST
    support NTP to ensure proper clock\n   synchronization.  Failure to ensure proper
    clock synchronization will\n   allow replay attacks since the clocks of the different
    network\n   entities may not be in-synch.  The start time is used to verify that\n
    \  the request is not being replayed at a later time.  In all other\n   models,
    the SESSION_ID is used by the Policy Server to ensure that\n   the resource request
    successfully correlates with records of an\n   authorized session.  If a AUTH_SESSION
    is replayed, it MUST be\n   detected by the policy server (using internal algorithms)
    and the\n   request MUST be rejected.\n   To ensure that the integrity of the
    policy element is preserved in\n   untrusted environments, the AUTHENTICATION_DATA
    attribute MUST be\n   included.\n   In environments where shared symmetric keys
    are possible, they should\n   be used in order to keep the AUTH_SESSION policy
    element size to a\n   strict minimum.  This is especially true in wireless environments\n
    \  where the AUTH_SESSION policy element is sent\n   over-the-air.  The shared
    symmetric keys authentication option MUST\n   be supported by all AUTH_SESSION
    implementations.\n   If shared symmetric keys are not a valid option, the Kerberos\n
    \  authentication mechanism is reasonably well secured and efficient in\n   terms
    of AUTH_SESSION size.  The AUTH_SESSION only needs to contain\n   the principal@realm
    name of the authorizing entity.  This is much\n   more efficient than the PKI
    authentication option.\n   PKI authentication option provides a high level of
    security and good\n   scalability, however it requires the presence of credentials
    in the\n   AUTH_SESSION policy element which impacts its size.\n"
  title: 9. Security Considerations
- contents:
  - "10.  Acknowledgments\n   We would like to thank Francois Audet, Don Wade, Hamid
    Syed, Kwok Ho\n   Chan and many others for their valuable comments.  Special thanks
    to\n   Eric Rescorla who provided numerous comments and suggestions that\n   improved
    this document.\n   In addition, we would like to thank S. Yadav, et al., for their\n
    \  efforts on RFC 3182, as this document borrows from their work.\n"
  title: 10.  Acknowledgments
- contents:
  - "11.  Normative References\n   [ASCII]               Coded Character Set -- 7-Bit
    American Standard\n                         Code for Information Interchange,
    ANSI X3.4-\n                         1986.\n   [X.509-ITU]           ITU-T (formerly
    CCITT) Information technology\n                         Open Systems Interconnection
    - The Directory:\n                         Authentication Framework Recommendation
    X.509\n                         ISO/IEC 9594-8\n   [RFC-1034]            Mockapetris,
    P., \"Domain names - concepts and\n                         facilities\", STD
    13, RFC 1034, November 1987.\n   [RFC-1305]            Mills, D., \"Network Time
    Protocol (Version 3)\n                         Specification, Implementation,
    and Analysis\",\n                         RFC 1305, March 1992.\n   [RFC-1321]
    \           Rivest, R., \"The MD5 Message-Digest Algorithm\",\n                         RFC
    1321, April 1992.\n   [RFC-1510]            Kohl, J. and C. Neuman, \"The Kerberos
    Network\n                         Authentication Service (V5)\", RFC 1510,\n                         September
    1993.\n   [RFC-2104]            Krawczyk, H., Bellare, M. and R. Canetti,\n                         \"HMAC:
    Keyed-Hashing for Message\n                         Authentication\", RFC 2104,
    February 1997.\n   [RFC-2119]            Bradner, S., \"Key words for use in RFCs
    to\n                         Indicate Requirement Levels\", BCP 14, RFC 2119,\n
    \                        March 1997.\n   [RFC-2205]            Braden, R., Ed.,
    Zhang, L., Berson, S., Herzog,\n                         S. and S. Jamin, \"Resource
    ReSerVation Protocol\n                         (RSVP) - Version 1 Functional Specification\",\n
    \                        RFC 2205, September 1997.\n   [RFC-2209]            Braden,
    R. and L. Zhang, \"Resource ReSerVation\n                         Protocol (RSVP)
    - Version 1 Message Processing\n                         Rules\", RFC 2209, September
    1997.\n   [RFC-2253]            Wahl, M., Kille, S. and T. Howes , \"UTF-8\n                         String
    Representation of Distinguished Names\",\n                         RFC 2253, December
    1997.\n   [RFC-2279]            Yergeau, F., \"UTF-8, a transformation format
    of\n                         ISO 10646\", RFC 2279, January 1998.\n   [RFC-2327]
    \           Handley, M. and V. Jacobson, \"SDP: Session\n                         Description
    Protocol\", RFC 2327, October 1998.\n   [RFC-2396]            Berners-Lee, T.,
    Fielding, R., Masinter, L.,\n                         \"Uniform Resource Identifiers
    (URI): Generic\n                         Syntax\", RFC 2396, August 1998.\n   [RFC-2440]
    \           Callas, J., Donnerhacke, L., Finney, H. and R.\n                         Thayer,
    \"OpenPGP Message Format\", RFC 2440,\n                         November 1998.\n
    \  [RFC-2474]            Nichols, K., Blake, S., Baker, F. and D. Black,\n                         \"Definition
    of the Differentiated Services\n                         Field (DS Field) in the
    IPv4 and IPv6 Headers\",\n                         RFC 2474, December 1998.\n
    \  [RFC-2750]            Herzog, S., \"RSVP Extensions for Policy\n                         Control\",
    RFC 2750, January 2000.\n   [RFC-2753]            Yavatkar, R., Pendarakis, D.
    and R. Guerin, \"A\n                         Framework for Policy-based Admission
    Control\n                         RSVP\", RFC 2753, January 2000.\n   [RFC-3182]
    \           Yadav, S., Yavatkar, R., Pabbati, R., Ford, P.,\n                         Moore,
    T., Herzog, S. and R. Hess, \"Identity\n                         Representation
    for RSVP\", RFC 3182, October\n                         2001\n   [RFC-3280]            Housley,
    R., Polk, W., Ford, W. and D. Solo,\n                         \"Internet X.509
    Public Key Infrastructure\n                         Certificate and Certificate
    Revocation List\n                         (CRL) Profile\", RFC 3280, April 2002.\n
    \  [RFC-3369]            Housley, R., \"Cryptographic Message Syntax\",\n                         RFC
    3369, August 2002.\n   [RFC-3447]            Jonsson, J. and B. Kaliski, \"Public-Key\n
    \                        Cryptography Standards (PKCS) #1: RSA\n                         Cryptography
    Specifications Version 2.1\", RFC\n                         3447, February 2003.\n
    \  [RFC-3521]            Hamer, L.-N., Gage, B. and H. Shieh, \"Framework\n                         for
    Session Setup with Media Authorization\",\n                         RFC 3521,
    April 2003.\n"
  title: 11.  Normative References
- contents:
  - "12.  Informative References\n   [IANA-CONSIDERATIONS] Alvestrand, H. and T. Narten,
    \"Guidelines for\n                         Writing an IANA Considerations Section
    in\n                         RFCs\", BCP 26, RFC 2434, October 1998.\n   [RFC-3261]
    \           Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n                         Johnston,
    A., Peterson, J., Sparks, R.,\n                         Handley, M. and E. Schooler,
    \"SIP: Session\n                         Initiation Protocol\", RFC 3261, June
    2002.\n"
  title: 12.  Informative References
- contents:
  - "13.  Intellectual Property Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 13.  Intellectual Property Statement
- contents:
  - "14.  Contributors\n   Matt Broda\n   Nortel Networks\n   EMail: mbroda@nortelnetworks.com\n
    \  Louis LeVay\n   Nortel Networks\n   EMail: levay@nortelnetworks.com\n   Dennis
    Beard\n   Nortel Networks\n   EMail: beardd@nortelnetworks.com\n   Lawrence Dobranski\n
    \  Nortel Networks\n   EMail: ldobran@nortelnetworks.com\n"
  title: 14.  Contributors
- contents:
  - "15.  Authors' Addresses\n   Louis-Nicolas Hamer\n   Nortel Networks\n   PO Box
    3511 Station C\n   Ottawa, Ontario\n   Canada K1Y 4H7\n   Phone: +1 613.768.3409\n
    \  EMail: nhamer@nortelnetworks.com\n   Brett Kosinski\n   Invidi Technologies\n
    \  Edmonton, Alberta\n   Canada T5J 3S4\n   EMail: brettk@invidi.com\n   Bill
    Gage\n   Nortel Networks\n   PO Box 3511 Station C\n   Ottawa, Ontario\n   Canada
    K1Y 4H7\n   Phone: +1 613.763.4400\n   EMail: gageb@nortelnetworks.com\n   Hugh
    Shieh\n   AT&T Wireless\n   7277 164th Avenue NE\n   Redmond, WA\n   USA 98073-9761\n
    \  Phone: +1 425.580.6898\n   EMail: hugh.shieh@attws.com\n"
  title: 15.  Authors' Addresses
- contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 16.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
