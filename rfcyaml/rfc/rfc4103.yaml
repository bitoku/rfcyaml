- contents:
  - '                   RTP Payload for Text Conversation

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo obsoletes RFC 2793; it describes how to carry real-time\n
    \  text conversation session contents in RTP packets.  Text conversation\n   session
    contents are specified in ITU-T Recommendation T.140.\n   One payload format is
    described for transmitting text on a separate\n   RTP session dedicated for the
    transmission of text.\n   This RTP payload description recommends a method to
    include redundant\n   text from already transmitted packets in order to reduce
    the risk of\n   text loss caused by packet loss.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction ...................................................3\n
    \  2.  Conventions Used in This Document ..............................4\n   3.
    \ Usage of RTP ...................................................4\n       3.1.
    Motivations and Rationale .................................4\n       3.2. Payload
    Format for Transmission of text/t140 Data .........4\n       3.3. The \"T140block\"
    ...........................................5\n       3.4. Synchronization of Text
    with Other Media ..................5\n       3.5. RTP Packet Header .........................................5\n
    \  4.  Protection against Loss of Data ................................6\n       4.1.
    Payload Format When Using Redundancy ......................6\n       4.2. Using
    Redundancy with the text/t140 Format ................7\n   5.  Recommended Procedure
    ..........................................8\n       5.1. Recommended Basic Procedure
    ...............................8\n       5.2. Transmission before and after \"Idle
    Periods\" ..............8\n       5.3. Detection of Lost Text Packets ............................9\n
    \      5.4. Compensation for Packets Out of Order ....................10\n   6.
    \ Parameter for Character Transmission Rate .....................10\n   7.  Examples
    ......................................................11\n       7.1. RTP Packetization
    Examples for the text/t140 Format ......11\n       7.2. SDP Examples .............................................13\n
    \  8.  Security Considerations .......................................14\n       8.1.
    Confidentiality ..........................................14\n       8.2. Integrity
    ................................................14\n       8.3. Source Authentication
    ....................................14\n   9.  Congestion Considerations .....................................14\n
    \  10. IANA Considerations ...........................................16\n       10.1.
    Registration of MIME Media Type text/t140 ...............16\n       10.2. SDP
    Mapping of MIME Parameters ..........................17\n       10.3. Offer/Answer
    Consideration ..............................17\n   11. Acknowledgements ..............................................18\n
    \  12. Normative References ..........................................18\n   13.
    Informative References ........................................19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a payload type for carrying text conversation\n
    \  session contents in RTP [2] packets.  Text conversation session\n   contents
    are specified in ITU-T Recommendation T.140 [1].  Text\n   conversation is used
    alone or in connection with other conversational\n   facilities, such as video
    and voice, to form multimedia conversation\n   services.  Text in multimedia conversation
    sessions is sent\n   character-by-character as soon as it is available, or with
    a small\n   delay for buffering.\n   The text is intended to be entered by human
    users from a keyboard,\n   handwriting recognition, voice recognition or any other
    input method.\n   The rate of character entry is usually at a level of a few characters\n
    \  per second or less.  In general, only one or a few new characters are\n   expected
    to be transmitted with each packet.  Small blocks of text\n   may be prepared
    by the user and pasted into the user interface for\n   transmission during the
    conversation, occasionally causing packets to\n   carry more payload.\n   T.140
    specifies that text and other T.140 elements must be\n   transmitted in ISO 10646-1
    [5] code with UTF-8 [6] transformation.\n   This makes it easy to implement internationally
    useful applications\n   and to handle the text in modern information technology
    environments.\n   The payload of an RTP packet that follows this specification
    consists\n   of text encoded according to T.140, without any additional framing.\n
    \  A common case will be a single ISO 10646 character, UTF-8 encoded.\n   T.140
    requires the transport channel to provide characters without\n   duplication and
    in original order.  Text conversation users expect\n   that text will be delivered
    with no, or a low level, of lost\n   information.\n   Therefore, a mechanism based
    on RTP is specified here.  It gives text\n   arrival in correct order, without
    duplication, and with detection and\n   indication of loss.  It also includes
    an optional possibility to\n   repeat data for redundancy in order to lower the
    risk of loss.\n   Because packet overhead is usually much larger than the T.140\n
    \  contents, the increase in bandwidth, with the use of redundancy, is\n   minimal.\n
    \  By using RTP for text transmission in a multimedia conversation\n   application,
    uniform handling of text and other media can be achieved\n   in, for example,
    conferencing systems, firewalls, and network\n   translation devices.  This, in
    turn, eases the design and increases\n   the possibility for prompt and proper
    media delivery.\n   This document obsoletes RFC 2793 [16].  The text clarifies\n
    \  ambiguities in RFC 2793, improves on the specific implementation\n   requirements
    learned through development experience and gives\n   explicit usage examples.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in RFC 2119 [4].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Usage of RTP\n   The payload format for real-time text transmission with
    RTP [2]\n   described in this memo is intended for general text conversation use\n
    \  and is called text/t140 after its MIME registration.\n"
  - contents:
    - "3.1.  Motivations and Rationale\n   The text/t140 format is intended to be
      used for text transmitted on a\n   separate RTP session, dedicated for the transmission
      of text, and not\n   shared with other media.\n   The text/t140 format MAY be
      used for any non-gateway application, as\n   well as in gateways.  It MAY be
      used simultaneously with other media\n   streams, transmitted as a separate
      RTP session, as required in real\n   time multimedia applications.\n   The text/t140
      format specified in this memo is compatible with its\n   earlier definition
      in RFC 2793.  It has been refined, with the main\n   intention to minimize interoperability
      problems and encourage good\n   reliability and functionality.\n   By specifying
      text transmission as a text medium, many good effects\n   are gained.  Routing,
      device selection, invocation of transcoding,\n   selection of quality of service
      parameters, and other high and low\n   level functions depend on each medium
      being explicitly specified.\n"
    title: 3.1.  Motivations and Rationale
  - contents:
    - "3.2.  Payload Format for Transmission of text/t140 Data\n   A text/t140 conversation
      RTP payload format consists of one, and only\n   one, block of T.140 data, referred
      to as a \"T140block\" (see Section\n   3.3).  There are no additional headers
      specific to this payload\n   format.  The fields in the RTP header are set as
      defined in Section\n   3.5, carried in network byte order (see RFC 791 [12]).\n"
    title: 3.2.  Payload Format for Transmission of text/t140 Data
  - contents:
    - "3.3.  The \"T140block\"\n   T.140 text is UTF-8 coded, as specified in T.140,
      with no extra\n   framing.  The T140block contains one or more T.140 code elements
      as\n   specified in [1].  Most T.140 code elements are single ISO 10646 [5]\n
      \  characters, but some are multiple character sequences.  Each\n   character
      is UTF-8 encoded [6] into one or more octets.  Each block\n   MUST contain an
      integral number of UTF-8 encoded characters\n   regardless of the number of
      octets per character.  Any composite\n   character sequence (CCS) SHOULD be
      placed within one block.\n"
    title: 3.3.  The "T140block"
  - contents:
    - "3.4.  Synchronization of Text with Other Media\n   Usually, each medium in
      a session utilizes a separate RTP stream.  As\n   such, if synchronization of
      the text and other media packets is\n   important, the streams MUST be associated
      when the sessions are\n   established and the streams MUST share the same reference
      clock\n   (refer to the description of the timestamp field as it relates to\n
      \  synchronization in Section 5.1 of RFC 3550 [2]).  Association of RTP\n   streams
      can be done through the CNAME field of RTCP SDES function.\n   It is dependent
      on the particular application and is outside the\n   scope of this document.\n"
    title: 3.4.  Synchronization of Text with Other Media
  - contents:
    - "3.5.  RTP Packet Header\n   Each RTP packet starts with a fixed RTP header.
      \ The following fields\n   of the RTP fixed header are specified for T.140 text
      streams:\n   Payload Type (PT): The assignment of an RTP payload type is specific\n
      \                     to the RTP profile under which the payload format\n                      is
      used.  For profiles that use dynamic payload\n                      type number
      assignment, this payload format can be\n                      identified by
      the MIME type \"text/t140\" (see\n                      Section 10).  If redundancy
      is used per RFC 2198,\n                      another payload type number needs
      to be provided\n                      for the redundancy format.  The MIME type
      for\n                      identifying RFC 2198 is available in RFC 4102 [9].\n
      \  Sequence number:   The definition of sequence numbers is available in\n                      RFC
      3550 [2].  When transmitting text using the\n                      payload format
      for text/t140, it is used for\n                      detection of packet loss
      and out-of-order packets,\n                      and can be used in the process
      of retrieval of\n                      redundant text, reordering of text and
      marking\n                      missing text.\n   Timestamp:         The RTP
      Timestamp encodes the approximate instance\n                      of entry of
      the primary text in the packet.  A\n                      clock frequency of
      1000 Hz MUST be used.\n                      Sequential packets MUST NOT use
      the same\n                      timestamp.  Because packets do not represent
      any\n                      constant duration, the timestamp cannot be used to\n
      \                     directly infer packet loss.\n   M-bit:             The
      M-bit MUST be included.  The first packet in a\n                      session,
      and the first packet after an idle\n                      period, SHOULD be
      distinguished by setting the\n                      marker bit in the RTP data
      header to one.  The\n                      marker bit in all other packets MUST
      be set to\n                      zero.  The reception of the marker bit MAY
      be used\n                      for refined methods for detection of loss.\n"
    title: 3.5.  RTP Packet Header
  title: 3.  Usage of RTP
- contents:
  - "4.  Protection against Loss of Data\n   Consideration must be devoted to keeping
    loss of text due to packet\n   loss within acceptable limits.  (See ITU-T F.703
    [17])\n   The default method that MUST be used, when no other method is\n   explicitly
    selected, is redundancy in accordance with RFC 2198 [3].\n   When this method
    is used, the original text and two redundant\n   generations SHOULD be transmitted
    if the application or end-to-end\n   conditions do not call for other levels of
    redundancy to be used.\n   Forward Error Correction mechanisms, as per RFC 2733
    [8], or any\n   other mechanism with the purpose of increasing the reliability
    of\n   text transmission, MAY be used as an alternative or complement to\n   redundancy.
    \ Text data MAY be sent without additional protection if\n   end-to-end network
    conditions allow the text quality requirements,\n   specified in ITU-T F.703 [17],
    to be met in all anticipated load\n   conditions.\n"
  - contents:
    - "4.1.  Payload Format When Using Redundancy\n   When using the payload format
      with redundant data, the transmitter\n   may select a number of T140block generations
      to retransmit in each\n   packet.  A higher number introduces better protection
      against loss of\n   text but marginally increases the data rate.\n   The RTP
      header is followed by one or more redundant data block\n   headers: one for
      each redundant data block to be included.  Each of\n   these headers provides
      the timestamp offset and length of the\n   corresponding data block, in addition
      to a payload type number\n   (indicating the payload format text/t140).\n   The
      redundant data block headers are followed by the redundant data\n   fields carrying
      T140blocks from previous packets.  Finally, the new\n   (primary) T140block
      for this packet follows.\n   Redundant data that would need a timestamp offset
      higher than 16383\n   (due to its age at transmission) MUST NOT be included
      in transmitted\n   packets.\n"
    title: 4.1.  Payload Format When Using Redundancy
  - contents:
    - "4.2.  Using Redundancy with the text/t140 Format\n   Because text is transmitted
      only when there is text to transmit, the\n   timestamp is not used to identify
      a lost packet.  Rather, missing\n   sequence numbers are used to detect lost
      text packets at reception.\n   Also, because sequence numbers are not provided
      in the redundant\n   header, some additional rules must be followed to allow
      redundant\n   data that corresponds to missing primary data to be properly merged\n
      \  into the stream of primary data T140blocks.  They are:\n   - Each redundant
      data block MUST contain the same data as a T140block\n     previously transmitted
      as primary data.\n   - The redundant data MUST be placed in age order, with
      the most\n     recent redundant T140block last in the redundancy area.\n   -
      All T140blocks, from the oldest desired generation up through the\n     generation
      immediately preceding the new (primary) T140block, MUST\n     be included.\n
      \  These rules allow the sequence numbers for the redundant T140blocks\n   to
      be inferred by counting backwards from the sequence number in the\n   RTP header.
      \ The result will be that all the text in the payload will\n   be contiguous
      and in order.\n   If there is a gap in the received RTP sequence numbers, and
      redundant\n   T140blocks are available in a subsequent packet, the sequence
      numbers\n   for the redundant T140blocks should be inferred by counting backwards\n
      \  from the sequence number in the RTP header for that packet.  If there\n   are
      redundant T140blocks with sequence numbers matching those that\n   are missing,
      the redundant T140blocks may be substituted for the\n   missing T140blocks.\n"
    title: 4.2.  Using Redundancy with the text/t140 Format
  title: 4.  Protection against Loss of Data
- contents:
  - "5.  Recommended Procedure\n   This section contains RECOMMENDED procedures for
    usage of the payload\n   format.  Based on the information in the received packets,
    the\n   receiver can:\n      - reorder text received out of order.\n      - mark
    where text is missing because of packet loss.\n      - compensate for lost packets
    by using redundant data.\n"
  - contents:
    - "5.1.  Recommended Basic Procedure\n   Packets are transmitted when there is
      valid T.140 data to transmit.\n   T.140 specifies that T.140 data MAY be buffered
      for transmission with\n   a maximum buffering time of 500 ms.  A buffering time
      of 300 ms is\n   RECOMMENDED when the application or end-to-end network conditions
      are\n   not known to require another value.\n   If no new data is available
      for a longer period than the buffering\n   time, the transmission process is
      in an idle period.\n   When new text is available for transmission after an
      idle period, it\n   is RECOMMENDED to send it as soon as possible.  After this\n
      \  transmission, it is RECOMMENDED to buffer T.140 data in buffering\n   time
      intervals, until the next idle period.  This is done in order to\n   keep the
      maximum bit rate usage for text at a reasonable level.  The\n   buffering time
      MUST be selected so that text users will perceive a\n   real-time text flow.\n"
    title: 5.1.  Recommended Basic Procedure
  - contents:
    - "5.2.  Transmission before and after \"Idle Periods\"\n   When valid T.140 data
      has been sent and no new T.140 data is\n   available for transmission after
      the selected buffering time, an\n   empty T140block SHOULD be transmitted.  This
      situation is regarded as\n   the beginning of an idle period.  The procedure
      is recommended in\n   order to more rapidly detect potentially missing text
      before an idle\n   period.\n   An empty T140block contains no data.\n   When
      redundancy is used, transmission continues with a packet at\n   every transmission
      timer expiration and insertion of an empty\n   T.140block as primary, until
      the last non-empty T140block has been\n   transmitted, as primary and as redundant
      data, with all intended\n   generations of redundancy.  The last packet before
      an idle period\n   will contain only one non-empty T140block as redundant data,
      while\n   the remainder of the redundancy packet will contain empty T140blocks.\n
      \  Any empty T140block sent as primary data MUST be included as\n   redundant
      T140blocks in subsequent packets, just as normal text\n   T140blocks would be,
      unless the empty T140block is too old to be\n   transmitted.  This is done so
      that sequence number inference for the\n   redundant T140blocks will be correct,
      as explained in Section 4.2.\n   After an idle period, the transmitter SHOULD
      set the M-bit to one in\n   the first packet with new text.\n"
    title: 5.2.  Transmission before and after "Idle Periods"
  - contents:
    - "5.3.  Detection of Lost Text Packets\n   Packet loss for text/t140 packets
      MAY be detected by observing gaps\n   in the sequence numbers of RTP packets
      received by the receiver.\n   With text/t140, the loss of packets is usually
      detected by comparison\n   of the sequence of RTP packets as they arrive.  Any
      discrepancy MAY\n   be used to indicate loss.  The highest RTP sequence number
      received\n   may also be compared with that in RTCP reports, as an additional\n
      \  check for loss of the last packet before an idle period.\n   Missing data
      SHOULD be marked by insertion of a missing text marker\n   in the received stream
      for each missing T140block, as specified in\n   ITU-T T.140 Addendum 1 [1].\n
      \  Because empty T140blocks are transmitted in the beginning of an idle\n   period,
      there is a slight risk of falsely marking loss of text, when\n   only an empty
      T140block was lost.  Procedures based on detection of\n   the packet with the
      M-bit set to one MAY be used to reduce the risk\n   of introducing false markers
      of loss.\n   If redundancy is used with the text/t140 format, and a packet is\n
      \  received with fewer redundancy levels than normally in the session,\n   it
      SHOULD be treated as if one empty T140block has been received for\n   each excluded
      level in the received packet.  This is because the only\n   occasion when a
      T140block is excluded from transmission is when it is\n   an empty T140block
      that has become too old to be transmitted.\n   If two successive packets have
      the same number of redundant\n   generations, it SHOULD be treated as the general
      redundancy level for\n   the session.  Change of the general redundancy level
      SHOULD only be\n   done after an idle period.\n   The text/t140 format relies
      on use of the sequence number in the RTP\n   packet header for detection of
      loss and, therefore, is not suitable\n   for applications where it needs to
      be alternating with other payloads\n   in the same RTP stream.  It would be
      complicated and unreliable to\n   try to detect loss of data at the edges of
      the shifts between t140\n   text and other stream contents.  Therefore, text/t140
      is RECOMMENDED\n   to be the only payload type in the RTP stream.\n"
    title: 5.3.  Detection of Lost Text Packets
  - contents:
    - "5.4.  Compensation for Packets Out of Order\n   For protection against packets
      arriving out of order, the following\n   procedure MAY be implemented in the
      receiver.  If analysis of a\n   received packet reveals a gap in the sequence
      and no redundant data\n   is available to fill that gap, the received packet
      SHOULD be kept in\n   a buffer to allow time for the missing packet(s) to arrive.
      \ It is\n   RECOMMENDED that the waiting time be limited to 1 second.\n   If
      a packet with a T140block belonging to the gap arrives before the\n   waiting
      time expires, this T140block is inserted into the gap and\n   then consecutive
      T140blocks from the leading edge of the gap may be\n   consumed.  Any T140block
      that does not arrive before the time limit\n   expires should be treated as
      lost and a missing text marker should be\n   inserted (see Section 5.3).\n"
    title: 5.4.  Compensation for Packets Out of Order
  title: 5.  Recommended Procedure
- contents:
  - "6.  Parameter for Character Transmission Rate\n   In some cases, it is necessary
    to limit the rate at which characters\n   are transmitted.  For example, when
    a Public Switched Telephone\n   Network (PSTN) gateway is interworking between
    an IP device and a\n   PSTN textphone, it may be necessary to limit the character
    rate from\n   the IP device in order to avoid throwing away characters (in case
    of\n   buffer overflow at the PSTN gateway).\n   To control the character transmission
    rate, the MIME parameter \"cps\"\n   in the \"fmtp\" attribute [7] is defined
    (see Section 10 ).  It is used\n   in SDP with the following syntax:\n      a=fmtp:<format>
    cps=<integer>\n   The <format> field is populated with the payload type that is
    used\n   for text.  The <integer> field contains an integer representing the\n
    \  maximum number of characters that may be received per second.  The\n   value
    shall be used as a mean value over any 10-second interval.  The\n   default value
    is 30.\n   Examples of use in SDP are found in Section 7.2.\n   In receipt of
    this parameter, devices MUST adhere to the request by\n   transmitting characters
    at a rate at or below the specified <integer>\n   value.  Note that this parameter
    was not defined in RFC 2793 [16].\n   Therefore implementations of the text/t140
    format may be in use that\n   do not recognize and act according to this parameter.
    \ Therefore,\n   receivers of text/t140 MUST be designed so they can handle temporary\n
    \  reception of characters at a higher rate than this parameter\n   specifies.
    \ As a result malfunction due to buffer overflow is avoided\n   for text conversation
    with human input.\n"
  title: 6.  Parameter for Character Transmission Rate
- contents:
  - '7.  Examples

    '
  - contents:
    - "7.1.  RTP Packetization Examples for the text/t140 Format\n   Below is an example
      of a text/t140 RTP packet without redundancy.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X| CC=0  |M|   T140 PT   |       sequence number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      timestamp (1000Hz)                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           synchronization source (SSRC) identifier            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      T.140 encoded data                       |\n   +                                               +---------------+\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Below is an example
      of a text/t140 RTP packet with one redundant\n   T140block.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X| CC=0  |M|  \"RED\" PT   |   sequence number of primary  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               timestamp of primary encoding \"P\"               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           synchronization source (SSRC) identifier            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|   T140 PT   |  timestamp offset of \"R\"  | \"R\" block length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|   T140 PT   | \"R\" T.140 encoded redundant data              |\n   +-+-+-+-+-+-+-+-+
      \                              +---------------+\n   +                                               |
      \              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+-+-+\n
      \  |                \"P\" T.140 encoded primary data       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Below is an example of an RTP packet with one redundant T140block\n   using
      text/t140 payload format.  The primary data block is empty,\n   which is the
      case when transmitting a packet for the sole purpose of\n   forcing the redundant
      data to be transmitted in the absence of any\n   new data.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X| CC=0  |M|  \"RED\" PT   |   sequence number of primary  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               timestamp of primary encoding \"P\"               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           synchronization source (SSRC) identifier            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|   T140 PT   |  timestamp offset of \"R\"  | \"R\" block length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|   T140 PT   | \"R\" T.140 encoded redundant data              |\n   +-+-+-+-+-+-+-+-+
      \                              +---------------+\n   |                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   As a follow-on to the
      previous example, the example below shows the\n   next RTP packet in the sequence,
      which does contain a real T140block\n   when using the text/t140 payload format.
      \ Note that the empty block\n   is present in the redundant transmissions of
      the text/t140 payload\n   format.  This example shows two levels of redundancy
      and one primary\n   data block.  The value of the \"R2 block length\" would
      be set to zero\n   in order to represent the empty T140block.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|X| CC=0  |M|  \"RED\" PT   |   sequence number of primary  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               timestamp of primary encoding \"P\"               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           synchronization source (SSRC) identifier            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|   T140 PT   |  timestamp offset of \"R2\" | \"R2\" block length |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|   T140 PT   |  timestamp offset of \"R1\" | \"R1\" block length |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|   T140 PT   | \"R1\" T.140 encoded redundant data             |\n   +-+-+-+-+-+-+-+-+
      \                              +---------------+\n   |                                               |
      \              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+         +-+-+-+\n
      \  |              \"P\" T.140 encoded primary data             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 7.1.  RTP Packetization Examples for the text/t140 Format
  - contents:
    - "7.2.  SDP Examples\n   Below is an example of SDP, which describes RTP text
      transport on\n   port 11000:\n      m=text 11000 RTP/AVP 98\n      a=rtpmap:98
      t140/1000\n   Below is an example of SDP that is similar to the above example,
      but\n   also utilizes RFC 2198 to provide the recommended two levels of\n   redundancy
      for the text packets:\n      m=text 11000 RTP/AVP 98 100\n      a=rtpmap:98
      t140/1000\n      a=rtpmap:100 red/1000\n      a=fmtp:100 98/98/98\n   Note:
      \ Although these examples utilize the RTP/AVP profile, it is not\n   intended
      to limit the scope of this memo.  Any appropriate profile\n   may be used in
      conjunction with this memo.\n"
    title: 7.2.  SDP Examples
  title: 7.  Examples
- contents:
  - "8.  Security Considerations\n   All of the security considerations from Section
    14 of RFC 3550 [2]\n   apply.\n"
  - contents:
    - "8.1.  Confidentiality\n   Because the intention of the described payload format
      is to carry\n   text in a text conversation, security measures in the form of\n
      \  encryption are of importance.  The amount of data in a text\n   conversation
      session is low.  Therefore, any encryption method MAY be\n   selected and applied
      to T.140 session contents or to whole RTP\n   packets.  Secure Real-time Transport
      Protocol (SRTP) [14] provides a\n   suitable method for ensuring confidentiality.\n"
    title: 8.1.  Confidentiality
  - contents:
    - "8.2.  Integrity\n   It may be desirable to protect the text contents of an
      RTP stream\n   against manipulation.  SRTP [14] provides methods for providing\n
      \  integrity that MAY be applied.\n"
    title: 8.2.  Integrity
  - contents:
    - "8.3.  Source Authentication\n   There are several methods of making sure the
      source of the text is\n   the intended one.\n   Text streams are usually used
      in a multimedia control environment.\n   Security measures for authentication
      are available and SHOULD be\n   applied in the registration and session establishment
      procedures, so\n   that the identity of the sender of the text stream is reliably\n
      \  associated with the person or device setting up the session.  Once\n   established,
      SRTP [14] mechanisms MAY be applied to ascertain that\n   the source is maintained
      the same during the session.\n"
    title: 8.3.  Source Authentication
  title: 8.  Security Considerations
- contents:
  - "9.  Congestion Considerations\n   The congestion considerations from Section
    10 of RFC 3550 [2],\n   Section 6 of RFC 2198 [3], and any used profile (e.g.,
    the section\n   about congestion in chapter 2 of RFC 3551 [11]) apply with the\n
    \  following application-specific considerations.\n   Automated systems MUST NOT
    use this format to send large amounts of\n   text at rates significantly above
    those a human user could enter.\n   Even if the network load from users of text
    conversation is usually\n   very low, for best-effort networks an application
    MUST monitor the\n   packet loss rate and take appropriate actions to reduce its
    sending\n   rate (if this application sends at higher rate than what TCP would\n
    \  achieve over the same path).  The reason for this is that this\n   application,
    due to its recommended usage of two or more redundancy\n   levels, is very robust
    against packet loss.  At the same time, due to\n   the low bit-rate of text conversations,
    if one considers the\n   discussion in RFC 3714 [13], this application will experience
    very\n   high packet loss rates before it needs to perform any reduction in\n
    \  the sending rate.\n   If the application needs to reduce its sending rate,
    it SHOULD NOT\n   reduce the number of redundancy levels below the default amount\n
    \  specified in Section 4.  Instead, the following actions are\n   RECOMMENDED
    in order of priority:\n   - Increase the shortest time between transmissions (described
    in\n     Section 5.1) from the recommended 300 ms to 500 ms, which is the\n     highest
    value allowed according to T.140.\n   - Limit the maximum rate of characters transmitted.\n
    \  - Increase the shortest time between transmissions to a higher value,\n     not
    higher than 5 seconds.  This will cause unpleasant delays in\n     transmission,
    beyond what is allowed according to T.140, but text\n     will still be conveyed
    in the session with some usability.\n   - Exclude participants from the session.\n
    \  Please note that if the reduction in bit-rate achieved through the\n   above
    measures is not sufficient, the only remaining action is to\n   terminate the
    session.\n   As guidance, some load figures are provided here as examples based
    on\n   use of IPv4, including the load from IP, UDP, and RTP headers without\n
    \  compression .\n   - Experience tells that a common mean character transmission
    rate,\n     during a complete PSTN text telephony session, is around two\n     characters
    per second.\n   - A maximum performance of 20 characters per second is enough
    even\n     for voice-to-text applications.\n   - With the (unusually high) load
    of 20 characters per second, in a\n     language that makes use of three octets
    per UTF-8 character, two\n     redundant levels, and 300 ms between transmissions,
    the maximum\n     load of this application is 3300 bits/s.\n   - When the restrictions
    mentioned above are applied, limiting\n     transmission to 10 characters per
    second, using 5 s between\n     transmissions, the maximum load of this application,
    in a language\n     that uses one octet per UTF-8 character, is 300 bits/s.\n
    \  Note that this payload can be used in a congested situation as a last\n   resort
    to maintain some contact when audio and video media need to be\n   stopped.  The
    availability of one low bit-rate stream for text in\n   such adverse situations
    may be crucial for maintaining some\n   communication in a critical situation.\n"
  title: 9.  Congestion Considerations
- contents:
  - "10.  IANA Considerations\n   This document updates the RTP payload format named
    \"t140\" and the\n   associated MIME type \"text/t140\", in the IANA RTP and Media
    Type\n   registries.\n"
  - contents:
    - "10.1.  Registration of MIME Media Type text/t140\n   MIME media type name:
      text\n   MIME subtype name: t140\n   Required parameters: rate: The RTP timestamp
      clock rate, which is\n     equal to the sampling rate.  The only valid value
      is 1000.\n   Optional parameters: cps: The maximum number of characters that
      may\n     be received per second.  The default value is 30.\n   Encoding considerations:
      T.140 text can be transmitted with RTP as\n     specified in RFC 4103.\n   Security
      considerations: See Section 8 of RFC 4103.\n   Interoperability considerations:
      This format is the same as specified\n     in RFC2793.  For RFC2793 the \"cps=\"
      parameter was not defined.\n     Therefore, there may be implementations that
      do not consider this\n     parameter.  Receivers need to take that into account.\n
      \  Published specification: ITU-T T.140 Recommendation.  RFC 4103.\n   Applications
      which use this media type: Text communication terminals\n     and text conferencing
      tools.\n   Additional information: This type is only defined for transfer via\n
      \    RTP.\n   Magic number(s): None\n   File extension(s): None\n   Macintosh
      File Type Code(s): None\n   Person & email address to contact for further information:\n
      \  Gunnar Hellstrom\n   E-mail: gunnar.hellstrom@omnitor.se\n   Intended usage:
      COMMON\n   Author                        / Change controller:\n     Gunnar Hellstrom
      \           | IETF avt WG\n     gunnar.hellstrom@omnitor.se |\n"
    title: 10.1.  Registration of MIME Media Type text/t140
  - contents:
    - "10.2.  SDP Mapping of MIME Parameters\n   The information carried in the MIME
      media type specification has a\n   specific mapping to fields in the Session
      Description Protocol (SDP)\n   [7], which is commonly used to describe RTP sessions.
      \ When SDP is\n   used to specify sessions employing the text/t140 format, the
      mapping\n   is as follows:\n   - The MIME type (\"text\") goes in SDP \"m=\"
      as the media name.\n   - The MIME subtype (payload format name) goes in SDP
      \"a=rtpmap\" as\n     the encoding name.  The RTP clock rate in \"a=rtpmap\"
      MUST be 1000\n     for text/t140.\n   - The parameter \"cps\" goes in SDP \"a=fmtp\"
      attribute.\n   - When the payload type is used with redundancy according to
      RFC\n     2198, the level of redundancy is shown by the number of elements in\n
      \    the slash-separated payload type list in the \"fmtp\" parameter of\n     the
      redundancy declaration as defined in RFC 4102 [9] and RFC 2198\n     [3].\n"
    title: 10.2.  SDP Mapping of MIME Parameters
  - contents:
    - "10.3.  Offer/Answer Consideration\n   In order to achieve interoperability
      within the framework of the\n   offer/answer model [10], the following consideration
      should be made:\n   - The \"cps\" parameter is declarative.  Both sides may
      provide a\n     value, which is independent of the other side.\n"
    title: 10.3.  Offer/Answer Consideration
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgements\n   The authors want to thank Stephen Casner, Magnus Westerlund,
    and\n   Colin Perkins for valuable support with reviews and advice on\n   creation
    of this document, to Mickey Nasiri at Ericsson Mobile\n   Communication for providing
    the development environment, Michele\n   Mizarro for verification of the usability
    of the payload format for\n   its intended purpose, and Andreas Piirimets for
    editing support and\n   validation.\n"
  title: 11.  Acknowledgements
- contents:
  - "12.  Normative References\n   [1]  ITU-T Recommendation T.140 (1998) - Text conversation
    protocol\n        for multimedia application, with amendment 1, (2000).\n   [2]
    \ Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n        \"RTP:
    A Transport Protocol for Real-Time Applications\", RFC\n        3550, July 2003.\n
    \  [3]  Perkins, C., Kouvelas, I., Hodson, O., Hardman, V., Handley, M.,\n        Bolot,
    J., Vega-Garcia, A., and S. Fosse-Parisis, \"RTP Payload\n        for Redundant
    Audio Data\", RFC 2198, September 1997.\n   [4]  Bradner, S., \"Key words for
    use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March
    1997.\n   [5]  ISO/IEC 10646-1: (1993), Universal Multiple Octet Coded\n        Character
    Set.\n   [6]  Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD\n
    \       63, RFC 3629, November 2003.\n   [7]  Handley, M. and V. Jacobson, \"SDP:
    Session Description\n        Protocol\", RFC 2327, April 1998.\n   [8]  Rosenberg,
    J. and H. Schulzrinne, \"An RTP Payload Format for\n        Generic Forward Error
    Correction\", RFC 2733, December 1999.\n   [9]  Jones, P., \"Registration of the
    text/red MIME Sub-Type\", RFC\n        4102, June 2005.\n   [10] Rosenberg, J.
    and H. Schulzrinne, \"An Offer/Answer Model with\n        the Session Description
    Protocol (SDP)\", RFC 3264, June 2002.\n   [11] Schulzrinne, H. and S. Casner,
    \"RTP Profile for Audio and Video\n        Conference with Minimal Control\",
    STD 65, RFC 3551, July 2003.\n   [12] Postel, J., \"Internet Protocol\", STD 5,
    RFC 791, September 1981.\n"
  title: 12.  Normative References
- contents:
  - "13.  Informative References\n   [13] Floyd, S. and J. Kempf, \"IAB Concerns Regarding
    Congestion\n        Control for Voice Traffic in the Internet\", RFC 3714, March\n
    \       2004.\n   [14] Baugher, M., McGrew, D., Naslund, M., Carrara, E., and
    K.\n        Norrman, \"The Secure Real-time Transport Protocol (SRTP)\", RFC\n
    \       3711, March 2004.\n   [15] Schulzrinne, H. and S. Petrack, \"RTP Payload
    for DTMF Digits,\n        Telephony Tones and Telephony Signals\", RFC 2833, May
    2000.\n   [16] Hellstrom, G., \"RTP Payload for Text Conversation\", RFC 2793,\n
    \       May 2000.\n   [17] ITU-T Recommendation F.703, Multimedia Conversational
    Services,\n        November 2000.\n"
  title: 13.  Informative References
- contents:
  - "Authors' Addresses\n   Gunnar Hellstrom\n   Omnitor AB\n   Renathvagen 2\n   SE-121
    37 Johanneshov\n   Sweden\n   Phone: +46 708 204 288 / +46 8 556 002 03\n   Fax:
    \  +46 8 556 002 06\n   EMail: gunnar.hellstrom@omnitor.se\n   Paul E. Jones\n
    \  Cisco Systems, Inc.\n   7025 Kit Creek Rd.\n   Research Triangle Park, NC 27709\n
    \  USA\n   Phone: +1 919 392 6948\n   EMail: paulej@packetizer.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
