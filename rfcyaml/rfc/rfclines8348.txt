Abstract This document defines a YANG data model for the management of hardware on a single server.
This document defines a YANG data model [RFC7950] for the management of hardware on a single server.
The data model includes configuration and system state (status information and counters for the collection of statistics).
The data model in this document is designed to be compliant with the Network Management Datastore Architecture (NMDA) [RFC8342].
For implementations that do not yet support NMDA, a temporary module with system state data only is defined in Appendix A. 1.1.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The following terms are defined in [RFC8342] and are not redefined here:  client  server  configuration
system state  operational state  intended configuration 1.2.
Tree Diagrams Tree diagrams used in this document follow the notation defined in [RFC8340].
This section describes some of the design objectives for the hardware data model.
The hardware data model needs to support many common properties used to identify hardware components.
Important information and states about hardware components need to be collected from devices that support the hardware data model.
The hardware data model should be suitable for new implementations to use as is.
The hardware data model defined in this document can be implemented on a system that also implements ENTITY MIB; thus, the mapping between the hardware data model and ENTITY MIB should be clear.
The data model should support pre provisioning of hardware components.
This document defines the YANG module "ietf hardware", which has the following structure: module: ietf hardware
uuid  rw state {hardware state}?
ro sensor data {hardware sensor}?
sensor value  ro value type?
sensor value type  ro value scale?
sensor value scale  ro value precision?
sensor value precision  ro oper status?
sensor status  ro units display?
yang:date and time  ro value update rate?
uint32 notifications:  n hardware state change  n hardware state oper enabled {hardware state}?
/hardware/component/state/alarm state  n hardware state oper disabled {hardware state}?
/hardware/component/state/admin state  ro alarm state?
The data model for hardware presented in this document uses a flat list of components.
Each component in the list is identified by its name.
Furthermore, each component has a mandatory "class" leaf.
The "iana hardware" module defines YANG identities for the hardware types in the IANA maintained "IANA ENTITY MIB" registry.
The "class" leaf is a YANG identity that describes the type of the hardware.
Vendors are encouraged to either directly use one of the common IANA defined identities or derive a more specific identity from one of them.
If the device implements the ENTITY MIB [RFC6933], each entry in the "/hardware/component" list in the operational state is mapped to one EntPhysicalEntry.
Objects that are writable in the MIB are mapped to "config true" nodes in the "/hardware/component" list, except entPhysicalSerialNum, which is writable in the MIB but "config false" in the YANG module.
The "physical index" leaf MUST contain the value of the corresponding
The "class" leaf is mapped to both entPhysicalClass and entPhysicalVendorType.
If the value of the "class" leaf is an identity that either is derived from or is one of the identities in the "iana hardware" module, then entPhysicalClass contains the corresponding IANAPhysicalClass enumeration value.
Otherwise, entPhysicalClass contains the IANAPhysicalClass value "other(1)".
Vendors are encouraged to define an identity (derived from an identity in "iana hardware" if possible) for each enterprise specific registration identifier used for entPhysicalVendorType and use that identity for the "class" leaf.
The following table lists the YANG data nodes with corresponding objects in the ENTITY MIB.
YANG Data Nodes and Related ENTITY
Relationship to ENTITY SENSOR MIB
If the device implements the ENTITY SENSOR
, each entry in the "/hardware/component" list where the container "sensor data" exists is mapped to one EntPhySensorEntry.
The following table lists the YANG data nodes with corresponding objects in the ENTITY SENSOR MIB.
Data Nodes and Related ENTITY SENSOR MIB Objects 6.
Relationship to ENTITY STATE MIB
If the device implements the ENTITY STATE MIB [RFC4268], each entry in the "/hardware/component" list where the container "state" exists is mapped to one EntStateEntry.
The following table lists the YANG data nodes with corresponding objects in the ENTITY STATE MIB.
Data Nodes and Related ENTITY SENSOR MIB Objects 7.
This YANG module imports typedefs from [RFC6991].
" module ietf hardware { yang version 1.1; namespace "urn:ietf:params:xml:
yang:ietf hardware"; prefix hw; import ietf inet types { prefix inet; } import ietf yang types { prefix yang; } import iana hardware { prefix ianahw; } organization "IETF NETMOD (Network Modeling) Working Group"; contact
Dan Romascanu <mailto:dromasca@gmail.com>"; description "
This module contains a collection of YANG definitions for managing hardware.
This data model is designed for the Network Management Datastore Architecture (NMDA) defined in RFC 8342.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8348; see the RFC itself for full legal notices."; revision 2018 03 13 { description "Initial revision."
This feature indicates that the device implements the ENTITY MIB."
MIB objects are supported"; reference "RFC 3433:
} enum idle { value 2; description "The resource is servicing no users."
An alarm is a persistent indication of an error or warning condition.
When no bits of this attribute are set, then no active alarms are known against this component and it is not under repair."
The actual data units are determined by examining a node of this type together with the associated sensor value scale node.
A node of this type SHOULD be defined together with nodes of type sensor value scale and type sensor value precision.
A node using this data type represents a data scaling factor, represented with an International System of Units (SI) prefix.
The actual data units are determined by examining a node of this type together with the associated sensor value type.
A node of this type SHOULD be defined together with nodes of type sensor value type and type sensor value precision.
Together, associated nodes of these three types are used to identify the semantics of a node of type sensor value."
A node using this data type represents a sensor value precision range.
A node of this type SHOULD be defined together with nodes of type sensor value type and type sensor value scale.
Together, associated nodes of these three types are used to identify the semantics of a node of type sensor value.
If a node of this type contains a value in the range 1 to 9, it represents the number of decimal places in the fractional part of an associated sensor value fixed point number.
If a node of this type contains a value in the range  8 to  1, it represents the number of accurate digits in the associated sensor value fixed point number.
The value zero indicates the associated sensor value node is not a fixed point number.
Server implementers must choose a value for the associated sensor value precision node so that the precision and accuracy of the associated sensor value node is correctly indicated.
The sensor value would be interpreted as 'degrees C   10'.
A node using this data type represents a sensor value.
A node of this type SHOULD be defined together with nodes of type sensor value type, type sensor value scale, and type sensor value precision.
Together, associated nodes of those three types are used to identify the semantics of a node of this data type.
The semantics of a node using this data type are determined by the value of the associated sensor value type node.
If the associated sensor value type node is equal to 'voltsAC', 'voltsDC', 'amperes', 'watts', 'hertz', 'celsius', or 'cmm', then a node of this type MUST contain a fixed point number ranging from  999,999,999 to  999,999,999.
The value  1000000000 indicates an underflow error.
The value  1000000000 indicates an overflow error.
The sensor value precision indicates how many fractional digits are represented in the associated sensor value node.
If the associated sensor value type node is equal to 'percentRH', then a node of this type MUST contain a number ranging from 0 to 100.
If the associated sensor value type node is equal to 'rpm', then a node of this type MUST contain a number ranging from  999,999,999 to  999,999,999.
If the associated sensor value type node is equal to 'truth value', then a node of this type MUST contain either the value 1 (true) or the value 2 (false).
If the associated sensor value type node is equal to 'other' or 'unknown', then a node of this type MUST contain a number ranging from  1000000000 to 1000000000."
Entity Sensor Management Information Base EntitySensorValue
; } enum unavailable { value 2; description "Indicates that the server presently cannot obtain the sensor value."
; } enum nonoperational { value 3; description "Indicates that the server believes the sensor is broken.
The sensor could have a hard failure (disconnected wire) or a soft failure such as out of range, jittery, or wildly fluctuating readings."
A node using this data type represents the operational status of a physical sensor."
If the server supports configuration of hardware components, then this data model is instantiated in the configuration datastores supported by the server.
The leaf list 'datastore' for the module 'ietf hardware' in the YANG library provides this information."; leaf last change { type yang:date and time; config false; description "The time the '/hardware/component' list changed in the operational state."
; } list component { key name; description "List of components.
When the server detects a new hardware component, it initializes a list entry in the operational state.
If the server does not support configuration of hardware components, list entries in the operational state are initialized with values for all nodes as detected by the implementation.
Otherwise, this procedure is followed: 1.
If there is an entry in the '/hardware/component' list in the intended configuration with values for the nodes 'class', 'parent', and 'parent rel pos' that are equal to the detected values, then the list entry in the operational state is initialized with the configured values, including the 'name'.
Otherwise (i.e., there is no matching configuration entry), the list entry in the operational state is initialized with values for all nodes as detected by the implementation.
If the '/hardware/component' list in the intended configuration is modified, then the system MUST behave as if it re initializes itself and follow the procedure in (1).
entPhysicalEntry"; leaf name { type string; description "The name assigned to this component.
An indication of the general hardware type of the component."
This node should contain a string that identifies the manufacturer's name for the component and should be set to a distinct value for each version or model of the component."
If this leaf is not instantiated, it indicates that this component is not contained in any other component.
In the event that a physical component is contained by more than one physical component (e.g., double wide modules), this node contains the name of one of these components.
An implementation MUST use the same name every time this node is instantiated."
Sibling components are defined as components that: share the same value of the 'parent' node and share a common base identity for the 'class' node.
Note that the last rule gives implementations flexibility in how components are numbered.
For example, some implementations might have a single number series for all components derived from 'ianahw:port', while some others might have different number series for different components with identities derived from 'ianahw:port' (for example, one for registered jack 45
small form factor pluggable (SFP)).
The preferred value is the manufacturer name string actually printed on the component itself (if present).
Note that comparisons between instances of the 'model name', 'firmware rev', 'software rev', and 'serial num' nodes are only meaningful amongst components with the same value of 'mfg name'.
If the manufacturer name string associated with the physical component is unknown to the server, then this node is not instantiated."
The preferred value is the customer visible part number, which may be printed on the component itself.
If the model name string associated with the physical component is unknown to the server, then this node is not instantiated."
If no configured value exists, the server MAY set the value of this node to a locally unique value in the operational state.
A server implementation MAY map this leaf to the entPhysicalAlias MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and entPhysicalAlias.
The definition of such a mechanism is outside the scope of this document."
This node is a user assigned asset tracking identifier for the component.
A server implementation MAY map this leaf to the entPhysicalAssetID MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and entPhysicalAssetID.
The definition of such a mechanism is outside the scope of this document."
This node indicates whether or not this component is considered a 'field replaceable unit' by the vendor.
If this node contains the value 'true', then this component identifies a field replaceable unit.
If there has been no change since the last re initialization of the local system, this node contains the date and time of local system initialization.
If there has been no change since the component was added to the local system, this node contains the date and time of the insertion."
This node refers to a component's administrative permission to service both other components within its containment hierarchy as well other users of its services defined by means outside the scope of this module.
Some components exhibit only a subset of the remaining administrative state values.
Some components cannot be locked; hence, this node exhibits only the 'unlocked' state.
Other components cannot be shut down gracefully; hence, this node does not exhibit the 'shutting down' state."
Note that this node does not follow the administrative state.
An administrative state of 'down' does not predict an operational state of 'disabled'.
Note that some implementations may not be able to accurately report oper state while the admin state node has a value other than 'unlocked'.
In these cases, this node MUST have a value of 'unknown'."
This node refers to a component's ability to service more components in a containment hierarchy.
Some components will exhibit only a subset of the usage state values.
Components that are unable to ever service any components within a containment hierarchy will always have a usage state of 'busy'.
In some cases, a component will be able to support only one other component within its containment hierarchy and will therefore only exhibit values of 'idle' and 'busy'.
It does not include the alarms raised on child components within its containment hierarchy."
Some components will exhibit only a subset of the remaining standby state values.
If this component cannot operate in a standby role, the value of this node will always be 'providing service'."
Entity Sensor Management Information Base"; leaf value { type sensor value; description "The most recent measurement obtained by the server for this sensor.
A client that periodically fetches this node should also fetch the nodes 'value type', 'value scale', and 'value precision', since they may change when the value is changed."
The value zero indicates: the sensor value is updated on demand (e.g., when polled by the server for a get request), the sensor value is updated when the sensor value changes (event driven), or the server does not know the update rate."
Entity Sensor Management Information Base entPhySensorValueUpdateRate"; }
A hardware state oper disabled notification signifies that a component has transitioned into the 'disabled' state."
"iana hardware" Module <CODE BEGINS> file "iana
" module iana hardware { yang version 1.1; namespace "urn:ietf:params:xml:
>"; description "IANA defined identities for hardware class.
The latest revision of this YANG module can be obtained from the IANA website.
Requests for new values should be made to IANA via email (iana@iana.org).
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
The initial version of this YANG module is part of RFC 8348; see the RFC itself for full legal notices."
; reference "https://www.iana.org/assignments/yang parameters"; revision 2018
03 13 { description "
This identity is applicable if the hardware class is an overall container for networking equipment.
This identity is applicable if the hardware class is some sort of device for aggregating and forwarding networking traffic, such as a shared backplane in a modular ethernet switch.
This identity is applicable if the hardware class is capable of containing one or more removable physical entities, possibly of different types.
For example, each (empty or full) slot in a chassis will be modeled as a container.
Note that all removable physical components should be modeled within a container component, such as field replaceable modules, fans, or power supplies.
This identity is applicable if the hardware class is some sort of self contained sub system.
This identity is applicable if the hardware class is some sort of super container (possibly virtual) intended to group together multiple chassis entities.
A stack may be realized by a virtual cable, a real interconnect cable attached to multiple chassis, or multiple interconnect cables.
A stack should not be modeled within any other physical components, but a stack may be contained within another stack.
Only chassis components should be contained within a stack."
; } identity cpu { base ianahw:hardware class; description "
This document defines the initial version of the IANA maintained "iana hardware" YANG module.
The "iana hardware" YANG module is intended to reflect the "IANA ENTITY MIB" MIB module so that if a new enumeration is added to the "IANAPhysicalClass" textual convention, the same class is added as an identity derived from "ianahw:hardware class".
When the "iana hardware" YANG module is updated, a new "revision" statement must be added in front of the existing revision statements.
This document registers three URIs in the "IETF XML Registry" [RFC3688].
Per the format in RFC 3688, the following registrations have been made.
N/A, the requested URI is an XML namespace.
yang:ietf hardware Registrant Contact: The IESG.
N/A, the requested URI is an XML namespace.
yang:ietf hardware state Registrant Contact: The IESG.
N/A, the requested URI is an XML namespace.
This document registers three YANG modules in the "YANG Module Names" registry [RFC6020].
The YANG modules specified in this document define a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC5246].
The NETCONF access control model [RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
There are a number of data nodes defined in the YANG module "ietf hardware" that are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability: /hardware/component/admin state:
Setting this node to 'locked' or 'shutting down' can cause disruption of services ranging from those running on a port to those on an entire device, depending on the type of component.
Some of the readable data nodes in these YANG modules may be considered sensitive or vulnerable in some network environments.
It is thus important to control
read access (e.g., via get, get config, or notification) to these data nodes.
These are the subtrees and data nodes and their sensitivity/vulnerability: /hardware/component:
The leafs in this list expose information about the physical components in a device, which may be used to identify the vendor, model, version, and specific device identification information of each system component.
This node may expose the values of particular physical sensors in a device.
/component/state:  Access to this node allows one to figure out what the active and standby resources in a device are.
Appendix A.  Hardware State Data Model
This non normative appendix contains a data model designed as a temporary solution for implementations that do not yet support the Network Management Datastore Architecture (NMDA) defined in [RFC8342].
It has the following structure: module: ietf hardware state x ro hardware x ro last change?
/../component/name x ro hardware rev?
string x ro model name?
yang:date and time x ro
uuid x ro state {hardware state}?
standby state x ro sensor data {hardware sensor}?
sensor value type x ro value scale?
hw:sensor value scale x ro value precision?
hw:sensor value precision x ro oper status?
sensor status x ro units display?
string x ro value timestamp?
date and time x ro value update rate?
x n hardware state change
x n hardware state oper enabled {hardware state}?
/hardware/component/state/alarm state x n hardware state oper disabled {hardware state}?
/hardware/component/name x ro admin state?
/hardware/component/state/admin state x ro alarm state?
Hardware State YANG Module <CODE BEGINS>
state@2018 03 13.yang" module ietf hardware state { yang version 1.1; namespace "urn:ietf:params:xml:
Dan Romascanu <mailto:dromasca@gmail.com>"; description "
This module contains a collection of YANG definitions for monitoring hardware.
This data model is designed as a temporary solution for implementations that do not yet support the Network Management Datastore Architecture (NMDA) defined in RFC 8342.
Such an implementation cannot implement the module 'ietf hardware' properly, since without NMDA support, it is not possible to distinguish between instances of nodes in the running configuration and operational states.
The data model in this module is the same as the data model in 'ietf hardware', except all nodes are marked as 'config false'.
If a server that implements this module but doesn't support NMDA also supports configuration of hardware components, it SHOULD also implement the module 'ietf hardware' in the configuration datastores.
The corresponding state data is found in the '/hw state:hardware' subtree.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8348; see the RFC itself for full legal notices."; revision 2018 03 13 { description "Initial revision."
This feature indicates that the device implements the ENTITY MIB."
STATE MIB objects are supported"; reference "RFC 4268: Entity State MIB"
; } feature hardware sensor { status deprecated; description "Indicates that ENTITY SENSOR
MIB objects are supported"; reference "RFC 3433:
Entity Sensor Management Information Base"; }
/ container hardware { config false; status deprecated; description "Data nodes representing components."; leaf last change { type yang:date and time; status deprecated; description "
The time the '/hardware/component' list changed in the operational state.
When the server detects a new hardware component, it initializes a list entry in the operational state.
If the server does not support configuration of hardware components, list entries in the operational state are initialized with values for all nodes as detected by the implementation.
Otherwise, this procedure is followed: 1.
If there is an entry in the '/hardware/component' list in the intended configuration with values for the nodes 'class', 'parent', and 'parent rel pos' that are equal to the detected values, then: 1a.
If the configured entry has a value for 'mfg name' that is equal to the detected value or if the 'mfg name' value cannot be detected, then the list entry in the operational state is initialized with the configured values for all configured nodes, including the 'name'.
Otherwise, the list entry in the operational state is initialized with values for all nodes as detected by the implementation.
The implementation may raise an alarm that informs about the 'mfg name' mismatch condition.
How this is done is outside the scope of this document.
Otherwise (i.e., there is no matching configuration entry), the list entry in the operational state is initialized with values for all nodes as detected by the implementation.
If the '/hardware/component' list in the intended configuration is modified, then the system MUST behave as if it re initializes itself and follow the procedure in (1).
entPhysicalEntry"; leaf name { type string; status deprecated; description "The name assigned to this component.
This node should contain a string that identifies the manufacturer's name for the component and should be set to a distinct value for each version or model of the component."
If this leaf is not instantiated, it indicates that this component is not contained in any other component.
In the event that a physical component is contained by more than one physical component (e.g., double wide modules), this node contains the name of one of these components.
An implementation MUST use the same name every time this node is instantiated."
Sibling components are defined as components that: share the same value of the 'parent' node and share a common base identity for the 'class' node.
Note that the last rule gives implementations flexibility in how components are numbered.
For example, some implementations might have a single number series for all components derived from 'ianahw:port', while some others might have different number series for different components with identities derived from 'ianahw:port' (for example, one for RJ45 and one for SFP).
The name of the manufacturer of this physical component.
The preferred value is the manufacturer name string actually printed on the component itself (if present).
Note that comparisons between instances of the 'model name', 'firmware rev', 'software rev', and 'serial num' nodes are only meaningful amongst components with the same value of 'mfg name'.
If the manufacturer name string associated with the physical component is unknown to the server, then this node is not instantiated."
The preferred value is the customer visible part number, which may be printed on the component itself.
If the model name string associated with the physical component is unknown to the server, then this node is not instantiated."
An 'alias' name for the component, as specified by a network manager, that provides a non volatile 'handle' for the component.
If no configured value exists, the server MAY set the value of this node to a locally unique value in the operational state.
A server implementation MAY map this leaf to the entPhysicalAlias MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and entPhysicalAlias.
The definition of such a mechanism is outside the scope of this document."
This node is a user assigned asset tracking identifier for the component.
A server implementation MAY map this leaf to the entPhysicalAssetID MIB object.
Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and entPhysicalAssetID.
The definition of such a mechanism is outside the scope of this document."
This node indicates whether or not this component is considered a 'field replaceable unit' by the vendor.
If this node contains the value 'true', then this component identifies a field replaceable unit.
For all components that are permanently contained within a field replaceable unit, the value 'false' should be returned for this node."
If there has been no change since the last re initialization of the local system, this node contains the date and time of local system initialization.
If there has been no change since the component was added to the local system, this node contains the date and time of the insertion."
This node refers to a component's administrative permission to service both other components within its containment hierarchy as well as other users of its services defined by means outside the scope of this module.
Some components exhibit only a subset of the remaining administrative state values.
Some components cannot be locked; hence, this node exhibits only the 'unlocked' state.
Other components cannot be shut down gracefully; hence, this node does not exhibit the 'shutting down' state."
Note that this node does not follow the administrative state.
An administrative state of 'down' does not predict an operational state of 'disabled'.
Note that some implementations may not be able to accurately report oper state while the admin state node has a value other than 'unlocked'.
In these cases, this node MUST have a value of 'unknown'."
This node refers to a component's ability to service more components in a containment hierarchy.
Some components will exhibit only a subset of the usage state values.
Components that are unable to ever service any components within a containment hierarchy will always have a usage state of 'busy'.
In some cases, a component will be able to support only one other component within its containment hierarchy and will therefore only exhibit values of 'idle' and 'busy'.
description "The alarm state for this component.
It does not include the alarms raised on child components within its containment hierarchy."
Some components will exhibit only a subset of the remaining standby state values.
If this component cannot operate in a standby role, the value of this node will always be 'providing service'."
A client that periodically fetches this node should also fetch the nodes 'value type', 'value scale', and 'value precision', since they may change when the value is changed."
The value zero indicates: the sensor value is updated on demand (e.g., when polled by the server for a get request), the sensor value is updated when the sensor value changes (event driven), or the server does not know the update rate."
Entity Sensor Management Information Base entPhySensorValueUpdateRate"; }
; } status deprecated; description "
