- title: __initial_text__
  contents:
  - '         Tag Image File Format (TIFF) - F Profile for Facsimile

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Overview
  contents:
  - "Overview\n   This document describes in detail the definition of TIFF-F that\
    \ is\n   used to store facsimile images.  The TIFF-F encoding has been\n   folklore\
    \ with no standard reference definition before this document.\n"
- title: Internet Fax Working Group
  contents:
  - "Internet Fax Working Group\n   This document is a product of the IETF Internet\
    \ Fax Working Group.\n   All comments on this document should be forwarded to\
    \ the email\n   distribution list at <ietf-fax@imc.org>.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document references the Tag Image File Format (TIFF) to\
    \ define\n   the F profile of TIFF for facsimile (TIFF-F) as a file format that\n\
    \   may be used for the storage and interchange of facsimile images.\n"
- title: 2.  TIFF Definition
  contents:
  - "2.  TIFF Definition\n   TIFF (Tag Image File Format) Revision 6.0 is defined\
    \ in detail within\n   [TIFF].\n   A brief review of concepts used in TIFF is\
    \ included in this document\n   as background information, but the reader is directed\
    \ to the original\n   TIFF specification [TIFF] to obtain specific technical details.\n"
- title: 2.1  Baseline TIFF and Applications
  contents:
  - "2.1  Baseline TIFF and Applications\n   TIFF provides a method to describe and\
    \ store raster image data.  A\n   primary goal of TIFF is to provide a rich environment\
    \ within which\n   implementations can exchange image data.  [TIFF] characterizes\n\
    \   Baseline TIFF as being the core of TIFF, the essentials that all\n   mainstream\
    \ TIFF developers should support in their products.\n   Applications of TIFF are\
    \ defined by using Baseline TIFF as a starting\n   point and then defining \"\
    extensions\" to TIFF that are used for the\n   specific \"application\", as well\
    \ as specifying any other differences\n   from Baseline TIFF.\n"
- title: 3.  TIFF-F Definition
  contents:
  - '3.  TIFF-F Definition

    '
- title: 3.1 Introduction
  contents:
  - "3.1 Introduction\n   Though it has been in common usage for many years, TIFF-F\
    \ has\n   previously never been documented in the form of a standard.  An\n  \
    \ informal TIFF-F document was originally created by a small group of\n   fax\
    \ experts led by Joe Campbell.  The existence of TIFF-F is noted in\n   [TIFF]\
    \ but it is not defined.  This document defines the F\n   application of [TIFF].\
    \ For ease of reference, the term TIFF-F will be\n   used throughout this document\
    \ as a shorthand for \"F Profile of TIFF\n   for Facsimile\".  TIFF-F files are\
    \ intended for use with the\n   image/tiff MIME media content-type which includes\
    \ support for the\n   \"application\" parameter (e.g., application=faxbw).\n \
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in [REQ].\n 3.1.1 TIFF-F\
    \ Historical Background\n   Up until TIFF 6.0, TIFF supported various \"Classes\"\
    \ which defined the\n   use of TIFF for various applications. Classes were used\
    \ to support\n   specific applications and in this spirit, TIFF-F has been known\n\
    \   historically as \"TIFF Class F\".  Previous informal TIFF-F documents\n  \
    \ used the \"Class F\" terminology.\n   As of TIFF 6.0 [TIFF], the TIFF Class\
    \ concept has been eliminated in\n   favor of the concept of Baseline TIFF.  Therefore,\
    \ this document\n   updates the definition of TIFF-F as the F profile of TIFF\
    \ for\n   facsimile, by using Baseline TIFF as defined in [TIFF] as the\n   starting\
    \ point and then defining the differences from Baseline TIFF\n   which apply for\
    \ TIFF-F.   In almost all cases, the resulting\n   definition of TIFF-F fields\
    \ and values remains consistent with those\n   used historically in earlier definitions\
    \ of TIFF Class F.  Where some\n   of the values for fields have been updated\
    \ to provide more precise\n   conformance with the ITU-T [T.4] and [T.30] fax\
    \ recommendations,\n   these differences are noted.\n"
- title: 3.1.2     Overview
  contents:
  - "3.1.2     Overview\n   The intent of this specification is to document:\n   1)\
    \  The fields and values which are applicable for this F profile\n       of TIFF\
    \ for facsimile.\n   2)  A minimum set of TIFF-F fields and values which should\
    \ be able\n       to interwork with virtually all historic TIFF-F readers.\n \
    \  3)  A broader range of values for the traditional TIFF-F fields\n       that\
    \ will provide support for the most widely used facsimile\n       compressions,\
    \ page sizes and resolutions, consistent with the\n       ITU-T [T.4] and [T.30]\
    \ recommendations.\n   The structure of the TIFF-F definition will be as follows.\
    \  A brief\n   review of the structure of TIFF files and practical guidelines\
    \ for\n   the writing and reading of multi-page TIFF-F files is provided in\n\
    \   sections 3.1.3 and 3.1.4.\n   A review of TIFF-F fields follows.  Section\
    \ 3.2 reviews the fields\n   from Baseline TIFF that are applicable for black\
    \ and white (bi-\n   level) images and are also used by TIFF-F.\n   Section 3.3\
    \ reviews the other required TIFF-F fields. Several fields\n   that are specific\
    \ extensions for  TIFF-F  are reviewed in section\n   3.4.  There are also fields\
    \ that may be helpful, but are not\n   required.  These recommended fields are\
    \ listed in the section 3.5.\n   Section 3.6 defines the requirements for the\
    \ minimum subset of TIFF-F\n   fields and values to maximize interoperability.\
    \  Several technical\n   topics, including implementation issues and warnings\
    \ are discussed in\n   subsequent sections.  Finally, section 3.9 introduces the\
    \ TIFF-F\n   Reader and Writer.  A table of the required and recommended fields\n\
    \   for a TIFF-F Reader is provided, along with details on the permitted\n   set\
    \ of values.\n"
- title: 3.1.3 Structure of TIFF Files
  contents:
  - "3.1.3 Structure of TIFF Files\n   The structure of TIFF files is specified within\
    \ [TIFF].  In this\n   section, a short summary of the TIFF structure is included\
    \ for the\n   informational purposes.   In addition, some practical guidelines\
    \ for\n   the use of this structure in reading and writing TIFF-F files are\n\
    \   addressed in the following section 3.1.4.  The structure for writing\n   \"\
    minimum subset\" TIFF-F files is defined in section 3.6.2.\n   A TIFF file begins\
    \ with an 8-byte image file header that defines the\n   byte order used within\
    \ a file (see section 3.9.1), includes a magic\n   number sequence that identifies\
    \ the content as a TIFF file, and then\n   uses an offset to point to the first\
    \ Image File Directory (IFD).  An\n   IFD is a sequence of tagged fields, sorted\
    \ in ascending order (by tag\n   value), that contains attributes of an image\
    \ and pointers to the\n   image data.   TIFF fields (also called entries) contain\
    \ a tag, its\n   type (e.g. short, long, rational, etc.), a count (which indicates\
    \ the\n   number of values/offsets) and a value/offset.  However, the actual\n\
    \   value for the field will only be present if it fits into 4 bytes;\n   otherwise,\
    \ an offset will be used to point to the location of the\n   data associated with\
    \ the field.  In turn, this offset may itself be\n   used to point to an array\
    \ of offsets.\n   For the case of facsimile data, many documents consist of a\
    \ series of\n   multiple pages.   Within TIFF, these may be represented using\
    \ more\n   than one IFD within the TIFF file.   Each IFD defines a subfile whose\n\
    \   type is given in the NewSubfileType field.  For the case of facsimile\n  \
    \ data that is placed in a TIFF-F file, each facsimile page in a\n   multi-page\
    \ document has its own IFD.   For bi- level facsimile files,\n   multiple IFDs\
    \ are organized as a linked list, with the last entry in\n   each IFD pointing\
    \ to the next IFD (the pointer in the last IFD is 0).\n   (There is also another\
    \ technique for organizing multiple IFDs as a\n   tree, that uses the SubIFDs\
    \ field, but this technique is not\n   applicable for TIFF-F images.)  Within\
    \ each IFD, the location of the\n   related image data is defined by using fields\
    \ that are associated\n   with strips.  These fields identify the size of strips\
    \ (in rows), the\n   number of bytes per strip after compression and a strip offset,\
    \ which\n   is used to point to the actual location of the image strip.\n   TIFF\
    \ has a very flexible file structure, but the use of some\n   practical guidelines\
    \ for implementors when writing  multi-page TIFF-\n   F files can produce TIFF\
    \ structures which are easier for readers to\n   process.   This is especially\
    \ for implementations in environments\n   such as facsimile terminals where a\
    \ complex file structure is\n   difficult to support.\n"
- title: 3.1.4 Practical Guidelines for Writing/Reading Multi-Page TIFF-F Files
  contents:
  - "3.1.4 Practical Guidelines for Writing/Reading Multi-Page TIFF-F Files\n   Traditionally,\
    \ historical TIFF-F has required readers and writers to\n   be able to handle\
    \ multi-page TIFF-F files.  Based on the experience\n   of various TIFF-F implementors,\
    \ it has been seen that the\n   implementation of TIFF-F can be greatly simplified\
    \ if certain\n   practical guidelines are followed when writing multi-page TIFF-F\n\
    \   files.  However, for interchange robustness, TIFF-F readers SHOULD be\n  \
    \ prepared to read TIFF files whose structure is consistent with\n   [TIFF], which\
    \ supports a more flexible file structure than is\n   recommended here.\n   The\
    \ structure for a multi-page TIFF-F file will include one IFD per\n   page of\
    \ the document.   Therefore, each IFD will define the\n   attributes for a single\
    \ page.   For simplicity, the writer of TIFF- F\n   files SHOULD present IFDs\
    \ in the same order as the actual sequence of\n   pages.  (The pages are numbered\
    \ within TIFF-F beginning with page 0\n   as the first page and then ascending\
    \ (i.e. 0, 1, 2,...).  However, as\n   noted in section 3.1.3, any field values\
    \ over 4 bytes will be stored\n   separately from the IFD. TIFF-F readers SHOULD\
    \ expect IFDs to be\n   presented in page order, but be able to handle exceptions.\n\
    \   Per [TIFF], the exact placement of image data is not specified.\n   However,\
    \ the strip offsets for each strip of image are defined from\n   within each IFD.\
    \   Where possible, a second simplifying assumption\n   for the writing of TIFF-F\
    \ files is to specify that the image data for\n   each page of a multi-page document\
    \ SHOULD be contained within a\n   single strip (i.e. one image strip per fax\
    \ page).   The use of a\n   single image strip per page is very useful for implementations\
    \ such\n   as store and forward messaging, where the file is usually prepared\
    \ in\n   advance of the transmission, but other assumptions may apply for the\n\
    \   size of the image strip for implementations which require the use of\n   \"\
    streaming\" techniques (see section 3.7.6).  In the event a different\n   image\
    \ strip size assumption has been used (e.g. constant size for\n   image strips\
    \ which may be less than the page size), this will\n   immediately be evident\
    \ from the values/offsets of the fields that are\n   related to strips.   From\
    \ the TIFF-F reader standpoint, one image\n   strip per page permits the image\
    \ data to be found through reference\n   via a single offset, resulting in a much\
    \ simplified image structure\n   and faster processing.\n   A third simplifying\
    \ assumption is that each IFD SHOULD be placed in\n   the TIFF-F file structure\
    \ at a point which precedes the image which\n   the IFD describes.  If any long\
    \ field values are present (see section\n   3.1.3) then these SHOULD be placed\
    \ after their referencing IFD and\n   before the image data they describe.\n \
    \  A fourth simplifying assumption for TIFF-F writers and readers is to\n   place\
    \ the actual image data in a physical order within the TIFF file\n   structure\
    \ which is consistent with the logical page order.  In\n   practice, TIFF-F readers\
    \ will need to use the strip offsets to find\n   the exact physical location of\
    \ the image data, whether or not it is\n   presented in logical page order.\n\
    \   TIFF-F writers MAY make a fifth simplifying assumption, in which the\n   IFD,\
    \ the value data and the image data for which the IFD has offsets\n   precede\
    \ the next image IFD. These elements MUST precede the next\n   image IFD in the\
    \ minimum set TIFF-F files (see section 3.6.2).\n   However, this principle has\
    \ been relaxed in the case of TIFF-F to\n   reflect past practices.\n   So, a\
    \ TIFF-F file which is structured using the guidelines of this\n   section will\
    \ essentially be composed of a linked list of IFDs,\n   presented in ascending\
    \ page order, which in turn each point to a\n   single page of image data (one\
    \ strip per page), where the pages of\n   image data are also placed in a logical\
    \ page order within the TIFF-F\n   file structure.  (The pages of image data may\
    \ themselves be stored in\n   a contiguous manner, at the option of the implementor).\n"
- title: 3.2  Baseline TIFF  Required Fields for BiLevel Images
  contents:
  - "3.2  Baseline TIFF  Required Fields for BiLevel Images\n   Baseline TIFF per\
    \ [TIFF] requires that the following fields be\n   present for all BiLevel Images:\
    \  ImageWidth, ImageLength,\n   Compression, PhotometricInterpretation, StripOffsets,\
    \ RowsPerStrip,\n   StripByteCounts, XResolution, YResolution and ResolutionUnit.\
    \  TIFF-F\n   uses all of these fields, but in some cases specifies a different\n\
    \   range of acceptable values than Baseline TIFF.   Per [TIFF], if\n   fields\
    \ are omitted, the Baseline TIFF default value(if specified)\n   will apply.\n\
    \   In the field definitions which follow in this section and subsequent\n   sections,\
    \ the fields will be presented in the following form:\n   Fieldname (tag-number)\
    \ = values (if applicable). TYPE\n   A brief summary of the Baseline TIFF fields\
    \ and their use in TIFF-F\n   follows:\n   ImageWidth(256) = 1728, 2048, 2432,\
    \ 2592, 3072, 3648, 3456, 4096,\n                     4864.\n       SHORT or LONG.\
    \  These are the fixed page widths in pixels.  The\n       permissible values\
    \ are dependent upon X and Y resolutions as\n       shown in sections 2 and 3\
    \ of [T.4] and reproduced here for\n       convenience:\n       XResolution x\
    \ Yresolution                  | ImageWidth\n      --------------------------------------------|------------------\n\
    \       204x98, 204x196, 204x391, 200x100, 200x200 | 1728, 2048, 2432\n      \
    \ 300x300                                    | 2592, 3072, 3648\n       408x391,\
    \ 400x400                           | 3456, 4096, 4864\n      --------------------------------------------|------------------\n\
    \       Historical TIFF-F did not include support for the following\n       widths\
    \ related to higher resolutions:  2592, 3072, 3648, 3456,\n       4096 and 4864.\
    \   Historical TIFF-F documents also included the\n       following values related\
    \ to A5 and A6 widths:  816 and 1216.  Per\n       the most recent version of\
    \ [T.4], A5 and A6 documents are no\n       longer supported in Group 3 facsimile,\
    \ so the related width\n       values are now obsolete.  See section 3.8.2 for\
    \ more information\n       on inch/metric equivalencies and other implementation\
    \ details.\n   ImageLength (257).  SHORT or LONG. LONG recommended.\n       The\
    \ total number of scan lines in the image.\n   Compression (259) = 3,4.  SHORT.\n\
    \       This is a required TIFF-F field.  The permitted values for TIFF-\n   \
    \    F purposes are 3 and 4 as shown.   The default value per Baseline\n     \
    \  TIFF is 1 (Uncompressed), but this value is invalid for facsimile\n       images.\
    \    Baseline TIFF also permits use of value 2 (Modified\n       Huffman encoding),\
    \ but the data is presented in a form which does\n       not contain EOLs. Instead,\
    \ TIFF-F specifies the value 3 for\n       encoding one-dimensional T.4 Modified\
    \ Huffman or 2-dimensional\n       Modified READ data.   The detailed settings\
    \ which apply for T.4\n       encoded data are specified using the T4Options field.\
    \  TIFF-F\n       also permits use of the value 4 for the compression field, which\n\
    \       indicates that the data is coded using a [T.6] compression method\n  \
    \     (i.e the Modified Modified READ two-dimensional method). The\n       detailed\
    \ settings which apply for T.6 encoded data are specified\n       using the T6Options\
    \ field.\n       Please refer to the definitions of the T4Options and T6Options\n\
    \       fields in section 3.3, and section 3.8 for more information on\n     \
    \  the encoding of images and conventions used within TIFF-F.\n   PhotometricInterpretation\
    \ (260) = 0,1.  SHORT.\n       This field allows notation of an inverted (\"negative\"\
    ) image:\n               0 = normal\n               1 = inverted\n   StripOffsets\
    \ (273).  SHORT or LONG.\n       For each strip, the offset of that strip.  The\
    \ offset is measured\n       from the beginning of the file. If a page is expressed\
    \ as one\n       large strip, there is one such entry per page.\n   RowsPerStrip\
    \ (278).  SHORT or LONG.  LONG recommended.\n       The number of scan lines per\
    \ strip.  When a page is expressed as\n       one large strip, this is the same\
    \ as the ImageLength field.\n   StripByteCounts (279).  LONG or SHORT.  LONG recommended.\n\
    \       For each strip, the number of bytes in that strip. If a page is\n    \
    \   expressed as one large strip, this is the total number of bytes\n       in\
    \ the page after compression.  Note that the choice of LONG or\n       SHORT depends\
    \ upon the size of the strip.\n   ResolutionUnit (296) = 2,3.  SHORT.\n      \
    \ The units of measure for resolution:\n               2 = Inch\n            \
    \   3 = Centimeter\n       TIFF-F has traditionally used inch based measures.\n\
    \   XResolution (282) = 204, 200, 300, 400, 408 (inches). RATIONAL.\n       The\
    \ horizontal resolution of the TIFF-F image expressed in pixels\n       per resolution\
    \ unit. The values of 200 and 408 have been added to\n       the historical TIFF-F\
    \ values, for consistency with [T.30].  Some\n       existing TIFF-F implementations\
    \ may also support values of 77\n       (cm).  See section 3.8.2 for more information\
    \ on inch/metric\n       equivalencies and other implementation details.\n   YResolution\
    \ (283) = 98, 196, 100, 200, 300, 391, 400  (inches).\n                      \
    \ RATIONAL.\n       The vertical resolution of the TIFF-F image expressed in pixels\n\
    \       per resolution unit. The values of 100, 200, and 391 have been\n     \
    \  added to the historical TIFF-F values, for consistency with\n       [T.30].\
    \  Some existing TIFF-F implementations may also support\n       values of 77,\
    \ 38.5 (cm). See section 3.8.2 for more information\n       on inch/metric equivalencies\
    \ and other implementation details.\n"
- title: 3.3  TIFF-F Required Fields
  contents:
  - "3.3  TIFF-F Required Fields\n   In addition to the Baseline TIFF fields, there\
    \ are additional\n   required fields for TIFF-F. A review of the additional required\n\
    \   fields for TIFF-F follows:\n   BitsPerSample (258) = 1.  SHORT.\n       Since\
    \ TIFF-F  is only used for black-and-white facsimile images,\n       the value\
    \ is  1 (the default) for all files.\n   FillOrder (266) = 1, 2.  SHORT.\n   \
    \    TIFF  F readers must be able to read data in both bit orders, but\n     \
    \  the vast majority of facsimile products store data LSB first,\n       exactly\
    \ as it appears on the telephone line.\n               1 = Most Significant Bit\
    \ first.\n               2 = Least Significant Bit first.\n   NewSubFileType (254)=\
    \ (Bit 1 = 1).  LONG.\n       This field is made up of 32 flag bits.  Unused bits\
    \ are\n       expected to be 0 and bit 0 is the low order bit.   Bit 0 is set\n\
    \       to 0 for TIFF-F.   Bit 1 is always set to 1 for TIFF-F,\n       indicating\
    \ a single page of a multi-page image. The same bit\n       settings are used\
    \ when TIFF-F is used for a one page fax image.\n       See sections 3.1.1 and\
    \ 3.1.2 for more details on the structure\n       of multi-page TIFF-F image files.\n\
    \   PageNumber (297).  SHORT/SHORT.\n       This field specifies the page numbers\
    \ in the fax document.  The\n       field comprises two SHORT values: the first\
    \ value is the page\n       number, the second is the total number of pages. Single-page\n\
    \       documents therefore use 0000/0001 hex.  If the second value is\n     \
    \  0, the total number of pages in the document is not available.\n   SamplesPerPixel\
    \ (277) = 1.  SHORT.\n       The value of 1 denotes a bi-level, grayscale, or\
    \ palette color\n       image.\n   There is also a requirement to include either\
    \ the T4Options or the\n   T6Options field in a TIFF-F IFD, depending upon the\
    \ setting of the\n   Compression field.  These fields are defined in the next\
    \ section on\n   TIFF extensions.\n"
- title: 3.4  TIFF-F Extensions
  contents:
  - "3.4  TIFF-F Extensions\n   These are fields which are extensions beyond the required\
    \ TIFF-F\n   fields.  The following fields have been defined as extensions in\n\
    \   [TIFF].\n   T4Options (292) (Bit 0 = 0 or 1, Bit 1 = 0, Bit 2 = 0 or 1). \
    \ LONG.\n       This field is required if the value for the compression field\n\
    \       has been set to 3.   The values are set as shown below for TIFF-\n   \
    \    F.   For TIFF-F, uncompressed data is not allowed and EOLs MAY\n       be\
    \ byte aligned (see section 3.8.3).\n               bit 0 = 0 for 1-Dimensional,\
    \ 1 for 2-Dimensional (MR)\n               bit 1 = must be 0 (uncompressed data\
    \ not allowed)\n               bit 2 = 0 for non-byte-aligned EOLs or 1 for byte-\n\
    \                       aligned EOLs\n       This field is made up of a set of\
    \ 32 flag bits. Unused bits\n       must be set to 0.  Bit 0 is the low order\
    \ bit.  Please note\n       that T4Options was known as G3Options in earlier versions\
    \ of\n       TIFF and TIFF-F.  The data in a TIFF-F image encoded using\n    \
    \   one of the T.4 methods is not terminated with an RTC (see\n       section\
    \ 3.8.5).\n   T6Options (293) = (Bit 0 = 0, Bit 1 = 0)  LONG.\n       This field\
    \ is required for TIFF-F if value of the compression\n       field has been set\
    \ to 4. The value for this field is made up of\n       a set of 32 flag bits.\
    \   Setting bit 0 to 0 indicates that the\n       data is compressed using the\
    \ Modified Modified READ (MMR) two-\n       dimensional compression method.  MMR\
    \ compressed Data is two-\n       dimensional and does not use EOLs. Each MMR\
    \ encoded image MUST\n       include an \"end-of-facsimile-block\" (EOFB) code\
    \ at the end of\n       each coded strip (see section 3.8.6). Uncompressed data\
    \ is not\n       applicable for bi-level facsimile images, so that bit 1 must\
    \ be\n       set to 0.  Unused bits must be set to 0. Bit 0 is the low-order\n\
    \       bit. The default value is 0 (all bits 0).\n               bit 0 = 0 for\
    \ 2-Dimensional\n               bit 1 = must be 0 (uncompressed data not allowed)\n\
    \       In earlier versions of TIFF, this field was named Group4Options.\n   \
    \    The significance has not changed and the present definition is\n       compatible.\n\
    \       In addition, three new fields, defined as TIFF-F extensions,\n       describe\
    \ page quality.  The information contained in these fields\n       is usually\
    \ obtained from receiving facsimile hardware (if\n       applicable).   These\
    \ fields are optional.  They SHOULD NOT be\n       used in writing TIFF-F files\
    \ for facsimile image data that is\n       error corrected or otherwise guaranteed\
    \ not to have coding\n       errors.\n       Some implementations need to understand\
    \ exactly the error content\n       of the data.  For example, a CAD program might\
    \ wish to verify\n       that a file has a low error level before importing it\
    \ into a\n       high- accuracy document.  Because Group 3 facsimile devices do\n\
    \       not necessarily perform error correction on the image data, the\n    \
    \   quality of a received page must be inferred from the pixel count\n       of\
    \ decoded scan lines. A \"good\" scan line is defined as a line\n       that,\
    \ when decoded, contains the correct number of pixels.\n       Conversely, a \"\
    bad\" scan line is defined as a line that, when\n       decoded, comprises an\
    \ incorrect number of pixels.\n       BadFaxLines (326). SHORT or LONG\n     \
    \  This field reports the number of scan lines with an incorrect\n       number\
    \ of pixels encountered by the facsimile during reception\n       (but not necessarily\
    \ in the file).\n       Note: PercentBad = (BadFaxLines/ImageLength) * 100\n \
    \  CleanFaxData (327). SHORT\n       N =\n           0 = Data contains no lines\
    \ with incorrect pixel counts or\n              regenerated lines  (i.e., computer\
    \ generated)\n           1 = Lines with an incorrect pixel count were regenerated\
    \ by\n              receiving device\n           2 = Lines with an incorrect pixel\
    \ count are in the data  and\n              were not regenerated by receiving\
    \ device (i.e. data\n              contains bad scan lines)\n       Many facsimile\
    \ devices do not actually output bad lines.\n       Instead, the previous good\
    \ line is repeated in place of a bad\n       line. Although this substitution,\
    \ known as line regeneration,\n       results in a visual improvement to the image,\
    \ the data is\n       nevertheless corrupted.  The CleanFaxData field describes\
    \ the\n       error content of the data.  That is, when the BadFaxLines and\n\
    \       ImageLength fields indicate that the facsimile device\n       encountered\
    \ lines with an incorrect number of pixels during\n       reception, the CleanFaxData\
    \ field indicates whether these bad\n       lines are actually still in the data\
    \ or if the receiving\n       facsimile device replaced them with regenerated\
    \ lines.\n   ConsecutiveBadFaxLines (328). LONG or SHORT.\n       This field reports\
    \ the maximum number of consecutive lines\n       containing an incorrect number\
    \ of pixels encountered by the\n       facsimile device during reception (but\
    \ not necessarily in the\n       file).\n       The BadFaxLines and ImageLength\
    \ data indicate only the quantity\n       of such lines.  The ConsecutiveBadFaxLines\
    \ field is an\n       indicator of their distribution and may therefore be a better\n\
    \       general indicator of perceived image quality.\n"
- title: 3.5  Recommended Fields
  contents:
  - "3.5  Recommended Fields\n   hese are fields that MAY be used in encoding TIFF-F\
    \ files, but are\n   ptional in nature and may be ignored by many TIFF readers.\
    \  These\n   ields are called recommended consistent with historical TIFF-F\n\
    \   ractice.\n   BadFaxLines (326) [defined in section 3.4]\n   CleanFaxData (327)\
    \ [defined in section 3.4]\n   ConsecutiveBadFaxLines (328) [defined in section\
    \ 3.4]\n   DateTime (306).  ASCII.\n       Date and time in the format YYYY:MM:DD\
    \ HH:MM:SS, in 24-hour\n       format. String length including NUL byte is 20\
    \ bytes. Space\n       between DD and HH.\n   DocumentName (269).  ASCII.\n  \
    \     This is the name of the document from which the document was\n       scanned.\n\
    \   ImageDescription (270).  ASCII.\n       This is an ASCII string describing\
    \ the contents of the image.\n   Orientation (274).  SHORT.\n       This field\
    \ is designated as \"Recommended\" for consistency with\n       historical TIFF-F,\
    \ but is also a Baseline TIFF field with a\n       default value of 1 per [TIFF].\
    \ The default value of 1 applies\n       if the field is omitted, but for clarity,\
    \ TIFF-F writers SHOULD\n       include this field.  This field might be useful\
    \ for displayers\n       that always want to show the same orientation, regardless\
    \ of\n       the image.  The default value of 1 is \"0th row is visual top of\n\
    \       image, and 0th column is the visual left.\"  An 180-degree\n       rotation\
    \ is 3.  See [TIFF] for an explanation of other values.\n   Software (305).  ASCII.\n\
    \       The optional name and release number of the software package\n       that\
    \ created the image.\n"
- title: 3.6   Requirements for TIFF-F Minimum Subset
  contents:
  - "3.6   Requirements for TIFF-F Minimum Subset\n   This section defines the requirements\
    \ for a minimum subset of TIFF-F\n   fields and values that all TIFF-F readers\
    \ SHOULD support to maximize\n   interoperability with current and historical\
    \ TIFF-F implementations.\n   The TIFF-F structure for writing minimum subset\
    \ files is also\n   defined.\n"
- title: 3.6.1   Summary of Minimum Subset Fields and Values
  contents:
  - "3.6.1   Summary of Minimum Subset Fields and Values\n   A summary of the minimum\
    \ subset TIFF-F fields and values is provided\n   in the following table.  The\
    \ required fields for the minimum subset\n   are shown under the column labeled\
    \ \"Field\".  The values for these\n   fields in the minimum subset are shown\
    \ under the column labeled\n   \"Minimum\".\n  Field             | Minimum   \
    \   | Comment\n  ------------------|--------------|-------------------------------\n\
    \  BitsPerSample     | 1            |one bit per sample\n  Compression       |\
    \ 3            |3 for T.4 (MH)\n  FillOrder         | 2            |LSB first\n\
    \  ImageWidth        | 1728         |\n  ImageLength       |              |required\n\
    \  NewSubFileType    | Bit 1 = 1    |single page of multipage file\n  PageNumber\
    \        | X/X          |pg/tot, 0 base, tot in 1st IFD\n  PhotometricInterp |\
    \ 0            |0 is white\n  ResolutionUnit    | 2            |inches (default)\n\
    \  RowsPerStrip      |=ImageLength  |\n  SamplesPerPixel   | 1            |one\
    \ sample per pixel\n  StripByteCounts   |              |required\n  StripOffsets\
    \      |              |required\n  T4Options         | Bit 0 = 0    |MH\n    \
    \                | Bit 1 = 0    |\n                    | Bit 2 = 0,1  |Non-Byte-aligned,\n\
    \                    |              | Byte-Aligned EOLs\n  XResolution       |\
    \ 204          |Units is per inch\n  YResolution       | 196,98       |Units is\
    \ per inch\n  ------------------|--------------|------------------------------\n"
- title: 3.6.2     TIFF-F Minimum Subset File Structure
  contents:
  - "3.6.2     TIFF-F Minimum Subset File Structure\n   For implementations which\
    \ need to write minimum subset TIFF-F files,\n   the file structure shown in Figure\
    \ 3.1 MUST be used:\n                   +-----------------------+\n          \
    \         |         Header        |------------+\n                   +-----------------------+\
    \            | First IFD\n                   |      IFD (page 0)     | <----------+\
    \ Offset\n               +---|                       |------------+\n        \
    \       |   |                       |--+         |\n         Value |   +-----------------------+\
    \  |         |\n        Offset +-->|      Long Values      |  |         |\n  \
    \                 +-----------------------|  | Strip   |\n                   |\
    \  Image Data (page 0)  |<-+ Offset  |\n                   +-----------------------+\
    \            | Next IFD\n                   |      IFD (page 1)     | <----------+\
    \ Offset\n               +---|                       |------------+\n        \
    \       |   |                       |--+         |\n         Value |   +-----------------------+\
    \  |         |\n        Offset +-->|      Long Values      |  |         |\n  \
    \                 +-----------------------|  | Strip   |\n                   |\
    \  Image Data (page 1)  |<-+ Offset  |\n                   +-----------------------+\
    \            | Next IFD\n                   |      IFD (page 2)     | <----------+\
    \ Offset\n                   +-----------------------+\n                   | \
    \         :            |\n                   |          :            |\n     \
    \  Figure 3.1     TIFF-F Minimum Subset File Structure\n   As depicted in Figure\
    \ 3.1, the IFD of each page precedes the related\n   Image Data for that page.\
    \  If present, any long field values appear\n   between the IFD and the image\
    \ data for that page.  For multiple page\n   documents, each IFD/image pair is\
    \ immediately followed by the next\n   IFD/image pair in logical page order within\
    \ the file structure, until\n   all pages have been defined.\n   The format for\
    \ the TIFF Header is as defined in [TIFF].  When writing\n   TIFF-F minimum subset\
    \ files, the value for the byte order in the\n   Header SHOULD be II (0x4949,\
    \ denoting that the bytes in the TIFF file\n   are in LSB first (little-endian)\
    \ order.\n   This results in a TIFF header whose content is as shown in Figure\n\
    \   3.2.\n   | Offset |   Description     | Type   |     Value          |\n  \
    \ +--------+-------------------+--------+--------------------+\n   |   0    |\
    \   Byte Order      | Short  |  0x4949 (II)       |\n   +--------+-------------------+--------+--------------------+\n\
    \   |   2    |   Version         | Short  |  42                |\n   +--------+-------------------+--------+--------------------+\n\
    \   |   4    | Offset of 0th IFD | Long   |  0x 0000 0008      |\n   +--------+-------------------+--------+--------------------+\n\
    \   Figure 3.2: Image File Header for Minimum Subset TIFF-F Files\n 3.7  Technical\
    \ Implementation Issues\n"
- title: 3.7.1   Strips
  contents:
  - "3.7.1   Strips\n   Those new to TIFF may not be familiar with the concept of\
    \ \"strips\"\n   embodied in the three fields RowsPerStrip, StripByteCount,\n\
    \   StripOffsets.\n   In general, third-party implementations that read and write\
    \ TIFF\n   files expect the image to be divided into \"strips,\" also known as\n\
    \   \"bands.\"  Each strip contains a few lines of the image. By using\n   strips,\
    \ a TIFF reader need not load the entire image into memory,\n   thus enabling\
    \ it to fetch and decompress small random portions of the\n   image as necessary.\n\
    \   The dimensions of a strip are described by the RowsPerStrip and\n   StripByteCount\
    \ fields.  The location in the TIFF file of each strip\n   is contained in the\
    \ StripOffsets field.\n   The size of TIFF-F strips is application dependent.\
    \  The recommended\n   approach for multi-page TIFF-F images is to represent each\
    \ page as a\n   single strip.\n"
- title: 3.7.2  Bit Order
  contents:
  - "3.7.2  Bit Order\n   The default bit order in Baseline TIFF per [TIFF] is indicated\
    \ by\n   FillOrder=1, where bits are not reversed before being stored.\n   However,\
    \ TIFF-F typically utilizes the setting of FillOrder=2, where\n   the bit order\
    \ within bytes is reversed before storage (i.e., bits are\n   stored with the\
    \ Least Significant Bit first).\n   Facsimile data appears on the phone line in\
    \ bit-reversed order\n   relative to its description in CCITT Recommendation T.4.\
    \  Therefore,\n   a wide majority of facsimile implementations choose this natural\n\
    \   order for storage. Nevertheless, TIFF-F readers must be able to read\n   data\
    \ in both bit orders.\n"
- title: 3.7.3  Multi-Page
  contents:
  - "3.7.3  Multi-Page\n   Many existing implementations already read TIFF-F like\
    \ files, but do\n   not support the multi- page field.  Since a multi-page format\
    \ greatly\n   simplifies file management in fax application software, TIFF-F\n\
    \   specifies multi-page documents (NewSubfileType = 2) as the standard\n   case.\n"
- title: 3.7.4 Compression
  contents:
  - "3.7.4 Compression\n   In Group 3 facsimile, there are three compression methods\
    \ which had\n   been standardized as of 1994 and are in common use.  The ITU-T\
    \ T.4\n   recommendation defines a one-dimensional compression method known as\n\
    \   Modified Huffman (MH) and a two-dimensional method known as Modified\n   READ\
    \ (MR) (READ is short for Relative Element Address Designate).  In\n   1984, a\
    \ somewhat more efficient compression method known as Modified\n   Modified READ\
    \ (MMR) was defined in the T.6 recommendation.  It was\n   originally defined\
    \ for use with Group 4 facsimile, so that this\n   compression method has been\
    \ commonly called Group 4 compression.  In\n   1991, the MMR method was approved\
    \ for use in Group 3 facsimile and\n   has since been widely utilized.\n   TIFF-F\
    \ permits three different compression methods.  In the most\n   common practice,\
    \ the one-dimensional compression method (Modified\n   Huffman) is used.  This\
    \ is specified by setting the value of the\n   Compression field to 3 and then\
    \ setting bit 0 of the T4Options field\n   to 0.  Alternatively, the two dimensional\
    \ Modified READ method (which\n   is much less frequently used in historical TIFF-F\
    \ implementations)\n   may be selected by setting bit 0 to a value of 1.\n   Optionally,\
    \ depending upon the implementation requirements, the more\n   efficient two-dimensional\
    \ compression method from T.6 (i.e.  MMR or\n   \"Group 4 compression\") may be\
    \ selected.  This method is selected by\n   setting the value of the Compression\
    \ field to 4 and then setting the\n   value of the first two bits (and all unused\
    \ bits) of T6options to 0.\n   More information to aid the implementer in making\
    \ a compression\n   selection is contained in section 3.8 on Implementation Warnings.\n"
- title: 3.7.5  Example Use of Page-quality Fields
  contents:
  - "3.7.5  Example Use of Page-quality Fields\n   Here are examples for writing the\
    \ CleanFaxData,  BadFaxLines, and\n   ConsecutiveBadFaxLines fields:\n       1.\
    \  Facsimile hardware does not provide page quality\n           information: MUST\
    \ NOT write page-quality fields.\n       2.  Facsimile hardware provides page\
    \ quality information, but\n           reports no bad lines.  Write only BadFaxLines\
    \ = 0.\n       3.  Facsimile hardware provides page quality information, and\n\
    \           reports bad lines.  Write both BadFaxLines and\n           ConsecutiveBadFaxLines.\
    \  Also write CleanFaxData = 1 or 2 if\n           the hardware's regeneration\
    \ capability is known.\n       4.  Source image data stream is error-corrected\
    \ or otherwise\n           guaranteed to be error-free such as for a computer\
    \ generated\n           file:  SHOULD NOT write page-quality fields.\n"
- title: 3.7.6   Use of TIFF-F for Streaming Applications
  contents:
  - "3.7.6   Use of TIFF-F for Streaming Applications\n   TIFF-F has historically\
    \ been used for handling fax image files in\n   implementations such as store\
    \ and forward messaging where the entire\n   size of the file is known in advance.\
    \  While TIFF-F may also possibly\n   be used as a file format for cases such\
    \ as streaming applications,\n   different assumptions may be required than those\
    \ provided in this\n   document (e.g., the entire size and number of pages within\
    \ the image\n   are not known in advance).  As a result, a definition for the\n\
    \   streaming application of TIFF-F is beyond the scope of this document.\n"
- title: 3.7.7  TIFF-F Export and Import
  contents:
  - "3.7.7  TIFF-F Export and Import\n   Fax implementations that do not wish to support\
    \ TIFF-F as a native\n   format may elect to support it as import/export medium.\n\
    \   Export\n   It is recommended that implementations export multiple page TIFF-F\n\
    \   files without manipulating fields and values.   Historically, some\n   TIFF-F\
    \ writers have attempted to produce individual single-page\n   TIFF-F files with\
    \ modified NewSubFileType and PageNumber (page one-\n   of-one) values for export\
    \ purposes.  However, there is no easy way to\n   link such multiple single page\
    \ files together into a logical multiple\n   page document, so that this practice\
    \ is not recommended.\n   Import\n   A TIFF-F reader MUST be able to handle a\
    \ TIFF-F file containing\n   multiple pages.\n"
- title: 3.8  Implementation Warnings
  contents:
  - "3.8  Implementation Warnings\n   3.8.1  Uncompressed data\n   TIFF-F requires\
    \ the ability to read and write at least one-\n   dimensional T.4 Huffman (\"\
    compressed\") data.  Uncompressed data is\n   not allowed.  This means that the\
    \ \"Uncompressed\" bit in T4Options or\n   T6Options must be set to 0.\n"
- title: 3.8.2  Encoding and Resolution
  contents:
  - "3.8.2  Encoding and Resolution\n   Since two-dimensional encoding is not required\
    \ for Group 3\n   compatibility, some historic TIFF-F readers have not been able\
    \ to\n   read such files.  The minimum subset of TIFF-F REQUIRES support for\n\
    \   one dimensional (Modified Huffman) files, so this choice maximizes\n   portability.\
    \  However, implementers seeking greater efficiency SHOULD\n   use T.6 MMR compression\
    \ when writing TIFF-F files.  Some TIFF-F\n   readers will also support two-dimensional\
    \ Modified READ files.\n   Implementers that wish to have the maximum flexibility\
    \ in reading\n   TIFF-F files SHOULD support all three of these compression methods\n\
    \   (MH, MR and MMR).\n   For the case of resolution, almost all facsimile products\
    \ support\n   both standard (98 dpi) vertical resolution  and \"fine\" (196 dpi)\n\
    \   resolution.  Therefore, fine-resolution files are quite portable in\n   the\
    \ real world.\n   In 1993, the ITU-T added support for higher resolutions in the\
    \ T.30\n   recommendation including 200 x 200, 300 x 300, 400 x 400 in dots per\n\
    \   inch based units.  At the same time, support was added for metric\n   dimensions\
    \ which are equivalent to the following inch based\n   resolutions: 391v x 204h\
    \ and 391v x 408h.  Therefore, the full set of\n   inch-based equivalents of the\
    \ new resolutions are supported in the\n   TIFF-F writer, since they may appear\
    \ in some image data streams\n   received from Group 3 facsimile devices.  However,\
    \ many facsimile\n   terminals and older versions of  TIFF-F readers are likely\
    \ to not\n   support the use of these higher resolutions.\n   Per [T.4], it is\
    \ permissible for implementations to treat the\n   following XResolution values\
    \ as being equivalent: <204,200> and\n   <400,408>.  In a similar respect, the\
    \ following YResolution values\n   may also be treated as being equivalent: <98,\
    \ 100>, <196, 200>, and\n   <391, 400>.   These equivalencies were allowed by\
    \ [T.4] to permit\n   conversions between inch and metric based facsimile terminals.\n\
    \   In a similar respect, the optional support of metric based\n   resolutions\
    \ in the TIFF-F reader (i.e. 77 x 38.5 cm) is included for\n   completeness, since\
    \ they are used in some legacy TIFF-F\n   implementations, but this use is not\
    \ recommended for the creation of\n   TIFF-F files by a writer.\n"
- title: 3.8.3  EOL byte-aligned
  contents:
  - "3.8.3  EOL byte-aligned\n   The historical convention for TIFF-F has been that\
    \ all EOLs in\n   Modified Huffman or Modified READ data must be byte-aligned.\n\
    \   However, Baseline TIFF has permitted use of non-byte-aligned EOLs by\n   default,\
    \ so that a large percentage of TIFF-F reader implementations\n   support both\
    \ conventions.   Therefore, the minimum subset of TIFF-F\n   as defined in this\
    \ document includes support for both byte-aligned\n   and non-byte-aligned EOLs.\n\
    \   An EOL is said to be byte-aligned when Fill bits have been added as\n   necessary\
    \ before EOL codes such that EOL always ends on a byte\n   boundary, thus ensuring\
    \ an  EOL-sequence of a one byte preceded by a\n   zero nibble: xxxx0000 00000001.\n\
    \   Modified Huffman encoding encodes bits, not bytes. This means that\n   the\
    \ end-of-line token may end in the middle of a byte. In byte\n   alignment, extra\
    \ zero bits (Fill) are added so that the first bit of\n   data following an EOL\
    \ begins on a byte boundary. In effect, byte\n   alignment relieves application\
    \ software of the burden of bit-\n   shifting every byte while parsing scan lines\
    \ for line-oriented image\n   manipulation (such as writing a TIFF file).\n  \
    \ For Modified READ encoding, each line is terminated by an EOL and a\n   one\
    \ bit tag bit.  Per [T.4], the value of the tag bit is 0 if the\n   next line\
    \ contains two dimensional data and 1 if the next line is a\n   reference line.\
    \   To maintain byte alignment, fill bits are added\n   before the EOL/tag bit\
    \ sequence, so that the first bit of data\n   following an MR tag bit begins on\
    \ a byte boundary.\n"
- title: 3.8.4  EOL
  contents:
  - "3.8.4  EOL\n   As illustrated in FIGURE 1/T.4 in [T.4], facsimile documents encoded\n\
    \   with Modified Huffman begin with an EOL (which in TIFF-F may be\n   byte-aligned).\
    \ The last line of the image is not terminated by an\n   EOL.  In a similar respect,\
    \ images encoded with Modified READ two\n   dimensional encoding begin with an\
    \ EOL, followed by a tag bit.\n"
- title: 3.8.5  RTC Exclusion
  contents:
  - "3.8.5  RTC Exclusion\n   Aside from EOLs, TIFF-F files have historically only\
    \ contained image\n   data. This means that implementations which wish to maintain\
    \ strict\n   conformance with the rules in [TIFF] and compatibility with\n   historical\
    \ TIFF-F, SHOULD NOT include the Return To Control sequence\n   (RTC) (consisting\
    \ of 6 consecutive EOLs) when writing TIFF- F files.\n   However, implementations\
    \ which need to support \"transparency\" of\n   [T.4] image data MAY include RTCs\
    \ when writing TIFF-F files if the\n   flag settings of the T4Options field are\
    \ set for non-byte aligned MH\n   or MR image data.  Implementors of TIFF readers\
    \ should also be aware\n   that there are some existing TIFF-F implementations\
    \ which include the\n   RTC sequence in MH/MR image data.  Therefore, TIFF-F readers\
    \ MUST be\n   able to process files which do not include RTCs and SHOULD be able\
    \ to\n   process files which do include RTCs.\n"
- title: 3.8.6  Use of EOFB for T.6 Compressed Images
  contents:
  - "3.8.6  Use of EOFB for T.6 Compressed Images\n   TIFF-F pages which are encoded\
    \ with the T.6 Modified Modified READ\n   compression method MUST include an \"\
    end-of-facsimile-block\" (EOFB)\n   code at the end of each coded strip. Per [TIFF],\
    \ the EOFB code is\n   followed by pad bits as needed to align on a byte boundary.\
    \   TIFF\n   readers SHOULD ignore any bits other than pad bits beyond the EOFB.\n"
- title: 3.9  TIFF-F Fields Summary
  contents:
  - "3.9  TIFF-F Fields Summary\n   Implementations may choose to implement a TIFF-F\
    \ Reader, TIFF-F\n   Writer or both, depending upon application requirements.\
    \  The TIFF- F\n   Reader is typically used to read an existing TIFF-F file which\n\
    \   resides on a computer or peripheral device.  The TIFF-F Writer is\n   typically\
    \ used to convert a bi-level image bit stream into a TIFF-F\n   compliant file.\
    \ For many Internet applications, only the Reader needs\n   to be implemented.\
    \ The specific field support required for TIFF-F\n   Readers and Writers is summarized\
    \ below.\n"
- title: 3.9.1  TIFF Reader
  contents:
  - "3.9.1  TIFF Reader\n   The fields in the following table are specified for a\
    \ TIFF-F Reader.\n   The range of values for required and recommended fields are\
    \ as shown.\n   The minimum subset of values are also shown. If required fields\
    \ are\n   omitted in a TIFF-F file, the Baseline TIFF default value will apply.\n\
    \   Image data must not have any coding errors. In the table, certain\n   fields\
    \ have a value that is a sequence of flag bits (e.g. T4Options).\n   An implementation\
    \ should test the setting of the relevant flag bits\n   individually to allow\
    \ extensions to the sequence of flag bits to be\n   appropriately ignored.\n \
    \  As noted within [TIFF], a TIFF file begins with an 8-byte image file\n   header,\
    \ of which the first two bytes (0-1) contain the byte order\n   within the file.\
    \  The permissible values are:\n       II- Byte order from least significant byte\
    \ to the most\n           significant byte (little-endian)\n       MM - byte order\
    \ is always from most significant to least\n           significant (big-endian)\n\
    \   For a TIFF-F Reader, the legal values are:\n       ByteOrder: MM,II (Either\
    \ byte order is allowed)\n"
- title: 3.9.1.1  Fields for TIFF-F Reader
  contents:
  - "3.9.1.1  Fields for TIFF-F Reader\n   Recommended Fields in the table are shown\
    \ with an asterisk (*).\n   Other fields may be present, but they should be of\
    \ an informational\n   nature, so that a reader can elect to ignore them.\n  \
    \ Informational fields which are often present in TIFF-F images are:\n      Software,\
    \ Datetime, BadFaxLines, CleanFaxData and\n      ConsecutiveBadFaxLines.\n  Field\
    \             | Values      | Minimum     | Comment\n  ------------------|-------------|-------------|----------------------\n\
    \  BitsPerSample     | 1           | 1           |one bit per sample\n  Compression\
    \       | 3,4         | 3           |3 for T.4 (MH, MR)\n                    |\
    \             |             |4 for T.6 - MMR\n  FillOrder         | 2,1      \
    \   | 2           |LSB first or MSB first\n  ImageWidth        | 1728, 2048, |\
    \ 1728        |depends on XResolution\n                    | 2432, 2592, |   \
    \          |\n                    | 3072, 3648, |             |\n            \
    \        | 3456, 4096, |             |\n                    | 4864        |  \
    \           |\n  ImageLength       | >0          |             |required\n  NewSubFileType\
    \    | Bit 1 = 1   | Bit 1 = 1   |single page of\n                    |      \
    \       |             |multipage file\n  Orientation *     | 1           |   \
    \          |1st row=top left,\n                    |             |           \
    \  | 1st col=top\n  PageNumber        | X/X         | 0/1         |pg/tot, 0 base,\n\
    \                    |             |             | tot in 1st IFD\n  PhotometricInterp\
    \ | 0,1         | 0           |0 is white\n  ResolutionUnit    | 2,3         |\
    \ 2           |inches (default)\n  RowsPerStrip      |=ImageLength |=ImageLength\
    \ |\n                    | or other    |             |\n  SamplesPerPixel   |\
    \ 1           | 1           |one sample per pixel\n  StripByteCounts   | >0  \
    \        |             |required\n  StripOffsets      | >0          |        \
    \     |required\n  T4Options         | Bit 0 = 0,1 | Bit 0 = 0   |MH,MR(incl if\
    \ not MMR)\n                    | Bit 1 = 0   | Bit 1 = 0   |\n              \
    \      | Bit 2 = 0,1 | Bit 2 = 0,1 | Non-Byte-aligned and\n                  \
    \  |             |             | Byte-Aligned EOLs\n  T6Options         | 0  \
    \         |             |MMR (incl only if MMR)\n  XResolution       | 204,200,300,|\
    \ 204         | If unit is per inch\n                    | 400,408,    |     \
    \        |\n                    | 77          |             | If unit is per cm\n\
    \  YResolution       | 196,98,100, | 196,98      | If unit is per inch\n     \
    \               | 200,300,391,|             |\n                    | 400,    \
    \    |             |\n                    | 77,38.5     |             | If unit\
    \ is per cm\n  ------------------|-------------|-------------|----------------------\n"
- title: 3.9.2  TIFF-F Writer
  contents:
  - "3.9.2  TIFF-F Writer\n   For the case of writing (creating) a TIFF-F file format\
    \ from an image\n   data stream or other raster data, implementations SHOULD write\
    \ files\n   which can be read by a TIFF-F Reader as defined in 3.9.1.  It is\n\
    \   recommended that all fields from the table in 3.9.1.1 SHOULD be\n   included\
    \ when writing TIFF-F files in order to  minimize dependencies\n   on default\
    \ values. Image data must not have any coding errors.\n   Other fields may be\
    \ present, but they should be of an informational\n   nature, so that a Reader\
    \ may elect to ignore them.\n   For the case of writing \"minimum subset\" TIFF-F\
    \ files, the rules\n   defined in section 3.6 apply.\n   Informational fields\
    \ that may be useful for TIFF-F files are:\n       Software, Datetime, BadFaxLines,\
    \ ConsecutiveBadFaxLines\n   TIFF Writers SHOULD only generate the fields that\
    \ describe facsimile\n   image quality when the image has been generated from\
    \ a fax image data\n   stream where error correction (e.g. Group 3 Error Correction\
    \ Mode)\n   was not used.  These fields are:  CleanFaxData, BadFaxLines and\n\
    \   ConsecutiveBadFaxLines.\n"
- title: 4.  MIME sub-type image/tiff
  contents:
  - "4.  MIME sub-type image/tiff\n   [TIFFREG] describes the registration of the\
    \ MIME content-type image/\n   tiff to refer to TIFF 6.0 encoded image data. \
    \  When transported by\n   MIME, the TIFF content defined by this document must\
    \ be encoded\n   within an image/tiff content type. In addition, an optional\n\
    \   \"application\" parameter is defined for image/tiff to identify a\n   particular\
    \ application's subset of TIFF and TIFF extensions for the\n   encoded image data,\
    \ if it is known. Typically, this would be used to\n   assist the recipient in\
    \ dispatching a suitable rendering package to\n   handle the display or processing\
    \ of the image file.\n"
- title: 4.1 Refinement of MIME sub-type image/tiff for Application F
  contents:
  - "4.1 Refinement of MIME sub-type image/tiff for Application F\n   Since this document\
    \ defines a facsimile specific profile of TIFF, it\n   is useful to note an appropriate\
    \ application parameter for the\n   image/tiff MIME content-type.\n   The \"faxbw\"\
    \ application parameter is defined for black and white\n   facsimile.  It is suitable\
    \ for use by applications that can process\n   one or more TIFF for facsimile\
    \ profiles or subsets used for the\n   encoding of black and white facsimile data.\n\
    \   Since this document defines a profile of TIFF for facsimile which is\n   suitable\
    \ for use with black and white facsimile image data,\n   applications which use\
    \ this profile or its minimum subset should set\n   the value of the application\
    \ parameter to \"faxbw\".\n   An example of the use of the image/tiff MIME Content-type\
    \ with the\n   application parameter set with the value \"faxbw\" follows:\n \
    \  Example:\n          Content-type: image/tiff; application=faxbw\n   In this\
    \ example, use of this parameter value will enable applications\n   to identify\
    \ the content as being within a profile or subset of TIFF\n   for Facsimile that\
    \ is suitable for encoding black and white image\n   data, before attempting to\
    \ process the image data.\n"
- title: 5.  Implementation Usage
  contents:
  - "5.  Implementation Usage\n   5.1 Internet Fax Usage\n   The usage of TIFF-F is\
    \ envisioned as a component of Internet Fax.  It\n   is anticipated that Internet\
    \ Fax may use both a TIFF-F Reader and\n   TIFF-F Writer. The details of the Internet\
    \ Fax services and their use\n   of TIFF-F will be specified in other documents.\n"
- title: 5.2 VPIM Usage
  contents:
  - "5.2 VPIM Usage\n   The Application F of TIFF (i.e. TIFF-F content) is a secondary\n\
    \   component of the VPIM Message as defined in [VPIM2].  Voice messaging\n  \
    \ systems can often handle fax store-and-forward capabilities in\n   addition\
    \ to traditional voice message store-and- forward functions.\n   As a result,\
    \ TIFF-F fax messages can optionally be sent between\n   compliant VPIM systems,\
    \ and may be rejected if the recipient system\n   cannot deal with fax.\n   Refer\
    \ to the VPIM Specification for proper usage of this content.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document describes the encoding for TIFF-F,\
    \ which is a profile\n   of the TIFF encoding for facsimile.  As such, it does\
    \ not create any\n   security issues not already identified in [TIFFREG], in its\
    \ use of\n   fields as defined in [TIFF]. There are also new TIFF fields defined\n\
    \   within this specification, but they are of a purely descriptive\n   nature,\
    \ so that no new security risks are incurred.\n   Further, the encoding specified\
    \ in this document does not in any way\n   preclude the use of any Internet security\
    \ protocol to encrypt,\n   authenticate, or non-repudiate TIFF-F encoded facsimile\
    \ messages.\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   Glenn W. Parsons\n   Northern Telecom\n   P.O. Box\
    \ 3511, Station C\n   Ottawa, ON  K1Y 4H7\n   Canada\n   Phone: +1-613-763-7582\n\
    \   Fax:   +1-613-763-2697\n   Email: Glenn.Parsons@Nortel.ca\n   James Rafferty\n\
    \   Human Communications\n   12 Kevin Drive\n   Danbury, CT 06811-2901\n   USA\n\
    \   Phone: +1-203-746-4367\n   Fax:   +1-203-746-4367\n   Email: Jrafferty@worldnet.att.net\n"
- title: 8. References
  contents:
  - "8. References\n   [MIME1] Freed, N. and N. Borenstein,  \"Multipurpose Internet\
    \ Mail\n        Extensions (MIME) Part One: Format of Internet Message Bodies\"\
    ,\n        RFC 2045, November 1996.\n   [MIME4] Freed, N. and N. Borenstein, \
    \ \"Multipurpose Internet Mail\n        Extensions (MIME) Part Four: Registration\
    \ Procedures\", RFC 2048,\n        November 1996.\n   [REQ] Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n        Requirement Levels\", RFC 2119, March\
    \ 1997.\n   [T.30] ITU-T Recommendation T.30 - \"Procedures for Document\n   \
    \     Facsimile Transmission in the General Switched Telephone\n        Network\"\
    , June, 1996\n   [T.4] ITU-T Recommendation T.4 - \"Standardization of Group 3\n\
    \        Facsimile Apparatus for Document Transmission\", June, 1996\n   [T.6]\
    \ ITU-T Recommendation T.6 - \"Facsimile Coding Schemes and\n        Coding Control\
    \ Functions for Group 4 Facsimile Apparatus\",\n        March, 1993\n   [TIFF]\
    \ Adobe Developers Association, TIFF (TM) Revision 6.0 -\n        Final, June\
    \ 3, 1992.\n   [TIFFREG] Parsons, G., Rafferty, J. and S. Zilles, \"Tag Image\
    \ File\n        Format (TIFF) - image/tiff:  MIME Sub-type Registration \", RFC\n\
    \        2302, March 1998.\n   [VPIM2] G. Vaudreuil and G. Parsons, \"Voice Profile\
    \ for Internet\n        Mail - version 2\", Work In Progress, <draft-ema-vpim-06.txt>,\n\
    \        November 1997.\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
