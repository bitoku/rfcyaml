- title: __initial_text__
  contents:
  - "                Algorithms for Automating Administration\n                  \
    \         in SNMPv2 Managers\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ..........................................\
    \    1\n   2. Implementation Model ..................................    1\n \
    \  3. Configuration Assumptions .............................    3\n   4. Normal\
    \ Operations .....................................    4\n   4.1 Getting a Context\
    \ Handle .............................    4\n   4.2 Requesting an Operation ..............................\
    \    7\n   5. Determining and Using Maintenance Knowledge ...........    8\n \
    \  5.1 Determination of Synchronization Knowledge ...........    9\n   5.2 Use\
    \ of Clock Synchronization Knowledge ...............   10\n   5.3 Determination\
    \ of Secret Update Knowledge .............   11\n   5.4 Use of Secret Update Knowledge\
    \ .......................   13\n   6. Other Kinds and Uses of Maintenance Knowledge\
    \ .........   13\n   7. Security Considerations ...............................\
    \   13\n   8. Acknowledgements ......................................   13\n \
    \  9. References ............................................   14\n   10. Authors'\
    \ Addresses ...................................   14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When a user invokes an SNMPv2 [1] management application,\
    \ it may be\n   desirable for the user to specify the minimum amount of information\n\
    \   necessary to establish and maintain SNMPv2 communications.  This memo\n  \
    \ suggests an approach to achieve this goal.\n"
- title: 2.  Implementation Model
  contents:
  - "2.  Implementation Model\n   In order to discuss the approach outlined in this\
    \ memo, it is useful\n   to have a model of how the various parts of an SNMPv2\
    \ manager fit\n   together.  The model assumed in this memo is depicted in Figure\
    \ 2.1.\n   This model is, of course, merely for expository purposes, and the\n\
    \   approach should be readily adaptable to other models.\n                  \
    \               (Human) User\n                                      *\n      \
    \                                *\n                   ===========User Interface\
    \ (UI)===========\n                                      *\n                 \
    \             +--------------------------+\n                          ... | Management\
    \ Application N |\n                       +---------------------------+     |\n\
    \                       | Management Application 2  |-----+\n                \
    \   +--------------------------+    |   *\n                   | Management Application\
    \ 1 |----+   *\n                   +--------------------------+  *     *\n   \
    \                                        *     *     *\n                  ========Management\
    \ API======================\n                      *                         \
    \         *\n                      *             ________             *\n    \
    \            +-------------+    / Local  \\    +---------------+\n           \
    \     | Context     |***/  Party   \\***| SNMP protocol |\n                | Resolver(s)\
    \ |   \\ Database /   |   engine(s)   |\n                +-------------+    \\\
    ________/    +---------------+\n                                             \
    \            *\n                                                         *\n \
    \                           ===========Transport APIs============\n          \
    \                                   *\n                             +---------------------------------+\n\
    \                             | Transport Stacks (e.g., UDP/IP) |\n          \
    \                   +---------------------------------+\n                    \
    \                         *\n                                         Network(s)\n\
    \                 Figure 2.1  SNMPv2 Manager Implementation Model\n   Note that\
    \ there might be just one SNMP protocol engine and one\n   \"context resolver\"\
    \ which are accessed by all local management\n   applications, or, each management\
    \ application might have its own SNMP\n   protocol engine and its own \"context\
    \ resolver\", all of which have\n   shared access to the local party database\
    \ [2].\n   In addition to the elements shown in the figure, there would need to\n\
    \   be an interface for the administrator to access the local party\n   database,\
    \ e.g., for configuring initial information, including\n   secrets.  There might\
    \ also be facilities for different users to have\n   different access privileges,\
    \ and/or other reasons for there to be\n   multiple (coordinated) subsets of the\
    \ local party database.\n"
- title: 3.  Configuration Assumptions
  contents:
  - "3.  Configuration Assumptions\n   Now, let's assume that the administrator has\
    \ already configured a\n   local party database for the management application,\
    \ e.g.,\n               partyIdentifier:         initialPartyId.a.b.c.d.1\n  \
    \             partyIndex:              1\n               partyTAddress:      \
    \     a.b.c.d:161\n               partyLocal:              false\n           \
    \    partyAuthProtocol:       noAuth\n               partyPrivProtocol:      \
    \ noPriv\n               partyIdentifier:         initialPartyId.a.b.c.d.2\n \
    \              partyIndex:              2\n               partyTAddress:     \
    \      local address\n               partyLocal:              true\n         \
    \      partyAuthProtocol:       noAuth\n               partyPrivProtocol:    \
    \   noPriv\n               partyIdentifier:         initialPartyId.a.b.c.d.3\n\
    \               partyIndex:              3\n               partyTAddress:    \
    \       a.b.c.d:161\n               partyLocal:              false\n         \
    \      partyAuthProtocol:       md5Auth\n               partyPrivProtocol:   \
    \    noPriv\n               partyIdentifier:         initialPartyId.a.b.c.d.4\n\
    \               partyIndex:              4\n               partyTAddress:    \
    \       local address\n               partyLocal:              true\n        \
    \       partyAuthProtocol:       md5Auth\n               partyPrivProtocol:  \
    \     noPriv\n               contextIdentifier:       initialContextId.a.b.c.d.1\n\
    \               contextIndex:            1\n               contextLocal:     \
    \       false\n               textual handle:          router.xyz.com-public\n\
    \               contextIdentifier:       initialContextId.a.b.c.d.2\n        \
    \       contextIndex:            2\n               contextLocal:            false\n\
    \               textual handle:          router.xyz.com-all\n               aclTarget\
    \ (dest. party): 1\n               aclSubject (src party):  2\n              \
    \ aclResources (context):  1\n               aclPrivileges:           get, get-next,\
    \ get-bulk\n               aclTarget (dest. party): 3\n               aclSubject\
    \ (src party):  4\n               aclResources (context):  2\n               aclPrivileges:\
    \           get, get-next, get-bulk, set\n   Note that each context has associated\
    \ with it a \"textual handle\".\n   This is simply a string chosen by the administrator\
    \ to aid in\n   selecting a context.\n"
- title: 4.  Normal Operations
  contents:
  - "4.  Normal Operations\n   When the user tells the management application to do\
    \ something, the\n   user shouldn't have to specify party or context information.\n\
    \   One approach to achieve this is as follows: the user provides a\n   textual\
    \ string indicating the managed objects to be manipulated, and\n   the management\
    \ application invokes the \"context resolver\" to map this\n   into a \"context\
    \ handle\", and later, when an SNMPv2 operation is\n   performed, the \"context\
    \ handle\" and a minimal set of security\n   requirements are provided to the\
    \ management API.\n"
- title: 4.1.  Getting a Context Handle
  contents:
  - "4.1.  Getting a Context Handle\n   A \"context handle\" is created when the management\
    \ application\n   supplies a textual string, that was probably given to it by\
    \ the user.\n   The \"context resolver\" performs these steps based on the\n \
    \  application's input:\n          (1)  In the local party database, each context\
    \ has associated\n               with it a unique string, termed its \"textual\
    \ handle\".  If\n               a context in the local database has a textual\
    \ handle\n               which exactly matches the textual string, then the\n\
    \               \"context resolver\" returns a handle identifying that\n     \
    \          context.\n               So, if the application supplies \"router.xyz.com-public\"\
    ,\n               then the \"context resolver\" returns a handle to the first\n\
    \               context; instead, if the application supplies\n              \
    \ \"router.xyz.com-all\", then the \"context resolver\" returns\n            \
    \   a handle to the second context.\n          (2)  Otherwise, if any contexts\
    \ are present whose textual\n               handle is longer than the textual\
    \ string, and whose\n               initial characters exactly match the entire\
    \ textual\n               string, then the \"context resolver\" returns a handle\n\
    \               identifying all of those contexts.\n               So, if the\
    \ application supplies \"router.xyz.com\", then\n               the \"context\
    \ resolver\" returns a handle to both contexts.\n          (3)  Otherwise, if\
    \ the textual string specifies an IP address\n               or a domain name\
    \ which resolves to a single IP address,\n               then the \"context resolver\"\
    \ adds to the local party\n               database, a volatile noAuth/noPriv party\
    \ pair, a volatile\n               context, and a volatile access control entry\
    \ allowing\n               interrogation operations, using the \"initialPartyId\"\
    \ and\n               \"initialContextId\" conventions.  The \"context resolver\"\
    \n               returns a handle identifying the newly created context.\n   \
    \            So, if the application supplies \"89.0.0.1\", then the\n        \
    \       \"context resolver\" adds the following information to the\n         \
    \      local party database:\n                    partyIdentifier:         initialPartyId.89.0.0.1.1\n\
    \                    partyIndex:              101\n                    partyTAddress:\
    \           89.0.0.1:161\n                    partyLocal:              false\n\
    \                    partyAuthProtocol:       noAuth\n                    partyPrivProtocol:\
    \       noPriv\n                    partyStorageType:        volatile\n      \
    \              partyIdentifier:         initialPartyId.89.0.0.1.2\n          \
    \          partyIndex:              102\n                    partyTAddress:  \
    \         local address\n                    partyLocal:              true\n \
    \                   partyAuthProtocol:       noAuth\n                    partyPrivProtocol:\
    \       noPriv\n                    partyStorageType:        volatile\n      \
    \              contextIdentifier:       initialContextId.89.0.0.1.1\n        \
    \            contextIndex:            101\n                    contextLocal: \
    \           false\n                    contextStorageType:      volatile\n   \
    \                 textual handle:          89.0.0.1\n                    aclTarget\
    \ (dest. party): 101\n                    aclSubject (src party):  102\n     \
    \               aclResources (context):  101\n                    aclPrivileges:\
    \           get, get-next, get-bulk\n                    aclStorageType:     \
    \     volatile\n               and the \"context resolver\" returns a handle to\
    \ the newly\n               created context.\n          (4)  Otherwise, if the\
    \ textual string specifies a domain name\n               which resolves to multiple\
    \ IP addresses, then for each\n               such IP address, the \"context resolver\"\
    \ adds to the local\n               party database, a volatile noAuth/noPriv party\
    \ pair, a\n               volatile context, and a volatile access control entry\n\
    \               allowing interrogation operations, using the\n               \"\
    initialPartyId\" and \"initialContextId\" conventions.\n               Then, the\
    \ \"context resolver\" returns a handle identifying\n               all of those\
    \ newly created contexts.\n          (5)  Otherwise, if the textual string contains\
    \ a '/'-\n               character, and everything to the left of the first\n\
    \               occurrence of this character specifies an IP address or a\n  \
    \             domain name which resolves to a single IP address, then\n      \
    \         the \"context resolver\" adds to the local party database,\n       \
    \        a volatile SNMPv1 party, a volatile context, and a\n               volatile\
    \ access control entry allowing interrogation\n               operations.  (The\
    \ SNMPv1 community string consists of any\n               characters following\
    \ the first occurrence of the '/'-\n               character in the textual string.)\
    \ Then, the \"context\n               resolver\" returns a handle identifying\
    \ the newly created\n               context.\n               So, if the application\
    \ supplied \"89.0.0.2/public\", then\n               the \"context resolver\"\
    \ adds the following information to\n               the local party database:\n\
    \                    partyIdentifier:         initialPartyId.89.0.0.2.1\n    \
    \                partyIndex:              201\n                    partyTDomain:\
    \            rfc1157Domain\n                    partyTAddress:           89.0.0.2:161\n\
    \                    partyLocal:              false\n                    partyAuthProtocol:\
    \       rfc1157noAuth\n                    partyAuthPrivate:        public\n \
    \                   partyPrivProtocol:       noPriv\n                    partyStorageType:\
    \        volatile\n                    contextIdentifier:       initialContextId.89.0.0.2.1\n\
    \                    contextIndex:            201\n                    contextLocal:\
    \            false\n                    contextStorageType:      volatile\n  \
    \                  textual handle:          89.0.0.2\n                    aclTarget\
    \ (dest. party): 201\n                    aclSubject (src party):  201\n     \
    \               aclResources (context):  201\n                    aclPrivileges:\
    \           get, get-next, get-bulk\n                    aclStorageType:     \
    \     volatile\n               and the \"context resolver\" returns a handle to\
    \ the the\n               newly created context.\n          (6)  Otherwise, if\
    \ the textual string contains a '/'-\n               character, and everything\
    \ to the left of the first\n               occurrence of this character specifies\
    \ a domain name\n               which resolves to multiple IP addresses, then\
    \ for each\n               such IP address, the \"context resolver\" adds to the\
    \ local\n               party database, a volatile SNMPv1 party, a volatile\n\
    \               context, and a volatile access control entry allowing\n      \
    \         interrogation operations.  (The SNMPv1 community string\n          \
    \     consists of any characters following the first occurrence\n            \
    \   of the '/'-character in the textual string.) Then, the\n               \"\
    context resolver\" returns a handle identifying all of\n               those newly\
    \ created contexts.\n          (7)  Otherwise, an error is raised.\n"
- title: 4.2.  Requesting an Operation
  contents:
  - "4.2.  Requesting an Operation\n   Later, when an SNMPv2 operation is to be performed,\
    \ the management\n   application supplies a \"context handle\" and a minimal set\
    \ of security\n   requirements to the management API:\n          (1)  If the \"\
    context handle\" refers to a single context, then\n               all access control\
    \ entries having that context as its\n               aclResources, allowing the\
    \ specified operation, having a\n               non-local SNMPv2 party as its\
    \ aclTarget, which satisfies\n               the privacy requirements, and having\
    \ a local party as its\n               aclSubject, which satisfies the authentication\n\
    \               requirements, are identified.\n               So, if the application\
    \ wanted to issue a get-next\n               operation, with no security requirements,\
    \ and supplied a\n               \"context handle\" identifying context #1, then\
    \ acl #1\n               would be identified.\n          (2)  For each such access\
    \ control entry, the one which\n               minimally meets the security requirements\
    \ is selected for\n               use.  If no such entry is identified, and authentication\n\
    \               requirements are present, then the operation will be not\n   \
    \            performed.\n               So, if the application requests a get-next\
    \ operation,\n               with no security requirements, and supplies a \"\
    context\n               handle\" identifying context #1, and step 1 above\n  \
    \             identified acl #1, then because acl #1 satisfies the no-\n     \
    \          security requirements, the operation would be generated\n         \
    \      using acl #1, i.e., using party #1, party #2, and context\n           \
    \    #1.\n          (3)  Otherwise, all access control entries having the (single)\n\
    \               context as its aclResources, allowing the specified\n        \
    \       operation, and having a non-local SNMPv1 party as its\n              \
    \ aclTarget, are identified.  If no such entry is\n               identified,\
    \ then the operation will not performed.\n               Otherwise, any of the\
    \ identified access control entries\n               may be selected for use.\n\
    \               The effect of separating out step 3 is to prefer SNMPv2\n    \
    \           communications over SNMPv1 communications.\n          (4)  If the\
    \ \"context handle\" refers to more than one context,\n               then all\
    \ access control entries whose aclResources refers\n               any one of\
    \ the contexts, are identified.  For each such\n               context, step 2\
    \ is performed, and any (e.g., the first)\n               access control entry\
    \ identified is selected for use.  If\n               no access control entry\
    \ is identified, then step 3 is\n               performed for each such context,\
    \ and any (e.g., the\n               first) access control entry identified is\
    \ selected for\n               use.\n               So, if the application wanted\
    \ to issue a get-bulk\n               operation, with no security requirements,\
    \ and supplied a\n               \"context handle\" identifying contexts #1 and\
    \ #2, then\n               acls #1 and #2 would be identified in step 1; and,\
    \ in\n               step 2, party #1, party #2, and context #1 would be\n   \
    \            selected.\n               However, if the application wanted to issue\
    \ an\n               authenticated get-bulk operation, and supplied a \"context\n\
    \               handle\" identifying contexts #1 and #2, then acls #1 and\n  \
    \             #2 would still be identified in step 1; but, in step 2,\n      \
    \         only acl #2 satisfies the security requirement, and so,\n          \
    \     party #3, party #4, and context #2 would be selected.\n          (5)  If\
    \ no access control entry is identified, then an error\n               is raised.\n\
    \   Note that for steps 1 and 3, an implementation might choose to pre-\n   compute\
    \ (i.e., cache) for each context those access control entries\n   having that\
    \ context as its aclResources.\n"
- title: 5.  Determining and Using Maintenance Knowledge
  contents:
  - "5.  Determining and Using Maintenance Knowledge\n   When using authentication\
    \ services, two \"maintenance\" tasks may have\n   to be performed: clock synchronization\
    \ and secret update.  These\n   tasks should be performed transparently, independent\
    \ of the\n   management applications, and without user/administrator intervention.\n\
    \   In order to operate transparently, the SNMP protocol engine must\n   maintain\
    \ \"maintenance knowledge\" (knowledge of which parties and\n   contexts to use).\
    \  It is useful for this maintenance knowledge to be\n   determined at run-time,\
    \ rather than being directly configured by an\n   administrator.\n   One approach\
    \ to achieve this is as follows: the first time that the\n   SNMP protocol engine\
    \ determines that it will be communicating with\n   another SNMPv2 entity, the\
    \ SNMP protocol engine first consults its\n   local party database and then interrogates\
    \ its peer, before engaging\n   in the actual communications.\n   Note that with\
    \ such an approach, both the clock synchronization\n   knowledge, and the secret\
    \ update knowledge, associated with a party,\n   can each be represented as (a\
    \ pointer to) an access control entry.\n   Further note that once an implementation\
    \ has computed this knowledge,\n   it might choose to retain this knowledge across\
    \ restarts.\n"
- title: 5.1.  Determination of Synchronization Knowledge
  contents:
  - "5.1.  Determination of Synchronization Knowledge\n   To determine maintenance\
    \ knowledge for clock synchronization:\n          (1)  The SNMP protocol engine\
    \ examines each active, non-local,\n               noAuth party.\n           \
    \    So, this would be party #1.\n          (2)  For each such party, P, all access\
    \ control entries having\n               that party as its aclTarget, and allowing\
    \ the get-bulk\n               operation, are identified.\n               So,\
    \ for party #1, this would be acl #1.\n          (3)  For each such access control\
    \ entry, A, at least one\n               active, non-local, md5Auth party, Q,\
    \ must be present\n               which meets the following criteria:\n      \
    \      -  the transport domain and address of P and Q are\n               identical;\n\
    \            -  an access control entry, B, exists having either: Q as\n     \
    \          its aclTarget and a local party, R, as its aclSubject,\n          \
    \     or, Q as its aclSubject and a local party, R, as its\n               aclTarget;\
    \ and,\n            -  no clock synchronization knowledge is known for R.\n  \
    \             So, for acl #1, party #3 is identified as having the same\n    \
    \           transport domain and address as party #1, and being\n            \
    \   present as the aclTarget in acl #2, which has local party\n              \
    \ #4 as the aclSubject.\n          (4)  Whenever such a party, Q, is present,\
    \ then all instances\n               of the \"partyAuthProtocol\" and \"partyAuthClock\"\
    \ objects\n               are retrieved via the get-bulk operator using the parties\n\
    \               and context identified by the access control entry, A.\n     \
    \          So, party #1, party #2, and context #1 would be used to\n         \
    \      sweep these two columns on the agent.\n          (5)  Only those instances\
    \ corresponding to parties in the\n               local database, which have no\
    \ clock synchronization\n               knowledge, and are local mdAuth parties,\
    \ are examined.\n               So, only instances corresponding to party #4 are\n\
    \               examined.\n          (6)  For each instance of \"partyAuthProtocol\"\
    , if the\n               corresponding value does not match the value in the local\n\
    \               database, then a configuration error is signalled, and\n     \
    \          the corresponding party is marked as being unavailable\n          \
    \     for maintenance knowledge.\n               So, we make sure that the manager\
    \ and the agent agree\n               that party #4 is an md5Auth party.\n   \
    \       (7)  For each instance of \"partyAuthClock\", if the\n               corresponding\
    \ value is greater than the value in the\n               local database, then\
    \ the authentication clock of the\n               party is warped according to\
    \ the procedures defined in\n               Section 5.3 of [3].  Regardless, A\
    \ is recorded as the\n               clock synchronization knowledge for the corresponding\n\
    \               party.\n               So, if the column sweep returns information\
    \ for party #4,\n               then party #4's authentication clock is advanced\
    \ if\n               necessary, and the clock synchronization knowledge for\n\
    \               party #4 is recorded as acl #1.\n"
- title: 5.2.  Use of Clock Synchronization Knowledge
  contents:
  - "5.2.  Use of Clock Synchronization Knowledge\n   Whenever a response to an authenticated\
    \ operation is not received,\n   the SNMP protocol engine may suspect that a clock\
    \ synchronization\n   problem for the source party is the cause [3].  The SNMP\
    \ protocol\n   engine may use different criteria when making this determination;\
    \ for\n   example: on a retrieval operation, the operation might be retried\n\
    \   using an exponential back-off algorithm; in contrast, on a\n   modification\
    \ operation, the operation would not be automatically\n   retried.\n   When clock\
    \ mis-synchronization for a source party, S, is suspected,\n   if clock synchronization\
    \ knowledge for S is present, then this\n   knowledge is used to perform steps\
    \ 4-7 above, which should retrieve\n   the instances of the \"partyAuthProtocol\"\
    \ and \"partyAuthClock\" objects\n   which correspond to S (and perhaps other\
    \ parties as well).  If\n   information on these objects cannot be determined,\
    \ then S is marked\n   as no longer having clock synchronization knowledge.  Otherwise,\
    \ if\n   the value of the corresponding instance of \"partyAuthClock\" is\n  \
    \ greater than the value in the local database, then the authentication\n   clock\
    \ of the party is warped according to the procedures defined in\n   Section 5.3\
    \ of [3], and the original operation is retried, if\n   appropriate.\n   So, if\
    \ traffic from party #4 times out, then a column sweep is\n   automatically initiated,\
    \ using acl #1 (party #1, party #2, context\n   #1).\n   When clock mis-synchronization\
    \ for a source party, S, is suspected,\n   and clock synchronization knowledge\
    \ for S is not present, then the\n   full algorithm above can be used.  In this\
    \ case, if clock\n   synchronization knowledge for S can be determined, and as\
    \ a result,\n   \"partyAuthClock\" value for S in the local database is warped\n\
    \   according to the procedures defined in Section 5.3 of [3], then the\n   original\
    \ operation is retried, if appropriate.\n"
- title: 5.3.  Determination of Secret Update Knowledge
  contents:
  - "5.3.  Determination of Secret Update Knowledge\n   To determine maintenance knowledge\
    \ for secret update:\n          (1)  The SNMP protocol engine examines each active,\
    \ non-local,\n               md5Auth party.\n               So, this would be\
    \ party #3.\n          (2)  For each such party, P, all access control entries\
    \ having\n               that party as its aclTarget, and allowing the get-bulk\n\
    \               and set operations, are identified.\n               So, for party\
    \ #3, this would be acl #2.\n          (3)  For each such access control entry,\
    \ A, at least one\n               active, non-local, md5Auth party, Q, must be\
    \ present\n               which meets the following criteria:\n            - \
    \ the transport domain and address of P and Q are\n               identical;\n\
    \            -  an access control entry, B, exists having either: Q as\n     \
    \          its aclTarget and a local party, R, as its aclSubject,\n          \
    \     or, Q as its aclSubject and a local party, R, as its\n               aclTarget;\
    \ and,\n            -  no secret update knowledge is known for R.\n          \
    \     So, for acl #2, party #3 is (redundantly) identified as\n              \
    \ having the same transport domain and address as party #3,\n               and\
    \ being present as the aclTarget in acl #2, which has\n               local party\
    \ #4 as the aclSubject.\n          (4)  Whenever such a party, Q, is present,\
    \ then all instances\n               of the \"partyAuthProtocol\", \"partyAuthClock\"\
    , and\n               \"partyAuthPrivate\" objects are retrieved via the get-bulk\n\
    \               operator using the parties and context identified by the\n   \
    \            access control entry, A.\n               So, party #3, party #4,\
    \ and context #2 would be used to\n               sweep these three columns on\
    \ the agent.\n          (5)  Only those instances corresponding to parties in\
    \ the\n               local database, which have no secret update knowledge,\n\
    \               and are md5Auth parties, are examined.\n               So, only\
    \ instances corresponding to parties #3 and #4 are\n               examined.\n\
    \          (6)  For each instance of \"partyAuthProtocol\", if the\n         \
    \      corresponding value does not match the value in the local\n           \
    \    database, then a configuration error is signalled, and\n               this\
    \ party is marked as being unavailable for maintenance\n               knowledge.\n\
    \               So, we make sure that the manager and the agent agree\n      \
    \         that both party #3 and #4 are md5Auth parties.\n          (7)  For each\
    \ instance of \"partyAuthPrivate\", if a\n               corresponding instance\
    \ of \"partyAuthClock\" was also\n               returned, then A is recorded\
    \ as the secret update\n               knowledge for this party.\n           \
    \    So, if the column sweep returned information on party #3,\n             \
    \  then the clock synchronization knowledge for party #3\n               would\
    \ be recorded as acl #2.  Further, if the column\n               sweep returned\
    \ information on party #4, then the clock\n               synchronization knowledge\
    \ for party #4 would be recorded\n               as acl #2.\n"
- title: 5.4.  Use of Secret Update Knowledge
  contents:
  - "5.4.  Use of Secret Update Knowledge\n   Whenever the SNMP protocol engine determines\
    \ that the authentication\n   clock of a party, S, is approaching an upper limit,\
    \ and secret update\n   knowledge for S is present, then this knowledge is used\
    \ to modify the\n   current secret of S and reset the authentication clock of\
    \ S,\n   according to the procedures defined in Section 5.4 of [3].\n   So, whenever\
    \ the SNMP protocol engine decides to update the secrets\n   for party #4, it\
    \ can automatically use acl #2 (party #3, party #4,\n   context #2) for this purpose.\n"
- title: 6.  Other Kinds and Uses of Maintenance Knowledge
  contents:
  - "6.  Other Kinds and Uses of Maintenance Knowledge\n   Readers should note that\
    \ there are other kinds of maintenance\n   knowledge that an SNMPv2 manager could\
    \ derive and use.  In the\n   interests of brevity, one example is now considered:\
    \ when an SNMPv2\n   manager first communicates with an agent, it may wish to\
    \ synchronize\n   the maximum-message size values held by itself and the agent.\n\
    \   For those parties that execute at the agent, the manager retrieves\n   the\
    \ corresponding instances of partyMaxMessageSize (preferrably using\n   authentication),\
    \ and, if need be, adjusts the values held in the\n   manager's local party database.\
    \  Thus, the maintenance knowledge to\n   be determined must allow for retrieval\
    \ of partyMaxMessageSize.\n   For those parties that execute at the manager, the\
    \ manager retrieves\n   the corresponding instances of partyMaxMessageSize (using\n\
    \   authentication), and, if need be, adjusts the values held in the\n   agent's\
    \ local party database using the set operation.  Thus, the\n   maintenance knowledge\
    \ to be determined must allow both for retrieval\n   and modification of partyMaxMessageSize.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Jeffrey D. Case of SNMP Research and the University\
    \ of Tennessee, and\n   Robert L. Stewart of Xyplex, both provided helpful comments\
    \ on the\n   ideas contained in this document and the presentation of those ideas.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,\n\
    \       \"Introduction to version 2 of the Internet-standard Network\n       Management\
    \ Framework\", RFC 1441, SNMP Research, Inc., Hughes LAN\n       Systems, Dover\
    \ Beach Consulting, Inc., Carnegie Mellon\n       University, April 1993.\n  \
    \ [2] McCloghrie, K., and J. Galvin, \"Party MIB for version 2 of the\n      \
    \ Simple Network Management Protocol (SNMPv2)\", RFC 1447, Hughes\n       LAN\
    \ Systems, Trusted Information Systems, April 1993.\n   [3] Galvin, J., and K.\
    \ McCloghrie, \"Security Protocols for version 2\n       of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1446,\n       Trusted Information Systems,\
    \ Hughes LAN Systems, April 1993.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Keith McCloghrie\n   Hughes LAN Systems\n   1225\
    \ Charleston Road\n   Mountain View, CA  94043\n   US\n   Phone: +1 415 966 7934\n\
    \   EMail: kzm@hls.com\n   Marshall T. Rose\n   Dover Beach Consulting, Inc.\n\
    \   420 Whisman Court\n   Mountain View, CA  94043-2186\n   US\n   Phone: +1 415\
    \ 968 1052\n   EMail: mrose@dbc.mtview.ca.us\n"
