- title: __initial_text__
  contents:
  - '      Coupled Congestion Control for Multipath Transport Protocols

    '
- title: Abstract
  contents:
  - "Abstract\n   Often endpoints are connected by multiple paths, but communications\n\
    \   are usually restricted to a single path per connection.  Resource\n   usage\
    \ within the network would be more efficient were it possible for\n   these multiple\
    \ paths to be used concurrently.  Multipath TCP is a\n   proposal to achieve multipath\
    \ transport in TCP.\n   New congestion control algorithms are needed for multipath\
    \ transport\n   protocols such as Multipath TCP, as single path algorithms have\
    \ a\n   series of issues in the multipath context.  One of the prominent\n   problems\
    \ is that running existing algorithms such as standard TCP\n   independently on\
    \ each path would give the multipath flow more than\n   its fair share at a bottleneck\
    \ link traversed by more than one of its\n   subflows.  Further, it is desirable\
    \ that a source with multiple paths\n   available will transfer more traffic using\
    \ the least congested of the\n   paths, achieving a property called \"resource\
    \ pooling\" where a bundle\n   of links effectively behaves like one shared link\
    \ with bigger\n   capacity.  This would increase the overall efficiency of the\
    \ network\n   and also its robustness to failure.\n   This document presents a\
    \ congestion control algorithm that couples\n   the congestion control algorithms\
    \ running on different subflows by\n   linking their increase functions, and dynamically\
    \ controls the\n   overall aggressiveness of the multipath flow.  The result is\
    \ a\n   practical algorithm that is fair to TCP at bottlenecks while moving\n\
    \   traffic away from congested links.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6356.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Language ...........................................5\n  \
    \ 3. Coupled Congestion Control Algorithm ............................5\n   4.\
    \ Implementation Considerations ...................................7\n      4.1.\
    \ Computing \"alpha\" in Practice ..............................7\n      4.2.\
    \ Implementation Considerations when CWND is\n           Expressed in Packets\
    \ .......................................8\n   5. Discussion ......................................................9\n\
    \   6. Security Considerations ........................................10\n  \
    \ 7. Acknowledgements ...............................................11\n   8.\
    \ References .....................................................11\n      8.1.\
    \ Normative References ......................................11\n      8.2. Informative\
    \ References ....................................11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Multipath TCP (MPTCP, [MPTCP-MULTIADDRESSED]) is a set of\
    \ extensions\n   to regular TCP [RFC0793] that allows one TCP connection to be\
    \ spread\n   across multiple paths.  MPTCP distributes load through the creation\n\
    \   of separate \"subflows\" across potentially disjoint paths.\n   How should\
    \ congestion control be performed for multipath TCP?  First,\n   each subflow\
    \ must have its own congestion control state (i.e., cwnd)\n   so that capacity\
    \ on that path is matched by offered load.  The\n   simplest way to achieve this\
    \ goal is to simply run standard TCP\n   congestion control on each subflow. \
    \ However, this solution is\n   unsatisfactory as it gives the multipath flow\
    \ an unfair share when\n   the paths taken by its different subflows share a common\
    \ bottleneck.\n   Bottleneck fairness is just one requirement multipath congestion\n\
    \   control should meet.  The following three goals capture the desirable\n  \
    \ properties of a practical multipath congestion control algorithm:\n   o  Goal\
    \ 1 (Improve Throughput) A multipath flow should perform at\n      least as well\
    \ as a single path flow would on the best of the paths\n      available to it.\n\
    \   o  Goal 2 (Do no harm) A multipath flow should not take up more\n      capacity\
    \ from any of the resources shared by its different paths\n      than if it were\
    \ a single flow using only one of these paths.  This\n      guarantees it will\
    \ not unduly harm other flows.\n   o  Goal 3 (Balance congestion) A multipath\
    \ flow should move as much\n      traffic as possible off its most congested paths,\
    \ subject to\n      meeting the first two goals.\n   Goals 1 and 2 together ensure\
    \ fairness at the bottleneck.  Goal 3\n   captures the concept of resource pooling\
    \ [WISCHIK]: if each multipath\n   flow sends more data through its least congested\
    \ path, the traffic in\n   the network will move away from congested areas.  This\
    \ improves\n   robustness and overall throughput, among other things.  The way\
    \ to\n   achieve resource pooling is to effectively \"couple\" the congestion\n\
    \   control loops for the different subflows.\n   We propose an algorithm that\
    \ couples the additive increase function\n   of the subflows, and uses unmodified\
    \ TCP behavior in case of a drop.\n   The algorithm relies on the traditional\
    \ TCP mechanisms to detect\n   drops, to retransmit data, etc.\n   Detecting shared\
    \ bottlenecks reliably is quite difficult, but is just\n   one part of a bigger\
    \ question.  This bigger question is how much\n   bandwidth a multipath user should\
    \ use in total, even if there is no\n   shared bottleneck.\n   The congestion\
    \ controller aims to set the multipath flow's aggregate\n   bandwidth to be the\
    \ same as that of a regular TCP flow would get on\n   the best path available\
    \ to the multipath flow.  To estimate the\n   bandwidth of a regular TCP flow,\
    \ the multipath flow estimates loss\n   rates and round-trip times (RTTs) and\
    \ computes the target rate.\n   Then, it adjusts the overall aggressiveness (parameter\
    \ alpha) to\n   achieve the desired rate.\n   While the mechanism above applies\
    \ always, its effect depends on\n   whether the multipath TCP flow influences\
    \ or does not influence the\n   link loss rates (low versus high statistical multiplexing).\
    \  If MPTCP\n   does not influence link loss rates, MPTCP will get the same\n\
    \   throughput as TCP on the best path.  In cases with low statistical\n   multiplexing,\
    \ where the multipath flow influences the loss rates on\n   the path, the multipath\
    \ throughput will be strictly higher than that\n   a single TCP would get on any\
    \ of the paths.  In particular, if using\n   two idle paths, multipath throughput\
    \ will be sum of the two paths'\n   throughput.\n   This algorithm ensures bottleneck\
    \ fairness and fairness in the\n   broader, network sense.  We acknowledge that\
    \ current TCP fairness\n   criteria are far from ideal, but a multipath TCP needs\
    \ to be\n   deployable in the current Internet.  If needed, new fairness criteria\n\
    \   can be implemented by the same algorithm we propose by appropriately\n   scaling\
    \ the overall aggressiveness.\n   It is intended that the algorithm presented\
    \ here can be applied to\n   other multipath transport protocols, such as alternative\
    \ multipath\n   extensions to TCP, or indeed any other congestion-aware transport\n\
    \   protocols.  However, for the purposes of example, this document will,\n  \
    \ where appropriate, refer to the MPTCP.\n   The design decisions and evaluation\
    \ of the congestion control\n   algorithm are published in [NSDI].\n   The algorithm\
    \ presented here only extends standard TCP congestion\n   control for multipath\
    \ operation.  It is foreseeable that other\n   congestion controllers will be\
    \ implemented for multipath transport to\n   achieve the bandwidth-scaling properties\
    \ of the newer congestion\n   control algorithms for regular TCP (such as Compound\
    \ TCP and Cubic).\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119] .\n"
- title: 3.  Coupled Congestion Control Algorithm
  contents:
  - "3.  Coupled Congestion Control Algorithm\n   The algorithm we present only applies\
    \ to the increase phase of the\n   congestion avoidance state specifying how the\
    \ window inflates upon\n   receiving an ACK.  The slow start, fast retransmit,\
    \ and fast recovery\n   algorithms, as well as the multiplicative decrease of\
    \ the congestion\n   avoidance state are the same as in standard TCP [RFC5681].\n\
    \   Let cwnd_i be the congestion window on the subflow i.  Let cwnd_total\n  \
    \ be the sum of the congestion windows of all subflows in the\n   connection.\
    \  Let p_i, rtt_i, and MSS_i be the loss rate, round-trip\n   time (i.e., smoothed\
    \ round-trip time estimate used by TCP), and\n   maximum segment size on subflow\
    \ i.\n   We assume throughout this document that the congestion window is\n  \
    \ maintained in bytes, unless otherwise specified.  We briefly describe\n   the\
    \ algorithm for packet-based implementations of cwnd in section\n   Section 4.2.\n\
    \   Our proposed \"Linked Increases\" algorithm MUST:\n   o  For each ACK received\
    \ on subflow i, increase cwnd_i by\n                alpha * bytes_acked * MSS_i\
    \   bytes_acked * MSS_i\n          min ( --------------------------- , -------------------\
    \ )  (1)\n                         cwnd_total                   cwnd_i\n   The\
    \ increase formula (1) takes the minimum between the computed\n   increase for\
    \ the multipath subflow (first argument to min), and the\n   increase TCP would\
    \ get in the same scenario (the second argument).\n   In this way, we ensure that\
    \ any multipath subflow cannot be more\n   aggressive than a TCP flow in the same\
    \ circumstances, hence achieving\n   Goal 2 (do no harm).\n   \"alpha\" is a parameter\
    \ of the algorithm that describes the\n   aggressiveness of the multipath flow.\
    \  To meet Goal 1 (improve\n   throughput), the value of alpha is chosen such\
    \ that the aggregate\n   throughput of the multipath flow is equal to the throughput\
    \ a TCP\n   flow would get if it ran on the best path.\n   To get an idea of what\
    \ the algorithm is trying to do, let's take the\n   case where all the subflows\
    \ have the same round-trip time and Maximum\n   Segment Size (MSS).  In this case,\
    \ the algorithm will grow the total\n   window by approximately alpha*MSS per\
    \ RTT.  This increase is\n   distributed to the individual flows according to\
    \ their instantaneous\n   window size.  Subflow i will increase by alpha*cwnd_i/cwnd_total\n\
    \   segments per RTT.\n   Note that, as in standard TCP, when cwnd_total is large\
    \ the increase\n   may be 0.  In this case, the increase MUST be set to 1.  We\
    \ discuss\n   how to implement this formula in practice in the next section.\n\
    \   We assume implementations use an approach similar to appropriate byte\n  \
    \ counting (ABC, [RFC3465]), where the bytes_acked variable records the\n   number\
    \ of bytes newly acknowledged.  If this is not the case,\n   bytes_acked SHOULD\
    \ be set to MSS_i.\n   To compute cwnd_total, it is an easy mistake to sum up\
    \ cwnd_i across\n   all subflows: when a flow is in fast retransmit, its cwnd\
    \ is\n   typically inflated and no longer represents the real congestion\n   window.\
    \  The correct behavior is to use the ssthresh (slow start\n   threshold) value\
    \ for flows in fast retransmit when computing\n   cwnd_total.  To cater to connections\
    \ that are app limited, the\n   computation should consider the minimum between\
    \ flight_size_i and\n   cwnd_i, and flight_size_i and ssthresh_i, where appropriate.\n\
    \   The total throughput of a multipath flow depends on the value of\n   alpha\
    \ and the loss rates, maximum segment sizes, and round-trip times\n   of its paths.\
    \  Since we require that the total throughput is no worse\n   than the throughput\
    \ a single TCP would get on the best path, it is\n   impossible to choose, a priori,\
    \ a single value of alpha that achieves\n   the desired throughput in every occasion.\
    \  Hence, alpha must be\n   computed based on the observed properties of the paths.\n\
    \   The formula to compute alpha is:\n                        MAX (cwnd_i/rtt_i^2)\n\
    \   alpha = cwnd_total * -------------------------           (2)\n           \
    \             (SUM (cwnd_i/rtt_i))^2\n   Note:\n   MAX (x_i) means the maximum\
    \ value for any possible value of i.\n   SUM (x_i) means the summation for all\
    \ possible values of i.\n   The formula (2) is derived by equalizing the rate\
    \ of the multipath\n   flow with the rate of a TCP running on the best path, and\
    \ solving for\n   alpha.\n"
- title: 4.  Implementation Considerations
  contents:
  - "4.  Implementation Considerations\n   Equation (2) implies that alpha is a floating\
    \ point value.  This\n   would require performing costly floating point operations\
    \ whenever an\n   ACK is received.  Further, in many kernels, floating point operations\n\
    \   are disabled.  There is an easy way to approximate the above\n   calculations\
    \ using integer arithmetic.\n"
- title: 4.1.  Computing "alpha" in Practice
  contents:
  - "4.1.  Computing \"alpha\" in Practice\n   Let alpha_scale be an integer.  When\
    \ computing alpha, use alpha_scale\n   * cwnd_total instead of cwnd_total and\
    \ do all the operations in\n   integer arithmetic.\n   Then, scale down the increase\
    \ per ACK by alpha_scale.  The resulting\n   algorithm is a simple change from\
    \ Equation (1):\n   o  For each ACK received on subflow i, increase cwnd_i by:\n\
    \                alpha * bytes_acked * MSS_i   bytes_acked * MSS_i\n         \
    \ min ( --------------------------- , ------------------- )  (3)\n           \
    \      alpha_scale * cwnd_total              cwnd_i\n   The alpha_scale parameter\
    \ denotes the precision we want for computing\n   alpha.  Observe that the errors\
    \ in computing the numerator or the\n   denominator in the formula for alpha are\
    \ quite small, as the cwnd in\n   bytes is typically much larger than the RTT\
    \ (measured in ms).\n   With these changes, all the operations can be done using\
    \ integer\n   arithmetic.  We propose alpha_scale be a small power of two, to\
    \ allow\n   using faster shift operations instead of multiplication and division.\n\
    \   Our experiments show that using alpha_scale=512 works well in a wide\n   range\
    \ of scenarios.  Increasing alpha_scale increases precision, but\n   also increases\
    \ the risk of overflow when computing alpha.  Using 64-\n   bit operations would\
    \ solve this issue.  Another option is to\n   dynamically adjust alpha_scale when\
    \ computing alpha; in this way, we\n   avoid overflow and obtain maximum precision.\n\
    \   It is possible to implement the algorithm by calculating cwnd_total\n   on\
    \ each ack; however, this would be costly especially when the number\n   of subflows\
    \ is large.  To avoid this overhead, the implementation MAY\n   choose to maintain\
    \ a new per-connection state variable called\n   \"cwnd_total\".  If it does so,\
    \ the implementation will update the\n   cwnd_total value whenever the individual\
    \ subflow's windows are\n   updated.  Updating only requires one more addition\
    \ or subtraction\n   operation compared to the regular, per-subflow congestion\
    \ control\n   code, so its performance impact should be minimal.\n   Computing\
    \ alpha per ACK is also costly.  We propose alpha be a per-\n   connection variable,\
    \ computed whenever there is a drop and once per\n   RTT otherwise.  More specifically,\
    \ let cwnd_new be the new value of\n   the congestion window after it is inflated\
    \ or after a drop.  Update\n   alpha only if the quotient of cwnd_i/MSS_i differs\
    \ from the quotient\n   of cwnd_new_i/MSS_i.\n   In certain cases with small RTTs,\
    \ computing alpha can still be\n   expensive.  We observe that if RTTs were constant,\
    \ it is sufficient\n   to compute alpha once per drop, as alpha does not change\
    \ between\n   drops (the insight here is that cwnd_i/cwnd_j = constant as long\
    \ as\n   both windows increase).  Experimental results show that even if\n   round-trip\
    \ times are not constant, using average round-trip time per\n   sawtooth instead\
    \ of instantaneous round-trip time (i.e., TCP's\n   smoothed RTT estimator) gives\
    \ good precision for computing alpha.\n   Hence, it is possible to compute alpha\
    \ only once per drop using a\n   modified version of equation (2) where rtt_i\
    \ is replaced with\n   rtt_avg_i.\n   If using average round-trip time, rtt_avg_i\
    \ will be computed by\n   sampling the rtt_i whenever the window can accommodate\
    \ one more\n   packet, i.e., when cwnd / MSS < (cwnd+increase)/MSS.  The samples\
    \ are\n   averaged once per sawtooth into rtt_avg_i.  This sampling ensures\n\
    \   that there is no sampling bias for larger windows.\n   Given cwnd_total and\
    \ alpha, the congestion control algorithm is run\n   for each subflow independently,\
    \ with similar complexity to the\n   standard TCP increase code [RFC5681].\n"
- title: 4.2.  Implementation Considerations when CWND is Expressed in Packets
  contents:
  - "4.2.  Implementation Considerations when CWND is Expressed in Packets\n   When\
    \ the congestion control algorithm maintains cwnd in packets\n   rather than bytes,\
    \ the algorithms above must change to take into\n   account path MSS.\n   To compute\
    \ the increase when an ACK is received, the implementation\n   for multipath congestion\
    \ control is a simple extension of the\n   standard TCP code.  In standard, TCP\
    \ cwnd_cnt is an additional state\n   variable that tracks the number of segments\
    \ acked since the last cwnd\n   increment; cwnd is incremented only when cwnd_cnt\
    \ > cwnd; then,\n   cwnd_cnt is set to 0.\n   In the multipath case, cwnd_cnt_i\
    \ is maintained for each subflow as\n   above, and cwnd_i is increased by 1 when\
    \ cwnd_cnt_i > max(alpha_scale\n   * cwnd_total / alpha, cwnd_i).\n   When computing\
    \ alpha for packet-based stacks, the errors in computing\n   the terms in the\
    \ denominator are larger (this is because cwnd is much\n   smaller and rtt may\
    \ be comparatively large).  Let max be the index of\n   the subflow used in the\
    \ numerator.  To reduce errors, it is easiest\n   to move rtt_max (once calculated)\
    \ from the numerator to the\n   denominator, changing equation (2) to obtain the\
    \ equivalent formula\n   below.\n                                            \
    \                      (4)\n                                               cwnd_max\n\
    \ alpha = alpha_scale * cwnd_total * ------------------------------------\n  \
    \                                  (SUM ((rtt_max * cwnd_i) / rtt_i))^2\n   Note\
    \ that the calculation of alpha does not take into account path\n   MSS and is\
    \ the same for stacks that keep cwnd in bytes or packets.\n   With this formula,\
    \ the algorithm for computing alpha will match the\n   rate of TCP on the best\
    \ path in B/s for byte-oriented stacks, and in\n   packets/s in packet-based stacks.\
    \  In practice, MSS rarely changes\n   between paths so this shouldn't be a problem.\n\
    \   However, it is simple to derive formulae allowing packet-based stacks\n  \
    \ to achieve byte rate fairness (and vice versa) if needed.  In\n   particular,\
    \ for packet-based stacks wanting byte-rate fairness,\n   equation (4) above changes\
    \ as follows: cwnd_max is replaced by\n   cwnd_max * MSS_max * MSS_max, while\
    \ cwnd_i is replaced with cwnd_i *\n   MSS_i.\n"
- title: 5.  Discussion
  contents:
  - "5.  Discussion\n   The algorithm we've presented fully achieves Goals 1 and 2,\
    \ but does\n   not achieve full resource pooling (Goal 3).  Resource pooling\n\
    \   requires that no traffic should be transferred on links with higher\n   loss\
    \ rates.  To achieve perfect resource pooling, one must couple\n   both increase\
    \ and decrease of congestion windows across subflows, as\n   in [KELLY].\n   There\
    \ are a few problems with such a fully coupled controller.\n   First, it will\
    \ insufficiently probe paths with high loss rates and\n   will fail to detect\
    \ free capacity when it becomes available.  Second,\n   such controllers tend\
    \ to exhibit \"flappiness\": when the paths have\n   similar levels of congestion,\
    \ the congestion controller will tend to\n   allocate all the window to one random\
    \ subflow and allocate zero\n   window to the other subflows.  The controller\
    \ will perform random\n   flips between these stable points.  This doesn't seem\
    \ desirable in\n   general, and is particularly bad when the achieved rates depend\
    \ on\n   the RTT (as in the current Internet): in such a case, the resulting\n\
    \   rate with fluctuate unpredictably depending on which state the\n   controller\
    \ is in, hence violating Goal 1.\n   By only coupling increases our proposal probes\
    \ high loss paths,\n   detecting free capacity quicker.  Our proposal does not\
    \ suffer from\n   flappiness but also achieves less resource pooling.  The algorithm\n\
    \   will allocate window to the subflows such that p_i * cwnd_i =\n   constant,\
    \ for all i.  Thus, when the loss rates of the subflows are\n   equal, each subflow\
    \ will get an equal window, removing flappiness.\n   When the loss rates differ,\
    \ progressively more windows will be\n   allocated to the flow with the lower\
    \ loss rate.  In contrast, perfect\n   resource pooling requires that all the\
    \ window should be allocated on\n   the path with the lowest loss rate.  Further\
    \ details can be found in\n   [NSDI].\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   One security concern relates to what we call\
    \ the traffic-shifting\n   attack: on-path attackers can drop packets belonging\
    \ to a multipath\n   subflow, which, in turn, makes the path seem congested and\
    \ will force\n   the sender's congestion controller to avoid that path and push\
    \ more\n   data over alternate subflows.\n   The attacker's goal is to create\
    \ congestion on the corresponding\n   alternative paths.  This behavior is entirely\
    \ feasible but will only\n   have minor effects: by design, the coupled congestion\
    \ controller is\n   less (or similarly) aggressive on any of its paths than a\
    \ single TCP\n   flow.  Thus, the biggest effect this attack can have is to make\
    \ a\n   multipath subflow be as aggressive as a single TCP flow.\n   Another effect\
    \ of the traffic-shifting attack is that the new path\n   can monitor all the\
    \ traffic, whereas before it could only see a\n   subset of traffic.  We believe\
    \ that if privacy is needed, splitting\n   traffic across multiple paths with\
    \ MPTCP is not the right solution in\n   the first place; end-to-end encryption\
    \ should be used instead.\n   Besides the traffic-shifting attack mentioned above,\
    \ the coupled\n   congestion control algorithm defined in this document adds no\
    \ other\n   security considerations to those found in [MPTCP-MULTIADDRESSED] and\n\
    \   [RFC6181].  Detailed security analysis for the Multipath TCP protocol\n  \
    \ itself is included in [MPTCP-MULTIADDRESSED] and [RFC6181].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We thank Christoph Paasch for his suggestions for computing\
    \ alpha in\n   packet-based stacks.  The authors are supported by Trilogy\n  \
    \ (http://www.trilogy-project.org), a research project (ICT-216372)\n   partially\
    \ funded by the European Community under its Seventh\n   Framework Program.  The\
    \ views expressed here are those of the\n   author(s) only.  The European Commission\
    \ is not liable for any use\n   that may be made of the information in this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, September 1981.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC5681]  Allman, M., Paxson, V., and E.\
    \ Blanton, \"TCP Congestion\n              Control\", RFC 5681, September 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [KELLY]    Kelly, F. and T. Voice, \"Stability\
    \ of end-to-end\n              algorithms for joint routing and rate control\"\
    , ACM\n              SIGCOMM CCR vol. 35 num. 2, pp. 5-12, 2005,\n           \
    \   <http://portal.acm.org/citation.cfm?id=1064415>.\n   [MPTCP-MULTIADDRESSED]\n\
    \              Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n      \
    \        \"TCP Extensions for Multipath Operation with Multiple\n            \
    \  Addresses\", Work in Progress, July 2011.\n   [NSDI]     Wischik, D., Raiciu,\
    \ C., Greenhalgh, A., and M. Handley,\n              \"Design, Implementation\
    \ and Evaluation of Congestion\n              Control for Multipath TCP\", Usenix\
    \ NSDI , March 2011, <htt\n              p://www.cs.ucl.ac.uk/staff/c.raiciu/files/mptcp-nsdi.pdf>.\n\
    \   [RFC3465]  Allman, M., \"TCP Congestion Control with Appropriate Byte\n  \
    \            Counting (ABC)\", RFC 3465, February 2003.\n   [RFC6181]  Bagnulo,\
    \ M., \"Threat Analysis for TCP Extensions for\n              Multipath Operation\
    \ with Multiple Addresses\", RFC 6181,\n              March 2011.\n   [WISCHIK]\
    \  Wischik, D., Handley, M., and M. Bagnulo Braun, \"The\n              Resource\
    \ Pooling Principle\", ACM SIGCOMM CCR vol. 38 num.\n              5, pp. 47-52,\
    \ October 2008,\n              <http://ccr.sigcomm.org/online/files/p47-handleyA4.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Costin Raiciu\n   University Politehnica of Bucharest\n\
    \   Splaiul Independentei 313\n   Bucharest\n   Romania\n   EMail: costin.raiciu@cs.pub.ro\n\
    \   Mark Handley\n   University College London\n   Gower Street\n   London  WC1E\
    \ 6BT\n   UK\n   EMail: m.handley@cs.ucl.ac.uk\n   Damon Wischik\n   University\
    \ College London\n   Gower Street\n   London  WC1E 6BT\n   UK\n   EMail: d.wischik@cs.ucl.ac.uk\n"
