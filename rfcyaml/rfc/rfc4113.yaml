- contents:
  - '    Management Information Base for the User Datagram Protocol (UDP)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in the Internet community.\n   In
    particular, it describes managed objects used for implementations\n   of the User
    Datagram Protocol (UDP) in an IP version independent\n   manner.  This memo obsoletes
    RFCs 2013 and 2454.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  The Internet-Standard Management Framework . . . .
    . . . . . .  2\n   2.  Overview . . . . . . . . . . . . . . . . . . . . . . .
    . . . .  2\n       2.1.  Relationship to Other MIBs . . . . . . . . . . . . .
    . .  3\n             2.1.1.  Relationship to RFC1213-MIB  . . . . . . . . . .
    \ 3\n             2.1.2.  Relationship to the IPV6-UDP-MIB . . . . . . . .  3\n
    \            2.1.3.  Relationship to HOST-RESOURCES-MIB and\n                     SYSAPPL-MIB.
    . . . . . . . . . . . . . . . . . .  4\n   3.  Definitions  . . . . . . . . .
    . . . . . . . . . . . . . . . .  4\n   4.  Acknowledgements . . . . . . . . .
    . . . . . . . . . . . . . . 15\n   5.  Contributors . . . . . . . . . . . . .
    . . . . . . . . . . . . 15\n   6.  Security Considerations  . . . . . . . . .
    . . . . . . . . . . 16\n   7.  IANA Considerations  . . . . . . . . . . . . .
    . . . . . . . . 17\n   8.  References . . . . . . . . . . . . . . . . . . . .
    . . . . . . 17\n       8.1.  Normative References . . . . . . . . . . . . . .
    . . . . 17\n       8.2.  Informative References . . . . . . . . . . . . . . .
    . . 18\n"
  title: Table of Contents
- contents:
  - "1.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies a MIB\n
    \  module that is compliant to the SMIv2, which is described in STD 58,\n   RFC
    2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n"
  title: 1.  The Internet-Standard Management Framework
- contents:
  - "2.  Overview\n   This memo defines a portion of the Management Information Base
    (MIB)\n   for use with network management protocols in the Internet community.\n
    \  In particular, it describes managed objects used for implementations\n   of
    the User Datagram Protocol (UDP), as defined in RFC 768 [RFC0768],\n   in an IP
    version independent manner.\n   The current UDP-MIB defined in this memo consists
    of one table and a\n   group of scalars:\n   o  The udp group of scalars reports
    parameters and statistics of a\n      UDP protocol engine.  Two scalars, udpHCInDatagrams
    and\n      udpHCOutDatagrams, have been added to this group since the\n      publication
    of RFC 2013 [RFC2013] in order to provide high-\n      capacity counters for fast
    networks.  Discontinuities in the\n      values of the counters in this group
    are indicated by\n      discontinuities in the value of the sysUpTime object,
    which is\n      defined in RFC 3418 [RFC3418].\n   o  The udpEndpointTable provides
    access to status information for all\n      UDP endpoints handled by a UDP protocol
    engine.  The table\n      provides for strictly listening endpoints, as with the
    historical\n      udpTable, and also for \"connected\" UDP endpoints, which only\n
    \     accept packets from a given remote system.  It also reports\n      identification
    of the operating system level processes that handle\n      UDP connections.  Addresses
    and ports of UDP endpoints in this\n      table are represented using the InetAddressType,
    InetAddress, and\n      InetPortNumber textual conventions defined in RFC 4001
    [RFC4001].\n"
  - contents:
    - "2.1.  Relationship to Other MIBs\n   This section discusses the relationship
      of this UDP-MIB module to\n   other MIB modules.\n"
    - contents:
      - "2.1.1.  Relationship to RFC1213-MIB\n   UDP related MIB objects were originally
        defined as part of the\n   RFC1213-MIB, defined in RFC 1213 [RFC1213].  The
        UDP related objects\n   of the RFC1213-MIB were later copied into a separate
        MIB module and\n   published in RFC 2013 [RFC2013] in SMIv2 format.\n   The
        previous versions of the UDP-MIB both defined the udpTable, which\n   has
        been deprecated for basically two reasons:\n   (1) The udpTable only supports
        IPv4.\n       The current approach in the IETF is to write IP version neutral\n
        \      MIBs rather than have different definitions for various version\n       of
        IP.  This reduces the amount of overhead when new objects are\n       introduced,
        since there is only one place to add them.  Hence,\n       the approach taken
        in RFC 2454 [RFC2454] of having separate\n       tables is not continued.\n
        \  (2) The udpTable does not permit describing \"connected\" UDP\n       endpoints.\n
        \      It turns out that \"connected\" endpoints tend to have a different\n
        \      behaviour and management access pattern from those of listening\n       endpoints.
        \ Adding remote endpoint information to the\n       udpEndpointTable thus
        allows for the addition of specific status\n       and statistic objects for
        \"connected\" endpoints and connections.\n"
      title: 2.1.1.  Relationship to RFC1213-MIB
    - contents:
      - "2.1.2.  Relationship to the IPV6-UDP-MIB\n   The IPV6-UDP-MIB, defined in
        RFC 2454 [RFC2454], has been moved to\n   Historic because the approach of
        having separate IP version specific\n   tables is not followed anymore.  Implementation
        of RFC 2454 is thus\n   not suggested anymore.\n   Note that because scoped
        addresses are now represented using the\n   IPv4z and IPv6z address types,
        there is no longer a need to\n   explicitly include the ifIndex in the index
        clause of the\n   udpEndpointTable.  This is a change from the use of ipv6UdpIfIndex
        in\n   RFC 2454.\n"
      title: 2.1.2.  Relationship to the IPV6-UDP-MIB
    - contents:
      - "2.1.3.  Relationship to HOST-RESOURCES-MIB and SYSAPPL-MIB\n   The udpEndpointTable
        reports the identification of the operating\n   system level process that
        handles a connection or a listening\n   endpoint.  The value is reported as
        an Unsigned32, which is expected\n   to be the same as the hrSWRunIndex of
        the HOST-RESOURCES-MIB\n   [RFC2790] (if the value is smaller than 2147483647)
        or the\n   sysApplElmtRunIndex of the SYSAPPL-MIB [RFC2287].  This allows\n
        \  management applications to identify the UDP connections that belong\n   to
        an operating system level process, which has proven valuable in\n   operational
        environments.\n"
      title: 2.1.3.  Relationship to HOST-RESOURCES-MIB and SYSAPPL-MIB
    title: 2.1.  Relationship to Other MIBs
  title: 2.  Overview
- contents:
  - "3.  Definitions\n   UDP-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-IDENTITY,
    OBJECT-TYPE, Integer32, Counter32, Counter64,\n       Unsigned32, IpAddress, mib-2
    \      FROM SNMPv2-SMI\n       MODULE-COMPLIANCE, OBJECT-GROUP    FROM SNMPv2-CONF\n
    \      InetAddress, InetAddressType,\n       InetPortNumber                     FROM
    INET-ADDRESS-MIB;\n   udpMIB MODULE-IDENTITY\n       LAST-UPDATED \"200505200000Z\"
    \ -- May 20, 2005\n       ORGANIZATION\n              \"IETF IPv6 Working Group\n
    \              http://www.ietf.org/html.charters/ipv6-charter.html\"\n       CONTACT-INFO\n
    \             \"Bill Fenner (editor)\n               AT&T Labs -- Research\n               75
    Willow Rd.\n               Menlo Park, CA 94025\n               Phone: +1 650
    330-7893\n               Email: <fenner@research.att.com>\n               John
    Flick (editor)\n               Hewlett-Packard Company\n               8000 Foothills
    Blvd. M/S 5557\n               Roseville, CA 95747\n               Phone: +1 916
    785 4018\n               Email: <john.flick@hp.com>\n               Send comments
    to <ipv6@ietf.org>\"\n       DESCRIPTION\n              \"The MIB module for managing
    UDP implementations.\n               Copyright (C) The Internet Society (2005).
    \ This\n               version of this MIB module is part of RFC 4113;\n               see
    the RFC itself for full legal notices.\"\n       REVISION      \"200505200000Z\"
    \ -- May 20, 2005\n       DESCRIPTION\n              \"IP version neutral revision,
    incorporating the\n               following revisions:\n               - Added
    udpHCInDatagrams and udpHCOutDatagrams in order\n                 to provide high-capacity
    counters for fast networks.\n               - Added text to the descriptions of
    all counter objects\n                 to indicate how discontinuities are detected.\n
    \              - Deprecated the IPv4-specific udpTable and replaced it\n                 with
    the version neutral udpEndpointTable.  This\n                 table includes support
    for connected UDP endpoints\n                 and support for identification of
    the operating\n                 system process associated with a UDP endpoint.\n
    \              - Deprecated the udpGroup and replaced it with object\n                 groups
    representing the current set of objects.\n               - Deprecated udpMIBCompliance
    and replaced it with\n                 udpMIBCompliance2, which includes the compliance\n
    \                information for the new object groups.\n               This version
    published as RFC 4113.\"\n       REVISION      \"199411010000Z\"    -- November
    1, 1994\n       DESCRIPTION\n              \"Initial SMIv2 version, published
    as RFC 2013.\"\n       REVISION      \"199103310000Z\"    -- March 31, 1991\n
    \      DESCRIPTION\n              \"The initial revision of this MIB module was
    part of\n               MIB-II, published as RFC 1213.\"\n       ::= { mib-2 50
    }\n   -- the UDP group\n   udp      OBJECT IDENTIFIER ::= { mib-2 7 }\n   udpInDatagrams
    OBJECT-TYPE\n       SYNTAX     Counter32\n       MAX-ACCESS read-only\n       STATUS
    \    current\n       DESCRIPTION\n              \"The total number of UDP datagrams
    delivered to UDP\n               users.\n               Discontinuities in the
    value of this counter can occur\n               at re-initialization of the management
    system, and at\n               other times as indicated by discontinuities in
    the\n               value of sysUpTime.\"\n       ::= { udp 1 }\n   udpNoPorts
    OBJECT-TYPE\n       SYNTAX     Counter32\n       MAX-ACCESS read-only\n       STATUS
    \    current\n       DESCRIPTION\n              \"The total number of received
    UDP datagrams for which\n               there was no application at the destination
    port.\n               Discontinuities in the value of this counter can occur\n
    \              at re-initialization of the management system, and at\n               other
    times as indicated by discontinuities in the\n               value of sysUpTime.\"\n
    \      ::= { udp 2 }\n   udpInErrors OBJECT-TYPE\n       SYNTAX     Counter32\n
    \      MAX-ACCESS read-only\n       STATUS     current\n       DESCRIPTION\n              \"The
    number of received UDP datagrams that could not be\n               delivered for
    reasons other than the lack of an\n               application at the destination
    port.\n               Discontinuities in the value of this counter can occur\n
    \              at re-initialization of the management system, and at\n               other
    times as indicated by discontinuities in the\n               value of sysUpTime.\"\n
    \      ::= { udp 3 }\n   udpOutDatagrams OBJECT-TYPE\n       SYNTAX     Counter32\n
    \      MAX-ACCESS read-only\n       STATUS     current\n       DESCRIPTION\n              \"The
    total number of UDP datagrams sent from this\n               entity.\n               Discontinuities
    in the value of this counter can occur\n               at re-initialization of
    the management system, and at\n               other times as indicated by discontinuities
    in the\n               value of sysUpTime.\"\n       ::= { udp 4 }\n   udpHCInDatagrams
    OBJECT-TYPE\n       SYNTAX     Counter64\n       MAX-ACCESS read-only\n       STATUS
    \    current\n       DESCRIPTION\n              \"The total number of UDP datagrams
    delivered to UDP\n               users, for devices that can receive more than
    1\n               million UDP datagrams per second.\n               Discontinuities
    in the value of this counter can occur\n               at re-initialization of
    the management system, and at\n               other times as indicated by discontinuities
    in the\n               value of sysUpTime.\"\n       ::= { udp 8 }\n   udpHCOutDatagrams
    OBJECT-TYPE\n       SYNTAX     Counter64\n       MAX-ACCESS read-only\n       STATUS
    \    current\n       DESCRIPTION\n              \"The total number of UDP datagrams
    sent from this\n               entity, for devices that can transmit more than
    1\n               million UDP datagrams per second.\n               Discontinuities
    in the value of this counter can occur\n               at re-initialization of
    the management system, and at\n               other times as indicated by discontinuities
    in the\n               value of sysUpTime.\"\n       ::= { udp 9 }\n   --\n   --
    { udp 6 } was defined as the ipv6UdpTable in RFC2454's\n   -- IPV6-UDP-MIB.  This
    RFC obsoletes RFC 2454, so { udp 6 } is\n   -- obsoleted.\n   --\n   -- The UDP
    \"Endpoint\" table.\n   udpEndpointTable OBJECT-TYPE\n       SYNTAX     SEQUENCE
    OF UdpEndpointEntry\n       MAX-ACCESS not-accessible\n       STATUS     current\n
    \      DESCRIPTION\n              \"A table containing information about this
    entity's UDP\n               endpoints on which a local application is currently\n
    \              accepting or sending datagrams.\n               The address type
    in this table represents the address\n               type used for the communication,
    irrespective of the\n               higher-layer abstraction.  For example, an
    application\n               using IPv6 'sockets' to communicate via IPv4 between\n
    \              ::ffff:10.0.0.1 and ::ffff:10.0.0.2 would use\n               InetAddressType
    ipv4(1).\n               Unlike the udpTable in RFC 2013, this table also allows\n
    \              the representation of an application that completely\n               specifies
    both local and remote addresses and ports.  A\n               listening application
    is represented in three possible\n               ways:\n               1) An application
    that is willing to accept both IPv4\n                  and IPv6 datagrams is represented
    by a\n                  udpEndpointLocalAddressType of unknown(0) and a\n                  udpEndpointLocalAddress
    of ''h (a zero-length\n                  octet-string).\n               2) An
    application that is willing to accept only IPv4\n                  or only IPv6
    datagrams is represented by a\n                  udpEndpointLocalAddressType of
    the appropriate\n                  address type and a udpEndpointLocalAddress
    of\n                  '0.0.0.0' or '::' respectively.\n               3) An application
    that is listening for datagrams only\n                  for a specific IP address
    but from any remote\n                  system is represented by a\n                  udpEndpointLocalAddressType
    of the appropriate\n                  address type, with udpEndpointLocalAddress\n
    \                 specifying the local address.\n               In all cases where
    the remote is a wildcard, the\n               udpEndpointRemoteAddressType is
    unknown(0), the\n               udpEndpointRemoteAddress is ''h (a zero-length\n
    \              octet-string), and the udpEndpointRemotePort is 0.\n               If
    the operating system is demultiplexing UDP packets\n               by remote address
    and port, or if the application has\n               'connected' the socket specifying
    a default remote\n               address and port, the udpEndpointRemote* values
    should\n               be used to reflect this.\"\n       ::= { udp 7 }\n   udpEndpointEntry
    OBJECT-TYPE\n       SYNTAX     UdpEndpointEntry\n       MAX-ACCESS not-accessible\n
    \      STATUS     current\n       DESCRIPTION\n              \"Information about
    a particular current UDP endpoint.\n               Implementers need to be aware
    that if the total number\n               of elements (octets or sub-identifiers)
    in\n               udpEndpointLocalAddress and udpEndpointRemoteAddress\n               exceeds
    111, then OIDs of column instances in this table\n               will have more
    than 128 sub-identifiers and cannot be\n               accessed using SNMPv1,
    SNMPv2c, or SNMPv3.\"\n       INDEX   { udpEndpointLocalAddressType,\n                 udpEndpointLocalAddress,\n
    \                udpEndpointLocalPort,\n                 udpEndpointRemoteAddressType,\n
    \                udpEndpointRemoteAddress,\n                 udpEndpointRemotePort,\n
    \                udpEndpointInstance }\n       ::= { udpEndpointTable 1 }\n   UdpEndpointEntry
    ::= SEQUENCE {\n           udpEndpointLocalAddressType   InetAddressType,\n           udpEndpointLocalAddress
    \      InetAddress,\n           udpEndpointLocalPort          InetPortNumber,\n
    \          udpEndpointRemoteAddressType  InetAddressType,\n           udpEndpointRemoteAddress
    \     InetAddress,\n           udpEndpointRemotePort         InetPortNumber,\n
    \          udpEndpointInstance           Unsigned32,\n           udpEndpointProcess
    \           Unsigned32\n       }\n   udpEndpointLocalAddressType OBJECT-TYPE\n
    \      SYNTAX     InetAddressType\n       MAX-ACCESS not-accessible\n       STATUS
    \    current\n       DESCRIPTION\n              \"The address type of udpEndpointLocalAddress.
    \ Only\n               IPv4, IPv4z, IPv6, and IPv6z addresses are expected, or\n
    \              unknown(0) if datagrams for all local IP addresses are\n               accepted.\"\n
    \      ::= { udpEndpointEntry 1 }\n   udpEndpointLocalAddress OBJECT-TYPE\n       SYNTAX
    \    InetAddress\n       MAX-ACCESS not-accessible\n       STATUS     current\n
    \      DESCRIPTION\n              \"The local IP address for this UDP endpoint.\n
    \              The value of this object can be represented in three\n               possible
    ways, depending on the characteristics of the\n               listening application:\n
    \              1. For an application that is willing to accept both\n                  IPv4
    and IPv6 datagrams, the value of this object\n                  must be ''h (a
    zero-length octet-string), with\n                  the value of the corresponding
    instance of the\n                  udpEndpointLocalAddressType object being unknown(0).\n
    \              2. For an application that is willing to accept only IPv4\n                  or
    only IPv6 datagrams, the value of this object\n                  must be '0.0.0.0'
    or '::', respectively, while the\n                  corresponding instance of
    the\n                  udpEndpointLocalAddressType object represents the\n                  appropriate
    address type.\n               3. For an application that is listening for data\n
    \                 destined only to a specific IP address, the value\n                  of
    this object is the specific IP address for which\n                  this node
    is receiving packets, with the\n                  corresponding instance of the\n
    \                 udpEndpointLocalAddressType object representing the\n                  appropriate
    address type.\n               As this object is used in the index for the\n               udpEndpointTable,
    implementors of this table should be\n               careful not to create entries
    that would result in OIDs\n               with more than 128 subidentifiers; else
    the information\n               cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\"\n
    \      ::= { udpEndpointEntry 2 }\n   udpEndpointLocalPort OBJECT-TYPE\n       SYNTAX
    \    InetPortNumber\n       MAX-ACCESS not-accessible\n       STATUS     current\n
    \      DESCRIPTION\n              \"The local port number for this UDP endpoint.\"\n
    \      ::= { udpEndpointEntry 3 }\n   udpEndpointRemoteAddressType OBJECT-TYPE\n
    \      SYNTAX     InetAddressType\n       MAX-ACCESS not-accessible\n       STATUS
    \    current\n       DESCRIPTION\n              \"The address type of udpEndpointRemoteAddress.
    \ Only\n               IPv4, IPv4z, IPv6, and IPv6z addresses are expected, or\n
    \              unknown(0) if datagrams for all remote IP addresses are\n               accepted.
    \ Also, note that some combinations of\n               udpEndpointLocalAdressType
    and\n               udpEndpointRemoteAddressType are not supported.  In\n               particular,
    if the value of this object is not\n               unknown(0), it is expected
    to always refer to the\n               same IP version as udpEndpointLocalAddressType.\"\n
    \      ::= { udpEndpointEntry 4 }\n   udpEndpointRemoteAddress OBJECT-TYPE\n       SYNTAX
    \    InetAddress\n       MAX-ACCESS not-accessible\n       STATUS     current\n
    \      DESCRIPTION\n              \"The remote IP address for this UDP endpoint.
    \ If\n               datagrams from any remote system are to be accepted,\n               this
    value is ''h (a zero-length octet-string).\n               Otherwise, it has the
    type described by\n               udpEndpointRemoteAddressType and is the address
    of the\n               remote system from which datagrams are to be accepted\n
    \              (or to which all datagrams will be sent).\n               As this
    object is used in the index for the\n               udpEndpointTable, implementors
    of this table should be\n               careful not to create entries that would
    result in OIDs\n               with more than 128 subidentifiers; else the information\n
    \              cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\"\n       ::=
    { udpEndpointEntry 5 }\n   udpEndpointRemotePort OBJECT-TYPE\n       SYNTAX     InetPortNumber\n
    \      MAX-ACCESS not-accessible\n       STATUS     current\n       DESCRIPTION\n
    \             \"The remote port number for this UDP endpoint.  If\n               datagrams
    from any remote system are to be accepted,\n               this value is zero.\"\n
    \      ::= { udpEndpointEntry 6 }\n   udpEndpointInstance OBJECT-TYPE\n       SYNTAX
    \    Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS not-accessible\n       STATUS
    \    current\n       DESCRIPTION\n              \"The instance of this tuple.
    \ This object is used to\n               distinguish among multiple processes
    'connected' to\n               the same UDP endpoint.  For example, on a system\n
    \              implementing the BSD sockets interface, this would be\n               used
    to support the SO_REUSEADDR and SO_REUSEPORT\n               socket options.\"\n
    \      ::= { udpEndpointEntry 7 }\n   udpEndpointProcess OBJECT-TYPE\n       SYNTAX
    \    Unsigned32\n       MAX-ACCESS read-only\n       STATUS     current\n       DESCRIPTION\n
    \             \"The system's process ID for the process associated with\n               this
    endpoint, or zero if there is no such process.\n               This value is expected
    to be the same as\n               HOST-RESOURCES-MIB::hrSWRunIndex or SYSAPPL-MIB::\n
    \              sysApplElmtRunIndex for some row in the appropriate\n               tables.\"\n
    \      ::= { udpEndpointEntry 8 }\n   -- The deprecated UDP Listener table\n   --
    The deprecated UDP listener table only contains information\n   -- about this
    entity's IPv4 UDP end-points on which a local\n   -- application is currently
    accepting datagrams.  It does not\n   -- provide more detailed connection information,
    or information\n   -- about IPv6 endpoints.\n   udpTable OBJECT-TYPE\n       SYNTAX
    \    SEQUENCE OF UdpEntry\n       MAX-ACCESS not-accessible\n       STATUS     deprecated\n
    \      DESCRIPTION\n              \"A table containing IPv4-specific UDP listener\n
    \              information.  It contains information about all local\n               IPv4
    UDP end-points on which an application is\n               currently accepting
    datagrams.  This table has been\n               deprecated in favor of the version
    neutral\n               udpEndpointTable.\"\n       ::= { udp 5 }\n   udpEntry
    OBJECT-TYPE\n       SYNTAX     UdpEntry\n       MAX-ACCESS not-accessible\n       STATUS
    \    deprecated\n       DESCRIPTION\n              \"Information about a particular
    current UDP listener.\"\n       INDEX   { udpLocalAddress, udpLocalPort }\n       ::=
    { udpTable 1 }\n   UdpEntry ::= SEQUENCE {\n       udpLocalAddress   IpAddress,\n
    \      udpLocalPort      Integer32\n   }\n   udpLocalAddress OBJECT-TYPE\n       SYNTAX
    \    IpAddress\n       MAX-ACCESS read-only\n       STATUS     deprecated\n       DESCRIPTION\n
    \             \"The local IP address for this UDP listener.  In the\n               case
    of a UDP listener that is willing to accept\n               datagrams for any
    IP interface associated with the\n               node, the value 0.0.0.0 is used.\"\n
    \      ::= { udpEntry 1 }\n   udpLocalPort OBJECT-TYPE\n       SYNTAX     Integer32
    (0..65535)\n       MAX-ACCESS read-only\n       STATUS     deprecated\n       DESCRIPTION\n
    \             \"The local port number for this UDP listener.\"\n       ::= { udpEntry
    2 }\n   -- conformance information\n   udpMIBConformance OBJECT IDENTIFIER ::=
    { udpMIB 2 }\n   udpMIBCompliances OBJECT IDENTIFIER ::= { udpMIBConformance 1
    }\n   udpMIBGroups      OBJECT IDENTIFIER ::= { udpMIBConformance 2 }\n   -- compliance
    statements\n   udpMIBCompliance2 MODULE-COMPLIANCE\n       STATUS     current\n
    \      DESCRIPTION\n              \"The compliance statement for systems that
    implement\n               UDP.\n               There are a number of INDEX objects
    that cannot be\n               represented in the form of OBJECT clauses in SMIv2,
    but\n               for which we have the following compliance\n               requirements,
    expressed in OBJECT clause form in this\n               description clause:\n
    \              -- OBJECT      udpEndpointLocalAddressType\n               -- SYNTAX
    \     InetAddressType { unknown(0), ipv4(1),\n               --                               ipv6(2),
    ipv4z(3),\n               --                               ipv6z(4) }\n               --
    DESCRIPTION\n               --     Support for dns(5) is not required.\n               --
    OBJECT      udpEndpointLocalAddress\n               -- SYNTAX      InetAddress
    (SIZE(0|4|8|16|20))\n               -- DESCRIPTION\n               --     Support
    is only required for zero-length\n               --     octet-strings, and for
    scoped and unscoped\n               --     IPv4 and IPv6 addresses.\n               --
    OBJECT      udpEndpointRemoteAddressType\n               -- SYNTAX      InetAddressType
    { unknown(0), ipv4(1),\n               --                               ipv6(2),
    ipv4z(3),\n               --                               ipv6z(4) }\n               --
    DESCRIPTION\n               --     Support for dns(5) is not required.\n               --
    OBJECT      udpEndpointRemoteAddress\n               -- SYNTAX      InetAddress
    (SIZE(0|4|8|16|20))\n               -- DESCRIPTION\n               --     Support
    is only required for zero-length\n               --     octet-strings, and for
    scoped and unscoped\n               --     IPv4 and IPv6 addresses.\n              \"\n
    \      MODULE  -- this module\n            MANDATORY-GROUPS { udpBaseGroup, udpEndpointGroup
    }\n            GROUP       udpHCGroup\n            DESCRIPTION\n                   \"This
    group is mandatory for systems that\n                    are capable of receiving
    or transmitting more than\n                    1 million UDP datagrams per second.
    \ 1 million\n                    datagrams per second will cause a Counter32 to\n
    \                   wrap in just over an hour.\"\n       ::= { udpMIBCompliances
    2 }\n   udpMIBCompliance MODULE-COMPLIANCE\n       STATUS     deprecated\n       DESCRIPTION\n
    \             \"The compliance statement for IPv4-only systems that\n               implement
    UDP.  For IP version independence, this\n               compliance statement is
    deprecated in favor of\n               udpMIBCompliance2.  However, agents are
    still\n               encouraged to implement these objects in order to\n               interoperate
    with the deployed base of managers.\"\n       MODULE  -- this module\n           MANDATORY-GROUPS
    { udpGroup }\n       ::= { udpMIBCompliances 1 }\n   -- units of conformance\n
    \  udpGroup OBJECT-GROUP\n       OBJECTS   { udpInDatagrams, udpNoPorts,\n                   udpInErrors,
    udpOutDatagrams,\n                   udpLocalAddress, udpLocalPort }\n       STATUS
    \    deprecated\n       DESCRIPTION\n              \"The deprecated group of objects
    providing for\n               management of UDP over IPv4.\"\n       ::= { udpMIBGroups
    1 }\n   udpBaseGroup OBJECT-GROUP\n       OBJECTS   { udpInDatagrams, udpNoPorts,
    udpInErrors,\n                   udpOutDatagrams }\n       STATUS     current\n
    \      DESCRIPTION\n              \"The group of objects providing for counters
    of UDP\n               statistics.\"\n       ::= { udpMIBGroups 2 }\n   udpHCGroup
    OBJECT-GROUP\n       OBJECTS   { udpHCInDatagrams, udpHCOutDatagrams }\n       STATUS
    \    current\n       DESCRIPTION\n              \"The group of objects providing
    for counters of high\n               speed UDP implementations.\"\n       ::=
    { udpMIBGroups 3 }\n   udpEndpointGroup OBJECT-GROUP\n       OBJECTS    { udpEndpointProcess
    }\n       STATUS     current\n       DESCRIPTION\n              \"The group of
    objects providing for the IP version\n               independent management of
    UDP 'endpoints'.\"\n       ::= { udpMIBGroups 4 }\n   END\n"
  title: 3.  Definitions
- contents:
  - "4.  Acknowledgements\n   This document contains a modified subset of RFC 1213
    and replaces\n   RFCs 2013 and 2454.  Acknowledgments are therefore due to the
    authors\n   and editors of these documents for their excellent work.\n"
  title: 4.  Acknowledgements
- contents:
  - "5.  Contributors\n   This document is an output of the IPv6 MIB revision team,
    and\n   contributors to earlier versions of this document include:\n      Bill
    Fenner, AT&T Labs -- Research\n      Email: fenner@research.at.com\n      Brian
    Haberman\n      Email: brian@innovationslab.net\n      Shawn A. Routhier, Wind
    River\n      Email: sar@epilogue.com\n      Juergen Schoenwalder, TU Braunschweig\n
    \     Email: schoenw@ibr.cs.tu-bs.de\n      Dave Thaler, Microsoft\n      Email:
    dthaler@windows.microsoft.com\n   Much of Keith McCloghrie's text from RFC1213/RFC2013
    remains in this\n   document, and the structure of the MIB is due to him.\n   Mike
    Daniele wrote the original IPv6 UDP MIB in RFC2454.\n   Juergen Schoenwalder provided
    much of the text for section 2.\n"
  title: 5.  Contributors
- contents:
  - "6.  Security Considerations\n   There are no management objects defined in this
    MIB that have a MAX-\n   ACCESS clause of read-write and/or read-create.  So,
    if this MIB is\n   implemented correctly, then there is no risk that an intruder
    can\n   alter or create any management objects of this MIB module via direct\n
    \  SNMP SET operations.\n   Some of the readable objects in this MIB module (i.e.,
    objects with a\n   MAX-ACCESS other than not-accessible) may be considered sensitive
    or\n   vulnerable in some network environments.  It is thus important to\n   control
    even GET and/or NOTIFY access to these objects and possibly\n   to even encrypt
    the values of these objects when sending them over\n   the network via SNMP.  These
    are the tables and objects and their\n   sensitivity/vulnerability:\n   The indices
    of the udpEndpointTable and udpTable contain information\n   on the listeners
    on an entity.  In particular, the\n   udpEndpointLocalPort and udpLocalPort objects
    in the indices can be\n   used to identify what ports are open on the machine
    and what attacks\n   are likely to succeed, without the attacker having to run
    a port\n   scanner.\n   SNMP versions prior to SNMPv3 did not include adequate
    security.\n   Even if the network itself is secure (for example by using IPSec),\n
    \  even then, there is no control as to who on the secure network is\n   allowed
    to access and GET/SET (read/change/create/delete) the objects\n   in this MIB
    module.\n   It is recommended that the implementors consider the security\n   features
    as provided by the SNMPv3 framework (see [RFC3410], section\n   8), including
    full support for the SNMPv3 cryptographic mechanisms\n   (for authentication and
    privacy).\n   Furthermore, deployment of SNMP versions prior to SNMPv3 is NOT\n
    \  RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable
    cryptographic security.  It is then a customer/operator\n   responsibility to
    ensure that the SNMP entity giving access to an\n   instance of this MIB module
    is properly configured to give access to\n   the objects only to those principals
    (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)
    them.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   The MIB module in this document uses the following
    IANA-assigned\n   OBJECT IDENTIFIER values, recorded in the SMI Numbers registry:\n
    \        +------------+-------------------------+\n         | Descriptor | OBJECT
    IDENTIFIER value |\n         +------------+-------------------------+\n         |
    udp        | { mib-2 7}              |\n         | udpMIB     | { mib-2 50 }            |\n
    \        +------------+-------------------------+\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\",
      STD 6, RFC 768,\n              August 1980.\n   [RFC2578]  McCloghrie, K., Perkins,
      D., and J. Schoenwaelder,\n              \"Structure of Management Information
      Version 2 (SMIv2)\",\n              STD 58, RFC 2578, April 1999.\n   [RFC2579]
      \ McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Textual
      Conventions for SMIv2\", STD 58, RFC 2579, April\n              1999.\n   [RFC2580]
      \ McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Conformance
      Statements for SMIv2\", STD 58, RFC 2580,\n              April 1999.\n   [RFC3418]
      \ Presuhn, R., \"Management Information Base (MIB) for the\n              Simple
      Network Management Protocol (SNMP)\", STD 62, RFC\n              3418, December
      2002.\n   [RFC4001]  Daniele, M., Haberman, B., Routhier, S., and J.\n              Schoenwaelder,
      \"Textual Conventions for Internet Network\n              Addresses\", RFC 4001,
      February 2005.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC1213]  McCloghrie, K. and M. Rose, \"Management
      Information Base\n              for Network Management of TCP/IP-based internets:MIB-II\",\n
      \             STD 17, RFC 1213, March 1991.\n   [RFC2013]  McCloghrie, K., \"SNMPv2
      Management Information Base for\n              the User Datagram Protocol using
      SMIv2\", RFC 2013,\n              November 1996.\n   [RFC2287]  Krupczak, C.
      and J. Saperia, \"Definitions of System-Level\n              Managed Objects
      for Applications\", RFC 2287, February\n              1998.\n   [RFC2454]  Daniele,
      M., \"IP Version 6 Management Information Base for\n              the User Datagram
      Protocol\", RFC 2454, December 1998.\n   [RFC2790]  Waldbusser, S. and P. Grillo,
      \"Host Resources MIB\", RFC\n              2790, March 2000.\n   [RFC3410]  Case,
      J., Mundy, R., Partain, D., and B. Stewart,\n              \"Introduction and
      Applicability Statements for Internet-\n              Standard Management Framework\",
      RFC 3410, December 2002.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Bill Fenner\n   AT&T Labs -- Research\n   75 Willow Rd\n
    \  Menlo Park, CA  94025\n   USA\n   EMail: fenner@research.att.com\n   John Flick\n
    \  Hewlett-Packard Company\n   8000 Foothills Blvd. M/S 5557\n   Roseville, CA
    \ 95747-5557\n   USA\n   EMail: john.flick@hp.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
