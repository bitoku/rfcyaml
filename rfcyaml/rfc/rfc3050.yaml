- title: __initial_text__
  contents:
  - '                    Common Gateway Interface for SIP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In Internet telephony, there must be a means by which new services\n\
    \   are created and deployed rapidly.  In the World Wide Web, the Common\n   Gateway\
    \ Interface (CGI) has served as popular means towards\n   programming web services.\
    \  Due to the similarities between the\n   Session Initiation Protocol (SIP) and\
    \ the Hyper Text Transfer\n   Protocol (HTTP), CGI is a good candidate for service\
    \ creation in a\n   SIP environment.  This document defines a SIP CGI interface\
    \ for\n   providing SIP services on a SIP server.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG notes that the mechanism specified here depends on the\n\
    \   Common Gateway Interface.  Should this interface change or be\n   enhanced\
    \ changes in this specification may also be necessary or\n   appropriate.  According\
    \ to the W3C, the CGI is presently maintained\n   by the NCSA Software Development\
    \ Group. See\n      http://www.w3c.org/cgi\n   for additional information on the\
    \ current state of the CGI interface.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1          Introduction .......................................\
    \   3\n   2          Motivations ........................................   4\n\
    \   3          Differences from HTTP CGI ..........................   5\n   3.1\
    \        Basic Model ........................................   6\n   3.2    \
    \    Persistence Model ..................................   8\n   3.3        SIP\
    \ CGI Triggers ...................................   9\n   3.4        Naming .............................................\
    \   9\n   3.5        Environment Variables ..............................   9\n\
    \   3.6        Timers .............................................  10\n   4\
    \          Overview of SIP CGI ................................  10\n   5    \
    \      SIP CGI Specification ..............................  12\n   5.1      \
    \  Introduction .......................................  12\n   5.1.1      Relationship\
    \ with HTTP CGI .........................  12\n   5.1.2      Conventions of This\
    \ Document .......................  12\n   5.1.3      Specifications .....................................\
    \  12\n   5.1.4      Terminology ........................................  13\n\
    \   5.2        Notational Conventions and Generic Grammar .........  13\n   5.3\
    \        Invoking the Script ................................  14\n   5.4    \
    \    The SIP CGI Script Command Line ....................  14\n   5.5        Data\
    \ Input to the SIP CGI Script ...................  14\n   5.5.1      Message Metadata\
    \ (Metavariables) ...................  14\n   5.5.1.1    AUTH_TYPE ..........................................\
    \  16\n   5.5.1.2    CONTENT_LENGTH .....................................  16\n\
    \   5.5.1.3    CONTENT_TYPE .......................................  17\n   5.5.1.4\
    \    GATEWAY_INTERFACE ..................................  17\n   5.5.1.5    Protocol-Specific\
    \ Metavariables ....................  18\n   5.5.1.6    REGISTRATIONS ......................................\
    \  18\n   5.5.1.7    REMOTE_ADDR ........................................  19\n\
    \   5.5.1.8    REMOTE_HOST ........................................  19\n   5.5.1.9\
    \    REMOTE_IDENT .......................................  19\n   5.5.1.10   REMOTE_USER\
    \ ........................................  20\n   5.5.1.11   REQUEST_METHOD .....................................\
    \  20\n   5.5.1.12   REQUEST_TOKEN ......................................  21\n\
    \   5.5.1.13   REQUEST_URI ........................................  21\n   5.5.1.14\
    \   RESPONSE_STATUS ....................................  21\n   5.5.1.15   RESPONSE_REASON\
    \ ....................................  21\n   5.5.1.16   RESPONSE_TOKEN .....................................\
    \  21\n   5.5.1.17   SCRIPT_COOKIE ......................................  22\n\
    \   5.5.1.18   SERVER_NAME ........................................  22\n   5.5.1.19\
    \   SERVER_PORT ........................................  22\n   5.5.1.20   SERVER_PROTOCOL\
    \ ....................................  22\n   5.5.1.21   SERVER_SOFTWARE ....................................\
    \  23\n   5.5.2      Message Bodies .....................................  23\n\
    \   5.6        Data Output from the SIP CGI Script ................  23\n   5.6.1\
    \      CGI Action Lines ...................................  25\n   5.6.1.1  \
    \  Status .............................................  25\n   5.6.1.2    Proxy\
    \ Request ......................................  25\n   5.6.1.3    Forward Response\
    \ ...................................  26\n   5.6.1.4    Script Cookie ......................................\
    \  26\n   5.6.1.5    CGI Again ..........................................  27\n\
    \   5.6.1.6    Default Action .....................................  27\n   5.6.2\
    \      CGI Header Fields ..................................  28\n   5.6.2.1  \
    \  Request-Token ......................................  28\n   5.6.2.2    Remove\
    \ .............................................  28\n   5.7        Local Expiration\
    \ Handling ..........................  28\n   5.8        Locally-Generated Responses\
    \ ........................  29\n   5.9        SIP CGI and REGISTER ...............................\
    \  29\n   5.10       SIP CGI and CANCEL .................................  29\n\
    \   5.11       SIP CGI and ACK ....................................  30\n   5.11.1\
    \     Receiving ACK's ....................................  30\n   5.11.2    \
    \ Sending ACK's ......................................  30\n   6          System\
    \ Specifications ..............................  30\n   6.1        Unix ...............................................\
    \  30\n   6.2        Microsoft Windows ..................................  31\n\
    \   7          Security Considerations ............................  31\n   7.1\
    \        Request Initiation .................................  31\n   7.2    \
    \    Authenticated and Encrypted Messages ...............  31\n   7.3        SIP\
    \ Header Fields Containing Sensitive Information..  32\n   7.4        Script Interference\
    \ with the Server ................  32\n   7.5        Data Length and Buffering\
    \ Considerations ...........  32\n   8          Acknowledgements ...................................\
    \  33\n   9          Authors' Addresses .................................  33\n\
    \   10         Bibliography .......................................  34\n   11\
    \         Full Copyright Statement ...........................  35\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   In Internet telephony, there must be a means by which new\
    \ services\n   are created and deployed rapidly.  In traditional telephony networks,\n\
    \   this was accomplished through IN service creation environments, which\n  \
    \ provided an interface for creating new services, often using GUI-\n   based\
    \ tools.\n   The WWW has evolved with its own set of tools for service creation.\n\
    \   Originally, web servers simply translated URLs into filenames stored\n   on\
    \ a local system, and returned the file content.  Over time, servers\n   evolved\
    \ to provide dynamic content, and forms provided a means for\n   soliciting user\
    \ input.  In essence, what evolved was a means for\n   service creation in a web\
    \ environment.  There are now many means for\n   creation of dynamic web content,\
    \ including server side JavaScript,\n   servlets, and the common gateway interface\
    \ (CGI) [1].\n   Multimedia communications, including Internet telephony, will\
    \ also\n   require a mechanism for creating services.  This mechanism is\n   strongly\
    \ tied to the features provided by the signaling protocols.\n   The Session Initiation\
    \ Protocol (SIP) [2] has been developed for\n   initiation and termination of\
    \ multimedia sessions.  SIP borrows\n   heavily from HTTP, inheriting its client-server\
    \ interaction and much\n   of its syntax and semantics.  For this reason, the\
    \ web service\n   creation environments, and CGI in particular, seem attractive\
    \ as\n   starting points for developing SIP based service creation\n   environments.\n"
- title: 2 Motivations
  contents:
  - "2 Motivations\n   CGI has a number of strengths which make it attractive as an\n\
    \   environment for creating SIP services:\n        Language independence: CGI\
    \ works with perl, C, VisualBasic, tcl,\n             and many other languages,\
    \ as long as they support access to\n             environment variables.\n   \
    \     Exposes all headers: CGI exposes the content of all the headers\n      \
    \       in an HTTP request to the CGI application.  An application\n         \
    \    can make use of these as it sees fit, and ignore those it\n             doesn't\
    \ care about.  This allows all aspects of an HTTP\n             request to be\
    \ considered for creation of content.  In a SIP\n             environment, headers\
    \ have greater importance than in HTTP.\n             They carry critical information\
    \ about the transaction,\n             including caller and callee, subject, contact\
    \ addresses,\n             organizations, extension names, registration parameters\
    \ and\n             expirations, call status, and call routes, to name a few.\n\
    \             It is therefore critical for SIP services to have as much\n    \
    \         access to these headers as possible.  For this reason, CGI\n       \
    \      is very attractive.\n        Creation of responses: CGI is advantageous\
    \ in that it can create\n             all parts of a response, including headers,\
    \ status codes\n             and reason phrases, in addition to message bodies.\
    \  This is\n             not the case for other mechanisms, such as Java servlets,\n\
    \             which are focused primarily on the body.  In a SIP\n           \
    \  environment, it is critical to be able to generate all\n             aspects\
    \ of a response (and, all aspects of new or proxied\n             requests), since\
    \ the body is usually not of central\n             importance in SIP service creation.\n\
    \        Component reuse: Many of the CGI utilities allow for easy\n         \
    \    reading of environment variables, parsing of form data, and\n           \
    \  often parsing and generation of header fields.  Since SIP\n             reuses\
    \ the basic RFC822 [3] syntax of HTTP, many of these\n             tools are applicable\
    \ to SIP CGI.\n        Familiar environment: Many web programmers are familiar\
    \ with\n             CGI.\n        Ease of extensibility: Since CGI is an interface\
    \ and not a\n             language, it becomes easy to extend and reapply to other\n\
    \             protocols, such as SIP.\n   The generality, extensibility, and detailed\
    \ control and access to\n   information provided by CGI, coupled with the range\
    \ of tools that\n   exist for it, which can be immediately applied to SIP, make\
    \ it a good\n   mechanism for SIP service creation.\n"
- title: 3 Differences from HTTP CGI
  contents:
  - "3 Differences from HTTP CGI\n   While SIP and HTTP share a basic syntax and a\
    \ request-response model,\n   there are important differences.  Proxies play a\
    \ critical role in\n   services for SIP, while they are less important for HTTP.\
    \  SIP\n   servers can fork requests (proxying multiple requests when a single\n\
    \   request is received), an important capability absent from HTTP.  SIP\n   supports\
    \ additional features, such as registrations, which are absent\n   from HTTP.\
    \  These differences are reflected in the differences\n   between SIP CGI and\
    \ HTTP CGI.  SIP CGI runs primarily on proxy,\n   redirect, and registrar servers,\
    \ rather than user agent servers\n   (which are the equivalent of origin servers\
    \ in HTTP).  SIP CGI allows\n   the script to perform specific messaging functions\
    \ not supported in\n   HTTP CGI (such as proxying requests), and SIP CGI introduces\
    \ a\n   persistence model that allow a script to maintain control through\n  \
    \ multiple message exchanges.  HTTP CGI has no persistence for scripts.\n"
- title: 3.1 Basic Model
  contents:
  - "3.1 Basic Model\n   The basic model for HTTP CGI is depicted in figure 1.\n \
    \               -----    ------------\n     ~~~~~~~~  |req  |  |  --------  |\n\
    \    |        |----------| |  http  | |\n    | client | |resp |  | | server |\
    \ |\n    |        |----------| |        | |w\n     ~~~~~~~~  |     |  |  --------\
    \  |e\n                -----   |  s|  /\\s   |b\n               net      |  t|\
    \   |t   |\n                        |e d| C |d   |s\n                        |n\
    \ i| G |o   |e\n                        |v n| I |u   |r\n                    \
    \    |   |   |t   |v\n                        |  \\/   |    |e\n             \
    \           |  -------   |r\n                        | |       |  |\n        \
    \                | |  CGI  |  |\n                        | | prog. |  |\n    \
    \                    | |       |  |\n                        |  -------   |\n\
    \                         ------------\n   Figure 1: HTTP CGI Model\n   A client\
    \ issues an HTTP request, which is passed either directly to\n   the origin server\
    \ (as shown), or is forwarded through a proxy server.\n   The origin server executes\
    \ a CGI script, and the CGI script returns a\n   response, which is passed back\
    \ to the client.  The main job of the\n   script is to generate the body for the\
    \ response.  Only origin servers\n   execute CGI scripts, not proxy servers.\n\
    \   In a SIP server, the model is different, and is depicted in Figure 2.\n  \
    \   ~~~~~~~~   req  -------   req   -------     req   ~~~~~~~~\n    |        |------|\
    \       |-------|       |---------|        |\n    | client | resp | server| resp\
    \  | server| resp    | client |\n    |        |------|       |-------|       |---------|\
    \        |\n     ~~~~~~~~        -------         -------           --------\n\
    \                      |   | CGI\n                      |   |\n              \
    \       -------\n                    |       |\n                    |  CGI  |\n\
    \                    | prog. |\n                    |       |\n              \
    \       -------\n   Figure 2: SIP CGI Model\n   The client generates a request,\
    \ which is forwarded to a server.  The\n   server may generate a response (such\
    \ as an error or redirect\n   response).  Or, if the server is a proxy server,\
    \ the request is\n   proxied to another server, and eventually to a user agent,\
    \ and the\n   response is passed back upstream, through the server, and back\n\
    \   towards the client.  A SIP proxy server may additionally fork\n   requests,\
    \ generating multiple requests in response to a received\n   request.  Generally,\
    \ a proxy server will not generate the content in\n   responses.  These contain\
    \ session descriptions created by user\n   agents.  Services, such as call forward\
    \ and mobility services, are\n   based on the decisions the server makes about\
    \ (1) when, to where, and\n   how many requests to proxy downstream, and (2) when\
    \ to send a\n   response back upstream.  Creation of services such as ad-hoc bridging\n\
    \   (where the server acts as a media mixer in a multiparty call, without\n  \
    \ being asked to do so by the end users) will require the server to\n   generate\
    \ new requests of its own, and for it to modify and generate\n   the body in responses.\n\
    \   An HTTP server is mainly concerned about generation of responses.  A\n   SIP\
    \ server is generally concerned about performing four basic\n   operations:\n\
    \        Proxying of Requests: Receiving a request, adding or modifying\n    \
    \         any of the headers, deciding on a set of servers to forward\n      \
    \       the request to, and forwarding it to them.\n        Returning Responses:\
    \ Receiving a response, adding or modifying\n             any of the headers,\
    \ and passing the response towards the\n             client.\n        Generating\
    \ Requests: Creating a new request, originating at the\n             server, placing\
    \ headers and a body into the message, and\n             sending it to a server.\n\
    \        Generation of Responses: Receiving a request, generating a\n        \
    \     response to it, and sending it back to the client.\n   When a request is\
    \ received, one or more of the above operations may\n   occur at once.  For example,\
    \ a SIP server may generate a provisional\n   response, generate a new request,\
    \ and proxy the original request to\n   two servers.  This implies that SIP CGI\
    \ must encompass a greater set\n   of functions than HTTP CGI.  These functions\
    \ are a super-set of the\n   simple end-server request/response model.\n"
- title: 3.2 Persistence Model
  contents:
  - "3.2 Persistence Model\n   In HTTP CGI, a script is executed once for each request.\
    \  It\n   generates the response, and then terminates.  There is no state\n  \
    \ maintained across requests from the same user, as a general rule\n   (although\
    \ this can be done -- and is -- for more complex services\n   such as database\
    \ accesses, which essentially encapsulate state in\n   client-side cookies or\
    \ dynamically-generated URLs).  A transaction is\n   just a single request, and\
    \ a response.\n   In SIP CGI, since a request can generate many new and proxied\n\
    \   requests, these themselves will generate responses.  A service will\n   often\
    \ require these responses to be processed, and additional\n   requests or responses\
    \ to be generated.  As a result, whereas an HTTP\n   CGI script executes once\
    \ per transaction, a SIP CGI script must\n   maintain control somehow over numerous\
    \ events.\n   In order to enable this, and to stay with the original CGI model,\
    \ we\n   mandate that a SIP CGI script executes when a message arrives, and\n\
    \   after generating output (in the form of additional messages),\n   terminate.\
    \  State is maintained by allowing the CGI to return an\n   opaque token to the\
    \ server.  When the CGI script is called again for\n   the same transaction, this\
    \ token is passed back to the CGI script.\n   When called for a new transaction,\
    \ no token is passed.\n   For example, consider a request which arrives at a SIP\
    \ server.  The\n   server calls a CGI script, which generates a provisional response\
    \ and\n   a proxied request.  It also returns a token to the server, and then\n\
    \   terminates.  The response is returned upstream towards the client,\n   and\
    \ the request is proxied.  When the response to the proxied request\n   arrives,\
    \ the script is executed again.  The environment variables are\n   set based on\
    \ the content of the new response.  The script is also\n   passed back the token.\
    \  Using the token as its state, the script\n   decides to proxy the request to\
    \ a different location.  It therefore\n   returns a proxied request, and another\
    \ token.  The server forwards\n   this new request, and when the response comes,\
    \ calls the CGI script\n   once more, and passes back the token.  This time, the\
    \ script\n   generates a final response, and passes this back to the server. \
    \ The\n   server sends the response to the client, destroys the token, and the\n\
    \   transaction is complete.\n"
- title: 3.3 SIP CGI Triggers
  contents:
  - "3.3 SIP CGI Triggers\n   In many cases, calling the CGI script on the reception\
    \ of every\n   message is inefficient.  CGI scripts come at the cost of significant\n\
    \   overhead since they generally require creation of a new process.\n   Therefore,\
    \ it is important in SIP CGI for a script to indicate, after\n   it is called\
    \ the first time, under what conditions it will be called\n   for the remainder\
    \ of the transaction.  If the script is not called,\n   the server will take the\
    \ \"default\" action, as specified in this\n   document.  This allows an application\
    \ designer to trade off\n   flexibility for computational resources.  Making an\
    \ analogy to the\n   Intelligent Network (IN) - a script is able to define the\
    \ triggers\n   for its future execution.\n   So, in summary, whereas an HTTP CGI\
    \ script executes once during a\n   transaction, a single SIP CGI script may execute\
    \ many times during a\n   transaction, and may specify at which points it would\
    \ like to have\n   control for the remainder of the transaction.\n"
- title: 3.4 Naming
  contents:
  - "3.4 Naming\n   In HTTP CGI, the CGI script itself is generally the resource named\
    \ in\n   the request URI of the HTTP request.  This is not so in SIP.  In\n  \
    \ general, the request URI names a user to be called.  The mapping to a\n   script\
    \ to be executed may depend on other SIP headers, including To\n   and From fields,\
    \ the SIP method, status codes, and reason phrases.\n   As such, the mapping of\
    \ a message to a CGI script is purely a matter\n   of local policy administration\
    \ at a server.  A server may have a\n   single script which always executes, or\
    \ it may have multiple scripts,\n   and the target is selected by some parts of\
    \ the header.\n"
- title: 3.5 Environment Variables
  contents:
  - "3.5 Environment Variables\n   In HTTP CGI, environment variables are set with\
    \ the values of the\n   paths and other aspects of the request.  As there is no\
    \ notion of a\n   path in SIP, some of these environment variables do not make\
    \ sense.\n"
- title: 3.6 Timers
  contents:
  - "3.6 Timers\n   In SIP, certain services require that the script gets called not\
    \ only\n   when a message arrives, but when some timer expires.  The classic\n\
    \   example of this is \"call forward no answer.\" To be implemented with\n  \
    \ SIP CGI, the first time the script is executed, it must generate a\n   proxied\
    \ request, and also indicate a time at which to be called again\n   if no response\
    \ comes.  This kind of feature is not present in HTTP\n   CGI, and some rudimentary\
    \ support for it is needed in SIP CGI.\n"
- title: 4 Overview of SIP CGI
  contents:
  - "4 Overview of SIP CGI\n   When a request arrives at a SIP server, initiating\
    \ a new transaction,\n   the server will set a number of environment variables,\
    \ and call a CGI\n   script.  The script is passed the body of the request through\
    \ stdin.\n   The script returns, on stdout, a set of SIP action lines, each of\n\
    \   which may be modified by CGI and/or SIP headers.  This set is\n   delimited\
    \ through the use of two carriage returns.  The action lines\n   allow the script\
    \ to specify any of the four operations defined above,\n   in addition to the\
    \ default operation.  Generating a response is done\n   by copying the the status\
    \ line of the response into an action line of\n   the CGI output.  For example,\
    \ the following will create a 200 OK to\n   the original request:\n   SIP/2.0\
    \ 200 OK\n   The operation of proxying a request is supported by the CGI-PROXY-\n\
    \   REQUEST CGI action, which takes the URL to proxy to as an argument.\n   For\
    \ example, to proxy a request to dante@inferno.com:\n   CGI-PROXY-REQUEST sip:dante@inferno.com\
    \ SIP/2.0\n   Contact: sip:server1@company.com\n   In this example, the server\
    \ will take the original request, and\n   modify any header fields normally changed\
    \ during the proxy operation\n   (such as decrementing Max-Forwards, and adding\
    \ a Via field).  This\n   message is then \"merged\" with the output of the CGI\
    \ script - SIP\n   headers specified below the action line in the CGI output will\
    \ be\n   added to the outbound request.  In the above example, the Contact\n \
    \  header will be added.  Note that the action line looks like the\n   request\
    \ line of a SIP request message.  This is done in order to\n   simplify parsing.\n\
    \   To delete headers from the outgoing request, the merge process also\n   supports\
    \ the CGI header CGI-Remove.  Like SIP headers, CGI headers\n   are written underneath\
    \ the action line.  They are extracted by the\n   SIP server, and used to provide\
    \ the server with additional guidance.\n   CGI headers always begin with CGI to\
    \ differentiate them from SIP\n   headers.  In this case, the supported values\
    \ for the CGI-Remove\n   header are the names of headers in the original message.\n\
    \   Returning of responses is more complex.  A server may receive\n   multiple\
    \ responses as the result of forking a request.  The script\n   should be able\
    \ to ask the server to return any of the responses it\n   had received previously.\
    \  To support this, the server will pass an\n   opaque token to the script through\
    \ environment variables, unique for\n   each response received.  To return a response,\
    \ a CGI script needs to\n   indicate which response is to be returned.  For example,\
    \ to return a\n   response named with the token abcdefghij, the following output\
    \ is\n   generated:\n   CGI-FORWARD-RESPONSE abcdefghij SIP/2.0\n   Finally, if\
    \ the script does not output any of the above actions, the\n   server does what\
    \ it would normally do upon receiving the message that\n   triggered the script.\n\
    \   A SIP CGI script is normally only executed when the original request\n   arrives.\
    \  If the script also wants to be called for subsequent\n   messages in a transaction\
    \ -- due to responses to proxied requests, or\n   (in certain circumstances) ACK\
    \ and CANCEL requests, it can perform\n   the CGI-AGAIN action:\n   CGI-AGAIN\
    \ yes SIP/2.0\n   This action applies only to the next invocation of the script;\
    \ it\n   means to invoke the script one more time.  Outputting \"no\" is\n   identical\
    \ to outputting \"yes\" on this invocation of the script and\n   outputting nothing\
    \ the next time the script is called.\n   When the script is re-executed, it may\
    \ need access to some state in\n   order to continue processing.  A script can\
    \ generate one piece of\n   state, called a cookie, for any new request or proxied\
    \ request.  It\n   is passed to the server through the CGI-SET-COOKIE action.\
    \  The\n   action contains a token, which is the cookie itself.  The server does\n\
    \   not examine or parse the cookie.  It is simply stored.  When the\n   script\
    \ is re-executed, the cookie is passed back to the script\n   through an environment\
    \ variable.\n   CGI-SET-COOKIE khsihppii8asdl SIP/2.0\n   Finally, when the script\
    \ causes the server to proxy a request,\n   responses to these requests will arrive.\
    \  To ease matching of\n   responses to requests, the script can place a request\
    \ token in the\n   CGI CGI-Request-Token header.  This header is removed by the\
    \ server\n   when the request is proxied.  Any responses received to this request\n\
    \   will have the token passed in an environment variable.\n"
- title: 5 SIP CGI Specification
  contents:
  - '5 SIP CGI Specification

    '
- title: 5.1 Introduction
  contents:
  - '5.1 Introduction

    '
- title: 5.1.1 Relationship with HTTP CGI
  contents:
  - "5.1.1 Relationship with HTTP CGI\n   This SIP CGI specification is based on work-in-progress\
    \ revision 1.1\n   of the HTTP CGI specification [1].  That document is a product\
    \ of the\n   CGI-WG mailing list, which is not an official IETF working group.\n\
    \   CGI-WG's homepage is located at the URL\n   http://Web.Golux.Com/coar/cgi/,\
    \ and the most recent versions of the\n   CGI specification are available there.\
    \  This specification\n   incorporates a great deal of text from the work-in-progress\
    \ version\n   of that document as of February 23, 2000.  A future version of this\n\
    \   specification may be changed to cite parts of that document by\n   reference\
    \ instead.\n"
- title: 5.1.2 Conventions of This Document
  contents:
  - "5.1.2 Conventions of This Document\n   In this document, the key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are to be interpreted\
    \ as described in RFC 2119 [4] and\n   indicate requirement levels for compliant\
    \ SIP CGI implementations.\n        Some paragraphs are indented, like this; they\
    \ give\n        motivations of design choices, or questions for future\n     \
    \   discussion in the development of SIP CGI.  They are not\n        normative\
    \ to the specification of the protocol.\n"
- title: 5.1.3 Specifications
  contents:
  - "5.1.3 Specifications\n   Not all of the functions and features of SIP CGI are\
    \ defined in the\n   main part of this specification.  The following phrases are\
    \ used to\n   describe the features which are not specified:\n         System-defined:\
    \ The feature may differ between systems, but\n               must be the same\
    \ for different implementations using the\n               same system.  A system\
    \ will usually identify a class of\n               operating systems.  Some systems\
    \ are defined in section 6\n               of this document.  New systems may\
    \ be defined by new\n               specifications without revision of this document.\n\
    \         Implementation-defined: The behavior of the feature may vary\n     \
    \          from implementation to implementation, but a particular\n         \
    \      implementation should be consistent in its behavior.\n"
- title: 5.1.4 Terminology
  contents:
  - "5.1.4 Terminology\n   This specification uses many terms defined in the SIP/2.0\n\
    \   specification [2]; however, the following terms are used here in a\n   sense\
    \ which may not accord with their definitions in that document,\n   or with their\
    \ common meaning.\n         metavariable: A named parameter that carries information\
    \ from\n               the server to the script.  It is not necessarily a\n  \
    \             variable in the operating system's environment, although\n     \
    \          that is the most common implementation.\n         script: The software\
    \ which is invoked by the server via this\n               interface.  It need\
    \ not be a standalone program, but\n               could be a dynamically-loaded\
    \ or shared library, or even\n               a subroutine in the server.  It may\
    \ be a set of\n               statements interpreted at run-time, as the term\
    \ `script'\n               is frequently understood, but that is not a requirement\n\
    \               and within the context of this specification the term has\n  \
    \             the broader definition stated.\n         server: The application\
    \ program which invokes the script in\n               order to service messages.\n\
    \         message: A SIP request or response, typically either the one\n     \
    \          that triggered the invocation of the CGI script, or one\n         \
    \      that the CGI script caused to be sent.\n"
- title: 5.2 Notational Conventions and Generic Grammar
  contents:
  - "5.2 Notational Conventions and Generic Grammar\n   In this specification we use\
    \ the Augmented Backus-Naur Form notation\n   as described in appendix C of the\
    \ SIP/2.0 specification, RFC 2543\n   [2].\n   The following grammatical constructs\
    \ are taken from other documents;\n   this table lists the appropriate sources.\n\
    \        OCTET          SIP/2.0 [2] Appendix C.1\n        CHAR           SIP/2.0\
    \ [2] Appendix C.1\n        digit          SIP/2.0 [2] Appendix C.1\n        alphanum\
    \       SIP/2.0 [2] Appendix C.1\n        token          SIP/2.0 [2] Appendix\
    \ C.1\n        hostname       SIP/2.0 [2] Section 2\n        SIP-URL        SIP/2.0\
    \ [2] Section 2\n        SIP-Version    SIP/2.0 [2] Section 4.3.1\n        Status-Code\
    \    SIP/2.0 [2] Section 5.1.1\n        Reason-Phrase  SIP/2.0 [2] Section 5.1.1\n\
    \        media-type     HTTP/1.1 [5] Section 3.7\n                       (via\
    \ SIP/2.0 [2] Section 6.16)\n        field-name     SIP/2.0 [2] Section 6.6\n\
    \   Other grammatical constructs taken from outside sources are noted in\n   the\
    \ text.\n"
- title: 5.3 Invoking the Script
  contents:
  - "5.3 Invoking the Script\n   The script is invoked in a system-defined manner.\
    \  Unless specified\n   otherwise, the file containing the script will be invoked\
    \ as an\n   executable program.\n   Only one CGI script at a time may be outstanding\
    \ for a SIP\n   transaction.  If subsequently arriving responses would cause a\
    \ CGI\n   script to be invoked, handling of them is deferred, except for ACK,\n\
    \   until CGI scripts for previous messages in the transaction terminate.\n  \
    \ Messages are processed in the order they are received.\n"
- title: 5.4 The SIP CGI Script Command Line
  contents:
  - "5.4 The SIP CGI Script Command Line\n   The server SHOULD NOT provide any command\
    \ line arguments to the\n   script.\n        Command line arguments are used for\
    \ indexed queries in HTTP\n        CGI; HTTP indexed queries do not have an equivalent\
    \ in SIP.\n"
- title: 5.5 Data Input to the SIP CGI Script
  contents:
  - "5.5 Data Input to the SIP CGI Script\n   Information about a message comes from\
    \ two different sources: the\n   message header, and any associated content-body.\
    \  Servers MUST make\n   portions of this information available to scripts.\n"
- title: 5.5.1 Message Metadata (Metavariables)
  contents:
  - "5.5.1 Message Metadata (Metavariables)\n   Each SIP CGI server implementation\
    \ MUST define a mechanism to pass\n   data about the message from the server to\
    \ the script.  The\n   metavariables containing these data are accessed by the\
    \ script in a\n   system-defined manner.  The representation of the characters\
    \ in the\n   metavariables is system-defined.\n   The representation of metavariables\
    \ MUST distinguish between\n   undefined values (which are not present) and null\
    \ values (which are\n   present, but have zero length).  Null values are only\
    \ allowed for\n   those metavariables whose grammar permits this.\n        For\
    \ historical reasons, HTTP CGI does not distinguish\n        between null values\
    \ and undefined values.  This\n        specification eliminates this misfeature;\
    \ null values and\n        undefined values are semantically different.\n   Case\
    \ is not significant in the metavariable names, in that there\n   cannot be two\
    \ different variables whose names differ in case only.\n   Here they are shown\
    \ using a canonical representation of capitals plus\n   underscore (\"_\").  The\
    \ actual representation of the names is system\n   defined; for a particular system\
    \ the representation MAY be defined\n   differently than this.\n   Metavariable\
    \ values MUST be considered case-sensitive except as noted\n   otherwise.\n  \
    \ The canonical metavariables defined by this specification are:\n       AUTH_TYPE\n\
    \       CONTENT_LENGTH\n       CONTENT_TYPE\n       GATEWAY_INTERFACE\n      \
    \ REMOTE_ADDR\n       REMOTE_HOST\n       REMOTE_IDENT\n       REMOTE_USER\n \
    \      REGISTRATIONS\n       REQUEST_METHOD\n       REQUEST_TOKEN\n       REQUEST_URI\n\
    \       RESPONSE_STATUS\n       RESPONSE_REASON\n       RESPONSE_TOKEN\n     \
    \  SCRIPT_COOKIE\n       SERVER_NAME\n       SERVER_PORT\n       SERVER_PROTOCOL\n\
    \       SERVER_SOFTWARE\n   Metavariables with names beginning with the protocol\
    \ name (e.g.,\n   \"SIP_ACCEPT\") are also canonical in their description of message\n\
    \   header fields.  The number and meaning of these fields may change\n   independently\
    \ of this specification.  (See also section 5.5.1.5.)\n   A server MAY also specify\
    \ additional non-canonical metavariables.\n"
- title: 5.5.1.1 AUTH_TYPE
  contents:
  - "5.5.1.1 AUTH_TYPE\n   If the target of the message required access authentication\
    \ for\n   external access, then the server MUST set the value of this variable\n\
    \   from the auth-scheme token in the message's Authorization header\n   field.\
    \  Otherwise it is not defined.\n        AUTH_TYPE    =  \"\" | auth-scheme\n\
    \        auth-scheme  =  \"Basic\" | \"Digest\" | \"PGP\" | token\n   SIP access\
    \ authentication schemes are described in sections 14 and 15\n   of the SIP/2.0\
    \ specification [2].  The auth-scheme is not case-\n   sensitive.\n   Servers\
    \ MUST provide this metavariable to scripts if the message\n   header included\
    \ an Authorization field that was authenticated.\n   For the complex authentication\
    \ schemes, the server SHOULD perform the\n   authentication checking itself. \
    \ If the authentication failed, this\n   metavariable SHOULD NOT be set.\n   If\
    \ several authentication credentials, with multiple schemes, are\n   present in\
    \ the message, this variable SHOULD be set to correspond to\n   the authenticated\
    \ credentials with the strongest scheme the server\n   supports.  If credentials\
    \ are present for several domains, the server\n   SHOULD NOT perform any action\
    \ on credentials from domains external to\n   it.\n   If both Authorization and\
    \ Proxy-Authorization headers are present,\n   the server SHOULD perform the authorizations\
    \ based on the appropriate\n   header for the context in which it is running.\
    \  For example, a server\n   which is a proxy server and a registrar would use\
    \ Authorization\n   headers for REGISTER messages aimed at its local domains,\
    \ and Proxy-\n   Authorization headers for all other messages.\n"
- title: 5.5.1.2 CONTENT_LENGTH
  contents:
  - "5.5.1.2 CONTENT_LENGTH\n   This metavariable is set to the size of the message-body\
    \ entity\n   attached to the message, if any, in decimal number of octets.  If\
    \ no\n   data are attached, then this metavariable is not defined.  The syntax\n\
    \   is the same as for the SIP Content-Length header field (section 6.15,\n  \
    \ SIP/2.0 specification [2]).\n        CONTENT_LENGTH  =  \"\" | 1*digit\n   Servers\
    \ MUST provide this metavariable to scripts if the message was\n   a accompanied\
    \ by a content-body entity, even if the message did not\n   include a Content-Length\
    \ header field.\n"
- title: 5.5.1.3 CONTENT_TYPE
  contents:
  - "5.5.1.3 CONTENT_TYPE\n   If the message includes a message-body, CONTENT_TYPE\
    \ is set to the\n   Internet Media Type [6] of the attached entity if the type\
    \ was\n   provided via a Content-type field in the message header, or if the\n\
    \   server can determine it in the absence of a supplied Content-type\n   field.\
    \  The syntax is the same as for the SIP Content-Type header\n   field.\n    \
    \    CONTENT_TYPE  =  \"\" | media-type\n   The type, subtype, and parameter attribute\
    \ names are not case-\n   sensitive.  Parameter values MAY be case sensitive.\
    \  Media types and\n   their use in SIP are described in section 6.16 of the SIP/2.0\n\
    \   specification [2], and by reference in section 3.7 of the HTTP/1.1\n   specification\
    \ [5].\n   Since in SIP the Content-Type header MUST be specified if a body is\n\
    \   present, servers MUST provide this metavariable to scripts if a body\n   was\
    \ present in the original message, unless the \"body\" is actually an\n   encrypted\
    \ payload.\n"
- title: 5.5.1.4 GATEWAY_INTERFACE
  contents:
  - "5.5.1.4 GATEWAY_INTERFACE\n   This metavariable is set to the dialect of SIP\
    \ CGI being used by the\n   server to communicate with the script.  Syntax:\n\
    \        GATEWAY_INTERFACE  =  \"SIP-CGI\" \"/\" major \".\" minor\n        major\
    \              =  1*digit\n        minor              =  1*digit\n   Note that\
    \ the major and minor numbers are treated as separate\n   integers and hence each\
    \ may be more than a single digit.  Thus SIP-\n   CGI/2.4 is a lower version than\
    \ SIP-CGI/2.13 which in turn is lower\n   than SIP-CGI/12.3.  Leading zeros in\
    \ either the major or the minor\n   number MUST be ignored by scripts and SHOULD\
    \ NOT be generated by\n   servers.\n   This document defines the 1.1 version of\
    \ the SIP CGI interface\n   (\"SIP-CGI/1.1\").\n   Servers MUST provide this metavariable\
    \ to scripts.\n        For maximal compatibility with existing HTTP CGI libraries,\n\
    \        we want to keep this as similar as possible to the syntax\n        of\
    \ CGI 1.1.  However, we do want it to be clear that this is\n        indeed SIP\
    \ CGI.  Making HTTP CGI's version identifier a\n        substring of the SIP CGI\
    \ identifier seemed like a\n        reasonable compromise. (The existing CGI libraries\
    \ we\n        checked do not seem to check the version.)\n"
- title: 5.5.1.5 Protocol-Specific Metavariables
  contents:
  - "5.5.1.5 Protocol-Specific Metavariables\n   These metavariables are specific\
    \ to the protocol via which the method\n   is sent.  Interpretation of these variables\
    \ depends on the value of\n   the SERVER_PROTOCOL metavariable (see section 5.5.1.20).\n\
    \   Metavariables with names beginning with \"SIP_\" contain values from\n   the\
    \ message header, if the protocol used was SIP.  Each SIP header\n   field name\
    \ is converted to upper case, has all occurrences of \"-\"\n   replaced with \"\
    _\", and has \"SIP_\" prepended to form the metavariable\n   name.  Similar transformations\
    \ are applied for other protocols.  The\n   header data MAY be presented as sent\
    \ by the client, or MAY be\n   rewritten in ways which do not change its semantics.\
    \  If multiple\n   header fields with the same field-name are received then the\
    \ server\n   MUST rewrite them as though they had been received as a single header\n\
    \   field having the same semantics before being represented in a\n   metavariable.\
    \  Similarly, a header field that is received on more\n   than one line MUST be\
    \ merged into a single line.  The server MUST, if\n   necessary, change the representation\
    \ of the data (for example, the\n   character set) to be appropriate for a CGI\
    \ metavariable.\n        Note: these metavariables' names were changed from HTTP_*\n\
    \        to SIP_* since the first draft of this specification.  The\n        intention\
    \ had been to make it easier to use existing CGI\n        libraries unmodified,\
    \ but this convenience was felt to be\n        outweighed by the confusion this\
    \ introduced.\n   Servers are not required to create metavariables for all the\
    \ message\n   header fields they receive.  However, because of the relatively\
    \ high\n   importance of headers in SIP for messages' semantic content, the\n\
    \   server SHOULD provide all headers which do not contain potentially\n   sensitive\
    \ authorization information, such as Authorization.  Servers\n   SHOULD provide\
    \ protocol-specific metavariables even for information\n   which is available\
    \ through other SIP CGI metavariables, such as\n   CONTENT_LENGTH and CONTENT_TYPE.\n\
    \        This allows a SIP CGI script to determine, if necessary,\n        whether\
    \ the information in the other metavariables was in\n        the original message,\
    \ or was synthesized by the server.\n"
- title: 5.5.1.6 REGISTRATIONS
  contents:
  - "5.5.1.6 REGISTRATIONS\n   This metavariable contains a list the current locations\
    \ the server\n   has registered for the user in the Request-URI of the initial\
    \ request\n   of a transaction.  It is syntactically identical to the protocol\n\
    \   metavariable SIP_CONTACT, and thus is defined by section 5.5.1.5 of\n   this\
    \ document and by section 6.13 of the SIP/2.0 specification [2].\n   It contains\
    \ all the uris, uri parameters, display names, and contact\n   parameters for\
    \ the addresses registered with the server.\n        The syntax of REGISTRATIONS\
    \ is identical to how SIP_CONTACT\n        would appear in a 302 response from\
    \ a redirection server.\n        This allows parsing code to be re-used.\n   If\
    \ a user's registrations change in the course of a transaction, the\n   server\
    \ SHOULD update this metavariable accordingly for subsequent\n   script invocations\
    \ for the transaction.\n"
- title: 5.5.1.7 REMOTE_ADDR
  contents:
  - "5.5.1.7 REMOTE_ADDR\n   The IP address of the client that sent the message to\
    \ the server.\n   This is not necessarily that of the originating user agent client\
    \ or\n   server.\n        REMOTE_ADDR  =  hostnumber\n        hostnumber   = \
    \ IPv4address | IPv6address\n   The definitions of IPv4address and Ipv6address\
    \ are provided in\n   Appendix B of RFC 2373 [7].\n   For locally-generated responses\
    \ (see section 5.8), this SHOULD be the\n   loopback address (i.e., 127.0.0.1\
    \ for IPv4 or ::1 for IPv6).\n   Servers MUST supply this value to scripts.\n"
- title: 5.5.1.8 REMOTE_HOST
  contents:
  - "5.5.1.8 REMOTE_HOST\n   This is the fully qualified domain name of the host sending\
    \ the\n   message to this server, if available, otherwise not defined.  (See\n\
    \   section 5.5.1.7).  Domain names are not case sensitive.\n        REMOTE_HOST\
    \  =  hostname\n   Servers SHOULD provide this information to scripts.\n"
- title: 5.5.1.9 REMOTE_IDENT
  contents:
  - "5.5.1.9 REMOTE_IDENT\n   The identity information supported about the connection\
    \ by a RFC 1413\n   [8] request, if available.\n        REMOTE_IDENT  =  *CHAR\n\
    \   The server MAY choose not to support this feature, and it is\n   anticipated\
    \ that not many implementations will, as the information is\n   not particularly\
    \ useful in the presence of complex proxy paths.\n"
- title: 5.5.1.10 REMOTE_USER
  contents:
  - "5.5.1.10 REMOTE_USER\n   If the message requested authentication (i.e., the AUTH_TYPE\n\
    \   metavariable is set), then the value of the REMOTE_USER metavariable\n   is\
    \ set to the user-ID supplied for the authentication.  For Basic\n   authentication\
    \ this is the content of the (decoded) \"userid\" grammar\n   element; for Digest\
    \ it is content of \"username-value.\" For PGP\n   authentication, it is the URI\
    \ specified in the \"signed-by\" parameter\n   of the Authorization header, if\
    \ present, otherwise the URI part of\n   the From header.\n   If some other authentication\
    \ scheme was requested, this metavariable\n   SHOULD be set to an appropriate\
    \ component of the authorization\n   information identifying the user or entity\
    \ associated with the\n   credentials.  If authentication was not requested, this\
    \ metavariable\n   is not defined.\n        REMOTE_USER  =  *OCTET\n   Servers\
    \ SHOULD provide this metavariable to scripts.\n"
- title: 5.5.1.11 REQUEST_METHOD
  contents:
  - "5.5.1.11 REQUEST_METHOD\n   If the message triggering the script was a request,\
    \ the\n   REQUEST_METHOD metavariable is set to the method with which the\n  \
    \ request was made, as described in section 4.2 of the SIP/2.0\n   specification\
    \ [2]; otherwise not defined.\n        REQUEST_METHOD    =  sip-method\n     \
    \   sip-method        =  \"INVITE\" | \"BYE\" | \"OPTIONS\" | \"CANCEL\"\n   \
    \                          | \"REGISTER\" | \"ACK\"\n                        \
    \     | extension-method\n        extension-method  =  token\n   Note that ACK\
    \ is usually not appropriate for the SIP CGI 1.1\n   environment; however, see\
    \ section 5.11.  The implications of REGISTER\n   in the CGI context are discussed\
    \ in section 5.9, and CANCEL is\n   discussed in section 5.10.  A SIP CGI 1.1\
    \ server MAY choose to\n   process some methods directly rather than passing them\
    \ to scripts.\n   Servers MUST provide this metavariable to scripts if the triggering\n\
    \   message was a request.\n"
- title: 5.5.1.12 REQUEST_TOKEN
  contents:
  - "5.5.1.12 REQUEST_TOKEN\n        REQUEST_TOKEN  =  token\n   If the script specified\
    \ a request token in a proxied request, this\n   token is returned to the server\
    \ in responses to that request.  Note\n   that this token is chosen by the script,\
    \ not by the server.  Each\n   response to a proxied request contains the same\
    \ value for this token.\n"
- title: 5.5.1.13 REQUEST_URI
  contents:
  - "5.5.1.13 REQUEST_URI\n   This metavariable is specific to requests made with\
    \ SIP.\n        REQUEST_URI  =  absoluteURI  ; defined in RFC 2396 [9]\n   If\
    \ the message triggering the script was a request, this variable\n   indicates\
    \ the URI specified with the request method.  This\n   metavariable is only defined\
    \ if REQUEST_METHOD is defined; in that\n   case, servers MUST provide it to scripts.\n\
    \        This metavariable fills the roles of HTTP CGI's\n        SCRIPT_NAME,\
    \ PATH_INFO, and QUERY_STRING.\n"
- title: 5.5.1.14 RESPONSE_STATUS
  contents:
  - "5.5.1.14 RESPONSE_STATUS\n        RESPONSE_STATUS  =  Status-Code\n   If the\
    \ message triggering the script was a response, this variable\n   indicates the\
    \ numeric code specified in the response; otherwise it is\n   not defined.  In\
    \ the former case, servers MUST provide this\n   metavariable to scripts.\n"
- title: 5.5.1.15 RESPONSE_REASON
  contents:
  - "5.5.1.15 RESPONSE_REASON\n        RESPONSE_REASON  =  Reason-Phrase\n   If the\
    \ message triggering the script was a response, this variable\n   indicates the\
    \ textual string specified in the response.\n"
- title: 5.5.1.16 RESPONSE_TOKEN
  contents:
  - "5.5.1.16 RESPONSE_TOKEN\n        RESPONSE_TOKEN  =  token\n   If the message\
    \ triggering the script was a response, the server MUST\n   specify a token which\
    \ subsequent invocations of the CGI script can\n   use to identify this response.\
    \  This string is chosen by the server\n   and is opaque to the CGI script.  See\
    \ the discussion of CGI-FORWARD-\n   RESPONSE in section 5.6.1 below.\n"
- title: 5.5.1.17 SCRIPT_COOKIE
  contents:
  - "5.5.1.17 SCRIPT_COOKIE\n        SCRIPT_COOKIE  =  token\n   This is the value\
    \ an earlier invocation of this script for this\n   transaction passed to the\
    \ server in CGI action line CGI-SET-COOKIE.\n   See the description of that action\
    \ in section 5.6.1.4 below.\n"
- title: 5.5.1.18 SERVER_NAME
  contents:
  - "5.5.1.18 SERVER_NAME\n   The SERVER_NAME metavariable is set to the name of the\
    \ server.\n        SERVER_NAME  =  hostname | hostnumber\n   Servers MUST provide\
    \ this metavariable to scripts.\n"
- title: 5.5.1.19 SERVER_PORT
  contents:
  - "5.5.1.19 SERVER_PORT\n   The SERVER_PORT metavariable is set to the port on which\
    \ the message\n   was received.\n        SERVER_PORT  =  1*digit\n   Servers MUST\
    \ provide this metavariable to scripts.\n"
- title: 5.5.1.20 SERVER_PROTOCOL
  contents:
  - "5.5.1.20 SERVER_PROTOCOL\n   The SERVER_PROTOCOL metavariable is set to the name\
    \ and revision of\n   the protocol with which the message arrived.  This will\
    \ usually be\n   \"SIP/2.0\".  This is not necessarily the same as the protocol\
    \ version\n   used by the server in its response to the client.\n        SERVER_PROTOCOL\
    \    =  SIP-Version | extension-version\n                              | extension-token\n\
    \        extension-version  =  protocol \"/\" 1*digit \".\" 1*digit\n        protocol\
    \           =  1*( alphanum | \"+\" | \"-\" | \".\" )\n        extension-token\
    \    =  token\n   Servers MUST provide this metavariable to scripts.\n"
- title: 5.5.1.21 SERVER_SOFTWARE
  contents:
  - "5.5.1.21 SERVER_SOFTWARE\n   The SERVER_SOFTWARE metavariable is set to the name\
    \ and version of\n   the information server software handling the message (and\
    \ running the\n   gateway).\n        SERVER_SOFTWARE  =  1*product\n        product\
    \          =  token [ \"/\" product-version ]\n        product-version  =  token\n\
    \   Servers MUST provide this metavariable to scripts.\n"
- title: 5.5.2 Message Bodies
  contents:
  - "5.5.2 Message Bodies\n   As there may be a data entity attached to the message,\
    \ there MUST be\n   a system-defined method for the script to read these data.\
    \  Unless\n   defined otherwise, this will be via the `standard input' file\n\
    \   descriptor.\n   If the metavariable CONTENT_LENGTH (see section 5.5.1.2) is\
    \ defined,\n   the server MUST supply at least that many bytes to scripts on the\n\
    \   standard input stream.  Scripts are not obliged to read the data.\n   Servers\
    \ MAY signal an EOF condition after CONTENT_LENGTH bytes have\n   been read, but\
    \ are not obligated to do so.  Therefore, scripts MUST\n   NOT attempt to read\
    \ more than CONTENT_LENGTH bytes, even if more data\n   are available.\n"
- title: 5.6 Data Output from the SIP CGI Script
  contents:
  - "5.6 Data Output from the SIP CGI Script\n   There MUST be a system-defined method\
    \ for the script to send data\n   back to the server or client.  Unless defined\
    \ otherwise, this will be\n   via the `standard output' file descriptor.\n   Servers\
    \ MAY implement a timeout period within which data must be\n   received from scripts,\
    \ a maximum number of requests or responses that\n   a particular CGI script can\
    \ initiate, a maximum total number of\n   requests or responses that can be sent\
    \ by scripts over the lifetime\n   of a transaction, or any other resource limitations\
    \ it desires.  If a\n   script exceeds one of these limitations, the server MAY\
    \ terminate the\n   script process and SHOULD abort the transaction with either\
    \ a `504\n   Gateway Timed Out' or a `500 Internal Server Error' response.\n \
    \  A SIP CGI script's output consists of any number of messages, each\n   corresponding\
    \ to actions which the script is requesting that the\n   server perform.  Messages\
    \ consist of an action line, whose syntax is\n   specific to the type of action,\
    \ followed by CGI header fields and SIP\n   header fields.  Action lines determine\
    \ the nature of the action\n   performed, and are described in section 5.6.1.\
    \  CGI header fields\n   pass additional instructions or information to the server,\
    \ and are\n   described in section 5.6.2.\n   A message MUST contain exactly one\
    \ action line, MAY also contain any\n   number of CGI header fields and SIP header\
    \ fields, and MAY contain a\n   SIP body.\n   All header fields (both SIP and\
    \ CGI) occurring in an output message\n   MUST be specified one per line; SIP\
    \ CGI 1.1 makes no provision for\n   continuation lines.\n   The generic syntax\
    \ of CGI header fields is specified in section\n   5.6.2.\n   A server MAY choose\
    \ to honor only some of the requests or responses;\n   in particular, it SHOULD\
    \ NOT accept any responses following a Status\n   message which sends a definitive\
    \ non-success response.\n   The messages sent by a script are delimited as follows:\n\
    \        1.   A message begins with an action line.\n        2.   If the message\
    \ does not contain a Content-Type header\n             field, or if it contains\
    \ the header field \"Content-Length:\n             0\", then it is terminated\
    \ by a blank line.\n        3.   If the message contains both Content-Type and\
    \ Content-\n             Length header fields, the message has a body consisting\
    \ of\n             the Content-Length octets following the blank line below\n\
    \             the set.  The next message begins after the body (and\n        \
    \     optionally some number of blank lines).  If the script\n             closes\
    \ its output prematurely, the server SHOULD report a\n             500-class server\
    \ error.\n        4.   If the message contains Content-Type but not Content-\n\
    \             Length, the message's body similarly begins with the blank\n   \
    \          line following the set; this body extends until the script\n      \
    \       closes its output.  In this case, this is necessarily the\n          \
    \   last message the script can send.  The server SHOULD insert\n            \
    \ a Content-Length header containing the amount of data read\n             before\
    \ the script closed its output.\n        5.   If a message contains a non-zero\
    \ Content-Length but does\n             not contain a Content-Type, it is an error.\
    \  The server\n             SHOULD report a 500-class server error.\n        The\
    \ output of a SIP CGI script is intended to be\n        syntactically identical\
    \ to that of a UDP packet in which\n        multiple requests or responses are\
    \ sent, so that the same\n        message parser may be used.\n"
- title: 5.6.1 CGI Action Lines
  contents:
  - '5.6.1 CGI Action Lines

    '
- title: 5.6.1.1 Status
  contents:
  - "5.6.1.1 Status\n        Status  =  SIP-Version 3*digit SP reason-phrase NL\n\
    \   This action line causes the server to generate a SIP response and\n   relay\
    \ it upstream towards the client.  The server MUST copy the To,\n   From, Call-ID,\
    \ and CSeq headers from the original request into the\n   response if these headers\
    \ are not specified in the script output.\n   The server SHOULD copy any other\
    \ headers from the request which would\n   normally be copied in the response\
    \ if these are not specified in the\n   script output.\n   For compatibility with\
    \ HTTP CGI, a server MAY interpret a message\n   containing a Content-Type header\
    \ field and no action line as though\n   it contained \"SIP/2.0 200 OK\".  This\
    \ usage is deprecated.\n"
- title: 5.6.1.2 Proxy Request
  contents:
  - "5.6.1.2 Proxy Request\n        Proxy-Request  =  \"CGI-PROXY-REQUEST\" SIP-URL\
    \ SIP-Version\n   This action line causes the server to forward a request to the\n\
    \   specified SIP URI.  It may be sent either by a script triggered by a\n   request,\
    \ in which case the triggering request is forwarded; or by a\n   script triggered\
    \ by a response on a server which is running\n   statefully, in which case the\
    \ initial request of the transaction is\n   sent.\n   Any SIP header field MAY\
    \ be specified below the action line.\n   Specified SIP headers replace all those\
    \ in the original message in\n   their entirety; if a script wants to preserve\
    \ header elements from\n   the original message as well as adding new ones, it\
    \ can concatenate\n   them by the usual rules of header concatenation, and place\
    \ the result\n   in the script output.  New header fields are added to the message\n\
    \   after any Via headers but before any other headers.\n   Any headers from the\
    \ original request which are not generated by the\n   CGI script are copied into\
    \ the proxied request, after modifications\n   normally performed by a proxy server.\
    \  In particular, the server MUST\n   append a Via field and decrement Max-Forwards.\
    \  A server MAY perform\n   additional modifications as it sees fit, such as adding\
    \ a Record-\n   Route header.  A server SHOULD NOT append these headers if they\
    \ are\n   specified in the script output.\n   A script MAY specify that a SIP\
    \ header is to be deleted from the\n   message by using the CGI-Remove CGI header;\
    \ see section 5.6.2.\n   If the message does not specify a body, the body from\
    \ the initial\n   request is used.  A message with \"Content-Length: 0\" is specifying\
    \ an\n   empty body; this causes the body to be deleted from the message.\n  \
    \ If the original request was authenticated by any means other than\n   `basic,'\
    \ the script SHOULD NOT add, change, or remove any end-to-end\n   headers, as\
    \ this would break the authentication.\n"
- title: 5.6.1.3 Forward Response
  contents:
  - "5.6.1.3 Forward Response\n        Forward-Response  =  \"CGI-FORWARD-RESPONSE\"\
    \ Response-Name\n                              SIP-Version\n        Response-Name\
    \     =  response-token | \"this\"\n   This action line causes the server to forward\
    \ a response on to its\n   appropriate final destination.  The same rules apply\
    \ for accompanying\n   SIP headers and message bodies as for CGI-PROXY-REQUEST.\n\
    \   The specified response name may either be a response token the server\n  \
    \ previously submitted in a RESPONSE_TOKEN metavariable, or the string\n   \"\
    this.\" The string \"this\" may only be sent if the message which\n   triggered\
    \ this CGI script was a response; it indicates that this\n   triggering response\
    \ should be forwarded.\n"
- title: 5.6.1.4 Script Cookie
  contents:
  - "5.6.1.4 Script Cookie\n        Script-Cookie  =  \"CGI-SET-COOKIE\" token SIP-Version\n\
    \   This action line causes the server to store a script cookie, passed\n   as\
    \ a token in the action line.  Subsequent script invocations for\n   messages\
    \ within the same transaction carry the token in a meta-\n   header.  The script\
    \ can alter the value of the cookie by subsequent\n   script cookie actions. \
    \ This alteration will take affect for all\n   subsequent script invocations.\n"
- title: 5.6.1.5 CGI Again
  contents:
  - "5.6.1.5 CGI Again\n        CGI-Again  =  \"CGI-AGAIN\" (\"yes\" | \"no\") SIP-Version\n\
    \   This action line determines whether the script will be invoked for\n   subsequent\
    \ requests and responses for this transaction.  If the\n   parameter \"yes\" is\
    \ given to this action, the script will be executed\n   again when the next message\
    \ arrives.  If the parameter is \"no,\" or\n   this action is not specified, the\
    \ script will not be executed again,\n   and the server will perform its default\
    \ action for all subsequent\n   messages.\n"
- title: 5.6.1.6 Default Action
  contents:
  - "5.6.1.6 Default Action\n   If none of the actions CGI-PROXY-REQUEST, CGI-FORWARD-RESPONSE,\
    \ or a\n   new response are performed -- that is to say, the script outputs only\n\
    \   CGI-AGAIN, CGI-SET-COOKIE, or nothing -- the script performs its\n   default\
    \ action.  The default action to take depends on the event\n   which triggered\
    \ the script:\n         Request received: When the request is first received,\
    \ the\n               default action of the server is to check whether the\n \
    \              domain of the server matches the domain of the Request-\n     \
    \          URI.  If it does not, the request is proxied to the\n             \
    \  request in the Request-URI.  Otherwise, the server checks\n               its\
    \ registration database against the request, and either\n               proxies\
    \ or redirects the request based on the action\n               specified by the\
    \ user agent in the registration.\n         Proxied response received: If a response\
    \ is received to a\n               proxied request, the server forwards the response\
    \ towards\n               the caller if the response was a 200 or 600 class\n\
    \               response, and sends a CANCEL on all pending branches.  If\n  \
    \             the response was 100 class, the state machinery for that\n     \
    \          branch is updated, and the response is proxied upstream\n         \
    \      towards the caller unless the it was a 100 response, not\n            \
    \   some other 1xx.  For 300, 400, and 500 class responses,\n               an\
    \ ACK is sent, and the response is forwarded upstream\n               towards\
    \ the caller if all other branches have terminated,\n               and the response\
    \ is the best received so far.  If not all\n               branches have terminated,\
    \ the server does nothing.  If\n               all branches have terminated, but\
    \ this response is not\n               the best, the best is forwarded upstream.\
    \  This is the\n               basic algorithm outlined in the SIP specification.\n"
- title: 5.6.2 CGI Header Fields
  contents:
  - "5.6.2 CGI Header Fields\n   CGI header fields syntactically resemble SIP header\
    \ fields, but their\n   names all begin with the string \"CGI-\".  The SIP server\
    \ MUST strip\n   all CGI header fields from any message before sending it, including\n\
    \   those it does not recognize.\n   CGI header fields have the generic syntax\
    \ specified in section 6.6 of\n   the SIP/2.0 specification [2].  The field-name\
    \ is not case sensitive;\n   the field value MUST conform to the grammar of that\
    \ specific field in\n   the specification where it is defined.\n"
- title: 5.6.2.1 Request-Token
  contents:
  - "5.6.2.1 Request-Token\n        Request-Token  =  \"CGI-Request-Token\" \":\"\
    \ token\n   To assist in matching responses to proxied requests, the script can\n\
    \   place a CGI-Request-Token CGI header in a CGI-PROXY-REQUEST or new\n   request.\
    \  This header contains a token, opaque to the server.  When a\n   response to\
    \ this request arrives, the token is passed back to the\n   script as a meta-header.\n\
    \        This allows scripts to \"fork\" a proxy request, and\n        correlate\
    \ which response corresponds to which branch of the\n        request.\n"
- title: 5.6.2.2 Remove
  contents:
  - "5.6.2.2 Remove\n        Remove  =  \"CGI-Remove\" \":\" 1#field-name\n   The\
    \ CGI-Remove header allows the script to remove SIP headers from\n   the outgoing\
    \ request or response.  The value of this header is a\n   comma-separated list\
    \ of SIP headers which should be removed before\n   sending out the message.\n\
    \   A script MAY specify headers which are not in the request; the server\n  \
    \ SHOULD silently ignore these.  A script SHOULD NOT both specify a SIP\n   header\
    \ in its output and also list that header in a CGI-Remove\n   header; the result\
    \ of doing this is undefined.\n"
- title: 5.7 Local Expiration Handling
  contents:
  - "5.7 Local Expiration Handling\n   If a CGI script specifies an Expires header\
    \ field along with CGI-\n   PROXY-REQUEST, the SIP server SHOULD track the expiration\
    \ timeout\n   locally as well as sending the message to the remote server.  When\n\
    \   the timeout expires, the server SHOULD generate a \"408 Request\n   Timeout\"\
    \ response.  The timeout response SHOULD be handled as\n   specified in section\
    \ 5.8.  At the time the request is timed out, the\n   server SHOULD also transmit\
    \ CANCEL messages for the request.\n        This allows a SIP CGI script in a\
    \ proxy server to implement\n        services like \"Call Forward No Answer\"\
    \ to trigger after a\n        user-determined time, even if the remote user-agent\
    \ server\n        is not responding or does not properly handle the Expires\n\
    \        header field.\n"
- title: 5.8 Locally-Generated Responses
  contents:
  - "5.8 Locally-Generated Responses\n   In a proxy environment, locally-generated\
    \ responses such as \"408\n   Request Timeout\" SHOULD be sent to the CGI script\
    \ in the same manner\n   as received messages are.  However, messages which merely\
    \ report a\n   problem with a message, such as \"400 Bad Request\", SHOULD NOT\
    \ be.\n        This is the other half of the requirements for the\n        implementation\
    \ of the \"Call Forward No Answer\" service,\n        along with the local handling\
    \ of the Expires header.\n"
- title: 5.9 SIP CGI and REGISTER
  contents:
  - "5.9 SIP CGI and REGISTER\n   The specific semantics of a SIP CGI script which\
    \ is triggered by a\n   REGISTER request are somewhat different than that of those\
    \ triggered\n   by call-related requests; however, allowing user control of\n\
    \   registration may in some cases be useful.  The two specific actions\n   for\
    \ REGISTER that need to be discussed are the response \"200\" and the\n   default\
    \ action.  In the former case, the server SHOULD assume that\n   the CGI script\
    \ is handling the registration internally, and SHOULD\n   NOT add the registration\
    \ to its internal registration database; in\n   the latter case, the server SHOULD\
    \ add the registration to its own\n   database.  The server also SHOULD NOT add\
    \ the registration if a 3xx,\n   4xx, 5xx, or 6xx status was returned, or if the\
    \ registration request\n   was proxied to another location.\n"
- title: 5.10 SIP CGI and CANCEL
  contents:
  - "5.10 SIP CGI and CANCEL\n   SIP CGI servers SHOULD execute scripts when a CANCEL\
    \ message is\n   received.  The script SHOULD clean up any state it has for the\n\
    \   transaction as quickly as possible.\n   When a CANCEL is received at a server\
    \ for an existing transaction,\n   the server SHOULD send a 200 OK response to\
    \ the cancel and cancel all\n   currently outstanding branches.  The transmission\
    \ of the script on a\n   CANCEL message is purely advisory, and the script SHOULD\
    \ NOT perform\n   any actions in response to it.\n"
- title: 5.11 SIP CGI and ACK
  contents:
  - '5.11 SIP CGI and ACK

    '
- title: 5.11.1 Receiving ACK's
  contents:
  - "5.11.1 Receiving ACK's\n   Under normal circumstances, if the server receives\
    \ an ACK, the script\n   is not re-executed.  If the ACK is destined for the proxy\n\
    \   (acknowledging a 300, 400, 500, or 600 response), the ACK causes\n   response\
    \ retransmissions to cease.  If the ACK is for a 200 response\n   forwarded from\
    \ a downstream server, the ACK is proxied downstream.\n   However, if the script\
    \ generated its own 200 response to an INVITE\n   request, the script SHOULD be\
    \ re-executed with the ACK message.  This\n   is necessary in cases where the\
    \ script is causing the proxy to act as\n   a UAS.  ACK messages can contain bodies,\
    \ and would therefore be\n   useful to the script.\n"
- title: 5.11.2 Sending ACK's
  contents:
  - "5.11.2 Sending ACK's\n   When the server receives a non-200 final response to\
    \ an INVITE\n   request, it SHOULD generate an ACK on its own, and not depend\
    \ on the\n   script to do so.  There is no way in SIP CGI 1.1 to override this\n\
    \   behavior.  However, since the server will not generate an ACK for 200\n  \
    \ responses to INVITE, a script causing the server to act as a UAC MUST\n   generate\
    \ ACK's for them.\n"
- title: 6 System Specifications
  contents:
  - '6 System Specifications

    '
- title: 6.1 Unix
  contents:
  - "6.1 Unix\n   The implementation of SIP CGI on a Unix operating system platform\n\
    \   SHOULD use environment variables as the mechanism of providing\n   request\
    \ metadata to CGI scripts.\n   For Unix compatible operating systems, the following\
    \ are defined:\n        Environment variables: These are accessed by the C library\n\
    \             routine getenv.\n        The current working directory: The current\
    \ working directory for\n             the script SHOULD be set to the directory\
    \ containing the\n             script.\n        Character set: The US-ASCII character\
    \ set is used for the\n             definition of environment variable names and\
    \ header field\n             names; the newline (NL) sequence is LF; servers SHOULD\
    \ also\n             accept CR LF as a newline.\n"
- title: 6.2 Microsoft Windows
  contents:
  - "6.2 Microsoft Windows\n   The implementation of SIP CGI on 32-bit Microsoft Windows\
    \ system\n   platforms (Windows 95, 98, NT, and 2000) SHOULD use environment\n\
    \   variables as the mechanism of providing request metadata to CGI\n   scripts.\n\
    \   For Microsoft Windows, the following are defined:\n        Environment variables:\
    \ These are accessed by the C library\n             routine getenv.\n        The\
    \ current working directory: The current working directory for\n             the\
    \ script SHOULD be set to the directory containing the\n             script.\n\
    \        Character set: The US-ASCII character set is used for the\n         \
    \    definition of environment variable names and header field\n             names;\
    \ the newline (NL) sequence is CR LF; servers SHOULD\n             also accept\
    \ LF as a newline.\n"
- title: 7 Security Considerations
  contents:
  - '7 Security Considerations

    '
- title: 7.1 Request Initiation
  contents:
  - "7.1 Request Initiation\n   CGI scripts are able to initiate arbitrary SIP transactions,\
    \ or to\n   produce spoofed responses of any sort.  This protocol does not\n \
    \  attempt to restrict the actions CGI scripts can take.  Server\n   administrators\
    \ MUST consider CGI scripts to be as security-sensitive\n   as their SIP server\
    \ itself, and perform equivalent levels of security\n   review before installing\
    \ them.\n"
- title: 7.2 Authenticated and Encrypted Messages
  contents:
  - "7.2 Authenticated and Encrypted Messages\n   CGI scripts must be careful not\
    \ to interfere with authentication.  In\n   particular, adding or removing header\
    \ fields that are below the\n   Authorization header will cause the message to\
    \ fail authentication at\n   the user agent.\n   When a SIP request is encrypted,\
    \ the headers which are in the clear\n   are passed to the server according to\
    \ this specification.  The\n   encrypted portion of the request is passed to the\
    \ script as a body.\n   Any SIP headers output by the script will be added to\
    \ the message.\n   However, scripts should be aware that these may be discarded\
    \ if they\n   also exist within the encrypted portion.\n"
- title: 7.3 SIP Header Fields Containing Sensitive Information
  contents:
  - "7.3 SIP Header Fields Containing Sensitive Information\n   Some SIP header fields\
    \ may carry sensitive information which the\n   server SHOULD NOT pass on to the\
    \ script unless explicitly configured\n   to do so.  For example, if the server\
    \ protects the script using the\n   Basic authentication scheme, then the client\
    \ will send an\n   Authorization header field containing a username and password.\
    \  If\n   the server, rather than the script, validates this information then\n\
    \   the password SHOULD NOT be passed on to the script via the\n   HTTP_AUTHORIZATION\
    \ metavariable.\n"
- title: 7.4 Script Interference with the Server
  contents:
  - "7.4 Script Interference with the Server\n   The most common implementation of\
    \ CGI invokes the script as a child\n   process using the same user and group\
    \ as the server process.  It\n   SHOULD therefore be ensured that the script cannot\
    \ interfere with the\n   server process, its configuration, or documents.\n  \
    \ If the script is executed by calling a function linked in to the\n   server\
    \ software (either at compile-time or run-time) then precautions\n   SHOULD be\
    \ taken to protect the core memory of the server, or to\n   ensure that untrusted\
    \ code cannot be executed.\n"
- title: 7.5 Data Length and Buffering Considerations
  contents:
  - "7.5 Data Length and Buffering Considerations\n   This specification places no\
    \ limits on the length of entity bodies\n   presented to the script.  Scripts\
    \ SHOULD NOT assume that statically\n   allocated buffers of any size are sufficient\
    \ to contain the entire\n   submission at one time.  Use of a fixed length buffer\
    \ without careful\n   overflow checking may result in an attacker exploiting `stack-\n\
    \   smashing' or `stack-overflow' vulnerabilities of the operating\n   system.\
    \  Scripts may spool large submissions to disk or other\n   buffering media, but\
    \ a rapid succession of large submissions may\n   result in denial of service\
    \ conditions.  If the CONTENT_LENGTH of an\n   entity-body is larger than resource\
    \ considerations allow, scripts\n   SHOULD respond with `413 Request Entity Too\
    \ Large.'\n"
- title: 8 Acknowledgements
  contents:
  - "8 Acknowledgements\n   This work draws extremely heavily upon the HTTP CGI specification\n\
    \   [1]; approximately half the text of the specification section is\n   taken\
    \ from that document.\n"
- title: 9 Authors' Addresses
  contents:
  - "9 Authors' Addresses\n   Jonathan Lennox\n   Dept. of Computer Science\n   Columbia\
    \ University\n   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027\n   USA\n\
    \   EMail: lennox@cs.columbia.edu\n   Jonathan Rosenberg\n   dynamicsoft\n   72\
    \ Eagle Rock Ave.\n   First Floor\n   East Hanover, NJ 07936\n   EMail: jdrosen@dynamicsoft.com\n\
    \   Henning Schulzrinne\n   Dept. of Computer Science\n   Columbia University\n\
    \   1214 Amsterdam Avenue, MC 0401\n   New York, NY 10027\n   USA\n   EMail: schulzrinne@cs.columbia.edu\n"
- title: 10 Bibliography
  contents:
  - "10 Bibliography\n   [1]  http://hoohoo.ncsa.uiuc.edu/cgi/interface.html\n   [2]\
    \  Handley, M, Schulzrinne, H., Schooler, E. and J. Rosenberg,\n        \"SIP:\
    \  Session Initiation Protocol\", RFC 2543, March 1999.\n   [3]  Crocker, D.,\
    \ \"Standard for the Format of ARPA Internet Text\n        Messages\", STD 10,\
    \ RFC 822, August 1982.\n   [4]  Bradner, S., \"Key words for use in RFCs to indicate\
    \ requirement\n        levels\", BCP 14, RFC 2119, March 1997.\n   [5]  Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n        Leach, P. and\
    \ T. Berners-Lee, \"Hypertext Transfer Protocol --\n        HTTP/1.1\", RFC 2616,\
    \ June 1999.\n   [6]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n\
    \        Extensions (MIME) Part Two: Media Types\", RFC 2046, November\n     \
    \   1996.\n   [7]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n    \
    \    Architecture\", RFC 2373, July 1998.\n   [8]  St. Johns, M., \"Identification\
    \ Protocol\", RFC 1413, January\n        1993.\n   [9]  Berners-Lee, T., Fielding,\
    \ R. and L. Masinter, \"Uniform Resource\n        Identifiers (URI): Generic Syntax\"\
    , RFC 2396, August 1998.\n"
- title: 11 Full Copyright Statement
  contents:
  - "11 Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
