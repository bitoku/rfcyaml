Abstract This document specifies cryptographic algorithms for use with the Mutual user authentication method for the Hypertext Transfer Protocol (HTTP).
This document specifies algorithms for use with the Mutual authentication protocol for the Hypertext Transfer Protocol (HTTP)
(hereafter referred to as the "core specification").
The algorithms are based on augmented password based authenticated key exchange (augmented PAKE) techniques.
In particular, it uses one of three key exchange algorithms defined in ISO 11770 4 ("Information technology Security techniques Key management
Mechanisms based on weak secrets")
[ISO.11770 4.2006] as its basis.
To briefly summarize, the Mutual authentication protocol exchanges four values
K c1, K s1, VK c, and VK s   to perform authenticated key exchanges, using the password derived secret pi and its "augmented version" J(pi).
This document defines the set of functions K c1, K s1, and J for a specific algorithm family.
Please note that from the point of view of literature related to cryptography, the original functionality of augmented PAKE is separated into the functions K c1 and K s1 as defined in this document, and the functions VK c and VK s, which are defined in Section 12.2 of [RFC8120] as "default functions".
For the purpose of security analysis, please also refer to these functions.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The term "natural numbers" refers to non negative integers (including zero) throughout this document.
This document treats both the input (domain) and the output (codomain) of hash functions as octet strings.
When a natural number output of hash function H is required, it will be notated, for example, as INT(H(s)).
The cryptographic primitive used in this algorithm specification is based on a variant of augmented PAKE called "APKAS AMP" (augmented password authenticated key agreement scheme, version AMP), proposed by T. Kwon and originally submitted to [IEEE 1363.2 2008].
The general flow of the successful exchange is shown below for informative purposes only.
The multiplicative notations are used for group operators, and all modulus operations for finite groups (mod q and mod r) are omitted.
random C: K c1   g^(S c1)
S: fetch J   g^pi by ID S
(J   K c1^(t 1))^(S s1)
t 2   H2(K c1, K s1)
t 2   H2(K c1, K s1)
z' if authentication succeeded) C: VK c
H4(K c1, K s1, z)
VK c'   H4(K c1, K s1, z')
VK s'   H3(K c1, K s1, z)
VK s   H3(K c1, K s1, z')
Note that the concrete (binary) message formats (mapping to HTTP messages), as well as the formal definitions of equations for the latter two messages, are defined in the core specification [RFC8120].
The formal definitions for values corresponding to the first two messages are defined in the following sections.
This document specifies one family of algorithms based on APKAS AMP, to be used with [RFC8120].
This family consists of four authentication algorithms, which differ only in their underlying mathematical groups and security parameters.
These algorithms do not add any additional parameters.
The tokens for these algorithms are as follows:
sha256: for the 2048 bit discrete logarithm setting with the SHA 256 hash function.
4096 sha512: for the 4096 bit discrete logarithm setting with the SHA 512 hash function.
iso kam3 ec p256 sha256: for the 256 bit prime field elliptic curve setting with the SHA 256 hash function.
p521 sha512: for the 521 bit prime field elliptic curve setting with the SHA 512 hash function.
For discrete logarithm settings, the underlying groups are the 2048 bit and 4096 bit Modular Exponential (MODP)
See Appendix A for the exact specifications for the groups and associated parameters.
Hash function H is SHA 256 for the 2048 bit group and SHA 512 for the 4096 bit group, respectively, as defined in FIPS PUB 180 4 [FIPS.180 4.2015].
The hash iteration count nIterPi is 16384.
The representation of the parameters "kc1", "ks1", "vkc", and "vks" is base64 fixed number.
For the elliptic curve settings, the underlying groups are the elliptic curves over the prime fields P 256 and P 521, respectively, as specified in Appendix D.1.2 of the FIPS PUB 186 4 [FIPS.186 4.2013] specification.
Hash function H is SHA 256 for the P 256 curve and SHA 512 for the P 521 curve, respectively.
Cofactors of these curves are 1.
The hash iteration count nIterPi is 16384.
The representation of the parameters "kc1", "ks1", "vkc", and "vks" is hex fixed number.
Note: This algorithm is based on the Key Agreement Mechanism 3 (KAM3) as defined in Section 6.3 of ISO/IEC 11770 4
[ISO.11770 4.2006], with a few modifications/improvements.
However, implementers should consider this document as normative, because several minor details of the algorithm have changed and major improvements have been made.
The algorithm definitions use the support functions and notations defined below.
Decimal notations are used for integers in this specification by default.
Integers in hexadecimal notations are prefixed with "0x".
In this document, the octet(), OCTETS(), and INT() functions are used as defined in the core specification [RFC8120].
The definition of OCTETS() is different from the function GE2OS x in the original ISO specification; GE2OS x takes the shortest representation without preceding zeros.
All of the algorithms defined in this specification use the default functions defined in Section 12.2 of [RFC8120] for computing the values pi, VK c, and VK s. 3.2.
Functions for Discrete Logarithm Settings
In this section, an equation (x / y mod z) denotes a natural number w less than z
that satisfies (w   y) mod z
For the discrete logarithm, we refer to some of the domain parameters by using the following symbols:  q: for "the prime" defining the MODP group.
g: for "the generator" associated with the group.
r: for the order of the subgroup generated by g.
The function J is defined as J(pi)   g^(pi)
The value of K c1 is derived as K c1   g^(S c1)
mod q where S c1 is a random integer within the range [1, r 1] and r is the size of the subgroup generated by g.
In addition, S c1 MUST be larger than log(q)/log(g)
(so that g^(S c1) > q).
The server MUST check the condition 1 < K c1 < q 1 upon reception.
Let an intermediate value t 1 be t 1   INT(H(octet(1)   OCTETS(K c1)))
The value of K s1 is derived from J(pi) and K c1 as K s1
mod q where S s1 is a random number within the range [1, r 1].
The value of K s1 MUST satisfy 1 < K s1 < q 1.
If this condition is not held, the server MUST reject the exchange.
The client MUST check this condition upon reception.
Let an intermediate value t 2 be t 2   INT(H(octet(2)
The value z on the client side is derived by the following equation:
The value z on the server side is derived by the following equation: z   (K c1   g^(t 2))^(S s1) mod q
The original ISO specification contained a message pair containing verification of value z along with the "transcript" of the protocol exchange.
This functionality is contained in the functions VK c and VK s.) 3.3.
Functions for Elliptic Curve Settings For the elliptic curve settings
, we refer to some of the domain parameters by the following symbols:  q: for the prime used to define the group.
G: for the point defined with the underlying group called "the generator".
h: for the cofactor of the group.
r: for the order of the subgroup generated by G.
The function P(p) converts a curve point p into an integer representing point p, by computing
(y mod 2), where (x, y) are the coordinates of point p.  P'(z) is the inverse of function P; that is, it converts an integer z to a point p that satisfies P(p)
If such p exists, it is uniquely defined.
Otherwise, z does not represent a valid curve point.
See the literature on elliptic curve cryptography for the exact algorithms used for those functions (e.g., Section 3 of [RFC6090]; however, note that [RFC6090] uses different notations).
E represents the infinity point.
The equation (x / y mod z) denotes a natural number w less than z
that satisfies (w   y) mod
The function J is defined as J(pi)
G where S c1 is a random number within the range [1, r 1].
The server MUST check that (1) the value of received K c1 represents a valid curve point and (2)
K c1' is not equal to 0 E.
Let an intermediate integer t 1 be t 1   INT(H(octet(1)   OCTETS(K c1)))
The value of K s1 is derived from J(pi) and K c1'   P'(K c1) as K s1   P([S s1]
[t 1]   K c1')) where S s1 is a random number within the range [1, r 1].
If this condition is not satisfied, the server MUST reject the exchange.
The client MUST check this condition upon reception.
Let an intermediate integer t 2 be t 2   INT(H(octet(2)
The value z on the client side is derived by the following equation:
z   P([(S c1   t 2) /
The value z on the server side is derived by the following equation: z   P([S s1]
Security Considerations Please refer to the Security Considerations section of the core specification [RFC8120] for algorithm independent considerations.
During the exchange, the value VK s, defined in [RFC8120], MUST only be sent when the server has received a correct (expected) value of VK c.
This is a cryptographic requirement, as stated in [ISO.11770 4.2006].
All random numbers used in these algorithms MUST be cryptographically secure against forward and backward guessing attacks.
To prevent timing based side channel attacks, computation times of all numerical operations on discrete logarithm group elements and elliptic curve points MUST be normalized and made independent of the exact values.
The notes in this subsection are for those who analyze the security of this algorithm and those who might want to make a derived work from this algorithm specification.
The treatment of an invalid K s1 value in the exchange has been changed from the method defined in the original ISO specification, which specifies that the sender should retry with another random S s1 value.
We specify that the exchange must be rejected.
This is due to an observation that this condition is less likely to result from a random error caused by an unlucky choice of S s1 but is more likely the result of a systematic failure caused by an invalid J(pi) value (even implying possible denial of service attacks).
The usual construction of authenticated key exchange algorithms consists of a key exchange phase and a key verification phase.
To avoid security risks or vulnerabilities caused by mixing values from two or more key exchanges, the latter usually involves some kinds of exchange transactions to be verified.
In the algorithms defined in this document, such verification steps are provided in the generalized definitions of VK c and VK s in [RFC8120].
If the algorithm defined above is used in other protocols, this aspect MUST be given careful consideration.
The domain parameters chosen and specified in this document are based on a few assumptions.
In the discrete logarithm setting, q has to be a safe prime ([(q 1) / 2] must also be prime), and r should be the largest possible value [(q 1) / 2].
In the elliptic curve setting, r has to be prime.
Implementers defining a variation of this algorithm using a different domain parameter SHOULD be attentive to these conditions.
(Informative) Group Parameters for Algorithms
Based on the Discrete Logarithm
The MODP group used for the iso kam3 dl 2048
sha256 algorithm is defined by the following parameters: The prime is q   0xFFFFFFFF
AE9F2411 7C4B1FE6 49286651 ECE45B3D C2007CB8
The generator is g   2
The size of the subgroup generated by g is r
98158536 F92F8A1B A7F09AB6 B6A8E122 F242DABB 312F3F63
1042A95D CF6A9483 B84B4B36 B3861AA7 255E4C02
The MODP group used for the iso kam3 dl 4096
sha512 algorithm is defined by the following parameters: The prime is q   0xFFFFFFFF
AE9F2411 7C4B1FE6 49286651 ECE45B3D C2007CB8
15728E5A 8AAAC42D AD33170D 04507A33 A85521AB
A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D
D98A0864 D8760273 3EC86A64 521F2B18 177B200C
2170481C D0069127 D5B05AA9 93B4EA98 8D8FDDC1
The generator is g   2
The size of the subgroup generated by g is r
98158536 F92F8A1B A7F09AB6 B6A8E122 F242DABB 312F3F63
1042A95D CF6A9483 B84B4B36 B3861AA7 255E4C02
3A72D598 A1EDADFE 707E8847 25C16890 54908400 8D391E09
826F477C 97477E0A 0FDF6553 143E2CA3 A735E02E CCD94B27 D04861D1 119DD0C3 28ADF3F6
Appendix B.  (Informative) Derived Numerical Values
This section provides several numerical values for implementing this protocol.
These values are derived from the specifications provided in Section 3.
The values shown in this section are for informative purposes only.
