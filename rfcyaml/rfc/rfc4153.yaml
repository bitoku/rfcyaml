- title: __initial_text__
  contents:
  - '                 XML Voucher: Generic Voucher Language

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies rules for defining voucher properties in\
    \ XML\n   syntax.  A voucher is a logical entity that represents a right to\n\
    \   claim goods or services.  A voucher can be used to transfer a wide\n   range\
    \ of electronic values, including coupons, tickets, loyalty\n   points, and gift\
    \ certificates, which often have to be processed in\n   the course of payment\
    \ and/or delivery transactions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction .................................................\
    \  2\n   2.  Processing Model .............................................  2\n\
    \   3.  Trust Model ..................................................  4\n  \
    \ 4.  Component Structure ..........................................  4\n   5.\
    \  Syntax Overview and Examples .................................  6\n   6.  Syntax\
    \ and Semantics .........................................  8\n       6.1. <Voucher>\
    \ ...............................................  8\n       6.2. <Title> .................................................\
    \  9\n       6.3. <Description> ...........................................  9\n\
    \       6.4. <Provider> ..............................................  9\n  \
    \     6.5. <Issuer> ................................................ 10\n    \
    \   6.6. <Holder> ................................................ 10\n      \
    \ 6.7. <Collector> ............................................. 11\n       6.8.\
    \ <Value> ................................................. 11\n            6.8.1.\
    \ <Ratio> .......................................... 13\n            6.8.2. <Fixed>\
    \ .......................................... 13\n       6.9. <Merchandise> ...........................................\
    \ 14\n       6.10. <ValidPeriod> .......................................... 14\n\
    \       6.11. <Conditions> ........................................... 15\n  \
    \ 7.  IANA Considerations .......................................... 15\n   8.\
    \  VTS Schema Example ........................................... 18\n   9.  Security\
    \ Considerations ...................................... 18\n   10. Acknowledgements\
    \ ............................................. 19\n   11. Normative References\
    \ ......................................... 19\n   12. Informative References\
    \ ....................................... 20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies rules for defining voucher properties\
    \ in XML\n   syntax.  The motivation and background of the specification are\n\
    \   described in [VTS].\n   A voucher is a logical entity that represents a certain\
    \ right and\n   that is logically managed by the Voucher Trading System (VTS).\
    \  A\n   voucher is generated by the issuer, traded among users, and finally\n\
    \   collected by the collector using VTS.\n   This document defines the syntax\
    \ and semantics of the Voucher\n   Component, which defines voucher meaning and\
    \ processing rules in XML\n   syntax [XML].  A Voucher Component defines the properties\
    \ that must\n   be satisfied to allow the voucher to be processed by VTS or other\n\
    \   trading systems; e.g., a wallet or merchant system.  VTS definitions\n   and\
    \ models are also defined in [VTS].\n   Note: This document uses \"voucher\" as\
    \ an \"instance of voucher\", whose\n   meaning is defined by the Voucher Component.\
    \  In other words, a\n   Voucher Component is NOT a voucher, and multiple vouchers\
    \ can be\n   issued and managed by the VTS using the same Voucher Component.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119]\n"
- title: 2.  Processing Model
  contents:
  - "2.  Processing Model\n   There are several ways of implementing VTS and technologies\
    \ are\n   continually changing.  For discount coupons or event tickets, for\n\
    \   example, the smartcard-based offline VTS is often preferred, whereas\n   for\
    \ bonds or securities, the centralized online VTS is preferred.  It\n   is impractical\
    \ to define standard protocols for issuing,\n   transferring, or redeeming vouchers\
    \ at this time.\n   To provide implementation flexibility, this document assumes\
    \ a\n   modular wallet architecture that allows multiple VTSes to be added as\n\
    \   plug-ins.  In this architecture, instead of specifying a standard\n   voucher\
    \ transfer protocol, two specifications, Voucher Component and\n   VTS-API, are\
    \ standardized (Figure 1).\n   After the sender and receiver agree on which vouchers\
    \ are to be\n   traded and which VTS is to be used, the issuing system or wallet\n\
    \   system requests the corresponding VTS plug-in to permit the issue,\n   transfer,\
    \ or redeem transactions to be performed via the VTS API.\n   The VTS then rewrites\
    \ the ownership of the vouchers using the VTS-\n   specific protocol.  Finally,\
    \ a completion event is sent to the wallet\n   systems or issuing/collecting systems.\n\
    \   This document describes the Voucher Component specification.  The\n   VTS-API\
    \ specification is defined in [VTS-API].\n   Sender wallet/Issuing system    \
    \  Receiver wallet/Collecting system\n   +---------------------------+       +---------------------------+\n\
    \   |                           |       |                           |\n   |  |\
    \                    Voucher Component                    |  |\n   |  |      \
    \      (Specifies VTS Provider and Promise)         |  |\n   |  |-------------------------------------------------------->|\
    \  |\n   |  |                        |       |                        |  |\n \
    \  |  |         Intention to receive and payment (option)       |  |\n   |  |<-\
    \ - - - - - - - - - - - - - - - - - - - - - - - - - - - |  |\n   |  |        \
    \                |       |                        |  |\n   |  |              \
    \          |       |                        |  |\n   |  | Issue/transfer/  VTS\
    \   |       |   VTS      Register    |  |\n   |  | redeem request   plug-in  \
    \     |   plug-in  Listener(*1)|  |\n   |  |------------------>|    |       |\
    \    |<------------------|  |\n   |  | (VTS-API)         |<- - - - - - - ->| \
    \        (VTS-API) |  |\n   |  |                   | VTS-specific    |       \
    \            |  |\n   |  |                   | protocol if VTS |             \
    \      |  |\n   |  |                   | is distributed  |                   |\
    \  |\n   |  |  Result           |<- - - - - - - ->|       Notify(*2)  |  |\n \
    \  |  |<------------------|    |       |    |------------------>|  |\n   +---------------------------+\
    \       +---------------------------+\n   (*1) Registration is optional.  Note\
    \ also that the VTS plug-ins are\n        usually pre-registered when the wallet\
    \ or collecting system\n        is started.\n   (*2) If a listener is registered.\n\
    \           Figure 1. Wallet architecture with VTS plug-ins\n"
- title: 3.  Trust Model
  contents:
  - "3.  Trust Model\n   A voucher is trusted if the Issuer and VTS Provider are trusted,\
    \ as\n   the Issuer is responsible for the contents of the voucher and the VTS\n\
    \   Provider is responsible for preventing ownership from being assigned\n   to\
    \ multiple users.\n   The trust level required for the Issuer and VTS Provider\
    \ depends on\n   the type (or Promise) of the voucher.  To provide the information\n\
    \   needed for verification, the conditions of the Issuer and VTS\n   Provider\
    \ are specified in the Voucher Component and given as input to\n   the verifier;\
    \ e.g., wallet system or other software.  The trust of a\n   voucher is thus verified\
    \ through the Voucher Component.  This model\n   enables trading partners to verify\
    \ their trust in the voucher\n   regardless of their trust in the partners.\n\
    \   This document assumes that the Voucher Component is the root of\n   trust.\
    \  If a malicious user could alter the Voucher Component, a\n   forged voucher\
    \ could be verified as valid.\n   When a Voucher Component is delivered from the\
    \ trusted VTS Provider,\n   Issuer, or trusted third party, a secure communication\
    \ channel (e.g.,\n   [TLS], [IPSEC], or object security, such as [XMLDSIG]) should\
    \ be used\n   to prevent alteration during the delivery.\n   Note: The Voucher\
    \ Component does not have to be sent from the sender\n   of the voucher.  Note\
    \ also that a set of trusted Voucher Components\n   can be downloaded before a\
    \ transaction is conducted.\n"
- title: 4.  Component Structure
  contents:
  - "4.  Component Structure\n   The Voucher Component provides the information needed\
    \ to identify the\n   monetary value or merchandize rendered when the voucher\
    \ is redeemed.\n   It includes\n   o how much value/items can be claimed in exchange\
    \ for the voucher,\n      and\n   o restrictions applied to the voucher\n    \
    \  - participants (VTS Provider, Issuer, Holder, and Collector),\n      - objects\
    \ (merchandise) to be claimed,\n      - time when valid (validity period), and\n\
    \      - others.\n   The Voucher Component also provides common properties useful\
    \ for\n   displaying and manipulating the contents of wallet systems.  It\n  \
    \ includes the title and description of each voucher.\n   The Voucher Component\
    \ contains the following components:\n   Title Component\n      Provides the title\
    \ of the voucher.  This is mainly for listing the\n      entities stored in a\
    \ wallet system.\n   Description Component\n      Provides a short description\
    \ of the voucher.  This is mainly for\n      listing the entities stored in a\
    \ wallet system.\n   Provider Component\n      Provides restrictions on which\
    \ VTS Provider (or VTS plug-in) can\n      be used for trading the voucher.\n\
    \   Issuer Component\n      Provides restrictions on the Issuer of the voucher.\n\
    \   Holder Component\n      Provides restrictions on the Holder of the voucher.\n\
    \   Collector Component\n      Provides restrictions on the Collector of the voucher.\n\
    \   Value Component\n      Provides the value of each voucher.  There are two\
    \ types of\n      values: fixed and ratio values.  For a fixed value, the currency\n\
    \      and the figure is specified.  For a ratio value, the discount\n      ratio\
    \ of the corresponding merchandize is specified.\n      The Value Component also\
    \ indicates the number of vouchers to be\n      redeemed for claiming the merchandise\
    \ or monetary value specified\n      in the Merchandise Component or Value Component.\
    \  If \"n\" (>0) is\n      specified, the merchandize or monetary value can be\
    \ claimed in\n      exchange for \"n sheets of\" vouchers.  If \"0\" is specified,\
    \ it can\n      be used repeatedly.\n   Merchandise Component\n      Provides\
    \ restrictions on the object to be claimed.  The domain-\n      specific meaning\
    \ of the voucher (e.g., reference number of the\n      merchandize or seat number\
    \ for an event ticket) is specified to\n      identify the merchandize rendered\
    \ when the voucher is redeemed.\n   ValidPeriod Component\n      Provides restrictions\
    \ on the validity period of the voucher; i.e.,\n      start date and end date.\n\
    \   Condition Component\n      Provides any other applicable restrictions.  This\
    \ is intended to\n      cover contracts between the issuer and holder of the voucher\
    \ in\n      natural language form.\n   Using the above Components, semantics for\
    \ diverse types of vouchers\n   can be defined as shown in Table 1.\n   +----------------+--------------------------------+---------------+\n\
    \   |                |             Value              |  Restrictions |\n   |\
    \                +-----+---------------+----------+---------------+\n   |   Examples\
    \     |Ratio|    Fixed      |Number    |  Merchandise  |\n   |               \
    \ |     +------+--------+needed for|               |\n   |                |  \
    \   |Amount|Currency|redemption|               |\n   +----------------+-----+------+--------+----------+---------------+\n\
    \   |Gift certificate|     |   25 |  USD   |        1 |(Not specified)|\n   |Loyalty\
    \ point   |     |    1 |  AUD   |       10 |(Not specified)|\n   |Member card\
    \     |  20%|      |        |        0 |(Not specified)|\n   |Coupon         \
    \ |  30%|      |        |        1 |Beef 500g      |\n   |Event ticket    | 100%|\
    \      |        |        1 |Hall A, S ,K23 |\n   |Exchange ticket | 100%|    \
    \  |        |        1 |ISBN:0071355014|\n   +----------------+-----+------+--------+----------+---------------+\n\
    \          Table 1. Examples of vouchers and their properties\n"
- title: 5.  Syntax Overview and Examples
  contents:
  - "5.  Syntax Overview and Examples\n   This section provides an overview and examples\
    \ of Voucher Components.\n   The formal syntax and semantics are found in Sections\
    \ 6 and 7.\n   Voucher Components are represented by the <Voucher> element, which\n\
    \   has the following structure (where \"?\" denotes zero or one\n   occurrence):\n\
    \      <Voucher>\n        (Title)\n        (Description)?\n        (Provider)\n\
    \        (Issuer)?\n        (Holder)?\n        (Collector)?\n        (Value)\n\
    \        (Merchandise)?\n        (ValidPeriod)?\n        (Conditions)?\n     \
    \ </Voucher>\n   An example of a Voucher Component is described below.  This is\
    \ an\n   example of a five-dollar discount coupon for specific merchandize, a\n\
    \   book with ISBN number 0071355014.  The coupon is valid from April 1,\n   2001,\
    \ to March 31, 2002.  To claim this offer, one voucher must be\n   spent.\n  \
    \    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <Voucher xmlns=\"urn:ietf:params:xml:ns:vts-lang\"\
    \n               xmlns:vts=\"http://www.example.com/vts\">\n        <Title>IOTP\
    \ Book Coupon</Title>\n        <Description>$5 off IOTP Book</Description>\n \
    \       <Provider name=\"Voucher Exchanger 2002\">\n          <vts:Version>VE2.31</vts:Version>\n\
    \        </Provider>\n        <Issuer name=\"Alice Book Center, Ltd.\">\n    \
    \      <vts:KeyInfo>\n            1DA8DFCF95521014BBB7171B95545E8D61AE803F\n \
    \         </vts:KeyInfo>\n        </Issuer>\n        <Collector name=\"Alice Book\
    \ Center, Ltd.\"/>\n        <Value type=\"discount\" spend=\"1\">\n          <Fixed\
    \ amount=\"5\" currency=\"USD\"/>\n        </Value>\n        <Merchandise>\n \
    \         <bk:Book xmlns:bk=\"http://www.example.com/bk\"\n                  \
    \ bk:isbn=\"0071355014\"/>\n        </Merchandise>\n        <ValidPeriod start=\"\
    2002-04-01\" end=\"2003-03-31\"/>\n        <Conditions>\n          The value of\
    \ this coupon is subject to tax.\n        </Conditions>\n      </Voucher>\n"
- title: 6.  Syntax and Semantics
  contents:
  - "6.  Syntax and Semantics\n   The general structure of an XML Voucher Component\
    \ is described in\n   Section 4.  This section details the Voucher Component features.\n\
    \   Features described in this section MUST be implemented unless\n   otherwise\
    \ indicated.  The syntax is defined via [XML-Schema-1]\n   [XML-Schema-2].  For\
    \ clarity, unqualified elements in schema\n   definitions are in the XML schema\
    \ namespace:\n      xmlns=\"http://www.w3.org/2001/XMLSchema\"\n   References\
    \ to XML Voucher schema defined herein use the prefix \"gvl\"\n   and are in the\
    \ namespace:\n      xmlns:gvl=\"urn:ietf:params:xml:ns:vts-lang\"\n   This namespace\
    \ URI for elements defined by this document is a URN\n   [URN] that uses the namespace\
    \ identifier 'ietf', defined by\n   [URN-NS-IETF] and extended by [XML-Registry].\n\
    \   This namespace is also used for unqualified elements in voucher\n   examples.\n"
- title: 6.1.  <Voucher>
  contents:
  - "6.1.  <Voucher>\n   The <Voucher> element contains <Title>, <Provider>, and <Value>\n\
    \   elements and optionally contains <Description>, <Issuer>, <Holder>,\n   <Collector>,\
    \ <ValidPeriod>, and <Condition> elements.  These sub-\n   elements are defined\
    \ in the following sections.\n   The <Voucher> element is defined by the following\
    \ schema:\n      <element name=\"Voucher\" type=\"gvl:VoucherType\"/>\n      <complexType\
    \ name=\"VoucherType\">\n       <sequence>\n        <element ref=\"gvl:Title\"\
    />\n        <element ref=\"gvl:Description\" minOccurs=\"0\"/>\n        <element\
    \ ref=\"gvl:Provider\"/>\n        <element ref=\"gvl:Issuer\" minOccurs=\"0\"\
    />\n        <element ref=\"gvl:Holder\" minOccurs=\"0\"/>\n        <element ref=\"\
    gvl:Collector\" minOccurs=\"0\"/>\n        <element ref=\"gvl:Value\"/>\n    \
    \    <element ref=\"gvl:Merchandise\" minOccurs=\"0\"/>\n        <element ref=\"\
    gvl:ValidPeriod\" minOccurs=\"0\"/>\n        <element ref=\"gvl:Conditions\" \
    \ minOccurs=\"0\"/>\n       </sequence>\n      </complexType>\n"
- title: 6.2.  <Title>
  contents:
  - "6.2.  <Title>\n   The <Title> element contains a simpletext title of the voucher.\
    \  This\n   is mainly for listing the entities stored in a wallet system.\n  \
    \ The <Title> element has no attribute.\n   The <Title> element is defined by\
    \ the following schema:\n      <element name=\"Title\" type=\"string\"/>\n"
- title: 6.3.  <Description>
  contents:
  - "6.3.  <Description>\n   The <Description> element contains a simpletext description\
    \ of the\n   voucher.  This is mainly for listing the entities stored in a wallet\n\
    \   system.\n   The <Description> element has no attribute.\n   The <Description>\
    \ element is defined by the following schema:\n      <element name=\"Description\"\
    \ type=\"string\"/>\n"
- title: 6.4.  <Provider>
  contents:
  - "6.4.  <Provider>\n   The <Provider> element may contain any element that is used\
    \ to\n   specify or restrict the VTS Provider of the voucher.  The sub-\n   elements\
    \ contained in this element depend on the implementation of\n   the VTS.\n   An\
    \ implementation of a wallet system may use this information to\n   identify and/or\
    \ authenticate the VTS Provider when the VTS plug-in is\n   registered (see Section\
    \ 7 of [VTS-API]).  These implementation-\n   specific elements of the VTS can\
    \ be extended using [XML-ns].  An\n   example of such a schema definition is described\
    \ in Section 8.\n   The <Provider> element has a string-type \"name\" attribute\
    \ that is\n   used to specify the name of the VTS Provider.\n   The <Provider>\
    \ element is defined by the following schema:\n      <element name=\"Provider\"\
    \ type=\"gvl:RoleType\"/>\n      <complexType name=\"RoleType\" mixed=\"true\"\
    >\n       <sequence>\n        <any namespace=\"##any\" minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </sequence>\n       <attribute name=\"name\" type=\"string\"\
    />\n      </complexType>\n"
- title: 6.5.  <Issuer>
  contents:
  - "6.5.  <Issuer>\n   The <Issuer> element may contain any element that is used\
    \ to specify\n   or restrict the Issuer of the voucher.\n   The Issuer of the\
    \ voucher is generally managed by the VTS [VTS-API].\n   There is no need to specify\
    \ the Issuer of the voucher using this\n   element if there are no restrictions\
    \ on the Issuer.\n   An implementation of a VTS may use this element to describe\
    \ the\n   authentication data and/or qualification information of the Issuer.\n\
    \   This implementation-specific information can be extended through\n   sub-elements\
    \ using [XML-ns].  An example of such a schema definition\n   is described in\
    \ Section 8.\n   The <Issuer> element has a string-type \"name\" attribute that\
    \ is used\n   to specify the name of the Issuer.\n   The <Issuer> element is defined\
    \ by the following schema:\n      <element name=\"Issuer\" type=\"gvl:RoleType\"\
    />\n   The <RoleType> element type is defined in Section 6.4.\n   If the <Issuer>\
    \ element is omitted, it MUST be interpreted that there\n   are no restrictions\
    \ on the Issuer.\n"
- title: 6.6.  <Holder>
  contents:
  - "6.6.  <Holder>\n   The <Holder> element may contain any element that is used\
    \ to specify\n   or restrict the Holder of the voucher.\n   The Holder of the\
    \ voucher is generally managed by the VTS [VTS-API].\n   There is no need to specify\
    \ the Holder of the voucher using this\n   element if there are no restrictions\
    \ on the Holder.\n   An implementation of a VTS may use this element to describe\
    \ the\n   authentication data and/or qualification information of the Holder.\n\
    \   This implementation-specific information can be extended through\n   sub-elements\
    \ using [XML-ns].\n   The <Holder> element has a string-type \"name\" attribute\
    \ that is used\n   to specify the name of the Holder.\n   The <Holder> element\
    \ is defined by the following schema:\n      <element name=\"Holder\" type=\"\
    gvl:RoleType\"/>\n   The <RoleType> element type is defined in Section 6.4.\n\
    \   If the <Holder> element is omitted, it MUST be interpreted that there\n  \
    \ are no restrictions on the Holder.\n"
- title: 6.7.  <Collector>
  contents:
  - "6.7.  <Collector>\n   The <Collector> element may contain any element that is\
    \ used to\n   specify or restrict the Collector of the voucher.\n   There is no\
    \ need to specify the Collector of the voucher using this\n   element if there\
    \ are no restrictions on the Collector.\n   An implementation of a VTS may use\
    \ this element to describe the\n   authentication data and/or qualification information\
    \ of the\n   Collector.  This implementation-specific information can be extended\n\
    \   through sub-elements using [XML-ns].\n   The <Collector> element has a string-type\
    \ \"name\" attribute that is\n   used to specify the name of the Collector.\n\
    \   The <Collector> element is defined by the following schema:\n      <element\
    \ name=\"Collector\" type=\"gvl:RoleType\"/>\n   The <RoleType> element type is\
    \ defined in Section 6.4.\n   If the <Collector> element is omitted, it MUST be\
    \ interpreted that\n   there are no restrictions on the Collector.\n"
- title: 6.8.  <Value>
  contents:
  - "6.8.  <Value>\n   The <Value> element optionally contains a <Fixed> or <Ratio>\
    \ element\n   but not both.  These sub-elements are defined in the following\n\
    \   sections.\n   The <Value> element has a \"type\" attribute that is used to\
    \ specify\n   the value process type.  This attribute is provided to calculate\
    \ the\n   amount paid when the vouchers are redeemed at Merchant site, etc.\n\
    \   The following identifiers are defined for the \"type\" attribute.\n   Exchange:\
    \ Items specified in the <Merchandise> element can be claimed\n      in exchange\
    \ for the voucher.  If this type is selected, neither\n      the <Ratio> nor the\
    \ <Fixed> element MUST be specified.  Note that\n      this value process type\
    \ has the same meaning as:\n      <Value type=\"discount\"><Ratio percentage=\"\
    100\"/></Value>\n   Discount: Items specified in the <Merchandise> element can\
    \ be\n      purchased at the discount price calculated by the <Ratio> or\n   \
    \   <Fixed> element.\n   Monetary: Items specified in the <Merchandise> element\
    \ can be\n      purchased using the value of the voucher.  (Note: if the\n   \
    \   <Merchandise> element is not specified, the voucher can be used\n      for\
    \ any purchase.)  If this type is selected, the <Fixed> element\n      MUST be\
    \ specified.\n   The <Value> element also has a \"spend\" attribute that is used\
    \ to\n   specify the number of vouchers to be redeemed for claiming the goods,\n\
    \   services, or monetary value specified.  For example, if \"n\" (>0) is\n  \
    \ specified, goods can be claimed in exchange for \"n sheets of\"\n   vouchers.\
    \  (Note: Multiple vouchers for the same Voucher Component\n   must exist in this\
    \ case.)  If \"0\" is specified, it can be used\n   repeatedly.\n   If the \"\
    spend\" attribute or the whole element is omitted, it MUST be\n   interpreted\
    \ that \"1\" is specified for the \"spend\" attribute.\n   The <Value> element\
    \ is defined by the following schema:\n      <element name=\"Value\" type=\"gvl:ValueType\"\
    />\n      <complexType name=\"ValueType\">\n       <sequence minOccurs=\"0\">\n\
    \        <choice>\n         <element name=\"Ratio\" type=\"gvl:RatioValueType\"\
    />\n         <element name=\"Fixed\" type=\"gvl:FixedValueType\"/>\n        </choice>\n\
    \       </sequence>\n       <attribute name=\"type\" type=\"gvl:ValueProcessType\"\
    \n                  use=\"required\"/>\n       <attribute name=\"spend\" type=\"\
    nonNegativeInteger\"\n                  default=\"1\"/>\n      </complexType>\n\
    \   The <ValueProcessType> element type is defined by the following\n   schema:\n\
    \      <simpleType name=\"ValueProcessType\">\n       <restriction base=\"string\"\
    >\n        <enumeration value=\"exchange\"/>\n        <enumeration value=\"discount\"\
    />\n        <enumeration value=\"monetary\"/>\n       </restriction>\n      </simpleType>\n"
- title: 6.8.1.  <Ratio>
  contents:
  - "6.8.1.  <Ratio>\n   The <Ratio> element does not contain any contents.\n   The\
    \ <Ratio> element has a \"percentage\" attribute that is used to\n   specify the\
    \ discount ratio of the price of the corresponding\n   merchandize in percentage.\n\
    \   The <RatioValueType> element type is defined by the following schema:\n  \
    \    <complexType name=\"RatioValueType\">\n       <attribute name=\"percentage\"\
    \ use=\"required\">\n        <simpleType>\n         <restriction base=\"float\"\
    >\n          <maxInclusive value=\"100\"/>\n         </restriction>\n        </simpleType>\n\
    \       </attribute>\n      </complexType>\n"
- title: 6.8.2.  <Fixed>
  contents:
  - "6.8.2.  <Fixed>\n   The <Fixed> element does not contain any contents.\n   The\
    \ <Fixed> element has \"currency\" and \"amount\" attributes and\n   optionally\
    \ a \"decimalPower\" attribute as follows:\n   Currency: Provides the unit of\
    \ the monetary value in the three letter\n      ISO currency code [ISO4217]. \
    \ For example, US dollars is \"USD\".\n   Amount: Provides the amount of the monetary\
    \ value per voucher.\n   DecimalPower: Provides the number of decimal digits from\
    \ the decimal\n      point applied to the base for the \"amount\" attribute above.\
    \  If\n      the \"decimalPower\" attribute is omitted, it MUST be interpreted\n\
    \      that \"0\" is specified for the \"decimalPower\" attribute.\n   For example,\
    \ with a dollar currency denominated in cents, \"1\" is\n   specified for the\
    \ \"amount\" attribute, and \"-2\" is specified for the\n   \"decimalPower\" attribute.\
    \  Alternately, \"0.01\" is specified for the\n   \"amount\" attribute, and the\
    \ \"decimalPower\" attribute is omitted.\n   The <FixedValueType> type is defined\
    \ follows:\n      <complexType name=\"FixedValueType\">\n       <attribute name=\"\
    currency\" type=\"string\" use=\"required\"/>\n       <attribute name=\"amount\"\
    \ type=\"float\" use=\"required\"/>\n       <attribute name=\"decimalPower\" type=\"\
    short\" default=\"0\"/>\n      </complexType>\n"
- title: 6.9.  <Merchandise>
  contents:
  - "6.9.  <Merchandise>\n   The <Merchandise> element may contain any element used\
    \ to specify or\n   restrict the goods or services rendered when the voucher is\
    \ redeemed.\n   The sub-elements contained in this element depend on the application\n\
    \   of the voucher and are left to the other domain-specific\n   specifications.\
    \  Domain-specific elements can be extended as sub-\n   elements using [XML-ns].\n\
    \   This element is intended to be interpreted by a collecting system.\n   An\
    \ implementation of a wallet system does not have to use this\n   element.  Any\
    \ restrictions applied should also be described in the\n   <Description> element\
    \ or the <Conditions> elements in natural\n   language form to enable users to\
    \ check the restrictions.\n   The <Merchandise> element does not have any attribute.\n\
    \   The <Merchandise> element is defined by the following schema:\n      <element\
    \ name=\"Merchandise\" type=\"gvl:MerchandiseType\"/>\n      <complexType name=\"\
    MerchandiseType\" mixed=\"true\">\n       <sequence>\n        <any namespace=\"\
    ##any\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </sequence>\n      </complexType>\n"
- title: 6.10.  <ValidPeriod>
  contents:
  - "6.10.  <ValidPeriod>\n   The <ValidPeriod> element does not contain any contents.\n\
    \   The <ValidPeriod> element has dateTime-type \"start\" and \"end\"\n   attributes\
    \ that are used to place limits on the validity of the\n   voucher.\n   The <ValidPeriod>\
    \ element is defined by the following schema:\n      <element name=\"ValidPeriod\"\
    \ type=\"gvl:ValidPeriodType\"/>\n      <complexType name=\"ValidPeriodType\"\
    >\n        <attribute name=\"start\" type=\"dateTime\"/>\n        <attribute name=\"\
    end\" type=\"dateTime\"/>\n      </complexType>\n   If the \"start\" attribute\
    \ is omitted, it MUST be interpreted that the\n   voucher is valid on any date\
    \ up to that specified by the end\n   attribute (inclusive).  If the \"end\" attribute\
    \ is omitted, it MUST be\n   interpreted that the voucher is valid from the start\
    \ attribute with\n   no expiry.  If neither attribute is specified or the whole\
    \ element is\n   omitted, it MUST be interpreted that the voucher is valid at\
    \ any\n   time.\n"
- title: 6.11.  <Conditions>
  contents:
  - "6.11.  <Conditions>\n   The <Conditions> element contains any other restrictions\
    \ or\n   conditions applied.  This is intended to cover contracts between the\n\
    \   issuer and the holder of the voucher in natural language form.\n   An implementation\
    \ of a wallet system SHOULD provide a means of\n   displaying the text in this\
    \ element.\n   The <Conditions> element has no attribute.\n   The <Conditions>\
    \ element is defined by the following schema:\n      <element name=\"Conditions\"\
    \ type=\"string\"/>\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document uses URNs to describe XML namespaces\
    \ and XML schemas\n   conforming to a registry mechanism described in [XML-Registry].\
    \  IANA\n   has registered two URI assignments.\n   Registration request for the\
    \ vts-lang namespace:\n   URI: urn:ietf:params:xml:ns:vts-lang\n   Registrant\
    \ Contact: See the \"Authors' Addresses\" section of this\n   document.\n   XML:\
    \ None.  Namespace URIs do not represent an XML specification.\n   Registration\
    \ request for the vts-lang XML schema:\n   URI: urn:ietf:params:xml:schema:vts-lang\n\
    \   Registrant Contact: See the \"Authors' Addresses\" section of this\n   document.\n\
    \   XML:\n      BEGIN\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    \
    \  <schema\n        targetNamespace=\"urn:ietf:params:xml:ns:vts-lang\"\n    \
    \    xmlns:gvl=\"urn:ietf:params:xml:ns:vts-lang\"\n        xmlns=\"http://www.w3.org/2001/XMLSchema\"\
    \n        elementFormDefault=\"qualified\">\n      <element name=\"Voucher\" type=\"\
    gvl:VoucherType\"/>\n      <complexType name=\"VoucherType\">\n       <sequence>\n\
    \        <element ref=\"gvl:Title\"/>\n        <element ref=\"gvl:Description\"\
    \ minOccurs=\"0\"/>\n        <element ref=\"gvl:Provider\"/>\n        <element\
    \ ref=\"gvl:Issuer\" minOccurs=\"0\"/>\n        <element ref=\"gvl:Holder\" minOccurs=\"\
    0\"/>\n        <element ref=\"gvl:Collector\" minOccurs=\"0\"/>\n        <element\
    \ ref=\"gvl:Value\"/>\n        <element ref=\"gvl:Merchandise\" minOccurs=\"0\"\
    />\n        <element ref=\"gvl:ValidPeriod\" minOccurs=\"0\"/>\n        <element\
    \ ref=\"gvl:Conditions\"  minOccurs=\"0\"/>\n       </sequence>\n      </complexType>\n\
    \      <element name=\"Title\" type=\"string\"/>\n      <element name=\"Description\"\
    \ type=\"string\"/>\n      <element name=\"Provider\" type=\"gvl:RoleType\"/>\n\
    \      <element name=\"Issuer\"   type=\"gvl:RoleType\"/>\n      <element name=\"\
    Holder\"   type=\"gvl:RoleType\"/>\n      <element name=\"Collector\"   type=\"\
    gvl:RoleType\"/>\n      <complexType name=\"RoleType\" mixed=\"true\">\n     \
    \  <sequence>\n        <any namespace=\"##any\" minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </sequence>\n       <attribute name=\"name\" type=\"string\"/>\n  \
    \    </complexType>\n      <element name=\"Value\" type=\"gvl:ValueType\"/>\n\
    \      <complexType name=\"ValueType\">\n       <sequence minOccurs=\"0\">\n \
    \       <choice>\n         <element name=\"Ratio\" type=\"gvl:RatioValueType\"\
    />\n         <element name=\"Fixed\" type=\"gvl:FixedValueType\"/>\n        </choice>\n\
    \       </sequence>\n       <attribute name=\"type\" type=\"gvl:ValueProcessType\"\
    \n                  use=\"required\"/>\n       <attribute name=\"spend\" type=\"\
    nonNegativeInteger\"\n                  default=\"1\"/>\n      </complexType>\n\
    \      <simpleType name=\"ValueProcessType\">\n       <restriction base=\"string\"\
    >\n        <enumeration value=\"exchange\"/>\n        <enumeration value=\"discount\"\
    />\n        <enumeration value=\"monetary\"/>\n       </restriction>\n      </simpleType>\n\
    \      <complexType name=\"RatioValueType\">\n       <attribute name=\"percentage\"\
    \ use=\"required\">\n        <simpleType>\n         <restriction base=\"float\"\
    >\n          <maxInclusive value=\"100\"/>\n         </restriction>\n        </simpleType>\n\
    \       </attribute>\n      </complexType>\n      <complexType name=\"FixedValueType\"\
    >\n       <attribute name=\"currency\" type=\"string\" use=\"required\"/>\n  \
    \     <attribute name=\"amount\" type=\"float\" use=\"required\"/>\n       <attribute\
    \ name=\"decimalPower\" type=\"short\" default=\"0\"/>\n      </complexType>\n\
    \      <element name=\"Merchandise\" type=\"gvl:MerchandiseType\"/>\n      <complexType\
    \ name=\"MerchandiseType\" mixed=\"true\">\n       <sequence>\n        <any namespace=\"\
    ##any\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </sequence>\n      </complexType>\n\
    \      <element name=\"ValidPeriod\" type=\"gvl:ValidPeriodType\"/>\n      <complexType\
    \ name=\"ValidPeriodType\">\n        <attribute name=\"start\" type=\"dateTime\"\
    />\n        <attribute name=\"end\" type=\"dateTime\"/>\n      </complexType>\n\
    \      <element name=\"Conditions\" type=\"string\"/>\n     </schema>\n     END\n"
- title: 8.  VTS Schema Example
  contents:
  - "8.  VTS Schema Example\n   An example of the schema definition for a VTS implementation\
    \ is\n   described below.\n      <?xml version=\"1.0\"?>\n      <schema\n    \
    \   targetNamespace=\"http://www.example.com/vts\"\n       xmlns:vts=\"http://www.example.com/vts\"\
    \n       xmlns=\"http://www.w3.org/2001/XMLSchema\"\n       elementFormDefault=\"\
    qualified\">\n       <element name=\"Version\" type=\"string\"/>\n       <element\
    \ name=\"KeyInfo\" type=\"hexBinary\"/>\n      </schema>\n   Using this schema\
    \ definition, the <vts:Version> can be used for\n   specifying the VTS version\
    \ number, and the <vts:KeyInfo> element can\n   be used for specifying the Issuer\
    \ in the Voucher Component, as shown\n   in Section 5.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The VTS must provide a means to prevent forgery,\
    \ alteration,\n   duplicate-redemption, reproduction of a voucher, and non-repudiation\n\
    \   of transactions, as described in Section 3.2 of [VTS].  This will\n   commonly\
    \ require the presence of a unique serial number or the like\n   in each Voucher\
    \ instance, usually outside the Voucher Component.\n   These security requirements,\
    \ however, mainly follow the VTS plug-ins\n   and their protocols.  This document\
    \ assumes that the VTS plug-ins are\n   trusted and are installed by some means;\
    \ e.g., manually checked as\n   are other download applications.\n   The Voucher\
    \ Component, however, defines restrictions on the VTS\n   Provider (or VTS plug-in),\
    \ and, if this information is altered,\n   incorrect VTS plug-ins not accepted\
    \ by the issuer could be used,\n   allowing a forged voucher to be verified as\
    \ if it were valid.  To\n   prevent this situation, the Voucher Component should\
    \ be stored and\n   acquired securely; e.g., downloaded from a trusted party using\
    \ a\n   secure communication channel, such as [TLS] or [IPSEC], or secured by\n\
    \   the digital signature of a trusted party [XMLDSIG].\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The following persons, in alphabetic order, contributed\
    \ substantially\n   to the material herein:\n      Ian Grigg\n      Renato Iannella\n\
    \      Yoshiaki Nakajima\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [ISO4217]      \"Codes for the representation of\
    \ currencies and\n                  funds\", ISO 4217, 1995.\n   [RFC2119]   \
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [URN]          Moats, R., \"URN\
    \ Syntax\", RFC 2141, May 1997.\n   [URN-NS-IETF]  Moats, R., \"A URN Namespace\
    \ for IETF Documents\", RFC\n                  2648, August 1999.\n   [XML]  \
    \        \"Extensible Mark Up Language (XML) 1.0 (Second\n                  Edition)\"\
    , A W3C Recommendation,\n                  <http://www.w3.org/TR/REC-xml>, October\
    \ 2000.\n   [XML-ns]       \"Namespaces in XML\", A W3C Recommendation,\n    \
    \              <http://www.w3.org/TR/REC-xml-names>, January 1999.\n   [XML-Registry]\
    \ Mealling, M., \"The IETF XML Registry\", BCP 81, RFC\n                  3688,\
    \ January 2004.\n   [XML-Schema-1] Thompson, H., Beech, D., Maloney, M., and N.\n\
    \                  Mendelsohn, \"XML Schema Part 1: Structures W3C\n         \
    \         Recommendation.\", <http://www.w3.org/TR/xmlschema-1/>,\n          \
    \        May 2001.\n   [XML-Schema-2] Biron, P. and A. Malhotra, \"XML Schema\
    \ Part 2:\n                  Datatypes W3C Recommendation.\",\n              \
    \    <http://www.w3.org/TR/xmlschema-2/>, May 2001.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [VTS]          Fujimura, K. and D. Eastlake,\
    \ \"Requirements and Design\n                  for Voucher Trading System (VTS)\"\
    , RFC 3506, March\n                  2003.\n   [IPSEC]        Thayer, R., Doraswamy,\
    \ N., and R. Glenn, \"IP Security\n                  Document Roadmap\", RFC 2411,\
    \ November 1998.\n   [TLS]          Dierks, T. and C. Allen, \"The TLS Protocol\
    \ Version\n                  1.0\", RFC 2246, January 1999.\n   [VTS-API]    \
    \  Terada, M. and K. Fujimura, \"Voucher Trading System\n                  Application\
    \ Programming Interface (VTS-API)\", RFC\n                  4154, September 2005.\n\
    \   [XMLDSIG]      Eastlake 3rd, D., Reagle, J., and D. Solo,\n              \
    \    \"(Extensible Markup Language) XML-Signature Syntax and\n               \
    \   Processing\", RFC 3275, March 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ko Fujimura\n   NTT Corporation\n   1-1 Hikari-no-oka,\
    \ Yokosuka-shi, Kanagawa, 239-0847 JAPAN\n   Phone: +81-(0)46-859-3053\n   Fax:\
    \   +81-(0)46-855-1730\n   EMail: fujimura.ko@lab.ntt.co.jp\n   Masayuki Terada\n\
    \   NTT DoCoMo, Inc.\n   3-5 Hikari-no-oka, Yokosuka-shi, Kanagawa, 239-8536 JAPAN\n\
    \   Phone: +81-(0)46-840-3809\n   Fax:   +81-(0)46-840-3705\n   EMail: te@rex.yrp.nttdocomo.co.jp\n\
    \   Donald E. Eastlake 3rd\n   Motorola Laboratories\n   155 Beaver Street\n \
    \  Milford, MA 01757 USA\n   Phone: 1-508-786-7554 (work)\n          1-508-634-2066\
    \ (home)\n   EMail: Donald.Eastlake@motorola.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
