- title: __initial_text__
  contents:
  - '       UDP Checksum Complement in the Network Time Protocol (NTP)

    '
- title: Abstract
  contents:
  - "Abstract\n   The Network Time Protocol (NTP) allows clients to synchronize to\
    \ a\n   time server using timestamped protocol messages.  To facilitate\n   accurate\
    \ timestamping, some implementations use hardware-based\n   timestamping engines\
    \ that integrate the accurate transmission time\n   into every outgoing NTP packet\
    \ during transmission.  Since these\n   packets are transported over UDP, the\
    \ UDP Checksum field is then\n   updated to reflect this modification.  This document\
    \ proposes an\n   extension field that includes a 2-octet Checksum Complement,\
    \ allowing\n   timestamping engines to reflect the checksum modification in the\
    \ last\n   2 octets of the packet rather than in the UDP Checksum field.  The\n\
    \   behavior defined in this document is interoperable with existing NTP\n   implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7821.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Intermediate Entities ......................................3\n  \
    \    1.2. Updating the UDP Checksum ..................................4\n   2.\
    \ Conventions Used in This Document ...............................5\n      2.1.\
    \ Terminology ................................................5\n      2.2. Abbreviations\
    \ ..............................................6\n   3. Using the UDP Checksum\
    \ Complement in NTP ........................6\n      3.1. Overview ...................................................6\n\
    \      3.2. Checksum Complement in NTP Packets .........................7\n  \
    \         3.2.1. Using the Checksum Complement .......................7\n    \
    \       3.2.2. Transmission of NTP with Checksum Complement ........8\n      \
    \     3.2.3. Updates of NTP with Checksum Complement .............8\n        \
    \   3.2.4. Reception of NTP with Checksum Complement ...........8\n      3.3.\
    \ Interoperability with Existing Implementations .............9\n      3.4. The\
    \ Checksum Complement and Authentication .................9\n   4. Security Considerations\
    \ ........................................10\n   5. IANA Considerations ............................................10\n\
    \   6. References .....................................................11\n  \
    \    6.1. Normative References ......................................11\n    \
    \  6.2. Informative References ....................................11\n   Appendix\
    \ A. Checksum Complement Usage Example .....................13\n   Acknowledgments\
    \ ...................................................14\n   Author's Address ..................................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Network Time Protocol [NTPv4] allows clients to synchronize\
    \ their\n   clocks to a time server by exchanging NTP packets.  The increasing\n\
    \   demand for highly accurate clock synchronization motivates\n   implementations\
    \ that provide accurate timestamping.\n"
- title: 1.1.  Intermediate Entities
  contents:
  - "1.1.  Intermediate Entities\n   In this document, we use the term \"intermediate\
    \ entity\" to refer to\n   an entity that resides on the path between the sender\
    \ and the\n   receiver of an NTP packet and that modifies this NTP packet en route.\n\
    \   In order to facilitate accurate timestamping, an implementation can\n   use\
    \ a hardware-based timestamping engine, as shown in Figure 1.  In\n   such cases,\
    \ NTP packets are sent and received by a software layer,\n   whereas a timestamping\
    \ engine modifies every outgoing NTP packet by\n   incorporating its accurate\
    \ transmission time into the\n   <Transmit Timestamp> field in the packet.\n \
    \                     NTP client/server\n                    +-------------------+\n\
    \                    |                   |\n                    |   +-----------+\
    \   |\n     Software       |   |    NTP    |   |\n                    |   | protocol\
    \  |   |\n                    |   +-----+-----+   |\n                    |   \
    \      |         |     +-----------------------+\n                    |   +-----+-----+\
    \   |    / Intermediate entity    |\n                    |   | Accurate  |   |\
    \   /  in charge of:          |\n     ASIC/FPGA      |   | Timestamp |   |  /__\
    \ - Timestamping         |\n                    |   |  engine   |   |     |- Updating\
    \ checksum or |\n                    |   +-----------+   |     |  Checksum Complement\
    \  |\n                    |         |         |     +-----------------------+\n\
    \                    +---------+---------+\n                              |\n\
    \                              |NTP packets\n                              |\n\
    \                          ___ v _\n                         /   \\_/ \\__\n \
    \                       /           \\_\n                       /     IP     \
    \ /\n                       \\_  Network  /\n                        /       \
    \    \\\n                        \\__/\\_   ___/\n                           \
    \   \\_/\n     ASIC: Application-Specific Integrated Circuit\n     FPGA: Field-Programmable\
    \ Gate Array\n                  Figure 1: Accurate Timestamping in NTP\n   The\
    \ accuracy of clock synchronization over packet networks is highly\n   sensitive\
    \ to delay jitters in the underlying network; this\n   dramatically affects clock\
    \ accuracy.  To address this challenge, the\n   Precision Time Protocol (PTP)\
    \ [IEEE1588] defines Transparent Clocks\n   (TCs) -- switches and routers that\
    \ improve end-to-end clock accuracy\n   by updating a \"Correction Field\" in\
    \ the PTP packet by adding the\n   latency caused by the current TC.  In NTP,\
    \ no equivalent entity is\n   currently defined, but future versions of NTP may\
    \ define an\n   intermediate node that modifies en-route NTP packets using a\n\
    \   \"Correction Field\".\n"
- title: 1.2.  Updating the UDP Checksum
  contents:
  - "1.2.  Updating the UDP Checksum\n   When the UDP payload is modified by an intermediate\
    \ entity, the UDP\n   Checksum field needs to be updated to maintain its correctness.\
    \  When\n   using UDP over IPv4 [UDP], an intermediate entity that cannot update\n\
    \   the value of the UDP Checksum has no choice except to assign a value\n   of\
    \ zero to the Checksum field, causing the receiver to ignore the\n   Checksum\
    \ field and potentially accept corrupted packets.  UDP over\n   IPv6, as defined\
    \ in [IPv6], does not allow a zero checksum, except in\n   specific cases [ZeroChecksum].\
    \  As discussed in [ZeroChecksum], the\n   use of a zero checksum is generally\
    \ not recommended and should be\n   avoided to the extent possible.\n   Since\
    \ an intermediate entity only modifies a specific field in the\n   packet, i.e.,\
    \ the Timestamp field, the UDP Checksum update can be\n   performed incrementally,\
    \ using the concepts presented in [Checksum].\n   This document defines the Checksum\
    \ Complement for [NTPv4].  The\n   Checksum Complement is a 2-octet field that\
    \ resides at the end of the\n   UDP payload.  It allows intermediate entities\
    \ to update NTP packets\n   and maintain the correctness of the UDP Checksum by\
    \ modifying the\n   last 2 octets of the packet, instead of updating the UDP Checksum\n\
    \   field.  This is performed by adding an NTP extension field at the end\n  \
    \ of the packet, in which the last 2 octets are used as a Checksum\n   Complement.\n\
    \   The usage of the Checksum Complement can in some cases simplify the\n   implementation,\
    \ because if the packet data is processed in serial\n   order, it is simpler to\
    \ first update the Timestamp field and then\n   update the Checksum Complement,\
    \ rather than to update the timestamp\n   and then update the UDP Checksum residing\
    \ at the UDP header.  Note\n   that while it is not impossible to implement a\
    \ hardware timestamper\n   that updates the UDP Checksum, using the Checksum Complement\
    \ instead\n   can significantly simplify the implementation.\n   Note that the\
    \ software layer and the intermediate entity (see\n   Figure 1) are two modules\
    \ in a single NTP clock.  It is assumed that\n   these two modules are in agreement\
    \ regarding whether transmitted NTP\n   packets include the Checksum Complement\
    \ or not.\n   [RFC7820] defines the Checksum Complement mechanism for the One-Way\n\
    \   Active Measurement Protocol (OWAMP) and the Two-Way Active\n   Measurement\
    \ Protocol (TWAMP).  A similar mechanism is presented in\n   Annex E of [IEEE1588].\n"
- title: 2.  Conventions Used in This Document
  contents:
  - '2.  Conventions Used in This Document

    '
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [KEYWORDS].\n"
- title: 2.2.  Abbreviations
  contents:
  - "2.2.  Abbreviations\n   MAC      Message Authentication Code\n   NTP      Network\
    \ Time Protocol\n   PTP      Precision Time Protocol\n   UDP      User Datagram\
    \ Protocol\n"
- title: 3.  Using the UDP Checksum Complement in NTP
  contents:
  - '3.  Using the UDP Checksum Complement in NTP

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The UDP Checksum Complement is a 2-octet field that is appended\
    \ at\n   the end of the UDP payload, using an NTP extension field.  Figure 2\n\
    \   illustrates the packet format of an NTP packet with a Checksum\n   Complement\
    \ extension.\n                         +--------------------------------+\n  \
    \                       |        IPv4/IPv6 Header        |\n                 \
    \        +--------------------------------+\n                         |      \
    \     UDP Header           |\n                         +--------------------------------+\n\
    \                 ^       |                                |\n               \
    \  |       |           NTP packet           |\n                 |       |    \
    \                            |\n                 |       +--------------------------------+\n\
    \                UDP      | Optional NTP Extension Fields  |\n              Payload\
    \    +--------------------------------+\n                 |       |    UDP Checksum\
    \ Complement     |\n                 |       |   Extension Field (28 octets) \
    \ |\n                 v       +--------------------------------+\n           \
    \    Figure 2: Checksum Complement in NTP Packets\n   The Checksum Complement\
    \ is used to compensate for changes performed\n   in the NTP packet by intermediate\
    \ entities, as described in the\n   Introduction (Section 1).  An example of the\
    \ usage of the Checksum\n   Complement is provided in Appendix A.\n"
- title: 3.2.  Checksum Complement in NTP Packets
  contents:
  - "3.2.  Checksum Complement in NTP Packets\n   NTP is transported over UDP, either\
    \ over IPv4 or over IPv6.  This\n   document applies to both NTP over IPv4 and\
    \ NTP over IPv6.\n   NTP packets may include one or more extension fields, as\
    \ defined in\n   [NTPv4].  The Checksum Complement in NTP packets resides in a\n\
    \   dedicated NTP extension field, as shown in Figure 3.\n   If the NTP packet\
    \ includes more than one extension field, the\n   Checksum Complement extension\
    \ is always the last extension field.\n   Thus, the Checksum Complement is the\
    \ last 2 octets in the UDP payload\n   and is located at (UDP Length - 2 octets)\
    \ after the beginning of the\n   UDP header.  Note that the Checksum Complement\
    \ is not used in\n   authenticated NTP packets, as further discussed in Section\
    \ 3.4.\n"
- title: 3.2.1.  Using the Checksum Complement
  contents:
  - "3.2.1.  Using the Checksum Complement\n   As described in Section 1, an intermediate\
    \ entity that updates the\n   timestamp in the NTP packet can use the Checksum\
    \ Complement in order\n   to maintain the correctness of the UDP Checksum field.\
    \  Specifically,\n   if the value of the timestamp is updated, this update yields\
    \ a change\n   in the UDP Checksum value; thus, the intermediate entity assigns\
    \ a\n   new value in the Checksum Complement that cancels this change,\n   leaving\
    \ the current value of the UDP Checksum correct.  An example of\n   the usage\
    \ of the Checksum Complement is provided in Appendix A.\n     0              \
    \     1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Field Type           |      Length = 28 octets       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                              MBZ                              |\n    |     \
    \                                                          |\n    |          \
    \                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |               \
    \                |      Checksum Complement      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 3: NTP Checksum Complement Extension Field\n   Field Type\n\
    \      A dedicated Field Type value is used to identify the Checksum\n      Complement\
    \ extension.  See Section 5.\n   Length\n      The Checksum Complement extension\
    \ field length is 28 octets.\n      This length guarantees that the host that\
    \ receives the packet\n      parses it correctly, whether the packet includes\
    \ a MAC or not.\n      [RFC7822] provides further details about the length of\
    \ an\n      extension field in the absence of a MAC.\n   MBZ\n      The extension\
    \ field includes a 22-octet MBZ (MUST be zero) field.\n      This field MUST be\
    \ set to 0 and MUST be ignored by the recipient.\n      The MBZ field is used\
    \ for padding the extension field to\n      28 octets.\n   Checksum Complement\n\
    \      The Checksum Complement extension includes the Checksum Complement\n  \
    \    field, residing in the last 2 octets of the extension.\n"
- title: 3.2.2.  Transmission of NTP with Checksum Complement
  contents:
  - "3.2.2.  Transmission of NTP with Checksum Complement\n   The transmitter of an\
    \ NTP packet MAY include a Checksum Complement\n   extension field.\n"
- title: 3.2.3.  Updates of NTP with Checksum Complement
  contents:
  - "3.2.3.  Updates of NTP with Checksum Complement\n   An intermediate entity that\
    \ receives and alters an NTP packet\n   containing a Checksum Complement extension\
    \ MAY use the Checksum\n   Complement to maintain a correct UDP Checksum value.\n"
- title: 3.2.4.  Reception of NTP with Checksum Complement
  contents:
  - "3.2.4.  Reception of NTP with Checksum Complement\n   This document does not\
    \ impose new requirements on the receiving end\n   of an NTP packet.\n   The UDP\
    \ layer at the receiving end verifies the UDP Checksum of\n   received NTP packets,\
    \ and the NTP layer SHOULD ignore the Checksum\n   Complement extension field.\n"
- title: 3.3.  Interoperability with Existing Implementations
  contents:
  - "3.3.  Interoperability with Existing Implementations\n   The behavior defined\
    \ in this document does not impose new\n   requirements on the reception of NTP\
    \ packets beyond the requirements\n   defined in [RFC7822].  Note that, as defined\
    \ in [RFC7822], a host\n   that receives an NTP message with an unknown extension\
    \ field SHOULD\n   ignore the extension field and MAY drop the packet if policy\
    \ requires\n   it.  Thus, transmitters and intermediate entities that support\
    \ the\n   Checksum Complement can transparently interoperate with receivers\n\
    \   that are not Checksum Complement compliant, as long as these\n   receivers\
    \ ignore unknown extension fields.  It is noted that existing\n   implementations\
    \ that discard packets with unknown extension fields\n   cannot interoperate with\
    \ transmitters that use the Checksum\n   Complement.\n   It should be noted that\
    \ when hardware-based timestamping is used, it\n   will likely be used at both\
    \ ends, and thus both hosts that take part\n   in the protocol will support the\
    \ functionality described in this\n   memo.  If only one of the hosts uses hardware-based\
    \ timestamping,\n   then the Checksum Complement can only be used if it is known\
    \ that the\n   peer host can accept the Checksum Complement.\n"
- title: 3.4.  The Checksum Complement and Authentication
  contents:
  - "3.4.  The Checksum Complement and Authentication\n   A Checksum Complement MUST\
    \ NOT be used when authentication is\n   enabled.  The Checksum Complement is\
    \ useful in unauthenticated mode,\n   allowing the intermediate entity to perform\
    \ serial processing of the\n   packet without storing and forwarding it.\n   On\
    \ the other hand, when message authentication is used, an\n   intermediate entity\
    \ that alters NTP packets must also recompute the\n   Message Authentication Code\
    \ (MAC) accordingly.  In this case, it is\n   not possible to update the Checksum\
    \ Complement; updating the Checksum\n   Complement would result in having to recalculate\
    \ the MAC, and there\n   would be a cyclic dependency between the MAC and the\
    \ Checksum\n   Complement.  Hence, when updating the MAC, it is necessary to update\n\
    \   the UDP Checksum field, making the Checksum Complement field\n   unnecessary\
    \ in the presence of authentication.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document describes how a Checksum Complement\
    \ extension can be\n   used for maintaining the correctness of the UDP Checksum.\
    \  The\n   security considerations of time protocols in general are discussed\
    \ in\n   [SecTime], and the security considerations of NTP are discussed in\n\
    \   [NTPv4].\n   The purpose of this extension is to ease the implementation of\n\
    \   accurate timestamping engines, as illustrated in Figure 1.  The\n   extension\
    \ is intended to be used internally in an NTP client or\n   server.  This extension\
    \ is not intended to be used by switches and\n   routers that reside between the\
    \ client and the server.  As opposed to\n   PTP [IEEE1588], NTP does not require\
    \ intermediate switches or routers\n   to modify the content of NTP messages,\
    \ and thus any such modification\n   should be considered as a malicious man-in-the-middle\
    \ (MITM) attack.\n   It is important to emphasize that the scheme described in\
    \ this\n   document does not increase the protocol's vulnerability to MITM\n \
    \  attacks; a MITM attacker who maliciously modifies a packet and its\n   Checksum\
    \ Complement is logically equivalent to a MITM attacker who\n   modifies a packet\
    \ and its UDP Checksum field.\n   The concept described in this document is intended\
    \ to be used only in\n   unauthenticated mode.  As discussed in Section 3.4, if\
    \ a\n   cryptographic security mechanism is used, then the Checksum\n   Complement\
    \ does not simplify the implementation compared to using the\n   conventional\
    \ Checksum, and therefore the Checksum Complement is not\n   used.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has allocated a new value in the \"NTP Extension\
    \ Field Types\"\n   registry:\n      0x2005 Checksum Complement\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [Checksum]  Rijsinghani, A., Ed., \"Computation\
    \ of the Internet\n               Checksum via Incremental Update\", RFC 1624,\n\
    \               DOI 10.17487/RFC1624, May 1994,\n               <http://www.rfc-editor.org/info/rfc1624>.\n\
    \   [IPv6]      Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n  \
    \             (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n      \
    \         December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [KEYWORDS]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119,\n               DOI 10.17487/RFC2119, March 1997,\n\
    \               <http://www.rfc-editor.org/info/rfc2119>.\n   [NTPv4]     Mills,\
    \ D., Martin, J., Ed., Burbank, J., and W. Kasch,\n               \"Network Time\
    \ Protocol Version 4: Protocol and Algorithms\n               Specification\"\
    , RFC 5905, DOI 10.17487/RFC5905,\n               June 2010, <http://www.rfc-editor.org/info/rfc5905>.\n\
    \   [RFC7822]   Mizrahi, T. and D. Mayer, \"Network Time Protocol\n          \
    \     Version 4 (NTPv4) Extension Fields\", RFC 7822,\n               DOI 10.17487/RFC7822,\
    \ March 2016,\n               <http://www.rfc-editor.org/info/rfc7822>.\n   [UDP]\
    \       Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n            \
    \   DOI 10.17487/RFC768, August 1980,\n               <http://www.rfc-editor.org/info/rfc768>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [IEEE1588]  IEEE, \"IEEE Standard for a Precision\
    \ Clock\n               Synchronization Protocol for Networked Measurement and\n\
    \               Control Systems\", IEEE Std 1588-2008,\n               DOI 10.1109/IEEESTD.2008.4579760,\
    \ July 2008.\n   [RFC7820]   Mizrahi, T., \"UDP Checksum Complement in the One-Way\n\
    \               Active Measurement Protocol (OWAMP) and Two-Way Active\n     \
    \          Measurement Protocol (TWAMP)\", RFC 7820,\n               DOI 10.17487/RFC7820,\
    \ March 2016,\n               <http://www.rfc-editor.org/info/rfc7820>.\n   [SecTime]\
    \   Mizrahi, T., \"Security Requirements of Time Protocols in\n              \
    \ Packet Switched Networks\", RFC 7384,\n               DOI 10.17487/RFC7384,\
    \ October 2014,\n               <http://www.rfc-editor.org/info/rfc7384>.\n  \
    \ [ZeroChecksum]\n               Fairhurst, G. and M. Westerlund, \"Applicability\
    \ Statement\n               for the Use of IPv6 UDP Datagrams with Zero Checksums\"\
    ,\n               RFC 6936, DOI 10.17487/RFC6936, April 2013,\n              \
    \ <http://www.rfc-editor.org/info/rfc6936>.\n"
- title: Appendix A.  Checksum Complement Usage Example
  contents:
  - "Appendix A.  Checksum Complement Usage Example\n   Consider an NTP packet sent\
    \ by an NTP client to an NTP server.\n   The client's software layer (see Figure\
    \ 1) generates an NTP packet\n   with an Origin Timestamp T and a UDP Checksum\
    \ value U.  The value of\n   U is the checksum of the UDP header, UDP payload,\
    \ and pseudo-header.\n   Thus, U is equal to:\n                         U = Const\
    \ + checksum(T)                     (1)\n   Where \"Const\" is the checksum of\
    \ all the fields that are covered by\n   the checksum, except the Origin Timestamp\
    \ T.\n   Recall that the client's software emits the NTP packet with a\n   Checksum\
    \ Complement extension field, which resides at the end of the\n   PTP packet.\
    \  It is assumed that the client initially assigns zero to\n   the value of the\
    \ Checksum Complement.\n   The client's timestamping engine updates the Origin\
    \ Timestamp field\n   to the accurate time, changing its value from T to T'. \
    \ The engine\n   also updates the Checksum Complement field from zero to a new\
    \ value\n   C, such that:\n                   checksum(C) = checksum(T) - checksum(T')\
    \          (2)\n   When the NTP packet is transmitted by the client's timestamping\n\
    \   engine, the value of the checksum remains U as before:\n      U = Const +\
    \ checksum(T) = Const + checksum(T) + checksum(T') -\n          checksum(T') =\
    \ Const + checksum(T') + checksum(C)          (3)\n   Thus, after the timestamping\
    \ engine has updated the timestamp,\n   U remains the correct checksum of the\
    \ packet.\n   When the NTP packet reaches the NTP server, the server performs\
    \ a\n   conventional UDP Checksum computation, and the computed value is U.\n\
    \   Since the Checksum Complement is part of the extension field, its\n   value\
    \ (C) is transparently included in the computation, as per\n   Equation (3), without\
    \ requiring special treatment by the server.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author gratefully thanks Danny Mayer, Miroslav Lichvar,\
    \ Paul\n   Kyzivat, Suresh Krishnan, and Brian Haberman for their review and\n\
    \   helpful comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tal Mizrahi\n   Marvell\n   6 Hamada St.\n   Yokneam, 20692\n\
    \   Israel\n   Email: talmi@marvell.com\n"
