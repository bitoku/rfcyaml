- contents:
  - "     Securing Routing Policy Specification Language (RPSL) Objects\n       with
    Resource Public Key Infrastructure (RPKI) Signatures\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a method that allows parties to\n   electronically
    sign Routing Policy Specification Language objects and\n   validate such electronic
    signatures.  This allows relying parties to\n   detect accidental or malicious
    modifications of such objects.  It\n   also allows parties who run Internet Routing
    Registries or similar\n   databases, but do not yet have authentication (based
    on Routing\n   Policy System Security) of the maintainers of certain objects,
    to\n   verify that the additions or modifications of such database objects\n   are
    done by the legitimate holder(s) of the Internet resources\n   mentioned in those
    objects.  This document updates RFCs 2622 and 4012\n   to add the signature attribute
    to supported RPSL objects.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7909.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Signature Syntax and Semantics  . . . . . . . . . . . .
    . . .   4\n     2.1.  General Attributes and Meta Information . . . . . . . .
    .   4\n     2.2.  Signed Attributes . . . . . . . . . . . . . . . . . . . .   5\n
    \    2.3.  Storage of the Signature Data . . . . . . . . . . . . . .   6\n     2.4.
    \ Number Resource Coverage  . . . . . . . . . . . . . . . .   6\n     2.5.  Validity
    Time of the Signature  . . . . . . . . . . . . .   6\n   3.  Signature Creation
    and Validation Steps . . . . . . . . . . .   6\n     3.1.  Canonicalization  .
    . . . . . . . . . . . . . . . . . . .   6\n     3.2.  Signature Creation  . .
    . . . . . . . . . . . . . . . . .   8\n     3.3.  Signature Validation  . . .
    . . . . . . . . . . . . . . .   9\n   4.  Signed Object Types and Set of Signed
    Attributes  . . . . . .   9\n   5.  Keys and Certificates Used for Signature and
    Verification . .  11\n   6.  Security Considerations . . . . . . . . . . . . .
    . . . . . .  12\n   7.  References  . . . . . . . . . . . . . . . . . . . . .
    . . . .  12\n     7.1.  Normative References  . . . . . . . . . . . . . . . .
    . .  12\n     7.2.  Informative References  . . . . . . . . . . . . . . . . .
    \ 14\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  14\n
    \  Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Objects stored in resource databases, like the RIPE DB,
    are generally\n   protected by an authentication mechanism: anyone creating or\n
    \  modifying an object in the database has to have proper authorization\n   to
    do so, and therefore has to go through an authentication procedure\n   (provide
    a password, certificate, email signature, etc.).  However,\n   for objects transferred
    between resource databases, the\n   authentication is not guaranteed.  This means
    that when a Routing\n   Policy Specification Language (RPSL) object is downloaded
    from a\n   database, the consumer can reasonably claim that the object is\n   authentic
    if it was locally created, but cannot make the same claim\n   for an object imported
    from a different database.  Also, once such an\n   object is downloaded from the
    database, it becomes a simple (but\n   still structured) text file with no integrity
    protection.  More\n   importantly, the authentication and integrity guarantees
    associated\n   with these objects do not always ensure that the entity that\n
    \  generated them is authorized to make the assertions implied by the\n   data
    contained in the objects.\n   A potential use for resource certificates [RFC6487]
    is to use them to\n   secure such (both imported and downloaded) database objects,
    by\n   applying a digital signature over the object contents in lieu of\n   methods
    such as Routing Policy System Security [RFC2725].  The signer\n   of such signed
    database objects MUST possess a relevant resource\n   certificate, which shows
    him/her as the legitimate holder of an\n   Internet number resource.  This mechanism
    allows the users of such\n   database objects to verify that the contents are
    in fact produced by\n   the legitimate holder(s) of the Internet resources mentioned
    in those\n   objects.  It also allows the signatures to cover whole RPSL objects,\n
    \  or just selected attributes of them.  In other words, a digital\n   signature
    created using the private key associated with a resource\n   certificate can offer
    object security in addition to the channel\n   security already present in most
    resource databases.  Object security\n   in turn allows such objects to be hosted
    in different databases and\n   still be independently verifiable.\n   While the
    approach outlined in this document mandates the use of the\n   Resource Public
    Key Infrastructure (RPKI) for certificate\n   distribution, it is not dependent
    upon the RPKI for correct\n   functionality.  Equivalent functionality can be
    achieved with a more\n   traditional Certification Authority (CA), using the extensions\n
    \  described in [RFC3779] within the certificates, and the appropriate\n   trust
    anchor material to verify the digital signature.\n   The capitalized key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document
    are to be interpreted as described in\n   [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Signature Syntax and Semantics\n   When signing an RPSL object [RFC2622]
    [RFC4012], the input for the\n   signature process is transformed into a sequence
    of strings of ASCII\n   data.  The approach is similar to the one used in Domain
    Key\n   Identified Mail (DKIM) [RFC6376].  In the case of RPSL, the object to\n
    \  be signed closely resembles an SMTP header, so it seems reasonable to\n   adapt
    DKIM's relevant features.\n"
  - contents:
    - "2.1.  General Attributes and Meta Information\n   The digital signature associated
      with an RPSL object is itself a new\n   attribute named \"signature\".  It consists
      of mandatory and optional\n   fields.  These fields are structured in a sequence
      of name and value\n   pairs, separated by a semicolon \";\" and a whitespace.
      \ Collectively,\n   these fields make up the value for the new \"signature\"
      attribute.\n   The \"name\" part of such a component is always a single ASCII\n
      \  character that serves as an identifier; the value is an ASCII string\n   the
      contents of which depend on the field type.  Mandatory fields\n   MUST appear
      exactly once, whereas optional fields MUST appear at most\n   once.\n   Mandatory
      fields of the \"signature\" attribute:\n   o  Version of the signature (field
      \"v\"): This field MUST be set to\n      \"rpkiv1\" and MAY be the first field
      of the signature attribute to\n      simplify the parsing of the attributes'
      fields.  The signature\n      format described in this document applies when
      the version field\n      is set to \"rpkiv1\".  All the rest of the signature
      attributes are\n      defined by the value of the version field.\n   o  Reference
      to the certificate corresponding to the private key used\n      to sign this
      object (field \"c\"): The value of this field MUST be a\n      URL of type \"rsync\"
      [RFC5781] or \"http(s)\" [RFC7230] that points\n      to a specific resource
      certificate in an RPKI repository\n      [RFC6481].  Any non URL-safe characters
      (including semicolon \";\"\n      and plus \"+\") must be URL encoded [RFC3986].\n
      \  o  Signature method (field \"m\"): What hash and signature algorithms\n      were
      used to create the signature.  This specification follows the\n      algorithms
      defined in RFC 6485 [RFC6485].  The algorithms are\n      referenced within
      the signature attribute by the ASCII names of\n      the algorithms.\n   o  Time
      of signing (field \"t\"): The format of the value of this field\n      MUST
      be in the Internet Date/Time ABNF format [RFC3339].  All\n      times MUST be
      converted to Universal Coordinated Time (UTC), i.e.,\n      the ABNF time-offset
      is always \"Z\".\n   o  The signed attributes (field \"a\"): This is a list
      of attribute\n      names, separated by an ASCII \"+\" character (if more than
      one\n      attribute is enumerated).  The list must include any attribute at\n
      \     most once.\n   o  The signature itself (field \"b\"): This MUST be the
      last field in\n      the list.  The signature is the output of the signature
      algorithm\n      using the appropriate private key and the calculated hash value
      of\n      the object as inputs.  The value of this field is the digital\n      signature
      in base64 encoding (Section 4 of [RFC4648]).\n   Optional fields of the \"signature\"
      attribute:\n   o  Signature expiration time (field \"x\"): The format of the
      value of\n      this field MUST be in the Internet Date/Time format [RFC3339].\n
      \     All times MUST be represented in UTC.\n"
    title: 2.1.  General Attributes and Meta Information
  - contents:
    - "2.2.  Signed Attributes\n   One can look at an RPSL object as an (ordered)
      set of attributes,\n   each having a \"key: value\" syntax.  Understanding this
      structure can\n   help in developing more flexible methods for applying digital\n
      \  signatures.\n   Some of these attributes are automatically added by the database,\n
      \  some are database-dependent, yet others do not carry operationally\n   important
      information.  This specification allows the maintainer of\n   such an object
      to decide which attributes are important (signed) and\n   which are not (not
      signed), from among all the attributes of the\n   object; in other words, we
      define a way of including important\n   attributes while excluding irrelevant
      ones.  Allowing the maintainer\n   of an object to select the attributes that
      are covered by the digital\n   signature achieves the goals established in Section
      1.\n   The type of the object determines the minimum set of attributes that\n
      \  MUST be signed.  The signer MAY choose to sign additional attributes,\n   in
      order to provide integrity protection for those attributes too.\n   When verifying
      the signature of an object, the verifier has to check\n   whether the signature
      itself is valid, and whether all the specified\n   attributes are referenced
      in the signature.  If not, the verifier\n   MUST reject the signature and treat
      the object as a regular, unsigned\n   RPSL object.\n"
    title: 2.2.  Signed Attributes
  - contents:
    - "2.3.  Storage of the Signature Data\n   The result of applying the signature
      mechanism once is exactly one\n   new attribute for the object.  As an illustration,
      the structure of a\n   signed RPSL object is as follows:\n     attribute1:  value1\n
      \    attribute2:  value2\n     attribute3:  value3\n     ...\n     signature:
      \  v=rpkiv1; c=rsync://.....; m=sha256WithRSAEncryption;\n                  t=2014-12-31T23:59:60Z;\n
      \                 a=attribute1+attribute2+attribute3+...;\n                  b=<base64
      data>\n"
    title: 2.3.  Storage of the Signature Data
  - contents:
    - "2.4.  Number Resource Coverage\n   Even if the signature over the object is
      valid according to the\n   signature validation rules, it may not be relevant
      to the object; it\n   also needs to cover the relevant Internet number resources
      mentioned\n   in the object.\n   Therefore, the Internet number resources present
      in [RFC3779]\n   extensions of the certificate referred to in the \"c\" field
      of the\n   signature MUST cover the resources in the primary key of the object\n
      \  (e.g., value of the \"aut-num:\" attribute of an aut-num object, value\n
      \  of the \"inetnum:\" attribute of an inetnum object, values of \"route:\",\n
      \  and \"origin:\" attributes of a route object, etc.).\n"
    title: 2.4.  Number Resource Coverage
  - contents:
    - "2.5.  Validity Time of the Signature\n   The validity time interval of a signature
      is the intersection of the\n   validity time of the certificate used to verify
      the signature, the\n   \"not before\" time specified by the \"t\" field of the
      signature, and\n   the optional \"not after\" time specified by the \"x\" field
      of the\n   signature.\n   When checking multiple signatures, these checks are
      individually\n   applied to each signature.\n"
    title: 2.5.  Validity Time of the Signature
  title: 2.  Signature Syntax and Semantics
- contents:
  - '3.  Signature Creation and Validation Steps

    '
  - contents:
    - "3.1.  Canonicalization\n   The notion of canonicalization is essential to digital
      signature\n   generation and validation whenever data representations may change\n
      \  between a signer and one or more signature verifiers.\n   Canonicalization
      defines how one transforms a representation of data\n   into a series of bits
      for signature generation and verification.  The\n   task of canonicalization
      is to make irrelevant differences in\n   representations of the same object,
      which would otherwise cause\n   signature verification to fail.  Examples of
      this could be:\n   o  data transformations applied by the databases that host
      these\n      objects (such as notational changes for IPv4/IPv6 prefixes,\n      automatic
      addition/modification of \"changed\" attributes, etc.)\n   o  the difference
      of line terminators across different systems\n   This means that the destination
      database might change parts of the\n   submitted data after it was signed, which
      would cause signature\n   verification to fail.  This document specifies strict\n
      \  canonicalization rules to overcome this problem.\n   The following steps
      MUST be applied in order to achieve canonicalized\n   representation of an object,
      before the actual signature\n   (verification) process can begin:\n   1.  Comments
      (anything beginning with a \"#\") MUST be omitted.\n   2.  Any trailing whitespace
      MUST be omitted.\n   3.  A multi-line attribute MUST be converted into its single-line\n
      \      equivalent.  This is accomplished by:\n       *  Converting all line
      endings to a single blank space (ASCII\n          code 32).\n       *  Concatenating
      all lines into a single line.\n       *  Replacing the trailing blank space
      with a single new line\n          (\"\\n\", ASCII code 10).\n   4.  Numerical
      fields MUST be converted to canonical representations.\n       These include:\n
      \      *  Date and time fields MUST be converted to UTC and MUST be\n          represented
      in the Internet Date/Time format [RFC3339].\n       *  AS numbers MUST be converted
      to ASPLAIN syntax [RFC5396].\n       *  IPv6 addresses MUST be canonicalized
      as defined in [RFC5952].\n       *  IPv4 addresses MUST be represented as the
      ipv4-address type\n          defined by RPSL [RFC2622].\n       *  All IP prefixes
      (IPv4 and IPv6) MUST be represented in\n          Classless Inter-Domain Routing
      (CIDR) notation [RFC4632].\n   5.  All ranges, lists, or sets of numerical fields
      are represented\n       using the appropriate RPSL attribute and each numerical
      element\n       contained within those attributes MUST conform to the\n       canonicalization
      rules in this document.  The ordering of values\n       within such fields MUST
      be maintained during database transfers.\n   6.  The name of each attribute
      MUST be converted into lower case, and\n       MUST be kept as part of the attribute
      line.\n   7.  Tab characters (\"\\t\", ASCII code 09) MUST be converted into\n
      \      spaces.\n   8.  Multiple whitespaces MUST be collapsed into a single
      space (\" \",\n       ASCII code 32) character.\n   9.  All line endings MUST
      be converted into a single new line (\"\\n\",\n       ASCII code 10) character,
      (thus avoiding CR vs. CRLF\n       differences).\n"
    title: 3.1.  Canonicalization
  - contents:
    - "3.2.  Signature Creation\n   Given an RPSL object and corresponding certificate,
      in order to\n   create the digital signature, the following steps MUST be performed:\n
      \  1.  Create a list of attribute names referring to the attributes that\n       will
      be signed (contents of the \"a\" field).  The minimum set of\n       these attributes
      is determined by the object type; the signer MAY\n       select additional attributes.\n
      \  2.  Arrange the selected attributes according to the selection\n       sequence
      specified in the \"a\" field as above, omitting all\n       attributes that
      will not be signed.\n   3.  Construct the new \"signature\" attribute, with
      all its fields,\n       leaving the value of the \"b\" field empty.\n   4.  Apply
      canonicalization rules to the result (including the\n       \"signature\" attribute).\n
      \  5.  Create the signature over the results of the canonicalization\n       process
      (according to the signature and hash algorithms specified\n       in the \"m\"
      field of the signature attribute).\n   6.  Insert the base64-encoded value of
      the signature as the value of\n       the \"b\" field.\n   7.  Append the resulting
      \"signature\" attribute to the original\n       object.\n"
    title: 3.2.  Signature Creation
  - contents:
    - "3.3.  Signature Validation\n   In order to validate a signature over such an
      object, the following\n   steps MUST be performed:\n   1.  Verify the syntax
      of the \"signature\" attribute (i.e., whether it\n       contains the mandatory
      and optional components and the syntax of\n       these fields matches the specification
      as described in\n       Section 2.1).\n   2.  Fetch the certificate referred
      to in the \"c\" field of the\n       \"signature\" attribute, and check its
      validity using the steps\n       described in [RFC6487].\n   3.  Extract the
      list of attributes that were signed using the signer\n       from the \"a\"
      field of the \"signature\" attribute.\n   4.  Verify that the list of signed
      attributes includes the minimum\n       set of attributes for that object type.\n
      \  5.  Arrange the selected attributes according to the selection\n       sequence
      provided in the value of the \"a\" field, omitting all\n       unsigned attributes.\n
      \  6.  Replace the value of the signature field \"b\" of the \"signature\"\n
      \      attribute with an empty string.\n   7.  Apply the canonicalization procedure
      to the selected attributes\n       (including the \"signature\" attribute).\n
      \  8.  Check the validity of the signature using the signature algorithm\n       specified
      in the \"m\" field of the signature attribute, the public\n       key contained
      in the certificate mentioned in the \"c\" field of\n       the signature, the
      signature value specified in the \"b\" field of\n       the signature attribute,
      and the output of the canonicalization\n       process.\n"
    title: 3.3.  Signature Validation
  title: 3.  Signature Creation and Validation Steps
- contents:
  - "4.  Signed Object Types and Set of Signed Attributes\n   This section describes
    a list of object types that MAY be signed\n   using this approach.  For each object
    type, the set of attributes\n   that MUST be signed for these object types (the
    minimum set noted in\n   Section 3.3 is enumerated.\n   This list generally excludes
    attributes that are used to maintain\n   referential integrity in the databases
    that carry these objects,\n   since these usually make sense only within the context
    of such a\n   database, whereas the scope of the signatures is only one specific\n
    \  object.  Since the attributes in the referred object (such as mnt-by,\n   admin-c,
    tech-c, etc.) can change without any modifications to the\n   signed object, signing
    such attributes could lead to a false sense of\n   security in terms of the contents
    of the signed data; therefore,\n   including such attributes should only be done
    in order to provide\n   full integrity protection of the object itself.\n   The
    newly constructed \"signature\" attribute is always included in the\n   list.
    \ The signature under construction MUST NOT include signature\n   attributes that
    are already present in the object.\n      as-block:\n      *  as-block\n      *
    \ signature\n      aut-num:\n      *  aut-num\n      *  as-name\n      *  member-of\n
    \     *  import\n      *  mp-import\n      *  export\n      *  mp-export\n      *
    \ default\n      *  mp-default\n      *  signature\n      inet[6]num:\n      *
    \ inet[6]num\n      *  netname\n      *  country\n      *  status\n      *  signature\n
    \     route[6]:\n      *  route[6]\n      *  origin\n      *  holes\n      *  member-of\n
    \     *  signature\n   It should be noted that the approach defined in this document
    has a\n   limitation in signing route[6] objects.  This document only supports\n
    \  a single signature per object.  This means that it is not possible to\n   properly
    sign route[6] objects where one resource holder possesses\n   the Autonomous System
    Number (ASN) and another resource holder\n   possesses the referenced prefix.
    \ A future version of this\n   specification may resolve this limitation.\n   For
    each signature, the extension described in RFC 3779 that appears\n   in the certificate
    used to verify the signature MUST include a\n   resource entry that is equivalent
    to, or covers (i.e., is \"less\n   specific\" than) the following resources mentioned
    in the object the\n   signature is attached to:\n   o  For the as-block object
    type: the resource in the \"as-block\"\n      attribute.\n   o  For the aut-num
    object type: the resource in the \"aut-num\"\n      attribute.\n   o  For the
    inet[6]num object type: the resource in the \"inet[6]num\"\n      attribute.\n
    \  o  For the route[6] object type: the resource in the \"route[6]\" or\n      \"origin\"
    (or both) attributes.\n"
  title: 4.  Signed Object Types and Set of Signed Attributes
- contents:
  - "5.  Keys and Certificates Used for Signature and Verification\n   The certificate
    that is referred to in the signature (in the \"c\"\n   field):\n   o  MUST be
    an end-entity (i.e., non-CA) certificate\n   o  MUST conform to the X.509 PKIX
    Resource Certificate profile\n      [RFC6487]\n   o  MUST have the extension described
    in RFC 3779 that covers the\n      Internet number resource included in a signed
    attribute [RFC3779]\n   The certificate generated will omit the Subject Information
    Access\n   (SIA) extension mandated by RFC 6487 as that extension requires an\n
    \  rsync URI for the accessLocation form and RPSL currently does not\n   support
    database access via rsync.\n"
  title: 5.  Keys and Certificates Used for Signature and Verification
- contents:
  - "6.  Security Considerations\n   RPSL objects stored in the Internet Routing Registry
    (IRR) databases\n   are public, and as such there is no need for confidentiality.
    \ Each\n   signed RPSL object can have its integrity and authenticity verified\n
    \  using the supplied digital signature and the referenced certificate.\n   Since
    the RPSL signature approach leverages X.509 extensions, the\n   security considerations
    in [RFC3779] apply here as well.\n   Additionally, implementers MUST follow the
    certificate validation\n   steps described in RFC 6487.\n   The maintainer of
    an object has the ability to include attributes in\n   the signature that are
    not included in the resource certificate used\n   to create the signature.  Potentially,
    a maintainer may include\n   attributes that reference resources the maintainer
    is not authorized\n   to use.\n   It should be noted that this digital signature
    does not preclude\n   monkey-in-the-middle attacks where the adversary either
    intercepts\n   RPSL object transfers, deletes the signature attribute, modifies
    the\n   contents, or intercepts the transfer and drops the objects destined\n
    \  for the requester.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2622]  Alaettinoglu, C., Villamizar, C., Gerich, E., Kessens, D.,\n              Meyer,
      D., Bates, T., Karrenberg, D., and M. Terpstra,\n              \"Routing Policy
      Specification Language (RPSL)\", RFC 2622,\n              DOI 10.17487/RFC2622,
      June 1999,\n              <http://www.rfc-editor.org/info/rfc2622>.\n   [RFC3339]
      \ Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC3779]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for IP\n              Addresses
      and AS Identifiers\", RFC 3779,\n              DOI 10.17487/RFC3779, June 2004,\n
      \             <http://www.rfc-editor.org/info/rfc3779>.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4012]
      \ Blunk, L., Damas, J., Parent, F., and A. Robachevsky,\n              \"Routing
      Policy Specification Language next generation\n              (RPSLng)\", RFC
      4012, DOI 10.17487/RFC4012, March 2005,\n              <http://www.rfc-editor.org/info/rfc4012>.\n
      \  [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n              (CIDR):
      The Internet Address Assignment and Aggregation\n              Plan\", BCP 122,
      RFC 4632, DOI 10.17487/RFC4632, August\n              2006, <http://www.rfc-editor.org/info/rfc4632>.\n
      \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC5396]  Huston, G. and G. Michaelson, \"Textual Representation of\n              Autonomous
      System (AS) Numbers\", RFC 5396,\n              DOI 10.17487/RFC5396, December
      2008,\n              <http://www.rfc-editor.org/info/rfc5396>.\n   [RFC5781]
      \ Weiler, S., Ward, D., and R. Housley, \"The rsync URI\n              Scheme\",
      RFC 5781, DOI 10.17487/RFC5781, February 2010,\n              <http://www.rfc-editor.org/info/rfc5781>.\n
      \  [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address
      Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August
      2010,\n              <http://www.rfc-editor.org/info/rfc5952>.\n   [RFC6481]
      \ Huston, G., Loomans, R., and G. Michaelson, \"A Profile for\n              Resource
      Certificate Repository Structure\", RFC 6481,\n              DOI 10.17487/RFC6481,
      February 2012,\n              <http://www.rfc-editor.org/info/rfc6481>.\n   [RFC6485]
      \ Huston, G., \"The Profile for Algorithms and Key Sizes for\n              Use
      in the Resource Public Key Infrastructure (RPKI)\",\n              RFC 6485,
      DOI 10.17487/RFC6485, February 2012,\n              <http://www.rfc-editor.org/info/rfc6485>.\n
      \  [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A Profile for\n
      \             X.509 PKIX Resource Certificates\", RFC 6487,\n              DOI
      10.17487/RFC6487, February 2012,\n              <http://www.rfc-editor.org/info/rfc6487>.\n
      \  [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC
      7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC2725]  Villamizar, C., Alaettinoglu, C.,
      Meyer, D., and S.\n              Murphy, \"Routing Policy System Security\",
      RFC 2725,\n              DOI 10.17487/RFC2725, December 1999,\n              <http://www.rfc-editor.org/info/rfc2725>.\n
      \  [RFC6376]  Crocker, D., Ed., Hansen, T., Ed., and M. Kucherawy, Ed.,\n              \"DomainKeys
      Identified Mail (DKIM) Signatures\", STD 76,\n              RFC 6376, DOI 10.17487/RFC6376,
      September 2011,\n              <http://www.rfc-editor.org/info/rfc6376>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The authors would like to acknowledge the valued contributions
    from\n   Jos Boumans, Tom Harrison, Steve Kent, Sandra Murphy, Magnus Nystrom,\n
    \  Alvaro Retana, Sean Turner, Geoff Huston, and Stephen Farrell in\n   preparation
    of this document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Robert Kisteleki\n   RIPE NCC\n   Email: robert@ripe.net\n
    \  URI:   http://www.ripe.net\n   Brian Haberman\n   Johns Hopkins University
    Applied Physics Lab\n   Email: brian@innovationslab.net\n"
  title: Authors' Addresses
