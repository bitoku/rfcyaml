- title: __initial_text__
  contents:
  - '                     RTFM: Applicability Statement

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview covering all aspects of Realtime\n\
    \   Traffic Flow Measurement, including its area of applicability and its\n  \
    \ limitations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  The RTFM Documents . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   2  Brief Technical Specification (TS) . . . . . . . . . . .\
    \ . . .  3\n   3  Applicability Statement (AS) . . . . . . . . . . . . . . . .\
    \ .  3\n   4  Limitations  . . . . . . . . . . . . . . . . . . . . . . . . . \
    \ 4\n   5  Security Considerations  . . . . . . . . . . . . . . . . . . .  5\n\
    \   6  Policy Considerations  . . . . . . . . . . . . . . . . . . . .  6\n   7\
    \  Soundness  . . . . . . . . . . . . . . . . . . . . . . . . . .  6\n   8  Appendix\
    \ A: WG Report on the Meter MIB . . . . . . . . . . . .  8\n   9  References .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  9\n   10 Author's Address\
    \ . . . . . . . . . . . . . . . . . . . . . . .  9\n   11 Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . 10\n"
- title: 1  The RTFM Documents
  contents:
  - "1  The RTFM Documents\n   The RTFM Traffic Measurement System has been developed\
    \ by the\n   Realtime Traffic Flow Measurement Working Group.  It is described\
    \ in\n   six other documents, as follows:\n   [ACT-BKG] Internet Accounting: Background\
    \             (Informational)\n      Sets out the requirements for a usage reporting\
    \ system for network\n      traffic.  Sketches out the RTFM Architecture (meters,\
    \ meter\n      readers and managers) allowing for multiple meters and meter\n\
    \      readers, with asynchronous reading from the meters.  Proposes\n      methods\
    \ of classifying traffic flows, the need for flows to be\n      bi-directional\
    \ (with separate sets of counters for each direction)\n      and the need for\
    \ each packet to be counted in a single flow (the '\n      count in one bucket'\
    \ principle).\n   [RTFM-ARC] RTFM Architecture                          (Informational)\n\
    \      Defines the RTFM Architecture, giving descriptions of each\n      component.\
    \  Explains how traffic flows are viewed as logical\n      entities described\
    \ in terms of their address-attribute values, so\n      that each is defined by\
    \ the attributes of its end-points.  Gives a\n      detailed description of the\
    \ RTFM traffic meter, with full details\n      of how flows are stored in the\
    \ meter's flow table, and how packets\n      are matched in accordance with rules\
    \ stored in a ruleset.\n   [RTFM-MIB] RTFM Meter MIB                         (Proposed\
    \ Standard)\n      Describes the SNMP Management Information Base for an RTFM\
    \ meter,\n      including its flow table, rule table (storing the meter's\n  \
    \    rulesets) and the control tables used for managing a meter and\n      reading\
    \ flow data from it.\n   [RTFM-SRL] SRL: A Language for Describing Traffic   \
    \  (Informational)\n              Flows and Specifying Actions for Flow Groups\n\
    \      An RTFM ruleset is an array of rules, used by the meter to decide\n   \
    \   which flows are of interest, which end-point is the flow source,\n      and\
    \ how much detail (i.e. what attribute values) must be saved for\n      each flow.\
    \  SRL is a high-level language providing a clear,\n      logical way to write\
    \ rulesets.  It should also be useful for other\n      applications which select\
    \ flows and perform actions upon them,\n      e.g. packet-marking gateways, RSVP\
    \ policy agents, etc.\n   [RTFM-NEW] RTFM New Attributes                     \
    \    (Experimental)\n      There has been considerable interest from users in\
    \ extending the\n      RTFM Architecture so as to allow a meter to report on an\
    \ increased\n      number of flow-related measures.  This RFC documents work on\n\
    \      specifying such measures (the 'new' attributes) and reports on\n      experience\
    \ of implementing them.\n   [RTFM-NTM] RTFM: Experiences with NeTraMet       \
    \     (Informational)\n      NeTraMet is a free software implementation of the\
    \ RTFM\n      Architecture which has been available since 1993.  This RFC\n  \
    \    records RTFM implementation experience gained with NeTraMet up to\n     \
    \ late 1996.  One particularly important result is the realisation\n      that\
    \ groups of rules which test the same attribute using the same\n      mask can\
    \ be implemented as a single hashed comparison, allowing\n      the meter to rapidly\
    \ determine whether a packet belongs to one of\n      a large number of networks.\n"
- title: 2  Brief Technical Specification (TS)
  contents:
  - "2  Brief Technical Specification (TS)\n   RTFM provides for the measurement of\
    \ network traffic 'flows', i.e.\n   - a method of specifying traffic flows within\
    \ a network\n   - a hierarchy of devices (meters, meter readers, managers) for\n\
    \     measuring the specified flows\n   - a mechanism for configuring meters and\
    \ meter readers, and for\n     collecting the flow data from remote meters\n \
    \  RTFM provides high time resolution for flow first- and last-packet\n   times.\
    \  Counters for long-duration flows may be read at intervals\n   determined by\
    \ a manager.  The RTFM Meter is designed so as to do as\n   much data reduction\
    \ work as possible, which minimizes the amount of\n   data to be read and the\
    \ amount of processing needed to produce useful\n   reports from it.\n   RTFM\
    \ flow data can be used for a wide range of purposes, such as\n   usage accounting,\
    \ long-term recording of network usage (classified by\n   IP address attributes)\
    \ and real-time analysis of traffic flows at\n   remote metering points.\n"
- title: 3  Applicability Statement (AS)
  contents:
  - "3  Applicability Statement (AS)\n   To use RTFM for collecting network traffic\
    \ information one must first\n   consider where in the network traffic flows are\
    \ to be measured.  Once\n   that is decided, an RTFM Meter must be installed at\
    \ each chosen\n   measurement point.\n   At least one Meter Reader is needed to\
    \ collect the measured data from\n   the meters, and a single Manager is needed\
    \ to control the meters and\n   meter readers.\n   RTFM Meters may be single-\
    \ or multi-user hosts running a meter\n   program (one such program is available\
    \ as free software, a second is\n   under development at IBM Research).  Alternatively,\
    \ meters could be\n   run as firmware in switches or routers.  A hybrid approach\
    \ in which\n   an RTFM meter takes raw traffic data from a router provides another\n\
    \   useful implementation path.\n   RTFM Managers are programs running on a host,\
    \ communicating with\n   meters and meter readers via the network.  For this purpose\
    \ meters\n   are SNMP agents implementing the RTFM Meter MIB, and managers are\n\
    \   SNMP clients using the Meter MIB to store and access the flow data.\n"
- title: 4  Limitations
  contents:
  - "4  Limitations\n   RTFM is designed to measure traffic flows for traffic passing\
    \ a point\n   in a network.  If packets for a flow pass the metering point in\
    \ both\n   directions the meter will match them up, providing counters for each\n\
    \   direction.  If packets only pass in one direction the meter can only\n   provide\
    \ counts for that direction.\n   Users of RTFM should note that installing meters,\
    \ meter readers and\n   managers merely provides one with the capability to collect\
    \ flow\n   data.  Further installation work will be needed to develop\n   configuration\
    \ files (RTFM rulesets) for each meter, data processing\n   applications to analyse\
    \ the flow data, and various scripts, cron\n   jobs, etc.  so as to create a useful\
    \ production-quality measurement\n   system which suits a user's particular needs.\n\
    \   One of the strengths of RTFM is its ability to collect flow data at\n   whatever\
    \ level of detail (or 'granularity') is required.  It can be\n   tempting to simply\
    \ collect 'all possible data', but there are severe\n   resource constraints.\
    \  If one tries to save the complete address-\n   attribute value for all attributes\
    \ of every possible flow a very\n   large amount of data may be produced rapidly,\
    \ but the meter has only\n   a finite amount of memory for its flow table.  A\
    \ better approach is\n   to save the minimum amount of data required to achieve\
    \ the\n   measurement system goals.\n   For example, to collect usage data so\
    \ as to bill subscribers\n   identified by their IP address one could just save\
    \ the full IP\n   address, nothing more.  The RTFM meter would produce flow data\
    \ for\n   each subscriber IP address, with PDU and Octet counts for data sent\n\
    \   and received, which would be the minimum needed to produce bills.  In\n  \
    \ practice one would probably want to save at least part of the\n   Destination\
    \ IP address, which would allow the production of usage\n   logs showing subscriber\
    \ activity over time.\n   The simplest way to determine how much detail can be\
    \ collected is to\n   create an initial ruleset which collects the minimum amount,\
    \ then to\n   modify it step by step, gradually increasing the amount of\n   information\
    \ saved for each flow.  An RTFM meter ought to provide some\n   measures of its\
    \ own performance (e.g. number of active flows,\n   percentage idle processor\
    \ time, packets metered, packets not\n   metered).  Such measures will be implementation-specific,\
    \ but should\n   allow a user to assess the impact of each change to the ruleset.\n\
    \   If the network data rate is too high, i.e. the meter reports that it\n   cannot\
    \ meter all the packets even with the initial ruleset above, one\n   may be able\
    \ to use other strategies.  For example one could\n   - run the meter on a faster\
    \ computer, e.g. move from a DOS PC to a\n     workstation, or perhaps use a meter\
    \ implemented in firmware within\n     a switch or router.\n   - use sampling.\
    \  The details of such sampling are not defined within\n     the RTFM Architecture,\
    \ but the Meter MIB provides one simple method\n     by allowing one to specify\
    \ that only every nth packet on an\n     interface will be metered.   This would\
    \ probably not be acceptable\n     for producing billing data, but might well\
    \ be acceptable for\n     traffic engineering purposes.\n"
- title: 5  Security Considerations
  contents:
  - "5  Security Considerations\n   These are discussed in detail in the Architecture\
    \ and Meter MIB\n   documents.  In brief, an RTFM Meter is an SNMP agent which\
    \ observes a\n   network and collects flow data from it.  Since it doesn't control\
    \ the\n   network directly, it has no direct effect on network security.\n   On\
    \ the other hand, the flow data itself may well be valuable - to the\n   network\
    \ operator (as billing data) or to an attacker (who may wish to\n   modify that\
    \ data, or the meter's ruleset(s)).  It is therefore\n   important to take proper\
    \ precautions to ensure that access to the\n   meter and its data is sufficiently\
    \ secure.\n   For example, a meter port attached to a network should be passive,\
    \ so\n   that it cannot respond to login attempts of any kind.  Control and\n\
    \   data connections to a meter should be via a secure management\n   network.\
    \  Finally, suitable security should be established for the\n   meter, as it would\
    \ be for any other SNMP agent.\n   Meters may, like any other network component,\
    \ be subjected to Denial\n   of Service and other attacks.  These are outside\
    \ the RTFM\n   Architecture - countermeasures for them are available, but are\
    \ also\n   outside RTFM.\n"
- title: 6  Policy Considerations
  contents:
  - "6  Policy Considerations\n   When collecting traffic data, one must have well-defined\
    \ operations\n   policies covering points such as:\n   - Exactly what data is\
    \ to be collected, at what level of detail?\n   - How long will the data be kept?\n\
    \   - What may the data be used for?\n   - Who will be allowed to see the raw\
    \ data?\n   - May summaries of the data be shown to other people?\n   Policy issues\
    \ such as these should normally be considered as part of\n   an organisation's\
    \ Network Security Policy.\n   Other policy issues relating more directly to the\
    \ traffic data are\n   essentially part of the measurement system design, such\
    \ as:\n   - How much time resolution is required for the data?\n     (Less resolution\
    \ implies longer collection intervals, but that may\n     require more memory\
    \ in the meters to hold flow data between\n     collections).\n   - What level\
    \ of hardware redundancy is needed?\n     (A single meter and meter reader is\
    \ generally enough.  For greater\n     reliability, meters and meter readers can\
    \ be duplicated).\n   - Who is allowed to use the system?\n     (Approved users\
    \ will need permissions to download rulesets to the\n     meters, and to collect\
    \ their data, possibly via their own meter\n     readers).\n"
- title: 7  Soundness
  contents:
  - "7  Soundness\n   NeTraMet, the first implementation of the RTFM Architecture,\
    \ has been\n   in use worldwide since 1994.  Currently there are many organisations,\n\
    \   large and small, using it to collect traffic data for billing\n   purposes.\n\
    \   One example of these is Kawaihiko, the New Zealand Universities'\n   Network,\
    \ which has seven RTFM meters located at sites throughout New\n   Zealand.  One\
    \ of the sites is NZIX, the New Zealand Internet eXchange\n   at the University\
    \ of Waikato, where Kawaihiko has a meter (attached\n   to a 100baseT network)\
    \ observing traffic flows across the exchange to\n   each of Kawaihiko's three\
    \ international Internet Service Providers.\n   5-minute Octet counts are collected\
    \ from all the Kawaihiko meters by\n   a single meter reader at Auckland.  Traffic\
    \ data from the meters is\n   used to determine the cost per month for each of\
    \ the Kawaihiko sites.\n   It is difficult to estimate how many organisations\
    \ are using RTFM\n   traffic measurement.  There are about 250 people on the NeTraMet\n\
    \   mailing list, which often carries questions like 'why doesn't this\n   ruleset\
    \ do what I meant'?  Once new users have the system running,\n   however, they\
    \ tend to simply use it without further comment.\n   From time to time the list\
    \ provides useful feedback.  For example,\n   early in 1998 there were two very\
    \ significant user contributions:\n   - Jacek Kowalski (Telstra, Melbourne) described\
    \ an improved hash\n     algorithm for NeTraMet's flow table, which provided almost\
    \ an order\n     of magnitude improvement in packet-handling performance.\n  \
    \ - Kevin Hoadley (JANET, U.K.) reported having problems with very\n     large\
    \ rulesets.  These were resolved, and better methods of\n     downloading rules\
    \ developed, allowing NeTraMet to work well for\n     rulesets with more than\
    \ 32,000 rules.\n   Perhaps one reason why there is little discussion of NeTraMet's\
    \ use\n   in collecting billing data is that users may consider that the way\n\
    \   collect their data is a commercially sensitive matter.\n"
- title: '8  Appendix A: WG Report on the Meter MIB'
  contents:
  - "8  Appendix A: WG Report on the Meter MIB\n   The Meter MIB (in its current form)\
    \ was developed early in 1996.  It\n   was produced as an SNMPv2 MIB, following\
    \ a number of detailed (and\n   continuing) discussions with David Perkins beginning\
    \ at the Dallas\n   IETF meeting in December 1995.\n   There are two current implementations:\n\
    \   - NeTraMet (Nevil Brownlee, The University of Auckland)\n   - IBM Meter (Sig\
    \ Handelman & Stephen Stibler, IBM Research, N.Y, Bert\n     Wijnen provided further\
    \ help with SNMP)\n   The NeTraMet meter is a stand-alone SNMP agent using an\
    \ SNMPv2C\n   implementation derived from CMU SNMPv2.\n   The IBM meter runs as\
    \ a sub-agent on an AIX system.  All the meter\n   code has been written by Stephen\
    \ Stibler - it was not derived from\n   the NeTraMet code.  Stephen has found\
    \ it useful to use nifty, one of\n   NeTraMet's manager/reader programs, to test\
    \ the IBM meter.\n   As indicated above, there have only been two implementors\
    \ to date,\n   and the Working Group consensus has been very strong.\n   The MIB\
    \ has one unusual aspect:  the method used to read large\n   amounts of data from\
    \ its Flow Table.  An earlier SNMPv1 version of\n   the MIB was in use from 1992\
    \ to 1997; it used opaque objects to read\n   column slices from the flow table\
    \ for flows which had been active\n   since a specified time.  This was very non-standard\
    \ (or at least very\n   application-specific).\n   With the change to SNMPv2 we\
    \ were able to use 64-bit counters for\n   PDUs and Octets, RowStatus variables\
    \ for control tables and GETBULK\n   requests to read rows from the flow table.\
    \  We also use the\n   TimeFilter convention from the RMON2 MIB to select flows\
    \ to be read;\n   this gives the meter MIB a strong resemblance to RMON2.\n  \
    \ The current MIB introduces a better way of reading large amounts of\n   data\
    \ from the flow table.  This is the 'DataPackage' convention,\n   which specifies\
    \ the attribute values to be read from a flow table\n   row.  The meter returns\
    \ the values for each required attribute within\n   a BER-encoded sequence.  This\
    \ means there is only one object\n   identifier for the whole sequence, greatly\
    \ reducing the number of\n   bytes required to retrieve the data.  The combination\
    \ of\n   TimeFilter:  to select the flows to be read\n   DataPackage: to select\
    \ the attributes required for each flow\n   GetBulk:     to read many flows with\
    \ a single SNMP PDU\n   provides a very effective way to read flow data from a\
    \ traffic meter.\n"
- title: 9  References
  contents:
  - "9  References\n   [ACT-BKG]  Mills, C., Hirsch, G. and G. Ruth, \"Internet Accounting\n\
    \              Background\", RFC 1272, November 1991.\n   [RTFM-ARC] Brownlee,\
    \ N., Mills, C. and G. Ruth, \"Traffic Flow\n              Measurement: Architecture\"\
    , RFC 2722, October 1999.\n   [RTFM-MIB] Brownlee, N., \"Traffic Flow Measurement:\
    \ Meter MIB\", RFC\n              2720, October 1999.\n   [RTFM-NEW] Handelman,\
    \ S., Stibler, S., Brownlee, N. and G. Ruth,\n              \"RTFM: New Attributes\
    \ for Traffic Flow Measurement\", RFC\n              2724, October 1999.\n   [RTFM-NTM]\
    \ Brownlee, N., \"Traffic Flow Measurement: Experiences with\n              NeTraMet\"\
    , RFC 2123, March 1997.\n   [RTFM-SRL] Brownlee, N., \"SRL: A Language for Describing\
    \ Traffic\n              Flows and Specifying Actions for Flow Groups\", RFC 2723,\n\
    \              October 1999.\n"
- title: 10  Author's Address
  contents:
  - "10  Author's Address\n   Nevil Brownlee\n   Information Technology Systems &\
    \ Services\n   The University of Auckland\n   Private Bag 92-019\n   Auckland,\
    \ New Zealand\n   Phone: +64 9 373 7599 x8941\n   EMail: n.brownlee@auckland.ac.nz\n"
- title: 11  Full Copyright Statement
  contents:
  - "11  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
