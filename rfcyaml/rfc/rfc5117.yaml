- title: __initial_text__
  contents:
  - '                             RTP Topologies

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document discusses multi-endpoint topologies used in Real-time\n\
    \   Transport Protocol (RTP)-based environments.  In particular,\n   centralized\
    \ topologies commonly employed in the video conferencing\n   industry are mapped\
    \ to the RTP terminology.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Definitions .....................................................3\n  \
    \    2.1. Glossary ...................................................3\n    \
    \  2.2. Indicating Requirement Levels ..............................3\n   3. Topologies\
    \ ......................................................3\n      3.1. Point to\
    \ Point .............................................4\n      3.2. Point to Multipoint\
    \ Using Multicast ........................5\n      3.3. Point to Multipoint Using\
    \ the RFC 3550 Translator ..........6\n      3.4. Point to Multipoint Using the\
    \ RFC 3550 Mixer Model .........9\n      3.5. Point to Multipoint Using Video\
    \ Switching MCUs ............11\n      3.6. Point to Multipoint Using RTCP-Terminating\
    \ MCU ............12\n      3.7. Non-Symmetric Mixer/Translators ...........................13\n\
    \      3.8. Combining Topologies ......................................14\n  \
    \ 4. Comparing Topologies ...........................................15\n    \
    \  4.1. Topology Properties .......................................15\n      \
    \     4.1.1. All to All Media Transmission ......................15\n        \
    \   4.1.2. Transport or Media Interoperability ................16\n          \
    \ 4.1.3. Per Domain Bit-Rate Adaptation .....................16\n           4.1.4.\
    \ Aggregation of Media ...............................16\n           4.1.5. View\
    \ of All Session Participants ...................16\n           4.1.6. Loop Detection\
    \ .....................................17\n      4.2. Comparison of Topologies\
    \ ..................................17\n   5. Security Considerations ........................................17\n\
    \   6. Acknowledgements ...............................................19\n  \
    \ 7. References .....................................................19\n    \
    \  7.1. Normative References ......................................19\n      7.2.\
    \ Informative References ....................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When working on the Codec Control Messages [CCM], considerable\n\
    \   confusion was noticed in the community with respect to terms such as\n   Multipoint\
    \ Control Unit (MCU), Mixer, and Translator, and their usage\n   in various topologies.\
    \  This document tries to address this confusion\n   by providing a common information\
    \ basis for future discussion and\n   specification work.  It attempts to clarify\
    \ and explain sections of\n   the Real-time Transport Protocol (RTP) spec [RFC3550]\
    \ in an informal\n   way.  It is not intended to update or change what is normatively\n\
    \   specified within RFC 3550.\n   When the Audio-Visual Profile with Feedback\
    \ (AVPF) [RFC4585] was\n   developed the main emphasis lay in the efficient support\
    \ of point to\n   point and small multipoint scenarios without centralized multipoint\n\
    \   control.  However, in practice, many small multipoint conferences\n   operate\
    \ utilizing devices known as Multipoint Control Units (MCUs).\n   MCUs may implement\
    \ Mixer or Translator (in RTP [RFC3550] terminology)\n   functionality and signalling\
    \ support.  They may also contain\n   additional application functionality.  This\
    \ document focuses on the\n   media transport aspects of the MCU that can be realized\
    \ using RTP, as\n   discussed below.  Further considered are the properties of\
    \ Mixers and\n   Translators, and how some types of deployed MCUs deviate from\
    \ these\n   properties.\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: 2.1.  Glossary
  contents:
  - "2.1.  Glossary\n   ASM    - Any Source Multicast\n   AVPF   - The Extended RTP\
    \ Profile for RTCP-based Feedback\n   CSRC   - Contributing Source\n   Link  \
    \ - The data transport to the next IP hop\n   MCU    - Multipoint Control Unit\n\
    \   Path   - The concatenation of multiple links, resulting in an\n          \
    \  end-to-end data transfer.\n   PtM    - Point to Multipoint\n   PtP    - Point\
    \ to Point\n   SSM    - Source-Specific Multicast\n   SSRC   - Synchronization\
    \ Source\n"
- title: 2.2.  Indicating Requirement Levels
  contents:
  - "2.2.  Indicating Requirement Levels\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   The RFC 2119 language is used in this document to\
    \ highlight those\n   important requirements and/or resulting solutions that are\
    \ necessary\n   to address the issues raised in this document.\n"
- title: 3.  Topologies
  contents:
  - "3.  Topologies\n   This subsection defines several basic topologies that are\
    \ relevant\n   for codec control.  The first four relate to the RTP system model\n\
    \   utilizing multicast and/or unicast, as envisioned in RFC 3550.  The\n   last\
    \ two topologies, in contrast, describe the deployed system models\n   as used\
    \ in many H.323 [H323] video conferences, where both the media\n   streams and\
    \ the RTP Control Protocol (RTCP) control traffic terminate\n   at the MCU.  In\
    \ these two cases, the media sender does not receive\n   the (unmodified or Translator-modified)\
    \ Receiver Reports from all\n   sources (which it needs to interpret based on\
    \ Synchronization Source\n   (SSRC) values) and therefore has no full information\
    \ about all the\n   endpoint's situation as reported in RTCP Receiver Reports\
    \ (RRs).\n   More topologies can be constructed by combining any of the models;\n\
    \   see Section 3.8.\n   The topologies may be referenced in other documents by\
    \ a shortcut\n   name, indicated by the prefix \"Topo-\".\n   For each of the\
    \ RTP-defined topologies, we discuss how RTP, RTCP, and\n   the carried media\
    \ are handled.  With respect to RTCP, we also\n   introduce the handling of RTCP\
    \ feedback messages as defined in\n   [RFC4585] and [CCM].  Any important differences\
    \ between the two will\n   be illuminated in the discussion.\n"
- title: 3.1.  Point to Point
  contents:
  - "3.1.  Point to Point\n   Shortcut name: Topo-Point-to-Point\n   The Point to\
    \ Point (PtP) topology (Figure 1) consists of two\n   endpoints, communicating\
    \ using unicast.  Both RTP and RTCP traffic\n   are conveyed endpoint-to-endpoint,\
    \ using unicast traffic only (even\n   if, in exotic cases, this unicast traffic\
    \ happens to be conveyed over\n   an IP-multicast address).\n            +---+\
    \         +---+\n            | A |<------->| B |\n            +---+         +---+\n\
    \         Figure 1 - Point to Point\n   The main property of this topology is\
    \ that A sends to B, and only B,\n   while B sends to A, and only A.  This avoids\
    \ all complexities of\n   handling multiple endpoints and combining the requirements\
    \ from them.\n   Note that an endpoint can still use multiple RTP Synchronization\n\
    \   Sources (SSRCs) in an RTP session.\n   RTCP feedback messages for the indicated\
    \ SSRCs are communicated\n   directly between the endpoints.  Therefore, this\
    \ topology poses\n   minimal (if any) issues for any feedback messages.\n"
- title: 3.2.  Point to Multipoint Using Multicast
  contents:
  - "3.2.  Point to Multipoint Using Multicast\n   Shortcut name: Topo-Multicast\n\
    \                       +-----+\n            +---+     /      \\    +---+\n  \
    \          | A |----/         \\---| B |\n            +---+   /   Multi-  \\ \
    \ +---+\n                   +    Cast     +\n            +---+   \\  Network \
    \ /  +---+\n            | C |----\\         /---| D |\n            +---+     \\\
    \       /    +---+\n                       +-----+\n         Figure 2 - Point\
    \ to Multipoint Using Multicast\n   Point to Multipoint (PtM) is defined here\
    \ as using a multicast\n   topology as a transmission model, in which traffic\
    \ from any\n   participant reaches all the other participants, except for cases\
    \ such\n   as:\n      o packet loss, or\n      o when a participant does not wish\
    \ to receive the traffic for a\n        specific multicast group and therefore\
    \ has not subscribed to the\n        IP-multicast group in question.  This is\
    \ for the cases where a\n        multi-media session is distributed using two\
    \ or more multicast\n        groups.\n   In the above context, \"traffic\" encompasses\
    \ both RTP and RTCP\n   traffic.  The number of participants can vary between\
    \ one and many,\n   as RTP and RTCP scale to very large multicast groups (the\
    \ theoretical\n   limit of the number of participants in a single RTP session\
    \ is\n   approximately two billion).  The above can be realized using Any\n  \
    \ Source Multicast (ASM).  Source-Specific Multicast (SSM) may be also\n   be\
    \ used with RTP.  However, then only the designated source may reach\n   all receivers.\
    \  Please review [RTCP-SSM] for how RTCP can be made to\n   work in combination\
    \ with SSM.\n   This document is primarily interested in that subset of multicast\n\
    \   sessions wherein the number of participants in the multicast group is\n  \
    \ so low that it allows the participants to use early or immediate\n   feedback,\
    \ as defined in AVPF [RFC4585].  This document refers to\n   those groups as \"\
    small multicast groups\".\n   RTCP feedback messages in multicast will, like media,\
    \ reach everyone\n   (subject to packet losses and multicast group subscription).\n\
    \   Therefore, the feedback suppression mechanism discussed in [RFC4585]\n   is\
    \ required.  Each individual node needs to process every feedback\n   message\
    \ it receives to determine if it is affected or if the feedback\n   message applies\
    \ only to some other participant.\n"
- title: 3.3.  Point to Multipoint Using the RFC 3550 Translator
  contents:
  - "3.3.  Point to Multipoint Using the RFC 3550 Translator\n   Shortcut name: Topo-Translator\n\
    \   Two main categories of Translators can be distinguished:\n   Transport Translators\
    \ (Topo-Trn-Translator) do not modify the media\n   stream itself, but are concerned\
    \ with transport parameters.\n   Transport parameters, in the sense of this section,\
    \ comprise the\n   transport addresses (to bridge different domains) and the media\n\
    \   packetization to allow other transport protocols to be interconnected\n  \
    \ to a session (in gateways).  Of the transport Translators, this memo\n   is\
    \ primarily interested in those that use RTP on both sides, and this\n   is assumed\
    \ henceforth.  Translators that bridge between different\n   protocol worlds need\
    \ to be concerned about the mapping of the\n   SSRC/CSRC (Contributing Source)\
    \ concept to the non-RTP protocol.\n   When designing a Translator to a non-RTP-based\
    \ media transport, one\n   crucial factor lies in how to handle different sources\
    \ and their\n   identities.  This problem space is not discussed henceforth.\n\
    \   Media Translators (Topo-Media-Translator), in contrast, modify the\n   media\
    \ stream itself.  This process is commonly known as transcoding.\n   The modification\
    \ of the media stream can be as small as removing\n   parts of the stream, and\
    \ it can go all the way to a full transcoding\n   (down to the sample level or\
    \ equivalent) utilizing a different media\n   codec.  Media Translators are commonly\
    \ used to connect entities\n   without a common interoperability point.\n   Stand-alone\
    \ Media Translators are rare.  Most commonly, a combination\n   of Transport and\
    \ Media Translators are used to translate both the\n   media stream and the transport\
    \ aspects of a stream between two\n   transport domains (or clouds).\n   Both\
    \ Translator types share common attributes that separate them from\n   Mixers.\
    \  For each media stream that the Translator receives, it\n   generates an individual\
    \ stream in the other domain.  A Translator\n   always keeps the SSRC for a stream\
    \ across the translation, where a\n   Mixer can select a media stream, or send\
    \ them out mixed, always under\n   its own SSRC, using the CSRC field to indicate\
    \ the source(s) of the\n   content.\n   The RTCP translation process can be trivial,\
    \ for example, when\n   Transport Translators just need to adjust IP addresses,\
    \ or they can\n   be quite complex as in the case of media Translators.  See Section\n\
    \   7.2 of [RFC3550].\n                    +-----+\n         +---+     /     \
    \  \\     +------------+      +---+\n         | A |<---/         \\    |     \
    \       |<---->| B |\n         +---+   /   Multi-  \\   |            |      +---+\n\
    \                +    Cast     +->| Translator |\n         +---+   \\  Network\
    \  /   |            |      +---+\n         | C |<---\\         /    |        \
    \    |<---->| D |\n         +---+     \\       /     +------------+      +---+\n\
    \                    +-----+\n      Figure 3 - Point to Multipoint Using a Translator\n\
    \   Figure 3 depicts an example of a Transport Translator performing at\n   least\
    \ IP address translation.  It allows the (non-multicast-capable)\n   participants\
    \ B and D to take part in a multicast session by having\n   the Translator forward\
    \ their unicast traffic to the multicast\n   addresses in use, and vice versa.\
    \  It must also forward B's traffic\n   to D, and vice versa, to provide each\
    \ of B and D with a complete view\n   of the session.\n   If B were behind a limited\
    \ network path, the Translator may perform\n   media transcoding to allow the\
    \ traffic received from the other\n   participants to reach B without overloading\
    \ the path.\n   When, in the example depicted in Figure 3, the Translator acts\
    \ only\n   as a Transport Translator, then the RTCP traffic can simply be\n  \
    \ forwarded, similar to the media traffic.  However, when media\n   translation\
    \ occurs, the Translator's task becomes substantially more\n   complex, even with\
    \ respect to the RTCP traffic.  In this case, the\n   Translator needs to rewrite\
    \ B's RTCP Receiver Report before\n   forwarding them to D and the multicast network.\
    \  The rewriting is\n   needed as the stream received by B is not the same stream\
    \ as the\n   other participants receive.  For example, the number of packets\n\
    \   transmitted to B may be lower than what D receives, due to the\n   different\
    \ media format.  Therefore, if the Receiver Reports were\n   forwarded without\
    \ changes, the extended highest sequence number would\n   indicate that B were\
    \ substantially behind in reception, while it most\n   likely it would not be.\
    \  Therefore, the Translator must translate\n   that number to a corresponding\
    \ sequence number for the stream the\n   Translator received.  Similar arguments\
    \ can be made for most other\n   fields in the RTCP Receiver Reports.\n   As specified\
    \ in Section 7.1 of [RFC3550], the SSRC space is common\n   for all participants\
    \ in the session, independent of on which side\n   they are of the Translator.\
    \  Therefore, it is the responsibility of\n   the participants to run SSRC collision\
    \ detection, and the SSRC is a\n   field the Translator should not change.\n \
    \        +---+      +------------+      +---+\n         | A |<---->|         \
    \   |<---->| B |\n         +---+      |            |      +---+\n            \
    \        | Translator |\n         +---+      |            |      +---+\n     \
    \    | C |<---->|            |<---->| D |\n         +---+      +------------+\
    \      +---+\n      Figure 4 - RTP Translator (Relay) with Only Unicast Paths\n\
    \   Another Translator scenario is depicted in Figure 4.  Herein, the\n   Translator\
    \ connects multiple users of a conference through unicast.\n   This can be implemented\
    \ using a very simple transport Translator,\n   which in this document is called\
    \ a relay.  The relay forwards all\n   traffic it receives, both RTP and RTCP,\
    \ to all other participants.\n   In doing so, a multicast network is emulated\
    \ without relying on a\n   multicast-capable network infrastructure.\n   A Translator\
    \ normally does not use an SSRC of its own, and is not\n   visible as an active\
    \ participant in the session.  One exception can\n   be conceived when a Translator\
    \ acts as a quality monitor that sends\n   RTCP reports and therefore is required\
    \ to have an SSRC.  Another\n   example is the case when a Translator is prepared\
    \ to use RTCP\n   feedback messages.  This may, for example, occur when it suffers\n\
    \   packet loss of important video packets and wants to trigger repair by\n  \
    \ the media sender, by sending feedback messages.  To be able to do\n   this it\
    \ needs to have a unique SSRC.\n   A media Translator may in some cases act on\
    \ behalf of the \"real\"\n   source and respond to RTCP feedback messages.  This\
    \ may occur, for\n   example, when a receiver requests a bandwidth reduction,\
    \ and the\n   media Translator has not detected any congestion or other reasons\
    \ for\n   bandwidth reduction between the media source and itself.  In that\n\
    \   case, it is sensible that the media Translator reacts to the codec\n   control\
    \ messages itself, for example, by transcoding to a lower media\n   rate.  If\
    \ it were not reacting, the media quality in the media\n   sender's domain may\
    \ suffer, as a result of the media sender adjusting\n   its media rate (and quality)\
    \ according to the needs of the slow\n   past-Translator endpoint, at the expense\
    \ of the rate and quality of\n   all other session participants.\n   In general,\
    \ a Translator implementation should consider which RTCP\n   feedback messages\
    \ or codec-control messages it needs to understand in\n   relation to the functionality\
    \ of the Translator itself.  This is\n   completely in line with the requirement\
    \ to also translate RTCP\n   messages between the domains.\n"
- title: 3.4.  Point to Multipoint Using the RFC 3550 Mixer Model
  contents:
  - "3.4.  Point to Multipoint Using the RFC 3550 Mixer Model\n   Shortcut name: Topo-Mixer\n\
    \   A Mixer is a middlebox that aggregates multiple RTP streams, which\n   are\
    \ part of a session, by mixing the media data and generating a new\n   RTP stream.\
    \  One common application for a Mixer is to allow a\n   participant to receive\
    \ a session with a reduced amount of resources.\n                    +-----+\n\
    \         +---+     /       \\     +-----------+      +---+\n         | A |<---/\
    \         \\    |           |<---->| B |\n         +---+   /   Multi-  \\   |\
    \           |      +---+\n                +    Cast     +->|   Mixer   |\n   \
    \      +---+   \\  Network  /   |           |      +---+\n         | C |<---\\\
    \         /    |           |<---->| D |\n         +---+     \\       /     +-----------+\
    \      +---+\n                    +-----+\n      Figure 5 - Point to Multipoint\
    \ Using the RFC 3550 Mixer Model\n   A Mixer can be viewed as a device terminating\
    \ the media streams\n   received from other session participants.  Using the media\
    \ data from\n   the received media streams, a Mixer generates a media stream that\
    \ is\n   sent to the session participant.\n   The content that the Mixer provides\
    \ is the mixed aggregate of what\n   the Mixer receives over the PtP or PtM paths,\
    \ which are part of the\n   same conference session.\n   The Mixer is the content\
    \ source, as it mixes the content (often in\n   the uncompressed domain) and then\
    \ encodes it for transmission to a\n   participant.  The CSRC Count (CC) and CSRC\
    \ fields in the RTP header\n   are used to indicate the contributors of to the\
    \ newly generated\n   stream.  The SSRCs of the to-be-mixed streams on the Mixer\
    \ input\n   appear as the CSRCs at the Mixer output.  That output stream uses\
    \ a\n   unique SSRC that identifies the Mixer's stream.  The CSRC are\n   forwarded\
    \ between the two domains to allow for loop detection and\n   identification of\
    \ sources that are part of the global session.  Note\n   that Section 7.1 of RFC\
    \ 3550 requires the SSRC space to be shared\n   between domains for these reasons.\n\
    \   The Mixer is responsible for generating RTCP packets in accordance\n   with\
    \ its role.  It is a receiver and should therefore send reception\n   reports\
    \ for the media streams it receives.  In its role as a media\n   sender, it should\
    \ also generate Sender Reports for those media\n   streams sent.  As specified\
    \ in Section 7.3 of RFC 3550, a Mixer must\n   not forward RTCP unaltered between\
    \ the two domains.\n   The Mixer depicted in Figure 5 is involved in three domains\
    \ that need\n   to be separated: the multicast network, participant B, and\n \
    \  participant D.  The Mixer produces different mixed streams to B and\n   D,\
    \ as the one to B may contain content received from D, and vice\n   versa.  However,\
    \ the Mixer only needs one SSRC in each domain that is\n   the receiving entity\
    \ and transmitter of mixed content.\n   In the multicast domain, a Mixer still\
    \ needs to provide a mixed view\n   of the other domains.  This makes the Mixer\
    \ simpler to implement and\n   avoids any issues with advanced RTCP handling or\
    \ loop detection,\n   which would be problematic if the Mixer were providing non-symmetric\n\
    \   behavior.  Please see Section 3.7 for more discussion on this topic.\n   A\
    \ Mixer is responsible for receiving RTCP feedback messages and\n   handling them\
    \ appropriately.  The definition of \"appropriate\" depends\n   on the message\
    \ itself and the context.  In some cases, the reception\n   of a codec-control\
    \ message may result in the generation and\n   transmission of RTCP feedback messages\
    \ by the Mixer to the\n   participants in the other domain.  In other cases, a\
    \ message is\n   handled by the Mixer itself and therefore not forwarded to any\
    \ other\n   domain.\n   When replacing the multicast network in Figure 5 (to the\
    \ left of the\n   Mixer) with individual unicast paths as depicted in Figure 6,\
    \ the\n   Mixer model is very similar to the one discussed in Section 3.6\n  \
    \ below.  Please see the discussion in Section 3.6 about the\n   differences between\
    \ these two models.\n         +---+      +------------+      +---+\n         |\
    \ A |<---->|            |<---->| B |\n         +---+      |            |     \
    \ +---+\n                    |   Mixer    |\n         +---+      |           \
    \ |      +---+\n         | C |<---->|            |<---->| D |\n         +---+\
    \      +------------+      +---+\n      Figure 6 - RTP Mixer with Only Unicast\
    \ Paths\n"
- title: 3.5.  Point to Multipoint Using Video Switching MCUs
  contents:
  - "3.5.  Point to Multipoint Using Video Switching MCUs\n   Shortcut name: Topo-Video-switch-MCU\n\
    \         +---+      +------------+      +---+\n         | A |------| Multipoint\
    \ |------| B |\n         +---+      |  Control   |      +---+\n              \
    \      |   Unit     |\n         +---+      |   (MCU)    |      +---+\n       \
    \  | C |------|            |------| D |\n         +---+      +------------+  \
    \    +---+\n      Figure 7 - Point to Multipoint Using a Video Switching MCU\n\
    \   This PtM topology is still deployed today, although the\n   RTCP-terminating\
    \ MCUs, as discussed in the next section, are perhaps\n   more common.  This topology,\
    \ as well as the following one, reflect\n   today's lack of wide availability\
    \ of IP multicast technologies, as\n   well as the simplicity of content switching\
    \ when compared to content\n   mixing.  The technology is commonly implemented\
    \ in what is known as\n   \"Video Switching MCUs\".\n   A video switching MCU\
    \ forwards to a participant a single media\n   stream, selected from the available\
    \ streams.  The criteria for\n   selection are often based on voice activity in\
    \ the audio-visual\n   conference, but other conference management mechanisms\
    \ (like\n   presentation mode or explicit floor control) are known to exist as\n\
    \   well.\n   The video switching MCU may also perform media translation to modify\n\
    \   the content in bit-rate, encoding, or resolution.  However, it still\n   may\
    \ indicate the original sender of the content through the SSRC.  In\n   this case,\
    \ the values of the CC and CSRC fields are retained.\n   If not terminating RTP,\
    \ the RTCP Sender Reports are forwarded for the\n   currently selected sender.\
    \  All RTCP Receiver Reports are freely\n   forwarded between the participants.\
    \  In addition, the MCU may also\n   originate RTCP control traffic in order to\
    \ control the session and/or\n   report on status from its viewpoint.\n   The\
    \ video switching MCU has most of the attributes of a Translator.\n   However,\
    \ its stream selection is a mixing behavior.  This behavior\n   has some RTP and\
    \ RTCP issues associated with it.  The suppression of\n   all but one media stream\
    \ results in most participants seeing only a\n   subset of the sent media streams\
    \ at any given time, often a single\n   stream per conference.  Therefore, RTCP\
    \ Receiver Reports only report\n   on these streams.  Consequently, the media\
    \ senders that are not\n   currently forwarded receive a view of the session that\
    \ indicates\n   their media streams disappear somewhere en route.  This makes\
    \ the use\n   of RTCP for congestion control, or any type of quality reporting,\n\
    \   very problematic.\n   To avoid the aforementioned issues, the MCU needs to\
    \ implement two\n   features.  First, it needs to act as a Mixer (see Section\
    \ 3.4) and\n   forward the selected media stream under its own SSRC and with the\n\
    \   appropriate CSRC values.  Second, the MCU needs to modify the RTCP\n   RRs\
    \ it forwards between the domains.  As a result, it is RECOMMENDED\n   that one\
    \ implement a centralized video switching conference using a\n   Mixer according\
    \ to RFC 3550, instead of the shortcut implementation\n   described here.\n"
- title: 3.6.  Point to Multipoint Using RTCP-Terminating MCU
  contents:
  - "3.6.  Point to Multipoint Using RTCP-Terminating MCU\n   Shortcut name: Topo-RTCP-terminating-MCU\n\
    \         +---+      +------------+      +---+\n         | A |<---->| Multipoint\
    \ |<---->| B |\n         +---+      |  Control   |      +---+\n              \
    \      |   Unit     |\n         +---+      |   (MCU)    |      +---+\n       \
    \  | C |<---->|            |<---->| D |\n         +---+      +------------+  \
    \    +---+\n      Figure 8 - Point to Multipoint Using Content Modifying MCUs\n\
    \   In this PtM scenario, each participant runs an RTP point-to-point\n   session\
    \ between itself and the MCU.  This is a very commonly deployed\n   topology in\
    \ multipoint video conferencing.  The content that the MCU\n   provides to each\
    \ participant is either:\n   a) a selection of the content received from the other\
    \ participants,\n      or\n   b) the mixed aggregate of what the MCU receives\
    \ from the other PtP\n      paths, which are part of the same conference session.\n\
    \   In case a), the MCU may modify the content in bit-rate, encoding, or\n   resolution.\
    \  No explicit RTP mechanism is used to establish the\n   relationship between\
    \ the original media sender and the version the\n   MCU sends.  In other words,\
    \ the outgoing sessions typically use a\n   different SSRC, and may well use a\
    \ different payload type (PT), even\n   if this different PT happens to be mapped\
    \ to the same media type.\n   This is a result of the individually negotiated\
    \ session for each\n   participant.\n   In case b), the MCU is the content source\
    \ as it mixes the content and\n   then encodes it for transmission to a participant.\
    \  According to RTP\n   [RFC3550], the SSRC of the contributors are to be signalled\
    \ using the\n   CSRC/CC mechanism.  In practice, today, most deployed MCUs do\
    \ not\n   implement this feature.  Instead, the identification of the\n   participants\
    \ whose content is included in the Mixer's output is not\n   indicated through\
    \ any explicit RTP mechanism.  That is, most deployed\n   MCUs set the CSRC Count\
    \ (CC) field in the RTP header to zero, thereby\n   indicating no available CSRC\
    \ information, even if they could identify\n   the content sources as suggested\
    \ in RTP.\n   The main feature that sets this topology apart from what RFC 3550\n\
    \   describes is the breaking of the common RTP session across the\n   centralized\
    \ device, such as the MCU.  This results in the loss of\n   explicit RTP-level\
    \ indication of all participants.  If one were using\n   the mechanisms available\
    \ in RTP and RTCP to signal this explicitly,\n   the topology would follow the\
    \ approach of an RTP Mixer.  The lack of\n   explicit indication has at least\
    \ the following potential problems:\n   1) Loop detection cannot be performed\
    \ on the RTP level.  When\n      carelessly connecting two misconfigured MCUs,\
    \ a loop could be\n      generated.\n   2) There is no information about active\
    \ media senders available in\n      the RTP packet.  As this information is missing,\
    \ receivers cannot\n      use it.  It also deprives the client of information\
    \ related to\n      currently active senders in a machine-usable way, thus preventing\n\
    \      clients from indicating currently active speakers in user\n      interfaces,\
    \ etc.\n   Note that deployed MCUs (and endpoints) rely on signalling layer\n\
    \   mechanisms for the identification of the contributing sources, for\n   example,\
    \ a SIP conferencing package [RFC4575].  This alleviates, to\n   some extent,\
    \ the aforementioned issues resulting from ignoring RTP's\n   CSRC mechanism.\n\
    \   As a result of the shortcomings of this topology, it is RECOMMENDED\n   to\
    \ instead implement the Mixer concept as specified by RFC 3550.\n"
- title: 3.7.  Non-Symmetric Mixer/Translators
  contents:
  - "3.7.  Non-Symmetric Mixer/Translators\n   Shortcut name: Topo-Asymmetric\n  \
    \ It is theoretically possible to construct an MCU that is a Mixer in\n   one\
    \ direction and a Translator in another.  The main reason to\n   consider this\
    \ would be to allow topologies similar to Figure 5, where\n   the Mixer does not\
    \ need to mix in the direction from B or D towards\n   the multicast domains with\
    \ A and C.  Instead, the media streams from\n   B and D are forwarded without\
    \ changes.  Avoiding this mixing would\n   save media processing resources that\
    \ perform the mixing in cases\n   where it isn't needed.  However, there would\
    \ still be a need to mix\n   B's stream towards D.  Only in the direction B ->\
    \ multicast domain or\n   D -> multicast domain would it be possible to work as\
    \ a Translator.\n   In all other directions, it would function as a Mixer.\n \
    \  The Mixer/Translator would still need to process and change the RTCP\n   before\
    \ forwarding it in the directions of B or D to the multicast\n   domain.  One\
    \ issue is that A and C do not know about the mixed-media\n   stream the Mixer\
    \ sends to either B or D.  Thus, any reports related\n   to these streams must\
    \ be removed.  Also, receiver reports related to\n   A and C's media stream would\
    \ be missing.  To avoid A and C thinking\n   that B and D aren't receiving A and\
    \ C at all, the Mixer needs to\n   insert its Receiver Reports for the streams\
    \ from A and C into B and\n   D's Sender Reports.  In the opposite direction,\
    \ the Receiver Reports\n   from A and C about B's and D's stream also need to\
    \ be aggregated into\n   the Mixer's Receiver Reports sent to B and D.  Since\
    \ B and D only\n   have the Mixer as source for the stream, all RTCP from A and\
    \ C must\n   be suppressed by the Mixer.\n   This topology is so problematic and\
    \ it is so easy to get the RTCP\n   processing wrong, that it is NOT RECOMMENDED\
    \ to implement this\n   topology.\n"
- title: 3.8.  Combining Topologies
  contents:
  - "3.8.  Combining Topologies\n   Topologies can be combined and linked to each\
    \ other using Mixers or\n   Translators.  However, care must be taken in handling\
    \ the SSRC/CSRC\n   space.  A Mixer will not forward RTCP from sources in other\
    \ domains,\n   but will instead generate its own RTCP packets for each domain\
    \ it\n   mixes into, including the necessary Source Description (SDES)\n   information\
    \ for both the CSRCs and the SSRCs.  Thus, in a mixed\n   domain, the only SSRCs\
    \ seen will be the ones present in the domain,\n   while there can be CSRCs from\
    \ all the domains connected together with\n   a combination of Mixers and Translators.\
    \  The combined SSRC and CSRC\n   space is common over any Translator or Mixer.\
    \  This is important to\n   facilitate loop detection, something that is likely\
    \ to be even more\n   important in combined topologies due to the mixed behavior\
    \ between\n   the domains.  Any hybrid, like the Topo-Video-switch-MCU or\n  \
    \ Topo-Asymmetric, requires considerable thought on how RTCP is dealt\n   with.\n"
- title: 4.  Comparing Topologies
  contents:
  - "4.  Comparing Topologies\n   The topologies discussed in Section 3 have different\
    \ properties.\n   This section first lists these properties and then maps the\
    \ different\n   topologies to them.  Please note that even if a certain property\
    \ is\n   supported within a particular topology concept, the necessary\n   functionality\
    \ may, in many cases, be optional to implement.\n"
- title: 4.1.  Topology Properties
  contents:
  - '4.1.  Topology Properties

    '
- title: 4.1.1.  All to All Media Transmission
  contents:
  - "4.1.1.  All to All Media Transmission\n   Multicast, at least Any Source Multicast\
    \ (ASM), provides the\n   functionality that everyone may send to, or receive\
    \ from, everyone\n   else within the session.  MCUs, Mixers, and Translators may\
    \ all\n   provide that functionality at least on some basic level.  However,\n\
    \   there are some differences in which type of reachability they\n   provide.\n\
    \   The transport Translator function called \"relay\", in Section 3.3, is\n \
    \  the one that provides the emulation of ASM that is closest to true\n   IP-multicast-based,\
    \ all to all transmission.  Media Translators,\n   Mixers, and the MCU variants\
    \ do not provide a fully meshed forwarding\n   on the transport level; instead,\
    \ they only allow limited forwarding\n   of content from the other session participants.\n\
    \   The \"all to all media transmission\" requires that any media\n   transmitting\
    \ entity considers the path to the least capable receiver.\n   Otherwise, the\
    \ media transmissions may overload that path.\n   Therefore, a media sender needs\
    \ to monitor the path from itself to\n   any of the participants, to detect the\
    \ currently least capable\n   receiver, and adapt its sending rate accordingly.\
    \  As multiple\n   participants may send simultaneously, the available resources\
    \ may\n   vary.  RTCP's Receiver Reports help performing this monitoring, at\n\
    \   least on a medium time scale.\n   The transmission of RTCP automatically adapts\
    \ to any changes in the\n   number of participants due to the transmission algorithm,\
    \ defined in\n   the RTP specification [RFC3550], and the extensions in AVPF [RFC4585]\n\
    \   (when applicable).  That way, the resources utilized for RTCP stay\n   within\
    \ the bounds configured for the session.\n"
- title: 4.1.2.  Transport or Media Interoperability
  contents:
  - "4.1.2.  Transport or Media Interoperability\n   Translators, Mixers, and RTCP-terminating\
    \ MCU all allow changing the\n   media encoding or the transport to other properties\
    \ of the other\n   domain, thereby providing extended interoperability in cases\
    \ where\n   the participants lack a common set of media codecs and/or transport\n\
    \   protocols.\n"
- title: 4.1.3.  Per Domain Bit-Rate Adaptation
  contents:
  - "4.1.3.  Per Domain Bit-Rate Adaptation\n   Participants are most likely to be\
    \ connected to each other with a\n   heterogeneous set of paths.  This makes congestion\
    \ control in a Point\n   to Multipoint set problematic.  For the ASM and \"relay\"\
    \ scenario,\n   each individual sender has to adapt to the receiver with the least\n\
    \   capable path.  This is no longer necessary when Media Translators,\n   Mixers,\
    \ or MCUs are involved, as each participant only needs to adapt\n   to the slowest\
    \ path within its own domain.  The Translator, Mixer, or\n   MCU topologies all\
    \ require their respective outgoing streams to\n   adjust the bit-rate, packet-rate,\
    \ etc., to adapt to the least capable\n   path in each of the other domains. \
    \ That way one can avoid lowering\n   the quality to the least-capable participant\
    \ in all the domains at\n   the cost (complexity, delay, equipment) of the Mixer\
    \ or Translator.\n"
- title: 4.1.4.  Aggregation of Media
  contents:
  - "4.1.4.  Aggregation of Media\n   In the all to all media property mentioned above\
    \ and provided by ASM,\n   all simultaneous media transmissions share the available\
    \ bit-rate.\n   For participants with limited reception capabilities, this may\
    \ result\n   in a situation where even a minimal acceptable media quality cannot\n\
    \   be accomplished.  This is the result of multiple media streams\n   needing\
    \ to share the available resources.  The solution to this\n   problem is to provide\
    \ for a Mixer or MCU to aggregate the multiple\n   streams into a single one.\
    \  This aggregation can be performed\n   according to different methods.  Mixing\
    \ or selection are two common\n   methods.\n"
- title: 4.1.5.  View of All Session Participants
  contents:
  - "4.1.5.  View of All Session Participants\n   The RTP protocol includes functionality\
    \ to identify the session\n   participants through the use of the SSRC and CSRC\
    \ fields.  In\n   addition, it is capable of carrying some further identity information\n\
    \   about these participants using the RTCP Source Descriptors (SDES).\n   To\
    \ maintain this functionality, it is necessary that RTCP is handled\n   correctly\
    \ in domain bridging function.  This is specified for\n   Translators and Mixers.\
    \  The MCU described in Section 3.5 does not\n   entirely fulfill this.  The one\
    \ described in Section 3.6 does not\n   support this at all.\n"
- title: 4.1.6.  Loop Detection
  contents:
  - "4.1.6.  Loop Detection\n   In complex topologies with multiple interconnected\
    \ domains, it is\n   possible to form media loops.  RTP and RTCP support detecting\
    \ such\n   loops, as long as the SSRC and CSRC identities are correctly set in\n\
    \   forwarded packets.  It is likely that loop detection works for the\n   MCU,\
    \ described in Section 3.5, at least as long as it forwards the\n   RTCP between\
    \ the participants.  However, the MCU in Section 3.6 will\n   definitely break\
    \ the loop detection mechanism.\n"
- title: 4.2.  Comparison of Topologies
  contents:
  - "4.2.  Comparison of Topologies\n   The table below attempts to summarize the\
    \ properties of the different\n   topologies.  The legend to the topology abbreviations\
    \ are:\n   Topo-Point-to-Point (PtP), Topo-Multicast (Multic),\n   Topo-Trns-Translator\
    \ (TTrn), Topo-Media-Translator (including\n   Transport Translator) (MTrn), Topo-Mixer\
    \ (Mixer), Topo-Asymmetric\n   (ASY), Topo-Video-switch-MCU (MCUs), and Topo-RTCP-terminating-MCU\n\
    \   (MCUt).  In the table below, Y indicates Yes or full support, N\n   indicates\
    \ No support, (Y) indicates partial support, and N/A\n   indicates not applicable.\n\
    \   Property               PtP  Multic TTrn MTrn Mixer ASY MCUs MCUt\n   ------------------------------------------------------------------\n\
    \   All to All media        N    Y      Y    Y   (Y)   (Y) (Y)  (Y)\n   Interoperability\
    \        N/A  N      Y    Y    Y     Y   N    Y\n   Per Domain Adaptation   N/A\
    \  N      N    Y    Y     Y   N    Y\n   Aggregation of media    N    N      N\
    \    N    Y    (Y)  Y    Y\n   Full Session View       Y    Y      Y    Y    Y\
    \     Y  (Y)   N\n   Loop Detection          Y    Y      Y    Y    Y     Y  (Y)\
    \   N\n   Please note that the Media Translator also includes the transport\n\
    \   Translator functionality.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The use of Mixers and Translators has impact\
    \ on security and the\n   security functions used.  The primary issue is that\
    \ both Mixers and\n   Translators modify packets, thus preventing the use of integrity\
    \ and\n   source authentication, unless they are trusted devices that take part\n\
    \   in the security context, e.g., the device can send Secure Realtime\n   Transport\
    \ Protocol (SRTP) and Secure Realtime Transport Control\n   Protocol (SRTCP) [RFC3711]\
    \ packets to session endpoints.  If\n   encryption is employed, the media Translator\
    \ and Mixer need to be\n   able to decrypt the media to perform its function.\
    \  A transport\n   Translator may be used without access to the encrypted payload\
    \ in\n   cases where it translates parts that are not included in the\n   encryption\
    \ and integrity protection, for example, IP address and UDP\n   port numbers in\
    \ a media stream using SRTP [RFC3711].  However, in\n   general, the Translator\
    \ or Mixer needs to be part of the signalling\n   context and get the necessary\
    \ security associations (e.g., SRTP\n   crypto contexts) established with its\
    \ RTP session participants.\n   Including the Mixer and Translator in the security\
    \ context allows the\n   entity, if subverted or misbehaving, to perform a number\
    \ of very\n   serious attacks as it has full access.  It can perform all the\n\
    \   attacks possible (see RFC 3550 and any applicable profiles) as if the\n  \
    \ media session were not protected at all, while giving the impression\n   to\
    \ the session participants that they are protected.\n   Transport Translators\
    \ have no interactions with cryptography that\n   works above the transport layer,\
    \ such as SRTP, since that sort of\n   Translator leaves the RTP header and payload\
    \ unaltered.  Media\n   Translators, on the other hand, have strong interactions\
    \ with\n   cryptography, since they alter the RTP payload.  A media Translator\n\
    \   in a session that uses cryptographic protection needs to perform\n   cryptographic\
    \ processing to both inbound and outbound packets.\n   A media Translator may\
    \ need to use different cryptographic keys for\n   the inbound and outbound processing.\
    \  For SRTP, different keys are\n   required, because an RFC 3550 media Translator\
    \ leaves the SSRC\n   unchanged during its packet processing, and SRTP key sharing\
    \ is only\n   allowed when distinct SSRCs can be used to protect distinct packet\n\
    \   streams.\n   When the media Translator uses different keys to process inbound\
    \ and\n   outbound packets, each session participant needs to be provided with\n\
    \   the appropriate key, depending on whether they are listening to the\n   Translator\
    \ or the original source.  (Note that there is an\n   architectural difference\
    \ between RTP media translation, in which\n   participants can rely on the RTP\
    \ Payload Type field of a packet to\n   determine appropriate processing, and\
    \ cryptographically protected\n   media translation, in which participants must\
    \ use information that is\n   not carried in the packet.)\n   When using security\
    \ mechanisms with Translators and Mixers, it is\n   possible that the Translator\
    \ or Mixer could create different security\n   associations for the different\
    \ domains they are working in.  Doing so\n   has some implications:\n   First,\
    \ it might weaken security if the Mixer/Translator accepts a\n   weaker algorithm\
    \ or key in one domain than in another.  Therefore,\n   care should be taken that\
    \ appropriately strong security parameters\n   are negotiated in all domains.\
    \  In many cases, \"appropriate\"\n   translates to \"similar\" strength.  If\
    \ a key management system does\n   allow the negotiation of security parameters\
    \ resulting in a different\n   strength of the security, then this system SHOULD\
    \ notify the\n   participants in the other domains about this.\n   Second, the\
    \ number of crypto contexts (keys and security related\n   state) needed (for\
    \ example, in SRTP [RFC3711]) may vary between\n   Mixers and Translators.  A\
    \ Mixer normally needs to represent only a\n   single SSRC per domain and therefore\
    \ needs to create only one\n   security association (SRTP crypto context) per\
    \ domain.  In contrast,\n   a Translator needs one security association per participant\
    \ it\n   translates towards, in the opposite domain.  Considering Figure 3,\n\
    \   the Translator needs two security associations towards the multicast\n   domain,\
    \ one for B and one for D.  It may be forced to maintain a set\n   of totally\
    \ independent security associations between itself and B and\n   D respectively,\
    \ so as to avoid two-time pad occurrences.  These\n   contexts must also be capable\
    \ of handling all the sources present in\n   the other domains.  Hence, using\
    \ completely independent security\n   associations (for certain keying mechanisms)\
    \ may force a Translator\n   to handle N*DM keys and related state; where N is\
    \ the total number of\n   SSRCs used over all domains and DM is the total number\
    \ of domains.\n   There exist a number of different mechanisms to provide keys\
    \ to the\n   different participants.  One example is the choice between group\
    \ keys\n   and unique keys per SSRC.  The appropriate keying model is impacted\n\
    \   by the topologies one intends to use.  The final security properties\n   are\
    \ dependent on both the topologies in use and the keying\n   mechanisms' properties,\
    \ and need to be considered by the application.\n   Exactly which mechanisms are\
    \ used is outside of the scope of this\n   document.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to thank Bo Burman, Umesh Chandra,\
    \ Roni Even,\n   Keith Lantz, Ladan Gharai, Geoff Hunt, and Mark Baugher for their\n\
    \   help in reviewing this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick, R., and V.\n \
    \              Jacobson, \"RTP: A Transport Protocol for Real-Time\n         \
    \      Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3711]   Baugher, M.,\
    \ McGrew, D., Naslund, M., Carrara, E., and K.\n               Norrman, \"The\
    \ Secure Real-time Transport Protocol\n               (SRTP)\", RFC 3711, March\
    \ 2004.\n   [RFC4575]   Rosenberg, J., Schulzrinne, H., and O. Levin, Ed., \"\
    A\n               Session Initiation Protocol (SIP) Event Package for\n      \
    \         Conference State\", RFC 4575, August 2006.\n   [RFC4585]   Ott, J.,\
    \ Wenger, S., Sato, N., Burmeister, C., and J.\n               Rey, \"Extended\
    \ RTP Profile for Real-time Transport\n               Control Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC\n               4585, July 2006.\n"
- title: 7.2. Informative References
  contents:
  - "7.2. Informative References\n   [CCM]       Wenger, S., Chandra, U., Westerlund,\
    \ M., Burman, B.,\n               \"Codec Control Messages in the RTP Audio-Visual\
    \ Profile\n               with Feedback (AVPF)\", Work in Progress, July 2007.\n\
    \   [H323]      ITU-T Recommendation H.323, \"Packet-based multimedia\n      \
    \         communications systems\", June 2006.\n   [RTCP-SSM]  J. Ott, J. Chesterfield,\
    \ E. Schooler, \"RTCP Extensions\n               for Single-Source Multicast Sessions\
    \ with Unicast\n               Feedback,\" Work in Progress, March 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Magnus Westerlund\n   Ericsson Research\n   Ericsson AB\n\
    \   SE-164 80 Stockholm, SWEDEN\n   Phone: +46 8 7190000\n   EMail: magnus.westerlund@ericsson.com\n\
    \   Stephan Wenger\n   Nokia Corporation\n   P.O. Box 100\n   FIN-33721 Tampere\n\
    \   FINLAND\n   Phone: +358-50-486-0637\n   EMail: stewe@stewe.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
