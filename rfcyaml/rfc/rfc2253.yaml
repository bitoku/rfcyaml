- title: __initial_text__
  contents:
  - "              Lightweight Directory Access Protocol (v3):\n           UTF-8 String\
    \ Representation of Distinguished Names\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document describes a directory access protocol that provides\n\
    \   both read and update access.  Update access requires secure\n   authentication,\
    \ but this document does not mandate implementation of\n   any satisfactory authentication\
    \ mechanisms.\n   In accordance with RFC 2026, section 4.4.1, this specification\
    \ is\n   being approved by IESG as a Proposed Standard despite this\n   limitation,\
    \ for the following reasons:\n   a. to encourage implementation and interoperability\
    \ testing of\n      these protocols (with or without update access) before they\n\
    \      are deployed, and\n   b. to encourage deployment and use of these protocols\
    \ in read-only\n      applications.  (e.g. applications where LDAPv3 is used as\n\
    \      a query language for directories which are updated by some\n      secure\
    \ mechanism other than LDAP), and\n   c. to avoid delaying the advancement and\
    \ deployment of other Internet\n      standards-track protocols which require\
    \ the ability to query, but\n      not update, LDAPv3 directory servers.\n   Readers\
    \ are hereby warned that until mandatory authentication\n   mechanisms are standardized,\
    \ clients and servers written according to\n   this specification which make use\
    \ of update functionality are\n   UNLIKELY TO INTEROPERATE, or MAY INTEROPERATE\
    \ ONLY IF AUTHENTICATION\n   IS REDUCED TO AN UNACCEPTABLY WEAK LEVEL.\n   Implementors\
    \ are hereby discouraged from deploying LDAPv3 clients or\n   servers which implement\
    \ the update functionality, until a Proposed\n   Standard for mandatory authentication\
    \ in LDAPv3 has been approved and\n   published as an RFC.\n"
- title: Abstract
  contents:
  - "Abstract\n   The X.500 Directory uses distinguished names as the primary keys\
    \ to\n   entries in the directory.  Distinguished Names are encoded in ASN.1\n\
    \   in the X.500 Directory protocols.  In the Lightweight Directory\n   Access\
    \ Protocol, a string representation of distinguished names is\n   transferred.\
    \  This specification defines the string format for\n   representing names, which\
    \ is designed to give a clean representation\n   of commonly used distinguished\
    \ names, while being able to represent\n   any distinguished name.\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in RFC 2119 [6].\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   This specification assumes familiarity with X.500 [1], and\
    \ the\n   concept of Distinguished Name.  It is important to have a common\n \
    \  format to be able to unambiguously represent a distinguished name.\n   The\
    \ primary goal of this specification is ease of encoding and\n   decoding.  A\
    \ secondary goal is to have names that are human readable.\n   It is not expected\
    \ that LDAP clients with a human user interface\n   would display these strings\
    \ directly to the user, but would most\n   likely be performing translations (such\
    \ as expressing attribute type\n   names in one of the local national languages).\n"
- title: 2.  Converting DistinguishedName from ASN.1 to a String
  contents:
  - "2.  Converting DistinguishedName from ASN.1 to a String\n   In X.501 [2] the\
    \ ASN.1 structure of distinguished name is defined as:\n       DistinguishedName\
    \ ::= RDNSequence\n       RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n\
    \       RelativeDistinguishedName ::= SET SIZE (1..MAX) OF\n        AttributeTypeAndValue\n\
    \       AttributeTypeAndValue ::= SEQUENCE {\n        type  AttributeType,\n \
    \       value AttributeValue }\n   The following sections define the algorithm\
    \ for converting from an\n   ASN.1 structured representation to a UTF-8 string\
    \ representation.\n"
- title: 2.1. Converting the RDNSequence
  contents:
  - "2.1. Converting the RDNSequence\n   If the RDNSequence is an empty sequence,\
    \ the result is the empty or\n   zero length string.\n   Otherwise, the output\
    \ consists of the string encodings of each\n   RelativeDistinguishedName in the\
    \ RDNSequence (according to 2.2),\n   starting with the last element of the sequence\
    \ and moving backwards\n   toward the first.\n   The encodings of adjoining RelativeDistinguishedNames\
    \ are separated\n   by a comma character (',' ASCII 44).\n"
- title: 2.2.  Converting RelativeDistinguishedName
  contents:
  - "2.2.  Converting RelativeDistinguishedName\n   When converting from an ASN.1\
    \ RelativeDistinguishedName to a string,\n   the output consists of the string\
    \ encodings of each\n   AttributeTypeAndValue (according to 2.3), in any order.\n\
    \   Where there is a multi-valued RDN, the outputs from adjoining\n   AttributeTypeAndValues\
    \ are separated by a plus ('+' ASCII 43)\n   character.\n"
- title: 2.3.  Converting AttributeTypeAndValue
  contents:
  - "2.3.  Converting AttributeTypeAndValue\n   The AttributeTypeAndValue is encoded\
    \ as the string representation of\n   the AttributeType, followed by an equals\
    \ character ('=' ASCII 61),\n   followed by the string representation of the AttributeValue.\
    \  The\n   encoding of the AttributeValue is given in section 2.4.\n   If the\
    \ AttributeType is in a published table of attribute types\n   associated with\
    \ LDAP [4], then the type name string from that table\n   is used, otherwise it\
    \ is encoded as the dotted-decimal encoding of\n   the AttributeType's OBJECT\
    \ IDENTIFIER. The dotted-decimal notation is\n   described in [3].  As an example,\
    \ strings for a few of the attribute\n   types frequently seen in RDNs include:\n\
    \                    String  X.500 AttributeType\n                    ------------------------------\n\
    \                    CN      commonName\n                    L       localityName\n\
    \                    ST      stateOrProvinceName\n                    O      \
    \ organizationName\n                    OU      organizationalUnitName\n     \
    \               C       countryName\n                    STREET  streetAddress\n\
    \                    DC      domainComponent\n                    UID     userid\n"
- title: 2.4.  Converting an AttributeValue from ASN.1 to a String
  contents:
  - "2.4.  Converting an AttributeValue from ASN.1 to a String\n   If the AttributeValue\
    \ is of a type which does not have a string\n   representation defined for it,\
    \ then it is simply encoded as an\n   octothorpe character ('#' ASCII 35) followed\
    \ by the hexadecimal\n   representation of each of the bytes of the BER encoding\
    \ of the X.500\n   AttributeValue.  This form SHOULD be used if the AttributeType\
    \ is of\n   the dotted-decimal form.\n   Otherwise, if the AttributeValue is of\
    \ a type which has a string\n   representation, the value is converted first to\
    \ a UTF-8 string\n   according to its syntax specification (see for example section\
    \ 6 of\n   [4]).\n   If the UTF-8 string does not have any of the following characters\n\
    \   which need escaping, then that string can be used as the string\n   representation\
    \ of the value.\n    o   a space or \"#\" character occurring at the beginning\
    \ of the\n        string\n    o   a space character occurring at the end of the\
    \ string\n    o   one of the characters \",\", \"+\", \"\"\", \"\\\", \"<\", \"\
    >\" or \";\"\n   Implementations MAY escape other characters.\n   If a character\
    \ to be escaped is one of the list shown above, then it\n   is prefixed by a backslash\
    \ ('\\' ASCII 92).\n   Otherwise the character to be escaped is replaced by a\
    \ backslash and\n   two hex digits, which form a single byte in the code of the\n\
    \   character.\n   Examples of the escaping mechanism are shown in section 5.\n"
- title: 3. Parsing a String back to a Distinguished Name
  contents:
  - "3. Parsing a String back to a Distinguished Name\n   The structure of the string\
    \ is specified in a BNF grammar, based on\n   the grammar defined in RFC 822 [5].\
    \  Server implementations parsing a\n   DN string generated by an LDAPv2 client\
    \ MUST also accept (and ignore)\n   the variants given in section 4 of this document.\n"
- title: distinguishedName = [name]                    ; may be empty string
  contents:
  - 'distinguishedName = [name]                    ; may be empty string

    '
- title: name       = name-component *("," name-component)
  contents:
  - 'name       = name-component *("," name-component)

    '
- title: name-component = attributeTypeAndValue *("+" attributeTypeAndValue)
  contents:
  - 'name-component = attributeTypeAndValue *("+" attributeTypeAndValue)

    '
- title: attributeTypeAndValue = attributeType "=" attributeValue
  contents:
  - 'attributeTypeAndValue = attributeType "=" attributeValue

    '
- title: attributeType = (ALPHA 1*keychar) / oid
  contents:
  - 'attributeType = (ALPHA 1*keychar) / oid

    '
- title: keychar    = ALPHA / DIGIT / "-"
  contents:
  - 'keychar    = ALPHA / DIGIT / "-"

    '
- title: oid        = 1*DIGIT *("." 1*DIGIT)
  contents:
  - 'oid        = 1*DIGIT *("." 1*DIGIT)

    '
- title: attributeValue = string
  contents:
  - 'attributeValue = string

    '
- title: string     = *( stringchar / pair )
  contents:
  - "string     = *( stringchar / pair )\n             / \"#\" hexstring\n       \
    \      / QUOTATION *( quotechar / pair ) QUOTATION ; only from v2\n"
- title: quotechar     = <any character except "\" or QUOTATION >
  contents:
  - 'quotechar     = <any character except "\" or QUOTATION >

    '
- title: special    = "," / "=" / "+" / "<" /  ">" / "#" / ";"
  contents:
  - 'special    = "," / "=" / "+" / "<" /  ">" / "#" / ";"

    '
- title: pair       = "\" ( special / "\" / QUOTATION / hexpair )
  contents:
  - 'pair       = "\" ( special / "\" / QUOTATION / hexpair )

    '
- title: stringchar = <any character except one of special, "\" or QUOTATION >
  contents:
  - 'stringchar = <any character except one of special, "\" or QUOTATION >

    '
- title: hexstring  = 1*hexpair
  contents:
  - 'hexstring  = 1*hexpair

    '
- title: hexpair    = hexchar hexchar
  contents:
  - 'hexpair    = hexchar hexchar

    '
- title: hexchar    = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
  contents:
  - "hexchar    = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n        \
    \     / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\"\n"
- title: ALPHA      =  <any ASCII alphabetic character>
  contents:
  - "ALPHA      =  <any ASCII alphabetic character>\n                            \
    \             ; (decimal 65-90 and 97-122)\n"
- title: DIGIT      =  <any ASCII decimal digit>  ; (decimal 48-57)
  contents:
  - 'DIGIT      =  <any ASCII decimal digit>  ; (decimal 48-57)

    '
- title: QUOTATION  =  <the ASCII double quotation mark character '"' decimal 34>
  contents:
  - 'QUOTATION  =  <the ASCII double quotation mark character ''"'' decimal 34>

    '
- title: 4.  Relationship with RFC 1779 and LDAPv2
  contents:
  - "4.  Relationship with RFC 1779 and LDAPv2\n   The syntax given in this document\
    \ is more restrictive than the syntax\n   in RFC 1779.  Implementations parsing\
    \ a string generated by an LDAPv2\n   client MUST accept the syntax of RFC 1779.\
    \  Implementations MUST NOT,\n   however, generate any of the RFC 1779 encodings\
    \ which are not\n   described above in section 2.\n   Implementations MUST allow\
    \ a semicolon character to be used instead\n   of a comma to separate RDNs in\
    \ a distinguished name, and MUST also\n   allow whitespace characters to be present\
    \ on either side of the comma\n   or semicolon.  The whitespace characters are\
    \ ignored, and the\n   semicolon replaced with a comma.\n   Implementations MUST\
    \ allow an oid in the attribute type to be\n   prefixed by one of the character\
    \ strings \"oid.\" or \"OID.\".\n   Implementations MUST allow for space (' '\
    \ ASCII 32) characters to be\n   present between name-component and ',', between\
    \ attributeTypeAndValue\n   and '+', between attributeType and '=', and between\
    \ '=' and\n   attributeValue.  These space characters are ignored when parsing.\n\
    \   Implementations MUST allow a value to be surrounded by quote ('\"'\n   ASCII\
    \ 34) characters, which are not part of the value.  Inside the\n   quoted value,\
    \ the following characters can occur without any\n   escaping:\n             \
    \      \",\", \"=\", \"+\", \"<\", \">\", \"#\" and \";\"\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   This notation is designed to be convenient for common forms\
    \ of name.\n   This section gives a few examples of distinguished names written\n\
    \   using this notation.  First is a name containing three relative\n   distinguished\
    \ names (RDNs):\n   CN=Steve Kille,O=Isode Limited,C=GB\n   Here is an example\
    \ name containing three RDNs, in which the first RDN\n   is multi-valued:\n  \
    \ OU=Sales+CN=J. Smith,O=Widget Inc.,C=US\n   This example shows the method of\
    \ quoting of a comma in an\n   organization name:\n   CN=L. Eagle,O=Sue\\, Grabbit\
    \ and Runn,C=GB\n   An example name in which a value contains a carriage return\n\
    \   character:\n   CN=Before\\0DAfter,O=Test,C=GB\n   An example name in which\
    \ an RDN was of an unrecognized type.  The\n   value is the BER encoding of an\
    \ OCTET STRING containing two bytes\n   0x48 and 0x69.\n   1.3.6.1.4.1.1466.0=#04024869,O=Test,C=GB\n\
    \   Finally, an example of an RDN surname value consisting of 5 letters:\n   Unicode\
    \ Letter Description      10646 code UTF-8  Quoted\n   ===============================\
    \ ========== ====== =======\n   LATIN CAPITAL LETTER L          U0000004C  0x4C\
    \   L\n   LATIN SMALL LETTER U            U00000075  0x75   u\n   LATIN SMALL\
    \ LETTER C WITH CARON U0000010D  0xC48D \\C4\\8D\n   LATIN SMALL LETTER I    \
    \        U00000069  0x69   i\n   LATIN SMALL LETTER C WITH ACUTE U00000107  0xC487\
    \ \\C4\\87\n   Could be written in printable ASCII (useful for debugging purposes):\n\
    \   SN=Lu\\C4\\8Di\\C4\\87\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1] The Directory -- overview of concepts, models and services.\n\
    \       ITU-T Rec. X.500(1993).\n   [2] The Directory -- Models. ITU-T Rec. X.501(1993).\n\
    \   [3] Wahl, M., Howes, T., and S. Kille, \"Lightweight Directory\n       Access\
    \  Protocol (v3)\", RFC 2251, December 1997.\n   [4] Wahl, M., Coulbeck, A., Howes,\
    \ T. and S. Kille, \"Lightweight\n       Directory Access Protocol (v3): Attribute\
    \ Syntax Definitions\",\n       RFC 2252, December 1997.\n   [5] Crocker, D.,\
    \ \"Standard of the Format of ARPA-Internet Text\n       Messages\", STD 11, RFC\
    \ 822, August 1982.\n   [6] Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n       Levels\", RFC 2119.\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1. Disclosure
  contents:
  - "7.1. Disclosure\n   Distinguished Names typically consist of descriptive information\n\
    \   about the entries they name, which can be people, organizations,\n   devices\
    \ or other real-world objects.  This frequently includes some\n   of the following\
    \ kinds of information:\n   - the common name of the object (i.e. a person's full\
    \ name)\n   - an email or TCP/IP address\n   - its physical location (country,\
    \ locality, city, street address)\n   - organizational attributes (such as department\
    \ name or affiliation)\n   Most countries have privacy laws regarding the publication\
    \ of\n   information about people.\n"
- title: 7.2. Use of Distinguished Names in Security Applications
  contents:
  - "7.2. Use of Distinguished Names in Security Applications\n   The transformations\
    \ of an AttributeValue value from its X.501 form to\n   an LDAP string representation\
    \ are not always reversible back to the\n   same BER or DER form.  An example\
    \ of a situation which requires the\n   DER form of a distinguished name is the\
    \ verification of an X.509\n   certificate.\n   For example, a distinguished name\
    \ consisting of one RDN with one AVA,\n   in which the type is commonName and\
    \ the value is of the TeletexString\n   choice with the letters 'Sam' would be\
    \ represented in LDAP as the\n   string CN=Sam.  Another distinguished name in\
    \ which the value is\n   still 'Sam' but of the PrintableString choice would have\
    \ the same\n   representation CN=Sam.\n   Applications which require the reconstruction\
    \ of the DER form of the\n   value SHOULD NOT use the string representation of\
    \ attribute syntaxes\n   when converting a distinguished name to the LDAP format.\
    \  Instead,\n   they SHOULD use the hexadecimal form prefixed by the octothorpe\
    \ ('#')\n   as described in the first paragraph of section 2.4.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Mark Wahl\n   Critical Angle Inc.\n   4815 W. Braker\
    \ Lane #502-385\n   Austin, TX 78759\n   USA\n   EMail:  M.Wahl@critical-angle.com\n\
    \   Steve Kille\n   Isode Ltd.\n   The Dome\n   The Square\n   Richmond, Surrey\n\
    \   TW9 1DT\n   England\n   Phone:  +44-181-332-9091\n   EMail:  S.Kille@ISODE.COM\n\
    \   Tim Howes\n   Netscape Communications Corp.\n   501 E. Middlefield Rd, MS\
    \ MV068\n   Mountain View, CA 94043\n   USA\n   Phone:  +1 650 937-3419\n   EMail:\
    \   howes@netscape.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1997). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
