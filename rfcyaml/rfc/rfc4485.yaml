- title: __initial_text__
  contents:
  - "                Guidelines for Authors of Extensions to\n                 the\
    \ Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) is a flexible yet simple tool\n\
    \   for establishing interactive communications sessions across the\n   Internet.\
    \  Part of this flexibility is the ease with which it can be\n   extended.  In\
    \ order to facilitate effective and interoperable\n   extensions to SIP, some\
    \ guidelines need to be followed when\n   developing SIP extensions.  This document\
    \ outlines a set of such\n   guidelines for authors of SIP extensions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Should I Define a SIP Extension? ................................3\n    \
    \  3.1. SIP's Solution Space .......................................4\n      3.2.\
    \ SIP Architectural Model ....................................5\n   4. Issues\
    \ to Be Addressed ..........................................7\n      4.1. Backwards\
    \ Compatibility ....................................7\n      4.2. Security ..................................................10\n\
    \      4.3. Terminology ...............................................10\n  \
    \    4.4. Syntactic Issues ..........................................10\n    \
    \  4.5. Semantics, Semantics, Semantics ...........................13\n      4.6.\
    \ Examples Section ..........................................14\n      4.7. Overview\
    \ Section ..........................................14\n      4.8. IANA Considerations\
    \ Section ...............................14\n      4.9. Document-Naming Conventions\
    \ ...............................16\n      4.10. Additional Considerations for\
    \ New Methods ................16\n      4.11. Additional Considerations for New\
    \ Header Fields\n            or Header Field ..........................................17\n\
    \      4.12. Additional Considerations for New Body Types .............18\n  \
    \ 5. Interactions with SIP Features .................................18\n   6.\
    \ Security Considerations ........................................19\n   7. Acknowledgements\
    \ ...............................................19\n   8. References .....................................................19\n\
    \      8.1. Normative References ......................................19\n  \
    \    8.2. Informative References ....................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [2] is a flexible\
    \ yet simple\n   tool for establishing interactive communications sessions across\
    \ the\n   Internet.  Part of this flexibility is the ease with which it can be\n\
    \   extended (with new methods, new header fields, new body types, and\n   new\
    \ parameters), and there have been countless proposals that have\n   been made\
    \ to do just that.  An IETF process has been put into place\n   that defines how\
    \ extensions are to be made to the SIP protocol [10].\n   That process is designed\
    \ to ensure that extensions are made that are\n   appropriate for SIP (as opposed\
    \ to being done in some other\n   protocol), that these extensions fit within\
    \ the model and framework\n   provided by SIP and are consistent with its operation,\
    \ and that these\n   extensions solve problems generically rather than for a specific\
    \ use\n   case.  However, [10] does not provide the technical guidelines needed\n\
    \   to assist that process.  This specification helps to meet that need.\n   This\
    \ specification first provides a set of guidelines to help decide\n   whether\
    \ a certain piece of functionality is appropriately done in\n   SIP.  Assuming\
    \ the functionality is appropriate, it then points out\n   issues that extensions\
    \ should deal with from within their\n   specification.  Finally, it discusses\
    \ common interactions with\n   existing SIP features that often cause difficulties\
    \ in extensions.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [1] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Should I Define a SIP Extension?
  contents:
  - "3.  Should I Define a SIP Extension?\n   The first question to be addressed when\
    \ defining a SIP extension is\n   whether a SIP extension is the best solution\
    \ to the problem.  SIP has\n   been proposed as a solution for numerous problems,\
    \ including\n   mobility, configuration and management, QoS control, call control,\n\
    \   caller preferences, device control, third-party call control, and\n   MPLS\
    \ path setup, to name a few.  Clearly, not every problem can be\n   solved by\
    \ a SIP extension.  More importantly, some problems that\n   could be solved by\
    \ a SIP extension probably shouldn't.\n   To assist engineers in determining whether\
    \ a SIP extension is an\n   appropriate solution to their problem, we present\
    \ two broad criteria.\n   First, the problem SHOULD fit into the general purview\
    \ of SIP's\n   solution space.  Secondly, the solution MUST conform to the general\n\
    \   SIP architectural model.\n   Although the first criteria might seem obvious,\
    \ we have observed that\n   numerous extensions to SIP have been proposed because\
    \ some function\n   is needed in a device that also speaks SIP.  The argument\
    \ is\n   generally given that \"I'd rather implement one protocol than many\"\
    .\n   As an example, user agents, like all other IP hosts, need some way to\n\
    \   obtain their IP address.  This is generally done through DHCP [11].\n   SIP's\
    \ multicast registration mechanisms might supply an alternate way\n   to obtain\
    \ an IP address.  This would eliminate the need for DHCP in\n   clients.  However,\
    \ we do not believe such extensions are appropriate.\n   We believe that protocols\
    \ should be defined to provide specific,\n   narrow functions, rather than be\
    \ defined for all protocols needed\n   between a pair of devices.  The former\
    \ approach to protocol design\n   yields modular protocols with broad application.\
    \  It also facilitates\n   extensibility and growth; single protocols can be removed\
    \ and changed\n   without affecting the entire system.  We observe that this approach\n\
    \   to protocol engineering mirrors object-oriented software engineering.\n  \
    \ Our second criteria, that the extension must conform to the general\n   SIP\
    \ architectural model, ensures that the protocol remains manageable\n   and broadly\
    \ applicable.\n"
- title: 3.1.  SIP's Solution Space
  contents:
  - "3.1.  SIP's Solution Space\n   In order to evaluate the first criteria, it is\
    \ necessary to define\n   exactly what SIP's solution space is, and what it is\
    \ not.\n   SIP is a protocol for initiating, modifying, and terminating\n   interactive\
    \ sessions.  This process involves the discovery of users,\n   (or, more generally,\
    \ entities that can be communicated with,\n   including services, such as voicemail\
    \ or translation devices)\n   wherever they may be located, so that a description\
    \ of the session\n   can be delivered to the user.  It is assumed that these users\
    \ or\n   communications entities are mobile, and that their point of\n   attachment\
    \ to the network changes over time.  The primary purpose of\n   SIP is a rendezvous\
    \ function, to allow a request initiator to deliver\n   a message to a recipient\
    \ wherever they may be.  Such a rendezvous is\n   needed to establish a session,\
    \ but it can be used for other purposes\n   related to communications, such as\
    \ querying for capabilities or\n   delivery of an instant message.\n   Much of\
    \ SIP focuses on this discovery and rendezvous component.  Its\n   ability to\
    \ fork, its registration capabilities, and its routing\n   capabilities are all\
    \ present for the singular purpose of finding the\n   desired user wherever they\
    \ may be.  As such, features and\n   capabilities such as personal mobility, automatic\
    \ call distribution,\n   and follow-me are well within the SIP solution space.\n\
    \   Session initiation also depends on the ability of the called party to\n  \
    \ have enough information about the session itself to make a decision\n   on whether\
    \ to join.  That information includes data about the caller,\n   the purpose for\
    \ the invitation, and parameters of the session itself.\n   For this reason, SIP\
    \ includes this kind of information.\n   Part of the process of session initiation\
    \ is the communication of\n   progress and the final results of establishment\
    \ of the session.  SIP\n   provides this information as well.\n   SIP itself is\
    \ independent of the session, and the session description\n   is delivered as\
    \ an opaque body within SIP messages.  Keeping SIP\n   independent of the sessions\
    \ it initiates and terminates is\n   fundamental.  As such, there are many functions\
    \ that SIP explicitly\n   does not provide.  It is not a session management protocol\
    \ or a\n   conference control protocol.  The particulars of the communications\n\
    \   within the session are outside of SIP.  This includes features such\n   as\
    \ media transport, voting and polling, virtual microphone passing,\n   chairman\
    \ election, floor control, and feedback on session quality.\n   SIP is not a resource\
    \ reservation protocol for sessions.  This is\n   fundamentally because (1) SIP\
    \ is independent of the underlying\n   session it establishes, and (2) the path\
    \ of SIP messages is\n   completely independent from the path that session packets\
    \ may take.\n   The path independence refers to paths within a provider's network\
    \ and\n   the set of providers itself.  For example, it is perfectly reasonable\n\
    \   for a SIP message to traverse a completely different set of\n   autonomous\
    \ systems than the audio in a session SIP establishes.\n   SIP is not a general\
    \ purpose transfer protocol.  It is not meant to\n   send large amounts of data\
    \ unrelated to SIP's operation.  It is not\n   meant as a replacement for HTTP.\
    \  This is not to say that carrying\n   payloads in SIP messages is never a good\
    \ thing; in many cases, the\n   data is very much related to SIP's operation.\
    \  In those cases,\n   congestion-controlled transports end-to-end are critical.\n\
    \   SIP is not meant to be a general Remote Procedure Call (RPC)\n   mechanism.\
    \  None of its user discovery and registration capabilities\n   are needed for\
    \ RPC, and neither are most of its proxy functions.\n   SIP is not meant to be\
    \ used as a strict Public Switched Telephone\n   Network (PSTN) signaling replacement.\
    \  It is not a superset of the\n   Integrated Services Digital Network (ISDN)\
    \ User Part (ISUP).\n   Although it can support gatewaying of PSTN signaling and\
    \ can provide\n   many features present in the PSTN, the mere existence of a feature\
    \ or\n   capability in the PSTN is not a justification for its inclusion in\n\
    \   SIP.  Extensions needed to support telephony MUST meet the other\n   criteria\
    \ described here.\n   SIP is a poor control protocol.  It is not meant to be used\
    \ for one\n   entity to tell another to pick up or answer a phone, to send audio\n\
    \   using a particular codec, or to provide a new value for a\n   configuration\
    \ parameter.  Control protocols have different trust\n   relationships from that\
    \ assumed in SIP and are more centralized in\n   architecture than SIP is, as\
    \ SIP is a very distributed protocol.\n   There are many network layer services\
    \ needed to make SIP function.\n   These include quality of service, mobility,\
    \ and security, among\n   others.  Rather than build these capabilities into SIP\
    \ itself, they\n   SHOULD be developed outside of SIP and then used by it.\n \
    \  Specifically, any protocol mechanisms that are needed by SIP, but\n   that\
    \ are also needed by many other application layer protocols SHOULD\n   NOT be\
    \ addressed within SIP.\n"
- title: 3.2.  SIP Architectural Model
  contents:
  - "3.2.  SIP Architectural Model\n   We describe here some of the primary architectural\
    \ assumptions that\n   underlie SIP.  Extensions that violate these assumptions\
    \ should be\n   examined more carefully to determine their appropriateness for\
    \ SIP.\n   Session independence:  SIP is independent of the session it\n     \
    \ establishes.  This includes the type of session, be it audio,\n      video,\
    \ game, chat session, or virtual reality.  SIP operation\n      SHOULD NOT depend\
    \ on some characteristic of the session.  SIP is\n      not specific to voice\
    \ only.  Any extensions to SIP MUST consider\n      the application of SIP to\
    \ a variety of different session types.\n   SIP and Session path independence:\
    \  We have already touched on this\n      once, but it is worth noting again.\
    \  The set of routers, networks,\n      and/or autonomous systems traversed by\
    \ SIP messages are unrelated\n      to the set of routers, networks, and/or autonomous\
    \ systems\n      traversed by session packets.  They may be the same in some cases,\n\
    \      but it is fundamental to SIP's architecture that they need not be\n   \
    \   the same.  Standards-track extensions MUST NOT be defined that\n      work\
    \ only when the signaling and session paths are coupled.  Non-\n      standard\
    \ P-header extensions [10] are required for any extension\n      that only works\
    \ in such a case.\n   Multi-provider and multi-hop:  SIP assumes that its messages\
    \ will\n      traverse the Internet.  That is, SIP works through multiple\n  \
    \    networks administered by different providers.  It is also assumed\n     \
    \ that SIP messages traverse many hops (where each hop is a proxy).\n      Extensions\
    \ MUST NOT work only under the assumption of a single hop\n      or specialized\
    \ network topology.  They SHOULD avoid the assumption\n      of a single SIP provider\
    \ (but see the use of P-Headers, per RFC\n      3427 [10]).\n   Transactional:\
    \  SIP is a request/response protocol, possibly enhanced\n      with intermediate\
    \ responses.  Many of the rules of operation in\n      SIP are based on general\
    \ processing of requests and responses.\n      This includes the reliability mechanisms,\
    \ routing mechanisms, and\n      state maintenance rules.  Extensions SHOULD NOT\
    \ add messages that\n      are not within the request-response model.\n   Proxies\
    \ can ignore bodies:  In order for proxies to scale well, they\n      must be\
    \ able to operate with minimal message processing.  SIP has\n      been engineered\
    \ so that proxies can always ignore bodies.\n      Extensions SHOULD NOT require\
    \ proxies to examine bodies.\n   Proxies don't need to understand the method:\
    \  Processing of requests\n      in proxies does not depend on the method, except\
    \ for the well-\n      known methods INVITE, ACK, and CANCEL.  This allows for\n\
    \      extensibility.  Extensions MUST NOT define new methods that must\n    \
    \  be understood by proxies.\n   INVITE messages carry full state:  An initial\
    \ INVITE message for a\n      session is nearly identical (the exception is the\
    \ tag) to a re-\n      INVITE message to modify some characteristic of the session.\
    \  This\n      full state property is fundamental to SIP and is critical for\n\
    \      robustness of SIP systems.  Extensions SHOULD NOT modify INVITE\n     \
    \ processing such that data spanning multiple INVITEs must be\n      collected\
    \ in order to perform some feature.\n   Generality over efficiency:  Wherever\
    \ possible, SIP has favored\n      general-purpose components rather than narrow\
    \ ones.  If some\n      capability is added to support one service but a slightly\
    \ broader\n      capability can support a larger variety of services (at the cost\n\
    \      of complexity or message sizes), the broader capability SHOULD be\n   \
    \   preferred.\n   The Request URI is the primary key for forwarding:  Forwarding\
    \ logic\n      at SIP servers depends primarily on the request URI (this is\n\
    \      different from request routing in SIP, which uses the Route header\n  \
    \    fields to pass a request through intermediate proxies).  It is\n      fundamental\
    \ to the operation of SIP that the request URI indicate\n      a resource that,\
    \ under normal operations, resolves to the desired\n      recipient.  Extensions\
    \ SHOULD NOT modify the semantics of the\n      request URI.\n   Heterogeneity\
    \ is the norm:  SIP supports heterogeneous devices.  It\n      has built-in mechanisms\
    \ for determining the set of overlapping\n      protocol functionalities.  Extensions\
    \ SHOULD NOT be defined that\n      only function if all devices support the extension.\n"
- title: 4.  Issues to Be Addressed
  contents:
  - "4.  Issues to Be Addressed\n   Given an extension has met the litmus tests in\
    \ the previous section,\n   there are several issues that all extensions should\
    \ take into\n   consideration.\n"
- title: 4.1.  Backward Compatibility
  contents:
  - "4.1.  Backward Compatibility\n   One of the most important issues to consider\
    \ is whether the new\n   extension is backward compatible with baseline SIP. \
    \ This is tightly\n   coupled with how the Require, Proxy-Require, and Supported\
    \ header\n   fields are used.\n   If an extension consists of new header fields\
    \ or header field\n   parameters inserted by a user agent in a request with an\
    \ existing\n   method, and the request cannot be processed reasonably by a proxy\n\
    \   and/or user agent without understanding the header fields or\n   parameters,\
    \ the extension MUST mandate the usage of the Require\n   and/or Proxy-Require\
    \ header fields in the request.  These extensions\n   are not backwards compatible\
    \ with SIP.  The result of mandating usage\n   of these header fields means that\
    \ requests cannot be serviced unless\n   the entities being communicated with\
    \ also understand the extension.\n   If some entity does not understand the extension,\
    \ the request will be\n   rejected.  The UAC can then handle this in one of two\
    \ ways.  In the\n   first, the request simply fails, and the service cannot be\
    \ provided.\n   This is basically an interoperability failure.  In the second\
    \ case,\n   the UAC retries the request without the extension.  This will\n  \
    \ preserve interoperability, at the cost of a \"dual stack\"\n   implementation\
    \ in a UAC (processing rules for operation with and\n   without the extension).\
    \  As the number of extensions increases, this\n   leads to an exponential explosion\
    \ in the sets of processing rules a\n   UAC may need to implement.  The result\
    \ is excessive complexity.\n   Because of the possibility of interoperability\
    \ and complexity\n   problems that result from the usage of Require and Proxy-Require,\
    \ we\n   believe the following guidelines are appropriate:\n   o  The usage of\
    \ these header fields in requests for basic SIP\n      services (in particular,\
    \ session initiation and termination) is\n      NOT RECOMMENDED.  The less frequently\
    \ a particular extension is\n      needed in a request, the more reasonable it\
    \ is to use these header\n      fields.\n   o  The Proxy-Require header field\
    \ SHOULD be avoided at all costs.\n      The failure likelihood in an individual\
    \ proxy stays constant, but\n      the path failure grows exponentially with the\
    \ number of hops.  On\n      the other hand, the Require header field only mandates\
    \ that a\n      single entity, the UAS, support the extension.  Usage of\n   \
    \   Proxy-Require is thus considered exponentially worse than usage of\n     \
    \ the Require header field.\n   o  If either Require or Proxy-Require are used\
    \ by an extension, the\n      extension SHOULD discuss how to fall back to baseline\
    \ SIP\n      operation if the request is rejected with a 420 response.\n   Extensions\
    \ that define new methods do not need to use the Require\n   header field.  SIP\
    \ defines mechanisms that allow a UAC to know\n   whether a new method is understood\
    \ by a UAS.  This includes both the\n   OPTIONS request and the 405 (Method Not\
    \ Allowed) response with the\n   Allow header field.  It is fundamental to SIP\
    \ that proxies need not\n   understand the semantics of a new method in order\
    \ to process it.  If\n   an extension defines a new method that must be understood\
    \ by proxies\n   in order to be processed, a Proxy-Require header field is needed.\
    \  As\n   discussed above, these kinds of extensions are frowned upon.\n   In\
    \ order to achieve backwards compatibility for extensions that\n   define new\
    \ methods, the Allow header field is used.  There are two\n   types of new methods\
    \ - those that are used for established dialogs\n   (initiated by INVITE, for\
    \ example), and those that are sent as the\n   initial request to a UA.  Since\
    \ INVITE and its response both SHOULD\n   contain an Allow header field, a UA\
    \ can readily determine whether the\n   new method can be supported within the\
    \ dialog.  For example, once an\n   INVITE dialog is established, a user agent\
    \ could determine whether\n   the REFER method [12] is supported if it is present\
    \ in an Allow\n   header field.  If it wasn't, the \"transfer\" button on the\
    \ UI could be\n   \"greyed out\" once the call is established.\n   Another type\
    \ of extension is that which requires a proxy to insert\n   header fields or header\
    \ field parameters into a request as it\n   traverses the network, or for the\
    \ UAS to insert header fields or\n   header field parameters into a response.\
    \  For some extensions, if the\n   UAC or UAS does not understand these header\
    \ fields, the message can\n   still be processed correctly.  These extensions\
    \ are completely\n   backwards compatible.\n   Most other extensions of this type\
    \ require that the server only\n   insert the header field or parameter if it\
    \ is sure the client\n   understands it.  In this case, these extensions will\
    \ need to make use\n   of the Supported request header field mechanism.  This\
    \ mechanism\n   allows a server to determine if the client can understand some\n\
    \   extension, so that it can apply the extension to the response.  By\n   their\
    \ nature, these extensions may not always be able to be applied\n   to every response.\n\
    \   If an extension requires a proxy to insert a header field or\n   parameter\
    \ into a request and this header field or parameter needs to\n   be understood\
    \ by both UAC and UAS to be executed correctly, a\n   combination of the Require\
    \ and the Supported mechanism will need to\n   be used.  The proxy can insert\
    \ a Require header field into the\n   request if the Supported header field is\
    \ present.  An example of such\n   an extension is the SIP Session Timer [13].\n\
    \   Yet another type of extension is that which defines new body types to\n  \
    \ be carried in SIP messages.  According to the SIP specification,\n   bodies\
    \ must be understood by user agents in order to process a\n   request.  As such,\
    \ the interoperability issues are similar to new\n   methods.  However, the Content-Disposition\
    \ header field has been\n   defined to allow a client or server to indicate that\
    \ the message body\n   is optional [2].  Extensions that define or require new\
    \ body types\n   SHOULD make them optional for the user agent to process.\n  \
    \ When a body must be understood to properly process a request or\n   response,\
    \ it is preferred that the sending entity know ahead of time\n   whether the new\
    \ body is understood by the recipient.  For requests\n   that establish a dialog,\
    \ inclusion of Accept in the request and its\n   success responses is RECOMMENDED.\
    \  This will allow both parties to\n   determine what body types are supported\
    \ by their peers.  Subsequent\n   messaging between the peers would then only\
    \ include body types that\n   were indicated as being understood.\n"
- title: 4.2.  Security
  contents:
  - "4.2.  Security\n   Security is an important component of any protocol.  Designers\
    \ of SIP\n   extensions need to carefully consider if additional security\n  \
    \ requirements are required over those described in RFC 3261.\n   Frequently,\
    \ authorization requirements and requirements for end-to-\n   end integrity are\
    \ the most overlooked.\n   SIP extensions MUST consider how (or if) they affect\
    \ usage of the\n   general SIP security mechanisms.  Most extensions should not\
    \ require\n   any new security capabilities beyond general-purpose SIP.  If they\n\
    \   do, it is likely that the security mechanism has more general-purpose\n  \
    \ application and should be considered an extension in its own right.\n   Overall\
    \ system security requires that both the SIP signaling and the\n   media sessions\
    \ it established be secured.  The media sessions\n   normally use their own security\
    \ techniques, which are quite distinct\n   from those used by SIP itself.  Extensions\
    \ should take care not to\n   conflate the two.  However, specifications that\
    \ define extensions\n   that impact the media sessions in any way SHOULD consider\
    \ the\n   interactions between SIP and session security mechanisms.\n"
- title: 4.3.  Terminology
  contents:
  - "4.3.  Terminology\n   RFC 3261 has an extensive terminology section that defines\
    \ terms such\n   as caller, callee, user agent, and header field.  All SIP extensions\n\
    \   MUST conform to this terminology.  They MUST NOT define new terms\n   that\
    \ describe concepts already defined by a term in another SIP\n   specification.\
    \  If new terminology is needed, it SHOULD appear in a\n   separate section towards\
    \ the beginning of the document.\n   Careful attention must be paid to the actual\
    \ usage of terminology.\n   Many documents misuse the terms header, header field,\
    \ and header\n   field values, for example.  Document authors SHOULD do a careful\n\
    \   review of their documents for proper usage of these terms.\n"
- title: 4.4.  Syntactic Issues
  contents:
  - "4.4.  Syntactic Issues\n   Extensions that define new methods SHOULD use all\
    \ capitals for the\n   method name.  Method names SHOULD be shorter than 10 characters\
    \ and\n   SHOULD attempt to convey the general meaning of the request.  Method\n\
    \   names are case sensitive, and therefore, strictly speaking, they\n   don't\
    \ have to be capitalized.  However, using capitalized method\n   names keeps with\
    \ a long-standing convention in SIP and many similar\n   protocols, such as HTTP\
    \ [15] and RTSP [16].\n   Extensions that define new header fields that are anticipated\
    \ to be\n   heavily used MAY define a compact form if those header fields are\n\
    \   more than six characters.  \"Heavily used\" means that the percentage\n  \
    \ of all emitted messages that contain that header field is over thirty\n   percent.\
    \  Usage of compact forms in these cases is only a MAY because\n   there are better\
    \ approaches for reducing message overhead [20].\n   Compact header fields MUST\
    \ be a single character.  When all 26\n   characters are exhausted, new compact\
    \ forms will no longer be\n   defined.  Header field names are defined by the\
    \ \"token\" production in\n   RFC 3261, Section 25.1, and thus include the upper\
    \ and lowercase\n   letters, the digits 0 through 9, the HYPHEN-MINUS (-), FULL\
    \ STOP (.),\n   EXCLAMATION MARK (!), PERCENT SIGN (%), ASTERISK (*), LOW LINE\
    \ (_),\n   PLUS SIGN (+), GRAVE ACCENT (`), APOSTROPHE ('), and TILDE (~).  They\n\
    \   SHOULD be descriptive but reasonably brief.  Although header field\n   names\
    \ are case insensitive, a single common capitalization SHOULD be\n   used throughout\
    \ the document.  It is RECOMMENDED that each English\n   word present in the header\
    \ field name have its first letter\n   capitalized.  For example, \"ThisIsANewHeader\"\
    .\n   As an example, the following are poor choices for header field names:\n\
    \   ThisIsMyNewHeaderThatDoesntDoVeryMuchButItHasANiceName\n   --.!A\n   Function\n\
    \   Case sensitivity of parameters and values is a constant source of\n   confusion,\
    \ a difficulty that plagued RFC 2543 [17].  This has been\n   simplified through\
    \ the usage of the BNF constructs of RFC 4234 [5],\n   which have clear rules\
    \ of case sensitivity and insensitivity.\n   Therefore, the BNF for an extension\
    \ completely defines the matching\n   rules.\n   Extensions MUST be consistent\
    \ with the SIP conventions for case\n   sensitivity.  Methods MUST be case sensitive.\
    \  Header field names\n   MUST be case insensitive.  Header field parameter names\
    \ MUST be case\n   insensitive.  Header field values and parameter values are\
    \ sometimes\n   case sensitive, and sometimes case insensitive.  However, generally,\n\
    \   they SHOULD be case insensitive.  Defining a case-sensitive component\n  \
    \ requires explicitly listing each character through its ASCII code.\n   Extensions\
    \ that contain freeform text MUST allow that text to be\n   UTF-8, as per the\
    \ IETF policies on character set usage [3].  This\n   ensures that SIP remains\
    \ an internationalized standard.  As a general\n   guideline, freeform text is\
    \ never needed by programs to perform\n   protocol processing.  It is usually\
    \ entered by and displayed to the\n   user.  If an extension uses a parameter\
    \ that can contain UTF-8-\n   encoded characters, and that extension requires\
    \ a comparison to be\n   made of this parameter to other parameters, the comparison\
    \ MUST be\n   case sensitive.  Case-insensitive comparison rules for UTF-8 text\n\
    \   are, at this time, impossible and MUST be avoided.\n   Extensions that make\
    \ use of dates MUST use the SIP-Date BNF defined\n   in RFC 3261.  No other date\
    \ formats are allowed.  However, the usage\n   of absolute dates to determine\
    \ intervals (for example, the time at\n   which some timer fires) is NOT RECOMMENDED.\
    \  This is because it\n   requires synchronized time between peers, and this is\
    \ frequently not\n   the case.  Therefore, relative times, expressed in numbers\
    \ of\n   seconds, SHOULD be used.\n   Extensions that include network-layer addresses\
    \ SHOULD permit dotted\n   quad IPv4 addresses, IPv6 addresses in the format described\
    \ in [4],\n   and domain names.\n   Extensions that have header fields containing\
    \ URIs SHOULD be explicit\n   about which URI schemes can be used in that header\
    \ field.  Header\n   fields SHOULD allow the broadest set of URI schemes possible\
    \ that are\n   a match for the semantics of the header field.\n   Header fields\
    \ MUST follow the standard formatting for SIP, defined as\n   follows:\n   header\
    \          = header-name HCOLON header-value\n                      *(COMMA header-value)\n\
    \   header-name     = token\n   header-value    = value *(SEMI value-parameter)\n\
    \   value-parameter = token [EQUAL gen-value]\n   gen-value       = token / host\
    \ / quoted-string\n   value           = token / host / quoted-string\n   In some\
    \ cases, this form is not sufficient.  That is the case for\n   header fields\
    \ that express descriptive text meant for human\n   consumption.  An example is\
    \ the Subject header field in SIP [2].  In\n   this case, an alternate form is:\n\
    \   header          = header-name HCOLON [TEXT-UTF8-TRIM]\n   Developers of extensions\
    \ SHOULD allow for extension parameters in\n   their header fields.\n   Header\
    \ fields that contain a list of URIs SHOULD follow the same\n   syntax as the\
    \ Contact header field in SIP.  Implementors are also\n   encouraged to wrap these\
    \ URI in angle brackets, \"<\" and \">\", at all\n   times.  We have found this\
    \ to be a frequently misimplemented feature.\n   Beyond the compact form, there\
    \ is no need to define compressed\n   versions of header field values.  Compression\
    \ of SIP messages SHOULD\n   be handled at lower layers, for example, using IP\
    \ payload compression\n   [18] or signalling compression [20].\n   Syntax for\
    \ header fields is expressed in Augmented Backus-Naur Form\n   and MUST follow\
    \ the format of RFC 4234 [5].  Extensions MUST make use\n   of the primitive components\
    \ defined in RFC 3261 [2].  If the\n   construction for a BNF element is defined\
    \ in another specification,\n   it is RECOMMENDED that the construction be referenced\
    \ rather than\n   copied.  The reference SHOULD include both the document and\
    \ section\n   number.  All BNF elements must be either defined or referenced.\n\
    \   It is RECOMMENDED that BNF be collected into a single section near\n   the\
    \ end of the document.\n   All tokens and quoted strings are separated by explicit\
    \ linear white\n   space.  Linear white space, for better or worse, allows for\
    \ line\n   folding.  Extensions MUST NOT define new header fields that use\n \
    \  alternate linear white space rules.\n   All SIP extensions MUST verify that\
    \ any BNF productions that they\n   define in their grammar do not conflict with\
    \ any existing grammar\n   defined in other SIP standards-track specifications.\n"
- title: 4.5.  Semantics, Semantics, Semantics
  contents:
  - "4.5.  Semantics, Semantics, Semantics\n   Developers of protocols often get caught\
    \ up in syntax issues, without\n   spending enough time on semantics.  The semantics\
    \ of a protocol are\n   far more important.  SIP extensions MUST clearly define\
    \ the semantics\n   of the extensions.  Specifically, the extension MUST specify\
    \ the\n   behaviors expected of a UAC, UAS, and proxy in processing the\n   extension.\
    \  This is often best described by having separate sections\n   for each of these\
    \ three elements.  Each section SHOULD step through\n   the processing rules in\
    \ temporal order of the most common messaging\n   scenario.\n   Processing rules\
    \ generally specify actions to be taken (in terms of\n   messages to be sent,\
    \ variables to be stored, and rules to be\n   followed) on receipt of messages\
    \ and expiration of timers.  If an\n   action requires transmission of a message,\
    \ the rule SHOULD outline\n   requirements for insertion of header fields or other\
    \ information in\n   the message.\n   The extension SHOULD specify procedures\
    \ to be taken in exceptional\n   conditions that are recoverable, or that require\
    \ some kind of user\n   intervention.  Handling of unrecoverable errors does not\
    \ require\n   specification.\n"
- title: 4.6.  Examples Section
  contents:
  - "4.6.  Examples Section\n   The specification SHOULD contain a section that gives\
    \ examples of\n   call flows and message formatting.  Extensions that define\n\
    \   substantial new syntax SHOULD include examples of messages containing\n  \
    \ that syntax.  Examples of message flows should be given to cover\n   common\
    \ cases and at least one failure or unusual case.\n   For an example of how to\
    \ construct a good examples section, see the\n   message flows and message formatting\
    \ defined in the Basic Call Flows\n   specification [21].  Note that complete\
    \ messages SHOULD be used.  Be\n   careful to include tags, Via header fields\
    \ (with the branch ID\n   cookie), Max-Forwards, Content-Lengths, Record-Route,\
    \ and Route\n   header fields.  Example INVITE messages MAY omit session\n   descriptions,\
    \ and Content-Length values MAY be set to \"...\" to\n   indicate that the value\
    \ is not provided.  However, the specification\n   MUST explicitly call out the\
    \ meaning of the \"...\" and explicitly\n   indicate that session descriptions\
    \ were not included.\n"
- title: 4.7.  Overview Section
  contents:
  - "4.7.  Overview Section\n   Too often, extension documents dive into detailed\
    \ syntax and\n   semantics without giving a general overview of operation.  This\
    \ makes\n   understanding of the extension harder.  It is RECOMMENDED that\n \
    \  extensions have a protocol overview section that discusses the basic\n   operation\
    \ of the extension.  Basic operation usually consists of the\n   message flow,\
    \ in temporal order, for the most common case covered by\n   the extension.  The\
    \ most important processing rules for the elements\n   in the call flow SHOULD\
    \ be mentioned.  Usage of the RFC 2119 [1]\n   terminology in the overview section\
    \ is NOT RECOMMENDED, and the\n   specification should explicitly state that the\
    \ overview is tutorial\n   in nature only.  This section SHOULD expand all acronyms,\
    \ even those\n   common in SIP systems, and SHOULD be understandable to readers\
    \ who\n   are not SIP experts. [27] provides additional guidance on writing\n\
    \   good overview sections.\n"
- title: 4.8.  IANA Considerations Section
  contents:
  - "4.8.  IANA Considerations Section\n   Documents that define new SIP extensions\
    \ will invariably have IANA\n   Considerations sections.\n   If your extension\
    \ is defining a new event package, you MUST register\n   that package.  RFC 3265\
    \ [6] provides the registration template.  See\n   [22] for an example of the\
    \ registration of a new event package.  As\n   discussed in RFC 3427 [10], only\
    \ standards-track documents can\n   register new event-template packages.  Both\
    \ standards-track and\n   informational specifications can register event packages.\n\
    \   If your extension is defining a new header field, you MUST register\n   that\
    \ header field.  RFC 3261 [2] provides a registration template.\n   See Section\
    \ 8.2 of RFC 3262 [23] for an example of how to register\n   new SIP header fields.\
    \  Both standards-track and informational\n   P-header specifications can register\
    \ new header fields [10].\n   If your extension is defining a new response code,\
    \ you MUST register\n   that response code.  RFC 3261 [2] provides a registration\
    \ template.\n   See Section 6.4 of RFC 3329 [19] for an example of how to register\
    \ a\n   new response code.  As discussed in RFC 3427 [10], only standards-\n \
    \  track documents can register new response codes.\n   If your extension is defining\
    \ a new SIP method, you MUST register\n   that method.  RFC 3261 [2] provides\
    \ a registration template.  See\n   Section 10 of RFC 3311 [24] for an example\
    \ of how to register a new\n   SIP method.  As discussed in RFC 3427 [10], only\
    \ standards-track\n   documents can register new methods.\n   If your extension\
    \ is defining a new SIP header field parameter, you\n   MUST register that header\
    \ field parameter per the guidelines in RFC\n   3968 [7].  Section 4.1 of that\
    \ specification provides a template.\n   Only IETF approved specifications can\
    \ register new header field\n   parameters.  However, there is no requirement\
    \ that these be standards\n   track.\n   If your extension is defining a new SIP\
    \ URI parameter, you MUST\n   register that URI parameter per the guidelines in\
    \ RFC 3969 [8].\n   Section 4.1 of that specification provides a template.  Only\n\
    \   standards-track documents can register new URI parameters.\n   Many SIP extensions\
    \ make use of option tags, carried in the Require,\n   Proxy-Require, and Supported\
    \ header fields.  Section 4.1 discusses\n   some of the issues involved in the\
    \ usage of these header fields.  If\n   your extension does require them, you\
    \ MUST register an option tag for\n   your extension.  RFC 3261 [2] provides a\
    \ registration template.  See\n   Section 8.1 of RFC 3262 [23] for an example\
    \ of how to register an\n   option tag.  Only standards-track RFCs can register\
    \ new option tags.\n   Some SIP extensions will require establishment of their\
    \ own IANA\n   registries.  RFC 2434 [25] provides guidance on how and when IANA\n\
    \   registries are established.  For an example of how to set one up, see\n  \
    \ Section 6 of RFC 3265 [6] for an example.\n"
- title: 4.9.  Document-Naming Conventions
  contents:
  - "4.9.  Document-Naming Conventions\n   An important decision to be made about\
    \ the extension is its title.\n   The title MUST indicate that the document is\
    \ an extension to SIP.  It\n   is RECOMMENDED that the title follow the basic\
    \ form of \"A [summary of\n   function] for the Session Initiation Protocol (SIP)\"\
    , where the\n   summary of function is a one- to three-word description of the\n\
    \   extension.  For example, if an extension defines a new header field,\n   called\
    \ Make-Coffee, for making coffee, the title would read, \"Making\n   Coffee with\
    \ the Session Initiation Protocol (SIP)\".  It is\n   RECOMMENDED that these additional\
    \ words be descriptive rather than\n   naming the header field.  For example,\
    \ the extension for making\n   coffee should not be named \"The Make-Coffee Header\
    \ for the Session\n   Initiation Protocol\".\n   For extensions that define new\
    \ methods, an acceptable template for\n   titles is \"The Session Initiation Protocol\
    \ (SIP) X Method\" where X is\n   the name of the method.\n   Note that the acronym\
    \ SIP MUST be expanded in the titles of RFCs, as\n   per [26].\n"
- title: 4.10.  Additional Considerations for New Methods
  contents:
  - "4.10.  Additional Considerations for New Methods\n   Extensions that define new\
    \ methods SHOULD take into consideration and\n   discuss the following issues:\n\
    \   o  Can it contain bodies?  If so, what is the meaning of the presence\n  \
    \    of those bodies?  What body types are allowed?\n   o  Can a transaction with\
    \ this request method occur while another\n      transaction, in the same and/or\
    \ reverse direction, is in progress?\n   o  The extension MUST define which header\
    \ fields can be present in\n      requests of that method.  It is RECOMMENDED\
    \ that this information\n      be represented as a new column of Table 2/3 of\
    \ RFC 3261 [2].  The\n      table MUST contain rows for all header fields defined\
    \ in\n      standards-track RFCs at the time of writing of the extension.\n  \
    \ o  Can the request be sent within a dialog, or does it establish a\n      dialog?\n\
    \   o  Is it a target refresh request?\n   o  Extensions to SIP that define new\
    \ methods MAY specify whether\n      offers and answers can appear in requests\
    \ of that method or its\n      responses.  However, those extensions MUST adhere\
    \ to the protocol\n      rules specified in [28] and MUST adhere to the additional\n\
    \      constraints for offers and answers as specified in SIP [2].\n   o  Because\
    \ of the nature of reliability treatment of requests with\n      new methods,\
    \ those requests need to be answered immediately by the\n      UAS.  Protocol\
    \ extensions that require longer durations for the\n      generation of a response\
    \ (such as a new method that requires human\n      interaction) SHOULD instead\
    \ use two transactions - one to send the\n      request, and another in the reverse\
    \ direction to convey the result\n      of the request.  An example of that is\
    \ SUBSCRIBE and NOTIFY [6].\n   o  The SIP specification [2] allows new methods\
    \ to specify whether\n      transactions using that new method can be canceled\
    \ using a CANCEL\n      request.  Further study of the non-INVITE transaction\
    \ [14] has\n      determined that non-INVITE transactions must be completed as\
    \ soon\n      as possible.  New methods must not plan for the transaction to\n\
    \      pend long enough for CANCEL to be meaningful.  Thus, new methods\n    \
    \  MUST declare that transactions initiated by requests with that\n      method\
    \ cannot be canceled.  Future work may relax this\n      restriction, at which\
    \ point these guidelines will be revised.\n   o  New methods that establish a\
    \ new dialog must discuss the impacts\n      of forking.  The design of such new\
    \ methods should follow the\n      pattern of requiring an immediate request in\
    \ the reverse direction\n      from the request establishing a dialog, similar\
    \ to the immediate\n      NOTIFY sent when a subscription is created per RFC 3265\
    \ [6].\n   The reliability mechanisms for all new methods must be the same as\n\
    \   for BYE.  The delayed response feature of INVITE is only available in\n  \
    \ INVITE, never for new methods.  The design of new methods must\n   encourage\
    \ an immediate response.  If the application being enabled\n   requires a delay,\
    \ the design SHOULD follow a pattern using multiple\n   transactions, similar\
    \ to RFC 3265's use of NOTIFYs with different\n   Subscription-State header field\
    \ values (pending and active in\n   particular) in response to SUBSCRIBE [6].\n"
- title: 4.11.  Additional Considerations for New Header Fields or Header Field
  contents:
  - "4.11.  Additional Considerations for New Header Fields or Header Field\n    \
    \   Parameters\n   The most important issue for extensions that define new header\
    \ fields\n   or header field parameters is backwards compatibility.  See\n   Section\
    \ 4.1 for a discussion of the issues.  The extension MUST\n   detail how backwards\
    \ compatibility is addressed.\n   It is often tempting to avoid creation of a\
    \ new method by overloading\n   an existing method through a header field or parameter.\
    \  Header\n   fields and parameters are not meant to fundamentally alter the\n\
    \   meaning of the method of the request.  A new header field cannot\n   change\
    \ the basic semantic and processing rules of a method.  There is\n   no shortage\
    \ of method names, so when an extension changes the basic\n   meaning of a request,\
    \ a new method SHOULD be defined.\n   For extensions that define new header fields,\
    \ the extension MUST\n   define the request methods the header field can appear\
    \ in, and what\n   responses it can be used in.  It is RECOMMENDED that this information\n\
    \   be represented as a new row of Table 2/3 of RFC 3261 [2].  The table\n   MUST\
    \ contain columns for all methods defined in standards-track RFCs\n   at the time\
    \ of writing of the extension.\n"
- title: 4.12.  Additional Considerations for New Body Types
  contents:
  - "4.12.  Additional Considerations for New Body Types\n   Because SIP can run over\
    \ UDP, extensions that specify the inclusion\n   of large bodies (where large\
    \ is several times the ethernet MTU) are\n   frowned upon unless end-to-end congestion\
    \ controlled transport can be\n   guaranteed.  If at all possible, the content\
    \ SHOULD be included\n   indirectly [9], even if congestion controlled transports\
    \ are\n   available.\n   Note that the presence of a body MUST NOT change the\
    \ nature of the\n   message.  That is, bodies cannot alter the state machinery\
    \ associated\n   with processing a request of a particular method or a response.\n\
    \   Bodies enhance this processing by providing additional data.\n"
- title: 5.  Interactions with SIP Features
  contents:
  - "5.  Interactions with SIP Features\n   We have observed that certain capabilities\
    \ of SIP continually\n   interact with extensions in unusual ways.  Writers of\
    \ extensions\n   SHOULD consider the interactions of their extensions with these\
    \ SIP\n   capabilities and document any unusual interactions, if they exist.\n\
    \   The following are the most common causes of problems:\n   Forking:  Forking\
    \ by far presents the most troublesome interactions\n      with extensions.  This\
    \ is generally because it can cause (1) a\n      single transmitted request to\
    \ be received by an unknown number of\n      UASes, and (2) a single INVITE request\
    \ to have multiple responses.\n   CANCEL and ACK:  CANCEL and ACK are \"special\"\
    \ SIP requests, in that\n      they are exceptions to many of the general request\
    \ processing\n      rules.  The main reason for this special status is that CANCEL\
    \ and\n      ACK are always associated with another request.  New methods\n  \
    \    SHOULD consider the meaning of cancellation, as described above.\n      Extensions\
    \ that define new header fields in INVITE requests SHOULD\n      consider whether\
    \ they also need to be included in ACK and CANCEL.\n      Frequently they do,\
    \ in order to allow a stateless proxy to route\n      the CANCEL or ACK identically\
    \ to the INVITE.\n   Routing:  The presence of Route header fields in a request\
    \ can cause\n      it to be sent through intermediate proxies.  Requests that\n\
    \      establish dialogs can be record-routed, so that the initial\n      request\
    \ goes through one set of proxies, and subsequent requests\n      through a different\
    \ set.  These SIP features can interact in\n      unusual ways with extensions.\n\
    \   Stateless Proxies:  SIP allows a proxy to be stateless.  Stateless\n     \
    \ proxies are unable to retransmit messages and cannot execute\n      certain\
    \ services.  Extensions that depend on some kind of proxy\n      processing SHOULD\
    \ consider how stateless proxies affect that\n      processing.\n   Dialog Usages:\
    \ SIP allows for requests that normally create their own\n      dialog (such as\
    \ SUBSCRIBE) to be used within a dialog created by\n      another method (such\
    \ as INVITE).  In such a case, there are said\n      to be multiple usages of\
    \ that dialog.  Extensions SHOULD consider\n      their interaction with dialog\
    \ usages.  In particular, extensions\n      that define new error response codes\
    \ SHOULD describe whether that\n      response code causes the dialog and all\
    \ usages to terminate, or\n      just a specific usage.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The nature of this document is such that it does\
    \ not introduce any\n   new security considerations.  However, many of the principles\n\
    \   described in the document affect whether a potential SIP extension\n   design\
    \ is likely to support the SIP security architecture.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank Rohan Mahy and Spencer\
    \ Dawkins for\n   their comments.  Robert Sparks contributed important text on\
    \ CANCEL\n   issues.  Thanks to Allison Mankin for her support.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n       \
    \ Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session\
    \ Initiation Protocol\", RFC 3261, June 2002.\n   [3]  Alvestrand, H., \"IETF\
    \ Policy on Character Sets and Languages\",\n        BCP 18, RFC 2277, January\
    \ 1998.\n   [4]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n \
    \       Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n     \
    \   January 2005.\n   [5]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n\
    \        Specifications: ABNF\", RFC 4234, October 2005.\n   [6]  Roach, A.B.,\
    \ \"Session Initiation Protocol (SIP)-Specific Event\n        Notification\",\
    \ RFC 3265, June 2002.\n   [7]  Camarillo, G., \"The Internet Assigned Number\
    \ Authority (IANA)\n        Header Field Parameter Registry for the Session Initiation\n\
    \        Protocol (SIP)\", BCP 98, RFC 3968, December 2004.\n   [8]  Camarillo,\
    \ G., \"The Internet Assigned Number Authority (IANA)\n        Uniform Resource\
    \ Identifier (URI) Parameter Registry for the\n        Session Initiation Protocol\
    \ (SIP)\", BCP 99, RFC 3969, December\n        2004.\n   [9]  Burger, E., Ed.,\
    \ \"A Mechanism for Content Indirection in Session\n        Initiation Protocol\
    \ (SIP)  Messages\", RFC 4483, May 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [10]  Mankin, A., Bradner, S., Mahy, R., Willis,\
    \ D., Ott, J., and B.\n         Rosen, \"Change Process for the Session Initiation\
    \ Protocol\n         (SIP)\", BCP 67, RFC 3427, December 2002.\n   [11]  Droms,\
    \ R., \"Dynamic Host Configuration Protocol\", RFC 2131,\n         March 1997.\n\
    \   [12]  Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n        \
    \ Method\", RFC 3515, April 2003.\n   [13]  Donovan, S. and J. Rosenberg, \"Session\
    \ Timers in the Session\n         Initiation Protocol (SIP)\", RFC 4028, April\
    \ 2005.\n   [14]  Sparks, R., \"Problems Identified Associated with the Session\n\
    \         Initiation Protocol's (SIP) Non-INVITE Transaction\", RFC 4321,\n  \
    \       January 2006.\n   [15]  Fielding,  R., Gettys, J., Mogul, J., Frystyk,\
    \ H., Masinter,\n         L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer\
    \ Protocol\n         -- HTTP/1.1\", RFC 2616, June 1999.\n   [16]  Schulzrinne,\
    \ H., Rao, A., and R. Lanphier, \"Real Time Streaming\n         Protocol (RTSP)\"\
    , RFC 2326, April 1998.\n   [17]  Handley, M., Schulzrinne, H., Schooler, E.,\
    \ and J. Rosenberg,\n         \"SIP: Session Initiation Protocol\", RFC 2543,\
    \ March 1999.\n   [18]  Shacham, A., Monsour, B., Pereira, R., and M. Thomas,\
    \ \"IP\n         Payload Compression Protocol (IPComp)\", RFC 3173, September\n\
    \         2001.\n   [19]  Arkko, J., Torvinen, V., Camarillo, G., Niemi, A., and\
    \ T.\n         Haukka, \"Security Mechanism Agreement for the Session\n      \
    \   Initiation Protocol (SIP)\", RFC 3329, January 2003.\n   [20]  Price, R.,\
    \ Bormann, C., Christoffersson, J., Hannu, H., Liu,\n         Z., and J. Rosenberg,\
    \ \"Signaling Compression (SigComp)\", RFC\n         3320, January 2003.\n   [21]\
    \  Johnston, A., Donovan, S., Sparks, R., Cunningham, C., and K.\n         Summers,\
    \ \"Session Initiation Protocol (SIP) Basic Call Flow\n         Examples\", BCP\
    \ 75, RFC 3665, December 2003.\n   [22]  Rosenberg, J., \"A Session Initiation\
    \ Protocol (SIP) Event\n         Package for Registrations\", RFC 3680, March\
    \ 2004.\n   [23]  Rosenberg, J. and H. Schulzrinne, \"Reliability of Provisional\n\
    \         Responses in Session Initiation Protocol (SIP)\", RFC 3262, June\n \
    \        2002.\n   [24]  Rosenberg, J., \"The Session Initiation Protocol (SIP)\
    \ UPDATE\n         Method\", RFC 3311, October 2002.\n   [25]  Narten, T. and\
    \ H. Alvestrand, \"Guidelines for Writing an IANA\n         Considerations Section\
    \ in RFCs\", BCP 26, RFC 2434, October\n         1998.\n   [26]  Reynolds, J.\
    \ and R. Braden, \"Instructions to Request for\n         Comments (RFC) Authors\"\
    , Work in Progress, July 2004.\n   [27]  Rescorla, E. and IAB, \"Writing Protocol\
    \ Models\", RFC 4101, June\n         2005.\n   [28]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model with\n         Session Description Protocol (SDP)\"\
    , RFC 3264, June 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n\
    \   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n\
    \   URI:   http://www.jdrosen.net\n   Henning Schulzrinne\n   Columbia University\n\
    \   M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY  10027\n   US\n   EMail:\
    \ schulzrinne@cs.columbia.edu\n   URI:   http://www.cs.columbia.edu/~hgs\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
