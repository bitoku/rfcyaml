- title: __initial_text__
  contents:
  - '                  Schema Publishing in X.500 Directory

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The X.500 directory provides a powerful mechanism for storing and\n\
    \   retrieving information about objects of interest.  To interpret the\n   information\
    \ stored in the directory, the schema must be known to all\n   the components\
    \ of the directory. Presently, there are no means other\n   than ftp to distribute\
    \ schema information across the Internet.  This\n   is proving to be a severe\
    \ constraint as the Directory is growing.\n   This document presents a solution\
    \ to the schema distribution problem\n   using the existing mechanisms of the\
    \ directory. A naming scheme for\n   naming schema objects and a meta-schema for\
    \ storing schema objects is\n   presented. The procedures for fetching unknown\
    \ schema from the\n   directory at runtime are described.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction                                       \
    \  2\n   2. Schema Management                                    2\n   3. Storage\
    \ of Schema Information in the Directory       3\n   4. Retrieval of Schema from\
    \ the Directory               5\n   5. The Meta-Schema                       \
    \               6\n   6. References                                          \
    \ 9\n   7. Security Considerations                              9\n   8. Authors'\
    \ Addresses                                  10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The X.500 Directory [1] is now used for a wide range of applications\n\
    \   from name/address lookup to network management, from restaurant\n   information\
    \ to bibliographic information services. This information\n   is distributed and\
    \ managed across a network of many autonomous sites.\n   In order to interpret\
    \ the information stored in the directory, the\n   components of the directory\
    \ must have knowledge about the structure\n   and representation (schema) of the\
    \ information held within the\n   directory.\n   The distributed nature of the\
    \ network and the relatively slow process\n   of standardization have given rise\
    \ to the challenging task of making\n   accessible the information about the schema\
    \ rules themselves.  A\n   mechanism for making the schema accessible to the functional\n\
    \   components of the directory is urgently required.\n   The 1993 X.500 Directory\
    \ Standard [2] has attempted to address the\n   problem of schema management and\
    \ distribution. The 1993 framework\n   does provide the means for storing and\
    \ retrieving schema information\n   in the directory. However, the resolution\
    \ of unknown OIDs will\n   require both the DUA and the DSA to be compliant with\
    \ [2].\n   In this document we propose a solution using the existing mechanisms\n\
    \   of the directory [1] itself. We present a naming scheme for naming\n   schema\
    \ objects and a meta-schema for storing schema objects in the\n   directory. \
    \ The proposal allows the algorithmic resolution of unknown\n   objects in the\
    \ directory and in the absence of 1993 X.500 Directory\n   Standard implementations\
    \ provides an interim solution to the schema\n   publishing problem.\n"
- title: 2. Schema Management
  contents:
  - "2. Schema Management\n   The storage and retrieval mechanism provided by the\
    \ directory is\n   powerful and flexible.  However, the key to the directory is\
    \ the\n   knowledge of the schema rules defined for the objects represented in\n\
    \   the directory.  To facilitate the diffusion of this knowledge\n   appropriate\
    \ schema management mechanisms need to be designed.  Schema\n   management involves:\n\
    \        o Storage of schema information in the directory\n        o Algorithmic\
    \ access to and retrieval of schema information\n          in the directory\n\
    \        o Definition of rules for schema modification\n        o Propagation\
    \ of schema information from one component of the\n          directory to other\
    \ components of directory\n   In this document we concentrate on the aspect of\
    \ schema\n   access/retrieval from the directory. Since schema objects are defined\n\
    \   and employed, the modification , addition and deletion of schema\n   objects\
    \ can be carried out using existing directory mechanisms. But\n   the operational\
    \ issue of synchronizing the schema with the DIB will\n   require further attention.\
    \  Similarly the issue of schema propagation\n   requires further work and is\
    \ outside the scope of this document.  The\n   strategy proposed in this document\
    \ has a very simple and workable\n   approach.  No added DAP/DSP functionality\
    \ is envisaged. At the same\n   time by using the directory's distributed framework\
    \ scalability\n   problems are avoided.  In essence, it allows the distributed\
    \ storage\n   of schema objects and proposes a naming scheme which allows\n  \
    \ algorithmic schema retrieval. Of course, on the down side, more than\n   one\
    \ directory read operation may be required to retrieve the\n   information about\
    \ an object and its attributes, as objects and\n   attributes are stored as separate\
    \ entries in the directory.\n   As schema information of all objects in a naming\
    \ context are stored\n   below the root entry of that naming context, the same\
    \ DSA will be\n   able to supply the schema information stored in that DSA. Thus\
    \ there\n   is no need to contact another DSA for resolving the schema of an\n\
    \   object stored in the local DSA.\n"
- title: 3. Storage of Schema Information in the Directory
  contents:
  - "3. Storage of Schema Information in the Directory\n   The schema information\
    \ may be stored and distributed using mechanisms\n   external to the X.500 directory\
    \ standard [5]. This document proposes\n   storing schema information in the directory.\
    \  It has the following\n   advantages:\n        o The components of the directory\
    \ can access the schema\n          information using the standard directory protocols.\n\
    \        o The nature of the directory naturally allows the schema\n         \
    \ to be distributed. Schema used locally can be kept in the\n          local DSA\
    \ itself whereas schema for general objects like\n          person, organization\
    \ etc can be made available to all\n          components of the directory by publishing\
    \ it.\n   In the operational model, the schema information in the directory is\n\
    \   expected to complement the schema information held in central\n   repositories.\n"
- title: 3.1  Naming Scheme for the Schema
  contents:
  - "3.1  Naming Scheme for the Schema\n   The schema information is stored in a distributed\
    \ manner.  We propose\n   a model in which each naming context stores the schema\
    \ relevant to\n   it.\n                                Root\n                \
    \                    \\\n                                     \\\n           \
    \             +-------------\\----------------------+\n                      \
    \  |            C=IN            DSA-1   |\n                        |         \
    \ /      \\                  |\n                        |         /        \\\
    \                 |\n                        |        /          \\          \
    \      |\n                        |       /            \\               |\n  \
    \                      |      /          cn=subschema       |\n              \
    \          |     /           /  / | \\ \\ \\       |\n                       \
    \ |    /           /  /  |  \\ \\ \\      |\n                        |   /   \
    \       oid= oid=             |\n                        +--/---------------------------------+\n\
    \                          /\n  +----------------------/----------------------+\n\
    \  |                o=IIT, Madras      DSA-2     |\n  |                 /    \
    \       \\               |\n  |                /             \\              |\n\
    \  |               /               \\             |\n  |              /      \
    \           \\            |\n  |         ou=CSE             cn=subschema     |\n\
    \  |         /    \\             /   /| \\ \\ \\     |\n  |        /      \\ \
    \          /   / |  \\ \\ \\    |\n  |ipni=spark  cn=Rajeev oid=ipni  oid=   \
    \      |\n  +---------------------------------------------+\n         Figure 1:\
    \ DIT with schema objects\n   To store the schema information, an object called\
    \ subschema object is\n   defined. This object can come anywhere in the Directory\
    \ Information\n   Tree (DIT). The subschema is defined as a subclass of Top. \
    \ The\n   subschema entry is stored below the root entry of a naming context.\n\
    \   The root entry of a naming context must contain a subschema subentry,\n  \
    \ named {CN= Subschema}.  This standard naming methodology is necessary\n   so\
    \ that the components of the directory can easily and\n   algorithmically locate\
    \ the schema entries.  All schema information\n   relevant to that naming context\
    \ is stored below the subschema entry.\n   Children of the subschema entry store\
    \ information about objects,\n   attribute types, attribute syntaxes or matching\
    \ rules. The DIT\n   structure for storing schema information is shown in Figure\
    \ 1.\n   Schema for these objects are given in section 5.\n"
- title: 4. Retrieval of Schema from the Directory
  contents:
  - "4. Retrieval of Schema from the Directory\n   When an unknown object is encountered\
    \ by any component of directory\n   during a directory operation, it proceeds\
    \ the following way to\n   resolve the schema.\n   The RDN component at the leaf-end\
    \ of the name of the object whose\n   schema is to be resolved is replaced by\
    \ the RDNs \"oid=<object\n   identifier of the new object>, CN=subschema\" and\
    \ a read request is\n   initiated for the newly formed name.  If the entry is\
    \ not found, two\n   RDN components from the leaf-end of the name of the object\
    \ are\n   replaced by the RDNs \"oid=<object identifier of the new object>,\n\
    \   CN=subschema\" and another read is attempted. The process continues\n   until\
    \ the read succeeds.  For example, while resolving the schema of\n   the object\
    \ \"IPNI=spark, OU=Department of Computer Science, O=Indian\n   Institute of Technology,\
    \ Madras , C=IN\", if the schema of the object\n   IPNI (IP Node Image) is not\
    \ known to a component of the directory,\n   the following procedure will be adopted.\n\
    \   Let the object id for the object IPNI be ipni.  The RDN \"IPNI=spark\"\n \
    \  is removed from the distinguished name of the entry and the RDNs\n   \"oid=ipni,\
    \ CN= Subschema\" is appended.  The name thus formed is\n   \"oid=ipni, CN=subschema,\
    \ OU=Department of Computer Science, O=Indian\n   Institute of Technology, Madras,\
    \ C=IN\" A read request is initiated on\n   this name.  If the distinguished name\
    \ \"OU= Department of Computer\n   Science, O=Indian Institute of Technology,\
    \ Madras, C=IN\" is the\n   context prefix of a naming context, this read request\
    \ will result in\n   the directory returning the schema for the object IPNI. If\
    \ it is not,\n   the read operation will fail. In that case, a read operation\
    \ is\n   initiated with distinguished name \"oid=ipni, CN= subschema, O=Indian\n\
    \   Institute of Technology, Madras, C=IN\". For the DIT structure shown\n   in\
    \ Figure-1, this query will succeed and the schema information will\n   be returned.\
    \  The schema for the requested object will always be\n   located below the starting\
    \ entry of the naming context in which the\n   entry is located.\n"
- title: 5. The Meta-Schema
  contents:
  - '5. The Meta-Schema

    '
- title: experimental = 1.3.6.1.3
  contents:
  - 'experimental = 1.3.6.1.3

    '
- title: schema OBJECT IDENTIFIER
  contents:
  - "schema OBJECT IDENTIFIER\n        ::= {experimental 65}\n"
- title: schemaObjectClass OBJECT IDENTIFIER
  contents:
  - "schemaObjectClass OBJECT IDENTIFIER\n        ::= {schema.1}\n"
- title: schemaAttribute OBJECT IDENTIFIER
  contents:
  - "schemaAttribute OBJECT IDENTIFIER\n        ::= {schema.2}\n"
- title: subschema OBJECT CLASS
  contents:
  - "subschema OBJECT CLASS\n    Subclass of TOP\n        MUST CONTAIN {\n       \
    \     commonName\n            - -  For naming\n        }\n        ::= {schemaObjectClass.1}\n"
- title: objectClass OBJECT CLASS
  contents:
  - "objectClass OBJECT CLASS\n    Subclass of TOP\n        MUST CONTAIN {\n     \
    \       objectIdentifier\n                - - This field stores the object identifier\
    \ of object\n                - - represented by an object class entry. This attribute\n\
    \                - - is used for naming an object class entry.\n        }\n  \
    \      MAY CONTAIN {\n            commonName,\n                 - - This field\
    \ is used to store the name of the object\n            mandatoryNamingAttributes,\n\
    \            mandatoryAttributes,\n            optionalNamingAttibutes,\n    \
    \        optionalAttributes,\n            obsolete,\n            description,\n\
    \            subClassOf\n        }\n        ::= {schemaObjectClass.2}\n"
- title: attributeType OBJECT CLASS
  contents:
  - "attributeType OBJECT CLASS\n    Subclass of Top\n        MUST CONTAIN {\n   \
    \         objectIdentifier\n        }\n        MAY CONTAIN {\n             commonName,\n\
    \                - - used to store the name of the attribute type\n          \
    \   constraint,\n             attributeSyntax,\n             multivalued,\n  \
    \           obsolete,\n             matchRules,\n             description\n  \
    \      }\n        ::= {schemaObjectClass.3}\n"
- title: matchingRule OBJECT CLASS
  contents:
  - "matchingRule OBJECT CLASS\n     Subclass of Top\n        MUST CONTAIN {\n   \
    \          objectIdentifier\n        }\n         MAY CONTAIN {\n             commonName,\n\
    \             matchtype,\n             description,\n             obsolete\n \
    \       }\n        ::= {schemaObjectClass.4}\n"
- title: objectIdentifier ATTRIBUTE
  contents:
  - "objectIdentifier ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            objectIdentifierSyntax\n\
    \       ::= {schemaAttribute.1}\n"
- title: mandatoryNamingAttributes ATTRIBUTE
  contents:
  - "mandatoryNamingAttributes ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n         \
    \   SET OF OBJECT IDENTIFIER\n       ::= {schemaAttribute.2}\n"
- title: mandatoryAttributes ATTRIBUTE
  contents:
  - "mandatoryAttributes ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            SET\
    \ OF OBJECT IDENTIFIER\n       ::= {schemaAttribute.3}\n"
- title: optionalNamingAttibutes ATTRIBUTE
  contents:
  - "optionalNamingAttibutes ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n           \
    \ SET OF OBJECT IDENTIFIER\n       ::= {schemaAttribute.4}\n"
- title: optionalAttibutes ATTRIBUTE
  contents:
  - "optionalAttibutes ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            SET OF\
    \ OBJECT IDENTIFIER\n       ::= {schemaAttribute.5}\n"
- title: obsolete ATTRIBUTE
  contents:
  - "obsolete ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            BOOLEAN\n     \
    \                      -- DEFAULT FALSE\n       ::= {schemaAttribute.6}\n"
- title: subClassOf      ATTRIBUTE
  contents:
  - "subClassOf      ATTRIBUTE\n        WITH ATTRIBUTE-SYNTAX\n                SET\
    \ OF OBJECT IDENTIFIER\n       ::= {schemaAttribute.7}\n"
- title: constraint ATTRIBUTE
  contents:
  - "constraint ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            Constraint\n\
    \       ::= {schemaAttribute.8}\n"
- title: Constraint ::=Choice {
  contents:
  - "Constraint ::=Choice {\n             StringConstraint,\n             IntegerConstraint\n\
    \        }\n"
- title: StringConstraint ::= SEQUENCE {
  contents:
  - "StringConstraint ::= SEQUENCE {\n             shortest INTEGER,\n           \
    \  longest  INTEGER\n        }\n"
- title: IntegerConstraint ::= SEQUENCE {
  contents:
  - "IntegerConstraint ::= SEQUENCE {\n             lowerbound INTEGER,\n        \
    \     upperbound INTEGER OPTIONAL\n        }\n"
- title: attributeSyntax ATTRIBUTE
  contents:
  - "attributeSyntax ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n              ASN1DataType\n\
    \       ::= {schemaAttribute.9}\n"
- title: multivalued ATTRIBUTE
  contents:
  - "multivalued ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            BOOLEAN    \
    \         -- DEFAULT FALSE\n       ::= {schemaAttribute.10}\n"
- title: matchRules ATTRIBUTE
  contents:
  - "matchRules ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            SET OF OBJECT\
    \ IDENTIFIER\n       ::= {schemaAttribute.11}\n"
- title: matchtype ATTRIBUTE
  contents:
  - "matchtype ATTRIBUTE\n       WITH ATTRIBUTE-SYNTAX\n            INTEGER {\n  \
    \           PRESENT                    (0),\n             EQUALITY           \
    \        (1),\n             ORDERING                   (2),\n             CASESENSITIVEMATCH\
    \         (3),\n             CASEINSENSITIVEMATCH       (4)\n            }\n \
    \      ::= {schemaAttribute.12}\n"
- title: 6. References
  contents:
  - "6. References\n   [1] CCITT. \"Data Communication Networks: Directory\", Recommendations\n\
    \       X.500 - X.521 1988.\n   [2] CCITT. \"Data Communication Networks: Directory\"\
    , Recommendations\n       X.500 - X.525 1993.\n   [3] Barker, P., and S. Kille,\
    \ \"The COSINE and Internet X.500 Schema\",\n       RFC 1274, University College\
    \ London, November 1991.\n   [4] Howes, T., \"Schema Information in the X.500\
    \ Directory\", Work in\n       Progress, University of Michigan, July 1992.\n\
    \   [5] Howes, T., Rossen, K., Sataluri, S., and R. Wright, \"Procedures\n   \
    \    for Formalization, Evolution, and Maintenance of the Internet\n       X.500\
    \ Directory Schema\", Work in Progress, June 1995.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Glenn Mansfield\n   AIC Systems Laboratories,\n   6-6-3,\
    \ Minami Yoshinari, Aoba-Ku, Sendai,\n   Japan\n   Phone: +81 (22) 279-3310\n\
    \   Fax: +81 (22) 279-3640\n   EMail: glenn@aic.co.jp\n   P. V. Rajeev\n   Hughes\
    \ Software Systems,\n   2nd Floor, International Trade Tower,\n   Nehru Place,\
    \ New Delhi,\n   India\n   EMail: rajeev%hss@lando.hns.com\n   S. V. Raghavan\n\
    \   Department of Computer Science and Engineering,\n   Indian Institute of Technology,\
    \ Madras 600 036,\n   India\n   EMail: svr@iitm.ernet.in\n   Tim Howes\n   University\
    \ of Michigan\n   ITD Research Systems\n   535 W William St.\n   Ann Arbor, MI\
    \ 48103-4943, USA\n   Phone: +1 (313) 747-4454\n   EMail: tim@umich.edu\n"
