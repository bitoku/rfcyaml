Abstract This document describes an Extensible Provisioning Protocol (EPP) extension for including an Allocation Token in "query" and "transform" commands.
The Allocation Token is used as a credential that authorizes a client to request the allocation of a specific object from the server using one of the EPP transform commands, including "create" and "transfer".
This document describes an extension mapping for version 1.0 of the Extensible Provisioning Protocol (EPP)
This mapping, which is an extension to EPP object mappings similar to the EPP domain name mapping [RFC5731], supports passing an Allocation Token as a credential that authorizes a client to request the allocation of a specific object from the server using one of the EPP transform commands, including "create" and "transfer".
Allocation is when a server assigns the sponsoring client of an object based on the use of an Allocation Token credential.
Examples include allocating a registration based on a pre eligibility Allocation Token, allocating a premium domain name registration based on an auction Allocation Token, allocating a registration based on a founders Allocation Token, and allocating an existing domain name held by the server or by a different sponsoring client based on an Allocation Token that is passed with a transfer command.
Clients pass an Allocation Token to the server for validation, and the server determines if the supplied Allocation Token is one supported by the server.
It is up to server policy which EPP transform commands and which objects require the Allocation Token.
The Allocation Token MAY be returned to an authorized client for passing out of band to a client that uses it with an EPP transform command.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented in order to develop a conforming implementation.
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
Indentation and white space in the examples are provided only to illustrate element relationships and are not REQUIRED in the protocol.
The XML namespace prefix "allocationToken" is used for the namespace "urn:ietf:params:xml:ns:allocationToken 1.0", but implementations MUST NOT depend on it and instead employ a proper namespace aware XML parser and serializer to interpret and output the XML documents.
The "abc123" token value is used as a placeholder value in the examples.
The server MUST support token values that follow the Security Considerations (Section 6).
attribute values, including the "2fooBAR" <domain:pw> value, in the examples are provided for illustration purposes only.
Refer to [RFC5731] for details on the domain object attributes.
This extension adds additional elements to EPP object mappings similar to the EPP domain name mapping [RFC5731].
Only those new elements are described here.
The Allocation Token is a simple XML "token" type.
The exact format of the Allocation Token is up to server policy.
The server MAY have the Allocation Token for each object to match against the Allocation Token passed by the client to authorize the allocation of the object.
> element is used for all of the supported EPP commands as well as the info response.
If the supplied Allocation Token passed to the server does not apply to the object, the server MUST return an EPP error result code of 2201.
Authorization information, similar to what is defined in the EPP domain name mapping [RFC5731], is associated with objects to facilitate transfer operations.
The authorization information is assigned when an object is created.
The Allocation Token and the authorization information are both credentials but are used for different purposes and in different ways.
The Allocation Token is used to facilitate the allocation of an object instead of transferring the sponsorship of the object.
The Allocation Token is not managed by the client but is validated by the server to authorize assigning the initial sponsoring client of the object.
> element with value of "abc123":
A detailed description of the EPP syntax and semantics can be found in the EPP core protocol specification [RFC5730].
EPP Query Commands EPP provides three commands to retrieve object information:
<check> to determine if an object can be provisioned, <info> to retrieve information associated with an object, and <transfer> to retrieve object transfer status information.
This extension defines additional elements to extend the EPP <check
> command of an object mapping similar to the mapping specified in [RFC5731].
This extension allows clients to check the availability of an object with an Allocation Token, as described in Section 2.1.
Clients can check if an object can be created using the Allocation Token.
The Allocation Token is applied to all object names included in the EPP <check> command.
The following is an example <check> command for the allocation.example domain name using the <allocationToken:
> extension with the allocation token of 'abc123':
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
If the query was successful, the server replies with a <check> response providing the availability status of the queried object based on the following Allocation Token cases where the object is otherwise available: 1.
If an object requires an Allocation Token and the Allocation Token does apply to the object, then the server MUST return the availability status as available (e.g., the "avail" attribute is "1" or "true").
If an object requires an Allocation Token and
the Allocation Token does not apply to the object, then the server SHOULD return the availability status as unavailable (e.g., the "avail" attribute is "0" or "false").
If an object does not require an Allocation Token, the server MAY return the availability status as available (e.g., the "avail" attribute is "1" or "true").
The following is an example <check> domain response for a <check> command using the <allocationToken:allocationToken> extension: S:<?xml version "1.0" encoding "UTF 8"?
The following is an example <check> command with the <allocationToken:
> extension for the allocation.example and allocation2.example domain names.
Availability of allocation.example and allocation2.example domain names are based on the Allocation Token 'abc123': C:<?xml version "1.0" encoding "UTF 8"?
The following is an example <check> domain response for multiple domain names in the <check> command using the <allocationToken:allocationToken> extension, where the Allocation Token 'abc123' matches allocation.example but does not match allocation2.example: S:<?xml version "1.0" encoding "UTF 8"?
This extension does not add any elements to the EPP <check> response described in [RFC5730].
This extension defines additional elements to extend the EPP <info> command of an object mapping similar to the mapping specified in [RFC5731].
command allows a client to request information associated with an existing object.
Authorized clients MAY retrieve the Allocation Token (Section 2.1) along with the other object information by supplying the <allocationToken:info> element in the command.
> element is an empty element that serves as a marker to the server to return the <allocationToken:allocationToken> element in the info response.
If the client is not authorized to receive the Allocation Token, the server MUST return an EPP error result code of 2201.
If the client is authorized to receive the Allocation Token, but there is no Allocation Token associated with the object, the server MUST return an EPP error result code of 2303.
The authorization is subject to server policy.
The following is an example <info> command with the allocationToken:info extension for the allocation.example domain name: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
If the query was successful, the server replies with an <allocationToken:
> element along with the regular EPP
> element is described in Section 2.1.
The following is an example <info> domain response using the <allocationToken:allocationToken> extension: S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
This extension does not add any elements to the EPP <transfer> query command or <transfer> query response described in [RFC5730].
EPP Transform Commands EPP provides five commands to transform objects: <create> to create an instance of an object, <delete> to delete an instance of an object, <renew> to extend the validity period of an object, <transfer> to manage object sponsorship changes, and <update> to change information associated with an object.
This extension defines additional elements to extend the EPP <create
> command of an object mapping similar to the mapping specified in [RFC5731].
The EPP <create> command provides a transform operation that allows a client to create an instance of an object.
In addition to the EPP command elements described in an object mapping similar to the mapping specified in [RFC5731], the command MUST contain a child <allocationToken:
> element for the client to be authorized to create and allocate the object.
If the Allocation Token does not apply to the object, the server MUST return an EPP error result code of 2201.
The following is an example <create> command to create a domain object with an Allocation Token:
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
This extension does not add any elements to the EPP <create> response described in [RFC5730].
This extension does not add any elements to the EPP <delete> command or <delete> response described in [RFC5730].
This extension does not add any elements to the EPP <renew> command or <renew> response described in [RFC5730].
This extension defines additional elements to extend the EPP <transfer
> command of an object mapping similar to the mapping specified in [RFC5731].
command provides a transform operation that allows a client to request the transfer of an object.
In addition to the EPP command elements described in an object mapping similar to the mapping specified in [RFC5731], the command MUST contain a child <allocationToken:
> element for the client to be authorized to transfer and allocate the object.
The authorization associated with the Allocation Token is in addition to, and does not replace, the authorization mechanism defined for the object's <transfer> command.
If the Allocation Token is invalid or not required for the object, the server MUST return an EPP error result code of 2201.
The following is an example <transfer> command to allocate the domain object with the Allocation Token:
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
This extension does not add any elements to the EPP <transfer> response described in [RFC5730].
This extension does not add any elements to the EPP <update> command or <update> response described in [RFC5730].
One schema is presented here: the EPP Allocation Token Extension schema.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Allocation Token Extension Schema BEGIN <?
xml version "1.0" encoding "UTF 8"?
:allocationToken "urn:ietf:params:xml:ns:allocationToken 1.0" targetNamespace "urn:ietf:params:xml:ns:allocationToken 1.0
" elementFormDefault "qualified"> <annotation> <documentation> Extensible Provisioning Protocol v1.0 Allocation Token Extension </documentation> </annotation
Element used in info command to get allocation token.
Allocation Token used in transform commands and info response
<element name "allocationToken" type "allocationToken:allocationTokenType" /
"> <restriction base "token"> <minLength value "1" /
This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688].
The allocationToken namespace has been registered as follows.
Namespace URIs do not represent an XML specification.
The allocationToken XML schema has been registered as follows.
: See the "Formal Syntax" section of this document.
The following entry has been added to the Extensions for the Extensible Provisioning Protocol (EPP) registry, as described in [RFC7451].
Name of Extension: Allocation Token Extension for the Extensible Provisioning Protocol
Any IPR Disclosure: None Status:
The mapping described in this document does not provide any security services beyond those described by EPP [RFC5730] and protocol layers used by EPP.
The security considerations described in these other specifications apply to this specification as well.
The mapping acts as a conduit for the passing of Allocation Tokens between a client and a server.
The definition of the Allocation Token SHOULD be defined outside of this mapping.
The following are security considerations in the definition and use of an Allocation Token: 1.
An Allocation Token should be considered secret information by the client; it SHOULD be protected at rest and MUST be protected in transit.
An Allocation Token should be single use, meaning it should be unique per object and per allocation operation.
An Allocation Token should have a limited life with some form of expiry in the Allocation Token, if generated by a trusted third party, or with a server side expiry, if generated by the server.
An Allocation Token should use a strong random value if it is based on an unsigned code.
An Allocation Token should leverage digital signatures to confirm its authenticity if generated by a trusted third party.
An Allocation Token that is signed XML should be encoded (e.g., base64 [RFC4648]) to mitigate server validation issues.
