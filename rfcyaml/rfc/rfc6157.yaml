- contents:
  - '        IPv6 Transition in the Session Initiation Protocol (SIP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes how the IPv4 Session Initiation Protocol\n
    \  (SIP) user agents can communicate with IPv6 SIP user agents (and vice\n   versa)
    at the signaling layer as well as exchange media once the\n   session has been
    successfully set up.  Both single- and dual-stack\n   (i.e., IPv4-only and IPv4/IPv6)
    user agents are considered.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6157.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  The Signaling Layer  . . . . . . . . . . . . . . . . . . .
    . .  4\n     3.1.  Proxy Behavior . . . . . . . . . . . . . . . . . . . . . .
    \ 4\n       3.1.1.  Relaying Requests across Different Networks  . . . . .  5\n
    \    3.2.  User Agent Behavior  . . . . . . . . . . . . . . . . . . .  7\n   4.
    \ The Media Layer  . . . . . . . . . . . . . . . . . . . . . . .  7\n     4.1.
    \ Updates to RFC 3264  . . . . . . . . . . . . . . . . . . .  9\n     4.2.  Initial
    Offer  . . . . . . . . . . . . . . . . . . . . . .  9\n     4.3.  Connectivity
    Checks  . . . . . . . . . . . . . . . . . . . 10\n   5.  Contacting Servers: Interaction
    of RFC 3263 and RFC 3484 . . . 10\n   6.  Security Considerations  . . . . . .
    . . . . . . . . . . . . . 11\n   7.  Acknowledgments  . . . . . . . . . . . .
    . . . . . . . . . . . 11\n   8.  References . . . . . . . . . . . . . . . . .
    . . . . . . . . . 12\n     8.1.  Normative References . . . . . . . . . . . .
    . . . . . . . 12\n     8.2.  Informative References . . . . . . . . . . . . .
    . . . . . 12\n   Appendix A.  Sample IPv4/IPv6 DNS File . . . . . . . . . . .
    . . . 14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   SIP [3] is a protocol to establish and manage multimedia
    sessions.\n   After the exchange of signaling messages, SIP endpoints generally\n
    \  exchange session or media traffic, which is not transported using SIP\n   but
    a different protocol.  For example, audio streams are typically\n   carried using
    the Real-Time Transport Protocol (RTP) [13].\n   Consequently, a complete solution
    for IPv6 transition needs to handle\n   both the signaling layer and the media
    layer.  While unextended SIP\n   can handle heterogeneous IPv6/IPv4 networks at
    the signaling layer as\n   long as proxy servers and their Domain Name System
    (DNS) entries are\n   properly configured, user agents using different networks
    and address\n   spaces must implement extensions in order to exchange media between\n
    \  them.\n   This document addresses the system-level issues in order to make
    SIP\n   work successfully between IPv4 and IPv6.  Sections 3 and 4 provide\n   discussions
    on the topics that are pertinent to the signaling layer\n   and media layer, respectively,
    to establish a successful session\n   between heterogeneous IPv4/IPv6 networks.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\n
    \  RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n   described
    in BCP 14, RFC 2119 [1] and indicate requirement levels for\n   compliant implementations.\n
    \  IPv4-only user agent:  An IPv4-only user agent supports SIP signaling\n      and
    media only on the IPv4 network.  It does not understand IPv6\n      addresses.\n
    \  IPv4-only node:  A host that implements only IPv4.  An IPv4-only node\n      does
    not understand IPv6.  The installed base of IPv4 hosts\n      existing before
    the transition begins are IPv4-only nodes.\n   IPv6-only user agent:  An IPv6-only
    user agent supports SIP signaling\n      and media only on the IPv6 network.  It
    does not understand IPv4\n      addresses.\n   IPv6-only node:  A host that implements
    IPv6 and does not implement\n      IPv4.\n   IPv4/IPv6 node:  A host that implements
    both IPv4 and IPv6; such\n      hosts are also known as \"dual-stack\" hosts [17].\n
    \  IPv4/IPv6 user agent:  A user agent that supports SIP signaling and\n      media
    on both IPv4 and IPv6 networks.\n   IPv4/IPv6 proxy:  A proxy that supports SIP
    signaling on both IPv4\n      and IPv6 networks.\n"
  title: 2.  Terminology
- contents:
  - "3.  The Signaling Layer\n   An autonomous domain sends and receives SIP traffic
    to and from its\n   user agents as well as to and from other autonomous domains.
    \ This\n   section describes the issues related to such traffic exchanges at the\n
    \  signaling layer, i.e., the flow of SIP messages between participants\n   in
    order to establish the session.  We assume that the network\n   administrators
    appropriately configure their networks such that the\n   SIP servers within an
    autonomous domain can communicate between\n   themselves.  This section contains
    system-level issues; a companion\n   document [15] addresses IPv6 parser torture
    tests in SIP.\n"
  - contents:
    - "3.1.  Proxy Behavior\n   User agents typically send SIP traffic to an outbound
      proxy, which\n   takes care of routing it forward.  In order to support both
      IPv4-only\n   and IPv6-only user agents, it is RECOMMENDED that domains deploy\n
      \  dual-stack outbound proxy servers or, alternatively, deploy both\n   IPv4-only
      and IPv6-only outbound proxies.  Furthermore, there SHOULD\n   exist both IPv6
      and IPv4 DNS entries for outbound proxy servers.\n   This allows the user agent
      to query DNS and obtain an IP address most\n   appropriate for its use (i.e.,
      an IPv4-only user agent will query DNS\n   for A resource records (RRs), an
      IPv6-only user agent will query DNS\n   for AAAA RRs, and a dual-stack user
      agent will query DNS for all RRs\n   and choose a specific network.)\n   Some
      domains provide automatic means for user agents to discover\n   their proxy
      servers.  It is RECOMMENDED that domains implement\n   appropriate discovery
      mechanisms to provide user agents with the IPv4\n   and IPv6 addresses of their
      outbound proxy servers.  For example, a\n   domain may support both the DHCPv4
      [11] and the DHCPv6 [10] options\n   for SIP servers.\n   On the receiving side,
      user agents inside an autonomous domain\n   receive SIP traffic from sources
      external to their domain through an\n   inbound proxy, which is sometimes co-located
      with the registrar of\n   the domain.  As was the case previously, it is RECOMMENDED
      that\n   domains deploy dual-stack inbound proxies or, alternatively, deploy\n
      \  both IPv4-only and IPv6-only inbound proxy servers.  This allows a\n   user
      agent external to the autonomous domain to query DNS and receive\n   an IP address
      of the inbound proxy most appropriate for its use\n   (i.e., an IPv4-only user
      agent will query DNS for A RRs, an IPv6-only\n   user agent will query DNS for
      AAAA RRs, and a dual-stack user agent\n   will query DNS for all RRs and choose
      a specific network).  This\n   strategy, i.e., deploying dual-stack proxies,
      also allows for an\n   IPv6-only user agent in the autonomous domain to communicate
      with an\n   IPv4-only user agent in the same autonomous domain.  Without such
      a\n   proxy, user agents using different networks identifiers will not be\n
      \  able to successfully signal each other.\n   Proxies MUST follow the recommendations
      in Section 5 to determine the\n   order in which to contact the downstream servers
      when routing a\n   request.\n"
    - contents:
      - "3.1.1.  Relaying Requests across Different Networks\n   A SIP proxy server
        that receives a request using IPv6 and relays it\n   to a user agent (or another
        downstream proxy) using IPv4, and vice\n   versa, needs to remain in the path
        traversed by subsequent requests.\n   Therefore, such a SIP proxy server MUST
        be configured to Record-Route\n   in that situation.\n      Note that while
        this is the recommended practice, some problems\n      may still arise if
        an RFC 2543 [14] endpoint is involved in\n      signaling.  Since the ABNF
        in RFC 2543 did not include production\n      rules to parse IPv6 network
        identifiers, there is a good chance\n      that an RFC 2543-only compliant
        endpoint is not able to parse or\n      regenerate IPv6 network identifiers
        in headers.  Thus, despite a\n      dual-stack proxy inserting itself into
        the session establishment,\n      the endpoint itself may not succeed in the
        signaling establishment\n      phase.\n      This is generally not a problem
        with RFC 3261 endpoints; even if\n      such an endpoint runs on an IPv4-only
        node, it still is able to\n      parse and regenerate IPv6 network identifiers.\n
        \  Relaying a request across different networks in this manner has other\n
        \  ramifications.  For one, the proxy doing the relaying must remain in\n
        \  the signaling path for the duration of the session; otherwise, the\n   upstream
        client and the downstream server would not be able to\n   communicate directly.
        \ Second, to remain in the signaling path, the\n   proxy MUST insert one or
        two Record-Route headers: if the proxy is\n   inserting a URI that contains
        a Fully Qualified Domain Name (FQDN) of\n   the proxy, and that name has both
        IPv4 and IPv6 addresses in DNS,\n   then inserting one Record-Route header
        suffices.  But if the proxy is\n   inserting an IP address in the Record-Route
        header, then it must\n   insert two such headers; the first Record-Route header
        contains the\n   proxy's IP address that is compatible with the network type
        of the\n   downstream server, and the second Record-Route header contains
        the\n   proxy's IP address that is compatible with the upstream client.\n
        \  An example helps illustrate this behavior.  In the example, we use\n   only
        those headers pertinent to the discussion.  Other headers have\n   been omitted
        for brevity.  In addition, only the INVITE request and\n   final response
        (200 OK) are shown; it is not the intent of the\n   example to provide a complete
        call flow that includes provisional\n   responses and other requests.\n   In
        this example, proxy P, responsible for the domain example.com,\n   receives
        a request from an IPv4-only upstream client.  It proxies\n   this request
        to an IPv6-only downstream server.  Proxy P is running\n   on a dual-stack
        host; on the IPv4 interface, it has an address of\n   192.0.2.1, and on the
        IPv6 interface, it is configured with an\n   address of 2001:db8::1 (Appendix
        A contains a sample DNS zone file\n   entry that has been populated with both
        IPv4 and IPv6 addresses.)\n     UAC            Proxy           UAS\n    (IPv4)
        \           P           (IPv6)\n      |          (IPv4/IPv6)         |\n      |
        \              |              |\n      +---F1--------->|              |\n
        \     |               +---F2-------->|\n      |               |              |\n
        \     |               |<--F3---------+\n      |<--F4----------+              |\n
        \    ...             ...            ...\n      |               |              |\n
        \     V               V              V\n   F1: INVITE sip:alice@example.com
        SIP/2.0\n       ...\n   F2: INVITE sip:alice@2001:db8::10 SIP/2.0\n       Record-Route:
        <sip:2001:db8::1;lr>\n       Record-Route: <sip:192.0.2.1;lr>\n       ...\n
        \  F3: SIP/2.0 200 OK\n       Record-Route: <sip:2001:db8::1;lr>\n       Record-Route:
        <sip:192.0.2.1;lr>\n       ...\n   F4: SIP/2.0 200 OK\n       Record-Route:
        <sip:2001:db8::1;lr>\n       Record-Route: <sip:192.0.2.1;lr>\n       ...\n
        \  Figure 1: Relaying requests across different networks\n   When the User
        Agent Server (UAS) gets an INVITE and it accepts the\n   invitation, it sends
        a 200 OK (F3) and forms a route set.  The first\n   entry in its route set
        corresponds to the proxy's IPv6 interface.\n   Similarly, when the 200 OK
        reaches the User Agent Client (UAC) (F4),\n   it creates a route set by following
        the guidelines of RFC 3261 and\n   reversing the Record-Route headers.  The
        first entry in its route set\n   corresponds to the proxy's IPv4 interface.
        \ In this manner, both the\n   UAC and the UAS will have the correct address
        of the proxy to which\n   they can target subsequent requests.\n   Alternatively,
        the proxy could have inserted its FQDN in the Record-\n   Route URI and the
        result would have been the same.  This is because\n   the proxy has both IPv4
        and IPv6 addresses in the DNS; thus, the URI\n   resolution would have yielded
        an IPv4 address to the UAC and an IPv6\n   address to the UAS.\n"
      title: 3.1.1.  Relaying Requests across Different Networks
    title: 3.1.  Proxy Behavior
  - contents:
    - "3.2.  User Agent Behavior\n   User agent clients MUST follow the normative
      text specified in\n   Section 4.2 to gather IP addresses pertinent to the network.
      \ Having\n   done that, clients MUST follow the recommendations in Section 5
      to\n   determine the order of the downstream servers to contact when routing\n
      \  a request.\n   Autonomous domains SHOULD deploy dual-stack user agent servers,
      or\n   alternatively, deploy both IPv4-only and IPv6-only servers.  In\n   either
      case, the RR in DNS for reaching the server should be\n   specified appropriately.\n"
    title: 3.2.  User Agent Behavior
  title: 3.  The Signaling Layer
- contents:
  - "4.  The Media Layer\n   SIP establishes media sessions using the offer/answer
    model [4].  One\n   endpoint, the offerer, sends a session description (the offer)
    to the\n   other endpoint, the answerer.  The offer contains all the media\n   parameters
    needed to exchange media with the offerer: codecs,\n   transport addresses, protocols
    to transfer media, etc.\n   When the answerer receives an offer, it elaborates
    an answer and\n   sends it back to the offerer.  The answer contains the media\n
    \  parameters that the answerer is willing to use for that particular\n   session.
    \ Offer and answer are written using a session description\n   protocol.  The
    most widespread protocol to describe sessions at\n   present is called, aptly
    enough, the Session Description Protocol\n   (SDP) [2].\n   A direct offer/answer
    exchange between an IPv4-only user agent and an\n   IPv6-only user agent does
    not result in the establishment of a\n   session.  The IPv6-only user agent wishes
    to receive media on one or\n   more IPv6 addresses, but the IPv4-only user agent
    cannot send media\n   to these addresses, and generally does not even understand
    their\n   format.  Consequently, user agents need a means to obtain both IPv4\n
    \  and IPv6 addresses to receive media and to place them in offers and\n   answers.\n
    \     This IP version incompatibility problem would not exist if hosts\n      implementing
    IPv6 also implemented IPv4, and were configured with\n      both IPv4 and IPv6
    addresses.  In such a case, a UA would be able\n      to pick a compatible media
    transport address type to enable the\n      hosts to communicate with each other.\n
    \  Pragmatism dictates that IPv6 user agents undertake the greater\n   burden
    in the transition period.  Since IPv6 user agents are not\n   widely deployed
    yet, it seems appropriate that IPv6 user agents\n   obtain IPv4 addresses instead
    of mandating an upgrade on the\n   installed IPv4 base.  Furthermore, IPv6 user
    agents are expected to\n   be dual-stacked and thus also support IPv4, unlike
    the larger IPv4-\n   only user agent base that does not or cannot support IPv6.\n
    \  An IPv6 node SHOULD also be able to send and receive media using IPv4\n   addresses,
    but if it cannot, it SHOULD support Session Traversal\n   Utilities for NAT (STUN)
    relay usage [8].  Such a relay allows the\n   IPv6 node to indirectly send and
    receive media using IPv4.\n   The advantage of this strategy is that the installed
    base of IPv4\n   user agents continues to function unchanged, but it requires
    an\n   operator that introduces IPv6 to provide additional servers for\n   allowing
    IPv6 user agents to obtain IPv4 addresses.  This strategy\n   may come at an additional
    cost to SIP operators deploying IPv6.\n   However, since IPv4-only SIP operators
    are also likely to deploy STUN\n   relays for NAT (Network Address Translator)
    traversal, the additional\n   effort to deploy IPv6 in an IPv4 SIP network should
    be limited in\n   this aspect.\n   However, there will be deployments where an
    IPv4/IPv6 node is unable\n   to use both interfaces natively at the same time,
    and instead, runs\n   as an IPv6-only node.  Examples of such deployments include:\n
    \  1.  Networks where public IPv4 addresses are scarce and it is\n       preferable
    to make large deployments only on IPv6.\n   2.  Networks utilizing Layer-2's that
    do not support concurrent IPv4\n       and IPv6 usage on the same link.\n"
  - contents:
    - "4.1.  Updates to RFC 3264\n   This section provides a normative update to RFC
      3264 [4] in the\n   following manner:\n   1.  In some cases, especially those
      dealing with third party call\n       control (see Section 4.2 of [12]), there
      arises a need to specify\n       the IPv6 equivalent of the IPv4 unspecified
      address (0.0.0.0) in\n       the SDP offer.  For this, IPv6 implementations
      MUST use a domain\n       name within the .invalid DNS top-level domain instead
      of using\n       the IPv6 unspecified address (i.e., ::).\n   2.  Each media
      description in the SDP answer MUST use the same\n       network type as the
      corresponding media description in the offer.\n       Thus, if the applicable
      \"c=\" line for a media description in the\n       offer contained a network
      type with the value \"IP4\", the\n       applicable \"c=\" line for the corresponding
      media description in\n       the answer MUST contain \"IP4\" as the network
      type.  Similarly, if\n       the applicable \"c=\" line for a media description
      in the offer\n       contained a network type with the value \"IP6\", the applicable\n
      \      \"c=\" line for the corresponding media description in the answer\n       MUST
      contain \"IP6\" as the network type.\n"
    title: 4.1.  Updates to RFC 3264
  - contents:
    - "4.2.  Initial Offer\n   We now describe how user agents can gather addresses
      by following the\n   Interactive Connectivity Establishment (ICE) [7] procedures.
      \ ICE is\n   protocol that allows two communicating user agents to arrive at
      a\n   pair of mutually reachable transport addresses for media\n   communications
      in the presence of NATs.  It uses the STUN [18]\n   protocol, applying its binding
      discovery and relay usages.\n   When following the ICE procedures, in addition
      to local addresses,\n   user agents may need to obtain addresses from relays;
      for example, an\n   IPv6 user agent would obtain an IPv4 address from a relay.
      \ The relay\n   would forward the traffic received on this IPv4 address to the
      user\n   agent using IPv6.  Such user agents MAY use any mechanism to obtain\n
      \  addresses in relays, but, following the recommendations in ICE, it is\n   RECOMMENDED
      that user agents support STUN relay usage [6] [8] for\n   this purpose.\n   IPv4/IPv6
      user agents SHOULD gather both IPv4 and IPv6 addresses\n   using the ICE procedures
      to generate all their offers.  This way,\n   both IPv4-only and IPv6-only answerers
      will be able to generate a\n   mutually acceptable answer that establishes a
      session (having used\n   ICE to gather both IPv4 and IPv6 addresses in the offer
      reduces the\n   session establishment time because all answerers will find the
      offer\n   valid.)\n      Implementations are encouraged to use ICE; however,
      the normative\n      strength of the text above is left at a SHOULD since in
      some\n      managed networks (such as a closed enterprise network) it is\n      possible
      for the administrator to have control over the IP version\n      utilized in
      all nodes and thus deploy an IPv6-only network, for\n      example.  The use
      of ICE can be avoided for signaling messages\n      that stay within such managed
      networks.\n"
    title: 4.2.  Initial Offer
  - contents:
    - "4.3.  Connectivity Checks\n   Once the answerer has generated an answer following
      the ICE\n   procedures, both user agents perform the connectivity checks as\n
      \  specified by ICE.  These checks help prevent some types of flooding\n   attacks
      and allow user agents to discover new addresses that can be\n   useful in the
      presence of NATs.\n"
    title: 4.3.  Connectivity Checks
  title: 4.  The Media Layer
- contents:
  - "5.  Contacting Servers: Interaction of RFC 3263 and RFC 3484\n   RFC 3263 maps
    a SIP or SIPS URI to a set of DNS SRV records for the\n   various servers that
    can handle the URI.  The Expected Output, given\n   an Application Unique String
    (the URI) is one or more SRV records,\n   sorted by the \"priority\" field, and
    further ordered by the \"weight\"\n   field in each priority class.\n      The
    terms \"Expected Output\" and \"Application Unique String\", as\n      they are
    to be interpreted in the context of SIP, are defined in\n      Section 8 of RFC
    3263 [5].\n   To find a particular IP address to send the request to, the client\n
    \  will eventually perform an A or AAAA DNS lookup on a target.  As\n   specified
    in RFC 3263, this target will have been obtained through\n   NAPTR and SRV lookups,
    or if NAPTR and SRV lookup did not return any\n   records, the target will simply
    be the domain name of the Application\n   Unique String.  In order to translate
    the target to the corresponding\n   set of IP addresses, IPv6-only or dual-stack
    clients MUST use the\n   newer getaddrinfo() name lookup function, instead of
    gethostbyname()\n   [16].  The new function implements the Source and Destination
    Address\n   Selection algorithms specified in RFC 3484 [9], which is expected
    to\n   be supported by all IPv6 hosts.\n   The advantage of the additional complexity
    is that this technique\n   will output an ordered list of IPv6/IPv4 destination
    addresses based\n   on the relative merits of the corresponding source/destination
    pairs.\n   This will guarantee optimal routing.  However, the Source and\n   Destination
    Selection algorithms of RFC3484 are dependent on broad\n   operating system support
    and uniform implementation of the\n   application programming interfaces that
    implement this behavior.\n      Developers should carefully consider the issues
    described by Roy\n      et al. [19] with respect to address resolution delays
    and address\n      selection rules.  For example, implementations of getaddrinfo()\n
    \     may return address lists containing IPv6 global addresses at the\n      top
    of the list and IPv4 addresses at the bottom, even when the\n      host is only
    configured with an IPv6 local scope (e.g., link-\n      local) and an IPv4 address.
    \ This will, of course, introduce a\n      delay in completing the connection.\n"
  title: '5.  Contacting Servers: Interaction of RFC 3263 and RFC 3484'
- contents:
  - "6.  Security Considerations\n   This document describes how IPv4 SIP user agents
    can communicate with\n   IPv6 user agents (and vice versa).  To do this, it uses
    additional\n   protocols (STUN relay usage [6], ICE [7], SDP [2]); the threat
    model\n   of each such protocol is included in its respective document.  The\n
    \  procedures introduced in this document do not introduce the\n   possibility
    of any new security threats; however, they may make hosts\n   more amenable to
    existing threats.  Consider, for instance, a UAC\n   that allocates an IPv4 and
    an IPv6 address locally and inserts these\n   into the SDP.  Malicious user agents
    that may intercept the request\n   can mount a denial-of-service attack targeted
    to the different\n   network interfaces of the UAC.  In such a case, the UAC should
    use\n   mechanisms that protect confidentiality and integrity of the\n   messages,
    such as using the SIPS URI scheme as described in Section\n   26.2.2 of RFC3261
    [3], or secure MIME as described in Section 23 of\n   RFC3261 [3].  If HTTP Digest
    is used as an authentication mechanism\n   in SIP, then the UAC should ensure
    that the quality of protection\n   also includes the SDP payload.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   The authors would like to thank Mohamed Boucadair, Christine
    Fischer,\n   Cullen Jennings, Aki Niemi, Jonathan Rosenberg, and Robert Sparks
    for\n   discussions on the working group list that improved the quality of\n   this
    document.\n   Additionally, Francois Audet, Mary Barnes, Keith Drage, and Dale\n
    \  Worley provided invaluable comments as part of the working group Last\n   Call
    review process.  Jari Arkko, Lars Eggert, Tobias Gondrom, Suresh\n   Krishnan,
    and Tim Polk conducted an in-depth review of the work as\n   part of the IESG
    and Gen-ART reviews.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n         Description
      Protocol\", RFC 4566, July 2006.\n   [3]   Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [4]
      \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n         the
      Session Description Protocol (SDP)\", RFC 3264, June 2002.\n   [5]   Rosenberg,
      J. and H. Schulzrinne, \"Session Initiation Protocol\n         (SIP): Locating
      SIP Servers\", RFC 3263, June 2002.\n   [6]   Mahy, R., Matthews, P., and J.
      Rosenberg, \"Traversal Using\n         Relays around NAT (TURN): Relay Extensions
      to Session Traversal\n         Utilities for NAT (STUN)\", RFC 5766, April 2010.\n
      \  [7]   Rosenberg, J., \"Interactive Connectivity Establishment (ICE): A\n
      \        Protocol for Network Address Translator (NAT) Traversal for\n         Offer/Answer
      Protocols\", RFC 5245, April 2010.\n   [8]   Camarillo, G., Novo, O., and S.
      Perreault, \"Traversal Using\n         Relays around NAT (TURN) Extension for
      IPv6\", RFC 6156, April\n         2011.\n   [9]   Draves, R., \"Default Address
      Selection for Internet Protocol\n         version 6 (IPv6)\", RFC 3484, February
      2003.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [10]  Schulzrinne, H. and B. Volz, \"Dynamic
      Host Configuration\n         Protocol (DHCPv6) Options for Session Initiation
      Protocol (SIP)\n         Servers\", RFC 3319, July 2003.\n   [11]  Schulzrinne,
      H., \"Dynamic Host Configuration Protocol (DHCP-\n         for-IPv4) Option
      \ for Session Initiation Protocol (SIP)\n         Servers\", RFC 3361, August
      2002.\n   [12]  Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo,\n
      \        \"Best Current Practices for Third Party Call Control (3pcc) in\n         the
      Session Initiation Protocol (SIP)\", BCP 85, RFC 3725,\n         April 2004.\n
      \  [13]  Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n         \"RTP:
      A Transport Protocol for Real-Time Applications\", STD 64,\n         RFC 3550,
      July 2003.\n   [14]  Handley, M., Schulzrinne, H., Schooler, E., and J. Rosenberg,\n
      \        \"SIP: Session Initiation Protocol\", RFC 2543, March 1999.\n   [15]
      \ Gurbani, V., Boulton, C., and R. Sparks, \"Session Initiation\n         Protocol
      (SIP) Torture Test Messages for Internet Protocol\n         Version 6 (IPv6)\",
      RFC 5118, February 2008.\n   [16]  Shin, M-K., Hong, Y-G., Hagino, J., Savola,
      P., and E. Castro,\n         \"Application Aspects of IPv6 Transition\", RFC
      4038, March 2005.\n   [17]  Nordmark, E. and R. Gilligan, \"Basic Transition
      Mechanisms for\n         IPv6 Hosts and Routers\", RFC 4213, October 2005.\n
      \  [18]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing, \"Session\n         Traversal
      Utilities for NAT (STUN)\", RFC 5389, October 2008.\n   [19]  Roy, S., Durand,
      A., and J. Paugh, \"IPv6 Neighbor Discovery On-\n         Link Assumption Considered
      Harmful\", RFC 4943, September 2007.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Sample IPv4/IPv6 DNS File\n   A portion of a sample DNS zone file
    entry is reproduced below that\n   has both IPv4 and IPv6 addresses.  This entry
    corresponds to a proxy\n   server for the domain \"example.com\".  The proxy server
    supports the\n   Transmission Control Protocol (TCP) and User Datagram Protocol
    (UDP)\n   transport for both IPv4 and IPv6 networks.\n       ...\n       _sip._tcp
    \ SRV  20 0 5060 sip1.example.com\n                  SRV   0 0 5060 sip2.example.com\n
    \      _sip._udp  SRV  20 0 5060 sip1.example.com\n                  SRV   0 0
    5060 sip2.example.com\n       sip1 IN A     192.0.2.1\n       sip1 IN AAAA  2001:db8::1\n
    \      sip2 IN A     192.0.2.2\n       sip2 IN AAAA  2001:db8::2\n       ...\n"
  title: Appendix A.  Sample IPv4/IPv6 DNS File
- contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas
    \ 02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Karim El Malki\n
    \  Athonet\n   AREA Science Park\n   Padriciano 99\n   Trieste (TS)  34149\n   Italy\n
    \  EMail: karim@athonet.com\n   Vijay K. Gurbani\n   Bell Laboratories, Alcatel-Lucent\n
    \  1960 Lucent Lane\n   Rm 9C-533\n   Naperville, IL  60563\n   USA\n   Phone:
    +1 630 224 0216\n   EMail: vkg@bell-labs.com\n"
  title: Authors' Addresses
