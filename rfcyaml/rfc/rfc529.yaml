- title: __initial_text__
  contents:
  - "            NIC # 15372                                        K. Pogran\n  \
    \                 A Note on Protocol Synch Sequences\n   This note is motivated\
    \ by Wayne Hathaway's RFC 513 which comments on\n   the interpretation of the\
    \ TELNET SYNCH sequence (INS/Data Mark).  We\n   agree with Wayne's observation\
    \ that the phrase \"interesting things\",\n   as it appears and is explained in\
    \ the TELNET Protocol Document (NIC#\n   15372), is much too imprecise to appear\
    \ in a protocol specification.\n   However, we disagree with his proposal that\
    \ the interpretation of the\n   TELNET SYNCH sequence should be redefined.  Hathaway's\
    \ comments led\n   us to examine the notion of \"interesting things\" with respect\
    \ both to\n   TELNET protocol and to protocols built upon it.\n   We feel that\
    \ the definition of the TELNET SYNCH sequence in the\n   TELNET Protocol Document\
    \ is the proper one [1].  More important, we\n   feel that the (potential) difficulties\
    \ with respect to the TELNET\n   SYNCH sequence noted in RFC 513 are not the reflection\
    \ of a TELNET\n   design flaw but rather reflect misuse of the TELNET SYNCH sequence\
    \ by\n   \"higher level\" protocols (in particular FTP) that are based on\n  \
    \ TELNET.\n   The remainder of this note examines the notion of a synch sequence\n\
    \   and suggests an approach to the design of protocols which are to use\n   the\
    \ TELNET protocol as a basis.\n   The reason for defining a synch sequence for\
    \ a protocol is to provide\n   a mechanism by which signals, represented as characters,\
    \ that for one\n   reason or another are \"stuck\" in the pipeline between the\
    \ sender and\n   the protocol interpreter, can promptly be brought to the attention\
    \ of\n   the interpreter.  Flow through the pipeline is, of course, controlled\n\
    \   by the receiver; the process operating the interpreter may be doing\n   something\
    \ else at the moment, and may not be paying attention to the\n   incoming data\
    \ stream.  The sender would like to get the attention of\n   the receiving process,\
    \ to have it read its incoming data stream and\n   take action as directed by\
    \ the \"interesting\" characters in that\n   stream, which will, in general, be\
    \ protocol commands.  To accomplish\n   this, a \"SYNCH sequence\" is transmitted.\
    \  A synch sequence consists\n   of:\n      1. An \"out of band\" signal which\
    \ serves to get the attention of\n         the protocol interpreter; and\n   \
    \   2. An \"in band\" marker which serves to mark how much of the data\n     \
    \    stream is to be processed by the protocol interpreter in\n         response\
    \ to the \"out of band\" signal.\n   For the TELNET protocol the \"out of band\"\
    \ signal is the INS of Host-\n   Host Protocol and the \"in band\" marker is the\
    \ TELNET Data Mark\n   character (DM).  Ignoring for the moment the use of TELNET\
    \ as a basis\n   for higher level protocols (such as FTP), the class of characters\n\
    \   \"interesting\" to a TELNET interpreter is the set of TELNET commands\n  \
    \ (including the commands for option negotiation and sub-negotiation\n   [2]).\n\
    \   One might reasonably argue that this class could be enlarged by a\n   server\
    \ Host to include the set of signals of interest to the terminal\n   support software\
    \ of that particular Host.  For example, in case of\n   TENEX such a set would\
    \ include the \"terminal interrupt\" characters\n   enabled by the process reading\
    \ from the TELNET connection (e.g., ^C,\n   ^T, etc.).  Other hosts, such as Multics,\
    \ might look only for the\n   TELNET commands, such as Interrupt Process (IP),\
    \ Abort Output (AO),\n   etc.  Whether or not one chooses to consider additional\
    \ signals as\n   interesting during the processing of a TELNET SYNCH sequence\
    \ should\n   cause the implementer no problem:\n      He must treat all TELNET\
    \ commands as interesting by interpreting\n      them.  He may choose either to\
    \ ignore such additional signals or\n      to pass them on to the process; in\
    \ either case there is no\n      vagueness since the implementer knows which characters\
    \ his\n      terminal support software considers interesting.\n   The difficulty\
    \ noted in RFC 513 concerning the vagueness of\n   \"interesting things\" occurs\
    \ when a higher level protocol makes use of\n   the TELNET SYNCH sequence to force\
    \ commands of interest to it through\n   to its interpreter.  A higher level protocol\
    \ designed in such a way\n   represents a violation of the protocol layering discipline:\n\
    \      The TELNET SYNCH mechanism is being misused by attempting to give\n   \
    \   it meaning at two different levels of protocol.\n   The problem stems from\
    \ the fact that, in general, a (increasing)\n   number of different higher level\
    \ protocols can be designed with\n   TELNET as a base.  A TELNET interpreter has\
    \ no way of knowing the\n   higher level protocol interpreter (if any) to which\
    \ it is passing\n   characters, and therefore, can not tell which things are\n\
    \   \"interesting\" to the higher level protocol interpreter.  That is,\n   just\
    \ as an NCP should not have to know whether the data it handles is\n   for a TELNET\
    \ connection, an FTP data connection, etc., a TELNET\n   interpreter should not\
    \ be required to know the kind of process for\n   which it is handling characters.\
    \  This should, in fact, result in a\n   simplification of the design and implementation\
    \ of TELNET protocol\n   interpreters.\n   This difficulty can be resolved by\
    \ proper design of protocols that\n   make use of TELNET as a base.  In particular,\
    \ if in such a higher\n   level protocol it is important to be able to force commands\
    \ through\n   to the protocol interpreter, the higher level protocol should include\n\
    \   its own synch sequence:  i.e., an \"out of band\" signal used with an\n  \
    \ \"in band\" data mark.  The TELNET protocol provides the Interrupt\n   Process\
    \ character (IP) for use as an \"out of band\" signal.  A synch\n   sequence for\
    \ a protocol built upon TELNET would be:\n      1. Insert the TELNET IP control\
    \ character into the data stream;\n      2. Insert the higher level protocol data\
    \ mark character (HDM) into\n         the data stream following whatever higher\
    \ level protocol\n         commands are important at the time.\n   Receipt of\
    \ the IP TELNET command causes the higher level protocol\n   interpreter to be\
    \ interrupted, enabling it to scan the data stream\n   (up to and including the\
    \ HDM) for commands it considers important.\n   As an example, consider the case\
    \ of the File Transfer Protocol (RFC\n   454) and the problem of aborting a file\
    \ transfer in progress.  To\n   accomplish such an abort the FTP user (process)\
    \ should:\n      1. Send the TELNET IP character;\n      2. Send the TELNET SYNC\
    \ sequence, that is:\n         a. Send the TELNET Data Mark (DM);\n         b.\
    \ Send the Host-Host Protocol INS;\n      3. Send the FTP ABOR command; and\n\
    \      4. Send the FTP data mark character [3].\n   The user (or process acting\
    \ on his behalf) must transmit the TELNET\n   SYNCH sequence of step 2 above to\
    \ ensure that the TELNET IP gets\n   through to the server's TELNET interpreter.\n"
- title: Endnotes
  contents:
  - "Endnotes\n   [1] I.e., any TELNET commands appearing before the Data Mark are\
    \ to\n   be interpreted; the Data Mark is to be used to terminate the scan\n \
    \  initiated by the INS; characters that are not TELNET commands may be\n   discarded\
    \ or passed to the user process as the implementer sees fit.\n   [2] We support\
    \ Hathaway's proposal to fully parenthesize sub-\n   negotiations.  Further, we\
    \ believe that the \"closing parenthesis\"\n   should be a new command rather\
    \ than a second SB command; this will\n   aid the receiver in recovering from\
    \ errors, either in parsing at the\n   receiver or in generation at the transmitter.\
    \  We disagree with his\n   proposal that sub-negotiations be discarded when encountered\
    \ during\n   processing of a TELNET SYNCH.\n   [3] For FTP such a data mark character\
    \ has not yet been defined and,\n   in fact, may not be necessary under the constraint\
    \ that the FTP\n   command interpreter should look for exactly one command after\
    \ being\n   interrupted; this is consistent with the general command-reply\n \
    \  orientation of FTP.\n          [This RFC was put into machine readable form\
    \ for entry]\n     [into the online RFC archives by Helene Morin, Via Genie 12/1999]\n"
