- title: __initial_text__
  contents:
  - "                      Algorithm Agility Procedure\n           for the Resource\
    \ Public Key Infrastructure (RPKI)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the process that Certification Authorities\n\
    \   (CAs) and Relying Parties (RPs) participating in the Resource Public\n   Key\
    \ Infrastructure (RPKI) will need to follow to transition to a new\n   (and probably\
    \ cryptographically stronger) algorithm set.  The process\n   is expected to be\
    \ completed over a timescale of several years.\n   Consequently, no emergency\
    \ transition is specified.  The transition\n   procedure defined in this document\
    \ supports only a top-down migration\n   (parent migrates before children).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6916.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Requirements Notation  . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   4.  Key Rollover Steps for Algorithm Migration . . . . . . .\
    \ . . .  6\n     4.1.  Milestones Definition  . . . . . . . . . . . . . . . .\
    \ . .  6\n     4.2.  Process Overview . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n     4.3.  Phase 0  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  9\n       4.3.1.  Milestone 1  . . . . . . . . . . . . . . . . . . . . .  9\n\
    \     4.4.  Phase 1  . . . . . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \   4.5.  Phase 2  . . . . . . . . . . . . . . . . . . . . . . . . . 11\n    \
    \ 4.6.  Phase 3  . . . . . . . . . . . . . . . . . . . . . . . . . 12\n     4.7.\
    \  Phase 4  . . . . . . . . . . . . . . . . . . . . . . . . . 13\n     4.8.  Return\
    \ to Phase 0  . . . . . . . . . . . . . . . . . . . . 14\n   5.  Support for Multiple\
    \ Algorithms in the RPKI Provisioning\n       Protocol . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 14\n   6.  Validation of Multiple Instances of\
    \ Signed Products  . . . . . 15\n   7.  Revocation . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 16\n   8.  Key Rollover . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 17\n   9.  Repository Structure . . . . . . . . . . .\
    \ . . . . . . . . . . 17\n   10. Deprecating an Algorithm Suite . . . . . . .\
    \ . . . . . . . . . 17\n   11. Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 18\n   12. Acknowledgements . . . . . . . . . . . . . . . .\
    \ . . . . . . . 19\n   13. Normative References . . . . . . . . . . . . . . .\
    \ . . . . . . 19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Resource Public Key Infrastructure (RPKI) must accommodate\n\
    \   transitions between the public keys used by Certification Authorities\n  \
    \ (CAs).  Transitions of this sort are usually termed \"key rollover\".\n   Planned\
    \ key rollover will occur regularly throughout the life of the\n   RPKI, as each\
    \ CA changes its public keys, in a non-coordinated\n   fashion.  (By non-coordinated\
    \ we mean that the time at which each CA\n   elects to change its keys is locally\
    \ determined, not coordinated\n   across the RPKI.)  Moreover, because a key change\
    \ might be\n   necessitated by suspected private key compromise, one can never\n\
    \   assume coordination of these events among all of the CAs in the RPKI.\n  \
    \ In an emergency key rollover, the old certificate is revoked and a\n   new certificate\
    \ with a new key is issued.  The mechanisms to perform\n   a key rollover in RPKI\
    \ (either planned or in an emergency), while\n   maintaining the same algorithm\
    \ suite, are covered in [RFC6489].\n   This document describes the mechanism to\
    \ perform a key rollover in\n   the RPKI due to the migration to a new signature\
    \ algorithm suite.  It\n   specifies the process that CAs and Relying Parties\
    \ (RPs)\n   participating in the RPKI will need to follow to transition to a new\n\
    \   (and probably cryptographically stronger) algorithm set.  The process\n  \
    \ is expected to be completed over a timescale of months or years.\n   Consequently,\
    \ no emergency transition is specified.  The transition\n   procedure defined\
    \ in this document supports only a top-down migration\n   (parent migrates before\
    \ children).\n   A signature-algorithm suite encompasses both a signature algorithm\n\
    \   (with a specified key size range) and a one-way hash algorithm.  It\n   is\
    \ anticipated that the RPKI will require the adoption of updated key\n   sizes\
    \ and/or different algorithm suites over time.  This document\n   treats the adoption\
    \ of a new hash algorithm while retaining the\n   current signature algorithm\
    \ as equivalent to an algorithm migration,\n   and requires the CA to change its\
    \ key.  Migration to a new algorithm\n   suite will be required in order to maintain\
    \ an acceptable level of\n   cryptographic security and protect the integrity\
    \ of certificates,\n   Certificate Revocation Lists (CRLs), and signed objects\
    \ in the RPKI.\n   All of the data structures in the RPKI explicitly identify\
    \ the\n   signature and hash algorithms being used.  However, experience has\n\
    \   demonstrated that the ability to represent algorithm IDs is not\n   sufficient\
    \ to enable migration to new algorithm suites (algorithm\n   agility).  One also\
    \ must ensure that protocols, infrastructure\n   elements, and operational procedures\
    \ also accommodate the migration\n   from one algorithm suite to another.  Algorithm\
    \ migration is expected\n   to be very infrequent, and it will require the support\
    \ of a \"current\"\n   and \"next\" suite for a prolonged interval, probably several\
    \ years.\n   This document defines how entities in the RPKI execute a planned\
    \ CA\n   key rollover when the algorithm suite changes.  The description\n   covers\
    \ actions by CAs, repository operators, and RPs.  It describes\n   the behavior\
    \ required of both CAs and RPs to make such key changes\n   work in the RPKI context,\
    \ including how the RPKI repository system is\n   used to support key rollover.\n\
    \   This document does not specify any algorithm suite per se.  The RPKI\n   Certificate\
    \ Policy (CP) [RFC6484] mandates the use of the algorithms\n   defined in [RFC6485]\
    \ by CAs and RPs.  When an algorithm transition is\n   initiated, [RFC6485] MUST\
    \ be updated (as defined in Section 4.1 of\n   this document) to redefine the\
    \ required algorithms for compliant RPKI\n   CAs and RPs under the CP.  The CP\
    \ will not change as a side effect of\n   algorithm transition, and thus the policy\
    \ OID in RPKI certificates\n   will not change.\n   For each algorithm transition,\
    \ an additional document (the algorithm\n   transition timetable) MUST be published\
    \ (as a BCP) to define the\n   dates for each milestone defined in this document.\
    \  It will define\n   dates for the phase transitions consistent with the descriptions\n\
    \   provided in Section 4.  It also will describe how the RPKI community\n   will\
    \ measure the readiness of CAs and RPs to transition to each\n   phase.  CAs publish\
    \ certificates, CRLs, and other signed objects\n   under the new algorithm suite\
    \ as the transition progresses.  This\n   provides visibility into the deployment\
    \ of the new algorithm suite,\n   enabling the community to evaluate deployment\
    \ progress.  The\n   transition procedure allows CAs to remove old certificates,\
    \ CRLs, and\n   signed products after the twilight date, which provides the ability\n\
    \   to observe and measure the withdrawal of the old algorithm suite.\n   Thus,\
    \ the phases defined in this document enable the community to\n   evaluate the\
    \ progress of the transition.  The timetable document will\n   also describe procedures\
    \ to amend the timetable if problems arise in\n   implementing later phases of\
    \ the transition.  It is RECOMMENDED that\n   the timetable document be developed\
    \ by representatives of the RPKI\n   community, e.g., IANA, Internet Registries,\
    \ and network operators.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", \"NOT RECOMMENDED\" and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This document assumes that the reader is familiar with the\
    \ terms and\n   concepts described in \"Internet X.509 Public Key Infrastructure\n\
    \   Certificate and Certificate Revocation List (CRL) Profile\" [RFC5280],\n \
    \  \"X.509 Extensions for IP Addresses and AS Identifiers\" [RFC3779], and\n \
    \  \"A Profile for Resource Certificate Repository Structure\" [RFC6481].\n  \
    \ Additional terms and conventions used in examples are provided below.\n   Algorithm\
    \ migration:  A planned transition from one signature and\n               hash\
    \ algorithm to a new signature and hash algorithm.\n   Algorithm Suite A:  The\
    \ \"current\" algorithm suite used for hashing\n               and signing; used\
    \ in examples in this document.\n   Algorithm Suite B:  The \"next\" algorithm\
    \ suite used for hashing and\n               signing; used in examples in this\
    \ document.\n   CA X:       The CA that issued CA Y's certificate (i.e., CA Y's\n\
    \               parent); used in examples in this document.\n   CA Y:       The\
    \ non-leaf CA; used in examples in this document.\n   CA Z:       A CA that is\
    \ a \"child\" of CA Y; used in examples in this\n               document.\n  \
    \ Correspond: Two certificates issued under different algorithm suites\n     \
    \          correspond to one another if they are issued to the same\n        \
    \       entity by the same CA and bind identical Internet Number\n           \
    \    Resources (INRs) to that entity.  Two CRLs correspond if\n              \
    \ they are issued by the same CA and enumerate\n               corresponding certificates.\
    \  Two signed objects (other\n               than manifests) correspond if they\
    \ are verified using\n               corresponding end-entity (EE) certificates\
    \ and they\n               contain the same encapsulated Context Info field. \
    \ Two\n               manifests correspond if they encompass corresponding\n \
    \              certificates, Route Origination Authorizations (ROAs),\n      \
    \         CRLs, and other signed objects.  (The term \"equivalent\"\n        \
    \       is used synonymously when referring to such RPKI signed\n            \
    \   products.)\n   Leaf CA:    A CA that issues only EE certificates.\n   Non-Leaf\
    \ CA:  A CA that issues certificates to other CAs.\n   PoP (proof of possession):\
    \  Execution of a protocol that demonstrates\n               to an issuer that\
    \ a subject requesting a certificate\n               possesses the private key\
    \ corresponding to the public key\n               in the certificate request submitted\
    \ by the subject.\n   ROA:        Route Origination Authorization, as defined\
    \ in [RFC6482].\n   Signed product set (also called set or product set):  A collection\
    \ of\n               certificates, signed objects, a CRL and a manifest that\n\
    \               are associated by virtue of being verifiable under the\n     \
    \          same parent CA certificate\n"
- title: 4.  Key Rollover Steps for Algorithm Migration
  contents:
  - "4.  Key Rollover Steps for Algorithm Migration\n   The \"current\" RPKI algorithm\
    \ suite (Suite A) is defined in the RPKI\n   CP document, by reference to [RFC6485].\
    \  When a migration of the RPKI\n   algorithm suite is needed, the first step\
    \ MUST be an update of\n   [RFC6485] to define the new algorithm suite.  The algorithm\n\
    \   transition timeline document MUST also be published (as a BCP) to\n   inform\
    \ the community of the dates selected for milestones in the\n   transition process,\
    \ as described in Section 4.1.\n"
- title: 4.1.  Milestones Definition
  contents:
  - "4.1.  Milestones Definition\n   CA Ready Algorithm B Date:  After this date,\
    \ all non-leaf CAs MUST be\n               ready to process a request from a child\
    \ CA to issue a\n               certificate under the Algorithm Suite B.  All\
    \ CAs\n               publishing an [RFC6490] Trust Anchor Locator (TAL) for\n\
    \               Algorithm Suite A MUST also publish the correspondent TAL\n  \
    \             for Algorithm Suite B.\n   CA Go Algorithm B Date:  After this date,\
    \ all CAs MUST have reissued\n               all their signed product sets under\
    \ Algorithm Suite B.\n   RP Ready Algorithm B Date:  After this date, all RPs\
    \ MUST be prepared\n               to process signed material issued under Algorithm\
    \ Suite\n               B.\n   Twilight Date:  After this date, a CA MAY cease\
    \ issuing signed\n               products under Algorithm Suite A.  Also, after\
    \ this date,\n               an RP MAY cease to validate signed materials issued\
    \ under\n               Algorithm Suite A.\n   End-Of-Life (EOL) Date:  After\
    \ this date, Algorithm Suite A MUST be\n               deprecated using the process\
    \ in Section 10, and all\n               Algorithm Suite A TALs MUST be removed\
    \ from their\n               publication points.\n"
- title: 4.2.  Process Overview
  contents:
  - "4.2.  Process Overview\n   The migration process described in this document involves\
    \ a series of\n   steps that MUST be executed in chronological order by CAs and\
    \ RPs.\n   The only milestone at which both CAs and RPs take action at the same\n\
    \   time is the EOL Date.  Due to the decentralized nature of the RPKI\n   infrastructure,\
    \ it is expected that an algorithm transition will span\n   several years.\n \
    \  In order to facilitate the transition, CAs will start issuing\n   certificates\
    \ using Algorithm B in a hierarchical, top-down fashion.\n   In our example, CA\
    \ Y will issue certificates using Algorithm Suite B\n   only after CA X has started\
    \ to do so (CA Y Ready Algorithm B Date >\n   CA X Ready Algorithm B Date).  This\
    \ ordered transition avoids the\n   issuance of \"mixed\" suite CA certificates,\
    \ e.g., a CA certificate\n   signed using Suite A that contains a key from Suite\
    \ B.  In the RPKI,\n   a CA MUST NOT sign a CA certificate carrying a subject\
    \ key that\n   corresponds to an algorithm suite that differs from the one used\
    \ to\n   sign the certificate.  (X.509 accommodates such mixed algorithm\n   certificates,\
    \ but this process avoids using that capability.)  A non-\n   top-down transition\
    \ approach would require the use of such mixed-mode\n   certificates and would\
    \ lead to exponential growth of the RPKI\n   repository.  Also, because the RPKI\
    \ CP mandates PoP for certificate\n   requests, it is not possible for a CA to\
    \ request a certificate for\n   Algorithm Suite B until its parent CA supports\
    \ that suite.  (See\n   Section 5 for more details.)\n   The algorithm agility\
    \ model described here does not prohibit a CA\n   from issuing an EE certificate\
    \ with a subject public key from a\n   different algorithm suite, if that certificate\
    \ is not used to verify\n   repository objects.  This exception to the mixed algorithm\
    \ suite\n   certificate rule is allowed because an EE certificate that is not\n\
    \   used to verify repository objects does not interfere with the ability\n  \
    \ of RPs to download and verify repository content.  As noted above,\n   every\
    \ CA in the RPKI is required to perform a PoP check for the\n   subject public\
    \ key when issuing a certificate.  In general, a subject\n   cannot assume that\
    \ a CA is capable of supporting a different\n   algorithm.  However, if the subject\
    \ is closely affiliated with the\n   CA, it is reasonable to assume that there\
    \ are ways for the subject to\n   know whether the CA can support a request to\
    \ issue an EE certificate\n   containing a specific, different public key algorithm.\
    \  This document\n   does not specify how a subject can determine whether a CA\
    \ is capable\n   of issuing a mixed suite EE certificate, because it anticipates\
    \ that\n   such certificates will be issued only in contexts where the subject\n\
    \   and CA are sufficiently closely affiliated (for example, an ISP\n   issuing\
    \ certificates to devices that it manages).\n   The following figure gives an\
    \ overview of the process:\n   Process for RPKI CAs:\n     Phase 0    Phase 1\
    \   Phase 2             Phase 4  Phase 0\n   --x--------x---------x-------------------x--------x---------\n\
    \     ^        ^         ^                   ^        ^\n     |        |     \
    \    |                   |        |\n    (1)      (2)       (3)              \
    \   (5)      (6)\n   Process for RPKI RPs:\n               Phase 0           \
    \   Phase 3   Phase 4  Phase 0\n   -------------------------------x---------x--------x---------\n\
    \     ^                            ^         ^        ^\n     |              \
    \              |         |        |\n    (1)                          (4)    \
    \   (5)      (6)\n   (1) RPKI algorithm document is updated, and the algorithm\n\
    \       transition timeline document is issued\n   (2) CA Ready Algorithm B Date\n\
    \   (3) CA Go Algorithm B Date\n   (4) RP Ready Algorithm B Date\n   (5) Twilight\
    \ Date\n   (6) End-Of-Life (EOL) Date\n   Each of these milestones is discussed\
    \ in the next section when each\n   phase of the transition process is described.\n\
    \   Two situations have been identified that motivate pausing or rolling\n   back\
    \ the transition process.  The first situation arises if the RPKI\n   community\
    \ is not ready to make the transition.  For example, many CAs\n   might not be\
    \ prepared to issue signed products under Suite B, or many\n   RPs might not be\
    \ ready to process Suite B products.  Under these\n   circumstances, the timetable\
    \ MUST be reissued, postponing the date\n   for the phase in question and pushing\
    \ back the dates for later\n   phases.  The other situation arises if, during\
    \ the transition,\n   serious concerns arise about the security of the Suite B\
    \ algorithms.\n   Such concerns would motivate terminating the transition and\
    \ rolling\n   back signed products, i.e., reverting to Suite A.  In this case,\
    \ the\n   timetable MUST be republished, and the RPKI algorithm document MUST\n\
    \   be superseded.  The phase descriptions below allude to these two\n   situations,\
    \ as appropriate.\n"
- title: 4.3.  Phase 0
  contents:
  - "4.3.  Phase 0\n   Phase 0 is the steady-state phase of the process; throughout\
    \ this\n   phase, Algorithm Suite A is the only supported algorithm suite in the\n\
    \   RPKI.  Phase 0 is also the steady state for the RPKI.\n   During Phase 0,\
    \ CAs X, Y, and Z are required to generate signed\n   product sets using only\
    \ Algorithm Suite A.  Also, RPs are required to\n   validate signed product sets\
    \ issued using only Algorithm Suite A.\n   The following figure shows an example\
    \ of the structure of signed\n   objects in the repository, indicating the algorithm\
    \ suites in use and\n   showing the relationships between three CAs (X, Y, and\
    \ Z) that form a\n   certification chain.  Vertical alignment in the figure indicates\n\
    \   objects signed by the same CA using the same private key.  The\n   differences\
    \ in horizontal indentation also represent the use of\n   different publication\
    \ points for objects signed by different CAs.\n   The characters \"|->\" are used\
    \ for visualization purposes for both the\n   signing relationship and the publication\
    \ point change.  For example,\n   the objects CA-Y-Certificate-Algorithm-Suite-A,\
    \ CA-X-CRL-Algorithm-\n   Suite-A, and CA-X-Signed-Objects-Algorithm-Suite-A are\
    \ all signed\n   using the private key corresponding to CA-X-Certificate-Algorithm-\n\
    \   Suite-A and published at CA X's corresponding publication point.\n   CA-X-Certificate-Algorithm-Suite-A\
    \ (Cert-XA)\n           |-> CA-Y-Certificate-Algorithm-Suite-A (Cert-YA)\n   \
    \                |-> CA-Z-Certificate-Algorithm-Suite-A (Cert-ZA)\n          \
    \                 |-> CA-Z-CRL-Algorithm-Suite-A (CRL-ZA)\n                  \
    \         |-> CA-Z-Signed-Objects-Algorithm-Suite-A\n                   |-> CA-Y-CRL-Algorithm-Suite-A\
    \ (CRL-YA)\n                   |-> CA-Y-Signed-Objects-Algorithm-Suite-A\n   \
    \        |-> CA-X-CRL-Algorithm-Suite-A (CRL-XA)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-A\n\
    \   Note: Cert-XA represents the certificate for CA X, which is signed\n   using\
    \ Algorithm Suite A.\n"
- title: 4.3.1.  Milestone 1
  contents:
  - "4.3.1.  Milestone 1\n   The first milestone initiates the migration process.\
    \  It updates\n   [RFC6485] with the following definitions for the RPKI:\n   o\
    \  Algorithm Suite A\n   o  Algorithm Suite B\n   Additionally, the new algorithm\
    \ transition timeline document MUST be\n   published with the following information:\n\
    \   o  CA Ready Algorithm B Date\n   o  CA Go Algorithm B Date\n   o  RP Ready\
    \ Algorithm B Date\n   o  Twilight Date\n   o  EOL Date\n   o  Readiness metrics\
    \ for CAs and RPs in each phase\n   Each date specified here is assumed to be\
    \ at one minute after\n   midnight, UTC.  No finer granularity time specification\
    \ is required\n   or supported.\n"
- title: 4.4.  Phase 1
  contents:
  - "4.4.  Phase 1\n   Phase 1 starts at the CA Ready Algorithm B Date.  During Phase\
    \ 1, all\n   non-leaf CAs MUST be ready to process a request from a child CA to\n\
    \   issue or revoke a certificate using Algorithm Suite B.  If it is\n   determined\
    \ that a substantial number of CAs are not ready, the\n   algorithm transition\
    \ timeline document MUST be reissued, as noted in\n   Section 4.2.  However, CAs\
    \ that are capable of issuing Suite B\n   certificates may continue to do so,\
    \ if requested by their child CAs.\n   As this phase does not require any RPs\
    \ to process signed objects\n   under Suite B, and since Suite B product sets\
    \ SHOULD be stored at\n   independent publication points, there is no adverse\
    \ impact on RPs.\n   If the Suite B algorithm is deemed unsuitable, the algorithm\n\
    \   transition timeline and the algorithm specification documents MUST be\n  \
    \ replaced, and Algorithm Suite B MUST be deprecated using the process\n   described\
    \ in Section 10.\n   Because the transition will happen using a hierarchical,\
    \ top-down\n   model, a child CA will be able to issue certificates using Algorithm\n\
    \   Suite B only after its parent CA has issued its own.  The RPKI\n   provisioning\
    \ protocol can identify if a parent CA is capable of\n   issuing certificates\
    \ using Algorithm Suite B and can identify the\n   corresponding algorithm suite\
    \ in each Certificate Signing Request\n   (CSR; see Section 5).  During much of\
    \ this phase, the Suite B product\n   tree will be incomplete, i.e., not all CAs\
    \ will have issued products\n   under Suite B.  Thus, for production purposes,\
    \ RPs MUST fetch and\n   validate only Suite A products.  Suite B products should\
    \ be fetched\n   and processed only for testing purposes.\n   The following figure\
    \ shows the status of repository entries for the\n   three example CAs during\
    \ this phase.  Two distinct certificate chains\n   are maintained, and CA Z has\
    \ not yet requested any material using\n   Algorithm Suite B.\n   CA-X-Certificate-Algorithm-Suite-A\
    \ (Cert-XA)\n           |-> CA-Y-Certificate-Algorithm-Suite-A (Cert-YA)\n   \
    \                |-> CA-Z-Certificate-Algorithm-Suite-A (Cert-ZA)\n          \
    \                 |-> CA-Z-CRL-Algorithm-Suite-A (CRL-ZA)\n                  \
    \         |-> CA-Z-Signed-Objects-Algorithm-Suite-A\n                   |-> CA-Y-CRL-Algorithm-Suite-A\
    \ (CRL-YA)\n                   |-> CA-Y-Signed-Objects-Algorithm-Suite-A\n   \
    \        |-> CA-X-CRL-Algorithm-Suite-A (CRL-XA)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-A\n\
    \   CA-X-Certificate-Algorithm-Suite-B (Cert-XB)\n           |-> CA-Y-Certificate-Algorithm-Suite-B\
    \ (Cert-YB)\n                   |-> CA-Y-CRL-Algorithm-Suite-B (CRL-YB)\n    \
    \               |-> CA-Y-Signed-Objects-Algorithm-Suite-B\n           |-> CA-X-CRL-Algorithm-Suite-B\
    \ (CRL-XB)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-B\n"
- title: 4.5.  Phase 2
  contents:
  - "4.5.  Phase 2\n   Phase 2 starts at the CA Go Algorithm B Date.  At the start\
    \ of this\n   phase, each signed product set MUST be available using both Algorithm\n\
    \   Suite A and Algorithm Suite B.  Thus, prior to the start of this\n   phase,\
    \ every CA MUST ensure that there is a Suite B product\n   corresponding to each\
    \ Suite A product that the CA has issued.\n   Throughout this phase, each CA MUST\
    \ maintain this correspondence.\n   During this phase, RPs MUST be prepared to\
    \ validate sets issued using\n   Algorithm Suite A and MAY be prepared to validate\
    \ sets issued using\n   the Algorithm Suite B.\n   If it is determined that a\
    \ substantial number of CAs are not ready,\n   the algorithm transition timeline\
    \ document MUST be reissued, as noted\n   in Section 4.2.  (Since the processing\
    \ requirement for RPs here is a\n   MAY, if RPs have problems with Suite B products,\
    \ this does not\n   require pushing back the Phase 2 milestone, but it does motivate\n\
    \   delaying the start of Phase 3.)  CAs that are capable of publishing\n   products\
    \ under Suite B MAY continue to do so.  Phase 2, like Phase 1,\n   does not require\
    \ any RPs to process signed objects under Suite B.\n    Also, Suite B products\
    \ SHOULD be stored at independent publication\n   points so that there is no adverse\
    \ impact on RPs that are not\n   prepared to process Suite B products.  (See Section\
    \ 9 for additional\n   details.)  If the Suite B algorithm is deemed unsuitable,\
    \ the\n   algorithm transition timeline and the algorithm specification\n   documents\
    \ MUST be replaced, and Algorithm Suite B MUST be deprecated\n   using the process\
    \ described in Section 10.\n   It is RECOMMENDED that RPs that can process Algorithm\
    \ Suite B fetch\n   and validate Suite B products.  RPs that are not ready to\
    \ process\n   Suite B products MUST continue to make use of Suite A products.\
    \  An\n   RP that elects to validate signed product sets using both Algorithm\n\
    \   Suite A and Algorithm Suite B should expect the same results.  If\n   there\
    \ are discrepancies when evaluating corresponding signed product\n   sets, successful\
    \ validation of either product set is acceptable.  A\n   detailed analysis of\
    \ the validation of multiple instances of signed\n   objects is included in Section\
    \ 6.\n   The following figure shows the status of the repository entries for\n\
    \   the three example CAs throughout this phase, where all signed objects\n  \
    \ are available using both algorithm suites.\n   CA-X-Certificate-Algorithm-Suite-A\
    \ (Cert-XA)\n           |-> CA-Y-Certificate-Algorithm-Suite-A (Cert-YA)\n   \
    \                |-> CA-Z-Certificate-Algorithm-Suite-A (Cert-ZA)\n          \
    \                 |-> CA-Z-CRL-Algorithm-Suite-A (CRL-ZA)\n                  \
    \         |-> CA-Z-Signed-Objects-Algorithm-Suite-A\n                   |-> CA-Y-CRL-Algorithm-Suite-A\
    \ (CRL-YA)\n                   |-> CA-Y-Signed-Objects-Algorithm-Suite-A\n   \
    \        |-> CA-X-CRL-Algorithm-Suite-A (CRL-XA)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-A\n\
    \   CA-X-Certificate-Algorithm-Suite-B (Cert-XB)\n           |-> CA-Y-Certificate-Algorithm-Suite-B\
    \ (Cert-YB)\n                   |-> CA-Z-Certificate-Algorithm-Suite-B (Cert-ZB)\n\
    \                           |-> CA-Z-CRL-Algorithm-Suite-B (CRL-ZB)\n        \
    \                   |-> CA-Z-Signed-Objects-Algorithm-Suite-B\n              \
    \     |-> CA-Y-CRL-Algorithm-Suite-B (CRL-YB)\n                   |-> CA-Y-Signed-Objects-Algorithm-Suite-B\n\
    \           |-> CA-X-CRL-Algorithm-Suite-B (CRL-XB)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-B\n"
- title: 4.6.  Phase 3
  contents:
  - "4.6.  Phase 3\n   Phase 3 starts at the RP Ready Algorithm B Date.  During this\
    \ phase,\n   all signed product sets are available using both algorithm suites,\n\
    \   and all RPs MUST be able to validate them.  (The correspondence\n   between\
    \ Suite A and Suite B products was required for Phase 2 and was\n   maintained\
    \ throughout that phase.  The same requirements apply\n   throughout this phase.)\
    \  It is RECOMMENDED that, in preparation for\n   Phase 4, RPs retrieve and process\
    \ Suite B product sets first and\n   treat them as the preferred product sets\
    \ for validation throughout\n   this phase.  Thus, an RP SHOULD try to validate\
    \ the sets of signed\n   products retrieved from the Algorithm Suite B repository\
    \ first.\n   If a substantial number of RPs are unable to process product sets\n\
    \   signed with Suite B, the algorithm transition timeline document MUST\n   be\
    \ reissued, pushing back the date for this and later milestones, as\n   discussed\
    \ in Section 4.2.  Since the Suite B products SHOULD be\n   published at distinct\
    \ publication points, RPs that cannot process\n   Suite B products can be expected\
    \ to revert to the Suite A products\n   that still exist.  If the Suite B algorithm\
    \ is deemed unsuitable, the\n   algorithm transition timeline and the algorithm\
    \ specification\n   documents MUST be replaced and Algorithm Suite B MUST be deprecated\n\
    \   using the process described in Section 10.\n   There are no changes to the\
    \ CA behavior throughout this phase.\n"
- title: 4.7.  Phase 4
  contents:
  - "4.7.  Phase 4\n   Phase 4 starts at the Twilight Date.  At that date, Algorithm\
    \ A is\n   labeled as \"old\" and the Algorithm B is labeled as \"current\".\n\
    \   During this phase, all signed product sets MUST be issued using\n   Algorithm\
    \ Suite B and MAY be issued using Algorithm Suite A.  All\n   signed products\
    \ sets issued using Suite B MUST be published at their\n   corresponding publication\
    \ points.  Signed products sets issued using\n   Suite A might not be available\
    \ at their corresponding publication\n   points.  Every RP MUST validate signed\
    \ product sets using Suite B.\n   RPs MAY validate signed product sets using Suite\
    \ A.  However, RPs\n   SHOULD NOT assume that the collection of Suite A product\
    \ sets is\n   complete.  Thus, RPs SHOULD make use of only Suite B products sets.\n\
    \   (See Section 6 for further details.)\n   If it is determined that many RPs\
    \ are not capable of processing the\n   new algorithm suite, the algorithm transition\
    \ timeline document MUST\n   be reissued, pushing back the date for this and the\
    \ next milestone.\n   The document MUST require the CA not to remove Suite A product\
    \ sets\n   if this phase is delayed.  If Algorithm Suite B is deemed unsuitable,\n\
    \   the algorithm transition timeline and the algorithm specification\n   documents\
    \ MUST be replaced, Algorithm Suite B MUST be deprecated\n   using the process\
    \ described in Section 10, and CAs MUST NOT remove\n   Suite A product sets. \
    \ At this stage, RPs are still capable of\n   processing Suite A signed products,\
    \ so the RPKI is still viable.\n   The following figure describes a possible status\
    \ for the repositories\n   of the example CAs.\n   CA-X-Certificate-Algorithm-Suite-A\
    \ (Cert-XA)\n           |-> CA-Y-Certificate-Algorithm-Suite-A (Cert-YA)\n   \
    \                |-> CA-Y-CRL-Algorithm-Suite-A (CRL-YA)\n                   |->\
    \ CA-Y-Signed-Objects-Algorithm-Suite-A\n           |-> CA-X-CRL-Algorithm-Suite-A\
    \ (CRL-XA)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-A\n   CA-X-Certificate-Algorithm-Suite-B\
    \ (Cert-XB)\n           |-> CA-Y-Certificate-Algorithm-Suite-B (Cert-YB)\n   \
    \                |-> CA-Z-Certificate-Algorithm-Suite-B (Cert-ZB)\n          \
    \                 |-> CA-Z-CRL-Algorithm-Suite-A (CRL-ZB)\n                  \
    \         |-> CA-Z-Signed-Objects-Algorithm-Suite-B\n                   |-> CA-Y-CRL-Algorithm-Suite-A\
    \ (CRL-YB)\n                   |-> CA-Y-Signed-Objects-Algorithm-Suite-B\n   \
    \        |-> CA-X-CRL-Algorithm-Suite-A (CRL-XB)\n           |-> CA-X-Signed-Objects-Algorithm-Suite-B\n"
- title: 4.8.  Return to Phase 0
  contents:
  - "4.8.  Return to Phase 0\n   The EOL Date triggers the return to Phase 0 (steady\
    \ state).  At this\n   point, the old algorithm suite, Algorithm Suite A, MUST\
    \ be deprecated\n   using the process described in Section 10.\n   This phase\
    \ closes the loop, as the new algorithm suite (Algorithm\n   Suite B) is now the\
    \ only required algorithm suite in RPKI.  From this\n   point forward, this suite\
    \ is referred to as Algorithm Suite A.\n   If it is determined that many RPs are\
    \ not capable of processing the\n   new algorithm suite, the algorithm transition\
    \ timeline document MUST\n   be reissued, pushing back the date for this milestone.\n"
- title: 5.  Support for Multiple Algorithms in the RPKI Provisioning Protocol
  contents:
  - "5.  Support for Multiple Algorithms in the RPKI Provisioning Protocol\n   The\
    \ migration described in this document is a top-down process where\n   two synchronization\
    \ issues need to be solved between child and parent\n   CAs:\n   o  A child CA\
    \ needs to identify which algorithm suites are supported\n      by its parent\
    \ CA.\n   o  A child CA needs to signal which algorithm suite should be used by\n\
    \      its parent CA to sign a CSR.\n   The RPKI provisioning protocol [RFC6492]\
    \ supports multiple algorithms\n   suites by implementing different resource classes\
    \ for each suite.\n   Several different resource classes also may use the same\
    \ algorithm\n   suite for different resource sets.\n   A child CA that wants to\
    \ identify which algorithm suites are\n   supported by its parent CA MUST perform\
    \ the following tasks:\n   1.  Establish a provisioning protocol session with\
    \ its parent CA.\n   2.  Perform a \"list\" command as described in Section 3.3.1\
    \ of\n       [RFC6492].\n   3.  From the Payload in the \"list response\" resource\
    \ class, extract\n       the \"issuer's certificate\" for each class.  The algorithm\
    \ suite\n       for each class will match the algorithm suite used to issue the\n\
    \       corresponding \"issuer's certificate\" (as specified in the\n       SubjectPublicKeyInfo\
    \ field of that certificate).\n   A child CA that wants to specify an algorithm\
    \ suite to its parent CA\n   (e.g., in a certificate request) MUST perform the\
    \ following tasks:\n   1.  Perform the tasks described above to identify the algorithm\n\
    \       suites supported by its parent CA and the resource class\n       corresponding\
    \ to each suite.\n   2.  Identify the corresponding resource class in the appropriate\n\
    \       provisioning protocol command (e.g., \"issue\" or \"revoke\").\n   Upon\
    \ receipt of a certificate request from a child CA, a parent CA\n   will verify\
    \ the PoP of the private key.  If a child CA requests the\n   issuing of a certificate\
    \ using an algorithm suite that does not match\n   a resource class, the PoP validation\
    \ will fail and the request will\n   not be performed.\n"
- title: 6.  Validation of Multiple Instances of Signed Products
  contents:
  - "6.  Validation of Multiple Instances of Signed Products\n   During Phases 1,\
    \ 2, 3, and 4, two algorithm suites will be valid\n   simultaneously in RPKI.\
    \  In this section, we describe the RP behavior\n   when validating corresponding\
    \ signed products using different\n   algorithm suites.\n   During Phase 1, two\
    \ corresponding instances MAY be available for each\n   signed product, one signed\
    \ under Algorithm Suite A and one under\n   Algorithm Suite B.  As noted in Section\
    \ 4.4, in this phase there is a\n   preference for Suite A product sets.  All\
    \ products are available\n   under Suite A, while only some products may be available\
    \ under Suite\n   B.  For production purposes, an RP MAY fetch and validate only\
    \ Suite\n   A products.  Suite B products SHOULD be fetched and validated only\n\
    \   for test purposes.  When product sets exist under both suites, they\n   should\
    \ yield equivalent results, to facilitate testing.  (It is not\n   possible to\
    \ directly compare Suite A and Suite B product sets,\n   because certificates,\
    \ CRLs, and manifests will appear syntactically\n   different.  However, the output\
    \ of the process, i.e., the ROA\n   payloads -- Autonomous System number and address\
    \ prefix data --\n   SHOULD match, modulo timing issues.)\n   During Phases 2\
    \ and 3 of this process, two corresponding instances of\n   all signed products\
    \ MUST be available to RPs.  As noted in\n   Section 4.5, it is RECOMMENDED that\
    \ Suite B capable RPs fetch and\n   validate Suite B products sets during Phase\
    \ 2.  If an RP encounters\n   validation problems with the Suite B products, it\
    \ SHOULD revert to\n   using Suite A products.  RPs that are Suite B capable MAY\
    \ fetch both\n   product sets and compare the results (e.g., ROA outputs) for\
    \ testing.\n   In Phase 3, all RPs MUST be Suite B capable and MUST fetch Suite\
    \ B\n   product sets.  If an RP encounters problems with Suite B product\n   sets,\
    \ it can revert to Suite A products.  RPs encountering such\n   problems SHOULD\
    \ contact the relevant repository maintainers (e.g.,\n   using the mechanism defined\
    \ in [RFC6493] to report problems.)\n   During Phase 4, only Suite B product sets\
    \ are required to be present\n   for all RPKI entities, as per Section 4.7.  Thus,\
    \ RPs SHOULD retrieve\n   and validate only these product sets.  Retrieval of\
    \ Suite A products\n   sets may yield an incomplete set of signed products and\
    \ is NOT\n   RECOMMENDED.\n"
- title: 7.  Revocation
  contents:
  - "7.  Revocation\n   The algorithm migration process mandates the maintenance of\
    \ two\n   parallel but equivalent certification hierarchies during Phases 2 and\n\
    \   3 of the process.  During these phases, a CA MUST revoke and request\n   revocation\
    \ of certificates consistently under both algorithm suites.\n   When not performing\
    \ a key rollover operation (as described in\n   Section 8), a CA requesting the\
    \ revocation of its certificate during\n   these two phases MUST perform that\
    \ request for both algorithm suites\n   (A and B).  A non-leaf CA SHOULD NOT verify\
    \ that its child CAs comply\n   with this requirement.  Note that a CA MUST request\
    \ revocation of its\n   certificate relative to a specific algorithm suite using\
    \ the\n   mechanism described in Section 5\n   During Phase 1, a CA that revokes\
    \ a certificate under Suite A SHOULD\n   revoke the corresponding certificate\
    \ under Suite B if that\n   certificate exists.  During Phase 4, a CA that revokes\
    \ a certificate\n   under Suite B SHOULD revoke the corresponding certificate\
    \ under Suite\n   A if that certificate exists.\n   During Phase 1, a CA may revoke\
    \ certificates under Suite B without\n   revoking them under Suite A, since the\
    \ Suite B products are for test\n   purposes.  During Phase 4, a CA may revoke\
    \ certificates issued under\n   Suite A without revoking them under Suite B, since\
    \ Suite A products\n   are being deprecated.\n"
- title: 8.  Key Rollover
  contents:
  - "8.  Key Rollover\n   Key rollover (without algorithm changes) is effected independently\n\
    \   for each algorithm suite and MUST follow the process described in\n   [RFC6489].\n"
- title: 9.  Repository Structure
  contents:
  - "9.  Repository Structure\n   The two parallel hierarchies that will exist during\
    \ the transition\n   process SHOULD have independent publications points.  The\
    \ repository\n   structures for each algorithm suite are described in [RFC6481].\n"
- title: 10.  Deprecating an Algorithm Suite
  contents:
  - "10.  Deprecating an Algorithm Suite\n   To deprecate an algorithm suite, the\
    \ following process MUST be\n   executed by every CA in the RPKI:\n   1.  Each\
    \ CA MUST cease issuing certificates under the suite.  This\n       means that\
    \ any request for a CA certificate from a child will be\n       rejected, e.g.,\
    \ sending an \"error_response\" message with error\n       code \"request - no\
    \ such resource class\", as defined in [RFC6492].\n   2.  Each CA MUST cease generating\
    \ signed products, except the CRL and\n       manifest, under the deprecated algorithm\
    \ suite.\n   3.  Each CA MUST revoke the EE certificates for all signed products\n\
    \       that it has issued under the deprecated algorithm suite.  The CA\n   \
    \    SHOULD delete these products from its publication point to avoid\n      \
    \ burdening RPs with the need to download and process these\n       products.\n\
    \   4.  Each CA MUST revoke all CA certificates that it has issued under\n   \
    \    the deprecated algorithm suite.\n   5.  Each CA SHOULD remove all CA certificates\
    \ that it has issued\n       under the deprecated algorithm suite.\n   6.  Each\
    \ CA that publishes a TAL under the deprecated algorithm suite\n       MUST removed\
    \ it from the TAL's publication point.\n   7.  Each CA SHOULD continue to maintain\
    \ the publication point for the\n       deprecated algorithm suite at least until\
    \ the CRL nextUpdate.\n       This publication point MUST contain only the CRL\
    \ and a manifest\n       for that publication point.  This behavior provides a\
    \ window in\n       which RPs may be able to become aware of the revoked status\
    \ of\n       the signed products that have been deleted.\n   8.  Each RP MUST\
    \ remove any TALs that is has published under the\n       deprecated algorithm\
    \ suite.\n   CAs in the RPKI hierarchy may become aware of the deprecation of\
    \ the\n   algorithm suite at different times and may execute the procedure\n \
    \  above asynchronously relative to one another.  Thus, for example, a\n   CA\
    \ may request revocation of its CA certificate, only to learn that\n   the certificate\
    \ has already been revoked by the issuing CA.  The\n   revocation of a CA certificate\
    \ makes the CRL and manifest issued\n   under it incapable of validation.  The\
    \ asynchronous execution of this\n   procedure likely will result in transient\
    \ \"inconsistencies\" among the\n   publication points associated with the deprecated\
    \ algorithm suite.\n   However, these inconsistencies should yield \"fail-safe\"\
    \ results,\n   i.e., the objects signed under the deprecated suite should be\n\
    \   rejected by RPs.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   An algorithm transition in RPKI should be a\
    \ very infrequent event,\n   and it requires wide community consensus.  The events\
    \ that may lead\n   to an algorithm transition may be related to a weakness of\
    \ the\n   cryptographic strength of the algorithm suite in use by RPKI, which\n\
    \   is normal to happen over time.  The procedures described in this\n   document\
    \ mean that it will take years to complete an algorithm\n   transition.  During\
    \ that time, the RPKI system will be vulnerable to\n   any cryptographic weakness\
    \ that may have triggered this procedure\n   (e.g., a downgrade attack).\n   This\
    \ document does not describe an emergency mechanism for algorithm\n   migration.\
    \  Due to the distributed nature of RPKI and the very large\n   number of CAs\
    \ and RPs, the authors do not believe it is feasible to\n   effect an emergency\
    \ algorithm migration procedure.\n   If a CA does not complete its migration to\
    \ the new algorithm suite as\n   described in this document (after the EOL of\
    \ the \"old\" algorithm\n   suite), its signed product set will no longer be valid.\n\
    \   Consequently, the RPKI may, at the end of Phase 4, have a smaller\n   number\
    \ of valid signed products than before starting the process.\n   Conversely, an\
    \ RP that does not follow this process will lose the\n   ability to validate signed\
    \ products issued under the new algorithm\n   suite.  The resulting incomplete\
    \ view of routing information from the\n   RPKI (as a result of a failure by CAs\
    \ or RPs to complete the\n   transition) could degrade routing in the public Internet.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The authors would like to acknowledge the work of the\
    \ SIDR working\n   group co-chairs (Sandra Murphy, Chris Morrow, and Alexey Melnikov)\
    \ as\n   well as the contributions given by Geoff Huston, Arturo Servin, Brian\n\
    \   Weis, Terry Manderson, Brian Dickson, David Black, and Danny\n   McPherson.\n"
- title: 13.  Normative References
  contents:
  - "13.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3779]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for\
    \ IP\n              Addresses and AS Identifiers\", RFC 3779, June 2004.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008.\n   [RFC6481]  Huston, G., Loomans, R., and G. Michaelson, \"A Profile\
    \ for\n              Resource Certificate Repository Structure\", RFC 6481,\n\
    \              February 2012.\n   [RFC6482]  Lepinski, M., Kent, S., and D. Kong,\
    \ \"A Profile for Route\n              Origin Authorizations (ROAs)\", RFC 6482,\
    \ February 2012.\n   [RFC6484]  Kent, S., Kong, D., Seo, K., and R. Watro, \"\
    Certificate\n              Policy (CP) for the Resource Public Key Infrastructure\n\
    \              (RPKI)\", BCP 173, RFC 6484, February 2012.\n   [RFC6485]  Huston,\
    \ G., \"The Profile for Algorithms and Key Sizes for\n              Use in the\
    \ Resource Public Key Infrastructure (RPKI)\",\n              RFC 6485, February\
    \ 2012.\n   [RFC6489]  Huston, G., Michaelson, G., and S. Kent, \"Certification\n\
    \              Authority (CA) Key Rollover in the Resource Public Key\n      \
    \        Infrastructure (RPKI)\", BCP 174, RFC 6489, February 2012.\n   [RFC6490]\
    \  Huston, G., Weiler, S., Michaelson, G., and S. Kent,\n              \"Resource\
    \ Public Key Infrastructure (RPKI) Trust Anchor\n              Locator\", RFC\
    \ 6490, February 2012.\n   [RFC6492]  Huston, G., Loomans, R., Ellacott, B., and\
    \ R. Austein, \"A\n              Protocol for Provisioning Resource Certificates\"\
    ,\n              RFC 6492, February 2012.\n   [RFC6493]  Bush, R., \"The Resource\
    \ Public Key Infrastructure (RPKI)\n              Ghostbusters Record\", RFC 6493,\
    \ February 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roque Gagliano\n   Cisco Systems\n   Avenue des Uttins\
    \ 5\n   Rolle  1180\n   Switzerland\n   EMail: rogaglia@cisco.com\n   Stephen\
    \ Kent\n   BBN Technologies\n   10 Moulton St.\n   Cambridge, MA  02138\n   USA\n\
    \   EMail: kent@bbn.com\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street,\
    \ Suite 106\n   Fairfax, VA  22031\n   USA\n   EMail: turners@ieca.com\n"
