- title: __initial_text__
  contents:
  - "            Network Working Group               N. Borenstein, Bellcore\n   \
    \         Request for Comments: 1343                        June 1992\n      \
    \                  A User Agent Configuration Mechanism\n                    \
    \   For Multimedia Mail Format Information\n          Status of This Memo\n  \
    \          This is an informational memo for  the  Internet  community,\n    \
    \        and  requests  discussion  and suggestions for improvements.\n      \
    \      This  memo  does   not   specify   an   Internet   standard.\n        \
    \    Distribution of this memo is unlimited.\n          Abstract\n           \
    \ This memo suggests a  file  format  to  be  used  to  inform\n            multiple\
    \   mail   reading  user  agent  programs  about  the\n            locally-installed\
    \ facilities for handling  mail  in  various\n            formats.  The  mechanism\
    \ is explicitly designed to work with\n            mail systems based Internet\
    \ mail as defined  by  RFC's  821,\n            822,  934,  1049,  1113,  and\
    \ the Multipurpose Internet Mail\n            Extensions, known as MIME.  However,\
    \ with some extensions it\n            could  probably be made to work for X.400-based\
    \ mail systems\n            as well.  The format and mechanism are proposed in\
    \ a  manner\n            that  is  generally  operating-system independent.  However,\n\
    \            certain  implementation  details  will  inevitably   reflect\n  \
    \          operating  system differences, some of which will have to be\n    \
    \        handled in a uniform manner for each operating system.  This\n      \
    \      memo  makes  such  situations explicit, and, in an appendix,\n        \
    \    suggests  a  standard  behavior  under  the  UNIX  operating\n          \
    \  system.\n          Introduction\n            The electronic mail world is in\
    \ the midst  of  a  transition\n            from  single-part  text-only mail\
    \ to multi-part, multi-media\n            mail.  In support of this transition,\
    \ various extensions  to\n            RFC  821  and  RFC  822  have  been proposed\
    \ and/or adopted,\n            notably including  MIME  [RFC-1341].  Various \
    \ parties  have\n            demonstrated  extremely  high-functionality multimedia\
    \ mail,\n            but the problem of mail interchange between  different  user\n\
    \            agents has been severe.  In general, only text messages have\n  \
    \          been shared between user agents  that  were  not  explicitly\n    \
    \        designed   to   work   together.   This  limitation  is  not\n      \
    \      compatible with a smooth transition to  a  multi-media  mail\n        \
    \    world.\n            One approach to this transition is to modify diverse\
    \ sets of\n            mail  reading user agents so that, when they need to display\n\
    \            mail of an  unfamiliar  (non-text)  type,  they  consult  an\n  \
    \          external  file  for information on how to display that file.\n    \
    \        That file might say, for example, that if  the  content-type\n      \
    \      RFC 1343       Multimedia Mail Configuration       June 1992\n        \
    \    of  a  message  is \"foo\" it can be displayed to the user via\n        \
    \    the \"displayfoo\" program.\n            This approach means that, with a\
    \  one-time  modification,  a\n            wide  variety  of  mail  reading  programs\
    \  can be given the\n            ability to display a  wide  variety  of  types\
    \  of  message.\n            Moreover,  extending  the  set of media types supported\
    \ at a\n            site becomes a simple matter  of  installing  a  binary  and\n\
    \            adding  a  single  line to a configuration file.  Crucial to\n  \
    \          this scheme, however, is that all of the user  agents  agree\n    \
    \        on  a common representation and source for the configuration\n      \
    \      file.  This memo proposes such a common representation.\n          Location\
    \ of Configuration Information\n            Each  user  agent  must  clearly \
    \ obtain  the  configuration\n            information  from a common location,\
    \ if the same information\n            is to be  used  to  configure  all  user\
    \  agents.   However,\n            individual  users  should  be  able to override\
    \ or augment a\n            site's configuration.  The configuration information\
    \  should\n            therefore  be  obtained  from a designated set of locations.\n\
    \            The overall  configuration  will  be  obtained  through  the\n  \
    \          virtual  concatenation  of  several individual configuration\n    \
    \        files known as mailcap files.  The configuration information\n      \
    \      will  be obtained from the FIRST matching entry in a mailcap\n        \
    \    file, where \"matching\" depends on both a  matching  content-\n        \
    \    type   specification,   an   entry   containing   sufficient\n          \
    \  information for the purposes of the  application  doing  the\n            searching,\
    \ and the success of any test in the \"test=\" field,\n            if present.\n\
    \            The precise location of  the  mailcap  files  is  operating-\n  \
    \          system dependent.  A standard location for UNIX is specified\n    \
    \        in Appendix A.\n          Overall Format of a Mailcap File\n        \
    \    Each mailcap file consists of a set of entries that describe\n          \
    \  the  proper  handling  of  one media type at the local site.\n            For\
    \ example, one line might tell how to display a message in\n            Group\
    \ III fax format.  A mailcap file consists of a sequence\n            of such\
    \ individual entries, separated by newlines (according\n            to  the operating\
    \ system's newline conventions). Blank lines\n            and lines that start\
    \ with the \"#\" character (ASCII  35)  are\n            considered  comments,\
    \  and are ignored.  Long entries may be\n            continued on multiple lines\
    \ if each non-terminal  line  ends\n            with  a  backslash  character\
    \ ('\\', ASCII 92), in which case\n            the multiple lines are to be treated\
    \  as  a  single  mailcap\n            entry.   Note that for such \"continued\"\
    \ lines, the backslash\n            must be the last character on the line to\
    \ be continued.\n            Thus the overall format of a mailcap file is given,\
    \  in  the\n            modified BNF of RFC 822, as:\n            RFC 1343   \
    \    Multimedia Mail Configuration       June 1992\n                 Mailcap-File\
    \ = *Mailcap-Line\n                 Mailcap-Line = Comment / Mailcap-Entry\n \
    \                Comment = NEWLINE  /  \"#\" *CHAR NEWLINE\n                 NEWLINE\
    \ = <newline as defined by OS convention>\n            Note that the above specification\
    \ implies that comments must\n            appear  on  lines all to themselves,\
    \ with a \"#\" character as\n            the first character on each comment line.\n\
    \          Format of a Mailcap Entry\n            Each mailcap entry consists\
    \ of a number of fields, separated\n            by semi-colons.  The first two\
    \ fields are required, and must\n            occur in the specified  order.  \
    \ The  remaining  fields  are\n            optional, and may appear in any order.\n\
    \            The first field is the  content-type,  which  indicates  the\n  \
    \          type of data this mailcap entry describes how to handle.  It\n    \
    \        is to be matched against the type/subtype  specification  in\n      \
    \      the \"Content-Type\" header field of an Internet mail message.\n      \
    \      If the subtype is specified as \"*\", it is intended to  match\n      \
    \      all subtypes of the named content-type.\n            The second field,\
    \ view-command, is a  specification  of  how\n            the  message  or  body\
    \ part can be viewed at the local site.\n            Although the syntax of this\
    \ field is  fully  specified,  the\n            semantics  of  program  execution\
    \  are  necessarily somewhat\n            operating system dependent.  UNIX  semantics\
    \  are  given  in\n            Appendix A.\n            The optional fields, which\
    \ may be given in any order, are as\n            follows:\n            -- The\
    \ \"compose\" field may be used to specify a program that\n            can  be\
    \ used to compose a new body or body part in the given\n            format.  Its\
    \ intended  use  is  to  support  mail  composing\n            agents  that  support\
    \  the  composition of multiple types of\n            mail using external composing\
    \  agents.  As  with  the  view-\n            command,  the  semantics  of program\
    \ execution are operating\n            system dependent, with UNIX semantics specified\
    \ in  Appendix\n            A.   The result of the composing program may be data\
    \ that is\n            not yet suitable for mail transport -- that is,  a  Content-\n\
    \            Transfer-Encoding may need to be applied to the data.\n         \
    \   -- The \"composetyped\" field  is  similar  to  the  \"compose\"\n       \
    \     field, but is to be used when the composing program needs to\n         \
    \   specify the Content-type header field to be applied  to  the\n           \
    \ composed  data.   The  \"compose\"  field  is  simpler, and is\n           \
    \ preferred for use with existing (non-mail-oriented) programs\n            for\
    \  composing  data  in a given format.  The \"composetyped\"\n            field\
    \ is necessary when the  Content-type  information  must\n            RFC 1343\
    \       Multimedia Mail Configuration       June 1992\n            include  auxilliary\
    \  parameters, and the composition program\n            must then know enough\
    \ about mail formats to  produce  output\n            that includes the mail type\
    \ information.\n            -- The \"edit\" field may be used to specify  a  program\
    \  that\n            can be used to edit a body or body part in the given format.\n\
    \            In many cases,  it  may  be  identical  in  content  to  the\n  \
    \          \"compose\"  field,  and shares the operating-system dependent\n  \
    \          semantics for program execution.\n            -- The \"print\" field\
    \ may be used to specify a  program  that\n            can  be  used  to  print\
    \ a message or body part in the given\n            format.  As with the view-command,\
    \ the semantics of  program\n            execution   are   operating   system\
    \  dependent,  with  UNIX\n            semantics specified in Appendix A.\n  \
    \          -- The \"test\" field  may  be  used  to  test  some  external\n  \
    \          condition  (e.g.  the  machine  architecture,  or the window\n    \
    \        system in use) to determine whether or not the mailcap  line\n      \
    \      applies.   It  specifies  a  program  to be run to test some\n        \
    \    condition.  The semantics of  execution  and  of  the  value\n          \
    \  returned by the test program are operating system dependent,\n            with\
    \ UNIX semantics specified in Appendix A.   If  the  test\n            fails,\
    \   a   subsequent  mailcap  entry  should  be  sought.\n            Multiple\
    \ test fields are not permitted -- since a  test  can\n            call a program,\
    \ it can already be arbitrarily complex.\n            -- The \"needsterminal\"\
    \ field indicates that the view-command\n            must  be  run on an interactive\
    \ terminal.  This is needed to\n            inform  window-oriented  user  agents\
    \  that  an  interactive\n            terminal  is  needed.  (The decision is\
    \ not left exclusively\n            to the view-command because in some circumstances\
    \ it may not\n            be  possible  for  such programs to tell whether or\
    \ not they\n            are on interactive terminals.)   The  needsterminal  command\n\
    \            should be assumed to apply to the compose and edit commands,\n  \
    \          too, if they exist.  Note that this is NOT a test -- it is a\n    \
    \        requirement for the environment in which the program will be\n      \
    \      executed, and should  typically  cause  the  creation  of  a\n        \
    \    terminal  window when not executed on either a real terminal\n          \
    \  or a terminal window.\n            -- The \"copiousoutput\" field indicates\
    \ that the output  from\n            the  view-command  will be an extended stream\
    \ of output, and\n            is to be interpreted as advice to the UA (User \
    \ Agent  mail-\n            reading  program)  that the output should be either\
    \ paged or\n            made scrollable. Note that  it  is  probably  a  mistake\
    \  if\n            needsterminal and copiousoutput are both specified.\n     \
    \       --  The  \"description\"  field  simply  provides  a   textual\n     \
    \       description,  optionally  quoted, that describes the type of\n       \
    \     data, to be used optionally by mail  readers  that  wish  to\n         \
    \   describe the data before offering to display it.\n            RFC 1343   \
    \    Multimedia Mail Configuration       June 1992\n            -- The \"x11-bitmap\"\
    \ field names a file, in X11 bitmap  (xbm)\n            format,  which  points\
    \  to an appropriate icon to be used to\n            visually denote the presence\
    \ of this kind of data.\n            -- Any other fields beginning with \"x-\"\
    \ may be included  for\n            local   or   mailer-specific   extensions\
    \  of  this  format.\n            Implementations should simply ignore all  such\
    \  unrecognized\n            fields  to  permit  such  extensions, some of which\
    \ might be\n            standardized in a future version of this document.\n \
    \           Some of the fields above, such as \"needsterminal\", apply  to\n \
    \           the  actions of the view-command, edit-command, and compose-\n   \
    \         command, alike.  In some unusual  cases,  this  may  not  be\n     \
    \       desirable,  but  differentiation  can  be  accomplished  via\n       \
    \     separate mailcap entries, taking advantage of the fact  that\n         \
    \   subsequent  mailcap  entries  are  searched  if  an  earlier\n           \
    \ mailcap entry does not provide enough information:\n                 application/postscript;\
    \ ps-to-terminal %s; \\\n                     needsterminal\n                \
    \ application/postscript; ps-to-terminal %s; \\\n                     compose=idraw\
    \ %s\n            In RFC 822 modified BNF, the following grammar  describes  a\n\
    \            mailcap entry:\n                 Mailcap-Entry = typefield ; view-command\n\
    \                                     [\";\" 1#field]\n                 typefield\
    \ = propertype / implicit-wild\n                 propertype = type \"/\" wildsubtype\n\
    \                 implicitwild = type\n                 wildsubtype = subtype\
    \ / \"*\"\n                 view-command = mtext\n                 mtext = *mchar\n\
    \                 mchar = schar / qchar\n                 schar = * <any CHAR\
    \ except\n                            \";\", \"\\\", and CTLS>\n             \
    \    qchar = \"\\\" CHAR ; may quote any char\n                 field = flag /\
    \ namedfield\n                 namedfield = fieldname \"=\" mtext\n          \
    \       flag = \"needsterminal\"   ; All these literals are to\n            RFC\
    \ 1343       Multimedia Mail Configuration       June 1992\n                 \
    \     / \"copiousoutput\"   ; be interpreted as\n                      / x-token\
    \           ; case-insensitive\n                 fieldname =    / \"compose\"\
    \      ;Also all of these\n                                / \"composetyped\"\
    \ ;are case-insensitive.\n                                / \"print\"\n      \
    \                          / \"edit\"\n                                / \"test\"\
    \n                                / \"x11-bitmap\"\n                         \
    \       / \"description\"\n                                / x-token\n       \
    \     Note that  \"type\",  \"subtype\", and \"x-token\" are defined  in\n   \
    \         MIME.   Note  also  that  while  the  definition  of \"schar\"\n   \
    \         includes the percent sign, \"%\", this character has a special\n   \
    \         meaning  in  at least the UNIX semantics, and will therefore\n     \
    \       need to be quoted as a qchar to be used literally.\n          Appendix\
    \ A:  Implementation Details for UNIX\n            Although this memo fully specifies\
    \ a  syntax  for  \"mailcap\"\n            files,  the  semantics  of the mailcap\
    \ file are of necessity\n            operating-system dependent in four respects.\
    \   In  order  to\n            clarify  the  intent,  and to promote a standard\
    \ usage, this\n            appendix proposes a UNIX semantics for these four cases.\
    \  If\n            a  mailcap  mechanism  is  implemented  on non-UNIX systems,\n\
    \            similar semantic decisions should be made and published.\n      \
    \      Location of the Mailcap File(s)\n            For UNIX, a path search of\
    \ mailcap files is specified.   The\n            default  path  search is specified\
    \ as including at least the\n            following:\n            $HOME/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap\n\
    \            However,  this  path  may  itself  be  overridden  by a path\n  \
    \          specified by the MAILCAPS environment variable.\n            Semantics\
    \ of executable commands\n            Several portions of a mailcap entry specify\
    \ commands  to  be\n            executed.   In  particular,  the mandatory second\
    \ field, the\n            view-command, takes a command to  be  executed,  as\
    \  do  the\n            optional print, edit, test, and compose fields.\n    \
    \        On a UNIX system, such commands will each be  a  full  shell\n      \
    \      command  line, including the path name for a program and its\n        \
    \    arguments.   (Because  of  differences  in  shells  and  the\n          \
    \  implementation  and  behavior  of  the  same  shell from one\n            system\
    \ to another, it is specified that the command line  be\n            intended\
    \  as  input  to  the  Bourne  shell, i.e. that it is\n            implicitly\
    \ preceded by \"/bin/sh -c \" on the command line.)\n            RFC 1343    \
    \   Multimedia Mail Configuration       June 1992\n            The two characters\
    \ \"%s\", if used, will be  replaced  by  the\n            name  of  a file for\
    \ the actual mail body data.  In the case\n            of the edit adn view-command,\
    \ the body part will  be  passed\n            to  this  command  as  standard\
    \  input  unless  one  or more\n            instances of \"%s\" appear in the\
    \ view-command, in which  case\n            %s  will  be  replaced  by the name\
    \ of a file containing the\n            body part, a file which may have to be\
    \  created  before  the\n            view-command  program  is  executed.  (Such\
    \  files cannot be\n            presumed to continue to exist after the view-command\
    \ program\n            exits.  Thus a view-command that wishes to exit and continue\n\
    \            processing in the background should take care  to  save  the\n  \
    \          data  first.)   In  the case of the compose and composetyped\n    \
    \        commands, %s should be replaced by the name  of  a  file  to\n      \
    \      which  the  composed  data should be written by the programs\n        \
    \    named in the compose or composedtyped commands.   Thus,  the\n          \
    \  calling  program  will  look  in that file later in order to\n            retrieve\
    \ the composed data. If %s does  not  appear  in  the\n            compose  or\
    \  composetyped  commands,  then the composed data\n            will be assumed\
    \ to be written by the composing  programs  to\n            standard output.\n\
    \            Furthermore, any occurrence of \"%t\" will be replaced by  the\n\
    \            content-type  and  subtype  specification.  (That is, if the\n  \
    \          content-type is \"text/plain\", then %t will  be  replaced  by\n  \
    \          \"text/plain\".)   A  literal % character may be quoted as \\%.\n \
    \           Finally, named parameters from the Content-type field may be\n   \
    \         placed  in the command execution line using \"%{\" followed by\n   \
    \         the parameter name and a closing \"}\" character.  The  entire\n   \
    \         parameter  should  appear as a single command line argument,\n     \
    \       regardless of embedded spaces.  Thus, if the message  has  a\n       \
    \     Content-type line of:\n                 Content-type:  multipart/mixed;\
    \ boundary=42\n            and the mailcap file has a line of:\n             \
    \    multipart/*; /usr/local/bin/showmulti \\\n                   %t %{boundary}\n\
    \            then the equivalent  of  the  following  command  should  be\n  \
    \          executed:\n                 /usr/local/bin/showmulti multipart/mixed\
    \ 42\n            Semantics of the \"test\" field\n            The \"test\" field\
    \ specifies a program  to  be  used  to  test\n            whether  or  not the\
    \ current mailcap line applies.  This can\n            be used, for example, to\
    \  have  a  mailcap  line  that  only\n            applies if the X window system\
    \ is running, or if the user is\n            running on a SPARCstation with a\
    \ /dev/audio.  The  value  of\n            the  \"test\"  field  is  a  program\
    \  to  run  to  test such a\n            condition.  The precise program to run\
    \ and arguments to give\n            it are determined as specified in the previous\
    \ section.  The\n            RFC 1343       Multimedia Mail Configuration    \
    \   June 1992\n            test program should return an  exit  code  of  zero\
    \  if  the\n            condition is true, and a non-zero code otherwise.\n  \
    \          Semantics of the \"compose\" field\n            On UNIX, the composing\
    \ program is expected to produce a data\n            stream  for  such  a  body\
    \ part as its standard output.  The\n            program will be executed with\
    \  the  command  line  arguments\n            determined  as  specified  above.\
    \  The data returned via its\n            standard output will be given a Content-Type\
    \ field that  has\n            no  supplementary  parameters.   For  example,\
    \ the following\n            mailcap entry:\n                 audio/basic; /usr/local/bin/showaudio\
    \ %t\n                  compose = /usr/local/bin/recordaudio\n            would\
    \  result  in  tagging  the   data   composed   by   the\n            \"recordaudio\"\
    \ program as:\n                 Content-Type: audio/basic\n            If this\
    \ is unacceptable --  for  example,  in  the  case  of\n            multipart\
    \  mail  a  \"boundary\" parameter is required -- then\n            the  \"compose\"\
    \  field  cannot   be   used.    Instead,   the\n            \"composetyped\"\
    \ field should be used in the mailcap file.\n            Semantics of the \"composetyped\"\
    \ field\n            The \"composetyped\" filed is much like the  \"compose\"\
    \  field,\n            except  that  it  names a composition program that produces,\n\
    \            not raw data, but data that includes a MIME-conformant  type\n  \
    \          specification.   The  program  will  be  executed  with  the\n    \
    \        command line arguments determined as specified  above.   The\n      \
    \      data  returned  via  its  standard  output must begin with a\n        \
    \    Content-Type header, followed optionally by other  Content-*\n          \
    \  headers,  and  then  by  a  blank  line  and  the data.  For\n            example,\
    \ the following mailcap entry:\n                 multipart/mixed; /usr/local/bin/showmulti\
    \ %t \\\n                   %{boundary}; \\\n                   composetyped =\
    \ /usr/local/bin/makemulti\n            would result in executing  the  \"makemulti\"\
    \  program,  which\n            would  be  expected  to  begin its output with\
    \ a line of the\n            form:\n                 Content-Type: multipart/mixed;\
    \ boundary=foobar\n            Note that a composition program need not encode\
    \ binary  data\n            in base64 or quoted-printable. It remains the responsibility\n\
    \            of the software calling the composition  program  to  encode\n  \
    \          such  data  as  necessary.   However, if a composing program\n    \
    \        does  encode  data,  which  is  not  encouraged,  it  should\n      \
    \      announce  that fact using a Content-Transfer-Encoding header\n        \
    \    RFC 1343       Multimedia Mail Configuration       June 1992\n          \
    \  in the  standard  manner  defined  by  MIME.   Because  such\n            encodings\
    \  must  be  announced by such a header, they are an\n            option only\
    \  for  composetyped  programs,  not  for  compose\n            programs.\n  \
    \        Appendix B: Sample Mailcap File\n            The following is an example\
    \ of a mailcap file for UNIX  that\n            demonstrates  most  of  the  syntax\
    \  above.     It  contains\n            explanatory comments where necessary.\n\
    \                 # Mailcap file for Bellcore lab 214.\n                 #\n \
    \                # The next line sends \"richtext\" to the richtext\n        \
    \         program\n                 text/richtext; richtext %s; copiousoutput\n\
    \                 #\n                 # Next, basic u-law audio\n            \
    \     audio/*; showaudio; test=/usr/local/bin/hasaudio\n                 #\n \
    \                # Next, use the xview program to handle several image\n     \
    \            formats\n                 image/*; xview %s; test=/usr/local/bin/RunningX\n\
    \                 #\n                 # The ATOMICMAIL interpreter uses curses,\
    \ so needs a\n                 terminal\n                 application/atomicmail;\
    \ /usr/local/bin/atomicmail %s; \\\n                     needsterminal\n     \
    \            #\n                 # The next line handles Andrew format,\n    \
    \             #   if ez and ezview are installed\n                 x-be2; /usr/andrew/bin/ezview\
    \ %s; \\\n                    print=/usr/andrew/bin/ezprint %s ; \\\n        \
    \            compose=/usr/andrew/bin/ez -d %s \\;\n                    edit=/usr/andrew/bin/ez\
    \ -d %s; \\;\n                    copiousoutput\n                 #\n        \
    \         # The next silly example demonstrates the use of\n                 quoting\n\
    \                 application/*; echo \"This is \\\\\"%t\\\\\" but \\\n      \
    \              is 50 \\% Greek to me\" \\; cat %s; copiousoutput\n          Appendix\
    \ C:  A Note on Format Translation\n            It has been suggested that another\
    \ function  of  a  mailcap-\n            like  mechanism  might  be  to specify\
    \ the locally available\n            tools for document format translation.  \
    \  For  example,  the\n            file could designate a program for translating\
    \ from format A\n            to format B, another for translating from format\
    \ B to format\n            C,   and  finally  a  mechanism  for  displaying  format\
    \  C.\n            Although this mechanism would be somewhat  richer  than  the\n\
    \            current  mailcap  file,  and  might  conceivably  also  have\n  \
    \          utility at the message  transport  layer,  it  significantly\n    \
    \        RFC 1343       Multimedia Mail Configuration       June 1992\n      \
    \      complicates the processing effort necessary for a user agent\n        \
    \    that simply wants to display a message in format  A.   Using\n          \
    \  the  current,  simpler,  mailcap scheme, a single line could\n            tell\
    \ such a user agent to  display  A-format  mail  using  a\n            pipeline\
    \  of translators and the C-format viewer.  This memo\n            resists  the\
    \  temptation   to   complicate   the   necessary\n            processing  for\
    \ a user agent to accomplish this task.  Using\n            the mailcap format\
    \ defined here, it  is  only  necessary  to\n            find  the  correct  single\
    \  line  in  a mailcap file, and to\n            execute the command given in\
    \ that line.\n          References\n            [RFC 822]  Crocker, D.,  \"Standard\
    \ for the  format  of  ARPA\n            Internet   text  messages\", RFC  822,\
    \  UDEL, August, 1982.\n            [RFC  1341]   Borenstein,   N.,   and   N.\
    \   Freed,    \"MIME\n            (Multipurpose  Internet  Mail  Extensions):\
    \  Mechanisms  for\n            Specifying and Describing the  Format  of  Internet\
    \  Message\n            Bodies\", RFC 1341, Bellcore, June, 1992.\n          Acknowledgements\n\
    \            The author  wishes  to  thank  Malcolm  Bjorn  Gillies,  Dan\n  \
    \          Heller,  Olle  Jaernefors, Keith Moore, Luc Rooijakkers, and\n    \
    \        the other members of the IETF task force on mail  extensions\n      \
    \      for  their comments on earlier versions of this draft.    If\n        \
    \    other acknowledgements were neglected, please let  me  know,\n          \
    \  as it was surely accidental.\n          Security Considerations\n         \
    \   Security issues are not  discussed in this memo.    However,\n           \
    \ the  use  of  the mechanisms described in this memo can make\n            it\
    \ easier for implementations to  slip  into  the   kind  of\n            security\
    \   problems   discussed   in   the   MIME  document.\n            Implementors\
    \ and mailcap administrators should be  aware  of\n            these  security\
    \  considerations,  and  in particular  should\n            exercise caution in\
    \ the choice of programs to be listed in a\n            mailcap file for  automatic\
    \ execution.\n          Author's Address\n            Nathaniel S. Borenstein\n\
    \            MRE 2D-296, Bellcore\n            445 South St.\n            Morristown,\
    \ NJ 07962-1910\n            Email: nsb@bellcore.com\n            Phone: +1 201\
    \ 829 4270\n            Fax:  +1 201 829 7019\n"
