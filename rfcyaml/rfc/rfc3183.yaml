- title: __initial_text__
  contents:
  - '                 Domain Security Services using S/MIME

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the S/MIME (Secure/Multipurpose Internet\n\
    \   Mail Extensions) protocol can be processed and generated by a number\n   of\
    \ components of a communication system, such as message transfer\n   agents, guards\
    \ and gateways to deliver security services.  These\n   services are collectively\
    \ referred to as 'Domain Security Services'.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Significant comments were made by Luis Barriga, Greg Colla,\
    \ Trevor\n   Freeman, Russ Housley, Dave Kemp, Jim Schaad and Michael Zolotarev.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The S/MIME [1] series of standards define a data encapsulation\
    \ format\n   for the provision of a number of security services including data\n\
    \   integrity, confidentiality, and authentication.  S/MIME is designed\n   for\
    \ use by messaging clients to deliver security services to\n   distributed messaging\
    \ applications.\n   The mechanisms described in this document are designed to\
    \ solve a\n   number of interoperability problems and technical limitations that\n\
    \   arise when different security domains wish to communicate securely,\n   for\
    \ example when two domains use incompatible messaging technologies\n   such as\
    \ the X.400 series and SMTP/MIME, or when a single domain\n   wishes to communicate\
    \ securely with one of its members residing on an\n   untrusted domain.  The scenarios\
    \ covered by this document are\n   domain-to-domain, individual-to-domain and\
    \ domain-to-individual\n   communications.  This document is also applicable to\
    \ organizations\n   and enterprises that have internal PKIs which are not accessible\
    \ by\n   the outside world, but wish to interoperate securely using the S/MIME\n\
    \   protocol.\n   There are many circumstances when it is not desirable or practical\
    \ to\n   provide end-to-end (desktop-to-desktop) security services,\n   particularly\
    \ between different security domains.  An organization\n   that is considering\
    \ providing end-to-end security services will\n   typically have to deal with\
    \ some if not all of the following issues:\n   1) Heterogeneous message access\
    \ methods: Users are accessing mail\n      using mechanisms which re-format messages,\
    \ such as using Web\n      browsers.  Message reformatting in the Message Store\
    \ makes end-\n      to-end encryption and signature validation impossible.\n \
    \  2) Message screening and audit: Server-based mechanisms such as\n      searching\
    \ for prohibited words or other content, virus scanning,\n      and audit, are\
    \ incompatible with end-to-end encryption.\n   3) PKI deployment issues: There\
    \ may not be any certificate paths\n      between two organizations.  Or an organization\
    \ may be sensitive\n      about aspects of its PKI and unwilling to expose them\
    \ to outside\n      access.  Also, full PKI deployment for all employees, may\
    \ be\n      expensive, not necessary or impractical for large organizations.\n\
    \      For any of these reasons, direct end-to-end signature validation\n    \
    \  and encryption are impossible.\n   4) Heterogeneous message formats: One organization\
    \ using X.400 series\n      protocols wishes to communicate with another using\
    \ SMTP.  Message\n      reformatting at gateways makes end-to-end encryption and\
    \ signature\n      validation impossible.\n   This document describes an approach\
    \ to solving these problems by\n   providing message security services at the\
    \ level of a domain or an\n   organization.  This document specifies how these\
    \ 'domain security\n   services' can be provided using the S/MIME protocol.  Domain\
    \ security\n   services may replace or complement mechanisms at the desktop. \
    \ For\n   example, a domain may decide to provide desktop-to-desktop signatures\n\
    \   but domain-to-domain encryption services.  Or it may allow desktop-\n   to-desktop\
    \ services for intra-domain use, but enforce domain-based\n   services for communication\
    \ with other domains.\n   Domain services can also be used by individual members\
    \ of a\n   corporation who are geographically remote and who wish to exchange\n\
    \   encrypted and/or signed messages with their base.\n   Whether or not a domain\
    \ based service is inherently better or worse\n   than desktop based solutions\
    \ is an open question.  Some experts\n   believe that only end-to-end solutions\
    \ can be truly made secure,\n   while others believe that the benefits offered\
    \ by such things as\n   content checking at domain boundaries offers considerable\
    \ increase in\n   practical security for many real systems.  The additional service\
    \ of\n   allowing signature checking at several points on a communications\n \
    \  path is also an extra benefit in many situations.  This debate is\n   outside\
    \ the scope of this document.  What is offered here is a set of\n   tools that\
    \ integrators can tailor in different ways to meet different\n   needs in different\
    \ circumstances.\n   Message transfer agents (MTAs), guards, firewalls and protocol\n\
    \   translation gateways all provide domain security services.  As with\n   desktop\
    \ based solutions, these components must be resilient against a\n   wide variety\
    \ of attacks intended to subvert the security services.\n   Therefore, careful\
    \ consideration should be given to security of these\n   components, to make sure\
    \ that their siting and configuration\n   minimises the possibility of attack.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [2].\n"
- title: 2. Overview of Domain Security Services
  contents:
  - "2. Overview of Domain Security Services\n   This section gives an informal overview\
    \ of the security services that\n   are provided by S/MIME between different security\
    \ domains.  These\n   services are provided by a combination of mechanisms in\
    \ the sender's\n   and recipient's domains.\n   Later sections describe definitively\
    \ how these services map onto\n   elements of the S/MIME protocol.\n   The following\
    \ security mechanisms are specified in this document:\n   1. Domain signature\n\
    \   2. Review signature\n   3. Additional attributes signature\n   4. Domain encryption\
    \ and decryption\n   The signature types defined in this document are referred\
    \ to as\n   DOMSEC defined signatures.\n   The term 'security domain' as used\
    \ in this document is defined as a\n   collection of hardware and personnel operating\
    \ under a single\n   security authority and performing a common business function.\n\
    \   Members of a security domain will of necessity share a high degree of\n  \
    \ mutual trust, due to their shared aims and objectives.\n   A security domain\
    \ is typically protected from direct outside attack\n   by physical measures and\
    \ from indirect (electronic) attack by a\n   combination of firewalls and guards\
    \ at network boundaries.  The\n   interface between two security domains is termed\
    \ a 'security\n   boundary'.  One example of a security domain is an organizational\n\
    \   network ('Intranet').\n"
- title: 2.1 Domain Signature
  contents:
  - "2.1 Domain Signature\n   A domain signature is an S/MIME signature generated\
    \ on behalf of a\n   set of users in a domain.  A domain signature can be used\
    \ to\n   authenticate information sent between domains or between a certain\n\
    \   domain and one of its individuals, for example, when two 'Intranets'\n   are\
    \ connected using the Internet, or when an Intranet is connected to\n   a remote\
    \ user over the Internet.  It can be used when two domains\n   employ incompatible\
    \ signature schemes internally or when there are no\n   certification links between\
    \ their PKIs.  In both cases messages from\n   the originator's domain are signed\
    \ over the original message and\n   signature (if present) using an algorithm,\
    \ key, and certificate which\n   can be processed by the recipient(s) or the recipient(s)\
    \ domain.  A\n   domain signature is sometimes referred to as an \"organizational\n\
    \   signature\".\n"
- title: 2.2 Review Signature
  contents:
  - "2.2 Review Signature\n   A third party may review messages before they are forwarded\
    \ to the\n   final recipient(s) who may be in the same or a different security\n\
    \   domain.  Organizational policy and good security practice often\n   require\
    \ that messages be reviewed before they are released to\n   external recipients.\
    \  Having reviewed a message, an S/MIME signature\n   is added to it - a review\
    \ signature.  An agent could check the review\n   signature at the domain boundary,\
    \ to ensure that only reviewed\n   messages are released.\n"
- title: 2.3 Additional Attributes Signature
  contents:
  - "2.3 Additional Attributes Signature\n   A third party can add additional attributes\
    \ to a signed message.  An\n   S/MIME signature is used for this purpose - an\
    \ additional attributes\n   signature.  An example of an additional attribute\
    \ is the 'Equivalent\n   Label' attribute defined in ESS [3].\n"
- title: 2.4 Domain Encryption and Decryption
  contents:
  - "2.4 Domain Encryption and Decryption\n   Domain encryption is S/MIME encryption\
    \ performed on behalf of a\n   collection of users in a domain.  Domain encryption\
    \ can be used to\n   protect information between domains, for example, when two\n\
    \   'Intranets' are connected using the Internet.  It can also be used\n   when\
    \ end users do not have PKI/encryption capabilities at the\n   desktop, or when\
    \ two domains employ incompatible encryption schemes\n   internally.  In the latter\
    \ case messages from the originator's domain\n   are encrypted (or re-encrypted)\
    \ using an algorithm, key, and\n   certificate which can be decrypted by the recipient(s)\
    \ or an entity\n   in their domain.  This scheme also applies to protecting information\n\
    \   between a single domain and one of its members when both are\n   connected\
    \ using an untrusted network, e.g., the Internet.\n"
- title: 3. Mapping of the Signature Services to the S/MIME Protocol
  contents:
  - "3. Mapping of the Signature Services to the S/MIME Protocol\n   This section\
    \ describes the S/MIME protocol elements that are used to\n   provide the security\
    \ services described above.  ESS [3] introduces\n   the concept of triple-wrapped\
    \ messages that are first signed, then\n   encrypted, then signed again.  This\
    \ document also uses this concept\n   of triple-wrapping.  In addition, this document\
    \ also uses the concept\n   of 'signature encapsulation'.  'Signature encapsulation'\
    \ denotes a\n   signed or unsigned message that is wrapped in a signature, this\n\
    \   signature covering both the content and the first (inner) signature,\n   if\
    \ present.\n   Signature encapsulation MAY be performed on the inner and/or the\n\
    \   outer signature of a triple-wrapped message.\n   For example, the originator\
    \ signs a message which is then\n   encapsulated with an 'additional attributes'\
    \ signature.  This is then\n   encrypted.  A reviewer then signs this encrypted\
    \ data, which is then\n   encapsulated by a domain signature.\n   There is a possibility\
    \ that some policies will require signatures to\n   be added in a specific order.\
    \  By only allowing signatures to be\n   added by encapsulation it is possible\
    \ to determine the order in which\n   the signatures have been added.\n   A DOMSEC\
    \ defined signature MAY encapsulate a message in one of the\n   following ways:\n\
    \   1) An unsigned message has an empty signature layer added to it\n      (i.e.,\
    \ the message is wrapped in a signedData that has a\n      signerInfos which contains\
    \ no elements).  This is to enable\n      backward compatibility with S/MIME software\
    \ that does not have a\n      DOMSEC capability.  Since the signerInfos will contain\
    \ no signers\n      the eContentType, within the EncapsulatedContentInfo, MUST\
    \ be id-\n      data as described in CMS [5].  However, the eContent field will\n\
    \      contain the unsigned message instead of being left empty as\n      suggested\
    \ in section 5.2 in CMS [5].  This is so that when the\n      DOMSEC defined signature\
    \ is added, as defined in method 2) below,\n      the signature will cover the\
    \ unsigned message.\n   2) Signature Encapsulation is used to wrap the original\
    \ signed\n      message with a DOMSEC defined signature.  This is so that the\n\
    \      DOMSEC defined signature covers the message and all the previously\n  \
    \    added signatures.  Also, it is possible to determine that the\n      DOMSEC\
    \ defined signature was added after the signatures that are\n      already there.\n"
- title: 3.1 Naming Conventions and Signature Types
  contents:
  - "3.1 Naming Conventions and Signature Types\n   An entity receiving an S/MIME\
    \ signed message would normally expect\n   the signature to be that of the originator\
    \ of the message.  However,\n   the message security services defined in this\
    \ document require the\n   recipient to be able to accept messages signed by other\
    \ entities\n   and/or the originator.  When other entities sign the message the\
    \ name\n   in the certificate will not match the message sender's name.  An\n\
    \   S/MIME compliant implementation would normally flag a warning if\n   there\
    \ were a mismatch between the name in the certificate and the\n   message sender's\
    \ name.  (This check prevents a number of types of\n   masquerade attack.)\n \
    \  In the case of domain security services, this warning condition\n   SHOULD\
    \ be suppressed under certain circumstances.  These\n   circumstances are defined\
    \ by a naming convention that specifies the\n   form that the signers name SHOULD\
    \ adhere to.  Adherence to this\n   naming convention avoids the problems of uncontrolled\
    \ naming and the\n   possible masquerade attacks that this would produce.\n  \
    \ As an assistance to implementation, a signed attribute is defined to\n   be\
    \ included in the S/MIME signature - the 'signature type' attribute.\n   On receiving\
    \ a message containing this attribute, the naming\n   convention checks are invoked.\n\
    \   Implementations conforming to this standard MUST support the naming\n   convention\
    \ for signature generation and verification.\n   Implementations conforming to\
    \ this standard MUST recognize the\n   signature type attribute for signature\
    \ verification.  Implementations\n   conforming to this standard MUST support\
    \ the signature type attribute\n   for signature generation.\n"
- title: 3.1.1 Naming Conventions
  contents:
  - "3.1.1 Naming Conventions\n   The following naming conventions are specified for\
    \ agents generating\n   signatures specified in this document:\n   *  For a domain\
    \ signature, an agent generating this signature MUST be\n      named 'domain-signing-authority'\n\
    \   *  For a review signature, an agent generating this signature MUST be\n  \
    \    named 'review-authority'.\n   *  For an additional attributes signature,\
    \ an agent generating this\n      signature MUST be named 'attribute-authority'.\n\
    \   This name shall appear as the 'common name (CN)' component of the\n   subject\
    \ field in the X.509 certificate.  There MUST be only one CN\n   component present.\
    \  Additionally, if the certificate contains an RFC\n   822 address, this name\
    \ shall appear in the end entity component of\n   the address - on the left-hand\
    \ side of the '@' symbol.\n   In the case of a domain signature, an additional\
    \ naming rule is\n   defined: the 'name mapping rule'.  The name mapping rule\
    \ states that\n   for a domain signing authority, the domain part of its name\
    \ MUST be\n   the same as, or an ascendant of, the domain name of the message\n\
    \   originator(s) that it is representing.  The domain part is defined as\n  \
    \ follows:\n   *  In the case of an X.500 distinguished subject name of an X.509\n\
    \      certificate, the domain part is the country, organization,\n      organizational\
    \ unit, state, and locality components of the\n      distinguished name.\n   *\
    \  In the case of an RFC 2247 distinguished name, the domain part is\n      the\
    \ domain components of the distinguished name.\n   *  If the certificate contains\
    \ an RFC 822 address, the domain part is\n      defined to be the RFC 822 address\
    \ component on the right-hand side\n      of the '@' symbol.\n   For example,\
    \ a domain signing authority acting on behalf of John Doe\n   of the Acme corporation,\
    \ whose distinguished name is 'cn=John Doe,\n   ou=marketing,o=acme,c=us' and\
    \ whose e-mail address is\n   John.Doe@marketing.acme.com, could have a certificate\
    \ containing a\n   distinguished name of\n   'cn=domain-signing-authority,o=acme,c=us'\
    \ and an RFC 822 address of\n   'domain-signing-authority@acme.com'.  If John\
    \ Doe has an RFC 2247\n   defined address of 'cn=John Doe,dc=marketing,dc=acme,dc=us'\
    \ then an\n   address of 'cn=domain-signing-authority,dc=acme,dc=us' could be\
    \ used\n   to represent the domain signing authority.\n   When the X.500 distinguished\
    \ subject name has consecutive\n   organizational units and/or localities it is\
    \ important to understand\n   the ordering of these values in order to determine\
    \ if the domain part\n   of the domain signature is an ascendant.  In this case,\
    \ when parsing\n   the distinguished subject name from the most significant component\n\
    \   (i.e., country, locality or organization) the parsed organizational\n   unit\
    \ or locality is deemed to be the ascendant of consecutive\n   (unparsed) organizational\
    \ units or localities.\n   When parsing an RFC 2247 subject name from the most\
    \ significant\n   component (i.e., the 'dc' entry that represents the country,\
    \ locality\n   or organization) the parsed 'dc' entry is deemed to be the ascendant\n\
    \   of consecutive (unparsed) 'dc' entries.\n   For example, a domain signing\
    \ authority acting on behalf of John Doe\n   of the Acme corporation, whose distinguished\
    \ name is 'cn=John Doe,\n   ou=marketing,ou=defence,o=acme,c=us' and whose e-mail\
    \ address is\n   John.Doe@marketing.defence.acme.com, could have a certificate\n\
    \   containing a distinguished name of 'cn=domain-signing-\n   authority,ou=defence,o=acme,c=us'\
    \ and an RFC 822 address of 'domain-\n   signing-authority@defence.acme.com'.\
    \  If John Doe has an RFC 2247\n   defined address of 'cn=John\n   Doe,dc=marketing,dc=defense,dc=acme,dc=us'\
    \ then the domain signing\n   authority could have a distinguished name of 'cn=domain-signing-\n\
    \   authority,dc=defence,dc=acme,dc=us'.\n   Any message received where the domain\
    \ part of the domain signing\n   agent's name does not match, or is not an ascendant\
    \ of, the\n   originator's domain name MUST be flagged.\n   This naming rule prevents\
    \ agents from one organization masquerading\n   as domain signing authorities\
    \ on behalf of another.  For the other\n   types of signature defined in this\
    \ document, no such named mapping\n   rule is defined.\n   Implementations conforming\
    \ to this standard MUST support this name\n   mapping convention as a minimum.\
    \  Implementations MAY choose to\n   supplement this convention with other locally\
    \ defined conventions.\n   However, these MUST be agreed between sender and recipient\
    \ domains\n   prior to secure exchange of messages.\n   On verifying the signature,\
    \ a receiving agent MUST ensure that the\n   naming convention has been adhered\
    \ to.  Any message that violates the\n   convention MUST be flagged.\n"
- title: 3.1.2 Signature Type Attribute
  contents:
  - "3.1.2 Signature Type Attribute\n   An S/MIME signed attribute is used to indicate\
    \ the type of signature.\n   This should be used in conjunction with the naming\
    \ conventions\n   specified in the previous section.  When an S/MIME signed message\n\
    \   containing the signature type attribute is received it triggers the\n   software\
    \ to verify that the correct naming convention has been used.\n   The ASN.1 [4]\
    \ notation of this attribute is: -\n      SignatureType ::= SEQUENCE OF OBJECT\
    \ IDENTIFIER\n      id-sti  OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840)\n\
    \                  rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) 9 }\n      -- signature\
    \ type identifier\n   If present, the SignatureType attribute MUST be a signed\
    \ attribute,\n   as defined in [5].  If the SignatureType attribute is absent\
    \ and\n   there are no further encapsulated signatures the recipient SHOULD\n\
    \   assume that the signature is that of the message originator.\n   All of the\
    \ signatures defined here are generated and processed as\n   described in [5].\
    \  They are distinguished by the presence of the\n   following values in the SignatureType\
    \ signed attribute:\n      id-sti-domainSig OBJECT IDENTIFIER ::= { id-sti 2 }\n\
    \      -- domain signature.\n      id-sti-addAttribSig OBJECT IDENTIFIER ::= {\
    \ id-sti 3 }\n      -- additional attributes signature.\n      id-sti-reviewSig\
    \ OBJECT IDENTIFIER ::= { id-sti 4 }\n      -- review signature.\n   For completeness,\
    \ an attribute type is also specified for an\n   originator signature.  However,\
    \ this signature type is optional.  It\n   is defined as follows:\n      id-sti-originatorSig\
    \ OBJECT IDENTIFIER ::= { id-sti 1 }\n      -- originator's signature.\n   All\
    \ signature types, except the originator type, MUST encapsulate\n   other signatures.\
    \  Note a DOMSEC defined signature could be\n   encapsulating an empty signature\
    \ as defined in section 3.\n   A SignerInfo MUST NOT include multiple instances\
    \ of SignatureType.  A\n   signed attribute representing a SignatureType MAY include\
    \ multiple\n   instances of different SignatureType values as an AttributeValue\
    \ of\n   attrValues [5], as long as the SignatureType 'additional attributes'\n\
    \   is not present.\n   If there is more than one SignerInfo in a signerInfos\
    \ (i.e., when\n   different algorithms are used) then the SignatureType attribute\
    \ in\n   all the SignerInfos MUST contain the same content.\n   The following\
    \ sections describe the conditions under which each of\n   these types of signature\
    \ may be generated, and how they are\n   processed.\n"
- title: 3.2 Domain Signature Generation and Verification
  contents:
  - "3.2 Domain Signature Generation and Verification\n   A 'domain signature' is\
    \ a proxy signature generated on a user's\n   behalf in the user's domain.  The\
    \ signature MUST adhere to the naming\n   conventions in 3.1.1, including the\
    \ name mapping convention.  A\n   'domain signature' on a message authenticates\
    \ the fact that the\n   message has been released from that domain.  Before signing,\
    \ a\n   process generating a 'domain signature' MUST first satisfy itself of\n\
    \   the authenticity of the message originator.  This is achieved by one\n   of\
    \ two methods.  Either the 'originator's signature' is checked, if\n   S/MIME\
    \ signatures are used inside a domain.  Or if not, some\n   mechanism external\
    \ to S/MIME is used, such as the physical address of\n   the originating client\
    \ or an authenticated IP link.\n   If the originator's authenticity is successfully\
    \ verified by one of\n   the above methods and all other signatures present are\
    \ valid,\n   including those that have been encrypted, a 'domain signature' can\
    \ be\n   added to a message.\n   If a 'domain signature' is added and the message\
    \ is received by a\n   Mail List Agent (MLA) there is a possibility that the 'domain\n\
    \   signature' will be removed.  To stop the 'domain signature' from\n   being\
    \ removed the steps in section 5 MUST be followed.\n   An entity generating a\
    \ domain signature MUST do so using a\n   certificate containing a subject name\
    \ that follows the naming\n   convention specified in 3.1.1.\n   If the originator's\
    \ authenticity is not successfully verified or all\n   the signatures present\
    \ are not valid, a 'domain signature' MUST NOT\n   be generated.\n   On reception,\
    \ the 'domain signature' SHOULD be used to verify the\n   authenticity of a message.\
    \  A check MUST be made to ensure that both\n   the naming convention and the\
    \ name mapping convention have been used\n   as specified in this standard.\n\
    \   A recipient can assume that successful verification of the domain\n   signature\
    \ also authenticates the message originator.\n   If there is an originator signature\
    \ present, the name in that\n   certificate SHOULD be used to identify the originator.\
    \  This\n   information can then be displayed to the recipient.\n   If there is\
    \ no originator signature present, the only assumption that\n   can be made is\
    \ the domain the message originated from.\n   A domain signer can be assumed to\
    \ have verified any signatures that\n   it encapsulates.  Therefore, it is not\
    \ necessary to verify these\n   signatures before treating the message as authentic.\
    \  However, this\n   standard does not preclude a recipient from attempting to\
    \ verify any\n   other signatures that are present.\n   The 'domain signature'\
    \ is indicated by the presence of the value id-\n   sti-domainSig in a 'signature\
    \ type' signed attribute.\n   There MAY be one or more 'domain signature' signatures\
    \ in an S/MIME\n   encoding.\n"
- title: 3.3 Additional Attributes Signature Generation and Verification
  contents:
  - "3.3 Additional Attributes Signature Generation and Verification\n   The 'additional\
    \ attributes' signature type indicates that the\n   SignerInfo contains additional\
    \ attributes that are associated with\n   the message.\n   All attributes in the\
    \ applicable SignerInfo MUST be treated as\n   additional attributes.  Successful\
    \ verification of an 'additional\n   attributes' signature means only that the\
    \ attributes are\n   authentically bound to the message.  A recipient MUST NOT\
    \ assume that\n   its successful verification also authenticates the message\n\
    \   originator.\n   An entity generating an 'additional attributes' signature\
    \ MUST do so\n   using a certificate containing a subject name that follows the\
    \ naming\n   convention specified in 3.1.1.  On reception, a check MUST be made\
    \ to\n   ensure that the naming convention has been used.\n   A signer MAY include\
    \ any of the attributes listed in [3] or in this\n   document when generating\
    \ an 'additional attributes' signature.  The\n   following attributes have a special\
    \ meaning, when present in an\n   'additional attributes' signature:\n   1) Equivalent\
    \ Label: label values in this attribute are to be treated\n      as equivalent\
    \ to the security label contained in an encapsulated\n      SignerInfo, if present.\n\
    \   2) Security Label: the label value indicates the aggregate\n      sensitivity\
    \ of the inner message content plus any encapsulated\n      signedData and envelopedData\
    \ containers.  The label on the\n      original data is indicated by the value\
    \ in the originator's\n      signature, if present.\n   An 'additional attributes'\
    \ signature is indicated by the presence of\n   the value id-sti-addAttribSig\
    \ in a 'signature type' signed attribute.\n   Other Object Identifiers MUST NOT\
    \ be included in the sequence of OIDs\n   if this value is present.\n   There\
    \ MAY be multiple 'additional attributes' signatures in an S/MIME\n   encoding.\n"
- title: 3.4 Review Signature Generation and Verification
  contents:
  - "3.4 Review Signature Generation and Verification\n   The review signature indicates\
    \ that the signer has reviewed the\n   message.  Successful verification of a\
    \ review signature means only\n   that the signer has approved the message for\
    \ onward transmission to\n   the recipient(s).  When the recipient is in another\
    \ domain, a device\n   on a domain boundary such as a Mail Guard or firewall may\
    \ be\n   configured to check review signatures.  A recipient MUST NOT assume\n\
    \   that its successful verification also authenticates the message\n   originator.\n\
    \   An entity generating a signed review signature MUST do so using a\n   certificate\
    \ containing a subject name that follows the naming\n   convention specified in\
    \ 3.1.1.  On reception, a check MUST be made to\n   ensure that the naming convention\
    \ has been used.\n   A review signature is indicated by the presence of the value\
    \ id-sti-\n   reviewSig in a 'signature type' signed attribute.\n   There MAY\
    \ be multiple review signatures in an S/MIME encoding.\n"
- title: 3.5 Originator Signature
  contents:
  - "3.5 Originator Signature\n   The 'originator signature' is used to indicate that\
    \ the signer is the\n   originator of the message and its contents.  It is included\
    \ in this\n   document for completeness only.  An originator signature is indicated\n\
    \   either by the absence of the signature type attribute, or by the\n   presence\
    \ of the value id-sti-originatorSig in a 'signature type'\n   signed attribute.\n"
- title: 4. Encryption and Decryption
  contents:
  - "4. Encryption and Decryption\n   Message encryption may be performed by a third\
    \ party on behalf of a\n   set of originators in a domain.  This is referred to\
    \ as domain\n   encryption.  Message decryption may be performed by a third party\
    \ on\n   behalf of a set of recipients in a domain.  This is referred to as\n\
    \   domain decryption.  The third party that performs these processes is\n   referred\
    \ to in this section as a \"Domain Confidentiality Authority\"\n   (DCA).  Both\
    \ of these processes are described in this section.\n   Messages may be encrypted\
    \ for decryption by the final recipient\n   and/or by a DCA in the recipient's\
    \ domain.  The message may also be\n   encrypted for decryption by a DCA in the\
    \ originator's domain (e.g.,\n   for content analysis, audit, key word scanning,\
    \ etc.).  The choice of\n   which of these is actually performed is a system specific\
    \ issue that\n   depends on system security policy.  It is therefore outside the\
    \ scope\n   of this document.  These processes of encryption and decryption\n\
    \   processes are shown in the following table.\n --------------------------------------------------------------------\n"
- title: '|                        | Recipient Decryption |  Domain Decryption |'
  contents:
  - '|                        | Recipient Decryption |  Domain Decryption |

    '
- title: '|------------------------|----------------------|--------------------|'
  contents:
  - '|------------------------|----------------------|--------------------|

    '
- title: '| Originator Encryption  |       Case(a)        |       Case(b)      |'
  contents:
  - '| Originator Encryption  |       Case(a)        |       Case(b)      |

    '
- title: '| Domain Encryption      |       Case(c)        |       Case(d)      |'
  contents:
  - "| Domain Encryption      |       Case(c)        |       Case(d)      |\n --------------------------------------------------------------------\n\
    \   Case (a), encryption of messages by the originator for decryption by\n   the\
    \ final recipient(s), is described in CMS [5].  In cases (c) and\n   (d), encryption\
    \ is performed not by the originator but by the DCA in\n   the originator's domain.\
    \ In cases (b) and (d), decryption is\n   performed not by the recipient(s) but\
    \ by the DCA in the recipient's\n   domain.\n   A client implementation that conforms\
    \ to this standard MUST support\n   case (b) for transmission, case (c) for reception\
    \ and case (a) for\n   transmission and reception.\n   A DCA implementation that\
    \ conforms to this standard MUST support\n   cases (c) and (d), for transmission,\
    \ and cases (b) and (d) for\n   reception.  In cases (c) and (d) the 'domain signature'\
    \ SHOULD be\n   applied before the encryption.  In cases (b) and (d) the message\n\
    \   SHOULD be decrypted before the originators 'domain signature' is\n   obtained\
    \ and verified.\n   The process of encryption and decryption is documented in\
    \ CMS [5].\n   The only additional requirement introduced by domain encryption\
    \ and\n   decryption is for greater flexibility in the management of keys, as\n\
    \   described in the following subsections.  As with signatures, a naming\n  \
    \ convention and name mapping convention are used to locate the correct\n   public\
    \ key.\n   The mechanisms described below are applicable both to key agreement\n\
    \   and key transport systems, as documented in CMS [5].  The phrase\n   'encryption\
    \ key' is used as a collective term to cover the key\n   management keys used\
    \ by both techniques.\n   The mechanisms below are also applicable to individual\
    \ roving users\n   who wish to encrypt messages that are sent back to base.\n"
- title: 4.1 Domain Confidentiality Naming Conventions
  contents:
  - "4.1 Domain Confidentiality Naming Conventions\n   A DCA MUST be named 'domain-confidentiality-authority'.\
    \  This name\n   MUST appear in the 'common name(CN)' component of the subject\
    \ field\n   in the X.509 certificate.  Additionally, if the certificate contains\n\
    \   an RFC 822 address, this name MUST appear in the end entity part of\n   the\
    \ address, i.e., on the left-hand side of the '@' symbol.\n   Along with this\
    \ naming convention, an additional naming rule is\n   defined:  the 'name mapping\
    \ rule'.  The name mapping rule states that\n   for a DCA, the domain part of\
    \ its name MUST be the same as, or an\n   ascendant of (as defined in section\
    \ 3.1.1), the domain name of the\n   set of entities that it represents.  The\
    \ domain part is defined as\n   follows:\n   *  In the case of an X.500 distinguished\
    \ name of an X.509\n      certificate, the domain part is the country, organization,\n\
    \      organizational unit, state, and locality components of the\n      distinguished\
    \ name.\n   * In the case of an RFC 2247 distinguished name, the domain part is\n\
    \      the domain components of the distinguished name.\n   * If the certificate\
    \ contains an RFC 822 address, the domain part is\n      defined to be the RFC\
    \ 822 address part on the right-hand side of\n      the '@' symbol.\n   For example,\
    \ a DCA acting on behalf of John Doe of the Acme\n   corporation, whose distinguished\
    \ name is 'cn=John Doe,ou=marketing,\n   o=acme,c=us' and whose e-mail address\
    \ is John.Doe@marketing.acme.com,\n   could have a certificate containing a distinguished\
    \ name of\n   'cn=domain-confidentiality-authority,o=acme,c=us' and an e-mail\n\
    \   address of 'domain-confidentiality-authority@acme.com'.  If John Doe\n   has\
    \ an RFC 2247 defined address of 'cn=John Doe,dc=marketing,\n   dc=defense,dc=acme,dc=us'\
    \ then the domain signing authority could\n   have a distinguished name of\n \
    \  'cn=domain-signing-authority,dc=defence,dc=acme,dc=us'.  The key\n   associated\
    \ with this certificate would be used for encrypting\n   messages for John Doe.\n\
    \   Any message received where the domain part of the domain encrypting\n   agents\
    \ name does not match, or is not an ascendant of, the domain\n   name of the entities\
    \ it represents MUST be flagged.\n   This naming rule prevents messages being\
    \ encrypted for the wrong\n   domain decryption agent.\n   Implementations conforming\
    \ to this standard MUST support this name\n   mapping convention as a minimum.\
    \  Implementations may choose to\n   supplement this convention with other locally\
    \ defined conventions.\n   However, these MUST be agreed between sender and recipient\
    \ domains\n   prior to sending any messages.\n"
- title: 4.2 Key Management for DCA Encryption
  contents:
  - "4.2 Key Management for DCA Encryption\n   At the sender's domain, DCA encryption\
    \ is achieved using the\n   recipient DCA's certificate or the end recipient's\
    \ certificate.  For\n   this, the encrypting process must be able to correctly\
    \ locate the\n   certificate for the corresponding DCA in the recipient's domain\
    \ or\n   the one corresponding to the end recipient.  Having located the\n   correct\
    \ certificate, the encryption process is then performed and\n   additional information\
    \ required for decryption is conveyed to the\n   recipient in the recipientInfo\
    \ field as specified in CMS [5].  A DCA\n   encryption agent MUST be named according\
    \ to the naming convention\n   specified in section 4.1.  This is so that the\
    \ corresponding\n   certificate can be found.\n   No specific method for locating\
    \ the certificate to the corresponding\n   DCA in the recipient's domain or the\
    \ one corresponding to the end\n   recipient is mandated in this document.  An\
    \ implementation may choose\n   to access a local certificate store to locate\
    \ the correct\n   certificate.  Alternatively, a X.500 or LDAP directory may be\
    \ used in\n   one of the following ways:\n   1. The directory may store the DCA\
    \ certificate in the recipient's\n      directory entry.  When the user certificate\
    \ attribute is\n      requested, this certificate is returned.\n   2. The encrypting\
    \ agent maps the recipient's name to the DCA name in\n      the manner specified\
    \ in 4.1.  The user certificate attribute\n      associated with this directory\
    \ entry is then obtained.\n   This document does not mandate either of these processes.\
    \  Whichever\n   one is used, the name mapping conventions must be adhered to,\
    \ in\n   order to maintain confidentiality.\n   Having located the correct certificate,\
    \ the encryption process is\n   then performed.  A recipientInfo for the DCA or\
    \ end recipient is then\n   generated, as described in CMS [5].\n   DCA encryption\
    \ may be performed for decryption by the end recipient\n   and/or by a DCA.  End\
    \ recipient decryption is described in CMS [5].\n   DCA decryption is described\
    \ in section 4.3.\n"
- title: 4.3 Key Management for DCA Decryption
  contents:
  - "4.3 Key Management for DCA Decryption\n   DCA decryption uses a private-key belonging\
    \ to the DCA and the\n   necessary information conveyed in the DCA's recipientInfo\
    \ field.\n   It should be noted that domain decryption can be performed on\n \
    \  messages encrypted by the originator and/or by a DCA in the\n   originator's\
    \ domain.  In the first case, the encryption process is\n   described in CMS [5];\
    \ in the second case, the encryption process is\n   described in 4.2.\n"
- title: 5. Applying a Domain Signature when Mail List Agents are Present.
  contents:
  - "5. Applying a Domain Signature when Mail List Agents are Present.\n   It is possible\
    \ that a message leaving a DOMSEC domain may encounter a\n   Mail List Agent (MLA)\
    \ before it reaches the final recipient.  There\n   is a possibility that this\
    \ would result in the 'domain signature'\n   being stripped off the message. \
    \ We do not want a MLA to remove the\n   'domain signature'.  Therefore, the 'domain\
    \ signature' must be\n   applied to the message in such a way that will prevent\
    \ a MLA from\n   removing it.\n   A MLA will search a message for the \"outer\"\
    \ signedData layer, as\n   defined in ESS [3] section 4.2, and strip off all signedData\
    \ layers\n   that encapsulate this \"outer\" signedData layer.  Where this \"\
    outer\"\n   signedData layer is found will depend on whether the message contains\n\
    \   a mlExpansionHistory attribute or an envelopedData layer.\n   There is a possibility\
    \ that a message leaving a DOMSEC domain has\n   already been processed by a MLA,\
    \ in which case a 'mlExpansionHistory'\n   attribute will be present within the\
    \ message.\n   There is a possibility that the message will contain an envelopedData\n\
    \   layer.  This will be the case when the message has been encrypted\n   within\
    \ the domain for the domain's \"Domain Confidentiality\n   Authority\", see section\
    \ 4.0, and, possibly, the final recipient.\n   How the 'domain signature' is applied\
    \ will depend on what is already\n   present within the message.  Before the 'domain\
    \ signature' can be\n   applied the message MUST be searched for the \"outer\"\
    \ signedData\n   layer, this search is complete when one of the following is found:\
    \ -\n      -  The \"outer\" signedData layer that includes an\n         mlExpansionHistory\
    \ attribute or encapsulates an envelopedData\n         object.\n      -  An envelopedData\
    \ layer.\n      -  The original content (that is, a layer that is neither\n  \
    \       envelopedData nor signedData).\n   If a signedData layer containing a\
    \ mlExpansionHistory attribute has\n   been found then: -\n      1) Strip off\
    \ the signedData layer (after remembering the included\n         signedAttributes).\n\
    \      2) Search the rest of the message until an envelopedData layer or\n   \
    \      the original content is found.\n      3) a) If an envelopedData layer has\
    \ been found then: -\n            -  Strip off all the signedData layers down\
    \ to the\n               envelopedData layer.\n            -  Locate the RecipientInfo\
    \ for the local DCA and use the\n               information it contains to obtain\
    \ the message key.\n            -  Decrypt the encryptedContent using the message\
    \ key.\n            -  Encapsulate the decrypted message with a 'domain\n    \
    \           signature'\n            -  If local policy requires the message to\
    \ be encrypted\n               using S/MIME encryption before leaving the domain\
    \ then\n               encapsulate the 'domain signature' with an envelopedData\n\
    \               layer containing RecipientInfo structures for each of the\n  \
    \             recipients and an originatorInfo value built from\n            \
    \   information describing this DCA.\n               If local policy does not\
    \ require the message to be\n               encrypted using S/MIME encryption\
    \ but there is an\n               envelopedData at a lower level within the message\
    \ then\n               the 'domain signature' MUST be encapsulated by an\n   \
    \            envelopedData as described above.\n               An example when\
    \ it may not be local policy to require\n               S/MIME encryption is when\
    \ there is a link crypto present.\n      b) If an envelopedData layer has not\
    \ been found then: -\n            -  Encapsulate the new message with a 'domain\
    \ signature'.\n      4) Encapsulate the new message in a signedData layer, adding\
    \ the\n         signedAttributes from the signedData layer that contained the\n\
    \         mlExpansionHistory attribute.\n   If no signedData layer containing\
    \ a mlExpansionHistory attribute has\n   been found but an envelopedData has been\
    \ found then: -\n      1) Strip off all the signedData layers down to the envelopedData\n\
    \         layer.\n      2) Locate the RecipientInfo for the local DCA and use\
    \ the\n         information it contains to obtain the message key.\n      3) Decrypt\
    \ the encryptedContent using the message key.\n      4) Encapsulate the decrypted\
    \ message with a 'domain signature'\n      5) If local policy requires the message\
    \ to be encrypted before\n         leaving the domain then encapsulate the 'domain\
    \ signature' with\n         an envelopedData layer containing RecipientInfo structures\
    \ for\n         each of the recipients and an originatorInfo value built from\n\
    \         information describing this DCA.\n         If local policy does not\
    \ require the message to be encrypted\n         using S/MIME encryption but there\
    \ is an envelopedData at a\n         lower level within the message then the 'domain\
    \ signature' MUST\n         be encapsulated by an envelopedData as described above.\n\
    \   If no signedData layer containing a mlExpansionHistory attribute has\n   been\
    \ found and no envelopedData has been found then: -\n      1) Encapsulate the\
    \ message in a 'domain signature'.\n"
- title: 5.1 Examples of Rule Processing
  contents:
  - "5.1 Examples of Rule Processing\n   The following examples help explain the above\
    \ rules.  All of the\n   signedData objects are valid and none of them are a domain\
    \ signature.\n   If a signedData object was a domain signature then it would not\
    \ be\n   necessary to validate any further signedData objects.\n   1) A message\
    \ (S1 (Original Content)) (where S = signedData) in which\n      the signedData\
    \ does not include an mlExpansionHistory attribute is\n      to have a 'domain\
    \ signature' applied.  The signedData, S1, is\n      verified.  No \"outer\" signedData\
    \ is found, after searching for one\n      as defined above, since the original\
    \ content is found, nor is an\n      envelopedData or a mlExpansionHistory attribute\
    \ found.  A new\n      signedData layer, S2, is created that contains a 'domain\n\
    \      signature', resulting in the following message sent out of the\n      domain\
    \ (S2 (S1 (Original Content))).\n   2) A message (S3 (S2 (S1 (Original Content)))\
    \ in which none of the\n      signedData layers includes an mlExpansionHistory\
    \ attribute is to\n      have a 'domain signature' applied.  The signedData objects\
    \ S1, S2\n      and S3 are verified.  There is not an original, \"outer\" signedData\n\
    \      layer since the original content is found, nor is an envelopedData\n  \
    \    or a mlExpansionHistory attribute found.  A new signedData layer,\n     \
    \ S4, is created that contains a 'domain signature', resulting in\n      the following\
    \ message sent out of the domain (S4 (S3 (S2 (S1\n      (Original Content))).\n\
    \   3) A message (E1 (S1 (Original Content))) (where E = envelopedData)\n    \
    \  in which S1 does not include a mlExpansionHistory attribute is to\n      have\
    \ a 'domain signature' applied.  There is not an original,\n      received \"\
    outer\" signedData layer since the envelopedData, E1, is\n      found at the outer\
    \ layer.  The encryptedContent is decrypted.  The\n      signedData, S1, is verified.\
    \  The decrypted content is wrapped in\n      a new signedData layer, S2, which\
    \ contains a 'domain signature'.\n      If local policy requires the message to\
    \ be encrypted, using S/MIME\n      encryption, before it leaves the domain then\
    \ this new message is\n      wrapped in an envelopedData layer, E2, resulting\
    \ in the following\n      message sent out of the domain (E2 (S2 (S1 (Original\
    \ Content)))),\n      else the message is not wrapped in an envelopedData layer\n\
    \      resulting in the following message (S2 (S1 (Original Content)))\n     \
    \ being sent.\n   4) A message (S2 (E1 (S1 (Original Content)))) in which S2 includes\
    \ a\n      mlExpansionHistory attribute is to have a 'domain signature'\n    \
    \  applied.  The signedData object S2 is verified.  The\n      mlExpansionHistory\
    \ attribute is found in S2, so S2 is the \"outer\"\n      signedData.  The signed\
    \ attributes in S2 are remembered for later\n      inclusion in the new outer\
    \ signedData that is applied to the\n      message.  S2 is stripped off and the\
    \ message is decrypted.  The\n      signedData object S1 is verified.  The decrypted\
    \ message is\n      wrapped in a signedData layer, S3, which contains a 'domain\n\
    \      signature'.  If local policy requires the message to be encrypted,\n  \
    \    using S/MIME encryption, before it leaves the domain then this new\n    \
    \  message is wrapped in an envelopedData layer, E2.  A new\n      signedData\
    \ layer, S4, is then wrapped around the envelopedData,\n      E2, resulting in\
    \ the following message sent out of the domain (S4\n      (E2 (S3 (S1 (Original\
    \ Content))))).  If local policy does not\n      require the message to be encrypted,\
    \ using S/MIME encryption,\n      before it leaves the domain then the message\
    \ is not wrapped in an\n      envelopedData layer but is wrapped in a new signedData\
    \ layer, S4,\n      resulting in the following message sent out of the domain\
    \ (S4 (S3\n      (S1 (Original Content).  The signedData S4, in both cases,\n\
    \      contains the signed attributes from S2.\n   5) A message (S3 (S2 (E1 (S1\
    \ (Original Content))))) in which none of\n      the signedData layers include\
    \ a mlExpansionHistory attribute is to\n      have a 'domain signature' applied.\
    \  The signedData objects S3 and\n      S2 are verified.  When the envelopedData\
    \ E1 is found the\n      signedData objects S3 and S2 are stripped off.  The\n\
    \      encryptedContent is decrypted.  The signedData object S1 is\n      verified.\
    \  The decrypted content is wrapped in a new signedData\n      layer, S4, which\
    \ contains a 'domain signature'.  If local policy\n      requires the message\
    \ to be encrypted, using S/MIME encryption,\n      before it leaves the domain\
    \ then this new message is wrapped in an\n      envelopedData layer, E2, resulting\
    \ in the following message sent\n      out of the domain (E2 (S4 (S1 (Original\
    \ Content)))), else the\n      message is not wrapped in an envelopedData layer\
    \ resulting in the\n      following message (S4 (S1 (Original Content))) being\
    \ sent.\n   6) A message (S3 (S2 (E1 (S1 (Original Content))))) in which S3\n\
    \      includes a mlExpansionHistory attribute is to have a 'domain\n      signature'\
    \ applied.  The signedData objects S3 and S2 are\n      verified.  The mlExpansionHistory\
    \ attribute is found in S3, so S3\n      is the \"outer\" signedData.  The signed\
    \ attributes in S3 are\n      remembered for later inclusion in the new  outer\
    \ signedData that\n      is applied to the message.  The signedData object S3\
    \ is stripped\n      off.  When the envelopedData layer, E1, is found the signedData\n\
    \      object S2 is stripped off.  The encryptedContent is decrypted.\n      The\
    \ signedData object S1 is verified.  The decrypted content is\n      wrapped in\
    \ a new signedData layer, S4, which contains a 'domain\n      signature'.  If\
    \ local policy requires the message to be encrypted,\n      using S/MIME encryption,\
    \ before it leaves the domain then this new\n      message is wrapped in an envelopedData\
    \ layer, E2.  A new\n      signedData layer, S5, is then wrapped around the envelopedData,\n\
    \      E2, resulting in the following message sent out of the domain (S5\n   \
    \   (E2 (S4 (S1 (Original Content))))).  If local policy does not\n      require\
    \ the message to be encrypted, using S/MIME encryption,\n      before it leaves\
    \ the domain then the message is not wrapped in an\n      envelopedData layer\
    \ but is wrapped in a new signedData layer, S5,\n      resulting in the following\
    \ message sent out of the domain (S5 (S4\n      (S1 (Original Content).  The signedData\
    \ S5, in both cases,\n      contains the signed attributes from S3.\n   7) A message\
    \ (S3 (E2 (S2 (E1 (S1 (Original Content)))))) in which S3\n      does not include\
    \ a mlExpansionHistory attribute is to have a\n      'domain signature' applied.\
    \  The signedData object S3 is verified.\n      When the envelopedData E2 is found\
    \ the signedData object S3 is\n      stripped off.  The encryptedContent is decrypted.\
    \  The signedData\n      object S2 is verified, the envelopedData E1 is decrypted\
    \ and the\n      signedData object S1 is verified.  The signedData object S2 is\n\
    \      wrapped in a new signedData layer S4, which contains a 'domain\n      signature'.\
    \  Since there is an envelopedData E1 lower down in the\n      message, the new\
    \ message is wrapped in an envelopedData layer, E3,\n      resulting in the following\
    \ message sent out of the domain (E3 (S4\n      (S2 (E1 (S1 (Original Content)))))).\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This specification relies on the existence of\
    \ several well known\n   names, such as domain-confidentiality-authority.  Organizations\
    \ must\n   take care with these names, even if they do not support DOMSEC, so\n\
    \   that certificates issued in these names are only issued to legitimate\n  \
    \ entities.  If this is not true then an individual could get a\n   certificate\
    \ associated with domain-confidentiality-authority@acme.com\n   and as a result\
    \ might be able to read messages the a DOMSEC client\n   intended for others.\n\
    \   Implementations MUST protect all private keys.  Compromise of the\n   signer's\
    \ private key permits masquerade.\n   Similarly, compromise of the content-encryption\
    \ key may result in\n   disclosure of the encrypted content.\n   Compromise of\
    \ key material is regarded as an even more serious issue\n   for domain security\
    \ services than for an S/MIME client.  This is\n   because compromise of the private\
    \ key may in turn compromise the\n   security of a whole domain.  Therefore, great\
    \ care should be used\n   when considering its protection.\n   Domain encryption\
    \ alone is not secure and should be used in\n   conjunction with a domain signature\
    \ to avoid a masquerade attack,\n   where an attacker that has obtained a DCA\
    \ certificate can fake a\n   message to that domain pretending to be another domain.\n\
    \   When an encrypted DOMSEC message is sent to an end user in such a way\n  \
    \ that the message is decrypted by the end users DCA the message will\n   be in\
    \ plain text and therefore confidentiality could be compromised.\n   If the recipient's\
    \ DCA is compromised then the recipient can not\n   guarantee the integrity of\
    \ the message.  Furthermore, even if the\n   recipient's DCA correctly verifies\
    \ a message's signatures, then a\n   message could be undetectably modified, when\
    \ there are no signatures\n   on a message that the recipient can verify.\n"
- title: 7. DOMSEC ASN.1 Module
  contents:
  - "7. DOMSEC ASN.1 Module\n   DOMSECSyntax\n    { iso(1) member-body(2) us(840)\
    \ rsadsi(113549)\n          pkcs(1) pkcs-9(9) smime(16) modules(0) domsec(10)\
    \ }\n    DEFINITIONS IMPLICIT TAGS ::=\n    BEGIN\n    -- EXPORTS All\n    --\
    \ The types and values defined in this module are exported for\n    -- use in\
    \ the other ASN.1 modules.  Other applications may use\n    -- them for their\
    \ own purposes.\n    SignatureType ::= SEQUENCE OF OBJECT IDENTIFIER\n    id-smime\
    \ OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n             us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 16 }\n    id-sti  OBJECT IDENTIFIER ::= { id-smime 9 }   --\
    \ signature type\n    identifier\n    -- Signature Type Identifiers\n    id-sti-originatorSig\
    \       OBJECT IDENTIFIER ::= { id-sti 1 }\n    id-sti-domainSig           OBJECT\
    \ IDENTIFIER ::= { id-sti 2 }\n    id-sti-addAttribSig        OBJECT IDENTIFIER\
    \ ::= { id-sti 3 }\n    id-sti-reviewSig           OBJECT IDENTIFIER ::= { id-sti\
    \ 4 }\n    END -- of DOMSECSyntax\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Ramsdell, B., \"S/MIME Version 3 Message Specification\"\
    , RFC 2633,\n       June 1999.\n   [2] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n  \
    \ [3] Hoffman, P., \"Enhanced Security Services for S/MIME\", RFC 2634,\n    \
    \   June 1999.\n   [4] International Telecommunications Union, Recommendation\
    \ X.208,\n       \"Open systems interconnection: specification of Abstract Syntax\n\
    \       Notation (ASN.1)\", CCITT Blue Book, 1989.\n   [5] Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630, June 1999.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Tim Dean\n   QinetiQ\n   St. Andrews Road\n   Malvern\n\
    \   Worcs\n   WR14 3PS\n   Phone: +44 (0) 1684 894239\n   Fax:   +44 (0) 1684\
    \ 896660\n   EMail: tbdean@QinetiQ.com\n   William Ottaway\n   QinetiQ\n   St.\
    \ Andrews Road\n   Malvern\n   Worcs\n   WR14 3PS\n   Phone: +44 (0) 1684 894079\n\
    \   Fax:   +44 (0) 1684 896660\n   EMail: wjottaway@QinetiQ.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
