- contents:
  - '           EST (Enrollment over Secure Transport) Extensions

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The EST (Enrollment over Secure Transport) protocol defines the
    Well-\n   Known URI (Uniform Resource Identifier) -- /.well-known/est -- along\n
    \  with a number of other path components that clients use for PKI\n   (Public
    Key Infrastructure) services, namely certificate enrollment\n   (e.g., /simpleenroll).
    \ This document defines a number of other PKI\n   services as additional path
    components -- specifically, firmware and\n   trust anchors as well as symmetric,
    asymmetric, and encrypted keys.\n   This document also specifies the PAL (Package
    Availability List),\n   which is an XML (Extensible Markup Language) file or JSON
    (JavaScript\n   Object Notation) object that clients use to retrieve packages\n
    \  available and authorized for them.  This document extends the EST\n   server
    path components to provide these additional services.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8295.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Definitions ................................................6\n      1.2.
    Authentication and Authorization ...........................7\n      1.3. TLS
    Cipher Suites ..........................................7\n      1.4. URI Configuration
    ..........................................7\n      1.5. Message Types ..............................................8\n
    \     1.6. Key Words .................................................10\n   2.
    Locate Available Packages ......................................10\n      2.1.
    PAL Format ................................................12\n           2.1.1.
    PAL Package Types ..................................14\n           2.1.2. PAL
    XML Schema .....................................19\n           2.1.3. PAL JSON
    Object ....................................23\n      2.2. Request PAL ...............................................23\n
    \     2.3. Provide PAL ...............................................24\n   3.
    Distribute EE Certificates .....................................25\n      3.1.
    EE Certificate Request ....................................25\n      3.2. EE Certificate
    Response ...................................26\n   4. Distribute CRLs and ARLs
    .......................................26\n      4.1. CRL Request ...............................................26\n
    \     4.2. CRL Response ..............................................26\n   5.
    Symmetric Keys, Receipts, and Errors ...........................27\n      5.1.
    Symmetric Keys ............................................27\n           5.1.1.
    Distribute Symmetric Keys ..........................28\n           5.1.2. Symmetric
    Key Response .............................28\n      5.2. Symmetric Key Receipts
    and Errors .........................29\n           5.2.1. Provide Symmetric Key
    Receipt or Error .............30\n           5.2.2. Symmetric Key Receipt or Error
    Response ............31\n   6. Firmware, Receipts, and Errors .................................31\n
    \     6.1. Firmware ..................................................31\n           6.1.1.
    Distribute Firmware ................................32\n           6.1.2. Firmware
    Response ..................................32\n      6.2. Firmware Receipts and
    Errors ..............................33\n           6.2.1. Provide Firmware Receipt
    or Error ..................33\n           6.2.2. Firmware Receipt or Error Response
    .................33\n   7. Trust Anchor Management Protocol ...............................34\n
    \     7.1. TAMP Status Query, Trust Anchor Update,\n           Apex Trust Anchor
    Update, Community Update,\n           and Sequence Number Adjust ................................34\n
    \          7.1.1. Request TAMP Packages ..............................34\n           7.1.2.
    Return TAMP Packages ...............................35\n      7.2. TAMP Responses,
    Confirms, and Errors ......................35\n           7.2.1. Provide TAMP
    Responses, Confirms, or Errors ........36\n           7.2.2. TAMP Responses, Confirms,
    and Error Responses ......36\n   8. Asymmetric Keys, Receipts, and Errors ..........................36\n
    \     8.1. Asymmetric Key Encapsulation ..............................37\n      8.2.
    Asymmetric Key Package Receipts and Errors ................38\n      8.3. PKCS
    #12 ..................................................39\n           8.3.1. Server-Side
    Key Generation Request .................39\n           8.3.2. Server-Side Key
    Generation Response ................39\n   9. PAL and Certificate Enrollment .................................40\n
    \  10. Security Considerations .......................................43\n   11.
    IANA Considerations ...........................................44\n      11.1.
    PAL Name Space ...........................................44\n      11.2. PAL
    XML Schema ...........................................44\n      11.3. PAL Package
    Types ........................................44\n   12. References ....................................................45\n
    \     12.1. Normative References .....................................45\n      12.2.
    Informative References ...................................50\n   Appendix A. Example
    Use of PAL ....................................51\n   Appendix B. Additional CSR
    Attributes .............................53\n   Acknowledgements ..................................................54\n
    \  Author's Address ..................................................54\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The EST (Enrollment over Secure Transport) protocol [RFC7030]
    defines\n   the Well-Known URI (Uniform Resource Identifier) -- /.well-known/est\n
    \  -- to support selected services related to the PKI (Public Key\n   Infrastructure),
    with such PCs (path components) as simple enrollment\n   with /simpleenroll, rekey
    or renew with /simplereenroll, etc.  A\n   server that wishes to support additional
    PKI-related services and\n   other security-related packages could use the same
    .well-known URI by\n   defining additional PCs.  This document defines six such
    PCs:\n   o  /pal - The PAL (Package Availability List) provides a list of all\n
    \     known packages available and authorized for a client.  By\n      accessing
    the service provided by this PC first, the client can\n      walk through the
    PAL and download all the packages necessary to\n      begin operating securely.
    \ The PAL essentially points to other\n      PCs, including the PCs defined in
    this document as well as those\n      defined in [RFC7030] (e.g., /cacerts, /simpleenroll,\n
    \     /simplereenroll, /fullcmc, /serverkeygen, and /csrattrs).  The\n      /pal
    PC is described in Section 2.\n   o  /eecerts - EE (End-Entity) certificates [RFC5280]
    are needed by\n      the client when they invoke a security protocol for communicating\n
    \     with a peer (i.e., they become operational and do something\n      meaningful
    as opposed to just communicating with the\n      infrastructure).  If the infrastructure
    knows the certificate(s)\n      needed by the client, then providing the peer's
    certificate avoids\n      the client having to discover the peer's certificate.
    \ This\n      service is not meant to be a general-purpose repository to which\n
    \     clients query a \"repository\" and then get a response; this is\n      purely
    a push mechanism.  The /eecerts PC is described in\n      Section 3.\n   o  /crls
    - CRLs (Certificate Revocation Lists) and ARLs (Authority\n      Revocation Lists)
    [RFC5280] are also needed by the client when\n      they validate certificate
    paths.  CRLs (and ARLs) from TAs (Trust\n      Anchors) and intermediate CAs (Certification
    Authorities) are\n      needed to validate the certificates used to generate the
    client's\n      certificate or the peer's certificate, which is provided by the\n
    \     /eecerts PC, and providing them saves the client from having to\n      \"discover\"
    them and then retrieve them.  CRL \"discovery\" is\n      greatly aided by the
    inclusion of the CRL Distribution Point\n      certificate extension [RFC5280],
    but this extension is not always\n      present in certificates and requires another
    connection to\n      retrieve them.  Like the /eecerts PC, this service is not
    meant to\n      be a general-purpose repository to which clients query a\n      repository
    and then get a response; this is purely a push\n      mechanism.  The /crls PC
    is described in Section 4.\n   o  /symmetrickeys - In some cases, clients use
    symmetric keys\n      [RFC6031] when communicating with their peers.  If the client's\n
    \     peers are known by the server a priori, then providing them saves\n      the
    client or an administrator from later having to find,\n      retrieve, and install
    them.  Like the /eecerts and /crls PCs, this\n      service is not meant to be
    a general-purpose repository to which\n      clients query a repository and then
    get a response; this is purely\n      a push mechanism for the keys themselves.
    \ However, things do not\n      always go as planned, and clients need to inform
    the server about\n      any errors.  If things did go well, then the client, if
    requested,\n      needs to provide a receipt [RFC7191].  The /symmetrickeys and\n
    \     /symmetrickeys/return PCs are described in Section 5.\n   o  /firmware -
    Some client firmware and software support automatic\n      update mechanisms,
    and some do not.  For those that do not, the\n      /firmware PC provides a mechanism
    for the infrastructure to inform\n      the client that firmware and software
    updates [RFC4108] are\n      available.  Because updates do not always go as planned
    and\n      because sometimes the server needs to know whether the firmware\n      was
    received and processed, this PC also provides a mechanism to\n      return errors
    and receipts.  The /firmware and /firmware/return\n      PCs are defined in Section
    6.\n   o  /tamp - To control the TAs in client TA databases, servers use the\n
    \     /tamp PC to request that clients retrieve TAMP (Trust Anchor\n      Management
    Protocol) query, update, and adjust packages [RFC5934],\n      and clients use
    the /tamp/return PC to return TAMP responses,\n      confirms, and errors [RFC5934].
    \ The /tamp and /tamp/return PCs\n      are defined in Section 7.\n   This document
    also extends the /est/serverkeygen PC [RFC7030] to\n   support the following (see
    Section 8):\n   o  Returning asymmetric key package receipts and errors [RFC7191].\n
    \  o  Encapsulating returned asymmetric keys in additional CMS\n      (Cryptographic
    Message Syntax) content types [RFC7193].\n   o  Returning server-generated public
    key pairs encapsulated in\n      PKCS #12 (Public Key Cryptography Standard #12)
    [RFC7292].\n   While the motivation is to provide packages to clients during\n
    \  enrollment so that they can perform securely after enrollment, the\n   services
    defined in this specification can be used after enrollment.\n"
  - contents:
    - "1.1.  Definitions\n   Familiarity with the following specifications is assumed:\n
      \  o  \"Using Cryptographic Message Syntax (CMS) to Protect Firmware\n      Packages\"
      [RFC4108]\n   o  \"Certificate Management over CMS (CMC)\" [RFC5272]\n   o  \"Cryptographic
      Message Syntax (CMS) Encrypted Key Package Content\n      Type\" [RFC6032]\n
      \  o  \"Cryptographic Message Syntax (CMS)\" [RFC5652]\n   o  \"Additional New
      ASN.1 Modules for the Cryptographic Message Syntax\n      (CMS) and the Public
      Key Infrastructure Using X.509 (PKIX)\"\n      [RFC6268]\n   o  \"Trust Anchor
      Management Protocol (TAMP)\" [RFC5934]\n   o  \"Cryptographic Message Syntax
      (CMS) Content Constraints Extension\"\n      [RFC6010]\n   o  \"Cryptographic
      Message Syntax (CMS) Symmetric Key Package Content\n      Type\" [RFC6031]\n
      \  o  \"Enrollment over Secure Transport\" [RFC7030]\n   o  \"Cryptographic
      Message Syntax (CMS) Key Package Receipt and Error\n      Content Types\" [RFC7191]\n
      \  Also, familiarity with the CMS protecting content types signed-data\n   and
      encrypted-data [RFC5652] is assumed.  The CMS encrypted key\n   package is defined
      in [RFC6032].\n   In addition to the definitions found in [RFC7030], the following\n
      \  definitions are used in this document:\n   Agent: An entity that performs
      functions on behalf of a client.\n      Agents can service a) one or more clients
      on the same network as\n      the server, b) clients on non-IP-based networks,
      or c) clients\n      that have a non-electronic air gap [RFC4949] between themselves\n
      \     and the server.  Interactions between the agent and client in the\n      last
      two cases are beyond the scope of this document.  Before an\n      agent can
      service clients, the agent must have a trust\n      relationship with the server
      (i.e., be authorized to act on behalf\n      of clients).\n   Client: A device
      that ultimately consumes and uses the packages to\n      enable communications.
      \ In other words, the client is the endpoint\n      for the packages, and an
      agent may have one or more clients.  To\n      avoid confusion, this document
      henceforth uses the term \"client\"\n      to refer to both agents and clients.\n
      \  Package: An object that contains one or more content types.  There\n      are
      numerous types of packages, e.g., packages for asymmetric\n      keys, symmetric
      keys, encrypted keys, CRLs, firmware, and TAMP.\n      See Section 2.1.1.  All
      of these packages are digitally signed by\n      their creator and encapsulated
      in a CMS signed-data [RFC5652]\n      [RFC6268] (except the public key certificates
      and CRLs that are\n      already digitally signed by a CA): firmware receipts
      and errors;\n      TAMP responses, confirms, and errors; and \"key package\"
      receipts\n      and errors that can be optionally signed.  Certificates and
      CRLs\n      are included in a package that uses signed-data, which is often\n
      \     referred to as a \"degenerate CMS\", or as a \"certs-only\" [RFC5751]\n
      \     [RFC6268] or \"crls-only\" message (see Section 4.2), but no\n      signature
      or content is present -- hence the names \"certs-only\"\n      and \"crls-only\".\n
      \     Note: As per [RFC7030], the creator may or may not be the EST\n      server
      or the EST CA.\n"
    title: 1.1.  Definitions
  - contents:
    - "1.2.  Authentication and Authorization\n   Client and server authentication
      as well as client and server\n   authorization are as defined in [RFC7030].
      \ The requirements for each\n   are discussed in the \"request\" and \"response\"
      sections (e.g.,\n   Sections 3.1 and 3.2 of this document) of each of the PCs
      defined\n   herein.\n   The requirements for the TA databases are as specified
      in [RFC7030]\n   as well.\n"
    title: 1.2.  Authentication and Authorization
  - contents:
    - "1.3.  TLS Cipher Suites\n   TLS (Transport Layer Security) cipher suites and
      issues associated\n   with them are as defined in [RFC7030].\n"
    title: 1.3.  TLS Cipher Suites
  - contents:
    - "1.4.  URI Configuration\n   As specified in Section 3.1 of [RFC7030], the client
      is configured\n   with sufficient information to form the server URI [RFC3986].
      \ Like\n   EST, this configuration mechanism is beyond the scope of this\n   document.\n"
    title: 1.4.  URI Configuration
  - contents:
    - "1.5.  Message Types\n   This document uses existing media types for the messages
      as specified\n   by \"Internet X.509 Public Key Infrastructure Operational Protocols:\n
      \  FTP and HTTP\" [RFC2585], \"The application/pkcs10 Media Type\"\n   [RFC5967],
      and \"Certificate Management over CMS (CMC)\" [RFC5272].\n   For consistency
      with [RFC5273], each distinct EST message type uses\n   an HTTP Content-Type
      header with a specific media type.\n   The EST messages, their corresponding
      media types for each operation,\n   and the sections that provide request and
      response information are as\n   follows:\n +-------------------+---------------------------------+---------------+\n
      | Message type      | Request media type              | Request       |\n |
      \                  | Response media type(s)          | Response      |\n | (per
      operation)   | Source(s) of types              |               |\n +===================+=================================+===============+\n
      | Locate Available  | N/A                             | Section 2.2   |\n |
      Packages          | application/xml or              | Section 2.3   |\n |                   |
      application/json                |               |\n |                   | [RFC7303]
      [RFC8259]             |               |\n | /pal              |                                 |
      \              |\n +===================+=================================+===============+\n
      | Distribute EE     | N/A                             | Section 3.1   |\n |
      Certificates      | application/pkcs7-mime          | Section 3.2   |\n |                   |
      [RFC5751]                       |               |\n | /eecerts          |                                 |
      \              |\n +===================+=================================+===============+\n
      | Distribute CRLs   | N/A                             | Section 4.1   |\n |
      \                  | application/pkcs7-mime          | Section 4.2   |\n |                   |
      [RFC5751]                       |               |\n | /crls             |                                 |
      \              |\n +===================+=================================+===============+\n
      | Symmetric Key     | N/A                             | Section 5.1.1 |\n |
      Distribution      | application/cms                 | Section 5.1.2 |\n |                   |
      [RFC7193]                       |               |\n | /symmetrickeys    |                                 |
      \              |\n +===================+=================================+===============+\n
      | Return Symmetric  | application/cms                 | Section 5.2.1 |\n |
      Key               | N/A                             | Section 5.2.2 |\n | Receipts/Errors
      \  | [RFC7193]                       |               |\n |                   |
      \                                |               |\n | /symmetrickeys/   |                                 |
      \              |\n |    return         |                                 |               |\n
      +===================+=================================+===============+\n |
      Firmware          | N/A                             | Section 6.1.1 |\n | Distribution
      \     | application/cms                 | Section 6.1.2 |\n |                   |
      [RFC7193]                       |               |\n | /firmware         |                                 |
      \              |\n +===================+=================================+===============+\n
      | Return Firmware   | application/cms                 | Section 6.2.1 |\n |
      Receipts/Errors   | N/A                             | Section 6.2.2 |\n |                   |
      [RFC7193]                       |               |\n | /firmware/return  |                                 |
      \              |\n +===================+=================================+===============+\n
      | Trust Anchor      | N/A                             | Section 7.1.1 |\n |
      Management        | application/                    | Section 7.1.2 |\n |                   |
      \  tamp-status-query             |               |\n |                   |   tamp-update
      \                  |               |\n |                   |   tamp-apex-update
      \             |               |\n |                   |   tamp-community-update
      \        |               |\n |                   |   tamp-sequence-adjust          |
      \              |\n |                   | [RFC5934]                       |               |\n
      | /tamp             |                                 |               |\n +===================+=================================+===============+\n
      | Return TAMP       | application/                    | Section 7.2.1 |\n |
      Responses/        |   tamp-status-response          |               |\n | Confirms/
      \        |   tamp-update-confirm           |               |\n | Errors            |
      \  tamp-apex-update-confirm      |               |\n |                   |   tamp-community-update-confirm
      |               |\n |                   |   tamp-sequence-adjust-confirm  |
      \              |\n |                   |   tamp-error                    |               |\n
      |                   | N/A                             | Section 7.2.2 |\n |
      \                  | [RFC5934]                       |               |\n | /tamp/return
      \     |                                 |               |\n +===================+=================================+===============+\n
      | Server-Side Key   | application/pkcs10 with         | Section 8.1   |\n |
      Generation        | content type attribute          |               |\n |                   |
      CSR*                            |               |\n |                   | application/cms
      \                | Section 8.1   |\n | /serverkeygen     | [RFC5967] [RFC7193]
      [RFC7030]   |               |\n +===================+=================================+===============+\n
      | Return Asymmetric | application/cms                 | Section 8.2   |\n |
      Key               | N/A                             | Section 8.2   |\n | Receipts/Errors
      \  | [RFC7193]                       |               |\n |                   |
      \                                |               |\n | /serverkeygen/    |                                 |
      \              |\n |    return         |                                 |               |\n
      +===================+=================================+===============+\n |
      Server-Side Key   | application/pkcs10              | Section 8.3.1 |\n | Generation:
      \      | application/pkcs12              | Section 8.3.2 |\n | PKCS #12          |
      [RFC5967] [RFC7193] [RFC7030]   |               |\n |                   |                                 |
      \              |\n | /serverkeygen     |                                 |               |\n
      +===================+=================================+===============+\n    *
      Certificate Signing Request\n"
    title: 1.5.  Message Types
  - contents:
    - "1.6.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.6.  Key Words
  title: 1.  Introduction
- contents:
  - "2.  Locate Available Packages\n   The PAL (Package Availability List) is either
    an XML (Extensible\n   Markup Language) [XML] or JSON (JavaScript Object Notation)
    [RFC8259]\n   object available through the /pal PC, which furnishes the following\n
    \  information to clients:\n   o  Advertisements for available packages that can
    be retrieved from\n      the server;\n   o  Notifications to begin public key
    certificate management or to\n      return package receipts and errors; and\n
    \  o  Advertisement for another PAL.\n   After being configured (see Section 1.4),
    the client can use this\n   service to retrieve its PAL (see Section 2.1), which,
    if properly\n   constructed (see Section 2.3), allows the client to determine
    some or\n   all of the security-related packages needed for bootstrapping.  Each\n
    \  PAL entry refers to other PCs (as defined in this document and in\n   [RFC7030])
    that clients use to a) retrieve packages that are\n   available to them (e.g.,
    CA certificates, firmware, trust anchors,\n   symmetric keys, and asymmetric keys)
    or b) receive notifications to\n   initiate public key certificate enrollment.
    \ PAL entries can also be\n   used to notify clients that they are to return receipts
    or errors for\n   certain packages (see Section 2.1.1).  Placing these entries
    after\n   entries that clients used to retrieve the packages is the same as\n
    \  requesting receipts in the originally distributed package.  Figure 1\n   provides
    a ladder diagram for the /pal PC protocol flow.  Appendix A\n   provides a detailed
    example.\n                           |                      |\n                 Client
    \   |     Establish TLS    |    Server\n                           |        Session
    \      |\n                           |<-------------------->|\n                           |
    \                     |\n                           |          Request PAL |\n
    \                          |   (HTTP GET Request) |\n                           |--------------------->|\n
    \                          |<---------------------|\n                           |
    Deliver PAL          |\n                           | (HTTP GET Response)  |\n
    \                          |                      |\n                           |
    Request package by   |\n                           | specified URI        |\n
    \                          | (HTTP GET or POST    |\n                           |
    \ Request)            |\n                           |--------------------->|\n
    \                          |<---------------------|\n                           |
    Deliver requested    |\n                           | CMS package product  |\n
    \                          | (HTTP GET or POST    |\n                           |
    \ Response)           |\n                           |                      |\n
    \                            Repeat as necessary.\n                      Figure
    1: /pal Message Sequence\n   PALs are designed to support an arbitrary number
    of entries, but for\n   PALs that need to be divided for any reason, there is
    a special PAL\n   entry type that constitutes a collection of \"PAL package types\".\n
    \  Package type 0001 (\"Additional PAL value present\") refers to another\n   PAL.
    \ See Sections 2.1 and 2.1.1.  If present, the 0001 package type\n   is always
    last because other entries after it are ignored.  Also, in\n   order to avoid
    needlessly dereferencing URIs, the 0001 package type\n   cannot be the only PAL
    entry.  In addition to using the PAL during\n   bootstrapping, clients can be
    configured to periodically poll the\n   server to determine if updated packages
    are available for them.  Note\n   that the mechanism to configure how often clients
    poll the server is\n   beyond the scope of this document.  However, there are
    some services\n   that support indicating when a client should retry its request
    (e.g.,\n   simple enrollment and re-enroll responses include the Retry-After\n
    \  header [RFC7030]).\n   As noted earlier, the PAL supports two variants: XML
    and JSON.\n   Clients include the HTTP Accept header [RFC7231] when they connect
    to\n   the server to indicate whether they support XML or JSON.\n   The client
    MUST authenticate the server as specified in [RFC7030],\n   and the client MUST
    check the server's authorization as specified in\n   [RFC7030].\n   The server
    MUST authenticate the client as specified in [RFC7030],\n   and the server MUST
    check the client's authorization as specified in\n   [RFC7030].\n   PAL support
    is OPTIONAL.  It is shown in figures throughout this\n   document, but clients
    need not support the PAL to access services\n   offered by the server.\n"
  - contents:
    - "2.1.  PAL Format\n   Each PAL is composed of zero or more entries.  Each entry
      is composed\n   of four fields -- type, date, size, and info -- whose semantics\n
      \  follow:\n   Note: Both XML elements and JSON values are described below.
      \ XML\n   elements are enclosed in angle brackets (<>), and JSON values are\n
      \  enclosed in single quotes ('').  When described together, they are\n   enclosed
      in square brackets ([]) separated by a vertical bar (|).\n   o  [<type> | 'type']
      uniquely identifies each package that a client\n      may retrieve from the
      server with a 4-digit string.\n      [<type> | 'type'] MUST be present.  The
      PAL package types are\n      defined in Section 2.1.1.\n   o  [<date> | 'date']
      indicates one of the following:\n      *  The date and time that the client
      last successfully downloaded\n         the identified package from the server.
      \ [<date> | 'date'] MUST\n         be represented as Generalized Time with 20
      characters:\n         YYYY-MM-DDTHH:MM:SSZ; <date> matches the dateTime production
      in\n         \"canonical representation\" [XMLSCHEMA]; 'date' is a string.\n
      \        Implementations SHOULD NOT rely on time resolution finer than\n         seconds
      and MUST NOT generate time instants that specify\n         leap seconds.\n      *
      \ The omission of [<date> | 'date'] indicates the following:\n         -  There
      is no indication that the client has successfully\n            downloaded the
      identified package, or\n         -  The PAL entry corresponds to a pointer to
      the next PAL, or\n            the server is requesting a package from the client
      (e.g.,\n            certification request, receipt, error).\n   o  [<size> |
      'size'] indicates the size in bytes of the package;\n      <size> is a nonNegativeInteger,
      and 'size' is a number.  A package\n      size of zero (i.e., \"0\" without
      the quotes) indicates that the\n      client needs to begin a transaction, return
      an error, or return a\n      receipt.  [<size> | 'size'] MUST be present.\n
      \  o  [<info> | 'info'] provides an SKI (Subject Key Identifier), a DN\n      (Distinguished
      Name), an Issuer and Serial Number tuple, or a URI,\n      i.e., it is a choice
      between these four items, all of which are\n      defined in [RFC5280].  When
      a URI [RFC3986] is included,\n      [<uri> | 'uri'] indicates the location where
      the identified\n      package can be retrieved.  When a DN, an SKI, or an Issuer
      Name\n      and Serial Number tuple is included, it points to a certificate\n
      \     that is the subject of the notification (i.e., the certificate to\n      be
      rekeyed or renewed); [<dn> | 'dn'] is encoded as a string with\n      the format
      defined in [RFC4514]; <ski> is a hexBinary, and 'ski'\n      is a string of
      hex digits (i.e., 0-9, a-f, and A-F);\n      [<iasn> | 'iasn'] includes both
      [<issuer> | 'issuer'] and\n      [<serial> | 'serial'] as a complexType in XML
      and an object in\n      JSON.  [<issuer> | 'issuer'] is a DN encoded as a string
      with the\n      format defined in [RFC4514]; <serial> is a positiveInteger,
      and\n      'serial' is a number.  [<info> | 'info'] MUST be present, and\n      [<info>
      | 'info'] MUST include exactly one [<dn> | 'dn'],\n      [<ski> | 'ski'], [<iasn>
      | 'iasn'], or [<uri> | 'uri'].\n   Clients are often limited by the size of
      objects they can consume;\n   the PAL is not immune to these limitations.  As
      opposed to picking a\n   limit for all clients, a special package type (0001)
      is defined (see\n   Section 2.1.1) to indicate that another PAL is available.
      \ Servers\n   can use this value to limit the size of the PALs provided to clients.\n
      \  The mechanism for servers to know client PAL size limits is beyond\n   the
      scope of this document; one possible solution is through\n   provisioned information.\n"
    - contents:
      - "2.1.1.  PAL Package Types\n   Table 1 lists the PAL package types that are
        defined by this\n   document:\n   Package    Package Description\n   Number\n
        \  --------   ---------------------------------------------------\n   0000
        \      Reserved\n   0001       Additional PAL value present\n   0002       X.509
        CA certificate\n   0003       X.509 EE certificate\n   0004       X.509 ARL\n
        \  0005       X.509 CRL\n   0006       Start DS certificate enrollment with
        CSR attribute\n   0007       Start DS certificate enrollment\n   0008       DS
        certificate enrollment (success)\n   0009       DS certificate enrollment
        (failure)\n   0010       Start DS certificate re-enrollment\n   0011       DS
        certificate re-enrollment (success)\n   0012       DS certificate re-enrollment
        (failure)\n   0013       Start KE certificate enrollment with CSR attribute\n
        \  0014       Start KE certificate enrollment\n   0015       KE certificate
        enrollment (success)\n   0016       KE certificate enrollment (failure)\n
        \  0017       Start KE certificate re-enrollment\n   0018       KE certificate
        re-enrollment (success)\n   0019       KE certificate re-enrollment (failure)\n
        \  0020       Asymmetric Key Package (PKCS #8)\n   0021       Asymmetric Key
        Package (CMS)\n   0022       Asymmetric Key Package (PKCS #12)\n   0023       Asymmetric
        Key Package Receipt or Error\n   0024       Symmetric Key Package\n   0025
        \      Symmetric Key Package Receipt or Error\n   0026       Firmware Package\n
        \  0027       Firmware Package Receipt or Error\n   0028       TAMP Status
        Query\n   0029       TAMP Status Query Response or Error\n   0030       Trust
        Anchor Update\n   0031       Trust Anchor Update Confirm or Error\n   0032
        \      Apex Trust Anchor Update\n   0033       Apex Trust Anchor Update Confirm
        or Error\n   0034       Community Update\n   0035       Community Update Confirm
        or Error\n   0036       Sequence Number Adjust\n   0037       Sequence Number
        Adjust Confirm or Error\n                        Table 1: PAL Package Types\n
        \  Note: \"CSR\" is Certificate Signing Request, \"DS\" is Digital\n   Signature,
        and \"KE\" is Key Establishment.\n   PAL package types are essentially hints
        about the type of package the\n   client is about to retrieve or is asked
        to return.  Savvy clients can\n   parse the packages to determine what has
        been provided, but in some\n   instances it is better to know before retrieving
        the package.  The\n   hint provided here does not obviate the need for clients
        to check the\n   type of package provided before they store it, possibly in
        specially\n   allocated locations (i.e., some clients might store Root ARLs\n
        \  separately from intermediate CRLs).  For packages provided by the\n   client,
        the server is asking the client to provide an enrollment\n   package, receipt,
        response, confirm, or error.\n   The PAL package types have the following
        meanings:\n   Note: The semantics behind Codes 0002 and 0006-0021 are defined
        in\n   [RFC7030].\n   0000 Reserved: Reserved for future use.\n   0001 Additional
        PAL value present: Indicates that this PAL entry\n        refers to another
        PAL by referring to another /pal URI, which is\n        defined in this section.
        \ This PAL package type limits the size\n        of PALs to a more manageable
        size for clients.  If this PAL\n        package type appears, it MUST be the
        last entry in the PAL.\n        Additionally, in order to avoid needlessly
        dereferencing URIs,\n        this PAL package type MUST NOT be the only entry.\n
        \  0002 X.509 CA certificate: Indicates that one or more CA certificates\n
        \       [RFC5280] are available for the client by pointing to a\n        /cacerts
        URI, which is defined in [RFC7030].\n   0003 X.509 EE certificate: Indicates
        that one or more EE certificates\n        [RFC5280] are available for the
        client by pointing to an\n        /eecerts URI, which is defined in Section
        3.\n   0004 X.509 ARL: Indicates that one or more ARLs (Authority Revocation\n
        \       Lists) [RFC5280] are available for the client by pointing to a\n        /crls
        URI, which is defined in Section 4.\n   0005 X.509 CRL: Indicates that one
        or more CRLs (Certificate\n        Revocation Lists) [RFC5280] are available
        for the client by\n        pointing to a /crls URI, which is defined in Section
        4.\n   Note: See Section 9 for additional information about PAL and\n   certificate
        enrollment interaction.  See Appendix B for additional\n   informative information.\n
        \  0006 Start DS certificate enrollment with CSR: Indicates that the\n        client
        needs to begin enrolling its DS certificate (i.e., any\n        certificate
        for which the key usage extension will have a\n        digital signature set),
        using a template provided by the server\n        with a CSR (Certificate Signing
        Request) attribute (see\n        Appendix B).  The PAL entry points to a /csrattrs
        URI, which is\n        defined in [RFC7030].\n   0007 Start DS certificate
        enrollment: Indicates that the client needs\n        to begin enrolling its
        DS certificate.  The PAL entry points to\n        a /simpleenroll URI, which
        is defined in [RFC7030].\n   0008 DS certificate enrollment (success): Indicates
        that the client\n        needs to retrieve a successful certification response.
        \ The PAL\n        entry points to a /simpleenroll or a /fullcmc URI, both
        of which\n        are defined in [RFC7030].\n   0009 DS certificate enrollment
        (failure): Indicates that the client\n        needs to retrieve a failed certification
        response for a DS\n        certificate.  This PAL entry points to a /simpleenroll
        or a\n        /fullcmc URI.\n   0010 Start DS certificate re-enrollment: Indicates
        that the client\n        needs to rekey or renew a DS certificate.  The PAL
        entry points\n        to a /simplereenroll or a /fullcmc URI.\n   0011 DS
        certificate re-enrollment (success): See PAL package\n        type 0008.\n
        \  0012 DS certificate re-enrollment (failure): See PAL package\n        type
        0009.\n   Note: The KE (Key Establishment) responses that follow use the same\n
        \  URIs as DS certificates, except that the certificates' key usage\n   extension
        is set to only key agreement or key transport.\n   0013 Start KE certificate
        enrollment with CSR: See PAL package\n        type 0006.\n   0014 Start KE
        certificate enrollment: See PAL package type 0007.\n   0015 KE certificate
        enrollment (success): See PAL package type 0008.\n   0016 KE certificate enrollment
        (failure): See PAL package type 0009.\n   0017 Start KE certificate re-enrollment:
        See PAL package type 0010.\n   0018 KE certificate re-enrollment (success):
        See PAL package\n        type 0008.\n   0019 KE certificate re-enrollment
        (failure): See PAL package\n        type 0009.\n   Note: The variations in
        the asymmetric key packages are due to the\n   number of CMS content types
        that can be used to protect the\n   asymmetric key; the syntax for the asymmetric
        key is the same, but\n   additional ASN.1 is needed to include it in a signed-data
        (i.e., the\n   ASN.1 needs to be a CMS content type and not the private key
        info\n   type).  See Section 8 of this document for additional information.\n
        \  0020 Asymmetric Key Package (PKCS #8): Indicates that an asymmetric\n        key
        generated by the server is available for the client; the\n        package
        is an asymmetric key without additional encryption as\n        specified in
        Section 4.4.2 of [RFC7030].  The PAL entry points\n        to a /serverkeygen
        or a /fullcmc URI, which are defined in\n        [RFC7030].\n   0021 Asymmetric
        Key Package (CMS): See PAL package type 0020 (the\n        difference being
        that the package available is an asymmetric key\n        package [RFC5958]
        that is signed and encapsulated in a\n        signed-data content type, as
        specified in Section 4.4.2 of\n        [RFC7030]).  Also, see Section 8.1
        of this document.\n   0022 Asymmetric Key Package (PKCS #12): See PAL package
        type 0020\n        (the difference being that the package available is the
        PKCS #12\n        [RFC7292] content type).  See Section 8.3 of this document.\n
        \  0023 Asymmetric Key Package Receipt or Error: Indicates that the\n        server
        wants the client to return a key package receipt or error\n        [RFC7191]
        to the /serverkeygen/return URI, which is defined in\n        Section 8.\n
        \  0024 Symmetric Key Package: Indicates that a symmetric key package\n        [RFC6031]
        is available for the client by pointing to a\n        /symmetrickeys URI,
        which is defined in Section 5.\n   0025 Symmetric Key Package Receipt or Error:
        Indicates that the\n        server wants the client to return a key package
        receipt or error\n        [RFC7191] to the /symmetrickeys/return URI, which
        is defined in\n        Section 5.\n   0026 Firmware Package: Indicates that
        a firmware package [RFC4108] is\n        available for the client, using the
        /firmware URI, which is\n        defined in Section 6.\n   0027 Firmware Package
        Receipt or Error: Indicates that the server\n        wants the client to return
        a firmware package load receipt or\n        error [RFC4108] to the /firmware/return
        URI, which is defined in\n        Section 6.\n   Note: The /tamp and tamp/return
        URIs are defined in Section 7.\n   0028 TAMP Status Query: Indicates that
        a TAMP Status Query package\n        [RFC5934] is available for the client,
        using the /tamp URI.\n   0029 TAMP Status Query Response or Error: Indicates
        that the server\n        wants the client to return a TAMP Status Query Response
        or Error\n        [RFC5934] to the /tamp/return URI.\n   0030 Trust Anchor
        Update: Indicates that a Trust Anchor Update\n        package [RFC5934] is
        available for the client, using the /tamp\n        URI.\n   0031 Trust Anchor
        Update Confirm or Error: Indicates that the server\n        wants the client
        to return a Trust Anchor Update Confirm or\n        Error [RFC5934] to the
        /tamp/return URI.\n   0032 Apex Trust Anchor Update: Indicates that an Apex
        Trust Anchor\n        Update package [RFC5934] is available for the client,
        using the\n        /tamp URI.\n   0033 Apex Trust Anchor Update Confirm or
        Error: Indicates that the\n        server wants the client to return an Apex
        Trust Anchor Update\n        Confirm or Error [RFC5934] to the /tamp/return
        URI.\n   0034 Community Update: Indicates that a Community Update package\n
        \       [RFC5934] is available for the client, using the /tamp URI.\n   0035
        Community Update Confirm or Error: Indicates that the server\n        wants
        the client to return a Community Update Confirm or Error\n        [RFC5934]
        to the /tamp/return URI.\n   0036 Sequence Number Adjust: Indicates that a
        Sequence Number Adjust\n        package [RFC5934] is available for the client,
        using the /tamp\n        URI.\n   0037 Sequence Number Adjust Confirm or Error:
        Indicates that the\n        server wants the client to return a Sequence Number
        Adjust\n        Confirm or Error [RFC5934] to the /tamp/return URI.\n"
      title: 2.1.1.  PAL Package Types
    - contents:
      - "2.1.2.  PAL XML Schema\n   The namespace is specified in Section 11.1.  The
        fields in the schema\n   were discussed earlier, in Sections 2.1 and 2.1.1.\n
        \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xsd:schema xmlns:xsd=\"https://www.w3.org/2001/XMLSchema\"\n
        \    xmlns:pal=\"urn:ietf:params:xml:ns:pal\"\n     targetNamespace=\"urn:ietf:params:xml:ns:pal\"\n
        \    elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\"\n
        \    version=\"1.0\">\n     <xsd:annotation>\n       <xsd:documentation>\n
        \        This schema defines the types and elements needed\n         to retrieve
        client packages from the server or for the\n         client to post packages
        to the server.\n       </xsd:documentation>\n     </xsd:annotation>\n     <!--
        ===== Element Declarations ===== -->\n     <xsd:element name=\"pal\" type=\"pal:PAL\"
        />\n     <!-- ===== Complex Data Element Type Definitions ===== -->\n     <xsd:complexType
        name=\"PAL\">\n       <xsd:annotation>\n         <xsd:documentation>\n           This
        type defines the Package Availability List (PAL).\n         </xsd:documentation>\n
        \      </xsd:annotation>\n       <xsd:sequence>\n         <xsd:element name=\"message\"
        type=\"pal:PALEntry\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\">\n
        \          <xsd:annotation>\n             <xsd:documentation>\n               This
        item contains information about the package\n               and a link that
        the client uses to download or post\n               the package.\n             </xsd:documentation>\n
        \          </xsd:annotation>\n         </xsd:element>\n       </xsd:sequence>\n
        \    </xsd:complexType>\n     <xsd:complexType name=\"PALEntry\">\n       <xsd:annotation>\n
        \        <xsd:documentation>\n           This type defines a product in the
        PAL.\n         </xsd:documentation>\n       </xsd:annotation>\n       <xsd:sequence>\n
        \        <xsd:element name=\"type\" type=\"pal:PackageType\" />\n         <xsd:element
        name=\"date\" type=\"pal:GeneralizedTimeType\"\n           minOccurs=\"0\"
        />\n         <xsd:element name=\"size\" type=\"xsd:nonNegativeInteger\">\n
        \          <xsd:annotation>\n             <xsd:documentation>\n               This
        item indicates the package's size.\n             </xsd:documentation>\n           </xsd:annotation>\n
        \        </xsd:element>\n         <xsd:element name=\"info\" type=\"pal:PackageInfoType\"
        />\n       </xsd:sequence>\n     </xsd:complexType>\n     <xsd:complexType
        name=\"PackageInfoType\">\n       <xsd:annotation>\n         <xsd:documentation>\n
        \          This type allows a choice of X.500 Distinguished Name,\n           Subject
        Key Identifier, Issuer and Serial Number tuple,\n           or URI.\n         </xsd:documentation>\n
        \      </xsd:annotation>\n       <xsd:choice>\n         <xsd:element name=\"dn\"
        \  type=\"pal:DistinguishedName\" />\n         <xsd:element name=\"ski\"  type=\"pal:SubjectKeyIdentifier\"
        />\n         <xsd:element name=\"iasn\" type=\"pal:IssuerAndSerialNumber\"
        />\n         <xsd:element name=\"uri\"  type=\"pal:ThisURI\" />\n       </xsd:choice>\n
        \    </xsd:complexType>\n     <xsd:complexType name=\"IssuerAndSerialNumber\">\n
        \      <xsd:annotation>\n         <xsd:documentation>\n           This type
        holds the issuer Distinguished Name and\n           serial number of a referenced
        certificate.\n         </xsd:documentation>\n       </xsd:annotation>\n       <xsd:sequence>\n
        \        <xsd:element name=\"issuer\" type=\"pal:DistinguishedName\" />\n
        \        <xsd:element name=\"serial\" type=\"xsd:positiveInteger\" />\n       </xsd:sequence>\n
        \    </xsd:complexType>\n     <!-- ===== Simple Data Element Type Definitions
        ===== -->\n     <xsd:simpleType name=\"PackageType\">\n       <xsd:annotation>\n
        \        <xsd:documentation>\n           This type identifies each package
        that a client may retrieve\n           from the server with a 4-digit string.\n
        \        </xsd:documentation>\n       </xsd:annotation>\n       <xsd:restriction
        base=\"xsd:string\">\n         <xsd:pattern value=\"d{4}\" />\n       </xsd:restriction>\n
        \    </xsd:simpleType>\n     <xsd:simpleType name=\"GeneralizedTimeType\">\n
        \      <xsd:annotation>\n         <xsd:documentation>\n           This type
        indicates the date and time (YYYY-MM-DDTHH:MM:SSZ)\n           that the client
        last acknowledged successful receipt of the\n           package; it is absent
        if a) there is no indication that the\n           package has been downloaded
        or b) the PAL entry corresponds\n           to a pointer to the next PAL.\n
        \        </xsd:documentation>\n       </xsd:annotation>\n       <xsd:restriction
        base=\"xsd:dateTime\">\n         <xsd:pattern value=\".*:d{2}Z\" />\n         <xsd:minInclusive
        value=\"2013-05-23T00:00:00Z\" />\n       </xsd:restriction>\n     </xsd:simpleType>\n
        \    <xsd:simpleType name=\"DistinguishedName\">\n       <xsd:annotation>\n
        \        <xsd:documentation>\n           This type holds an X.500 Distinguished
        Name.\n         </xsd:documentation>\n       </xsd:annotation>\n       <xsd:restriction
        base=\"xsd:string\">\n         <xsd:maxLength value=\"1024\" />\n       </xsd:restriction>\n
        \    </xsd:simpleType>\n     <xsd:simpleType name=\"SubjectKeyIdentifier\">\n
        \      <xsd:annotation>\n         <xsd:documentation>\n           This type
        holds a hex string representing the value of a\n           certificate's SubjectKeyIdentifier.\n
        \        </xsd:documentation>\n       </xsd:annotation>\n       <xsd:restriction
        base=\"xsd:hexBinary\">\n         <xsd:maxLength value=\"1024\" />\n       </xsd:restriction>\n
        \    </xsd:simpleType>\n     <xsd:simpleType name=\"ThisURI\">\n       <xsd:annotation>\n
        \        <xsd:documentation>\n           This type holds a URI but is length
        limited.\n         </xsd:documentation>\n       </xsd:annotation>\n       <xsd:restriction
        base=\"xsd:anyURI\">\n       <xsd:maxLength value=\"1024\" />\n       </xsd:restriction>\n
        \    </xsd:simpleType>\n   </xsd:schema>\n"
      title: 2.1.2.  PAL XML Schema
    - contents:
      - "2.1.3.  PAL JSON Object\n   The following is an example PAL JSON object.
        \ The fields in the\n   object were discussed earlier, in Sections 2.1 and
        2.1.1.\n   [\n     {\n       \"type\": \"0003\",\n       \"date\": \"2016-12-29T09:28:00Z\",\n
        \      \"size\": 1234,\n       \"info\":\n        {\n         \"uri\": \"https://www.example.com/.well-known/est/eecerts/1234\"\n
        \       }\n     },\n     {\n       \"type\": \"0006\",\n       \"date\": \"2016-12-29T09:28:00Z\",\n
        \      \"size\": 1234,\n       \"info\":\n        {\n         \"iasn\":\n
        \         {\n           \"issuer\": \"CN=Sean Turner,O=sn3rd,C=US\",\n           \"serial\":
        0\n          }\n        }\n     }\n   ]\n"
      title: 2.1.3.  PAL JSON Object
    title: 2.1.  PAL Format
  - contents:
    - "2.2.  Request PAL\n   Clients request their PAL with an HTTP GET [RFC7231],
      using an\n   operation path of \"/pal\".  Clients indicate whether they would
      prefer\n   XML or JSON by including the HTTP Accept header [RFC7231] with either\n
      \  \"application/xml\" or \"application/json\", respectively.\n"
    title: 2.2.  Request PAL
  - contents:
    - "2.3.  Provide PAL\n   If the server has a PAL for the client, the server response
      MUST\n   contain an HTTP 200 response code with a Content-Type of\n   \"application/xml\"
      [RFC7303] or \"application/json\" [RFC8259].\n   When the server constructs
      a PAL, an order of precedence for PAL\n   offerings is based on the following
      rationale:\n   o  /cacerts and /crls packages are the most important because
      they\n      support validation decisions on certificates used to sign and\n
      \     encrypt other listed PAL items.\n   o  /csrattrs are the next in importance,
      since they provide\n      information that the server would like the client
      to include in\n      its certificate enrollment request.\n   o  /simpleenroll,
      /simplereenroll, and /fullcmc packages are next in\n      importance, since
      they can impact a certificate used by the client\n      to sign CMS content
      or a certificate to establish keys for\n      encrypting content exchanged with
      the client.\n      *  A client engaged in certificate management SHOULD accept
      and\n         process CA-provided transactions as soon as possible to avoid\n
      \        undue delays that might lead to protocol failure.\n   o  /symmetrickeys,
      /firmware, /tamp, and /eecerts packages containing\n      keys and other types
      of products are last.  Precedence SHOULD be\n      given to packages that the
      client has not previously downloaded.\n      The items listed in a PAL may not
      identify all of the packages\n      available for a device.  This can be for
      any of the following\n      reasons:\n      *  The server may temporarily withhold
      some outstanding PAL items\n         to simplify client processing.\n      *
      \ If a CA has more than one certificate ready for the client, the\n         server
      will provide a notice for one at a time.  Pending\n         notices will be
      serviced in order, according to the date when\n         the certificate will
      be used (earliest date first).\n   When rejecting a request, the server specifies
      either an HTTP 4xx\n   error or an HTTP 5xx error.\n   All other return codes
      are handled as specified in Section 4.2.3 of\n   [RFC7030] (i.e., 202 handling
      and all other HTTP response codes).\n"
    title: 2.3.  Provide PAL
  title: 2.  Locate Available Packages
- contents:
  - "3.  Distribute EE Certificates\n   Numerous mechanisms exist for clients to query
    repositories for\n   certificates.  The service provided by the /eecerts PC is
    different\n   in that it is not a general-purpose query for client certificates;\n
    \  instead, it allows the server to provide peer certificates to a\n   client
    that the server knows through an out-of-band mechanism that\n   the client will
    be communicating with.  For example, a router being\n   provisioned that connects
    to two peers can be provisioned with not\n   only its certificate but also with
    the peers' certificates.\n   The server need not authenticate or authorize the
    client for\n   distributing an EE certificate, because the package contents are\n
    \  already signed by a CA (i.e., the certificate(s) in a certs-only\n   message
    has already been signed by a CA).  The message flow is\n   similar to Figure 1,
    except that the connection need not be HTTPS:\n                          |                      |\n
    \               Client    |    Establish TLS     |    Server\n                          |
    \      Session        |\n                          |<-------------------->|\n
    \                         |                      |\n                          |
    \         Request PAL |\n                          |   (HTTP GET Request) |\n
    \                         |--------------------->|\n                          |<---------------------|\n
    \                         | Deliver PAL          |\n                          |
    (HTTP GET Response)  |\n                          |                      |\n                          |
    \  Request EE Cert(s) |\n                          |   (HTTP GET Request) |\n
    \                         |--------------------->|\n                          |<---------------------|\n
    \                         | Deliver EE Cert(s)   |\n                          |
    (HTTP GET Response)  |\n                          |                      |\n                    Figure
    2: /eecerts Message Sequence\n"
  - contents:
    - "3.1.  EE Certificate Request\n   Clients request EE certificates with an HTTP
      GET [RFC7231], using an\n   operation path of \"/eecerts\".\n"
    title: 3.1.  EE Certificate Request
  - contents:
    - "3.2.  EE Certificate Response\n   The response and processing of the returned
      error codes are identical\n   to what is described in Section 4.1.3 of [RFC7030],
      except that the\n   certificate provided is not the one issued to the client;
      instead,\n   one or more client's peer certificates are returned in the certs-only\n
      \  message.\n   Clients MUST reject EE certificates that do not validate to
      an\n   authorized TA.\n"
    title: 3.2.  EE Certificate Response
  title: 3.  Distribute EE Certificates
- contents:
  - "4.  Distribute CRLs and ARLs\n   CRLs (and ARLs) are needed in many instances
    to perform certificate\n   path validation [RFC5280].  They can be obtained from
    repositories if\n   their location is provided in the certificate.  However, the
    client\n   needs to parse the certificate and perform an additional round trip\n
    \  to retrieve them.  Providing CRLs during bootstrapping obviates the\n   need
    for the client to parse the certificate and aids those clients\n   who might be
    unable to retrieve the CRL.  Clients are free to obtain\n   CRLs on which they
    rely from sources other than the server (e.g., a\n   local directory).  The /crls
    PC allows servers to distribute CRLs at\n   the same time that clients retrieve
    their certificate(s) and CA\n   certificate(s) as well as peer certificates.\n
    \  The server need not authenticate or authorize the client for\n   distributing
    a CRL, because the package contents are already signed\n   by a CA (i.e., the
    CRLs in a crls-only message have already been\n   signed by a CA).  The message
    flow is as depicted in Figure 2 but\n   with \"CRL(s)\" instead of \"EE Cert(s)\".\n"
  - contents:
    - "4.1.  CRL Request\n   Clients request CRLs with an HTTP GET [RFC7231], using
      an operation\n   path of \"/crls\".\n"
    title: 4.1.  CRL Request
  - contents:
    - "4.2.  CRL Response\n   The response, and the processing of that response, are
      identical to\n   what is described in Section 4.1.3 of [RFC7030], except that
      instead\n   of providing the issued certificate one of more CRLs are returned
      in\n   the crls-only message.\n   Clients MUST reject CRLs that do not validate
      to an authorized TA.\n"
    title: 4.2.  CRL Response
  title: 4.  Distribute CRLs and ARLs
- contents:
  - "5.  Symmetric Keys, Receipts, and Errors\n   In addition to public keys, clients
    often need one or more symmetric\n   keys to communicate with their peers.  The
    /symmetrickeys PC allows\n   the server to distribute symmetric keys to clients.\n
    \  Distribution of keys does not always work as planned, and clients\n   need
    a way to inform the server that something has gone wrong; they\n   also need a
    way to inform the server, if asked, that the distribution\n   process has successfully
    completed.  The /symmetrickeys/return PC\n   allows clients to provide errors
    and receipts.\n   Clients MUST authenticate the server, and clients MUST check
    the\n   server's authorization.\n   The server MUST authenticate clients, and
    the server MUST check the\n   client's authorization.\n   HTTP GET [RFC7231] is
    used when the server provides the key to the\n   client (see Section 5.1), using
    the /symmetrickeys PC; HTTP POST\n   [RFC7231] is used when the client provides
    a receipt (see\n   Section 5.2) or an error (see Section 5.2) to the server with
    the\n   /symmetrickeys/return PC.\n"
  - contents:
    - "5.1.  Symmetric Keys\n   Servers use /symmetrickeys to provide symmetric keys
      to clients; the\n   symmetric key package is defined in [RFC6031].\n   As with
      the /serverkeygen PC defined in [RFC7030], the default method\n   for distributing
      the symmetric key uses the encryption mode of the\n   negotiated TLS cipher
      suite.  Keys are not protected by preferred\n   key-wrapping methods such as
      AES Key Wrap [RFC3394] or AES Key Wrap\n   with Padding [RFC5649], because encryption
      of the symmetric key\n   beyond that provided by TLS is OPTIONAL.  Therefore,
      the cipher suite\n   used to return the symmetric key MUST offer cryptographic
      strength\n   that is commensurate with the symmetric key being delivered to
      the\n   client.  The cipher suite used MUST NOT have the NULL encryption\n   algorithm,
      as this will disclose the unprotected symmetric key.  It\n   is strongly RECOMMENDED
      that servers always return encrypted\n   symmetric keys.\n   The following depicts
      the protocol flow:\n                         |                       |\n               Client
      \   |    Establish TLS      |    Server\n                         |       Session
      \        |\n                         |<--------------------->|\n                         |
      \                      |\n                         |          Request PAL  |\n
      \                        |   (HTTP GET Request)  |\n                         |---------------------->|\n
      \                        |<----------------------|\n                         |
      Deliver PAL           |\n                         | (HTTP GET Response)   |\n
      \                        |                       |\n                         |
      \   Req Symmetric Key  |\n                         |   (HTTP GET Request)  |\n
      \                        |---------------------->|\n                         |<----------------------|\n
      \                        | Deliver Symmetric Key |\n                         |
      (HTTP GET Response)   |\n                         |                       |\n
      \                Figure 3: /symmetrickeys Message Sequence\n"
    - contents:
      - "5.1.1.  Distribute Symmetric Keys\n   Clients request the symmetric key from
        the server with an HTTP GET\n   [RFC7231], using an operation path of \"/symmetrickeys\".\n"
      title: 5.1.1.  Distribute Symmetric Keys
    - contents:
      - "5.1.2.  Symmetric Key Response\n   If the request is successful, the server
        response MUST have an\n   HTTP 200 response code with a Content-Type of \"application/cms\"\n
        \  [RFC7193].  The optional application/cms encapsulatingContent and\n   innerContent
        parameters SHOULD be included with the Content-Type to\n   indicate the protection
        afforded to the returned symmetric key.  The\n   returned content varies:\n
        \  o  If additional encryption is not being employed, the content\n      associated
        with application/cms is a DER-encoded [X.690] symmetric\n      key package.\n
        \  o  If additional encryption is employed, the content associated with\n
        \     application/cms is DER-encoded enveloped-data that encapsulates a\n
        \     signed-data that further encapsulates a symmetric key package.\n   o
        \ If additional encryption and origin authentication are employed,\n      the
        content associated with application/cms is a DER-encoded\n      signed-data
        that encapsulates an enveloped-data that encapsulates\n      a signed-data
        that further encapsulates a symmetric key package.\n   o  If CCC (CMS Content
        Constraints) [RFC6010] is supported, the\n      content associated with application/cms
        is a DER-encoded encrypted\n      key package [RFC6032].  The encrypted key
        package provides three\n      choices to encapsulate keys: EncryptedData,
        EnvelopedData, and\n      AuthEnvelopedData.  Prior to employing one of these
        three\n      encryption choices, the key package can be encapsulated in a\n
        \     signed-data.\n   How the server knows whether the client supports the
        encrypted key\n   package is beyond the scope of this document.\n   When rejecting
        a request, the server specifies either an HTTP 4xx\n   error or an HTTP 5xx
        error.\n   If a symmetric key package (which might be signed) or an encrypted\n
        \  key package (which might be signed before and after encryption) is\n   digitally
        signed, the client MUST reject it if the digital signature\n   does not validate
        back to an authorized TA.\n   Note: Absent a policy on the client side requiring
        a signature, a\n   malicious EST server can simply strip the signature, thus
        bypassing\n   that check.  In that case, this requirement is merely a sanity
        check,\n   serving to detect mis-signed packages or misconfigured clients.\n
        \  [RFC3370], [RFC5753], [RFC5754], [RFC6033], [RFC6160], and [RFC6161]\n
        \  provide algorithm details for use when protecting the symmetric key\n   package
        and encrypted key package.\n"
      title: 5.1.2.  Symmetric Key Response
    title: 5.1.  Symmetric Keys
  - contents:
    - "5.2.  Symmetric Key Receipts and Errors\n   Clients use /symmetrickeys/return
      to provide symmetric key package\n   receipts; the key package receipt content
      type is defined in\n   [RFC7191].  Clients can be configured to automatically
      return\n   receipts after processing a symmetric key package, return receipts\n
      \  based on processing of the key-package-identifier-and-receipt-request\n   attribute
      [RFC7191], or return receipts when prompted by a PAL entry.\n   Servers can
      indicate that clients return a receipt by including the\n   key-package-identifier-and-receipt-request
      attribute in a signed-data\n   as a signed attribute.  However, this attribute
      only appears when\n   additional encryption is employed (see Section 5.1.2).\n
      \  Clients also use /symmetrickeys/return to return symmetric key\n   package
      errors; the key package error content type is defined in\n   [RFC7191].  Clients
      can be configured to automatically return errors\n   after processing a symmetric
      key package or based on a PAL entry.\n   The following depicts the protocol
      flow:\n                        |                      |\n              Client
      \   |    Establish TLS     |    Server\n                        |       Session
      \       |\n                        |<-------------------->|\n                        |
      \                     |\n                        |          Request PAL |\n
      \                       |   (HTTP GET Request) |\n                        |--------------------->|\n
      \                       |<---------------------|\n                        |
      Deliver PAL          |\n                        | (HTTP GET Response)  |\n                        |
      \                     |\n                        | Return Receipt/Error |\n
      \                       |  (HTTP POST Request) |\n                        |--------------------->|\n
      \                       |<---------------------|\n                        |
      (HTTP POST Response) |\n                        | status code only     |\n                        |
      no content           |\n                        |                      |\n             Figure
      4: /symmetrickeys/return Message Sequence\n"
    - contents:
      - "5.2.1.  Provide Symmetric Key Receipt or Error\n   Clients return symmetric
        key receipts and errors to the server with\n   an HTTP POST [RFC7231], using
        an operation path of\n   \"/symmetrickeys/return\".  The returned content
        varies:\n   o  The key package receipt is digitally signed [RFC7191]; the\n
        \     Content-Type is \"application/cms\" [RFC7193]; and the associated\n
        \     content is signed-data, which encapsulates a key package receipt.\n
        \  o  If the key package error is not digitally signed, the Content-Type\n
        \     is \"application/cms\" and the associated content is a key package\n
        \     error.  If the key package error is digitally signed, the\n      Content-Type
        is \"application/cms\" and the associated content is\n      signed-data, which
        encapsulates a key package error.\n   The optional application/cms encapsulatingContent
        and innerContent\n   parameters SHOULD be included with the Content-Type to
        indicate the\n   protection afforded to the receipt or error.\n   [RFC3370],
        [RFC5753], [RFC5754], and [RFC7192] provide algorithm\n   details for use
        when protecting the key package receipt or key\n   package error.\n"
      title: 5.2.1.  Provide Symmetric Key Receipt or Error
    - contents:
      - "5.2.2.  Symmetric Key Receipt or Error Response\n   If the client successfully
        provides a receipt or error, the server\n   response has an HTTP 204 response
        code (i.e., no content is\n   returned).\n   When rejecting a request, the
        server specifies either an HTTP 4xx\n   error or an HTTP 5xx error.\n   If
        a key package receipt or key package error is digitally signed,\n   the server
        MUST reject it if the digital signature does not validate\n   back to an authorized
        TA.\n"
      title: 5.2.2.  Symmetric Key Receipt or Error Response
    title: 5.2.  Symmetric Key Receipts and Errors
  title: 5.  Symmetric Keys, Receipts, and Errors
- contents:
  - "6.  Firmware, Receipts, and Errors\n   Servers can distribute object code for
    cryptographic algorithms and\n   software with the firmware package [RFC4108].\n
    \  Clients MUST authenticate the server, and clients MUST check the\n   server's
    authorization.\n   The server MUST authenticate the client, and the server MUST
    check\n   the client's authorization.\n   The /firmware PC uses an HTTP GET [RFC7231],
    and the /firmware/return\n   PC uses an HTTP POST [RFC7231].  GET is used when
    the client\n   retrieves firmware from the server (see Section 6.1); POST is used\n
    \  when the client provides a receipt (see Section 6.2) or an error (see\n   Section
    6.2).\n"
  - contents:
    - "6.1.  Firmware\n   The /firmware URI is used by servers to provide firmware
      packages to\n   clients.\n   The message flow is as depicted in Figure 3 modulo
      replacing\n   \"Symmetric Key\" with \"Firmware Package\".\n"
    - contents:
      - "6.1.1.  Distribute Firmware\n   Clients request firmware from the server
        with an HTTP GET [RFC7231],\n   using an operation path of \"/firmware\".\n"
      title: 6.1.1.  Distribute Firmware
    - contents:
      - "6.1.2.  Firmware Response\n   If the request is successful, the server response
        MUST have an\n   HTTP 200 response code with a Content-Type of \"application/cms\"\n
        \  [RFC7193].  The optional encapsulatingContent and innerContent\n   parameters
        SHOULD be included with the Content-Type to indicate the\n   protection afforded
        to the returned firmware.  The returned content\n   varies:\n   o  If the
        firmware is unprotected, then the Content-Type is\n      \"application/cms\"
        and the content is the DER-encoded [X.690]\n      firmware package.\n   o
        \ If the firmware is compressed, then the Content-Type is\n      \"application/cms\"
        and the content is the DER-encoded [X.690]\n      compressed data that encapsulates
        the firmware package.\n   o  If the firmware is encrypted, then the Content-Type
        is\n      \"application/cms\" and the content is the DER-encoded [X.690]\n
        \     encrypted-data that encapsulates the firmware package (which might\n
        \     be compressed prior to encryption).\n   o  If the firmware is signed,
        then the Content-Type is\n      \"application/cms\" and the content is the
        DER-encoded [X.690]\n      signed-data that encapsulates the firmware package
        (which might be\n      compressed, encrypted, or compressed and then encrypted
        prior to\n      signature).\n   How the server knows whether the client supports
        the unprotected,\n   signed, compressed, and/or encrypted firmware package
        is beyond the\n   scope of this document.\n   When rejecting a request, the
        server specifies either an HTTP 4xx\n   error or an HTTP 5xx error.\n   If
        a firmware package is digitally signed, the client MUST reject it\n   if the
        digital signature does not validate back to an authorized TA.\n   [RFC3370],
        [RFC5753], and [RFC5754] provide algorithm details for use\n   when protecting
        the firmware package.\n"
      title: 6.1.2.  Firmware Response
    title: 6.1.  Firmware
  - contents:
    - "6.2.  Firmware Receipts and Errors\n   Clients use the /firmware/return PC
      to provide firmware package load\n   receipts and errors [RFC4108].  Clients
      can be configured to\n   automatically return receipts and errors after processing
      a firmware\n   package or based on a PAL entry.\n   The message flow is as depicted
      in Figure 4 modulo the receipt or\n   error is for a firmware package.\n"
    - contents:
      - "6.2.1.  Provide Firmware Receipt or Error\n   Clients return firmware receipts
        and errors to the server with an\n   HTTP POST [RFC7231], using an operation
        path of \"/firmware/return\".\n   The optional encapsulatingContent and innerContent
        parameters SHOULD\n   be included with the Content-Type to indicate the protection
        afforded\n   to the returned firmware receipt or error.  The returned content\n
        \  varies:\n   o  If the firmware receipt is not digitally signed, the Content-Type\n
        \     is \"application/cms\" [RFC7193] and the content is the DER-encoded\n
        \     firmware receipt.\n   o  If the firmware receipt is digitally signed,
        the Content-Type is\n      \"application/cms\" and the content is the DER-encoded
        signed-data\n      encapsulating the firmware receipt.\n   o  If the firmware
        error is not digitally signed, the Content-Type is\n      \"application/cms\"
        and the content is the DER-encoded firmware\n      error.\n   o  If the firmware
        error is digitally signed, the Content-Type is\n      \"application/cms\"
        and the content is the DER-encoded signed-data\n      encapsulating the firmware
        error.\n   [RFC3370], [RFC5753], and [RFC5754] provide algorithm details for
        use\n   when protecting the firmware receipt or firmware error.\n"
      title: 6.2.1.  Provide Firmware Receipt or Error
    - contents:
      - "6.2.2.  Firmware Receipt or Error Response\n   If the request is successful,
        the server response MUST have an\n   HTTP 204 response code (i.e., no content
        is returned).\n   When rejecting a request, the server MUST specify either
        an HTTP 4xx\n   error or an HTTP 5xx error.\n   If a firmware receipt or firmware
        error is digitally signed, the\n   server MUST reject it if the digital signature
        does not validate back\n   to an authorized TA.\n"
      title: 6.2.2.  Firmware Receipt or Error Response
    title: 6.2.  Firmware Receipts and Errors
  title: 6.  Firmware, Receipts, and Errors
- contents:
  - "7.  Trust Anchor Management Protocol\n   Servers distribute TAMP packages to
    manage TAs in a client's trust\n   anchor databases; TAMP packages are defined
    in [RFC5934].  TAMP will\n   allow the flexibility for a device to load TAs while
    maintaining an\n   operational state.  Unlike other systems that require new software\n
    \  loads when new PKI Roots are authorized for use, TAMP allows for\n   automated
    management of roots for provisioning or replacement\n   as needed.\n   Clients
    MUST authenticate the server, and clients MUST check the\n   server's authorization.\n
    \  The server MUST authenticate the client, and the server MUST check\n   the
    client's authorization.\n   The /tamp PC uses an HTTP GET [RFC7231], and the tamp/return
    PC uses\n   an HTTP POST [RFC7231].  GET is used when the server requests that\n
    \  the client retrieve a TAMP package (see Section 7.1); POST is used\n   when
    the client provides a confirm (see Section 7.2), provides a\n   response (see
    Section 7.2), or provides an error (see Section 7.2)\n   for the TAMP package.\n"
  - contents:
    - "7.1.  TAMP Status Query, Trust Anchor Update, Apex Trust Anchor Update,\n      Community
      Update, and Sequence Number Adjust\n   Clients use the /tamp PC to retrieve
      the TAMP packages: TAMP Status\n   Query, Trust Anchor Update, Apex Trust Anchor
      Update, Community\n   Update, and Sequence Number Adjust.  Clients can be configured
      to\n   periodically poll the server for these packages or contact the server\n
      \  based on a PAL entry.\n   The message flow is as depicted in Figure 3 modulo
      replacing\n   \"Symmetric Key\" with the appropriate TAMP message.\n"
    - contents:
      - "7.1.1.  Request TAMP Packages\n   Clients request the TAMP packages from
        the server with an HTTP GET\n   [RFC7231], using an operation path of \"/tamp\".\n"
      title: 7.1.1.  Request TAMP Packages
    - contents:
      - "7.1.2.  Return TAMP Packages\n   If the request is successful, the server
        response MUST have an\n   HTTP 200 response code and a Content-Type of:\n
        \  o  application/tamp-status-query for TAMP Status Query\n   o  application/tamp-update
        for Trust Anchor Update\n   o  application/tamp-apex-update for Apex Trust
        Anchor Update\n   o  application/tamp-community-update for Community Update\n
        \  o  application/tamp-sequence-adjust for Sequence Number Adjust\n   As specified
        in [RFC5934], these content types are digitally signed\n   and clients must
        support validating the packages directly signed by\n   TAs.  For this specification,
        clients MUST support validation with a\n   certificate and clients MUST reject
        it if the digital signature does\n   not validate back to an authorized TA.\n
        \  [RFC3370], [RFC5753], and [RFC5754] provide algorithm details for use\n
        \  when protecting the TAMP packages.\n"
      title: 7.1.2.  Return TAMP Packages
    title: 7.1.  TAMP Status Query, Trust Anchor Update, Apex Trust Anchor Update,
  - contents:
    - "7.2.  TAMP Responses, Confirms, and Errors\n   Clients return the TAMP Status
      Query Response, Trust Anchor Update\n   Confirm, Apex Trust Anchor Update Confirm,
      Community Update Confirm,\n   Sequence Number Adjust Confirm, and TAMP Error
      to servers, using the\n   /tamp/return PC.  Clients can be configured to automatically
      return\n   responses, confirms, and errors after processing a TAMP package or\n
      \  based on a PAL entry.\n   The message flow is as depicted in Figure 4 modulo
      replacing\n   \"Receipt/Error\" with the appropriate TAMP response, confirm,
      or\n   error.\n"
    - contents:
      - "7.2.1.  Provide TAMP Responses, Confirms, or Errors\n   Clients provide the
        TAMP responses, confirms, and errors to the\n   server with an HTTP POST,
        using an operation path of \"/tamp/return\".\n   The Content-Type is:\n   o
        \ application/tamp-status-response for TAMP Status Query Response\n   o  application/tamp-update-confirm
        for Trust Anchor Update Confirm\n   o  application/tamp-apex-update-confirm
        for Apex Trust Anchor Update\n      Confirm\n   o  application/tamp-community-update-confirm
        for Community Update\n      Confirm\n   o  application/tamp-sequence-adjust-confirm
        for Sequence Number\n      Adjust Confirm\n   o  application/tamp-error for
        TAMP Error\n   As specified in [RFC5934], these content types should be signed.
        \ If\n   signed, a signed-data encapsulates the TAMP content.\n   [RFC3370],
        [RFC5753], and [RFC5754] provide algorithm details for use\n   when protecting
        the TAMP packages.\n"
      title: 7.2.1.  Provide TAMP Responses, Confirms, or Errors
    - contents:
      - "7.2.2.  TAMP Responses, Confirms, and Error Responses\n   If the request
        is successful, the server response MUST have an\n   HTTP 204 response code
        (i.e., no content is returned).\n   When rejecting a request, the server MUST
        specify either an HTTP 4xx\n   error or an HTTP 5xx error.\n   If the package
        is digitally signed, the server MUST reject it if the\n   digital signature
        does not validate back to an authorized TA.\n"
      title: 7.2.2.  TAMP Responses, Confirms, and Error Responses
    title: 7.2.  TAMP Responses, Confirms, and Errors
  title: 7.  Trust Anchor Management Protocol
- contents:
  - "8.  Asymmetric Keys, Receipts, and Errors\n   [RFC7030] defines the /serverkeygen
    PC to support server-side\n   generation of asymmetric keys.  Keys are returned
    as either a) an\n   unprotected PKCS #8 when additional security beyond TLS is
    not\n   employed or b) a CMS asymmetric key package content type that is\n   encapsulated
    in a signed-data content type that is further\n   encapsulated in an enveloped-data
    content type when additional\n   security beyond TLS is requested.\n   Some implementations
    prefer the use of other CMS content types to\n   encapsulate the asymmetric key
    package.  This document extends the\n   content types that can be returned; see
    Section 8.1.\n   [RFC7191] defines content types for key package receipts and
    errors.\n   This document defines the /serverkeygen/return PC to add support for\n
    \  returning receipts and errors for asymmetric key packages; see\n   Section
    8.2.\n   PKCS #12 [RFC7292] (sometimes referred to as \"PFX\" (Personal\n   Information
    Exchange) or \"P12\") is often used to distribute\n   asymmetric private keys
    and associated certificates.  This document\n   extends the /serverkeygen PC to
    allow servers to distribute\n   server-generated asymmetric private keys and the
    associated\n   certificate to clients using PKCS #12; see Section 8.3.\n"
  - contents:
    - "8.1.  Asymmetric Key Encapsulation\n   CMS supports a number of content types
      to encapsulate other CMS\n   content types; [RFC7030] includes one such possibility.
      \ Note that\n   when only relying on TLS the returned key is not a CMS content
      type.\n   This document extends the CMS content types that can be returned.\n
      \  If the client supports CCC [RFC6010], then the client can indicate\n   that
      it supports encapsulated asymmetric keys in the encrypted key\n   package [RFC5958]
      by including the encrypted key package's OID in a\n   content type attribute
      [RFC2985] in the CSR (Certificate Signing\n   Request) -- aka the certification
      request -- that it provides to the\n   server.  If the client knows a priori
      that the server supports the\n   encrypted key package content type, then the
      client need not include\n   the content type attribute in the CSR.\n   In all
      instances defined herein, the Content-Type is\n   \"application/cms\" [RFC7193].
      \ The optional encapsulatingContent and\n   innerContent parameters SHOULD be
      included with the Content-Type to\n   indicate the protection afforded to the
      returned asymmetric key\n   package.\n   If additional encryption and origin
      authentication are employed, the\n   content associated with application/cms
      is a DER-encoded signed-data\n   that encapsulates an enveloped-data that encapsulates
      a signed-data\n   that further encapsulates an asymmetric key package.\n   If
      CCC is supported and additional encryption is employed, the\n   content associated
      with application/cms is a DER-encoded encrypted\n   key package [RFC6032] content
      type that encapsulates a signed-data\n   that further encapsulates an asymmetric
      key package.\n   If CCC is supported and if additional encryption and additional\n
      \  origin authentication are employed, the content associated with\n   application/cms
      is a DER-encoded signed-data that encapsulates an\n   encrypted key package
      content type that encapsulates a signed-data\n   that further encapsulates an
      asymmetric key package.\n   The encrypted key package [RFC6032] provides three
      choices to\n   encapsulate keys: EncryptedData, EnvelopedData, and\n   AuthEnvelopedData,
      with EnvelopedData being the\n   mandatory-to-implement choice.\n   When rejecting
      a request, the server specifies either an HTTP 4xx\n   error or an HTTP 5xx
      error.\n   If an asymmetric key package or an encrypted key package is digitally\n
      \  signed, the client MUST reject it if the digital signature does not\n   validate
      back to an authorized TA.\n   Note: Absent a policy on the client side requiring
      a signature, a\n   malicious EST server can simply strip the signature, thus
      bypassing\n   that check.  In that case, this requirement is merely a sanity
      check,\n   serving to detect mis-signed packages or misconfigured clients.\n
      \  [RFC3370], [RFC5753], [RFC5754], [RFC6033], [RFC6161], and [RFC6162]\n   provide
      algorithm details for use when protecting the asymmetric key\n   package and
      encrypted key package.\n"
    title: 8.1.  Asymmetric Key Encapsulation
  - contents:
    - "8.2.  Asymmetric Key Package Receipts and Errors\n   Clients can be configured
      to automatically return receipts after\n   processing an asymmetric key package,
      return receipts based on\n   processing of the key-package-identifier-and-receipt-request\n
      \  attribute [RFC7191], or return receipts when prompted by a PAL entry.\n   Servers
      can indicate that clients return a receipt by including the\n   key-package-identifier-and-receipt-request
      attribute [RFC7191] in a\n   signed-data as a signed attribute.\n   The protocol
      flow is identical to that depicted in Figure 4 modulo\n   the receipt or error
      is for asymmetric keys.\n   The server and client processing is as described
      in Sections 5.2.1\n   and 5.2.2 modulo the PC, which, for Asymmetric Key Packages,
      is\n   \"/serverkeygen/return\".\n"
    title: 8.2.  Asymmetric Key Package Receipts and Errors
  - contents:
    - "8.3.  PKCS #12\n   PFX is widely deployed and supports protecting keys in the
      same\n   fashion as CMS, but it does so differently.\n"
    - contents:
      - "8.3.1.  Server-Side Key Generation Request\n   Similar to the other server-generated
        asymmetric keys provided\n   through the /serverkeygen PC:\n   o  The certificate
        request is HTTPS POSTed and is the same format as\n      for the \"/simpleenroll\"
        and \"/simplereenroll\" path extensions with\n      the same content type.\n
        \  o  In all respects, the server SHOULD treat the CSR as it would any\n      enroll
        or re-enroll CSR; the only distinction here is that the\n      server MUST
        ignore the public key values and signature in the CSR.\n      These are included
        in the request only to allow the reuse of\n      existing codebases for generating
        and parsing such requests.\n   PBE (password-based encryption) shrouding of
        PKCS #12 is supported,\n   and this specification makes no attempt to alter
        this de facto\n   standard.  As such, there is no support of the DecryptKeyIdentifier\n
        \  specified in [RFC7030] for use with PKCS #12 (i.e., \"enveloping\"\n   is
        not supported).  Note: The use of PBE requires that the password\n   be distributed
        to the client; methods to distribute this password are\n   beyond the scope
        of this document.\n"
      title: 8.3.1.  Server-Side Key Generation Request
    - contents:
      - "8.3.2.  Server-Side Key Generation Response\n   If the request is successful,
        the server response MUST have an\n   HTTP 200 response code with a Content-Type
        of \"application/pkcs12\"\n   [PKCS12] that consists of a base64-encoded DER-encoded
        [X.690]\n   PFX [RFC7292].\n   Note that this response is different than the
        response returned as\n   described in Section 4.4.2 of [RFC7030], because
        here the private key\n   and the certificate are included in the same PFX.\n
        \  When rejecting a request, the server MUST specify either an HTTP 4xx\n
        \  error or an HTTP 5xx error.  The response data's Content-Type MAY be\n
        \  \"text/plain\" [RFC2046] to convey human-readable error messages.\n"
      title: 8.3.2.  Server-Side Key Generation Response
    title: '8.3.  PKCS #12'
  title: 8.  Asymmetric Keys, Receipts, and Errors
- contents:
  - "9.  PAL and Certificate Enrollment\n   The /fullcmc PC is defined in [RFC7030];
    the CMC (Certificate\n   Management over Cryptographic Message Syntax) requirements
    and\n   packages are defined in [RFC5272], [RFC5273], [RFC5274], and\n   [RFC6402].
    \ This section describes PAL interactions.\n   Under normal circumstances, the
    client-server interactions for PKI\n   enrollment are as follows:\n           Client
    \                      Server\n                 --------------------->\n             POST
    req: PKIRequest\n             Content-Type: application/pkcs10\n            or\n
    \            POST req: PKIRequest\n             Content-Type: application/pkcs7-mime\n
    \                          smime-type=CMC-request\n                  <--------------------\n
    \                        POST res: PKIResponse\n                         Content-Type:
    application/pkcs7-mime\n                                       smime-type=certs-only\n
    \                       or\n                         POST res: PKIResponse\n                         Content-Type:
    application/pkcs7-mime\n                                       smime-type=CMC-response\n
    \  If the response is rejected during the same session:\n           Client                       Server\n
    \                 --------------------->\n              POST req: PKIRequest\n
    \             Content-Type: application/pkcs10\n             or\n              POST
    req: PKIRequest\n              Content-Type: application/pkcs7-mime\n                            smime-type=CMC-request\n
    \                 <--------------------\n                         POST res: empty\n
    \                        HTTPS Status Code\n                        or\n                         POST
    res: PKIResponse\n                         Content-Type: application/pkcs7-mime\n
    \                                      smime-type=CMC-response\n   If the request
    is to be filled later:\n           Client                       Server\n                  --------------------->\n
    \             POST req: PKIRequest\n              Content-Type: application/pkcs10\n
    \            or\n              POST req: PKIRequest\n              Content-Type:
    application/pkcs7-mime\n                            smime-type=CMC-request\n                  <--------------------\n
    \                        POST res: empty\n                         HTTPS Status
    Code\n                         + Retry-After\n                        or\n                         POST
    res: PKIResponse (pending)\n                         Content-Type: application/pkcs7-mime\n
    \                                      smime-type=CMC-response\n                  --------------------->\n
    \             POST req: PKIRequest (same request)\n              Content-Type:
    application/pkcs10\n             or\n              POST req: PKIRequest (CMC Status
    Info only)\n              Content-Type: application/pkcs7-mime\n                            smime-type=CMC-request\n
    \                 <--------------------\n                         POST res: PKIResponse\n
    \                        Content-Type: application/pkcs7-mime\n                                       smime-type=certs-only\n
    \                       or\n                         POST res: PKIResponse\n                         Content-Type:
    application/pkcs7-mime\n                                       smime-type=CMC-response\n
    \  With the PAL, the client begins after pulling the PAL and a Start\n   Issuance
    PAL package type, essentially adding the following before\n   the request:\n           Client
    \                      Server\n                 --------------------->\n             GET
    req: PAL\n                  <--------------------\n                         GET
    res: PAL\n                         Content-Type: application/xml\n   The client
    then proceeds as above with a simple PKI enrollment or a\n   full CMC enrollment,
    or it begins enrollment assisted by a CSR:\n           Client                       Server\n
    \                --------------------->\n             GET req: DS certificate
    with CSR\n                  <--------------------\n                         GET
    res: PAL\n                         Content-Type: application/csrattrs\n   For
    immediately rejected requests, CMC works well.  If the server\n   prematurely
    closes the connection, then the procedures in\n   Section 6.3.1 of [RFC7230] apply.
    \ But this might leave the client\n   and server in a different state.  The client
    could merely resubmit\n   the request, but another option, documented herein,
    is for the client\n   to instead download the PAL to see if the server has processed
    the\n   request.  Clients might also use this process when they are unable to\n
    \  remain connected to the server for the entire enrollment process; if\n   the
    server does not or is not able to return a PKIData indicating a\n   status of
    pending, then the client will not know whether the request\n   was received.  If
    a client uses the PAL and reconnects to determine\n   if the certification or
    rekey or renew request was processed:\n   o  Clients MUST authenticate the server,
    and clients MUST check the\n      server's authorization.\n   o  The server MUST
    authenticate the client, and the server MUST check\n      the client's authorization.\n
    \  o  Clients retrieve the PAL, using the /pal URI.\n   o  Clients and servers
    use the operation path of \"/simpleenroll\",\n      \"simplereenroll\", or \"/fullcmc\",
    based on the PAL entry, with an\n      HTTP GET [RFC7231] to get the success or
    failure response.\n   Responses are as specified in [RFC7030].\n"
  title: 9.  PAL and Certificate Enrollment
- contents:
  - "10.  Security Considerations\n   This document relies on many other specifications;
    however, all of\n   the security considerations in [RFC7030] apply.  Refer also
    to the\n   following:\n   o  For HTTP, HTTPS, and TLS security considerations,
    see [RFC7231],\n      [RFC2818], and [RFC5246].\n   o  For URI security considerations,
    see [RFC3986].\n   o  For content type security considerations, see [RFC4073],\n
    \     [RFC4108], [RFC5272], [RFC5652], [RFC5751], [RFC5934], [RFC5958],\n      [RFC6031],
    [RFC6032], [RFC6268], [RFC6402], [RFC7191], and\n      [RFC7292].\n   o  For algorithms
    used to protect packages, see [RFC3370], [RFC5649],\n      [RFC5753], [RFC5754],
    [RFC5959], [RFC6033], [RFC6160], [RFC6161],\n      [RFC6162], and [RFC7192].\n
    \  o  For random numbers, see [RFC4086].\n   o  For server-generated asymmetric
    key pairs, see [RFC7030].\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   IANA has created the \"PAL Package Types\" registry
    and performed three\n   registrations: PAL Name Space, PAL XML Schema, and PAL
    Package Types.\n"
  - contents:
    - "11.1.  PAL Name Space\n   This section registers a new XML namespace [XMLNS],\n
      \  \"urn:ietf:params:xml:ns:pal\", per the guidelines in [RFC3688]:\n      URI:
      urn:ietf:params:xml:ns:pal\n      Registrant Contact: Sean Turner (sean@sn3rd.com)\n
      \     XML:\n         BEGIN\n            <?xml version=\"1.0\"?>\n            <!DOCTYPE
      html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n               \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n
      \           <html xmlns=\"https://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n
      \           <head>\n               <title>Package Availability List</title>\n
      \           </head>\n            <body>\n               <h1>Namespace for Package
      Availability List</h1>\n               <h2>urn:ietf:params:xml:ns:pal</h2>\n
      \              <p>See RFC 8295</p>\n            </body>\n            </html>\n
      \        END\n"
    title: 11.1.  PAL Name Space
  - contents:
    - "11.2.  PAL XML Schema\n   This section registers an XML schema as per the guidelines
      in\n   [RFC3688].\n      URI: urn:ietf:params:xml:schema:pal\n      Registrant
      Contact: Sean Turner (sean@sn3rd.com)\n      XML: See Section 2.1.2.\n"
    title: 11.2.  PAL XML Schema
  - contents:
    - "11.3.  PAL Package Types\n   IANA has created a new registry named \"PAL Package
      Types\".  This\n   registry is for PAL package types whose initial values are
      found in\n   Section 2.1.1.  Future registrations of PAL package types are subject\n
      \  to Expert Review, as defined in RFC 8126 [RFC8126].  Package types\n   MUST
      be paired with a media type; package types specify the path\n   components to
      be used that in turn specify the media type used.\n"
    title: 11.3.  PAL Package Types
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose
      Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC
      2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2585]  Housley,
      R. and P. Hoffman, \"Internet X.509 Public Key\n              Infrastructure
      Operational Protocols: FTP and HTTP\",\n              RFC 2585, DOI 10.17487/RFC2585,
      May 1999,\n              <https://www.rfc-editor.org/info/rfc2585>.\n   [RFC2818]
      \ Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,
      May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC2985]
      \ Nystrom, M. and B. Kaliski, \"PKCS #9: Selected Object\n              Classes
      and Attribute Types Version 2.0\", RFC 2985,\n              DOI 10.17487/RFC2985,
      November 2000,\n              <https://www.rfc-editor.org/info/rfc2985>.\n   [RFC3370]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\n              Algorithms\",
      RFC 3370, DOI 10.17487/RFC3370, August 2002,\n              <https://www.rfc-editor.org/info/rfc3370>.\n
      \  [RFC3394]  Schaad, J. and R. Housley, \"Advanced Encryption Standard\n              (AES)
      Key Wrap Algorithm\", RFC 3394, DOI 10.17487/RFC3394,\n              September
      2002, <https://www.rfc-editor.org/info/rfc3394>.\n   [RFC3688]  Mealling, M.,
      \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688,
      January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC3986]
      \ Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n   [RFC4073]
      \ Housley, R., \"Protecting Multiple Contents with the\n              Cryptographic
      Message Syntax (CMS)\", RFC 4073,\n              DOI 10.17487/RFC4073, May 2005,\n
      \             <https://www.rfc-editor.org/info/rfc4073>.\n   [RFC4108]  Housley,
      R., \"Using Cryptographic Message Syntax (CMS) to\n              Protect Firmware
      Packages\", RFC 4108,\n              DOI 10.17487/RFC4108, August 2005,\n              <https://www.rfc-editor.org/info/rfc4108>.\n
      \  [RFC4514]  Zeilenga, K., Ed., \"Lightweight Directory Access Protocol\n              (LDAP):
      String Representation of Distinguished Names\",\n              RFC 4514, DOI
      10.17487/RFC4514, June 2006,\n              <https://www.rfc-editor.org/info/rfc4514>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5272]
      \ Schaad, J. and M. Myers, \"Certificate Management over CMS\n              (CMC)\",
      RFC 5272, DOI 10.17487/RFC5272, June 2008,\n              <https://www.rfc-editor.org/info/rfc5272>.\n
      \  [RFC5273]  Schaad, J. and M. Myers, \"Certificate Management over CMS\n              (CMC):
      Transport Protocols\", RFC 5273,\n              DOI 10.17487/RFC5273, June 2008,\n
      \             <https://www.rfc-editor.org/info/rfc5273>.\n   [RFC5274]  Schaad,
      J. and M. Myers, \"Certificate Management Messages\n              over CMS (CMC):
      Compliance Requirements\", RFC 5274,\n              DOI 10.17487/RFC5274, June
      2008,\n              <https://www.rfc-editor.org/info/rfc5274>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5649]  Housley, R. and M. Dworkin, \"Advanced Encryption Standard\n              (AES)
      Key Wrap with Padding Algorithm\", RFC 5649,\n              DOI 10.17487/RFC5649,
      September 2009,\n              <https://www.rfc-editor.org/info/rfc5649>.\n
      \  [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n
      \             RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n              Mail
      Extensions (S/MIME) Version 3.2 Message\n              Specification\", RFC
      5751, DOI 10.17487/RFC5751,\n              January 2010, <https://www.rfc-editor.org/info/rfc5751>.\n
      \  [RFC5753]  Turner, S. and D. Brown, \"Use of Elliptic Curve\n              Cryptography
      (ECC) Algorithms in Cryptographic Message\n              Syntax (CMS)\", RFC
      5753, DOI 10.17487/RFC5753,\n              January 2010, <https://www.rfc-editor.org/info/rfc5753>.\n
      \  [RFC5754]  Turner, S., \"Using SHA2 Algorithms with Cryptographic\n              Message
      Syntax\", RFC 5754, DOI 10.17487/RFC5754,\n              January 2010, <https://www.rfc-editor.org/info/rfc5754>.\n
      \  [RFC5934]  Housley, R., Ashmore, S., and C. Wallace, \"Trust Anchor\n              Management
      Protocol (TAMP)\", RFC 5934,\n              DOI 10.17487/RFC5934, August 2010,\n
      \             <https://www.rfc-editor.org/info/rfc5934>.\n   [RFC5958]  Turner,
      S., \"Asymmetric Key Packages\", RFC 5958,\n              DOI 10.17487/RFC5958,
      August 2010,\n              <https://www.rfc-editor.org/info/rfc5958>.\n   [RFC5959]
      \ Turner, S., \"Algorithms for Asymmetric Key Package Content\n              Type\",
      RFC 5959, DOI 10.17487/RFC5959, August 2010,\n              <https://www.rfc-editor.org/info/rfc5959>.\n
      \  [RFC5967]  Turner, S., \"The application/pkcs10 Media Type\", RFC 5967,\n
      \             DOI 10.17487/RFC5967, August 2010,\n              <https://www.rfc-editor.org/info/rfc5967>.\n
      \  [RFC6010]  Housley, R., Ashmore, S., and C. Wallace, \"Cryptographic\n              Message
      Syntax (CMS) Content Constraints Extension\",\n              RFC 6010, DOI 10.17487/RFC6010,
      September 2010,\n              <https://www.rfc-editor.org/info/rfc6010>.\n
      \  [RFC6031]  Turner, S. and R. Housley, \"Cryptographic Message Syntax\n              (CMS)
      Symmetric Key Package Content Type\", RFC 6031,\n              DOI 10.17487/RFC6031,
      December 2010,\n              <https://www.rfc-editor.org/info/rfc6031>.\n   [RFC6032]
      \ Turner, S. and R. Housley, \"Cryptographic Message Syntax\n              (CMS)
      Encrypted Key Package Content Type\", RFC 6032,\n              DOI 10.17487/RFC6032,
      December 2010,\n              <https://www.rfc-editor.org/info/rfc6032>.\n   [RFC6033]
      \ Turner, S., \"Algorithms for Cryptographic Message Syntax\n              (CMS)
      Encrypted Key Package Content Type\", RFC 6033,\n              DOI 10.17487/RFC6033,
      December 2010,\n              <https://www.rfc-editor.org/info/rfc6033>.\n   [RFC6160]
      \ Turner, S., \"Algorithms for Cryptographic Message Syntax\n              (CMS)
      Protection of Symmetric Key Package Content Types\",\n              RFC 6160,
      DOI 10.17487/RFC6160, April 2011,\n              <https://www.rfc-editor.org/info/rfc6160>.\n
      \  [RFC6161]  Turner, S., \"Elliptic Curve Algorithms for Cryptographic\n              Message
      Syntax (CMS) Encrypted Key Package Content Type\",\n              RFC 6161,
      DOI 10.17487/RFC6161, April 2011,\n              <https://www.rfc-editor.org/info/rfc6161>.\n
      \  [RFC6162]  Turner, S., \"Elliptic Curve Algorithms for Cryptographic\n              Message
      Syntax (CMS) Asymmetric Key Package Content Type\",\n              RFC 6162,
      DOI 10.17487/RFC6162, April 2011,\n              <https://www.rfc-editor.org/info/rfc6162>.\n
      \  [RFC6268]  Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n              for
      the Cryptographic Message Syntax (CMS) and the Public\n              Key Infrastructure
      Using X.509 (PKIX)\", RFC 6268,\n              DOI 10.17487/RFC6268, July 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6268>.\n   [RFC6402]  Schaad,
      J., \"Certificate Management over CMS (CMC)\n              Updates\", RFC 6402,
      DOI 10.17487/RFC6402, November 2011,\n              <https://www.rfc-editor.org/info/rfc6402>.\n
      \  [RFC7030]  Pritikin, M., Ed., Yee, P., Ed., and D. Harkins, Ed.,\n              \"Enrollment
      over Secure Transport\", RFC 7030,\n              DOI 10.17487/RFC7030, October
      2013,\n              <https://www.rfc-editor.org/info/rfc7030>.\n   [RFC7303]
      \ Thompson, H. and C. Lilley, \"XML Media Types\", RFC 7303,\n              DOI
      10.17487/RFC7303, July 2014,\n              <https://www.rfc-editor.org/info/rfc7303>.\n
      \  [RFC7191]  Housley, R., \"Cryptographic Message Syntax (CMS) Key\n              Package
      Receipt and Error Content Types\", RFC 7191,\n              DOI 10.17487/RFC7191,
      April 2014,\n              <https://www.rfc-editor.org/info/rfc7191>.\n   [RFC7192]
      \ Turner, S., \"Algorithms for Cryptographic Message Syntax\n              (CMS)
      Key Package Receipt and Error Content Types\",\n              RFC 7192, DOI
      10.17487/RFC7192, April 2014,\n              <https://www.rfc-editor.org/info/rfc7192>.\n
      \  [RFC7193]  Turner, S., Housley, R., and J. Schaad, \"The\n              application/cms
      Media Type\", RFC 7193,\n              DOI 10.17487/RFC7193, April 2014,\n              <https://www.rfc-editor.org/info/rfc7193>.\n
      \  [RFC7230]  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,
      DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n
      \  [RFC7231]  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Semantics and Content\",\n              RFC 7231, DOI 10.17487/RFC7231,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC7292]
      \ Moriarty, K., Ed., Nystrom, M., Parkinson, S., Rusch, A.,\n              and
      M. Scott, \"PKCS #12: Personal Information Exchange\n              Syntax v1.1\",
      RFC 7292, DOI 10.17487/RFC7292, July 2014,\n              <https://www.rfc-editor.org/info/rfc7292>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC
      2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May
      2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8259>.\n   [XML]      Bray,
      T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n              F. Yergeau,
      \"Extensible Markup Language (XML) 1.0\n              (Fifth Edition)\", World
      Wide Web Consortium\n              Recommendation REC-xml-20081126, November
      2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126/>.\n   [XMLSCHEMA]\n
      \             Malhotra, A. and P. Biron, \"XML Schema Part 2: Datatypes\n              Second
      Edition\", World Wide Web Consortium\n              Recommendation REC-xmlschema-2-20041028,
      October 2004,\n              <https://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n
      \  [X.690]    ITU-T, \"Information technology - ASN.1 encoding rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, ISO/IEC 8825-1,\n              August 2015, <https://www.itu.int/rec/T-REC-X.690/en>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [PKCS12]   IANA, \"PKCS #12\", <https://www.iana.org/assignments/\n
      \             media-types/application/pkcs12>.\n   [RFC4086]  Eastlake 3rd,
      D., Schiller, J., and S. Crocker,\n              \"Randomness Requirements for
      Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086, June 2005,\n
      \             <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC4949]  Shirey,
      R., \"Internet Security Glossary, Version 2\",\n              FYI 36, RFC 4949,
      DOI 10.17487/RFC4949, August 2007,\n              <https://www.rfc-editor.org/info/rfc4949>.\n
      \  [XMLNS]    Bray, T., Hollander, D., Layman, A., Tobin, R., and H.\n              Thompson,
      \"Namespaces in XML 1.0 (Third Edition)\",\n              World Wide Web Consortium
      Recommendation\n              REC-xml-names-20091208/, December 2009,\n              <https://www.w3.org/TR/2009/REC-xml-names-20091208/>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Example Use of PAL\n   This is an informative appendix.  It includes
    examples of protocol\n   flows.\n   Steps for using a PAL include the following:\n
    \  1. Access PAL\n   2. Process PAL entries\n      2.1. Get CA certificates\n
    \     2.2. Get CRLs\n      2.3. Get CSR attributes\n      2.4. Enroll: simple
    enrollment, re-enrollment, or full CMC\n      2.5. Get Firmware, TAMP, Symmetric
    Keys, or EE certificates\n   Client                      Server\n         --------------------->
    \                    -+\n   GET req:                                          |
    /pal\n         <---------------------                      |\n                       GET
    res: PAL                  |\n                       Content-Type: application/xml
    |\n                                                     |\n         --------------------->
    \                    -+\n   GET req:                                          |
    /cacerts\n         <---------------------                      |\n               GET
    res: CA Certificates              |\n               Content-Type: application/pkcs7-smime
    |\n                             smime-type=certs-only   |\n                                                     |\n
    \        --------------------->                     -+\n   GET req:                                          |
    /crls\n         <---------------------                      |\n               GET
    res: CRLs                         |\n               Content-Type: application/pkcs7-smime
    |\n                             smime-type=crls-only    |\n                                                     |\n
    \        --------------------->                     -+\n   GET req:                                          |
    /csrattrs\n         <---------------------                      |\n                           GET
    res: attributes       |\n         --------------------->                     -+\n
    \  POST req: PKIRequest                              | /simpleenroll and\n   Content-Type:
    application/pkcs10                  | /simplereenroll\n                                                     |\n
    \  Content-Type: application/pkcs7-mime              | /fullcmc\n                 smime-type=CMC-request
    \             |\n                                                     |\n         <--------------------
    \                      |\n              (success or failure)                   |\n
    \             POST res: PKIResponse                  | /simpleenroll\n              Content-Type:
    application/pkcs7-mime   | /simplereenroll\n                            smime-type=certs-only
    \   | /fullcmc\n                                                     |\n              Content-Type:
    application/pkcs7-mime   | /fullcmc\n                            smime-type=CMC-response
    \ |\n                                                     |\n         -------------------->
    \                     -+\n   GET req:                                          |
    /firmware\n         <--------------------                       | /tamp\n               GET
    res: Firmware, TAMP Query         | /symmetrickeys\n                        +
    Updates, Symmetric Keys    |\n                Content-Type: application/cms        |\n
    \                                                    |\n         --------------------->
    \                    -+\n   POST res: Firmware Receipts or Errors,            |
    /firmware/return\n   TAMP Response or Confirms or Errors,              | /tamp/return\n
    \  Symmetric Key Receipts or Errors                  | /symmetrickeys/\n                                                     |
    \     return\n                                                     |\n   Content-Type:
    application/cms                     |\n         <--------------------                       |\n
    \              POST res: empty                       |\n                (success
    or failure)                 |\n         -------------------->                      -+\n
    \  GET req:                                          | /eecerts\n         <--------------------
    \                      |\n               GET res: Other EE certificates        |\n
    \               Content-Type: application/pkcs7-mime |\n                              smime-type=certs-only
    \ |\n   The figure above shows /eecerts after /*/return, but this is for\n   illustrative
    purposes only.\n"
  title: Appendix A.  Example Use of PAL
- contents:
  - "Appendix B.  Additional CSR Attributes\n   This is an informative appendix.\n
    \  In some cases, the client is severely limited in its ability to\n   encode
    and decode ASN.1 objects.  If the client knows that a \"csr\"\n   template is
    being provided during enrollment, then it can peel the\n   returned CSR attribute,
    generate its keys, place the public key in\n   the certification request, and
    then sign the request.  To accomplish\n   this, the server returns a pKCS7PDU
    attribute [RFC2985] in the\n   /csrattrs (the following is \"pseudo ASN.1\" and
    is only meant to show\n   the fields needed to accomplish returning a template
    certification\n   request):\n     pKCS7PDU ATTRIBUTE ::= {\n       WITH SYNTAX
    ContentInfo\n       ID pkcs-9-at-pkcs7PDU\n       }\n     pkcs-9-at-pkcs7PDU OBJECT
    IDENTIFIER ::= {\n       iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs9(9)\n       pkcs-9-at(25) 5\n       }\n   The ContentInfo is a PKIData:\n
    \    PKIData ::= SEQUENCE {\n       reqSequence        SEQUENCE SIZE(0..MAX) OF
    TaggedRequest\n       }\n   Where TaggedRequest is a choice between the PKCS #10
    or Certificate\n   Request Message Format (CRMF) requests.\n     TaggedRequest
    ::= CHOICE {\n       tcr               [0] TaggedCertificationRequest,\n       crm
    \              [1] CertReqMsg\n       }\n   Or, the ContentInfo can be a signed-data
    content type that further\n   encapsulates a PKIData.\n"
  title: Appendix B.  Additional CSR Attributes
- contents:
  - "Acknowledgements\n   Thanks in no particular order go to Alexey Melnikov, Paul
    Hoffman,\n   Brad McInnis, Max Pritikin, Francois Rousseau, Chris Bonatti, and\n
    \  Russ Housley for taking time to provide comments.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Sean Turner\n   sn3rd\n   Email: sean@sn3rd.com\n"
  title: Author's Address
