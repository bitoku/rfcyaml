- contents:
  - '  Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a 1-hop and symmetric 2-hop neighborhood\n
    \  discovery protocol (NHDP) for mobile ad hoc networks (MANETs).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6130.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n  1. Introduction .....................................................4\n
    \     1.1. Motivation .................................................5\n   2.
    Terminology .....................................................6\n   3. Applicability
    Statement .........................................9\n   4. Protocol Overview
    and Functioning ..............................10\n      4.1. Routers and Interfaces
    ....................................11\n      4.2. Information Base Overview .................................12\n
    \          4.2.1. Local Information Base .............................13\n           4.2.2.
    Interface Information Bases ........................13\n           4.2.3. Neighbor
    Information Base ..........................14\n      4.3. Signaling Overview ........................................14\n
    \          4.3.1. HELLO Message Generation ...........................15\n           4.3.2.
    HELLO Message Content ..............................16\n           4.3.3. HELLO
    Message Processing ...........................17\n      4.4. Link Quality ..............................................17\n
    \  5. Protocol Parameters and Constants ..............................18\n      5.1.
    Protocol and Port Numbers .................................18\n      5.2. Multicast
    Address .........................................18\n      5.3. Interface Parameters
    ......................................18\n           5.3.1. Message Intervals
    ..................................19\n           5.3.2. Information Validity Times
    .........................21\n           5.3.3. Link Quality .......................................22\n
    \          5.3.4. Jitter .............................................22\n      5.4.
    Router Parameters .........................................23\n           5.4.1.
    Information Validity Time ..........................23\n      5.5. Parameter Change
    Constraints ..............................23\n      5.6. Constants .................................................24\n
    \  6. Local Information Base .........................................24\n      6.1.
    Local Interface Set .......................................25\n      6.2. Removed
    Interface Address Set .............................26\n   7. Interface Information
    Bases ....................................26\n      7.1. Link Set ..................................................27\n
    \     7.2. 2-Hop Set .................................................28\n   8.
    Neighbor Information Base ......................................28\n      8.1.
    Neighbor Set ..............................................28\n      8.2. Lost
    Neighbor Set .........................................29\n   9. Local Information
    Base Changes .................................29\n      9.1. Adding an Interface
    .......................................29\n      9.2. Removing an Interface .....................................30\n
    \     9.3. Adding a Network Address to an Interface ..................30\n      9.4.
    Removing a Network Address from an Interface ..............31\n   10. Packets
    and Messages ..........................................32\n      10.1. HELLO Messages
    ...........................................32\n           10.1.1. Address Blocks
    ....................................33\n   11. HELLO Message Generation ......................................34\n
    \     11.1. HELLO Message Specification ..............................35\n      11.2.
    HELLO Message Transmission ...............................37\n           11.2.1.
    HELLO Message Jitter ..............................37\n   12. HELLO Message Processing
    ......................................38\n      12.1. Invalid Message ..........................................38\n
    \     12.2. Definitions ..............................................40\n      12.3.
    Updating the Neighbor Set ................................41\n      12.4. Updating
    the Lost Neighbor Set ...........................42\n      12.5. Updating the
    Link Sets ...................................42\n      12.6. Updating the 2-Hop
    Set ...................................44\n   13. Other Information Base Changes
    ................................45\n      13.1. Link Tuple Symmetric .....................................46\n
    \     13.2. Link Tuple Not Symmetric .................................47\n      13.3.
    Link Tuple Heard Timeout .................................48\n   14. Link Quality
    ..................................................48\n      14.1. Deployment without
    Link Quality ..........................49\n      14.2. Basic Principles of Link
    Quality .........................49\n      14.3. When Link Quality Changes ................................50\n
    \     14.4. Updating Link Quality ....................................51\n   15.
    Proposed Values for Parameters and Constants ..................51\n      15.1.
    Message Interval Interface Parameters ....................51\n      15.2. Information
    Validity Time Interface Parameters ...........51\n      15.3. Information Validity
    Time Router Parameters ..............52\n      15.4. Link Quality Interface Parameters
    ........................52\n      15.5. Jitter Interface Parameters ..............................52\n
    \     15.6. Constants ................................................52\n   16.
    Usage with Other Protocols ....................................52\n   17. Security
    Considerations .......................................54\n      17.1. Invalid
    HELLO Messages ...................................56\n      17.2. Authentication,
    Integrity, and Confidentiality\n            Suggestions ..............................................57\n
    \  18. IANA Considerations ...........................................57\n      18.1.
    Expert Review: Evaluation Guidelines .....................58\n      18.2. Message
    Types ............................................58\n      18.3. Message-Type-Specific
    TLV Type Registries ................58\n      18.4. Address Block TLV Types ..................................59\n
    \     18.5. LOCAL_IF, LINK_STATUS, and OTHER_NEIGHB Values ...........60\n   19.
    Contributors ..................................................61\n   20. Acknowledgments
    ...............................................61\n   21. References ....................................................62\n
    \     21.1. Normative References .....................................62\n      21.2.
    Informative References ...................................62\n   Appendix A. Address
    Block TLV Combinations ........................63\n   Appendix B. Constraints
    ...........................................64\n   Appendix C. HELLO Message Example
    .................................66\n   Appendix D. Flow and Congestion Control
    ...........................69\n   Appendix E. Interval and Timer Illustrations
    ......................70\n      E.1.  HELLO Message Generation Timing ..........................70\n
    \     E.2.  HELLO Message Processing Timing ..........................76\n      E.3.
    \ Other HELLO Message Timing ...............................77\n   Appendix F.
    \ Topology Pictures ....................................79\n      F.1.  Example
    1: Standard Single Interface Topology ............79\n      F.2.  Example 2: Dual
    Addressed Interface on 1-Hop Neighbor ....80\n      F.3.  Example 3: Dual Addressed
    Interface on 2-Hop Neighbor ....81\n      F.4.  Example 4: Dual Addressed Interfaces
    .....................81\n      F.5.  Example 5: Dual Interface on 2-Hop Neighbor
    ..............82\n      F.6.  Example 6: Dual interface on 1-Hop Neighbor ..............82\n
    \     F.7.  Example 7: Dual Interface on 1-Hop and 2-Hop Neighbors ...83\n      F.8.
    \ Example 8: Dual Interface Locally and on 1-Hop Neighbor ..84\n      F.9.  Example
    9: Dual Interface on All Routers .................85\n      F.10. Example 10:
    Dual Addressed Dual Interfaces on All\n                        Routers ......................................86\n
    \     F.11. Example 11: Single Addressed Dual Interface Locally ......87\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a neighborhood discovery protocol
    (NHDP) for\n   a mobile ad hoc network (MANET) [RFC2501].  This protocol uses
    a\n   local exchange of HELLO messages so that each router can determine\n   the
    presence of, and connectivity to, its 1-hop and symmetric 2-hop\n   neighbors.
    \ Messages are defined and sent in packets according to the\n   specification
    [RFC5444].\n   1-hop neighborhood information is recorded for use by MANET routing\n
    \  protocols to determine direct (1-hop) connectivity to neighboring\n   routers.
    2-hop symmetric neighborhood information is recorded so as\n   to enable MANET
    routing protocols to employ flooding reduction\n   techniques, e.g., to select
    reduced relay sets for efficient network-\n   wide traffic dissemination.\n   1-hop
    and symmetric 2-hop neighborhood information is recorded in the\n   form of Information
    Bases.  These are available for use by other\n   protocols, such as MANET routing
    protocols, that require information\n   regarding the local network connectivity.
    \ This protocol is designed\n   to maintain the information in these Information
    Bases even in the\n   presence of a dynamic network topology and wireless communication\n
    \  channel characteristics.\n   This protocol makes no assumptions about the underlying
    link layer,\n   other than support of local broadcast or multicast for communication\n
    \  to 1-hop neighbor routers.  Link-layer information may be used if\n   available
    and applicable.\n   This protocol is based on the neighborhood discovery process\n
    \  contained in the Optimized Link State Routing (OLSR) Protocol\n   [RFC3626].\n"
  - contents:
    - "1.1.  Motivation\n   MANETs differ from more traditional wired and infrastructure-based\n
      \  wireless networks due to their envisioned applicability over more\n   challenging
      communication channels (e.g., wireless, lossy, broadcast\n   channels with moderate
      and shared bandwidth, hidden and exposed\n   terminals, and interference from
      other network devices and the\n   environment) and in more challenging topological
      conditions (e.g.,\n   rapid and unpredictable mobility, dynamic and non-predetermined\n
      \  network membership).\n   Due to the properties of wireless transmissions,
      communication\n   between two neighboring routers may not be bi-directional;
      even if\n   router A is able to receive packets from router B, the converse
      is\n   not guaranteed to be true.  Furthermore, because of the localized\n   nature
      of wireless broadcast communication, neighboring routers\n   within the same
      communications channel may have different sets of\n   neighbors.  That is, when
      using the same communication channel, even\n   if router A is able to exchange
      packets with router B, and router B\n   is able to exchange packets with router
      C, this does not guarantee\n   that router A and router C can exchange packets
      directly.\n   Each router in a MANET may use more than one communication channel.\n
      \  In particular, between the same pair of routers, more than one\n   distinct
      communication channel may exist, each with different\n   properties.  This may,
      for example, be the case where MANET routers\n   are equipped with multiple
      distinct wireless interfaces, operating at\n   different frequencies.\n   For
      use by MANET routing protocols, as well as for establishing a\n   router's neighbors,
      a router may also need to determine whether each\n   communication channel with
      that neighbor is bi-directional.\n   The set of neighbor routers of a given
      MANET router may be\n   continuously changing, often due to router mobility
      or a changing\n   physical environment in which the MANET is located.  There
      is\n   typically no information from lower layers that would enable an IP\n
      \  routing protocol to detect and, as appropriate, react to such\n   changes.
      \ Such changes can often take place on a short timescale,\n   such as of the
      order of seconds, requiring MANET routing protocols to\n   act rapidly to ensure
      suitable convergence properties.\n   MANET routing protocols, for example [RFC3626]
      and [RFC5449], often\n   employ relay set reductions in order to conserve network
      capacity\n   when maintaining network-wide topological information, with\n   calculation
      of these reduced relay sets employing up to two hop\n   information.\n   The
      neighborhood discovery protocol specified in this document\n   provides continued
      tracking of neighborhood changes, link bi-\n   directionality, and local topological
      information up to two hops.\n   Combined, this allows a MANET routing protocol
      access to information\n   describing link establishment/disappearance and provides
      the\n   necessary topological information for reduced relay set selection and\n
      \  other purposes.\n"
    title: 1.1.  Motivation
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n   All terms introduced in [RFC5444], including \"packet\",
    \"message\",\n   \"Address Block\", \"TLV Block\", \"TLV\", \"address\", \"address
    prefix\", and\n   \"address object\" are to be interpreted as described therein.\n
    \  Additionally, this document uses the following terminology:\n   Network Address:\n
    \     An address plus an associated prefix length.  This may be an\n      address
    with an associated maximum prefix length or an address\n      prefix including
    a prefix length.  A network address thus\n      represents a range of addresses.\n
    \  Router:\n      A MANET router that implements this neighborhood discovery\n
    \     protocol.\n   Interface:\n      A router's attachment to a communications
    medium.  An interface is\n      assigned one or more addresses.\n   MANET interface:\n
    \     An interface participating in a MANET and using this neighborhood\n      discovery
    protocol.  A router may have several MANET interfaces.\n   Heard:\n      A MANET
    interface of router X is considered heard on a MANET\n      interface of a router
    Y if the latter can receive control\n      messages, according to this specification,
    from the former.\n   Link:\n      A link between two MANET interfaces exists if
    either can be heard\n      by the other.\n   Symmetric link:\n      A symmetric
    link between two MANET interfaces exists if both can\n      be heard by the other.\n
    \  1-hop neighbor:\n      A router X is a 1-hop neighbor of a router Y if a MANET
    interface\n      of router X is heard by a MANET interface of router Y.\n   Symmetric
    1-hop neighbor:\n      A router X is a symmetric 1-hop neighbor of a router Y
    if a\n      symmetric link exists between a MANET interface on router X and a\n
    \     MANET interface on router Y.\n   2-hop neighbor:\n      A router X is a
    2-hop neighbor of a router Y if router X is a\n      1-hop neighbor of a 1-hop
    neighbor of router Y, but is not router\n      Y itself.\n   Symmetric 2-hop neighbor:\n
    \     A router X is a symmetric 2-hop neighbor of a router Y if router X\n      is
    a symmetric 1-hop neighbor of a symmetric 1-hop neighbor of\n      router Y, but
    is not router Y itself.\n   1-hop neighborhood:\n      The 1-hop neighborhood
    of a router X is the set of the 1-hop\n      neighbors of router X.\n   Symmetric
    1-hop neighborhood:\n      The symmetric 1-hop neighborhood of a router X is the
    set of the\n      symmetric 1-hop neighbors of router X.\n   2-hop neighborhood:\n
    \     The 2-hop neighborhood of a router X is the set of the 2-hop\n      neighbors
    of router X. (This may include routers in the 1-hop\n      neighborhood of router
    X.)\n   Symmetric 2-hop neighborhood:\n      The symmetric 2-hop neighborhood
    of a router X is the set of the\n      symmetric 2-hop neighbors of router X.
    (This may include routers\n      in the 1-hop neighborhood, or even in the symmetric
    1-hop\n      neighborhood, of router X.)\n   Constant:\n      A numerical value
    that MUST be the same for all MANET interfaces\n      of all routers in the MANET,
    at all times.\n   Interface parameter:\n      A boolean or numerical value, specified
    separately for each MANET\n      interface of each router.  A router MAY change
    interface parameter\n      values at any time, subject to some constraints.\n
    \  Router parameter:\n      A boolean or numerical value, specified for each router,
    and not\n      specific to an interface.  A router MAY change router parameter\n
    \     values at any time, subject to some constraints.\n   Information Base:\n
    \     A collection of information maintained by this protocol and which\n      is
    to be made available to MANET routing protocols.  An\n      Information Base may
    be associated with a MANET interface or with\n      a router.\n   Furthermore,
    this document uses the following notational conventions:\n   X contains y, or
    y is contained in X\n      An unordered list membership operator.  X is an unordered
    list and\n      y is an element.  \"X contains y\" or \"y is contained in X\"
    returns\n      true if the unordered list X includes the element y, and returns\n
    \     false otherwise.\n   X contains Y, or Y is contained in X\n      An unordered
    list inclusion operator.  X and Y are both unordered\n      lists.  \"X contains
    Y\" or \"Y is contained in X\" returns true if\n      the unordered list X contains
    all elements y which are contained\n      in Y, and returns false otherwise.\n
    \  A overlaps B\n      If A and B are network addresses, and the range of addresses\n
    \     represented by A and the range of addresses represented by B both\n      contain
    at least one common address.  (This is only possible if\n      one range is a
    sub-range of the other.)\n   a := b\n      An assignment operator, whereby the
    left side (a) is assigned the\n      value of the right side (b). a and b may
    be values, network\n      addresses, or unordered lists (they must be of the same
    type).\n   c = d\n      A comparison operator, returning true if the value of
    the left\n      side (c) is equal to the value of the right side (d). c and d
    may\n      be values, network addresses, or unordered lists (they must be of\n
    \     the same type).  If c and d are unordered lists, then they are\n      considered
    to be equal if c contains d and d contains c (i.e.,\n      they contain the same
    set of elements, regardless of the order in\n      which they are recorded in
    the lists).  If c and d are network\n      addresses, they are considered equal
    only if both addresses and\n      prefix lengths are equal (i.e., they represent
    the same).\n   e != f\n      A comparison operator, returning not (e = f), i.e.,
    returning true\n      where (e = f) would have returned false, and returning false
    where\n      (e = f) would have returned true.\n"
  title: 2.  Terminology
- contents:
  - "3.  Applicability Statement\n   This protocol:\n   o  Is applicable to networks,
    especially wireless networks, in which\n      unknown neighbors can be reached
    by local broadcast or multicast\n      packets.\n   o  Is designed to work in
    networks with a dynamic topology, and in\n      which messages may be lost, such
    as due to collisions in wireless\n      networks.\n   o  Supports routers that
    each have one or more participating MANET\n      interfaces.  The set of a router's
    interfaces may change over\n      time.  Each interface may have one or more associated
    network\n      addresses, and these may also be dynamically changing.\n   o  Provides
    each router with current local topology information up to\n      two hops away,
    and makes this local topology information available\n      to MANET routing protocols
    in Information Bases.\n   o  Uses the packet and message formats specified in
    [RFC5444].  This\n      includes the definition of a HELLO Message Type, used
    for\n      signaling local topology information.\n   o  Allows \"external\" and
    \"internal\" extensibility as enabled by\n      [RFC5444].\n   o  May interact
    with, and be extended by, other protocols, such as\n      MANET routing protocols,
    see Section 16.\n   o  Can use relevant link-layer information if it is available.\n
    \  o  Is designed to work in a completely distributed manner, and does\n      not
    depend on any central entity.\n"
  title: 3.  Applicability Statement
- contents:
  - "4.  Protocol Overview and Functioning\n   The objective of this protocol is,
    for each router:\n   o  To identify 1-hop neighbors and symmetric 1-hop neighbors
    of this\n      router.\n   o  To find the interface network addresses of the router's
    symmetric\n      2-hop neighbors.\n   o  To record this information in Information
    Bases and thus make this\n      information available to other protocols that
    use this\n      neighborhood discovery protocol.\n   o  To be available for use
    by other protocols, which MAY extend the\n      information in these Information
    Bases, including adding new Sets\n      to Information Bases, new elements to
    protocol Tuples and new TLVs\n      to be included in outgoing HELLO messages
    and processed when in\n      incoming HELLO messages.\n   These objectives are
    achieved using local (1-hop) signaling that:\n   o  Advertises the presence of
    a router and its interface network\n      addresses.\n   o  Discovers links from
    neighboring routers.\n   o  Performs bi-directionality checks on the discovered
    links.\n   o  Advertises discovered links, and whether each is symmetric, to its\n
    \     1-hop neighbors, and hence discovers symmetric 2-hop neighbors.\n   This
    specification defines, in turn:\n   o  Parameters and constants used by the protocol.
    \ Parameters used by\n      this protocol may, where appropriate, be specific
    to a given MANET\n      interface or to a MANET router.  This protocol allows
    all\n      parameters to be changed dynamically, and to be set independently\n
    \     for each MANET router or MANET interface, as appropriate.\n   o  The Information
    Bases describing local interfaces, discovered\n      links and their status, current
    and former 1-hop neighbors, and\n      symmetric 2-hop neighbors.\n   o  The format
    of the HELLO message that is used for local signaling.\n   o  The generation of
    HELLO messages from some of the information in\n      the Information Bases.\n
    \  o  The updating of the Information Bases according to received HELLO\n      messages
    and other events.\n   o  The response to other events, such as the expiration
    of\n      information in the Information Bases.\n"
  - contents:
    - "4.1.  Routers and Interfaces\n   In order for a router to participate in a
      MANET, it MUST have at\n   least one, and possibly more, MANET interfaces.\n
      \  Each MANET interface:\n   o  Is configured with one or more network addresses.
      \ Each address in\n      the range of addresses represented by that network
      address MUST\n      satisfy the following properties:\n      o  It MUST be unique
      to this router, i.e., it MUST NOT be assigned\n         to any interface of
      any other router.\n      o  If assigned to other MANET interfaces, on the same
      router,\n         these MANET interfaces MUST be isolated, i.e., addresses may\n
      \        only be assigned to different interfaces on the same router if\n         no
      MANET interface on another router can communicate with both.\n         For example,
      interfaces using distinct radio \"channels\" MAY be\n         assigned the same
      address.\n   o  Has a set of interface parameters, defining the behavior of
      this\n      MANET interface.  Each MANET interface MAY be individually\n      parameterized.\n
      \  o  Has an Interface Information Base, recording information regarding\n      links
      to this MANET interface and symmetric 2-hop neighbors that\n      can be reached
      through such links.\n   o  Generates and processes HELLO messages.\n   In addition
      to a set of MANET interfaces as described above, each\n   router has:\n   o
      \ A Local Information Base, containing the network addresses of the\n      interfaces
      (MANET and non-MANET) of this router.  The contents of\n      this Information
      Base are not changed by signaling.\n   o  A Neighbor Information Base, recording
      information regarding\n      current and recently lost 1-hop neighbors of this
      router.\n   A router may have both MANET interfaces and non-MANET interfaces.\n
      \  Interfaces of both of these types are recorded in a router's Local\n   Information
      Base, which is used, but not updated, by the signaling of\n   this protocol.\n"
    title: 4.1.  Routers and Interfaces
  - contents:
    - "4.2.  Information Base Overview\n   Each router maintains protocol state using
      Information Bases,\n   described in the following sections.  Each Information
      Base consists\n   of a number of Protocol Sets.  Each Protocol Set contains
      a number of\n   Protocol Tuples.\n   An implementation of this protocol MAY
      maintain this information in\n   the indicated form, or in any other organization
      that offers access\n   to this information.  In particular, note that it is
      not necessary to\n   remove Protocol Tuples from Protocol Sets at the exact
      time\n   indicated, only to behave as if the Protocol Tuples were removed at\n
      \  that time.\n   Information in the Local Information Base is defined locally
      and\n   included in HELLO messages.  Information in the Interface Information\n
      \  Base and the Neighbor Information Base is determined from received\n   HELLO
      messages; some of this information may also be included in\n   transmitted HELLO
      messages.  Such information has a limited duration\n   in which it is considered
      valid.  This duration is determined from\n   the VALIDITY_TIME TLV in the HELLO
      message in which the information\n   is received, which in turn is set by the
      router that originated the\n   HELLO message, using its corresponding interface
      parameter\n   H_HOLD_TIME.\n   Appendix E illustrates the relationship between
      message reception,\n   included VALIDITY_TIME TLVs, and the duration for which
      information\n   received in a HELLO message is considered valid.  Appendix F\n
      \  illustrates some example topologies and how they correspond to\n   information
      in the Information Bases.\n"
    - contents:
      - "4.2.1.  Local Information Base\n   Each router maintains a Local Information
        Base, which contains the\n   router's local configuration information, specifically:\n
        \  o  The Local Interface Set, which consists of Local Interface Tuples,\n
        \     each of which represents an interface (MANET or non-MANET) of the\n
        \     router.\n   o  The Removed Interface Address Set, which consists of
        Removed\n      Interface Address Tuples, each of which records a recently
        used\n      network address of an interface (MANET or non-MANET) of the\n
        \     router.\n   The Local Interface Set is used for generating HELLO messages,\n
        \  specifically for determining which interface network addresses are to\n
        \  be included and identified as local interfaces.  The Removed\n   Interface
        Address Set is used to avoid incorrectly recording a\n   formerly used network
        address as a symmetric 2-hop neighbor's network\n   address.\n   The Local
        Information Base is used for generating signaling, but is\n   not itself updated
        by signaling specified in this document.  Updates\n   to the Local Information
        Base are due to changes of the router\n   configuration, and may be allowed
        to trigger signaling.\n"
      title: 4.2.1.  Local Information Base
    - contents:
      - "4.2.2.  Interface Information Bases\n   Each router maintains, for each of
        its MANET interfaces, an Interface\n   Information Base, which contains 1-hop
        neighborhood and symmetric\n   2-hop neighborhood information collected from
        this MANET interface,\n   specifically:\n   o  A Link Set, which records information
        about current and recently\n      lost links between this MANET interface
        and MANET interfaces of\n      1-hop neighbors.  The Link Set consists of
        Link Tuples, each of\n      which contains information about a single link.
        \ Link quality\n      information (see Section 14), when used, is recorded
        in Link\n      Tuples.\n   o  A 2-Hop Set, which records the existence of
        symmetric links\n      between symmetric 1-hop neighbors of this MANET interface
        and\n      other routers (symmetric 2-hop neighbors).  The 2-Hop Set consists\n
        \     of 2-Hop Tuples, each of which records a network address of a\n      symmetric
        2-hop neighbor, and all network addresses of the\n      corresponding symmetric
        1-hop neighbor.\n   The Link Set for a MANET interface is used for generating
        HELLO\n   messages.  Specifically, the Link Set information is included to
        both\n   allow other routers to identify symmetric links and to populate the\n
        \  2-Hop Set.  Recently lost links are recorded in the Link Set for a\n   MANET
        interface so that they can be advertised in HELLO messages,\n   accelerating
        their removal from relevant 1-hop neighbors' Link Sets.\n   The Link Set for
        a MANET interface is itself updated on receiving a\n   HELLO message, including
        recording symmetric links as indicated\n   above.  The 2-Hop Set for a MANET
        interface is updated as indicated\n   above, and is not itself used in generating
        HELLO messages.\n"
      title: 4.2.2.  Interface Information Bases
    - contents:
      - "4.2.3.  Neighbor Information Base\n   Each router maintains a Neighbor Information
        Base, which contains\n   collected information about current and recently
        lost 1-hop\n   neighbors, specifically:\n   o  The Neighbor Set consists of
        Neighbor Tuples, each of which\n      records all network addresses of a single
        1-hop neighbor.\n      Neighbor Tuples are maintained as long as there are
        corresponding\n      Link Tuples.\n   o  The Lost Neighbor Set consists of
        Lost Neighbor Tuples, each of\n      which records a network address of a
        recently lost symmetric 1-hop\n      neighbor.\n   The Neighbor Set associates
        all network addresses of each 1-hop\n   neighbor.  These network addresses
        may be included when generating a\n   HELLO message, so that other symmetric
        1-hop neighbors can record\n   this information in a 2-Hop Set.  The Neighbor
        Set can be updated on\n   receiving a HELLO message.\n   The Lost Neighbor
        Set is used to determine which network addresses\n   are to be included in
        a HELLO message as being lost (of a recently\n   symmetric 1-hop neighbor).
        \ The Lost Neighbor Set can itself be\n   updated on receiving a HELLO message.\n"
      title: 4.2.3.  Neighbor Information Base
    title: 4.2.  Information Base Overview
  - contents:
    - "4.3.  Signaling Overview\n   This protocol contains a signaling mechanism for
      maintaining the\n   Interface Information Bases and the Neighbor Information
      Base.  If\n   information from the link layer, or any other source, is available\n
      \  and appropriate, it may also be used to update these Information\n   Bases.
      \ Such updates are subject to the constraints specified in\n   Appendix B.\n
      \  Signaling consists of a single type of message, known as a HELLO\n   message.
      \ Each router generates HELLO messages on each of its MANET\n   interfaces.
      \ HELLO messages are generated independently on each MANET\n   interface of
      a MANET router; the content of a given HELLO message\n   depends on the MANET
      interface for which it has been generated.\n   Each HELLO message:\n   o  Identifies,
      as far as is required, the MANET interface for which\n      it is generated
      and transmitted; this allows recipients of that\n      HELLO message to identify
      that MANET interface from among those it\n      may hear.\n   o  Reports the
      network addresses of other interfaces (MANET and non-\n      MANET) of the router;
      this allows recipients of that HELLO message\n      to associate a set of network
      addresses with a single 1-hop\n      neighbor.\n   o  Includes 1-hop neighbor
      information from the Information Bases;\n      this allows detection of local
      symmetric links, and symmetric\n      2-hop neighbors.\n   HELLO message generation,
      and the validity of the information\n   recorded as a consequence of processing
      a HELLO message, is affected\n   by timers and validity information included
      in HELLO messages through\n   TLVs.  The relationship between message timers
      and intervals is\n   illustrated in Appendix E.\n"
    - contents:
      - "4.3.1.  HELLO Message Generation\n   HELLO messages are generated by a router
        for each of its MANET\n   interfaces, and MAY be sent:\n   o  Proactively,
        at a regular interval, known as HELLO_INTERVAL.\n      HELLO_INTERVAL may
        be fixed, or may be dynamic.  For example,\n      HELLO_INTERVAL may be backed
        off due to congestion or network\n      stability.\n   o  As a response to
        a change in the router itself, or its 1-hop\n      neighborhood, for example,
        on first becoming active or in response\n      to a new, lost, or changed
        status link.\n   o  In a combination of these proactive and responsive mechanisms.\n
        \  Jittering of HELLO message generation and transmission SHOULD be used\n
        \  as described in Section 11.2, unless the medium access control\n   mechanism
        in use prevents any simultaneous transmissions by\n   potentially interfering
        routers.\n   HELLO messages MAY be scheduled independently for each MANET\n
        \  interface, or, interface parameters permitting, using the same\n   schedule
        for all MANET interfaces of a router.\n"
      title: 4.3.1.  HELLO Message Generation
    - contents:
      - "4.3.2.  HELLO Message Content\n   The content of a HELLO message MUST satisfy
        the following:\n   o  A HELLO message MUST contain all of the network addresses
        in the\n      Local Interface Set of the router on which the HELLO message
        is\n      being generated.  This includes:\n      o  At least one network
        address of each MANET interface of the\n         router.\n      o  Network
        addresses that include all source addresses of any IP\n         datagrams
        sent by the router on any MANET interface.\n      o  All other network addresses
        of the router that are to be made\n         known to any other router for
        any reason.\n   o  For each MANET interface, within every time interval equal
        to the\n      corresponding REFRESH_INTERVAL, sent HELLO messages MUST\n      collectively
        include all of the relevant information in the\n      corresponding Link Set
        and the Neighbor Information Base.  Note\n      that when determining whether
        to include information in a HELLO\n      message, the sender MUST consider
        all times up to the latest time\n      when it may send its next HELLO message
        on this MANET interface.\n   o  For each MANET interface, within every time
        interval equal to the\n      corresponding REFRESH_INTERVAL, sent HELLO messages
        MUST\n      collectively include all of the relevant information in the\n
        \     corresponding Link Set and the Neighbor Information Base.\n   o  When
        determining whether to include a given piece of neighbor\n      information
        in a HELLO message, it is not sufficient to consider\n      whether that information
        has been sent in the interval of length\n      REFRESH_INTERVAL up to the
        current time.  Instead, the router MUST\n      consider the interval of length
        REFRESH_INTERVAL that will end at\n      the latest possible time at which
        the next HELLO message will be\n      sent on this MANET interface.  (Normally,
        this will be\n      HELLO_INTERVAL past the current time, but MAY be earlier
        if this\n      router elects to divide its neighbor information among more
        than\n      one HELLO message in order to reduce the size of its HELLO\n      messages.)
        \ All neighbor information MUST be sent in this\n      interval, i.e., the
        router MUST ensure that this HELLO message\n      includes all neighbor information
        that has not already been\n      included in any HELLO messages sent since
        the start of this\n      interval (normally, the current time - (REFRESH_INTERVAL
        -\n      HELLO_INTERVAL)).\n   o  A HELLO message MUST include exactly one
        VALIDITY_TIME Message\n      TLV, as specified in [RFC5497], that indicates
        the length of time\n      for which the message content is to be considered
        valid, and is\n      therefore to be included in the receiving router's Interface\n
        \     Information Base.\n   o  A periodically generated HELLO message SHOULD
        include exactly one\n      INTERVAL_TIME Message TLV, as specified in [RFC5497],
        that\n      indicates the current value of HELLO_INTERVAL for that MANET\n
        \     interface, i.e., the period within which a further HELLO message\n      is
        guaranteed to be sent on that MANET interface.\n"
      title: 4.3.2.  HELLO Message Content
    - contents:
      - "4.3.3.  HELLO Message Processing\n   HELLO messages received by a router
        are used to update the Interface\n   Information Base for the MANET interface
        over which that HELLO\n   message was received, as well as the Neighbor Information
        Base of the\n   router.  Specifically:\n   o  The router ensures that there
        is a single Neighbor Tuple\n      corresponding to the originator of that
        HELLO message.\n   o  The router ensures that there is a Link Tuple, with
        appropriate\n      status (heard or symmetric) and advertised duration, corresponding\n
        \     to the link between the MANET interfaces on which that HELLO\n      message
        was sent and received.  One or more Lost Neighbor Tuples\n      may be created
        if the HELLO message reports that the link was\n      lost.\n   o  If the
        link between the MANET interfaces on which the HELLO\n      message was sent
        and received is symmetric, then the router\n      ensures that there are the
        appropriate 2-Hop Tuples, with\n      advertised duration.\n   The processing
        defined in this specification handles any unexpected\n   and erroneous information
        in a HELLO message, maintaining the\n   constraints on Information Base contents
        specified in Appendix B.\n"
      title: 4.3.3.  HELLO Message Processing
    title: 4.3.  Signaling Overview
  - contents:
    - "4.4.  Link Quality\n   Some links in a MANET may be marginal, e.g., due to
      adverse wireless\n   propagation.  In order to avoid using such marginal links,
      a link\n   quality value is recorded in each Link Tuple.  A MANET router\n   considers
      links for which an insufficient link quality is recorded as\n   lost.  Modifying
      the recorded link quality in a Link Tuple is\n   OPTIONAL.  If link quality
      is not to be modified, it MUST be set to\n   indicate an always usable quality
      link.\n   Note that link quality is a \"link admittance\" mechanism, allowing
      a\n   router to determine that a given link is too unstable to even\n   consider
      for use.  It is specifically not a link metric nor is it a\n   substitute for
      one.\n   Link quality information is only used locally and is not used in\n
      \  signaling.  Routers may interoperate whether they are using the same,\n   different,
      or no link quality information.  Link quality information\n   is thus not equivalent
      to a link metric.\n   Link quality information is defined in this specification
      as a\n   normalized, dimensionless value in the interval zero to one,\n   inclusive,
      where the greater the value, the better the link quality.\n   See Section 14
      for further details.\n"
    title: 4.4.  Link Quality
  title: 4.  Protocol Overview and Functioning
- contents:
  - "5.  Protocol Parameters and Constants\n   The parameters and constants used in
    this specification are described\n   in this section.\n"
  - contents:
    - "5.1.  Protocol and Port Numbers\n   This protocol specifies HELLO messages,
      which are included in packets\n   as defined by [RFC5444].  These packets may
      be sent using either the\n   \"manet\" protocol number or the \"manet\" well-known
      UDP port number, as\n   specified in [RFC5498].\n"
    title: 5.1.  Protocol and Port Numbers
  - contents:
    - "5.2.  Multicast Address\n   This protocol specifies HELLO messages, which are
      included in packets\n   as defined by [RFC5444].  These packets may be locally
      transmitted\n   using the link-local multicast address \"LL-MANET-Routers\",
      as\n   specified in [RFC5498].\n"
    title: 5.2.  Multicast Address
  - contents:
    - "5.3.  Interface Parameters\n   The interface parameters used by this specification
      may be classified\n   into the following four categories:\n   o  Message intervals\n
      \  o  Information validity times\n   o  Link quality\n   o  Jitter\n   These
      are detailed in the following sections.\n   Different MANET interfaces (on the
      same or on different routers) MAY\n   employ different interface parameter values
      and MAY change their\n   interface parameter values dynamically, subject to
      the constraints\n   given in this section.  A particular case is where all MANET\n
      \  interfaces on all MANET routers within a given MANET employ the same\n   set
      of interface parameter values.\n"
    - contents:
      - "5.3.1.  Message Intervals\n   HELLO messages serve two principal functions:\n
        \  o  To advertise network addresses of this router's interface to its\n      1-hop
        neighbors.  The frequency of these advertisements is\n      regulated by the
        interface parameters HELLO_INTERVAL and\n      HELLO_MIN_INTERVAL.\n   o  To
        advertise this router's knowledge of each of its 1-hop\n      neighbors.  The
        frequency of the advertisement of each such\n      neighbor is regulated by
        the interface parameter REFRESH_INTERVAL.\n   Specifically, these parameters
        are as follows:\n   HELLO_INTERVAL:\n      The maximum time between the transmission
        of two successive HELLO\n      messages on this MANET interface.  If using
        periodic transmission\n      of HELLO messages, these SHOULD be at a separation
        of\n      HELLO_INTERVAL, possibly modified by jitter as specified in\n      [RFC5148].\n
        \  HELLO_MIN_INTERVAL:\n      The minimum interval between transmission of
        two successive HELLO\n      messages on this MANET interface.  (This minimum
        interval MAY be\n      modified by jitter, as defined in [RFC5148].)\n   REFRESH_INTERVAL:\n
        \     The maximum interval between advertisements, in a HELLO message on\n
        \     this MANET interface, of each 1-hop neighbor network address and\n      its
        status.  In all intervals of length REFRESH_INTERVAL, a router\n      MUST
        include each 1-hop neighbor network address and its status in\n      at least
        one HELLO message on this MANET interface.  (This may be\n      in the same
        or in different HELLO messages.)\n   REFRESH_INTERVAL thus represents the
        frequency at which a piece of\n   information, as received in HELLO messages,
        can be expected to be\n   refreshed.  Thus, the REFRESH_INTERVAL is used as
        a basis for\n   determining when such information expires in receiving routers
        (see\n   Section 5.3.2).  HELLO_INTERVAL represents the frequency of HELLO\n
        \  message emissions.  Logically, HELLO_INTERVAL cannot be greater than\n
        \  the REFRESH_INTERVAL; otherwise, information cannot be refreshed in a\n
        \  timely manner.\n   HELLO messages can, however, be sent with a higher frequency.
        \ A\n   possible use for sending HELLO messages at such a higher frequency\n
        \  includes sending partial HELLO messages (e.g., accommodating\n   constraints
        on packet sizes from the underlying medium) refreshing\n   only part of the
        information in each HELLO message.  Another use is\n   for a router to send
        \"empty HELLO messages\", advertising its own\n   presence frequently in smaller
        HELLO messages (e.g., in case HELLO\n   message exchange success rates are
        used for link quality estimation,\n   or to enable rapid detection by new
        routers in the neighborhood) in\n   between HELLO messages refreshing neighbor
        information in other\n   routers.\n   The following constraints apply to these
        interface parameters:\n   o  HELLO_INTERVAL > 0\n   o  HELLO_MIN_INTERVAL
        >= 0\n   o  HELLO_INTERVAL >= HELLO_MIN_INTERVAL\n   o  REFRESH_INTERVAL >=
        HELLO_INTERVAL\n   o  If an INTERVAL_TIME Message TLV as defined in [RFC5497]
        is\n      included in a HELLO message, then HELLO_INTERVAL MUST be\n      representable
        as described in [RFC5497].\n   If REFRESH_INTERVAL > HELLO_INTERVAL, then
        a router may distribute\n   its neighbor advertisements between HELLO messages
        in any manner,\n   subject to the constraints above.\n   In the absence of
        any changes to the local neighborhood, a router\n   will send a HELLO message
        on a MANET interface after an (possibly\n   jittered) interval of length HELLO_INTERVAL.
        \ For a router to employ\n   this protocol in a purely responsive manner on
        a MANET interface,\n   i.e., for the router to only send HELLO messages on
        that MANET\n   interface as a response to external events, HELLO_INTERVAL
        (and hence\n   also REFRESH_INTERVAL) SHOULD be set sufficiently large, i.e.,
        such\n   that a responsive HELLO message is always expected with a shorter\n
        \  period than this value.\n   If a router has more than one MANET interface,
        then, even if the\n   router configures different values of HELLO_INTERVAL
        on each MANET\n   interface, the router SHOULD configure the same value of\n
        \  HELLO_MIN_INTERVAL on all MANET interfaces on which responsive HELLO\n
        \  messages may be sent.  (This ensures that changes observed on one\n   MANET
        interface are reported on other MANET interfaces, so that 1-hop\n   neighbors
        connected to the latter can maintain up-to-date 2-hop\n   neighborhood information.)\n"
      title: 5.3.1.  Message Intervals
    - contents:
      - "5.3.2.  Information Validity Times\n   The following interface parameters
        manage the validity time of link\n   information:\n   L_HOLD_TIME:\n      The
        period of advertisement, on this MANET interface, of former\n      1-hop neighbor
        network addresses as lost in HELLO messages,\n      allowing recipients of
        these HELLO messages to accelerate removal\n      of this information from
        their Link Sets.  L_HOLD_TIME MAY be set\n      to zero, if accelerated information
        removal is not required.\n   H_HOLD_TIME:\n      Used as the Value in the
        VALIDITY_TIME Message TLV included in all\n      HELLO messages on this MANET
        interface.  It is then used by each\n      router receiving such a HELLO message
        to indicate the validity of\n      the information taken from that HELLO message
        and recorded in the\n      receiving router's Information Bases.\n   Note
        that as each item of neighbor information is included in HELLO\n   messages
        within an interval of length REFRESH_INTERVAL, constraints\n   on H_HOLD_TIME
        are based on REFRESH_INTERVAL, not on HELLO_INTERVAL.\n   The following constraints
        apply to these interface parameters:\n   o  L_HOLD_TIME >= 0\n   o  H_HOLD_TIME
        >= REFRESH_INTERVAL\n   o  If HELLO messages can be lost, then both parameters
        SHOULD be\n      significantly greater than REFRESH_INTERVAL.\n   o  H_HOLD_TIME
        MUST be representable as described in [RFC5497].\n"
      title: 5.3.2.  Information Validity Times
    - contents:
      - "5.3.3.  Link Quality\n   The following interface parameters manage the usage
        of link quality\n   (see Section 14):\n   HYST_ACCEPT:\n      The link quality
        threshold at or above which a link becomes\n      usable, if it was not already
        so.\n   HYST_REJECT:\n      The link quality threshold below which a link
        becomes unusable, if\n      it was not already so.\n   INITIAL_QUALITY:\n
        \     The initial quality of a newly identified link.\n   INITIAL_PENDING:\n
        \     If true, then a newly identified link is considered pending, and\n      is
        not usable until the link quality has reached or exceeded the\n      HYST_ACCEPT
        threshold.\n   The following constraints apply to these interface parameters:\n
        \  o  0 <= HYST_REJECT <= HYST_ACCEPT <= 1\n   o  0 <= INITIAL_QUALITY <=
        1.\n   o  If link quality is not updated, then INITIAL_QUALITY >=\n      HYST_ACCEPT.\n
        \  o  If INITIAL_QUALITY >= HYST_ACCEPT, then INITIAL_PENDING := false.\n
        \  o  If INITIAL_QUALITY < HYST_REJECT, then INITIAL_PENDING := true.\n"
      title: 5.3.3.  Link Quality
    - contents:
      - "5.3.4.  Jitter\n   If jitter, as defined in [RFC5148], is used, then these
        parameters\n   are as follows:\n   HP_MAXJITTER:\n      Represents the value
        of MAXJITTER used in [RFC5148] for\n      periodically generated HELLO messages
        on this MANET interface.\n   HT_MAXJITTER:\n      Represents the value of
        MAXJITTER used in [RFC5148] for externally\n      triggered HELLO messages
        on this MANET interface.\n   For constraints on these interface parameters,
        see [RFC5148].\n"
      title: 5.3.4.  Jitter
    title: 5.3.  Interface Parameters
  - contents:
    - "5.4.  Router Parameters\n   The two router parameters defined by this specification
      are in the\n   category of information validity time.\n"
    - contents:
      - "5.4.1.  Information Validity Time\n   The following router parameter manages
        the validity time of lost\n   symmetric 1-hop neighbor information:\n   N_HOLD_TIME:\n
        \     Used as the period during which former 1-hop neighbor network\n      addresses
        are advertised as lost in HELLO messages, allowing\n      recipients of these
        HELLO messages to accelerate removal of this\n      information from their
        2-Hop Sets.  N_HOLD_TIME MAY be set to\n      zero, if accelerated information
        removal is not required.\n   I_HOLD_TIME:\n      The period for which a recently
        used local interface network\n      address is recorded.\n   The following
        constraints apply to these router parameters:\n   o  N_HOLD_TIME >= 0\n   o
        \ I_HOLD_TIME >= 0\n"
      title: 5.4.1.  Information Validity Time
    title: 5.4.  Router Parameters
  - contents:
    - "5.5.  Parameter Change Constraints\n   If protocol parameters are changed dynamically,
      the constraints in\n   this section apply.\n   HELLO_INTERVAL\n      o  If the
      HELLO_INTERVAL for a MANET interface increases, then the\n         next HELLO
      message on this MANET interface MUST be generated\n         according to the
      previous, shorter, HELLO_INTERVAL.  A number\n         of subsequent HELLO messages
      MAY be generated according to the\n         previous, shorter, HELLO_INTERVAL
      (but MUST include times\n         according to current parameters).  This ensures
      that \"promises\"\n         as to timely transmission of a future HELLO message
      are kept\n         until these previous promises have expired.\n      o  If
      the HELLO_INTERVAL for a MANET interface decreases, then the\n         following
      HELLO messages on this MANET interface MUST be\n         generated according
      to this current, shorter, HELLO_INTERVAL.\n   REFRESH_INTERVAL\n      o  If
      the REFRESH_INTERVAL for a MANET interface increases, then\n         the content
      of subsequent HELLO messages must be organized such\n         that the specification
      of the old value of REFRESH_INTERVAL is\n         satisfied for a further period
      equal to the old value of\n         REFRESH_INTERVAL.\n      o  If the REFRESH_INTERVAL
      for a MANET interface decreases, then\n         it MAY be necessary to reschedule
      HELLO message generation on\n         that MANET interface, in order for the
      specification of\n         REFRESH_INTERVAL is satisfied from the time of change.\n
      \  HYST_ACCEPT and HYST_REJECT\n      o  If HYST_ACCEPT or HYST_REJECT changes,
      then the appropriate\n         actions for link quality change, as specified
      in Section 14.3,\n         MUST be taken.\n   L_HOLD_TIME\n      o  If L_HOLD_TIME
      changes, then the expiry times of all relevant\n         Link Tuples MUST be
      changed.\n   N_HOLD_TIME\n      o  If N_HOLD_TIME changes, then the expiry times
      of all relevant\n         Lost Neighbor Tuples MUST be changed.\n   HP_MAXJITTER\n
      \     o  If HP_MAXJITTER changes, then the periodic HELLO message\n         schedule
      on this MANET interface MAY be changed.\n   HT_MAXJITTER\n      o  If HT_MAXJITTER
      changes, then externally triggered HELLO\n         messages on this MANET interface
      MAY be rescheduled.\n"
    title: 5.5.  Parameter Change Constraints
  - contents:
    - "5.6.  Constants\n   The constant C (time granularity) is used as specified
      in [RFC5497].\n"
    title: 5.6.  Constants
  title: 5.  Protocol Parameters and Constants
- contents:
  - "6.  Local Information Base\n   A router maintains a Local Information Base that
    records information\n   about its interfaces (MANET and non-MANET).  Each interface
    of a\n   router MUST be identified by at least one network address.  Such\n   network
    addresses MAY be specific to that interface, or MAY in some\n   circumstances
    be used by more than one interface as specified below.\n   The Local Information
    Base is not modified by signaling.  If a\n   router's interface configuration
    changes, then the Local Information\n   Base MUST reflect these changes.  This
    MAY also result in signaling\n   to advertise these changes.\n   It is not necessary
    to include all addresses of an interface in the\n   Local Information Base, and
    hence in HELLO messages.  However, any\n   address that may be the source address
    of an IP datagram sent from\n   that interface MUST be included (and at least
    one address MUST be\n   included).  A protocol using this specification MAY add
    additional\n   requirements to these, e.g., that any address that may be the\n
    \  destination address of an IP datagram is also included.\n   The addresses assigned
    to an interface are \"owned\" by the router, and\n   MUST NOT be used by any other
    router as an interface address.  If an\n   address has a prefix length and represents
    a range of addresses, this\n   applies to all addresses in that range (i.e., such
    ranges MUST NOT\n   overlap).\n   The addresses assigned to different interfaces
    on the same router\n   MUST be distinct (hence, network address ranges MUST NOT
    overlap)\n   except that:\n   o  The same address MAY be assigned to any number
    of non-MANET\n      interfaces as well as to one (or more if the following condition\n
    \     also applies) MANET interface.\n   o  The same address MAY be assigned to
    two (or more if each pair\n      satisfies this condition) MANET interfaces if
    those two MANET\n      interfaces cannot communicate to, from, or one to and one
    from any\n      other MANET interface of another router.\n"
  - contents:
    - "6.1.  Local Interface Set\n   A router's Local Interface Set records its local
      interfaces.  It\n   consists of Local Interface Tuples, one per interface:\n
      \     (I_local_iface_addr_list, I_manet)\n   where:\n      I_local_iface_addr_list
      is an unordered list of the network\n      addresses of this interface.\n      I_manet
      is a boolean flag, describing if this interface is a MANET\n      interface.\n
      \  Local Interface Tuples are removed from the Local Interface Set only\n   when
      the routers' interface configuration changes, subject to\n   Section 9, i.e.,
      they are not subject to timer-based expiration.\n"
    title: 6.1.  Local Interface Set
  - contents:
    - "6.2.  Removed Interface Address Set\n   A router's Removed Interface Address
      Set records network addresses\n   that were recently used as local interface
      network addresses.  If a\n   router's interface network addresses are immutable,
      then the Removed\n   Interface Address Set is always empty and MAY be omitted.
      \ It\n   consists of Removed Interface Address Tuples, one per network\n   address:\n
      \     (IR_local_iface_addr, IR_time)\n   where:\n      IR_local_iface_addr is
      a recently used network address of an\n      interface of this router.\n      IR_time
      specifies when this Tuple expires and MUST be removed.\n"
    title: 6.2.  Removed Interface Address Set
  title: 6.  Local Information Base
- contents:
  - "7.  Interface Information Bases\n   A router maintains an Interface Information
    Base for each of its\n   MANET interfaces.  This records information about links
    to that MANET\n   interface and symmetric 2-hop neighbors that can be reached
    in two\n   hops using those links as the first hop.  Each Interface Information\n
    \  Base includes a Link Set and a 2-Hop Set.\n   A network address of a symmetric
    2-hop neighbor can also be present\n   as the network address of a 1-hop neighbor.
    \ This allows the router\n   using this network address to be immediately considered
    as a\n   symmetric 2-hop neighbor if it fails to be a symmetric 1-hop\n   neighbor.\n
    \  An element that specifies a time is considered expired if the current\n   time
    is greater than or equal to that time.  One such element,\n   present in most
    Tuples, indicates, when expired, that the Tuple\n   itself is considered expired
    and MUST be removed.  Tuples that do not\n   have such a time element are removed
    at other times as specified; for\n   example, a Neighbor Tuple is removed when
    all corresponding Link\n   Tuples have been removed.\n"
  - contents:
    - "7.1.  Link Set\n   An interface's Link Set records links from other routers
      that are, or\n   recently were, 1-hop neighbors.  It consists of Link Tuples,
      each\n   representing a single link:\n      (L_neighbor_iface_addr_list, L_HEARD_time,
      L_SYM_time,\n       L_quality, L_pending, L_lost, L_time)\n   where:\n      L_neighbor_iface_addr_list
      is an unordered list of the network\n      addresses of the MANET interface
      of the 1-hop neighbor;\n      L_HEARD_time is the time up to which the MANET
      interface of the\n      1-hop neighbor would be considered heard if not considering
      link\n      quality;\n      L_SYM_time is the time up to which the link to the
      1-hop neighbor\n      would be considered symmetric if not considering link
      quality;\n      L_quality is a dimensionless number between 0 (inclusive) and
      1\n      (inclusive) describing the quality of a link; a greater value of\n
      \     L_quality indicating a higher quality link;\n      L_pending is a boolean
      flag, describing if a link is considered\n      pending (i.e., a candidate,
      but not yet established, link);\n      L_lost is a boolean flag, describing
      if a link is considered lost\n      due to low link quality;\n      L_time specifies
      when this Tuple expires and MUST be removed.\n   The status of the link, as
      obtained through HELLO message exchange\n   and using link quality, is denoted
      L_status.  L_status can take the\n   Values PENDING, HEARD, SYMMETRIC, and LOST.
      \ The values LOST,\n   SYMMETRIC, and HEARD are defined in Section 18.5.  The
      Value PENDING\n   is never used in a HELLO message, it is only used locally
      by a\n   router, and any Value distinct from LOST, SYMMETRIC, and HEARD may
      be\n   used.\n   L_status is defined by:\n   1.  If L_pending = true, then L_status
      := PENDING;\n   2.  otherwise, if L_lost = true, then L_status := LOST;\n   3.
      \ otherwise, if L_SYM_time is not expired, then L_status :=\n       SYMMETRIC;\n
      \  4.  otherwise, if L_HEARD_time is not expired, then L_status :=\n       HEARD;\n
      \  5.  otherwise, L_status := LOST.\n"
    title: 7.1.  Link Set
  - contents:
    - "7.2.  2-Hop Set\n   An interface's 2-Hop Set records network addresses of symmetric
      2-hop\n   neighbors, and the symmetric links to symmetric 1-hop neighbors\n
      \  through which these symmetric 2-hop neighbors can be reached.  It\n   consists
      of 2-Hop Tuples, each representing a single network address\n   of a symmetric
      2-hop neighbor, and a single MANET interface of a\n   symmetric 1-hop neighbor.\n
      \     (N2_neighbor_iface_addr_list, N2_2hop_addr, N2_time)\n   where:\n      N2_neighbor_iface_addr_list
      is an unordered list of the network\n      addresses of the MANET interface
      of the symmetric 1-hop neighbor\n      from which this information was received;\n
      \     N2_2hop_addr is a network address of a symmetric 2-hop neighbor\n      that
      has a symmetric link (using any MANET interface) to the\n      indicated symmetric
      1-hop neighbor;\n      N2_time specifies when this Tuple expires and MUST be
      removed.\n"
    title: 7.2.  2-Hop Set
  title: 7.  Interface Information Bases
- contents:
  - "8.  Neighbor Information Base\n   Each router maintains a Neighbor Information
    Base that records\n   information about network addresses of current and recently
    symmetric\n   1-hop neighbors.\n"
  - contents:
    - "8.1.  Neighbor Set\n   A router's Neighbor Set records all network addresses
      of each 1-hop\n   neighbor.  It consists of Neighbor Tuples, each representing
      a single\n   1-hop neighbor:\n      (N_neighbor_addr_list, N_symmetric)\n   where:\n
      \     N_neighbor_addr_list is an unordered list of the network addresses\n      of
      a 1-hop neighbor;\n      N_symmetric is a boolean flag, describing if this is
      a symmetric\n      1-hop neighbor.\n   Neighbor Tuples are removed from the
      Neighbor Set only when\n   corresponding Link Tuples expire from the routers'
      Link Set, i.e.,\n   Neighbor Tuples are not directly subject to timer-based
      expiration.\n"
    title: 8.1.  Neighbor Set
  - contents:
    - "8.2.  Lost Neighbor Set\n   A router's Lost Neighbor Set records network addresses
      of routers\n   that recently were symmetric 1-hop neighbors but that are now\n
      \  advertised as lost.  It consists of Lost Neighbor Tuples, each\n   representing
      a single such network address:\n      (NL_neighbor_addr, NL_time)\n   where:\n
      \     NL_neighbor_addr is a network address of a router that recently\n      was
      a symmetric 1-hop neighbor of this router;\n      NL_time specifies when this
      Tuple expires and MUST be removed.\n"
    title: 8.2.  Lost Neighbor Set
  title: 8.  Neighbor Information Base
- contents:
  - "9.  Local Information Base Changes\n   The Local Information Base MUST be updated
    in response to changes in\n   the router's local interface configuration.  These
    MAY also change\n   the Interface Information Base and the Neighbor Information
    Base.  If\n   any changes to the latter Information Bases satisfy any of the\n
    \  conditions described in Section 13, then those changes MUST be\n   applied
    immediately, unless noted otherwise below.\n   A router MAY transmit HELLO messages
    in response to these changes.\n"
  - contents:
    - "9.1.  Adding an Interface\n   If an interface is added to the router, then
      this is indicated by the\n   addition of a Local Interface Tuple to the Local
      Interface Set.  If\n   the new interface is a MANET interface, then an initially
      empty\n   Interface Information Base MUST be created for this new MANET\n   interface.
      \ The actions in Section 9.3 MUST be taken for each network\n   address of this
      added interface.  A HELLO message MAY be sent on all\n   MANET interfaces, it
      SHOULD be sent on the new interface if it is a\n   MANET interface.  If using
      scheduled messages, then a message\n   schedule MUST be established on the new
      MANET interface.\n"
    title: 9.1.  Adding an Interface
  - contents:
    - "9.2.  Removing an Interface\n   If an interface is removed from the router,
      then this MUST result in\n   changes to the Local Information Base and to the
      Neighbor Information\n   Base as follows:\n   1.  Identify the Local Interface
      Tuple that corresponds to the\n       interface to be removed.\n   2.  For each
      network address (henceforth removed address) in the\n       I_local_iface_addr_list
      of that Local Interface Tuple, if that\n       network address is not in the
      I_local_iface_addr_list of any\n       other Local Interface Tuple, then create
      a Removed Interface\n       Address Tuple with:\n       o  IR_local_iface_addr
      := removed address;\n       o  IR_time := current time + I_HOLD_TIME.\n   3.
      \ Remove that Local Interface Tuple from the Local Interface Set.\n   4.  If
      the interface to be removed is a MANET interface (i.e., with\n       I_manet
      = true), then:\n       1.  Remove the Interface Information Base for that MANET\n
      \          interface;\n       2.  All Neighbor Tuples for which none of the
      network addresses\n           in its N_neighbor_addr_list are contained in any\n
      \          L_neighbor_iface_addr_list in any remaining Link Tuple are\n           removed.\n
      \  If the removed interface is the last MANET interface of the router,\n   then
      there will be no remaining Interface Information Bases, and the\n   router will
      no longer participate in this protocol.\n   After removing the interface and
      making these changes, a HELLO\n   message MAY be sent on all remaining MANET
      interfaces.\n"
    title: 9.2.  Removing an Interface
  - contents:
    - "9.3.  Adding a Network Address to an Interface\n   If a network address is
      added to an interface, then this is indicated\n   by the addition of a network
      address to the appropriate\n   I_local_iface_addr_list.  The following changes
      MUST be made to the\n   Information Bases:\n   1.  Remove any Removed Interface
      Address Tuple whose\n       IR_local_iface_addr is the added network address.\n
      \  2.  Remove any Neighbor Tuples whose N_neighbor_addr_list contains a\n       network
      address that overlaps the added network address.\n   3.  Remove any Link Tuples,
      in any Link Set, for which either:\n       o  L_neighbor_iface_addr_list contains
      any network address in the\n          N_neighbor_addr_list of any removed Neighbor
      Tuple; OR\n       o  L_neighbor_iface_addr_list contains a network address that\n
      \         overlaps the added network address.\n       Apply Section 13.2 but
      not Section 13.3.\n   4.  Remove any Lost Neighbor Tuples whose NL_neighbor_addr
      overlaps\n       the added network address.\n   5.  Remove any 2-Hop Tuples
      whose N2_2hop_addr overlaps the added\n       network address.\n   After adding
      the network address and making these changes, a HELLO\n   message MAY be sent
      on all MANET interfaces.\n   These changes, other than to the appropriate I_local_iface_addr_list,\n
      \  are made in order to maintain consistency of the Information Bases.\n   Specifically,
      these changes remove any record of any use of this\n   network address by routers
      in the 1-hop neighborhood or in the\n   symmetric 2-hop neighborhood of this
      router.\n"
    title: 9.3.  Adding a Network Address to an Interface
  - contents:
    - "9.4.  Removing a Network Address from an Interface\n   If a network address
      (henceforth removed address) is removed from an\n   interface, then:\n   1.
      \ Identify the Local Interface Tuple that corresponds to the\n       removed
      address.\n   2.  If this is the only network address of that interface (the
      only\n       network address in the corresponding I_local_iface_addr_list),\n
      \      then remove that interface as specified in Section 9.2.\n   3.  Otherwise:\n
      \      1.  Remove the removed address from this I_local_iface_addr_list.\n       2.
      \ If the removed address is not in the I_local_iface_addr_list\n           of
      any other Local Interface Tuple, then create a Removed\n           Interface
      Address Tuple with:\n           o  IR_local_iface_addr := removed address;\n
      \          o  IR_time := current time + I_HOLD_TIME.\n   After removing the
      network address and making these changes, a HELLO\n   message MAY be sent on
      all MANET interfaces.\n"
    title: 9.4.  Removing a Network Address from an Interface
  title: 9.  Local Information Base Changes
- contents:
  - "10.  Packets and Messages\n   The packet and message format used by this protocol
    is defined in\n   [RFC5444], which is used with the following considerations:\n
    \  o  This protocol specifies one Message Type, the HELLO message.\n   o  A HELLO
    message MAY use any combination of Message Header options\n      specified in
    [RFC5444].\n   o  HELLO messages MUST NOT be forwarded, i.e., a <msg-hop-limit>,
    if\n      present, MUST have the value 1.\n   o  HELLO messages MAY be included
    in multi-message packets as\n      specified in [RFC5444].\n   o  Received HELLO
    messages MUST be parsed in accordance with\n      [RFC5444].  A HELLO message
    that is not in conformance with\n      [RFC5444] MUST be discarded without being
    processed.  A HELLO\n      message can also be discarded without being processed
    for other\n      reasons, see Section 12.1.\n   o  This protocol specifies three
    Address Block TLVs.  It also uses\n      two Message TLVs defined in [RFC5497].
    \ These five TLV Types are\n      all defined only with Type Extension = 0.  TLVs
    of other types,\n      and of these types but without Type Extension = 0, are
    ignored by\n      this protocol.  All references in this specification to, for\n
    \     example, an Address Block TLV with Type = LINK_STATUS, are to be\n      considered
    as referring to an Address Block TLV with Type =\n      LINK_STATUS and Type Extension
    = 0.\n"
  - contents:
    - "10.1.  HELLO Messages\n   A HELLO message MUST contain:\n   o  Exactly one
      VALIDITY_TIME Message TLV as specified in [RFC5497],\n      representing H_HOLD_TIME
      for the transmitting MANET interface.\n      The options included in [RFC5497]
      for representing zero and\n      infinite times MUST NOT be used.\n   A HELLO
      message transmitted due to a periodic timer SHOULD contain,\n   and otherwise
      (i.e., transmitted for any other reason, in particular\n   in response to any
      Information Base changes) MAY contain:\n   o  Exactly one INTERVAL_TIME Message
      TLV as specified in [RFC5497],\n      representing HELLO_INTERVAL for the transmitting
      MANET interface.\n      The options included in [RFC5497] for representing zero
      and\n      infinite times MUST NOT be used.\n   A HELLO message MAY contain:\n
      \  o  Other Message TLVs.\n   o  One or more Address Blocks, each with an associated
      Address Block\n      TLV Block, which MAY contain other Address Block TLVs.\n"
    - contents:
      - "10.1.1.  Address Blocks\n   All network addresses in a router's Local Interface
        Set (i.e., in any\n   I_local_iface_addr_list) MUST be represented as address
        objects (see\n   [RFC5444]), and included in the Address Blocks in all generated
        HELLO\n   messages, with the following permitted exception:\n   o  If the
        MANET interface on which the HELLO message is to be sent\n      has a single
        address with maximum prefix length (i.e., /32 for\n      IPv4, /128 for IPv6),
        then that address MAY be omitted from being\n      included in any Address
        Block, provided that this address is\n      included as the sending address
        of the IP datagram in which the\n      HELLO message is included.\n   All
        network addresses of the router's interfaces included in any\n   Address Block(s)
        MUST be associated with an Address Block TLV with\n   Type = LOCAL_IF, as
        defined in Table 1.\n   +----------+---------+----------------------------------------------+\n
        \  |   Name   |  Value  | Description                                  |\n
        \  |          |  Length |                                              |\n
        \  +----------+---------+----------------------------------------------+\n
        \  | LOCAL_IF | 1 octet | Specifies that the network address is        |\n
        \  |          |         | associated with the MANET interface on which |\n
        \  |          |         | the message was sent (THIS_IF) or another    |\n
        \  |          |         | interface of the sending router (OTHER_IF).  |\n
        \  +----------+---------+----------------------------------------------+\n
        \                    Table 1: LOCAL_IF TLV Definition\n   Address Blocks MAY
        contain current or recently lost 1-hop neighbors'\n   network addresses, represented
        as address objects (see [RFC5444]),\n   each of which is associated with one
        or both Address Block TLVs as\n   described in Table 2.\n   +--------------+---------+------------------------------------------+\n
        \  |     Name     |  Value  | Description                              |\n
        \  |              |  Length |                                          |\n
        \  +--------------+---------+------------------------------------------+\n
        \  |  LINK_STATUS | 1 octet | Specifies the status of the link from    |\n
        \  |              |         | the indicated network address and to the |\n
        \  |              |         | MANET interface over which the HELLO     |\n
        \  |              |         | message is transmitted (LOST, SYMMETRIC, |\n
        \  |              |         | or HEARD).                               |\n
        \  | OTHER_NEIGHB | 1 octet | Specifies that the network address is    |\n
        \  |              |         | (SYMMETRIC) or was (LOST) of a MANET     |\n
        \  |              |         | interface of a symmetric 1-hop neighbor  |\n
        \  |              |         | of the router transmitting the HELLO     |\n
        \  |              |         | message.                                 |\n
        \  +--------------+---------+------------------------------------------+\n
        \          Table 2: LINK_STATUS and OTHER_NEIGHB TLV Definition\n   An Address
        Block TLV with Type = LINK_STATUS and Value = SYMMETRIC or\n   Value = LOST
        also performs the function of an Address Block TLV with\n   Type = OTHER_NEIGHB
        and the same Value.  Including the latter\n   associated with the same address
        object is discouraged for efficiency\n   reasons.  If an Address Block TLV
        with Type = LINK_STATUS and Value =\n   SYMMETRIC is combined with an Address
        Block TLV with Type =\n   OTHER_NEIGHB and Value = LOST associated with the
        same address\n   object, then the latter MUST be ignored and SHOULD NOT be
        included.\n   See Appendix A.\n   Other network addresses MAY be represented
        as address objects (see\n   [RFC5444]) and included in Address Blocks, but
        MUST NOT be associated\n   with any of the Address Block TLVs specified in
        this specification.\n"
      title: 10.1.1.  Address Blocks
    title: 10.1.  HELLO Messages
  title: 10.  Packets and Messages
- contents:
  - "11.  HELLO Message Generation\n   Each MANET interface MUST generate HELLO messages
    according to the\n   specification in this section.  HELLO messages are generated
    for each\n   MANET interface independently.  HELLO message generation and\n   scheduling
    MUST be according to the interface parameters for that\n   MANET interface, and
    MAY be independent for each MANET interface or,\n   interface parameters permitting,
    MANET interfaces MAY use the same\n   schedule.\n   If transmitting periodic HELLO
    messages, then, following a HELLO\n   message transmission on a MANET interface,
    another HELLO message MUST\n   be transmitted on the same MANET interface after
    an interval not\n   greater than HELLO_INTERVAL.  Two successive HELLO message\n
    \  transmissions on the same MANET interface MUST be separated by at\n   least
    HELLO_MIN_INTERVAL, except as noted in Section 11.2.1.\n"
  - contents:
    - "11.1.  HELLO Message Specification\n   HELLO messages are generated independently
      on each MANET interface.\n   All network addresses in any I_local_iface_addr_list
      MUST be\n   included, represented as address objects (see [RFC5444]), except\n
      \  that:\n   o  If the interface on which the HELLO message is to be sent has
      a\n      single address with maximum prefix length (i.e., /32 for IPv4,\n      /128
      for IPv6), then that address MAY be omitted, provided that\n      this address
      is included as the sending address of the IP datagram\n      in which the HELLO
      message is included.\n   All such included address objects MUST be associated
      with an Address\n   Block TLV with Type := LOCAL_IF and Value according to the
      following:\n   o  If the address object represents a network address of the
      sending\n      MANET interface, then Value := THIS_IF.\n   o  Otherwise, Value
      := OTHER_IF.\n   If such a network address is included in more than one\n   I_local_iface_addr_list,
      then, for efficiency reasons, it is\n   encouraged that the corresponding address
      object is associated with\n   only one Value using an Address Block TLV with
      Type := LOCAL_IF; this\n   MUST be Value := THIS_IF if the address object represents
      a network\n   address of the sending MANET interface.\n   The following network
      addresses of current or former 1-hop neighbors\n   MAY be represented as address
      objects (see [RFC5444]) and included in\n   any HELLO message, respecting the
      parameter REFRESH_INTERVAL for each\n   association for that MANET interface,
      and according to the following:\n   o  Network addresses of MANET interfaces
      of 1-hop neighbors from the\n      Link Set of the Interface Information Base
      for this MANET\n      interface (i.e., from an L_neighbor_iface_addr_list),
      other than\n      those from Link Tuples with L_status = PENDING.\n   o  Other
      network addresses of symmetric 1-hop neighbors from the\n      Neighbor Set
      of this router's Neighbor Information Base (i.e.,\n      from an N_neighbor_addr_list).\n
      \  o  Network addresses of MANET interfaces of previously symmetric or\n      heard
      1-hop neighbors connected on this MANET interface from the\n      Link Set of
      the Interface Information Base for this MANET\n      interface (i.e., from an
      L_neighbor_iface_addr_list with L_status\n      = LOST).\n   o  Other network
      addresses of previously symmetric 1-hop neighbors\n      from the Lost Neighbor
      Set of this router's Neighbor Information\n      Base (i.e., from an NL_neighbor_addr).\n
      \  Each such address object (see [RFC5444]) MUST be associated with one\n   or
      more appropriate Address Block TLVs.  Specifically:\n   1.  For each address
      object (henceforth linked address) that\n       represents a network address
      contained in an\n       L_neighbor_iface_addr_list of a Link Tuple in the Link
      Set for\n       this MANET interface, for which L_status != PENDING, include
      the\n       linked address with an associated Address Block TLV with:\n       o
      \ Type := LINK_STATUS; AND\n       o  Value := L_status.\n   2.  For each address
      object (henceforth neighbor address) that\n       represents a network address
      contained in an N_neighbor_addr_list\n       in a Neighbor Tuple with N_symmetric
      = true and that has not\n       already been included with an associated Address
      Block TLV with\n       Type = LINK_STATUS and Value = SYMMETRIC, include the
      neighbor\n       network address with an associated Address Block TLV with:\n
      \      o  Type := OTHER_NEIGHB; AND\n       o  Value := SYMMETRIC.\n   3.  For
      each Lost Neighbor Tuple whose NL_neighbor_addr (henceforth\n       lost address)
      has not already been represented as an address\n       object and included,
      include lost address with an associated\n       Address Block TLV with:\n       o
      \ Type := OTHER_NEIGHB; AND\n       o  Value := LOST.\n   If any such network
      addresses have been added to these Information\n   Bases since the last HELLO
      message was sent on this MANET interface,\n   or if their status (as indicated
      by these TLVs and the Values they\n   associate with that network address) have
      changed since that network\n   address was last reported on this MANET interface,
      then that network\n   address, and the indicated TLVs, SHOULD be included in
      the HELLO\n   message.\n   If the address object (see [RFC5444]) representing
      a network address\n   of a 1-hop neighbor is specified with more than one associated\n
      \  Address Block TLV, then these Address Block TLVs MAY be independently\n   included
      or excluded from each HELLO message.  Each such Address\n   Block TLV MUST be
      included associated with the address object\n   representation of that network
      address in a HELLO message sent on\n   that MANET interface in every interval
      of length equal to that MANET\n   interface's parameter REFRESH_INTERVAL.  Address
      Block TLVs\n   associated with the same address object included in the same
      HELLO\n   message MAY be applied to the same or different copies of that\n   address
      object.\n   An implementation of this protocol MAY limit the information included\n
      \  in each HELLO message, for example, to accommodate smaller MTU sizes.\n   HELLO
      messages remain constrained by the above requirements, in\n   particular, that
      all local interface information MUST be included in\n   all HELLO messages,
      and that all neighbor information MUST be sent\n   within each interval of length
      REFRESH_INTERVAL.  This neighbor\n   information MAY, however, be sent in the
      same or in different HELLO\n   messages.\n"
    title: 11.1.  HELLO Message Specification
  - contents:
    - "11.2.  HELLO Message Transmission\n   HELLO messages are transmitted in the
      format specified by [RFC5444].\n"
    - contents:
      - "11.2.1.  HELLO Message Jitter\n   HELLO messages MAY be sent using periodic
        message generation or\n   externally triggered message generation.  If using
        data link and\n   physical layers that are subject to packet loss due to collisions,\n
        \  HELLO messages SHOULD be jittered as described in [RFC5148].\n   Internally
        triggered message generation (such as due to a change in\n   local interfaces)
        MAY be treated as if externally generated message\n   generation or MAY be
        not jittered.\n   HELLO messages MUST NOT be forwarded, and thus message forwarding\n
        \  jitter does not apply to HELLO messages.\n   Each form of jitter described
        in [RFC5148] requires a parameter\n   MAXJITTER.  These interface parameters
        may be dynamic and are\n   specified by:\n   o  For periodic message generation:
        HP_MAXJITTER.\n   o  For externally triggered message generation: HT_MAXJITTER.\n
        \  When HELLO message generation is delayed in order that a HELLO\n   message
        is not sent within HELLO_MIN_INTERVAL of the previous HELLO\n   message on
        the same MANET interface, then HELLO_MIN_INTERVAL SHOULD\n   be reduced by
        jitter, with maximum reduction HP_MAXJITTER, as\n   described in [RFC5148].
        \ In this case, HP_MAXJITTER MUST NOT be\n   greater than HELLO_MIN_INTERVAL.\n"
      title: 11.2.1.  HELLO Message Jitter
    title: 11.2.  HELLO Message Transmission
  title: 11.  HELLO Message Generation
- contents:
  - "12.  HELLO Message Processing\n   On receiving a HELLO message, a router MUST
    first check if the\n   message is invalid for processing by this router, as defined
    in\n   Section 12.1 and, if so, discard the message without further\n   processing.
    \ Otherwise, for each received and valid HELLO message,\n   the receiving router
    MUST update its appropriate Interface\n   Information Base and its Neighbor Information
    Base as specified in\n   Section 12.3 to Section 12.6.  These updates MUST be
    performed in the\n   order in which they are presented in this specification.
    \ If any\n   changes satisfy any of the conditions described in Section 13, then\n
    \  the indicated consequences in that section MUST be applied\n   immediately,
    unless noted otherwise.\n   All message processing, including determination of
    whether a message\n   is invalid, considers only TLVs with Type Extension = 0.
    \ TLVs with\n   any other type extension are ignored.  All references to, for\n
    \  example, a TLV with Type = LINK_STATUS refer to a TLV with Type =\n   LINK_STATUS
    and Type Extension = 0.\n"
  - contents:
    - "12.1.  Invalid Message\n   A received HELLO message is invalid for processing
      by this router if\n   any of the following conditions are true:\n   o  The address
      length as specified in the Message Header is not equal\n      to the length
      of the addresses used by this router.\n   o  The message has a <msg-hop-limit>
      field in its Message Header with\n      a value other than one.  (Note that
      the message does not need to\n      have a <msg-hop-limit> field.)\n   o  The
      message has a <msg-hop-count> field in its Message Header with\n      a value
      other than zero.  (Note that the message does not need to\n      have a <msg-hop-count>
      field.)\n   o  The message does not have a Message TLV with Type = VALIDITY_TIME\n
      \     in its Message TLV Block.\n   o  The message has more than one Message
      TLV with Type =\n      VALIDITY_TIME in its Message TLV Block.\n   o  The message
      has more than one Message TLV with Type =\n      INTERVAL_TIME in its Message
      TLV Block.\n   o  The message has any Address Block TLV(s) with Type = LOCAL_IF
      and\n      any single Value v such that v != THIS_IF and v != OTHER_IF.\n   o
      \ Any address object (including different address objects\n      representing
      the same network address, in the same or different\n      Address Blocks) is
      associated with more than one Value by one or\n      more Address Block TLV(s)
      with Type = LOCAL_IF.\n   o  Any address object (henceforth local address) associated
      with an\n      Address Block TLV with Type = LOCAL_IF represents one of the\n
      \     receiving router's current or recently used network addresses\n      (i.e.,
      local address overlaps any network address in any\n      I_local_iface_addr_list
      in the Local Interface Set or any\n      IR_local_iface_addr in the Removed
      Interface Address Set).\n   o  The message has any Address Block TLV(s) with
      Type = LINK_STATUS\n      with any single Value v such that v != LOST, v !=
      SYMMETRIC, and v\n      != HEARD.\n   o  The message has any Address Block TLV(s)
      with Type = OTHER_NEIGHB\n      with any single Value v such that v != LOST
      and v != SYMMETRIC.\n   o  Any address object (including different copies of
      an address\n      object, in the same or different Address Blocks) is associated\n
      \     with an Address Block TLV with Type = LOCAL_IF and with an Address\n      Block
      TLV with Type = LINK_STATUS.\n   o  Any address object (including different
      copies of an address\n      object, in the same or different Address Blocks)
      is associated\n      with an Address Block TLV with Type = LOCAL_IF and with
      an Address\n      Block TLV with Type = OTHER_NEIGHB.\n   o  Any address object
      (including different copies of an address\n      object, in the same or different
      Address Blocks) is associated\n      with more than one Value by one or more
      Address Block TLVs with\n      Type = LINK_STATUS.\n   o  Any address object
      (including different copies of an address\n      object, in the same or different
      Address Blocks) is associated\n      with more than one Value by one or more
      Address Block TLVs with\n      Type = OTHER_NEIGHB.\n   A router MAY recognize
      additional reasons for identifying that a\n   message is badly formed and therefore
      invalid for processing, e.g.,\n   to allow a security protocol as suggested
      in Section 17 to perform\n   verification of HELLO message signatures and prevent
      processing of\n   unverifiable HELLO messages by this protocol.\n   An invalid
      message MUST be silently discarded, without updating the\n   router's Information
      Bases.\n"
    title: 12.1.  Invalid Message
  - contents:
    - "12.2.  Definitions\n   For the purpose of this section, note the following
      definitions:\n   o  \"validity time\" is calculated from the Message TLV with
      Type =\n      VALIDITY_TIME of the HELLO message as specified in [RFC5497].\n
      \     (Note that, as specified by Section 12.1, there must be exactly\n      one
      such Message TLV in the HELLO message.)  All information in\n      the HELLO
      message used by this specification has the same validity\n      time.\n   o
      \ \"Receiving Address List\" is the I_local_iface_addr_list\n      corresponding
      to the MANET interface on which the HELLO message\n      was received\n   o
      \ \"Sending Address List\" is an unordered list of network addresses\n      of
      the MANET interface over which the HELLO message was sent,\n      i.e., is an
      unordered list of the network addresses represented by\n      address objects
      contained in the HELLO message with an associated\n      Address Block TLV with
      Type = LOCAL_IF and Value = THIS_IF.  If\n      the Sending Address List is
      otherwise empty, then the Sending\n      Address List contains a single network
      address with maximum prefix\n      length (i.e., /32 for IPv4, /128 for IPv6)
      with an address equal\n      to the sending address of the IP datagram in which
      the HELLO\n      message was included.\n   o  \"Neighbor Address List\" is an
      unordered list of all the network\n      addresses of all the interfaces of
      the router that generated the\n      HELLO message, i.e., is the Sending Address
      List, plus the network\n      addresses represented by address objects contained
      in the HELLO\n      message with an associated Address Block TLV with Type =
      LOCAL_IF\n      and Value = OTHER_IF.\n   o  \"EXPIRED\" indicates that a timer
      is set to a value clearly\n      preceding the current time (e.g., current time
      - 1).\n   o  \"Removed Address List\" is a list of network addresses created
      by\n      this HELLO message processing that were formerly reported as local\n
      \     by the router originating the HELLO message but that are not\n      included
      in the Neighbor Address List.  This list is initialized\n      as empty.\n   o
      \ \"Lost Address List\" is a subset of the Removed Address List\n      containing
      network addresses that were formerly considered as\n      symmetric.  This list
      is initialized as empty.\n"
    title: 12.2.  Definitions
  - contents:
    - "12.3.  Updating the Neighbor Set\n   On receiving a HELLO message, the router
      MUST update its Neighbor Set\n   and populate the Removed Address List and Lost
      Address List:\n   1.  Find all Neighbor Tuples (henceforth matching Neighbor
      Tuples)\n       where N_neighbor_addr_list contains any network address that\n
      \      overlaps with any network address in the Neighbor Address List.\n   2.
      \ If there are no matching Neighbor Tuples, then:\n       1.  Create a new Neighbor
      Tuple with:\n           o  N_neighbor_addr_list := Neighbor Address List;\n
      \          o  N_symmetric := false.\n   3.  If there is one matching Neighbor
      Tuple, then:\n       1.  If the matching Neighbor Tuple's N_neighbor_addr_list
      !=\n           Neighbor Address List, then:\n           1.  For each network
      address (henceforth removed address)\n               that is contained in that
      N_neighbor_addr_list but that\n               is not contained in the Neighbor
      Address List:\n               1.  Add the removed address to the Removed Address
      List.\n               2.  If N_symmetric = true, then add the removed address\n
      \                  to the Lost Address List.\n           2.  Update the matching
      Neighbor Tuple by:\n               o  N_neighbor_addr_list := Neighbor Address
      List.\n   4.  If there are two or more matching Neighbor Tuples, then:\n       1.
      \ For each network address (henceforth removed address) that is\n           contained
      in the N_neighbor_addr_list of any of the matching\n           Neighbor Tuples
      but is not contained in the Neighbor Address\n           List:\n           1.
      \ Add removed address to the Removed Address List.\n           2.  If N_symmetric
      = true, then add removed address to the\n               Lost Address List.\n
      \      2.  Replace the matching Neighbor Tuples by a single Neighbor\n           Tuple
      with:\n           o  N_neighbor_addr_list := Neighbor Address List;\n           o
      \ N_symmetric := false\n"
    title: 12.3.  Updating the Neighbor Set
  - contents:
    - "12.4.  Updating the Lost Neighbor Set\n   On receiving a HELLO message, a router
      MUST update its Lost Neighbor\n   Set:\n   1.  For each network address (henceforth
      lost address) that is\n       contained in the Lost Address List, if no Lost
      Neighbor Tuple\n       with NL_neighbor_addr = lost address exists, then add
      a Lost\n       Neighbor Tuple with:\n       o  NL_neighbor_addr := lost address;\n
      \      o  NL_time := current time + N_HOLD_TIME.\n"
    title: 12.4.  Updating the Lost Neighbor Set
  - contents:
    - "12.5.  Updating the Link Sets\n   On receiving a HELLO message, a router MUST
      update its Link Sets:\n   1.  Remove all network addresses in the Removed Address
      List from the\n       L_neighbor_iface_addr_list of all Link Tuples.\n   2.
      \ Remove all Link Tuples whose L_neighbor_iface_addr_list is now\n       empty;
      apply Section 13.2 but not Section 13.3.\n   The router MUST then update its
      Link Set for the MANET interface on\n   which the HELLO message is received:\n
      \  1.  Find all Link Tuples (henceforth matching Link Tuples) where:\n       o
      \ L_neighbor_iface_addr_list contains one or more network\n          addresses
      in the Sending Address List.\n   2.  If there is more than one matching Link
      Tuple, then remove them\n       all; apply Section 13.2 but not Section 13.3.\n
      \  3.  If no matching Link Tuples remain, then create a new matching\n       Link
      Tuple with:\n       o  L_neighbor_iface_addr_list := empty;\n       o  L_HEARD_time
      := EXPIRED;\n       o  L_SYM_time := EXPIRED;\n       o  L_quality := INITIAL_QUALITY;\n
      \      o  L_pending := INITIAL_PENDING;\n       o  L_lost := false;\n       o
      \ L_time := current time + validity time.\n   4.  The matching Link Tuple, existing
      or new, is then modified as\n       follows:\n       1.  If the router finds
      any network address (henceforth receiving\n           address) in the Receiving
      Address List in an Address Block in\n           the HELLO message, then the
      Link Tuple is modified as\n           follows:\n           1.  If any receiving
      address in the HELLO message is\n               associated with an Address Block
      TLV with Type =\n               LINK_STATUS and with Value = HEARD or Value
      = SYMMETRIC,\n               then:\n               o  L_SYM_time := current
      time + validity time.\n           2.  Otherwise, if any receiving address in
      the HELLO message\n               is associated with an Address Block TLV with
      Type =\n               LINK_STATUS and Value = LOST, then:\n               1.
      \ if L_SYM_time has not expired, then:\n                   1.  L_SYM_time :=
      EXPIRED.\n                   2.  if L_status = HEARD, then:\n                       o
      \ L_time := current time + L_HOLD_TIME.\n       2.  L_neighbor_iface_addr_list
      := Sending Address List.\n       3.  L_HEARD_time := max(current time + validity
      time,\n           L_SYM_time).\n       4.  If L_status = PENDING, then:\n           o
      \ L_time := max(L_time, L_HEARD_time).\n       5.  Otherwise, if L_status =
      HEARD or L_status = SYMMETRIC, then:\n           o  L_time := max(L_time, L_HEARD_time
      + L_HOLD_TIME).\n"
    title: 12.5.  Updating the Link Sets
  - contents:
    - "12.6.  Updating the 2-Hop Set\n   On receiving a HELLO message, a router MUST
      update its 2-Hop Set for\n   the MANET interface on which the HELLO message
      was received:\n   1.  Remove all network addresses in the Removed Address List
      from the\n       N2_neighbor_iface_addr_list of all 2-Hop Tuples.\n   2.  If
      the Link Tuple whose L_neighbor_iface_addr_list = Sending\n       Address List,
      has L_status = SYMMETRIC, then:\n       1.  For each network address (henceforth
      2-hop address) in an\n           Address Block of the HELLO message, where:\n
      \          o  a 2-hop address is not contained in the Neighbor Address\n              List;\n
      \          o  a 2-hop address is not contained in any\n              I_local_iface_addr_list;
      AND\n           o  a 2-hop address != any IR_local_iface_addr\n           perform
      the following processing:\n           1.  If the 2-hop address has an associated
      Address Block TLV\n               with:\n               o  Type = LINK_STATUS
      and Value = SYMMETRIC; OR\n               o  Type = OTHER_NEIGHB and Value =
      SYMMETRIC,\n               then, if there is no 2-Hop Tuple such that:\n               o
      \ N2_neighbor_iface_addr_list contains one or more\n                  network
      addresses in the Sending Address List; AND\n               o  N2_2hop_addr =
      2-hop address,\n               then create a 2-Hop Neighbor Tuple with:\n               o
      \ N2_2hop_addr := 2-hop address.\n               This 2-Hop Tuple (existing
      or new) is then modified as\n               follows:\n               o  N2_neighbor_iface_addr_list
      := Sending Address List;\n               o  N2_time := current time + validity
      time.\n           2.  Otherwise, if a 2-hop address has an Address Block TLV\n
      \              with:\n               o  Type = LINK_STATUS and Value = LOST
      or Value = HEARD;\n                  OR\n               o  Type = OTHER_NEIGHB
      and Value = LOST;\n               then remove all 2-Hop Tuples with:\n               o
      \ N2_neighbor_iface_addr_list containing one or more\n                  network
      addresses in the Sending Address List; AND\n               o  N2_2hop_addr =
      2-hop address.\n"
    title: 12.6.  Updating the 2-Hop Set
  title: 12.  HELLO Message Processing
- contents:
  - "13.  Other Information Base Changes\n   The Interface and Neighbor Information
    Bases MUST be changed when\n   certain events occur.  These events may result
    from HELLO message\n   processing or may be otherwise generated (e.g., expiry
    of timers or\n   link quality changes).\n   Events that cause changes in the Information
    Bases are:\n   o  A Link Tuple's L_status changes to SYMMETRIC.  In this case,
    the\n      actions specified in Section 13.1 are performed.\n   o  A Link Tuple's
    L_status changes from SYMMETRIC, or the Link Tuple\n      is removed.  In this
    case, the actions specified in Section 13.2\n      are performed.\n   o  A Link
    Tuple's L_HEARD_time expires, or the Link Tuple is removed.\n      In this case,
    the actions specified in Section 13.3 are performed.\n   o  Local interface network
    address changes.  In this case, the\n      actions specified in Section 9 are
    performed.\n   o  Link quality changes.  In this case, the actions specified in\n
    \     Section 14 are performed.\n   If a Link Tuple is removed, or if L_status
    changes from SYMMETRIC and\n   L_HEARD_time expires, then the actions specified
    in Section 13.2 MUST\n   be performed before the actions specified in Section
    13.3 are\n   performed for that Link Tuple.\n   A router MAY report updated information
    in response to any of these\n   changes in HELLO message(s), subject to the constraints
    in\n   Section 11.\n   A router that transmits HELLO messages in response to such
    changes\n   SHOULD transmit a HELLO message:\n   o  On all MANET interfaces, if
    the Neighbor Set changes such as to\n      indicate the change in symmetry of
    any 1-hop neighbors (including\n      addition or removal of symmetric 1-hop neighbors).\n
    \  o  Otherwise, on all those MANET interfaces whose Link Set changes\n      such
    as to indicate a change in L_status of any 1-hop neighbors\n      (including the
    addition or removal of any 1-hop neighbors, other\n      than those considered
    pending).\n"
  - contents:
    - "13.1.  Link Tuple Symmetric\n   If, for any Link Tuple that does not have L_status
      = SYMMETRIC:\n   o  L_status changes to SYMMETRIC;\n   then:\n   1.  For the
      Neighbor Tuple whose N_neighbor_addr_list contains\n       L_neighbor_iface_addr_list,
      set:\n       o  N_symmetric := true.\n   2.  Remove all Lost Neighbor Tuples
      whose NL_neighbor_addr is\n       contained in that N_neighbor_addr_list.\n
      \  This includes any newly created Link Tuples whose status is\n   immediately
      updated such that L_status = SYMMETRIC.  (Note that in\n   this specification,
      all Link Tuples are created such that their\n   L_status is not SYMMETRIC, but
      a Link Tuple may be immediately\n   updated by subsequent processing of the
      same HELLO message that\n   caused the creation of the Link Tuple such that
      the Link Tuple's\n   L_status changes to SYMMETRIC.)\n"
    title: 13.1.  Link Tuple Symmetric
  - contents:
    - "13.2.  Link Tuple Not Symmetric\n   If for any Link Tuple with L_status = SYMMETRIC:\n
      \  o  L_status changes to any other value; OR\n   o  the Link Tuple is removed;\n
      \  then:\n   1.  All 2-Hop Tuples for the same MANET interface with:\n       o
      \ N2_neighbor_iface_addr_list contains one or more network\n          addresses
      in L_neighbor_iface_addr_list;\n       are removed.\n   2.  For the Neighbor
      Tuple whose N_neighbor_addr_list contains\n       L_neighbor_iface_addr_list:\n
      \      1.  If there are no remaining Link Tuples for any MANET interface\n           where:\n
      \          o  L_neighbor_iface_addr_list is contained in\n              N_neighbor_addr_list;
      AND\n           o  L_status = SYMMETRIC;\n           then modify the Neighbor
      Tuple by:\n           1.  N_symmetric := false.\n           2.  For each network
      address (henceforth neighbor address) in\n               N_neighbor_addr_list,
      add a Lost Neighbor Tuple with:\n               o  NL_neighbor_addr := neighbor
      address;\n               o  NL_time := current time + N_HOLD_TIME.\n"
    title: 13.2.  Link Tuple Not Symmetric
  - contents:
    - "13.3.  Link Tuple Heard Timeout\n   If, for any Link Tuple:\n   o  L_HEARD_time
      expires; OR\n   o  the Link Tuple is removed;\n   then:\n   1.  For the Neighbor
      Tuple whose N_neighbor_addr_list contains\n       L_neighbor_iface_addr_list,
      if no Link Tuples for any MANET\n       interface remain where:\n       o  L_neighbor_iface_addr_list
      is contained in\n          N_neighbor_addr_list; AND\n       o  L_HEARD_time
      is not expired;\n       then remove the Neighbor Tuple.\n"
    title: 13.3.  Link Tuple Heard Timeout
  title: 13.  Other Information Base Changes
- contents:
  - "14.  Link Quality\n   Link quality is a mechanism whereby a router MAY take considerations\n
    \  other than message exchange into account for determining when a link\n   is
    and is not a candidate for being considered as HEARD or SYMMETRIC.\n   As such,
    it is a \"link admission\" mechanism.\n   Link quality information for a link
    is generated (e.g., through\n   access to signal to noise ratio, packet loss rate,
    or other\n   information from the link layer) and used only locally, i.e., is
    not\n   included in signaling, and routers may interoperate whether they are\n
    \  using the same, different, or no, link quality information.  Link\n   quality
    information is specified as a normalized, dimensionless\n   figure in the interval
    zero to one, inclusive, a higher value\n   indicating a better link quality.\n
    \  For deployments where no link quality is used, the considerations in\n   Section
    14.1 apply.  For deployments where link quality is used, the\n   general principles
    of link quality usage are described in\n   Section 14.2.  Sections 14.3 and 14.4
    detail link quality\n   functioning.\n"
  - contents:
    - "14.1.  Deployment without Link Quality\n   In order for a router to not employ
      link quality, the router MUST\n   define:\n   o  INITIAL_PENDING := false;\n
      \  o  INITIAL_QUALITY >= HYST_REJECT (there is no reason not to define\n      INITIAL_QUALITY
      := 1).\n"
    title: 14.1.  Deployment without Link Quality
  - contents:
    - "14.2.  Basic Principles of Link Quality\n   To enable link quality usage, the
      L_quality value of a Link Tuple is\n   used in conjunction with two thresholds,
      HYST_ACCEPT and HYST_REJECT,\n   to set the flags L_pending and L_lost of that
      Link Tuple.  Based on\n   these flags, the link status to advertise for that
      Link Tuple is\n   determined as described in Section 7.1.\n   The use of two
      thresholds implements link hysteresis, whereby a link\n   that has HYST_REJECT
      <= L_quality < HYST_ACCEPT may be either\n   accepted or rejected (depending
      on which threshold it has most\n   recently crossed, or, if neither, on the
      value of parameter\n   INITIAL_PENDING).  With appropriate values of these parameters,
      this\n   prevents overly rapid changes of link status.\n   The basic principles
      of link quality usage are as follows:\n   o  A router does not advertise a neighbor
      interface in any state\n      until L_quality is acceptable:\n      o  If INITIAL_PENDING
      = true, then the link is advertised when\n         link L_quality >= HYST_ACCEPT.\n
      \     o  Otherwise, the link is advertised when L_quality >=\n         HYST_REJECT.\n
      \     A link that is not yet advertised has L_pending = true.\n   o  Once L_quality
      >= HYST_ACCEPT, the router sets L_pending := false,\n      indicating that the
      link can be advertised.\n   o  A link for which L_pending = false is advertised
      until its\n      L_quality drops below HYST_REJECT.\n   o  If a link has L_pending
      = false and L_quality < HYST_REJECT, the\n      link is LOST and is advertised
      as such.  This link is not\n      reconsidered as a candidate HEARD or SYMMETRIC
      link until\n      L_quality >= HYST_ACCEPT.\n   o  A link that has an acceptable
      quality may be advertised as HEARD,\n      SYMMETRIC or LOST according to the
      exchange of HELLO messages.\n   In order that these principles can all hold,
      a router MUST NOT\n   define:\n   o  INITIAL_PENDING = false and INITIAL_QUALITY
      < HYST_REJECT; OR\n   o  INITIAL_PENDING = true and INITIAL_QUALITY >= HYST_ACCEPT.\n"
    title: 14.2.  Basic Principles of Link Quality
  - contents:
    - "14.3.  When Link Quality Changes\n   If L_quality for a link changes, then
      the following actions MUST be\n   taken:\n   1.  If L_quality >= HYST_ACCEPT,
      then the corresponding Link Tuple is\n       modified by:\n       1.  L_pending
      := false;\n       2.  L_lost := false;\n       3.  If L_status = HEARD or L_status
      = SYMMETRIC, then:\n           o  L_time := max(L_time, L_HEARD_time + L_HOLD_TIME).\n
      \  2.  If L_status != PENDING, and L_quality < HYST_REJECT, then the\n       corresponding
      Link Tuple is modified by:\n       1.  If L_lost = false, then:\n           o
      \ L_lost := true;\n           o  L_time := min(L_time, current time + L_HOLD_TIME).\n
      \  As a result of this processing, the L_STATUS of a Link Tuple may\n   change.
      \ In this case, the processing actions corresponding to this\n   change, as
      specified in Section 13, MUST also be taken.\n   If L_quality for a link is
      updated based on HELLO message reception,\n   or on reception of a packet including
      a HELLO message, then L_quality\n   MUST be updated prior to the HELLO message
      processing described in\n   Section 12.  (If the receipt of the HELLO message,
      or the packet\n   containing it, creates the Link Tuple, then the Link Tuple
      MUST be\n   created with the appropriately updated L_quality value, rather than\n
      \  with L_quality := INITIAL_QUALITY.)\n"
    title: 14.3.  When Link Quality Changes
  - contents:
    - "14.4.  Updating Link Quality\n   A router MAY update link quality based on
      any information available\n   to it.  Particular cases that MAY be used include:\n
      \  o  Information from the link layer, such as signal-to-noise ratio or\n      packet
      acknowledgment reception and loss information.\n   o  Receipt or loss of control
      packets.  If control packets include a\n      sequential packet sequence number,
      as defined in [RFC5444], then\n      link quality can be updated when a control
      packet is received,\n      whether or not it contains a HELLO message.  The
      link quality may\n      then, for example, be based on whether the last N out
      of M control\n      packets on the link were received, or may use a \"leaky
      integrator\"\n      tracking packet reception and loss.\n   o  Receipt or loss
      of HELLO messages.  If the maximum interval\n      between HELLO messages is
      known (such as by inclusion in HELLO\n      messages of a Message TLV with Type
      := INTERVAL_TIME, as defined\n      in [RFC5497]), then the loss of HELLO messages
      can be determined\n      without the need to receive a later HELLO message.
      \ Note that if\n      this case is combined with the previous case, then care
      must be\n      taken to avoid \"double counting\" a lost HELLO message in a
      lost\n      packet.\n"
    title: 14.4.  Updating Link Quality
  title: 14.  Link Quality
- contents:
  - "15.  Proposed Values for Parameters and Constants\n   This section lists the
    parameters and constants used in the\n   specification of the protocol, and proposed
    values of each that MAY\n   be used when a single value of each is used.\n"
  - contents:
    - "15.1.  Message Interval Interface Parameters\n   o  HELLO_INTERVAL := 2 seconds\n
      \  o  HELLO_MIN_INTERVAL := HELLO_INTERVAL/4\n   o  REFRESH_INTERVAL := HELLO_INTERVAL\n"
    title: 15.1.  Message Interval Interface Parameters
  - contents:
    - "15.2.  Information Validity Time Interface Parameters\n   o  H_HOLD_TIME :=
      3 x REFRESH_INTERVAL\n   o  L_HOLD_TIME := H_HOLD_TIME\n"
    title: 15.2.  Information Validity Time Interface Parameters
  - contents:
    - "15.3.  Information Validity Time Router Parameters\n   o  N_HOLD_TIME := L_HOLD_TIME\n
      \  o  I_HOLD_TIME := N_HOLD_TIME\n"
    title: 15.3.  Information Validity Time Router Parameters
  - contents:
    - "15.4.  Link Quality Interface Parameters\n   If link quality is changed, then
      parameter values will depend on the\n   link quality process.  If link quality
      is not changed, then:\n   o  HYST_ACCEPT := 1\n   o  HYST_REJECT := 0\n   o
      \ INITIAL_QUALITY := 1\n   o  INITIAL_PENDING := false\n"
    title: 15.4.  Link Quality Interface Parameters
  - contents:
    - "15.5.  Jitter Interface Parameters\n   o  HP_MAXJITTER := HELLO_INTERVAL/4\n
      \  o  HT_MAXJITTER := HP_MAXJITTER\n"
    title: 15.5.  Jitter Interface Parameters
  - contents:
    - "15.6.  Constants\n   o  C := 1/1024 second\n"
    title: 15.6.  Constants
  title: 15.  Proposed Values for Parameters and Constants
- contents:
  - "16.  Usage with Other Protocols\n   Other protocols, such as MANET routing protocols,
    that use\n   neighborhood discovery, may need to interact with this protocol.\n
    \  This protocol is designed to permit such interactions, in particular:\n   o
    \ Through accessing, and possibly extending, the information in the\n      Local
    Information Base (Section 6), the Interface Information Base\n      (Section 7),
    and the Neighbor Information Base (Section 8).  These\n      Information Bases
    record the interface configuration of the\n      router, as well as the local
    connectivity, up to two hops away.\n      All updates to the elements specified
    in this document are subject\n      to the constraints specified in Appendix B.\n
    \  o  Through accessing an outgoing HELLO message prior to it being\n      transmitted
    over any MANET interface, and to add information\n      (e.g., TLVs) as specified
    in [RFC5444].  This may, for example, be\n      to allow a security protocol,
    as suggested in Section 17, to add a\n      TLV containing a cryptographic signature
    to the message, or be to\n      allow inserting relay selection information into
    a HELLO message\n      by way of adding a TLV to an outgoing HELLO message prior
    to it\n      being transmitted.\n   o  Through accessing an incoming HELLO message,
    and potentially\n      discarding it prior to processing by this protocol.  This
    may, for\n      example, allow a security protocol as suggested in Section 17
    to\n      perform verification of HELLO message signatures and prevent\n      processing
    of unverifiable HELLO messages by this protocol.\n   o  Through accessing an incoming
    HELLO message after it has been\n      completely processed by this protocol.
    \ This may, in particular,\n      allow a protocol that has added information,
    such as relay\n      selection information by way of inclusion of appropriate
    TLVs,\n      access to such information after appropriate updates have been\n
    \     recorded in the Information Bases in this protocol.\n   o  Through requesting
    that a HELLO message be generated at a specific\n      time.  In that case, HELLO
    message generation MUST still respect\n      the constraints in Appendix B.\n
    \  Address objects in HELLO messages are processed according to their\n   associated
    Address Block TLVs.  All such address objects are to be\n   processed according
    to this specification are associated with Address\n   Block TLVs with Type of
    LOCAL_IF, OTHER_NEIGHB, or LINK_STATUS (and\n   type extension zero).  Address
    objects not associated with an Address\n   Block TLV of any of these Types are
    therefore not processed by the\n   protocol described in this specification.\n
    \  A protocol, such as a MANET routing protocol, interacting with this\n   protocol
    may need to add information to HELLO messages.  This may be\n   in the form of
    associating TLVs (of Type other than LOCAL_IF,\n   OTHER_NEIGHB, or LINK_STATUS)
    to address objects already included by\n   this specification.\n   A protocol,
    such as a MANET routing protocol, interacting with this\n   protocol may also
    add information to HELLO messages by inserting\n   address objects not already
    included by this specification.  Such\n   address objects are in the following
    called \"inserted addresses\".\n   These inserted addresses may added to Address
    Blocks already present\n   by virtue of the HELLO message generation in this specification,
    or\n   may appear in new Address Blocks.  In both cases, the following MUST\n
    \  be observed:\n   o  An inserted address MUST NOT be associated with an Address
    Block\n      TLV of Type LOCAL_IF, OTHER_NEIGHB, or LINK_STATUS.  Consequently,\n
    \     the processing in this specification will ignore such address\n      objects.\n
    \  o  Each inserted address MUST be associated with an Address Block\n      TLV,
    to be defined by the specification of the protocol inserting\n      the address
    object.  In this way, all addresses present in a HELLO\n      message are associated
    with an Address Block TLV defining their\n      semantics.\n   Informally speaking,
    Address Block TLVs define the semantics of\n   address objects in an Address Block.
    \ If an address object in an\n   Address Block does not have any Address Block
    TLVs associated, that\n   address object has no semantics.  Consequently, all
    protocols using\n   the protocol defined in this specification MUST respect the\n
    \  following:\n   o  An address object in an Address Block, which is not associated\n
    \     with any Address Block TLV, MUST be silently ignored; the mere\n      presence
    of an address object without an associated Address Block\n      TLV in a HELLO
    message MUST NOT cause any processing.\n   A protocol interacting with this protocol
    MAY also add an originator\n   address to HELLO messages, as specified in [RFC5444].
    \ Such an\n   originator address MUST be unique to the originating router, it
    MAY\n   be a local interface address of the router.  It SHOULD be used\n   consistently,
    but SHOULD NOT be constrained in any other way.\n   Strict adherence to these
    points will enable unambiguous coexistence\n   of future \"extensions\" to HELLO
    messages.\n   In some cases, a protocol interacting with the protocol defined
    in\n   this specification, may need to recognize which HELLO messages to\n   process
    and which HELLO messages to discard.  It is the\n   responsibility of that protocol
    to ensure that such messages are\n   suitably identifiable, e.g., through inclusion
    of a Message TLV or\n   through recognizing an administrative configuration (such
    as address\n   ranges).  Note that such a protocol interacting with this protocol\n
    \  MAY specify such interaction by recognizing an additional reason for\n   discarding
    a message.  As suggested in Section 17 this might, for\n   example, be a security
    protocol discarding a message that does not\n   carry a Message TLV containing
    a cryptographic signature.\n"
  title: 16.  Usage with Other Protocols
- contents:
  - "17.  Security Considerations\n   The objective of this protocol is to allow each
    router in the network\n   to acquire information describing its 1-hop neighborhood
    and\n   symmetric 2-hop neighborhood.  This is acquired through HELLO message\n
    \  exchange between neighboring routers.  This information is made\n   available
    through the Interface Information Bases and Neighbor\n   Information Base, describing
    the router's 1-hop neighborhood and\n   symmetric 2-hop neighborhood.\n   Under
    normal circumstances, the information recorded in these\n   Information Bases
    is correct, i.e., corresponds to the actual network\n   topology, apart from any
    changes that have not (yet) been tracked by\n   the HELLO message exchanges.\n
    \  If a router for some reason, whether malice or malfunction, transmits\n   invalid
    HELLO messages, incorrect information may be recorded in\n   other routers' Information
    Bases.  This protocol specification does,\n   however, prevent inconsistent information
    from being included in the\n   Information Bases through the specified processing,
    which maintains\n   the constraints in Appendix B.  The exact consequence of information\n
    \  inexactness depends on the use of these Information Bases, and SHOULD\n   therefore
    be reflected in the specification of protocols that use\n   information provided
    by this neighborhood discovery protocol.\n   This section, therefore, firstly
    outlines the ways in which correctly\n   formed, but still invalid, HELLO messages
    may appear, in\n   Section 17.1.\n   Injection of invalid HELLO messages into
    a network may be prevented\n   in a number of ways.  If, for example, a network
    is deployed in a\n   site to which access is strictly regulated, so that physical
    access\n   and proximity to the network is prevented, then further security\n
    \  mechanisms to protect against malicious routers injecting invalid\n   HELLO
    messages may not be required.  Similarly, if the link layer\n   over which the
    network is formed provides appropriate\n   confidentiality, authentication, and
    integrity, then this may, for a\n   given deployment, suffice to appropriately
    protect against disclosure\n   of information to an eavesdropper, and against
    a malicious router\n   injecting invalid HELLO messages.  In the latter case,
    the link layer\n   would discard frames that fail the link-layer checks, without\n
    \  attempting to deliver such frames to IP.  Finally, certain usage may\n   be
    of a nature where disruption of service is of no consequence, or\n   at least
    not of sufficient consequence to warrant deployment of\n   additional security
    mechanisms.\n   A further point to stress, and which follows from the discussions\n
    \  above is, that it will not be the case that \"one size security fits\n   all\".
    \ Different deployments may have different requirements.  For\n   example, in
    a deployment of a low-value sensor network,\n   authentication using a simple
    message authentication code and shared\n   symmetric keys may suffice, while anything
    beyond that may require\n   too many computational resources to be viable.  Conversely,
    in, for\n   example, a community network, verifying not only that the originator\n
    \  of a HELLO message \"has the right key\" but also the precise identity\n   of
    the originator may be required to be proved, and computational\n   resources may
    be available to make such a requirement feasible.\n   Section 17.2, therefore,
    does not specify a single \"one-size-fits-\n   all\" mechanism, but rather details
    how the security suggestions in\n   [RFC5444] are considered for applicability
    within the context of this\n   protocol, and with the purpose of aiding deployment-specific
    security\n   mechanisms to be developed.\n"
  - contents:
    - "17.1.  Invalid HELLO Messages\n   A correctly formed, but still invalid, HELLO
      message may take any of\n   the following forms.  Note that a present or absent
      address object in\n   an Address Block, does not by itself cause a problem.
      \ It is the\n   presence, absence, or incorrectness of associated LOCAL_IF,\n
      \  LINK_STATUS, and OTHER_NEIGHB Address Block TLVs that causes\n   problems.\n
      \  A router may provide false information about its own identity:\n      o  The
      HELLO message may contain address objects with an\n         associated LOCAL_IF
      Address Block TLV that do not correspond to\n         addresses of interfaces
      of the router transmitting the HELLO\n         message.\n      o  The HELLO
      message may omit network addresses, or their\n         associated LOCAL_IF Address
      Block TLV, of interfaces of the\n         router transmitting the HELLO message
      (other than the allowed\n         omission of the only local interface network
      address of the\n         MANET interface over which the HELLO message is transmitted,
      if\n         that is the case).\n      o  The HELLO message may incorrectly
      specify the LOCAL_IF Address\n         Block TLV Value associated with one or
      more local interface\n         network addresses, indicating incorrectly whether
      they are\n         associated with the MANET interface over which the HELLO\n
      \        message is transmitted.\n   A router may provide false information
      about the identity of other\n      routers:\n      o  A present LINK_STATUS
      Address Block TLV may, incorrectly,\n         identify a network address as
      being of a MANET interface that\n         is or was heard on the MANET interface
      over which the HELLO\n         message is transmitted.\n      o  A consistently
      absent LINK_STATUS Address Block TLV may,\n         incorrectly, fail to identify
      a network address as being of a\n         MANET interface that is or was heard
      on the MANET interface\n         over which the HELLO message is transmitted.\n
      \     o  A present OTHER_NEIGHB Address Block TLV may, incorrectly,\n         identify
      a network address as being of a router that is or was\n         in the sending
      router's symmetric 1-hop neighborhood.\n      o  A consistently absent OTHER_NEIGHB
      Address Block TLV may,\n         incorrectly, fail to identify a network address
      as being of a\n         router that is or was in the sending router's symmetric
      1-hop\n         neighborhood.\n      o  The Value of a LINK_STATUS Address Block
      TLV may incorrectly\n         indicate the status (LOST, SYMMETRIC or HEARD)
      of the link from\n         a 1-hop neighbor.\n      o  The Value of an OTHER_NEIGHB
      Address Block TLV may incorrectly\n         indicate the status (LOST or SYMMETRIC)
      of a symmetric 1-hop\n         neighbor.\n"
    title: 17.1.  Invalid HELLO Messages
  - contents:
    - "17.2.  Authentication, Integrity, and Confidentiality Suggestions\n   The security
      suggestions in [RFC5444] regarding inclusion of a\n   cryptographic signature
      in a Message TLV or a Packet TLV can be\n   applied to this protocol.  Failure
      to verify either form of\n   cryptographic signature should cause a HELLO message
      to be rejected\n   without being processed.\n   The following simplification
      of the suggestions for end-to-end\n   authentication for integrity in [RFC5444]
      may be applied to HELLO\n   messages:\n   o  As the Message Header fields <msg-hop-count>
      and <msg-hop-limit>\n      are either omitted or will always have the values
      0 and 1,\n      respectively, an end to end cryptographic signature can be\n
      \     calculated based on the entire HELLO message, including its\n      unmodified
      Message Header.\n   The security mechanisms suggested in [RFC5444] with respect
      to\n   confidentiality can be directly applied to this protocol.\n"
    title: 17.2.  Authentication, Integrity, and Confidentiality Suggestions
  title: 17.  Security Considerations
- contents:
  - "18.  IANA Considerations\n   This specification defines one Message Type, which
    has been allocated\n   from the \"Message Types\" registry of [RFC5444], and three
    Address\n   Block TLV Types, which have been allocated from the \"Address Block\n
    \  TLV Types\" registry of [RFC5444].\n"
  - contents:
    - "18.1.  Expert Review: Evaluation Guidelines\n   For the registries where an
      Expert Review is required, the designated\n   expert SHOULD take the same general
      recommendations into\n   consideration as are specified by [RFC5444].\n"
    title: '18.1.  Expert Review: Evaluation Guidelines'
  - contents:
    - "18.2.  Message Types\n   This specification defines one Message Type, which
      has been allocated\n   from the 0-223 range of the \"Message Types\" namespace
      defined in\n   [RFC5444], as specified in Table 3.\n                    +------+-------------------------+\n
      \                   | Type | Description             |\n                    +------+-------------------------+\n
      \                   |   0  | HELLO : Local signaling |\n                    +------+-------------------------+\n
      \                    Table 3: Message Type Assignment\n"
    title: 18.2.  Message Types
  - contents:
    - "18.3.  Message-Type-Specific TLV Type Registries\n   IANA has created a registry
      for Message-Type-specific Message TLVs\n   for HELLO messages, in accordance
      with Section 6.2.1 of [RFC5444],\n   and with initial assignments and allocation
      policies as specified in\n   Table 4.\n               +---------+-------------+-------------------+\n
      \              |   Type  | Description | Allocation Policy |\n               +---------+-------------+-------------------+\n
      \              | 128-223 | Unassigned  | Expert Review     |\n               +---------+-------------+-------------------+\n
      \         Table 4: HELLO Message-Type-specific Message TLV Types\n   IANA has
      created a registry for Message-Type-specific Address Block\n   TLVs for HELLO
      messages, in accordance with Section 6.2.1 of\n   [RFC5444], and with initial
      assignments and allocation policies as\n   specified in Table 5.\n               +---------+-------------+-------------------+\n
      \              |   Type  | Description | Allocation Policy |\n               +---------+-------------+-------------------+\n
      \              | 128-223 | Unassigned  | Expert Review     |\n               +---------+-------------+-------------------+\n
      \      Table 5: HELLO Message-Type-specific Address Block TLV Types\n"
    title: 18.3.  Message-Type-Specific TLV Type Registries
  - contents:
    - "18.4.  Address Block TLV Types\n   This specification defines three Address
      Block TLV Types, which have\n   been allocated from the \"Address Block TLV
      Types\" namespace defined\n   in [RFC5444].  IANA has made allocations in the
      0-127 range for these\n   types.  Three new type extension registries have been
      created, with\n   assignments as specified in Tables 6, 7, and 8.  Specifications
      of\n   these Address Block TLVs are in Section 10.1.1, with Value Constants\n
      \  defined in Section 18.5.\n   +----------+------+-----------+------------------------+------------+\n
      \  |   Name   | Type |    Type   | Description            | Allocation |\n   |
      \         |      | extension |                        | policy     |\n   +----------+------+-----------+------------------------+------------+\n
      \  | LOCAL_IF |   2  |     0     | Specifies that the     |            |\n   |
      \         |      |           | network address is     |            |\n   |          |
      \     |           | associated with this   |            |\n   |          |      |
      \          | local interface of the |            |\n   |          |      |           |
      sending router         |            |\n   |          |      |           | (THIS_IF
      = 0) or       |            |\n   |          |      |           | another local
      \         |            |\n   |          |      |           | interface of the
      \      |            |\n   |          |      |           | sending router         |
      \           |\n   |          |      |           | (OTHER_IF = 1)         |            |\n
      \  | LOCAL_IF |   2  |   1-255   | Unassigned             | Expert     |\n   |
      \         |      |           |                        | Review     |\n   +----------+------+-----------+------------------------+------------+\n
      \          Table 6: Address Block TLV Type Assignment: LOCAL_IF\n   +-------------+------+-----------+---------------------+------------+\n
      \  |     Name    | Type |    Type   | Description         | Allocation |\n   |
      \            |      | extension |                     | policy     |\n   +-------------+------+-----------+---------------------+------------+\n
      \  | LINK_STATUS |   3  |     0     | Specifies the       |            |\n   |
      \            |      |           | status of the link  |            |\n   |             |
      \     |           | from the indicated  |            |\n   |             |      |
      \          | network address     |            |\n   |             |      |           |
      (LOST = 0,          |            |\n   |             |      |           | SYMMETRIC
      = 1, or   |            |\n   |             |      |           | HEARD = 2)          |
      \           |\n   | LINK_STATUS |   3  |   1-255   | Unassigned          | Expert
      \    |\n   |             |      |           |                     | Review     |\n
      \  +-------------+------+-----------+---------------------+------------+\n          Table
      7: Address Block TLV Type Assignment: LINK_STATUS\n   +--------------+------+-----------+--------------------+------------+\n
      \  |     Name     | Type |    Type   | Description        | Allocation |\n   |
      \             |      | extension |                    | policy     |\n   +--------------+------+-----------+--------------------+------------+\n
      \  | OTHER_NEIGHB |   4  |     0     | Specifies the      |            |\n   |
      \             |      |           | status of the      |            |\n   |              |
      \     |           | relationship with  |            |\n   |              |      |
      \          | the router that    |            |\n   |              |      |           |
      uses the indicated |            |\n   |              |      |           | network
      address on |            |\n   |              |      |           | one or more
      \       |            |\n   |              |      |           | interfaces (LOST
      = |            |\n   |              |      |           | 0, or SYMMETRIC =  |
      \           |\n   |              |      |           | 1)                 |            |\n
      \  | OTHER_NEIGHB |   4  |   1-255   | Unassigned         | Expert     |\n   |
      \             |      |           |                    | Review     |\n   +--------------+------+-----------+--------------------+------------+\n
      \        Table 8: Address Block TLV Type Assignment: OTHER_NEIGHB\n"
    title: 18.4.  Address Block TLV Types
  - contents:
    - "18.5.  LOCAL_IF, LINK_STATUS, and OTHER_NEIGHB Values\n   Note: This information
      is recorded here for clarity and for use\n   elsewhere in this specification.
      \ The information required by IANA is\n   included in the descriptions of the
      Address Block TLVs allocated in\n   Section 18.4.\n   The Values that the LOCAL_IF
      Address Block TLV can use are the\n   following:\n   o  THIS_IF := 0\n   o  OTHER_IF
      := 1\n   The Values that the LINK_STATUS Address Block TLV can use are the\n
      \  following:\n   o  LOST := 0\n   o  SYMMETRIC := 1\n   o  HEARD := 2\n   The
      Values that the OTHER_NEIGHB Address Block TLV can use are the\n   following:\n
      \  o  LOST := 0\n   o  SYMMETRIC := 1\n"
    title: 18.5.  LOCAL_IF, LINK_STATUS, and OTHER_NEIGHB Values
  title: 18.  IANA Considerations
- contents:
  - "19.  Contributors\n   This specification is the result of the joint efforts of
    the\n   following contributors from the OLSRv2 Design Team, listed\n   alphabetically:\n
    \  o  Brian Adamson, NRL, USA, <adamson@itd.nrl.navy.mil>\n   o  Cedric Adjih,
    INRIA, France, <Cedric.Adjih@inria.fr>\n   o  Thomas Heide Clausen, LIX, France,
    <T.Clausen@computer.org>\n   o  Justin Dean, NRL, USA, <jdean@itd.nrl.navy.mil>\n
    \  o  Christopher Dearlove, BAE Systems ATC, UK,\n      <chris.dearlove@baesystems.com>\n
    \  o  Philippe Jacquet, INRIA, France, <Philippe.Jacquet@inria.fr>\n"
  title: 19.  Contributors
- contents:
  - "20.  Acknowledgments\n   The authors would like to acknowledge the team behind
    OLSRv1,\n   specified in RFC3626 for their contributions.\n   The authors would
    like to gratefully acknowledge the following people\n   for intense technical
    discussions, early reviews and comments on the\n   specification and its components
    (listed alphabetically): Alan Cullen\n   (BAE Systems), Ulrich Herberg (LIX),
    Satoh Hiroki (Hitachi) Joe\n   Macker (NRL), Charles E. Perkins (WiChorus), Laurent
    Viennot (INRIA),\n   and the entire IETF MANET working group.\n"
  title: 20.  Acknowledgments
- contents:
  - '21.  References

    '
  - contents:
    - "21.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5148]  Clausen, T., Dearlove, C., and B. Adamson, \"Jitter\n              Considerations
      in Mobile Ad Hoc Networks (MANETs)\",\n              RFC 5148, February 2008.\n
      \  [RFC5444]  Clausen, T., Dearlove, C., Dean, J., and C. Adjih,\n              \"Generalized
      Mobile Ad Hoc Network (MANET) Packet/Message\n              Format\", RFC 5444,
      February 2009.\n   [RFC5497]  Clausen, T. and C. Dearlove, \"Representing Multi-Value\n
      \             Time in Mobile Ad Hoc Networks (MANETs)\", RFC 5497,\n              March
      2009.\n   [RFC5498]  Chakeres, I., \"IANA Allocations for Mobile Ad Hoc Network\n
      \             (MANET) Protocols\", RFC 5498, March 2009.\n"
    title: 21.1.  Normative References
  - contents:
    - "21.2.  Informative References\n   [RFC2501]  Corson, M. and J. Macker, \"Mobile
      Ad hoc Networking\n              (MANET): Routing Protocol Performance Issues
      and\n              Evaluation Considerations\", RFC 2501, January 1999.\n   [RFC3626]
      \ Clausen, T. and P. Jacquet, \"Optimized Link State Routing\n              Protocol
      (OLSR)\", RFC 3626, October 2003.\n   [RFC5449]  Baccelli, E., Jacquet, P.,
      Nguyen, D., and T. Clausen,\n              \"OSPF Multipoint Relay (MPR) Extension
      for Ad Hoc\n              Networks\", RFC 5449, February 2009.\n"
    title: 21.2.  Informative References
  title: 21.  References
- contents:
  - "Appendix A.  Address Block TLV Combinations\n   The algorithm for generating
    HELLO messages in Section 11 specifies\n   which 1-hop neighbor network addresses
    may be included in the Address\n   Blocks, and with which associated Address Block
    TLVs.  These Address\n   Block TLVs may have Type = LINK_STATUS or Type = OTHER_NEIGHB,
    or\n   both.  Address Block TLVs with Type = LINK_STATUS may have three\n   possible
    Values (Value = HEARD, Value = SYMMETRIC, or Value = LOST),\n   and Address Block
    TLVs of TYPE = OTHER_NEIGHB may have two possible\n   Values (Value = SYMMETRIC
    or Value = LOST).  When both Address Block\n   TLVs are associated with the same
    network address only certain\n   combinations of these Address Block TLV Values
    are necessary, and are\n   the only combinations generated by the algorithm in
    Section 11.\n   These combinations are indicated in Table 9.\n   Cells labeled
    with \"Yes\" indicate the possible combinations that are\n   generated by the
    algorithm in Section 11.  Cells labeled with \"No\"\n   indicate combinations
    not generated by the algorithm in Section 11\n   but that are correctly parsed
    and interpreted by the algorithm in\n   Section 12.  The cell labeled with \"No*\"
    is actually inconsistent, it\n   is handled by ignoring the Address Block TLV
    with Type =\n   OTHER_NEIGHB, but SHOULD NOT be used.\n   +----------------+----------------+----------------+----------------+\n
    \  |                |     Type =     |     Type =     |     Type =     |\n   |
    \               |  OTHER_NEIGHB  |  OTHER_NEIGHB, |  OTHER_NEIGHB, |\n   |                |
    \   (absent)    |     Value =    |  Value = LOST  |\n   |                |                |
    \   SYMMETRIC   |                |\n   +----------------+----------------+----------------+----------------+\n
    \  | Type =         |       No       |       Yes      |       Yes      |\n   |
    LINK_STATUS    |                |                |                |\n   | (absent)
    \      |                |                |                |\n   | Type =         |
    \      Yes      |       Yes      |       Yes      |\n   | LINK_STATUS,   |                |
    \               |                |\n   | Value = HEARD  |                |                |
    \               |\n   | Type =         |       Yes      |       No       |       No*
    \     |\n   | LINK_STATUS,   |                |                |                |\n
    \  | Value =        |                |                |                |\n   |
    SYMMETRIC      |                |                |                |\n   | Type
    =         |       Yes      |       Yes      |       No       |\n   | LINK_STATUS,
    \  |                |                |                |\n   | Value = LOST   |
    \               |                |                |\n   +----------------+----------------+----------------+----------------+\n
    \         Table 9: LINK_STATUS and OTHER_NEIGHB TLV Combinations\n"
  title: Appendix A.  Address Block TLV Combinations
- contents:
  - "Appendix B.  Constraints\n   Any process that updates the Local Information Base
    or the Neighbor\n   Information Base MUST ensure that all constraints specified
    in this\n   appendix are maintained.\n   In each Local Interface Tuple:\n   o
    \ I_local_iface_addr_list MUST NOT be empty.\n   o  I_local_iface_addr_list MUST
    NOT contain any duplicated network\n      addresses.\n   o  If I_manet = true,
    then I_local_iface_addr_list MUST NOT contain\n      any network address that
    overlaps any network address in the\n      I_local_iface_addr_list of any other
    Local Interface Tuple with\n      I_manet = true, unless it is known that the
    corresponding MANET\n      interfaces will always communicate with separate sets
    of MANET\n      interfaces on other routers.\n   In each Removed Interface Address
    Tuple:\n   o  IR_local_iface_addr MUST NOT contain any network address that is\n
    \     in the I_local_iface_addr_list of any Local Interface Tuple.\n   o  IR_local_iface_addr
    MUST NOT equal the IR_local_iface_addr of any\n      other Removed Interface Address
    Tuple.\n   In each Link Tuple:\n   o  L_neighbor_iface_addr_list MUST NOT be empty.\n
    \  o  L_neighbor_iface_addr_list MUST NOT contain any network address\n      that
    overlaps any network address in the I_local_iface_addr_list\n      of any Local
    Interface Tuple or the IR_local_iface_addr of any\n      Removed Interface Address
    Tuple.\n   o  L_neighbor_iface_addr_list MUST NOT contain any duplicated network\n
    \     addresses.\n   o  L_neighbor_iface_addr_list MUST NOT contain any network
    address\n      which is in the L_neighbor_iface_addr_list of any other Link Tuple\n
    \     in the same Link Set.\n   o  If L_HEARD_time has not expired, then there
    MUST be a Neighbor\n      Tuple whose N_neighbor_addr_list contains\n      L_neighbor_iface_addr_list.\n
    \  o  L_HEARD_time MUST NOT be greater than L_time.\n   o  L_SYM_time MUST NOT
    be greater than L_HEARD_time (unless both are\n      expired).\n   o  L_quality
    MUST NOT be less than 0 or greater than 1.\n   o  If L_quality >= HYST_ACCEPT,
    then L_pending MUST be false.\n   o  If L_quality < HYST_REJECT, then L_status
    MUST be PENDING or LOST.\n   o  L_pending MUST NOT be set to true if it is currently
    false.\n   In each Neighbor Tuple:\n   o  N_neighbor_addr_list MUST NOT contain
    any network address that\n      overlaps any network address in the I_local_iface_addr_list
    of any\n      Local Interface Tuple or the IR_local_iface_addr of any Removed\n
    \     Interface Address Tuple.\n   o  N_neighbor_addr_list MUST NOT contain any
    duplicated network\n      addresses.\n   o  N_neighbor_addr_list MUST NOT contain
    any network address that is\n      in the N_neighbor_addr_list of any other Neighbor
    Tuple.\n   o  If N_symmetric is = true, then there MUST be one or more Link\n
    \     Tuples with:\n      o  L_neighbor_iface_addr_list contained in N_neighbor_addr_list;\n
    \        AND\n      o  L_status = SYMMETRIC.\n   o  If N_symmetric is = false,
    then there MUST be one or more Link\n      Tuples with:\n      o  L_neighbor_iface_addr_list
    contained in N_neighbor_addr_list.\n      All such Link Tuples MUST NOT have L_status
    = SYMMETRIC.  At least\n      one such Link Tuple MUST have L_HEARD_time not expired.\n
    \  In each Lost Neighbor Tuple:\n   o  NL_neighbor_addr MUST NOT overlap any network
    address in the\n      I_local_iface_addr_list of any Local Interface Tuple or
    the\n      IR_local_iface_addr of any Removed Interface Address Tuple.\n   o  NL_neighbor_addr
    MUST NOT equal the NL_neighbor_addr of any other\n      Lost Neighbor Tuple.\n
    \  o  NL_neighbor_addr MUST NOT be in the N_neighbor_addr_list of any\n      Neighbor
    Tuple with N_symmetric = true.\n   In each 2-Hop Tuple:\n   o  There MUST be a
    Link Tuple associated with the same MANET\n      interface with:\n      o  L_neighbor_iface_addr_list
    = N2_neighbor_iface_addr_list; AND\n      o  L_status = SYMMETRIC.\n   o  N2_2hop_addr
    MUST NOT overlap any network address in the\n      I_local_iface_addr_list of
    any Local Interface Tuple or the\n      IR_local_iface_addr of any Removed Interface
    Address Tuple.\n   o  N2_2hop_addr MUST NOT be the N2_2hop_addr of any other 2-Hop
    Tuple\n      in the same 2-Hop Set and with the same\n      N2_neighbor_iface_addr_list.\n
    \  o  N2_2hop_addr MUST NOT be in the N2_neighbor_iface_addr_list of the\n      same
    2-Hop Tuple.\n"
  title: Appendix B.  Constraints
- contents:
  - "Appendix C.  HELLO Message Example\n   HELLO messages are instances of [RFC5444]
    messages, and this protocol\n   supports any combination of message header options
    and address\n   encodings, enabled by [RFC5444] that convey the required information.\n
    \  As a consequence, there is no single way to represent how all HELLO\n   messages
    look.  This appendix illustrates two HELLO message with\n   similar content, the
    exact values included are explained in the\n   following text.\n   The HELLO message's
    four bit Message Flags (MF) field has value 7\n   indicating that the message
    header contains hop limit, hop count, and\n   message sequence number fields.
    \ Its four bit Message Address Length\n   (MAL) field has value 3, indicating
    addresses in the message have a\n   length of four octets, here being IPv4 addresses.
    \ The message is as\n   transmitted, with a hop limit of 1 and a hop count of
    0.  The overall\n   message length is 45 octets.\n   The message contains a Message
    TLV Block with content length 8 octets\n   containing two Message TLVs, of types
    VALIDITY_TIME and\n   INTERVAL_TIME.  Each uses a Message TLV with Flags octet
    (MTLVF)\n   value 16, indicating that each has a Value, and each has a Value\n
    \  Length of 1 octet.  The Values included are time codes (as defined in\n   [RFC5497])
    representing the parameters H_HOLD_TIME and\n   HELLO_INTERVAL, respectively.\n
    \  The message has a single Address Block containing 5 addresses.  The\n   Address
    Block Flags octet (ABF) value 128 indicates an address Head\n   but no address
    Tail, and no address prefixes.  The Head Length of 3\n   octets indicates address
    Mid sections of one octet each (Mid 0 to Mid\n   4).\n   The following Address
    Block TLV Block (content length 14 octets)\n   includes two Address Block TLVs.
    \ The first is a LOCAL_IF Address\n   Block TLV with Flags octet (ATLVF) value
    80, which indicates that a\n   single address, with index 0 (i.e., the address
    Head:Mid 0) is the\n   single local interface address of this router (the one
    octet Value\n   THIS_IF indicates that this address is of this interface).  The\n
    \  second is a LINK_STATUS Address Block TLV with Flags octet (ATLVF)\n   value
    52, which specifies the link status values of all reported\n   neighbors in a
    single multivalue Address Block TLV that covers the\n   addresses with indexes
    1 to 4, inclusive.  The Address Block TLV\n   Value Length of 4 octets indicates
    one octet per Value per address.\n   The last four addresses thus are of neighbors,
    each an with\n   associated link status: the first and second HEARD, the third\n
    \  SYMMETRIC, and the fourth LOST.\n      0                   1                   2
    \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     HELLO     | MF=7  | MAL=3 |      Message Length = 45      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Hop Limit = 1 | Hop Count = 0 |    Message Sequence Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Message TLV Block Length = 8  | VALIDITY_TIME |  MTLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Value Len = 1 | Value (Time)  | INTERVAL_TIME |  MTLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Value Len = 1 | Value (Time)  | Num Addrs = 5 |   ABF = 128   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Head Len = 3  |                     Head                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     Mid 0     |     Mid 1     |     Mid 2     |     Mid 3     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     Mid 4     | Address TLV Block Length = 14 |   LOCAL_IF    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  ATLVF = 80   |   Index = 0   | Value Len = 1 |    THIS_IF    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  LINK_STATUS  |   ATLV = 52   | Strt Indx = 1 | Stop Indx = 4 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Value Len = 4 |     HEARD     |     HEARD     |   SYMMETRIC   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     LOST      |\n     +-+-+-+-+-+-+-+-+\n   Note that this example is for
    illustrative purposes.  The essential\n   information can be conveyed, more efficiently
    (assuming that the\n   local interface address will be supplied by IP, and that
    the\n   INTERVAL_TIME TLV is not needed) by the 29 octets:\n      0                   1
    \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     HELLO     |0 0 0 0 0 0 1 1|0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0| VALIDITY_TIME |0 0 0 1 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 0 1|0 1 1 0 0 1 0 0|0 0 0 0 0 1 0 0|1 0 0 0 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 1 1|                     Head                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     Mid 1     |     Mid 2     |     Mid 3     |     Mid 4     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1|  LINK_STATUS  |0 0 0 1 0 1 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 1 0 0|     HEARD     |     HEARD     |   SYMMETRIC   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |     LOST      |\n     +-+-+-+-+-+-+-+-+\n   Note that the above example
    assumes that H_HOLD_TIME and C have their\n   default values of 6 seconds and
    1/1024 second, and thus result in a\n   time code of 100 (hexadecimal 64).\n"
  title: Appendix C.  HELLO Message Example
- contents:
  - "Appendix D.  Flow and Congestion Control\n   This protocol specifies one Message
    Type, the HELLO message.  The\n   maximum size of a HELLO message is proportional
    to the size of the\n   originating router's 1-hop neighborhood.  HELLO messages
    MUST NOT be\n   forwarded.\n   A router MUST report its 1-hop neighborhood in
    HELLO messages on each\n   of its MANET interfaces at least each REFRESH_INTERVAL.
    \ This puts a\n   lower bound on the control traffic generated by each router
    in the\n   network employing this protocol.\n   A router MUST ensure that two
    successive HELLO messages sent on the\n   same MANET interface are separated by
    at least HELLO_MIN_INTERVAL.\n   (If using jitter, then this may be reduced to
    a mean minimum value of\n   HELLO_MIN_INTERVAL - HP_MAXJITTER/2.)  Thus, this
    puts an upper bound\n   on the control traffic generated by each router in the
    network\n   employing this protocol.\n"
  title: Appendix D.  Flow and Congestion Control
- contents:
  - "Appendix E.  Interval and Timer Illustrations\n   This informative appendix illustrates
    the relationship between\n   message timers and intervals.  (The adjustments to
    this timing when\n   using timing jitter, as defined in [RFC5148], are not shown.)\n"
  - contents:
    - "E.1.  HELLO Message Generation Timing\n   Figure 1 illustrates a basic HELLO
      message schedule for a router, on\n   a MANET interface, employing strictly
      periodic transmission of HELLO\n   messages.  The router transmits a HELLO message
      each HELLO_INTERVAL.\n   Each HELLO message contains all 1-hop neighbor network
      addresses of\n   the router that are to be reported in any such HELLO message.
      \ (The\n   parameter REFRESH_INTERVAL, not shown, is in this example equal to\n
      \  the parameter HELLO_INTERVAL.)\n   The router includes a VALIDITY_TIME TLV
      in each HELLO message,\n   encoding the parameter H_HOLD_TIME, the duration
      for which\n   information received in the HELLO message should be considered
      valid\n   by receiving routers.  Receiving routers will, when recording the\n
      \  information received in the HELLO message, each use this for setting\n   the
      L_HEARD_time, L_SYM_time and L_time elements of their\n   corresponding Link
      Tuple, and the N2_time in the corresponding 2-Hop\n   Tuple for each network
      address.  Only L_time is illustrated in\n   Figure 1.\n     H_HOLD_TIME:         |-----------------------------|
      \  ...\n     HELLO_INTERVAL:      |---------|---------|---------|   ...\n     Time:
      \            ---*---------*---------*---------*------>\n                          ^
      \        ^         ^         ^\n                          |         |         |
      \        |\n         HELLO (a, b, c, d)         |         |         |\n                                    |
      \        |         |\n                   HELLO (a, b, c, d)         |         |
      \  ...\n                                              |         |\n                             HELLO
      (a, b, c, d)         |\n                                                        |\n
      \                                      HELLO (a, b, c, d)\n     L_time:              |-----------------------------|\n
      \                                   |--------------------   ...\n                                              |----------
      \  ...\n                                                        |   ...\n           Figure
      1: HELLO Message Generation: Regular Schedule\n   Figure 2 illustrates a message
      schedule similar to Figure 1, where\n   the router announces its own presence
      more frequently by sending\n   additional HELLO messages.  HELLO messages are
      still sent regularly,\n   at a reduced interval defined by a new value of HELLO_INTERVAL.\n
      \  However, REFRESH_INTERVAL has not been reduced.  Each 1-hop neighbor\n   network
      address included in these HELLO messages need be advertised\n   only once within
      each REFRESH_INTERVAL.  Consequently, the additional\n   HELLO messages due
      to the reduced value of HELLO_INTERVAL may\n   therefore be empty.  (This is
      not the only allowed distribution of\n   1-hop neighbor network addresses, they
      could, for example, be sent\n   alternately a, b and c, d.)\n     H_HOLD_TIME:
      \        |-----------------------------|   ...\n     REFRESH_INTERVAL:    |---------|---------|---------|
      \  ...\n     HELLO_INTERVAL:      |----|----|----|----|----|----|   ...\n     Time:
      \            ---*---------*---------*---------*------>\n                          ^
      \   ^    ^    ^    ^    ^    ^\n                          |    |    |    |    |
      \   |    |\n         HELLO (a, b, c, d)    |    |    |    |    |    |\n                               |
      \   |    |    |    |    |\n                        HELLO ()    |    |    |    |
      \   |\n                                    |    |    |    |    |\n                   HELLO
      (a, b, c, d)    |    |    |    |\n                                         |
      \   |    |    |   ...\n                                  HELLO ()    |    |
      \   |\n                                              |    |    |\n                             HELLO
      (a, b, c, d)    |    |\n                                                   |
      \   |\n                                            HELLO ()    |\n                                                        |\n
      \                                      HELLO (a, b, c, d)\n     L_time:              |-----------------------------|\n
      \                              |-------------------------   ...\n                                    |--------------------
      \  ...\n                                         |---------------   ...\n                                              |----------
      \  ...\n                                                   |-----   ...\n                                                        |
      \  ...\n    Figure 2: HELLO Message Generation: Regular Schedule with Different\n
      \                   HELLO_INTERVAL and REFRESH_INTERVAL\n   HELLO messages may
      also be sent in response to events.  The minimal\n   interval between two successive
      HELLO message transmissions by a\n   router is HELLO_MIN_INTERVAL, setting an
      upper bound of the HELLO\n   message emission rate.  Hence, for each HELLO message
      transmission, a\n   router must wait at least HELLO_MIN_INTERVAL before the
      next HELLO\n   message transmission.  Similarly, the maximum interval between
      two\n   successive HELLO message transmissions is HELLO_INTERVAL, setting a\n
      \  lower bound on the message transmission rate.  Hence, for each HELLO\n   message
      transmission, the router must ensure that the next HELLO\n   message transmission
      must not wait more than HELLO_INTERVAL.\n   Figure 3 illustrates a message schedule
      similar to Figure 1, but with\n   HELLO messages responding to events at maximum
      rate, i.e., with HELLO\n   messages being sent each HELLO_MIN_INTERVAL.  Note
      that when a HELLO\n   message is sent, it is assumed that the following messages
      may all be\n   scheduled at an interval of HELLO_INTERVAL, and hence each HELLO\n
      \  message contains all 1-hop neighbor network addresses.  In each HELLO\n   message
      in this example, a new 1-hop neighbor network address is\n   added, reflecting
      the changes occurring since the last HELLO message\n   was sent.  HELLO messages
      are sent at the maximum allowed rate in\n   order to signal these changes as
      rapidly as possible.\n     H_HOLD_TIME:         |-----------------------------|
      \  ...\n     HELLO_INTERVAL:      |---------|---------|---------|   ...\n     HELLO_MIN_INTERVAL:
      \ |----|----|----|----|----|----|   ...\n     Time:             ---*---------*---------*---------*------>\n
      \                         ^    ^    ^    ^    ^    ^    ^\n                          |
      \   |    |    |    |    |    |\n                   HELLO ()    |    |    |    |
      \   |    |\n                               |    |    |    |    |    |\n                       HELLO
      (a)    |    |    |    |    |\n                                    |    |    |
      \   |    |\n                         HELLO (a, b)    |    |    |    |\n                                         |
      \   |    |    |   ...\n                           HELLO (a, b, c)    |    |
      \   |\n                                              |    |    |\n                             HELLO
      (a, b, c, d)    |    |\n                                                   |
      \   |\n                               HELLO (a, b, c, d, e)    |\n                                                        |\n
      \                                HELLO (a, b, c, d, e, f)\n     L_time:              |-----------------------------|\n
      \                              |-------------------------   ...\n                                    |--------------------
      \  ...\n                                         |---------------   ...\n                                              |----------
      \  ...\n                                                   |-----   ...\n                                                        |
      \  ...\n   Figure 3: HELLO Message Generation: Regular Schedule with Responsive\n
      \                                Messages\n   Figure 4 shows the same example
      as Figure 3, but with an increased\n   REFRESH_INTERVAL, and showing partial
      HELLO messages that include\n   only the necessary network addresses.\n     H_HOLD_TIME:
      \        |-----------------------------|   ...\n     REFRESH_INTERVAL:    |-------------------|----------
      \  ...\n                               |-------------------|-----   ...\n                                    |-------------------|
      \  ...\n                                         |---------------   ...\n                                              |----------
      \  ...\n                                                   |-----   ...\n                                                        |
      \  ...\n     HELLO_INTERVAL:      |---------|---------|---------|   ...\n     HELLO_MIN_INTERVAL:
      \ |----|----|----|----|----|----|   ...\n     Time:             ---*---------*---------*---------*------>\n
      \                         ^    ^    ^    ^    ^    ^    ^\n                          |
      \   |    |    |    |    |    |\n                   HELLO ()    |    |    |    |
      \   |    |\n                               |    |    |    |    |    |\n                       HELLO
      (a)    |    |    |    |    |\n                                    |    |    |
      \   |    |\n                            HELLO (b)    |    |    |    |\n                                         |
      \   |    |    |   ...\n                                 HELLO (c)    |    |
      \   |\n                                              |    |    |\n                                   HELLO
      (a, d)    |    |\n                                                   |    |\n
      \                                       HELLO (b, e)    |\n                                                        |\n
      \                                            HELLO (c, f)\n     L_time:              |-----------------------------|\n
      \                              |-------------------------   ...\n                                    |--------------------
      \  ...\n                                         |---------------   ...\n                                              |----------
      \  ...\n                                                   |-----   ...\n                                                        |
      \  ...\n   Figure 4: HELLO Message Generation: Regular Schedule with Responsive\n
      \       Messages and Different HELLO_INTERVAL and REFRESH_INTERVAL\n   Figure
      5 summarizes the overall relationship between the intervals\n   governing HELLO
      message transmissions by a router.\n     H_HOLD_TIME:         |------------------------------------|\n
      \    REFRESH_INTERVAL:    |----------------|\n     HELLO_INTERVAL:      |----------|\n
      \    HELLO_MIN_INTERVAL:  |---|\n     Time:             ----------------------------------------------->\n
      \                         ^   ^      ^     ^                   ^\n                          |
      \  |      |     |                   |\n                          |   |      |
      \    |           Time up to which\n              HELLO message   |      |     |
      \          received HELLO\n              transmission    |      |     |           message
      content\n                              |      |     |           is valid.\n
      \                             |      |     |\n                              |
      \     |     Time before which all\n                              |      |     neighbor
      information must\n                              |      |     be transmitted
      in HELLO\n                              |      |     messages (one or more)\n
      \                             |      |\n                              |      Latest
      time for next HELLO message\n                              |      transmission\n
      \                             |\n                              Earliest time
      for next HELLO message\n                              transmission\n               Figure
      5: HELLO Message Generation Intervals\n"
    title: E.1.  HELLO Message Generation Timing
  - contents:
    - "E.2.  HELLO Message Processing Timing\n   Figure 6 illustrates the Link Set
      timers when receiving a HELLO\n   message not including the network address
      of the receiving MANET\n   interface.\n     VALIDITY_TIME:    |--------------------------|\n
      \    L_time:           |--------------------------|\n     L_HEARD_time:     |--------------------------|\n
      \    L_SYM_time:     *-| (i.e.,  expired)\n     Time:          ---*-------------------------------->\n
      \                      ^\n                       |\n                HELLO ()
      received\n      Figure 6: HELLO Message Processing: Network Address Not Present\n
      \  Figure 7 illustrates the Link Set timers when, following the received\n   HELLO
      message illustrated in Figure 6, a router receives a HELLO\n   message including
      the network address (a) of the receiving interface\n   with link status = HEARD
      (or SYM).\n     VALIDITY_TIME:    |--------------------------|\n                             |--------------------------|\n
      \    L_time:           |--------------------------|\n                             |--------------------------|\n
      \    L_HEARD_time:     |--------------------------|\n                             |--------------------------|\n
      \    L_SYM_time:     *-| (i.e.,  expired)\n     L_SYM_time:             |--------------------------|\n
      \    Time:            -*-----*--------------------------------->\n                       ^
      \    ^\n                       |     |\n      HELLO () received      |\n                             |\n
      \     HELLO (a:HEARD) received\n        Figure 7: HELLO Message Processing:
      Network Address Present\n   Figure 8 illustrates the Link Set timers when, following
      the received\n   HELLO messages illustrated in Figure 7, a router receives a
      HELLO\n   message including the network address (a) of the receiving interface\n
      \  with link status = LOST.\n     VALIDITY_TIME:    |--------------------------|\n
      \                            |--------------------------|\n                                   |--------------------------|\n
      \    L_time:           |--------------------------|\n                             |--------------------------|\n
      \                                  |--------------------------|\n     L_HEARD_time:
      \    |--------------------------|\n                             |--------------------------|\n
      \                                  |--------------------------|\n     L_SYM_time:
      \    *-| (i.e.,  expired)\n                             |--------------------------|\n
      \                                *-| (i.e.,  expired)\n     Time:            -*-----*-----*--------------------------------->\n
      \                      ^     ^     ^\n                       |     |     |\n
      \      HELLO () received     |     |\n                             |     |\n
      \     HELLO (a:HEARD) received     |\n                                   |\n
      \            HELLO (a:LOST) received\n         Figure 8: HELLO Message Processing:
      Network Address Lost\n"
    title: E.2.  HELLO Message Processing Timing
  - contents:
    - "E.3.  Other HELLO Message Timing\n   There are three other timing parameters
      that are used by a router to\n   control HELLO message generation and processing.\n
      \  Figure 9 illustrates the time, with duration L_HOLD_TIME, during\n   which
      the appropriate network addresses of a formerly, but no longer,\n   symmetric
      1-hop neighbor, as connected by this MANET interface, are\n   advertised as
      LOST using a LINK_STATUS TLV in HELLO messages on this\n   MANET interface,
      thus allowing that 1-hop neighbor to update its Link\n   Set accordingly.\n
      \    L_HOLD_TIME:   |----------------------------|\n     Time:       ---*---------------------------------->\n
      \                   ^                            ^\n                    |                            |\n
      \        Formerly symmetric 1-hop neighbor       |\n         ceases to be symmetric
      on this          |\n         MANET interface                         |\n                                                 |\n
      \                     Time up to which network addresses of\n                      this
      neighbor connected using this MANET\n                      interface are advertised
      in HELLO\n                      messages on this MANET interface\n                      using
      a LINK_STATUS TLV, Value = LOST\n       Figure 9: HELLO Message Generation:
      Advertisement of Formerly\n         Symmetric 1-Hop Neighbor on This MANET Interface
      as Lost\n   Figure 10 illustrates the time, with duration N_HOLD_TIME, during\n
      \  which all network addresses of a formerly, but no longer, symmetric\n   1-hop
      neighbor, are advertised as LOST in HELLO messages on all MANET\n   interfaces
      using an OTHER_NEIGHB TLV (if not also reported using a\n   LINK_STATUS TLV)
      thus allowing all other symmetric 1-hop neighbors to\n   update their 2-Hop
      Sets accordingly.\n     L_HOLD_TIME:   |----------------------------|\n     Time:
      \      ---*---------------------------------->\n                    ^                            ^\n
      \                   |                            |\n         Formerly symmetric
      1-hop neighbor       |\n         ceases to be symmetric                  |\n
      \                                                |\n                      Time
      up to which network addresses of\n                      this neighbor are advertised
      in HELLO\n                      messages on all MANET interfaces\n                      using
      an OTHER_NEIGHB TLV,\n                      Value = LOST\n      Figure 10: HELLO
      Message Generation: Advertisement of Formerly\n          Symmetric 1-Hop Neighbor
      on Any MANET Interface as Lost\n   Figure 11 illustrates the time, with duration
      I_HOLD_TIME, during\n   which a formerly, but no longer, used local interface
      network address\n   is excluded from being considered as a 2-hop neighbor network
      address\n   (in order that a router is not recorded as its own 2-hop neighbor\n
      \  during that period).\n     I_HOLD_TIME:      |----------------------------|\n
      \    Time:          ---*----------------------------------->\n                       ^
      \                           ^\n                       |                            |\n
      \      Formerly used local interface                |\n       network address
      ceases to be                 |\n       assigned to a local interface                |\n
      \                                                   |\n                               Time
      up to which this network\n                               address is excluded
      from being\n                               included in this router's 2-Hop Set\n
      \           Figure 11: Local Interface Removed Network Address\n"
    title: E.3.  Other HELLO Message Timing
  title: Appendix E.  Interval and Timer Illustrations
- contents:
  - "Appendix F.  Topology Pictures\n   This appendix illustrates various examples
    of physical topologies, as\n   well as how these are logically recorded by NHDP
    from the point of\n   view of the router A.  This representation is a composite
    of\n   information that would be contained within A's various Information\n   Bases
    after NHDP has been running for sufficiently long time for the\n   state to converge.\n
    \  Note that the examples given in this appendix are NOT exhaustive, but\n   are
    selected to be illustrative of NHDP neighborhood representations\n   of physical
    MANET topologies.\n   The example topologies presented contain 3 physical routers
    A, B, and\n   C.   Each of these routers has one or two distinct interfaces,\n
    \  denoted \"top\" and \"bottom\".  Each interface has one or two addresses,\n
    \  and symmetric connectivity between a pair of interfaces is\n   illustrated
    by these being connected by a line.\n   In all examples, the topology is described
    as it is recorded by NHDP\n   in router A.\n"
  - contents:
    - "F.1.  Example 1: Standard Single Interface Topology\n   In Figure 12, each
      router has a single interface, each with a single\n   IP address.  This is the
      simplest possible network, and the resulting\n   representation is given to
      the right in Figure 12.\n         __________ __________\n        |          |
      \         |\n       {1}        {2}        {3}\n        |          |          |
      \             {1}--------{2}--------{3}\n     +--'--+    +--'--+    +--'--+\n
      \    |  A  |    |  B  |    |  C  |\n     +-----+    +-----+    +-----+\n         Figure
      12: Standard Single Interface Topology (Left), and\n                 Corresponding
      NHDP Representation (Right)\n   The Local Information Set in A contains a single
      Local Interface\n   Tuple that has an I_local_iface_addr_list of {1}.  This
      value is\n   denoted with a {1} on the leftmost part of the resulting\n   representation.\n
      \  The Interface Information Base has only one Link Set, which\n   represents
      the \"top\" interface of A, or {1}.  This Link Set's only\n   Link Tuple has
      an L_neighbor_iface_addr_list containing {2}; this\n   corresponds to the dashed
      line from {1} to {2} to the right in\n   Figure 12.  The 2-Hop Set contains
      a single 2-Hop Tuple, with\n   N2_neighbor_iface_addr_list being {2} and N2_2hop_addr
      being {3};\n   this corresponds to the dashed line from {2} to {3} to the right
      in\n   Figure 12.\n   The descriptions of the following examples in this appendix
      will be\n   derived similarly, and use the same notational conventions.\n"
    title: 'F.1.  Example 1: Standard Single Interface Topology'
  - contents:
    - "F.2.  Example 2: Dual Addressed Interface on 1-Hop Neighbor\n   In Figure 13,
      the network is identical to that in Example 1, except\n   that the middle router,
      B, has two IP addresses on its single\n   interface.\n         __________ __________\n
      \       |          |          |\n       {1}       {2,4}       {3}\n        |
      \         |          |              {1}-------{2,4}-------{3}\n     +--'--+
      \   +--'--+    +--'--+\n     |  A  |    |  B  |    |  C  |\n     +-----+    +-----+
      \   +-----+\n      Figure 13: Single Interfaces, with 1-Hop Neighbor B Having
      Two\n      Addresses (Left), and Corresponding NHDP Representation (Right)\n
      \  The content of the Interface Information Base is in this case\n   identical
      to Example 1, except that L_neighbor_iface_addr_list is\n   {2,4} and N2_neighbor_iface_addr_list
      is {2,4}.\n"
    title: 'F.2.  Example 2: Dual Addressed Interface on 1-Hop Neighbor'
  - contents:
    - "F.3.  Example 3: Dual Addressed Interface on 2-Hop Neighbor\n   In Figure 14,
      the network is identical to that in Example 1, except\n   that the rightmost
      router, C, has two IP addresses on its interface.\n         __________ __________\n
      \       |          |          |\n       {1}        {2}       {3,4}                             +----{3}\n
      \       |          |          |              {1}--------{2}---+\n     +--'--+
      \   +--'--+    +--'--+                            +----{4}\n     |  A  |    |
      \ B  |    |  C  |\n     +-----+    +-----+    +-----+\n      Figure 14: Single
      Interfaces, with 2-Hop Neighbor C Having Two\n      Addresses (Left), and Corresponding
      NHDP Representation (Right)\n   The content of the Interface Information Base
      is in this case\n   identical to than in Example 1, except that the 2-Hop Set
      contains an\n   extra 2-Hop Tuple with N2_neighbor_iface_addr_list being {2}
      and\n   N2_2hop_addr being {4}.  These two 2-Hop Tuples are illustrated by\n
      \  the two lines from {2} to {3} and (2) to {4}, respectively.\n"
    title: 'F.3.  Example 3: Dual Addressed Interface on 2-Hop Neighbor'
  - contents:
    - "F.4.  Example 4: Dual Addressed Interfaces\n   In Figure 15, the network is
      identical to that in Example 1, except\n   that all routers have two IP addresses
      on their interface.  The Local\n   Information Base in router A is the same
      as in Example 1, except that\n   I_local_iface_addr_list is {1,5}.\n         __________
      __________\n        |          |          |\n      {1,5}      {2,6}      {3,4}
      \                            +----{3}\n        |          |          |             {1,5}------{2,6}--+\n
      \    +--'--+    +--'--+    +--'--+                            +----{4}\n     |
      \ A  |    |  B  |    |  C  |\n     +-----+    +-----+    +-----+\n      Figure
      15: Single interfaces, all routers having two addresses\n           (left),
      and corresponding NHDP representation (right)\n   The content of the Interface
      Information Base is in this case a\n   combination of the Interface Information
      Bases from Examples 1, 2,\n   and 3.\n"
    title: 'F.4.  Example 4: Dual Addressed Interfaces'
  - contents:
    - "F.5.  Example 5: Dual Interface on 2-Hop Neighbor\n   In Figure 16, all routers
      have a single IP address on each interface,\n   and with the 2-hop neighbor
      having two interfaces.\n         __________ __________\n        |          |
      \         |\n       {1}        {2}        {3}                              +----{3}\n
      \       |          |          |              {1}--------{2}---+\n     +--'--+
      \   +--'--+    +-----+                            +----{4}\n     |  A  |    |
      \ B  |    |  C  |\n     +-----+    +-----+    +-----+\n                              |\n
      \                            {4}\n       Figure 16: Single Addresses, with 2-Hop
      Neighbor C Having Two\n     Interfaces (Left), and Corresponding NHDP Representation
      (Right)\n   The Interface Information Base is identical to that in Example 3;\n
      \  NHDP does not distinguish topologically between this example and\n   Example
      3.\n"
    title: 'F.5.  Example 5: Dual Interface on 2-Hop Neighbor'
  - contents:
    - "F.6.  Example 6: Dual interface on 1-Hop Neighbor\n   In Figure 17, all routers
      have a single IP address on each interface,\n   and with the 1-hop neighbor
      having two interfaces.\n         __________\n        |          |\n       {1}
      \       {2}                                  +-----+\n        |          |                         {1}-------|
      {2} |------{4}\n     +--'--+    +--'--+    +-----+                     | {5}
      |\n     |  A  |    |  B  |    |  C  |                     +-----+\n     +-----+
      \   +-----+    +-----+\n                   |          |\n                  {5}
      \       {4}\n                   |__________|\n       Figure 17: Single Addresses,
      with 1-Hop Neighbor B Having Two\n     Interfaces (Left), and Corresponding
      NHDP Representation (Right)\n   The Local Information Base is identical to that
      in Example 1.\n   The Interface Information Base has only one Link Set containing
      one\n   Link Tuple with L_neighbor_iface_addr_list being {2}.  The 2-Hop Set\n
      \  contains a single 2-Hop Tuple, with N2_neighbor_iface_addr_list being\n   {2}
      and N2_2hop_addr being {4}.\n   The Neighbor Information Base contains a Neighbor
      Set containing a\n   single Neighbor Tuple, which represents router B, with\n
      \  N_neighbor_addr_list being {2,5}.  This entry is represented on the\n   right
      of Figure 17 by boxing {2} with {5}.\n   Note that router A does not have information
      indicating which of\n   router B's interfaces is connected to router C.  However,
      router A\n   knows that the address {4} (and thus router C) is reachable by
      using\n   {2} as next hop.\n"
    title: 'F.6.  Example 6: Dual interface on 1-Hop Neighbor'
  - contents:
    - "F.7.  Example 7: Dual Interface on 1-Hop and 2-Hop Neighbors\n   In Figure
      18, all routers have a single IP address on each interface,\n   and both the
      1-hop and 2-hop neighbors have two interfaces.\n   Furthermore, there are now
      two physical links between routers B and\n   C, over distinct interface pairs.\n
      \        __________ __________\n        |          |          |\n       {1}
      \       {2}        {3}                      +-----+   +----{3}\n        |          |
      \         |             {1}-------| {2} |---+\n     +--'--+    +--'--+    +-----+
      \                   | {5} |   +----{4}\n     |  A  |    |  B  |    |  C  |                    +-----+\n
      \    +-----+    +-----+    +-----+\n                   |          |\n                  {5}
      \       {4}\n                   |__________|\n    Figure 18: Single Addresses,
      with 1-Hop and 2-Hop Neighbors B and C\n    Having Two Interfaces (Left), and
      Corresponding NHDP Representation\n                                  (Right)\n
      \  The Local Information Base is identical to that in Example 1.\n   The Link
      Set is identical to that in Example 6, and the 2-Hop Set\n   contains, as in
      Example 5 (and similarly to Examples 3 and 4), two\n   2-Hop Tuples representing
      the two links between routers B and C.\n   Note that router A does not have
      information describing which of\n   router B's interfaces is connected to which
      interfaces of router C,\n   or even that the interfaces with addresses {3} and
      {4} are interfaces\n   of the same router.  However, router A knows that the
      addresses {3}\n   and {4} (and thus router C) are reachable using {2} as next
      hop.\n"
    title: 'F.7.  Example 7: Dual Interface on 1-Hop and 2-Hop Neighbors'
  - contents:
    - "F.8.  Example 8: Dual Interface Locally and on 1-Hop Neighbor\n   In Figure
      19, all routers have a single IP address on each interface,\n   and both A and
      its the 1-hop neighbor B have two interfaces.\n   Furthermore, there are now
      two physical links between routers A and\n   B, over distinct interface pairs.\n
      \        __________ __________\n        |          |          |                       +-----+\n
      \      {1}        {2}        {3}            {1}-------| {2} |--------{3}\n        |
      \         |          |                       | {5} |\n     +--'--+    +--'--+
      \   +-----+                    +-----+\n     |  A  |    |  B  |    |  C  |\n
      \    +-----+    +-----+    +-----+                    +-----+\n        |          |
      \                                 | {2} |\n       {6}        {5}                       {6}-------|
      {5} |--------{3}\n        |__________|                                  +-----+\n
      \  Figure 19: Single Addresses, with Both A and 1-Hop Neighbor B Having\n   Two
      Interfaces (Left), and Corresponding NHDP Representation (Right)\n   The Local
      Information Set contains two Local Interface Tuples, with\n   I_local_iface_addr_list
      of {1} and {6}, respectively.\n   Each Interface Information Base's Link Set
      contains one Link Tuple,\n   representing the links between {1} and {2}, and
      between {6} and {5},\n   respectively.  The 2-Hop Set for interface {1} contains
      a single\n   2-Hop Tuple, with N2_neighbor_iface_addr_list being {2} and\n   N2_2hop_addr
      being {3}.  The 2-Hop Set for interface {6} contains a\n   single 2-Hop Tuple,
      with N2_neighbor_iface_addr_list being {5} and\n   N2_2hop_addr being {3}.\n
      \  The Neighbor Information Base contains a Neighbor Set containing a\n   single
      Neighbor Tuple, which represents router B, with\n   N_neighbor_addr_list being
      {2,5}.  This entry is denoted by boxing\n   {2} with {5}.\n"
    title: 'F.8.  Example 8: Dual Interface Locally and on 1-Hop Neighbor'
  - contents:
    - "F.9.  Example 9: Dual Interface on All Routers\n   In Figure 20, all routers
      have a single IP address on each interface,\n   and all routers have two interfaces.
      \ Furthermore, there are now two\n   physical links between A and B, over distinct
      interface pairs, and\n   two physical links between B and C, also over distinct
      interface\n   pairs.\n         __________ __________\n        |          |          |
      \                      +-----+   +----{3}\n       {1}        {2}        {3}
      \           {1}-------| {2} |---+\n        |          |          |                       |
      {5} |   +----{4}\n     +--'--+    +--'--+    +-----+                    +-----+\n
      \    |  A  |    |  B  |    |  C  |\n     +-----+    +-----+    +-----+                    +-----+\n
      \       |          |          |                       | {2} |   +----{3}\n       {6}
      \       {5}        {4}            {6}-------| {5} |---+\n        |__________|__________|
      \                      +-----+   +----{4}\n    Figure 20: Single Addresses,
      with All Routers Having Two Interfaces\n           (Left), and Corresponding
      NHDP Representation (Right)\n   The Local Information Set is identical to that
      in Example 8.  The\n   Interface Information Base for each interface in A is
      also identical\n   to that in Example 8, except that an additional 2-Hop Tuple
      is\n   present in each 2-Hop Set, each representing the link between router\n
      \  B and the interface of router C with address {4}.\n   As in Example 7, router
      A does not have information describing which\n   of router B's interfaces is
      connected to which interface of C, or\n   even that the interfaces with addresses
      {3} and {4} are interfaces of\n   the same router.  However, router A knows
      that the addresses {3} and\n   {4} (and router C) are reachable by using {2}
      or {5} (depending on\n   via which of its local interfaces) as next hop.\n"
    title: 'F.9.  Example 9: Dual Interface on All Routers'
  - contents:
    - "F.10.  Example 10: Dual Addressed Dual Interfaces on All Routers\n   In Figure
      21, all routers have two IP addresses on each interface,\n   and all routers
      have two interfaces.  Furthermore, there are now two\n   physical links between
      A and B, over distinct interface pairs, and\n   two physical links between B
      and C, also over distinct interface\n   pairs.\n                                                                 +--{9}\n
      \        __________ __________                            +------|\n        |
      \         |          |                 +-----+   |      +--{10}\n      {1,2}
      \     {5,6}      {9,10}       {1,2}--|{5,6}|---+\n        |          |          |
      \                |{7,8}|   |      +--{11}\n     +--'--+    +--'--+    +-----+
      \             +-----+   +------|\n     |  A  |    |  B  |    |  C  |                               +--{12}\n
      \    +-----+    +-----+    +-----+\n        |          |          |                                  +--{9}\n
      \       |          |          |                 +-----+   +------|\n        |
      \         |          |                 |{5,6}|   |      +--{10}\n      {3,4}
      \     {7,8}     {11,12}       {3,4}--|{7,8}|---+\n        |__________|__________|
      \                +-----+   |      +--{11}\n                                                          +------|\n
      \                                                                +--{12}\n     Figure
      21: Dual Addresses, with All Routers Having Two Interfaces\n           (Left)
      and Corresponding NHDP Representation (Right)\n   This example is the combination
      of all the preceding examples in this\n   appendix.  The Local Information Set
      in A contains Local Information\n   Tuples for each of its interfaces, and each
      Interface Information\n   Base contains in its Link Set a representation of
      links {1,2}-{5,6}\n   or {3,4}-{7,8}, respectively.  The Neighbor Set (in the
      Neighbor\n   Information Base) records the existence of router B and all of
      its\n   addresses on all its interfaces, i.e., {5,6,7,8}.\n   As in Example
      9, each interface address of router C is represented in\n   the 2-Hop Set of
      each Interface Information Base as a link from\n   router B to each of these
      addresses.  Router A does not have\n   information describing which of router
      B's interfaces is connected to\n   which interface of C, nor that the addresses
      {9}, {10}, {11}, and\n   {12} are addresses of the same router (or that some
      of these, such as\n   {9} and {10}, are addresses on the same interface of the
      router).\n"
    title: 'F.10.  Example 10: Dual Addressed Dual Interfaces on All Routers'
  - contents:
    - "F.11.  Example 11: Single Addressed Dual Interface Locally\n   In Figure 22,
      all routers have a single interface, except for router\n   A which has two.
      \ Each of A's two interfaces has a link with the\n   single interface of router
      B.  All interfaces have a single address.\n         __________ __________\n
      \       |     _____|          |\n       {1}   |    {2}        {3}             {1}--------{2}---------{3}\n
      \       |    |     |          |\n     +--'--+ |  +--'--+    +-----+\n     |
      \ A  | |  |  B  |    |  C  |\n     +-----+ |  +-----+    +-----+\n        |
      \   |\n       {6}   |                               {6}--------{2}---------{3}\n
      \       |____|\n      Figure 22: Single Addresses, with A Having Two Interfaces,
      Both\n    Linked to the Single Interface of B (Left), and Corresponding NHDP\n
      \                         Representation (Right)\n   This is similar to Example
      8, except that the single address {2} also\n   replaces the address {5}.  In
      particular, both Link Tuples (one in\n   each Link Set, each in its corresponding
      Interface Information Base)\n   have L_neighbor_iface_addr_list being {2}, the
      Neighbor Set (in the\n   Neighbor Information Base) contains a single Neighbor
      Tuple with\n   N_neighbor_addr_list being {2}, and both 2-Hop Tuples (one in
      each\n   2-Hop Set, each in its corresponding Interface Information Base) have\n
      \  N2_neighbor_iface_addr_list being {2} and N2_2hop_addr being {3}.\n"
    title: 'F.11.  Example 11: Single Addressed Dual Interface Locally'
  title: Appendix F.  Topology Pictures
- contents:
  - "Authors' Addresses\n   Thomas Heide Clausen\n   LIX, Ecole Polytechnique\n   Phone:
    +33 6 6058 9349\n   EMail: T.Clausen@computer.org\n   URI:   http://www.ThomasClausen.org/\n
    \  Christopher Dearlove\n   BAE Systems ATC\n   Phone: +44 1245 242194\n   EMail:
    chris.dearlove@baesystems.com\n   URI:   http://www.baesystems.com/\n   Justin
    W. Dean\n   Naval Research Laboratory\n   Phone: +1 202 767 3397\n   EMail: jdean@itd.nrl.navy.mil\n
    \  URI:   http://pf.itd.nrl.navy.mil/\n"
  title: Authors' Addresses
