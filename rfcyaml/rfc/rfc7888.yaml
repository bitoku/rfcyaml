- contents:
  - '                    IMAP4 Non-synchronizing Literals

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Internet Message Access Protocol (RFC 3501) contains the\n   \"literal\"
    syntactic construct for communicating strings.  When\n   sending a literal from
    client to server, IMAP requires the client to\n   wait for the server to send
    a command continuation request between\n   sending the octet count and the string
    data.  This document specifies\n   an alternate form of literal that does not
    require this network round\n   trip.\n   This document specifies 2 IMAP extensions:
    LITERAL+ and LITERAL-.\n   LITERAL+ allows the alternate form of literals in all
    IMAP commands.\n   LITERAL- is the same as LITERAL+, but it disallows the alternate
    form\n   of literals unless they are 4096 bytes or less.\n   This document obsoletes
    RFC 2088.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7888.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Specification . . . . . . . . . . . . . . . . . . . . . . .
    .   3\n   4.  Considerations on When to Use and Not to Use Synchronizing\n       Literals
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n   5.  LITERAL- Capability
    . . . . . . . . . . . . . . . . . . . . .   5\n   6.  Interaction with BINARY
    Extension . . . . . . . . . . . . . .   6\n   7.  Interaction with MULTIAPPEND
    Extension  . . . . . . . . . . .   6\n   8.  Formal Syntax . . . . . . . . . .
    . . . . . . . . . . . . . .   6\n   9.  Security Considerations . . . . . . .
    . . . . . . . . . . . .   7\n   10. IANA Considerations . . . . . . . . . . .
    . . . . . . . . . .   7\n   11. References  . . . . . . . . . . . . . . . . .
    . . . . . . . .   7\n     11.1.  Normative References . . . . . . . . . . . .
    . . . . . .   7\n     11.2.  Informative References . . . . . . . . . . . . .
    . . . .   8\n   Appendix A.  Changes since RFC 2088 . . . . . . . . . . . . .
    . .   9\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .
    \  9\n   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Internet Message Access Protocol [RFC3501] contains
    the \"literal\"\n   syntactic construct for communicating strings.  When sending
    a\n   literal from client to server, IMAP requires the client to wait for\n   the
    server to send a command continuation request between sending the\n   octet count
    and the string data.  This document specifies an\n   alternate form of literal
    that does not require this network round\n   trip.\n   This document specifies
    2 IMAP extensions: LITERAL+ and LITERAL-.\n   LITERAL+ allows the alternate form
    of literals (called \"non-\n   synchronized literals\" below) in all IMAP commands.
    \ LITERAL- is the\n   same as LITERAL+, but it disallows the alternate form of
    literals\n   unless they are 4096 bytes or less.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   In examples,
    \"C:\" and \"S:\" indicate lines sent by the client and\n   server, respectively.
    \ If a single \"C:\" or \"S:\" label applies to\n   multiple lines, then the line
    breaks between those lines are for\n   editorial clarity only and are not part
    of the actual protocol\n   exchange.\n"
  title: 2.  Conventions
- contents:
  - "3.  Specification\n   The non-synchronizing literal is added as an alternate
    form of\n   literal, and it may appear in communication from client to server\n
    \  instead of the IMAP [RFC3501] form of literal.  The IMAP form of\n   literal,
    used in communication from client to server, is referred to\n   as a synchronizing
    literal.  The non-synchronizing literal form MUST\n   NOT be sent from server
    to client.\n   Non-synchronizing literals may be used with any IMAP server\n   implementation
    that returns \"LITERAL+\" or \"LITERAL-\" as one of the\n   supported capabilities
    to the CAPABILITY command.  If the server does\n   not advertise either of the
    above capabilities, the client can only\n   use synchronizing literals.  The difference
    between LITERAL+ and\n   LITERAL- extensions is explained in Section 5.\n   The
    non-synchronizing literal is distinguished from the original\n   synchronizing
    literal by having a plus ('+') between the octet count\n   and the closing brace
    ('}').  The server does not generate a command\n   continuation request in response
    to a non-synchronizing literal, and\n   clients are not required to wait before
    sending the octets of a non-\n   synchronizing literal.\n   The protocol receiver
    of an IMAP server MUST check the end of every\n   received line (a sequence of
    octets that ends with a CRLF) for an\n   open brace ('{') followed by an octet
    count, a plus ('+'), and a\n   close brace ('}') immediately preceding the CRLF.
    \ This sequence (if\n   found by the receiver) is the octet count of a non-synchronizing\n
    \  literal, and the server MUST treat the specified number of following\n   octets
    and the following line (as defined in [RFC3501]) as part of\n   the same command.\n
    \  It's important to note that the literal is not delimited by CRLF.  It\n   ends
    after the number of bytes specified by the octet count, and the\n   current command
    continues from there.  There might be a CRLF\n   immediately after; it ends the
    command.  Or, there might be more\n   octets, specifying other command parameters,
    before the CRLF.  If a\n   SP (space) character is needed between parameters,
    it's important\n   that the SP appear after the literal, in its appropriate place.\n
    \  A server MAY still process commands and reject errors on a line-by-\n   line
    basis, as long as it checks for non-synchronizing literals at\n   the end of each
    line.\n   Example:\n   C: A001 LOGIN {11+}\n   C: FRED FOOBAR {7+}\n   C: fat
    man\n   S: A001 OK LOGIN completed\n   This is semantically equivalent to this
    version that uses quoted\n   strings instead of literals:\n   C: A001 LOGIN \"FRED
    FOOBAR\" \"fat man\"\n   S: A001 OK LOGIN completed\n   Note that the space after
    FOOBAR in the first version corresponds\n   to the space between the two quoted
    strings in the second.\n"
  title: 3.  Specification
- contents:
  - "4.  Considerations on When to Use and Not to Use Synchronizing Literals\n   Understanding
    of this section is important for both client and server\n   developers of this
    IMAP extension.\n   While non-synchronizing literals have clear advantages for
    clients,\n   such as simplicity of use, they might be more difficult to handle
    on\n   the server side.  When a client uses a non-synchronizing literal that\n
    \  is too big for the server to accept, a server implementation that is\n   compliant
    with LITERAL+ has to make a choice between a couple non-\n   optimal choices:\n
    \  1.  Read the number of bytes specified in the non-synchronizing\n       literal
    and reject the command that included the literal anyway.\n       (The server is
    allowed to send the tagged BAD/NO response before\n       reading the whole non-synchronizing
    literal.)  This is quite\n       wasteful of bandwidth if the literal is large.\n
    \  2.  Send an untagged BYE response explaining the reason for rejecting\n       the
    literal (possibly accompanied by an ALERT response code in\n       another response)
    and close the connection.  This will force the\n       client to reconnect or
    report the error to the user.  In the\n       latter case, the error is unlikely
    to be understandable to the\n       user.  Additionally, some naive clients are
    known to blindly\n       reconnect in this case and repeat the operation that
    caused the\n       problem, introducing an infinite loop.\n   The problem described
    above is most common when using the APPEND\n   command, because most commands
    don't need to send lots of data from\n   the client to the server.  Some server
    implementations impose limits\n   on literals (both synchronizing and non-synchronizing)
    accepted from\n   clients in order to defend against denial-of-service attacks.\n
    \  Implementations can generally impose much lower limits on literal\n   sizes
    for all commands other than APPEND.  In order to address\n   literal size issue
    in APPEND, this document introduces a new\n   extension LITERAL-, described in
    Section 5.\n   The situation can also be improved by implementing support for
    the\n   APPENDLIMIT extension [RFC7889], which allows a server to advertise\n
    \  its APPEND limit, so that well-behaved clients can check it and avoid\n   uploading
    big messages in the first place.\n"
  title: 4.  Considerations on When to Use and Not to Use Synchronizing Literals
- contents:
  - "5.  LITERAL- Capability\n   The LITERAL- extension is almost identical to LITERAL+,
    with one\n   exception: when LITERAL- is advertised, non-synchronizing literals\n
    \  used in any command MUST NOT be larger than 4096 bytes.  Any literal\n   larger
    than 4096 bytes MUST be sent as a synchronizing literal as\n   specified in RFC
    3501.  A server that is compliant with LITERAL- and\n   encounters a non-synchronizing
    literal larger than 4096 bytes\n   proceeds as described in Section 4.  If responding
    to an APPEND\n   command, the tagged BAD response MUST contain the TOOBIG response\n
    \  code [RFC4469].  If responding with an untagged BYE response, it\n   SHOULD
    include the TOOBIG response code.  Note that the form of the\n   non-synchronizing
    literal does not change: it still uses the \"+\" in\n   the literal itself, even
    if the applicable extension is LITERAL-.\n   Because LITERAL- is a more restricted
    version of LITERAL+, IMAP\n   servers MUST NOT advertise both of these capabilities
    at the same\n   time.  (A server implementation can choose to have a configuration\n
    \  option to indicate which one to advertise.)\n"
  title: 5.  LITERAL- Capability
- contents:
  - "6.  Interaction with BINARY Extension\n   [RFC4466] updated the non-terminal
    \"literal8\" defined in [RFC3516] to\n   allow for non-synchronizing literals
    if both BINARY [RFC3516] and\n   LITERAL+ extensions are supported by the server.\n
    \  This document also allows use of this extended \"literal8\" syntax when\n   both
    BINARY [RFC3516] and LITERAL- extensions are supported by the\n   server.\n"
  title: 6.  Interaction with BINARY Extension
- contents:
  - "7.  Interaction with MULTIAPPEND Extension\n   [RFC3502] describes MULTIAPPEND
    extension and how it can be used with\n   LITERAL+.  The LITERAL- extension can
    be used with the MULTIAPPEND\n   extension in the same way.\n"
  title: 7.  Interaction with MULTIAPPEND Extension
- contents:
  - "8.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n
    \  Form (ABNF) notation as specified in [ABNF].\n   Non-terminals referenced but
    not defined below are as defined by\n   [RFC3501].\n     literal = \"{\" number
    [\"+\"] \"}\" CRLF *CHAR8\n                ; Number represents the number of CHAR8
    octets\n     CHAR8   = <defined in RFC 3501>\n     literal8 = <defined in RFC
    4466>\n"
  title: 8.  Formal Syntax
- contents:
  - "9.  Security Considerations\n   Use of non-synchronizing literals can consume
    extra resources (e.g.\n   memory) on IMAP servers and can be used for denial-of-service\n
    \  attacks.  The LITERAL- extension partially improved this situation.\n   This
    document doesn't raise any security concerns beyond those raised\n   by [RFC3501].\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   IMAP4 capabilities are registered by publishing
    a Standards Track or\n   IESG-approved Experimental RFC.  The registry is currently
    located at\n   <http://www.iana.org/assignments/imap-capabilities>.\n   IANA has
    updated the above registry so that the reference for\n   \"LITERAL+\" points to
    this document.\n   IANA has added the \"LITERAL-\" capability to the above registry,
    with\n   this document as the reference.\n"
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [ABNF]     Crocker, D., Ed. and P. Overell,
      \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC
      5234,\n              DOI 10.17487/RFC5234, January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3501]  Crispin,
      M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC
      3501, DOI 10.17487/RFC3501, March 2003,\n              <http://www.rfc-editor.org/info/rfc3501>.\n
      \  [RFC3516]  Nerenberg, L., \"IMAP4 Binary Content Extension\", RFC 3516,\n
      \             DOI 10.17487/RFC3516, April 2003,\n              <http://www.rfc-editor.org/info/rfc3516>.\n
      \  [RFC4466]  Melnikov, A. and C. Daboo, \"Collected Extensions to IMAP4\n              ABNF\",
      RFC 4466, DOI 10.17487/RFC4466, April 2006,\n              <http://www.rfc-editor.org/info/rfc4466>.\n
      \  [RFC4469]  Resnick, P., \"Internet Message Access Protocol (IMAP)\n              CATENATE
      Extension\", RFC 4469, DOI 10.17487/RFC4469, April\n              2006, <http://www.rfc-editor.org/info/rfc4469>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC3502]  Crispin, M., \"Internet Message
      Access Protocol (IMAP) -\n              MULTIAPPEND Extension\", RFC 3502, DOI
      10.17487/RFC3502,\n              March 2003, <http://www.rfc-editor.org/info/rfc3502>.\n
      \  [RFC7889]  SrimushnamBoovaraghamoorthy, J. and N. Bisht, \"The IMAP\n              APPENDLIMIT
      Extension\", RFC 7889, DOI 10.17487/RFC7889,\n              May 2016, <http://www.rfc-editor.org/info/rfc7889>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Changes since RFC 2088\n   Added IANA registration.\n   Updated
    references.  Also updated considerations about interactions\n   of IMAP extensions.\n
    \  Added implementation considerations based on the IMAP mailing list\n   discussions.\n
    \  Added description of a new capability: LITERAL-.\n"
  title: Appendix A.  Changes since RFC 2088
- contents:
  - "Acknowledgments\n   John G. Myers edited the original LITERAL+ extension.\n   Valuable
    comments, both in agreement and in dissent, were received\n   from Dave Cridland,
    Michael M. Slusarz, Arnt Gulbrandsen, Jayantheesh\n   SrimushnamBoovaraghamoorthy,
    Jamie Nicolson, Barry Leiba, and SM.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Alexey Melnikov (editor)\n   Isode Ltd\n   14 Castle Mews\n
    \  Hampton, Middlesex  TW12 2NP\n   United Kingdom\n   Email: Alexey.Melnikov@isode.com\n"
  title: Author's Address
