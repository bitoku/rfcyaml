- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                    O. Garcia-Morchon
  contents:
  - "Internet Research Task Force (IRTF)                    O. Garcia-Morchon\n  \
    \ Internet of Things (IoT) Security: State of the Art and Challenges\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet of Things (IoT) concept refers to the usage of standard\n\
    \   Internet protocols to allow for human-to-thing and thing-to-thing\n   communication.\
    \  The security needs for IoT systems are well\n   recognized, and many standardization\
    \ steps to provide security have\n   been taken -- for example, the specification\
    \ of the Constrained\n   Application Protocol (CoAP) secured with Datagram Transport\
    \ Layer\n   Security (DTLS).  However, security challenges still exist, not only\n\
    \   because there are some use cases that lack a suitable solution, but\n   also\
    \ because many IoT devices and systems have been designed and\n   deployed with\
    \ very limited security capabilities.  In this document,\n   we first discuss\
    \ the various stages in the lifecycle of a thing.\n   Next, we document the security\
    \ threats to a thing and the challenges\n   that one might face to protect against\
    \ these threats.  Lastly, we\n   discuss the next steps needed to facilitate the\
    \ deployment of secure\n   IoT systems.  This document can be used by implementers\
    \ and authors\n   of IoT specifications as a reference for details about security\n\
    \   considerations while documenting their specific security challenges,\n   threat\
    \ models, and mitigations.\n   This document is a product of the IRTF Thing-to-Thing\
    \ Research Group\n   (T2TRG).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  Documents approved for publication\
    \ by the IRSG are not\n   candidates for any level of Internet Standard; see Section\
    \ 2 of RFC\n   7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8576.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  The Thing Lifecycle . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Security Threats and Managing Risk  . . . . . . . . . .\
    \ . . .   8\n   4.  State of the Art  . . . . . . . . . . . . . . . . . . . .\
    \ . .  13\n     4.1.  IP-Based IoT Protocols and Standards  . . . . . . . . .\
    \ .  13\n     4.2.  Existing IP-Based Security Protocols and Solutions  . . .\
    \  16\n     4.3.  IoT Security Guidelines . . . . . . . . . . . . . . . . .  18\n\
    \   5.  Challenges for a Secure IoT . . . . . . . . . . . . . . . . .  21\n  \
    \   5.1.  Constraints and Heterogeneous Communication . . . . . . .  21\n    \
    \   5.1.1.  Resource Constraints  . . . . . . . . . . . . . . . .  21\n      \
    \ 5.1.2.  Denial-of-Service Resistance  . . . . . . . . . . . .  22\n       5.1.3.\
    \  End-to-End Security, Protocol Translation, and the\n               Role of\
    \ Middleboxes . . . . . . . . . . . . . . . . .  23\n       5.1.4.  New Network\
    \ Architectures and Paradigm  . . . . . . .  25\n     5.2.  Bootstrapping of a\
    \ Security Domain  . . . . . . . . . . .  25\n     5.3.  Operational Challenges\
    \  . . . . . . . . . . . . . . . . .  25\n       5.3.1.  Group Membership and\
    \ Security . . . . . . . . . . . .  26\n       5.3.2.  Mobility and IP Network\
    \ Dynamics  . . . . . . . . . .  27\n     5.4.  Secure Software Update and Cryptographic\
    \ Agility  . . . .  27\n     5.5.  End-of-Life . . . . . . . . . . . . . . . .\
    \ . . . . . . .  30\n     5.6.  Verifying Device Behavior . . . . . . . . . .\
    \ . . . . . .  30\n     5.7.  Testing: Bug Hunting and Vulnerabilities  . . .\
    \ . . . . .  31\n     5.8.  Quantum-Resistance  . . . . . . . . . . . . . . .\
    \ . . . .  32\n     5.9.  Privacy Protection  . . . . . . . . . . . . . . . .\
    \ . . .  33\n     5.10. Reverse-Engineering Considerations  . . . . . . . . .\
    \ . .  34\n     5.11. Trustworthy IoT Operation . . . . . . . . . . . . . . .\
    \ .  35\n   6.  Conclusions and Next Steps  . . . . . . . . . . . . . . . . .\
    \  36\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  36\n\
    \   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  36\n  \
    \ 9.  Informative References  . . . . . . . . . . . . . . . . . . .  37\n   Acknowledgments\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  50\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  50\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet of Things (IoT) denotes the interconnection\
    \ of highly\n   heterogeneous networked entities and networks that follow a number\
    \ of\n   different communication patterns, such as: human-to-human (H2H),\n  \
    \ human-to-thing (H2T), thing-to-thing (T2T), or thing-to-things\n   (T2Ts). \
    \ The term \"IoT\" was first coined in 1999 by the Auto-ID\n   center [AUTO-ID],\
    \ which had envisioned a world where every physical\n   object has a radio-frequency\
    \ identification (RFID) tag with a\n   globally unique identifier.  This would\
    \ not only allow tracking of\n   objects in real time but also allow querying\
    \ of data about them over\n   the Internet.  However, since then, the meaning\
    \ of the Internet of\n   Things has expanded and now encompasses a wide variety\
    \ of\n   technologies, objects, and protocols.  It is not surprising that the\n\
    \   IoT has received significant attention from the research community to\n  \
    \ (re)design, apply, and use standard Internet technology and protocols\n   for\
    \ the IoT.\n   The things that are part of the Internet of Things are computing\n\
    \   devices that understand and react to the environment they reside in.\n   These\
    \ things are also often referred to as smart objects or smart\n   devices.  The\
    \ introduction of IPv6 [RFC6568] and CoAP [RFC7252] as\n   fundamental building\
    \ blocks for IoT applications allows connecting\n   IoT hosts to the Internet.\
    \  This brings several advantages,\n   including: (i) a homogeneous protocol ecosystem\
    \ that allows simple\n   integration with other Internet hosts; (ii) simplified\
    \ development\n   for devices that significantly vary in their capabilities; (iii)\
    \ a\n   unified interface for applications, removing the need for\n   application-level\
    \ proxies.  These building blocks greatly simplify\n   the deployment of the envisioned\
    \ scenarios, which range from building\n   automation to production environments\
    \ and personal area networks.\n   This document presents an overview of important\
    \ security aspects for\n   the Internet of Things.  We begin by discussing the\
    \ lifecycle of a\n   thing in Section 2.  In Section 3, we discuss security threats\
    \ for\n   the IoT and methodologies for managing these threats when designing\
    \ a\n   secure system.  Section 4 reviews existing IP-based (security)\n   protocols\
    \ for the IoT and briefly summarizes existing guidelines and\n   regulations.\
    \  Section 5 identifies remaining challenges for a secure\n   IoT and discusses\
    \ potential solutions.  Section 6 includes final\n   remarks and conclusions.\
    \  This document can be used by IoT standards\n   specifications as a reference\
    \ for details about security\n   considerations that apply to the specified system\
    \ or protocol.\n   The first draft version of this document was submitted in March\
    \ 2011.\n   Initial draft versions of this document were presented and discussed\n\
    \   during the meetings of the Constrained RESTful Environments (CORE)\n   Working\
    \ Group at IETF 80 and later.  Discussions on security\n   lifecycle at IETF 92\
    \ (March 2015) evolved into more general security\n   considerations.  Thus, the\
    \ draft was selected to address the T2TRG\n   work item on the security considerations\
    \ and challenges for the\n   Internet of Things.  Further updates of the draft\
    \ were presented and\n   discussed during the T2TRG meetings at IETF 96 (July\
    \ 2016) and IETF\n   97 (November 2016) and at the joint interim meeting in Amsterdam\n\
    \   (March 2017).  This document has been reviewed by, commented on, and\n   discussed\
    \ extensively for a period of nearly six years by a vast\n   majority of the T2TRG\
    \ and related group members, the number of which\n   certainly exceeds 100 individuals.\
    \  It is the consensus of T2TRG that\n   the security considerations described\
    \ in this document should be\n   published in the IRTF Stream of the RFC series.\
    \  This document does\n   not constitute a standard.\n"
- title: 2.  The Thing Lifecycle
  contents:
  - "2.  The Thing Lifecycle\n   The lifecycle of a thing refers to the operational\
    \ phases of a thing\n   in the context of a given application or use case.  Figure\
    \ 1 shows\n   the generic phases of the lifecycle of a thing.  This generic\n\
    \   lifecycle is applicable to very different IoT applications and\n   scenarios.\
    \  For instance, [RFC7744] provides an overview of relevant\n   IoT use cases.\n\
    \   In this document, we consider a Building Automation and Control (BAC)\n  \
    \ system to illustrate the lifecycle and the meaning of these different\n   phases.\
    \  A BAC system consists of a network of interconnected nodes\n   that performs\
    \ various functions in the domains of Heating,\n   Ventilating, and Air Conditioning\
    \ (HVAC), lighting, safety, etc.  The\n   nodes vary in functionality, and a large\
    \ majority of them represent\n   resource-constrained devices such as sensors\
    \ and luminaries.  Some\n   devices may be battery operated or may rely on energy\
    \ harvesting.\n   This requires us to also consider devices that sleep during\
    \ their\n   operation to save energy.  In our BAC scenario, the life of a thing\n\
    \   starts when it is manufactured.  Due to the different application\n   areas\
    \ (i.e., HVAC, lighting, or safety), nodes/things are tailored to\n   a specific\
    \ task.  It is therefore unlikely that one single\n   manufacturer will create\
    \ all nodes in a building.  Hence,\n   interoperability as well as trust bootstrapping\
    \ between nodes of\n   different vendors is important.\n   The thing is later\
    \ installed and commissioned within a network by an\n   installer during the bootstrapping\
    \ phase.  Specifically, the device\n   identity and the secret keys used during\
    \ normal operation may be\n   provided to the device during this phase.  Different\
    \ subcontractors\n   may install different IoT devices for different purposes.\n\
    \   Furthermore, the installation and bootstrapping procedures may not be\n  \
    \ a discrete event and may stretch over an extended period.  After\n   being bootstrapped,\
    \ the device and the system of things are in\n   operational mode and execute\
    \ the functions of the BAC system.  During\n   this operational phase, the device\
    \ is under the control of the system\n   owner and used by multiple system users.\
    \  For devices with lifetimes\n   spanning several years, occasional maintenance\
    \ cycles may be\n   required.  During each maintenance phase, the software on\
    \ the device\n   can be upgraded, or applications running on the device can be\n\
    \   reconfigured.  The maintenance tasks can be performed either locally\n   or\
    \ from a backend system.  Depending on the operational changes to\n   the device,\
    \ it may be required to rebootstrap at the end of a\n   maintenance cycle.  The\
    \ device continues to loop through the\n   operational phase and the eventual\
    \ maintenance phases until the\n   device is decommissioned at the end of its\
    \ lifecycle.  However, the\n   end-of-life of a device does not necessarily mean\
    \ that it is\n   defective; rather, it denotes a need to replace and upgrade the\n\
    \   network to next-generation devices for additional functionality.\n   Therefore,\
    \ the device can be removed and recommissioned to be used in\n   a different system\
    \ under a different owner, thereby starting the\n   lifecycle all over again.\n\
    \   We note that the presented lifecycle represents to some extent a\n   simplified\
    \ model.  For instance, it is possible to argue that the\n   lifecycle does not\
    \ start when a tangible device is manufactured but\n   rather when the oldest\
    \ bit of code that ends up in the device --\n   maybe from an open-source project\
    \ or the operating system -- was\n   written.  Similarly, the lifecycle could\
    \ also include an on-the-shelf\n   phase where the device is in the supply chain\
    \ before an owner/user\n   purchases and installs it.  Another phase could involve\
    \ the device\n   being rebadged by some vendor who is not the original manufacturer.\n\
    \   Such phases can significantly complicate other phases such as\n   maintenance\
    \ and bootstrapping.  Finally, other potential end states\n   can be, e.g., a\
    \ vendor that no longer supports a device type because\n   it is at the end of\
    \ its life or a situation in which a device is\n   simply forgotten but remains\
    \ functional.\n    _Manufactured           _SW update          _Decommissioned\n\
    \   /                       /                   /\n   |   _Installed         \
    \ |   _ Application   |   _Removed &\n   |  /                    |  / reconfigured\
    \   |  /  replaced\n   |  |   _Commissioned    |  |                |  |\n   |\
    \  |  /                 |  |                |  |   _Reownership &\n   |  |  |\
    \    _Application |  |   _Application |  |  / recommissioned\n   |  |  |   / \
    \  running   |  |  / running     |  |  |\n   |  |  |   |             |  |  | \
    \            |  |  |             \\\\\n   +##+##+###+#############+##+##+#############+##+##+##############>>>\n\
    \       \\/  \\______________/ \\/  \\_____________/ \\___/         time //\n\
    \       /           /         \\          \\          \\\n   Bootstrapping  /\
    \      Maintenance &   \\     Maintenance &\n                 /      rebootstrapping\
    \   \\   rebootstrapping\n           Operational                Operational\n\
    \       Figure 1: The Lifecycle of a Thing in the Internet of Things\n   Security\
    \ is a key requirement in any communication system.  However,\n   security is\
    \ an even more critical requirement in real-world IoT\n   deployments for several\
    \ reasons.  First, compromised IoT systems can\n   not only endanger the privacy\
    \ and security of a user but can also\n   cause physical harm.  This is because\
    \ IoT systems often comprise\n   sensors, actuators, and other connected devices\
    \ in the physical\n   environment of the user that could adversely affect the\
    \ user if they\n   are compromised.  Second, a vulnerable IoT system means that\
    \ an\n   attacker can alter the functionality of a device from a given\n   manufacturer.\
    \  This not only affects the manufacturer's brand image\n   but can also leak\
    \ information that is very valuable for the\n   manufacturer (such as proprietary\
    \ algorithms).  Third, the impact of\n   attacking an IoT system goes beyond a\
    \ specific device or an isolated\n   system, since compromised IoT systems can\
    \ be misused at scale.  For\n   example, they may be used to perform a Distributed\
    \ Denial of Service\n   (DDoS) attack that limits the availability of other networks\
    \ and\n   services.  The fact that many IoT systems rely on standard IP\n   protocols\
    \ allows for easier system integration, but this also makes\n   attacks on standard\
    \ IP protocols widely applicable in other\n   environments.  This results in new\
    \ requirements regarding the\n   implementation of security.\n   The term \"security\"\
    \ subsumes a wide range of primitives, protocols,\n   and procedures.  For instance,\
    \ it includes services such as\n   confidentiality, authentication, integrity,\
    \ authorization, source\n   authentication, and availability.  It often also includes\
    \ augmented\n   services such as duplicate detection and detection of stale packets\n\
    \   (timeliness).  These security services can be implemented through a\n   combination\
    \ of cryptographic mechanisms such as block ciphers, hash\n   functions, and signature\
    \ algorithms, as well as noncryptographic\n   mechanisms that implement authorization\
    \ and other aspects of\n   security-policy enforcement.  For ensuring security\
    \ in IoT networks,\n   one should not only focus on the required security services\
    \ but also\n   pay special attention to how the services are realized in the overall\n\
    \   system.\n"
- title: 3.  Security Threats and Managing Risk
  contents:
  - "3.  Security Threats and Managing Risk\n   Security threats in related IP protocols\
    \ have been analyzed in\n   multiple documents, including Hypertext Transfer Protocol\
    \ (HTTP) over\n   Transport Layer Security (TLS) (HTTPS) [RFC2818], Constrained\n\
    \   Application Protocol (CoAP) [RFC7252], IPv6 over Low-Power Wireless\n   Personal\
    \ Area Networks (6LoWPAN) [RFC4919], Access Node Control\n   Protocol (ANCP) [RFC5713],\
    \ Domain Name System (DNS) [RFC3833], IPv6\n   Neighbor Discovery (ND) [RFC3756],\
    \ and Protocol for Carrying\n   Authentication and Network Access (PANA) [RFC4016].\
    \  In this section,\n   we specifically discuss the threats that could compromise\
    \ an\n   individual thing or the network as a whole.  Some of these threats\n\
    \   might go beyond the scope of Internet protocols, but we gather them\n   here\
    \ for the sake of completeness.  The threats in the following list\n   are not\
    \ in any particular order, and some threats might be more\n   critical than others,\
    \ depending on the deployment scenario under\n   consideration:\n   1.   Vulnerable\
    \ software/code: Things in the Internet of Things rely\n        on software that\
    \ might contain severe bugs and/or bad design\n        choices.  This makes the\
    \ things vulnerable to many different\n        types of attacks, depending on\
    \ the criticality of the bugs,\n        e.g., buffer overflows or lack of authentication.\
    \  This can be\n        considered one of the most important security threats.\
    \  The\n        large-scale Distributed Denial of Service (DDoS) attack,\n   \
    \     popularly known as the Mirai botnet [Mirai], was caused by\n        things\
    \ that had well-known or easy-to-guess passwords for\n        configuration.\n\
    \   2.   Privacy threat: The tracking of a thing's location and usage may\n  \
    \      pose a privacy risk to people around it.  For instance, an\n        attacker\
    \ can infer privacy-sensitive information from the data\n        gathered and\
    \ communicated by individual things.  Such\n        information may subsequently\
    \ be sold to interested parties for\n        marketing purposes and targeted advertising.\
    \  In extreme cases,\n        such information might be used to track dissidents\
    \ in oppressive\n        regimes.  Unlawful surveillance and interception of traffic\
    \ to/\n        from a thing by intelligence agencies is also a privacy threat.\n\
    \   3.   Cloning of things: During the manufacturing process of a thing,\n   \
    \     an untrusted factory can easily clone the physical\n        characteristics,\
    \ firmware/software, or security configuration of\n        the thing.  Deployed\
    \ things might also be compromised and their\n        software reverse engineered,\
    \ allowing for cloning or software\n        modifications.  Such a cloned thing\
    \ may be sold at a cheaper\n        price in the market and yet can function normally\
    \ as a genuine\n        thing.  For example, two cloned devices can still be associated\n\
    \        and work with each other.  In the worst-case scenario, a cloned\n   \
    \     device can be used to control a genuine device or perform an\n        attack.\
    \  One should note here that an untrusted factory may also\n        change functionality\
    \ of the cloned thing, resulting in degraded\n        functionality with respect\
    \ to the genuine thing (thereby\n        inflicting potential damage to the reputation\
    \ of the original\n        thing manufacturer).  Moreover, additional functionality\
    \ can be\n        introduced in the cloned thing.  An example of such\n      \
    \  functionality is a backdoor.\n   4.   Malicious substitution of things: During\
    \ the installation of a\n        thing, a genuine thing may be replaced by a similar\
    \ variant (of\n        lower quality) without being detected.  The main motivation\
    \ may\n        be cost savings, where the installation of lower-quality things\n\
    \        (for example, noncertified products) may significantly reduce\n     \
    \   the installation and operational costs.  The installers can\n        subsequently\
    \ resell the genuine things to gain further financial\n        benefits.  Another\
    \ motivation may be to inflict damage to the\n        reputation of a competitor's\
    \ offerings.\n   5.   Eavesdropping attack: During the commissioning of a thing\
    \ into a\n        network, it may be susceptible to eavesdropping, especially\
    \ if\n        operational keying materials, security parameters, or\n        configuration\
    \ settings are exchanged in the clear using a\n        wireless medium or if used\
    \ cryptographic algorithms are not\n        suitable for the envisioned lifetime\
    \ of the device and the\n        system.  After obtaining the keying material,\
    \ the attacker might\n        be able to recover the secret keys established between\
    \ the\n        communicating entities, thereby compromising the authenticity\n\
    \        and confidentiality of the communication channel, as well as the\n  \
    \      authenticity of commands and other traffic exchanged over this\n      \
    \  communication channel.  When the network is in operation, T2T\n        communication\
    \ can be eavesdropped if the communication channel\n        is not sufficiently\
    \ protected or if a session key is compromised\n        due to protocol weaknesses.\
    \  An adversary may also be able to\n        eavesdrop if keys are not renewed\
    \ or updated appropriately.\n        Lastly, messages can also be recorded and\
    \ decrypted offline at a\n        later point of time.  The VENONA project [venona-project]\
    \ is one\n        such example where messages were recorded for offline\n    \
    \    decryption.\n   6.   Man-in-the-middle attack: Both the commissioning and\
    \ operational\n        phases may be vulnerable to man-in-the-middle attacks.\
    \  For\n        example, when keying material between communicating entities is\n\
    \        exchanged in the clear, the security of the key establishment\n     \
    \   protocol depends on the tacit assumption that no third party can\n       \
    \ eavesdrop during the execution of this protocol.  Additionally,\n        device\
    \ authentication or device authorization may be nontrivial\n        or need the\
    \ support of a human decision process, since things\n        usually do not have\
    \ a priori knowledge about each other and\n        cannot always differentiate\
    \ friends and foes via completely\n        automated mechanisms.\n   7.   Firmware\
    \ attacks: When a thing is in operation or maintenance\n        phase, its firmware\
    \ or software may be updated to allow for new\n        functionality or new features.\
    \  An attacker may be able to\n        exploit such a firmware upgrade by maliciously\
    \ replacing the\n        thing's firmware, thereby influencing its operational\
    \ behavior.\n        For example, an attacker could add a piece of malicious code\
    \ to\n        the firmware that will cause it to periodically report the\n   \
    \     energy usage of the thing to a data repository for analysis.\n        The\
    \ attacker can then use this information to determine when a\n        home or\
    \ enterprise (where the thing is installed) is unoccupied\n        and break in.\
    \  Similarly, devices whose software has not been\n        properly maintained\
    \ and updated might contain vulnerabilities\n        that might be exploited by\
    \ attackers to replace the firmware on\n        the device.\n   8.   Extraction\
    \ of private information: IoT devices (such as sensors,\n        actuators, etc.)\
    \ are often physically unprotected in their\n        ambient environment, and\
    \ they could easily be captured by an\n        attacker.  An attacker with physical\
    \ access may then attempt to\n        extract private information such as keys\
    \ (for example, a group\n        key or the device's private key), data from sensors\
    \ (for\n        example, healthcare status of a user), configuration parameters\n\
    \        (for example, the Wi-Fi key), or proprietary algorithms (for\n      \
    \  example, the algorithm performing some data analytics task).\n        Even\
    \ when the data originating from a thing is encrypted,\n        attackers can\
    \ perform traffic analysis to deduce meaningful\n        information, which might\
    \ compromise the privacy of the thing's\n        owner and/or user.\n   9.   Routing\
    \ attack: As highlighted in [Daniel], routing information\n        in IoT networks\
    \ can be spoofed, altered, or replayed, in order\n        to create routing loops,\
    \ attract/repel network traffic, extend/\n        shorten source routes, etc.\
    \  A nonexhaustive list of routing\n        attacks includes:\n        a.  Sinkhole\
    \ attack (or blackhole attack), where an attacker\n            declares himself\
    \ to have a high-quality route/path to the\n            base station, thus allowing\
    \ him to do manipulate all packets\n            passing through it.\n        b.\
    \  Selective forwarding, where an attacker may selectively\n            forward\
    \ packets or simply drop a packet.\n        c.  Wormhole attack, where an attacker\
    \ may record packets at one\n            location in the network and tunnel them\
    \ to another location,\n            thereby influencing perceived network behavior\
    \ and\n            potentially distorting statistics, thus greatly impacting\n\
    \            the functionality of routing.\n        d.  Sybil attack, whereby\
    \ an attacker presents multiple\n            identities to other things in the\
    \ network.  We refer to\n            [Daniel] for further router attacks and a\
    \ more detailed\n            description.\n   10.  Elevation of privilege: An\
    \ attacker with low privileges can\n        misuse additional flaws in the implemented\
    \ authentication and\n        authorization mechanisms of a thing to gain more\
    \ privileged\n        access to the thing and its data.\n   11.  Denial of Service\
    \ (DoS) attack: Often things have very limited\n        memory and computation\
    \ capabilities.  Therefore, they are\n        vulnerable to resource-exhaustion\
    \ attack.  Attackers can\n        continuously send requests to specific things\
    \ so as to deplete\n        their resources.  This is especially dangerous in\
    \ the Internet\n        of Things since an attacker might be located in the backend\
    \ and\n        target resource-constrained devices that are part of a\n      \
    \  constrained-node network [RFC7228].  A DoS attack can also be\n        launched\
    \ by physically jamming the communication channel.\n        Network availability\
    \ can also be disrupted by flooding the\n        network with a large number of\
    \ packets.  On the other hand,\n        things compromised by attackers can be\
    \ used to disrupt the\n        operation of other networks or systems by means\
    \ of a Distributed\n        DoS (DDoS) attack.\n   To deal with the above threats,\
    \ it is required to find and apply\n   suitable security mitigations.  However,\
    \ new threats and exploits\n   appear on a daily basis, and products are deployed\
    \ in different\n   environments prone to different types of threats.  Thus, ensuring\
    \ a\n   proper level of security in an IoT system at any point of time is\n  \
    \ challenging.  To address this challenge, some of the following\n   methodologies\
    \ can be used:\n   1.  A Business Impact Analysis (BIA) assesses the consequences\
    \ of the\n       loss of basic security attributes: confidentiality, integrity,\n\
    \       and availability in an IoT system.  These consequences might\n       include\
    \ the impact from lost data, reduced sales, increased\n       expenses, regulatory\
    \ fines, customer dissatisfaction, etc.\n       Performing a business impact analysis\
    \ allows a business to\n       determine the relevance of having a proper security\
    \ design.\n   2.  A Risk Assessment (RA) analyzes security threats to an IoT system\n\
    \       while considering their likelihood and impact.  It also includes\n   \
    \    categorizing each of them with a risk level.  Risks classified as\n     \
    \  moderate or high must be mitigated, i.e., the security\n       architecture\
    \ should be able to deal with those threats.\n   3.  A Privacy Impact Assessment\
    \ (PIA) aims at assessing the\n       Personally Identifiable Information (PII)\
    \ that is collected,\n       processed, or used in an IoT system.  By doing so,\
    \ the goal is to\n       fulfill applicable legal requirements and determine the\
    \ risks and\n       effects of manipulation and loss of PII.\n   4.  Procedures\
    \ for incident reporting and mitigation refer to the\n       methodologies that\
    \ allow becoming aware of any security issues\n       that affect an IoT system.\
    \  Furthermore, this includes steps\n       towards the actual deployment of patches\
    \ that mitigate the\n       identified vulnerabilities.\n   BIA, RA, and PIA should\
    \ generally be realized during the creation of\n   a new IoT system or when deploying\
    \ significant system/feature\n   upgrades.  In general, it is recommended to reassess\
    \ them on a\n   regular basis, taking into account new use cases and/or threats.\
    \  The\n   way a BIA, RA, or PIA is performed depends on the environment and the\n\
    \   industry.  More information can be found in NIST documents such as\n   [NISTSP800-34r1],\
    \ [NISTSP800-30r1], and [NISTSP800-122].\n"
- title: 4.  State of the Art
  contents:
  - "4.  State of the Art\n   This section is organized as follows.  Section 4.1 summarizes\
    \ the\n   state of the art on IP-based IoT systems, within both the IETF and\n\
    \   other standardization bodies.  Section 4.2 summarizes the state of\n   the\
    \ art on IP-based security protocols and their usage.  Section 4.3\n   discusses\
    \ guidelines and regulations for securing IoT as proposed by\n   other bodies.\
    \  Note that the references included in this section are\n   a representative\
    \ of the state of the art at the point of writing, and\n   they are by no means\
    \ exhaustive.  The references are also at varying\n   levels of maturity; thus,\
    \ it is advisable to review their specific\n   status.\n"
- title: 4.1.  IP-Based IoT Protocols and Standards
  contents:
  - "4.1.  IP-Based IoT Protocols and Standards\n   Nowadays, there exists a multitude\
    \ of control protocols for IoT.  For\n   BAC systems, the ZigBee standard [ZB],\
    \ BACNet [BACNET], and DALI\n   [DALI] play key roles.  Recent trends, however,\
    \ focus on an all-IP\n   approach for system control.\n   In this setting, a number\
    \ of IETF working groups are designing new\n   protocols for resource-constrained\
    \ networks of smart things.  The\n   6LoWPAN Working Group [WG-6LoWPAN], for example,\
    \ has defined methods\n   and protocols for the efficient transmission and adaptation\
    \ of IPv6\n   packets over IEEE 802.15.4 networks [RFC4944].\n   The CoRE Working\
    \ Group [WG-CoRE] has specified the Constrained\n   Application Protocol (CoAP)\
    \ [RFC7252].  CoAP is a RESTful protocol\n   for constrained devices that is modeled\
    \ after HTTP and typically runs\n   over UDP to enable efficient application-level\
    \ communication for\n   things.  (\"RESTful\" refers to the Representational State\
    \ Transfer\n   (REST) architecture.)\n   In many smart-object networks, the smart\
    \ objects are dispersed and\n   have intermittent reachability either because\
    \ of network outages or\n   because they sleep during their operational phase\
    \ to save energy.  In\n   such scenarios, direct discovery of resources hosted\
    \ on the\n   constrained server might not be possible.  To overcome this barrier,\n\
    \   the CoRE Working Group is specifying the concept of a Resource\n   Directory\
    \ (RD) [RD].  The Resource Directory hosts descriptions of\n   resources that\
    \ are located on other nodes.  These resource\n   descriptions are specified as\
    \ CoRE link format [RFC6690].\n   While CoAP defines a standard communication\
    \ protocol, a format for\n   representing sensor measurements and parameters over\
    \ CoAP is\n   required.  \"Sensor Measurement Lists (SenML)\" [RFC8428] is a\n\
    \   specification that defines media types for simple sensor measurements\n  \
    \ and parameters.  It has a minimalistic design so that constrained\n   devices\
    \ with limited computational capabilities can easily encode\n   their measurements\
    \ and, at the same time, servers can efficiently\n   collect a large number of\
    \ measurements.\n   In many IoT deployments, the resource-constrained smart objects\
    \ are\n   connected to the Internet via a gateway that is directly reachable.\n\
    \   For example, an IEEE 802.11 Access Point (AP) typically connects the\n   client\
    \ devices to the Internet over just one wireless hop.  However,\n   some deployments\
    \ of smart-object networks require routing between the\n   smart objects themselves.\
    \  The IETF has therefore defined the IPv6\n   Routing Protocol for Low-Power\
    \ and Lossy Networks (RPL) [RFC6550].\n   RPL provides support for multipoint-to-point\
    \ traffic from resource-\n   constrained smart objects towards a more resourceful\
    \ central control\n   point, as well as point-to-multipoint traffic in the reverse\n\
    \   direction.  It also supports point-to-point traffic between the\n   resource-constrained\
    \ devices.  A set of routing metrics and\n   constraints for path calculation\
    \ in RPL are also specified [RFC6551].\n   The IPv6 over Networks of Resource-constrained\
    \ Nodes (6lo) Working\n   Group of the IETF [WG-6lo] has specified how IPv6 packets\
    \ can be\n   transmitted over various link-layer protocols that are commonly\n\
    \   employed for resource-constrained smart-object networks.  There is\n   also\
    \ ongoing work to specify IPv6 connectivity for a Non-Broadcast\n   Multi-Access\
    \ (NBMA) mesh network that is formed by IEEE 802.15.4\n   Time-Slotted Channel\
    \ Hopping (TSCH) links [ARCH-6TiSCH].  Other link-\n   layer protocols for which\
    \ the IETF has specified or is currently\n   specifying IPv6 support include Bluetooth\
    \ [RFC7668], Digital Enhanced\n   Cordless Telecommunications (DECT) Ultra Low\
    \ Energy (ULE) air\n   interface [RFC8105], and Near Field Communication (NFC)\n\
    \   [IPv6-over-NFC].\n   Baker and Meyer [RFC6272] identify which IP protocols\
    \ can be used in\n   smart-grid environments.  They give advice to smart-grid\
    \ network\n   designers on how they can decide on a profile of the Internet\n\
    \   protocol suite for smart-grid networks.\n   The Low Power Wide-Area Network\
    \ (LPWAN) Working Group [WG-LPWAN] is\n   analyzing features, requirements, and\
    \ solutions to adapt IP-based\n   protocols to networks such as LoRa [LoRa], Sigfox\
    \ [sigfox], NB-IoT\n   [NB-IoT], etc.  These networking technologies enable a\
    \ smart thing to\n   run for years on a single coin-cell by relying on a star\
    \ network\n   topology and using optimized radio modulation with frame sizes in\
    \ the\n   order of tens of bytes.  Such networks bring new security challenges,\n\
    \   since most existing security mechanism do not work well with such\n   resource\
    \ constraints.\n   JavaScript Object Notation (JSON) is a lightweight text-\n\
    \   representation format for structured data [RFC8259].  It is often\n   used\
    \ for transmitting serialized structured data over the network.\n   The IETF has\
    \ defined specifications for encoding cryptographic keys,\n   encrypted content,\
    \ signed content, and claims to be transferred\n   between two parties as JSON\
    \ objects.  They are referred to as JSON\n   Web Keys (JWKs) [RFC7517], JSON Web\
    \ Encryption (JWE) [RFC7516], JSON\n   Web Signatures (JWSs) [RFC7515], and JSON\
    \ Web Token (JWT) [RFC7519].\n   An alternative to JSON, Concise Binary Object\
    \ Representation (CBOR)\n   [RFC7049], is a concise binary data format that is\
    \ used for\n   serialization of structured data.  It is designed for resource-\n\
    \   constrained nodes, and therefore it aims to provide a fairly small\n   message\
    \ size with minimal implementation code and extensibility\n   without the need\
    \ for version negotiation.  CBOR Object Signing and\n   Encryption (COSE) [RFC8152]\
    \ specifies how to encode cryptographic\n   keys, message authentication codes,\
    \ encrypted content, and signatures\n   with CBOR.\n   The Light-Weight Implementation\
    \ Guidance (LWIG) Working Group\n   [WG-LWIG] is collecting experiences from implementers\
    \ of IP stacks in\n   constrained devices.  The working group has already produced\n\
    \   documents such as [RFC7815], which defines how a minimal Internet Key\n  \
    \ Exchange Version 2 (IKEv2) initiator can be implemented.\n   The Thing-2-Thing\
    \ Research Group (T2TRG) [RG-T2TRG] is investigating\n   the remaining research\
    \ issues that need to be addressed to quickly\n   turn the vision of IoT into\
    \ a reality where resource-constrained\n   nodes can communicate with each other\
    \ and with other more capable\n   nodes on the Internet.\n   Additionally, industry\
    \ alliances and other standardization bodies are\n   creating constrained IP protocol\
    \ stacks based on the IETF work.  Some\n   important examples of this include:\n\
    \   1.  Thread [Thread]: Specifies the Thread protocol that is intended\n    \
    \   for a variety of IoT devices.  It is an IPv6-based network\n       protocol\
    \ that runs over IEEE 802.15.4.\n   2.  Industrial Internet Consortium [IIoT]:\
    \ The consortium defines\n       reference architectures and security frameworks\
    \ for development,\n       adoption, and widespread use of Industrial Internet\
    \ technologies\n       based on existing IETF standards.\n   3.  IPSO Alliance\
    \ (which subsequently merged with OMA SpecWorks\n       [OMASpecWorks]): The alliance\
    \ specifies a common object model\n       that enables application software on\
    \ any device to interoperate\n       with other conforming devices.\n   4.  OneM2M\
    \ [OneM2M]: The standards body defines technical and API\n       specifications\
    \ for IoT devices.  It aims to create a service\n       layer that can run on\
    \ any IoT device hardware and software.\n   5.  Open Connectivity Foundation (OCF)\
    \ [OCF]: The foundation develops\n       standards and certifications primarily\
    \ for IoT devices that use\n       Constrained Application Protocol (CoAP) as\
    \ the application-layer\n       protocol.\n   6.  Fairhair Alliance [Fairhair]:\
    \ Specifies an IoT middleware to\n       enable a common IP network infrastructure\
    \ between different\n       application standards used in building automation\
    \ and lighting\n       systems such as BACnet, KNX, and ZigBee.\n   7.  OMA LwM2M\
    \ [LWM2M]: OMA Lightweight M2M is a standard from the OMA\n       SpecWorks for\
    \ M2M and IoT device management.  LwM2M relies on\n       CoAP as the application-layer\
    \ protocol and uses a RESTful\n       architecture for remote management of IoT\
    \ devices.\n"
- title: 4.2.  Existing IP-Based Security Protocols and Solutions
  contents:
  - "4.2.  Existing IP-Based Security Protocols and Solutions\n   There are three\
    \ main security objectives for IoT networks:\n   1.  protecting the IoT network\
    \ from attackers\n   2.  protecting IoT applications and thus the things and users\n\
    \   3.  protecting the rest of the Internet and other things from attacks\n  \
    \     that use compromised things as an attack platform\n   In the context of\
    \ the IP-based IoT deployments, consideration of\n   existing Internet security\
    \ protocols is important.  There are a wide\n   range of specialized as well as\
    \ general-purpose security solutions\n   for the Internet domain, such as IKEv2/IPsec\
    \ [RFC7296], Transport\n   Layer Security (TLS) [RFC8446], Datagram Transport\
    \ Layer Security\n   (DTLS) [RFC6347], Host Identity Protocol (HIP) [RFC7401],\
    \ PANA\n   [RFC5191], Kerberos [RFC4120], Simple Authentication and Security\n\
    \   Layer (SASL) [RFC4422], and Extensible Authentication Protocol (EAP)\n   [RFC3748].\n\
    \   TLS provides security for TCP and requires a reliable transport.\n   DTLS\
    \ secures and uses datagram-oriented protocols such as UDP.  Both\n   protocols\
    \ are intentionally kept similar and share the same ideology\n   and cipher suites.\
    \  The CoAP base specification [RFC7252] provides a\n   description of how DTLS\
    \ can be used for securing CoAP.  It proposes\n   three different modes for using\
    \ DTLS: the PreSharedKey mode, where\n   nodes have pre-provisioned keys for initiating\
    \ a DTLS session with\n   another node, RawPublicKey mode, where nodes have asymmetric-key\n\
    \   pairs but no certificates to verify the ownership, and Certificate\n   mode,\
    \ where public keys are certified by a certification authority.\n   An IoT implementation\
    \ profile is defined for TLS version 1.2 and DTLS\n   version 1.2 that offers\
    \ communication security for resource-\n   constrained nodes [RFC7925].\n   There\
    \ is ongoing work to define an authorization and access-control\n   framework\
    \ for resource-constrained nodes.  The Authentication and\n   Authorization for\
    \ Constrained Environments (ACE) Working Group\n   [WG-ACE] is defining a solution\
    \ to allow only authorized access to\n   resources that are hosted on a smart-object\
    \ server and identified by\n   a URI.  The current proposal [ACE-OAuth] is based\
    \ on the OAuth 2.0\n   framework [RFC6749], and it comes with profiles intended\
    \ for\n   different communication scenarios, e.g., \"Datagram Transport Layer\n\
    \   Security (DTLS) Profile for Authentication and Authorization for\n   Constrained\
    \ Environments (ACE)\" [ACE-DTLS].\n   Object Security for Constrained RESTful\
    \ Environments (OSCORE)\n   [OSCORE] is a proposal that protects CoAP messages\
    \ by wrapping them\n   in the COSE format [RFC8152].  Thus, OSCORE falls in the\
    \ category of\n   object security, and it can be applied wherever CoAP can be\
    \ used.\n   The advantage of OSCORE over DTLS is that it provides some more\n\
    \   flexibility when dealing with end-to-end security.  Section 5.1.3\n   discusses\
    \ this further.\n   The Automated Certificate Management Environment (ACME) Working\
    \ Group\n   [WG-ACME] is specifying conventions for automated X.509 certificate\n\
    \   management.  This includes automatic validation of certificate\n   issuance,\
    \ certificate renewal, and certificate revocation.  While the\n   initial focus\
    \ of the working group is on domain-name certificates (as\n   used by web servers),\
    \ other uses in some IoT deployments are\n   possible.\n   The Internet Key Exchange\
    \ (IKEv2)/IPsec -- as well as the less used\n   Host Identity protocol (HIP) --\
    \ reside at or above the network layer\n   in the OSI model.  Both protocols are\
    \ able to perform an\n   authenticated key exchange and set up the IPsec for secure\
    \ payload\n   delivery.  Currently, there are also ongoing efforts to create a\
    \ HIP\n   variant coined Diet HIP [HIP-DEX] that takes constrained networks and\n\
    \   nodes into account at the authentication and key-exchange level.\n   Migault\
    \ et al. [Diet-ESP] are working on a compressed version of\n   IPsec so that it\
    \ can easily be used by resource-constrained IoT\n   devices.  They rely on the\
    \ Internet Key Exchange Protocol Version 2\n   (IKEv2) for negotiating the compression\
    \ format.\n   The Extensible Authentication Protocol (EAP) [RFC3748] is an\n \
    \  authentication framework supporting multiple authentication methods.\n   EAP\
    \ runs directly over the data link layer and thus does not require\n   the deployment\
    \ of IP.  It supports duplicate detection and\n   retransmission but does not\
    \ allow for packet fragmentation.  PANA is\n   a network-layer transport for EAP\
    \ that enables network access\n   authentication between clients and the network\
    \ infrastructure.  In\n   EAP terms, PANA is a UDP-based EAP lower layer that\
    \ runs between the\n   EAP peer and the EAP authenticator.\n"
- title: 4.3.  IoT Security Guidelines
  contents:
  - "4.3.  IoT Security Guidelines\n   Attacks on and from IoT devices have become\
    \ common in recent years --\n   for instance, large-scale DoS attacks on the Internet\
    \ Infrastructure\n   from compromised IoT devices.  This fact has prompted many\
    \ different\n   standards bodies and consortia to provide guidelines for developers\n\
    \   and the Internet community at large to build secure IoT devices and\n   services.\
    \  The following is a subset of the different guidelines and\n   ongoing projects:\n\
    \   1.   Global System for Mobile Communications Association (GSMA) IoT\n    \
    \    security guidelines [GSMAsecurity]: GSMA has published a set of\n       \
    \ security guidelines for the benefit of new IoT product and\n        service\
    \ providers.  The guidelines are aimed at device\n        manufacturers, service\
    \ providers, developers, and network\n        operators.  An enterprise can complete\
    \ an IoT Security Self-\n        Assessment to demonstrate that its products and\
    \ services are\n        aligned with the security guidelines of the GSMA.\n  \
    \ 2.   Broadband Internet Technical Advisory Group (BITAG) IoT Security\n    \
    \    and Privacy Recommendations [BITAG]: BITAG has published\n        recommendations\
    \ for ensuring the security and privacy of IoT\n        device users.  BITAG observes\
    \ that many IoT devices are shipped\n        from the factory with software that\
    \ is already outdated and\n        vulnerable.  The report also states that many\
    \ devices with\n        vulnerabilities will not be fixed, either because the\n\
    \        manufacturer does not provide updates or because the user does\n    \
    \    not apply them.  The recommendations include that IoT devices\n        should\
    \ function without cloud and Internet connectivity and that\n        all IoT devices\
    \ should have methods for automatic secure\n        software updates.\n   3. \
    \  United Kingdom Department for Digital, Culture, Media and Sport\n        (DCMS)\
    \ [DCMS]: UK DCMS has released a report that includes a\n        list of 13 steps\
    \ for improving IoT security.  These steps, for\n        example, highlight the\
    \ need for implementing a vulnerability\n        disclosure policy and keeping\
    \ software updated.  The report is\n        aimed at device manufacturers, IoT\
    \ service providers, mobile\n        application developers, and retailers.\n\
    \   4.   Cloud Security Alliance (CSA) New Security Guidance for Early\n     \
    \   Adopters of the IoT [CSA]: CSA recommendations for early\n        adopters\
    \ of IoT encourage enterprises to implement security at\n        different layers\
    \ of the protocol stack.  It also recommends\n        implementation of an authentication/authorization\
    \ framework for\n        IoT deployments.  A complete list of recommendations\
    \ is\n        available in the report [CSA].\n   5.   United States Department\
    \ of Homeland Security (DHS) [DHS]: DHS\n        has put forth six strategic principles\
    \ that would enable IoT\n        developers, manufacturers, service providers,\
    \ and consumers to\n        maintain security as they develop, manufacture, implement,\
    \ or\n        use network-connected IoT devices.\n   6.   National Institute of\
    \ Standards and Technology (NIST)\n        [NIST-Guide]: The NIST special publication\
    \ urges enterprise and\n        US federal agencies to address security throughout\
    \ the systems\n        engineering process.  The publication builds upon the\n\
    \        International Organization for Standardization\n        (ISO)/International\
    \ Electrotechnical Commission (IEC) 15288\n        standard and augments each\
    \ process in the system lifecycle with\n        security enhancements.\n   7.\
    \   National Institute of Standards and Technology (NIST)\n        [NIST-LW-PROJECT]\
    \ [NIST-LW-2016]: NIST is running a project on\n        lightweight cryptography\
    \ with the purpose of: (i) identifying\n        application areas for which standard\
    \ cryptographic algorithms\n        are too heavy, classifying them according\
    \ to some application\n        profiles to be determined; (ii) determining limitations\
    \ in those\n        existing cryptographic standards; and (iii) standardizing\n\
    \        lightweight algorithms that can be used in specific application\n   \
    \     profiles.\n   8.   Open Web Application Security Project (OWASP) [OWASP]:\
    \ OWASP\n        provides security guidance for IoT manufacturers, developers,\n\
    \        and consumers.  OWASP also includes guidelines for those who\n      \
    \  intend to test and analyze IoT devices and applications.\n   9.   IoT Security\
    \ Foundation [IoTSecFoundation]: The IoT Security\n        Foundation has published\
    \ a document that enlists various\n        considerations that need to be taken\
    \ into account when\n        developing IoT applications.  For example, the document\
    \ states\n        that IoT devices could use a hardware root of trust to ensure\n\
    \        that only authorized software runs on the devices.\n   10.  National\
    \ Highway Traffic Safety Administration (NHTSA) [NHTSA]:\n        The US NHTSA\
    \ provides guidance to the automotive industry for\n        improving the cyber\
    \ security of vehicles.  While some of the\n        guidelines are general, the\
    \ document provides specific\n        recommendations for the automotive industry,\
    \ such as how various\n        automotive manufacturers can share cybersecurity\
    \ vulnerabilities\n        discovered.\n   11.  \"Best Current Practices for Securing\
    \ Internet of Things (IoT)\n        Devices\" [Moore]: This document provides\
    \ a list of minimum\n        requirements that vendors of IoT devices should to\
    \ take into\n        account while developing applications, services, and firmware\n\
    \        updates in order to reduce the frequency and severity of\n        security\
    \ incidents that arise from compromised IoT devices.\n   12.  European Union Agency\
    \ for Network and Information Security\n        (ENISA) [ENISA-ICS]: ENISA published\
    \ a document on\n        communication-network dependencies for Industrial Control\n\
    \        Systems (ICS)/Supervisory Control And Data Acquisition (SCADA)\n    \
    \    systems in which security vulnerabilities, guidelines, and\n        general\
    \ recommendations are summarized.\n   13.  Internet Society Online Trust Alliance\
    \ [ISOC-OTA]: The Internet\n        Society's IoT Trust Framework identifies the\
    \ core requirements\n        that manufacturers, service providers, distributors,\
    \ purchasers,\n        and policymakers need to understand, assess, and embrace\
    \ for\n        effective security and privacy as part of the Internet of\n   \
    \     Things.\n   Other guideline and recommendation documents may exist or may\
    \ later\n   be published.  This list should be considered nonexhaustive.  Despite\n\
    \   the acknowledgment that security in the Internet is needed and the\n   existence\
    \ of multiple guidelines, the fact is that many IoT devices\n   and systems have\
    \ very limited security.  There are multiple reasons\n   for this.  For instance,\
    \ some manufacturers focus on delivering a\n   product without paying enough attention\
    \ to security.  This may be\n   because of lack of expertise or limited budget.\
    \  However, the\n   deployment of such insecure devices poses a severe threat\
    \ to the\n   privacy and safety of users.  The vast number of devices and their\n\
    \   inherently mobile nature also imply that an initially secure system\n   can\
    \ become insecure if a compromised device gains access to the\n   system at some\
    \ point in time.  Even if all other devices in a given\n   environment are secure,\
    \ this does not prevent external attacks caused\n   by insecure devices.  Recently,\
    \ the US Federal Communications\n   Commission (FCC) has stated the need for additional\
    \ regulation of IoT\n   systems [FCC].  It is possible that we may see other such\
    \ regional\n   regulations in the future.\n"
- title: 5.  Challenges for a Secure IoT
  contents:
  - "5.  Challenges for a Secure IoT\n   In this section, we take a closer look at\
    \ the various security\n   challenges in the operational and technical features\
    \ of IoT and then\n   discuss how existing Internet security protocols cope with\
    \ these\n   technical and conceptual challenges through the lifecycle of a thing.\n\
    \   This discussion should not be understood as a comprehensive\n   evaluation\
    \ of all protocols, nor can it cover all possible aspects of\n   IoT security.\
    \  Yet, it aims at showing concrete limitations and\n   challenges in some IoT\
    \ design areas rather than giving an abstract\n   discussion.  In this regard,\
    \ the discussion handles issues that are\n   most important from the authors'\
    \ perspectives.\n"
- title: 5.1.  Constraints and Heterogeneous Communication
  contents:
  - "5.1.  Constraints and Heterogeneous Communication\n   Coupling resource-constrained\
    \ networks and the powerful Internet is a\n   challenge, because the resulting\
    \ heterogeneity of both networks\n   complicates protocol design and system operation.\
    \  In the following\n   subsections, we briefly discuss the resource constraints\
    \ of IoT\n   devices and the consequences for the use of Internet protocols in\
    \ the\n   IoT domain.\n"
- title: 5.1.1.  Resource Constraints
  contents:
  - "5.1.1.  Resource Constraints\n   IoT deployments are often characterized by lossy\
    \ and low-bandwidth\n   communication channels.  IoT devices are also often constrained\
    \ in\n   terms of the CPU, memory, and energy budget available [RFC7228].\n  \
    \ These characteristics directly impact the design of protocols for the\n   IoT\
    \ domain.  For instance, small packet-size limits at the physical\n   layer (127\
    \ Bytes in IEEE 802.15.4) can lead to (i) hop-by-hop\n   fragmentation and reassembly\
    \ or (ii) small IP-layer maximum\n   transmission unit (MTU).  In the first case,\
    \ excessive fragmentation\n   of large packets that are often required by security\
    \ protocols may\n   open new attack vectors for state-exhaustion attacks.  The\
    \ second\n   case might lead to more fragmentation at the IP layer, which commonly\n\
    \   downgrades the overall system performance due to packet loss and the\n   need\
    \ for retransmission.\n   The size and number of messages should be minimized\
    \ to reduce memory\n   requirements and optimize bandwidth usage.  In this context,\
    \ layered\n   approaches involving a number of protocols might lead to worse\n\
    \   performance in resource-constrained devices since they combine the\n   headers\
    \ of the different protocols.  In some settings, protocol\n   negotiation can\
    \ increase the number of exchanged messages.  To\n   improve performance during\
    \ basic procedures such as, for example,\n   bootstrapping, it might be a good\
    \ strategy to perform those\n   procedures at a lower layer.\n   Small CPUs and\
    \ scarce memory limit the usage of resource-expensive\n   cryptographic primitives\
    \ such as public key cryptography as used in\n   most Internet security standards.\
    \  This is especially true if the\n   basic cryptographic blocks need to be frequently\
    \ used or the\n   underlying application demands low delay.\n   There are ongoing\
    \ efforts to reduce the resource consumption of\n   security protocols by using\
    \ more efficient underlying cryptographic\n   primitives such as Elliptic Curve\
    \ Cryptography (ECC) [RFC8446].  The\n   specification of elliptic curve X25519\
    \ [ecc25519], stream ciphers\n   such as ChaCha [ChaCha], Diet HIP [HIP-DEX],\
    \ and ECC groups for IKEv2\n   [RFC5903] are all examples of efforts to make security\
    \ protocols more\n   resource efficient.  Additionally, most modern security protocols\n\
    \   have been revised in the last few years to enable cryptographic\n   agility,\
    \ making cryptographic primitives interchangeable.  However,\n   these improvements\
    \ are only a first step in reducing the computation\n   and communication overhead\
    \ of Internet protocols.  The question\n   remains if other approaches can be\
    \ applied to leverage key agreement\n   in these heavily resource-constrained\
    \ environments.\n   A further fundamental need refers to the limited energy budget\n\
    \   available to IoT nodes.  Careful protocol (re)design and usage are\n   required\
    \ to reduce not only the energy consumption during normal\n   operation but also\
    \ under DoS attacks.  Since the energy consumption\n   of IoT devices differs\
    \ from other device classes, judgments on the\n   energy consumption of a particular\
    \ protocol cannot be made without\n   tailor-made IoT implementations.\n"
- title: 5.1.2.  Denial-of-Service Resistance
  contents:
  - "5.1.2.  Denial-of-Service Resistance\n   The tight memory and processing constraints\
    \ of things naturally\n   alleviate resource-exhaustion attacks.  Especially in\
    \ unattended T2T\n   communication, such attacks are difficult to notice before\
    \ the\n   service becomes unavailable (for example, because of battery or\n  \
    \ memory exhaustion).  As a DoS countermeasure, DTLS, IKEv2, HIP, and\n   Diet\
    \ HIP implement return routability checks based on a cookie\n   mechanism to delay\
    \ the establishment of state at the responding host\n   until the address of the\
    \ initiating host is verified.  The\n   effectiveness of these defenses strongly\
    \ depends on the routing\n   topology of the network.  Return routability checks\
    \ are particularly\n   effective if hosts cannot receive packets addressed to\
    \ other hosts\n   and if IP addresses present meaningful information as is the\
    \ case in\n   today's Internet.  However, they are less effective in broadcast\n\
    \   media or when attackers can influence the routing and addressing of\n   hosts\
    \ (for example, if hosts contribute to the routing infrastructure\n   in ad hoc\
    \ networks and meshes).\n   In addition, HIP implements a puzzle mechanism that\
    \ can force the\n   initiator of a connection (and potential attacker) to solve\n\
    \   cryptographic puzzles with variable difficulties.  Puzzle-based\n   defense\
    \ mechanisms are less dependent on the network topology but\n   perform poorly\
    \ if CPU resources in the network are heterogeneous (for\n   example, if a powerful\
    \ Internet host attacks a thing).  Increasing\n   the puzzle difficulty under\
    \ attack conditions can easily lead to\n   situations where a powerful attacker\
    \ can still solve the puzzle while\n   weak IoT clients cannot and are excluded\
    \ from communicating with the\n   victim.  Still, puzzle-based approaches are\
    \ a viable option for\n   sheltering IoT devices against unintended overload caused\
    \ by\n   misconfiguration or malfunctioning things.\n"
- title: 5.1.3.  End-to-End Security, Protocol Translation, and the Role of
  contents:
  - "5.1.3.  End-to-End Security, Protocol Translation, and the Role of\n        Middleboxes\n\
    \   The term \"end-to-end security\" often has multiple interpretations.\n   Here,\
    \ we consider end-to-end security in the context of end-to-end IP\n   connectivity\
    \ from a sender to a receiver.  Services such as\n   confidentiality and integrity\
    \ protection on packet data, message\n   authentication codes, or encryption are\
    \ typically used to provide\n   end-to-end security.  These protection methods\
    \ render the protected\n   parts of the packets immutable as rewriting is either\
    \ not possible\n   because (i) the relevant information is encrypted and inaccessible\
    \ to\n   the gateway or (ii) rewriting integrity-protected parts of the packet\n\
    \   would invalidate the end-to-end integrity protection.\n   Protocols for constrained\
    \ IoT networks are not exactly identical to\n   their larger Internet counterparts,\
    \ for efficiency and performance\n   reasons.  Hence, more or less subtle differences\
    \ between protocols\n   for constrained IoT networks and Internet protocols will\
    \ remain.\n   While these differences can be bridged with protocol translators\
    \ at\n   middleboxes, they may become major obstacles if end-to-end security\n\
    \   measures between IoT devices and Internet hosts are needed.\n   If access\
    \ to data or messages by the middleboxes is required or\n   acceptable, then a\
    \ diverse set of approaches for handling such a\n   scenario is available.  Note\
    \ that some of these approaches affect the\n   meaning of end-to-end security\
    \ in terms of integrity and\n   confidentiality, since the middleboxes will be\
    \ able to either decrypt\n   or partially modify the exchanged messages:\n   1.\
    \  Sharing credentials with middleboxes enables them to transform\n       (for\
    \ example, decompress, convert, etc.) packets and reapply the\n       security\
    \ measures after transformation.  This method abandons\n       end-to-end security\
    \ and is only applicable to simple scenarios\n       with a rudimentary security\
    \ model.\n   2.  Reusing the Internet wire format for IoT makes conversion between\n\
    \       IoT and Internet protocols unnecessary.  However, it can lead to\n   \
    \    poor performance in some use cases because IoT-specific\n       optimizations\
    \ (for example, stateful or stateless compression)\n       are not possible.\n\
    \   3.  Selectively protecting vital and immutable packet parts with a\n     \
    \  message authentication code or encryption requires a careful\n       balance\
    \ between performance and security.  Otherwise, this\n       approach might either\
    \ result in poor performance or poor\n       security, depending on which parts\
    \ are selected for protection,\n       where they are located in the original\
    \ packet, and how they are\n       processed.  [OSCORE] proposes a solution in\
    \ this direction by\n       encrypting and integrity protecting most of the message\
    \ fields\n       except those parts that a middlebox needs to read or change.\n\
    \   4.  Homomorphic encryption techniques can be used in the middlebox to\n  \
    \     perform certain operations.  However, this is limited to data\n       processing\
    \ involving arithmetic operations.  Furthermore, the\n       performance of existing\
    \ libraries -- for example, Microsoft SEAL\n       [SEAL] -- is still too limited,\
    \ and homomorphic encryption\n       techniques are not widely applicable yet.\n\
    \   5.  Message authentication codes that sustain transformation can be\n    \
    \   realized by considering the order of transformation and\n       protection\
    \ (for example, by creating a signature before\n       compression so that the\
    \ gateway can decompress the packet without\n       recalculating the signature).\
    \  Such an approach enables IoT-\n       specific optimizations but is more complex\
    \ and may require\n       application-specific transformations before security\
    \ is applied.\n       Moreover, the usage of encrypted or integrity-protected\
    \ data\n       prevents middleboxes from transforming packets.\n   6.  Mechanisms\
    \ based on object security can bridge the protocol\n       worlds but still require\
    \ that the two worlds use the same object-\n       security formats.  Currently,\
    \ the object-security format based on\n       COSE [RFC8152] is different from\
    \ JSON Object Signing and\n       Encryption (JOSE) [RFC7520] or Cryptographic\
    \ Message Syntax (CMS)\n       [RFC5652].  Legacy devices relying on traditional\
    \ Internet\n       protocols will need to update to the newer protocols for\n\
    \       constrained environments to enable real end-to-end security.\n       Furthermore,\
    \ middleboxes do not have any access to the data, and\n       this approach does\
    \ not prevent an attacker who is capable of\n       modifying relevant message\
    \ header fields that are not protected.\n   To the best of our knowledge, none\
    \ of the mentioned security\n   approaches that focus on the confidentiality and\
    \ integrity of the\n   communication exchange between two IP endpoints provide\
    \ the perfect\n   solution in this problem space.\n"
- title: 5.1.4.  New Network Architectures and Paradigm
  contents:
  - "5.1.4.  New Network Architectures and Paradigm\n   There is a multitude of new\
    \ link-layer protocols that aim to address\n   the resource-constrained nature\
    \ of IoT devices.  For example, IEEE\n   802.11ah [IEEE802ah] has been specified\
    \ for extended range and lower\n   energy consumption to support IoT devices.\
    \  Similarly, LPWAN\n   protocols such as LoRa [LoRa], Sigfox [sigfox], and NarrowBand\
    \ IoT\n   (NB-IoT) [NB-IoT] are all designed for resource-constrained devices\n\
    \   that require long range and low bit rates.  [RFC8376] provides an\n   informational\
    \ overview of the set of LPWAN technologies being\n   considered by the IETF.\
    \  It also identifies the potential gaps that\n   exist between the needs of those\
    \ technologies and the goal of running\n   IP in such networks.  While these protocols\
    \ allow IoT devices to\n   conserve energy and operate efficiently, they also\
    \ add additional\n   security challenges.  For example, the relatively small MTU\
    \ can make\n   security handshakes with large X509 certificates a significant\n\
    \   overhead.  At the same time, new communication paradigms also allow\n   IoT\
    \ devices to communicate directly amongst themselves with or\n   without support\
    \ from the network.  This communication paradigm is\n   also referred to as Device-to-Device\
    \ (D2D), Machine-to-Machine (M2M),\n   or Thing-to-Thing (T2T) communication,\
    \ and it is motivated by a\n   number of features such as improved network performance,\
    \ lower\n   latency, and lower energy requirements.\n"
- title: 5.2.  Bootstrapping of a Security Domain
  contents:
  - "5.2.  Bootstrapping of a Security Domain\n   Creating a security domain from\
    \ a set of previously unassociated IoT\n   devices is a key operation in the lifecycle\
    \ of a thing in an IoT\n   network.  This aspect is further elaborated and discussed\
    \ in the\n   T2TRG draft on bootstrapping [BOOTSTRAP].\n"
- title: 5.3.  Operational Challenges
  contents:
  - "5.3.  Operational Challenges\n   After the bootstrapping phase, the system enters\
    \ the operational\n   phase.  During the operational phase, things can use the\
    \ state\n   information created during the bootstrapping phase in order to\n \
    \  exchange information securely.  In this section, we discuss the\n   security\
    \ challenges during the operational phase.  Note that many of\n   the challenges\
    \ discussed in Section 5.1 apply during the operational\n   phase.\n"
- title: 5.3.1.  Group Membership and Security
  contents:
  - "5.3.1.  Group Membership and Security\n   Group-key negotiation is an important\
    \ security service for IoT\n   communication patterns in which a thing sends some\
    \ data to multiple\n   things or data flows from multiple things towards a thing.\
    \  All\n   discussed protocols only cover unicast communication and therefore\
    \ do\n   not focus on group-key establishment.  This applies in particular to\n\
    \   (D)TLS and IKEv2.  Thus, a solution is required in this area.  A\n   potential\
    \ solution might be to use the Diffie-Hellman keys -- which\n   are used in IKEv2\
    \ and HIP to set up a secure unicast link -- for\n   group Diffie-Hellman key\
    \ negotiations.  However, Diffie-Hellman is a\n   relatively heavy solution, especially\
    \ if the group is large.\n   Symmetric and asymmetric keys can be used in group\
    \ communication.\n   Asymmetric keys have the advantage that they can provide\
    \ source\n   authentication.  However, doing broadcast encryption with a single\n\
    \   public/private key pair is also not feasible.  Although a single\n   symmetric\
    \ key can be used to encrypt the communication or compute a\n   message authentication\
    \ code, it has inherent risks since the capture\n   of a single node can compromise\
    \ the key shared throughout the\n   network.  The usage of symmetric keys also\
    \ does not provide source\n   authentication.  Another factor to consider is that\
    \ asymmetric\n   cryptography is more resource-intensive than symmetric key solutions.\n\
    \   Thus, the security risks and performance trade-offs of applying\n   either\
    \ symmetric or asymmetric keys to a given IoT use case need to\n   be well analyzed\
    \ according to risk and usability assessments\n   [RFC8387].  [MULTICAST] is looking\
    \ at a combination of\n   confidentiality using a group key and source authentication\
    \ using\n   public keys in the same packet.\n   Conceptually, solutions that provide\
    \ secure group communication at\n   the network layer (IPsec/IKEv2, HIP/Diet HIP)\
    \ may have an advantage\n   in terms of the cryptographic overhead when compared\
    \ to application-\n   focused security solutions (TLS/DTLS).  This is due to the\
    \ fact that\n   application-focused solutions require cryptographic operations\
    \ per\n   group application, whereas network-layer approaches may allow sharing\n\
    \   secure group associations between multiple applications (for example,\n  \
    \ for neighbor discovery and routing or service discovery).  Hence,\n   implementing\
    \ shared features lower in the communication stack can\n   avoid redundant security\
    \ measures.  However, it is important to note\n   that sharing security contexts\
    \ among different applications involves\n   potential security threats, e.g.,\
    \ if one of the applications is\n   malicious and monitors exchanged messages\
    \ or injects fake messages.\n   In the case of OSCORE, it provides security for\
    \ CoAP group\n   communication as defined in RFC 7390, i.e., based on multicast\
    \ IP.\n   If the same security association is reused for each application, then\n\
    \   this solution does not seem to have more cryptographic overhead\n   compared\
    \ to IPsec.\n   Several group-key solutions have been developed by the MSEC Working\n\
    \   Group of the IETF [WG-MSEC].  The MIKEY architecture [RFC4738] is one\n  \
    \ example.  While these solutions are specifically tailored for\n   multicast\
    \ and group-broadcast applications in the Internet, they\n   should also be considered\
    \ as candidate solutions for group-key\n   agreement in IoT.  The MIKEY architecture,\
    \ for example, describes a\n   coordinator entity that disseminates symmetric\
    \ keys over pair-wise\n   end-to-end secured channels.  However, such a centralized\
    \ approach\n   may not be applicable in a distributed IoT environment, where the\n\
    \   choice of one or several coordinators and the management of the group\n  \
    \ key is not trivial.\n"
- title: 5.3.2.  Mobility and IP Network Dynamics
  contents:
  - "5.3.2.  Mobility and IP Network Dynamics\n   It is expected that many things\
    \ (for example, user devices and\n   wearable sensors) will be mobile in the sense\
    \ that they are attached\n   to different networks during the lifetime of a security\
    \ association.\n   Built-in mobility signaling can greatly reduce the overhead\
    \ of the\n   cryptographic protocols because unnecessary and costly re-\n   establishments\
    \ of the session (possibly including handshake and key\n   agreement) can be avoided.\
    \  IKEv2 supports host mobility with the\n   MOBIKE extension [RFC4555] [RFC4621].\
    \  MOBIKE refrains from applying\n   heavyweight cryptographic extensions for\
    \ mobility.  However, MOBIKE\n   mandates the use of IPsec tunnel mode, which\
    \ requires the\n   transmission of an additional IP header in each packet.\n \
    \  HIP offers simple yet effective mobility management by allowing hosts\n   to\
    \ signal changes to their associations [RFC8046].  However, slight\n   adjustments\
    \ might be necessary to reduce the cryptographic costs --\n   for example, by\
    \ making the public key signatures in the mobility\n   messages optional.  Diet\
    \ HIP does not define mobility yet, but it is\n   sufficiently similar to HIP\
    \ and can use the same mechanisms.  DTLS\n   provides some mobility support by\
    \ relying on a connection ID (CID).\n   The use of connection IDs can provide\
    \ all the mobility functionality\n   described in [Williams] except sending the\
    \ updated location.  The\n   specific need for IP-layer mobility mainly depends\
    \ on the scenario in\n   which the nodes operate.  In many cases, mobility supported\
    \ by means\n   of a mobile gateway may suffice to enable mobile IoT networks,\
    \ such\n   as body-sensor networks.  Using message-based application-layer\n \
    \  security solutions such as OSCORE [OSCORE] can also alleviate the\n   problem\
    \ of re-establishing lower-layer sessions for mobile nodes.\n"
- title: 5.4.  Secure Software Update and Cryptographic Agility
  contents:
  - "5.4.  Secure Software Update and Cryptographic Agility\n   IoT devices are often\
    \ expected to stay functional for several years\n   or decades, even though they\
    \ might operate unattended with direct\n   Internet connectivity.  Software updates\
    \ for IoT devices are\n   therefore required not only for new functionality but\
    \ also to\n   eliminate security vulnerabilities due to software bugs, design\n\
    \   flaws, or deprecated algorithms.  Software bugs might remain even\n   after\
    \ careful code review.  Implementations of security protocols\n   might contain\
    \ (design) flaws.  Cryptographic algorithms can also\n   become insecure due to\
    \ advances in cryptanalysis.  Therefore, it is\n   necessary that devices that\
    \ are incapable of verifying a\n   cryptographic signature are not exposed to\
    \ the Internet, even\n   indirectly.\n   In his essay, Schneier highlights several\
    \ challenges that hinder\n   mechanisms for secure software update of IoT devices\n\
    \   [SchneierSecurity].  First, there is a lack of incentives for\n   manufacturers,\
    \ vendors, and others on the supply chain to issue\n   updates for their devices.\
    \  Second, parts of the software running on\n   IoT devices is simply a binary\
    \ blob without any source code\n   available.  Since the complete source code\
    \ is not available, no\n   patches can be written for that piece of code.  Lastly,\
    \ Schneier\n   points out that even when updates are available, users generally\
    \ have\n   to manually download and install them.  However, users are never\n\
    \   alerted about security updates, and many times do not have the\n   necessary\
    \ expertise to manually administer the required updates.\n   The US Federal Trade\
    \ Commission (FTC) staff report on \"Internet of\n   Things - Privacy & Security\
    \ in a Connected World\" [FTCreport] and the\n   Article 29 Working Party's \"\
    Opinion 8/2014 on the Recent Developments\n   on the Internet of Things\" [Article29]\
    \ also document the challenges\n   for secure remote software update of IoT devices.\
    \  They note that\n   even providing such a software-update capability may add\
    \ new\n   vulnerabilities for constrained devices.  For example, a buffer\n  \
    \ overflow vulnerability in the implementation of a software update\n   protocol\
    \ (TR69) [TR69] and an expired certificate in a hub device\n   [wink] demonstrate\
    \ how the software-update process itself can\n   introduce vulnerabilities.\n\
    \   Powerful IoT devices that run general-purpose operating systems can\n   make\
    \ use of sophisticated software-update mechanisms known from the\n   desktop world.\
    \  However, resource-constrained devices typically do\n   not have any operating\
    \ system and are often not equipped with a\n   memory management unit or similar\
    \ tools.  Therefore, they might\n   require more specialized solutions.\n   An\
    \ important requirement for secure software and firmware updates is\n   source\
    \ authentication.  Source authentication requires the resource-\n   constrained\
    \ things to implement public key signature verification\n   algorithms.  As stated\
    \ in Section 5.1.1, resource-constrained things\n   have limited computational\
    \ capabilities and energy supply available,\n   which can hinder the amount and\
    \ frequency of cryptographic processing\n   that they can perform.  In addition\
    \ to source authentication,\n   software updates might require confidential delivery\
    \ over a secure\n   (encrypted) channel.  The complexity of broadcast encryption\
    \ can\n   force the usage of point-to-point secure links; however, this\n   increases\
    \ the duration of a software update in a large system.\n   Alternatively, it may\
    \ force the usage of solutions in which the\n   software update is delivered to\
    \ a gateway and then distributed to the\n   rest of the system with a network\
    \ key.  Sending large amounts of data\n   that later needs to be assembled and\
    \ verified over a secure channel\n   can consume a lot of energy and computational\
    \ resources.  Correct\n   scheduling of the software updates is also a crucial\
    \ design\n   challenge.  For example, a user of connected light bulbs would not\n\
    \   want them to update and restart at night.  More importantly, the user\n  \
    \ would not want all the lights to update at the same time.\n   Software updates\
    \ in IoT systems are also needed to update old and\n   insecure cryptographic\
    \ primitives.  However, many IoT systems, some\n   of which are already deployed,\
    \ are not designed with provisions for\n   cryptographic agility.  For example,\
    \ many devices come with a\n   wireless radio that has an AES128 hardware coprocessor.\
    \  These\n   devices solely rely on the coprocessor for encrypting and\n   authenticating\
    \ messages.  A software update adding support for new\n   cryptographic algorithms\
    \ implemented solely in software might not fit\n   on these devices due to limited\
    \ memory, or might drastically hinder\n   its operational performance.  This can\
    \ lead to the use of old and\n   insecure software.  Therefore, it is important\
    \ to account for the\n   fact that cryptographic algorithms would need to be updated\
    \ and\n   consider the following when planning for cryptographic agility:\n  \
    \ 1.  Would it be secure to use the existing cryptographic algorithms\n      \
    \ available on the device for updating with new cryptographic\n       algorithms\
    \ that are more secure?\n   2.  Will the new software-based implementation fit\
    \ on the device\n       given the limited resources?\n   3.  Would the normal\
    \ operation of existing IoT applications on the\n       device be severely hindered\
    \ by the update?\n   Finally, we would like to highlight the previous and ongoing\
    \ work in\n   the area of secure software and firmware updates at the IETF.\n\
    \   [RFC4108] describes how Cryptographic Message Syntax (CMS) [RFC5652]\n   can\
    \ be used to protect firmware packages.  The IAB has also organized\n   a workshop\
    \ to understand the challenges for secure software update of\n   IoT devices.\
    \  A summary of the recommendations to the standards\n   community derived from\
    \ the discussions during that workshop have been\n   documented [RFC8240].  A\
    \ working group called Software Updates for\n   Internet of Things (SUIT) [WG-SUIT]\
    \ is currently working on a new\n   specification to reflect the best current\
    \ practices for firmware\n   update based on experience from IoT deployments.\
    \  It is specifically\n   working on describing an IoT firmware update architecture\
    \ and\n   specifying a manifest format that contains metadata about the\n   firmware\
    \ update package.  Finally, the Trusted Execution Environment\n   Provisioning\
    \ Working Group [WG-TEEP] aims at developing a protocol\n   for lifecycle management\
    \ of trusted applications running on the\n   secure area of a processor (Trusted\
    \ Execution Environment (TEE)).\n"
- title: 5.5.  End-of-Life
  contents:
  - "5.5.  End-of-Life\n   Like all commercial devices, IoT devices have a given useful\n\
    \   lifetime.  The term \"end-of-life\" (EOL) is used by vendors or network\n\
    \   operators to indicate the point of time at which they limit or end\n   support\
    \ for the IoT device.  This may be planned or unplanned (for\n   example, when\
    \ the manufacturer goes bankrupt, the vendor just decides\n   to abandon a product,\
    \ or a network operator moves to a different type\n   of networking technology).\
    \  A user should still be able to use and\n   perhaps even update the device.\
    \  This requires for some form of\n   authorization handover.\n   Although this\
    \ may seem far-fetched given the commercial interests and\n   market dynamics,\
    \ we have examples from the mobile world where the\n   devices have been functional\
    \ and up to date long after the original\n   vendor stopped supporting the device.\
    \  CyanogenMod for Android\n   devices and OpenWrt for home routers are two such\
    \ instances where\n   users have been able to use and update their devices even\
    \ after the\n   official EOL.  Admittedly, it is not easy for an average user\
    \ to\n   install and configure their devices on their own.  With the\n   deployment\
    \ of millions of IoT devices, simpler mechanisms are needed\n   to allow users\
    \ to add new trust anchors [RFC6024] and install\n   software and firmware from\
    \ other sources once the device is EOL.\n"
- title: 5.6.  Verifying Device Behavior
  contents:
  - "5.6.  Verifying Device Behavior\n   Users using new IoT appliances such as Internet-connected\
    \ smart\n   televisions, speakers, and cameras are often unaware that these\n\
    \   devices can undermine their privacy.  Recent revelations have shown\n   that\
    \ many IoT device vendors have been collecting sensitive private\n   data through\
    \ these connected appliances with or without appropriate\n   user warnings [cctv].\n\
    \   An IoT device's user/owner would like to monitor and verify its\n   operational\
    \ behavior.  For instance, the user might want to know if\n   the device is connecting\
    \ to the server of the manufacturer for any\n   reason.  This feature -- connecting\
    \ to the manufacturer's server --\n   may be necessary in some scenarios, such\
    \ as during the initial\n   configuration of the device.  However, the user should\
    \ be kept aware\n   of the data that the device is sending back to the vendor.\
    \  For\n   example, the user might want to know if his/her TV is sending data\n\
    \   when he/she inserts a new USB stick.\n   Providing such information to the\
    \ users in an understandable fashion\n   is challenging.  This is because IoT\
    \ devices are not only resource\n   constrained in terms of their computational\
    \ capability but also in\n   terms of the user interface available.  Also, the\
    \ network\n   infrastructure where these devices are deployed will vary\n   significantly\
    \ from one user environment to another.  Therefore, where\n   and how this monitoring\
    \ feature is implemented still remains an open\n   question.\n   Manufacturer\
    \ Usage Description (MUD) files [RFC8520] are perhaps a\n   first step towards\
    \ implementation of such a monitoring service.  The\n   idea behind MUD files\
    \ is relatively simple: IoT devices would\n   disclose the location of their MUD\
    \ file to the network during\n   installation.  The network can then retrieve\
    \ those files and learn\n   about the intended behavior of the devices stated\
    \ by the device\n   manufacturer.  A network-monitoring service could then warn\
    \ the user/\n   owner of devices if they don't behave as expected.\n   Many devices\
    \ and software services that automatically learn and\n   monitor the behavior\
    \ of different IoT devices in a given network are\n   commercially available.\
    \  Such monitoring devices/services can be\n   configured by the user to limit\
    \ network traffic and trigger alarms\n   when unexpected operation of IoT devices\
    \ is detected.\n"
- title: '5.7.  Testing: Bug Hunting and Vulnerabilities'
  contents:
  - "5.7.  Testing: Bug Hunting and Vulnerabilities\n   Given that IoT devices often\
    \ have inadvertent vulnerabilities, both\n   users and developers would want to\
    \ perform extensive testing on their\n   IoT devices, networks, and systems. \
    \ Nonetheless, since the devices\n   are resource constrained and manufactured\
    \ by multiple vendors, some\n   of them very small, devices might be shipped with\
    \ very limited\n   testing, so that bugs can remain and can be exploited at a\
    \ later\n   stage.  This leads to two main types of challenges:\n   1.  It remains\
    \ to be seen how the software-testing and quality-\n       assurance mechanisms\
    \ used from the desktop and mobile world will\n       be applied to IoT devices\
    \ to give end users the confidence that\n       the purchased devices are robust.\
    \  Bodies such as the European\n       Cyber Security Organization (ECSO) [ECSO]\
    \ are working on\n       processes for security certification of IoT devices.\n\
    \   2.  It is also an open question how the combination of devices from\n    \
    \   multiple vendors might actually lead to dangerous network\n       configurations\
    \ -- for example, if the combination of specific\n       devices can trigger unexpected\
    \ behavior.  It is needless to say\n       that the security of the whole system\
    \ is limited by its weakest\n       point.\n"
- title: 5.8.  Quantum-Resistance
  contents:
  - "5.8.  Quantum-Resistance\n   Many IoT systems that are being deployed today will\
    \ remain\n   operational for many years.  With the advancements made in the field\n\
    \   of quantum computers, it is possible that large-scale quantum\n   computers\
    \ will be available in the future for performing\n   cryptanalysis on existing\
    \ cryptographic algorithms and cipher suites.\n   If this happens, it will have\
    \ two consequences.  First,\n   functionalities enabled by means of primitives\
    \ such as RSA or ECC --\n   namely, key exchange, public key encryption, and signature\
    \ -- would\n   not be secure anymore due to Shor's algorithm.  Second, the security\n\
    \   level of symmetric algorithms will decrease, for example, the\n   security\
    \ of a block cipher with a key size of b bits will only offer\n   b/2 bits of\
    \ security due to Grover's algorithm.\n   The above scenario becomes more urgent\
    \ when we consider the so-called\n   \"harvest and decrypt\" attack in which an\
    \ attacker can start to\n   harvest (store) encrypted data today, before a quantum\
    \ computer is\n   available, and decrypt it years later, once a quantum computer\
    \ is\n   available.  Such \"harvest and decrypt\" attacks are not new and were\n\
    \   used in the VENONA project [venona-project].  Many IoT devices that\n   are\
    \ being deployed today will remain operational for a decade or even\n   longer.\
    \  During this time, digital signatures used to sign software\n   updates might\
    \ become obsolete, making the secure update of IoT\n   devices challenging.\n\
    \   This situation would require us to move to quantum-resistant\n   alternatives\
    \ -- in particular, for those functionalities involving\n   key exchange, public\
    \ key encryption, and signatures.  [C2PQ]\n   describes when quantum computers\
    \ may become widely available and what\n   steps are necessary for transitioning\
    \ to cryptographic algorithms\n   that provide security even in the presence of\
    \ quantum computers.\n   While future planning is hard, it may be a necessity\
    \ in certain\n   critical IoT deployments that are expected to last decades or\
    \ more.\n   Although increasing the key size of the different algorithms is\n\
    \   definitely an option, it would also incur additional computational\n   overhead\
    \ and network traffic.  This would be undesirable in most\n   scenarios.  There\
    \ have been recent advancements in quantum-resistant\n   cryptography.  We refer\
    \ to [ETSI-GR-QSC-001] for an extensive\n   overview of existing quantum-resistant\
    \ cryptography, and [RFC7696]\n   provides guidelines for cryptographic algorithm\
    \ agility.\n"
- title: 5.9.  Privacy Protection
  contents:
  - "5.9.  Privacy Protection\n   People will eventually be surrounded by hundreds\
    \ of connected IoT\n   devices.  Even if the communication links are encrypted\
    \ and\n   protected, information about people might still be collected or\n  \
    \ processed for different purposes.  The fact that IoT devices in the\n   vicinity\
    \ of people might enable more pervasive monitoring can\n   negatively impact their\
    \ privacy.  For instance, imagine the scenario\n   where a static presence sensor\
    \ emits a packet due to the presence or\n   absence of people in its vicinity.\
    \  In such a scenario, anyone who\n   can observe the packet can gather critical\
    \ privacy-sensitive\n   information.\n   Such information about people is referred\
    \ to as personal data in the\n   European Union (EU) or Personally identifiable\
    \ information (PII) in\n   the US.  In particular, the General Data Protection\
    \ Regulation (GDPR)\n   [GDPR] defines personal data as: \"any information relating\
    \ to an\n   identified or identifiable natural person ('data subject'); an\n \
    \  identifiable natural person is one who can be identified, directly or\n   indirectly,\
    \ in particular by reference to an identifier such as a\n   name, an identification\
    \ number, location data, an online identifier\n   or to one or more factors specific\
    \ to the physical, physiological,\n   genetic, mental, economic, cultural or social\
    \ identity of that\n   natural person\".\n   Ziegeldorf [Ziegeldorf] defines privacy\
    \ in IoT as a threefold\n   guarantee:\n   1.  Awareness of the privacy risks\
    \ imposed by IoT devices and\n       services.  This awareness is achieved by\
    \ means of transparent\n       practices by the data controller, i.e., the entity\
    \ that is\n       providing IoT devices and/or services.\n   2.  Individual control\
    \ over the collection and processing of personal\n       information by IoT devices\
    \ and services.\n   3.  Awareness and control of the subsequent use and dissemination\
    \ of\n       personal information by data controllers to any entity outside\n\
    \       the subject's personal control sphere.  This point implies that\n    \
    \   the data controller must be accountable for its actions on the\n       personal\
    \ information.\n   Based on this definition, several threats to the privacy of\
    \ users\n   have been documented [Ziegeldorf] [RFC6973], in particular\n   considering\
    \ the IoT environment and its lifecycle:\n   1.  Identification - refers to the\
    \ identification of the users, their\n       IoT devices, and generated data.\n\
    \   2.  Localization - relates to the capability of locating a user and\n    \
    \   even tracking them, e.g., by tracking MAC addresses in Wi-Fi or\n       Bluetooth.\n\
    \   3.  Profiling - is about creating a profile of the user and their\n      \
    \ preferences.\n   4.  Interaction - occurs when a user has been profiled and\
    \ a given\n       interaction is preferred, presenting (for example, visually)\
    \ some\n       information that discloses private information.\n   5.  Lifecycle\
    \ transitions - take place when devices are, for example,\n       sold without\
    \ properly removing private data.\n   6.  Inventory attacks - happen if specific\
    \ information about IoT\n       devices in possession of a user is disclosed.\n\
    \   7.  Linkage - is about when information of two of more IoT systems\n     \
    \  (or other data sets) is combined so that a broader view of the\n       personal\
    \ data captured can be created.\n   When IoT systems are deployed, the above issues\
    \ should be considered\n   to ensure that private data remains private.  These\
    \ issues are\n   particularly challenging in environments in which multiple users\
    \ with\n   different privacy preferences interact with the same IoT devices.\n\
    \   For example, an IoT device controlled by user A (low privacy\n   settings)\
    \ might leak private information about another user B (high\n   privacy settings).\
    \  How to deal with these threats in practice is an\n   area of ongoing research.\n"
- title: 5.10.  Reverse-Engineering Considerations
  contents:
  - "5.10.  Reverse-Engineering Considerations\n   Many IoT devices are resource constrained\
    \ and often deployed in\n   unattended environments.  Some of these devices can\
    \ also be purchased\n   off the shelf or online without any credential-provisioning\
    \ process.\n   Therefore, an attacker can have direct access to the device and\
    \ apply\n   advanced techniques to retrieve information that a traditional black-\n\
    \   box model does not consider.  Examples of those techniques are side-\n   channel\
    \ attacks or code disassembly.  By doing this, the attacker can\n   try to retrieve\
    \ data such as:\n   1.  Long-term keys.  These long-term keys can be extracted\
    \ by means\n       of a side-channel attack or reverse engineering.  If these\
    \ keys\n       are exposed, then they might be used to perform attacks on\n  \
    \     devices deployed in other locations.\n   2.  Source code.  Extraction of\
    \ source code might allow the attacker\n       to determine bugs or find exploits\
    \ to perform other types of\n       attacks.  The attacker might also just sell\
    \ the source code.\n   3.  Proprietary algorithms.  The attacker can analyze these\n\
    \       algorithms gaining valuable know-how.  The attacker can also\n       create\
    \ copies of the product (based on those proprietary\n       algorithms) or modify\
    \ the algorithms to perform more advanced\n       attacks.\n   4.  Configuration\
    \ or personal data.  The attacker might be able to\n       read personal data,\
    \ e.g., healthcare data, that has been stored\n       on a device.\n   One existing\
    \ solution to prevent such data leaks is the use of a\n   secure element, a tamper-resistant\
    \ device that is capable of securely\n   hosting applications and their confidential\
    \ data.  Another potential\n   solution is the usage of a Physical Unclonable\
    \ Function (PUF) that\n   serves as unique digital fingerprint of a hardware device.\
    \  PUFs can\n   also enable other functionalities such as secure key storage.\n\
    \   Protection against such data leakage patterns is not trivial since\n   devices\
    \ are inherently resource-constrained.  An open question is\n   whether there\
    \ are any viable techniques to protect IoT devices and\n   the data in the devices\
    \ in such an adversarial model.\n"
- title: 5.11.  Trustworthy IoT Operation
  contents:
  - "5.11.  Trustworthy IoT Operation\n   Flaws in the design and implementation of\
    \ IoT devices and networks\n   can lead to security vulnerabilities.  A common\
    \ flaw is the use of\n   well-known or easy-to-guess passwords for configuration\
    \ of IoT\n   devices.  Many such compromised IoT devices can be found on the\n\
    \   Internet by means of tools such as Shodan [shodan].  Once discovered,\n  \
    \ these compromised devices can be exploited at scale -- for example,\n   to launch\
    \ DDoS attacks.  Dyn, a major DNS service provider, was\n   attacked by means\
    \ of a DDoS attack originating from a large IoT\n   botnet composed of thousands\
    \ of compromised IP cameras [Dyn-Attack].\n   There are several open research\
    \ questions in this area:\n   1.  How to avoid vulnerabilities in IoT devices\
    \ that can lead to\n       large-scale attacks?\n   2.  How to detect sophisticated\
    \ attacks against IoT devices?\n   3.  How to prevent attackers from exploiting\
    \ known vulnerabilities at\n       a large scale?\n   Some ideas are being explored\
    \ to address this issue.  One of the\n   approaches relies on the use of Manufacturer\
    \ Usage Description (MUD)\n   files [RFC8520].  As explained earlier, this proposal\
    \ requires IoT\n   devices to disclose the location of their MUD file to the network\n\
    \   during installation.  The network can then (i) retrieve those files,\n   (ii)\
    \ learn from the manufacturers the intended usage of the devices\n   (for example,\
    \ which services they need to access), and then (iii)\n   create suitable filters\
    \ and firewall rules.\n"
- title: 6.  Conclusions and Next Steps
  contents:
  - "6.  Conclusions and Next Steps\n   This document provides IoT security researchers,\
    \ system designers,\n   and implementers with an overview of security requirements\
    \ in the IP-\n   based Internet of Things.  We discuss the security threats, state\
    \ of\n   the art, and challenges.\n   Although plenty of steps have been realized\
    \ during the last few years\n   (summarized in Section 4.1) and many organizations\
    \ are publishing\n   general recommendations describing how IoT should be secured\n\
    \   (Section 4.3), there are many challenges ahead that require further\n   attention.\
    \  Challenges of particular importance are bootstrapping of\n   security, group\
    \ security, secure software updates, long-term security\n   and quantum-resistance,\
    \ privacy protection, data leakage prevention\n   -- where data could be cryptographic\
    \ keys, personal data, or even\n   algorithms -- and ensuring trustworthy IoT\
    \ operation.\n   Authors of new IoT specifications and implementers need to consider\n\
    \   how all the security challenges discussed in this document (and those\n  \
    \ that emerge later) affect their work.  The authors of IoT\n   specifications\
    \ need to put in a real effort towards not only\n   addressing the security challenges\
    \ but also clearly documenting how\n   the security challenges are addressed.\
    \  This would reduce the chances\n   of security vulnerabilities in the code written\
    \ by implementers of\n   those specifications.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This entire memo deals with security issues.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [ACE-DTLS] Gerdes, S., Bergmann, O., Bormann,\
    \ C., Selander, G., and\n              L. Seitz, \"Datagram Transport Layer Security\
    \ (DTLS)\n              Profile for Authentication and Authorization for\n   \
    \           Constrained Environments (ACE)\", Work in Progress,\n            \
    \  draft-ietf-ace-dtls-authorize-08, April 2019.\n   [ACE-OAuth]\n           \
    \   Seitz, L., Selander, G., Wahlstroem, E., Erdtman, S., and\n              H.\
    \ Tschofenig, \"Authentication and Authorization for\n              Constrained\
    \ Environments (ACE) using the OAuth 2.0\n              Framework (ACE-OAuth)\"\
    , Work in Progress, draft-ietf-ace-\n              oauth-authz-24, March 2019.\n\
    \   [ARCH-6TiSCH]\n              Thubert, P., \"An Architecture for IPv6 over\
    \ the TSCH mode\n              of IEEE 802.15.4\", Work in Progress, draft-ietf-6tisch-\n\
    \              architecture-20, March 2019.\n   [Article29]\n              Article\
    \ 29 Data Protection Working Party, \"Opinion 8/2014\n              on the Recent\
    \ Developments on the Internet of Things\",\n              WP 223, September 2014,\
    \ <https://ec.europa.eu/justice/\n              article-29/documentation/opinion-\n\
    \              recommendation/files/2014/wp223_en.pdf>.\n   [AUTO-ID]  \"Auto-ID\
    \ Labs\", September 2010,\n              <https://www.autoidlabs.org/>.\n   [BACNET]\
    \   American Society of Heating, Refrigerating and Air-\n              Conditioning\
    \ Engineers (ASHRAE), \"BACnet\", February 2011,\n              <http://www.bacnet.org>.\n\
    \   [BITAG]    Broadband Internet Technical Advisory Group, \"Internet of\n  \
    \            Things (IoT) Security and Privacy Recommendations\",\n          \
    \    November 2016, <https://www.bitag.org/report-internet-of-\n             \
    \ things-security-privacy-recommendations.php>.\n   [BOOTSTRAP]\n            \
    \  Sarikaya, B., Sethi, M., and D. Garcia-Carillo, \"Secure\n              IoT\
    \ Bootstrapping: A Survey\", Work in Progress,\n              draft-sarikaya-t2trg-sbootstrapping-06,\
    \ January 2019.\n   [C2PQ]     Hoffman, P., \"The Transition from Classical to\
    \ Post-\n              Quantum Cryptography\", Work in Progress, draft-hoffman-\n\
    \              c2pq-04, August 2018.\n   [cctv]     \"Backdoor In MVPower DVR\
    \ Firmware Sends CCTV Stills To an\n              Email Address In China\", February\
    \ 2016,\n              <https://hardware.slashdot.org/story/16/02/17/0422259/\n\
    \              backdoor-in-mvpower-dvr-firmware-sends-cctv-stills-to-an-\n   \
    \           email-address-in-china>.\n   [ChaCha]   Bernstein, D., \"ChaCha, a\
    \ variant of Salsa20\", January\n              2008, <http://cr.yp.to/chacha/chacha-20080128.pdf>.\n\
    \   [CSA]      Cloud Security Alliance Mobile Working Group, \"Security\n    \
    \          Guidance for Early Adopters of the Internet of Things\n           \
    \   (IoT)\", April 2015,\n              <https://downloads.cloudsecurityalliance.org/whitepapers/S\n\
    \              ecurity_Guidance_for_Early_Adopters_of_the_Internet_of_Thi\n  \
    \            ngs.pdf>.\n   [DALI]     DALIbyDesign, \"DALI Explained\", February\
    \ 2011,\n              <http://www.dalibydesign.us/dali.html>.\n   [Daniel]  \
    \ Park, S., Kim, K., Haddad, W., Chakrabarti, S., and J.\n              Laganier,\
    \ \"IPv6 over Low Power WPAN Security Analysis\",\n              Work in Progress,\
    \ draft-daniel-6lowpan-security-analysis-\n              05, March 2011.\n   [DCMS]\
    \     UK Department for Digital Culture, Media & Sport, \"Secure\n           \
    \   by Design: Improving the cyber security of consumer\n              Internet\
    \ of Things Report\", March 2018,\n              <https://www.gov.uk/government/publications/\n\
    \              secure-by-design-report>.\n   [DHS]      U.S. Department of Homeland\
    \ Security, \"Strategic\n              Principles For Securing the Internet of\
    \ Things (IoT)\",\n              November 2016,\n              <https://www.dhs.gov/sites/default/files/publications/\n\
    \              Strategic_Principles_for_Securing_the_Internet_of_Things-\n   \
    \           2016-1115-FINAL....pdf>.\n   [Diet-ESP] Migault, D., Guggemos, T.,\
    \ Bormann, C., and D. Schinazi,\n              \"ESP Header Compression and Diet-ESP\"\
    , Work in Progress,\n              draft-mglt-ipsecme-diet-esp-07, March 2019.\n\
    \   [Dyn-Attack]\n              Oracle Dyn, \"Dyn Analysis Summary Of Friday October\
    \ 21\n              Attack\", October 2016, <https://dyn.com/blog/\n         \
    \     dyn-analysis-summary-of-friday-october-21-attack/>.\n   [ecc25519] Bernstein,\
    \ D., \"Curve25519: new Diffie-Hellman speed\n              records\", February\
    \ 2006,\n              <https://cr.yp.to/ecdh/curve25519-20060209.pdf>.\n   [ECSO]\
    \     \"European Cyber Security Organisation\",\n              <https://www.ecs-org.eu/>.\n\
    \   [ENISA-ICS]\n              European Union Agency for Network and Information\n\
    \              Security, \"Communication network dependencies for ICS/\n     \
    \         SCADA Systems\", February 2017,\n              <https://www.enisa.europa.eu/publications/\n\
    \              ics-scada-dependencies>.\n   [ETSI-GR-QSC-001]\n              European\
    \ Telecommunications Standards Institute (ETSI),\n              \"Quantum-Safe\
    \ Cryptography (QSC); Quantum-safe algorithmic\n              framework\", ETSI\
    \ GR QSC 001, July 2016,\n              <https://www.etsi.org/deliver/etsi_gr/\n\
    \              QSC/001_099/001/01.01.01_60/gr_qsc001v010101p.pdf>.\n   [Fairhair]\
    \ \"The Fairhair Alliance\",\n              <https://www.fairhair-alliance.org/>.\n\
    \   [FCC]      US Federal Communications Commission, Chairman Tom Wheeler\n  \
    \            to Senator Mark Warner, December 2016,\n              <https://docs.fcc.gov/public/attachments/\n\
    \              DOC-342761A1.pdf>.\n   [FTCreport]\n              US Federal Trade\
    \ Commission, \"FTC Report on Internet of\n              Things Urges Companies\
    \ to Adopt Best Practices to Address\n              Consumer Privacy and Security\
    \ Risks\", January 2015,\n              <https://www.ftc.gov/news-events/press-releases/2015/01/\n\
    \              ftc-report-internet-things-urges-companies-adopt-best-\n      \
    \        practices>.\n   [GDPR]     \"The EU General Data Protection Regulation\"\
    ,\n              <https://www.eugdpr.org>.\n   [GSMAsecurity]\n              \"\
    GSMA IoT Security Guidelines and Assessment\",\n              <http://www.gsma.com/connectedliving/future-iot-networks/\n\
    \              iot-security-guidelines>.\n   [HIP-DEX]  Moskowitz, R. and R. Hummen,\
    \ \"HIP Diet EXchange (DEX)\",\n              Work in Progress, draft-ietf-hip-dex-06,\
    \ December 2017.\n   [IEEE802ah]\n              IEEE, \"Status of Project IEEE\
    \ 802.11ah\", IEEE P802.11 -\n              Task Group AH - Meeting Update,\n\
    \              <http://www.ieee802.org/11/Reports/tgah_update.htm>.\n   [IIoT]\
    \     \"Industrial Internet Consortium\",\n              <http://www.iiconsortium.org>.\n\
    \   [IoTSecFoundation]\n              Internet of Things Security Foundation,\
    \ \"Establishing\n              Principles for Internet of Things Security\",\n\
    \              <https://iotsecurityfoundation.org/establishing-\n            \
    \  principles-for-internet-of-things-security>.\n   [IPv6-over-NFC]\n        \
    \      Choi, Y., Hong, Y., Youn, J., Kim, D., and J. Choi,\n              \"Transmission\
    \ of IPv6 Packets over Near Field\n              Communication\", Work in Progress,\
    \ draft-ietf-6lo-nfc-13,\n              February 2019.\n   [ISOC-OTA] Internet\
    \ Society, \"Online Trust Alliance (OTA)\",\n              <https://www.internetsociety.org/ota/>.\n\
    \   [LoRa]     \"LoRa Alliance\", <https://www.lora-alliance.org/>.\n   [LWM2M]\
    \    OMA SpecWorks, \"Lightweight M2M (LWM2M)\",\n              <http://openmobilealliance.org/iot/lightweight-m2m-lwm2m>.\n\
    \   [Mirai]    Kolias, C., Kambourakis, G., Stavrou, A., and J. Voas,,\n     \
    \         \"DDoS in the IoT: Mirai and Other Botnets\", Computer,\n          \
    \    Vol. 50, Issue 7, DOI 10.1109/MC.2017.201, July 2017,\n              <https://ieeexplore.ieee.org/document/7971869>.\n\
    \   [Moore]    Moore, K., Barnes, R., and H. Tschofenig, \"Best Current\n    \
    \          Practices for Securing Internet of Things (IoT) Devices\",\n      \
    \        Work in Progress, draft-moore-iot-security-bcp-01, July\n           \
    \   2017.\n   [MULTICAST]\n              Tiloca, M., Selander, G., Palombini,\
    \ F., and J. Park,\n              \"Group OSCORE - Secure Group Communication\
    \ for CoAP\", Work\n              in Progress, draft-ietf-core-oscore-groupcomm-04,\
    \ March\n              2019.\n   [NB-IoT]   Qualcomm Incorporated, \"New Work\
    \ Item: NarrowBand IOT (NB-\n              IOT)\", September 2015,\n         \
    \     <http://www.3gpp.org/ftp/tsg_ran/TSG_RAN/TSGR_69/Docs/\n              RP-151621.zip>.\n\
    \   [NHTSA]    National Highway Traffic Safety Administration,\n             \
    \ \"Cybersecurity Best Practices for Modern Vehicles\", Report\n             \
    \ No. DOT HS 812 333, October 2016,\n              <https://www.nhtsa.gov/staticfiles/nvs/\n\
    \              pdf/812333_CybersecurityForModernVehicles.pdf>.\n   [NIST-Guide]\n\
    \              Ross, R., McEvilley, M., and J. Oren, \"Systems Security\n    \
    \          Engineering: Considerations for a Multidisciplinary\n             \
    \ Approach in the Engineering of Trustworthy Secure\n              Systems\",\
    \ NIST Special Publication 800-160,\n              DOI 10.6028/NIST.SP.800-160,\
    \ November 2016,\n              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800\\ -160.pdf>.\n   [NIST-LW-2016]\n              Sonmez\
    \ Turan, M., \"NIST's Lightweight Crypto Project\",\n              October 2016,\
    \ <https://www.nist.gov/sites/default/files/\n              documents/2016/10/17/\n\
    \              sonmez-turan-presentation-lwc2016.pdf>.\n   [NIST-LW-PROJECT]\n\
    \              NIST, \"Lightweight Cryptography\", <https://www.nist.gov/\n  \
    \            programs-projects/lightweight-cryptography>.\n   [NISTSP800-122]\n\
    \              McCallister, E., Grance, T., and K. Scarfone, \"Guide to\n    \
    \          Protecting the Confidentiality of Personally Identifiable\n       \
    \       Information (PII)\", NIST Special Publication 800-122,\n             \
    \ April 2010, <https://nvlpubs.nist.gov/nistpubs/legacy/sp/\n              nistspecialpublication800-122.pdf>.\n\
    \   [NISTSP800-30r1]\n              National Institute of Standards and Technology,\
    \ \"Guide for\n              Conducting Risk Assessments\", NIST Special\n   \
    \           Publication 800-30 Revision 1, September 2012,\n              <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/\n\
    \              nistspecialpublication800-30r1.pdf>.\n   [NISTSP800-34r1]\n   \
    \           Swanson, M., Bowen, P., Phillips, A., Gallup, D., and D.\n       \
    \       Lynes, \"Contingency Planning Guide for Federal Information\n        \
    \      Systems\", NIST Special Publication 800-34 Revision 1, May\n          \
    \    2010, <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/\n              nistspecialpublication800-34r1.pdf>.\n\
    \   [OCF]      \"Open Connectivity Foundation\",\n              <https://openconnectivity.org/>.\n\
    \   [OMASpecWorks]\n              \"OMA SpecWorks\",\n              <https://www.omaspecworks.org/ipso-alliance>.\n\
    \   [OneM2M]   \"OneM2M\", <http://www.onem2m.org>.\n   [OSCORE]   Selander, G.,\
    \ Mattsson, J., Palombini, F., and L. Seitz,\n              \"Object Security\
    \ for Constrained RESTful Environments\n              (OSCORE)\", Work in Progress,\
    \ draft-ietf-core-object-\n              security-16, March 2019.\n   [OWASP]\
    \    The OWASP Foundation, \"IoT Security Guidance\", February\n             \
    \ 2017,\n              <https://www.owasp.org/index.php/IoT_Security_Guidance>.\n\
    \   [RD]       Shelby, Z., Koster, M., Bormann, C., Stok, P., and C.\n       \
    \       Amsuess, Ed., \"CoRE Resource Directory\", Work in\n              Progress,\
    \ draft-ietf-core-resource-directory-20, March\n              2019.\n   [RFC2818]\
    \  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC3748]\
    \  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.\n              Levkowetz,\
    \ Ed., \"Extensible Authentication Protocol\n              (EAP)\", RFC 3748,\
    \ DOI 10.17487/RFC3748, June 2004,\n              <https://www.rfc-editor.org/info/rfc3748>.\n\
    \   [RFC3756]  Nikander, P., Ed., Kempf, J., and E. Nordmark, \"IPv6\n       \
    \       Neighbor Discovery (ND) Trust Models and Threats\",\n              RFC\
    \ 3756, DOI 10.17487/RFC3756, May 2004,\n              <https://www.rfc-editor.org/info/rfc3756>.\n\
    \   [RFC3833]  Atkins, D. and R. Austein, \"Threat Analysis of the Domain\n  \
    \            Name System (DNS)\", RFC 3833, DOI 10.17487/RFC3833, August\n   \
    \           2004, <https://www.rfc-editor.org/info/rfc3833>.\n   [RFC4016]  Parthasarathy,\
    \ M., \"Protocol for Carrying Authentication\n              and Network Access\
    \ (PANA) Threat Analysis and Security\n              Requirements\", RFC 4016,\
    \ DOI 10.17487/RFC4016, March 2005,\n              <https://www.rfc-editor.org/info/rfc4016>.\n\
    \   [RFC4108]  Housley, R., \"Using Cryptographic Message Syntax (CMS) to\n  \
    \            Protect Firmware Packages\", RFC 4108,\n              DOI 10.17487/RFC4108,\
    \ August 2005,\n              <https://www.rfc-editor.org/info/rfc4108>.\n   [RFC4120]\
    \  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos\
    \ Network Authentication Service (V5)\", RFC 4120,\n              DOI 10.17487/RFC4120,\
    \ July 2005,\n              <https://www.rfc-editor.org/info/rfc4120>.\n   [RFC4422]\
    \  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n              Authentication\
    \ and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,\
    \ June 2006,\n              <https://www.rfc-editor.org/info/rfc4422>.\n   [RFC4555]\
    \  Eronen, P., \"IKEv2 Mobility and Multihoming Protocol\n              (MOBIKE)\"\
    , RFC 4555, DOI 10.17487/RFC4555, June 2006,\n              <https://www.rfc-editor.org/info/rfc4555>.\n\
    \   [RFC4621]  Kivinen, T. and H. Tschofenig, \"Design of the IKEv2\n        \
    \      Mobility and Multihoming (MOBIKE) Protocol\", RFC 4621,\n             \
    \ DOI 10.17487/RFC4621, August 2006,\n              <https://www.rfc-editor.org/info/rfc4621>.\n\
    \   [RFC4738]  Ignjatic, D., Dondeti, L., Audet, F., and P. Lin, \"MIKEY-\n  \
    \            RSA-R: An Additional Mode of Key Distribution in\n              Multimedia\
    \ Internet KEYing (MIKEY)\", RFC 4738,\n              DOI 10.17487/RFC4738, November\
    \ 2006,\n              <https://www.rfc-editor.org/info/rfc4738>.\n   [RFC4919]\
    \  Kushalnagar, N., Montenegro, G., and C. Schumacher, \"IPv6\n              over\
    \ Low-Power Wireless Personal Area Networks (6LoWPANs):\n              Overview,\
    \ Assumptions, Problem Statement, and Goals\",\n              RFC 4919, DOI 10.17487/RFC4919,\
    \ August 2007,\n              <https://www.rfc-editor.org/info/rfc4919>.\n   [RFC4944]\
    \  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,\n              \"\
    Transmission of IPv6 Packets over IEEE 802.15.4\n              Networks\", RFC\
    \ 4944, DOI 10.17487/RFC4944, September 2007,\n              <https://www.rfc-editor.org/info/rfc4944>.\n\
    \   [RFC5191]  Forsberg, D., Ohba, Y., Ed., Patil, B., Tschofenig, H.,\n     \
    \         and A. Yegin, \"Protocol for Carrying Authentication for\n         \
    \     Network Access (PANA)\", RFC 5191, DOI 10.17487/RFC5191,\n             \
    \ May 2008, <https://www.rfc-editor.org/info/rfc5191>.\n   [RFC5652]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652,\
    \ DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC5713]  Moustafa, H., Tschofenig, H., and S. De Cnodder, \"Security\n \
    \             Threats and Security Requirements for the Access Node\n        \
    \      Control Protocol (ANCP)\", RFC 5713, DOI 10.17487/RFC5713,\n          \
    \    January 2010, <https://www.rfc-editor.org/info/rfc5713>.\n   [RFC5903]  Fu,\
    \ D. and J. Solinas, \"Elliptic Curve Groups modulo a\n              Prime (ECP\
    \ Groups) for IKE and IKEv2\", RFC 5903,\n              DOI 10.17487/RFC5903,\
    \ June 2010,\n              <https://www.rfc-editor.org/info/rfc5903>.\n   [RFC6024]\
    \  Reddy, R. and C. Wallace, \"Trust Anchor Management\n              Requirements\"\
    , RFC 6024, DOI 10.17487/RFC6024, October\n              2010, <https://www.rfc-editor.org/info/rfc6024>.\n\
    \   [RFC6272]  Baker, F. and D. Meyer, \"Internet Protocols for the Smart\n  \
    \            Grid\", RFC 6272, DOI 10.17487/RFC6272, June 2011,\n            \
    \  <https://www.rfc-editor.org/info/rfc6272>.\n   [RFC6347]  Rescorla, E. and\
    \ N. Modadugu, \"Datagram Transport Layer\n              Security Version 1.2\"\
    , RFC 6347, DOI 10.17487/RFC6347,\n              January 2012, <https://www.rfc-editor.org/info/rfc6347>.\n\
    \   [RFC6550]  Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J.,\n     \
    \         Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur,\n          \
    \    JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for\n              Low-Power\
    \ and Lossy Networks\", RFC 6550,\n              DOI 10.17487/RFC6550, March 2012,\n\
    \              <https://www.rfc-editor.org/info/rfc6550>.\n   [RFC6551]  Vasseur,\
    \ JP., Ed., Kim, M., Ed., Pister, K., Dejean, N.,\n              and D. Barthel,\
    \ \"Routing Metrics Used for Path Calculation\n              in Low-Power and\
    \ Lossy Networks\", RFC 6551,\n              DOI 10.17487/RFC6551, March 2012,\n\
    \              <https://www.rfc-editor.org/info/rfc6551>.\n   [RFC6568]  Kim,\
    \ E., Kaspar, D., and JP. Vasseur, \"Design and\n              Application Spaces\
    \ for IPv6 over Low-Power Wireless\n              Personal Area Networks (6LoWPANs)\"\
    , RFC 6568,\n              DOI 10.17487/RFC6568, April 2012,\n              <https://www.rfc-editor.org/info/rfc6568>.\n\
    \   [RFC6690]  Shelby, Z., \"Constrained RESTful Environments (CoRE) Link\n  \
    \            Format\", RFC 6690, DOI 10.17487/RFC6690, August 2012,\n        \
    \      <https://www.rfc-editor.org/info/rfc6690>.\n   [RFC6749]  Hardt, D., Ed.,\
    \ \"The OAuth 2.0 Authorization Framework\",\n              RFC 6749, DOI 10.17487/RFC6749,\
    \ October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n  \
    \ [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n          \
    \    Morris, J., Hansen, M., and R. Smith, \"Privacy\n              Considerations\
    \ for Internet Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc6973>.\n   [RFC7049]\
    \  Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation\
    \ (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n\
    \   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, \"Terminology for\n   \
    \           Constrained-Node Networks\", RFC 7228,\n              DOI 10.17487/RFC7228,\
    \ May 2014,\n              <https://www.rfc-editor.org/info/rfc7228>.\n   [RFC7252]\
    \  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application\
    \ Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n\
    \              <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC7296]  Kaufman,\
    \ C., Hoffman, P., Nir, Y., Eronen, P., and T.\n              Kivinen, \"Internet\
    \ Key Exchange Protocol Version 2\n              (IKEv2)\", STD 79, RFC 7296,\
    \ DOI 10.17487/RFC7296, October\n              2014, <https://www.rfc-editor.org/info/rfc7296>.\n\
    \   [RFC7401]  Moskowitz, R., Ed., Heer, T., Jokela, P., and T.\n            \
    \  Henderson, \"Host Identity Protocol Version 2 (HIPv2)\",\n              RFC\
    \ 7401, DOI 10.17487/RFC7401, April 2015,\n              <https://www.rfc-editor.org/info/rfc7401>.\n\
    \   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015,\
    \ <https://www.rfc-editor.org/info/rfc7515>.\n   [RFC7516]  Jones, M. and J. Hildebrand,\
    \ \"JSON Web Encryption (JWE)\",\n              RFC 7516, DOI 10.17487/RFC7516,\
    \ May 2015,\n              <https://www.rfc-editor.org/info/rfc7516>.\n   [RFC7517]\
    \  Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI 10.17487/RFC7517,\
    \ May 2015,\n              <https://www.rfc-editor.org/info/rfc7517>.\n   [RFC7519]\
    \  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\"\
    , RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n\
    \   [RFC7520]  Miller, M., \"Examples of Protecting Content Using JSON\n     \
    \         Object Signing and Encryption (JOSE)\", RFC 7520,\n              DOI\
    \ 10.17487/RFC7520, May 2015,\n              <https://www.rfc-editor.org/info/rfc7520>.\n\
    \   [RFC7668]  Nieminen, J., Savolainen, T., Isomaki, M., Patil, B.,\n       \
    \       Shelby, Z., and C. Gomez, \"IPv6 over BLUETOOTH(R) Low\n             \
    \ Energy\", RFC 7668, DOI 10.17487/RFC7668, October 2015,\n              <https://www.rfc-editor.org/info/rfc7668>.\n\
    \   [RFC7696]  Housley, R., \"Guidelines for Cryptographic Algorithm\n       \
    \       Agility and Selecting Mandatory-to-Implement Algorithms\",\n         \
    \     BCP 201, RFC 7696, DOI 10.17487/RFC7696, November 2015,\n              <https://www.rfc-editor.org/info/rfc7696>.\n\
    \   [RFC7744]  Seitz, L., Ed., Gerdes, S., Ed., Selander, G., Mani, M.,\n    \
    \          and S. Kumar, \"Use Cases for Authentication and\n              Authorization\
    \ in Constrained Environments\", RFC 7744,\n              DOI 10.17487/RFC7744,\
    \ January 2016,\n              <https://www.rfc-editor.org/info/rfc7744>.\n  \
    \ [RFC7815]  Kivinen, T., \"Minimal Internet Key Exchange Version 2\n        \
    \      (IKEv2) Initiator Implementation\", RFC 7815,\n              DOI 10.17487/RFC7815,\
    \ March 2016,\n              <https://www.rfc-editor.org/info/rfc7815>.\n   [RFC7925]\
    \  Tschofenig, H., Ed. and T. Fossati, \"Transport Layer\n              Security\
    \ (TLS) / Datagram Transport Layer Security (DTLS)\n              Profiles for\
    \ the Internet of Things\", RFC 7925,\n              DOI 10.17487/RFC7925, July\
    \ 2016,\n              <https://www.rfc-editor.org/info/rfc7925>.\n   [RFC8046]\
    \  Henderson, T., Ed., Vogt, C., and J. Arkko, \"Host Mobility\n             \
    \ with the Host Identity Protocol\", RFC 8046,\n              DOI 10.17487/RFC8046,\
    \ February 2017,\n              <https://www.rfc-editor.org/info/rfc8046>.\n \
    \  [RFC8105]  Mariager, P., Petersen, J., Ed., Shelby, Z., Van de Logt,\n    \
    \          M., and D. Barthel, \"Transmission of IPv6 Packets over\n         \
    \     Digital Enhanced Cordless Telecommunications (DECT) Ultra\n            \
    \  Low Energy (ULE)\", RFC 8105, DOI 10.17487/RFC8105, May\n              2017,\
    \ <https://www.rfc-editor.org/info/rfc8105>.\n   [RFC8152]  Schaad, J., \"CBOR\
    \ Object Signing and Encryption (COSE)\",\n              RFC 8152, DOI 10.17487/RFC8152,\
    \ July 2017,\n              <https://www.rfc-editor.org/info/rfc8152>.\n   [RFC8240]\
    \  Tschofenig, H. and S. Farrell, \"Report from the Internet\n              of\
    \ Things Software Update (IoTSU) Workshop 2016\",\n              RFC 8240, DOI\
    \ 10.17487/RFC8240, September 2017,\n              <https://www.rfc-editor.org/info/rfc8240>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC8376]  Farrell, S., Ed., \"Low-Power Wide Area Network (LPWAN)\n      \
    \        Overview\", RFC 8376, DOI 10.17487/RFC8376, May 2018,\n             \
    \ <https://www.rfc-editor.org/info/rfc8376>.\n   [RFC8387]  Sethi, M., Arkko,\
    \ J., Keranen, A., and H. Back, \"Practical\n              Considerations and\
    \ Implementation Experiences in Securing\n              Smart Object Networks\"\
    , RFC 8387, DOI 10.17487/RFC8387,\n              May 2018, <https://www.rfc-editor.org/info/rfc8387>.\n\
    \   [RFC8428]  Jennings, C., Shelby, Z., Arkko, J., Keranen, A., and C.\n    \
    \          Bormann, \"Sensor Measurement Lists (SenML)\", RFC 8428,\n        \
    \      DOI 10.17487/RFC8428, August 2018,\n              <https://www.rfc-editor.org/info/rfc8428>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8520]  Lear, E.,\
    \ Droms, R., and D. Romascanu, \"Manufacturer Usage\n              Description\
    \ Specification\", RFC 8520,\n              DOI 10.17487/RFC8520, March 2019,\n\
    \              <https://www.rfc-editor.org/info/rfc8520>.\n   [RG-T2TRG] IRTF,\
    \ \"Thing-to-Thing Research Group (T2TRG)\",\n              <https://datatracker.ietf.org/rg/t2trg/charter/>.\n\
    \   [SchneierSecurity]\n              Schneier, B., \"The Internet of Things Is\
    \ Wildly Insecure\n              -- And Often Unpatchable\", January 2014,\n \
    \             <https://www.schneier.com/essays/archives/2014/01/\n           \
    \   the_internet_of_thin.html>.\n   [SEAL]     Microsoft, \"Microsoft SEAL: Fast\
    \ and Easy-to-Use\n              Homomorphic Encryption Library\",\n         \
    \     <https://www.microsoft.com/en-us/research/project/\n              microsoft-seal/>.\n\
    \   [shodan]   \"Shodan\", <https://www.shodan.io>.\n   [sigfox]   \"Sigfox -\
    \ The Global Communications Service Provider for\n              the Internet of\
    \ Things (IoT)\", <https://www.sigfox.com>.\n   [Thread]   \"Thread\", <http://threadgroup.org>.\n\
    \   [TR69]     Oppenheim, L. and S. Tal, \"Too Many Cooks - Exploiting the\n \
    \             Internet-of-TR-069-Things\", December 2014,\n              <https://media.ccc.de/v/31c3_-_6166_-_en_-_saal_6_-\n\
    \              _201412282145_-_too_many_cooks_-_exploiting_the_internet-\n   \
    \           of-tr-069-things_-_lior_oppenheim_-_shahar_tal>.\n   [venona-project]\n\
    \              National Security Agency | Central Security Service,\n        \
    \      \"VENONA\", <https://www.nsa.gov/news-features/declassified-\n        \
    \      documents/venona/index.shtml>.\n   [WG-6lo]   IETF, \"IPv6 over Networks\
    \ of Resource-constrained Nodes\n              (6lo)\", <https://datatracker.ietf.org/wg/6lo/charter/>.\n\
    \   [WG-6LoWPAN]\n              IETF, \"IPv6 over Low power WPAN (6lowpan)\",\n\
    \              <http://datatracker.ietf.org/wg/6lowpan/charter/>.\n   [WG-ACE]\
    \   IETF, \"Authentication and Authorization for Constrained\n              Environments\
    \ (ace)\",\n              <https://datatracker.ietf.org/wg/ace/charter/>.\n  \
    \ [WG-ACME]  IETF, \"Automated Certificate Management Environment\n          \
    \    (acme)\", <https://datatracker.ietf.org/wg/acme/charter/>.\n   [WG-CoRE]\
    \  IETF, \"Constrained RESTful Environment (core)\",\n              <https://datatracker.ietf.org/wg/core/charter/>.\n\
    \   [WG-LPWAN] IETF, \"IPv6 over Low Power Wide-Area Networks (lpwan)\",\n   \
    \           <https://datatracker.ietf.org/wg/lpwan/charter/>.\n   [WG-LWIG]  IETF,\
    \ \"Light-Weight Implementation Guidance (lwig)\",\n              <https://datatracker.ietf.org/wg/lwig/charter/>.\n\
    \   [WG-MSEC]  IETF, \"Multicast Security (msec)\",\n              <https://datatracker.ietf.org/wg/msec/charter/>.\n\
    \   [WG-SUIT]  IETF, \"Software Updates for Internet of Things (suit)\",\n   \
    \           <https://datatracker.ietf.org/wg/suit/charter/>.\n   [WG-TEEP]  IETF,\
    \ \"Trusted Execution Environment Provisioning (teep)\",\n              <https://datatracker.ietf.org/wg/teep/charter/>.\n\
    \   [Williams] Williams, M. and J. Barrett, \"Mobile DTLS\", Work in\n       \
    \       Progress, draft-barrett-mobile-dtls-00, March 2009.\n   [wink]     Barrett,\
    \ B., \"Wink's Outage Shows Us How Frustrating Smart\n              Homes Could\
    \ Be\", Wired, Gear, April 2015,\n              <http://www.wired.com/2015/04/smart-home-headaches/>.\n\
    \   [ZB]       \"Zigbee Alliance\", <http://www.zigbee.org/>.\n   [Ziegeldorf]\n\
    \              Ziegeldorf, J., Garcia Morchon, O., and K. Wehrle,\n          \
    \    \"Privacy in the Internet of Things: Threats and\n              Challenges\"\
    , Security and Communication Networks, Vol. 7,\n              Issue 12, pp. 2728-2742,\
    \ DOI 10.1002/sec.795, 2014.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We gratefully acknowledge feedback and fruitful discussion\
    \ with\n   Tobias Heer, Robert Moskowitz, Thorsten Dahm, Hannes Tschofenig,\n\
    \   Carsten Bormann, Barry Raveendran, Ari Keranen, Goran Selander, Fred\n   Baker,\
    \ Vicent Roca, Thomas Fossati, and Eliot Lear.  We acknowledge\n   the additional\
    \ authors of a draft version of this document: Sye Loong\n   Keoh, Rene Hummen,\
    \ and Rene Struik.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Oscar Garcia-Morchon\n   Philips\n   High Tech Campus\
    \ 5\n   Eindhoven, 5656 AE\n   The Netherlands\n   Email: oscar.garcia-morchon@philips.com\n\
    \   Sandeep S. Kumar\n   Signify\n   High Tech Campus 7\n   Eindhoven, 5656 AE\n\
    \   The Netherlands\n   Email: sandeep.kumar@signify.com\n   Mohit Sethi\n   Ericsson\n\
    \   Jorvas  02420\n   Finland\n   Email: mohit@piuha.net\n"
