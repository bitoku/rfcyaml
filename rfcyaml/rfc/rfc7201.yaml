- title: __initial_text__
  contents:
  - '                   Options for Securing RTP Sessions

    '
- title: Abstract
  contents:
  - "Abstract\n   The Real-time Transport Protocol (RTP) is used in a large number\
    \ of\n   different application domains and environments.  This heterogeneity\n\
    \   implies that different security mechanisms are needed to provide\n   services\
    \ such as confidentiality, integrity, and source\n   authentication of RTP and\
    \ RTP Control Protocol (RTCP) packets\n   suitable for the various environments.\
    \  The range of solutions makes\n   it difficult for RTP-based application developers\
    \ to pick the most\n   suitable mechanism.  This document provides an overview\
    \ of a number\n   of security solutions for RTP and gives guidance for developers\
    \ on\n   how to choose the appropriate security mechanism.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7201.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Background  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     2.1.  Point-to-Point Sessions . . . . . . . . . . . . . .\
    \ . . .   5\n     2.2.  Sessions Using an RTP Mixer . . . . . . . . . . . . .\
    \ . .   5\n     2.3.  Sessions Using an RTP Translator  . . . . . . . . . . .\
    \ .   6\n       2.3.1.  Transport Translator (Relay)  . . . . . . . . . . . .\
    \   6\n       2.3.2.  Gateway . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n       2.3.3.  Media Transcoder  . . . . . . . . . . . . . . . . . .   8\n\
    \     2.4.  Any Source Multicast  . . . . . . . . . . . . . . . . . .   8\n  \
    \   2.5.  Source-Specific Multicast . . . . . . . . . . . . . . . .   8\n   3.\
    \  Security Options  . . . . . . . . . . . . . . . . . . . . . .  10\n     3.1.\
    \  Secure RTP  . . . . . . . . . . . . . . . . . . . . . . .  10\n       3.1.1.\
    \  Key Management for SRTP: DTLS-SRTP  . . . . . . . . .  12\n       3.1.2.  Key\
    \ Management for SRTP: MIKEY  . . . . . . . . . . .  14\n       3.1.3.  Key Management\
    \ for SRTP: Security Descriptions  . . .  15\n       3.1.4.  Key Management for\
    \ SRTP: Encrypted Key Transport  . .  16\n       3.1.5.  Key Management for SRTP:\
    \ ZRTP and Other Solutions . .  17\n     3.2.  RTP Legacy Confidentiality  . .\
    \ . . . . . . . . . . . . .  17\n     3.3.  IPsec . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  17\n     3.4.  RTP over TLS over TCP . . . . . . .\
    \ . . . . . . . . . . .  18\n     3.5.  RTP over Datagram TLS (DTLS)  . . . .\
    \ . . . . . . . . . .  18\n     3.6.  Media Content Security/Digital Rights Management\
    \  . . . .  19\n       3.6.1.  ISMA Encryption and Authentication  . . . . . .\
    \ . . .  19\n   4.  Securing RTP Applications . . . . . . . . . . . . . . . .\
    \ . .  20\n     4.1.  Application Requirements  . . . . . . . . . . . . . . .\
    \ .  20\n       4.1.1.  Confidentiality . . . . . . . . . . . . . . . . . . .\
    \  20\n       4.1.2.  Integrity . . . . . . . . . . . . . . . . . . . . . .  21\n\
    \       4.1.3.  Source Authentication . . . . . . . . . . . . . . . .  22\n  \
    \     4.1.4.  Identifiers and Identity  . . . . . . . . . . . . . .  23\n    \
    \   4.1.5.  Privacy . . . . . . . . . . . . . . . . . . . . . . .  24\n     4.2.\
    \  Application Structure . . . . . . . . . . . . . . . . . .  25\n     4.3.  Automatic\
    \ Key Management  . . . . . . . . . . . . . . . .  25\n     4.4.  End-to-End Security\
    \ vs. Tunnels . . . . . . . . . . . . .  25\n     4.5.  Plaintext Keys  . . .\
    \ . . . . . . . . . . . . . . . . . .  26\n     4.6.  Interoperability  . . .\
    \ . . . . . . . . . . . . . . . . .  26\n   5.  Examples  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  26\n     5.1.  Media Security for SIP-Established\
    \ Sessions Using\n           DTLS-SRTP . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  27\n     5.2.  Media Security for WebRTC Sessions  . . . . . . . .\
    \ . . .  27\n     5.3.  IP Multimedia Subsystem (IMS) Media Security  . . . .\
    \ . .  28\n     5.4.  3GPP Packet-Switched Streaming Service (PSS)  . . . . .\
    \ .  29\n     5.5.  RTSP 2.0  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  30\n   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  31\n\
    \   7.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  31\n  \
    \ 8.  Informative References  . . . . . . . . . . . . . . . . . . .  31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Real-time Transport Protocol (RTP) [RFC3550] is widely\
    \ used in a\n   large variety of multimedia applications, including Voice over\
    \ IP\n   (VoIP), centralized multimedia conferencing, sensor data transport,\n\
    \   and Internet television (IPTV) services.  These applications can\n   range\
    \ from point-to-point phone calls, through centralized group\n   teleconferences,\
    \ to large-scale television distribution services.\n   The types of media can\
    \ vary significantly, as can the signaling\n   methods used to establish the RTP\
    \ sessions.\n   So far, this multidimensional heterogeneity has prevented development\n\
    \   of a single security solution that meets the needs of the different\n   applications.\
    \  Instead, a significant number of different solutions\n   have been developed\
    \ to meet different sets of security goals.  This\n   makes it difficult for application\
    \ developers to know what solutions\n   exist and whether their properties are\
    \ appropriate.  This memo gives\n   an overview of the available RTP solutions\
    \ and provides guidance on\n   their applicability for different application domains.\
    \  It also\n   attempts to provide an indication of actual and intended usage\
    \ at the\n   time of writing as additional input to help with considerations such\n\
    \   as interoperability, availability of implementations, etc.  The\n   guidance\
    \ provided is not exhaustive, and this memo does not provide\n   normative recommendations.\n\
    \   It is important that application developers consider the security\n   goals\
    \ and requirements for their application.  The IETF considers it\n   important\
    \ that protocols implement secure modes of operation and\n   makes them available\
    \ to users [RFC3365].  Because of the\n   heterogeneity of RTP applications and\
    \ use cases, however, a single\n   security solution cannot be mandated [RFC7202].\
    \  Instead, application\n   developers need to select mechanisms that provide\
    \ appropriate\n   security for their environment.  It is strongly encouraged that\n\
    \   common mechanisms be used by related applications in common\n   environments.\
    \  The IETF publishes guidelines for specific classes of\n   applications, so\
    \ it is worth searching for such guidelines.\n   The remainder of this document\
    \ is structured as follows.  Section 2\n   provides additional background.  Section\
    \ 3 outlines the available\n   security mechanisms at the time of this writing\
    \ and lists their key\n   security properties and constraints.  Section 4 provides\
    \ guidelines\n   and important aspects to consider when securing an RTP application.\n\
    \   Finally, in Section 5, we give some examples of application domains\n   where\
    \ guidelines for security exist.\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   RTP can be used in a wide variety of topologies due to its\
    \ support\n   for point-to-point sessions, multicast groups, and other topologies\n\
    \   built around different types of RTP middleboxes.  In the following,\n   we\
    \ review the different topologies supported by RTP to understand\n   their implications\
    \ for the security properties and trust relations\n   that can exist in RTP sessions.\n"
- title: 2.1.  Point-to-Point Sessions
  contents:
  - "2.1.  Point-to-Point Sessions\n   The most basic use case is two directly connected\
    \ endpoints, shown in\n   Figure 1, where A has established an RTP session with\
    \ B.  In this\n   case, the RTP security is primarily about ensuring that any\
    \ third\n   party be unable to compromise the confidentiality and integrity of\n\
    \   the media communication.  This requires confidentiality protection of\n  \
    \ the RTP session, integrity protection of the RTP/RTCP packets, and\n   source\
    \ authentication of all the packets to ensure no man-in-the-\n   middle (MITM)\
    \ attack is taking place.\n   The source authentication can also be tied to a\
    \ user or an endpoint's\n   verifiable identity to ensure that the peer knows\
    \ with whom they are\n   communicating.  Here, the combination of the security\
    \ protocol\n   protecting the RTP session (and, hence, the RTP and RTCP traffic)\
    \ and\n   the key management protocol becomes important to determine what\n  \
    \ security claims can be made.\n   +---+         +---+\n   | A |<------->| B |\n\
    \   +---+         +---+\n                     Figure 1: Point-to-Point Topology\n"
- title: 2.2.  Sessions Using an RTP Mixer
  contents:
  - "2.2.  Sessions Using an RTP Mixer\n   An RTP mixer is an RTP session-level middlebox\
    \ around which one can\n   build a multiparty RTP-based conference.  The RTP mixer\
    \ might\n   actually perform media mixing, like mixing audio or compositing video\n\
    \   images into a new media stream being sent from the mixer to a given\n   participant,\
    \ or it might provide a conceptual stream; for example,\n   the video of the current\
    \ active speaker.  From a security point of\n   view, the important features of\
    \ an RTP mixer are that it generates a\n   new media stream, has its own source\
    \ identifier, and does not simply\n   forward the original media.\n   An RTP session\
    \ using a mixer might have a topology like that in\n   Figure 2.  In this example,\
    \ participants A through D each send\n   unicast RTP traffic to the RTP mixer,\
    \ and receive an RTP stream from\n   the mixer, comprising a mixture of the streams\
    \ from the other\n   participants.\n   +---+      +------------+      +---+\n\
    \   | A |<---->|            |<---->| B |\n   +---+      |            |      +---+\n\
    \              |    Mixer   |\n   +---+      |            |      +---+\n   | C\
    \ |<---->|            |<---->| D |\n   +---+      +------------+      +---+\n\
    \                   Figure 2: Example RTP Mixer Topology\n   A consequence of\
    \ an RTP mixer having its own source identifier and\n   acting as an active participant\
    \ towards the other endpoints is that\n   the RTP mixer needs to be a trusted\
    \ device that has access to the\n   security context(s) established.  The RTP\
    \ mixer can also become a\n   security-enforcing entity.  For example, a common\
    \ approach to secure\n   the topology in Figure 2 is to establish a security context\
    \ between\n   the mixer and each participant independently and have the mixer\n\
    \   source authenticate each peer.  The mixer then ensures that one\n   participant\
    \ cannot impersonate another.\n"
- title: 2.3.  Sessions Using an RTP Translator
  contents:
  - "2.3.  Sessions Using an RTP Translator\n   RTP translators are middleboxes that\
    \ provide various levels of\n   in-network media translation and transcoding.\
    \  Their security\n   properties vary widely, depending on which type of operations\
    \ they\n   attempt to perform.  We identify and discuss three different\n   categories\
    \ of RTP translators: transport translators, gateways, and\n   media transcoders.\n"
- title: 2.3.1.  Transport Translator (Relay)
  contents:
  - "2.3.1.  Transport Translator (Relay)\n   A transport translator [RFC5117] operates\
    \ on a level below RTP and\n   RTCP.  It relays the RTP/RTCP traffic from one\
    \ endpoint to one or\n   more other addresses.  This can be done based only on\
    \ IP addresses\n   and transport protocol ports, and each receive port on the\
    \ translator\n   can have a very basic list of where to forward traffic.  Transport\n\
    \   translators also need to implement ingress filtering to prevent\n   random\
    \ traffic from being forwarded that isn't coming from a\n   participant in the\
    \ conference.\n   Figure 3 shows an example transport translator, where traffic\
    \ from\n   any one of the four participants will be forwarded to the other three\n\
    \   participants unchanged.  The resulting topology is very similar to an\n  \
    \ Any Source Multicast (ASM) session (as discussed in Section 2.4) but\n   is\
    \ implemented at the application layer.\n   +---+      +------------+      +---+\n\
    \   | A |<---->|            |<---->| B |\n   +---+      |    Relay   |      +---+\n\
    \              | Translator |\n   +---+      |            |      +---+\n   | C\
    \ |<---->|            |<---->| D |\n   +---+      +------------+      +---+\n\
    \                  Figure 3: RTP Relay Translator Topology\n   A transport translator\
    \ can often operate without needing access to\n   the security context, as long\
    \ as the security mechanism does not\n   provide protection over the transport-layer\
    \ information.  A transport\n   translator does, however, make the group communication\
    \ visible and,\n   thus, can complicate keying and source authentication mechanisms.\n\
    \   This is further discussed in Section 2.4.\n"
- title: 2.3.2.  Gateway
  contents:
  - "2.3.2.  Gateway\n   Gateways are deployed when the endpoints are not fully compatible.\n\
    \   Figure 4 shows an example topology.  The functions a gateway provides\n  \
    \ can be diverse and range from transport-layer relaying between two\n   domains\
    \ not allowing direct communication, via transport or media\n   protocol function\
    \ initiation or termination, to protocol- or media-\n   encoding translation.\
    \  The supported security protocol might even be\n   one of the reasons a gateway\
    \ is needed.\n   +---+      +-----------+      +---+\n   | A |<---->|  Gateway\
    \  |<---->| B |\n   +---+      +-----------+      +---+\n                    \
    \  Figure 4: RTP Gateway Topology\n   The choice of security protocol, and the\
    \ details of the gateway\n   function, will determine if the gateway needs to\
    \ be trusted with\n   access to the application security context.  Many gateways\
    \ need to be\n   trusted by all peers to perform the translation; in other cases,\
    \ some\n   or all peers might not be aware of the presence of the gateway.  The\n\
    \   security protocols have different properties depending on the degree\n   of\
    \ trust and visibility needed.  Ensuring communication is possible\n   without\
    \ trusting the gateway can be a strong incentive for accepting\n   different security\
    \ properties.  Some security solutions will be able\n   to detect the gateways\
    \ as manipulating the media stream, unless the\n   gateway is a trusted device.\n"
- title: 2.3.3.  Media Transcoder
  contents:
  - "2.3.3.  Media Transcoder\n   A media transcoder is a special type of gateway\
    \ device that changes\n   the encoding of the media being transported by RTP.\
    \  The discussion\n   in Section 2.3.2 applies.  A media transcoder alters the\
    \ media data\n   and, thus, needs to be trusted with access to the security context.\n"
- title: 2.4.  Any Source Multicast
  contents:
  - "2.4.  Any Source Multicast\n   Any Source Multicast [RFC1112] is the original\
    \ multicast model where\n   any multicast group participant can send to the multicast\
    \ group and\n   get their packets delivered to all group members (see Figure 5).\n\
    \   This form of communication has interesting security properties due to\n  \
    \ the many-to-many nature of the group.  Source authentication is\n   important,\
    \ but all participants with access to the group security\n   context will have\
    \ the necessary secrets to decrypt and verify the\n   integrity of the traffic.\
    \  Thus, use of any group security context\n   fails if the goal is to separate\
    \ individual sources; alternate\n   solutions are needed.\n              +-----+\n\
    \   +---+     /       \\    +---+\n   | A |----/         \\---| B |\n   +---+\
    \   /           \\  +---+\n          +  Multicast  +\n   +---+   \\  Network \
    \ /  +---+\n   | C |----\\         /---| D |\n   +---+     \\       /    +---+\n\
    \              +-----+\n                Figure 5: Any Source Multicast (ASM) Group\n\
    \   In addition, the potential large size of multicast groups creates\n   some\
    \ considerations for the scalability of the solution and how the\n   key management\
    \ is handled.\n"
- title: 2.5.  Source-Specific Multicast
  contents:
  - "2.5.  Source-Specific Multicast\n   Source-Specific Multicast (SSM) [RFC4607]\
    \ allows only a specific\n   endpoint to send traffic to the multicast group,\
    \ irrespective of the\n   number of RTP media sources.  The endpoint is known\
    \ as the media\n   distribution source.  For the RTP session to function correctly\
    \ with\n   RTCP over an SSM session, extensions have been defined in [RFC5760].\n\
    \   Figure 6 shows a sample SSM-based RTP session where several media\n   sources,\
    \ MS1...MSm, all send media to a distribution source, which\n   then forwards\
    \ the media data to the SSM group for delivery to the\n   receivers, R1...Rn,\
    \ and the feedback targets, FT1...FTn.  RTCP\n   reception quality feedback is\
    \ sent unicast from each receiver to one\n   of the feedback targets.  The feedback\
    \ targets aggregate reception\n   quality feedback and forward it upstream towards\
    \ the distribution\n   source.  The distribution source forwards (possibly aggregated\
    \ and\n   summarized) reception feedback to the SSM group and back to the\n  \
    \ original media sources.  The feedback targets are also members of the\n   SSM\
    \ group and receive the media data, so they can send unicast repair\n   data to\
    \ the receivers in response to feedback if appropriate.\n    +-----+  +-----+\
    \          +-----+\n    | MS1 |  | MS2 |   ....   | MSm |\n    +-----+  +-----+\
    \          +-----+\n       ^        ^                ^\n       |        |    \
    \            |\n       V        V                V\n   +---------------------------------+\n\
    \   |       Distribution Source       |\n   +--------+                       \
    \ |\n   | FT Agg |                        |\n   +--------+------------------------+\n\
    \     ^ ^           |\n     :  .          |\n     :   +...................+\n\
    \     :             |          .\n     :            / \\          .\n   +------+\
    \      /   \\       +-----+\n   | FT1  |<----+     +----->| FT2 |\n   +------+\
    \    /       \\     +-----+\n     ^  ^     /         \\     ^  ^\n     :  :  \
    \  /           \\    :  :\n     :  :   /             \\   :  :\n     :  :  / \
    \              \\  :  :\n     :   ./\\               /\\.   :\n     :   /. \\\
    \             / .\\   :\n     :  V  . V           V .  V  :\n    +----+ +----+\
    \     +----+ +----+\n    | R1 | | R2 | ... |Rn-1| | Rn |\n    +----+ +----+  \
    \   +----+ +----+\n     Figure 6: Example SSM-Based RTP Session with Two Feedback\
    \ Targets\n   The use of SSM makes it more difficult to inject traffic into the\n\
    \   multicast group, but not impossible.  Source authentication\n   requirements\
    \ apply for SSM sessions, too; an individual verification\n   of who sent the\
    \ RTP and RTCP packets is needed.  An RTP session using\n   SSM will have a group\
    \ security context that includes the media\n   sources, distribution source, feedback\
    \ targets, and the receivers.\n   Each has a different role and will be trusted\
    \ to perform different\n   actions.  For example, the distribution source will\
    \ need to\n   authenticate the media sources to prevent unwanted traffic from\
    \ being\n   distributed via the SSM group.  Similarly, the receivers need to\n\
    \   authenticate both the distribution source and their feedback target\n   to\
    \ prevent injection attacks from malicious devices claiming to be\n   feedback\
    \ targets.  An understanding of the trust relationships and\n   group security\
    \ context is needed between all components of the\n   system.\n"
- title: 3.  Security Options
  contents:
  - "3.  Security Options\n   This section provides an overview of security requirements\
    \ and the\n   current RTP security mechanisms that implement those requirements.\n\
    \   This cannot be a complete survey, since new security mechanisms are\n   defined\
    \ regularly.  The goal is to help applications designers by\n   reviewing the\
    \ types of solutions that are available.  This section\n   will use a number of\
    \ different security-related terms, as described\n   in the Internet Security\
    \ Glossary, Version 2 [RFC4949].\n"
- title: 3.1.  Secure RTP
  contents:
  - "3.1.  Secure RTP\n   The Secure Real-time Transport Protocol (SRTP) [RFC3711]\
    \ is one of\n   the most commonly used mechanisms to provide confidentiality,\n\
    \   integrity protection, source authentication, and replay protection\n   for\
    \ RTP.  SRTP was developed with RTP header compression and third-\n   party monitors\
    \ in mind.  Thus, the RTP header is not encrypted in RTP\n   data packets, and\
    \ the first 8 bytes of the first RTCP packet header\n   in each compound RTCP\
    \ packet are not encrypted.  The entirety of RTP\n   packets and compound RTCP\
    \ packets are integrity protected.  This\n   allows RTP header compression to\
    \ work and lets third-party monitors\n   determine what RTP traffic flows exist\
    \ based on the synchronization\n   source (SSRC) fields, but it protects the sensitive\
    \ content.\n   SRTP works with transforms where different combinations of encryption\n\
    \   algorithm, authentication algorithm, and pseudorandom function can be\n  \
    \ used, and the authentication tag length can be set to any value.\n   SRTP can\
    \ also be easily extended with additional cryptographic\n   transforms.  This\
    \ gives flexibility but requires more security\n   knowledge by the application\
    \ developer.  To simplify things, Session\n   Description Protocol (SDP) security\
    \ descriptions (see Section 3.1.3)\n   and Datagram Transport Layer Security Extension\
    \ for SRTP (DTLS-SRTP)\n   (see Section 3.1.1) use predefined combinations of\
    \ transforms, known\n   as SRTP crypto suites and SRTP protection profiles, that\
    \ bundle\n   together transforms and other parameters, making them easier to use\n\
    \   but reducing flexibility.  The Multimedia Internet Keying (MIKEY)\n   protocol\
    \ (see Section 3.1.2) provides flexibility to negotiate the\n   full selection\
    \ of transforms.  At the time of this writing, the\n   following transforms, SRTP\
    \ crypto suites, and SRTP protection\n   profiles are defined or under definition:\n\
    \   AES-CM and HMAC-SHA-1:  AES Counter Mode encryption with 128-bit keys\n  \
    \    combined with 160-bit keyed HMAC-SHA-1 with an 80-bit\n      authentication\
    \ tag.  This is the default cryptographic transform\n      that needs to be supported.\
    \  The transforms are defined in SRTP\n      [RFC3711], with the corresponding\
    \ SRTP crypto suite defined in\n      [RFC4568] and SRTP protection profile defined\
    \ in [RFC5764].\n   AES-f8 and HMAC-SHA-1:  AES f8-mode encryption using 128-bit\
    \ keys\n      combined with keyed HMAC-SHA-1 using 80-bit authentication.  The\n\
    \      transforms are defined in [RFC3711], with the corresponding SRTP\n    \
    \  crypto suite defined in [RFC4568].  The corresponding SRTP\n      protection\
    \ profile is not defined.\n   SEED:  A Korean national standard cryptographic\
    \ transform that is\n      defined to be used with SRTP in [RFC5669].  Three options\
    \ are\n      defined: one using SHA-1 authentication, one using Counter Mode\n\
    \      with Cipher Block Chaining Message Authentication Code (CBC-MAC),\n   \
    \   and one using Galois Counter Mode.\n   ARIA:  A Korean block cipher [ARIA-SRTP]\
    \ that supports 128-, 192-,\n      and 256-bit keys.  It also defines three options:\
    \ Counter Mode\n      where combined with HMAC-SHA-1 with 80- or 32-bit authentication\n\
    \      tags, Counter Mode with CBC-MAC, and Galois Counter Mode.  It also\n  \
    \    defines a different key derivation function than the AES-based\n      systems.\n\
    \   AES-192-CM and AES-256-CM:  Cryptographic transforms for SRTP based\n    \
    \  on AES-192 and AES-256 Counter Mode encryption and 160-bit keyed\n      HMAC-SHA-1\
    \ with 80- and 32-bit authentication tags.  These provide\n      192- and 256-bit\
    \ encryption keys, but otherwise match the default\n      128-bit AES-CM transform.\
    \  The transforms are defined in [RFC3711]\n      and [RFC6188], and the SRTP\
    \ crypto suites are defined in\n      [RFC6188].\n   AES-GCM and AES-CCM:  AES\
    \ Galois Counter Mode and AES Counter Mode\n      with CBC-MAC for AES-128 and\
    \ AES-256.  This authentication is\n      included in the cipher text, which becomes\
    \ expanded with the\n      length of the authentication tag instead of using the\
    \ SRTP\n      authentication tag.  This is defined in [AES-GCM].\n   NULL:  SRTP\
    \ [RFC3711] also provides a NULL cipher that can be used\n      when no confidentiality\
    \ for RTP/RTCP is requested.  The\n      corresponding SRTP protection profile\
    \ is defined in [RFC5764].\n   The source authentication guarantees provided by\
    \ SRTP depend on the\n   cryptographic transform and key management used.  Some\
    \ transforms\n   give strong source authentication even in multiparty sessions;\
    \ others\n   give weaker guarantees and can authenticate group membership but\
    \ not\n   sources.  Timed Efficient Stream Loss-Tolerant Authentication (TESLA)\n\
    \   [RFC4383] offers a complement to the regular symmetric keyed\n   authentication\
    \ transforms, like HMAC-SHA-1, and can provide\n   per-source authentication in\
    \ some group communication scenarios.  The\n   downside is the need for buffering\
    \ the packets for a while before\n   authenticity can be verified.\n   [RFC4771]\
    \ defines a variant of the authentication tag that enables a\n   receiver to obtain\
    \ the Roll over Counter for the RTP sequence number\n   that is part of the Initialization\
    \ Vector (IV) for many cryptographic\n   transforms.  This enables quicker and\
    \ easier options for joining a\n   long-lived RTP group; for example, a broadcast\
    \ session.\n   RTP header extensions are normally carried in the clear and are\
    \ only\n   integrity protected in SRTP.  This can be problematic in some cases,\n\
    \   so [RFC6904] defines an extension to also encrypt selected header\n   extensions.\n\
    \   SRTP is specified and deployed in a number of RTP usage contexts;\n   significant\
    \ support is provided in SIP-established VoIP clients,\n   including IP Multimedia\
    \ Subsystems (IMS), and in the Real Time\n   Streaming Protocol (RTSP) [RTSP]\
    \ and RTP-based media streaming.\n   Thus, SRTP in general is widely deployed.\
    \  When it comes to\n   cryptographic transforms, the default (AES-CM and HMAC-SHA-1)\
    \ is the\n   most commonly used, but it might be expected that AES-GCM,\n   AES-192-CM,\
    \ and AES-256-CM will gain usage in future, especially due\n   to the AES- and\
    \ GCM-specific instructions in new CPUs.\n   SRTP does not contain an integrated\
    \ key management solution; instead,\n   it relies on an external key management\
    \ protocol.  There are several\n   protocols that can be used.  The following\
    \ sections outline some\n   popular schemes.\n"
- title: '3.1.1.  Key Management for SRTP: DTLS-SRTP'
  contents:
  - "3.1.1.  Key Management for SRTP: DTLS-SRTP\n   A Datagram Transport Layer Security\
    \ (DTLS) extension exists for\n   establishing SRTP keys [RFC5763][RFC5764]. \
    \ This extension provides\n   secure key exchange between two peers, enabling\
    \ Perfect Forward\n   Secrecy (PFS) and binding strong identity verification to\
    \ an\n   endpoint.  PFS is a property of the key agreement protocol that\n   ensures\
    \ that a session key derived from a set of long-term keys will\n   not be compromised\
    \ if one of the long-term keys is compromised in the\n   future.  The default\
    \ key generation will generate a key that contains\n   material contributed by\
    \ both peers.  The key exchange happens in the\n   media plane directly between\
    \ the peers.  The common key exchange\n   procedures will take two round trips\
    \ assuming no losses.  Transport\n   Layer Security (TLS) resumption can be used\
    \ when establishing\n   additional media streams with the same peer, and it reduces\
    \ the setup\n   time to one RTT for these streams (see [RFC5764] for a discussion\
    \ of\n   TLS resumption in this context).\n   The actual security properties of\
    \ an established SRTP session using\n   DTLS will depend on the cipher suites\
    \ offered and used, as well as\n   the mechanism for identifying the endpoints\
    \ of the handshake.  For\n   example, some cipher suites provide PFS, while others\
    \ do not.  When\n   using DTLS, the application designer needs to select which\
    \ cipher\n   suites DTLS-SRTP can offer and accept so that the desired security\n\
    \   properties are achieved.  The next choice is how to verify the\n   identity\
    \ of the peer endpoint.  One choice can be to rely on the\n   certificates and\
    \ use a PKI to verify them to make an identity\n   assertion.  However, this is\
    \ not the most common way; instead, self-\n   signed certificates are common to\
    \ use to establish trust through\n   signaling or other third-party solutions.\n\
    \   DTLS-SRTP key management can use the signaling protocol in four ways:\n  \
    \ First, to agree on using DTLS-SRTP for media security.  Second, to\n   determine\
    \ the network location (address and port) where each side is\n   running a DTLS\
    \ listener to let the parts perform the key management\n   handshakes that generate\
    \ the keys used by SRTP.  Third, to exchange\n   hashes of each side's certificates\
    \ to bind these to the signaling and\n   ensure there is no MITM attack.  This\
    \ assumes that one can trust the\n   signaling solution to be resistant to modification\
    \ and not be in\n   collaboration with an attacker.  Finally, to provide an asserted\n\
    \   identity, e.g., [RFC4474], that can be used to prevent modification\n   of\
    \ the signaling and the exchange of certificate hashes.  That way,\n   it enables\
    \ binding between the key exchange and the signaling.\n   This usage is well defined\
    \ for SIP/SDP in [RFC5763] and, in most\n   cases, can be adopted for use with\
    \ other bidirectional signaling\n   solutions.  It is to be noted that there is\
    \ work underway to revisit\n   the SIP Identity mechanism [RFC4474] in the IETF\
    \ STIR working group.\n   The main question regarding DTLS-SRTP's security properties\
    \ is how\n   one verifies any peer identity or at least prevents MITM attacks.\n\
    \   This does require trust in some DTLS-SRTP external parties: either a\n   PKI,\
    \ a signaling system, or some identity provider.\n   DTLS-SRTP usage is clearly\
    \ on the rise.  It is mandatory to support\n   in Web Real-Time Communication\
    \ (WebRTC).  It has growing support\n   among SIP endpoints.  DTLS-SRTP was developed\
    \ in IETF primarily to\n   meet security requirements for RTP-based media established\
    \ using SIP.\n   The requirements considered can be reviewed in \"Requirements\
    \ and\n   Analysis of Media Security Management Protocols\" [RFC5479].\n"
- title: '3.1.2.  Key Management for SRTP: MIKEY'
  contents:
  - "3.1.2.  Key Management for SRTP: MIKEY\n   Multimedia Internet Keying (MIKEY)\
    \ [RFC3830] is a keying protocol\n   that has several modes with different properties.\
    \  MIKEY can be used\n   in point-to-point applications using SIP and RTSP (e.g.,\
    \ VoIP calls)\n   but is also suitable for use in broadcast and multicast applications\n\
    \   and centralized group communications.\n   MIKEY can establish multiple security\
    \ contexts or cryptographic\n   sessions with a single message.  It is usable\
    \ in scenarios where one\n   entity generates the key and needs to distribute\
    \ the key to a number\n   of participants.  The different modes and the resulting\
    \ properties\n   are highly dependent on the cryptographic method used to establish\n\
    \   the session keys actually used by the security protocol, like SRTP.\n   MIKEY\
    \ has the following modes of operation:\n   Pre-Shared Key:  Uses a pre-shared\
    \ secret for symmetric key crypto\n      used to secure a keying message carrying\
    \ the already-generated\n      session key.  This system is the most efficient\
    \ from the\n      perspective of having small messages and processing demands.\
    \  The\n      downside is scalability, where usually the effort for the\n    \
    \  provisioning of pre-shared keys is only manageable if the number\n      of\
    \ endpoints is small.\n   Public Key Encryption:  Uses a public key crypto to\
    \ secure a keying\n      message carrying the already-generated session key. \
    \ This is more\n      resource intensive but enables scalable systems.  It does\
    \ require\n      a public key infrastructure to enable verification.\n   Diffie-Hellman:\
    \  Uses Diffie-Hellman key agreement to generate the\n      session key, thus\
    \ providing perfect forward secrecy.  The downside\n      is high resource consumption\
    \ in bandwidth and processing during\n      the MIKEY exchange.  This method can't\
    \ be used to establish group\n      keys as each pair of peers performing the\
    \ MIKEY exchange will\n      establish different keys.\n   HMAC-Authenticated\
    \ Diffie-Hellman:  [RFC4650] defines a variant of\n      the Diffie-Hellman exchange\
    \ that uses a pre-shared key in a keyed\n      Hashed Message Authentication Code\
    \ (HMAC) to verify authenticity\n      of the keying material instead of a digital\
    \ signature as in the\n      previous method.  This method is still restricted\
    \ to\n      point-to-point usage.\n   RSA-R:  MIKEY-RSA in Reverse mode [RFC4738]\
    \ is a variant of the\n      public key method, which doesn't rely on the initiator\
    \ of the key\n      exchange knowing the responder's certificate.  This method\
    \ lets\n      both the initiator and the responder specify the session keying\n\
    \      material depending on the use case.  Usage of this mode requires\n    \
    \  one round-trip time.\n   TICKET:  Ticket Payload (TICKET) [RFC6043] is a MIKEY\
    \ extension using\n      a trusted centralized key management service (KMS). \
    \ The initiator\n      and responder do not share any credentials; instead, they\
    \ trust a\n      third party, the KMS, with which they both have or can establish\n\
    \      shared credentials.\n   IBAKE:  Identity-Based Authenticated Key Exchange\
    \ (IBAKE) [RFC6267]\n      uses a KMS infrastructure but with lower demand on\
    \ the KMS.  It\n      claims to provide both perfect forward and backwards secrecy.\n\
    \   SAKKE:  [RFC6509] provides Sakai-Kasahara Key Encryption (SAKKE) in\n    \
    \  MIKEY.  It is based on Identity-based Public Key Cryptography and\n      a\
    \ KMS infrastructure to establish a shared secret value and\n      certificateless\
    \ signatures to provide source authentication.  Its\n      features include simplex\
    \ transmission, scalability, low-latency\n      call setup, and support for secure\
    \ deferred delivery.\n   MIKEY messages have several different transports.  [RFC4567]\
    \ defines\n   how MIKEY messages can be embedded in general SDP for usage with\
    \ the\n   signaling protocols SIP, Session Announcement Protocol (SAP), and\n\
    \   RTSP.  There also exists a usage of MIKEY defined by the Third\n   Generation\
    \ Partnership Project (3GPP) that sends MIKEY messages\n   directly over UDP [T3GPP.33.246]\
    \ to key the receivers of Multimedia\n   Broadcast and Multicast Service (MBMS)\
    \ [T3GPP.26.346].  [RFC3830]\n   defines the application/mikey media type, allowing\
    \ MIKEY to be used\n   in, e.g., email and HTTP.\n   Based on the many choices,\
    \ it is important to consider the properties\n   needed in one's solution and\
    \ based on that evaluate which modes are\n   candidates for use.  More information\
    \ on the applicability of the\n   different MIKEY modes can be found in [RFC5197].\n\
    \   MIKEY with pre-shared keys is used by 3GPP MBMS [T3GPP.33.246], and\n   IMS\
    \ media security [T3GPP.33.328] specifies the use of the TICKET\n   mode transported\
    \ over SIP and HTTP.  RTSP 2.0 [RTSP] specifies use of\n   the RSA-R mode.  There\
    \ are some SIP endpoints that support MIKEY.\n   The modes they use are unknown\
    \ to the authors.\n"
- title: '3.1.3.  Key Management for SRTP: Security Descriptions'
  contents:
  - "3.1.3.  Key Management for SRTP: Security Descriptions\n   [RFC4568] provides\
    \ a keying solution based on sending plaintext keys\n   in SDP [RFC4566].  It\
    \ is primarily used with SIP and the SDP Offer/\n   Answer model and is well defined\
    \ in point-to-point sessions where\n   each side declares its own unique key.\
    \  Using security descriptions\n   to establish group keys is less well defined\
    \ and can have security\n   issues since it's difficult to guarantee unique SSRCs\
    \ (as needed to\n   avoid a \"two-time pad\" attack -- see Section 9 of [RFC3711]).\n\
    \   Since keys are transported in plaintext in SDP, they can easily be\n   intercepted\
    \ unless the SDP carrying protocol provides strong\n   end-to-end confidentiality\
    \ and authentication guarantees.  This is\n   not normally the case; instead,\
    \ hop-by-hop security is provided\n   between signaling nodes using TLS.  This\
    \ leaves the keying material\n   sensitive to capture by the traversed signaling\
    \ nodes.  Thus, in most\n   cases, the security properties of security descriptions\
    \ are weak.\n   The usage of security descriptions usually requires additional\n\
    \   security measures; for example, the signaling nodes are trusted and\n   protected\
    \ by strict access control.  Usage of security descriptions\n   requires careful\
    \ design in order to ensure that the security goals\n   can be met.\n   Security\
    \ descriptions are the most commonly deployed keying solution\n   for SIP-based\
    \ endpoints, where almost all endpoints that support SRTP\n   also support security\
    \ descriptions.  It is also used for access\n   protection in IMS Media Security\
    \ [T3GPP.33.328].\n"
- title: '3.1.4.  Key Management for SRTP: Encrypted Key Transport'
  contents:
  - "3.1.4.  Key Management for SRTP: Encrypted Key Transport\n   Encrypted Key Transport\
    \ (EKT) [EKT] is an SRTP extension that enables\n   group keying despite using\
    \ a keying mechanism like DTLS-SRTP that\n   doesn't support group keys.  It is\
    \ designed for centralized\n   conferencing, but it can also be used in sessions\
    \ where endpoints\n   connect to a conference bridge or a gateway and need to\
    \ be\n   provisioned with the keys each participant on the bridge or gateway\n\
    \   uses to avoid decryption and encryption cycles.  This can enable\n   interworking\
    \ between DTLS-SRTP and other keying systems where either\n   party can set the\
    \ key (e.g., interworking with security\n   descriptions).\n   The mechanism is\
    \ based on establishing an additional EKT key, which\n   everyone uses to protect\
    \ their actual session key.  The actual\n   session key is sent in an expanded\
    \ authentication tag to the other\n   session participants.  This key is only\
    \ sent occasionally or\n   periodically depending on use cases and depending on\
    \ what\n   requirements exist for timely delivery or notification.\n   The only\
    \ known deployment of EKT so far is in some Cisco video\n   conferencing products.\n"
- title: '3.1.5.  Key Management for SRTP: ZRTP and Other Solutions'
  contents:
  - "3.1.5.  Key Management for SRTP: ZRTP and Other Solutions\n   The ZRTP [RFC6189]\
    \ key management system for SRTP was proposed as an\n   alternative to DTLS-SRTP.\
    \  ZRTP provides best effort encryption\n   independent of the signaling protocol\
    \ and utilizes key continuity,\n   Short Authentication Strings, or a PKI for\
    \ authentication.  ZRTP\n   wasn't adopted as an IETF Standards Track protocol,\
    \ but was instead\n   published as an Informational RFC in the IETF stream.  Commercial\n\
    \   implementations exist.\n   Additional proprietary solutions are also known\
    \ to exist.\n"
- title: 3.2.  RTP Legacy Confidentiality
  contents:
  - "3.2.  RTP Legacy Confidentiality\n   Section 9 of the RTP standard [RFC3550]\
    \ defines a Data Encryption\n   Standard (DES) or 3DES-based encryption of RTP\
    \ and RTCP packets.\n   This mechanism is keyed using plaintext keys in SDP [RFC4566]\
    \ using\n   the \"k=\" SDP field.  This method can provide confidentiality but,\
    \ as\n   discussed in Section 9 of [RFC3550], it has extremely weak security\n\
    \   properties and is not to be used.\n"
- title: 3.3.  IPsec
  contents:
  - "3.3.  IPsec\n   IPsec [RFC4301] can be used in either tunnel or transport mode\
    \ to\n   protect RTP and RTCP packets in transit from one network interface to\n\
    \   another.  This can be sufficient when the network interfaces have a\n   direct\
    \ relation or in a secured environment where it can be\n   controlled who can\
    \ read the packets from those interfaces.\n   The main concern with using IPsec\
    \ to protect RTP traffic is that in\n   most cases, using a VPN approach that\
    \ terminates the security\n   association at some node prior to the RTP endpoint\
    \ leaves the traffic\n   vulnerable to attack between the VPN termination node\
    \ and the\n   endpoint.  Thus, usage of IPsec requires careful thought and design\n\
    \   of its usage so that it meets the security goals.  An important\n   question\
    \ is how one ensures the IPsec terminating peer and the\n   ultimate destination\
    \ are the same.  Applications can have issues\n   using existing APIs when determining\
    \ if IPsec is being used or not\n   and when determining who the authenticated\
    \ peer entity is when IPsec\n   is used.\n   IPsec with RTP is more commonly used\
    \ as a security solution between\n   infrastructure nodes that exchange many RTP\
    \ sessions and media\n   streams.  The establishment of a secure tunnel between\
    \ such nodes\n   minimizes the key management overhead.\n"
- title: 3.4.  RTP over TLS over TCP
  contents:
  - "3.4.  RTP over TLS over TCP\n   Just as RTP can be sent over TCP [RFC4571], it\
    \ can also be sent over\n   TLS over TCP [RFC4572], using TLS to provide point-to-point\
    \ security\n   services.  The security properties TLS provides are confidentiality,\n\
    \   integrity protection, and possible source authentication if the\n   client\
    \ or server certificates are verified and provide a usable\n   identity.  When\
    \ used in multiparty scenarios using a central node for\n   media distribution,\
    \ the security provided is only between the central\n   node and the peers, so\
    \ the security properties for the whole session\n   are dependent on what trust\
    \ one can place in the central node.\n   RTSP 1.0 [RFC2326] and 2.0 [RTSP] specify\
    \ the usage of RTP over the\n   same TLS/TCP connection that the RTSP messages\
    \ are sent over.  It\n   appears that RTP over TLS/TCP is also used in some proprietary\n\
    \   solutions that use TLS to bypass firewalls.\n"
- title: 3.5.  RTP over Datagram TLS (DTLS)
  contents:
  - "3.5.  RTP over Datagram TLS (DTLS)\n   DTLS [RFC6347] is based on TLS [RFC5246]\
    \ but designed to work over an\n   unreliable datagram-oriented transport rather\
    \ than requiring reliable\n   byte stream semantics from the transport protocol.\
    \  Accordingly, DTLS\n   can provide point-to-point security for RTP flows analogous\
    \ to that\n   provided by TLS but over a datagram transport such as UDP.  The\
    \ two\n   peers establish a DTLS association between each other, including the\n\
    \   possibility to do certificate-based source authentication when\n   establishing\
    \ the association.  All RTP and RTCP packets flowing will\n   be protected by\
    \ this DTLS association.\n   Note that using DTLS for RTP flows is different from\
    \ using DTLS-SRTP\n   key management.  DTLS-SRTP uses the same key management\
    \ steps as\n   DTLS, but uses SRTP for the per-packet security operations.  Using\n\
    \   DTLS for RTP flows uses the normal datagram TLS data protection,\n   wrapping\
    \ complete RTP packets.  When using DTLS for RTP flows, the\n   RTP and RTCP packets\
    \ are completely encrypted with no headers in the\n   clear; when using DTLS-SRTP,\
    \ the RTP headers are in the clear and\n   only the payload data is encrypted.\n\
    \   DTLS can use similar techniques to those available for DTLS-SRTP to\n   bind\
    \ a signaling-side agreement to communicate to the certificates\n   used by the\
    \ endpoint when doing the DTLS handshake.  This enables use\n   without having\
    \ a certificate-based trust chain to a trusted\n   certificate root.\n   There\
    \ does not appear to be significant usage of DTLS for RTP.\n"
- title: 3.6.  Media Content Security/Digital Rights Management
  contents:
  - "3.6.  Media Content Security/Digital Rights Management\n   Mechanisms have been\
    \ defined that encrypt only the media content\n   operating within the RTP payload\
    \ data and leaving the RTP headers and\n   RTCP unaffected.  There are several\
    \ reasons why this might be\n   appropriate, but a common rationale is to ensure\
    \ that the content\n   stored by RTSP streaming servers has the media content\
    \ in a protected\n   format that cannot be read by the streaming server (this\
    \ is mostly\n   done in the context of Digital Rights Management).  These approaches\n\
    \   then use a key management solution between the rights provider and\n   the\
    \ consuming client to deliver the key used to protect the content\n   and do not\
    \ give the media server access to the security context.\n   Such methods have\
    \ several security weaknesses such as the fact that\n   the same key is handed\
    \ out to a potentially large group of receiving\n   clients, increasing the risk\
    \ of a leak.\n   Use of this type of solution can be of interest in environments\
    \ that\n   allow middleboxes to rewrite the RTP headers and select which streams\n\
    \   are delivered to an endpoint (e.g., some types of centralized video\n   conference\
    \ systems).  The advantage of encrypting and possibly\n   integrity protecting\
    \ the payload but not the headers is that the\n   middlebox can't eavesdrop on\
    \ the media content, but it can still\n   provide stream switching functionality.\
    \  The downside of such a\n   system is that it likely needs two levels of security:\
    \ the payload-\n   level solution, to provide confidentiality and source authentication,\n\
    \   and a second layer with additional transport security ensuring source\n  \
    \ authentication and integrity of the RTP headers associated with the\n   encrypted\
    \ payloads.  This can also result in the need to have two\n   different key management\
    \ systems as the entity protecting the packets\n   and payloads are different\
    \ with a different set of keys.\n   The aspect of two tiers of security are present\
    \ in ISMACryp (see\n   Section 3.6.1) and the deprecated 3GPP Packet-switched\
    \ Streaming\n   Service solution; see Annex K of [T3GPP.26.234R8].\n"
- title: 3.6.1.  ISMA Encryption and Authentication
  contents:
  - "3.6.1.  ISMA Encryption and Authentication\n   The Internet Streaming Media Alliance\
    \ (ISMA) has defined ISMA\n   Encryption and Authentication 2.0 [ISMACryp2]. \
    \ This specification\n   defines how one encrypts and packetizes the encrypted\
    \ application\n   data units (ADUs) in an RTP payload using the MPEG-4 generic\
    \ payload\n   format [RFC3640].  The ADU types that are allowed are those that\
    \ can\n   be stored as elementary streams in an ISO Media File format-based\n\
    \   file.  ISMACryp uses SRTP for packet-level integrity and source\n   authentication\
    \ from a streaming server to the receiver.\n   Key management for an ISMACryp-based\
    \ system can be achieved through\n   Open Mobile Alliance (OMA) Digital Rights\
    \ Management 2.0 [OMADRMv2],\n   for example.\n"
- title: 4.  Securing RTP Applications
  contents:
  - "4.  Securing RTP Applications\n   In the following, we provide guidelines for\
    \ how to choose appropriate\n   security mechanisms for RTP applications.\n"
- title: 4.1.  Application Requirements
  contents:
  - "4.1.  Application Requirements\n   This section discusses a number of application\
    \ requirements that need\n   to be considered.  An application designer choosing\
    \ security\n   solutions requires a good understanding of what level of security\
    \ is\n   needed and what behavior they strive to achieve.\n"
- title: 4.1.1.  Confidentiality
  contents:
  - "4.1.1.  Confidentiality\n   When it comes to confidentiality of an RTP session,\
    \ there are several\n   aspects to consider:\n   Probability of compromise:  When\
    \ using encryption to provide media\n      confidentiality, it is necessary to\
    \ have some rough understanding\n      of the security goal and how long one can\
    \ expect the protected\n      content to remain confidential.  National or other\
    \ regulations\n      might provide additional requirements on a particular usage\
    \ of an\n      RTP.  From that, one can determine which encryption algorithms\
    \ are\n      to be used from the set of available transforms.\n   Potential for\
    \ other leakage:  RTP-based security in most of its forms\n      simply wraps\
    \ RTP and RTCP packets into cryptographic containers.\n      This commonly means\
    \ that the size of the original RTP payload is\n      visible to observers of\
    \ the protected packet flow.  This can\n      provide information to those observers.\
    \  A well-documented case is\n      the risk with variable bitrate speech codecs\
    \ that produce\n      different sized packets based on the speech input [RFC6562].\n\
    \      Potential threats such as these need to be considered and, if they\n  \
    \    are significant, then restrictions will be needed on mode choices\n     \
    \ in the codec, or additional padding will need to be added to make\n      all\
    \ packets equal size and remove the informational leakage.\n      Another case\
    \ is RTP header extensions.  If SRTP is used, header\n      extensions are normally\
    \ not protected by the security mechanism\n      protecting the RTP payload. \
    \ If the header extension carries\n      information that is considered sensitive,\
    \ then the application\n      needs to be modified to ensure that mechanisms used\
    \ to protect\n      against such information leakage are employed.\n   Who has\
    \ access:  When considering the confidentiality properties of a\n      system,\
    \ it is important to consider where the media handled in the\n      clear.  For\
    \ example, if the system is based on an RTP mixer that\n      needs the keys to\
    \ decrypt the media, process it, and repacketize\n      it, then is the mixer\
    \ providing the security guarantees expected\n      by the other parts of the\
    \ system?  Furthermore, it is important to\n      consider who has access to the\
    \ keys.  The policies for the\n      handling of the keys, and who can access\
    \ the keys, need to be\n      considered along with the confidentiality goals.\n\
    \   As can be seen, the actual confidentiality level has likely more to\n   do\
    \ with the application's usage of centralized nodes, and the details\n   of the\
    \ key management solution chosen, than with the actual choice of\n   encryption\
    \ algorithm (although, of course, the encryption algorithm\n   needs to be chosen\
    \ appropriately for the desired security level).\n"
- title: 4.1.2.  Integrity
  contents:
  - "4.1.2.  Integrity\n   Protection against modification of content by a third party,\
    \ or due\n   to errors in the network, is another factor to consider.  The first\n\
    \   aspect that one assesses is what resilience one has against\n   modifications\
    \ to the content.  Some media types are extremely\n   sensitive to network bit\
    \ errors, whereas others might be able to\n   tolerate some degree of data corruption.\
    \  Equally important is to\n   consider the sensitivity of the content, who is\
    \ providing the\n   integrity assertion, what is the source of the integrity tag,\
    \ and\n   what are the risks of modifications happening prior to that point\n\
    \   where protection is applied.  These issues affect what cryptographic\n   algorithm\
    \ is used, the length of the integrity tags, and whether the\n   entire payload\
    \ is protected.\n   RTP applications that rely on central nodes need to consider\
    \ if\n   hop-by-hop integrity is acceptable or if true end-to-end integrity\n\
    \   protection is needed.  Is it important to be able to tell if a\n   middlebox\
    \ has modified the data?  There are some uses of RTP that\n   require trusted\
    \ middleboxes that can modify the data in a way that\n   doesn't break integrity\
    \ protection as seen by the receiver, for\n   example, local advertisement insertion\
    \ in IPTV systems.  There are\n   also uses where it is essential that such in-network\
    \ modification be\n   detectable.  RTP can support both with appropriate choices\
    \ of\n   security mechanisms.\n   Integrity of the data is commonly closely tied\
    \ to the question of\n   source authentication.  That is, it becomes important\
    \ to know who\n   makes an integrity assertion for the data.\n"
- title: 4.1.3.  Source Authentication
  contents:
  - "4.1.3.  Source Authentication\n   Source authentication is about determining\
    \ who sent a particular RTP\n   or RTCP packet.  It is normally closely tied with\
    \ integrity, since a\n   receiver generally also wants to ensure that the data\
    \ received is\n   what the source really sent, so source authentication without\n\
    \   integrity is not particularly useful.  Similarly, integrity\n   protection\
    \ without source authentication is also not particularly\n   useful; a claim that\
    \ a packet is unchanged that cannot itself be\n   validated as from the source\
    \ (or some from other known and trusted\n   party) is meaningless.\n   Source\
    \ authentication can be asserted in several different ways:\n   Base level:  Using\
    \ cryptographic mechanisms that give authentication\n      with some type of key\
    \ management provide an implicit method for\n      source authentication.  Assuming\
    \ that the mechanism has sufficient\n      strength not to be circumvented in\
    \ the time frame when you would\n      accept the packet as valid, it is possible\
    \ to assert a source-\n      authenticated statement; this message is likely from\
    \ a source that\n      has the cryptographic key(s) to this communication.\n \
    \     What that assertion actually means is highly dependent on the\n      application\
    \ and how it handles the keys.  If only the two peers\n      have access to the\
    \ keys, this can form a basis for a strong trust\n      relationship that traffic\
    \ is authenticated coming from one of the\n      peers.  However, in a multiparty\
    \ scenario where security contexts\n      are shared among participants, most\
    \ base-level authentication\n      solutions can't even assert that this packet\
    \ is from the same\n      source as the previous packet.\n   Binding the source\
    \ and the signaling:  A step up in the assertion\n      that can be done in base-level\
    \ systems is to tie the signaling to\n      the key exchange.  Here, the goal\
    \ is to at least be able to assert\n      that the source of the packets is the\
    \ same entity with which the\n      receiver established the session.  How feasible\
    \ this is depends on\n      the properties of the key management system, the ability\
    \ to tie\n      the signaling to a particular source, and the degree of trust\
    \ the\n      receiver places on the different nodes involved.\n      For example,\
    \ systems where the key exchange is done using the\n      signaling systems, such\
    \ as security descriptions [RFC4568] enable\n      a direct binding between signaling\
    \ and key exchange.  In such\n      systems, the actual security depends on the\
    \ trust one can place in\n      the signaling system to correctly associate the\
    \ peer's identifier\n      with the key exchange.\n   Using identifiers:  If the\
    \ applications have access to a system that\n      can provide verifiable identifiers,\
    \ then the source authentication\n      can be bound to that identifier.  For\
    \ example, in a point-to-point\n      communication, even symmetric key crypto,\
    \ where the key management\n      can assert that the key has only been exchanged\
    \ with a particular\n      identifier, can provide a strong assertion about the\
    \ source of the\n      traffic.  SIP Identity [RFC4474] provides one example of\
    \ how this\n      can be done and could be used to bind DTLS-SRTP certificates\
    \ used\n      by an endpoint to the identity provider's public key to\n      authenticate\
    \ the source of a DTLS-SRTP flow.\n      Note that all levels of the system need\
    \ to have matching\n      capability to assert identifiers.  If the signaling\
    \ can assert\n      that only a given entity in a multiparty session has a key,\
    \ then\n      the media layer might be able to provide guarantees about the\n\
    \      identifier used by the media sender.  However, using a signaling\n    \
    \  authentication mechanism built on a group key can limit the media\n      layer\
    \ to asserting only group membership.\n"
- title: 4.1.4.  Identifiers and Identity
  contents:
  - "4.1.4.  Identifiers and Identity\n   There exist many different types of systems\
    \ providing identifiers\n   with different properties (e.g., SIP Identity [RFC4474]).\
    \  In the\n   context of RTP applications, the most important property is the\n\
    \   possibility to perform source authentication and verify such\n   assertions\
    \ in relation to any claimed identifiers.  What an\n   identifier really represents\
    \ can also vary but, in the context of\n   communication, one of the most obvious\
    \ is the identifiers\n   representing the identity of the human user with which\
    \ one\n   communicates.  However, the human user can also have additional\n  \
    \ identifiers in a particular role.  For example, the human (Alice) can\n   also\
    \ be a police officer, and in some cases, an identifier for her\n   role as police\
    \ officer will be more relevant than one that asserts\n   that she is Alice. \
    \ This is common in contact with organizations,\n   where it is important to prove\
    \ the person's right to represent the\n   organization.  Some examples of identifier/identity\
    \ mechanisms that\n   can be used:\n   Certificate based:  A certificate is used\
    \ to assert the identifiers\n      used to claim an identity; by having access\
    \ to the private part of\n      the certificate, one can perform signing to assert\
    \ one's identity.\n      Any entity interested in verifying the assertion then\
    \ needs the\n      public part of the certificate.  By having the certificate,\
    \ one\n      can verify the signature against the certificate.  The next step\n\
    \      is to determine if one trusts the certificate's trust chain.\n      Commonly,\
    \ by provisioning the verifier with the public part of a\n      root certificate,\
    \ this enables the verifier to verify a trust\n      chain from the root certificate\
    \ down to the identifier in the\n      certificate.  However, the trust is based\
    \ on all steps in the\n      certificate chain being verifiable and trusted. \
    \ Thus, the\n      provisioning of root certificates and the ability to revoke\n\
    \      compromised certificates are aspects that will require\n      infrastructure.\n\
    \   Online identity providers:  An online identity provider (IdP) can\n      authenticate\
    \ a user's right to use an identifier and then perform\n      assertions on their\
    \ behalf or provision the requester with short-\n      term credentials to assert\
    \ the identifiers.  The verifier can then\n      contact the IdP to request verification\
    \ of a particular\n      identifier.  Here, the trust is highly dependent on how\
    \ much one\n      trusts the IdP.  The system also becomes dependent on having\n\
    \      access to the relevant IdP.\n   In all of the above examples, an important\
    \ part of the security\n   properties is related to the method for authenticating\
    \ the access to\n   the identity.\n"
- title: 4.1.5.  Privacy
  contents:
  - "4.1.5.  Privacy\n   RTP applications need to consider what privacy goals they\
    \ have.  As\n   RTP applications communicate directly between peers in many cases,\n\
    \   the IP addresses of any communication peer will be available.  The\n   main\
    \ privacy concern with IP addresses is related to geographical\n   location and\
    \ the possibility to track a user of an endpoint.  The\n   main way to avoid such\
    \ concerns is the introduction of relay (e.g., a\n   Traversal Using Relay NAT\
    \ (TURN) server [RFC5766]) or centralized\n   media mixers or forwarders that\
    \ hide the address of a peer from any\n   other peer.  The security and trust\
    \ placed in these relays obviously\n   needs to be carefully considered.\n   RTP\
    \ itself can contribute to enabling a particular user to be tracked\n   between\
    \ communication sessions if the Canonical Name (CNAME) is\n   generated according\
    \ to the RTP specification in the form of\n   user@host.  Such RTCP CNAMEs are\
    \ likely long-term stable over\n   multiple sessions, allowing tracking of users.\
    \  This can be desirable\n   for long-term fault tracking and diagnosis, but it\
    \ clearly has\n   privacy implications.  Instead, cryptographically random ones\
    \ could\n   be used as defined by \"Guidelines for Choosing RTP Control Protocol\n\
    \   (RTCP) CNAMEs\" [RFC7022].\n   If privacy goals exist, they need to be considered\
    \ and the system\n   designed with them in mind.  In addition, certain RTP features\
    \ might\n   have to be configured to safeguard privacy or have requirements on\n\
    \   how the implementation is done.\n"
- title: 4.2.  Application Structure
  contents:
  - "4.2.  Application Structure\n   When it comes to RTP security, the most appropriate\
    \ solution is often\n   highly dependent on the topology of the communication\
    \ session.  The\n   signaling also impacts what information can be provided and\
    \ if this\n   can be instance specific or common for a group.  In the end, the\
    \ key\n   management system will highly affect the security properties achieved\n\
    \   by the application.  At the same time, the communication structure of\n  \
    \ the application limits what key management methods are applicable.\n   As different\
    \ key management methods have different requirements on\n   underlying infrastructure,\
    \ it is important to take that aspect into\n   consideration early in the design.\n"
- title: 4.3.  Automatic Key Management
  contents:
  - "4.3.  Automatic Key Management\n   The guidelines for Cryptographic Key Management\
    \ [RFC4107] provide an\n   overview of why automatic key management is important.\
    \  They also\n   provide a strong recommendation on using automatic key management.\n\
    \   Most of the security solutions reviewed in this document provide or\n   support\
    \ automatic key management, at least to establish session keys.\n   In some more\
    \ long-term use cases, credentials might need to be\n   manually deployed in certain\
    \ cases.\n   For SRTP, an important aspect of automatic key management is to\n\
    \   ensure that two-time pads do not occur, in particular by preventing\n   multiple\
    \ endpoints using the same session key and SSRC.  In these\n   cases, automatic\
    \ key management methods can have strong dependencies\n   on signaling features\
    \ to function correctly.  If those dependencies\n   can't be fulfilled, additional\
    \ constrains on usage, e.g., per-\n   endpoint session keys, might be needed to\
    \ avoid the issue.\n   When selecting security mechanisms for an RTP application,\
    \ it is\n   important to consider the properties of the key management.  Using\n\
    \   key management that is both automatic and integrated will provide\n   minimal\
    \ interruption for the user and is important to ensure that\n   security can,\
    \ and will remain, to be on by default.\n"
- title: 4.4.  End-to-End Security vs. Tunnels
  contents:
  - "4.4.  End-to-End Security vs. Tunnels\n   If the security mechanism only provides\
    \ a secured tunnel, for\n   example, like some common uses of IPsec (Section 3.3),\
    \ it is\n   important to consider the full end-to-end properties of the system.\n\
    \   How does one ensure that the path from the endpoint to the local\n   tunnel\
    \ ingress/egress is secure and can be trusted (and similarly for\n   the other\
    \ end of the tunnel)?  How does one handle the source\n   authentication of the\
    \ peer, as the security protocol identifies the\n   other end of the tunnel? \
    \ These are some of the issues that arise\n   when one considers a tunnel-based\
    \ security protocol rather than an\n   end-to-end one.  Even with clear requirements\
    \ and knowledge that one\n   still can achieve the security properties using a\
    \ tunnel-based\n   solution, one ought to prefer to use end-to-end mechanisms,\
    \ as they\n   are much less likely to violate any assumptions made about\n   deployment.\
    \  These assumptions can also be difficult to automatically\n   verify.\n"
- title: 4.5.  Plaintext Keys
  contents:
  - "4.5.  Plaintext Keys\n   Key management solutions that use plaintext keys, like\
    \ SDP security\n   descriptions (Section 3.1.3), require care to ensure a secure\n\
    \   transport of the signaling messages that contain the plaintext keys.\n   For\
    \ plaintext keys, the security properties of the system depend on\n   how securely\
    \ the plaintext keys are protected end-to-end between the\n   sender and receiver(s).\
    \  Not only does one need to consider what\n   transport protection is provided\
    \ for the signaling message, including\n   the keys, but also the degree to which\
    \ any intermediaries in the\n   signaling are trusted.  Untrusted intermediaries\
    \ can perform MITM\n   attacks on the communication or can log the keys, resulting\
    \ in the\n   encryption being compromised significantly after the actual\n   communication\
    \ occurred.\n"
- title: 4.6.  Interoperability
  contents:
  - "4.6.  Interoperability\n   Few RTP applications exist as independent applications\
    \ that never\n   interoperate with anything else.  Rather, they enable communication\n\
    \   with a potentially large number of other systems.  To minimize the\n   number\
    \ of security mechanisms that need to be implemented, it is\n   important to consider\
    \ if one can use the same security mechanisms as\n   other applications.  This\
    \ can also reduce problems with determining\n   what security level is actually\
    \ negotiated in a particular session.\n   The desire to be interoperable can,\
    \ in some cases, be in conflict\n   with the security requirements of an application.\
    \  To meet the\n   security goals, it might be necessary to sacrifice interoperability.\n\
    \   Alternatively, one can implement multiple security mechanisms; this,\n   however,\
    \ introduces the complication of ensuring that the user\n   understands what it\
    \ means to use a particular security system.  In\n   addition, the application\
    \ can then become vulnerable to bid-down\n   attacks.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   In the following, we describe a number of example security solutions\n\
    \   for applications using RTP services or frameworks.  These examples\n   are\
    \ provided to illustrate the choices available.  They are not\n   normative recommendations\
    \ for security.\n"
- title: 5.1.  Media Security for SIP-Established Sessions Using DTLS-SRTP
  contents:
  - "5.1.  Media Security for SIP-Established Sessions Using DTLS-SRTP\n   In 2009,\
    \ the IETF evaluated media security for RTP sessions\n   established using point-to-point\
    \ SIP sessions.  A number of\n   requirements were determined, and based on those,\
    \ the existing\n   solutions for media security and especially the keying methods\
    \ were\n   analyzed.  The resulting requirements and analysis were published in\n\
    \   [RFC5479].  Based on this analysis and working group discussion,\n   DTLS-SRTP\
    \ was determined to be the best solution.\n   The security solution for SIP using\
    \ DTLS-SRTP is defined in\n   \"Framework for Establishing a Secure Real-time\
    \ Transport Protocol\n   (SRTP) Security Context Using Datagram Transport Layer\
    \ Security\n   (DTLS)\" [RFC5763].  On a high level, the framework uses SIP with\
    \ SDP\n   offer/answer procedures to exchange the network addresses where the\n\
    \   server endpoint will have a DTLS-SRTP-enabled server running.  The\n   SIP\
    \ signaling is also used to exchange the fingerprints of the\n   certificate each\
    \ endpoint will use in the DTLS establishment process.\n   When the signaling\
    \ is sufficiently completed, the DTLS-SRTP client\n   performs DTLS handshakes\
    \ and establishes SRTP session keys.  The\n   clients also verify the fingerprints\
    \ of the certificates to verify\n   that no man in the middle has inserted themselves\
    \ into the exchange.\n   DTLS has a number of good security properties.  For example,\
    \ to\n   enable a MITM, someone in the signaling path needs to perform an\n  \
    \ active action and modify both the signaling message and the DTLS\n   handshake.\
    \  Solutions also exist that enable the fingerprints to be\n   bound to identities.\
    \  SIP Identity provides an identity established\n   by the first proxy for each\
    \ user [RFC4474].  This reduces the number\n   of nodes the connecting User Agent\
    \ has to trust to include just the\n   first-hop proxy rather than the full signaling\
    \ path.  The biggest\n   security weakness of this system is its dependency on\
    \ the signaling.\n   SIP signaling passes multiple nodes and there is usually\
    \ no message\n   security deployed, only hop-by-hop transport security, if any,\n\
    \   between the nodes.\n"
- title: 5.2.  Media Security for WebRTC Sessions
  contents:
  - "5.2.  Media Security for WebRTC Sessions\n   Web Real-Time Communication (WebRTC)\
    \ [WebRTC] is a solution providing\n   JavaScript web applications with real-time\
    \ media directly between\n   browsers.  Media is transported using RTP and protected\
    \ using a\n   mandatory application of SRTP [RFC3711], with keying done using\
    \ DTLS-\n   SRTP [RFC5764].  The security configuration is further defined in\n\
    \   \"WebRTC Security Architecture\" [WebRTC-SEC].\n   A hash of the peer's certificate\
    \ is provided to the JavaScript web\n   application, allowing that web application\
    \ to verify identity of the\n   peer.  There are several ways in which the certificate\
    \ hashes can be\n   verified.  An approach identified in the WebRTC security architecture\n\
    \   [WebRTC-SEC] is to use an identity provider.  In this solution, the\n   identity\
    \ provider, which is a third party to the web application,\n   signs the DTLS-SRTP\
    \ hash combined with a statement on the validity of\n   the user identity that\
    \ has been used to sign the hash.  The receiver\n   of such an identity assertion\
    \ can then independently verify the user\n   identity to ensure that it is the\
    \ identity that the receiver intended\n   to communicate with, and that the cryptographic\
    \ assertion holds; this\n   way, a user can be certain that the application also\
    \ can't perform a\n   MITM and acquire the keys to the media communication.  Other\
    \ ways of\n   verifying the certificate hashes exist; for example, they could\
    \ be\n   verified against a hash carried in some out-of-band channel (e.g.,\n\
    \   compare with a hash printed on a business card) or using a verbal\n   short\
    \ authentication string (e.g., as in ZRTP [RFC6189]) or using\n   hash continuity.\n\
    \   In the development of WebRTC, there has also been attention given to\n   privacy\
    \ considerations.  The main RTP-related concerns that have been\n   raised are:\n\
    \   Location disclosure:  As Interactive Connectivity Establishment (ICE)\n  \
    \    negotiation [RFC5245] provides IP addresses and ports for the\n      browser,\
    \ this leaks location information in the signaling to the\n      peer.  To prevent\
    \ this, one can block the usage of any ICE\n      candidate that isn't a relay\
    \ candidate, i.e., where the IP and\n      port provided belong to the service\
    \ providers media traffic relay.\n   Prevent tracking between sessions:  Static\
    \ RTP CNAMEs and DTLS-SRTP\n      certificates provide information that is reused\
    \ between session\n      instances.  Thus, to prevent tracking, such information\
    \ ought not\n      be reused between sessions, or the information ought not be\
    \ sent\n      in the clear.  Note that generating new certificates each time\n\
    \      prevents continuity in authentication, however, as WebRTC users\n     \
    \ are expected to use multiple devices to access the same\n      communication\
    \ service, such continuity can't be expected anyway;\n      instead, the above-described\
    \ identity mechanism has to be relied\n      on.\n   Note: The above cases are\
    \ focused on providing privacy from other\n   parties, not on providing privacy\
    \ from the web server that provides\n   the WebRTC JavaScript application.\n"
- title: 5.3.  IP Multimedia Subsystem (IMS) Media Security
  contents:
  - "5.3.  IP Multimedia Subsystem (IMS) Media Security\n   In IMS, the core network\
    \ is controlled by a single operator or by\n   several operators with high trust\
    \ in each other.  Except for some\n   types of accesses, the operator is in full\
    \ control, and no packages\n   are routed over the Internet.  Nodes in the core\
    \ network offer\n   services such as voice mail, interworking with legacy systems\
    \ (Public\n   Switched Telephone Network (PSTN), Global System for Mobile\n  \
    \ Communications (GSM), and 3G), and transcoding.  Endpoints are\n   authenticated\
    \ during the SIP registration using either IMS and\n   Authentication and Key\
    \ Agreement (AKA) (using Subscriber Identity\n   Module (SIM) credentials) or\
    \ SIP Digest (using a password).\n   In IMS media security [T3GPP.33.328], end-to-end\
    \ encryption is,\n   therefore, not seen as needed or desired as it would hinder,\
    \ for\n   example, interworking and transcoding, making calls between\n   incompatible\
    \ terminals impossible.  Because of this, IMS media\n   security mostly uses end-to-access-edge\
    \ security where SRTP is\n   terminated in the first node in the core network.\
    \  As the SIP\n   signaling is trusted and encrypted (with TLS or IPsec), security\n\
    \   descriptions [RFC4568] is considered to give good protection against\n   eavesdropping\
    \ over the accesses that are not already encrypted (GSM,\n   3G, and Long Term\
    \ Evolution (LTE)).  Media source authentication is\n   based on knowledge of\
    \ the SRTP session key and trust in that the IMS\n   network will only forward\
    \ media from the correct endpoint.\n   For enterprises and government agencies,\
    \ which might have weaker\n   trust in the IMS core network and can be assumed\
    \ to have compatible\n   terminals, end-to-end security can be achieved by deploying\
    \ their own\n   key management server.\n   Work on interworking with WebRTC is\
    \ currently ongoing; the security\n   will still be end-to-access-edge but using\
    \ DTLS-SRTP [RFC5763]\n   instead of security descriptions.\n"
- title: 5.4.  3GPP Packet-Switched Streaming Service (PSS)
  contents:
  - "5.4.  3GPP Packet-Switched Streaming Service (PSS)\n   The 3GPP Release 11 PSS\
    \ specification of the Packet-switched\n   Streaming Service (PSS) [T3GPP.26.234R11]\
    \ defines, in Annex R, a set\n   of security mechanisms.  These security mechanisms\
    \ are concerned with\n   protecting the content from being copied, i.e., Digital\
    \ Rights\n   Management (DRM).  To meet these goals with the specified solution,\n\
    \   the client implementation and the application platform are trusted to\n  \
    \ protect against access and modification by an attacker.\n   PSS is media controlled\
    \ by RTSP 1.0 [RFC2326] streaming over RTP.\n   Thus, an RTSP client whose user\
    \ wants to access a protected content\n   will request a session description (SDP\
    \ [RFC4566]) for the protected\n   content.  This SDP will indicate that the media\
    \ is protected by\n   ISMACryp 2.0 [ISMACryp2] encoding application units (AUs).\
    \  The\n   key(s) used to protect the media is provided in one of two ways.  If\n\
    \   a single key is used, then the client uses some DRM system to\n   retrieve\
    \ the key as indicated in the SDP.  Commonly, OMA DRM v2\n   [OMADRMv2] will be\
    \ used to retrieve the key.  If multiple keys are to\n   be used, then an additional\
    \ RTSP stream for key updates in parallel\n   with the media streams is established,\
    \ where key updates are sent to\n   the client using Short Term Key Messages defined\
    \ in the \"Service and\n   Content Protection for Mobile Broadcast Services\"\
    \ part [OMASCP] of\n   the OMA Mobile Broadcast Services [OMABCAST].\n   Worth\
    \ noting is that this solution doesn't provide any integrity\n   verification\
    \ method for the RTP header and payload header\n   information; only the encoded\
    \ media AU is protected. 3GPP has not\n   defined any requirement for supporting\
    \ any solution that could\n   provide that service.  Thus, replay or insertion\
    \ attacks are\n   possible.  Another property is that the media content can be\n\
    \   protected by the ones providing the media, so that the operators of\n   the\
    \ RTSP server have no access to unprotected content.  Instead, all\n   that want\
    \ to access the media are supposed to contact the DRM keying\n   server, and if\
    \ the device is acceptable, they will be given the key\n   to decrypt the media.\n\
    \   To protect the signaling, RTSP 1.0 supports the usage of TLS.  This\n   is,\
    \ however, not explicitly discussed in the PSS specification.\n   Usage of TLS\
    \ can prevent both modification of the session description\n   information and\
    \ help maintain some privacy of what content the user\n   is watching as all URLs\
    \ would then be confidentiality protected.\n"
- title: 5.5.  RTSP 2.0
  contents:
  - "5.5.  RTSP 2.0\n   The Real-time Streaming Protocol 2.0 [RTSP] offers an interesting\n\
    \   comparison to the PSS service (Section 5.4) that is based on RTSP 1.0\n  \
    \ and service requirements perceived by mobile operators.  A major\n   difference\
    \ between RTSP 1.0 and RTSP 2.0 is that 2.0 is fully defined\n   under the requirement\
    \ to have a mandatory-to-implement security\n   mechanism.  As it specifies one\
    \ transport media over RTP, it is also\n   defining security mechanisms for the\
    \ RTP-transported media streams.\n   The security goal for RTP in RTSP 2.0 is\
    \ to ensure that there is\n   confidentiality, integrity, and source authentication\
    \ between the\n   RTSP server and the client.  This to prevent eavesdropping on\
    \ what\n   the user is watching for privacy reasons and to prevent replay or\n\
    \   injection attacks on the media stream.  To reach these goals, the\n   signaling\
    \ also has to be protected, requiring the use of TLS between\n   the client and\
    \ server.\n   Using TLS-protected signaling, the client and server agree on the\n\
    \   media transport method when doing the SETUP request and response.\n   The\
    \ secured media transport is SRTP (SAVP/RTP) normally over UDP.\n   The key management\
    \ for SRTP is MIKEY using RSA-R mode.  The RSA-R\n   mode is selected as it allows\
    \ the RTSP server to select the key\n   despite having the RTSP client initiate\
    \ the MIKEY exchange.  It also\n   enables the reuse of the RTSP server's TLS\
    \ certificate when creating\n   the MIKEY messages, thus ensuring a binding between\
    \ the RTSP server\n   and the key exchange.  Assuming the SETUP process works,\
    \ this will\n   establish a SRTP crypto context to be used between the RTSP server\n\
    \   and the client for the RTP-transported media streams.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This entire document is about security.  Please\
    \ read it.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We thank the IESG for their careful review of [RFC7202],\
    \ which led to\n   the writing of this memo.  John Mattsson has contributed the\
    \ IMS\n   Media Security example (Section 5.3).\n   The authors wish to thank\
    \ Christian Correll, Dan Wing, Kevin Gross,\n   Alan Johnston, Michael Peck, Ole\
    \ Jacobsen, Spencer Dawkins, Stephen\n   Farrell, John Mattsson, and Suresh Krishnan\
    \ for their reviews and\n   proposals for improvements to the text.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [AES-GCM]   McGrew, D. and K. Igoe, \"AES-GCM\
    \ and AES-CCM\n               Authenticated Encryption in Secure RTP (SRTP)\"\
    , Work in\n               Progress, September 2013.\n   [ARIA-SRTP] Kim, W., Lee,\
    \ J., Kim, D., Park, J., and D. Kwon, \"The\n               ARIA Algorithm and\
    \ Its Use with the Secure Real-time\n               Transport Protocol(SRTP)\"\
    , Work in Progress, November\n               2013.\n   [EKT]       McGrew, D.\
    \ and D. Wing, \"Encrypted Key Transport for\n               Secure RTP\", Work\
    \ in Progress, February 2014.\n   [ISMACryp2] Internet Streaming Media Alliance\
    \ (ISMA), \"ISMA\n               Encryption and Authentication Version 2.0\",\
    \ November\n               2007, <http://www.oipf.tv/images/site/DOCS/mpegif/ISMA/\n\
    \               isma_easpec2.0.pdf>.\n   [OMABCAST]  Open Mobile Alliance, \"\
    Mobile Broadcast Services Version\n               1.0\", February 2009,\n    \
    \           <http://technical.openmobilealliance.org/Technical/\n            \
    \   release_program/bcast_v1_0.aspx>.\n   [OMADRMv2]  Open Mobile Alliance, \"\
    OMA Digital Rights Management\n               V2.0\", July 2008,\n           \
    \    <http://technical.openmobilealliance.org/\n               Technical/release_program/drm_v2_0.aspx>.\n\
    \   [OMASCP]    Open Mobile Alliance, \"Service and Content Protection for\n \
    \              Mobile Broadcast Services\", January 2013,\n               <http://technical.openmobilealliance.org/Technical/\n\
    \               release_program/docs/BCAST/V1_0_1-20130109-A/\n              \
    \ OMA-TS-BCAST_SvcCntProtection-V1_0_1-20130109-A.pdf>.\n   [RFC1112]   Deering,\
    \ S., \"Host extensions for IP multicasting\", STD\n               5, RFC 1112,\
    \ August 1989.\n   [RFC2326]   Schulzrinne, H., Rao, A., and R. Lanphier, \"Real\
    \ Time\n               Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n  \
    \ [RFC3365]   Schiller, J., \"Strong Security Requirements for Internet\n    \
    \           Engineering Task Force Standard Protocols\", BCP 61, RFC\n       \
    \        3365, August 2002.\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \               Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3640]   van\
    \ der Meer, J., Mackie, D., Swaminathan, V., Singer,\n               D., and P.\
    \ Gentric, \"RTP Payload Format for Transport of\n               MPEG-4 Elementary\
    \ Streams\", RFC 3640, November 2003.\n   [RFC3711]   Baugher, M., McGrew, D.,\
    \ Naslund, M., Carrara, E., and K.\n               Norrman, \"The Secure Real-time\
    \ Transport Protocol\n               (SRTP)\", RFC 3711, March 2004.\n   [RFC3830]\
    \   Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n              \
    \ Norrman, \"MIKEY: Multimedia Internet KEYing\", RFC 3830,\n               August\
    \ 2004.\n   [RFC4107]   Bellovin, S. and R. Housley, \"Guidelines for\n      \
    \         Cryptographic Key Management\", BCP 107, RFC 4107, June\n          \
    \     2005.\n   [RFC4301]   Kent, S. and K. Seo, \"Security Architecture for the\n\
    \               Internet Protocol\", RFC 4301, December 2005.\n   [RFC4383]  \
    \ Baugher, M. and E. Carrara, \"The Use of Timed Efficient\n               Stream\
    \ Loss-Tolerant Authentication (TESLA) in the Secure\n               Real-time\
    \ Transport Protocol (SRTP)\", RFC 4383, February\n               2006.\n   [RFC4474]\
    \   Peterson, J. and C. Jennings, \"Enhancements for\n               Authenticated\
    \ Identity Management in the Session\n               Initiation Protocol (SIP)\"\
    , RFC 4474, August 2006.\n   [RFC4566]   Handley, M., Jacobson, V., and C. Perkins,\
    \ \"SDP: Session\n               Description Protocol\", RFC 4566, July 2006.\n\
    \   [RFC4567]   Arkko, J., Lindholm, F., Naslund, M., Norrman, K., and E.\n  \
    \             Carrara, \"Key Management Extensions for Session\n             \
    \  Description Protocol (SDP) and Real Time Streaming\n               Protocol\
    \ (RTSP)\", RFC 4567, July 2006.\n   [RFC4568]   Andreasen, F., Baugher, M., and\
    \ D. Wing, \"Session\n               Description Protocol (SDP) Security Descriptions\
    \ for\n               Media Streams\", RFC 4568, July 2006.\n   [RFC4571]   Lazzaro,\
    \ J., \"Framing Real-time Transport Protocol (RTP)\n               and RTP Control\
    \ Protocol (RTCP) Packets over Connection-\n               Oriented Transport\"\
    , RFC 4571, July 2006.\n   [RFC4572]   Lennox, J., \"Connection-Oriented Media\
    \ Transport over the\n               Transport Layer Security (TLS) Protocol in\
    \ the Session\n               Description Protocol (SDP)\", RFC 4572, July 2006.\n\
    \   [RFC4607]   Holbrook, H. and B. Cain, \"Source-Specific Multicast for\n  \
    \             IP\", RFC 4607, August 2006.\n   [RFC4650]   Euchner, M., \"HMAC-Authenticated\
    \ Diffie-Hellman for\n               Multimedia Internet KEYing (MIKEY)\", RFC\
    \ 4650, September\n               2006.\n   [RFC4738]   Ignjatic, D., Dondeti,\
    \ L., Audet, F., and P. Lin, \"MIKEY-\n               RSA-R: An Additional Mode\
    \ of Key Distribution in\n               Multimedia Internet KEYing (MIKEY)\"\
    , RFC 4738, November\n               2006.\n   [RFC4771]   Lehtovirta, V., Naslund,\
    \ M., and K. Norrman, \"Integrity\n               Transform Carrying Roll-Over\
    \ Counter for the Secure Real-\n               time Transport Protocol (SRTP)\"\
    , RFC 4771, January 2007.\n   [RFC4949]   Shirey, R., \"Internet Security Glossary,\
    \ Version 2\", RFC\n               4949, August 2007.\n   [RFC5117]   Westerlund,\
    \ M. and S. Wenger, \"RTP Topologies\", RFC 5117,\n               January 2008.\n\
    \   [RFC5197]   Fries, S. and D. Ignjatic, \"On the Applicability of\n       \
    \        Various Multimedia Internet KEYing (MIKEY) Modes and\n              \
    \ Extensions\", RFC 5197, June 2008.\n   [RFC5245]   Rosenberg, J., \"Interactive\
    \ Connectivity Establishment\n               (ICE): A Protocol for Network Address\
    \ Translator (NAT)\n               Traversal for Offer/Answer Protocols\", RFC\
    \ 5245, April\n               2010.\n   [RFC5246]   Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n               (TLS) Protocol Version 1.2\"\
    , RFC 5246, August 2008.\n   [RFC5479]   Wing, D., Fries, S., Tschofenig, H.,\
    \ and F. Audet,\n               \"Requirements and Analysis of Media Security\
    \ Management\n               Protocols\", RFC 5479, April 2009.\n   [RFC5669]\
    \   Yoon, S., Kim, J., Park, H., Jeong, H., and Y. Won, \"The\n              \
    \ SEED Cipher Algorithm and Its Use with the Secure Real-\n               Time\
    \ Transport Protocol (SRTP)\", RFC 5669, August 2010.\n   [RFC5760]   Ott, J.,\
    \ Chesterfield, J., and E. Schooler, \"RTP Control\n               Protocol (RTCP)\
    \ Extensions for Single-Source Multicast\n               Sessions with Unicast\
    \ Feedback\", RFC 5760, February 2010.\n   [RFC5763]   Fischl, J., Tschofenig,\
    \ H., and E. Rescorla, \"Framework\n               for Establishing a Secure Real-time\
    \ Transport Protocol\n               (SRTP) Security Context Using Datagram Transport\
    \ Layer\n               Security (DTLS)\", RFC 5763, May 2010.\n   [RFC5764] \
    \  McGrew, D. and E. Rescorla, \"Datagram Transport Layer\n               Security\
    \ (DTLS) Extension to Establish Keys for the\n               Secure Real-time\
    \ Transport Protocol (SRTP)\", RFC 5764,\n               May 2010.\n   [RFC5766]\
    \   Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal\n               Using\
    \ Relays around NAT (TURN): Relay Extensions to\n               Session Traversal\
    \ Utilities for NAT (STUN)\", RFC 5766,\n               April 2010.\n   [RFC6043]\
    \   Mattsson, J. and T. Tian, \"MIKEY-TICKET: Ticket-Based\n               Modes\
    \ of Key Distribution in Multimedia Internet KEYing\n               (MIKEY)\"\
    , RFC 6043, March 2011.\n   [RFC6188]   McGrew, D., \"The Use of AES-192 and AES-256\
    \ in Secure\n               RTP\", RFC 6188, March 2011.\n   [RFC6189]   Zimmermann,\
    \ P., Johnston, A., and J. Callas, \"ZRTP: Media\n               Path Key Agreement\
    \ for Unicast Secure RTP\", RFC 6189,\n               April 2011.\n   [RFC6267]\
    \   Cakulev, V. and G. Sundaram, \"MIKEY-IBAKE: Identity-Based\n             \
    \  Authenticated Key Exchange (IBAKE) Mode of Key\n               Distribution\
    \ in Multimedia Internet KEYing (MIKEY)\", RFC\n               6267, June 2011.\n\
    \   [RFC6347]   Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n   \
    \            Security Version 1.2\", RFC 6347, January 2012.\n   [RFC6509]   Groves,\
    \ M., \"MIKEY-SAKKE: Sakai-Kasahara Key Encryption\n               in Multimedia\
    \ Internet KEYing (MIKEY)\", RFC 6509,\n               February 2012.\n   [RFC6562]\
    \   Perkins, C. and JM. Valin, \"Guidelines for the Use of\n               Variable\
    \ Bit Rate Audio with Secure RTP\", RFC 6562, March\n               2012.\n  \
    \ [RFC6904]   Lennox, J., \"Encryption of Header Extensions in the\n         \
    \      Secure Real-time Transport Protocol (SRTP)\", RFC 6904,\n             \
    \  April 2013.\n   [RFC7022]   Begen, A., Perkins, C., Wing, D., and E. Rescorla,\n\
    \               \"Guidelines for Choosing RTP Control Protocol (RTCP)\n      \
    \         Canonical Names (CNAMEs)\", RFC 7022, September 2013.\n   [RFC7202]\
    \   Perkins, C. and M. Westerlund, \"Securing the RTP Protocol\n             \
    \  Framework: Why RTP Does Not Mandate a Single Media\n               Security\
    \ Solution\", RFC 7202, April 2014.\n   [RTSP]      Schulzrinne, H., Rao, A.,\
    \ Lanphier, R., Westerlund, M.,\n               and M. Stiemerling, \"Real Time\
    \ Streaming Protocol 2.0\n               (RTSP)\", Work in Progress, February\
    \ 2014.\n   [T3GPP.26.234R11]\n               3GPP, \"Technical Specification\
    \ Group Services and System\n               Aspects; Transparent end-to-end Packet-switched\
    \ Streaming\n               Service (PSS); Protocols and codecs\", 3GPP TS 26.234\n\
    \               11.1.0, September 2012,\n               <http://www.3gpp.org/DynaReport/26234.htm>.\n\
    \   [T3GPP.26.234R8]\n               3GPP, \"Technical Specification Group Services\
    \ and System\n               Aspects; Transparent end-to-end Packet-switched Streaming\n\
    \               Service (PSS); Protocols and codecs\", 3GPP TS 26.234\n      \
    \         8.4.0, September 2009,\n               <http://www.3gpp.org/DynaReport/26234.htm>.\n\
    \   [T3GPP.26.346]\n               3GPP, \"Multimedia Broadcast/Multicast Service\
    \ (MBMS);\n               Protocols and codecs\", 3GPP TS 26.346 10.7.0, March\
    \ 2013,\n               <http://www.3gpp.org/DynaReport/26346.htm>.\n   [T3GPP.33.246]\n\
    \               3GPP, \"3G Security; Security of Multimedia Broadcast/\n     \
    \          Multicast Service (MBMS)\", 3GPP TS 33.246 11.1.0,\n              \
    \ December 2012,\n               <http://www.3gpp.org/DynaReport/33246.htm>.\n\
    \   [T3GPP.33.328]\n               3GPP, \"IP Multimedia Subsystem (IMS) media\
    \ plane\n               security\", 3GPP TS 33.328 12.1.0, December 2012,\n  \
    \             <http://www.3gpp.org/DynaReport/33328.htm>.\n   [WebRTC-SEC]\n \
    \              Rescorla, E., \"WebRTC Security Architecture\", Work in\n     \
    \          Progress, February 2014.\n   [WebRTC]   Alvestrand, H., \"Overview:\
    \ Real Time Protocols for\n               Browser-based Applications\", Work in\
    \ Progress, February\n               2014.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   SE-164\
    \ 80 Kista\n   Sweden\n   Phone: +46 10 714 82 87\n   EMail: magnus.westerlund@ericsson.com\n\
    \   Colin Perkins\n   University of Glasgow\n   School of Computing Science\n\
    \   Glasgow  G12 8QQ\n   United Kingdom\n   EMail: csp@csperkins.org\n   URI:\
    \   http://csperkins.org/\n"
