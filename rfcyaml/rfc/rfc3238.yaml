- title: __initial_text__
  contents:
  - "            IAB Architectural and Policy Considerations for\n               \
    \       Open Pluggable Edge Services\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document includes comments and recommendations by the IAB on\n\
    \   some architectural and policy issues related to the chartering of\n   Open\
    \ Pluggable Edge Services (OPES) in the IETF.  OPES are services\n   that would\
    \ be deployed at application-level intermediaries in the\n   network, for example,\
    \ at a web proxy cache between the origin server\n   and the client.  These intermediaries\
    \ would transform or filter\n   content, with the explicit consent of either the\
    \ content provider or\n   the end user.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Open Pluggable Edge Services (OPES) are services that would\
    \ be\n   deployed in the network, for example, at a web proxy cache between\n\
    \   the origin server and the client, that would transform or filter\n   content.\
    \  Examples of proposed OPES services include assembling\n   personalized web\
    \ pages, adding user-specific regional information to\n   web pages, virus scanning,\
    \ content adaptation for clients with\n   limited bandwidth, language translation,\
    \ and the like [OPES].\n   The question of chartering OPES in the IETF ([OPESBOF1],\
    \ [OPESBOF2],\n   [OPESBOF3]) and the related controversy in the IETF community\n\
    \   ([Carr01], [CDT01], [Morris01], [Orman01], [Routson01]) have raised\n   to\
    \ the fore several architectural and policy issues about robustness\n   and the\
    \ end-to-end integrity of data (in terms of the disparities\n   between what the\
    \ \"origin server\" makes available and what the client\n   receives).  In particular,\
    \ questions have been raised about the\n   possible requirements, for a protocol\
    \ to be developed and\n   standardized in the IETF, for that protocol to protect\
    \ the end-to-end\n   privacy and integrity of data.  This document attempts to\
    \ address\n   some of the architectural and policy issues that have been unresolved\n\
    \   in the chartering of OPES, and to come to some common recommendations\n  \
    \ from the IAB regarding these issues.\n   The purpose of this document is not\
    \ to recommend specific solutions\n   for OPES, or even to mandate specific functional\
    \ requirements.  This\n   is also not a recommendation to the IESG about whether\
    \ or not OPES\n   should be chartered.  Instead, these are recommendations on\
    \ issues\n   that any OPES solutions standardized in the IETF should be required\n\
    \   to address, similar to the \"Security Considerations\" currently\n   required\
    \ in IETF documents [RFC2316].  As an example, one way to\n   address security\
    \ issues is to show that appropriate security\n   mechanisms have been provided\
    \ in the protocol, and another way to\n   address security issues is to demonstrate\
    \ that no security issues\n   apply to this particular protocol.  (Note however\
    \ that a blanket\n   sentence that \"no security issues are involved\" is never\
    \ considered\n   sufficient to address security concerns in a protocol with known\n\
    \   security issues.)\n   This document will try to make our concerns underlying\
    \ integrity,\n   privacy, and security as clear as possible.  We recommend that\
    \ the\n   IESG require that OPES documents address integrity, privacy, and\n \
    \  security concerns in one way or another, either directly by\n   demonstrating\
    \ appropriate mechanisms, or by making a convincing case\n   that there are no\
    \ integrity or privacy concerns relevant to a\n   particular document.\n   In\
    \ particular, it seems unavoidable that at some point in the future\n   some OPES\
    \ service will perform inappropriately (e.g., a virus scanner\n   rejecting content\
    \ that does not include a virus), and some OPES\n   intermediary will be compromised\
    \ either inadvertently or with\n   malicious intent.  Given this, it seems necessary\
    \ for the overall\n   architecture to help protect end-to-end data integrity by\
    \ addressing,\n   from the beginning of the design process, the requirement of\
    \ helping\n   end hosts to detect and respond to inappropriate behavior by OPES\n\
    \   intermediaries.\n   One of the goals of the OPES architecture must be to maintain\
    \ the\n   robustness long cited as one of the overriding goals of the Internet\n\
    \   architecture [Clark88].  Given this, we recommend that the IESG\n   require\
    \ that the OPES architecture protect end-to-end data integrity\n   by supporting\
    \ end-host detection and response to inappropriate\n   behavior by OPES intermediaries.\
    \  We note that in this case by\n   \"supporting end-host detection\", we are\
    \ referring to supporting\n   detection by the humans responsible for the end\
    \ hosts at the content\n   provider and client.  We would note that many of these\
    \ concerns about\n   the ability of end hosts to detect and respond to the inappropriate\n\
    \   behavior of intermediaries could be applied to the architectures for\n   web\
    \ caches and content distribution infrastructures even without the\n   additional\
    \ complication of OPES.\n   Each section of the document contains a set of IAB\
    \ Considerations\n   that we would recommend be addressed by the OPES architecture.\n\
    \   Section 6 summarizes by listing all of these considerations in one\n   place.\n\
    \   In this document we try to use terminology consistent with RFC 3040\n   [RFC\
    \ 3040] and with OPES works in progress.\n"
- title: 2.  Some history of the controversy about chartering OPES
  contents:
  - "2.  Some history of the controversy about chartering OPES\n   One view on OPES\
    \ has been that \"OPES is deeply evil and the IETF\n   should stay far, far away\
    \ from this hideous abomination\" [ODell01].\n   Others have suggested that \"\
    OPES would reduce both the integrity, and\n   the perception of integrity, of\
    \ communications over the Internet, and\n   would significantly increase uncertainly\
    \ about what might have been\n   done to content as it moved through the network\"\
    , and that therefore\n   the risks of OPES outweigh the benefits [CDT01].  This\
    \ view of the\n   risks of OPES was revised in later email, based on the proposals\
    \ from\n   [Carr01], \"assuming that certain privacy and integrity protections\n\
    \   can be incorporated into the goals of the working group\" [Morris01].\n  \
    \ One issue concerns the one-party consent model.  In the one-party\n   consent\
    \ model, one of the end-nodes (that is, either the content\n   provider or the\
    \ end user) is required to explicitly authorize the\n   OPES service, but authorization\
    \ is not required from both parties.\n   [CDT01] comments that relying only on\
    \ a one-party consent model in\n   the OPES charter \"could facilitate third-party\
    \ or state-sponsored\n   censorship of Internet content without the knowledge\
    \ or consent of\n   end users\", among other undesirable scenarios.\n   A natural\
    \ first question is whether there is any architectural\n   benefit to putting\
    \ specific services inside the network (e.g., at the\n   application-level web\
    \ cache) instead of positioning all services\n   either at the content provider\
    \ or the end user.  (Note that we are\n   asking here whether there is architectural\
    \ benefit, which is not the\n   same as asking if there is a business model.)\
    \  Client-centric\n   services suggested for OPES include virus scanning, language\n\
    \   translation, limited client bandwidth adaptation, request filtering,\n   and\
    \ adaptation of streaming media, and suggested server-centric\n   services include\
    \ location-based services and personalized web pages.\n   It seems clear that\
    \ there can indeed be significant architectural\n   benefit in providing some\
    \ OPES services inside the network at the\n   application-level OPES intermediary.\
    \  For example, if some content is\n   already available from a local or regional\
    \ web cache, and the end\n   user requires some transformation (such as adaptation\
    \ to a limited-\n   bandwidth path) applied to that data, providing that service\
    \ at the\n   web cache itself can prevent the wasted bandwidth of having to\n\
    \   retrieve more data from the content provider, and at the same time\n   avoid\
    \ unnecessary delays in providing the service to the end user.\n   A second question\
    \ is whether the architectural benefits of providing\n   services in the middle\
    \ of the network outweigh the architectural\n   costs, such as the potential costs\
    \ concerning data integrity.  This\n   is similar to the issues considered in\
    \ RFC 3135 [RFC 3135] of the\n   relative costs and benefits of placing performance-enhancing\
    \ proxies\n   (PEPs) in the middle of a network to address link-related\n   degradations.\
    \  In the case of PEPs, the potential costs include\n   disabling the end-to-end\
    \ use of IP layer security mechanisms;\n   introducing a new possible point of\
    \ failure that is not under the\n   control of the end systems; adding increased\
    \ difficulty in diagnosing\n   and dealing with failures; and introducing possible\
    \ complications\n   with asymmetric routing or mobile hosts.  RFC 3135 carefully\n\
    \   considers these possible costs, the mitigations that can be\n   introduced,\
    \ and the cases when the benefits of performance-enhancing\n   proxies to the\
    \ user are likely to outweigh the costs.  A similar\n   approach could be applied\
    \ to OPES services (though we do not attempt\n   that here).\n   A third question\
    \ is whether an OPES service, designed primarily for a\n   single retrieval action,\
    \ has an impact on the application layer\n   addressing architecture.  This is\
    \ related to the integrity issue\n   above, but is independent of whether these\
    \ services are applied in\n   the middle of the network or at either end.\n  \
    \ Most of this document deals with the specific issue of data integrity\n   with\
    \ OPES services, including the goal of enabling end hosts to\n   detect and respond\
    \ to inappropriate behavior from broken or\n   compromised OPES intermediaries.\n\
    \   We agree that one-party consent, with one of the end-hosts explicitly\n  \
    \ authorizing the OPES service, must be a requirement for OPES to be\n   standardized\
    \ in the IETF.\n   However, as we discuss in the next section of this document,\
    \ we agree\n   with [CDT01] that the one-party consent model by itself (e.g.,\
    \ with\n   one of the end-hosts authorizing the OPES service, and the other\n\
    \   end-host perhaps being unaware of the OPES service) is insufficient\n   for\
    \ protecting data integrity in the network.  We also agree with\n   [CDT01] that,\
    \ regardless of the security and authorization mechanisms\n   standardized for\
    \ OPES in the IETF, OPES implementations could\n   probably be modified to circumvent\
    \ these mechanisms, resulting in the\n   unauthorized modification of content.\
    \  Many of the protocols in the\n   IETF could be modified for anti-social purposes\
    \ - transport protocols\n   could be modified to evade end-to-end congestion control,\
    \ routing\n   protocols could be modified to inject invalid routes, web proxy\n\
    \   caches could be used for the unauthorized modification of content\n   even\
    \ without OPES, and so on.  None of these seem like compelling\n   reasons not\
    \ to standardize transport protocols, routing protocols,\n   web caching protocols,\
    \ or OPES itself.  In our view, it means instead\n   that the infrastructure needs,\
    \ as much as possible, to be designed to\n   detect and defend itself against\
    \ compromised implementations, and\n   misuses of protocols need to be addressed\
    \ directly, each in the\n   appropriate venue.\n   Mechanisms such as digital\
    \ signatures, which help users to verify for\n   themselves that content has not\
    \ been altered, are a first step\n   towards the detection of the unauthorized\
    \ modification of content in\n   the network.  However, in the case of OPES, additional\
    \ protection to\n   ensure the end-to-end integrity of data is desirable as well,\
    \ for\n   example, to help end-users to detect cases where OPES intermediaries\n\
    \   were authorized to modify content, but perform inappropriate\n   modifications.\
    \  We would note that mechanisms can *help* end-users to\n   detect compromised\
    \ OPES intermediaries in some cases even if they do\n   not *guarantee* that end-users\
    \ will be able to detect compromised\n   OPES intermediaries in all cases.\n \
    \  If OPES is chartered, the OPES working group will also have to\n   explicitly\
    \ decide and document whether the OPES architecture must be\n   compatible with\
    \ the use of end-to-end encryption by one or more ends\n   of an OPES-involved\
    \ session.  If OPES was compatible with end-to-end\n   encryption, this would\
    \ effectively ensure that OPES boxes would be\n   restricted to ones that are\
    \ known, trusted, explicitly addressed at\n   the IP layer, and authorized (by\
    \ the provision of decryption keys) by\n   at least one of the ends.  Compatibility\
    \ with end-to-end encryption\n   would also help to prevent the widespread deployment\
    \ of yet another\n   set of services that, to benefit from, require one to keep\
    \ one's\n   packet contents in the clear for all to snoop.\n   IAB Considerations:\n\
    \   (2.1) One-party consent: An OPES framework standardized in the IETF\n   must\
    \ require that the use of any OPES service be explicitly\n   authorized by one\
    \ of the application-layer end-hosts (that is, either\n   the content provider\
    \ or the client).\n   (2.2) IP-layer communications: For an OPES framework standardized\
    \ in\n   the IETF, the OPES intermediary must be explicitly addressed at the\n\
    \   IP layer by the end user.\n   We note that (2.2) is not intended to preclude\
    \ a chain of\n   intermediaries, with the first intermediary in the chain explicitly\n\
    \   addressed at the IP layer by the end user.\n"
- title: 3.  End-to-end Integrity
  contents:
  - "3.  End-to-end Integrity\n   The proposed OPES services have several possible\
    \ forms, including\n   server-centric services, such as the dynamic assembling\
    \ of web pages,\n   explicitly authorized by the content provider; client-centric\n\
    \   services such as virus scanning or language translation explicitly\n   authorized\
    \ by the end user to act on the response from the content\n   provider; and client-centric\
    \ services such as privacy-based services\n   or content-filtering explicitly\
    \ authorized by the end user to act on\n   the request from the end user to the\
    \ content provider.  We consider\n   the issue of the end-to-end integrity of\
    \ data separately for these\n   different classes of services.\n   For each specific\
    \ service, the question arises of whether it is\n   necessary for both the content\
    \ provider and the end user to be able\n   to detect and respond to inappropriate\
    \ behavior by OPES\n   intermediaries, or if it is sufficient for just one of\
    \ the two end-\n   hosts to have this ability.  We don't attempt a general answer,\
    \ but\n   we do discuss the issues further in the sections below.\n"
- title: 3.1.  Data integrity with client-centric OPES services on responses
  contents:
  - "3.1.  Data integrity with client-centric OPES services on responses\n   Why is\
    \ there any concern about the end-to-end integrity of data in a\n   client-centric\
    \ OPES service acting on a response from a content\n   provider?  If the client\
    \ requests a service such as virus scanning or\n   language translation, why is\
    \ that of any concern to the content\n   provider one way or another?  One answer\
    \ is that one of the proper\n   concerns of the IETF is to design architectures\
    \ that enable end-hosts\n   to detect and respond to inappropriate actions in\
    \ the network.  This\n   seems of particular importance for powerful devices in\
    \ the network\n   such as OPES intermediaries, which are authorized by one of\
    \ the end-\n   nodes to act on or transform data in the network, but other than\
    \ that\n   are not under the direct control of that end-node.\n   Consider as\
    \ an example the services of virus scanning or language\n   translation.  The\
    \ end user has reasonable power in detecting and\n   dealing with imperfect or\
    \ corrupted virus scanners or language\n   translators that are under her direct\
    \ control (e.g., on her own\n   machine).  The end user knows exactly what program\
    \ is installed, and\n   has direct access to the content before and after the\
    \ service is\n   applied.  The end user would have less control over similar services\n\
    \   offered by OPES in the network itself, where the end user's only\n   control\
    \ might be the binary one of authorizing or not authorizing the\n   service. \
    \ (We also note that services deployed on the end host in a\n   self-contained\
    \ fashion, such as a local virus scanning program, are\n   not a service in the\
    \ network, and therefore are not in the province\n   of the IETF one way or another.)\n\
    \   For a OPES service such as virus scanning or language translation,\n   the\
    \ end user could detect a corrupted intermediary, but only through\n   a \"black-box\"\
    \ approach of comparing the input with the output.  This\n   is also imprecise\
    \ and requires some effort, compared to the effort\n   required to detect a corrupted\
    \ virus scanner installed on one's own\n   machine.  For example, the user could\
    \ retrieve the \"non-OPES\" version\n   of the content directly from the content\
    \ provider, if there is a\n   \"non-OPES\" version, and compare this with the\
    \ \"OPES\" version of the\n   content available from the OPES intermediary.  However,\
    \ in the case\n   of dynamic content, the \"non-OPES\" version of the content\
    \ retrieved\n   by the user directly from the content provider might not necessarily\n\
    \   be the same as the \"non-OPES\" version of the content considered by\n   the\
    \ OPES intermediary.  This limited control by the end user of the\n   OPES service,\
    \ and the limited ability of the end user to detect\n   imperfect or corrupted\
    \ intermediaries, argues for an architecture\n   that helps the content provider\
    \ to detect and respond to imperfect or\n   corrupted OPES intermediaries as well.\n\
    \   We consider the specific example of virus scanning, authorized by the\n  \
    \ end user as an OPES service.  One could imagine virus scanning as a\n   widely\
    \ deployed OPES service, augmenting the virus scanning done on\n   the end host\
    \ itself.  If I ask for, say, a paper by Steve Bellovin on\n   security and viruses\
    \ in the network, and am informed by my authorized\n   OPES virus-scanning service\
    \ that this content does not pass the\n   virus-scan, there are a number of possibilities:\n\
    \   (1) Unknown to Steve, the content (that is, Steve's paper) contains a\n  \
    \     harmful virus.\n   (2) Steve inserted a harmful virus in the content on\
    \ purpose, with\n       playful or malicious intent.\n   (3) The OPES virus scanner\
    \ can't distinguish between a true harmful\n       virus, and Steve's paper about\
    \ harmful viruses.\n   (4) My local OPES virus scanner has been hacked, with malicious\n\
    \       intent, to reject all content from Steve Bellovin.\n   At some point,\
    \ for some content, some widely-deployed implementation\n   of some OPES virus\
    \ scanner is likely to result in problem (3), and\n   some OPES implementation\
    \ is likely to be corrupted to result in\n   problem (4).  Because the end user\
    \ has limited control over the OPES\n   virus scanner, the end user also is limited\
    \ in its ability to detect\n   problems (3) or (4) in the OPES virus scanner.\
    \  In addition, the\n   content provider is probably the one with the strongest\
    \ incentive to\n   detect problems (3) or (4) in the OPES virus scanner.  (The\
    \ content\n   provider generally has a strong incentive to detect problem (1)\
    \ as\n   well.)  In this case, it seems prudent that the overall OPES\n   architecture\
    \ should be carefully designed to prevent the OPES service\n   of virus scanning,\
    \ as authorized by the client, from unnecessarily\n   preventing the distribution\
    \ of content that in fact does not have\n   viruses.\n   Obviously, it is not\
    \ viable to propose that content providers simply\n   indicate that some content\
    \ should be passed to the end user without\n   virus scanning - the point of virus\
    \ scanning is for the end user to\n   exercise control in this regard.  However,\
    \ if some form of end-system\n   notification allows the content provider to find\
    \ out that the content\n   is being rejected by a virus scanning service instead\
    \ of being\n   delivered to the end user, then the content provider (Steve, in\
    \ this\n   case) might want to inform end users that this content is known by\n\
    \   the content provider not to pass some OPES virus scanning services.\n   End\
    \ users could then make their own decisions about whether or not to\n   retrieve\
    \ that content bypassing the OPES virus scanning service,\n   relying on their\
    \ own virus scanner or an alternate virus scanning\n   service for this particular\
    \ content.  Such end-system notification to\n   the content provider, if requested,\
    \ cannot be enforced, and cannot be\n   relied upon from corrupted intermediaries,\
    \ but it seems important\n   nevertheless.\n   Of course, malicious users can\
    \ also use their awareness of the virus\n   scanning service to perfect their\
    \ ability to construct malicious\n   viruses that can evade the virus scanning\
    \ service.  This will be done\n   anyway, with any virus scanning service, and\
    \ seems like an acceptable\n   cost to allow content providers some protection\
    \ against the vagaries\n   of imperfect or corrupted OPES services in the network.\n\
    \   Thus, for client-requested services such as virus scanning and\n   language\
    \ translation, it is clearly desirable for the origin server\n   to have notification,\
    \ if it requests it, that these services are\n   being performed on its content\
    \ before the content is sent to the\n   client.  Any such end-system notification\
    \ might be accompanied by\n   reduced performance (in terms of overhead, delays,\
    \ etc.) for the OPES\n   service applied to that content.  But some form of end-system\n\
    \   notification is clearly necessary if content providers are to be able\n  \
    \ to detect and respond to actions by OPES intermediaries that are\n   deemed\
    \ inappropriate by the content provider.\n   Similarly for a client-based OPES\
    \ service of language translation, it\n   is clearly desirable for content providers\
    \ to be able to inform end\n   users when some content is deemed by the content\
    \ provider to be\n   incompatible with language translation.  In this case, the\
    \ important\n   issue is not to prevent the OPES language translation from being\n\
    \   performed on the content, but instead to give the content provider\n   some\
    \ mechanism to discover the language translation, and to inform\n   the end user\
    \ (or more precisely, to inform the end user's host\n   computer) if the content\
    \ provider believes that this language\n   translation is incompatible with this\
    \ particular content.\n   IAB Considerations:\n   (3.1) Notification: The overall\
    \ OPES framework needs to assist\n   content providers in detecting and responding\
    \ to client-centric\n   actions by OPES intermediaries that are deemed inappropriate\
    \ by the\n   content provider.\n"
- title: 3.2.  Data integrity with server-centric OPES services
  contents:
  - "3.2.  Data integrity with server-centric OPES services\n   What are the concerns,\
    \ if any, with the end-to-end integrity of data\n   in a server-centric OPES service\
    \ such as location-based services?\n   For example, CNN could authorize a location-based\
    \ OPES service, where\n   the OPES intermediary inserts the weather report or\
    \ news headline of\n   regional interest into the requested web page.  The same\
    \ issue of the\n   detection and response to broken or modified OPES intermediaries\n\
    \   occurs with server-centric OPES as with client-centric OPES services.\n  \
    \ We only consider server-centric services on responses, as we are not\n   aware\
    \ of any proposals for server-centric OPES services on requests\n   from the client\
    \ to the content provider.\n   How are the end-nodes to detect inappropriate actions\
    \ from OPES\n   services authorized by the content provider?  The OPES service\
    \ is\n   being performed at an OPES intermediary in the network itself, and\n\
    \   not under the direct control of the content provider; in particular,\n   the\
    \ content provider might not have the ability to monitor directly\n   the output\
    \ of the OPES intermediary.  One could argue that the\n   content provider and\
    \ server-centric OPES intermediary are part of a\n   single distributed application,\
    \ and can be responsible on their own\n   for detecting and dealing with broken\
    \ or modified OPES\n   intermediaries, without involving the end user.  But this\
    \ is\n   unconvincing, basically arguing that standardizing protocols for\n  \
    \ performing OPES services is a network issue properly in the domain of\n   the\
    \ IETF, but the ensuring the overall integrity of the service is a\n   distributed\
    \ application matter, and not in the province of the IETF\n   at all.  It would\
    \ seem to us that you can't have it both ways.\n   Simply labeling the content\
    \ provider and the OPES intermediary as\n   part of the same distributed application\
    \ does not give the content\n   provider the ability to monitor the actions of\
    \ the OPES intermediary.\n   However, if the end user receives some form of notification\
    \ that\n   these OPES services have been provided, and has some mechanism for\n\
    \   receiving the \"non-OPES\" content from the content provider without\n   the\
    \ OPES intermediary's modifications (if there is such a thing as a\n   non-OPES\
    \ version of the content), then the end user is in a better\n   position to detect\
    \ and react to inappropriate actions from\n   compromised or poorly-designed OPES\
    \ intermediaries.  Thus, it is\n   clear that some form of end-system notification\
    \ is required to allow\n   the end user to detect and respond to broken or modified\
    \ OPES\n   intermediaries.  If the end user has notification of action by OPES\n\
    \   intermediaries, it could \"veto\" an OPES service simply by throwing\n   the\
    \ OPES-modified content away.  And if the client wants to talk\n   directly to\
    \ the origin server to receive the \"non-OPES\" version, and\n   the origin server\
    \ is configured to allow this, then the OPES\n   intermediary must be designed\
    \ to permit this end-to-end\n   communication.\n   In addition to concerns about\
    \ detecting and responding to faulty or\n   compromised OPES intermediaries, there\
    \ are purely policy-based\n   concerns about the integrity of data.  If the content\
    \ provider looks\n   at the source IP address from the HTTP request, or tosses\
    \ a coin, in\n   order to decide what content to provide, then that is the content\n\
    \   provider's business.  But if there exists a \"non-OPES\" version of\n   some\
    \ content available from the content provider, and also modified\n   versions\
    \ available from OPES intermediaries, then it is important\n   that end users\
    \ would be able to discover that they are receiving a\n   modified version from\
    \ the network, and not the \"non-OPES\" version\n   that is also available from\
    \ the content provider directly.\n   IAB Considerations:\n   (3.2) Notification:\
    \ The overall OPES framework should assist end\n   users in detecting the behavior\
    \ of OPES intermediaries, potentially\n   allowing them to identify imperfect\
    \ or compromised intermediaries.\n   (3.3) Non-blocking: If there exists a \"\
    non-OPES\" version of content\n   available from the content provider, the OPES\
    \ architecture must not\n   prevent users from retrieving this \"non-OPES\" version\
    \ from the\n   content provider.\n"
- title: 3.3.  Data integrity with client-centric OPES services on requests
  contents:
  - "3.3.  Data integrity with client-centric OPES services on requests\n   There\
    \ have also been proposals for OPES services authorized by the\n   client on requests\
    \ from the client to the content provider.  Examples\n   include services that\
    \ remove fields from the HTTP header for added\n   privacy, and content-filtering\
    \ services that filter requests based on\n   the requested URL.  For such services,\
    \ there is still a need for end\n   hosts to be assisted in detecting and responding\
    \ to imperfect or\n   corrupted intermediaries, but it seems less clear to what\
    \ extent this\n   applies to the content provider, and to what extent it applies\
    \ to the\n   end user that authorized the service.  The requirements will probably\n\
    \   have to be determined by the OPES and wider IETF communities on a\n   case-by-case\
    \ basis for each specific service.\n"
- title: 4.  Application Layer Addresses
  contents:
  - "4.  Application Layer Addresses\n   Most application layer addressing revolves\
    \ around URIs, which, for\n   the most part, give a structured method to refer\
    \ to a single data\n   entity on a remote server.  URIs are universal in that,\
    \ in principle,\n   the same result is obtained irrespective of the location of\
    \ the\n   client performing the resolution.\n   Practice often differs from this\
    \ theory -- ad-strippers remove data\n   from pages at the client end; web server\
    \ farms redirect clients to\n   one of several potential target machines for load-balancing\
    \ or to\n   give the user \"localized\" content.\n   However, from an architectural\
    \ standpoint, it is important to be\n   clear about what is being done here. \
    \ In all cases, URI resolution\n   standards (as defined for individual URI schemes,\
    \ such as HTTP) apply\n   unchanged between the client and the OPES intermediary.\
    \  What the\n   intermediary does to fulfill the request is not material to the\n\
    \   discussion, and must produce a result that is compliant with the\n   applicable\
    \ URI scheme definition.  In this sense, the OPES\n   intermediary is the \"endpoint\"\
    \ of URI resolution.\n   In client-centric OPES, the intermediary is resolving\
    \ the URI on\n   behalf of the client, and then applying client-requested services\
    \ to\n   provide a data response to the client.  The client gets the data it\n\
    \   wanted, but it did not carry out the URI resolution.\n   In server-centric\
    \ OPES, the \"origin server\" cedes its authority to\n   the intermediary to determine\
    \ what is the \"appropriate\" content to\n   supply for a given URI.   The client\
    \ may well perform standard URI\n   resolution, but that reaches no further than\
    \ the intermediary.\n   With those distinctions firmly in mind, there are two\
    \ particular\n   areas of concern for OPES-like services.\n   The first is the\
    \ consideration of the effect of a series of\n   interactions, over time and location\
    \ (i.e., not just one document\n   retrieval).   Potential problems include inconsistencies\
    \ in intra-\n   and inter-document references -- depending on what content is\n\
    \   changed, references from one version of a document might not exist in\n  \
    \ a modified target, etc.\n   The other concern is whether this leads to the creation\
    \ of content\n   that is exclusively accessible through the use of an intermediary.\n\
    \   That is, there is no \"non-OPES\" version.  Either this should not be\n  \
    \ allowed, or this would argue for an extension to the Internet\n   application\
    \ layer addressing architecture.\n   IAB Considerations:\n   (4.1) URI resolution:\
    \ OPES documentation must be clear in describing\n   these services as being applied\
    \ to the result of URI resolution, not\n   as URI resolution itself.\n   (4.2)\
    \ Reference validity: All proposed services must define their\n   impact on inter-\
    \ and intra-document reference validity.\n   (4.3) Any services that cannot be\
    \ achieved while respecting the above\n   two considerations may be reviewed as\
    \ potential requirements for\n   Internet application addressing architecture\
    \ extensions, but must not\n   be undertaken as ad hoc fixes.\n"
- title: 5.  Privacy
  contents:
  - "5.  Privacy\n   Intermediaries in the middle of the network increase the number\
    \ of\n   locations where the privacy of an end-to-end transaction could be\n \
    \  compromised.  Some of these privacy concerns apply to web caches and\n   CDNs\
    \ in general as well as specifically to OPES intermediaries.  It\n   seems a reasonable\
    \ requirement, for OPES to be chartered in the IETF,\n   that the issue of providing\
    \ mechanisms for end users to determine the\n   privacy policies of OPES intermediaries\
    \ should be addressed.  These\n   mechanisms could be quite different for client-centric\
    \ and server-\n   centric OPES services.\n   For a complex issue such as an OPES\
    \ architecture, which interacts\n   with protocols from other standards bodies\
    \ as well as from other IETF\n   working groups, it seems necessary to keep in\
    \ mind the overall\n   picture while, at the same time, breaking out specific\
    \ parts of the\n   problem to be standardized in particular working groups.  Thus,\
    \ a\n   requirement that the overall OPES architecture address privacy\n   concerns\
    \ does not necessarily mean that the mechanisms for this need\n   to be developed\
    \ in the IETF, or in the OPES working group (if it is\n   chartered).\n   IAB\
    \ Considerations:\n   (5.1) Privacy: The overall OPES framework must provide for\
    \ mechanisms\n   for end users to determine the privacy policies of OPES\n   intermediaries.\n"
- title: 6.  Summary of IAB Considerations
  contents:
  - "6.  Summary of IAB Considerations\n   (2.1) One-party consent: An OPES framework\
    \ standardized in the IETF\n   must require that the use of any OPES service be\
    \ explicitly\n   authorized by one of the application-layer end-hosts (that is,\
    \ either\n   the content provider or the client).\n   (2.2) IP-layer communications:\
    \ For an OPES framework standardized in\n   the IETF, the OPES intermediary must\
    \ be explicitly addressed at the\n   IP layer by the end user.\n   (3.1) Notification:\
    \ The overall OPES framework needs to assist\n   content providers in detecting\
    \ and responding to client-centric\n   actions by OPES intermediaries that are\
    \ deemed inappropriate by the\n   content provider.\n   (3.2) Notification: The\
    \ overall OPES framework should assist end\n   users in detecting the behavior\
    \ of OPES intermediaries, potentially\n   allowing them to identify imperfect\
    \ or compromised intermediaries.\n   (3.3) Non-blocking: If there exists a \"\
    non-OPES\" version of content\n   available from the content provider, the OPES\
    \ architecture must not\n   prevent users from retrieving this \"non-OPES\" version\
    \ from the\n   content provider.\n   (4.1) URI resolution: OPES documentation\
    \ must be clear in describing\n   these services as being applied to the result\
    \ of URI resolution, not\n   as URI resolution itself.\n   (4.2) Reference validity:\
    \ All proposed services must define their\n   impact on inter- and intra-document\
    \ reference validity.\n   (4.3) Any services that cannot be achieved while respecting\
    \ the above\n   two considerations may be reviewed as potential requirements for\n\
    \   Internet application addressing architecture extensions, but must not\n  \
    \ be undertaken as ad hoc fixes.\n   (5.1) Privacy: The overall OPES framework\
    \ must provide for mechanisms\n   for end users to determine the privacy policies\
    \ of OPES\n   intermediaries.\n"
- title: 7.  Conclusions
  contents:
  - "7.  Conclusions\n   This document includes comments and recommendations by the\
    \ IAB on\n   some architectural and policy issues related to the chartering of\n\
    \   OPES in the IETF.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document has benefited from discussions with members\
    \ of the IAB\n   and the IESG, contributors to OPES, John Wroclawski, and others.\n\
    \   However, this is a document of the IAB, and we do not claim that the\n   other\
    \ people listed above agree with the contents.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [Carr01]    Wayne Carr, \"Suggested OPES Requirements for\
    \ Integrity,\n               Privacy and Security\", email to ietf-openproxy@imc.org,\n\
    \               August 16, 2001.  URL \"http://www.imc.org/ietf-\n           \
    \    openproxy/mail-archive/msg00869.html\".\n   [CDT01]     Policy Concerns Raised\
    \ by Proposed OPES Working Group\n               Efforts, email to the IESG, from\
    \ the Center for Democracy\n               & Technology, August 3, 2001.  URL\n\
    \               \"http://www.imc.org/ietf-openproxy/mail-\n               archive/msg00828.html\"\
    .\n   [Clark88]   David D. Clark, The Design Philosophy of the DARPA\n       \
    \        Internet Protocols, SIGCOMM 1988.\n   [Morris01]  John Morris, \"Re:\
    \ corrected -  Suggested OPES\n               Requirements for Integrity, Privacy\
    \ and Security\",\n               September 28, 2001.  Email to ietf-openproxy@imc.org,\
    \ URL\n               \"http://www.imc.org/ietf-openproxy/mail-\n            \
    \   archive/msg00935.html\".\n   [ODell01]   Mike O'Dell, \"OPES continuing froth...\"\
    , Message-Id:\n               <200107101341.JAA30276@ccr.org>, July 10, 2001,\
    \ email to\n               ietf@ietf.org.  URL \"http://www1.ietf.org/mail-\n\
    \               archive/ietf/Current/msg12650.html\".\n   [OPES]      Open Pluggable\
    \ Edge Services (OPES) Web Page,\n               \"http://www.ietf-opes.org/\"\
    .\n   [OPESBOF1]  OPES BOF, 49th IETF, December 12, 2000.  Agenda:\n         \
    \      \"http://www.ietf.org/ietf/00dec/opes-agenda.txt\".\n               Minutes:\
    \  \"http://www.ietf.cnri.reston.va.us/\n               proceedings/00dec/toc.htm#P25_256\"\
    .\n   [OPESBOF2]  OPES BOF, 50th IETF, March 9, 2001.  Minutes:\n            \
    \   \"http://www.ietf.org/proceedings/01mar/ietf50-40.htm\".\n   [OPESBOF3]  OPES\
    \ BOF, 51st IETF, August 2001.  Agenda:\n               \"http://www.ietf.org/ietf/01aug/opes.txt\"\
    .  Minutes:\n               \"http://www.ietf.org/proceedings/01aug/minutes/OPES.HTM\"\
    .\n   [Orman01]   Hilarie Orman, \"Data Integrity for Open Pluggable\n       \
    \        Services\", email to ietf-openproxy@imc.org, August 15,\n           \
    \    2001.  URL \"http://www.imc.org/ietf-openproxy/mail-\n               archive/msg00865.html\"\
    .\n   [RFC 2316]  Bellovin, S., \"Report of the IAB Security Architecture\n  \
    \             Workshop\", RFC 2316, April 1998.\n   [RFC2401]   Kent, S. and R.\
    \ Atkinson, \"Security Architecture for the\n               Internet Protocol\"\
    , RFC 2401, November 1998.\n   [RFC 3040]  Cooper, I., Melve, I. and G. Tomlinson,\
    \ \"Internet Web\n               Replication and Caching Taxonomy\", RFC 3040,\
    \ January\n               2001.\n   [RFC 3135]  Border, J., Kojo, M., Griner,\
    \ J., Montenegro, G. and Z.\n               Shelby, \"Performance Enhancing Proxies\
    \ Intended to\n               Mitigate Link-Related Degradations\", RFC 3135,\
    \ June 2001.\n   [Routson01] Joyce Routson, IETF's Edge Standards Controversy,\
    \ July\n               11, 2001, Stardust CDN Week.  URL\n               \"http://www.stardust.com/cdnweek/articles/2001/07/09/\n\
    \               opes.htm\".\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document does not propose any new protocols,\
    \ and therefore does\n   not involve any security considerations in that sense.\
    \  However,\n   throughout this document there are discussions of the privacy\
    \ and\n   integrity issues of OPES services and the architectural requirements\n\
    \   created by those issues.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   There are no IANA considerations regarding this\
    \ document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Internet Architecture Board\n   EMail:  iab@iab.org\n\
    \   Membership at time this document was completed:\n   Harald Alvestrand\n  \
    \ Ran Atkinson\n   Rob Austein\n   Fred Baker\n   Steve Bellovin\n   Brian Carpenter\n\
    \   Jon Crowcroft\n   Leslie Daigle\n   Steve Deering\n   Sally Floyd\n   Geoff\
    \ Huston\n   John Klensin\n   Henning Schulzrinne\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
