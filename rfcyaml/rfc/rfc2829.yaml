- title: __initial_text__
  contents:
  - '                    Authentication Methods for LDAP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies particular combinations of security\n  \
    \ mechanisms which are required and recommended in LDAP [1]\n   implementations.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   LDAP version 3 is a powerful access protocol for directories.\n\
    \   It offers means of searching, fetching and manipulating directory\n   content,\
    \ and ways to access a rich set of security functions.\n   In order to function\
    \ for the best of the Internet, it is vital that\n   these security functions\
    \ be interoperable; therefore there has to be\n   a minimum subset of security\
    \ functions that is common to all\n   implementations that claim LDAPv3 conformance.\n\
    \   Basic threats to an LDAP directory service include:\n      (1)   Unauthorized\
    \ access to data via data-fetching operations,\n      (2)   Unauthorized access\
    \ to reusable client authentication\n            information by monitoring others'\
    \ access,\n      (3)   Unauthorized access to data by monitoring others' access,\n\
    \      (4)   Unauthorized modification of data,\n      (5)   Unauthorized modification\
    \ of configuration,\n      (6)   Unauthorized or excessive use of resources (denial\
    \ of\n            service), and\n      (7)   Spoofing of directory: Tricking a\
    \ client into believing that\n            information came from the directory\
    \ when in fact it did not,\n            either by modifying data in transit or\
    \ misdirecting the\n            client's connection.\n   Threats (1), (4), (5)\
    \ and (6) are due to hostile clients.  Threats\n   (2), (3) and (7) are due to\
    \ hostile agents on the path between client\n   and server, or posing as a server.\n\
    \   The LDAP protocol suite can be protected with the following security\n   mechanisms:\n\
    \      (1)   Client authentication by means of the SASL [2] mechanism\n      \
    \      set, possibly backed by the TLS credentials exchange\n            mechanism,\n\
    \      (2)   Client authorization by means of access control based on the\n  \
    \          requestor's authenticated identity,\n      (3)   Data integrity protection\
    \ by means of the TLS protocol or\n            data-integrity SASL mechanisms,\n\
    \      (4)   Protection against snooping by means of the TLS protocol or\n   \
    \         data-encrypting SASL mechanisms,\n      (5)   Resource limitation by\
    \ means of administrative limits on\n            service controls, and\n     \
    \ (6)   Server authentication by means of the TLS protocol or SASL\n         \
    \   mechanism.\n   At the moment, imposition of access controls is done by means\
    \ outside\n   the scope of the LDAP protocol.\n   In this document, the term \"\
    user\" represents any application which is\n   an LDAP client using the directory\
    \ to retrieve or store information.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [3].\n"
- title: 2.  Example deployment scenarios
  contents:
  - "2.  Example deployment scenarios\n   The following scenarios are typical for\
    \ LDAP directories on the\n   Internet, and have different security requirements.\
    \ (In the\n   following, \"sensitive\" means data that will cause real damage\
    \ to the\n   owner if revealed; there may be data that is protected but not\n\
    \   sensitive).  This is not intended to be a comprehensive list, other\n   scenarios\
    \ are possible, especially on physically protected networks.\n      (1)   A read-only\
    \ directory, containing no sensitive data,\n            accessible to \"anyone\"\
    , and TCP connection hijacking or IP\n            spoofing is not a problem. \
    \ This directory requires no\n            security functions except administrative\
    \ service limits.\n      (2)   A read-only directory containing no sensitive data;\
    \ read\n            access is granted based on identity.  TCP connection\n   \
    \         hijacking is not currently a problem. This scenario requires\n     \
    \       a secure authentication function.\n      (3)   A read-only directory containing\
    \ no sensitive data; and the\n            client needs to ensure that the directory\
    \ data is\n            authenticated by the server and not modified while being\n\
    \            returned from the server.\n      (4)   A read-write directory, containing\
    \ no sensitive data; read\n            access is available to \"anyone\", update\
    \ access to properly\n            authorized persons.  TCP connection hijacking\
    \ is not\n            currently a problem.  This scenario requires a secure\n\
    \            authentication function.\n      (5)   A directory containing sensitive\
    \ data.  This scenario\n            requires session confidentiality protection\
    \ AND secure\n            authentication.\n"
- title: '3.  Authentication and Authorization:  Definitions and Concepts'
  contents:
  - "3.  Authentication and Authorization:  Definitions and Concepts\n   This section\
    \ defines basic terms, concepts, and interrelationships\n   regarding authentication,\
    \ authorization, credentials, and identity.\n   These concepts are used in describing\
    \ how various security approaches\n   are utilized in client authentication and\
    \ authorization.\n"
- title: 3.1.  Access Control Policy
  contents:
  - "3.1.  Access Control Policy\n   An access control policy is a set of rules defining\
    \ the protection of\n   resources, generally in terms of the capabilities of persons\
    \ or other\n   entities accessing those resources.  A common expression of an\
    \ access\n   control policy is an access control list.  Security objects and\n\
    \   mechanisms, such as those described here, enable the expression of\n   access\
    \ control policies and their enforcement.  Access control\n   policies are typically\
    \ expressed in terms of access control\n   attributes as described below.\n"
- title: 3.2.  Access Control Factors
  contents:
  - "3.2.  Access Control Factors\n   A request, when it is being processed by a server,\
    \ may be associated\n   with a wide variety of security-related factors (section\
    \ 4.2 of [1]).\n   The server uses these factors to determine whether and how\
    \ to process\n   the request.  These are called access control factors (ACFs).\
    \  They\n   might include source IP address, encryption strength, the type of\n\
    \   operation being requested, time of day, etc.  Some factors may be\n   specific\
    \ to the request itself, others may be associated with the\n   connection via\
    \ which the request is transmitted, others (e.g. time of\n   day) may be \"environmental\"\
    .\n   Access control policies are expressed in terms of access control\n   factors.\
    \  E.g., a request having ACFs i,j,k can perform operation Y\n   on resource Z.\
    \ The set of ACFs that a server makes available for such\n   expressions is implementation-specific.\n"
- title: 3.3.  Authentication, Credentials, Identity
  contents:
  - "3.3.  Authentication, Credentials, Identity\n   Authentication credentials are\
    \ the evidence supplied by one party to\n   another, asserting the identity of\
    \ the supplying party (e.g. a user)\n   who is attempting to establish an association\
    \ with the other party\n   (typically a server).  Authentication is the process\
    \ of generating,\n   transmitting, and verifying these credentials and thus the\
    \ identity\n   they assert.  An authentication identity is the name presented\
    \ in a\n   credential.\n   There are many forms of authentication credentials\
    \ -- the form used\n   depends upon the particular authentication mechanism negotiated\
    \ by\n   the parties.  For example: X.509 certificates, Kerberos tickets,\n  \
    \ simple identity and password pairs.  Note that an authentication\n   mechanism\
    \ may constrain the form of authentication identities used\n   with it.\n"
- title: 3.4.  Authorization Identity
  contents:
  - "3.4.  Authorization Identity\n   An authorization identity is one kind of access\
    \ control factor.  It\n   is the name of the user or other entity that requests\
    \ that operations\n   be performed.  Access control policies are often expressed\
    \ in terms\n   of authorization identities; e.g., entity X can perform operation\
    \ Y\n   on resource Z.\n   The authorization identity bound to an association\
    \ is often exactly\n   the same as the authentication identity presented by the\
    \ client, but\n   it may be different.  SASL allows clients to specify an authorization\n\
    \   identity distinct from the authentication identity asserted by the\n   client's\
    \ credentials.  This permits agents such as proxy servers to\n   authenticate\
    \ using their own credentials, yet request the access\n   privileges of the identity\
    \ for which they are proxying [2].  Also,\n   the form of authentication identity\
    \ supplied by a service like TLS\n   may not correspond to the authorization identities\
    \ used to express a\n   server's access control  policy, requiring a server-specific\
    \ mapping\n   to be done.  The method by which a server composes and validates\
    \ an\n   authorization identity from the authentication credentials supplied\n\
    \   by a client is implementation-specific.\n"
- title: 4. Required security mechanisms
  contents:
  - "4. Required security mechanisms\n   It is clear that allowing any implementation,\
    \ faced with the above\n   requirements, to pick and choose among the possible\
    \ alternatives is\n   not a strategy that is likely to lead to interoperability.\
    \ In the\n   absence of mandates, clients will be written that do not support\
    \ any\n   security function supported by the server, or worse, support only\n\
    \   mechanisms like cleartext passwords that provide clearly inadequate\n   security.\n\
    \   Active intermediary attacks are the most difficult for an attacker to\n  \
    \ perform, and for an implementation to protect against.  Methods that\n   protect\
    \ only against hostile client and passive eavesdropping attacks\n   are useful\
    \ in situations where the cost of protection against active\n   intermediary attacks\
    \ is not justified based on the perceived risk of\n   active intermediary attacks.\n\
    \   Given the presence of the Directory, there is a strong desire to see\n   mechanisms\
    \ where identities take the form of a Distinguished Name and\n   authentication\
    \ data can be stored in the directory; this means that\n   either this data is\
    \ useless for faking authentication (like the Unix\n   \"/etc/passwd\" file format\
    \ used to be), or its content is never passed\n   across the wire unprotected\
    \ - that is, it's either updated outside\n   the protocol or it is only updated\
    \ in sessions well protected against\n   snooping.  It is also desirable to allow\
    \ authentication methods to\n   carry authorization identities based on existing\
    \ forms of user\n   identities for backwards compatibility with non-LDAP-based\n\
    \   authentication services.\n   Therefore, the following implementation conformance\
    \ requirements are\n   in place:\n      (1)   For a read-only, public directory,\
    \ anonymous authentication,\n            described in section 5, can be used.\n\
    \      (2)   Implementations providing password-based authenticated\n        \
    \    access MUST support authentication using the DIGEST-MD5 SASL\n          \
    \  mechanism [4], as described in section 6.1.  This provides\n            client\
    \ authentication with protection against passive\n            eavesdropping attacks,\
    \ but does not provide protection\n            against active intermediary attacks.\n\
    \      (3)   For a directory needing session protection and\n            authentication,\
    \ the Start TLS extended operation [5], and\n            either the simple authentication\
    \ choice or the SASL EXTERNAL\n            mechanism, are to be used together.\
    \  Implementations SHOULD\n            support authentication with a password\
    \ as described in\n            section 6.2, and SHOULD support authentication\
    \ with a\n            certificate as described in section 7.1.  Together, these\n\
    \            can provide integrity and disclosure protection of\n            transmitted\
    \ data, and authentication of client and server,\n            including protection\
    \ against active intermediary attacks.\n   If TLS is negotiated, the client MUST\
    \ discard all information about\n   the server fetched prior to the TLS negotiation.\
    \  In particular, the\n   value of supportedSASLMechanisms MAY be different after\
    \ TLS has been\n   negotiated (specifically, the EXTERNAL mechanism or the proposed\n\
    \   PLAIN mechanism are likely to only be listed after a TLS negotiation\n   has\
    \ been performed).\n   If a SASL security layer is negotiated, the client MUST\
    \ discard all\n   information about the server fetched prior to SASL.  In particular,\n\
    \   if the client is configured to support multiple SASL mechanisms, it\n   SHOULD\
    \ fetch supportedSASLMechanisms both before and after the SASL\n   security layer\
    \ is negotiated and verify that the value has not\n   changed after the SASL security\
    \ layer was negotiated.  This detects\n   active attacks which remove supported\
    \ SASL mechanisms from the\n   supportedSASLMechanisms list, and allows the client\
    \ to ensure that it\n   is using the best mechanism supported by both client and\
    \ server\n   (additionally, this is a SHOULD to allow for environments where the\n\
    \   supported SASL mechanisms list is provided to the client through a\n   different\
    \ trusted source, e.g. as part of a digitally signed object).\n"
- title: 5. Anonymous authentication
  contents:
  - "5. Anonymous authentication\n   Directory operations which modify entries or\
    \ access protected\n   attributes or entries generally require client authentication.\n\
    \   Clients which do not intend to perform any of these operations\n   typically\
    \ use anonymous authentication.\n   LDAP implementations MUST support anonymous\
    \ authentication, as\n   defined in section 5.1.\n   LDAP implementations MAY\
    \ support anonymous authentication with TLS,\n   as defined in section 5.2.\n\
    \   While there MAY be access control restrictions to prevent access to\n   directory\
    \ entries, an LDAP server SHOULD allow an anonymously-bound\n   client to retrieve\
    \ the supportedSASLMechanisms attribute of the root\n   DSE.\n   An LDAP server\
    \ MAY use other information about the client provided by\n   the lower layers\
    \ or external means to grant or deny access even to\n   anonymously authenticated\
    \ clients.\n"
- title: 5.1. Anonymous authentication procedure
  contents:
  - "5.1. Anonymous authentication procedure\n   An LDAP client which has not successfully\
    \ completed a bind operation\n   on a connection is anonymously authenticated.\n\
    \   An LDAP client MAY also specify anonymous authentication in a bind\n   request\
    \ by using a zero-length OCTET STRING with the simple\n   authentication choice.\n"
- title: 5.2. Anonymous authentication and TLS
  contents:
  - "5.2. Anonymous authentication and TLS\n   An LDAP client MAY use the Start TLS\
    \ operation [5] to negotiate the\n   use of TLS security [6].  If the client has\
    \ not bound beforehand,\n   then until the client uses the EXTERNAL SASL mechanism\
    \ to negotiate\n   the recognition of the client's certificate, the client is\n\
    \   anonymously authenticated.\n   Recommendations on TLS ciphersuites are given\
    \ in section 10.\n   An LDAP server which requests that clients provide their\
    \ certificate\n   during TLS negotiation MAY use a local security policy to determine\n\
    \   whether to successfully complete TLS negotiation if the client did\n   not\
    \ present a certificate which could be validated.\n"
- title: 6. Password-based authentication
  contents:
  - "6. Password-based authentication\n   LDAP implementations MUST support authentication\
    \ with a password\n   using the DIGEST-MD5 SASL mechanism for password protection,\
    \ as\n   defined in section 6.1.\n   LDAP implementations SHOULD support authentication\
    \ with the \"simple\"\n   password choice when the connection is protected against\n\
    \   eavesdropping using TLS, as defined in section 6.2.\n"
- title: 6.1. Digest authentication
  contents:
  - "6.1. Digest authentication\n   An LDAP client MAY determine whether the server\
    \ supports this\n   mechanism by performing a search request on the root DSE,\
    \ requesting\n   the supportedSASLMechanisms attribute, and checking whether the\n\
    \   string \"DIGEST-MD5\" is present as a value of this attribute.\n   In the\
    \ first stage of authentication, when the client is performing\n   an \"initial\
    \ authentication\" as defined in section 2.1 of [4], the\n   client sends a bind\
    \ request in which the version number is 3, the\n   authentication choice is sasl,\
    \ the sasl mechanism name is \"DIGEST-\n   MD5\", and the credentials are absent.\
    \  The client then waits for a\n   response from the server to this request.\n\
    \   The server will respond with a bind response in which the resultCode\n   is\
    \ saslBindInProgress, and the serverSaslCreds field is present.  The\n   contents\
    \ of this field is a string defined by \"digest-challenge\" in\n   section 2.1.1\
    \ of [4].  The server SHOULD include a realm indication\n   and MUST indicate\
    \ support for UTF-8.\n   The client will send a bind request with a distinct message\
    \ id, in\n   which the version number is 3, the authentication choice is sasl,\
    \ the\n   sasl mechanism name is \"DIGEST-MD5\", and the credentials contain the\n\
    \   string defined by \"digest-response\" in section 2.1.2 of [4].  The\n   serv-type\
    \ is \"ldap\".\n   The server will respond with a bind response in which the resultCode\n\
    \   is either success, or an error indication.  If the authentication is\n   successful\
    \ and the server does not support subsequent authentication,\n   then the credentials\
    \ field is absent.  If the authentication is\n   successful and the server supports\
    \ subsequent authentication, then\n   the credentials field contains the string\
    \ defined by \"response-auth\"\n   in section 2.1.3 of [4].   Support for subsequent\
    \ authentication is\n   OPTIONAL in clients and servers.\n"
- title: 6.2. "simple" authentication choice under TLS encryption
  contents:
  - "6.2. \"simple\" authentication choice under TLS encryption\n   A user who has\
    \ a directory entry containing a userPassword attribute\n   MAY authenticate to\
    \ the directory by performing a simple password\n   bind sequence following the\
    \ negotiation of a TLS ciphersuite\n   providing connection confidentiality [6].\n\
    \   The client will use the Start TLS operation [5] to negotiate the use\n   of\
    \ TLS security [6] on the connection to the LDAP server.  The client\n   need\
    \ not have bound to the directory beforehand.\n   For this authentication procedure\
    \ to be successful, the client and\n   server MUST negotiate a ciphersuite which\
    \ contains a bulk encryption\n   algorithm of appropriate strength.  Recommendations\
    \ on cipher suites\n   are given in section 10.\n   Following the successful completion\
    \ of TLS negotiation, the client\n   MUST send an LDAP bind request with the version\
    \ number of 3, the name\n   field containing the name of the user's entry, and\
    \ the \"simple\"\n   authentication choice, containing a password.\n   The server\
    \ will, for each value of the userPassword attribute in the\n   named user's entry,\
    \ compare these for case-sensitive equality with\n   the client's presented password.\
    \  If there is a match, then the\n   server will respond with resultCode success,\
    \ otherwise the server\n   will respond with resultCode invalidCredentials.\n"
- title: 6.3. Other authentication choices with TLS
  contents:
  - "6.3. Other authentication choices with TLS\n   It is also possible, following\
    \ the negotiation of TLS, to perform a\n   SASL authentication which does not\
    \ involve the exchange of plaintext\n   reusable passwords.  In this case the\
    \ client and server need not\n   negotiate a ciphersuite which provides confidentiality\
    \ if the only\n   service required is data integrity.\n"
- title: 7. Certificate-based authentication
  contents:
  - "7. Certificate-based authentication\n   LDAP implementations SHOULD support authentication\
    \ via a client\n   certificate in TLS, as defined in section 7.1.\n"
- title: 7.1. Certificate-based authentication with TLS
  contents:
  - "7.1. Certificate-based authentication with TLS\n   A user who has a public/private\
    \ key pair in which the public key has\n   been signed by a Certification Authority\
    \ may use this key pair to\n   authenticate to the directory server if the user's\
    \ certificate is\n   requested by the server.  The user's certificate subject\
    \ field SHOULD\n   be the name of the user's directory entry, and the Certification\n\
    \   Authority must be sufficiently trusted by the directory server to\n   have\
    \ issued the certificate in order that the server can process the\n   certificate.\
    \  The means by which servers validate certificate paths\n   is outside the scope\
    \ of this document.\n   A server MAY support mappings for certificates in which\
    \ the subject\n   field name is different from the name of the user's directory\
    \ entry.\n   A server which supports mappings of names MUST be capable of being\n\
    \   configured to support certificates for which no mapping is required.\n   The\
    \ client will use the Start TLS operation [5] to negotiate the use\n   of TLS\
    \ security [6] on the connection to the LDAP server.  The client\n   need not\
    \ have bound to the directory beforehand.\n   In the TLS negotiation, the server\
    \ MUST request a certificate.  The\n   client will provide its certificate to\
    \ the server, and MUST perform a\n   private key-based encryption, proving it\
    \ has the private key\n   associated with the certificate.\n   As deployments\
    \ will require protection of sensitive data in transit,\n   the client and server\
    \ MUST negotiate a ciphersuite which contains a\n   bulk encryption algorithm\
    \ of appropriate strength.  Recommendations\n   of cipher suites are given in\
    \ section 10.\n   The server MUST verify that the client's certificate is valid.\
    \ The\n   server will normally check that the certificate is issued by a known\n\
    \   CA, and that none of the certificates on the client's certificate\n   chain\
    \ are invalid or revoked.  There are several procedures by which\n   the server\
    \ can perform these checks.\n   Following the successful completion of TLS negotiation,\
    \ the client\n   will send an LDAP bind request with the SASL \"EXTERNAL\" mechanism.\n"
- title: 8. Other mechanisms
  contents:
  - "8. Other mechanisms\n   The LDAP \"simple\" authentication choice is not suitable\
    \ for\n   authentication on the Internet where there is no network or transport\n\
    \   layer confidentiality.\n   As LDAP includes native anonymous and plaintext\
    \ authentication\n   methods, the \"ANONYMOUS\" and \"PLAIN\" SASL mechanisms\
    \ are not used\n   with LDAP.  If an authorization identity of a form different\
    \ from a\n   DN is requested by the client, a mechanism that protects the password\n\
    \   in transit SHOULD be used.\n   The following SASL-based mechanisms are not\
    \ considered in this\n   document: KERBEROS_V4, GSSAPI and SKEY.\n   The \"EXTERNAL\"\
    \ SASL mechanism can be used to request the LDAP server\n   make use of security\
    \ credentials exchanged by a lower layer. If a TLS\n   session has not been established\
    \ between the client and server prior\n   to making the SASL EXTERNAL Bind request\
    \ and there is no other\n   external source of authentication credentials (e.g.\
    \  IP-level\n   security [8]), or if, during the process of establishing the TLS\n\
    \   session, the server did not request the client's authentication\n   credentials,\
    \ the SASL EXTERNAL bind MUST fail with a result code of\n   inappropriateAuthentication.\
    \  Any client authentication and\n   authorization state of the LDAP association\
    \ is lost, so the LDAP\n   association is in an anonymous state after the failure.\n"
- title: 9. Authorization Identity
  contents:
  - "9. Authorization Identity\n   The authorization identity is carried as part of\
    \ the SASL credentials\n   field in the LDAP Bind request and response.\n   When\
    \ the \"EXTERNAL\" mechanism is being negotiated, if the credentials\n   field\
    \ is present, it contains an authorization identity of the\n   authzId form described\
    \ below.\n   Other mechanisms define the location of the authorization identity\
    \ in\n   the credentials field.\n   The authorization identity is a string in\
    \ the UTF-8 character set,\n   corresponding to the following ABNF [7]:\n   ;\
    \ Specific predefined authorization (authz) id schemes are\n   ; defined below\
    \ -- new schemes may be defined in the future.\n   authzId    = dnAuthzId / uAuthzId\n\
    \   ; distinguished-name-based authz id.\n   dnAuthzId  = \"dn:\" dn\n   dn  \
    \       = utf8string    ; with syntax defined in RFC 2253\n   ; unspecified userid,\
    \ UTF-8 encoded.\n   uAuthzId   = \"u:\" userid\n   userid     = utf8string  \
    \  ; syntax unspecified\n   A utf8string is defined to be the UTF-8 encoding of\
    \ one or more ISO\n   10646 characters.\n   All servers which support the storage\
    \ of authentication credentials,\n   such as passwords or certificates, in the\
    \ directory MUST support the\n   dnAuthzId choice.\n   The uAuthzId choice allows\
    \ for compatibility with client applications\n   which wish to authenticate to\
    \ a local directory but do not know their\n   own Distinguished Name or have a\
    \ directory entry.  The format of the\n   string is defined as only a sequence\
    \ of UTF-8 encoded ISO 10646\n   characters, and further interpretation is subject\
    \ to prior agreement\n   between the client and server.\n   For example, the userid\
    \ could identify a user of a specific directory\n   service, or be a login name\
    \ or the local-part of an RFC 822 email\n   address. In general a uAuthzId MUST\
    \ NOT be assumed to be globally\n   unique.\n   Additional authorization identity\
    \ schemes MAY be defined in future\n   versions of this document.\n"
- title: 10. TLS Ciphersuites
  contents:
  - "10. TLS Ciphersuites\n   The following ciphersuites defined in [6] MUST NOT be\
    \ used for\n   confidentiality protection of passwords or data:\n         TLS_NULL_WITH_NULL_NULL\n\
    \         TLS_RSA_WITH_NULL_MD5\n         TLS_RSA_WITH_NULL_SHA\n   The following\
    \ ciphersuites defined in [6] can be cracked easily (less\n   than a week of CPU\
    \ time on a standard CPU in 1997).  The client and\n   server SHOULD carefully\
    \ consider the value of the password or data\n   being protected before using\
    \ these ciphersuites:\n         TLS_RSA_EXPORT_WITH_RC4_40_MD5\n         TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\n\
    \         TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\n         TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA\n\
    \         TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA\n         TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\n\
    \         TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\n         TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\n\
    \         TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\n   The following ciphersuites\
    \ are vulnerable to man-in-the-middle\n   attacks, and SHOULD NOT be used to protect\
    \ passwords or sensitive\n   data, unless the network configuration is such that\
    \ the danger of a\n   man-in-the-middle attack is tolerable:\n         TLS_DH_anon_EXPORT_WITH_RC4_40_MD5\n\
    \         TLS_DH_anon_WITH_RC4_128_MD5\n         TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA\n\
    \         TLS_DH_anon_WITH_DES_CBC_SHA\n         TLS_DH_anon_WITH_3DES_EDE_CBC_SHA\n\
    \   A client or server that supports TLS MUST support at least\n   TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA.\n"
- title: 11. SASL service name for LDAP
  contents:
  - "11. SASL service name for LDAP\n   For use with SASL [2], a protocol must specify\
    \ a service name to be\n   used with various SASL mechanisms, such as GSSAPI.\
    \  For LDAP, the\n   service name is \"ldap\", which has been registered with\
    \ the IANA as a\n   GSSAPI service name.\n"
- title: 12. Security Considerations
  contents:
  - "12. Security Considerations\n   Security issues are discussed throughout this\
    \ memo; the\n   (unsurprising) conclusion is that mandatory security is important,\n\
    \   and that session encryption is required when snooping is a problem.\n   Servers\
    \ are encouraged to prevent modifications by anonymous users.\n   Servers may\
    \ also wish to minimize denial of service attacks by timing\n   out idle connections,\
    \ and returning the unwillingToPerform result\n   code rather than performing\
    \ computationally expensive operations\n   requested by unauthorized clients.\n\
    \   A connection on which the client has not performed the Start TLS\n   operation\
    \ or negotiated a suitable SASL mechanism for connection\n   integrity and encryption\
    \ services is subject to man-in-the-middle\n   attacks to view and modify information\
    \ in transit.\n   Additional security considerations relating to the EXTERNAL\
    \ mechanism\n   to negotiate TLS can be found in [2], [5] and [6].\n"
- title: 13. Acknowledgements
  contents:
  - "13. Acknowledgements\n   This document is a product of the LDAPEXT Working Group\
    \ of the IETF.\n   The contributions of its members is greatly appreciated.\n"
- title: 14. Bibliography
  contents:
  - "14. Bibliography\n   [1] Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\
    \ Access\n       Protocol (v3)\", RFC 2251, December 1997.\n   [2] Myers, J.,\
    \ \"Simple Authentication and Security Layer (SASL)\", RFC\n       2222, October\
    \ 1997.\n   [3] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n\
    \       Levels\", BCP 14, RFC 2119, March 1997.\n   [4] Leach, P. and C. Newman,\
    \ \"Using Digest Authentication as a SASL\n       Mechanism\", RFC 2831, May 2000.\n\
    \   [5] Hodges, J., Morgan, R. and M. Wahl, \"Lightweight Directory Access\n \
    \      Protocol (v3): Extension for Transport Layer Security\", RFC 2830,\n  \
    \     May 2000.\n   [6] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    , RFC\n       2246, January 1999.\n   [7] Crocker, D., Ed. and P. Overell, \"\
    Augmented BNF for Syntax\n       Specifications: ABNF\", RFC 2234, November 1997.\n\
    \   [8] Kent, S. and R. Atkinson, \"Security Architecture for the Internet\n \
    \      Protocol\", RFC 2401, November 1998.\n"
- title: 15. Authors' Addresses
  contents:
  - "15. Authors' Addresses\n   Mark Wahl\n   Sun Microsystems, Inc.\n   8911 Capital\
    \ of Texas Hwy #4140\n   Austin TX 78759\n   USA\n   EMail: M.Wahl@innosoft.com\n\
    \   Harald Tveit Alvestrand\n   EDB Maxware\n   Pirsenteret\n   N-7462 Trondheim,\
    \ Norway\n   Phone: +47 73 54 57 97\n   EMail: Harald@Alvestrand.no\n   Jeff Hodges\n\
    \   Oblix, Inc.\n   18922 Forge Drive\n   Cupertino, CA 95014\n   USA\n   Phone:\
    \ +1-408-861-6656\n   EMail: JHodges@oblix.com\n   RL \"Bob\" Morgan\n   Computing\
    \ and Communications\n   University of Washington\n   Seattle, WA 98105\n   USA\n\
    \   Phone: +1-206-221-3307\n   EMail: rlmorgan@washington.edu\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
