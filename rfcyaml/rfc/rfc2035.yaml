- title: __initial_text__
  contents:
  - '              RTP Payload Format for JPEG-compressed Video

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the RTP payload format for JPEG video streams.\n\
    \   The packet format is optimized for real-time video streams where\n   codec\
    \ parameters change rarely from frame to frame.\n   This document is a product\
    \ of the Audio-Video Transport working group\n   within the Internet Engineering\
    \ Task Force.  Comments are solicited\n   and should be addressed to the working\
    \ group's mailing list at rem-\n   conf@es.net and/or the author(s).\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Joint Photographic Experts Group (JPEG) standard [1,2,3]\
    \ defines\n   a family of compression algorithms for continuous-tone, still images.\n\
    \   This still image compression standard can be applied to video by\n   compressing\
    \ each frame of video as an independent still image and\n   transmitting them\
    \ in series.  Video coded in this fashion is often\n   called Motion-JPEG.\n \
    \  We first give an overview of JPEG and then describe the specific\n   subset\
    \ of JPEG that is supported in RTP and the mechanism by which\n   JPEG frames\
    \ are carried as RTP payloads.\n   The JPEG standard defines four modes of operation:\
    \ the sequential DCT\n   mode, the progressive DCT mode, the lossless mode, and\
    \ the\n   hierarchical mode.  Depending on the mode, the image is represented\n\
    \   in one or more passes.  Each pass (called a frame in the JPEG\n   standard)\
    \ is further broken down into one or more scans.  Within each\n   scan, there\
    \ are one to four components,which represent the three\n   components of a color\
    \ signal (e.g., \"red, green, and blue\", or a\n   luminance signal and two chromanince\
    \ signals).  These components can\n   be encoded as separate scans or interleaved\
    \ into a single scan.\n   Each frame and scan is preceded with a header containing\
    \ optional\n   definitions for compression parameters like quantization tables\
    \ and\n   Huffman coding tables.  The headers and optional parameters are\n  \
    \ identified with \"markers\" and comprise a marker segment; each scan\n   appears\
    \ as an entropy-coded bit stream within two marker segments.\n   Markers are aligned\
    \ to byte boundaries and (in general) cannot appear\n   in the entropy-coded segment,\
    \ allowing scan boundaries to be\n   determined without parsing the bit stream.\n\
    \   Compressed data is represented in one of three formats: the\n   interchange\
    \ format, the abbreviated format, or the table-\n   specification format.  The\
    \ interchange format contains definitions\n   for all the table used in the by\
    \ the entropy-coded segments, while\n   the abbreviated format might omit some\
    \ assuming they were defined\n   out-of-band or by a \"previous\" image.\n   The\
    \ JPEG standard does not define the meaning or format of the\n   components that\
    \ comprise the image.  Attributes like the color space\n   and pixel aspect ratio\
    \ must be specified out-of-band with respect to\n   the JPEG bit stream.  The\
    \ JPEG File Interchange Format (JFIF) [4] is\n   a defacto standard that provides\
    \ this extra information using an\n   application marker segment (APP0).  Note\
    \ that a JFIF file is simply a\n   JPEG interchange format image along with the\
    \ APP0 segment.  In the\n   case of video, additional parameters must be defined\
    \ out-of-band\n   (e.g., frame rate, interlaced vs. non-interlaced, etc.).\n \
    \  While the JPEG standard provides a rich set of algorithms for\n   flexible\
    \ compression, cost-effective hardware implementations of the\n   full standard\
    \ have not appeared.  Instead, most hardware JPEG video\n   codecs implement only\
    \ a subset of the sequential DCT mode of\n   operation.  Typically, marker segments\
    \ are interpreted in software\n   (which \"re-programs\" the hardware) and the\
    \ hardware is presented with\n   a single, interleaved entropy-coded scan represented\
    \ in the YUV color\n   space.\n"
- title: 2.  JPEG Over RTP
  contents:
  - "2.  JPEG Over RTP\n   To maximize interoperability among hardware-based codecs,\
    \ we assume\n   the sequential DCT operating mode [1,Annex F] and restrict the\
    \ set of\n   predefined RTP/JPEG \"type codes\" (defined below) to single-scan,\n\
    \   interleaved images.  While this is more restrictive than even\n   baseline\
    \ JPEG, many hardware implementation fall short of the\n   baseline specification\
    \ (e.g., most hardware cannot decode non-\n   interleaved scans).\n   In practice,\
    \ most of the table-specification data rarely changes from\n   frame to frame\
    \ within a single video stream.  Therefore, RTP/JPEG\n   data is represented in\
    \ abbreviated format, with all of the tables\n   omitted from the bit stream.\
    \  Each image begins immediately with the\n   (single) entropy-coded scan.  The\
    \ information that would otherwise be\n   in both the frame and scan headers is\
    \ represented entirely within a\n   64-bit RTP/JPEG header (defined below) that\
    \ lies between the RTP\n   header and the JPEG scan and is present in every packet.\n\
    \   While parameters like Huffman tables and color space are likely to\n   remain\
    \ fixed for the lifetime of the video stream, other parameters\n   should be allowed\
    \ to vary, notably the quantization tables and image\n   size (e.g., to implement\
    \ rate-adaptive transmission or allow a user\n   to adjust the \"quality level\"\
    \ or resolution manually).  Thus explicit\n   fields in the RTP/JPEG header are\
    \ allocated to represent this\n   information.  Since only a small set of quantization\
    \ tables are\n   typically used, we encode the entire set of quantization tables\
    \ in a\n   small integer field.  The image width and height are encoded\n   explicitly.\n\
    \   Because JPEG frames are typically larger than the underlying\n   network's\
    \ maximum packet size, frames must often be fragmented into\n   several packets.\
    \  One approach is to allow the network layer below\n   RTP (e.g., IP) to perform\
    \ the fragmentation.  However, this precludes\n   rate-controlling the resulting\
    \ packet stream or partial delivery in\n   the presence of loss.  For example,\
    \ IP will not deliver a fragmented\n   datagram to the application if one or more\
    \ fragments is lost, or IP\n   might fragment an 8000 byte frame into a burst\
    \ of 8 back-to-back\n   packets.  Instead, RTP/JPEG defines a simple fragmentation\
    \ and\n   reassembly scheme at the RTP level.\n"
- title: 3.  RTP/JPEG Packet Format
  contents:
  - "3.  RTP/JPEG Packet Format\n   The RTP timestamp is in units of 90000Hz.  The\
    \ same timestamp must\n   appear across all fragments of a single frame.  The\
    \ RTP marker bit is\n   set in the last packet of a frame.\n"
- title: 3.1.  JPEG header
  contents:
  - "3.1.  JPEG header\n   A special header is added to each packet that immediately\
    \ follows the\n   RTP header:\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Type specific |              Fragment Offset                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Type     |       Q       |     Width     |     Height    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: '3.1.1.  Type specific: 8 bits'
  contents:
  - "3.1.1.  Type specific: 8 bits\n   Interpretation depends on the value of the\
    \ type field.\n"
- title: '3.1.2.  Fragment Offset: 24 bits'
  contents:
  - "3.1.2.  Fragment Offset: 24 bits\n   The Fragment Offset is the data offset in\
    \ bytes of the current packet\n   in the JPEG scan.\n"
- title: '3.1.3.  Type: 8 bits'
  contents:
  - "3.1.3.  Type: 8 bits\n   The type field specifies the information that would\
    \ otherwise be\n   present in a JPEG abbreviated table-specification as well as\
    \ the\n   additional JFIF-style parameters not defined by JPEG.  Types 0-127\n\
    \   are reserved as fixed, well-known mappings to be defined by this\n   document\
    \ and future revisions of this document.  Types 128-255 are\n   free to be dynamically\
    \ defined by a session setup protocol (which is\n   beyond the scope of this document).\n"
- title: '3.1.4.  Q: 8 bits'
  contents:
  - "3.1.4.  Q: 8 bits\n   The Q field defines the quantization tables for this frame\
    \ using an\n   algorithm that determined by the Type field (see below).\n"
- title: '3.1.5.  Width: 8 bits'
  contents:
  - "3.1.5.  Width: 8 bits\n   This field encodes the width of the image in 8-pixel\
    \ multiples (e.g.,\n   a width of 40 denotes an image 320 pixels wide).\n"
- title: '3.1.6.  Height: 8 bits'
  contents:
  - "3.1.6.  Height: 8 bits\n   This field encodes the height of the image in 8-pixel\
    \ multiples\n   (e.g., a height of 30 denotes an image 240 pixels tall).\n"
- title: 3.1.7.  Data
  contents:
  - "3.1.7.  Data\n   The data following the RTP/JPEG header is an entropy-coded segment\n\
    \   consisting of a single scan.  The scan header is not present and is\n   inferred\
    \ from the RTP/JPEG header.  The scan is terminated either\n   implicitly (i.e.,\
    \ the point at which the image is fully parsed), or\n   explicitly with an EOI\
    \ marker.  The scan may be padded to arbitrary\n   length with undefined bytes.\
    \  (Existing hardware codecs generate\n   extra lines at the bottom of a video\
    \ frame and removal of these lines\n   would require a Huffman-decoding pass over\
    \ the data.)\n   As defined by JPEG, restart markers are the only type of marker\
    \ that\n   may appear embedded in the entropy-coded segment.  The \"type code\"\
    \n   determines whether a restart interval is defined, and therefore\n   whether\
    \ restart markers may be present. It also determines if the\n   restart intervals\
    \ will be aligned with RTP packets, allowing for\n   partial decode of frames,\
    \ thus increasing resiliance to packet drop.\n   If restart markers are present,\
    \ the 6-byte DRI segment (define\n   restart interval marker [1, Sec. B.2.4.4]\
    \ precedes the scan).\n   JPEG markers appear explicitly on byte aligned boundaries\
    \ beginning\n   with an 0xFF.  A \"stuffed\" 0x00 byte follows any 0xFF byte generated\n\
    \   by the entropy coder [1, Sec. B.1.1.5].\n"
- title: 4.  Discussion
  contents:
  - '4.  Discussion

    '
- title: 4.1.  The Type Field
  contents:
  - "4.1.  The Type Field\n   The Type field defines the abbreviated table-specification\
    \ and\n   additional JFIF-style parameters not defined by JPEG, since they are\n\
    \   not present in the body of the transmitted JPEG data.  The Type field\n  \
    \ must remain constant for the duration of a session.\n   Six type codes are currently\
    \ defined.  They correspond to an\n   abbreviated table-specification indicating\
    \ the \"Baseline DCT\n   sequential\" mode, 8-bit samples, square pixels, three\
    \ components in\n   the YUV color space, standard Huffman tables as defined in\
    \ [1, Annex\n   K.3], and a single interleaved scan with a scan component selector\n\
    \   indicating components 0, 1, and 2 in that order.  The Y, U, and V\n   color\
    \ planes correspond to component numbers 0, 1, and 2,\n   respectively.  Component\
    \ 0 (i.e., the luminance plane) uses Huffman\n   table number 0 and quantization\
    \ table number 0 (defined below) and\n   components 1 and 2 (i.e., the chrominance\
    \ planes) use Huffman table\n   number 1 and quantization table number 1 (defined\
    \ below).\n   Additionally, video is non-interlaced and unscaled (i.e., the aspect\n\
    \   ratio is determined by the image width and height).  The frame rate\n   is\
    \ variable and explicit via the RTP timestamp.\n   Six RTP/JPEG types are currently\
    \ defined that assume all of the\n   above.  The odd types have different JPEG\
    \ sampling factors from the\n   even ones:\n                        horizontal\
    \   vertical\n           types   comp  samp. fact. samp. fact.\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |  0/2/4  |  0  |     2     |   1   |\n          |  0/2/4  |  1  |\
    \     1     |   1   |\n          |  0/2/4  |  2  |     1     |   1   |\n     \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          |  1/3/5  |  0  |     2\
    \     |   2   |\n          |  1/3/5  |  1  |     1     |   1   |\n          |\
    \  1/3/5  |  2  |     1     |   1   |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   These sampling factors indicate that the chromanince components of\n   type\
    \ 0/2/4 video is downsampled horizontally by 2 (often called\n   4:2:2) while\
    \ the chrominance components of type 1/3/5 video are\n   downsampled both horizontally\
    \ and vertically by 2 (often called\n   4:2:0).\n   The three pairs of types (0/1),\
    \ (2/3) and (4/5) differ from each\n   other as follows:\n   0/1 : No restart\
    \ markers are present in the entropy data.\n         No restriction is placed\
    \ on the fragmentation of the stream\n         into RTP packets.\n         The\
    \ type specific field is unused and must be zero.\n   2/3 : Restart markers are\
    \ present in the entropy data.\n         The entropy data is preceded by a DRI\
    \ marker segment, defining\n         the restart interval.\n         No restriction\
    \ is placed on the fragmentation of the stream\n         into RTP packets.\n \
    \        The type specific field is unused and must be zero.\n   4/5 : Restart\
    \ markers are present in the entropy data.\n         The entropy data is preceded\
    \ by a DRI marker segment, defining\n         the restart interval.\n        \
    \ Restart intervals are be sent as separate (possibly multiple)\n         RTP\
    \ packets.\n         The type specific field (TSPEC) is used as follows:\n   \
    \          A restart interval count (RCOUNT) is defined, which\n             starts\
    \ at zero, and is incremented for each restart\n             interval in the frame.\n\
    \             The first packet of a restart interval gets TSPEC = RCOUNT.\n  \
    \           Subsequent packets of the restart interval get TSPEC = 254,\n    \
    \         except the final packet, which gets TSPEC = 255.\n   Additional types\
    \ in the range 128-255 may be defined by external\n   means, such as a session\
    \ protocol.\n   Appendix B contains C source code for transforming the RTP/JPEG\n\
    \   header parameters into the JPEG frame and scan headers that are\n   absent\
    \ from the data payload.\n"
- title: 4.2.  The Q Field
  contents:
  - "4.2.  The Q Field\n   The quantization tables used in the decoding process are\n\
    \   algorithmically derived from the Q field.  The algorithm used depends\n  \
    \ on the type field but only one algorithm is currently defined for the\n   two\
    \ types.\n   Both type 0 and type 1 JPEG assume two quantizations tables.  These\n\
    \   tables are chosen as follows.  For 1 <= Q <= 99, the Independent JPEG\n  \
    \ Group's formula [5] is used to produce a scale factor S as:\n        S = 5000\
    \ / Q          for  1 <= Q <= 50\n          = 200 - 2 * Q       for 51 <= Q <=\
    \ 99\n   This value is then used to scale Tables K.1 and K.2 from [1]\n   (saturating\
    \ each value to 8-bits) to give quantization table numbers\n   0 and 1, respectively.\
    \  C source code is provided in Appendix A to\n   compute these tables.\n   For\
    \ Q >= 100, a dynamically defined quantization table is used, which\n   might\
    \ be specified by a session setup protocol.  (This session\n   protocol is beyond\
    \ the scope of this document).  It is expected that\n   the standard quantization\
    \ tables will handle most cases in practice,\n   and dynamic tables will be used\
    \ rarely.  Q = 0 is reserved.\n"
- title: 4.3.  Fragmentation and Reassembly
  contents:
  - "4.3.  Fragmentation and Reassembly\n   Since JPEG frames are large, they must\
    \ often be fragmented.  Frames\n   should be fragmented into packets in a manner\
    \ avoiding fragmentation\n   at a lower level.  When using restart markers, frames\
    \ should be\n   fragmented such that each packet starts with a restart interval\
    \ (see\n   below).\n   Each packet that makes up a single frame has the same timestamp.\
    \  The\n   fragment offset field is set to the byte offset of this packet within\n\
    \   the original frame.  The RTP marker bit is set on the last packet in\n   a\
    \ frame.\n   An entire frame can be identified as a sequence of packets beginning\n\
    \   with a packet having a zero fragment offset and ending with a packet\n   having\
    \ the RTP marker bit set.  Missing packets can be detected\n   either with RTP\
    \ sequence numbers or with the fragment offset and\n   lengths of each packet.\
    \  Reassembly could be carried out without the\n   offset field (i.e., using only\
    \ the RTP marker bit and sequence\n   numbers), but an efficient single-copy implementation\
    \ would not\n   otherwise be possible in the presence of misordered packets.\n\
    \   Moreover, if the last packet of the previous frame (containing the\n   marker\
    \ bit) were dropped, then a receiver could not detect that the\n   current frame\
    \ is entirely intact.\n"
- title: 4.4.  Restart Markers
  contents:
  - "4.4.  Restart Markers\n   Restart markers indicate a point in the JPEG stream\
    \ at which the\n   Huffman codec and DC predictors  are reset, allowing partial\
    \ decoding\n   starting at that point.  The use of restart markers allows for\n\
    \   robustness in the face of packet loss.\n   RTP/JPEG Types 4/5 allow for partial\
    \ decode of frames, due to the\n   alignment of restart intervals with RTP packets.\
    \ The decoder knows it\n   has a whole restart interval when it gets sequence\
    \ of packets with\n   contiguous RTP sequence numbers, starting with TSPEC<254\
    \ (RCOUNT) and\n   either ending with TSPEC==255, or TSPEC<255 and next packet's\n\
    \   TSPEC<254 (or end of frame).\n   It can then decompress the RST interval,\
    \ and paint it. The X and Y\n   tile offsets of the first MCU in the interval\
    \ are given by:\n   tile_offset = RCOUNT * restart_interval * 2\n   x_offset \
    \   = tile_offset % frame_width_in_tiles\n   y_offset    = tile_offset / frame_width_in_tiles\n\
    \   The MCUs in a restart interval may span multiple tile rows.\n   Decoders can,\
    \ however, treat types 4/5 as types 2/3, simply\n   reassembling the entire frame\
    \ and then decoding.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6.  Authors' Addresses
  contents:
  - "6.  Authors' Addresses\n   Lance M. Berc\n   Systems Research Center\n   Digital\
    \ Equipment Corporation\n   130 Lytton Ave\n   Palo Alto CA 94301\n   Phone: +1\
    \ 415 853 2100\n   EMail: berc@pa.dec.com\n   William C. Fenner\n   Xerox PARC\n\
    \   3333 Coyote Hill Road\n   Palo Alto, CA 94304\n   Phone: +1 415 812 4816\n\
    \   EMail: fenner@cmf.nrl.navy.mil\n   Ron Frederick\n   Xerox PARC\n   3333 Coyote\
    \ Hill Road\n   Palo Alto, CA 94304\n   Phone: +1 415 812 4459\n   EMail: frederick@parc.xerox.com\n\
    \   Steven McCanne\n   Lawrence Berkeley Laboratory\n   M/S 46A-1123\n   One Cyclotron\
    \ Road\n   Berkeley, CA 94720\n   Phone: +1 510 486 7520\n   EMail: mccanne@ee.lbl.gov\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: '[1]  ISO DIS 10918-1. Digital Compression and Coding of Continuous-tone'
  contents:
  - "[1]  ISO DIS 10918-1. Digital Compression and Coding of Continuous-tone\n   \
    \  Still Images (JPEG), CCITT Recommendation T.81.\n"
- title: '[2]  William B. Pennebaker, Joan L. Mitchell, JPEG: Still Image Data'
  contents:
  - "[2]  William B. Pennebaker, Joan L. Mitchell, JPEG: Still Image Data\n     Compression\
    \ Standard, Van Nostrand Reinhold, 1993.\n"
- title: '[3]  Gregory K. Wallace, The JPEG Sill Picture Compression Standard,'
  contents:
  - "[3]  Gregory K. Wallace, The JPEG Sill Picture Compression Standard,\n     Communications\
    \ of the ACM, April 1991, Vol 34, No. 1, pp. 31-44.\n"
- title: '[4]  The JPEG File Interchange Format.  Maintained by C-Cube Microsys-'
  contents:
  - "[4]  The JPEG File Interchange Format.  Maintained by C-Cube Microsys-\n    \
    \ tems, Inc., and available in\n     ftp://ftp.uu.net/graphics/jpeg/jfif.ps.gz.\n"
- title: '[5]  Tom Lane et. al., The Independent JPEG Group software JPEG codec.'
  contents:
  - "[5]  Tom Lane et. al., The Independent JPEG Group software JPEG codec.\n    \
    \ Source code available in\n     ftp://ftp.uu.net/graphics/jpeg/jpegsrc.v5.tar.gz.\n"
- title: Appendix A
  contents:
  - "Appendix A\n   The following code can be used to create a quantization table\
    \ from a\n   Q factor:\n"
- title: /*
  contents:
  - "/*\n * Table K.1 from JPEG spec.\n */\n"
- title: static const int jpeg_luma_quantizer[64] = {
  contents:
  - "static const int jpeg_luma_quantizer[64] = {\n        16, 11, 10, 16, 24, 40,\
    \ 51, 61,\n        12, 12, 14, 19, 26, 58, 60, 55,\n        14, 13, 16, 24, 40,\
    \ 57, 69, 56,\n        14, 17, 22, 29, 51, 87, 80, 62,\n        18, 22, 37, 56,\
    \ 68, 109, 103, 77,\n        24, 35, 55, 64, 81, 104, 113, 92,\n        49, 64,\
    \ 78, 87, 103, 121, 120, 101,\n        72, 92, 95, 98, 112, 100, 103, 99\n"
- title: '};'
  contents:
  - '};

    '
- title: /*
  contents:
  - "/*\n * Table K.2 from JPEG spec.\n */\n"
- title: static const int jpeg_chroma_quantizer[64] = {
  contents:
  - "static const int jpeg_chroma_quantizer[64] = {\n        17, 18, 24, 47, 99, 99,\
    \ 99, 99,\n        18, 21, 26, 66, 99, 99, 99, 99,\n        24, 26, 56, 99, 99,\
    \ 99, 99, 99,\n        47, 66, 99, 99, 99, 99, 99, 99,\n        99, 99, 99, 99,\
    \ 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99,\n        99, 99, 99,\
    \ 99, 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99\n"
- title: '};'
  contents:
  - '};

    '
- title: /*
  contents:
  - "/*\n * Call MakeTables with the Q factor and two int[64] return arrays\n */\n"
- title: void
  contents:
  - 'void

    '
- title: MakeTables(int q, u_char *lum_q, u_char *chr_q)
  contents:
  - 'MakeTables(int q, u_char *lum_q, u_char *chr_q)

    '
- title: '{'
  contents:
  - "{\n  int i;\n  int factor = q;\n  if (q < 1) factor = 1;\n  if (q > 99) factor\
    \ = 99;\n  if (q < 50)\n    q = 5000 / factor;\n  else\n    q = 200 - factor*2;\n\
    \  for (i=0; i < 64; i++) {\n    int lq = ( jpeg_luma_quantizer[i] * q + 50) /\
    \ 100;\n    int cq = ( jpeg_chroma_quantizer[i] * q + 50) / 100;\n    /* Limit\
    \ the quantizers to 1 <= q <= 255 */\n    if ( lq < 1) lq = 1;\n    else if (\
    \ lq > 255) lq = 255;\n    lum_q[i] = lq;\n    if ( cq < 1) cq = 1;\n    else\
    \ if ( cq > 255) cq = 255;\n    chr_q[i] = cq;\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: Appendix B
  contents:
  - "Appendix B\n   The following routines can be used to create the JPEG marker segments\n\
    \   corresponding to the table-specification data that is absent from the\n  \
    \ RTP/JPEG body.\n"
- title: u_char lum_dc_codelens[] = {
  contents:
  - "u_char lum_dc_codelens[] = {\n        0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,\
    \ 0, 0, 0,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char lum_dc_symbols[] = {
  contents:
  - "u_char lum_dc_symbols[] = {\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char lum_ac_codelens[] = {
  contents:
  - "u_char lum_ac_codelens[] = {\n        0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0,\
    \ 0, 1, 0x7d,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char lum_ac_symbols[] = {
  contents:
  - "u_char lum_ac_symbols[] = {\n        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05,\
    \ 0x12,\n        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,\n        0x22,\
    \ 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,\n        0x23, 0x42, 0xb1, 0xc1, 0x15,\
    \ 0x52, 0xd1, 0xf0,\n        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,\n\
    \        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,\n        0x29, 0x2a,\
    \ 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,\n        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,\
    \ 0x48, 0x49,\n        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,\n     \
    \   0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,\n        0x6a, 0x73, 0x74,\
    \ 0x75, 0x76, 0x77, 0x78, 0x79,\n        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,\
    \ 0x89,\n        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,\n        0x99,\
    \ 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n        0xa8, 0xa9, 0xaa, 0xb2, 0xb3,\
    \ 0xb4, 0xb5, 0xb6,\n        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,\n\
    \        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,\n        0xd5, 0xd6,\
    \ 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,\n        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8,\
    \ 0xe9, 0xea,\n        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,\n     \
    \   0xf9, 0xfa,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char chm_dc_codelens[] = {
  contents:
  - "u_char chm_dc_codelens[] = {\n        0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\
    \ 0, 0, 0,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char chm_dc_symbols[] = {
  contents:
  - "u_char chm_dc_symbols[] = {\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char chm_ac_codelens[] = {
  contents:
  - "u_char chm_ac_codelens[] = {\n        0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0,\
    \ 1, 2, 0x77,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char chm_ac_symbols[] = {
  contents:
  - "u_char chm_ac_symbols[] = {\n        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05,\
    \ 0x21,\n        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,\n        0x13,\
    \ 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,\n        0xa1, 0xb1, 0xc1, 0x09, 0x23,\
    \ 0x33, 0x52, 0xf0,\n        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,\n\
    \        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,\n        0x27, 0x28,\
    \ 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,\n        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,\
    \ 0x47, 0x48,\n        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n     \
    \   0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,\n        0x69, 0x6a, 0x73,\
    \ 0x74, 0x75, 0x76, 0x77, 0x78,\n        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86,\
    \ 0x87,\n        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,\n        0x97,\
    \ 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,\n        0xa6, 0xa7, 0xa8, 0xa9, 0xaa,\
    \ 0xb2, 0xb3, 0xb4,\n        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,\n\
    \        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,\n        0xd3, 0xd4,\
    \ 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,\n        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\
    \ 0xe8, 0xe9,\n        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,\n     \
    \   0xf9, 0xfa,\n"
- title: '};'
  contents:
  - '};

    '
- title: u_char *
  contents:
  - 'u_char *

    '
- title: MakeQuantHeader(u_char *p, u_char *qt, int tableNo)
  contents:
  - 'MakeQuantHeader(u_char *p, u_char *qt, int tableNo)

    '
- title: '{'
  contents:
  - "{\n        *p++ = 0xff;\n        *p++ = 0xdb;            /* DQT */\n        *p++\
    \ = 0;               /* length msb */\n        *p++ = 67;              /* length\
    \ lsb */\n        *p++ = tableNo;\n        memcpy(p, qt, 64);\n        return\
    \ (p + 64);\n"
- title: '}'
  contents:
  - '}

    '
- title: u_char *
  contents:
  - 'u_char *

    '
- title: MakeHuffmanHeader(u_char *p, u_char *codelens, int ncodes, u_char *symbols,
  contents:
  - "MakeHuffmanHeader(u_char *p, u_char *codelens, int ncodes, u_char *symbols,\n\
    \                  int nsymbols, int tableNo, int tableClass)\n"
- title: '{'
  contents:
  - "{\n        *p++ = 0xff;\n        *p++ = 0xc4;            /* DHT */\n        *p++\
    \ = 0;               /* length msb */\n        *p++ = 3 + ncodes + nsymbols; /*\
    \ length lsb */\n        *p++ = tableClass << 4 | tableNo;\n        memcpy(p,\
    \ codelens, ncodes);\n        p += ncodes;\n        memcpy(p, symbols, nsymbols);\n\
    \        p += nsymbols;\n        return (p);\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n * Given an RTP/JPEG type code, q factor, width, and height,\n * generate\
    \ a frame and scan headers that can be prepended\n * to the RTP/JPEG data payload\
    \ to produce a JPEG compressed\n * image in interchange format (except for possible\
    \ trailing\n * garbage and absence of an EOI marker to terminate the scan).\n\
    \ */\n"
- title: int MakeHeaders(u_char *p, int type, int q, int w, int h)
  contents:
  - 'int MakeHeaders(u_char *p, int type, int q, int w, int h)

    '
- title: '{'
  contents:
  - "{\n        u_char *start = p;\n        u_char lqt[64];\n        u_char cqt[64];\n\
    \        /* convert from blocks to pixels */\n        w <<= 3;\n        h <<=\
    \ 3;\n        MakeTables(q, lqt, cqt);\n        *p++ = 0xff;\n        *p++ = 0xd8;\
    \            /* SOI */\n        p = MakeQuantHeader(p, lqt, 0);\n        p = MakeQuantHeader(p,\
    \ cqt, 1);\n        p = MakeHuffmanHeader(p, lum_dc_codelens,\n              \
    \                sizeof(lum_dc_codelens),\n                              lum_dc_symbols,\n\
    \                              sizeof(lum_dc_symbols), 0, 0);\n        p = MakeHuffmanHeader(p,\
    \ lum_ac_codelens,\n                              sizeof(lum_ac_codelens),\n \
    \                             lum_ac_symbols,\n                              sizeof(lum_ac_symbols),\
    \ 0, 1);\n        p = MakeHuffmanHeader(p, chm_dc_codelens,\n                \
    \              sizeof(chm_dc_codelens),\n                              chm_dc_symbols,\n\
    \                              sizeof(chm_dc_symbols), 1, 0);\n        p = MakeHuffmanHeader(p,\
    \ chm_ac_codelens,\n                              sizeof(chm_ac_codelens),\n \
    \                             chm_ac_symbols,\n                              sizeof(chm_ac_symbols),\
    \ 1, 1);\n        *p++ = 0xff;\n        *p++ = 0xc0;            /* SOF */\n  \
    \      *p++ = 0;               /* length msb */\n        *p++ = 17;          \
    \    /* length lsb */\n        *p++ = 8;               /* 8-bit precision */\n\
    \        *p++ = h >> 8;          /* height msb */\n        *p++ = h;         \
    \      /* height lsb */\n        *p++ = w >> 8;          /* width msb */\n   \
    \     *p++ = w;               /* wudth lsb */\n        *p++ = 3;             \
    \  /* number of components */\n        *p++ = 0;               /* comp 0 */\n\
    \        if (type == 0)\n                *p++ = 0x21;    /* hsamp = 2, vsamp =\
    \ 1 */\n        else\n                *p++ = 0x22;    /* hsamp = 2, vsamp = 2\
    \ */\n        *p++ = 0;               /* quant table 0 */\n        *p++ = 1; \
    \              /* comp 1 */\n        *p++ = 0x11;            /* hsamp = 1, vsamp\
    \ = 1 */\n        *p++ = 1;               /* quant table 1 */\n        *p++ =\
    \ 2;               /* comp 2 */\n        *p++ = 0x11;            /* hsamp = 1,\
    \ vsamp = 1 */\n        *p++ = 1;               /* quant table 1 */\n        *p++\
    \ = 0xff;\n        *p++ = 0xda;            /* SOS */\n        *p++ = 0;      \
    \         /* length msb */\n        *p++ = 12;              /* length lsb */\n\
    \        *p++ = 3;               /* 3 components */\n        *p++ = 0;       \
    \        /* comp 0 */\n        *p++ = 0;               /* huffman table 0 */\n\
    \        *p++ = 1;               /* comp 1 */\n        *p++ = 0x11;          \
    \  /* huffman table 1 */\n        *p++ = 2;               /* comp 2 */\n     \
    \   *p++ = 0x11;            /* huffman table 1 */\n        *p++ = 0;         \
    \      /* first DCT coeff */\n        *p++ = 63;              /* last DCT coeff\
    \ */\n        *p++ = 0;               /* sucessive approx. */\n        return\
    \ (p - start);\n"
- title: '};'
  contents:
  - '};

    '
