Abstract This memo describes a file transfer protocol to facilitate electronic data interchange between trading partners.
The protocol, denoted the ODETTE File Transfer Protocol, supports both direct communication between installations and indirect communication via a third party clearing centre.
It was developed by the Organisation for Data Exchange by Tele Transmission in Europe to facilitate communication within the European motor industry and is presented here to allow for wider use within the Internet community.
The ODETTE File Transfer Protocol (ODETTE FTP) was defined in 1986 by working group four of the Organisation for Data Exchange by Tele Transmission in Europe (ODETTE) to address the electronic data interchange (EDI) requirements of the European automotive industry.
It was designed in the spirit of the Open System Interconnection (OSI) model utilising the Network Service provided by the CCITT X25 recommendation.
Over the last ten years ODETTE FTP has been widely deployed on systems of all sizes from personal computers to large mainframes.
As a result of the wide scale deployment of internet technology and the trend towards global business practices, ODETTE has decided to extend the scope of it's file transfer protocol to allow the use of TCP/IP and to make the protocol available to the Internet community.
This memo describes the ODETTE FTP protocol using the Transmission Control Protocol for it's network service.
1.2  Relationship to the original ODETTE Standard
This memo is an interpretation of version 1.3 of the ODETTE File Transfer Protocol [OFTP].
In the event of any ambiguity between this document and the original ODETTE FTP, the original shall take precedence.
For ODETTE FTP on TCP/IP
the following sections have been added with respect to the original document.
Section 2  Network Service Section 7  Stream Transmission Buffer Appendix
A Virtual File mapping example 1.3
The aim of the ODETTE FTP is to facilitate the transmission of a file between one or more locations in a way that is independent of the data communication network, system hardware and software environment.
In designing and specifying the protocol, the following factors were considered.
The possible differences of size and sophistication (file storage, small and large systems).
The necessity to work with existing systems (reduce changes to existing products and allow easy implementation).
The potential for growth in sophistication (limit impact and avoid changes at other locations).
Structure ODETTE FTP is modelled on the OSI reference model.
It is designed to use the Network Service provided by level 3 of the model and provide a File Service to the users.
Thus the protocol spans levels 4 to 7 of model.
The description of the ODETTE FTP contained in this memo is closely related to the original 'X.25' specification of the protocol and in the spirit of the OSI model
A File Service provided to a user monitor.
A protocol for the exchange of information between peer ODETTE FTP entities.
A major consideration in adapting the protocol to use the Transmission Control Protocol (TCP) was the desire to make no changes to the existing protocol by adding the functionality required to allow implementors to support internet communication with only minor changes to existing ODETTE FTP engines.
To this end an additional header has been added to the start of each exchange buffer to allow the TCP byte stream to be broken up into the discrete exchange buffers expected by the ODETTE FTP protocol.
1.5  Virtual Files Information is always exchanged between ODETTE FTP entities in a standard representation called a Virtual File.
This allows data transfer without regard for the nature of the communicating systems.
The mapping of a file between a local and virtual representation will vary from system to system and is not defined here.
A Virtual File is described by a set of attributes identifying and defining the data to be transferred.
The main attributes are: 1.5.1  Organisation:
Sequential Logical records are presented one after another.
The ODETTE FTP must be aware of the record boundaries.
1.5.2  Identification Dataset Name Dataset name of the Virtual File being transfered, assigned by bilateral agreement.
A file qualifier indicating the time the Virtual File was made available for transmission.
A file qualifier indicating the date the Virtual File was made available for transmission.
The Dataset Name, Date and Time attributes are assigned by a Virtual File's Originator and are used to uniquely identify the file.
They must not be changed by intermediate locations.
The Date attribute represents the decade and year in a two digit field.
Since the ODETTE FTP only uses this information to identify a particular Virtual File it will continue to operate correctly in the year 2000 and beyond.
The User Monitor may use the Virtual File Date attribute in local processes involving date comparisons and calculations.
Any such use falls outside the scope of this protocol and year 2000 handling is a local implementation issue.
Record Format Four record formats are defined.
Each record in the file has the same length.
The records in the file can have different lengths.
The file contains a stream of data.
A Text File is defined as a sequence of ASCII characters, containing no control characters except CR/LF which delimits lines.
A line will not have more than 2048 characters.
1.5.4  Restart ODETTE FTP can negotiate the restart of an interrupted Virtual File transmission.
Fixed and Variable format files are restarted on record boundaries.
For Unstructured and Text files the restart position is expressed as a file offset in 1K (1024 octet) blocks.
The restart position is always calculated relative to the Virtual File.
1.6  Service Description ODETTE FTP provides a file transfer service to a user monitor and in turn uses the Internet transport layer stream service to communicate between peers.
These services are specified in this memo using service primitives grouped into four classes as follows: Request (RQ)
An entity asks the service to do some work.
A service informs an entity of an event.
An entity responds to an event.
A service informs an entity of the response.
Services may be confirmed, using the request, indication, response and confirm primitives, or unconfirmed using just the request and indication primitives.
Network Service (TCP Transport Service)
2.1  Introduction ODETTE FTP peer entities communicate with each other via the OSI Network Service or the Transmission Control Protocol Transport Service [TCP].
This is described by service primitives representing request, indication, response and confirmation actions.
For the internet environment, the service primitives mentioned below for the Network Service
have to be mapped to the respective Transport Service primitives.
This section describes the network service primitives used by ODETTE FTP and their relationship to the TCP interface.
In practice the local transport service application programming interface will be used to access the TCP service.
All Network primitives can be directly mapped to the respective Transport primitives when using TCP.
This describes the setup of a connection.
The requesting ODETTE FTP peer uses the N CON RQ primitive to request an active OPEN of a connection to a peer ODETTE FTP, the Responder, which has previously requested a passive OPEN.
The Responder is notified of the incoming connection via N CON IND and accepts it with N CON RS.
The requester is notified of the completion of it's OPEN request upon receipt of  CON CF.
N DATA IND Data exchange is an unconfirmed service.
The Requester passes data for transmission to the network service via the N DATA RQ primitive.
The Responder is notified of the availability of data via N DATA IND.
In practice the notification and receipt of data may be combined, such as by the return from a blocking read from the network socket.
Network Disconnection N DISC RQ
An ODETTE FTP requests the termination of a connection with the N DISC RQ service primitive.
It's peer is notified of the CLOSE by a N DISC IND event.
It is recognised that each peer must issue a N DISC RQ primitive to complete the TCP symmetric close procedure.
An ODETTE FTP entity is notified of a network error by a N RST IND event.
It should be noted that N RST IND would also be generated by a peer RESETTING the connection, but this is ignored here as N RST RQ is never sent to the Network Service by ODETTE FTP.
Port Assignment A ODETTE FTP requester will select a suitable local port.
The responding ODETTE FTP will listen for connections on Registered Port 3305, the service name is 'odette ftp'.
The File Transfer Service describes the services offered by an ODETTE FTP Entity to
The implementation of the service primitives is a local matter.
N E T W O R K
Mode Specifies the file transfer capabilities of the entity sending or receiving a F CONNECT primitive for the duration of the session.
Sender Only    The entity can only send files.
The entity can only receive files.
only   Sender only Receiver only   Sender only   Sender only   Receiver
Receiver only   Receiver only   Sender
only or  > Sender only   Sender only   Receiver
only   Restart Specifies the file transfer restart capabilities of the User Monitor.
Retry later has values "Y" or "N".
Cause is the reason for refusing the transfer (1,..,13,99).
Restart pos1 not equal 0 is only valid if restart has been agreed during initial negotiation.
Restart pos2 is less than or equal to restart pos1.
The data format within a F DATA primitive is locally defined.
The File Transfer service may have to provide a flow control mechanism to regulate the flow of F DATA primitives.
In a positive Close File response (F CLOSE FILE RS( ))
the current Speaker may either: 1.
Set Speaker to "Yes" and become the Speaker.
No"  and remain the Listener.
The File Transfer service will ensure that the setting of the speaker parameter is consistent with the capabilities of the peer user.
The turn is never exchanged in the case of a negative response or confirmation.
Only the Speaker is allowed to issue F XXX FILE RQ primitives.
Exchanging the Turn 3.3.4.1  Initial Turn (First Speaker)
The Initiator becomes the first Speaker at the end of the Session Setup (F CONNECT CF received by Initiator and F CONNECT RS sent by Responder).
At each unsuccessful End of File the turn is not exchanged.
At each successful End of File the turn is exchanged if requested by the Listener: The current Listener receives F CLOSE FILE IND (Speaker   choice).
If the Listener answers F CLOSE FILE RS(Speaker   YES), it becomes Speaker, the Speaker receives F CLOSE FILE CF (Speaker   NO) and becomes Listener.
If the Listener answers F CLOSE FILE RS(Speaker
, it remains Listener, and the Speaker receives F CLOSE FILE CF (Speaker   YES) and remains Speaker.
The Speaker can issue a Change Direction request (F CD RQ) to become the Listener.
The Listener receives a Change Direction indication (F CD IND) and becomes the Speaker.
In order to prevent loops of F CD RQ/IND, it is an error to send F CD RQ immediately after having received a F CD IND.
This service is initiated by the current Speaker (if there is no file transfer in progress) to send an End to End response from the final destination to the originator of a file.
Only the Speaker may send an End to End Response request.
Invoking the EERP service does not change the turn.
If a F CD IND has been received just before F EERP RQ is issued, this results in leaving the special condition created by the reception of F CD IND; i.e. while it was possible to issue F RELEASE RQ and not possible to issue F CD RQ just after the reception of F CD IND, after having issued F EERP RQ the normal Speaker status is entered again (F CD RQ valid, but F RELEASE RQ not valid).
3.4  Session Take Down 3.4.1
The Release service can only be initiated by the Speaker.
The Speaker can only issue a Release request (F RELEASE RQ) just after receiving an unsolicited Change Direction indication (F CD IND).
This ensures that the other partner doesn't want to send any more files in this session.
Peer ODETTE FTP entities action a normal session release by specifying Reason   Normal in an End Session (ESID) command.
Abnormal session release can occur at any time within the session.
Peer ODETTE FTP entities action an abnormal session release by specifying Reason   Error value in an End Session (ESID) command.
The abnormal session release deals with the following types of error: 1.
The service provider will initiate an abnormal release in the following cases: 1.
Failure of the Start Session (SSID) negotiation, 3.
Exchange buffer size error, 5.
Other unspecified abort code (with "REASON"   unspecified).
The User Monitor will initiate an abnormal release in the following cases: 1.
Local site emergency close down, 2.
Other unspecified abort code (with "REASON"   unspecified).
Other error types may be handled by an abort of the connection.
The Abort service may be invoked by either entity at any time.
The service provider may initiate an abort in case of error detection.
Normal Release F RELEASE RQ
Connection Abort F ABORT RQ
Provider Initiated Connection Abort F ABORT IND
protocol message 3.5  Service State Automata
This state automata defines the service as viewed by the User Monitor.
Events causing a state transition are shown in lower case and the resulting action in upper case where appropriate.
o o    F DATA RQ
Mode   Both or (Mode   Sender Only) P2: Negative confirmation or (positive confirmation, Speaker   YES)
3.5.3  Listener State Diagram o o
o F START FILE RS( )
Predicates: P1: (decision to send F CLOSE FILE RS( ))
and (decision to set Speaker
decision to send F START FILE RS( ))
The ODETTE FTP protocol is divided into five operating phases.
Start Session Start File Data Transfer
After the End File phase
an ODETTE FTP entity may enter a new Start File phase or terminate the session via the End Session phase.
ODETTE FTP peers communicate by sending and receiving messages in Exchange Buffers via the Network Service.
Each Exchange Buffer contains one of the following commands.
SSRM    Start Session Ready Message SSID    Start Session SFID
End File Negative Answer ESID
End to End Response RTR
Ready To Receive The remainder of this section describes the protocol flows.
Section five details the command formats.
The Start Session phase is entered immediately after the network connection has been established.
The ODETTE FTP entity that took the initiative to establish the network connection becomes the Initiator.
It's peer becomes the Responder.
The first message must be sent by the Responder.
Start File Phase 4.3.1  Entity Definition
The Initiator from the Start Session phase is designated the Speaker while the Responder becomes the Listener.
The roles are reversed by the Speaker sending a Change Direction command to the Listener.
: The User Monitor should take steps to prevent a loop situation occurring.
Speaker    CD   Listener   Change Direction Listener
The Start File command includes a count allowing the restart of an interrupted transmission to be negotiated.
If restart facilities are not available the restart count must be set to zero.
The sender will start with the lowest record count   1.
The destination in a Start File command can be specified as follows.
A group destination that allows an intermediate location to broadcast the Virtual File to multiple destinations.
The Listener will send a negative answer to the Speaker when the destination is not known.
The prioritisation of files for transmission is left to the local implementation.
To allow some flexibility, a change direction mechanism is available in the End File phase.
The End to End Response (EERP) command notifies the originator of a Virtual File that it has been successfully delivered to it's final destination.
This allows the originator to perform house keeping tasks such as deleting copies of the delivered data.
A Response Command must be sent from the location performing the final processing or distribution of the data to the originator.
The Response is mandatory and may be sent in the same or in any subsequent session.
When an intermediate location broadcasts or distributes a Virtual File it must receive a Response command from all the locations to which it forwarded the data before sending it's own Response.
This ensures that the Response received by the Virtual File's originator accounts for all the destination locations.
An intermediate location therefore needs to track the status of files it processes over time.
to Point Location A sends file Ba to Location B which will send an EERP to location A after it successfully receives the file.
S File Transfer  R Response EERP  [Ba] File for B from A Example: Data distribution Location A sends a Virtual File containing data for distribution to locations B and C via clearing centres E1 and E2.
Clearing centre E1 must wait for a response from E2 (for file Ba) and location C before it sends it's response, R8, to location A.  Clearing centre E2 can only send response R7 to E1 when location B acknowledges file Ba with response R6.
Example: Data collection Locations A and B send files Ca and Cb to clearing centre E1 which forwards both files to location C in a single Virtual File.
When it receives response R4 from C, clearing centre E1 sends response R5 to location A and R6 to location B. o
4.3.7  Ready To Receive Command (RTR)
In order to avoid congestion between two adjacent nodes caused by a continuous flow of EERP's, a Ready To Receive (RTR) command is provided.
The RTR acts as an EERP acknowledgement for flow control but has no end to end significance.
the turn After sending an EERP, the Speaker must wait for an RTR before sending any other commands.
4.4  Data Transfer Phase Virtual File data flows from the Speaker to the Listener during the Data Transfer phase which is entered after the Start File phase.
To avoid congestion at the protocol level
a flow control mechanism is provided via the Credit (CDT) command.
A Credit limit is negotiated in the Start Session phase, this represents the number of Data Exchange Buffers that the Speaker may send before it is obliged to wait for a Credit command from the Listener.
The available credit is initially set to the negotiated value by the Start File positive answer, which acts as an implicit Credit command.
The Speaker decreases the available credit count by one for each data buffer sent to the Listener.
When the available credit is exhausted, the Speaker must wait for a Credit command from the Listener otherwise a protocol error will occur and the session will be aborted.
The Listener should endeavour to send the Credit command without delay to prevent the Speaker blocking.
If the Credit Value is set to 2 Speaker    Data   Listener
End File Phase 4.5.1  Protocol Sequence
The Speaker notifies the Listener that it has finished sending a Virtual File by sending an End File (EFID) command.
The Listener replies with a positive or negative End File command and has the option to request a Change Direction command from the Speaker.
The Speaker terminates the session by sending an End Session (ESID) command.
Problem Handling Error detection and handling should be done as close as possible to the problem.
This aids problem determination and correction.
Each layer of the reference model is responsible for it's own error handling.
ODETTE FTP can detect protocol errors through the construction of it's state machine, and uses activity timers to detect session hang conditions.
These mechanisms are separate from the End to End controls.
If a protocol error occurs the session will be terminated and application activity aborted.
Both locations enter the IDLE state.
Timers To protect against application and network hang conditions ODETTE FTP uses activity timers for all situations where a response is required.
The timers and actions to be taken if they expire are described in section 8, the Protocol State Machine.
The use of clearing centres introduces the possibility of errors occurring as a result of data processing activities within the centre.
Such errors are not directly related to ODETTE FTP or the communication network and are therefore outside the scope of this specification.
Commands and Formats ODETTE FTP entities communicate via Exchange Buffers.
The Command Exchange Buffers are described below.
Virtual File data is carried in Data Exchange Buffers which are described in Section 6.
5.1  Conventions 5.1.1  Representation unit:
The basic unit of information is an octet, containing eight bits.
The ISO 646 IRV 7 bit coded character set [ISO 646] is used to encode constants and strings within command exchange buffers.
Commands A Command Exchange Buffer contains a single command starting at the beginning of the buffer.
Commands and data are never mixed within an Exchange Buffer.
Each command has a fixed length and can not be compressed.
The first octet of an Exchange Buffer is the Command Identifier and defines the format of the buffer.
: Command parameters are stored in fixed fields within a Command Exchange Buffer.
The ODETTE FTP commands are described below using the following definitions.
Field offset within the command exchange buffer, relative to a zero origin.
The name of the field.
Description A description of the field.
Format F    A field containing fixed values.
All allowable values for the field are enumerated in the command definition.
V    A field with variable values within a defined range.
For example the SFIDFSIZ field may contain any integer value between 0000000 and 9999999.
An alphanumeric field of length n octets.
A numeric field of length n octets.
All attributes are in character format.
A String contains alphanumeric characters from the following set:
Space is not allowed as an embedded character.
Numeric fields are always right justified and left padding with zeros must be done when needed.
SSRM Start Session Ready Message
Send / Receive Capabilities (S/R/B)
SSIDSPEC    Special Logic Indicator (N)
Future release levels will have higher numbers.
The protocol release level is negotiable, with the lowest level being selected.
See Identification Code (Section 5.4)
Uniquely identifies the Initiator (sender) participating in the ODETTE FTP session.
Key to authenticate the sender.
The length, in octets, of the largest Exchange Buffer that can be accepted by the location.
The length includes the command octet but does not include the Stream Transmission Header.
After negotiation the smallest size will be selected.
'S'  Location can only send files. '
R'  Location can only receive files. '
B'  Location can both send and receive files.
Sending and receiving will be serialised during the session, so parallel sessions will not take place.
An error occurs if adjacent locations both specify the send or receive capability.
The location can not handle compressed data.
Compression is only used if supported by both locations.
The location can not restart a file.
The Special Logic extensions are only useful in an X.25 environment and are not supported for TCP/IP.
Maximum: 999 The number of consecutive Data Exchange Buffers sent by the Speaker before it must wait for a Credit (CDT) command from the Listener.
The credit value is only applied to Data flow in the Data Transfer phase.
The Speaker's available credit is initialised to SSIDCRED when it receives a Start File Positive Answer (SFPA) command from the Listener.
It is zeroed by the End File (EFID) command.
After negotiation, the smallest size must be selected in the answer of the Responder, otherwise a protocol error will abort the session.
Negotiation of the "credit window size" parameter.
(n less or equal m)
negotiated value will be "n".
This field is reserved for future use.
May be used by the ODETTE FTP in any way.
If unused it should be initialised to spaces.
It is expected that a bilateral agreement exists as to the meaning of the data.
SFIDDATE    Virtual File Date stamp, (YYMMDD)
Virtual File Time stamp, (HHMMSS)
Dataset name of the Virtual File being transferred, assigned by bilateral agreement.
No general structure is defined for this attribute.
See Virtual Files Identification (Section 1.5.2)
This field is reserved for future use.
) Format: 'YYMMDD'  6 decimal digits representing the year, month and day respectively [ISO 8601].
Date stamp assigned by the Virtual File's Originator indicating when the file was made available for transmission.
See Virtual Files Identification (Section 1.5.2)
Time stamp assigned by the Virtual File's Originator indicating when the file was made available for transmission.
See Virtual Files Identification (Section 1.5.2)
May be used by the ODETTE FTP in any way.
If unused it should be initialised to spaces.
It is expected that a bilateral agreement exists as to the meaning of the data.
See Identification Code (Section 5.4)
The Final Recipient of the Virtual File.
This is the location that will look into the Virtual File content and perform mapping functions.
It is also the location that creates the End to End Response (EERP) command for the received file.
) Format: See Identification Code (Section 5.4) Originator of the Virtual File.
It is the location that created (mapped) the data for transmission.
V'  Variable format binary file. '
U'  Unstructured binary file. '
T'  Text Virtual File format.
Used to calculate the restart position.
99999 Length in octets of the longest logical record which may be transferred to a location.
Only user data is included.
If SFIDFMT is 'T' or 'U' then this attribute must be set to '00000'.
Maximum: 9999999 Space in 1K (1024 octet) blocks required at the Originator location to store the Virtual File.
This parameter is intended to provide only a good estimate of the Virtual File size.
Maximum: 999999999 Virtual File restart position.
The count represents the: Record Number if SSIDFMT is 'F' or 'V'.
File offset in 1K (1024 octet)
blocks if SSIDFMT is 'U' or 'T'.
The count will express the transmitted user data (i.e. before compression, header not included).
After negotiation between adjacent locations, retransmission will start at the lowest value.
The Listener must enter a count lower or equal to the restart count specified by the Speaker in the Start File (SFID) command.
The count expresses the received user data.
If restart facilities are not available, a count of zero must be specified.
04'  Storage record format not supported. '
Maximum record length not supported. '06'  File size is too big. '
10'  Invalid record count. '
11'  Invalid byte count. '
12'  Access method failure. '
Reason why transmission can not proceed.
N'  Transmission should not be retried. '
The transmission may be retried latter.
This parameter is used to advise the Speaker if it should retry at a latter point in time due to a temporary condition at the Listener site, such as a lack of storage space.
It should be used in conjunction with the Answer Reason code (SFNAREAS).
An invalid file name error code may be the consequence of a problem in the mapping of the Virtual File on to a real file.
Such problems cannot always be resolved immediately.
It it therefore recommended that when a SFNA with Retry
Y is received the User Monitor attempts to retransmit the relevant file in a subsequent session.
DATA Data Exchange Buffer o
Variable length buffer containing the data payload.
The Data Exchange Buffer is described in Section 6.
This field is reserved for future use.
Maximum: 999999999 For SSIDFMT 'F' or 'V' the exact record count.
For SSIDFMT 'U' or 'T' zeros.
The count will express the real size of the file (before compression, header not included).
The total count is always used, even during restart processing.
Maximum: 999999999999 Exact number of units (octets) transmitted.
The count will express the real size of the file.
The total count is always used, even during restart processing.
N'  Change direction not requested. '
This parameter allows the Listener to request a Change Direction (CD) command from the Speaker.
04'  Storage record format not supported. '
Maximum record length not supported. '06'  File size is too big. '
10'  Invalid record count. '
11'  Invalid byte count. '
12'  Access method failure. '
Reason why transmission can not proceed.
Command not recognised An Exchange Buffer contains an invalid command code (1st octet of the buffer). '
02'  Protocol violation An Exchange Buffer contains an invalid command for the current state of the receiver. '
A Start Session (SSID) command contains an unknown or invalid Identification Code. '
Invalid password A Start Session (SSID) command contained an invalid password. '
Local site emergency close down The local site has entered an emergency close down mode.
Communications are being forcibly terminated. '
Command contained invalid data A field within a Command Exchange buffer contains invalid data. '
07'  Exchange Buffer size error
The length of the Exchange Buffer as determined by the Stream Transmission Header is different to the length implied by the Command Code. '08'  Resources not available The request for connection has been denied due to a resource shortage.
The connection attempt should be retried later. '
'10'  Mode or capabilities incompatible '99'  Unspecified Abort code
An error was detected for which no specific code is defined.
Character Value: 'R'  CD Command identifier.
EERP End to End Response
Virtual File Date stamp, (YYMMDD)
Virtual File Time stamp, (HHMMSS)
o o EERPCMD   Command Code
Character Value: 'E'  EERP Command identifier.
Dataset name of the Virtual File being transferred, assigned by bilateral agreement.
No general structure is defined for this attribute.
See Virtual Files Identification (Section 1.5.2)
This field is reserved for future use.
) Format: 'YYMMDD'  6 decimal digits representing the year, month and day respectively [ISO 8601].
Date stamp assigned by the Virtual File's Originator indicating when the file was made available for transmission.
See Virtual Files Identification (Section 1.5.2)
Time stamp assigned by the Virtual File's Originator indicating when the file was made available for transmission.
See Virtual Files Identification (Section 1.5.2)
May be used by the ODETTE FTP in any way.
If unused it should be initialised to spaces.
It is expected that a bilateral agreement exists as to the meaning of the data.
See Identification Code (Section 5.4) Originator of the Virtual File.
This is the location that created (mapped) the data for transmission.
See Identification Code (Section 5.4) Final Recipient of the Virtual File.
This is the location that will look into the Virtual File content and perform mapping functions.
It is also the location that creates the EERP for the received file.
The Initiator (sender) and Responder (receiver) participating in an ODETTE FTP session are uniquely identified by an Identification Code based on [ISO 6523], Structure for the Identification of Organisations (SIO).
The locations are considered to be adjacent for the duration of the transmission.
The SIO has the following format.
Other values may be used for non ODETTE codes.
A code forming part of the Organisation Identifier.
A code forming part of the Organisation Identifier.
This field may contain the letters A to Z, the digits 0 to 9, apace and hyphen characters.
A locally assigned address which uniquely identifies a system within an organisation (defined by an Organisation Identifier).
ODETTE FTP Data Exchange Buffer 6.1  Overview Virtual Files are transmitted by mapping the Virtual File records into Data Exchange Buffers, the maximum length of which was negotiated between the ODETTE FTP entities via the Start Session (SSID) commands exchanged during the Start Session Phase of the protocol.
The format is based on the Network Independent File Transfer Protocol [NIFTP].
Virtual File records may be of arbitrary length.
A simple compression scheme is defined for strings of repeated characters.
An example of the use of the Data Exchange Buffer can be found in Appendix A. 6.2
For transmission of Virtual File records, data is divided into Subrecords, each of which is preceded by a one octet Subrecord Header.
The Data Exchange Buffer Command Character, 'D'.
Subrecord Header defined as follows:
Unstructured files are transmitted as a single record, in this case the flag acts as an end of file marker.
The number of octets in the Virtual File represented by the next subrecord expressed as a binary value.
For uncompressed data this is simply the length of the subrecord.
For compressed data this is the number of times that the single octet in the following subrecord must be inserted in the Virtual File.
As six bits are available, the next subrecord may represent between 0 and 63 octets of the Virtual File.
An Exchange Buffer may be any length up to the value negotiated in the Start Session exchange.
Virtual File records may be concatenated within one Exchange Buffer or split across a number of buffers.
A subrecord is never split between two Exchange Buffers.
If the remaining space in the current Exchange Buffer is insufficient to contain the next 'complete' subrecord one of the following strategies should be used: 1.
Truncate the Exchange Buffer, and put the complete subrecord (preceded by its header octet) in a new Exchange Buffer.
Split the subrecord into two, filling the remainder of the Exchange Buffer with the first new subrecord and starting a new Exchange Buffer with the second.
A record of length zero may appear anywhere in the Exchange Buffer.
A subrecord of length zero may appear anywhere in the record and/or the Exchange Buffer.
The ODETTE FTP was originally designed to utilise the ISO Network Service, specifically the X.25 specification.
It relies on the fact that the network service will preserve the sequence and boundaries of data units transmitted through the network and that the network service will pass the length of the data unit to the receiving ODETTE FTP.
The TCP offers a stream based connection which does not provide these functions.
In order to utilise the TCP stream without disruption to the existing ODETTE FTP a Stream Transmission Buffer (STB) is created by adding a Stream Transmission Header (STH) to the start of all Command and Data Exchange Buffers before they are passed to the TCP transport service.
This allows the receiving ODETTE FTP to recover the original Exchange Buffers.
STH Stream Transmission Header OEB ODETTE FTP Exchange Buffer
The Stream Transmission Buffer comprises of a STH and OEB.
The Stream Transmission Header is shown below.
The fields are transmitted from left to right. 0
3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
(binary) Reserved for future use.
The length of the Stream Transmission Buffer (STH OEB).
The smallest STB is 5 octets consisting of a 4 octet header followed by a 1 octet Exchange Buffer such as a Change Direction (CD) command.
The maximum Exchange Buffer length that can be negotiated is 99999 octets (Section 5.3.2) giving a STB length of 100003.
The length is expressed as a binary number with the most significant bit on the left.
It is expected that implementations of this protocol will follow the Internet robustness principle of being conservative in what is sent and liberal in what is accepted.
Protocol State Machine 8.1  ODETTE FTP State Machine
The operation of an ODETTE FTP entity is formally defined by the State Machine presented below.
There are five State and Transition tables and for each table additional information is given in the associated Predicate and Action lists.
The response of an ODETTE FTP entity to the receipt of an event is defined by a Transition table entry indexed by the Event/State intersection within the appropriate State table.
Each Transition table entry defines the actions taken, events generated and new state entered.
Predicates may be used within a table entry to select the correct response on the basis of local information held by the entity.
A list of predicates used to select between different possible transitions.
The predicates are defined in the Predicate and Action list.
The actions are defined in the Predicate and Action list.
The new state of the entity.
Error Handling The receipt of an event in a given state may be invalid for three reasons.
The case is impossible by construction of the state automata, denoted 'X' in the State tables.
For example a timer which has not been set cannot run out.
The event is the result of an error in the Network Service implementation, also denoted 'X' in the state tables.
The Network Service implementation is considered to be correct.
For all other cases the event is considered to be a User Error, denoted "U" in the state tables.
The State tables define the conditions under which a User event is valid, thus preventing the generation of a protocol error by the ODETTE FTP entity as a result of a User Monitor error.
The reaction of the entity to such errors is undefined and regarded as a local implementation issue.
The State tables also allow protocol errors due to the receipt of invalid Exchange Buffers, to be detected.
In such cases the reaction of the entity to the error is defined.
The Command Mode is strictly a Half Duplex Flip Flop Mode.
A NC ONLY   Responder, Network Connection opened The Responder has sent it's Ready Message (SSRM) and is waiting for Start Session (SSID) from the Initiator.
A WF CONRS  Responder Waiting for F CONNECT RS
The Responder has received the Initiator's Start Session (SSID) and is waiting for a response (F CONNECT RS) from it's User Monitor.
CDSTWFCD    CD RQ stored in WF CD state Since the User Monitor doesn't see the WF CD state it may send a Change Direction request (F CD RQ) before the ODETTE FTP receives a Change Direction (CD) command.
Pending The Listener has received an End File (EFID) command and is waiting for the Close File response (F CLOSE FILE RS) from it's User Monitor.
Pending The Speaker has sent an End File (EFID) command and is waiting for an End File Answer (EFPA or EFNA).
stored in WF CD state Since the User Monitor doesn't see the WF CD state it may send F EERP RQ, before the ODETTE FTP receives a Change Direction (CD) command.
, F CD RQ Received The ODETTE FTP entity has become the Listener after receiving a Change Direction request (F CD RQ) from the User Monitor.
The receipt of an End Session (ESID) is valid in this state.
, F CD IND Sent The ODETTE FTP entity has sent a Change Direction indication (F CD IND) to the User Monitor.
A Change Direction request (F CD RQ) is invalid in this state.
The Initiator has requested a new network connection and is waiting for a Connection confirmation (N CON CF) from the Network Service.
Before sending Start Session (SSID), the Initiator must wait for a Ready Message (SSRM) from the Responder.
The Initiator has sent a Start Session (SSID) command and is waiting for Start Session from the Responder.
The Listener is waiting for the Speaker to send a Data Exchange buffer.
Pending The Listener has received a Start File (SFID) command and is waiting for the Start File response (F START FILE RS) from it's User Monitor.
The Speaker has received a Start File Positive Answer (SFPA) and is waiting for a Data (F DATA RQ) or Close File (F CLOSE FILE) request from it's User Monitor.
Pending The Speaker has sent a Start File (SFID) command and is waiting for a Start File Answer (SFPA or SFNA).
The Speaker is waiting for a Set Credit (CDT) command before sending further Data Exchange buffers.
SFSTWFCD    Start File Request stored in WF CD state.
Since the User Monitor doesn't see the WF CD state it may send a Start File request (F START FILE RQ) before the ODETTE FTP receives a Change Direction (CD) command.
The Listener wishes to become the Speaker and is waiting for a Change Direction (CD) command after sending an End File Positive Answer (EFPA) requesting change direction.
The Initiator has sent an End to End Response (EERP) command and must wait for Ready To Receive (RTR) from the Responder.
Wait for N DISC IND ODETTE FTP has sent an End Session (ESID) command and is waiting for a Disconnection indication (N DISC IND) from the Network Service.
Input Events User Monitor Input Events (Section 3) F DATA RQ
F CLOSE FILE RQ F EERP RQ
F START FILE RS( )
F CLOSE FILE RS( )
F CLOSE FILE RS( ) F RELEASE RQ Network Input Events (Section 2.2) N CON IND
ODETTE FTP Input Events (Section 4)
SSRM Internal Input Events TIME OUT Internal ODETTE FTP timer expires.
Input event parameters are denoted I.Event name.
Parameter name within the state table action and predicate lists.
Their value can be examined but not changed by the ODETTE FTP entity.
8.5  Output Events User Monitor Output Events (Section 3)
F DATA IND  F CONNECT
F START FILE CF( )
N DISC RQ Peer ODETTE FTP Output Events (Section 4)
SSRM Output event parameters are denoted O.Event name.
Parameter name within the state table action and predicate lists.
Their values can be examined and changed by the ODETTE FTP entity.
The following variables are maintained by the ODETTE FTP entity to assist the operation of the protocol.
They are denoted V.Variable  name within the state table action and predicate lists.
Their value can be examined and changed by the ODETTE FTP entity.
The initial value of each variable is undefined.
Called addr  Address    Used to build O.F CONNECT IND.Called addr Calling addr Address    To build O.F CONNECT IND.Calling addr Compression
Integer    Used only during file opening.
The Credit value negotiated for the session.
The following constants define the capabilities of a given ODETTE FTP entity.
They are denoted C.Constant name within the state table action and predicate lists.
Their value can be examined but not changed by the ODETTE FTP entity.
127 < Int < 100000
Session Connection State Table 8.8.1
Predicate P1:  (No resources available) OR (C.Cap init   Responder)
OR (C.Cap mode   Sender only AND I.F CONNECT RQ.Mode   Receiver only)
(C.Cap mode   Receiver only AND I.F CONNECT RQ.Mode   Sender only)
Negotiation of (Buf size, Restart, Compression, Mode, Credit) is OK.
Initiator Predicate P4:  Mode in SSID incompatible with C.Cap mode Action 1:  Set V.Mode from (C.Cap mode, I.F CONNECT RQ.Mode)
Set V.Pswd, V.Id, V.Restart from I.F CONNECT RQ Set V.Buf size
C.Max buf size Set V.Compression
Start inactivity timer Action 3:
Set parameters in O.SSID   from local variables
V.Restart, V.Compression, V.Buf size, V.Window   from SSID 8.9
Error and Abort State Table 8.9.1
Stop inactivity timer Action 2:
inactivity timer 8.10  Speaker State Table
The following abbreviations are used in the Speaker State table.
See Note 1    P   Protocol
FILE RQ.Restart pos > 0)
Restart requested and not supported for this session.
Predicate P2:  (I.SFPA.Restart pos >
Protocol error due to the restart position in the SFPA acknowledgement being greater than the position requested in the SFID request.
Note:  Speaker's Credit is exhausted.
Stop inactivity timer Action 2:
Start inactivity timer Action 3:
Build an EERP from F EERP RQ Action 4:  Store F EERP RQ in V.Req buf
Build SFID from F START FILE RQ
FILE RQ.Restart pos Action 6:  Store F START FILE RQ in V.Req buf
Action 7:  Build F START FILE CF
( ) from I.SFPA Action 8:  Build F START FILE CF( ) from I.SFNA Action 9:  Build EERP from F EERP RQ stored in V.Req buf Action 10: Build SFID from F START FILE RQ stored in V.Req buf Set
Build Exchange Buffer Action 12:
V.Credit S 1 Note 1:
The OPOWFC state prevents the Speaker from sending data buffers because it is waiting for credit.
The ODETTE FTP entity may need to control the flow of Data requests (F DATA RQ) from it's User Monitor to protect it's own buffers.
Any such mechanism and the behaviour of the entity should a User Error occur are regarded as local implementation issues.
The choice to accept this "Request/Event" while in this state is a matter of local implementation.
The ODETTE state tables are based on the assumption that this event cannot occur in this state and is considered to be a user error (UE).
It is a local matter to make the User Monitor aware that since the RTR is received, the protocol machine is now ready to accept the next request.
8.11  Speaker State Table 2
E   F CLOSE FILE RQ
F CLOSE FILE CF( ,SP No)
Stop inactivity timer Action 2:
Start inactivity timer Action 3:  O.F CLOSE FILE CF( ).Speaker
No Action 4:  O.F CLOSE FILE CF
Yes Action 5:  Build EFID from F CLOSE FILE RQ Action 6:  Build F CLOSE FILE CF( ) from EFNA Action 7:
In order to respect the "half duplex" property of ODETTE FTP it is forbidden to send EFID while in the OPOWFC state.
EFID can be sent only in the OPO state.
The ODETTE FTP implementation must avoid sending EFID (or receiving F CLOSE FILE RQ) while in the OPOWFC state.
T   F START FILE RS
Predicate P1:  (I.SFID.Restart pos > 0) AND (V.Restart
Invalid Start File command Predicate P2:
Positive Response Predicate P3:  I.F CLOSE FILE RS( )
V.Credit L 1 < 0
Note:  Protocol Error because the Speaker has exceeded it's available transmission credit.
The Speaker's credit must be reset before it can send further Data Exchange buffers.
Action 1:  Stop inactivity timer.
Start inactivity timer Action 3:  Build F START FILE IND from I.SFID
I.SFID.Restart pos Action 4:  Build F EERP IND from I.EERP Action 5:
Wait for sufficient resources to receive up to V.Window Data Exchange Buffers.
Wait for resources required to process a new EERP.
Flow control in case of reception.
The ODETTE FTP Listener must periodically send new credit to the Speaker.
The timing of this operation will depend on: 1.
The User Monitor's capacity the receive data.
The number of buffers available to ODETTE FTP. 3.
The Speaker's available credit, which must be equal to zero.
Generally, the ODETTE FTP Listener will send RTR immediately after receiving EERP.
If required, it can delay the RTR until the resources required to process a new EERP are available.
Example Consider an ODETTE FTP entity that has sent a Start File (SFID) command and entered the Open Out Pending (OPOP) state.
response on receiving a Positive Answer (SFPA) is documented in Speaker State Table 1 which shows that transition 'K' should be applied and is interpreted as follows:
reset timer Start inactivity timer;
reset timer Start inactivity timer; Build F START FILE CF( ) from I.SFPA
to user monitor New State: OPO; end
The ODETTE FTP checks the restart position in the received Start File Positive Answer (SFPA) command.
If it is invalid it aborts the session by sending an End Session (ESID) command to
it's peer and an Abort indication
If the restart position is valid a Start File confirmation (F START FILE CF) is built and sent to the User Monitor, the credit window is initialised and the Open Out (OPO) state is entered.
Security Considerations ODETTE FTP exchanges user identity and password information in clear text.
It is therefore recommended that a lower layer (session, network or linkage) security protocol is used to protect the session from casual identity collection.
This example demonstrates the mapping of a Virtual File into a sequence of ODETTE FTP Data Exchange Buffers and shows how each Stream Transmission Buffer is built from an ODETTE FTP Data Exchange Buffer prefixed by a Stream Transmission Header.
Each line in this extract from 'The Hunting of the Snark' by Lewis Carroll [SNARK] is considered to be a separate record in a file containing variable length records.
Note that it does not represent a text file and CR/LF record separators are not used.
The blank line is represented by a zero length record.
"It's a Snark!" was the sound that first came to their ears, And seemed almost too good to be true.
Then followed a torrent of laughter and cheers: Then the ominous words "It's a Boo "
Some fancied they heard in the air
A weary and wandering sigh Then sounded like " jum!"
but the others declare It was only a breeze that went by.
Assuming that the minimum exchange buffer length of 128 octets has been negotiated the result of mapping the text into Stream Transmission Buffers may be as follows.
D."It' s a Snark! " was the  sound that  first cam Hex H :  10084B2472 7262566762 2276727662 7676627667 2667772666
nd seemed  almost too  good to b Hex H :  6276276667 26677242A4
a torren t Hex H :
Hex L :  504255E848 5E06FCCF75 40104F225E 40
the  ominous w Hex H :  1007496626 6766767266 6266667734
Some  fancied t Hex H :  6767224727
Then  sounded li Hex H :  1007442942 7667726662
but the thers decl are.
w as only a Hex H :
Hex L :  2255A50481 4075E4029E
Data Exchange Buffer command code 'D' !
All headers are represented with a period in the Text line.
Each Data Exchange Buffer is preceded by a Stream Transmission Header.
In the above mapping the first Data Exchange Buffer is 128 octets in length.
The last record has been continued in the second buffer.
The second Data Exchange Buffer has been truncated at 116 octets to finish at the end of a record.
The following record being completely contained in the third buffer.
This is an alternative to spanning the record as shown between the first and second Data Exchange Buffers.
The blank line has been encoded as a single header octet of '80' hex, indicating a zero length subrecord with the end of record flag set.
The indented lines have been compressed.
The ODETTE File Transfer Protocol is a product of Working Group Four of the Organisation for Data Exchange by Tele Transmission in Europe.
The working group can be contacted via the ODETTE Secretariat: ODETTE Secretariat Forbes House Halkin Street London SW1X
7DS United Kingdom Phone:  44
