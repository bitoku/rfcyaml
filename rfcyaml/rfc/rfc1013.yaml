- title: __initial_text__
  contents:
  - "                  X WINDOW SYSTEM PROTOCOL, VERSION 11\n     Copyright (c) 1986,\
    \ 1987 Massachusetts Institute of Technology\n                   X Window System\
    \ is a trademark of M.I.T.\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC is distributed to the Internet community for\
    \ information\n   only.  It does not establish an Internet standard.  The X window\n\
    \   system has been widely reviewed and tested.  The internet community\n   is\
    \ encouraged to experiment with it.  Distribution of this memo is\n   unlimited\
    \ (see copyright notice on page 2).\n   Permission to use, copy, modify, and distribute\
    \ this document for any\n   purpose and without fee is hereby granted, provided\
    \ that the above\n   copyright notice appear in all copies and that both that\
    \ copyright\n   notice and this permission notice are retained, and that the name\
    \ of\n   M.I.T. not be used in advertising or publicity pertaining to this\n \
    \  document without specific, written prior permission.  M.I.T. makes no\n   representations\
    \ about the suitability of this document or the\n   protocol defined in this document\
    \ for any purpose.  It is provided\n   \"as is\" without express or implied warranty.\n\
    \    Author: Robert W. Scheifler\n           Laboratory for Computer Science\n\
    \           545 Technology Square, Room 418\n           Cambridge, MA 02139\n\
    \    Contributors:\n           Dave Carver (Digital HPW)\n           Branko Gerovac\
    \ (Digital HPW)\n           Jim Gettys (MIT/Project Athena, Digital)\n       \
    \    Phil Karlton (Digital WSL)\n           Scott McGregor (Digital SSG)\n   \
    \        Ram Rao (Digital UEG)\n           David Rosenthal (Sun)\n           Dave\
    \ Winchell (Digital UEG)\n    Implementors of initial server who provided useful\
    \ input:\n           Susan Angebranndt (Digital)\n           Raymond Drewry (Digital)\n\
    \           Todd Newman (Digital)\n    Invited reviewers who provided useful input:\n\
    \           Andrew Cherenson (Berkeley)\n           Burns Fisher (Digital)\n \
    \          Dan Garfinkel (HP)\n           Leo Hourvitz (Next)\n           Brock\
    \ Krizan (HP)\n           David Laidlaw (Stellar)\n           Dave Mellinger (Interleaf)\n\
    \           Ron Newman (MIT)\n           John Ousterhout (Berkeley)\n        \
    \   Andrew Palay (ITC CMU)\n           Ralph Swick (MIT)\n           Craig Taylor\
    \ (Sun)\n           Jeffery Vroom (Stellar)\n   This document does not attempt\
    \ to provide the rationale or pragmatics\n   required to fully understand the\
    \ protocol or to place it in\n   perspective within a  complete system.  Knowledge\
    \ of X Version 10\n   will certainly aid in understanding this document.\n   The\
    \ protocol contains many management mechanisms that are not\n   intended for normal\
    \ applications.  Not all mechanisms are needed to\n   build a particular user\
    \ interface.  It is important to keep in mind\n   that the protocol is intended\
    \ to provide mechanism, not policy.\n   This document does not attempt to define\
    \ precise formats or bit\n   encodings.\n   -------------------------------------------------------------------\n\
    \   SECTION 1.  TERMINOLOGY\n   Access control list\n           X maintains a\
    \ list of hosts from which client programs may be\n           run.  By default,\
    \ only programs on the local host may use the\n           display, plus any hosts\
    \ specified in an initial list read by\n           the server.  This \"access\
    \ control list\" can be changed by\n           clients on the local host.  Some\
    \ server implementations may\n           also implement other authorization mechanisms.\n\
    \   Active grab\n           A grab is \"active\" when the pointer or keyboard\
    \ is actually\n           owned by the single grabbing client.\n   Ancestors\n\
    \           If W is an inferior of A, then A is an \"ancestor\" of W.\n   Atom\n\
    \           An \"atom\" is a unique id corresponding to a string name.\n     \
    \      Atoms are used to identify properties, types, and selections.\n   Backing\
    \ store\n           When a server maintains the contents of a window, the\n  \
    \         off-screen saved pixels are known as a \"backing store\".\n   Bit gravity\n\
    \           When a window is resized, the contents of the window are\n       \
    \    not necessarily discarded.  It is possible to request the\n           server\
    \ (though no guarantees are made) to relocate the\n           previous contents\
    \ to some region of the window.  This\n           attraction of window contents\
    \ for some location of a window\n           is known as \"bit gravity\".\n   Bitmap\n\
    \           A \"bitmap\" is a pixmap of depth one.\n   Button grabbing\n     \
    \      Buttons on the pointer may be passively \"grabbed\" by a\n           client.\
    \  When the button is pressed, the pointer is then\n           actively grabbed\
    \ by the client.\n   Byte order\n           For image (pixmap/bitmap) data, byte\
    \ order is defined by\n           the server, and clients with different native\
    \ byte ordering\n            must swap bytes as necessary.  For all other parts\
    \ of the\n           protocol, the byte order is defined by the client, and the\n\
    \           server swaps bytes as necessary.\n   Children\n           The \"children\"\
    \ of a window are its first-level subwindows.\n   Client\n           An application\
    \ program connects to the window system server\n           by some interprocess\
    \ communication (IPC) path, such as a TCP\n           connection or a shared memory\
    \ buffer.  This program is the\n           window system server.  More precisely,\
    \ the client is the IPC\n           path itself; a program with multiple paths\
    \ open to the server\n           is viewed as multiple clients by the protocol.\
    \  Resource\n           lifetimes are controlled by connection lifetimes, not\
    \ by\n           program lifetimes.\n   Clipping regions\n           In a graphics\
    \ context, a bitmap or list of rectangles can\n           be specified to restrict\
    \ output to a particular region of\n           the window.  The image defined\
    \ by the bitmap or rectangles\n           is called a \"clipping region\".\n \
    \  Color cell\n           An entry in a colormap is known as a \"color cell\"\
    .  An entry\n           contains three values specifying red, green and blue\n\
    \           intensities.  These values are always viewed as 16 bit\n         \
    \  unsigned numbers, with zero being minimum intensity.  The\n           values\
    \ are scaled by the server to match the display\n           hardware.  The components\
    \ of a cell are coincident with\n           components of other cells in DirectColor\
    \ and TrueColor\n           colormaps.\n   Colormap\n           A \"colormap\"\
    \ consists of a set of color cells.  A pixel value\n           indexes the color\
    \ map to produce intensities to be displayed.\n           Depending on hardware\
    \ limitations, one or more colormaps may\n           be installed at one time,\
    \ such that windows associated with\n           those maps display with true colors.\n\
    \   Connection\n           The IPC path between the server and client program\
    \ is known\n           as a \"connection\".  A client program typically (but not\n\
    \           necessarily) has one connection to the server over which\n       \
    \    requests and events are sent.\n   Containment\n           A window \"contains\"\
    \ the pointer if the window is viewable and\n           the hotspot of the cursor\
    \ is within a visible region of the\n           window or a visible region of\
    \ one of its inferiors.  The\n           border of the window is included as part\
    \ of the window for\n           containment.  The pointer is \"in\" a window if\
    \ the window\n           contains the pointer but no inferior contains the pointer.\n\
    \   Coordinate system\n           The coordinate system has X horizontal and Y\
    \ vertical, with\n           the origin [0, 0] at the upper left.  Coordinates\
    \ are\n           discrete, and in terms of pixels.  Each window and pixmap has\n\
    \           its own coordinate system.  For a window, the origin is at\n     \
    \      the inside upper left, inside the border.\n   Cursor\n           A \"cursor\"\
    \ is the visible shape of the pointer on a screen.\n           It consist of a\
    \ hot spot, a source bitmap, a shape bitmap,\n           and a pair of colors.\
    \  The cursor defined for a window\n           controls the visible appearance\
    \ when the pinter is in that\n           window.\n   Depth\n           The \"\
    depth\" of a window or pixmap is number of bits per pixel\n           it has.\
    \ The depth of a gcontext is the depth of the root of\n           the gcontext.\n\
    \   Device\n           Keyboards, mice, tablets, track-balls, button boxes, etc.\
    \ are\n           all collectively known as input \"devices\".  The core protocol\n\
    \           only deals with two devices, \"the keyboard\" and \"the\n        \
    \   pointer\".\n   Drawable\n           Both windows and pixmaps may be used as\
    \ sources and\n           destinations  in graphics operations.  These are collectively\n\
    \           known as \"drawables\". However, an InputOnly window cannot be\n \
    \          used as a source or destination in a graphics operation.\n   Event\n\
    \           Clients are informed of information asynchronously via\n         \
    \  \"events\". These events may be either asynchronously generated\n         \
    \  from devices, or generated as side effects of client\n           requests.\
    \  Events are grouped into types; events are never\n           sent to a client\
    \ by the server unless the client has\n           specificially asked to be informed\
    \ of that type of event,\n           but other clients can force events to be\
    \ sent to other\n           clients. Events are typically reported relative to\
    \ a window.\n   Event mask\n           Events are requested relative to a window.\
    \  The set of event\n           types a client requests relative to a window described\
    \ using\n           an \"event mask\".\n   Event sychronization\n           There\
    \ are certain race conditions possible when\n           demultiplexing device\
    \ events to clients (in particular\n           deciding where pointer and keyboard\
    \ events should be sent\n           when in the middle of window management operations).\
    \  The\n           event synchronization mechanism allows synchronous processing\n\
    \           of device events.\n   Event propagation\n           Device-related\
    \ events \"propagate\" from the source window to\n           ancestor windows\
    \ until some client has expressed interest in\n           handling that type of\
    \ event, or until the event is discarded\n           explicitly.\n   Event source\n\
    \           The smallest window containing the pointer is the \"source\"\n   \
    \        of a device related event.\n   Exposure event\n           Servers do\
    \ not guarantee to preserve the contents of windows\n           when windows are\
    \ obscured or reconfigur contents of regions\n           of windows have been\
    \ lost.\n   Extension\n           Named \"extensions\" to the core protocol can\
    \ be defined to\n           extend the system.  Extension to output requests,\
    \ resources,\n           and event types are all possible, and expected.\n   Font\n\
    \           A \"font\" is an array of glyphs (typically characters).  The\n  \
    \         protocol does no translation or interpretation of character\n      \
    \     sets.  The client simply indicates values used to index the\n          \
    \ glyph array.  A font contains additional metric information\n           to determine\
    \ inter-glyph and inter-line spacing.\n   Glyph\n           A \"glyph\" is an\
    \ image, typically of a character, in a font.\n   Grab\n           Keyboard keys,\
    \ the keyboard, pointer buttons, the pointer,\n           and the server can be\
    \ \"grabbed\" for exclusive use by a\n           client.  In general, these facilities\
    \ are not intended to be\n           used by normal applications, but are intended\
    \ for various\n           input and window managers to implement various styles\
    \ of\n           user interfaces.\n   Graphics context\n           Various information\
    \ for graphics output is stored in \"GC\"'s,\n           such as foreground pixel,\
    \ background pixel, line width,\n           clipping region, etc.\n   Hotspot\n\
    \           A cursor has an associated \"hot spot\" which defines a point\n  \
    \         in the cursor that corresponds to the coordinates reported\n       \
    \    for the pointer.\n   Identifier\n           Each resource has an \"identifier\"\
    , a unique value associated\n           with it that clients use to name the resource.\
    \  An identifier\n           can be used over any connection to name the resource.\n\
    \   Inferiors\n           The \"inferiors\" of a window are all of the subwindows\
    \ nested\n           below it: the children, the children's children, etc.\n \
    \  Input focus\n           The \"input focus\" is nominally where keyboard input\
    \ goes.\n           Keyboard events are by default sent to the client expressing\n\
    \           interest on the window the pointer is in.  This is said to be\n  \
    \         a \"real estate driven\" input focus.  It is also possible to\n    \
    \       attach the keyboard input to a  specific window; events will\n       \
    \    then be sent to the appropriate client independent of the\n           pointer\
    \ position.\n   Input manager\n           Control over keyboard input is typically\
    \ provided by an\n           \"input manager\" client.\n   InputOnly window\n\
    \           A window that cannot be used for graphics requests.\n           InputOnly\
    \ windows are \"invisible\", and can be used to control\n           such things\
    \ as cursors, input event generation, and grabbing.\n   InputOutput window\n \
    \          The \"normal\" kind of opaque window, used for both input\n       \
    \    and output.\n   Key grabbing\n           Keys on the keyboard may be passively\
    \ \"grabbed\" by a client.\n           When the key is pressed, the keyboard is\
    \ then actively\n           grabbed by the client.\n   Keyboard grabbing\n   \
    \        A client can actively \"grab\" control of the keyboard, and key\n   \
    \        events will be sent to that client rather than the client the\n     \
    \      events would normally have been sent to.\n   Mapping\n           A window\
    \ is said to be \"mapped\" if a map call has been\n           performed on it.\
    \  Unmapped windows are never viewable or\n           visible.\n   Modifier keys\n\
    \           Shift, Control, Meta, Super, Hyper, ALT, Compose, Apple,\n       \
    \    CapsLock, ShiftLock, and similar keys are called \"modifier\"\n         \
    \  keys.\n   Obscures\n           Window A \"obscures\" window B if both are viewable\n\
    \           InputOutput windows and A is higher in the global stacking\n     \
    \      order, and the rectangle defined by the outside edges of\n           intersects\
    \ the rectangle defined by the outside edges of B.\n           Note the (fine)\
    \ distinction with \"occludes\". Also note that\n           window borders are\
    \ included in the calculation.\n   Occludes\n           Window A \"occludes\"\
    \ window B if both are mapped and A is\n           higher in the global stacking\
    \ order, and the rectangle\n           defined by the outside edges of A intersects\
    \ the rectangle\n           defined by the outside edges of B.  Note the (fine)\n\
    \           distinction with \"obscures\".  Also note that window borders\n  \
    \         are included in the calculation.\n   Padding\n           Some padding\
    \ bytes are inserted in the data stream to\n           maintain alignment of the\
    \ protocol requests on natural\n           boundaries.  This increases ease of\
    \ portability to some\n           machine architectures.\n   Parent window\n \
    \          If C is a child of P, then P is the \"parent\" of C.\n   Passive grab\n\
    \           Grabbing a key or button is a \"passive\" grab.  The grab\n      \
    \     activates when the key or button is actually pressed.\n   Pixel value\n\
    \           A \"pixel\" is an N-bit value, where N is the number of bit\n    \
    \       planes used in a particular window or pixmap.  For a window,\n       \
    \    a pixel value indexes a colormap to derive an actual color\n           to\
    \ be displayed.\n   Pixmap\n           A \"pixmap\" is a three dimensional array\
    \ of bits.  A pixmap\n           is normally thought of as a two dimensional array\
    \ of pixels,\n           where each pixel can be a value from 0 to (2^N)-1, where\
    \ N\n           is the depth (z axis) of the pixmap.  A pixmap can also be\n \
    \          thought of as a stack of N bitmaps.\n   Plane mask\n           Graphics\
    \ operations can be restricted to only affect a\n           subset of bit planes\
    \ of a destination.  A \"plane mask\" is\n           a bit mask describing which\
    \ planes are to be modified, and\n           is stored in a graphics context.\n\
    \   Pointer\n           The \"pointer\" is the pointing device attached to the\
    \ cursor,\n           and tracked on the screens.\n   Pointer grabbing\n     \
    \      A client can actively \"grab\" control of the pointer, and\n          \
    \ button and motion events will be sent to that client rather\n           than\
    \ the client the events would normally have been sent to.\n   Pointing device\n\
    \           A \"pointing device\" is typically a mouse or tablet, or some\n  \
    \         other device with effective dimensional motion.  There is\n        \
    \   only one visible cursor is defined by the core protocol,\n           and it\
    \ tracks whatever pointing device is attached as the\n           pointer.\n  \
    \ Property\n           Windows may have associated \"properties\", consisting\
    \ of a\n           name, a type, a data format, and some data.  The protocol\n\
    \           places no interpretation on properties, they are intended\n      \
    \     as a general-purpose naming mechanism for clients.  For\n           example,\
    \ clients might share information such as resize\n           hints, program names,\
    \ and icon formats with a window\n           manager via properties.\n   Property\
    \ list\n           The \"property list\" of a window is the list of properties\n\
    \           that have been defined for the window.\n   Redirecting control\n \
    \          Window managers (or client programs) may wish to enforce\n        \
    \    window layout policy in various ways.  When a client\n           attempts\
    \ to change the size or position of a window, the\n           operation may be\
    \ \"redirected\" to a specified client,\n           rather than the operation\
    \ actually being performed.\n   Reply\n           Information requested by a client\
    \ program is sent back to\n           the client with a \"reply\".  Both events\
    \ and replys are\n           multipexed on the same connection.  Most requests\
    \ do not\n           generate replies.\n   Request\n           A command to the\
    \ server is called a \"request\".  It is a\n           single block of data sent\
    \ over a connection.\n   Resource\n           Windows, pixmaps, cursors, fonts,\
    \ graphics contexts, and\n           colormaps are known as \"resources\".  They\
    \ all have unique\n           identifiers associated with them for naming purposes.\
    \  The\n           lifetime of a resource is bounded by the lifetime of the\n\
    \           connection over which the resource was created.\n   Root\n       \
    \    The \"root\" of a pixmap or gcontext is the same as the root\n          \
    \ of whatever drawable was used when the pixmap or gcontext\n           was created.\
    \  The \"root\" of a window is the root window\n           under which the window\
    \ was created.\n   Root window\n           Each screen has a \"root window\" covering\
    \ it.  It cannot be\n           reconfigured or unmapped, but otherwise acts as\
    \ a full\n           fledged window. A root window has no parent.\n   Save set\n\
    \           The \"save set\" of a client is a list of other client's\n       \
    \    windows which, if they are inferiors of one of the client's\n           windows\
    \ at connection close, should not be destroyed, and\n           which should be\
    \ remapped if it is unmapped.  Save sets are\n           typically used by window\
    \ managers to avoid lost windows if\n           the manager should terminate abnormally.\n\
    \   Screen\n           A server may provide several independent \"screens\", which\n\
    \           typically have physically independent monitors.  This would\n    \
    \       be the expected configuration when there is only a single\n          \
    \ keyboard and pointer shared among the screens.\n   Server\n           The \"\
    server\" provides the basic windowing mechanism.  It\n           handles IPC connections\
    \ from clients, demultipexes graphics\n           requests onto the screens, and\
    \ multiplexes input back to the\n           appropriate clients.\n   Server grabbing\n\
    \           The server can be \"grabbed\" by a single client for exclusive\n \
    \          use. This prevents processing of any requests from other\n        \
    \   client connections until the grab is complete.  This is\n           typically\
    \ only a transient state for such things as\n           rubber-banding and pop-up\
    \ menus, or to execute requests\n           indivisibly.\n   Sibling\n       \
    \    Children of the same parent window are known as \"sibling\"\n           windows.\n\
    \   Stacking order\n           Sibling windows may \"stack\" on top of each other.\
    \  Windows\n           above both obscure and occlude lower windows.  This is\n\
    \           similar to paper on a desk. The relationship between\n           sibling\
    \ windows is known as the \"stacking order\".\n   Stipple\n           A \"stipple\
    \ pattern\" is a bitmap that is used to tile a\n           region to serve as\
    \ an additional clip mask for a fill\n           operation with the foreground\
    \ color.\n   Tile\n           A pixmap can be replicated in two dimensions to\
    \ \"tile\"\n           a region.  The pixmap itself is also known as a \"tile\"\
    .\n   Timestamp\n           A time value, expressed in milliseconds, typically\
    \ since\n           the last server reset.  Timestamp values wrap around (after\n\
    \           about 49.7 days). The server, given its current time is\n        \
    \   represented by timestamp T, always interprets timestamps\n           from\
    \ clients by treating half of the timestamp space as\n           being earlier\
    \ in time than T, and half of the timestamp\n           space as being later in\
    \ time than T.  One timestamp value\n           (named CurrentTime) is never generated\
    \ by the server;\n           this value is reserved for use in requests to represent\n\
    \           the current server time.\n   Type\n           A type is an arbitrary\
    \ atom used to identify the\n           interpretation of property data.  Types\
    \ are completely\n           uninterpreted by the server; they are solely for\
    \ the\n           benefit of clients.\n   Unviewable\n           A window is \"\
    unviewable\" if it is mapped but some ancestor is\n           unmapped.\n   Viewable\n\
    \           A window is \"viewable\" if it and all of its ancestors are\n    \
    \       mapped.  This does not imply that any portion of the window\n        \
    \   is actually visible.\n   Visible\n           A region of a window is \"visible\"\
    \ if someone looking at the\n           screen can actually \"see\" it:  the window\
    \ is viewable and the\n           region is not occluded by any other window.\n\
    \   Window gravity\n           When windows are resized, subwindows may be repositioned\n\
    \           automatically relative to some position in the window.  This\n   \
    \        attraction of a subwindow to some part of its parent is known\n     \
    \      as \"window gravity\".\n   Window manager\n           Manipulation of windows\
    \ on the screen, and much of the user\n           interface (policy) is typically\
    \ provided by a \"window\n           manager\" client.\n   XYFormat\n        \
    \   The data for a pixmap is said to be in \"XYFormat\" if it is\n           organized\
    \ as a set of bitmaps representing individual bit\n           planes.\n   ZFormat\n\
    \           The data for a pixmap is said to be in \"ZFormat\" if it is\n    \
    \       organized as a set of pixel values in scanline order.\n"
- title: SECTION 2.  PROTOCOL FORMATS
  contents:
  - 'SECTION 2.  PROTOCOL FORMATS

    '
- title: Request Format
  contents:
  - "Request Format\n   Every request contains an 8-bit \"major\" opcode, and a 16-bit\
    \ length\n   field expressed in units of 4 bytes.  Every request consists of 4\n\
    \   bytes of header containing the major opcode, the length field, and a\n   data\
    \ byte) followed by zero or more additional bytes of data; the\n   length field\
    \ defines the total length of the request, including the\n   header.  The length\
    \ field in a request must equal the minimum length\n   required to contain the\
    \ request; if the specified length is smaller\n   or larger than the required\
    \ length, an error is enerated.  Unused\n   bytes in a request are not required\
    \ to be zero.  Major opcodes 128\n   through 255 are reserved for extensions.\
    \  Extensions are intended\n   to contain multiple requests, so extension requests\
    \ typically have\n   an additional minor opcode encoded in the \"spare\" data\
    \ byte in the\n   request header, but the placement and interpretation of this\
    \ minor\n   opcode, and all other fields in extension requests, are not defined\n\
    \   by the core protocol. Every request is implicitly assigned a sequence\n  \
    \ number, starting with one,used in replies, errors, and events.\n"
- title: Reply Format
  contents:
  - "Reply Format\n   Every reply contains a 32-bit length field expressed in units\
    \ of 4\n   bytes. Every reply consists of 32 bytes, followed by zero or more\n\
    \   additional bytes of data, as specified in the length field.  Unused\n   bytes\
    \ within a reply are not guaranteed to be zero.  Every reply\n   also contains\
    \ the least significant 16 bits of the sequence number\n   of the corresponding\
    \ request.\n"
- title: Error Format
  contents:
  - "Error Format\n   Error reports are 32 bytes long.  Every error includes an 8-bit\
    \ error\n   code. Error codes 128 through 255 are reserved for extensions.  Every\n\
    \   error also includes the major and minor opcodes of the failed\n   request,\
    \ and the least significant 16 bits of the sequence number of\n   the request.\
    \  For the following errors (see Section 5), the failing\n   resource id is also\
    \ returned: Colormap, Cursor, Drawable, Font,\n   GContext, IDChoice, Pixmap,\
    \ and Window.  For Atom errors, the failing\n   atom is returned.  For Value errors,\
    \ the failing value is returned.\n   Other core errors return no additional data.\
    \  Unused bytes within\n   an error are not guaranteed to be zero.\n"
- title: Event Format
  contents:
  - "Event Format\n   Events are 32 bytes long.  Unused bytes within an event are\
    \ not\n   guaranteed to be zero.  Every event contains an 8-bit type code.  The\n\
    \   most significant bit in this code is set if the event was generated\n   from\
    \ a SendEvent request. Event codes 64 through 127 are reserved for\n   extensions,\
    \ although the core protocol does not define a mechanism\n   for selecting interest\
    \ in such events. Every core event (with the\n   exception of KeymapNotify) also\
    \ contains the least significant 16\n   bits of the sequence number of the last\
    \ request issued by the client\n   that was (or is currently being) processed\
    \ by the server.\n"
- title: SECTION 3.  SYNTAX
  contents:
  - "SECTION 3.  SYNTAX\n   The syntax {...} encloses a set of alternatives.\n   The\
    \ syntax [...] encloses a set of structure components.\n   In general, TYPEs are\
    \ in upper case and AlternativeValues are\n   capitalized.\n   Requests in Section\
    \ 10 are described in the following format:\n       RequestName\n            \
    \   arg1: type1\n               ...\n               argN: typeN\n           =>\n\
    \               result1: type1\n               ...\n               resultM: typeM\n\
    \               Errors: kind1, ..., kindK\n               Description.\n"
- title: If no => is present in the description, then the request has no
  contents:
  - 'If no => is present in the description, then the request has no

    '
- title: reply (it is asynchronous), although errors may still be reported.
  contents:
  - 'reply (it is asynchronous), although errors may still be reported.

    '
- title: 'Events in Section 12 are described in the following format:'
  contents:
  - "Events in Section 12 are described in the following format:\n    EventName\n\
    \            value1: type1\n            ...\n            valueN: typeN\n     \
    \       Description.\n"
- title: SECTION 4.  COMMON TYPES
  contents:
  - 'SECTION 4.  COMMON TYPES

    '
- title: LISTofFOO
  contents:
  - "LISTofFOO\n   A type name of the form LISTofFOO means a counted list of elements\n\
    \   of type FOO; the size of the length field may vary (it is not\n   necessarily\
    \ the same size as a FOO), in some cases may be implicit,\n   and is not fully\
    \ specified in this document.\n"
- title: BITMASK and LISTofVALUE
  contents:
  - "BITMASK and LISTofVALUE\n   The types BITMASK and LISTofVALUE are somewhat special.\
    \  Various\n   requests contain arguments of the form:\n           value-mask:\
    \ BITMASK\n           value-list: LISTofVALUE\n   used to allow the client to\
    \ specify a subset of a heterogeneous\n   collection of \"optional\" arguments.\
    \  The value-mask specifies which\n   arguments are to be provided; each such\
    \ argument is assigned a unique\n   bit position.  The representation of the BITMASK\
    \ will typically\n   contain more bits than there are defined arguments; unused\
    \ bits in\n   the value-mask must be zero (or the server generates a Value error).\n\
    \   The value-list contains one value for each one bit in the mask, from\n   least\
    \ to most significant bit in the mask.  Each value is represented\n   with 4 bytes,\
    \ but the actual value occupies only the least\n   significant bytes as required;\
    \ the values of the unused bytes do not\n   matter.\n"
- title: Or Types
  contents:
  - "Or Types\n   A type of the form \"T1 or ... or Tn\" means the union of the indicated\n\
    \   types; a single-element type is given as the element without\n   enclosing\
    \ braces.\n"
- title: 'DEVICE: 32-bit id (<class,model,manufacturer,unit> 8 bits each)'
  contents:
  - 'DEVICE: 32-bit id (<class,model,manufacturer,unit> 8 bits each)

    '
- title: 'WINDOW: 32-bit id'
  contents:
  - 'WINDOW: 32-bit id

    '
- title: 'PIXMAP: 32-bit id'
  contents:
  - 'PIXMAP: 32-bit id

    '
- title: 'CURSOR: 32-bit id'
  contents:
  - 'CURSOR: 32-bit id

    '
- title: 'FONT: 32-bit id'
  contents:
  - 'FONT: 32-bit id

    '
- title: 'GCONTEXT: 32-bit id'
  contents:
  - 'GCONTEXT: 32-bit id

    '
- title: 'COLORMAP: 32-bit id'
  contents:
  - 'COLORMAP: 32-bit id

    '
- title: 'DRAWABLE: WINDOW or PIXMAP'
  contents:
  - 'DRAWABLE: WINDOW or PIXMAP

    '
- title: 'ATOM: 32-bit id (top 3 bits guaranteed to be zero)'
  contents:
  - 'ATOM: 32-bit id (top 3 bits guaranteed to be zero)

    '
- title: 'VISUALID: 32-bit id (top 3 bits guaranteed to be zero)'
  contents:
  - 'VISUALID: 32-bit id (top 3 bits guaranteed to be zero)

    '
- title: 'VALUE: 32-bit quantity (used only in LISTofVALUE)'
  contents:
  - 'VALUE: 32-bit quantity (used only in LISTofVALUE)

    '
- title: 'INT8: 8-bit signed integer'
  contents:
  - 'INT8: 8-bit signed integer

    '
- title: 'INT16: 16-bit signed integer'
  contents:
  - 'INT16: 16-bit signed integer

    '
- title: 'INT32: 32-bit signed integer'
  contents:
  - 'INT32: 32-bit signed integer

    '
- title: 'CARD8: 8-bit unsigned integer'
  contents:
  - 'CARD8: 8-bit unsigned integer

    '
- title: 'CARD16: 16-bit unsigned integer'
  contents:
  - 'CARD16: 16-bit unsigned integer

    '
- title: 'CARD32: 32-bit unsigned integer'
  contents:
  - 'CARD32: 32-bit unsigned integer

    '
- title: 'TIMESTAMP: CARD32'
  contents:
  - 'TIMESTAMP: CARD32

    '
- title: 'BITGRAVITY: {Forget, Static,'
  contents:
  - "BITGRAVITY: {Forget, Static,\n             NorthWest, North, NorthEast,\n   \
    \          West, Center, East,\n             SouthWest, South, SouthEast}\n"
- title: 'WINGRAVITY: {Unmap, Static,'
  contents:
  - "WINGRAVITY: {Unmap, Static,\n             NorthWest, North, NorthEast,\n    \
    \         West, Center, East,\n             SouthWest, South, SouthEast}\n"
- title: 'BOOL: {True, False}'
  contents:
  - 'BOOL: {True, False}

    '
- title: 'EVENT: {KeyPress, KeyRelease,'
  contents:
  - "EVENT: {KeyPress, KeyRelease,\n        OwnerGrabButton,\n        ButtonPress,\
    \ ButtonRelease, EnterWindow, LeaveWindow,\n        PointerMotion, PointerMotionHint,\n\
    \        Button1Motion, Button2Motion, Button3Motion,\n        Button4Motion,\
    \ Button5Motion, ButtonMotion\n        Exposure, VisibilityChange,\n        StructureNotify,\
    \ ResizeRedirect,\n        SubstructureNotify, SubstructureRedirect,\n       \
    \ FocusChange,\n        PropertyChange, ColormapChange,\n        KeymapState}\n"
- title: 'POINTEREVENT: {ButtonPress, ButtonRelease, EnterWindow, LeaveWindow,'
  contents:
  - "POINTEREVENT: {ButtonPress, ButtonRelease, EnterWindow, LeaveWindow,\n      \
    \         PointerMotion, PointerMotionHint,\n               Button1Motion, Button2Motion,\
    \ Button3Motion,\n               Button4Motion, Button5Motion, ButtonMotion\n\
    \               KeymapState}\n"
- title: 'DEVICEEVENT: {KeyPress, KeyRelease,'
  contents:
  - "DEVICEEVENT: {KeyPress, KeyRelease,\n              ButtonPress, ButtonRelease,\n\
    \              PointerMotion,\n              Button1Motion, Button2Motion, Button3Motion,\n\
    \              Button4Motion, Button5Motion, ButtonMotion}\n"
- title: 'KEYCODE: CARD8'
  contents:
  - 'KEYCODE: CARD8

    '
- title: 'BUTTON: CARD8'
  contents:
  - 'BUTTON: CARD8

    '
- title: 'KEYMASK: {Shift, CapsLock, Control, Mod1, Mod2, Mod3, Mod4, Mod5}'
  contents:
  - 'KEYMASK: {Shift, CapsLock, Control, Mod1, Mod2, Mod3, Mod4, Mod5}

    '
- title: 'BUTMASK: {Button1, Button2, Button3, Button4, Button5}'
  contents:
  - 'BUTMASK: {Button1, Button2, Button3, Button4, Button5}

    '
- title: 'KEYBUTMASK: KEYMASK or BUTMASK'
  contents:
  - 'KEYBUTMASK: KEYMASK or BUTMASK

    '
- title: 'STRING8: LISTofCARD8'
  contents:
  - 'STRING8: LISTofCARD8

    '
- title: 'STRING16: LISTofCHAR2B'
  contents:
  - 'STRING16: LISTofCHAR2B

    '
- title: 'CHAR2B: [byte1, byte2: CARD8]'
  contents:
  - 'CHAR2B: [byte1, byte2: CARD8]

    '
- title: 'POINT: [x, y: INT16]'
  contents:
  - 'POINT: [x, y: INT16]

    '
- title: 'RECTANGLE: [x, y: INT16,'
  contents:
  - "RECTANGLE: [x, y: INT16,\n            width, height: CARD16]\n"
- title: 'ARC: [x, y: INT16,'
  contents:
  - "ARC: [x, y: INT16,\n      width, height: CARD16,\n      angle1, angle2: INT16]\n"
- title: 'HOST: [family: {Internet, NS, ECMA, Datakit, DECnet}'
  contents:
  - "HOST: [family: {Internet, NS, ECMA, Datakit, DECnet}\n       address: LISTofCARD8]\n\
    \   The [x,y] coordinates of a RECTANGLE specify the upper left corner.\n   The\
    \ primary interpretation of \"large\" characters in a STRING16 is\n   that they\
    \ are composed of two bytes used to index a 2-D matrix;\n   hence the use of CHAR2B\
    \ rather than CARD16.  This corresponds to\n   the JIS/ISO method of indexing\
    \ two-byte characters.  It is expected\n   that most \"large\" fonts will be defined\
    \ with two-byte matrix\n   indexing.  For large fonts constructed with linear\
    \ indexing, a\n   CHAR2B can be interpreted as a 16-bit number by treating byte1\
    \ as\n   the most significant byte; this means that clients should always\n  \
    \ transmit such 16-bit character values most significant byte first,\n   as the\
    \ server will never byte-swap CHAR2B quantities.\n   The length, format, and interpretation\
    \ of a HOST address are specific\n   to the family.\n"
- title: SECTION 5.  ERRORS
  contents:
  - "SECTION 5.  ERRORS\n   In general, when a request terminates with an error, the\
    \ request has\n   no side effects (i.e., there is no partial execution).  The\
    \ only\n   requests for which this is not true are ChangeWindowAttributes,\n \
    \  ChangeGC, PolyText8, PolyText16, FreeColors, StoreColors, and\n   ChangeKeyboardControl.\n\
    \   The following error codes can be returned by the various requests:\n"
- title: Access
  contents:
  - "Access\n           An attempt to grab a key/button combination already grabbed\n\
    \           by another client.\n           An attempt to free a colormap entry\
    \ not allocated by the\n           client.\n           An attempt to store into\
    \ a read-only or an unallocated\n           colormap entry.\n           An attempt\
    \ to modify the access control list from other than\n           the local (or\
    \ otherwise authorized) host.\n           An attempt to select an event type,\
    \ that at most one client\n           can select at a time, when another client\
    \ has already\n           selected it.\n"
- title: Alloc
  contents:
  - "Alloc\n           The server failed to allocate the requested resource.\n   \
    \        Note that this only covers allocation errors at a very coarse\n     \
    \      level, and is not intended to (nor can it in practice hope\n          \
    \ to) cover all cases of a server running out of allocation\n           space\
    \ in the middle of service.\n           The semantics when a server runs out of\
    \ allocation space are\n           left unspecified.\n"
- title: Atom
  contents:
  - "Atom\n           A value for an ATOM argument does not name a defined ATOM.\n"
- title: Colormap
  contents:
  - "Colormap\n           A value for a COLORMAP argument does not name a defined\n\
    \           COLORMAP.\n"
- title: Cursor
  contents:
  - "Cursor\n           A value for a CURSOR argument does not name a defined CURSOR.\n"
- title: Drawable
  contents:
  - "Drawable\n           A value for a DRAWABLE argument does not name a defined\n\
    \           WINDOW or PIXMAP.\n"
- title: Font
  contents:
  - "Font\n           A value for a FONT or <FONT or GCONTEXT> argument does not\n\
    \           name a defined FONT.\n"
- title: GContext
  contents:
  - "GContext\n           A value for a GCONTEXT argument does not name a defined\n\
    \           GCONTEXT.\n"
- title: IDChoice
  contents:
  - "IDChoice\n           The value chosen for a resource identifier is either not\n\
    \           included in the range assigned to the client, or is already\n    \
    \       in use.\n"
- title: Implementation
  contents:
  - "Implementation\n           The server does not implement some aspect of the request.\
    \  A\n           server which generates this error for a core request is\n   \
    \        deficient.  As such, this error is not listed for any of the\n      \
    \     requests, but clients should be prepared to receive such\n           errors,\
    \ and handle or discard them.\n"
- title: Length
  contents:
  - "Length\n           The length of a request is shorter or longer than that\n \
    \          required to minimally contain the arguments.\n"
- title: Match
  contents:
  - "Match\n           An InputOnly window is used as a DRAWABLE.\n           Some\
    \ argument (or pair of arguments) has the correct type and\n           range,\
    \ but fails to \"match\" in some other way required by the\n           request.\n"
- title: Name
  contents:
  - "Name\n           A font or color of the specified name does not exist.\n"
- title: Pixmap
  contents:
  - "Pixmap\n           A value for a PIXMAP argument does not name a defined PIXMAP.\n"
- title: Property
  contents:
  - "Property\n           The requested property does not exist for the specified\n\
    \           window.\n"
- title: Request
  contents:
  - "Request\n           The major or minor opcode does not specify a valid request.\n"
- title: Value
  contents:
  - "Value\n           Some numeric value falls outside the range of values accepted\n\
    \           by the request.  Unless a specific range is specified for an\n   \
    \        argument, the full range defined by the argument's type is\n        \
    \   accepted.  Any argument defined as a set of alternatives can\n           generate\
    \ this error.\n"
- title: Window
  contents:
  - "Window\n           A value for a WINDOW argument does not name a defined WINDOW.\n"
- title: 'Note:  the Atom, Colormap, Cursor, Drawable, Font, GContext, Pixmap,'
  contents:
  - 'Note:  the Atom, Colormap, Cursor, Drawable, Font, GContext, Pixmap,

    '
- title: and Window errors are also used when the argument type is extended
  contents:
  - 'and Window errors are also used when the argument type is extended

    '
- title: by union with a set of fixed alternatives, e.g.,<Window or
  contents:
  - 'by union with a set of fixed alternatives, e.g.,<Window or

    '
- title: PointerRoot or None>.
  contents:
  - 'PointerRoot or None>.

    '
- title: SECTION 6.  KEYBOARDS
  contents:
  - "SECTION 6.  KEYBOARDS\n   Keycodes are always in the inclusive range [8,255].\n\
    \   For keyboards with both left-side and right-side modifier keys (e.g.,\n  \
    \ Shift and Control), the mask bits in the protocol always define the\n   OR of\
    \ the keys. If electronically distinguishable, they can have\n   separate up/down\
    \ events generated, and clients that want to\n   distinguish can track the individual\
    \ states manually.\n   <As part of the core we need to define a universal association\n\
    \   between keycaps and keycodes.  A keycap is the graphical information\n   imprinted\
    \ on a keyboard key, e.g., \"$ 4\", \"T\", \"+ =\".>\n"
- title: SECTION 7.  POINTERS
  contents:
  - "SECTION 7.  POINTERS\n   Buttons are always numbered starting with one.\n"
- title: SECTION 8.  PREDEFINED ATOMS
  contents:
  - "SECTION 8.  PREDEFINED ATOMS\n   Predefined atoms are not strictly necessary,\
    \ and may not be useful in\n   all environments, but will eliminate many InternAtom\
    \ requests in most\n   applications.  The core protocol imposes no semantics on\
    \ these names,\n   except as they are used in FONTPROP structures (see QueryFont).\
    \  Note\n   that upper/lower case matters.\n      BITMAP               ICON_SIZE\
    \               RGB_GREEN_MAP\n      COMMAND              ITALIC_ANGLE       \
    \     RGB_RED_MAP\n      COPYRIGHT            MAX_SPACE               SECONDARY\n\
    \      CUT_BUFFER0          MIN_SPACE               SIZE_HINTS\n      CUT_BUFFER1\
    \          NAME                    STRIKEOUT_ASCENT\n      CUT_BUFFER2       \
    \   NORMAL_HINTS            STRIKEOUT_DESCENT\n      CUT_BUFFER3          NORM_SPACE\
    \              STRING\n      CUT_BUFFER4          PIXMAP                  SUBSCRIPT_X\n\
    \      CUT_BUFFER5          POINT_SIZE              SUBSCRIPT_Y\n      CUT_BUFFER6\
    \          PRIMARY                 SUPERSCRIPT_X\n      CUT_BUFFER7          QUAD_WIDTH\
    \              SUPERSCRIPT_Y\n      DEFAULT_CHAR         RECTANGLE           \
    \    UNDERLINE_POSITION\n      END_SPACE            RESIZE_HINT             UNDERLINE_THICKNESS\n\
    \      FACE_NAME            RESOLUTION              WEIGHT\n      FAMILY_NAME\
    \          RGB_BEST_MAP            WINDOW\n      FONT_ASCENT          RGB_BLUE_MAP\
    \            WM_HINTS\n      FONT_DESCENT         RGB_COLOR_MAP           X_HEIGHT\n\
    \      ICON                 RGB_DEFAULT_MAP         ZOOM_HINTS\n      ICON_NAME\n"
- title: SECTION 9.  CONNECTION SETUP
  contents:
  - "SECTION 9.  CONNECTION SETUP\n   For remote clients, the X protocol can be built\
    \ on top of any\n   reliable byte stream.  For TCP connections, displays on a\
    \ given host\n   a numbered starting from 0, and the server for display N listens\
    \ and\n   accepts connections on port 6000+N.\n   The client must send an initial\
    \ byte of data to identify the byte\n   order to be employed.  The value of the\
    \ byte must be octal 102 or\n   154.  The value 102 (ASCII uppercase B) means\
    \ values are transmitted\n   most significant byte first, and value 154 (ASCII\
    \ lowercase l) means\n   values are transmitted least significant byte first.\
    \  Except where\n   explicitly noted in the protocol, all 16-bit and 32-bit quantities\n\
    \   sent by the client must be transmitted with this byte order, and all\n   16-bit\
    \ and 32-bit quantities returned by the server will be\n   transmitted with this\
    \ byte order.\n   Following the byte-order byte, the following information is\
    \ sent by\n   the client at connection setup:\n           protocol-major-version:\
    \ CARD16\n           protocol-minor-version: CARD16\n           authorization-protocol-name:\
    \ STRING8\n           authorization-protocol-data: STRING8\n           The version\
    \ numbers indicate what version of the protocol the\n           client expects\
    \ the server to implement.  See below for an\n           explanation. The authorization\
    \ name indicates what\n           authorization protocol the client expects the\
    \ server to use,\n           and the data is specific to that protocol. Specification\
    \ of\n           valid authorization mechanisms is not part of the core X\n  \
    \         protocol.  It is hoped that eventually one authorization\n         \
    \  protocol will be agreed upon.  In the mean time, a server\n           that\
    \ implements a different protocol than the client expects,\n           or a server\
    \ that only implements the host-based mechanism,\n           will simply ignore\
    \ this information.\n   Received by the client at connection setup:\n        \
    \   success: BOOL\n           protocol-major-version: CARD16\n           protocol-minor-version:\
    \ CARD16\n           length: CARD16\n           Length is the amount of additional\
    \ data to follow, in units\n           of 4 bytes. The version numbers are an\
    \ escape hatch in case\n           future revisions of the protocol are necessary.\
    \  In general,\n           the major version would increment for incompatible\
    \ changes,\n           and the minor version would increment for small upward\n\
    \           compatible changes.  Barring changes, the major version\n        \
    \   will be eleven, and the minor version will be zero.  The\n           protocol\
    \ version numbers returned indicate the protocol the\n           server actually\
    \ supports.  This might not equal the version\n           sent by the client.\
    \  The server can (but need not) refuse\n           connections from clients that\
    \ offer a different version\n           than the server supports.  A server can\
    \ (but need not)\n           support more than one version simultaneously.\n \
    \  Additional data received if authorization fails:\n           reason: STRING8\n\
    \   Additional data received if authorization is accepted:\n           vendor:\
    \ STRING8\n           release-number: CARD32\n           resource-id-base, resource-id-mask:\
    \ CARD32\n           image-byte-order: {LSBFirst, MSBFirst}\n           bitmap-format-scanline-unit:\
    \ {8, 16, 32}\n           bitmap-format-scanline-pad: {8, 16, 32}\n          \
    \ bitmap-format-bit-order: {LeastSignificant, MostSignificant}\n           pixmap-formats:\
    \ LISTofFORMAT\n           roots: LISTofSCREEN\n           keyboard: DEVICE\n\
    \           pointer: DEVICE\n           motion-buffer-size: CARD32\n         \
    \  maximum-request-length: CARD16\n           where\n             FORMAT: [depth:\
    \ CARD8,\n                      bits-per-pixel: {4, 8, 16, 24, 32}\n         \
    \             scanline-pad: {8, 16, 32}]\n             SCREEN: [root: WINDOW\n\
    \                      device: DEVICE\n                      width-in-pixels,\
    \ height-in-pixels: CARD16\n                      width-in-millimeters,height-in-millimeters:CARD16\n\
    \                      allowed-depths: LISTofDEPTH\n                      root-depth:\
    \ CARD8\n                      root-visual: VISUALID\n                      default-colormap:\
    \ COLORMAP\n                      white-pixel, black-pixel: CARD32\n         \
    \             min-installed-maps, max-installed-maps: CARD16\n               \
    \       backing-stores: {Never, WhenMapped, Always}\n                      save-unders:\
    \ BOOL\n                      current-input-masks: SETofEVENT]\n            DEPTH:\
    \ [depth: CARD8\n                      visuals: LISTofVISUALTYPE]\n          \
    \  VISUALTYPE: [visual-id: VISUALID\n                         class: {StaticGray,\
    \ StaticColor,\n                                 TrueColor,GrayScale, PseudoColor,\n\
    \                                 DirectColor}\n                             \
    \    red-mask, green-mask, blue-mask: CARD32\n                               \
    \  bits-per-rgb-value: CARD8\n                                 colormap-entries:\
    \ CARD16]\n   Per server information:\n   The vendor string gives some indentification\
    \ of the owner of the\n   server implementation.  The semantics of the release-number\
    \ is\n   controlled by the vendor.\n   The resource-id-mask contains a single\
    \ contiguous set of bits (at\n   least 18); the client allocates resource ids\
    \ by choosing a value\n   with (only) some subset of these bits set, and ORing\
    \ it with\n   resource-id-base.  Only values constructed in this way can be\n\
    \   used to name newly created resources over this connection.\n   Resource ids\
    \ never have the top 3 bits set.  The client is not\n   restricted to linear or\
    \ contiguous allocation of resource ids.\n   Once an id has been freed, it can\
    \ be reused, but this should not\n   be necessary. An id must be unique with respect\
    \ to the ids of\n   all other resources, not just other resources of the same\
    \ type.\n   Although the server is in general responsible for byte swapping\n\
    \   data to match the client, images are always transmitted and\n   received in\
    \ formats (including byte order) specified by the\n   server.  The byte order\
    \ for images is given by image-byte-order,\n   and applies to each scanline unit\
    \ in XYFormat (bitmap) format,\n   and to each pixel value in ZFormat.\n   A bitmap\
    \ is represented in scanline order.  Each scanline is padded\n   to a multiple\
    \ of bits as given by bitmap-format-scanline-pad.  The\n   pad bits are of arbitrary\
    \ value.  The scanline is quantized in\n   multiples of bits as given by bitmap-format-scanline-unit.\
    \  Within\n   each unit, the leftmost bit in the bitmap is either the least or\n\
    \   most significant bit in the unit, as given by\n   bitmap-format-bit-order.\
    \  If a pixmap is represented in XYFormat,\n   each plane is represented as a\
    \ bitmap, and the planes appear from\n   most to least significant in bit order.\n\
    \   For each pixmap depth supported by some screen, pixmap-formats lists\n   the\
    \ ZFormat used to represent images of that depth.  In ZFormat, the\n   pixels\
    \ are in scanline order, left to right within a scanline.  The\n   number of bits\
    \ used to hold each pixel is given by bits-per-pixel,\n   and may be larger than\
    \ strictly required by the depth.  When the\n   bits-per-pixel is 4, the order\
    \ of nibbles in the byte is the same as\n   the image byte-order.  Each scanline\
    \ is padded to a multiple of bits\n   as given by scanline-pad.\n   How a pointing\
    \ device roams the screens is up to the server\n   implementation, and is transparent\
    \ to the protocol.  No geometry\n   among screens is defined.\n   The server may\
    \ retain the recent history of pointer motion, and to a\n   finer granularity\
    \ than is reported by MotionNotify events.  Such\n   history is available via\
    \ the GetPointerMotions request.  The\n   approximate size of the history buffer\
    \ is given by\n   motion-buffer-size.\n   Maximum-request-length specifies the\
    \ maximum length of a request, in\n   4-byte units, accepted by the server; i.e.,\
    \ this is the maximum value\n   that can appear in the length field of a request.\
    \  Requests larger\n   than this generate a Length error, and the server will\
    \ read and\n   simply discard the entire request.  Maximum-request-length will\n\
    \   always be at least 4096 (i.e., requests of length up to and including\n  \
    \ 16384 bytes will be accepted by all servers).\n   Per screen information:\n\
    \   The allowed-depths specifies what pixmap and window depths are\n   supported.\
    \  Pixmaps are supported for each depth listed, and windows\n   of that depth\
    \ are supported if at least one visual type is listed for\n   the depth.  A pixmap\
    \ depth of one is always supported and listed, but\n   windows of depth one might\
    \ not be supported.  A depth of zero is\n   never listed, but zero-depth InputOnly\
    \ windows are always supported.\n   Root-depth and root-visual specify the depth\
    \ and visual type of the\n   root window.  Width-in-pixels and height-in-pixels\
    \ specify the size\n   of the root window (which cannot be changed).  The class\
    \ of the root\n   window is always InputOutput.  Width-in-millimeters and\n  \
    \ height-in-millimeters can be used to determine the physical size and\n   the\
    \ aspect ratio.\n   The default-colormap is the one initially associated with\
    \ the root\n   window.  Clients with minimal color requirements creating windows\
    \ of\n   the same depth as the root may want to allocate from this map by\n  \
    \ default.\n   Black-pixel and white-pixel can be used in implementing a\n   \"\
    monochrome\" application.  These pixel values are for permanently\n   allocated\
    \ entries in the default-colormap; the actual RGB values may\n   be settable on\
    \ some screens.\n   The border of the root window is initially a pixmap filled\
    \ with the\n   black-pixel.  The initial background of the root window is a pixmap\n\
    \   filled with some unspecified two-color pattern using black-pixel and\n   white-pixel.\n\
    \   Min-installed-maps specifies the number of maps that can be\n   guaranteed\
    \ to installed simultaneously (with InstallColormap),\n   regardless of the number\
    \ of entries allocated in each map.\n   Max-installed-maps specifies the maximum\
    \ number of maps that might\n   possibly be installed simultaneously, depending\
    \ on their\n   allocations. For the typical case of a single hardware colormap,\n\
    \   both values will be one.\n   Backing-stores indicates when the server supports\
    \ backing stores for\n   this screen, although it may be storage limited in the\
    \ number of\n   windows it can support at once.  If save-unders is True, then\
    \ the a\n   server can support the save-under mode in CreateWindow and\n   ChangeWindowAttributes,\
    \ although again it may be storage limited.\n   The current-input-events is what\
    \ GetWindowAttributes would return for\n   the all-event-masks for the root window.\n\
    \   Per visual-type information:\n   A given visual type might be listed for more\
    \ than one depth, or for\n   more than one screen.\n   For PseudoColor, a pixel\
    \ value indexes a colormap to produce\n   independent RGB values; the RGB values\
    \ can be changed dynamically.\n   GrayScale is treated the same as PseudoColor,\
    \ except which primary\n   drives the screen is undefined, so the client should\
    \ always store\n   the same value for red, green, and blue in colormaps.  For\n\
    \   DirectColor, a pixel value is decomposed into separate RGB\n   subfields,\
    \ and each subfield separately indexes the colormap for\n   the corresponding\
    \ value; The RGB values can be changed dynamically.\n   TrueColor is treated the\
    \ same as DirectColor, except the colormap\n   has predefined read-only RGB values,\
    \ which are server-dependent,\n   but provide (near-)linear ramps in each primary.\
    \  StaticColor is\n   treated the same as PseudoColor, except the colormap has\n\
    \   predefined read-only RGB values, which are server-dependent.\n   StaticGray\
    \ is treated the same as StaticColor, except the red,\n   green, and blue values\
    \ are equal for any single pixel value,\n   resulting in shades of gray.  StaticGray\
    \ with a two-entry colormap\n   can be thought of as \"monochrome\".\n   The red-mask,\
    \ green-mask, and blue-mask are only defined for\n   DirectColor and TrueColor;\
    \ each has one contiguous set of bits, with\n   no intersections.\n   The bits-per-rgb-value\
    \ specifies the log base 2 of the approximate\n   number of distinct color values\
    \ (individually) of red, green, and\n   blue. Actual RGB values are always passed\
    \ in the protocol within a\n   16-bit spectrum.\n   The colormap-entries defines\
    \ the number of available colormap entries\n   in a newly created colormap.  For\
    \ DirectColor and TrueColor, this\n   will usually be the size of an individual\
    \ pixel subfield.\n"
- title: SECTION 10.  REQUESTS
  contents:
  - 'SECTION 10.  REQUESTS

    '
- title: CreateWindow
  contents:
  - "CreateWindow\n           wid, parent: WINDOW\n           class: {InputOutput,\
    \ InputOnly, CopyFromParent}\n           depth: CARD8\n           visual: VISUALID\
    \ or CopyFromParent\n           x, y: INT16\n           width, height, border-width:\
    \ CARD16\n           value-mask: BITMASK\n           value-list: LISTofVALUE\n\
    \           Errors: IDChoice, Window, Pixmap, Colormap, Cursor, Match,\n     \
    \      Value, Alloc\n           Creates an unmapped window, and assigns the identifier\
    \ wid\n           to it.\n           A class of CopyFromParent means the class\
    \ is taken from the\n           parent.  A depth of zero for class InputOutput\
    \ or\n           CopyFromParent means the depth is taken from the parent.\n  \
    \         A visual of CopyFromParent means the visual type is taken\n        \
    \   from the parent.  For class InputOutput, the visual type\n           and depth\
    \ must be a combination supported for the screen\n           (else a Match error);\
    \ the depth need not be the same as the\n           parent, but the parent must\
    \ not be of class InputOnly (else\n           a Match error).  For class InputOnly,\
    \ the depth must be\n           zero (else a Match error), and the visual must\
    \ be one\n           supported for the screen (else a Match error), but the\n\
    \           parent may have any depth and class.\n           The server essentially\
    \ acts as if InputOnly windows do not\n           exist for the purposes of graphics\
    \ requests, exposure\n           processing, and VisibilityNotify events.  An\
    \ InputOnly window\n           cannot be used as a drawable (as a source or destination\
    \ for\n           graphics requests).  InputOnly and InputOutput windows act\n\
    \           identically in other respects (properties, grabs, input\n        \
    \   control, and so on).\n           The window is placed on top in the stacking\
    \ order with\n           respect to siblings.  The x and y coordinates are relative\n\
    \           to the parent's origin, and specify the position of the upper\n  \
    \         left outer corner of the window (not the origin).  The width\n     \
    \      and height specify the inside size, not including the border,\n       \
    \    and must be non-zero.  The border-width for an InputOnly\n           window\
    \ must be zero (else a Match error).\n           The value-mask and value-list\
    \ specify attributes of the\n           window that are to be explicitly initialized.\
    \  The possible\n           values are:\n               background-pixmap: PIXMAP\
    \ or None or ParentRelative\n               background-pixel: CARD32\n       \
    \        border-pixmap: PIXMAP or CopyFromParent\n               border-pixel:\
    \ CARD32\n               bit-gravity: BITGRAVITY\n               win-gravity:\
    \ WINGRAVITY\n               backing-store: {NotUseful, WhenMapped, Always}\n\
    \               backing-bit-planes: CARD32\n               backing-pixel: CARD32\n\
    \               save-under: BOOL\n               event-mask: SETofEVENT\n    \
    \           do-not-propagate-mask: SETofDEVICEEVENT\n               override-redirect:\
    \ BOOL\n               colormap: COLORMAP or CopyFromParent\n               cursor:\
    \ CURSOR or None\n           The default values, when attributes are not explicitly\n\
    \           initialized, are:\n               background-pixmap: None\n      \
    \         border-pixmap: CopyFromParent\n               bit-gravity: Forget\n\
    \               win-gravity: NorthWest\n               backing-store: NotUseful\n\
    \               backing-bit-planes: all ones\n               backing-pixel: zero\n\
    \               save-under: False\n               event-mask: {} (empty set)\n\
    \               do-not-propagate-mask: {} (empty set)\n               override-redirect:\
    \ False\n               colormap: CopyFromParent\n               cursor: None\n\
    \           Only the following attributes are defined for InputOnly\n        \
    \   windows: win-gravity, event-mask, do-not-propagate-mask,\n           and cursor.\
    \  It is a Match error to specify any other\n           attributes for InputOnly\
    \ windows.\n           If background-pixmap is given, it overrides the default\n\
    \           background-pixel.  The background pixmap and the window must\n   \
    \        have the same root and the same depth (else a Match error).\n       \
    \    Any size pixmap can be used, although some sizes may be\n           faster\
    \ than others.  If background None is specifed, the\n           window has no\
    \ defined background.  If background\n           ParentRelative is specified,\
    \ the parent's background is\n           used, but the window must have the same\
    \ depth as the parent\n           (else a Match error); if the parent has background\
    \ None,\n           then the window will also have background None.  A copy\n\
    \           of the parent's background is not made; the parent's\n           background\
    \ is reexamined each time the window background is\n           required.  If background-pixel\
    \ is given, it overrides the\n           default and any background-pixmap given,\
    \ and a pixmap of\n           undefined size filled with background-pixel is used\
    \ for the\n           background.  For a  ParentRelative background, the\n   \
    \        background tile origin always aligns with the parent's\n           background\
    \ tile origin; otherwise the background tile\n           origin is always the\
    \ window origin.\n           When regions of the window are exposed and the server\
    \ has\n           not retained the contents, the server automatically tiles\n\
    \           the regions with the window's background unless the window\n     \
    \      has a background of None, in which case the previous screen\n         \
    \  contents are simply left in place. Exposure events are then\n           generated\
    \ for the regions, even if the  background is None.\n           The border tile\
    \ origin is always the same as the background\n           tile origin.  If border-pixmap\
    \ is given, it overrides the\n           default border-pixel.  The border pixmap\
    \ and the window must\n           have the same root and the same depth (else\
    \ a Match error).\n           Any size pixmap can be used, although some sizes\
    \ may faster\n           than others.  If CopyFromParent is given, the parent's\
    \ border\n           pixmap is copied (subsequent changes to the parent do not\n\
    \           affect the child), but the window must have the same depth\n     \
    \      as the parent (else a Match error).  If border-pixel is\n           given,\
    \ it overrides the default and any border-pixmap given,\n           and a pixmap\
    \ of undefined size filled with border-pixel is\n           used for the border.\n\
    \           Output to a window is always clipped to the inside of the\n      \
    \     window, so that the border is never affected.\n           The bit-gravity\
    \ defines which region of the window should be\n           retained if the window\
    \ is resized, and win-gravity defines\n           how the window should be repositioned\
    \ if the parent is\n           resized; see ConfigureWindow.\n           A backing-store\
    \ of WhenMapped advises the server that\n           maintaining contents of obscured\
    \ regions when the window\n           is mapped would be beneficial.  A backing-store\
    \ of Always\n           advises the server that maintaining contents even when\
    \ the\n           window is unmapped would be beneficial.  Note that, even if\n\
    \           the window is larger than its parent, the server should\n        \
    \   maintain complete contents, not just the region within the\n           parent\
    \ boundaries.  If the server maintains contents,\n           Exposure events will\
    \ not be generated, but the server may\n           stop maintaining contents at\
    \ any time.  A value of NotUseful\n           advises the server that maintaining\
    \ contents is unnecessary,\n           although a server may still choose to maintain\
    \ contents.\n           Backing-bit-planes indicates (with one bits) which bit\n\
    \           planes of the window hold dynamic data that must be preserved\n  \
    \         in backing-stores. Backing-pixel specifies what value to use\n     \
    \      in planes not covered by backing-bit-planes.  The server is\n         \
    \  free to only save the specified bit planes in the\n           backing-store,\
    \ and regenerate the remaining planes with the\n           specified pixel value.\n\
    \           If save-under is True, the server is advised that, when\n        \
    \   this window is mapped, saving the contents of windows it\n           obscures\
    \ would be beneficial.\n           The event-mask defines which events the client\
    \ is interested\n           in for this window (or, for some event types, inferiors\
    \ of\n           the window).  The do-not-propagate-mask defines which events\n\
    \           should not be propagated to ancestor windows when no client\n    \
    \       has the event type selected in this window.\n           Override-redirect\
    \ specifies whether map and configure\n           request on this window should\
    \ override a SubstructureRedirect\n           on the parent, typically to inform\
    \ a window manager not to\n           tamper with the window.\n           The\
    \ colormap specifies the colormap, that best reflects the\n           \"true\"\
    \ colors of the window.  Servers capable of supporting\n           hardware colormaps\
    \ may use this information, and window\n           managers may use it for InstallColormap\
    \ requests.  The\n           colormap must have the same visual type as the window\n\
    \           (else a match error). If CopyFromParent is specified, the\n      \
    \     parents's colormap is copied (subsequent changes to the\n           parent\
    \ do not affect the child), but the window must have\n           the same visual\
    \ type as the parent (else a Match error) an\n           the parent must not have\
    \ a colormap of None (else a Match\n           error).\n           If a cursor\
    \ is specified, it will be used whenever the\n           pointer is in the window.\
    \  If None is specified, the\n           parent's cursor will be used when the\
    \ pointer is in the\n           window, and any change in the parent's cursor\
    \ will\n           cause an immediate change in the display cursor.\n        \
    \   This request generates a CreateNotify event.\n           The background and\
    \ border pixmaps and the cursor may be\n           freed immediately if no further\
    \ explicit references to\n           them are to be made.\n           Subsequent\
    \ drawing into the background or border pixmap has\n           an undefined effect\
    \ on the window state; the server might or\n           might not make a copy of\
    \ the pixmap.\n"
- title: ChangeWindowAttributes
  contents:
  - "ChangeWindowAttributes\n          window: WINDOW\n          value-mask: BITMASK\n\
    \          value-list: LISTofVALUE\n          Errors: Window, Pixmap, Colormap,\
    \ Cursor, Match, Value,\n                  Access\n          The value-mask and\
    \ value-list specify which attributes are\n          to be changed.  The values\
    \ and restrictions are the same\n          as for CreateWindow.\n          Changing\
    \ the background does not cause the window contents\n          to be changed.\
    \  Setting the border, or changing the\n          background such that border\
    \ tile origin changes, causes the\n          border to be repainted. Changing\
    \ the background of a root\n          window to None or ParentRelative restores\
    \ the default\n          background pixmap. Changing the border of a root window\
    \ to\n          CopyFromParent restores the default border pixmap.\n         \
    \  Changing the back-store of an obsecured window to\n           WhenMapped or\
    \ Always, or changing the backing-bit-planes,\n           backing-pixel, or save-under\
    \ of a mapped window, may have\n           no immediate effect.\n           Multiple\
    \ clients can select input on the same window; their\n           event-masks are\
    \ disjoint.  When an event is generated it\n           will be reported to all\
    \ interested clients.  However, at\n           most one client at a time can select\
    \ for\n           SubstructureRedirect, at most one client at a time can\n   \
    \        select for ResizeRedirectr, and at most one client at a\n           time\
    \ can select for ButtonPress.\n           There is only one do-not-propagate-mask\
    \ for a window, not\n           one per client.\n           Changing the colormap\
    \ of a window (i.e., defining a new map,\n           not changing the contents\
    \ of the existing map) generates a\n           ColormapNorify event.  Changing\
    \ the colormap os a visible\n           window may have no immediate effect on\
    \ the screen; see\n           InstallColormap.\n           Changing the cursor\
    \ of a root window to None restores the\n           default cursor.\n        \
    \   The order in which attributes are verified and altered is\n           server\
    \ dependent. If an error is generated, a subset of\n           the attributes\
    \ may have been altered.\n"
- title: GetWindowAttributes
  contents:
  - "GetWindowAttributes\n           window: WINDOW\n       =>\n           visual:\
    \ VISUALID\n           class: {InputOutput, InputOnly}\n           bit-gravity:\
    \ BITGRAVITY\n           win-gravity: WINGRAVITY\n           backing-store: {NotUseful,\
    \ WhenMapped, Always}\n           backing-bit-planes: CARD32\n           backing-pixel:\
    \ CARD32\n           save-under: BOOL\n           colormap: COLORMAP or None\n\
    \           map-is-installed: BOOL\n           map-state: {Unmapped, Unviewable,\
    \ Viewable}\n           all-event-masks, your-event-mask: SETofEVENT\n       \
    \    do-not-propagate-mask: SETofDEVICEEVENT\n           override-redirect: BOOL\n\
    \           Errors: Window\n           Returns current attributes of the window.\
    \  All-event-masks\n           is the inclusive-OR of all event masks selected\
    \ on the\n           window by clients.  Your-event-mask is the event mask\n \
    \          selected by the querying client.\n"
- title: DestroyWindow
  contents:
  - "DestroyWindow\n           window: WINDOW\n           Errors: Window\n       \
    \    If the argument window is mapped, an UnmapWindow request is\n           performed\
    \ automatically.  The window and all inferiors are\n           then destroyed,\
    \ and a DestroyNotify event is generated for\n           each window, in order\
    \ from the argument window downwards,\n           with unspecified order among\
    \ siblings at each level.\n           Normal exposure processing on formerly obscured\
    \ windows is\n           performed.\n           If the window is a root window,\
    \ this request has no effect.\n"
- title: DestroySubwindows
  contents:
  - "DestroySubwindows\n           window: WINDOW\n           Errors: Window\n   \
    \        Performs a DestroyWindow on all children of the window, in\n        \
    \   bottom to top stacking order.\n"
- title: ChangeSaveSet
  contents:
  - "ChangeSaveSet\n           window: WINDOW\n           mode: {Insert, Delete}\n\
    \           Errors: Window, Match, Value\n           Adds or removes the specified\
    \ window from the client's\n           \"save-set\".  The window must have been\
    \ created by some other\n           client (else a Match error).  The use of the\
    \ save-set is\n           described in Section 11.\n           Windows are removed\
    \ automatically from the save-set by the\n           server when they are destroyed.\n"
- title: ReparentWindow
  contents:
  - "ReparentWindow\n           window, parent: WINDOW\n           x, y: INT16\n \
    \          Errors: Window, Match\n           If the window is mapped, an UnmapWindow\
    \ request is\n           performed automatically first.  The window is then removed\n\
    \           from its current position in the hierarchy, and is inserted\n    \
    \       as a child of the specified parent.  The x and y coordinates\n       \
    \    are relative to the parent's origin, and specify the new\n           position\
    \ of the upper left outer corner of the window.  The\n           window is placed\
    \ on top in the stacking order with respect\n           to siblings.  A ReparentNotify\
    \ event is then generated.  The\n           override-redirect attribute of the\
    \ window is passed on in\n           this event; a value of True indicates that\
    \ a window manager\n           should not tamper with this window.  Finally, if\
    \ the window\n           was originally mapped, a MapWindow request is performed\n\
    \           automatically.\n           Normal exposure processing on formerly\
    \ obscured windows is\n           performed. The server might not generate exposure\
    \ events for\n           regions from the initial unmap that are immediately obscured\n\
    \           by the final map.\n           A Match error is generated if the new\
    \ parent is not on the\n           same screen as the old parent, or if the new\
    \ parent is the\n           window itself or an inferior of the window, or if\
    \ the window\n           has a ParentRelative background and the new parent is\
    \ not\n           the same depth as the window.\n"
- title: MapWindow
  contents:
  - "MapWindow\n           window: WINDOW\n           Errors: Window\n           If\
    \ the window is already mapped, this request has no effect.\n           If the\
    \ override-redirect attribute of the window is False and\n           some other\
    \ client has selected SubstructureRedirect on the\n           parent, then a MapRequest\
    \ event is generated, but the window\n           remains unmapped. Otherwise,\
    \ the window is mapped and a\n           MapNotify event is generated.\n     \
    \      If the window is now viewable and its contents had been\n           discarded,\
    \ then the window is tiled with its background (if\n           no background is\
    \ defined the existing screen contents are not\n           altered) and one or\
    \ more exposure events are generated.  If a\n           backing-store has been\
    \ maintained while the window was\n           unmapped, no exposure events are\
    \ generated. If a\n           backing-store will now be maintained, a full-window\
    \ exposure\n           is always generated; otherwise only visible regions may\
    \ be\n           reported. Similar tiling and exposure take place for any\n  \
    \         newly viewable inferiors.\n"
- title: MapSubwindows
  contents:
  - "MapSubwindows\n           window: WINDOW\n           Errors: Window\n       \
    \    Performs a MapWindow request on all unmapped children of the\n          \
    \ window, in top to bottom stacking order.\n"
- title: UnmapWindow
  contents:
  - "UnmapWindow\n           window: WINDOW\n           Errors: Window\n         \
    \  If the window is already unmapped, this request has no\n           effect.\
    \ Otherwise, the window is unmapped and an UnmapNotify\n           event is generated.\
    \  Normal exposure processing on formerly\n           obscured windows is performed.\n"
- title: UnmapSubwindows
  contents:
  - "UnmapSubwindows\n           window: WINDOW\n           Errors: Window\n     \
    \      Performs an UnmapWindow request on all mapped children of the\n       \
    \    window, in bottom to top stacking order.\n"
- title: ConfigureWindow
  contents:
  - "ConfigureWindow\n           window: WINDOW\n           value-mask: BITMASK\n\
    \           value-list: LISTofVALUE\n           Errors: Window, Match, Value\n\
    \           Changes the configuration of the window.  The value-mask and\n   \
    \        value-list specify which values are to be given.  The\n           possible\
    \ values are:\n               x: INT16\n               y: INT16\n            \
    \   width: CARD16\n               height: CARD16\n               border-width:\
    \ CARD16\n               sibling: WINDOW\n               stack-mode: {Above, Below,\
    \ TopIf, BottomIf, Opposite}\n           The x and y coordinates are relative\
    \ to the parent's origin,\n           and specify the position of the upper left\
    \ outer corner of\n           the window. The width and height specify the inside\
    \ size,\n           not including the border, and must be non-zero.  It is a\n\
    \           Match error to attempt to make the border-width of an\n          \
    \ InputOnly window non-zero.\n           If the override-redirect attribute of\
    \ the window is False\n           and some other client has selected SubstructureRedirect\
    \ on\n           the parent, then a ConfigureRequest event is generated, and\n\
    \           no further processing is performed.  Otherwise, the following\n  \
    \         is performed.\n           If some other client has selected ResizeRedirect\
    \ on the\n           window and the width or height of the window is being\n \
    \          changed, then a ResizeRequest event is generated, and the\n       \
    \    current width and height are used instead in the following.\n           The\
    \ geometry of the window is changed as specified and the\n           window is\
    \ restacked among siblings as described below, and a\n           ConfigureNotify\
    \ event is generated.  If the width or height\n           of the window has actually\
    \ changed, then children of the\n           window are affected as described below.\n\
    \           Exposure processing is performed on formerly obscured\n          \
    \ windows.\n           Changing the width or height of the window causes its\n\
    \           contents to be moved or lost, depending on the bit-gravity of\n  \
    \         the window, and causes children to be reconfigured, depending\n    \
    \       on their win-gravity.  For a change of width and height of W\n       \
    \    and H, we define the [x, y] pairs:\n               NorthWest: [0, 0]\n  \
    \             North: [W/2, 0]\n               NorthEast: [W, 0]\n            \
    \   West: [0, H/2]\n               Center: [W/2, H/2]\n               East: [W,\
    \ H/2]\n               SouthWest: [0, H]\n               South: [W/2, H]\n   \
    \            SouthEast: [W, H]\n           When a window with one of these bit-gravities\
    \ is resized, the\n           corresponding pair defines the change in position\
    \ of each\n           pixel in the window.  When a window with one of these\n\
    \           win-gravities has its parent window resized, the\n           corresponding\
    \ pair defines the change in position of the\n           window within the parent.\
    \  When a window is so repositioned,\n           a GravityNotify event is generated.\n\
    \           A gravity of Static indicates that the contents or origin\n      \
    \     should not move relative to the origin of the root window. If\n        \
    \   the change in size of the window is coupled with a change in\n           position\
    \ of [X, Y], then for bit-gravity the change in\n           position of each pixel\
    \ is [-X, -Y], and for win-gravity the\n           change in position of a child\
    \ when its parent is so resized\n           is [-X, -Y].  Note that Static gravity\
    \ still only takes\n           effect when the width or height of the window is\
    \ changed, not\n           when the window is simply moved.\n           A bit-gravity\
    \ of Forget indicates that the window contents\n           are always discarded\
    \ after a size change; the window is tiled\n           with its background (if\
    \ no background is defined, the\n           existing screen contents are not altered)\
    \ and one or more\n           exposure events are generated.  A server may also\
    \ ignore the\n           specified bit-gravity and use Forget instead.\n     \
    \      A win-gravity of Unmap is like NorthWest, but the child is\n          \
    \ also unmapped when the parent is resized, and an UnmapNotify\n           event\
    \ is generated.\n           If a sibling and a stack-mode is specified, the window\
    \ is\n           restacked as follows:\n               Above:  window is placed\
    \ just above sibling\n               Below:  window is placed just below sibling\n\
    \               TopIf:  if sibling occludes window, then window is placed\n  \
    \                     at the top of the stack\n               BottomIf:  if window\
    \ occludes sibling, then window is\n                          placed at the bottom\
    \ of the stack\n               Opposite:  if sibling occludes window, then window\
    \ is\n                          placed at the top of the stack, else if window\n\
    \                          occludes sibling, then window is placed at the\n  \
    \                        bottom of the stack\n           If a stack-mode is specified\
    \ but no sibling is specified, the\n           window is restacked as follows:\n\
    \               Above:  window is placed at the top of the stack\n           \
    \    Below:  window is placed at the bottom of the stack\n               TopIf:\
    \  if any sibling occludes window, then window is\n                       placed\
    \ at the top of the stack\n               BottomIf: if window occludes any sibling,\
    \ then window is\n                         placed at the bottom of the stack\n\
    \               Opposite: if any sibling occludes window, then window is\n   \
    \                      placed at the top of the stack, else if window\n      \
    \                   occludes any sibling, then window is placed at\n         \
    \                the bottom of the stack\n           It is a Match error if a\
    \ sibling is specified without a\n           stack-mode, or if the window is not\
    \ actually a sibling.\n           Note that the computations for BottomIf, TopIf,\
    \ and Opposite\n           are performed with respect to the window's final geometry\n\
    \           (as controlled by the other arguments to the request), not\n     \
    \      its initial geometry.\n"
- title: CirculateWindow
  contents:
  - "CirculateWindow\n           window: WINDOW\n           direction: {RaiseLowest,\
    \ LowerHighest}\n           Errors: Window, Value\n           If some other client\
    \ has selected SubstructureRedirect on the\n           window, then a CirculateRequest\
    \ event is generated, and no\n           further processing is performed.  Otherwise,\
    \ the following is\n           performed, and then a CirculateNotify event is\
    \ generated if\n           the window is actually restacked.\n           For RaiseLowest,\
    \ raises the lowest mapped child (if any) that\n           is occluded by another\
    \ child to the top of the stack.  For\n           LowerHighest, lowers the highest\
    \ mapped child (if any) that\n           occludes another child to the bottom\
    \ of the stack.  Exposure\n           processing is performed on formerly obscured\
    \ windows.\n"
- title: GetGeometry
  contents:
  - "GetGeometry\n           drawable: DRAWABLE\n       =>\n           root: WINDOW\n\
    \           depth: CARD8\n           x, y: INT16\n           width, height, border-width:\
    \ CARD16\n           Errors: Drawable\n           Returns the root and (current)\
    \ geometry of the drawable.\n           Depth is the number of bits per pixel\
    \ for the object.\n           X, y, and border-width will always be zero for pixmaps.\n\
    \           For a window, the x and y coordinates specify the upper\n        \
    \   left outer corner of the window relative to its parent's\n           origin,\
    \ and the width and height specify the inside size\n           (not including\
    \ the border).\n           It is legal to pass an InputOnly window as a drawable\
    \ to\n           this request.\n"
- title: QueryTree
  contents:
  - "QueryTree\n           window: WINDOW\n       =>\n           root: WINDOW\n  \
    \         parent: WINDOW or None\n           children: LISTofWINDOW\n        \
    \   Errors: Window\n           Returns the root, the parent, and children of the\
    \ window.\n           The children are listed in bottom-to-top stacking order.\n"
- title: InternAtom
  contents:
  - "InternAtom\n           name: STRING8\n           only-if-exists: BOOL\n     \
    \  =>\n           atom: ATOM or None\n           Errors: Value, Alloc\n      \
    \     Returns the atom for the given name.  If only-if-exists is\n           False,\
    \ then the atom is created if it does not exist.  The\n           string should\
    \ use the ASCII encoding, and upper/lower case\n           matters.\n        \
    \   The lifetime of an atom is not tied to the interning client.\n           Atoms\
    \ remained defined until server reset (see Section 11).\n"
- title: GetAtomName
  contents:
  - "GetAtomName\n           atom: ATOM\n       =>\n           name: STRING8\n   \
    \        Errors: Atom\n           Returns the name for the given atom.\n"
- title: ChangeProperty
  contents:
  - "ChangeProperty\n           window: WINDOW\n           property, type: ATOM\n\
    \           format: {8, 16, 32}\n           mode: {Replace, Prepend, Append}\n\
    \           data: LISTofINT8 or LISTofINT16 or LISTofINT32\n           Errors:\
    \ Window, Atom, Value, Match, Alloc\n           Alters the property for the specified\
    \ window.  The type is\n           uninterpreted by the server.  The format specifies\
    \ whether\n           the data should be viewed as a list of 8-bit, 16-bit, or\n\
    \           32-bit quantities, so that the server can correctly\n           byte-swap\
    \ as necessary.\n           If mode is Replace, the previous property value is\
    \ discarded.\n           If the mode is Prepend or Append, then the type and format\n\
    \           must match the existing property value (else a Match error);\n   \
    \        if the property is undefined, it is treated as defined with\n       \
    \    the correct type and format with zero-length data.  For\n           Prepend,\
    \ the data is tacked on to the beginning of the\n           existing data, and\
    \ for Append it is tacked on to the\n           end of the existing data.\n  \
    \         Generates a PropertyNotify event on the window.\n           The lifetime\
    \ of a property is not tied to the storing client.\n           Properties remain\
    \ until explicitly deleted, or the window is\n           destroyed, or until server\
    \ reset (see Section 11).\n           The maximum size of a property is server\
    \ dependent.\n"
- title: DeleteProperty
  contents:
  - "DeleteProperty\n           window: WINDOW\n           property: ATOM\n      \
    \     Errors: Window, Atom\n           Deletes the property from the specified\
    \ window if the\n           property exists. Generates a PropertyNotify event\
    \ on the\n           window unless the property does not exist.\n"
- title: GetProperty
  contents:
  - "GetProperty\n           window: WINDOW\n           property: ATOM\n         \
    \  type: ATOM or AnyPropertyType\n           long-offset, long-length: CARD32\n\
    \           delete: BOOL\n       =>\n           type: ATOM\n           format:\
    \ {8, 16, 32}\n           bytes-after: CARD32\n           value: LISTofINT8 or\
    \ LISTofINT16 or LISTofINT32\n           Errors: Window, Atom, Property, Match,\
    \ Value\n           If the specified property does not exist for the specifed\n\
    \           window, a Property error is generated.  Otherwise, if type\n     \
    \      AnyPropertyType is specified, (part of) the property is\n           returned\
    \ regardless of its type; if a type is specified,\n           (part of) the property\
    \ is returned only if its type equals\n           the specified type (else a Match\
    \ error).  The actual type\n           and format of the property are returned.\n\
    \           Define the following values:\n                   N = actual length\
    \ of the stored property in bytes\n                       (even if the format\
    \ is 16 or 32)\n                   I = 4 * long-offset\n                   T =\
    \ N - I\n                   L = MINIMUM(T, 4 * long-length)\n                \
    \   A = N - (I + L)\n           The returned value starts at byte index I in the\
    \ property\n           (indexing from 0), and its length in bytes is L.  It is\
    \ a\n           Value error if long-offset is given such that L is negative.\n\
    \           The value of bytes-after is A, giving the number of trailing\n   \
    \        unread bytes in the stored property.\n           If delete is True and\
    \ bytes-after is zero, the property is\n           also deleted from the window\
    \ and a PropertyNotify event is\n           generated on the window.\n"
- title: RotateProperties
  contents:
  - "RotateProperties\n           window: WINDOW\n           delta: INT8\n       \
    \    properties: LISTofATOM\n           Errors: Window, Atom, Match\n        \
    \   If the property names in the list are viewed as being\n           numbered\
    \ starting from zero, and there are N property names\n           in the list,\
    \ then the value associated with property name I\n           becomes the value\
    \ associated with property name (I + delta)\n           mod N, for all I from\
    \ zero to N - 1.  The effect is to rotate\n           the states by delta places\
    \ around the virtual ring of\n           property names (right for positive delta,\
    \ left for negative\n           delta).\n           A PropertyNotify event is\
    \ generated for each property, in the\n           order listed.\n           If\
    \ an atom occurs more than once in the list or no property\n           with that\
    \ name is defined for the window, a Match error is\n           generated.  If\
    \ an Atom or Match error is generated, no\n           properties are changed.\n"
- title: ListProperties
  contents:
  - "ListProperties\n           window: WINDOW\n       =>\n           atoms: LISTofATOM\n\
    \           Errors: Window\n           Returns the atoms of properties currently\
    \ defined on the\n           window.\n"
- title: SetSelectionOwner
  contents:
  - "SetSelectionOwner\n           selection: ATOM\n           owner: WINDOW or None\n\
    \           time: TIMESTAMP or CurrentTime\n           Error: Atom, Window\n \
    \          Changes the owner and last-change time of the specifed\n          \
    \ selection.  The request has no effect if the specified time\n           is earlier\
    \ than the current last-change time of the specified\n           selection or\
    \ is later than the current server time;\n           otherwise, the last-change\
    \ time is set to the specified time,\n           with CurrentTime replaced by\
    \ the current server time.\n           If the new owner is not the same as the\
    \ current owner of the\n           selection, and the current owner is a window,\
    \ then the\n           current owner is sent a SelectClear event.\n          \
    \ If the owner of a selection is a window, and the window is\n           later\
    \ destroyed, the owner of the selection automatically\n           reverts to None,\
    \ but the last-change time is not affected.\n           The selection atom is\
    \ uninterpreted by the server.\n           Selections are global to the server.\n"
- title: GetSelectionOwner
  contents:
  - "GetSelectionOwner\n           selection: ATOM\n       =>\n           owner: WINDOW\
    \ or None\n           Errors: Atom\n           Returns the current owner of the\
    \ specified selection, if any.\n"
- title: ConvertSelection
  contents:
  - "ConvertSelection\n           selection, target: ATOM\n           property: ATOM\
    \ or None\n           requestor: WINDOW\n           time: TIMESTAMP or CurrentTime\n\
    \           Error: Atom, Window\n           If the specified selection is owned\
    \ by a window, the server\n           sends a SelectionRequest event to the owner.\
    \  If no owner for\n           the specified selection exists, the server generates\
    \ a\n           SelectionNotify event to the requestor with property None.\n \
    \          The arguments are passed on unchanged in either event.\n"
- title: SendEvent
  contents:
  - "SendEvent\n           destination: WINDOW or PointerWindow or InputFocus\n  \
    \         propagate: BOOL\n           event-mask: SETofEVENT\n           event:\
    \ <normal-event-format>\n           Errors: Window, Value\n           If PointerWindow\
    \ is specified, destination is replaced with\n           the window that the pointer\
    \ is in.  If InputFocus is\n           specified, then if the focus window contains\
    \ the pointer,\n           destination is replaced with the window that the pointer\
    \ is\n           in, and otherwise destination is replaced with the focus\n  \
    \         window.\n           If propagate is False, then the event is sent to\
    \ every client\n           selecting on destination any of the event types in\n\
    \           event-mask.\n           If propagate is True and no clients have selected\
    \ on\n           destination any of the event types in event-mask, then\n    \
    \       destination is replaced with the closest ancestor of\n           destination\
    \ for which some client has selected a type in\n           event-mask and no intervening\
    \ window has that type in its\n           do-not-propagate-mask.  If no such window\
    \ exists, or if the\n           window is an ancestor of the focus window and\
    \ InputFocus was\n           originally specified sent to any clients. Otherwise,\
    \ the\n           event is reported to every client selecting on the final\n \
    \          destination any of the types specified in event-mask.\n           The\
    \ event code must be one of the core events, or one of\n           the events\
    \ defined by an extension, so that the server can\n           correctly byte swap\
    \ the contents as necessary.  The\n           contents of the event are otherwise\
    \ unaltered and unchecked\n           by the server except to force on the most\
    \ significant bit\n           of the event code.\n           Active grabs are\
    \ ignored for this request.\n"
- title: GrabPointer
  contents:
  - "GrabPointer\n           grab-window: WINDOW\n           owner-events: BOOL\n\
    \           event-mask: SETofPOINTEREVENT\n           pointer-mode, keyboard-mode:\
    \ {Synchronous, Asynchronous}\n           confine-to: WINDOW or None\n       \
    \    cursor: CURSOR or None\n           time: TIMESTAMP or CurrentTime\n     \
    \  =>\n           status: {Success, AlreadyGrabbed, Frozen, InvalidTime,\n   \
    \                 NotViewable}\n           Errors: Cursor, Window, Value\n   \
    \        Actively grabs control of the pointer.  Further pointer\n           events\
    \ are only reported to the grabbing client.  The\n           request overrides\
    \ any active pointer grab by this client.\n           Event-mask is always augmented\
    \ to include ButtonPress and\n           ButtonRelease.  If owner-events is False,\
    \ all generated\n           pointer events are reported with respect to grab-window,\n\
    \           and are only reported if selected by event-mask.  If\n           owner-events\
    \ is True, then if a generated pointer event\n           would normally be reported\
    \ to this client, it is reported\n           normally; otherwise the event is\
    \ reported with respect to\n           the grab-window, and is only reported if\
    \ selected by\n           event-mask.  For either value of owner-events, unreported\n\
    \           events are simply discarded.\n           Pointer-mode controls further\
    \ processing of pointer events,\n           and keyboard-mode controls further\
    \ processing of keyboard\n           events.  If the mode is Asynchronous, event\
    \ processing\n           continues normally; if the device is currently frozen\
    \ by\n           this client, then processing of events for the device is\n  \
    \         resumed.  If the mode is Synchronous, the device (as seen\n        \
    \   via the protocol) appears to freeze, and no further events\n           for\
    \ that device are generated by the server until the\n           grabbing client\
    \ issues a releasing AllowEvents request.\n           Actual device changes are\
    \ not lost while the device is\n           frozen; they are simply queued for\
    \ later processing.\n           If a cursor is specified, then it is displayed\
    \ regardless\n           of what window the pointer is in.  If no cursor is\n\
    \           specified, then when the pointer is in grab-window or one\n      \
    \     of its subwindows, the normal cursor for that window is\n           displayed,\
    \ and otherwise the cursor for grab-window is\n           displayed.\n       \
    \    If a confine-to window is specified, then the pointer\n           will be\
    \ restricted to stay contained in that window.\n           The confine-to  window\
    \ need have no relationship to the\n           grab-window.  If the pointer is\
    \ not initially in the\n           confine-to window, then it is warped automatically\
    \ to\n           the closest edge (and enter/leave events generated\n        \
    \   normally) just  before the grab activates.  If the\n           confine-to\
    \ window is subsequently reconfigured, the\n           pointer will be warped\
    \ automatically as necessary to keep\n           it contained in the window.\n\
    \           This request generates EnterNotify and LeaveNotify events.\n     \
    \      The request fails with status AlreadyGrabbed if the\n           pointer\
    \ is actively grabbed by some other client.  The\n           request fails with\
    \ status Frozen if the pointer is frozen\n           by an active grab of another\
    \ client.  The request fails\n           with status NotViewable if grab-window\
    \ or\n           confine-to window is not viewable.  The request fails with\n\
    \           status InvalidTime if the specified time is earlier than\n       \
    \    the last-pointer-grab time or later than the current\n           server time;\
    \ otherwise the last-pointer-grab time is set\n           to the specified time,\
    \ with CurrentTime replaced by the\n           current server time.\n"
- title: UngrabPointer
  contents:
  - "UngrabPointer\n           time: TIMESTAMP or CurrentTime\n           Releases\
    \ the pointer if this client has it actively\n           grabbed (from either\
    \ GrabPointer or GrabButton or from a\n           normal button press), and releases\
    \ any queued events. The\n           request has no effect if the specified time\
    \ is earlier\n           than the last-pointer-grab time or is later than the\n\
    \           current server time.\n           This request generates EnterNotify\
    \ and LeaveNotify events.\n           An UngrabPointer is performed automatically\
    \ if the event\n           window or confine-to window for an active pointer grab\n\
    \           becomes not viewable.\n"
- title: GrabButton
  contents:
  - "GrabButton\n           modifiers: SETofKEYMASK or AnyModifier\n           button:\
    \ BUTTON or AnyButton\n           grab-window: WINDOW\n           owner-events:\
    \ BOOL\n           event-mask: SETofPOINTEREVENT\n           pointer-mode, keyboard-mode:\
    \ {Synchronous, Asynchronous}\n           confine-to: WINDOW or None\n       \
    \    cursor: CURSOR or None\n           Errors: Cursor, Window, Value, Access\n\
    \           This request establishes a passive grab.  In the future,\n       \
    \    if the specified button is pressed when the specified\n           modifier\
    \ keys are down (and no other buttons or modifier\n           keys are down),\
    \ and grab-window contains the pointer,\n           and the confine-to window\
    \ (if any) is viewable, and these\n           constraints are not satisfied for\
    \ any ancestor, then the\n           pointer is actively grabbed as described\
    \ in GrabPointer,\n           the last-pointer-grab time is set to the time at\
    \ which\n           the button was pressed (as transmitted in the ButtonPress\n\
    \           event), and the ButtonPress event is reported.  The\n           interpretation\
    \ of the remaining arguments is as for\n           GrabPointer.  The active grab\
    \ is terminated automatically\n           when all buttons are released (independent\
    \ of the state\n           of modifier keys).\n           A modifiers of AnyModifier\
    \ is equivalent to issuing the\n           request for all possible modifier combinations.\
    \  A\n           button of AnyButton is equivalent to issuing the request\n  \
    \         for all possible buttons.\n           An Access error is generated if\
    \ some other client has\n           already issued a GrabButton with the same\
    \ button/key\n           combination on the same window. When using AnyModifier\n\
    \           or AnyButton, the request fails completely (no grabs are\n       \
    \    established) if there is a combination.  The request has\n           no effect\
    \ on an active grab.\n"
- title: UngrabButton
  contents:
  - "UngrabButton\n           modifiers: SETofKEYMASK or AnyModifier\n           button:\
    \ BUTTON or AnyButton\n           grab-window: WINDOW\n           Errors: Window\n\
    \           Releases the passive button/key combination on the\n           specified\
    \ window if it was grabbed by this client. A\n           modifiers of AnyModifier\
    \ is equivalent to issuing the\n           request for all possible modifier combinations.\
    \  A\n           button of AnyButton is equivalent to issuing the request\n  \
    \         for all possible buttons. Has no effect on an active\n           grab.\n"
- title: ChangeActivePointerGrab
  contents:
  - "ChangeActivePointerGrab\n           event-mask: SETofPOINTEREVENT\n         \
    \  cursor: CURSOR or None\n           time: TIMESTAMP or CurrentTime\n       \
    \    Errors: Cursor\n           Changes the specified dynamic parameters if the\
    \ pointer\n           is actively grabbed by the client and the specified time\n\
    \           is no earlier than the last-pointer-grab time and no\n           later\
    \ than the current server time.  The interpretation\n           of event-mask\
    \ and cursor are as in GrabPointer.  The\n           event-mask is always augmented\
    \ to include ButtonPress\n           and ButtonRelease.  Has no effect on the\
    \ passive\n           parameters of a GrabButton.\n"
- title: GrabKeyboard
  contents:
  - "GrabKeyboard\n           grab-window: WINDOW\n           owner-events: BOOL\n\
    \           pointer-mode, keyboard-mode: {Synchronous, Asynchronous}\n       \
    \    time: TIMESTAMP or CurrentTime\n       =>\n           status: {Success, AlreadyGrabbed,\
    \ Frozen, InvalidTime,\n                    NotViewable}\n           Errors: Window,\
    \ Value\n           Actively grabs control of the keyboard.  Further key\n   \
    \        events are reported only to the grabbing client.  The\n           request\
    \ overrides any active keyboard grab by this\n           client.\n           If\
    \ owner-events is False, all generated key events are\n           reported with\
    \ respect to grab-window.  If owner-events is\n           True, then if a generated\
    \ key event would normally be\n           reported to this client, it is reported\
    \ normally;\n           otherwise the event is reported with respect to the\n\
    \           grab-window.  Both KeyPress and KeyRelease events are\n          \
    \ always reported, independent of any event selection made\n           by the\
    \ client.\n           Pointer-mode controls further processing of pointer\n  \
    \         events, and keyboard-mode controls further processing of\n         \
    \  keyboard events.  If the mode is Asynchronous, event\n           processing\
    \ continues normally; if the device is currently\n           frozen by this client,\
    \ then processing of events for the\n           device is resumed.  If the mode\
    \ is Synchronous, the\n           device (as seen via the protocol) appears to\
    \ freeze, and\n           no further events for that device are generated by the\n\
    \           server until the grabbing client issues a releasing\n           AllowEvents\
    \ request.  Actual device changes are not lost\n           while the device is\
    \ frozen; they are simply queued for\n           later processing.\n         \
    \  This request generates FocusIn and FocusOut events.\n           The request\
    \ fails with status AlreadyGrabbed if the\n           keyboard is actively grabbed\
    \ by some other client.  The\n           request fails with status Frozen if the\
    \ keyboard is\n           frozen by an active grab of another client. The request\n\
    \           fails with status NotViewable if grab-window is not\n           viewable.\
    \  The request fails with status InvalidTime if\n           the specified time\
    \ is earlier than the last-keyboard-grab\n           time or later than the current\
    \ server time; otherwise the\n           last-keyboard-grab time is set to the\
    \ specified time,\n           with CurrentTime replaced by the current server\
    \ time.\n"
- title: UngrabKeyboard
  contents:
  - "UngrabKeyboard\n           time: TIMESTAMP or CurrentTime\n           Releases\
    \ the keyboard if this client has it actively\n           grabbed (from either\
    \ GrabKeyboard or GrabKey), and\n           releases any queued events.  The request\
    \ has no effect\n           if the specified time is earlier than the\n      \
    \     last-keyboard-grab time or is later than the current\n           server\
    \ time.\n           This request generates FocusIn and FocusOut events.\n    \
    \       An UngrabKeyboard is performed automatically if the event\n          \
    \ window for an active keyboard grab becomes not viewable.\n"
- title: GrabKey
  contents:
  - "GrabKey\n           key: KEYCODE or AnyNonModifier\n           modifiers: SETofKEYMASK\
    \ or AnyModifier\n           grab-window: WINDOW\n           owner-events: BOOL\n\
    \           pointer-mode, keyboard-mode: {Synchronous, Asynchronous}\n       \
    \    Errors: Window, Value, Access\n           This request establishes a passive\
    \ grab on the keyboard.\n           In the future, if the specified key (which\
    \ can itself be a\n           modifier key) is pressed when the specified modifier\
    \ keys\n           are down (and no other modifier keys are down), and the\n \
    \          KeyPress event would be generated in grab-window or one of\n      \
    \     its inferiors, and these constraints are not satisfied for\n           any\
    \ ancestor, then the keyboard is actively grabbed as\n           described in\
    \ GrabKeyboard, the last-keyboard-grab time is\n           transmitted in set\
    \ to the time at which the key was\n           pressed (as in the KeyPress event),\
    \ and the KeyPress\n           event is reported.  The interpretation of the remaining\n\
    \           arguments is as for GrabKeyboard.  The active grab is\n          \
    \ terminated automatically when the specified key has been\n           released\
    \ (independent of the state of the modifier keys).\n           A modifiers of\
    \ AnyModifier is equivalent to issuing the\n           request for all possible\
    \ modifier combinations.  A key of\n           AnyNonModifier is equivalent to\
    \ issuing the request for\n           all possible non-modifier key codes.\n \
    \          An Access error is generated if some other client has\n           issued\
    \ a GrabKey with the same key combination on the\n           same window. When\
    \ using AnyModifier or AnyNonModifier,\n           the request fails  completely\
    \ (no grabs are established)\n           if there is a conflicting grab for any\
    \ combination.\n"
- title: UngrabKey
  contents:
  - "UngrabKey\n           key: KEYCODE or AnyNonModifier\n           modifiers: SETofKEYMASK\
    \ or AnyModifier\n           grab-window: WINDOW\n           Errors: Window\n\
    \           Releases the key combination on the specified window if it\n     \
    \      was grabbed by this client.  A modifiers of AnyModifier is\n          \
    \ equivalent to issuing the request for all possible\n           modifier combinations.\
    \  A key of AnyNonModifier is\n           equivalent to issuing the request for\
    \ all possible\n           non-modifier key codes.  Has no effect on an active\
    \ grab.\n"
- title: AllowEvents
  contents:
  - "AllowEvents\n           mode: {AsyncPointer, SyncPointer, ReplayPointer,\n  \
    \                AsyncKeyboard, SyncKeyboard, ReplayKeyboard}\n           time:\
    \ TIMESTAMP or CurrentTime\n           Errors: Value\n           Releases some\
    \ queued events if the client has caused a\n           device to freeze.  The\
    \ request has no effect if the\n           specified time is earlier than the\
    \ last-grab time of the\n           most recent active grab for the client, or\
    \ if the\n           specified time is later than the current server time.\n \
    \          For AsyncPointer, if the pointer is frozen by the client,\n       \
    \    pointer event processing continues normally.  If the\n           pointer\
    \ is frozen twice by the client on behalf of two\n           separate grabs, AsyncPointer\
    \ \"thaws\" for both.\n           AsyncPointer has no effect if the pointer is\
    \ not frozen\n           by the client, but the pointer need not be grabbed by\n\
    \           the client.\n           For SyncPointer, if the pointer is frozen\
    \ and actively\n           grabbed by the client, pointer event processing continues\n\
    \           normally until the next ButtonPress or ButtonRelease event\n     \
    \      is reported to the client, at which time the pointer again\n          \
    \ appears to freeze.  However if the reported event causes\n           the pointer\
    \ grab to be released, then the pointer does not\n           freeze.  SyncPointer\
    \ has no effect if the pointer is not\n           frozen by the client, or if\
    \ the pointer is not grabbed by\n           the client.\n           For ReplayPointer,\
    \ if the pointer is actively grabbed by\n           the client and is frozen as\
    \ the result of an event having\n           been sent to the client (either from\
    \ the activation of a\n           GrabButton, or from a previous AllowEvents with\
    \ mode\n           SyncPointer, but not from a GrabPointer), then the pointer\n\
    \           grab is released and that event is completely reprocessed,\n     \
    \      but this time ignoring any passive grabs at or above\n           (towards\
    \ the root) the grab-window of the grab just\n           released.  The request\
    \ has no effect if the pointer is\n           not grabbed by the client, or if\
    \ the pointer is not\n           frozen as the result of an event.\n         \
    \  For AsyncKeyboard, if the keyboard is frozen by the\n           client, keyboard\
    \ event processing continues normally.  If\n           the pointer is frozen twice\
    \ by the client on behalf of\n           two separate grabs, AsyncPointer \"thaws\"\
    \ for both.\n           AsyncKeyboard has no effect if the keyboard is not\n \
    \          frozen by the client, but the keyboard need not be\n           grabbed\
    \ by the client.\n           For SyncKeyboard, if the keyboard is frozen and actively\n\
    \           grabbed by the client, keyboard event processing\n           continues\
    \ normally until the next KeyPress or KeyRelease\n           event is  reported\
    \ to the client, at which time the\n           keyboard again appears to freeze.\
    \  However if the\n           reported event causes the keyboard grab to be released,\n\
    \           then the keyboard does not freeze.  SyncKeyboard has no\n        \
    \   effect if the keyboard is not frozen by the client, or\n           if the\
    \ keyboard is not grabbed by the client.\n           For ReplayKeyboard, if the\
    \ keyboard is actively grabbed\n           by the client and is frozen as the\
    \ result of an event\n           having been sent to the client  (either from\
    \ the\n           activation of a GrabKey, or from a previous AllowEvents\n  \
    \         with mode SyncKeyboard, but not from a GrabKeyboard),\n           then\
    \ the keyboard grab is released and that event is\n           completely reprocessed,\
    \ but this time ignoring any passive\n           grabs at or above (towards the\
    \ root) the grab-window of\n           the grab just released.  The request has\
    \ no effect if the\n           keyboard is not grabbed by the client, or if the\
    \ keyboard\n           is notfrozen as the result of an event.\n           AsyncPointer,\
    \ SyncPointer, and Replay Pointer have no\n           effect on processing of\
    \ keyboard events.  AsyncKeyboard,\n           SyncKeyboard, and ReplayKeyboard\
    \ have no effect on\n           processing of pointer events.\n           It is\
    \ possible for both a pointer grab and a keyboard grab\n           to be active\
    \ simultaneously (by the same or different\n           clients).  If a device\
    \ is frozen on behalf of either grab,\n           no event processing is performed\
    \ for the device.  It is\n           possible for a single device to be frozen\
    \ due to both\n           grabs.  In this case, the freeze must be released on\n\
    \           behalf of both grabs before events can again be\n           processed.\n"
- title: GrabServer
  contents:
  - "GrabServer\n           Disables processing of requests and close-downs on all\n\
    \           other connections (than the one this request arrived on).\n"
- title: UngrabServer
  contents:
  - "UngrabServer\n           Restarts processing of requests and close-downs on other\n\
    \           connections.\n"
- title: QueryPointer
  contents:
  - "QueryPointer\n           window: WINDOW\n       =>\n           root: WINDOW\n\
    \           child: WINDOW or None\n           same-screen: BOOL\n           root-x,\
    \ root-y, win-x, win-y: INT16\n           mask: SETofKEYBUTMASK\n           Errors:\
    \ Window\n           The root window the pointer is currently on, and pointer\n\
    \           coordinates relative to the root's origin, are returned.\n       \
    \    If same-screen is False, then the pointer is not on the\n           same\
    \ screen as the argument window, and child is None and\n           win-x and win-y\
    \ are zero.  If same-screen is True, then\n           win-x and win-y are the\
    \ pointer coordinates relative to\n           the argument window's origin, and\
    \ child is the child\n           containing the pointer, if any.  The current\
    \ state of the\n           modifier keys and the buttons are also returned.\n"
- title: GetMotionEvents
  contents:
  - "GetMotionEvents\n           start, stop: TIMESTAMP or CurrentTime\n         \
    \  window: WINDOW\n       =>\n           events: LISTofTIMECOORD\n           where\n\
    \                   TIMECOORD: {x, y: CARD16\n                               time:\
    \ TIMESTAMP}\n           Error: Window\n           Returns all events in the motion\
    \ history buffer that fall\n           between the specified start and stop times\
    \ (inclusive)\n           and that have coordinates that lie within (including\n\
    \           borders) the specified window at its present placement.\n        \
    \   The x and y coordinates are reported relative to the\n           origin  of\
    \ the window.\n"
- title: TranslateCoordinates
  contents:
  - "TranslateCoordinates\n           src-window, dst-window: WINDOW\n           src-x,\
    \ src-y: INT16\n       =>\n           same-screen: BOOL\n           child: WINDOW\
    \ or None\n           dst-x, dst-y: INT16\n           Errors: Window\n       \
    \    The src-x and src-y coordinates are taken relative to\n           src-window's\
    \ origin, and returned as dst-x and dst-y\n           coordinates relative to\
    \ dst-window's origin.  If\n           same-screen is False, then src-window and\
    \ dst-window are\n           on different screens, and dst-x and dst-y are zero.\
    \  If\n           the coordinates are contained in a mapped child of\n       \
    \    dst-window, then that child is returned.\n"
- title: WarpPointer
  contents:
  - "WarpPointer\n           src-window: WINDOW or None\n           dst-window: WINDOW\n\
    \           src-x, src-y: INT16\n           src-width, src-height: CARD16\n  \
    \         dst-x, dst-y: INT16\n           Errors: Window\n           Moves the\
    \ pointer to [dst-x, dst-y] relative to\n           dst-window's origin. If src-window\
    \ is None, the move is\n           independent of the current pointer position,\
    \ but if a\n           window is specified, the move only takes place if the\n\
    \           pointer is currently contained in a visible portion of\n         \
    \  the specified rectangle of the src-window.\n           The src-x and src-y\
    \ coordinates are relative to\n           src-window's origin.  If src-height\
    \ is zero, it is\n           replaced with the current height of src-window minus\n\
    \           src-y.  If src-width is zero, it is replaced with the\n          \
    \ current width of src-window minus src-x.\n           This request cannot be\
    \ used to move the pointer outside\n           the confine-to window of an active\
    \ pointer grab; an\n           attempt will only move the pointer as far as the\
    \ closest\n           edge of the confine-to window.\n"
- title: SetInputFocus
  contents:
  - "SetInputFocus\n           focus: WINDOW or PointerRoot or None\n           revert-to:\
    \ {Parent, PointerRoot, None}\n           time: TIMESTAMP or CurrentTime\n   \
    \        Errors: Window, Value\n           Changes the input focus and the last-focus-change\
    \ time.\n           The request has no effect if the specified time is earlier\n\
    \           than the current last-focus-change time or is later than\n       \
    \    the current server time; otherwise, the last-focus-change\n           time\
    \ is set to the specified time, with CurrentTime\n           replaced by the current\
    \ server time.\n           If None is specified as the focus, all keyboard events\
    \ are\n           discarded until a new focus window is set.  In this case,\n\
    \           therevert-to argument is ignored.\n           If a window is specified\
    \ as the focus, it becomes the\n           keyboard's focus window.  If a generated\
    \ keyboard event\n           would normally be reported to this window or one\
    \ of its\n           inferiors, the event is reported normally; otherwise, the\n\
    \           event is reported with respect to the focus window.\n           If\
    \ PointerRoot is specified as the focus, the focus\n           window is dynamically\
    \ taken to be the root window of\n           whatever screen the pointer is on\
    \ at each keyboard event.\n           In this case, the revert-to argument is\
    \ ignored.\n           This request generates FocusIn and FocusOut events.\n \
    \          If the focus window becomes not viewable, the new focus\n         \
    \  window depends on the revert-to argument.  If revert-to\n           is Parent,\
    \ the focus reverts to the parent (or the\n           closest viewable ancestor)\
    \ and the new revert-to value is\n           take to be None.  If revert-to is\
    \ PointerRoot or None,\n           the focus reverts to that value.  When the\
    \ focus reverts,\n           FocusIn and FocusOut events are generated, but the\n\
    \           last-focus-change time is not affected.\n"
- title: GetInputFocus
  contents:
  - "GetInputFocus\n           =>\n           focus: WINDOW or PointerRoot or None\n\
    \           revert-to: {Parent, PointerRoot, None}\n           Returns the current\
    \ focus state.\n"
- title: QueryKeymap
  contents:
  - "QueryKeymap\n       =>\n           keys: LISTofCARD8\n           Returns a bit\
    \ vector for the keyboard; each one bit\n           indicates that the corresponding\
    \ key is currently pressed.\n           The vector is represented as 32 bytes.\
    \  Byte N (from 0)\n           contains the bits for keys 8N to 8N+7, with the\
    \ least\n           significant bit in the byte representing key 8N.\n"
- title: OpenFont
  contents:
  - "OpenFont\n           fid: FONT\n           name: STRING8\n           Errors:\
    \ IDChoice, Name, Alloc\n           Loads the specified font, if necessary, and\
    \ associates\n           identifier fid with it.  The font can be used as a source\n\
    \           for any drawable.  The font name should use the ASCII\n          \
    \ encoding, and upper/lower case does not matter.\n"
- title: CloseFont
  contents:
  - "CloseFont\n           font: FONT\n           Errors: Font\n           Deletes\
    \ the association between the resource id and the\n           font.  The font\
    \ itself will be freed when no other\n           resource references it.\n"
- title: QueryFont
  contents:
  - "QueryFont\n           font: FONT or GCONTEXT\n       =>\n           font-info:\
    \ FONTINFO\n           char-infos: LISTofCHARINFO\n           where\n        \
    \           FONTINFO: [draw-direction: {LeftToRight, RightToLeft}\n          \
    \                    min-char-or-byte2,max-char-or-byte2:CARD16\n            \
    \                  min-byte1, max-byte1: CARD8\n                             \
    \ all-chars-exist: BOOL\n                              default-char: CARD16\n\
    \                              min-bounds: CHARINFO\n                        \
    \      max-bounds: CHARINFO\n                              font-ascent: INT16\n\
    \                              font-descent: INT16\n                         \
    \     properties: LISTofFONTPROP]\n                   FONTPROP: [name: ATOM\n\
    \                              value: INT32 or CARD32]\n                   CHARINFO:\
    \ [left-side-bearing: INT16\n                              right-side-bearing:\
    \ INT16\n                              character-width: INT16\n              \
    \                ascent: INT16\n                              descent: INT16\n\
    \                              attributes: CARD16]\n           Errors: Font\n\
    \           Returns logical information about a font.\n           The draw-direction\
    \ is essentially just a hint, indicating\n           whether most char-infos have\
    \ a positive (LeftToRight) or a\n           negative (RightToLeft)  character-width\
    \ metric.  The core\n           protocol defines no support for vertical text.\n\
    \           If min-byte1 and max-byte1 are both zero, then\n           min-char-or-byte2\
    \ specifies the linear character index\n           corresponding to the first\
    \ elementb of char-infos, and\n           max-char-or-byte2 specifies the linear\
    \ character index of\n           the last element.  If either min-byte1 or max-byte1\
    \ are\n           non-zero, then both min-char-or-byte2 and\n           max-char-or-byte2\
    \ will be less than 256, and the two-byte\n           character index values corresponding\
    \ to char-infos element\n           N (counting from 0) are\n               byte1\
    \ = N/D + min-byte1\n               byte2 = N\\D + min-char-or-byte2\n       \
    \    where\n               D = max-char-or-byte2 - min-char-or-byte2 + 1\n   \
    \            / = integer division\n               \\ = integer modulus\n     \
    \      If char-infos has length zero, then min-bounds and\n           max-bounds\
    \ will be identical, and the effective\n           char-infos is one filled with\
    \ this char-info, of length\n               L = D * (max-byte1 - min-byte1 + 1)\n\
    \           That is, all glyphs in the specified linear or matrix\n          \
    \ range have the same information, as given by min-bounds\n           (and max-bounds).\
    \ If all-chars-exist is True, then all\n           characters in char-infos have\
    \ non-zero bounding boxes.\n           The default-char specifies the character\
    \ that will be\n           used when an undefined or non-existent character is\
    \ used.\n           Note that default-char is a CARD16 (not CHAR2B); for a\n \
    \          font using two-byte matrix format, the default-char has\n         \
    \  byte1 in the most significant byte, and byte2 in the\n           least significant\
    \ byte.  If the default-char itself\n           specifies an undefined or non-existent\
    \ character, then\n           no printing is performed for an undefined or non-existent\n\
    \           character.\n           The min-bounds and max-bounds contain the minimum\
    \ and\n           maximum values of each individual CHARINFO component over\n\
    \           all char-infos (ignoring non-existent characters).  The\n        \
    \   bounding box of the font, i.e., the smallest rectangle\n           enclosing\
    \ the shape obtained  by superimposing all\n           characters at the same\
    \ origin [x,y], has  its upper left\n           coordinate at\n              \
    \ [x + min-bounds.left-side-bearing, y - max-bounds.\n                    ascent]\
    \ with a width of\n               max-bounds.right-side-bearing - min-bounds.\n\
    \                    left-side-bearing and a height of\n               max-bounds.ascent\
    \ + max-bounds.descent\n           The font-ascent is the logical extent of the\
    \ font above\n           the baseline, for determining line spacing.  Specific\n\
    \           characters may extend beyond this.  The font-descent is\n        \
    \   the logical extent of the font at or below the baseline,\n           for determining\
    \ line spacing. Specific characters may\n           extend beyond this.  If the\
    \ baseline is at Y-coordinate\n           y, then the logical extent of the font\
    \ is inclusive\n           between the Y-coordinate values (y - font-ascent) and\n\
    \           (y + font-descent - 1).\n           A font is not guaranteed to have\
    \ any properties.  Whether\n           a property value is signed or unsigned\
    \ must be derived\n           from a prior knowledge of the property.  When possible,\n\
    \           fonts should have at least the following properties (note\n      \
    \     that the trailing colon is not part of the name, and that\n           upper/lower\
    \ case matters).\n           MIN_SPACE: CARD32\n              The minimum interword\
    \ spacing, in pixels.\n           NORM_SPACE: CARD32\n               The normal\
    \ interword spacing, in pixels.\n           MAX_SPACE: CARD32\n              \
    \ The maximum interword spacing, in pixels\n           SUBSCRIPT_X: INT32\n  \
    \         SUBSCRIPT_Y: INT32\n               Offsets from the character origin\
    \ where subscripts\n               should begin, in pixels.  If the origin is\
    \ at [x,y],\n               then subscripts should begin at [x + SubscriptX,\n\
    \                   y + SubscriptY].\n           UNDERLINE_POSITION: INT32\n \
    \              Y offset from the baseline to the top of an underline,\n      \
    \         in pixels. If the baseline is Y-coordinate y, then\n               the\
    \ top of the underline is at (y +\n                    UnderlinePosition).\n \
    \          UNDERLINE_THICKNESS: CARD32\n               Thickness of the underline,\
    \ in pixels.\n           STRIKEOUT_ASCENT: INT32\n           STRIKEOUT_DESCENT:\
    \ INT32\n               Vertical extents for boxing or voiding characters, in\n\
    \               pixels.  If the baseline is at Y-coordinate y, then\n        \
    \       the top of the strikeout box is at (y -\n               StrikeoutAscent),\
    \ and the height of the box is\n               (StrikeoutAscent +  StrikeoutDescent).\n\
    \           ITALIC_ANGLE: INT32\n               The angle of characters in the\
    \ font, in degrees\n               scaled by 64, relative to the three-oclock\
    \ position\n               from the character origin, with positive indicating\n\
    \               counterclockwise motion (as in Arc requests).\n           X_HEIGHT:\
    \ INT32\n               \"1 ex\" as in TeX, but expressed in units of pixels.\n\
    \               Often the height of lowercase x.\n           QUAD_WIDTH: INT32\n\
    \               \"1 em\" as in TeX, but expressed in units of pixels.\n      \
    \         Often the width of the digits 0-9.\n           WEIGHT: CARD32\n    \
    \           The weight or boldness of the font, expressed as a\n             \
    \  value between 0 and 1000.\n           POINT_SIZE: CARD32\n               The\
    \ point size, expressed in 1/10ths, of this font at\n               the ideal\
    \ resolution.  There are 72.27 points to the\n               inch.\n         \
    \  RESOLUTION: CARD32\n               The number of pixels per point, expressed\
    \ in 1/100ths,\n               at which this font was created.\n           For\
    \ a character origin at [x,y], the bounding box of a\n           character,i.e.,\
    \ the smallest rectangle enclosing the\n           character's shape,  described\
    \ in terms of CHARINFO\n           components, is a rectangle with its upper left\
    \ corner at\n                   [x + left-side-bearing, y - ascent]\n        \
    \   with a width of\n                   right-side-bearing - left-side-bearing\n\
    \           and a height of\n                   ascent + descent\n           and\
    \ the origin for the next character is defined to be\n                   [x +\
    \ character-width, y]\n           Note that the baseline is logically viewed as\
    \ being just\n           below non-descending characters (when descent is zero,\n\
    \           only pixels with Y-coordinates less than y are drawn),\n         \
    \  and that the origin is logically viewed as being\n           coincident with\
    \ the left edge of a non-kerned character\n           (when left-side-bearing\
    \ is zero, no pixels with\n           X-coordinate less than x are drawn).\n \
    \          Note that CHARINFO metric values can be negative.\n           A non-existent\
    \ character is represented with all CHARINFO\n           components zero.\n  \
    \         The interpretation of the per-character attributes field\n         \
    \  is undefined by the core protocol.\n"
- title: QueryTextExtents
  contents:
  - "QueryTextExtents\n           font: FONT or GCONTEXT\n           items: STRING16\n\
    \       =>\n           draw-direction: {LeftToRight, RightToLeft}\n          \
    \ font-ascent: INT16\n           font-descent: INT16\n           overall-ascent:\
    \ INT16\n           overall-descent: INT16\n           overall-width: INT32\n\
    \           overall-left: INT32\n           overall-right: INT32\n           Errors:\
    \ Font\n           Returns the logical extents of the specified string of\n  \
    \         characters in the specified font.  Draw-direction,\n           font-ascent,\
    \ and font-descent are as described in\n           QueryFont.  Overall-ascent\
    \ is the maximum of the ascent\n           metrics of all characters in the string,\
    \ and\n           overall-descent is the maximum of the descent metrics.\n   \
    \        Overall-width is the sum of the character-width metrics\n           of\
    \ all characters in the string.  For each character in\n           the string,\
    \ let W be the sum of the character-width\n           metrics of all characters\
    \ preceding it in the string,\n           let L be the left-side-bearing metric\
    \ of the character\n           plus W, and let R be the right-side-bearing metric\
    \ of\n           the character plus W.  Overall-left is the minimum L of\n   \
    \        all characters in the string, and overall-right is the\n           maximum\
    \ R.\n           For fonts defined with linear indexing rather than\n        \
    \   two-byte matrix indexing, the server will interpret each\n           CHAR2B\
    \ as a 16-bit number that has been transmitted most\n           significant byte\
    \ first (i.e., byte1 of the CHAR2B is\n           taken as the most significant\
    \ byte).\n           If the font has no defined default-char, then undefined\n\
    \           characters in   the string are taken to have all zero\n          \
    \ metrics.\n"
- title: ListFonts
  contents:
  - "ListFonts\n           pattern: STRING8\n           max-names: CARD16\n      \
    \ =>\n           names: LISTofSTRING8\n           Returns a list of length at\
    \ most max-names, of names of\n           fonts matching the pattern.  The pattern\
    \ should use the\n           ASCII encoding, and upper/lower case does not matter.\n\
    \           In the pattern, the '?' character (octal value 77) will\n        \
    \   match any single character, and the character '*' (octal\n           value\
    \ 52) will match any number of characters.  The\n           returned names are\
    \ in lower case.\n"
- title: ListFontsWithInfo
  contents:
  - "ListFontsWithInfo\n           pattern: STRING8\n           max-names: CARD16\n\
    \       =>\n           fonts: LISTofFONTDATA\n           where\n             \
    \      FONTDATA: [name: STRING8\n                              info: FONTINFO]\n\
    \                   FONTINFO: <same type definition as in QueryFont>\n       \
    \    Like ListFonts, but also returns information about each\n           font.\
    \  The information returned for each font is\n           identical to what QueryFont\
    \ would return (except that the\n           per-character metrics are not returned).\n"
- title: SetFontPath
  contents:
  - "SetFontPath\n           path: LISTofSTRING8\n           Errors: Value\n     \
    \      Defines the search path for font lookup.  There is only one\n         \
    \  search path per server, not one per client.  The\n           interpretation\
    \ of the strings is operating system dependent,\n           but they are intended\
    \ to specify directories to be\n           searched in the order listed.\n   \
    \        Setting the path to the empty list restores the default\n           path\
    \ defined for the server.\n           As a side-effect of executing this request,\
    \ the server\n           is guaranteed to flush all cached information about fonts\n\
    \           for which there currently are no explicit resource ids\n         \
    \  allocated.\n           The meaning of an error from this request is system\n\
    \           specific.\n"
- title: GetFontPath
  contents:
  - "GetFontPath\n       =>\n           path: LISTofSTRING8\n           Returns the\
    \ current search path for fonts.\n"
- title: CreatePixmap
  contents:
  - "CreatePixmap\n           pid: PIXMAP\n           drawable: DRAWABLE\n       \
    \    depth: CARD8\n           width, height: CARD16\n           Errors: IDChoice,\
    \ Drawable, Value, Alloc\n           Creates a pixmap, and assigns the identifier\
    \ pid to it.\n           Width and height must be non-zero.  Depth must be one\
    \ of\n           the depths supported by root of the specified drawable.\n   \
    \        The initial contents of the pixmap are undefined.\n           It is legal\
    \ to pass an InputOnly window as a drawable to\n           this request.\n"
- title: FreePixmap
  contents:
  - "FreePixmap\n           pixmap: PIXMAP\n           Errors: Pixmap\n          \
    \ Deletes the association between the resource id and the\n           pixmap.\
    \  The pixmap storage will be freed when no other\n           resource references\
    \ it.\n"
- title: CreateGC
  contents:
  - "CreateGC\n           cid: GCONTEXT\n           drawable: DRAWABLE\n         \
    \  value-mask: BITMASK\n           value-list: LISTofVALUE\n           Errors:\
    \ IDChoice, Drawable, Pixmap, Font, Match, Value, Alloc\n           Creates a\
    \ graphics context, and assigns the identifier cid to\n           it.  The gcontext\
    \ can be used with any destination drawable\n           having the same root and\
    \ depth as the specified drawable.\n           The value-mask and value-list specify\
    \ which components are to\n           be explicitly initialized.  The context\
    \ components are:\n             alu-function: {Clear, And, AndReverse, Copy, AndInverted,\n\
    \                            Noop, Xor, Or, Nor, Equiv, Invert,\n            \
    \                  OrReverse, CopyInverted, OrInverted,\n                    \
    \          Nand, Set}\n             plane-mask: CARD32\n             foreground:\
    \ CARD32\n             background: CARD32\n             line-width: CARD16\n \
    \            line-style: {Solid, OnOffDash, DoubleDash}\n             cap-style:\
    \ {NotLast, Butt, Round, Projecting}\n             join-style: {Miter, Round,\
    \ Bevel}\n             fill-style: {Solid, Tiled, OpaqueStippled, Stippled}\n\
    \             fill-rule: {EvenOdd, Winding}\n             arc-mode: {Chord, PieSlice}\n\
    \             tile: PIXMAP\n             stipple: PIXMAP\n             tile-stipple-x-origin:\
    \ INT16\n             tile-stipple-y-origin: INT16\n             font: FONT\n\
    \             subwindow-mode: {ClipByChildren, IncludeInferiors}\n           \
    \  graphics-exposures: BOOL\n             clip-x-origin: INT16\n             clip-y-origin:\
    \ INT16\n             clip-mask: PIXMAP or None\n             dash-offset: CARD16\n\
    \             dash-list: CARD8\n           In graphics operations, given a source\
    \ and destination pixel,\n           the result is computed bitwise on corresponding\
    \ bits of the\n           pixels.  That is, a boolean operation is performed in\
    \ each\n           bit plane. The plane-mask restricts the operation to a subset\n\
    \           of planes.  That is, the result is\n           ((src FUNC dst) AND\
    \ plane-mask) OR (dst AND (NOT plane-mask))\n           Range checking is not\
    \ performed on the values for foreground,\n           background, or plane-mask;\
    \ they are simply truncated to the\n           appropriate number of bits.\n \
    \          The meanings of the alu-functions are:\n               Clear      \
    \         0\n               And                 src AND dst\n               AndReverse\
    \          src AND (NOT dst)\n               Copy                src\n       \
    \        AndInverted         (NOT src) AND dst\n               NoOp          \
    \      dst\n               Xor                 src XOR dst\n               Or\
    \                  src OR dst\n               Nor                 (NOT src) AND\
    \ (NOT dst)\n               Equiv               (NOT src) XOR dst\n          \
    \     Invert              NOT dst\n               OrReverse           src OR (NOT\
    \ dst)\n               CopyInverted        NOT src\n               OrInverted\
    \          (NOT src) OR dst\n               NAnd                (NOT src) OR (NOT\
    \ dst)\n               Set                 1\n           Line-width is measured\
    \ in pixels and can be greater than or\n           equal to one (a \"wide\" line)\
    \ or the special value zero (a\n           \"thin\" line).\n           Wide lines\
    \ are drawn centered on the path described by the\n           graphics request.\
    \  Unless otherwise specified by the join or\n           cap style, the bounding\
    \ box of a wide line with endpoints\n           [x1, y1], [x2, y2], and width\
    \ w is a rectangle with vertices\n           at the following real coordinates:\n\
    \           [x1-(w*sn/2), y1+(w*cs/2)], [x1+(w*sn/2), y1-(w*cs/2)],\n        \
    \   [x2-(w*sn/2), y2+(w*cs/2)], [x2+(w*sn/2), y2-(w*cs/2)]\n           where sn\
    \ is the sine of the angle of the line and cs is the\n           cosine of the\
    \ angle of the line.  A pixel is part of the line\n           (and hence drawn)\
    \ if the center of the pixel is fully inside\n           the bounding box (which\
    \ is viewed as having infinitely thin\n           edges).  If the center of the\
    \ pixel is exactly on the\n           bounding box, it is part of the line if\
    \ and only if the\n           interior is immediately to its right (x increasing\n\
    \           direction).  Pixels with centers on a horizontal edge are a\n    \
    \       special case and are part of the line if and only if the\n           interior\
    \ is immediately below (y increasing direction).\n           Note that this description\
    \ is a mathematical model\n           describing the pixels that are drawn for\
    \ a wide line and\n           does not imply that trigonometry is required to\
    \ implement\n           such a model.  Real or fixed point arithmetic is\n   \
    \        recommended for computing the corners of the line endpoints\n       \
    \    for lines greater than one pixel in width.\n           Thin lines (zero line-width)\
    \ are \"one pixel wide\" lines drawn\n           using an unspecified, device\
    \ dependent algorithm (for\n           example, Bresenham). There are only two\
    \ constraints on this\n           algorithm. First, if a line is drawn unclipped\
    \ from [x1,y1]\n           to [x2,y2] and another line is drawn unclipped from\
    \ [x1+dx,\n           y1+dy] to [x2+dx,y2+dy], then a point [x,y] is touched by\n\
    \           drawing the first line if and only if the point [x+dx,y+dy]\n    \
    \       is touched by drawing the second line.  Second, the effective\n      \
    \     set of points comprising a line cannot be affected by\n           clipping;\
    \ that is, a point is touched in a clipped line if\n           and only if the\
    \ point lies inside the clipping region and\n           the point would be touched\
    \ by the line when drawn unclipped.\n           Note that a wide line drawn from\
    \ [x1,y1] to [x2,y2] always\n           draws the same pixels as a wide line drawn\
    \ from [x2,y2] to\n           [x1,y1], not counting cap and join styles, but this\
    \ property\n           is not guaranteed for thin lines.  Also note that \"jags\"\
    \ in\n           adjacent wide lines will always line up properly, but this\n\
    \           property is not guaranteed for thin lines.  A line-width of\n    \
    \       zero differs from a line-width of one in which pixels are\n          \
    \ drawn.  In general, drawing a thin line will be faster than\n           drawing\
    \ a wide line of width one, but thin lines may not mix\n           well aesthetically\
    \ desirable to obtain precise and uniform\n           results across all displays,\
    \ a client should always use a\n           line-width of one, rather than a line-width\
    \ of zero.\n           The line-style defines which segments of a line are drawn:\n\
    \               Solid:  the full path of the line is drawn\n               DoubleDash:\
    \ the full path of the line is drawn, but the\n                           segments\
    \ defined by the even dashes are\n                           filled differently\
    \ than the segments defined\n                           by the odd dashes (see\
    \ fill-style)\n               OnOffDash: only the segments defined by the even\
    \ dashes\n                          are drawn, and cap-style applies to each\n\
    \                          individual segment (except NotLast is treated\n   \
    \                       as Butt for internal caps)\n           The cap-style defines\
    \ how the endpoints of a path are drawn:\n               NotLast: equivalent to\
    \ Butt, except that for a\n                        line-width of zero or one the\
    \ final endpoint is\n                        not drawn\n               Butt: square\
    \ at the endpoint, with no projection beyond\n               Round: a circular\
    \ arc with diameter equal to the\n                      line-width, centered on\
    \ the endpoint; equivalent\n                      to Butt for line-width zero\
    \ or one\n               Projecting: square at the end, but the path continues\n\
    \                           beyond the endpoint for a distance equal to\n    \
    \                       half the line-width; equivalent to Butt for\n        \
    \                   line-width zero or one\n           The join-style defines\
    \ how corners are drawn for wide lines:\n               Miter: the outer edges\
    \ of the two lines extend to meet at\n                      an angle\n       \
    \        Round: a circular arc with diameter equal to the\n                  \
    \    line-width, centered on the joinpoint\n               Bevel: Butt endpoint\
    \ styles, and then the triangular\n                      \"notch\" filled\n  \
    \         The tile/stipple and clip origins are interpreted relative to\n    \
    \       the origin of whatever destination drawable is specified in a\n      \
    \     graphics request.\n           The tile pixmap must have the same root and\
    \ depth as the\n           gcontext (else a Match error).  The stipple pixmap\
    \ must have\n           depth one, and must have the same root as the gcontext\
    \ (else\n           a Match error).  For stipple operations, the stipple pattern\n\
    \           is tiled in a  single plane, and acts as an additional clip\n    \
    \       mask to be ANDed with the clip-mask.  Any size pixmap can be\n       \
    \    used for tiling or stippling, although some sizes may be\n           faster\
    \ to use than others.\n           The fill-style defines the contents of the source\
    \ for line,\n           text, and fill requests.  For all text and fill requests\n\
    \           (PolyText8, PolyText16, PolyFillRectangle, FillPoly,\n           PolyFillArc),\
    \ for line  requests (PolyLine, PolySegment,\n           PolyRectangle, PolyArc)\
    \ with line-style Solid, and for the\n           even dashes for line requests\
    \ with line-style OnOffDash or\n           DoubleDash:\n               Solid:\
    \ foreground\n               Tiled: tile\n               OpaqueStippled: a tile\
    \ with the same width and height as\n                               stipple, but\
    \ with background everywhere\n                               stipple has a zero\
    \ and with foreground\n                               everywhere stipple has a\
    \ one\n               Stippled: foreground masked by stipple\n           For the\
    \ odd dashes for line requests with line-style\n           DoubleDash:\n     \
    \          Solid: background\n               Tiled: same as for even dashes\n\
    \               OpaqueStippled: same as for even dashes\n               Stippled:\
    \ background masked by stipple\n           The dash-list value allowed here is\
    \ actually a simplified\n           form of the more general patterns that can\
    \ be set with\n           SetDashes.Specifying a value of N here is equivalent\
    \ to\n           specifying the two element list [N, N] in SetDashes.  The\n \
    \          value must be non-zero.  The meaning of dash-offset and\n         \
    \  dash-list are explained in the SetDashes request.\n           The clip-mask\
    \ restricts writes to the destination drawable;\n           only pixels where\
    \ the clip-mask has a one bit are drawn.  It\n           affects all graphics\
    \ requests.  The clip-mask does not clip\n           sources.  The clip-mask origin\
    \ is interpreted relative to the\n           origin of whatever destination drawable\
    \ is specified in a\n           graphics request.  If a pixmap is specified as\
    \ the clip-mask,\n           it must have depth one and have the same root as\
    \ the gcontext\n           (else a Match error).  The clip-mask can also be set\
    \ with the\n           SetClipRectangles request.\n           For ClipByChildren,\
    \ both source and destination windows are\n           additionally clipped by\
    \ all viewable InputOutput children.\n           For IncludeInferiors, neither\
    \ source nor destination window\n           is clipped by inferiors; this will\
    \ result in drawing through\n           subwindow boundaries. The use of IncludeInferiors\
    \ on a window\n           of one depth with mapped inferiors of differing depth\
    \ is not\n           illegal, but the semantics isundefined by the core protocol.\n\
    \           The fill-rule defines what pixels are inside (i.e., are\n        \
    \   drawn) for paths given in FillPoly requests.  EvenOdd means\n           a\
    \ point is inside if an infinite ray with the point as origin\n           crosses\
    \ the path an odd number of times.  For Winding, a\n           point is inside\
    \ if an infinite ray with the point as origin\n           crosses an unequal number\
    \ of clockwise and counterclockwise\n           directed path segments.  For both\
    \ rules, a \"point\" is\n           infinitely small, and the path is an infinitely\
    \ thin line.\n           A pixel is inside if the center point of the pixel is\
    \ inside\n           and the center point is not on the boundary.  If the center\n\
    \           point is on the boundary, the pixel is inside if and only if\n   \
    \        the polygon interior is immediately to its right (x\n           increasing\
    \ direction).  Pixels with centers along a\n           horizontal edge are a special\
    \ case and are inside if and\n           only if the polygon interior is immediately\
    \ below (y\n           increasing direction).\n           The arc-mode controls\
    \ filling in the PolyFillArc request.\n           The graphics-exposures flag\
    \ controls GraphicsExposure event\n           generation for CopyArea and CopyPlane\
    \ requests (and any\n           similar requests defined by extensions).\n   \
    \        The default component values are:\n               function: Copy\n  \
    \             plane-mask: all ones\n               foreground: 0\n           \
    \    background: 1\n               line-width: 0\n               line-style: Solid\n\
    \               cap-style: Butt\n               join-style: Miter\n          \
    \     fill-style: Solid\n               full-rule: EvenOdd\n               arc-mode:\
    \ PieSlice\n               tile: pixmap of unspecified size filled with forground\n\
    \                     pixell (i.e., client specified pixel if any,\n         \
    \            else 0)\n               stipple: pixmap of unspecified size filled\
    \ with ones\n               tile-stipple-x-origin: 0\n               tile-stipple-y-origin:\
    \ 0\n               font: <implementation dependent>\n               subwindow-mode:\
    \ ClipByChildren\n               graphics-exposures: True\n               clip-x-origin:\
    \ 0\n               clip-y-origin: 0\n               clip-mask: None\n       \
    \        dash-offset: 0\n               dash-list: 4 (i.e., the list [4, 4])\n\
    \           Storing a pixmap in a gcontext might or might not result in a\n  \
    \         copy being made.  If the pixmap is later used as the\n           destination\
    \ for a graphics request, the change might or might\n           not be reflected\
    \ in the gcontext.  If the pixmap is used\n           simultaneously  in a graphics\
    \ request as both a destination\n           and as a tile or stipple. the results\
    \ are not defined.\n           It is quite likely that some amount of gcontext\
    \ information\n           will be cached in display hardware, and that such hardware\n\
    \           can only cache a small number of gcontexts.  Given the number\n  \
    \         and complexity of components, clients should view switching\n      \
    \     between gcontexts with nearly identical state as\n           significantly\
    \ more expensive than making minor changes to a\n           single gcontext.\n"
- title: ChangeGC
  contents:
  - "ChangeGC\n           gc: GCONTEXT\n           value-mask: BITMASK\n         \
    \  value-list: LISTofVALUE\n           Errors: GContext, Pixmap, Font, Match,\
    \ Value, Alloc\n           Changes components in gc.  The value-mask and value-list\n\
    \           specify which components are to be changed.  The values and\n    \
    \       restrictions are the same as for CreateGC.\n           Changing the clip-mask\
    \ also overrides any previous\n           SetClipRectangles request on the context.\
    \  Changing the\n           dash-offset or dash-list overrides any previous SetDashes\n\
    \           request on the context.\n           The order in which components\
    \ are verified and altered is\n           server dependent.  If an error is generated,\
    \ a subset of the\n           components may have been altered.\n"
- title: CopyGC
  contents:
  - "CopyGC\n           src-gc, dst-gc: GCONTEXT\n           value-mask: BITMASK\n\
    \           Errors: GContext, Value, Match, Alloc\n           Copies components\
    \ from src-gc to dst-gc.  The value-mask\n           specifies which components\
    \ to copy, as for CreateGC.  The\n           two gcontexts must have the same\
    \ root and the same depth\n           (else a Match error).\n"
- title: SetDashes
  contents:
  - "SetDashes\n           gc: GCONTEXT\n           dash-offset: CARD16\n        \
    \   dash-list: LISTofCARD8\n           Errors: GContext, Value, Alloc\n      \
    \     Sets the dash-offset and dash-list in gc for dashed line\n           styles.\
    \  The initial and alternating elements of the\n           dash-list are the \"\
    even\" dashes, the others are the\n           \"odd\" dashes.  All of the elements\
    \ must be non-zero.\n           The dash-offset defines the phase of the pattern,\n\
    \           specifying how many pixels into the dash-list the pattern\n      \
    \     should actually begin in any single graphics request.\n           Dashing\
    \ is continuous through path segments combined with\n           a join-style,\
    \ but is reset to the dash-offset each time a\n           cap-style is applied.\n"
- title: SetClipRectangles
  contents:
  - "SetClipRectangles\n           gc: GCONTEXT\n           clip-x-origin, clip-y-origin:\
    \ INT16\n           rectangles: LISTofRECTANGLE\n           ordering: {UnSorted,\
    \ YSorted, YXSorted, YXBanded}\n           Errors: GContext, Value, Alloc, Match\n\
    \           Changes clip-mask in gc to the specified list of rectangles\n    \
    \       and sets the clip origin.  Output will be clipped to remain\n        \
    \   contained within the rectangles.  The clip origin is\n           interpreted\
    \ relative to the origin of whatever destination\n           drawable is specified\
    \ in a graphics request.  The rectangle\n           coordinates are interpreted\
    \ relative to the clip origin.\n           The rectangles should be non-intersecting,\
    \ or graphics\n           results will be undefined.\n           If known by the\
    \ client, ordering relations on the rectangles\n           can be specified with\
    \ the ordering argument; this may provide\n           faster operation by the\
    \ server.  If an incorrect ordering is\n           specified, the server may generate\
    \ a Match error, but is not\n           required to do so; if no error is generated,\
    \ the graphics\n           results are undefined. UnSorted means the rectangles\
    \ are in\n           arbitrary order.  YSorted means that the rectangles are\n\
    \           non-decreasing in their Y origin. YXSorted additionally\n        \
    \   constrains YSorted order in that all rectangles with an equal\n          \
    \ Y origin are non-decreasing in their X origin.  YXBanded\n           additionally\
    \ constrains YXSorted by requiring that for every\n           possible Y scanline,\
    \ all rectangles that include that\n           scanline have identical Y origins\
    \ and Y extents.\n"
- title: FreeGC
  contents:
  - "FreeGC\n           gc: GCONTEXT\n           Errors: GContext\n           Deletes\
    \ the association between the resource id and the\n           gcontext, and destroys\
    \ the gcontext.\n"
- title: ClearToBackground
  contents:
  - "ClearToBackground\n           window: WINDOW\n           x, y: INT16\n      \
    \     width, height: CARD16\n           exposures: BOOL\n           Errors: Window,\
    \ Value, Match\n           The x and y coordinates are relative to the window's\
    \ origin,\n           and specify the upper left corner of the rectangle.  If\
    \ width\n           is zero, it is replaced with the current width of the window\n\
    \           minus x.  If height is zero, it is replaced with the current\n   \
    \        height of the window minus y.  If the window has a defined\n        \
    \   background tile, the rectangle is tiled with a plane-mask of\n           all\
    \ ones and alu-function of Copy.  If the window has\n           background None,\
    \ the contents of the window are not changed.\n           In eithercase, if  exposures\
    \ is True, then one or more\n           exposure events are generated for regions\
    \ of the rectangle\n           that are eithervisible or are being retained in\
    \ a backing\n           store.\n           It is a Match error to use an InputOnly\
    \ window in this\n           request.\n"
- title: CopyArea
  contents:
  - "CopyArea\n           src-drawable, dst-drawable: DRAWABLE\n           gc: GCONTEXT\n\
    \           src-x, src-y: INT16\n           width, height: CARD16\n          \
    \ dst-x, dst-y: INT16\n           Errors: Drawable, GContext, Match\n        \
    \   Combines the specified rectangle of src-drawable with the\n           specified\
    \ rectangle of dst-drawable.  The src-x and src-y\n           coordinates are\
    \ relative to src-drawable's origin, dst-x and\n           dst-y are relative\
    \ to dst-drawable's origin, each pair\n           specifying the  upper left corner\
    \ of the rectangle.\n           Src-drawable must have the same root and the same\
    \ depth as\n           dst-drawable (else a Match error).\n           If regions\
    \ of the source rectangle are obscured and have not\n           been retained\
    \ by the server, or if regions outside the\n           boundaries of the source\
    \ drawable are specified, then the\n           following occurs.  If the dst-drawable\
    \ is a window with a\n           background of other than  None, the corresponding\
    \ regions of\n           the destination are tiled (with plane-mask of ones and\n\
    \           alu-function Copy) with that background.  Regardless, if\n       \
    \    graphics-exposures in gc is True, GraphicsExposure events\n           for\
    \ the corresponding desitnation regions are generated.\n           If graphics-exposures\
    \ if True but no regions are exposed,\n           then a NoExposure event is generated.\n\
    \           GC components: alu-function, plane-mask, foreground,\n           subwindow-mode,\
    \ clip-x-origin, clip-y-origin, clip-mask\n"
- title: CopyPlane
  contents:
  - "CopyPlane\n           scr-drawable, dst-drawable: DRAWABLE\n           GC:Gcontext\n\
    \           src-x, src-y: INT16\n           width, height: CARD16\n          \
    \ dst-x, dst-y: INT16\n           bit-plane: CARD32\n           Errors: Drawable,\
    \ GContext, Value, Match\n           Src-drawable must have the same root as dst-srawable\
    \ (else\n           a match error), but need not have the same depth.\n      \
    \     Bit-plane must have exactly one bit set.  Effectively, that\n          \
    \ plane of the src-drawable and the fore-ground/background\n           pixels\
    \ in gc are combined to form a pixmap of the same\n           depth as dst-drawable,\
    \ and the equivalent of a CopyArea is\n           performed, with all the same\
    \ exposure semantics.\n           GC components: alu-function, plan-mask, foreground,\n\
    \           background, subwindow-mode, graphics-exposures,\n           clip-x-origin,\
    \ clip-y-origin, clip-mask\n"
- title: PolyPoint
  contents:
  - "PolyPoint\n           drawable: DRAWABLE\n           gc: GCONTEXT\n         \
    \  coordinate-mode: {Origin, Previous}\n           points: LISTofPOINT\n     \
    \      Errors: Drawable, GContext, Value, Match\n           Combines the foreground\
    \ pixel in gc with the pixel at each\n           point in the drawable.  The points\
    \ are drawn in the order\n           listed.\n           The first point is always\
    \ relative to the drawable's origin;\n           the rest are relative either\
    \ to that origin or the previous\n           point, depending on the coordinate-mode.\n\
    \           GCcomponents: alu-function, plane-mask, foreground,\n           subwindow-mode,\
    \ clip-x-origin, clip-y-origin, clip-mask\n"
- title: PolyLine
  contents:
  - "PolyLine\n           drawable: DRAWABLE\n           gc: GCONTEXT\n          \
    \ coordinate-mode: {Origin, Previous}\n           points: LISTofPOINT\n      \
    \     Errors: Drawable, GContext, Value, Match\n           Draws lines between\
    \ each pair of points (point[i], point\n           [i+1]). The lines are drawn\
    \ in the order listed.  The lines\n           join correctly at all intermediate\
    \ points, and if the first\n           and last points coincide, the first and\
    \ last lines also join\n           correctly.\n           For any given line,\
    \ no pixel is drawn more than once.  If\n           thin (zero line-width) lines\
    \ intersect, the intersecting\n           pixels are drawn multiple times.  If\
    \ wide lines intersect,\n           the intersecting pixels are drawn only once,\
    \ as though the\n           entire PolyLine were a single filled shape.\n    \
    \       The first point is always relative to the drawable's origin;\n       \
    \    the rest are relative either to that origin or the previous\n           point,\
    \  depending on the coordinate-mode.\n           GC components: alu-function,\
    \ plane-mask, line-width,\n           line-style, cap-style, join-style, fill-style,\n\
    \           subwindow-mode, clip-x-origin, clip-y-origin, clip-mask\n        \
    \   GC mode-dependent components: foreground, background, tile,\n           stipple,\
    \ tile-stipple-x-origin, tile-stipple-y-origin,\n           dash-offset,dash-list\n"
- title: PolySegment
  contents:
  - "PolySegment\n           drawable: DRAWABLE\n           gc: GCONTEXT\n       \
    \    segments: LISTofSEGMENT\n           where SEGMENT: [x1, y1, x2, y2: INT16]\n\
    \           Errors: Drawable, GContext, Match\n           For each segment, draws\
    \ a line between [x1, y1] and [x2, y2].\n           The lines are drawn in the\
    \ order listed.  No joining is\n           performed at coincident end points.\
    \  For any given line, no\n           pixel is drawn more than once.  If lines\
    \ intersect, the\n           intersecting pixels are drawn multiple times.\n \
    \          GC components: alu-function, plane-mask, line-width,\n           line-style,\
    \ cap-style, fill-style, subwindow-mode,\n           clip-x-origin, clip-y-origin,clip-mask\n\
    \           GC mode-dependent components: foreground, background, tile,\n    \
    \       stipple,tile-stipple-x-origin, tile-stipple-y-origin,\n           dash-offset,\
    \ dash-list\n"
- title: PolyRectangle
  contents:
  - "PolyRectangle\n           drawable: DRAWABLE\n           gc: GCONTEXT\n     \
    \      rectangles: LISTofRECTANGLE\n           Errors: Drawable, GContext, Match\n\
    \           Draws the outlines of the specified rectangles, as if a\n        \
    \   five-point PolyLine were specified for each rectangle.  The x\n          \
    \ and y coordinates of each rectangle are relative to the\n           drawable's\
    \ origin, and define the upper left corner of the\n           rectangle.\n   \
    \        The rectangles are drawn in the order listed.  For any given\n      \
    \     rectangle, no pixel is drawn more than once.  If rectangles\n          \
    \ intersect, the intersecting pixels are drawn multiple times.\n           GC\
    \ components: alu-function, plane-mask, line-width,\n           line-style, join-style,\
    \ fill-style, subwindow-mode,\n           clip-x-origin, clip-y-origin, clip-mask\n\
    \           GC mode-dependent components: foreground, background, tile,\n    \
    \       stipple, tile-stipple-x-origin, tile-stipple-y-origin,\n           dash-offset,\
    \ dash-list\n"
- title: PolyArc
  contents:
  - "PolyArc\n           drawable: DRAWABLE\n           gc: GCONTEXT\n           arcs:\
    \ LISTofARC\n           Errors: Drawable, GContext, Match\n           Draws circular\
    \ or elliptical arcs.  Each arc is specified by\n           a rectangle and two\
    \ angles.  The x and y coordinates are\n           relative to the origin of the\
    \ drawable, and define the upper\n           left corner of the rectangle.  The\
    \ center of the circle or\n           ellipse is the center of the rectangle,\
    \ and the major and\n           minor axes are specified by the width and height,\n\
    \           respectively.  The angles are signed integers in degrees\n       \
    \    scaled by 64, with positive indicating counterclockwise\n           motion\
    \ and negative indicating clockwise motion.  The start\n           of the arc\
    \ is specified by angle1 relative to the\n           three-oclock position from\
    \ the center, and the path and\n           extent of the arc is specified by angle2\
    \ relative to the\n           start of the arc.  If the magnitude of angle2 is\
    \ greater\n           than 360 degrees, it is truncated to 360 degrees.\n    \
    \       The arcs are drawn in the order listed.  If the last point in\n      \
    \     one arc coincides with the first point in the following arc,\n         \
    \  the two arcs will join correctly.  If the first point in the\n           first\
    \ arc coincides with the last point in the last arc, the\n           two arcs\
    \ will join correctly.  For any given arc, no pixel is\n           drawn more\
    \ than once.  If two arcs join correctly and the\n           line-width is greater\
    \ than zero and the arcs intersect, no\n           pixel is drawn more than once.\
    \  Otherwise, the intersecting\n           pixels of intersecting arcs are drawn\
    \ multiple times.\n           Specifying an arc with one endpoint and a clockwise\
    \ extent\n           draws the same pixels as specifying the other endpoint and\
    \ an\n           equivalent counterclockwise extent, except as it affects\n  \
    \         joins.\n           By specifying one axis to be zero, a horizontal or\
    \ vertical\n           line can be drawn.\n           Angles are computed based\
    \ solely on the coordinate system,\n           ignoring the aspect ratio.\n  \
    \         GC components: alu-function, plane-mask, line-width,\n           line-style,\
    \ cap-style, join-style, fill-style,\n           subwindow-mode, clip-x-origin,\
    \ clip-y-origin, clip-mask\n           GC mode-dependent components: foreground,\
    \ background, tile,\n           stipple,tile-stipple-x-origin, tile-stipple-y-origin,\n\
    \           dash-offset, dash-list\n"
- title: FillPoly
  contents:
  - "FillPoly\n           drawable: DRAWABLE\n           gc: GCONTEXT\n          \
    \ shape: {Complex, Nonconvex, Convex}\n           coordinate-mode: {Origin, Previous}\n\
    \           points: LISTofPOINT\n           Errors: Drawable, GContext, Match,\
    \ Value\n           Fills the region closed by the specified path.  The path is\n\
    \           closed automatically if the last point in the list does not\n    \
    \       coincide with the first point.  No pixel of the region is\n          \
    \ drawn more than once.\n           The first point is always relative to the\
    \ drawable's origin;\n           the rest are relative either to that origin or\
    \ the previous\n           point, depending on the coordinate-mode.\n        \
    \   The shape parameter may be used by the server to improve\n           performance.\
    \ Complex means the path may self-intersect.\n           Nonconvex means the path\
    \ does not self-intersect, but the\n           shape is not wholly convex.  If\
    \ known by the client,\n           specifying Nonconvex over Complex may improve\
    \ performance. If\n           Nonconvex is specified for a self-intersecting path,\
    \ the\n           graphics results are undefined.\n           Convex means the\
    \ path is wholly convex. If known by the\n           client, specifying Convex\
    \ can improve performance.  If Convex\n           is specified for a path that\
    \ is not convex, the graphics\n           results are undefined.\n           GC\
    \ components: alu-function, plane-mask, fill-style,\n           fill-rule, subwindow-mode,\
    \ clip-x-origin, clip-y-origin,\n           clip-mask\n           GC mode-dependent\
    \ components: foreground, tile, stipple,\n           tile-stipple-x-origin, tile-stipple-y-origin\n"
- title: PolyFillRectangle
  contents:
  - "PolyFillRectangle\n           drawable: DRAWABLE\n           gc: GCONTEXT\n \
    \          rectangles: LISTofRECTANGLE\n           Errors: Drawable, GContext,\
    \ Match\n           Fills the specified rectangles.  The x and y coordinates of\n\
    \           each rectangle are relative to the drawable's origin, and\n      \
    \     define the upper left corner of the rectangle.\n           The rectangles\
    \ are drawn in the order listed.  For any given\n           rectangle, no pixel\
    \ is drawn more than once.  If rectangles\n           intersect, the intersecting\
    \ pixels are drawn multiple times.\n           GC components: alu-function, plane-mask,\
    \ fill-style,\n           fill-rule, subwindow-mode, clip-x-origin, clip-y-origin,\n\
    \           clip-mask\n           GC mode-dependent components: foreground, tile,\
    \ stipple,\n           tile-stipple-x-origin, tile-stipple-y-origin\n"
- title: PolyFillArc
  contents:
  - "PolyFillArc\n           drawable: DRAWABLE\n           gc: GCONTEXT\n       \
    \    arcs: LISTofARC\n           Errors: Drawable, GContext, Match\n         \
    \  For each arc, fills the region closed by the specified arc\n           and\
    \ one or two line segments, depending on the arc-mode.  For\n           Chord,\
    \ the single line segment joining the endpoints of the\n           arc is used.\
    \  For PieSlice, the two line segments joining the\n           endpoints of the\
    \ arc with the center point are used.  The\n           arcs are as specified in\
    \ the PolyArc request.\n           The arcs are filled in the order listed.  For\
    \ any given arc,\n           no pixel is drawn more than once.  If regions intersect,\
    \ the\n           intersecting pixels are drawn multiple times.\n           GC\
    \ components: alu-function, plane-mask, fill-style,\n           fill-rule, arc-mode,\
    \ subwindow-mode, clip-x-origin,\n           clip-y-origin, clip-mask\n      \
    \     GC mode-dependent components: foreground, tile, stipple,\n           tile-stipple-x-origin,\
    \ tile-stipple-y-origin\n"
- title: PutImage
  contents:
  - "PutImage\n           drawable: DRAWABLE\n           gc: GCONTEXT\n          \
    \ depth: CARD8\n           width, height: CARD16\n           dst-x, dst-y: INT16\n\
    \           left-pad: CARD8\n           format: {Bitmap, XYPixmap, ZPixmap}\n\
    \           bits: <bits>\n           Errors: Drawable, GContext, Match, Value,\
    \ Alloc\n           Combines an image with a rectangle of the drawable.  The\n\
    \           dst-x and dst-y coordinates are relative to the drawable's\n     \
    \      origin.\n           If Bitmap format is used, then depth must be one (else\
    \ a\n           Match error) and the image must be in XYFormat. The\n        \
    \   foreground pixel in gc defines the source for one bits in the\n          \
    \ image, and the background pixel defines the source for the\n           zero\
    \ bits.\n           For XYPixmap and ZPixmap, depth must match the depth of\n\
    \           drawable (else a Match error).  For XYPixmap, the image must\n   \
    \        be sent in XYFormat.  For ZPixmap, the image must be sent in\n      \
    \     the ZFormat defined for the given depth.\n           The left-pad must be\
    \ zero for ZPixmap format.  For Bitmap and\n           XYPixmap format, left-pad\
    \ must be less than\n           bitmap-format-scanline-pad (as given in the server\
    \ connection\n           setup info).  The first left-pad bits in every scanline\
    \ are\n           to be ignored by the server; the actual image begins that\n\
    \           many bits into the data.  The width argument defines the width\n \
    \          of the actual image, and does not include left-pad.\n           GC\
    \ components: alu-function, plane-mask, subwindow-mode,\n           clip-x-origin,\
    \ clip-y-origin, clip-mask\n           GC mode-dependent components: foreground,\
    \ background\n"
- title: GetImage
  contents:
  - "GetImage\n           drawable: DRAWABLE\n           x, y: INT16\n           width,\
    \ height: CARD16\n           plane-mask: CARD32\n           format: {XYFormat,\
    \ ZFormat}\n       =>\n           depth: CARD8\n           visual: VISUALID or\
    \ None\n           bits: <bits>\n           Errors: Drawable, Value, Match\n \
    \          Returns the contents of the given rectangle of the drawable\n     \
    \      in the given format.  The x and y coordinates are relative to\n       \
    \    the drawable's origin, and define the upper left corner of\n           the\
    \ rectangle. If XYFormat is specified, only the bit planes\n           specified\
    \ in plane-mask are transmitted.  If ZFormat is\n           specified, then bits\
    \ in all planes not specified in\n           plane-mask transmitted as zero. \
    \ The returned depth specifies\n           the number of bits per pixel of the\
    \ image.  If the drawable\n           is a window,  its visual type is returned;\
    \ if the drawable\n           is a pixmap,the visual is None.\n           If the\
    \ drawable is a window, the window must be mapped, and\n           it must be\
    \ the case that, if there were no inferiors or\n           overlapping windows,\
    \ the specified rectangle of the window\n           would be fully visible on\
    \ the screen will include any\n           visible portions of inferiors or overlapping\
    \ windows\n           contained in the rectangle, but if these windows are of\n\
    \           different depth than the specified window, the contents\n        \
    \   returned for them are not defined by the core protocol.\n"
- title: PolyText8
  contents:
  - "PolyText8\n           drawable: DRAWABLE\n           gc: GCONTEXT\n         \
    \  x, y: INT16\n           items: LISTofTEXTITEM8\n           where\n        \
    \           TEXTITEM8: TEXTELT8 or FONT\n                   TEXTELT8: [delta:\
    \ INT8\n                              string: STRING8]\n           Errors: Drawable,\
    \ GContext, Match, Font\n           The x and y coordinates are relative to drawable's\
    \ origin,\n           and specify the baseline starting position (the initial\n\
    \           character origin). Each text item is processed in turn.  A\n     \
    \      font item causes the font to be stored in gc, and to be\n           used\
    \ for subsequent text; switching among fonts with\n           differing draw-directions\
    \ is permitted.  A text element\n           delta specifies an additional change\
    \ in the position along\n           the x axis before the string is drawn; the\
    \ delta is always\n           added to the character origin (not added or subtracted\
    \ based\n           on the draw-direction of the current font).  Each character\n\
    \           image, as defined by the a font in gc, is treated as an\n        \
    \   additional mask for a fill operation on the drawable.\n           All contained\
    \ FONTs are always transmitted most significant\n           byte first.\n    \
    \       If a Font error is generated for an item, the previous items\n       \
    \    may have been drawn.\n           For fonts defined with two-byte matrix indexing,\
    \ each STRING8\n           byte is interpreted as a byte2 value of a CHAR2B with\
    \ a byte1\n           value of zero.\n           GC components: alu-function,\
    \ plane-mask, fill-style, font,\n           subwindow-mode, clip-x-origin, clip-y-origin,\
    \ clip-mask\n           GC mode-dependent components: foreground, tile, stipple,\n\
    \           tile-stipple-x-origin, tile-stipple-y-origin\n"
- title: PolyText16
  contents:
  - "PolyText16\n           drawable: DRAWABLE\n           gc: GCONTEXT\n        \
    \   x, y: INT16\n           items: LISTofTEXTITEM16\n           where\n      \
    \             TEXTITEM16: TEXTELT16 or FONT\n                   TEXTELT16: [delta-x:\
    \ INT8\n                               string: STRING16]\n           Errors: Drawable,\
    \ GContext, Match, Font\n           Just like PolyText8, except two-byte (or 16-bit)\
    \ characters\n           are used. For fonts defined with linear indexing rather\
    \ than\n           two-byte matrix indexing, the server will interpret each\n\
    \           CHAR2B as a 16-bit number that has been transmitted most\n       \
    \    significant byte first (i.e., byte1 of the CHAR2B is taken\n           as\
    \ the most significant byte).\n"
- title: ImageText8
  contents:
  - "ImageText8\n           drawable: DRAWABLE\n           gc: GCONTEXT\n        \
    \   x, y: INT16\n           string: STRING8\n           Errors: Drawable, GContext,\
    \ Match\n           The x and y coordinates are relative to drawable's origin,\n\
    \           and specify the baseline starting position (the initial\n        \
    \   character origin). The effect is to first fill a\n           destination rectangle\
    \ with the background pixel defined in\n           gc, and then paint the text\
    \ with the foreground pixel.\n           The upper left corner of the filled rectangle\
    \ is at\n                   [x + overall-left, y - font-ascent]\n           the\
    \ width is\n                   overall-right - overall-left\n           and the\
    \ height is\n                   font-ascent + font-descent\n           where overall-left,\
    \ overall-right, font-ascent, and\n           as font-descent are would be returned\
    \ by a QueryTextExtents\n           call using gc and string.\n           The\
    \ alu-function and fill-style defined in gc are ignored for\n           this request;\
    \ the effective alu-function is Copy and the\n           effective fill-style\
    \ Solid.\n           For fonts defined with two-byte matrix indexing, each STRING8\n\
    \           byte is interpreted as a byte2 value of a CHAR2B with a byte1\n  \
    \         value of zero.\n           GC components: plane-mask, foreground, background,\
    \ font,\n           subwindow-mode, clip-x-origin, clip-y-origin, clip-mask\n"
- title: ImageText16
  contents:
  - "ImageText16\n           drawable: DRAWABLE\n           gc: GCONTEXT\n       \
    \    x, y: INT16\n           string: STRING16\n           Errors: Drawable, GContext,\
    \ Match\n           Just like ImageText8, except two-byte (or 16-bit) characters\n\
    \           are used. For fonts defined with linear indexing rather than\n   \
    \        two-byte matrix indexing, the server will interpret each\n          \
    \ CHAR2B as a 16-bit number that has been transmitted most\n           significant\
    \ byte first (i.e., byte1 of the CHAR2B is taken as\n           the most significant\
    \ byte).\n"
- title: CreateColormap
  contents:
  - "CreateColormap\n           mid: COLORMAP\n           visual: VISUALID\n     \
    \      window: WINDOW\n           alloc: {None, All}\n           Errors: IDChoice,\
    \ Window, Value, Match, Alloc\n           Creates a colormap of the specified\
    \ visual type for the\n           screen on which the window resides, and associates\
    \ the\n           identifier mid with it.  The visual type must be one\n     \
    \      supported by the screen, and cannot be of class TrueColor\n           (else\
    \ a Match error).  The initial values of the colormap\n           entries are\
    \ undefined for classes GrayScale, PseudoColor,\n           and DirectColor; for\
    \ StaticGray, StaticColor, and\n           TrueColor, the entries will have defined\
    \ values, but those\n           values are specific to the visual and are not\
    \ defined by\n           the core protocol.  For StaticGray, StaticColor, and\n\
    \           TrueColor, alloc must be specified as None (else a Match\n       \
    \    error). For the other classes, if alloc is None, the\n           colormap\
    \ initially has no allocated entries, and clients\n           can allocate entries.\
    \  If alloc is All, then the entire\n           colormap is \"allocated\" writable,\
    \ but entries cannot be\n           freed with FreeColors, and no relationships\
    \ among entries\n           is defined; the client must understand whether the\
    \ colormap\n           is GrayScale, PseudoColor, or DirectColor to know how to\n\
    \           store into entries.\n"
- title: FreeColormap
  contents:
  - "FreeColormap\n           cmap: COLORMAP\n           Errors: Colormap\n      \
    \     Deletes the association between the resource id and the\n           colormap.\
    \  If the colormap is an installed map for a screen,\n           it is uninstalled\
    \ (see UninstallColormap).  If the colormap\n           is defined as the colormap\
    \ for a window (via CreateWindow or\n           ChangeWindowAttributes), the colormap\
    \ for the window is\n           changed to None, and a ColormapNotify event is\
    \ generated.The\n           colors displayed for a window with a colormap of None\
    \ are not\n           defined by the protocol.\n           Has no effect on a\
    \ default colormap for a screen.\n"
- title: CopyColormapAndFree
  contents:
  - "CopyColormapAndFree\n           mid, src-cmap: COLORMAP\n           Errors: Colormap,\
    \ Alloc\n           Creates a colormap for the same screen as src-cmap, and\n\
    \           associates identifier mid with it.  Moves all of the client's\n  \
    \         existing allocations from src-cmap to the new colormap, and\n      \
    \     frees those entries in src-cmap. Values in other entries in\n          \
    \ the new colormap are undefined.\n"
- title: InstallColormap
  contents:
  - "InstallColormap\n           cmap: COLORMAP\n           Errors: Colormap\n   \
    \        Makes this colormap an installed map for its screen.  All\n         \
    \  windows associated with this colormap immediately display\n           with\
    \ true colors.  As a side-effect, previously installed\n           colormaps may\
    \ be uninstalled, and other windows may display\n           with false colors.\
    \  Which colormaps get uninstalled is\n           server dependent, except that\
    \ it is guaranteed that the\n           M-1 most recently client-installed colormaps\
    \ will not be\n           uninstalled, where M is the min-installed-maps specified\n\
    \           for the screen in the connection setup.\n           If cmap is not\
    \ already an installed map, a ColormapNotify\n           event is generated on\
    \ every window having cmap as an\n           attribute.  If a colormap is uninstalled\
    \ as a result of\n           the install, a ColormapNotify event is generated\
    \ on every\n           window having that colormap as an attribute.\n        \
    \   Initially only the default colormap for a screen is\n           installed.\n"
- title: UninstallColormap
  contents:
  - "UninstallColormap\n           cmap: COLORMAP\n           Errors: Colormap\n \
    \          If cmap is an installed map for its screen, one or more\n         \
    \  colormaps are installed in its place; the choice is server\n           dependent,\
    \ pexcept that if the screen's default colormap is\n           not installed and\
    \ can be installed (without forcing other\n           colormaps out), then the\
    \ default colormap is used.\n           If cmap is an installed map, a ColormapNotify\
    \ event is\n           generated on every window having this colormap as an\n\
    \           attribute.  If a colormap is installed as a result of the\n      \
    \     uninstall, a ColormapNotify event is generated on every\n           window\
    \ having that colormap as an attribute.\n"
- title: ListInstalledColormaps
  contents:
  - "ListInstalledColormaps\n           window: WINDOW\n       =>\n           cmaps:\
    \ LISTofCOLORMAP\n           Errors: Window\n           Returns a list of the\
    \ currently installed colormaps for the\n           screen of the specified window.\n"
- title: AllocColor
  contents:
  - "AllocColor\n           cmap: COLORMAP\n           red, green, blue: CARD16\n\
    \       =>\n           pixel: CARD32\n           red, green, blue: CARD16\n  \
    \         Errors: Colormap, Alloc\n           Allocates a read-only colormap entry\
    \ corresponding to the\n           closest RGB values provided by the hardware.\
    \  Returns the\n           pixel and the RGB values actually used.\n"
- title: AllocNamedColor
  contents:
  - "AllocNamedColor\n           cmap: COLORMAP\n           name: STRING8\n      \
    \ =>\n           pixel: CARD32\n           exact-red, exact-green, exact-blue:\
    \ CARD16\n           screen-red, screen-green, screen-blue: CARD16\n         \
    \  Errors: Colormap, Name, Alloc\n           Looks up the named color with respect\
    \ to the screen\n           associated with the colormap, then does an AllocColor\
    \ on\n           cmap.  The name should use the  ASCII encoding, and\n       \
    \    upper/lower case does not matter. The exact RGB values\n           specify\
    \ the \"true\" values for the color, and the screen\n           values specify\
    \ the values actually used in the colormap.\n"
- title: AllocColorCells
  contents:
  - "AllocColorCells\n           cmap: COLORMAP\n           colors, planes: CARD16\n\
    \           contiguous: BOOL\n       =>\n           pixels, masks: LISTofCARD32\n\
    \           Errors: Colormap, Value, Alloc\n           The number of colors must\
    \ be positive, the number of planes\n           non-negative.  If C colors and\
    \ P planes are requested, then C\n           pixels  and P masks are returned.\
    \  No mask will have any bits\n           in common with any other mask, or with\
    \ any of the pixels.  By\n           ORing together masks and pixels, C*(2^P)\
    \ distinct pixels can\n           be produced; all of these are allocated writable\
    \ by the\n           request.  For GrayScale or PseudoColor, each mask will have\n\
    \           exactly one bit, and for DirectColor each will have exactly\n    \
    \       three bits.   If contiguous is True, then if all masks are\n         \
    \  ORed together, a single contiguous set of bits will be formed\n           for\
    \ GrayScale or PseudoColor, and three contiguous sets of\n           bits (one\
    \ within each pixel subfield) for DirectColor.  The\n           RGB values of\
    \ the allocated entries are undefined.\n"
- title: AllocColorPlanes
  contents:
  - "AllocColorPlanes\n           cmap: COLORMAP\n           colors, reds, greens,\
    \ blues: CARD16\n           contiguous: BOOL\n       =>\n           pixels: LISTofCARD32\n\
    \           red-mask, green-mask, blue-mask: CARD32\n           Errors; Colormap,\
    \ Value, Alloc\n           The number of colors must be positive, the reds, greens,\
    \ and\n           blues non-negative.  If C colors, R reds, G greens, and B\n\
    \           blues are requested, then C pixels are returned, and the\n       \
    \    masks have R, G, and B bits set respectively.  If contiguous\n          \
    \ is True, then each mask will have a contiguous set of bits.\n           No mask\
    \ will have any bits in common with any other mask, or\n           with any of\
    \ the pixels.  For DirectColor, each mask will lie\n           within the corresponding\
    \ pixel subfield.  By ORing together\n           subsets of masks with pixels,\
    \ C*(2^(R+G+B)) distinct pixels\n           can be produced; all of these are\
    \ allocated by the request.\n           The initial RGB values of the allocated\
    \ entries are\n           undefined. In the colormap there are only C*(2^R)\n\
    \           independent red entries, C*(2^G) independent green entries,\n    \
    \       and C*(2^B) independent blue entries.  This is true even for\n       \
    \    PseudoColor.  When the colormap entry for a pixel value is\n           changed\
    \ using StoreColors or StoreNamedColor, the pixel is\n           decomposed according\
    \ to the masks and the corresponding\n           independent entries are updated.\n"
- title: FreeColors
  contents:
  - "FreeColors\n           cmap: COLORMAP\n           pixels: LISTofCARD32\n    \
    \       plane-mask: CARD32\n           Errors: Colormap, Access, Value\n     \
    \      The plane-mask should not have any bits in common with any of\n       \
    \    the pixels.  The set of all pixels is produced by ORing\n           together\
    \ subsets of plane-mask with the pixels.  The request\n           frees all of\
    \ these pixels. Note that freeing an individual\n           pixel obtained from\
    \ AllocColorPlanes may not actually allow\n           it to be reused until all\
    \ of its \"related\" pixels are also\n           freed.\n           All specified\
    \ pixels that are allocated by the client in\n           cmap are freed, even\
    \ if one or more pixels produce an error.\n           A Value error is generated\
    \ if a specified pixel is not a\n           valid index into cmap, and an Access\
    \ error is generated if a\n           specified pixel is not allocated by the\
    \ client (i.e., is\n           unallocated or is only allocated by another client).\
    \ If more\n           than one pixel is in error, which one is reported is\n \
    \          arbitrary.\n"
- title: StoreColors
  contents:
  - "StoreColors\n           cmap: COLORMAP\n           items: LISTofCOLORITEM\n \
    \          where\n                   COLORITEM: [pixel: CARD32\n             \
    \                  do-red, do-green, do-blue: BOOL\n                         \
    \      red, green, blue: CARD16]\n           Errors: Colormap, Access, Value\n\
    \           Changes the colormap entries of the specified pixels.  The\n     \
    \      do-red, do-green, and do-blue fields indicate which\n           components\
    \ should actually be changed.  If the colormap is an\n           installed  map\
    \ for its screen, the changes are visible\n           immediately.\n         \
    \  All specified pixels that are allocated writable in cmap (by\n           any\
    \ client) are changed, even if one or more pixels produce\n           an error.\
    \  A Value error is generated if a specified pixel is\n           not a valid\
    \ index into cmap, and an Access error is generated\n           if a specified\
    \ pixel is unallocated or is allocated\n           read-only.  If more than one\
    \ pixel is in error, which one is\n           reported is arbitrary.\n"
- title: StoreNamedColor
  contents:
  - "StoreNamedColor\n           cmap: COLORMAP\n           pixel: CARD32\n      \
    \     name: STRING8\n           do-red, do-green, do-blue: BOOL\n           Errors:\
    \ Colormap, Name, Access, Value\n           Looks up the named color with respect\
    \ to the screen\n           associated with cmap, then does a StoreColors in cmap.\
    \  The\n           name should use the ASCII encoding, and upper/lower case\n\
    \           does not matter.\n"
- title: QueryColors
  contents:
  - "QueryColors\n           cmap: COLORMAP\n           pixels: LISTofCARD32\n   \
    \    =>\n           colors: LISTofRGB\n           where\n                   RGB:\
    \ [red, green, blue: CARD16]\n           Errors: Colormap, Value\n           Returns\
    \ the color values stored in cmap for the specified\n           pixels.  The values\
    \ returned for an unallocated entry are\n           undefined. A Value error is\
    \ generated if a pixel is not a\n           valid index into cmap.  If more than\
    \ one pixel is in error,\n           which one is reported is arbitrary.\n"
- title: LookupColor
  contents:
  - "LookupColor\n           cmap: COLORMAP\n           name: STRING8\n       =>\n\
    \           exact-red, exact-green, exact-blue: CARD16\n           screen-red,\
    \ screen-green, screen-blue: CARD16\n           Errors: Colormap, Name\n     \
    \      Looks up the string name of a color with respect to the\n           screen\
    \ associated with cmap, and returns both the exact the\n           color values\
    \ and the closest values provided by the hardware.\n           The name should\
    \ use the ASCII encoding, and upper/lower\n           case does not matter.\n"
- title: CreateCursor
  contents:
  - "CreateCursor\n           cid: CURSOR\n           source: PIXMAP\n           mask:\
    \ PIXMAP or None\n           fore-red, fore-green, fore-blue: CARD16\n       \
    \    back-red, back-green, back-blue: CARD16\n           x, y: CARD16\n      \
    \     Errors: IDChoice, Bitmap, Match, Value, Alloc\n           Creates a cursor\
    \ and associates identifier cid with it.\n           Foreground and background\
    \ RGB values must be specified, even\n           if the server only has a monochrome\
    \ screen.  The foreground\n           is used for the one bits in the source,\
    \ and the background is\n           used for the zero bits.  Both source and mask\
    \ (if specified)\n           must have depth one (else a Match error), but can\
    \ have any\n           root.  The mask pixmap defines the shape of the cursor;\
    \ that\n           is, the one bits in the mask define which source pixels will\n\
    \           be displayed.  If no mask is given, all pixels of the source\n   \
    \        are displayed.  The mask, if present, must be the same size\n       \
    \    as source (else a Match error).  The x and y coordinates\n           define\
    \ the hotspot, relative to the source's origin, and must\n           be a point\
    \ within the source (else a Match error).\n           The components of the cursor\
    \ may be transformed arbitrarily\n           to meet display limitations.\n  \
    \         The pixmaps can be freed immediately if no further explicit\n      \
    \     references to them are to be made.\n           Subsequent drawing in the\
    \ source or mask pixmap has an\n           undefined effect on the cursor; the\
    \ server might or might\n           not make a copy of the pixmap.\n"
- title: CreateGlyphCursor
  contents:
  - "CreateGlyphCursor\n           cid: CURSOR\n           source-font: FONT\n   \
    \        mask-font: FONT or None\n           source-char, mask-char: CARD16\n\
    \           fore-red, fore-green, fore-blue: CARD16\n           back-red, back-green,\
    \ back-blue: CARD16\n           Errors: IDChoice, Font, Value, Alloc\n       \
    \    Similar to CreateCursor, but the source and mask bitmaps are\n          \
    \ obtained from the specified font glyphs.  The mask font and\n           character\
    \ are optional.  The origin of the source glyph\n           defines the hotspot,\
    \ and the mask is positioned such that\n           the origins are coincident.\
    \  The source and mask need not\n           have the same bounding box metrics.\
    \  If no mask is given,\n           all pixels of the source are displayed.  Note\
    \ that\n           source-char and mask-char are CARD16 (not CHAR2B); for\n  \
    \         two-byte matrix fonts, the 16-bit value should be formed\n         \
    \  with byte1 in the most significant byte and byte2 in the\n           least\
    \ significant byte.\n"
- title: FreeCursor
  contents:
  - "FreeCursor\n           cursor: CURSOR\n           Errors: Cursor\n          \
    \ Deletes the association between the resource id and the\n           cursor.\
    \  The cursor storage will be freed when no other\n           resource references\
    \ it.\n"
- title: RecolorCursor
  contents:
  - "RecolorCursor\n           cursor: CURSOR\n           fore-red, fore-green, fore-blue:\
    \ CARD16\n           back-red, back-green, back-blue: CARD16\n           Errors:\
    \ Cursor\n           Changes the color of a cursor.  If the cursor is being\n\
    \           displayed on a screen, the change is visible immediately.\n"
- title: QueryBestSize
  contents:
  - "QueryBestSize\n           class: {Cursor, Tile, Stipple}\n           drawable:\
    \ DRAWABLE\n           width, height: CARD16\n       =>\n           width, height:\
    \ CARD16\n           Errors: Drawable, Value, Match\n           Returns the \"\
    best\" size that is \"closest\" to the argument\n           size.  For Cursor,\
    \ this is the largest size that can be\n           fully displayed.  For Tile,\
    \ this is the size that can be\n           tiled \"fastest\".  For Stipple, this\
    \ is the size that can\n           be stippled \"fastest\".\n           For Cursor,\
    \ the drawable indicates the desired screen.  For\n           Tile and Stipple,\
    \ the drawable indicates screen, and also\n           possibly window class and\
    \ depth; an InputOnly window cannot\n           be used as the drawable for Tile\
    \ or Stipple (else a Match\n           error).\n"
- title: QueryExtension
  contents:
  - "QueryExtension\n           name: STRING8\n       =>\n           present: BOOL\n\
    \           major-opcode: CARD8\n           first-event: CARD8\n           first-error:\
    \ CARD8\n           Determines if the named extension is present.  If so, the\n\
    \           major opcode for the extension is returned, if it has one,\n     \
    \      otherwise zero is returned.  Any minor opcode and the request\n       \
    \    formats are specific to the extension.  If the extension\n           involves\
    \ additional event types, the base event type code is\n           returned, otherwise\
    \ zero is returned.  The format of the\n           events is specific to the extension.\
    \  If the extension\n           involves additional error codes, the base error\
    \ code is\n           returned, otherwise zero is returned.  The format of\n \
    \          additional data in the errors is specific to the extension.\n     \
    \      The extension name should be in the ASCII encoding, and\n           upper/lower\
    \ case matters.\n"
- title: ListExtensions
  contents:
  - "ListExtensions\n       =>\n           names: LISTofSTRING8\n           Returns\
    \ a list of all extensions supported by the server.\n"
- title: SetKeyboardMapping
  contents:
  - "SetKeyboardMapping\n           map: LISTofCARD8\n       =>\n           status:\
    \ {Success, Busy}\n           Errors: Value\n           Sets the mapping of the\
    \ keyboard.  Elements of the list are\n           indexed starting from one. \
    \ The list must be of length 255.\n           The index is a \"core\" keycode,\
    \ and the element of the list\n           defines the \"effective\" keycode.\n\
    \           A zero element disables a key, no elements can have values 1\n   \
    \        through 7, and no two elements (with index larger than 7) can\n     \
    \      have the same non-zero value.  If the keyboard does not\n           really\
    \ generate a given keycode, specifying a non-zero value\n           for that core\
    \ keycode has no effect.\n           Elements 6 and 7 of the map must always be\
    \ zero.  The first\n           five elements are special:  they specify the keycodes\
    \ (if\n           any) that correspond to the Mod1 through Mod5 modifiers.\n \
    \          Setting one of these entries to zero disables use of that\n       \
    \    modifier bit.  No two of the firstfive elements can have the\n          \
    \ same non-zero value.\n           A server can impose restrictions on how keyboards\
    \ get\n           remapped, e.g., if certain keys do not generate up\n       \
    \    transitions in hardware.\n           If any of the keys or modifiers to be\
    \ altered are currently\n           in the down state, the status reply is Busy\
    \ and the mapping\n           is not changed.\n"
- title: GetKeyboardMapping
  contents:
  - "GetKeyboardMapping\n       =>\n           map: LISTofCARD8\n           Errors:\
    \ Value\n           Returns the current mapping of the keyboard.  Elements of\
    \ the\n           list are indexed starting from one.  The length of the list\n\
    \           is 255.\n           The nominal mapping for a keyboard is almost the\
    \ identity\n           mapping, except that map[i]=0 for keycodes that have no\n\
    \           corresponding physical key, and the first five entries\n         \
    \  indicate the keycodes (if any) corresponding to the Mod1\n           through\
    \ Mod5 modifier bits.\n"
- title: ChangeKeyboardControl
  contents:
  - "ChangeKeyboardControl\n           value-mask: BITMASK\n           value-list:\
    \ LISTofVALUE\n           Errors: Match Value\n           Controls various aspects\
    \ of the keyboard.  The value-mask and\n           value-list specify which controls\
    \ are to be changed.  The\n           possible values are:\n               key-click-percent:\
    \ INT8\n               bell-percent: INT8\n               bell-pitch: INT16\n\
    \               bell-duration: INT16\n               led: CARD8\n            \
    \   led-mode: {On, Off}\n               key: KEYCODE\n               auto-repeat-mode:\
    \ {On, Off, Default}\n           Key-click-percent sets the volume for key clicks\
    \ between 0\n           (off) and 100 (loud) inclusive, if possible.  Setting\
    \ to -1\n           restores the default. Other negative values generate a Value\n\
    \           error.\n           Bell-percent sets the base volume for the bell\
    \ between 0\n           (off) and 100 (loud) inclusive, if possible.  Setting\
    \ to -1\n           restores the default. Other negative values generate a Value\n\
    \           error.\n           Bell-pitch sets the pitch (specified in Hz) of\
    \ the bell, if\n           possible. Setting to -1 restores the default.  Other\n\
    \           negative values generate a Value error.\n           Bell-duration\
    \ sets the duration (specified in milliseconds)\n           of the bell, if possible.\
    \  Setting to -1 restores the\n           default.  Other negative values generate\
    \ a Value error.\n           If both led-mode and led are specified, then the\
    \ state of\n           that LED is changed, if possible.  If only led-mode is\n\
    \           specified, then the state of all LEDs are changed, if\n          \
    \ possible.  At most 32 LEDs are supported, numbered from one.\n           It\
    \ is a Match error if an led is specified without an\n           led-mode.\n \
    \          If both auto-repeat-mode and key are specified, then the\n        \
    \   auto-repeat mode of that key is changed, if possible.  If\n           only\
    \ auto-repeat-mode is specified, then the global\n           auto-repeat mode\
    \ for the entire keyboard is changed, if\n           possible, without affecting\
    \ the per-key settings.  It is\n           a Match error if a key is specified\
    \ without an\n           auto-repeat-mode.\n           A bell generator connected\
    \ with the console but not directly\n           on the keyboard is treated as\
    \ if it were part of the\n           keyboard.\n           The order in which\
    \ controls are verified and altered is\n           server dependent.  If an error\
    \ is generated, a subset of the\n           controls may have been altered.\n"
- title: GetKeyboardControl
  contents:
  - "GetKeyboardControl\n       =>\n           key-click-percent: CARD8\n        \
    \   bell-percent: CARD8\n           bell-pitch: CARD16\n           bell-duration:\
    \ CARD16\n           led-mask: CARD32\n           global-auto-repeat: {On, Off}\n\
    \           auto-repeats: LISTofCARD8\n           Errors: Match\n           Returns\
    \ the current control values for the keyboard.  For the\n           LEDs, the\
    \ least significant bit of led-mask corresponds to\n           LED one, and each\
    \ one bit in led-mask indicates an LED that\n           is lit. Auto-repeats is\
    \ a bit vector; each one bit indicates\n           that auto-repeat is enabled\
    \ for the corresponding key.  The\n           vector is represented as 32 bytes.\
    \  Byte N (from 0) contains\n           the bits for keys 8N to 8N+7, with the\
    \ least significant bit\n           in the byte representing key 8N.\n"
- title: Bell
  contents:
  - "Bell\n           percent: INT8\n           Errors: Match, Value\n           Rings\
    \ the bell on the keyboard at the specified volume\n           relative to the\
    \ base volume for the keyboard, if possible.\n           Percent, which can range\
    \ from -100 to 100 inclusive, is added\n           to the base volume, and the\
    \ sum limited to the range 0 to 100\n           inclusive.\n"
- title: SetPointerMapping
  contents:
  - "SetPointerMapping\n           map: LISTofCARD8\n       =>\n           status:\
    \ {Success, Busy}\n           Errors: Value\n           Sets the mapping of the\
    \ pointer.  Elements of the list are\n           indexed starting from one.  The\
    \ length of the list must be\n           the same as GetPointerMapping would return.\
    \  The index is a\n           \"core\" button number, and the element of the list\
    \ defines\n           the \"effective\" number.\n           A zero element disables\
    \ a button, and elements are not\n           restricted in   value by the number\
    \ of physical buttons, but\n           no two elements can have the same non-zero\
    \ value.\n           If any of the buttons to be altered are currently in the\n\
    \           down state,the status reply is Busy and the mapping is not\n     \
    \      changed.\n"
- title: GetPointerMapping
  contents:
  - "GetPointerMapping\n       =>\n           map: LISTofCARD8\n           Errors:\
    \ Value\n           Returns the current mapping of the pointer.  Elements of the\n\
    \           list are indexed starting from one.  The length of the list\n    \
    \       indicates the number of physical buttons.\n           The nominal mapping\
    \ for a pointer is the identity mapping;\n           map[i]=i.\n"
- title: ChangePointerControl
  contents:
  - "ChangePointerControl\n           do-acceleration, do-threshold: BOOL\n      \
    \     acceleration-numerator, acceleration-denominator: INT16\n           threshold:\
    \ INT16\n           Errors: Match, Value\n           Defines how the pointer moves.\
    \  The acceleration is a\n           multiplier for movement, expressed as a fraction.\
    \  For\n           example, specifying 3/1 means the pointer moves three times\n\
    \           as fast as normal. The fraction may be rounded arbitrarily\n     \
    \      by the server.  Acceleration only takes effect if the\n           pointer\
    \ moves more than threshold pixels at once, and only\n           applies to the\
    \ amount beyond the threshold.  Setting a\n           value to -1 restores the\
    \ default. Other negative values\n           generate a Value error, as does a\
    \ zero value for\n           acceleration-denominator.\n"
- title: GetPointerControl
  contents:
  - "GetPointerControl\n       =>\n           acceleration-numerator, acceleration-denominator:\
    \ CARD16\n           threshold: CARD16\n           Errors: Match\n           Returns\
    \ the current acceleration and threshold for the\n           pointer.\n"
- title: SetScreenSaver
  contents:
  - "SetScreenSaver\n           timeout, interval: INT16\n           prefer-blanking:\
    \ {Yes, No, Default}\n           allow-exposures: {Yes, No, Default}\n       \
    \    Errors: Value\n           Timeout and interval are specified in minutes;\
    \ setting a\n           value to -1 restores the default.  Other negative values\n\
    \           generate a Value error. If the timeout value is zero,\n          \
    \ screen-saver is disabled.  If the timeout value is\n           non-zero, screen-saver\
    \ is enabled.  Once screen-saver\n           is enabled, if no input from the\
    \ keyboard or pointer is\n           generated for timeout minutes, screen-saver\
    \ is activated.\n           For each screen, if blanking is preferred and the\
    \ hardware\n           supports video blanking, the screen will simply go blank.\n\
    \           Otherwise, if either exposures are allowed or the screen\n       \
    \    can be regenerated without sending exposure events to\n           clients,\
    \ the screen is tiled with the root window\n           background tile, randomly\
    \ re-origined each interval\n           minutes if the interval value is non-zero.\
    \  Otherwise, the\n           state of the screen does not change and screen-saver\
    \ is not\n           activated.  Screen-saver is deactivated, and all screen\n\
    \           states are restored, at the next keyboard or pointer input\n     \
    \      or at the next ForceScreenSaver with mode Reset.\n"
- title: GetScreenSaver
  contents:
  - "GetScreenSaver\n       =>\n           timeout, interval: CARD16\n           prefer-blanking:\
    \ {Yes, No}\n           allow-exposures: {Yes, No}\n           Returns the current\
    \ screen-saver control values.\n"
- title: ForceScreenSaver
  contents:
  - "ForceScreenSaver\n           mode: {Activate, Reset}\n           If the mode\
    \ is Activate and screen-saver is currently\n           deactivated, then screen-saver\
    \ is activated (even if\n           screen-saver has been disabled with a timeout\
    \ value of zero).\n           If the mode is Reset and screen-saver is currently\
    \ enabled,\n           then screen-saver is deactivated (if it was activated),\
    \ and\n           then the activation timer is reset to its initial state, as\n\
    \           if device input had just been received.\n"
- title: ChangeHosts
  contents:
  - "ChangeHosts\n           mode: {Insert, Delete}\n           host: HOST\n     \
    \      Errors: Access, Value\n           Adds or removes the specified host from\
    \ the access control\n           list.  When the access control mechanism is enabled\
    \ and a\n           host attempts to establish a connection to the server, the\n\
    \           host must be in this list or the server will refuse the\n        \
    \   connection.\n           The client must reside on the same host as the server,\
    \ and/or\n           have been granted permission in the initial authorization\
    \ at\n           connection setup.\n           An initial access control list\
    \ can be specified, typically\n           by naming a file that the server reads\
    \ at startup and reset.\n"
- title: ListHosts
  contents:
  - "ListHosts\n       =>\n           mode: {Enabled, Disabled}\n           hosts:\
    \ LISTofHOST\n           Returns the hosts on the access control list, and whether\
    \ use\n           of the list at connection setup is currently enabled or\n  \
    \         disabled.\n           Each HOST is padded to a multiple of four bytes.\n"
- title: ChangeAccessControl
  contents:
  - "ChangeAccessControl\n           mode: {Enable, Disable}\n           Errors: Value,\
    \ Access\n           Enables or disables the use of the access control list at\n\
    \           connection setups.\n           The client must reside on the same\
    \ host as the server, and/or\n           have been granted permission in the initial\
    \ authorization at\n           connection setup.\n"
- title: ChangeCloseDownMode
  contents:
  - "ChangeCloseDownMode\n           mode: {Destroy, RetainPermanent, RetainTemporary}\n\
    \           Errors: Value\n           Defines what will happen to the client's\
    \ resources at\n           connection close. A connection starts in Destroy mode.\
    \  The\n           meaning of the close-down mode is described in Section 11.\n"
- title: KillClient
  contents:
  - "KillClient\n           resource: CARD32 or AllTemporary\n           Errors: Value\n\
    \           If a valid resource is specified, forces a close-down of the\n   \
    \        client that created the resource.  If the client has already\n      \
    \     terminated in either RetainPermanent or RetainTemporary mode,\n        \
    \   all of the client's resources are destroyed (see Section 11).\n          \
    \ If AllTemporary is specified, then the resources of all\n           clients\
    \ that have terminated in RetainTemporary are\n           destroyed.\n"
- title: NoOperation
  contents:
  - "NoOperation\n           This request has no arguments and no results, but the\
    \ request\n           length field can be non-zero, allowing the request to be\
    \ any\n           multiple of 4 bytes in length.  The bytes contained in the\n\
    \           request are uninterpreted by the server.\n           This request\
    \ can be used in its minimum 4 byte form as\n           \"padding\" where necessary\
    \ by client libraries that find it\n           convenient to force requests to\
    \ begin on 64-bit boundaries.\n"
- title: SECTION 11.  CONNECTION CLOSE
  contents:
  - 'SECTION 11.  CONNECTION CLOSE

    '
- title: 'What happens at connection close:'
  contents:
  - "What happens at connection close:\n           All event selections made by the\
    \ client are discarded.  If\n           the client has the pointer actively grabbed,\
    \ an\n           UngrabPointer is performed.  If the client has the keyboard\n\
    \           actively grabbed,  an UngrabKeyboard is performed.  All\n        \
    \   passive grabs by the client are eleased.  If the client has\n           the\
    \ server grabbed, and UngrabServer is performed.  If\n           close-down mode\
    \ (see ChangeCloseDownMode) is\n           RetainPermanent or RetainTemporary,\
    \ then all resources\n           (including colormap entries)    allocated by\
    \ the client are\n           marked as \"permanent\" or \"temporary\", respectively\
    \ (but\n           this does not prevent other clients from explicitly\n     \
    \      destroying them).  If the mode is Destroy, then all of the\n          \
    \ client's resources are destroyed as described below.\n"
- title: 'What happens when a client''s resources are destroyed:'
  contents:
  - "What happens when a client's resources are destroyed:\n           For each window\
    \ in the client's save-set, if the window\n           created by the client, that\
    \ save-set window is reparented to\n           the closest ancestor such that\
    \ the save-set window is not an\n           inferior of a window created by the\
    \ client.  If the save-set\n           window is unmaped, a MapWindow request\
    \ is performed on it.\n           After save-set processing, all windows created\
    \ by the client\n           are destroyed.  For each non-window resource created\
    \ by the\n           client, the appropriate Free request is performed.  All\n\
    \           colors and colormap entries allocated by the client are\n        \
    \   freed.\n"
- title: 'What happens when the last connection to a server closes:'
  contents:
  - "What happens when the last connection to a server closes:\n           A server\
    \ goes through a cycle, of having no connections and\n           having some connections.\
    \  At every transition to the state\n           of having no connections, the\
    \ server \"resets\" its state, as\n           if it had just been started.  This\
    \ starts by destroying all\n           lingering resources from clients that have\
    \ terminated in\n           RetainPermanent or RetainTemporary mode.  It additionally\n\
    \           includes deleting all but the predefined atom identifiers,\n     \
    \      deleting all properties on all root windows, resetting all\n          \
    \ device maps and attributes (key click, bell volume,\n           acceleration),\
    \ resetting the access control list, restoring\n           the standard root tiles\
    \ and cursors, restoring the default\n           font path, and restoring the\
    \ input focus to state\n           PointerRoot.\n"
- title: SECTION 12.  EVENTS
  contents:
  - "SECTION 12.  EVENTS\n      When a button is pressed with the pointer in some\
    \ window W, and\n      no active pointer grab is in progress, then the ancestors\
    \ if W are\n      searched from the root down, looking for a passive grab to\n\
    \      activate.  If no matching passive grab on the button exists, then\n   \
    \   an active grab is started automatically for the client receiving\n      the\
    \ event, and the last-pointer-grab time is set to the current\n      server time.\
    \ The effect is essentially equivalent to a GrabButton\n      with arguments:\n\
    \           event-window: the event window\n           event-mask: the client's\
    \ selected events on the event window\n           pointer-mode and keyboard-mode:\
    \ Asynchronous\n           owner-events: True if the client has OwnerGrabButton\
    \ selected\n                   on the event window, else False\n           confine-to:\
    \ None\n           cursor: None\n   The grab is terminated automatically when\
    \ all buttons are released.\n   UngrabPointer and ChangeActiveGrab can both be\
    \ used to modify the\n   active grab.\n   KeyPress\n     and\n   KeyRelease\n\
    \     and\n   ButtonPress\n     and\n   ButtonRelease\n     and\n   MotionNotify\n\
    \           root, event: WINDOW\n           child: WINDOW or None\n          \
    \ same-screen: BOOL\n           root-x, root-y, event-x, event-y: INT16\n    \
    \       detail: <see below>\n           state: SETofKEYBUTMASK\n           time:\
    \ TIMESTAMP\n           Generated when a key or button changes state, or the pointer\n\
    \           moves. The \"source\" of the event is the window the pointer\n   \
    \        is in.  The window with respect to which the event is\n           normally\
    \ reported is found by looking up the hierarchy\n           (starting with  the\
    \ source window) for the first window on\n           which any client has selected\
    \ interest in the event,\n           provided no intervening window prohibits\
    \ event generation by\n           including the event type in its do-not-propagate-mask.\
    \  The\n           actual window used for reporting can be modified by active\n\
    \           grabs and the focus window. The window the event is reported\n   \
    \        with respect to is called the \"event\" window.\n           Root is the\
    \ root window of the \"source\" window, and root-x\n           and root-y are\
    \ the pointer coordinates relative to root's\n           origin at the time of\
    \ the event.  Event is the \"event\"\n           window.  If the event window\
    \ is on the same screen as root,\n           then event-x and event-y are the\
    \ pointer coordinates relative\n           to the event window's origin; otherwise\
    \ event-x and event-y\n           are zero.  If the source window is an inferior\
    \ of the event\n           window, then child is set to the child of the event\
    \ window\n           that is an ancestor of the source window.  The state\n  \
    \         component gives the state of the buttons and modifier keys\n       \
    \    just before the event.  The detailcomponent varies with\n           the event\
    \ type:\n               KeyPress, KeyRelease:               KEYCODE\n        \
    \       ButtonPress, ButtonRelease:         BUTTON\n               MotionNotify:\
    \                       {Normal, Hint}\n           MotionNotify events are only\
    \ generated when the motion\n           begins and ends in the window.  The granularity\
    \ of motion\n           events is not guaranteed, but a client selecting for motion\n\
    \           events is guaranteed to get at least one event when the\n        \
    \   pointer moves and comes to rest.  Selecting PointerMotion\n           receives\
    \ events independent of the state of the pointer\n           buttons.  By selecting\
    \ some subset of Button[1-5]Motion\n           instead, MotionNotify events will\
    \ only be received when one\n           or more of the specified buttons are pressed.\
    \  By selecting\n           ButtonMotion, MotionNotify events will received only\
    \ when at\n           least one button is pressed.  The events are always of type\n\
    \           MotionNotify, independent of the selection. If\n           PointerMotionHint\
    \ is selected, the server is free to send\n           only one MotionNotify event\
    \ (with detail Hint) to the client\n           for the event window, until either\
    \ the key or button state\n           changes, or the pointer leaves the event\
    \ window, or the\n           client issues a QueryPointer or GetMotionEvents request.\n\
    \   EnterNotify\n     and\n   LeaveNotify\n           root, event: WINDOW\n  \
    \         child: WINDOW or None\n           same-screen: BOOL\n           root-x,\
    \ root-y, event-x, event-y: INT16\n           mode: {Normal, Grab, Ungrab}\n \
    \          detail: {Ancestor, Virtual, Inferior, Nonlinear,\n                \
    \    NonlinearVirtual}\n           focus: BOOL\n           state: SETofKEYBUTMASK\n\
    \           time: TIMESTAMP\n           If pointer motion causes the pointer to\
    \ be in a different\n           window than before, EnterNotify and LeaveNotify\
    \ events are\n           generated instead of a  MotionNotify event.  Only clients\n\
    \           selecting EnterWindow on a window receive EnterNotify events,\n  \
    \         and only clients selection LeaveNotifyreceive LeaveNotify\n        \
    \   events.  The pointer position reported in the event is always\n          \
    \ the \"final\" position, not the \"initial\" position of the\n           pointer.\
    \  In a LeaveNotify event, if a child of the event\n           window contains\
    \ the \"initial\" position of the pointer, then\n           the child component\
    \ is set to that child, otherwise it is\n           None.  For an EnterNotify\
    \ event, if a child of the event\n           window contains the \"final\" pointer\
    \ position, then the child\n           component is set to that child, otherwise\
    \ it is None.  If\n           the the event window is the focus window or an inferior\
    \ of\n           the focus window, then focus is True, and otherwisefocus is\n\
    \           False.\n           Normal pointer motion events have mode Normal;\
    \ pseudo-motion\n           events when a grab actives have mode Grab, and pseudo-motion\n\
    \           events when a grab deactivates have mode Ungrab.\n       Normal events\
    \ are generated as follows:\n       When the pointer moves from window A to window\
    \ B, and A is an\n       inferior of B:\n           LeaveNotify with detail Ancestor\
    \ is generated on A\n           LeaveNotify with detail Virtual is generated on\
    \ each window\n           between A and B exclusive (in that order)\n        \
    \   EnterNotify with detail Inferior is generated on B\n       When the pointer\
    \ moves from window A to window B, and B is an\n       inferior of A:\n      \
    \     LeaveNotify with detail Inferior is generated on A\n           EnterNotify\
    \ with detail Virtual is generated on each window\n                   between\
    \ A and B exclusive (in that order)\n           EnterNotify with detail Ancestor\
    \ is generated on B\n       When the pointer moves from window A to window B,\
    \ with window C\n       being their least common ancestor:\n           LeaveNotify\
    \ with detail Nonlinear is generated on A\n           LeaveNotify with detail\
    \ NonlinearVirtual is generated on each\n                   window between A and\
    \ C exclusive (in that order)\n           EnterNotify with detail NonlinearVirtual\
    \ is generated on each\n                   window between C and B exclusive (in\
    \ that order)\n           EnterNotify with detail Nonlinear is generated on B\n\
    \       When the pointer moves from window A to window B, on different\n     \
    \  screens:\n           LeaveNotify with detail Nonlinear is generated on A\n\
    \           LeaveNotify with detail NonlinearVirtual is generated on each\n  \
    \                 window above A up to and including its root (in\n          \
    \         order)\n           EnterNotify with detail NonlinearVirtual is generated\
    \ on each\n           window\n                   from B's root down to but not\
    \ including B (in order)\n           EnterNotify with detail Nonlinear is generated\
    \ on B\n       When a pointer grab activates (but after any initial warp into\
    \ a\n       confine-to window), with G the grab-window for the grab and P the\n\
    \       window the pointer is in:\n           EnterNotify and LeaveNotify events\
    \ with mode Grab are\n           generated (as for Normal above) as if the pointer\
    \ were to\n           suddenly warp from its current position in P to some position\n\
    \           in G.However,  the pointer does not warp, and the pointer\n      \
    \     position is used as  both the \"initial\"and \"final\" positions\n     \
    \      for the events.\n       When a pointer grab deactivates, with G the grab-window\
    \ for the\n       grab and P the window the pointer is in:\n           EnterNotify\
    \ and LeaveNotify events with mode Ungrab are\n           generated (as for Normal\
    \ above) as if the pointer were to\n           suddenly warp from from some position\
    \ in G to its current\n           position in P.  However, the pointer does not\
    \ warp, and the\n           current pointer position is used as both the \"initial\"\
    \ and\n           \"final\" positions for the events.\n   FocusIn\n     and\n\
    \   FocusOut\n           event: WINDOW\n           mode: {Normal, WhileGrabbed,\
    \ Grab, Ungrab}\n           detail: {Ancestor, Virtual, Inferior, Nonlinear,\n\
    \                    NonlinearVirtual, Pointer, PointerRoot, None}\n         \
    \  Generated when the input focus changes.  Reported to clients\n           selecting\
    \ FocusChange on the window.  Events generated by\n           SetInputFocus when\
    \ the keyboard is not grabbed have mode\n           Normal; events generated by\
    \ SetInputFocus when the keyboard\n           is grabbed have mode WhileGrabbed;\
    \ events generated when a\n           keyboard grab actives have mode Grab, and\
    \ events generated\n           when a keyboard grab deactivates have mode Ungrab.\n\
    \       Normal and WhileGrabbed events are generated as follows:\n       When\
    \ the focus moves from window A to window B, and A is an\n       inferior of B,\
    \ with the pointer in window P:\n           FocusOut with detail Ancestor is generated\
    \ on A\n           FocusOut with detail Virtual is generated on each window\n\
    \           between A and B exclusive (in that order)\n           FocusIn with\
    \ detail Inferior is generated on B\n           If P is an inferior of B, but\
    \ P is not A or an inferior of A\n                   or an ancestor of A, FocusIn\
    \ with detail Pointer is\n                   generated on each window below B\
    \ down to and\n                   including P (in order)\n       When the focus\
    \ moves from window A to window B, and B is an\n       inferior of A, with the\
    \ pointer in window P:\n           If P is an inferior of A, but P is not A or\
    \ an inferior of B\n                   or an ancestor of B, FocusOut with detail\
    \ Pointer is\n                   generated on each window from P up to but not\n\
    \                   including A (in order)\n           FocusOut with detail Inferior\
    \ is generated on A\n           FocusIn with detail Virtual is generated on each\
    \ window\n                   between A and B exclusive (in that order)\n     \
    \      FocusIn with detail Ancestor is generated on B\n       When the focus moves\
    \ from window A to window B, with window C\n       being their least common ancestor,\
    \ and with the pointer in\n       window P:\n           If P is an inferior of\
    \ A, FocusOut with detail Pointer is\n                   generated on each window\
    \ from P up to but not\n                   including A (in order)\n          \
    \ FocusOut with detail Nonlinear is generated on A\n           FocusOut with detail\
    \ NonlinearVirtual is generated on each\n                   window between A and\
    \ C exclusive (in that order)\n           FocusIn with detail NonlinearVirtual\
    \ is generated on each\n                   window between C and B exclusive (in\
    \ that order)\n           FocusIn with detail Nonlinear is generated on B\n  \
    \         If P is an inferior of B, FocusIn with detail Pointer is\n         \
    \          generated on each window below B down to and\n                   including\
    \ P (in order)\n       When the focus moves from window A to window B, on different\n\
    \       screens, with the pointer in window P:\n           If P is an inferior\
    \ of A, FocusOut with detail Pointer is\n                   generated on each\
    \ window from P up to but not\n                   including A (in order)\n   \
    \        FocusOut with detail Nonlinear is generated on A\n           FocusOut\
    \ with detail NonlinearVirtual is generated on each\n                   window\
    \ above A up to and including its root (in\n                   order)\n      \
    \     FocusIn with detail NonlinearVirtual is generated on each\n            \
    \       window from B's root down to but not including B\n                   (in\
    \ order)\n           FocusIn with detail Nonlinear is generated on B\n       \
    \    If P is an inferior of B, FocusIn with detail Pointer is\n              \
    \     generated on each window below B down to and\n                   including\
    \ P (in order)\n       When the focus moves from window A to PointerRoot (or None)\n\
    \           If P is an inferior of A, FocusOut with detail Pointer is\n      \
    \             generated on each window from P up to but not\n                \
    \   including A (in order)\n           FocusOut with detail Nonlinear is generated\
    \ on A\n           FocusOut with detail NonlinearVirtual is generated on each\n\
    \                   window above A up to and including its root (in\n        \
    \           order)\n           FocusIn with detail PointerRoot (or None) is generated\
    \ on\n                   all root windows\n       When the focus moves from PointerRoot\
    \ (or None) to window A:\n           FocusOut with detail PointerRoot (or None)\
    \ is generated on\n                   all root windows\n           FocusIn with\
    \ detail NonlinearVirtual is generated on each\n                   window from\
    \ A's root down to but not including A\n                   (in order)\n      \
    \     FocusIn with detail Nonlinear is generated on A\n           If P is an inferior\
    \ of A, FocusIn with detail Pointer is\n                   generated on each window\
    \ below A down to and\n                   including P (in order)\n       When\
    \ the focus moves from PointerRoot to None (or vice versa):\n           FocusOut\
    \ with detail PointerRoot (or None) is generated on\n                   all root\
    \ windows\n           FocusIn with detail None (or PointerRoot) is generated on\n\
    \                   all root windows\n       When a keyboard grab activates, with\
    \ G the grab-window for the\n       grab and F the current focus:\n          \
    \ FocusIn and FocusOut events with mode Grab are generated (as\n           for\
    \ Normal above) as if the focus were to change from F to G\n       When a keyboard\
    \ grab deactivates, with G the grab-window for the\n       grab and F the current\
    \ focus:\n           FocusIn and FocusOut events with mode Ungrab are generated\n\
    \           (as for Normal above) as if the focus were to change from G\n    \
    \       to F\n   KeymapNotify\n           keys: LISTofCARD8\n           The value\
    \ is a bit vector, as described in QueryKeymap.\n           Reported to clients\
    \ selecting KeymapState on a window.\n           Generated immediately after every\
    \ EnterNotify and FocusIn.\n   Expose\n           window: WINDOW\n           x,\
    \ y, width, height: CARD16\n           last-in-series: BOOL\n           Reported\
    \ to clients selecting Exposure on the window.\n           Possibly generated\
    \ when a region of the window becomes\n           viewable, but might only be\
    \ generated when a region becomes\n           visible. All of the regions exposed\
    \ by a given \"action\" are\n           guaranteed to be reported contiguously;\
    \ if last-in-series is\n           False then another exposure follows.\n    \
    \       The x and y coordinates are relative to drawable's origin,\n         \
    \  and  specify the upper left corner of a rectangule.  The\n           width\
    \ and height specify the extent of the rectangle.\n           Expose events are\
    \ never generated on InputOnly windows.\n"
- title: GraphicsExposure
  contents:
  - "GraphicsExposure\n           drawable: DRAWABLE\n           x, y, width, height:\
    \ CARD16\n           last-in-series: BOOL\n           major-opcode: CARD8\n  \
    \         minor-opcode: CARD16\n           Reported to clients selecting graphics-exposures\
    \ in a\n           graphics context. Generated when a destination region could\n\
    \           not be computed due to an obscured or out-of-bounds source\n     \
    \      region.  All of the regions exposed by a given graphics\n           request\
    \ are guaranteed to be reported contiguously; if\n           last-in-series is\
    \ False then another exposure follows.\n           The x and y coordinates are\
    \ relative to drawable's origin,\n           and specify the upper left corner\
    \ of a rectangule.  The width\n           and height specify the extent of the\
    \ rectangle.\n           The major and minor opcodes identify the graphics request\n\
    \           used.  For the core protocol, major-opcode is always\n           CopyArea\
    \ or CopyPlane and minor-opcode is always zero.\n"
- title: NoExposure
  contents:
  - "NoExposure\n           drawable: DRAWABLE\n           major-opcode: CARD8\n \
    \          minor-opcode: CARD16\n           Reported to clients selecting graphics-exposures\
    \ in a\n           graphics context. Generated when a graphics request that\n\
    \           might produce GraphicsExposure events does not produce any.\n    \
    \       The drawable specifies the destination used for the\n           graphics\
    \ request.\n           The major and minor opcodes identify the graphics request\n\
    \           used.  For the core protocol, major-opcode is always CopyArea\n  \
    \         or CopyPlane and minor-opcode is always zero.\n"
- title: VisibilityNotify
  contents:
  - "VisibilityNotify\n           window: WINDOW\n           state: {Unobscured, PartiallyObscured,\
    \ FullyObscured}\n           Reported to clients selecting VisibilityChange on\
    \ the\n           window.  In the following, the state of the window is\n    \
    \       calculated ignoring all of the window's subwindows.  When\n          \
    \ a window changes state from partially or fully obscured or\n           not viewable\
    \ to viewable and completely unobscured, an\n           event with Unobscured\
    \  is generated.  When a window changes\n           state from a) viewable and\
    \ completely unobscured or b) not\n           viewable, to viewable and partially\
    \ obscured, an event with\n           PartiallyObscured is generated.  When a\
    \ window changes state\n           from a) viewable and completely unobscured\
    \ or b) viewable and\n           partially obscured or c) not viewable, to viewable\
    \ and fully\n           obscured, an event with FullyObscured is generated.\n\
    \           VisibilityNotify events are never generated on InputOnly\n       \
    \    windows.\n"
- title: CreateNotify
  contents:
  - "CreateNotify\n           parent, window: WINDOW\n           x, y: INT16\n   \
    \        width, height, border-width: CARD16\n           override-redirect: BOOL\n\
    \           Reported to clients selecting SubstructureNotify on the\n        \
    \   parent. Generated when the window is created.  The arguments\n           are\
    \ as in the CreateWindow request.\n"
- title: DestroyNotify
  contents:
  - "DestroyNotify\n           event, window: WINDOW\n           Reported to clients\
    \ selecting StructureNotify on the window,\n           and to clients selecting\
    \ SubstructureNotify on the parent.\n           Generated when the window is destroyed.\
    \  \"Event\" is the\n           window on which the event was   generated, and\
    \ \"window\" is\n           the window that is destroyed.\n"
- title: UnmapNotify
  contents:
  - "UnmapNotify\n           event, window: WINDOW\n           from-configure: BOOL\n\
    \           Reported to clients selecting StructureNotify on the window,\n   \
    \        and to clients selecting SubstructureNotify on the parent.\n        \
    \   Generated when the window changes state from mapped to\n           unmapped.\
    \ \"Event\" is the window on which the event was\n           generated, and \"\
    window\" is the window that is unmapped.  The\n           from-configure flag\
    \ is True if the event was generated  as a\n           result of the window's\
    \ parent being resized when the window\n           itself had a win-gravity of\
    \ Unmap.\n"
- title: MapNotify
  contents:
  - "MapNotify\n           event, window: WINDOW\n           override-redirect: BOOL\n\
    \           Reported to clients selecting StructureNotify on the window,\n   \
    \        and to clients selecting SubstructureNotify on the parent.\n        \
    \   Generated when the window changes state from unmapped to\n           mapped.\
    \ \"Event\" is the window on which the event was\n           generated, and \"\
    window\" is the window that is mapped.  The\n           override-redirect flag\
    \ is from the window's attribute.\n"
- title: MapRequest
  contents:
  - "MapRequest\n           parent, window: WINDOW\n           Reported to the client\
    \ selecting SubstructureRedirect on the\n           parent. Generated when a MapWindow\
    \ request is issued on an\n           unmapped window with an override-redirect\
    \ attribute of False.\n"
- title: ReparentNotify
  contents:
  - "ReparentNotify\n           event, window, parent: WINDOW\n           x, y: INT16\n\
    \           override-redirect: BOOL\n           Reported to clients selecting\
    \ SubstructureNotify on either\n           the old or the new parent, and to clients\
    \ selecting\n           StructureNotify on the window.  Generated when the window\n\
    \           is reparented.  \"Event\" is the window on which the event\n     \
    \      was generated, \"window\" is the window that has been\n           re-rooted,\
    \ and \"parent\" specifies the new parent.  The x\n           and y coordinates\
    \ are relative to the new parent's origin,\n           and specify the position\
    \ of the upper left outer corner of\n           the window.  The override-redirect\
    \ flag is from the\n           window's attribute.\n"
- title: ConfigureNotify
  contents:
  - "ConfigureNotify\n           event, window: WINDOW\n           x, y: INT16\n \
    \          width, height, border-width: CARD16\n           above-sibling: WINDOW\
    \ or None\n           override-redirect: BOOL\n           Reported to clients\
    \ selecting StructureNotify on the window,\n           and to clients selecting\
    \ SubstructureNotify on the parent.\n           Generated when a ConfigureWindow\
    \ request actually changes the\n           state of the window. \"Event\" is the\
    \ window on which the event\n           was generated, and \"window\" is the window\
    \ that is changed.\n           If above-sibling is None, then the window is on\
    \ the bottom of\n           the stack with respect to siblings; otherwise, the\
    \ window is\n           immediately on top of the specified sibling.  The\n  \
    \         override-redirect flag is from the window's attribute.\n"
- title: GravityNotify
  contents:
  - "GravityNotify\n           event, window: WINDOW\n           x, y: INT16\n   \
    \        Reported to clients selecting SubstructureNotify on the\n           parent,\
    \ and to clients selecting StructureNotify on the\n           window.  Generated\
    \ when a window is moved because of a\n           change in size of the parent.\
    \  \"Event\" is the window on\n           which the event was generated, and \"\
    window\" is the\n           window that is moved.\n"
- title: ResizeRequest
  contents:
  - "ResizeRequest\n           window: WINDOW\n           width, height: CARD16\n\
    \           Reported to the client selecting ResizeRedirect on the\n         \
    \  window. Generated when a ConfigureWindow request by some\n           other\
    \ client on the window attempts to change the size of the\n           window.\
    \ The width and height are the inside size, not\n           including the border.\n"
- title: ConfigureRequest
  contents:
  - "ConfigureRequest\n           parent, window: WINDOW\n           x, y: INT16\n\
    \           width, height, border-width: CARD16\n           above-sibling: WINDOW\
    \ or None\n           Reported to the client selecting SubstructureRedirect on\
    \ the\n           parent. Generated when a ConfigureWindow request is issued on\n\
    \           the window by some other client.  The geometry is as derived\n   \
    \        from the request.  The above-sibling is the sibling the\n           window\
    \ should be placed directly on top of; if None, then the\n           window should\
    \ be placed on the bottom.\n"
- title: CirculateNotify
  contents:
  - "CirculateNotify\n           event, window: WINDOW\n           place: {Top, Bottom}\n\
    \           Reported to clients selecting StructureNotify on the window,\n   \
    \        and to clients selecting SubstructureNotify on the parent.\n        \
    \   Generated when the window is actually restacked from a\n           CirculateWindow\
    \ request.  \"Event\" is the window on which the\n           event was generated,\
    \ and \"window\" is the window that is\n           restacked.  If place is Top,\
    \ the window is now on top of all\n           siblings; otherwise it is below\
    \ all siblings.\n"
- title: CirculateRequest
  contents:
  - "CirculateRequest\n           parent, window: WINDOW\n           place: {Top,\
    \ Bottom}\n           Reported to the client selecting SubstructureRedirect on\
    \ the\n           parent. Generated when a CirculateWindow request is issued on\n\
    \           the parent and a window actually needs to be restacked.  The\n   \
    \        window specifies the window to be restacked, and place\n           specifies\
    \ what the new position in the stacking order should\n           be.\n"
- title: PropertyNotify
  contents:
  - "PropertyNotify\n           window: WINDOW\n           atom: ATOM\n          \
    \ state: {NewValue, Deleted}\n           time: TIMESTAMP\n           Reported\
    \ to clients selecting PropertyChange on the window.\n           Generated when\
    \ a property of the window is changed.  The\n           timestamp indicates the\
    \ server time when the property was\n           changed.\n"
- title: SelectionClear
  contents:
  - "SelectionClear\n           owner: WINDOW\n           selection: ATOM\n      \
    \     time: TIMESTAMP\n           Reported to the current owner of a selection.\
    \  Generated on\n           the window losing ownership when a new owner is being\n\
    \           defined.  The timestamp is the last-change time recorded for\n   \
    \        the selection.\n"
- title: SelectionRequest
  contents:
  - "SelectionRequest\n           owner: WINDOW\n           selection: ATOM\n    \
    \       target: ATOM\n           property: ATOM or None\n           requestor:\
    \ WINDOW\n           time: TIMESTAMP or CurrentTime\n           Reported to the\
    \ owner of a selection.  Generated when a\n           client issues a ConvertSelection\
    \ request. The arguments are\n           as in the request.\n           The owner\
    \ should convert the selection based on the specified\n           target type.\
    \  If a property is specified, the owner should\n           store the result as\
    \ that property on the requestor window,\n           and then send a SelectionNotify\
    \ event to the requestor using\n           SendEvent.  If the selection cannot\
    \ be converted as\n           requested, the owner should send a SelectionNotify\
    \ with the\n           property set to None.\n"
- title: SelectionNotify
  contents:
  - "SelectionNotify\n           requestor: WINDOW\n           selection, target:\
    \ ATOM\n           property: ATOM or None\n           time: TIMESTAMP or CurrentTime\n\
    \           This event is only generated by clients using SendEvent.  The\n  \
    \         owner of a selection should send this event to a requestor\n       \
    \    when a selection has been converted and stored as a property,\n         \
    \  or when a selection conversion could not be performed\n           (indicated\
    \ with property None).\n"
- title: ColormapNotify
  contents:
  - "ColormapNotify\n           window: WINDOW\n           colormap: COLORMAP or None\n\
    \           new: BOOL\n           state: {Installed, Uninstalled}\n          \
    \ Reported to clients selecting ColormapChange on the window.\n           Generated\
    \ with value True for new when the colormap attribute\n           of the window\
    \ is changed.  Generated with value False for new\n           when the colormap\
    \ of a window is installed or uninstalled. In\n           either case, state indicates\
    \ whether the colormap is\n           currently installed.\n"
- title: ClientMessage
  contents:
  - "ClientMessage\n           window: WINDOW\n           type: ATOM\n           format:\
    \ {8, 16, 32}\n           data: LISTofINT8 or LISTofINT16 or LISTofINT32\n   \
    \        This event is only generated by clients using SendEvent.  The\n     \
    \      type specifies how the data is to be interpreted by the\n           receiving\
    \ client; the server places no interpretation on the\n           type or the data.\
    \  The format specifies whether the data\n           should be viewed as a list\
    \ of 8-bit, 16-bit, or 32-bit\n           quantities, so that the server can correctly\
    \ byte-swap as\n           necessary. The data always consists of either 20 8-bit\
    \ values\n           or 10 16-bit values or 5 32-bit values, although particular\n\
    \           message types might not make use of all of these values.\n"
- title: SECTION 13.  FLOW CONTROL AND CONCURRENCY
  contents:
  - "SECTION 13.  FLOW CONTROL AND CONCURRENCY\n    Whenever the server is writing\
    \ to a given connection, it is\n    permissible for the server to stop reading\
    \ from that connection (but\n    if the writing would block it must continue to\
    \ service other\n    connections).  The server is not required to buffer more\
    \ than a\n    single request per connection at one time.  For a given connection\n\
    \    to the server, a client can block while reading from the connection,\n  \
    \  but should undertake to read (events and errors) when writing would\n    block.\
    \ Failure on the part of a client to obey this rule could\n    result in a deadlocked\
    \ connection, although deadlock is probably\n    unlikely unless the transport\
    \ layer has very little buffering, or\n    unless the client attempts to send\
    \ large numbers of requests without\n    ever reading replies or checking for\
    \ errors and events.\n    If a server is implemented with internal concurrency,\
    \ the overall\n    effect must be as if individual requests are executed to completion\n\
    \    in some serial order, and that requests from a given connection are\n   \
    \ executed in delivery order (i.e., the total execution order is a\n    shuffle\
    \ of the individual streams).  The \"execution\" of a request\n    includes validating\
    \ all arguments, collecting all data for any\n    reply, and generating (and queueing)\
    \ all required events, but does\n    not include the actual transmission of the\
    \ reply and the events.\n    In addition, the   effect of any other \"cause\"\
    \ (e.g., activation of\n    a grab, pointer motion) that can generate multiple\
    \ events must\n    effectively generate (and queue) all required events indivisibly\n\
    \    with respect to all other causes and requests.\n"
