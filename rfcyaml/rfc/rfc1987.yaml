- title: __initial_text__
  contents:
  - "       Ipsilon's General Switch Management Protocol Specification\n         \
    \                     Version 1.1\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The General Switch Management Protocol (GSMP), is a general purpose\n\
    \   protocol to control an ATM switch. GSMP allows a controller to\n   establish\
    \ and release connections across the switch; add and delete\n   leaves on a point-to-multipoint\
    \ connection; manage switch ports;\n   request configuration information; and\
    \ request statistics.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction....................................................3\n\
    \   2. GSMP Packet Format..............................................4\n   3.\
    \ Connection Management Messages..................................7\n      3.1\
    \ Add Branch Message.........................................11\n      3.2 Delete\
    \ Branch Message......................................12\n      3.3 Delete Tree\
    \ Message........................................13\n      3.4 Verify Tree Message........................................13\n\
    \      3.5 Delete All Message.........................................14\n   \
    \   3.6 Move Branch Message........................................14\n   4. Port\
    \ Management Message........................................16\n   5. Statistics\
    \ Messages............................................20\n      5.1 VC Activity\
    \ Message........................................20\n      5.2 Port and VC Statistics\
    \ Messages............................23\n          5.2.1 Port Statistics Message..............................26\n\
    \          5.2.2 VC Statistics Message................................26\n   6.\
    \ Configuration..................................................26\n      6.1\
    \ Switch Configuration Message...............................27\n      6.2 Port\
    \ Configuration Message.................................28\n      6.3 All Ports\
    \ Configuration Message............................32\n   7. Event Messages.................................................33\n\
    \      7.1 Port Up Message............................................35\n   \
    \   7.2 Port Down Message..........................................35\n      7.3\
    \ Invalid VPI/VCI Message....................................35\n      7.4 New\
    \ Port Message...........................................35\n      7.5 Dead Port\
    \ Message..........................................36\n   8. Adjacency Protocol.............................................36\n\
    \      8.1 Packet Format..............................................36\n   \
    \   8.2 Procedure..................................................39\n   9. Failure\
    \ Response Messages......................................41\n   References........................................................43\n\
    \   Security Considerations...........................................43\n   Authors'\
    \ Addresses................................................43\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The General Switch Management Protocol (GSMP), is a general\
    \ purpose\n   protocol to control an ATM switch. GSMP allows a controller to\n\
    \   establish and release connections across the switch; add and delete\n   leaves\
    \ on a point-to-multipoint connection; manage switch ports;\n   request configuration\
    \ information; and request statistics. It also\n   allows the switch to inform\
    \ the controller of asynchronous events\n   such as a link going down. GSMP runs\
    \ across an ATM link connecting\n   the controller to the switch, on a control\
    \ connection (virtual\n   channel) established at initialization. The GSMP protocol\
    \ is\n   asymmetric, the controller being the master and the switch being the\n\
    \   slave. Multiple switches may be controlled by a single controller\n   using\
    \ multiple instantiations of the protocol over separate control\n   connections.\n\
    \   A switch is assumed to contain multiple \"ports\". Each port is a\n   combination\
    \ of one \"input port\" and one \"output port\". Some GSMP\n   requests refer\
    \ to the port as a whole whereas other requests are\n   specific to the input\
    \ port or the output port.  ATM cells arrive at\n   the switch from an external\
    \ communication link on incoming virtual\n   channels at an input port. ATM cells\
    \ depart from the switch to an\n   external communication link on outgoing virtual\
    \ channels from an\n   output port. Virtual channels on a port or link are referenced\
    \ by\n   their virtual path and virtual channel identifiers (VPI/VCI). A\n   virtual\
    \ channel connection across a switch is formed by connecting an\n   incoming virtual\
    \ channel to one or more outgoing virtual channels.\n   Virtual channel connections\
    \ are referenced by the input port on which\n   they arrive and the virtual path\
    \ and virtual channel identifiers\n   (VPI/VCI) of their incoming virtual channel.\n\
    \   In general a virtual channel is established with a certain quality of\n  \
    \ service (QOS). Unfortunately this is an ill defined and changing\n   concept\
    \ as new ideas make their way into hardware. For this version\n   of the GSMP\
    \ protocol it is assumed that each virtual channel\n   connection may be assigned\
    \ a priority when it is established. It may\n   be assumed that for virtual channel\
    \ connections that share the same\n   output port, an ATM cell on a connection\
    \ with a higher priority is\n   much more likely to exit the switch before an\
    \ ATM cell on a\n   connection with a lower priority if they are both in the switch\
    \ at\n   the same time. The number of priorities that each port of the switch\n\
    \   supports may be obtained from the port configuration message.\n   Switch ports\
    \ are described by a 32 bit port number. The switch\n   assigns port numbers and\
    \ it may typically choose to structure the 32\n   bits into sub-fields that have\
    \ meaning to the physical structure of\n   the switch (e.g. shelf, slot, port).\
    \ In general, a port in the same\n   physical location on the switch will always\
    \ have the same port\n   number, even across power cycles. The internal structure\
    \ of the port\n   number is opaque to the GSMP protocol. However, by looking up\
    \ the\n   product identity in a database, network management tools may discover\n\
    \   the partitioning of the port number and the physical meaning of the\n   sub-fields.\n\
    \   Each switch port also maintains a port session number assigned by the\n  \
    \ switch. A connection management message or a port management message\n   with\
    \ an incorrect port session number must be rejected.  This allows\n   the controller\
    \ to detect a link failure and to keep state\n   synchronized. The port session\
    \ number of a port remains unchanged\n   while the port is continuously in the\
    \ available state and the link\n   status is continuously up. When a port returns\
    \ to the available state\n   after it has been unavailable or in any of the loopback\
    \ states, or\n   when the line status returns to the up state after it has been\
    \ down\n   or in test, or after a power cycle, its port session number will have\n\
    \   changed.  Port session numbers should be assigned using some form of\n   random\
    \ number.\n   GSMP also contains an adjacency protocol. The adjacency protocol\
    \ is\n   used to synchronize state across the link, to discover the identity\n\
    \   of the entity at the other end of a link, and to detect when it\n   changes.\n"
- title: 2. GSMP Packet Format
  contents:
  - "2. GSMP Packet Format\n   GSMP packets are variable length and are encapsulated\
    \ directly in an\n   AAL-5 CPCS-PDU [I.363] with an LLC/SNAP header as illustrated:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               LLC (0xAA-AA-03)                |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n   |                   SNAP (0x00-00-00-88-0C)            \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       GSMP Message                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Pad (0 - 47 octets)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \             AAL-5 CPCS-PDU Trailer (8 octets)               +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (The convention in the documentation of Internet Protocols [rfc1700]\n   is\
    \ to express numbers in decimal and to picture data in \"big-endian\"\n   order.\
    \ That is, fields are described left to right, with the most\n   significant octet\
    \ on the left and the least significant octet on the\n   right. Whenever a diagram\
    \ shows a group of octets, the order of\n   transmission of those octets is the\
    \ normal order in which they are\n   read in English. Whenever an octet represents\
    \ a numeric quantity the\n   left most bit in the diagram is the high order or\
    \ most significant\n   bit. That is, the bit labeled 0 is the most significant\
    \ bit.\n   Similarly, whenever a multi-octet field represents a numeric quantity\n\
    \   the left most bit of the whole field is the most significant bit.\n   When\
    \ a multi-octet quantity is transmitted, the most significant\n   octet is transmitted\
    \ first. This is the same coding convention as is\n   used in the ATM layer [I.361]\
    \ and AAL-5 [I.363].)\n   The LLC/SNAP header contains the octets: 0xAA 0xAA 0x03\
    \ 0x00 0x00\n   0x00 0x88 0x0C.\n   The maximum transmission unit (MTU) of the\
    \ GSMP message is 1500\n   octets.\n   The default virtual channel for LLC/SNAP\
    \ encapsulated messages is:\n      VPI = 0\n      VCI = 15.\n   GSMP is a master-slave\
    \ protocol. The controller issues request\n   messages to the switch. Each request\
    \ message indicates whether a\n   response is required from the switch and contains\
    \ a transaction\n   identifier to enable the response to be associated with the\
    \ request.\n   The switch replies with a response message indicating either a\n\
    \   successful result or a failure. There are four classes of GSMP\n   request-response\
    \ message: Connection Management, Port Management,\n   Statistics, and Configuration.\
    \ The switch may also generate\n   asynchronous Event messages to inform the controller\
    \ of asynchronous\n   events.  Event messages are not acknowledged by the controller.\
    \ There\n   is also an adjacency protocol message used to establish\n   synchronization\
    \ across the link and maintain a handshake.\n   For the request-response messages\
    \ each message type has a format for\n   the request message and a format for\
    \ the success response.  Unless\n   otherwise specified a failure response message\
    \ is identical to the\n   request message that caused the failure, with the Code\
    \ field\n   indicating the nature of the failure. Event messages have only a\n\
    \   single format defined as they are not acknowledged by the controller.\n  \
    \ Except for the adjacency protocol message, no GSMP messages may be\n   sent\
    \ across the link until the adjacency protocol has achieved\n   synchronization,\
    \ and all GSMP messages received on a link that does\n   not currently have state\
    \ synchronization must be discarded.\n   All GSMP messages, except the adjacency\
    \ protocol message, have the\n   following format:\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                        Message Body                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n             The GSMP protocol version number, currently Version\
    \ = 1. It\n             should be set by the sender of the message to the GSMP\n\
    \             protocol version that the sender is currently running.\n   Message\
    \ Type\n             The GSMP message type. GSMP messages fall into five\n   \
    \          classes: Connection Management, Port Management,\n             Statistics,\
    \ Configuration, and Events. Each class, except\n             for port management,\
    \ has a number of different message\n             types. In addition, one Message\
    \ Type is allocated to the\n             adjacency protocol.\n   Result\n    \
    \         Field in a connection management request message or a port\n       \
    \      management request message, is used to indicate whether a\n           \
    \  response is required to the request message if the outcome\n             is\
    \ successful. A value of \"NoSuccessAck\" indicates that the\n             request\
    \ message does not expect a response if the outcome\n             is successful,\
    \ and a value of \"AckAll\" indicates that a\n             response is expected\
    \ if the outcome is successful.  In both\n             cases a failure response\
    \ will be generated if the request\n             fails. This facility reduces\
    \ the traffic in the case where\n             the controller is simply checking\
    \ that the state in the\n             switch is correct. For all other request\
    \ messages a value\n             of \"NoSuccessAck\" in the request message is\
    \ ignored and the\n             request message is handled as if the field were\
    \ set to\n             \"AckAll\".  In a response message the result field can\
    \ have\n             two values: \"Success\" and \"Failure\".\n             The\
    \ encoding of the result field is:\n                  NoSuccessAck:  Result =\
    \ 1\n                  AckAll:        Result = 2\n                  Success: \
    \      Result = 3\n                  Failure:       Result = 4.\n            \
    \ The Result field is not used in an adjacency protocol\n             message\
    \ and should be set to zero by the sender and ignored\n             by the receiver.\n\
    \   Code\n             Field gives further information concerning the result in\
    \ a\n             response message. It is mostly used to pass an error code\n\
    \             in a failure response but can also be used to give further\n   \
    \          information in a success response message or an event\n           \
    \  message. In a request message the code field is not used\n             and\
    \ is set to zero. In an adjacency protocol message the\n             Code field\
    \ is used to determine the function of the\n             message.\n   Transaction\
    \ Identifier\n             Used to associate a request message with its response\n\
    \             message. For request messages the controller may select any\n  \
    \           transaction identifier. For response messages the\n             transaction\
    \ identifier is set to the value of the\n             transaction identifier from\
    \ the message to which it is a\n             response.  For event messages the\
    \ transaction identifier\n             should be set to zero. In the adjacency\
    \ protocol the\n             Transaction Identifier is not used. This field is\
    \ not\n             present in the adjacency protocol message.\n"
- title: 3. Connection Management Messages
  contents:
  - "3. Connection Management Messages\n   Connection management messages are used\
    \ by the controller to\n   establish, delete, modify and verify connections across\
    \ the switch.\n   The Add Branch, Delete Branch, Delete Tree, Verify Tree, and\
    \ Delete\n   All connection management messages have the following format for\
    \ both\n   request and response messages:\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |      Input VPI        |          Input VCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Output Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |      Output VPI       |          Output VCI           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Number of Branches       |   Reserved    |   Priority    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port Session Number\n             Field gives the session number of the input\
    \ port. Each\n             switch port maintains a Port Session Number assigned\
    \ by the\n             switch. The port session number of a port remains unchanged\n\
    \             while the port is continuously in the Available state and\n    \
    \         the link status is continuously Up. When a port returns to\n       \
    \      the Available state after it has been Unavailable or in any\n         \
    \    of the Loopback states, or when the line status returns to\n            \
    \ the Up state after it has been Down or in Test, or after a\n             power\
    \ cycle, a new Port Session Number must be generated.\n             Port session\
    \ numbers should be assigned using some form of\n             random number. \
    \ The switch must reject any connection\n             management request message\
    \ that has an invalid Port Session\n             Number for the port specified\
    \ in the Input Port field by\n             returning a failure response message\
    \ with the Code field\n             indicating, \"Invalid port session number.\"\
    \ The current port\n             session number may be obtained using a configuration\n\
    \             message.\n   Input Port\n             Indicates a switch input port.\
    \  Switch ports are referenced\n             by a 32 bit value assigned by the\
    \ switch.\n   Input VPI\n             Identifies an ATM virtual path arriving\
    \ at the switch input\n             port indicated by the Input Port field.\n\
    \   Input VCI\n             Identifies an ATM virtual channel arriving on the\
    \ virtual\n             path indicated by the Input VPI field at the switch input\n\
    \             port indicated by the Input Port field.\n   Output Port\n      \
    \       Indicates a switch output port.  Switch ports are\n             referenced\
    \ by a 32 bit value assigned by the switch.\n   Output VPI\n             Identifies\
    \ an outgoing virtual path departing from the\n             switch output port\
    \ indicated in the Output Port field.\n   Output VCI\n             Identifies\
    \ an outgoing virtual channel departing on the\n             virtual path indicated\
    \ by the Output VPI field from the\n             switch output port indicated\
    \ in the Output Port field.\n   Number of Branches\n             Gives the number\
    \ of output branches on a virtual channel\n             connection. (A unicast\
    \ connection will have one branch, a\n             multicast connection will have\
    \ two or more branches.) This\n             field is only used in the Verify Tree\
    \ message.  In all\n             other connection management messages this field\
    \ should be\n             set to zero by the sender and ignored by the receiver.\n\
    \   Reserved\n             This field is not used. It is set to zero by the sender\
    \ and\n             ignored by the receiver.\n   Priority\n             Gives\
    \ the priority of the connection.  The highest priority\n             is numbered\
    \ zero and the lowest priority is numbered \"Q-1\"\n             where \"Q\" is\
    \ the number of priorities that the output port\n             can support. The\
    \ ability to offer different qualities of\n             service to different connections\
    \ based upon their priority\n             is assumed to be a property of the output\
    \ port of the\n             switch. It is assumed that for virtual channel connections\n\
    \             that share the same output port, an ATM cell on a\n            \
    \ connection with a higher priority is much more likely to\n             exit\
    \ the switch before an ATM cell on a connection with a\n             lower priority\
    \ if they are both in the switch at the same\n             time. The number of\
    \ priorities that each output port can\n             support is given in the Port\
    \ Configuration message. If a\n             connection request is received with\
    \ a value in the priority\n             field that the switch cannot support,\
    \ the switch will\n             assign the closest priority that it is capable\
    \ of\n             supporting.  This field is only used in the Add Branch and\n\
    \             Move Branch messages.  In all other connection management\n    \
    \         messages this field should be set to zero by the sender and\n      \
    \       ignored by the receiver.\n   If the result field of the request message\
    \ is \"AckAll\" the switch\n   must reply to all connection management request\
    \ messages with a\n   success response message or a failure response message.\
    \  If the\n   result field of the request message is \"NoSuccessAck\" the switch\
    \ must\n   only reply in the case of a failure.\n   A success response message\
    \ must not be sent until the operation has\n   been successfully completed. For\
    \ connection management messages the\n   success response message is a copy of\
    \ the request message returned\n   with a Result field indicating success. The\
    \ Code field is not used in\n   a connection management success response message\
    \ and should be set to\n   zero. The failure response message is a copy of the\
    \ request message\n   returned with a Result field indicating failure. The Code\
    \ field is\n   used to pass the Failure Code in a connection management failure\n\
    \   response message. If the switch issues a failure response the\n   connection\
    \ state within the switch must not be modified by the\n   request message that\
    \ resulted in the failure.\n   No distinction is made between unicast connections\
    \ and multicast\n   connections. The first Add Branch message for a particular\
    \ Input\n   Port, Input VPI, and Input VCI will establish a unicast connection.\n\
    \   The second Add Branch message with the same Input Port, Input VPI,\n   and\
    \ Input VCI fields will convert the connection to a multicast\n   connection with\
    \ two branches. Subsequent Add Branch messages with the\n   same Input Port, Input\
    \ VPI, and Input VCI fields will add further\n   branches to the multicast connection.\
    \ Use of the Delete Branch\n   message on a multicast connection with two branches\
    \ will result in a\n   unicast connection. Use of the Delete Branch message on\
    \ a unicast\n   connection will delete the unicast connection. There is no concept\
    \ of\n   a connection with zero output branches. All connections are\n   unidirectional,\
    \ one input virtual channel to one or more output\n   virtual channels.\n   The\
    \ connection management messages may be issued regardless of the\n   Port Status\
    \ of the switch port. Connections may be established or\n   deleted when a switch\
    \ port is in the Available, Unavailable, or any\n   of the Loopback states. However,\
    \ all connection state on an input\n   port will be deleted when the port returns\
    \ to the Available state\n   from any other state, i.e. when a Port Management\
    \ message is received\n   for that port with the Function field indicating either\
    \ Bring Up, or\n   Reset Input Port.\n"
- title: 3.1 Add Branch Message
  contents:
  - "3.1 Add Branch Message\n   The Add Branch message is a connection management\
    \ message used to\n   establish a virtual channel connection or to add an additional\
    \ branch\n   to an existing virtual channel connection. It may also be used to\n\
    \   check the connection state stored in the switch. The connection is\n   specified\
    \ by the Input Port, Input VPI, and Input VCI fields. The\n   output branch is\
    \ specified by the Output Port, Output VPI, and Output\n   VCI fields. The priority\
    \ of the connection is specified by the\n   Priority field. The Add Branch message\
    \ is:\n      Message Type = 16\n   If the virtual channel connection specified\
    \ by the Input Port, Input\n   VPI, and Input VCI fields does not already exist,\
    \ it must be\n   established with the single output branch specified in the request\n\
    \   message. The output branch should have the priority specified by the\n   Priority\
    \ field. If the Result field of the request message is\n   \"AckAll\" a success\
    \ response message must be sent upon successful\n   establishment of the specified\
    \ branch.  The success response message\n   must not be sent until the Add Branch\
    \ operation has been completed.\n   If the virtual channel connection specified\
    \ by the Input Port, Input\n   VPI, and Input VCI fields already exists, but the\
    \ specified output\n   branch does not, the new output branch must be added. The\
    \ new output\n   branch should have the priority specified by the Priority field.\
    \ If\n   the Result field of the request message is \"AckAll\" a success\n   response\
    \ message must be sent upon successful establishment of the\n   specified branch.\
    \ The success response message must not be sent until\n   the Add Branch operation\
    \ has been completed.\n   If the virtual channel connection specified by the Input\
    \ Port, Input\n   VPI, and Input VCI fields already exists and the specified output\n\
    \   branch also already exists, the priority of the connection, if\n   different\
    \ from the request message, should be changed to that in the\n   request message.\
    \ A success response message must be sent if the\n   Result field of the request\
    \ message is \"AckAll\".  This allows the\n   controller to periodically reassert\
    \ the state of a connection or to\n   change its priority. If the result field\
    \ of the request message is\n   \"NoSuccessAck\" a success response message should\
    \ not be returned.\n   This may be used to reduce the traffic on the control link\
    \ for\n   messages that are reasserting previously established state. For\n  \
    \ messages that are reasserting previously established state, the\n   switch must\
    \ always check that this state is correctly established in\n   the switch hardware\
    \ (i.e. the actual connection tables used to\n   forward cells).\n   The behavior\
    \ is undefined if the output virtual channel specified by\n   the Output Port,\
    \ Output VPI, and Output VCI fields is already in use\n   by any connection other\
    \ than that specified by the Input Port, Input\n   VPI, and Input VCI fields.\n\
    \   A failure response must be returned if the switch is unable to\n   establish\
    \ the specified branch or if there is an error in any of the\n   fields of the\
    \ request message. If a failure message is returned the\n   state of the switch\
    \ must not have been modified by the request\n   message.\n   It should be noted\
    \ that different switches support multicast in\n   different ways. There will\
    \ be a limit to the total number of\n   multicast connections any switch can support,\
    \ and possibly a limit on\n   the maximum number of branches that a multicast\
    \ connection may\n   specify.  Some switches also impose a limit on the number\
    \ of\n   different VPI/VCI values that may be assigned to the output branches\n\
    \   of a multicast connection. Many switches are incapable of supporting\n   more\
    \ than a single branch of any particular multicast connection on\n   the same\
    \ output port. Specific failure codes are defined for some of\n   these conditions.\
    \ If a switch sends a failure response to an Add\n   Branch message it must choose\
    \ the most specific failure code.\n"
- title: 3.2 Delete Branch Message
  contents:
  - "3.2 Delete Branch Message\n   The Delete Branch message is a connection management\
    \ message used to\n   delete a single branch of a virtual channel connection,\
    \ or in the\n   case of the last branch, to delete the connection. The virtual\n\
    \   channel connection is specified by the Input Port, Input VPI, and\n   Input\
    \ VCI fields. The specific branch is indicated by the Output\n   Port, Output\
    \ VPI, and Output VCI fields. The Delete Branch message\n   is:\n      Message\
    \ Type = 17\n   If the Result field of the request message is \"AckAll\" a success\n\
    \   response message must be sent upon successful deletion of the\n   specified\
    \ branch. The success response message must not be sent until\n   the delete branch\
    \ operation has been completed and if possible, not\n   until all data on that\
    \ branch, queued for transmission, has been\n   transmitted. A failure message\
    \ indicating, \"The specified connection\n   does not exist,\" must be sent if\
    \ the connection specified by the\n   Input Port, Input VPI, and Input VCI fields\
    \ does not exist. A failure\n   message indicating, \"The specified branch does\
    \ not exist,\" must be\n   sent if the connection specified by the Input Port,\
    \ Input VPI, and\n   Input VCI fields exists but the branch specified by the Output\
    \ Port,\n   Output VPI, and Output VCI fields does not exist.\n"
- title: 3.3 Delete Tree Message
  contents:
  - "3.3 Delete Tree Message\n   The Delete Tree message is a connection management\
    \ message used to\n   delete an entire virtual channel connection. All remaining\
    \ branches\n   of the connection are deleted. The virtual channel connection is\n\
    \   specified by the Input Port, Input VPI, and Input VCI fields.  The\n   Output\
    \ Port, Output VPI, and Output VCI fields are not used in this\n   message and\
    \ their contents should be set to zero by the sender and\n   ignored by the receiver.\
    \ The Delete Tree message is:\n      Message Type = 18\n   If the Result field\
    \ of the request message is \"AckAll\" a success\n   response message must be\
    \ sent upon successful deletion of the\n   specified connection. The success message\
    \ must not be sent until the\n   delete operation has been completed and if possible,\
    \ not until all\n   data on the connection, queued for transmission, has been\n\
    \   transmitted. A failure message indicating, \"The specified connection\n  \
    \ does not exist,\" must be sent if the connection specified by the\n   Input\
    \ Port, Input VPI, and Input VCI fields does not exist.\n"
- title: 3.4 Verify Tree Message
  contents:
  - "3.4 Verify Tree Message\n   The Verify Tree message is a connection management\
    \ message used to\n   verify the number of branches on a virtual channel connection.\
    \  The\n   virtual channel connection is specified by the Input Port, Input VPI,\n\
    \   and Input VCI fields. The Output Port, Output VPI, and Output VCI\n   fields\
    \ are not used in this message and their contents should be set\n   to zero by\
    \ the sender and ignored by the receiver.  The number of\n   branches that the\
    \ sender believes that this virtual channel\n   connection should contain is given\
    \ by the Number of Branches field.\n   The Verify Tree message is:\n      Message\
    \ Type = 19\n   If the Result field of the request message is \"AckAll\" a success\n\
    \   response message must be sent if the receiver agrees that the actual\n   number\
    \ of branches of the specified virtual channel connection\n   matches the number\
    \ contained in the Number of Branches field of the\n   request message. The failure\
    \ response message, with the code field\n   set to \"Failure specific to the particular\
    \ message type,\" must be\n   sent if the actual number of branches of the specified\
    \ virtual\n   channel connection does not match the number contained in the Number\n\
    \   of Branches field of the request message. In this failure response\n   message\
    \ the Number of Branches field must be changed to contain the\n   actual number\
    \ of branches of the specified virtual channel\n   connection. A failure response\
    \ message with the code field set to a\n   different value must be used to indicate\
    \ some other failure such as,\n   \"The specified connection does not exist.\"\
    \ In this case the Number of\n   Branches field will be the same as that of the\
    \ request message.\n   The Verify Tree message can only be guaranteed to yield\
    \ a correct\n   response when there are no other connection request messages or\
    \ their\n   response messages pending for the specified connection.  If this is\n\
    \   not the case the result of the Verify Tree message is undefined.\n"
- title: 3.5 Delete All Message
  contents:
  - "3.5 Delete All Message\n   The Delete All message is a connection management\
    \ message used to\n   delete all connections on a switch input port. All connections\
    \ that\n   arrive at the specified input port must be deleted. On completion of\n\
    \   the operation all dynamically assigned VPI/VCI values for the\n   specified\
    \ port must be unassigned, i.e. there must be no virtual\n   connections established\
    \ in the VPI/VCI space that GSMP controls on\n   this port. The Input VPI, Input\
    \ VCI, Output Port, Output VPI, and\n   Output VCI fields are not used in this\
    \ message and their contents are\n   ignored and unspecified. The Delete All message\
    \ is\"\n      Message Type = 20\n   If the Result field of the request message\
    \ is \"AckAll\" a success\n   response message must be sent upon completion of\
    \ the operation. The\n   success response message must not be sent until the operation\
    \ has\n   been completed.\n"
- title: 3.6 Move Branch Message
  contents:
  - "3.6 Move Branch Message\n   The Move Branch connection management message has\
    \ the following\n   format for both request and response messages:\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Input Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |        Input VPI      |           Input VCI           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Old Output Port                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |    Old Output VPI     |        Old Output VCI         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        New Output Port                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |    New Output VPI     |        New Output VCI         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Reserved                   |   Priority    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Move Branch message is a connection management message used to\n   move\
    \ a single output branch of a virtual channel connection from its\n   current\
    \ output port, output VPI, and output VCI, to a new output\n   port, output VPI,\
    \ and output VCI on the same virtual channel\n   connection. None of the other\
    \ output branches are modified.  When the\n   operation is complete the original\
    \ output VPI/VCI on the original\n   output port will be deleted from the connection.\
    \  The Move Branch\n   message is:\n      Message Type = 22\n   If the virtual\
    \ channel connection specified by the Input Port, Input\n   VPI, and Input VCI\
    \ fields already exists, and the output branch\n   specified by the Old Output\
    \ Port, Old Output VPI, and Old Output VCI\n   fields exists as a branch on that\
    \ connection, the output branch\n   specified by the New Output Port, New Output\
    \ VPI, and New Output VCI\n   fields is added to the connection and the branch\
    \ specified by the Old\n   Output Port, Old Output VPI, and Old Output VCI fields\
    \ is deleted. If\n   the Result field of the request message is \"AckAll\" a success\n\
    \   response message must be sent upon successful completion of the\n   operation.\
    \ The success response message must not be sent until the\n   Move Branch operation\
    \ has been completed.\n   If the virtual channel connection specified by the Input\
    \ Port, Input\n   VPI, and Input VCI fields already exists, but the output branch\n\
    \   specified by the Old Output Port, Old Output VPI, and Old Output VCI\n   fields\
    \ does not exist as a branch on that connection, a failure\n   response must be\
    \ returned with the Code field indicating, \"The\n   specified branch does not\
    \ exist.\" The connection state of the switch\n   must not be modified in this\
    \ case.\n   If the virtual channel connection specified by the Input Port, Input\n\
    \   VPI, and Input VCI fields does not exist, a failure response must be\n   returned\
    \ with the Code field indicating, \"The specified connection\n   does not exist.\"\
    \ The connection state of the switch must not be\n   modified in this case.\n\
    \   The behavior is undefined if the output virtual channel specified by\n   the\
    \ New Output Port, New Output VPI, and New Output VCI fields is\n   already in\
    \ use by any connection.\n   A failure response will be returned if the switch\
    \ is unable to\n   establish the specified branch or if there is an error in any\
    \ of the\n   fields of the request message. If a failure message is returned the\n\
    \   state of the switch must not have been modified by the request\n   message.\n"
- title: 4. Port Management Message
  contents:
  - "4. Port Management Message\n   The Port Management message allows a port to be\
    \ brought into service,\n   taken out of service, looped back, or reset. Only\
    \ the Bring Up and\n   the Reset Input Port functions change the connection state\n\
    \   (established connections) on the input port. Only the Bring Up\n   function\
    \ changes the value of the Port Session Number. If the Result\n   field of the\
    \ request message is \"AckAll\" a success response message\n   must be sent upon\
    \ successful completion of the operation. The success\n   response message must\
    \ not be sent until the operation has been\n   completed. The Port Management\
    \ Message is:\n      Message Type = 32\n   The Port Management message has the\
    \ following format for the request\n   and success response messages:\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Event Sequence Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Event Flags  |   Duration    |          Function             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n             Gives the port number of the port to which the message\n\
    \             applies.\n   Port Session Number\n             Gives the current\
    \ port session number for the port. If the\n             Port Session Number in\
    \ the request message does not match\n             the current port session number\
    \ of the port indicated by\n             the Port field of the request message,\
    \ a failure response\n             must be returned with, \"Invalid port session\
    \ number,\"\n             indicated in the Code field. If the specified function\n\
    \             requires a new Port Session Number to be generated the new\n   \
    \          Port Session Number must be given in the success response\n       \
    \      message.  The Port Session Number must be generated using\n           \
    \  some form of random number.\n   Event Sequence Number\n             In the\
    \ success response message gives the current value of\n             the Event\
    \ Sequence Number of the switch port indicated by\n             the Port field.\
    \ The Event Sequence Number is set to zero\n             when the port is initialized\
    \ and is incremented by one each\n             time an asynchronous event is detected\
    \ on that port that\n             the switch would normally report via an Event\
    \ message. If\n             the Event Sequence Number in the success response\
    \ differs\n             from the Event Sequence Number of the most recent Event\n\
    \             message received for that port, events have occurred that\n    \
    \         were not reported via an Event message. This is most likely\n      \
    \       to be due to the flow control that restricts the rate at\n           \
    \  which a switch can send Event messages for each port. In\n             the\
    \ request message this field is not used and should be\n             set to zero\
    \ by the sender and ignored by the receiver.\n   Event Flags\n             Field\
    \ in the request message is used to reset the Event\n             Flags in the\
    \ switch port indicated by the Port field. Each\n             Event Flag in a\
    \ switch port corresponds to a type of Event\n             message. When a switch\
    \ port sends an Event message it sets\n             the corresponding Event Flag\
    \ on that port. The port is not\n             permitted to send another Event\
    \ message of the same type\n             until the Event Flag has been reset.\
    \ If the Function field\n             in the request message is set to \"Reset\
    \ Event Flags,\" for\n             each bit that is set in the Event Flags field,\
    \ the\n             corresponding Event Flag in the switch port is reset.\n  \
    \           The Event Flags field is only used in a request message\n        \
    \     with the Function field set to \"Reset Event Flags.\" For all\n        \
    \     other values of the Function field, the Event Flags field\n            \
    \ should be set to zero in the request message and must be\n             ignored\
    \ by the receiver. In the success response message\n             the Event Flags\
    \ field must be set to the current value of\n             the Event Flags for\
    \ the port, after the completion of the\n             operation specified by the\
    \ request message, for all values\n             of the Function field. Setting\
    \ the Event Flags field to all\n             zeros in a \"Reset Event Flags\"\
    \ request message allows the\n             controller to obtain the current state\
    \ of the Event Flags\n             and the current Event Sequence Number of the\
    \ port without\n             changing the state of the Event Flags.\n        \
    \     The correspondence between the types of Event message and\n            \
    \ the bits of the Event Flags field is as follows:\n                Port Up: \
    \         Bit 0, (most significant bit)\n                Port Down:        Bit\
    \ 1,\n                Invalid VPI/VCI:  Bit 2,\n                New Port:    \
    \     Bit 3,\n                Dead Port:        Bit 4.\n   Duration\n        \
    \     Is the length of time, in seconds, that any of the loopback\n          \
    \   states remain in operation. When the duration has expired\n             the\
    \ port will automatically be returned to service.  If\n             another Port\
    \ Management message is received for the same\n             port before the duration\
    \ has expired, the loopback will\n             continue to remain in operation\
    \ for the length of time\n             specified by the Duration field in the\
    \ new message. The\n             Duration field is only used in request messages\
    \ with the\n             Function field set to Internal Loopback, External Loopback,\n\
    \             or Bothway Loopback. In all other request messages it\n        \
    \     should be set to zero by the sender and ignored by the\n             receiver.\n\
    \   Function\n             Specifies the action to be taken. The specified action\
    \ will\n             be taken regardless of the current status of the port\n \
    \            (Available, Unavailable, or any Loopback state). The\n          \
    \   defined values of the Function field are:\n             Bring Up:\n      \
    \            Function = 1. Bring the port into service. All\n                \
    \  connections that arrive at the specified input port\n                  must\
    \ be deleted and a new Port Session Number must be\n                  selected\
    \ using some form of random number. On\n                  completion of the operation\
    \ all dynamically assigned\n                  VPI/VCI values for the specified\
    \ input port must be\n                  unassigned, i.e. no virtual connections\
    \ will be\n                  established in the VPI/VCI space that GSMP controls\
    \ on\n                  this input port. The Port Status of the port\n       \
    \           afterwards will be Available.\n             Take Down:\n         \
    \         Function = 2. Take the port out of service. Any cells\n            \
    \      received at this port will be discarded. No cells will\n              \
    \    be transmitted from this port. The Port Status of the\n                 \
    \ port afterwards will be Unavailable. The behavior is\n                  undefined\
    \ if the port over which the GSMP protocol is\n                  running is taken\
    \ down.\n             Internal Loopback:\n                  Function = 3. Cells\
    \ arriving at the output port from\n                  the switch fabric are looped\
    \ through to the input port\n                  to return to the switch fabric.\
    \ All of the ATM\n                  functions of the input port above the PHY\
    \ layer, e.g.\n                  header translation, are performed upon the looped\
    \ back\n                  cells. The Port Status of the port afterwards will be\n\
    \                  Internal Loopback.\n             External Loopback:\n     \
    \             Function = 4. Cells arriving at the input port from\n          \
    \        the external communications link are immediately\n                  looped\
    \ back to the communications link at the physical\n                  layer without\
    \ entering the input port. None of the ATM\n                  functions of the\
    \ input port above the PHY layer are\n                  performed upon the looped\
    \ back cells. The Port Status\n                  of the port afterwards will be\
    \ External Loopback.\n             Bothway Loopback:\n                  Function\
    \ = 5. Both internal and external loopback are\n                  performed. The\
    \ Port Status of the port afterwards will\n                  be Bothway Loopback.\n\
    \             Reset Input Port:\n                  Function = 6. All connections\
    \ that arrive at the\n                  specified input port must be deleted and\
    \ the input and\n                  output port hardware re-initialized. On completion\
    \ of\n                  the operation all dynamically assigned VPI/VCI values\n\
    \                  for the specified input port must be unassigned, i.e.\n   \
    \               no virtual connections will be established in the\n          \
    \        VPI/VCI space that GSMP controls on this input port.\n              \
    \    The Port Session Number is not changed by the Reset\n                  Input\
    \ Port function.  The Port Status of the port\n                  afterwards will\
    \ be Unavailable.\n             Reset Event Flags:\n                  Function\
    \ = 7. For each bit that is set in the Event\n                  Flags field, the\
    \ corresponding Event Flag in the\n                  switch port must be reset.\
    \ The Port Status of the port\n                  is not changed by this function.\n"
- title: 5. Statistics Messages
  contents:
  - "5. Statistics Messages\n   The statistics messages permit the controller to request\
    \ the values\n   of various hardware counters associated with the switch input\
    \ and\n   output ports, and virtual channels. Two classes of statistics message\n\
    \   are defined: the VC Activity Message, and the Port and VC Statistics\n   Messages.\
    \ The VC Activity message is used to determine whether one or\n   more specific\
    \ VCs have recently been carrying traffic.  The Port and\n   VC Statistics message\
    \ is used to query the various port and VC\n   specific traffic and error counters.\n"
- title: 5.1 VC Activity Message
  contents:
  - "5.1 VC Activity Message\n   The VC Activity message is used to determine whether\
    \ one or more\n   specific VCs have recently been carrying traffic. The VC Activity\n\
    \   message contains one or more VC Activity records. Each VC Activity\n   record\
    \ is used to request and return activity information concerning\n   a single virtual\
    \ connection. Each VC is specified by its input port,\n   input VPI, and input\
    \ VCI. These are specified in the Input Port,\n   Input VPI, and Input VCI fields\
    \ of each VC Activity record.  Two\n   forms of activity detection are supported.\
    \ If the switch supports per\n   VC traffic accounting the current value of the\
    \ traffic counter for\n   each specified VC must be returned. The units of traffic\
    \ counted are\n   not specified but will typically be either cells or frames.\
    \  The\n   controller must compare the traffic counts returned in the message\n\
    \   with previous values for each of the specified VCs to determine\n   whether\
    \ each VC has been active in the intervening period.  If the\n   switch does not\
    \ support per VC traffic accounting, but is capable of\n   detecting per-VC activity\
    \ by some other unspecified means, the result\n   may be indicated for each VC\
    \ using the Flags field. The VC Activity\n   message is:\n      Message Type =\
    \ 48\n   The VC Activity request and success response messages have the\n   following\
    \ format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Number of Records       |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     VC Activity Records                     ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Number of Records\n             Field specifies the number of VC Activity\
    \ records to\n             follow. The maximum number of VC Activity records permitted\n\
    \             in a single VC Activity message is 120.\n   Reserved\n         \
    \    Field is not used. It is set to zero by the sender and\n             ignored\
    \ by the receiver.\n   Each VC Activity Record has the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Flags |      Input VPI        |          Input VCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                      VC Traffic Count                       +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Input Port\n             Identifies the port number of the input port on which\
    \ the\n             VC of interest arrives in order to identify the VC\n     \
    \        (regardless of whether the traffic count for the VC is\n            \
    \ maintained on the input port or the output port).\n   Input VPI\n   Input VCI\n\
    \             Fields identify the specific virtual channel for which\n       \
    \      statistics are being requested.\n   Flags\n             In the request\
    \ message this field is unused, it should be\n             set to zero by the\
    \ sender and ignored by the receiver.  In\n             the success response message\
    \ bit 0 (msb) of the Flags field\n             is used to indicate an invalid\
    \ VC Activity record. This bit\n             must be zero if any of the fields\
    \ in this VC Activity\n             record are invalid, if the input port specified\
    \ by the\n             Input Port field does not exist, or if the specified\n\
    \             connection does not exist. If this bit is zero in a success\n  \
    \           response message bits 1 and 2 of the Flags field and the VC\n    \
    \         Traffic Count field are undefined. If bit 0 of the flags\n         \
    \    field is set, the VC Activity record is valid, and bits 1\n             and\
    \ 2 of the Flags field in the VC Activity record are used\n             as follows:\n\
    \                Bit 1 of the Flags field: if set, indicates that the\n      \
    \          value in bit 2 of the Flags field is valid; if zero,\n            \
    \    indicates that the value in the VC Traffic Count field\n                is\
    \ valid.\n                If bit 1 of the Flags field is set, bit 2 of the Flags\n\
    \                field, if set, indicates that there has been some\n         \
    \       activity on this virtual channel since the last VC\n                Activity\
    \ message for this virtual channel.\n                If bit 1 of the Flags field\
    \ is set, bit 2 of the Flags\n                field, if zero, indicates that there\
    \ has been no\n                activity on this virtual channel since the last\
    \ VC\n                Activity message for this virtual channel.\n           \
    \     Bit 3 of the Flags field is not used, it should be set\n               \
    \ to zero by the sender and ignored by the receiver.\n   VC Traffic Count\n  \
    \           Field is unused in the request message, it should be set to\n    \
    \         zero by the sender and ignored by the receiver. In the\n           \
    \  success response message, if the switch supports per-VC\n             traffic\
    \ counting, the VC Traffic Count field must be set to\n             the value\
    \ of a free running, VC specific, 64 bit traffic\n             counter counting\
    \ traffic flowing across the specified\n             virtual channel.  The value\
    \ of the traffic counter is not\n             modified by reading it.  If per-VC\
    \ traffic counting is\n             supported, the switch must report the VC Activity\
    \ result\n             using the traffic count rather than using bit 2 of the\n\
    \             Flags field.\n   The format of the failure response is the same\
    \ as the request message\n   with the Number of Records field set to zero and\
    \ no VC Activity\n   records returned in the message. If the switch is incapable\
    \ of\n   detecting per-VC activity, a failure response must be returned\n   indicating,\
    \ \"The specified request is not implemented on this\n   switch.\"\n"
- title: 5.2 Port and VC Statistics Messages
  contents:
  - "5.2 Port and VC Statistics Messages\n   The Port and VC Statistics messages are\
    \ used to query the various\n   port and VC specific traffic and error counters.\n\
    \   The Port and VC Statistics request messages have the following\n   format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |          VPI          |              VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n             Identifies the port number of the port for which statistics\n\
    \             are being requested.\n   VPI\n   VCI\n             Fields identify\
    \ the specific virtual channel for which\n             statistics are being requested.\
    \  For requests that do not\n             require a virtual channel to be specified\
    \ these fields\n             should be set to zero in the request and ignored\
    \ by the\n             receiver.\n   The success response messages for the port\
    \ and VC statistics group\n   have the following format:\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |          VPI          |              VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                     Input Cell Count                        +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                     Input Frame Count                       +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                  Input Cell Discard Count                   +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                 Input Frame Discard Count                   +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                   Input HEC Error Count                     +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                Input Invalid VPI/VCI Count                  +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                     Output Cell Count                       +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                    Output Frame Count                       +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                 Output Cell Discard Count                   +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                Output Frame Discard Count                   +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n   VPI/VCI\n             Fields are the same as those of the request\
    \ message.\n   Input Cell Count\n   Output Cell Count\n             Each gives\
    \ the value of a free running 64 bit counter\n             counting cells arriving\
    \ at the input or departing from the\n             output respectively. In response\
    \ to a Port Statistics\n             message the count will be on a per port basis\
    \ and in\n             response to a VC Statistics message the count will be on\
    \ a\n             per VC basis.\n   Input Frame Count\n   Output Frame Count\n\
    \             Each gives the value of a free running 64 bit counter\n        \
    \     counting frames (packets) arriving at the input or\n             departing\
    \ from the output respectively. In response to a\n             Port Statistics\
    \ message the count will be on a per port\n             basis and in response\
    \ to a VC Statistics message the count\n             will be on a per VC basis.\n\
    \   Input Cell Discard Count\n   Output Cell Discard Count\n             Each\
    \ gives the value of a free running 64 bit counter\n             counting cells\
    \ discarded due to queue overflow on an input\n             port or on an output\
    \ port respectively. In response to a\n             Port Statistics message the\
    \ count will be on a per port\n             basis and in response to a VC Statistics\
    \ message the count\n             will be on a per VC basis.\n   Input Frame Discard\
    \ Count\n   Output Frame Discard Count\n             Each gives the value of a\
    \ free running 64 bit counter\n             counting frames discarded due to queue\
    \ overflow on an input\n             port or on an output port respectively. In\
    \ response to a\n             Port Statistics message the count will be on a per\
    \ port\n             basis and in response to a VC Statistics message the count\n\
    \             will be on a per VC basis.\n   HEC Error Count\n             Gives\
    \ the value of a free running 64 bit counter counting\n             cells discarded\
    \ due to header checksum errors on arrival at\n             an input port.\n \
    \  Invalid VPI/VCI Count\n             Gives the value of a free running 64 bit\
    \ counter counting\n             cells discarded because their VPI/VCI is invalid\
    \ on arrival\n             at an input port. An incoming VPI/VCI is invalid if\
    \ no\n             connection is currently established having that value of\n\
    \             VPI/VCI.\n"
- title: 5.2.1 Port Statistics Message
  contents:
  - "5.2.1 Port Statistics Message\n   The Port Statistics message requests the statistics\
    \ for the switch\n   port specified in the Port field. The contents of the VPI/VCI\
    \ field\n   in the Port Statistics request message are ignored. All of the count\n\
    \   fields in the success response message refer to per-port counts\n   regardless\
    \ of the virtual channels to which the cells belong.  Any of\n   the count fields\
    \ in the success response message not supported by the\n   port will be set to\
    \ zero. The Port Statistics message is:\n      Message Type = 49\n"
- title: 5.2.2 VC Statistics Message
  contents:
  - "5.2.2 VC Statistics Message\n   The VC Statistics message requests the statistics\
    \ for the virtual\n   channel specified in the VPI/VCI field that arrives on the\
    \ switch\n   input port specified in the Port field. All of the count fields in\n\
    \   the success response message refer only to the specified virtual\n   channel.\
    \ The HEC Error Count and Invalid VPI/VCI Count fields are not\n   VC specific\
    \ and are set to zero. Any of the other count fields not\n   supported on a per\
    \ virtual channel basis will be set to zero in the\n   success response message.\
    \ The VC Statistics message is:\n      Message Type = 50\n"
- title: 6. Configuration
  contents:
  - "6. Configuration\n   The configuration messages permit the controller to discover\
    \ the\n   capabilities of the switch. Three configuration request messages have\n\
    \   been defined: Switch, Port, and All Ports.\n   All configuration request messages\
    \ have the following format:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n             Identifies the port number for which configuration\n  \
    \           information is being requested. If the Port field is not\n       \
    \      required by the message it is set to zero by the sender and\n         \
    \    ignored by the receiver.\n"
- title: 6.1 Switch Configuration Message
  contents:
  - "6.1 Switch Configuration Message\n   The Switch Configuration message requests\
    \ the global (non port-\n   specific) configuration for the switch. The Switch\
    \ Configuration\n   message is:\n      Message Type = 64\n   The Port field is\
    \ not used in the request message and is set to zero.\n   The Switch Configuration\
    \ success response message has the following\n   format:\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Firmware Version Number    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Switch Type          |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                          Switch Name \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Firmware Version Number\n             The version number of the switch control\
    \ firmware\n             installed.\n   Reserved\n             Field is not used.\
    \ It is set to zero by the sender and\n             ignored by the receiver.\n\
    \   Switch Type\n             A 16 bit field allocated by the manufacturer of\
    \ the switch.\n             (For these purposes the manufacturer of the switch\
    \ is\n             assumed to be the organization identified by the OUI in the\n\
    \             Switch Name field.) The Switch Type identifies the product.\n  \
    \           When the Switch Type is combined with the OUI from the\n         \
    \    Switch Name the product is uniquely identified. Network\n             Management\
    \ may use this identification to obtain product\n             related information\
    \ from a database.\n   Switch Name\n             A 48 bit quantity that is unique\
    \ within the operational\n             context of the device. A 48 bit IEEE 802\
    \ MAC address, if\n             available, may be used as the Switch Name. The\
    \ most\n             significant 24 bits of the Switch Name must be an\n     \
    \        Organizationally Unique Identifier (OUI) that identifies\n          \
    \   the manufacturer of the switch.\n"
- title: 6.2 Port Configuration Message
  contents:
  - "6.2 Port Configuration Message\n   The Port Configuration message requests the\
    \ switch for the\n   configuration information of a single switch port. The Port\
    \ field in\n   the request message specifies the port for which the configuration\
    \ is\n   requested.  The Port Configuration message is:\n      Message Type =\
    \ 65.\n   The Port Configuration success response message has the following\n\
    \   format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Port Session Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  zero |      Min VPI          |  zero |       Max VPI         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Min VCI            |           Max VCI             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Cell Rate                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Port Status  |   Port Type   |  Line Status  |  Priorities   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n             The switch port to which the configuration information\n\
    \             refers. Configuration information relating to both the\n       \
    \      input and the output sides of the switch port is given.\n             Port\
    \ numbers are 32 bits wide and allocated by the switch.\n             The switch\
    \ may choose to structure the 32 bits into sub\n             fields that have\
    \ meaning to the physical structure of the\n             switch hardware (e.g.\
    \  shelf, slot, interface).\n   Port Session Number\n             The current\
    \ Port Session Number for the specified port.\n             Each switch port maintains\
    \ a Port Session Number assigned\n             by the switch. The Port Session\
    \ Number of a port remains\n             unchanged while the port is continuously\
    \ in the Available\n             state. When a port returns to the Available state\
    \ after it\n             has been Unavailable, or after a power cycle, its Port\n\
    \             Session Number must be changed, preferably using some form\n   \
    \          of random number.\n   Min VPI\n             The minimum value of dynamically\
    \ assigned incoming VPI that\n             the connection table on the input port\
    \ can support and may\n             be controlled by GSMP.\n   Max VPI\n     \
    \        The maximum value of dynamically assigned incoming VPI that\n       \
    \      the connection table on the input port can support and may\n          \
    \   be controlled by GSMP. It is assumed that the input port\n             can\
    \ handle all values of VPI within the range Min VPI to\n             Max VPI inclusive\
    \ and that GSMP may control all values\n             within this range.  If the\
    \ switch does not support virtual\n             paths it is acceptable for both\
    \ Min VPI and Max VPI to\n             specify the same value, most likely zero.\n\
    \   Min VCI\n             The minimum value of dynamically assigned incoming VCI\
    \ that\n             the connection table on the input port can support and may\n\
    \             be controlled by GSMP.\n   Max VCI\n             The maximum value\
    \ of dynamically assigned incoming VCI that\n             the connection table\
    \ on the input port can support and may\n             be controlled by GSMP. It\
    \ is assumed that the input port\n             can handle all values of VCI within\
    \ the range Min VCI to\n             Max VCI inclusive for each of the virtual\
    \ paths in the\n             range Min VPI to Max VPI inclusive and that GSMP\
    \ may\n             control all values within this range.\n   Cell Rate\n    \
    \         A measure of the bandwidth of the port. It is the rate of\n        \
    \     cells arriving at or departing from the port in cells/s. It\n          \
    \   is assumed that both input port and output port have the\n             same\
    \ cell rate.\n   Port Status\n             Gives the administrative state of the\
    \ port. The defined\n             values of the Port Status field are:\n     \
    \        Available:\n                  Port Status = 1. The port is available\
    \ to both send\n                  and receive cells. When a port changes to the\n\
    \                  Available state from any other administrative state,\n    \
    \              all dynamically assigned virtual connections must be\n        \
    \          cleared and a new Port Session Number must be\n                  generated.\n\
    \             Unavailable:\n                  Port Status = 2. The port has intentionally\
    \ been taken\n                  out of service. No cells will be transmitted from\
    \ this\n                  port.  No cells will be received by this port.\n   \
    \          Internal Loopback:\n                  Port Status = 3. The port has\
    \ intentionally been taken\n                  out of service and is in internal\
    \ loopback: cells\n                  arriving at the output port from the switch\
    \ fabric are\n                  looped through to the input port to return to\
    \ the\n                  switch fabric. All of the ATM functions of the input\n\
    \                  port above the PHY layer, e.g. header translation, are\n  \
    \                performed upon the looped back cells.\n             External\
    \ Loopback:\n                  Port Status = 4. The port has intentionally been\
    \ taken\n                  out of service and is in external loopback: cells\n\
    \                  arriving at the input port from the external\n            \
    \      communications link are immediately looped back to the\n              \
    \    communications link at the physical layer without\n                  entering\
    \ the input port. None of the ATM functions of\n                  the input port\
    \ above the PHY layer are performed upon\n                  the looped back cells.\n\
    \             Bothway Loopback:\n                  Port Status = 5. The port has\
    \ intentionally been taken\n                  out of service and is in both internal\
    \ and external\n                  loopback.\n   Port Type\n             The type\
    \ of physical transmission interface for this port.\n             The values for\
    \ this field are given by the IANAifTYPE\n             object from the MIB defined\
    \ for the IANAifTYPE-MIB\n             specified in RFC 1573 [rfc1573]. Example\
    \ values are: SONET\n             or SDH (39), DS-3 (30).\n   Line Status\n  \
    \           The status of the physical transmission medium connected to\n    \
    \         the port. The defined values of the Line Status field are:\n       \
    \      Up:\n                  Line Status = 1. The line is able to both send and\n\
    \                  receive cells.  When the Line Status changes to Up\n      \
    \            from either the Down or Test states, a new Port\n               \
    \   Session Number must be generated.\n             Down:\n                  Line\
    \ Status = 2. The line is unable either to send or\n                  receive\
    \ cells or both.\n             Test:\n                  Line Status = 3. The port\
    \ or line is in a test mode,\n                  for example, power-on test.\n\
    \   Priorities\n             The number of different priorities that this output\
    \ port\n             can assign to virtual channel connections.  Zero is invalid\n\
    \             in this field. If an output port is able to support \"Q\"\n    \
    \         priorities, the highest priority is numbered zero and the\n        \
    \     lowest priority is numbered \"Q-1\". The ability to offer\n            \
    \ different qualities of service to different connections\n             based\
    \ upon their priority is assumed to be a property of\n             the output\
    \ port of the switch. It may be assumed that for\n             virtual channel\
    \ connections that share the same output\n             port, an ATM cell on a\
    \ connection with a higher priority is\n             much more likely to exit\
    \ the switch before an ATM cell on a\n             connection with a lower priority\
    \ if they are both in the\n             switch at the same time.\n"
- title: 6.3 All Ports Configuration Message
  contents:
  - "6.3 All Ports Configuration Message\n   The All Ports Configuration message requests\
    \ the switch for the\n   configuration information of all of its ports. The All\
    \ Ports\n   Configuration message is:\n      Message Type = 66\n   The Port field\
    \ is not used in the request message and is set to zero.\n   The All Ports Configuration\
    \ success response message has the\n   following format:\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Number of Records       |      Port Record Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                        Port Records                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Number of Records\n             Field gives the number of Port Records to\
    \ follow in the\n             message. The maximum number of port records allowed\
    \ in a\n             single All Ports Configuration success response is 64. If\
    \ a\n             switch has more than 64 ports it must send them in multiple\n\
    \             success response messages.\n   Port Record Length\n            \
    \ Field gives the length of each port record in bytes. This\n             is currently\
    \ 24 but the Port Record Length field allows for\n             the future definition\
    \ of further fields at the end of the\n             port record while preserving\
    \ compatibility with earlier\n             versions of the protocol.\n   Port\
    \ Records follow in the remainder of the message. Each port record\n   has the\
    \ following format:\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Port Session Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  zero |      Min VPI          |  zero |       Max VPI         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Min VCI            |           Max VCI             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Cell Rate                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Port Status  |   Port Type   |  Line Status  |  Priorities   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The definition of the fields in the port record is exactly the same\n   as\
    \ that of the Port Configuration message.\n"
- title: 7. Event Messages
  contents:
  - "7. Event Messages\n   Event messages allow the switch to inform the controller\
    \ of certain\n   asynchronous events. Event messages are not acknowledged. The\
    \ Result\n   field and the Code field in the message header are not used and\n\
    \   should be set to zero. Event messages are not sent during\n   initialization.\
    \ Event messages have the following format:\n    0                   1       \
    \            2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Transaction Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Event Sequence Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | zero  |          VPI          |              VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Port\n             Field gives the switch port to which the event message\n\
    \             refers.\n   Port Session Number\n             The current Port Session\
    \ Number for the specified port.\n   Event Sequence Number\n             The current\
    \ value of the Event Sequence Number for the\n             specified port. The\
    \ Event Sequence Number is set to zero\n             when the port is initialized\
    \ and is incremented by one each\n             time an asynchronous event is detected\
    \ on that port that\n             the switch would normally report via an Event\
    \ message. The\n             Event Sequence Number must be incremented each time\
    \ an\n             event occurs even if the switch is prevented from sending\n\
    \             an Event message due to the action of the flow control.\n   VPI/VCI\n\
    \             Field gives the VPI/VCI to which the event message refers.\n   \
    \          If this field is not required by the event message it is\n        \
    \     set to zero.\n   Each switch port must maintain an Event Sequence Number\
    \ and a set of\n   Event Flags, one Event Flag for each type of Event message.\
    \  When a\n   switch port sends an Event message it must set the Event Flag on\
    \ that\n   port corresponding to the type of the event. The port is not\n   permitted\
    \ to send another Event message of the same type until the\n   Event Flag has\
    \ been reset. Event Flags are reset by the \"Reset Event\n   Flags\" function\
    \ of the Port Management message. This is a simple flow\n   control preventing\
    \ the switch from flooding the controller with event\n   messages. The Event Sequence\
    \ Number of the port must be incremented\n   every time an event is detected on\
    \ that port even if the port is\n   prevented from reporting the event due to\
    \ the action of the flow\n   control. This allows the controller to detect that\
    \ it has not been\n   informed of some events that have occurred on the port due\
    \ to the\n   action of the flow control.\n"
- title: 7.1 Port Up Message
  contents:
  - "7.1 Port Up Message\n   The Port Up message informs the controller that the Line\
    \ Status of a\n   port has changed from either the Down or Test state to the Up\
    \ state.\n   When the Line Status of a switch port changes to the Up state from\n\
    \   either the Down or Test state a new Port Session Number must be\n   generated,\
    \ preferably using some form of random number. The new Port\n   Session Number\
    \ is given in the Port Session Number field. The VPI/VCI\n   field is not used\
    \ and is set to zero.  The Port Up message is:\n      Message Type = 80\n"
- title: 7.2 Port Down Message
  contents:
  - "7.2 Port Down Message\n   The Port Down message informs the controller that the\
    \ Line Status of\n   a port has changed from the Up state to the Down state. This\
    \ message\n   will be sent to report link failure if the switch is capable of\n\
    \   detecting link failure. The port session number that was valid before\n  \
    \ the port went down is reported in the Port Session Number field. The\n   VPI/VCI\
    \ field is not used and is set to zero. The Port Down message\n   is:\n      Message\
    \ Type = 81\n"
- title: 7.3 Invalid VPI/VCI Message
  contents:
  - "7.3 Invalid VPI/VCI Message\n   The Invalid VPI/VCI message is sent to inform\
    \ the controller that one\n   or more cells have arrived at an input port with\
    \ a VPI/ VCI that is\n   currently not allocated to an assigned connection. The\
    \ input port is\n   indicated in the Port field, and the VPI/VCI in the VPI/VCI\
    \ field.\n   The Invalid VPI/VCI message is:\n      Message Type = 82\n"
- title: 7.4 New Port Message
  contents:
  - "7.4 New Port Message\n   The New Port message informs the controller that a new\
    \ port has been\n   added to the switch. The port number of the new port is given\
    \ in the\n   Port field. A new Port Session Number must be assigned, preferably\n\
    \   using some form of random number.  The new Port Session Number is\n   given\
    \ in the Port Session Number field.  The state of the new port is\n   undefined\
    \ so the VPI/VCI field is not used and is set to zero.  The\n   New Port message\
    \ is:\n      Message Type = 83\n"
- title: 7.5 Dead Port Message
  contents:
  - "7.5 Dead Port Message\n   The Dead Port message informs the controller that a\
    \ port has been\n   removed from the switch. The port number of the port is given\
    \ in the\n   Port field. The Port Session Number that was valid before the port\n\
    \   was removed is reported in the Port Session Number field.  The\n   VPI/VCI\
    \ fields are not used and are set to zero. The Dead Port\n   message is:\n   \
    \   Message Type = 84\n"
- title: 8. Adjacency Protocol
  contents:
  - "8. Adjacency Protocol\n   The adjacency protocol is used to synchronize state\
    \ across the link,\n   to discover the identity of the entity at the other end\
    \ of a link,\n   and to detect when it changes. No GSMP messages other than those\
    \ of\n   the adjacency protocol may be sent across the link until the\n   adjacency\
    \ protocol has achieved synchronization.\n"
- title: 8.1 Packet Format
  contents:
  - "8.1 Packet Format\n   The adjacency protocol is:\n      Message Type = 10\n \
    \  All GSMP messages belonging to the adjacency protocol have the\n   following\
    \ structure:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Sender Name                          |\n   +  \
    \                             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |        \
    \                       |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                         Receiver Name\
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Sender Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Receiver Port                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sender Instance                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Receiver Instance                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n             The GSMP protocol version number, currently Version\
    \ = 1. It\n             should be set by the sender of the message to the GSMP\n\
    \             protocol version that the sender is currently running.\n   Result\n\
    \             Field is not used in the adjacency protocol. It should be\n    \
    \         set to zero by the sender and ignored by the receiver.\n   Code\n  \
    \           Field specifies the function of the message. Four Codes are\n    \
    \         defined for the adjacency protocol:\n                SYN:     Code =\
    \ 1\n                SYNACK:  Code = 2\n                ACK:     Code = 3\n  \
    \              RSTACK:  Code = 4.\n   Sender Name\n             For the SYN, SYNACK,\
    \ and ACK messages, is the name of the\n             entity sending the message.\
    \ The Sender Name is a 48 bit\n             quantity that is unique within the\
    \ operational context of\n             the device. A 48 bit IEEE 802 MAC address,\
    \ if available,\n             may be used for the Sender Name. For the RSTACK\
    \ message,\n             the Sender Name field is set to the value of the Receiver\n\
    \             Name field from the incoming message that caused the RSTACK\n  \
    \           message to be generated.\n   Receiver Name\n             For the SYN,\
    \ SYNACK, and ACK messages, is the name of the\n             entity that the sender\
    \ of the message believes is at the\n             far end of the link. If the\
    \ sender of the message does not\n             know the name of the entity at\
    \ the far end of the link,\n             this field should be set to zero. For\
    \ the RSTACK message,\n             the Receiver Name field is set to the value\
    \ of the Sender\n             Name field from the incoming message that caused\
    \ the RSTACK\n             message to be generated.\n   Sender Port\n        \
    \     For the SYN, SYNACK, and ACK messages, is the local port\n             number\
    \ of the link across which the message is being sent.\n             Port numbers\
    \ are locally assigned 32 bit values. For the\n             RSTACK message, the\
    \ Sender Port field is set to the value\n             of the Receiver Port field\
    \ from the incoming message that\n             caused the RSTACK message to be\
    \ generated.\n   Receiver Port\n             For the SYN, SYNACK, and ACK messages,\
    \ is what the sender\n             believes is the local port number for the link,\
    \ allocated\n             by the entity at the far end of the link.  If the sender\
    \ of\n             the message does not know the port number at the far end of\n\
    \             the link, this field should be set to zero. For the RSTACK\n   \
    \          message, the Receiver Port field is set to the value of the\n     \
    \        Sender Port field from the incoming message that caused the\n       \
    \      RSTACK message to be generated.\n   Sender Instance\n             For the\
    \ SYN, SYNACK, and ACK messages, is the sender's\n             instance number\
    \ for the link. It is used to detect when the\n             link comes back up\
    \ after going down or when the identity of\n             the entity at the other\
    \ end of the link changes. The\n             instance number is a 32 bit number\
    \ that is guaranteed to be\n             unique within the recent past and to\
    \ change when the link\n             or node comes back up after going down. Zero\
    \ is not a valid\n             instance number. For the RSTACK message, the Sender\n\
    \             Instance field is set to the value of the Receiver Instance\n  \
    \           field from the incoming message that caused the RSTACK\n         \
    \    message to be generated.\n   Receiver Instance\n             For the SYN,\
    \ SYNACK, and ACK messages, is what the sender\n             believes is the current\
    \ instance number for the link,\n             allocated by the entity at the far\
    \ end of the link. If the\n             sender of the message does not know the\
    \ current instance\n             number at the far end of the link, this field\
    \ should be set\n             to zero. For the RSTACK message, the Receiver Instance\n\
    \             field is set to the value of the Sender Instance field from\n  \
    \           the incoming message that caused the RSTACK message to be\n      \
    \       generated.\n"
- title: 8.2 Procedure
  contents:
  - "8.2 Procedure\n   The adjacency protocol is described by the rules and state\
    \ tables\n   given in this section.\n   The rules and state tables use the following\
    \ operations:\n    o The \"Update Peer Verifier\" operation is defined as storing\
    \ the\n      values of the Sender Instance, Sender Port, and Sender Name fields\n\
    \      from a SYN or SYNACK message received from the entity at the far\n    \
    \  end of the link.\n    o The procedure \"Reset the link\" is defined as:\n \
    \         1. Generate a new instance number for the link\n          2. Delete\
    \ the peer verifier (set to zero the values of Sender\n             Instance,\
    \ Sender Port, and Sender Name previously stored by\n             the Update Peer\
    \ Verifier operation)\n          3. Send a SYN message\n          4. Enter the\
    \ SYNSENT state\n    o The state tables use the following Boolean terms and operators:\n\
    \        A    The Sender Instance in the incoming message matches the\n      \
    \       value stored from a previous message by the \"Update Peer\n          \
    \   Verifier\" operation.\n        B    The Sender Instance, Sender Port, and\
    \ Sender Name fields in\n             the incoming message match the values stored\
    \ from a\n             previous message by the \"Update Peer Verifier\" operation.\n\
    \        C    The Receiver Instance, Receiver Port, and Receiver Name\n      \
    \       fields in the incoming message match the values of the\n             Sender\
    \ Instance, Sender Port, and Sender Name currently\n             sent in outgoing\
    \ SYN, SYNACK, and ACK messages.\n        \"&&\" Represents the logical AND operation\n\
    \        \"||\" Represents the logical OR operation\n        \"!\" Represents\
    \ the logical negation (NOT) operation.\n    o A timer is required for the periodic\
    \ generation of SYN, SYNACK,\n      and ACK messages. The period of the timer\
    \ is unspecified but a\n      value of one second is suggested.\n      There are\
    \ two independent events: the timer expires, and a packet\n      arrives. The\
    \ processing rules for these events are:\n         Timer Expires:   Reset Timer\n\
    \                          If state = SYNSENT Send SYN\n                     \
    \     If state = SYNRCVD Send SYNACK\n                          If state = ESTAB\
    \   Send ACK\n         Packet Arrives:  If incoming message is an RSTACK\n   \
    \                          If A && C && !SYNSENT\n                           \
    \     Reset the link\n                             Else Discard the message\n\
    \                          Else the following State Tables.\n    o State synchronization\
    \ across a link is considered to be achieved\n      when the protocol reaches\
    \ the ESTAB state.\n   State Tables\n"
- title: 'State: SYNSENT'
  contents:
  - 'State: SYNSENT

    '
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: '|     Condition      |                Action               | New State |'
  contents:
  - '|     Condition      |                Action               | New State |

    '
- title: +====================+=====================================+===========+
  contents:
  - '+====================+=====================================+===========+

    '
- title: '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |'
  contents:
  - '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|    SYNACK && !C    |            Send RSTACK              |  SYNSENT  |'
  contents:
  - '|    SYNACK && !C    |            Send RSTACK              |  SYNSENT  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |'
  contents:
  - '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        ACK         |            Send RSTACK              |  SYNSENT  |'
  contents:
  - '|        ACK         |            Send RSTACK              |  SYNSENT  |

    '
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: 'State: SYNRCVD'
  contents:
  - 'State: SYNRCVD

    '
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: '|     Condition      |                Action               | New State |'
  contents:
  - '|     Condition      |                Action               | New State |

    '
- title: +====================+=====================================+===========+
  contents:
  - '+====================+=====================================+===========+

    '
- title: '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |'
  contents:
  - '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|    SYNACK && !C    |            Send RSTACK              |  SYNRCVD  |'
  contents:
  - '|    SYNACK && !C    |            Send RSTACK              |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |'
  contents:
  - '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|   ACK && B && C    |              Send ACK               |   ESTAB   |'
  contents:
  - '|   ACK && B && C    |              Send ACK               |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|  ACK && !(B && C)  |            Send RSTACK              |  SYNRCVD  |'
  contents:
  - '|  ACK && !(B && C)  |            Send RSTACK              |  SYNRCVD  |

    '
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: 'State: ESTAB'
  contents:
  - 'State: ESTAB

    '
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: '|     Condition      |                Action               | New State |'
  contents:
  - '|     Condition      |                Action               | New State |

    '
- title: +====================+=====================================+===========+
  contents:
  - '+====================+=====================================+===========+

    '
- title: '|   SYN || SYNACK    |           Send ACK (note 1)         |   ESTAB   |'
  contents:
  - '|   SYN || SYNACK    |           Send ACK (note 1)         |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|   ACK && B && C    |           Send ACK (note 1)         |   ESTAB   |'
  contents:
  - '|   ACK && B && C    |           Send ACK (note 1)         |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|  ACK && !(B && C)  |              Send RSTACK            |   ESTAB   |'
  contents:
  - '|  ACK && !(B && C)  |              Send RSTACK            |   ESTAB   |

    '
- title: +======================================================================+
  contents:
  - "+======================================================================+\n  \
    \ Note 1: No more than one ACK should be sent within any time period of\n   length\
    \ defined by the timer.\n"
- title: 9. Failure Response Messages
  contents:
  - "9. Failure Response Messages\n   A failure response message is formed by returning\
    \ the request message\n   that caused the failure with the Result field in the\
    \ header\n   indicating failure (Result = 4) and the Code field giving the failure\n\
    \   code. The failure code specifies the reason for the switch being\n   unable\
    \ to satisfy the request message. A failure code of 16 is used\n   for a failure\
    \ that is specific to the particular request message and\n   its meaning is defined\
    \ within the text describing that message. The\n   following failure codes are\
    \ defined:\n       1:  Unspecified reason not covered by other failure codes.\n\
    \       2:  Invalid request message.\n       3:  The specified request is not\
    \ implemented on this switch.\n       4:  Invalid port session number.\n     \
    \  5:  One or more of the specified ports does not exist.\n       6:  One or more\
    \ of the specified ports is down.\n       7:  One or more of the specified VPIs\
    \ or VCIs is out of range on\n           one or more of the requested ports.\n\
    \       8:  The specified connection does not exist.\n       9:  The specified\
    \ branch does not exist.\n       10: A branch belonging to the specified multicast\
    \ connection is\n           already established on the specified output port and\
    \ the\n           switch cannot support more than a single branch of any\n   \
    \        multicast connection on the same output port.\n       11: The limit on\
    \ the maximum number of multicast connections that\n           the switch can\
    \ support has been reached.\n       12: The limit on the maximum number of branches\
    \ that the\n           specified multicast connection can support has been reached.\n\
    \       13: Unable to assign the requested VPI/VCI value to the requested\n  \
    \         branch on the specified multicast connection.\n       14: General problem\
    \ related to the manner in which multicast is\n           supported by the switch.\n\
    \       15: Out of resources (e.g. memory exhausted, etc.).\n       16: Failure\
    \ specific to the particular message type.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [I.361]   \"B-ISDN ATM Layer Specification,\" International\n\
    \             Telecommunication Union, ITU-T Recommendation I.361, Mar.\n    \
    \         1993.\n   [I.363]   \"B-ISDN ATM Adaptation Layer (AAL) Specification,\"\
    \n             International Telecommunication Union, ITU-T Recommendation\n \
    \            I.363, Mar. 1993.\n   [rfc1700] \"Assigned Numbers,\" STD 2, RFC\
    \ 1700, October 1994.\n   [rfc1573] \"Evolution of the Interfaces Group of MIB-II,\"\
    \ RFC 1573,\n             January 1994.\n"
- title: SECURITY CONSIDERATIONS
  contents:
  - "SECURITY CONSIDERATIONS\n   Security issues are not discussed in this document.\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n   Peter Newman                        Phone: +1 (415) 846-4603\n\
    \   Ipsilon Networks, Inc.              Email: pn@ipsilon.com\n   W. L. Edwards,\
    \ Chief Scientist      Phone:  +1 (913) 534 5334\n   Sprint                  \
    \            Email:  texas@sprintcorp.com\n   Robert M. Hinden               \
    \     Phone: +1 (415) 846-4604\n   Ipsilon Networks, Inc.              Email:\
    \ hinden@ipsilon.com\n   Eric Hoffman                        Phone: +1 (415) 846-4610\n\
    \   Ipsilon Networks, Inc.              Email: hoffman@ipsilon.com\n   Fong Ching\
    \ Liaw                     Phone: +1 (415) 846-4607\n   Ipsilon Networks, Inc.\
    \              Email: fong@ipsilon.com\n   Tom Lyon                          \
    \  Phone: +1 (415) 846-4601\n   Ipsilon Networks, Inc.              Email: pugs@ipsilon.com\n\
    \   Greg Minshall                       Phone: +1 (415) 846-4605\n   Ipsilon Networks,\
    \ Inc.              Email: minshall@ipsilon.com\n"
- title: 'Ipsilon Networks, Inc. is located at:'
  contents:
  - "Ipsilon Networks, Inc. is located at:\n   2191 East Bayshore Road\n   Suite 100\n\
    \   Palo Alto, CA 94303\n   USA\n"
- title: 'Sprint is located at:'
  contents:
  - "Sprint is located at:\n   Sprint\n   Sprint Technology Services - Long Distance\
    \ Division\n   9300 Metcalf Avenue\n   Mailstop KSOPKB0802\n   Overland Park,\
    \ KS 66212-6333\n   USA\n"
