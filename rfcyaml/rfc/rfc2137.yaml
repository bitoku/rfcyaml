- title: __initial_text__
  contents:
  - '                Secure Domain Name System Dynamic Update

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Domain Name System (DNS) protocol extensions have been defined to\n\
    \   authenticate the data in DNS and provide key distribution services\n   [RFC2065].\
    \  DNS Dynamic Update operations have also been defined\n   [RFC2136], but without\
    \ a detailed description of security for the\n   update operation.  This memo\
    \ describes how to use DNSSEC digital\n   signatures covering requests and data\
    \ to secure updates and restrict\n   updates to those authorized to perform them\
    \ as indicated by the\n   updater's possession of cryptographic keys.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The contributions of the following persons (who are listed\
    \ in\n   alphabetic order) to this memo are gratefully acknowledged:\n       \
    \  Olafur Gudmundsson (ogud@tis.com>\n         Charlie Kaufman <Charlie_Kaufman@iris.com>\n\
    \         Stuart Kwan <skwan@microsoft.com>\n         Edward Lewis <lewis@tis.com>\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1. Introduction............................................2\n\
    \      1.1 Overview of DNS Dynamic Update.........................2\n      1.2\
    \ Overview of DNS Security...............................2\n      2. Two Basic\
    \ Modes.........................................3\n      3. Keys....................................................5\n\
    \      3.1 Update Keys............................................6\n      3.1.1\
    \ Update Key Name Scope................................6\n      3.1.2 Update Key\
    \ Class Scope...............................6\n      3.1.3 Update Key Signatory\
    \ Field...........................6\n      3.2 Zone Keys and Update Modes.............................8\n\
    \      3.3 Wildcard Key Punch Through.............................9\n      4.\
    \ Update Signatures.......................................9\n      4.1 Update\
    \ Request Signatures..............................9\n      4.2 Update Data Signatures................................10\n\
    \      5. Security Considerations................................10\n      References................................................10\n\
    \      Author's Address..........................................11\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Dynamic update operations have been defined for the Domain\
    \ Name\n   System (DNS) in RFC 2136, but without a detailed description of\n \
    \  security for those updates.  Means of securing the DNS and using it\n   for\
    \ key distribution have been defined in RFC 2065.\n   This memo proposes techniques\
    \ based on the defined DNS security\n   mechanisms to authenticate DNS updates.\n\
    \   Familiarity with the DNS system [RFC 1034, 1035] is assumed.\n   Familiarity\
    \ with the DNS security and dynamic update proposals will\n   be helpful.\n"
- title: 1.1 Overview of DNS Dynamic Update
  contents:
  - "1.1 Overview of DNS Dynamic Update\n   DNS dynamic update defines a new DNS opcode,\
    \ new DNS request and\n   response structure if that opcode is used, and new error\
    \ codes.  An\n   update can specify complex combinations of deletion and insertion\n\
    \   (with or without pre-existence testing) of resource records (RRs)\n   with\
    \ one or more owner names; however, all testing and changes for\n   any particular\
    \ DNS update request are restricted to a single zone.\n   Updates occur at the\
    \ primary server for a zone.\n   The primary server for a secure dynamic zone\
    \ must increment the zone\n   SOA serial number when an update occurs or the next\
    \ time the SOA is\n   retrieved if one or more updates have occurred since the\
    \ previous SOA\n   retrieval and the updates themselves did not update the SOA.\n"
- title: 1.2 Overview of DNS Security
  contents:
  - "1.2 Overview of DNS Security\n   DNS security authenticates data in the DNS by\
    \ also storing digital\n   signatures in the DNS as SIG resource records (RRs).\
    \  A SIG RR\n   provides a digital signature on the set of all RRs with the same\n\
    \   owner name and class as the SIG and whose type is the type covered by\n  \
    \ the SIG.  The SIG RR cryptographically binds the covered RR set to\n   the signer,\
    \ time signed, signature expiration date, etc.  There are\n   one or more keys\
    \ associated with every secure zone and all data in\n   the secure zone is signed\
    \ either by a zone key or by a dynamic update\n   key tracing its authority to\
    \ a zone key.\n   DNS security also defines transaction SIGs and request SIGs.\n\
    \   Transaction SIGs appear at the end of a response.  Transaction SIGs\n   authenticate\
    \ the response and bind it to the corresponding request\n   with the key of the\
    \ host where the responding DNS server is.  Request\n   SIGs appear at the end\
    \ of a request and authenticate the request with\n   the key of the submitting\
    \ entity.\n   Request SIGs are the primary means of authenticating update requests.\n\
    \   DNS security also permits the storage of public keys in the DNS via\n   KEY\
    \ RRs.  These KEY RRs are also, of course, authenticated by SIG\n   RRs.  KEY\
    \ RRs for zones are stored in their superzone and subzone\n   servers, if any,\
    \ so that the secure DNS tree of zones can be\n   traversed by a security aware\
    \ resolver.\n"
- title: 2. Two Basic Modes
  contents:
  - "2. Two Basic Modes\n   A dynamic secure zone is any secure DNS zone containing\
    \ one or more\n   KEY RRs that can authorize dynamic updates, i.e., entity or\
    \ user KEY\n   RRs with the signatory field non-zero, and whose zone KEY RR\n\
    \   signatory field indicates that updates are implemented. There are two\n  \
    \ basic modes of dynamic secure zone which relate to the update\n   strategy,\
    \ mode A and mode B.  A summary comparison table is given\n   below and then each\
    \ mode is described.\n                   SUMMARY OF DYNAMIC SECURE ZONE MODES\n\
    \   CRITERIA:                |   MODE A           |   MODE B\n   =========================+====================+===================\n\
    \   Definition:              | Zone Key Off line  | Zone Key On line\n   =========================+====================+===================\n\
    \   Server Workload          |   Low              |   High\n   -------------------------+--------------------+-------------------\n\
    \   Static Data Security     |   Very High        |   Medium-High\n   -------------------------+--------------------+-------------------\n\
    \   Dynamic Data Security    |   Medium           |   Medium-High\n   -------------------------+--------------------+-------------------\n\
    \   Key Restrictions         |   Fine grain       |   Coarse grain\n   -------------------------+--------------------+-------------------\n\
    \   Dynamic Data Temporality |   Transient        |   Permanent\n   -------------------------+--------------------+-------------------\n\
    \   Dynamic Key Rollover     |   No               |   Yes\n   -------------------------+--------------------+-------------------\n\
    \   For mode A, the zone owner key and static zone master file are always\n  \
    \ kept off-line for maximum security of the static zone contents.\n   As a consequence,\
    \ any dynamicly added or changed RRs are signed in\n   the secure zone by their\
    \ authorizing dynamic update key and they are\n   backed up, along with this SIG\
    \ RR, in a separate online dynamic\n   master file.  In this type of zone, server\
    \ computation is minimized\n   since the server need only check signatures on\
    \ the update data and\n   request, which have already been signed by the updater,\
    \ generally a\n   much faster operation than signing data.  However, the AXFR\
    \ SIG and\n   NXT RRs which covers the zone under the zone key will not cover\n\
    \   dynamically added data.  Thus, for type A dynamic secure zones, zone\n   transfer\
    \ security is not automatically provided for dynamically added\n   RRs, where\
    \ they could be omitted, and authentication is not provided\n   for the server\
    \ denial of the existence of a dynamically added type.\n   Because the dynamicly\
    \ added RRs retain their update KEY signed SIG,\n   finer grained control of updates\
    \ can be implemented via bits in the\n   KEY RR signatory field.  Because dynamic\
    \ data is only stored in the\n   online dynamic master file and only authenticated\
    \ by dynamic keys\n   which expire, updates are transient in nature.  Key rollover\
    \ for an\n   entity that can authorize dynamic updates is more cumbersome since\n\
    \   the authority of their key must be traceable to a zone key and so, in\n  \
    \ general, they must securely communicate a new key to the zone\n   authority\
    \ for manual transfer to the off line static master file.\n   NOTE: for this mode\
    \ the zone SOA must be signed by a dynamic update\n   key and that private key\
    \ must be kept on line so that the SOA can be\n   changed for updates.\n   For\
    \ mode B, the zone owner key and master file are kept on-line at\n   the zone\
    \ primary server. When authenticated updates succeed, SIGs\n   under the zone\
    \ key for the resulting data (including the possible NXT\n   type bit map changes)\
    \ are calculated and these SIG (and possible NXT)\n   changes are entered into\
    \ the zone and the unified on-line master\n   file.  (The zone transfer AXFR SIG\
    \ may be recalculated for each\n   update or on demand when a zone transfer is\
    \ requested and it is out\n   of date.)\n   As a consequence, this mode requires\
    \ considerably more computational\n   effort on the part of the server as the\
    \ public/private keys are\n   generally arranged so that signing (calculating\
    \ a SIG) is more effort\n   than verifying a signature.  The security of static\
    \ data in the zone\n   is decreased because the ultimate state of the static data\
    \ being\n   served and the ultimate zone authority private key are all on-line\
    \ on\n   the net.  This means that if the primary server is subverted, false\n\
    \   data could be authenticated to secondaries and other\n   servers/resolvers.\
    \  On the other hand, this mode of operation means\n   that data added dynamically\
    \ is more secure than in mode A.  Dynamic\n   data will be covered by the AXFR\
    \ SIG and thus always protected during\n   zone transfers and will be included\
    \ in NXT RRs so that it can be\n   falsely denied by a server only to the same\
    \ extent that static data\n   can (i.e., if it is within a wild card scope). Because\
    \ the zone key\n   is used to sign all the zone data, the information as to who\n\
    \   originated the current state of dynamic RR sets is lost, making\n   unavailable\
    \ the effects of some of the update control bits in the KEY\n   RR signatory field.\
    \  In addition, the incorporation of the updates\n   into the primary master file\
    \ and their authentication by the zone key\n   makes then permanent in nature.\
    \  Maintaining the zone key on-line\n   also means that dynamic update keys which\
    \ are signed by the zone key\n   can be dynamically updated since the zone key\
    \ is available to\n   dynamically sign new values.\n   NOTE:  The Mode A / Mode\
    \ B distinction only effects the validation\n   and performance of update requests.\
    \  It has no effect on retrievals.\n   One reasonable operational scheme may be\
    \ to keep a mostly static main\n   zone operating in Mode A and have one or more\
    \ dynamic subzones\n   operating in Mode B.\n"
- title: 3. Keys
  contents:
  - "3. Keys\n   Dynamic update requests depend on update keys as described in section\n\
    \   3.1 below.  In addition, the zone secure dynamic update mode and\n   availability\
    \ of some options is indicated in the zone key.  Finally,\n   a special rule is\
    \ used in searching for KEYs to validate updates as\n   described in section 3.3.\n"
- title: 3.1 Update Keys
  contents:
  - "3.1 Update Keys\n   All update requests to a secure zone must include signatures\
    \ by one\n   or more key(s) that together can authorize that update.  In order\
    \ for\n   the Domain Name System (DNS) server receiving the request to confirm\n\
    \   this, the key or keys must be available to and authenticated by that\n   server\
    \ as a specially flagged KEY Resource Record.\n   The scope of authority of such\
    \ keys is indicated by their KEY RR\n   owner name, class, and signatory field\
    \ flags as described below. In\n   addition, such KEY RRs must be entity or user\
    \ keys and not have the\n   authentication use prohibited bit on.  All parts of\
    \ the actual update\n   must be within the scope of at least one of the keys used\
    \ for a\n   request SIG on the update request as described in section 4.\n"
- title: 3.1.1 Update Key Name Scope
  contents:
  - "3.1.1 Update Key Name Scope\n   The owner name of any update authorizing KEY\
    \ RR must (1) be the same\n   as the owner name of any RRs being added or deleted\
    \ or (2) a wildcard\n   name including within its extended scope (see section\
    \ 3.3) the name\n   of any RRs being added or deleted and those RRs must be in\
    \ the same\n   zone.\n"
- title: 3.1.2 Update Key Class Scope
  contents:
  - "3.1.2 Update Key Class Scope\n   The class of any update authorizing KEY RR must\
    \ be the same as the\n   class of any RR's being added or deleted.\n"
- title: 3.1.3 Update Key Signatory Field
  contents:
  - "3.1.3 Update Key Signatory Field\n   The four bit \"signatory field\" (see RFC\
    \ 2065) of any update\n   authorizing KEY RR must be non-zero.  The bits have\
    \ the meanings\n   described below for non-zone keys (see section 3.2 for zone\
    \ type\n   keys).\n                    UPDATE KEY RR SIGNATORY FIELD BITS\n  \
    \       0           1           2           3\n   +-----------+-----------+-----------+-----------+\n\
    \   |   zone    |  strong   |  unique   |  general  |\n   +-----------+-----------+-----------+-----------+\n\
    \   Bit 0, zone control - If nonzero, this key is authorized to attach,\n    \
    \    detach, and move zones by creating and deleting NS, glue A, and\n       \
    \ zone KEY RR(s).  If zero, the key can not authorize any update\n        that\
    \ would effect such RRs.  This bit is meaningful for both\n        type A and\
    \ type B dynamic secure zones.\n        NOTE:  do not confuse the \"zone\" signatory\
    \ field bit with the\n        \"zone\" key type bit.\n   Bit 1, strong update\
    \ - If nonzero, this key is authorized to add and\n        delete RRs even if\
    \ there are other RRs with the same owner name\n        and class that are authenticated\
    \ by a SIG signed with a\n        different dynamic update KEY. If zero, the key\
    \ can only\n        authorize updates where any existing RRs of the same owner\
    \ and\n        class are authenticated by a SIG using the same key.  This bit\n\
    \        is meaningful only for type A dynamic zones and is ignored in\n     \
    \   type B dynamic zones.\n        Keeping this bit zero on multiple KEY RRs with\
    \ the same or\n        nested wild card owner names permits multiple entities\
    \ to exist\n        that can create and delete names but can not effect RRs with\n\
    \        different owner names from any they created.  In effect, this\n     \
    \   creates two levels of dynamic update key, strong and weak, where\n       \
    \ weak keys are limited in interfering with each other but a\n        strong key\
    \ can interfere with any weak keys or other strong\n        keys.\n   Bit 2, unique\
    \ name update - If nonzero, this key is authorized to add\n        and update\
    \ RRs for only a single owner name.  If there already\n        exist RRs with\
    \ one or more names signed by this key, they may be\n        updated but no new\
    \ name created until the number of existing\n        names is reduced to zero.\
    \  This bit is meaningful only for mode\n        A dynamic zones and is ignored\
    \ in mode B dynamic zones. This bit\n        is meaningful only if the owner name\
    \ is a wildcard.  (Any\n        dynamic update KEY with a non-wildcard name is,\
    \ in effect, a\n        unique name update key.)\n        This bit can be used\
    \ to restrict a KEY from flooding a zone with\n        new names.  In conjunction\
    \ with a local administratively imposed\n        limit on the number of dynamic\
    \ RRs with a particular name, it\n        can completely restrict a KEY from flooding\
    \ a zone with RRs.\n   Bit 3, general update - The general update signatory field\
    \ bit has no\n        special meaning.  If the other three bits are all zero,\
    \ it must\n        be one so that the field is non-zero to designate that the\
    \ key\n        is an update key.  The meaning of all values of the signatory\n\
    \        field with the general bit and one or more other signatory field\n  \
    \      bits on is reserved.\n   All the signatory bit update authorizations described\
    \ above only\n   apply if the update is within the name and class scope as per\n\
    \   sections 3.1.1 and 3.1.2.\n"
- title: 3.2 Zone Keys and Update Modes
  contents:
  - "3.2 Zone Keys and Update Modes\n   Zone type keys are automatically authorized\
    \ to sign anything in their\n   zone, of course, regardless of the value of their\
    \ signatory field.\n   For zone keys, the signatory field bits have different\
    \ means than\n   they they do for update keys, as shown below.  The signatory\
    \ field\n   MUST be zero if dynamic update is not supported for a zone and MUST\n\
    \   be non-zero if it is.\n                     ZONE KEY RR SIGNATORY FIELD BITS\n\
    \                  0           1           2           3\n            +-----------+-----------+-----------+-----------+\n\
    \            |   mode    |  strong   |  unique   |  general  |\n            +-----------+-----------+-----------+-----------+\n\
    \   Bit 0, mode - This bit indicates the update mode for this zone.  Zero\n  \
    \      indicates mode A while a one indicates mode B.\n   Bit 1, strong update\
    \ - If nonzero, this indicates that the \"strong\"\n        key feature described\
    \ in section 3.1.3 above is implemented and\n        enabled for this secure zone.\
    \  If zero, the feature is not\n        available.  Has no effect if the zone\
    \ is a mode B secure update\n        zone.\n   Bit 2, unique name update - If\
    \ nonzero, this indicates that the\n        \"unique name\" feature described\
    \ in section 3.1.3 above is\n        implemented and enabled for this secure zone.\
    \  If zero, this\n        feature is not available.  Has no effect if the zone\
    \ is a mode B\n        secure update zone.\n   Bit 3, general - This bit has no\
    \ special meeting.  If dynamic update\n        for a zone is supported and the\
    \ other bits in the zone key\n        signatory field are zero, it must be a one.\
    \  The meaning of zone\n        keys where the signatory field has the general\
    \ bit and one or\n        more other bits on is reserved.\n   If there are multiple\
    \ dynamic update KEY RRs for a zone and zone\n   policy is in transition, they\
    \ might have different non-zero signatory\n   fields.  In that case, strong and\
    \ unique name restrictions must be\n   enforced as long as there is a non-expired\
    \ zone key being advertised\n   that indicates mode A with the strong or unique\
    \ name bit on\n   respectively.  Mode B updates MUST be supported as long as there\
    \ is a\n   non-expired zone key that indicates mode B.  Mode A updates may be\n\
    \   treated as mode B updates at server option if non-expired zone keys\n   indicate\
    \ that both are supported.\n   A server that will be executing update operations\
    \ on a zone, that is,\n   the primary master server, MUST not advertize a zone\
    \ key that will\n   attract requests for a mode or features that it can not support.\n"
- title: 3.3 Wildcard Key Punch Through
  contents:
  - "3.3 Wildcard Key Punch Through\n   Just as a zone key is valid throughout the\
    \ entire zone, update keys\n   with wildcard names are valid throughout their\
    \ extended scope, within\n   the zone. That is, they remain valid for any name\
    \ that would match\n   them, even existing specific names within their apparent\
    \ scope.\n   If this were not so, then whenever a name within a wildcard scope\
    \ was\n   created by dynamic update, it would be necessary to first create a\n\
    \   copy of the KEY RR with this name, because otherwise the existence of\n  \
    \ the more specific name would hide the authorizing KEY RR and would\n   make\
    \ later updates impossible.  An updater could create such a KEY RR\n   but could\
    \ not zone sign it with their authorizing signer.  They would\n   have to sign\
    \ it with the same key using the wildcard name as signer.\n   Thus in creating,\
    \ for example, one hundred type A RRs authorized by a\n   *.1.1.1.in-addr.arpa.\
    \ KEY RR, without key punch through 100 As, 100\n   KEYs, and 200 SIGs would have\
    \ to be created as opposed to merely 100\n   As and 100 SIGs with key punch through.\n"
- title: 4. Update Signatures
  contents:
  - "4. Update Signatures\n   Two kinds of signatures can appear in updates.  Request\
    \ signatures,\n   which are always required, cover the entire request and authenticate\n\
    \   the DNS header, including opcode, counts, etc., as well as the data.\n   Data\
    \ signatures, on the other hand, appear only among the RRs to be\n   added and\
    \ are only required for mode A operation.  These two types of\n   signatures are\
    \ described further below.\n"
- title: 4.1 Update Request Signatures
  contents:
  - "4.1 Update Request Signatures\n   An update can effect multiple owner names in\
    \ a zone.  It may be that\n   these different names are covered by different dynamic\
    \ update keys.\n   For every owner name effected, the updater must know a private\
    \ key\n   valid for that name (and the zone's class) and must prove this by\n\
    \   appending request SIG RRs under each such key.\n   As specified in RFC 2065,\
    \ a request signature is a SIG RR occurring\n   at the end of a request with a\
    \ type covered field of zero.  For an\n   update, request signatures occur in\
    \ the Additional information\n   section.  Each request SIG signs the entire request,\
    \ including DNS\n   header, but excluding any other request SIG(s) and with the\
    \ ARCOUNT\n   in the DNS header set to what it wold be without the request SIGs.\n"
- title: 4.2 Update Data Signatures
  contents:
  - "4.2 Update Data Signatures\n   Mode A dynamic secure zones require that the update\
    \ requester provide\n   SIG RRs that will authenticate the after update state\
    \ of all RR sets\n   that are changed by the update and are non-empty after the\
    \ update.\n   These SIG RRs appear in the request as RRs to be added and the\n\
    \   request must delete any previous data SIG RRs that are invalidated by\n  \
    \ the request.\n   In Mode B dynamic secure zones, all zone data is authenticated\
    \ by\n   zone key SIG RRs.  In this case, data signatures need not be included\n\
    \   with the update.  A resolver can determine which mode an updatable\n   secure\
    \ zone is using by examining the signatory field bits of the\n   zone KEY RR (see\
    \ section 3.2).\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Any zone permitting dynamic updates is inherently\
    \ less secure than a\n   static secure zone maintained off line as recommended\
    \ in RFC 2065. If\n   nothing else, secure dynamic update requires on line change\
    \ to and\n   re-signing of the zone SOA resource record (RR) to increase the SOA\n\
    \   serial number.  This means that compromise of the primary server host\n  \
    \ could lead to arbitrary serial number changes.\n   Isolation of dynamic RRs\
    \ to separate zones from those holding most\n   static RRs can limit the damage\
    \ that could occur from breach of a\n   dynamic zone's security.\n"
- title: References
  contents:
  - "References\n   [RFC2065] Eastlake, D., and C. Kaufman, \"Domain Name System Security\n\
    \   Extensions\", RFC 2065, CyberCash, Iris, January 1997.\n   [RFC2136] Vixie,\
    \ P., Editor, Thomson, T., Rekhter, Y., and J. Bound,\n   \"Dynamic Updates in\
    \ the Domain Name System (DNS UPDATE)\", RFC 2136,\n   April 1997.\n   [RFC1035]\
    \ Mockapetris, P., \"Domain Names - Implementation and\n   Specifications\", STD\
    \ 13, RFC 1035, November 1987.\n   [RFC1034] Mockapetris, P., \"Domain Names -\
    \ Concepts and Facilities\",\n   STD 13, RFC 1034, November 1987.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Donald E. Eastlake, 3rd\n   CyberCash, Inc.\n   318 Acton\
    \ Street\n   Carlisle, MA 01741 USA\n   Phone:   +1 508-287-4877\n           \
    \ +1 508-371-7148 (fax)\n            +1 703-620-4200 (main office, Reston, Virginia,\
    \ USA)\n   EMail:   dee@cybercash.com\n"
