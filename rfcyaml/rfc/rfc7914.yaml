- title: __initial_text__
  contents:
  - '           The scrypt Password-Based Key Derivation Function

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the password-based key derivation function\n\
    \   scrypt.  The function derives one or more secret keys from a secret\n   string.\
    \  It is based on memory-hard functions, which offer added\n   protection against\
    \ attacks using custom hardware.  The document also\n   provides an ASN.1 schema.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7914.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  scrypt Parameters . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  The Salsa20/8 Core Function . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  The scryptBlockMix Algorithm  . . . . . . . . . . . . . .\
    \ . .   5\n   5.  The scryptROMix Algorithm . . . . . . . . . . . . . . . . .\
    \ .   6\n   6.  The scrypt Algorithm  . . . . . . . . . . . . . . . . . . . .\
    \   7\n   7.  ASN.1 Syntax  . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 8\n     7.1.  ASN.1 Module  . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \   8.  Test Vectors for Salsa20/8 Core . . . . . . . . . . . . . . .   9\n  \
    \ 9.  Test Vectors for scryptBlockMix . . . . . . . . . . . . . . .  10\n   10.\
    \ Test Vectors for scryptROMix  . . . . . . . . . . . . . . . .  11\n   11. Test\
    \ Vectors for PBKDF2 with HMAC-SHA-256 . . . . . . . . . .  12\n   12. Test Vectors\
    \ for scrypt . . . . . . . . . . . . . . . . . . .  13\n   13. Test Vectors for\
    \ PKCS#8 . . . . . . . . . . . . . . . . . . .  14\n   14. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  14\n   15. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  15\n     15.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .  15\n     15.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .  15\n   Acknowledgements  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  16\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Password-based key derivation functions are used in cryptography\
    \ and\n   security protocols for deriving one or more secret keys from a secret\n\
    \   value.  Over the years, several password-based key derivation\n   functions\
    \ have been used, including the original DES-based UNIX\n   Crypt-function, FreeBSD\
    \ MD5 crypt, Public-Key Cryptography\n   Standards#5 (PKCS#5) PBKDF2 [RFC2898]\
    \ (typically used with SHA-1),\n   GNU SHA-256/512 crypt [SHA2CRYPT], Windows\
    \ NT LAN Manager (NTLM)\n   [NTLM] hash, and the Blowfish-based bcrypt [BCRYPT].\
    \  These\n   algorithms are all based on a cryptographic primitive combined with\n\
    \   salting and/or iteration.  The iteration count is used to slow down\n   the\
    \ computation, and the salt is used to make pre-computation\n   costlier.\n  \
    \ All password-based key derivation functions mentioned above share the\n   same\
    \ weakness against powerful attackers.  Provided that the number\n   of iterations\
    \ used is increased as computer systems get faster, this\n   allows legitimate\
    \ users to spend a constant amount of time on key\n   derivation without losing\
    \ ground to attackers' ever-increasing\n   computing power -- as long as attackers\
    \ are limited to the same\n   software implementations as legitimate users.  While\
    \ parallelized\n   hardware implementations may not change the number of operations\n\
    \   performed compared to software implementations, this does not prevent\n  \
    \ them from dramatically changing the asymptotic cost, since in many\n   contexts\
    \ -- including the embarrassingly parallel task of performing\n   a brute-force\
    \ search for a passphrase -- dollar-seconds are the most\n   appropriate units\
    \ for measuring the cost of a computation.  As\n   semiconductor technology develops,\
    \ circuits do not merely become\n   faster; they also become smaller, allowing\
    \ for a larger amount of\n   parallelism at the same cost.\n   Consequently, with\
    \ existing key derivation algorithms, even when the\n   iteration count is increased\
    \ so that the time taken to verify a\n   password remains constant, the cost of\
    \ finding a password by using a\n   brute-force attack implemented in hardware\
    \ drops each year.\n   The scrypt function aims to reduce the advantage that attackers\
    \ can\n   gain by using custom-designed parallel circuits for breaking\n   password-based\
    \ key derivation functions.\n   This document does not introduce scrypt for the\
    \ first time.  The\n   original scrypt paper [SCRYPT] was published as a peer-reviewed\n\
    \   scientific paper and contains further background and discussions.\n   The\
    \ purpose of this document is to serve as a stable reference for\n   documents\
    \ making use of scrypt.  The rest of this document is divided\n   into sections\
    \ that each describe parameter choices and algorithm\n   steps needed for the\
    \ final \"scrypt\" algorithm.\n"
- title: 2.  scrypt Parameters
  contents:
  - "2.  scrypt Parameters\n   The scrypt function takes several parameters.  The\
    \ passphrase P is\n   typically a human-chosen password.  The salt is normally\
    \ uniquely and\n   randomly generated [RFC4086].  The parameter r (\"blockSize\"\
    )\n   specifies the block size.  The CPU/Memory cost parameter N\n   (\"costParameter\"\
    ) must be larger than 1, a power of 2, and less than\n   2^(128 * r / 8).  The\
    \ parallelization parameter p\n   (\"parallelizationParameter\") is a positive\
    \ integer less than or equal\n   to ((2^32-1) * 32) / (128 * r).  The intended\
    \ output length dkLen is\n   the length in octets of the key to be derived (\"\
    keyLength\"); it is a\n   positive integer less than or equal to (2^32 - 1) *\
    \ 32.\n   Users of scrypt can tune the parameters N, r, and p according to the\n\
    \   amount of memory and computing power available, the latency-bandwidth\n  \
    \ product of the memory subsystem, and the amount of parallelism\n   desired.\
    \  At the current time, r=8 and p=1 appears to yield good\n   results, but as\
    \ memory latency and CPU parallelism increase, it is\n   likely that the optimum\
    \ values for both r and p will increase.  Note\n   also that since the computations\
    \ of SMix are independent, a large\n   value of p can be used to increase the\
    \ computational cost of scrypt\n   without increasing the memory usage; so we\
    \ can expect scrypt to\n   remain useful even if the growth rates of CPU power\
    \ and memory\n   capacity diverge.\n"
- title: 3.  The Salsa20/8 Core Function
  contents:
  - "3.  The Salsa20/8 Core Function\n   Salsa20/8 Core is a round-reduced variant\
    \ of the Salsa20 Core.  It is\n   a hash function from 64-octet strings to 64-octet\
    \ strings.  Note that\n   Salsa20/8 Core is not a cryptographic hash function\
    \ since it is not\n   collision resistant.  See Section 8 of [SALSA20SPEC] for\
    \ its\n   specification and [SALSA20CORE] for more information.  The algorithm\n\
    \   description, in C language, is included below as a stable reference,\n   without\
    \ endianness conversion and alignment.\n   #define R(a,b) (((a) << (b)) | ((a)\
    \ >> (32 - (b))))\n   void salsa20_word_specification(uint32 out[16],uint32 in[16])\n\
    \   {\n     int i;\n     uint32 x[16];\n     for (i = 0;i < 16;++i) x[i] = in[i];\n\
    \     for (i = 8;i > 0;i -= 2) {\n       x[ 4] ^= R(x[ 0]+x[12], 7);  x[ 8] ^=\
    \ R(x[ 4]+x[ 0], 9);\n       x[12] ^= R(x[ 8]+x[ 4],13);  x[ 0] ^= R(x[12]+x[\
    \ 8],18);\n       x[ 9] ^= R(x[ 5]+x[ 1], 7);  x[13] ^= R(x[ 9]+x[ 5], 9);\n \
    \      x[ 1] ^= R(x[13]+x[ 9],13);  x[ 5] ^= R(x[ 1]+x[13],18);\n       x[14]\
    \ ^= R(x[10]+x[ 6], 7);  x[ 2] ^= R(x[14]+x[10], 9);\n       x[ 6] ^= R(x[ 2]+x[14],13);\
    \  x[10] ^= R(x[ 6]+x[ 2],18);\n       x[ 3] ^= R(x[15]+x[11], 7);  x[ 7] ^= R(x[\
    \ 3]+x[15], 9);\n       x[11] ^= R(x[ 7]+x[ 3],13);  x[15] ^= R(x[11]+x[ 7],18);\n\
    \       x[ 1] ^= R(x[ 0]+x[ 3], 7);  x[ 2] ^= R(x[ 1]+x[ 0], 9);\n       x[ 3]\
    \ ^= R(x[ 2]+x[ 1],13);  x[ 0] ^= R(x[ 3]+x[ 2],18);\n       x[ 6] ^= R(x[ 5]+x[\
    \ 4], 7);  x[ 7] ^= R(x[ 6]+x[ 5], 9);\n       x[ 4] ^= R(x[ 7]+x[ 6],13);  x[\
    \ 5] ^= R(x[ 4]+x[ 7],18);\n       x[11] ^= R(x[10]+x[ 9], 7);  x[ 8] ^= R(x[11]+x[10],\
    \ 9);\n       x[ 9] ^= R(x[ 8]+x[11],13);  x[10] ^= R(x[ 9]+x[ 8],18);\n     \
    \  x[12] ^= R(x[15]+x[14], 7);  x[13] ^= R(x[12]+x[15], 9);\n       x[14] ^= R(x[13]+x[12],13);\
    \  x[15] ^= R(x[14]+x[13],18);\n     }\n     for (i = 0;i < 16;++i) out[i] = x[i]\
    \ + in[i];\n   }\n"
- title: 4.  The scryptBlockMix Algorithm
  contents:
  - "4.  The scryptBlockMix Algorithm\n   The scryptBlockMix algorithm is the same\
    \ as the BlockMix algorithm\n   described in [SCRYPT] but with Salsa20/8 Core\
    \ used as the hash\n   function H.  Below, Salsa(T) corresponds to the Salsa20/8\
    \ Core\n   function applied to the octet vector T.\n   Algorithm scryptBlockMix\n\
    \   Parameters:\n            r       Block size parameter.\n   Input:\n      \
    \      B[0] || B[1] || ... || B[2 * r - 1]\n                   Input octet string\
    \ (of size 128 * r octets),\n                   treated as 2 * r 64-octet blocks,\n\
    \                   where each element in B is a 64-octet block.\n   Output:\n\
    \            B'[0] || B'[1] || ... || B'[2 * r - 1]\n                   Output\
    \ octet string.\n   Steps:\n     1. X = B[2 * r - 1]\n     2. for i = 0 to 2 *\
    \ r - 1 do\n          T = X xor B[i]\n          X = Salsa (T)\n          Y[i]\
    \ = X\n        end for\n     3. B' = (Y[0], Y[2], ..., Y[2 * r - 2],\n       \
    \       Y[1], Y[3], ..., Y[2 * r - 1])\n"
- title: 5.  The scryptROMix Algorithm
  contents:
  - "5.  The scryptROMix Algorithm\n   The scryptROMix algorithm is the same as the\
    \ ROMix algorithm\n   described in [SCRYPT] but with scryptBlockMix used as the\
    \ hash\n   function H and the Integerify function explained inline.\n   Algorithm\
    \ scryptROMix\n   Input:\n            r       Block size parameter.\n        \
    \    B       Input octet vector of length 128 * r octets.\n            N     \
    \  CPU/Memory cost parameter, must be larger than 1,\n                    a power\
    \ of 2, and less than 2^(128 * r / 8).\n   Output:\n            B'      Output\
    \ octet vector of length 128 * r octets.\n   Steps:\n     1. X = B\n     2. for\
    \ i = 0 to N - 1 do\n          V[i] = X\n          X = scryptBlockMix (X)\n  \
    \      end for\n     3. for i = 0 to N - 1 do\n          j = Integerify (X) mod\
    \ N\n                 where Integerify (B[0] ... B[2 * r - 1]) is defined\n  \
    \               as the result of interpreting B[2 * r - 1] as a\n            \
    \     little-endian integer.\n          T = X xor V[j]\n          X = scryptBlockMix\
    \ (T)\n        end for\n     4. B' = X\n"
- title: 6.  The scrypt Algorithm
  contents:
  - "6.  The scrypt Algorithm\n   The PBKDF2-HMAC-SHA-256 function used below denotes\
    \ the PBKDF2\n   algorithm [RFC2898] used with HMAC-SHA-256 [RFC6234] as the\n\
    \   Pseudorandom Function (PRF).  The HMAC-SHA-256 function generates\n   32-octet\
    \ outputs.\n   Algorithm scrypt\n   Input:\n            P       Passphrase, an\
    \ octet string.\n            S       Salt, an octet string.\n            N   \
    \    CPU/Memory cost parameter, must be larger than 1,\n                    a\
    \ power of 2, and less than 2^(128 * r / 8).\n            r       Block size parameter.\n\
    \            p       Parallelization parameter, a positive integer\n         \
    \           less than or equal to ((2^32-1) * hLen) / MFLen\n                \
    \    where hLen is 32 and MFlen is 128 * r.\n            dkLen   Intended output\
    \ length in octets of the derived\n                    key; a positive integer\
    \ less than or equal to\n                    (2^32 - 1) * hLen where hLen is 32.\n\
    \   Output:\n            DK      Derived key, of length dkLen octets.\n   Steps:\n\
    \    1. Initialize an array B consisting of p blocks of 128 * r octets\n     \
    \  each:\n        B[0] || B[1] || ... || B[p - 1] =\n          PBKDF2-HMAC-SHA256\
    \ (P, S, 1, p * 128 * r)\n    2. for i = 0 to p - 1 do\n          B[i] = scryptROMix\
    \ (r, B[i], N)\n        end for\n    3. DK = PBKDF2-HMAC-SHA256 (P, B[0] || B[1]\
    \ || ... || B[p - 1],\n                                 1, dkLen)\n"
- title: 7.  ASN.1 Syntax
  contents:
  - "7.  ASN.1 Syntax\n   This section defines ASN.1 syntax for the scrypt key derivation\n\
    \   function (KDF).  This is intended to operate on the same abstraction\n   level\
    \ as PKCS#5's PBKDF2.  The OID id-scrypt below can be used where\n   id-PBKDF2\
    \ is used, with scrypt-params corresponding to PBKDF2-params.\n   The intended\
    \ application of these definitions includes PKCS #8 and\n   other syntax for key\
    \ management.\n   The object identifier id-scrypt identifies the scrypt key derivation\n\
    \   function.\n   id-scrypt OBJECT IDENTIFIER ::= {1 3 6 1 4 1 11591 4 11}\n \
    \  The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type scrypt-params:\n   scrypt-params ::= SEQUENCE {\n          salt\
    \ OCTET STRING,\n          costParameter INTEGER (1..MAX),\n          blockSize\
    \ INTEGER (1..MAX),\n          parallelizationParameter INTEGER (1..MAX),\n  \
    \        keyLength INTEGER (1..MAX) OPTIONAL }\n   The fields of type scrypt-params\
    \ have the following meanings:\n   - salt specifies the salt value.  It shall\
    \ be an octet string.\n   - costParameter specifies the CPU/Memory cost parameter\
    \ N.\n   - blockSize specifies the block size parameter r.\n   - parallelizationParameter\
    \ specifies the parallelization parameter.\n   - keyLength, an optional field,\
    \ is the length in octets of the\n   derived key.  The maximum key length allowed\
    \ depends on the\n   implementation; it is expected that implementation profiles\
    \ may\n   further constrain the bounds.  This field only provides convenience;\n\
    \   the key length is not cryptographically protected.\n   To be usable in PKCS#8\
    \ [RFC5208] and Asymmetric Key Packages\n   [RFC5958], the following extension\
    \ of the PBES2-KDFs type is needed:\n      PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n\
    \          { {scrypt-params IDENTIFIED BY id-scrypt}, ... }\n"
- title: 7.1.  ASN.1 Module
  contents:
  - "7.1.  ASN.1 Module\n   For reference purposes, the ASN.1 syntax is presented\
    \ as an ASN.1\n   module here.\n   -- scrypt ASN.1 Module\n   scrypt-0 {1 3 6\
    \ 1 4 1 11591 4 10}\n   DEFINITIONS ::= BEGIN\n   id-scrypt OBJECT IDENTIFIER\
    \ ::= {1 3 6 1 4 1 11591 4 11}\n   scrypt-params ::= SEQUENCE {\n       salt OCTET\
    \ STRING,\n       costParameter INTEGER (1..MAX),\n       blockSize INTEGER (1..MAX),\n\
    \       parallelizationParameter INTEGER (1..MAX),\n       keyLength INTEGER (1..MAX)\
    \ OPTIONAL\n   }\n   PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n          { {scrypt-params\
    \ IDENTIFIED BY id-scrypt}, ... }\n   END\n"
- title: 8.  Test Vectors for Salsa20/8 Core
  contents:
  - "8.  Test Vectors for Salsa20/8 Core\n   Below is a sequence of octets that illustrate\
    \ input and output values\n   for the Salsa20/8 Core.  The octets are hex encoded\
    \ and whitespace is\n   inserted for readability.  The value corresponds to the\
    \ first input\n   and output pair generated by the first scrypt test vector below.\n\
    \   INPUT:\n   7e 87 9a 21 4f 3e c9 86 7c a9 40 e6 41 71 8f 26\n   ba ee 55 5b\
    \ 8c 61 c1 b5 0d f8 46 11 6d cd 3b 1d\n   ee 24 f3 19 df 9b 3d 85 14 12 1e 4b\
    \ 5a c5 aa 32\n   76 02 1d 29 09 c7 48 29 ed eb c6 8d b8 b8 c2 5e\n   OUTPUT:\n\
    \   a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05\n   04 4b 21 81 a2 fd 33 7d\
    \ fd 7b 1c 63 96 68 2f 29\n   b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba\n\
    \   e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81\n"
- title: 9.  Test Vectors for scryptBlockMix
  contents:
  - "9.  Test Vectors for scryptBlockMix\n   Below is a sequence of octets that illustrate\
    \ input and output values\n   for scryptBlockMix.  The test vector uses an r value\
    \ of 1.  The\n   octets are hex encoded and whitespace is inserted for readability.\n\
    \   The value corresponds to the first input and output pair generated by\n  \
    \ the first scrypt test vector below.\n   INPUT\n   B[0] =  f7 ce 0b 65 3d 2d\
    \ 72 a4 10 8c f5 ab e9 12 ff dd\n           77 76 16 db bb 27 a7 0e 82 04 f3 ae\
    \ 2d 0f 6f ad\n           89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29\n  \
    \         09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7\n   B[1] =  89 49 91\
    \ 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb\n           cd 98 43 80 37 46 66 bb 8f\
    \ fc b5 bf 40 c2 54 b0\n           67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57\
    \ 1b\n           7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89\n   OUTPUT\n\
    \   B'[0] = a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05\n           04 4b\
    \ 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29\n           b4 39 31 68 e3 c9 e6 bc\
    \ fe 6b c5 b7 a0 6d 96 ba\n           e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61\
    \ 8f 81\n   B'[1] = 20 ed c9 75 32 38 81 a8 05 40 f6 4c 16 2d cd 3c\n        \
    \   21 07 7c fe 5f 8d 5f e2 b1 a4 16 8f 95 36 78 b7\n           7d 3b 3d 80 3b\
    \ 60 e4 ab 92 09 96 e5 9b 4d 53 b6\n           5d 2a 22 58 77 d5 ed f5 84 2c b9\
    \ f1 4e ef e4 25\n"
- title: 10.  Test Vectors for scryptROMix
  contents:
  - "10.  Test Vectors for scryptROMix\n   Below is a sequence of octets that illustrate\
    \ input and output values\n   for scryptROMix.  The test vector uses an r value\
    \ of 1 and an N value\n   of 16.  The octets are hex encoded and whitespace is\
    \ inserted for\n   readability.  The value corresponds to the first input and\
    \ output\n   pair generated by the first scrypt test vector below.\n   INPUT:\n\
    \   B = f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd\n       77 76 16 db bb\
    \ 27 a7 0e 82 04 f3 ae 2d 0f 6f ad\n       89 f6 8f 48 11 d1 e8 7b cc 3b d7 40\
    \ 0a 9f fd 29\n       09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7\n      \
    \ 89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb\n       cd 98 43 80 37 46 66\
    \ bb 8f fc b5 bf 40 c2 54 b0\n       67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a\
    \ 57 1b\n       7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89\n   OUTPUT:\n\
    \   B = 79 cc c1 93 62 9d eb ca 04 7f 0b 70 60 4b f6 b6\n       2c e3 dd 4a 96\
    \ 26 e3 55 fa fc 61 98 e6 ea 2b 46\n       d5 84 13 67 3b 99 b0 29 d6 65 c3 57\
    \ 60 1f b4 26\n       a0 b2 f4 bb a2 00 ee 9f 0a 43 d1 9b 57 1a 9c 71\n      \
    \ ef 11 42 e6 5d 5a 26 6f dd ca 83 2c e5 9f aa 7c\n       ac 0b 9c f1 be 2b ff\
    \ ca 30 0d 01 ee 38 76 19 c4\n       ae 12 fd 44 38 f2 03 a0 e4 e1 c4 7e c3 14\
    \ 86 1f\n       4e 90 87 cb 33 39 6a 68 73 e8 f9 d2 53 9a 4b 8e\n"
- title: 11.  Test Vectors for PBKDF2 with HMAC-SHA-256
  contents:
  - "11.  Test Vectors for PBKDF2 with HMAC-SHA-256\n   Below is a sequence of octets\
    \ that illustrate input and output values\n   for PBKDF2-HMAC-SHA-256.  The octets\
    \ are hex encoded and whitespace\n   is inserted for readability.  The test vectors\
    \ below can be used to\n   verify the PBKDF2-HMAC-SHA-256 [RFC2898] function.\
    \  The password and\n   salt strings are passed as sequences of ASCII [RFC20]\
    \ octets.\n   PBKDF2-HMAC-SHA-256 (P=\"passwd\", S=\"salt\",\n               \
    \        c=1, dkLen=64) =\n   55 ac 04 6e 56 e3 08 9f ec 16 91 c2 25 44 b6 05\n\
    \   f9 41 85 21 6d de 04 65 e6 8b 9d 57 c2 0d ac bc\n   49 ca 9c cc f1 79 b6 45\
    \ 99 16 64 b3 9d 77 ef 31\n   7c 71 b8 45 b1 e3 0b d5 09 11 20 41 d3 a1 97 83\n\
    \   PBKDF2-HMAC-SHA-256 (P=\"Password\", S=\"NaCl\",\n                       \
    \ c=80000, dkLen=64) =\n   4d dc d8 f6 0b 98 be 21 83 0c ee 5e f2 27 01 f9\n \
    \  64 1a 44 18 d0 4c 04 14 ae ff 08 87 6b 34 ab 56\n   a1 d4 25 a1 22 58 33 54\
    \ 9a db 84 1b 51 c9 b3 17\n   6a 27 2b de bb a1 d0 78 47 8f 62 b3 97 f3 3c 8d\n"
- title: 12.  Test Vectors for scrypt
  contents:
  - "12.  Test Vectors for scrypt\n   For reference purposes, we provide the following\
    \ test vectors for\n   scrypt, where the password and salt strings are passed\
    \ as sequences\n   of ASCII [RFC20] octets.\n   The parameters to the scrypt function\
    \ below are, in order, the\n   password P (octet string), the salt S (octet string),\
    \ the CPU/Memory\n   cost parameter N, the block size parameter r, the parallelization\n\
    \   parameter p, and the output size dkLen.  The output is hex encoded\n   and\
    \ whitespace is inserted for readability.\n   scrypt (P=\"\", S=\"\",\n      \
    \     N=16, r=1, p=1, dklen=64) =\n   77 d6 57 62 38 65 7b 20 3b 19 ca 42 c1 8a\
    \ 04 97\n   f1 6b 48 44 e3 07 4a e8 df df fa 3f ed e2 14 42\n   fc d0 06 9d ed\
    \ 09 48 f8 32 6a 75 3a 0f c8 1f 17\n   e8 d3 e0 fb 2e 0d 36 28 cf 35 e2 0c 38\
    \ d1 89 06\n   scrypt (P=\"password\", S=\"NaCl\",\n           N=1024, r=8, p=16,\
    \ dkLen=64) =\n   fd ba be 1c 9d 34 72 00 78 56 e7 19 0d 01 e9 fe\n   7c 6a d7\
    \ cb c8 23 78 30 e7 73 76 63 4b 37 31 62\n   2e af 30 d9 2e 22 a3 88 6f f1 09\
    \ 27 9d 98 30 da\n   c7 27 af b9 4a 83 ee 6d 83 60 cb df a2 cc 06 40\n   scrypt\
    \ (P=\"pleaseletmein\", S=\"SodiumChloride\",\n           N=16384, r=8, p=1, dkLen=64)\
    \ =\n   70 23 bd cb 3a fd 73 48 46 1c 06 cd 81 fd 38 eb\n   fd a8 fb ba 90 4f\
    \ 8e 3e a9 b5 43 f6 54 5d a1 f2\n   d5 43 29 55 61 3f 0f cf 62 d4 97 05 24 2a\
    \ 9a f9\n   e6 1e 85 dc 0d 65 1e 40 df cf 01 7b 45 57 58 87\n   scrypt (P=\"pleaseletmein\"\
    , S=\"SodiumChloride\",\n           N=1048576, r=8, p=1, dkLen=64) =\n   21 01\
    \ cb 9b 6a 51 1a ae ad db be 09 cf 70 f8 81\n   ec 56 8d 57 4a 2f fd 4d ab e5\
    \ ee 98 20 ad aa 47\n   8e 56 fd 8f 4b a5 d0 9f fa 1c 6d 92 7c 40 f4 c3\n   37\
    \ 30 40 49 e8 a9 52 fb cb f4 5c 6f a7 7a 41 a4\n"
- title: 13.  Test Vectors for PKCS#8
  contents:
  - "13.  Test Vectors for PKCS#8\n   PKCS#8 [RFC5208] and Asymmetric Key Packages\
    \ [RFC5958] encode\n   encrypted private-keys.  Using PBES2 with scrypt as the\
    \ KDF, the\n   following illustrates an example of a PKCS#8-encoded private-key.\n\
    \   The password is \"Rabbit\" (without the quotes) with N=1048576, r=8,\n   and\
    \ p=1.  The salt is \"Mouse\" and the encryption algorithm used is\n   aes256-CBC.\
    \  The derived key is: E2 77 EA 2C AC B2 3E DA-FC 03 9D 22\n   9B 79 DC 13 EC\
    \ ED B6 01 D9 9B 18 2A-9F ED BA 1E 2B FB 4F 58.\n   -----BEGIN ENCRYPTED PRIVATE\
    \ KEY-----\n   MIHiME0GCSqGSIb3DQEFDTBAMB8GCSsGAQQB2kcECzASBAVNb3VzZQIDEAAAAgEI\n\
    \   AgEBMB0GCWCGSAFlAwQBKgQQyYmguHMsOwzGMPoyObk/JgSBkJb47EWd5iAqJlyy\n   +ni5ftd6gZgOPaLQClL7mEZc2KQay0VhjZm/7MbBUNbqOAXNM6OGebXxVp6sHUAL\n\
    \   iBGY/Dls7B1TsWeGObE0sS1MXEpuREuloZjcsNVcNXWPlLdZtkSH6uwWzR0PyG/Z\n   +ZXfNodZtd/voKlvLOw5B3opGIFaLkbtLZQwMiGtl42AS89lZg==\n\
    \   -----END ENCRYPTED PRIVATE KEY-----\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   This document specifies a cryptographic algorithm,\
    \ and there is\n   always a risk that someone will find a weakness in it.  By\
    \ following\n   the cryptographic research area, you may learn of publications\n\
    \   relevant to scrypt.\n   ROMix has been proven sequential memory-hard under\
    \ the random oracle\n   model for the hash function.  The security of scrypt relies\
    \ on the\n   assumption that BlockMix with Salsa20/8 Core does not exhibit any\n\
    \   \"shortcuts\" that would allow it to be iterated more easily than a\n   random\
    \ oracle.  For other claims about the security properties, see\n   [SCRYPT].\n\
    \   Passwords and other sensitive data, such as intermediate values, may\n   continue\
    \ to be stored in memory, core dumps, swap areas, etc., for a\n   long time after\
    \ the implementation has processed them.  This makes\n   attacks on the implementation\
    \ easier.  Thus, implementation should\n   consider storing sensitive data in\
    \ protected memory areas.  How to\n   achieve this is system dependent.\n   By\
    \ nature and depending on parameters, running the scrypt algorithm\n   may require\
    \ large amounts of memory.  Systems should protect against\n   a denial-of-service\
    \ attack resulting from attackers presenting\n   unreasonably large parameters.\n\
    \   Poor parameter choices can be harmful for security; for example, if\n   you\
    \ tune the parameters so that memory use is reduced to small\n   amounts that\
    \ will affect the properties of the algorithm.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC2898]  Kaliski, B., \"PKCS #5: Password-Based\
    \ Cryptography\n              Specification Version 2.0\", RFC 2898,\n       \
    \       DOI 10.17487/RFC2898, September 2000,\n              <http://www.rfc-editor.org/info/rfc2898>.\n\
    \   [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n \
    \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI\
    \ 10.17487/RFC6234, May 2011,\n              <http://www.rfc-editor.org/info/rfc6234>.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [BCRYPT]   Provos, N. and D. Mazieres, \"A\
    \ Future-Adaptable Password\n              Scheme\", USENIX 1999, June 1999,\n\
    \              <https://www.usenix.org/legacy/event/usenix99/provos/\n       \
    \       provos.pdf>.\n   [NTLM]     Microsoft, \"[MS-NLMP]: NT LAN Manager (NTLM)\n\
    \              Authentication Protocol\", 2015,\n              <https://msdn.microsoft.com/en-us/library/cc236621.aspx>.\n\
    \   [RFC20]    Cerf, V., \"ASCII format for network interchange\", STD 80,\n \
    \             RFC 20, DOI 10.17487/RFC0020, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ DOI 10.17487/RFC4086, June 2005,\n              <http://www.rfc-editor.org/info/rfc4086>.\n\
    \   [RFC5208]  Kaliski, B., \"Public-Key Cryptography Standards (PKCS) #8:\n \
    \             Private-Key Information Syntax Specification Version 1.2\",\n  \
    \            RFC 5208, DOI 10.17487/RFC5208, May 2008,\n              <http://www.rfc-editor.org/info/rfc5208>.\n\
    \   [RFC5958]  Turner, S., \"Asymmetric Key Packages\", RFC 5958,\n          \
    \    DOI 10.17487/RFC5958, August 2010,\n              <http://www.rfc-editor.org/info/rfc5958>.\n\
    \   [SALSA20CORE]\n              Bernstein, D., \"The Salsa20 Core\", March 2005,\n\
    \              <http://cr.yp.to/salsa20.html>.\n   [SALSA20SPEC]\n           \
    \   Bernstein, D., \"Salsa20 specification\", April 2005,\n              <http://cr.yp.to/snuffle/spec.pdf>.\n\
    \   [SCRYPT]   Percival, C., \"STRONGER KEY DERIVATION VIA SEQUENTIAL\n      \
    \        MEMORY-HARD FUNCTIONS\",  BSDCan'09, May 2009,\n              <http://www.tarsnap.com/scrypt/scrypt.pdf>.\n\
    \   [SHA2CRYPT]\n              Drepper, U., \"Unix crypt using SHA-256 and SHA-512\"\
    , April\n              2008, <http://www.akkadia.org/drepper/SHA-crypt.txt>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Text in this document was borrowed from [SCRYPT] and [RFC2898].\
    \  The\n   PKCS#8 test vector was provided by Stephen N. Henson.\n   Feedback\
    \ on this document was received from Dmitry Chestnykh,\n   Alexander Klink, Rob\
    \ Kendrick, Royce Williams, Ted Rolle, Jr., Eitan\n   Adler, Stephen Farrel, Nikos\
    \ Mavrogiannopoulos, and Paul Kyzivat.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Colin Percival\n   Tarsnap\n   Email: cperciva@tarsnap.com\n\
    \   Simon Josefsson\n   SJD AB\n   Email: simon@josefsson.org\n   URI:   http://josefsson.org/\n"
