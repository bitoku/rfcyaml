Abstract The Dublin Core [DC1] is a small set of metadata elements for describing information resources.
This document explains how these elements are expressed using the META and LINK tags of HTML
A sequence of metadata elements embedded in an HTML file is taken to be a description of that file.
Examples illustrate conventions allowing interoperation with current software that indexes, displays, and manipulates metadata, such as [SWISH E], [freeWAIS sf2.0], [GLIMPSE], [HARVEST], [ISEARCH], etc., and the Perl [PERL] scripts in the appendix.
HTML, Dublin Core, and Non Dublin Core Metadata
metadata initiative [DCHOME] has produced a small set of resource description categories [DC1], or elements of metadata (literally, data about data).
Metadata elements are typically small relative to the resource they describe and may, if the resource format permits, be embedded in it.
Two such formats are the Hypertext Markup Language (HTML) and the Extensible Markup Language (XML); HTML is currently in wide use, but once standardized, XML [XML] in conjunction with the Resource Description Framework [RDF] promise a significantly more expressive means of encoding metadata.
The [RDF] specification actually describes a way to use RDF within an HTML document by adhering to an abbreviated syntax.
This document explains how to encode metadata using HTML 4.0 [HTML4.0].
It is not concerned with element semantics, which are defined elsewhere.
For illustrative purposes, some element semantics are alluded to, but in no way should semantics appearing here be considered definitive.
The HTML encoding allows elements of DC metadata to be interspersed with non DC elements (provided such mixing
is consistent with rules governing use of those non DC elements).
A DC element is indicated by the prefix "DC", and a non DC element by another prefix; for example, the prefix "AC" is used with elements from the A Core [AC].
The META tag of HTML is designed to encode a named metadata element.
Each element describes a given aspect of a document or other information resource.
> says that Homer Simpson is the Creator, where the element named Creator is defined in the DC element set.
DC places no restriction on alphabetic case in an element value and any number of META tagged elements may appear together, in any order.
More than one DC element with the same name may appear, and each DC element is optional.
The next example is a book description with two authors, two titles, and no other metadata.
Each non DC element should be encoded with a prefix that can be used to trace its origin and definition; the linkage between prefix and element definition is made with the LINK tag, as explained in the next section.
"Jesse &#34;The Body&#34; Ventura A Biography"
This example also shows how some special characters may be encoded.
The author name in the first element contains a diacritic encoded as an HTML character entity reference   in this case an accented letter E.  Similarly, the last line contains two double quote characters encoded so as to avoid being interpreted as element content delimiters.
The LINK tag of HTML may be used to associate an element name prefix with the reference definition of the element set that it identifies.
A sequence of META tags describing a resource is incomplete without one such LINK tag for each different prefix appearing in the sequence.
where, in actual descriptions, PREFIX is to be replaced by the prefix and LOCATION OF DEFINITION by the URL or URN of the defining document.
When embedded in the HEAD part of an HTML file, a sequence of LINK and META tags describes the information in the surrounding HTML file itself.
Here is a complete HTML file with its own embedded description.
> <body><pre> Rough wind, that moanest loud Grief too sad for song; Wild wind, when sullen cloud Knells all the night long; Sad storm, whose tears are vain, Bare woods, whose branches strain, Deep caves and dreary main, Wail, for the world's wrong!
Encoding Recommendations HTML allows more flexibility in principle and in practice than is recommended here for encoding metadata.
Limited flexibility encourages easy development of software for extracting and processing metadata.
At this early evolutionary stage of internet metadata, easy prototyping and experimentation hastens the development of useful standards.
There is much room for flexibility, but choosing a style and sticking with it will likely make metadata manipulation and editing easier.
"DC.Format" content   "text/html; 12 Kbytes">
Use of these recommendations is known to result in metadata that may be harvested, indexed, and manipulated by popular, freely available software packages such as [SWISH E], [freeWAIS sf2.0], [GLIMPSE], [HARVEST], and [ISEARCH], among others.
These conventions also work with the metadata processing scripts appearing in the appendix, as well as with most of the [DCPROJECTS] applications referenced from the [DCHOME] site.
Software support for the LINK tag and qualifier conventions (see the next section) is not currently widespread.
Ordering of metadata elements is not preserved in general.
Writers of software for metadata indexing and display should try to preserve relative ordering among META tagged elements having the same name (e.g., among multiple authors), however, metadata providers and searchers have no guarantee that ordering will be preserved in metadata that passes through unknown systems.
Dublin Core in Real Descriptions
In actual resource description it is often necessary to qualify Dublin Core elements to add nuances of meaning.
While neither the general principles nor the specific semantics of DC qualifiers are within scope of this document, everyday uses of the qualifier syntax are illustrated to lend realism to later examples.
Note that the qualifier syntax and label suffixes (which follow an element name and a period) used in examples in this document merely reflect current trends in the HTML encoding of qualifiers.
Use of this syntax and these suffixes is neither a standard nor a recommendation.
This section consists of very simple Dublin Core encoding examples, arranged by element.
Methods of Information in Medicine, Vol 32,
The Author gives some Account of Himself and Family
His First Inducements to Travel
He is Shipwrecked, and Swims for his Life
Gets safe on Shore in the Country of Lilliput
Available" content   "1998 05 21"> <meta name
"A text file with mono spaced tables and diagrams."
Requires" content   "LWP::UserAgent; HTML::Parse; URI::URL; Net::DNS; Tk::Pixmap; Tk::Bitmap; Tk::Photo"
The syntax rules for encoding Dublin Core metadata in HTML that are documented here pose no direct risk to computers and networks.
People can use these rules to encode metadata that is inaccurate or even deliberately misleading (creating mischief in the form of "index spam"), however, this reflects a general pattern of HTML META tag abuse that is not limited to the encoding of metadata from the Dublin Core set.
Even traditional metadata encoding schemes (e.g., [MARC]) are not immune to inaccuracy, although they are generally followed in environments where production quality greatly exceeds that of the average Web site.
Systems that process metadata encoded with META tags need to consider issues related to its accuracy and validity as part of their design and implementation, and users of such systems need to consider the design and implementation assumptions.
Various approaches may be relevant for certain applications, such as adding statements of metadata provenance, signing of metadata with digital signatures, and automating certain aspects of metadata creation; but these are far outside the scope of this document and the underlying META tag syntax that it describes.
Appendix   Perl Scripts that Manipulate HTML Encoded Metadata
This section contains two simple programs that work with versions 4 and 5 of the Perl [PERL] scripting language interpreter.
They may be taken and freely adapted for local organizational needs, research proposals, venture capital bids, etc.
A variety of applications are within easy reach of implementors that choose to build on these scripts.
Script 1:  Metadata Format Conversion
Here is a simple Perl script that correctly recognizes every example of metadata encoding in this document.
It shows how a modest scripting effort can produce a utility that converts metadata from one format to another.
Minor changes are sufficient to support a number of output formats.
Issues warning about missing # element name or value.
# # Handles mixed case tags and attribute values, one per line or spanning # several lines.  Also handles a quoted string spanning multiple lines.
Does not tolerate more than one "<meta" per line.
When the conversion script is run on the metadata file example from the LINK tag section (section 4), it produces the following output.
DC.Title; A Dirge @ DC.Creator; Shelley, Percy Bysshe @
DC.Date; 1820 @ DC.Format; text/html @
DC.Language; en @)urc; Script 2:  Automated Metadata Creation
The creation and maintenance of high quality metadata can be extremely expensive without automation to assist in processes such as supplying
pre set or computed defaults, validating syntax, verifying value ranges, spell checking, etc.
Considerable relief could be had from a script that reduced an individual provider's metadata burden to just the title of each document.
Below is such a script.
It lets the provider of an HTML document abbreviate an entire embedded resource description using a single HTML comment statement that looks like <!
metablock Little Red Riding Hood
Our script processes this statement specially as a kind of "metadata block" declaration with attached title.
The general form is <!
This statement works much like a "Web server side include" in that the script replaces it with a fully specified block of metadata and triggers other replacements.
Once installed, the script can output HTML files suitable for integration into one's production Web server procedures.
The individual provider keeps a separate "template" file of infrequently changing pre set values for metadata elements.
If the provider's needs are simple enough, the only element values besides the title that differ from one document to the next may be generated automatically.
Using the script, values may be referenced as variables from within the template or within the document.
Our variable references have the form "( mbVARNAME)", and here is what they look like inside a template:
The above template represents the metadata block that will describe the document once the variable references are replaced with real values.
By the conventions of our script, the following variables will be replaced in both the template and in the document: ( mbfilesize)
size of the final output file ( mbtitle)
title of the document ( mblanguage)
Here's an example HTML file to run the script on.
Pursuant to directive DOH:10.2001/405aec of article B 2022, subsection 48.2.4.4.1c regarding staff morale and employee productivity standards, the current allocation of doughnut acquisition funds shall be increased effective immediately.
Note that because replacement occurs throughout the document, the provider need only enter the title once instead of twice (normally the title must be entered once in the HTML head and again in the HTML body).
After running the script, the above file is transformed into this: <html> <head>
Nutritional Allocation Increase Date:  1999 03
Pursuant to directive DOH:10.2001/405aec of article B 2022, subsection 48.2.4.4.1c regarding staff morale and employee productivity standards, the current allocation of doughnut acquisition funds shall be increased effective immediately.
Here is the script that accomplishes this transformation.
This Perl script processes metadata block declarations of the form
metablock TITLE OF DOCUMENT   and variable references of the # form ( mbVARNAME), replacing them with full metadata blocks and # variable values, respectively.
# Outputs an HTML file.
# # Invoke this script with a single filename argument, "foo".
It creates # an output file "
foo.html" using a temporary working file "foo.work".
# The size of foo.work is measured after variable replacement, and is # later inserted into the file in such a way that the file's size does # not change in the process.
Has little or no error checking.
(localtime( (stat IN) [9] ))
[5, 4, 3]; $filemodtime   sprintf "%s %02s %02s", 1900
# Now replace filesize variables without altering total byte count.
# loop through saved size locations seek WORK, $pos, 0;
