- contents:
  - '                    Sensor Measurement Lists (SenML)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines a format for representing simple sensor\n
    \  measurements and device parameters in Sensor Measurement Lists\n   (SenML).
    \ Representations are defined in JavaScript Object Notation\n   (JSON), Concise
    Binary Object Representation (CBOR), Extensible\n   Markup Language (XML), and
    Efficient XML Interchange (EXI), which\n   share the common SenML data model.
    \ A simple sensor, such as a\n   temperature sensor, could use one of these media
    types in protocols\n   such as HTTP or the Constrained Application Protocol (CoAP)
    to\n   transport the measurements of the sensor or to be configured.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8428.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Overview  . . . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Requirements and Design Goals . . . . . . . . . . . . .
    . . .   4\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   6\n   4.  SenML Structure and Semantics . . . . . . . . . . . . . . . .   6\n
    \    4.1.  Base Fields . . . . . . . . . . . . . . . . . . . . . . .   7\n     4.2.
    \ Regular Fields  . . . . . . . . . . . . . . . . . . . . .   7\n     4.3.  SenML
    Labels  . . . . . . . . . . . . . . . . . . . . . .   8\n     4.4.  Extensibility
    . . . . . . . . . . . . . . . . . . . . . .   9\n     4.5.  Records and Their
    Fields  . . . . . . . . . . . . . . . .   9\n       4.5.1.  Names . . . . . .
    . . . . . . . . . . . . . . . . . .   9\n       4.5.2.  Units . . . . . . . .
    . . . . . . . . . . . . . . . .  10\n       4.5.3.  Time  . . . . . . . . . .
    . . . . . . . . . . . . . .  10\n       4.5.4.  Values  . . . . . . . . . . .
    . . . . . . . . . . . .  11\n     4.6.  Resolved Records  . . . . . . . . . .
    . . . . . . . . . .  12\n     4.7.  Associating Metadata  . . . . . . . . . .
    . . . . . . . .  12\n     4.8.  Sensor Streaming Measurement Lists (SenSML) .
    . . . . . .  12\n     4.9.  Configuration and Actuation Usage . . . . . . . .
    . . . .  13\n   5.  JSON Representation (application/senml+json)  . . . . . .
    . .  13\n     5.1.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 14\n       5.1.1.  Single Data Point . . . . . . . . . . . . . . . . . .  14\n
    \      5.1.2.  Multiple Data Points  . . . . . . . . . . . . . . . .  14\n       5.1.3.
    \ Multiple Measurements . . . . . . . . . . . . . . . .  15\n       5.1.4.  Resolved
    Data . . . . . . . . . . . . . . . . . . . .  17\n       5.1.5.  Multiple Data
    Types . . . . . . . . . . . . . . . . .  17\n       5.1.6.  Collection of Resources
    . . . . . . . . . . . . . . .  18\n       5.1.7.  Setting an Actuator . . . .
    . . . . . . . . . . . . .  18\n   6.  CBOR Representation (application/senml+cbor)
    \ . . . . . . . .  19\n   7.  XML Representation (application/senml+xml)  . .
    . . . . . . .  21\n   8.  EXI Representation (application/senml-exi)  . . . .
    . . . . .  23\n   9.  Fragment Identification Methods . . . . . . . . . . . .
    . . .  26\n     9.1.  Fragment Identification Examples  . . . . . . . . . . .
    .  26\n     9.2.  Fragment Identification for XML and EXI Formats . . . . .  27\n
    \  10. Usage Considerations  . . . . . . . . . . . . . . . . . . . .  27\n   11.
    CDDL  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  29\n   12. IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .  30\n     12.1.  SenML
    Units Registry . . . . . . . . . . . . . . . . . .  30\n     12.2.  SenML Labels
    Registry  . . . . . . . . . . . . . . . . .  35\n     12.3.  Media Type Registrations
    . . . . . . . . . . . . . . . .  36\n       12.3.1.  senml+json Media Type Registration
    . . . . . . . . .  37\n       12.3.2.  sensml+json Media Type Registration  .
    . . . . . . .  38\n       12.3.3.  senml+cbor Media Type Registration . . . .
    . . . . .  39\n       12.3.4.  sensml+cbor Media Type Registration  . . . . .
    . . .  41\n       12.3.5.  senml+xml Media Type Registration  . . . . . . . .
    .  42\n       12.3.6.  sensml+xml Media Type Registration . . . . . . . . .  43\n
    \      12.3.7.  senml-exi Media Type Registration  . . . . . . . . .  44\n       12.3.8.
    \ sensml-exi Media Type Registration . . . . . . . . .  45\n     12.4.  XML Namespace
    Registration . . . . . . . . . . . . . . .  47\n     12.5.  CoAP Content-Format
    Registration . . . . . . . . . . . .  47\n   13. Security Considerations . . .
    . . . . . . . . . . . . . . . .  47\n   14. Privacy Considerations  . . . . .
    . . . . . . . . . . . . . .  48\n   15. References  . . . . . . . . . . . . .
    . . . . . . . . . . . .  49\n     15.1.  Normative References . . . . . . . .
    . . . . . . . . . .  49\n     15.2.  Informative References . . . . . . . . .
    . . . . . . . .  51\n   Acknowledgements  . . . . . . . . . . . . . . . . . .
    . . . . . .  53\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .
    . . . .  54\n"
  title: Table of Contents
- contents:
  - "1.  Overview\n   Connecting sensors to the Internet is not new, and there have
    been\n   many protocols designed to facilitate it.  This specification defines\n
    \  a format and media types for carrying simple sensor information in\n   protocols
    such as HTTP [RFC7230] or CoAP [RFC7252].  The SenML format\n   is designed so
    that processors with very limited capabilities could\n   easily encode a sensor
    measurement into the media type, while at the\n   same time, a server parsing
    the data could collect a large number of\n   sensor measurements in a relatively
    efficient manner.  SenML can be\n   used for a variety of data flow models, most
    notably data feeds\n   pushed from a sensor to a collector, and for the web resource
    model\n   where the sensor data is requested as a resource representation\n   (e.g.,
    \"GET /sensor/temperature\").\n   There are many types of more complex measurements
    and measurements\n   that this media type would not be suitable for.  SenML strikes
    a\n   balance between having some information about the sensor carried with\n
    \  the sensor data so that the data is self-describing, but it also\n   tries
    to make that a fairly minimal set of auxiliary information for\n   efficiency
    reasons.  Other information about the sensor can be\n   discovered by other methods
    such as using the Constrained RESTful\n   Environments (CoRE) Link Format [RFC6690].\n
    \  SenML is defined by a data model for measurements and simple metadata\n   about
    measurements and devices.  The data is structured as a single\n   array that contains
    a series of SenML Records that can each contain\n   fields such as a unique identifier
    for the sensor, the time the\n   measurement was made, the unit the measurement
    is in, and the current\n   value of the sensor.  Serializations for this data
    model are defined\n   for JSON [RFC8259], CBOR [RFC7049], XML [W3C.REC-xml-20081126],
    and\n   Efficient XML Interchange (EXI) [W3C.REC-exi-20140211].\n   For example,
    the following shows a measurement from a temperature\n   gauge encoded in the
    JSON syntax.\n   [\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"v\":23.1}\n
    \  ]\n   In the example above, the array has a single SenML Record with a\n   measurement
    for a sensor named \"urn:dev:ow:10e2073a01080063\" with a\n   current value of
    23.1 degrees Celsius.\n"
  title: 1.  Overview
- contents:
  - "2.  Requirements and Design Goals\n   The design goal is to be able to send simple
    sensor measurements in\n   small packets from large numbers of constrained devices.
    \ Keeping the\n   total size of the payload small makes it easy to also use SenML
    in\n   constrained networks, e.g., in an IPv6 over Low-Power Wireless\n   Personal
    Area Network (6LoWPAN) [RFC4944].  It is always difficult to\n   define what small
    code is, but there is a desire to be able to\n   implement this in roughly 1 KB
    of flash on an 8-bit microprocessor.\n   Experience with power meters and other
    large-scale deployments has\n   indicated that the solution needs to support allowing
    multiple\n   measurements to be batched into a single HTTP or CoAP request.  This\n
    \  \"batch\" upload capability allows the server side to efficiently\n   support
    a large number of devices.  It also conveniently supports\n   batch transfers
    from proxies and storage devices, even in situations\n   where the sensor itself
    sends just a single data item at a time.  The\n   multiple measurements could
    be from multiple related sensors or from\n   the same sensor but at different
    times.\n   The basic design is an array with a series of measurements.  The\n
    \  following example shows two measurements made at different times.\n   The value
    of a measurement is given by the \"v\" field, the time of a\n   measurement is
    in the \"t\" field, the \"n\" field has a unique sensor\n   name, and the unit
    of the measurement is carried in the \"u\" field.\n   [\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"t\":1.276020076e+09,\n
    \     \"v\":23.5},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"t\":1.276020091e+09,\n
    \     \"v\":23.6}\n   ]\n   To keep the messages small, it does not make sense
    to repeat the \"n\"\n   field in each SenML Record, so there is a concept of a
    Base Name,\n   which is simply a string that is prepended to the Name field of
    all\n   elements in that Record and any Records that follow it.  So, a more\n
    \  compact form of the example above is the following.\n   [\n     {\"bn\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"t\":1.276020076e+09,\n
    \     \"v\":23.5},\n     {\"u\":\"Cel\",\"t\":1.276020091e+09,\n      \"v\":23.6}\n
    \  ]\n   In the above example, the Base Name is in the \"bn\" field, and the \"n\"\n
    \  fields in each Record are empty strings, so they are omitted.\n   Some devices
    have accurate time while others do not, so SenML\n   supports absolute and relative
    times.  Time is represented in\n   floating point as seconds.  Values greater
    than or equal to 2**28\n   represent an absolute time relative to the Unix epoch.
    \ Values less\n   than 2**28 represent time relative to the current time.\n   A
    simple sensor with no absolute wall-clock time might take a\n   measurement every
    second, batch up 60 of them, and then send the\n   batch to a server.  It would
    include the relative time each\n   measurement was made compared to the time the
    batch was sent in each\n   SenML Record.  If the server has accurate time based
    on, e.g., the\n   Network Time Protocol (NTP), it may use the time it received
    the data\n   and the relative offset to replace the times in the SenML with\n
    \  absolute times before saving the SenML information in a document\n   database.\n"
  title: 2.  Requirements and Design Goals
- contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   This document also uses the following terms:\n   SenML Record:
    \ One measurement or configuration instance in time\n      presented using the
    SenML data model.\n   SenML Pack:  One or more SenML Records in an array structure.\n
    \  SenML Label:  A short name used in SenML Records to denote different\n      SenML
    fields (e.g., \"v\" for \"value\").\n   SenML Field:  A component of a record
    that associates a value to a\n      SenML Label for this record.\n   SenSML:  Sensor
    Streaming Measurement List (see Section 4.8).\n   SenSML Stream:  One or more
    SenML Records to be processed as a\n      stream.\n   This document uses the terms
    \"attribute\" and \"tag\" where they occur\n   with the underlying technologies
    (XML, CBOR [RFC7049], and the CoRE\n   Link Format [RFC6690]); they are not used
    for SenML concepts, per se.\n   However, note that \"attribute\" has been widely
    used in the past as a\n   synonym for the SenML \"field\".\n   All comparisons
    of text strings are performed byte by byte, which\n   results in the comparisons
    being case sensitive.\n   Where arithmetic is used, this specification uses the
    familiar\n   notation of the programming language C, except that the operator
    \"**\"\n   stands for exponentiation.\n"
  title: 3.  Terminology
- contents:
  - "4.  SenML Structure and Semantics\n   Each SenML Pack carries a single array
    that represents a set of\n   measurements and/or parameters.  This array contains
    a series of\n   SenML Records with several fields described below.  There are
    two\n   kinds of fields: base and regular.  Both the base and regular fields\n
    \  can be included in any SenML Record.  The base fields apply to the\n   entries
    in the Record and also to all Records after it up to, but not\n   including, the
    next Record that has that same base field.  All base\n   fields are optional.
    \ Regular fields can be included in any SenML\n   Record and apply only to that
    Record.\n"
  - contents:
    - "4.1.  Base Fields\n   Base Name:  This is a string that is prepended to the
      names found in\n      the entries.\n   Base Time:  A base time that is added
      to the time found in an entry.\n   Base Unit:  A base unit that is assumed for
      all entries, unless\n      otherwise indicated.  If a record does not contain
      a Unit value,\n      then the Base Unit is used.  Otherwise, the value found
      in the\n      Unit (if any) is used.\n   Base Value:  A base value is added
      to the value found in an entry,\n      similar to Base Time.\n   Base Sum:  A
      base sum is added to the sum found in an entry, similar\n      to Base Time.\n
      \  Base Version:  Version number of the media type format.  This field\n      is
      an optional positive integer and defaults to 10 if not present.\n"
    title: 4.1.  Base Fields
  - contents:
    - "4.2.  Regular Fields\n   Name:  Name of the sensor or parameter.  When appended
      to the Base\n      Name field, this must result in a globally unique identifier
      for\n      the resource.  The name is optional, if the Base Name is present.\n
      \     If the name is missing, the Base Name must uniquely identify the\n      resource.
      \ This can be used to represent a large array of\n      measurements from the
      same sensor without having to repeat its\n      identifier on every measurement.\n
      \  Unit:  Unit for a measurement value.  Optional.\n   Value:  Value of the
      entry.  Optional if a Sum value is present;\n      otherwise, it's required.
      \ Values are represented using basic data\n      types.  This specification
      defines floating-point numbers (\"v\"\n      field for \"Value\"), booleans
      (\"vb\" for \"Boolean Value\"), strings\n      (\"vs\" for \"String Value\"),
      and binary data (\"vd\" for \"Data\n      Value\").  Exactly one Value field
      MUST appear unless there is a\n      Sum field, in which case it is allowed
      to have no Value field.\n   Sum:  Integrated sum of the values over time.  Optional.
      \ This field\n      is in the unit specified in the Unit value multiplied by
      seconds.\n      For historical reasons, it is named \"sum\" instead of \"integral\".\n
      \  Time:  Time when the value was recorded.  Optional.\n   Update Time:  Period
      of time in seconds that represents the maximum\n      time before this sensor
      will provide an updated reading for a\n      measurement.  Optional.  This can
      be used to detect the failure of\n      sensors or the communications path from
      the sensor.\n"
    title: 4.2.  Regular Fields
  - contents:
    - "4.3.  SenML Labels\n   Table 1 provides an overview of all SenML fields defined
      by this\n   document with their respective labels and data types.\n     +---------------+-------+------------+------------+------------+\n
      \    |          Name | Label | CBOR Label | JSON Type  | XML Type   |\n     +---------------+-------+------------+------------+------------+\n
      \    |     Base Name | bn    |         -2 | String     | string     |\n     |
      \    Base Time | bt    |         -3 | Number     | double     |\n     |     Base
      Unit | bu    |         -4 | String     | string     |\n     |    Base Value
      | bv    |         -5 | Number     | double     |\n     |      Base Sum | bs
      \   |         -6 | Number     | double     |\n     |  Base Version | bver  |
      \        -1 | Number     | int        |\n     |          Name | n     |          0
      | String     | string     |\n     |          Unit | u     |          1 | String
      \    | string     |\n     |         Value | v     |          2 | Number     |
      double     |\n     |  String Value | vs    |          3 | String     | string
      \    |\n     | Boolean Value | vb    |          4 | Boolean    | boolean    |\n
      \    |    Data Value | vd    |          8 | String (*) | string (*) |\n     |
      \          Sum | s     |          5 | Number     | double     |\n     |          Time
      | t     |          6 | Number     | double     |\n     |   Update Time | ut
      \   |          7 | Number     | double     |\n     +---------------+-------+------------+------------+------------+\n
      \                          Table 1: SenML Labels\n   (*) Data Value is a base64-encoded
      string with the URL-safe alphabet\n   as defined in Section 5 of [RFC4648],
      with padding omitted.  (In\n   CBOR, the octets in the Data Value are encoded
      using a definite-\n   length byte string, major type 2.)\n   For details of
      the JSON representation, see Section 5; for CBOR, see\n   Section 6; and for
      XML, see Section 7.\n"
    title: 4.3.  SenML Labels
  - contents:
    - "4.4.  Extensibility\n   The SenML format can be extended with further custom
      fields.  Both\n   new base and regular fields are allowed.  See Section 12.2
      for\n   details.  Implementations MUST ignore fields they don't recognize\n
      \  unless that field has a label name that ends with the \"_\" character,\n
      \  in which case an error MUST be generated.\n   All SenML Records in a Pack
      MUST have the same version number.  This\n   is typically done by adding a Base
      Version field to only the first\n   Record in the Pack or by using the default
      value.\n   Systems reading one of the objects MUST check for the Base Version\n
      \  field.  If this value is a version number larger than the version\n   that
      the system understands, the system MUST NOT use this object.\n   This allows
      the version number to indicate that the object contains\n   structure or semantics
      that is different from what is defined in the\n   present document beyond just
      making use of the extension points\n   provided here.  New version numbers can
      only be defined in an RFC\n   that updates this specification or its successors.\n"
    title: 4.4.  Extensibility
  - contents:
    - '4.5.  Records and Their Fields

      '
    - contents:
      - "4.5.1.  Names\n   The Name value is concatenated to the Base Name value to
        yield the\n   name of the sensor.  The resulting concatenated name needs to\n
        \  uniquely identify and differentiate the sensor from all others.  The\n
        \  concatenated name MUST consist only of characters out of the set \"A\"\n
        \  to \"Z\", \"a\" to \"z\", and \"0\" to \"9\", as well as \"-\", \":\",
        \".\", \"/\",\n   and \"_\"; furthermore, it MUST start with a character out
        of the set\n   \"A\" to \"Z\", \"a\" to \"z\", or \"0\" to \"9\".  This restricted
        character set\n   was chosen so that concatenated names can be used directly
        within\n   various URI schemes (including segments of an HTTP path with no\n
        \  special encoding; note that a name that contains \"/\" characters maps\n
        \  into multiple URI path segments) and can be used directly in many\n   databases
        and analytic systems.  [RFC5952] contains advice on\n   encoding an IPv6 address
        in a name.  See Section 14 for privacy\n   considerations that apply to the
        use of long-term stable unique\n   identifiers.\n   Although it is RECOMMENDED
        that concatenated names be represented as\n   URIs [RFC3986] or URNs [RFC8141],
        the restricted character set\n   specified above puts strict limits on the
        URI schemes and URN\n   namespaces that can be used.  As a result, implementers
        need to take\n   care in choosing the naming scheme for concatenated names,
        because\n   such names both need to be unique and need to conform to the\n
        \  restricted character set.  One approach is to include a bit string\n   that
        has guaranteed uniqueness (such as a 1-wire address [AN1796]).\n   Some of
        the examples within this document use the device URN\n   namespace as specified
        in [DEVICE-URN].  Universally Unique\n   Identifiers (UUIDs) [RFC4122] are
        another way to generate a unique\n   name.  However, the restricted character
        set does not allow the use\n   of many URI schemes, such as the \"tag\" scheme
        [RFC4151] and the \"ni\"\n   scheme [RFC6920], in names as such.  The use
        of URIs with characters\n   incompatible with this set and possible mapping
        rules between the two\n   are outside the scope of the present document.\n"
      title: 4.5.1.  Names
    - contents:
      - "4.5.2.  Units\n   If the Record has no Unit, the Base Unit is used as the
        Unit.  Having\n   no Unit and no Base Unit is allowed; any information that
        may be\n   required about units applicable to the value then needs to be\n
        \  provided by the application context.\n"
      title: 4.5.2.  Units
    - contents:
      - "4.5.3.  Time\n   If either the Base Time or Time value is missing, the missing
        field\n   is considered to have a value of zero.  The Base Time and Time values\n
        \  are added together to get a value representing the time of\n   measurement.\n
        \  Values less than 268,435,456 (2**28) represent time relative to the\n   current
        time.  That is, a time of zero indicates that the sensor does\n   not know
        the absolute time and the measurement was made roughly\n   \"now\".  A negative
        value indicates seconds in the past from roughly\n   \"now\".  Positive values
        up to 2**28 indicate seconds in the future\n   from \"now\".  An example for
        employing positive values would be\n   actuation use, when the desired change
        should happen in the future,\n   but the sender or the receiver does not have
        accurate time available.\n   Values greater than or equal to 2**28 represent
        an absolute time\n   relative to the Unix epoch (1970-01-01T00:00Z in UTC
        time), and the\n   time is counted the same way as the Portable Operating
        System\n   Interface (POSIX) \"seconds since the epoch\" [TIME_T].  Therefore,
        the\n   smallest absolute Time value that can be expressed (2**28) is\n   1978-07-04
        21:24:16 UTC.\n   Because Time values up to 2**28 are used for representing
        time\n   relative to \"now\" and Time and Base Time are added together, care\n
        \  must be taken to ensure that the sum does not inadvertently reach\n   2**28
        (i.e., absolute time) when relative time was intended to be\n   used.\n   Obviously,
        SenML Records referenced to \"now\" are only useful within a\n   specific
        communication context (e.g., based on information on when\n   the SenML Pack,
        or a specific Record in a SenSML Stream, was sent) or\n   together with some
        other context information that can be used for\n   deriving a meaning of \"now\";
        the expectation for any archival use is\n   that they will be processed into
        UTC-referenced records before that\n   context would cease to be available.
        \ This specification deliberately\n   leaves the accuracy of \"now\" very
        vague as it is determined by the\n   overall systems that use SenML.  In a
        system where a sensor without\n   wall-clock time sends a SenML Record with
        a time referenced to \"now\"\n   over a high-speed RS-485 link to an embedded
        system with accurate\n   time that resolves \"now\" based on the time of reception,
        the\n   resulting time uncertainty could be within 1 ms.  At the other\n   extreme,
        a deployment that sends SenML wind-speed readings over a\n   Low-Earth Orbit
        (LEO) satellite link from a mountain valley might\n   have resulting reception
        Time values that are easily a dozen minutes\n   off the actual time of the
        sensor reading, with the time uncertainty\n   depending on satellite locations
        and conditions.\n"
      title: 4.5.3.  Time
    - contents:
      - "4.5.4.  Values\n   If only one of the Base Sum or Sum value is present, the
        missing\n   field is considered to have a value of zero.  The Base Sum and
        Sum\n   values are added together to get the sum of measurement.  If neither\n
        \  the Base Sum nor the Sum is present, then the measurement does not\n   have
        a Sum value.\n   If the Base Value or Value is not present, the missing field(s)
        is\n   considered to have a value of zero.  The Base Value and Value are\n
        \  added together to get the value of the measurement.\n   Representing the
        statistical characteristics of measurements, such as\n   accuracy, can be
        very complex.  Future specification may add new\n   fields to provide better
        information about the statistical properties\n   of the measurement.\n   In
        summary, the structure of a SenML Record is laid out to support a\n   single
        measurement per Record.  If multiple data values are measured\n   at the same
        time (e.g., air pressure and altitude), they are best\n   kept as separate
        Records linked through their Time value; this is\n   even true when one of
        the data values is more \"meta\" than others\n   (e.g., describes a condition
        that influences other measurements at\n   the same time).\n"
      title: 4.5.4.  Values
    title: 4.5.  Records and Their Fields
  - contents:
    - "4.6.  Resolved Records\n   Sometimes it is useful to be able to refer to a
      defined normalized\n   format for SenML Records.  This normalized format tends
      to get used\n   for big data applications and intermediate forms when converting
      to\n   other formats.  Also, if SenML Records are used outside of a SenML\n
      \  Pack, they need to be resolved first to ensure applicable base values\n   are
      applied.\n   A SenML Record is referred to as \"resolved\" if it does not contain\n
      \  any base values, i.e., labels starting with the character \"b\", except\n
      \  for Base Version fields (see below), and has no relative times.  To\n   resolve
      the Records, the applicable base values of the SenML Pack (if\n   any) are applied
      to the Record.  That is, for the base values in the\n   Record or before the
      Record in the Pack, Name and Base Name are\n   concatenated, the Base Time is
      added to the time of the Record, the\n   Base Unit is applied to the Record
      if it did not contain a Unit, etc.\n   In addition, the Records need to be in
      chronological order in the\n   Pack.  An example of this is shown in Section
      5.1.4.\n   The Base Version field MUST NOT be present in resolved Records if
      the\n   SenML version defined in this document is used; otherwise, it MUST be\n
      \  present in all the resolved SenML Records.\n   A future specification that
      defines new base fields needs to specify\n   how the field is resolved.\n"
    title: 4.6.  Resolved Records
  - contents:
    - "4.7.  Associating Metadata\n   SenML is designed to carry the minimum dynamic
      information about\n   measurements and, for efficiency reasons, does not carry
      significant\n   static metadata about the device, object, or sensors.  Instead,
      it is\n   assumed that this metadata is carried out of band.  For web resources\n
      \  using SenML Packs, this metadata can be made available using the CoRE\n   Link
      Format [RFC6690].  The most obvious use of this link format is\n   to describe
      that a resource is available in a SenML format in the\n   first place.  The
      relevant media type indicator is included in the\n   Content-Type (ct=) link
      attribute (which is defined for the link\n   format in Section 7.2.1 of [RFC7252]).\n"
    title: 4.7.  Associating Metadata
  - contents:
    - "4.8.  Sensor Streaming Measurement Lists (SenSML)\n   In some usage scenarios
      of SenML, the implementations store or\n   transmit SenML in a stream-like fashion,
      where data is collected over\n   time and continuously added to the object.
      \ This mode of operation is\n   optional, but systems or protocols using SenML
      in this fashion MUST\n   specify that they are doing this.  SenML defines separate
      media types\n   to indicate Sensor Streaming Measurement Lists (SenSML) for
      this\n   usage (see Section 12.3.2).  In this situation, the SenSML Stream can\n
      \  be sent and received in a partial fashion, i.e., a measurement entry\n   can
      be read as soon as the SenML Record is received and does not have\n   to wait
      for the full SenSML Stream to be complete.\n   If times relative to \"now\"
      (see Section 4.5.3) are used in SenML\n   Records of a SenSML Stream, their
      interpretation of \"now\" is based on\n   the time when the specific Record
      is sent in the stream.\n"
    title: 4.8.  Sensor Streaming Measurement Lists (SenSML)
  - contents:
    - "4.9.  Configuration and Actuation Usage\n   SenML can also be used for configuring
      parameters and controlling\n   actuators.  When a SenML Pack is sent (e.g.,
      using an HTTP/CoAP POST\n   or PUT method) and the semantics of the target are
      such that SenML is\n   interpreted as configuration/actuation, SenML Records
      are interpreted\n   as a request to change the values of given (sub)resources
      (given as\n   names) to given values at the given time(s).  The semantics of
      the\n   target resource supporting this usage can be described, e.g., using\n
      \  [RID-CoRE].  Examples of actuation usage are shown in Section 5.1.7.\n"
    title: 4.9.  Configuration and Actuation Usage
  title: 4.  SenML Structure and Semantics
- contents:
  - "5.  JSON Representation (application/senml+json)\n   For the SenML fields shown
    in Table 2, the SenML Labels are used as\n   the JSON object member names within
    JSON objects representing the\n   JSON SenML Records.\n                   +---------------+-------+-----------+\n
    \                  |          Name | Label | JSON Type |\n                   +---------------+-------+-----------+\n
    \                  |     Base Name | bn    | String    |\n                   |
    \    Base Time | bt    | Number    |\n                   |     Base Unit | bu
    \   | String    |\n                   |    Base Value | bv    | Number    |\n
    \                  |      Base Sum | bs    | Number    |\n                   |
    \ Base Version | bver  | Number    |\n                   |          Name | n     |
    String    |\n                   |          Unit | u     | String    |\n                   |
    \        Value | v     | Number    |\n                   |  String Value | vs
    \   | String    |\n                   | Boolean Value | vb    | Boolean   |\n
    \                  |    Data Value | vd    | String    |\n                   |
    \          Sum | s     | Number    |\n                   |          Time | t     |
    Number    |\n                   |   Update Time | ut    | Number    |\n                   +---------------+-------+-----------+\n
    \                       Table 2: JSON SenML Labels\n   The root JSON value consists
    of an array with one JSON object for\n   each SenML Record.  All the fields in
    the above table MAY occur in\n   the Records with member values of the type specified
    in the table.\n   Only the UTF-8 [RFC3629] form of JSON is allowed.  Characters
    in the\n   String Value are encoded using the escape sequences defined in\n   [RFC8259].
    \ Octets in the Data Value are base64 encoded with the URL-\n   safe alphabet
    as defined in Section 5 of [RFC4648], with padding\n   omitted.\n   Systems receiving
    measurements MUST be able to process the range of\n   floating-point numbers that
    are representable as IEEE double-\n   precision, floating-point numbers [IEEE.754].
    \ This allows Time\n   values to have better than microsecond precision over the
    next 100\n   years.  The number of significant digits in any measurement is not\n
    \  relevant, so a reading of 1.1 has exactly the same semantic meaning\n   as
    1.10.  If the value has an exponent, the \"e\" MUST be in lower\n   case.  In
    the interest of avoiding unnecessary verbosity and speeding\n   up processing,
    the mantissa SHOULD be less than 19 characters long,\n   and the exponent SHOULD
    be less than 5 characters long.\n"
  - contents:
    - '5.1.  Examples

      '
    - contents:
      - "5.1.1.  Single Data Point\n   The following shows a temperature reading taken
        approximately \"now\"\n   by a 1-wire sensor device that was assigned the
        unique 1-wire address\n   of 10e2073a01080063:\n   [\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"v\":23.1}\n
        \  ]\n"
      title: 5.1.1.  Single Data Point
    - contents:
      - "5.1.2.  Multiple Data Points\n   The following example shows voltage and
        current \"now\", i.e., at an\n   unspecified time.\n"
      - "[\n  {\"bn\":\"urn:dev:ow:10e2073a01080063:\",\"n\":\"voltage\",\"u\":\"V\",\"v\":120.1},\n
        \ {\"n\":\"current\",\"u\":\"A\",\"v\":1.2}\n"
      - "]\n   The next example is similar to the above one, but it shows current
        at\n   Tue Jun 8 18:01:16.001 UTC 2010 and at each second for the previous
        5\n   seconds.\n   [\n     {\"bn\":\"urn:dev:ow:10e2073a0108006:\",\"bt\":1.276020076001e+09,\n
        \     \"bu\":\"A\",\"bver\":5,\n      \"n\":\"voltage\",\"u\":\"V\",\"v\":120.1},\n
        \    {\"n\":\"current\",\"t\":-5,\"v\":1.2},\n     {\"n\":\"current\",\"t\":-4,\"v\":1.3},\n
        \    {\"n\":\"current\",\"t\":-3,\"v\":1.4},\n     {\"n\":\"current\",\"t\":-2,\"v\":1.5},\n
        \    {\"n\":\"current\",\"t\":-1,\"v\":1.6},\n     {\"n\":\"current\",\"v\":1.7}\n
        \  ]\n   As an example of SenSML, the following stream of measurements may
        be\n   sent via a long-lived HTTP POST from the producer of the stream to\n
        \  its consumer, and each measurement object may be reported at the time\n
        \  it was measured:\n   [\n     {\"bn\":\"urn:dev:ow:10e2073a01080063\",\"bt\":1.320067464e+09,\n
        \     \"bu\":\"%RH\",\"v\":21.2},\n     {\"t\":10,\"v\":21.3},\n     {\"t\":20,\"v\":21.4},\n
        \    {\"t\":30,\"v\":21.4},\n     {\"t\":40,\"v\":21.5},\n     {\"t\":50,\"v\":21.5},\n
        \    {\"t\":60,\"v\":21.5},\n     {\"t\":70,\"v\":21.6},\n     {\"t\":80,\"v\":21.7},\n
        \  ...\n"
      title: 5.1.2.  Multiple Data Points
    - contents:
      - "5.1.3.  Multiple Measurements\n   The following example shows humidity measurements
        from a mobile\n   device with a 1-wire address 10e2073a01080063, starting
        at Mon Oct 31\n   13:24:24 UTC 2011.  The device also provides position data,
        which is\n   provided in the same measurement or parameter array as separate\n
        \  entries.  Note that time is used to correlate data that belongs\n   together,
        e.g., a measurement and a parameter associated with it.\n   Finally, the device
        also reports extra data about its battery status\n   at a separate time.\n
        \  [\n     {\"bn\":\"urn:dev:ow:10e2073a01080063\",\"bt\":1.320067464e+09,\n
        \     \"bu\":\"%RH\",\"v\":20},\n     {\"u\":\"lon\",\"v\":24.30621},\n     {\"u\":\"lat\",\"v\":60.07965},\n
        \    {\"t\":60,\"v\":20.3},\n     {\"u\":\"lon\",\"t\":60,\"v\":24.30622},\n
        \    {\"u\":\"lat\",\"t\":60,\"v\":60.07965},\n     {\"t\":120,\"v\":20.7},\n
        \    {\"u\":\"lon\",\"t\":120,\"v\":24.30623},\n     {\"u\":\"lat\",\"t\":120,\"v\":60.07966},\n
        \    {\"u\":\"%EL\",\"t\":150,\"v\":98},\n     {\"t\":180,\"v\":21.2},\n     {\"u\":\"lon\",\"t\":180,\"v\":24.30628},\n
        \    {\"u\":\"lat\",\"t\":180,\"v\":60.07967}\n   ]\n   The following table
        shows the size of this example in various forms,\n   as well as the size of
        each of these forms compressed with gzip.\n                   +----------+------+-----------------+\n
        \                  | Encoding | Size | Compressed Size |\n                   +----------+------+-----------------+\n
        \                  | JSON     | 573  |       206       |\n                   |
        XML      | 649  |       235       |\n                   | CBOR     | 254  |
        \      196       |\n                   | EXI      | 161  |       184       |\n
        \                  +----------+------+-----------------+\n                         Table
        3: Size Comparisons\n"
      title: 5.1.3.  Multiple Measurements
    - contents:
      - "5.1.4.  Resolved Data\n   The following shows the example from the previous
        section in resolved\n   format.\n   [\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"%RH\",\"t\":1.320067464e+09,\n
        \     \"v\":20},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lon\",\"t\":1.320067464e+09,\n
        \     \"v\":24.30621},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lat\",\"t\":1.320067464e+09,\n
        \     \"v\":60.07965},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"%RH\",\"t\":1.320067524e+09,\n
        \     \"v\":20.3},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lon\",\"t\":1.320067524e+09,\n
        \     \"v\":24.30622},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lat\",\"t\":1.320067524e+09,\n
        \     \"v\":60.07965},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"%RH\",\"t\":1.320067584e+09,\n
        \     \"v\":20.7},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lon\",\"t\":1.320067584e+09,\n
        \     \"v\":24.30623},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lat\",\"t\":1.320067584e+09,\n
        \     \"v\":60.07966},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"%EL\",\"t\":1.320067614e+09,\n
        \     \"v\":98},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"%RH\",\"t\":1.320067644e+09,\n
        \     \"v\":21.2},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lon\",\"t\":1.320067644e+09,\n
        \     \"v\":24.30628},\n     {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"lat\",\"t\":1.320067644e+09,\n
        \     \"v\":60.07967}\n   ]\n"
      title: 5.1.4.  Resolved Data
    - contents:
      - "5.1.5.  Multiple Data Types\n   The following example shows a sensor that
        returns different data\n   types.\n  [\n    {\"bn\":\"urn:dev:ow:10e2073a01080063:\",\"n\":\"temp\",\"u\":\"Cel\",\"v\":23.1},\n
        \   {\"n\":\"label\",\"vs\":\"Machine Room\"},\n    {\"n\":\"open\",\"vb\":false},\n
        \   {\"n\":\"nfc-reader\",\"vd\":\"aGkgCg\"}\n  ]\n"
      title: 5.1.5.  Multiple Data Types
    - contents:
      - "5.1.6.  Collection of Resources\n   The following example shows the results
        from a query to one device\n   that aggregates multiple measurements from
        other devices.  The\n   example assumes that a client has fetched information
        from a device\n   at 2001:db8::2 by performing a GET operation on http://[2001:db8::2]\n
        \  at Mon Oct 31 16:27:09 UTC 2011 and has gotten two separate values as\n
        \  a result: a temperature and humidity measurement as well as the\n   results
        from another device at http://[2001:db8::1] that also had a\n   temperature
        and humidity measurement.  Note that the last record\n   would use the Base
        Name from the 3rd record but the Base Time from\n   the first record.\n   [\n
        \    {\"bn\":\"2001:db8::2/\",\"bt\":1.320078429e+09,\n      \"n\":\"temperature\",\"u\":\"Cel\",\"v\":25.2},\n
        \    {\"n\":\"humidity\",\"u\":\"%RH\",\"v\":30},\n     {\"bn\":\"2001:db8::1/\",\"n\":\"temperature\",\"u\":\"Cel\",\"v\":12.3},\n
        \    {\"n\":\"humidity\",\"u\":\"%RH\",\"v\":67}\n   ]\n"
      title: 5.1.6.  Collection of Resources
    - contents:
      - "5.1.7.  Setting an Actuator\n   The following example shows the SenML that
        could be used to set the\n   current set point of a typical residential thermostat
        that has a\n   temperature set point, a switch to turn on and off the heat,
        and a\n   switch to turn on the fan override.\n   [\n     {\"bn\":\"urn:dev:ow:10e2073a01080063:\"},\n
        \    {\"n\":\"temp\",\"u\":\"Cel\",\"v\":23.1},\n     {\"n\":\"heat\",\"u\":\"/\",\"v\":1},\n
        \    {\"n\":\"fan\",\"u\":\"/\",\"v\":0}\n   ]\n   In the following example,
        two different lights are turned on.  It is\n   assumed that the lights are
        on a network that can guarantee delivery\n   of the messages to the two lights
        within 15 ms (e.g., a network using\n   802.1BA [IEEE802.1BA] and 802.1AS
        [IEEE802.1AS] for time\n   synchronization).  The controller has set the time
        of the lights to\n   come on at 20 ms in the future from the current time.
        \ This allows\n   both lights to receive the message, wait till that time,
        then apply\n   the switch command so that both lights come on at the same
        time.\n   [\n     {\"bt\":1.320078429e+09,\"bu\":\"/\",\"n\":\"2001:db8::3\",\"v\":1},\n
        \    {\"n\":\"2001:db8::4\",\"v\":1}\n   ]\n   The following shows two lights
        being turned off using a\n   non-deterministic network that has high odds
        of delivering a message\n   in less than 100 ms and uses NTP for time synchronization.
        \ The\n   current time is 1320078429.  The user has just turned off a light\n
        \  switch that is turning off two lights.  Both lights are immediately\n   dimmed
        to 50% brightness to give the user instant feedback that\n   something is
        changing.  However, given the network, the lights will\n   probably dim at
        somewhat different times.  Then 100 ms in the future,\n   both lights will
        go off at the same time.  The instant, but not\n   synchronized, dimming gives
        the user the sensation of quick\n   responses, and the timed-off 100 ms in
        the future gives the\n   perception of both lights going off at the same time.\n
        \  [\n     {\"bt\":1.320078429e+09,\"bu\":\"/\",\"n\":\"2001:db8::3\",\"v\":0.5},\n
        \    {\"n\":\"2001:db8::4\",\"v\":0.5},\n     {\"n\":\"2001:db8::3\",\"t\":0.1,\"v\":0},\n
        \    {\"n\":\"2001:db8::4\",\"t\":0.1,\"v\":0}\n   ]\n"
      title: 5.1.7.  Setting an Actuator
    title: 5.1.  Examples
  title: 5.  JSON Representation (application/senml+json)
- contents:
  - "6.  CBOR Representation (application/senml+cbor)\n   The CBOR [RFC7049] representation
    is equivalent to the JSON\n   representation, with the following changes:\n   o
    \ For JSON Numbers, the CBOR representation can use integers,\n      floating-point
    numbers, or decimal fractions (CBOR Tag 4);\n      however, a representation SHOULD
    be chosen such that when the CBOR\n      value is converted to an IEEE double-precision,
    floating-point\n      value, it has exactly the same value as the original JSON
    Number\n      converted to that form.  For the version number, only an unsigned\n
    \     integer is allowed.\n   o  Characters in the String Value are encoded using
    a text string\n      with a definite length (major type 3).  Octets in the Data
    Value\n      are encoded using a byte string with a definite length (major type\n
    \     2).\n   o  For compactness, the CBOR representation uses integers for the\n
    \     labels, as defined in Table 4.  This table is conclusive, i.e.,\n      there
    is no intention to define any additional integer map keys;\n      any extensions
    will use string map keys.  This allows translators\n      converting between CBOR
    and JSON representations to also convert\n      all future labels without needing
    to update implementations.  Base\n      values are given negative CBOR labels,
    and others are given\n      non-negative labels.\n                  +---------------+-------+------------+\n
    \                 |          Name | Label | CBOR Label |\n                  +---------------+-------+------------+\n
    \                 |  Base Version | bver  |         -1 |\n                  |
    \    Base Name | bn    |         -2 |\n                  |     Base Time | bt
    \   |         -3 |\n                  |     Base Unit | bu    |         -4 |\n
    \                 |    Base Value | bv    |         -5 |\n                  |
    \     Base Sum | bs    |         -6 |\n                  |          Name | n     |
    \         0 |\n                  |          Unit | u     |          1 |\n                  |
    \        Value | v     |          2 |\n                  |  String Value | vs
    \   |          3 |\n                  | Boolean Value | vb    |          4 |\n
    \                 |           Sum | s     |          5 |\n                  |
    \         Time | t     |          6 |\n                  |   Update Time | ut
    \   |          7 |\n                  |    Data Value | vd    |          8 |\n
    \                 +---------------+-------+------------+\n            Table 4:
    CBOR Representation: Integers for Map Keys\n   o  For streaming SenSML in CBOR
    representation, the array containing\n      the records SHOULD be a CBOR array
    with an indefinite length; for\n      non-streaming SenML, an array with a definite
    length MUST be used.\n   The following example shows a dump of the CBOR example
    for the same\n   sensor measurement as in Section 5.1.2.\n 0000 87 a7 21 78 1b
    75 72 6e 3a 64 65 76 3a 6f 77 3a |..!x.urn:dev:ow:|\n 0010 31 30 65 32 30 37 33
    61 30 31 30 38 30 30 36 3a |10e2073a0108006:|\n 0020 22 fb 41 d3 03 a1 5b 00 10
    62 23 61 41 20 05 00 |\".A...[..b#aA ..|\n 0030 67 76 6f 6c 74 61 67 65 01 61
    56 02 fb 40 5e 06 |gvoltage.aV..@^.|\n 0040 66 66 66 66 66 a3 00 67 63 75 72 72
    65 6e 74 06 |fffff..gcurrent.|\n 0050 24 02 fb 3f f3 33 33 33 33 33 33 a3 00 67
    63 75 |$..?.333333..gcu|\n 0060 72 72 65 6e 74 06 23 02 fb 3f f4 cc cc cc cc cc
    |rrent.#..?......|\n 0070 cd a3 00 67 63 75 72 72 65 6e 74 06 22 02 fb 3f |...gcurrent.\"..?|\n
    0080 f6 66 66 66 66 66 66 a3 00 67 63 75 72 72 65 6e |.ffffff..gcurren|\n 0090
    74 06 21 02 f9 3e 00 a3 00 67 63 75 72 72 65 6e |t.!..>...gcurren|\n 00a0 74 06
    20 02 fb 3f f9 99 99 99 99 99 9a a3 00 67 |t. ..?.........g|\n 00b0 63 75 72 72
    65 6e 74 06 00 02 fb 3f fb 33 33 33 |current....?.333|\n 00c0 33 33 33                                        |333|\n
    00c3\n   In CBOR diagnostic notation (Section 6 of [RFC7049]), this is:\n  [{-2:
    \"urn:dev:ow:10e2073a0108006:\",\n    -3: 1276020076.001, -4: \"A\", -1: 5, 0:
    \"voltage\", 1: \"V\", 2: 120.1},\n   {0: \"current\", 6: -5, 2: 1.2}, {0: \"current\",
    6: -4, 2: 1.3},\n   {0: \"current\", 6: -3, 2: 1.4}, {0: \"current\", 6: -2, 2:
    1.5},\n   {0: \"current\", 6: -1, 2: 1.6}, {0: \"current\", 6: 0, 2: 1.7}]\n"
  title: 6.  CBOR Representation (application/senml+cbor)
- contents:
  - "7.  XML Representation (application/senml+xml)\n   A SenML Pack or Stream can
    also be represented in XML format as\n   defined in this section.\n   Only the
    UTF-8 form of XML is allowed.  Octets in the Data Value are\n   base64 encoded
    with the URL-safe alphabet as defined in Section 5 of\n   [RFC4648], with padding
    omitted.\n   The following shows an XML example for the same sensor measurement
    as\n   in Section 5.1.2.\n   <sensml xmlns=\"urn:ietf:params:xml:ns:senml\">\n
    \    <senml bn=\"urn:dev:ow:10e2073a0108006:\" bt=\"1.276020076001e+09\"\n     bu=\"A\"
    bver=\"5\" n=\"voltage\" u=\"V\" v=\"120.1\"></senml>\n     <senml n=\"current\"
    t=\"-5\" v=\"1.2\"></senml>\n     <senml n=\"current\" t=\"-4\" v=\"1.3\"></senml>\n
    \    <senml n=\"current\" t=\"-3\" v=\"1.4\"></senml>\n     <senml n=\"current\"
    t=\"-2\" v=\"1.5\"></senml>\n     <senml n=\"current\" t=\"-1\" v=\"1.6\"></senml>\n
    \    <senml n=\"current\" v=\"1.7\"></senml>\n   </sensml>\n   The SenML Stream
    is represented as a sensml element that contains a\n   series of senml elements
    for each SenML Record.  The SenML fields are\n   represented as XML attributes.
    \ For each field defined in this\n   document, the following table shows the SenML
    Labels, which are used\n   for the XML attribute name, as well as the according
    restrictions on\n   the XML attribute values (\"type\") as used in the XML senml
    elements.\n                   +---------------+-------+----------+\n                   |
    \         Name | Label | XML Type |\n                   +---------------+-------+----------+\n
    \                  |     Base Name | bn    | string   |\n                   |
    \    Base Time | bt    | double   |\n                   |     Base Unit | bu    |
    string   |\n                   |    Base Value | bv    | double   |\n                   |
    \     Base Sum | bs    | double   |\n                   |  Base Version | bver
    \ | int      |\n                   |          Name | n     | string   |\n                   |
    \         Unit | u     | string   |\n                   |         Value | v     |
    double   |\n                   |  String Value | vs    | string   |\n                   |
    \   Data Value | vd    | string   |\n                   | Boolean Value | vb    |
    boolean  |\n                   |           Sum | s     | double   |\n                   |
    \         Time | t     | double   |\n                   |   Update Time | ut    |
    double   |\n                   +---------------+-------+----------+\n                         Table
    5: XML SenML Labels\n   The RelaxNG [RNC] Schema for the XML is:\n   default namespace
    = \"urn:ietf:params:xml:ns:senml\"\n   namespace rng = \"http://relaxng.org/ns/structure/1.0\"\n
    \  senml = element senml {\n     attribute bn { xsd:string }?,\n     attribute
    bt { xsd:double }?,\n     attribute bv { xsd:double }?,\n     attribute bs { xsd:double
    }?,\n     attribute bu { xsd:string }?,\n     attribute bver { xsd:int }?,\n     attribute
    n { xsd:string }?,\n     attribute s { xsd:double }?,\n     attribute t { xsd:double
    }?,\n     attribute u { xsd:string }?,\n     attribute ut { xsd:double }?,\n     attribute
    v { xsd:double }?,\n     attribute vb { xsd:boolean }?,\n     attribute vs { xsd:string
    }?,\n     attribute vd { xsd:string }?\n   }\n   sensml =\n     element sensml
    {\n       senml+\n   }\n   start = sensml\n"
  title: 7.  XML Representation (application/senml+xml)
- contents:
  - "8.  EXI Representation (application/senml-exi)\n   For efficient transmission
    of SenML over, e.g., a constrained\n   network, EXI can be used.  This encodes
    the XML Schema\n   [W3C.REC-xmlschema-1-20041028] structure of SenML into binary
    tags\n   and values rather than ASCII text.  An EXI representation of SenML\n
    \  SHOULD be made using the strict schema mode of EXI.  However, this\n   mode
    does not allow tag extensions to the schema; therefore, any\n   extensions will
    be lost in the encoding.  For uses where extensions\n   need to be preserved in
    EXI, the non-strict schema mode of EXI MAY be\n   used.\n   The EXI header MUST
    include \"EXI Options\", as defined in\n   [W3C.REC-exi-20140211], with a schemaId
    set to the value of \"a\",\n   indicating the schema provided in this specification.
    \ Future\n   revisions to the schema can change the value of the schemaId to allow\n
    \  for backwards compatibility.  When the data will be transported over\n   CoAP
    or HTTP, an EXI Cookie SHOULD NOT be used as it simply makes\n   things larger
    and is redundant to information provided in the\n   Content-Type header.\n   The
    following is the XSD Schema to be used for strict schema-guided\n   EXI processing.
    \ It is generated from the RelaxNG.\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
    \  <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n   elementFormDefault=\"qualified\"\n
    \  targetNamespace=\"urn:ietf:params:xml:ns:senml\"\n   xmlns:ns1=\"urn:ietf:params:xml:ns:senml\">\n
    \    <xs:element name=\"senml\">\n       <xs:complexType>\n         <xs:attribute
    name=\"bn\" type=\"xs:string\" />\n         <xs:attribute name=\"bt\" type=\"xs:double\"
    />\n         <xs:attribute name=\"bv\" type=\"xs:double\" />\n         <xs:attribute
    name=\"bs\" type=\"xs:double\" />\n         <xs:attribute name=\"bu\" type=\"xs:string\"
    />\n         <xs:attribute name=\"bver\" type=\"xs:int\" />\n         <xs:attribute
    name=\"n\" type=\"xs:string\" />\n         <xs:attribute name=\"s\" type=\"xs:double\"
    />\n         <xs:attribute name=\"t\" type=\"xs:double\" />\n         <xs:attribute
    name=\"u\" type=\"xs:string\" />\n         <xs:attribute name=\"ut\" type=\"xs:double\"
    />\n         <xs:attribute name=\"v\" type=\"xs:double\" />\n         <xs:attribute
    name=\"vb\" type=\"xs:boolean\" />\n         <xs:attribute name=\"vs\" type=\"xs:string\"
    />\n         <xs:attribute name=\"vd\" type=\"xs:string\" />\n       </xs:complexType>\n
    \    </xs:element>\n     <xs:element name=\"sensml\">\n       <xs:complexType>\n
    \        <xs:sequence>\n           <xs:element maxOccurs=\"unbounded\" ref=\"ns1:senml\"
    />\n         </xs:sequence>\n       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n
    \  The following shows a hexdump of the EXI produced from encoding the\n   following
    XML example.  Note that this example is the same\n   information as the first
    example in Section 5.1.2 but in JSON format.\n   <sensml xmlns=\"urn:ietf:params:xml:ns:senml\">\n
    \    <senml bn=\"urn:dev:ow:10e2073a01080063:\" n=\"voltage\" u=\"V\"\n     v=\"120.1\"></senml>\n
    \    <senml n=\"current\" u=\"A\" v=\"1.2\"></senml>\n   </sensml>\n   Which compresses
    with EXI to the following displayed in hexdump:\n 0000 a0 30 0d 84 80 f3 ab 93
    71 d3 23 2b b1 d3 7b b9 |.0......q.#+..{.|\n 0010 d1 89 83 29 91 81 b9 9b 09 81
    89 81 c1 81 81 b1 |...)............|\n 0020 99 d2 84 bb 37 b6 3a 30 b3 b2 90 1a
    b1 58 84 c0 |....7.:0.....X..|\n 0030 33 04 b1 ba b9 39 32 b7 3a 10 1a 09 06 40
    38    |3....92.:....@8|\n 003f\n   The above example used the bit-packed form
    of EXI, but it is also\n   possible to use a byte-packed form of EXI, which can
    make it easier\n   for a simple sensor to produce valid EXI without really implementing\n
    \  EXI.  Consider the example of a temperature sensor that produces a\n   value
    in tenths of degrees Celsius over a range of 0.0 to 55.0.  It\n   would produce
    an XML SenML file such as:\n   <sensml xmlns=\"urn:ietf:params:xml:ns:senml\">\n
    \    <senml n=\"urn:dev:ow:10e2073a01080063\" u=\"Cel\" v=\"23.1\"></senml>\n
    \  </sensml>\n   The compressed form, using the byte-alignment option of EXI,
    for the\n   above XML is the following:\n 0000 a0 00 48 80 6c 20 01 06 1d 75 72
    6e 3a 64 65 76 |..H.l ...urn:dev|\n 0010 3a 6f 77 3a 31 30 65 32 30 37 33 61 30
    31 30 38 |:ow:10e2073a0108|\n 0020 30 30 36 33 02 05 43 65 6c 01 00 e7 01 01 00
    03 |0063..Cel.......|\n 0030 01                                              |.|\n
    0031\n   A small temperature sensor device that only generates this one EXI\n
    \  file does not really need a full EXI implementation.  It can simply\n   hard
    code the output, replacing the 1-wire device ID starting at byte\n   0x14 and
    going to byte 0x23 with its device ID and replacing the\n   value \"0xe7 0x01\"
    at location 0x2b and 0x2c with the current\n   temperature.  The EXI specification
    [W3C.REC-exi-20140211] contains\n   the full information on how floating-point
    numbers are represented,\n   but for the purpose of this sensor, the temperature
    can be converted\n   to an integer in tenths of degrees (231 in this example).
    \ EXI stores\n   7 bits of the integer in each byte with the top bit set to one
    if\n   there are further bytes.  So, the first byte is set to the low 7 bits\n
    \  of the integer temperature in tenths of degrees plus 0x80.  In this\n   example,
    231 & 0x7F + 0x80 = 0xE7.  The second byte is set to the\n   integer temperature
    in tenths of degrees right-shifted 7 bits.  In\n   this example, 231 >> 7 = 0x01.\n"
  title: 8.  EXI Representation (application/senml-exi)
- contents:
  - "9.  Fragment Identification Methods\n   A SenML Pack typically consists of multiple
    SenML Records, and for\n   some applications, it may be useful to be able to refer
    to a single\n   Record, or a set of Records, in a Pack with a fragment identifier.\n
    \  The fragment identifier is only interpreted by a client and does not\n   impact
    retrieval of a representation.  The SenML fragment\n   identification is modeled
    after Comma-Separated Value (CSV) fragment\n   identifiers [RFC7111].\n   To select
    a single SenML Record, the \"rec\" scheme followed by a\n   single number is used.
    \ For the purpose of numbering Records, the\n   first Record is at position 1.
    \ A range of records can be selected by\n   giving the first and the last record
    number separated by a \"-\"\n   character.  Instead of the second number, the
    \"*\" character can be\n   used to indicate the last SenML Record in the Pack.
    \ A set of Records\n   can also be selected using a comma-separated list of Record
    positions\n   or ranges.\n   (We use the term \"selecting a Record\" for identifying
    it as part of\n   the fragment, not in the sense of isolating it from the Pack
    -- the\n   Record still needs to be interpreted as part of the Pack, e.g., using\n
    \  the base values defined in earlier Records.)\n"
  - contents:
    - "9.1.  Fragment Identification Examples\n   The 3rd SenML Record from the \"coap://example.com/temp\"
      resource can\n   be selected with:\n      coap://example.com/temp#rec=3\n   Records
      from 3rd to 6th can be selected with:\n      coap://example.com/temp#rec=3-6\n
      \  Records from 19th to the last can be selected with:\n      coap://example.com/temp#rec=19-*\n
      \  The 3rd and 5th Records can be selected with:\n      coap://example.com/temp#rec=3,5\n
      \  To select the Records from third to fifth, the 10th Record, and all\n   Records
      from 19th to the last:\n      coap://example.com/temp#rec=3-5,10,19-*\n"
    title: 9.1.  Fragment Identification Examples
  - contents:
    - "9.2.  Fragment Identification for XML and EXI Formats\n   In addition to the
      SenML fragment identifiers described above, with\n   the XML and EXI SenML formats,
      the syntax defined in the XPointer\n   element() Scheme [XPointerElement] of
      the XPointer Framework\n   [XPointerFramework] can be used.  (This is required
      by [RFC7303] for\n   media types using the syntax suffix structured with \"+xml\".
      \ For\n   consistency, SenML allows this for the EXI formats as well.)\n   Note
      that fragment identifiers are available to the client side only;\n   they are
      not provided in transfer protocols such as CoAP or HTTP.\n   Thus, they cannot
      be used by the server in deciding which media type\n   to send.  Where a server
      has multiple representations available for a\n   resource identified by a URI,
      it might send a JSON or CBOR\n   representation when the client was directed
      to use an XML/EXI\n   fragment identifier with it.  Clients can prevent running
      into this\n   problem by explicitly requesting an XML or EXI media type (e.g.,\n
      \  using the CoAP Accept option) when XML-/EXI-only fragment identifier\n   syntax
      is in use in the URI.\n"
    title: 9.2.  Fragment Identification for XML and EXI Formats
  title: 9.  Fragment Identification Methods
- contents:
  - "10.  Usage Considerations\n   The measurements support sending both the current
    value of a sensor\n   as well as an integrated sum.  For many types of measurements,
    the\n   sum is more useful than the current value.  For historical reasons,\n
    \  this field is called \"Sum\" instead of \"integral\", which would more\n   accurately
    describe its function.  For example, an electrical meter\n   that measures the
    energy a given computer uses will typically want to\n   measure the cumulative
    amount of energy used.  This is less prone to\n   error than reporting the power
    each second and trying to have\n   something on the server side sum together all
    the power measurements.\n   If the network between the sensor and the meter goes
    down over some\n   period of time, when it comes back up, the cumulative sum helps\n
    \  reflect what happened while the network was down.  A meter like this\n   would
    typically report a measurement with the unit set to watts, but\n   it would put
    the sum of energy used in the \"s\" field of the\n   measurement.  It might optionally
    include the current power in the\n   \"v\" field.\n   While the benefit of using
    the integrated sum is fairly clear for\n   measurements like power and energy,
    it is less obvious for something\n   like temperature.  Reporting the sum of the
    temperature makes it easy\n   to compute averages even when the individual temperature
    values are\n   not reported frequently enough to compute accurate averages.\n
    \  Implementers are encouraged to report the cumulative sum as well as\n   the
    raw value of a given sensor.\n   Applications that use the cumulative Sum values
    need to understand\n   they are very loosely defined by this specification, and
    depending on\n   the particular sensor implementation, they may behave in unexpected\n
    \  ways.  Applications should be able to deal with the following issues:\n   1.
    \ Many sensors will allow the cumulative sums to \"wrap\" back to\n       zero
    after the value gets sufficiently large.\n   2.  Some sensors will reset the cumulative
    sum back to zero when the\n       device is reset, loses power, or is replaced
    with a different\n       sensor.\n   3.  Applications cannot make assumptions
    about when the device\n       started accumulating values into the sum.\n   Typically,
    applications can make some assumptions about specific\n   sensors that will allow
    them to deal with these problems.  A common\n   assumption is that for sensors
    whose measurement values are non-\n   negative, the sum should never get smaller;
    if the sum does get\n   smaller, the application will know that one of the situations
    listed\n   above has happened.\n   Despite the name \"Sum\", the Sum field is
    not useful for applications\n   that maintain a running count of the number of
    times an event\n   happened or that keep track of a counter such as the total
    number of\n   bytes sent on an interface.  Data like that can be sent directly
    in\n   the Value field.\n"
  title: 10.  Usage Considerations
- contents:
  - "11.  CDDL\n   As a convenient reference, the JSON and CBOR representations can
    be\n   described with the common Concise Data Definition Language (CDDL)\n   specification
    [CDDL-CBOR] in Figure 1 (informative).\n   SenML-Pack = [1* record]\n   record
    = {\n     ? bn => tstr,        ; Base Name\n     ? bt => numeric,     ; Base Time\n
    \    ? bu => tstr,        ; Base Units\n     ? bv => numeric,     ; Base Value\n
    \    ? bs => numeric,     ; Base Sum\n     ? bver => uint,      ; Base Version\n
    \    ? n => tstr,        ; Name\n     ? u => tstr,        ; Units\n     ? s =>
    numeric,     ; Sum\n     ? t => numeric,     ; Time\n     ? ut => numeric,    ;
    Update Time\n     ? ( v => numeric // ; Numeric Value\n         vs => tstr //
    \  ; String Value\n         vb => bool //   ; Boolean Value\n         vd => binary-value
    ) ; Data Value\n     * key-value-pair\n   }\n   ; now define the generic versions\n
    \  key-value-pair = ( label => value )\n   label = non-b-label / b-label\n   non-b-label
    = tstr .regexp  \"[A-Zac-z0-9][-_:.A-Za-z0-9]*\" / uint\n   b-label = tstr .regexp
    \ \"b[-_:.A-Za-z0-9]+\" / nint\n   value = tstr / binary-value / numeric / bool\n
    \  numeric = number / decfrac\n        Figure 1: Common CDDL Specification for
    CBOR and JSON SenML\n   For JSON, we use text labels and base64url-encoded binary
    data\n   (Figure 2).\n   bver = \"bver\" n  = \"n\"   s  = \"s\"\n   bn  = \"bn\"
    \   u  = \"u\"   t  = \"t\"\n   bt  = \"bt\"    v  = \"v\"   ut = \"ut\"\n   bu
    \ = \"bu\"    vs = \"vs\"  vd = \"vd\"\n   bv  = \"bv\"    vb = \"vb\"\n   bs
    \ = \"bs\"\n   binary-value = tstr             ; base64url encoded\n           Figure
    2: JSON-Specific CDDL Specification for SenML\n   For CBOR, we use integer labels
    and native binary data (Figure 3).\n   bver = -1  n  = 0   s  = 5\n   bn  = -2
    \  u  = 1   t  = 6\n   bt  = -3   v  = 2   ut = 7\n   bu  = -4   vs = 3   vd =
    8\n   bv  = -5   vb = 4\n   bs  = -6\n   binary-value = bstr\n           Figure
    3: CBOR-Specific CDDL Specification for SenML\n"
  title: 11.  CDDL
- contents:
  - "12.  IANA Considerations\n   IANA has created a new \"Sensor Measurement Lists
    (SenML)\" registry\n   that contains the subregistries defined in Sections 12.1
    and 12.2.\n"
  - contents:
    - "12.1.  SenML Units Registry\n   IANA has created a registry of SenML unit symbols
      called the \"SenML\n   Units\" registry.  The primary purpose of this registry
      is to make\n   sure that symbols uniquely map to indicate a type of measurement.\n
      \  Definitions for many of these units can be found in other\n   publications
      such as [NIST811] and [BIPM].  Units marked with an\n   asterisk are NOT RECOMMENDED
      to be produced by new implementations\n   but are in active use and SHOULD be
      implemented by consumers that can\n   use the corresponding SenML units that
      are closer to the unscaled SI\n   units.\n   +----------+------------------------------------+-------+-----------+\n
      \  |   Symbol | Description                        | Type  | Reference |\n   +----------+------------------------------------+-------+-----------+\n
      \  |        m | meter                              | float | RFC 8428  |\n   |
      \      kg | kilogram                           | float | RFC 8428  |\n   |        g
      | gram*                              | float | RFC 8428  |\n   |        s |
      second                             | float | RFC 8428  |\n   |        A | ampere
      \                            | float | RFC 8428  |\n   |        K | kelvin                             |
      float | RFC 8428  |\n   |       cd | candela                            | float
      | RFC 8428  |\n   |      mol | mole                               | float |
      RFC 8428  |\n   |       Hz | hertz                              | float | RFC
      8428  |\n   |      rad | radian                             | float | RFC 8428
      \ |\n   |       sr | steradian                          | float | RFC 8428  |\n
      \  |        N | newton                             | float | RFC 8428  |\n   |
      \      Pa | pascal                             | float | RFC 8428  |\n   |        J
      | joule                              | float | RFC 8428  |\n   |        W |
      watt                               | float | RFC 8428  |\n   |        C | coulomb
      \                           | float | RFC 8428  |\n   |        V | volt                               |
      float | RFC 8428  |\n   |        F | farad                              | float
      | RFC 8428  |\n   |      Ohm | ohm                                | float |
      RFC 8428  |\n   |        S | siemens                            | float | RFC
      8428  |\n   |       Wb | weber                              | float | RFC 8428
      \ |\n   |        T | tesla                              | float | RFC 8428  |\n
      \  |        H | henry                              | float | RFC 8428  |\n   |
      \     Cel | degrees Celsius                    | float | RFC 8428  |\n   |       lm
      | lumen                              | float | RFC 8428  |\n   |       lx |
      lux                                | float | RFC 8428  |\n   |       Bq | becquerel
      \                         | float | RFC 8428  |\n   |       Gy | gray                               |
      float | RFC 8428  |\n   |       Sv | sievert                            | float
      | RFC 8428  |\n   |      kat | katal                              | float |
      RFC 8428  |\n   |       m2 | square meter (area)                | float | RFC
      8428  |\n   |       m3 | cubic meter (volume)               | float | RFC 8428
      \ |\n   |        l | liter (volume)*                    | float | RFC 8428  |\n
      \  |      m/s | meter per second (velocity)        | float | RFC 8428  |\n   |
      \    m/s2 | meter per square second            | float | RFC 8428  |\n   |          |
      (acceleration)                     |       |           |\n   |     m3/s | cubic
      meter per second (flow rate) | float | RFC 8428  |\n   |      l/s | liter per
      second (flow rate)*      | float | RFC 8428  |\n   |     W/m2 | watt per square
      meter (irradiance) | float | RFC 8428  |\n   |    cd/m2 | candela per square
      meter           | float | RFC 8428  |\n   |          | (luminance)                        |
      \      |           |\n   |      bit | bit (information content)          | float
      | RFC 8428  |\n   |    bit/s | bit per second (data rate)         | float |
      RFC 8428  |\n   |      lat | degrees latitude (Note 1)          | float | RFC
      8428  |\n   |      lon | degrees longitude (Note 1)         | float | RFC 8428
      \ |\n   |       pH | pH value (acidity; logarithmic     | float | RFC 8428  |\n
      \  |          | quantity)                          |       |           |\n   |
      \      dB | decibel (logarithmic quantity)     | float | RFC 8428  |\n   |      dBW
      | decibel relative to 1 W (power     | float | RFC 8428  |\n   |          |
      level)                             |       |           |\n   |     Bspl | bel
      (sound pressure level;         | float | RFC 8428  |\n   |          | logarithmic
      quantity)*             |       |           |\n   |    count | 1 (counter value)
      \                 | float | RFC 8428  |\n   |        / | 1 (ratio, e.g., value
      of a switch; | float | RFC 8428  |\n   |          | Note 2)                            |
      \      |           |\n   |        % | 1 (ratio, e.g., value of a switch; | float
      | RFC 8428  |\n   |          | Note 2)*                           |       |
      \          |\n   |      %RH | percentage (relative humidity)     | float | RFC
      8428  |\n   |      %EL | percentage (remaining battery      | float | RFC 8428
      \ |\n   |          | energy level)                      |       |           |\n
      \  |       EL | seconds (remaining battery energy  | float | RFC 8428  |\n   |
      \         | level)                             |       |           |\n   |      1/s
      | 1 per second (event rate)          | float | RFC 8428  |\n   |    1/min |
      1 per minute (event rate, \"rpm\")*  | float | RFC 8428  |\n   | beat/min |
      1 per minute (heart rate in beats  | float | RFC 8428  |\n   |          | per
      minute)*                       |       |           |\n   |    beats | 1 (cumulative
      number of heart      | float | RFC 8428  |\n   |          | beats)*                            |
      \      |           |\n   |      S/m | siemens per meter (conductivity)   | float
      | RFC 8428  |\n   +----------+------------------------------------+-------+-----------+\n
      \                 Table 6: IANA Registry for SenML Units\n   o  Note 1: Assumed
      to be in World Geodetic System 1984 (WGS84),\n      unless another reference
      frame is known for the sensor.\n   o  Note 2: A value of 0.0 indicates the switch
      is off, 1.0 indicates\n      on, and 0.5 indicates half on.  The preferred name
      of this unit is\n      \"/\".  For historical reasons, the name \"%\" is also
      provided for\n      the same unit, but note that while that name strongly suggests
      a\n      percentage (0..100), it is NOT a percentage but the absolute\n      ratio!\n
      \  New entries can be added to the registration by Expert Review as\n   defined
      in [RFC8126].  Experts should exercise their own good\n   judgment but need
      to consider the following guidelines:\n   1.   There needs to be a real and
      compelling use for any new unit to\n        be added.\n   2.   Each unit should
      define the semantic information and be chosen\n        carefully.  Implementers
      need to remember that the same word may\n        be used in different real-life
      contexts.  For example, degrees\n        when measuring latitude have no semantic
      relation to degrees\n        when measuring temperature; thus, two different
      units are\n        needed.\n   3.   These measurements are produced by computers
      for consumption by\n        computers.  The principle is that conversion has
      to be easily\n        done when both reading and writing the media type.  The
      value of\n        a single canonical representation outweighs the convenience
      of\n        easy human representations or loss of precision in a conversion.\n
      \  4.   Use of System of Units (SI) prefixes such as \"k\" before the unit\n
      \       is not recommended.  Instead, one can represent the value using\n        scientific
      notation such as 1.2e3.  The \"kg\" unit is an\n        exception to this rule
      since it is an SI base unit; the \"g\" unit\n        is provided for legacy
      compatibility.\n   5.   For a given type of measurement, there will only be
      one unit\n        type defined.  So for length, meter is defined, and other\n
      \       lengths such as mile, foot, and light year are not allowed.  For\n        most
      cases, the SI unit is preferred.\n        (Note that some amount of judgment
      will be required here, as\n        even SI itself is not entirely consistent
      in this respect.  For\n        instance, for temperature, [ISO-80000-5] defines
      a quantity,\n        item 5-1 (thermodynamic temperature), and a corresponding
      unit\n        of 5-1.a (Kelvin); [ISO-80000-5] goes on to define another\n        quantity,
      item 5-2 (\"Celsius temperature\"), and the\n        corresponding unit of 5-2.a
      (degree Celsius).  The latter\n        quantity is defined such that it gives
      the thermodynamic\n        temperature as a delta from T0 = 275.15 K.  ISO 80000-5
      is\n        defining both units side by side and not really expressing a\n        preference.
      \ This level of recognition of the alternative unit\n        degree Celsius
      is the reason why Celsius temperatures seem\n        exceptionally acceptable
      in the SenML units list alongside\n        Kelvin.)\n   6.   Symbol names that
      could be easily confused with existing common\n        units or units combined
      with prefixes should be avoided.  For\n        example, selecting a unit name
      of \"mph\" to indicate something\n        that had nothing to do with velocity
      would be a bad choice, as\n        \"mph\" is commonly used to mean \"miles
      per hour\".\n   7.   The following should not be used because they are common
      SI\n        prefixes: Y, Z, E, P, T, G, M, k, h, da, d, c, u, n, p, f, a, z,\n
      \       y, Ki, Mi, Gi, Ti, Pi, Ei, Zi, and Yi.\n   8.   The following units
      should not be used as they are commonly used\n        to represent other measurements:
      Ky, Gal, dyn, etg, P, St, Mx,\n        G, Oe, Gb, sb, Lmb, mph, Ci, R, RAD,
      REM, gal, bbl, qt, degF,\n        Cal, BTU, HP, pH, B/s, psi, Torr, atm, at,
      bar, and kWh.\n   9.   The unit names are case sensitive, and the correct case
      needs to\n        be used; however, symbols that differ only in case should
      not be\n        allocated.\n   10.  A number after a unit typically indicates
      the previous unit\n        raised to that power, and \"/\" indicates that the
      units that\n        follow are the reciprocals.  A unit should have only one
      \"/\" in\n        the name.\n   11.  A good list of common units can be found
      in the Unified Code for\n        Units of Measure [UCUM].\n"
    title: 12.1.  SenML Units Registry
  - contents:
    - "12.2.  SenML Labels Registry\n   IANA has created a new registry for SenML
      Labels called the \"SenML\n   Labels\" registry.  The initial contents of the
      registry are as\n   follows:\n   +--------------+-------+----+-----------+----------+----+-----------+\n
      \  |         Name | Label | CL | JSON Type | XML Type | EI | Reference |\n   +--------------+-------+----+-----------+----------+----+-----------+\n
      \  |    Base Name | bn    | -2 | String    | string   | a  | RFC 8428  |\n   |
      \   Base Time | bt    | -3 | Number    | double   | a  | RFC 8428  |\n   |    Base
      Unit | bu    | -4 | String    | string   | a  | RFC 8428  |\n   |   Base Value
      | bv    | -5 | Number    | double   | a  | RFC 8428  |\n   |     Base Sum |
      bs    | -6 | Number    | double   | a  | RFC 8428  |\n   | Base Version | bver
      \ | -1 | Number    | int      | a  | RFC 8428  |\n   |         Name | n     |
      0  | String    | string   | a  | RFC 8428  |\n   |         Unit | u     | 1
      \ | String    | string   | a  | RFC 8428  |\n   |        Value | v     | 2  |
      Number    | double   | a  | RFC 8428  |\n   | String Value | vs    | 3  | String
      \   | string   | a  | RFC 8428  |\n   |      Boolean | vb    | 4  | Boolean
      \  | boolean  | a  | RFC 8428  |\n   |        Value |       |    |           |
      \         |    |           |\n   |   Data Value | vd    | 8  | String    | string
      \  | a  | RFC 8428  |\n   |          Sum | s     | 5  | Number    | double   |
      a  | RFC 8428  |\n   |         Time | t     | 6  | Number    | double   | a
      \ | RFC 8428  |\n   |  Update Time | ut    | 7  | Number    | double   | a  |
      RFC 8428  |\n   +--------------+-------+----+-----------+----------+----+-----------+\n
      \               Note that CL = CBOR Label and EI = EXI ID.\n                  Table
      7: IANA Registry for SenML Labels\n   This is the same table as Table 1, with
      notes removed and columns\n   added for the information that is all the same
      for this initial set\n   of registrations, but it will need to be supplied with
      different\n   values for new registrations.\n   All new entries must define
      the Name, Label, and XML Type, but the\n   CBOR labels SHOULD be left empty
      as CBOR will use the string encoding\n   for any new labels.  The EI column
      contains the EXI schemaId value of\n   the first schema that includes this label,
      or it is empty if this\n   label was not intended for use with EXI.  The Reference
      column SHOULD\n   contain information about where to find out more information
      about\n   this label.\n   The JSON, CBOR, and EXI types are derived from the
      XML type.  All XML\n   numeric types such as double, float, integer, and int
      become a JSON\n   Number.  XML boolean and string become a JSON Boolean and
      String,\n   respectively.  CBOR represents numeric values with a CBOR type that\n
      \  does not lose any information from the JSON value.  EXI uses the XML\n   types.\n
      \  New entries can be added to the registration by Expert Review as\n   defined
      in [RFC8126].  Experts should exercise their own good\n   judgment but need
      to consider that shorter labels should have more\n   strict review.  New entries
      should not be made that counteract the\n   advice at the end of Section 4.5.4.\n
      \  All new SenML Labels that have \"base\" semantics (see Section 4.1)\n   MUST
      start with the character \"b\".  Regular labels MUST NOT start\n   with that
      character.  All new SenML Labels with Value semantics (see\n   Section 4.2)
      MUST have \"Value\" in their (long-form) name.\n   Extensions that add a label
      intended for use with XML need to create\n   a new RelaxNG Schema that includes
      all the labels in the \"SenML\n   Labels\" registry.\n   Extensions that add
      a label that is intended for use with EXI need to\n   create a new XSD Schema
      that includes all the labels in the \"SenML\n   Labels\" registry and then allocate
      a new EXI schemaId value.  Moving\n   to the next letter in the alphabet is
      the suggested way to create the\n   new value for the EXI schemaId.  Any labels
      with previously blank ID\n   values SHOULD be updated in the \"SenML Labels\"
      registry to have their\n   ID set to this new schemaId value.\n   Extensions
      that are mandatory to understand to correctly process the\n   Pack MUST have
      a label name that ends with the \"_\" character.\n"
    title: 12.2.  SenML Labels Registry
  - contents:
    - "12.3.  Media Type Registrations\n   The registrations in the subsections below
      follow the procedures\n   specified in [RFC6838] and [RFC7303].  This document
      registers media\n   types for each serialization format of SenML (JSON, CBOR,
      XML, and\n   EXI) and also a corresponding set of media types for streaming
      use\n   (SenSML; see Section 4.8).  Clipboard formats are defined for the\n
      \  JSON and XML forms of SenML but not for streams or non-textual\n   formats.\n
      \  The reason there are both SenML and the streaming SenSML formats is\n   that
      they are not the same data formats, and they require separate\n   negotiation
      to understand if they are supported and which one is\n   being used.  The non-streaming
      format is required to have some sort\n   of end-of-pack syntax that indicates
      there will be no more records.\n   Many implementations that receive SenML wait
      for this end-of-pack\n   marker before processing any of the records.  On the
      other hand, with\n   the streaming formats, it is explicitly not required to
      wait for this\n   end-of-pack marker.  Many implementations that produce streaming\n
      \  SenSML will never send this end-of-pack marker, so implementations\n   that
      receive streaming SenSML cannot wait for the end-of-pack marker\n   before they
      start processing the records.  Given that SenML and\n   streaming SenML are
      different data formats, and considering the\n   requirement for separate negotiation,
      a media type for each one is\n   needed.\n"
    - contents:
      - "12.3.1.  senml+json Media Type Registration\n   Type name: application\n
        \  Subtype name: senml+json\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using a subset of the\n
        \  encoding allowed in [RFC8259].  See RFC 8428 for details.  This\n   simplifies
        implementation of a very simple system and does not impose\n   any significant
        limitations as all this data is meant for machine-to-\n   machine communications
        and is not meant to be human readable.\n   Security considerations: See Section
        13 of RFC 8428.\n   Interoperability considerations: Applications MUST ignore
        any JSON\n   key-value pairs that they do not understand unless the key ends
        with\n   the \"_\" character, in which case an error MUST be generated.  This\n
        \  allows backwards-compatible extensions to this specification.  The\n   \"bver\"
        field can be used to ensure the receiver supports a minimal\n   level of functionality
        needed by the creator of the JSON object.\n   Published specification: RFC
        8428\n   Applications that use this media type: The type is used by systems\n
        \  that report, e.g., electrical power usage and environmental\n   information
        such as temperature and humidity.  It can be used for a\n   wide range of
        sensor reporting systems.\n   Fragment identifier considerations: Fragment
        identification for\n   application/senml+json is supported by using fragment
        identifiers as\n   specified by RFC 8428.\n   Additional information:\n      Deprecated
        alias names for this type: N/A\n      Magic number(s): N/A\n      File extension(s):
        senml\n      Windows Clipboard Name: \"JSON Sensor Measurement List\"\n      Macintosh
        file type code(s): none\n      Macintosh Universal Type Identifier code: org.ietf.senml-json\n
        \     conforms to public.text\n   Person & email address to contact for further
        information:\n      Cullen Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n
        \  Restrictions on usage: None\n   Author: Cullen Jennings <fluffy@iii.ca>\n
        \  Change controller: IESG\n"
      title: 12.3.1.  senml+json Media Type Registration
    - contents:
      - "12.3.2.  sensml+json Media Type Registration\n   Type name: application\n
        \  Subtype name: sensml+json\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using a subset of the\n
        \  encoding allowed in [RFC8259].  See RFC 8428 for details.  This\n   simplifies
        implementation of a very simple system and does not impose\n   any significant
        limitations as all this data is meant for machine-to-\n   machine communications
        and is not meant to be human readable.\n   Security considerations: See Section
        13 of RFC 8428.\n   Interoperability considerations: Applications MUST ignore
        any JSON\n   key-value pairs that they do not understand unless the key ends
        with\n   the \"_\" character, in which case an error MUST be generated.  This\n
        \  allows backwards-compatible extensions to this specification.  The\n   \"bver\"
        field can be used to ensure the receiver supports a minimal\n   level of functionality
        needed by the creator of the JSON object.\n   Published specification: RFC
        8428\n   Applications that use this media type: The type is used by systems\n
        \  that report, e.g., electrical power usage and environmental\n   information
        such as temperature and humidity.  It can be used for a\n   wide range of
        sensor reporting systems.\n   Fragment identifier considerations: Fragment
        identification for\n   application/sensml+json is supported by using fragment
        identifiers as\n   specified by RFC 8428.\n   Additional information:\n      Deprecated
        alias names for this type: N/A\n      Magic number(s): N/A\n      File extension(s):
        sensml\n      Macintosh file type code(s): none\n   Person & email address
        to contact for further information:\n      Cullen Jennings <fluffy@iii.ca>\n
        \  Intended usage: COMMON\n   Restrictions on usage: None\n   Author: Cullen
        Jennings <fluffy@iii.ca>\n   Change controller: IESG\n"
      title: 12.3.2.  sensml+json Media Type Registration
    - contents:
      - "12.3.3.  senml+cbor Media Type Registration\n   Type name: application\n
        \  Subtype name: senml+cbor\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using [RFC7049].  See
        RFC\n   8428 for details.\n   Security considerations: See Section 13 of RFC
        8428.\n   Interoperability considerations: Applications MUST ignore any key-\n
        \  value pairs that they do not understand unless the key ends with the\n
        \  \"_\" character, in which case an error MUST be generated.  This allows\n
        \  backwards-compatible extensions to this specification.  The \"bver\"\n
        \  field can be used to ensure the receiver supports a minimal level of\n
        \  functionality needed by the creator of the CBOR object.\n   Published specification:
        RFC 8428\n   Applications that use this media type: The type is used by systems\n
        \  that report, e.g., electrical power usage and environmental\n   information
        such as temperature and humidity.  It can be used for a\n   wide range of
        sensor reporting systems.\n   Fragment identifier considerations: Fragment
        identification for\n   application/senml+cbor is supported by using fragment
        identifiers as\n   specified by RFC 8428.\n   Additional information:\n      Deprecated
        alias names for this type: N/A\n      Magic number(s): N/A\n      File extension(s):
        senmlc\n      Macintosh file type code(s): none\n      Macintosh Universal
        Type Identifier code: org.ietf.senml-cbor\n      conforms to public.data\n
        \  Person & email address to contact for further information:\n      Cullen
        Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n   Restrictions on usage:
        None\n   Author: Cullen Jennings <fluffy@iii.ca>\n   Change controller: IESG\n"
      title: 12.3.3.  senml+cbor Media Type Registration
    - contents:
      - "12.3.4.  sensml+cbor Media Type Registration\n   Type name: application\n
        \  Subtype name: sensml+cbor\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using [RFC7049].  See
        RFC\n   8428 for details.\n   Security considerations: See Section 13 of RFC
        8428.\n   Interoperability considerations: Applications MUST ignore any key-\n
        \  value pairs that they do not understand unless the key ends with the\n
        \  \"_\" character, in which case an error MUST be generated.  This allows\n
        \  backwards-compatible extensions to this specification.  The \"bver\"\n
        \  field can be used to ensure the receiver supports a minimal level of\n
        \  functionality needed by the creator of the CBOR object.\n   Published specification:
        RFC 8428\n   Applications that use this media type: The type is used by systems\n
        \  that report, e.g., electrical power usage and environmental\n   information
        such as temperature and humidity.  It can be used for a\n   wide range of
        sensor reporting systems.\n   Fragment identifier considerations: Fragment
        identification for\n   application/sensml+cbor is supported by using fragment
        identifiers as\n   specified by RFC 8428.\n   Additional information:\n      Deprecated
        alias names for this type: N/A\n      Magic number(s): N/A\n      File extension(s):
        sensmlc\n      Macintosh file type code(s): none\n   Person & email address
        to contact for further information:\n      Cullen Jennings <fluffy@iii.ca>\n
        \  Intended usage: COMMON\n   Restrictions on usage: None\n   Author: Cullen
        Jennings <fluffy@iii.ca>\n   Change controller: IESG\n"
      title: 12.3.4.  sensml+cbor Media Type Registration
    - contents:
      - "12.3.5.  senml+xml Media Type Registration\n   Type name: application\n   Subtype
        name: senml+xml\n   Required parameters: none\n   Optional parameters: none\n
        \  Encoding considerations: Must be encoded as using\n   [W3C.REC-xml-20081126].
        \ See RFC 8428 for details.\n   Security considerations: See Section 13 of
        RFC 8428.\n   Interoperability considerations: Applications MUST ignore any
        XML\n   tags or attributes that they do not understand unless the attribute\n
        \  name ends with the \"_\" character, in which case an error MUST be\n   generated.
        \ This allows backwards-compatible extensions to this\n   specification.  The
        \"bver\" attribute in the senml XML tag can be used\n   to ensure the receiver
        supports a minimal level of functionality\n   needed by the creator of the
        XML SenML Pack.\n   Published specification: RFC 8428\n   Applications that
        use this media type: The type is used by systems\n   that report, e.g., electrical
        power usage and environmental\n   information such as temperature and humidity.
        \ It can be used for a\n   wide range of sensor reporting systems.\n   Fragment
        identifier considerations: Fragment identification for\n   application/senml+xml
        is supported by using fragment identifiers as\n   specified by RFC 8428.\n
        \  Additional information:\n      Deprecated alias names for this type: N/A\n
        \     Magic number(s): N/A\n      File extension(s): senmlx\n      Windows
        Clipboard Name: \"XML Sensor Measurement List\"\n      Macintosh file type
        code(s): none\n      Macintosh Universal Type Identifier code: org.ietf.senml-xml\n
        \     conforms to public.xml\n   Person & email address to contact for further
        information:\n      Cullen Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n
        \  Restrictions on usage: None\n   Author: Cullen Jennings <fluffy@iii.ca>\n
        \  Change controller: IESG\n"
      title: 12.3.5.  senml+xml Media Type Registration
    - contents:
      - "12.3.6.  sensml+xml Media Type Registration\n   Type name: application\n
        \  Subtype name: sensml+xml\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using\n   [W3C.REC-xml-20081126].
        \ See RFC 8428 for details.\n   Security considerations: See Section 13 of
        RFC 8428.\n   Interoperability considerations: Applications MUST ignore any
        XML\n   tags or attributes that they do not understand unless the attribute\n
        \  name ends with the \"_\" character, in which case an error MUST be\n   generated.
        \ This allows backwards-compatible extensions to this\n   specification.  The
        \"bver\" attribute in the senml XML tag can be used\n   to ensure the receiver
        supports a minimal level of functionality\n   needed by the creator of the
        XML SenML Pack.\n   Published specification: RFC 8428\n   Applications that
        use this media type: The type is used by systems\n   that report, e.g., electrical
        power usage and environmental\n   information such as temperature and humidity.
        \ It can be used for a\n   wide range of sensor reporting systems.\n   Fragment
        identifier considerations: Fragment identification for\n   application/sensml+xml
        is supported by using fragment identifiers as\n   specified by RFC 8428.\n
        \  Additional information:\n      Deprecated alias names for this type: N/A\n
        \     Magic number(s): N/A\n      File extension(s): sensmlx\n      Macintosh
        file type code(s): none\n   Person & email address to contact for further
        information:\n      Cullen Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n
        \  Restrictions on usage: None\n   Author: Cullen Jennings <fluffy@iii.ca>\n
        \  Change controller: IESG\n"
      title: 12.3.6.  sensml+xml Media Type Registration
    - contents:
      - "12.3.7.  senml-exi Media Type Registration\n   Type name: application\n   Subtype
        name: senml-exi\n   Required parameters: none\n   Optional parameters: none\n
        \  Encoding considerations: Must be encoded as using\n   [W3C.REC-exi-20140211].
        \ See RFC 8428 for details.\n   Security considerations: See Section 13 of
        RFC 8428.\n   Interoperability considerations: Applications MUST ignore any
        XML\n   tags or attributes that they do not understand unless the attribute\n
        \  name ends with the \"_\" character, in which case an error MUST be\n   generated.
        \ This allows backwards-compatible extensions to this\n   specification.  The
        \"bver\" attribute in the senml XML tag can be used\n   to ensure the receiver
        supports a minimal level of functionality\n   needed by the creator of the
        XML SenML Pack.  Further information on\n   using schemas to guide the EXI
        can be found in RFC 8428.\n   Published specification: RFC 8428\n   Applications
        that use this media type: The type is used by systems\n   that report, e.g.,
        electrical power usage and environmental\n   information such as temperature
        and humidity.  It can be used for a\n   wide range of sensor reporting systems.\n
        \  Fragment identifier considerations: Fragment identification for\n   application/senml-exi
        is supported by using fragment identifiers as\n   specified by RFC 8428.\n
        \  Additional information:\n      Deprecated alias names for this type: N/A\n
        \     Magic number(s): N/A\n      File extension(s): senmle\n      Macintosh
        file type code(s): none\n      Macintosh Universal Type Identifier code: org.ietf.senml-exi\n
        \     conforms to public.data\n   Person & email address to contact for further
        information:\n      Cullen Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n
        \  Restrictions on usage: None\n   Author: Cullen Jennings <fluffy@iii.ca>\n
        \  Change controller: IESG\n"
      title: 12.3.7.  senml-exi Media Type Registration
    - contents:
      - "12.3.8.  sensml-exi Media Type Registration\n   Type name: application\n
        \  Subtype name: sensml-exi\n   Required parameters: none\n   Optional parameters:
        none\n   Encoding considerations: Must be encoded as using\n   [W3C.REC-exi-20140211].
        \ See RFC 8428 for details.\n   Security considerations: See Section 13 of
        RFC 8428.\n   Interoperability considerations: Applications MUST ignore any
        XML\n   tags or attributes that they do not understand unless the attribute\n
        \  name ends with the \"_\" character, in which case an error MUST be\n   generated.
        \ This allows backwards-compatible extensions to this\n   specification.  The
        \"bver\" attribute in the senml XML tag can be used\n   to ensure the receiver
        supports a minimal level of functionality\n   needed by the creator of the
        XML SenML Pack.  Further information on\n   using schemas to guide the EXI
        can be found in RFC 8428.\n   Published specification: RFC 8428\n   Applications
        that use this media type: The type is used by systems\n   that report, e.g.,
        electrical power usage and environmental\n   information such as temperature
        and humidity.  It can be used for a\n   wide range of sensor reporting systems.\n
        \  Fragment identifier considerations: Fragment identification for\n   application/sensml-exi
        is supported by using fragment identifiers as\n   specified by RFC 8428.\n
        \  Additional information:\n      Deprecated alias names for this type: N/A\n
        \     Magic number(s): N/A\n      File extension(s): sensmle\n      Macintosh
        file type code(s): none\n   Person & email address to contact for further
        information:\n      Cullen Jennings <fluffy@iii.ca>\n   Intended usage: COMMON\n
        \  Restrictions on usage: None\n   Author: Cullen Jennings <fluffy@iii.ca>\n
        \  Change controller: IESG\n"
      title: 12.3.8.  sensml-exi Media Type Registration
    title: 12.3.  Media Type Registrations
  - contents:
    - "12.4.  XML Namespace Registration\n   This document registers the following
      XML namespace in the \"IETF XML\n   Registry\" defined in [RFC3688].\n   URI:
      urn:ietf:params:xml:ns:senml\n   Registrant Contact: The IESG.\n   XML: N/A,
      the requested URIs are XML namespaces\n"
    title: 12.4.  XML Namespace Registration
  - contents:
    - "12.5.  CoAP Content-Format Registration\n   IANA has assigned CoAP Content-Format
      IDs for the SenML media types\n   in the \"CoAP Content-Formats\" subregistry
      within the \"Constrained\n   RESTful Environments (CoRE) Parameters\" registry
      [RFC7252].  IDs for\n   the JSON, CBOR, and EXI Content-Formats have been assigned
      in the\n   0-255 range (Expert Review), and IDs for the XML Content-Formats
      have\n   been assigned in the 256-9999 range (IETF Review or IESG Approval).\n
      \  The assigned IDs are shown in the table below:\n         +-------------------------+----------+-----+-----------+\n
      \        | Media Type              | Encoding | ID  | Reference |\n         +-------------------------+----------+-----+-----------+\n
      \        | application/senml+json  | -        | 110 | RFC 8428  |\n         |
      application/sensml+json | -        | 111 | RFC 8428  |\n         | application/senml+cbor
      \ | -        | 112 | RFC 8428  |\n         | application/sensml+cbor | -        |
      113 | RFC 8428  |\n         | application/senml-exi   | -        | 114 | RFC
      8428  |\n         | application/sensml-exi  | -        | 115 | RFC 8428  |\n
      \        | application/senml+xml   | -        | 310 | RFC 8428  |\n         |
      application/sensml+xml  | -        | 311 | RFC 8428  |\n         +-------------------------+----------+-----+-----------+\n
      \                    Table 8: CoAP Content-Format IDs\n"
    title: 12.5.  CoAP Content-Format Registration
  title: 12.  IANA Considerations
- contents:
  - "13.  Security Considerations\n   Sensor data presented with SenML can contain
    a wide array of\n   information that ranges from very public (such as the outside\n
    \  temperature in a given city) to very private (such as patient health\n   information
    that requires integrity and confidentiality protection).\n   When SenML is used
    for configuration or actuation, it can be used to\n   change the state of systems
    and also impact the physical world, e.g.,\n   by turning off a heater or opening
    a lock.  Malicious use of SenML to\n   change system state could have severe consequences,
    potentially\n   including violation of physical security, property damage, and
    even\n   loss of life.\n   SenML formats alone do not provide any security and
    instead rely on\n   the protocol that carries them to provide security.  Applications\n
    \  using SenML need to look at the overall context of how these formats\n   will
    be used to decide if the security is adequate.  In particular,\n   for sensitive
    sensor data and actuation use, it is important to\n   ensure that proper security
    mechanisms are used to provide, e.g.,\n   confidentiality, data integrity, and
    authentication as appropriate\n   for the usage.\n   SenML formats defined by
    this specification do not contain any\n   executable content.  However, future
    extensions could potentially\n   embed application-specific executable content
    in the data.\n   SenML Records are intended to be interpreted in the context of
    any\n   applicable base values.  If Records become separated from the Record\n
    \  that establishes the base values, the data will be useless or, worse,\n   wrong.
    \ Care needs to be taken in keeping the integrity of a Pack\n   that contains
    unresolved SenML Records (see Section 4.6).\n   See also Section 14.\n"
  title: 13.  Security Considerations
- contents:
  - "14.  Privacy Considerations\n   Sensor data can range from information with almost
    no privacy\n   considerations, such as the current temperature in a given city,
    to\n   highly sensitive medical or location data.  This specification\n   provides
    no security protection for the data but is meant to be used\n   inside another
    container or transfer protocol such as S/MIME\n   [RFC5751] or HTTP with TLS [RFC2818]
    that can provide integrity,\n   confidentiality, and authentication information
    about the source of\n   the data.\n   The Name fields need to uniquely identify
    the sources or destinations\n   of the values in a SenML Pack.  However, the use
    of long-term stable\n   and unique identifiers can be problematic for privacy
    reasons\n   [RFC6973], depending on the application and the potential of these\n
    \  identifiers to be used in correlation with other information.  They\n   should
    be used with care or avoided, for example, as described for\n   IPv6 addresses
    in [RFC7721].\n"
  title: 14.  Privacy Considerations
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [BIPM]     Bureau International des Poids et
      Mesures, \"The\n              International System of Units (SI)\", 8th Edition,
      2006.\n   [IEEE.754] IEEE, \"Standard for Binary Floating-Point Arithmetic\",\n
      \             IEEE Standard 754.\n   [NIST811]  Thompson, A. and B. Taylor,
      \"Guide for the Use of the\n              International System of Units (SI)\",
      NIST Special\n              Publication 811, DOI 10.6028/NIST.SP.811e2008, March
      2008.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,
      March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]
      \ Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC7049]
      \ Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation
      (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n
      \  [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application
      Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n
      \             <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC7303]  Thompson,
      H. and C. Lilley, \"XML Media Types\", RFC 7303,\n              DOI 10.17487/RFC7303,
      July 2014,\n              <https://www.rfc-editor.org/info/rfc7303>.\n   [RFC8126]
      \ Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n
      \  [RNC]      ISO/IEC, \"Information technology -- Document Schema\n              Definition
      Language (DSDL) -- Part 2: Regular-grammar-\n              based validation
      -- RELAX NG\", ISO/IEC 19757-2, Annex\n              C: RELAX NG Compact syntax,
      December 2008.\n   [TIME_T]   The Open Group Base Specifications, \"Open Group
      Standard -\n              Vol. 1: Base Definitions, Issue 7\", Section 4.16,
      \"Seconds\n              Since the Epoch\", IEEE Standard 1003.1, 2018,\n              <http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/\n
      \             V1_chap04.html#tag_04_16>.\n   [W3C.REC-exi-20140211]\n              Schneider,
      J., Kamiya, T., Peintner, D., and R. Kyusakov,\n              \"Efficient XML
      Interchange (EXI) Format 1.0 (Second\n              Edition)\", W3C Recommendation
      REC-exi-20140211, February\n              2014, <http://www.w3.org/TR/2014/REC-exi-20140211>.\n
      \  [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,
      M., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)
      1.0 (Fifth\n              Edition)\", W3C Recommendation REC-xml-20081126, November\n
      \             2008, <http://www.w3.org/TR/2008/REC-xml-20081126>.\n   [W3C.REC-xmlschema-1-20041028]\n
      \             Thompson, H., Beech, D., Maloney, M., and N. Mendelsohn,\n              \"XML
      Schema Part 1: Structures Second Edition\", W3C\n              Recommendation
      REC-xmlschema-1-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n
      \  [XPointerElement]\n              Grosso, P., Maler, E., Marsh, J., and N.
      Walsh, \"XPointer\n              element() Scheme\", W3C Recommendation REC-xptr-element,\n
      \             March 2003,\n              <https://www.w3.org/TR/2003/REC-xptr-element-20030325/>.\n
      \  [XPointerFramework]\n              Grosso, P., Maler, E., Marsh, J., and
      N. Walsh, \"XPointer\n              Framework\", W3C Recommendation REC-XPointer-Framework,\n
      \             March 2003,\n              <http://www.w3.org/TR/2003/REC-xptr-framework-20030325/>.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [AN1796]   Linke, B., \"Overview of 1-Wire
      Technology and Its Use\",\n              Maxim Integrated, Tutorial 1796, June
      2008,\n              <http://pdfserv.maximintegrated.com/en/an/AN1796.pdf>.\n
      \  [CDDL-CBOR]\n              Birkholz, H., Vigano, C., and C. Bormann, \"Concise
      data\n              definition language (CDDL): a notational convention to\n
      \             express CBOR and JSON data structures\", Work in Progress,\n              draft-ietf-cbor-cddl-05,
      August 2018.\n   [DEVICE-URN]\n              Arkko, J., Jennings, C., and Z.
      Shelby, \"Uniform Resource\n              Names for Device Identifiers\", Work
      in Progress,\n              draft-ietf-core-dev-urn-02, July 2018.\n   [IEEE802.1AS]\n
      \             IEEE, \"IEEE Standard for Local and Metropolitan Area\n              Networks
      - Timing and Synchronization for Time-Sensitive\n              Applications
      in Bridged Local Area Networks\", IEEE\n              Standard 802.1AS.\n   [IEEE802.1BA]\n
      \             IEEE, \"IEEE Standard for Local and metropolitan area\n              networks--Audio
      Video Bridging (AVB) Systems\", IEEE\n              Standard 802.1BA.\n   [ISO-80000-5]\n
      \             ISO, \"Quantities and units - Part 5: Thermodynamics\",\n              ISO
      80000-5, Edition 1.0, May 2007.\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\",
      RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n   [RFC4122]
      \ Leach, P., Mealling, M., and R. Salz, \"A Universally\n              Unique
      IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI 10.17487/RFC4122,
      July 2005,\n              <https://www.rfc-editor.org/info/rfc4122>.\n   [RFC4151]
      \ Kindberg, T. and S. Hawke, \"The 'tag' URI Scheme\",\n              RFC 4151,
      DOI 10.17487/RFC4151, October 2005,\n              <https://www.rfc-editor.org/info/rfc4151>.\n
      \  [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,\n              \"Transmission
      of IPv6 Packets over IEEE 802.15.4\n              Networks\", RFC 4944, DOI
      10.17487/RFC4944, September 2007,\n              <https://www.rfc-editor.org/info/rfc4944>.\n
      \  [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n              Mail
      Extensions (S/MIME) Version 3.2 Message\n              Specification\", RFC
      5751, DOI 10.17487/RFC5751, January\n              2010, <https://www.rfc-editor.org/info/rfc5751>.\n
      \  [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address
      Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August
      2010,\n              <https://www.rfc-editor.org/info/rfc5952>.\n   [RFC6690]
      \ Shelby, Z., \"Constrained RESTful Environments (CoRE) Link\n              Format\",
      RFC 6690, DOI 10.17487/RFC6690, August 2012,\n              <https://www.rfc-editor.org/info/rfc6690>.\n
      \  [RFC6920]  Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B.,\n              Keranen,
      A., and P. Hallam-Baker, \"Naming Things with\n              Hashes\", RFC 6920,
      DOI 10.17487/RFC6920, April 2013,\n              <https://www.rfc-editor.org/info/rfc6920>.\n
      \  [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n              Morris,
      J., Hansen, M., and R. Smith, \"Privacy\n              Considerations for Internet
      Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July 2013,\n              <https://www.rfc-editor.org/info/rfc6973>.\n
      \  [RFC7111]  Hausenblas, M., Wilde, E., and J. Tennison, \"URI Fragment\n              Identifiers
      for the text/csv Media Type\", RFC 7111,\n              DOI 10.17487/RFC7111,
      January 2014,\n              <https://www.rfc-editor.org/info/rfc7111>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7721]
      \ Cooper, A., Gont, F., and D. Thaler, \"Security and Privacy\n              Considerations
      for IPv6 Address Generation Mechanisms\",\n              RFC 7721, DOI 10.17487/RFC7721,
      March 2016,\n              <https://www.rfc-editor.org/info/rfc7721>.\n   [RFC8141]
      \ Saint-Andre, P. and J. Klensin, \"Uniform Resource Names\n              (URNs)\",
      RFC 8141, DOI 10.17487/RFC8141, April 2017,\n              <https://www.rfc-editor.org/info/rfc8141>.\n
      \  [RID-CoRE]\n              Shelby, Z., Vial, M., Groves, C., Zhu, J., and
      B.\n              Silverajan, Ed., \"Reusable Interface Definitions for\n              Constrained
      RESTful Environments\", Work in Progress,\n              draft-ietf-core-interfaces-12,
      June 2018.\n   [UCUM]     Schadow, G. and C. McDonald, \"The Unified Code for
      Units\n              of Measure\", Version 2.1, Regenstrief Institute and\n
      \             the UCUM Organization, November 2017,\n              <http://unitsofmeasure.org/ucum.html>.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Acknowledgements\n   We would like to thank Alexander Pelov, Alexey Melnikov,
    Andrew\n   McClure, Andrew McGregor, Bjoern Hoehrmann, Christian Amsuess,\n   Christian
    Groves, Daniel Peintner, Jan-Piet Mens, Jim Schaad, Joe\n   Hildebrand, John Klensin,
    Karl Palsson, Lennart Duhrsen, Lisa\n   Dusseault, Lyndsay Campbell, Martin Thomson,
    Michael Koster, Peter\n   Saint-Andre, Roni Even, and Stephen Farrell, for their
    review\n   comments.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Cullen Jennings\n   Cisco\n   400 3rd Avenue SW\n   Calgary,
    AB  T2P 4H2\n   Canada\n   Email: fluffy@iii.ca\n   Zach Shelby\n   ARM\n   150
    Rose Orchard\n   San Jose  95134\n   United States of America\n   Phone: +1-408-203-9434\n
    \  Email: zach.shelby@arm.com\n   Jari Arkko\n   Ericsson\n   Jorvas  02420\n
    \  Finland\n   Email: jari.arkko@piuha.net\n   Ari Keranen\n   Ericsson\n   Jorvas
    \ 02420\n   Finland\n   Email: ari.keranen@ericsson.com\n   Carsten Bormann\n
    \  Universitaet Bremen TZI\n   Postfach 330440\n   Bremen  D-28359\n   Germany\n
    \  Phone: +49-421-218-63921\n   Email: cabo@tzi.org\n"
  title: Authors' Addresses
