- title: __initial_text__
  contents:
  - ''
- title: Shared Bottleneck Detection for Coupled Congestion Control for RTP Media
  contents:
  - 'Shared Bottleneck Detection for Coupled Congestion Control for RTP Media

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism to detect whether end-to-end\
    \ data\n   flows share a common bottleneck.  This mechanism relies on summary\n\
    \   statistics that are calculated based on continuous measurements and\n   used\
    \ as input to a grouping algorithm that runs wherever the\n   knowledge is needed.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8382.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. The Basic Mechanism ........................................4\n  \
    \    1.2. The Signals ................................................4\n    \
    \       1.2.1. Packet Loss .........................................4\n      \
    \     1.2.2. Packet Delay ........................................5\n        \
    \   1.2.3. Path Lag ............................................5\n   2. Definitions\
    \ .....................................................6\n      2.1. Parameters\
    \ and Their Effects ...............................7\n      2.2. Recommended Parameter\
    \ Values ...............................8\n   3. Mechanism .......................................................9\n\
    \      3.1. SBD Feedback Requirements .................................10\n  \
    \         3.1.1. Feedback When All the Logic Is Placed at\n                  the\
    \ Sender .........................................10\n           3.1.2. Feedback\
    \ When the Statistics Are Calculated at the\n                  Receiver and SBD\
    \ Is Performed at the Sender ........11\n           3.1.3. Feedback When Bottlenecks\
    \ Can Be Determined\n                  at Both Senders and Receivers ......................11\n\
    \      3.2. Key Metrics and Their Calculation .........................12\n  \
    \         3.2.1. Mean Delay .........................................12\n    \
    \       3.2.2. Skewness Estimate ..................................12\n      \
    \     3.2.3. Variability Estimate ...............................13\n        \
    \   3.2.4. Oscillation Estimate ...............................13\n          \
    \ 3.2.5. Packet Loss ........................................14\n      3.3. Flow\
    \ Grouping .............................................14\n           3.3.1.\
    \ Flow-Grouping Algorithm ............................14\n           3.3.2. Using\
    \ the Flow Group Signal ........................18\n   4. Enhancements to the\
    \ Basic SBD Algorithm ........................18\n      4.1. Reducing Lag and\
    \ Improving Responsiveness .................18\n           4.1.1. Improving the\
    \ Response of the Skewness Estimate ....19\n           4.1.2. Improving the Response\
    \ of the Variability\n                  Estimate ...........................................20\n\
    \      4.2. Removing Oscillation Noise ................................21\n  \
    \ 5. Measuring OWD ..................................................21\n    \
    \  5.1. Timestamp Resolution ......................................21\n      5.2.\
    \ Clock Skew ................................................22\n   6. Expected\
    \ Feedback from Experiments .............................22\n   7. IANA Considerations\
    \ ............................................22\n   8. Security Considerations\
    \ ........................................22\n   9. References .....................................................23\n\
    \      9.1. Normative References ......................................23\n  \
    \    9.2. Informative References ....................................23\n   Acknowledgments\
    \ ...................................................25\n   Authors' Addresses\
    \ ................................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the Internet, it is not normally known whether flows\
    \ (e.g., TCP\n   connections or UDP data streams) traverse the same bottlenecks.\
    \  Even\n   flows that have the same sender and receiver may take different paths\n\
    \   and may or may not share a bottleneck.  Flows that share a bottleneck\n  \
    \ link usually compete with one another for their share of the\n   capacity. \
    \ This competition has the potential to increase packet loss\n   and delays. \
    \ This is especially relevant for interactive applications\n   that communicate\
    \ simultaneously with multiple peers (such as\n   multi-party video).  For RTP\
    \ media applications such as RTCWEB,\n   [RTP-COUPLED-CC] describes a scheme that\
    \ combines the congestion\n   controllers of flows in order to honor their priorities\
    \ and avoid\n   unnecessary packet loss as well as delay.  This mechanism relies\
    \ on\n   some form of Shared Bottleneck Detection (SBD); here, a measurement-\n\
    \   based SBD approach is described.\n"
- title: 1.1.  The Basic Mechanism
  contents:
  - "1.1.  The Basic Mechanism\n   The mechanism groups flows that have similar statistical\n\
    \   characteristics together.  Section 3.3.1 describes a simple method\n   for\
    \ achieving this; however, a major part of this document is\n   concerned with\
    \ collecting suitable statistics for this purpose.\n"
- title: 1.2.  The Signals
  contents:
  - "1.2.  The Signals\n   The current Internet is unable to explicitly inform endpoints\
    \ as to\n   which flows share bottlenecks, so endpoints need to infer this from\n\
    \   whatever information is available to them.  The mechanism described\n   here\
    \ currently utilizes packet loss and packet delay but is not\n   restricted to\
    \ these.  As Explicit Congestion Notification (ECN)\n   becomes more prevalent,\
    \ it too will become a valuable base signal\n   that can be correlated to detect\
    \ shared bottlenecks.\n"
- title: 1.2.1.  Packet Loss
  contents:
  - "1.2.1.  Packet Loss\n   Packet loss is often a relatively infrequent indication\
    \ that a flow\n   traverses a bottleneck.  Therefore, on its own it is of limited\
    \ use\n   for SBD; however, it is a valuable supplementary measure when it is\n\
    \   more prevalent (refer to [RFC7680], Section 2.5 for measuring packet\n   loss).\n"
- title: 1.2.2.  Packet Delay
  contents:
  - "1.2.2.  Packet Delay\n   End-to-end delay measurements include noise from every\
    \ device along\n   the path, in addition to the delay perturbation at the bottleneck\n\
    \   device.  The noise is often significantly increased if the round-trip\n  \
    \ time is used.  The cleanest signal is obtained by using One-Way Delay\n   (OWD)\
    \ (refer to [RFC7679], Section 3 for a definition of OWD).\n   Measuring absolute\
    \ OWD is difficult, since it requires both the\n   sender and receiver clocks\
    \ to be synchronized.  However, since the\n   statistics being collected are relative\
    \ to the mean OWD, a relative\n   OWD measurement is sufficient.  Clock skew is\
    \ not usually significant\n   over the time intervals used by this SBD mechanism\
    \ (see [RFC6817],\n   Appendix A.2 for a discussion on clock skew and OWD measurements).\n\
    \   However, in circumstances where it is significant, Section 5.2\n   outlines\
    \ a way of adjusting the calculations to cater to it.\n   Each packet arriving\
    \ at the bottleneck buffer may experience very\n   different queue lengths and,\
    \ therefore, different waiting times.  A\n   single OWD sample does not, therefore,\
    \ characterize the path well.\n   However, multiple OWD measurements do reflect\
    \ the distribution of\n   delays experienced at the bottleneck.\n"
- title: 1.2.3.  Path Lag
  contents:
  - "1.2.3.  Path Lag\n   Flows that share a common bottleneck may traverse different\
    \ paths,\n   and these paths will often have different base delays.  This makes\
    \ it\n   difficult to correlate changes in delay or loss.  This technique uses\n\
    \   the long-term shape of the delay distribution as a base for\n   comparison\
    \ to counter this.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n   Acronyms used in this document:\n      OWD -\
    \ One-Way Delay\n      MAD - Mean Absolute Deviation\n      SBD - Shared Bottleneck\
    \ Detection\n   Conventions used in this document:\n      T            the base\
    \ time interval over which measurements\n                   are made\n      N\
    \            the number of base time, T, intervals used in some\n            \
    \       calculations\n      M            the number of base time, T, intervals\
    \ used in some\n                   calculations, where M <= N\n      sum(...)\
    \     summation of terms of the variable in parentheses\n      sum_T(...)   summation\
    \ of all the measurements of the variable in\n                   parentheses taken\
    \ over the interval T\n      sum_NT(...)  summation of all measurements taken\
    \ over the\n                   interval N*T\n      sum_MT(...)  summation of all\
    \ measurements taken over the\n                   interval M*T\n      E_T(...)\
    \     the expectation or mean of the measurements of the\n                   variable\
    \ in parentheses over T\n      E_N(...)     the expectation or mean of the last\
    \ N values of the\n                   variable in parentheses\n      E_M(...)\
    \     the expectation or mean of the last M values of the\n                  \
    \ variable in parentheses\n      num_T(...)   the count of measurements of the\
    \ variable in\n                   parentheses taken in the interval T\n      num_MT(...)\
    \  the count of measurements of the variable in\n                   parentheses\
    \ taken in the interval M*T\n      PB           a boolean variable indicating\
    \ that the particular\n                   flow was identified transiting a bottleneck\
    \ in the\n                   previous interval T (i.e., \"Previously Bottleneck\"\
    )\n      skew_est     a measure of skewness in an OWD distribution\n      skew_base_T\
    \  a variable used as an intermediate step in\n                   calculating\
    \ skew_est\n      var_est      a measure of variability in OWD measurements\n\
    \      var_base_T   a variable used as an intermediate step in\n             \
    \      calculating var_est\n      freq_est     a measure of low-frequency oscillation\
    \ in the OWD\n                   measurements\n      pkt_loss     a measure of\
    \ the proportion of packets lost\n      p_l, p_f, p_mad, c_s, c_h, p_s, p_d, p_v\n\
    \                   various thresholds used in the mechanism\n      M and F  \
    \    number of values related to N\n"
- title: 2.1.  Parameters and Their Effects
  contents:
  - "2.1.  Parameters and Their Effects\n   T         T should be long enough so that\
    \ there are enough packets\n             received during T for a useful estimate\
    \ of the short-term\n             mean OWD and variation statistics.  Making T\
    \ too large can\n             limit the efficacy of freq_est.  It will also increase\
    \ the\n             response time of the mechanism.  Making T too small will\n\
    \             make the metrics noisier.\n   N and M   N should be large enough\
    \ to provide a stable estimate of\n             oscillations in OWD.  Often, M=N\
    \ is just fine, though\n             having M<N may be beneficial in certain circumstances.\
    \  M*T\n             needs to be long enough to provide stable estimates of\n\
    \             skewness and MAD.\n   F         F determines the number of intervals\
    \ over which statistics\n             are considered to be equally weighted. \
    \ When F=M, recent\n             and older measurements are considered equal.\
    \  Making F<M\n             can increase the responsiveness of the SBD mechanism.\
    \  If F\n             is too small, statistics will be too noisy.\n   c_s    \
    \   c_s is the threshold in skew_est used for determining\n             whether\
    \ a flow is transiting a bottleneck or not.  Lower\n             values of c_s\
    \ require bottlenecks to be more congested to\n             be considered for\
    \ grouping by the mechanism.  c_s should be\n             set within the range\
    \ of +0.2 to -0.1 -- low enough so that\n             lightly loaded paths do\
    \ not give a false indication.\n   p_l       p_l is the threshold in pkt_loss\
    \ used for determining\n             whether a flow is transiting a bottleneck\
    \ or not.  When\n             pkt_loss is high, it becomes a better indicator\
    \ of\n             congestion than skew_est.\n   c_h       c_h adds hysteresis\
    \ to the bottleneck determination.  It\n             should be large enough to\
    \ avoid constant switching in the\n             determination but low enough to\
    \ ensure that grouping is not\n             attempted when there is no bottleneck\
    \ and the delay and\n             loss signals cannot be relied upon.\n   p_v\
    \       p_v determines the sensitivity of freq_est to noise.\n             Making\
    \ it smaller will yield higher but noisier values for\n             freq_est.\
    \  Making it too large will render it ineffective\n             for determining\
    \ groups.\n   p_*       Flows are separated when the\n             skew_est|var_est|freq_est|pkt_loss\
    \ measure is greater than\n             p_s|p_mad|p_f|p_d.  Adjusting these is\
    \ a compromise between\n             false grouping of flows that do not share\
    \ a bottleneck and\n             false splitting of flows that do.  Making them\
    \ larger can\n             help if the measures are very noisy, but reducing the\
    \ noise\n             in the statistical measures by adjusting T and N|M may be\
    \ a\n             better solution.\n"
- title: 2.2.  Recommended Parameter Values
  contents:
  - "2.2.  Recommended Parameter Values\n   [Hayes-LCN14] uses T=350ms and N=50. \
    \ The other parameters have been\n   tightened to reflect minor enhancements to\
    \ the algorithm outlined in\n   Section 4: c_s=0.1, p_f=p_d=0.1, p_s=0.15, p_mad=0.1,\
    \ p_v=0.7.  M=30,\n   F=20, and c_h=0.3 are additional parameters defined in that\
    \ document.\n   These are values that seem to work well over a wide range of\n\
    \   practical Internet conditions.\n"
- title: 3.  Mechanism
  contents:
  - "3.  Mechanism\n   The mechanism described in this document is based on the observation\n\
    \   that when flows traverse a common bottleneck, each flow's\n   distribution\
    \ of packet delay measurements has similar shape\n   characteristics.  These shape\
    \ characteristics are described using\n   three key summary statistics --\n  \
    \ 1.  variability estimate (var_est; see Section 3.2.3)\n   2.  skewness estimate\
    \ (skew_est; see Section 3.2.2)\n   3.  oscillation estimate (freq_est; see Section\
    \ 3.2.4)\n   -- with packet loss (pkt_loss; see Section 3.2.5) used as a\n   supplementary\
    \ statistic.\n   Summary statistics help to address both the noise and the path\
    \ lag\n   problems by describing the general shape over a relatively long\n  \
    \ period of time.  Each summary statistic portrays a \"view\" of the\n   bottleneck\
    \ link characteristics, and when used together, they provide\n   a robust discrimination\
    \ for grouping flows.  An RTP media device may\n   be both a sender and a receiver.\
    \  SBD can be performed at either a\n   sender or a receiver, or both.\n   In\
    \ Figure 1, there are two possible locations for shared bottleneck\n   detection:\
    \ the sender side and the receiver side.\n                                  +----+\n\
    \                                  | H2 |\n                                  +----+\n\
    \                                     |\n                                    \
    \ | L2\n                                     |\n                         +----+\
    \  L1  |  L3  +----+\n                         | H1 |------|------| H3 |\n   \
    \                      +----+             +----+\n   A network with three hosts\
    \ (H1, H2, H3) and three links (L1, L2, L3)\n                                \
    \ Figure 1\n   1.  Sender side: Consider a situation where host H1 sends media\n\
    \       streams to hosts H2 and H3, and L1 is a shared bottleneck.  H2\n     \
    \  and H3 measure the OWD and packet loss and periodically send\n       either\
    \ this raw data or the calculated summary statistics to H1\n       every T.  H1,\
    \ having this knowledge, can determine the shared\n       bottleneck and accordingly\
    \ control the send rates.\n   2.  Receiver side: Consider that H2 is also sending\
    \ media to H3, and\n       L3 is a shared bottleneck.  If H3 sends summary statistics\
    \ to H1\n       and H2, neither H1 nor H2 alone obtains enough knowledge to\n\
    \       detect this shared bottleneck; H3 can, however, determine it by\n    \
    \   combining the summary statistics related to H1 and H2,\n       respectively.\n"
- title: 3.1.  SBD Feedback Requirements
  contents:
  - "3.1.  SBD Feedback Requirements\n   There are three possible scenarios, each\
    \ with different feedback\n   requirements:\n   1.  Both summary statistic calculations\
    \ and SBD are performed at\n       senders only.  When sender-based congestion\
    \ control is\n       implemented, this method is RECOMMENDED.\n   2.  Summary\
    \ statistics are calculated on the receivers, and SBD is\n       performed at\
    \ the senders.\n   3.  Summary statistic calculations are performed on receivers,\
    \ and\n       SBD is performed at both senders and receivers (beyond the scope\n\
    \       of this document, but allows cooperative detection of\n       bottlenecks).\n\
    \   All three possibilities are discussed for completeness in this\n   document;\
    \ however, it is expected that feedback will take the form of\n   scenario 1 and\
    \ operate in conjunction with sender-based congestion\n   control mechanisms.\n"
- title: 3.1.1.  Feedback When All the Logic Is Placed at the Sender
  contents:
  - "3.1.1.  Feedback When All the Logic Is Placed at the Sender\n   Having the sender\
    \ calculate the summary statistics and determine the\n   shared bottlenecks based\
    \ on them has the advantage of placing most of\n   the functionality in one place\
    \ -- the sender.\n   For every packet, the sender requires accurate relative OWD\n\
    \   measurements of adequate precision, along with an indication of lost\n   packets\
    \ (or the proportion of packets lost over an interval).  A\n   method to provide\
    \ such measurement data with the RTP Control Protocol\n   (RTCP) is described\
    \ in [RTCP-CC-FEEDBACK].\n   Sums, var_base_T, and skew_base_T are calculated\
    \ incrementally as\n   relative OWD measurements are determined from the feedback\
    \ messages.\n   When the mechanism has received sufficient measurements to cover\
    \ the\n   base time interval T for all flows, the summary statistics (see\n  \
    \ Section 3.2) are calculated for that T interval and flows are grouped\n   (see\
    \ Section 3.3.1).  The exact timing of these calculations will\n   depend on the\
    \ frequency of the feedback message.\n"
- title: 3.1.2.  Feedback When the Statistics Are Calculated at the Receiver and
  contents:
  - "3.1.2.  Feedback When the Statistics Are Calculated at the Receiver and\n   \
    \     SBD Is Performed at the Sender\n   This scenario minimizes feedback but\
    \ requires receivers to send\n   selected summary statistics at an agreed-upon\
    \ regular interval.  We\n   envisage the following exchange of information to\
    \ initialize the\n   system:\n   o  An initialization message from the sender\
    \ to the receiver will\n      contain the following information:\n      *  A list\
    \ of which key metrics should be collected and relayed\n         back to the sender\
    \ out of a possibly extensible set (pkt_loss,\n         var_est, skew_est, and\
    \ freq_est).  The grouping algorithm\n         described in this document requires\
    \ all four of these metrics,\n         and receivers MUST be able to provide them,\
    \ but future\n         algorithms may be able to exploit other metrics (e.g.,\
    \ metrics\n         based on explicit network signals).\n      *  The values of\
    \ T, N, and M, and the necessary resolution and\n         precision of the relayed\
    \ statistics.\n   o  A response message from the receiver acknowledges this message\n\
    \      with a list of key metrics it supports (subset of the sender's\n      list)\
    \ and is able to relay back to the sender.\n   This initialization exchange may\
    \ be repeated to finalize the set of\n   metrics that will be used.  All agreed-upon\
    \ metrics need to be\n   supported by all receivers.  It is also recommended that\
    \ an\n   identifier for the SBD algorithm version be included in the\n   initialization\
    \ message from the sender, so that potential advances in\n   SBD technology can\
    \ be easily deployed.  For reference, the mechanism\n   outlined in this document\
    \ has the identifier \"SBD=01\".\n   After initialization, the agreed-upon summary\
    \ statistics are fed back\n   to the sender (nominally every T).\n"
- title: 3.1.3.  Feedback When Bottlenecks Can Be Determined at Both Senders and
  contents:
  - "3.1.3.  Feedback When Bottlenecks Can Be Determined at Both Senders and\n   \
    \     Receivers\n   This type of mechanism is currently beyond the scope of the\
    \ SBD\n   algorithm described in this document.  It is mentioned here to ensure\n\
    \   that sender/receiver cooperative shared bottleneck determination\n   mechanisms\
    \ that are more advanced remain possible in the future.\n   It is envisaged that\
    \ such a mechanism would be initialized in a\n   manner similar to that described\
    \ in Section 3.1.2.\n   After initialization, both summary statistics and shared\
    \ bottleneck\n   determinations should be exchanged, nominally every T.\n"
- title: 3.2.  Key Metrics and Their Calculation
  contents:
  - "3.2.  Key Metrics and Their Calculation\n   Measurements are calculated over\
    \ a base interval (T) and summarized\n   over N or M such intervals.  All summary\
    \ statistics can be calculated\n   incrementally.\n"
- title: 3.2.1.  Mean Delay
  contents:
  - "3.2.1.  Mean Delay\n   The mean delay is not a useful signal for comparisons\
    \ between flows,\n   since flows may traverse quite different paths and clocks\
    \ will not\n   necessarily be synchronized.  However, it is a base measure for\
    \ the\n   three summary statistics.  The mean delay, E_T(OWD), is the average\n\
    \   OWD measured over T.\n   To facilitate the other calculations, the last N\
    \ E_T(OWD) values will\n   need to be stored in a cyclic buffer along with the\
    \ moving average of\n   E_T(OWD):\n      mean_delay = E_M(E_T(OWD)) = sum_M(E_T(OWD))\
    \ / M\n   where M <= N.  Setting M to be less than N allows the mechanism to be\n\
    \   more responsive to changes, but potentially at the expense of a\n   higher\
    \ error rate (see Section 4.1 for a discussion on improving the\n   responsiveness\
    \ of the mechanism).\n"
- title: 3.2.2.  Skewness Estimate
  contents:
  - "3.2.2.  Skewness Estimate\n   Skewness is difficult to calculate efficiently\
    \ and accurately.\n   Ideally, it should be calculated over the entire period\
    \ (M*T) from\n   the mean OWD over that period.  However, this would require storing\n\
    \   every delay measurement over the period.  Instead, an estimate is\n   made\
    \ over M*T based on a calculation every T using the previous T's\n   calculation\
    \ of mean_delay.\n   The base for the skewness calculation is estimated using\
    \ a counter\n   initialized every T.  It increments for OWD samples below the\
    \ mean\n   and decrements for OWD above the mean.  So, for each OWD sample:\n\
    \      if (OWD < mean_delay) skew_base_T++\n      if (OWD > mean_delay) skew_base_T--\n\
    \   mean_delay does not include the mean of the current T interval to\n   enable\
    \ it to be calculated iteratively.\n   skew_est = sum_MT(skew_base_T) / num_MT(OWD)\n\
    \      where skew_est is a number between -1 and 1.\n   Note: Care must be taken\
    \ when implementing the comparisons to ensure\n   that rounding does not bias\
    \ skew_est.  It is important that the mean\n   is calculated with a higher precision\
    \ than the samples.\n"
- title: 3.2.3.  Variability Estimate
  contents:
  - "3.2.3.  Variability Estimate\n   Mean Absolute Deviation (MAD) is a robust variability\
    \ measure that\n   copes well with different send rates.  It can be implemented\
    \ in an\n   online manner as follows:\n      var_base_T = sum_T(|OWD - E_T(OWD)|)\n\
    \         where\n            |x| is the absolute value of x\n            E_T(OWD)\
    \ is the mean OWD calculated in the previous T\n      var_est = MAD_MT = sum_MT(var_base_T)\
    \ / num_MT(OWD)\n"
- title: 3.2.4.  Oscillation Estimate
  contents:
  - "3.2.4.  Oscillation Estimate\n   An estimate of the low-frequency oscillation\
    \ of the delay signal is\n   calculated by counting and normalizing the significant\
    \ mean,\n   E_T(OWD), crossings of mean_delay:\n      freq_est = number_of_crossings\
    \ / N\n         where we define a significant mean crossing as a crossing that\n\
    \         extends p_v * var_est from mean_delay.  In our experiments, we\n   \
    \      have found that p_v = 0.7 is a good value.\n   freq_est is a number between\
    \ 0 and 1.  freq_est can be approximated\n   incrementally as follows:\n   o \
    \ With each new calculation of E_T(OWD), a decision is made as to\n      whether\
    \ this value of E_T(OWD) significantly crosses the current\n      long-term mean,\
    \ mean_delay, with respect to the previous\n      significant mean crossing.\n\
    \   o  A cyclic buffer, last_N_crossings, records a 1 if there is a\n      significant\
    \ mean crossing; otherwise, it records a 0.\n   o  The counter, number_of_crossings,\
    \ is incremented when there is a\n      significant mean crossing and decremented\
    \ when a non-zero value is\n      removed from the last_N_crossings.\n   This\
    \ approximation of freq_est was not used in [Hayes-LCN14], which\n   calculated\
    \ freq_est every T using the current E_N(E_T(OWD)).  Our\n   tests show that this\
    \ approximation of freq_est yields results that\n   are almost identical to when\
    \ the full calculation is performed\n   every T.\n"
- title: 3.2.5.  Packet Loss
  contents:
  - "3.2.5.  Packet Loss\n   The proportion of packets lost over the period NT is\
    \ used as a\n   supplementary measure:\n      pkt_loss = sum_NT(lost packets)\
    \ / sum_NT(total packets)\n   Note: When pkt_loss is low, it is very variable;\
    \ however, when\n   pkt_loss is high, it becomes a stable measure for making grouping\n\
    \   decisions.\n"
- title: 3.3.  Flow Grouping
  contents:
  - '3.3.  Flow Grouping

    '
- title: 3.3.1.  Flow-Grouping Algorithm
  contents:
  - "3.3.1.  Flow-Grouping Algorithm\n   The following grouping algorithm is RECOMMENDED\
    \ for the use of SBD\n   with coupled congestion control for RTP media [RTP-COUPLED-CC]\
    \ and is\n   sufficient and efficient for small to moderate numbers of flows.\
    \  For\n   very large numbers of flows (e.g., hundreds), a more complex\n   clustering\
    \ algorithm may be substituted.\n   Since no single metric is precise enough to\
    \ group flows (due to\n   noise), the algorithm uses multiple metrics.  Each metric\
    \ offers a\n   different \"view\" of the bottleneck link characteristics, and\
    \ used\n   together they enable a more precise grouping of flows than would\n\
    \   otherwise be possible.\n   Flows determined to be transiting a bottleneck\
    \ are successively\n   divided into groups based on freq_est, var_est, skew_est,\
    \ and\n   pkt_loss.\n   The first step is to determine which flows are transiting\
    \ a\n   bottleneck.  This is important, since if a flow is not transiting a\n\
    \   bottleneck its delay-based metrics will not describe the bottleneck\n   but\
    \ will instead describe the \"noise\" from the rest of the path.\n   Skewness,\
    \ with the proportion of packet loss as a supplementary\n   measure, is used to\
    \ do this:\n   1.  Grouping will be performed on flows that are inferred to be\n\
    \       traversing a bottleneck by:\n          skew_est < c_s\n             ||\
    \ ( skew_est < c_h & PB ) || pkt_loss > p_l\n       The parameter c_s controls\
    \ how sensitive the mechanism is in\n       detecting a bottleneck.  c_s = 0.0\
    \ was used in [Hayes-LCN14].  A\n       value of c_s = 0.1 is a little more sensitive,\
    \ and c_s = -0.1 is\n       a little less sensitive.  c_h controls the hysteresis\
    \ on flows\n       that were grouped as transiting a bottleneck the previous time.\n\
    \       If the test result is TRUE, PB=TRUE; otherwise, PB=FALSE.\n   These flows\
    \ (i.e., flows transiting a bottleneck) are then\n   progressively divided into\
    \ groups based on the freq_est, var_est, and\n   skew_est summary statistics.\
    \  The process proceeds according to the\n   following steps:\n   2.  Group flows\
    \ whose difference in sorted freq_est is less than a\n       threshold:\n    \
    \      diff(freq_est) < p_f\n   3.  Subdivide the groups obtained in step 2 by\
    \ grouping flows whose\n       difference in sorted E_M(var_est) (highest to lowest)\
    \ is less\n       than a threshold:\n          diff(var_est) < (p_mad * var_est)\n\
    \       The threshold, (p_mad * var_est), is with respect to the highest\n   \
    \    value in the difference.\n   4.  Subdivide the groups obtained in step 3\
    \ by grouping flows whose\n       difference in sorted skew_est is less than a\
    \ threshold:\n          diff(skew_est) < p_s\n   5.  When packet loss is high\
    \ enough to be reliable (pkt_loss > p_l),\n       subdivide the groups obtained\
    \ in step 4 by grouping flows whose\n       difference is less than a threshold:\n\
    \          diff(pkt_loss) < (p_d * pkt_loss)\n       The threshold, (p_d * pkt_loss),\
    \ is with respect to the highest\n       value in the difference.\n   This procedure\
    \ involves sorting estimates from highest to lowest.  It\n   is simple to implement\
    \ and is efficient for small numbers of flows\n   (up to 10-20).  Figure 2 illustrates\
    \ this algorithm.\n                                        *********\n       \
    \                                 * Flows *\n                                \
    \        ***.**.**\n                                          /    '\n       \
    \                                  /     '--.\n                              \
    \          /          \\\n                                   .---v--.    .----v---.\n\
    \   1. Flows traversing             | Cong |    | UnCong |\n      a bottleneck\
    \                 '-.--.-'    '--------'\n                                   \
    \ /    \\\n                                   /      \\\n                    \
    \              /        \\\n                              .--v--.       v-----.\n\
    \   2. Divide by               | g_1 |  ...  | g_n |\n      freq_est         \
    \       '---.-.       '----..\n                                 /   \\       \
    \   /  \\\n                                /     '--.     v    '------.\n    \
    \                           /          \\                 \\\n               \
    \          .----v-.        .-v----.        .---v--.\n   3. Divide by         \
    \ | g_1a |  ...   | g_1z |   ...  | g_nz |\n      var_est            '---.-.'\
    \        '-----..        '-.-.--'\n                            /   \\        \
    \     /  \\        /  |\n                           /     '-----.     v    v \
    \     v   |\n                          /             \\                    |\n\
    \                       .-v-----.       .-v-----.         .---v---.\n   4. Divide\
    \ by        | g_1ai |  ...  | g_1ax |   ...   | g_nzx |\n      skew_est      \
    \   '----.-.'       '------..         '-.-.---'\n                           /\
    \   \\             /  \\         /  |\n                          /     '--.  \
    \      v    v       v   |\n                         /          \\            \
    \            |\n                  .-----v--.       .-v------.           .----v---.\n\
    \   5. Divide by   | g_1aiA |  ...  | g_1aiZ |    ...    | g_nzxZ |\n      pkt_loss\
    \    '--------'       '--------'           '--------'\n      (when applicable)\n\
    \                         Simple grouping algorithm\n                        \
    \         Figure 2\n"
- title: 3.3.2.  Using the Flow Group Signal
  contents:
  - "3.3.2.  Using the Flow Group Signal\n   Grouping decisions can be made every\
    \ T from the second T; however,\n   they will not attain their full design accuracy\
    \ until after the\n   2*Nth T interval.  We recommend that grouping decisions\
    \ not be made\n   until 2*M T intervals.\n   Network conditions, and even the\
    \ congestion controllers, can cause\n   bottlenecks to fluctuate.  A coupled congestion\
    \ controller MAY decide\n   only to couple groups that remain stable, say grouped\
    \ together 90% of\n   the time, depending on its objectives.  Recommendations\
    \ concerning\n   this are beyond the scope of this document and will be specific\
    \ to\n   the coupled congestion controller's objectives.\n"
- title: 4.  Enhancements to the Basic SBD Algorithm
  contents:
  - "4.  Enhancements to the Basic SBD Algorithm\n   The SBD algorithm as specified\
    \ in Section 3 was found to work well\n   for a broad variety of conditions. \
    \ The following enhancements to the\n   basic mechanisms have been found to significantly\
    \ improve the\n   algorithm's performance under some circumstances and SHOULD\
    \ be\n   implemented.  These \"tweaks\" are described separately to keep the\n\
    \   main description succinct.\n"
- title: 4.1.  Reducing Lag and Improving Responsiveness
  contents:
  - "4.1.  Reducing Lag and Improving Responsiveness\n   This section describes how\
    \ to improve the responsiveness of the basic\n   algorithm.\n   Measurement-based\
    \ shared bottleneck detection makes decisions in the\n   present based on what\
    \ has been measured in the past.  This means that\n   there is always a lag in\
    \ responding to changing conditions.  This\n   mechanism is based on summary statistics\
    \ taken over (N*T) seconds.\n   This mechanism can be made more responsive to\
    \ changing conditions by:\n   1.  Reducing N and/or M, but at the expense of having\
    \ metrics that\n       are less accurate, and/or\n   2.  Exploiting the fact that\
    \ measurements that are more recent are\n       more valuable than older measurements\
    \ and weighting them\n       accordingly.\n   Although measurements that are more\
    \ recent are more valuable, older\n   measurements are still needed to gain an\
    \ accurate estimate of the\n   distribution descriptor we are measuring.  Unfortunately,\
    \ the simple\n   exponentially weighted moving average weights drop off too quickly\n\
    \   for our requirements and have an infinite tail.  A simple linearly\n   declining\
    \ weighted moving average also does not provide enough weight\n   to the measurements\
    \ that are most recent.  We propose a piecewise\n   linear distribution of weights,\
    \ such that the first section (samples\n   1:F) is flat as in a simple moving\
    \ average, and the second section\n   (samples F+1:M) is linearly declining weights\
    \ to the end of the\n   averaging window.  We choose integer weights; this allows\
    \ incremental\n   calculation without introducing rounding errors.\n"
- title: 4.1.1.  Improving the Response of the Skewness Estimate
  contents:
  - "4.1.1.  Improving the Response of the Skewness Estimate\n   The weighted moving\
    \ average for skew_est, based on skew_est as\n   defined in Section 3.2.2, can\
    \ be calculated as follows:\n      skew_est = ((M-F+1)*sum(skew_base_T(1:F))\n\
    \                      + sum([(M-F):1].*skew_base_T(F+1:M)))\n               \
    \  / ((M-F+1)*sum(numsampT(1:F))\n                      + sum([(M-F):1].*numsampT(F+1:M)))\n\
    \   where numsampT is an array of the number of OWD samples in each T\n   (i.e.,\
    \ num_T(OWD)), and numsampT(1) is the most recent;\n   skew_base_T(1) is the most\
    \ recent calculation of skew_base_T; 1:F\n   refers to the integer values 1 through\
    \ to F, and [(M-F):1] refers to\n   an array of the integer values (M-F) declining\
    \ through to 1; and \".*\"\n   is the array scalar dot product operator.\n   To\
    \ calculate this weighted skew_est incrementally:\n   Notation:    F_ = flat portion,\
    \ D_ = declining portion,\n                W_ = weighted component\n   Initialize:\
    \  sum_skewbase = 0, F_skewbase = 0, W_D_skewbase = 0\n                skewbase_hist\
    \ = buffer of length M, initialized to 0\n                numsampT = buffer of\
    \ length M, initialized to 0\n   Steps per iteration:\n   1.   old_skewbase =\
    \ skewbase_hist(M)\n   2.   old_numsampT = numsampT(M)\n   3.   cycle(skewbase_hist)\n\
    \   4.   cycle(numsampT)\n   5.   numsampT(1) = num_T(OWD)\n   6.   skewbase_hist(1)\
    \ = skew_base_T\n   7.   F_skewbase = F_skewbase + skew_base_T - skewbase_hist(F+1)\n\
    \   8.   W_D_skewbase = W_D_skewbase + (M-F)*skewbase_hist(F+1)\n          - sum_skewbase\n\
    \   9.   W_D_numsamp = W_D_numsamp + (M-F)*numsampT(F+1) - sum_numsamp\n     \
    \     + F_numsamp\n   10.  F_numsamp = F_numsamp + numsampT(1) - numsampT(F+1)\n\
    \   11.  sum_skewbase = sum_skewbase + skewbase_hist(F+1) - old_skewbase\n   12.\
    \  sum_numsamp = sum_numsamp + numsampT(1) - old_numsampT\n   13.  skew_est =\
    \ ((M-F+1)*F_skewbase + W_D_skewbase) /\n          ((M-F+1)*F_numsamp+W_D_numsamp)\n\
    \   where cycle(...) refers to the operation on a cyclic buffer where the\n  \
    \ start of the buffer is now the next element in the buffer.\n"
- title: 4.1.2.  Improving the Response of the Variability Estimate
  contents:
  - "4.1.2.  Improving the Response of the Variability Estimate\n   Similarly, the\
    \ weighted moving average for var_est can be calculated\n   as follows:\n    \
    \  var_est = ((M-F+1)*sum(var_base_T(1:F))\n                     + sum([(M-F):1].*var_base_T(F+1:M)))\n\
    \                / ((M-F+1)*sum(numsampT(1:F))\n                     + sum([(M-F):1].*numsampT(F+1:M)))\n\
    \   where numsampT is an array of the number of OWD samples in each T\n   (i.e.,\
    \ num_T(OWD)), and numsampT(1) is the most recent;\n   skew_base_T(1) is the most\
    \ recent calculation of skew_base_T; 1:F\n   refers to the integer values 1 through\
    \ to F, and [(M-F):1] refers to\n   an array of the integer values (M-F) declining\
    \ through to 1; and \".*\"\n   is the array scalar dot product operator.  When\
    \ removing oscillation\n   noise (see Section 4.2), this calculation must be adjusted\
    \ to allow\n   for invalid var_base_T records.\n   var_est can be calculated incrementally\
    \ in the same way as skew_est\n   as shown in Section 4.1.1.  However, note that\
    \ the buffer numsampT is\n   used for both calculations, so the operations on\
    \ it should not be\n   repeated.\n"
- title: 4.2.  Removing Oscillation Noise
  contents:
  - "4.2.  Removing Oscillation Noise\n   When a path has no bottleneck, var_est will\
    \ be very small and the\n   recorded significant mean crossings will be the result\
    \ of path noise.\n   Thus, up to N-1 meaningless mean crossings can be a source\
    \ of error\n   at the point where a link becomes a bottleneck and flows traversing\n\
    \   it begin to be grouped.\n   To remove this source of noise from freq_est:\n\
    \   1.  Set the current var_base_T = NaN (a value representing an invalid\n  \
    \     record, i.e., Not a Number) for flows that are deemed to not be\n      \
    \ transiting a bottleneck by the first grouping test that is based\n       on\
    \ skew_est (see Section 3.3.1).\n   2.  Then, var_est = sum_MT(var_base_T != NaN)\
    \ / num_MT(OWD).\n   3.  For freq_est, only record a significant mean crossing\
    \ if a given\n       flow is deemed to be transiting a bottleneck.\n   These three\
    \ changes can help to remove the non-bottleneck noise from\n   freq_est.\n"
- title: 5.  Measuring OWD
  contents:
  - "5.  Measuring OWD\n   This section discusses the OWD measurements required for\
    \ this\n   algorithm to detect shared bottlenecks.\n   The SBD mechanism described\
    \ in this document relies on differences\n   between OWD measurements to avoid\
    \ the practical problems with\n   measuring absolute OWD (see [Hayes-LCN14], Section\
    \ III.C).  Since all\n   summary statistics are relative to the mean OWD and sender/receiver\n\
    \   clock offsets should be approximately constant over the measurement\n   periods,\
    \ the offset is subtracted out in the calculation.\n"
- title: 5.1.  Timestamp Resolution
  contents:
  - "5.1.  Timestamp Resolution\n   The SBD mechanism requires timing information\
    \ precise enough to be\n   able to make comparisons.  As a rule of thumb, the\
    \ time resolution\n   should be less than one hundredth of a typical path's range\
    \ of\n   delays.  In general, the coarser the time resolution, the more care\n\
    \   that needs to be taken to ensure that rounding errors do not bias the\n  \
    \ skewness calculation.  Frequent timing information in millisecond\n   resolution\
    \ as described by [RTCP-CC-FEEDBACK] should be sufficient\n   for the sender to\
    \ calculate relative OWD.\n"
- title: 5.2.  Clock Skew
  contents:
  - "5.2.  Clock Skew\n   Generally, sender and receiver clock skew will be too small\
    \ to cause\n   significant errors in the estimators.  skew_est and freq_est are\
    \ the\n   most sensitive to this type of noise due to their use of a mean OWD\n\
    \   calculated over a longer interval.  In circumstances where clock skew\n  \
    \ is high, basing skew_est only on the previous T's mean and ignoring\n   freq_est\
    \ provide a noisier but reliable signal.\n   A more sophisticated method is to\
    \ estimate the effect the clock skew\n   is having on the summary statistics and\
    \ then adjust statistics\n   accordingly.  There are a number of techniques in\
    \ the literature,\n   including [Zhang-Infocom02].\n"
- title: 6.  Expected Feedback from Experiments
  contents:
  - "6.  Expected Feedback from Experiments\n   The algorithm described in this memo\
    \ has so far been evaluated using\n   simulations and small-scale experiments.\
    \  Real network tests using\n   RTP Media Congestion Avoidance Techniques (RMCAT)\
    \ congestion control\n   algorithms will help confirm the default parameter choice.\
    \  For\n   example, the time interval T may need to be made longer if the packet\n\
    \   rate is very low.  Implementers and testers are invited to document\n   their\
    \ findings in an Internet-Draft.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security considerations of RFC 3550 [RFC3550],\
    \ RFC 4585\n   [RFC4585], and RFC 5124 [RFC5124] are expected to apply.\n   Non-authenticated\
    \ RTCP packets carrying OWD measurements, shared\n   bottleneck indications, and/or\
    \ summary statistics could allow\n   attackers to alter the bottleneck-sharing\
    \ characteristics for private\n   gain or disruption of other parties' communication.\
    \  When using SBD\n   for coupled congestion control as described in [RTP-COUPLED-CC],\
    \ the\n   security considerations of [RTP-COUPLED-CC] apply.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Hayes-LCN14]\n              Hayes, D., Ferlin,\
    \ S., and M. Welzl, \"Practical Passive\n              Shared Bottleneck Detection\
    \ using Shape Summary\n              Statistics\", Proc. IEEE Local Computer Networks\
    \ (LCN),\n              pp. 150-158, DOI 10.1109/LCN.2014.6925767, September 2014,\n\
    \              <http://heim.ifi.uio.no/davihay/\n              hayes14__pract_passiv_shared_bottl_detec-abstract.html>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n  \
    \            \"Extended RTP Profile for Real-time Transport Control\n        \
    \      Protocol (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585,\n              DOI\
    \ 10.17487/RFC4585, July 2006,\n              <https://www.rfc-editor.org/info/rfc4585>.\n\
    \   [RFC5124]  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n   \
    \           Real-time Transport Control Protocol (RTCP)-Based Feedback\n     \
    \         (RTP/SAVPF)\", RFC 5124, DOI 10.17487/RFC5124,\n              February\
    \ 2008, <https://www.rfc-editor.org/info/rfc5124>.\n   [RFC6817]  Shalunov, S.,\
    \ Hazel, G., Iyengar, J., and M. Kuehlewind,\n              \"Low Extra Delay\
    \ Background Transport (LEDBAT)\", RFC 6817,\n              DOI 10.17487/RFC6817,\
    \ December 2012,\n              <https://www.rfc-editor.org/info/rfc6817>.\n \
    \  [RFC7679]  Almes, G., Kalidindi, S., Zekauskas, M., and A. Morton,\n      \
    \        Ed., \"A One-Way Delay Metric for IP Performance Metrics\n          \
    \    (IPPM)\", STD 81, RFC 7679, DOI 10.17487/RFC7679,\n              January\
    \ 2016, <https://www.rfc-editor.org/info/rfc7679>.\n   [RFC7680]  Almes, G., Kalidindi,\
    \ S., Zekauskas, M., and A. Morton,\n              Ed., \"A One-Way Loss Metric\
    \ for IP Performance Metrics\n              (IPPM)\", STD 82, RFC 7680, DOI 10.17487/RFC7680,\n\
    \              January 2016, <https://www.rfc-editor.org/info/rfc7680>.\n   [RTCP-CC-FEEDBACK]\n\
    \              Sarker, Z., Perkins, C., Singh, V., and M. Ramalho,\n         \
    \     \"RTP Control Protocol (RTCP) Feedback for Congestion\n              Control\"\
    , Work in Progress, draft-ietf-avtcore-cc-\n              feedback-message-01,\
    \ March 2018.\n   [RTP-COUPLED-CC]\n              Islam, S., Welzl, M., and S.\
    \ Gjessing, \"Coupled congestion\n              control for RTP media\", Work\
    \ in Progress, draft-ietf-\n              rmcat-coupled-cc-07, September 2017.\n\
    \   [Zhang-Infocom02]\n              Zhang, L., Liu, Z., and H. Xia, \"Clock synchronization\n\
    \              algorithms for network measurements\", Proc. IEEE\n           \
    \   International Conference on Computer Communications\n              (INFOCOM),\
    \ pp. 160-169, DOI 10.1109/INFCOM.2002.1019257,\n              September 2002.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This work was partially funded by the European Community\
    \ under its\n   Seventh Framework Programme through the Reducing Internet Transport\n\
    \   Latency (RITE) project (ICT-317700).  The views expressed are solely\n   those\
    \ of the authors.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Hayes (editor)\n   Simula Research Laboratory\n\
    \   P.O. Box 134\n   Lysaker  1325\n   Norway\n   Email: davidh@simula.no\n  \
    \ Simone Ferlin\n   Simula Research Laboratory\n   P.O. Box 134\n   Lysaker  1325\n\
    \   Norway\n   Email: simone@ferlin.io\n   Michael Welzl\n   University of Oslo\n\
    \   P.O. Box 1080 Blindern\n   Oslo  N-0316\n   Norway\n   Email: michawe@ifi.uio.no\n\
    \   Kristian Hiorth\n   University of Oslo\n   P.O. Box 1080 Blindern\n   Oslo\
    \  N-0316\n   Norway\n   Email: kristahi@ifi.uio.no\n"
