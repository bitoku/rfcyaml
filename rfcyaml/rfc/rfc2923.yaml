- title: __initial_text__
  contents:
  - '                  TCP Problems with Path MTU Discovery

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo catalogs several known Transmission Control Protocol (TCP)\n\
    \   implementation problems dealing with Path Maximum Transmission Unit\n   Discovery\
    \ (PMTUD), including the long-standing black hole problem,\n   stretch acknowlegements\
    \ (ACKs) due to confusion between Maximum\n   Segment Size (MSS) and segment size,\
    \ and MSS advertisement based on\n   PMTU.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo catalogs several known TCP implementation problems\
    \ dealing\n   with Path MTU Discovery [RFC1191], including the long-standing black\n\
    \   hole problem, stretch ACKs due to confusion between MSS and segment\n   size,\
    \ and MSS advertisement based on PMTU.  The goal in doing so is\n   to improve\
    \ conditions in the existing Internet by enhancing the\n   quality of current\
    \ TCP/IP implementations.\n   While Path MTU Discovery (PMTUD) can be used with\
    \ any upper-layer\n   protocol, it is most commonly used by TCP;  this document\
    \ does not\n   attempt to treat problems encountered by other upper-layer protocols.\n\
    \   Path MTU Discovery for IPv6 [RFC1981] treats only IPv6-dependent\n   issues,\
    \ but not the TCP issues brought up in this document.\n   Each problem is defined\
    \ as follows:\n   Name of Problem\n      The name associated with the problem.\
    \  In this memo, the name is\n      given as a subsection heading.\n   Classification\n\
    \      One or more problem categories for which the problem is\n      classified:\
    \  \"congestion control\", \"performance\", \"reliability\",\n      \"non-interoperation\
    \ -- connectivity failure\".\n   Description\n      A definition of the problem,\
    \ succinct but including necessary\n      background material.\n   Significance\n\
    \      A brief summary of the sorts of environments for which the problem\n  \
    \    is significant.\n   Implications\n      Why the problem is viewed as a problem.\n\
    \   Relevant RFCs\n      The RFCs defining the TCP specification with which the\
    \ problem\n      conflicts.  These RFCs often qualify behavior using terms such\
    \ as\n      MUST, SHOULD, MAY, and others written capitalized.  See RFC 2119\n\
    \      for the exact interpretation of these terms.\n   Trace file demonstrating\
    \ the problem\n      One or more ASCII trace files demonstrating the problem,\
    \ if\n      applicable.\n   Trace file demonstrating correct behavior\n      One\
    \ or more examples of how correct behavior appears in a trace,\n      if applicable.\n\
    \   References\n      References that further discuss the problem.\n   How to\
    \ detect\n      How to test an implementation to see if it exhibits the problem.\n\
    \      This discussion may include difficulties and subtleties associated\n  \
    \    with causing the problem to manifest itself, and with interpreting\n    \
    \  traces to detect the presence of the problem (if applicable).\n   How to fix\n\
    \      For known causes of the problem, how to correct the\n      implementation.\n"
- title: 2. Known implementation problems
  contents:
  - '2. Known implementation problems

    '
- title: 2.1.
  contents:
  - "2.1.\n   Name of Problem\n      Black Hole Detection\n   Classification\n   \
    \   Non-interoperation -- connectivity failure\n   Description\n      A host performs\
    \ Path MTU Discovery by sending out as large a\n      packet as possible, with\
    \ the Don't Fragment (DF) bit set in the IP\n      header.  If the packet is too\
    \ large for a router to forward on to\n      a particular link, the router must\
    \ send an ICMP Destination\n      Unreachable -- Fragmentation Needed message\
    \ to the source address.\n      The host then adjusts the packet size based on\
    \ the ICMP message.\n      As was pointed out in [RFC1435], routers don't always\
    \ do this\n      correctly -- many routers fail to send the ICMP messages, for\
    \ a\n      variety of reasons ranging from kernel bugs to configuration\n    \
    \  problems.  Firewalls are often misconfigured to suppress all ICMP\n      messages.\
    \  IPsec [RFC2401] and IP-in-IP [RFC2003] tunnels\n      shouldn't cause these\
    \ sorts of problems, if the implementations\n      follow the advice in the appropriate\
    \ documents.\n      PMTUD, as documented in [RFC1191], fails when the appropriate\
    \ ICMP\n      messages are not received by the originating host.  The upper-\n\
    \      layer protocol continues to try to send large packets and, without\n  \
    \    the ICMP messages, never discovers that it needs to reduce the\n      size\
    \ of those packets.  Its packets are disappearing into a PMTUD\n      black hole.\n\
    \   Significance\n      When PMTUD fails due to the lack of ICMP messages, TCP\
    \ will also\n      completely fail under some conditions.\n   Implications\n \
    \     This failure is especially difficult to debug, as pings and some\n     \
    \ interactive TCP connections to the destination host work.  Bulk\n      transfers\
    \ fail with the first large packet and the connection\n      eventually times\
    \ out.\n      These situations can almost always be blamed on a misconfiguration\n\
    \      within the network, which should be corrected.  However it seems\n    \
    \  inappropriate for some TCP implementations to suffer\n      interoperability\
    \ failures over paths which do not affect other TCP\n      implementations (i.e.\
    \ those without PMTUD).  This creates a market\n      disincentive for deploying\
    \ TCP implementation with PMTUD enabled.\n   Relevant RFCs\n      RFC 1191 describes\
    \ Path MTU Discovery.  RFC 1435 provides an early\n      description of these\
    \ sorts of problems.\n   Trace file demonstrating the problem\n      Made using\
    \ tcpdump [Jacobson89] recording at an intermediate host.\n      20:12:11.951321\
    \ A > B: S 1748427200:1748427200(0)\n           win 49152 <mss 1460>\n      20:12:11.951829\
    \ B > A: S 1001927984:1001927984(0)\n           ack 1748427201 win 16384 <mss\
    \ 65240>\n      20:12:11.955230 A > B: . ack 1 win 49152 (DF)\n      20:12:11.959099\
    \ A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n      20:12:13.139074 A > B: . 1:1461(1460)\
    \ ack 1 win 49152 (DF)\n      20:12:16.188685 A > B: . 1:1461(1460) ack 1 win\
    \ 49152 (DF)\n      20:12:22.290483 A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n\
    \      20:12:34.491856 A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n      20:12:58.896405\
    \ A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n      20:13:47.703184 A > B: . 1:1461(1460)\
    \ ack 1 win 49152 (DF)\n      20:14:52.780640 A > B: . 1:1461(1460) ack 1 win\
    \ 49152 (DF)\n      20:15:57.856037 A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n\
    \      20:17:02.932431 A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n      20:18:08.009337\
    \ A > B: . 1:1461(1460) ack 1 win 49152 (DF)\n      20:19:13.090521 A > B: . 1:1461(1460)\
    \ ack 1 win 49152 (DF)\n      20:20:18.168066 A > B: . 1:1461(1460) ack 1 win\
    \ 49152 (DF)\n      20:21:23.242761 A > B: R 1461:1461(0) ack 1 win 49152 (DF)\n\
    \      The short SYN packet has no trouble traversing the network, due to\n  \
    \    its small size.  Similarly, ICMP echo packets used to diagnose\n      connectivity\
    \ problems will succeed.\n      Large data packets fail to traverse the network.\
    \  Eventually the\n      connection times out.  This can be especially confusing\
    \ when the\n      application starts out with a very small write, which succeeds,\n\
    \      following up with many large writes, which then fail.\n   Trace file demonstrating\
    \ correct behavior\n      Made using tcpdump recording at an intermediate host.\n\
    \      16:48:42.659115 A > B: S 271394446:271394446(0)\n           win 8192 <mss\
    \ 1460> (DF)\n      16:48:42.672279 B > A: S 2837734676:2837734676(0)\n      \
    \     ack 271394447 win 16384 <mss 65240>\n      16:48:42.676890 A > B: . ack\
    \ 1 win 8760 (DF)\n      16:48:42.870574 A > B: . 1:1461(1460) ack 1 win 8760\
    \ (DF)\n      16:48:42.871799 A > B: . 1461:2921(1460) ack 1 win 8760 (DF)\n \
    \     16:48:45.786814 A > B: . 1:1461(1460) ack 1 win 8760 (DF)\n      16:48:51.794676\
    \ A > B: . 1:1461(1460) ack 1 win 8760 (DF)\n      16:49:03.808912 A > B: . 1:537(536)\
    \ ack 1 win 8760\n      16:49:04.016476 B > A: . ack 537 win 16384\n      16:49:04.021245\
    \ A > B: . 537:1073(536) ack 1 win 8760\n      16:49:04.021697 A > B: . 1073:1609(536)\
    \ ack 1 win 8760\n      16:49:04.120694 B > A: . ack 1609 win 16384\n      16:49:04.126142\
    \ A > B: . 1609:2145(536) ack 1 win 8760\n      In this case, the sender sees\
    \ four packets fail to traverse the\n      network (using a two-packet initial\
    \ send window) and turns off\n      PMTUD.  All subsequent packets have the DF\
    \ flag turned off, and\n      the size set to the default value of 536 [RFC1122].\n\
    \   References\n      This problem has been discussed extensively on the tcp-impl\n\
    \      mailing list;  the name \"black hole\" has been in use for many\n     \
    \ years.\n   How to detect\n      This shows up as a TCP connection which hangs\
    \ (fails to make\n      progress) until closed by timeout (this often manifests\
    \ itself as\n      a connection that connects and starts to transfer, then eventually\n\
    \      terminates after 15 minutes with zero bytes transfered).  This is\n   \
    \   particularly annoying with an application like ftp, which will\n      work\
    \ perfectly while it uses small packets for control\n      information, and then\
    \ fail on bulk transfers.\n      A series of ICMP echo packets will show that\
    \ the two end hosts are\n      still capable of passing packets,  a series of\
    \ MTU-sized ICMP echo\n      packets will show some fragmentation, and a series\
    \ of MTU-sized\n      ICMP echo packets with DF set will fail.  This can be confusing\n\
    \      for network engineers trying to diagnose the problem.\n      There are\
    \ several traceroute implementations that do PMTUD, and\n      can demonstrate\
    \ the problem.\n   How to fix\n      TCP should notice that the connection is\
    \ timing out.  After\n      several timeouts, TCP should attempt to send smaller\
    \ packets,\n      perhaps turning off the DF flag for each packet.  If this\n\
    \      succeeds, it should continue to turn off PMTUD for the connection\n   \
    \   for some reasonable period of time, after which it should probe\n      again\
    \ to try to determine if the path has changed.\n      Note that, under IPv6, there\
    \ is no DF bit -- it is implicitly on\n      at all times.  Fragmentation is not\
    \ allowed in routers, only at\n      the originating host.  Fortunately, the minimum\
    \ supported MTU for\n      IPv6 is 1280 octets, which is significantly larger\
    \ than the 68\n      octet minimum in IPv4.  This should make it more reasonable\
    \ for\n      IPv6 TCP implementations to fall back to 1280 octet packets, when\n\
    \      IPv4 implementations will probably have to turn off DF to respond\n   \
    \   to black hole detection.\n      Ideally, the ICMP black holes should be fixed\
    \ when they are found.\n      If hosts start to implement black hole detection,\
    \ it may be that\n      these problems will go unnoticed and unfixed.  This is\
    \ especially\n      unfortunate, since detection can take several seconds each\
    \ time,\n      and these delays could result in a significant, hidden degradation\n\
    \      of performance.  Hosts that implement black hole detection should\n   \
    \   probably log detected black holes, so that they can be fixed.\n"
- title: 2.2.
  contents:
  - "2.2.\n   Name of Problem\n      Stretch ACK due to PMTUD\n   Classification\n\
    \      Congestion Control / Performance\n   Description\n      When a naively\
    \ implemented TCP stack communicates with a PMTUD\n      equipped stack, it will\
    \ try to generate an ACK for every second\n      full-sized segment.  If it determines\
    \ the full-sized segment based\n      on the advertised MSS, this can degrade\
    \ badly in the face of\n      PMTUD.\n      The PMTU can wind up being a small\
    \ fraction of the advertised MSS;\n      in this case, an ACK would be generated\
    \ only very infrequently.\n   Significance\n      Stretch ACKs have a variety\
    \ of unfortunate effects, more fully\n      outlined in [RFC2525].  Most of these\
    \ have to do with encouraging\n      a more bursty connection, due to the infrequent\
    \ arrival of ACKs.\n      They can also impede congestion window growth.\n   Implications\n\
    \      The complete implications of stretch ACKs are outlined in\n      [RFC2525].\n\
    \   Relevant RFCs\n      RFC 1122 outlines the requirements for frequency of ACK\n\
    \      generation.  [RFC2581] expands on this and clarifies that delayed\n   \
    \   ACK is a SHOULD, not a MUST.\n   Trace file demonstrating it\n      Made using\
    \ tcpdump recording at an intermediate host.  The\n      timestamp options from\
    \ all but the first two packets have been\n      removed for clarity.\n   18:16:52.976657\
    \ A > B: S 3183102292:3183102292(0) win 16384\n        <mss 4312,nop,wscale 0,nop,nop,timestamp\
    \ 12128 0> (DF)\n   18:16:52.979580 B > A: S 2022212745:2022212745(0) ack 3183102293\
    \ win\n        49152 <mss 4312,nop,wscale 1,nop,nop,timestamp 1592957 12128> (DF)\n\
    \   18:16:52.979738 A > B: . ack 1 win 17248  (DF)\n   18:16:52.982473 A > B:\
    \ . 1:4301(4300) ack 1 win 17248  (DF)\n   18:16:52.982557 C > A: icmp: B unreachable\
    \ -\n        need to frag (mtu 1500)! (DF)\n   18:16:52.985839 B > A: . ack 1\
    \ win 32768  (DF)\n   18:16:54.129928 A > B: . 1:1449(1448) ack 1 win 17248  (DF)\n\
    \        .\n        .\n        .\n   18:16:58.507078 A > B: . 1463941:1465389(1448)\
    \ ack 1 win 17248  (DF)\n   18:16:58.507200 A > B: . 1465389:1466837(1448) ack\
    \ 1 win 17248  (DF)\n   18:16:58.507326 A > B: . 1466837:1468285(1448) ack 1 win\
    \ 17248  (DF)\n   18:16:58.507439 A > B: . 1468285:1469733(1448) ack 1 win 17248\
    \  (DF)\n   18:16:58.524763 B > A: . ack 1452357 win 32768  (DF)\n   18:16:58.524986\
    \ B > A: . ack 1461045 win 32768  (DF)\n   18:16:58.525138 A > B: . 1469733:1471181(1448)\
    \ ack 1 win 17248  (DF)\n   18:16:58.525268 A > B: . 1471181:1472629(1448) ack\
    \ 1 win 17248  (DF)\n   18:16:58.525393 A > B: . 1472629:1474077(1448) ack 1 win\
    \ 17248  (DF)\n   18:16:58.525516 A > B: . 1474077:1475525(1448) ack 1 win 17248\
    \  (DF)\n   18:16:58.525642 A > B: . 1475525:1476973(1448) ack 1 win 17248  (DF)\n\
    \   18:16:58.525766 A > B: . 1476973:1478421(1448) ack 1 win 17248  (DF)\n   18:16:58.526063\
    \ A > B: . 1478421:1479869(1448) ack 1 win 17248  (DF)\n   18:16:58.526187 A >\
    \ B: . 1479869:1481317(1448) ack 1 win 17248  (DF)\n   18:16:58.526310 A > B:\
    \ . 1481317:1482765(1448) ack 1 win 17248  (DF)\n   18:16:58.526432 A > B: . 1482765:1484213(1448)\
    \ ack 1 win 17248  (DF)\n   18:16:58.526561 A > B: . 1484213:1485661(1448) ack\
    \ 1 win 17248  (DF)\n   18:16:58.526671 A > B: . 1485661:1487109(1448) ack 1 win\
    \ 17248  (DF)\n   18:16:58.537944 B > A: . ack 1478421 win 32768  (DF)\n   18:16:58.538328\
    \ A > B: . 1487109:1488557(1448) ack 1 win 17248  (DF)\n   Note that the interval\
    \ between ACKs is significantly larger than two\n   times the segment size;  it\
    \ works out to be almost exactly two times\n   the advertised MSS.  This transfer\
    \ was long enough that it could be\n   verified that the stretch ACK was not the\
    \ result of lost ACK packets.\n   Trace file demonstrating correct behavior\n\
    \   Made using tcpdump recording at an intermediate host.  The timestamp\n   options\
    \ from all but the first two packets have been removed for\n   clarity.\n   18:13:32.287965\
    \ A > B: S 2972697496:2972697496(0)\n        win 16384 <mss 4312,nop,wscale 0,nop,nop,timestamp\
    \ 11326 0> (DF)\n   18:13:32.290785 B > A: S 245639054:245639054(0)\n        ack\
    \ 2972697497 win 34496 <mss 4312> (DF)\n   18:13:32.290941 A > B: . ack 1 win\
    \ 17248 (DF)\n   18:13:32.293774 A > B: . 1:4313(4312) ack 1 win 17248 (DF)\n\
    \   18:13:32.293856 C > A: icmp: B unreachable -\n        need to frag (mtu 1500)!\
    \ (DF)\n   18:13:33.637338 A > B: . 1:1461(1460) ack 1 win 17248 (DF)\n      \
    \  .\n        .\n        .\n   18:13:35.561691 A > B: . 1514021:1515481(1460)\
    \ ack 1 win 17248 (DF)\n   18:13:35.561814 A > B: . 1515481:1516941(1460) ack\
    \ 1 win 17248 (DF)\n   18:13:35.561938 A > B: . 1516941:1518401(1460) ack 1 win\
    \ 17248 (DF)\n   18:13:35.562059 A > B: . 1518401:1519861(1460) ack 1 win 17248\
    \ (DF)\n   18:13:35.562174 A > B: . 1519861:1521321(1460) ack 1 win 17248 (DF)\n\
    \   18:13:35.564008 B > A: . ack 1481901 win 64680 (DF)\n   18:13:35.564383 A\
    \ > B: . 1521321:1522781(1460) ack 1 win 17248 (DF)\n   18:13:35.564499 A > B:\
    \ . 1522781:1524241(1460) ack 1 win 17248 (DF)\n   18:13:35.615576 B > A: . ack\
    \ 1484821 win 64680 (DF)\n   18:13:35.615646 B > A: . ack 1487741 win 64680 (DF)\n\
    \   18:13:35.615716 B > A: . ack 1490661 win 64680 (DF)\n   18:13:35.615784 B\
    \ > A: . ack 1493581 win 64680 (DF)\n   18:13:35.615856 B > A: . ack 1496501 win\
    \ 64680 (DF)\n   18:13:35.615952 A > B: . 1524241:1525701(1460) ack 1 win 17248\
    \ (DF)\n   18:13:35.615966 B > A: . ack 1499421 win 64680 (DF)\n   18:13:35.616088\
    \ A > B: . 1525701:1527161(1460) ack 1 win 17248 (DF)\n   18:13:35.616105 B >\
    \ A: . ack 1502341 win 64680 (DF)\n   18:13:35.616211 A > B: . 1527161:1528621(1460)\
    \ ack 1 win 17248 (DF)\n   18:13:35.616228 B > A: . ack 1505261 win 64680 (DF)\n\
    \   18:13:35.616327 A > B: . 1528621:1530081(1460) ack 1 win 17248 (DF)\n   18:13:35.616349\
    \ B > A: . ack 1508181 win 64680 (DF)\n   18:13:35.616448 A > B: . 1530081:1531541(1460)\
    \ ack 1 win 17248 (DF)\n   18:13:35.616565 A > B: . 1531541:1533001(1460) ack\
    \ 1 win 17248 (DF)\n   18:13:35.616891 A > B: . 1533001:1534461(1460) ack 1 win\
    \ 17248 (DF)\n   In this trace, an ACK is generated for every two segments that\n\
    \   arrive.  (The segment size is slightly larger in this trace, even\n   though\
    \ the source hosts are the same, because of the lack of\n   timestamp options\
    \ in this trace.)\n   How to detect\n   This condition can be observed in a packet\
    \ trace when the advertised\n   MSS is significantly larger than the actual PMTU\
    \ of a connection.\n   How to fix Several solutions for this problem have been\
    \ proposed:\n   A simple solution is to ACK every other packet, regardless of\
    \ size.\n   This has the drawback of generating large numbers of ACKs in the face\n\
    \   of lots of very small packets;  this shows up with applications like\n   the\
    \ X Window System.\n   A slightly more complex solution would monitor the size\
    \ of incoming\n   segments and try to determine what segment size the sender is\
    \ using.\n   This requires slightly more state in the receiver, but has the\n\
    \   advantage of making receiver silly window syndrome avoidance\n   computations\
    \ more accurate [RFC813].\n"
- title: 2.3.
  contents:
  - "2.3.\n   Name of Problem\n   Determining MSS from PMTU\n   Classification\n \
    \  Performance\n   Description\n   The MSS advertised at the start of a connection\
    \ should be based on\n   the MTU of the interfaces on the system.  (For efficiency\
    \ and other\n   reasons this may not be the largest MSS possible.)  Some systems\
    \ use\n   PMTUD determined values to determine the MSS to advertise.\n   This\
    \ results in an advertised MSS that is smaller than the largest\n   MTU the system\
    \ can receive.\n   Significance\n   The advertised MSS is an indication to the\
    \ remote system about the\n   largest TCP segment that can be received [RFC879].\
    \  If this value is\n   too small, the remote system will be forced to use a smaller\
    \ segment\n   size when sending, purely because the local system found a particular\n\
    \   PMTU earlier.\n   Given the asymmetric nature of many routes on the Internet\n\
    \   [Paxson97], it seems entirely possible that the return PMTU is\n   different\
    \ from the sending PMTU.  Limiting the segment size in this\n   way can reduce\
    \ performance and frustrate the PMTUD algorithm.\n   Even if the route was symmetric,\
    \ setting this artificially lowered\n   limit on segment size will make it impossible\
    \ to probe later to\n   determine if the PMTU has changed.\n   Implications\n\
    \   The whole point of PMTUD is to send as large a segment as possible.\n   If\
    \ long-running connections cannot successfully probe for larger\n   PMTU, then\
    \ potential performance gains will be impossible to realize.\n   This destroys\
    \ the whole point of PMTUD.\n   Relevant RFCs RFC 1191.  [RFC879] provides a complete\
    \ discussion of\n   MSS calculations and appropriate values.  Note that this practice\n\
    \   does not violate any of the specifications in these RFCs.\n   Trace file demonstrating\
    \ it\n   This trace was made using tcpdump running on an intermediate host.\n\
    \   Host A initiates two separate consecutive connections, A1 and A2, to\n   host\
    \ B.  Router C is the location of the MTU bottleneck.  As usual,\n   TCP options\
    \ are removed from all non-SYN packets.\n   22:33:32.305912 A1 > B: S 1523306220:1523306220(0)\n\
    \        win 8760 <mss 1460> (DF)\n   22:33:32.306518 B > A1: S 729966260:729966260(0)\n\
    \        ack 1523306221 win 16384 <mss 65240>\n   22:33:32.310307 A1 > B: . ack\
    \ 1 win 8760 (DF)\n   22:33:32.323496 A1 > B: P 1:1461(1460) ack 1 win 8760 (DF)\n\
    \   22:33:32.323569 C > A1: icmp: 129.99.238.5 unreachable -\n        need to\
    \ frag (mtu 1024) (DF) (ttl 255, id 20666)\n   22:33:32.783694 A1 > B: . 1:985(984)\
    \ ack 1 win 8856 (DF)\n   22:33:32.840817 B > A1: . ack 985 win 16384\n   22:33:32.845651\
    \ A1 > B: . 1461:2445(984) ack 1 win 8856 (DF)\n   22:33:32.846094 B > A1: . ack\
    \ 985 win 16384\n   22:33:33.724392 A1 > B: . 985:1969(984) ack 1 win 8856 (DF)\n\
    \   22:33:33.724893 B > A1: . ack 2445 win 14924\n   22:33:33.728591 A1 > B: .\
    \ 2445:2921(476) ack 1 win 8856 (DF)\n   22:33:33.729161 A1 > B: . ack 1 win 8856\
    \ (DF)\n   22:33:33.840758 B > A1: . ack 2921 win 16384\n   [...]\n   22:33:34.238659\
    \ A1 > B: F 7301:8193(892) ack 1 win 8856 (DF)\n   22:33:34.239036 B > A1: . ack\
    \ 8194 win 15492\n   22:33:34.239303 B > A1: F 1:1(0) ack 8194 win 16384\n   22:33:34.242971\
    \ A1 > B: . ack 2 win 8856 (DF)\n   22:33:34.454218 A2 > B: S 1523591299:1523591299(0)\n\
    \        win 8856 <mss 984> (DF)\n   22:33:34.454617 B > A2: S 732408874:732408874(0)\n\
    \        ack 1523591300 win 16384 <mss 65240>\n   22:33:34.457516 A2 > B: . ack\
    \ 1 win 8856 (DF)\n   22:33:34.470683 A2 > B: P 1:985(984) ack 1 win 8856 (DF)\n\
    \   22:33:34.471144 B > A2: . ack 985 win 16384\n   22:33:34.476554 A2 > B: .\
    \ 985:1969(984) ack 1 win 8856 (DF)\n   22:33:34.477580 A2 > B: P 1969:2953(984)\
    \ ack 1 win 8856 (DF)\n   [...]\n   Notice that the SYN packet for session A2\
    \ specifies an MSS of 984.\n   Trace file demonstrating correct behavior\n   As\
    \ before, this trace was made using tcpdump running on an\n   intermediate host.\
    \  Host A initiates two separate consecutive\n   connections, A1 and A2, to host\
    \ B.  Router C is the location of the\n   MTU bottleneck.  As usual, TCP options\
    \ are removed from all non-SYN\n   packets.\n   22:36:58.828602 A1 > B: S 3402991286:3402991286(0)\
    \ win 32768\n        <mss 4312,wscale 0,nop,timestamp 1123370309 0,\n        \
    \ echo 1123370309> (DF)\n   22:36:58.844040 B > A1: S 946999880:946999880(0)\n\
    \        ack 3402991287 win 16384\n        <mss 65240,nop,wscale 0,nop,nop,timestamp\
    \ 429552 1123370309>\n   22:36:58.848058 A1 > B: . ack 1 win 32768  (DF)\n   22:36:58.851514\
    \ A1 > B: P 1:1025(1024) ack 1 win 32768  (DF)\n   22:36:58.851584 C > A1: icmp:\
    \ 129.99.238.5 unreachable -\n        need to frag (mtu 1024) (DF)\n   22:36:58.855885\
    \ A1 > B: . 1:969(968) ack 1 win 32768  (DF)\n   22:36:58.856378 A1 > B: . 969:985(16)\
    \ ack 1 win 32768  (DF)\n   22:36:59.036309 B > A1: . ack 985 win 16384\n   22:36:59.039255\
    \ A1 > B: FP 985:1025(40) ack 1 win 32768  (DF)\n   22:36:59.039623 B > A1: .\
    \ ack 1026 win 16344\n   22:36:59.039828 B > A1: F 1:1(0) ack 1026 win 16384\n\
    \   22:36:59.043037 A1 > B: . ack 2 win 32768  (DF)\n   22:37:01.436032 A2 > B:\
    \ S 3404812097:3404812097(0) win 32768\n        <mss 4312,wscale 0,nop,timestamp\
    \ 1123372916 0,\n         echo 1123372916> (DF)\n   22:37:01.436424 B > A2: S\
    \ 949814769:949814769(0)\n        ack 3404812098 win 16384\n        <mss 65240,nop,wscale\
    \ 0,nop,nop,timestamp 429562 1123372916>\n   22:37:01.440147 A2 > B: . ack 1 win\
    \ 32768  (DF)\n   22:37:01.442736 A2 > B: . 1:969(968) ack 1 win 32768  (DF)\n\
    \   22:37:01.442894 A2 > B: P 969:985(16) ack 1 win 32768  (DF)\n   22:37:01.443283\
    \ B > A2: . ack 985 win 16384\n   22:37:01.446068 A2 > B: P 985:1025(40) ack 1\
    \ win 32768  (DF)\n   22:37:01.446519 B > A2: . ack 1025 win 16384\n   22:37:01.448465\
    \ A2 > B: F 1025:1025(0) ack 1 win 32768  (DF)\n   22:37:01.448837 B > A2: . ack\
    \ 1026 win 16384\n   22:37:01.449007 B > A2: F 1:1(0) ack 1026 win 16384\n   22:37:01.452201\
    \ A2 > B: . ack 2 win 32768  (DF)\n   Note that the same MSS was used for both\
    \ session A1 and session A2.\n   How to detect\n   This can be detected using\
    \ a packet trace of two separate\n   connections;  the first should invoke PMTUD;\
    \ the second should start\n   soon enough after the first that the PMTU value\
    \ does not time out.\n   How to fix\n   The MSS should be determined based on\
    \ the MTUs of the interfaces on\n   the system, as outlined in [RFC1122] and [RFC1191].\n"
- title: 3. Security Considerations
  contents:
  - "3. Security Considerations\n   The one security concern raised by this memo is\
    \ that ICMP black holes\n   are often caused by over-zealous security administrators\
    \ who block\n   all ICMP messages.  It is vitally important that those who design\
    \ and\n   deploy security systems understand the impact of strict filtering on\n\
    \   upper-layer protocols.  The safest web site in the world is worthless\n  \
    \ if most TCP implementations cannot transfer data from it.  It would\n   be far\
    \ nicer to have all of the black holes fixed rather than fixing\n   all of the\
    \ TCP implementations.\n"
- title: 4. Acknowledgements
  contents:
  - "4. Acknowledgements\n   Thanks to Mark Allman, Vern Paxson, and Jamshid Mahdavi\
    \ for generous\n   help reviewing the document, and to Matt Mathis for early suggestions\n\
    \   of various mechanisms that can cause PMTUD black holes, as well as\n   review.\
    \  The structure for describing TCP problems, and the early\n   description of\
    \ that structure is from [RFC2525].  Special thanks to\n   Amy Bock, who helped\
    \ perform the PMTUD tests which discovered these\n   bugs.\n"
- title: 5. References
  contents:
  - "5. References\n   [RFC2581]    Allman, M., Paxson, V. and W. Stevens, \"TCP Congestion\n\
    \                Control\", RFC 2581, April 1999.\n   [RFC1122]    Braden, R.,\
    \ \"Requirements for Internet Hosts --\n                Communication Layers\"\
    , STD 3, RFC 1122, October 1989.\n   [RFC813]     Clark, D., \"Window and Acknowledgement\
    \ Strategy in TCP\",\n                RFC 813, July 1982.\n   [Jacobson89] V.\
    \ Jacobson, C. Leres, and S. McCanne, tcpdump, June\n                1989, ftp.ee.lbl.gov\n\
    \   [RFC1435]    Knowles, S., \"IESG Advice from Experience with Path MTU\n  \
    \              Discovery\", RFC 1435, March 1993.\n   [RFC1191]    Mogul, J. and\
    \ S. Deering, \"Path MTU discovery\", RFC\n                1191, November 1990.\n\
    \   [RFC1981]    McCann, J., Deering, S. and J. Mogul, \"Path MTU\n          \
    \      Discovery for IP version 6\", RFC 1981, August 1996.\n   [Paxson96]   V.\
    \ Paxson, \"End-to-End Routing Behavior in the\n                Internet\", IEEE/ACM\
    \ Transactions on Networking (5),\n                pp.~601-615, Oct. 1997.\n \
    \  [RFC2525]    Paxon, V., Allman, M., Dawson, S., Fenner, W., Griner,\n     \
    \           J., Heavens, I., Lahey, K., Semke, I. and B. Volz,\n             \
    \   \"Known TCP Implementation Problems\", RFC 2525, March\n                1999.\n\
    \   [RFC879]     Postel, J., \"The TCP Maximum Segment Size and Related\n    \
    \            Topics\", RFC 879, November 1983.\n   [RFC2001]    Stevens, W., \"\
    TCP Slow Start, Congestion Avoidance, Fast\n                Retransmit, and Fast\
    \ Recovery Algorithms\", RFC 2001,\n                January 1997.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   Kevin Lahey\n   dotRocket, Inc.\n   1901 S. Bascom Ave.,\
    \ Suite 300\n   Campbell, CA 95008\n   USA\n   Phone:  +1 408-371-8977 x115\n\
    \   email:  kml@dotrocket.com\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
