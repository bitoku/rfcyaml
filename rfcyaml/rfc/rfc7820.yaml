- title: __initial_text__
  contents:
  - "                       UDP Checksum Complement in\n          the One-Way Active\
    \ Measurement Protocol (OWAMP) and\n              Two-Way Active Measurement Protocol\
    \ (TWAMP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The One-Way Active Measurement Protocol (OWAMP) and the Two-Way\n\
    \   Active Measurement Protocol (TWAMP) are used for performance\n   monitoring\
    \ in IP networks.  Delay measurement is performed in these\n   protocols by using\
    \ timestamped test packets.  Some implementations\n   use hardware-based timestamping\
    \ engines that integrate the accurate\n   transmission time into every outgoing\
    \ OWAMP/TWAMP test packet during\n   transmission.  Since these packets are transported\
    \ over UDP, the UDP\n   Checksum field is then updated to reflect this modification.\
    \  This\n   document proposes to use the last 2 octets of every test packet as\
    \ a\n   Checksum Complement, allowing timestamping engines to reflect the\n  \
    \ checksum modification in the last 2 octets rather than in the UDP\n   Checksum\
    \ field.  The behavior defined in this document is completely\n   interoperable\
    \ with existing OWAMP/TWAMP implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7820.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions Used in This Document ...............................5\n  \
    \    2.1. Terminology ................................................5\n    \
    \  2.2. Abbreviations ..............................................5\n   3. Using\
    \ the UDP Checksum Complement in OWAMP and TWAMP ............6\n      3.1. Overview\
    \ ...................................................6\n      3.2. OWAMP/TWAMP\
    \ Test Packets with Checksum Complement ..........6\n           3.2.1. Transmission\
    \ of OWAMP/TWAMP with Checksum\n                  Complement .........................................10\n\
    \           3.2.2. Intermediate Updates of OWAMP/TWAMP with\n                \
    \  Checksum Complement ................................10\n           3.2.3. Reception\
    \ of OWAMP/TWAMP with Checksum Complement ..10\n      3.3. Interoperability with\
    \ Existing Implementations ............10\n      3.4. Using the Checksum Complement\
    \ with or without\n           Authentication ............................................11\n\
    \           3.4.1. Checksum Complement in Authenticated Mode ..........11\n  \
    \         3.4.2. Checksum Complement in Encrypted Mode ..............11\n   4.\
    \ Security Considerations ........................................12\n   5. References\
    \ .....................................................12\n      5.1. Normative\
    \ References ......................................12\n      5.2. Informative\
    \ References ....................................13\n   Appendix A. Checksum Complement\
    \ Usage Example .....................14\n   Acknowledgments ...................................................15\n\
    \   Author's Address ..................................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The One-Way Active Measurement Protocol [OWAMP] and the\
    \ Two-Way\n   Active Measurement Protocol [TWAMP] are used for performance\n \
    \  monitoring in IP networks.\n   Delay and delay variation are two of the metrics\
    \ that OWAMP/TWAMP can\n   measure.  Measurement is performed using timestamped\
    \ test packets.\n   In some use cases, such as carrier networks, these two metrics\
    \ are an\n   essential aspect of the Service Level Agreement (SLA) and therefore\n\
    \   must be measured with a high degree of accuracy.  If packets are\n   timestamped\
    \ in hardware as they exit the host, then greater accuracy\n   is possible in\
    \ comparison to higher-layer timestamps (as explained\n   further below).\n  \
    \ The accuracy of delay measurements relies on the timestamping method\n   and\
    \ its implementation.  In order to facilitate accurate\n   timestamping, an implementation\
    \ can use a hardware-based timestamping\n   engine, as shown in Figure 1.  In\
    \ such cases, the OWAMP/TWAMP packets\n   are sent and received by a software\
    \ layer, whereas the timestamping\n   engine modifies every outgoing test packet\
    \ by incorporating its\n   accurate transmission time into the Timestamp field\
    \ in the packet.\n                  OWAMP/TWAMP-enabled Node\n               \
    \     +-------------------+\n                    |                   |\n     \
    \               |   +-----------+   |\n     Software       |   |OWAMP/TWAMP| \
    \  |\n                    |   | protocol  |   |\n                    |   +-----+-----+\
    \   |\n                    |         |         |     +-----------------------+\n\
    \                    |   +-----+-----+   |    / Intermediate entity    |\n   \
    \                 |   | Accurate  |   |   /  in charge of:          |\n     ASIC/FPGA\
    \      |   | Timestamp |   |  /__ - Timestamping         |\n                 \
    \   |   |  engine   |   |     |- Updating checksum or |\n                    |\
    \   +-----------+   |     |  Checksum Complement  |\n                    |   \
    \      |         |     +-----------------------+\n                    +---------+---------+\n\
    \                              |\n                              |test packets\n\
    \                              |\n                          ___ v _\n        \
    \                 /   \\_/ \\__\n                        /           \\_\n   \
    \                    /     IP      /\n                       \\_  Network  /\n\
    \                        /           \\\n                        \\__/\\_   ___/\n\
    \                              \\_/\n     ASIC: Application-Specific Integrated\
    \ Circuit\n     FPGA: Field-Programmable Gate Array\n              Figure 1: Accurate\
    \ Timestamping in OWAMP/TWAMP\n   OWAMP/TWAMP test packets are transported over\
    \ UDP.  When the UDP\n   payload is changed by an intermediate entity such as\
    \ the timestamping\n   engine, the UDP Checksum field must be updated to reflect\
    \ the new\n   payload.  When using UDP over IPv4 [UDP], an intermediate entity\
    \ that\n   cannot update the value of the UDP Checksum has no choice except to\n\
    \   assign a value of zero to the Checksum field, causing the receiver to\n  \
    \ ignore the Checksum field and potentially accept corrupted packets.\n   UDP\
    \ over IPv6, as defined in [IPv6], does not allow a zero checksum,\n   except\
    \ in specific cases [ZeroChecksum].  As discussed in\n   [ZeroChecksum], the use\
    \ of a zero checksum is generally not\n   recommended and should be avoided to\
    \ the extent possible.\n   Since an intermediate entity only modifies a specific\
    \ field in the\n   packet, i.e., the Timestamp field, the UDP Checksum update\
    \ can be\n   performed incrementally, using the concepts presented in [Checksum].\n\
    \   A similar problem is addressed in Annex E of [IEEE1588].  When the\n   Precision\
    \ Time Protocol (PTP) is transported over IPv6, 2 octets are\n   appended to the\
    \ end of the PTP payload for UDP Checksum updates.  The\n   value of these 2 octets\
    \ can be updated by an intermediate entity,\n   causing the value of the UDP Checksum\
    \ field to remain correct.\n   This document defines a similar concept for [OWAMP]\
    \ and [TWAMP],\n   allowing intermediate entities to update OWAMP/TWAMP test packets\
    \ and\n   maintain the correctness of the UDP Checksum by modifying the last\n\
    \   2 octets of the packet.\n   The term \"Checksum Complement\" is used throughout\
    \ this document and\n   refers to the 2 octets at the end of the UDP payload,\
    \ used for\n   updating the UDP Checksum by intermediate entities.\n   The usage\
    \ of the Checksum Complement can in some cases simplify the\n   implementation,\
    \ because if the packet data is processed in serial\n   order, it is simpler to\
    \ first update the Timestamp field and then\n   update the Checksum Complement,\
    \ rather than to update the timestamp\n   and then update the UDP Checksum residing\
    \ at the UDP header.\n   The Checksum Complement mechanism is also defined for\
    \ the Network\n   Time Protocol in [RFC7821].\n"
- title: 2.  Conventions Used in This Document
  contents:
  - '2.  Conventions Used in This Document

    '
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [KEYWORDS].\n"
- title: 2.2.  Abbreviations
  contents:
  - "2.2.  Abbreviations\n   HMAC     Hashed Message Authentication Code\n   OWAMP\
    \    One-Way Active Measurement Protocol\n   PTP      Precision Time Protocol\n\
    \   TWAMP    Two-Way Active Measurement Protocol\n   UDP      User Datagram Protocol\n"
- title: 3.  Using the UDP Checksum Complement in OWAMP and TWAMP
  contents:
  - '3.  Using the UDP Checksum Complement in OWAMP and TWAMP

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The UDP Checksum Complement is a 2-octet field that is piggybacked\
    \ at\n   the end of the test packet.  It resides in the last 2 octets of the\n\
    \   UDP payload.\n                   +----------------------------------+\n  \
    \                 |         IPv4/IPv6 Header         |\n                   +----------------------------------+\n\
    \                   |            UDP Header            |\n                   +----------------------------------+\n\
    \            ^      |                                  |\n            |      |\
    \           OWAMP/TWAMP            |\n           UDP     |             packet\
    \               |\n          Payload  +----------------------------------+\n \
    \           |      |UDP Checksum Complement (2 octets)|\n            v      +----------------------------------+\n\
    \         Figure 2: Checksum Complement in OWAMP/TWAMP Test Packets\n   The Checksum\
    \ Complement is used to compensate for changes performed\n   in the packet by\
    \ intermediate entities, as described in the\n   Introduction (Section 1).  An\
    \ example of the usage of the Checksum\n   Complement is provided in Appendix\
    \ A.\n"
- title: 3.2.  OWAMP/TWAMP Test Packets with Checksum Complement
  contents:
  - "3.2.  OWAMP/TWAMP Test Packets with Checksum Complement\n   The One-Way Active\
    \ Measurement Protocol [OWAMP] and the Two-Way\n   Active Measurement Protocol\
    \ [TWAMP] both make use of timestamped test\n   packets.  A Checksum Complement\
    \ MAY be used in the following cases:\n   o  In OWAMP test packets sent by the\
    \ sender to the receiver.\n   o  In TWAMP test packets sent by the sender to the\
    \ reflector.\n   o  In TWAMP test packets sent by the reflector to the sender.\n\
    \   OWAMP/TWAMP test packets are transported over UDP, either over IPv4\n   or\
    \ over IPv6.  This document applies to both OWAMP and TWAMP over\n   IPv4 and\
    \ over IPv6.\n   OWAMP/TWAMP test packets contain a Packet Padding field.  This\n\
    \   document proposes to use the last 2 octets of the Packet Padding\n   field\
    \ as the Checksum Complement.  In this case, the Checksum\n   Complement is always\
    \ the last 2 octets of the UDP payload, and thus\n   the field is located at (UDP\
    \ Length - 2 octets) after the beginning\n   of the UDP header.\n   Figure 3 illustrates\
    \ the OWAMP test packet format, including the UDP\n   Checksum Complement.\n \
    \    0                   1                   2                   3\n     0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Sequence Number                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Timestamp                            |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        Error Estimate         |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n    |                                     \
    \                          |\n    .                         Packet Padding   \
    \                     .\n    .                                               \
    \                .\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               |      Checksum Complement      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 3: Checksum Complement in OWAMP Test Packets\n   Figure 4\
    \ illustrates the TWAMP test packet format, including the UDP\n   Checksum Complement.\
    \  (\"TTL\" means \"Time to Live\", and \"MBZ\" refers\n   to the \"MUST be zero\"\
    \ field [IPPMIPsec].)\n     0                   1                   2        \
    \           3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Sequence Number                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Timestamp                            |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Error Estimate        |           MBZ                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Receive Timestamp                         |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                   Sender Sequence Number                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                      Sender Timestamp                         |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      Sender Error Estimate    |           MBZ                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Sender TTL   |                                               |\n    +-+-+-+-+-+-+-+-+\
    \                                               +\n    |                     \
    \                                          |\n    .                          \
    \                                     .\n    .                         Packet\
    \ Padding                        .\n    .                                    \
    \                           .\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               |     Checksum Complement       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 4: Checksum Complement in TWAMP Test Packets\n   The length\
    \ of the Packet Padding field in test packets is announced\n   during the session\
    \ initiation through the <Padding Length> field in\n   the Request-Session message\
    \ [OWAMP] or in the Request-TW-Session\n   message [TWAMP].\n   When a Checksum\
    \ Complement is included, the padding length MUST be\n   sufficiently long to\
    \ include the Checksum Complement:\n   o  In OWAMP, the padding length is at least\
    \ 2 octets, allowing the\n      sender to incorporate the Checksum Complement\
    \ in the last 2 octets\n      of the padding.\n   o  In TWAMP, the padding length\
    \ is at least 29 octets in\n      unauthenticated mode and at least 58 octets\
    \ in authenticated mode.\n      The additional padding is required, since the\
    \ header of reflector\n      test packets is longer than the header of sender\
    \ test packets.\n      The difference between the sender packet and the reflector\
    \ packet\n      is 27 octets in unauthenticated mode and 56 octets in\n      authenticated\
    \ mode.  Thus, the padding in reflector test packets\n      is shorter than the\
    \ padding in sender packets.  Using at least\n      29 octets of padding (58 in\
    \ authenticated mode) in sender test\n      packets allows both the sender and\
    \ the reflector to use a 2-octet\n      Checksum Complement.  Note: If the minimal\
    \ length requirement is\n      not met, the reflector cannot use a Checksum Complement\
    \ in the\n      reflected test packets, but the sender can use a Checksum\n  \
    \    Complement in the test packets it transmits.\n   o  Two optional TWAMP features\
    \ are defined in [TWAMP-Reflect]:\n      octet reflection and symmetrical size.\
    \  When at least one of these\n      features is enabled, the Request-TW-Session\
    \ message includes the\n      <Padding Length> field, as well as a <Length of\
    \ padding to\n      reflect> field.  In this case, both fields must be sufficiently\n\
    \      long to allow at least 2 octets of padding in both sender test\n      packets\
    \ and reflector test packets.  Specifically, when octet\n      reflection is enabled,\
    \ the two Length fields must be defined such\n      that the padding expands at\
    \ least 2 octets beyond the end of the\n      reflected octets.\n   As described\
    \ in Section 1, the extensions described in this document\n   are implemented\
    \ by two logical layers -- a protocol layer and a\n   timestamping layer.  It\
    \ is assumed that the two layers are\n   synchronized regarding whether the usage\
    \ of the Checksum Complement\n   is enabled or not; since both logical layers\
    \ reside in the same\n   network device, it is assumed that there is no need for\
    \ a protocol\n   that synchronizes this information between the two layers.  When\n\
    \   Checksum Complement usage is enabled, the protocol layer must take\n   care\
    \ to verify that test packets include the necessary padding,\n   thereby avoiding\
    \ the need for the timestamping layer to verify that\n   en-route test packets\
    \ include the necessary padding.\n"
- title: 3.2.1.  Transmission of OWAMP/TWAMP with Checksum Complement
  contents:
  - "3.2.1.  Transmission of OWAMP/TWAMP with Checksum Complement\n   The transmitter\
    \ of an OWAMP/TWAMP test packet MAY include a Checksum\n   Complement field, incorporated\
    \ in the last 2 octets of the padding.\n   A transmitter that includes a Checksum\
    \ Complement in its outgoing\n   test packets MUST include a Packet Padding field\
    \ in these packets,\n   the length of which MUST be sufficient to include the\
    \ Checksum\n   Complement.  The length of the Packet Padding field is negotiated\n\
    \   during session initiation, as described in Section 3.2.\n"
- title: 3.2.2.  Intermediate Updates of OWAMP/TWAMP with Checksum Complement
  contents:
  - "3.2.2.  Intermediate Updates of OWAMP/TWAMP with Checksum Complement\n   An intermediate\
    \ entity that receives and alters an OWAMP/TWAMP\n   test packet can alter either\
    \ the UDP Checksum field or the Checksum\n   Complement field in order to maintain\
    \ the correctness of the\n   UDP Checksum value.\n"
- title: 3.2.3.  Reception of OWAMP/TWAMP with Checksum Complement
  contents:
  - "3.2.3.  Reception of OWAMP/TWAMP with Checksum Complement\n   This document does\
    \ not impose new requirements on the receiving end\n   of an OWAMP/TWAMP test\
    \ packet.\n   The UDP layer at the receiving end verifies the UDP Checksum of\n\
    \   received test packets, and the OWAMP/TWAMP layer should treat the\n   Checksum\
    \ Complement as part of the padding.\n"
- title: 3.3.  Interoperability with Existing Implementations
  contents:
  - "3.3.  Interoperability with Existing Implementations\n   The behavior defined\
    \ in this document does not impose new\n   requirements on the reception behavior\
    \ of OWAMP/TWAMP test packets.\n   The protocol stack of the receiving host performs\
    \ the conventional\n   UDP Checksum verification; thus, from the perspective of\
    \ the\n   receiving host, the existence of the Checksum Complement is\n   transparent.\
    \  Therefore, the functionality described in this document\n   allows interoperability\
    \ with existing implementations that comply\n   with [OWAMP] or [TWAMP].\n"
- title: 3.4.  Using the Checksum Complement with or without Authentication
  contents:
  - "3.4.  Using the Checksum Complement with or without Authentication\n   Both OWAMP\
    \ and TWAMP may use authentication or encryption, as defined\n   in [OWAMP] and\
    \ [TWAMP].\n"
- title: 3.4.1.  Checksum Complement in Authenticated Mode
  contents:
  - "3.4.1.  Checksum Complement in Authenticated Mode\n   OWAMP and TWAMP test packets\
    \ can be authenticated using an HMAC\n   (Hashed Message Authentication Code).\
    \  The HMAC covers some of the\n   fields in the test packet header.  The HMAC\
    \ does not cover the\n   Timestamp field and the Packet Padding field.\n   A Checksum\
    \ Complement MAY be used when authentication is enabled.  In\n   this case, an\
    \ intermediate entity can timestamp test packets and\n   update their Checksum\
    \ Complement field without modifying the HMAC.\n"
- title: 3.4.2.  Checksum Complement in Encrypted Mode
  contents:
  - "3.4.2.  Checksum Complement in Encrypted Mode\n   When OWAMP and TWAMP are used\
    \ in encrypted mode, the Timestamp field\n   is encrypted.\n   A Checksum Complement\
    \ SHOULD NOT be used in encrypted mode.  The\n   Checksum Complement is effective\
    \ in both unauthenticated mode and\n   authenticated mode, allowing the intermediate\
    \ entity to perform\n   serial processing of the packet without storing and forwarding\
    \ it.\n   On the other hand, in encrypted mode, an intermediate entity that\n\
    \   timestamps a test packet must also re-encrypt the packet accordingly.\n  \
    \ Re-encryption typically requires the intermediate entity to store the\n   packet,\
    \ re-encrypt it, and then forward it.  Thus, from an\n   implementer's perspective,\
    \ the Checksum Complement has very little\n   value in encrypted mode, as it does\
    \ not necessarily simplify the\n   implementation.\n   Note: While [OWAMP] and\
    \ [TWAMP] include an inherent security\n   mechanism, these protocols can be secured\
    \ by other measures, e.g.,\n   [IPPMIPsec].  For reasons similar to those described\
    \ above, a\n   Checksum Complement SHOULD NOT be used in this case.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document describes how a Checksum Complement\
    \ extension can be\n   used for maintaining the correctness of the UDP Checksum.\n\
    \   The purpose of this extension is to ease the implementation of\n   accurate\
    \ timestamping engines, as illustrated in Figure 1.  The\n   extension is intended\
    \ to be used internally in an OWAMP/TWAMP-enabled\n   node, and not intended to\
    \ be used by intermediate switches and\n   routers that reside between the sender\
    \ and the receiver/reflector.\n   Any modification of a test packet by intermediate\
    \ switches or routers\n   should be considered a malicious man-in-the-middle (MITM)\
    \ attack.\n   It is important to emphasize that the scheme described in this\n\
    \   document does not increase the protocol's vulnerability to MITM\n   attacks;\
    \ a MITM attacker who maliciously modifies a packet and its\n   Checksum Complement\
    \ is logically equivalent to a MITM attacker who\n   modifies a packet and its\
    \ UDP Checksum field.\n   The concept described in this document is intended to\
    \ be used only in\n   unauthenticated mode or authenticated mode.  As described\
    \ in\n   Section 3.4.2, using the Checksum Complement in encrypted mode does\n\
    \   not simplify the implementation compared to using the conventional\n   checksum,\
    \ and therefore the Checksum Complement should not be used.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [Checksum]  Rijsinghani, A., Ed., \"Computation\
    \ of the Internet\n               Checksum via Incremental Update\", RFC 1624,\n\
    \               DOI 10.17487/RFC1624, May 1994,\n               <http://www.rfc-editor.org/info/rfc1624>.\n\
    \   [IPv6]      Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n  \
    \             (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n      \
    \         December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [KEYWORDS]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119,\n               DOI 10.17487/RFC2119, March 1997,\n\
    \               <http://www.rfc-editor.org/info/rfc2119>.\n   [OWAMP]     Shalunov,\
    \ S., Teitelbaum, B., Karp, A., Boote, J., and M.\n               Zekauskas, \"\
    A One-way Active Measurement Protocol\n               (OWAMP)\", RFC 4656, DOI\
    \ 10.17487/RFC4656, September 2006,\n               <http://www.rfc-editor.org/info/rfc4656>.\n\
    \   [TWAMP]     Hedayat, K., Krzanowski, R., Morton, A., Yum, K., and J.\n   \
    \            Babiarz, \"A Two-Way Active Measurement Protocol (TWAMP)\",\n   \
    \            RFC 5357, DOI 10.17487/RFC5357, October 2008,\n               <http://www.rfc-editor.org/info/rfc5357>.\n\
    \   [TWAMP-Reflect]\n               Morton, A. and L. Ciavattone, \"Two-Way Active\
    \ Measurement\n               Protocol (TWAMP) Reflect Octets and Symmetrical\
    \ Size\n               Features\", RFC 6038, DOI 10.17487/RFC6038, October 2010,\n\
    \               <http://www.rfc-editor.org/info/rfc6038>.\n   [UDP]       Postel,\
    \ J., \"User Datagram Protocol\", STD 6, RFC 768,\n               DOI 10.17487/RFC768,\
    \ August 1980,\n               <http://www.rfc-editor.org/info/rfc768>.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [IEEE1588]  IEEE, \"IEEE Standard for a Precision\
    \ Clock\n               Synchronization Protocol for Networked Measurement and\n\
    \               Control Systems\", IEEE Std 1588-2008,\n               DOI 10.1109/IEEESTD.2008.4579760,\
    \ July 2008.\n   [IPPMIPsec] Pentikousis, K., Ed., Zhang, E., and Y. Cui,\n  \
    \             \"IKEv2-Derived Shared Secret Key for the One-Way Active\n     \
    \          Measurement Protocol (OWAMP) and Two-Way Active\n               Measurement\
    \ Protocol (TWAMP)\", RFC 7717,\n               DOI 10.17487/RFC7717, December\
    \ 2015,\n               <http://www.rfc-editor.org/info/rfc7717>.\n   [RFC7821]\
    \   Mizrahi, T., \"UDP Checksum Complement in the Network Time\n             \
    \  Protocol (NTP)\", RFC 7821, DOI 10.17487/RFC7821,\n               March 2016,\
    \ <http://www.rfc-editor.org/info/rfc7821>.\n   [ZeroChecksum]\n             \
    \  Fairhurst, G. and M. Westerlund, \"Applicability Statement\n              \
    \ for the Use of IPv6 UDP Datagrams with Zero Checksums\",\n               RFC\
    \ 6936, DOI 10.17487/RFC6936, April 2013,\n               <http://www.rfc-editor.org/info/rfc6936>.\n"
- title: Appendix A.  Checksum Complement Usage Example
  contents:
  - "Appendix A.  Checksum Complement Usage Example\n   Consider a session between\
    \ an OWAMP sender and an OWAMP receiver, in\n   which the sender transmits test\
    \ packets to the receiver.\n   The sender's software layer generates an OWAMP\
    \ test packet with a\n   timestamp T and a UDP Checksum value U.  The value of\
    \ U is the\n   checksum of the UDP header, UDP payload, and pseudo-header.  Thus,\n\
    \   U is equal to:\n                        U = Const + checksum(T)          \
    \            (1)\n   Where \"Const\" is the checksum of all the fields that are\
    \ covered by\n   the checksum, except the timestamp T.\n   Recall that the sender's\
    \ software emits the test packet with a\n   Checksum Complement field, which is\
    \ simply the last 2 octets of the\n   padding.  In this example, it is assumed\
    \ that the sender initially\n   assigns zero to these 2 octets.\n   The sender's\
    \ timestamping engine updates the Timestamp field to the\n   accurate time, changing\
    \ its value from T to T'.  The sender also\n   updates the Checksum Complement\
    \ field from zero to a new value C,\n   such that:\n                  checksum(C)\
    \ = checksum(T) - checksum(T')           (2)\n   When the test packet is transmitted\
    \ by the sender's timestamping\n   engine, the value of the checksum remains U\
    \ as before:\n      U = Const + checksum(T) = Const + checksum(T) + checksum(T')\
    \ -\n          checksum(T') = Const + checksum(T') + checksum(C)          (3)\n\
    \   Thus, after the timestamping engine has updated the timestamp,\n   U remains\
    \ the correct checksum of the packet.\n   When the test packet reaches the receiver,\
    \ the receiver performs a\n   conventional UDP Checksum computation, and the computed\
    \ value is U.\n   Since the Checksum Complement is part of the padding, the value\
    \ of\n   checksum(C) is transparently included in the computation, as per\n  \
    \ Equation (3), without requiring special treatment by the receiver.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author gratefully acknowledges Al Morton, Greg Mirsky,\
    \ Steve\n   Baillargeon, Brian Haberman, and Spencer Dawkins for their helpful\n\
    \   comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tal Mizrahi\n   Marvell\n   6 Hamada St.\n   Yokneam, 20692\n\
    \   Israel\n   Email: talmi@marvell.com\n"
