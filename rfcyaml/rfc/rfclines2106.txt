Abstract This memo describes the Data Link Switching Remote Access Protocol that is used between workstations and routers to transport SNA/ NetBIOS traffic over TCP sessions.
Any questions or comments should be sent to drap@cisco.com.
Since the Data Link Switching Protocol, RFC 1795, was published, some software vendors have begun implementing DLSw on workstations.
The implementation of DLSw on a large number of workstations raises several important issues that must be addressed.
Scalability is the major concern.
For example, the number of TCP sessions to the DLSw router increases in direct proportion to the number of workstations added.
Since DLSw is a switch to  switch protocol, it is not efficient when implemented on workstations.
DRAP addresses the above issues.
It introduces a hierarchical structure to resolve the scalability problems.
All workstations are clients to the router (server) rather than peers to the router.
This creates a client/server model.
It also provides a more efficient protocol between the workstation (client) and the router (server).
Running DLSw on a large number of workstations creates a scalability problem.
Figure 2 1 shows a typical DLSw implementation on a workstation.
The workstations are connected to the central site DLSw router over the IP network.
As the network grows, scalability will become an issue as the number of TCP sessions increases due to the growing number of workstations.
DLSw Remote Access Protocol solves the scalability problem.
In a large network, DRAP addresses the scalability problem by significantly reducing the number of peers that connect to the central site router.
The workstations (DRAP client) and the router (DRAP server) behave in a Client/Server relationship.
Workstations are attached to a DRAP server.
A DRAP server has a single peer connection to the central site router.
In a DLSw network, each workstation needs a MAC address to communicate with a FEP attached to a LAN.
When DLSw is implemented on a workstation, it does not always have a MAC address defined.
For example, when a workstation connects to a router through a modem via PPP, it only consists of an IP address.
In this case, the user must define a virtual MAC address.
This is administratively intensive since each workstation must have an unique MAC address.
DRAP uses the Dynamic Address Resolution protocol to solve this problem.
The Dynamic Address Resolution protocol permits the server to dynamically assign a MAC address to a client without complex configuration.
For a client to initiate a session to a server, the workstation sends a direct request to the server.
The request contains the destination MAC address and the destination SAP.
The workstation can either specify its own MAC address, or request the server to assign one to it.
The server's IP address must be pre configured on the workstation.
If IP addresses are configured for multiple servers at a workstation, the request can be sent to these servers and the first one to respond will be used.
For a server to initiate a session to a client, the server sends a directed request to the workstation.
The workstation must pre  register its MAC address at the server.
This can be done either by configuration on the server or registration at the server (both MAC addresses and IP addresses will be registered).
The transport used between the client and the server is TCP.
Before a TCP session is established between the client and the server, no message can be sent.
The default parameters associated with the TCP connections between the client and the server are as follows:
There is only one TCP connection between the client and the server.
It is used for both read and write operations.
The DRAP protocol is contained in the DRAP header, which is common to all frames passed between the DRAP client and the server.
This header is 4 bytes long.
The next section will explain the details.
The next part is the DRAP Data.
The structure and the size are based on the type of messages carried in the DRAP frame.
The DRAP data is used to process the frame, but it is optional.
The third part of the frame is the user data, which is sent by the local system to the remote system.
The size of this block is variable and is included in the frame only when there is data to be sent to the remote system.
The DRAP header is used to identify the message type and the length of the frame.
This is a general purpose header used for each frame that is passed between the DRAP server and the client.
More information is needed for frames like CAN U REACH
, therefore, it is passed to the peer as DRAP data.
The structure of the DRAP data depends on the type of frames, and will be discussed in detail in later sections.
The Protocol ID uses the first 4 bits of this field and is set to "1000".
The Version Number uses the next 4 bits in this field and is set to "0001".
The message type is the DRAP message type.
The Total Packet length is the length of the packet including the DRAP header, DRAP data and User Data.
The minimum size of the packet is 4, which is the length of the header.
Most of the Drap frames are based on the existing DLSw frames and have the same names.
The information in the corresponding DRAP and DLSw frames may differ; but the functionalities are the same.
Thus the DLSw State Machine is used to handle these DRAP frames.
Some new DRAP frames were created to handle special DRAP functions.
For example, the new DRAP frames, I CANNOT REACH and START DL FAILED provide negative acknowledgment.
The DLSw frames not needed for DRAP, are dropped.
The following table lists and describes all available DRAP messages: DRAP Frame Name
Find if the station given is reachable
Data Link Session Flow Control Message
Connectionless Datagram Frame for a circuit CAP XCHANGE
Disconnect Peer Connection Request CLOSE PEER RESPONSE 0x14
Peer keepalive response Table 3 1.
The DRAP data is used to carry information required for each DRAP frame.
This information is used by the Server or the Client and it does not contain any user data.
The DRAP data frame types are listed in the following sections.
Please note that the sender should set the reserved fields to zero and the receiver should ignore these fields.
CAN U REACH, I CAN REACH, and
These frame types are used to locate resources in a network.
A CAN U REACH frame is sent to the server to determine if the resource is reachable.
The server responds with an I
CAN REACH frame if it can reach the workstation identified in the CAN U REACH frame, or with an
I CANNOT REACH if the station is not reachable.
The server should not send the CAN U REACH frame to the clients.
When a server receives an explorer whose destination is a known client, the server should respond to it directly.
CAN U REACH, I CAN REACH, and
CAN U REACH, I CAN REACH, and
The MAC Address field carries the MAC address of the target workstation that is being searched.
This is a six byte MAC Address field.
The same MAC Address is returned in the I CAN REACH and the
Byte 6 is the source SAP.
The destination SAP is set to zero when an explorer frame is sent to the network.
If the sender did not receive a positive acknowledgment within a recommended threshold value of 60 seconds, the destination is considered not reachable.
START DL, DL STARTED, and START DL FAILED Frames
These frame types are used by DRAP to establish a link station (circuit).
The START DL frame is sent directly to the server that responds to the CAN U REACH frame.
When the server receives this frame, it establishes a link station with the source and destination addresses and saps provided in the START DL frame.
If the circuit establishment is successful, a DL STARTED frame is sent back as a response.
A failure will result in a START DL FAILED response.
The server can also send START DL frames to clients, to establish circuits.
START DL, DL STARTED, and START DL FAILED
START DL, DL STARTED, and START DL FAILED Data
The Host MAC address is the address of the target station if the session is initiated from the client, or it is the address of the originating station if the session is initiated from the server.
The next two fields are the Host and Client SAPs.
Each is one byte long.
The Host SAP is the SAP used by the station with the Host MAC address.
The Client SAP is the SAP used by the client.
The Origin Session ID, is the ID of the originating station that initiates the circuit.
The originating station uses this ID to identify the newly created circuit.
Before the START DL frame is sent to the target station, the originating station sets up a control block for the circuit.
This link station information is set because DRAP does not use a three way handshake for link station establishment.
In the DL STARTED and the START DL FAILED messages, the Origin Session ID is returned as received in the START DL frame.
The Target Session ID is set by the target station and returned in the DL STARTED message.
The Target Session ID is not valid for the START DL and the START DL FAILED frame, and should be treated as Reserved fields.
In the DL STARTED frame, it is the session ID that is used to set up this circuit by the target station.
The Largest Frame Size field is used to indicate the maximum frame size that can be used by the client.
It is valid only when it is set by the server.
The Largest Frame Size field must be set to zero when a frame is sent by the client.
Both START DL and DL STARTED use the Largest Frame Size field and only its rightmost 6 bits are used.
The format is defined in the IEEE 802.1D Standard, Annex C, Largest Frame Bits (LF).
Bit 3 to bit 5 are base bits.
Bit 0 to bit 2 are extended bits.
The Largest Frame Size field is not used in the START DL FAILED frame and must be set to zero.
r    r    b    b    b    e    e    e Figure 3 7.
Largest Frame Size Please note that if the client is a PU 2.1 node, the client should use the maximum I frame size negotiated in the XID3 exchange.
The Initial window size in the START DL frame gives the receive window size on the originating side, and the target DRAP station returns its receive window size in the DL STARTED frame.
The field is reserved in the START DL FAILED frame.
The usage of the window size is the same as the one used in DLSw.
Please refer to RFC 1795 for details.
The last two bits are reserved for future use.
They must be set to zero by the sender and ignored by the receiver.
If the sender of the START DL frame did not receive a START DL FAILED frame within a recommended threshold value of 60 seconds, the connection is considered unsuccessful.
HALT DL, HALT DL NOACK, and DL HALTED Frames
These frame types are used by DRAP to disconnect a link station.
A HALT DL frame is sent directly to the remote workstation to indicate that the sender wishes to disconnect.
When the receiver receives this frame, it tears down the session that is associated with the Original Session ID and the Target Session ID provided in the HALT DL frame.
The receiver should respond with the DL HALTED frame.
The DL HALTED frame should use the same Session ID values as the received HALT DL message without swapping them.
The HALT DL NOACK frame is used when the response is not required.
START DL, DL STARTED, and START DL FAILED Data 3.4.4.
XID FRAME, CONTACT STN, STN CONTACTED, INFO FRAME, FCM FRAME, and DGRM FRAME
These frame types are used to carry the end to end data or establish a circuit.
The Destination Session ID is the Session ID created in the START DL frame or the DL STARTED frame by the receiver.
The usage of the flow control flag is the same as the one used in DLSw.
Please refer to RFC 1795 for details.
Generic DRAP Data Format 3.4.5.
This frame type is used to send connectionless SNA and NetBIOS Datagram (UI) frames that do not have a link station associated with the source and destination MAC/SAP pair.
The difference between DGRM FRAME and DATA FRAME is that DGRM FRAME is used to send UI frames received for stations that have a link station opened, whereas DATA FRAME is used for frames with no link station established.
The definition of the first 8 bytes is the same as the START DL frame.
The Broadcast Type field indicates the type of broadcast frames in use; Single Route Broadcast, All Route Broadcast, or Directed.
The target side will use the same broadcast type.
In the case of Directed frame, if the RIF information is known, the target peer can send a directed frame.
If not, a Single Route Broadcast frame is sent.
In DRAP, the capability exchange frame is used to exchange the client's information, such as its MAC address, with the server.
If a DRAP client has its own MAC address defined, it should put it in the MAC address field.
Otherwise, that field must be set to zero.
When the DRAP server receives the CAP XCHANGE frame, it should cache the MAC address if it is non zero.
The DRAP server also verifies that the MAC address is unique.
The server should return a CAP XCHANGE response frame with the MAC address supplied by the client if the MAC address is accepted.
If a client does not have its own MAC address, the server should assign a MAC address to the client and put that address in the CAP XCHANGE command frame.
A client should record the new MAC address assigned by the server and return a response with the assigned MAC address.
If the client cannot accept the assigned MAC address, another CAP XCHANGE command with the MAC address field set to zero should be sent to the server.
The server should allocate a new MAC address for this client.
During the capability exchange, both the client and the server can send command frames.
The process stops when either side sends a CAP XCHANGE response frame.
When the response frame is sent, the MAC address in the CAP XCHANGE frame should be the same as the one in the previous received command.
The sender of the CAP XCHANGE response agrees to use the MAC address defined in the previous command.
The number of CAP XCHANGE frames that need to be exchanged is determined by the client and the server independently.
When the number of exchange frames has exceeded the pre defined number set by either the server or the client, the session should be brought down.
The flag is used to show the capability of the sender.
The following list shows the valid flags: 0x01 NetBIOS support.
If a client sets this bit on, the server will pass all NetBIOS explorers to this client.
If this bit is not set, only SNA traffic will be sent to this client.
0x02 TCP Listen Mode support.
If a client supports TCP listen mode, the server will keep the client's MAC and IP addresses even after the TCP session is down.
The cached information will be used for server to connect out.
If a client does not support TCP listen mode, the cache will be deleted as soon as the TCP session is down.
If this bit is set, it is a command, otherwise, it is a response.
The values 0x01 and 0x02 are used only by the client.
When a server sends the command/response to a client, the server does not return these values.
Starting with the Reserved field, implementors can optionally implement the Capability Exchange Control Vector.
Each Capability Exchange Control Vector consists of three fields: Length (1 byte), Type (1 byte), and Data (Length 2 bytes).
Two types of Control Vectors are defined: SAP LIST and VENDOR CODE (described below).
To ensure compatibility, implementors should ignore the unknown Control Vectors instead of treating them as errors.
Length: 2 n bytes, where n ranges from 1 to 16.
This control vector lists the SAPs that the client can support.
The maximum number of SAPs a client can define is 16.
Therefore, the length of this Control Vector ranges from 3 to 18.
If the SAP LIST is not specified in the capability exchange, the server assumes that the client can support all the SAP values.
For example, if a client can only support SAP 4 and 8, then the following Control Vectors should be sent: "0x04, 0x01, 0x04, 0x08".
The first byte indicates the length of 4.
The second byte indicates the control vector type of SAP LIST.
The last two bytes indicate the supported SAP values; 0x04 and 0x08.
This Control Vector is used only by the client.
If the server accepts this Control Vector, it must return the same Control Vector to the client.
Each vendor is assigned a vendor code that identifies the vendor.
This Control Vector does not require a response.
After the receiver responds to a Control Vector, if the capability exchange is not done, the sender does not have to send the same Control Vector again.
CAP XCHANGE Data Format 3.4.7.
This frame is used for peer connection management and contains a reason code field.
The following list describes the valid reason codes: 0x01 System shutdown.
This indicates shutdown in progress.
This code is used when there is no traffic between the server and the client, and the server or the client wishes to suspend the TCP session.
When the TCP session is suspended, all circuits should remain intact.
The TCP session should be re  established when new user data needs to be sent.
When the TCP session is re established, there is no need to send the CAP XCHANGE frame again.
This code is sent by the server when there is no MAC address is available from the MAC address pool.
CLOSE PEER REQ Data Format 3.4.8.
CLOSE PEER RSP, PEER TEST REQ, and PEER TEST
These three frames are used for peer connection management.
There is no data associated with them.
CLOSE PEER RSP CLOSE PEER RSP is the response for CLOSE PEER REQ.
PEER TEST REQ and PEER TEST RSP PEER TEST REQ and PEER TEST RSP are used for peer level keepalive.
Implementing PEER TEST REQ is optional, but PEER TEST RSP must be implemented to respond to the PEER TEST REQ frame.
When a PEER TEST REQ frame is sent to the remote station, the sender expects to receive the PEER TEST RSP frame in a predefined time interval (the recommended value is 60 seconds).
If the PEER TEST RSP frame is not received in the predefined time interval, the sender can send the PEER TEST REQ frame again.
If a predefined number of PEER TEST REQ frames is sent to the remote station, but no PEER TEST RSP frame is received (the recommended number is 3), the sender should close the TCP session with this remote station and terminate all associated circuits.
CLOSE PEER RSP, PEER TEST REQ, and PEER TEST RSP DRAP
