- title: __initial_text__
  contents:
  - '        A File Format for the Exchange of Images in the Internet

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an IAB standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"IAB\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a standard file format for the exchange of\n\
    \   fax-like black and white images within the Internet.  It is a product\n  \
    \ of the Network Fax Working Group of the Internet Engineering Task\n   Force\
    \ (IETF).\n   The standard is:\n        ** The file format should be TIFF-B with\
    \ multi-page files\n           supported.  Images should be encoded as one TIFF\
    \ strip\n           per page.\n        ** Images should be compressed using MMR\
    \ when possible.  Images\n           may also be MH or MR compressed or uncompressed.\
    \  If MH or MR\n           compression is used, scan lines should be \"byte-aligned\"\
    .\n        ** For maximum interoperability, image resolutions should\n       \
    \    either be 600, 400, or 300 dpi; or else be one of the\n           standard\
    \ Group 3 fax resolutions (98 or 196 dpi\n           vertically and 204 dpi horizontally).\n\
    \   Note that this specification is self contained and an implementation\n   should\
    \ be possible without recourse to the TIFF references, and that\n   only the specific\
    \ TIFF documents cited are relevant to this\n   specification.  Updates to the\
    \ TIFF documents do not change this\n   specification.\n   Experimentation with\
    \ this file format specified here is encouraged.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The purpose of this document is to define a standard file\
    \ format for\n   exchange of black and white images using the Internet.  Since\
    \ many\n   organizations have already started to accumulate and exchange scanned\n\
    \   documents it is important to reach agreement about an interchange\n   file\
    \ format in order to promote and facilitate the exchange and\n   distribution\
    \ of such documents.  These images may originate from\n   scanners, software,\
    \ or facsimile (fax) machines.  They may be\n   manipulated by software, communicated,\
    \ shared, duplicated, displayed,\n   printed by laser printers, or faxed.\n  \
    \ This file format provides for the uniform transfer of high quality\n   images\
    \ at a reasonable cost and with reasonable speed whether these\n   files are generated\
    \ by scanners, totally by software (e.g., text-to-\n   fax, bitmap-to-fax, OCR,\
    \ etc), or by fax.  Also the intent of this\n   document is to remain compatible\
    \ with future moves to multi-level\n   (i.e., gray-scale), higher resolution,\
    \ or color images.  The format\n   proposed here is supported by both commercially\
    \ available hardware\n   and commercial and public domain software for most popular\
    \ platforms\n   in current use.\n   The file format for images is a totally separate\
    \ issue from how such\n   files are to be communicated.  For example, FTP or SMTP\
    \ could be used\n   to move an image file from one host to another, although there\
    \ are\n   complications in the use of SMTP as currently implemented due to file\n\
    \   size and the need to move binary data.  (There is currently a\n   proposal\
    \ for removing these limitations from SMTP and in particular\n   extending it\
    \ to allow binary data.  See reference [1].)\n   One major potential application\
    \ of the communications format defined\n   here is to allow images to be sent\
    \ to fax machines using the\n   Internet.  It is intended that one or more separate\
    \ companion\n   documents will be formulated to address the issues of standardization\n\
    \   in the areas of protocols for transmitting images through the\n   Internet\
    \ and the issues of addressing fax machines and routing faxes.\n   Just as the\
    \ exchange format is separate from the transmission\n   mechanism, it is also\
    \ separate from how hosts store images.\n   This document specifies a common exchange\
    \ format; it does not require\n   a host to store images in the format specified\
    \ here, only to convert\n   between the host's local image storage formats and\
    \ the exchange\n   format defined here for the purpose of exchanging images with\
    \ other\n   hosts across the network.\n   This standard specifies the use of TIFF\
    \ (Tagged Image File Format,\n   see below) as a format for exchange of image\
    \ files.  This is not a\n   specific image encoding, but a framework for many\
    \ encoding\n   techniques, that can be used within the TIFF framework.  For example,\n\
    \   within TIFF it is possible to use MMR (the data encoding of CCITT\n   Group\
    \ 4 fax, see below), MH or MR (the data encodings of CCITT Group\n   3 fax), or\
    \ other encoding methods.\n   Which encoding technique to use is not specified\
    \ here.  Instead, with\n   time the encoding schemes used by most document providers\
    \ will emerge\n   as the de-facto standard.  Therefore, we do not declare any\
    \ as \"the\n   standard data encoding scheme,\" just as we do not declare that\n\
    \   English is the standard publication language.  (However, we expect\n   that\
    \ most document providers will use MMR in the immediate future\n   because it\
    \ offers much better compression ratios than MH or MR.)\n   Similarly, TIFF does\
    \ not require that an image be communicated at a\n   specific resolution.  Resolution\
    \ is a parameter in the TIFF\n   descriptive header.  We do suggest that images\
    \ now be sent using one\n   of a set of common resolutions in the interests of\
    \ interoperability,\n   but the format accommodates other resolutions that may\
    \ be required by\n   specialized applications or changing technologies.\n   Occasionally,\
    \ image files will have to be converted, such as in the\n   case where a document\
    \ that was scanned at 400 dpi is to be printed on\n   a 300 dpi printer.  This\
    \ conversion could be performed by the\n   document provider, by the consumer,\
    \ or by a third party.  This\n   document specifies neither who performs the conversion,\
    \ nor which\n   algorithms should be used to accomplish it.\n   Note that this\
    \ standard does not attempt to define an exchange format\n   for all image types\
    \ that may be transmitted in the Internet.  Nothing\n   in this standard precludes\
    \ it from being used for other image type\n   such as gray-scale (e.g., JPEG)\
    \ or color images but, for the purposes\n   of standardization, the scope of this\
    \ document is restricted to\n   monochromatic bitmapped images.\n   The developers\
    \ of this standard recognize that it may have a limited\n   lifespan as Office\
    \ Document Architecture (ODA) matures and comes into\n   use in the Internet;\
    \ ultimately the class of images covered by this\n   standard will likely be subsumed\
    \ by the more general class of images\n   supported by the ODA standards.  However,\
    \ at present, there does not\n   appear to be a sufficient installed base of ODA\
    \ compliant software\n   and the ODA standards are not fully mature.  This standard\
    \ is\n   intended to fill the need for a common image transfer format until\n\
    \   ODA is ready.  Finally, we believe that it should be possible to\n   automatically\
    \ map images encoded in the format specified here into a\n   future ODA-based\
    \ image interchange format, thus providing a\n   reasonable transition path to\
    \ these future standards.\n"
- title: 2.  Relationship to Fax
  contents:
  - "2.  Relationship to Fax\n   Transmission of facsimile (fax) images over phone\
    \ lines is becoming\n   increasingly widespread.  The standard of most fax machines\
    \ in the\n   U.S.  is CCITT Group 3 (G3), specified in Recommendations T.4 and\n\
    \   T.30 [2] and in EIA Standards EIA-465 and EIA-466.  G3 faxes are 204\n   dots\
    \ per inch (dpi) horizontally and 98 dpi (196 dpi optionally, in\n   fine-detail\
    \ mode) vertically.  Since G3 neither assumes error free\n   transmission nor\
    \ retransmits when errors occur, the encoding scheme\n   used is differential\
    \ only over small segments never exceeding 2 lines\n   at standard resolution\
    \ or 4 lines for fine-detail.  (The incremental\n   G3 encoding scheme is called\
    \ two-dimensional and the number of lines\n   so encoded is specified by a parameter\
    \ called k.)\n   CCITT Group 4 fax (G4) is defined by the T.400 and T.500 series\
    \ of\n   Recommendations as well as Recommendation T.6 [2].  It provides for\n\
    \   400 dpi (both vertical and horizontal) and is a fully two-dimensional\n  \
    \ encoding scheme (k is infinite) called MMR (Modified Modified READ,\n   where\
    \ READ stands for: Relative Element Address Designate).  G4\n   assumes an error\
    \ free transmission medium (generally an X.25 Public\n   Data Network, or PDN).\
    \  Because of this, G4 is not in widespread use\n   in the U.S. today.\n   The\
    \ traditional fax bundles together four independent issues:\n        (1) Data\
    \ presentation and compression;\n        (2) Data transmission;\n        (3) Image\
    \ input from paper (\"scanning\"); and\n        (4) Image output to paper (\"\
    printing\").\n   This bundling supports, for example, the high quality CCITT Group\
    \ 4\n   (G4) images (400x400 dpi) but only over X.25 public data networks\n  \
    \ with error correction,  and similarly it supports the mid-quality\n   CCITT\
    \ Group 3 (204x98 and 204x196 dpi) but only over phone voice\n   circuits (the\
    \ Switched Telephone Network, or STN) without error\n   correction.  This bundling\
    \ does not support the use of any other data\n   transmission capabilities (e.g.,\
    \ FTP over LANs and WANs), nor\n   asynchrony between the scanning and the printing,\
    \ nor image storage,\n   nor the use of the popular laser printers for output\
    \ (even though\n   they are perfectly capable of doing so).\n   In conventional\
    \ fax, images are never stored.  In today's computer\n   network environment,\
    \ a better model is:\n        (1) Images are scanned into files or created by\
    \ software;\n        (2) These image files are stored, manipulated, or communicated;\n\
    \        (3) Images in a file are printed or displayed.\n   The only feature of\
    \ the CCITT fax that should be used is the encoding\n   technique (preferably\
    \ MMR, but with MR or MH allowed) which may be\n   implemented with a variety\
    \ of fax-oriented chips at low cost due to\n   the popularity of fax.\n   \"Sending\
    \ a fax\" means both encoding (and decoding) the fax images as\n   well as transmitting\
    \ the data.  Since the Internet ALREADY provides\n   several mechanisms for data\
    \ transmission (in particular, FTP for\n   general file transmission), it is unnecessary\
    \ to use the data\n   transmission methods specified in the CCITT standard.  Within\
    \ the\n   Internet, each fax image should be stored in a file and these files\n\
    \   could be transferred (e.g., using FTP, SMTP, RPC-based methods,\n   etc.).\n\
    \   Fax machines should be considered just as scanners and printers are,\n   as\
    \ I/O devices between paper and files; but not as a transmission\n   means.  Higher\
    \ quality Group 4 images are thus supported at low cost,\n   while enjoying the\
    \ freedom to use any computerized file transfer and\n   duplication mechanism,\
    \ standard laser printers, multiple printing\n   (possibly at multiple remote\
    \ sites) of the same image without having\n   to rescan it physically, and a variety\
    \ of software for various\n   processing of these images, such as OCR and various\
    \ drawing programs.\n   We should be able to interoperate with files created by\
    \ fax machines,\n   scanners, or software and to be able to print all of them\
    \ on fax\n   machines or on laser printers.\n   The CCITT Recommendations assume\
    \ realtime communications between fax\n   machines and do not therefore specify\
    \ any kind of fax file format.\n   We propose using TIFF [3] which seems to be\
    \ emerging as a standard,\n   for encapsulation of encoded images.  Because they\
    \ assume realtime\n   communications, the CCITT fax protocols require negotiations\
    \ to take\n   place between the sender and receiver.  For example, they negotiate\n\
    \   whether to use two-dimensional coding (and with what k parameter) and\n  \
    \ what (if any) padding there is between scan lines.\n   In our approach, the\
    \ image in the file is already compressed in a\n   particular manner.  If it is\
    \ to be sent to an ordinary fax machine\n   using a fax board/modem, that board\
    \ will perform the negotiations\n   with the receiving fax machine.  In the cases\
    \ where the receiver\n   cannot handle the type of compression used in the file,\
    \ it will be\n   necessary to convert the image to another compression scheme\
    \ before\n   transmission.  (Most fax cards seem to either store images using\
    \ the\n   default values of the parameters which are negotiated or in a format\n\
    \   which can quickly be converted to this.  With currently available\n   hardware\
    \ and software, any necessary format conversion should be easy\n   to accomplish.)\n\
    \   In conventional fax, if the compression used for a particular image\n   is\
    \ \"negative\" (i.e., the compressed form is larger than the\n   uncompressed\
    \ form, something that happens quite frequently with\n   dithered photographic\
    \ images), the larger compressed form of the\n   image is still sent.  If the\
    \ images are first scanned into files,\n   this problem could be recognized and\
    \ the smaller, uncompressed file\n   sent instead.  (Also, Recommendations T.4\
    \ and T.6 [2] allow for an\n   \"uncompressed mode.\"  Thus, lines which have\
    \ negative compression may\n   each be sent uncompressed.  However, very few G3\
    \ fax machines support\n   this mode.)\n"
- title: 3.  Image File Format
  contents:
  - "3.  Image File Format\n   Image files should be in the TIFF-B format which is\
    \ the bi-level\n   subclass of TIFF.  TIFF and TIFF-B are described in reference\
    \ [3],\n   cited at the end of this document.  Images should be compressed using\n\
    \   MMR (the G4 compression scheme) because it offers superior\n   compression\
    \ ratios.  However, images may also be compressed using MH\n   or MR (the G3 methods).\
    \  MMR offers much better compression ratios\n   than these (which are used in\
    \ G3 fax because of the lack of an\n   error-free communications path).\n   TIFF-F,\
    \ described in [4], is the proposed subclass of TIFF-B for fax\n   images.  However,\
    \ since TIFF-F was intended for use with G3, it\n   recommends against certain\
    \ features we recommend.  Specifically, it\n   suggests not using MMR or MR compression\
    \ (we recommend MMR and allow\n   MR) and prohibits uncompressed mode (which we\
    \ allow and suggest for\n   some photographic images).  Apart from these, the\
    \ TIFF-F restrictions\n   should be followed.  (Complete compatibility between\
    \ the format\n   specified here and TIFF-F can only be guaranteed for MH compressed\n\
    \   images.)\n        [NOTE: Aldus Corp., the TIFF Developer, considers fax\n\
    \        applications to be outside the scope of mainstream TIFF\n        since\
    \ it is not a part of general publishing which is\n        what TIFF was originally\
    \ designed for.  They specify the\n        LZW [5] compression scheme rather than\
    \ MMR.  We, however,\n        are concerned with the transmission and storage\
    \ of images\n        rather than publishing.  Therefore, we are more concerned\n\
    \        with compression ratios and compatibility with CCITT fax\n        than\
    \ Aldus is.]\n   TIFF itself allows for gray-scale and color images.  Image files\n\
    \   should be restricted to TIFF-B for now because most of the currently\n   available\
    \ hardware is bi-level (1 bit per pixel).  In the future,\n   when gray-scale\
    \ or color scanners, printers, and fax becomes\n   available, the file format\
    \ suggested here can already accommodate it.\n   (For example, though JPEG is\
    \ not currently a TIFF defined compression\n   type, work is currently underway\
    \ for including it as such.)\n        [NOTE: In this document, we will use the\
    \ term \"reader\"\n        or \"TIFF reader\" to refer to the process or device\n\
    \        which reads and parses a TIFF file.]\n"
- title: 3.A. TIFF File Format
  contents:
  - "3.A. TIFF File Format\n   Figure 1 below (reproduced here from Figure 1 of reference\
    \ [3])\n   depicts the structure of a TIFF file.\n   TIFF files start with a file\
    \ header which specifies the byte order\n   used in the file (i.e., Big or Little\
    \ Endian), the TIFF version\n   number, and points to the first \"Image File Directory\"\
    \ (IFD).  If the\n   first two bytes are hex 4D4D, the byte order is from most\
    \ to least\n   significant for both 16 and 32 bit integers (Big Endian).  If the\n\
    \   first two bytes are hex 4949, the byte order is from least to most\n   significant\
    \ (Little Endian).  In both formats, character strings are\n   stored into sequential\
    \ bytes and are null terminated.\n   The next two bytes (called the TIFF Version)\
    \ must be 42 (hex 002A).\n   This does not refer to the current TIFF revision\
    \ number.  The\n   following 4 bytes contain the offset (in bytes from the beginning\
    \ of\n   the file) to the first IFD.\n   An IFD contains a 2 byte count of the\
    \ number of entries in the IFD, a\n   sequence of 12 byte directory entries, and\
    \ a 4 byte pointer to the\n   next IFD.  One of these fields (StripOffsets) points\
    \ to (parts of) an\n   image in the file.  There may be more than one image in\
    \ the file\n   (e.g., a \"multi-page\" TIFF file) and therefore more then one\
    \ IFD.\n   IFD field entries may appear in any order.\n   Each directory entry\
    \ is 12 bytes and consists of a tag, its type, a\n   length, and an offset to\
    \ its value.  If the value can fit into 4\n   bytes (i.e., if the type is BYTE,\
    \ SHORT, or LONG), the actual value\n   rather than an offset is given.  If the\
    \ value is less than 4 bytes\n   (i.e., if the type is BYTE or SHORT), it is left-justified\
    \ within the\n   4 byte value offset.  More details about directory entries and\
    \ the\n   possible tags will be given in Section 3.C.\n   All pointers (called\
    \ offsets in the TIFF reference [3]) are the\n   number of bytes from the beginning\
    \ of the file and are 4 bytes long.\n   The first byte of the file has an offset\
    \ of 0.  In the case of only\n   one image per file, there should therefore be\
    \ only one IFD.  The last\n   IFD's pointer to the next IFD is set to hex 00000000\
    \ (32 bits).\n   The entries in an IFD must be sorted in ascending order by Tag.\n\
    \              Header\n        +--------+--------+                     Directory\
    \ Entry\n      0 |        |        | Byte Order        +--------+--------+\n \
    \       +--------+--------|               X   |        |        | Tag\n      2\
    \ |        |        | Version(42)       +--------+--------|\n        +--------+--------|\
    \               X+2 |        |        | Type\n      4 |        |        | Offset\
    \ of         +--------+--------|\n        +-     - A -     -+  0th IFD      X+4\
    \ |        |        |\n      6 |        |        |                   +-      \
    \         -+ Length\n        +--------+--------+                   |        |\
    \        |\n                 |                            +--------+--------+\n\
    \                 |                        X+8 |        |        | Value\n   \
    \              |                            +-     - Y -     -+   or\n       \
    \          V                            |        |        | Value\n          \
    \                                    +--------+--------+ Offset\n            \
    \    IFD\n        +--------+--------+                            |\n  A     |\
    \      - B -      | Entry Count                |\n        +--------+--------|\
    \                            |\n        |        |        |                  \
    \          V\n  A+2                       Entry 0\n        |        |        |\
    \                   +--------+--------+\n        +--------+--------+         \
    \          |        |        |\n        |        |        |                 Y\
    \                     Value\n  A+14                      Entry 1           | \
    \       |        |\n        |        |        |                   +--------+--------|\n\
    \        +--------+--------+\n        |        |        |\n  A+26            \
    \          Entry 2\n        |        |        |\n        +--------+--------+\n\
    \        |        |        |    .\n                               .\n        |\
    \        |        |    .\n        +--------+--------+\n        |        |    \
    \    |\n                             Entry B-1\n        |        |        |\n\
    \        +--------+--------+\n        |        |        |  Offset of\n"
- title: A+2+B*12       - C -      +  Next IFD
  contents:
  - "A+2+B*12       - C -      +  Next IFD\n        |        |        |\n        +--------+--------+\n\
    \                 |\n                 V\n            (next IFD)\n            \
    \     Figure 1: The Structure of a TIFF File\n"
- title: 3.B. Image Format and Encoding Issues
  contents:
  - "3.B. Image Format and Encoding Issues\n   Images in TIFF files are organized\
    \ as horizontal strips for fast\n   access to individual rows.  One can specify\
    \ how many rows there are\n   in each strip and all of the strips are the same\
    \ size (except\n   possibly the last one).  Each strip must begin on a byte boundary\
    \ but\n   successive rows are not so required.  For two-dimensional G3\n   compression\
    \ (MR), each strip must begin with an \"absolute\" one-\n   dimensional line.\
    \  For MMR (G4) compression, each strip must be\n   encoded as if it were a separate\
    \ image.\n   For a variety of reasons, each page must be a single strip (e.g.,\
    \ not\n   broken up into multiple strips).\n   One problem with multiple strips\
    \ per page is that images which come\n   from G4 fax machines as well as most\
    \ scanned images will be generated\n   as a single strip per page.  These would\
    \ have to be decoded and re-\n   encoded as multiple strips (remember that for\
    \ MMR compression, each\n   strip must be start with a one-dimensionally encoded\
    \ line).\n   Another problem with multiple strips per page arises in MR\n   compression.\
    \  Here, there MAY be at most k-1 two-dimensionally\n   encoded lines following\
    \ a one-dimensionally encoded line, but this is\n   not required.  It is possible\
    \ to have one-dimensional lines more\n   frequently than every k lines.  However,\
    \ since each strip (except\n   possibly the last one) is required to be the same\
    \ size, it may be\n   necessary to re-encode the image to insure that each strip\
    \ starts\n   with a one-dimensional line.  This is not a problem if each page\
    \ is a\n   single strip.\n        [NOTE: The TIFF document [3] suggests using\
    \ strips which\n        are about 8K bytes long.  However, TIFF-F [4] recommends\n\
    \        that each page be a single strip regardless of its size.\n        The\
    \ format specified in this document follows the TIFF-F\n        recommendation.]\n\
    \   Also, as TIFF-F recommends, all G3 encoded images (MH and MR) should\n   be\
    \ \"byte-aligned.\"  This means that extra zero bits (fill bits) are\n   added\
    \ before each EOL (end-of-line) so that every line starts on a\n   byte boundary.\n\
    \   In addition, as in the TIFF-F specification, the RTC (Return to\n   Control\
    \ signal which consists of 6 continuous EOL's) of G3 shall not\n   be included\
    \ at the end of G3 encoded documents.  RTC is to be\n   considered part of the\
    \ G3 transmission protocol and not part of the\n   encoding.  Most, if not all,\
    \ G3 fax modems attach RTC to outgoing\n   images and remove it from incoming\
    \ ones.\n   For MMR (G4) encoded files, readers should be able to read images\n\
    \   with only one EOFB (End Of Facsimile Block) at the end of the page\n   and\
    \ should not assume that Facsimile Blocks are of any particular\n   size.  (It\
    \ has been reported that some MMR readers assume that all\n   Facsimile Blocks\
    \ are the maximum size.)\n   Systems may optionally choose to store the entire\
    \ image uncompressed\n   if the compression increases the size of the image file.\
    \  Also,\n   uncompressed mode (specified in Group3Options or Group4Options, see\n\
    \   below) allows portions of the image to be uncompressed.\n   The multi-page\
    \ capability of TIFF is supported and should be used for\n   multi-page documents.\
    \  TIFF files which have multiple pages have an\n   IFD for each page of the document\
    \ each of which describes and points\n   to a single page image.  (Note: though\
    \ the current TIFF specification\n   does not specifically prohibit having a single\
    \ IFD point to an image\n   which is actually multiple pages, with one strip for\
    \ each page, most\n   if not all TIFF readers would probably not be able to read\
    \ such a\n   file.  Therefore, this should not be done.)\n     [A NOTE ON TIFF\
    \ AND MULTI-PAGE DOCUMENTS:\n        Since most publications (e.g., reports, books,\
    \ and\n        magazine articles) are composed of more than a single\n       \
    \ page, multi-page TIFF files should be used where\n        appropriate.  However,\
    \ many current TIFF implementations\n        now only handle single-page files.\n\
    \        It is hoped that in the future, more TIFF implementations\n        will\
    \ handle multi-page files correctly.  In the meantime,\n        it would be useful\
    \ to develop a utility program which\n        could join several single-page TIFF\
    \ files into a single\n        multi-page file and also separate a multi-page\
    \ TIFF file\n        into several single page files.\n        For example, the\
    \ utility could take a single TIFF file\n        with N pages, called doc.tif,\
    \ and create the files\n        doc.000, doc.001, doc.002, ..., doc.N.  doc.000\
    \ would be\n        an ASCII listing of the files created.  This naming\n    \
    \    scheme is compatible with that used by the image systems\n        we have\
    \ seen which only handle single page files.\n        In going the other way, the\
    \ N+1 single page files could\n        be combined into a single multi-page TIFF\
    \ file.  In this\n        case, if the file doc.000 exists but contains information\n\
    \        contrary to what is found in looking for the files\n        doc.001,\
    \ doc.002, ..., the program would notify the user.]\n"
- title: 3.C. TIFF Fields
  contents:
  - "3.C. TIFF Fields\n   TIFF is tag or field based.  The various fields and their\
    \ format are\n   listed in [3].  There are Basic Fields (common to all TIFF files),\n\
    \   Informational Fields (which provide useful information to a user),\n   Facsimile\
    \ Fields (used here), and Private Fields.\n   Each directory entry contains:\n\
    \       The Tag for the field (2 bytes)\n       The field Type (2 bytes)\n   \
    \    The field Length (4 bytes)\n           (This is in terms of the data type,\
    \ not in bytes.  For\n            example, a single 16-bit word or SHORT has a\
    \ Length\n            of 1, not 2)\n       The Value Offset (4 bytes)\n      \
    \     (Pointer to the actual value, which must begin on a\n            word boundary.\
    \  Therefore, this offset will always\n            be an even number.  If the\
    \ Value fits into 4 bytes, the\n            Value Offset contains the Value instead.\
    \  If the Value\n            takes less than 4 bytes, it is left justified)\n\
    \   The allowed types and their codes are:\n        1 = BYTE        8-bit unsigned\
    \ integer (1 byte)\n        2 = ASCII       8-bit ASCII terminated with a null\
    \ (variable\n                        length)\n        3 = SHORT       16-bit unsigned\
    \ integer (2 bytes)\n        4 = LONG        32-bit unsigned integer (4 bytes)\n\
    \        5 = RATIONAL    Two LONGs (64 bits) representing the\n              \
    \          numerator and denominator of a fraction.\n                        In\
    \ this document, RATIONAL's will be written\n                        as numerator/denominator.\
    \ (8 bytes)\n   For ASCII, the Length specifies the number of characters and includes\n\
    \   the null.  It does not, however, include padding if such is\n   necessary.\n\
    \   (Note that ASCII strings of length 3 or less may be stored in the\n   Value\
    \ Offset field instead of being pointed to.)\n   The following fields should be\
    \ used in a TIFF image file.  Only the\n   Basic Fields are mandatory; the others\
    \ are optional (except that for\n   MH and MR encoded files, the Group3Options\
    \ Facsimile Field is\n   mandatory).  The optional fields have default values\
    \ which are given\n   in the TIFF specification.  (Note that the TIFF reference\
    \ [3]\n   recommends not relying on the default values.)\n   Some fields contain\
    \ one or more flag bits all stored as one value.\n   In these cases, the bit labeled\
    \ 0 is the least significant bit (i.e.,\n   Little Endian order).  Where there\
    \ is more than one suggested value\n   for a tag, the possible values are separated\
    \ by |.\n   Note that some fields (such as ImageLength or ImageWidth) can be of\n\
    \   more than one type.\n   It would be useful to develop a TIFF viewer and editor\
    \ which would\n   allow one to read, add, and edit the fields in a TIFF file.\
    \  Such an\n   editor would display fields in sorted order and force the inclusion\n\
    \   of all mandatory fields.  Also, resolution and position should always\n  \
    \ be displayed or specified together with their units.\n   3.C.1.  Basic Fields\
    \ (Mandatory)\n      Basic Fields are those which are fundamental to the pixel\n\
    \      architecture or visual characteristics of an image.  The following\n  \
    \    Basic Fields should be included in a TIFF image file:\n           FIELD NAME\n\
    \       (TAG in hex, TYPE)       VALUE           DESCRIPTION\n       ------------------\
    \       -----           -----------\n         BitsPerSample            1     \
    \        Number of bits\n          (0102, SHORT)                         per pixel\
    \ (bi-level for\n                                                now, but may\
    \ allow\n                                                more later)\n       \
    \  Compression              4             Type of Compression\n          (0103,\
    \ SHORT)      (could also be       1 = Uncompressed\n                        \
    \        1 or 3)           3 = G3 (MH or MR)\n                               \
    \                   4 = G4 (MMR)\n                                           \
    \      Use 4 if possible\n         ImageLength       <image's length>     Length\
    \ of the Image\n          (0101, SHORT                             in scan lines\n\
    \            or LONG)\n         ImageWidth         <image's width>     Width of\
    \ the Image\n          (0100, SHORT                             in pixels\n  \
    \          or LONG)\n         NewSubFileType     0 usually           Flag bits\
    \ indicating\n          (00FE, LONG)       bit 0: 1 if           the kind of image.\n\
    \                              reduced           (see the TIFF\n             \
    \                 resolution of        reference [3])\n                      \
    \        another image\n                             bit 1: 1 if\n           \
    \                   single page of a\n                              multi-page\
    \ image\n                             bit 2: 1 if\n                          \
    \    image defines a\n                              transparency\n           \
    \                   mask\n         Photometric-       0 for positive\n       \
    \    Interpretation    image (0 imaged\n          (0106, SHORT)      as white,\
    \ 1 as\n                             black)\n                            1 means\
    \ reverse\n                             black and white\n         RowsPerStrip\
    \    <Number of Rows>       Number of Rows in\n          (0116, SHORT        \
    \                  Each Strip.  Each\n           or LONG)                    \
    \         page should be a\n                                                single\
    \ strip.\n         SamplesPerPixel          1             (since are Bi-level\n\
    \          (0115, SHORT)                          images)\n         StripByteCounts\
    \    count1, count2...   Number of Bytes in\n          (0117, SHORTs         \
    \                 each strip of the\n            or LONGs)                   \
    \         images.  (The Value\n                                              \
    \   is an offset which\n                                                 points\
    \ to a series\n                                                 of counts, each\
    \ of\n                                                 which is the same\n   \
    \                                              Type, LONG or SHORT.\n        \
    \                                         The Length is the\n                \
    \                                 same as the number\n                       \
    \                          of strips.)\n         StripOffsets       off1, off2,...\
    \      Pointers to the strips\n          (0111, SHORTs                       \
    \   of the image (remember,\n            or LONGs)                           \
    \ one strip per page).\n                                                 (The\
    \ Value is an offset\n                                                  which\
    \ points to a\n                                                  series of offsets,\n\
    \                                                  each of which points\n    \
    \                                              to the actual image\n         \
    \                                         data for the strip.)\n         ResolutionUnit\
    \         2 | 3           Units of Resolution\n          (0128, SHORT)      See\
    \ Below, 3.C.6     2: Inches\n                                               \
    \   3: Centimeters\n         XResolution        See Below, 3.C.6    Resolution\
    \ in the X\n          (011A, RATIONAL)                       direction in pixels\n\
    \                                                 per ResolutionUnit\n       \
    \                                          (we suggest 400 dots\n            \
    \                                     per inch when possible)\n         YResolution\
    \        See Below, 3.C.6    Resolution in the Y\n          (011B, RATIONAL) \
    \                       direction in pixels\n                                \
    \                 per ResolutionUnit\n                                       \
    \          (we suggest 400 dots\n                                            \
    \     per inch when possible)\n   3.C.2.  Informational Fields (Optional)\n  \
    \    The following Informational Fields are optional.  They provide\n      useful\
    \ information to a user.  All Field values are ASCII strings.\n       NAME (TAG\
    \ in hex)                DESCRIPTION\n       ----------------                \
    \ -----------\n         Artist (013B)           Person Who Created the Image\n\
    \         DateTime (0132)         Date and Time of Image Creation\n         HostComputer\
    \ (013C)     Name of Computer Image was Created On\n         ImageDescription\
    \        A Short Text Description\n           (010E)\n         Make (010F)   \
    \          Manufacturer of Hardware (Scanner) Used\n         Model (0110)    \
    \        Model Number of Hardware (Scanner) Used\n         Software (0131)   \
    \      Software Package that Created the Image\n   3.C.3.  Facsimile Fields (Optional,\
    \ Mandatory for G3 Compression)\n      In addition to the above, the Facsimile\
    \ Fields below should be\n      used.  The TIFF document recommends that they\
    \ not be used for\n      interchange between applications, but they are now in\
    \ wide enough\n      use for just that.  These fields are optional and default\
    \ to 0\n      (all bits off).\n           FIELD NAME\n       (TAG in hex, TYPE)\
    \       VALUE               DESCRIPTION\n       ------------------       -----\
    \               -----------\n         Group3Options      bit 0: 1 for        \
    \ Flag bits indicating\n          (0124, LONG)       2-dimensional       Options\
    \ for G3\n                             coding\n                              (i.e.,\
    \ MR with\n                               k > 1)\n                           \
    \ bit 1: 1 if\n                             uncompressed\n                   \
    \          mode MAY be used,\n                             0 if uncompressed\n\
    \                             mode IS NOT used.\n                            bit\
    \ 2: 1 if fill     (As allowed by the G3\n                             bits have\
    \ been       protocol, fill bits\n                             added         \
    \       may be added between\n                                               \
    \   each line of data\n                                                  and the\
    \ EOL.  Since\n                                                  fill bits are\
    \ used to\n                                                  \"byte-align\" G3\
    \ image\n                                                  files, bit 2 should\
    \ be\n                                                  set to 1 for these\n \
    \                                                 images.)\n         Group4Options\
    \      bit 0: unused        Flag bits indicating\n          (0125, LONG)     \
    \ bit 1: 1 if          Options for G4\n                             uncompressed\n\
    \                             mode MAY be used,\n                            \
    \ if this bit is 0\n                             it means that\n             \
    \                uncompressed mode\n                             IS NOT used.\n\
    \   3.C.4.  Storage and Retrieval Fields (Optional)\n      The following fields\
    \ are optional and may be useful for document\n      storage and retrieval.\n\
    \           FIELD NAME\n       (TAG in hex, TYPE)                DESCRIPTION\n\
    \       ------------------                -----------\n         DocumentName \
    \              Name of the Document\n          (010D, ASCII)\n         PageName\
    \                   Name of the Page\n          (011D, ASCII)\n         PageNumber\
    \                 Page Number in a Multi-Page Document\n          (0129, SHORTs)\
    \             Two SHORT Values are specified, the\n                          \
    \           first is the page number and the\n                               \
    \      second is the total number of pages\n                                 \
    \    in the document.  The first page\n                                     is\
    \ page 0.  (NOTE:  This does not\n                                     necessarily\
    \ correspond to page\n                                     numbers which may be\
    \ printed\n                                     in the image.)\n         XPosition\
    \                  X Offset of the Left Side of\n          (011E, RATIONAL)  \
    \        the Image, in ResolutionUnits\n         YPosition                  Y\
    \ Offset of the Top of\n          (011F, RATIONAL)          the Image, in ResolutionUnits\n\
    \   3.C.5.  TIFF-F Fields (NOT Recommended)\n      TIFF-F defines the following\
    \ new fields for G3 (MH) encoded\n      images.  Since these fields are not defined\
    \ in TIFF-B itself,\n      their use is not recommended.  However, since TIFF-F\
    \ files may\n      include these tags for image data which came from a G3 fax\n\
    \      machine, readers should be prepared for them.\n      These three fields\
    \ deal with corrupted image data which is due to\n      the fact that G3 devices\
    \ may not perform error correction on bad\n      data.\n           FIELD NAME\n\
    \       (TAG in hex, TYPE)                DESCRIPTION\n       ------------------\
    \                -----------\n         BadFaxLines                Number of Bad\
    \ fax scan lines\n          (0146, SHORT or LONG)     encountered during fax reception\n\
    \                                    (but not necessarily in the file)\n     \
    \    CleanFaxData               0 means no bad lines received\n          (0147,\
    \ SHORT)             1 means bad lines were regenerated\n                    \
    \                    by the receiving device\n                               \
    \     2 means bad lines were detected\n                                      \
    \  but not regenerated\n        ConsecutiveBadFaxLines      The maximum number\
    \ of consecutive\n          (0148, SHORT or LONG)     bad fax lines (but not necessarily\n\
    \                                    in the file)\n   3.C.6.  More on Representing\
    \ Resolutions\n      The tags XResolution and YResolution are both RATIONALs,\
    \ i.e., the\n      ratio of two LONGS.  G3 fax resolutions are actually specified\
    \ in\n      dots (or lines) per mm while G4 is in dots per inch (actually,\n \
    \     dots per 25.4 mm).\n      For example, G3 horizontal resolution is defined\
    \ to be 1728 dots\n      per 215 mm which comes out to 80.4 dots per cm or about\
    \ 203 dots\n      per inch.  It is frequently referred to as just 200 dpi.  To\
    \ avoid\n      any possibility of problems due to round off error, this should\
    \ be\n      represented by having XResolution = 17280/215 and ResolutionUnit =\n\
    \      3 (cm).  However when reading, 204/1 or even 200/1 with\n      ResolutionUnit\
    \ = 2 (inches) should be recognized as representing\n      the same resolution.\n\
    \      For G4, on the other hand, the resolution 400 dots/inch should be\n   \
    \   represented by an XResolution of 400/1 and ResolutionUnit = 2.\n      The\
    \ following table shows various ways of representing the\n      standard resolutions\
    \ in order of preference:\n                   ResolutionUnit    XResolution  \
    \     YResolution\n                   --------------    -----------       -----------\n\
    \        G3 normal       3             17280/215         3850/100\n          \
    \              3                80/1           3850/100\n                    \
    \    3             17280/215          385/10\n                        3      \
    \          80/1            385/10\n                        2              2042/10\
    \          9779/100\n                        2               204/1           \
    \  98/1\n                        2               200/1            100/1\n    \
    \    G3 fine         3             17280/215           77/1\n                \
    \        3                80/1             77/1\n                        2   \
    \           2042/10         19558/100\n                        2             \
    \  204/1            196/1\n                        2               200/1     \
    \       200/1\n        G4 200 dpi      2               200/1            200/1\n\
    \        G4 300 dpi      2               300/1            300/1\n        Other\
    \ 300 dpi   2               300/1            300/1\n        G4 400 dpi      2\
    \               400/1            400/1\n        600 dpi         2            \
    \   600/1            600/1\n      It is suggested that Image readers be able to\
    \ handle all of the\n      above representations.\n"
- title: 4.  A Sample TIFF Image File
  contents:
  - "4.  A Sample TIFF Image File\n   Below is a sample of what might be in a TIFF\
    \ file for an MMR (G4)\n   encoded single image which is about 100K bytes compressed\
    \ at 400 dpi.\n   A generic outline is given first, followed by a more detailed\
    \ hex\n   listing.\n"
- title: 4.A. Sample File
  contents:
  - "4.A. Sample File\n   Comments are to the right and are preceded by a semicolon.\
    \  Note that\n   tags must be sorted in order of the tag codes.\n   0:, IFDADDR:,\
    \ and STRIP0: are addresses within the file and denote\n   the number of bytes\
    \ from the beginning of the file.\n   Header:\n    0:  Byte Order=     hex 4D4D\
    \        ;first bytes of the file, from\n                                    \
    \    ;most significant bit to least\n                                        ;significant\
    \ (big endian)\n        Version=        42 (hex 002A)   ;Must be 42\n        First\
    \ IFD=      IFDADDR         ;Address of first (and only) IFD\n   Image File Directory\
    \ (the only one in this example):\n   IFDADDR:\n        IFD Entry Count=     \
    \ 24        ;(NOT A TAG) Count of\n                                        ; Number\
    \ of IFD Entries\n        NewSubFileType=        0\n        ImageWidth=      \
    \   3400        ;8.5 inches at 400 dpi\n        ImageLength=        4400     \
    \   ;11 inches at 400 dpi\n        BitsPerSample=         1        ;Bi-Level\n\
    \        Compression=           4        ;MMR\n        Photometric-\n        \
    \   Interpretation=     0\n        DocumentName=       \"LAMap1\"\n        ImageDescription=\
    \   \"A map of Los Angeles\"\n        Make=               \"Fujitsu\"\n      \
    \  Model=              \"M3093E\"\n        StripOffsets=       <STRIP0>    ;There\
    \ is only one strip in\n                                        ;this example.\
    \  However, note\n                                        ;that strips can be\
    \ in any\n                                        ;order.  (Offsets are from the\n\
    \                                        ;beginning of the TIFF file.)\n     \
    \   SamplesPerPixel=       1        ;Bi-Level\n        RowsPerStrip=       4400\
    \        ;Entire image in 1 strip\n        StripByteCounts=    <COUNT0>    ;Byte\
    \ count of entire\n                                        ;compressed image\n\
    \        XResolution=        400/1\n        YResolution=        400/1\n      \
    \  XPosition=            0/1       ;position of left side of image\n        YPosition=\
    \            0/1       ;position of top of image\n        Group4Options=    hex\
    \ 00000002  ;bit 1 on means uncompressed\n                                   \
    \     ;mode MAY be used\n        ResolutionUnit=        2        ;Inches\n   \
    \     Software=           \"Xionics\"\n        DateTime=           \"1990:10:05\
    \ 15:00:00\"\n        Artist=             \"Joe Pro\"\n        HostComputer= \
    \      \"Tardis.Isi.Edu\"\n        Next IFD Pointer=  hex 00000000 ;(NOT A TAG)\
    \ Indicates no\n                                        ; more IFDs in this file\n\
    \    Image Data:\n    <STRIP0>:       <actual compressed image data>\n    [end\
    \ of TIFF file]\n   In this example there is only one strip.  Note that if there\
    \ were\n   more than one, the TIFF specification does not require them to be in\n\
    \   any particular order.  Strips may be given in any order and TIFF\n   readers\
    \ must use the StripOffsets to locate them.\n   Also, the TIFF document recommends\
    \ not relying on the default values\n   of the tags.\n"
- title: 4.B. Detailed Hex Listing
  contents:
  - "4.B. Detailed Hex Listing\n   All offsets and values are represented by hex except\
    \ for ASCII\n   strings which are double quoted.  Remember that Value Offsets\
    \ must\n   always be an even number since the value it points to must always be\n\
    \   on a 16-bit word boundary.\n   Entries in the Name column are for reference\
    \ and are not actually a\n   part of the TIFF file.\n   Offset      Name     \
    \             Value\n   ----        -------------------   -------------------------------------\n\
    \  Header (first byte is Offset 0):\n   0000        Byte Order             4D4D\n\
    \   0002        Version                002A\n   0004        1st. IFD pointer \
    \      00000010\n  IFD (IFDADDR from above is 0010 here):\n   0010        Entry\
    \ Count            0018\n   0012        NewSubFileType         00FE   0004   00000001\
    \  00000000\n   001E        ImageWidth             0100   0004   00000001  00000D48\n\
    \   002A        ImageLength            0101   0004   00000001  00001130\n   0036\
    \        BitsPerSample          0102   0003   00000001  00010000\n   0042    \
    \    Compression            0103   0003   00000001  00040000\n   004E        Photometric\
    \ Interp.    0106   0003   00000001  00000000\n   005A        DocumentName   \
    \        010D   0002   00000007  00000136\n   0066        ImageDescription   \
    \    010E   0002   00000015  0000013E\n   0072        Make                   010F\
    \   0002   00000008  00000154\n   007E        Model                  0110   0002\
    \   00000007  0000015C\n   008A        StripOffsets           0111   0004   00000001\
    \  000001A8\n   0096        SamplesPerPixel        0115   0003   00000001  00010000\n\
    \   00A2        RowsPerStrip           0116   0004   00000001  00001130\n   00AE\
    \        StripByteCounts        0117   0004   00000001  <COUNT0>\n   00BA    \
    \    XResolution            011A   0005   00000001  00000164\n   00C6        YResolution\
    \            011B   0005   00000001  00000164\n   00D2        XPosition      \
    \        011E   0005   00000001  0000016C\n   00DE        YPosition          \
    \    011F   0005   00000001  0000016C\n   00EA        Group4Options          0125\
    \   0004   00000001  00000002\n   00F6        ResolutionUnit         0128   0003\
    \   00000001  00020000\n   0102        Software               0131   0002   00000008\
    \  00000174\n   010E        DateTime               0132   0002   00000014  0000017C\n\
    \   011A        Artist                 013B   0002   00000008  00000190\n   0126\
    \        HostComputer           013C   0002   0000000F  00000198\n   0132    \
    \    Next IFD Pointer       00000000\n  Fields Offsets Point to:\n   0136    \
    \    DocumentName          \"LAMap1\"\n   013E        ImageDescription      \"\
    A map of Los Angeles\"\n   0154        Make                  \"Fujitsu\"\n   015C\
    \        Model                 \"M3093E\"\n   0164        X,Y Resolution     \
    \   00000190 00000001\n   016C        X,Y Position          00000000 00000001\n\
    \   0174        Software              \"Xionics\"\n   017C        DateTime   \
    \           \"1990:10:05 15:00:00\"\n   0190        Artist                \"Joe\
    \ Pro\"\n   0198        HostComputer          \"Tardis.Isi.Edu\"\n  Image Data\
    \ (<STRIP0> from above is here 01A8)\n   01A8        Compressed Data for single\
    \ strip, of length <COUNT0> bytes\n    [end of TIFF file]\n"
- title: 'NOTE:  Since in this example there is only a single strip, there is only'
  contents:
  - "NOTE:  Since in this example there is only a single strip, there is only\n  \
    \     one count for StripByteCounts and one offset for StripOffsets.\n       Thus,\
    \ each of these only takes 4 bytes and will fit in the\n       Value Offset instead\
    \ of being pointed to.\n"
- title: 5.  Conclusions
  contents:
  - "5.  Conclusions\n   Bitmapped images transferred within the Internet should be\
    \ in the\n   following format:\n        1. The file format should be TIFF-B with\
    \ multi-page files\n           supported.  Images should be encoded as one TIFF\
    \ strip\n           per page.\n        2. Images should be compressed using MMR\
    \ when possible.  Images\n           may also be MH or MR compressed or uncompressed.\
    \  If MH or MR\n           compression is used, scan lines should be \"byte-aligned\"\
    .\n        3. For maximum interoperability, image resolutions should\n       \
    \    either be 600, 400, or 300 dpi; or else be one of the\n           standard\
    \ Group 3 fax resolutions (98 or 196 dpi\n           vertically and 204 dpi horizontally).\n\
    \   Note that this specification is self contained and an implementation\n   should\
    \ be possible without recourse to the TIFF references, and that\n   only the specific\
    \ TIFF documents cited are relevant to this\n   specification.  Updates to the\
    \ TIFF documents do not change this\n   specification.\n   Existing commercial\
    \ off-the-shelf products are available which can\n   handle images in the above\
    \ format.  ISI would be delighted to help\n   those interested in assembling a\
    \ system.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   Many contributions to this work were made by members\
    \ of the IETF\n   Network Fax Working Group especially by its chairman, Mark Needleman\n\
    \   and by Clifford Lynch of the University of California Office of the\n   President,\
    \ Library Automation.  Also, Kiyo Inaba of Ricoh Co. Ltd.\n   made a number of\
    \ helpful suggestions.\n"
- title: 7.  References
  contents:
  - "7.  References\n   [1] Borenstein, N., and N. Freed, \"Mechanisms for Specifying\
    \ and\n       Describing the Format of Internet Message Bodies\", RFC in\n   \
    \    preparation.\n   [2] International Telegraph and Telephone Consultative Committee\n\
    \       (CCITT), Red Book, October, 1984.\n   [3] Aldus Corp., Microsoft Corp.,\
    \ \"Tag Image File Format\n       Specification\", Revision 5.0, Final, 1988.\n\
    \   [4] Cygnet Corporation, \"The Spirit of TIFF Class F, 1990\", available\n\
    \       from Cygnet Technologies, 2560 9th., Suite 220, Berkeley, CA\n       94710,\
    \ FAX: (415) 540-5835.\n   [5] Welch, T., \"A Technique for High Performance Data\
    \ Compression\",\n       IEEE Computer, Vol. 17, No. 6, Page 8, June 1984.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   While security issues are not directly addressed\
    \ by this document, it\n   is important to note that the file format described\
    \ in this document\n   is intended for the communications of files between systems\
    \ and\n   across networks. Thus the same precautions and cares should be\n   applied\
    \ to these files as would be to any files received from remote\n   and possibly\
    \ unknown systems.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Alan Katz\n   USC Information Sciences Institute\n\
    \   4676 Admiralty Way #1100\n   Marina Del Rey, CA  90292-6695\n   Phone: 310-822-1511\n\
    \   Fax:  310-823-6714\n   EMail: Katz@ISI.Edu\n   Danny Cohen\n   USC Information\
    \ Sciences Institute\n   4676 Admiralty Way #1100\n   Marina Del Rey, CA  90292-6695\n\
    \   Phone: 310-822-1511\n   Fax:  310-823-6714\n   EMail: Cohen@ISI.Edu\n"
