- title: __initial_text__
  contents:
  - "                         SMTP Service Extension\n                         for\
    \ Command Pipelining\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an extension to the SMTP service whereby a server\n\
    \   can indicate the extent of its ability to accept multiple commands in\n  \
    \ a single TCP send operation. Using a single TCP send operation for\n   multiple\
    \ commands can improve SMTP performance significantly.\n"
- title: Introduction
  contents:
  - "Introduction\n   Although SMTP is widely and robustly deployed, certain extensions\
    \ may\n   nevertheless prove useful. In particular, many parts of the Internet\n\
    \   make use of high latency network links.\n   SMTP's intrinsic one command-one\
    \ response structure is significantly\n   penalized by high latency links, often\
    \ to the point where the factors\n   contributing to overall connection time are\
    \ dominated by the time\n   spent waiting for responses to individual commands\
    \ (turnaround time).\n   In the best of all worlds it would be possible to simply\
    \ deploy SMTP\n   client software that makes use of command pipelining: batching\
    \ up\n   multiple commands into single TCP send operations. Unfortunately, the\n\
    \   original SMTP specification [1] did not explicitly state that SMTP\n   servers\
    \ must support this.  As a result a non-trivial number of\n   Internet SMTP servers\
    \ cannot adequately handle command pipelining.\n   Flaws known to exist in deployed\
    \ servers include:\n (1)   Connection handoff and buffer flushes in the middle\
    \ of\n       the SMTP dialogue.  Creation of server processes for\n       incoming\
    \ SMTP connections is a useful, obvious, and\n       harmless implementation technique.\
    \ However, some SMTP\n       servers defer process forking and connection handoff\n\
    \       until some intermediate point in the SMTP dialogue.\n       When this\
    \ is done material read from the TCP connection\n       and kept in process buffers\
    \ can be lost.\n (2)   Flushing the TCP input buffer when an SMTP command\n  \
    \     fails. SMTP commands often fail but there is no reason\n       to flush\
    \ the TCP input buffer when this happens.\n       Nevertheless, some SMTP servers\
    \ do this.\n (3)   Improper processing and promulgation of SMTP command\n    \
    \   failures. For example, some SMTP servers will refuse to\n       accept a DATA\
    \ command if the last RCPT TO command\n       fails, paying no attention to the\
    \ success or failure of\n       prior RCPT TO command results. Other servers will\n\
    \       accept a DATA command even when all previous RCPT TO\n       commands\
    \ have failed. Although it is possible to\n       accommodate this sort of behavior\
    \ in a client that\n       employs command pipelining, it does complicate the\n\
    \       construction of the client unnecessarily.\n   This memo uses the mechanism\
    \ described in [2] to define an extension\n   to the SMTP service whereby an SMTP\
    \ server can declare that it is\n   capable of handling pipelined commands. The\
    \ SMTP client can then\n   check for this declaration and use pipelining only\
    \ when the server\n   declares itself capable of handling it.\n"
- title: 1.  Framework for the Command Pipelining Extension
  contents:
  - "1.  Framework for the Command Pipelining Extension\n   The Command Pipelining\
    \ extension is defined as follows:\n    (1)   the name of the SMTP service extension\
    \ is Pipelining;\n    (2)   the EHLO keyword value associated with the extension\
    \ is\n          PIPELINING;\n    (3)   no parameter is used with the PIPELINING\
    \ EHLO keyword;\n    (4)   no additional parameters are added to either the MAIL\n\
    \          FROM or RCPT TO commands.\n    (5)   no additional SMTP verbs are defined\
    \ by this extension;\n          and,\n    (6)   the next section specifies how\
    \ support for the\n          extension affects the behavior of a server and client\n\
    \          SMTP.\n"
- title: 2.  The Pipelining Service Extension
  contents:
  - "2.  The Pipelining Service Extension\n   When a client SMTP wishes to employ\
    \ command pipelining, it first\n   issues the EHLO command to the server SMTP.\
    \ If the server SMTP\n   responds with code 250 to the EHLO command, and the response\
    \ includes\n   the EHLO keyword value PIPELINING, then the server SMTP has indicated\n\
    \   that it can accommodate SMTP command pipelining.\n"
- title: 2.1.  Client use of pipelining
  contents:
  - "2.1.  Client use of pipelining\n   Once the client SMTP has confirmed that support\
    \ exists for the\n   pipelining extension, the client SMTP may then elect to transmit\n\
    \   groups of SMTP commands in batches without waiting for a response to\n   each\
    \ individual command. In particular, the commands RSET, MAIL FROM,\n   SEND FROM,\
    \ SOML FROM, SAML FROM, and RCPT TO can all appear anywhere\n   in a pipelined\
    \ command group.  The EHLO, DATA, VRFY, EXPN, TURN,\n   QUIT, and NOOP commands\
    \ can only appear as the last command in a\n   group since their success or failure\
    \ produces a change of state which\n   the client SMTP must accommodate. (NOOP\
    \ is included in this group so\n   it can be used as a synchronization point.)\n\
    \   Additional commands added by other SMTP extensions may only appear as\n  \
    \ the last command in a group unless otherwise specified by the\n   extensions\
    \ that define the commands.\n   The actual transfer of message content is explicitly\
    \ allowed to be\n   the first \"command\" in a group. That is, the RSET/MAIL FROM\
    \ sequence\n   necessary to initiate a new message transaction can be placed in\
    \ the\n   same group as the final transfer of the headers and body of the\n  \
    \ previous message.\n   Client SMTP implementations that employ pipelining MUST\
    \ check ALL\n   statuses associated with each command in a group. For example,\
    \ if\n   none of the RCPT TO recipient addresses were accepted the client must\n\
    \   then check the response to the DATA command -- the client cannot\n   assume\
    \ that the DATA command will be rejected just because none of\n   the RCPT TO\
    \ commands worked.  If the DATA command was properly\n   rejected the client SMTP\
    \ can just issue RSET, but if the DATA command\n   was accepted the client SMTP\
    \ should send a single dot.\n   Command statuses MUST be coordinated with responses\
    \ by counting each\n   separate response and correlating that count with the number\
    \ of\n   commands known to have been issued.  Multiline responses MUST be\n  \
    \ supported. Matching on the basis of either the error code value or\n   associated\
    \ text is expressly forbidden.\n   Client SMTP implementations MAY elect to operate\
    \ in a nonblocking\n   fashion, processing server responses immediately upon receipt,\
    \ even\n   if there is still data pending transmission from the client's\n   previous\
    \ TCP send operation. If nonblocking operation is not\n   supported, however,\
    \ client SMTP implementations MUST also check the\n   TCP window size and make\
    \ sure that each group of commands fits\n   entirely within the window. The window\
    \ size is usually, but not\n   always, 4K octets.  Failure to perform this check\
    \ can lead to\n   deadlock conditions.\n   Clients MUST NOT confuse responses\
    \ to multiple commands with\n   multiline responses. Each command requires one\
    \ or more lines of\n   response, the last line not containing a dash between the\
    \ response\n   code and the response string.\n"
- title: 2.2.  Server support of pipelining
  contents:
  - "2.2.  Server support of pipelining\n   A server SMTP implementation that offers\
    \ the pipelining extension:\n    (1)   MUST NOT flush or otherwise lose the contents\
    \ of the\n          TCP input buffer under any circumstances whatsoever.\n   \
    \ (2)   SHOULD issue a positive response to the DATA command if\n          and\
    \ only if one or more valid RCPT TO addresses have\n          been previously\
    \ received.\n    (3)   MUST NOT, after issuing a positive response to a DATA\n\
    \          command with no valid recipients and subsequently\n          receiving\
    \ an empty message, send any message whatsoever\n          to anybody.\n    (4)\
    \   SHOULD elect to store responses to grouped RSET, MAIL\n          FROM, SEND\
    \ FROM, SOML FROM, SAML FROM, and RCPT TO\n          commands in an internal buffer\
    \ so they can sent as a\n          unit.\n    (5)   MUST NOT buffer responses\
    \ to EHLO, DATA, VRFY, EXPN,\n          TURN, QUIT, and NOOP.\n    (6)   MUST\
    \ NOT buffer responses to unrecognized commands.\n    (7)   MUST send all pending\
    \ responses immediately whenever\n          the local TCP input buffer is emptied.\n\
    \    (8)   MUST NOT make assumptions about commands that are yet\n          to\
    \ be received.\n    (9)   SHOULD issue response text that indicates, either\n\
    \          implicitly or explicitly, what command the response\n          matches.\n\
    \   The overriding intent of these server requirements is to make it as\n   easy\
    \ as possible for servers to conform to these pipelining\n   extensions.\n"
- title: 3.  Examples
  contents:
  - "3.  Examples\n   Consider the following SMTP dialogue that does not use pipelining:\n\
    \   S: <wait for open connection>\n   C: <open connection to server>\n   S: 220\
    \ innosoft.com SMTP service ready\n   C: HELO dbc.mtview.ca.us\n   S: 250 innosoft.com\n\
    \   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n   S: 250 sender <mrose@dbc.mtview.ca.us>\
    \ OK\n   C: RCPT TO:<ned@innosoft.com>\n   S: 250 recipient <ned@innosoft.com>\
    \ OK\n   C: RCPT TO:<dan@innosoft.com>\n   S: 250 recipient <dan@innosoft.com>\
    \ OK\n   C: RCPT TO:<kvc@innosoft.com>\n   S: 250 recipient <kvc@innosoft.com>\
    \ OK\n   C: DATA\n   S: 354 enter mail, end with line containing only \".\"\n\
    \    ...\n   C: .\n   S: 250 message sent\n   C: QUIT\n   S: 221 goodbye\n   The\
    \ client waits for a server response a total of 9 times in this\n   simple example.\
    \ But if pipelining is employed the following dialogue\n   is possible:\n   S:\
    \ <wait for open connection>\n   C: <open connection to server>\n   S: 220 innosoft.com\
    \ SMTP service ready\n   C: EHLO dbc.mtview.ca.us\n   S: 250-innosoft.com\n  \
    \ S: 250 PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n   C: RCPT TO:<ned@innosoft.com>\n\
    \   C: RCPT TO:<dan@innosoft.com>\n   C: RCPT TO:<kvc@innosoft.com>\n   C: DATA\n\
    \   S: 250 sender <mrose@dbc.mtview.ca.us> OK\n   S: 250 recipient <ned@innosoft.com>\
    \ OK\n   S: 250 recipient <dan@innosoft.com> OK\n   S: 250 recipient <kvc@innosoft.com>\
    \ OK\n   S: 354 enter mail, end with line containing only \".\"\n    ...\n   C:\
    \ .\n   C: QUIT\n   S: 250 message sent\n   S: 221 goodbye\n   The total number\
    \ of turnarounds has been reduced from 9 to 4.\n   The next example illustrates\
    \ one possible form of behavior when\n   pipelining is used and all recipients\
    \ are rejected:\n   S: <wait for open connection>\n   C: <open connection to server>\n\
    \   S: 220 innosoft.com SMTP service ready\n   C: EHLO dbc.mtview.ca.us\n   S:\
    \ 250-innosoft.com\n   S: 250 PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n\
    \   C: RCPT TO:<nsb@thumper.bellcore.com>\n   C: RCPT TO:<galvin@tis.com>\n  \
    \ C: DATA\n   S: 250 sender <mrose@dbc.mtview.ca.us> OK\n   S: 550 remote mail\
    \ to <nsb@thumper.bellore.com> not allowed\n   S: 550 remote mail to <galvin@tis.com>\
    \ not allowed\n   S: 554 no valid recipients given\n   C: QUIT\n   S: 221 goodbye\n\
    \   The client SMTP waits for the server 4 times here as well. If the\n   server\
    \ SMTP does not check for at least one valid recipient prior to\n   accepting\
    \ the DATA command, the following dialogue would result:\n   S: <wait for open\
    \ connection>\n   C: <open connection to server>\n   S: 220 innosoft.com SMTP\
    \ service ready\n   C: EHLO dbc.mtview.ca.us\n   S: 250-innosoft.com\n   S: 250\
    \ PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n   C: RCPT TO:<nsb@thumper.bellcore.com>\n\
    \   C: RCPT TO:<galvin@tis.com>\n   C: DATA\n   S: 250 sender <mrose@dbc.mtview.ca.us>\
    \ OK\n   S: 550 remote mail to <nsb@thumper.bellore.com> not allowed\n   S: 550\
    \ remote mail to <galvin@tis.com> not allowed\n   S: 354 enter mail, end with\
    \ line containing only \".\"\n   C: .\n   C: QUIT\n   S: 554 no valid recipients\n\
    \   S: 221 goodbye\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This RFC does not discuss security issues and\
    \ is not believed to\n   raise any security issues not endemic in electronic mail\
    \ and present\n   in fully conforming implementations of [1].\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document is based on the SMTP service extension\
    \ model presented\n   in RFC 1425. Marshall Rose's description of SMTP command\
    \ pipelining\n   in his book \"The Internet Message\" also served as a source\
    \ of\n   inspiration for this extension.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  Postel, J., \"Simple Mail Transfer Protocol\", STD 10\n\
    \        RFC 821, USC/Information Sciences Institute, August\n        1982.\n\
    \   [2]  Klensin, J., Freed, N., Rose, M., Stefferud, E.,\n        and D. Crocker,\
    \ \"SMTP Service Extensions\", RFC 1651,\n        MCI, Innosoft, Dover Beach Consulting,\
    \ Inc.,\n        Network Management Associates, Inc., Silicon Graphics,\n    \
    \    Inc., July 1994.\n"
- title: 7.  Author's Address
  contents:
  - "7.  Author's Address\n   Ned Freed\n   Innosoft International, Inc.\n   1050\
    \ East Garvey Avenue South\n   West Covina, CA 91790\n   USA\n   Phone: +1 818\
    \ 919 3600\n   Fax: +1 818 919 3614\n   EMail: ned@innosoft.com\n"
