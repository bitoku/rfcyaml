- title: __initial_text__
  contents:
  - "            Response Time in Cross-network Debugging\nCross-network debugging\
    \ is a means whereby a programmer at one\ncomputer on a network can debug a program\
    \ which executes on another\ncomputer. One form of cross-net debugging has been\
    \ in use for some\nyears by programmers who maintain IMPs on the ARPA network.\
    \ Another\nform has been used by ARPA network users who employ TELNET or RSEXEC\n\
    to log into a distant computer and remotely run a debugger on that\nmachine. In\
    \ both of these cases, the debugger is almost entirely\nresident in the same machine\
    \ as the subject program, and only a\nremote means of access to that computer\
    \ distinguishes the activity\nfrom single-computer debugging.\nIn our case, we\
    \ use a PDP-10 to perform complex debugging\nmanipulations. Simple manipulations,\
    \ and complex actions which the\nPDP-10 has partially digested into simple actions,\
    \ are sent over the\nARPA network to a PDP-11. The portion of the debugger resident\
    \ in\nthe PDP-11, where the subject program executes, can perform only\nsimple\
    \ actions (examine, deposit, start, stop, set breakpoint,\netc.). This division\
    \ of debugging computation between the two\nmachines is implemented and in use\
    \ at BBN. A user s manual is\navailable (as (BBN]<DOCUMENTATION>XNET.DOC) describing\
    \ the\ndebugger s features and discussing some of the issues involved.\nThe purpose\
    \ of this RFC is to describe our experience with\nresponse times the debugger\
    \ exhibits. Response time is a serious\nproblem in any elaboration to a debugger.\
    \ Here we wish to discuss\nthe contribution of communicating over the ARPA network\
    \ to response\ntime. The debugger (X-NET) keeps statistics during each debugging\n\
    session, and a debugger command prints them out. We used a\n\"standard scenario\"\
    \ to measure response times on two occasions. The\nfirst was debugging a PDP-11\
    \ at BBN on the same IMP as the PDP-10.\nThe second was with a PDP-11 at SRI-ARC\
    \ in California, with at least\nnine IMPs intervening.\nBBN (local) SRI (distant)\n\
    TENEX LOAD AVG\nSTART 6.0 4.65\nFINISH 3.9 6.6\nEach session lasted about 10 minutes.\
    \ The terms used below\nare:\nmessage -- a single message generated by the PDP-10\
    \ portion of X-NET\nactive command -- a command which involves, actually or virtually,\n\
    an interaction with the subject program (e.g., examine, deposit,\nstart, stop,\
    \ set breakpoint, etc.)\nbytes -- the total of all (8-bit) bytes, both sent and\
    \ received,\nplus any bytes due to receipt of asynchronous replies (e.g.,\nbreakpoint\
    \ hit), during processing of the associated message or\nactive command.\nwait\
    \ -- total elapsed time from handing message to implementation\nlanguage (BCPL)\
    \ network routines, to receipt of the reply from\nthese routines and through an\
    \ inferior process in X-NET\nThe 35 active commands in the scenario are:\n1 load\
    \ program\n8 start or proceed program\n3 halt program\n16 examine contents of\
    \ memory word\n1 deposit new contents in memory word\n1 set breakpoint\n1 remove\
    \ breakpoint\n1 word search\n1 copy program onto disk file\n2 network/process\
    \ management (see user's manual)\nThe summary statistics are:.\nBBN (local) SRI\
    \ (distant)\nAVG STD DEV AVG STD DEV\nPER MESSAGE:\nBYTES 154 295 164 295\nWAIT\
    \ 1.75 2.04 1.89 0.78 SEC\nPER ACTIVE COMMAND:\nMSGS 0.91 0.69 0.91 0.69\nBYTES\
    \ 150 331 150 331\nWAIT 1.60 2.36 1.73 1.35 SEC\nThe standard deviation is relatively\
    \ large partly because of a\nsmall number of samples, but even more because the\
    \ message size and\nthe command complexity are bimodal, as shown by the histograms\n\
    below. The load and word search commands transferred many bytes, as\ndid an examine\
    \ (the first one while the program was halted;\nsubsequent examines were answerable\
    \ from the cache; see user s\nWe conclude that the delay due to network communication\
    \ is\ntolerable. It is of the same order of magnitude as that often\nexperienced\
    \ on moderately loaded time sharing systems. More\nexplicit measurements of delays\
    \ seen by user programs in general are\nin progress at BBN and elsewhere; it is\
    \ beyond the scope of this RFC\nto discuss these delays in detail, or to break\
    \ down their causes\ninto process activation, queueing, IMP performance, etc.\
    \ Instead,\nwe merely note that cross-network debugging is possible in a\npractical\
    \ sense.\n                 PER MESSAGE                 PER ACTIVE COMMAND\n0 \
    \               .                            XXXXXXXXX\n16               .   \
    \                         .\n32               XXXXXXXXXXXXXXXXXXXXXXXXXX   XXXXXXXXXXXXXXXXXXX\n\
    64               .                            XXX\n128              .        \
    \                    .\n256              XX                           .\n512 \
    \             XXXX                         XX\n1024             .            \
    \                XX\nSIZE (BYTES), BBN (local data) = SRI (distant data) Left\
    \ column\ngives lower bound (inclusive) on logarithmic scale. Thus, two\nmessages\
    \ had at least 256 bytes but less than 512 bytes. An\nexamination of network traffic\
    \ per active command shows that it is\nactually trimodal: some commands are answered\
    \ from the cache,\nincurring no network traffic; some, such as start or stop,\
    \ require\nonly a few tens of bytes; and some commands, such as word search and\n\
    load, cause transfer of thousands of bytes.\n                 PER MESSAGE    \
    \              PER ACTIVE COMMAND\n0                .                        \
    \    XXXXXXXXX\n1/16             X                            .\n1/8         \
    \     .                            .\n1/4              X                     \
    \       .\n1/2              XXXXXXXXXX                   XXXXXXXX\n1         \
    \       XXXXXXXXXXXXXX               XXXXXXXXXXX\n2                XXXX      \
    \                   XXXX\n4                X                            X\n  \
    \               PER MESSAGE                  PER ACTIVE COMMAND\n0           \
    \     .                            XXXXXXXXX\n1/16             .             \
    \               .\n1/8              .                            .\n1/4      \
    \        X                            .\n1/2              XXXXXX             \
    \          XXX\n1                XXXXXXXXXXXX                 XXXXXXXXX\n2   \
    \             XXXXXXXXXXXXX                XXXXXXXXXXXX\n4                .  \
    \                          XX\n"
