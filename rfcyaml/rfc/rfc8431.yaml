- contents:
  - '        A YANG Data Model for the Routing Information Base (RIB)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a YANG data model for the Routing Information\n
    \  Base (RIB) that aligns with the Interface to the Routing System\n   (I2RS)
    RIB information model.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8431.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . . .
    . . .   3\n     1.2.  Definitions and Abbreviations . . . . . . . . . . . . .
    .   3\n     1.3.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . . .   3\n
    \  2.  Model Structure . . . . . . . . . . . . . . . . . . . . . . .   3\n     2.1.
    \ RIB Capability  . . . . . . . . . . . . . . . . . . . . .   8\n     2.2.  Routing
    Instance and RIB  . . . . . . . . . . . . . . . .   8\n     2.3.  Route . . .
    . . . . . . . . . . . . . . . . . . . . . . .   9\n     2.4.  Nexthop . . . .
    . . . . . . . . . . . . . . . . . . . . .  11\n     2.5.  RPC Operations  . .
    . . . . . . . . . . . . . . . . . . .  15\n     2.6.  Notifications . . . . .
    . . . . . . . . . . . . . . . . .  20\n   3.  YANG Module . . . . . . . . . .
    . . . . . . . . . . . . . . .  22\n   4.  IANA Considerations . . . . . . . .
    . . . . . . . . . . . . .  67\n   5.  Security Considerations . . . . . . . .
    . . . . . . . . . . .  67\n   6.  References  . . . . . . . . . . . . . . . .
    . . . . . . . . .  68\n     6.1.  Normative References  . . . . . . . . . . .
    . . . . . . .  68\n     6.2.  Informative References  . . . . . . . . . . . .
    . . . . .  69\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . .
    . . .  70\n   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . .
    .  70\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  71\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Interface to the Routing System (I2RS) [RFC7921] provides
    read\n   and write access to the information and state within the routing\n   process
    that exists inside the routing elements; this is achieved via\n   protocol message
    exchange between I2RS clients and I2RS agents\n   associated with the routing
    system.  One of the functions of I2RS is\n   to read and write data of the Routing
    Information Base (RIB).\n   [I2RS-REQS] introduces a set of RIB use cases.  The
    RIB information\n   model is defined in [RFC8430].\n   This document defines a
    YANG data model [RFC7950] [RFC6991] for the\n   RIB that satisfies the RIB use
    cases and aligns with the RIB\n   information model.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  - contents:
    - "1.2.  Definitions and Abbreviations\n   RIB: Routing Information Base\n   FIB:
      Forwarding Information Base\n   RPC: Remote Procedure Call\n   IM: Information
      Model.  An abstract model of a conceptual domain,\n   which is independent of
      a specific implementation or data\n   representation.\n"
    title: 1.2.  Definitions and Abbreviations
  - contents:
    - "1.3.  Tree Diagrams\n   Tree diagrams used in this document follow the notation
      defined in\n   [RFC8340].\n"
    title: 1.3.  Tree Diagrams
  title: 1.  Introduction
- contents:
  - "2.  Model Structure\n   The following figure shows an overview of the structure
    tree of the\n   ietf-i2rs-rib module.  To give a whole view of the structure tree,\n
    \  some details of the tree are omitted.  The relevant details are\n   introduced
    in the subsequent subsections.\n   module: ietf-i2rs-rib\n      +--rw routing-instance\n
    \        +--rw name              string\n         +--rw interface-list* [name]\n
    \        |  +--rw name if:interface-ref\n         +--rw router-id?        yang:dotted-quad\n
    \        +--rw lookup-limit?     uint8\n         +--rw rib-list* [name]\n            +--rw
    name              string\n            +--rw address-family address-family-definition\n
    \           +--rw ip-rpf-check?     boolean\n            +--rw route-list* [route-index]\n
    \           |  +--rw route-index                uint64\n            |  +--rw match\n
    \           |  |  +--rw (route-type)?\n            |  |     +--:(ipv4)\n            |
    \ |     |  ...\n            |  |     +--:(ipv6)\n            |  |     |  ...\n
    \           |  |     +--:(mpls-route)\n            |  |     |  ...\n            |
    \ |     +--:(mac-route)\n            |  |     |  ...\n            |  |     +--:(interface-route)\n
    \           |  |        ...\n            |  +--rw nexthop\n            |  |  +--rw
    nexthop-id?           uint32\n            |  |  +--rw sharing-flag?         boolean\n
    \           |  |  +--rw (nexthop-type)?\n            |  |     +--:(nexthop-base)\n
    \           |  |     |  ...\n            |  |     +--:(nexthop-chain) {nexthop-chain}?\n
    \           |  |     |  ...\n            |  |     +--:(nexthop-replicate) {nexthop-replicate}?\n
    \           |  |     |  ...\n            |  |     +--:(nexthop-protection) {nexthop-protection}?\n
    \           |  |     |  ...\n            |  |     +--:(nexthop-load-balance) {nexthop-load-balance}?\n
    \           |  |        ...\n            |  +--rw route-status\n            |
    \ |  ...\n            |  +--rw route-attributes\n            |  |  ...\n            |
    \ +--rw route-vendor-attributes\n            +--rw nexthop-list* [nexthop-member-id]\n
    \              +--rw nexthop-member-id uint32\n   rpcs:\n      +---x rib-add\n
    \     |  +---w input\n      |  |  +---w name        string\n      |  |  +---w
    address-family      address-family-definition\n      |  |  +---w ip-rpf-check?
    \  boolean\n      |  +--ro output\n      |     +--ro result boolean\n      |     +--ro
    reason? string\n      +---x rib-delete\n      |  +---w input\n      |  |  +---w
    name string\n      |  +--ro output\n      |     +--ro result boolean\n      |
    \    +--ro reason? string\n      +---x route-add\n      |  +---w input\n      |
    \ |  +---w return-failure-detail?   boolean\n      |  |  +---w rib-name                 string\n
    \     |  |  +---w routes\n      |  |     +---w route-list* [route-index]\n      |
    \ |        ...\n      |  +--ro output\n      |     +--ro success-count     uint32\n
    \     |     +--ro failed-count      uint32\n      |     +--ro failure-detail\n
    \     |        +--ro failed-routes* [route-index]\n      |           +--ro route-index
    uint32\n      |           +--ro error-code? uint32\n      +---x route-delete\n
    \     |  +---w input\n      |  |  +---w return-failure-detail?   boolean\n      |
    \ |  +---w rib-name                 string\n      |  |  +---w routes\n      |
    \ |     +---w route-list* [route-index]\n      |  |        ...\n      |  +--ro
    output\n      |     +--ro success-count     uint32\n      |     +--ro failed-count
    \     uint32\n      |     +--ro failure-detail\n      |        +--ro failed-routes*
    [route-index]\n      |           +--ro route-index uint32\n      |           +--ro
    error-code? uint32\n      +---x route-update\n      |  +---w input\n      |  |
    \ +---w return-failure-detail?           boolean\n      |  |  +---w rib-name                         string\n
    \     |  |  +---w (match-options)?\n      |  |     +--:(match-route-prefix)\n
    \     |  |     |  ...\n      |  |     +--:(match-route-attributes)\n      |  |
    \    |  ...\n      |  |     +--:(match-route-vendor-attributes) {...}?\n      |
    \ |     |  ...\n      |  |     +--:(match-nexthop)\n      |  |        ...\n      |
    \ +--ro output\n      |     +--ro success-count uint32\n      |     +--ro failed-count
    uint32\n      |     +--ro failure-detail\n      |        +--ro failed-routes*
    [route-index]\n      |           +--ro route-index uint32\n      |           +--ro
    error-code? uint32\n      +---x nh-add\n      |  +---w input\n      |  |  +---w
    rib-name              string\n      |  |  +---w nexthop-id?           uint32\n
    \     |  |  +---w sharing-flag?         boolean\n      |  |  +---w (nexthop-type)?\n
    \     |  |     +--:(nexthop-base)\n      |  |     |  ...\n      |  |     +--:(nexthop-chain)
    {nexthop-chain}?\n      |  |     |  ...\n      |  |     +--:(nexthop-replicate)
    {nexthop-replicate}?\n      |  |     |  ...\n      |  |     +--:(nexthop-protection)
    {nexthop-protection}?\n      |  |     |  ...\n      |  |     +--:(nexthop-load-balance)
    {nexthop-load-balance}?\n      |  |        ...\n      |  +--ro output\n      |
    \    +--ro result        boolean\n      |     +--ro reason?       string\n      |
    \    +--ro nexthop-id?   uint32\n      +---x nh-delete\n         +---w input\n
    \        |  +---w rib-name              string\n         |  +---w nexthop-id?
    \          uint32\n         |  +---w sharing-flag?         boolean\n         |
    \ +---w (nexthop-type)?\n         |     +--:(nexthop-base)\n         |     |  ...\n
    \        |     +--:(nexthop-chain) {nexthop-chain}?\n         |     |  ...\n         |
    \    +--:(nexthop-replicate) {nexthop-replicate}?\n         |     |  ...\n         |
    \    +--:(nexthop-protection) {nexthop-protection}?\n         |     |  ...\n         |
    \    +--:(nexthop-load-balance) {nexthop-load-balance}?\n         |        ...\n
    \        +--ro output\n            +--ro result boolean\n            +--ro reason?
    string\n   notifications:\n      +---n nexthop-resolution-status-change\n      |
    \ +--ro nexthop\n      |  |  +--ro nexthop-id?           uint32\n      |  |  +--ro
    sharing-flag?         boolean\n      |  |  +--ro (nexthop-type)?\n      |  |     +--:(nexthop-base)\n
    \     |  |     |  ...\n      |  |     +--:(nexthop-chain) {nexthop-chain}?\n      |
    \ |     |  ...\n      |  |     +--:(nexthop-replicate) {nexthop-replicate}?\n
    \     |  |     |  ...\n      |  |     +--:(nexthop-protection) {nexthop-protection}?\n
    \     |  |     |  ...\n      |  |     +--:(nexthop-load-balance) {nexthop-load-balance}?\n
    \     |  |        ...\n      |  +--ro nexthop-state nexthop-state-definition\n
    \     +---n route-change\n         +--ro rib-name                 string\n         +--ro
    address-family               address-family-definition\n         +--ro route-index
    \             uint64\n         +--ro match\n         |  +--ro (route-type)?\n
    \        |     +--:(ipv4)\n         |     |  ...\n         |     +--:(ipv6)\n
    \        |     |  ...\n         |     +--:(mpls-route)\n         |     |  ...\n
    \        |     +--:(mac-route)\n         |     |  ...\n         |     +--:(interface-route)\n
    \        |        ...\n         +--ro route-installed-state route-installed-state-definition\n
    \        +--ro route-state         route-state-definition\n         +--ro route-change-reasons*
    [route-change-reason]\n            +--ro route-change-reason    route-change-reason-definition\n
    \             Figure 1: Overview of I2RS RIB Module Structure\n"
  - contents:
    - "2.1.  RIB Capability\n   RIB capability negotiation is very important because
      not all of the\n   hardware will be able to support all kinds of nexthops, and
      there\n   might be a limitation on how many levels of lookup can be practically\n
      \  performed.  Therefore, a RIB data model needs to specify a way for an\n   external
      entity to learn about the functional capabilities of a\n   network device.\n
      \  At the same time, nexthop chains can be used to specify multiple\n   headers
      over a packet before that particular packet is forwarded.\n   Not every network
      device will be able to support all kinds of nexthop\n   chains along with the
      arbitrary number of headers that are chained\n   together.  The RIB data model
      needs a way to expose the nexthop\n   chaining capability supported by a given
      network device.\n   This module uses the feature and if-feature statements to
      achieve\n   above capability advertisement.\n"
    title: 2.1.  RIB Capability
  - contents:
    - "2.2.  Routing Instance and RIB\n   A routing instance, in the context of the
      RIB information model, is a\n   collection of RIBs, interfaces, and routing
      protocol parameters.  A\n   routing instance creates a logical slice of the
      router and can allow\n   multiple different logical slices, across a set of
      routers, to\n   communicate with each other.  The routing protocol parameters
      control\n   the information available in the RIBs.  More details about a routing\n
      \  instance can be found in Section 2.2 of [RFC8430].\n   For a routing instance,
      there can be multiple RIBs.  Therefore, this\n   model uses \"list\" to express
      the RIBs.  The structure tree is shown\n   below:\n   +--rw routing-instance\n
      \     +--rw name              string\n      +--rw interface-list* [name]\n      |
      \ +--rw name if:interface-ref\n      +--rw router-id?        yang:dotted-quad\n
      \     +--rw lookup-limit?     uint8\n      +--rw rib-list* [name]\n         +--rw
      name            string\n         +--rw address-family      address-family-definition\n
      \        +--rw ip-rpf-check?   boolean\n         +--rw route-list* [route-index]\n
      \           ... // refer to Section 2.3\n                   Figure 2: Routing
      Instance Structure\n"
    title: 2.2.  Routing Instance and RIB
  - contents:
    - "2.3.  Route\n   A route is essentially a match condition and an action following
      that\n   match.  The match condition specifies the kind of route (e.g., IPv4,\n
      \  MPLS, Media Access Control (MAC), Interface, etc.) and the set of\n   fields
      to match on.\n   A route MUST contain the ROUTE_PREFERENCE attribute (see Section
      2.3\n   of [RFC8430]).\n   In addition, a route MUST associate with the following
      status\n   attributes in responses to a RIB writing/reading operation:\n   o
      \ Active: Indicates whether a route has at least one fully resolved\n      nexthop
      and is therefore eligible for installation in the FIB.\n   o  Installed: Indicates
      whether the route got installed in the FIB.\n   o  Reason: Indicates the specific
      reason that caused the failure,\n      e.g., \"Not authorized\".\n   In addition,
      a route can be associated with one or more optional\n   route-attributes (e.g.,
      route-vendor-attributes).\n   A RIB will have a number of routes, so the routes
      are expressed as a\n   list under a specific RIB.  Each RIB has its own route
      list.\n   +--rw route-list* [route-index]\n      +--rw route-index                uint64\n
      \     +--rw match\n      |  +--rw (route-type)?\n      |     +--:(ipv4)\n      |
      \    |  +--rw ipv4\n      |     |     +--rw (ip-route-match-type)?\n      |
      \    |        +--:(dest-ipv4-address)\n      |     |        |  ...\n      |
      \    |        +--:(src-ipv4-address)\n      |     |        |  ...\n      |     |
      \       +--:(dest-src-ipv4-address)\n      |     |           ...\n      |     +--:(ipv6)\n
      \     |     |  +--rw ipv6\n      |     |     +--rw (ip-route-match-type)?\n
      \     |     |        +--:(dest-ipv6-address)\n      |     |        |  ...\n
      \     |     |        +--:(src-ipv6-address)\n      |     |        |  ...\n      |
      \    |        +--:(dest-src-ipv6-address)\n      |     |           ...\n      |
      \    +--:(mpls-route)\n      |     |  +--rw mpls-label              uint32\n
      \     |     +--:(mac-route)\n      |     |  +--rw mac-address             uint32\n
      \     |     +--:(interface-route)\n      |        +--rw interface-identifier
      if:interface-ref\n      +--rw nexthop\n      |  ...(refer to Section 2.4)\n
      \                       Figure 3: Routes Structure\n"
    title: 2.3.  Route
  - contents:
    - "2.4.  Nexthop\n   A nexthop represents an object resulting from a route lookup.
      \ As\n   illustrated in Figure 4 of [RFC8430], to support various use cases\n
      \  (e.g., load-balancing, protection, multicast, or a combination of\n   them),
      the nexthop is modeled as a multilevel structure and supports\n   recursion.
      \ The first level of the nexthop includes the following\n   four types:\n   o
      \ Base: The \"base\" nexthop is the foundation of all other nexthop\n      types.
      \ It includes the following basic nexthops:\n      *  nexthop-id\n      *  IPv4
      address\n      *  IPv6 address\n      *  egress-interface\n      *  egress-interface
      with IPv4 address\n      *  egress-interface with IPv6 address\n      *  egress-interface
      with MAC address\n      *  logical-tunnel\n      *  tunnel-encapsulation\n      *
      \ tunnel-decapsulation\n      *  rib-name\n   o  Chain: The \"chain\" nexthop
      provides a way to perform multiple\n      operations on a packet by logically
      combining them.\n   o  Load-Balance: The \"load-balance\" nexthop is designed
      for a load-\n      balance case where it normally will have multiple weighted\n
      \     nexthops.\n   o  Protection: The \"protection\" nexthop is designed for
      a protection\n      scenario where it normally will have primary and standby
      nexthop.\n   o  Replicate: The \"replicate\" nexthop is designed for multiple\n
      \     destinations forwarding.\n   The structure tree of nexthop is shown in
      the following figures.\n   +--rw nexthop\n   |  +--rw nexthop-id?           uint32\n
      \  |  +--rw sharing-flag?         boolean\n   |  +--rw (nexthop-type)?\n   |
      \    +--:(nexthop-base)\n   |     |  ...(refer to Figure 5)\n   |     +--:(nexthop-chain)
      {nexthop-chain}?\n   |     |  +--rw nexthop-chain\n   |     |     +--rw nexthop-list*
      [nexthop-member-id]\n   |     |        +--rw nexthop-member-id uint32\n   |
      \    +--:(nexthop-replicate) {nexthop-replicate}?\n   |     |  +--rw nexthop-replicate\n
      \  |     |     +--rw nexthop-list* [nexthop-member-id]\n   |     |        +--rw
      nexthop-member-id uint32\n   |     +--:(nexthop-protection) {nexthop-protection}?\n
      \  |     |  +--rw nexthop-protection\n   |     |     +--rw nexthop-list* [nexthop-member-id]\n
      \  |     |        +--rw nexthop-member-id uint32\n   |     |        +--rw nexthop-preference
      nexthop-preference-definition\n   |     +--:(nexthop-load-balance) {nexthop-load-balance}?\n
      \  |        +--rw nexthop-lb\n   |           +--rw nexthop-list* [nexthop-member-id]\n
      \  |              +--rw nexthop-member-id uint32\n   |              +--rw nexthop-lb-weight
      nexthop-lb-weight-definition\n                        Figure 4: Nexthop Structure\n
      \  Figure 5 (as shown below) is a subtree of nexthop.  It's under the\n   nexthop
      base node and shows the structure of the \"base\" nexthop.\n"
    - '+--:(nexthop-base)

      '
    - '|  +--rw nexthop-base

      '
    - '|     +--rw (nexthop-base-type)?

      '
    - '|        +--:(special-nexthop)

      '
    - '|        |  +--rw special? special-nexthop-definition

      '
    - '|        +--:(egress-interface-nexthop)

      '
    - '|        |  +--rw outgoing-interface if:interface-ref

      '
    - '|        +--:(ipv4-address-nexthop)

      '
    - '|        |  +--rw ipv4-address inet:ipv4-address

      '
    - '|        +--:(ipv6-address-nexthop)

      '
    - '|        |  +--rw ipv6-address inet:ipv6-address

      '
    - '|        +--:(egress-interface-ipv4-nexthop)

      '
    - '|        |  +--rw egress-interface-ipv4-address

      '
    - '|        |     +--rw outgoing-interface if:interface-ref

      '
    - '|        |     +--rw ipv4-address       inet:ipv4-address

      '
    - '|        +--:(egress-interface-ipv6-nexthop)

      '
    - '|        |  +--rw egress-interface-ipv6-address

      '
    - '|        |     +--rw outgoing-interface if:interface-ref

      '
    - '|        |     +--rw ipv6-address       inet:ipv6-address

      '
    - '|        +--:(egress-interface-mac-nexthop)

      '
    - '|        |  +--rw egress-interface-mac-address

      '
    - '|        |     +--rw outgoing-interface if:interface-ref

      '
    - '|        |     +--rw ieee-mac-address yang:mac-address

      '
    - '|        +--:(tunnel-encapsulation-nexthop) {nexthop-tunnel}?

      '
    - '|        |  +--rw tunnel-encapsulation

      '
    - '|        |     +--rw (tunnel-type)?

      '
    - '|        |        +--:(ipv4) {ipv4-tunnel}?

      '
    - '|        |        |  +--rw ipv4-header

      '
    - '|        |        |     +--rw src-ipv4-address inet:ipv4-address

      '
    - '|        |        |     +--rw dest-ipv4-address inet:ipv4-address

      '
    - '|        |        |     +--rw protocol          uint8

      '
    - '|        |        |     +--rw ttl?              uint8

      '
    - '|        |        |     +--rw dscp?             uint8

      '
    - '|        |        +--:(ipv6) {ipv6-tunnel}?

      '
    - '|        |        |  +--rw ipv6-header

      '
    - '|        |        |     +--rw src-ipv6-address inet:ipv6-address

      '
    - '|        |        |     +--rw dest-ipv6-address inet:ipv6-address

      '
    - '|        |        |     +--rw next-header       uint8

      '
    - '|        |        |     +--rw traffic-class? uint8

      '
    - '|        |        |     +--rw flow-label?

      '
    - '|        |        |             inet:ipv6-flow-label

      '
    - '|        |        |     +--rw hop-limit?        uint8

      '
    - '|        |        +--:(mpls) {mpls-tunnel}?

      '
    - '|        |        |  +--rw mpls-header

      '
    - '|        |        |     +--rw label-operations* [label-oper-id]

      '
    - '|        |        |        +--rw label-oper-id uint32

      '
    - '|        |        |        +--rw (label-actions)?

      '
    - '|        |        |           +--:(label-push)

      '
    - '|        |        |           |  +--rw label-push

      '
    - '|        |        |           |     +--rw label        uint32

      '
    - '|        |        |           |     +--rw s-bit?       boolean

      '
    - '|        |        |           |     +--rw tc-value? uint8

      '
    - '|        |        |           |     +--rw ttl-value? uint8

      '
    - '|        |        |           +--:(label-swap)

      '
    - '|        |        |              +--rw label-swap

      '
    - '|        |        |                 +--rw out-label     uint32

      '
    - '|        |        |                 +--rw ttl-action?

      '
    - '|        |        |                         ttl-action-definition

      '
    - '|        |        +--:(gre) {gre-tunnel}?

      '
    - '|        |        |  +--rw gre-header

      '
    - '|        |        |     +--rw (dest-address-type)?

      '
    - '|        |        |     |  +--:(ipv4)

      '
    - '|        |        |     |  |  +--rw ipv4-dest inet:ipv4-address

      '
    - '|        |        |     |  +--:(ipv6)

      '
    - '|        |        |     |     +--rw ipv6-dest inet:ipv6-address

      '
    - '|        |        |     +--rw protocol-type uint16

      '
    - '|        |        |     +--rw key?          uint64

      '
    - '|        |        +--:(nvgre) {nvgre-tunnel}?

      '
    - '|        |        |  +--rw nvgre-header

      '
    - '|        |        |     +--rw (nvgre-type)?

      '
    - '|        |        |     |  +--:(ipv4)

      '
    - '|        |        |     |  |  +--rw src-ipv4-address inet:ipv4-address

      '
    - '|        |        |     |  |  +--rw dest-ipv4-address inet:ipv4-address

      '
    - '|        |        |     |  |  +--rw protocol          uint8

      '
    - '|        |        |     |  |  +--rw ttl?              uint8

      '
    - '|        |        |     |  |  +--rw dscp?             uint8

      '
    - '|        |        |     |  +--:(ipv6)

      '
    - '|        |        |     |     +--rw src-ipv6-address inet:ipv6-address

      '
    - '|        |        |     |     +--rw dest-ipv6-address inet:ipv6-address

      '
    - '|        |        |     |     +--rw next-header       uint8

      '
    - '|        |        |     |     +--rw traffic-class?    uint8

      '
    - '|        |        |     |     +--rw flow-label?

      '
    - '|        |        |     |             inet:ipv6-flow-label

      '
    - '|        |        |     |     +--rw hop-limit?        uint8

      '
    - '|        |        |     +--rw virtual-subnet-id uint32

      '
    - '|        |        |     +--rw flow-id?          uint8

      '
    - '|        |        +--:(vxlan) {vxlan-tunnel}?

      '
    - '|        |           +--rw vxlan-header

      '
    - '|        |              +--rw (vxlan-type)?

      '
    - '|        |              |  +--:(ipv4)

      '
    - '|        |              |  |  +--rw src-ipv4-address inet:ipv4-address

      '
    - '|        |              |  |  +--rw dest-ipv4-address inet:ipv4-address

      '
    - '|        |              |  |  +--rw protocol             uint8

      '
    - '|        |              |  |  +--rw ttl?                 uint8

      '
    - '|        |              |  |  +--rw dscp?                uint8

      '
    - '|        |              |  +--:(ipv6)

      '
    - '|        |              |     +--rw src-ipv6-address inet:ipv6-address

      '
    - '|        |              |     +--rw dest-ipv6-address inet:ipv6-address

      '
    - '|        |              |     +--rw next-header          uint8

      '
    - '|        |              |     +--rw traffic-class?       uint8

      '
    - '|        |              |     +--rw flow-label? inet:ipv6-flow-label

      '
    - '|        |              |     +--rw hop-limit?           uint8

      '
    - '|        |              +--rw vxlan-identifier     uint32

      '
    - '|        +--:(tunnel-decapsulation-nexthop) {nexthop-tunnel}?

      '
    - '|        |  +--rw tunnel-decapsulation

      '
    - '|        |     +--rw (tunnel-type)?

      '
    - '|        |        +--:(ipv4) {ipv4-tunnel}?

      '
    - '|        |        |  +--rw ipv4-decapsulation

      '
    - '|        |        |     +--rw ipv4-decapsulation

      '
    - '|        |        |             tunnel-decapsulation-action-definition

      '
    - '|        |        |     +--rw ttl-action?   ttl-action-definition

      '
    - '|        |        +--:(ipv6) {ipv6-tunnel}?

      '
    - '|        |        |  +--rw ipv6-decapsulation

      '
    - '|        |        |     +--rw ipv6-decapsulation

      '
    - '|        |        |             tunnel-decapsulation-action-definition

      '
    - '|        |        |     +--rw hop-limit-action?

      '
    - '|        |        |             hop-limit-action-definition

      '
    - '|        |        +--:(mpls) {mpls-tunnel}?

      '
    - '|        |           +--rw label-pop

      '
    - '|        |              +--rw label-pop     mpls-label-action-definition

      '
    - '|        |              +--rw ttl-action?   ttl-action-definition

      '
    - '|        +--:(logical-tunnel-nexthop) {nexthop-tunnel}?

      '
    - '|        |  +--rw logical-tunnel

      '
    - '|        |     +--rw tunnel-type tunnel-type-definition

      '
    - '|        |     +--rw tunnel-name string

      '
    - '|        +--:(rib-name-nexthop)

      '
    - '|        |  +--rw rib-name?                        string

      '
    - '|        +--:(nexthop-identifier)

      '
    - "|           +--rw nexthop-ref                      nexthop-ref\n                     Figure
      5: Nexthop Base Structure\n"
    title: 2.4.  Nexthop
  - contents:
    - "2.5.  RPC Operations\n   This module defines the following RPC operations:\n
      \  o  rib-add: Add a RIB to a routing instance.  The following are\n      passed
      as the input parameters: the name of the RIB, the address\n      family of the
      RIB, and (optionally) whether the RPF check is\n      enabled.  The output is
      the result of the add operation:\n      *  true - success\n      *  false -
      failed (when failed, the I2RS agent may return the\n         specific reason
      that caused the failure)\n   o  rib-delete: Delete a RIB from a routing instance.
      \ When a RIB is\n      deleted, all routes installed in the RIB will be deleted.
      \ A rib-\n      name is passed as the input parameter.  The output is the result\n
      \     of the delete operation:\n      *  true - success\n      *  false - failed
      (when failed, the I2RS agent may return the\n         specific reason that caused
      the failure)\n   o  route-add: Add a route or a set of routes to a RIB.  The
      following\n      are passed as the input parameters: the name of the RIB, the
      route\n      prefix(es), the route-attributes, the route-vendor-attributes,
      the\n      nexthop, and the \"whether to return failure details\" indication.\n
      \     Before calling the route-add rpc, it is required to call the nh-\n      add
      rpc to create and/or return the nexthop identifier.  However,\n      in situations
      when the nexthop already exists and the nexthop-id\n      is known, this action
      is not expected.  The output is a\n      combination of the route operation
      states while querying the\n      appropriate node in the data tree, which includes:\n
      \     *  success-count: the number of routes that were successfully\n         added;\n
      \     *  failed-count: the number of the routes that failed to be added;\n         and,\n
      \     *  failure-detail: this shows the specific routes that failed to\n         be
      added.\n   o  route-delete: Delete a route or a set of routes from a RIB.  The\n
      \     following are passed as the input parameters: the name of the RIB,\n      the
      route prefix(es), and the \"whether to return failure details\"\n      indication.
      \ The output is a combination of route operation\n      states, which includes:\n
      \     *  success-count: the number of routes that were successfully\n         deleted;\n
      \     *  failed-count: the number of the routes that failed to be\n         deleted;
      and,\n      *  failure-detail: this shows the specific routes that failed to\n
      \        be deleted.\n   o  route-update: Update a route or a set of routes.
      \ The following\n      are passed as the input parameters: the name of the RIB,
      the route\n      prefix(es), the route-attributes, the route-vendor-attributes,
      or\n      the nexthop.  The match conditions can be either route prefix(es),\n
      \     route-attributes, route-vendor-attributes, or nexthops.  The\n      update
      actions include the following: update the nexthops, update\n      the route-attributes,
      and update the route-vendor-attributes.  The\n      output is a combination
      of the route operation states, which\n      includes:\n      *  success-count:
      the number of routes that were successfully\n         updated;\n      *  failed-count:
      the number of the routes that failed to be\n         updated; and,\n      *
      \ failure-detail: this shows the specific routes that failed to\n         be
      updated.\n   o  nh-add: Add a nexthop to a RIB.  The following are passed as
      the\n      input parameters: the name of the RIB and the nexthop.  The\n      network
      node is required to allocate a nexthop identifier to the\n      nexthop.  The
      outputs include the result of the nexthop add\n      operation.\n      *  true
      - success (when success, a nexthop identifier will be\n         returned to
      the I2RS client)\n      *  false - failed (when failed, the I2RS agent may return
      the\n         specific reason that caused the failure)\n   o  nh-delete: Delete
      a nexthop from a RIB.  The following are passed\n      as the input parameters:
      the name of the RIB and a nexthop or\n      nexthop identifier.  The output
      is the result of the delete\n      operation:\n      *  true - success\n      *
      \ false - failed (when failed, the I2RS agent may return the\n         specific
      reason that caused the failure)\n   The structure tree of rpcs is shown in following
      figure.\n   rpcs:\n      +---x rib-add\n      |  +---w input\n      |  |  +---w
      rib-name        string\n      |  |  +---w address-family      address-family-definition\n
      \     |  |  +---w ip-rpf-check?   boolean\n      |  +--ro output\n      |     +--ro
      result uint32\n      |     +--ro reason? string\n      +---x rib-delete\n      |
      \ +---w input\n      |  |  +---w rib-name string\n      |  +--ro output\n      |
      \    +--ro result uint32\n      |     +--ro reason? string\n      +---x route-add\n
      \     |  +---w input\n      |  |  +---w return-failure-detail?   boolean\n      |
      \ |  +---w rib-name                 string\n      |  |  +---w routes\n      |
      \ |     +---w route-list* [route-index]\n      |  |        ...\n      |  +--ro
      output\n      |     +--ro success-count     uint32\n      |     +--ro failed-count
      \     uint32\n      |     +--ro failure-detail\n      |        +--ro failed-routes*
      [route-index]\n      |           +--ro route-index uint32\n      |           +--ro
      error-code? uint32\n      +---x route-delete\n      |  +---w input\n      |
      \ |  +---w return-failure-detail?   boolean\n      |  |  +---w rib-name                 string\n
      \     |  |  +---w routes\n      |  |     +---w route-list* [route-index]\n      |
      \ |        ...\n      |  +--ro output\n      |     +--ro success-count     uint32\n
      \     |     +--ro failed-count      uint32\n      |     +--ro failure-detail\n
      \     |        +--ro failed-routes* [route-index]\n      |           +--ro route-index
      uint32\n      |           +--ro error-code? uint32\n      +---x route-update\n
      \     |  +---w input\n      |  |  +---w return-failure-detail?           boolean\n
      \     |  |  +---w rib-name                         string\n      |  |  +---w
      (match-options)?\n      |  |     +--:(match-route-prefix)\n      |  |     |
      \ ...\n      |  |     +--:(match-route-attributes)\n      |  |     |  ...\n
      \     |  |     +--:(match-route-vendor-attributes) {...}?\n      |  |     |
      \ ...\n      |  |     +--:(match-nexthop)\n      |  |        ...\n      |  +--ro
      output\n      |     +--ro success-count uint32\n      |     +--ro failed-count
      uint32\n      |     +--ro failure-detail\n      |        +--ro failed-routes*
      [route-index]\n      |           +--ro route-index uint32\n      |           +--ro
      error-code? uint32\n      +---x nh-add\n      |  +---w input\n      |  |  +---w
      rib-name              string\n      |  |  +---w nexthop-id?           uint32\n
      \     |  |  +---w sharing-flag?         boolean\n      |  |  +---w (nexthop-type)?\n
      \     |  |     ...\n      |  +--ro output\n      |     +--ro result        uint32\n
      \     |     +--ro reason?       string\n      |     +--ro nexthop-id?   uint32\n
      \     +---x nh-delete\n         +---w input\n         |  +---w rib-name              string\n
      \        |  +---w nexthop-id?           uint32\n         |  +---w sharing-flag?
      \        boolean\n         |  +---w (nexthop-type)?\n         |     ...\n         +--ro
      output\n            +--ro result uint32\n            +--ro reason? string\n
      \                        Figure 6: RPCs Structure\n"
    title: 2.5.  RPC Operations
  - contents:
    - "2.6.  Notifications\n   Asynchronous notifications are sent by the RIB manager
      of a network\n   device to an external entity when some event triggers on the
      network\n   device.  An implementation of this RIB data model MUST support\n
      \  sending two kinds of asynchronous notifications.\n   1.  Route change notification:\n
      \  o Installed (indicates whether the route got installed in the FIB)\n   o
      Active (indicates whether a route has at least one fully resolved\n   nexthop
      and is therefore eligible for installation in the FIB)\n   o Reason (e.g., \"Not
      authorized\")\n   2.  Nexthop resolution status notification\n   Nexthops can
      be fully resolved or unresolved.\n   A resolved nexthop has an adequate level
      of information to send the\n   outgoing packet towards the destination by forwarding
      it on an\n   interface to a directly connected neighbor.\n   An unresolved nexthop
      is something that requires the RIB manager to\n   determine the final resolved
      nexthop.  In one example, a nexthop\n   could be an IP address.  The RIB manager
      would resolve how to reach\n   that IP address, e.g., by checking if that particular
      IP address is\n   reachable by regular IP forwarding, by an MPLS tunnel, or
      by both.\n   If the RIB manager cannot resolve the nexthop, then the nexthop\n
      \  remains in an unresolved state and is NOT a suitable candidate for\n   installation
      in the FIB.\n   An implementation of this RIB data model MUST support sending
      route-\n   change notifications whenever a route transitions between the\n   following
      states:\n   o  from the active state to the inactive state\n   o  from the inactive
      state to the active state\n   o  from the installed state to the uninstalled
      state\n   o  from the uninstalled state to the installed state\n   A single
      notification MAY be used when a route transitions from\n   inactive/uninstalled
      to active/installed or in the other direction.\n   The structure tree of notifications
      is shown in the following figure.\n   notifications:\n        +---n nexthop-resolution-status-change\n
      \       |  +--ro nexthop\n        |  |  +--ro nexthop-id            uint32\n
      \       |  |  +--ro sharing-flag          boolean\n        |  |  +--ro (nexthop-type)?\n
      \       |  |     +--:(nexthop-base)\n        |  |     |  ...\n        |  |     +--:(nexthop-chain)
      {nexthop-chain}?\n        |  |     |  ...\n        |  |     +--:(nexthop-replicate)
      {nexthop-replicate}?\n        |  |     |  ...\n        |  |     +--:(nexthop-protection)
      {nexthop-protection}?\n        |  |     |  ...\n        |  |     +--:(nexthop-load-balance)
      {nexthop-load-balance}?\n        |  |        ...\n        |  +--ro nexthop-state
      nexthop-state-definition\n        +---n route-change\n           +--ro rib-name
      \                string\n           +--ro address-family           address-family-definition\n
      \          +--ro route-index              uint64\n           +--ro match\n           |
      \ +--ro (route-type)?\n           |     +--:(ipv4)\n           |     |  ...\n
      \          |     +--:(ipv6)\n           |     |  ...\n           |     +--:(mpls-route)\n
      \          |     |  ...\n           |     +--:(mac-route)\n           |     |
      \ ...\n           |     +--:(interface-route)\n           |        ...\n           +--ro
      route-installed-state route-installed-state-definition\n           +--ro route-state
      \             route-state-definition\n           +--ro route-change-reason      route-change-reason-definition\n
      \                    Figure 7: Notifications Structure\n"
    title: 2.6.  Notifications
  title: 2.  Model Structure
- contents:
  - "3.  YANG Module\n   This YANG module references [RFC2784], [RFC7348], [RFC7637],
    and\n   [RFC8344].\n   <CODE BEGINS> file \"ietf-i2rs-rib@2018-09-13.yang\"\n
    \  module ietf-i2rs-rib {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-i2rs-rib\";\n
    \    prefix iir;\n     import ietf-inet-types {\n       prefix inet;\n       reference
    \"RFC 6991\";\n     }\n     import ietf-interfaces {\n       prefix if;\n       reference
    \"RFC 8344\";\n     }\n     import ietf-yang-types {\n       prefix yang;\n       reference
    \"RFC 6991\";\n     }\n     organization\n       \"IETF I2RS (Interface to Routing
    System) Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/i2rs/>\n
    \       WG List:  <mailto:i2rs@ietf.org>\n        Editor:   Lixing Wang\n                  <mailto:wang_little_star@sina.com>\n
    \       Editor:   Mach(Guoyi) Chen\n                  <mailto:mach.chen@huawei.com>\n
    \       Editor:   Amit Dass\n                  <mailto:dass.amit@gmail.com>\n
    \       Editor:   Hariharan Ananthakrishnan\n                  <mailto:hari@netflix.com>\n
    \       Editor:   Sriganesh Kini\n                  <mailto:sriganeshkini@gmail.com>\n
    \       Editor:   Nitin Bahadur\n                  <mailto:nitin_bahadur@yahoo.com>\";\n
    \    description\n       \"This module defines a YANG data model for\n        Routing
    Information Base (RIB) that aligns\n        with the I2RS RIB information model.\n
    \       Copyright (c) 2018 IETF Trust and the persons\n        identified as authors
    of the code.  All rights reserved.\n        Redistribution and use in source and
    binary forms, with or\n        without modification, is permitted pursuant to,
    and subject\n        to the license terms contained in, the Simplified BSD License\n
    \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
    to IETF Documents\n        (http://trustee.ietf.org/license-info).\n        This
    version of this YANG module is part of RFC 8341; see\n        the RFC itself for
    full legal notices.\";\n     revision 2018-09-13 {\n       description\n         \"initial
    revision\";\n       reference \"RFC 8431\";\n     }\n     //Features\n     feature
    nexthop-tunnel {\n       description\n         \"This feature means that a node
    supports\n          tunnel nexthop capability.\";\n     }\n     feature nexthop-chain
    {\n       description\n         \"This feature means that a node supports\n          chain
    nexthop capability.\";\n     }\n     feature nexthop-protection {\n       description\n
    \        \"This feature means that a node supports\n          protection nexthop
    capability.\";\n     }\n     feature nexthop-replicate {\n       description\n
    \        \"This feature means that a node supports\n          replicate nexthop
    capability.\";\n     }\n     feature nexthop-load-balance {\n       description\n
    \        \"This feature means that a node supports\n          load-balance nexthop
    capability.\";\n     }\n     feature ipv4-tunnel {\n       description\n         \"This
    feature means that a node supports\n          IPv4 tunnel encapsulation capability.\";\n
    \    }\n     feature ipv6-tunnel {\n       description\n         \"This feature
    means that a node supports\n          IPv6 tunnel encapsulation capability.\";\n
    \    }\n     feature mpls-tunnel {\n       description\n         \"This feature
    means that a node supports\n          MPLS tunnel encapsulation capability.\";\n
    \    }\n     feature vxlan-tunnel {\n       description\n         \"This feature
    means that a node supports\n          Virtual eXtensible Local Area Network\n
    \         (VXLAN) tunnel encapsulation capability.\";\n       reference \"RFC
    7348\";\n     }\n     feature gre-tunnel {\n       description\n         \"This
    feature means that a node supports\n          GRE tunnel encapsulation capability.\";\n
    \      reference \"RFC 2784\";\n     }\n     feature nvgre-tunnel {\n       description\n
    \        \"This feature means that a node supports\n          Network Virtualization
    Using GRE (NVGRE)\n          tunnel encapsulation capability.\";\n       reference
    \"RFC 7637\";\n     }\n     feature route-vendor-attributes {\n       description\n
    \        \"This feature means that a node supports\n          route vendor attributes.\";\n
    \    }\n     //Identities and Type Definitions\n     identity mpls-label-action
    {\n       description\n         \"Base identity from which all MPLS label\n          operations
    are derived.\n          The MPLS label stack operations include:\n          push
    - to add a new label to a label stack\n          pop -  to pop the top label from
    a label stack\n          swap - to exchange the top label of a label\n                 stack
    with a new label\";\n     }\n     identity label-push {\n       base mpls-label-action;\n
    \      description\n         \"MPLS label stack operation: push.\";\n     }\n
    \    identity label-pop {\n       base mpls-label-action;\n       description\n
    \        \"MPLS label stack operation: pop.\";\n     }\n     identity label-swap
    {\n       base mpls-label-action;\n       description\n         \"MPLS label stack
    operation: swap.\";\n     }\n     typedef mpls-label-action-definition {\n       type
    identityref {\n         base mpls-label-action;\n       }\n       description\n
    \        \"MPLS label action definition.\";\n     }\n     identity tunnel-decapsulation-action
    {\n       description\n         \"Base identity from which all tunnel decapsulation\n
    \         actions are derived.\n          Tunnel decapsulation actions include\n
    \         ipv4-decapsulation (to decapsulate an IPv4 tunnel)\n          ipv6-decapsulation
    (to decapsulate an IPv6 tunnel)\";\n     }\n     identity ipv4-decapsulation {\n
    \      base tunnel-decapsulation-action;\n       description\n         \"IPv4
    tunnel decapsulation.\";\n     }\n     identity ipv6-decapsulation {\n       base
    tunnel-decapsulation-action;\n       description\n         \"IPv6 tunnel decapsulation.\";\n
    \    }\n     typedef tunnel-decapsulation-action-definition {\n       type identityref
    {\n         base tunnel-decapsulation-action;\n       }\n       description\n
    \        \"Tunnel decapsulation definition.\";\n     }\n     identity ttl-action
    {\n       description\n         \"Base identity from which all TTL\n          actions
    are derived.\";\n     }\n     identity no-action {\n       base ttl-action;\n
    \      description\n         \"Do nothing regarding the TTL.\";\n     }\n     identity
    copy-to-inner {\n       base ttl-action;\n       description\n         \"Copy
    the TTL of the outer header\n          to the inner header.\";\n     }\n     identity
    decrease-and-copy-to-inner {\n       base ttl-action;\n       description\n         \"Decrease
    TTL by one and copy the TTL\n          to the inner header.\";\n     }\n     identity
    decrease-and-copy-to-next {\n       base ttl-action;\n       description\n         \"Decrease
    TTL by one and copy the TTL\n          to the next header; for example, when\n
    \         MPLS label swapping, decrease the TTL\n          of the in_label and
    copy it to the\n          out_label.\";\n     }\n     typedef ttl-action-definition
    {\n       type identityref {\n         base ttl-action;\n       }\n       description\n
    \        \"TTL action definition.\";\n     }\n     identity hop-limit-action {\n
    \      description\n         \"Base identity from which all hop limit\n          actions
    are derived.\";\n     }\n     identity hop-limit-no-action {\n       base hop-limit-action;\n
    \      description\n         \"Do nothing regarding the hop limit.\";\n     }\n
    \    identity hop-limit-copy-to-inner {\n       base hop-limit-action;\n       description\n
    \        \"Copy the hop limit of the outer header\n          to the inner header.\";\n
    \    }\n     typedef hop-limit-action-definition {\n       type identityref {\n
    \        base hop-limit-action;\n       }\n       description\n         \"IPv6
    hop limit action definition.\";\n     }\n     identity special-nexthop {\n       description\n
    \        \"Base identity from which all special\n          nexthops are derived.\";\n
    \    }\n     identity discard {\n       base special-nexthop;\n       description\n
    \        \"This indicates that the network\n          device should drop the packet
    and\n          increment a drop counter.\";\n     }\n     identity discard-with-error
    {\n       base special-nexthop;\n       description\n         \"This indicates
    that the network\n          device should drop the packet,\n          increment
    a drop counter, and send\n          back an appropriate error message\n          (like
    ICMP error).\";\n     }\n     identity receive {\n       base special-nexthop;\n
    \      description\n         \"This indicates that the traffic is\n          destined
    for the network device, e.g.,\n          protocol packets or Operations,\n          Administration,
    and Maintenance (OAM) packets.\n          All locally destined traffic SHOULD
    be\n          throttled to avoid a denial-of-service\n          attack on the
    router's control plane.  An\n          optional rate-limiter can be specified\n
    \         to indicate how to throttle traffic\n          destined for the control
    plane.\";\n     }\n     identity cos-value {\n       base special-nexthop;\n       description\n
    \        \"Cos-value special nexthop.\";\n     }\n     typedef special-nexthop-definition
    {\n       type identityref {\n         base special-nexthop;\n       }\n       description\n
    \        \"Special nexthop definition.\";\n     }\n     identity ip-route-match-type
    {\n       description\n         \"Base identity from which all route\n          match
    types are derived.\n          The route match type could be:\n          match
    source, or\n          match destination, or\n          match source and destination.\";\n
    \    }\n     identity match-ip-src {\n       base ip-route-match-type;\n       description\n
    \        \"Source route match type.\";\n     }\n     identity match-ip-dest {\n
    \      base ip-route-match-type;\n       description\n         \"Destination route
    match type\";\n     }\n     identity match-ip-src-dest {\n       base ip-route-match-type;\n
    \      description\n         \"Source and Destination route match type\";\n     }\n
    \    typedef ip-route-match-type-definition {\n       type identityref {\n         base
    ip-route-match-type;\n       }\n       description\n         \"IP route match
    type definition.\";\n     }\n     identity address-family {\n       description\n
    \        \"Base identity from which all RIB\n          address families are derived.\";\n
    \    }\n     identity ipv4-address-family {\n       base address-family;\n       description\n
    \        \"IPv4 RIB address family.\";\n     }\n     identity ipv6-address-family
    {\n       base address-family;\n       description\n         \"IPv6 RIB address
    family.\";\n     }\n     identity mpls-address-family {\n       base address-family;\n
    \      description\n         \"MPLS RIB address family.\";\n     }\n     identity
    ieee-mac-address-family {\n       base address-family;\n       description\n         \"MAC
    RIB address family.\";\n     }\n     typedef address-family-definition {\n       type
    identityref {\n         base address-family;\n       }\n       description\n         \"RIB
    address family definition.\";\n     }\n     identity route-type {\n       description\n
    \        \"Base identity from which all route types\n          are derived.\";\n
    \    }\n     identity ipv4-route {\n       base route-type;\n       description\n
    \        \"IPv4 route type.\";\n     }\n     identity ipv6-route {\n       base
    route-type;\n       description\n         \"IPv6 route type.\";\n     }\n     identity
    mpls-route {\n       base route-type;\n       description\n         \"MPLS route
    type.\";\n     }\n     identity ieee-mac {\n       base route-type;\n       description\n
    \        \"MAC route type.\";\n     }\n     identity interface {\n       base
    route-type;\n       description\n         \"Interface route type.\";\n     }\n
    \    typedef route-type-definition {\n       type identityref {\n         base
    route-type;\n       }\n       description\n         \"Route type definition.\";\n
    \    }\n     identity tunnel-type {\n       description\n         \"Base identity
    from which all tunnel\n          types are derived.\";\n     }\n     identity
    ipv4-tunnel {\n       base tunnel-type;\n       description\n         \"IPv4 tunnel
    type\";\n     }\n     identity ipv6-tunnel {\n       base tunnel-type;\n       description\n
    \        \"IPv6 tunnel type\";\n     }\n     identity mpls-tunnel {\n       base
    tunnel-type;\n       description\n         \"MPLS tunnel type\";\n     }\n     identity
    gre-tunnel {\n       base tunnel-type;\n       description\n         \"GRE tunnel
    type\";\n     }\n     identity vxlan-tunnel {\n       base tunnel-type;\n       description\n
    \        \"VXLAN tunnel type\";\n     }\n     identity nvgre-tunnel {\n       base
    tunnel-type;\n       description\n         \"NVGRE tunnel type\";\n     }\n     typedef
    tunnel-type-definition {\n       type identityref {\n         base tunnel-type;\n
    \      }\n       description\n         \"Tunnel type definition.\";\n     }\n
    \    identity route-state {\n       description\n         \"Base identity from
    which all route\n          states are derived.\";\n     }\n     identity active
    {\n       base route-state;\n       description\n         \"Active state.\";\n
    \    }\n     identity inactive {\n       base route-state;\n       description\n
    \        \"Inactive state.\";\n     }\n     typedef route-state-definition {\n
    \      type identityref {\n         base route-state;\n       }\n       description\n
    \        \"Route state definition.\";\n     }\n     identity nexthop-state {\n
    \      description\n         \"Base identity from which all nexthop\n          states
    are derived.\";\n     }\n     identity resolved {\n       base nexthop-state;\n
    \      description\n         \"Resolved nexthop state.\";\n     }\n     identity
    unresolved {\n       base nexthop-state;\n       description\n         \"Unresolved
    nexthop state.\";\n     }\n     typedef nexthop-state-definition {\n       type
    identityref {\n         base nexthop-state;\n       }\n       description\n         \"Nexthop
    state definition.\";\n     }\n     identity route-installed-state {\n       description\n
    \        \"Base identity from which all route\n          installed states are
    derived.\";\n     }\n     identity uninstalled {\n       base route-installed-state;\n
    \      description\n         \"Uninstalled state.\";\n     }\n     identity installed
    {\n       base route-installed-state;\n       description\n         \"Installed
    state.\";\n     }\n     typedef route-installed-state-definition {\n       type
    identityref {\n         base route-installed-state;\n       }\n       description\n
    \        \"Route installed state definition.\";\n     }\n     //Route Change Reason
    Identities\n     identity route-change-reason {\n       description\n         \"Base
    identity from which all route change\n          reasons are derived.\";\n     }\n
    \    identity lower-route-preference {\n       base route-change-reason;\n       description\n
    \        \"This route was installed in the FIB because it had\n          a lower
    route preference value (and thus was more\n          preferred) than the route
    it replaced.\";\n     }\n     identity higher-route-preference {\n       base
    route-change-reason;\n       description\n         \"This route was uninstalled
    from the FIB because it had\n          a higher route preference value (and thus
    was less\n          preferred) than the route that replaced it.\";\n     }\n     identity
    resolved-nexthop {\n       base route-change-reason;\n       description\n         \"This
    route was made active because at least\n          one of its nexthops was resolved.\";\n
    \    }\n     identity unresolved-nexthop {\n       base route-change-reason;\n
    \      description\n         \"This route was made inactive because all of\n          its
    nexthops are unresolved.\";\n     }\n     typedef route-change-reason-definition
    {\n       type identityref {\n         base route-change-reason;\n       }\n       description\n
    \        \"Route change reason definition.\";\n     }\n     typedef nexthop-preference-definition
    {\n       type uint8 {\n         range \"1..99\";\n       }\n       description\n
    \        \"Nexthop-preference is used for protection schemes.\n          It is
    an integer value between 1 and 99.  Lower\n          values are preferred.  To
    download N\n          nexthops to the FIB, the N nexthops with the lowest\n          value
    are selected.  If there are more than N\n          nexthops that have the same
    preference, an\n          implementation of the I2RS client should select N\n
    \         nexthops and download them.  As for how to select\n          the nexthops,
    this is left to the implementations.\";\n     }\n     typedef nexthop-lb-weight-definition
    {\n       type uint8 {\n         range \"1..99\";\n       }\n       description\n
    \        \"Nexthop-lb-weight is used for load-balancing.\n          Each list
    member SHOULD be assigned a weight\n          between 1 and 99.  The weight determines
    the\n          proportion of traffic to be sent over a nexthop\n          used
    for forwarding as a ratio of the weight of\n          this nexthop divided by
    the sum of the weights\n          of all the nexthops of this route that are used\n
    \         for forwarding.  To perform equal load-balancing,\n          one MAY
    specify a weight of 0 for all the member\n          nexthops.  The value 0 is
    reserved for equal\n          load-balancing and, if applied, MUST be applied\n
    \         to all member nexthops.\n          Note that the weight of 0 is special
    because of\n          historical reasons.  It's typically used in\n          hardware
    devices to signify ECMP.\";\n     }\n     typedef nexthop-ref {\n       type leafref
    {\n         path  \"/iir:routing-instance\" +\n               \"/iir:rib-list\"
    +\n               \"/iir:route-list\" +\n               \"/iir:nexthop\" +\n               \"/iir:nexthop-id\";\n
    \      }\n       description\n         \"A nexthop reference that provides\n          an
    indirection reference to a nexthop.\";\n     }\n     //Groupings\n     grouping
    route-prefix {\n       description\n         \"The common attributes used for
    all types of route prefixes.\";\n       leaf route-index {\n         type uint64;\n
    \        mandatory true;\n         description\n           \"Route index.\";\n
    \      }\n       container match {\n         description\n           \"The match
    condition specifies the\n            kind of route (IPv4, MPLS, etc.)\n            and
    the set of fields to match on.\";\n         choice route-type {\n           description\n
    \            \"Route types: IPv4, IPv6, MPLS, MAC, etc.\";\n           case ipv4
    {\n             description\n               \"IPv4 route case.\";\n             container
    ipv4 {\n               description\n                 \"IPv4 route match.\";\n
    \              choice ip-route-match-type {\n                 description\n                   \"IP
    route match type options:\n                    match source, or\n                    match
    destination, or\n                    match source and destination.\";\n                 case
    dest-ipv4-address {\n                   leaf dest-ipv4-prefix {\n                     type
    inet:ipv4-prefix;\n                     mandatory true;\n                     description\n
    \                      \"An IPv4 destination address as the match.\";\n                   }\n
    \                }\n                 case src-ipv4-address {\n                   leaf
    src-ipv4-prefix {\n                     type inet:ipv4-prefix;\n                     mandatory
    true;\n                     description\n                       \"An IPv4 source
    address as the match.\";\n                   }\n                 }\n                 case
    dest-src-ipv4-address {\n                   container dest-src-ipv4-address {\n
    \                    description\n                       \"A combination of an
    IPv4 source and\n                        an IPv4 destination address as the match.\";\n
    \                    leaf dest-ipv4-prefix {\n                       type inet:ipv4-prefix;\n
    \                      mandatory true;\n                       description\n                         \"The
    IPv4 destination address of the match.\";\n                     }\n                     leaf
    src-ipv4-prefix {\n                       type inet:ipv4-prefix;\n                       mandatory
    true;\n                       description\n                         \"The IPv4
    source address of the match.\";\n                     }\n                   }\n
    \                }\n               }\n             }\n           }\n           case
    ipv6 {\n             description\n               \"IPv6 route case.\";\n             container
    ipv6 {\n               description\n                 \"IPv6 route match.\";\n
    \              choice ip-route-match-type {\n                 description\n                   \"IP
    route match type options:\n                    match source,\n                    match
    destination, or\n                    match source and destination.\";\n                 case
    dest-ipv6-address {\n                   leaf dest-ipv6-prefix {\n                     type
    inet:ipv6-prefix;\n                     mandatory true;\n                     description\n
    \                      \"An IPv6 destination address as the match.\";\n                   }\n
    \                }\n                 case src-ipv6-address {\n                   leaf
    src-ipv6-prefix {\n                     type inet:ipv6-prefix;\n                     mandatory
    true;\n                     description\n                       \"An IPv6 source
    address as the match.\";\n                   }\n                 }\n                 case
    dest-src-ipv6-address {\n                   container dest-src-ipv6-address {\n
    \                    description\n                       \"A combination of an
    IPv6 source and\n                        an IPv6 destination address as the match.\";\n
    \                    leaf dest-ipv6-prefix {\n                       type inet:ipv6-prefix;\n
    \                      mandatory true;\n                       description\n                         \"The
    IPv6 destination address of the match.\";\n                     }\n                     leaf
    src-ipv6-prefix {\n                       type inet:ipv6-prefix;\n                       mandatory
    true;\n                       description\n                         \"The IPv6
    source address of the match.\";\n                     }\n                   }\n
    \                }\n               }\n             }\n           }\n           case
    mpls-route {\n             description\n               \"MPLS route case.\";\n
    \            leaf mpls-label {\n               type uint32;\n               mandatory
    true;\n               description\n                 \"The label used for matching.\";\n
    \            }\n           }\n           case mac-route {\n             description\n
    \              \"MAC route case.\";\n             leaf mac-address {\n               type
    yang:mac-address;\n               mandatory true;\n               description\n
    \                \"The MAC address used for matching.\";\n             }\n           }\n
    \          case interface-route {\n             description\n               \"Interface
    route case.\";\n             leaf interface-identifier {\n               type
    if:interface-ref;\n               mandatory true;\n               description\n
    \                \"The interface used for matching.\";\n             }\n           }\n
    \        }\n       }\n     }\n     grouping route {\n       description\n         \"The
    common attributes used for all types of routes.\";\n       uses route-prefix;\n
    \      container nexthop {\n         description\n           \"The nexthop of
    the route.\";\n         uses nexthop;\n       }\n       //In the information model,
    it is called route-statistic\n       container route-status {\n         description\n
    \          \"The status information of the route.\";\n         leaf route-state
    {\n           type route-state-definition;\n           config false;\n           description\n
    \            \"Indicate a route's state: active or inactive.\";\n         }\n
    \        leaf route-installed-state {\n           type route-installed-state-definition;\n
    \          config false;\n           description\n             \"Indicate that
    a route's installed states:\n              installed or uninstalled.\";\n         }\n
    \        leaf route-reason {\n           type route-change-reason-definition;\n
    \          config false;\n           description\n             \"Indicate the
    reason that caused the route change.\";\n         }\n       }\n       container
    route-attributes {\n         description\n           \"Route attributes.\";\n
    \        uses route-attributes;\n       }\n       container route-vendor-attributes
    {\n         description\n           \"Route vendor attributes.\";\n         uses
    route-vendor-attributes;\n       }\n     }\n     grouping nexthop-list {\n       description\n
    \        \"A generic nexthop list.\";\n       list nexthop-list {\n         key
    \"nexthop-member-id\";\n         description\n           \"A list of nexthops.\";\n
    \        leaf nexthop-member-id {\n           type uint32;\n           mandatory
    true;\n           description\n             \"A nexthop identifier that points\n
    \             to a nexthop list member.\n              A nexthop list member is
    a nexthop.\";\n         }\n       }\n     }\n     grouping nexthop-list-p {\n
    \      description\n         \"A nexthop list with preference parameter.\";\n
    \      list nexthop-list {\n         key \"nexthop-member-id\";\n         description\n
    \          \"A list of nexthop.\";\n         leaf nexthop-member-id {\n           type
    uint32;\n           mandatory true;\n           description\n             \"A
    nexthop identifier that points\n              to a nexthop list member.\n              A
    nexthop list member is a nexthop.\";\n         }\n         leaf nexthop-preference
    {\n           type nexthop-preference-definition;\n           mandatory true;\n
    \          description\n             \"Nexthop-preference is used for protection
    schemes.\n              It is an integer value between 1 and 99.  Lower\n              values
    are more preferred.  To download a\n              primary/standby/tertiary group
    to the FIB, the\n              nexthops that are resolved and are most preferred\n
    \             are selected.\";\n         }\n       }\n     }\n     grouping nexthop-list-w
    {\n       description\n         \"A nexthop list with a weight parameter.\";\n
    \      list nexthop-list {\n         key \"nexthop-member-id\";\n         description\n
    \          \"A list of nexthop.\";\n         leaf nexthop-member-id {\n           type
    uint32;\n           mandatory true;\n           description\n             \"A
    nexthop identifier that points\n              to a nexthop list member.\n              A
    nexthop list member is a nexthop.\";\n         }\n         leaf nexthop-lb-weight
    {\n           type nexthop-lb-weight-definition;\n           mandatory true;\n
    \          description\n             \"The weight of a nexthop of\n              the
    load-balance nexthops.\";\n         }\n       }\n     }\n     grouping nexthop
    {\n       description\n         \"The nexthop structure.\";\n       leaf nexthop-id
    {\n         type uint32;\n         description\n           \"An identifier that
    refers to a nexthop.\";\n       }\n       leaf sharing-flag {\n         type boolean;\n
    \        description\n           \"To indicate whether a nexthop is sharable\n
    \           or non-sharable:\n            true  - sharable (which means the nexthop
    can be\n                    shared with other routes)\n            false - non-sharable
    (which means the nexthop can\n                    not be shared with other routes)\";\n
    \      }\n       choice nexthop-type {\n         description\n           \"Nexthop
    type options.\";\n         case nexthop-base {\n           container nexthop-base
    {\n             description\n               \"The base nexthop.\";\n             uses
    nexthop-base;\n           }\n         }\n         case nexthop-chain {\n           if-feature
    \"nexthop-chain\";\n           container nexthop-chain {\n             description\n
    \              \"A chain nexthop.\";\n             uses nexthop-list;\n           }\n
    \        }\n         case nexthop-replicate {\n           if-feature \"nexthop-replicate\";\n
    \          container nexthop-replicate {\n             description\n               \"A
    replicate nexthop.\";\n             uses nexthop-list;\n           }\n         }\n
    \        case nexthop-protection {\n           if-feature \"nexthop-protection\";\n
    \          container nexthop-protection {\n             description\n               \"A
    protection nexthop.\";\n             uses nexthop-list-p;\n           }\n         }\n
    \        case nexthop-load-balance {\n           if-feature \"nexthop-load-balance\";\n
    \          container nexthop-lb {\n             description\n               \"A
    load-balance nexthop.\";\n             uses nexthop-list-w;\n           }\n         }\n
    \      }\n     }\n     grouping nexthop-base {\n       description\n         \"The
    base nexthop.\";\n       choice nexthop-base-type {\n         description\n           \"Nexthop
    base type options.\";\n         case special-nexthop {\n           leaf special
    {\n             type special-nexthop-definition;\n             description\n               \"A
    special nexthop.\";\n           }\n         }\n         case egress-interface-nexthop
    {\n           leaf outgoing-interface {\n             type if:interface-ref;\n
    \            mandatory true;\n             description\n               \"The nexthop
    is an outgoing interface.\";\n           }\n         }\n         case ipv4-address-nexthop
    {\n           leaf ipv4-address {\n             type inet:ipv4-address;\n             mandatory
    true;\n             description\n               \"The nexthop is an IPv4 address.\";\n
    \          }\n         }\n         case ipv6-address-nexthop {\n           leaf
    ipv6-address {\n             type inet:ipv6-address;\n             mandatory true;\n
    \            description\n               \"The nexthop is an IPv6 address.\";\n
    \          }\n         }\n         case egress-interface-ipv4-nexthop {\n           container
    egress-interface-ipv4-address {\n             leaf outgoing-interface {\n               type
    if:interface-ref;\n               mandatory true;\n               description\n
    \                \"Name of the outgoing interface.\";\n             }\n             leaf
    ipv4-address {\n               type inet:ipv4-address;\n               mandatory
    true;\n               description\n                 \"The nexthop points to an
    interface with\n                  an IPv4 address.\";\n             }\n             description\n
    \              \"The nexthop is an egress-interface and an IP\n                address.
    \ This can be used in cases where, e.g.,\n                the IP address is a
    link-local address.\";\n           }\n         }\n         case egress-interface-ipv6-nexthop
    {\n           container egress-interface-ipv6-address {\n             leaf outgoing-interface
    {\n               type if:interface-ref;\n               mandatory true;\n               description\n
    \                \"Name of the outgoing interface.\";\n             }\n             leaf
    ipv6-address {\n               type inet:ipv6-address;\n               mandatory
    true;\n               description\n                 \"The nexthop points to an
    interface with\n                  an IPv6 address.\";\n             }\n             description\n
    \              \"The nexthop is an egress-interface and an IP\n                address.
    \ This can be used in cases where, e.g.,\n                the IP address is a
    link-local address.\";\n           }\n         }\n         case egress-interface-mac-nexthop
    {\n           container egress-interface-mac-address {\n             leaf outgoing-interface
    {\n               type if:interface-ref;\n               mandatory true;\n               description\n
    \                \"Name of the outgoing interface.\";\n             }\n             leaf
    ieee-mac-address {\n               type yang:mac-address;\n               mandatory
    true;\n               description\n                 \"The nexthop points to an
    interface with\n                  a specific MAC address.\";\n             }\n
    \            description\n               \"The egress-interface must be an Ethernet\n
    \               interface.  Address resolution is not required\n                for
    this nexthop.\";\n           }\n         }\n         case tunnel-encapsulation-nexthop
    {\n           if-feature \"nexthop-tunnel\";\n           container tunnel-encapsulation
    {\n             uses tunnel-encapsulation;\n             description\n               \"This
    can be an encapsulation representing an IP\n                tunnel, MPLS tunnel,
    or others as defined in the info\n                model.  An optional egress-interface
    can be chained\n                to the tunnel encapsulation to indicate which\n
    \               interface to send the packet out on.  The\n                egress-interface
    is useful when the network device\n                contains Ethernet interfaces
    and one needs to\n                perform address resolution for the IP packet.\";\n
    \          }\n         }\n         case tunnel-decapsulation-nexthop {\n           if-feature
    \"nexthop-tunnel\";\n           container tunnel-decapsulation {\n             uses
    tunnel-decapsulation;\n             description\n               \"This is to specify
    the decapsulation of a tunnel\n                header.\";\n           }\n         }\n
    \        case logical-tunnel-nexthop {\n           if-feature \"nexthop-tunnel\";\n
    \          container logical-tunnel {\n             uses logical-tunnel;\n             description\n
    \              \"This can be an MPLS Label Switched Path (LSP)\n                or
    a GRE tunnel (or others as defined in this\n                document) that is
    represented by a unique\n                identifier (e.g., name).\";\n           }\n
    \        }\n         case rib-name-nexthop {\n           leaf rib-name {\n             type
    string;\n             description\n               \"A nexthop pointing to a RIB
    indicates that the\n                route lookup needs to continue in the specified\n
    \               RIB.  This is a way to perform chained lookups.\";\n           }\n
    \        }\n         case nexthop-identifier {\n           leaf nexthop-ref {\n
    \            type nexthop-ref;\n             mandatory true;\n             description\n
    \              \"A nexthop reference that points to a nexthop.\";\n           }\n
    \        }\n       }\n     }\n     grouping route-vendor-attributes {\n       description\n
    \        \"Route vendor attributes.\";\n     }\n     grouping logical-tunnel {\n
    \      description\n         \"A logical tunnel that is identified\n          by
    a type and a tunnel name.\";\n       leaf tunnel-type {\n         type tunnel-type-definition;\n
    \        mandatory true;\n         description\n           \"A tunnel type.\";\n
    \      }\n       leaf tunnel-name {\n         type string;\n         mandatory
    true;\n         description\n           \"A tunnel name that points to a logical
    tunnel.\";\n       }\n     }\n     grouping ipv4-header {\n       description\n
    \        \"The IPv4 header encapsulation information.\";\n       leaf src-ipv4-address
    {\n         type inet:ipv4-address;\n         mandatory true;\n         description\n
    \          \"The source IP address of the header.\";\n       }\n       leaf dest-ipv4-address
    {\n         type inet:ipv4-address;\n         mandatory true;\n         description\n
    \          \"The destination IP address of the header.\";\n       }\n       leaf
    protocol {\n         type uint8;\n         mandatory true;\n         description\n
    \          \"The protocol id of the header.\";\n       }\n       leaf ttl {\n
    \        type uint8;\n         description\n           \"The TTL of the header.\";\n
    \      }\n       leaf dscp {\n         type uint8;\n         description\n           \"The
    Differentiated Services Code Point\n            (DSCP) field of the header.\";\n
    \      }\n     }\n     grouping ipv6-header {\n       description\n         \"The
    IPv6 header encapsulation information.\";\n       leaf src-ipv6-address {\n         type
    inet:ipv6-address;\n         mandatory true;\n         description\n           \"The
    source IP address of the header.\";\n       }\n       leaf dest-ipv6-address {\n
    \        type inet:ipv6-address;\n         mandatory true;\n         description\n
    \          \"The destination IP address of the header.\";\n       }\n       leaf
    next-header {\n         type uint8;\n         mandatory true;\n         description\n
    \          \"The next header of the IPv6 header.\";\n       }\n       leaf traffic-class
    {\n         type uint8;\n         description\n           \"The traffic class
    value of the header.\";\n       }\n       leaf flow-label {\n         type inet:ipv6-flow-label;\n
    \        description\n           \"The flow label of the header.\";\n       }\n
    \      leaf hop-limit {\n         type uint8 {\n           range \"1..255\";\n
    \        }\n         description\n           \"The hop limit of the header.\";\n
    \      }\n     }\n     grouping nvgre-header {\n       description\n         \"The
    NVGRE header encapsulation information.\";\n       choice nvgre-type {\n         description\n
    \          \"NVGRE can use either an IPv4\n            or an IPv6 header for encapsulation.\";\n
    \        case ipv4 {\n           uses ipv4-header;\n         }\n         case
    ipv6 {\n           uses ipv6-header;\n         }\n       }\n       leaf virtual-subnet-id
    {\n         type uint32;\n         mandatory true;\n         description\n           \"The
    subnet identifier of the NVGRE header.\";\n       }\n       leaf flow-id {\n         type
    uint8;\n         description\n           \"The flow identifier of the NVGRE header.\";\n
    \      }\n     }\n     grouping vxlan-header {\n       description\n         \"The
    VXLAN encapsulation header information.\";\n       choice vxlan-type {\n         description\n
    \          \"NVGRE can use either an IPv4\n            or an IPv6 header for encapsulation.\";\n
    \        case ipv4 {\n           uses ipv4-header;\n         }\n         case
    ipv6 {\n           uses ipv6-header;\n         }\n       }\n       leaf vxlan-identifier
    {\n         type uint32;\n         mandatory true;\n         description\n           \"The
    VXLAN identifier of the VXLAN header.\";\n       }\n     }\n     grouping gre-header
    {\n       description\n         \"The GRE encapsulation header information.\";\n
    \      choice dest-address-type {\n         description\n           \"GRE options:
    IPv4 and IPv6\";\n         case ipv4 {\n           leaf ipv4-dest {\n             type
    inet:ipv4-address;\n             mandatory true;\n             description\n               \"The
    destination IP address of the GRE header.\";\n           }\n         }\n         case
    ipv6 {\n           leaf ipv6-dest {\n             type inet:ipv6-address;\n             mandatory
    true;\n             description\n               \"The destination IP address of
    the GRE header.\";\n           }\n         }\n       }\n       leaf protocol-type
    {\n         type uint16;\n         mandatory true;\n         description\n           \"The
    protocol type of the GRE header.\";\n       }\n       leaf key {\n         type
    uint64;\n         description\n           \"The GRE key of the GRE header.\";\n
    \      }\n     }\n     grouping mpls-header {\n       description\n         \"The
    MPLS encapsulation header information.\";\n       list label-operations {\n         key
    \"label-oper-id\";\n         description\n           \"Label operations.\";\n
    \        leaf label-oper-id {\n           type uint32;\n           description\n
    \            \"An optional identifier that points\n              to a label operation.\";\n
    \        }\n         choice label-actions {\n           description\n             \"Label
    action options.\";\n           case label-push {\n             container label-push
    {\n               description\n                 \"Label push operation.\";\n               leaf
    label {\n                 type uint32;\n                 mandatory true;\n                 description\n
    \                  \"The label to be pushed.\";\n               }\n               leaf
    s-bit {\n                 type boolean;\n                 description\n                   \"The
    s-bit ('Bottom of Stack' bit) of the label to be\n                    pushed.\";\n
    \              }\n               leaf tc-value {\n                 type uint8;\n
    \                description\n                   \"The traffic class value of
    the label to be pushed.\";\n               }\n               leaf ttl-value {\n
    \                type uint8;\n                 description\n                   \"The
    TTL value of the label to be pushed.\";\n               }\n             }\n           }\n
    \          case label-swap {\n             container label-swap {\n               description\n
    \                \"Label swap operation.\";\n               leaf in-label {\n
    \                type uint32;\n                 mandatory true;\n                 description\n
    \                  \"The label to be swapped.\";\n               }\n               leaf
    out-label {\n                 type uint32;\n                 mandatory true;\n
    \                description\n                   \"The out MPLS label.\";\n               }\n
    \              leaf ttl-action {\n                 type ttl-action-definition;\n
    \                description\n                   \"The label TTL actions:\n                    -
    No-action\n                    - Copy to inner label\n                    - Decrease
    (the in-label)\n                      by 1 and copy to the out-label\";\n               }\n
    \            }\n           }\n         }\n       }\n     }\n     grouping tunnel-encapsulation
    {\n       description\n         \"Tunnel encapsulation information.\";\n       choice
    tunnel-type {\n         description\n           \"Tunnel options for nexthops.\";\n
    \        case ipv4 {\n           if-feature \"ipv4-tunnel\";\n           container
    ipv4-header {\n             uses ipv4-header;\n             description\n               \"IPv4
    header.\";\n           }\n         }\n         case ipv6 {\n           if-feature
    \"ipv6-tunnel\";\n           container ipv6-header {\n             uses ipv6-header;\n
    \            description\n               \"IPv6 header.\";\n           }\n         }\n
    \        case mpls {\n           if-feature \"mpls-tunnel\";\n           container
    mpls-header {\n             uses mpls-header;\n             description\n               \"MPLS
    header.\";\n           }\n         }\n         case gre {\n           if-feature
    \"gre-tunnel\";\n           container gre-header {\n             uses gre-header;\n
    \            description\n               \"GRE header.\";\n           }\n         }\n
    \        case nvgre {\n           if-feature \"nvgre-tunnel\";\n           container
    nvgre-header {\n             uses nvgre-header;\n             description\n               \"NVGRE
    header.\";\n           }\n         }\n         case vxlan {\n           if-feature
    \"vxlan-tunnel\";\n           container vxlan-header {\n             uses vxlan-header;\n
    \            description\n               \"VXLAN header.\";\n           }\n         }\n
    \      }\n     }\n     grouping tunnel-decapsulation {\n       description\n         \"Tunnel
    decapsulation information.\";\n       choice tunnel-type {\n         description\n
    \          \"Nexthop tunnel type options.\";\n         case ipv4 {\n           if-feature
    \"ipv4-tunnel\";\n           container ipv4-decapsulation {\n             description\n
    \              \"IPv4 decapsulation.\";\n             leaf ipv4-decapsulation
    {\n               type tunnel-decapsulation-action-definition;\n               mandatory
    true;\n               description\n                 \"IPv4 decapsulation operations.\";\n
    \            }\n             leaf ttl-action {\n               type ttl-action-definition;\n
    \              description\n                 \"The TTL actions:\n                  no-action
    or copy to inner header.\";\n             }\n           }\n         }\n         case
    ipv6 {\n           if-feature \"ipv6-tunnel\";\n           container ipv6-decapsulation
    {\n             description\n               \"IPv6 decapsulation.\";\n             leaf
    ipv6-decapsulation {\n               type tunnel-decapsulation-action-definition;\n
    \              mandatory true;\n               description\n                 \"IPv6
    decapsulation operations.\";\n             }\n             leaf hop-limit-action
    {\n               type hop-limit-action-definition;\n               description\n
    \                \"The hop limit actions:\n                  no-action or copy
    to inner header.\";\n             }\n           }\n         }\n         case mpls
    {\n           if-feature \"mpls-tunnel\";\n           container label-pop {\n
    \            description\n               \"MPLS decapsulation.\";\n             leaf
    label-pop {\n               type mpls-label-action-definition;\n               mandatory
    true;\n               description\n                 \"Pop a label from the label
    stack.\";\n             }\n             leaf ttl-action {\n               type
    ttl-action-definition;\n               description\n                 \"The label
    TTL action.\";\n             }\n           }\n         }\n       }\n     }\n     grouping
    route-attributes {\n       description\n         \"Route attributes.\";\n       leaf
    route-preference {\n         type uint32;\n         mandatory true;\n         description\n
    \          \"ROUTE_PREFERENCE: This is a numerical value that\n            allows
    for comparing routes from different\n            protocols.  Static configuration
    is also\n            considered a protocol for the purpose of this\n            field.
    \ It is also known as administrative-distance.\n            The lower the value,
    the higher the preference.\";\n       }\n       leaf local-only {\n         type
    boolean;\n         mandatory true;\n         description\n           \"Indicate
    whether the attribute is local only.\";\n       }\n       container address-family-route-attributes
    {\n         description\n           \"Address-family-related route attributes.\";\n
    \        choice route-type {\n           description\n             \"Address-family-related
    route attributes. Future\n              documents should specify these attributes
    by augmenting\n              the cases in this choice.\";\n           case ip-route-attributes
    {\n           }\n           case mpls-route-attributes {\n           }\n           case
    ethernet-route-attributes {\n           }\n         }\n       }\n     }\n     container
    routing-instance {\n       description\n         \"A routing instance, in the
    context of\n          the RIB information model, is a collection\n          of
    RIBs, interfaces, and routing parameters.\";\n       leaf name {\n         type
    string;\n         description\n           \"The name of the routing instance.
    \ This MUST\n            be unique across all routing instances in\n            a
    given network device.\";\n       }\n       list interface-list {\n         key
    \"name\";\n         description\n           \"This represents the list of interfaces
    associated\n            with this routing instance.  The interface list helps\n
    \           constrain the boundaries of packet forwarding.\n            Packets
    coming on these interfaces are directly\n            associated with the given
    routing instance.  The\n            interface list contains a list of identifiers
    with\n            each identifier uniquely identifying an interface.\";\n         leaf
    name {\n           type if:interface-ref;\n           description\n             \"A
    reference to the name of a network-layer interface.\";\n         }\n       }\n
    \      leaf router-id {\n         type yang:dotted-quad;\n         description\n
    \          \"Router ID: The 32-bit number in the form of a dotted quad.\";\n       }\n
    \      leaf lookup-limit {\n         type uint8;\n         description\n           \"A
    limit on how many levels of a lookup can be performed.\";\n       }\n       list
    rib-list {\n         key \"name\";\n         description\n           \"A list
    of RIBs that are associated with the routing\n            instance.\";\n         leaf
    name {\n           type string;\n           mandatory true;\n           description\n
    \            \"A reference to the name of each RIB.\";\n         }\n         leaf
    address-family {\n           type address-family-definition;\n           mandatory
    true;\n           description\n             \"The address family of a RIB.\";\n
    \        }\n         leaf ip-rpf-check {\n           type boolean;\n           description\n
    \            \"Each RIB can be optionally associated with a\n              ENABLE_IP_RPF_CHECK
    attribute that enables Reverse\n              Path Forwarding (RPF) checks on
    all IP routes in that\n              RIB.   An RPF check is used to\n              prevent
    spoofing and limit malicious traffic.\";\n         }\n         list route-list
    {\n           key \"route-index\";\n           description\n             \"A list
    of routes of a RIB.\";\n           uses route;\n         }\n         // This is
    a list that maintains the nexthops added to the RIB.\n         uses nexthop-list;\n
    \      }\n     }\n     //RPC Operations\n     rpc rib-add {\n       description\n
    \        \"To add a RIB to an instance\";\n       input {\n         leaf name
    {\n           type string;\n           mandatory true;\n           description\n
    \            \"A reference to the name of the RIB\n              that is to be
    added.\";\n         }\n         leaf address-family {\n           type address-family-definition;\n
    \          mandatory true;\n           description\n             \"The address
    family of the RIB.\";\n         }\n         leaf ip-rpf-check {\n           type
    boolean;\n           description\n             \"Each RIB can be optionally associated
    with an\n              ENABLE_IP_RPF_CHECK attribute that enables\n              RPF
    checks on all IP routes in that\n              RIB.   An RPF check is used to\n
    \             prevent spoofing and limit malicious traffic.\";\n         }\n       }\n
    \      output {\n         leaf result {\n           type boolean;\n           mandatory
    true;\n           description\n             \"Return the result of the rib-add
    operation.\n              true  - success;\n              false - failed\";\n
    \        }\n         leaf reason {\n           type string;\n           description\n
    \            \"The specific reason that caused the failure.\";\n         }\n       }\n
    \    }\n     rpc rib-delete {\n       description\n         \"To delete a RIB
    from a routing instance.\n          After deleting the RIB, all routes installed\n
    \         in the RIB will be deleted as well.\";\n       input {\n         leaf
    name {\n           type string;\n           mandatory true;\n           description\n
    \            \"A reference to the name of the RIB\n              that is to be
    deleted.\";\n         }\n       }\n       output {\n         leaf result {\n           type
    boolean;\n           mandatory true;\n           description\n             \"Return
    the result of the rib-delete operation.\n              true  - success;\n              false
    - failed\";\n         }\n         leaf reason {\n           type string;\n           description\n
    \            \"The specific reason that caused failure.\";\n         }\n       }\n
    \    }\n     grouping route-operation-state {\n       description\n         \"Route
    operation state.\";\n       leaf success-count {\n         type uint32;\n         mandatory
    true;\n         description\n           \"The numbers of routes that are successfully\n
    \           added/deleted/updated.\";\n       }\n       leaf failed-count {\n
    \        type uint32;\n         mandatory true;\n         description\n           \"The
    numbers of the routes that fail\n            to be added/deleted/updated.\";\n
    \      }\n       container failure-detail {\n         description\n           \"The
    failure detail reflects the reason why a route\n            operation fails.  It
    is an array that includes the route\n            index and error code of the failed
    route.\";\n         list failed-routes {\n           key \"route-index\";\n           description\n
    \            \"The list of failed routes.\";\n           leaf route-index {\n
    \            type uint32;\n             description\n               \"The route
    index of the failed route.\";\n           }\n           leaf error-code {\n             type
    uint32;\n             description\n               \"The error code that reflects
    the failure reason.\n                0 - Reserved\n                1 - Trying
    to add a repeat route\n                2 - Trying to delete or update a route
    that does not\n                  exist\n                3 - Malformed route attributes\";\n
    \          }\n         }\n       }\n     }\n     rpc route-add {\n       description\n
    \        \"To add a route or a list of routes to a RIB\";\n       input {\n         leaf
    return-failure-detail {\n           type boolean;\n           default \"false\";\n
    \          description\n             \"Whether to return the failure detail.\n
    \             true  - return the failure detail\n              false - do not
    return the failure detail\n              The default is false.\";\n         }\n
    \        leaf rib-name {\n           type string;\n           mandatory true;\n
    \          description\n             \"A reference to the name of a RIB.\";\n
    \        }\n         container routes {\n           description\n             \"The
    routes to be added to the RIB.\";\n           list route-list {\n             key
    \"route-index\";\n             description\n               \"The list of routes
    to be added.\";\n             uses route-prefix;\n             container route-attributes
    {\n               uses route-attributes;\n               description\n                 \"The
    route attributes.\";\n             }\n             container route-vendor-attributes
    {\n               if-feature \"route-vendor-attributes\";\n               uses
    route-vendor-attributes;\n               description\n                 \"The route
    vendor attributes.\";\n             }\n             container nexthop {\n               uses
    nexthop;\n               description\n                 \"The nexthop of the added
    route.\";\n             }\n           }\n         }\n       }\n       output {\n
    \        uses route-operation-state;\n       }\n     }\n     rpc route-delete
    {\n       description\n         \"To delete a route or a list of routes from a
    RIB\";\n       input {\n         leaf return-failure-detail {\n           type
    boolean;\n           default \"false\";\n           description\n             \"Whether
    to return the failure detail.\n              true  - return the failure detail\n
    \             false - do not return the failure detail\n              The default
    is false.\";\n         }\n         leaf rib-name {\n           type string;\n
    \          mandatory true;\n           description\n             \"A reference
    to the name of a RIB.\";\n         }\n         container routes {\n           description\n
    \            \"The routes to be added to the RIB.\";\n           list route-list
    {\n             key \"route-index\";\n             description\n               \"The
    list of routes to be deleted.\";\n             uses route-prefix;\n           }\n
    \        }\n       }\n       output {\n         uses route-operation-state;\n
    \      }\n     }\n     grouping route-update-options {\n       description\n         \"Update
    options:\n          1. update the nexthop\n          2. update the route attributes\n
    \         3. update the route-vendor-attributes\";\n       choice update-options
    {\n         description\n           \"Update options:\n            1. update the
    nexthop\n            2. update the route attributes\n            3. update the
    route-vendor-attributes\";\n         case update-nexthop {\n           container
    updated-nexthop {\n             uses nexthop;\n             description\n               \"The
    nexthop used for updating.\";\n           }\n         }\n         case update-route-attributes
    {\n           container updated-route-attr {\n             uses route-attributes;\n
    \            description\n               \"The route attributes used for updating.\";\n
    \          }\n         }\n         case update-route-vendor-attributes {\n           container
    updated-route-vendor-attr {\n             uses route-vendor-attributes;\n             description\n
    \              \"The vendor route attributes used for updating.\";\n           }\n
    \        }\n       }\n     }\n     rpc route-update {\n       description\n         \"To
    update a route or a list of routes of a RIB.\n          The inputs:\n            1.
    The match conditions, which could be:\n              a. route prefix,\n              b.
    route attributes, or\n              c. nexthop.\n            2. The update parameters
    to be used:\n              a. new nexthop,\n              b. new route attributes,
    or\n              c. nexthop.\n          Actions:\n            1. update the nexthop\n
    \           2. update the route attributes\n          The outputs:\n            success-count
    - the number of routes updated\n            failed-count - the number of routes
    fail to update\n            failure-detail - the detail failure info\n         \";\n
    \      input {\n         leaf return-failure-detail {\n           type boolean;\n
    \          default \"false\";\n           description\n             \"Whether
    to return the failure detail.\n              true  - return the failure detail\n
    \             false - do not return the failure detail\n              The default
    is false.\";\n         }\n         leaf rib-name {\n           type string;\n
    \          mandatory true;\n           description\n             \"A reference
    to the name of a RIB.\";\n         }\n         choice match-options {\n           description\n
    \            \"Match options.\";\n           case match-route-prefix {\n             description\n
    \              \"Update the routes that match the route\n                prefix(es)
    condition.\";\n             container input-routes {\n               description\n
    \                \"The matched routes to be updated.\";\n               list route-list
    {\n                 key \"route-index\";\n                 description\n                   \"The
    list of routes to be updated.\";\n                 uses route-prefix;\n                 uses
    route-update-options;\n               }\n             }\n           }\n           case
    match-route-attributes {\n             description\n               \"Update the
    routes that match the\n                route attributes condition.\";\n             container
    input-route-attributes {\n               description\n                 \"The route
    attributes are used for matching.\";\n               uses route-attributes;\n
    \            }\n             container update-parameters {\n               description\n
    \                \"Update options:\n                  1. update the nexthop\n
    \                 2. update the route attributes\n                  3. update
    the route-vendor-attributes\";\n               uses route-update-options;\n             }\n
    \          }\n           case match-route-vendor-attributes {\n             if-feature
    \"route-vendor-attributes\";\n             description\n               \"Update
    the routes that match the\n                vendor attributes condition\";\n             container
    input-route-vendor-attributes {\n               description\n                 \"The
    vendor route attributes are used for matching.\";\n               uses route-vendor-attributes;\n
    \            }\n             container update-parameters-vendor {\n               description\n
    \                \"Update options:\n                  1. update the nexthop\n
    \                 2. update the route attributes\n                  3. update
    the route-vendor-attributes\";\n               uses route-update-options;\n             }\n
    \          }\n           case match-nexthop {\n             description\n               \"Update
    the routes that match the nexthop.\";\n             container input-nexthop {\n
    \              description\n                 \"The nexthop used for matching.\";\n
    \              uses nexthop;\n             }\n             container update-parameters-nexthop
    {\n               description\n                 \"Update options:\n                  1.
    update the nexthop\n                  2. update the route attributes\n                  3.
    update the route-vendor-attributes\";\n               uses route-update-options;\n
    \            }\n           }\n         }\n       }\n       output {\n         uses
    route-operation-state;\n       }\n     }\n     rpc nh-add {\n       description\n
    \        \"To add a nexthop to a RIB.\n          Inputs parameters:\n            1.
    rib-name\n            2. nexthop\n          Actions:\n            Add the nexthop
    to the RIB\n          Outputs:\n            1. Operation result:\n               true
    \ - success\n               false - failed\n            2. nexthop identifier\";\n
    \      input {\n         leaf rib-name {\n           type string;\n           mandatory
    true;\n           description\n             \"A reference to the name of a RIB.\";\n
    \        }\n         uses nexthop;\n       }\n       output {\n         leaf result
    {\n           type boolean;\n           mandatory true;\n           description\n
    \            \"Return the result of the rib-add operation:\n              true
    \ - success\n              false - failed\";\n         }\n         leaf reason
    {\n           type string;\n           description\n             \"The specific
    reason that caused the failure.\";\n         }\n         leaf nexthop-id {\n           type
    uint32;\n           description\n             \"A nexthop identifier that is allocated
    to the nexthop.\";\n         }\n       }\n     }\n     rpc nh-delete {\n       description\n
    \        \"To delete a nexthop from a RIB\";\n       input {\n         leaf rib-name
    {\n           type string;\n           mandatory true;\n           description\n
    \            \"A reference to the name of a RIB.\";\n         }\n         uses
    nexthop;\n       }\n       output {\n         leaf result {\n           type boolean;\n
    \          mandatory true;\n           description\n             \"Return the
    result of the rib-add operation:\n              true  - success;\n              false
    - failed\";\n         }\n         leaf reason {\n           type string;\n           description\n
    \            \"The specific reason that caused the failure.\";\n         }\n       }\n
    \    }\n     //Notifications\n     notification nexthop-resolution-status-change
    {\n       description\n         \"Nexthop resolution status (resolved/unresolved)\n
    \         notification.\";\n       container nexthop {\n         description\n
    \          \"The nexthop.\";\n         uses nexthop;\n       }\n       leaf nexthop-state
    {\n         type nexthop-state-definition;\n         mandatory true;\n         description\n
    \          \"Nexthop resolution status (resolved/unresolved)\n            notification.\";\n
    \      }\n     }\n     notification route-change {\n       description\n         \"Route
    change notification.\";\n       leaf rib-name {\n         type string;\n         mandatory
    true;\n         description\n           \"A reference to the name of a RIB.\";\n
    \      }\n       leaf address-family {\n         type address-family-definition;\n
    \        mandatory true;\n         description\n           \"The address family
    of a RIB.\";\n       }\n       uses route-prefix;\n       leaf route-installed-state
    {\n         type route-installed-state-definition;\n         mandatory true;\n
    \        description\n           \"Indicates whether the route got installed in
    the FIB.\";\n       }\n       leaf route-state {\n         type route-state-definition;\n
    \        mandatory true;\n         description\n           \"Indicates whether
    a route is active or inactive.\";\n       }\n       list route-change-reasons
    {\n         key \"route-change-reason\";\n         description\n           \"The
    reasons that cause the route change.  A route\n            change may result from
    several reasons; for\n            example, a nexthop becoming resolved will make
    a\n            route A active, which is of better preference than\n            a
    currently active route B, which results in the\n            route A being installed\";\n
    \        leaf route-change-reason {\n           type route-change-reason-definition;\n
    \          mandatory true;\n           description\n             \"The reason
    that caused the route change.\";\n         }\n       }\n     }\n   }\n   <CODE
    ENDS>\n"
  title: 3.  YANG Module
- contents:
  - "4.  IANA Considerations\n   This document registers a URI in the \"ns\" registry
    within the \"IETF\n   XML Registry\" [RFC3688]:\n    -------------------------------------------------------------------\n
    \   URI: urn:ietf:params:xml:ns:yang:ietf-i2rs-rib\n    Registrant Contact: The
    IESG.\n    XML: N/A, the requested URI is an XML namespace.\n    -------------------------------------------------------------------\n
    \  This document registers a YANG module in the \"YANG Module Names\"\n   registry
    [RFC7950]:\n    -------------------------------------------------------------------\n
    \   name:         ietf-i2rs-rib\n    namespace:    urn:ietf:params:xml:ns:yang:ietf-i2rs-rib\n
    \   prefix:       iir\n    reference:    RFC 8431\n    -------------------------------------------------------------------\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   The YANG module specified in this document defines
    a schema for data\n   that is designed to be accessed via network management protocols
    such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n
    \  is the secure transport layer, and the mandatory-to-implement secure\n   transport
    is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and
    the mandatory-to-implement secure transport is TLS\n   [RFC8446].\n   The NETCONF
    access control model [RFC8341] provides the means to\n   restrict access for particular
    NETCONF or RESTCONF users to a\n   preconfigured subset of all available NETCONF
    or RESTCONF protocol\n   operations and content.\n   The YANG module defines information
    that can be configurable in\n   certain instances, for example, a RIB, a route,
    a nexthop can be\n   created or deleted by client applications; the YANG module
    also\n   defines RPCs that can be used by client applications to add/delete\n
    \  RIBs, routes, and nexthops.  In such cases, a malicious client could\n   attempt
    to remove, add, or update a RIB, a route, or a nexthop by\n   creating or deleting
    corresponding elements in the RIB, route, and\n   nexthop lists, respectively.
    \ Removing a RIB or a route could lead to\n   disruption or impact in performance
    of a service; updating a route\n   may lead to suboptimal path and degradation
    of service levels as well\n   as possibly disruption of service.  For those reasons,
    it is\n   important that the NETCONF access control model is vigorously applied\n
    \  to prevent misconfiguration by unauthorized clients.\n   There are a number
    of data nodes defined in this YANG module that are\n   writable/creatable/deletable
    (i.e., config true, which is the\n   default).  These data nodes may be considered
    sensitive or vulnerable\n   in some network environments.  Write operations (e.g.,
    edit-config)\n   to these data nodes without proper protection can have a negative\n
    \  effect on network operations.  These are the subtrees and data nodes\n   and
    their sensitivity/vulnerability:\n   o  RIB: A malicious client could attempt
    to remove a RIB from a\n      routing instance, for example, in order to sabotage
    the services\n      provided by the RIB or to add a RIB to a routing instance
    (hence,\n      to inject unauthorized traffic into the nexthop).\n   o  route:
    A malicious client could attempt to remove or add a route\n      from/to a RIB,
    for example, in order to sabotage the services\n      provided by the RIB.\n   o
    \ nexthop: A malicious client could attempt to remove or add a\n      nexthop
    from/to RIB, which may lead to a suboptimal path, a\n      degradation of service
    levels, and a possible disruption of\n      service.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]  Bierman, A. and M.
      Bjorklund, \"Network Configuration\n              Access Control Model\", STD
      91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n
      \  [RFC8344]  Bjorklund, M., \"A YANG Data Model for IP Management\",\n              RFC
      8344, DOI 10.17487/RFC8344, March 2018,\n              <https://www.rfc-editor.org/info/rfc8344>.\n
      \  [RFC8430]  Bahadur, N., Ed., Kini, S., Ed., and J. Medved, \"RIB\n              Information
      Model\", RFC 8430, DOI 10.17487/RFC8430,\n              September 2018, <http://www.rfc-editor.org/info/rfc8430>.\n
      \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n
      \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8446>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [I2RS-REQS]\n              Hares, S. and M.
      Chen, \"Summary of I2RS Use Case\n              Requirements\", Work in Progress,
      draft-ietf-i2rs-usecase-\n              reqs-summary-03, November 2016.\n   [RFC2784]
      \ Farinacci, D., Li, T., Hanks, S., Meyer, D., and P.\n              Traina,
      \"Generic Routing Encapsulation (GRE)\", RFC 2784,\n              DOI 10.17487/RFC2784,
      March 2000,\n              <https://www.rfc-editor.org/info/rfc2784>.\n   [RFC7348]
      \ Mahalingam, M., Dutt, D., Duda, K., Agarwal, P., Kreeger,\n              L.,
      Sridhar, T., Bursell, M., and C. Wright, \"Virtual\n              eXtensible
      Local Area Network (VXLAN): A Framework for\n              Overlaying Virtualized
      Layer 2 Networks over Layer 3\n              Networks\", RFC 7348, DOI 10.17487/RFC7348,
      August 2014,\n              <https://www.rfc-editor.org/info/rfc7348>.\n   [RFC7637]
      \ Garg, P., Ed. and Y. Wang, Ed., \"NVGRE: Network\n              Virtualization
      Using Generic Routing Encapsulation\",\n              RFC 7637, DOI 10.17487/RFC7637,
      September 2015,\n              <https://www.rfc-editor.org/info/rfc7637>.\n
      \  [RFC7921]  Atlas, A., Halpern, J., Hares, S., Ward, D., and T.\n              Nadeau,
      \"An Architecture for the Interface to the Routing\n              System\",
      RFC 7921, DOI 10.17487/RFC7921, June 2016,\n              <https://www.rfc-editor.org/info/rfc7921>.\n
      \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP
      215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank Chris Bowers, John Scudder,
    Tom\n   Petch, Mike McBride, and Ebben Aries for their review, suggestions,\n
    \  and comments to this document.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   The following individuals also contributed to this document.\n
    \  o  Zekun He, Tencent Holdings Ltd.\n   o  Sujian Lu, Tencent Holdings Ltd.\n
    \  o  Jeffery Zhang, Juniper Networks\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Lixing Wang\n   Individual\n   Email: wang_little_star@sina.com\n
    \  Mach(Guoyi) Chen\n   Huawei\n   Email: mach.chen@huawei.com\n   Amit Dass\n
    \  Ericsson\n   Email: dass.amit@gmail.com\n   Hariharan Ananthakrishnan\n   Netflix\n
    \  Email: hari@netflix.com\n   Sriganesh Kini\n   Individual\n   Email: sriganeshkini@gmail.com\n
    \  Nitin Bahadur\n   Uber\n   Email: nitin_bahadur@yahoo.com\n"
  title: Authors' Addresses
