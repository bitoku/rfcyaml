- title: __initial_text__
  contents:
  - '                    A Note on Reconnection Protocol

    '
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   This note documents the experience we have had in implementing\
    \ a\n   modified, experimental version of the Telnet reconnection protocol\n \
    \  option within the context of the Resource Sharing Executive (RSEXEC).\n   The\
    \ reconnection protocol specifies a procedure for transforming a\n   configuration\
    \ from one in which the initiating process has\n   connections to two correspondent\
    \ processes, to one in which there is\n   a direct connection between the correspondents.\
    \ When the procedure is\n   successfully completed, the initiating process is\
    \ no longer in the\n   communication path between the correspondents.\n   Resource\
    \ sharing computer networks and distributed computing will\n   increasingly give\
    \ rise to specialization by task among the computer\n   installations. In such\
    \ an environment, a \"job\" is the dynamically\n   varying interconnection of\
    \ a subset of these specialized modules.\n   Connections are the \"glue\" in \"\
    bonding\" the job together.\n   Reconnection provides for a dynamically changing\
    \ \"bonding\" structure.\n   (For a more complete discussion of the utility of\
    \ reconnection, see\n   RFC 426).\n   This document deals with reconnection in\
    \ terms of its current ARPANET\n   definition as a Telnet protocol option.  The\
    \ first section defines a\n   modified reconnection protocol. The second section\
    \ discusses general\n   network implementation details, while the final section\
    \ describes\n   aspects of the TENEX/RSEXEC implementation.\n   Familiarity with\
    \ the new ARPANET Telnet protocol (RFC 495) is\n   assumed.\n"
- title: I.  PROTOCOL for RECONNECTING TELNET COMMUNICATION PATHS
  contents:
  - "I.  PROTOCOL for RECONNECTING TELNET COMMUNICATION PATHS\n   A process initiates\
    \ the reconnection of two of its Telnet connections\n   by sending (or requesting\
    \ its \"system\" to send) the\n   <IAC><DO><RECONNECT> Telnet command sequence\
    \ over each of the two\n   send connections.  The process initiating the reconnection\
    \ is\n   attempting to cause the direct connection of the objects of the two\n\
    \   Telnet connections. In this manner, the initiating process can remove\n  \
    \ itself from the communication path between Telnet objects.\n   The initiating\
    \ process awaits positive responses to both reconnection\n   requests before proceeding\
    \ further with the reconnection. A\n   reconnection request may be accepted by\
    \ replying with the Telnet\n   sequence <IAC><WILL><RECONNECT>. It may be rejected\
    \ by sending the\n   Telnet sequence <IAC><WONT><RECONNECT>. Rejection of both\
    \ requests\n   means normal communication may resume at once. Rejection of one\n\
    \   request (but not the other) requires that the process agreeing to the\n  \
    \ reconnection be notified by sending it the Telnet sequence\n   <IAC><DONT><RECONNECT>\
    \ in response to its acceptance reply.\n   After receiving positive responses\
    \ to both requests, the initiating\n   agent next selects the object of one of\
    \ the Telnet connections for a\n   passive role in the subsequent connection attempt.\
    \ The other is\n   designated as the active participant. The passive participant\
    \ is to\n   listen on a set of sockets, and the active participant is to send\n\
    \   Request for Connections (RFCs) for those sockets. By designating\n   roles,\
    \ we are trying to reduce the probability of synchronization\n   problems.\n \
    \  The initiating process next enters into subnegotiation with the\n   process\
    \ designated as being passive. This subnegotiation involves\n   sending the Telnet\
    \ sequence <IAC> <SB> <RECONNECT> <PASSIVE>\n   <NEWHOST> <NEWSOCKET1> <NEWSOCKET2>\
    \ <NEWSOCKET3> <NEWSOCKET4> <IAC>\n   <SE>. The <PASSIVE> parameter indicates\
    \ that the recipient is to\n   listen for RFCs from the socket pair denoted by\
    \ <NEWHOST>\n   <NEWSOCKET1-4>. The \"NEWHOST\" is one 8-bit byte designating\
    \ the\n   address of the host on which the active process (i.e., the one to\n\
    \   reconnect to) resides.  NEWSOCKET1-4 are four 8-bit bytes indicating\n   the\
    \ 32-bit send socket number of the Telnet pair from the active\n   process. The\
    \ <IAC><SE> fields terminate the subnegotiation\n   parameters. The initiating\
    \ agent awaits a response from the passive\n   process before proceeding.  The\
    \ legal responses are:\n     1) Telnet sequence <IAC><WONT>(RECONNECT>\n     \
    \   Meaning: The passive process has decided not to complete the\n        reconnection,\
    \ after having initially indicated willingness. This\n        may be due to unexpected\
    \ parameters during the subnegotiation\n        (e.g., it refuses to connect to\
    \ NEWHOST), or perhaps some error\n        condition at the passive host.\n  \
    \   2) Telnet sequence <IAC><SE>\n        Meaning: Positive acknowledgement of\
    \ the subnegotiation\n        sequence. The passive process has accepted the reconnection\n\
    \        parameters and will proceed with reconnection.\n   If the reply was <WONT><RECONNECT>,\
    \ the initiator is obliged to send\n   the Telnet <IAC><DONT><RECONNECT> to the\
    \ active participant, to\n   cancel the outstanding reconnection request. A confirming\n\
    \   <IAC><WONT><RECONNECT> should follow.\n   The <IAC><SE> reply means that the\
    \ passive participant has begun its\n   connection shutdown, and will listen on\
    \ the appropriate sockets. The\n   initiator may now close its connections to\
    \ the passive participant\n   and supply the parameters to the active participant.\
    \  This can be\n   done with the assurance that it (the initiator) has done all\
    \ it can\n   to ensure that the passive process listens before the active process\n\
    \   sends its RFCs. Failure to coordinate these actions may result in the\n  \
    \ failure of the reconnection, if, for example, the passive host does\n   not\
    \ queue unmatched RFCs. Persistence on the part of the active\n   participant\
    \ should be an integral part of the protocol, due to\n   uncertainties of synchronization.\n\
    \   The parameter list sent to the active participant is the Telnet\n   sequence\
    \ <IAC> <SB> <RECONNECT> <ACTIVE> <NEWHOST> <NEWSOCKET1>\n   <NEWSOCKET2> <NEWSOCKET3>\
    \ <NEWSOCKET4> <IAC> <SE>. The <ACTIVE>\n   parameter indicates to the recipient\
    \ that it is to send RFCs to the\n   socket pair denoted by <NEWHOST><NEWSOCKET1-4>.\
    \ The initiator again\n   waits for a reply. The legal replies are:\n     1) Telnet\
    \ sequence <IAC><WONT><RECONNECT>\n        Meaning: Process will not complete\
    \ the reconnection (e.g., it\n        couldn't parse the parameter string).\n\
    \        Possible action of initiator: Attempt to re-establish\n        communication\
    \ with the passive participant by sending RFCs for\n        the sockets on which\
    \ the passive participant is listening. This\n        will succeed if the listener\
    \ is willing to accept connections\n        from either the host/socket specified\
    \ by the reconnect\n        parameters or the host/socket of the former connection.\
    \ If it is\n        successful in reestablishing the connection, the initiator\
    \ could\n        send the Telnet sequence <IAC><DONT><RECONNECT> to confirm that\n\
    \        reconnection has been aborted.\n     2) Telnet sequence <IAC><SE>\n \
    \       Meaning: Positive confirmation of the reconnection\n        subnegotiation.\
    \ The active participant indicates with this reply\n        that it will close\
    \ the connections to the initiator and send the\n        necessary RFCs to connect\
    \ to the passive participant. The\n        initiator may close the connections\
    \ to the active participant,\n        thereby removing itself from the communication\
    \ path between the\n        objects of the reconnection.\n"
- title: DEFAULT CONDITIONS and RACES
  contents:
  - "DEFAULT CONDITIONS and RACES\n   The default for this option is as for most other\
    \ Telnet options: DONT\n   and WONT. An initiator uses the <DONT><RECONNECT> Telnet\
    \ sequence to\n   return to the default state, while a participant uses\n   <WONT><RECONNECT>\
    \ to maintain or return to the default state. The\n   reconnection state is only\
    \ a transient one.  When accepted by all\n   parties, the reconnection state lasts\
    \ only until the reconnection is\n   completed. Upon completion, and without further\
    \ interaction among the\n   parties, the state of the new connection is the default\
    \ state, with\n   the negotiated reconnection forgotten.\n   Since reconnection\
    \ is an option concerning the entire Telnet\n   connection, the asynchronous nature\
    \ of the option processing\n   mechanism exemplified by many other Telnet options\
    \ (e.g., echo), is\n   not applicable. That is, a race condition occurs when two\n\
    \   <IAC><DO><RECONNECT> requests cross each other in the network. A\n   solution\
    \ to this problem was presented in RFC 426; the following is a\n   modified version\
    \ of that protocol extension. The modification is\n   concerned mainly with preserving\
    \ the right of a process to deny a\n   reconnection attempt by another process,\
    \ while having its own\n   reconnection request pending.\n   The race condition\
    \ is detected when a process receives a\n   <DO><RECONNECT> while awaiting a reply\
    \ to a <DO><RECONNECT> it has\n   previously issued on the same Telnet connection.\
    \ (This condition is\n   detected at both ends of the connection). The strategy\
    \ to resolve the\n   race utilizes a function, evaluated at both ends of the connection,\n\
    \   to determine which reconnection request shall take precedence. The\n   evaluation\
    \ involves comparing the numbers obtained by concatenating\n   the host address\
    \ (which becomes the high order 8 bits) and the\n   receive socket number (becomes\
    \ the low order 32 bits) for the two\n   ends of the Telnet connection. The process\
    \ owning the receive socket\n   with the larger of the two concatenated numbers\
    \ will have its\n   reconnection attempt precede that of the other process. Thus,\
    \ if\n   there is a Telnet connection between host A local sockets X,X+1 and\n\
    \   host B local sockets Y,Y+1, and if <A><X> is greater than <B><Y>,\n   then\
    \ the reconnect request from <A><X> must he completed (or aborted)\n   before\
    \ the reconnection request from <B><Y> can be considered. This\n   is achieved\
    \ by requiring that the process with the higher\n   <host><socket> number reply\
    \ to the reconnect request of the other\n   process with an <IAC><WONT><RECONNECT>,\
    \ thereby canceling\n   (temporarily) the reconnection attempted from the lower\
    \ numbered\n   <host><socket>. Since the request emanating from the higher\n \
    \  <host><socket> process is given precedence, the process with the\n   lower\
    \ <host><socket> can reply to the reconnection request as if it\n   had not issued\
    \ a reconnection request of its own. That is, it may\n   reply <IAC><WILL><RECONNECT>\
    \ to accept the reconnection attempt or\n   <IAC><WONT><RECONNECT> to refuse the\
    \ attempt. This process should\n   note, however, that the rejection it receives\
    \ to its reconnect\n   request is due to protocol requirement, and may not reflect\
    \ the\n   actual desire of the corresponding process. It should also note that\n\
    \   its reconnection request may be re-issued after the first\n   reconnection\
    \ activity is complete. This is an example of a situation\n   where an option\
    \ change request can be re-issued after a denial,\n   without a corresponding\
    \ change in state.\n   ASIDE:\n   The usefulness of reconnection is severely limited\
    \ by its\n   specification as an option for Telnet (i.e., terminal like)\n   connections,\
    \ rather than as part of a host-host protocol, which would\n   allow it to be\
    \ applied to general connections. First, it is\n   questionable whether most systems\
    \ will allow a user task to maintain\n   more than one Telnet connection. If not,\
    \ a process on such a system\n   can not readily initiate a reconnection request.\n\
    \   Second, there are certain indirect benefits that would result from\n   including\
    \ reconnection in a host-host protocol. Placing it at that\n   level could simplify\
    \ some of the timing problems in establishing the\n   new connection. For example,\
    \ an NCP would be aware when a\n   reconnection was in progress, and therefore\
    \ would not need to act as\n   hastily with an RFC for a socket currently in use\
    \ (i.e., connection\n   still open) but involved in the reconnection. Since it\
    \ is dealing\n   with another NCP directly, it can expect to receive the \"reconnect\
    \ go\n   ahead\" reasonably soon, barring system crash. Also, the information\n\
    \   necessary to complete the reconnection subnegotiation is available at\n  \
    \ the NCP level, whereas it must be duplicately maintained by the\n   Telnet service\
    \ routine when the potential for reconnection exists.\n   Finally, the entire\
    \ notion of reconnection is framed in terms of the\n   entities of host-host protocol.\
    \ By placing it at a higher level\n   without adequate provision at the host-host\
    \ level, an artificial and\n   rigid constraint is placed on the type of communication\
    \ path, which\n   may be part of a reconnection. Since host-host protocol is the\
    \ basis\n   for function oriented levels, the notion of redirecting communication\n\
    \   paths certainly is more suited to the semantically uninterrupted\n   realm\
    \ of OPENing and CLOSEing connections, rather than the realm of\n   \"open an\
    \ 8 bit ASCII path with the conventions that ...\"\n"
- title: II.  IMPLEMENTATION DETAILS
  contents:
  - "II.  IMPLEMENTATION DETAILS\n   1. A process initiating a reconnection designates\
    \ one of the object\n      processes as passive (i.e., to listen for RFCs), and\
    \ the other as\n      active (i.e., to send RFCs). The reconnection protocol does\
    \ not\n      specify the assignment of the active/passive roles, so the process\n\
    \      is free in its selection. However, information regarding the types\n  \
    \    of participants in the reconnection attempt may dictate a role\n      selection\
    \ which will contribute to the eventual successful\n      completion of the reconnection.\
    \ Ignoring such information could\n      conceivably force cancellation of the\
    \ attempt. Certain types of\n      hosts (e.g., space limited TIPs) may be better\
    \ suited for active\n      participation, since it need not go through the procedure\
    \ of\n      verifying the identity of the sender. The passive process should\n\
    \      go through such verification.  Other types of hosts (e.g., one\n      whose\
    \ NCP will not let an arbitrary process listen on a socket)\n      may be better\
    \ suited for the active role. As more systems\n      implement the reconnection\
    \ option, the preferences of various\n      types of systems will become known,\
    \ and more definitive rules may\n      emerge.\n   2. To avoid possible deadlock,\
    \ the active (passive) process must\n      simultaneously send (listen for) RFCs\
    \ for both send and receive\n      connections, which will form the new Telnet\
    \ connection. Since the\n      reconnection protocol does not specify an ordering\
    \ for\n      establishing the connections, it is important that passive\n    \
    \  processes listen in parallel on both the potential send and\n      receive\
    \ sockets, and that active processes send RFCs in parallel\n      for both the\
    \ potential send and receive sockets.\n   3. There are two levels of error recovery\
    \ involved in reconnection.\n      One level is required to handle the conditions\
    \ where network and\n      system delays cause the attempt to establish the new\
    \ connection to\n      get out of synchrony (e.g., the RFC arrives at the passive\
    \ host\n      before the passive process listens), or cause system timeouts.\n\
    \      When these conditions occur the sockets/connections should be\n      returned\
    \ to a state in which the faulting operation can be\n      automatically retried.\
    \ The second level of recovery involves the\n      failure of all such attempts\
    \ to establish communication with the\n      active (passive) process, the duration\
    \ of these attempts may be\n      influenced by such factors as the recovery procedures\
    \ available,\n      and whether or not a human user is awaiting the outcome. Recovery\n\
    \      at this point is difficult since the connections with the\n      initiating\
    \ process have already been broken. Attempts to connect\n      to some reasonable\
    \ alternative (perhaps local, perhaps attempting\n      to connect back to the\
    \ original source of the reconnection) should\n      be initiated if second level\
    \ error recovery is necessary,\n      indicating complete reconnection failure.\n\
    \   4. A useful addition to the reconnection mechanism would be the\n      definition\
    \ of a standard way to reestablish contact with the\n      reconnection initiator\
    \ on task termination (including can't\n      complete reconnection).\n"
- title: III.  TENEX RELATED DETAILS
  contents:
  - "III.  TENEX RELATED DETAILS\n   The context for our experiments was that of a\
    \ TIP user using a\n   TIPSER/RSEXEC. The TIPSER/RSEXEC would first authenticate\
    \ the TIP\n   user and then serve as a command interpreter. Among the available\n\
    \   commands was one called TELCONN (TELnet CONNect) for connecting to\n   other\
    \ sites for service. A TELCONN command would trigger an attempt\n   by the TIPSER/RSEXEC\
    \ to reconnect the \"TIP\" directly to the host,\n   which was the target of the\
    \ TELCONN request (normally this would\n   usually be a logger process at the\
    \ host). When the reconnection is\n   completed, the TIP is directly connected\
    \ to the new job, and the\n   TIPSER/RSEXEC is completely eliminated from the\
    \ communication path.\n   To avoid programming the TIP, a TENEX process was used\
    \ to simulate\n   the TIP.\n   Certain features of TENEX caused problems in creating\
    \ the desired\n   interaction between the TENEX jobs involved in the reconnection\n\
    \   experiment. They are presented here because there may be similar\n   problems\
    \ in other systems.\n   1. Along with the features supplied by the TENEX Telnet\
    \ interface via\n      the ATPTY system call (which transforms a pair of unused\
    \ network\n      connections into a Telnet connection pair), comes a loss of\n\
    \      certain control functions. A program loses the ability to control\n   \
    \   when data is sent (i.e., loss of the use of the MTOPR system call\n      to\
    \ force transmission of buffered data), and can no longer\n      determine the\
    \ remote host/socket for the network connection (i.e.,\n      GDSTS system call).\
    \ In a highly interactive mode, such as option\n      negotiation, short messages\
    \ remaining in system buffers can result\n      in a deadlock. A process must\
    \ be able to override the buffering\n      strategy at the conclusion of a logical\
    \ message. Failure to have\n      access to such a mechanism (e.g., MTOPR) requires\
    \ that the\n      connection be opened in a non-buffered mode, which is wasteful\n\
    \      most of the time. Similarly, the inability to obtain the remote\n     \
    \ host/socket names of the connection requires that this information\n      be\
    \ remembered by the program for the duration of the connection in\n      case\
    \ it is needed. (This is the case despite the fact that the\n      operating system\
    \ maintains the information in any event. The need\n      to access this information\
    \ arises when we wish to reconnect the\n      Telnet connection which linked the\
    \ \"TIP\" to the TIPSER/RSEXEC.)\n   2. There is no facility in TENEX for handling\
    \ (initiating or\n      responding to) Telnet options not recognized by the Telnet\
    \ server.\n      An interface between a user program and the option negotiation\n\
    \      mechanism would be useful for testing new options and for\n      implementing\
    \ privates ones. Lack of this interface can be\n      circumvented by switching\
    \ the connection to binary mode\n      transmission and reception. This works\
    \ only if option negotiation\n      is between two user processes (both aware\
    \ of the binary\n      transmission), since if a user process tried to negotiate\
    \ with a\n      system Telnet server obeying the binary transmission option, the\n\
    \      required doubling of IACs for binary output would cause the\n      request\
    \ to be misinterpreted at the system Telnet.\n   3. The switch to binary transmission\
    \ requires two option\n      negotiations. During this period data transfer is\
    \ possible.\n      However, the actual data transferred is dependent on the state\
    \ of\n      the negotiation at that point (e.g., depending upon the state, the\n\
    \      IAC character may or may not be doubled). There does not seem to\n    \
    \  be a facility for alerting the process that the option has been\n      accepted\
    \ (rejected) and that all further transmissions will be in\n      the new mode\
    \ (binary). Perhaps suspending the process for the\n      duration of the (timed\
    \ out) option negotiation would eliminate\n      this period of uncertainty in\
    \ the mode switch. In TENEX, this\n      could be coupled with pseudo-interrupts\
    \ to note option negotiation\n      failure for certain critical user initiated\
    \ options.\n   4. During peak load conditions, RFCs sent by the operating system\n\
    \      (NCP) in response to program requests (OPENF system calls) were\n     \
    \ frequently timed out by the system. The passive process listening\n      for\
    \ the RFCs did not get rescheduled quickly enough to reply to\n      the RFCs\
    \ (acceptance or rejection) before they were timed out by\n      the system. A\
    \ confusing situation arose because of the difference\n      in initiating the\
    \ two connections (send and receive) that were to\n      form the full-duplex\
    \ path between the processes.  One OPENF\n      specified immediate return, while\
    \ the other waited for completion\n      of the RFC. If both requests timed out,\
    \ the states of the\n      corresponding connections were different, and therefore\
    \ the retry\n      mechanism had to handle each differently (i.e., the \"immediate\n\
    \      return\" connection had to he closed via CLOSF, whereas the other\n   \
    \   did not). This seems to be an unnecessary complication.  Also, the\n     \
    \ frequency of timeout during heavy load conditions may indicate\n      that the\
    \ RFC timeout interval is too short.\n   5. In the TENEX user interface to the\
    \ network there is no concept of\n      logical messages when more than one process\
    \ (fork) shares a\n      network connection. Telnet option negotiation sequences\
    \ are\n      examples of strings, which must be sent in proper order, without\n\
    \      interceding characters of any nature in order to have correct\n      meaning.\
    \ Even when a TENEX \"string out\" (SOUT) operation is\n      executed by a process,\
    \ which is indicative of some logical\n      relationship between the characters\
    \ of the string, the\n      transmission is not guaranteed to be free from interference\
    \ from\n      other processes sending data over the same connection. (Multi-\n\
    \      process organization for managing network connections is very\n      common.\
    \ One process is typically used to handle user output to the\n      network, while\
    \ another process reads data from the network and\n      replies as required by\
    \ protocol to certain network input).  These\n      processes must synchronize\
    \ on every output (and input) to assure\n      the logical integrity of their\
    \ messages. This synchronization\n      would seem to be more suitably handled\
    \ by the system routines,\n      which manage network connections and handle string\
    \ I/O.\n          [ This RFC was put into machine readable form for entry ]\n\
    \          [ into the online RFC archives by Alex McKenzie with    ]\n       \
    \   [ support from BBN Corp. and its successors.     7/2000 ]\n"
