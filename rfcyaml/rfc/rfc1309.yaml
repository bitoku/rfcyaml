- title: __initial_text__
  contents:
  - "                Technical Overview of Directory Services\n                  \
    \      Using the X.500 Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \ It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is an overview of the X.500 standard for people not\n\
    \   familiar with the technology. It compares and contrasts Directory\n   Services\
    \ based on X.500 with several of the other Directory services\n   currently in\
    \ use in the Internet. This paper also describes the\n   status of the standard\
    \ and provides references for further\n   information on X.500 implementations\
    \ and technical information.\n   A primary purpose of this paper is to illustrate\
    \ the vast\n   functionality of the X.500 protocol and to show how it can be used\
    \ to\n   provide a global directory for human use, and can support other\n   applications\
    \ which would benefit from directory services, such as\n   main programs.\n  \
    \ This FYI RFC is a product of the Directory Information Services\n   (pilot)\
    \ Infrastructure Working Group (DISI).  A combined effort of\n   the User Services\
    \ and the OSI Integration Areas of the Internet\n   Engineering Task Force (IETF).\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   As the pace of industry, science, and technological development\n\
    \   quickened over the past century, it became increasingly probable that\n  \
    \ someone in a geographically distant location would be trying to solve\n   the\
    \ same problems you were trying to solve, or that someone in a\n   geographically\
    \ distant location would have some vital information\n   which impinged on your\
    \ research or business.  The stupendous growth\n   in the telecommunications industry,\
    \ from telegraphs to telephones to\n   computer networks, has alleviated the problem\
    \ of being able to\n   communicate with another person, PROVIDED THAT YOU KNOW\
    \ HOW TO REACH\n   THEM.\n   Thus, along with the expansion of the telecommunications\n\
    \   infrastructure came the development of Directory Services. In this\n   paper,\
    \ we will discuss various models of directory services, the\n   limitations of\
    \ current models, and some solutions provided by the\n   X.500 standard to these\
    \ limitations.\n"
- title: 2  MODELS OF DIRECTORY SERVICES
  contents:
  - '2  MODELS OF DIRECTORY SERVICES

    '
- title: 2.1  The telephone company's directory services.
  contents:
  - "2.1  The telephone company's directory services.\n   A model many people think\
    \ of when they hear the words \"Directory\n   Services\" is the directory service\
    \ provided by the local telephone\n   company. A local telephone company keeps\
    \ an on-line list of the names\n   of people with phone service, along with their\
    \ phone numbers and\n   their address. This information is available by calling\
    \ up Directory\n   Assistance, giving the name and address of the party whose\
    \ number you\n   are seeking, and waiting for the operator to search his database.\
    \ It\n   is additionally available by looking in a phone book published yearly\n\
    \   on paper.\n   The phone companies are able to offer this invaluable service\
    \ because\n   they administer the pool of phone numbers. However, this service\
    \ has\n   some limitations. For instance, you can find someone's number only if\n\
    \   you know their name and the city or location in which they live. If\n   two\
    \ or more people have listings for the same name in the same\n   locality, there\
    \ is no additional information which with to select the\n   correct number. In\
    \ addition, the printed phone book can have\n   information which is as much as\
    \ a year out of date, and the phone\n   company's internal directory can be as\
    \ much as two weeks out of date.\n   A third problem is that one actually has\
    \ to call Directory assistance\n   in a given area code to get information for\
    \ that area; one cannot\n   call a single number consistently.\n   For businesses\
    \ which advertise in the Yellow Pages, there is some\n   additional information\
    \ stored for each business; unfortunately, that\n   information is unavailable\
    \ through Directory Assistance and must be\n   gleaned from the phone book.\n"
- title: 2.2 Some currently available directory services on the Internet.
  contents:
  - "2.2 Some currently available directory services on the Internet.\n   As the Internet\
    \ is comprised of a vast conglomeration of different\n   people, computers, and\
    \ computer networks, with none of the hierarchy\n   imposed by the phone system\
    \ on the area codes and exchange prefixes,\n   any directory service must be able\
    \ to deal with the fact that the\n   Internet is not structured; for example,\
    \ the hosts foo.com and\n   v2.foo.com may be on opposite sides of the world,\
    \ the .edu domain\n   maps onto an enormous number of organizations, etc.  Let's\
    \ look at a\n   few of the services currently available on the Internet for directory\n\
    \   type services.\n"
- title: 2.2.1 The finger protocol.
  contents:
  - "2.2.1 The finger protocol.\n   The finger protocol, which has been implemented\
    \ for UNIX systems and\n   a small number of other machines, allows one to \"\
    finger\" a specific\n   person or username to a host running the protocol. This\
    \ is invoked by\n   typing, for example, \"finger clw@mazatzal.merit.edu\". A\
    \ certain set\n   of information is returned, as this example from a UNIX system\
    \ finger\n   operation shows, although the output format is not specified by the\n\
    \   protocol:\n      Login name: clw                   In real life: Chris Weider\n\
    \      Directory: /usr/clw               Shell: /bin/csh\n      On since Jul 25\
    \ 09:43:42          4 hours 52 minutes Idle Time\n      Plan:\n      Home: 971-5581\n\
    \   where the first three lines of information are taken from the UNIX\n   operating\
    \ systems information and the line(s) of information\n   following the \"Plan:\"\
    \ line are taken from a file named .plan which\n   each user modifies.  Limitations\
    \ of the fingerd program include: a)\n   One must already know which host to finger\
    \ to find a specific person,\n   b) since primarily UNIX machines run fingerd,\
    \ people who reside on\n   other types of operating systems are not locateable\
    \ by this method,\n   c) fingerd is often disabled on UNIX systems for security\
    \ purposes,\n   d) if one wishes to be found on more than one system, one must\
    \ make\n   sure that all the .plan files are consistent, and e) there is no way\n\
    \   to search the .plan files on a given host to (for example) find\n   everyone\
    \ on mazatzal.merit.edu who works on X.500.  Thus, fingerd has\n   a limited usefulness\
    \ as a piece of the Internet Directory.\n"
- title: 2.2.2 whois
  contents:
  - "2.2.2 whois\n   The whois utility, which is available on a wide of variety of\n\
    \   systems, works by querying a centralized database maintained at the\n   DDN\
    \ NIC, which was for many years located at SRI International in\n   Menlo Park,\
    \ California, and is now located at GSI. This database\n   contains a large amount\
    \ of information which primarily deals with\n   people and equipment which is\
    \ used to build the Internet.  SRI (and\n   now GSI) has been able to collect\
    \ the information in the WHOIS\n   database as part of its role as the Network\
    \ Information Center for\n   the TCP/IP portion of the Internet.\n   The whois\
    \ utility is ubiquitous, and has a very simple interface. A\n   typical whois\
    \ query look like:\n      whois Reynolds\n   and returns information like:\n \
    \     Reynolds, John F. (JFR22) 532JFR@DOM1.NWAC.SEA06.NAVY.MIL\n            \
    \                               (702) 426-2604 (DSN) 830-2604\n      Reynolds,\
    \ John J. (JJR40) amsel-lg-pl-a@MONMOUTH-EMH3.ARMY.MIL\n                     \
    \                      (908) 532-3817 (DSN) 992-3817\n      Reynolds, John W.\
    \ (JWR46) EAAV-AP@SEOUL-EMH1.ARMY.MIL\n                                      \
    \     (DSN) 723-3358\n      Reynolds, Joseph T. (JTR10)  JREYNOLDS@PAXRV-NES.NAVY.MIL\n\
    \                                       011-63-47-885-3194 (DSN) 885-3194\n  \
    \    Reynolds, Joyce K. (JKR1) JKREY@ISI.EDU             (213) 822-1511\n    \
    \  Reynolds, Keith (KR35)    keithr@SCO.CO             (408) 425-7222\n      Reynolds,\
    \ Kenneth (KR94)                            (502) 454-2950\n      Reynolds, Kevin\
    \ A. (KR39)    REYNOLDS@DUGWAY-EMH1.ARMY.MIL\n                               \
    \            (801) 831-5441 (DSN) 789-5441\n      Reynolds, Lee B. (LBR9)   reynolds@TECHNET.NM.ORG\
    \   (505) 345-6555\n      a further lookup on Joyce Reynolds with this command\
    \ line:\n      whois JKR1\n   returns:\n      Reynolds, Joyce K. (JKR1)      \
    \         JKREY@ISI.EDU\n         University of Southern California\n        \
    \ Information Sciences Institute\n         4676 Admiralty Way\n         Marina\
    \ del Rey, CA 90292\n         (310) 822-1511\n         Record last updated on\
    \ 07-Jan-91.\n   The whois database also contains information about Domain Name\
    \ System\n   (DNS) and has some information about hosts, major regional networks,\n\
    \   and large parts of the MILNET system.\n   The WHOIS database is large enough\
    \ and comprehensive enough to\n   exhibit many of the flaws of a large centralized\
    \ database: a) As the\n   database is maintained on one machine, a processor bottleneck\
    \ forces\n   slow response during times of peak querying activity, even if many\
    \ of\n   these queries are unrelated, b) as the database is maintained on one\n\
    \   machine, a storage bottleneck forces the database administrators to\n   severely\
    \ limit the amount of information which can be kept on each\n   entry in the database,\
    \ c) all changes to the database have to be\n   mailed to a \"hostmaster\" and\
    \ then physically reentered into the\n   database, increasing both the turnaround\
    \ time and the likelihood for\n   a mistake in transcription.\n"
- title: 2.2.3 The Domain Name System
  contents:
  - "2.2.3 The Domain Name System\n   The Domain Name System is used in the Internet\
    \ to keep track of host\n   to IP address mapping. The basic mechanism is that\
    \ each domain, such\n   as merit.edu or k-12.edu, is registered with the NIC,\
    \ and at time of\n   registration, a primary and (perhaps) some secondary nameservers\
    \ are\n   identified for that domain. Each of these nameservers must provide\n\
    \   host name to IP address mapping for each host in the domain. Thus,\n   the\
    \ nameservice is supplied in a distributed fashion. It is also\n   possible to\
    \ split a domain into subdomains, with a different\n   nameserver for each subdomain.\n\
    \   Although in many cases one uses the DNS without being aware of it,\n   because\
    \ humans prefer to remember names and not IP addresses, it is\n   possible to\
    \ interactively query the DNS with the nslookup utility. A\n   sample session\
    \ using the nslookup utility:\n      home.merit.edu(1): nslookup\n      Default\
    \ Server:  merit.edu\n      Address:  35.42.1.42\n      > scanf.merit.edu\n  \
    \    Server:  merit.edu\n      Address:  35.42.1.42\n      Name:   scanf.merit.edu\n\
    \      Address: 35.42.1.92\n      > 35.42.1.92\n      Server:  merit.edu\n   \
    \   Address: 35.42.1.42\n      Name:  [35.42.1.92]\n      Address: 35.42.1.92\n\
    \   Thus, we can explicitly determine the address associated with a given\n  \
    \ host.  Reverse name mapping is also possible with the DNS, as in this\n   example:\n\
    \      home.merit.edu(2): traceroute ans.net\n      traceroute to ans.net (147.225.1.2),\
    \ 30 hops max, 40 byte packets\n        1 t3peer (35.1.1.33) 11 ms 5 ms 5 ms\n\
    \        2 enss (35.1.1.1) 6 ms 6 ms 6 ms\n              .................\n \
    \       9 192.77.154.1 (192.77.154.1) 51 ms 43 ms 49 ms\n       10 nis.ans.net\
    \ (147.225.1.2) 53 ms 53 ms 46 ms\n   At each hop of the traceroute, the program\
    \ attempts to do a reverse\n   lookup through the DNS and displays the results\
    \ when successful.\n   Although the DNS has served superlatively for the purpose\
    \ it was\n   developed, i.e. to allow maintenance of the namespace in a\n   distributed\
    \ fashion, and to provide very rapid lookups in the\n   namespace, there are,\
    \ of course, some limitations. Although there has\n   been some discussion of\
    \ including other types of information in the\n   DNS, to find a given person\
    \ at this time, assuming you know where she\n   works, you have to use a combination\
    \ of the DNS and finger to even\n   make a stab at finding her. Also, the DNS\
    \ has very limited search\n   capabilities right now. The lack of search capabilities\
    \ alone shows\n   that we cannot provide a rich Directory Service through the\
    \ DNS.\n"
- title: '3: THE X.500 MODEL OF DIRECTORY SERVICE'
  contents:
  - "3: THE X.500 MODEL OF DIRECTORY SERVICE\n   X.500 is a CCITT protocol which is\
    \ designed to build a distributed,\n   global directory.  It offers the following\
    \ features:\n   * Decentralized Maintenance:\n     Each site running X.500 is\
    \ responsible ONLY for its local part\n     of the Directory, so updates and maintenance\
    \ can be done instantly.\n   * Powerful Searching Capabilities:\n     X.500 provides\
    \ powerful searching facilities that allow users to\n     construct arbitrarily\
    \ complex queries.\n   * Single Global Namespace:\n     Much like the DNS, X.500\
    \ provides a single homogeneous namespace\n     to users.  The X.500 namespace\
    \ is more flexible and expandable\n     than the DNS.\n   * Structured Information\
    \ Framework:\n     X.500 defines the information framework used in the directory,\n\
    \     allowing local extensions.\n   * Standards-Based Directory:\n     As X.500\
    \ can be used to build a standards-based directory,\n     applications which require\
    \ directory information (e-mail,\n     automated resource locators, special-purpose\
    \ directory tools)\n     can access a planet's worth of information in a uniform\
    \ manner,\n     no matter where they are based or currently running.\n"
- title: 3.1 Acronym City, or How X.500 Works
  contents:
  - "3.1 Acronym City, or How X.500 Works\n   The '88 version of the X.500 standard\
    \ talks about 3 models required\n   to build the X.500 Directory Service: the\
    \ Directory Model, the\n   Information Model, and the Security Model. In this\
    \ section, we will\n   provide a brief overview of the Directory and Information\
    \ Models\n   sufficient to explain the vast functionality of X.500.\n"
- title: 3.1.1 The Information Model
  contents:
  - "3.1.1 The Information Model\n   To illustrate the Information Model, we will\
    \ first show how\n   information is held in the Directory, then we will show what\
    \ types of\n   information can be held in the Directory, and then we will see\
    \ how\n   the information is arranged so that we can retrieve the desired\n  \
    \ pieces from the Directory.\n"
- title: 3.1.1.1 Entries
  contents:
  - "3.1.1.1 Entries\n   The primary construct holding information in the Directory\
    \ is the\n   \"entry\".  Each Directory entry contains information about one object;\n\
    \   for example, a person, a computer network, or an organization. Each\n   entry\
    \ is built from a collection of \"attributes\", each of which holds\n   a single\
    \ piece of information about the object. Some attributes which\n   might be used\
    \ to build an entry for a person would be \"surname\",\n   \"telephonenumber\"\
    , \"postaladdress\", etc. Each attribute has an\n   associated \"attribute syntax\"\
    , which describes the type of data that\n   attribute contains, for example, photo\
    \ data, a time code, or a string\n   of letters and numbers. As an example, let's\
    \ look at part of an entry\n   for a person.\n  Entry for John Smith contains:\n\
    \    attribute ---> surName=              Smith  <--- attribute value\n      \
    \       |---> telephoneNumber=   999-9999  <--- attribute value\n            \
    \ |---> title=              Janitor  <--- attribute value\n                  \
    \              ...\n   The attribute syntax for the surName attribute would be\n\
    \   CaseIgnoreString, which would tell X.500 that surName could contain\n   any\
    \ string, and case would not matter; the attribute syntax for the\n   telephoneNumber\
    \ attribute would be TelephoneNumber, which would\n   specify that telephoneNumber\
    \ could contain a string composed of\n   digits, dashes, parenthesis, and a plus\
    \ sign.  The attribute syntax\n   for the title attribute would also be CaseIgnoreString.\
    \  A good\n   analogy in database terms for what we've seen so far might be to\n\
    \   think of a Directory entry as a database record, an attribute as a\n   field\
    \ in that record, and an attribute syntax as a field type\n   (decimal number,\
    \ string) for a field in a record.\n"
- title: 3.1.1.2 Object Classes
  contents:
  - "3.1.1.2 Object Classes\n   At this point in our description of the information\
    \ model, we have no\n   way of knowing what type of object a given entry represents.\
    \ X.500\n   uses the concept of an \"object class\" to specify that information,\n\
    \   and an attribute named \"objectClass\" which each entry contains to\n   specify\
    \ to which object class(es) the entry belongs.\n   Each object class in X.500\
    \ has a definition which lists the set of\n   mandatory attributes, which must\
    \ be present, and a set of optional\n   attributes, which may be present, in an\
    \ entry of that class. An given\n   object class A may be a subclass of another\
    \ class B, in which case\n   object class A inherits all the mandatory and optional\
    \ attributes of\n   B in addition to its own.\n   The object classes in X.500\
    \ are arranged in a hierarchical manner\n   according to class inheritance; the\
    \ following diagram shows a part of\n   the object class hierarchy.\n        \
    \                  _____________\n                         |             | \"\
    top\" has one mandatory\n                         | top         | attribute \"\
    objectClass\",\n                         |_____________| and nooptional attributes.\n\
    \                          |     |    |\n                          |     |   \
    \ | every other object class is a\n          ________________|     |    | subclass\
    \ of \"top\"...\n          |                     |   ...\n    ______|________\
    \        _____|_______\n   |               |     |               |\"organization\"\
    \ inherits one\n   | country       |     | organization  |mandatory attribute\
    \ from\n   |_______________|     |_______________|\"top\", \"objectClass\"; adds\
    \ one\n                                          more mandatory attribute \"O\"\
    \n \"country\" inherits one                   (for organization), and has\n mandatory\
    \ attribute from \"top\",          many optional attributes. Any\n \"objectClass\"\
    , adds one more             subclass of \"organization\"\n mandatory attribute\
    \ \"c\" (for             would inherit all of the\n country), and has two optional\
    \           mandatory and optional\n attributes, \"description\" and         \
    \   attributes from \"organization\"\n \"searchGuide\". Any subclass of      \
    \     including the attribute which\n \"country\" would inherit all of the   \
    \    \"organization\" inherited\n mandatory and optional attributes        from\
    \ \"top\".\n of the \"country\" class, including\n the attribute which \"country\"\
    \n inherited from \"top\".\n                               Figure 1.\n   One major\
    \ benefit of the object class concept is that it is in many\n   cases very easy\
    \ to create a new object class which is only a slight\n   modification or extension\
    \ of a previous class. For example, if I have\n   already defined an object class\
    \ for \"person\" which contains a\n   person's name, phone number, address, and\
    \ fax number, I can easily\n   define an \"Internet person\" object class by defining\
    \ \"Internet\n   person\" as a subclass of \"person\", with the additional optional\n\
    \   attribute of \"e-mail address\". Thus in my definition of the \"Internet\n\
    \   Person\" object class, all my \"person\" type attributes are inherited\n \
    \  from \"person\". There are other benefits which are beyond the scope of\n \
    \  this paper.\n"
- title: 3.1.1.3 X.500's namespace.
  contents:
  - "3.1.1.3 X.500's namespace.\n   X.500 hierarchically organizes the namespace in\
    \ the Directory\n   Information Base (DIB); recall that this hierarchical organization\
    \ is\n   called the Directory Information Tree (DIT).  Each entry in the DIB\n\
    \   occupies a certain location in the DIT. An entry which has no\n   children\
    \ is called a leaf entry, an entry which has children is\n   called a non-leaf\
    \ node. Each entry in the DIT contains one or more\n   attributes which together\
    \ comprise the Relative Distinguished Name\n   (RDN) of that entry, there is a\
    \ \"root\" entry (which has no\n   attributes, a special case) which forms the\
    \ base node of the DIT. The\n   Distinguished Name of a specific entry is the\
    \ sequence of RDNs of the\n   entries on the path from the root entry to the entry\
    \ in question. A\n   diagram here will help to clarify this:\n"
- title: Level of DIT              Root            RDN      Distinguished Name
  contents:
  - 'Level of DIT              Root            RDN      Distinguished Name

    '
- title: root                       *             nothing        { }
  contents:
  - "root                       *             nothing        { }\n               \
    \          / | \\\n"
- title: country (other          /  |  \
  contents:
  - 'country (other          /  |  \

    '
- title: things at this         /   |   \         c=us         {c=us}
  contents:
  - 'things at this         /   |   \         c=us         {c=us}

    '
- title: level)           c=gb    c=us    c=ca
  contents:
  - "level)           c=gb    c=us    c=ca\n                        /  |  \\\n   \
    \                    /   |   \\\n                      /    |    \\\n"
- title: organization      o=SRI  o=Merit  o=DEC  o=Merit      {c=us, o=Merit}
  contents:
  - 'organization      o=SRI  o=Merit  o=DEC  o=Merit      {c=us, o=Merit}

    '
- title: (other things           /  |   \
  contents:
  - '(other things           /  |   \

    '
- title: at this level)         /   |    \
  contents:
  - "at this level)         /   |    \\\n                      /    |     \\\n"
- title: Third level          cn=Chris Weider     cn=Chris Weider {c=us, o=Merit,
  contents:
  - "Third level          cn=Chris Weider     cn=Chris Weider {c=us, o=Merit,\n  \
    \                                                      cn=Chris Weider}\n    \
    \   Figure 2: Building a DN from RDNs (adapted from a\n          diagram in the\
    \ X.500 (88) Blue Book)\n   Each entry in this tree contains more attributes than\
    \ have been shown\n   here, but in each case only one attribute for each entry\
    \ has been\n   used for that entry's RDN. As noted above, any entry in the tree\n\
    \   could use more than one attribute to build its RDN. X.500 also allows\n  \
    \ the use of alias names, so that the entry {c=us, o=Merit, cn=Chris\n   Weider}\
    \ could be also found through an alias entry such as {c=us,\n   o=SRI, ou=FOX\
    \ Project, cn=Drone 1} which would point to the first\n   entry.\n"
- title: 3.1.2 The Directory Model
  contents:
  - "3.1.2 The Directory Model\n   Now that we've seen what kinds of information can\
    \ be kept in the\n   Directory, we should look at how the Directory stores this\n\
    \   information and how a Directory users accesses the information. There\n  \
    \ are two components of this model: a Directory User Agent (DUA), which\n   accesses\
    \ the Directory on behalf of a user, and the Directory System\n   Agent, which\
    \ can be viewed as holding a particular subset of the DIB,\n   and can also provide\
    \ an access point to the Directory for a DUA.\n   Now, the entire DIB is distributed\
    \ through the world-wide collection\n   of DSAs which form the Directory, and\
    \ the DSAs employ two techniques\n   to allow this distribution to be transparent\
    \ to the user, called\n   \"chaining\" and \"referral\".  The details of these\
    \ two techniques would\n   take up another page, so it suffices to say that to\
    \ each user, it\n   appears that the entire global directory is on her desktop.\
    \ (Of\n   course, if the information requested is on the other side of the\n \
    \  world, it may seem that the desktop directory is a bit slow for that\n   request...)\n"
- title: 3.2 The functionality of X.500
  contents:
  - "3.2 The functionality of X.500\n   To describe the functionality of X.500, we\
    \ will need to separate\n   three stages in the evolution of X.500: 1) the 1988\
    \ standard, 2)\n   X.500 as implemented in QUIPU, and 3) the (proposed) 1992 standard.\n\
    \   We will list some of the features described in the 1988 standard,\n   show\
    \ how they were implemented in QUIPU, and discuss where the 1992\n   standard\
    \ will take us.  The QUIPU implementation was chosen because\n   a) it is widely\
    \ used in the U.S. and European Directory Services\n   Pilot projects, and b)\
    \ it works well. For a survey of other X.500\n   implementations and a catalogue\
    \ of DUAs, see [Lang].\n"
- title: 3.2.1 Functionality in X.500 (88)
  contents:
  - "3.2.1 Functionality in X.500 (88)\n   There are a number of advantages that the\
    \ X.500 Directory accrues\n   simply by virtue of the fact that it is distributed,\
    \ not limited to a\n   single machine. Among these are:\n   * An enormously large\
    \ potential namespace.\n     Since the Directory is not limited to a single machine,\
    \ many\n     hundreds of machines can be used to store Directory entries.\n  \
    \ * The ability to allow local administration of local data.\n     An organization\
    \ or group can run a local DSA to master their\n     information, facilitating\
    \ much more accurate data throughout\n     the Directory.\n   The functionality\
    \ built into the X.500(88) standard includes:\n   * Advanced searching capabilities.\n\
    \     The Directory supports arbitrarily complex searches at an\n     attribute\
    \ level. As the object classes a specific entry\n     belongs to is maintained\
    \ in the objectClass attribute, this\n     also allows Directory searches for\
    \ specific types of objects.\n     Thus, one could search the c=US subtree for\
    \ anyone with a last\n     name beginning with S, who also has either a fax number\
    \ in the\n     (313) area code or an e-mail address ending in umich.edu.\n   \
    \  This feature of X.500 also helps to provide the basic\n     functionality for\
    \ a Yellow Pages service.\n   * A uniform namespace with local extensibility.\n\
    \     The Directory provides a uniform namespace, but local\n     specialized\
    \ directories can also be implemented.  Locally\n     defined extensions can include\
    \ new object classes, new\n     attributes, and new attribute types.\n   * Security\
    \ issues.\n     The X.500 (88) standards define two types of security for\n  \
    \   Directory data: Simple Authentication (which uses passwords),\n     and Strong\
    \ Authentication (which uses cryptographic keys).\n     Simple authentication\
    \ has been widely implemented, strong\n     authentication has been less widely\
    \ implemented.  Each of\n     these authentication techniques are invoked when\
    \ a user or\n     process attempts a Directory operation through a DUA.\n   In\
    \ addition to the global benefits of the X.500 standard, there are\n   many local\
    \ benefits. One can use their local DSA for company or\n   campus wide directory\
    \ services; for example, the University of\n   Michigan is providing all the campus\
    \ directory services through\n   X.500. The DUAs are available for a wide range\
    \ of platforms,\n   including X-Windows systems and Macintoshes.\n"
- title: 3.2.2 Functionality added by QUIPU.
  contents:
  - "3.2.2 Functionality added by QUIPU.\n   Functionality beyond the X.500 (88) standard\
    \ implemented by QUIPU\n   includes:\n   * Access control lists.\n     An access\
    \ control list is a way to provide security for each\n     attribute of an entry.\
    \  For example, each attribute in a given\n     entry can be permitted for detect,\
    \ compare, read, and modify\n     permissions based on the reader's membership\
    \ in various groups.\n     For example, one can specify that some information\
    \ in a given\n     entry is public, some can be read only by members of the\n\
    \     organization, and some can only be modified by the owner of\n     the entry.\n\
    \   * Replication.\n     Replication provides a method whereby frequently accessed\n\
    \     information in a DSA other than the local one can be kept by\n     the local\
    \ DSA on a \"slave\" basis, with updates of the \"slave\"\n     data provided\
    \ automatically by QUIPU from the \"master\" data\n     residing on the foreign\
    \ DSA.  This provides alternate access\n     points to that data, and can make\
    \ searches and retrievals\n     more rapid as there is much less overhead in the\
    \ form or\n     network transport.\n"
- title: 3.3 Current limitations of the X.500 standard and implementations.
  contents:
  - "3.3 Current limitations of the X.500 standard and implementations.\n   As flexible\
    \ and forward looking as X.500 is, it certainly was not\n   designed to solve\
    \ everyone's needs for all time to come. X.500 is not\n   a general purpose database,\
    \ nor is it a Data Base Management System\n   (DBMS). X.500 defines no standards\
    \ for output formats, and it\n   certainly doesn't have a report generation capability.\
    \ The technical\n   mechanisms are not yet in place for the Directory to contain\n\
    \   information about itself, thus new attributes and new attribute types\n  \
    \ are rather slowly distributed (by hand).\n   Searches can be slow, for two reasons:\
    \ a) searches across a widely\n   distributed portion of the namespace (c=US,\
    \ for example) has a delay\n   which is partially caused by network transmission\
    \ times, and can be\n   compounded by implementations that cache the partial search\
    \ returns\n   until everyone has reported back, and b) some implementations are\n\
    \   slow at searching anyway, and this is very sensitive to such things\n   as\
    \ processor speed and available swap space.  Another implementation\n   \"problem\"\
    \ is a tradeoff with security for the Directory: most\n   implementations have\
    \ an administrative limit on the amount of\n   information which can be returned\
    \ for a specific search.  For\n   example, if a search returns 1000 hits, 20 of\
    \ those might be\n   displayed, with the rest lost. Thus a person performing a\
    \ large\n   search might have to perform a number of small searches.  This was\n\
    \   implemented because an organization might want to make it hard to\n   \"troll\"\
    \ for the organization's entire database.\n   Also, there is at the moment no\
    \ clear consensus on the ideal shape of\n   the DIT, or on the idea structure\
    \ of the object tree.  This can make\n   it hard to add to the current corpus\
    \ of X.500 work, and the number of\n   RFCs on various aspects of the X.500 deployment\
    \ is growing monthly.\n   Despite this, however, X.500 is very good at what it\
    \ was designed to\n   do; i.e., to provide primary directory services and \"resource\n\
    \   location\" for a wide band oftypes of information.\n"
- title: 3.4 Things to be added in X.500 (92).
  contents:
  - "3.4 Things to be added in X.500 (92).\n   The 1988 version of the X.500 standard\
    \ proved to be quite sufficient\n   to start building a Directory Service. However,\
    \ many of the new\n   functions implemented in QUIPU were necessary if the Directory\
    \ were\n   to function in a reasonable manner. X.500 (92) will include\n   formalized\
    \ and standardized versions of those advances, including\n   * A formalized replication\
    \ procedure.\n   * Enhanced searching capacities.\n   * Formalization of access\
    \ control mechanisms, including access\n     control lists.\n   Each of these\
    \ will provide a richer Directory, but you don't have to\n   wait for them! You\
    \ can become part of the Directory today!\n"
- title: '4: WHAT X.500 CAN DO FOR YOU TODAY'
  contents:
  - '4: WHAT X.500 CAN DO FOR YOU TODAY

    '
- title: 4.1 Current applications of X.500
  contents:
  - "4.1 Current applications of X.500\n   X.500 is filling Directory Services needs\
    \ in a large number of\n   countries.  As a directory to locate people, it is\
    \ provided in the\n   U.S. as the White Pages Pilot Project, run by PSI, and in\
    \ Europe\n   under the PARADISE Project as a series of nation-wide pilots.  It\
    \ is\n   also being used by the FOX Project in the United States to provide\n\
    \   WHOIS services for people and networks, and to provide directories of\n  \
    \ objects as disparate as NIC Profiles and a pilot K-12 Educators\n   directory.\
    \ It is also being investigated for its ability to provide\n   resource location\
    \ facilities and to provide source location for WAIS\n   servers. In fact, in\
    \ almost every area where one could imagine\n   needing a directory service (particularly\
    \ for distributed directory\n   services), X.500 is either providing those services\
    \ or being expanded\n   to provide those services.\n   In particular, X.500 was\
    \ envisioned by its creators as providing\n   directory services for electronic\
    \ mail, specifically for X.400. It is\n   being used in this fashion today at\
    \ the University of Michigan:\n   everyone at the University has a unified mail\
    \ address, e.g.\n   Chris.Weider@umich.edu. An X.500 server then reroutes that\
    \ mail to\n   the appropriate user's real mail address in a transparent fashion.\n\
    \   Similarly, Sprint is using X.500 to administrate the address space\n   for\
    \ its internal X.400 mail systems.\n   Those of us working on X.500 feel that\
    \ X.500's strengths lie in\n   providing directory services for people and objects,\
    \ and for\n   providing primary resource location for a large number of online\n\
    \   services. We think that X.500 is a major component (though not the\n   only\
    \ one) of a global Yellow Pages service. We would also like to\n   encourage each\
    \ of you to join your national pilot projects; the more\n   coverage we can get,\
    \ the easier you will be able to find the people\n   you need to contact.\n"
- title: 5.  For Further Information
  contents:
  - "5.  For Further Information\n   For further information, the authors recommend\
    \ the following\n   documents:\n      Weider, C., and J. Reynolds, \"Executive\
    \ Introduction to Directory\n      Services Using the X.500 Protocol\", FYI 13,\
    \ RFC 1308, ANS, ISI,\n      March 1992.\n      Lang, R., and R. Wright, Editors,\
    \ \"A Catalog of Available X.500\n      Implementations\", FYI 11, RFC 1292, SRI\
    \ International, Lawrence\n      Berkeley Laboratory, January 1992.\n      Barker,\
    \ P., and S. Hardcastle-Kille, \"The COSINE and Internet\n      X.500 Schema\"\
    , RFC 1274, University College London, November 1991.\n      Hardcastle-Kille,\
    \ S., \"Replication Requirements to provide an\n      Internet Directory using\
    \ X.500\", RFC 1275, University College\n      London, November, 1991.\n     \
    \ Hardcastle-Kille, S., \"Replication and Distributed Operations\n      extensions\
    \ to provide an Internet Directory using X.500\", RFC\n      1276, University\
    \ College London, November 1991.\n      Hardcastle-Kille, S., \"Encoding Network\
    \ Addresses to support\n      operation over non-OSI lower layers\", RFC 1277,\
    \ University College\n      London, November 1991.\n      Hardcastle-Kille, S.,\
    \ \" A string encoding of Presentation\n      Address\", RFC 1278, University\
    \ College London, November 1991.\n      Hardcastle-Kille, S., \"X.500 and Domains\"\
    , RFC 1279, University\n      College London, November 1991.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n      Security issues are discussed in section 3.\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n      Chris Weider\n      Advanced Network and Services,\
    \ Inc.\n      2901 Hubbard G-1\n      Ann Arbor, MI 48105-2437\n      Phone (313)\
    \ 663-2482\n      E-mail: weider@ans.net\n      Joyce K. Reynolds\n      Information\
    \ Sciences Institute\n      University of Southern California\n      4676 Admirality\
    \ Way\n      Marina del Rey, CA 90292\n      Phone: (310) 822-1511\n      EMail:\
    \ jkrey@isi.edu\n      Sergio Heker\n      JvNCnet\n      Princeton University\n\
    \      6 von Neumann Hall\n      Princeton, NJ 08544\n      Phone: (609) 258-2400\n\
    \      Email: heker@nisc.jvnc.net\n"
