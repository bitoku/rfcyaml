- title: __initial_text__
  contents:
  - '                         Resource Transponders

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Although a number of systems have been created in the last several\n\
    \   years to provide resource location and navigation on the Internet,\n   the\
    \ information contained in these systems must be maintained and\n   updated by\
    \ hand.  This paper describes an automatic mechanism, the\n   resource transponder,\
    \ for maintaining resource location information.\n"
- title: 'Author''s Note:'
  contents:
  - "Author's Note:\n   This document is being circulated as sort of a research paper;\n\
    \   consequently there are no protocol specifications or anything of the\n   sort.\
    \  I hope that we can go from here and actually design them if\n   there's consensus\
    \ that they are potentially useful. Once we have some\n   idea of the required\
    \ functionality, we can then go out and\n   standardize them.\n"
- title: Disclaimer
  contents:
  - "Disclaimer\n   This paper represents only the opinions of the author; it does\
    \ not\n   represent the consensus of the IIIR Working Group, although it is\n\
    \   recognized by them as one legitimate approach to a solution of the\n   problem.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In the past few years, we've seen the invention and growth\
    \ of a\n   number of information location systems on the Internet, e.g., archie,\n\
    \   Gopher, and WAIS.  However, as these systems have become widely\n   deployed,\
    \ a number of maintenance and security problems have arisen\n   with them.  Some\
    \ of the major ones:\n   1) Out of necessity, most of these systems contain pointers\
    \ to the\n      desired resources rather than the resources themselves. Therefore,\n\
    \      if a resource becomes obsolete, is modified, or is moved, the\n      location\
    \ system must be updated by hand. Some systems (archie in\n      particular) proactively\
    \ create updated indexes by contacting every\n      resource on a certain time\
    \ schedule (every 30 days or so) but this\n      means that the system can be\
    \ up to 30 days out of date, and this\n      process can be highly inefficient\
    \ depending on the percentage of\n      information that has changed.\n   2) Conversely,\
    \ anyone who maintains a resource that they wish indexed\n      must keep track\
    \ of every directory which contains a pointer to\n      that resource, so that\
    \ if it is modified, all the directories can\n      be updated. This obviously\
    \ is an optimistic scenario.\n   3) Many organizations which have installed these\
    \ systems do not have\n      the the available resources or expertise to maintain\
    \ the\n      information in the systems. Thus we have long periods where the\n\
    \      information drifts, then a short period when the information is\n     \
    \ updated again.\n   4) Even though these systems are almost always out of date\
    \ today,\n      this problem will become increasingly harder for humans to manage\n\
    \      by hand as everyone on the net becomes their own publisher. Also,\n   \
    \   as the net speeds up and people rely more and more on accurate\n      information,\
    \ human-induced delays in updates of these systems will\n      become increasingly\
    \ intolerable.\n   5) Most, if not all, of these systems provide no security whatsoever;\n\
    \      if a pointer to a resource appears in a locator system, then it is\n  \
    \    assumed to be meant for public consumption. There are many\n      potential\
    \ information providers who would like to use publicly\n      deployed information\
    \ systems to publish to a very selected\n      clientele, and do not wish to allow\
    \ the whole net access to their\n      resources.\n"
- title: 2. Requirements for a Solution
  contents:
  - "2. Requirements for a Solution\n   There are several objectives which must be\
    \ met by any proposed\n   solution to these problems:\n   1) We need to decrease\
    \ the personnel resources needed for indexing\n      and pointer maintenance.\n\
    \   2) We need to increase the reliability and accuracy of the\n      information\
    \ held in resource location systems.\n   3) We need to provide some mechanisms\
    \ for security, particularly by\n      mediating access to the resources.\n  \
    \ 4) We need to make it easy for non-experts, such as librarians,\n      archivists,\
    \ and database maintainers, to announce their new\n      resources to the various\
    \ resource location services.\n   Many of these problems can be solved by a 'resource\
    \ transponder'\n   mechanism.\n"
- title: 3. Resource Transponders
  contents:
  - "3. Resource Transponders\n   The resource transponder system works by adding\
    \ two new layers to\n   every resource: metainformation and an agent to update\
    \ a resource\n   location system (RLS) with that metainformation. The metainformation\n\
    \   layer is physically attached to every resource, so that when the\n   resource\
    \ is moved or altered, the metainformation is immediately\n   available to update\
    \ the RLS. The agent layer may also be attached to\n   the resource or may not\
    \ be; the implications of both of these options\n   are discussed in detail below.\n\
    \   3.1 Metainformation\n   The metainformation layer of a given resource contains\
    \ any\n   information which might be required to create a pointer to this\n  \
    \ resource, and any information which may be useful for indicating how\n   to\
    \ catalog or index the resource.  For example, the metainformation\n   layer of\
    \ a text document might contain such things as the Uniform\n   Resource Name (URN)\
    \ of the document (this is sort of a ISBN number\n   for electronic resources),\
    \ the title of the document, a Uniform\n   Resource Locator (URL) for the document\
    \ (this is a combination net\n   address and access method indicator, used for\
    \ retrieval), the size of\n   the document, etc. Thus the metainformation layer\
    \ contains data about\n   the resource to which it is attached.\n   This metainformation\
    \ is expected to be modifiable. For example, the\n   metainformation layer may\
    \ contain a history of where this particular\n   copy of a resource has been.\
    \  Let's say that a resource/transponder\n   pair has been moved. When it gets\
    \ to its new location, the agent can\n   then attempt to contact the resource\
    \ at its old location to determine\n   whether the resource is still there (in\
    \ which case the agent will\n   simply cause the new location to be added to the\
    \ RLS) or whether the\n   resource is not there (in which case the agent can tell\
    \ the RLS to\n   add the current pointer and delete the old one).\n   A number\
    \ of other possibilities for the contents of the\n   metainformation level are\
    \ contained in section 4.1.\n"
- title: 3.2 Agents
  contents:
  - "3.2 Agents\n   The agent layer of a given resource contains an executable program\n\
    \   which is responsible for reading the metainformation attached to the\n   resource\
    \ and using that information to update a RLS. It is also\n   responsible for updating\
    \ the metainformation where necessary and for\n   running any indexing programs\
    \ required by the RLS it is attempting to\n   update.\n   When the tools required\
    \ to build agents are constructed and deployed,\n   the author expects the agents\
    \ to begin mediating access to the\n   resource, particularly for agents attached\
    \ to resources which are not\n   currently considered active processes, such as\
    \ text files and\n   digitized images.  In this futuristic model, someone wishing\
    \ to read\n   a given document would have to first negotiate access to the data\n\
    \   with the agent; the agent would then be responsible for delivering\n   the\
    \ data to the client. However, it is expected that this type of\n   agent will\
    \ not be widely deployed for some time.\n   Different ways of implementing agents\
    \ are discussed in section 4.2.\n"
- title: 4. Models for implementations of resource transponders
  contents:
  - "4. Models for implementations of resource transponders\n   4.1. Models for implementations\
    \ of the metainformation layer\n   The metainformation layer can be impelemented\
    \ in a number of ways,\n   depending on the resource with which it is associated.\
    \ For an\n   'active' resource, such as an on-line catalog or a mail-based\n \
    \  service, the metainformation can be stored in a file with a well-\n   known\
    \ name in the software distribution.  Alternatively, the\n   metainformation could\
    \ be stored as a record in the data which the\n   resource serves. For a text\
    \ document, the metainformation could be\n   stored as the first or last N bytes\
    \ of the document (which would\n   break a number of editors and file display\
    \ techniques, but would\n   guarantee that the metainformation is moved with the\
    \ resource), or\n   perhaps as a file with a logically associated name (paper2.meta\n\
    \   associated with paper2.txt, for example).  The problem with this\n   second\
    \ approach is that the user must know that they have to move the\n   metainformation\
    \ with the file itself, or things will start breaking.\n   If an agent is explicitly\
    \ attached to the resource, the agent could\n   contain the metainformation internally.\n\
    \   In any case, the resource transponder system must be able to\n   guarantee\
    \ that the metainformation is moved when the resource is\n   moved.\n"
- title: 4.2 Models for implementations of the agents
  contents:
  - "4.2 Models for implementations of the agents\n   The agent layer can also be\
    \ implemented in a number of ways,\n   depending on such things as system loads,\
    \ desired sizes of resources,\n   multitasking capabilities, etc.\n   The easiest\
    \ and for many unitasking systems the cleanest way of\n   implementing an agent\
    \ is to have one agent per computer. Then when a\n   resource is moved onto that\
    \ computer, the agent is explicitly\n   activated and notified where the new resource\
    \ is. For example, let's\n   say that someone wishes to download a copy of a resource\
    \ and then let\n   the RLS know that that resource is available for public consumption.\n\
    \   She would download the resource and then run the agent, which would\n   then\
    \ notify the RLS and update the metainformation attached to the\n   resource.\
    \ This model could also be used to track files on a LAN, or\n   to provide local\
    \ location services with no need to run a larger RLS.\n   Another model for implementation\
    \ of the agent is to have one agent\n   per resource. In this model, the agent\
    \ would be moved along with the\n   resource and the metainformation. The agent\
    \ could be implemented in a\n   file which would be associated with the resource;\
    \ in that case the\n   agent would have to be explicitly activated when the resource\
    \ was\n   moved. Alternatively, the agent/metainformation/resource system could\n\
    \   be implemented as one system, or in one file. In this case, the agent\n  \
    \ itself would always be active, and would be responsible for mediating\n   access\
    \ to the resource.  When one did a 'telnet' to a resource with\n   an active agent,\
    \ the agent would accept the telnet connection and be\n   responsible for providing\
    \ security and translation for the data. This\n   could provide great security\
    \ for resources while still allowing\n   pointers to them to be placed in public\
    \ RLS's; the data in the\n   resource could be encrypted, with the agent responsible\
    \ for\n   decrypting it.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   Chris Weider\n   Bunyip Information Systems, Inc.\n \
    \  2001 S. Huron Parkway, #12\n   Ann Arbor, MI 48104\n   USA\n   Phone: +1 313-971-2223\n\
    \   Fax: +1 313-971-2223\n   EMail: clw@bunyip.com\n"
