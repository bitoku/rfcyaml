- contents:
  - '       Extensible Provisioning Protocol (EPP) Domain Name Mapping

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n
    \  mapping for the provisioning and management of Internet domain names\n   stored
    in a shared central repository.  Specified in XML, the mapping\n   defines EPP
    command syntax and semantics as applied to domain names.\n   This document obsoletes
    RFC 4931.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Relationship of Domain Objects and Host Objects ............3\n      1.2.
    Conventions Used in This Document ..........................5\n   2. Object Attributes
    ...............................................5\n      2.1. Domain and Host Names
    ......................................5\n      2.2. Contact and Client Identifiers
    .............................5\n      2.3. Status Values ..............................................5\n
    \     2.4. Dates and Times ............................................7\n      2.5.
    Validity Periods ...........................................8\n      2.6. Authorization
    Information ..................................8\n      2.7. Other DNS Resource
    Record Attributes .......................8\n   3. EPP Command Mapping .............................................9\n
    \     3.1. EPP Query Commands .........................................9\n           3.1.1.
    EPP <check> Command .................................9\n           3.1.2. EPP
    <info> Command .................................11\n           3.1.3. EPP <transfer>
    Query Command .......................15\n      3.2. EPP Transform Commands ....................................17\n
    \          3.2.1. EPP <create> Command ...............................18\n           3.2.2.
    EPP <delete> Command ...............................20\n           3.2.3. EPP
    <renew> Command ................................22\n           3.2.4. EPP <transfer>
    Command .............................23\n           3.2.5. EPP <update> Command
    ...............................25\n      3.3. Offline Review of Requested Actions
    .......................28\n   4. Formal Syntax ..................................................30\n
    \  5. Internationalization Considerations ............................40\n   6.
    IANA Considerations ............................................40\n   7. Security
    Considerations ........................................41\n   8. Acknowledgements
    ...............................................41\n   9. References .....................................................42\n
    \     9.1. Normative References ......................................42\n      9.2.
    Informative References ....................................43\n   Appendix A.
    \ Changes from RFC 4931 ................................44\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes an Internet domain name mapping
    for version\n   1.0 of the Extensible Provisioning Protocol (EPP).  This mapping
    is\n   specified using the Extensible Markup Language (XML) 1.0 as described\n
    \  in [W3C.REC-xml-20040204] and XML Schema notation as described in\n   [W3C.REC-xmlschema-1-20041028]
    and [W3C.REC-xmlschema-2-20041028].\n   This document obsoletes RFC 4931 [RFC4931].\n
    \  [RFC5730] provides a complete description of EPP command and response\n   structures.
    \ A thorough understanding of the base protocol\n   specification is necessary
    to understand the mapping described in\n   this document.\n   XML is case sensitive.
    \ Unless stated otherwise, XML specifications\n   and examples provided in this
    document MUST be interpreted in the\n   character case presented to develop a
    conforming implementation.\n"
  - contents:
    - "1.1.  Relationship of Domain Objects and Host Objects\n   The EPP mapping for
      host objects is described in [RFC5732].  This\n   document assumes that domain
      name objects have a superordinate\n   relationship to subordinate host name
      objects.  For example, domain\n   name \"example.com\" has a superordinate relationship
      to host name\n   \"ns1.example.com\".  EPP actions (such as object transfers)
      that do\n   not preserve this relationship MUST be explicitly disallowed.\n
      \  A host name object can be created in a repository for which no\n   superordinate
      domain name object exists.  For example, host name\n   \"ns1.example.com\" can
      be created in the \".example\" repository so that\n   DNS domains in \".example\"
      can be delegated to the host.  Such hosts\n   are described as \"external\"
      hosts in this specification since the\n   name of the host does not belong to
      the namespace of the repository\n   in which the host is being used for delegation
      purposes.\n   Whether a host is external or internal relates to the repository
      in\n   which the host is being used for delegation purposes.  Whether or not\n
      \  an internal host is subordinate relates to a domain within the\n   repository.
      \ For example, host ns1.example1.com is a subordinate host\n   of domain example1.com,
      but it is not a subordinate host of domain\n   example2.com. ns1.example1.com
      can be used as a name server for\n   example2.com.  In this case, ns1.example1.com
      MUST be treated as an\n   internal host, subject to the rules governing operations
      on\n   subordinate hosts within the same repository.\n   Name server hosts for
      domain delegation can be specified either as\n   references to existing host
      objects or as domain attributes that\n   describe a host machine.  A server
      operator MUST use one name server\n   specification form consistently.  A server
      operator that announces\n   support for host objects in an EPP greeting MUST
      NOT allow domain\n   attributes to describe a name server host machine.  A server
      operator\n   that does not announce support for host objects MUST allow domain\n
      \  attributes to describe a name server host machine.  When domain\n   attributes
      are used to describe a name server host machine, IP\n   addresses SHOULD be
      required only as needed to generate DNS glue\n   records.\n   Name servers are
      specified within a <domain:ns> element.  This\n   element MUST contain one or
      more <domain:hostObj> elements or one or\n   more <domain:hostAttr> elements.
      \ A <domain:hostObj> element contains\n   the fully qualified name of a known
      name server host object.  A\n   <domain:hostAttr> element contains the following
      child elements:\n   -  A <domain:hostName> element that contains the fully qualified
      name\n      of a host.\n   -  Zero or more OPTIONAL <domain:hostAddr> elements
      that contain the\n      IP addresses to be associated with the host.  Each element
      MAY\n      contain an \"ip\" attribute to identify the IP address format.\n
      \     Attribute value \"v4\" is used to note IPv4 address format.\n      Attribute
      value \"v6\" is used to note IPv6 address format.  If the\n      \"ip\" attribute
      is not specified, \"v4\" is the default attribute\n      value.  IP address
      syntax requirements are described in Section\n      2.5 of the EPP host mapping
      [RFC5732].\n   Example host-object name server elements for domain example.com:\n
      \  <domain:ns>\n     <domain:hostObj>ns1.example.net</domain:hostObj>\n     <domain:hostObj>ns2.example.net</domain:hostObj>\n
      \  </domain:ns>\n   Example host-attribute name server elements for domain example.com:\n
      \  <domain:ns>\n     <domain:hostAttr>\n       <domain:hostName>ns1.example.net</domain:hostName>\n
      \      <domain:hostAddr\n        ip=\"v4\">192.0.2.2</domain:hostAddr>\n       <domain:hostAddr\n
      \       ip=\"v6\">1080:0:0:0:8:800:200C:417A</domain:hostAddr>\n     </domain:hostAttr>\n
      \    <domain:hostAttr>\n       <domain:hostName>ns2.example.net</domain:hostName>\n
      \    </domain:hostAttr>\n   </domain:ns>\n"
    title: 1.1.  Relationship of Domain Objects and Host Objects
  - contents:
    - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n   In examples, \"C:\" represents lines sent by
      a protocol client and \"S:\"\n   represents lines returned by a protocol server.
      \ Indentation and\n   white space in examples are provided only to illustrate
      element\n   relationships and are not a REQUIRED feature of this protocol.\n"
    title: 1.2.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Object Attributes\n   An EPP domain object has attributes and associated
    values that can be\n   viewed and modified by the sponsoring client or the server.
    \ This\n   section describes each attribute type in detail.  The formal syntax\n
    \  for the attribute values described here can be found in the \"Formal\n   Syntax\"
    section of this document and in the appropriate normative\n   references.\n"
  - contents:
    - "2.1.  Domain and Host Names\n   The syntax for domain and host names described
      in this document MUST\n   conform to [RFC0952] and [RFC1123].  At the time of
      this writing, RFC\n   3490 [RFC3490] describes a standard to use certain ASCII
      name labels\n   to represent non-ASCII name labels.  These conformance requirements\n
      \  might change as a result of progressing work in developing standards\n   for
      internationalized domain names.  A server MAY restrict allowable\n   domain
      names to a particular top-level domain, second-level domain,\n   or other domain
      for which the server is authoritative.  The trailing\n   dot required when these
      names are stored in a DNS zone is implicit\n   and MUST NOT be provided when
      exchanging host and domain names.\n"
    title: 2.1.  Domain and Host Names
  - contents:
    - "2.2.  Contact and Client Identifiers\n   All EPP contacts are identified by
      a server-unique identifier.\n   Contact identifiers are character strings with
      a specified minimum\n   length, a specified maximum length, and a specified
      format.  Contact\n   identifiers use the \"clIDType\" client identifier syntax
      described in\n   [RFC5730].\n"
    title: 2.2.  Contact and Client Identifiers
  - contents:
    - "2.3.  Status Values\n   A domain object MUST always have at least one associated
      status\n   value.  Status values can be set only by the client that sponsors
      a\n   domain object and by the server on which the object resides.  A\n   client
      can change the status of a domain object using the EPP\n   <update> command.
      \ Each status value MAY be accompanied by a string\n   of human-readable text
      that describes the rationale for the status\n   applied to the object.\n   A
      client MUST NOT alter status values set by the server.  A server\n   MAY alter
      or override status values set by a client, subject to local\n   server policies.
      \ The status of an object MAY change as a result of\n   either a client-initiated
      transform command or an action performed by\n   a server operator.\n   Status
      values that can be added or removed by a client are prefixed\n   with \"client\".
      \ Corresponding status values that can be added or\n   removed by a server are
      prefixed with \"server\".  Status values that\n   do not begin with either \"client\"
      or \"server\" are server-managed.\n   Status Value Descriptions:\n   -  clientDeleteProhibited,
      serverDeleteProhibited\n      Requests to delete the object MUST be rejected.\n
      \  -  clientHold, serverHold\n      DNS delegation information MUST NOT be published
      for the object.\n   -  clientRenewProhibited, serverRenewProhibited\n      Requests
      to renew the object MUST be rejected.\n   -  clientTransferProhibited, serverTransferProhibited\n
      \     Requests to transfer the object MUST be rejected.\n   -  clientUpdateProhibited,
      serverUpdateProhibited\n      Requests to update the object (other than to remove
      this status)\n      MUST be rejected.\n   -  inactive\n      Delegation information
      has not been associated with the object.\n      This is the default status when
      a domain object is first created\n      and there are no associated host objects
      for the DNS delegation.\n      This status can also be set by the server when
      all host-object\n      associations are removed.\n   -  ok\n      This is the
      normal status value for an object that has no pending\n      operations or prohibitions.
      \ This value is set and removed by the\n      server as other status values
      are added or removed.\n   -  pendingCreate, pendingDelete, pendingRenew, pendingTransfer,\n
      \     pendingUpdate\n      A transform command has been processed for the object,
      but the\n      action has not been completed by the server.  Server operators
      can\n      delay action completion for a variety of reasons, such as to allow\n
      \     for human review or third-party action.  A transform command that\n      is
      processed, but whose requested action is pending, is noted with\n      response
      code 1001.\n   When the requested action has been completed, the pendingCreate,\n
      \  pendingDelete, pendingRenew, pendingTransfer, or pendingUpdate status\n   value
      MUST be removed.  All clients involved in the transaction MUST\n   be notified
      using a service message that the action has been\n   completed and that the
      status of the object has changed.\n   \"ok\" status MUST NOT be combined with
      any other status.\n   \"pendingDelete\" status MUST NOT be combined with either\n
      \  \"clientDeleteProhibited\" or \"serverDeleteProhibited\" status.\n   \"pendingRenew\"
      status MUST NOT be combined with either\n   \"clientRenewProhibited\" or \"serverRenewProhibited\"
      status.\n   \"pendingTransfer\" status MUST NOT be combined with either\n   \"clientTransferProhibited\"
      or \"serverTransferProhibited\" status.\n   \"pendingUpdate\" status MUST NOT
      be combined with either\n   \"clientUpdateProhibited\" or \"serverUpdateProhibited\"
      status.\n   The pendingCreate, pendingDelete, pendingRenew, pendingTransfer,
      and\n   pendingUpdate status values MUST NOT be combined with each other.\n
      \  Other status combinations not expressly prohibited MAY be used.\n"
    title: 2.3.  Status Values
  - contents:
    - "2.4.  Dates and Times\n   Date and time attribute values MUST be represented
      in Universal\n   Coordinated Time (UTC) using the Gregorian calendar.  The extended\n
      \  date-time form using upper case \"T\" and \"Z\" characters defined in\n   [W3C.REC-xmlschema-2-20041028]
      MUST be used to represent date-time\n   values, as XML Schema does not support
      truncated date-time forms or\n   lower case \"T\" and \"Z\" characters.\n"
    title: 2.4.  Dates and Times
  - contents:
    - "2.5.  Validity Periods\n   A domain name object MAY have a specified validity
      period.  If server\n   policy supports domain-object validity periods, the validity
      period\n   is defined when a domain object is created, and it MAY be extended
      by\n   the EPP <renew> or <transfer> commands.  As a matter of server\n   policy,
      this specification does not define actions to be taken upon\n   expiration of
      a domain object's validity period.\n   Validity periods are measured in years
      or months with the appropriate\n   units specified using the \"unit\" attribute.
      \ Valid values for the\n   \"unit\" attribute are \"y\" for years and \"m\"
      for months.  The minimum\n   allowable period value is one (1).  The maximum
      allowable value is\n   ninety-nine decimal (99).  A server MAY support a lower
      maximum\n   value.\n"
    title: 2.5.  Validity Periods
  - contents:
    - "2.6.  Authorization Information\n   Authorization information is associated
      with domain objects to\n   facilitate transfer operations.  Authorization information
      is\n   assigned when a domain object is created, and it might be updated in\n
      \  the future.  This specification describes password-based\n   authorization
      information, though other mechanisms are possible.\n"
    title: 2.6.  Authorization Information
  - contents:
    - "2.7.  Other DNS Resource Record Attributes\n   While the DNS allows many resource
      record types to be associated with\n   a domain, this mapping only explicitly
      specifies elements that\n   describe resource records used for domain delegation
      and resolution.\n   Facilities to provision other domain-related resource record
      types\n   can be developed by extending this mapping.\n   The provisioning method
      described in this mapping separates discrete\n   data elements by data type.
      \ This method of data definition allows\n   XML Schema processors to perform
      basic syntax-validation tasks,\n   reducing ambiguity and the amount of parsing
      and syntax-checking work\n   required of protocol processors.  Provisioning
      and extension methods\n   that aggregate data into opaque strings are possible,
      but such\n   methods should not be used because they impose additional parsing,\n
      \  interpretation, and validation requirements on protocol processors.\n"
    title: 2.7.  Other DNS Resource Record Attributes
  title: 2.  Object Attributes
- contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics
    can be found\n   in [RFC5730].  The command mappings described here are specifically\n
    \  for use in provisioning and managing Internet domain names via EPP.\n"
  - contents:
    - "3.1.  EPP Query Commands\n   EPP provides three commands to retrieve domain
      information: <check>\n   to determine if a domain object can be provisioned
      within a\n   repository, <info> to retrieve detailed information associated
      with a\n   domain object, and <transfer> to retrieve domain-object transfer\n
      \  status information.\n"
    - contents:
      - "3.1.1.  EPP <check> Command\n   The EPP <check> command is used to determine
        if an object can be\n   provisioned within a repository.  It provides a hint
        that allows a\n   client to anticipate the success or failure of provisioning
        an object\n   using the <create> command, as object-provisioning requirements
        are\n   ultimately a matter of server policy.\n   In addition to the standard
        EPP command elements, the <check> command\n   MUST contain a <domain:check>
        element that identifies the domain\n   namespace.  The <domain:check> element
        contains the following child\n   elements:\n   -  One or more <domain:name>
        elements that contain the fully\n      qualified names of the domain objects
        to be queried.\n   Example <check> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <check>\n   C:      <domain:check\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:        <domain:name>example.net</domain:name>\n
        \  C:        <domain:name>example.org</domain:name>\n   C:      </domain:check>\n
        \  C:    </check>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When a <check> command has been processed successfully, the
        EPP\n   <resData> element MUST contain a child <domain:chkData> element that\n
        \  identifies the domain namespace.  The <domain:chkData> element\n   contains
        one or more <domain:cd> elements that contain the following\n   child elements:\n
        \  -  A <domain:name> element that contains the fully qualified name of\n
        \     the queried domain object.  This element MUST contain an \"avail\"\n
        \     attribute whose value indicates object availability (can it be\n      provisioned
        or not) at the moment the <check> command was\n      completed.  A value of
        \"1\" or \"true\" means that the object can be\n      provisioned.  A value
        of \"0\" or \"false\" means that the object can\n      not be provisioned.\n
        \  -  An OPTIONAL <domain:reason> element that MAY be provided when an\n      object
        cannot be provisioned.  If present, this element contains\n      server-specific
        text to help explain why the object cannot be\n      provisioned.  This text
        MUST be represented in the response\n      language previously negotiated
        with the client; an OPTIONAL \"lang\"\n      attribute MAY be present to identify
        the language if the\n      negotiated value is something other than the default
        value of \"en\"\n      (English).\n   Example <check> response:\n   S:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <domain:chkData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:cd>\n   S:          <domain:name avail=\"1\">example.com</domain:name>\n
        \  S:        </domain:cd>\n   S:        <domain:cd>\n   S:          <domain:name
        avail=\"0\">example.net</domain:name>\n   S:          <domain:reason>In use</domain:reason>\n
        \  S:        </domain:cd>\n   S:        <domain:cd>\n   S:          <domain:name
        avail=\"1\">example.org</domain:name>\n   S:        </domain:cd>\n   S:      </domain:chkData>\n
        \  S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <check> command
        cannot be\n   processed for any reason.\n"
      title: 3.1.1.  EPP <check> Command
    - contents:
      - "3.1.2.  EPP <info> Command\n   The EPP <info> command is used to retrieve
        information associated\n   with a domain object.  The response to this command
        MAY vary\n   depending on the identity of the querying client, use of\n   authorization
        information, and server policy towards unauthorized\n   clients.  If the querying
        client is the sponsoring client, all\n   available information MUST be returned.
        \ If the querying client is\n   not the sponsoring client but the client provides
        valid authorization\n   information, all available information MUST be returned.
        \ If the\n   querying client is not the sponsoring client and the client does
        not\n   provide valid authorization information, server policy determines\n
        \  which OPTIONAL elements are returned.\n   In addition to the standard EPP
        command elements, the <info> command\n   MUST contain a <domain:info> element
        that identifies the domain\n   namespace.  The <domain:info> element contains
        the following child\n   elements:\n   -  A <domain:name> element that contains
        the fully qualified name of\n      the domain object to be queried.  An OPTIONAL
        \"hosts\" attribute is\n      available to control return of information describing
        hosts\n      related to the domain object.  A value of \"all\" (the default,\n
        \     which MAY be absent) returns information describing both\n      subordinate
        and delegated hosts.  A value of \"del\" returns\n      information describing
        only delegated hosts.  A value of \"sub\"\n      returns information describing
        only subordinate hosts.  A value of\n      \"none\" returns no information
        describing delegated or subordinate\n      hosts.\n   -  An OPTIONAL <domain:authInfo>
        element that contains authorization\n      information associated with the
        domain object or authorization\n      information associated with the domain
        object's registrant or\n      associated contacts.  An OPTIONAL \"roid\" attribute
        MUST be used to\n      identify the registrant or contact object if and only
        if the given\n      authInfo is associated with a registrant or contact object,
        and\n      not the domain object itself.  If this element is not provided
        or\n      if the authorization information is invalid, server policy\n      determines
        if the command is rejected or if response information\n      will be returned
        to the client.\n   Example <info> command without authorization information:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <info>\n
        \  C:      <domain:info\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name hosts=\"all\">example.com</domain:name>\n   C:      </domain:info>\n
        \  C:    </info>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   Example <info> command with authorization information:\n   C:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <info>\n   C:      <domain:info\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name hosts=\"all\">example.com</domain:name>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:info>\n   C:    </info>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When an <info> command has been processed
        successfully, the EPP\n   <resData> element MUST contain a child <domain:infData>
        element that\n   identifies the domain namespace.  Elements that are not OPTIONAL
        MUST\n   be returned; OPTIONAL elements are returned based on client\n   authorization
        and server policy.  The <domain:infData> element\n   contains the following
        child elements:\n   -  A <domain:name> element that contains the fully qualified
        name of\n      the domain object.\n   -  A <domain:roid> element that contains
        the Repository Object\n      IDentifier assigned to the domain object when
        the object was\n      created.\n   -  Zero or more OPTIONAL <domain:status>
        elements that contain the\n      current status descriptors associated with
        the domain.\n   -  If supported by the server, one OPTIONAL <domain:registrant>\n
        \     element and one or more OPTIONAL <domain:contact> elements that\n      contain
        identifiers for the human or organizational social\n      information objects
        associated with the domain object.\n   -  An OPTIONAL <domain:ns> element
        that contains the fully qualified\n      names of the delegated host objects
        or host attributes (name\n      servers) associated with the domain object.
        \ See Section 1.1 for a\n      description of the elements used to specify
        host objects or host\n      attributes.\n   -  Zero or more OPTIONAL <domain:host>
        elements that contain the\n      fully qualified names of the subordinate
        host objects that exist\n      under this superordinate domain object.\n   -
        \ A <domain:clID> element that contains the identifier of the\n      sponsoring
        client.\n   -  An OPTIONAL <domain:crID> element that contains the identifier
        of\n      the client that created the domain object.\n   -  An OPTIONAL <domain:crDate>
        element that contains the date and\n      time of domain object creation.\n
        \  -  An OPTIONAL <domain:exDate> element that contains the date and\n      time
        identifying the end of the domain object's registration\n      period.\n   -
        \ An OPTIONAL <domain:upID> element that contains the identifier of\n      the
        client that last updated the domain object.  This element MUST\n      NOT
        be present if the domain has never been modified.\n   -  An OPTIONAL <domain:upDate>
        element that contains the date and\n      time of the most recent domain-object
        modification.  This element\n      MUST NOT be present if the domain object
        has never been modified.\n   -  An OPTIONAL <domain:trDate> element that contains
        the date and\n      time of the most recent successful domain-object transfer.
        \ This\n      element MUST NOT be provided if the domain object has never
        been\n      transferred.\n   -  An OPTIONAL <domain:authInfo> element that
        contains authorization\n      information associated with the domain object.
        \ This element MUST\n      only be returned if the querying client is the
        current sponsoring\n      client or if the client supplied valid authorization
        information\n      with the command.\n   Example <info> response for an authorized
        client:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:
        \   <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n
        \  S:    </result>\n   S:    <resData>\n   S:      <domain:infData\n   S:
        \      xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:        <domain:name>example.com</domain:name>\n
        \  S:        <domain:roid>EXAMPLE1-REP</domain:roid>\n   S:        <domain:status
        s=\"ok\"/>\n   S:        <domain:registrant>jd1234</domain:registrant>\n   S:
        \       <domain:contact type=\"admin\">sh8013</domain:contact>\n   S:        <domain:contact
        type=\"tech\">sh8013</domain:contact>\n   S:        <domain:ns>\n   S:          <domain:hostObj>ns1.example.com</domain:hostObj>\n
        \  S:          <domain:hostObj>ns1.example.net</domain:hostObj>\n   S:        </domain:ns>\n
        \  S:        <domain:host>ns1.example.com</domain:host>\n   S:        <domain:host>ns2.example.com</domain:host>\n
        \  S:        <domain:clID>ClientX</domain:clID>\n   S:        <domain:crID>ClientY</domain:crID>\n
        \  S:        <domain:crDate>1999-04-03T22:00:00.0Z</domain:crDate>\n   S:
        \       <domain:upID>ClientX</domain:upID>\n   S:        <domain:upDate>1999-12-03T09:00:00.0Z</domain:upDate>\n
        \  S:        <domain:exDate>2005-04-03T22:00:00.0Z</domain:exDate>\n   S:
        \       <domain:trDate>2000-04-08T09:00:00.0Z</domain:trDate>\n   S:        <domain:authInfo>\n
        \  S:          <domain:pw>2fooBAR</domain:pw>\n   S:        </domain:authInfo>\n
        \  S:      </domain:infData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   A server with a different
        information-return policy MAY provide less\n   information in a response.\n
        \  Example <info> response for an unauthorized client:\n   S:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <domain:infData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:roid>EXAMPLE1-REP</domain:roid>\n
        \  S:        <domain:clID>ClientX</domain:clID>\n   S:      </domain:infData>\n
        \  S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if an <info> command
        cannot be\n   processed for any reason.\n"
      title: 3.1.2.  EPP <info> Command
    - contents:
      - "3.1.3.  EPP <transfer> Query Command\n   The EPP <transfer> command provides
        a query operation that allows a\n   client to determine the real-time status
        of pending and completed\n   transfer requests.  In addition to the standard
        EPP command elements,\n   the <transfer> command MUST contain an \"op\" attribute
        with value\n   \"query\", and a <domain:transfer> element that identifies
        the domain\n   namespace.  The <domain:transfer> element contains the following\n
        \  child elements:\n   -  A <domain:name> element that contains the fully
        qualified name of\n      the domain object to be queried.\n   -  An OPTIONAL
        <domain:authInfo> element that contains authorization\n      information associated
        with the domain object or authorization\n      information associated with
        the domain object's registrant or\n      associated contacts.  An OPTIONAL
        \"roid\" attribute MUST be used to\n      identify the registrant or contact
        object if and only if the given\n      authInfo is associated with a registrant
        or contact object, and\n      not the domain object itself.  If this element
        is not provided or\n      if the authorization information is invalid, server
        policy\n      determines if the command is rejected or if response information\n
        \     will be returned to the client.\n   Example <transfer> query command:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <transfer
        op=\"query\">\n   C:      <domain:transfer\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw roid=\"JD1234-REP\">2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:transfer>\n   C:    </transfer>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When a <transfer> query command has been
        processed successfully, the\n   EPP <resData> element MUST contain a child
        <domain:trnData> element\n   that identifies the domain namespace.  The <domain:trnData>
        element\n   contains the following child elements:\n   -  A <domain:name>
        element that contains the fully qualified name of\n      the domain object.\n
        \  -  A <domain:trStatus> element that contains the state of the most\n      recent
        transfer request.\n   -  A <domain:reID> element that contains the identifier
        of the client\n      that requested the object transfer.\n   -  A <domain:reDate>
        element that contains the date and time that the\n      transfer was requested.\n
        \  -  A <domain:acID> element that contains the identifier of the client\n
        \     that SHOULD act upon a PENDING transfer request.  For all other\n      status
        types, the value identifies the client that took the\n      indicated action.\n
        \  -  A <domain:acDate> element that contains the date and time of a\n      required
        or completed response.  For a PENDING request, the value\n      identifies
        the date and time by which a response is required\n      before an automated
        response action will be taken by the server.\n      For all other status types,
        the value identifies the date and time\n      when the request was completed.\n
        \  -  An OPTIONAL <domain:exDate> element that contains the end of the\n      domain
        object's validity period if the <transfer> command caused\n      or causes
        a change in the validity period.\n   Example <transfer> query response:\n
        \  S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result
        code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:
        \   </result>\n   S:    <resData>\n   S:      <domain:trnData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:trStatus>pending</domain:trStatus>\n
        \  S:        <domain:reID>ClientX</domain:reID>\n   S:        <domain:reDate>2000-06-06T22:00:00.0Z</domain:reDate>\n
        \  S:        <domain:acID>ClientY</domain:acID>\n   S:        <domain:acDate>2000-06-11T22:00:00.0Z</domain:acDate>\n
        \  S:        <domain:exDate>2002-09-08T22:00:00.0Z</domain:exDate>\n   S:
        \     </domain:trnData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <transfer> query
        command\n   cannot be processed for any reason.\n"
      title: 3.1.3.  EPP <transfer> Query Command
    title: 3.1.  EPP Query Commands
  - contents:
    - "3.2.  EPP Transform Commands\n   EPP provides five commands to transform domain
      objects: <create> to\n   create an instance of a domain object, <delete> to
      delete an instance\n   of a domain object, <renew> to extend the validity period
      of a domain\n   object, <transfer> to manage domain object sponsorship changes,
      and\n   <update> to change information associated with a domain object.\n   Transform
      commands are typically processed and completed in real\n   time.  Server operators
      MAY receive and process transform commands\n   but defer completing the requested
      action if human or third-party\n   review is required before the requested action
      can be completed.  In\n   such situations the server MUST return a 1001 response
      code to the\n   client to note that the command has been received and processed
      but\n   that the requested action is pending.  The server MUST also manage\n
      \  the status of the object that is the subject of the command to\n   reflect
      the initiation and completion of the requested action.  Once\n   the action
      has been completed, all clients involved in the\n   transaction MUST be notified
      using a service message that the action\n   has been completed and that the
      status of the object has changed.\n   Other notification methods MAY be used
      in addition to the required\n   service message.\n   Server operators SHOULD
      confirm that a client is authorized to\n   perform a transform command on a
      given object.  Any attempt to\n   transform an object by an unauthorized client
      MUST be rejected, and\n   the server MUST return a 2201 response code to the
      client to note\n   that the client lacks privileges to execute the requested
      command.\n"
    - contents:
      - "3.2.1.  EPP <create> Command\n   The EPP <create> command provides a transform
        operation that allows a\n   client to create a domain object.  In addition
        to the standard EPP\n   command elements, the <create> command MUST contain
        a <domain:create>\n   element that identifies the domain namespace.  The <domain:create>\n
        \  element contains the following child elements:\n   -  A <domain:name> element
        that contains the fully qualified name of\n      the domain object to be created.\n
        \  -  An OPTIONAL <domain:period> element that contains the initial\n      registration
        period of the domain object.  A server MAY define a\n      default initial
        registration period if not specified by the\n      client.\n   -  An OPTIONAL
        <domain:ns> element that contains the fully qualified\n      names of the
        delegated host objects or host attributes (name\n      servers) associated
        with the domain object to provide resolution\n      services for the domain;
        see Section 1.1 for a description of the\n      elements used to specify host
        objects or host attributes.  A host\n      object MUST be known to the server
        before the host object can be\n      associated with a domain object.\n   -
        \ An OPTIONAL <domain:registrant> element that contains the\n      identifier
        for the human or organizational social information\n      (contact) object
        to be associated with the domain object as the\n      object registrant.  This
        object identifier MUST be known to the\n      server before the contact object
        can be associated with the domain\n      object.  The EPP mapping for contact
        objects is described in\n      [RFC5733].\n   -  Zero or more OPTIONAL <domain:contact>
        elements that contain the\n      identifiers for other contact objects to
        be associated with the\n      domain object.  Contact object identifiers MUST
        be known to the\n      server before the contact object can be associated
        with the domain\n      object.\n   -  A <domain:authInfo> element that contains
        authorization\n      information to be associated with the domain object.
        \ This mapping\n      includes a password-based authentication mechanism,
        but the schema\n      allows new mechanisms to be defined in new schemas.\n
        \  Example <create> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:        <domain:period
        unit=\"y\">2</domain:period>\n   C:        <domain:ns>\n   C:          <domain:hostObj>ns1.example.net</domain:hostObj>\n
        \  C:          <domain:hostObj>ns2.example.net</domain:hostObj>\n   C:        </domain:ns>\n
        \  C:        <domain:registrant>jd1234</domain:registrant>\n   C:        <domain:contact
        type=\"admin\">sh8013</domain:contact>\n   C:        <domain:contact type=\"tech\">sh8013</domain:contact>\n
        \  C:        <domain:authInfo>\n   C:          <domain:pw>2fooBAR</domain:pw>\n
        \  C:        </domain:authInfo>\n   C:      </domain:create>\n   C:    </create>\n
        \  C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   When
        a <create> command has been processed successfully, the EPP\n   <resData>
        element MUST contain a child <domain:creData> element that\n   identifies
        the domain namespace.  The <domain:creData> element\n   contains the following
        child elements:\n   -  A <domain:name> element that contains the fully qualified
        name of\n      the domain object.\n   -  A <domain:crDate> element that contains
        the date and time of\n      domain object creation.\n   -  An OPTIONAL <domain:exDate>
        element that contains the date and\n      time identifying the end of the
        domain object's registration\n      period.\n   Example <create> response:\n
        \  S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result
        code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:
        \   </result>\n   S:    <resData>\n   S:      <domain:creData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:crDate>1999-04-03T22:00:00.0Z</domain:crDate>\n
        \  S:        <domain:exDate>2001-04-03T22:00:00.0Z</domain:exDate>\n   S:
        \     </domain:creData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <create> command
        cannot\n   be processed for any reason.\n"
      title: 3.2.1.  EPP <create> Command
    - contents:
      - "3.2.2.  EPP <delete> Command\n   The EPP <delete> command provides a transform
        operation that allows a\n   client to delete a domain object.  In addition
        to the standard EPP\n   command elements, the <delete> command MUST contain
        a <domain:delete>\n   element that identifies the domain namespace.  The <domain:delete>\n
        \  element contains the following child elements:\n   -  A <domain:name> element
        that contains the fully qualified name of\n      the domain object to be deleted.\n
        \  A domain object SHOULD NOT be deleted if subordinate host objects are\n
        \  associated with the domain object.  For example, if domain\n   \"example.com\"
        exists and host object \"ns1.example.com\" also exists,\n   then domain \"example.com\"
        SHOULD NOT be deleted until host\n   \"ns1.example.com\" has either been deleted
        or renamed to exist in a\n   different superordinate domain.  A server SHOULD
        notify clients that\n   object relationships exist by sending a 2305 error
        response code when\n   a <delete> command is attempted and fails due to existing
        object\n   relationships.  Delegated and subordinate host objects associated\n
        \  with a domain object can be determined using the <info> query command\n
        \  for the domain object.\n   Example <delete> command:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <delete>\n   C:      <domain:delete\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:      </domain:delete>\n
        \  C:    </delete>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When a <delete> command has been processed successfully, a
        server\n   MUST respond with an EPP response with no <resData> element.\n
        \  Example <delete> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <delete> command
        cannot\n   be processed for any reason.\n"
      title: 3.2.2.  EPP <delete> Command
    - contents:
      - "3.2.3.  EPP <renew> Command\n   The EPP <renew> command provides a transform
        operation that allows a\n   client to extend the validity period of a domain
        object.  In addition\n   to the standard EPP command elements, the <renew>
        command MUST\n   contain a <domain:renew> element that identifies the domain\n
        \  namespace.  The <domain:renew> element contains the following child\n   elements:\n
        \  -  A <domain:name> element that contains the fully qualified name of\n
        \     the domain object whose validity period is to be extended.\n   -  A
        <domain:curExpDate> element that contains the date on which the\n      current
        validity period ends.  This value ensures that repeated\n      <renew> commands
        do not result in multiple, unanticipated\n      successful renewals.\n   -
        \ An OPTIONAL <domain:period> element that contains the number of\n      units
        to be added to the registration period of the domain object.\n      The number
        of units available MAY be subject to limits imposed by\n      the server.\n
        \  Example <renew> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <renew>\n   C:      <domain:renew\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:        <domain:curExpDate>2000-04-03</domain:curExpDate>\n
        \  C:        <domain:period unit=\"y\">5</domain:period>\n   C:      </domain:renew>\n
        \  C:    </renew>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When a <renew> command has been processed successfully, the
        EPP\n   <resData> element MUST contain a child <domain:renData> element that\n
        \  identifies the domain namespace.  The <domain:renData> element\n   contains
        the following child elements:\n   -  A <domain:name> element that contains
        the fully qualified name of\n      the domain object.\n   -  An OPTIONAL <domain:exDate>
        element that contains the date and\n      time identifying the end of the
        domain object's registration\n      period.\n   Example <renew> response:\n
        \  S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result
        code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:
        \   </result>\n   S:    <resData>\n   S:      <domain:renData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:exDate>2005-04-03T22:00:00.0Z</domain:exDate>\n
        \  S:      </domain:renData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response
        MUST be returned if a <renew> command cannot be\n   processed for any reason.\n"
      title: 3.2.3.  EPP <renew> Command
    - contents:
      - "3.2.4.  EPP <transfer> Command\n   The EPP <transfer> command provides a
        transform operation that allows\n   a client to manage requests to transfer
        the sponsorship of a domain\n   object.  In addition to the standard EPP command
        elements, the\n   <transfer> command MUST contain a <domain:transfer> element
        that\n   identifies the domain namespace.  The <domain:transfer> element\n
        \  contains the following child elements:\n   -  A <domain:name> element that
        contains the fully qualified name of\n      the domain object for which a
        transfer request is to be created,\n      approved, rejected, or cancelled.\n
        \  -  An OPTIONAL <domain:period> element that contains the number of\n      units
        to be added to the registration period of the domain object\n      at completion
        of the transfer process.  This element can only be\n      used when a transfer
        is requested, and it MUST be ignored if used\n      otherwise.  The number
        of units available MAY be subject to limits\n      imposed by the server.\n
        \  -  A <domain:authInfo> element that contains authorization\n      information
        associated with the domain object or authorization\n      information associated
        with the domain object's registrant or\n      associated contacts.  An OPTIONAL
        \"roid\" attribute MUST be used to\n      identify the registrant or contact
        object if and only if the given\n      authInfo is associated with a registrant
        or contact object, and\n      not the domain object itself.\n   Every EPP
        <transfer> command MUST contain an \"op\" attribute that\n   identifies the
        transfer operation to be performed.  Valid values,\n   definitions, and authorizations
        for all attribute values are defined\n   in [RFC5730].\n   Transfer of a domain
        object MUST implicitly transfer all host objects\n   that are subordinate
        to the domain object.  For example, if domain\n   object \"example.com\" is
        transferred and host object \"ns1.example.com\"\n   exists, the host object
        MUST be transferred as part of the\n   \"example.com\" transfer process.  Host
        objects that are subject to\n   transfer when transferring a domain object
        are listed in the response\n   to an EPP <info> command performed on the domain
        object.\n   Example <transfer> request command:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <transfer op=\"request\">\n   C:      <domain:transfer\n
        \  C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   C:        <domain:name>example.com</domain:name>\n
        \  C:        <domain:period unit=\"y\">1</domain:period>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw roid=\"JD1234-REP\">2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:transfer>\n   C:    </transfer>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When a <transfer> command has been processed
        successfully, the EPP\n   <resData> element MUST contain a child <domain:trnData>
        element that\n   identifies the domain namespace.  The <domain:trnData> element\n
        \  contains the same child elements defined for a transfer query\n   response.\n
        \  Example <transfer> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command
        completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n
        \  S:      <domain:trnData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:trStatus>pending</domain:trStatus>\n
        \  S:        <domain:reID>ClientX</domain:reID>\n   S:        <domain:reDate>2000-06-08T22:00:00.0Z</domain:reDate>\n
        \  S:        <domain:acID>ClientY</domain:acID>\n   S:        <domain:acDate>2000-06-13T22:00:00.0Z</domain:acDate>\n
        \  S:        <domain:exDate>2002-09-08T22:00:00.0Z</domain:exDate>\n   S:
        \     </domain:trnData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <transfer> command
        can\n   not be processed for any reason.\n"
      title: 3.2.4.  EPP <transfer> Command
    - contents:
      - "3.2.5.  EPP <update> Command\n   The EPP <update> command provides a transform
        operation that allows a\n   client to modify the attributes of a domain object.
        \ In addition to\n   the standard EPP command elements, the <update> command
        MUST contain\n   a <domain:update> element that identifies the domain namespace.
        \ The\n   <domain:update> element contains the following child elements:\n
        \  -  A <domain:name> element that contains the fully qualified name of\n
        \     the domain object to be updated.\n   -  An OPTIONAL <domain:add> element
        that contains attribute values to\n      be added to the object.\n   -  An
        OPTIONAL <domain:rem> element that contains attribute values to\n      be
        removed from the object.\n   -  An OPTIONAL <domain:chg> element that contains
        object attribute\n      values to be changed.\n   At least one <domain:add>,
        <domain:rem>, or <domain:chg> element MUST\n   be provided if the command
        is not being extended.  All of these\n   elements MAY be omitted if an <update>
        extension is present.  The\n   <domain:add> and <domain:rem> elements contain
        the following child\n   elements:\n   -  An OPTIONAL <domain:ns> element that
        contains the fully qualified\n      names of the delegated host objects or
        host attributes (name\n      servers) associated with the domain object to
        provide resolution\n      services for the domain; see Section 1.1 for a description
        of the\n      elements used to specify host objects or host attributes.  A
        host\n      object MUST be known to the server before the host object can
        be\n      associated with a domain object.  If host attributes are used to\n
        \     specify name servers, note that IP address elements are not needed\n
        \     to identify a name server that is being removed.  IP address\n      elements
        can safely be absent or ignored in this situation.\n   -  Zero or more <domain:contact>
        elements that contain the\n      identifiers for contact objects to be associated
        with or removed\n      from the domain object.  Contact object identifiers
        MUST be known\n      to the server before the contact object can be associated
        with the\n      domain object.\n   -  Zero or more <domain:status> elements
        that contain status values\n      to be applied to or removed from the object.
        \ When specifying a\n      value to be removed, only the attribute value is
        significant;\n      element text is not required to match a value for removal.\n
        \  A <domain:chg> element contains the following child elements:\n   -  A
        <domain:registrant> element that contains the identifier for the\n      human
        or organizational social information (contact) object to be\n      associated
        with the domain object as the object registrant.  This\n      object identifier
        MUST be known to the server before the contact\n      object can be associated
        with the domain object.  An empty element\n      can be used to remove registrant
        information.\n   -  A <domain:authInfo> element that contains authorization\n
        \     information associated with the domain object.  This mapping\n      includes
        a password-based authentication mechanism, but the schema\n      allows new
        mechanisms to be defined in new schemas.  A <domain:\n      null> element
        can be used within the <domain:authInfo> element to\n      remove authorization
        information.\n   Example <update> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <update>\n   C:      <domain:update\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>example.com</domain:name>\n   C:        <domain:add>\n
        \  C:          <domain:ns>\n   C:            <domain:hostObj>ns2.example.com</domain:hostObj>\n
        \  C:          </domain:ns>\n   C:          <domain:contact type=\"tech\">mak21</domain:contact>\n
        \  C:          <domain:status s=\"clientHold\"\n   C:           lang=\"en\">Payment
        overdue.</domain:status>\n   C:        </domain:add>\n   C:        <domain:rem>\n
        \  C:          <domain:ns>\n   C:            <domain:hostObj>ns1.example.com</domain:hostObj>\n
        \  C:          </domain:ns>\n   C:          <domain:contact type=\"tech\">sh8013</domain:contact>\n
        \  C:          <domain:status s=\"clientUpdateProhibited\"/>\n   C:        </domain:rem>\n
        \  C:        <domain:chg>\n   C:          <domain:registrant>sh8013</domain:registrant>\n
        \  C:          <domain:authInfo>\n   C:            <domain:pw>2BARfoo</domain:pw>\n
        \  C:          </domain:authInfo>\n   C:        </domain:chg>\n   C:      </domain:update>\n
        \  C:    </update>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When an <update> command has been processed successfully,
        a server\n   MUST respond with an EPP response with no <resData> element.\n
        \  Example <update> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if an <update> command
        cannot\n   be processed for any reason.\n"
      title: 3.2.5.  EPP <update> Command
    title: 3.2.  EPP Transform Commands
  - contents:
    - "3.3.  Offline Review of Requested Actions\n   Commands are processed by a server
      in the order they are received\n   from a client.  Though an immediate response
      confirming receipt and\n   processing of the command is produced by the server,
      a server\n   operator MAY perform an offline review of requested transform\n
      \  commands before completing the requested action.  In such situations,\n   the
      response from the server MUST clearly note that the transform\n   command has
      been received and processed but that the requested action\n   is pending.  The
      status of the corresponding object MUST clearly\n   reflect processing of the
      pending action.  The server MUST notify the\n   client when offline processing
      of the action has been completed.\n   Examples describing a <create> command
      that requires offline review\n   are included here.  Note the result code and
      message returned in\n   response to the <create> command.\n   S:<?xml version=\"1.0\"
      encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
      \  S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command
      completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n
      \  S:      <domain:creData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  S:        <domain:name>example.com</domain:name>\n   S:        <domain:crDate>1999-04-03T22:00:00.0Z</domain:crDate>\n
      \  S:        <domain:exDate>2001-04-03T22:00:00.0Z</domain:exDate>\n   S:      </domain:creData>\n
      \  S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
      \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n   The status of the domain object after returning this response
      MUST\n   include \"pendingCreate\".  The server operator reviews the request\n
      \  offline, and informs the client of the outcome of the review either\n   by
      queuing a service message for retrieval via the <poll> command or\n   by using
      an out-of-band mechanism to inform the client of the\n   request.\n   The service
      message MUST contain text that describes the notification\n   in the child <msg>
      element of the response <msgQ> element.  In\n   addition, the EPP <resData>
      element MUST contain a child <domain:\n   panData> element that identifies the
      domain namespace.  The <domain:\n   panData> element contains the following
      child elements:\n   -  A <domain:name> element that contains the fully qualified
      name of\n      the domain object.  The <domain:name> element contains a REQUIRED\n
      \     \"paResult\" attribute.  A positive boolean value indicates that the\n
      \     request has been approved and completed.  A negative boolean value\n      indicates
      that the request has been denied and the requested\n      action has not been
      taken.\n   -  A <domain:paTRID> element that contains the client transaction\n
      \     identifier and server transaction identifier returned with the\n      original
      response to process the command.  The client transaction\n      identifier is
      OPTIONAL and will only be returned if the client\n      provided an identifier
      with the original <create> command.\n   -  A <domain:paDate> element that contains
      the date and time\n      describing when review of the requested action was
      completed.\n   Example \"review completed\" service message:\n   S:<?xml version=\"1.0\"
      encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
      \  S:  <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command
      completed successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ
      count=\"5\" id=\"12345\">\n   S:      <qDate>1999-04-04T22:01:00.0Z</qDate>\n
      \  S:      <msg>Pending action completed successfully.</msg>\n   S:    </msgQ>\n
      \  S:    <resData>\n   S:      <domain:panData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  S:        <domain:name paResult=\"1\">example.com</domain:name>\n   S:        <domain:paTRID>\n
      \  S:          <clTRID>ABC-12345</clTRID>\n   S:          <svTRID>54321-XYZ</svTRID>\n
      \  S:        </domain:paTRID>\n   S:        <domain:paDate>1999-04-04T22:00:00.0Z</domain:paDate>\n
      \  S:      </domain:panData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>BCD-23456</clTRID>\n
      \  S:      <svTRID>65432-WXY</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n"
    title: 3.3.  Offline Review of Requested Actions
  title: 3.  EPP Command Mapping
- contents:
  - "4.  Formal Syntax\n   An EPP object mapping is specified in XML Schema notation.
    \ The\n   formal syntax presented here is a complete schema representation of\n
    \  the object mapping suitable for automated validation of EPP XML\n   instances.
    \ The BEGIN and END tags are not part of the schema; they\n   are used to note
    the beginning and ending of the schema for URI\n   registration purposes.\n   Copyright
    (c) 2009 IETF Trust and the persons identified as authors\n   of the code.  All
    rights reserved.\n   Redistribution and use in source and binary forms, with or
    without\n   modification, are permitted provided that the following conditions\n
    \  are met:\n   o  Redistributions of source code must retain the above copyright\n
    \     notice, this list of conditions and the following disclaimer.\n   o  Redistributions
    in binary form must reproduce the above copyright\n      notice, this list of
    conditions and the following disclaimer in\n      the documentation and/or other
    materials provided with the\n      distribution.\n   o  Neither the name of Internet
    Society, IETF or IETF Trust, nor the\n      names of specific contributors, may
    be used to endorse or promote\n      products derived from this software without
    specific prior written\n      permission.\n   THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n
    \  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT
    OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
    WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema
    targetNamespace=\"urn:ietf:params:xml:ns:domain-1.0\"\n        xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"\n
    \       xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\"\n        xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"\n
    \       xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n        xmlns=\"http://www.w3.org/2001/XMLSchema\"\n
    \       elementFormDefault=\"qualified\">\n   <!--\n   Import common element types.\n
    \  -->\n   <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"/>\n   <import
    namespace=\"urn:ietf:params:xml:ns:epp-1.0\"/>\n   <import namespace=\"urn:ietf:params:xml:ns:host-1.0\"/>\n
    \  <annotation>\n    <documentation>\n      Extensible Provisioning Protocol v1.0\n
    \     domain provisioning schema.\n    </documentation>\n   </annotation>\n   <!--\n
    \  Child elements found in EPP commands.\n   -->\n   <element name=\"check\" type=\"domain:mNameType\"/>\n
    \  <element name=\"create\" type=\"domain:createType\"/>\n   <element name=\"delete\"
    type=\"domain:sNameType\"/>\n   <element name=\"info\" type=\"domain:infoType\"/>\n
    \  <element name=\"renew\" type=\"domain:renewType\"/>\n   <element name=\"transfer\"
    type=\"domain:transferType\"/>\n   <element name=\"update\" type=\"domain:updateType\"/>\n
    \  <!--\n   Child elements of the <create> command.\n   -->\n   <complexType name=\"createType\">\n
    \   <sequence>\n      <element name=\"name\" type=\"eppcom:labelType\"/>\n      <element
    name=\"period\" type=\"domain:periodType\"\n       minOccurs=\"0\"/>\n      <element
    name=\"ns\" type=\"domain:nsType\"\n       minOccurs=\"0\"/>\n      <element name=\"registrant\"
    type=\"eppcom:clIDType\"\n       minOccurs=\"0\"/>\n      <element name=\"contact\"
    type=\"domain:contactType\"\n       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n
    \     <element name=\"authInfo\" type=\"domain:authInfoType\"/>\n    </sequence>\n
    \  </complexType>\n   <complexType name=\"periodType\">\n    <simpleContent>\n
    \     <extension base=\"domain:pLimitType\">\n        <attribute name=\"unit\"
    type=\"domain:pUnitType\"\n         use=\"required\"/>\n      </extension>\n    </simpleContent>\n
    \  </complexType>\n   <simpleType name=\"pLimitType\">\n    <restriction base=\"unsignedShort\">\n
    \     <minInclusive value=\"1\"/>\n      <maxInclusive value=\"99\"/>\n    </restriction>\n
    \  </simpleType>\n   <simpleType name=\"pUnitType\">\n    <restriction base=\"token\">\n
    \     <enumeration value=\"y\"/>\n      <enumeration value=\"m\"/>\n    </restriction>\n
    \  </simpleType>\n   <complexType name=\"nsType\">\n    <choice>\n      <element
    name=\"hostObj\" type=\"eppcom:labelType\"\n       maxOccurs=\"unbounded\"/>\n
    \     <element name=\"hostAttr\" type=\"domain:hostAttrType\"\n       maxOccurs=\"unbounded\"/>\n
    \   </choice>\n   </complexType>\n   <!--\n   Name servers are either host objects
    or attributes.\n   -->\n   <complexType name=\"hostAttrType\">\n    <sequence>\n
    \     <element name=\"hostName\" type=\"eppcom:labelType\"/>\n      <element name=\"hostAddr\"
    type=\"host:addrType\"\n       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n    </sequence>\n
    \  </complexType>\n   <!--\n   If attributes, addresses are optional and follow
    the\n   structure defined in the host mapping.\n   -->\n   <complexType name=\"contactType\">\n
    \   <simpleContent>\n      <extension base=\"eppcom:clIDType\">\n        <attribute
    name=\"type\" type=\"domain:contactAttrType\"/>\n      </extension>\n    </simpleContent>\n
    \  </complexType>\n   <simpleType name=\"contactAttrType\">\n    <restriction
    base=\"token\">\n      <enumeration value=\"admin\"/>\n      <enumeration value=\"billing\"/>\n
    \     <enumeration value=\"tech\"/>\n    </restriction>\n   </simpleType>\n   <complexType
    name=\"authInfoType\">\n    <choice>\n      <element name=\"pw\" type=\"eppcom:pwAuthInfoType\"/>\n
    \     <element name=\"ext\" type=\"eppcom:extAuthInfoType\"/>\n    </choice>\n
    \  </complexType>\n   <!--\n   Child element of commands that require a single
    name.\n   -->\n   <complexType name=\"sNameType\">\n    <sequence>\n      <element
    name=\"name\" type=\"eppcom:labelType\"/>\n    </sequence>\n   </complexType>\n
    \  <!--\n   Child element of commands that accept multiple names.\n   -->\n   <complexType
    name=\"mNameType\">\n    <sequence>\n      <element name=\"name\" type=\"eppcom:labelType\"\n
    \      maxOccurs=\"unbounded\"/>\n    </sequence>\n   </complexType>\n   <!--\n
    \  Child elements of the <info> command.\n   -->\n   <complexType name=\"infoType\">\n
    \   <sequence>\n      <element name=\"name\" type=\"domain:infoNameType\"/>\n
    \     <element name=\"authInfo\" type=\"domain:authInfoType\"\n       minOccurs=\"0\"/>\n
    \   </sequence>\n   </complexType>\n   <complexType name=\"infoNameType\">\n    <simpleContent>\n
    \     <extension base = \"eppcom:labelType\">\n        <attribute name=\"hosts\"
    type=\"domain:hostsType\"\n         default=\"all\"/>\n      </extension>\n    </simpleContent>\n
    \  </complexType>\n   <simpleType name=\"hostsType\">\n    <restriction base=\"token\">\n
    \     <enumeration value=\"all\"/>\n      <enumeration value=\"del\"/>\n      <enumeration
    value=\"none\"/>\n      <enumeration value=\"sub\"/>\n    </restriction>\n   </simpleType>\n
    \  <!--\n   Child elements of the <renew> command.\n   -->\n   <complexType name=\"renewType\">\n
    \   <sequence>\n      <element name=\"name\" type=\"eppcom:labelType\"/>\n      <element
    name=\"curExpDate\" type=\"date\"/>\n      <element name=\"period\" type=\"domain:periodType\"\n
    \      minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n   <!--\n   Child
    elements of the <transfer> command.\n   -->\n   <complexType name=\"transferType\">\n
    \   <sequence>\n      <element name=\"name\" type=\"eppcom:labelType\"/>\n      <element
    name=\"period\" type=\"domain:periodType\"\n       minOccurs=\"0\"/>\n      <element
    name=\"authInfo\" type=\"domain:authInfoType\"\n       minOccurs=\"0\"/>\n    </sequence>\n
    \  </complexType>\n   <!--\n   Child elements of the <update> command.\n   -->\n
    \  <complexType name=\"updateType\">\n    <sequence>\n      <element name=\"name\"
    type=\"eppcom:labelType\"/>\n      <element name=\"add\" type=\"domain:addRemType\"\n
    \      minOccurs=\"0\"/>\n      <element name=\"rem\" type=\"domain:addRemType\"\n
    \      minOccurs=\"0\"/>\n      <element name=\"chg\" type=\"domain:chgType\"\n
    \      minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n   <!--\n   Data
    elements that can be added or removed.\n   -->\n   <complexType name=\"addRemType\">\n
    \   <sequence>\n      <element name=\"ns\" type=\"domain:nsType\"\n       minOccurs=\"0\"/>\n
    \     <element name=\"contact\" type=\"domain:contactType\"\n       minOccurs=\"0\"
    maxOccurs=\"unbounded\"/>\n      <element name=\"status\" type=\"domain:statusType\"\n
    \      minOccurs=\"0\" maxOccurs=\"11\"/>\n    </sequence>\n   </complexType>\n
    \  <!--\n   Data elements that can be changed.\n   -->\n   <complexType name=\"chgType\">\n
    \   <sequence>\n      <element name=\"registrant\" type=\"domain:clIDChgType\"\n
    \      minOccurs=\"0\"/>\n      <element name=\"authInfo\" type=\"domain:authInfoChgType\"\n
    \      minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n   <!--\n   Allow
    the registrant value to be nullified by changing the\n   minLength restriction
    to \"0\".\n   -->\n   <simpleType name=\"clIDChgType\">\n    <restriction base=\"token\">\n
    \     <minLength value=\"0\"/>\n      <maxLength value=\"16\"/>\n    </restriction>\n
    \  </simpleType>\n   <!--\n   Allow the authInfo value to be nullified by including
    an\n   empty element within the choice.\n   -->\n   <complexType name=\"authInfoChgType\">\n
    \   <choice>\n      <element name=\"pw\" type=\"eppcom:pwAuthInfoType\"/>\n      <element
    name=\"ext\" type=\"eppcom:extAuthInfoType\"/>\n      <element name=\"null\"/>\n
    \   </choice>\n   </complexType>\n   <!--\n   Child response elements.\n   -->\n
    \  <element name=\"chkData\" type=\"domain:chkDataType\"/>\n   <element name=\"creData\"
    type=\"domain:creDataType\"/>\n   <element name=\"infData\" type=\"domain:infDataType\"/>\n
    \  <element name=\"panData\" type=\"domain:panDataType\"/>\n   <element name=\"renData\"
    type=\"domain:renDataType\"/>\n   <element name=\"trnData\" type=\"domain:trnDataType\"/>\n
    \  <!--\n   <check> response elements.\n   -->\n   <complexType name=\"chkDataType\">\n
    \   <sequence>\n      <element name=\"cd\" type=\"domain:checkType\"\n       maxOccurs=\"unbounded\"/>\n
    \   </sequence>\n   </complexType>\n   <complexType name=\"checkType\">\n    <sequence>\n
    \     <element name=\"name\" type=\"domain:checkNameType\"/>\n      <element name=\"reason\"
    type=\"eppcom:reasonType\"\n       minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n
    \  <complexType name=\"checkNameType\">\n    <simpleContent>\n      <extension
    base=\"eppcom:labelType\">\n        <attribute name=\"avail\" type=\"boolean\"\n
    \        use=\"required\"/>\n      </extension>\n    </simpleContent>\n   </complexType>\n
    \  <!--\n   <create> response elements.\n   -->\n   <complexType name=\"creDataType\">\n
    \   <sequence>\n      <element name=\"name\" type=\"eppcom:labelType\"/>\n      <element
    name=\"crDate\" type=\"dateTime\"/>\n      <element name=\"exDate\" type=\"dateTime\"\n
    \      minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n   <!--\n   <info>
    response elements.\n   -->\n   <complexType name=\"infDataType\">\n    <sequence>\n
    \     <element name=\"name\" type=\"eppcom:labelType\"/>\n      <element name=\"roid\"
    type=\"eppcom:roidType\"/>\n      <element name=\"status\" type=\"domain:statusType\"\n
    \      minOccurs=\"0\" maxOccurs=\"11\"/>\n      <element name=\"registrant\"
    type=\"eppcom:clIDType\"\n       minOccurs=\"0\"/>\n      <element name=\"contact\"
    type=\"domain:contactType\"\n       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n
    \     <element name=\"ns\" type=\"domain:nsType\"\n       minOccurs=\"0\"/>\n
    \     <element name=\"host\" type=\"eppcom:labelType\"\n       minOccurs=\"0\"
    maxOccurs=\"unbounded\"/>\n      <element name=\"clID\" type=\"eppcom:clIDType\"/>\n
    \     <element name=\"crID\" type=\"eppcom:clIDType\"\n       minOccurs=\"0\"/>\n
    \     <element name=\"crDate\" type=\"dateTime\"\n       minOccurs=\"0\"/>\n      <element
    name=\"upID\" type=\"eppcom:clIDType\"\n       minOccurs=\"0\"/>\n      <element
    name=\"upDate\" type=\"dateTime\"\n       minOccurs=\"0\"/>\n      <element name=\"exDate\"
    type=\"dateTime\"\n       minOccurs=\"0\"/>\n      <element name=\"trDate\" type=\"dateTime\"\n
    \      minOccurs=\"0\"/>\n      <element name=\"authInfo\" type=\"domain:authInfoType\"\n
    \      minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n   <!--\n   Status
    is a combination of attributes and an optional\n   human-readable message that
    may be expressed in languages other\n   than English.\n   -->\n   <complexType
    name=\"statusType\">\n    <simpleContent>\n      <extension base=\"normalizedString\">\n
    \       <attribute name=\"s\" type=\"domain:statusValueType\"\n         use=\"required\"/>\n
    \       <attribute name=\"lang\" type=\"language\"\n         default=\"en\"/>\n
    \     </extension>\n    </simpleContent>\n   </complexType>\n   <simpleType name=\"statusValueType\">\n
    \   <restriction base=\"token\">\n      <enumeration value=\"clientDeleteProhibited\"/>\n
    \     <enumeration value=\"clientHold\"/>\n      <enumeration value=\"clientRenewProhibited\"/>\n
    \     <enumeration value=\"clientTransferProhibited\"/>\n      <enumeration value=\"clientUpdateProhibited\"/>\n
    \     <enumeration value=\"inactive\"/>\n      <enumeration value=\"ok\"/>\n      <enumeration
    value=\"pendingCreate\"/>\n      <enumeration value=\"pendingDelete\"/>\n      <enumeration
    value=\"pendingRenew\"/>\n      <enumeration value=\"pendingTransfer\"/>\n      <enumeration
    value=\"pendingUpdate\"/>\n      <enumeration value=\"serverDeleteProhibited\"/>\n
    \     <enumeration value=\"serverHold\"/>\n      <enumeration value=\"serverRenewProhibited\"/>\n
    \     <enumeration value=\"serverTransferProhibited\"/>\n      <enumeration value=\"serverUpdateProhibited\"/>\n
    \   </restriction>\n   </simpleType>\n   <!--\n   Pending action notification
    response elements.\n   -->\n   <complexType name=\"panDataType\">\n    <sequence>\n
    \     <element name=\"name\" type=\"domain:paNameType\"/>\n      <element name=\"paTRID\"
    type=\"epp:trIDType\"/>\n      <element name=\"paDate\" type=\"dateTime\"/>\n
    \   </sequence>\n   </complexType>\n   <complexType name=\"paNameType\">\n    <simpleContent>\n
    \     <extension base=\"eppcom:labelType\">\n        <attribute name=\"paResult\"
    type=\"boolean\"\n         use=\"required\"/>\n      </extension>\n    </simpleContent>\n
    \  </complexType>\n   <!--\n   <renew> response elements.\n   -->\n   <complexType
    name=\"renDataType\">\n   <sequence>\n    <element name=\"name\" type=\"eppcom:labelType\"/>\n
    \   <element name=\"exDate\" type=\"dateTime\"\n     minOccurs=\"0\"/>\n   </sequence>\n
    \  </complexType>\n   <!--\n   <transfer> response elements.\n   -->\n   <complexType
    name=\"trnDataType\">\n   <sequence>\n    <element name=\"name\" type=\"eppcom:labelType\"/>\n
    \   <element name=\"trStatus\" type=\"eppcom:trStatusType\"/>\n    <element name=\"reID\"
    type=\"eppcom:clIDType\"/>\n    <element name=\"reDate\" type=\"dateTime\"/>\n
    \   <element name=\"acID\" type=\"eppcom:clIDType\"/>\n    <element name=\"acDate\"
    type=\"dateTime\"/>\n    <element name=\"exDate\" type=\"dateTime\"\n     minOccurs=\"0\"/>\n
    \  </sequence>\n   </complexType>\n   <!--\n   End of schema.\n   -->\n   </schema>\n
    \  END\n"
  title: 4.  Formal Syntax
- contents:
  - "5.  Internationalization Considerations\n   EPP is represented in XML, which
    provides native support for encoding\n   information using the Unicode character
    set and its more compact\n   representations including UTF-8.  Conformant XML
    processors recognize\n   both UTF-8 and UTF-16 [RFC2781].  Though XML includes
    provisions to\n   identify and use other character encodings through use of an\n
    \  \"encoding\" attribute in an <?xml?> declaration, use of UTF-8 is\n   RECOMMENDED
    in environments where parser encoding support\n   incompatibility exists.\n   All
    date-time values presented via EPP MUST be expressed in Universal\n   Coordinated
    Time using the Gregorian calendar.  XML Schema allows use\n   of time zone identifiers
    to indicate offsets from the zero meridian,\n   but this option MUST NOT be used
    with EPP.  The extended date-time\n   form using upper case \"T\" and \"Z\" characters,
    defined in\n   [W3C.REC-xmlschema-2-20041028], MUST be used to represent date-time\n
    \  values, as XML Schema does not support truncated date-time forms or\n   lower
    case \"T\" and \"Z\" characters.\n   This document requires domain and host name
    syntax as specified in\n   [RFC0952] as updated by [RFC1123].  At the time of
    this writing, RFC\n   3490 [RFC3490] describes a standard to use certain ASCII
    name labels\n   to represent non-ASCII name labels.  These conformance requirements\n
    \  might change as a result of progressing work in developing standards\n   for
    internationalized domain names.\n"
  title: 5.  Internationalization Considerations
- contents:
  - "6.  IANA Considerations\n   This document uses URNs to describe XML namespaces
    and XML schemas\n   conforming to a registry mechanism described in [RFC3688].
    \ Two URI\n   assignments have been registered by the IANA.\n   Registration request
    for the domain namespace:\n      URI: urn:ietf:params:xml:ns:domain-1.0\n      Registrant
    Contact: See the \"Author's Address\" section of this\n      document.\n      XML:
    None.  Namespace URIs do not represent an XML specification.\n   Registration
    request for the domain XML schema:\n      URI: urn:ietf:params:xml:schema:domain-1.0\n
    \     Registrant Contact: See the \"Author's Address\" section of this\n      document.\n
    \     XML: See the \"Formal Syntax\" section of this document.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Authorization information as described in Section
    2.6 is REQUIRED to\n   create a domain object.  This information is used in some
    query and\n   transfer operations as an additional means of determining client\n
    \  authorization to perform the command.  Failure to protect\n   authorization
    information from inadvertent disclosure can result in\n   unauthorized transfer
    operations and unauthorized information\n   release.  Both client and server MUST
    ensure that authorization\n   information is stored and exchanged with high-grade
    encryption\n   mechanisms to provide privacy services.\n   The object mapping
    described in this document does not provide any\n   other security services or
    introduce any additional considerations\n   beyond those described by [RFC5730]
    or those caused by the protocol\n   layers used by EPP.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   RFC 3731 is a product of the PROVREG working group,
    which suggested\n   improvements and provided many invaluable comments.  The author\n
    \  wishes to acknowledge the efforts of WG chairs Edward Lewis and Jaap\n   Akkerhuis
    for their process and editorial contributions.  RFC 4931\n   and this document
    are individual submissions, based on the work done\n   in RFC 3731.\n   Specific
    suggestions that have been incorporated into this document\n   were provided by
    Joe Abley, Chris Bason, Eric Brunner-Williams,\n   Jordyn Buchanan, Dave Crocker,
    Ayesha Damaraju, Anthony Eden, Sheer\n   El-Showk, Klaus Malorny, Dan Manley,
    Michael Mealling, Patrick\n   Mevzek, Asbjorn Steira, Bruce Tonkin, and Rick Wesson.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC0952]  Harrenstien, K., Stahl, M., and E.
      Feinler, \"DoD Internet\n              host table specification\", RFC 952,
      October 1985.\n   [RFC1123]  Braden, R., \"Requirements for Internet Hosts -
      Application\n              and Support\", STD 3, RFC 1123, October 1989.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3688]  Mealling, M., \"The IETF
      XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n   [RFC5730]
      \ Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n              STD
      69, RFC 5730, August 2009.\n   [RFC5732]  Hollenbeck, S., \"Extensible Provisioning
      Protocol (EPP)\n              Host Mapping\", STD 69, RFC 5732, August 2009.\n
      \  [RFC5733]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Contact
      Mapping\", STD 69, RFC 5733, August 2009.\n   [W3C.REC-xml-20040204]\n              Sperberg-McQueen,
      C., Maler, E., Yergeau, F., Paoli, J.,\n              and T. Bray, \"Extensible
      Markup Language (XML) 1.0 (Third\n              Edition)\", World Wide Web Consortium
      FirstEdition REC-xml-\n              20040204, February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-20040204>.\n
      \  [W3C.REC-xmlschema-1-20041028]\n              Maloney, M., Thompson, H.,
      Mendelsohn, N., and D. Beech,\n              \"XML Schema Part 1: Structures
      Second Edition\", World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n
      \             October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n
      \  [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron,
      \"XML Schema Part 2: Datatypes\n              Second Edition\", World Wide Web
      Consortium\n              Recommendation REC-xmlschema-2-20041028, October 2004,\n
      \             <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2781]  Hoffman, P. and F. Yergeau, \"UTF-16,
      an encoding of ISO\n              10646\", RFC 2781, February 2000.\n   [RFC3490]
      \ Faltstrom, P., Hoffman, P., and A. Costello,\n              \"Internationalizing
      Domain Names in Applications (IDNA)\",\n              RFC 3490, March 2003.\n
      \  [RFC4931]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Domain
      Name Mapping\", RFC 4931, May 2007.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Changes from RFC 4931\n   1.   Changed \"This document obsoletes
    RFC 3731\" to \"This document\n        obsoletes RFC 4931\".\n   2.   Replaced
    references to RFC 3731 with references to 4931.\n   3.   Replaced references to
    RFC 4930 with references to 5730.\n   4.   Replaced references to RFC 4932 with
    references to 5732.\n   5.   Replaced references to RFC 4933 with references to
    5733.\n   6.   Updated description of inactive status in Section 2.3.\n   7.   Fixed
    example host names in the Section 1.1 and Section 3.2.1\n        examples.\n   8.
    \  Changed \"but such methods SHOULD NOT be used\" to \"but such\n        methods
    should not be used\" in Section 2.7.\n   9.   Added \"Other notification methods
    MAY be used in addition to the\n        required service message\" in Section
    3.2.\n   10.  Added 2201 response code text in Section 3.2.\n   11.  Added BSD
    license text to XML schema section.\n"
  title: Appendix A.  Changes from RFC 4931
- contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n
    \  Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
  title: Author's Address
