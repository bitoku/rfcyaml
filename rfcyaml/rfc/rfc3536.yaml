- title: __initial_text__
  contents:
  - '          Terminology Used in Internationalization in the IETF

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a glossary of terms used in the IETF when\n\
    \   discussing internationalization.  The purpose is to help frame\n   discussions\
    \ of internationalization in the various areas of the IETF\n   and to help introduce\
    \ the main concepts to IETF participants.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction...................................................\
    \  2\n     1.1 Purpose of this document....................................  2\n\
    \     1.2 Format of the definitions in this document..................  3\n  \
    \ 2. Fundamental Terms..............................................  3\n   3.\
    \ Standards Bodies and Standards.................................  8\n     3.1\
    \ Standards bodies............................................  8\n     3.2 Encodings\
    \ and transformation formats of ISO/IEC 10646....... 10\n     3.3 Native CCSs\
    \ and charsets.................................... 11\n   4. Character Issues...............................................\
    \ 12\n     4.1 Types of characters......................................... 15\n\
    \   5. User interface for text........................................ 17\n  \
    \ 6. Text in current IETF protocols................................. 19\n   7.\
    \ Other Common Terms In Internationalization..................... 22\n   8. Security\
    \ Considerations........................................ 25\n   9. References.....................................................\
    \ 25\n     9.1 Normative References........................................ 25\n\
    \     9.2 Informative References...................................... 26\n  \
    \ 10. Additional Interesting Reading................................ 27\n   11.\
    \ Index......................................................... 27\n   A. Acknowledgements...............................................\
    \ 29\n   B. Author's Address............................................... 29\n\
    \   Full Copyright Statement.......................................... 30\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   As [RFC2277] summarizes: \"Internationalization is for humans.\
    \  This\n   means that protocols are not subject to internationalization; text\n\
    \   strings are.\" Many protocols throughout the IETF use text strings\n   that\
    \ are entered by, or are visible to, humans.  It should be\n   possible for anyone\
    \ to enter or read these text strings, which means\n   that Internet users must\
    \ be able to be enter text in typical input\n   methods and displayed in any human\
    \ language.  Further, text\n   containing any character should be able to be passed\
    \ between Internet\n   applications easily.  This is the challenge of internationalization.\n"
- title: 1.1 Purpose of this document
  contents:
  - "1.1 Purpose of this document\n   This document provides a glossary of terms used\
    \ in the IETF when\n   discussing internationalization.  The purpose is to help\
    \ frame\n   discussions of internationalization in the various areas of the IETF\n\
    \   and to help introduce the main concepts to IETF participants.\n   Internationalization\
    \ is discussed in many working groups of the IETF.\n   However, few working groups\
    \ have internationalization experts.  When\n   designing or updating protocols,\
    \ the question often comes up \"should\n   we internationalize this\" (or, more\
    \ likely, \"do we have to\n   internationalize this\").\n   This document gives\
    \ an overview of internationalization as it applies\n   to IETF standards work\
    \ by lightly covering the many aspects of\n   internationalization and the vocabulary\
    \ associated with those topics.\n   It is not meant to be a complete description\
    \ of internationalization.\n   The definitions in this document are not normative\
    \ for IETF\n   standards; however, they are useful and standards may make\n  \
    \ informative reference to this document after it becomes an RFC.  Some\n   of\
    \ the definitions in this document come from many earlier IETF\n   documents and\
    \ books.\n   As in many fields, there is disagreement in the internationalization\n\
    \   community on definitions for many words.  The topic of language\n   brings\
    \ up particularly passionate opinions for experts and non-\n   experts alike.\
    \  This document attempts to define terms in a way that\n   will be most useful\
    \ to the IETF audience.\n   This document uses definitions from many documents\
    \ that have been\n   developed outside the IETF.  The primary documents used are:\n\
    \      - ISO/IEC 10646 [ISOIEC10646]\n      - The Unicode Standard [UNICODE]\n\
    \      - W3C Character Model [CHARMOD]\n      - IETF RFCs, including [RFC2277]\n"
- title: 1.2 Format of the definitions in this document
  contents:
  - "1.2 Format of the definitions in this document\n   In the body of this document,\
    \ the source for the definition is shown\n   in angle brackets, such as \"<ISOIEC10646>\"\
    .  Many definitions are\n   shown as \"<NONE>\", which means that the definitions\
    \ were crafted\n   originally for this document.  The angle bracket notation for\
    \ the\n   source of definitions is different than the square bracket notation\n\
    \   used for references to documents, such as in the paragraph above;\n   these\
    \ references are given in Section 9.\n   For some terms, there are commentary\
    \ and examples after the\n   definitions.  In those cases, the part before the\
    \ angle brackets is\n   the definition that comes from the original source, and\
    \ the part\n   after the angle brackets is commentary that is not a definition\
    \ (such\n   as examples or further exposition).\n   Examples in this document\
    \ use the notation for code points and names\n   from the Unicode Standard [UNICODE]\
    \ and ISO/IEC 10646 [ISOIEC10646].\n   For example, the letter \"a\" may be represented\
    \ as either \"U+0061\" or\n   \"LATIN SMALL LETTER A\".\n"
- title: 2. Fundamental Terms
  contents:
  - "2. Fundamental Terms\n   This section covers basic topics that are needed for\
    \ almost anyone\n   who is involved with making IETF protocols more friendly to\
    \ non-ASCII\n   text and with other aspects of internationalization.\n   language\n\
    \      A language is a way that humans interact.  The use of language\n      occurs\
    \ in many forms, the most common of which are speech,\n      writing, and signing.\
    \  <NONE>\n      Some languages have a close relationship between the written\
    \ and\n      spoken forms, while others have a looser relationship.  [RFC3066]\n\
    \      discusses languages in more detail and provides identifiers for\n     \
    \ languages for use in Internet protocols.  Note that computer\n      languages\
    \ are explicitly excluded from this definition.\n   script\n      A set of graphic\
    \ characters used for the written form of one or\n      more languages.  <ISOIEC10646>\n\
    \      Examples of scripts are Latin, Cyrillic, Greek, Arabic, and Han\n     \
    \ (the ideographs used in writing Chinese, Japanese, and Korean).\n      [RFC2277]\
    \ discusses scripts in detail.\n      It is common for internationalization novices\
    \ to mix up the terms\n      \"language\" and \"script\".  This can be a problem\
    \ in protocols that\n      differentiate the two.  Almost all protocols that are\
    \ designed (or\n      were re-designed) to handle non-ASCII text deal with scripts\
    \ (the\n      written systems) or characters, while fewer actually deal with\n\
    \      languages.\n      A single name can mean either a language or a script;\
    \ for example,\n      \"Arabic\" is both the name of a language and the name of\
    \ a script.\n      In fact, many scripts borrow their names from the names of\n\
    \      languages.  Further, many scripts are used for many languages; for\n  \
    \    example, the Russian and Bulgarian languages are written in the\n      Cyrillic\
    \ script.  Some languages can be expressed using different\n      scripts; the\
    \ Mongolian language can be written in either the\n      Mongolian and Cyrillic\
    \ scripts, and the Serbo-Croatian language is\n      written using both the Latin\
    \ and Cyrillic scripts.  Further, some\n      languages are normally expressed\
    \ with more than one script at the\n      same time; for example, the Japanese\
    \ language is normally\n      expressed in the Kanji (Han), Katakana, and Hiragana\
    \ scripts in a\n      single string of text.\n   character\n      A member of\
    \ a set of elements used for the organization, control,\n      or representation\
    \ of data.  <ISOIEC10646>\n      There are at least three common definitions of\
    \ the word\n      \"character\":\n         - a general description of a text entity\n\
    \         - a unit of a writing system, often synonymous with \"letter\" or\n\
    \           similar terms\n         - the encoded entity itself\n      When people\
    \ talk about characters, they are mostly using one of\n      the first two definitions.\n\
    \      A particular character is identified by its name, not by its\n      shape.\
    \  A name may suggest a meaning, but the character may be\n      used for representing\
    \ other meanings as well.  A name may suggest\n      a shape, but that does not\
    \ imply that only that shape is commonly\n      used in print, nor that the particular\
    \ shape is associated only\n      with that name.\n   coded character\n      A\
    \ character together with its coded representation.  <ISOIEC10646>\n   coded character\
    \ set\n      A coded character set (CCS) is a set of unambiguous rules that\n\
    \      establishes a character set and the relationship between the\n      characters\
    \ of the set and their coded representation.\n      <ISOIEC10646>\n   character\
    \ encoding form\n      A character encoding form is a mapping from a character\
    \ set\n      definition to the actual code units used to represent the data.\n\
    \      <UNICODE>\n   repertoire\n      The collection of characters included in\
    \ a character set.  Also\n      called a character repertoire.  <UNICODE>\n  \
    \ glyph\n      A glyph is an abstract form that represents one or more glyph\n\
    \      images.  The term \"glyph\" is often a synonym for glyph image,\n     \
    \ which is the actual, concrete image of a glyph representation\n      having\
    \ been rasterized or otherwise imaged onto some display\n      surface.  In displaying\
    \ character data, one or more glyphs may be\n      selected to depict a particular\
    \ character.  These glyphs are\n      selected by a rendering engine during composition\
    \ and layout\n      processing. <UNICODE>\n   glyph code\n      A glyph code is\
    \ a numeric code that refers to a glyph.  Usually,\n      the glyphs contained\
    \ in a font are referenced by their glyph code.\n      Glyph codes are local to\
    \ a particular font; that is, a different\n      font containing the same glyphs\
    \ may use different codes.\n      <UNICODE>\n   transcoding\n      Transcoding\
    \ is the process of converting text data from one\n      character encoding form\
    \ to another.  Transcoders work only at the\n      level of character encoding\
    \ and do not parse the text.  Note:\n      Transcoding may involve one-to-one,\
    \ many-to-one, one-to-many or\n      many-to-many mappings.  Because some legacy\
    \ mappings are glyphic,\n      they may not only be many-to-many, but also discontinuous:\
    \ thus\n      XYZ may map to yxz.  <CHARMOD>\n      In this definition, \"many-to-one\"\
    \ means a sequence of characters\n      mapped to a single character.  The \"\
    many\" does not mean\n      alternative characters that map to the single character.\n\
    \   character encoding scheme\n      A character encoding scheme (CES) is a character\
    \ encoding form\n      plus byte serialization.  There are many character encoding\n\
    \      schemes in Unicode, such as UTF-8 and UTF-16.  <UNICODE>\n      Some CESs\
    \ are associated with a single CCS; for example, UTF-8\n      [RFC2279] applies\
    \ only to ISO/IEC 10646.  Other CESs, such as ISO\n      2022, are associated\
    \ with many CCSs.\n   charset\n      A charset is a method of mapping a sequence\
    \ of octets to a\n      sequence of abstract characters.  A charset is, in effect,\
    \ a\n      combination of one or more CCSs with a CES.  Charset names are\n  \
    \    registered by the IANA according to procedures documented in\n      [RFC2278].\
    \  <NONE>\n      Many protocol definitions use the term \"character set\" in their\n\
    \      descriptions.  The terms \"charset\" or \"character encoding scheme\"\n\
    \      are strongly preferred over the term \"character set\" because\n      \"\
    character set\" has other definitions in other contexts and this\n      can be\
    \ confusing.\n   internationalization\n      In the IETF, \"internationalization\"\
    \ means to add or improve the\n      handling of non-ASCII text in a protocol.\
    \  <NONE>\n      Many protocols that handle text only handle one script (often,\
    \ the\n      one that contains the letters used in English text), or leave the\n\
    \      question of what character set is used up to local guesswork\n      (which\
    \ leads, of course, to interoperability problems).  Adding\n      non-ASCII text\
    \ to such a protocol allows the protocol to handle\n      more scripts, hopefully\
    \ all of the ones useful in the world.\n   localization\n      The process of\
    \ adapting an internationalized application platform\n      or application to\
    \ a specific cultural environment.  In\n      localization, the same semantics\
    \ are preserved while the syntax\n      may be changed.  [FRAMEWORK]\n      Localization\
    \ is the act of tailoring an application for a\n      different language or script\
    \ or culture.  Some internationalized\n      applications can handle a wide variety\
    \ of languages.  Typical\n      users only understand a small number of languages,\
    \ so the program\n      must be tailored to interact with users in just the languages\
    \ they\n      know.\n      The major work of localization is translating the user\
    \ interface\n      and documentation.  Localization involves not only changing\
    \ the\n      language interaction, but also other relevant changes such as\n \
    \     display of numbers, dates, currency, and so on.  The better\n      internationalized\
    \ an application is, the easier it is to localize\n      it for a particular language\
    \ and character encoding scheme.\n      Localization is rarely an IETF matter,\
    \ and protocols that are\n      merely localized, even if they are serially localized\
    \ for several\n      locations, are generally considered unsatisfactory for the\
    \ global\n      Internet.\n      Do not confuse \"localization\" with \"locale\"\
    , which is described in\n      Section 7 of this document.\n   i18n, l10n\n  \
    \    These are abbreviations for \"internationalization\" and\n      \"localization\"\
    .  <NONE>\n      \"18\" is the number of characters between the \"i\" and the\
    \ \"n\" in\n      \"internationalization\", and \"10\" is the number of characters\n\
    \      between the \"l\" and the \"n\" in \"localization\".\n   multilingual\n\
    \      The term \"multilingual\" has many widely-varying definitions and\n   \
    \   thus is not recommended for use in standards.  Some of the\n      definitions\
    \ relate to the ability to handle international\n      characters; other definitions\
    \ relate to the ability to handle\n      multiple charsets; and still others relate\
    \ to the ability to\n      handle multiple languages.  <NONE>\n   displaying and\
    \ rendering text\n      To display text, a system puts characters on a visual\
    \ display\n      device such as a screen or a printer.  To render text, a system\n\
    \      analyzes the character input to determine how to display the text.\n  \
    \    The terms \"display\" and \"render\" are sometimes used\n      interchangeably.\
    \  Note, however,  that text might be rendered as\n      audio and/or tactile\
    \ output, such as in systems that have been\n      designed for people with visual\
    \ disabilities.  <NONE>\n      Combining characters modify the display of the\
    \ character (or, in\n      some cases, characters) that precede them.  When rendering\
    \ such\n      text, the display engine must either find the glyph in the font\n\
    \      that represents the base character and all of the combining\n      characters,\
    \ or it must render the combination itself.  Such\n      rendering can be straight-forward,\
    \ but it is sometimes complicated\n      when the combining marks interact with\
    \ each other, such as when\n      there are two combining marks that would appear\
    \ above the same\n      character.  Formatting characters can also change the\
    \ way that a\n      renderer would display text.  Rendering can also be difficult\
    \ for\n      some scripts that have complex display rules for base characters,\n\
    \      such as Arabic and Indic scripts.\n"
- title: 3. Standards Bodies and Standards
  contents:
  - "3. Standards Bodies and Standards\n   This section describes some of the standards\
    \ bodies and standards\n   that appear in discussions of internationalization\
    \ in the IETF.  This\n   is an incomplete and possibly over-full list; listing\
    \ too few bodies\n   or standards can be just as politically dangerous as listing\
    \ too\n   many.  Note that there are many other bodies that deal with\n   internationalization;\
    \ however, few if any of them appear commonly in\n   IETF standards work.\n"
- title: 3.1 Standards bodies
  contents:
  - "3.1 Standards bodies\n   ISO\n      The International Organization for Standardization\
    \ has been\n      involved with standards for characters since before the IETF\
    \ was\n      started. ISO is a non-governmental group made up of national\n  \
    \    bodies.  ISO has many diverse standards in the international\n      characters\
    \ area; the one that is most used in the IETF is commonly\n      referred to as\
    \ \"ISO/IEC 10646\", although its official name has\n      more qualifications.\
    \  (The IEC is International Electrotechnical\n      Commission).  ISO/IEC 10646\
    \ describes a CCS that covers almost all\n      known written characters in use\
    \ today.\n      ISO/IEC 10646 is controlled by the group known as \"ISO/IEC JTC\n\
    \      1/SC 2 WG2\", often called \"WG2\" for short.  ISO standards go\n     \
    \ through many steps before being finished, and years often go by\n      between\
    \ changes to ISO/IEC 10646.  Information on WG2, and its\n      work products,\
    \ can be found at\n      <http://www.dkuug.dk/JTC1/SC2/WG2/>.\n      The standard,\
    \ which comes in multiple parts, can be purchased in\n      both print and CD-ROM\
    \ versions.  One example of how to cite the\n      standard is given in [RFC2279].\
    \  Any standard that cites ISO/IEC\n      10646 needs to evaluate how to handle\
    \ the versioning problem that\n      is relevant to the protocol's needs.\n  \
    \    ISO is responsible for other standards that might be of interest\n      to\
    \ protocol developers.  [ISO 639] specifies the names of\n      languages, and\
    \ [ISO 3166] specifies the abbreviations of\n      countries.  Character work\
    \ is done in the group known as ISO/IEC\n      JTC1/SC22 and ISO TC46, as well\
    \ as other ISO groups.\n      Another relevant ISO group is JTC 1/SC22/WG20, which\
    \ is\n      responsible for internationalization in JTC1, such as for\n      international\
    \ string ordering.  Information on WG20, and its work\n      products, can be\
    \ found at <http://www.dkuug.dk/jtc1/sc22/wg20/>\n   Unicode Consortium\n    \
    \  The second important group for international character standards\n      is\
    \ the Unicode Consortium.  The Unicode Consortium is a trade\n      association\
    \ of companies, governments, and other groups interested\n      in promoting the\
    \ Unicode Standard [UNICODE].  The Unicode Standard\n      is a CCS whose repertoire\
    \ and code points are identical to ISO/IEC\n      10646.  The Unicode Consortium\
    \ has added features to the base CCS\n      which make it more useful in protocols,\
    \ such as defining\n      attributes for each character.  Examples of these attributes\n\
    \      include case conversion and numeric properties.\n      The Unicode Consortium\
    \ publishes addenda to the Unicode Standard\n      as Unicode Technical Reports.\
    \  There are many types of technical\n      reports at various stages of maturity.\
    \  The Unicode Standard and\n      affiliated technical reports can be found at\n\
    \      <http://www.unicode.org/>.\n   World Wide Web Consortium (W3C)\n      This\
    \ group created and maintains the standard for XML, the markup\n      language\
    \ for text that has become very popular.  XML has always\n      been fully internationalized\
    \ so that there is no need for a new\n      version to handle international text.\n\
    \   local and regional standards organizations\n      Just as there are many native\
    \ CCSs and charsets, there are many\n      local and regional standards organizations\
    \ to create and support\n      them.  Common examples of these are ANSI (United\
    \ States), and\n      CEN/ISSS (Europe).\n"
- title: 3.2 Encodings and transformation formats of ISO/IEC 10646
  contents:
  - "3.2 Encodings and transformation formats of ISO/IEC 10646\n   Characters in the\
    \ ISO/IEC 10646 CCS can be expressed in many ways.\n   Encoding forms are direct\
    \ addressing methods, while transformation\n   formats are methods for expressing\
    \ encoding forms as bits on the\n   wire.\n   Basic Multilingual Plane (BMP)\n\
    \      The BMP is composed of the first 2^16 code points in ISO/IEC\n      10646.\
    \  The BMP is also called \"plane 0\".\n   UCS-2 and UCS-4\n      UCS-2 and UCS-4\
    \ are the two encoding forms defined for ISO/IEC\n      10646.  UCS-2 addresses\
    \ only the BMP.  Because many useful\n      characters (such as many Han characters)\
    \ have been defined outside\n      of the BMP, many people would consider UCS-2\
    \ to be dead.\n      Theoretically, UCS-4 addresses the entire range of 2^31 code\n\
    \      points from ISO/IEC 10646 as 32-bit values.  However, for\n      interoperability\
    \ with UTF-16, ISO 10646 restricts the range of\n      characters that will actually\
    \ be allocated to the values\n      0..0x10FFFF.\n   UTF-8\n      UTF-8, a transformation\
    \ format specified in [RFC2279], is the\n      preferred encoding for IETF protocols.\
    \  Characters in the BMP are\n      encoded as one, two, or three octets.  Characters\
    \ outside the BMP\n      are encoded as four octets.  Characters from the US-ASCII\n\
    \      repertoire have the same on-the-wire representation in UTF-8 as\n     \
    \ they do in US-ASCII.\n   UTF-16, UTF-16BE, and UTF-16LE\n      UTF-16, UTF-16BE,\
    \ and UTF-16LE, three transformation formats\n      defined in [RFC2781], are\
    \ not required by any IETF standards, and\n      are thus used much less often\
    \ than UTF-8.  Characters in the BMP\n      are always encoded as two octets,\
    \ and characters outside the BMP\n      are encoded as four octets.  The three\
    \ formats differ based on the\n      order of the octets and the presence of a\
    \ special lead-in mark\n      called the \"byte order mark\" or \"BOM\".\n   UTF-32\n\
    \      The Unicode Consortium has defined UTF-32 as a transformation\n      format\
    \ for UCS-4 in [UTR19].\n   SCSU and BOCU-1\n      The Unicode Consortium has\
    \ defined an encoding, SCSU, which is\n      designed to offer good compression\
    \ for typical text.  SCSU is\n      described in [UTR6].  A different encoding\
    \ that is meant to be\n      MIME-friendly, BOCU-1, is described in [UTN6].  Although\n\
    \      compression is attractive, as opposed to UTF-8 , neither of these\n   \
    \   (at the time of this writing) has attracted much interest in the\n      IETF.\n"
- title: 3.3 Native CCSs and charsets
  contents:
  - "3.3 Native CCSs and charsets\n   Before ISO/IEC 10646 was developed, many countries\
    \ developed their\n   own CCSs and charsets.  Many dozen of these are in common\
    \ use on the\n   Internet today.  Examples include ISO 8859-5 for Cyrillic and\
    \ Shift-\n   JIS for Japanese scripts.\n   The official list of the registered\
    \ charset names for use with IETF\n   protocols is maintained by IANA and can\
    \ be found at\n   <http://www.iana.org/assignments/character-sets>.  The list\
    \ contains\n   preferred names and aliases.  Note that this list has historically\n\
    \   contained many errors, such as names that are in fact not charsets or\n  \
    \ references that do not give enough detail to reliably map names to\n   charsets.\n\
    \   Probably the most well-known native CCS is ASCII [US-ASCII].  This\n   CCS\
    \ is used as the basis for keywords and parameter names in many\n   IETF protocols,\
    \ and as the sole CCS in numerous IETF protocols that\n   have not yet been internationalized.\n\
    \   [UTR22] describes issues involved in mapping character data between\n   charsets,\
    \ and an XML format for mapping table data.\n"
- title: 4. Character Issues
  contents:
  - "4. Character Issues\n   This section contains terms and topics that are commonly\
    \ used in\n   character handling and therefore are of concern to people adding\n\
    \   non-ASCII text handling to protocols.  These topics are standardized\n   outside\
    \ the IETF.\n   combining character\n      A member of an identified subset of\
    \ the coded character set of\n      ISO/IEC 10646 intended for combination with\
    \ the preceding non-\n      combining graphic character, or with a sequence of\
    \ combining\n      characters preceded by a non-combining character.  <ISOIEC10646>\n\
    \   composite sequence\n      A sequence of graphic characters consisting of a\
    \ non-combining\n      character followed by one or more combining characters.\
    \  A graphic\n      symbol for a composite sequence generally consists of the\n\
    \      combination of the graphic symbols of each character in the\n      sequence.\
    \  A composite sequence is not a character and therefore\n      is not a member\
    \ of the repertoire of ISO/IEC 10646.  <ISOIEC10646>\n      In some CCSs, some\
    \ characters consist of combinations of other\n      characters.  For example,\
    \ the letter \"a with acute\" might be a\n      combination of the two characters\
    \ \"a\" and \"combining acute\", or it\n      might be a combination of the three\
    \ characters \"a\", a non-\n      destructive backspace, and an acute.  The rules\
    \ for combining two\n      or more characters are called \"composition rules\"\
    , and the rules\n      for taking apart a character into other characters is called\n\
    \      \"decomposition rules\".  The results of composition is called a\n    \
    \  \"precomposed character\"; the results of decomposition is called a\n     \
    \ \"decomposed character\".\n   normalization\n      Normalization is the transformation\
    \ of data to a normal form, for\n      example, to unify spelling.  <UNICODE>\n\
    \      Note that the phrase \"unify spelling\" in the definition above does\n\
    \      not mean unifying different words with the same meaning (such as\n    \
    \  \"color\" and \"colour\").  Instead, it means unifying different\n      character\
    \ sequences that are intended to form the same composite\n      characters (such\
    \ as \"<a><n><combining tilde><o>\" and \"<a><n with\n      tilde><o>\").\n  \
    \    The purpose of normalization is to allow two strings to be\n      compared\
    \ for equivalence.  The strings \"<a><n><combining\n      tilde><o>\" and \"<a><n\
    \ with tilde><o>\" would be shown identically\n      on a text display device.\
    \  If a protocol designer wants those two\n      strings to be considered equivalent\
    \ during comparison, the\n      protocol must define where normalization occurs.\n\
    \      The terms \"normalization\" and \"canonicalization\" are often used\n \
    \     interchangeably.  Generally, they both mean to convert a string of\n   \
    \   one or more characters into another string based on standardized\n      rules.\
    \  Some CCSs allow multiple equivalent representations for a\n      written string;\
    \ normalization selects one among multiple\n      equivalent representations as\
    \ a base for reference purposes in\n      comparing strings.  In strings of text,\
    \ these rules are usually\n      based on decomposing combined characters or composing\
    \ characters\n      with combining characters.  [UTR15] describes the process\
    \ and many\n      forms of normalization in detail.  Normalization is important\
    \ when\n      comparing strings to see if they are the same.\n   case\n      Case\
    \ is the feature of certain alphabets where the letters have\n      two distinct\
    \ forms.  These variants, which may differ markedly in\n      shape and size,\
    \ are called the uppercase letter (also known as\n      capital or majuscule)\
    \ and the lowercase letter (also known as\n      small or minuscule).  Case mapping\
    \ is the association of the\n      uppercase and lowercase forms of a letter.\
    \  <UNICODE>\n      There is usually (but not always) a one-to-one mapping between\
    \ the\n      same letter in the two cases.  However, there are many examples of\n\
    \      characters which exist in one case but for which there is no\n      corresponding\
    \ character in the other case or for which there is a\n      special mapping rule,\
    \ such as the Turkish dotless \"i\" and some\n      Greek characters with modifiers.\
    \  Case mapping can even be\n      dependent on locale.  Converting text to have\
    \ only one case is\n      called \"case folding\".\n   sorting and collation\n\
    \      Collating is the process of ordering units of textual information.\n  \
    \    Collation is usually specific to a particular language.  It is\n      sometimes\
    \ known as alphabetizing, although alphabetization is just\n      a special case\
    \ of sorting and collation.  <UNICODE>\n      Collation is concerned with the\
    \ determination of the relative\n      order of any particular pair of strings,\
    \ and algorithms concerned\n      with collation focus on the problem of providing\
    \ appropriate\n      weighted keys for string values, to enable binary comparison\
    \ of\n      the key values to determine the relative ordering of the strings.\n\
    \      Sorting is the process of actually putting data records into\n      specified\
    \ orders, according to criteria for comparison between the\n      records.  Sorting\
    \ can apply to any kind of data (including textual\n      data) for which an ordering\
    \ criterion can be defined.  Algorithms\n      concerned with sorting focus on\
    \ the problem of performance (in\n      terms of time, memory, or other resources)\
    \ in actually putting the\n      data records into a specified order.\n      A\
    \ sorting algorithm for string data can be internationalized by\n      providing\
    \ it with the appropriate collation-weighted keys\n      corresponding to the\
    \ strings to be ordered.\n      Many processes have a need to order strings in\
    \ a consistent\n      sequence (sorted).  For only a few CCS/CES combinations,\
    \ there is\n      an obvious sort order that can be done without reference to\
    \ the\n      linguistic meaning of the characters: the codepoint order is\n  \
    \    sufficient for sorting.  That is, the codepoint order is also the\n     \
    \ order that a person would use in sorting the characters.  For many\n      CCS/CES\
    \ combinations, the codepoint order would make no sense to a\n      person and\
    \ therefore is not useful for sorting if the results will\n      be displayed\
    \ to a person.\n      Codepoint order is usually not how any human educated by\
    \ a local\n      school system expects to see strings ordered; if one orders to\
    \ the\n      expectations of a human, one has a language-specific sort.\n    \
    \  Sorting to codepoint order will seem inconsistent if the strings\n      are\
    \ not normalized before sorting because different\n      representations of the\
    \ same character will sort differently.  This\n      problem may be smaller with\
    \ a language-specific sort.\n   code table\n      A code table is a table showing\
    \ the characters allocated to the\n      octets in a code.  <ISOIEC10646>\n  \
    \    Code tables are also commonly called \"code charts\".\n"
- title: 4.1 Types of characters
  contents:
  - "4.1 Types of characters\n   The following definitions of types of characters\
    \ do not clearly\n   delineate each character into one type, nor do they allow\
    \ someone to\n   accurately predict what types would apply to a particular character.\n\
    \   The definitions are intended for application designers to help them\n   think\
    \ about the many (sometimes confusing) properties of text.\n   alphabetic\n  \
    \    An informative Unicode property.  Characters that are the primary\n     \
    \ units of alphabets and/or syllabaries, whether combining or\n      noncombining.\
    \  This includes composite characters that are\n      canonical equivalents to\
    \ a combining character sequence of an\n      alphabetic base character plus one\
    \ or more combining characters:\n      letter digraphs; contextual variant of\
    \ alphabetic characters;\n      ligatures of alphabetic characters; contextual\
    \ variants of\n      ligatures; modifier letters; letterlike symbols that are\n\
    \      compatibility equivalents of single alphabetic letters; and\n      miscellaneous\
    \ letter elements.  <UNICODE>\n   ideographic\n      Any symbol that primarily\
    \ denotes an idea (or meaning) in contrast\n      to a sound (or pronunciation),\
    \ for example, a symbol showing a\n      telephone or the Han characters used\
    \ in Chinese, Japanese, and\n      Korean.  <UNICODE>\n   punctuation\n      Characters\
    \ that separate units of text, such as sentences and\n      phrases, thus clarifying\
    \ the meaning of the text.  The use of\n      punctuation marks is not limited\
    \ to prose; they are also used in\n      mathematical and scientific formulae,\
    \ for example.  <UNICODE>\n   symbol\n      One of a set of characters other than\
    \ those used for letters,\n      digits, or punctuation, and representing various\
    \ concepts\n      generally not connected to written language use per se.  Examples\n\
    \      include symbols for mathematical operators, symbols for OCR,\n      symbols\
    \ for box-drawing or graphics, and symbols for dingbats.\n      <NONE>\n     \
    \ Examples of symbols include characters for arrows, faces, and\n      geometric\
    \ shapes.  [UNICODE] has a property that defines\n      characters as symbols.\n\
    \   nonspacing character\n      A combining character whose positioning in presentation\
    \ is\n      dependent on its base character.  It generally does not consume\n\
    \      space along the visual baseline in and of itself.  <UNICODE>\n      A combining\
    \ acute accent (U+0301) is an example of a nonspacing\n      character.\n   diacritic\n\
    \      A mark applied or attached to a symbol to create a new symbol that\n  \
    \    represents a modified or new value.  They can also be marks\n      applied\
    \ to a symbol irrespective of whether it changes the value\n      of that symbol.\
    \  In the latter case, the diacritic usually\n      represents an independent\
    \ value (for example, an accent, tone, or\n      some other linguistic information).\
    \  Also called diacritical mark\n      or diacritical.  <UNICODE>\n   control\
    \ character\n      The 65 characters in the ranges U+0000..U+001F and U+007F..U+009F.\n\
    \      They are also known as control codes.  <UNICODE>\n   formatting character\n\
    \      Characters that are inherently invisible but that have an effect\n    \
    \  on the surrounding characters.  <UNICODE>\n      Examples of formatting characters\
    \ include characters for\n      specifying the direction of text and characters\
    \ that specify how\n      to join multiple characters.\n   compatibility character\n\
    \      A graphic character included as a coded character of ISO/IEC 10646\n  \
    \    primarily for compatibility with existing coded character sets.\n      <ISOIEC10646>\n\
    \      For example, U+FF01 (FULLWIDTH EXCLAMATION MARK) was included for\n   \
    \   compatibility with Asian character sets that include full-width\n      and\
    \ half-width ASCII characters.\n"
- title: 5. User interface for text
  contents:
  - "5. User interface for text\n   Although the IETF does not standardize user interfaces,\
    \ many\n   protocols make assumptions about how a user will enter or see text\n\
    \   that is used in the protocol.  Internationalization challenges\n   assumptions\
    \ about the type and limitations of the input and output\n   devices that may\
    \ be used with applications that use various\n   protocols.  It is therefore useful\
    \ to consider how users typically\n   interact with text that might contain one\
    \ or more non-ASCII\n   characters.\n   input methods\n      An input method is\
    \ a mechanism for a person to enter text into an\n      application.  <NONE>\n\
    \      Text can be entered into a computer in many ways.  Keyboards are\n    \
    \  by far the most common device used, but many characters cannot be\n      entered\
    \ on typical computer keyboards in a single stroke.  Many\n      operating systems\
    \ come with system software that lets users input\n      characters outside the\
    \ range of what is allowed by keyboards.\n      For example, there are dozens\
    \ of different input methods for Han\n      characters in Chinese, Japanese, and\
    \ Korean.  Some start with\n      phonetic input through the keyboard, while others\
    \ use the number\n      of strokes in the character.  Input methods are also needed\
    \ for\n      scripts that have many diacritics, such as European characters\n\
    \      that have two or three diacritics on a single alphabetic\n      character.\n\
    \   rendering rules\n      A rendering rule is an algorithm that a system uses\
    \ to decide how\n      to display a string of text.  <NONE>\n      Some scripts\
    \ can be directly displayed with fonts, where each\n      character from an input\
    \ stream can simply be copied from a glyph\n      system and put on the screen\
    \ or printed page.  Other scripts need\n      rules that are based on the context\
    \ of the characters in order to\n      render text for display.\n      Some examples\
    \ of these rendering rules include:\n         - Scripts such as Arabic (and many\
    \ others), where the form of\n           the letter changes depending on the adjacent\
    \ letters, whether\n           the letter is standing alone, at the beginning\
    \ of a word, in\n           the middle of a word, or at the end of a word.  The\
    \ rendering\n           rules must choose between two or more glyphs.\n      \
    \   - Scripts such as the Indic scripts, where consonants may\n           change\
    \ their form if they are adjacent to certain other\n           consonants or may\
    \ be displayed in an order different from\n           the way they are stored\
    \ and pronounced.  The rendering rules\n           must choose between two or\
    \ more glyphs.\n         - Arabic and Hebrew scripts, where the order of the characters\n\
    \           displayed are changed by the bidirectional properties of the\n   \
    \        alphabetic characters and with right-to-left and\n           left-to-right\
    \ ordering marks.  The rendering rules must\n           choose the order that\
    \ characters are displayed.\n   graphic symbol\n      A graphic symbol is the\
    \ visual representation of a graphic\n      character or of a composite sequence.\
    \  <ISOIEC10646>\n   font\n      A font is a collection of glyphs used for the\
    \ visual depiction of\n      character data.  A font is often associated with\
    \ a set of\n      parameters (for example, size, posture, weight, and serifness),\n\
    \      which, when set to particular values, generate a collection of\n      imagable\
    \ glyphs.  <UNICODE>\n   bidirectional display\n      The process or result of\
    \ mixing left-to-right oriented text and\n      right-to-left oriented text in\
    \ a single line is called\n      bidirectional display.  <UNICODE>\n      Most\
    \ of the world's written languages are displayed left-to-right.\n      However,\
    \ many widely-used written languages such as ones based on\n      the Hebrew or\
    \ Arabic scripts are displayed right-to-left.  Right-\n      to-left text often\
    \ confuses protocol writers because they have to\n      keep thinking in terms\
    \ of the order of characters in a string in\n      memory, and that order might\
    \ be different than what they see on\n      the screen.  (Note that some languages\
    \ are written both\n      horizontally and vertically.)\n      Further, bidirectional\
    \ text can cause confusion because there are\n      formatting characters in ISO/IEC\
    \ 10646 which cause the order of\n      display of text to change.  These explicit\
    \ formatting characters\n      change the display regardless of the implicit left-to-right\
    \ or\n      right-to-left properties of characters.\n      It is common to see\
    \ strings with text in both directions, such as\n      strings that include both\
    \ text and numbers, or strings that\n      contain a mixture of scripts.\n   \
    \   [UNICODE] has a long and incredibly detailed algorithm for\n      displaying\
    \ bidirectional text.\n   undisplayable character\n      A character that has\
    \ no displayable form.  <NONE>\n      For instance, the zero-width space (U+200B)\
    \ cannot be displayed\n      because it takes up no horizontal space.  Formatting\
    \ characters\n      such as those for setting the direction of text are also\n\
    \      undisplayable.  Note, however, that every character in [UNICODE]\n    \
    \  has a glyph associated with it, and that the glyphs for\n      undisplayable\
    \ characters are enclosed in a dashed square as an\n      indication that the\
    \ actual character is undisplayable.\n"
- title: 6. Text in current IETF protocols
  contents:
  - "6. Text in current IETF protocols\n   Many IETF protocols started off being fully\
    \ internationalized, while\n   others have been internationalized as they were\
    \ revised.  In this\n   process, IETF members have seen patterns in the way that\
    \ many\n   protocols use text.  This section describes some specific protocol\n\
    \   interactions with text.\n   protocol elements\n      Protocol elements are\
    \ uniquely-named parts of a protocol.  <NONE>\n      Almost every protocol has\
    \ named elements, such as \"source port\" in\n      TCP.  In some protocols, the\
    \ names of the elements (or text tokens\n      for the names) are transmitted\
    \ within the protocol.  For example,\n      in SMTP and numerous other IETF protocols,\
    \ the names of the verbs\n      are part of the command stream.   The names are\
    \ thus part of the\n      protocol standard.  The names of protocol elements are\
    \ not\n      normally seen by end users.\n   name spaces\n      A name space is\
    \ the set of valid names for a particular item, or\n      the syntactic rules\
    \ for generating these valid names.  <NONE>\n      Many items in Internet protocols\
    \ use names to identify specific\n      instances or values.  The names may be\
    \ generated (by some\n      prescribed rules),  registered centrally (e.g., such\
    \ as with\n      IANA), or have a distributed registration and control mechanism,\n\
    \      such as the names in the DNS.\n   on-the-wire encoding\n      The encoding\
    \ and decoding used before and after transmission over\n      the network is often\
    \ called the \"on-the-wire\" (or sometimes just\n      \"wire\") format.  <NONE>\n\
    \      Characters are identified by codepoints.  Before being transmitted\n  \
    \    in a protocol, they must first be encoded as bits and octets.\n      Similarly,\
    \ when characters are received in a transmission, they\n      have been encoded,\
    \ and a protocol that needs to process the\n      individual characters needs\
    \ to decode them before processing.\n   parsed text\n      Text strings that is\
    \ analyzed for subparts.  <NONE>\n      In some protocols, free text in text fields\
    \ might be parsed.  For\n      example, many mail user agents will parse the words\
    \ in the text of\n      the Subject: field to attempt to thread based on what\
    \ appears\n      after the \"Re:\" prefix.\n   charset identification\n      Specification\
    \ of the charset used for a string of text.  <NONE>\n      Protocols that allow\
    \ more than one charset to be used in the same\n      place should require that\
    \ the text be identified with the\n      appropriate charset.  Without this identification,\
    \ a program\n      looking at the text cannot definitively discern the charset\
    \ of the\n      text.  Charset identification is also called \"charset tagging\"\
    .\n   language identification\n      Specification of the human language used\
    \ for a string of text.\n      <NONE>\n      Some protocols (such as MIME and\
    \ HTTP) allow text that is meant\n      for machine processing to be identified\
    \ with the language used in\n      the text.  Such identification is important\
    \ for machine-processing\n      of the text, such as by systems that render the\
    \ text by speaking\n      it.  Language identification is also called \"language\
    \ tagging\".\n   MIME\n      MIME (Multipurpose Internet Mail Extensions) is a\
    \ message format\n      that allows for textual message bodies and headers in\
    \ character\n      sets other than US-ASCII in formats that require ASCII (most\n\
    \      notably, [RFC2822], the standard for Internet mail headers).  MIME\n  \
    \    is described in RFCs 2045 through 2049, as well as more recent\n      RFCs.\
    \  <NONE>\n   transfer encoding syntax\n      A transfer encoding syntax (TES)\
    \ (sometimes called a transfer\n      encoding scheme) is a reversible transform\
    \ of already-encoded data\n      that is represented in one or more character\
    \ encoding schemes.\n      <NONE>\n      TESs are useful for encoding types of\
    \ character data into an\n      another format, usually for allowing new types\
    \ of data to be\n      transmitted over legacy protocols.  The main examples of\
    \ TESs used\n      in the IETF include Base64 and quoted-printable.\n   Base64\n\
    \      Base64 is a transfer encoding syntax that allows binary data to be\n  \
    \    represented by the ASCII characters A through Z, a through z, 0\n      through\
    \ 9, +, /, and =.  It is defined in [RFC2045].  <NONE>\n   quoted printable\n\
    \      Quoted printable is a transfer encoding syntax that allows strings\n  \
    \    that have non-ASCII characters mixed in with mostly ASCII\n      printable\
    \ characters to be somewhat human readable.  It is\n      described in [RFC2047].\
    \  <NONE>\n      The quoted printable syntax is generally considered to be a\n\
    \      failure at being readable.  It is jokingly referred to as \"quoted\n  \
    \    unreadable\".\n   XML\n      XML (which is an approximate abbreviation for\
    \ Extensible Markup\n      Language) is a popular method for structuring text.\
    \  XML text is\n      explicitly tagged with charsets.  The specification for\
    \ XML can be\n      found at <http://www.w3.org/XML/>.  <NONE>\n   ASN.1 text\
    \ formats\n      The ASN.1 data description language has many formats for text\n\
    \      data.  The formats allow for different repertoires and different\n    \
    \  encodings.  Some of the formats that appear in IETF standards\n      based\
    \ on ASN.1 include IA5String (all ASCII characters),\n      PrintableString (most\
    \ ASCII characters, but missing many\n      punctuation characters), BMPString\
    \ (characters from ISO/IEC 10646\n      plane 0 in UTF-16BE format), UTF8String\
    \ (just as the name\n      implies), and TeletexString (also called T61String;\
    \ the repertoire\n      changes over time).\n   ASCII-compatible encoding (ACE)\n\
    \      Starting in 1996, many ASCII-compatible encoding schemes (which\n     \
    \ are actually transfer encoding syntaxes) have been proposed as\n      possible\
    \ solutions for internationalizing host names.  Their goal\n      is to be able\
    \ to encode any string of ISO/IEC 10646 characters as\n      legal DNS host names\
    \ (as described in STD 13).  At the time of\n      this writing, no ACE has become\
    \ an IETF standard.\n"
- title: 7. Other Common Terms In Internationalization
  contents:
  - "7. Other Common Terms In Internationalization\n   This is a hodge-podge of other\
    \ terms that have appeared in\n   internationalization discussions in the IETF.\
    \  It is likely that\n   additional terms will be added as this document matures.\n\
    \   locale\n      Locale is the user-specific location and cultural information\n\
    \      managed by a computer.   <NONE>\n      Because languages differ from country\
    \ to country (and even region\n      to region within a country), the locale of\
    \ the user can often be\n      an important factor.  Typically, the locale information\
    \ for a user\n      includes the language(s) used.\n      Locale issues go beyond\
    \ character use, and can include things such\n      as the display format for\
    \ currency, dates, and times.  Some\n      locales (especially the popular \"\
    C\" and \"POSIX\" locales) do not\n      include language information.\n     \
    \ It should be noted that there are many thorny, unsolved issues\n      with locale.\
    \  For example, should text be viewed using the locale\n      information of the\
    \ person who wrote the text or the person viewing\n      it? What if the person\
    \ viewing it is travelling to different\n      locations? Should only some of\
    \ the locale information affect\n      creation and editing of text?\n   Latin\
    \ characters\n      \"Latin characters\" is a not-precise term for characters\n\
    \      historically related to ancient Greek script and currently used\n     \
    \ throughout the world.  <NONE>\n      The base Latin characters make up the ASCII\
    \ repertoire and have\n      been augmented by many single and multiple diacritics\
    \ and quite a\n      few other characters.  ISO/IEC 10646 encodes the Latin characters\n\
    \      in the ranges U+0020..U+024F, U+1E00..U+1EFF, and other ranges.\n   romanization\n\
    \      The transliteration of a non-Latin script into Latin characters.\n    \
    \  <NONE>\n      Because of the widespread use of Latin characters, people have\n\
    \      tried to represent many languages that are not based on a Latin\n     \
    \ repertoire in Latin.  For example, there are two popular\n      romanizations\
    \ of Chinese: Wade-Giles and Pinyin, the latter of\n      which is by far more\
    \ common today.  Many romanization systems are\n      inexact and do not give\
    \ perfect round trip mappings between the\n      native script and the Latin characters.\n\
    \   CJK characters and Han characters\n      The ideographic characters used in\
    \ Chinese, Japanese, Korean, and\n      traditional Vietnamese writing systems\
    \ are often called 'CJK\n      characters' after the initial letters of the language\
    \ names in\n      English.  They are also called \"Han characters\", after the\
    \ term in\n      Chinese that is often used for these characters.  <NONE>\n  \
    \    Note that CJK and Han characters do not include the phonetic\n      characters\
    \ used in the Japanese and Korean languages.\n      In ISO/IEC 10646, the Han\
    \ characters were \"unified\", meaning that\n      each set of Han characters\
    \ from Japanese, Chinese, and/or Korean\n      that had the same origin was assigned\
    \ a single code point.  The\n      positive result of this was that many fewer\
    \ code points were\n      needed to represent Han; the negative result of this\
    \ was that\n      characters that people who write the three languages think are\n\
    \      different have the same code point.  There is a great deal of\n      disagreement\
    \ on the nature, the origin, and the severity of the\n      problems caused by\
    \ Han unification.\n   translation\n      The process of conveying the meaning\
    \ of some passage of text in\n      one language, so that it can be expressed\
    \ equivalently in another\n      language.  <NONE>\n      Many language translation\
    \ systems are inexact and cannot be\n      applied repeatedly to go from one language\
    \ to another to another.\n   transliteration\n      The process of representing\
    \ the characters of an alphabetical or\n      syllabic system of writing by the\
    \ characters of a conversion\n      alphabet.  <NONE>\n      Many script transliterations\
    \ are exact, and many have perfect\n      round-trip mappings.  The notable exception\
    \ to this is\n      romanization, described above.  Transliteration involves\n\
    \      converting text expressed in one script into another script,\n      generally\
    \ on a letter-by-letter basis.\n   transcription\n      The process of systematically\
    \ writing the sounds of some passage\n      of spoken language, generally with\
    \ the use of a technical phonetic\n      alphabet (usually Latin-based) or other\
    \ systematic transcriptional\n      orthography.  Transcription also sometimes\
    \ refers to the\n      conversion of written text into a transcribed (usually\
    \ Latin-\n      based) form, based on the sound of the text as if it had been\n\
    \      spoken.  <NONE>\n      Unlike transliterations, which are generally designed\
    \ to be\n      round-trip convertible, transcriptions of written material are\n\
    \      almost never round-trip convertible to their original form.\n   regular\
    \ expressions\n      Regular expressions provide a mechanism to select specific\
    \ strings\n      from a set of character strings.  Regular expressions are a\n\
    \      language used to search for text within strings, and possibly\n      modify\
    \ the text found with other text.  <NONE>\n      Pattern matching for text involves\
    \ being able to represent one or\n      more code points in an abstract notation,\
    \ such as searching for\n      all capital Latin letters or all punctuation. \
    \ The most common\n      mechanism in IETF protocols for naming such patterns\
    \ is the use of\n      regular expressions.  There is no single regular expression\n\
    \      language, but there are numerous very similar dialects.\n      The Unicode\
    \ Consortium has a good discussion about how to adapt\n      regular expression\
    \ engines to use Unicode.  [UTR18]\n   private use\n      ISO/IEC 10646 code points\
    \ from U+E000 to U+F8FF, U+F0000 to\n      U+FFFFD, and U+100000 to U+10FFFD are\
    \ available for private use.\n      This refers to code points of the standard\
    \ whose interpretation is\n      not specified by the standard and whose use may\
    \ be determined by\n      private agreement among cooperating users.  <UNICODE>\n\
    \      The use of these \"private use\" characters is defined by the\n      parties\
    \ who transmit and receive them, and is thus not appropriate\n      for standardization.\
    \  (The IETF has a long history of private use\n      names for things such as\
    \ \"x-\" names in MIME types, charsets, and\n      languages.  The experience\
    \ with these has been quite negative,\n      with many implementors assuming that\
    \ private use names are in fact\n      public and long-lived.)\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security is not discussed in this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1 Normative References
  contents:
  - "9.1 Normative References\n   [ISOIEC10646] ISO/IEC 10646-1:2000.  International\
    \ Standard --\n                 Information technology -- Universal Multiple-Octet\n\
    \                 Coded Character Set (UCS) -- Part 1: Architecture and\n    \
    \             Basic Multilingual Plane, 2000.\n   [UNICODE]     The Unicode Standard,\
    \ Version 3.2.0 is defined by The\n                 Unicode Standard, Version\
    \ 3.0 (Reading, MA, Addison-\n                 Wesley, 2000.  ISBN 0-201-61633-5),\
    \ as amended by the\n                 Unicode Standard Annex #27: Unicode 3.1\n\
    \                 (http://www.unicode.org/reports/tr27/) and by the\n        \
    \         Unicode Standard Annex #28: Unicode 3.2\n                 (http://www.unicode.org/reports/tr28/),\
    \ The Unicode\n                 Consortium, 2002.\n"
- title: 9.2 Informative References
  contents:
  - "9.2 Informative References\n   [CHARMOD]     Character Model for the World Wide\
    \ Web 1.0, W3C,\n                 <http://www.w3.org/TR/charmod/>.\n   [FRAMEWORK]\
    \   ISO/IEC TR 11017:1997(E).  Information technology -\n                 Framework\
    \ for internationalization, prepared by ISO/IEC\n                 JTC 1/SC 22/WG\
    \ 20, 1997.\n   [ISO 639]     ISO 639:2000 (E/F) - Code for the representation\
    \ of\n                 names of languages, 2000.\n   [ISO 3166]    ISO 3166:1988\
    \ (E/F) - Codes for the representation of\n                 names of countries,\
    \ 2000.\n   [RFC2045]     Freed, N. and N. Borenstein, \"MIME Part One: Format\
    \ of\n                 Internet Message Bodies\", November 1996.\n   [RFC2047]\
    \     Moore, K., \"MIME Part Three: Message Header Extensions\n              \
    \   for Non-ASCII Text\", RFC 2047, November 1996.\n   [RFC2277]     Alvestrand,\
    \ H., \"IETF Policy on Character Sets and\n                 Languages\", BCP 18,\
    \ RFC 2277, January 1998.\n   [RFC2279]     Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n                 10646\", RFC 2279, January 1998.\n   [RFC2781]\
    \     Hoffman, P. and F. Yergeau, \"UTF-16, an encoding of ISO\n             \
    \    10646\", RFC 2781, February 2000.\n   [RFC2822]     Resnick, P., \"Internet\
    \ Message Format\", RFC 2822, April\n                 2001.\n   [RFC3066]    \
    \ Alvestrand, H., \"Tags for the Identification of\n                 Languages\"\
    , BCP 47, RFC 3066, January 2001.\n   [US-ASCII]    Coded Character Set -- 7-bit\
    \ American Standard Code for\n                 Information Interchange, ANSI X3.4-1986,\
    \ 1986.\n   [UTN6]        \"BOCU-1: MIME-Compatible Unicode Compression\", M.\n\
    \                 Scherer & M.  Davis, Unicode Technical Note #6.\n   [UTR6] \
    \       \"A Standard Compression Scheme for Unicode\", M. Wolf,\n            \
    \     et. al., Unicode Technical Report #6.\n   [UTR15]       \"Unicode Normalization\
    \ Forms\", M. Davis & M. Duerst,\n                 Unicode Technical Report #15.\n\
    \   [UTR18]       \"Unicode Regular Expression Guidelines\", M. Davis,\n     \
    \            Unicode Technical Report #18.\n   [UTR19]       \"UTF-32\", M. Davis,\
    \ Unicode Technical Report #19.\n   [UTR22]       \"Character Mapping Markup Language\"\
    , M. Davis, Unicode\n                 Technical Report #22.\n"
- title: 10. Additional Interesting Reading
  contents:
  - "10. Additional Interesting Reading\n   ALA-LC Romanization Tables, Randall Barry\
    \ (ed.), U.S. Library of\n   Congress, 1997, ISBN 0844409405\n   Blackwell Encyclopedia\
    \ of Writing Systems, Florian Coulmas, Blackwell\n   Publishers, 1999, ISBN 063121481X\n\
    \   The World's Writing Systems, Peter Daniels and William Bright, Oxford\n  \
    \ University Press, 1996, ISBN 0195079930\n   Writing Systems of the World, Akira\
    \ Nakanishi, Charles E. Tuttle\n   Company, 1980, ISBN 0804816549\n"
- title: 11. Index
  contents:
  - "11. Index\n   alphabetic -- 4.1\n   ASCII-compatible encoding (ACE) -- 6\n  \
    \ ASN.1 text formats -- 6\n   Base64 -- 6\n   Basic Multilingual Plane (BMP) --\
    \ 3.2\n   bidirectional display -- 5\n   BOCU-1 -- 3.2\n   case -- 4\n   character\
    \ -- 2\n   character encoding form -- 2\n   character encoding scheme -- 2\n \
    \  charset -- 2\n   charset identification -- 6\n   CJK characters and Han characters\
    \ -- 7\n   code chart -- 4\n   code table -- 4\n   coded character -- 2\n   coded\
    \ character set -- 2\n   combining character -- 4\n   compatibility character\
    \ -- 4.1\n   composite sequence -- 4\n   control character -- 4.1\n   diacritic\
    \ -- 4.1\n   displaying and rendering text -- 2\n   font -- 5\n   formatting character\
    \ -- 4.1\n   glyph -- 2\n   glyph code -- 2\n   graphic symbol -- 5\n   i18n,\
    \ l10n -- 2\n   ideographic -- 4.1\n   input methods -- 5\n   internationalization\
    \ -- 2\n   ISO -- 3.1\n   language -- 2\n   language identification -- 6\n   Latin\
    \ characters -- 7\n   local and regional standards organizations -- 3.1\n   locale\
    \ -- 7\n   localization -- 2\n   MIME -- 6\n   multilingual -- 2\n   name spaces\
    \ -- 6\n   nonspacing character -- 4.1\n   normalization -- 4\n   on-the-wire\
    \ encoding -- 6\n   parsed text -- 6\n   private use -- 7\n   protocol elements\
    \ -- 6\n   punctuation -- 4.1\n   quoted printable -- 6\n   regular expressions\
    \ -- 7\n   rendering rules -- 5\n   romanization -- 7\n   script -- 2\n   SCSU\
    \ -- 3.2\n   sorting and collation -- 4\n   symbol -- 4.1\n   transcoding -- 2\n\
    \   transcription -- 7\n   transfer encoding syntax -- 6\n   translation -- 7\n\
    \   transliteration -- 7\n   UCS-2 and UCS-4 -- 3.2\n   undisplayable character\
    \ -- 5\n   Unicode Consortium -- 3.1\n   UTF-32 -- 3.2\n   UTF-16, UTF-16BE, and\
    \ UTF-16LE -- 3.2\n   UTF-8 -- 3.2\n   World Wide Web Consortium -- 3.1\n   XML\
    \ -- 6\n"
- title: A. Acknowledgements
  contents:
  - "A. Acknowledgements\n   The definitions in this document come from many sources,\
    \ including a\n   wide variety of IETF documents.\n   James Seng contributed to\
    \ the initial outline of this document.\n   Harald Alvestrand and Martin Duerst\
    \ made extensive useful comments on\n   early versions.  Others who contributed\
    \ to the development include:\n      Dan Kohn\n      Jacob Palme\n      Johan\
    \ van Wingen\n      Peter Constable\n      Yuri Demchenko\n      Susan Harris\n\
    \      Zita Wenzel\n      John Klensin\n      Henning Schulzrinne\n      Leslie\
    \ Daigle\n      Markus Scherer\n      Ken Whistler\n"
- title: B. Author's Address
  contents:
  - "B. Author's Address\n   Paul Hoffman\n   Internet Mail Consortium and VPN Consortium\n\
    \   127 Segre Place\n   Santa Cruz, CA  95060 USA\n   EMail: paul.hoffman@imc.org\
    \ and paul.hoffman@vpnc.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
