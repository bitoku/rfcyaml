- contents:
  - '     MPLS Generic Associated Channel (G-ACh) Advertisement Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The MPLS Generic Associated Channel (G-ACh) provides an auxiliary\n
    \  logical data channel associated with a Label Switched Path (LSP), a\n   pseudowire,
    or a section (link) over which a variety of protocols may\n   flow.  These protocols
    are commonly used to provide Operations,\n   Administration, and Maintenance (OAM)
    mechanisms associated with the\n   primary data channel.  This document specifies
    simple procedures by\n   which an endpoint of an LSP, pseudowire, or section may
    inform the\n   other endpoints of its capabilities and configuration parameters,
    or\n   other application-specific information.  This information may then be\n
    \  used by the receiver to validate or adjust its local configuration,\n   and
    by the network operator for diagnostic purposes.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7212.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Motivation  . . . . . . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   5\n     1.3.  Requirements Language . . . . . . . . . . . . . . . . . .   6\n
    \  2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n   3.
    \ Message Format  . . . . . . . . . . . . . . . . . . . . . . .   7\n     3.1.
    \ GAP Message Format  . . . . . . . . . . . . . . . . . . .   8\n     3.2.  Applications
    Data Block . . . . . . . . . . . . . . . . .   9\n     3.3.  TLV Object Format
    . . . . . . . . . . . . . . . . . . . .  10\n   4.  G-ACh Advertisement Protocol
    TLVs . . . . . . . . . . . . . .  10\n     4.1.  Source Address TLV  . . . . .
    . . . . . . . . . . . . . .  11\n     4.2.  GAP Request TLV . . . . . . . . .
    . . . . . . . . . . . .  11\n     4.3.  GAP Flush TLV . . . . . . . . . . . .
    . . . . . . . . . .  12\n     4.4.  GAP Suppress TLV  . . . . . . . . . . . .
    . . . . . . . .  13\n     4.5.  GAP Authentication TLV  . . . . . . . . . . .
    . . . . . .  14\n   5.  Operation . . . . . . . . . . . . . . . . . . . . . .
    . . . .  14\n     5.1.  Message Transmission  . . . . . . . . . . . . . . . .
    . .  14\n     5.2.  Message Reception . . . . . . . . . . . . . . . . . . . .
    \ 15\n   6.  Message Authentication  . . . . . . . . . . . . . . . . . . .  16\n
    \    6.1.  Authentication Key Identifiers  . . . . . . . . . . . . .  16\n     6.2.
    \ Authentication Process  . . . . . . . . . . . . . . . . .  17\n     6.3.  MAC
    Computation . . . . . . . . . . . . . . . . . . . . .  18\n   7.  Link-Layer Considerations
    . . . . . . . . . . . . . . . . . .  18\n   8.  Manageability Considerations  .
    . . . . . . . . . . . . . . .  19\n   9.  Security Considerations . . . . . .
    . . . . . . . . . . . . .  19\n   10. IANA Considerations . . . . . . . . . .
    . . . . . . . . . . .  20\n     10.1.  Associated Channel Type Allocation . .
    . . . . . . . . .  20\n     10.2.  Allocation of Address Family Numbers . . .
    . . . . . . .  20\n     10.3.  Creation of G-ACh Advertisement Protocol Application\n
    \           Registry . . . . . . . . . . . . . . . . . . . . . . . .  20\n     10.4.
    \ Creation of G-ACh Advertisement Protocol TLV Registry  .  21\n   11. Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . .  21\n   12. References  . . . .
    . . . . . . . . . . . . . . . . . . . . .  21\n     12.1.  Normative References
    . . . . . . . . . . . . . . . . . .  21\n     12.2.  Informative References .
    . . . . . . . . . . . . . . . .  22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The MPLS Generic Associated Channel (G-ACh) is defined and
    described\n   in [RFC5586].  It provides an auxiliary logical data channel over\n
    \  which a variety of protocols may flow.  Each such data channel is\n   associated
    with an MPLS Label Switched Path (LSP), a pseudowire, or a\n   section (link).
    \ An important use of the G-ACh and the protocols it\n   supports is to provide
    Operations, Administration, and Maintenance\n   (OAM) [RFC6291] capabilities for
    the associated LSP, pseudowire, or\n   section.  Examples of such capabilities
    include Pseudowire Virtual\n   Circuit Connectivity Verification (VCCV) [RFC5085];
    Bidirectional\n   Forwarding Detection (BFD) for MPLS [RFC5884]; and MPLS packet
    loss,\n   delay, and throughput measurement [RFC6374]; as well as OAM functions\n
    \  developed for the MPLS Transport Profile (MPLS-TP) [RFC5921].\n   This document
    specifies procedures for an MPLS Label Switching Router\n   (LSR) to advertise
    its capabilities and configuration parameters, or\n   other application-specific
    information, to its peers over LSPs,\n   pseudowires, and sections.  Receivers
    can then make use of this\n   information to validate or adjust their own configurations,
    and\n   network operators can make use of it to diagnose faults and\n   configuration
    inconsistencies between endpoints.  Note that in this\n   document the term \"application\"
    refers to an application that uses\n   the protocol defined herein (and hence
    operates over the G-ACh), and\n   it should not be confused with an end-user application.\n
    \  The main principle guiding the design of the MPLS G-ACh Advertisement\n   Protocol
    (GAP) is simplicity.  The protocol provides a one-way method\n   of distributing
    information about the sender.  How this information\n   is used by a given receiver
    is a local matter.  The data elements\n   distributed by the GAP are application
    specific and, except for those\n   associated with the GAP itself, are outside
    the scope of this\n   document.  An IANA registry has been created to allow GAP\n
    \  applications to be defined as needed.\n   The assignment of application identifiers
    and associated GAP\n   parameters for protocols other than the GAP itself is outside
    the\n   scope of this document.  Such assignments can be made in subsequent\n
    \  documents according to the IANA considerations specified here.\n"
  - contents:
    - "1.1.  Motivation\n   It is frequently useful in a network for a node to have
      general\n   information about its adjacent nodes, i.e., those nodes to which
      it\n   has links.  At a minimum, this allows a human operator or management\n
      \  application with access to the node to determine which adjacent nodes\n   this
      node can see; this is helpful when troubleshooting connectivity\n   problems.
      \ A typical example of an \"adjacency awareness protocol\" is\n   the Link Layer
      Discovery Protocol [LLDP], which can provide various\n   pieces of information
      about adjacent nodes in Ethernet networks, such\n   as system name, basic functional
      capabilities, link speed/duplex\n   settings, and maximum supported frame size.
      \ Such data is useful both\n   for human diagnostics and for automated detection
      of configuration\n   inconsistencies.\n   In MPLS networks, the G-ACh provides
      a convenient link-layer-agnostic\n   means for communication between LSRs that
      are adjacent at the link\n   layer.  The G-ACh advertisement protocol presented
      in this document\n   thus allows LSRs to exchange information of a similar sort
      to that\n   supported by LLDP for Ethernet links.  The GAP, however, does not\n
      \  depend on the specific link-layer protocol in use, and it can be used\n   to
      advertise information on behalf of any MPLS application.\n   In networks based
      on the MPLS Transport Profile (MPLS-TP) [RFC5921]\n   that do not also support
      IP, the normal protocols used to determine\n   the Ethernet address of an adjacent
      MPLS node, such as the Address\n   Resolution Protocol [RFC0826] and IP version
      6 Neighbor Discovery\n   [RFC4861], are not available.  One possible use of
      the G-ACh\n   advertisement protocol is to discover the Ethernet media access\n
      \  control addresses of MPLS-TP nodes lacking IP capability [RFC7213].\n   However,
      where it is anticipated that the only data that needs to be\n   exchanged between
      LSRs over an Ethernet link are their Ethernet\n   addresses, then the operator
      may instead choose to use LLDP for that\n   purpose.\n   The applicability of
      the G-ACh advertisement protocol is not limited\n   to link-layer adjacency,
      either in terms of message distribution or\n   message content.  The G-ACh exists
      for any MPLS LSP or pseudowire, so\n   GAP messages can be exchanged with remote
      LSP or pseudowire\n   endpoints.  The content of GAP messages is extensible
      in a simple\n   manner and can include any kind of information that might be
      useful\n   to MPLS LSRs connected by links, LSPs, or pseudowires.  For example,\n
      \  in networks that rely on the G-ACh for OAM functions, GAP messages\n   might
      be used to inform adjacent LSRs of a node's OAM capabilities\n   and configuration
      parameters.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  Terminology\n   Term  Definition\n   ----- -------------------------------------------\n
      \  G-ACh Generic Associated Channel\n   GAL   G-ACh Label\n   GAP   G-ACh Advertisement
      Protocol\n   LSP   Label Switched Path\n   OAM   Operations, Administration,
      and Maintenance\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   [RFC2119].\n"
    title: 1.3.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   The G-ACh Advertisement Protocol has a simple one-way mode of\n
    \  operation: a device configured to send information for a particular\n   data
    channel (MPLS LSP, pseudowire, or section) transmits GAP\n   messages over the
    G-ACh associated with the data channel.  The\n   payload of a GAP message is a
    collection of Type-Length-Value (TLV)\n   objects, organized on a per-application
    basis.  An IANA registry has\n   been created to identify specific applications.
    \ Application TLV\n   objects primarily contain static data that the receiver
    is meant to\n   retain for a period of time, but they may also represent metadata
    or\n   special processing instructions.\n   Each GAP message can contain data
    for several applications.  A sender\n   may transmit a targeted update that refreshes
    the data for a subset\n   of applications without affecting the data of other
    applications sent\n   in a previous message.  GAP messages are processed in the
    order in\n   which they are received.\n   For example, a GAP message might be
    sent containing the following\n   data:\n      Application A: A-TLV4, A-TLV15,
    A-TLV9\n      Application B: B-TLV1, B-TLV3\n      Application C: C-TLV6,\n   where
    the TLVx refers to an example GAP TLV.\n   A second message might then be sent
    containing:\n      Application B: B-TLV7, B-TLV3\n   Upon receiving the second
    message, the receiver retains B-TLV1 from\n   the first message and adds B-TLV7
    to its B-database.  How it handles\n   the new B-TLV3 depends on the rules B has
    specified for this object\n   type; this object could replace the old one or be
    combined with it in\n   some way.  The second message has no effect on the databases\n
    \  maintained by the receiver for Applications A and C.\n   The rate at which
    GAP messages are transmitted is at the discretion\n   of the sender and may fluctuate
    over time as well as differ per\n   application.  Each message contains, for each
    application it\n   describes, a lifetime that informs the receiver how long to
    wait\n   before discarding the data for that application.\n   The GAP itself provides
    no fragmentation and reassembly mechanisms.\n   In the event that an application
    wishes to send larger chunks of data\n   via GAP messages than fall within the
    limits of packet size, it is\n   the responsibility of the application to fragment
    its data\n   accordingly.  It is the responsibility of the application and the\n
    \  network operator to ensure that the use of the GAP does not congest\n   the
    link to the peer.\n   The GAP is designed to run over a unidirectional channel.
    \ However,\n   where the channel is bidirectional, communication may be optimized\n
    \  through the use of a number of messages defined for transmission from\n   the
    receiver back to the sender.  These are optimizations and are not\n   required
    for protocol operation.\n"
  title: 2.  Overview
- contents:
  - "3.  Message Format\n   An Associated Channel Header (ACH) Channel Type has been
    allocated\n   for the GAP as follows:\n   Protocol                           Channel
    Type\n   ---------------------------------- ------------\n   G-ACh Advertisement
    Protocol       0x0059\n   For this Channel Type, as noted in [RFC7026], the ACH
    SHALL NOT be\n   followed by the ACH TLV Header defined in [RFC5586].\n   Fields
    in this document shown as Reserved or Resv are reserved for\n   future specification
    and MUST be set to zero.  All integer values for\n   fields defined in this document
    SHALL be encoded in network byte\n   order.\n   A GAP message consists of a fixed
    header followed by a GAP payload.\n   The payload of a GAP message is an Application
    Data Block (ADB)\n   consisting of one or more block elements.  Each block element\n
    \  contains an application identifier, a lifetime, and a series of zero\n   or
    more TLV objects for the application it describes.\n   Malformed GAP messages
    MUST be discarded by the receiver, although an\n   error MAY be logged.  If the
    error is logged remotely, a suitable\n   form of rate limiting SHOULD be used
    to prevent excessive logging\n   messages being transmitted over the network.\n
    \  Implementations of this protocol version MUST set reserved fields in\n   the
    message formats that follow to all zero bits when sending and\n   ignore any value
    when receiving messages.\n"
  - contents:
    - "3.1.  GAP Message Format\n   The following figure shows the format of a G-ACh
      Advertisement\n   Protocol message, which follows the Associated Channel Header
      (ACH):\n        0                   1                   2                   3\n
      \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |Version|       Reserved        |        Message Length         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                        Message Identifier                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |                           Timestamp                           |\n       |
      \                                                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                    Application Data Block (ADB)               ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                      Figure 1: GAP Message Format\n   The meanings of the
      fields are:\n      Version (4 bits): Protocol version.  This is set to zero.\n
      \     Reserved (12 bits): MUST be sent as zero.\n      Message Length (16 bits):
      Size in octets of this message, i.e., of\n      the portion of the packet following
      the Associated Channel Header.\n      Message Identifier (MI) (32 bits): Unique
      identifier of this\n      message.  For disambiguation, a sender MUST NOT reuse
      an MI over a\n      given channel until it is confident that all ADBs associated
      with\n      it have been expired by the receiver.  The sole purpose of this\n
      \     field is duplicate detection in the event of a message burst\n      (Section
      5.1).\n      Timestamp: 64-bit Network Time Protocol (NTP) transmit timestamp,\n
      \     as specified in Section 6 of [RFC5905].\n"
    title: 3.1.  GAP Message Format
  - contents:
    - "3.2.  Applications Data Block\n   An ADB consists of one or more elements of
      the following format:\n        0                   1                   2                   3\n
      \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |        Application ID         |        Element Length         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |            Lifetime           |           Reserved            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                          TLV Object                           ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                          TLV Object                           ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      .                                                               .\n       .
      \                                                              .\n       .                                                               .\n
      \                Figure 2: Application Data Block Element\n      Application
      ID (16 bits): Identifies the application this element\n      describes; an IANA
      registry has been created to track the values\n      for this field.  More than
      one block element with the same\n      Application ID may be present in the
      same ADB, and block elements\n      with different Application IDs may also
      be present in the same\n      ADB.  The protocol rules for the mechanism, including
      what ADB\n      elements are present and which TLVs are contained in an ADB\n
      \     element, are to be defined in the document that specifies the\n      application-specific
      usage.\n      Element Length (16 bits): Specifies the total length in octets
      of\n      this block element (including the Application ID and Element\n      Length
      fields).\n      Lifetime field (16 bits): Specifies how long, in seconds, the\n
      \     receiver should retain the data in this message (i.e., it\n      specifies
      the lifetime of the static data carried in the TLV set\n      of this ADB).
      \ For TLVs not carrying static data, the Lifetime is\n      of no significance.
      \ The sender of a GAP message indicates this by\n      setting the Lifetime
      field to zero.  If the Lifetime is zero, TLVs\n      in this ADB are processed
      by the receiver, and the data associated\n      with these TLV types is immediately
      marked as expired.  If the ADB\n      contains no TLVs, the receiver expires
      all data associated with\n      TLVs previously sent to this application.\n
      \  The remainder of the Application Data Block element consists of a\n   sequence
      of zero or more TLV objects that use the format defined in\n   Section 3.3.\n
      \  The scope of an ADB element is an application instance attached to a\n   specific
      channel between a specific source-destination pair, and the\n   Lifetime field
      specifies the lifetime of the ADB element data in that\n   specific context.\n"
    title: 3.2.  Applications Data Block
  - contents:
    - "3.3.  TLV Object Format\n   GAP TLV objects use the following format:\n        0
      \                  1                   2                   3\n        0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |      Type     |    Reserved   |            Length             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                             Value                             ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                       Figure 3: TLV Object Format\n      Type (8 bits): Identifies
      the TLV Object and is scoped to a\n      specific application; each application
      creates an IANA registry to\n      track its Type values.\n      Reserved (8
      bits): MUST be sent as zero.\n      Length (16 bits): The length in octets of
      the Value field.  The\n      Value field need not be padded to provide alignment.\n
      \  GAP messages do not contain a checksum.  If validation of message\n   integrity
      is desired, the authentication procedures in Section 6\n   should be used.\n"
    title: 3.3.  TLV Object Format
  title: 3.  Message Format
- contents:
  - "4.  G-ACh Advertisement Protocol TLVs\n   The GAP supports several TLV objects
    related to its own operation via\n   the Application ID 0x0000.  These objects
    represent metadata and\n   processing instructions rather than static data that
    is meant to be\n   retained.  When an ADB element for the GAP is present in a
    GAP\n   message, it MUST precede other elements.  This is particularly\n   important
    for the correct operation of the Flush message\n   (Section 4.3).\n   Any application
    using the GAP inherits the ability to use facilities\n   provided by Application
    0x0000.\n   Application 0x0000 GAP messages MUST be processed in the order in\n
    \  which they are received.\n"
  - contents:
    - "4.1.  Source Address TLV\n   The Source Address object identifies the sending
      device and possibly\n   the transmitting interface and the channel; it has the
      following\n   format:\n        0                   1                   2                   3\n
      \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |     Type=0    |    Reserved   |            Length             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |      Reserved (16 bits)       |    Address Family (16 bits)   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                            Address                            ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 4: Source Address TLV Format\n   The Address Family
      field indicates the type of the address; it SHALL\n   be set to one of the assigned
      values in the IANA \"Address Family\n   Numbers\" registry.\n   In IP networks,
      a Source Address SHOULD be included in GAP messages\n   and set to an IP address
      of the sending device; when the channel is a\n   link, this address SHOULD be
      an address of the transmitting\n   interface.\n   In non-IP MPLS-TP networks,
      a Source Address SHOULD be included in\n   GAP messages and set to the endpoint
      identifier of the channel.  The\n   formats of these channel identifiers SHALL
      be as given in Sections\n   3.5.1, 3.5.2, and 3.5.3 of [RFC6428] (excluding
      the initial Type and\n   Length fields shown in those sections).  IANA has allocated
      Address\n   Family Numbers for these identifiers; see Section 10.2.\n   On multipoint
      channels, a Source Address TLV is REQUIRED.\n"
    title: 4.1.  Source Address TLV
  - contents:
    - "4.2.  GAP Request TLV\n   This object is a request by the sender for the receiver
      to transmit\n   an immediate unicast GAP update to the sender.  If the Length
      field\n   is zero, this signifies that an update for all applications is\n   requested.
      \ Otherwise, the Value field specifies the applications for\n   which an update
      is requested, in the form of a sequence of\n   Application IDs:\n        0                   1
      \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |     Type=1    |    Reserved   |            Length             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |        Application ID 1       |        Application ID 2       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      .                                                               .\n       .
      \                                                              .\n       .                                                               .\n
      \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |
      \       Application ID N-1     |        Application ID N       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                    Figure 5: GAP Request TLV Format\n   The intent of this
      TLV is to request the immediate transmission of\n   data following a local event
      such as a restart, rather than waiting\n   for a periodic update.  Applications
      need to determine what\n   information is meaningful to send in response to
      such a request.  The\n   inclusion of an Application ID in a Request TLV does
      not guarantee\n   that the response will provide information for that application.
      \ The\n   responder may also include information for applications not included\n
      \  in the request.  A receiver SHOULD discard GAP Request messages that\n   arrive
      at a rate in excess of that which is considered reasonable for\n   the application.\n
      \  For an Application ID 0x0000 GAP Request, it is meaningful to respond\n   with
      the Source Address.\n   This TLV is considered to be part of the GAP and thus
      does not need\n   to be retained.  The reception of the TLV may however be recorded
      for\n   management purposes.\n"
    title: 4.2.  GAP Request TLV
  - contents:
    - "4.3.  GAP Flush TLV\n   This object is an instruction to the receiver to flush
      the GAP data\n   for all applications associated with this (sender, channel)
      pair.  It\n   is a null object, i.e., its Length is set to zero.\n   The GAP
      Flush instruction does not apply to data contained in the\n   message carrying
      the GAP Flush TLV object itself.  Any application\n   data contained in the
      same message SHALL be processed and retained by\n   the receiver as usual.\n
      \  The Flush TLV type is 2.\n   This TLV is considered to be part of the GAP
      and thus does not need\n   to be retained.  The reception of the TLV may however
      be recorded for\n   management purposes.\n"
    title: 4.3.  GAP Flush TLV
  - contents:
    - "4.4.  GAP Suppress TLV\n   This object is a request to the receiver to cease
      sending GAP updates\n   to the transmitter over the current channel for the
      specified\n   duration.  Duration is a 16-bit non-negative integer in units
      of\n   seconds.  The receiver MAY accept and act on the request, MAY ignore\n
      \  the request, or MAY resume transmissions at any time according to\n   implementation
      or configuration choices, and depending on local\n   pragmatics.  The format
      of this object is as follows:\n        0                   1                   2
      \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
      3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |     Type=3    |    Reserved   |            Length             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |           Duration            |        Application ID 1       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      .                                                               .\n       .
      \                                                              .\n       .                                                               .\n
      \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |
      \       Application ID N-1     |        Application ID N       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                    Figure 6: GAP Suppress TLV Format\n   If the Length is
      set to 2, i.e., if the list of Application IDs is\n   empty, then suppression
      of all GAP messages is requested; otherwise,\n   suppression of only those updates
      pertaining to the listed\n   applications is requested.  A duration of zero
      cancels any existing\n   suppress requests for the listed applications.\n   This
      object makes sense only for point-to-point channels or when the\n   sender is
      receiving unicast GAP updates.\n"
    title: 4.4.  GAP Suppress TLV
  - contents:
    - "4.5.  GAP Authentication TLV\n   This object is used to provide authentication
      and integrity\n   validation for a GAP message.  It has the following format:\n
      \       0                   1                   2                   3\n        0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |     Type=4    |    Reserved   |            Length             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |          Reserved             |            Key ID             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      ~                    Authentication Data                        ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                 Figure 7: GAP Authentication TLV Format\n   The data and procedures
      associated with this object are explained in\n   Section 6.\n"
    title: 4.5.  GAP Authentication TLV
  title: 4.  G-ACh Advertisement Protocol TLVs
- contents:
  - '5.  Operation

    '
  - contents:
    - "5.1.  Message Transmission\n   G-ACh Advertisement Protocol message transmission
      SHALL operate on a\n   per-data-channel basis and be configurable by the operator\n
      \  accordingly.\n   Because GAP message transmission may be active for many
      logical\n   channels on the same physical interface, message transmission timers\n
      \  SHOULD be randomized across the channels supported by a given\n   interface
      so as to reduce the likelihood of large synchronized\n   message bursts.\n   The
      Message Identifier (MI) uniquely identifies this message and its\n   value is
      set at the sender's discretion.  It MUST NOT be assumed to\n   be a sequence
      number.  The scope of an MI is a channel between a\n   specific source-destination
      pair.\n   The Timestamp field SHALL be set to the time at which this message
      is\n   transmitted.\n   The Lifetime field of each Application Data Block element
      SHALL be\n   set to the number of seconds the receiver is advised to retain
      the\n   data associated with this message and application.\n   When the transmitter
      wishes the data previously sent in an ADB\n   element to persist, then it must
      refresh the ADB element by sending\n   another update.  Refresh times SHOULD
      be set in such a way that at\n   least three updates will be sent prior to Lifetime
      expiration.  For\n   example, if the Lifetime is set to 210 seconds, then updates
      should\n   be sent at least once every 60 seconds.\n   A sender may signal that
      previously sent data SHOULD be marked as\n   expired by setting the ADB element
      lifetime to zero as previously\n   described in Section 3.\n   In some cases,
      an application may desire additional reliability for\n   the delivery of some
      of its data.  When this is the case, the\n   transmitter MAY send several (for
      example, three) instances of the\n   message in succession, separated by a delay
      appropriate to, or\n   specified by, the application.  For example, this procedure
      might be\n   invoked when sending a Flush instruction following device reset.
      \ The\n   expectation is that the receiver will detect duplicate messages using\n
      \  the MI.\n"
    title: 5.1.  Message Transmission
  - contents:
    - "5.2.  Message Reception\n   G-ACh Advertisement Protocol message reception
      SHALL operate on a\n   per-data-channel basis and be configurable by the operator\n
      \  accordingly.\n   Upon receiving a G-ACh Advertisement Protocol message that
      contains\n   data for some application X, the receiver determines whether it
      can\n   interpret X-data.  If it cannot, then the receiver MAY retain this\n
      \  data for the number of seconds specified by the Lifetime field;\n   although
      it cannot parse this data, it may still be of use to the\n   operator.\n   If
      the receiver can interpret X-data, then it processes the data\n   objects accordingly,
      retaining the data associated with those that\n   represent static data for
      the number of seconds specified by the\n   Lifetime field.  If the Lifetime
      is zero, such data is immediately\n   marked as expired, and, if no TLVs are
      specified, all data associated\n   with previously received TLVs is marked as
      expired (Section 3).  If\n   one of the received TLV objects has the same Type
      as a previously\n   received TLV, then the data from the new object SHALL replace
      the\n   data associated with that Type unless the X specification dictates a\n
      \  different behavior.\n   The received data is made available to local applications
      that\n   require it and are locally authorized to view it.  The method for\n
      \  doing this is local to the receiver and outside the scope of this\n   document.\n
      \  The receiver MAY make use of the application data contained in a GAP\n   message
      to perform some level of auto-configuration, for example, if\n   the application
      is an OAM protocol.  The application SHOULD, however,\n   take care to prevent
      cases of oscillation resulting from each\n   endpoint attempting to adjust its
      configuration to match the other.\n   Any such auto-configuration based on GAP
      information MUST be disabled\n   by default.\n   The MI may be used to detect
      and discard duplicate messages.\n"
    title: 5.2.  Message Reception
  title: 5.  Operation
- contents:
  - "6.  Message Authentication\n   The GAP provides a means of authenticating messages
    and ensuring\n   their integrity.  This is accomplished by attaching a GAP\n   Authentication
    TLV and including, in the Authentication Data field,\n   the output of a cryptographic
    hash function (known as a Message\n   Authentication Code (MAC)), the input to
    which is the message\n   together with a secret key known only to the sender and
    receiver.\n   Upon receipt of the message, the receiver computes the same MAC
    and\n   compares the result with the MAC in the message; if the MACs are not\n
    \  equal, the message is discarded.  Use of GAP message authentication\n   is
    RECOMMENDED.\n   The remainder of this section gives the details of this procedure,\n
    \  which is based on the procedures for generic cryptographic\n   authentication
    for the Intermediate System to Intermediate System\n   (IS-IS) routing protocol
    as described in [RFC5310].\n"
  - contents:
    - "6.1.  Authentication Key Identifiers\n   An Authentication Key Identifier (Key
      ID) is a 16-bit tag shared by\n   the sender and receiver that identifies a
      set of authentication\n   parameters.  These parameters are not sent over the
      wire; they are\n   assumed to be associated, on each node, with the Key ID by
      external\n   means, such as via explicit operator configuration or a separate
      key-\n   exchange protocol.  Multiple Key IDs may be active on the sending and\n
      \  receiving nodes simultaneously, in which case the sender locally\n   selects
      a Key ID from this set to use in an outbound message.  This\n   capability facilitates
      key migration in the network.\n   The parameters associated with a Key ID are:\n
      \  o  Authentication Algorithm: This signifies the authentication\n      algorithm
      to use to generate or interpret authentication data.  At\n      present, the
      following values MAY be supported: HMAC-SHA-1, HMAC-\n      SHA-256.  HMAC-SHA-1
      MUST be supported.\n   o  Authentication Keystring: A secret octet string that
      forms the\n      basis for the cryptographic key used by the Authentication\n
      \     Algorithm.  It SHOULD NOT be a human-memorable string.\n      Implementations
      MUST be able to use random binary values of the\n      appropriate length as
      a keystring.\n   Implementers SHOULD consider the use of [RFC7210] for key management.\n
      \  If used, authenticated information sent over the GAP MUST only\n   considered
      valid if it was sent during the Keying and Authentication\n   for Routing Protocols
      (KARP) interval between SendLifetimeStart and\n   SendLifeTimeEnd.  However,
      if the GAP TLV used to send it expires\n   before the KARP SendLifetimeStart,
      then information is never used; if\n   it expires before KARP SendNotAfter,
      the key becomes invalid on\n   expiry of the GAP TLV.\n   At the time of this
      writing, mechanisms for dynamic key management in\n   the absence of IP are
      not available.  Key management in such\n   environments therefore needs to take
      place via the equipment\n   management system or some other out-of-band service.
      \ The MPLS layer\n   in a network is normally isolated from direct access by
      users and\n   thus is a relatively protected environment.  Therefore, key turnover\n
      \  is expected to be a relatively infrequent event.\n"
    title: 6.1.  Authentication Key Identifiers
  - contents:
    - "6.2.  Authentication Process\n   The authentication process for GAP messages
      is straightforward.\n   First, a Key ID is associated on both the sending and
      receiving nodes\n   with a set of authentication parameters.  Following this,
      when the\n   sender generates a GAP message, it sets the Key ID field of the
      GAP\n   Authentication TLV accordingly.  (The length of the Authentication\n
      \  Data field is also known at this point because it is a function of\n   the
      Authentication Algorithm.)  The sender then computes a MAC for\n   the message
      as described in Section 6.3 and fills the Authentication\n   Data field of the
      GAP Authentication TLV with the MAC, overwriting\n   the zeros used in computation.
      \ The message is then sent.\n   When the message is received, the receiver computes
      a MAC for it as\n   described below, again setting the Authentication Data field
      of the\n   GAP Authentication TLV to all zeros before computing the MAC.  The\n
      \  receiver compares its computed MAC to the MAC received in the\n   Authentication
      Data field.  If the two MACs are equal, authentication\n   of the message is
      considered to have succeeded; otherwise, it is\n   considered to have failed.\n
      \  This process suffices to ensure the authenticity and integrity of\n   messages
      but is still vulnerable to a replay attack, in which a third\n   party captures
      a message and sends it on to the receiver at some\n   later time.  The GAP message
      header contains a Timestamp field, which\n   can be used to protect against
      replay attacks.  To achieve this\n   protection, the receiver checks that the
      time recorded in the\n   Timestamp field of a received and authenticated GAP
      message\n   corresponds to the current time, within a reasonable tolerance that\n
      \  allows for message propagation delay, and it accepts or rejects the\n   message
      accordingly.  Clock corrections SHOULD be monotonic to avoid\n   replay attacks,
      unless operator intervention overrides the monotonic\n   configuration setting
      to achieve a faster convergence with current\n   time.\n   If the clocks of
      the sender and receiver are not synchronized with\n   one another, then the
      receiver must perform the replay check against\n   its best estimate of the
      current time according to the sender's\n   clock.  The timestamps that appear
      in GAP messages can be used to\n   infer the approximate clock offsets of senders,
      and, while this does\n   not yield high-precision clock synchronization, it
      suffices for\n   purposes of the replay check with an appropriately chosen tolerance.\n"
    title: 6.2.  Authentication Process
  - contents:
    - "6.3.  MAC Computation\n   The HMAC procedure described in [RFC2104] is used
      to compute the MAC.\n   The Authentication Data field of the GAP Authentication
      TLV is set to\n   all zeros.  The MAC is then computed over the entire GAP message
      as\n   shown in Figure 1.\n   Where there is less data than is needed for the
      MAC computation, a\n   value of zero MUST be used.\n   The length of the Authentication
      Data field is always less than or\n   equal to the message digest size of the
      specific hash function that\n   is being used.  However, the implementer needs
      to consider that\n   although MAC truncation decreases the size of the message,
      it results\n   in a corresponding reduction in the strength of the assurance\n
      \  provided.\n   MAC truncation is NOT RECOMMENDED.\n"
    title: 6.3.  MAC Computation
  title: 6.  Message Authentication
- contents:
  - "7.  Link-Layer Considerations\n   When the GAP is used to support device discovery
    on a data link, GAP\n   messages must be sent in such a way that they can be received
    by\n   other listeners on the link without the sender first knowing the\n   link-layer
    addresses of the listeners.  In short, they must be\n   multicast.  Considerations
    for multicast MPLS encapsulation are\n   discussed in [RFC5332].  For example,
    Section 8 of [RFC5332]\n   describes how destination Ethernet MAC addresses are
    selected for\n   multicast MPLS packets.  Since a GAP packet transmitted over
    a data\n   link contains just one label, the G-ACh Label (GAL) with label value\n
    \  13, the correct destination Ethernet address for frames carrying GAP\n   packets
    intended for device discovery, according to these selection\n   procedures, is
    01-00-5e-80-00-0d.\n"
  title: 7.  Link-Layer Considerations
- contents:
  - "8.  Manageability Considerations\n   The data sent and received by this protocol
    MUST be made accessible\n   for inspection by network operators, and where local
    configuration is\n   updated by the received information, it MUST be clear why
    the\n   configured value has been changed.  This allows the operator to\n   determine
    the operational parameters currently in use and to\n   understand when local configuration
    has been superseded by inbound\n   parameters received from its peer.\n   In the
    event of a system restart, any GAP application data and peer\n   state data that
    has been retained as a consequence of prior\n   advertisements from GAP peers
    MUST be discarded; this prevents\n   incorrect operation on the basis of stale
    data.\n   All GAP applications MUST be disabled by default and need to be\n   enabled
    by the operator if required.\n"
  title: 8.  Manageability Considerations
- contents:
  - "9.  Security Considerations\n   G-ACh Advertisement Protocol messages contain
    information about the\n   sending device and its configuration, which is sent
    in cleartext over\n   the wire.  If an unauthorized third party gains access to
    the MPLS\n   data plane or the lower network layers between the sender and\n   receiver,
    it can observe this information.  In general, however, the\n   information contained
    in GAP messages is no more sensitive than that\n   contained in other protocol
    messages, such as routing updates, which\n   are commonly sent in cleartext.  No
    attempt is therefore made to\n   guarantee confidentiality of GAP messages.  Therefore,
    the GAP MUST\n   NOT be used to send TLVs in cleartext where the value concerned\n
    \  requires confidentiality, for example, GAP or application TLVs\n   containing
    'bare' cryptographic keying material.  Applications that\n   require confidentiality
    will need to implement a suitable\n   confidentiality method.\n   A more significant
    potential threat is the transmission of GAP\n   messages by unauthorized sources,
    or the unauthorized manipulation of\n   messages in transit; this can disrupt
    the information receivers hold\n   about legitimate senders.  To protect against
    this threat, message\n   authentication procedures (specified in Section 6) enable
    receivers\n   to ensure the authenticity and integrity of GAP messages.  These\n
    \  procedures include the means to protect against replay attacks in\n   which
    a third party captures a legitimate message and \"replays\" it to\n   a receiver
    at some later time.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  Associated Channel Type Allocation\n   IANA has allocated an entry in
      the \"MPLS Generalized Associated\n   Channel (G-ACh) Types (including Pseudowire
      Associated Channel\n   Types)\" registry for the \"G-ACh Advertisement Protocol\",
      as follows:\n   Value  Description                  Reference\n   ------ ----------------------------
      ---------\n   0x0059 G-ACh Advertisement Protocol This RFC\n   The reader should
      note that the \"TLV Follows\" column in the registry\n   has been deleted [RFC7026].\n"
    title: 10.1.  Associated Channel Type Allocation
  - contents:
    - "10.2.  Allocation of Address Family Numbers\n   IANA has allocated three entries
      from the Standards Track range in\n   the \"Address Family Numbers\" registry
      for MPLS-TP Section, LSP, and\n   Pseudowire endpoint identifiers, per Section
      4.1.  The allocations\n   are:\n   Number Description                            Reference\n
      \  ------ -------------------------------------- ---------\n   26     MPLS-TP
      Section Endpoint Identifier    This RFC\n   27     MPLS-TP LSP Endpoint Identifier
      \       This RFC\n   28     MPLS-TP Pseudowire Endpoint Identifier This RFC\n"
    title: 10.2.  Allocation of Address Family Numbers
  - contents:
    - "10.3.  Creation of G-ACh Advertisement Protocol Application Registry\n   IANA
      has created a new registry, \"G-ACh Advertisement Protocol\n   Application Registry\"
      in the \"Generic Associated Channel (G-ACh)\n   Parameters\" registry, with
      fields and initial allocations as follows:\n   Application ID Description                  Reference\n
      \  -------------- ---------------------------- ---------\n   0x0000         G-ACh
      Advertisement Protocol This RFC\n   The range of the Application ID field is
      0x0000 - 0xFFFF.\n   The allocation policy for this registry is IETF Review.\n"
    title: 10.3.  Creation of G-ACh Advertisement Protocol Application Registry
  - contents:
    - "10.4.  Creation of G-ACh Advertisement Protocol TLV Registry\n   IANA has created
      a new registry, \"G-ACh Advertisement Protocol: GAP\n   TLV Objects (Application
      ID 0)\" in the \"Generic Associated Channel\n   (G-ACh) Parameters\" registry,
      with fields and initial allocations as\n   follows:\n   Type Name          Type
      ID Reference\n   ------------------ ------- ---------\n   Source Address     0
      \      This RFC\n   GAP Request        1       This RFC\n   GAP Flush          2
      \      This RFC\n   GAP Suppress       3       This RFC\n   GAP Authentication
      4       This RFC\n   The range of the Type ID field is 0 - 255.\n   The allocation
      policy for this registry is IETF Review.\n"
    title: 10.4.  Creation of G-ACh Advertisement Protocol TLV Registry
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgements\n   We thank Adrian Farrel for his valuable review comments
    on this\n   document.\n"
  title: 11.  Acknowledgements
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2104]  Krawczyk, H., Bellare, M., and R.
      Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\",
      RFC 2104, February\n              1997.\n   [RFC2119]  Bradner, S., \"Key words
      for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC5332]  Eckert, T., Rosen, E., Aggarwal, R., and Y.
      Rekhter, \"MPLS\n              Multicast Encapsulations\", RFC 5332, August
      2008.\n   [RFC5586]  Bocci, M., Vigoureux, M., and S. Bryant, \"MPLS Generic\n
      \             Associated Channel\", RFC 5586, June 2009.\n   [RFC5905]  Mills,
      D., Martin, J., Burbank, J., and W. Kasch, \"Network\n              Time Protocol
      Version 4: Protocol and Algorithms\n              Specification\", RFC 5905,
      June 2010.\n   [RFC6428]  Allan, D., Swallow Ed. , G., and J. Drake Ed. , \"Proactive\n
      \             Connectivity Verification, Continuity Check, and Remote\n              Defect
      Indication for the MPLS Transport Profile\", RFC\n              6428, November
      2011.\n   [RFC7210]  Housley, R., Polk, T., Hartman, S., and D. Zhang,\n              \"Database
      of Long-Lived Symmetric Cryptographic Keys\", RFC\n              7210, April
      2014.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [LLDP]     IEEE, \"Station and Media Access
      Control Connectivity\n              Discovery\", IEEE 802.1AB, September 2009.\n
      \  [RFC0826]  Plummer, D., \"Ethernet Address Resolution Protocol: Or\n              converting
      network protocol addresses to 48.bit Ethernet\n              address for transmission
      on Ethernet hardware\", STD 37,\n              RFC 826, November 1982.\n   [RFC4861]
      \ Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n
      \  [RFC5085]  Nadeau, T. and C. Pignataro, \"Pseudowire Virtual Circuit\n              Connectivity
      Verification (VCCV): A Control Channel for\n              Pseudowires\", RFC
      5085, December 2007.\n   [RFC5310]  Bhatia, M., Manral, V., Li, T., Atkinson,
      R., White, R.,\n              and M. Fanto, \"IS-IS Generic Cryptographic\n
      \             Authentication\", RFC 5310, February 2009.\n   [RFC5884]  Aggarwal,
      R., Kompella, K., Nadeau, T., and G. Swallow,\n              \"Bidirectional
      Forwarding Detection (BFD) for MPLS Label\n              Switched Paths (LSPs)\",
      RFC 5884, June 2010.\n   [RFC5921]  Bocci, M., Bryant, S., Frost, D., Levrau,
      L., and L.\n              Berger, \"A Framework for MPLS in Transport Networks\",
      RFC\n              5921, July 2010.\n   [RFC6291]  Andersson, L., van Helvoort,
      H., Bonica, R., Romascanu,\n              D., and S. Mansfield, \"Guidelines
      for the Use of the \"OAM\"\n              Acronym in the IETF\", BCP 161, RFC
      6291, June 2011.\n   [RFC6374]  Frost, D. and S. Bryant, \"Packet Loss and Delay\n
      \             Measurement for MPLS Networks\", RFC 6374, September 2011.\n   [RFC7026]
      \ Farrel, A. and S. Bryant, \"Retiring TLVs from the\n              Associated
      Channel Header of the MPLS Generic Associated\n              Channel\", RFC
      7026, September 2013.\n   [RFC7213]  Frost, D., Bryant, S., and M. Bocci, \"MPLS-TP
      Next-Hop\n              Ethernet Addressing\", RFC 7213, June 2014.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Dan Frost\n   Blue Sun\n   EMail: frost@mm.st\n   Stewart
    Bryant\n   Cisco Systems\n   EMail: stbryant@cisco.com\n   Matthew Bocci\n   Alcatel-Lucent\n
    \  EMail: matthew.bocci@alcatel-lucent.com\n"
  title: Authors' Addresses
