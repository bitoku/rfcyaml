- title: __initial_text__
  contents:
  - '                         Some Comments on SQuID

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo is a discussion of some of the ideas expressed\
    \ in RFC-1016\n   on Source Quench.  This memo introduces the distinction of the\
    \ cause\n   of congestion in a gateway between the effects of \"Funneling\" and\n\
    \   \"Mismatch\".  It is offered in the same spirit as RFC-1016; to\n   stimulate\
    \ discussion.  The opinions offered are personal, not\n   corporate, opinions.\
    \  Distribution of this memo is unlimited.\n"
- title: Discussion
  contents:
  - "Discussion\n   It appears to me that there are at least two qualitatively different\n\
    \   types of congestion which may occur at Internet gateways.  One form\n   of\
    \ congestion is the result of the merger of several independent data\n   streams\
    \ from diverse sources at a common point in their communication\n   path.  I'll\
    \ refer to this as \"Funneling\".  The architecture of the\n   Internet (apparently)\
    \ assumes that traffic flows are bursty and\n   asynchronous; therefore congestion\
    \ which occurs at the result of\n   Funneling will typically be the result of\
    \ \"bad luck\" as several\n   independent bursts happen to arrive at a common\
    \ point simultaneously.\n   It is expected that Funneling congestion will be short-lived,\
    \ just as\n   individual bursts are.  I don't claim that any such assumptions\
    \ are\n   documented or formalized; nevertheless I got a clear sense of this\n\
    \   class of assumptions both from reading the protocol documentation and\n  \
    \ from personal recollections of long-past design meetings.\n   A second form\
    \ of Internet congestion may arise during a prolonged\n   (non-bursty) data transfer\
    \ between hosts when the resulting traffic\n   must pass through a node connecting\
    \ two communications subsystems\n   with significantly different throughput rates.\
    \  I'll refer to this as\n   \"Mismatching\".  By contrast with Funneling, Mismatching\
    \ can be caused\n   by the innocent action of a single host, is highly repeatable\n\
    \   (definitely not just \"bad luck\"), and will be long-lived.\n   RFC- 1016\
    \ discusses two interrelated strategies; one for when to send\n   a SQ, and a\
    \ second for what to do when an SQ is received.  There is\n   also a discussion\
    \ of some experiments, which deal almost exclusively\n   with Mismatching congestion.\
    \ (I understand that the simulation can\n   generate multiple flows, but these\
    \ simply further increase the degree\n   of Mismatch; the flow under study is\
    \ long-lived by design.)  It seems\n   to me that the strategy RFC- 1016 proposes\
    \ for sending SQ's, based on\n   queue length, may be appropriate for Funneling\
    \ Congestion, but\n   inappropriate for Mismatch congestion, as discussed below.\
    \  The host\n   behavior proposed in RFC- 1016 may be appropriate for both cases.\n\
    \   Since we assume that Funneling congestion is the result of short-\n   lived\
    \ phenomena, it is appropriate for gateways which are the sites\n   of this congestion\
    \ to attempt to smooth it without excessive control\n   actions.  This is the\
    \ basis for the \"hint\" in the ICMP specification\n   that maybe an SQ should\
    \ be sent only when a datagram is dropped.  It\n   is the basis for the idea in\
    \ RFC- 1016 that a gateway should be slow\n   to cry \"congestion\" (SQK = 70%\
    \ of queue space filed), even if\n   persistent in attempting to eliminate it\
    \ (SQLW = 50% of queue space\n   filled).  Since Funneling congestion is the result\
    \ of the actions of\n   multiple senders, the growth of internal queues is the\
    \ only\n   reasonable place to watch for its existence or measure its effects.\n\
    \   Mismatch congestion, on the other hand, is the result of incorrect or\n  \
    \ inadequate information about available transmission bandwidth on the\n   part\
    \ of a single sender. The sending host has available to it\n   information about\
    \ destination host capacity (TCP window size and ACK\n   rate) and about local\
    \ link capacity (from the hardware/software\n   interface to the directly-connected\
    \ network), but no real information\n   about the capacity of the Internet path.\
    \  As noted in RFC-1016, hosts\n   can obtain the best throughput if their datagrams\
    \ are never dropped,\n   and the probability of dropped datagrams is minimized\
    \ when hosts send\n   at the appropriate steady-state rate (no \"bunching\").\
    \  Therefore, it\n   is a disservice to a host which is the source of Mismatch\
    \ congestion\n   to wait a \"long\" time before taking control action.  It would\
    \ be\n   preferable to provide immediate feedback, via SQ's, to the host as\n\
    \   soon as datagrams with too short an inter-arrival time begin to\n   arrive.\
    \  The sending host could then immediately (begin to) adjust\n   its behavior\
    \ for the indicated destination.\n   There are, of course, many implementation\
    \ issues which would need to\n   be addressed in order to implement the type of\
    \ SQ-sending behavior\n   suggested here.  Perhaps, though, they are not as severe\
    \ as they\n   might appear.  Two specific issues and possible solutions, are:\n\
    \      1. How should a gateway differentiate between Funneling and\n      mismatch\
    \ congestion?  Perhaps whenever there are more than q\"\n      items on an output\
    \ queue to a slower subnet which have been\n      received from a faster subnet,\
    \ then look to see if any h\" of them\n      have the same source.  It so assume\
    \ Mismatch and send an SQ to\n      that source.  The \"q\" test might be implemented\
    \ by a small set of\n      counters which are incremented when a packet is placed\
    \ on an\n      output queue and decremented when a packet is sent.  The search\n\
    \      for a common source might require more cycles but be performed\n      less\
    \ often.  The value of \"q\" would have to be small enough to\n      give an early\
    \ warning, but bigger than a small multiple of \"h\".\n      The value of \"h\"\
    \ would have to be big enough to avoid triggering\n      on common cases of source\
    \ datagram fragmentation by an\n      intermediate gateway.\n      2. How can\
    \ a gateway determine which subnets are \"slower\" and\n      faster\", as well\
    \ as appropriate inter-arrival times?  There may be\n      lots of clever ways\
    \ for a gateway to measure the dynamic bandwidth\n      of its directly-connected\
    \ subnets.  However, I'm more in favor of\n      starting with configuration parameters\
    \ related to the known (at\n      installation time) general characteristics of\
    \ subnet types (e.g.\n      Ethernet is 10Mbps, ARPANET is 50 Kbps, SATNET is\
    \ 100 Kbps, etc).\n      This sort of approximation is quite adequate for determining\
    \ which\n      subnet is faster, or what inter-arrival time is appropriate for\n\
    \      packets being routed to a slower subnet.\n"
- title: Summary
  contents:
  - "Summary\n   Funneling congestion and Mismatch congestion are qualitatively\n\
    \   different, and it would not be surprising if different SQ-sending\n   strategies\
    \ were best for dealing with them.  RFC- 1016 suggests a\n   specific SQ-sending\
    \ strategy which may be inappropriate for dealing\n   with Mismatch congestion.\
    \  This RFC suggests guidelines for an\n   additional SQ-sending strategy for\
    \ dealing with Mismatch.  Hosts\n   implementing the SQuID algorithm of RFC-1016\
    \ should be expected to\n   achieve better performance if they received SQ's sent\
    \ according to\n   either or both of these strategies.  However, all these ideas\
    \ are\n   still only in half-baked form; real engineering is clearly needed.\n"
