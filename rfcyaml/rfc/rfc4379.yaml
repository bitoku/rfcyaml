- title: __initial_text__
  contents:
  - '   Detecting Multi-Protocol Label Switched (MPLS) Data Plane Failures

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a simple and efficient mechanism that can\
    \ be\n   used to detect data plane failures in Multi-Protocol Label Switching\n\
    \   (MPLS) Label Switched Paths (LSPs).  There are two parts to this\n   document:\
    \ information carried in an MPLS \"echo request\" and \"echo\n   reply\" for the\
    \ purposes of fault detection and isolation, and\n   mechanisms for reliably sending\
    \ the echo reply.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions ................................................3\n  \
    \    1.2. Structure of This Document .................................3\n    \
    \  1.3. Contributors ...............................................3\n   2. Motivation\
    \ ......................................................4\n      2.1. Use of Address\
    \ Range 127/8 .................................4\n   3. Packet Format ...................................................6\n\
    \      3.1. Return Codes ..............................................10\n  \
    \    3.2. Target FEC Stack ..........................................11\n    \
    \       3.2.1. LDP IPv4 Prefix ....................................12\n      \
    \     3.2.2. LDP IPv6 Prefix ....................................13\n        \
    \   3.2.3. RSVP IPv4 LSP ......................................13\n          \
    \ 3.2.4. RSVP IPv6 LSP ......................................14\n           3.2.5.\
    \ VPN IPv4 Prefix ....................................14\n           3.2.6. VPN\
    \ IPv6 Prefix ....................................15\n           3.2.7. L2 VPN\
    \ Endpoint ....................................16\n           3.2.8. FEC 128 Pseudowire\
    \ (Deprecated) ....................16\n           3.2.9. FEC 128 Pseudowire (Current)\
    \ .......................17\n           3.2.10. FEC 129 Pseudowire ................................18\n\
    \           3.2.11. BGP Labeled IPv4 Prefix ...........................19\n  \
    \         3.2.12. BGP Labeled IPv6 Prefix ...........................20\n    \
    \       3.2.13. Generic IPv4 Prefix ...............................20\n      \
    \     3.2.14. Generic IPv6 Prefix ...............................21\n        \
    \   3.2.15. Nil FEC ...........................................21\n      3.3.\
    \ Downstream Mapping ........................................22\n           3.3.1.\
    \ Multipath Information Encoding .....................26\n           3.3.2. Downstream\
    \ Router and Interface ....................28\n      3.4. Pad TLV ...................................................29\n\
    \      3.5. Vendor Enterprise Number ..................................29\n  \
    \    3.6. Interface and Label Stack .................................29\n    \
    \  3.7. Errored TLVs ..............................................31\n      3.8.\
    \ Reply TOS Byte TLV ........................................31\n   4. Theory\
    \ of Operation ............................................32\n      4.1. Dealing\
    \ with Equal-Cost Multi-Path (ECMP) .................32\n      4.2. Testing LSPs\
    \ That Are Used to Carry MPLS Payloads .........33\n      4.3. Sending an MPLS\
    \ Echo Request ..............................33\n      4.4. Receiving an MPLS\
    \ Echo Request ............................34\n           4.4.1. FEC Validation\
    \ .....................................40\n      4.5. Sending an MPLS Echo Reply\
    \ ................................41\n      4.6. Receiving an MPLS Echo Reply\
    \ ..............................42\n      4.7. Issue with VPN IPv4 and IPv6 Prefixes\
    \ .....................42\n      4.8. Non-compliant Routers .....................................43\n\
    \   5. References .....................................................43\n  \
    \    5.1. Normative References ......................................43\n    \
    \  5.2. Informative References ....................................44\n   6. Security\
    \ Considerations ........................................44\n   7. IANA Considerations\
    \ ............................................46\n      7.1. Message Types, Reply\
    \ Modes, Return Codes ..................46\n      7.2. TLVs ......................................................47\n\
    \   8. Acknowledgements ...............................................48\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a simple and efficient mechanism\
    \ that can be\n   used to detect data plane failures in MPLS Label Switched Paths\n\
    \   (LSPs).  There are two parts to this document: information carried in\n  \
    \ an MPLS \"echo request\" and \"echo reply\", and mechanisms for\n   transporting\
    \ the echo reply.  The first part aims at providing enough\n   information to\
    \ check correct operation of the data plane, as well as\n   a mechanism to verify\
    \ the data plane against the control plane, and\n   thereby localize faults. \
    \ The second part suggests two methods of\n   reliable reply channels for the\
    \ echo request message for more robust\n   fault isolation.\n   An important consideration\
    \ in this design is that MPLS echo requests\n   follow the same data path that\
    \ normal MPLS packets would traverse.\n   MPLS echo requests are meant primarily\
    \ to validate the data plane,\n   and secondarily to verify the data plane against\
    \ the control plane.\n   Mechanisms to check the control plane are valuable, but\
    \ are not\n   covered in this document.\n   This document makes special use of\
    \ the address range 127/8.  This is\n   an exception to the behavior defined in\
    \ RFC 1122 [RFC1122] and\n   updates that RFC.  The motivation for this change\
    \ and the details of\n   this exceptional use are discussed in section 2.1 below.\n"
- title: 1.1.  Conventions
  contents:
  - "1.1.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [KEYWORDS].\n   The term \"Must Be Zero\" (MBZ) is used in object descriptions\
    \ for\n   reserved fields.  These fields MUST be set to zero when sent and\n \
    \  ignored on receipt.\n   Terminology pertaining to L2 and L3 Virtual Private\
    \ Networks (VPNs)\n   is defined in [RFC4026].\n   Since this document refers\
    \ to the MPLS Time to Live (TTL) far more\n   frequently than the IP TTL, the\
    \ authors have chosen the convention of\n   using the unqualified \"TTL\" to mean\
    \ \"MPLS TTL\" and using \"IP TTL\" for\n   the TTL value in the IP header.\n"
- title: 1.2.  Structure of This Document
  contents:
  - "1.2.  Structure of This Document\n   The body of this memo contains four main\
    \ parts: motivation, MPLS echo\n   request/reply packet format, LSP ping operation,\
    \ and a reliable\n   return path.  It is suggested that first-time readers skip\
    \ the actual\n   packet formats and read the Theory of Operation first; the document\n\
    \   is structured the way it is to avoid forward references.\n"
- title: 1.3.  Contributors
  contents:
  - "1.3.  Contributors\n   The following made vital contributions to all aspects\
    \ of this\n   document, and much of the material came out of debate and discussion\n\
    \   among this group.\n      Ronald P. Bonica, Juniper Networks, Inc.\n      Dave\
    \ Cooper, Global Crossing\n      Ping Pan, Hammerhead Systems\n      Nischal Sheth,\
    \ Juniper Networks, Inc.\n      Sanjay Wadhwa, Juniper Networks, Inc.\n"
- title: 2.  Motivation
  contents:
  - "2.  Motivation\n   When an LSP fails to deliver user traffic, the failure cannot\
    \ always\n   be detected by the MPLS control plane.  There is a need to provide\
    \ a\n   tool that would enable users to detect such traffic \"black holes\" or\n\
    \   misrouting within a reasonable period of time, and a mechanism to\n   isolate\
    \ faults.\n   In this document, we describe a mechanism that accomplishes these\n\
    \   goals.  This mechanism is modeled after the ping/traceroute paradigm:\n  \
    \ ping (ICMP echo request [ICMP]) is used for connectivity checks, and\n   traceroute\
    \ is used for hop-by-hop fault localization as well as path\n   tracing.  This\
    \ document specifies a \"ping\" mode and a \"traceroute\"\n   mode for testing\
    \ MPLS LSPs.\n   The basic idea is to verify that packets that belong to a particular\n\
    \   Forwarding Equivalence Class (FEC) actually end their MPLS path on a\n   Label\
    \ Switching Router (LSR) that is an egress for that FEC.  This\n   document proposes\
    \ that this test be carried out by sending a packet\n   (called an \"MPLS echo\
    \ request\") along the same data path as other\n   packets belonging to this FEC.\
    \  An MPLS echo request also carries\n   information about the FEC whose MPLS\
    \ path is being verified.  This\n   echo request is forwarded just like any other\
    \ packet belonging to\n   that FEC.  In \"ping\" mode (basic connectivity check),\
    \ the packet\n   should reach the end of the path, at which point it is sent to\
    \ the\n   control plane of the egress LSR, which then verifies whether it is\n\
    \   indeed an egress for the FEC.  In \"traceroute\" mode (fault\n   isolation),\
    \ the packet is sent to the control plane of each transit\n   LSR, which performs\
    \ various checks that it is indeed a transit LSR\n   for this path; this LSR also\
    \ returns further information that helps\n   check the control plane against the\
    \ data plane, i.e., that forwarding\n   matches what the routing protocols determined\
    \ as the path.\n   One way these tools can be used is to periodically ping an\
    \ FEC to\n   ensure connectivity.  If the ping fails, one can then initiate a\n\
    \   traceroute to determine where the fault lies.  One can also\n   periodically\
    \ traceroute FECs to verify that forwarding matches the\n   control plane; however,\
    \ this places a greater burden on transit LSRs\n   and thus should be used with\
    \ caution.\n"
- title: 2.1.  Use of Address Range 127/8
  contents:
  - "2.1.  Use of Address Range 127/8\n   As described above, LSP ping is intended\
    \ as a diagnostic tool.  It is\n   intended to enable providers of an MPLS-based\
    \ service to isolate\n   network faults.  In particular, LSP ping needs to diagnose\
    \ situations\n   where the control and data planes are out of sync.  It performs\
    \ this\n   by routing an MPLS echo request packet based solely on its label\n\
    \   stack.  That is, the IP destination address is never used in a\n   forwarding\
    \ decision.  In fact, the sender of an MPLS echo request\n   packet may not know,\
    \ a priori, the address of the router at the end\n   of the LSP.\n   Providers\
    \ of MPLS-based services also need the ability to trace all\n   of the possible\
    \ paths that an LSP may take.  Since most MPLS services\n   are based on IP unicast\
    \ forwarding, these paths are subject to\n   equal-cost multi-path (ECMP) load\
    \ sharing.\n   This leads to the following requirements:\n   1. Although the LSP\
    \ in question may be broken in unknown ways, the\n      likelihood of a diagnostic\
    \ packet being delivered to a user of an\n      MPLS service MUST be held to an\
    \ absolute minimum.\n   2. If an LSP is broken in such a way that it prematurely\
    \ terminates,\n      the diagnostic packet MUST NOT be IP forwarded.\n   3. A\
    \ means of varying the diagnostic packets such that they exercise\n      all ECMP\
    \ paths is thus REQUIRED.\n   Clearly, using general unicast addresses satisfies\
    \ neither of the\n   first two requirements.  A number of other options for addresses\
    \ were\n   considered, including a portion of the private address space (as\n\
    \   determined by the network operator) and the newly designated IPv4\n   link\
    \ local addresses.  Use of the private address space was deemed\n   ineffective\
    \ since the leading MPLS-based service is an IPv4 Virtual\n   Private Network\
    \ (VPN).  VPNs often use private addresses.\n   The IPv4 link local addresses\
    \ are more attractive in that the scope\n   over which they can be forwarded is\
    \ limited.  However, if one were to\n   use an address from this range, it would\
    \ still be possible for the\n   first recipient of a diagnostic packet that \"\
    escaped\" from a broken\n   LSP to have that address assigned to the interface\
    \ on which it\n   arrived and thus could mistakenly receive such a packet.\n \
    \  Furthermore, the IPv4 link local address range has only recently been\n   allocated.\
    \  Many deployed routers would forward a packet with an\n   address from that\
    \ range toward the default route.\n   The 127/8 range for IPv4 and that same range\
    \ embedded in as IPv4-\n   mapped IPv6 addresses for IPv6 was chosen for a number\
    \ of reasons.\n   RFC 1122 allocates the 127/8 as \"Internal host loopback address\"\
    \ and\n   states: \"Addresses of this form MUST NOT appear outside a host.\"\n\
    \   Thus, the default behavior of hosts is to discard such packets.  This\n  \
    \ helps to ensure that if a diagnostic packet is misdirected to a host,\n   it\
    \ will be silently discarded.\n   RFC 1812 [RFC1812] states:\n      A router SHOULD\
    \ NOT forward, except over a loopback interface, any\n      packet that has a\
    \ destination address on network 127.  A router\n      MAY have a switch that\
    \ allows the network manager to disable these\n      checks.  If such a switch\
    \ is provided, it MUST default to\n      performing the checks.\n   This helps\
    \ to ensure that diagnostic packets are never IP forwarded.\n   The 127/8 address\
    \ range provides 16M addresses allowing wide\n   flexibility in varying addresses\
    \ to exercise ECMP paths.  Finally, as\n   an implementation optimization, the\
    \ 127/8 provides an easy means of\n   identifying possible LSP packets.\n"
- title: 3.  Packet Format
  contents:
  - "3.  Packet Format\n   An MPLS echo request is a (possibly labeled) IPv4 or IPv6\
    \ UDP packet;\n   the contents of the UDP packet have the following format:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Version Number        |         Global Flags          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Message Type |   Reply mode  |  Return Code  | Return Subcode|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Sender's Handle                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    TimeStamp Sent (seconds)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  TimeStamp Sent (microseconds)                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  TimeStamp Received (seconds)                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                TimeStamp Received (microseconds)              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            TLVs ...                           |\n   \
    \   .                                                               .\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Version Number is currently 1.  (Note: the version number is to\n   be\
    \ incremented whenever a change is made that affects the ability of\n   an implementation\
    \ to correctly parse or process an MPLS echo\n   request/reply.  These changes\
    \ include any syntactic or semantic\n   changes made to any of the fixed fields,\
    \ or to any Type-Length-Value\n   (TLV) or sub-TLV assignment or format that is\
    \ defined at a certain\n   version number.  The version number may not need to\
    \ be changed if an\n   optional TLV or sub-TLV is added.)\n   The Global Flags\
    \ field is a bit vector with the following format:\n       0                 \
    \  1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             MBZ             |V|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   One flag is defined for now, the V bit; the rest MUST be set to zero\n   when\
    \ sending and ignored on receipt.\n   The V (Validate FEC Stack) flag is set to\
    \ 1 if the sender wants the\n   receiver to perform FEC Stack validation; if V\
    \ is 0, the choice is\n   left to the receiver.\n   The Message Type is one of\
    \ the following:\n      Value    Meaning\n      -----    -------\n          1\
    \    MPLS echo request\n          2    MPLS echo reply\n   The Reply Mode can\
    \ take one of the following values:\n      Value    Meaning\n      -----    -------\n\
    \          1    Do not reply\n          2    Reply via an IPv4/IPv6 UDP packet\n\
    \          3    Reply via an IPv4/IPv6 UDP packet with Router Alert\n        \
    \  4    Reply via application level control channel\n   An MPLS echo request with\
    \ 1 (Do not reply) in the Reply Mode field\n   may be used for one-way connectivity\
    \ tests; the receiving router may\n   log gaps in the Sequence Numbers and/or\
    \ maintain delay/jitter\n   statistics.  An MPLS echo request would normally have\
    \ 2 (Reply via an\n   IPv4/IPv6 UDP packet) in the Reply Mode field.  If the normal\
    \ IP\n   return path is deemed unreliable, one may use 3 (Reply via an\n   IPv4/IPv6\
    \ UDP packet with Router Alert).  Note that this requires\n   that all intermediate\
    \ routers understand and know how to forward MPLS\n   echo replies.  The echo\
    \ reply uses the same IP version number as the\n   received echo request, i.e.,\
    \ an IPv4 encapsulated echo reply is sent\n   in response to an IPv4 encapsulated\
    \ echo request.\n   Some applications support an IP control channel.  One such\
    \ example is\n   the associated control channel defined in Virtual Circuit\n \
    \  Connectivity Verification (VCCV) [VCCV].  Any application that\n   supports\
    \ an IP control channel between its control entities may set\n   the Reply Mode\
    \ to 4 (Reply via application level control channel) to\n   ensure that replies\
    \ use that same channel.  Further definition of\n   this codepoint is application\
    \ specific and thus beyond the scope of\n   this document.\n   Return Codes and\
    \ Subcodes are described in the next section.\n   The Sender's Handle is filled\
    \ in by the sender, and returned\n   unchanged by the receiver in the echo reply\
    \ (if any).  There are no\n   semantics associated with this handle, although\
    \ a sender may find\n   this useful for matching up requests with replies.\n \
    \  The Sequence Number is assigned by the sender of the MPLS echo\n   request\
    \ and can be (for example) used to detect missed replies.\n   The TimeStamp Sent\
    \ is the time-of-day (in seconds and microseconds,\n   according to the sender's\
    \ clock) in NTP format [NTP] when the MPLS\n   echo request is sent.  The TimeStamp\
    \ Received in an echo reply is the\n   time-of-day (according to the receiver's\
    \ clock) in NTP format that\n   the corresponding echo request was received.\n\
    \   TLVs (Type-Length-Value tuples) have the following format:\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type              |            Length             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Value                             |\n      .   \
    \                                                            .\n      .      \
    \                                                         .\n      .         \
    \                                                      .\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Types are defined below; Length is the length of the Value field in\n   octets.\
    \  The Value field depends on the Type; it is zero padded to\n   align to a 4-octet\
    \ boundary.  TLVs may be nested within other TLVs,\n   in which case the nested\
    \ TLVs are called sub-TLVs.  Sub-TLVs have\n   independent types and MUST also\
    \ be 4-octet aligned.\n   Two examples follow.  The Label Distribution Protocol\
    \ (LDP) IPv4 FEC\n   sub-TLV has the following format:\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Type = 1 (LDP IPv4 FEC)    |          Length = 5           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          IPv4 prefix                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ Length for this TLV is 5.  A Target FEC Stack TLV that contains\n   an LDP IPv4\
    \ FEC sub-TLV and a VPN IPv4 prefix sub-TLV has the\n   following format:\n  \
    \     0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      Type = 1 (FEC TLV)       |          Length = 12          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  sub-Type = 1 (LDP IPv4 FEC)  |          Length = 5           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv4 prefix                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |         Must Be Zero                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | sub-Type = 6 (VPN IPv4 prefix)|          Length = 13          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Route Distinguisher                      |\n      |   \
    \                       (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv4 prefix                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |                 Must Be Zero                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   A description of the Types and Values of the top-level TLVs for LSP\n   ping\
    \ are given below:\n          Type #                  Value Field\n          ------\
    \                  -----------\n               1                  Target FEC Stack\n\
    \               2                  Downstream Mapping\n               3      \
    \            Pad\n               4                  Not Assigned\n           \
    \    5                  Vendor Enterprise Number\n               6           \
    \       Not Assigned\n               7                  Interface and Label Stack\n\
    \               8                  Not Assigned\n               9            \
    \      Errored TLVs\n              10                  Reply TOS Byte\n   Types\
    \ less than 32768 (i.e., with the high-order bit equal to 0) are\n   mandatory\
    \ TLVs that MUST either be supported by an implementation or\n   result in the\
    \ return code of 2 (\"One or more of the TLVs was not\n   understood\") being\
    \ sent in the echo response.\n   Types greater than or equal to 32768 (i.e., with\
    \ the high-order bit\n   equal to 1) are optional TLVs that SHOULD be ignored\
    \ if the\n   implementation does not understand or support them.\n"
- title: 3.1.  Return Codes
  contents:
  - "3.1.  Return Codes\n   The Return Code is set to zero by the sender.  The receiver\
    \ can set\n   it to one of the values listed below.  The notation <RSC> refers\
    \ to\n   the Return Subcode.  This field is filled in with the stack-depth for\n\
    \   those codes that specify that.  For all other codes, the Return\n   Subcode\
    \ MUST be set to zero.\n          Value    Meaning\n          -----    -------\n\
    \              0    No return code\n              1    Malformed echo request\
    \ received\n              2    One or more of the TLVs was not understood\n  \
    \            3    Replying router is an egress for the FEC at stack-\n       \
    \            depth <RSC>\n              4    Replying router has no mapping for\
    \ the FEC at stack-\n                   depth <RSC>\n              5    Downstream\
    \ Mapping Mismatch (See Note 1)\n              6    Upstream Interface Index Unknown\
    \ (See Note 1)\n              7    Reserved\n              8    Label switched\
    \ at stack-depth <RSC>\n              9    Label switched but no MPLS forwarding\
    \ at stack-depth\n                   <RSC>\n             10    Mapping for this\
    \ FEC is not the given label at stack-\n                   depth <RSC>\n     \
    \        11    No label entry at stack-depth <RSC>\n             12    Protocol\
    \ not associated with interface at FEC stack-\n                   depth <RSC>\n\
    \             13    Premature termination of ping due to label stack\n       \
    \            shrinking to a single label\n   Note 1\n      The Return Subcode\
    \ contains the point in the label stack where\n      processing was terminated.\
    \  If the RSC is 0, no labels were\n      processed.  Otherwise the packet would\
    \ have been label switched at\n      depth RSC.\n"
- title: 3.2.  Target FEC Stack
  contents:
  - "3.2.  Target FEC Stack\n   A Target FEC Stack is a list of sub-TLVs.  The number\
    \ of elements is\n   determined by looking at the sub-TLV length fields.\n   \
    \   Sub-Type       Length            Value Field\n      --------       ------\
    \            -----------\n             1            5            LDP IPv4 prefix\n\
    \             2           17            LDP IPv6 prefix\n             3      \
    \     20            RSVP IPv4 LSP\n             4           56            RSVP\
    \ IPv6 LSP\n             5                         Not Assigned\n            \
    \ 6           13            VPN IPv4 prefix\n             7           25     \
    \       VPN IPv6 prefix\n             8           14            L2 VPN endpoint\n\
    \             9           10            \"FEC 128\" Pseudowire (deprecated)\n\
    \            10           14            \"FEC 128\" Pseudowire\n            11\
    \          16+            \"FEC 129\" Pseudowire\n            12            5\
    \            BGP labeled IPv4 prefix\n            13           17            BGP\
    \ labeled IPv6 prefix\n            14            5            Generic IPv4 prefix\n\
    \            15           17            Generic IPv6 prefix\n            16  \
    \          4            Nil FEC\n   Other FEC Types will be defined as needed.\n\
    \   Note that this TLV defines a stack of FECs, the first FEC element\n   corresponding\
    \ to the top of the label stack, etc.\n   An MPLS echo request MUST have a Target\
    \ FEC Stack that describes the\n   FEC Stack being tested.  For example, if an\
    \ LSR X has an LDP mapping\n   [LDP] for 192.168.1.1 (say, label 1001), then to\
    \ verify that label\n   1001 does indeed reach an egress LSR that announced this\
    \ prefix via\n   LDP, X can send an MPLS echo request with an FEC Stack TLV with\
    \ one\n   FEC in it, namely, of type LDP IPv4 prefix, with prefix\n   192.168.1.1/32,\
    \ and send the echo request with a label of 1001.\n   Say LSR X wanted to verify\
    \ that a label stack of <1001, 23456> is the\n   right label stack to use to reach\
    \ a VPN IPv4 prefix [see section\n   3.2.5] of 10/8 in VPN foo.  Say further that\
    \ LSR Y with loopback\n   address 192.168.1.1 announced prefix 10/8 with Route\
    \ Distinguisher\n   RD-foo-Y (which may in general be different from the Route\n\
    \   Distinguisher that LSR X uses in its own advertisements for VPN foo),\n  \
    \ label 23456 and BGP next hop 192.168.1.1 [BGP].  Finally, suppose\n   that LSR\
    \ X receives a label binding of 1001 for 192.168.1.1 via LDP.\n   X has two choices\
    \ in sending an MPLS echo request: X can send an MPLS\n   echo request with an\
    \ FEC Stack TLV with a single FEC of type VPN IPv4\n   prefix with a prefix of\
    \ 10/8 and a Route Distinguisher of RD-foo-Y.\n   Alternatively, X can send an\
    \ FEC Stack TLV with two FECs, the first\n   of type LDP IPv4 with a prefix of\
    \ 192.168.1.1/32 and the second of\n   type of IP VPN with a prefix 10/8 with\
    \ Route Distinguisher of RD-\n   foo-Y.  In either case, the MPLS echo request\
    \ would have a label\n   stack of <1001, 23456>.  (Note: in this example, 1001\
    \ is the \"outer\"\n   label and 23456 is the \"inner\" label.)\n"
- title: 3.2.1.  LDP IPv4 Prefix
  contents:
  - "3.2.1.  LDP IPv4 Prefix\n   The IPv4 Prefix FEC is defined in [LDP].  When an\
    \ LDP IPv4 prefix is\n   encoded in a label stack, the following format is used.\
    \  The value\n   consists of 4 octets of an IPv4 prefix followed by 1 octet of\
    \ prefix\n   length in bits; the format is given below.  The IPv4 prefix is in\n\
    \   network byte order; if the prefix is shorter than 32 bits, trailing\n   bits\
    \ SHOULD be set to zero.  See [LDP] for an example of a Mapping\n   for an IPv4\
    \ FEC.\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          IPv4 prefix                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.2.  LDP IPv6 Prefix
  contents:
  - "3.2.2.  LDP IPv6 Prefix\n   The IPv6 Prefix FEC is defined in [LDP].  When an\
    \ LDP IPv6 prefix is\n   encoded in a label stack, the following format is used.\
    \  The value\n   consists of 16 octets of an IPv6 prefix followed by 1 octet of\
    \ prefix\n   length in bits; the format is given below.  The IPv6 prefix is in\n\
    \   network byte order; if the prefix is shorter than 128 bits, the\n   trailing\
    \ bits SHOULD be set to zero.  See [LDP] for an example of a\n   Mapping for an\
    \ IPv6 FEC.\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                          IPv6 prefix                          |\n      |\
    \                          (16 octets)                          |\n      |   \
    \                                                            |\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.3.  RSVP IPv4 LSP
  contents:
  - "3.2.3.  RSVP IPv4 LSP\n   The value has the format below.  The value fields are\
    \ taken from RFC\n   3209, sections 4.6.1.1 and 4.6.2.1.  See [RSVP-TE].\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 IPv4 tunnel end point address                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Must Be Zero         |     Tunnel ID                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Extended Tunnel ID                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   IPv4 tunnel sender address                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |            LSP ID             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.4.  RSVP IPv6 LSP
  contents:
  - "3.2.4.  RSVP IPv6 LSP\n   The value has the format below.  The value fields are\
    \ taken from RFC\n   3209, sections 4.6.1.2 and 4.6.2.2.  See [RSVP-TE].\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 IPv6 tunnel end point address                 |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |          Tunnel ID            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Extended Tunnel ID                      |\n      |   \
    \                                                            |\n      |      \
    \                                                         |\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   IPv6 tunnel sender address                  |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |            LSP ID             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.5.  VPN IPv4 Prefix
  contents:
  - "3.2.5.  VPN IPv4 Prefix\n   VPN-IPv4 Network Layer Routing Information (NLRI)\
    \ is defined in\n   [RFC4365].  This document uses the term VPN IPv4 prefix for\
    \ a VPN-\n   IPv4 NLRI that has been advertised with an MPLS label in BGP.  See\n\
    \   [BGP-LABEL].\n   When a VPN IPv4 prefix is encoded in a label stack, the following\n\
    \   format is used.  The value field consists of the Route Distinguisher\n   advertised\
    \ with the VPN IPv4 prefix, the IPv4 prefix (with trailing 0\n   bits to make\
    \ 32 bits in all), and a prefix length, as follows:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Route Distinguisher                      |\n   \
    \   |                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv4 prefix                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |                 Must Be Zero                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Route Distinguisher (RD) is an 8-octet identifier; it does not\n   contain\
    \ any inherent information.  The purpose of the RD is solely to\n   allow one\
    \ to create distinct routes to a common IPv4 address prefix.\n   The encoding\
    \ of the RD is not important here.  When matching this\n   field to the local\
    \ FEC information, it is treated as an opaque value.\n"
- title: 3.2.6.  VPN IPv6 Prefix
  contents:
  - "3.2.6.  VPN IPv6 Prefix\n   VPN-IPv6 Network Layer Routing Information (NLRI)\
    \ is defined in\n   [RFC4365].  This document uses the term VPN IPv6 prefix for\
    \ a VPN-\n   IPv6 NLRI that has been advertised with an MPLS label in BGP.  See\n\
    \   [BGP-LABEL].\n   When a VPN IPv6 prefix is encoded in a label stack, the following\n\
    \   format is used.  The value field consists of the Route Distinguisher\n   advertised\
    \ with the VPN IPv6 prefix, the IPv6 prefix (with trailing 0\n   bits to make\
    \ 128 bits in all), and a prefix length, as follows:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Route Distinguisher                      |\n   \
    \   |                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv6 prefix                           |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ Route Distinguisher is identical to the VPN IPv4 Prefix RD,\n   except that\
    \ it functions here to allow the creation of distinct\n   routes to IPv6 prefixes.\
    \  See section 3.2.5.  When matching this\n   field to local FEC information,\
    \ it is treated as an opaque value.\n"
- title: 3.2.7.  L2 VPN Endpoint
  contents:
  - "3.2.7.  L2 VPN Endpoint\n   VPLS stands for Virtual Private LAN Service.  The\
    \ terms VPLS BGP NLRI\n   and VE ID (VPLS Edge Identifier) are defined in [VPLS-BGP].\
    \  This\n   document uses the simpler term L2 VPN endpoint when referring to a\n\
    \   VPLS BGP NLRI.  The Route Distinguisher is an 8-octet identifier used\n  \
    \ to distinguish information about various L2 VPNs advertised by a\n   node. \
    \ The VE ID is a 2-octet identifier used to identify a\n   particular node that\
    \ serves as the service attachment point within a\n   VPLS.  The structure of\
    \ these two identifiers is unimportant here;\n   when matching these fields to\
    \ local FEC information, they are treated\n   as opaque values.  The encapsulation\
    \ type is identical to the PW Type\n   in section 3.2.8 below.\n   When an L2\
    \ VPN endpoint is encoded in a label stack, the following\n   format is used.\
    \  The value field consists of a Route Distinguisher (8\n   octets), the sender\
    \ (of the ping)'s VE ID (2 octets), the receiver's\n   VE ID (2 octets), and an\
    \ encapsulation type (2 octets), formatted as\n   follows:\n       0         \
    \          1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Route Distinguisher                      |\n   \
    \   |                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Sender's VE ID        |       Receiver's VE ID        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Encapsulation Type       |         Must Be Zero          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.8.  FEC 128 Pseudowire (Deprecated)
  contents:
  - "3.2.8.  FEC 128 Pseudowire (Deprecated)\n   FEC 128 (0x80) is defined in [PW-CONTROL],\
    \ as are the terms PW ID\n   (Pseudowire ID) and PW Type (Pseudowire Type).  A\
    \ PW ID is a non-zero\n   32-bit connection ID.  The PW Type is a 15-bit number\
    \ indicating the\n   encapsulation type.  It is carried right justified in the\
    \ field below\n   termed encapsulation type with the high-order bit set to zero.\
    \  Both\n   of these fields are treated in this protocol as opaque values.\n \
    \  When an FEC 128 is encoded in a label stack, the following format is\n   used.\
    \  The value field consists of the remote PE address (the\n   destination address\
    \ of the targeted LDP session), the PW ID, and the\n   encapsulation type as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Remote PE Address                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             PW ID                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            PW Type            |          Must Be Zero         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   This\
    \ FEC is deprecated and is retained only for backward\n   compatibility.  Implementations\
    \ of LSP ping SHOULD accept and process\n   this TLV, but SHOULD send LSP ping\
    \ echo requests with the new TLV\n   (see next section), unless explicitly configured\
    \ to use the old TLV.\n   An LSR receiving this TLV SHOULD use the source IP address\
    \ of the LSP\n   echo request to infer the sender's PE address.\n"
- title: 3.2.9.  FEC 128 Pseudowire (Current)
  contents:
  - "3.2.9.  FEC 128 Pseudowire (Current)\n   FEC 128 (0x80) is defined in [PW-CONTROL],\
    \ as are the terms PW ID\n   (Pseudowire ID) and PW Type (Pseudowire Type).  A\
    \ PW ID is a non-zero\n   32-bit connection ID.  The PW Type is a 15-bit number\
    \ indicating the\n   encapsulation type.  It is carried right justified in the\
    \ field below\n   termed encapsulation type with the high-order bit set to zero.\n\
    \   Both of these fields are treated in this protocol as opaque values.\n   When\
    \ matching these field to the local FEC information, the match\n   MUST be exact.\n\
    \   When an FEC 128 is encoded in a label stack, the following format is\n   used.\
    \  The value field consists of the sender's PE address (the\n   source address\
    \ of the targeted LDP session), the remote PE address\n   (the destination address\
    \ of the targeted LDP session), the PW ID, and\n   the encapsulation type as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Sender's PE Address                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Remote PE Address                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             PW ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \            PW Type            |          Must Be Zero         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.10.  FEC 129 Pseudowire
  contents:
  - "3.2.10.  FEC 129 Pseudowire\n   FEC 129 (0x81) and the terms PW Type, Attachment\
    \ Group Identifier\n   (AGI), Attachment Group Identifier Type (AGI Type), Attachment\n\
    \   Individual Identifier Type (AII Type), Source Attachment Individual\n   Identifier\
    \ (SAII), and Target Attachment Individual Identifier (TAII)\n   are defined in\
    \ [PW-CONTROL].  The PW Type is a 15-bit number\n   indicating the encapsulation\
    \ type.  It is carried right justified in\n   the field below PW Type with the\
    \ high-order bit set to zero.  All the\n   other fields are treated as opaque\
    \ values and copied directly from\n   the FEC 129 format.  All of these values\
    \ together uniquely define the\n   FEC within the scope of the LDP session identified\
    \ by the source and\n   remote PE addresses.\n   When an FEC 129 is encoded in\
    \ a label stack, the following format is\n   used.  The Length of this TLV is\
    \ 16 + AGI length + SAII length + TAII\n   length.  Padding is used to make the\
    \ total length a multiple of 4;\n   the length of the padding is not included\
    \ in the Length field.\n       0                   1                   2     \
    \              3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Sender's PE Address                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Remote PE Address                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            PW Type            |   AGI Type    |  AGI Length   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                           AGI Value                           ~\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   AII Type    |  SAII Length  |      SAII Value               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                    SAII Value (continued)                     ~\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   AII Type    |  TAII Length  |      TAII Value               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                    TAII Value (continued)                     ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  TAII (cont.) |  0-3 octets of zero padding                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.11.  BGP Labeled IPv4 Prefix
  contents:
  - "3.2.11.  BGP Labeled IPv4 Prefix\n   BGP labeled IPv4 prefixes are defined in\
    \ [BGP-LABEL].  When a BGP\n   labeled IPv4 prefix is encoded in a label stack,\
    \ the following format\n   is used.  The value field consists the IPv4 prefix\
    \ (with trailing 0\n   bits to make 32 bits in all), and the prefix length, as\
    \ follows:\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                          IPv4 Prefix                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.12.  BGP Labeled IPv6 Prefix
  contents:
  - "3.2.12.  BGP Labeled IPv6 Prefix\n   BGP labeled IPv6 prefixes are defined in\
    \ [BGP-LABEL].  When a BGP\n   labeled IPv6 prefix is encoded in a label stack,\
    \ the following format\n   is used.  The value consists of 16 octets of an IPv6\
    \ prefix followed\n   by 1 octet of prefix length in bits; the format is given\
    \ below.  The\n   IPv6 prefix is in network byte order; if the prefix is shorter\
    \ than\n   128 bits, the trailing bits SHOULD be set to zero.\n       0      \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv6 prefix                          |\n   \
    \   |                          (16 octets)                          |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.13.  Generic IPv4 Prefix
  contents:
  - "3.2.13.  Generic IPv4 Prefix\n   The value consists of 4 octets of an IPv4 prefix\
    \ followed by 1 octet\n   of prefix length in bits; the format is given below.\
    \  The IPv4 prefix\n   is in network byte order; if the prefix is shorter than\
    \ 32 bits,\n   trailing bits SHOULD be set to zero.  This FEC is used if the\n\
    \   protocol advertising the label is unknown or may change during the\n   course\
    \ of the LSP.  An example is an inter-AS LSP that may be\n   signaled by LDP in\
    \ one Autonomous System (AS), by RSVP-TE [RSVP-TE]\n   in another AS, and by BGP\
    \ between the ASes, such as is common for\n   inter-AS VPNs.\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv4 prefix                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |         Must Be Zero                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.14.  Generic IPv6 Prefix
  contents:
  - "3.2.14.  Generic IPv6 Prefix\n   The value consists of 16 octets of an IPv6 prefix\
    \ followed by 1 octet\n   of prefix length in bits; the format is given below.\
    \  The IPv6 prefix\n   is in network byte order; if the prefix is shorter than\
    \ 128 bits, the\n   trailing bits SHOULD be set to zero.\n       0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv6 prefix                          |\n   \
    \   |                          (16 octets)                          |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.15.  Nil FEC
  contents:
  - "3.2.15.  Nil FEC\n   At times, labels from the reserved range, e.g., Router Alert\
    \ and\n   Explicit-null, may be added to the label stack for various diagnostic\n\
    \   purposes such as influencing load-balancing.  These labels may have\n   no\
    \ explicit FEC associated with them.  The Nil FEC Stack is defined\n   to allow\
    \ a Target FEC Stack sub-TLV to be added to the Target FEC\n   Stack to account\
    \ for such labels so that proper validation can still\n   be performed.\n   The\
    \ Length is 4.  Labels are 20-bit values treated as numbers.\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 Label                 |          MBZ          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Label\
    \ is the actual label value inserted in the label stack; the MBZ\n   fields MUST\
    \ be zero when sent and ignored on receipt.\n"
- title: 3.3.  Downstream Mapping
  contents:
  - "3.3.  Downstream Mapping\n   The Downstream Mapping object is a TLV that MAY\
    \ be included in an\n   echo request message.  Only one Downstream Mapping object\
    \ may appear\n   in an echo request.  The presence of a Downstream Mapping object\
    \ is a\n   request that Downstream Mapping objects be included in the echo\n \
    \  reply.  If the replying router is the destination of the FEC, then a\n   Downstream\
    \ Mapping TLV SHOULD NOT be included in the echo reply.\n   Otherwise the replying\
    \ router SHOULD include a Downstream Mapping\n   object for each interface over\
    \ which this FEC could be forwarded.\n   For a more precise definition of the\
    \ notion of \"downstream\", see\n   section 3.3.2, \"Downstream Router and Interface\"\
    .\n   The Length is K + M + 4*N octets, where M is the Multipath Length,\n   and\
    \ N is the number of Downstream Labels.  Values for K are found in\n   the description\
    \ of Address Type below.  The Value field of a\n   Downstream Mapping has the\
    \ following format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               MTU             | Address Type  |    DS Flags   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \             Downstream IP Address (4 or 16 octets)            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Downstream Interface Address (4 or 16 octets)         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Multipath Type| Depth Limit   |        Multipath Length       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                     (Multipath Information)                   .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Maximum\
    \ Transmission Unit (MTU)\n      The MTU is the size in octets of the largest\
    \ MPLS frame (including\n      label stack) that fits on the interface to the\
    \ Downstream LSR.\n   Address Type\n      The Address Type indicates if the interface\
    \ is numbered or\n      unnumbered.  It also determines the length of the Downstream\
    \ IP\n      Address and Downstream Interface fields.  The resulting total for\n\
    \      the initial part of the TLV is listed in the table below as \"K\n     \
    \ Octets\".  The Address Type is set to one of the following values:\n       \
    \  Type #        Address Type           K Octets\n         ------        ------------\
    \           --------\n              1        IPv4 Numbered                16\n\
    \              2        IPv4 Unnumbered              16\n              3     \
    \   IPv6 Numbered                40\n              4        IPv6 Unnumbered  \
    \            28\n   DS Flags\n      The DS Flags field is a bit vector with the\
    \ following format:\n          0 1 2 3 4 5 6 7\n         +-+-+-+-+-+-+-+-+\n \
    \        | Rsvd(MBZ) |I|N|\n         +-+-+-+-+-+-+-+-+\n      Two flags are defined\
    \ currently, I and N.  The remaining flags\n      MUST be set to zero when sending\
    \ and ignored on receipt.\n      Flag  Name and Meaning\n      ----  ----------------\n\
    \         I  Interface and Label Stack Object Request\n            When this flag\
    \ is set, it indicates that the replying\n            router SHOULD include an\
    \ Interface and Label Stack\n            Object in the echo reply message.\n \
    \        N  Treat as a Non-IP Packet\n            Echo request messages will be\
    \ used to diagnose non-IP\n            flows.  However, these messages are carried\
    \ in IP\n            packets.  For a router that alters its ECMP algorithm\n \
    \           based on the FEC or deep packet examination, this flag\n         \
    \   requests that the router treat this as it would if the\n            determination\
    \ of an IP payload had failed.\n   Downstream IP Address and Downstream Interface\
    \ Address\n      IPv4 addresses and interface indices are encoded in 4 octets;\
    \ IPv6\n      addresses are encoded in 16 octets.\n      If the interface to the\
    \ downstream LSR is numbered, then the\n      Address Type MUST be set to IPv4\
    \ or IPv6, the Downstream IP\n      Address MUST be set to either the downstream\
    \ LSR's Router ID or\n      the interface address of the downstream LSR, and the\
    \ Downstream\n      Interface Address MUST be set to the downstream LSR's interface\n\
    \      address.\n      If the interface to the downstream LSR is unnumbered, the\
    \ Address\n      Type MUST be IPv4 Unnumbered or IPv6 Unnumbered, the Downstream\
    \ IP\n      Address MUST be the downstream LSR's Router ID, and the Downstream\n\
    \      Interface Address MUST be set to the index assigned by the\n      upstream\
    \ LSR to the interface.\n      If an LSR does not know the IP address of its neighbor,\
    \ then it\n      MUST set the Address Type to either IPv4 Unnumbered or IPv6\n\
    \      Unnumbered.  For IPv4, it must set the Downstream IP Address to\n     \
    \ 127.0.0.1; for IPv6 the address is set to 0::1.  In both cases,\n      the interface\
    \ index MUST be set to 0.  If an LSR receives an Echo\n      Request packet with\
    \ either of these addresses in the Downstream IP\n      Address field, this indicates\
    \ that it MUST bypass interface\n      verification but continue with label validation.\n\
    \      If the originator of an Echo Request packet wishes to obtain\n      Downstream\
    \ Mapping information but does not know the expected\n      label stack, then\
    \ it SHOULD set the Address Type to either IPv4\n      Unnumbered or IPv6 Unnumbered.\
    \  For IPv4, it MUST set the\n      Downstream IP Address to 224.0.0.2; for IPv6\
    \ the address MUST be\n      set to FF02::2.  In both cases, the interface index\
    \ MUST be set to\n      0.  If an LSR receives an Echo Request packet with the\
    \ all-routers\n      multicast address, then this indicates that it MUST bypass\
    \ both\n      interface and label stack validation, but return Downstream\n  \
    \    Mapping TLVs using the information provided.\n   Multipath Type\n      The\
    \ following Multipath Types are defined:\n      Key   Type                  Multipath\
    \ Information\n      ---   ----------------      ---------------------\n     \
    \  0    no multipath          Empty (Multipath Length = 0)\n       2    IP address\
    \            IP addresses\n       4    IP address range      low/high address\
    \ pairs\n       8    Bit-masked IP         IP address prefix and bit mask\n  \
    \            address set\n       9    Bit-masked label set  Label prefix and bit\
    \ mask\n      Type 0 indicates that all packets will be forwarded out this one\n\
    \      interface.\n      Types 2, 4, 8, and 9 specify that the supplied Multipath\n\
    \      Information will serve to exercise this path.\n   Depth Limit\n      The\
    \ Depth Limit is applicable only to a label stack and is the\n      maximum number\
    \ of labels considered in the hash; this SHOULD be\n      set to zero if unspecified\
    \ or unlimited.\n   Multipath Length\n      The length in octets of the Multipath\
    \ Information.\n   Multipath Information\n      Address or label values encoded\
    \ according to the Multipath Type.\n      See the next section below for encoding\
    \ details.\n   Downstream Label(s)\n      The set of labels in the label stack\
    \ as it would have appeared if\n      this router were forwarding the packet through\
    \ this interface.\n      Any Implicit Null labels are explicitly included.  Labels\
    \ are\n      treated as numbers, i.e., they are right justified in the field.\n\
    \      A Downstream Label is 24 bits, in the same format as an MPLS label\n  \
    \    minus the TTL field, i.e., the MSBit of the label is bit 0, the\n      LSBit\
    \ is bit 19, the EXP bits are bits 20-22, and bit 23 is the S\n      bit.  The\
    \ replying router SHOULD fill in the EXP and S bits; the\n      LSR receiving\
    \ the echo reply MAY choose to ignore these bits.\n   Protocol\n      The Protocol\
    \ is taken from the following table:\n      Protocol #        Signaling Protocol\n\
    \      ----------        ------------------\n               0        Unknown\n\
    \               1        Static\n               2        BGP\n               3\
    \        LDP\n               4        RSVP-TE\n"
- title: 3.3.1.  Multipath Information Encoding
  contents:
  - "3.3.1.  Multipath Information Encoding\n   The Multipath Information encodes\
    \ labels or addresses that will\n   exercise this path.  The Multipath Information\
    \ depends on the\n   Multipath Type.  The contents of the field are shown in the\
    \ table\n   above.  IPv4 addresses are drawn from the range 127/8; IPv6 addresses\n\
    \   are drawn from the range 0:0:0:0:0:FFFF:127/104.  Labels are treated\n   as\
    \ numbers, i.e., they are right justified in the field.  For Type 4,\n   ranges\
    \ indicated by Address pairs MUST NOT overlap and MUST be in\n   ascending sequence.\n\
    \   Type 8 allows a more dense encoding of IP addresses.  The IP prefix\n   is\
    \ formatted as a base IP address with the non-prefix low-order bits\n   set to\
    \ zero.  The maximum prefix length is 27.  Following the prefix\n   is a mask\
    \ of length 2^(32-prefix length) bits for IPv4 and 2^(128-\n   prefix length)\
    \ bits for IPv6.  Each bit set to 1 represents a valid\n   address.  The address\
    \ is the base IPv4 address plus the position of\n   the bit in the mask where\
    \ the bits are numbered left to right\n   beginning with zero.  For example, the\
    \ IPv4 addresses 127.2.1.0,\n   127.2.1.5-127.2.1.15, and 127.2.1.20-127.2.1.29\
    \ would be encoded as\n   follows:\n    0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Those same addresses embedded in IPv6 would be encoded as follows:\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type 9 allows a more dense encoding of labels.  The label prefix is\n   formatted\
    \ as a base label value with the non-prefix low-order bits\n   set to zero.  The\
    \ maximum prefix (including leading zeros due to\n   encoding) length is 27. \
    \ Following the prefix is a mask of length\n   2^(32-prefix length) bits.  Each\
    \ bit set to one represents a valid\n   label.  The label is the base label plus\
    \ the position of the bit in\n   the mask where the bits are numbered left to\
    \ right beginning with\n   zero.  Label values of all the odd numbers between\
    \ 1152 and 1279\n   would be encoded as follows:\n    0                   1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ |0 0\n   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0| +-+-+-\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |0 1 0 1\n   0\
    \ 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1| +-+-+-+-+-\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ |0 1 0 1 0 1\n   0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1| +-+-+-+-+-+-+-\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |0 1 0 1 0 1 0 1\n   0\
    \ 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1| +-+-+-+-+-+-+-+-+-\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ |0 1 0 1 0 1 0 1 0 1\n   0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1| +-+-+-+-+-+-+-+-+-\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   If the received Multipath\
    \ Information is non-null, the labels and IP\n   addresses MUST be picked from\
    \ the set provided.  If none of these\n   labels or addresses map to a particular\
    \ downstream interface, then\n   for that interface, the type MUST be set to 0.\
    \  If the received\n   Multipath Information is null (i.e., Multipath Length =\
    \ 0, or for\n   Types 8 and 9, a mask of all zeros), the type MUST be set to 0.\n\
    \   For example, suppose LSR X at hop 10 has two downstream LSRs, Y and\n   Z,\
    \ for the FEC in question.  The received X could return Multipath\n   Type 4,\
    \ with low/high IP addresses of 127.1.1.1->127.1.1.255 for\n   downstream LSR\
    \ Y and 127.2.1.1->127.2.1.255 for downstream LSR Z.\n   The head end reflects\
    \ this information to LSR Y.  Y, which has three\n   downstream LSRs, U, V, and\
    \ W, computes that 127.1.1.1->127.1.1.127\n   would go to U and 127.1.1.128->\
    \ 127.1.1.255 would go to V.  Y would\n   then respond with 3 Downstream Mappings:\
    \ to U, with Multipath Type 4\n   (127.1.1.1->127.1.1.127); to V, with Multipath\
    \ Type 4\n   (127.1.1.127->127.1.1.255); and to W, with Multipath Type 0.\n  \
    \ Note that computing Multipath Information may impose a significant\n   processing\
    \ burden on the receiver.  A receiver MAY thus choose to\n   process a subset\
    \ of the received prefixes.  The sender, on receiving\n   a reply to a Downstream\
    \ Mapping with partial information, SHOULD\n   assume that the prefixes missing\
    \ in the reply were skipped by the\n   receiver, and MAY re-request information\
    \ about them in a new echo\n   request.\n"
- title: 3.3.2.  Downstream Router and Interface
  contents:
  - "3.3.2.  Downstream Router and Interface\n   The notion of \"downstream router\"\
    \ and \"downstream interface\" should\n   be explained.  Consider an LSR X.  If\
    \ a packet that was originated\n   with TTL n>1 arrived with outermost label L\
    \ and TTL=1 at LSR X, X\n   must be able to compute which LSRs could receive the\
    \ packet if it was\n   originated with TTL=n+1, over which interface the request\
    \ would\n   arrive and what label stack those LSRs would see.  (It is outside\
    \ the\n   scope of this document to specify how this computation is done.)  The\n\
    \   set of these LSRs/interfaces consists of the downstream\n   routers/interfaces\
    \ (and their corresponding labels) for X with\n   respect to L.  Each pair of\
    \ downstream router and interface requires\n   a separate Downstream Mapping to\
    \ be added to the reply.\n   The case where X is the LSR originating the echo\
    \ request is a special\n   case.  X needs to figure out what LSRs would receive\
    \ the MPLS echo\n   request for a given FEC Stack that X originates with TTL=1.\n\
    \   The set of downstream routers at X may be alternative paths (see the\n   discussion\
    \ below on ECMP) or simultaneous paths (e.g., for MPLS\n   multicast).  In the\
    \ former case, the Multipath Information is used as\n   a hint to the sender as\
    \ to how it may influence the choice of these\n   alternatives.\n"
- title: 3.4.  Pad TLV
  contents:
  - "3.4.  Pad TLV\n   The value part of the Pad TLV contains a variable number (>=\
    \ 1) of\n   octets.  The first octet takes values from the following table; all\n\
    \   the other octets (if any) are ignored.  The receiver SHOULD verify\n   that\
    \ the TLV is received in its entirety, but otherwise ignores the\n   contents\
    \ of this TLV, apart from the first octet.\n      Value        Meaning\n     \
    \ -----        -------\n          1        Drop Pad TLV from reply\n         \
    \ 2        Copy Pad TLV to reply\n      3-255        Reserved for future use\n"
- title: 3.5.  Vendor Enterprise Number
  contents:
  - "3.5.  Vendor Enterprise Number\n   SMI Private Enterprise Numbers are maintained\
    \ by IANA.  The Length is\n   always 4; the value is the SMI Private Enterprise\
    \ code, in network\n   octet order, of the vendor with a Vendor Private extension\
    \ to any of\n   the fields in the fixed part of the message, in which case this\
    \ TLV\n   MUST be present.  If none of the fields in the fixed part of the\n \
    \  message have Vendor Private extensions, inclusion of this TLV is\n   OPTIONAL.\
    \  Vendor Private ranges for Message Types, Reply Modes, and\n   Return Codes\
    \ have been defined.  When any of these are used, the\n   Vendor Enterprise Number\
    \ TLV MUST be included in the message.\n"
- title: 3.6.  Interface and Label Stack
  contents:
  - "3.6.  Interface and Label Stack\n   The Interface and Label Stack TLV MAY be\
    \ included in a reply message\n   to report the interface on which the request\
    \ message was received and\n   the label stack that was on the packet when it\
    \ was received.  Only\n   one such object may appear.  The purpose of the object\
    \ is to allow\n   the upstream router to obtain the exact interface and label\
    \ stack\n   information as it appears at the replying LSR.\n   The Length is K\
    \ + 4*N octets; N is the number of labels in the label\n   stack.  Values for\
    \ K are found in the description of Address Type\n   below.  The Value field of\
    \ a Downstream Mapping has the following\n   format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Address Type  |             Must Be Zero                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   IP Address (4 or 16 octets)                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Interface (4 or 16 octets)                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                    Label Stack                          .\n      .         \
    \                                                      .\n      .            \
    \                                                   .\n      .               \
    \                                                .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Address Type\n      The Address Type indicates if the interface is numbered\
    \ or\n      unnumbered.  It also determines the length of the IP Address and\n\
    \      Interface fields.  The resulting total for the initial part of the\n  \
    \    TLV is listed in the table below as \"K Octets\".  The Address Type\n   \
    \   is set to one of the following values:\n         Type #        Address Type\
    \           K Octets\n         ------        ------------           --------\n\
    \              1        IPv4 Numbered                12\n              2     \
    \   IPv4 Unnumbered              12\n              3        IPv6 Numbered    \
    \            36\n              4        IPv6 Unnumbered              24\n   IP\
    \ Address and Interface\n      IPv4 addresses and interface indices are encoded\
    \ in 4 octets; IPv6\n      addresses are encoded in 16 octets.\n      If the interface\
    \ upon which the echo request message was received\n      is numbered, then the\
    \ Address Type MUST be set to IPv4 or IPv6,\n      the IP Address MUST be set\
    \ to either the LSR's Router ID or the\n      interface address, and the Interface\
    \ MUST be set to the interface\n      address.\n      If the interface is unnumbered,\
    \ the Address Type MUST be either\n      IPv4 Unnumbered or IPv6 Unnumbered, the\
    \ IP Address MUST be the\n      LSR's Router ID, and the Interface MUST be set\
    \ to the index\n      assigned to the interface.\n   Label Stack\n      The label\
    \ stack of the received echo request message.  If any TTL\n      values have been\
    \ changed by this router, they SHOULD be restored.\n"
- title: 3.7.  Errored TLVs
  contents:
  - "3.7.  Errored TLVs\n   The following TLV is a TLV that MAY be included in an\
    \ echo reply to\n   inform the sender of an echo request of mandatory TLVs either\
    \ not\n   supported by an implementation or parsed and found to be in error.\n\
    \   The Value field contains the TLVs that were not understood, encoded\n   as\
    \ sub-TLVs.\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |             Type = 9          |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             Value                             |\n   \
    \   .                                                               .\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.8.  Reply TOS Byte TLV
  contents:
  - "3.8.  Reply TOS Byte TLV\n   This TLV MAY be used by the originator of the echo\
    \ request to request\n   that an echo reply be sent with the IP header TOS byte\
    \ set to the\n   value specified in the TLV.  This TLV has a length of 4 with\
    \ the\n   following value field.\n       0                   1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Reply-TOS Byte|                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.  Theory of Operation
  contents:
  - "4.  Theory of Operation\n   An MPLS echo request is used to test a particular\
    \ LSP.  The LSP to be\n   tested is identified by the \"FEC Stack\"; for example,\
    \ if the LSP was\n   set up via LDP, and is to an egress IP address of 10.1.1.1,\
    \ the FEC\n   Stack contains a single element, namely, an LDP IPv4 prefix sub-TLV\n\
    \   with value 10.1.1.1/32.  If the LSP being tested is an RSVP LSP, the\n   FEC\
    \ Stack consists of a single element that captures the RSVP Session\n   and Sender\
    \ Template that uniquely identifies the LSP.\n   FEC Stacks can be more complex.\
    \  For example, one may wish to test a\n   VPN IPv4 prefix of 10.1/8 that is tunneled\
    \ over an LDP LSP with\n   egress 10.10.1.1.  The FEC Stack would then contain\
    \ two sub-TLVs, the\n   bottom being a VPN IPv4 prefix, and the top being an LDP\
    \ IPv4 prefix.\n   If the underlying (LDP) tunnel were not known, or was considered\n\
    \   irrelevant, the FEC Stack could be a single element with just the VPN\n  \
    \ IPv4 sub-TLV.\n   When an MPLS echo request is received, the receiver is expected\
    \ to\n   verify that the control plane and data plane are both healthy (for\n\
    \   the FEC Stack being pinged) and that the two planes are in sync.  The\n  \
    \ procedures for this are in section 4.4 below.\n"
- title: 4.1.  Dealing with Equal-Cost Multi-Path (ECMP)
  contents:
  - "4.1.  Dealing with Equal-Cost Multi-Path (ECMP)\n   LSPs need not be simple point-to-point\
    \ tunnels.  Frequently, a single\n   LSP may originate at several ingresses, and\
    \ terminate at several\n   egresses; this is very common with LDP LSPs.  LSPs\
    \ for a given FEC\n   may also have multiple \"next hops\" at transit LSRs.  At\
    \ an ingress,\n   there may also be several different LSPs to choose from to get\
    \ to the\n   desired endpoint.  Finally, LSPs may have backup paths, detour paths,\n\
    \   and other alternative paths to take should the primary LSP go down.\n   To\
    \ deal with the last two first: it is assumed that the LSR sourcing\n   MPLS echo\
    \ requests can force the echo request into any desired LSP,\n   so choosing among\
    \ multiple LSPs at the ingress is not an issue.  The\n   problem of probing the\
    \ various flavors of backup paths that will\n   typically not be used for forwarding\
    \ data unless the primary LSP is\n   down will not be addressed here.\n   Since\
    \ the actual LSP and path that a given packet may take may not be\n   known a\
    \ priori, it is useful if MPLS echo requests can exercise all\n   possible paths.\
    \  This, although desirable, may not be practical,\n   because the algorithms\
    \ that a given LSR uses to distribute packets\n   over alternative paths may be\
    \ proprietary.\n   To achieve some degree of coverage of alternate paths, there\
    \ is a\n   certain latitude in choosing the destination IP address and source\n\
    \   UDP port for an MPLS echo request.  This is clearly not sufficient;\n   in\
    \ the case of traceroute, more latitude is offered by means of the\n   Multipath\
    \ Information of the Downstream Mapping TLV.  This is used as\n   follows.  An\
    \ ingress LSR periodically sends an MPLS traceroute\n   message to determine whether\
    \ there are multipaths for a given LSP.\n   If so, each hop will provide some\
    \ information how each of its\n   downstream paths can be exercised.  The ingress\
    \ can then send MPLS\n   echo requests that exercise these paths.  If several\
    \ transit LSRs\n   have ECMP, the ingress may attempt to compose these to exercise\
    \ all\n   possible paths.  However, full coverage may not be possible.\n"
- title: 4.2.  Testing LSPs That Are Used to Carry MPLS Payloads
  contents:
  - "4.2.  Testing LSPs That Are Used to Carry MPLS Payloads\n   To detect certain\
    \ LSP breakages, it may be necessary to encapsulate\n   an MPLS echo request packet\
    \ with at least one additional label when\n   testing LSPs that are used to carry\
    \ MPLS payloads (such as LSPs used\n   to carry L2VPN and L3VPN traffic.  For\
    \ example, when testing LDP or\n   RSVP-TE LSPs, just sending an MPLS echo request\
    \ packet may not detect\n   instances where the router immediately upstream of\
    \ the destination of\n   the LSP ping may forward the MPLS echo request successfully\
    \ over an\n   interface not configured to carry MPLS payloads because of the use\
    \ of\n   penultimate hop popping.  Since the receiving router has no means to\n\
    \   differentiate whether the IP packet was sent unlabeled or implicitly\n   labeled,\
    \ the addition of labels shimmed above the MPLS echo request\n   (using the Nil\
    \ FEC) will prevent a router from forwarding such a\n   packet out unlabeled interfaces.\n"
- title: 4.3.  Sending an MPLS Echo Request
  contents:
  - "4.3.  Sending an MPLS Echo Request\n   An MPLS echo request is a UDP packet.\
    \  The IP header is set as\n   follows: the source IP address is a routable address\
    \ of the sender;\n   the destination IP address is a (randomly chosen) IPv4 address\
    \ from\n   the range 127/8 or IPv6 address from the range\n   0:0:0:0:0:FFFF:127/104.\
    \  The IP TTL is set to 1.  The source UDP port\n   is chosen by the sender; the\
    \ destination UDP port is set to 3503\n   (assigned by IANA for MPLS echo requests).\
    \  The Router Alert option\n   MUST be set in the IP header.\n   An MPLS echo\
    \ request is sent with a label stack corresponding to the\n   FEC Stack being\
    \ tested.  Note that further labels could be applied\n   if, for example, the\
    \ normal route to the topmost FEC in the stack is\n   via a Traffic Engineered\
    \ Tunnel [RSVP-TE].  If all of the FECs in the\n   stack correspond to Implicit\
    \ Null labels, the MPLS echo request is\n   considered unlabeled even if further\
    \ labels will be applied in\n   sending the packet.\n   If the echo request is\
    \ labeled, one MAY (depending on what is being\n   pinged) set the TTL of the\
    \ innermost label to 1, to prevent the ping\n   request going farther than it\
    \ should.  Examples of where this SHOULD\n   be done include pinging a VPN IPv4\
    \ or IPv6 prefix, an L2 VPN endpoint\n   or a pseudowire.  Preventing the ping\
    \ request from going too far can\n   also be accomplished by inserting a Router\
    \ Alert label above this\n   label; however, this may lead to the undesired side\
    \ effect that MPLS\n   echo requests take a different data path than actual data.\
    \  For more\n   information on how these mechanisms can be used for pseudowire\n\
    \   connectivity verification, see [VCCV].\n   In \"ping\" mode (end-to-end connectivity\
    \ check), the TTL in the\n   outermost label is set to 255.  In \"traceroute\"\
    \ mode (fault isolation\n   mode), the TTL is set successively to 1, 2, and so\
    \ on.\n   The sender chooses a Sender's Handle and a Sequence Number.  When\n\
    \   sending subsequent MPLS echo requests, the sender SHOULD increment\n   the\
    \ Sequence Number by 1.  However, a sender MAY choose to send a\n   group of echo\
    \ requests with the same Sequence Number to improve the\n   chance of arrival\
    \ of at least one packet with that Sequence Number.\n   The TimeStamp Sent is\
    \ set to the time-of-day (in seconds and\n   microseconds) that the echo request\
    \ is sent.  The TimeStamp Received\n   is set to zero.\n   An MPLS echo request\
    \ MUST have an FEC Stack TLV.  Also, the Reply\n   Mode must be set to the desired\
    \ reply mode; the Return Code and\n   Subcode are set to zero.  In the \"traceroute\"\
    \ mode, the echo request\n   SHOULD include a Downstream Mapping TLV.\n"
- title: 4.4.  Receiving an MPLS Echo Request
  contents:
  - "4.4.  Receiving an MPLS Echo Request\n   Sending an MPLS echo request to the\
    \ control plane is triggered by one\n   of the following packet processing exceptions:\
    \ Router Alert option,\n   IP TTL expiration, MPLS TTL expiration, MPLS Router\
    \ Alert label, or\n   the destination address in the 127/8 address range.  The\
    \ control\n   plane further identifies it by UDP destination port 3503.\n   For\
    \ reporting purposes the bottom of stack is considered to be\n   stack-depth of\
    \ 1.  This is to establish an absolute reference for the\n   case where the actual\
    \ stack may have more labels than there are FECs\n   in the Target FEC Stack.\n\
    \   Furthermore, in all the error codes listed in this document, a\n   stack-depth\
    \ of 0 means \"no value specified\".  This allows\n   compatibility with existing\
    \ implementations that do not use the\n   Return Subcode field.\n   An LSR X that\
    \ receives an MPLS echo request then processes it as\n   follows.\n   1. General\
    \ packet sanity is verified.  If the packet is not well-\n      formed, LSR X\
    \ SHOULD send an MPLS Echo Reply with the Return Code\n      set to \"Malformed\
    \ echo request received\" and the Subcode to zero.\n      If there are any TLVs\
    \ not marked as \"Ignore\" that LSR X does not\n      understand, LSR X SHOULD\
    \ send an MPLS \"TLV not understood\" (as\n      appropriate), and the Subcode\
    \ set to zero.  In the latter case,\n      the misunderstood TLVs (only) are included\
    \ as sub-TLVs in an\n      Errored TLVs TLV in the reply.  The header fields Sender's\
    \ Handle,\n      Sequence Number, and Timestamp Sent are not examined, but are\n\
    \      included in the MPLS echo reply message.\n   The algorithm uses the following\
    \ variables and identifiers:\n   Interface-I:       the interface on which the\
    \ MPLS echo request was\n                      received.\n   Stack-R:        \
    \   the label stack on the packet as it was received.\n   Stack-D:           the\
    \ label stack carried in the Downstream Mapping\n                      TLV (not\
    \ always present)\n   Label-L:           the label from the actual stack currently\
    \ being\n                      examined.  Requires no initialization.\n   Label-stack-depth:\
    \ the depth of label being verified.  Initialized to\n                      the\
    \ number of labels in the received label stack\n                      S.\n   FEC-stack-depth:\
    \   depth of the FEC in the Target FEC Stack that\n                      should\
    \ be used to verify the current actual label.\n                      Requires\
    \ no initialization.\n   Best-return-code:  contains the return code for the echo\
    \ reply packet\n                      as currently best known.  As algorithm progresses,\n\
    \                      this code may change depending on the results of\n    \
    \                  further checks that it performs.\n   Best-rtn-subcode:  similar\
    \ to Best-return-code, but for the Echo\n                      Reply Subcode.\n\
    \   FEC-status:        result value returned by the FEC Checking\n           \
    \           algorithm described in section 4.4.1.\n   /* Save receive context\
    \ information */\n   2. If the echo request is good, LSR X stores the interface\
    \ over\n      which the echo was received in Interface-I, and the label stack\n\
    \      with which it came in Stack-R.\n   /* The rest of the algorithm iterates\
    \ over the labels in Stack-R,\n      verifies validity of label values, reports\
    \ associated label\n      switching operations (for traceroute), verifies correspondence\n\
    \      between the Stack-R and the Target FEC Stack description in the\n     \
    \ body of the echo request, and reports any errors. */\n   /* The algorithm iterates\
    \ as follows. */\n   3. Label Validation:\n      If Label-stack-depth is 0 {\n\
    \      /* The LSR needs to report its being a tail-end for the LSP */\n      \
    \   Set FEC-stack-depth to 1, set Label-L to 3 (Implicit Null).\n         Set\
    \ Best-return-code to 3 (\"Replying router is an egress for\n         the FEC\
    \ at stack depth\"), set Best-rtn-subcode to the\n         value of FEC-stack-depth\
    \ (1) and go to step 5 (Egress\n         Processing).\n      }\n      /* This\
    \ step assumes there is always an entry for well-known\n         label values\
    \ */\n      Set Label-L to the value extracted from Stack-R at depth\n      Label-stack-depth.\
    \  Look up Label-L in the Incoming Label Map\n      (ILM) to determine if the\
    \ label has been allocated and an\n      operation is associated with it.\n  \
    \    If there is no entry for L {\n      /* Indicates a temporary or permanent\
    \ label synchronization\n         problem the LSR needs to report an error */\n\
    \         Set Best-return-code to 11 (\"No label entry at stack-depth\")\n   \
    \      and Best-rtn-subcode to Label-stack-depth.  Go to step 7\n         (Send\
    \ Reply Packet).\n      }\n      Else {\n         Retrieve the associated label\
    \ operation from the\n         corresponding NLFE and proceed to step 4 (Label\
    \ Operation\n         check).\n      }\n   4. Label Operation Check\n      If\
    \ the label operation is \"Pop and Continue Processing\" {\n      /* Includes\
    \ Explicit Null and Router Alert label cases */\n         Iterate to the next\
    \ label by decrementing Label-stack-depth\n         and loop back to step 3 (Label\
    \ Validation).\n      }\n      If the label operation is \"Swap or Pop and Switch\
    \ based on Popped\n         Label\" {\n         Set Best-return-code to 8 (\"\
    Label switched at stack-depth\")\n         and Best-rtn-subcode to Label-stack-depth\
    \ to report transit\n         switching.\n         If a Downstream Mapping TLV\
    \ is present in the received echo\n         request {\n            If the IP address\
    \ in the TLV is 127.0.0.1 or 0::1 {\n               Set Best-return-code to 6\
    \ (\"Upstream Interface Index\n               Unknown\").  An Interface and Label\
    \ Stack TLV SHOULD be\n               included in the reply and filled with Interface-I\
    \ and\n               Stack-R.\n            }\n            Else {\n          \
    \     Verify that the IP address, interface address, and label\n             \
    \  stack in the Downstream Mapping TLV match Interface-I\n               and Stack-R.\
    \  If there is a mismatch, set\n               Best-return-code to 5, \"Downstream\
    \ Mapping Mismatch\".\n               An Interface and Label Stack TLV SHOULD\
    \ be included in\n               the reply and filled in based on Interface-I\
    \ and\n               Stack-R.  Go to step 7 (Send Reply Packet).\n          \
    \  }\n         }\n         For each available downstream ECMP path {\n       \
    \     Retrieve output interface from the NHLFE entry.\n            /* Note: this\
    \ return code is set even if Label-stack-depth\n               is one */\n   \
    \         If the output interface is not MPLS enabled {\n               Set Best-return-code\
    \ to Return Code 9, \"Label switched\n               but no MPLS forwarding at\
    \ stack-depth\" and set\n               Best-rtn-subcode to Label-stack-depth\
    \ and goto\n               Send_Reply_Packet.\n            }\n            If a\
    \ Downstream Mapping TLV is present {\n              A Downstream Mapping TLV\
    \ SHOULD be included in the echo\n              reply (see section 3.3) filled\
    \ in with information about\n              the current ECMP path.\n          \
    \  }\n         }\n         If no Downstream Mapping TLV is present, or the Downstream\
    \ IP\n            Address is set to the ALLROUTERS multicast address,\n      \
    \         go to step 7 (Send Reply Packet).\n         If the \"Validate FEC Stack\"\
    \ flag is not set and the LSR is not\n         configured to perform FEC checking\
    \ by default, go to step 7\n         (Send Reply Packet).\n      /* Validate the\
    \ Target FEC Stack in the received echo request.\n         First determine FEC-stack-depth\
    \ from the Downstream Mapping\n         TLV.  This is done by walking through\
    \ Stack-D (the Downstream\n         labels) from the bottom, decrementing the\
    \ number of labels\n         for each non-Implicit Null label, while incrementing\n\
    \         FEC-stack-depth for each label.  If the Downstream Mapping TLV\n   \
    \      contains one or more Implicit Null labels, FEC-stack-depth\n         may\
    \ be greater than Label-stack-depth.  To be consistent with\n         the above\
    \ stack-depths, the bottom is considered to entry 1.\n         */\n         Set\
    \ FEC-stack-depth to 0.  Set i to Label-stack-depth.\n         While (i > 0 )\
    \ do {\n            ++FEC-stack-depth.\n            if Stack-D[FEC-stack-depth]\
    \ != 3 (Implicit Null)\n               --i.\n         }\n         If the number\
    \ of labels in the FEC stack is greater\n            than or equal to FEC-stack-depth\
    \ {\n            Perform the FEC Checking procedure (see subsection 4.4.1\n  \
    \          below).\n            If FEC-status is 2, set Best-return-code to 10\
    \ (\"Mapping\n            for this FEC is not the given label at stack-depth\"\
    ).\n            If the return code is 1, set Best-return-code to\n           \
    \ FEC-return-code and Best-rtn-subcode to FEC-stack-depth.\n         }\n     \
    \    Go to step 7 (Send Reply Packet).\n      }\n   5. Egress Processing:\n  \
    \    /* These steps are performed by the LSR that identified itself\n        \
    \ as the tail-end LSR for an LSP. */\n      If received echo request contains\
    \ no Downstream Mapping TLV, or\n         the Downstream IP Address is set to\
    \ 127.0.0.1 or 0::1\n            go to step 6 (Egress FEC Validation).\n     \
    \ Verify that the IP address, interface address, and label stack in\n      the\
    \ Downstream Mapping TLV match Interface-I and Stack-R.  If\n      not, set Best-return-code\
    \ to 5, \"Downstream Mapping\n      Mis-match\".  A Received Interface and Label\
    \ Stack TLV SHOULD be\n      created for the echo response packet.  Go to step\
    \ 7 (Send Reply\n      Packet).\n   6. Egress FEC Validation:\n      /* This is\
    \ a loop for all entries in the Target FEC Stack\n         starting with FEC-stack-depth.\
    \ */\n      Perform FEC checking by following the algorithm described in\n   \
    \   subsection 4.4.1 for Label-L and the FEC at FEC-stack-depth.\n      Set Best-return-code\
    \ to FEC-code and Best-rtn-subcode to the\n      value in FEC-stack-depth.\n \
    \     If FEC-status (the result of the check) is 1,\n         go to step 7 (Send\
    \ Reply Packet).\n      /* Iterate to the next FEC entry */\n      ++FEC-stack-depth.\n\
    \      If FEC-stack-depth > the number of FECs in the FEC-stack,\n         go\
    \ to step 7 (Send Reply Packet).\n      If FEC-status is 0 {\n         ++Label-stack-depth.\n\
    \         If Label-stack-depth > the number of labels in Stack-R,\n          \
    \  Go to step 7 (Send Reply Packet).\n         Label-L = extracted label from\
    \ Stack-R at depth\n            Label-stack-depth.\n         Loop back to step\
    \ 6 (Egress FEC Validation).\n      }\n   7. Send Reply Packet:\n      Send an\
    \ MPLS echo reply with a Return Code of Best-return-code,\n      and a Return\
    \ Subcode of Best-rtn-subcode.  Include any TLVs\n      created during the above\
    \ process.  The procedures for sending\n      the echo reply are found in subsection\
    \ 4.4.1.\n"
- title: 4.4.1.  FEC Validation
  contents:
  - "4.4.1.  FEC Validation\n   /* This subsection describes validation of an FEC\
    \ entry within the\n      Target FEC Stack and accepts an FEC, Label-L, and Interface-I.\n\
    \      The algorithm performs the following steps. */\n   1. Two return values,\
    \ FEC-status and FEC-return-code, are initialized\n      to 0.\n   2. If the FEC\
    \ is the Nil FEC {\n         If Label-L is either Explicit_Null or Router_Alert,\
    \ return.\n         Else {\n            Set FEC-return-code to 10 (\"Mapping for\
    \ this FEC is not\n            the given label at stack-depth\").\n          \
    \  Set FEC-status to 1\n            Return.\n         }\n      }\n   3. Check\
    \ the FEC label mapping that describes how traffic received on\n      the LSP\
    \ is further switched or which application it is associated\n      with.  If no\
    \ mapping exists, set FEC-return-code to Return 4,\n      \"Replying router has\
    \ no mapping for the FEC at stack-depth\".  Set\n      FEC-status to 1.  Return.\n\
    \   4. If the label mapping for FEC is Implicit Null, set FEC-status to 2\n  \
    \    and proceed to step 5.  Otherwise, if the label mapping for FEC is\n    \
    \  Label-L, proceed to step 5.  Otherwise, set FEC-return-code to 10\n      (\"\
    Mapping for this FEC is not the given label at stack-depth\"),\n      set FEC-status\
    \ to 1, and return.\n   5. This is a protocol check.  Check what protocol would\
    \ be used to\n      advertise FEC.  If it can be determined that no protocol\n\
    \      associated with Interface-I would have advertised an FEC of that\n    \
    \  FEC-Type, set FEC-return-code to 12 (\"Protocol not associated with\n     \
    \ interface at FEC stack-depth\").  Set FEC-status to 1.\n   6. Return.\n"
- title: 4.5.  Sending an MPLS Echo Reply
  contents:
  - "4.5.  Sending an MPLS Echo Reply\n   An MPLS echo reply is a UDP packet.  It\
    \ MUST ONLY be sent in response\n   to an MPLS echo request.  The source IP address\
    \ is a routable address\n   of the replier; the source port is the well-known\
    \ UDP port for LSP\n   ping.  The destination IP address and UDP port are copied\
    \ from the\n   source IP address and UDP port of the echo request.  The IP TTL\
    \ is\n   set to 255.  If the Reply Mode in the echo request is \"Reply via an\n\
    \   IPv4 UDP packet with Router Alert\", then the IP header MUST contain\n   the\
    \ Router Alert IP option.  If the reply is sent over an LSP, the\n   topmost label\
    \ MUST in this case be the Router Alert label (1) (see\n   [LABEL-STACK]).\n \
    \  The format of the echo reply is the same as the echo request.  The\n   Sender's\
    \ Handle, the Sequence Number, and TimeStamp Sent are copied\n   from the echo\
    \ request; the TimeStamp Received is set to the time-of-\n   day that the echo\
    \ request is received (note that this information is\n   most useful if the time-of-day\
    \ clocks on the requester and the\n   replier are synchronized).  The FEC Stack\
    \ TLV from the echo request\n   MAY be copied to the reply.\n   The replier MUST\
    \ fill in the Return Code and Subcode, as determined\n   in the previous subsection.\n\
    \   If the echo request contains a Pad TLV, the replier MUST interpret\n   the\
    \ first octet for instructions regarding how to reply.\n   If the replying router\
    \ is the destination of the FEC, then Downstream\n   Mapping TLVs SHOULD NOT be\
    \ included in the echo reply.\n   If the echo request contains a Downstream Mapping\
    \ TLV, and the\n   replying router is not the destination of the FEC, the replier\
    \ SHOULD\n   compute its downstream routers and corresponding labels for the\n\
    \   incoming label, and add Downstream Mapping TLVs for each one to the\n   echo\
    \ reply it sends back.\n   If the Downstream Mapping TLV contains Multipath Information\n\
    \   requiring more processing than the receiving router is willing to\n   perform,\
    \ the responding router MAY choose to respond with only a\n   subset of multipaths\
    \ contained in the echo request Downstream\n   Mapping.  (Note: The originator\
    \ of the echo request MAY send another\n   echo request with the Multipath Information\
    \ that was not included in\n   the reply.)\n   Except in the case of Reply Mode\
    \ 4, \"Reply via application level\n   control channel\", echo replies are always\
    \ sent in the context of the\n   IP/MPLS network.\n"
- title: 4.6.  Receiving an MPLS Echo Reply
  contents:
  - "4.6.  Receiving an MPLS Echo Reply\n   An LSR X should only receive an MPLS echo\
    \ reply in response to an\n   MPLS echo request that it sent.  Thus, on receipt\
    \ of an MPLS echo\n   reply, X should parse the packet to ensure that it is well-formed,\n\
    \   then attempt to match up the echo reply with an echo request that it\n   had\
    \ previously sent, using the destination UDP port and the Sender's\n   Handle.\
    \  If no match is found, then X jettisons the echo reply;\n   otherwise, it checks\
    \ the Sequence Number to see if it matches.\n   If the echo reply contains Downstream\
    \ Mappings, and X wishes to\n   traceroute further, it SHOULD copy the Downstream\
    \ Mapping(s) into its\n   next echo request(s) (with TTL incremented by one).\n"
- title: 4.7.  Issue with VPN IPv4 and IPv6 Prefixes
  contents:
  - "4.7.  Issue with VPN IPv4 and IPv6 Prefixes\n   Typically, an LSP ping for a\
    \ VPN IPv4 prefix or VPN IPv6 prefix is\n   sent with a label stack of depth greater\
    \ than 1, with the innermost\n   label having a TTL of 1.  This is to terminate\
    \ the ping at the egress\n   PE, before it gets sent to the customer device. \
    \ However, under\n   certain circumstances, the label stack can shrink to a single\
    \ label\n   before the ping hits the egress PE; this will result in the ping\n\
    \   terminating prematurely.  One such scenario is a multi-AS Carrier's\n   Carrier\
    \ VPN.\n   To get around this problem, one approach is for the LSR that receives\n\
    \   such a ping to realize that the ping terminated prematurely, and send\n  \
    \ back error code 13.  In that case, the initiating LSR can retry the\n   ping\
    \ after incrementing the TTL on the VPN label.  In this fashion,\n   the ingress\
    \ LSR will sequentially try TTL values until it finds one\n   that allows the\
    \ VPN ping to reach the egress PE.\n"
- title: 4.8.  Non-compliant Routers
  contents:
  - "4.8.  Non-compliant Routers\n   If the egress for the FEC Stack being pinged\
    \ does not support MPLS\n   ping, then no reply will be sent, resulting in possible\
    \ \"false\n   negatives\".  If in \"traceroute\" mode, a transit LSR does not\
    \ support\n   LSP ping, then no reply will be forthcoming from that LSR for some\n\
    \   TTL, say, n.  The LSR originating the echo request SHOULD try sending\n  \
    \ the echo request with TTL=n+1, n+2, ..., n+k to probe LSRs further\n   down\
    \ the path.  In such a case, the echo request for TTL > n SHOULD\n   be sent with\
    \ Downstream Mapping TLV \"Downstream IP Address\" field set\n   to the ALLROUTERs\
    \ multicast address until a reply is received with a\n   Downstream Mapping TLV.\
    \  The label stack MAY be omitted from the\n   Downstream Mapping TLV.  Furthermore,\
    \ the \"Validate FEC Stack\" flag\n   SHOULD NOT be set until an echo reply packet\
    \ with a Downstream\n   Mapping TLV is received.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [BGP]          Rekhter, Y., Li, T., and S. Hares,\
    \ \"A Border Gateway\n                  Protocol 4 (BGP-4)\", RFC 4271, January\
    \ 2006.\n   [IANA]         Narten, T. and H. Alvestrand, \"Guidelines for Writing\n\
    \                  an IANA Considerations Section in RFCs\", BCP 26, RFC\n   \
    \               2434, October 1998.\n   [KEYWORDS]     Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                  Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [LABEL-STACK]  Rosen, E., Tappan, D., Fedorkow, G.,\
    \ Rekhter, Y.,\n                  Farinacci, D., Li, T., and A. Conta, \"MPLS\
    \ Label Stack\n                  Encoding\", RFC 3032, January 2001.\n   [NTP]\
    \          Mills, D., \"Simple Network Time Protocol (SNTP)\n                \
    \  Version 4 for IPv4, IPv6 and OSI\", RFC 2030, October\n                  1996.\n\
    \   [RFC1122]      Braden, R., \"Requirements for Internet Hosts -\n         \
    \         Communication Layers\", STD 3, RFC 1122, October 1989.\n   [RFC1812]\
    \      Baker, F., \"Requirements for IP Version 4 Routers\",\n               \
    \   RFC 1812, June 1995.\n   [RFC4026]      Andersson, L. and T. Madsen, \"Provider\
    \ Provisioned\n                  Virtual Private Network (VPN) Terminology\",\
    \ RFC 4026,\n                  March 2005.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [BGP-LABEL]    Rekhter, Y. and E. Rosen, \"\
    Carrying Label Information\n                  in BGP-4\", RFC 3107, May 2001.\n\
    \   [ICMP]         Postel, J., \"Internet Control Message Protocol\", STD\n  \
    \                5, RFC 792, September 1981.\n   [LDP]          Andersson, L.,\
    \ Doolan, P., Feldman, N., Fredette, A.,\n                  and B. Thomas, \"\
    LDP Specification\", RFC 3036, January\n                  2001.\n   [PW-CONTROL]\
    \   Martini, L., El-Aawar, N., Heron, G., Rosen, E.,\n                  Tappan,\
    \ D., and  T. Smith, \"Pseudowire Setup and\n                  Maintenance using\
    \ the Label Distribution Protocol\",\n                  Work in Progress.\n  \
    \ [RFC4365]      Rosen, E., \"Applicability Statement for BGP/MPLS IP\n      \
    \            Virtual Private Networks (VPNs)\", RFC 4365, February\n         \
    \         2006.\n   [RSVP-TE]      Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n\
    \                  V., and G. Swallow, \"RSVP-TE: Extensions to RSVP for\n   \
    \               LSP Tunnels\", RFC 3209, December 2001.\n   [VCCV]         Nadeau,\
    \ T. and R. Aggarwal, \"Pseudo Wire Virtual\n                  Circuit Connectivity\
    \ Verification (VCCV), Work in\n                  Progress, August 2005.\n   [VPLS-BGP]\
    \     Kompella, K. and Y. Rekhter, \"Virtual Private LAN\n                  Service\"\
    , Work in Progress.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Overall, the security needs for LSP ping are\
    \ similar to those of ICMP\n   ping.\n   There are at least three approaches to\
    \ attacking LSRs using the\n   mechanisms defined here.  One is a Denial-of-Service\
    \ attack, by\n   sending MPLS echo requests/replies to LSRs and thereby increasing\n\
    \   their workload.  The second is obfuscating the state of the MPLS data\n  \
    \ plane liveness by spoofing, hijacking, replaying, or otherwise\n   tampering\
    \ with MPLS echo requests and replies.  The third is an\n   unauthorized source\
    \ using an LSP ping to obtain information about the\n   network.\n   To avoid\
    \ potential Denial-of-Service attacks, it is RECOMMENDED that\n   implementations\
    \ regulate the LSP ping traffic going to the control\n   plane.  A rate limiter\
    \ SHOULD be applied to the well-known UDP port\n   defined below.\n   Unsophisticated\
    \ replay and spoofing attacks involving faking or\n   replaying MPLS echo reply\
    \ messages are unlikely to be effective.\n   These replies would have to match\
    \ the Sender's Handle and Sequence\n   Number of an outstanding MPLS echo request\
    \ message.  A non-matching\n   replay would be discarded as the sequence has moved\
    \ on, thus a spoof\n   has only a small window of opportunity.  However, to provide\
    \ a\n   stronger defense, an implementation MAY also validate the TimeStamp\n\
    \   Sent by requiring and exact match on this field.\n   To protect against unauthorized\
    \ sources using MPLS echo request\n   messages to obtain network information,\
    \ it is RECOMMENDED that\n   implementations provide a means of checking the source\
    \ addresses of\n   MPLS echo request messages against an access list before accepting\n\
    \   the message.\n   It is not clear how to prevent hijacking (non-delivery) of\
    \ echo\n   requests or replies; however, if these messages are indeed hijacked,\n\
    \   LSP ping will report that the data plane is not working as it should.\n  \
    \ It does not seem vital (at this point) to secure the data carried in\n   MPLS\
    \ echo requests and replies, although knowledge of the state of\n   the MPLS data\
    \ plane may be considered confidential by some.\n   Implementations SHOULD, however,\
    \ provide a means of filtering the\n   addresses to which echo reply messages\
    \ may be sent.\n   Although this document makes special use of 127/8 address,\
    \ these are\n   used only in conjunction with the UDP port 3503.  Furthermore,\
    \ these\n   packets are only processed by routers.  All other hosts MUST treat\n\
    \   all packets with a destination address in the range 127/8 in\n   accordance\
    \ to RFC 1122.  Any packet received by a router with a\n   destination address\
    \ in the range 127/8 without a destination UDP port\n   of 3503 MUST be treated\
    \ in accordance to RFC 1812.  In particular,\n   the default behavior is to treat\
    \ packets destined to a 127/8 address\n   as \"martians\".\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The TCP and UDP port number 3503 has been allocated\
    \ by IANA for LSP\n   echo requests and replies.\n   The following sections detail\
    \ the new name spaces to be managed by\n   IANA.  For each of these name spaces,\
    \ the space is divided into\n   assignment ranges; the following terms are used\
    \ in describing the\n   procedures by which IANA allocates values: \"Standards\
    \ Action\" (as\n   defined in [IANA]), \"Specification Required\", and \"Vendor\
    \ Private\n   Use\".\n   Values from \"Specification Required\" ranges MUST be\
    \ registered with\n   IANA.  The request MUST be made via an Experimental RFC\
    \ that\n   describes the format and procedures for using the code point; the\n\
    \   actual assignment is made during the IANA actions for the RFC.\n   Values\
    \ from \"Vendor Private\" ranges MUST NOT be registered with IANA;\n   however,\
    \ the message MUST contain an enterprise code as registered\n   with the IANA\
    \ SMI Private Network Management Private Enterprise\n   Numbers.  For each name\
    \ space that has a Vendor Private range, it\n   must be specified where exactly\
    \ the SMI Private Enterprise Number\n   resides; see below for examples.  In this\
    \ way, several enterprises\n   (vendors) can use the same code point without fear\
    \ of collision.\n"
- title: 7.1.  Message Types, Reply Modes, Return Codes
  contents:
  - "7.1.  Message Types, Reply Modes, Return Codes\n   The IANA has created and will\
    \ maintain registries for Message Types,\n   Reply Modes, and Return Codes.  Each\
    \ of these can take values in the\n   range 0-255.  Assignments in the range 0-191\
    \ are via Standards\n   Action; assignments in the range 192-251 are made via\
    \ \"Specification\n   Required\"; values in the range 252-255 are for Vendor Private\
    \ Use,\n   and MUST NOT be allocated.\n   If any of these fields fall in the Vendor\
    \ Private range, a top-level\n   Vendor Enterprise Number TLV MUST be present\
    \ in the message.\n   Message Types defined in this document are the following:\n\
    \      Value    Meaning\n      -----    -------\n          1    MPLS echo request\n\
    \          2    MPLS echo reply\n   Reply Modes defined in this document are the\
    \ following:\n      Value    Meaning\n      -----    -------\n          1    Do\
    \ not reply\n          2    Reply via an IPv4/IPv6 UDP packet\n          3   \
    \ Reply via an IPv4/IPv6 UDP packet with Router Alert\n          4    Reply via\
    \ application level control channel\n   Return Codes defined in this document\
    \ are listed in section 3.1.\n"
- title: 7.2.  TLVs
  contents:
  - "7.2.  TLVs\n   The IANA has created and will maintain a registry for the Type\
    \ field\n   of top-level TLVs as well as for any associated sub-TLVs.  Note the\n\
    \   meaning of a sub-TLV is scoped by the TLV.  The number spaces for the\n  \
    \ sub-TLVs of various TLVs are independent.\n   The valid range for TLVs and sub-TLVs\
    \ is 0-65535.  Assignments in the\n   range 0-16383 and 32768-49161 are made via\
    \ Standards Action as\n   defined in [IANA]; assignments in the range 16384-31743\
    \ and\n   49162-64511 are made via \"Specification Required\" as defined above;\n\
    \   values in the range 31744-32767 and 64512-65535 are for Vendor\n   Private\
    \ Use, and MUST NOT be allocated.\n   If a TLV or sub-TLV has a Type that falls\
    \ in the range for Vendor\n   Private Use, the Length MUST be at least 4, and\
    \ the first four octets\n   MUST be that vendor's SMI Private Enterprise Number,\
    \ in network octet\n   order.  The rest of the Value field is private to the vendor.\n\
    \   TLVs and sub-TLVs defined in this document are the following:\n         Type\
    \       Sub-Type        Value Field\n         ----       --------        -----------\n\
    \            1                       Target FEC Stack\n                      \
    \   1          LDP IPv4 prefix\n                         2          LDP IPv6 prefix\n\
    \                         3          RSVP IPv4 LSP\n                         4\
    \          RSVP IPv6 LSP\n                         5          Not Assigned\n \
    \                        6          VPN IPv4 prefix\n                        \
    \ 7          VPN IPv6 prefix\n                         8          L2 VPN endpoint\n\
    \                         9          \"FEC 128\" Pseudowire (Deprecated)\n   \
    \                     10          \"FEC 128\" Pseudowire\n                   \
    \     11          \"FEC 129\" Pseudowire\n                        12         \
    \ BGP labeled IPv4 prefix\n                        13          BGP labeled IPv6\
    \ prefix\n                        14          Generic IPv4 prefix\n          \
    \              15          Generic IPv6 prefix\n                        16   \
    \       Nil FEC\n            2                       Downstream Mapping\n    \
    \        3                       Pad\n            4                       Not\
    \ Assigned\n            5                       Vendor Enterprise Number\n   \
    \         6                       Not Assigned\n            7                \
    \       Interface and Label Stack\n            8                       Not Assigned\n\
    \            9                       Errored TLVs\n                    Any value\
    \       The TLV not understood\n           10                       Reply TOS\
    \ Byte\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document is the outcome of many discussions among\
    \ many people,\n   including Manoj Leelanivas, Paul Traina, Yakov Rekhter, Der-Hwa\
    \ Gan,\n   Brook Bailey, Eric Rosen, Ina Minei, Shivani Aggarwal, and Vanson\n\
    \   Lim.\n   The description of the Multipath Information sub-field of the\n \
    \  Downstream Mapping TLV was adapted from text suggested by Curtis\n   Villamizar.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kireeti Kompella\n   Juniper Networks\n   1194 N.Mathilda\
    \ Ave\n   Sunnyvale, CA 94089\n   EMail:  kireeti@juniper.net\n   George Swallow\n\
    \   Cisco Systems\n   1414 Massachusetts Ave,\n   Boxborough, MA 01719\n   Phone:\
    \  +1 978 936 1398\n   EMail:  swallow@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
