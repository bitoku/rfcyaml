- title: __initial_text__
  contents:
  - '       The Document Architecture for the Cornell Digital Library

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an architecture for the storage and retrieval\
    \ of\n   the digital representations for books, journals, photographic images,\n\
    \   etc., which are collected in a large organized digital library.\n   Two unique\
    \ features of this architecture are the ability to generate\n   reference documents\
    \ and the ability to create multiple views of a\n   document.\n"
- title: Introduction
  contents:
  - "Introduction\n   In 1989, Cornell University and Xerox Corporation, with support\
    \ from\n   the Commission on Preservation and Access and later Sun Microsystems,\n\
    \   embarked on a collaborative project to study and to prototype the\n   application\
    \ of digital technologies for the preservation of library\n   material.  During\
    \ this project, Xerox developed the College Library\n   Access and Storage System\
    \ (CLASS), and Cornell developed software to\n   provide network access to the\
    \ CLASS Digital Library.\n   Xerox and Cornell University Library staff worked\
    \ closely together to\n   define requirements for storing both low- and high-resolution\n\
    \   versions of images, so that the low-resolution images could be used\n   for\
    \ browsing over the network and the high-resolution images could be\n   used for\
    \ printing.  In addition, substantial work was done to define\n   documents with\
    \ internal structures that could be navigated.  Xerox\n   developed the software\
    \ to create and store documents, while Cornell\n   developed complementary software\
    \ to allow library users to browse the\n   documents and request printed copies\
    \ over the network.\n   Cornell has defined a document architecture which builds\
    \ on the\n   lessons learned in the CLASS project, and is maintaining digital\n\
    \   library materials in that form.\n"
- title: Document Architecture Overview
  contents:
  - "Document Architecture Overview\n   Just as a conventional library contains books\
    \ rather than pages, so\n   the electronic library must contain documents rather\
    \ than images.\n   During the scanning process, images are automatically linked\
    \ into\n   documents by creating document structure files which order the image\n\
    \   files in the same way the binding of a book orders the pages.  Thus,\n   the\
    \ digital book as currently configured consists of two parts: a set\n   of individual\
    \ pages stored as discrete bit map image files, and the\n   document structure\
    \ files which \"bind\" the image files into a\n   document.  In addition, a database\
    \ entry is made for each digital\n   document which permits searching by author\
    \ and title (i.e.,\n   bibliographic information).  Beyond the order of the pages,\
    \ the\n   arrangement of a physical book provides information to readers.  The\n\
    \   title page and publication information come first; the table of\n   contents\
    \ usually precedes the text; the text is divided into sections\n   or chapters;\
    \ if there is an index, it follows the text.  The reader\n   often refers to these\
    \ components of a book when browsing the library\n   shelves, in order to determine\
    \ whether to read the book.\n   The document structure provides direct access\
    \ to the components of an\n   electronic document, storing the information that\
    \ would otherwise be\n   lost when the book is disbound for scanning.\n"
- title: Document Architecture Requirements
  contents:
  - "Document Architecture Requirements\n   Listed below are the requirements that\
    \ were initially set down for\n   the Cornell Digital Library Architecture.\n\
    \   1. The architecture must be open (i.e., published and freely\n      available).\n\
    \   2. The architecture should be as simple as possible (to facilitate\n     \
    \ product development).\n   3. The architecture should assume data storage in\
    \ UNIX file systems.\n   4. The architecture should allow for standard data usage,\
    \ such as via\n      FTP and Gopher servers (i.e., pages of a document must exist\
    \ in a\n      single directory, and the naming convention used must order them\n\
    \      in the standard collating sequence, such as the series \"0001.TIF,\n  \
    \    0002.TIF,..., 0411.TIF\" (NOTE: a series such as \"1.TIF, 2.TIF,...,\n  \
    \    10.TIF\" would be ordered \"1.TIF, 10.TIF, 2.TIF, ...\" which is not\n  \
    \    acceptable).\n   5. The architecture should provide for storing the same\
    \ information\n      in different formats.  For example, when a page of a document\
    \ is\n      available at several different resolutions.\n   6. Low-resolution\
    \ \"thumbnail\" images of each page must be stored to\n      facilitate browsing\
    \ and sharing of data.\n   7. The architecture must support distribution of files\
    \ so that\n      similar files may be stored together, permitting optimization\
    \ of\n      storage use and performance.\n   8. The architecture must support\
    \ documents that are composed of\n      references to all or part of other documents.\n\
    \   9. The architecture must support document components which are\n      stored\
    \ on separate servers distributed across the network.\n   10. The architecture\
    \ must support not only an hierarchical structure\n       for each document, but\
    \ the ability to define multiple views of\n       each document.\n   11. The architecture\
    \ should accept, rather than dictate, directory\n       structures in which documents\
    \ will be stored.  This will permit\n       documents created in other ways to\
    \ be added to the Digital\n       Library simply by adding database information\
    \ rather than by\n       copying or moving files.\n"
- title: Document Architecture Description
  contents:
  - "Document Architecture Description\n   A digital library consists of a Digital\
    \ Library Server, networked\n   storage, and a referencing database.  A single\
    \ digital library will\n   contain one or more collections.  Each collection will\
    \ contain one or\n   more documents.\n   The referencing database allows searching\
    \ for documents by author,\n   title, and document ID.  In the current implementation,\
    \ the\n   referencing database is a relational SQL database, and each\n   collection\
    \ is  epresented by a table in the database.  It is planned\n   to migrate to\
    \ Z39.50 database searching as the preferred method, as\n   this protocol has\
    \ been established as the standard for library\n   applications.\n   Authorization\
    \ will be primarily collection-based, although the design\n   will permit authorization\
    \ checking at any level down to the\n   individual file.  Notification would come\
    \ only when the patron\n   attempted to open the document or access the particular\
    \ component.\n   Each document consists of three components: the logical structure;\n\
    \   the physical references; and the data files.\n   The logical structure is\
    \ a logical description of the document.\n   Conceptually, a document is a tree,\
    \ with the leaves being the data\n   files (pages).  At a minimum, all documents\
    \ have a logical structure\n   which lists the pages in the document and the order\
    \ in which they\n   appear.  Usually, documents will have a more elaborate structure.\n\
    \   The logical structure relates the logical structure of a document to\n   the\
    \ physical references which make up the document.\n   These physical references\
    \ map the lowest levels of the document's\n   logical structure (the leaves of\
    \ the tree) to the files that contain\n   the data.  Where there are multiple\
    \ representations of a page, such\n   as images at various resolutions, these\
    \ are linked together in the\n   physical references file.\n   The data files\
    \ contain the data making up a document.  Any format can\n   be accommodated:\
    \ image files, ASCII text, PostScript, etc.  However,\n   one-to-one correspondence\
    \ between data files for a given physical\n   reference is assumed.  That is,\
    \ if there are multiple file types for\n   a single page, these files should represent\
    \ exactly the same\n   information.\n"
- title: Physical References File
  contents:
  - "Physical References File\n   The Physical References file is the component of\
    \ the document which\n   relates logical structures (logical components of documents)\
    \ to\n   physical files.  Document references, by which a document can be\n  \
    \ composed of all or part of other documents possibly residing on\n   different\
    \ servers, are handled in the Physical References file.\n   A document may contain\
    \ multiple document objects, each of which\n   contains one or more data objects.\
    \  When a document contains actual\n   physical data (for example, it is created\
    \ by scanning or importing\n   images), a Master Document Object is created. \
    \ When a document\n   incorporates components of other documents, a Reference\
    \ Document\n   Object is created for each of the other documents.  The Document\n\
    \   Objects are numbered with internal reference numbers, which are\n   included\
    \ in the corresponding Data Object lines.\n   Data Object lines include the Document\
    \ Object number, the file\n   reference number, and the file type.  The Document\
    \ Object number\n   refers to a Document Object line, from which the library name,\n\
    \   collection name, and document ID can be retrieved.  The tuple\n   <libraryID>+<collectionID>+<documentID>+<filetype>+<file\
    \ reference>\n   is guaranteed to locate a file.  Each Data Object line refers\
    \ to a\n   single file; where multiple file types of a single document page\n\
    \   exist, there will be multiple Data Object lines for that page.\n   In the\
    \ file, all Document Object lines will preceed all Data Object\n   lines for a\
    \ given document.  Document Object lines may be either\n   grouped together at\
    \ the beginning of the file, or may immediately\n   preceed the first Data Object\
    \ line for the Document Object. Document\n   Object lines will appear in order\
    \ by Document Object number.  Data\n   Object lines will appear in order by sequence\
    \ number, NOT by Document\n   Object number.\n   The fields in the Physical References\
    \ file are delimited by vertical\n   bars.\n"
- title: Document Object Lines
  contents:
  - "Document Object Lines\n   Field   Description                  Comments\n   -----\
    \   ----------------------       ----------------------------\n     1     Document\
    \ Object number       0 => Master Document Object\n                          \
    \              1-9 => Reference Document Object\n     2     Library name     \
    \            Server name\n     3     Collection name\n     4     Document ID \
    \                 8-digit number\n     5     Author name\n     6     Volume\n\
    \     7     Title\n     8     Edition\n"
- title: Data Object Lines
  contents:
  - "Data Object Lines\n   Field   Description                  Comments\n   -----\
    \   ----------------------       ----------------------------\n     1     Document\
    \ Object number       Corresponds to above\n     2     Sequence number\n     3\
    \     File reference               Reference number used to locate\n         \
    \                               file in filing system\n     4     Physical reference\
    \ number    Equal to Logical Structure file\n     5     File type            \
    \        1 = TIFF 600dpi\n                                        2 = TIFF thumbnail\n\
    \                                        3 = ASCII version of page\n         \
    \                                   (i.e., OCR output)\n                     \
    \                   4 = ASCII notes\n                                        5\
    \ = Other\n                                        6 = TIFF 300dpi\n     6   \
    \  Note\n"
- title: Physical References File Example
  contents:
  - 'Physical References File Example

    '
- title: +0|CORNELL|OLINLIB|00000001|Boole, Mary Everest||Philosophy Of Algebra||
  contents:
  - '+0|CORNELL|OLINLIB|00000001|Boole, Mary Everest||Philosophy Of Algebra||

    '
- title: '|0|1|00000002|5|1||   (File ref. #2 = Phys. ref. #5 = 600dpi TIFF image)'
  contents:
  - '|0|1|00000002|5|1||   (File ref. #2 = Phys. ref. #5 = 600dpi TIFF image)

    '
- title: '|0|2|00000003|5|2||   (File ref. #3 = Phys. ref. #5 = 100dpi TIFF image)'
  contents:
  - '|0|2|00000003|5|2||   (File ref. #3 = Phys. ref. #5 = 100dpi TIFF image)

    '
- title: '|0|3|00000004|6|1||   (File ref. #4 = Phys. ref. #6 = 600dpi TIFF image)'
  contents:
  - '|0|3|00000004|6|1||   (File ref. #4 = Phys. ref. #6 = 600dpi TIFF image)

    '
- title: '|0|4|00000005|6|2||   (File ref. #5 = Phys. ref. #6 = 100dpi TIFF image)'
  contents:
  - "|0|4|00000005|6|2||   (File ref. #5 = Phys. ref. #6 = 100dpi TIFF image)\n  \
    \ Note that in the above, it is guaranteed that file references 2 and 3\n   are\
    \ two different versions of the same page, as are file references 4\n   and 5.\n"
- title: Logical Structure File
  contents:
  - "Logical Structure File\n   The Logical Structure file is the component of the\
    \ document structure\n   which offers \"views\" of a document and links images\
    \ together\n   logically to define documents. The file is actually an unloaded\
    \ tree;\n   when a document is \"opened\", the file is read and the tree\n   reconstructed.\
    \ By convention, all Logical Structure files contain one\n   logical structure\
    \ \"PAGES\" which defines the document by listing the\n   pages in the order in\
    \ which they appeared in the original document.\n"
- title: Document Structure lines
  contents:
  - "Document Structure lines\n   Field   Description                  Comments\n\
    \   -----   ----------------------       ----------------------------\n     1\
    \     Parent structure number      Structure is a child of...\n     2     Sequence\
    \ number\n     3     Logical Structure name       Label for this structure\n \
    \    4     Structure number             Equal to Physical Reference file\n   \
    \  5     Logical Children             # of logical children of this\n        \
    \                                  structure\n"
- title: Document Structure lines (continued)
  contents:
  - "Document Structure lines (continued)\n   Field   Description                \
    \  Comments\n   -----   ----------------------       ----------------------------\n\
    \     6     Physical Children            # of physical children of this\n    \
    \                                      structure\n     7     References      \
    \             # of references to this\n                                      \
    \    structure within this document\n                                        (for\
    \ how many structures is this\n                                         a substructure)\n"
- title: Logical Structure File Example
  contents:
  - 'Logical Structure File Example

    '
- title: '|0|0|ROOT|0|4|0|0|            Structure 0, ROOT, has 4 logical children'
  contents:
  - '|0|0|ROOT|0|4|0|0|            Structure 0, ROOT, has 4 logical children

    '
- title: '|0|1|PAGES|1|100|0|1|         Str. 1, PAGES, has 100 logical children'
  contents:
  - '|0|1|PAGES|1|100|0|1|         Str. 1, PAGES, has 100 logical children

    '
- title: '|0|2|CONTENTS|2|22|0|1|       Str. 2, CONTENTS, has 22 logical children'
  contents:
  - "|0|2|CONTENTS|2|22|0|1|       Str. 2, CONTENTS, has 22 logical children\n   \
    \                           ...has no physical children\n ...\n"
- title: '|1|1|Production note|5|0|2|2| Str. 5 is child of structure 1'
  contents:
  - "|1|1|Production note|5|0|2|2| Str. 5 is child of structure 1\n              \
    \                ...has a label \"Production note\"\n                        \
    \      ...has no logical children\n                              ...has 2 physical\
    \ references\n                              ...is referenced twice in this document\n"
- title: '|1|2||6|0|2|1|                Str. 6 has no label'
  contents:
  - '|1|2||6|0|2|1|                Str. 6 has no label

    '
- title: '|1|3||7|0|2|1|                Str. 7 has 2 physical references'
  contents:
  - '|1|3||7|0|2|1|                Str. 7 has 2 physical references

    '
- title: '|1|4||8|0|2|1|                Str. 8 is referenced only here'
  contents:
  - '|1|4||8|0|2|1|                Str. 8 is referenced only here

    '
- title: '|1|5||9|0|2|1|                Str. 9 is 5th sequential child of PAGES'
  contents:
  - "|1|5||9|0|2|1|                Str. 9 is 5th sequential child of PAGES\n ...\n"
- title: '|1|99||103|0|2|2|'
  contents:
  - '|1|99||103|0|2|2|

    '
- title: '|1|100||104|0|2|2|'
  contents:
  - '|1|100||104|0|2|2|

    '
- title: '|2|1|Production note|105|1|0|1|          Str. 105 is a child of str. 2'
  contents:
  - '|2|1|Production note|105|1|0|1|          Str. 105 is a child of str. 2

    '
- title: '|2|2|Title page|106|1|0|1|               Str. 106 has 1 logical child'
  contents:
  - '|2|2|Title page|106|1|0|1|               Str. 106 has 1 logical child

    '
- title: '|2|3|Table of contents|107|2|0|1|'
  contents:
  - '|2|3|Table of contents|107|2|0|1|

    '
- title: '|2|4|Chapter 1. From Arithmetic to Algebra|108|6|0|1|'
  contents:
  - '|2|4|Chapter 1. From Arithmetic to Algebra|108|6|0|1|

    '
- title: '|2|5|Chapter 2. The Making of Algebras|109|4|0|1|'
  contents:
  - '|2|5|Chapter 2. The Making of Algebras|109|4|0|1|

    '
- title: '|2|6|Chapter 3. Simultaneous Problems|110|4|0|1|'
  contents:
  - '|2|6|Chapter 3. Simultaneous Problems|110|4|0|1|

    '
- title: '|2|7|Chapter 4. Partial Solutions...|111|3|0|1|'
  contents:
  - '|2|7|Chapter 4. Partial Solutions...|111|3|0|1|

    '
- title: '|2|8|Chapter 5. Mathematical Certainty...|112|3|0|1|'
  contents:
  - '|2|8|Chapter 5. Mathematical Certainty...|112|3|0|1|

    '
- title: '|2|9|Chapter 6. The First Hebrew Algebra|113|8|0|1|'
  contents:
  - '|2|9|Chapter 6. The First Hebrew Algebra|113|8|0|1|

    '
- title: '|2|10|Chapter 7. How to Choose our Hypotheses|114|9|0|1|'
  contents:
  - '|2|10|Chapter 7. How to Choose our Hypotheses|114|9|0|1|

    '
- title: '|2|11|Chapter 8. The Limits of the Teachers Function|115|5|0|1|'
  contents:
  - '|2|11|Chapter 8. The Limits of the Teachers Function|115|5|0|1|

    '
- title: '|2|12|Chapter 9. The Use of Sewing Cards|116|4|0|1|'
  contents:
  - "|2|12|Chapter 9. The Use of Sewing Cards|116|4|0|1|\n ...\n"
- title: '|2|20|Chapter 17. From Bondage to Freedom|124|5|0|1|'
  contents:
  - '|2|20|Chapter 17. From Bondage to Freedom|124|5|0|1|

    '
- title: '|2|21|Appendix|125|2|1|1|'
  contents:
  - '|2|21|Appendix|125|2|1|1|

    '
- title: '|2|22|advertisements|126|4|1|2|'
  contents:
  - '|2|22|advertisements|126|4|1|2|

    '
- title: '|105|1|Production note|5|0|2|2|          Str. 5 is a child of str. 105'
  contents:
  - '|105|1|Production note|5|0|2|2|          Str. 5 is a child of str. 105

    '
- title: '|106|1|Title page|11|0|2|2|              2nd reference to str. 11'
  contents:
  - '|106|1|Title page|11|0|2|2|              2nd reference to str. 11

    '
- title: '|107|1|7|15|0|2|2|'
  contents:
  - '|107|1|7|15|0|2|2|

    '
- title: '|107|2|8|16|0|2|2|'
  contents:
  - "|107|2|8|16|0|2|2|\n ...\n"
- title: '|126|4||104|0|2|2|'
  contents:
  - '|126|4||104|0|2|2|

    '
- title: Implementation Details
  contents:
  - "Implementation Details\n   The tuple <library ID>+<collection ID>+<document ID>+<filetype>+\n\
    \   <file reference> is guaranteed to locate a file.  A file locator\n   program\
    \ will translate between this tuple and the fully-qualified\n   path and file\
    \ name in the underlying file system.  While a library\n   will always have a\
    \ hierarchical nature corresponding to UNIX file\n   systems, the order of the\
    \ hierarchy will be flexible to accommodate\n   optimization efforts.  Each level\
    \ of the hierarchy will have an INFO\n   file that describes the order of the\
    \ lower levels of the hierarchy.\n   The file locator program will read these\
    \ files as it navigates the\n   directory structure of the file system when a\
    \ library, collection, or\n   document is opened.  Two examples follow:\n    \
    \ Example 1.  Hierarchy is LIBRARY, COLLECTION, DOCUMENT, FILETYPE.\n  /<library\
    \ name>\n          LIBINFO.TXT                      Description of library\n \
    \         /<collection name>\n                 COLINFO.TXT               Description\
    \ of collection\n                 /<document ID>\n                       DOCINFO.TXT\
    \         Description of document\n                       LOGSTR.000         \
    \ Logical structure file\n                       PHYSREF.000         Physical\
    \ reference file\n                       /<filetype1>\n                      \
    \         00001.TIF\n                               00002.TIF\n              \
    \                 ...\n                       /<filetype2>\n                 \
    \              00001.TIF\n                               00002.TIF\n         \
    \                      ...\n   Example 2.  Hierarchy is LIBRARY, FILETYPE, COLLECTION,\
    \ DOCUMENT.\n  /<library name>\n          LIBINFO.TXT                        \
    \ Description of library\n          /<filetype1>\n                  /<collection\
    \ name>\n                         COLINFO.TXT          Description of collection\n\
    \                         /<document ID>\n                               DOCINFO.TXT\
    \    Description of document\n                               LOGSTR.000     Logical\
    \ structure file\n                               PHYSREF.000    Physical reference\
    \ file\n                               00001.TIF\n                           \
    \    00002.TIF\n                               ...\n          /<filetype2>\n \
    \                 /<collection name>\n                         COLINFO.TXT   \
    \       Description of collection\n                         /<document ID>\n \
    \                              DOCINFO.TXT    Description of document\n      \
    \                         LOGSTR.000     Logical structure file\n            \
    \                   PHYSREF.000    Physical reference file\n                 \
    \              00001.TIF\n                               00002.TIF\n         \
    \                      ....\n   This implementation involves some redundancy,\
    \ but it permits complete\n   copies of a collection to be mounted on different\
    \ file systems for\n   performance considerations.  In particular, the second\
    \ scheme would\n   facilitate storing all low-resolution images on high-speed\
    \ magnetic\n   disk for fast access, and all high-resolution images on slower,\
    \ less\n   expensive storage.  This will also facilitate authorizing access to\n\
    \   low-resolution images by other software systems (FTP, Gopher) while\n   restricting\
    \ access to high-resolution images.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1] Turner, W., \"Cornell Digital Library Document Architecture,\n\
    \       Version 1.1 - 3/22/94\", Library Technology Department, Cornell\n    \
    \   University.\n"
- title: Author's Address
  contents:
  - "Author's Address\n       William Turner\n       Library Technology\n       502\
    \ Olin Library\n       Cornell University\n       Ithaca, NY  14853\n       Phone:\
    \ 607-255-9098\n       Fax:   607-255-9346\n       EMail: wrt1@cornell.edu\n"
