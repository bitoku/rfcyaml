- title: __initial_text__
  contents:
  - "         MIME (Multipurpose Internet Mail Extensions) Part Two:\n           \
    \   Message Header Extensions for Non-ASCII Text\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes an extension to the message format defined in\
    \ RFC\n   1521 [1], to allow the representation of character sets other than\n\
    \   ASCII in RFC 822 (STD 11) message headers.  The extensions described\n   were\
    \ designed to be highly compatible with existing Internet mail\n   handling software,\
    \ and to be easily implemented in mail readers that\n   support RFC 1521.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   RFC 1521 describes a mechanism for denoting textual body\
    \ parts which\n   are coded in various character sets, as well as methods for\
    \ encoding\n   such body parts as sequences of printable ASCII characters.  This\n\
    \   memo describes similar techniques to allow the encoding of non-ASCII\n   text\
    \ in various portions of a RFC 822 [2] message header, in a manner\n   which is\
    \ unlikely to confuse existing message handling software.\n   Like the encoding\
    \ techniques described in RFC 1521, the techniques\n   outlined here were designed\
    \ to allow the use of non-ASCII characters\n   in message headers in a way which\
    \ is unlikely to be disturbed by the\n   quirks of existing Internet mail handling\
    \ programs.  In particular,\n   some mail relaying programs are known to (a) delete\
    \ some message\n   header fields while retaining others, (b) rearrange the order\
    \ of\n   addresses in To or Cc fields, (c) rearrange the (vertical) order of\n\
    \   header fields, and/or (d) \"wrap\" message headers at different places\n \
    \  than those in the original message.  In addition, some mail reading\n   programs\
    \ are known to have difficulty correctly parsing message\n   headers which, while\
    \ legal according to RFC 822, make use of\n   backslash-quoting to \"hide\" special\
    \ characters such as \"<\", \",\", or\n   \":\", or which exploit other infrequently-used\
    \ features of that\n   specification.\n   While it is unfortunate that these programs\
    \ do not correctly\n   interpret RFC 822 headers, to \"break\" these programs\
    \ would cause\n   severe operational problems for the Internet mail system.  The\n\
    \   extensions described in this memo therefore do not rely on little-\n   used\
    \ features of RFC 822.\n   Instead, certain sequences of \"ordinary\" printable\
    \ ASCII characters\n   (known as \"encoded-words\") are reserved for use as encoded\
    \ data.  The\n   syntax of encoded-words is such that they are unlikely to\n \
    \  \"accidentally\" appear as normal text in message headers.\n   Furthermore,\
    \ the characters used in encoded-words are restricted to\n   those which do not\
    \ have special meanings in the context in which the\n   encoded-word appears.\n\
    \   Generally, an \"encoded-word\" is a sequence of printable ASCII\n   characters\
    \ that begins with \"=?\", ends with \"?=\", and has two \"?\"s in\n   between.\
    \  It specifies a character set and an encoding method, and\n   also includes\
    \ the original text encoded as graphic ASCII characters,\n   according to the\
    \ rules for that encoding method.\n   A mail composer that implements this specification\
    \ will provide a\n   means of inputting non-ASCII text in header fields, but will\n\
    \   translate these fields (or appropriate portions of these fields) into\n  \
    \ encoded-words before inserting them into the message header.\n   A mail reader\
    \ that implements this specification will recognize\n   encoded-words when they\
    \ appear in certain portions of the message\n   header.  Instead of displaying\
    \ the encoded-word \"as is\", it will\n   reverse the encoding and display the\
    \ original text in the designated\n   character set.\n   NOTES\n      This memo\
    \ relies heavily on notation and terms defined STD 11, RFC\n      822 and RFC\
    \ 1521.  In particular, the syntax for the ABNF used in\n      this memo is defined\
    \ in STD 11, RFC 822, as well as many of the\n      terms used in the grammar\
    \ for the header extensions defined here.\n      Successful implementation of\
    \ this protocol extension requires\n      careful attention to the details of\
    \ both STD 11, RFC 822 and RFC\n      1521.\n      When the term \"ASCII\" appears\
    \ in this memo, it refers to the \"7-\n      Bit American Standard Code for Information\
    \ Interchange\", ANSI\n      X3.4-1986.  The MIME charset name for this character\
    \ set is \"US-\n      ASCII\".  When not specifically referring to the MIME charset\
    \ name,\n      this document uses the term \"ASCII\", both for brevity and for\n\
    \      consistency with STD 11, RFC 822.  However, implementors are\n      warned\
    \ that the character set name must be spelled \"US-ASCII\" in\n      MIME message\
    \ and body part headers.\n"
- title: 2. Syntax of encoded-words
  contents:
  - "2. Syntax of encoded-words\n   An \"encoded-word\" is defined by the following\
    \ ABNF grammar.  The\n   notation of RFC 822 is used, with the exception that\
    \ white space\n   characters MAY NOT appear between components of an encoded-word.\n\
    \   encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n \
    \  charset = token    ; see section 3\n   encoding = token   ; see section 4\n\
    \   token = 1*<Any CHAR except SPACE, CTLs, and especials>\n   especials = \"\
    (\" / \")\" / \"<\" / \">\" / \"@\" / \",\" / \";\" / \":\" / \"\n           \
    \    <\"> / \"/\" / \"[\" / \"]\" / \"?\" / \".\" / \"=\"\n   encoded-text = 1*<Any\
    \ printable ASCII character other\n                     than \"?\" or SPACE>\n\
    \                     ; (but see \"Use of encoded-words in message\n         \
    \            ; headers\", section 5)\n   Both \"encoding\" and \"charset\" names\
    \ are case-independent.  Thus the\n   charset name \"ISO-8859-1\" is equivalent\
    \ to \"iso-8859-1\", and the\n   encoding named \"Q\" may be spelled either \"\
    Q\" or \"q\".\n   An encoded-word may not be more than 75 characters long, including\n\
    \   charset, encoding, encoded-text, and delimiters.  If it is desirable\n   to\
    \ encode more text than will fit in an encoded-word of 75\n   characters, multiple\
    \ encoded-words (separated by CRLF SPACE) may be\n   used.\n   While there is\
    \ no limit to the length of a multiple-line header\n   field, each line of a header\
    \ field that contains one or more\n   encoded-words is limited to 76 characters.\n\
    \   The length restrictions are included not only to ease\n   interoperability\
    \ through internetwork mail gateways, but also to\n   impose a limit on the amount\
    \ of lookahead a header parser must employ\n   (while looking for a final ?= delimiter)\
    \ before it can decide whether\n   a token is an encoded-word or something else.\n\
    \   The characters which may appear in encoded-text are further\n   restricted\
    \ by the rules in section 5.\n"
- title: 3. Character sets
  contents:
  - "3. Character sets\n   The \"charset\" portion of an encoded-word specifies the\
    \ character set\n   associated with the unencoded text.  A charset can be any\
    \ of the\n   character set names allowed in an RFC 1521 \"charset\" parameter\
    \ of a\n   \"text/plain\" body part, or any character set name registered with\n\
    \   IANA for use with the MIME text/plain content-type [3].  (See section\n  \
    \ 7.1.1 of RFC 1521 for a list of charsets defined in that document).\n   Some\
    \ character sets use code-switching techniques to switch between\n   \"ASCII mode\"\
    \ and other modes.  If unencoded text in an encoded-word\n   contains control\
    \ codes to switch out of ASCII mode, it must also\n   contain additional control\
    \ codes such that ASCII mode is again\n   selected at the end of the encoded-word.\
    \  (This rule applies\n   separately to each encoded-word, including adjacent\
    \ encoded-words\n   within a single header field.)\n   When there is a possibility\
    \ of using more than one character set to\n   represent the text in an encoded-word,\
    \ and in the absence of private\n   agreements between sender and recipients of\
    \ a message, it is\n   recommended that members of the ISO-8859-* series be used\
    \ in\n   preference to other character sets.\n"
- title: 4. Encodings
  contents:
  - "4. Encodings\n   Initially, the legal values for \"encoding\" are \"Q\" and \"\
    B\".  These\n   encodings are described below.  The \"Q\" encoding is recommended\
    \ for\n   use when most of the characters to be encoded are in the ASCII\n   character\
    \ set; otherwise, the \"B\" encoding should be used.\n   Nevertheless, a mail\
    \ reader which claims to recognize encoded-words\n   MUST be able to accept either\
    \ encoding for any character set which it\n   supports.\n   Only a subset of the\
    \ printable ASCII characters may be used in\n   encoded-text.  Space and tab characters\
    \ are not allowed, so that the\n   beginning and end of an encoded-word are obvious.\
    \  The \"?\" character\n   is used within an encoded-word to separate the various\
    \ portions of\n   the encoded-word from one another, and thus cannot appear in\
    \ the\n   encoded-text portion.  Other characters are also illegal in certain\n\
    \   contexts.  For example, an encoded-word in a \"phrase\" preceding an\n   address\
    \ in a From header field may not contain any of the \"specials\"\n   defined in\
    \ RFC 822.  Finally, certain other characters are disallowed\n   in some contexts,\
    \ to ensure reliability for messages that pass\n   through internetwork mail gateways.\n\
    \   The \"B\" encoding automatically meets these requirements.  The \"Q\"\n  \
    \ encoding allows a wide range of printable characters to be used in\n   non-critical\
    \ locations in the message header (e.g., Subject), with\n   fewer characters available\
    \ for use in other locations.\n"
- title: 4.1. The "B" encoding
  contents:
  - "4.1. The \"B\" encoding\n   The \"B\" encoding is identical to the \"BASE64\"\
    \ encoding defined by RFC\n   1521.\n"
- title: 4.2. The "Q" encoding
  contents:
  - "4.2. The \"Q\" encoding\n   The \"Q\" encoding is similar to the \"Quoted-Printable\"\
    \ content-\n   transfer-encoding defined in RFC 1521.  It is designed to allow\
    \ text\n   containing mostly ASCII characters to be decipherable on an ASCII\n\
    \   terminal without decoding.\n   (1) Any 8-bit value may be represented by a\
    \ \"=\" followed by two\n       hexadecimal digits.  For example, if the character\
    \ set in use\n       were ISO-8859-1, the \"=\" character would thus be encoded\
    \ as\n       \"=3D\", and a SPACE by \"=20\".  (Upper case should be used for\n\
    \       hexadecimal digits \"A\" through \"F\".)\n   (2) The 8-bit hexadecimal\
    \ value 20 (e.g., ISO-8859-1 SPACE) may be\n       represented as \"_\" (underscore,\
    \ ASCII 95.).  (This character may\n       not pass through some internetwork\
    \ mail gateways, but its use\n       will greatly enhance readability of \"Q\"\
    \ encoded data with mail\n       readers that do not support this encoding.) \
    \ Note that the \"_\"\n       always represents hexadecimal 20, even if the SPACE\
    \ character\n       occupies a different code position in the character set in\
    \ use.\n   (3) 8-bit values which correspond to printable ASCII characters other\n\
    \       than \"=\", \"?\", \"_\" (underscore), and SPACE may be represented as\n\
    \       those characters.  (But see section 5 for restrictions.)\n"
- title: 5. Use of encoded-words in message headers
  contents:
  - "5. Use of encoded-words in message headers\n   An encoded-word may appear in\
    \ a message header or body part header\n   according to the following rules:\n\
    \   (1) An encoded-word may replace a \"text\" token (as defined by RFC\n    \
    \   822) in any Subject or Comments header field, any extension\n       message\
    \ header field, or any RFC 1521 body part field for which\n       the field body\
    \ is defined as \"*text\".  An encoded-word may also\n       appear in any user-defined\
    \ (\"X-\") message or body part header\n       field.\n       Ordinary ASCII text\
    \ and encoded-words may appear together in the\n       same header field.  However,\
    \ an encoded-word that appears in a\n       header field defined as \"*text\"\
    \ MUST be separated from any\n       adjacent encoded-word or \"text\" by linear-white-space.\n\
    \   (2) An encoded-word may appear within a comment delimited by \"(\" and\n \
    \      \")\", i.e., wherever a \"ctext\" is allowed.  More precisely, the\n  \
    \     RFC 822 ABNF definition for \"comment\" is amended as follows:\n       comment\
    \ = \"(\" *(ctext / quoted-pair / comment / encoded-word) \")\"\n       A \"Q\"\
    -encoded encoded-word which appears in a comment MUST NOT\n       contain the\
    \ characters \"(\", \")\" or \" encoded-word that appears in\n       a \"comment\"\
    \ MUST be separated from any adjacent encoded-word or\n       \"ctext\" by linear-white-space.\n\
    \   (3) As a replacement for a \"word\" entity within a \"phrase\", for\n    \
    \   example, one that precedes an address in a From, To, or Cc\n       header.\
    \  The ABNF definition for phrase from RFC 822 thus\n       becomes:\n       phrase\
    \ = 1*(encoded-word / word)\n       In this case the set of characters that may\
    \ be used in a \"Q\"-\n       encoded encoded-word is restricted to: <upper and\
    \ lower case\n       ASCII letters, decimal digits, \"!\", \"*\", \"+\", \"-\"\
    , \"/\", \"=\", and\n       \"_\" (underscore, ASCII 95.)>.  An encoded-word that\
    \ appears\n       within a \"phrase\" MUST be separated from any adjacent \"word\"\
    ,\n       \"text\" or \"special\" by linear-white-space.\n   These are the ONLY\
    \ locations where an encoded-word may appear.  In\n   particular, an encoded-word\
    \ MUST NOT appear in any portion of an\n   \"addr-spec\".  In addition, an encoded-word\
    \ MUST NOT be used in a\n   Received header field.\n   Each encoded-word MUST\
    \ encode an integral number of octets.  The\n   encoded-text in each encoded-word\
    \ must be well-formed according to\n   the encoding specified; the encoded-text\
    \ may not be continued in the\n   next encoded-word.  (For example, \"=?charset?Q?=?=\
    \ =?charset?Q?AB?=\"\n   would be illegal, because the two hex digits \"AB\" must\
    \ follow the \"=\"\n   in the same encoded-word.)\n   Each encoded-word MUST represent\
    \ an integral number of characters. A\n   multi-octet character may not be split\
    \ across adjacent encoded-words.\n   Only printable and white space character\
    \ data should be encoded using\n   this scheme.  However, since these encoding\
    \ schemes allow the\n   encoding of arbitrary octet values, mail readers that\
    \ implement this\n   decoding should also ensure that display of the decoded data\
    \ on the\n   recipient's terminal will not cause unwanted side-effects.\n   Use\
    \ of these methods to encode non-textual data (e.g., pictures or\n   sounds) is\
    \ not defined by this memo.  Use of encoded-words to\n   represent strings of\
    \ purely ASCII characters is allowed, but\n   discouraged.  In rare cases it may\
    \ be necessary to encode ordinary\n   text that looks like an encoded-word.\n"
- title: 6. Support of encoded-words by mail readers
  contents:
  - '6. Support of encoded-words by mail readers

    '
- title: 6.1. Recognition of encoded-words in message headers
  contents:
  - "6.1. Recognition of encoded-words in message headers\n   A mail reader must parse\
    \ the message and body part headers according\n   to the rules in RFC 822 to correctly\
    \ recognize encoded-words.\n   Encoded-words are to be recognized as follows:\n\
    \   (1) Any message or body part header field defined as \"*text\", or any\n \
    \      user-defined header field, should be parsed as follows: Beginning\n   \
    \    at the start of the field-body and immediately following each\n       occurrence\
    \ of linear-white-space, each sequence of up to 75\n       printable characters\
    \ (not containing any linear-white-space)\n       should be examined to see if\
    \ it is an encoded-word according to\n       the syntax rules in section 2.  Any\
    \ other sequence of printable\n       characters should be treated as ordinary\
    \ ASCII text.\n   (2) Any header field not defined as \"*text\" should be parsed\n\
    \       according to the syntax rules for that header field.  However,\n     \
    \  any \"word\" that appears within a \"phrase\" should be treated as an\n   \
    \    encoded-word if it meets the syntax rules in section 2.\n       Otherwise\
    \ it should be treated as an ordinary \"word\".\n   (3) Within a \"comment\",\
    \ any sequence of up to 75 printable characters\n       (not containing linear-white-space),\
    \ that meets the syntax rules\n       in section 2, should be treated as an encoded-word.\
    \  Otherwise it\n       should be treated as normal comment text.\n"
- title: 6.2. Display of encoded-words
  contents:
  - "6.2. Display of encoded-words\n   Any encoded-words so recognized are decoded,\
    \ and if possible, the\n   resulting unencoded text is displayed in the original\
    \ character set.\n   When displaying a particular header field that contains multiple\n\
    \   encoded-words, any linear-white-space that separates a pair of\n   adjacent\
    \ encoded-words is ignored.  (This is to allow the use of\n   multiple encoded-words\
    \ to represent long strings of unencoded text,\n   without having to separate\
    \ encoded-words where spaces occur in the\n   unencoded text.)\n   In the event\
    \ other encodings are defined in the future, and the mail\n   reader does not\
    \ support the encoding used, it may either (a) display\n   the encoded-word as\
    \ ordinary text, or (b) substitute an appropriate\n   message indicating that\
    \ the text could not be decoded.\n   If the mail reader does not support the character\
    \ set used, it may\n   (a) display the encoded-word as ordinary text (i.e., as\
    \ it appears in\n   the header), (b) make a \"best effort\" to display using such\n\
    \   characters as are available, or (c) substitute an appropriate message\n  \
    \ indicating that the decoded text could not be displayed.\n   If the character\
    \ set being used employs code-switching techniques,\n   display of the encoded\
    \ text implicitly begins in \"ASCII mode\".  In\n   addition, the mail reader\
    \ must ensure that the output device is once\n   again in \"ASCII mode\" after\
    \ the encoded-word is displayed.\n"
- title: 6.3. Mail reader handling of incorrectly formed encoded-words
  contents:
  - "6.3. Mail reader handling of incorrectly formed encoded-words\n   It is possible\
    \ that an encoded-word that is legal according to the\n   syntax defined in section\
    \ 2, is incorrectly formed according to the\n   rules for the encoding being used.\
    \   For example:\n   (1) An encoded-word which contains characters which are not\
    \ legal for\n       a particular encoding (for example, a '-' in the \"B\" encoding),\n\
    \       is incorrectly formed.\n   (2) Any encoded-word which encodes a non-integral\
    \ number of\n       characters or octets is incorrectly formed.\n   A mail reader\
    \ need not attempt to display the text associated with an\n   encoded-word that\
    \ is incorrectly formed.  However, a mail reader MUST\n   NOT prevent the display\
    \ or handling of a message because an encoded-\n   word is incorrectly formed.\n"
- title: 7. Conformance
  contents:
  - "7. Conformance\n   A mail composing program claiming compliance with this specification\n\
    \   MUST ensure that any string of non-white-space printable ASCII\n   characters\
    \ within a \"*text\" or \"*ctext\" that begins with \"=?\" and\n   ends with \"\
    ?=\" be a valid encoded-word.  (\"begins\" means: at the\n   start of the field-body\
    \ or immediately following linear-white-space;\n   \"ends\" means: at the end\
    \ of the field-body or immediately preceding\n   linear-white-space.) In addition,\
    \ any \"word\" within a \"phrase\" that\n   begins with \"=?\" and ends with \"\
    ?=\" must be a valid encoded-word.\n   A mail reading program claiming compliance\
    \ with this specification\n   must be able to distinguish encoded-words from \"\
    text\", \"ctext\", or\n   \"word\"s, according to the rules in section 6, anytime\
    \ they appear in\n   appropriate places in message headers.  It must support both\
    \ the \"B\"\n   and \"Q\" encodings for any character set which it supports. \
    \ The\n   program must be able to display the unencoded text if the character\n\
    \   set is \"US-ASCII\".  For the ISO-8859-* character sets, the mail\n   reading\
    \ program must at least be able to display the characters which\n   are also in\
    \ the ASCII set.\n"
- title: 8. Examples
  contents:
  - "8. Examples\n      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>\n    \
    \  To: =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>\n      CC: =?ISO-8859-1?Q?Andr=E9_?=\
    \ Pirard <PIRARD@vm1.ulg.ac.be>\n      Subject: =?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=\n\
    \       =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=\n      From: =?ISO-8859-1?Q?Olle_J=E4rnefors?=\
    \ <ojarnef@admin.kth.se>\n      To: ietf-822@dimacs.rutgers.edu, ojarnef@admin.kth.se\n\
    \      Subject: Time for ISO 10646?\n      To: Dave Crocker <dcrocker@mordor.stanford.edu>\n\
    \      Cc: ietf-822@dimacs.rutgers.edu, paf@comsol.se\n      From: =?ISO-8859-1?Q?Patrik_F=E4ltstr=F6m?=\
    \ <paf@nada.kth.se>\n      Subject: Re: RFC-HDR care and feeding\n      From:\
    \ Nathaniel Borenstein <nsb@thumper.bellcore.com>\n            (=?iso-8859-8?b?7eXs+SDv4SDp7Oj08A==?=)\n\
    \      To: Greg Vaudreuil <gvaudre@NRI.Reston.VA.US>, Ned Freed\n         <ned@innosoft.com>,\
    \ Keith Moore <moore@cs.utk.edu>\n      Subject: Test of new header generator\n\
    \      MIME-Version: 1.0\n      Content-type: text/plain; charset=ISO-8859-1\n"
- title: 9. References
  contents:
  - "9. References\n   [1] Borenstein N., and N. Freed, \"MIME (Multipurpose Internet\
    \ Mail\n       Extensions) Part One:  Mechanisms for Specifying and Describing\n\
    \       the Format of Internet Message Bodies\", RFC 1521, Bellcore,\n       Innosoft,\
    \ September 1993.\n   [2] Crocker, D., \"Standard for the Format of ARPA Internet\
    \ Text\n       Messages\", STD 11, RFC 822, UDEL, August 1982.\n   [3] Reynolds,\
    \ J., and J. Postel, \"Assigned Numbers\", STD 2,\n       RFC 1340, USC/Information\
    \ Sciences Institute, July 1992.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   Keith Moore\n   University of Tennessee\n   107 Ayres\
    \ Hall\n   Knoxville TN 37996-1301\n   EMail: moore@cs.utk.edu\n"
