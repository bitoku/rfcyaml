- contents:
  - "             RTP Payload Format for 1-D Interleaved Parity\n                     Forward
    Error Correction (FEC)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a new RTP payload format for the Forward Error\n
    \  Correction (FEC) that is generated by the 1-D interleaved parity code\n   from
    a source media encapsulated in RTP.  The 1-D interleaved parity\n   code is a
    systematic code, where a number of repair symbols are\n   generated from a set
    of source symbols and sent in a repair flow\n   separate from the source flow
    that carries the source symbols.  The\n   1-D interleaved parity code offers a
    good protection against bursty\n   packet losses at a cost of reasonable complexity.
    \ The new payload\n   format defined in this document should only be used (with
    some\n   exceptions) as a part of the Digital Video Broadcasting-IPTV (DVB-\n
    \  IPTV) Application-layer FEC specification.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6015.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Use Cases ..................................................6\n      1.2.
    Overhead Computation .......................................8\n      1.3. Relation
    to Existing Specifications ........................8\n           1.3.1. RFCs 2733
    and 3009 ..................................8\n           1.3.2. SMPTE 2022-1 ........................................8\n
    \          1.3.3. ETSI TS 102 034 .....................................9\n      1.4.
    Scope of the Payload Format ...............................10\n   2. Requirements
    Notation ..........................................10\n   3. Definitions, Notations,
    and Abbreviations ......................10\n      3.1. Definitions ...............................................10\n
    \     3.2. Notations .................................................11\n   4.
    Packet Formats .................................................11\n      4.1.
    Source Packets ............................................11\n      4.2. Repair
    Packets ............................................11\n   5. Payload Format Parameters
    ......................................15\n      5.1. Media Type Registration ...................................15\n
    \          5.1.1. Registration of audio/1d-interleaved-parityfec .....15\n           5.1.2.
    Registration of video/1d-interleaved-parityfec .....16\n           5.1.3. Registration
    of text/1d-interleaved-parityfec ......18\n           5.1.4. Registration of\n
    \                 application/1d-interleaved-parityfec ...............19\n      5.2.
    Mapping to SDP Parameters .................................20\n           5.2.1.
    Offer-Answer Model Considerations ..................21\n           5.2.2. Declarative
    Considerations .........................22\n   6. Protection and Recovery Procedures
    .............................22\n      6.1. Overview ..................................................22\n
    \     6.2. Repair Packet Construction ................................22\n      6.3.
    Source Packet Reconstruction ..............................24\n           6.3.1.
    Associating the Source and Repair Packets ..........25\n           6.3.2. Recovering
    the RTP Header and Payload ..............25\n   7. Session Description Protocol
    (SDP) Signaling ...................27\n   8. Congestion Control Considerations
    ..............................27\n   9. Security Considerations ........................................28\n
    \  10. IANA Considerations ...........................................29\n   11.
    Acknowledgments ...............................................29\n   12. References
    ....................................................29\n      12.1. Normative
    References .....................................29\n      12.2. Informative References
    ...................................30\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document extends the Forward Error Correction (FEC)
    header\n   defined in [RFC2733] and uses this new FEC header for the FEC that
    is\n   generated by the 1-D interleaved parity code from a source media\n   encapsulated
    in RTP [RFC3550].  The resulting new RTP payload format\n   is registered by this
    document.\n   The type of the source media protected by the 1-D interleaved parity\n
    \  code can be audio, video, text, or application.  The FEC data are\n   generated
    according to the media type parameters that are\n   communicated through out-of-band
    means.  The associations/\n   relationships between the source and repair flows
    are also\n   communicated through out-of-band means.\n   The 1-D interleaved parity
    FEC uses the exclusive OR (XOR) operation\n   to generate the repair symbols.
    \ In a nutshell, the following steps\n   take place:\n   1.  The sender determines
    a set of source packets to be protected\n       together based on the media type
    parameters.\n   2.  The sender applies the XOR operation on the source symbols
    to\n       generate the required number of repair symbols.\n   3.  The sender
    packetizes the repair symbols and sends the repair\n       packet(s) along with
    the source packets to the receiver(s) (in\n       different flows).  The repair
    packets may be sent proactively or\n       on demand.\n   Note that the source
    and repair packets belong to different source\n   and repair flows, and the sender
    needs to provide a way for the\n   receivers to demultiplex them, even in the
    case in which they are\n   sent in the same transport flow (i.e., same source/destination\n
    \  address/port with UDP).  This is required to offer backward\n   compatibility
    (see Section 4).  At the receiver side, if all of the\n   source packets are successfully
    received, there is no need for FEC\n   recovery and the repair packets are discarded.
    \ However, if there are\n   missing source packets, the repair packets can be
    used to recover the\n   missing information.  Block diagrams for the systematic
    parity FEC\n   encoder and decoder are sketched in Figures 1 and 2, respectively.\n
    \                              +------------+\n    +--+  +--+  +--+  +--+ -->
    | Systematic | --> +--+  +--+  +--+  +--+\n    +--+  +--+  +--+  +--+     | Parity
    FEC |     +--+  +--+  +--+  +--+\n                               |  Encoder   |\n
    \                              |  (Sender)  | --> +==+  +==+\n                               +------------+
    \    +==+  +==+\n    Source Packet: +--+    Repair Packet: +==+\n                   +--+
    \                  +==+\n         Figure 1: Block diagram for systematic parity
    FEC encoder\n                               +------------+\n    +--+    X    X
    \   +--+ --> | Systematic | --> +--+  +--+  +--+  +--+\n    +--+              +--+
    \    | Parity FEC |     +--+  +--+  +--+  +--+\n                               |
    \ Decoder   |\n                +==+  +==+ --> | (Receiver) |\n                +==+
    \ +==+     +------------+\n    Source Packet: +--+    Repair Packet: +==+    Lost
    Packet: X\n                   +--+                   +==+\n         Figure 2:
    Block diagram for systematic parity FEC decoder\n   Suppose that we have a group
    of D x L source packets that have\n   sequence numbers starting from 1 running
    to D x L.  If we apply the\n   XOR operation to the group of the source packets
    whose sequence\n   numbers are L apart from each other as sketched in Figure 3,
    we\n   generate L repair packets.  This process is referred to as 1-D\n   interleaved
    FEC protection, and the resulting L repair packets are\n   referred to as interleaved
    (or column) FEC packets.\n       +-------------+ +-------------+ +-------------+
    \    +-------+\n       | S_1         | | S_2         | | S3          | ... | S_L
    \  |\n       | S_L+1       | | S_L+2       | | S_L+3       | ... | S_2xL |\n       |
    .           | | .           | |             |     |       |\n       | .           |
    | .           | |             |     |       |\n       | .           | | .           |
    |             |     |       |\n       | S_(D-1)xL+1 | | S_(D-1)xL+2 | | S_(D-1)xL+3
    | ... | S_DxL |\n       +-------------+ +-------------+ +-------------+     +-------+\n
    \             +               +               +                +\n        -------------
    \  -------------   -------------       -------\n       |     XOR     | |     XOR
    \    | |     XOR     | ... |  XOR  |\n        -------------   -------------   -------------
    \      -------\n              =               =               =                =\n
    \           +===+           +===+           +===+            +===+\n            |C_1|
    \          |C_2|           |C_3|      ...   |C_L|\n            +===+           +===+
    \          +===+            +===+\n           Figure 3: Generating interleaved
    (column) FEC packets\n   In Figure 3, S_n and C_m denote the source packet with
    a sequence\n   number n and the interleaved (column) FEC packet with a sequence\n
    \  number m, respectively.\n"
  - contents:
    - "1.1.  Use Cases\n   We generate one interleaved FEC packet out of D non-consecutive\n
      \  source packets.  This repair packet can provide a full recovery of\n   the
      missing information if there is only one packet missing among the\n   corresponding
      source packets.  This implies that 1-D interleaved FEC\n   protection performs
      well under bursty loss conditions provided that a\n   large enough value is
      chosen for L, i.e., L packet duration should\n   not be shorter than the duration
      of the burst that is intended to be\n   repaired.\n   For example, consider
      the scenario depicted in Figure 4 in which the\n   sender generates interleaved
      FEC packets and a bursty loss hits the\n   source packets.  Since the number
      of columns is larger than the\n   number of packets lost due to the bursty loss,
      the repair operation\n   succeeds.\n                         +---+\n                         |
      1 |    X      X      X\n                         +---+\n                         +---+
      \ +---+  +---+  +---+\n                         | 5 |  | 6 |  | 7 |  | 8 |\n
      \                        +---+  +---+  +---+  +---+\n                         +---+
      \ +---+  +---+  +---+\n                         | 9 |  | 10|  | 11|  | 12|\n
      \                        +---+  +---+  +---+  +---+\n                         +===+
      \ +===+  +===+  +===+\n                         |C_1|  |C_2|  |C_3|  |C_4|\n
      \                        +===+  +===+  +===+  +===+\n      Figure 4: Example
      scenario where 1-D interleaved FEC protection\n                          succeeds
      error recovery\n   The sender may generate interleaved FEC packets to combat
      the bursty\n   packet losses.  However, two or more random packet losses may
      hit the\n   source and repair packets in the same column.  In that case, the\n
      \  repair operation fails.  This is illustrated in Figure 5.  Note that\n   it
      is possible that two or more bursty losses may occur in the same\n   source
      block, in which case interleaved FEC packets may still fail to\n   recover the
      lost data.\n                         +---+         +---+  +---+\n                         |
      1 |    X    | 3 |  | 4 |\n                         +---+         +---+  +---+\n
      \                        +---+         +---+  +---+\n                         |
      5 |    X    | 7 |  | 8 |\n                         +---+         +---+  +---+\n
      \                        +---+  +---+  +---+  +---+\n                         |
      9 |  | 10|  | 11|  | 12|\n                         +---+  +---+  +---+  +---+\n
      \                        +===+  +===+  +===+  +===+\n                         |C_1|
      \ |C_2|  |C_3|  |C_4|\n                         +===+  +===+  +===+  +===+\n
      \  Figure 5: Example scenario where 1-D interleaved FEC protection fails\n                              error
      recovery\n"
    title: 1.1.  Use Cases
  - contents:
    - "1.2.  Overhead Computation\n   The overhead is defined as the ratio of the
      number of bytes that\n   belong to the repair packets to the number of bytes
      that belong to\n   the protected source packets.\n   Assuming that each repair
      packet carries an equal number of bytes\n   carried by a source packet and ignoring
      the size of the FEC header,\n   we can compute the overhead as follows:\n        Overhead
      = 1/D\n   where D is the number of rows in the source block.\n"
    title: 1.2.  Overhead Computation
  - contents:
    - "1.3.  Relation to Existing Specifications\n   This section discusses the relation
      of the current specification to\n   other existing specifications.\n"
    - contents:
      - "1.3.1.  RFCs 2733 and 3009\n   The current specification extends the FEC
        header defined in [RFC2733]\n   and registers a new RTP payload format.  This
        new payload format is\n   not backward compatible with the payload format
        that was registered\n   by [RFC3009].\n"
      title: 1.3.1.  RFCs 2733 and 3009
    - contents:
      - "1.3.2.  SMPTE 2022-1\n   In 2007, the Society of Motion Picture and Television
        Engineers\n   (SMPTE) - Technology Committee N26 on File Management and Networking\n
        \  Technology - decided to revise the Pro-MPEG Code of Practice (CoP) #3\n
        \  Release 2 specification (initially produced by the Pro-MPEG Forum in\n
        \  2004), which discussed several aspects of the transmission of MPEG-2\n
        \  transport streams over IP networks.  The new SMPTE specification is\n   referred
        to as [SMPTE2022-1].\n   The Pro-MPEG CoP #3 Release 2 document was originally
        based on\n   [RFC2733].  SMPTE revised the document by extending the FEC header\n
        \  proposed in [RFC2733] (by setting the E bit).  This extended header\n   offers
        some improvements.\n   For example, instead of utilizing the bitmap field
        used in [RFC2733],\n   [SMPTE2022-1] introduces separate fields to convey
        the number of rows\n   (D) and columns (L) of the source block as well as
        the type of the\n   repair packet (i.e., whether the repair packet is an interleaved
        FEC\n   packet computed over a column or a non-interleaved FEC packet\n   computed
        over a row).  These fields, plus the base sequence number,\n   allow the receiver
        side to establish associations between the source\n   and repair packets.
        \ Note that although the bitmap field is not\n   utilized, the FEC header
        of [SMPTE2022-1] inherently carries over the\n   bitmap field from [RFC2733].\n
        \  On the other hand, some parts of [SMPTE2022-1] are not in compliance\n
        \  with RTP [RFC3550].  For example, [SMPTE2022-1] sets the\n   Synchronization
        Source (SSRC) field to zero and does not use the\n   timestamp field in the
        RTP headers of the repair packets (receivers\n   ignore the timestamps of
        the repair packets).  Furthermore,\n   [SMPTE2022-1] also sets the CSRC Count
        (CC) field in the RTP header\n   to zero and does not allow any Contributing
        Source (CSRC) entry in\n   the RTP header.\n   The current document adopts
        the extended FEC header of [SMPTE2022-1]\n   and registers a new RTP payload
        format.  At the same time, this\n   document fixes the parts of [SMPTE2022-1]
        that are not compliant with\n   RTP [RFC3550], except the one discussed below.\n
        \  The baseline header format first proposed in [RFC2733] does not have\n
        \  fields to protect the P and X bits and the CC fields of the source\n   packets
        associated with a repair packet.  Rather, the P bit, X bit,\n   and CC field
        in the RTP header of the repair packet are used to\n   protect those bits
        and fields.  This, however, may sometimes result\n   in failures when doing
        the RTP header validity checks as specified in\n   [RFC3550].  While this
        behavior has been fixed in [RFC5109], which\n   obsoleted [RFC2733], the RTP
        payload format defined in this document\n   still allows this behavior for
        legacy purposes.  Implementations\n   following this specification must be
        aware of this potential issue\n   when RTP header validity checks are applied.\n"
      title: 1.3.2.  SMPTE 2022-1
    - contents:
      - "1.3.3.  ETSI TS 102 034\n   In 2009, the Digital Video Broadcasting (DVB)
        consortium published a\n   technical specification [ETSI-TS-102-034] through
        the European\n   Telecommunications Standards Institute (ETSI).  This specification\n
        \  covers several areas related to the transmission of MPEG-2 transport\n
        \  stream-based services over IP networks.\n   Annex E of [ETSI-TS-102-034]
        defines an optional protocol for\n   Application-layer FEC (AL-FEC) protection
        of streaming media for\n   DVB-IP services carried over RTP [RFC3550] transport.
        \ The DVB-IPTV\n   AL-FEC protocol uses two layers for protection: a base
        layer that is\n   produced by a packet-based interleaved parity code, and
        an\n   enhancement layer that is produced by a Raptor code [DVB-AL-FEC].\n
        \  While the use of the enhancement layer is optional, the use of the\n   base
        layer is mandatory wherever AL-FEC is used.  The DVB-IPTV AL-FEC\n   protocol
        is also described in [DVB-AL-FEC].\n   The interleaved parity code that is
        used in the base layer is a\n   subset of [SMPTE2022-1].  In particular, the
        AL-FEC base layer uses\n   only the 1-D interleaved FEC protection from [SMPTE2022-1].
        \ The new\n   RTP payload format that is defined and registered in this document\n
        \  (with some exceptions listed in [DVB-AL-FEC]) is used as the AL-FEC\n   base
        layer.\n"
      title: 1.3.3.  ETSI TS 102 034
    title: 1.3.  Relation to Existing Specifications
  - contents:
    - "1.4.  Scope of the Payload Format\n   The payload format specified in this
      document must only be used in\n   legacy applications where the limitations
      explained in Section 1.3.2\n   are known not to impact any system components
      or other RTP elements.\n   Whenever possible, a payload format that is fully
      compliant with\n   [RFC3550], such as [RFC5109] or other newer payload formats,
      must be\n   used.\n"
    title: 1.4.  Scope of the Payload Format
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements Notation
- contents:
  - "3.  Definitions, Notations, and Abbreviations\n   The definitions and notations
    commonly used in this document are\n   summarized in this section.\n"
  - contents:
    - "3.1.  Definitions\n   This document uses the following definitions:\n   Source
      Flow: The packet flow(s) carrying the source data to which FEC\n   protection
      is to be applied.\n   Repair Flow: The packet flow(s) carrying the repair data.\n
      \  Symbol: A unit of data.  Its size, in bytes, is referred to as the\n   symbol
      size.\n   Source Symbol: The smallest unit of data used during the encoding\n
      \  process.\n   Repair Symbol: Repair symbols are generated from the source
      symbols.\n   Source Packet: Data packets that contain only source symbols.\n
      \  Repair Packet: Data packets that contain only repair symbols.\n   Source
      Block: A block of source symbols that are considered together\n   in the encoding
      process.\n"
    title: 3.1.  Definitions
  - contents:
    - "3.2.  Notations\n   o  L: Number of columns of the source block.\n   o  D:
      Number of rows of the source block.\n"
    title: 3.2.  Notations
  title: 3.  Definitions, Notations, and Abbreviations
- contents:
  - "4.  Packet Formats\n   This section defines the formats of the source and repair
    packets.\n"
  - contents:
    - "4.1.  Source Packets\n   The source packets need to contain information that
      identifies the\n   source block and the position within the source block occupied
      by the\n   packet.  Since the source packets that are carried within an RTP\n
      \  stream already contain unique sequence numbers in their RTP headers\n   [RFC3550],
      we can identify the source packets in a straightforward\n   manner, and there
      is no need to append additional field(s).  The\n   primary advantage of not
      modifying the source packets in any way is\n   that it provides backward compatibility
      for the receivers that do not\n   support FEC at all.  In multicast scenarios,
      this backward\n   compatibility becomes quite useful as it allows the non-FEC-capable\n
      \  and FEC-capable receivers to receive and interpret the same source\n   packets
      sent in the same multicast session.\n"
    title: 4.1.  Source Packets
  - contents:
    - "4.2.  Repair Packets\n   The repair packets MUST contain information that identifies
      the\n   source block to which they pertain and the relationship between the\n
      \  contained repair symbols and the original source block.  For this\n   purpose,
      we use the RTP header of the repair packets as well as\n   another header within
      the RTP payload, which we refer to as the FEC\n   header, as shown in Figure
      6.\n             +------------------------------+\n             |          IP
      Header           |\n             +------------------------------+\n             |
      \      Transport Header       |\n             +------------------------------+\n
      \            |          RTP Header          | __\n             +------------------------------+
      \  |\n             |          FEC Header          |    \\\n             +------------------------------+
      \    > RTP Payload\n             |        Repair Symbols        |    /\n             +------------------------------+
      __|\n                    Figure 6: Format of repair packets\n   The RTP header
      is formatted according to [RFC3550] with some further\n   clarifications listed
      below:\n   o  Version: The version field is set to 2.\n   o  Padding (P) Bit:
      This bit is equal to the XOR sum of the\n      corresponding P bits from the
      RTP headers of the source packets\n      protected by this repair packet.  However,
      padding octets are\n      never present in a repair packet, independent of the
      value of the\n      P bit.\n   o  Extension (X) Bit: This bit is equal to the
      XOR sum of the\n      corresponding X bits from the RTP headers of the source
      packets\n      protected by this repair packet.  However, an RTP header extension\n
      \     is never present in a repair packet, independent of the value of\n      the
      X bit.\n   o  CSRC Count (CC): This field is equal to the XOR sum of the\n      corresponding
      CC values from the RTP headers of the source packets\n      protected by this
      repair packet.  However, a CSRC list is never\n      present in a repair packet,
      independent of the value of the CC\n      field.\n   o  Marker (M) Bit: This
      bit is equal to the XOR sum of the\n      corresponding M bits from the RTP
      headers of the source packets\n      protected by this repair packet.\n   o
      \ Payload Type: The (dynamic) payload type for the repair packets is\n      determined
      through out-of-band means.  Note that this document\n      registers a new payload
      format for the repair packets (refer to\n      Section 5 for details).  According
      to [RFC3550], an RTP receiver\n      that cannot recognize a payload type must
      discard it.  This action\n      provides backward compatibility.  The FEC mechanisms
      can then be\n      used in a multicast group with mixed FEC-capable and non-FEC-\n
      \     capable receivers.  If a non-FEC-capable receiver receives a\n      repair
      packet, it will not recognize the payload type, and hence,\n      discards the
      repair packet.\n   o  Sequence Number (SN): The sequence number has the standard\n
      \     definition.  It MUST be one higher than the sequence number in the\n      previously
      transmitted repair packet.  The initial value of the\n      sequence number
      SHOULD be random (unpredictable) [RFC3550].\n   o  Timestamp (TS): The timestamp
      SHALL be set to a time corresponding\n      to the repair packet's transmission
      time.  Note that the timestamp\n      value has no use in the actual FEC protection
      process and is\n      usually useful for jitter calculations.\n   o  Synchronization
      Source (SSRC): The SSRC value SHALL be randomly\n      assigned as suggested
      by [RFC3550].  This allows the sender to\n      multiplex the source and repair
      flows on the same port or\n      multiplex multiple repair flows on a single
      port.  The repair\n      flows SHOULD use the RTP Control Protocol (RTCP) CNAME
      field to\n      associate themselves with the source flow.\n      In some networks,
      the RTP Source (which produces the source\n      packets) and the FEC Source
      (which generates the repair packets\n      from the source packets) may not
      be the same host.  In such\n      scenarios, using the same CNAME for the source
      and repair flows\n      means that the RTP Source and the FEC Source MUST share
      the same\n      CNAME (for this specific source-repair flow association).  A\n
      \     common CNAME may be produced based on an algorithm that is known\n      both
      to the RTP and FEC Source.  This usage is compliant with\n      [RFC3550].\n
      \     Note that due to the randomness of the SSRC assignments, there is\n      a
      possibility of SSRC collision.  In such cases, the collisions\n      MUST be
      resolved as described in [RFC3550].\n   Note that the P bit, X bit, CC field,
      and M bit of the source packets\n   are protected by the corresponding bits/fields
      in the RTP header of\n   the repair packet.  On the other hand, the payload
      of a repair packet\n   protects the concatenation of (if present) the CSRC list,
      RTP\n   extension, payload, and padding of the source RTP packets associated\n
      \  with this repair packet.\n   The FEC header is 16 octets.  The format of
      the FEC header is shown\n   in Figure 7.\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          SN base low          |        Length recovery        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |E| PT recovery |                     Mask                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          TS recovery                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |N|D|Type |Index|     Offset    |       NA      |  SN base ext  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 7: Format of the FEC header\n   The FEC header consists
      of the following fields:\n   o  The SN base low field is used to indicate the
      lowest sequence\n      number, taking wraparound into account, of those source
      packets\n      protected by this repair packet.\n   o  The Length recovery field
      is used to determine the length of any\n      recovered packets.\n   o  The
      E bit is the extension flag introduced in [RFC2733] and used\n      to extend
      the [RFC2733] FEC header.\n   o  The PT recovery field is used to determine
      the payload type of the\n      recovered packets.\n   o  The Mask field is not
      used.\n   o  The TS recovery field is used to determine the timestamp of the\n
      \     recovered packets.\n   o  The N bit is the extension flag that is reserved
      for future use.\n   o  The D bit is not used.\n   o  The Type field indicates
      the type of the error-correcting code\n      used.  This document defines only
      one error-correcting code.\n   o  The Index field is not used.\n   o  The Offset
      and NA fields are used to indicate the number of\n      columns (L) and rows
      (D) of the source block, respectively.\n   o  The SN base ext field is not used.\n
      \  The details on setting the fields in the FEC header are provided in\n   Section
      6.2.\n   It should be noted that a Mask-based approach (similar to the one\n
      \  specified in [RFC2733]) may not be very efficient to indicate which\n   source
      packets in the current source block are associated with a\n   given repair packet.
      \ In particular, for the applications that would\n   like to use large source
      block sizes, the size of the Mask that is\n   required to describe the source-repair
      packet associations may be\n   prohibitively large.  Instead, a systematized
      approach is inherently\n   more efficient.\n"
    title: 4.2.  Repair Packets
  title: 4.  Packet Formats
- contents:
  - "5.  Payload Format Parameters\n   This section provides the media subtype registration
    for the 1-D\n   interleaved parity FEC.  The parameters that are required to\n
    \  configure the FEC encoding and decoding operations are also defined\n   in
    this section.\n"
  - contents:
    - "5.1.  Media Type Registration\n   This registration is done using the template
      defined in [RFC4288] and\n   following the guidance provided in [RFC4855].\n"
    - contents:
      - "5.1.1.  Registration of audio/1d-interleaved-parityfec\n   Type name: audio\n
        \  Subtype name: 1d-interleaved-parityfec\n   Required parameters:\n   o  rate:
        The RTP timestamp (clock) rate in Hz.  The (integer) rate\n      SHALL be
        larger than 1000 to provide sufficient resolution to RTCP\n      operations.
        \ However, it is RECOMMENDED to select the rate that\n      matches the rate
        of the protected source RTP stream.\n   o  L: Number of columns of the source
        block.  L is a positive integer\n      that is less than or equal to 255.\n
        \  o  D: Number of rows of the source block.  D is a positive integer\n      that
        is less than or equal to 255.\n   o  repair-window: The time that spans the
        FEC block (i.e., source\n      packets and the corresponding repair packets).
        \ An FEC encoder\n      processes a block of source packets and generates
        a number of\n      repair packets, which are then transmitted within a certain\n
        \     duration not larger than the value of the repair window.  At the\n      receiver
        side, the FEC decoder should wait at least for the\n      duration of the
        repair window after getting the first packet in an\n      FEC block to allow
        all the repair packets to arrive (the waiting\n      time can be adjusted
        if there are missing packets at the beginning\n      of the FEC block).  The
        FEC decoder can start decoding the already\n      received packets sooner;
        however, it SHOULD NOT register an FEC\n      decoding failure until it waits
        at least for the repair-window\n      duration.  The size of the repair window
        is specified in\n      microseconds.\n   Optional parameters: None.\n   Encoding
        considerations: This media type is framed (see Section 4.8\n   in the template
        document [RFC4288]) and contains binary data.\n   Security considerations:
        See Section 9 of [RFC6015].\n   Interoperability considerations: None.\n   Published
        specification: [RFC6015].\n   Applications that use this media type: Multimedia
        applications that\n   want to improve resiliency against packet loss by sending
        redundant\n   data in addition to the source media.\n   Additional information:
        None.\n   Person & email address to contact for further information: Ali Begen\n
        \  <abegen@cisco.com> and the IETF Audio/Video Transport Working Group.\n
        \  Intended usage: COMMON.\n   Restriction on usage: This media type depends
        on RTP framing, and\n   hence, is only defined for transport via RTP [RFC3550].\n
        \  Author: Ali Begen <abegen@cisco.com>.\n   Change controller: IETF Audio/Video
        Transport Working Group delegated\n   from the IESG.\n"
      title: 5.1.1.  Registration of audio/1d-interleaved-parityfec
    - contents:
      - "5.1.2.  Registration of video/1d-interleaved-parityfec\n   Type name: video\n
        \  Subtype name: 1d-interleaved-parityfec\n   Required parameters:\n   o  rate:
        The RTP timestamp (clock) rate in Hz.  The (integer) rate\n      SHALL be
        larger than 1000 to provide sufficient resolution to RTCP\n      operations.
        \ However, it is RECOMMENDED to select the rate that\n      matches the rate
        of the protected source RTP stream.\n   o  L: Number of columns of the source
        block.  L is a positive integer\n      that is less than or equal to 255.\n
        \  o  D: Number of rows of the source block.  D is a positive integer\n      that
        is less than or equal to 255.\n   o  repair-window: The time that spans the
        FEC block (i.e., source\n      packets and the corresponding repair packets).
        \ An FEC encoder\n      processes a block of source packets and generates
        a number of\n      repair packets, which are then transmitted within a certain\n
        \     duration not larger than the value of the repair window.  At the\n      receiver
        side, the FEC decoder should wait at least for the\n      duration of the
        repair window after getting the first packet in an\n      FEC block to allow
        all the repair packets to arrive (the waiting\n      time can be adjusted
        if there are missing packets at the beginning\n      of the FEC block).  The
        FEC decoder can start decoding the already\n      received packets sooner;
        however, it SHOULD NOT register an FEC\n      decoding failure until it waits
        at least for the repair-window\n      duration.  The size of the repair window
        is specified in\n      microseconds.\n   Optional parameters: None.\n   Encoding
        considerations: This media type is framed (see Section 4.8\n   in the template
        document [RFC4288]) and contains binary data.\n   Security considerations:
        See Section 9 of [RFC6015].\n   Interoperability considerations: None.\n   Published
        specification: [RFC6015].\n   Applications that use this media type: Multimedia
        applications that\n   want to improve resiliency against packet loss by sending
        redundant\n   data in addition to the source media.\n   Additional information:
        None.\n   Person & email address to contact for further information: Ali Begen\n
        \  <abegen@cisco.com> and the IETF Audio/Video Transport Working Group.\n
        \  Intended usage: COMMON.\n   Restriction on usage: This media type depends
        on RTP framing, and\n   hence, is only defined for transport via RTP [RFC3550].\n
        \  Author: Ali Begen <abegen@cisco.com>.\n   Change controller: IETF Audio/Video
        Transport Working Group delegated\n   from the IESG.\n"
      title: 5.1.2.  Registration of video/1d-interleaved-parityfec
    - contents:
      - "5.1.3.  Registration of text/1d-interleaved-parityfec\n   Type name: text\n
        \  Subtype name: 1d-interleaved-parityfec\n   Required parameters:\n   o  rate:
        The RTP timestamp (clock) rate in Hz.  The (integer) rate\n      SHALL be
        larger than 1000 to provide sufficient resolution to RTCP\n      operations.
        \ However, it is RECOMMENDED to select the rate that\n      matches the rate
        of the protected source RTP stream.\n   o  L: Number of columns of the source
        block.  L is a positive integer\n      that is less than or equal to 255.\n
        \  o  D: Number of rows of the source block.  D is a positive integer\n      that
        is less than or equal to 255.\n   o  repair-window: The time that spans the
        FEC block (i.e., source\n      packets and the corresponding repair packets).
        \ An FEC encoder\n      processes a block of source packets and generates
        a number of\n      repair packets, which are then transmitted within a certain\n
        \     duration not larger than the value of the repair window.  At the\n      receiver
        side, the FEC decoder should wait at least for the\n      duration of the
        repair window after getting the first packet in an\n      FEC block to allow
        all the repair packets to arrive (the waiting\n      time can be adjusted
        if there are missing packets at the beginning\n      of the FEC block).  The
        FEC decoder can start decoding the already\n      received packets sooner;
        however, it SHOULD NOT register an FEC\n      decoding failure until it waits
        at least for the repair-window\n      duration.  The size of the repair window
        is specified in\n      microseconds.\n   Optional parameters: None.\n   Encoding
        considerations: This media type is framed (see Section 4.8\n   in the template
        document [RFC4288]) and contains binary data.\n   Security considerations:
        See Section 9 of [RFC6015].\n   Interoperability considerations: None.\n   Published
        specification: [RFC6015].\n   Applications that use this media type: Multimedia
        applications that\n   want to improve resiliency against packet loss by sending
        redundant\n   data in addition to the source media.\n   Additional information:
        None.\n   Person & email address to contact for further information: Ali Begen\n
        \  <abegen@cisco.com> and the IETF Audio/Video Transport Working Group.\n
        \  Intended usage: COMMON.\n   Restriction on usage: This media type depends
        on RTP framing, and\n   hence, is only defined for transport via RTP [RFC3550].\n
        \  Author: Ali Begen <abegen@cisco.com>.\n   Change controller: IETF Audio/Video
        Transport Working Group delegated\n   from the IESG.\n"
      title: 5.1.3.  Registration of text/1d-interleaved-parityfec
    - contents:
      - "5.1.4.  Registration of application/1d-interleaved-parityfec\n   Type name:
        application\n   Subtype name: 1d-interleaved-parityfec\n   Required parameters:\n
        \  o  rate: The RTP timestamp (clock) rate in Hz.  The (integer) rate\n      SHALL
        be larger than 1000 to provide sufficient resolution to RTCP\n      operations.
        \ However, it is RECOMMENDED to select the rate that\n      matches the rate
        of the protected source RTP stream.\n   o  L: Number of columns of the source
        block.  L is a positive integer\n      that is less than or equal to 255.\n
        \  o  D: Number of rows of the source block.  D is a positive integer\n      that
        is less than or equal to 255.\n   o  repair-window: The time that spans the
        FEC block (i.e., source\n      packets and the corresponding repair packets).
        \ An FEC encoder\n      processes a block of source packets and generates
        a number of\n      repair packets, which are then transmitted within a certain\n
        \     duration not larger than the value of the repair window.  At the\n      receiver
        side, the FEC decoder should wait at least for the\n      duration of the
        repair window after getting the first packet in an\n      FEC block to allow
        all the repair packets to arrive (the waiting\n      time can be adjusted
        if there are missing packets at the beginning\n      of the FEC block).  The
        FEC decoder can start decoding the already\n      received packets sooner;
        however, it SHOULD NOT register an FEC\n      decoding failure until it waits
        at least for the repair-window\n      duration.  The size of the repair window
        is specified in\n      microseconds.\n   Optional parameters: None.\n   Encoding
        considerations: This media type is framed (see Section 4.8\n   in the template
        document [RFC4288]) and contains binary data.\n   Security considerations:
        See Section 9 of [RFC6015].\n   Interoperability considerations: None.\n   Published
        specification: [RFC6015].\n   Applications that use this media type: Multimedia
        applications that\n   want to improve resiliency against packet loss by sending
        redundant\n   data in addition to the source media.\n   Additional information:
        None.\n   Person & email address to contact for further information: Ali Begen\n
        \  <abegen@cisco.com> and the IETF Audio/Video Transport Working Group.\n
        \  Intended usage: COMMON.\n   Restriction on usage: This media type depends
        on RTP framing, and\n   hence, is only defined for transport via RTP [RFC3550].\n
        \  Author: Ali Begen <abegen@cisco.com>.\n   Change controller: IETF Audio/Video
        Transport Working Group delegated\n   from the IESG.\n"
      title: 5.1.4.  Registration of application/1d-interleaved-parityfec
    title: 5.1.  Media Type Registration
  - contents:
    - "5.2.  Mapping to SDP Parameters\n   Applications that use RTP transport commonly
      use Session Description\n   Protocol (SDP) [RFC4566] to describe their RTP sessions.
      \ The\n   information that is used to specify the media types in an RTP session\n
      \  has specific mappings to the fields in an SDP description.  In this\n   section,
      we provide these mappings for the media subtype registered\n   by this document
      (\"1d-interleaved-parityfec\").  Note that if an\n   application does not use
      SDP to describe the RTP sessions, an\n   appropriate mapping must be defined
      and used to specify the media\n   types and their parameters for the control/description
      protocol\n   employed by the application.\n   The mapping of the media type
      specification for \"1d-interleaved-\n   parityfec\" and its parameters in SDP
      is as follows:\n   o  The media type (e.g., \"application\") goes into the \"m=\"
      line as\n      the media name.\n   o  The media subtype (\"1d-interleaved-parityfec\")
      goes into the\n      \"a=rtpmap\" line as the encoding name.  The RTP clock
      rate\n      parameter (\"rate\") also goes into the \"a=rtpmap\" line as the
      clock\n      rate.\n   o  The remaining required payload-format-specific parameters
      go into\n      the \"a=fmtp\" line by copying them directly from the media type\n
      \     string as a semicolon-separated list of parameter=value pairs.\n   SDP
      examples are provided in Section 7.\n"
    - contents:
      - "5.2.1.  Offer-Answer Model Considerations\n   When offering 1-D interleaved
        parity FEC over RTP using SDP in an\n   Offer/Answer model [RFC3264], the
        following considerations apply:\n   o  Each combination of the L and D parameters
        produces a different\n      FEC data and is not compatible with any other
        combination.  A\n      sender application may desire to offer multiple offers
        with\n      different sets of L and D values as long as the parameter values\n
        \     are valid.  The receiver SHOULD normally choose the offer that has\n
        \     a sufficient amount of interleaving.  If multiple such offers\n      exist,
        the receiver may choose the offer that has the lowest\n      overhead or the
        one that requires the smallest amount of\n      buffering.  The selection
        depends on the application requirements.\n   o  The value for the repair-window
        parameter depends on the L and D\n      values and cannot be chosen arbitrarily.
        \ More specifically, L and\n      D values determine the lower limit for the
        repair-window size.\n      The upper limit of the repair-window size does
        not depend on the L\n      and D values.\n   o  Although combinations with
        the same L and D values but with\n      different repair-window sizes produce
        the same FEC data, such\n      combinations are still considered different
        offers.  The size of\n      the repair-window is related to the maximum delay
        between the\n      transmission of a source packet and the associated repair
        packet.\n      This directly impacts the buffering requirement on the receiver\n
        \     side, and the receiver must consider this when choosing an offer.\n
        \  o  There are no optional format parameters defined for this payload.\n
        \     Any unknown option in the offer MUST be ignored and deleted from\n      the
        answer.  If FEC is not desired by the receiver, it can be\n      deleted from
        the answer.\n"
      title: 5.2.1.  Offer-Answer Model Considerations
    - contents:
      - "5.2.2.  Declarative Considerations\n   In declarative usage, like SDP in
        the Real-time Streaming Protocol\n   (RTSP) [RFC2326] or the Session Announcement
        Protocol (SAP)\n   [RFC2974], the following considerations apply:\n   o  The
        payload format configuration parameters are all declarative\n      and a participant
        MUST use the configuration that is provided for\n      the session.\n   o
        \ More than one configuration may be provided (if desired) by\n      declaring
        multiple RTP payload types.  In that case, the receivers\n      should choose
        the repair flow that is best for them.\n"
      title: 5.2.2.  Declarative Considerations
    title: 5.2.  Mapping to SDP Parameters
  title: 5.  Payload Format Parameters
- contents:
  - "6.  Protection and Recovery Procedures\n   This section provides a complete specification
    of the 1-D interleaved\n   parity code and its RTP payload format.\n"
  - contents:
    - "6.1.  Overview\n   The following sections specify the steps involved in generating
      the\n   repair packets and reconstructing the missing source packets from the\n
      \  repair packets.\n"
    title: 6.1.  Overview
  - contents:
    - "6.2.  Repair Packet Construction\n   The RTP header of a repair packet is formed
      based on the guidelines\n   given in Section 4.2.\n   The FEC header includes
      16 octets.  It is constructed by applying the\n   XOR operation on the bit strings
      that are generated from the\n   individual source packets protected by this
      particular repair packet.\n   The set of the source packets that are associated
      with a given repair\n   packet can be computed by the formula given in Section
      6.3.1.\n   The bit string is formed for each source packet by concatenating
      the\n   following fields together in the order specified:\n   o  Padding bit
      (1 bit) (This is the most significant bit of the bit\n      string.)\n   o  Extension
      bit (1 bit)\n   o  CC field (4 bits)\n   o  Marker bit (1 bit)\n   o  PT field
      (7 bits)\n   o  Timestamp (32 bits)\n   o  Unsigned network-ordered 16-bit representation
      of the source\n      packet length in bytes minus 12 (for the fixed RTP header),
      i.e.,\n      the sum of the lengths of all the following if present: the CSRC\n
      \     list, header extension, RTP payload, and RTP padding (16 bits).\n   o
      \ If CC is nonzero, the CSRC list (variable length)\n   o  If X is 1, the header
      extension (variable length)\n   o  Payload (variable length)\n   o  Padding,
      if present (variable length)\n   Note that if the lengths of the source packets
      are not equal, each\n   shorter packet MUST be padded to the length of the longest
      packet by\n   adding octet(s) of 0 at the end.  Due to this possible padding
      and\n   mandatory FEC header, a repair packet has a larger size than the\n   source
      packets it protects.  This may cause problems if the resulting\n   repair packet
      size exceeds the Maximum Transmission Unit (MTU) size\n   of the path over which
      the repair flow is sent.\n   By applying the parity operation on the bit strings
      produced from the\n   source packets, we generate the FEC bit string.  Some
      parts of the\n   RTP header and the FEC header of the repair packet are generated
      from\n   the FEC bit string as follows:\n   o  The first (most significant)
      bit in the FEC bit string is written\n      into the Padding bit in the RTP
      header of the repair packet.\n   o  The next bit in the FEC bit string is written
      into the Extension\n      bit in the RTP header of the repair packet.\n   o
      \ The next 4 bits of the FEC bit string are written into the CC\n      field
      in the RTP header of the repair packet.\n   o  The next bit of the FEC bit string
      is written into the Marker bit\n      in the RTP header of the repair packet.\n
      \  o  The next 7 bits of the FEC bit string are written into the PT\n      recovery
      field in the FEC header.\n   o  The next 32 bits of the FEC bit string are written
      into the TS\n      recovery field in the FEC header.\n   o  The next 16 bits
      are written into the Length recovery field in the\n      FEC header.  This allows
      the FEC procedure to be applied even when\n      the lengths of the protected
      source packets are not identical.\n   o  The remaining bits are set to be the
      payload of the repair packet.\n   The remaining parts of the FEC header are
      set as follows:\n   o  The SN base low field MUST be set to the lowest sequence
      number,\n      taking wraparound into account, of those source packets protected\n
      \     by this repair packet.\n   o  The E bit MUST be set to 1 to extend the
      [RFC2733] FEC header.\n   o  The Mask field SHALL be set to 0 and ignored by
      the receiver.\n   o  The N bit SHALL be set to 0 and ignored by the receiver.\n
      \  o  The D bit SHALL be set to 0 and ignored by the receiver.\n   o  The Type
      field MUST be set to 0 and ignored by the receiver.\n   o  The Index field SHALL
      be set to 0 and ignored by the receiver.\n   o  The Offset field MUST be set
      to the number of columns of the\n      source block (L).\n   o  The NA field
      MUST be set to the number of rows of the source block\n      (D).\n   o  The
      SN base ext field SHALL be set to 0 and ignored by the\n      receiver.\n"
    title: 6.2.  Repair Packet Construction
  - contents:
    - "6.3.  Source Packet Reconstruction\n   This section describes the recovery
      procedures that are required to\n   reconstruct the missing source packets.
      \ The recovery process has two\n   steps.  In the first step, the FEC decoder
      determines which source\n   and repair packets should be used in order to recover
      a missing\n   packet.  In the second step, the decoder recovers the missing
      packet,\n   which consists of an RTP header and RTP payload.\n   In the following,
      we describe the RECOMMENDED algorithms for the\n   first and second steps.  Based
      on the implementation, different\n   algorithms MAY be adopted.  However, the
      end result MUST be identical\n   to the one produced by the algorithms described
      below.\n"
    - contents:
      - "6.3.1.  Associating the Source and Repair Packets\n   The first step is to
        associate the source and repair packets.  The SN\n   base low field in the
        FEC header shows the lowest sequence number of\n   the source packets that
        form the particular column.  In addition, the\n   information of how many
        source packets are available in each column\n   and row is available from
        the media type parameters specified in the\n   SDP description.  This set
        of information uniquely identifies all of\n   the source packets associated
        with a given repair packet.\n   Mathematically, for any received repair packet,
        p*, we can determine\n   the sequence numbers of the source packets that are
        protected by this\n   repair packet as follows:\n                       p*_snb
        + i * L (modulo 65536)\n   where p*_snb denotes the value in the SN base low
        field of the FEC\n   header of the p*, L is the number of columns of the source
        block and\n                                 0 <= i < D\n   where D is the
        number of rows of the source block.\n   We denote the set of the source packets
        associated with repair packet\n   p* by set T(p*).  Note that in a source
        block whose size is L columns\n   by D rows, set T includes D source packets.
        \ Recall that 1-D\n   interleaved FEC protection can fully recover the missing
        information\n   if there is only one source packet missing in set T.  If the
        repair\n   packet that protects the source packets in set T is missing, or
        the\n   repair packet is available but two or more source packets are\n   missing,
        then missing source packets in set T cannot be recovered by\n   1-D interleaved
        FEC protection.\n"
      title: 6.3.1.  Associating the Source and Repair Packets
    - contents:
      - "6.3.2.  Recovering the RTP Header and Payload\n   For a given set T, the
        procedure for the recovery of the RTP header\n   of the missing packet, whose
        sequence number is denoted by SEQNUM, is\n   as follows:\n   1.   For each
        of the source packets that are successfully received in\n        set T, compute
        the bit string as described in Section 6.2.\n   2.   For the repair packet
        associated with set T, compute the bit\n        string in the same fashion
        except use the PT recovery field\n        instead of the PT field and TS recovery
        field instead of the\n        Timestamp field, and set the CSRC list, header
        extension and\n        padding to null regardless of the values of the CC
        field, X bit,\n        and P bit.\n   3.   If any of the bit strings generated
        from the source packets are\n        shorter than the bit string generated
        from the repair packet,\n        pad them to be the same length as the bit
        string generated from\n        the repair packet.  For padding, the padding
        of octet 0 MUST be\n        added at the end of the bit string.\n   4.   Calculate
        the recovered bit string as the XOR of the bit strings\n        generated
        from all source packets in set T and the FEC bit\n        string generated
        from the repair packet associated with set T.\n   5.   Create a new packet
        with the standard 12-byte RTP header and no\n        payload.\n   6.   Set
        the version of the new packet to 2.\n   7.   Set the Padding bit in the new
        packet to the first bit in the\n        recovered bit string.\n   8.   Set
        the Extension bit in the new packet to the next bit in the\n        recovered
        bit string.\n   9.   Set the CC field to the next 4 bits in the recovered
        bit string.\n   10.  Set the Marker bit in the new packet to the next bit
        in the\n        recovered bit string.\n   11.  Set the Payload type in the
        new packet to the next 7 bits in the\n        recovered bit string.\n   12.
        \ Set the SN field in the new packet to SEQNUM.\n   13.  Set the TS field
        in the new packet to the next 32 bits in the\n        recovered bit string.\n
        \  14.  Take the next 16 bits of the recovered bit string and set the\n        new
        variable Y to whatever unsigned integer this represents\n        (assuming
        network order).  Convert Y to host order and then take\n        Y bytes from
        the recovered bit string and append them to the new\n        packet.  Y represents
        the length of the new packet in bytes\n        minus 12 (for the fixed RTP
        header), i.e., the sum of the\n        lengths of all the following if present:
        the CSRC list, header\n        extension, RTP payload, and RTP padding.\n
        \  15.  Set the SSRC of the new packet to the SSRC of the source RTP\n        stream.\n
        \  This procedure completely recovers both the header and payload of an\n
        \  RTP packet.\n"
      title: 6.3.2.  Recovering the RTP Header and Payload
    title: 6.3.  Source Packet Reconstruction
  title: 6.  Protection and Recovery Procedures
- contents:
  - "7.  Session Description Protocol (SDP) Signaling\n   This section provides an
    SDP [RFC4566] example.  The following\n   example uses the FEC grouping semantics
    [RFC5956].\n   In this example, we have one source video stream (mid:S1) and one
    FEC\n   repair stream (mid:R1).  We form one FEC group with the \"a=group:\n   FEC-FR
    S1 R1\" line.  The source and repair streams are sent to the\n   same port on
    different multicast groups.  The repair window is set to\n   200 ms.\n        v=0\n
    \       o=ali 1122334455 1122334466 IN IP4 fec.example.com\n        s=Interleaved
    Parity FEC Example\n        t=0 0\n        a=group:FEC-FR S1 R1\n        m=video
    30000 RTP/AVP 100\n        c=IN IP4 233.252.0.1/127\n        a=rtpmap:100 MP2T/90000\n
    \       a=mid:S1\n        m=application 30000 RTP/AVP 110\n        c=IN IP4 233.252.0.2/127\n
    \       a=rtpmap:110 1d-interleaved-parityfec/90000\n        a=fmtp:110 L=5; D=10;
    repair-window=200000\n        a=mid:R1\n"
  title: 7.  Session Description Protocol (SDP) Signaling
- contents:
  - "8.  Congestion Control Considerations\n   FEC is an effective approach to provide
    applications with resiliency\n   against packet losses.  However, in networks
    where the congestion is\n   a major contributor to the packet loss, the potential
    impacts of\n   using FEC SHOULD be considered carefully before injecting the repair\n
    \  flows into the network.  In particular, in bandwidth-limited\n   networks,
    FEC repair flows may consume most or all of the available\n   bandwidth and may
    consequently congest the network.  In such cases,\n   the applications MUST NOT
    arbitrarily increase the amount of FEC\n   protection since doing so may lead
    to a congestion collapse.  If\n   desired, stronger FEC protection MAY be applied
    only after the source\n   rate has been reduced.\n   In a network-friendly implementation,
    an application SHOULD NOT send/\n   receive FEC repair flows if it knows that
    sending/receiving those FEC\n   repair flows would not help at all in recovering
    the missing packets.\n   Such a practice helps reduce the amount of wasted bandwidth.
    \ It is\n   RECOMMENDED that the amount of FEC protection is adjusted dynamically\n
    \  based on the packet loss rate observed by the applications.\n   In multicast
    scenarios, it may be difficult to optimize the FEC\n   protection per receiver.
    \ If there is a large variation among the\n   levels of FEC protection needed
    by different receivers, it is\n   RECOMMENDED that the sender offers multiple
    repair flows with\n   different levels of FEC protection and the receivers join
    the\n   corresponding multicast sessions to receive the repair flow(s) that\n
    \  is best for them.\n"
  title: 8.  Congestion Control Considerations
- contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [RFC3550] and in any applicable RTP profile.\n   The
    main security considerations for the RTP packet carrying the RTP\n   payload format
    defined within this memo are confidentiality,\n   integrity, and source authenticity.
    \ Confidentiality is achieved by\n   encrypting the RTP payload.  Altering the
    FEC packets can have a big\n   impact on the reconstruction operation.  An attack
    that changes some\n   bits in the FEC packets can have a significant effect on
    the\n   calculation and the recovery of the source packets.  For example,\n   changing
    the length recovery field can result in the recovery of a\n   packet that is too
    long.  Depending on the application, it may be\n   helpful to perform a sanity
    check on the received source and FEC\n   packets before performing the recovery
    operation and to determine the\n   validity of the recovered packets before using
    them.\n   The integrity of the RTP packets is achieved through a suitable\n   cryptographic
    integrity protection mechanism.  Such a cryptographic\n   system may also allow
    the authentication of the source of the\n   payload.  A suitable security mechanism
    for this RTP payload format\n   should provide source authentication capable of
    determining if an RTP\n   packet is from a member of the RTP session.\n   Note
    that the appropriate mechanism to provide security to RTP and\n   payloads following
    this memo may vary.  It is dependent on the\n   application, transport and signaling
    protocol employed.  Therefore, a\n   single mechanism is not sufficient, although
    if suitable, using the\n   Secure Real-time Transport Protocol (SRTP) [RFC3711]
    is RECOMMENDED.\n   Other mechanisms that may be used are IPsec [RFC4301] and
    Transport\n   Layer Security (TLS) [RFC5246]; other alternatives may exist.\n
    \  If FEC protection is applied on already encrypted source packets,\n   there
    is no need for additional encryption.  However, if the source\n   packets are
    encrypted after FEC protection is applied, the FEC\n   packets should be cryptographically
    as secure as the source packets.\n   Failure to provide an equal level of confidentiality,
    integrity, and\n   authentication to the FEC packets can compromise the source
    packets'\n   confidentiality, integrity or authentication since the FEC packets\n
    \  are generated by applying XOR operation across the source packets.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   New media subtypes are subject to IANA registration.
    \ For the\n   registration of the payload format and its parameters introduced
    in\n   this document, refer to Section 5.\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   A major part of this document is borrowed from [RFC2733],
    [RFC5109],\n   and [SMPTE2022-1].  Thus, the author would like to thank the authors\n
    \  and editors of these earlier specifications.  The author also thanks\n   Colin
    Perkins for his constructive suggestions for this document.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]          Bradner, S., \"Key words
      for use in RFCs to\n                      Indicate Requirement Levels\", BCP
      14, RFC 2119,\n                      March 1997.\n   [RFC3550]          Schulzrinne,
      H., Casner, S., Frederick, R., and V.\n                      Jacobson, \"RTP:
      A Transport Protocol for Real-Time\n                      Applications\", STD
      64, RFC 3550, July 2003.\n   [RFC4566]          Handley, M., Jacobson, V., and
      C. Perkins, \"SDP:\n                      Session Description Protocol\", RFC
      4566,\n                      July 2006.\n   [RFC5956]          Begen, A., \"Forward
      Error Correction Grouping\n                      Semantics in Session Description
      Protocol\",\n                      RFC 5956, September 2010.\n   [RFC4288]          Freed,
      N. and J. Klensin, \"Media Type\n                      Specifications and Registration
      Procedures\",\n                      BCP 13, RFC 4288, December 2005.\n   [RFC4855]
      \         Casner, S., \"Media Type Registration of RTP\n                      Payload
      Formats\", RFC 4855, February 2007.\n   [RFC3264]          Rosenberg, J. and
      H. Schulzrinne, \"An Offer/Answer\n                      Model with Session
      Description Protocol (SDP)\",\n                      RFC 3264, June 2002.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [DVB-AL-FEC]       Begen, A. and T. Stockhammer,
      \"Guidelines for\n                      Implementing DVB-IPTV Application-Layer
      Hybrid FEC\n                      Protection\", Work in Progress, December 2009.\n
      \  [RFC2733]          Rosenberg, J. and H. Schulzrinne, \"An RTP Payload\n                      Format
      for Generic Forward Error Correction\",\n                      RFC 2733, December
      1999.\n   [RFC3009]          Rosenberg, J. and H. Schulzrinne, \"Registration
      of\n                      parityfec MIME types\", RFC 3009, November 2000.\n
      \  [RFC5109]          Li, A., \"RTP Payload Format for Generic Forward\n                      Error
      Correction\", RFC 5109, December 2007.\n   [ETSI-TS-102-034]  ETSI TS 102 034
      V1.4.1, \"Transport of MPEG 2 TS\n                      Based DVB Services over
      IP Based Networks\",\n                      August 2009.\n   [RFC2326]          Schulzrinne,
      H., Rao, A., and R. Lanphier, \"Real\n                      Time Streaming Protocol
      (RTSP)\", RFC 2326,\n                      April 1998.\n   [RFC2974]          Handley,
      M., Perkins, C., and E. Whelan, \"Session\n                      Announcement
      Protocol\", RFC 2974, October 2000.\n   [SMPTE2022-1]      SMPTE 2022-1-2007,
      \"Forward Error Correction for\n                      Real-Time Video/Audio
      Transport over IP Networks\",\n                      2007.\n   [RFC3711]          Baugher,
      M., McGrew, D., Naslund, M., Carrara, E.,\n                      and K. Norrman,
      \"The Secure Real-time Transport\n                      Protocol (SRTP)\", RFC
      3711, March 2004.\n   [RFC4301]          Kent, S. and K. Seo, \"Security Architecture
      for\n                      the Internet Protocol\", RFC 4301, December 2005.\n
      \  [RFC5246]          Dierks, T. and E. Rescorla, \"The Transport Layer\n                      Security
      (TLS) Protocol Version 1.2\", RFC 5246,\n                      August 2008.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Author's Address\n   Ali Begen\n   Cisco\n   181 Bay Street\n   Toronto, ON  M5J
    2T3\n   Canada\n   EMail: abegen@cisco.com\n"
  title: Author's Address
