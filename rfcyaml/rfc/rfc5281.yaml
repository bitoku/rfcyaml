- title: __initial_text__
  contents:
  - "  Extensible Authentication Protocol Tunneled Transport Layer Security\n    \
    \         Authenticated Protocol Version 0 (EAP-TTLSv0)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   EAP-TTLS is an EAP (Extensible Authentication Protocol) method that\n\
    \   encapsulates a TLS (Transport Layer Security) session, consisting of\n   a\
    \ handshake phase and a data phase.  During the handshake phase, the\n   server\
    \ is authenticated to the client (or client and server are\n   mutually authenticated)\
    \ using standard TLS procedures, and keying\n   material is generated in order\
    \ to create a cryptographically secure\n   tunnel for information exchange in\
    \ the subsequent data phase.  During\n   the data phase, the client is authenticated\
    \ to the server (or client\n   and server are mutually authenticated) using an\
    \ arbitrary\n   authentication mechanism encapsulated within the secure tunnel.\
    \  The\n   encapsulated authentication mechanism may itself be EAP, or it may\
    \ be\n   another authentication protocol such as PAP, CHAP, MS-CHAP, or MS-\n\
    \   CHAP-V2.  Thus, EAP-TTLS allows legacy password-based authentication\n   protocols\
    \ to be used against existing authentication databases, while\n   protecting the\
    \ security of these legacy protocols against\n   eavesdropping, man-in-the-middle,\
    \ and other attacks.  The data phase\n   may also be used for additional, arbitrary\
    \ data exchange.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Motivation ......................................................5\n  \
    \ 3. Requirements Language ...........................................7\n   4.\
    \ Terminology .....................................................7\n   5. Architectural\
    \ Model .............................................9\n      5.1. Carrier Protocols\
    \ .........................................10\n      5.2. Security Relationships\
    \ ....................................10\n      5.3. Messaging .................................................11\n\
    \      5.4. Resulting Security ........................................12\n  \
    \ 6. Protocol Layering Model ........................................12\n   7.\
    \ EAP-TTLS Overview ..............................................13\n      7.1.\
    \ Phase 1: Handshake ........................................14\n      7.2. Phase\
    \ 2: Tunnel ...........................................14\n      7.3. EAP Identity\
    \ Information ..................................15\n      7.4. Piggybacking ..............................................15\n\
    \      7.5. Session Resumption ........................................16\n  \
    \    7.6. Determining Whether to Enter Phase 2 ......................17\n    \
    \  7.7. TLS Version ...............................................18\n      7.8.\
    \ Use of TLS PRF ............................................18\n   8. Generating\
    \ Keying Material .....................................19\n   9. EAP-TTLS Protocol\
    \ ..............................................20\n      9.1. Packet Format .............................................20\n\
    \      9.2. EAP-TTLS Start Packet .....................................21\n  \
    \         9.2.1. Version Negotiation ................................21\n    \
    \       9.2.2. Fragmentation ......................................22\n      \
    \     9.2.3. Acknowledgement Packets ............................22\n   10. Encapsulation\
    \ of AVPs within the TLS Record Layer .............23\n      10.1. AVP Format\
    \ ...............................................23\n      10.2. AVP Sequences\
    \ ............................................25\n      10.3. Guidelines for Maximum\
    \ Compatibility with AAA Servers ....25\n   11. Tunneled Authentication .......................................26\n\
    \      11.1. Implicit Challenge .......................................26\n  \
    \    11.2. Tunneled Authentication Protocols ........................27\n    \
    \       11.2.1. EAP ...............................................27\n      \
    \     11.2.2. CHAP ..............................................29\n        \
    \   11.2.3. MS-CHAP ...........................................30\n          \
    \ 11.2.4. MS-CHAP-V2 ........................................30\n           11.2.5.\
    \ PAP ...............................................32\n      11.3. Performing\
    \ Multiple Authentications ......................33\n      11.4. Mandatory Tunneled\
    \ Authentication Support ................34\n      11.5. Additional Suggested\
    \ Tunneled Authentication Support .....34\n   12. Keying Framework ..............................................35\n\
    \      12.1. Session-Id ...............................................35\n  \
    \    12.2. Peer-Id ..................................................35\n    \
    \  12.3. Server-Id ................................................35\n   13.\
    \ AVP Summary ...................................................35\n   14. Security\
    \ Considerations .......................................36\n      14.1. Security\
    \ Claims ..........................................36\n           14.1.1. Authentication\
    \ Mechanism ..........................36\n           14.1.2. Ciphersuite Negotiation\
    \ ...........................37\n           14.1.3. Mutual Authentication .............................37\n\
    \           14.1.4. Integrity Protection ..............................37\n  \
    \         14.1.5. Replay Protection .................................37\n    \
    \       14.1.6. Confidentiality ...................................37\n      \
    \     14.1.7. Key Derivation ....................................37\n        \
    \   14.1.8. Key Strength ......................................37\n          \
    \ 14.1.9. Dictionary Attack Protection ......................38\n           14.1.10.\
    \ Fast Reconnect ...................................38\n           14.1.11. Cryptographic\
    \ Binding ............................38\n           14.1.12. Session Independence\
    \ .............................38\n           14.1.13. Fragmentation ....................................38\n\
    \           14.1.14. Channel Binding ..................................38\n  \
    \    14.2. Client Anonymity .........................................38\n    \
    \  14.3. Server Trust .............................................39\n      14.4.\
    \ Certificate Validation ...................................39\n      14.5. Certificate\
    \ Compromise ...................................40\n      14.6. Forward Secrecy\
    \ ..........................................40\n      14.7. Negotiating-Down Attacks\
    \ .................................40\n   15. Message Sequences .............................................41\n\
    \      15.1. Successful Authentication via Tunneled CHAP ..............41\n  \
    \    15.2. Successful Authentication via Tunneled\n            EAP/MD5-Challenge\
    \ ........................................43\n      15.3. Successful Session Resumption\
    \ ............................46\n   16. IANA Considerations ...........................................47\n\
    \   17. Acknowledgements ..............................................48\n  \
    \ 18. References ....................................................48\n    \
    \  18.1. Normative References .....................................48\n      18.2.\
    \ Informative References ...................................49\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Extensible Authentication Protocol (EAP) [RFC3748] defines\
    \ a standard\n   message exchange that allows a server to authenticate a client\
    \ using\n   an authentication method agreed upon by both parties.  EAP may be\n\
    \   extended with additional authentication methods by registering such\n   methods\
    \ with IANA or by defining vendor-specific methods.\n   Transport Layer Security\
    \ (TLS) [RFC4346] is an authentication\n   protocol that provides for client authentication\
    \ of a server or\n   mutual authentication of client and server, as well as secure\n\
    \   ciphersuite negotiation and key exchange between the parties.  TLS\n   has\
    \ been defined as an authentication protocol for use within EAP\n   (EAP-TLS)\
    \ [RFC5216].\n   Other authentication protocols are also widely deployed.  These\
    \ are\n   typically password-based protocols, and there is a large installed\n\
    \   base of support for these protocols in the form of credential\n   databases\
    \ that may be accessed by RADIUS [RFC2865], Diameter\n   [RFC3588], or other AAA\
    \ servers.  These include non-EAP protocols\n   such as PAP [RFC1661], CHAP [RFC1661],\
    \ MS-CHAP [RFC2433], or MS-\n   CHAP-V2 [RFC2759], as well as EAP protocols such\
    \ as MD5-Challenge\n   [RFC3748].\n   EAP-TTLS is an EAP method that provides\
    \ functionality beyond what is\n   available in EAP-TLS.  EAP-TTLS has been widely\
    \ deployed and this\n   specification documents what existing implementations\
    \ do.  It has\n   some limitations and vulnerabilities, however.  These are addressed\n\
    \   in EAP-TTLS extensions and ongoing work in the creation of\n   standardized\
    \ tunneled EAP methods at the IETF.  Users of EAP-TTLS are\n   strongly encouraged\
    \ to consider these in their deployments.\n   In EAP-TLS, a TLS handshake is used\
    \ to mutually authenticate a client\n   and server.  EAP-TTLS extends this authentication\
    \ negotiation by\n   using the secure connection established by the TLS handshake\
    \ to\n   exchange additional information between client and server.  In EAP-\n\
    \   TTLS, the TLS authentication may be mutual; or it may be one-way, in\n   which\
    \ only the server is authenticated to the client.  The secure\n   connection established\
    \ by the handshake may then be used to allow the\n   server to authenticate the\
    \ client using existing, widely deployed\n   authentication infrastructures. \
    \ The authentication of the client may\n   itself be EAP, or it may be another\
    \ authentication protocol such as\n   PAP, CHAP, MS-CHAP or MS-CHAP-V2.\n   Thus,\
    \ EAP-TTLS allows legacy password-based authentication protocols\n   to be used\
    \ against existing authentication databases, while\n   protecting the security\
    \ of these legacy protocols against\n   eavesdropping, man-in-the-middle, and\
    \ other attacks.\n   EAP-TTLS also allows client and server to establish keying\
    \ material\n   for use in the data connection between the client and access point.\n\
    \   The keying material is established implicitly between client and\n   server\
    \ based on the TLS handshake.\n   In EAP-TTLS, client and server communicate using\
    \ attribute-value\n   pairs encrypted within TLS.  This generality allows arbitrary\n\
    \   functions beyond authentication and key exchange to be added to the\n   EAP\
    \ negotiation, in a manner compatible with the AAA infrastructure.\n   The main\
    \ limitation of EAP-TTLS is that its base version lacks\n   support for cryptographic\
    \ binding between the outer and inner\n   authentication.  Please refer to Section\
    \ 14.1.11 for details and the\n   conditions where this vulnerability exists.\
    \  It should be noted that\n   an extension for EAP-TTLS [TTLS-EXT] fixed this\
    \ vulnerability.  Users\n   of EAP-TTLS are strongly encouraged to adopt this\
    \ extension.\n"
- title: 2.  Motivation
  contents:
  - "2.  Motivation\n   Most password-based protocols in use today rely on a hash\
    \ of the\n   password with a random challenge.  Thus, the server issues a\n  \
    \ challenge, the client hashes that challenge with the password and\n   forwards\
    \ a response to the server, and the server validates that\n   response against\
    \ the user's password retrieved from its database.\n   This general approach describes\
    \ CHAP, MS-CHAP, MS-CHAP-V2, EAP/MD5-\n   Challenge, and EAP/One-Time Password.\n\
    \   An issue with such an approach is that an eavesdropper that observes\n   both\
    \ challenge and response may be able to mount a dictionary attack,\n   in which\
    \ random passwords are tested against the known challenge to\n   attempt to find\
    \ one which results in the known response.  Because\n   passwords typically have\
    \ low entropy, such attacks can in practice\n   easily discover many passwords.\n\
    \   While this vulnerability has long been understood, it has not been of\n  \
    \ great concern in environments where eavesdropping attacks are\n   unlikely in\
    \ practice.  For example, users with wired or dial-up\n   connections to their\
    \ service providers have not been concerned that\n   such connections may be monitored.\
    \  Users have also been willing to\n   entrust their passwords to their service\
    \ providers, or at least to\n   allow their service providers to view challenges\
    \ and hashed responses\n   which are then forwarded to their home authentication\
    \ servers using,\n   for example, proxy RADIUS, without fear that the service\
    \ provider\n   will mount dictionary attacks on the observed credentials.  Because\
    \ a\n   user typically has a relationship with a single service provider,\n  \
    \ such trust is entirely manageable.\n   With the advent of wireless connectivity,\
    \ however, the situation\n   changes dramatically:\n   -  Wireless connections\
    \ are considerably more susceptible to\n      eavesdropping and man-in-the-middle\
    \ attacks.  These attacks may\n      enable dictionary attacks against low-entropy\
    \ passwords.  In\n      addition, they may enable channel hijacking, in which\
    \ an attacker\n      gains fraudulent access by seizing control of the communications\n\
    \      channel after authentication is complete.\n   -  Existing authentication\
    \ protocols often begin by exchanging the\n      client's username in the clear.\
    \  In the context of eavesdropping\n      on the wireless channel, this can compromise\
    \ the client's\n      anonymity and locational privacy.\n   -  Often in wireless\
    \ networks, the access point does not reside in\n      the administrative domain\
    \ of the service provider with which the\n      user has a relationship.  For\
    \ example, the access point may reside\n      in an airport, coffee shop, or hotel\
    \ in order to provide public\n      access via 802.11 [802.11].  Even if password\
    \ authentications are\n      protected in the wireless leg, they may still be\
    \ susceptible to\n      eavesdropping within the untrusted wired network of the\
    \ access\n      point.\n   -  In the traditional wired world, the user typically\
    \ intentionally\n      connects with a particular service provider by dialing\
    \ an\n      associated phone number; that service provider may be required to\n\
    \      route an authentication to the user's home domain.  In a wireless\n   \
    \   network, however, the user does not get to choose an access\n      domain,\
    \ and must connect with whichever access point is nearby;\n      providing for\
    \ the routing of the authentication from an arbitrary\n      access point to the\
    \ user's home domain may pose a challenge.\n   Thus, the authentication requirements\
    \ for a wireless environment that\n   EAP-TTLS attempts to address can be summarized\
    \ as follows:\n   -  Legacy password protocols must be supported, to allow easy\n\
    \      deployment against existing authentication databases.\n   -  Password-based\
    \ information must not be observable in the\n      communications channel between\
    \ the client node and a trusted\n      service provider, to protect the user against\
    \ dictionary attacks.\n   -  The user's identity must not be observable in the\
    \ communications\n      channel between the client node and a trusted service\
    \ provider, to\n      protect the user against surveillance, undesired acquisition\
    \ of\n      marketing information, and the like.\n   -  The authentication process\
    \ must result in the distribution of\n      shared keying information to the client\
    \ and access point to permit\n      encryption and validation of the wireless\
    \ data connection\n      subsequent to authentication, to secure it against eavesdroppers\n\
    \      and prevent channel hijacking.\n   -  The authentication mechanism must\
    \ support roaming among access\n      domains with which the user has no relationship\
    \ and which will\n      have limited capabilities for routing authentication requests.\n"
- title: 3.  Requirements Language
  contents:
  - "3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   AAA\n      Authentication, Authorization, and Accounting\
    \ - functions that are\n      generally required to control access to a network\
    \ and support\n      billing and auditing.\n   AAA protocol\n      A network protocol\
    \ used to communicate with AAA servers; examples\n      include RADIUS and Diameter.\n\
    \   AAA server\n      A server which performs one or more AAA functions: authenticating\n\
    \      a user prior to granting network service, providing authorization\n   \
    \   (policy) information governing the type of network service the\n      user\
    \ is to be granted, and accumulating accounting information\n      about actual\
    \ usage.\n   AAA/H\n      A AAA server in the user's home domain, where authentication\
    \ and\n      authorization for that user are administered.\n   access point\n\
    \      A network device providing users with a point of entry into the\n     \
    \ network, and which may enforce access control and policy based on\n      information\
    \ returned by a AAA server.  Since the access point\n      terminates the server\
    \ side of the EAP conversation, for the\n      purposes of this document it is\
    \ therefore equivalent to the\n      \"authenticator\", as used in the EAP specification\
    \ [RFC3748].\n      Since the access point acts as a client to a AAA server, for\
    \ the\n      purposes of this document it is therefore also equivalent to the\n\
    \      \"Network Access Server (NAS)\", as used in AAA specifications such\n \
    \     as [RFC2865].\n   access domain\n      The domain, including access points\
    \ and other devices, that\n      provides users with an initial point of entry\
    \ into the network;\n      for example, a wireless hot spot.\n   client\n    \
    \  A host or device that connects to a network through an access\n      point.\
    \  Since it terminates the client side of the EAP\n      conversation, for the\
    \ purposes of this document, it is therefore\n      equivalent to the \"peer\"\
    , as used in the EAP specification\n      [RFC3748].\n   domain\n      A network\
    \ and associated devices that are under the administrative\n      control of an\
    \ entity such as a service provider or the user's home\n      organization.\n\
    \   link layer\n      A protocol used to carry data between hosts that are connected\n\
    \      within a single network segment; examples include PPP and\n      Ethernet.\n\
    \   NAI\n      A Network Access Identifier [RFC4282], normally consisting of the\n\
    \      name of the user and, optionally, the user's home realm.\n   proxy\n  \
    \    A server that is able to route AAA transactions to the appropriate\n    \
    \  AAA server, possibly in another domain, typically based on the\n      realm\
    \ portion of an NAI.\n   realm\n      The optional part of an NAI indicating the\
    \ domain to which a AAA\n      transaction is to be routed, normally the user's\
    \ home domain.\n   service provider\n      An organization (with which a user\
    \ has a business relationship)\n      that provides network or other services.\
    \  The service provider may\n      provide the access equipment with which the\
    \ user connects, may\n      perform authentication or other AAA functions, may\
    \ proxy AAA\n      transactions to the user's home domain, etc.\n   TTLS server\n\
    \      A AAA server which implements EAP-TTLS.  This server may also be\n    \
    \  capable of performing user authentication, or it may proxy the\n      user\
    \ authentication to a AAA/H.\n   user\n      The person operating the client device.\
    \  Though the line is often\n      blurred, \"user\" is intended to refer to the\
    \ human being who is\n      possessed of an identity (username), password, or\
    \ other\n      authenticating information, and \"client\" is intended to refer\
    \ to\n      the device which makes use of this information to negotiate\n    \
    \  network access.  There may also be clients with no human\n      operators;\
    \ in this case, the term \"user\" is a convenient\n      abstraction.\n"
- title: 5.  Architectural Model
  contents:
  - "5.  Architectural Model\n   The network architectural model for EAP-TTLS usage\
    \ and the type of\n   security it provides is shown below.\n   +----------+  \
    \    +----------+      +----------+      +----------+\n   |          |      |\
    \          |      |          |      |          |\n   |  client  |<---->|  access\
    \  |<---->| TTLS AAA |<---->|  AAA/H   |\n   |          |      |  point   |  \
    \    |  server  |      |  server  |\n   |          |      |          |      |\
    \          |      |          |\n   +----------+      +----------+      +----------+\
    \      +----------+\n   <---- secure password authentication tunnel --->\n   <----\
    \ secure data tunnel ---->\n   The entities depicted above are logical entities\
    \ and may or may not\n   correspond to separate network components.  For example,\
    \ the TTLS\n   server and AAA/H server might be a single entity; the access point\n\
    \   and TTLS server might be a single entity; or, indeed, the functions\n   of\
    \ the access point, TTLS server and AAA/H server might be combined\n   into a\
    \ single physical device.  The above diagram illustrates the\n   division of labor\
    \ among entities in a general manner and shows how a\n   distributed system might\
    \ be constructed; however, actual systems\n   might be realized more simply.\n\
    \   Note also that one or more AAA proxy servers might be deployed\n   between\
    \ access point and TTLS server, or between TTLS server and\n   AAA/H server. \
    \ Such proxies typically perform aggregation or are\n   required for realm-based\
    \ message routing.  However, such servers play\n   no direct role in EAP-TTLS\
    \ and are therefore not shown.\n"
- title: 5.1.  Carrier Protocols
  contents:
  - "5.1.  Carrier Protocols\n   The entities shown above communicate with each other\
    \ using carrier\n   protocols capable of encapsulating EAP.  The client and access\
    \ point\n   communicate typically using a link layer carrier protocol such as\
    \ PPP\n   or EAPOL (EAP over LAN).  The access point, TTLS server, and AAA/H\n\
    \   server communicate using a AAA carrier protocol such as RADIUS or\n   Diameter.\n\
    \   EAP, and therefore EAP-TTLS, must be initiated via the carrier\n   protocol\
    \ between client and access point.  In PPP or EAPOL, for\n   example, EAP is initiated\
    \ when the access point sends an EAP-\n   Request/Identity packet to the client.\n\
    \   The keying material used to encrypt and authenticate the data\n   connection\
    \ between the client and access point is developed\n   implicitly between the\
    \ client and TTLS server as a result of the\n   EAP-TTLS negotiation.  This keying\
    \ material must be communicated to\n   the access point by the TTLS server using\
    \ the AAA carrier protocol.\n"
- title: 5.2.  Security Relationships
  contents:
  - "5.2.  Security Relationships\n   The client and access point have no pre-existing\
    \ security\n   relationship.\n   The access point, TTLS server, and AAA/H server\
    \ are each assumed to\n   have a pre-existing security association with the adjacent\
    \ entity\n   with which it communicates.  With RADIUS, for example, this is\n\
    \   achieved using shared secrets.  It is essential for such security\n   relationships\
    \ to permit secure key distribution.\n   The client and AAA/H server have a security\
    \ relationship based on the\n   user's credentials such as a password.\n   The\
    \ client and TTLS server may have a one-way security relationship\n   based on\
    \ the TTLS server's possession of a private key guaranteed by\n   a CA certificate\
    \ which the user trusts, or may have a mutual security\n   relationship based\
    \ on certificates for both parties.\n"
- title: 5.3.  Messaging
  contents:
  - "5.3.  Messaging\n   The client and access point initiate an EAP conversation\
    \ to negotiate\n   the client's access to the network.  Typically, the access\
    \ point\n   issues an EAP-Request/Identity to the client, which responds with\
    \ an\n   EAP-Response/Identity.  Note that the client need not include the\n \
    \  user's actual identity in this EAP-Response/Identity packet other\n   than\
    \ for routing purposes (e.g., realm information; see Section 7.3\n   and [RFC3748],\
    \ Section 5.1); the user's actual identity need not be\n   transmitted until an\
    \ encrypted channel has been established.\n   The access point now acts as a passthrough\
    \ device, allowing the TTLS\n   server to negotiate EAP-TTLS with the client directly.\n\
    \   During the first phase of the negotiation, the TLS handshake protocol\n  \
    \ is used to authenticate the TTLS server to the client and,\n   optionally, to\
    \ authenticate the client to the TTLS server, based on\n   public/private key\
    \ certificates.  As a result of the handshake,\n   client and TTLS server now\
    \ have shared keying material and an agreed\n   upon TLS record layer cipher suite\
    \ with which to secure subsequent\n   EAP-TTLS communication.\n   During the second\
    \ phase of negotiation, client and TTLS server use\n   the secure TLS record layer\
    \ channel established by the TLS handshake\n   as a tunnel to exchange information\
    \ encapsulated in attribute-value\n   pairs, to perform additional functions such\
    \ as authentication (one-\n   way or mutual), validation of client integrity and\
    \ configuration,\n   provisioning of information required for data connectivity,\
    \ etc.\n   If a tunneled client authentication is performed, the TTLS server\n\
    \   de-tunnels and forwards the authentication information to the AAA/H.\n   If\
    \ the AAA/H issues a challenge, the TTLS server tunnels the\n   challenge information\
    \ to the client.  The AAA/H server may be a\n   legacy device and needs to know\
    \ nothing about EAP-TTLS; it only needs\n   to be able to authenticate the client\
    \ based on commonly used\n   authentication protocols.\n   Keying material for\
    \ the subsequent data connection between client and\n   access point (Master Session\
    \ Key / Extended Master Session Key\n   (MSK/EMSK); see Section 8) is generated\
    \ based on secret information\n   developed during the TLS handshake between client\
    \ and TTLS server.\n   At the conclusion of a successful authentication, the TTLS\
    \ server may\n   transmit this keying material to the access point, encrypted\
    \ based on\n   the existing security associations between those devices (e.g.,\n\
    \   RADIUS).\n   The client and access point now share keying material that they\
    \ can\n   use to encrypt data traffic between them.\n"
- title: 5.4.  Resulting Security
  contents:
  - "5.4.  Resulting Security\n   As the diagram above indicates, EAP-TTLS allows\
    \ user identity and\n   password information to be securely transmitted between\
    \ client and\n   TTLS server, and generates keying material to allow network data\n\
    \   subsequent to authentication to be securely transmitted between\n   client\
    \ and access point.\n"
- title: 6.  Protocol Layering Model
  contents:
  - "6.  Protocol Layering Model\n   EAP-TTLS packets are encapsulated within EAP,\
    \ and EAP in turn\n   requires a carrier protocol to transport it.  EAP-TTLS packets\n\
    \   themselves encapsulate TLS, which is then used to encapsulate\n   attribute-value\
    \ pairs (AVPs) which may carry user authentication or\n   other information. \
    \ Thus, EAP-TTLS messaging can be described using a\n   layered model, where each\
    \ layer is encapsulated by the layer beneath\n   it.  The following diagram clarifies\
    \ the relationship between\n   protocols:\n   +-----------------------------------------------------------+\n\
    \   | AVPs, including authentication (PAP, CHAP, MS-CHAP, etc.) |\n   +-----------------------------------------------------------+\n\
    \   |                            TLS                            |\n   +-----------------------------------------------------------+\n\
    \   |                         EAP-TTLS                          |\n   +-----------------------------------------------------------+\n\
    \   |                            EAP                            |\n   +-----------------------------------------------------------+\n\
    \   |   Carrier Protocol (PPP, EAPOL, RADIUS, Diameter, etc.)   |\n   +-----------------------------------------------------------+\n\
    \   When the user authentication protocol is itself EAP, the layering is\n   as\
    \ follows:\n   +-----------------------------------------------------------+\n\
    \   |              EAP Method (MD-Challenge, etc.)              |\n   +-----------------------------------------------------------+\n\
    \   |                    AVPs, including EAP                    |\n   +-----------------------------------------------------------+\n\
    \   |                            TLS                            |\n   +-----------------------------------------------------------+\n\
    \   |                         EAP-TTLS                          |\n   +-----------------------------------------------------------+\n\
    \   |                            EAP                            |\n   +-----------------------------------------------------------+\n\
    \   |   Carrier Protocol (PPP, EAPOL, RADIUS, Diameter, etc.)   |\n   +-----------------------------------------------------------+\n\
    \   Methods for encapsulating EAP within carrier protocols are already\n   defined.\
    \  For example, PPP [RFC1661] or EAPOL [802.1X] may be used to\n   transport EAP\
    \ between client and access point; RADIUS [RFC2865] or\n   Diameter [RFC3588]\
    \ are used to transport EAP between access point and\n   TTLS server.\n"
- title: 7.  EAP-TTLS Overview
  contents:
  - "7.  EAP-TTLS Overview\n   A EAP-TTLS negotiation comprises two phases: the TLS\
    \ handshake phase\n   and the TLS tunnel phase.\n   During phase 1, TLS is used\
    \ to authenticate the TTLS server to the\n   client and, optionally, the client\
    \ to the TTLS server.  Phase 1\n   results in the activation of a cipher suite,\
    \ allowing phase 2 to\n   proceed securely using the TLS record layer.  (Note\
    \ that the type and\n   degree of security in phase 2 depends on the cipher suite\
    \ negotiated\n   during phase 1; if the null cipher suite is negotiated, there\
    \ will be\n   no security!)\n   During phase 2, the TLS record layer is used to\
    \ tunnel information\n   between client and TTLS server to perform any of a number\
    \ of\n   functions.  These might include user authentication, client integrity\n\
    \   validation, negotiation of data communication security capabilities,\n   key\
    \ distribution, communication of accounting information, etc.\n   Information\
    \ between client and TTLS server is exchanged via\n   attribute-value pairs (AVPs)\
    \ compatible with RADIUS and Diameter;\n   thus, any type of function that can\
    \ be implemented via such AVPs may\n   easily be performed.\n   EAP-TTLS specifies\
    \ how user authentication may be performed during\n   phase 2.  The user authentication\
    \ may itself be EAP, or it may be a\n   legacy protocol such as PAP, CHAP, MS-CHAP,\
    \ or MS-CHAP-V2.  Phase 2\n   user authentication may not always be necessary,\
    \ since the user may\n   already have been authenticated via the mutual authentication\
    \ option\n   of the TLS handshake protocol.\n   Functions other than authentication\
    \ MAY also be performed during\n   phase 2.  This document does not define any\
    \ such functions; however,\n   any organization or standards body is free to specify\
    \ how additional\n   functions may be performed through the use of appropriate\
    \ AVPs.\n   EAP-TTLS specifies how keying material for the data connection\n \
    \  between client and access point is generated.  The keying material is\n   developed\
    \ implicitly between client and TTLS server based on the\n   results of the TLS\
    \ handshake; the TTLS server will communicate the\n   keying material to the access\
    \ point over the carrier protocol.\n"
- title: '7.1.  Phase 1: Handshake'
  contents:
  - "7.1.  Phase 1: Handshake\n   In phase 1, the TLS handshake protocol is used to\
    \ authenticate the\n   TTLS server to the client and, optionally, to authenticate\
    \ the client\n   to the TTLS server.\n   The TTLS server initiates the EAP-TTLS\
    \ method with an EAP-TTLS/Start\n   packet, which is an EAP-Request with Type\
    \ = EAP-TTLS and the S\n   (Start) bit set.  This indicates to the client that\
    \ it should begin\n   the TLS handshake by sending a ClientHello message.\n  \
    \ EAP packets continue to be exchanged between client and TTLS server\n   to complete\
    \ the TLS handshake, as described in [RFC5216].  Phase 1 is\n   completed when\
    \ the client and TTLS server exchange ChangeCipherSpec\n   and Finished messages.\
    \  At this point, additional information may be\n   securely tunneled.\n   As\
    \ part of the TLS handshake protocol, the TTLS server will send its\n   certificate\
    \ along with a chain of certificates leading to the\n   certificate of a trusted\
    \ CA.  The client will need to be configured\n   with the certificate of the trusted\
    \ CA in order to perform the\n   authentication.\n   If certificate-based authentication\
    \ of the client is desired, the\n   client must have been issued a certificate\
    \ and must have the private\n   key associated with that certificate.\n"
- title: '7.2.  Phase 2: Tunnel'
  contents:
  - "7.2.  Phase 2: Tunnel\n   In phase 2, the TLS record layer is used to securely\
    \ tunnel\n   information between client and TTLS server.  This information is\n\
    \   encapsulated in sequences of attribute-value pairs (AVPs), whose use\n   and\
    \ format are described in later sections.\n   Any type of information may be exchanged\
    \ during phase 2, according to\n   the requirements of the system.  (It is expected\
    \ that applications\n   utilizing EAP-TTLS will specify what information must\
    \ be exchanged\n   and therefore which AVPs must be supported.)  The client begins\
    \ the\n   phase 2 exchange by encoding information in a sequence of AVPs,\n  \
    \ passing this sequence to the TLS record layer for encryption, and\n   sending\
    \ the resulting data to the TTLS server.\n   The TTLS server recovers the AVPs\
    \ in clear text from the TLS record\n   layer.  If the AVP sequence includes authentication\
    \ information, it\n   forwards this information to the AAA/H server using the\
    \ AAA carrier\n   protocol.  Note that the EAP-TTLS and AAA/H servers may be one\
    \ and\n   the same; in which case, it simply processes the information locally.\n\
    \   The TTLS server may respond with its own sequence of AVPs.  The TTLS\n   server\
    \ passes the AVP sequence to the TLS record layer for encryption\n   and sends\
    \ the resulting data to the client.  For example, the TTLS\n   server may forward\
    \ an authentication challenge received from the\n   AAA/H.\n   This process continues\
    \ until the AAA/H either accepts or rejects the\n   client, resulting in the TTLS\
    \ server completing the EAP-TTLS\n   negotiation and indicating success or failure\
    \ to the encapsulating\n   EAP protocol (which normally results in a final EAP-Success\
    \ or EAP-\n   Failure being sent to the client).\n   The TTLS server distributes\
    \ data connection keying information and\n   other authorization information to\
    \ the access point in the same AAA\n   carrier protocol message that carries the\
    \ final EAP-Success or other\n   success indication.\n"
- title: 7.3.  EAP Identity Information
  contents:
  - "7.3.  EAP Identity Information\n   The identity of the user is provided during\
    \ phase 2, where it is\n   protected by the TLS tunnel.  However, prior to beginning\
    \ the EAP-\n   TTLS authentication, the client will typically issue an EAP-\n\
    \   Response/Identity packet as part of the EAP protocol, containing a\n   username\
    \ in clear text.  To preserve user anonymity against\n   eavesdropping, this packet\
    \ specifically SHOULD NOT include the actual\n   name of the user; instead, it\
    \ SHOULD use a blank or placeholder such\n   as \"anonymous\".  However, this\
    \ privacy constraint is not intended to\n   apply to any information within the\
    \ EAP-Response/Identity that is\n   required for routing; thus, the EAP-Response/Identity\
    \ packet MAY\n   include the name of the realm of a trusted provider to which\
    \ EAP-TTLS\n   packets should be forwarded; for example, \"anonymous@myisp.com\"\
    .\n   Note that at the time the initial EAP-Response/Identity packet is\n   sent\
    \ the EAP method is yet to be negotiated.  If, in addition to EAP-\n   TTLS, the\
    \ client is willing to negotiate use of EAP methods that do\n   not support user\
    \ anonymity, then the client MAY include the name of\n   the user in the EAP-Response/Identity\
    \ to meet the requirements of the\n   other candidate EAP methods.\n"
- title: 7.4.  Piggybacking
  contents:
  - "7.4.  Piggybacking\n   While it is convenient to describe EAP-TTLS messaging\
    \ in terms of two\n   phases, it is sometimes required that a single EAP-TTLS\
    \ packet\n   contain both phase 1 and phase 2 TLS messages.\n   Such \"piggybacking\"\
    \ occurs when the party that completes the\n   handshake also has AVPs to send.\
    \  For example, when negotiating a\n   resumed TLS session, the TTLS server sends\
    \ its ChangeCipherSpec and\n   Finished messages first, then the client sends\
    \ its own\n   ChangeCipherSpec and Finished messages to conclude the handshake.\
    \  If\n   the client has authentication or other AVPs to send to the TTLS\n  \
    \ server, it MUST tunnel those AVPs within the same EAP-TTLS packet\n   immediately\
    \ following its Finished message.  If the client fails to\n   do this, the TTLS\
    \ server will incorrectly assume that the client has\n   no AVPs to send, and\
    \ the outcome of the negotiation could be\n   affected.\n"
- title: 7.5.  Session Resumption
  contents:
  - "7.5.  Session Resumption\n   When a client and TTLS server that have previously\
    \ negotiated an\n   EAP-TTLS session begin a new EAP-TTLS negotiation, the client\
    \ and\n   TTLS server MAY agree to resume the previous session.  This\n   significantly\
    \ reduces the time required to establish the new session.\n   This could occur\
    \ when the client connects to a new access point, or\n   when an access point\
    \ requires reauthentication of a connected client.\n   Session resumption is accomplished\
    \ using the standard TLS mechanism.\n   The client signals its desire to resume\
    \ a session by including the\n   session ID of the session it wishes to resume\
    \ in the ClientHello\n   message; the TTLS server signals its willingness to resume\
    \ that\n   session by echoing that session ID in its ServerHello message.\n  \
    \ If the TTLS server elects not to resume the session, it simply does\n   not\
    \ echo the session ID, causing a new session to be negotiated.\n   This could\
    \ occur if the TTLS server is configured not to resume\n   sessions, if it has\
    \ not retained the requested session's state, or if\n   the session is considered\
    \ stale.  A TTLS server may consider the\n   session stale based on its own configuration,\
    \ or based on session-\n   limiting information received from the AAA/H (e.g.,\
    \ the RADIUS\n   Session-Timeout attribute).\n   Tunneled authentication is specifically\
    \ not performed for resumed\n   sessions; the presumption is that the knowledge\
    \ of the master secret\n   (as evidenced by the ability to resume the session)\
    \ is authentication\n   enough.  This allows session resumption to occur without\
    \ any\n   messaging between the TTLS server and the AAA/H.  If periodic\n   reauthentication\
    \ to the AAA/H is desired, the AAA/H must indicate\n   this to the TTLS server\
    \ when the original session is established, for\n   example, using the RADIUS\
    \ Session-Timeout attribute.\n   The client MAY send other AVPs in its first phase\
    \ 2 message of a\n   session resumption, to initiate non-authentication functions.\
    \  If it\n   does not, the TTLS server, at its option, MAY send AVPs to the client\n\
    \   to initiate non-authentication functions, or MAY simply complete the\n   EAP-TTLS\
    \ negotiation and indicate success or failure to the\n   encapsulating EAP protocol.\n\
    \   The TTLS server MUST retain authorization information returned by the\n  \
    \ AAA/H for use in resumed sessions.  A resumed session MUST operate\n   under\
    \ the same authorizations as the original session, and the TTLS\n   server must\
    \ be prepared to send the appropriate information back to\n   the access point.\
    \  Authorization information might include the\n   maximum time for the session,\
    \ the maximum allowed bandwidth, packet\n   filter information, and the like.\
    \  The TTLS server is responsible for\n   modifying time values, such as Session-Timeout,\
    \ appropriately for\n   each resumed session.\n   A TTLS server MUST NOT permit\
    \ a session to be resumed if that session\n   did not result in a successful authentication\
    \ of the user during\n   phase 2.  The consequence of incorrectly implementing\
    \ this aspect of\n   session resumption would be catastrophic; any attacker could\
    \ easily\n   gain network access by first initiating a session that succeeds in\n\
    \   the TLS handshake but fails during phase 2 authentication, and then\n   resuming\
    \ that session.\n   [Implementation note: Toolkits that implement TLS often cache\n\
    \   resumable TLS sessions automatically.  Implementers must take care to\n  \
    \ override such automatic behavior, and prevent sessions from being\n   cached\
    \ for possible resumption until the user has been positively\n   authenticated\
    \ during phase 2.]\n"
- title: 7.6.  Determining Whether to Enter Phase 2
  contents:
  - "7.6.  Determining Whether to Enter Phase 2\n   Entering phase 2 is optional,\
    \ and may be initiated by either client\n   or TTLS server.  If no further authentication\
    \ or other information\n   exchange is required upon completion of phase 1, it\
    \ is possible to\n   successfully complete the EAP-TTLS negotiation without ever\
    \ entering\n   phase 2 or tunneling any AVPs.\n   Scenarios in which phase 2 is\
    \ never entered include:\n   -  Successful session resumption, with no additional\
    \ information\n      exchange required,\n   -  Authentication of the client via\
    \ client certificate during phase\n      1, with no additional authentication\
    \ or information exchange\n      required.\n   The client always has the first\
    \ opportunity to initiate phase 2 upon\n   completion of phase 1.  If the client\
    \ has no AVPs to send, it either\n   sends an Acknowledgement (see Section 9.2.3)\
    \ if the TTLS server sends\n   the final phase 1 message, or simply does not piggyback\
    \ a phase 2\n   message when it issues the final phase 1 message (as will occur\n\
    \   during session resumption).\n   If the client does not initiate phase 2, the\
    \ TTLS server, at its\n   option, may either complete the EAP-TTLS negotiation\
    \ without entering\n   phase 2 or initiate phase 2 by tunneling AVPs to the client.\n\
    \   For example, suppose a successful session resumption occurs in phase\n   1.\
    \  The following sequences are possible:\n   -  Neither the client nor TTLS server\
    \ has additional information to\n      exchange.  The client completes phase 1\
    \ without piggybacking phase\n      2 AVPs, and the TTLS server indicates success\
    \ to the encapsulating\n      EAP protocol without entering phase 2.\n   -  The\
    \ client has no additional information to exchange, but the TTLS\n      server\
    \ does.  The client completes phase 1 without piggybacking\n      phase 2 AVPs,\
    \ but the TTLS server extends the EAP-TTLS negotiation\n      into phase 2 by\
    \ tunneling AVPs in its next EAP-TTLS message.\n   -  The client has additional\
    \ information to exchange, and piggybacks\n      phase 2 AVPs with its final phase\
    \ 1 message, thus extending the\n      negotiation into phase 2.\n"
- title: 7.7.  TLS Version
  contents:
  - "7.7.  TLS Version\n   TLS version 1.0 [RFC2246], 1.1 [RFC4346], or any subsequent\
    \ version\n   MAY be used within EAP-TTLS.  TLS provides for its own version\n\
    \   negotiation mechanism.\n   For maximum interoperability, EAP-TTLS implementations\
    \ SHOULD support\n   TLS version 1.0.\n"
- title: 7.8.  Use of TLS PRF
  contents:
  - "7.8.  Use of TLS PRF\n   EAP-TTLSv0 utilizes a pseudo-random function (PRF) to\
    \ generate keying\n   material (Section 8) and to generate implicit challenge\
    \ material for\n   certain authentication methods (Section 11.1).  The PRF used\
    \ in these\n   computations is the TLS PRF used in the TLS handshake negotiation\n\
    \   that initiates the EAP-TTLS exchange.\n   TLS versions 1.0 [RFC2246] and 1.1\
    \ [RFC4346] define the same PRF\n   function, and any EAP-TTLSv0 implementation\
    \ based on these versions\n   of TLS must use the PRF defined therein.  It is\
    \ expected that future\n   versions of or extensions to the TLS protocol will\
    \ permit alternative\n   PRF functions to be negotiated.  If an alternative PRF\
    \ function is\n   specified for the underlying TLS version or has been negotiated\n\
    \   during the TLS handshake negotiation, then that alternative PRF\n   function\
    \ must be used in EAP-TTLSv0 computations instead of the TLS\n   1.0/1.1 PRF.\n\
    \   The TLS PRF function used in this specification is denoted as\n   follows:\n\
    \         PRF-nn(secret, label, seed)\n   where:\n         nn is the number of\
    \ generated octets\n         secret is a secret key\n         label is a string\
    \ (without null-terminator)\n         seed is a binary sequence.\n   The TLS 1.0/1.1\
    \ PRF has invariant output regardless of how many\n   octets are generated.  However,\
    \ it is possible that alternative PRF\n   functions will include the size of the\
    \ output sequence as input to\n   the PRF function; this means generating 32 octets\
    \ and generating 64\n   octets from the same input parameters will no longer result\
    \ in the\n   first 32 octets being identical.  For this reason, the PRF is always\n\
    \   specified with an \"nn\", indicating the number of generated octets.\n"
- title: 8.  Generating Keying Material
  contents:
  - "8.  Generating Keying Material\n   Upon successful conclusion of an EAP-TTLS\
    \ negotiation, 128 octets of\n   keying material are generated and exported for\
    \ use in securing the\n   data connection between client and access point.  The\
    \ first 64 octets\n   of the keying material constitute the MSK, the second 64\
    \ octets\n   constitute the EMSK.\n   The keying material is generated using the\
    \ TLS PRF function\n   [RFC4346], with inputs consisting of the TLS master secret,\
    \ the\n   ASCII-encoded constant string \"ttls keying material\", the TLS client\n\
    \   random, and the TLS server random.  The constant string is not null-\n   terminated.\n\
    \      Keying Material = PRF-128(SecurityParameters.master_secret, \"ttls\n  \
    \              keying material\", SecurityParameters.client_random +\n       \
    \         SecurityParameters.server_random)\n      MSK = Keying Material [0..63]\n\
    \      EMSK = Keying Material [64..127]\n   Note that the order of client_random\
    \ and server_random for EAP-TTLS\n   is reversed from that of the TLS protocol\
    \ [RFC4346].  This ordering\n   follows the key derivation method of EAP-TLS [RFC5216].\
    \  Altering the\n   order of randoms avoids namespace collisions between constant\
    \ strings\n   defined for EAP-TTLS and those defined for the TLS protocol.\n \
    \  The TTLS server distributes this keying material to the access point\n   via\
    \ the AAA carrier protocol.  When RADIUS is the AAA carrier\n   protocol, the\
    \ MPPE-Recv-Key and MPPE-Send-Key attributes [RFC2548]\n   may be used to distribute\
    \ the first 32 octets and second 32 octets of\n   the MSK, respectively.\n"
- title: 9.  EAP-TTLS Protocol
  contents:
  - '9.  EAP-TTLS Protocol

    '
- title: 9.1.  Packet Format
  contents:
  - "9.1.  Packet Format\n   The EAP-TTLS packet format is shown below.  The fields\
    \ are\n   transmitted left to right.\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Flags     |        Message Length\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Message Length         |             Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      1 for request, 2 for response.\n   Identifier\n      The Identifier\
    \ field is one octet and aids in matching responses\n      with requests.  The\
    \ Identifier field MUST be changed for each\n      request packet and MUST be\
    \ echoed in each response packet.\n   Length\n      The Length field is two octets\
    \ and indicates the number of octets\n      in the entire EAP packet, from the\
    \ Code field through the Data\n      field.\n   Type\n      21 (EAP-TTLS)\n  \
    \ Flags\n        0   1   2   3   4   5   6   7\n      +---+---+---+---+---+---+---+---+\n\
    \      | L | M | S | R | R |     V     |\n      +---+---+---+---+---+---+---+---+\n\
    \      L = Length included\n      M = More fragments\n      S = Start\n      R\
    \ = Reserved\n      V = Version (000 for EAP-TTLSv0)\n      The L bit is set to\
    \ indicate the presence of the four-octet TLS\n      Message Length field.  The\
    \ M bit indicates that more fragments are\n      to come.  The S bit indicates\
    \ a Start message.  The V field is set\n      to the version of EAP-TTLS, and\
    \ is set to 000 for EAP-TTLSv0.\n   Message Length\n      The Message Length field\
    \ is four octets, and is present only if\n      the L bit is set.  This field\
    \ provides the total length of the raw\n      data message sequence prior to fragmentation.\n\
    \   Data\n      For all packets other than a Start packet, the Data field consists\n\
    \      of the raw TLS message sequence or fragment thereof.  For a Start\n   \
    \   packet, the Data field may optionally contain an AVP sequence.\n"
- title: 9.2.  EAP-TTLS Start Packet
  contents:
  - "9.2.  EAP-TTLS Start Packet\n   The S bit MUST be set on the first packet sent\
    \ by the server to\n   initiate the EAP-TTLS protocol.  It MUST NOT be set on\
    \ any other\n   packet.\n   This packet MAY contain additional information in\
    \ the form of AVPs,\n   which may provide useful hints to the client; for example,\
    \ the server\n   identity may be useful to the client to allow it to pick the\
    \ correct\n   TLS session ID for session resumption.  Each AVP must begin on a\n\
    \   four-octet boundary relative to the first AVP in the sequence.  If an\n  \
    \ AVP is not a multiple of four octets, it must be padded with zeros to\n   the\
    \ next four-octet boundary.\n"
- title: 9.2.1.  Version Negotiation
  contents:
  - "9.2.1.  Version Negotiation\n   The version of EAP-TTLS is negotiated in the\
    \ first exchange between\n   server and client.  The server sets the highest version\
    \ number of\n   EAP-TTLS that it supports in the V field of its Start message\
    \ (in the\n   case of EAP-TTLSv0, this is 0).  In its first EAP message in\n \
    \  response, the client sets the V field to the highest version number\n   that\
    \ it supports that is no higher than the version number offered by\n   the server.\
    \  If the client version is not acceptable to the server,\n   it sends an EAP-Failure\
    \ to terminate the EAP session.  Otherwise, the\n   version sent by the client\
    \ is the version of EAP-TTLS that MUST be\n   used, and both server and client\
    \ MUST set the V field to that version\n   number in all subsequent EAP messages.\n"
- title: 9.2.2.  Fragmentation
  contents:
  - "9.2.2.  Fragmentation\n   Each EAP-TTLS message contains a single leg of a half-duplex\n\
    \   conversation.  The EAP carrier protocol (e.g., PPP, EAPOL, RADIUS)\n   may\
    \ impose constraints on the length of an EAP message.  Therefore it\n   may be\
    \ necessary to fragment an EAP-TTLS message across multiple EAP\n   messages.\n\
    \   Each fragment except for the last MUST have the M bit set, to\n   indicate\
    \ that more data is to follow; the final fragment MUST NOT\n   have the M bit\
    \ set.\n   If there are multiple fragments, the first fragment MUST have the L\n\
    \   bit set and include the length of the entire raw message prior to\n   fragmentation.\
    \  Fragments other than the first MUST NOT have the L\n   bit set.  Unfragmented\
    \ messages MAY have the L bit set and include\n   the length of the message (though\
    \ this information is redundant).\n   Upon receipt of a packet with the M bit\
    \ set, the receiver MUST\n   transmit an Acknowledgement packet.  The receiver\
    \ is responsible for\n   reassembly of fragmented packets.\n"
- title: 9.2.3.  Acknowledgement Packets
  contents:
  - "9.2.3.  Acknowledgement Packets\n   An Acknowledgement packet is an EAP-TTLS\
    \ packet with no additional\n   data beyond the Flags octet, and with the L, M,\
    \ and S bits of the\n   Flags octet set to 0.  (Note, however, that the V field\
    \ MUST still be\n   set to the appropriate version number.)\n   An Acknowledgement\
    \ packet is sent for the following purposes:\n   -  A Fragment Acknowledgement\
    \ is sent in response to an EAP packet\n      with the M bit set.\n   -  When\
    \ the final EAP packet of the EAP-TTLS negotiation is sent by\n      the TTLS\
    \ server, the client must respond with an Acknowledgement\n      packet, to allow\
    \ the TTLS server to proceed with the EAP protocol\n      upon completion of EAP-TTLS\
    \ (typically by sending or causing to be\n      sent a final EAP-Success or EAP-Failure\
    \ to the client).\n"
- title: 10.  Encapsulation of AVPs within the TLS Record Layer
  contents:
  - "10.  Encapsulation of AVPs within the TLS Record Layer\n   Subsequent to the\
    \ TLS handshake, information may be tunneled between\n   client and TTLS server\
    \ through the use of attribute-value pairs\n   (AVPs) encrypted within the TLS\
    \ record layer.\n   The AVP format chosen for EAP-TTLS is compatible with the\
    \ Diameter\n   AVP format.  This does not represent a requirement that Diameter\
    \ be\n   supported by any of the devices or servers participating in an EAP-\n\
    \   TTLS negotiation.  Use of this format is merely a convenience.\n   Diameter\
    \ is a superset of RADIUS and includes the RADIUS attribute\n   namespace by definition,\
    \ though it does not limit the size of an AVP\n   as does RADIUS; RADIUS, in turn,\
    \ is a widely deployed AAA protocol\n   and attribute definitions exist for all\
    \ commonly used password\n   authentication protocols, including EAP.\n   Thus,\
    \ Diameter is not considered normative except as specified in\n   this document.\
    \  Specifically, the representation of the Data field of\n   an AVP in EAP-TTLS\
    \ is identical to that of Diameter.\n   Use of the RADIUS/Diameter namespace allows\
    \ a TTLS server to easily\n   translate between AVPs it uses to communicate to\
    \ clients and the\n   protocol requirements of AAA servers that are widely deployed.\
    \  Plus,\n   it provides a well-understood mechanism to allow vendors to extend\n\
    \   that namespace for their particular requirements.\n   It is expected that\
    \ the AVP Codes used in EAP-TTLS will carry roughly\n   the same meaning in EAP-TTLS\
    \ as they do in Diameter and, by\n   extension, RADIUS.  However, although EAP-TTLS\
    \ uses the same AVP\n   Codes and syntax as Diameter, the semantics may differ,\
    \ and most\n   Diameter AVPs do not have any well-defined semantics in EAP-TTLS.\
    \  A\n   separate \"EAP-TTLS AVP Usage\" registry lists the AVPs that can be\n\
    \   used within EAP-TTLS and their semantics in this context (see Section\n  \
    \ 16 for details).  A TTLS server copying AVPs between an EAP-TTLS\n   exchange\
    \ and a Diameter or RADIUS exchange with a backend MUST NOT\n   make assumptions\
    \ about AVPs whose usage in either EAP-TTLS or the\n   backend protocol it does\
    \ not understand.  Therefore, a TTLS server\n   MUST NOT copy an AVP between an\
    \ EAP-TTLS exchange and a Diameter or\n   RADIUS exchange unless the semantics\
    \ of the AVP are understood and\n   defined in both contexts.\n"
- title: 10.1.  AVP Format
  contents:
  - "10.1.  AVP Format\n   The format of an AVP is shown below.  All items are in\
    \ network, or\n   big-endian, order; that is, they have the most significant octet\n\
    \   first.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           AVP Code                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |V M r r r r r r|                  AVP Length                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Vendor-ID (opt)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+-+-+-+-+\n   AVP Code\n      The AVP Code is four\
    \ octets and, combined with the Vendor-ID field\n      if present, identifies\
    \ the attribute uniquely.  The first 256 AVP\n      numbers represent attributes\
    \ defined in RADIUS [RFC2865].  AVP\n      numbers 256 and above are defined in\
    \ Diameter [RFC3588].\n   AVP Flags\n      The AVP Flags field is one octet and\
    \ provides the receiver with\n      information necessary to interpret the AVP.\n\
    \      The 'V' (Vendor-Specific) bit indicates whether the optional\n      Vendor-ID\
    \ field is present.  When set to 1, the Vendor-ID field is\n      present and\
    \ the AVP Code is interpreted according to the namespace\n      defined by the\
    \ vendor indicated in the Vendor-ID field.\n      The 'M' (Mandatory) bit indicates\
    \ whether support of the AVP is\n      required.  If this bit is set to 0, this\
    \ indicates that the AVP\n      may be safely ignored if the receiving party does\
    \ not understand\n      or support it.  If set to 1, this indicates that the receiving\n\
    \      party MUST fail the negotiation if it does not understand the AVP;\n  \
    \    for a TTLS server, this would imply returning EAP-Failure, for a\n      client,\
    \ this would imply abandoning the negotiation.\n      The 'r' (reserved) bits\
    \ are unused and MUST be set to 0 by the\n      sender and MUST be ignored by\
    \ the receiver.\n   AVP Length\n      The AVP Length field is three octets and\
    \ indicates the length of\n      this AVP including the AVP Code, AVP Length,\
    \ AVP Flags, Vendor-ID\n      (if present), and Data.\n   Vendor-ID\n      The\
    \ Vendor-ID field is present if the V bit is set in the AVP\n      Flags field.\
    \  It is four octets and contains the vendor's IANA-\n      assigned \"SMI Network\
    \ Management Private Enterprise Codes\"\n      [RFC3232] value.  Vendors defining\
    \ their own AVPs must maintain a\n      consistent namespace for use of those\
    \ AVPs within RADIUS,\n      Diameter, and EAP-TTLS.\n      A Vendor-ID value\
    \ of zero is equivalent to absence of the Vendor-\n      ID field altogether.\n\
    \   Note that the M bit provides a means for extending the functionality\n   of\
    \ EAP-TTLS while preserving backward compatibility when desired.  By\n   setting\
    \ the M bit of the appropriate AVP(s) to 0 or 1, the party\n   initiating the\
    \ function indicates that support of the function by the\n   other party is either\
    \ optional or required.\n"
- title: 10.2.  AVP Sequences
  contents:
  - "10.2.  AVP Sequences\n   Data encapsulated within the TLS record layer must consist\
    \ entirely\n   of a sequence of zero or more AVPs.  Each AVP must begin on a four-\n\
    \   octet boundary relative to the first AVP in the sequence.  If an AVP\n   is\
    \ not a multiple of four octets, it must be padded with zeros to the\n   next\
    \ four-octet boundary.\n   Note that the AVP Length does not include the padding.\n"
- title: 10.3.  Guidelines for Maximum Compatibility with AAA Servers
  contents:
  - "10.3.  Guidelines for Maximum Compatibility with AAA Servers\n   For maximum\
    \ compatibility with AAA servers, the following guidelines\n   for AVP usage are\
    \ suggested:\n   -  Non-vendor-specific AVPs intended for use with AAA servers\
    \ should\n      be selected from the set of attributes defined for RADIUS; that\n\
    \      is, attributes with codes less than 256.  This provides\n      compatibility\
    \ with both RADIUS and Diameter.\n   -  Vendor-specific AVPs intended for use\
    \ with AAA servers should be\n      defined in terms of RADIUS.  Vendor-specific\
    \ RADIUS attributes\n      translate to Diameter (and, hence, to EAP-TTLS) automatically;\
    \ the\n      reverse is not true.  RADIUS vendor-specific attributes use RADIUS\n\
    \      attribute 26 and include Vendor-ID, vendor-specific attribute\n      code,\
    \ and length; see [RFC2865] for details.\n"
- title: 11.  Tunneled Authentication
  contents:
  - "11.  Tunneled Authentication\n   EAP-TTLS permits user authentication information\
    \ to be tunneled\n   within the TLS record layer between client and TTLS server,\
    \ ensuring\n   the security of the authentication information against active and\n\
    \   passive attack between the client and TTLS server.  The TTLS server\n   decrypts\
    \ and forwards this information to the AAA/H over the AAA\n   carrier protocol.\n\
    \   Any type of password or other authentication may be tunneled.  Also,\n   multiple\
    \ tunneled authentications may be performed.  Normally,\n   tunneled authentication\
    \ is used when the client has not been issued a\n   certificate, and the TLS handshake\
    \ provides only one-way\n   authentication of the TTLS server to the client; however,\
    \ in certain\n   cases it may be desired to perform certificate authentication\
    \ of the\n   client during the TLS handshake as well as tunneled user\n   authentication\
    \ afterwards.\n"
- title: 11.1.  Implicit Challenge
  contents:
  - "11.1.  Implicit Challenge\n   Certain authentication protocols that use a challenge/response\n\
    \   mechanism rely on challenge material that is not generated by the\n   authentication\
    \ server, and therefore the material requires special\n   handling.\n   In CHAP,\
    \ MS-CHAP, and MS-CHAP-V2, for example, the access point\n   issues a challenge\
    \ to the client, the client then hashes the\n   challenge with the password and\
    \ forwards the response to the access\n   point.  The access point then forwards\
    \ both challenge and response to\n   a AAA server.  But because the AAA server\
    \ did not itself generate the\n   challenge, such protocols are susceptible to\
    \ replay attack.\n   If the client were able to create both challenge and response,\
    \ anyone\n   able to observe a CHAP or MS-CHAP exchange could pose as that user,\n\
    \   even using EAP-TTLS.\n   To make these protocols secure under EAP-TTLS, it\
    \ is necessary to\n   provide a mechanism to produce a challenge that the client\
    \ cannot\n   control or predict.  This is accomplished using the same technique\n\
    \   described above for generating data connection keying material.\n   When a\
    \ challenge-based authentication mechanism is used, both client\n   and TTLS server\
    \ use the pseudo-random function to generate as many\n   octets as are required\
    \ for the challenge, using the constant string\n   \"ttls challenge\", based on\
    \ the master secret and random values\n   established during the handshake:\n\
    \      EAP-TTLS_challenge = PRF-nn(SecurityParameters.master_secret,\n       \
    \                      \"ttls challenge\",\n                             SecurityParameters.client_random\
    \ +\n                             SecurityParameters.server_random);\n   The number\
    \ of octets to be generated (nn) depends on the\n   authentication method, and\
    \ is indicated below for each authentication\n   method requiring implicit challenge\
    \ generation.\n"
- title: 11.2.  Tunneled Authentication Protocols
  contents:
  - "11.2.  Tunneled Authentication Protocols\n   This section describes the methods\
    \ for tunneling specific\n   authentication protocols within EAP-TTLS.\n   For\
    \ the purpose of explication, it is assumed that the TTLS server\n   and AAA/H\
    \ use RADIUS as a AAA carrier protocol between them.\n   However, this is not\
    \ a requirement, and any AAA protocol capable of\n   carrying the required information\
    \ may be used.\n   The client determines which authentication protocol will be\
    \ used via\n   the initial AVPs it sends to the server, as described in the\n\
    \   following sections.\n   Note that certain of the authentication protocols\
    \ described below\n   utilize vendor-specific AVPs originally defined for RADIUS.\
    \  RADIUS\n   and Diameter differ in the encoding of vendor-specific AVPs: RADIUS\n\
    \   uses the vendor-specific attribute (code 26), while Diameter uses\n   setting\
    \ of the V bit to indicate the presence of Vendor-ID.  The\n   RADIUS form of\
    \ the vendor-specific attribute is always convertible to\n   a Diameter AVP with\
    \ V bit set.  All vendor-specific AVPs described\n   below MUST be encoded using\
    \ the preferred Diameter V bit mechanism;\n   that is, the AVP Code of 26 MUST\
    \ NOT be used to encode vendor-\n   specific AVPs within EAP-TTLS.\n"
- title: 11.2.1.  EAP
  contents:
  - "11.2.1.  EAP\n   When EAP is the tunneled authentication protocol, each tunneled\
    \ EAP\n   packet between the client and TTLS server is encapsulated in an EAP-\n\
    \   Message AVP, prior to tunneling via the TLS record layer.\n   Note that because\
    \ Diameter AVPs are not limited to 253 octets of\n   data, as are RADIUS attributes,\
    \ the RADIUS mechanism of concatenating\n   multiple EAP-Message attributes to\
    \ represent a longer-than-253-octet\n   EAP packet is not appropriate in EAP-TTLS.\
    \  Thus, a tunneled EAP\n   packet within a single EAP-TTLS message MUST be contained\
    \ in a single\n   EAP-Message AVP.\n   The client initiates EAP by tunneling EAP-Response/Identity\
    \ to the\n   TTLS server.  Depending on the requirements specified for the inner\n\
    \   method, the client MAY now place the actual username in this packet;\n   the\
    \ privacy of the user's identity is now guaranteed by the TLS\n   encryption.\
    \  This username is typically a Network Access Identifier\n   (NAI) [RFC4282];\
    \ that is, it is typically in the following format:\n      username@realm\n  \
    \ The @realm portion is optional, and is used to allow the TTLS server\n   to\
    \ forward the EAP packet to the appropriate AAA/H.\n   Note that the client has\
    \ two opportunities to specify realms.  The\n   first, in the initial, untunneled\
    \ EAP-Response/Identity packet prior\n   to starting EAP-TTLS, indicates the realm\
    \ of the TTLS server.  The\n   second, occurring as part of the EAP exchange within\
    \ the EAP-TTLS\n   tunnel, indicates the realm of the client's home network. \
    \ Thus, the\n   access point need only know how to route to the realm of the TTLS\n\
    \   server; the TTLS server is assumed to know how to route to the\n   client's\
    \ home realm.  This serial routing architecture is anticipated\n   to be useful\
    \ in roaming environments, allowing access points or AAA\n   proxies behind access\
    \ points to be configured only with a small\n   number of realms.  (Refer to Section\
    \ 7.3 for additional information\n   distinguishing the untunneled and tunneled\
    \ versions of the EAP-\n   Response/Identity packets.)\n   Note that TTLS processing\
    \ of the initial identity exchange is\n   different from plain EAP.  The state\
    \ machine of TTLS is different.\n   However, it is expected that the server side\
    \ is capable of dealing\n   with client initiation, because even normal EAP protocol\
    \ runs are\n   client-initiated over AAA.  On the client side, there are various\n\
    \   implementation techniques to deal with the differences.  Even a\n   TTLS-unaware\
    \ EAP protocol run could be used, if TTLS makes it appear\n   as if an EAP-Request/Identity\
    \ message was actually received.  This is\n   similar to what authenticators do\
    \ when operating between a client and\n   a AAA server.\n   Upon receipt of the\
    \ tunneled EAP-Response/Identity, the TTLS server\n   forwards it to the AAA/H\
    \ in a RADIUS Access-Request.\n   The AAA/H may immediately respond with an Access-Reject;\
    \ in which\n   case, the TTLS server completes the negotiation by sending an EAP-\n\
    \   Failure to the access point.  This could occur if the AAA/H does not\n   recognize\
    \ the user's identity, or if it does not support EAP.\n   If the AAA/H does recognize\
    \ the user's identity and does support EAP,\n   it responds with an Access-Challenge\
    \ containing an EAP-Request, with\n   the Type and Type-Data fields set according\
    \ to the EAP protocol with\n   which the AAA/H wishes to authenticate the client;\
    \ for example MD5-\n   Challenge, One-Time Password (OTP), or Generic Token Card.\n\
    \   The EAP authentication between client and AAA/H proceeds normally, as\n  \
    \ described in [RFC3748], with the TTLS server acting as a passthrough\n   device.\
    \  Each EAP-Request sent by the AAA/H in an Access-Challenge is\n   tunneled by\
    \ the TTLS server to the client, and each EAP-Response\n   tunneled by the client\
    \ is decrypted and forwarded by the TTLS server\n   to the AAA/H in an Access-Request.\n\
    \   This process continues until the AAA/H issues an Access-Accept or\n   Access-Reject.\n\
    \   Note that EAP-TTLS does not impose special rules on EAP Notification\n   packets;\
    \ such packets MAY be used within a tunneled EAP exchange\n   according to the\
    \ rules specified in [RFC3748].\n   EAP-TTLS provides a reliable transport for\
    \ the tunneled EAP exchange.\n   However, [RFC3748] assumes an unreliable transport\
    \ for EAP messages\n   (see Section 3.1), and provides for silent discard of any\
    \ EAP packet\n   that violates the protocol or fails a method-specific integrity\n\
    \   check, on the assumption that such a packet is likely a counterfeit\n   sent\
    \ by an attacker.  But since the tunnel provides a reliable\n   transport for\
    \ the inner EAP authentication, errors that would result\n   in silent discard\
    \ according to [RFC3748] presumably represent\n   implementation errors when they\
    \ occur within the tunnel, and SHOULD\n   be treated as such in preference to\
    \ being silently discarded.\n   Indeed, silently discarding an EAP message within\
    \ the tunnel\n   effectively puts a halt to the progress of the exchange, and\
    \ will\n   result in long timeouts in cases that ought to result in immediate\n\
    \   failures.\n"
- title: 11.2.2.  CHAP
  contents:
  - "11.2.2.  CHAP\n   The CHAP algorithm is described in [RFC1661]; RADIUS attribute\n\
    \   formats are described in [RFC2865].\n   Both client and TTLS server generate\
    \ 17 octets of challenge material,\n   using the constant string \"ttls challenge\"\
    \ as described above.  These\n   octets are used as follows:\n      CHAP-Challenge\
    \    [16 octets]\n      CHAP Identifier   [1 octet]\n   The client initiates CHAP\
    \ by tunneling User-Name, CHAP-Challenge, and\n   CHAP-Password AVPs to the TTLS\
    \ server.  The CHAP-Challenge value is\n   taken from the challenge material.\
    \  The CHAP-Password consists of\n   CHAP Identifier, taken from the challenge\
    \ material; and CHAP\n   response, computed according to the CHAP algorithm.\n\
    \   Upon receipt of these AVPs from the client, the TTLS server must\n   verify\
    \ that the value of the CHAP-Challenge AVP and the value of the\n   CHAP Identifier\
    \ in the CHAP-Password AVP are equal to the values\n   generated as challenge\
    \ material.  If either item does not match\n   exactly, the TTLS server must reject\
    \ the client.  Otherwise, it\n   forwards the AVPs to the AAA/H in an Access-Request.\n\
    \   The AAA/H will respond with an Access-Accept or Access-Reject.\n"
- title: 11.2.3.  MS-CHAP
  contents:
  - "11.2.3.  MS-CHAP\n   The MS-CHAP algorithm is described in [RFC2433]; RADIUS\
    \ attribute\n   formats are described in [RFC2548].\n   Both client and TTLS server\
    \ generate 9 octets of challenge material,\n   using the constant string \"ttls\
    \ challenge\" as described above.  These\n   octets are used as follows:\n   \
    \   MS-CHAP-Challenge  [8 octets]\n      Ident              [1 octet]\n   The\
    \ client initiates MS-CHAP by tunneling User-Name, MS-CHAP-\n   Challenge and\
    \ MS-CHAP-Response AVPs to the TTLS server.  The MS-\n   CHAP-Challenge value\
    \ is taken from the challenge material.  The MS-\n   CHAP-Response consists of\
    \ Ident, taken from the challenge material;\n   Flags, set according the client\
    \ preferences; and LM-Response and NT-\n   Response, computed according to the\
    \ MS-CHAP algorithm.\n   Upon receipt of these AVPs from the client, the TTLS\
    \ server MUST\n   verify that the value of the MS-CHAP-Challenge AVP and the value\
    \ of\n   the Ident in the client's MS-CHAP-Response AVP are equal to the\n   values\
    \ generated as challenge material.  If either item does not\n   match exactly,\
    \ the TTLS server MUST reject the client.  Otherwise, it\n   forwards the AVPs\
    \ to the AAA/H in an Access-Request.\n   The AAA/H will respond with an Access-Accept\
    \ or Access-Reject.\n"
- title: 11.2.4.  MS-CHAP-V2
  contents:
  - "11.2.4.  MS-CHAP-V2\n   The MS-CHAP-V2 algorithm is described in [RFC2759]; RADIUS\
    \ attribute\n   formats are described in [RFC2548].\n   Both client and TTLS server\
    \ generate 17 octets of challenge material,\n   using the constant string \"ttls\
    \ challenge\" as described above.  These\n   octets are used as follows:\n   \
    \   MS-CHAP-Challenge  [16 octets]\n      Ident              [1 octet]\n   The\
    \ client initiates MS-CHAP-V2 by tunneling User-Name, MS-CHAP-\n   Challenge,\
    \ and MS-CHAP2-Response AVPs to the TTLS server.  The MS-\n   CHAP-Challenge value\
    \ is taken from the challenge material.  The MS-\n   CHAP2-Response consists of\
    \ Ident, taken from the challenge material;\n   Flags, set to 0; Peer-Challenge,\
    \ set to a random value; and Response,\n   computed according to the MS-CHAP-V2\
    \ algorithm.\n   Upon receipt of these AVPs from the client, the TTLS server MUST\n\
    \   verify that the value of the MS-CHAP-Challenge AVP and the value of\n   the\
    \ Ident in the client's MS-CHAP2-Response AVP are equal to the\n   values generated\
    \ as challenge material.  If either item does not\n   match exactly, the TTLS\
    \ server MUST reject the client.  Otherwise, it\n   forwards the AVPs to the AAA/H\
    \ in an Access-Request.\n   If the authentication is successful, the AAA/H will\
    \ respond with an\n   Access-Accept containing the MS-CHAP2-Success attribute.\
    \  This\n   attribute contains a 42-octet string that authenticates the AAA/H\
    \ to\n   the client based on the Peer-Challenge.  The TTLS server tunnels this\n\
    \   AVP to the client.  Note that the authentication is not yet complete;\n  \
    \ the client must still accept the authentication response of the\n   AAA/H.\n\
    \   Upon receipt of the MS-CHAP2-Success AVP, the client is able to\n   authenticate\
    \ the AAA/H.  If the authentication succeeds, the client\n   sends an EAP-TTLS\
    \ packet to the TTLS server containing no data (that\n   is, with a zero-length\
    \ Data field).  Upon receipt of the empty EAP-\n   TTLS packet from the client,\
    \ the TTLS server considers the MS-CHAP-\n   V2 authentication to have succeeded.\n\
    \   If the authentication fails, the AAA/H will respond with an Access-\n   Challenge\
    \ containing the MS-CHAP-Error attribute.  This attribute\n   contains a new Ident\
    \ and a string with additional information such as\n   the error reason and whether\
    \ a retry is allowed.  The TTLS server\n   tunnels this AVP to the client.  If\
    \ the error reason is an expired\n   password and a retry is allowed, the client\
    \ may proceed to change the\n   user's password.  If the error reason is not an\
    \ expired password or\n   if the client does not wish to change the user's password,\
    \ it simply\n   abandons the EAP-TTLS negotiation.\n   If the client does wish\
    \ to change the password, it tunnels MS-CHAP-\n   NT-Enc-PW, MS-CHAP2-CPW, and\
    \ MS-CHAP-Challenge AVPs to the TTLS\n   server.  The MS-CHAP2-CPW AVP is derived\
    \ from the new Ident and\n   Challenge received in the MS-CHAP-Error AVP.  The\
    \ MS-CHAP-Challenge\n   AVP simply echoes the new Challenge.\n   Upon receipt\
    \ of these AVPs from the client, the TTLS server MUST\n   verify that the value\
    \ of the MS-CHAP-Challenge AVP and the value of\n   the Ident in the client's\
    \ MS-CHAP2-CPW AVP match the values it sent\n   in the MS-CHAP-Error AVP.  If\
    \ either item does not match exactly, the\n   TTLS server MUST reject the client.\
    \  Otherwise, it forwards the AVPs\n   to the AAA/H in an Access-Request.\n  \
    \ If the authentication is successful, the AAA/H will respond with an\n   Access-Accept\
    \ containing the MS-CHAP2-Success attribute.  At this\n   point, the negotiation\
    \ proceeds as described above; the TTLS server\n   tunnels the MS-CHAP2-Success\
    \ to the client, and the client\n   authenticates the AAA/H based on this AVP.\
    \  Then, the client either\n   abandons the negotiation on failure or sends an\
    \ EAP-TTLS packet to\n   the TTLS server containing no data (that is, with a zero-length\
    \ Data\n   field), causing the TTLS server to consider the MS-CHAP-V2\n   authentication\
    \ to have succeeded.\n   Note that additional AVPs associated with MS-CHAP-V2\
    \ may be sent by\n   the AAA/H; for example, MS-CHAP-Domain.  The TTLS server\
    \ MUST tunnel\n   such authentication-related attributes along with the MS-CHAP2-\n\
    \   Success.\n"
- title: 11.2.5.  PAP
  contents:
  - "11.2.5.  PAP\n   The client initiates PAP by tunneling User-Name and User-Password\n\
    \   AVPs to the TTLS server.\n   Normally, in RADIUS, User-Password is padded\
    \ with nulls to a multiple\n   of 16 octets, then encrypted using a shared secret\
    \ and other packet\n   information.\n   An EAP-TTLS client, however, does not\
    \ RADIUS-encrypt the password\n   since no such RADIUS variables are available;\
    \ this is not a security\n   weakness since the password will be encrypted via\
    \ TLS anyway.  The\n   client SHOULD, however, null-pad the password to a multiple\
    \ of 16\n   octets, to obfuscate its length.\n   Upon receipt of these AVPs from\
    \ the client, the TTLS server forwards\n   them to the AAA/H in a RADIUS Access-Request.\
    \  (Note that in the\n   Access-Request, the TTLS server must encrypt the User-Password\n\
    \   attribute using the shared secret between the TTLS server and AAA/H.)\n  \
    \ The AAA/H may immediately respond with an Access-Accept or Access-\n   Reject.\
    \  The TTLS server then completes the negotiation by sending an\n   EAP-Success\
    \ or EAP-Failure to the access point using the AAA carrier\n   protocol.\n   The\
    \ AAA/H may also respond with an Access-Challenge.  The TTLS server\n   then tunnels\
    \ the AVPs from the AAA/H's challenge to the client.  Upon\n   receipt of these\
    \ AVPs, the client tunnels User-Name and User-\n   Password again, with User-Password\
    \ containing new information in\n   response to the challenge.  This process continues\
    \ until the AAA/H\n   issues an Access-Accept or Access-Reject.\n   At least one\
    \ of the AVPs tunneled to the client upon challenge MUST\n   be Reply-Message.\
    \  Normally, this is sent by the AAA/H as part of the\n   challenge.  However,\
    \ if the AAA/H has not sent a Reply-Message, the\n   TTLS server MUST issue one,\
    \ with null value.  This allows the client\n   to determine that a challenge response\
    \ is required.\n   Note that if the AAA/H includes a Reply-Message as part of\
    \ an\n   Access-Accept or Access-Reject, the TTLS server does not tunnel this\n\
    \   AVP to the client.  Rather, this AVP and all other AVPs sent by the\n   AAA/H\
    \ as part of Access-Accept or Access-Reject are sent to the\n   access point via\
    \ the AAA carrier protocol.\n"
- title: 11.3.  Performing Multiple Authentications
  contents:
  - "11.3.  Performing Multiple Authentications\n   In some cases, it is desirable\
    \ to perform multiple user\n   authentications.  For example, a AAA/H may want\
    \ first to authenticate\n   the user by password, then by token card.\n   The\
    \ AAA/H may perform any number of additional user authentications\n   using EAP,\
    \ simply by issuing a EAP-Request with a new EAP type once\n   the previous authentication\
    \ completes.  Note that each new EAP method\n   is subject to negotiation; that\
    \ is, the client may respond to the EAP\n   request for a new EAP type with an\
    \ EAP-Nak, as described in\n   [RFC3748].\n   For example, a AAA/H wishing to\
    \ perform an MD5-Challenge followed by\n   Generic Token Card would first issue\
    \ an EAP-Request/MD5-Challenge and\n   receive a response.  If the response is\
    \ satisfactory, it would then\n   issue an EAP-Request/Generic Token Card and\
    \ receive a response.  If\n   that response were also satisfactory, it would accept\
    \ the user.\n   The entire inner EAP exchange comprising multiple authentications\
    \ is\n   considered a single EAP sequence, in that each subsequent request\n \
    \  MUST contain distinct a EAP Identifier from the previous request,\n   even\
    \ as one authentication completes and another begins.\n   The peer identity indicated\
    \ in the original EAP-Response/Identity\n   that initiated the EAP sequence is\
    \ intended to apply to each of the\n   sequential authentications.  In the absence\
    \ of an application profile\n   standard specifying otherwise, additional EAP-Identity\
    \ exchanges\n   SHOULD NOT occur.\n   The conditions for overall success or failure\
    \ when multiple\n   authentications are used are a matter of policy on client\
    \ and server;\n   thus, either party may require that all inner authentications\n\
    \   succeed, or that at least one inner authentication succeed, as a\n   condition\
    \ for success of the overall authentication.\n   Each EAP method is intended to\
    \ run to completion.  Should the TTLS\n   server abandon a method and start a\
    \ new one, client behavior is not\n   defined in this document and is a matter\
    \ of client policy.\n   Note that it is not always feasible to use the same EAP\
    \ method twice\n   in a row, since it may not be possible to determine when the\
    \ first\n   authentication completes and the new authentication begins if the\
    \ EAP\n   type does not change.  Certain EAP methods, such as EAP-TLS, use a\n\
    \   Start bit to distinguish the first request, thus allowing each new\n   authentication\
    \ using that type to be distinguished from the previous.\n   Other methods, such\
    \ as EAP-MS-CHAP-V2, terminate in a well-defined\n   manner, allowing a second\
    \ authentication of the same type to commence\n   unambiguously.  While use of\
    \ the same EAP method for multiple\n   authentications is relatively unlikely,\
    \ implementers should be aware\n   of the issues and avoid cases that would result\
    \ in ambiguity.\n   Multiple authentications using non-EAP methods or a mixture\
    \ of EAP\n   and non-EAP methods is not defined in this document, nor is it known\n\
    \   whether such an approach has been implemented.\n"
- title: 11.4.  Mandatory Tunneled Authentication Support
  contents:
  - "11.4.  Mandatory Tunneled Authentication Support\n   To ensure interoperability,\
    \ in the absence of an application profile\n   standard specifying otherwise,\
    \ an implementation compliant with this\n   specification MUST implement EAP as\
    \ a tunneled authentication method\n   and MUST implement MD5-Challenge as an\
    \ EAP type.  However, such an\n   implementation MAY allow the use of EAP, any\
    \ EAP type, or any other\n   tunneled authentication method to be enabled or disabled\
    \ by\n   administrative action on either client or TTLS server.\n   In addition,\
    \ in the absence of an application profile standard\n   specifying otherwise,\
    \ an implementation compliant with this\n   specification MUST allow an administrator\
    \ to configure the use of\n   tunneled authentication without the M (Mandatory)\
    \ bit set on any AVP.\n"
- title: 11.5.  Additional Suggested Tunneled Authentication Support
  contents:
  - "11.5.  Additional Suggested Tunneled Authentication Support\n   The following\
    \ information is provided as non-normative guidance based\n   on the experience\
    \ of the authors and reviewers of this specification\n   with existing implementations\
    \ of EAP-TTLSv0.\n   The following authentication methods are commonly used, and\
    \ servers\n   wishing for broad interoperability across multiple media should\n\
    \   consider implementing them:\n   -  PAP (both for password and token authentication)\n\
    \   -  MS-CHAP-V2\n   -  EAP-MS-CHAP-V2\n   -  EAP-GTC\n"
- title: 12.  Keying Framework
  contents:
  - "12.  Keying Framework\n   In compliance with [RFC5247], Session-Id, Peer-Id,\
    \ and Server-Id are\n   here defined.\n"
- title: 12.1.  Session-Id
  contents:
  - "12.1.  Session-Id\n   The Session-Id uniquely identifies an authentication exchange\
    \ between\n   the client and TTLS server.  It is defined as follows:\n      Session-Id\
    \ = 0x15 || client.random || server.random\n"
- title: 12.2.  Peer-Id
  contents:
  - "12.2.  Peer-Id\n   The Peer-Id represents the identity to be used for access\
    \ control and\n   accounting purposes.  When the client presents a certificate\
    \ as part\n   of the TLS handshake, the Peer-Id is determined based on information\n\
    \   in the certificate, as specified in Section 5.2 of [RFC5216].\n   Otherwise,\
    \ the Peer-Id is null.\n"
- title: 12.3.  Server-Id
  contents:
  - "12.3.  Server-Id\n   The Server-Id identifies the TTLS server.  When the TTLS\
    \ server\n   presents a certificate as part of the TLS handshake, the Server-Id\
    \ is\n   determined based on information in the certificate, as specified in\n\
    \   Section 5.2 of [RFC5216].  Otherwise, the Server-Id is null.\n"
- title: 13.  AVP Summary
  contents:
  - "13.  AVP Summary\n   The following table lists each AVP defined in this document,\
    \ whether\n   the AVP may appear in a packet from server to client (\"Request\"\
    )\n   and/or in a packet from client to server (\"Response\"), and whether\n \
    \  the AVP MUST be implemented (\"MI\").\n   Name              Request  Response\
    \    MI\n   ---------------------------------------------------\n   User-Name\
    \                     X\n   User-Password                 X\n   CHAP-Password\
    \                 X\n   Reply-Message        X\n   CHAP-Challenge            \
    \    X\n   EAP-Message          X        X         X\n   MS-CHAP-Response    \
    \          X\n   MS-CHAP-Error        X\n   MS-CHAP-NT-Enc-PW             X\n\
    \   MS-CHAP-Domain       X\n   MS-CHAP-Challenge             X\n   MS-CHAP2-Response\
    \             X\n   MS-CHAP2-Success     X\n   MS-CHAP2-CPW                  X\n"
- title: 14.  Security Considerations
  contents:
  - '14.  Security Considerations

    '
- title: 14.1.  Security Claims
  contents:
  - "14.1.  Security Claims\n   Pursuant to RFC 3748, security claims for EAP-TTLSv0\
    \ are as follows:\n   Authentication mechanism: TLS plus arbitrary additional\
    \ protected\n                              authentication(s)\n   Ciphersuite negotiation:\
    \  Yes\n   Mutual authentication:    Yes, in recommended implementation\n   Integrity\
    \ protection:     Yes\n   Replay protection:        Yes\n   Confidentiality: \
    \         Yes\n   Key derivation:           Yes\n   Key strength:            \
    \ Up to 384 bits\n   Dictionary attack prot.:  Yes\n   Fast reconnect:       \
    \    Yes\n   Cryptographic binding:    No\n   Session independence:     Yes\n\
    \   Fragmentation:            Yes\n   Channel binding:          No\n"
- title: 14.1.1.  Authentication Mechanism
  contents:
  - "14.1.1.  Authentication Mechanism\n   EAP-TTLSv0 utilizes negotiated underlying\
    \ authentication protocols,\n   both in the phase 1 TLS handshake and the phase\
    \ 2 tunneled\n   authentication.  In a typical deployment, at a minimum the TTLS\n\
    \   server authenticates to the client in phase 1, and the client\n   authenticates\
    \ to the AAA/H server in phase 2.  Phase 1 authentication\n   of the TTLS server\
    \ to the client is typically by certificate; the\n   client may optionally authenticate\
    \ to the TTLS server by certificate\n   as well.  Phase 2 authentication of the\
    \ client to the AAA/H server is\n   typically by password or security token via\
    \ an EAP or supported non-\n   EAP authentication mechanism; this authentication\
    \ mechanism may\n   provide authentication of the AAA/H server to the client as\
    \ well\n   (mutual authentication).\n"
- title: 14.1.2.  Ciphersuite Negotiation
  contents:
  - "14.1.2.  Ciphersuite Negotiation\n   Ciphersuite negotiation is inherited from\
    \ TLS.\n"
- title: 14.1.3.  Mutual Authentication
  contents:
  - "14.1.3.  Mutual Authentication\n   In the recommended minimum configuration,\
    \ the TTLS server is\n   authenticated to the client in phase 1, and the client\
    \ and AAA/H\n   server mutually authenticate in phase 2.\n"
- title: 14.1.4.  Integrity Protection
  contents:
  - "14.1.4.  Integrity Protection\n   Integrity protection is inherited from TLS.\n"
- title: 14.1.5.  Replay Protection
  contents:
  - "14.1.5.  Replay Protection\n   Replay protection is inherited from TLS.\n"
- title: 14.1.6.  Confidentiality
  contents:
  - "14.1.6.  Confidentiality\n   Confidentiality is inherited from TLS.  Note, however,\
    \ that EAP-\n   TTLSv0 contains no provision for encryption of success or failure\
    \ EAP\n   packets.\n"
- title: 14.1.7.  Key Derivation
  contents:
  - "14.1.7.  Key Derivation\n   Both MSK and EMSK are derived.  The key derivation\
    \ PRF is inherited\n   from TLS, and cryptographic agility of this mechanism depends\
    \ on the\n   cryptographic agility of the TLS PRF.\n"
- title: 14.1.8.  Key Strength
  contents:
  - "14.1.8.  Key Strength\n   Key strength is limited by the size of the TLS master\
    \ secret, which\n   for versions 1.0 and 1.1 is 48 octets (384 bits).  Effective\
    \ key\n   strength may be less, depending on the attack resistance of the\n  \
    \ negotiated Diffie-Helman (DH) group, certificate RSA/DSA group, etc.\n   BCP\
    \ 86 [RFC3766], Section 5, offers advice on the required RSA or DH\n   module\
    \ and DSA subgroup size in bits, for a given level of attack\n   resistance in\
    \ bits.  For example, a 2048-bit RSA key is recommended\n   to provide 128-bit\
    \ equivalent key strength.  The National Institute\n   for Standards and Technology\
    \ (NIST) also offers advice on appropriate\n   key sizes in [SP800-57].\n"
- title: 14.1.9.  Dictionary Attack Protection
  contents:
  - "14.1.9.  Dictionary Attack Protection\n   Phase 2 password authentication is\
    \ protected against eavesdropping\n   and therefore against offline dictionary\
    \ attack by TLS encryption.\n"
- title: 14.1.10.  Fast Reconnect
  contents:
  - "14.1.10.  Fast Reconnect\n   Fast reconnect is provided by TLS session resumption.\n"
- title: 14.1.11.  Cryptographic Binding
  contents:
  - "14.1.11.  Cryptographic Binding\n   [MITM] describes a vulnerability that is\
    \ characteristic of tunneled\n   authentication protocols, in which an attacker\
    \ authenticates as a\n   client via a tunneled protocol by posing as an authenticator\
    \ to a\n   legitimate client using a non-tunneled protocol.  When the same proof\n\
    \   of credentials can be used in both authentications, the attacker\n   merely\
    \ shuttles the credential proof between them.  EAP-TTLSv0 is\n   vulnerable to\
    \ such an attack.  Care should be taken to avoid using\n   authentication protocols\
    \ and associated credentials both as inner\n   TTLSv0 methods and as untunneled\
    \ methods.\n   Extensions to EAP-TTLSv0 or a future version of EAP-TTLS should\
    \ be\n   defined to perform a cryptographic binding of keying material\n   generated\
    \ by inner authentication methods and the keying material\n   generated by the\
    \ TLS handshake.  This avoids the man-in-the-middle\n   problem when used with\
    \ key-generating inner methods.  Such an\n   extension mechanism has been proposed\
    \ [TTLS-EXT].\n"
- title: 14.1.12.  Session Independence
  contents:
  - "14.1.12.  Session Independence\n   TLS guarantees the session independence of\
    \ its master secret, from\n   which the EAP-TTLSv0 MSK/EMSK is derived.\n"
- title: 14.1.13.  Fragmentation
  contents:
  - "14.1.13.  Fragmentation\n   Provision is made for fragmentation of lengthy EAP\
    \ packets.\n"
- title: 14.1.14.  Channel Binding
  contents:
  - "14.1.14.  Channel Binding\n   Support for channel binding may be added as a future\
    \ extension, using\n   appropriate AVPs.\n"
- title: 14.2.  Client Anonymity
  contents:
  - "14.2.  Client Anonymity\n   Unlike other EAP methods, EAP-TTLS does not communicate\
    \ a username in\n   the clear in the initial EAP-Response/Identity.  This feature\
    \ is\n   designed to support anonymity and location privacy from attackers\n \
    \  eavesdropping the network path between the client and the TTLS\n   server.\
    \  However, implementers should be aware that other factors --\n   both within\
    \ EAP-TTLS and elsewhere -- may compromise a user's\n   identity.  For example,\
    \ if a user authenticates with a certificate\n   during phase 1 of EAP-TTLS, the\
    \ subject name in the certificate may\n   reveal the user's identity.  Outside\
    \ of EAP-TTLS, the client's fixed\n   MAC address, or in the case of wireless\
    \ connections, the client's\n   radio signature, may also reveal information.\
    \  Additionally,\n   implementers should be aware that a user's identity is not\
    \ hidden\n   from the EAP-TTLS server and may be included in the clear in AAA\n\
    \   messages between the access point, the EAP-TTLS server, and the AAA/H\n  \
    \ server.\n   Note that if a client authenticating with a certificate wishes to\n\
    \   shield its certificate, and hence its identity, from eavesdroppers,\n   it\
    \ may use the technique described in Section 2.1.4 (\"Privacy\") of\n   [RFC5216],\
    \ in which the client sends an empty certificate list, the\n   TTLS server issues\
    \ a ServerHello upon completion of the TLS handshake\n   to begin a second, encrypted\
    \ handshake, during which the client will\n   send its certificate list.  Note\
    \ that for this feature to work the\n   client must know in advance that the TTLS\
    \ server supports it.\n"
- title: 14.3.  Server Trust
  contents:
  - "14.3.  Server Trust\n   Trust of the server by the client is established via\
    \ a server\n   certificate conveyed during the TLS handshake.  The client should\n\
    \   have a means of determining which server identities are authorized to\n  \
    \ act as a TTLS server and may be trusted, and should refuse to\n   authenticate\
    \ with servers it does not trust.  The consequence of\n   pursuing authentication\
    \ with a hostile server is exposure of the\n   inner authentication to attack;\
    \ e.g., offline dictionary attack\n   against the client password.\n"
- title: 14.4.  Certificate Validation
  contents:
  - "14.4.  Certificate Validation\n   When either client or server presents a certificate\
    \ as part of the\n   TLS handshake, it should include the entire certificate chain\
    \ minus\n   the root to facilitate certificate validation by the other party.\n\
    \   When either client or server receives a certificate as part of the\n   TLS\
    \ handshake, it should validate the certification path to a trusted\n   root.\
    \  If intermediate certificates are not provided by the sender,\n   the receiver\
    \ may use cached or pre-configured copies if available, or\n   may retrieve them\
    \ from the Internet if feasible.\n   Clients and servers should implement policies\
    \ related to the Extended\n   Key Usage (EKU) extension [RFC5280] of certificates\
    \ it receives, to\n   ensure that the other party's certificate usage conforms\
    \ to the\n   certificate's purpose.  Typically, a client EKU, when present, would\n\
    \   be expected to include id-kp-clientAuth; a server EKU, when present,\n   would\
    \ be expected to include id-kp-serverAuth.  Note that absence of\n   the EKU extension\
    \ or a value of anyExtendedKeyUsage implies absence\n   of constraint on the certificate's\
    \ purpose.\n"
- title: 14.5.  Certificate Compromise
  contents:
  - "14.5.  Certificate Compromise\n   Certificates should be checked for revocation\
    \ to reduce exposure to\n   imposture using compromised certificates.\n   Checking\
    \ a server certificate against the most recent revocation list\n   during authentication\
    \ is not always possible for a client, as it may\n   not have network access until\
    \ completion of the authentication.  This\n   problem can be alleviated through\
    \ the use of the Online Certificate\n   Status Protocol (OCSP) [RFC2560] during\
    \ the TLS handshake, as\n   described in [RFC4366].\n"
- title: 14.6.  Forward Secrecy
  contents:
  - "14.6.  Forward Secrecy\n   With forward secrecy, revelation of a secret does\
    \ not compromise\n   session keys previously negotiated based on that secret.\
    \  Thus, when\n   the TLS key exchange algorithm provides forward secrecy, if\
    \ a TTLS\n   server certificate's private key is eventually stolen or cracked,\n\
    \   tunneled user password information will remain secure as long as that\n  \
    \ certificate is no longer in use.  Diffie-Hellman key exchange is an\n   example\
    \ of an algorithm that provides forward secrecy.  A forward\n   secrecy algorithm\
    \ should be considered if attacks against recorded\n   authentication or data\
    \ sessions are considered to pose a significant\n   threat.\n"
- title: 14.7.  Negotiating-Down Attacks
  contents:
  - "14.7.  Negotiating-Down Attacks\n   EAP-TTLS negotiates its own protocol version\
    \ prior to, and therefore\n   outside the security established by the TLS tunnel.\
    \  In principle,\n   therefore, it is subject to a negotiating-down attack, in\
    \ which an\n   intermediary modifies messages in transit to cause a lower version\
    \ of\n   the protocol to be agreed upon, each party assuming that the other\n\
    \   does not support as high a version as it actually does.\n   The version of\
    \ the EAP-TTLS protocol described in this document is 0,\n   and is therefore\
    \ not subject to such an attack.  However, any new\n   version of the protocol\
    \ using a higher number than 0 should define a\n   mechanism to ensure against\
    \ such an attack.  One such mechanism might\n   be the TTLS server's reiteration\
    \ of the protocol version that it\n   proposed in an AVP within the tunnel, such\
    \ AVP to be inserted with M\n   bit clear even when version 0 is agreed upon.\n"
- title: 15.  Message Sequences
  contents:
  - "15.  Message Sequences\n   This section presents EAP-TTLS message sequences for\
    \ various\n   negotiation scenarios.  These examples do not attempt to exhaustively\n\
    \   depict all possible scenarios.\n   It is assumed that RADIUS is the AAA carrier\
    \ protocol both between\n   access point and TTLS server, and between TTLS server\
    \ and AAA/H.\n   EAP packets that are passed unmodified between client and TTLS\
    \ server\n   by the access point are indicated as \"passthrough\".  AVPs that\
    \ are\n   securely tunneled within the TLS record layer are enclosed in curly\n\
    \   braces ({}).  Items that are optional are suffixed with question mark\n  \
    \ (?).  Items that may appear multiple times are suffixed with plus\n   sign (+).\n"
- title: 15.1.  Successful Authentication via Tunneled CHAP
  contents:
  - "15.1.  Successful Authentication via Tunneled CHAP\n   In this example, the client\
    \ performs one-way TLS authentication of\n   the TTLS server.  CHAP is used as\
    \ a tunneled user authentication\n   mechanism.\n   client          access point\
    \           TTLS server             AAA/H\n   ------          ------------   \
    \        -----------             -----\n     EAP-Request/Identity\n     <--------------------\n\
    \     EAP-Response/Identity\n     -------------------->\n                    \
    \       RADIUS Access-Request:\n                             EAP-Response passthrough\n\
    \                           -------------------->\n                          \
    \ RADIUS Access-Challenge:\n                             EAP-Request/TTLS-Start\n\
    \                           <--------------------\n     EAP-Request passthrough\n\
    \     <--------------------\n     EAP-Response/TTLS:\n       ClientHello\n   \
    \  -------------------->\n                           RADIUS Access-Request:\n\
    \                             EAP-Response passthrough\n                     \
    \      -------------------->\n                           RADIUS Access-Challenge:\n\
    \                             EAP-Request/TTLS:\n                            \
    \   ServerHello\n                               Certificate\n                \
    \               ServerKeyExchange\n                               ServerHelloDone\n\
    \                           <--------------------\n     EAP-Request passthrough\n\
    \     <--------------------\n     EAP-Response/TTLS:\n       ClientKeyExchange\n\
    \       ChangeCipherSpec\n       Finished\n     -------------------->\n      \
    \                     RADIUS Access-Request:\n                             EAP-Response\
    \ passthrough\n                           -------------------->\n            \
    \               RADIUS Access-Challenge:\n                             EAP-Request/TTLS:\n\
    \                               ChangeCipherSpec\n                           \
    \    Finished\n                           <--------------------\n     EAP-Request\
    \ passthrough\n     <--------------------\n     EAP-Response/TTLS:\n       {User-Name}\n\
    \       {CHAP-Challenge}\n       {CHAP-Password}\n     -------------------->\n\
    \                           RADIUS Access-Request:\n                         \
    \    EAP-Response passthrough\n                           -------------------->\n\
    \                                             RADIUS Access-Request:\n       \
    \                                        User-Name\n                         \
    \                      CHAP-Challenge\n                                      \
    \         CHAP-Password\n                                             -------------------->\n\
    \                                             RADIUS Access-Accept\n         \
    \                                    <--------------------\n                 \
    \          RADIUS Access-Accept:\n                             EAP-Success\n \
    \                          <--------------------\n     EAP-Success\n     <--------------------\n"
- title: 15.2.  Successful Authentication via Tunneled EAP/MD5-Challenge
  contents:
  - "15.2.  Successful Authentication via Tunneled EAP/MD5-Challenge\n   In this example,\
    \ the client performs one-way TLS authentication of\n   the TTLS server and EAP/MD5-Challenge\
    \ is used as a tunneled user\n   authentication mechanism.\n   client        \
    \  access point           TTLS server             AAA/H\n   ------          ------------\
    \           -----------             -----\n     EAP-Request/Identity\n     <--------------------\n\
    \     EAP-Response/Identity\n     -------------------->\n                    \
    \       RADIUS Access-Request:\n                             EAP-Response passthrough\n\
    \                           -------------------->\n                          \
    \ RADIUS Access-Challenge:\n                             EAP-Request/TTLS-Start\n\
    \                           <--------------------\n     EAP-Request passthrough\n\
    \     <--------------------\n     EAP-Response/TTLS:\n       ClientHello\n   \
    \  -------------------->\n                           RADIUS Access-Request:\n\
    \                             EAP-Response passthrough\n                     \
    \      -------------------->\n                           RADIUS Access-Challenge:\n\
    \                             EAP-Request/TTLS:\n                            \
    \   ServerHello\n                               Certificate\n                \
    \               ServerKeyExchange\n                               ServerHelloDone\n\
    \                           <--------------------\n     EAP-Request passthrough\n\
    \     <--------------------\n     EAP-Response/TTLS:\n       ClientKeyExchange\n\
    \       ChangeCipherSpec\n       Finished\n     -------------------->\n      \
    \                     RADIUS Access-Request:\n                             EAP-Response\
    \ passthrough\n                           -------------------->\n            \
    \               RADIUS Access-Challenge:\n                             EAP-Request/TTLS:\n\
    \                               ChangeCipherSpec\n                           \
    \    Finished\n                           <--------------------\n     EAP-Request\
    \ passthrough\n     <--------------------\n     EAP-Response/TTLS:\n       {EAP-Response/Identity}\n\
    \     -------------------->\n                           RADIUS Access-Request:\n\
    \                             EAP-Response passthrough\n                     \
    \      -------------------->\n                                             RADIUS\
    \ Access-Request:\n                                               EAP-Response/Identity\n\
    \                                             -------------------->\n        \
    \                                     RADIUS Access-Challenge\n              \
    \                                 EAP-Request/\n                             \
    \                      MD5-Challenge\n                                       \
    \      <--------------------\n                           RADIUS Access-Challenge:\n\
    \                             EAP-Request/TTLS:\n                            \
    \   {EAP-Request/MD5-Challenge}\n                           <--------------------\n\
    \     EAP-Request passthrough\n     <--------------------\n     EAP-Response/TTLS:\n\
    \       {EAP-Response/MD5-Challenge}\n     -------------------->\n           \
    \                RADIUS Access-Request:\n                             EAP-Response\
    \ passthrough\n                           -------------------->\n            \
    \                                 RADIUS Access-Challenge\n                  \
    \                             EAP-Response/\n                                \
    \                   MD5-Challenge\n                                          \
    \   -------------------->\n                                             RADIUS\
    \ Access-Accept\n                                             <--------------------\n\
    \                           RADIUS Access-Accept:\n                          \
    \   EAP-Success\n                           <--------------------\n     EAP-Success\n\
    \     <--------------------\n"
- title: 15.3.  Successful Session Resumption
  contents:
  - "15.3.  Successful Session Resumption\n   In this example, the client and server\
    \ resume a previous TLS session.\n   The ID of the session to be resumed is sent\
    \ as part of the\n   ClientHello, and the server agrees to resume this session\
    \ by sending\n   the same session ID as part of ServerHello.\n   client      \
    \    access point           TTLS server             AAA/H\n   ------         \
    \ ------------           -----------             -----\n     EAP-Request/Identity\n\
    \     <--------------------\n     EAP-Response/Identity\n     -------------------->\n\
    \                           RADIUS Access-Request:\n                         \
    \    EAP-Response passthrough\n                           -------------------->\n\
    \                           RADIUS Access-Challenge:\n                       \
    \      EAP-Request/TTLS-Start\n                           <--------------------\n\
    \     EAP-Request passthrough\n     <--------------------\n     EAP-Response/TTLS:\n\
    \       ClientHello\n     -------------------->\n                           RADIUS\
    \ Access-Request:\n                             EAP-Response passthrough\n   \
    \                        -------------------->\n                           RADIUS\
    \ Access-Challenge:\n                             EAP-Request/TTLS:\n        \
    \                       ServerHello\n                               ChangeCipherSpec\n\
    \                               Finished\n                           <--------------------\n\
    \     EAP-Request passthrough\n     <--------------------\n     EAP-Response/TTLS:\n\
    \       ChangeCipherSpec\n       Finished\n     -------------------->\n      \
    \                     RADIUS Access-Request:\n                             EAP-Response\
    \ passthrough\n                           -------------------->\n            \
    \               RADIUS Access-Accept:\n                             EAP-Success\n\
    \                           <--------------------\n     EAP-Success\n     <--------------------\n"
- title: 16.  IANA Considerations
  contents:
  - "16.  IANA Considerations\n   IANA has assigned the number 21 (decimal) as the\
    \ method type of the\n   EAP-TTLS protocol.  Mechanisms for defining new RADIUS\
    \ and Diameter\n   AVPs and AVP values are outlined in [RFC2865] and [RFC3588],\n\
    \   respectively.  No additional IANA registrations are specifically\n   contemplated\
    \ in this document.\n   Section 11 of this document specifies how certain authentication\n\
    \   mechanisms may be performed within the secure tunnel established by\n   EAP-TTLS.\
    \  New mechanisms and other functions MAY also be performed\n   within this tunnel.\
    \  Where such extensions use AVPs that are not\n   vendor-specific, their semantics\
    \ must be specified in new RFCs; that\n   is, there are TTLS-specific processing\
    \ rules related to the use of\n   each individual AVP, even though such AVPs have\
    \ already been defined\n   for RADIUS or DIAMETER.\n   This specification requires\
    \ the creation of a new registry -- EAP-\n   TTLS AVP Usage -- to be managed by\
    \ IANA, listing each non-vendor-\n   specific RADIUS/Diameter AVP that has been\
    \ defined for use within\n   EAP-TTLS, along with a reference to the RFC or other\
    \ document that\n   specifies its semantics.  The initial list of AVPs shall be\
    \ those\n   listed in Section 13 of this document.  The purpose of this registry\n\
    \   is to avoid potential ambiguity resulting from the same AVP being\n   utilized\
    \ in different functional contexts.  This registry does not\n   assign numbers\
    \ to AVPs, as the AVP numbers are assigned out of the\n   RADIUS and Diameter\
    \ namespaces as outlined in [RFC2865] and\n   [RFC3588].  Only top-level AVPs\
    \ -- that is, AVPs not encapsulated\n   within Grouped AVPs -- will be registered.\
    \  AVPs should be added to\n   this registry based on IETF Review as defined in\
    \ [RFC5226].\n"
- title: 17.  Acknowledgements
  contents:
  - "17.  Acknowledgements\n   Thanks to Bernard Aboba, Jari Arkko, Lakshminath Dondeti,\
    \ Stephen\n   Hanna, Ryan Hurst, Avi Lior, and Gabriel Montenegro for careful\n\
    \   reviews and useful comments.\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [RFC1661]   Simpson, W., Ed., \"The Point-to-Point\
    \ Protocol (PPP)\",\n               STD 51, RFC 1661, July 1994.\n   [RFC2119]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2246]   Dierks, T. and C. Allen,\
    \ \"The TLS Protocol Version 1.0\",\n               RFC 2246, January 1999.\n\
    \   [RFC2433]   Zorn, G. and S. Cobb, \"Microsoft PPP CHAP Extensions\",\n   \
    \            RFC 2433, October 1998.\n   [RFC5226]   Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n               IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n               May 2008.\n   [RFC2548]   Zorn, G., \"Microsoft\
    \ Vendor-specific RADIUS Attributes\",\n               RFC 2548, March 1999.\n\
    \   [RFC2759]   Zorn, G., \"Microsoft PPP CHAP Extensions, Version 2\", RFC\n\
    \               2759, January 2000.\n   [RFC2865]   Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n               \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n               RFC 2865, June 2000.\n   [RFC3232]   Reynolds, J.,\
    \ Ed., \"Assigned Numbers: RFC 1700 is\n               Replaced by an On-line\
    \ Database\", RFC 3232, January 2002.\n   [RFC3588]   Calhoun, P., Loughney, J.,\
    \ Guttman, E., Zorn, G., and J.\n               Arkko, \"Diameter Base Protocol\"\
    , RFC 3588, September\n               2003.\n   [RFC3748]   Aboba, B., Blunk,\
    \ L., Vollbrecht, J., Carlson, J., and H.\n               Levkowetz, Ed., \"Extensible\
    \ Authentication Protocol\n               (EAP)\", RFC 3748, June 2004.\n   [RFC4282]\
    \   Aboba, B., Beadles, M., Arkko, J. and P. Eronen, \"The\n               Network\
    \ Access Identifier\", RFC 4282, December 2005.\n   [RFC4346]   Dierks, T. and\
    \ E. Rescorla, \"The Transport Layer Security\n               (TLS) Protocol Version\
    \ 1.1\", RFC 4346, April 2006.\n   [RFC5216]   Simon, D., Aboba, B., and R. Hurst,\
    \ \"The EAP-TLS\n               Authentication Protocol\", RFC 5216, March 2008.\n\
    \   [RFC5247]   Aboba, B., Simon, D., and P. Eronen, \"Extensible\n          \
    \     Authentication Protocol (EAP) Key Management Framework\",\n            \
    \   RFC 5247, August 2008.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [802.1X]    Institute of Electrical and Electronics\
    \ Engineers, \"Local\n               and Metropolitan Area Networks: Port-Based\
    \ Network Access\n               Control\", IEEE Standard 802.1X-2004, December\
    \ 2004.\n   [802.11]    Institute of Electrical and Electronics Engineers,\n \
    \              \"Information technology - Telecommunications and\n           \
    \    information exchange between systems - Local and\n               metropolitan\
    \ area networks - Specific Requirements Part\n               11:  Wireless LAN\
    \ Medium Access Control (MAC) and\n               Physical Layer (PHY) Specifications\"\
    , IEEE Standard\n               802.11, 2007.\n   [TTLS-EXT]  Hanna, S. and P.\
    \ Funk, \"Key Agility Extensions for EAP-\n               TTLSv0\", Work in Progress,\
    \ September 2007.\n   [RFC2560]   Myers, M., Ankney, R., Malpani, A., Galperin,\
    \ S., and C.\n               Adams, \"X.509 Internet Public Key Infrastructure\
    \ Online\n               Certificate Status Protocol - OCSP\", RFC 2560, June\
    \ 1999.\n   [RFC5280]   Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n\
    \               Housley, R., and W. Polk, \"Internet X.509 Public Key\n      \
    \         Infrastructure Certificate and Certificate Revocation\n            \
    \   List (CRL) Profile\", RFC 5280, May 2008.\n   [RFC3766]   Orman, H. and P.\
    \ Hoffman, \"Determining Strengths For\n               Public Keys Used For Exchanging\
    \ Symmetric Keys\", BCP 86,\n               RFC 3766, April 2004.\n   [RFC4366]\
    \   Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen,\n               J.,\
    \ and T. Wright, \"Transport Layer Security (TLS)\n               Extensions\"\
    , RFC 4366, April 2006.\n   [MITM]      Asokan, N., Niemi, V., and Nyberg, K.,\
    \ \"Man-in-the-\n               Middle in Tunneled Authentication\",\n       \
    \        http://www.saunalahti.fi/~asokan/research/mitm.html,\n              \
    \ Nokia Research Center, Finland, October 24, 2002.\n   [SP800-57]  National Institute\
    \ of Standards and Technology,\n               \"Recommendation for Key Management\"\
    , Special Publication\n               800-57, May 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Funk\n   43 Linnaean St.\n   Cambridge, MA 02138\n\
    \   EMail: PaulFunk@alum.mit.edu\n   Simon Blake-Wilson\n   SafeNet\n   Amstelveenseweg\
    \ 88-90\n   1054XV, Amsterdam\n   The Netherlands\n   EMail: sblakewilson@nl.safenet-inc.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
