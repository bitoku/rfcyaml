- title: __initial_text__
  contents:
  - '              Inappropriate TCP Resets Considered Harmful

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is being written because there are a number of\n \
    \  firewalls in the Internet that inappropriately reset a TCP connection\n   upon\
    \ receiving certain TCP SYN packets, in particular, packets with\n   flags set\
    \ in the Reserved field of the TCP header.  In this document\n   we argue that\
    \ this practice is not conformant with TCP standards, and\n   is an inappropriate\
    \ overloading of the semantics of the TCP reset.\n   We also consider the longer-term\
    \ consequences of this and similar\n   actions as obstacles to the evolution of\
    \ the Internet infrastructure.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TCP uses the RST (Reset) bit in the TCP header to reset\
    \ a TCP\n   connection.  Resets are appropriately sent in response to a\n   connection\
    \ request to a nonexistent connection, for example.  The TCP\n   receiver of the\
    \ reset aborts the TCP connection, and notifies the\n   application [RFC793, RFC1122,\
    \ Ste94].\n   Unfortunately, a number of firewalls and load-balancers in the\n\
    \   current Internet send a reset in response to a TCP SYN packet that\n   use\
    \ flags from the Reserved field in the TCP header.  Section 3 below\n   discusses\
    \ the specific example of firewalls that send resets in\n   response to TCP SYN\
    \ packets from ECN-capable hosts.\n   This document is being written to inform\
    \ administrators of web\n   servers and firewalls of this problem, in an effort\
    \ to encourage the\n   deployment of bug-fixes [FIXES].  A second purpose of this\
    \ document\n   is to consider the longer-term consequences of such middlebox\n\
    \   behavior on the more general evolution of protocols in the Internet.\n"
- title: 2.  The history of TCP resets.
  contents:
  - "2.  The history of TCP resets.\n   This section gives a brief history of the\
    \ use of the TCP reset in the\n   TCP standards, and argues that sending a reset\
    \ in response to a SYN\n   packet that uses bits from the Reserved field of the\
    \ TCP header is\n   non-compliant behavior.\n   RFC 793 contained the original\
    \ specification of TCP in September,\n   1981 [RFC793].  This document defined\
    \ the RST bit in the TCP header,\n   and explained that reset was devised to prevent\
    \ old duplicate\n   connection initiations from causing confusion in TCP's three-way\n\
    \   handshake.  The reset is also used when a host receives data for a\n   TCP\
    \ connection that no longer exists.\n   RFC 793 states the following, in Section\
    \ 5:\n   \"As a general rule, reset (RST) must be sent whenever a segment\n  \
    \ arrives which apparently is not intended for the current connection.\n   A reset\
    \ must not be sent if it is not clear that this is the case.\"\n   RFC 1122 \"\
    amends, corrects, and supplements\" RFC 793.  RFC 1122 says\n   nothing specific\
    \ about sending resets, or not sending resets, in\n   response to flags in the\
    \ TCP Reserved field.\n   Thus, there is nothing in RFC 793 or RFC 1122 that suggests\
    \ that it\n   is acceptable to send a reset simply because a SYN packet uses\n\
    \   Reserved flags in the TCP header, and RFC 793 explicitly forbids\n   sending\
    \ a reset for this reason.\n   RFC 793 and RFC 1122 both include Jon Postel's\
    \ famous robustness\n   principle, also from RFC 791: \"Be liberal in what you\
    \ accept, and\n   conservative in what you send.\"  RFC 1122 reiterates that this\n\
    \   robustness principle \"is particularly important in the Internet\n   layer,\
    \ where one misbehaving host can deny Internet service to many\n   other hosts.\"\
    \  The discussion of the robustness principle in RFC 1122\n   also states that\
    \ \"adaptability to change must be designed into all\n   levels of Internet host\
    \ software\".  The principle \"be liberal in what\n   you accept\" doesn't carry\
    \ over in a clear way (if at all) to the\n   world of firewalls, but the issue\
    \ of \"adaptability to change\" is\n   crucial nevertheless.  The challenge is\
    \ to protect legitimate\n   security interests without completely blocking the\
    \ ability of the\n   Internet to evolve to support new applications, protocols,\
    \ and\n   functionality.\n"
- title: 2.1.  The TCP Reserved Field
  contents:
  - "2.1.  The TCP Reserved Field\n   RFC 793 says that the Reserved field in the\
    \ TCP header is reserved\n   for future use, and must be zero.  A rephrasing more\
    \ consistent with\n   the rest of the document would have been to say that the\
    \ Reserved\n   field should be zero when sent and ignored when received, unless\n\
    \   specified otherwise by future standards actions.  However, the\n   phrasing\
    \ in RFC 793 does not permit sending resets in response to TCP\n   packets with\
    \ a non-zero Reserved field, as is explained in the\n   section above.\n"
- title: 2.2.  Behavior of and Requirements for Internet Firewalls
  contents:
  - "2.2.  Behavior of and Requirements for Internet Firewalls\n   RFC 2979 on the\
    \ Behavior of and Requirements for Internet Firewalls\n   [RFC2979], an Informational\
    \ RFC, contains the following:\n   \"Applications have to continue to work properly\
    \ in the presence of\n   firewalls.  This translates into the following transparency\
    \ rule: The\n   introduction of a firewall and any associated tunneling or access\n\
    \   negotiation facilities MUST NOT cause unintended failures of\n   legitimate\
    \ and standards-compliant usage that would work were the\n   firewall not present.\"\
    \n   \"A necessary corollary to this requirement is that when such failures\n\
    \   do occur it is incumbent on the firewall and associated software to\n   address\
    \ the problem: Changes to either implementations of existing\n   standard protocols\
    \ or the protocols themselves MUST NOT be\n   necessary.\"\n   \"Note that this\
    \ requirement only applies to legitimate protocol usage\n   and gratuitous failures\
    \ -- a firewall is entitled to block any sort\n   of access that a site deems\
    \ illegitimate, regardless of whether or\n   not the attempted access is standards-compliant.\"\
    \n   We would note that RFC 2979 is an Informational RFC.  RFC 2026 on\n   Internet\
    \ Standards Process says the following in Section 4.2.2: \"An\n   `Informational'\
    \ specification is published for the general\n   information of the Internet community,\
    \ and does not represent an\n   Internet community consensus or recommendation\"\
    \ [RFC2026].\n"
- title: 2.3.  Sending Resets as a Congestion Control Mechanism
  contents:
  - "2.3.  Sending Resets as a Congestion Control Mechanism\n   Some firewalls and\
    \ hosts send resets in response to SYN packets as a\n   congestion control mechanism,\
    \ for example, when their listen queues\n   are full.  These resets are sent without\
    \ regard to the contents of\n   the TCP Reserved field.  Possibly in response\
    \ to the use of resets as\n   a congestion control mechanism, several popular\
    \ TCP implementations\n   immediately resend a SYN packet in response to a reset,\
    \ up to four\n   times.\n   We would recommend that the TCP reset not be used\
    \ as a congestion\n   control mechanism, because this overloads the semantics\
    \ of the reset\n   message, and inevitably leads to more aggressive behavior from\
    \ TCP\n   implementations in response to a reset.  We would suggest that simply\n\
    \   dropping the SYN packet is the most effective response to congestion.\n  \
    \ The TCP sender will retransmit the SYN packet, using the default\n   value for\
    \ the Retransmission Timeout (RTO), backing-off the\n   retransmit timer after\
    \ each retransmit.\n"
- title: 2.4. Resets in Response to Changes in the Precedence Field
  contents:
  - "2.4. Resets in Response to Changes in the Precedence Field\n   RFC 793 includes\
    \ the following in Section 5:\n   \"If an incoming segment has a security level,\
    \ or compartment, or\n   precedence which does not exactly match the level, and\
    \ compartment,\n   and precedence requested for the connection, a reset is sent\
    \ and\n   connection goes to the CLOSED state.\"\n   The \"precedence\" refers\
    \ to the (old) Precedence field in the (old)\n   ToS field in the IP header. \
    \ The \"security\" and \"compartment\" refer\n   to the obsolete IP Security option.\
    \  When it was written, this was\n   consistent with the guideline elsewhere in\
    \ RFC 793 that resets should\n   only be sent when a segment arrives which apparently\
    \ is not intended\n   for the current connection.\n   RFC 2873 on \"TCP Processing\
    \ of the IPv4 Precedence Field\" discusses\n   specific problems raised by the\
    \ sending of resets when the precedence\n   field has changed [RFC2873].  RFC\
    \ 2873, currently a Proposed\n   Standard, specifies that TCP must ignore the\
    \ precedence of all\n   received segments, and must not send a reset in response\
    \ to changes\n   in the precedence field.  We discuss this here to clarify that\
    \ this\n   issue never permitted the sending of a reset in response to a segment\n\
    \   with a non-zero TCP Reserved field.\n"
- title: 2.5. Resets in Response to Illegal Option Lengths
  contents:
  - "2.5. Resets in Response to Illegal Option Lengths\n   RFC 1122 says the following\
    \ in Section 4.2.2.5 about TCP options\n   [RFC1122]:\n   \"A TCP MUST be able\
    \ to receive a TCP option in any segment.  A TCP\n   MUST ignore without error\
    \ any TCP option it does not implement,\n   assuming that the option has a length\
    \ field (all TCP options defined\n   in the future will have length fields). \
    \ TCP MUST be prepared to\n   handle an illegal option length (e.g., zero) without\
    \ crashing; a\n   suggested procedure is to reset the connection and log the reason.\"\
    \n   This makes sense, as a TCP receiver is unable to interpret the rest\n   of\
    \ the data on a segment that has a TCP option with an illegal option\n   length.\
    \  Again, we discuss this here to clarify that this issue never\n   permitted\
    \ the sending of a reset in response to a segment with a\n   non-zero TCP Reserved\
    \ field.\n"
- title: 3.  The Specific Example of ECN
  contents:
  - "3.  The Specific Example of ECN\n   This section has a brief explanation of ECN\
    \ (Explicit Congestion\n   Notification) in general, and the ECN-setup SYN packet\
    \ in particular.\n   The Internet is based on end-to-end congestion control, and\n\
    \   historically the Internet has used packet drops as the only method\n   for\
    \ routers to indicate congestion to the end nodes.  ECN is a recent\n   addition\
    \ to the IP architecture to allow routers to set a bit in the\n   IP packet header\
    \ to inform end-nodes of congestion, instead of\n   dropping the packet.  ECN\
    \ requires the cooperation of the transport\n   end-nodes.\n   The ECN specification,\
    \ RFC 2481, was an Experimental RFC from January\n   1999 until June 2001, when\
    \ a revised document [RFC3168] was approved\n   as Proposed Standard.  More information\
    \ about ECN is available from\n   the ECN Web Page [ECN].\n   The use of ECN with\
    \ TCP requires that both TCP end-nodes have been\n   upgraded to support the use\
    \ of ECN, and that both end-nodes agree to\n   use ECN with this particular TCP\
    \ connection.  This negotiation of ECN\n   support between the two TCP end-nodes\
    \ uses two flags that have been\n   allocated from the Reserved field in the TCP\
    \ header [RFC2481].\n        0   1   2   3   4   5   6   7   8   9  10  11  12\
    \  13  14  15\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \      |               |                       | U | A | P | R | S | F |\n   \
    \   | Header Length |        Reserved       | R | C | S | S | Y | I |\n      |\
    \               |                       | G | K | H | T | N | N |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \      Figure 1: The previous definition of bytes 13 and 14 of the TCP\n     \
    \           header.\n        0   1   2   3   4   5   6   7   8   9  10  11  12\
    \  13  14  15\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \      |               |               | C | E | U | A | P | R | S | F |\n   \
    \   | Header Length |    Reserved   | W | C | R | C | S | S | Y | I |\n      |\
    \               |               | R | E | G | K | H | T | N | N |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \      Figure 2: The current definition of bytes 13 and 14 of the TCP\n      \
    \          Header, from RFC 3168.\n   The two ECN flags in the TCP header are\
    \ defined from the last two\n   bits in the Reserved field of the TCP header.\
    \  Bit 9 in the Reserved\n   field of the TCP header is designated as the ECN-Echo\
    \ flag (ECE), and\n   Bit 8 is designated as the Congestion Window Reduced (CWR)\
    \ flag.  To\n   negotiate ECN usage, the TCP sender sends an \"ECN-setup SYN packet\"\
    ,\n   a TCP SYN packet with the ECE and CWR flags set.  If the TCP host at\n \
    \  the other end wishes to use ECN for this connection, then it sends an\n   \"\
    ECN-setup SYN-ACK packet\", a TCP SYN packet with the ECE flag set\n   and the\
    \ CWR flag not set.  Otherwise, the TCP host at the other end\n   returns a SYN-ACK\
    \ packet with neither the ECE nor the CWR flag set.\n   So now back to TCP resets.\
    \  When a TCP host negotiating ECN sends an\n   ECN-setup SYN packet, an old TCP\
    \ implementation is expected to ignore\n   those flags in the Reserved field,\
    \ and to send a plain SYN-ACK packet\n   in response.  However, there are some\
    \ broken firewalls and load-\n   balancers in the Internet that instead respond\
    \ to an ECN-setup SYN\n   packet with a reset.  Following the deployment of ECN-enabled\
    \ end\n   nodes, there were widespread complaints that ECN-capable hosts could\n\
    \   not access a number of websites [Kelson00].  This has been\n   investigated\
    \ by the Linux community, and by the TBIT project [TBIT]\n   in data taken from\
    \ September, 2000, up to March, 2002, and has been\n   discussed in an article\
    \ in Enterprise Linux Today [Cou01].  Some of\n   the offending equipment has\
    \ been identified, and a web page [FIXES]\n   contains a list of non-compliant\
    \ products and the fixes posted by the\n   vendors.  In March 2002, six months\
    \ after ECN was approved as\n   Proposed Standard, ECN-setup SYN packets were\
    \ answered by a reset\n   from 203 of the 12,364 web sites tested, and ECN-setup\
    \ SYN packets\n   were dropped for 420 of the web sites.  Installing software\
    \ that\n   blocks packets using flags in TCP's Reserved field is considerably\n\
    \   easier than uninstalling that software later on.\n"
- title: '3.1.  ECN: The Work-Around.'
  contents:
  - "3.1.  ECN: The Work-Around.\n   A work-around for maintaining connectivity in\
    \ the face of the broken\n   equipment was described in [Floyd00], and has been\
    \ specified in RFC\n   3168 as a procedure that may be included in TCP implementations.\
    \  We\n   describe this work-around briefly below.\n   To provide robust connectivity\
    \ even in the presence of faulty\n   equipment, a TCP host that receives a reset\
    \ in response to the\n   transmission of an ECN-setup SYN packet may resend the\
    \ SYN with CWR\n   and ECE cleared.  This would result in a TCP connection being\n\
    \   established without using ECN.  This also has the unfortunate result\n   of\
    \ the ECN-capable TCP host not responding properly to the first\n   valid reset.\
    \  If a second reset is sent in response to the second\n   SYN, which had CWR\
    \ and ECE cleared, then the TCP host should respond\n   properly by aborting the\
    \ connection.\n   Similarly, a host that receives no reply to an ECN-setup SYN\
    \ within\n   the normal SYN retransmission timeout interval may resend the SYN\
    \ and\n   any subsequent SYN retransmissions with CWR and ECE cleared.  To\n \
    \  overcome normal packet loss that results in the original SYN being\n   lost,\
    \ the originating host may retransmit one or more ECN-setup SYN\n   packets before\
    \ giving up and retransmitting the SYN with the CWR and\n   ECE bits cleared.\n\
    \   Some TCP implementors have so far decided not to deploy these\n   workarounds,\
    \ for the following reasons:\n   * The work-arounds would result in ECN-capable\
    \ hosts not responding\n     properly to the first valid reset received in response\
    \ to a SYN\n     packet.\n   * The work-arounds would limit ECN functionality\
    \ in environments\n     without broken equipment, by disabling ECN where the first\
    \ SYN or\n     SYN-ACK packet was dropped in the network.\n   * The work-arounds\
    \ in many cases would involve a delay of six seconds\n     or more before connectivity\
    \ is established with the remote server,\n     in the case of broken equipment\
    \ that drops ECN-setup SYN packets.\n     By accommodating this broken equipment,\
    \ the work-arounds have been\n     judged as implicitly accepting both this delay\
    \ and the broken\n     equipment that would be causing this delay.\n   One possibility\
    \ would be for such work-arounds to be configurable by\n   the user.\n   One unavoidable\
    \ consequence of the work-around of resending a\n   modified SYN packet in response\
    \ to a reset is to further erode the\n   semantics of the TCP reset.  Thus, when\
    \ a box sends a reset, the TCP\n   host receiving that reset does not know if\
    \ the reset was sent simply\n   because of the ECN-related flags in the TCP header,\
    \ or because of\n   some more fundamental problem.  Therefore, the TCP host resends\
    \ the\n   TCP SYN packet without the ECN-related flags in the TCP header.  The\n\
    \   ultimate consequence of this absence of clear communications from the\n  \
    \ middlebox to the end-nodes could be an extended spiral of\n   communications\
    \ specified for transport protocols, as end nodes\n   attempt to sacrifice as\
    \ little functionality as possible in the\n   process of determining which packets\
    \ will and will not be forwarded\n   to the other end.  This is discussed in more\
    \ detail in Section 6.1\n   below.\n"
- title: 4.  On Combating Obstacles to the Proper Evolution of the Internet
  contents:
  - "4.  On Combating Obstacles to the Proper Evolution of the Internet\n    Infrastructure\n\
    \   One of the reasons that this issue of inappropriate resets is\n   important\
    \ (to me) is that it has complicated the deployment of ECN in\n   the Internet\
    \ (though it has fortunately not blocked the deployment\n   completely).  It has\
    \ also added an unnecessary obstacle to the future\n   effectiveness of ECN.\n\
    \   However, a second, more general reason why this issue is important is\n  \
    \ that the presence of equipment in the Internet that rejects valid TCP\n   packets\
    \ limits the future evolution of TCP, completely aside from the\n   issue of ECN.\
    \  That is, the widespread deployment of equipment that\n   rejects TCP packets\
    \ that use Reserved flags in the TCP header could\n   effectively prevent the\
    \ deployment of new mechanisms that use any of\n   these Reserved flags.  It doesn't\
    \ matter if these new mechanisms have\n   the protection of Experimental or Proposed\
    \ Standard status from the\n   IETF, because the broken equipment in the Internet\
    \ does not stop to\n   look up the current status of the protocols before rejecting\
    \ the\n   packets.  TCP is good, and useful, but it would be a pity for the\n\
    \   deployment of broken equipment in the Internet to result in the\n   \"freezing\"\
    \ of TCP in its current state, without the ability to use\n   the Reserved flags\
    \ in the future evolution of TCP.\n   In the specific case of middleboxes that\
    \ block TCP SYN packets\n   attempting to negotiate ECN, the work-around described\
    \ in Section 3.1\n   is sufficient to ensure that end-nodes could still establish\n\
    \   connectivity.  However, there are likely to be additional uses of the\n  \
    \ TCP Reserved Field standardized in the next year or two, and these\n   additional\
    \ uses might not coexist quite as successfully with\n   middleboxes that send\
    \ resets.  Consider the difficulties that could\n   result if a path changes in\
    \ the middle of a connection's lifetime,\n   and the middleboxes on the old and\
    \ new paths have different policies\n   about exactly which flags in the TCP Reserved\
    \ field they would and\n   would not block.\n   Taking the wider view, the existence\
    \ of web servers or firewalls that\n   send inappropriate resets is only one example\
    \ of functionality in the\n   Internet that restricts the future evolution of\
    \ the Internet.  The\n   impact of all of these small restrictions taken together\
    \ presents a\n   considerable obstacle to the development of the Internet\n  \
    \ architecture.\n"
- title: 5.  Issues for Transport Protocols
  contents:
  - "5.  Issues for Transport Protocols\n   One lesson for designers of transport\
    \ protocols is that transport\n   protocols will have to protect themselves from\
    \ the unknown and\n   seemingly arbitrary actions of firewalls, normalizers, and\
    \ other\n   middleboxes in the network.  For the moment, for TCP, this means\n\
    \   sending a non-ECN-setup SYN when a reset is received in response to\n   an\
    \ ECN-setup SYN packet.  Defensive actions on the side of transport\n   protocols\
    \ could include using Reserved flags in the SYN packet before\n   using them in\
    \ data traffic, to protect against middleboxes that block\n   packets using those\
    \ flags.  It is possible that transport protocols\n   will also have to add additional\
    \ checks during the course of the\n   connection lifetime to check for interference\
    \ from middleboxes along\n   the path.\n   The ECN standards document, RFC 3168,\
    \ contains an extensive\n   discussion in Section 18 on \"Possible Changes to\
    \ the ECN Field in the\n   Network\", but includes the following about possible\
    \ changes to the\n   TCP header:\n   \"This document does not consider potential\
    \ dangers introduced by\n   changes in the transport header within the network.\
    \  We note that\n   when IPsec is used, the transport header is protected both\
    \ in tunnel\n   and transport modes [ESP, AH].\"\n   With the current modification\
    \ of transport-level headers in the\n   network by firewalls (as discussed below\
    \ in Section 6.2), future\n   protocol designers might no longer have the luxury\
    \ of ignoring the\n   possible impact of changes to the transport header within\
    \ the\n   network.\n   Transport protocols will also have to respond in some fashion\
    \ to an\n   ICMP code of \"Communication Administratively Prohibited\" if\n  \
    \ middleboxes start to use this form of the ICMP Destination\n   Unreachable message\
    \ to indicate that the packet is using\n   functionality not allowed [RFC1812].\n"
- title: 6.  Issues for Middleboxes
  contents:
  - "6.  Issues for Middleboxes\n   Given that some middleboxes are going to drop\
    \ some packets because\n   they use functionality not allowed by the middlebox,\
    \ the larger issue\n   remains of how middleboxes should communicate the reason\
    \ for this\n   action to the end-nodes, if at all.  One suggestion, for\n   consideration\
    \ in more depth in a separate document, would be that\n   firewalls send an ICMP\
    \ Destination Unreachable message with the code\n   \"Communication Administratively\
    \ Prohibited\" [B01].\n   We acknowledge that this is not an ideal solution, for\
    \ several\n   reasons.  First, middleboxes along the reverse path might block\
    \ these\n   ICMP messages.  Second, some firewall operators object to explicit\n\
    \   communication because it reveals too much information about security\n   policies.\
    \  And third, the response of transport protocols to such an\n   ICMP message\
    \ is not yet specified.\n   However, an ICMP \"Administratively Prohibited\" message\
    \ could be a\n   reasonable addition, for firewalls willing to use explicit\n\
    \   communication.  One possibility, again to be explored in a separate\n   document,\
    \ would be for the ICMP \"Administratively Prohibited\" message\n   to be modified\
    \ to convey additional information to the end host.\n   We would note that this\
    \ document does not consider middleboxes that\n   block complete transport protocols.\
    \  We also note that this document\n   is not addressing firewalls that send resets\
    \ in response to a TCP SYN\n   packet to a firewalled-off TCP port.  Such a use\
    \ of resets seems\n   consistent with the semantics of TCP reset.  This document\
    \ is only\n   considering the problems caused by middleboxes that block specific\n\
    \   packets within a transport protocol when other packets from that\n   transport\
    \ protocol are forwarded by the middlebox unaltered.\n   One complication is that\
    \ once a mechanism is installed in a firewall\n   to block a particular functionality,\
    \ it can take considerable effort\n   for network administrators to \"un-install\"\
    \ that block.  It has been\n   suggested that tweakable settings on firewalls\
    \ could make recovery\n   from future incidents less painful all around.  Again,\
    \ because this\n   document does not address more general issues about firewalls,\
    \ the\n   issue of greater firewall flexibility, and the attendant possible\n\
    \   security risks, belongs in a separate document.\n"
- title: 6.1.  Current Choices for Firewalls
  contents:
  - "6.1.  Current Choices for Firewalls\n   Given a firewall that has decided to\
    \ drop TCP packets that use\n   reserved bits in the TCP header, one question\
    \ is whether the firewall\n   should also send a Reset, in order to prevent the\
    \ TCP connection from\n   consuming unnecessary resources at the TCP sender waiting\
    \ for the\n   retransmit timeout.  We would argue that whether or not the firewall\n\
    \   feels compelled to drop the TCP packet, it is not appropriate to send\n  \
    \ a TCP reset.  Sending a TCP reset in response to prohibited\n   functionality\
    \ would continue the current overloading of the semantics\n   of the TCP reset\
    \ in a way that could be counterproductive all around.\n   As an example, Section\
    \ 2.3 has already observed that some firewalls\n   send resets in response to\
    \ TCP SYN packets as a congestion control\n   mechanism.  Possibly in response\
    \ to this (or perhaps in response to\n   something else), some popular TCP implementations\
    \ immediately resend\n   a SYN packet in response to a reset, up to four times.\
    \  Other TCP\n   implementations, in conformance to the standards, don't resend\
    \ SYN\n   packets after receiving a reset.  The more aggressive TCP\n   implementations\
    \ increase congestion for others, but also increase\n   their own chances of eventually\
    \ getting through.  Giving these fluid\n   semantics for the TCP reset, one might\
    \ expect more TCP\n   implementations to start resending SYN packets in response\
    \ to a\n   reset, completely apart from any issues having to do with ECN.\n  \
    \ Obviously, this weakens the effectiveness of the reset when used for\n   its\
    \ original purpose, of responding to TCP packets that apparently\n   are not intended\
    \ for the current connection.\n   If we add to this mix the use of the TCP reset\
    \ by firewalls in\n   response to TCP packets using reserved bits in the TCP header,\
    \ this\n   muddies the waters further.  Because TCP resets could be sent due to\n\
    \   congestion, or to prohibited functionality, or because a packet was\n   received\
    \ from a previous TCP connection, TCP implementations (or,\n   more properly,\
    \ TCP implementors) would now have an incentive to be\n   even more persistent\
    \ in resending SYN packets in response to TCP\n   resets.  In addition to the\
    \ incentive mentioned above of resending\n   TCP SYN packets to increase one's\
    \ odds of eventually getting through\n   in a time of congestion, the TCP reset\
    \ might have been due to\n   prohibited functionality instead of congestion, so\
    \ the TCP\n   implementation might resend SYN packets in different forms to\n\
    \   determine exactly which functionality is being prohibited.  Such a\n   continual\
    \ changing of the semantics of the TCP reset could be\n   expected to lead to\
    \ a continued escalation of measures and\n   countermeasures between firewalls\
    \ and end-hosts, with little\n   productive benefit to either side.\n   It could\
    \ be argued that *dropping* the TCP SYN packet due to the use\n   of prohibited\
    \ functionality leads to overloading of the semantics of\n   a packet drop, in\
    \ the same way that the reset leads to overloading\n   the semantics of a reset.\
    \  This is true; from the viewpoint of end-\n   system response to messages with\
    \ overloaded semantics, it would be\n   preferable to have an explicit indication\
    \ about prohibited\n   functionality (for those firewalls for some reason willing\
    \ to use\n   explicit indications).  But given a firewall's choice between sending\n\
    \   a reset or just dropping the packet, we would argue that just\n   dropping\
    \ the packet does less damage, in terms of giving an incentive\n   to end-hosts\
    \ to adopt counter-measures.  It is true that just\n   dropping the packet, without\
    \ sending a reset, results in delay for\n   the TCP connection in resending the\
    \ SYN packet without the prohibited\n   functionality.  However, sending a reset\
    \ has the undesirable longer-\n   term effect of giving an incentive to future\
    \ TCP implementations to\n   add more baroque combinations of resending SYN packets\
    \ in response to\n   a reset, because the TCP sender can't tell if the reset is\
    \ for a\n   standard reason, for congestion, or for the prohibited functionality\n\
    \   of option X or reserved bit Y in the TCP header.\n"
- title: 6.2.  The Complications of Modifying Packet Headers in the Network
  contents:
  - "6.2.  The Complications of Modifying Packet Headers in the Network\n   In addition\
    \ to firewalls that send resets in response to ECN-setup\n   SYN packets and firewalls\
    \ that drop ECN-setup SYN packets, there also\n   exist firewalls that by default\
    \ zero the flags in the TCP Reserved\n   field, including the two flags used for\
    \ ECN.  We note that in some\n   cases this could have unintended and undesirable\
    \ consequences.\n   If a firewall zeros the ECN-related flags in the TCP header\
    \ in the\n   initial SYN packet, then the TCP connection will be set up without\n\
    \   using ECN, and the ECN-related flags in the TCP header will be sent\n   zeroed-out\
    \ in all of the subsequent packets in this connection.  This\n   will accomplish\
    \ the firewall's purpose of blocking ECN, while\n   allowing the TCP connection\
    \ to proceed efficiently and smoothly\n   without using ECN.\n   If for some reason\
    \ the ECN-related flags in the TCP header aren't\n   zeroed in the initial SYN\
    \ packet from host A to host B, but the\n   firewall does zero those flags in\
    \ the responding SYN/ACK packet from\n   host B to host A, the consequence could\
    \ be to subvert end-to-end\n   congestion control for this connection.  The ECN\
    \ specifications were\n   not written to ensure robust operation in the presence\
    \ of the\n   arbitrary zeroing of TCP header fields within the network, because\
    \ it\n   didn't occur to the authors of the protocol at the time that this was\n\
    \   a requirement in protocol design.\n   Similarly, if the ECN-related flags\
    \ in the TCP header are not zeroed\n   in either the SYN or the SYN/ACK packet,\
    \ but the firewall does zero\n   these flags in later packets in that TCP connection,\
    \ this could also\n   have the unintended consequence of subverting end-to-end\
    \ congestion\n   control for this connection.  The details of these possible\n\
    \   interactions are not crucial for this document, and are described in\n   the\
    \ appendix.  However, our conclusion, both for the ECN-related\n   flags in the\
    \ TCP header and for future uses of the four other bits in\n   the TCP Reserved\
    \ field, would be that if it is required for firewalls\n   to be able to block\
    \ the use of a new function being added to a\n   protocol, this is best addressed\
    \ in the initial design phase by joint\n   cooperation between the firewall community\
    \ and the protocol\n   designers.\n"
- title: 7.  Conclusions
  contents:
  - "7.  Conclusions\n   Our conclusion is that it is not conformant with current\
    \ standards\n   for a firewall, load-balancer, or web-server to respond with a\
    \ reset\n   to a TCP SYN packet simply because the packet uses flags in the TCP\n\
    \   Reserved field.  More specifically, it is not conformant to respond\n   with\
    \ a reset to a TCP SYN packet simply because the ECE and CWR flags\n   are set\
    \ in the IP header.  We would urge vendors to make available\n   fixes for any\
    \ nonconformant code, and we could urge ISPs and system\n   administrators to\
    \ deploy these fixes in their web servers and\n   firewalls.\n   We don't claim\
    \ that it violates any standard for middleboxes to\n   arbitrarily drop packets\
    \ that use flags in the TCP Reserved field,\n   but we would argue that behavior\
    \ of this kind, without a clear method\n   for informing the end-nodes of the\
    \ reasons for these actions, could\n   present a significant obstacle to the development\
    \ of TCP.  More work\n   is clearly needed to reconcile the conflicting interests\
    \ of providing\n   security while at the same time allowing the careful evolution\
    \ of\n   Internet protocols.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document results from discussions and activity\
    \ by many people,\n   so I will refrain from trying to acknowledge all of them\
    \ here.  My\n   specific thanks go to Ran Atkinson, Steve Bellovin, Alex Cannara,\n\
    \   Dennis Ferguson, Ned Freed, Mark Handley, John Klensin, Allison\n   Mankin,\
    \ Jitendra Padhye, Vern Paxson, K. K. Ramakrishnan, Jamal Hadi\n   Salim, Pekka\
    \ Savola, Alex Snoeren, and Dan Wing for feedback on this\n   document, and to\
    \ the End-to-End Research Group, the IAB, and the IESG\n   for discussion of these\
    \ issues.  I thank Mikael Olsson for numerous\n   rounds of feedback.  I also\
    \ thank the members of the Firewall Wizards\n   mailing list for feedback (generally\
    \ of disagreement) on an earlier\n   draft of this document.\n   Email discussions\
    \ with a number of people, including Dax Kelson,\n   Alexey Kuznetsov, Kacheong\
    \ Poon, David Reed, Jamal Hadi-Salim, and\n   Venkat Venkatsubra, have addressed\
    \ the issues raised by non-\n   conformant equipment in the Internet that does\
    \ not respond to TCP SYN\n   packets with the ECE and CWR flags set.  We thank\
    \ Mark Handley,\n   Jitentra Padhye, and others for discussions on the TCP initialization\n\
    \   procedures.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [RFC793]   Postel, J., \"Transmission Control Protocol\
    \ - DARPA\n              Internet Program Protocol Specification\", STD 7, RFC\
    \ 793,\n              September 1981.\n   [RFC1122]  Braden, R., \"Requirements\
    \ for Internet Hosts --\n              Communication Layers\", STD 3, RFC 1122,\
    \ October 1989.\n   [RFC1812]  Baker, F., \"Requirements for IP Version 4 Routers\"\
    , RFC\n              1812, June 1995.\n   [RFC2026]  Bradner, S., \"The Internet\
    \ Standards Process -- Revision\n              3\", BCP 9, RFC 2026, October 1996.\n\
    \   [RFC2481]  Ramakrishnan, K. and S. Floyd, \"A Proposal to add Explicit\n \
    \             Congestion Notification (ECN) to IP\", RFC 2481, January\n     \
    \         1999.\n   [RFC2873]  Xiao, X., Hannan, A., Paxson, V., and E. Crabbe,\
    \ \"TCP\n              Processing of the IPv4 Precedence Field, RFC 2873, June\n\
    \              2000.\n   [RFC2979]  Freed, N., \" Behavior of and Requirements\
    \ for Internet\n              Firewalls\", RFC 2979, October 2000.\n   [RFC3168]\
    \  Ramakrishnan, K., Floyd, S.  and D. Black, \"The Addition\n              of\
    \ Explicit Congestion Notification (ECN) to IP\", RFC\n              3168, September\
    \ 2001.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [B01]      Bellovin, S., \"A \"Reason\" Field\
    \ for ICMP \"Administratively\n              Prohibited\" Messages\", Work in\
    \ Progress.\n   [Cou01]    Scott Courtney, Why Can't My 2.4 Kernel See Some Web\n\
    \              Sites?, Enterprise Linux Today, Apr 17, 2001.  URL\n          \
    \    \"http://eltoday.com/article.php3?ltsn=2001-04-17-001-14-\n             \
    \ PS\".\n   [ECN]      \"The ECN Web Page\", URL\n              \"http://www.icir.org/floyd/ecn.html\"\
    .\n   [FIXES]    ECN-under-Linux Unofficial Vendor Support Page, URL\n       \
    \       \"http://gtf.org/garzik/ecn/\".\n   [Floyd00]  Sally Floyd, Negotiating\
    \ ECN-Capability in a TCP\n              connection, October 2, 2000, email to\
    \ the end2end-interest\n              mailing list.  URL\n              \"http://www.icir.org/floyd/papers/ECN.Oct2000.txt\"\
    .\n   [Kelson00] Dax Kelson, note sent to the Linux kernel mailing list,\n   \
    \           September 10, 2000.\n   [QUESO]    Toby Miller, Intrusion Detection\
    \ Level Analysis of Nmap\n              and Queso, August 30, 2000.  URL\n   \
    \           \"http://www.securityfocus.com/infocus/1225\".\n   [Ste94]    Stevens,\
    \ W., \"TCP/IP Illustrated, Volume 1: The\n              Protocols\", Addison-Wesley,\
    \ 1994.\n   [SFO01]    FreeBSD ipfw Filtering Evasion Vulnerability, Security\n\
    \              Focus Online, January 23, 2001.  URL\n              \"http://www.securityfocus.com/bid/2293\"\
    .\n   [TBIT]     Jitendra Padhye and Sally Floyd, Identifying the TCP\n      \
    \        Behavior of Web Servers, SIGCOMM, August 2001.  URL\n              \"\
    http://www.icir.org/tbit/\".\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   One general risk of using Reserved flags in\
    \ TCP is the risk of\n   providing additional information about the configuration\
    \ of the host\n   in question.   However, TCP is sufficiently loosely specified\
    \ as it\n   is, with sufficiently many variants and options, that port-scanning\n\
    \   tools such as Nmap and Queso do rather well in identifying the\n   configuration\
    \ of hosts even without the use of Reserved flags.\n   The security considerations\
    \ and all other considerations of a\n   possible ICMP Destination Unreachable\
    \ message with the code\n   \"Communication Administratively Prohibited\" will\
    \ be discussed in a\n   separate document.\n   The traditional concern of firewalls\
    \ is to prevent unauthorized\n   access to systems, to prevent DoS attacks and\
    \ other attacks from\n   subverting the end-user terminal, and to protect end\
    \ systems from\n   buggy code.  We are aware of one security vulnerability reported\
    \ from\n   the use of the Reserved flags in the TCP header [SFO01].  A packet\n\
    \   filter intended only to let through packets in established\n   connections\
    \ can let pass a packet not in an established connection if\n   the packet has\
    \ the ECE flag set in the reserved field.  \"Exploitation\n   of this vulnerability\
    \ may allow for unauthorized remote access to\n   otherwise protected services.\"\
    \ It is also possible that an\n   implementation of TCP could appear that has\
    \ buggy code associated\n   with the use of Reserved flags in the TCP header,\
    \ but we are not\n   aware of any such implementation at the moment.\n   Unfortunately,\
    \ misconceived security concerns are one of the reasons\n   for the problems described\
    \ in this document in the first place.  An\n   August, 2000, article on \"Intrusion\
    \ Detection Level Analysis of Nmap\n   and Queso\" described the port-scanning\
    \ tool Queso as sending SYN\n   packets with the last two Reserved bits in the\
    \ TCP header set, and\n   said the following:  \"[QUESO] is easy to identify,\
    \ if you see [these\n   two Reserved bits and the SYN bit] set in the 13th byte\
    \ of the TCP\n   header, you know that someone has malicious intentions for your\n\
    \   network.\"  As is documented on the TBIT Web Page, the middleboxes\n   that\
    \ block SYNs using the two ECN-related Reserved flags in the TCP\n   header do\
    \ not block SYNs using other Reserved flags in the TCP\n   header.\n   One lesson\
    \ appears to be that anyone can effectively \"attack\" a new\n   TCP function\
    \ simply by using that function in their publicly-\n   available port-scanning\
    \ tool, thus causing middleboxes of all kinds\n   to block the use of that function.\n"
- title: '12.  Appendix: The Complications of Modifying Packet Headers'
  contents:
  - "12.  Appendix: The Complications of Modifying Packet Headers\n   In this section\
    \ we first show that if the ECN-related flags in the\n   TCP header aren't zeroed\
    \ in the initial SYN packet from Host A to\n   Host B, but are zeroed in the responding\
    \ SYN/ACK packet from Host B\n   to Host A, the consequence could be to subvert\
    \ end-to-end congestion\n   control for this connection.\n   Assume that the ECN-setup\
    \ SYN packet from Host A is received by Host\n   B, but the ECN-setup SYN/ACK\
    \ from Host B is modified by a firewall in\n   the network to a non-ECN-setup\
    \ SYN/ACK, as in Figure 3 below.  RFC\n   3168 does not specify that the ACK packet\
    \ in any way should echo the\n   TCP flags received in the SYN/ACK packet, because\
    \ it had not occurred\n   to the designers that these flags would be modified\
    \ within the\n   network.\n      Host A                    Firewall or router\
    \             Host B\n      -----------------------------------------------------------------\n\
    \      Sends ECN-setup SYN     ---------------->  Receives ECN-setup SYN\n   \
    \                                          <- Sends ECN-setup SYN/ACK\n      \
    \             <- Firewall zeros flags\n      Receives non-ECN-setup SYN/ACK\n\
    \      Sends ACK and data      ---------------->   Receives ACK and data\n   \
    \                                       <- Sends data packet with ECT\n      \
    \                   <- Router sets CE\n      Receives data packet with ECT and\
    \ CE\n      Figure 3: ECN-related flags in SYN/ACK packet cleared in network.\n\
    \   Following RFC 3168, Host A has received a non-ECN-setup SYN/ACK\n   packet,\
    \ and must not set ECT on data packets.  Host B, however, does\n   not know that\
    \ Host A has received a non-ECN-setup SYN/ACK packet, and\n   Host B may set ECT\
    \ on data packets.  RFC 3168 does not require Host A\n   to respond properly to\
    \ data packets received from Host B with the ECT\n   and CE codepoints set in\
    \ the IP header.  Thus, the data sender, Host\n   B, might never be informed about\
    \ the congestion encountered in the\n   network, thus violating end-to-end congestion\
    \ control.\n   Next we show that if the ECN-related flags in the TCP header are\
    \ not\n   zeroed in either the SYN or the SYN/ACK packet, but the firewall does\n\
    \   zero these flags in later packets in that TCP connection, this could\n   also\
    \ have the unintended consequence of subverting end-to-end\n   congestion control\
    \ for this connection.  Figure 4 shows this\n   scenario.\n      Host A      \
    \              Firewall or router             Host B\n      -----------------------------------------------------------------\n\
    \      Sends ECN-setup SYN     ---------------->  Receives ECN-setup SYN\n   \
    \   Receives ECN-setup SYN/ACK <------------  Sends ECN-setup SYN/ACK\n      Sends\
    \ ACK and data      ---------------->   Receives ACK and data\n              \
    \                            <- Sends data packet with ECT\n                 \
    \        <- Router sets CE\n      Receives data packet with ECT and CE\n     \
    \ Sends ACK with ECE ->\n                            Firewall resets ECE ->\n\
    \                                                     Receives plain ACK\n   \
    \   Figure 4: ECN-related flags in ACK packet cleared in network.\n   The ECN-related\
    \ flags are not changed by the network in the ECN-setup\n   SYN and SYN/ACK packets\
    \ for the scenario in Figure 4, and both end\n   nodes are free to use ECN, and\
    \ to set the ECT flag in the ECN field\n   in the IP header.  However, if the\
    \ firewall clears the ECE flag in\n   the TCP header in ACK packets from Node\
    \ A to Node B, then Node B will\n   never hear about the congestion that its earlier\
    \ data packets\n   encountered in the network, thus subverting end-to-end congestion\n\
    \   control for this connection.\n   Additional complications will arise when/if\
    \ the use of the ECN nonce\n   in TCP becomes standardized in the IETF [RFC3168],\
    \ as this could\n   involve the specification of an additional flag from the TCP\
    \ Reserved\n   field for feedback from the TCP data receiver to the TCP data sender.\n\
    \   The primary motivation for the ECN nonce is to allow mechanisms for\n   the\
    \ data sender to verify that network elements are not erasing the\n   CE codepoint,\
    \ and that data receivers are properly reporting to the\n   sender the receipt\
    \ of packets with the CE codepoint set.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   There are no IANA considerations in this document.\n"
- title: 14. Author's Address
  contents:
  - "14. Author's Address\n   Sally Floyd\n   ICIR (ICSI Center for Internet Research)\n\
    \   Phone: +1 (510) 666-2989\n   EMail: floyd@icir.org\n   URL: http://www.icir.org/floyd/\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
