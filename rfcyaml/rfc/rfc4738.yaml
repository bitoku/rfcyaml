- contents:
  - "          MIKEY-RSA-R: An Additional Mode of Key Distribution\n                 in
    Multimedia Internet KEYing (MIKEY)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Multimedia Internet Keying (MIKEY) specification describes\n
    \  several modes of key distribution solution that address multimedia\n   scenarios
    (e.g., SIP calls and Real Time Streaming Protocol (RTSP)\n   sessions) using pre-shared
    keys, public keys, and optionally a\n   Diffie-Hellman key exchange.  In the public-key
    mode, the Initiator\n   encrypts a random key with the Responder's public key
    and sends it to\n   the Responder.  In many communication scenarios, the Initiator
    may\n   not know the Responder's public key, or in some cases the Responder's\n
    \  ID (e.g., call forwarding) in advance.  We propose a new MIKEY mode\n   that
    works well in such scenarios.  This mode also enhances the group\n   key management
    support in MIKEY; it supports member-initiated group\n   key download (in contrast
    to group manager pushing the group keys to\n   all members).  This document updates
    RFC 3830 with the RSA-R mode.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology Used in This Document ..........................3\n   2.
    Motivation ......................................................3\n      2.1.
    Description of the MIKEY Modes .............................3\n      2.2. Use
    Case Motivating the Proposed Mode ......................5\n   3. A New MIKEY-RSA
    Mode: MIKEY-RSA-R ...............................5\n      3.1. Outline ....................................................5\n
    \     3.2. Group Communication Using the MIKEY RSA-R Mode .............6\n      3.3.
    Preparing RSA-R Messages ...................................6\n      3.4. Components
    of the I_MESSAGE ................................6\n      3.5. Processing the
    I_MESSAGE ...................................8\n      3.6. Components of the R_MESSAGE
    ................................9\n      3.7. Processing the R_MESSAGE ..................................10\n
    \     3.8. Certificate Handling ......................................10\n      3.9.
    Additions to RFC 3830 Message Types and Other Values ......11\n           3.9.1.
    Modified Table 6.1a from RFC 3830 ..................11\n           3.9.2. Modified
    Table 6.12 from RFC 3830 ..................12\n           3.9.3. Modified Table
    6.15 from RFC 3830 ..................12\n   4. Applicability of the RSA-R and
    RSA Modes .......................13\n      4.1. Limitations ...............................................13\n
    \  5. Security Considerations ........................................14\n      5.1.
    Impact of the Responder Choosing the TGK ..................15\n      5.2. Updates
    to Security Considerations in RFC 3830 ............15\n   6. IANA Considerations
    ............................................15\n   7. Acknowledgments ................................................16\n
    \  8. References .....................................................16\n      8.1.
    Normative References ......................................16\n      8.2. Informative
    References ....................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The MIKEY protocol [RFC3830] has three different methods
    for key\n   transport or exchange: a pre-shared key mode (PSK), a public-key\n
    \  (RSA) mode, and an optional Diffie-Hellman exchange (DHE) mode.  In\n   addition,
    there is also an optional DH-HMAC mode [RFC4650], bringing\n   the total number
    of modes to four.  The primary motivation for the\n   MIKEY protocol design is
    low-latency requirements of real-time\n   communication, and thus all the exchanges
    finish in one-half to 1\n   roundtrip; note that this offers no room for security
    parameter\n   negotiation of the key management protocol itself.  In this document,\n
    \  we note that the MIKEY modes defined in [RFC3830] and [RFC4650] are\n   insufficient
    to address some deployment scenarios and common use\n   cases, and we propose
    a new mode called MIKEY-RSA in Reverse mode, or\n   simply MIKEY-RSA-R.  This
    document updates RFC 3830 with the addition\n   of this new mode to that specification.\n"
  - contents:
    - "1.1.  Terminology Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in BCP 14, RFC 2119\n   [RFC2119].\n   Furthermore, this document
      reuses the terminology of the MIKEY\n   specification [RFC3830].\n"
    title: 1.1.  Terminology Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Motivation\n   As noted in the introduction, the MIKEY specification and
    other\n   proposals define four different modes of efficient key management for\n
    \  real-time applications.  Those modes differ from each other in either\n   the
    authentication method of choice (public-key, or symmetric shared\n   key-based),
    or the key establishment method of choice (key download,\n   or key agreement
    using a Diffie-Hellman exchange).  We summarize\n   these modes below, including
    their advantages and shortcomings.  We\n   then discuss the use cases where these
    modes are unusable or\n   inefficient.\n"
  - contents:
    - "2.1.  Description of the MIKEY Modes\n   The PSK mode requires that the Initiator
      and the Responder have a\n   common secret key established offline.  In this
      mode, the Initiator\n   selects a TEK Generation Key (TGK), encrypts it with
      a key derived\n   from the PSK, and sends it to the Responder as part of the
      first\n   message, namely, I_MESSAGE.  The I_MESSAGE is replay protected with\n
      \  timestamps, and integrity protected with another key derived from the\n   PSK.
      \ An optional Verification message from the Responder to the\n   Initiator provides
      mutual authentication.  This mode does not scale\n   well as it requires pre-establishment
      of a shared key between\n   communicating parties; for example, consider the
      use cases where any\n   user may want to communicate to any other user in an
      Enterprise or\n   the Internet at large.  The RSA mode might be more suitable
      for such\n   applications.\n   In the RSA mode, the Initiator selects a TGK,
      encrypts and\n   authenticates it with an envelope key, and sends it to the
      Responder\n   as part of the I_MESSAGE.  The Initiator includes the envelope
      key,\n   encrypted with the Responder's public key, in the I_MESSAGE.  The\n
      \  I_MESSAGE is replay protected with timestamps, and signed with the\n   Initiator's
      public key.  The Initiator's ID, Certificate (CERT), and\n   the Responder's
      ID may be included in the I_MESSAGE.  If the\n   Initiator knows several public
      keys of the Responder, it can indicate\n   the key used in the optional CHASH
      payload.  An optional Verification\n   message from the Responder to the Initiator
      provides mutual\n   authentication.  The RSA mode works well if the Initiator
      knows the\n   Responder's ID and the corresponding CERT (or can obtain the CERT\n
      \  independent of the MIKEY protocol).  RFC 3830 suggests that an\n   Initiator,
      in the event that it does not have the Responder's CERT,\n   may obtain the
      CERT from a directory agent using one or more\n   roundtrips.  However, in some
      cases, the Initiator may not even know\n   the Responder's ID in advance, and
      because of that or for other\n   reasons cannot obtain the Responder's CERT.\n
      \  In addition to the case where the Responder may have several IDs,\n   some
      applications may allow for the Responder's ID to change\n   unilaterally, as
      is typical in telephony (e.g., forwarding).  In\n   those cases and in others,
      the Initiator might be willing to let the\n   other party establish identity
      and prove it via an Initiator-trusted\n   third party (e.g., a Certification
      Authority (CA)).\n   The DH mode or the DH-HMAC mode of MIKEY might be useful
      in cases\n   where the Initiator does not have access to the Responder's exact\n
      \  identity and/or CERT.  In these modes, the two parties engage in an\n   authenticated
      DH exchange to derive the TGK.  On the downside, the DH\n   modes have higher
      computational and communication overhead compared\n   to the RSA and the PSK
      modes.  More importantly, these modes are\n   unsuitable for group key distribution.
      \ The DH-HMAC mode also\n   requires establishment of PSKs between all possible
      communicating\n   entities and thus has similar scaling issues as any PSK-based
      key\n   management protocol.\n   In summary, in some communication scenarios
      -- where the Initiator\n   might not have the correct ID and/or the CERT of
      the Responder --\n   none of the MIKEY modes described in [RFC3830] or [RFC4650]
      are\n   suitable and efficient for multimedia session key establishment.\n"
    title: 2.1.  Description of the MIKEY Modes
  - contents:
    - "2.2.  Use Case Motivating the Proposed Mode\n   In addition to the issues listed
      above, there are some types of\n   applications that motivate the new MIKEY
      mode design proposed in this\n   document.\n   Note that in the MIKEY-RSA mode
      (as in case of the PSK mode), the\n   Initiator proposes the session security
      policy and chooses the TGK.\n   However, it is also possible that the Initiator
      wants to allow the\n   Responder to specify the security policy and send the
      TGK.  Consider\n   for example, the case of a conferencing scenario where the
      convener\n   sends an invitation to a group of people to attend a meeting.  The\n
      \  procedure then might be for the invitees to request group key\n   material
      from the convener by sending a MIKEY I_MESSAGE.  Thus, in\n   the MIKEY definition
      of initiators and responders, the Initiator is\n   asking the Responder for
      keying material.  Note that this mode of\n   operation is in line with the MSEC
      group key management architecture\n   [RFC4046].\n"
    title: 2.2.  Use Case Motivating the Proposed Mode
  title: 2.  Motivation
- contents:
  - '3.  A New MIKEY-RSA Mode: MIKEY-RSA-R

    '
  - contents:
    - "3.1.  Outline\n   The proposed MIKEY mode requires 1 full roundtrip.  The Initiator\n
      \  sends a signed I_MESSAGE to the intended Responder requesting the\n   Responder
      to send the traffic keying material.  The I_MESSAGE MAY\n   contain the Initiator's
      CERT or a link (URL) to the CERT, and\n   similarly the Responder's reply, R_MESSAGE,
      MAY contain the\n   Responder's CERT or a link to it.  The Responder can use
      the\n   Initiator's public key from the CERT in the I_MESSAGE to send the\n
      \  encrypted TGK in the R_MESSAGE.  Upon receiving the R_MESSAGE, the\n   Initiator
      can use the CERT in the R_MESSAGE to verify whether the\n   Responder is in
      fact the party that it wants to communicate to, and\n   accept the TGK.  We
      refer to this protocol as MIKEY-RSA in the\n   reverse mode, or simply as MIKEY-RSA-R.\n
      \  The MIKEY-RSA-R mode exchange is defined as follows:\n   Initiator                                            Responder\n
      \  ---------                                            ---------\n   I_MESSAGE
      = HDR, T, [RAND], [IDi|CERTi], [IDr], {SP}, SIGNi\n   R_MESSAGE = HDR, [GenExt(CSB_ID)],
      T, [RAND], [IDr|CERTr], [SP],\n               KEMAC, PKE, SIGNr\n                    Figure
      1: MIKEY-RSA-R Unicast Mode\n"
    title: 3.1.  Outline
  - contents:
    - "3.2.  Group Communication Using the MIKEY RSA-R Mode\n   For group conferencing
      using MIKEY RSA-R mode, the members receive an\n   invitation to initiate MIKEY
      with the group key server to download\n   the secure session information.  In
      this case, the Responder is\n   either the group sender or group key server.
      \ Group members request\n   group policy and keying material as MIKEY RSA-R
      Initiators.\n   Initiators MUST NOT send the SP payload.  The Responder sends
      all the\n   payloads necessary to distribute the secure group policy as well
      as\n   payloads used in the group key derivation: specifically, the SP\n   payload
      is used to convey the session policy, and the GenExt(CSB-ID),\n   TGK, and the
      RAND payloads selected by the Responder and included in\n   the R_Message are
      used to compute the Secure Realtime Transport\n   Protocol (SRTP) session keys.\n
      \  MIKEY RSA-R for group communication:\n   Initiator                                            Responder\n
      \  ---------                                            ---------\n   I_MESSAGE
      = HDR, T, [RAND], [IDi|CERTi], [IDr],  SIGNi\n   R_MESSAGE = HDR, GenExt(CSB_ID),
      T, RAND, [IDr|CERTr], SP,\n               KEMAC, PKE, SIGNr\n                    Figure
      2: MIKEY-RSA-R in Group Mode\n   Note that the SP payload in the I_MESSAGE is
      not present.  In the\n   R_MESSAGE, the CSB_ID, RAND, and SP payloads are not
      optional.\n"
    title: 3.2.  Group Communication Using the MIKEY RSA-R Mode
  - contents:
    - "3.3.  Preparing RSA-R Messages\n   Preparation and parsing of RSA-R messages
      are as described in\n   Sections 5.2 and 5.3 of RFC 3830.  Error handling is
      described in\n   Section 5.1.2 and replay protection guidelines are in Section
      5.4 of\n   RFC 3830.  In the following, we describe the components of RSA-R\n
      \  messages and specify message processing and parsing rules in addition\n   to
      those in RFC 3830.\n"
    title: 3.3.  Preparing RSA-R Messages
  - contents:
    - "3.4.  Components of the I_MESSAGE\n   MIKEY-RSA-R requires a full roundtrip
      to download the TGKs.  The\n   I_MESSAGE MUST have the MIKEY HDR and the timestamp
      payload for\n   replay protection.  The HDR field contains a CSB_ID (Crypto
      Session\n   Bundle ID) randomly selected by the Initiator.  The V bit MUST be
      set\n   to '1' and ignored by the Responder, as a response is MANDATORY in\n
      \  this mode.  The Initiator SHOULD indicate the number of CSs\n   supported,
      and SHOULD fill in the CS ID map type and CS ID info\n   fields for the RTP/RTCP
      streams it originates.  This is because the\n   sender of the streams chooses
      the SSRC that is carried in the CS ID\n   info field; see Section 6.1.1 of RFC
      3830.  The exception to\n   Initiators not specifying SSRC values is to allow
      the Responder to\n   pick them to avoid SSRC collisions.  Initiators of MIKEY
      messages\n   that do not originate RTP streams MUST specify a '0' as the number
      of\n   CSs supported.  This typically applies to group communication and to\n
      \  the entities in the listen-only mode.\n   The I_MESSAGE MUST be signed by
      the Initiator following the procedure\n   to sign MIKEY messages specified in
      RFC 3830.  The SIGNi payload\n   contains this signature.  Thus, the I_MESSAGE
      is integrity and replay\n   protected.\n   The RAND payload SHOULD be included
      in the I_MESSAGE when MIKEY-RSA-R\n   mode is used for unicast communication.
      \ The reason for recommending\n   the inclusion of the RAND payload in the I_MESSAGE
      for unicast\n   communication is to allow the Initiator to contribute entropy
      to the\n   key derivation process (in addition to the CSB_ID).  When the RAND\n
      \  payload is not included, the Initiator will be relying on the\n   Responder
      to supply all the entropy for SRTP key generation, which is\n   in fact similar
      (but with the reversal of roles) to the MIKEY-RSA\n   mode, where the Responder
      supplies all the entropy.\n   The RAND payload MAY be included when MIKEY-RSA-R
      is used to\n   establish group keys.  However, the RAND payload in the I_MESSAGE\n
      \  MUST NOT be used for MIKEY key generation, in case of group\n   communication.
      \ The Responder MUST include a RAND payload in the\n   R_MESSAGE for TEK generation
      from a TGK when MIKEY-RSA-R is used for\n   group communication.\n   IDi and
      CERTi SHOULD be included, but they MAY be left out when it is\n   expected that
      the peer already knows the Initiating party's ID (or\n   can obtain the certificate
      in some other manner).  For example, this\n   could be the case if the ID is
      extracted from SIP.  For certificate\n   handling, authorization, and policies,
      see Sections 4.3 and 6.7 of\n   RFC 3830.  If CERTi is included, it MUST correspond
      to the private\n   key used to sign the I_MESSAGE.\n   If the Responder has
      multiple identities, the Initiator MAY also\n   include the specific identity,
      IDr, of the Responder with whom\n   communication is desired.  If the Initiator's
      policy does not allow\n   acceptance of an R_MESSAGE from any entity other than
      one that can\n   assert a specific identity, the Initiator MUST include that
      specific\n   identity in an IDr payload in the I_MESSAGE.\n   The Initiator
      MAY also send security policy (SP) payload(s)\n   containing all the security
      policies that it supports.  If the\n   Responder does not support any of the
      policies included, it SHOULD\n   reply with an Error message of type \"Invalid
      SPpar\" (Error no. 10).\n   The Responder has the option not to send the Error
      message in MIKEY\n   if a generic session establishment failure indication is
      deemed\n   appropriate and communicated via other means (see Section 4.1.2 of\n
      \  [RFC4567] for additional guidance).\n   SIGNi is a signature covering the
      Initiator's MIKEY message,\n   I_MESSAGE, using the Initiator's signature key
      (see Section 5.2 of\n   RFC 3830 for the exact definition).  The signature assures
      the\n   Responder that the claimed Initiator has indeed generated the\n   message.
      \ This automatically provides message integrity as well.\n"
    title: 3.4.  Components of the I_MESSAGE
  - contents:
    - "3.5.  Processing the I_MESSAGE\n   Upon receiving an I_MESSAGE of the RSA-R
      format, the Responder MUST\n   respond with one of the following messages:\n
      \  o  The Responder SHOULD send an Error message \"Message type not\n      supported\"
      (Error no. 13), if it cannot correctly parse the\n      received MIKEY message.
      \ Error message format is as specified in\n      Section 5.1.2 of RFC 3830.
      \ Error no. 13 is not defined in RFC\n      3830, and so RFC 3830 compliant
      implementations MAY return \"an\n      unspecified error occurred\" (Error no.
      12).\n   o  The Responder MUST send an R_MESSAGE, if SIGNi can be correctly\n
      \     verified and the timestamp is current; if an SP payload is present\n      in
      the I_MESSAGE the Responder MUST return one of the proposed\n      security
      policies that matches the Responder's local policy.\n   o  If a RAND payload
      is present in the I_MESSAGE, both sides use that\n      RAND payload as the
      RAND value in the MIKEY key computation.  In\n      case of multicast, if a
      RAND payload is present in the I_MESSAGE,\n      the Responder SHOULD ignore
      the payload.  In any case, the\n      R_MESSAGE for multicast communication
      MUST contain a RAND payload\n      and that RAND payload is used for key computation.\n
      \  o  The rest of the error message rules are as described in Section\n      5.1.2
      of RFC 3830, and message processing rules are as described\n      in Section
      5.3 of RFC 3830.\n"
    title: 3.5.  Processing the I_MESSAGE
  - contents:
    - "3.6.  Components of the R_MESSAGE\n   The HDR payload in the R_MESSAGE is formed
      following the procedure\n   described in RFC 3830.  Specifically, the CSB_ID
      in the HDR payload\n   MUST be the same as the one in the HDR of the I_MESSAGE.
      \ The\n   Responder MUST fill in the number of CSs and the CS ID map type and\n
      \  CS ID info fields of the HDR payload.\n   For group communication, all the
      members MUST use the same CSB_ID and\n   CS ID in computing the traffic keying
      material.  Therefore, for group\n   key establishment, the Responder MUST include
      a General Extension\n   Payload containing a new CSB_ID in the R_MESSAGE.  If
      a new CSB_ID is\n   present in the R_MESSAGE, the Initiator and the Responder
      MUST use\n   that value in key material computation.  Furthermore, the CS ID
      map\n   type and CS ID map info MUST be populated by the Responder.  The\n   General
      Extension Payload carrying a CSB_ID MUST NOT be present in\n   case of unicast
      communication.\n   The T payload is exactly the same as that received in the
      I_MESSAGE.\n   If the I_MESSAGE did not include the RAND payload, it MUST be
      present\n   in the R_MESSAGE.  In case it has been included in the I_MESSAGE,
      it\n   MUST NOT be present in the R_MESSAGE.  In group communication, the\n
      \  Responder always sends the RAND payload and in unicast communication,\n   either
      the Initiator or the Responder (but not both) generate and\n   send the RAND
      payload.\n   IDr and CERTr SHOULD be included, but they MAY be left out when
      it\n   can be expected that the peer already knows the other party's ID (or\n
      \  can obtain the certificate in some other manner).  For example, this\n   could
      be the case if the ID is extracted from SIP.  For certificate\n   handling,
      authorization, and policies, see Section 4.3. of RFC 3830.\n   If CERTr is included,
      it MUST correspond to the private key used to\n   sign the R_MESSAGE.\n   An
      SP payload MAY be included in the R_MESSAGE.  If an SP payload was\n   in the
      I_MESSAGE, then the R_MESSAGE MUST contain an SP payload\n   specifying the
      security policies of the secure RTP session being\n   negotiated.  More specifically,
      the Initiator may have provided\n   multiple options, but the Responder MUST
      choose one option per\n   Security Policy Parameter.\n   The KEMAC payload contains
      a set of encrypted sub-payloads and a MAC:\n   KEMAC = E(encr_key, IDr || {TGK})
      || MAC.  The first payload (IDr) in\n   KEMAC is the identity of the Responder
      (not a certificate, but\n   generally the same ID as the one specified in the
      certificate).  Each\n   of the following payloads (TGK) includes a TGK randomly
      and\n   independently chosen by the Responder (and possible other related\n
      \  parameters, e.g., the key lifetime).  The encrypted part is then\n   followed
      by a MAC, which is calculated over the KEMAC payload.  The\n   encr_key and
      the auth_key are derived from the envelope key, env_key,\n   as specified in
      Section 4.1.4. of RFC 3830.  The payload definitions\n   are specified in Section
      6.2 of RFC 3830.\n   The Responder encrypts and integrity protects the TGK with
      keys\n   derived from a randomly or pseudo-randomly chosen envelope key, and\n
      \  encrypts the envelope key itself with the public key of the\n   Initiator.
      \ The PKE payload contains the encrypted envelope key,\n   env_key: PKE = E(PKi,
      env_key).  PKi denotes the Initiator's public\n   key.  Note that, as suggested
      in RFC 3830, the envelope key MAY be\n   cached and used as the PSK for re-keying.\n
      \  To compute the signature that goes in the SIGNr payload, the\n   Responder
      MUST sign:\n   R_MESSAGE (excluding the SIGNr payload itself) || IDi || IDr
      || T.\n   Note that the added identities and timestamp are identical to those\n
      \  transported in the ID and T payloads.\n"
    title: 3.6.  Components of the R_MESSAGE
  - contents:
    - "3.7.  Processing the R_MESSAGE\n   In addition to the processing rules in RFC
      3830, the following rules\n   apply to processing of the R_MESSAGE of MIKEY
      RSA-R mode.\n      If the I_MESSAGE contained a RAND payload, the Initiator
      MUST\n      silently discard an R_MESSAGE that contains a RAND payload.\n      Similarly,
      if the I_MESSAGE did not contain a RAND payload, the\n      Initiator MUST silently
      discard an R_MESSAGE that does not contain\n      a RAND payload.\n      If
      the SP payload contains a policy not specified in the SP\n      message, if
      present, in the I_MESSAGE, such an R_MESSAGE MUST be\n      discarded silently.\n"
    title: 3.7.  Processing the R_MESSAGE
  - contents:
    - "3.8.  Certificate Handling\n   If a Certificate payload is present, the X.509v3
      URL Cert type from\n   Table 6.7.b [RFC3830] is the default method in RSA-R
      mode and MUST be\n   implemented.  The HTTP URL to fetch a certificate as specified
      in RFC\n   2585 [RFC2585] MUST be supported.  Devices are not required to\n
      \  support the FTP URLs.  When retrieving data from the URL,\n   application/pkix-cert
      MIME type with X.509 certificates DER-encoded\n   MUST be supported.\n   The
      RECOMMENDED way of doing certificate validation is by using OCSP\n   as specified
      by RFC 2560 [RFC2560].  When OCSP is used and nextUpdate\n   time is present
      in the response, it defines how long the certificate\n   can be considered valid
      and cached.  If OCSP is not supported or\n   nextUpdate time is not present
      in the response, the certificate cache\n   timeout is a matter of local policy.\n
      \  The communicating peers (such as SIP User Agents for instance) MAY\n   choose
      to create a URL pointing to certificate files residing on\n   themselves or
      by appending their ID and a \".cer\" extension to a\n   provisioned root path
      to the certificate.  Other methods MAY also be\n   used, subject to local policy.\n"
    title: 3.8.  Certificate Handling
  - contents:
    - "3.9.  Additions to RFC 3830 Message Types and Other Values\n   This document
      introduces two new message types (Table 6.1a of RFC\n   3830), an Error no (Table
      6.12 of RFC 3830), and a general extension\n   payload (Table 6.15 of RFC 3830).
      \ This section specifies those\n   additions.\n"
    - contents:
      - "3.9.1.  Modified Table 6.1a from RFC 3830\n   Modified Table 6.1a from RFC
        3830:\n   Data type   | Value |                           Comment\n   ------------------------------------------------------------------\n
        \  Pre-shared  |   0   | Initiator's pre-shared key message\n   PSK ver msg
        |   1   | Verification message of a Pre-shared key msg\n   Public key  |   2
        \  | Initiator's public-key transport message\n   PK ver msg  |   3   | Verification
        message of a public-key message\n   D-H init    |   4   | Initiator's DH exchange
        message\n   D-H resp    |   5   | Responder's DH exchange message\n   Error
        \      |   6   | Error message\n   DHHMAC init |   7   | DH HMAC message 1\n
        \  DHHMAC resp |   8   | DH HMAC message 2\n   RSA-R I_MSG |   9   | Initiator's
        RSA-R public-key message (NEW)\n   RSA-R R_MSG |   10  | Responder's RSA-R
        public-key message (NEW)\n               Figure 3: Table 6.1a from RFC 3830
        (Revised)\n"
      title: 3.9.1.  Modified Table 6.1a from RFC 3830
    - contents:
      - "3.9.2.  Modified Table 6.12 from RFC 3830\n   Modified Table 6.12 from RFC
        3830:\n         Error no          | Value | Comment\n         -------------------------------------------------------\n
        \        Auth failure      |     0 | Authentication failure\n         Invalid
        TS        |     1 | Invalid timestamp\n         Invalid PRF       |     2
        | PRF function not supported\n         Invalid MAC       |     3 | MAC algorithm
        not supported\n         Invalid EA        |     4 | Encryption algorithm not
        supported\n         Invalid HA        |     5 | Hash function not supported\n
        \        Invalid DH        |     6 | DH group not supported\n         Invalid
        ID        |     7 | ID not supported\n         Invalid Cert      |     8 |
        Certificate not supported\n         Invalid SP        |     9 | SP type not
        supported\n         Invalid SPpar     |    10 | SP parameters not supported\n
        \        Invalid DT        |    11 | not supported Data type\n         Unspecified
        error |    12 | an unspecified error occurred\n         Unsupported       |
        \      |\n          message type     |    13 | unparseable MIKEY message (NEW)\n
        \              Figure 4: Table 6.12 from RFC 3830 (Revised)\n"
      title: 3.9.2.  Modified Table 6.12 from RFC 3830
    - contents:
      - "3.9.3.  Modified Table 6.15 from RFC 3830\n   Modified Table 6.15 from RFC
        3830:\n     Type       | Value | Comments\n     ---------------------------------------\n
        \    Vendor ID  |     0 | Vendor specific byte string\n     SDP IDs    |     1
        | List of SDP key mgmt IDs (allocated for use in\n                |       |
        \  [RFC4567])\n     TESLA I-Key|     2 |   [RFC4442]\n     Key ID     |     3
        | information on type and identity of keys\n                |       |   [RFC4563])\n
        \    CSB_ID     |     4 | Responder's modified CSB_ID (group mode)\n               Figure
        5: Table 6.15 from RFC 3830 (Revised)\n"
      title: 3.9.3.  Modified Table 6.15 from RFC 3830
    title: 3.9.  Additions to RFC 3830 Message Types and Other Values
  title: '3.  A New MIKEY-RSA Mode: MIKEY-RSA-R'
- contents:
  - "4.  Applicability of the RSA-R and RSA Modes\n   MIKEY-RSA-R mode and RSA mode
    are both very useful: deciding on which\n   mode to use depends on the application.\n
    \  The RSA-R mode is useful when you have reasons to believe that the\n   Responder
    may be a different party than the one to which the MIKEY\n   I_MESSAGE was sent.
    \ This is quite common in telephony and multimedia\n   applications where the
    session or the call can be retargeted or\n   forwarded.  When the security policy
    allows it, leaving some\n   flexibility for the Initiator to see who the Responder
    may turn out\n   to be, before making the decision to continue or discontinue
    the\n   session, may be appropriate.  In such cases, the main objective of\n   the
    Initiator's RSA-R message is to present its public key/\n   certificate to the
    Responder, and wait for a Responder to present its\n   identity.\n   The second
    scenario is when the Initiator already has the Responder's\n   certificate but
    wants to allow the Responder to come up with all the\n   keying material.  This
    is applicable in conferences where the\n   Responder is the key distributor and
    the Initiators contact the\n   Responder to initiate key download.  Notice that
    this is quite\n   similar to the group key download model as specified in GDOI\n
    \  [RFC3547], GSAKMP [RFC4535], and GKDP [GKDP] protocols (also see\n   [RFC4046]).
    \ The catch, however, is that the participating entities\n   must know that they
    need to contact a well-known address as far as\n   that conferencing group is
    concerned.  Note that they only need the\n   Responder's address, not necessarily
    its CERT.  If the group members\n   have the Responder's CERT, there is no harm;
    they simply do not need\n   the CERT to compose the I_MESSAGE.\n   The RSA mode
    is useful when the Initiator knows the Responder's\n   identity and CERT.  This
    mode is also useful when the key exchange is\n   happening in an established session
    with a Responder (for example,\n   when switching from a non-secure mode to a
    secure mode), and when the\n   policy is such that it is only appropriate to establish
    a MIKEY\n   session with the Responder that is targeted by the Initiator.\n"
  - contents:
    - "4.1.  Limitations\n   The RSA-R mode may not easily support 3-way calling,
      under the\n   assumptions that motivated the design.  An extra message may be\n
      \  required compared to the MIKEY-RSA mode specified in RFC 3830.\n   Consider
      that A wants to talk to B and C, but does not have B's or\n   C's CERT.  A might
      contact B and request that B supply a key for a\n   3-way call.  Now if B knows
      C's CERT, then B can simply use the\n   MIKEY-RSA mode (as defined in RFC 3830)
      to send the TGK to C.  If\n   not, then the solution is not straightforward.
      \ For instance, A might\n   ask C to contact B or itself to get the TGK, in
      effect initiating a\n   3-way exchange.  It should be noted that 3-way calling
      is typically\n   implemented using a bridge, in which case there are no issues
      (it\n   looks like 3 point-to-point sessions, where one end of each session\n
      \  is a bridge mixing the traffic into a single stream).\n"
    title: 4.1.  Limitations
  title: 4.  Applicability of the RSA-R and RSA Modes
- contents:
  - "5.  Security Considerations\n   We offer a brief overview of the security properties
    of the exchange.\n   There are two messages: the I_MESSAGE and the R_MESSAGE.
    \ The\n   I_MESSAGE is a signed request by an Initiator requesting the\n   Responder
    to select a TGK to be used to protect multimedia (e.g.,\n   Secure RTP or SRTP
    [RFC3711]) sessions.\n   The message is signed, which assures the Responder that
    the claimed\n   Initiator has indeed generated the message.  This automatically\n
    \  provides message integrity as well.\n   There is a timestamp in the I_MESSAGE,
    which when generated and\n   interpreted in the context of the MIKEY specification
    assures the\n   Responder that the request is live and not a replay.  Indirectly,\n
    \  this also provides protection against a denial of service (DoS)\n   attack
    in that the I_MESSAGE must itself be signed.  The Responder,\n   however, would
    have to verify the Initiator's signature and the\n   timestamp, and thus would
    spend significant computing resources.  It\n   is possible to mitigate this by
    caching recently received and\n   verified requests.\n   Note that the I_MESSAGE
    in this method basically equals DoS\n   protection properties of the DH method
    and not the public-key method\n   as there are no payloads encrypted by the Responder's
    public key in\n   the I_MESSAGE.  If IDr is not included in the I_MESSAGE, the\n
    \  Responder will accept the message and a response (and state) would be\n   created
    for the malicious request.\n   The R_MESSAGE is quite similar to the I_MESSAGE
    in the MIKEY-RSA mode\n   and has all the same security properties.\n   When using
    the RSA-R mode, the Responder may be a different party\n   than the one to which
    the MIKEY I_MESSAGE was sent.  It is the\n   responsibility of the Initiator to
    verify that the identity of the\n   Responder is acceptable (based on its local
    policy) if it changes\n   from the party to which the MIKEY I_MESSAGE was sent,
    and to take\n   appropriate action based on the outcome.  In some cases, it could
    be\n   appropriate to accept a Responder's identity if it can be strongly\n   authenticated;
    in other cases, a blacklist or a whitelist may be\n   appropriate.\n   When both
    unicast and multicast streams need to be negotiated, it is\n   RECOMMENDED to
    use multiple instances of MIKEY-RSA-R rather than a\n   single instance in group
    mode.  This is to avoid potential key reuse\n   with counter mode.\n"
  - contents:
    - "5.1.  Impact of the Responder Choosing the TGK\n   In the MIKEY-RSA or PSK
      modes, the Initiator chooses the TGK, and the\n   Responder has the option to
      accept the key or not.  In the RSA-R mode\n   for unicast communication, the
      RECOMMENDED mode of operation is for\n   the Initiator and the Responder to
      contribute random information in\n   generating the TEK (RAND from the Initiator
      and the TGK from the\n   Responder).  For group communication, the sender (MIKEY
      Responder)\n   will choose the TGK and the RAND; note that it is in the interest
      of\n   the sender to provide sufficient entropy to TEK generation since the\n
      \  TEK protects data sent by the Responder.\n   Thus, in case of unicast communication,
      the RSA-R mode is slightly\n   better than the RSA mode in that it allows the
      Initiator as well as\n   the Responder to contribute entropy to the TEK generation
      process.\n   This comes at the expense of the additional message.  However,
      as\n   noted earlier, the new mode needs the additional message to allow\n   simpler
      provisioning.\n"
    title: 5.1.  Impact of the Responder Choosing the TGK
  - contents:
    - "5.2.  Updates to Security Considerations in RFC 3830\n   MIKEY requires clock
      synchronization, and a secure network clock\n   synchronization protocol SHOULD
      be used, e.g., [ISO3] or secure NTP\n   [NTPv4].\n   RFC 3830 has additional
      notes on the security properties of the MIKEY\n   protocol, key derivation functions,
      and other components.\n"
    title: 5.2.  Updates to Security Considerations in RFC 3830
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   The following IANA assignments were added to the
    MIKEY registry:\n      Added to \"Error payload name spaces:\"\n         Unsupported
    message type ------- 13\n      Added to \"Common Header payload name spaces:\"\n
    \        RSA-R I_MSG ------------- 9\n         RSA-R R_MSG ------------- 10\n
    \     Added to \"General Extensions payload name spaces:\"\n         CSB_ID -----------------
    4\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   Many thanks to Mark Baugher, Steffen Fries, Russ Housley,
    Cullen\n   Jennings, and Vesa Lehtovirta for their reviews of earlier version
    of\n   this document.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2560]  Myers, M., Ankney, R., Malpani, A., Galperin, S., and C.\n
      \             Adams, \"X.509 Internet Public Key Infrastructure Online\n              Certificate
      Status Protocol - OCSP\", RFC 2560, June 1999.\n   [RFC2585]  Housley, R. and
      P. Hoffman, \"Internet X.509 Public Key\n              Infrastructure Operational
      Protocols: FTP and HTTP\",\n              RFC 2585, May 1999.\n   [RFC3830]
      \ Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n              Norrman,
      \"MIKEY: Multimedia Internet KEYing\", RFC 3830,\n              August 2004.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC3547]  Baugher, M., Weis, B., Hardjono,
      T., and H. Harney, \"The\n              Group Domain of Interpretation\", RFC
      3547, July 2003.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and K.\n              Norrman, \"The Secure Real-time Transport Protocol
      (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4046]  Baugher, M., Canetti,
      R., Dondeti, L., and F. Lindholm,\n              \"Multicast Security (MSEC)
      Group Key Management\n              Architecture\", RFC 4046, April 2005.\n
      \  [RFC4650]  Euchner, M., \"HMAC-Authenticated Diffie-Hellman for\n              Multimedia
      Internet KEYing (MIKEY)\", RFC 4650, September\n              2006.\n   [RFC4535]
      \ Harney, H., Meth, U., Colegrove, A., and G. Gross,\n              \"GSAKMP:
      \ Group Secure Association Key Management\n              Protocol\", RFC 4535,
      June 2006.\n   [GKDP]     Dondeti, L., \"GKDP: Group Key Distribution Protocol\",
      Work\n              in Progress, March 2006.\n   [RFC4567]  Arkko, J., Lindholm,
      F., Naslund, M., Norrman, K., and E.\n              Carrara, \"Key Management
      Extensions for Session\n              Description Protocol (SDP) and Real Time
      Streaming\n              Protocol (RTSP)\", RFC 4567, July 2006.\n   [RFC4442]
      \ Fries, S. and H. Tschofenig, \"Bootstrapping Timed\n              Efficient
      Stream Loss-Tolerant Authentication (TESLA)\",\n              RFC 4442, March
      2006.\n   [RFC4563]  Carrara, E., Lehtovirta, V., and K. Norrman, \"The Key
      ID\n              Information Type for the General Extension Payload in\n              Multimedia
      Internet KEYing (MIKEY)\", RFC 4563, June 2006.\n   [NTPv4]    Burbank, J.,
      \"The Network Time Protocol Version 4 Protocol\n              Specification\",
      Work in Progress, May 2006.\n   [ISO3]     ISO, \"ISO/IEC 18014 Information
      technology - Security\n              techniques - Time-stamping services, Part
      1-3\", 2002.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Dragan Ignjatic\n   Polycom\n   1000 W. 14th Street\n
    \  North Vancouver, BC  V7P 3P3\n   Canada\n   Phone: +1 604 982 3424\n   EMail:
    dignjatic@polycom.com\n   Lakshminath Dondeti\n   QUALCOMM\n   5775 Morehouse
    drive\n   San Diego, CA  92121\n   US\n   Phone: +1 858 845 1267\n   EMail: ldondeti@qualcomm.com\n
    \  Francois Audet\n   Nortel\n   4655 Great America Parkway\n   Santa Clara, CA
    \ 95054\n   US\n   Phone: +1 408 495 3756\n   EMail: audet@nortel.com\n   Ping
    Lin\n   Nortel\n   250 Sidney St.\n   Belleville, Ontario  K8P3Z3\n   Canada\n
    \  Phone: +1 613 967 5343\n   EMail: linping@nortel.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n
    \  PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
