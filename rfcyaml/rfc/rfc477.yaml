- title: __initial_text__
  contents:
  - "            NIC 16306\n                       Remote Job Service at UCSB\n"
- title: Introduction
  contents:
  - "Introduction\n   This RFC is the follow-on document to RFC #436, which briefly\n\
    \   described UCSB'S RJS.  This document restates the essence of the\n   official\
    \ RJE protocol (RFC #407), and documents in detail UCSB's\n   implementation of\
    \ it.\n   The program described here is available under socket 5 at UCSB, and\n\
    \   supports a subset of the official protocol.  Specifically, no checks\n   are\
    \ made for RJE control cards in the input file, jobs may not be\n   batched in\
    \ the input file, only output file dispositions of discard\n   and transmit-and-discard\
    \ are implemented, no restart markers are sent\n   on output in FTP blocked mode,\
    \ and several of the commands are not\n   implemented.  There are also other ways\
    \ in which RJS is known to be\n   less than ideal.  For example, whenever any\
    \ error is detected while\n   processing a job, such as the output's destination\
    \ host being dead,\n   the job is abandoned, and any further output deleted. \
    \ A re-write of\n   RJS is scheduled for the near future (in about six months),\
    \ and many\n   of these deficiencies will be corrected at that time.   (Any\n\
    \   suggestions for further improvements are more than welcome, and may\n   be\
    \ made through the Journal to MCK, by mail to the author at the UCSB\n   Computer\
    \ Center, or by telephone at (8O5) 961-3454.)\n   In addition to the deviations\
    \ from the protocol stated above, several\n   modifications have been made to\
    \ increase user convience.\n   Specifically, the INACCT, OUTACCT, and ACCT commands\
    \ have been added\n   to accommodate users of TENEX and other systems requiring\
    \ an account\n   number, OUTPATH has been added as a synonym for OUT and INUSER\
    \ for\n   INID, and the BYE command does not cause an ABORT.  Also, in\n   recognition\
    \ of the fact that the official protocol is biased heavily\n   toward use by programs,\
    \ and is therefore rather cumbersome for human\n   users, an alternate, optional,\
    \ command syntax has been provided.  An\n   attempt was made to make this alternate\
    \ syntax, called 'local\n   syntax', as 'natural' as possible to a human user.\
    \  It also provides\n   some features not available with the standard syntax.\n"
- title: Service Provided
  contents:
  - "Service Provided\n   The UCSB Computer Center operates an IBM 360/75 and runs\
    \ OS MVT\n   release 21.0 and HASP.  All batch jobs at UCSB enter the system\n\
    \   through HASP, and therefore RJS acts as an interface between the user\n  \
    \ and HASP.  RJS's function is to provide the user with a HASP virtual\n   RJE\
    \ terminal, consisting of card reader, card punch, line printer and\n   operator's\
    \ console, and to manage the first three of these for the\n   user in response\
    \ to commands issued by him.  By virtue of the fact\n   that RJS maintains the\
    \ correspondence between a particular user and\n   the HASP RJE terminal owned\
    \ by him, the user may issue commands to\n   alter the status of those jobs submitted\
    \ by him through his RJE\n   terminal.  This may be done even if the user has\
    \ logged out of RJS\n   and back in again, possibly from another site.\n   The\
    \ sequence of events involved in using RJS are as follows.  First,\n   the user\
    \ logs in, specifying a user name, password, and account\n   number.  In addition\
    \ to indicating how subsequent use of RJS is to be\n   billed, this accounting\
    \ information identifies the owner of a\n   particular RJE terminal.  That is,\
    \ the association between user name\n   and HASP virtual RJE terminal is unique,\
    \ and only one individual is\n   allowed logged in under a given user name at\
    \ a time.\n   At present, billing within RJS is not implemented, and therefore\
    \ the\n   login account number is completely arbitrary, and user name and\n  \
    \ password are relatively so.  The first time a given user name is\n   used, any\
    \ password may be chosen; thereafter, as long as the user\n   name is known to\
    \ RJS, the same password must be used.  A user name\n   remains known to RJS while\
    \ he is logged in, and when he is not, as\n   long as he owns at least one job\
    \ known to PJS.  Otherwise, the user\n   name is discarded.\n   After a user is\
    \ logged in, he specifies input and output file\n   information and requests input\
    \ retrieval be initiated.  He may then\n   log out or not as he wishes; specifically\
    \ he is not required to\n   remain logged in during source file retrieval.  A\
    \ job can completed\n   abnormally at any stage of processing, or normally, after\
    \ storage of\n   the last of its output.  In any case, the circumstances of the\
    \ final\n   disposition of the job are displayed to the user immediately if he\
    \ is\n   logged in, saved for a period after its completion, and are available\n\
    \   to him on request the next time he logs in.  This status information\n   is\
    \ retained for at least a fixed period (currently two days), but\n   will be retained\
    \ longer as long as sufficient storage space is\n   available for it.\n"
- title: RJS Commands - General Information
  contents:
  - "RJS Commands - General Information\n   In order to simplify specification of\
    \ job parameters, RJS maintains a\n   set of accumulators for these parameters.\
    \  Each accumulator is\n   initially empty, and may have its contents set or referred\
    \ to by\n   various commands.  The following parameter accumulators are\n   maintained\
    \ for each user (user name, password, and account together\n   are termed accounting\
    \ parameters):  login accounting parameter (those\n   specified either in the\
    \ LOGIN or the USER, PASS, and ACCT commands),\n   source pathname, print pathname,\
    \ punch pathname, source accounting\n   parameter, print accounting parameter,\
    \ and punch accounting\n   parameter.  In addition, associated with each job are\
    \ the parameters\n   source, print, and punch pathname, and source, print, and\
    \ punch\n   accounting parameters.\n   When the TELNET connections are first opened,\
    \ RJS sends the user a\n   herald message of the form '300 UCSB RJS (VER.  <date>)\
    \ TTY\n   <integer>.', where <date> identifies the current version of RJS, and\n\
    \   <integer> identifies the user's terminal in the sense that each\n   TELNET\
    \ connection is assigned a unique TTY number.\n   During the process of running\
    \ a job, any of several spontaneous job\n   status messages may be displayed to\
    \ the user.  They are '240 INPUT\n   RETRIEVAL FOR JOB <jobid> HAS BEGUN.', displayed\
    \ when the input\n   connection(s) have been established, '261 JOB <jobid> HAS\
    \ COMPLETED\n   EXECUTION.', when the first of the job's printed output has been\n\
    \   received from HASP, '466 PRINTED [or PUNCHED] OUTPUT FROM UNKNOWN JOB\n  \
    \ (HASP JOB NUMBER <integer>) IS BEING DISCARDED.', if printed or\n   punched\
    \ output is received from HASP over the user's line for a job\n   not known to\
    \ RJS, and messages explaining errors such as ICP/RFC\n   failure, invalid job\
    \ card, null source deck, missing pathname, and\n   data transfer network errors\
    \ (see Appendix B for for a list of\n   possible reply id's).  In addition, while\
    \ in local syntax, the user\n   may receive messages from HASP over his virtual\
    \ operator's console.\n   Some are responses to HASP commands issued by the user,\
    \ and others\n   are spontaneous messages.   All, however, are asynchronous to\
    \ the\n   entering of other RJS commands.\n   Certain general rules hold for both\
    \ sets of syntax.  They are as\n   follows:\n      1. The character pair CR-LF\
    \ is used as command accept to terminate\n         commands.   Other occurrences\
    \ of these two characters are\n         ignored, and may be used as desired for\
    \ local carriage control.\n      2. Any number of blanks are permitted before\
    \ or after any\n         syntactic unit (including the first and last).\n    \
    \  3. Upper and lower case alphabetics are treated identically\n         everywhere\
    \ except in <filename>.\n      4. Whenever a switch is made to the syntax not\
    \ in effect, the\n         current TELNET modes (full or halfduplex, character\
    \ or line at\n         a time) are saved, and reinstated when the current syntax\
    \ is\n         again entered.\n   In the syntactic descriptions below, the following\
    \ notation is used:\n      'text'             denotes literal text (quotes not\
    \ part of text)\n      <unit>             denotes name of syntactic unit\n   \
    \   <a>_<b>            denotes choice of syntactic units <a> or <b>\n      [<a>]\
    \              denotes optional syntactic unit\n      (<a><b><c>)        denotes\
    \ group of syntactic units treated as a\n                         whole\n    \
    \  =                  syntactic unit at left defined by statement on\n       \
    \                  right\n   The following general syntactic definitions are hereby\
    \ made:\n      <CA>                = command accept\n      <user name >      \
    \  = a string of 1 to 8 alphameric characters\n      <password>          = a string\
    \ of 1 to 8 alphameric characters\n      <account>           = a string of 1 to\
    \ 6 alphameric characters\n      <jobid>             = a string of 1 to 8 alphameric\
    \ characters,\n                            the first of which is alphabetic.\n"
- title: Description of RJS Commands, Standard Syntax
  contents:
  - "Description of RJS Commands, Standard Syntax\n   The following is a list of the\
    \ commands supported in the standard\n   syntax.  Where not specified, the command's\
    \ response is '200 OK'.  In\n   those cases where it is stated that the user must\
    \ be logged in, the\n   response '504 LOGIN PLEASE.'  is displayed if the user\
    \ is not logged\n   in.\n   'USER' ['='] <user name> <CA>\n   Specifies the user's\
    \ user name for accounting purposes, initiates\n   login, and initializes the\
    \ source, print, and punch user name\n   accumulators to <user name>.  To complete\
    \ login, this command must be\n   followed by a successful PASS command.  The\
    \ only other command\n   allowed before the user is logged in is BYE.  The response\
    \ to a\n   syntactically valid USER command is always '330 ENTER PASSWORD'\n \
    \  'PASS' ['='] (password> <CA>\n   Specifies the user's password to gain access\
    \ to the user's account,\n   completes the login initiated by a previous USER\
    \ command, and\n   initializes the source, print, and punch password accumulators\
    \ to\n   <password>.  The response to a successful PASS command is '230 USER\n\
    \   <user name> OWNS REMOTE TERMINAL <integer>.', where <integer> is the\n   number\
    \ of the HASP virtual RJE terminal owned by the user.  The\n   following error\
    \ replies are possible:   '431 NEW USERS ARE NOT BEING\n   ACCEPTED AT THIS TIME.'\
    \ if there is no free HASP terminal to assign\n   to the user (there is currently\
    \ a maximum of 10), or if there are\n   insufficient other resources available\
    \ to support another user; '431\n   INCORRECT PASSWORD.' if the specified <password>\
    \ is not that assigned\n   to the previously specified <user name>; '431 ANOTHER\
    \ USER IS LOGGED\n   IN AS <user name>.' - only one user is allowed logged in\
    \ with a given\n   <user name> at a time.\n   'ACCT' ['='] <account> <CA>\n  \
    \ Specifies the UCSB Computer Center account number to which the user's\n   use\
    \ of RJS is to be billed, and initializes the source, print, and\n   punch account\
    \ accumulators to <account>.  The response to a\n   syntactically correct ACCT\
    \ command is '200 OK'.\n   As previously stated, RJS billing is yet to be implemented,\
    \ and\n   therefore the ACCT command is optional.  Users and writers of user\n\
    \   processes are warned, however, that it will eventually be required,\n   and\
    \ that at that point, the PASS command will return a reply id of\n   330, and\
    \ the ACCT command will have those replies listed above under\n   PASS.\n   'BYE'\
    \ <CA>\n   Logs the user out and closes the TELNET connections to him,\n   regardless\
    \ of whether there are any file transfers in progress; if\n   there are, they\
    \ continue unaltered.  The response to a BYE Command is\n   always '231 LOGOUT\
    \ C0MPLETED; TRANSFERS (IF ANY) CONTINUE.', followed\n   by a continuation line\
    \ of 'TTY <integer> IS DISCONNECTED.'\n   'STATUS' <CA>\n   Lists the user names\
    \ of those users currently known to RJS.  The\n   response is either '100 NO USERS\
    \ ARE KNOWN TO RJS' or '10O THE\n   FOLLOWING USERS ARE KNOWN TO RJS:', followed\
    \ by one or more lines,\n   each beginning with a continuation reply id of four\
    \ blanks, giving a\n   remote terminal number, the user name of the user who owns\
    \ that\n   terminal, and the name of the site from which he last logged in.\n\
    \   'SYNTAX' <CA>\n   Causes the current command syntax to become local syntax.\
    \  The TELNET\n   modes (full or half duplex, character or line at a time) most\n\
    \   recently in effect in local syntax again become effective.  RJS\n   responds\
    \ with the local syntax prompt character (currently number\n   sign, '#').\n \
    \  The remaining commands require the user to be logged in.\n   'REINIT' <CA>\n\
    \   Resets to empty the source, print, and punch accounting parameter,\n   the\
    \ source, print, and punch pathname, and the login accounting\n   parameter accumulators.\
    \  The response to a REINIT command is always\n   '204 OK'.\n   ('INUSER' _ 'INID')\
    \ ['='] <user name> <CA>\n   Sets the source user name accumulator to (user name>.\n\
    \   'INPASS'  ['='] <password> <CA>\n   Sets the source password accumulator to\
    \ <password>.\n   'INACCT'  ['='] <account> <CA>\n   Sets the source account accumulator\
    \ to <account>.\n   'OUTUSER' ['='] <user name> <CA>\n   Sets the print and punch\
    \ user name accumulators to <user name>.\n   'OUTPASS' ['='] <password> <CA>\n\
    \   Sets the print and punch password accumulators to <password>.\n   'OUTACCT'\
    \ <account> <CA>\n   Sets the print and punch account accumulators to <account>.\n\
    \   'INPATH' ['='] <pathname> <CA>\n   <pathname> = <file> _ <socket>\n   <socket>\
    \ = [<host addr> ','] <socket number> <attributes>\n   <file> = <host addr> <attributes>\
    \ '/' <filename>\n   <host addr> = <integer>\n   <socket number> = <integer>\n\
    \   <integer> = <decimal integer> _ ('D' <decimal integer>) _\n   ('H' <hexadecimal\
    \ integer>) _ ('X' <hexadecimal integer>) _\n   ('O' <octal integer>)\n   <attributes>\
    \ = ':T' _ ':A' _ ':N' _ ':' _ <null> _ ':E' _\n   ':TE' _ ':AE' _ ':NE'\n   <filename>\
    \ = 1 to 16 ASCII characters, excluding CR and LF\n   (codes 0 through 127, excluding\
    \ 10 and 13)\n   Sets the source pathname accumulator to <pathname>.  The <pathname>\n\
    \   is the means for specifying a file's source or destination; its\n   semantics\
    \ are as follows:\n      1. Specification of <socket> indicates that RJS will\
    \ establish a\n         simplex connection to the stated socket (RJS issuing the\n\
    \         CONNECT, user issuing a LISTEN).  The data is then transferred\n   \
    \      over this connection, with CLOSE signaling end of file.\n      2. If <host\
    \ addr> in <socket> is defaulted, the host containing\n         the TELNET user\
    \ will be assumed.\n      3. Specification of <file> indicates that RJS will contact\
    \ the\n         standard FTP server socket (currently socket 3) at the stated\n\
    \         host, and transfer the data according to the File Transfer\n       \
    \  Protocol.  The <file name> referred to here corresponds to the\n         term\
    \ <pathname> used in the FTP specification document, RFC\n         #354.\n   \
    \   4. The type of carriage control and the data code used are\n         determined\
    \ by <attributes>.  The meaning of this parameter is\n         as follows:\n \
    \        ':T'        ASCII code, TELNET carriage control\n         ':A'      \
    \  ASCII code, ASA carriage control\n         ':N'        ASCII code, no carriage\
    \ control\n         ':'         identical to ':N' for input, ':A' for output\n\
    \         <null>      identical to ':N' for input, ':A' for output\n         ':E'\
    \        identical to ':NE' for input, ':AE' for output\n         ':TE'      \
    \ EBCDIC code, TELNET carriage control\n         ':AE'       EBCDIC code, ASA\
    \ carriage control\n         ':NE'       EBCDIC code, no carriage control\n  \
    \       Detailed descriptions of the transfer modes may be found\n         below\
    \ under 'RJS File Transfer.'\n   ('OUTPATH' _ 'OUT') <output file> '=' <disp>\
    \ <CA>\n   <output file> = 'A' _ 'B' _ <null>\n   <disp> = <pathname> _ '(H)'\
    \ _ ('(S)' (pathname>) _ '(D)'\n   Stores <disp> in the print pathname accumulator\
    \ if <output file> is\n   either 'A' or <null>, or in the punch pathname accumulator\
    \ if <output\n   file> is 'B'.  The meanings of the options for <disp> are as\
    \ follows:\n   <pathname>            transmit-and-discard - the file is sent and\n\
    \                         then deleted\n   '(H)'                 hold only - the\
    \ file is not sent but rather\n                         held for user intervention\n\
    \   '(S)' <pathname>      save - the file is sent and then held for user\n   \
    \                      intervention\n   '(D)'                 discard - the file\
    \ is deleted as soon as it is\n                         produced\n   'INPUT' <CA>\n\
    \   Creates a job, stores with it the contents of the source, print, and\n   punch\
    \ accounting parameter and pathname accumulators, and places it\n   in a queue\
    \ within RJS of jobs owned by the user awaiting source file\n   transfer.  When\
    \ it becomes the first or only job in this queue, the\n   retrieval of its source\
    \ file is initiated.  A job identifier\n   ('jobid') is assigned to the job and\
    \ displayed to the user.  The\n   contents of the source and print pathname accumulators\
    \ must have been\n   set by INPATH and OUTPATH commands previous to the INPUT\
    \ command.  If\n   successful, the message '260 ASSIGNED JOBID IS <jobid>.' is\n\
    \   displayed, where <jobid> is that which may used in subsequent RJS\n   commands\
    \ to identify this particular job.  If the user is found to\n   own the maximum\
    \ number of jobs (currently 5), an attempt is made to\n   satisfy the request\
    \ by finding the oldest of the user's jobs that has\n   completed processing.\
    \  If this can be done, the old job is deleted,\n   and the response to the command\
    \ is '260 JOB <old jobid> IS BEING\n   DISCARDED TO MAKE ROOM FOR THE NEW JOB.',\
    \ followed by a continuation\n   line of 'ASSIGNED JOB ID IS <new jobid>.'  The\
    \ following error\n   responses are possible:  '360 SOURCE PATHNAME HAS NOT BEEN\n\
    \   SPECIFIED.', '505 PRINT PATHNAME HAS NOT BEEN SPECIFIED.', '504 NEW\n   JOBS\
    \ ARE NOT BEING ACCEPTED AT THIS TIME.', and '504 USER (user name>\n   ALREADY\
    \ OWNS THE MAXIMUM NUMBER OF JOBS.'\n   'CHANGE' <jobid> <output file> '=' <disp>\
    \ <CA>\n   Stores <disp> as the print pathname of job <jobid> if <output file>\n\
    \   is either 'A', or <null>, or as the punch pathname if <output file>\n   is\
    \ 'B', if the appropriated file transfer has not yet begun.  The\n   following\
    \ error replies are possible:  '464 JOB <jobid> NOT FOUND.',\n   '5O4 JOB <jobid>\
    \ IS ALREADY BEING, OR HAS BEEN, PRINTED.', if <output\n   file> is 'A', '504\
    \ JOB <jobid> IS ALREADY BEING OR HAS BEEN,\n   PUNCHED.', if <output file> is\
    \ 'B', and '464 USER <user name> DOES\n   NOT OWN JOB <jobid>.'\n   'STATUS' <jobid>\
    \ <CA>\n   Causes the status of the job known to RJS as <jobid> to be displayed.\n\
    \   Included in this display are in which stage of RJS processing the job\n  \
    \ is ('BEING READ', 'IN EXECUTION', 'BEING PRINTED', 'BEING PUNCHED',\n   or 'HAS\
    \ COMPLETED'), the pathname information (accounting parameters,\n   host name,\
    \ socket number, attributes, disposition, and filename) for\n   those files (source,\
    \ print and punch) that have been supplied for the\n   job, and if the job has\
    \ failed at some stage of RJS processing, an\n   explanation of the failure. \
    \ The possible responses are '464 JOB\n   <jobid> NOT FOUND.', and a line with\
    \ reply code 161 followed by zero\n   or more continuation lines explaining the\
    \ status of the job.\n   'CANCEL' <jobid> <CA>\n   Causes processing of the job\
    \ known to RJS as <jobid> to terminate\n   immediately, and all record of it to\
    \ be deleted.  If FTP data and/or\n   command connections are pending or established,\
    \ they are closed; if\n   the job is in execution, an OS CANCEL command is issued\
    \ to terminate\n   execution.  Any output from the job is lost, and a subsequent\
    \ request\n   for status of job <jobid> will return the diagnostic that the job\
    \ is\n   not found.  The successful responses are '262 JOB <jobid> DELETED.'\n\
    \   and '262 JOB <jobid> WILL BE DELETED AS SOON AS POSSIBLE.'; the\n   possible\
    \ failure responses are '464 JOB NOT FOUND.' and '464 USER\n   <user name> DOES\
    \ NOT OWN JOB <jobid>.'\n   The following standard RJS commands are as yet not\
    \ implemented, and\n   elicit the response '506 COMMAND NOT IMPLEMENTED.':  ABORT,\
    \ ALTER,\n   BACK, HOLD, OP, RECOVER, RESTART, and SKIP.\n"
- title: RJS Commands - Local Syntax Conventions
  contents:
  - "RJS Commands - Local Syntax Conventions\n   In addition to those general conventions\
    \ discussed above, the\n   following rules hold for local syntax:\n      1. Except\
    \ in certain circumstances, noted below, a period may be\n         used for command\
    \ accept.\n      2. The following control characters have the indicated functions:\n\
    \      SOH (control A)  delete last character\n      DEL              delete last\
    \ character\n      SYN (control V)  delete last word\n      CAN (control X)  delete\
    \ entire line\n      EOT (control D)  display current word\n      ACK (control\
    \ F)  display entire line\n      '?'              display acceptable input forms\n\
    \      ESC              force recognition of current word\n      blank       \
    \     force recognition of current word\n      3. The TELNET control characters\
    \ 'you-echo' and 'I-echo' have the\n         desired results.  'You-echo' also\
    \ has the effect of changing to\n         character at a time mode, if the user\
    \ is not already in\n         character at a time mode.\n"
- title: Description of RJS Commands, Local Syntax
  contents:
  - "Description of RJS Commands, Local Syntax\n   The following is a list of those\
    \ commands supported in local syntax.\n   In those cases where no success reply\
    \ is indicated, RJS responds with\n   CR-LF followed by the prompt character.\
    \  In those cases where it is\n   stated that the user must be, or must not be,\
    \ logged in, 'LOGIN\n   PLEASE.' or 'LOGGED IN.', respectively, are displayed\
    \ if the user is\n   not in the appropriate state.  When a reference is made to\
    \ a response\n   listed under a standard syntax command, it should be noted that\
    \ reply\n   id's are not displayed under local syntax.\n   'FULLDUPLEX' <CA>\n\
    \   Sets the user to fullduplex and character at a time modes.\n   'HALFDUPLEX'\
    \ <CA>\n   Sets the user to halfduplex mode.\n   'LINE<-AT<-A<-TIME' <CA>\n  \
    \ Set's the user to halfduplex, line at a time modes.  The control\n   characters\
    \ previously described remain effective, but RJS will send\n   no output over\
    \ the TELNET connection except when the current command\n   line is empty.\n \
    \  'LOGIN' <user name> <password> <account> <CA>\n   Specifies the UCSB Computer\
    \ Center user name and account to which the\n   user's use Of RJS is to be billed,\
    \ logs the user in, and sets the\n   source, print, and punch accounting parameter\
    \ accumulators to <user\n   name>, <password> and <account>.  This command is\
    \ valid only if the\n   user is not logged in, and has the same replies as the\
    \ standard\n   syntax 'PASS' command.\n   'DISCONNECT' <CA>\n   Closes the TELNET\
    \ connection.  If the user is logged in, he is first\n   logged out.  The effective\
    \ action taken in response to an unexpected\n   close on the TELNET connection\
    \ is that of a DISCONNECT.  The response\n   to a DISCONNECT command is 'TTY <integer>\
    \ IS DISCONNECTED.'\n   The remaining commands require the user to be logged in.\n\
    \   'LOG0UT' <CA>\n   Logs the user out and terminates billing of subsequent activity\
    \ over\n   the TELNET connection to the previously effective accounting\n   parameters,\
    \ and performs the effective action of the REINITIALIZE\n   command.  LOGOUT does\
    \ not close the TELNET connection, nor does it\n   affect any file transfers in\
    \ progress for jobs owned by the user.\n   'REINITIALIZE' <CA>\n   Resets to empty\
    \ the following accumulators:  source, print and punch\n   accounting parameter,\
    \ source, print and punch pathname, and login\n   accounting parameter.\n   'ACCOUNTING'\
    \ <account parms> <CA>\n   <account parms> = '(' <u> ',' <p> ',' <a> ')'\n   <u>\
    \ = <user name> _ <null>\n   <p> = <password> _ <null>\n   <a> = <account> _ <null>\n\
    \   Sets the source, print and punch accounting parameters to <account\n   parms>.\
    \  Specification of <null> for any of <u>, <p>, or <a>\n   indicates use of the\
    \ contents of the corresponding login accumulator.\n   'SOURCE' <account parms>\
    \ <CA>\n   Set the source accounting parameter accumulators to <account parms>.\n\
    \   'PRINT' <account parms> <CA>\n   Sets the print accounting parameter accumulators\
    \ to <account parms>.\n   'PUNCH' <account parms> <CA>\n   Sets the punch accounting\
    \ parameter accumulators to <account parms>.\n   'SOURCE' <jobid> (<account parms>\
    \ _ <null>) <pathname> <CA>\n   Sets the source pathname of job <jobid> to <pathname>,\
    \ and the source\n   accounting parameters to <account parms>, if specified, or\
    \ otherwise\n   to the contents of the source accounting parameter accumulators.\
    \  If\n   job <jobid> already exists and its source pathname has not been\n  \
    \ specified, the new pathname is stored; if it has been specified, it\n   is changed\
    \ unless source file retrieval has already begun.  If the\n   job does not already\
    \ exist, a new job is created and the pathname\n   stored.  Restrictions are that\
    \ if a job with a given <jobid> has\n   completed processing, it must be DELETE'd\
    \ before that <jobid> may be\n   used for a new job; a user may only alter jobs\
    \ owned by him; and he\n   may not own more than a certain fixed number of jobs\
    \ (currently 5).\n   If the user already owns the maximum number, an attempt is\
    \ made to\n   delete an old job to make room for the new one, as described for\n\
    \   INPUT under standard syntax.  The SOURCE command has the following\n   possible\
    \ error responses:  'NEW JOBS ARE NOT BEING ACCEPTED AT THIS\n   TIME.', 'USER\
    \ <user name> ALREADY OWNS THE MAXIMUM NUMBER OF JOBS.',\n   'USER <user name>\
    \ DOES NOT OWN JOB <jobid>.', 'JOB <jobid> HAS\n   ALREADY COMPLETED.', and 'JOB\
    \ <jobid> IS ALREADY BEING, OR HAS BEEN,\n   READ.'\n   'PRINT <jobid> (<account\
    \ parms> _ <null>) <disp> <CA>\n   Sets the print pathname of job <jobid> to <disp>,\
    \ and the print\n   accounting parameters to <account parms> if specified, or\
    \ otherwise\n   to the contents of the print accounting parameter accumulators.\
    \  The\n   PRINT command either creates a new job or modifies an existing one,\n\
    \   as explained under SOURCE, and has the same restrictions and error\n   messages\
    \ listed for the SOURCE command, after making the obvious\n   substitution of\
    \ 'PRINTED' for 'READ'.  The PRINT command is valid\n   only before print file\
    \ transfer begins.\n   'PUNCH' <jobid> (<account parms> _ <null>) <disp> <CA>\n\
    \   Sets the punch pathname of job <jobid> to <disp>, and the punch\n   accounting\
    \ parameters to <account parms> if specified, or otherwise\n   to the contents\
    \ of the punch accounting parameter accumulators.  The\n   PUNCH command either\
    \ creates a new job or modifies an existing one,\n   like the SOURCE and PRINT\
    \ commands, and has the same restrictions and\n   error messages listed for the\
    \ SOURCE command, after making the\n   substitution of 'PUNCHED' for 'READ'. \
    \ The PUNCH command is valid\n   only before punch file transfer begins.\n   'DELETE'\
    \ <jobid> <CA>\n   Identical in function to the CANCEL command in standard syntax.\n\
    \   'INPUT' <jobid> <CA>\n   Places the job identified by <jobid> in a queue within\
    \ RJS of jobs\n   owned by the users awaiting source file transfer.  When it becomes\n\
    \   the first or only job in this queue, the retrieval of the source file\n  \
    \ is initiated.  If the INPUT command is successful, the message 'JOB\n   <jobid>\
    \ ACCEPTED FOR PROCESSING.' is displayed.  The following error\n   messages are\
    \ possible:  'JOB <jobid> NOT FOUND.', 'USER <user name>\n   DOES NOT OWN JOB\
    \ <jobid>.', 'JOB <jobid> HAS ALREADY COMPLETED.', '\n   SOURCE PATHNAME HAS NOT\
    \ BEEN SPECIFIED.' and 'PRINT PATHNAME HAS NOT\n   BEEN SPECIFIED.'\n   'JOBSTAT'\
    \ <jobid> <CA>\n   Identical in function and response to the 'STATUS' <jobid>\
    \ command in\n   standard syntax.\n   'JOBLIST' <CA>\n   Lists the jobid's of\
    \ those jobs owned by the user.\n   $ <text> <CA>\n   <text> = a string of any\
    \ characters including '?' and '.'.\n   Note that <CA> must be CR-LF, rather than\
    \ period.\n   Issues <text> as a HASP operator command over the user's virtual\n\
    \   operator's console.  See Appendix A for a description of HASP\n   commands\
    \ and command responses.\n RJS File Transfer\n   The <pathname> defined earlier\
    \ is the means whereby the user\n   specifies the location and attributes of his\
    \ source, print and punch\n   files.  The means of determining a file's location\
    \ have been\n   previously discussed; this section explains the controls the user\
    \ has\n   over data attributes.\n   The parameter <attributes> specifies the type\
    \ of carriage control and\n   the mode of transfer.  For the case of transfer\
    \ over a simplex\n   connection, this parameter has the following meanings:\n\
    \      ':T' or ':TE' - TELNET-like carriage control.  The data is a\n      stream\
    \ of characters with embedded carriage control bytes.  Page\n      eject is signaled\
    \ by form feed, ASCII or EBCDIC decimal 12, new\n      line by carriage return\
    \ - line feed, ASCII l3-lO, EBCDIC 13-27.\n      Multiple new line ('double spacing'\
    \ or 'triple spacing') is\n      indicated by multiple occurances of CR-LF.\n\
    \      ':A' or ':AE' - ASA carriage control.  The data is a series of\n      fixed-length\
    \ records, 81 characters on input, 133 on output, with\n      the first character\
    \ of each record an ASA carriage control\n      character.  The possible carriage\
    \ control characters are as\n      follows;  '+' - no line advance before print\
    \ (overprint), ' ' -\n      one line advance (single space), '0' - two lines advance\
    \ (double\n      space), '-' - three lines advance (triple space), and '1' - page\n\
    \      eject.  Whatever carriage control character appears on input is\n     \
    \ ignored.\n      ':N' or ':NE' - no carriage control.  The data is a series of\n\
    \      fixed length records, 80 characters on input, 132 on output.  Any\n   \
    \   carriage control generated on output is discarded before\n      transmission.\n\
    \   When file transfer takes place by means of FTP, the interpretation of\n  \
    \ the <attributes> parameter is somewhat different.  In this case the\n   meanings\
    \ are as follows:\n      ':T' or ':TE' - TELNET-like carriage control.  The data\
    \ has the\n      same format as for the simplex connection, and is transferred\
    \ in\n      stream mode, file structure, and either ASCII ('A') or EBCDIC\n  \
    \    ('E') type.\n      ':A' or ':AE' - ASA carriage control.  Data is transferred\
    \ in\n      blocked mode, record structure, and either ASCII print ('P') or\n\
    \      EBCDIC print  ('F') type.  The first character of every record is\n   \
    \   the ASA carriage control character described above.\n      ':N' or ':NE' -\
    \ no carriage control.  Data is transferred in\n      blocked mode, record structure,\
    \ and either ASCII ('A') or EBCDIC\n      ('E') type.  As for the simplex connection,\
    \ no carriage control\n      information is present.\n   In order to effect the\
    \ FTP file transfer, RJS issues the following\n   FTP commands (in the given order):\
    \  USER (if access user name has\n   been specified), PASS (if password specified),\
    \ ACCT (if account\n   specified), BYTE (specifying bytesize of 8), ALLO (if \
    \ outputting\n   file), TYPE, STRU, MODE, SOCK, and APPE or RETR.\n"
- title: 'Appendix A:  The HASP Spooling System'
  contents:
  - "Appendix A:  The HASP Spooling System\n   HASP is a spooling-queuing-scheduling\
    \ system used in conjunction with\n   IBM OS/360 to aid in processing of batch\
    \ jobs.  The main purpose of\n   HASP is to increase throughput by minimizing\
    \ I/O wait time and\n   providing a priority scheduling scheme whereby shorter\
    \ jobs are\n   chosen for processing over longer jobs.\n   There are several stages\
    \ of processing, or functions, within HASP.\n   At any instant, a given job is\
    \ either in some stage of processing, in\n   which case the job is said to be\
    \ active, or it is waiting to be\n   processed by some function, in which case\
    \ it is said to be queued for\n   that function.  Jobs to be processed by a function\
    \ are selected from\n   the queue of jobs waiting for that function, in order\
    \ of decreasing\n   priority.  A job's priority is determined by its estimated\
    \ CPU tine\n   and volume of output.  The result is that smaller jobs are selected\n\
    \   for processing over larger jobs, and therefore spend less time in the\n  \
    \ system.\n   The HASP remote user is provided with a virtual operator's console.\n\
    \   Over this console he may enter HASP operator commands to display\n   information\
    \ about the system in general, and to exercise control over\n   his terminal and\
    \ his jobs.  HASP sends messages to his console in\n   response to his commands,\
    \ and to inform him of conditions concerning\n   him as they arise.  HASP commands\
    \ have the following general form:\n   $ <verb> <operand1>,<operand2>,...,<operandn>\n\
    \   where\n    <verb>          = a single character verb which\n             \
    \          identifies the general function\n                       to be performed\n\
    \    <operand>       = identification of the object to\n                     \
    \  be displayed or acted upon.\n   Zero or more operands may be present, depending\
    \ on the command, and\n   commas are used to separate operands when more than\
    \ one is used.  In\n   general, alphabetics may be entered in either upper or\
    \ lower case,\n   and for text outside paired apostrophes, blanks may be inserted\
    \ at\n   any point desired.  Apostrophes intended as text characters must\n  \
    \ appear in duplicate.\n   Every HASP command ellicts one or more responses. \
    \ The response \"OK\"\n   is used in many cases to acknowledge the command and\
    \ to signify that\n   the requested action has been taken or initiated.  In the\
    \ later case,\n   an information message will be issued when the request is completed.\n\
    \   Every HASP console message begins with the text 'S HH.MM.SS' or\n   'S*HH.MM.SS',\
    \ where HH.MM.SS is the time of day in hours, minutes,\n   and seconds, and in\
    \ 24 hour clock.\n   Many commands display job status information as a response.\
    \  The\n   format of this standard response is as follows:\n   jobs queued for\
    \ processing:\n   JOB jjj jobname AW EXEC  class PRIO prio HOLD\n            \
    \          PRINT rem             PURGE\n                      PUNCH rem      \
    \       *DUP*\n                      PURGE\n   jobs being processed:\n   JOB jjj\
    \ jobname EXECUTING class PRIO prio HOLD\n                   ON DEVICE dev   \
    \          PURGE\n                   IS PURGING\n   where\n      jjj         \
    \    = HASP assigned job number\n      jobname         = OS jobname\n      AW\
    \              = 'AWAITING'\n      class           = job's job class\n      prio\
    \            = job's HASP internal priority\n      rem             = terminal\
    \ number of remote terminal\n                        where job is queued to print\
    \ or punch\n      dev             = device name\n      HOLD            = signifies\
    \ job is in hold status, or\n                        will be at completion of\
    \ current\n                        function\n      PURGE           = signifies\
    \ job will be purged at\n                        completion of current function\n\
    \      *DUP*           = signifies job cannot begin execution\n              \
    \          until another job with same jobname\n                        completes\n\
    \   The following is a brief description of those HASP operator\n   commands that\
    \ may be issued by a remote user (for a more\n   complete description, see NIC\
    \ #16306):\n   SDA                   Display status information on all active\
    \ jobs\n   SDF [,rem]            Display number of jobs queued for special forms\n\
    \   SDN [,queue]          Display status information on all queued jobs\n   SDQ\
    \                   Display number of queued jobs\n   SCJ jjj               Delete\
    \ job immediately\n   SKJ jjj               Issue OS CANCEL and delete job\n \
    \                        immediately\n   SPJ jjj               Delete job after\
    \ current function\n   SDJ jjj               Display job status information\n\
    \   SD'jobname            Display job status information\n   SB device,pages \
    \      Backspace device\n   SC device             Delete current function on device\n\
    \   SF device,pages       Forward space device\n   SDP device            Display\
    \ job number of job on device\n   SDI                   Display status and classes\
    \ of initiators\n   SDLINE rem            Display status of remote terminal\n\
    \   SDRM rem              Display status of remote terminal\n   SDU          \
    \         Display status of local unit record\n                         devices\n\
    \   SDM rem,'message'     Display message to remote console\n"
- title: 'Appendix B:  RJS Reply ID''s'
  contents:
  - "Appendix B:  RJS Reply ID's\n   The following is a list of the reply id's of\
    \ the replies\n   generated by RJS in response to the indicated commands:\n  \
    \ command             success reply           failure replies\n   USER       \
    \              330                     501\n   PASS                     230  \
    \                   501,431,505\n   ACCT                     200             \
    \        501\n   BYE                      231                     501\n   REINIT\
    \                   2O4                     5O1,5O4\n   INUSER/INID          \
    \    200                     501,504\n   INPASS                   200        \
    \             501,504\n   INACCT                   200                     501,504\n\
    \   OUTUSER                  200                     501,504\n   OUTPASS     \
    \             200                     501,504\n   OUTACCT                  200\
    \                     501,504\n   INPATH                   200               \
    \      501,504\n   OUTPATH/OUT              200                     501,504\n\
    \   INPUT                    260                     501,360,504,505\n   CHANGE\
    \                   200                     501,464,504\n   STATUS (no operand)\
    \      100                     501\n   STATUS (with operand)    161          \
    \           501,464,504\n   CANCEL                   262                     501,464,504\n\
    \   Possible spontaneous reply id's are:  300, 440, 441, 442, 461, and\n   466.\n\
    \          [This RFC was put into machine readable form for entry]\n         \
    \      [into the online RFC archives by Mikan Mirko]\n"
