- title: __initial_text__
  contents:
  - "                       Leaving Well Enough Alone\n   I recently decided it was\
    \ time for an overhaul of our FTP user and\n   server programs.  This was my first\
    \ venture into the world of network\n   protocols, and I soon discovered that\
    \ there was a lot we were doing\n   wrong -- and a few things that everyone seemed\
    \ to be doing\n   differently from each other.  When I enquired about this, the\n\
    \   response from some quarters was \"Oh, you're running version 1!\"\n   Since,\
    \ as far as I can tell, all but one network host are running\n   version 1, and\
    \ basically transferring files OK, it seems to me that\n   the existence on paper\
    \ of an unused protocol should not stand in the\n   way of maintaining the current\
    \ one unless there is a good reason to\n   believe that the new one is either\
    \ imminent or strongly superior or\n   both. (I understand, by the way, that FTP-2\
    \ represents a lot of\n   thought and effort by several people who are greater\
    \ network experts\n   than I, and that it isn't nice of me to propose junking\
    \ all that\n   work, and I hereby apologize for it.)  Let me list what strike\
    \ me as\n   the main differences in FTP-2 and examine their potential impact on\n\
    \   the world.\n      1. FTP-2 uses TELNET-2.  The main advantage of the new Telnet\n\
    \      protocol is that it allows flexible negotiation about things like\n   \
    \   echoing.  But the communicators in the case of FTP are computer\n      programs,\
    \ not people, and don't want any echoing anyway.  The\n      argument that new\
    \ hosts might not know about old Telnet seems an\n      unlikely one for quite\
    \ some time to come if TELNET-2 ever does\n      really take over the world, FTP-1\
    \ could be implemented in it.\n      2. FTP-2 straightens out the \"print file\"\
    \ mess.  This is more of a\n      mess on paper than in practice, I think.  Although\
    \ the protocol\n      document is confusing on the subject, I think it is perfectly\n\
    \      obvious what to do:  if the user specifies, and the server\n      accepts,\
    \ TYPE P (ASCII print file) or TYPE F (EBCDIC print file),\n      then the data\
    \ sent over the network should contain Fortran control\n      characters.  That\
    \ is, the source file should contain Fortran\n      controls, and should be sent\
    \ over the net as is, and reformatted\n      if necessary not by the SERVER as\
    \ the protocol says but by the\n      RECIPIENT (server for STOR, user for RETR).\
    \  As a non-Fortran-user\n      I may be missing something here but I don't think\
    \ so; it is just\n      like the well-understood TYPE E in which the data is sent\
    \ in\n      EBCDIC and the recipient can format it for local use as desired.\n\
    \      One never reformats a file from ASCII to EBCDIC at the sending\n      end.\
    \  Perhaps the confusion happened because the protocol authors\n      had in mind\
    \ using these types to send files directly to a line\n      printer at the server\
    \ end, and indeed maybe that's all it's good\n      for and nobody's user program\
    \ will implement TYPE P RETR.  In any\n      event, using a two-dimensional scheme\
    \ to specify the combinations\n      of ASCII/EBCDIC and ASA/normal conveys no\
    \ more information than\n      the present A-P-E-F scheme.  If there is any straightening\
    \ out of\n      FTP-2, it could only be in the handling of these files once the\n\
    \      negotiation is settled, not in the negotiation process.\n      3. FTP-2\
    \ approves of the Network Virtual File System concept even\n      though it doesn't\
    \ actually implement it.  It seems to me that the\n      NVFS notion is full of\
    \ pitfalls, the least of which is the problem\n      of incompatibilities in filename\
    \ syntax. (For example, one would\n      like to be able to do random access over\
    \ the network, which\n      requires that different systems find a way to accommodate\
    \ each\n      other's rules about record sizes and so on.)  In any case, FTP-2\n\
    \      doesn't really use NVFS and I mention it here only because RFC 542\n  \
    \    does.\n      4. FTP-2 reshuffles reply codes somewhat.  The reply codes in\
    \ the\n      original FTP-2 document, RFC 542, don't address what I see as the\n\
    \      real reply code problems.  The increased specificity of reply\n      codes\
    \ doesn't seem to be much of a virtue; if, say, a rename\n      operation fails,\
    \ it is the human user, not the FTP user program,\n      who needs to know that\
    \ it was because of a name conflict rather\n      than some other file system\
    \ error.  I am all for putting such\n      information in the text part of FTP\
    \ replies.  Some real problems\n      are actually addressed in the reply code\
    \ revision of RFC 640, in\n      which the basic scheme for assigning reply code\
    \ numbers is more\n      rational than either the FTP-1 scheme or the original\
    \ FTP-2\n      scheme.  However, I think that most of the benefits of RFC 640\
    \ can\n      be obtained in a way which does not require cataclysmic\n      reprogramming.\
    \  More on this below.\n      5. FTP-2 was established by a duly constituted ARPAnet\
    \ committee\n      and we are duty-bound to implement it.  I don't suppose anyone\n\
    \      would actually put it that baldly, but I've heard things which\n      amounted\
    \ to that.  It's silly.\n      6. FTP-2 specifies default sockets for the data\
    \ connection.  Most\n      places use the default sockets already anyway, and\
    \ it is easy\n      enough to ignore the 255 message if you want to.  This is\
    \ a\n      security issue, of course, and I'm afraid that I can't work up\n  \
    \    much excitement about helping the CIA keep track of what anti-war\n     \
    \ demonstrations I attended in 1968 and which Vietnamese hamlets to\n      bomb\
    \ for the greatest strategic effect even if they do pay my\n      salary indirectly.\
    \  I could rave about this subject for pages, and\n      probably will if I ever\
    \ get around to writing an argument against\n      MAIL-2, but for now let me\
    \ just get one anecdote off my chest: I\n      have access to an account at an\
    \ ARPAnet host because I am\n      responsible at my own site for local maintenance\
    \ of a program\n      which was written by, and is maintained by, someone at the\
    \ other\n      site.  However, the other site doesn't really trust us outsiders\n\
    \      (the account is shared by people in my position at several other\n    \
    \  hosts) to protect their vital system security, so every week they\n      run\
    \ a computer program to generate a new random password for the\n      account\
    \ (last week's was HRHPUK) and notify us all by network\n      mail.  Well, on\
    \ my system and at least one of the others, that\n      mail isn't read protected.\
    \  I delete my mail when I read it, but\n      since it is hard enough remembering\
    \ HRHPUK without them changing\n      it every week, I naturally write it in a\
    \ file on our system.  That\n      file could in principle be read protected but\
    \ it isn't, since\n      sometimes I'm in someone else's office when I want to\
    \ use it, and\n      the other passwords in it are for open guest accounts which\
    \ are\n      widely known.  Moral #1: Security freaks are pretty wierd.  Moral\n\
    \      #2: If you have a secret don't keep it on the ARPAnet.  (In the\n     \
    \ past week I have heard about two newly discovered holes in Tenex\n      security.)\n\
    \      7. FTP-2 is available online and FTP-1 isn't, so new hosts can't\n    \
    \  find out how to do it.  Aargh!!!  What a reason for doing\n      anything!\
    \  Surely it would be less costly for someone to type it\n      in again than\
    \ for everyone to reprogram.  Meanwhile these new\n      hosts can ask Jon or\
    \ Geoff or Bobby or even me for help in getting\n      FTP up.\n      8. FTP-2\
    \ has some changes to the strange MODEs and STRUs.  This is\n      another thing\
    \ I can't get too excited about.  We support only MODE\n      S and STR F and\
    \ that will probably still be true even if we are\n      forced into FTP-2.  If\
    \ the relatively few people who do very large\n      file transfers need to improve\
    \ the restart capability, they can do\n      so within FTP-1 without impacting\
    \ the rest of us.  The recent\n      implementation of paged file transfers by\
    \ TENEX shows that\n      problems of individual systems can be solved within\
    \ the FTP-1\n      framework.  If the IBM people have some problem about record\n\
    \      structure in FTP-1, for example, let them solve it in FTP-1, and\n    \
    \  whatever the solution is, nobody who isn't affected has to\n      reprogram.\n\
    \   Well, to sum up, I am pretty happy with the success I've had\n   transferring\
    \ files around the network the way things are.  When I do\n   run into trouble\
    \ it's generally because some particular host hasn't\n   implemented some particular\
    \ feature of FTP-1, and there's no reason\n   to suppose they'll do it any faster\
    \ if they also have to convert to\n   FTP-2 at the same time.  The main thing\
    \ about FTP-2, as I said at the\n   beginning, is that its existence is an excuse\
    \ for not solving\n   problems in FTP-1.  Some such problems are quite trivial\
    \ except for\n   the fact that people are reluctant to go against anything in\
    \ the\n   protocol document, as if the latter were the Holy writ.  A few\n   actually\
    \ require some coordinated effort.  Here is my problem list:\n      1.  It is\
    \ almost true that an FTP user program can understand\n      reply codes by the\
    \ following simple algorithm:\n         a. Replies starting with 0 or 1 should\
    \ be typed out and\n         otherwise ignored.\n         b. Replies starting\
    \ with 2 indicate success (of this step or of\n         the whole operation, depending\
    \ on the command).\n         c. Replies starting with 4 or 5 indicate failure\
    \ of the\n         command.\n         d. Replies starting with 3 are only recognized\
    \ in three cases:\n         the initial 300 message, the 330 password request,\
    \ and the 350\n         MAIL response.  (Note that the user program need not\n\
    \         distinguish which 300 message it got, merely whether or not it\n   \
    \      is expecting one right now.)\n      The only real problem with this, aside\
    \ from bugs in a few servers\n      whose maintainers tell me they're working\
    \ on it, is the HELP\n      command, which is not in the original protocol and\
    \ which returns\n      0xx, 1xx, or 2xx depending on the server. (Sometimes more\
    \ than one\n      message is returned.)  The word from one network protocol expert\n\
    \      at BBN is that (a) 050 or 030 is the correct response to HELP, and\n  \
    \    (b) there is a perfectly good mechanism in the protocol for\n      multi-line\
    \ responses.  Unfortunately this does not do much good in\n      dealing with\
    \ reality.  There seems to be a uniform, albeit\n      contra-protocol, procedure\
    \ for handling the STAT command:\n         151 information\n         151 information\n\
    \         151 ...\n         151 information\n         200 END OF STATUS\n    \
    \  which fits right in with the above algorithm.  This is despite the\n      fact\
    \ that 1xx is supposed to constitute a positive response to a\n      command like\
    \ STAT, so that according to the protocol it ought to\n      be\n         151-information\n\
    \         information\n         ...\n         151 information\n      instead.\
    \  (It seems to me, by the way, that 050 and 030 aren't\n      good enough as\
    \ response to HELP since they \"constitute neither a\n      positive nor a negative\
    \ acknowledgment\" of the HELP command and\n      thus don't tell the user program\
    \ when it ought to ask the human\n      user what to do next.)  I suggest that\
    \ despite the protocol, a 200\n      response be given by all servers at the end\
    \ of whatever other HELP\n      it gives as of, let's say, June 1.  The alternatives\
    \ are either to\n      let the current rather chaotic situation continue forever\
    \ while\n      waiting for FTP-2, or to try to standardize everyone on a multi-\n\
    \      line 1xx for both HELP and STAT.  I'm against changing STAT, which\n  \
    \    works perfectly for everyone as far as I can tell, and it should\n      be\
    \ clear that I'm against waiting for FTP-2.  Unfortunately there\n      is no\
    \ real mechanism for \"officially\" adopting my plan, but I bet\n      if TENEX\
    \ does it on June 1 the rest of the world will come along.\n      2.  Another\
    \ reply code problem is the use of 9xx for\n      \"experimental\" replies not\
    \ in the protocol.  This includes the BBN\n      mail-forwarding message and one\
    \ other that I know of.  This\n      procedure is sanctioned by RFC 385, but it\
    \ seems like a bad idea\n      to me.  For one thing, the user program has no\
    \ way of knowing\n      whether the reply is positive, negative, or irrelevant.\
    \  The\n      examples I've been burned by all should have been 0xx messages.\
    \  I\n      propose that all such messages be given codes in the 000-599\n   \
    \   range, chosen to fit the scheme given above for interpreting reply\n     \
    \ codes. x9x or xx9 could be used to indicate experiments.\n      3.  One more\
    \ on reply: RFC 630 (the one about the TENEX mod to the\n      reply codes for\
    \ MAIL and MLFL) raises the issue of \"temporary\"\n      versus \"permanent\"\
    \ failures within the 4xx category.  RFC 640\n      deals with this question in\
    \ the FTP-2 context by changing the\n      meaning of 4xx and 5xx so that the\
    \ former are for temporary errors\n      and the latter are for permanent errors.\
    \  I like this idea, and I\n      think it could easily be adapted for FTP-1 use\
    \ in a way which\n      would allow people to ignore the change and still win.\
    \  At\n      present, I believe that the only program which attempts to\n    \
    \  distinguish between temporary and permanent errors is the TENEX\n      mailer.\
    \  For other programs, no distinction is currently made\n      between 4xx and\
    \ 5xx responses; both indicate failure, and any\n      retrials are done by the\
    \ human user based on the text part of the\n      message.  A specific set of\
    \ changes to the reply codes codes is\n      proposed below.\n      Perhaps I\
    \ should make a few more points about RFC 640, since it's\n      the best thing\
    \ about FTP-2 and the only argument for it I find at\n      all convincing.  Let\
    \ me try to pick out the virtues of 640 and\n      indicate how they might be\
    \ achieved in FTP-1.\n         a. The 3xx category is used uniformly for \"positive\n\
    \         intermediate replies\" where further negotiation in the Telnet\n   \
    \      connection is required, as for RNFR.  I'm afraid this one can't\n     \
    \    be changed without affecting existing user programs.  (One of\n         my\
    \ goals here is to enable exiting user programs to work while\n         some servers\
    \ continue as now and others adopt the suggestions I\n         make below.)  However,\
    \ although this 3xx idea is logically\n         pleasing, it is not really necessary\
    \ for a simple-minded user\n         program to be able to interpret replies.\
    \  The only really new\n         3xx in RFC 640 is the 350 code for RNFR.  But\
    \ this would only\n         be a real improvement for the user program if there\
    \ were also a\n         2xx code which might be returned after RNFR, which is\
    \ not the\n         case.  640 also abolishes the 300 initial connection message\n\
    \         with 220, but again there is clearly no conflict here.\n         b.\
    \ The use of 1xx is expanded to include what is now the 250\n         code for\
    \ the beginning of a file transfer.  The idea is that a\n         1xx message\
    \ doesn't affect the state of the user process, but\n         this is not really\
    \ true.  Consider the file transfer commands.\n         The state diagram on page\
    \ 13 of RFC 640 is slightly misleading.\n         It appears as if 1xx replies\
    \ are simply ignored by the user\n         program.  In reality, that little loop\
    \ hides a lot of work: the\n         file transfer itself!  If the server replied\
    \ to the file\n         transfer command immediately with a 2xx message, it would\
    \ be a\n         bug in the server, not a successful transfer.  The real state\n\
    \         diagram is more like\n            B --> cmd --> W --> 1 --> W --> 2\
    \ --> S\n         (with branches out from the \"W\"s for bad replies).  It should\n\
    \         be clear from this diagram that the user program, if it trusts\n   \
    \      the server to know what it's doing, can expect a 2xx instead of\n     \
    \    the 1xx without getting confused, since it knows which of the W\n       \
    \  states it's in.  In fact, the use of 1xx in file transfer is\n         very\
    \ different from its other uses, which are indeed more like\n         the 0xx\
    \ and 1xx replies in FTP-1.  I'd call this particular\n         point a bug in\
    \ RFC 640.\n         c.  Automatic programs which use FTP (like mailers) can decide\n\
    \         whether to queue or abandon an unsuccessful transfer based on\n    \
    \     the distinction between 4xx and 5xx codes.  I like this idea,\n        \
    \ although those temporary errors virtually never happen in real\n         life.\
    \  This could be accomplished in FTP-1 by moving many of\n         the 4xx replies\
    \ to 5xx.  Mailers would be modified to use the\n         first digit to decide\
    \ whether or not to retry.  This scheme\n         does not cause any catastrophes;\
    \ if some server is slow in\n         converting it merely leads to unnecessary\
    \ retries.  A few CPU\n         cycles would be wasted in the month following\
    \ the official\n         switch.  Thus, this feature is very different from (a)\
    \ and (b),\n         which could lead to catastrophic failures if not implemented\n\
    \         all at once.  (Yes, I know that FTP-2 is supposed to be done on\n  \
    \       a different ICP socket.  I am not discussing FTP-2 but whether\n     \
    \    its virtues can be transferred to FTP-1.)  The specific codes\n         involved\
    \ are listed below.\n         d.  The use of the second digit to indicate the\
    \ type of\n         message. (The proposed division is not totally clean; for\n\
    \         example, why is 150 (\"file status okay; about to open data\n      \
    \   connection\") considered to be more about the file system than\n         about\
    \ data connection?)  This can easily be done, since the\n         second digit\
    \ is not currently important to any user process--\n         the TENEX mailer\
    \ is, in this plan, already due for modification\n         because of (c).  Since\
    \ this is mostly an aesthetic point, I'm\n         hesitant to do it if it would\
    \ be difficult for anyone.  In\n         particular, I would want to leave the\
    \ 25x messages alone, in\n         case some user programs distinguish these.\
    \  This is especially\n         likely for the ones which are entirely meant for\
    \ the program:\n         251 and 255.  Therefore I propose that if this idea is\
    \ adopted\n         in FTP-1 the meanings of x2x and x5x be interchanged.  This\n\
    \         proposal is reflected in the specific list below.\n      4.  The print\
    \ file thing again.  Let's get it made \"official\" that\n      it is the recipient,\
    \ not the server, who is responsible for any\n      reformatting which is to be\
    \ done on these files.  After all, the\n      recipient knows what his own print\
    \ programs want.\n   Let me summarize the specific changes to FTP-1 I'd like to\
    \ see made,\n   most of which are merely documentation changes to reflect reality:\n\
    \      1. HELP should return 200.  All commands should return 2xx if\n      successful,\
    \ and I believe all do except HELP.\n      2. The definition of 1xx messages should\
    \ be changed to read:\n      \"Informative replies to status inquiries.  These\
    \ constitute\n      neither a positive nor negative acknowledgment.\"\n      3.\
    \ Experimental reply codes should be of the form x9x or xx9,\n      where the\
    \ first digit is chosen to reflect the significance of the\n      reply to automated\
    \ user programs.  Reply codes greater than 599\n      are not permitted.  The\
    \ xx9 form should be used if the reply falls\n      into one of the existing categories\
    \ for the second digit.  User\n      programs are encouraged to determine the\
    \ significance of the reply\n      from the first digit, rather than requiring\
    \ a specific reply code,\n      when possible.\n      4. The STAT command with\
    \ no argument is considered a request for a\n      directory listing for the current\
    \ working directory, except that\n      it may be given along with TELNET SYNCH\
    \ while a transfer is in\n      progress, in which case it is a request for the\
    \ status of that\n      transfer. (Everyone seems to do the first part of this.\
    \  I'm not\n      sure if anyone actually implements the second.  This is just\n\
    \      getting the protocol to agree with reality.) The reply to a STAT\n    \
    \  command should be zero or more 1xx messages followed by a 200.\n      5. TYPEs\
    \ P and F mean that the source file contains ASA control\n      characters and\
    \ that the recipient program should reformat it if\n      necessary.\n   Here\
    \ is a list of the current FTP-1 replies, and how they should be\n   renumbered\
    \ for the new scheme.  The changes from 4xx to 5xx should be\n   REQUIRED as of\
    \ June 1; changes in the second or third digit are not\n   so important. (As explained\
    \ above, it will not be catastrophic even\n   if some hosts do not meet the requirement.)\
    \  The list also contains\n   one new possible reply adapted from RFC 640.\n \
    \  OLD    NEW     TEXT\n   0x0    0x0     (These messages are not very well defined\
    \ nor\n       very important.  Servers should use their judgment.)\n   100   \
    \ 110     System status reply.  (Since nobody does STAT\n       as in the protocol,\
    \ this may be a moot point.)\n   150    150     \"File status reply.\"  (If this\
    \ were really that,\n       it would be switched to 120, but I believe what is\
    \ meant is\n       the response to a bare STAT in mid-transfer, which is more\n\
    \       a connection status reply than a file status reply.\n   151    121   \
    \  Directory listing reply.\n   200    200     Last command ok.\n   201    251\
    \     ABOR ok.\n   202    252     ABOR ignored, no transfer in progress.\n   new\
    \    206     Command ignored, superfluous here.\n   230    230     Login complete.\n\
    \   231    231     Logout complete.\n   232    232     Logout command will be\
    \ processed when\n       transfer is complete.\n   250    250     Transfer started\
    \ correctly.\n   251    251     MARK yyyy = mmmm\n   252    252     Transfer completed\
    \ ok.\n   253    223     Rename ok.\n   254    224     Delete ok.\n   255    255\
    \     SOCK nnnn\n   256    256     Mail completed ok.\n   300    300     Connection\
    \ greeting\n   301    301     Command incomplete (no crlf)\n   330    330    \
    \ Enter password\n   350    350     Enter mail.\n   400    huh?    \"This service\
    \ not implemented.\" I don't\n       understand this; how does it differ from\
    \ 506?  If it means\n       no FTP at all, who gave the message?  Flush.\n   401\
    \    451     Service not accepting users now, goodbye.\n   430    430     Foo,\
    \ you are a password hacker!\n   431    531     Invalid user or password.\n  \
    \ 432    532     User invalid for this service.\n   434    454     Logout by operator.\n\
    \   435    455     Logout by system.\n   436    456     Service shutting down.\n\
    \   450    520     File not found.\n   451    521     Access denied.\n   452 \
    \   452     Transfer incomplete, connection closed.\n   453    423     Transfer\
    \ incomplete, insufficient storage space.\n   454    454     Can't connect to\
    \ your socket.\n   500    500     Command gibberish.\n   501    501     Argument\
    \ gibberish.\n   502    502     Argument missing.\n   503    503     Arguments\
    \ conflict.\n   504    504     You can't get there from here.\n   505    505 \
    \    Command conflicts with previous command.\n   506    506     Action not implemented.\n\
    \         [ This RFC was put into machine readable form for entry ]\n        \
    \    [ into the online RFC archives by Via Genie 3/00 ]\n"
