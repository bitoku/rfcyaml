- title: __initial_text__
  contents:
  - '   Making TCP More Robust to Long Connectivity Disruptions (TCP-LCD)

    '
- title: Abstract
  contents:
  - "Abstract\n   Disruptions in end-to-end path connectivity, which last longer than\n\
    \   one retransmission timeout, cause suboptimal TCP performance.  The\n   reason\
    \ for this performance degradation is that TCP interprets\n   segment loss induced\
    \ by long connectivity disruptions as a sign of\n   congestion, resulting in repeated\
    \ retransmission timer backoffs.\n   This, in turn, leads to a delayed detection\
    \ of the re-establishment\n   of the connection since TCP waits for the next retransmission\
    \ timeout\n   before it attempts a retransmission.\n   This document proposes\
    \ an algorithm to make TCP more robust to long\n   connectivity disruptions (TCP-LCD).\
    \  It describes how standard ICMP\n   messages can be exploited during timeout-based\
    \ loss recovery to\n   disambiguate true congestion loss from non-congestion loss\
    \ caused by\n   connectivity disruptions.  Moreover, a reversion strategy of the\n\
    \   retransmission timer is specified that enables a more prompt\n   detection\
    \ of whether or not the connectivity to a previously\n   disconnected peer node\
    \ has been restored.  TCP-LCD is a TCP sender-\n   only modification that effectively\
    \ improves TCP performance in the\n   case of connectivity disruptions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6069.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Connectivity Disruption Indication ..............................5\n   4.\
    \ Connectivity Disruption Reaction ................................7\n      4.1.\
    \ Basic Idea .................................................7\n      4.2. Algorithm\
    \ Details ..........................................8\n   5. Discussion of TCP-LCD\
    \ ..........................................11\n      5.1. Retransmission Ambiguity\
    \ ..................................12\n      5.2. Wrapped Sequence Numbers ..................................12\n\
    \      5.3. Packet Duplication ........................................13\n  \
    \    5.4. Probing Frequency .........................................14\n    \
    \  5.5. Reaction during Connection Establishment ..................14\n      5.6.\
    \ Reaction in Steady-State ..................................14\n   6. Dissolving\
    \ Ambiguity Issues Using the TCP Timestamps Option ....15\n   7. Interoperability\
    \ Issues ........................................17\n      7.1. Detection of TCP\
    \ Connection Failures ......................17\n      7.2. Explicit Congestion\
    \ Notification (ECN) ....................17\n      7.3. TCP-LCD and IP Tunnels\
    \ ....................................17\n   8. Related Work ...................................................18\n\
    \   9. Security Considerations ........................................19\n  \
    \ 10. Acknowledgments ...............................................20\n   11.\
    \ References ....................................................20\n      11.1.\
    \ Normative References .....................................20\n      11.2. Informative\
    \ References ...................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Connectivity disruptions can occur in many different situations.\
    \  The\n   frequency of connectivity disruptions depends on the properties of\n\
    \   the end-to-end path between the communicating hosts.  While\n   connectivity\
    \ disruptions can occur in traditional wired networks,\n   e.g., disruption caused\
    \ by an unplugged network cable, the likelihood\n   of their occurrence is significantly\
    \ higher in wireless (multi-hop)\n   networks.  Especially, end-host mobility,\
    \ network topology changes,\n   and wireless interferences are crucial factors.\
    \  In the case of the\n   Transmission Control Protocol (TCP) [RFC0793], the performance\
    \ of the\n   connection can experience a significant reduction compared to a\n\
    \   permanently connected path [SESB05].  This is because TCP, which was\n   originally\
    \ designed to operate in fixed and wired networks, generally\n   assumes that\
    \ the end-to-end path connectivity is relatively stable\n   over the connection's\
    \ lifetime.\n   Depending on their duration, connectivity disruptions can be\n\
    \   classified into two groups [TCP-RLCI]: \"short\" and \"long\".  A\n   connectivity\
    \ disruption is \"short\" if connectivity returns before the\n   retransmission\
    \ timer fires for the first time.  In this case, TCP\n   recovers lost data segments\
    \ through Fast Retransmit and lost\n   acknowledgments (ACKs) through successfully\
    \ delivered later ACKs.\n   Connectivity disruptions are declared as \"long\"\
    \ for a given TCP\n   connection if the retransmission timer fires at least once\
    \ before\n   connectivity is resumed.  Whether or not path characteristics, like\n\
    \   the round-trip time (RTT) or the available bandwidth, have changed\n   when\
    \ connectivity resumes after a disruption is another important\n   aspect for\
    \ TCP's retransmission scheme [TCP-RLCI].\n   The algorithm specified in this\
    \ document improves TCP's behavior in\n   the case of \"long connectivity disruptions\"\
    .  In particular, it\n   focuses on the period prior to the re-establishment of\
    \ the\n   connectivity to a previously disconnected peer node.  The document\n\
    \   does not describe any modifications to TCP's behavior and its\n   congestion\
    \ control mechanisms [RFC5681] after connectivity has been\n   restored.\n   When\
    \ a long connectivity disruption occurs on a TCP connection, the\n   TCP sender\
    \ eventually does not receive any more acknowledgments.\n   After the retransmission\
    \ timer expires, the TCP sender enters the\n   timeout-based loss recovery and\
    \ declares the oldest outstanding\n   segment (SND.UNA) as lost.  Since TCP tightly\
    \ couples reliability and\n   congestion control, the retransmission of SND.UNA\
    \ is triggered\n   together with the reduction of the transmission rate.  This\
    \ is based\n   on the assumption that segment loss is an indication of congestion\n\
    \   [RFC5681].  As long as the connectivity disruption persists, TCP will\n  \
    \ repeat this procedure until the oldest outstanding segment has\n   successfully\
    \ been acknowledged or until the connection has timed out.\n   TCP implementations\
    \ that follow the recommended retransmission\n   timeout (RTO) management of RFC\
    \ 2988 [RFC2988] double the RTO after\n   each retransmission attempt.  However,\
    \ the RTO growth may be bounded\n   by an upper limit, the maximum RTO, which\
    \ is at least 60 s, but may\n   be longer: Linux, for example, uses 120 s.  If\
    \ connectivity is\n   restored between two retransmission attempts, TCP still\
    \ has to wait\n   until the retransmission timer expires before resuming transmission,\n\
    \   since it simply does not have any means to know if the connectivity\n   has\
    \ been re-established.  Therefore, depending on when connectivity\n   becomes\
    \ available again, this can waste up to a maximum RTO of\n   possible transmission\
    \ time.\n   This retransmission behavior is not efficient, especially in\n   scenarios\
    \ with long connectivity disruptions.  In the ideal case, TCP\n   would attempt\
    \ a retransmission as soon as connectivity to its peer\n   has been re-established.\
    \  In this document, we specify a TCP sender-\n   only modification to provide\
    \ robustness to long connectivity\n   disruptions (TCP-LCD).  The memo describes\
    \ how the standard Internet\n   Control Message Protocol (ICMP) can be exploited\
    \ during timeout-based\n   loss recovery to identify non-congestion loss caused\
    \ by long\n   connectivity disruptions.  TCP-LCD's reversion strategy of the\n\
    \   retransmission timer enables higher-frequency retransmissions and\n   thereby\
    \ a prompt detection when connectivity to a previously\n   disconnected peer node\
    \ has been restored.  If no congestion is\n   present, TCP-LCD approaches the\
    \ ideal behavior.\n   Experimental results of a Linux implementation of TCP-LCD\
    \ have been\n   presented in [ZimHan09].  The implementation has been incorporated\n\
    \   into mainline Linux, and is already used within the Internet.  Thus\n   far,\
    \ no negative experiences have been reported that could be\n   attributed to the\
    \ algorithm.  However, we consider TCP-LCD as\n   experimental until more real-life\
    \ results have been obtained.\n   Nevertheless, we encourage implementation of\
    \ TCP-LCD under other\n   operating systems to provide for broader testing and\
    \ experimentation\n   opportunities.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   The reader should be familiar with the algorithm and terminology from\n  \
    \ [RFC2988], which defines the standard algorithm that Transmission\n   Control\
    \ Protocol (TCP) senders are required to use to compute and\n   manage their retransmission\
    \ timer.  In this document, the terms\n   \"retransmission timer\" and \"retransmission\
    \ timeout\" are used as\n   defined in [RFC2988].  The retransmission timer ensures\
    \ data delivery\n   in the absence of any feedback from the receiver.  The duration\
    \ of\n   this timer is referred to as retransmission timeout (RTO).\n   As defined\
    \ in [RFC0793], the term \"acceptable acknowledgment (ACK)\"\n   refers to a TCP\
    \ segment that acknowledges previously unacknowledged\n   data.  The TCP sender\
    \ state variable \"SND.UNA\" and the current\n   segment variable \"SEG.SEQ\"\
    \ are used as defined in [RFC0793].  SND.UNA\n   holds the segment sequence number\
    \ of the earliest segment that has\n   not been acknowledged by the TCP receiver\
    \ (the oldest outstanding\n   segment).  SEG.SEQ is the segment sequence number\
    \ of a given segment.\n   For the purposes of this specification, we define the\
    \ term \"timeout-\n   based loss recovery\", which refers to the state that a\
    \ TCP sender\n   enters upon the first timeout of the oldest outstanding segment\n\
    \   (SND.UNA) and leaves upon the arrival of the *first* acceptable ACK.\n   It\
    \ is important to note that other documents use a different\n   interpretation\
    \ of the term \"timeout-based loss recovery\".  For\n   example, the NewReno modification\
    \ to TCP's Fast Recovery algorithm\n   [RFC3782] extends the period that a TCP\
    \ sender remains in timeout-\n   based loss recovery compared to the one defined\
    \ in this document.\n   This is because [RFC3782] attempts to avoid unnecessary\
    \ multiple Fast\n   Retransmits that can occur after an RTO.\n"
- title: 3.  Connectivity Disruption Indication
  contents:
  - "3.  Connectivity Disruption Indication\n   If the queue of an intermediate router\
    \ that is experiencing a link\n   outage can buffer all incoming packets, a connectivity\
    \ disruption\n   will only cause a variation in delay, which is handled well by\
    \ TCP\n   implementations using either Eifel [RFC3522], [RFC4015] or Forward\n\
    \   RTO-Recovery (F-RTO) [RFC5682].  However, if the link outage lasts\n   for\
    \ too long, the router experiencing the link outage is forced to\n   drop packets,\
    \ and finally may remove the corresponding next hop from\n   its routing table.\
    \  Means to detect such link outages include\n   reacting to failed address resolution\
    \ protocol (ARP) [RFC0826]\n   queries, sensing unsuccessful links, and the like.\
    \  However, this is\n   solely the responsibility of the respective router.\n\
    \      Note: The focus of this memo is on introducing a method of how\n      ICMP\
    \ messages may be exploited to improve TCP's performance; how\n      different\
    \ physical and link-layer mechanisms below the network\n      layer may trigger\
    \ ICMP destination unreachable messages are out of\n      scope of this memo.\n\
    \   Provided that no other route to the specific destination exists, an\n   Internet\
    \ Protocol version 4 (IPv4) [RFC0791] router will notify the\n   corresponding\
    \ sending host about the dropped packets via ICMP\n   destination unreachable\
    \ messages of code 0 (net unreachable) or\n   code 1 (host unreachable) [RFC1812].\
    \  Therefore, the sending host can\n   use the ICMP destination unreachable messages\
    \ of these codes as an\n   indication of a connectivity disruption, since the\
    \ reception of these\n   messages provides evidence that packets were dropped\
    \ due to a link\n   outage.\n   For Internet Protocol version 6 (IPv6) [RFC2460],\
    \ the counterpart of\n   the ICMP destination unreachable message of code 0 (net\
    \ unreachable)\n   and of code 1 (host unreachable) is the ICMPv6 destination\n\
    \   unreachable message of code 0 (no route to destination) [RFC4443].\n   As\
    \ with IPv4, a router should generate an ICMPv6 destination\n   unreachable message\
    \ of code 0 in response to a packet that cannot be\n   delivered to its destination\
    \ address because it lacks a matching\n   entry in its routing table.\n   Note\
    \ that there are also other ICMP and ICMPv6 destination\n   unreachable messages\
    \ with different codes.  Some of them are\n   candidates for connectivity disruption\
    \ indications, too, but need\n   further investigation (for example, ICMP destination\
    \ unreachable\n   messages with code 5 (source route failed), code 11 (net unreachable\n\
    \   for TOS (Type of Service)), or code 12 (host unreachable for TOS)\n   [RFC1812]).\
    \  On the other hand, codes that flag hard errors are of no\n   use for this scheme,\
    \ since TCP should abort the connection when those\n   are received [RFC1122].\n\
    \   For the sake of simplicity, we will use, unless explicitly qualified\n   with\
    \ ICMPv4 or ICMPv6, the term \"ICMP unreachable message\" as a\n   synonym for\
    \ ICMP destination unreachable messages of code 0 or code 1\n   and ICMPv6 destination\
    \ unreachable messages of code 0.  This implies\n   that all keywords from [RFC2119]\
    \ that deal with the handling of\n   received ICMP messages apply in the same\
    \ way to ICMPv6 messages.\n   The accurate interpretation of ICMP unreachable\
    \ messages as a\n   connectivity disruption indication is complicated by the following\n\
    \   two peculiarities of ICMP messages.  First, they do not necessarily\n   operate\
    \ on the same timescale as the packets, i.e., TCP segments that\n   elicited them.\
    \  When a router drops a packet due to a missing route,\n   it will not necessarily\
    \ send an ICMP unreachable message immediately,\n   but will rather queue it for\
    \ later delivery.  Second, ICMP messages\n   are subject to rate-limiting, e.g.,\
    \ when a router drops a whole\n   window of data due to a link outage, it is unlikely\
    \ to send as many\n   ICMP unreachable messages as dropped TCP segments.  Depending\
    \ on the\n   load of the router, it may not even send any ICMP unreachable\n \
    \  messages at all.  Both peculiarities originate from [RFC1812] for\n   ICMPv4\
    \ and [RFC4443] for ICMPv6.\n   Fortunately, according to [RFC0792], ICMPv4 unreachable\
    \ messages have\n   to contain, in their body, the entire IPv4 header [RFC0791]\
    \ of the\n   datagram eliciting the ICMPv4 unreachable message, plus the first\n\
    \   64 bits of the payload of that datagram.  This allows the sending\n   host\
    \ to match the ICMPv4 error message to the transport connection\n   that elicited\
    \ it.  RFC 1812 [RFC1812] augments these requirements and\n   states that ICMPv4\
    \ messages should contain as much of the original\n   datagram as possible without\
    \ the length of the ICMPv4 datagram\n   exceeding 576 bytes.  Therefore, in the\
    \ case of TCP, at least the\n   source port number, the destination port number,\
    \ and the 32-bit TCP\n   sequence number are included.  This allows the originating\
    \ TCP to\n   demultiplex the received ICMPv4 message and to identify the affected\n\
    \   connection.  Moreover, it can identify which segment of the\n   respective\
    \ connection triggered the ICMPv4 unreachable message,\n   unless there are several\
    \ segments in flight with the same sequence\n   number (see Section 5.1).\n  \
    \ For IPv6 [RFC2460], the payload of an ICMPv6 error message has to\n   include\
    \ as many bytes as possible from the IPv6 datagram that\n   elicited the ICMPv6\
    \ error message, without making the error message\n   exceed the minimum IPv6\
    \ MTU (1280 bytes) [RFC4443].  Thus, enough\n   information is available to identify\
    \ both the affected connection and\n   the corresponding segment that triggered\
    \ the ICMPv6 error message.\n   A connectivity disruption indication in the form\
    \ of an ICMP\n   unreachable message associated with a presumably lost TCP segment\n\
    \   provides strong evidence that the segment was not dropped due to\n   congestion,\
    \ but was successfully delivered as far as the reporting\n   router.  It therefore\
    \ did not witness any congestion at least on that\n   part of the path that was\
    \ traversed by both the TCP segment eliciting\n   the ICMP unreachable message\
    \ and the ICMP unreachable message itself.\n"
- title: 4.  Connectivity Disruption Reaction
  contents:
  - "4.  Connectivity Disruption Reaction\n   Section 4.1 introduces the basic idea\
    \ of TCP-LCD.  The complete\n   algorithm is specified in Section 4.2.\n"
- title: 4.1.  Basic Idea
  contents:
  - "4.1.  Basic Idea\n   The goal of the algorithm is to promptly detect when connectivity\
    \ to\n   a previously disconnected peer node has been restored after a long\n\
    \   connectivity disruption, while retaining appropriate behavior in case\n  \
    \ of congestion.  TCP-LCD exploits standard ICMP unreachable messages\n   during\
    \ timeout-based loss recovery.  This increases TCP's\n   retransmission frequency\
    \ by undoing one retransmission timer backoff\n   whenever an ICMP unreachable\
    \ message is received that contains a\n   segment with a sequence number of a\
    \ presumably lost retransmission.\n   This approach has the advantage of appropriately\
    \ reducing the probing\n   rate in case of congestion.  If either the retransmission\
    \ itself or\n   the corresponding ICMP message is dropped, the previously performed\n\
    \   retransmission timer backoff is not undone, which effectively halves\n   the\
    \ probing rate.\n"
- title: 4.2.  Algorithm Details
  contents:
  - "4.2.  Algorithm Details\n   A TCP sender that uses RFC 2988 [RFC2988] to compute\
    \ TCP's\n   retransmission timer MAY employ the following scheme to avoid over-\n\
    \   conservative retransmission timer backoffs in case of long\n   connectivity\
    \ disruptions.  If a TCP sender does implement the\n   following steps, the algorithm\
    \ MUST be initiated upon the first\n   timeout of the oldest outstanding segment\
    \ (SND.UNA) and MUST be\n   stopped upon the arrival of the first acceptable ACK.\
    \  The algorithm\n   MUST NOT be re-initiated upon subsequent timeouts for the\
    \ same\n   segment.  The scheme SHOULD NOT be used in SYN-SENT or SYN-RECEIVED\n\
    \   states [RFC0793] (see Section 5.5).\n   A TCP sender that does not employ\
    \ RFC 2988 [RFC2988] to compute TCP's\n   retransmission timer MUST NOT use TCP-LCD.\
    \  We envision that the\n   scheme could be easily adapted to algorithms other\
    \ than RFC 2988.\n   However, we leave this as future work.\n   RFC 2988 [RFC2988]\
    \ provides in rule (2.5) the option to place a\n   maximum value on the RTO. \
    \ When a TCP implements this rule to provide\n   an upper bound for the RTO, it\
    \ MUST also be used in the following\n   algorithm.  In particular, if the RTO\
    \ is bounded by an upper limit\n   (maximum RTO), the \"MAX_RTO\" variable used\
    \ in this scheme MUST be\n   initialized with this upper limit.  Otherwise, if\
    \ the RTO is\n   unbounded, the \"MAX_RTO\" variable MUST be set to infinity.\n\
    \   The scheme specified in this document uses the \"BACKOFF_CNT\"\n   variable,\
    \ whose initial value is zero.  The variable is used to count\n   the number of\
    \ performed retransmission timer backoffs during one\n   timeout-based loss recovery.\
    \  Moreover, the \"RTO_BASE\" variable is\n   used to recover the previous RTO\
    \ if the retransmission timer backoff\n   was unnecessary.  The variable is initialized\
    \ with the RTO upon\n   initiation of timeout-based loss recovery.\n   (1)  Before\
    \ TCP updates the variable \"RTO\" when it initiates timeout-\n        based loss\
    \ recovery, set the variables \"BACKOFF_CNT\" and\n        \"RTO_BASE\" as follows:\n\
    \           BACKOFF_CNT := 0;\n           RTO_BASE := RTO.\n        Proceed to\
    \ step (R).\n   (R)  This is a placeholder for standard TCP's behavior in case\
    \ the\n        retransmission timer has expired.  In particular, if RFC 2988\n\
    \        [RFC2988] is used, steps (5.4) to (5.6) of that algorithm go\n      \
    \  here.  Proceed to step (2).\n   (2)  To account for the expiration of the retransmission\
    \ timer in the\n        previous step (R), increment the \"BACKOFF_CNT\" variable\
    \ by one:\n           BACKOFF_CNT := BACKOFF_CNT + 1.\n   (3)  Wait either\n \
    \       a)  for the expiration of the retransmission timer.  When the\n      \
    \      retransmission timer expires, proceed to step (R); or\n        b)  for\
    \ the arrival of an acceptable ACK.  When an acceptable\n            ACK arrives,\
    \ proceed to step (A); or\n        c)  for the arrival of an ICMP unreachable\
    \ message.  When the\n            ICMP unreachable message \"ICMP_DU\" arrives,\
    \ proceed to\n            step (4).\n   (4)  If \"BACKOFF_CNT > 0\", i.e., if\
    \ at least one retransmission timer\n        backoff can be undone, then\n   \
    \        proceed to step (5);\n        else\n           proceed to step (3).\n\
    \   (5)  Extract the TCP segment header included in the ICMP unreachable\n   \
    \     message \"ICMP_DU\":\n           SEG := Extract(ICMP_DU).\n   (6)  If \"\
    SEG.SEQ == SND.UNA\", i.e., if the TCP segment \"SEG\"\n        eliciting the\
    \ ICMP unreachable message \"ICMP_DU\" contains the\n        sequence number of\
    \ a retransmission, then\n           proceed to step (7);\n        else\n    \
    \       proceed to step (3).\n   (7)  Undo the last retransmission timer backoff:\n\
    \           BACKOFF_CNT := BACKOFF_CNT - 1;\n           RTO := min(RTO_BASE *\
    \ 2^(BACKOFF_CNT), MAX_RTO).\n   (8)  If the retransmission timer expires due\
    \ to the undoing in the\n        previous step (7), then\n           proceed to\
    \ step (R);\n        else\n           proceed to step (3).\n   (A)  This is a\
    \ placeholder for standard TCP's behavior in case an\n        acceptable ACK has\
    \ arrived.  No further processing.\n   When a TCP in steady-state detects a segment\
    \ loss using the\n   retransmission timer, it enters the timeout-based loss recovery\
    \ and\n   initiates the algorithm (step (1)).  It adjusts the slow-start\n   threshold\
    \ (ssthresh), sets the congestion window (cwnd) to one\n   segment, backs off\
    \ the retransmission timer, and retransmits the\n   first unacknowledged segment\
    \ (step (R)) [RFC5681], [RFC2988].  To\n   account for the expiration of the retransmission\
    \ timer, the TCP\n   sender increments the \"BACKOFF_CNT\" variable by one (step\
    \ (2)).\n   In case the retransmission timer expires again (step (3a)), a TCP\n\
    \   will repeat the retransmission of the first unacknowledged segment\n   and\
    \ back off the retransmission timer once more (step (R)) [RFC2988],\n   as well\
    \ as increment the \"BACKOFF_CNT\" variable by one (step (2)).\n   Note that a\
    \ TCP may implement RFC 2988's [RFC2988] option to place a\n   maximum value on\
    \ the RTO that may result in not performing the\n   retransmission timer backoff.\
    \  However, step (2) MUST always and\n   unconditionally be applied, no matter\
    \ whether or not the\n   retransmission timer is actually backed off.  In other\
    \ words, each\n   time the retransmission timer expires, the \"BACKOFF_CNT\" variable\n\
    \   MUST be incremented by one.\n   If the first received packet after the retransmission(s)\
    \ is an\n   acceptable ACK (step (3b)), a TCP will proceed as normal, i.e., slow-\n\
    \   start the connection and terminate the algorithm (step (A)).  Later\n   ICMP\
    \ unreachable messages from the just terminated timeout-based loss\n   recovery\
    \ are ignored, since the ACK clock is already restarting due\n   to the successful\
    \ retransmission.\n   On the other hand, if the first received packet after the\n\
    \   retransmission(s) is an ICMP unreachable message (step (3c)), and if\n   step\
    \ (4) permits it, TCP SHOULD undo one backoff for each ICMP\n   unreachable message\
    \ reporting an error on a retransmission.  To\n   decide if an ICMP unreachable\
    \ message was elicited by a\n   retransmission, the sequence number it contains\
    \ is inspected\n   (step (5), step (6)).  The undo is performed by recalculating\
    \ the RTO\n   with the decremented \"BACKOFF_CNT\" variable (step (7)).  This\n\
    \   calculation explicitly matches the (bounded) exponential backoff\n   specified\
    \ in rule (5.5) of [RFC2988].\n   Upon receipt of an ICMP unreachable message\
    \ that legitimately undoes\n   one backoff, there is the possibility that the\
    \ shortened\n   retransmission timer has already expired (step (8)).  Then, TCP\n\
    \   SHOULD retransmit immediately.  In case the shortened retransmission\n   timer\
    \ has not yet expired, TCP MUST wait accordingly.\n"
- title: 5.  Discussion of TCP-LCD
  contents:
  - "5.  Discussion of TCP-LCD\n   TCP-LCD takes caution to only react to connectivity\
    \ disruption\n   indications in the form of ICMP unreachable messages during timeout-\n\
    \   based loss recovery.  Therefore, TCP's behavior is not altered when\n   either\
    \ no ICMP unreachable messages are received or the\n   retransmission timer of\
    \ the TCP sender did not expire since the last\n   received acceptable ACK.  Thus,\
    \ by definition, the algorithm triggers\n   only in the case of long connectivity\
    \ disruptions.\n   Only such ICMP unreachable messages that contain a TCP segment\
    \ with\n   the sequence number of a retransmission, i.e., that contain SND.UNA,\n\
    \   are evaluated by TCP-LCD.  All other ICMP unreachable messages are\n   ignored.\
    \  The arrival of those ICMP unreachable messages provides\n   strong evidence\
    \ that the retransmissions were not dropped due to\n   congestion, but were successfully\
    \ delivered to the reporting router.\n   In other words, there is no evidence\
    \ for any congestion at least on\n   that very part of the path that was traversed\
    \ by both the TCP segment\n   eliciting the ICMP unreachable message and the ICMP\
    \ unreachable\n   message itself.\n   However, there are some situations where\
    \ TCP-LCD makes a false\n   decision and incorrectly undoes a retransmission timer\
    \ backoff.  This\n   can happen, even when the received ICMP unreachable message\
    \ contains\n   the segment number of a retransmission (SND.UNA), because the TCP\n\
    \   segment that elicited the ICMP unreachable message may either not be\n   a\
    \ retransmission (Section 5.1) or does not belong to the current\n   timeout-based\
    \ loss recovery (Section 5.2).  Finally, packet\n   duplication (Section 5.3)\
    \ can also spuriously trigger the algorithm.\n   Section 5.4 discusses possible\
    \ probing frequencies, while Section 5.6\n   describes the motivation for not\
    \ reacting to ICMP unreachable\n   messages while TCP is in steady-state.\n"
- title: 5.1.  Retransmission Ambiguity
  contents:
  - "5.1.  Retransmission Ambiguity\n   Historically, the retransmission ambiguity\
    \ problem [Zh86], [KP87] is\n   the TCP sender's inability to distinguish whether\
    \ the first\n   acceptable ACK after a retransmission refers to the original\n\
    \   transmission or to the retransmission.  This problem occurs after\n   both\
    \ a Fast Retransmit and a timeout-based retransmit.  However,\n   modern TCP implementations\
    \ can eliminate the retransmission ambiguity\n   with either the help of Eifel\
    \ [RFC3522], [RFC4015] or Forward RTO-\n   Recovery (F-RTO) [RFC5682].\n   The\
    \ reversion strategy of the given algorithm suffers from a form of\n   retransmission\
    \ ambiguity, too.  In contrast to the above case, TCP\n   suffers from ambiguity\
    \ regarding ICMP unreachable messages received\n   during timeout-based loss recovery.\
    \  With the TCP segment number\n   included in the ICMP unreachable message, a\
    \ TCP sender is not able to\n   determine if the ICMP unreachable message refers\
    \ to the original\n   transmission or to any of the timeout-based retransmissions.\
    \  That\n   is, there is an ambiguity with regard to which TCP segment an ICMP\n\
    \   unreachable message reports on.\n   However, this ambiguity is not considered\
    \ to be a problem for the\n   algorithm.  The assumption that a received ICMP\
    \ unreachable message\n   provides evidence that a non-congestion loss caused\
    \ by the\n   connectivity disruption was wrongly considered a congestion loss\n\
    \   still holds, regardless of to which TCP segment (transmission or\n   retransmission)\
    \ the message refers.\n"
- title: 5.2.  Wrapped Sequence Numbers
  contents:
  - "5.2.  Wrapped Sequence Numbers\n   Besides the ambiguity whether a received ICMP\
    \ unreachable message\n   refers to the original transmission or to any of the\
    \ retransmissions,\n   there is another source of ambiguity related to the TCP\
    \ sequence\n   numbers contained in ICMP unreachable messages.  For high-bandwidth\n\
    \   paths, the sequence space may wrap quickly.  This might cause delayed\n  \
    \ ICMP unreachable messages to coincidentally fit as valid input in the\n   proposed\
    \ scheme.  As a result, the scheme may incorrectly undo\n   retransmission timer\
    \ backoffs.  The chances of this happening are\n   minuscule, since a particular\
    \ ICMP unreachable message would need to\n   contain the exact sequence number\
    \ of the current oldest outstanding\n   segment (SND.UNA), while at the same time\
    \ TCP is in timeout-based\n   loss recovery.  However, two \"worst case\" scenarios\
    \ for the algorithm\n   are possible.\n   For instance, consider a steady-state\
    \ TCP connection, which will be\n   disrupted at an intermediate router due to\
    \ a link outage.  Upon the\n   expiration of the RTO, the TCP sender enters the\
    \ timeout-based loss\n   recovery and starts to retransmit the earliest segment\
    \ that has not\n   been acknowledged (SND.UNA).  For some reason, the router delays\
    \ all\n   corresponding ICMP unreachable messages so that the TCP sender backs\n\
    \   the retransmission timer off normally without any undoing.  At the\n   end\
    \ of the connectivity disruption, the TCP sender eventually detects\n   the re-establishment,\
    \ and it leaves the scheme and finally the\n   timeout-based loss recovery, too.\
    \  A sequence number wrap-around\n   later, the connectivity between the two peers\
    \ is disrupted again, but\n   this time due to congestion and exactly at the time\
    \ at which the\n   current SND.UNA matches the SND.UNA from the previous cycle.\
    \  If the\n   router emits the delayed ICMP unreachable messages now, the TCP\n\
    \   sender would incorrectly undo retransmission timer backoffs.  As the\n   TCP\
    \ sequence number contains 32 bits, the probability of this\n   scenario is at\
    \ most 1/2^32.  Given sufficiently many retransmissions\n   in the first timeout-based\
    \ loss recovery, the corresponding ICMP\n   unreachable messages could reduce\
    \ the RTO in the second recovery at\n   most to \"RTO_BASE\".  However, once the\
    \ ICMP unreachable messages are\n   depleted, the standard exponential backoff\
    \ will be performed.  Thus,\n   the congestion response will only be delayed by\
    \ some false\n   retransmissions.\n   Similar to the above, consider the case\
    \ where a steady-state TCP\n   connection with n segments in flight will be disrupted\
    \ at some point\n   due to a link outage at an intermediate router.  For each\
    \ segment in\n   flight, the router may generate an ICMP unreachable message.\n\
    \   However, for some reason, it delays them.  Once the link outage is\n   over\
    \ and the connection has been re-established, the TCP sender\n   leaves the scheme\
    \ and slow-starts the connection.  Following a\n   sequence number wrap-around,\
    \ a retransmission timeout occurs, just at\n   the moment the TCP sender's current\
    \ window of data reaches the\n   previous range of the sequence number space again.\
    \  In case the\n   router emits the delayed ICMP unreachable messages now, spurious\n\
    \   undoing of the retransmission timer backoff is possible once, if the\n   TCP\
    \ segment number contained in the ICMP unreachable messages matches\n   the current\
    \ SND.UNA, and the timeout was a result of congestion.  In\n   the case of another\
    \ connectivity disruption, the additional undoing\n   of the retransmission timer\
    \ backoff has no impact.  The probability\n   of this scenario is at most n/2^32.\n"
- title: 5.3.  Packet Duplication
  contents:
  - "5.3.  Packet Duplication\n   In case an intermediate router duplicates packets,\
    \ a TCP sender may\n   receive more ICMP unreachable messages during timeout-based\
    \ loss\n   recovery than sent timeout-based retransmissions.  However, since\n\
    \   TCP-LCD keeps track of the number of performed retransmission timer\n   backoffs\
    \ in the \"BACKOFF_CNT\" variable, it will not undo more\n   retransmission timer\
    \ backoffs than were actually performed.\n   Nevertheless, if packet duplication\
    \ and congestion coincide on the\n   path between the two communicating hosts,\
    \ duplicated ICMP unreachable\n   messages could hide the congestion loss of some\
    \ retransmissions or\n   ICMP unreachable messages, and the algorithm may incorrectly\
    \ undo\n   retransmission timer backoffs.  Considering the overall impact of a\n\
    \   router that duplicates packets, the additional load induced by some\n   spurious\
    \ timeout-based retransmits can probably be neglected.\n"
- title: 5.4.  Probing Frequency
  contents:
  - "5.4.  Probing Frequency\n   One might argue that if an ICMP unreachable message\
    \ arrives for a\n   timeout-based retransmission, the RTO shall be reset or recalculated,\n\
    \   similar to what is done when an ACK arrives during timeout-based loss\n  \
    \ recovery (see Karn's algorithm [KP87], [RFC2988]), and a new\n   retransmission\
    \ should be sent immediately.  Generally, this would\n   result in a much higher\
    \ probing frequency based on the round-trip\n   time to the router where connectivity\
    \ has been disrupted.  However,\n   we believe the current scheme provides a good\
    \ trade-off between\n   conservative behavior and fast detection of connectivity\n\
    \   re-establishment.  TCP-LCD focuses on long-connectivity disruptions,\n   i.e.,\
    \ on disruptions that last for several RTOs.  Thus, a much higher\n   probing\
    \ frequency (less than once per RTO) would not significantly\n   increase the\
    \ available transmission time compared to the duration of\n   the connectivity\
    \ disruption.\n"
- title: 5.5.  Reaction during Connection Establishment
  contents:
  - "5.5.  Reaction during Connection Establishment\n   It is possible that a TCP\
    \ sender enters timeout-based loss recovery\n   while the connection is in SYN-SENT\
    \ or SYN-RECEIVED states [RFC0793].\n   The algorithm described in this document\
    \ could also be used for\n   faster connection establishment in networks with\
    \ connectivity\n   disruptions.  However, because existing TCP implementations\
    \ [RFC5461]\n   already interpret ICMP unreachable messages during connection\n\
    \   establishment and abort the corresponding connection, we refrain from\n  \
    \ suggesting this.\n"
- title: 5.6.  Reaction in Steady-State
  contents:
  - "5.6.  Reaction in Steady-State\n   Another exploitation of ICMP unreachable messages\
    \ in the context of\n   TCP congestion control might seem appropriate, while TCP\
    \ is in\n   steady-state.  As the RTT up to the router that generated the ICMP\n\
    \   unreachable message is likely to be substantially shorter than the\n   overall\
    \ RTT to the destination, the ICMP unreachable message may very\n   well reach\
    \ the originating TCP while it is transmitting the current\n   window of data.\
    \  In case the remaining window is large, it might seem\n   appropriate to refrain\
    \ from transmitting the remaining window as\n   there is timely evidence that\
    \ it will only trigger further ICMP\n   unreachable messages at that very router.\
    \  Although this promises\n   improvement from a wastage perspective, it may be\
    \ counterproductive\n   from a security perspective.  An attacker could forge\
    \ such ICMP\n   messages, thereby forcing the originating TCP to stop sending\
    \ data,\n   very similar to the blind throughput-reduction attack mentioned in\n\
    \   [RFC5927].\n   An additional consideration is the following: in the presence\
    \ of\n   multi-path routing, even the receipt of a legitimate ICMP unreachable\n\
    \   message cannot be exploited accurately, because there is the\n   possibility\
    \ that only one of the multiple paths to the destination is\n   suffering from\
    \ a connectivity disruption, which causes ICMP\n   unreachable messages to be\
    \ sent.  Then, however, there is the\n   possibility that the path along which\
    \ the connectivity disruption\n   occurred contributed considerably to the overall\
    \ bandwidth, such that\n   a congestion response is very well reasonable.  However,\
    \ this is not\n   necessarily the case.  Therefore, a TCP has no means except\
    \ for its\n   inherent congestion control to decide on this matter.  All in all,\
    \ it\n   seems that for a connection in steady-state, i.e., not in timeout-\n\
    \   based loss recovery, reacting to ICMP unreachable messages in regard\n   to\
    \ congestion control is not appropriate.  For the case of timeout-\n   based retransmissions,\
    \ however, there is a reasonable congestion\n   response, which is skipping further\
    \ retransmission timer backoffs\n   because there is no congestion indication\
    \ -- as described above.\n"
- title: 6.  Dissolving Ambiguity Issues Using the TCP Timestamps Option
  contents:
  - "6.  Dissolving Ambiguity Issues Using the TCP Timestamps Option\n   If the TCP\
    \ Timestamps option [RFC1323] is enabled for a connection, a\n   TCP sender SHOULD\
    \ use the following algorithm to dissolve the\n   ambiguity issues mentioned in\
    \ Sections 5.1, 5.2, and 5.3.  In\n   particular, both the retransmission ambiguity\
    \ and the packet\n   duplication problems are prevented by the following TCP-LCD\
    \ variant.\n   On the other hand, the false positives caused by wrapped sequence\n\
    \   numbers cannot be completely avoided, but the likelihood is further\n   reduced\
    \ by a factor of 1/2^32, since the Timestamp Value field\n   (TSval) of the TCP\
    \ Timestamps option contains 32 bits.\n   Hence, implementers may choose to employ\
    \ the TCP-LCD with the\n   following modifications.\n   Step (1) is replaced by\
    \ step (1'):\n   (1')  Before TCP updates the variable \"RTO\" when it initiates\n\
    \         timeout-based loss recovery, set the variables \"BACKOFF_CNT\"\n   \
    \      and \"RTO_BASE\", and the data structure \"RETRANS_TS\", as\n         follows:\n\
    \            BACKOFF_CNT := 0;\n            RTO_BASE := RTO;\n            RETRANS_TS\
    \ := [].\n         Proceed to step (R).\n   Step (2) is extended by step (2b):\n\
    \   (2b)  Store the value of the Timestamp Value field (TSval) of the TCP\n  \
    \       Timestamps option included in the retransmission \"RET\" sent in\n   \
    \      step (R) into the \"RETRANS_TS\" data structure:\n            RETRANS_TS.add(RET.TSval)\n\
    \   Step (6) is replaced by step (6'):\n   (6')  If \"SEG.SEQ == SND.UNA && RETRANS_TS.exists(SEQ.TSval)\"\
    , i.e.,\n         if the TCP segment \"SEG\" eliciting the ICMP unreachable message\n\
    \         \"ICMP_DU\" contains the sequence number of a retransmission, and\n\
    \         the value in its Timestamp Value field (TSval) is valid, then\n    \
    \        proceed to step (7');\n         else\n            proceed to step (3).\n\
    \   Step (7) is replaced by step (7'):\n   (7')  Undo the last retransmission\
    \ timer backoff:\n            RETRANS_TS.remove(SEQ.TSval);\n            BACKOFF_CNT\
    \ := BACKOFF_CNT - 1;\n            RTO := min(RTO_BASE * 2^(BACKOFF_CNT), MAX_RTO).\n\
    \   The downside of this variant is twofold.  First, the modifications\n   come\
    \ at a cost: the TCP sender is required to store the timestamps of\n   all retransmissions\
    \ sent during one timeout-based loss recovery.\n   Second, this variant can only\
    \ undo a retransmission timer backoff if\n   the intermediate router experiencing\
    \ the link outage implements\n   [RFC1812] and chooses to include, in addition\
    \ to the first 64 bits of\n   the payload of the triggering datagram, as many\
    \ bits as are needed to\n   include the TCP Timestamps option in the ICMP unreachable\
    \ message.\n"
- title: 7.  Interoperability Issues
  contents:
  - "7.  Interoperability Issues\n   This section discusses interoperability issues\
    \ related to introducing\n   TCP-LCD.\n"
- title: 7.1.  Detection of TCP Connection Failures
  contents:
  - "7.1.  Detection of TCP Connection Failures\n   TCP-LCD may produce side effects\
    \ for TCP implementations that attempt\n   to detect TCP connection failures by\
    \ counting timeout-based\n   retransmissions.  [RFC1122] states in Section 4.2.3.5\
    \ that a TCP host\n   must handle excessive retransmissions of data segments with\
    \ two\n   thresholds, R1 and R2, that measure the number of retransmissions\n\
    \   that have occurred for the same segment.  Both thresholds might be\n   measured\
    \ either in time units or as a count of retransmissions.\n   Due to TCP-LCD's\
    \ reversion strategy of the retransmission timer, the\n   assumption that a certain\
    \ number of retransmissions corresponds to a\n   specific time interval no longer\
    \ holds, as additional retransmissions\n   may be performed during timeout-based-loss\
    \ recovery to detect the end\n   of the connectivity disruption.  Therefore, a\
    \ TCP employing TCP-LCD\n   either MUST measure the thresholds R1 and R2 in time\
    \ units or, in\n   case R1 and R2 are counters of retransmissions, MUST convert\
    \ them\n   into time intervals that correspond to the time an unmodified TCP\n\
    \   would need to reach the specified number of retransmissions.\n"
- title: 7.2.  Explicit Congestion Notification (ECN)
  contents:
  - "7.2.  Explicit Congestion Notification (ECN)\n   With Explicit Congestion Notification\
    \ (ECN) [RFC3168], ECN-capable\n   routers are no longer limited to dropping packets\
    \ to indicate\n   congestion.  Instead, they can set the Congestion Experienced\
    \ (CE)\n   codepoint in the IP header to indicate congestion.  With TCP-LCD, it\n\
    \   may happen that during a connectivity disruption, a received ICMP\n   unreachable\
    \ message has been elicited by a timeout-based\n   retransmission that was marked\
    \ with the CE codepoint before reaching\n   the router experiencing the link outage.\
    \  In such a case, a TCP\n   sender MUST, corresponding to Section 6.1.2 of [RFC3168],\n\
    \   additionally reset the retransmission timer in case the algorithm\n   undoes\
    \ a retransmission timer backoff.\n"
- title: 7.3.  TCP-LCD and IP Tunnels
  contents:
  - "7.3.  TCP-LCD and IP Tunnels\n   It is worth noting that IP tunnels, including\
    \ IPsec [RFC4301], IP\n   encapsulation within IP [RFC2003], Generic Routing Encapsulation\n\
    \   (GRE) [RFC2784], and others, are compatible with TCP-LCD, as long as\n   the\
    \ received ICMP unreachable messages can be demultiplexed and\n   extracted appropriately\
    \ by the TCP sender during timeout-based loss\n   recovery.\n   If, for example,\
    \ end-to-end tunnels like IPsec in transport mode\n   [RFC4301] are employed,\
    \ a TCP sender may receive ICMP unreachable\n   messages where additional steps,\
    \ e.g., also performing decryption in\n   step (5) of the algorithm, are needed\
    \ to extract the TCP header from\n   these ICMP messages.  Provided that the received\
    \ ICMP unreachable\n   message contains enough information, i.e., SEG.SEQ is extractable,\n\
    \   this information can still be used as a valid input for the proposed\n   algorithm.\n\
    \   Likewise, if IP encapsulation like [RFC2003] is used in some part of\n   the\
    \ path between the communicating hosts, the tunnel ingress node may\n   receive\
    \ the ICMP unreachable messages from an intermediate router\n   experiencing the\
    \ link outage.  Nevertheless, the tunnel ingress node\n   may replay the ICMP\
    \ unreachable messages in order to inform the TCP\n   sender.  If enough information\
    \ is preserved to extract SEG.SEQ, the\n   replayed ICMP unreachable messages\
    \ can still be used in TCP-LCD.\n"
- title: 8.  Related Work
  contents:
  - "8.  Related Work\n   Several methods that address TCP's problems in the presence\
    \ of\n   connectivity disruptions have been proposed in literature.  Some of\n\
    \   them try to improve TCP's performance by modifying lower layers.  For\n  \
    \ example, [SM03] introduces a \"smart link layer\", which buffers one\n   segment\
    \ for each active connection and replays these segments upon\n   connectivity\
    \ re-establishment.  This approach has a serious drawback:\n   previously stateless\
    \ intermediate routers have to be modified in\n   order to inspect TCP headers,\
    \ to track the end-to-end connection, and\n   to provide additional buffer space.\
    \  This leads to an additional need\n   for memory and processing power.\n   On\
    \ the other hand, stateless link-layer schemes, as proposed in\n   [RFC3819],\
    \ which unconditionally buffer some small number of packets,\n   may have another\
    \ problem: if a packet is buffered longer than the\n   maximum segment lifetime\
    \ (MSL) of 2 min. [RFC0793], i.e., the\n   disconnection lasts longer than the\
    \ MSL, TCP's assumption that such\n   segments will never be received will no\
    \ longer be true, violating\n   TCP's semantics [TCP-REXMIT-NOW].\n   Other approaches,\
    \ like the TCP feedback-based scheme (TCP-F) [CRVP01]\n   or the Explicit Link\
    \ Failure Notification (ELFN) [HV02] inform a TCP\n   sender about a disrupted\
    \ path by special messages generated and sent\n   from intermediate routers. \
    \ In the case of a link failure, the TCP\n   sender stops sending segments and\
    \ freezes its retransmission timers.\n   TCP-F stays in this state and remains\
    \ silent until either a \"route\n   establishment notification\" is received or\
    \ an internal timer expires.\n   In contrast, ELFN periodically probes the network\
    \ to detect\n   connectivity re-establishment.  Both proposals rely on changes\
    \ to\n   intermediate routers, whereas the scheme proposed in this document is\n\
    \   a sender-only modification.  Moreover, ELFN does not consider\n   congestion\
    \ and may impose serious additional load on the network,\n   depending on the\
    \ probe interval.\n   The authors of \"ad hoc TCP\" (ATCP) [LS01] propose enhancements\
    \ to\n   identify different types of packet loss by introducing a layer\n   between\
    \ TCP and IP.  They utilize ICMP destination unreachable\n   messages to set TCP's\
    \ receiver advertised window to zero, thus\n   forcing the TCP sender to perform\
    \ zero window probing with an\n   exponential backoff.  ICMP destination unreachable\
    \ messages that\n   arrive during this probing period are ignored.  This approach\
    \ is\n   nearly orthogonal to this document, which exploits ICMP messages to\n\
    \   undo a retransmission timer backoff when TCP is already probing.  In\n   principle,\
    \ both mechanisms could be combined.  However, due to\n   security considerations,\
    \ it does not seem appropriate to adopt ATCP's\n   reaction, as discussed in Section\
    \ 5.6.\n   Schuetz et al. [TCP-RLCI] describe a set of TCP extensions that\n \
    \  improve TCP's behavior when transmitting over paths whose\n   characteristics\
    \ can change rapidly.  Their proposed extensions modify\n   the local behavior\
    \ of TCP and introduce a new TCP option to signal\n   locally received connectivity-change\
    \ indications (CCIs) to remote\n   peers.  Upon receipt of a CCI, they re-probe\
    \ the path characteristics\n   either by performing a speculative retransmission\
    \ or by sending a\n   single segment of new data, depending on whether the connection\
    \ is\n   currently stalled in exponential backoff or transmitting in steady-\n\
    \   state, respectively.  The authors focus on specifying TCP response\n   mechanisms;\
    \ nevertheless, underlying layers would have to be modified\n   to explicitly\
    \ send CCIs to make these immediate responses possible.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Generally, an attacker has only two attack alternatives:\
    \ to generate\n   ICMP unreachable messages to try to make a TCP modified with\
    \ TCP-LCD\n   flood the network, or to suppress legitimate ICMP unreachable\n\
    \   messages to try to slow down the transmission rate of a TCP sender.\n   In\
    \ order to generate ICMP unreachable messages that fit as an input\n   for TCP-LCD,\
    \ an attacker would need to guess the correct four-tuple\n   (i.e., Source IP\
    \ Address, Source TCP port, Destination IP Address,\n   and Destination TCP port)\
    \ and the exact segment sequence number of\n   the current timeout-based retransmission.\
    \  Yet, the correct sequence\n   number is generally hard to guess, given the\
    \ probability of 1/2^32.\n   Even if an attacker has information about that sequence\
    \ number (i.e.,\n   the attacker can eavesdrop on the retransmissions) the impact\
    \ on the\n   network load from the attacker may be considered low, since the\n\
    \   retransmission frequency is limited by the RTO that was computed\n   before\
    \ TCP had entered the timeout-based loss recovery.  Hence, the\n   highest probing\
    \ frequency is expected to be even lower than once per\n   minimum RTO, i.e.,\
    \ 1 s as specified by [RFC2988].  It is important to\n   note that an attacker\
    \ who can correctly guess the four-tuple and the\n   segment sequence number can\
    \ easily launch more serious attacks (i.e.,\n   hijack the connection), whether\
    \ or not TCP-LCD is used.\n   There may be means by which an attacker can cause\
    \ the suppression of\n   legitimate ICMP unreachable messages (e.g., by flooding\
    \ the router\n   experiencing the link outage to trigger ICMP rate-limiting).\n\
    \   However, even if the attacker could suppress every legitimate ICMP\n   unreachable\
    \ message, the security impact of such an attack is\n   negligible, since the\
    \ TCP sender using TCP-LCD will behave like a\n   regular TCP would.  Note that\
    \ this kind of attack is\n   indistinguishable from a router experiencing a link\
    \ outage that is\n   not sending ICMP unreachable messages at all (e.g., because\
    \ of local\n   policy).\n   In summary, the algorithm proposed in this document\
    \ is considered to\n   be secure.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   We would like to thank Lars Eggert, Adrian Farrel, Mark\
    \ Handley, Kai\n   Jakobs, Ilpo Jarvinen, Enrico Marocco, Catherine Meadows, Juergen\n\
    \   Quittek, Pasi Sarolahti, Tim Shepard, Joe Touch, and Carsten Wolff\n   for\
    \ feedback on earlier versions of this document.  We also thank\n   Michael Faber,\
    \ Daniel Schaffrath, and Damian Lukowski for\n   implementing and testing the\
    \ algorithm in Linux.  Special thanks go\n   to Ilpo Jarvinen for giving valuable\
    \ feedback regarding the Linux\n   implementation.\n   This work has been supported\
    \ by the German National Science\n   Foundation (DFG) within the research excellence\
    \ cluster Ultra High-\n   Speed Mobile Information and Communication (UMIC), RWTH\
    \ Aachen\n   University.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC0792]   Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5,\n               RFC 792, September 1981.\n   [RFC0793]  \
    \ Postel, J., \"Transmission Control Protocol\", STD 7,\n               RFC 793,\
    \ September 1981.\n   [RFC1323]   Jacobson, V., Braden, B., and D. Borman, \"\
    TCP Extensions\n               for High Performance\", RFC 1323, May 1992.\n \
    \  [RFC1812]   Baker, F., \"Requirements for IP Version 4 Routers\",\n       \
    \        RFC 1812, June 1995.\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2988]   Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n\
    \               Timer\", RFC 2988, November 2000.\n   [RFC4443]   Conta, A., Deering,\
    \ S., and M. Gupta, \"Internet Control\n               Message Protocol (ICMPv6)\
    \ for the Internet Protocol\n               Version 6 (IPv6) Specification\",\
    \ RFC 4443, March 2006.\n   [RFC5681]   Allman, M., Paxson, V., and E. Blanton,\
    \ \"TCP Congestion\n               Control\", RFC 5681, September 2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CRVP01]    Chandran, K., Raghunathan, S.,\
    \ Venkatesan, S., and R.\n               Prakash, \"A feedback-based scheme for\
    \ improving TCP\n               performance in ad hoc wireless networks\", IEEE\
    \ Personal\n               Communications vol. 8, no. 1, pp. 34-39, February 2001.\n\
    \   [HV02]      Holland, G. and N. Vaidya, \"Analysis of TCP performance\n   \
    \            over mobile ad hoc networks\", Wireless Networks vol. 8,\n      \
    \         no. 2-3, pp. 275-288, March 2002.\n   [KP87]      Karn, P. and C. Partridge,\
    \ \"Improving Round-Trip Time\n               Estimates in Reliable Transport\
    \ Protocols\", Proceedings\n               of the Conference on Applications,\
    \ Technologies,\n               Architectures, and Protocols for Computer Communication\n\
    \               (SIGCOMM'87) pp. 2-7, August 1987.\n   [LS01]      Liu, J. and\
    \ S. Singh, \"ATCP: TCP for mobile ad hoc\n               networks\", IEEE Journal\
    \ on Selected Areas in\n               Communications vol. 19, no. 7, pp. 1300-1315,\
    \ July 2001.\n   [RFC0791]   Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n\
    \               September 1981.\n   [RFC0826]   Plummer, D., \"Ethernet Address\
    \ Resolution Protocol: Or\n               converting network protocol addresses\
    \ to 48.bit Ethernet\n               address for transmission on Ethernet hardware\"\
    , STD 37,\n               RFC 826, November 1982.\n   [RFC1122]   Braden, R.,\
    \ \"Requirements for Internet Hosts -\n               Communication Layers\",\
    \ STD 3, RFC 1122, October 1989.\n   [RFC2003]   Perkins, C., \"IP Encapsulation\
    \ within IP\", RFC 2003,\n               October 1996.\n   [RFC2460]   Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n               (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2784]   Farinacci, D., Li, T., Hanks, S., Meyer,\
    \ D., and P.\n               Traina, \"Generic Routing Encapsulation (GRE)\",\
    \ RFC 2784,\n               March 2000.\n   [RFC3168]   Ramakrishnan, K., Floyd,\
    \ S., and D. Black, \"The Addition\n               of Explicit Congestion Notification\
    \ (ECN) to IP\",\n               RFC 3168, September 2001.\n   [RFC3522]   Ludwig,\
    \ R. and M. Meyer, \"The Eifel Detection Algorithm\n               for TCP\",\
    \ RFC 3522, April 2003.\n   [RFC3782]   Floyd, S., Henderson, T., and A. Gurtov,\
    \ \"The NewReno\n               Modification to TCP's Fast Recovery Algorithm\"\
    , RFC 3782,\n               April 2004.\n   [RFC3819]   Karn, P., Bormann, C.,\
    \ Fairhurst, G., Grossman, D.,\n               Ludwig, R., Mahdavi, J., Montenegro,\
    \ G., Touch, J., and\n               L.  Wood, \"Advice for Internet Subnetwork\
    \ Designers\",\n               BCP 89, RFC 3819, July 2004.\n   [RFC4015]   Ludwig,\
    \ R. and A. Gurtov, \"The Eifel Response Algorithm\n               for TCP\",\
    \ RFC 4015, February 2005.\n   [RFC4301]   Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n               Internet Protocol\", RFC 4301, December 2005.\n   [RFC5461]\
    \   Gont, F., \"TCP's Reaction to Soft Errors\", RFC 5461,\n               February\
    \ 2009.\n   [RFC5682]   Sarolahti, P., Kojo, M., Yamamoto, K., and M. Hata,\n\
    \               \"Forward RTO-Recovery (F-RTO): An Algorithm for Detecting\n \
    \              Spurious Retransmission Timeouts with TCP\", RFC 5682,\n      \
    \         September 2009.\n   [RFC5927]   Gont, F., \"ICMP Attacks against TCP\"\
    , RFC 5927,\n               July 2010.\n   [SESB05]    Schuetz, S., Eggert, L.,\
    \ Schmid, S., and M. Brunner,\n               \"Protocol enhancements for intermittently\
    \ connected\n               hosts\", SIGCOMM Computer Communication Review vol.\
    \ 35,\n               no. 3, pp. 5-18, December 2005.\n   [SM03]      Scott, J.\
    \ and G. Mapp, \"Link layer-based TCP optimisation\n               for disconnecting\
    \ networks\", SIGCOMM Computer\n               Communication Review vol. 33, no.\
    \ 5, pp. 31-42,\n               October 2003.\n   [TCP-REXMIT-NOW]\n         \
    \      Eggert, L., Schuetz, S., and S. Schmid, \"TCP Extensions\n            \
    \   for Immediate Retransmissions\", Work in Progress,\n               June 2005.\n\
    \   [TCP-RLCI]\n               Schuetz, S., Koutsianas, N., Eggert, L., Eddy,\
    \ W., Swami,\n               Y., and K. Le, \"TCP Response to Lower-Layer Connectivity-\n\
    \               Change Indications\", Work in Progress, February 2008.\n   [Zh86]\
    \      Zhang, L., \"Why TCP Timers Don't Work Well\", Proceedings\n          \
    \     of the Conference on Applications, Technologies,\n               Architectures,\
    \ and Protocols for Computer Communication\n               (SIGCOMM'86) pp. 397-405,\
    \ August 1986.\n   [ZimHan09]\n               Zimmermann, A., \"Make TCP more\
    \ Robust to Long\n               Connectivity Disruptions\", Proceedings of the\
    \ 75th IETF\n               Meeting slides, July 2009,\n               <http://www.ietf.org/proceedings/75/slides/tcpm-0.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alexander Zimmermann\n   RWTH Aachen University\n   Ahornstrasse\
    \ 55\n   Aachen,   52074\n   Germany\n   Phone: +49 241 80 21422\n   EMail: zimmermann@cs.rwth-aachen.de\n\
    \   Arnd Hannemann\n   RWTH Aachen University\n   Ahornstrasse 55\n   Aachen,\
    \   52074\n   Germany\n   Phone: +49 241 80 21423\n   EMail: hannemann@nets.rwth-aachen.de\n"
