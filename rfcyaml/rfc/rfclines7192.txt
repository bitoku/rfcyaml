Abstract This document describes the conventions for using several cryptographic algorithms with the Cryptographic Message Syntax (CMS) key package receipt and error content types.
Specifically, it includes conventions necessary to implement SignedData, EnvelopedData, EncryptedData, and AuthEnvelopedData. 1.
This document describes the conventions for using several cryptographic algorithms with the Cryptographic Message Syntax (CMS) key package receipt and error content types [RFC7191].
Specifically, it includes conventions necessary to implement SignedData [RFC5652], EnvelopedData [RFC5652], EncryptedData [RFC5652], and AuthEnvelopedData
This document does not define any new algorithms; instead, it refers to previously defined algorithms.
In fact, the algorithm requirements in this document are the same as those in [RFC5959], [RFC6033], [RFC6160], [RFC6161], and [RFC6162] with the following exceptions: the content encryption algorithm is AES in Cipher Block Chaining (CBC) mode as opposed to AES Key Wrap with Message Length Indicator (MLI) and the key wrap algorithm is AES Key Wrap as opposed to AES Key Wrap with MLI.
The rationale for the difference is that the receipt and error content types are not keys; therefore, AES Key Wrap with MLI is not appropriate for the content encryption algorithm.
If an implementation is not using AES Key Wrap with MLI as the content encryption algorithm, then there's no need to keep the key wrap algorithm the same as the content encryption algorithm.
[RFC7191] only requires that the key package receipt be signed.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
If an implementation supports SignedData, then it MUST support the signature scheme RSA [RFC3370] and SHOULD support the signature schemes RSA Probabilistic Signature Scheme (RSASSA PSS)
[RFC4056] and Digital Signature Algorithm (DSA)
Additionally, implementations MUST support the hash function SHA 256
[RFC5754] in concert with these signature schemes, and they SHOULD support the hash function SHA 1
Implementations can also choose the to support Elliptic Curve Digital Signature Algorithm (ECDSA)
If an implementation supports EnvelopedData, then it MUST implement key transport and it MAY implement key agreement.
When key transport is used, RSA encryption [RFC3370] MUST be supported, and RSA Encryption Scheme Optimal Asymmetric Encryption Padding (RSAES OAEP)
When key agreement is used, Diffie Hellman (DH) ephemeral static [RFC3370] MUST be supported.
When key agreement is used, Elliptic Curve Diffie Hellman (ECDH) [RFC5753]
Regardless of the key management technique choice, implementations MUST support AES 128 in CBC mode [AES] as the content encryption algorithm.
Implementations SHOULD support AES 256 in CBC mode [AES] as the content encryption algorithm.
When key agreement is used, the same length for the underlying block algorithm MUST be used.
If the content encryption algorithm is AES 128 in CBC mode, then the key wrap algorithm MUST be AES 128 Key Wrap [RFC3394].
If the content encryption algorithm is AES 256 in CBC mode, then the key wrap algorithm MUST be AES 256 Key Wrap [RFC3394].
If an implementation supports EncryptedData, then it MUST implement AES 128 in CBC mode [AES] and SHOULD implement AES 256 in CBC mode [AES].
EncryptedData requires that keys be managed by other means;
therefore, the only algorithm specified is the content encryption algorithm.
If an implementation supports AuthEnvelopedData, then it MUST implement the EnvelopedData recommendations except for the content  encryption algorithm, which, in this case, MUST be AES GCM [RFC5084]; the 128 bit version MUST be implemented, and the 256 bit version SHOULD be implemented.
Implementations MAY also support AES CCM [RFC5084].
The easiest way to implement SignedData, EnvelopedData, and AuthEnvelopedData is with public key certificates [RFC5280].
If an implementation supports RSA, RSASSA PSS, DSA, RSAES OAEP, or Diffie  Hellman, then it MUST support key lengths from 1024 bit to 2048 bit, inclusive.
If an implementation supports ECDSA or ECDH, then it MUST support keys on the P 256 curve [RFC6090].
The security considerations from [RFC3370], [RFC3394], [RFC3560], [RFC4056], [RFC5084], [RFC5652], [RFC5753], and [RFC5754] apply.
[SP800 57] provides comparable bits of security for some algorithms and key sizes.
[SP800 57] also provides time frames during which certain numbers of bits of security are appropriate, and some environments may find these time frames useful.
