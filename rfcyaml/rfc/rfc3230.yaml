- contents:
  - '                        Instance Digests in HTTP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   HTTP/1.1 defines a Content-MD5 header that allows a server to include\n
    \  a digest of the response body.  However, this is specifically defined\n   to
    cover the body of the actual message, not the contents of the full\n   file (which
    might be quite different, if the response is a Content-\n   Range, or uses a delta
    encoding).  Also, the Content-MD5 is limited\n   to one specific digest algorithm;
    other algorithms, such as SHA-1\n   (Secure Hash Standard), may be more appropriate
    in some\n   circumstances.  Finally, HTTP/1.1 provides no explicit mechanism by\n
    \  which a client may request a digest.  This document proposes HTTP\n   extensions
    that solve these problems.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1 Introduction....................................................
    \ 2\n        1.1 Other limitations of HTTP/1.1............................  3\n
    \  2 Goals...........................................................  4\n   3
    Terminology.....................................................  5\n   4 Specification...................................................
    \ 6\n        4.1 Protocol parameter specifications........................  6\n
    \            4.1.1 Digest algorithms.................................  6\n        4.2
    Instance digests.........................................  7\n        4.3 Header
    specifications....................................  8\n             4.3.1 Want-Digest.......................................
    \ 8\n             4.3.2 Digest............................................  9\n
    \  5 Negotiation of Content-MD5......................................  9\n   6
    IANA Considerations............................................. 10\n   7 Security
    Considerations......................................... 10\n   8 Acknowledgements................................................
    10\n   9 References...................................................... 10\n
    \  10 Authors' Addresses............................................. 12\n   11
    Full Copyright Statement....................................... 13\n"
  title: Table of Contents
- contents:
  - "1 Introduction\n   Although HTTP is typically layered over a reliable transport\n
    \  protocol, such as TCP, this does not guarantee reliable transport of\n   information
    from sender to receiver.  Various problems, including\n   undetected transmission
    errors, programming errors, corruption of\n   stored data, and malicious intervention
    can cause errors in the\n   transmitted information.\n   A common approach to
    the problem of data integrity in a network\n   protocol or distributed system,
    such as HTTP, is the use of digests,\n   checksums, or hash values.  The sender
    computes a digest and sends it\n   with the data; the recipient computes a digest
    of the received data,\n   and then verifies the integrity of this data by comparing
    the\n   digests.\n   Checksums are used at virtually all layers of the IP stack.
    \ However,\n   different digest algorithms might be used at each layer, for reasons\n
    \  of computational cost, because the size and nature of the data being\n   protected
    varies, and because the possible threats to data integrity\n   vary.  For example,
    Ethernet uses a Cyclic Redundancy Check (CRC).\n   The IPv4 protocol uses a ones-complement
    checksum over the IP header\n   (but not the rest of the packet).  TCP uses a
    ones-complement\n   checksum over the TCP header and data, and includes a \"pseudo-header\"\n
    \  to detect certain kinds of programming errors.\n   HTTP/1.1 [4] includes a
    mechanism for ensuring message integrity, the\n   Content-MD5 header.  This header
    is actually defined for MIME-\n   conformant messages in a standalone specification
    [10].  According to\n   the HTTP/1.1 specification,\n      The Content-MD5 entity-header
    field [...]  is an MD5 digest of the\n      entity-body for the purpose of providing
    an end-to-end message\n      integrity check (MIC) of the entity-body.\n   HTTP/1.1
    borrowed Content-MD5 from the MIME world based on an analogy\n   between MIME
    messages (e.g., electronic mail messages) and HTTP\n   messages (requests to or
    responses from an HTTP server).\n   As discussed in more detail in section 3,
    this analogy between MIME\n   messages and HTTP messages has resulted in some
    confusion.  In\n   particular, while a MIME message is self-contained, an HTTP
    message\n   might not contain the entire representation of the current state of
    a\n   resource.  (More precisely, an HTTP response might not contain an\n   entire
    \"instance\"; see section 3 for a definition of this term.)\n   There are at least
    two situations where this distinction is an issue:\n      1. When an HTTP server
    sends a 206 (Partial Content) response, as\n         defined in HTTP/1.1.  The
    client may form its view of an\n         instance (e.g., an HTML document) by
    combining a cache entry\n         with the partial content in the message.\n      2.
    When an HTTP server uses a \"delta encoding\", as proposed in a\n         separate
    document [9].  A delta encoding represents the changes\n         between the current
    instance of a resource and a previous\n         instance, and is an efficient
    way of reducing the bandwidth\n         required for cache updates.  The client
    forms its view of an\n         instance by applying the delta in the message to
    one of its\n         cache entries.\n   We include these two kinds of transformations
    in a potentially\n   broader category we call \"instance manipulations.\"\n   In
    each of these cases, the server might use a Content-MD5 header to\n   protect
    the integrity of the response message.  However, because the\n   MIC in a Content-MD5
    header field applies only to the entity in that\n   message, and not to the entire
    instance being reassembled, it cannot\n   protect against errors due to data corruption
    (e.g., of cache\n   entries), programming errors (e.g., improper application of
    a partial\n   content or delta), certain malicious attacks [9], or corruption
    of\n   certain HTTP headers in transit.\n   Thus, the Content-MD5 header, while
    useful and sufficient in many\n   cases, is not sufficient for verifying instance
    integrity in all uses\n   of HTTP.\n   The Digest Authentication mechanism [5]
    provides (in addition to its\n   other goals) a message-digest function similar
    to Content-MD5, except\n   that it includes certain header fields.  Like Content-MD5,
    it covers\n   a specific message, not an entire instance.\n"
  - contents:
    - "1.1 Other limitations of HTTP/1.1\n   Checksums are not free.  Computing a
      digest takes CPU resources, and\n   might add latency to the generation of a
      message.  (Some of these\n   costs can be avoided by careful caching at the
      sender's end, but in\n   many cases such a cache would not have a useful hit
      ratio.)\n   Transmitting a digest consumes HTTP header space (and therefore\n
      \  increases latency and network bandwidth requirements.)  If the\n   message
      recipient does not intend to use the digest, why should the\n   message sender
      waste resources computing and sending it?\n   The Content-MD5 header, of course,
      implies the use of the MD5\n   algorithm [15].  Other algorithms, however, might
      be more appropriate\n   for some purposes.  These include the SHA-1 algorithm
      [12] and\n   various \"fingerprinting\" algorithms [7].  HTTP currently provides
      no\n   standardized support for the use of these algorithms.\n   HTTP/1.1 apparently
      assumes that the choice to generate a digest is\n   up to the sender, and provides
      no mechanism for the recipient to\n   indicate whether a checksum would be useful,
      or what checksum\n   algorithms it would understand.\n"
    title: 1.1 Other limitations of HTTP/1.1
  title: 1 Introduction
- contents:
  - "2 Goals\n   The goals of this proposal are:\n      1. Digest coverage for entire
    instances communicated via HTTP.\n      2. Support for multiple digest algorithms.\n
    \     3. Negotiation of the use of digests.\n   The goals do not include:\n      -
    \ header integrity\n         The digest mechanisms described here cover only the
    bodies of\n         instances, and do not protect the integrity of associated\n
    \        \"entity headers\" or other message headers.\n      -  authentication\n
    \        The digest mechanisms described here are not meant to support\n         authentication
    of the source of a digest or of a message or\n         instance.  These mechanisms,
    therefore, are not sufficient\n         defense against many kinds of malicious
    attacks.\n      -  privacy\n         Digest mechanisms do not provide message
    privacy.\n      -  authorization\n         The digest mechanisms described here
    are not meant to support\n         authorization or other kinds of access controls.\n
    \  The Digest Access Authentication mechanism [5] can provide some\n   integrity
    for certain HTTP headers, and does provide authentication.\n"
  title: 2 Goals
- contents:
  - "3 Terminology\n   HTTP/1.1 [4] defines the following terms:\n   resource          A
    network data object or service that can be\n                     identified by
    a URI, as defined in section 3.2.\n                     Resources may be available
    in multiple\n                     representations (e.g. multiple languages, data\n
    \                    formats, size, resolutions) or vary in other ways.\n   entity
    \           The information transferred as the payload of a\n                     request
    or response.  An entity consists of\n                     metainformation in the
    form of entity-header fields\n                     and content in the form of
    an entity-body, as\n                     described in section 7.\n   variant           A
    resource may have one, or more than one,\n                     representation(s)
    associated with it at any given\n                     instant.  Each of these
    representations is termed a\n                     `variant.' Use of the term `variant'
    does not\n                     necessarily imply that the resource is subject
    to\n                     content negotiation.\n   The dictionary definition for
    \"entity\" is \"something that has\n   separate and distinct existence and objective
    or conceptual reality\"\n   [8].  Unfortunately, the definition for \"entity\"
    in HTTP/1.1 is\n   similar to that used in MIME [6], based on an entirely false
    analogy\n   between MIME and HTTP.\n   In MIME, electronic mail messages do have
    distinct and separate\n   existences. MIME defines \"entity\" as something that
    \"refers\n   specifically to the MIME-defined header fields and contents of either\n
    \  a message or one of the parts in the body of a multipart entity.\"\n   In HTTP,
    however, a response message to a GET does not have a\n   distinct and separate
    existence.  Rather, it is describing the\n   current state of a resource (or a
    variant, subject to a set of\n   constraints).  The HTTP/1.1 specification provides
    no term to\n   describe \"the value that would be returned in response to a GET\n
    \  request at the current time for the selected variant of the specified\n   resource.\"
    \ This leads to awkward wordings in the HTTP/1.1\n   specification in places where
    this concept is necessary.\n   It is too late to fix the terminological failure
    in the HTTP/1.1\n   specification, so we instead define a new term, for use in
    this\n   document:\n   instance          The entity that would be returned in
    a status-200\n                     response to a GET request, at the current time,
    for\n                     the selected variant of the specified resource,\n                     with
    the application of zero or more content-\n                     codings, but without
    the application of any\n                     instance manipulations or transfer-codings.\n
    \  It is convenient to think of an entity tag, in HTTP/1.1, as being\n   associated
    with an instance, rather than an entity.  That is, for a\n   given resource, two
    different response messages might include the\n   same entity tag, but two different
    instances of the resource should\n   never be associated with the same (strong)
    entity tag.\n   We also define this term:\n   instance manipulation\n                     An
    operation on one or more instances which may\n                     result in an
    instance being conveyed from server to\n                     client in parts,
    or in more than one response\n                     message.  For example, a range
    selection or a delta\n                     encoding.  Instance manipulations are
    end-to-end,\n                     and often involve the use of a cache at the
    client.\n"
  title: 3 Terminology
- contents:
  - "4 Specification\n   In this specification, the key words \"MUST\", \"MUST NOT\",
    \"SHOULD\",\n   \"SHOULD NOT\", and \"MAY\" are to be interpreted as described
    in RFC\n   2119 [2].\n"
  - contents:
    - '4.1 Protocol parameter specifications

      '
    - contents:
      - "4.1.1 Digest algorithms\n   Digest algorithm values are used to indicate
        a specific digest\n   computation.  For some algorithms, one or more parameters
        may be\n   supplied.\n      digest-algorithm = token\n   The BNF for \"parameter\"
        is as is used in RFC 2616 [4].  All digest-\n   algorithm values are case-insensitive.\n
        \  The Internet Assigned Numbers Authority (IANA) acts as a registry for\n
        \  digest-algorithm values.  Initially, the registry contains the\n   following
        tokens:\n   MD5               The MD5 algorithm, as specified in RFC 1321
        [15].\n                     The output of this algorithm is encoded using
        the\n                     base64 encoding [1].\n   SHA               The SHA-1
        algorithm [12].  The output of this\n                     algorithm is encoded
        using the base64 encoding [1].\n   UNIXsum           The algorithm computed
        by the UNIX \"sum\" command,\n                     as defined by the Single
        UNIX Specification,\n                     Version 2 [13].  The output of this
        algorithm is an\n                     ASCII decimal-digit string representing
        the 16-bit\n                     checksum, which is the first word of the
        output of\n                     the UNIX \"sum\" command.\n   UNIXcksum         The
        algorithm computed by the UNIX \"cksum\" command,\n                     as
        defined by the Single UNIX Specification,\n                     Version 2
        [13].  The output of this algorithm is an\n                     ASCII digit
        string representing the 32-bit CRC,\n                     which is the first
        word of the output of the UNIX\n                     \"cksum\" command.\n
        \  If other digest-algorithm values are defined, the associated encoding\n
        \  MUST either be represented as a quoted string, or MUST NOT include\n   \";\"
        or \",\" in the character sets used for the encoding.\n"
      title: 4.1.1 Digest algorithms
    title: 4.1 Protocol parameter specifications
  - contents:
    - "4.2 Instance digests\n   An instance digest is the representation of the output
      of a digest\n   algorithm, together with an indication of the algorithm used
      (and any\n   parameters).\n       instance-digest = digest-algorithm \"=\"\n
      \                              <encoded digest output>\n   The digest is computed
      on the entire instance associated with the\n   message.  The instance is a snapshot
      of the resource prior to the\n   application of of any instance manipulation
      or transfer-coding (see\n   section 3).  The byte order used to compute the
      digest is the\n   transmission byte order defined for the content-type of the
      instance.\n      Note: the digest is computed before the application of any\n
      \     instance manipulation.  If a range or a delta-coding [9] is used,\n      the
      computation of the digest after the computation of the range\n      or delta
      would not provide a digest useful for checking the\n      integrity of the reassembled
      instance.\n   The encoded digest output uses the encoding format defined for
      the\n   specific digest-algorithm.  For example, if the digest-algorithm is\n
      \  \"MD5\", the encoding is base64; if the digest-algorithm is \"UNIXsum\",\n
      \  the encoding is an ASCII string of decimal digits.\n   Examples:\n      MD5=HUXZLQLMuI/KZ5KDcJPcOA==\n
      \     sha=thvDyvhfIqlvFe+A9MYgxAfm1q5=\n      UNIXsum=30637\n"
    title: 4.2 Instance digests
  - contents:
    - "4.3 Header specifications\n   The following headers are defined.\n"
    - contents:
      - "4.3.1 Want-Digest\n   The Want-Digest message header field indicates the
        sender's desire to\n   receive an instance digest on messages associated with
        the Request-\n   URI.\n       Want-Digest = \"Want-Digest\" \":\"\n                        #(digest-algorithm
        [ \";\" \"q\" \"=\" qvalue])\n   If a digest-algorithm is not accompanied
        by a qvalue, it is treated\n   as if its associated qvalue were 1.0.\n   The
        sender is willing to accept a digest-algorithm if and only if it\n   is listed
        in a Want-Digest header field of a message, and its qvalue\n   is non-zero.\n
        \  If multiple acceptable digest-algorithm values are given, the\n   sender's
        preferred digest-algorithm is the one (or ones) with the\n   highest qvalue.\n
        \  Examples:\n      Want-Digest: md5\n      Want-Digest: MD5;q=0.3, sha;q=1\n"
      title: 4.3.1 Want-Digest
    - contents:
      - "4.3.2 Digest\n   The Digest message header field provides a message digest
        of the\n   instance described by the message.\n      Digest = \"Digest\" \":\"
        #(instance-digest)\n   The instance described by a message might be fully
        contained in the\n   message-body, partially-contained in the message-body,
        or not at all\n   contained in the message-body.  The instance is specified
        by the\n   Request-URI and any cache-validator contained in the message.\n
        \  A Digest header field MAY contain multiple instance-digest values.\n   This
        could be useful for responses expected to reside in caches\n   shared by users
        with different browsers, for example.\n   A recipient MAY ignore any or all
        of the instance-digests in a Digest\n   header field.\n   A sender MAY send
        an instance-digest using a digest-algorithm without\n   knowing whether the
        recipient supports the digest-algorithm, or even\n   knowing that the recipient
        will ignore it.\n   Examples:\n      Digest: md5=HUXZLQLMuI/KZ5KDcJPcOA==\n
        \     Digest: SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=,unixsum=30637\n"
      title: 4.3.2 Digest
    title: 4.3 Header specifications
  title: 4 Specification
- contents:
  - "5 Negotiation of Content-MD5\n   HTTP/1.1 provides a Content-MD5 header field,
    but does not provide\n   any mechanism for requesting its use (or non-use).  The
    Want-Digest\n   header field defined in this document provides the basis for such
    a\n   mechanism.\n   First, we add to the set of digest-algorithm values (in section\n
    \  4.1.1) the token \"contentMD5\", with the provision that this digest-\n   algorithm
    MUST NOT be used in a Digest header field.\n   The presence of the \"contentMD5\"
    digest-algorithm with a non-zero\n   qvalue in a Want-Digest header field indicates
    that the sender wishes\n   to receive a Content-MD5 header on messages associated
    with the\n   Request-URI.\n   The presence of the \"contentMD5\" digest-algorithm
    with a zero qvalue\n   in a Want-Digest header field indicates that the sender
    will ignore\n   Content-MD5 headers on messages associated with the Request-URI.\n"
  title: 5 Negotiation of Content-MD5
- contents:
  - "6 IANA Considerations\n   The Internet Assigned Numbers Authority (IANA) administers
    the name\n   space for digest-algorithm values.  Values and their meaning must
    be\n   documented in an RFC or other peer-reviewed, permanent, and readily\n   available
    reference, in sufficient detail so that interoperability\n   between independent
    implementations is possible.  Subject to these\n   constraints, name assignments
    are First Come, First Served (see RFC\n   2434 [11]).\n"
  title: 6 IANA Considerations
- contents:
  - "7 Security Considerations\n   This document specifies a data integrity mechanism
    that protects HTTP\n   instance data, but not HTTP entity headers, from certain
    kinds of\n   accidental corruption.  It is also useful in detecting at least one\n
    \  spoofing attack [9].  However, it is not intended as general\n   protection
    against malicious tampering with HTTP messages.\n   The HTTP Digest Access Authentication
    mechanism [5] provides some\n   protection against malicious tampering.\n"
  title: 7 Security Considerations
- contents:
  - "8 Acknowledgements\n   It is not clear who first realized that the Content-MD5
    header field\n   is not sufficient to provide data integrity when ranges or deltas
    are\n   used.\n   Laurent Demailly may have been the first to suggest an algorithm-\n
    \  independent checksum header for HTTP [3].  Dave Raggett suggested the\n   use
    of the term \"digest\" instead of \"checksum\" [14].\n"
  title: 8 Acknowledgements
- contents:
  - "9 References\n   [1]  Freed, N. and N. Borenstein, N., \"MIME (Multipurpose Internet\n
    \       Mail Extensions) Part One:  Mechanisms for Specifying and\n        Describing
    the Format of Internet Message Bodies\", RFC 2049,\n        November 1996.\n   [2]
    \ Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
    BCP 14, RFC 2119, March 1997.\n   [3]  Laurent Demailly.  Re: Revised Charter.\n
    \       http://www.ics.uci.edu/pub/ietf/http/hypermail/1995q4/0165.html.\n   [4]
    \ Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n        Leach,
    P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n        HTTP/1.1.\",
    RFC 2616, June 1999.\n   [5]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence,
    S.,\n        Leach, P., Luotonen, A. and L. Stewart, \"HTTP Authentication:\n
    \       Basic and Digest Access Authentication\", RFC 2617, June 1999.\n   [6]
    \ Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
    (MIME) Part One: Format of Internet Message Bodies\",\n        RFC 2045, November
    1996.\n   [7]  Nevin Heintze.  Scalable Document Fingerprinting.  Proc. Second\n
    \       USENIX Workshop on Electronic Commerce, USENIX, Oakland, CA,\n        November,
    1996, pp. 191-200.\n        http://www.cs.cmu.edu/afs/cs/user/nch/www/koala/main.html.\n
    \  [8]  Merriam-Webster.  Webster's Seventh New Collegiate Dictionary.\n        G.
    & C. Merriam Co., Springfield, MA, 1963.\n   [9]  Mogul, J., Krishnamurthy, B.,
    Douglis, F., Feldmann, A., Goland,\n        Y. and A. van Hoff, \"Delta encoding
    in HTTP\", RFC 3229, December\n        2001.\n   [10] Myers, J. and M. Rose, \"The
    Content-MD5 Header Field\", RFC 1864,\n        October 1995.\n   [11] Narten,
    T. and H. Alvestrand, \"Guidelines for Writing an IANA\n        Considerations
    Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [12] National Institute
    of Standards and Technology.  Secure Hash\n        Standard.  FEDERAL INFORMATION
    PROCESSING STANDARDS PUBLICATION\n        180-1, U.S. Department of Commerce,
    April, 1995.\n        http://csrc.nist.gov/fips/fip180-1.txt.\n   [13] The Open
    Group.  The Single UNIX Specification, Version 2 - 6\n        Vol Set for UNIX
    98.  Document number T912, The Open Group,\n        February, 1997.\n   [14] Dave
    Raggett.  Re: Revised Charter.\n        http://www.ics.uci.edu/pub/ietf/http/hypermail/1995q4/0182.html.\n
    \  [15] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, April\n        1992.\n"
  title: 9 References
- contents:
  - "10 Authors' Addresses\n   Jeffrey C. Mogul\n   Western Research Laboratory\n
    \  Compaq Computer Corporation\n   250 University Avenue\n   Palo Alto, California,
    94305, U.S.A.\n   EMail: JeffMogul@acm.org\n   Phone: 1 650 617 3304 (email preferred)\n
    \  Arthur van Hoff\n   Marimba, Inc.\n   440 Clyde Avenue\n   Mountain View, CA
    94043\n   EMail: avh@marimba.com\n   Phone: 1 (650) 930 5283\n"
  title: 10 Authors' Addresses
- contents:
  - "11 Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 11 Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
