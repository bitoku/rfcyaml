Abstract The Simple Authentication and Security Layer (SASL) is a framework for adding authentication support to connection based protocols.
This document describes the method for using the Generic Security Service Application Program Interface (GSS API) Kerberos V5 in the SASL.
This document replaces Section 7.2 of RFC 2222, the definition of the "GSSAPI" SASL mechanism.
This document, together with RFC 4422, obsoletes RFC 2222.
This specification documents currently deployed Simple Authentication and Security Layer (SASL [SASL]) mechanism supporting the Kerberos V5 [KERBEROS] Generic Security Service Application Program Interface ([GSS API])
The authentication sequence is described in Section 3.
Note that the described authentication sequence has known limitations
, in particular, it lacks channel bindings and the number of round trips required to complete authentication exchange is not minimal.
SASL WG is working on a separate document that should address these limitations.
This document, together with RFC 4422, obsoletes RFC 2222 in its entirety.
This document replaces Section 7.2 of RFC 2222.
The remainder is obsoleted as detailed in Section 1.2 of RFC 4422.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY" in this document are to be interpreted as defined in "Key words for use in RFCs to Indicate Requirement Levels" [KEYWORDS].
Kerberos V5 GSS API Mechanism
The SASL mechanism name for the Kerberos V5 GSS API mechanism [RFC4121] is "GSSAPI".
Though known as the SASL GSSAPI mechanism, the mechanism is specifically tied to Kerberos V5 and GSS API's Kerberos V5 mechanism.
The GSSAPI SASL mechanism is a "client goes first" SASL mechanism; i.e., it starts with the client sending a "response" created as described in the following section.
The implementation MAY set any GSS API flags or arguments not mentioned in this specification as is necessary for the implementation to enforce its security policy.
Note that major status codes returned by GSS Init sec context() or GSS Accept sec context() other than GSS S COMPLETE or GSS S
CONTINUE NEEDED cause authentication failure.
Major status codes returned by GSS Unwrap() other than GSS S COMPLETE (without any additional supplementary status codes) cause authentication and/or security layer failure.
Client Side of Authentication Protocol Exchange
If the client will be requesting a security layer, it MUST also supply to the GSS Init sec context a mutual req flag of TRUE, and a sequence req flag of TRUE.
If the client will be requesting a security layer providing confidentiality protection, it MUST also supply to the GSS Init sec context a conf req flag of TRUE.
The client then responds with the resulting output token.
If GSS Init sec context returns GSS S CONTINUE NEEDED
, then the client should expect the server to issue a token in a subsequent challenge.
The client must pass the token to another call to GSS Init sec context, repeating the actions in this paragraph.
Clients MAY use name types other than GSS C NT HOSTBASED SERVICE to import servers' acceptor names, but only when they have a priori knowledge that the servers support alternate name types.
Otherwise clients MUST use GSS C NT HOSTBASED SERVICE for importing acceptor names.
No implementations of RFC 1964
[RFC4121] that require integ req flag to be true are believed to exist and it is expected that any future update to [RFC4121] will require that integrity be available even in not explicitly requested by the application.
When GSS Init sec context returns GSS S COMPLETE, the client examines the context to ensure that it provides a level of protection permitted by the client's security policy.
In particular, if the integ avail flag is not set in the context, then no security layer can be offered or accepted.
If the conf avail flag is not set in the context, then no security layer with confidentiality can be offered or accepted.
If the context is acceptable, the client takes the following actions: If the last call to GSS Init sec context returned an output token, then the client responds with the output token, otherwise the client responds with no data.
The client should then expect the server to issue a token in a subsequent challenge.
The client passes this token to GSS Unwrap and interprets the first octet of resulting cleartext as a bit mask specifying the security layers supported by the server and the second through fourth octets as the maximum size output message the server is able to receive (in network byte order).
If the resulting cleartext is not 4 octets long, the client fails the negotiation.
The client verifies that the server maximum buffer is 0 if the server does not advertise support for any security layer.
The client then constructs data, with the first octet containing the bit mask specifying the selected security layer, the second through fourth octets containing in network byte order the maximum size output message the client is able to receive (which MUST be 0 if the client does not support any security layer), and the remaining octets containing the UTF 8 [UTF8] encoded authorization identity.
(Implementation note: The authorization identity is not terminated with the zero valued (%x00) octet (e.g., the UTF 8 encoding of the NUL (U 0000) character)).
The client passes the data to GSS Wrap with conf flag set to FALSE and responds with the generated output message.
The client can then consider the server authenticated.
Server Side of Authentication Protocol Exchange
A server MUST NOT advertise support for the "GSSAPI" SASL mechanism described in this document unless it has acceptor credential for the Kerberos V GSS API mechanism [KRB5GSS].
The server passes the initial client response to GSS Accept sec context as input token, setting input context handle to 0 (initially), chan binding of NULL, and a suitable acceptor cred handle (see below).
If GSS Accept sec context returns GSS S CONTINUE NEEDED, the server returns the generated output token to the client in challenge and passes the resulting response to another call to GSS Accept sec context, repeating the actions in this paragraph.
Servers SHOULD use a credential obtained by calling GSS Acquire cred or GSS Add cred for the GSS C
NO NAME desired name and the Object Identifier (OID) of the Kerberos V5 GSS API mechanism [KRB5GSS]
Servers MAY use GSS C NO CREDENTIAL as an acceptor credential handle.
( ) Unlike GSS Add cred the GSS Acquire cred uses an OID set of GSS  API mechanism as an input parameter.
The OID set can be created by using GSS Create empty OID set and GSS Add OID set member.
It can be freed by calling the GSS Release oid set.
Use of server's principal names having GSS C NT HOSTBASED SERVICE name type and "service@hostname" format, where "service" is the service name specified in the protocol's profile, and "hostname" is the fully qualified host name of the server, is RECOMMENDED.
The server name is generated by calling GSS Import name with input name type of GSS C NT HOSTBASED SERVICE and input name string of "service@hostname".
Upon successful establishment of the security context (i.e., GSS Accept sec context returns GSS S COMPLETE), the server SHOULD verify that the negotiated GSS API mechanism is indeed Kerberos V5 [KRB5GSS].
This is done by examining the value of the mech type parameter returned from the GSS Accept sec context call.
If the value differs, SASL authentication MUST be aborted.
Upon successful establishment of the security context and if the server used GSS C NO
NAME/GSS C NO CREDENTIAL to create acceptor credential handle
, the server SHOULD also check using the GSS Inquire context that the target name used by the client matches either  the GSS C NT HOSTBASED SERVICE "service@hostname" name syntax, where "service" is the service name specified in the application protocol's profile, or  the GSS KRB5 NT PRINCIPAL NAME [KRB5GSS] name syntax for a two  component principal where the first component matches the service name specified in the application protocol's profile.
When GSS Accept sec context returns GSS S COMPLETE, the server examines the context to ensure that it provides a level of protection permitted by the server's security policy.
In particular, if the integ avail flag is not set in the context, then no security layer can be offered or accepted.
If the conf avail flag is not set in the context, then no security layer with confidentiality can be offered or accepted.
If the context is acceptable, the server takes the following actions: If the last call to GSS Accept sec context returned an output token, the server returns it to the client in a challenge and expects a reply from the client with no data.
Whether or not an output token was returned (and after receipt of any response from the client to such an output token), the server then constructs 4 octets of data, with the first octet containing a bit mask specifying the security layers supported by the server and the second through fourth octets containing in network byte order the maximum size output token the server is able to receive (which MUST be 0 if the server does not support any security layer).
The server must then pass the plaintext to GSS Wrap with conf flag set to FALSE and issue the generated output message to the client in a challenge.
The server must then pass the resulting response to GSS Unwrap and interpret the first octet of resulting cleartext as the bit mask for the selected security layer, the second through fourth octets as the maximum size output message the client is able to receive (in network byte order), and the remaining octets as the authorization identity.
The server verifies that the client has selected a security layer that was offered and that the client maximum buffer is 0 if no security layer was chosen.
The server must verify that the src name is authorized to act as the authorization identity.
After these verifications, the authentication process is complete.
The server is not expected to return any additional data with the success indicator.
The security layers and their corresponding bit masks are as follows: 1
No security layer 2 Integrity protection.
Sender calls GSS Wrap with conf flag set to FALSE 4 Confidentiality protection.
Sender calls GSS Wrap with conf flag set to TRUE Other bit masks may be defined in the future; bits that are not understood must be negotiated off.
When decoding any received data with GSS Unwrap, the major status other than the GSS S COMPLETE MUST be treated as a fatal error.
Note that SASL negotiates the maximum size of the output message to send.
Implementations can use the GSS Wrap size limit call to determine the corresponding maximum size input message.
IANA Considerations IANA modified the existing registration for "GSSAPI" as follows:
Family of SASL mechanisms:  NO SASL mechanism name:  GSSAPI Security considerations:
See Section 5 of RFC 4752 Published specification:  RFC 4752 Person & email address to contact for further information:
Intended usage:  COMMON Owner/Change controller:
This mechanism is for the Kerberos V5 mechanism of GSS API.
Security Considerations Security issues are discussed throughout this memo.
When constructing the input name string, the client SHOULD NOT canonicalize the server's fully qualified domain name using an insecure or untrusted directory service.
For compatibility with deployed software, this document requires that the chan binding (channel bindings) parameter to GSS Init sec context and GSS Accept sec context be NULL, hence disallowing use of GSS API support for channel bindings.
GSS API channel bindings in SASL is expected to be supported via a new GSS API family of SASL mechanisms (to be introduced in a future document).
Additional security considerations are in the [SASL] and [GSS API] specifications.
Additional security considerations for the GSS API mechanism can be found in [KRB5GSS] and [KERBEROS].
Changes since RFC 2222 RFC 2078
[RFC2078] specifies the version of GSS API used by RFC 2222 [RFC2222], which provided the original version of this specification.
That version of GSS API did not provide the integ integ avail flag as an input to GSS Init sec context.
Instead, integrity was always requested.
RFC 4422 [SASL] requires that when possible, the security layer negotiation be integrity protected.
To meet this requirement and as part of moving from RFC 2078 [RFC2078] to RFC 2743 [GSS API], this specification requires that clients request integrity from GSS Init sec context so they can use GSS Wrap to protect the security layer negotiation.
This specification does not require that the mechanism offer the integrity security layer, simply that the security layer negotiation be wrapped.
Editor's Address Alexey Melnikov Isode Limited 5 Castle Business Village 36 Station Road Hampton, Middlesex  TW12 2BX UK
