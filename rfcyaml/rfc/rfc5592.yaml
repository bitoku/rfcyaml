- contents:
  - "                  Secure Shell Transport Model for the\n               Simple
    Network Management Protocol (SNMP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes a Transport Model for the Simple Network\n   Management
    Protocol (SNMP), using the Secure Shell (SSH) protocol.\n   This memo also defines
    a portion of the Management Information Base\n   (MIB) for use with network management
    protocols in TCP/IP-based\n   internets.  In particular, it defines objects for
    monitoring and\n   managing the Secure Shell Transport Model for SNMP.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. The Internet-Standard Management Framework .................3\n      1.2.
    Conventions ................................................3\n      1.3. Modularity
    .................................................5\n      1.4. Motivation .................................................5\n
    \     1.5. Constraints ................................................6\n   2.
    The Secure Shell Protocol .......................................7\n   3. How
    SSHTM Fits into the Transport Subsystem .....................8\n      3.1. Security
    Capabilities of this Model ........................8\n           3.1.1. Threats
    .............................................8\n           3.1.2. Message Authentication
    ..............................9\n           3.1.3. Authentication Protocol Support
    ....................10\n           3.1.4. SSH Subsystem ......................................11\n
    \     3.2. Security Parameter Passing ................................12\n      3.3.
    Notifications and Proxy ...................................12\n   4. Cached Information
    and References ..............................13\n      4.1. Secure Shell Transport
    Model Cached Information ...........13\n           4.1.1. tmSecurityName .....................................13\n
    \          4.1.2. tmSessionID ........................................14\n           4.1.3.
    Session State ......................................14\n   5. Elements of Procedure
    ..........................................14\n      5.1. Procedures for an Incoming
    Message ........................15\n      5.2. Procedures for Sending an Outgoing
    Message ................17\n      5.3. Establishing a Session ....................................18\n
    \     5.4. Closing a Session .........................................20\n   6.
    MIB Module Overview ............................................21\n      6.1.
    Structure of the MIB Module ...............................21\n      6.2. Textual
    Conventions .......................................21\n      6.3. Relationship
    to Other MIB Modules .........................21\n           6.3.1. MIB Modules
    Required for IMPORTS ...................21\n   7. MIB Module Definition ..........................................22\n
    \  8. Operational Considerations .....................................29\n   9.
    Security Considerations ........................................30\n      9.1.
    Skipping Public Key Verification ..........................31\n      9.2. Notification
    Authorization Considerations .................31\n      9.3. SSH User and Key
    Selection ................................31\n      9.4. Conceptual Differences
    between USM and SSHTM ..............31\n      9.5. The 'none' MAC Algorithm ..................................32\n
    \     9.6. Use with SNMPv1/v2c Messages ..............................32\n      9.7.
    MIB Module Security .......................................32\n   10. IANA Considerations
    ...........................................33\n   11. Acknowledgments ...............................................33\n
    \  12. References ....................................................34\n      12.1.
    Normative References .....................................34\n      12.2. Informative
    References ...................................35\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo describes a Transport Model for the Simple Network\n
    \  Management Protocol, using the Secure Shell (SSH) protocol [RFC4251]\n   within
    a Transport Subsystem [RFC5590].  The Transport Model\n   specified in this memo
    is referred to as the Secure Shell Transport\n   Model (SSHTM).\n   This memo
    also defines a portion of the Management Information Base\n   (MIB) for use with
    network management protocols in TCP/IP-based\n   internets.  In particular, it
    defines objects for monitoring and\n   managing the Secure Shell Transport Model
    for SNMP.\n   It is important to understand the SNMP architecture [RFC3411] and
    the\n   terminology of the architecture to understand where the Transport\n   Model
    described in this memo fits into the architecture and interacts\n   with other
    subsystems within the architecture.\n"
  - contents:
    - "1.1.  The Internet-Standard Management Framework\n   For a detailed overview
      of the documents that describe the current\n   Internet-Standard Management
      Framework, please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed
      objects are accessed via a virtual information store, termed\n   the Management
      Information Base or MIB.  MIB objects are generally\n   accessed through the
      Simple Network Management Protocol (SNMP).\n   Objects in the MIB are defined
      using the mechanisms defined in the\n   Structure of Management Information
      (SMI).  This memo specifies a MIB\n   module that is compliant to the SMIv2,
      which is described in STD 58,\n   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579]
      and STD 58, RFC 2580\n   [RFC2580].\n"
    title: 1.1.  The Internet-Standard Management Framework
  - contents:
    - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  Lowercase versions of the keywords should be read as in normal\n   English.
      \ They will usually, but not always, be used in a context\n   that relates to
      compatibility with the RFC 3411 architecture or the\n   subsystem defined here
      but that might have no impact on on-the-wire\n   compatibility.  These terms
      are used as guidance for designers of\n   proposed IETF models to make the designs
      compatible with RFC 3411\n   subsystems and Abstract Service Interfaces (ASIs).
      \ Implementers are\n   free to implement differently.  Some usages of these
      lowercase terms\n   are simply normal English usage.\n   For consistency with
      SNMP-related specifications, this document\n   favors terminology as defined
      in STD 62, rather than favoring\n   terminology that is consistent with non-SNMP
      specifications.  This is\n   consistent with the IESG decision to not require
      the SNMPv3\n   terminology be modified to match the usage of other non-SNMP\n
      \  specifications when SNMPv3 was advanced to Full Standard.\n   \"Authentication\"
      in this document typically refers to the English\n   meaning of \"serving to
      prove the authenticity of\" the message, not\n   data source authentication
      or peer identity authentication.\n   The terms \"manager\" and \"agent\" are
      not used in this document\n   because, in the RFC 3411 architecture, all SNMP
      entities have the\n   capability of acting as manager, agent, or both depending
      on the SNMP\n   application types supported in the implementation.  Where distinction\n
      \  is required, the application names of command generator, command\n   responder,
      notification originator, notification receiver, and proxy\n   forwarder are
      used.  See \"SNMP Applications\" [RFC3413] for further\n   information.\n   The
      User-based Security Model (USM) [RFC3414] is a mandatory-to-\n   implement Security
      Model in STD 62.  While the SSH and USM\n   specifications frequently refer
      to a user, the terminology preferred\n   in [RFC3411] and in this memo is \"principal\".
      \ A principal is the\n   \"who\" on whose behalf services are provided or processing
      takes\n   place.  A principal can be, among other things, an individual acting\n
      \  in a particular role, a set of individuals each acting in a\n   particular
      role, an application or a set of applications, or a\n   combination of these
      within an administrative domain.\n   Throughout this document, the terms \"client\"
      and \"server\" are used to\n   refer to the two ends of the SSH transport connection.
      \ The client\n   actively opens the SSH connection, and the server passively
      listens\n   for the incoming SSH connection.  Either SNMP entity may act as\n
      \  client or as server, as discussed further below.\n"
    title: 1.2.  Conventions
  - contents:
    - "1.3.  Modularity\n   The reader is expected to have read and understood the
      description of\n   the SNMP architecture, as defined in [RFC3411], and the Transport\n
      \  Subsystem architecture extension specified in \"Transport Subsystem\n   for
      the Simple Network Management Protocol (SNMP)\" [RFC5590].\n   This memo describes
      the Secure Shell Transport Model for SNMP, a\n   specific SNMP Transport Model
      to be used within the SNMP Transport\n   Subsystem to provide authentication,
      encryption, and integrity\n   checking of SNMP messages.\n   In keeping with
      the RFC 3411 design decision to use self-contained\n   documents, this document
      defines the elements of procedure and\n   associated MIB module objects that
      are needed for processing the\n   Secure Shell Transport Model for SNMP.\n   This
      modularity of specification is not meant to be interpreted as\n   imposing any
      specific requirements on implementation.\n"
    title: 1.3.  Modularity
  - contents:
    - "1.4.  Motivation\n   Version 3 of the Simple Network Management Protocol (SNMPv3)
      added\n   security to the protocol.  The User-based Security Model (USM)\n   [RFC3414]
      was designed to be independent of other existing security\n   infrastructures
      to ensure it could function when third-party\n   authentication services were
      not available, such as in a broken\n   network.  As a result, USM utilizes a
      separate user and key-\n   management infrastructure.  Operators have reported
      that having to\n   deploy another user and key-management infrastructure in
      order to use\n   SNMPv3 is a reason for not deploying SNMPv3.\n   This memo
      describes a Transport Model that will make use of the\n   existing and commonly
      deployed Secure Shell security infrastructure.\n   This Transport Model is designed
      to meet the security and operational\n   needs of network administrators, maximize
      usability in operational\n   environments to achieve high deployment success,
      and at the same time\n   minimize implementation and deployment costs to minimize
      deployment\n   time.\n   This document addresses the requirement for the SSH
      client to\n   authenticate the SSH server and for the SSH server to authenticate\n
      \  the SSH client, and describes how SNMP can make use of the\n   authenticated
      identities in authorization policies for data access,\n   in a manner that is
      independent of any specific Access Control Model.\n   This document addresses
      the requirement to utilize client-\n   authentication and key-exchange methods
      that support different\n   security infrastructures and provide different security
      properties.\n   This document describes how to use client authentication as
      described\n   in \"The Secure Shell (SSH) Authentication Protocol\" [RFC4252].
      \ The\n   SSH Transport Model should work with any of the ssh-userauth methods,\n
      \  including the \"publickey\", \"password\", \"hostbased\", \"none\",\n   \"keyboard-interactive\",
      \"gssapi-with-mic\", .\"gssapi-keyex\", \"gssapi\",\n   and \"external-keyx\"
      (see the SSH Protocol Parameters registry\n   maintained by IANA).  The use
      of the \"none\" authentication method is\n   NOT RECOMMENDED, as described in
      this document's Security\n   Considerations.  Local accounts may be supported
      through the use of\n   the publickey, hostbased, or password methods.  The password
      method\n   allows for integration with a deployed password infrastructure, such\n
      \  as Authentication, Authorization, and Accounting (AAA) servers using\n   the
      RADIUS protocol [RFC2865].  The SSH Transport Model SHOULD be\n   able to take
      advantage of future-defined ssh-userauth methods, such\n   as those that might
      make use of X.509 certificate credentials.\n   It is desirable to use mechanisms
      that could unify the approach for\n   administrative security for SNMPv3 and
      command line interfaces (CLI)\n   and other management interfaces.  The use
      of security services\n   provided by Secure Shell is the approach commonly used
      for the CLI\n   and is the approach being adopted for use with NETCONF [RFC4742].\n
      \  This memo describes a method for invoking and running the SNMP\n   protocol
      within a Secure Shell (SSH) session as an SSH Subsystem.\n   This memo describes
      how SNMP can be used within a Secure Shell (SSH)\n   session, using the SSH
      connection protocol [RFC4254] over the SSH\n   transport protocol, and using
      ssh-userauth [RFC4252] for\n   authentication.\n   There are a number of challenges
      to be addressed to map Secure Shell\n   authentication method parameters into
      the SNMP architecture so that\n   SNMP continues to work without any surprises.
      \ These are discussed in\n   detail below.\n"
    title: 1.4.  Motivation
  - contents:
    - "1.5.  Constraints\n   The design of this SNMP Transport Model is influenced
      by the\n   following constraints:\n   1.  In times of network stress, the transport
      protocol and its\n       underlying security mechanisms SHOULD NOT depend upon
      the ready\n       availability of other network services (e.g., Network Time\n
      \      Protocol (NTP) or AAA protocols).\n   2.  When the network is not under
      stress, the Transport Model and its\n       underlying security mechanisms MAY
      depend upon the ready\n       availability of other network services.\n   3.
      \ It may not be possible for the Transport Model to determine when\n       the
      network is under stress.\n   4.  A Transport Model SHOULD NOT require changes
      to the SNMP\n       architecture.\n   5.  A Transport Model SHOULD NOT require
      changes to the underlying\n       security protocol.\n"
    title: 1.5.  Constraints
  title: 1.  Introduction
- contents:
  - "2.  The Secure Shell Protocol\n   SSH is a protocol for secure remote login and
    other secure network\n   services over an insecure network.  It consists of three
    major\n   protocol components and add-on methods for user authentication:\n   o
    \ The Transport Layer Protocol [RFC4253] provides server\n      authentication
    and message confidentiality and integrity.  It may\n      optionally also provide
    compression.  The transport layer will\n      typically be run over a TCP/IP connection
    but might also be used\n      on top of any other reliable data stream.\n   o
    \ The User Authentication Protocol [RFC4252] authenticates the\n      client-side
    principal to the server.  It runs over the Transport\n      Layer Protocol.\n
    \  o  The Connection Protocol [RFC4254] multiplexes the encrypted tunnel\n      into
    several logical channels.  It runs over the transport after\n      successfully
    authenticating the principal.\n   o  Generic Message Exchange Authentication [RFC4256]
    is a general\n      purpose authentication method for the SSH protocol, suitable
    for\n      interactive authentications where the authentication data should\n
    \     be entered via a keyboard.\n   o  \"Generic Security Service Application
    Program Interface (GSS-API)\n      Authentication and Key Exchange for the Secure
    Shell (SSH)\n      Protocol\" [RFC4462] describes methods for using the GSS-API
    for\n      authentication and key exchange in SSH.  It defines an SSH user-\n
    \     authentication method that uses a specified GSS-API mechanism to\n      authenticate
    a user; it also defines a family of SSH key-exchange\n      methods that use GSS-API
    to authenticate a Diffie-Hellman key\n      exchange.\n   The client sends a service
    request once a secure, transport-layer\n   connection has been established.  A
    second service request is sent\n   after client authentication is complete.  This
    allows new protocols\n   to be defined and coexist with the protocols listed above.\n
    \  The connection protocol provides channels that can be used for a wide\n   range
    of purposes.  Standard methods are provided for setting up\n   secure interactive
    shell sessions and for forwarding (\"tunneling\")\n   arbitrary TCP/IP ports and
    X11 connections.\n"
  title: 2.  The Secure Shell Protocol
- contents:
  - "3.  How SSHTM Fits into the Transport Subsystem\n   A Transport Model is a component
    of the Transport Subsystem [RFC5590]\n   within the SNMP architecture.  The SSH
    Transport Model thus fits\n   between the underlying SSH transport layer and the
    Message Dispatcher\n   [RFC3411].\n   The SSH Transport Model will establish a
    channel between itself and\n   the SSH Transport Model of another SNMP engine.
    \ The sending\n   Transport Model passes unencrypted messages from the Dispatcher
    to\n   SSH to be encrypted, and the receiving Transport Model accepts\n   decrypted
    incoming messages from SSH and passes them to the\n   Dispatcher.\n   After an
    SSH Transport Model channel is established, then SNMP\n   messages can conceptually
    be sent through the channel from one SNMP\n   Message Dispatcher to another SNMP
    Message Dispatcher.  Multiple SNMP\n   messages MAY be passed through the same
    channel.\n   The SSH Transport Model of an SNMP engine will perform the\n   translation
    between SSH-specific security parameters and SNMP-\n   specific, model-independent
    parameters.\n"
  - contents:
    - '3.1.  Security Capabilities of this Model

      '
    - contents:
      - "3.1.1.  Threats\n   The Secure Shell Transport Model provides protection
        against the\n   threats identified by the RFC 3411 architecture [RFC3411]:\n
        \  1.  Modification of Information - SSH provides for verification that\n
        \      the contents of each message have not been modified during its\n       transmission
        through the network by digitally signing each SSH\n       packet.\n   2.  Masquerade
        - SSH provides for verification of the identity of the\n       SSH server
        and the identity of the SSH client.\n       SSH provides for verification
        of the identity of the SSH server\n       through the SSH transport protocol
        server authentication\n       [RFC4253].  This allows an operator or management
        station to\n       ensure the authenticity of the SNMP engine that provides
        MIB\n       data.\n       SSH provides a number of mechanisms for verification
        of the\n       identity of the SSH client-side principal using the Secure
        Shell\n       Authentication Protocol [RFC4252].  These include public key,\n
        \      password, and host-based mechanisms.  This allows the SNMP Access\n
        \      Control Subsystem to ensure that only authorized principals have\n
        \      access to potentially sensitive data.\n       Verification of the client's
        principal identity is important for\n       use with the SNMP Access Control
        Subsystem to ensure that only\n       authorized principals have access to
        potentially sensitive data.\n       The SSH user identity is provided to the
        Transport Model, so it\n       can be used to map to an SNMP model-independent
        securityName for\n       use with SNMP access control and notification configuration.\n
        \      (The identity may undergo various transforms before it maps to\n       the
        securityName.)\n   3.  Message Stream Modification - SSH protects against
        malicious re-\n       ordering or replaying of messages within a single SSH
        session by\n       using sequence numbers and integrity checks.  SSH protects\n
        \      against replay of messages across SSH sessions by ensuring that\n       the
        cryptographic keys used for encryption and integrity checks\n       are generated
        afresh for each session.\n   4.  Disclosure - SSH provides protection against
        the disclosure of\n       information to unauthorized recipients or eavesdroppers
        by\n       allowing for encryption of all traffic between SNMP engines.\n"
      title: 3.1.1.  Threats
    - contents:
      - "3.1.2.  Message Authentication\n   The RFC 3411 architecture recognizes three
        levels of security:\n      - without authentication and without privacy (noAuthNoPriv)\n
        \     - with authentication but without privacy (authNoPriv)\n      - with
        authentication and with privacy (authPriv)\n   The Secure Shell protocol provides
        support for encryption and data\n   integrity.  While it is technically possible
        to support no\n   authentication and no encryption in SSH, it is NOT RECOMMENDED
        by\n   [RFC4253].\n   The SSH Transport Model determines from SSH the identity
        of the\n   authenticated principal and the type and address associated with
        an\n   incoming message, and provides this information to SSH for an\n   outgoing
        message.  The SSH transport-layer algorithms used to provide\n   authentication,
        data integrity, and encryption SHOULD NOT be exposed\n   to the SSH Transport
        Model layer.  The SNMPv3 WG deliberately avoided\n   this and settled for
        an assertion by the Security Model that the\n   requirements of securityLevel
        were met.  The SSH Transport Model has\n   no mechanisms by which it can test
        whether an underlying SSH\n   connection provides auth or priv, so the SSH
        Transport Model trusts\n   that the underlying SSH connection has been properly
        configured to\n   support authPriv security characteristics.\n   An SSH Transport-Model-compliant
        implementation MUST use an SSH\n   connection that provides authentication,
        data integrity, and\n   encryption that meets the highest level of SNMP security
        (authPriv).\n   Outgoing messages specified with a securityLevel of noAuthNoPriv
        or\n   authNoPriv are actually sent by the SSH Transport Model with\n   authPriv-level
        protection.\n   The security protocols used in the Secure Shell Authentication\n
        \  Protocol [RFC4252] and the Secure Shell Transport Layer Protocol\n   [RFC4253]
        are considered acceptably secure at the time of writing.\n   However, the
        procedures allow for new authentication and privacy\n   methods to be specified
        at a future time if the need arises.\n"
      title: 3.1.2.  Message Authentication
    - contents:
      - "3.1.3.  Authentication Protocol Support\n   The SSH Transport Model should
        support any server- or client-\n   authentication mechanism supported by SSH.
        \ This includes the three\n   authentication methods described in the SSH
        Authentication Protocol\n   document [RFC4252] (publickey, password, and host-based),
        keyboard\n   interactive, and others.\n   The password-authentication mechanism
        allows for integration with\n   deployed password-based infrastructure.  It
        is possible to hand a\n   password to a service such as RADIUS [RFC2865] or
        Diameter [RFC3588]\n   for validation.  The validation could be done using
        the user name and\n   user password attributes.  It is also possible to use
        a different\n   password-validation protocol such as the Challenge Handshake\n
        \  Authentication Protocol (CHAP) [RFC1994] or digest authentication\n   [RFC5090]
        to integrate with RADIUS or Diameter.  At some point in the\n   processing,
        these mechanisms require the password to be made\n   available as cleartext
        on the device that is authenticating the\n   password, which might introduce
        threats to the authentication\n   infrastructure.\n   GSS-API key exchange
        [RFC4462] provides a framework for the addition\n   of client-authentication
        mechanisms that support different security\n   infrastructures and provide
        different security properties.\n   Additional authentication mechanisms, such
        as one that supports X.509\n   certificates, may be added to SSH in the future.\n"
      title: 3.1.3.  Authentication Protocol Support
    - contents:
      - "3.1.4.  SSH Subsystem\n   This document describes the use of an SSH Subsystem
        for SNMP to make\n   SNMP usage distinct from other usages.\n   An SSH Subsystem
        of type \"snmp\" is opened by the SSH Transport Model\n   during the elements
        of procedure for an outgoing SNMP message.  Since\n   the sender of a message
        initiates the creation of an SSH session if\n   needed, the SSH session will
        already exist for an incoming message;\n   otherwise, the incoming message
        would never reach the SSH Transport\n   Model.\n   Implementations may choose
        to instantiate SSH sessions in\n   anticipation of outgoing messages.  This
        approach might be useful to\n   ensure that an SSH session to a given target
        can be established\n   before it becomes important to send a message over
        the SSH session.\n   Of course, there is no guarantee that a pre-established
        session will\n   still be valid when needed.\n   SSH sessions are uniquely
        identified within the SSH Transport Model\n   by the combination of tmTransportAddress
        and tmSecurityName\n   associated with each session.\n   Because naming policies
        might differ between administrative domains,\n   many SSH client software
        packages support a user@hostname:port\n   addressing syntax that operators
        can use to align non-equivalent\n   account names.  The SnmpSSHAddress Textual
        Convention echos this\n   common SSH notation.\n   When this notation is used
        in an SnmpSSHAddress, the SSH connection\n   should be established with an
        SSH user name matching the \"user\"\n   portion of the notation when establishing
        a session with the remote\n   SSH server.  The user name must be encoded in
        UTF-8 (per [RFC4252]).\n   The \"user\" portion may or may not match the tmSecurityName
        parameter\n   passed from the Security Model.  If no \"user@\" portion is
        specified\n   in the SnmpSSHAddress, then the SSH connection should be established\n
        \  using the tmSecurityName as the SSH user name when establishing a\n   session
        with the remote SSH server.\n   The SnmpSSHAddress and tmSecurityName associated
        with an SSH session\n   MUST remain constant during the life of the session.
        \ Different\n   SnmpSSHAddress values (with different hostnames, \"user@\"
        prefix\n   names, and/or port numbers) will each result in individual SSH\n
        \  sessions.\n"
      title: 3.1.4.  SSH Subsystem
    title: 3.1.  Security Capabilities of this Model
  - contents:
    - "3.2.  Security Parameter Passing\n   For incoming messages, SSH-specific security
      parameters are\n   translated by the Transport Model into security parameters\n
      \  independent of the Transport and Security Models.  The Transport\n   Model
      accepts messages from the SSH Subsystem, records the transport-\n   related
      and SSH-security-related information, including the\n   authenticated identity,
      in a cache referenced by tmStateReference,\n   and passes the WholeMsg and the
      tmStateReference to the Dispatcher\n   using the receiveMessage() ASI (Abstract
      Service Interface).\n   For outgoing messages, the Transport Model takes input
      provided by\n   the Dispatcher in the sendMessage() ASI.  The SSH Transport
      Model\n   converts that information into suitable security parameters for SSH,\n
      \  establishes sessions as needed, and passes messages to the SSH\n   Subsystem
      for sending.\n"
    title: 3.2.  Security Parameter Passing
  - contents:
    - "3.3.  Notifications and Proxy\n   SSH connections may be initiated by command
      generators or by\n   notification originators.  Command generators are frequently
      operated\n   by a human, but notification originators are usually unmanned\n
      \  automated processes.  As a result, it may be necessary to provision\n   authentication
      credentials on the SNMP engine containing the\n   notification originator or
      to use a third-party key provider, such as\n   Kerberos, so the engine can successfully
      authenticate to an engine\n   containing a notification receiver.\n   The targets
      to whom notifications or proxy requests should be sent is\n   typically determined
      and configured by a network administrator.  The\n   SNMP-NOTIFICATION-MIB contains
      a list of targets to which\n   notifications should be sent.  The SNMP-TARGET-MIB
      module [RFC3413]\n   contains objects for defining these management targets,
      including\n   transport domains and addresses and security parameters, for\n
      \  applications such as notification generators and proxy forwarders.\n   For
      the SSH Transport Model, transport type and address are\n   configured in the
      snmpTargetAddrTable, and the securityName and\n   securityLevel parameters are
      configured in the snmpTargetParamsTable.\n   The default approach is for an
      administrator to statically\n   preconfigure this information to identify the
      targets authorized to\n   receive notifications or received proxied messages.
      \ Local access-\n   control processing needs to be performed by a notification
      originator\n   before notifications are actually sent, and this processing is
      done\n   using the configured securityName.  An important characteristic of\n
      \  this is that authorization is done prior to determining if the\n   connection
      can succeed.  Thus, the locally configured securityName is\n   entirely trusted
      within the notification originator.\n   The SNMP-TARGET-MIB and NOTIFICATION-MIB
      MIB modules may be\n   configured using SNMP or other implementation-dependent
      mechanisms,\n   such as CLI scripting or loading a configuration file.  It may
      be\n   necessary to provide additional implementation-specific configuration\n
      \  of SSH parameters.\n"
    title: 3.3.  Notifications and Proxy
  title: 3.  How SSHTM Fits into the Transport Subsystem
- contents:
  - "4.  Cached Information and References\n   When performing SNMP processing, there
    are two levels of state\n   information that may need to be retained: the immediate
    state linking\n   a request-response pair and a potentially longer-term state
    relating\n   to transport and security.  \"Transport Subsystem for the Simple\n
    \  Network Management Protocol\" [RFC5590] defines general requirements\n   for
    caches and references.\n   This document defines additional cache requirements
    related to the\n   Secure Shell Transport Model.\n"
  - contents:
    - "4.1.  Secure Shell Transport Model Cached Information\n   The Secure Shell
      Transport Model has specific responsibilities\n   regarding the cached information.
      \ See the Elements of Procedure in\n   Section 5 for detailed processing instructions
      on the use of the\n   tmStateReference fields by the SSH Transport Model.\n"
    - contents:
      - "4.1.1.  tmSecurityName\n   The tmSecurityName MUST be a human-readable name
        (in snmpAdminString\n   format) representing the identity that has been set
        according to the\n   procedures in Section 5.  The tmSecurityName MUST be
        constant for all\n   traffic passing through an SSHTM session.  Messages MUST
        NOT be sent\n   through an existing SSH session that was established using
        a\n   different tmSecurityName.\n   On the SSH server side of a connection:\n
        \     The tmSecurityName should be the SSH user name.  How the SSH user\n
        \     name is extracted from the SSH layer is implementation-dependent.\n
        \     The SSH protocol is not always clear on whether the user name\n      field
        must be filled in, so for some implementations, such as\n      those using
        GSSAPI authentication, it may be necessary to use a\n      mapping algorithm
        to transform an SSH identity to a tmSecurityName\n      or to transform a
        tmSecurityName to an SSH identity.\n      In other cases, the user name may
        not be verified by the server,\n      so for these implementations, it may
        be necessary to obtain the\n      user name from other credentials exchanged
        during the SSH\n      exchange.\n   On the SSH client side of a connection:\n
        \     The tmSecurityName is presented to the SSH Transport Model by the\n
        \     application (possibly because of configuration specified in the\n      SNMP-TARGET-MIB).\n
        \  The securityName MAY be derived from the tmSecurityName by a Security\n
        \  Model and MAY be used to configure notifications and access controls\n
        \  in MIB modules.  Transport Models SHOULD generate a predictable\n   tmSecurityName
        so operators will know what to use when configuring\n   MIB modules that use
        securityNames derived from tmSecurityNames.\n"
      title: 4.1.1.  tmSecurityName
    - contents:
      - "4.1.2.  tmSessionID\n   The tmSessionID MUST be recorded per message at the
        time of receipt.\n   When tmSameSecurity is set, the recorded tmSessionID
        can be used to\n   determine whether the SSH session available for sending
        a\n   corresponding outgoing message is the same SSH session as was used\n
        \  when receiving the incoming message (e.g., a response to a request).\n"
      title: 4.1.2.  tmSessionID
    - contents:
      - "4.1.3.  Session State\n   The per-session state that is referenced by tmStateReference
        may be\n   saved across multiple messages in a Local Configuration Datastore.\n
        \  Additional session/connection state information might also be stored\n
        \  in a Local Configuration Datastore.\n"
      title: 4.1.3.  Session State
    title: 4.1.  Secure Shell Transport Model Cached Information
  title: 4.  Cached Information and References
- contents:
  - "5.  Elements of Procedure\n   Abstract Service Interfaces have been defined by
    [RFC3411] and\n   further augmented by [RFC5590] to describe the conceptual data
    flows\n   between the various subsystems within an SNMP entity.  The Secure\n
    \  Shell Transport Model uses some of these conceptual data flows when\n   communicating
    between subsystems.\n   To simplify the elements of procedure, the release of
    state\n   information is not always explicitly specified.  As a general rule,\n
    \  if state information is available when a message gets discarded, the\n   message-state
    information should also be released, and if state\n   information is available
    when a session is closed, the session-state\n   information should also be released.\n
    \  An error indication in statusInformation will typically include the\n   Object
    Identifier (OID) and value for an incremented error counter.\n   This may be accompanied
    by the requested securityLevel and the\n   tmStateReference.  Per-message context
    information is not accessible\n   to Transport Models, so for the returned counter
    OID and value,\n   contextEngine would be set to the local value of snmpEngineID
    and\n   contextName to the default context for error counters.\n"
  - contents:
    - "5.1.  Procedures for an Incoming Message\n   1.  The SSH Transport Model queries
      the SSH engine, in an\n       implementation-dependent manner, to determine
      the address the\n       message originated from, the user name authenticated
      by SSH, and\n       a session identifier.\n   2.  Determine the tmTransportAddress
      to be associated with the\n       incoming message:\n       A.  If this is a
      client-side SSH session, then the\n           tmTransportAddress is set to the
      tmTransportAddress used to\n           establish the session.  It MUST exactly
      include any \"user@\"\n           prefix associated with the address provided
      to the\n           openSession() ASI.\n       B.  If this is a server-side SSH
      session and this is the first\n           message received over the session,
      then the\n           tmTransportAddress is set to the address the message\n
      \          originated from, determined in an implementation-dependent\n           way.
      \ This value MUST be constant for the entire SSH session,\n           and future
      messages received MUST result in the\n           tmTransportAddress being set
      to the same value.\n       C.  If this is a server-side SSH session and this
      is not the\n           first message received over the session, then the\n           tmTransportAddress
      is set to the previously established\n           tmTransportAddress for the
      session (the value from step B,\n           determined from a previous incoming
      message).\n   3.  Determine the tmSecurityName to be associated with the incoming\n
      \      message:\n       A.  If this is a client-side SSH session, then the tmSecurityName\n
      \          MUST be set to the tmSecurityName used to establish the\n           session.\n
      \      B.  If this is a server-side SSH session and this is the first\n           message
      received over the session, then the tmSecurityName is\n           set to the
      SSH user name.  How the SSH user name is extracted\n           from the SSH
      layer is implementation-dependent.  This value\n           MUST be constant
      for the entire SSH session, and future\n           messages received MUST result
      in the tmSecurityName being set\n           to the same value.\n       C.  If
      this is a server-side SSH session and this is not the\n           first message
      received over the session, then the\n           tmSecurityName is set to the
      previously established\n           tmSecurityName for the session (the value
      from step B,\n           determined from a previous incoming message).\n   4.
      \ Create a tmStateReference cache for subsequent reference to the\n       information.\n
      \         tmTransportDomain = snmpSSHDomain\n          tmTransportAddress =
      the derived tmTransportAddress from step\n          2.\n          tmSecurityName
      = the derived tmSecurityName from step 3.\n          tmTransportSecurityLevel
      = \"authPriv\" (authentication and\n          confidentiality MUST be used to
      comply with this Transport\n          Model.)\n          tmSessionID = an implementation-dependent
      value that can be\n          used to detect when a session has closed and been
      replaced by\n          another session.  The value in tmStateReference MUST
      uniquely\n          identify the session over which the message was received.\n
      \         This session identifier MUST NOT be reused until there are no\n          references
      to it remaining.\n   Then the Transport Model passes the message to the Dispatcher
      using\n   the following ASI:\n   statusInformation =\n   receiveMessage(\n   IN
      \  transportDomain       -- snmpSSHDomain\n   IN   transportAddress      --
      the tmTransportAddress for the message\n   IN   wholeMessage          -- the
      whole SNMP message from SSH\n   IN   wholeMessageLength    -- the length of
      the SNMP message\n   IN   tmStateReference      -- (NEW) transport info\n    )\n"
    title: 5.1.  Procedures for an Incoming Message
  - contents:
    - "5.2.  Procedures for Sending an Outgoing Message\n   The Dispatcher passes
      the information to the Transport Model using\n   the ASI defined in the Transport
      Subsystem:\n   statusInformation =\n   sendMessage(\n   IN   destTransportDomain
      \          -- transport domain to be used\n   IN   destTransportAddress          --
      transport address to be used\n   IN   outgoingMessage               -- the message
      to send\n   IN   outgoingMessageLength         -- its length\n   IN   tmStateReference
      \             -- (NEW) transport info\n   )\n   The SSH Transport Model performs
      the following tasks.\n   1.  If tmStateReference does not refer to a cache containing
      values\n       for tmTransportDomain, tmTransportAddress, tmSecurityName,\n
      \      tmRequestedSecurityLevel, and tmSameSecurity, then increment the\n       snmpSshtmSessionInvalidCaches
      counter, discard the message, and\n       return the error indication in the
      statusInformation.  Processing\n       of this message stops.\n   2.  Extract
      the tmTransportDomain, tmTransportAddress,\n       tmSecurityName, tmRequestedSecurityLevel,
      tmSameSecurity, and\n       tmSessionID from the tmStateReference.\n   3.  Identify
      an SSH session over which to send the messages:\n       A.  If tmSameSecurity
      is true and there is no existing session\n           with a matching tmSessionID,
      tmSecurityName, and\n           tmTransportAddress, then increment the\n           snmpSshtmSessionNoSessions
      counter, discard the message, and\n           return the error indication in
      the statusInformation.\n           Processing of this message stops.\n       B.
      \ If there is a session with a matching tmSessionID,\n           tmTransportAddress,
      and tmSecurityName, then select that\n           session.\n       C.  If there
      is a session that matches the tmTransportAddress and\n           tmSecurityName,
      then select that session.\n       D.  If the above steps failed to select a
      session to use, then\n           call openSession() with the tmStateReference
      as a parameter.\n           +  If openSession fails, then discard the message,
      release\n              tmStateReference, and pass the error indication returned\n
      \             by openSession back to the calling module.  Processing of\n              this
      message stops.\n           +  If openSession succeeds, then record the\n              destTransportDomain,
      destTransportAddress, tmSecurityname,\n              and tmSessionID in an implementation-dependent
      manner.\n              This will be needed when processing an incoming message.\n
      \  4.  Pass the wholeMessage to SSH for encapsulation as data in an SSH\n       message
      over the identified SSH session.  Any necessary\n       additional SSH-specific
      parameters should be provided in an\n       implementation-dependent manner.\n"
    title: 5.2.  Procedures for Sending an Outgoing Message
  - contents:
    - "5.3.  Establishing a Session\n   The Secure Shell Transport Model provides
      the following Abstract\n   Service Interface (ASI) to describe the data passed
      between the SSH\n   Transport Model and the SSH service.  It is an implementation\n
      \  decision how such data is passed.\n   statusInformation =\n   openSession(\n
      \  IN   tmStateReference       -- transport information to be used\n   OUT  tmStateReference
      \      -- transport information to be used\n   IN   maxMessageSize         --
      of the sending SNMP entity\n    )\n   The following describes the procedure
      to follow to establish a\n   session between a client and server to run SNMP
      over SSH.  This\n   process is used by any SNMP engine establishing a session
      for\n   subsequent use.\n   This will be done automatically for an SNMP application
      that\n   initiates a transaction, such as a command generator, a notification\n
      \  originator, or a proxy forwarder.\n   1.  Increment the snmpSshtmSessionOpens
      counter.\n   2.  Using tmTransportAddress, the client will establish an SSH\n
      \      transport connection using the SSH transport protocol,\n       authenticate
      the server, and exchange keys for message integrity\n       and encryption.
      \ The transportAddress associated with a session\n       MUST remain constant
      during the lifetime of the SSH session.\n       Implementations may need to
      cache the transportAddress passed to\n       the openSession API for later use
      when performing incoming\n       message processing (see Section 5.1).\n       1.
      \ To authenticate the server, the client usually stores pairs\n           (tmTransportAddress,
      server host public key) in an\n           implementation-dependent manner.\n
      \      2.  The other parameters of the transport connection are provided\n           in
      an implementation-dependent manner.\n       3.  If the attempt to establish
      a connection is unsuccessful or\n           if server-authentication fails,
      then\n           snmpSshtmSessionOpenErrors is incremented, an openSession\n
      \          error indication is returned, and openSession processing\n           stops.\n
      \  3.  The client will then invoke an SSH authentication service to\n       authenticate
      the principal, such as that described in the SSH\n       authentication protocol
      [RFC4252].\n       1.  If the tmTransportAddress field contains a user name
      followed\n           by an '@' character (US-ASCII 0x40), that user name string\n
      \          should be presented to the SSH server as the \"user name\" for\n
      \          user-authentication purposes.  If there is no user name in\n           the
      tmTransportAddress, then the tmSecurityName should be\n           used as the
      user name.\n       2.  The credentials used to authenticate the SSH principal
      are\n           determined in an implementation-dependent manner.\n       3.
      \ In an implementation-specific manner, invoke the SSH user-\n           authentication
      service using the calculated user name.\n       4.  If the user authentication
      is unsuccessful, then the\n           transport connection is closed, the\n
      \          snmpSshtmSessionUserAuthFailures counter is incremented, an\n           error
      indication is returned to the calling module, and\n           processing stops
      for this message.\n   4.  The client should invoke the \"ssh-connection\" service
      (also known\n       as the SSH connection protocol [RFC4254]), and request a
      channel\n       of type \"session\".  If unsuccessful, the transport connection
      is\n       closed, the snmpSshtmSessionNoChannels counter is incremented, an\n
      \      error indication is returned to the calling module, and\n       processing
      stops for this message.\n   5.  The client invokes \"snmp\" as an SSH Subsystem,
      as indicated in\n       the \"subsystem\" parameter.  If unsuccessful, the transport\n
      \      connection is closed, the snmpSshtmSessionNoSubsystems counter is\n       incremented,
      an error indication is returned to the calling\n       module, and processing
      stops for this message.\n       In order to allow SNMP traffic to be easily
      identified and\n       filtered by firewalls and other network devices, servers\n
      \      associated with SNMP entities using the Secure Shell Transport\n       Model
      MUST default to providing access to the \"snmp\" SSH\n       Subsystem if the
      SSH session is established using the IANA-\n       assigned TCP ports (5161
      and 5162).  Servers SHOULD be\n       configurable to allow access to the SNMP
      SSH Subsystem over other\n       ports.\n   6.  Set tmSessionID in the tmStateReference
      cache to an\n       implementation-dependent value to identify the session.\n
      \  7.  The tmSecurityName used to establish the SSH session must be the\n       only
      tmSecurityName used with the session.  Incoming messages for\n       the session
      MUST be associated with this tmSecurityName value.\n       How this is accomplished
      is implementation-dependent.\n"
    title: 5.3.  Establishing a Session
  - contents:
    - "5.4.  Closing a Session\n   The Secure Shell Transport Model provides the following
      ASI to close\n   a session:\n   statusInformation =\n   closeSession(\n   IN
      \  tmSessionID     -- session ID of session to be closed\n   )\n   The following
      describes the procedure to follow to close a session\n   between a client and
      server.  This process is followed by any SNMP\n   engine to close an SSH session.
      \ It is implementation-dependent when\n   a session should be closed.  The calling
      code should release the\n   associated tmStateReference.\n   1.  Increment the
      snmpSshtmSessionCloses counter.\n   2.  If there is no session corresponding
      to tmSessionID, then\n       closeSession processing is complete.\n   3.  Have
      SSH close the session associated with tmSessionID.\n"
    title: 5.4.  Closing a Session
  title: 5.  Elements of Procedure
- contents:
  - "6.  MIB Module Overview\n   This MIB module provides management of the Secure
    Shell Transport\n   Model.  It defines an OID to identify the SNMP-over-SSH transport\n
    \  domain, a Textual Convention for SSH Addresses, and several\n   statistics
    counters.\n"
  - contents:
    - "6.1.  Structure of the MIB Module\n   Objects in this MIB module are arranged
      into subtrees.  Each subtree\n   is organized as a set of related objects.  The
      overall structure and\n   assignment of objects to their subtrees, and the intended
      purpose of\n   each subtree, is shown below.\n"
    title: 6.1.  Structure of the MIB Module
  - contents:
    - "6.2.  Textual Conventions\n   Generic and Common Textual Conventions used in
      this document can be\n   found summarized at http://www.ops.ietf.org/mib-common-tcs.html\n"
    title: 6.2.  Textual Conventions
  - contents:
    - "6.3.  Relationship to Other MIB Modules\n   Some management objects defined
      in other MIB modules are applicable\n   to an entity implementing the SSH Transport
      Model.  In particular, it\n   is assumed that an entity implementing the SNMP-SSH-TM-MIB
      will\n   implement the SNMPv2-MIB [RFC3418] and the SNMP-FRAMEWORK-MIB\n   [RFC3411].
      \ It is expected that an entity implementing this MIB will\n   also support
      the Transport Security Model [RFC5591] and, therefore,\n   implement the SNMP-TSM-MIB.\n
      \  This MIB module is for monitoring SSH Transport Model information.\n"
    - contents:
      - "6.3.1.  MIB Modules Required for IMPORTS\n   The following MIB module imports
        items from [RFC2578], [RFC2579], and\n   [RFC2580].\n   This MIB module also
        references [RFC1033], [RFC4252], [RFC3490], and\n   [RFC3986].\n   This document
        uses TDomain Textual Conventions for the SNMP-internal\n   MIB modules defined
        here for compatibility with the RFC 3413 MIB\n   modules and the RFC 3411
        Abstract Service Interfaces.\n"
      title: 6.3.1.  MIB Modules Required for IMPORTS
    title: 6.3.  Relationship to Other MIB Modules
  title: 6.  MIB Module Overview
- contents:
  - '7.  MIB Module Definition

    '
  - 'SNMP-SSH-TM-MIB DEFINITIONS ::= BEGIN

    '
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    OBJECT-IDENTITY, mib-2, snmpDomains,\n
    \   Counter32\n      FROM SNMPv2-SMI -- RFC 2578\n    TEXTUAL-CONVENTION\n      FROM
    SNMPv2-TC -- RFC 2579\n    MODULE-COMPLIANCE, OBJECT-GROUP\n      FROM SNMPv2-CONF
    -- RFC 2580\n    ;\n"
  - "snmpSshtmMIB MODULE-IDENTITY\n    LAST-UPDATED \"200906090000Z\"\n    ORGANIZATION
    \"ISMS Working Group\"\n    CONTACT-INFO \"WG-EMail:   isms@lists.ietf.org\n                  Subscribe:
    \ isms-request@lists.ietf.org\n                  Chairs:\n                    Juergen
    Quittek\n                    NEC Europe Ltd.\n                    Network Laboratories\n
    \                   Kurfuersten-Anlage 36\n                    69115 Heidelberg\n
    \                   Germany\n                    +49 6221 90511-15\n                    quittek@netlab.nec.de\n
    \                   Juergen Schoenwaelder\n                    Jacobs University
    Bremen\n                    Campus Ring 1\n                    28725 Bremen\n
    \                   Germany\n                    +49 421 200-3587\n                    j.schoenwaelder@jacobs-university.de\n
    \                 Co-editors:\n                    David Harrington\n                    Huawei
    Technologies USA\n                    1700 Alma Drive\n                    Plano
    Texas 75075\n                    USA\n                    +1 603-436-8634\n                    ietfdbh@comcast.net\n
    \                   Joseph Salowey\n                    Cisco Systems\n                    2901
    3rd Ave\n                    Seattle, WA 98121\n                    USA\n                    jsalowey@cisco.com\n
    \                   Wes Hardaker\n                    Cobham Analytic Solutions\n
    \                   P.O. Box 382\n                    Davis, CA  95617\n                    USA\n
    \                   +1 530 792 1913\n                    ietf@hardakers.net\n
    \                \"\n    DESCRIPTION\n       \"The Secure Shell Transport Model
    MIB.\n        Copyright (c) 2009 IETF Trust and the persons\n        identified
    as authors of the code.  All rights reserved.\n        Redistribution and use
    in source and binary forms, with or\n        without modification, are permitted
    provided that the\n        following conditions are met:\n        - Redistributions
    of source code must retain the above copyright\n          notice, this list of
    conditions and the following disclaimer.\n        - Redistributions in binary
    form must reproduce the above\n          copyright notice, this list of conditions
    and the following\n          disclaimer in the documentation and/or other materials\n
    \         provided with the distribution.\n        - Neither the name of Internet
    Society, IETF or IETF Trust,\n          nor the names of specific contributors,
    may be used to endorse\n          or promote products derived from this software
    without\n          specific prior written permission.\n        THIS SOFTWARE IS
    PROVIDED BY THE COPYRIGHT HOLDERS AND\n        CONTRIBUTORS 'AS IS' AND ANY EXPRESS
    OR IMPLIED WARRANTIES,\n        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    OF\n        MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED.
    \ IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n        CONTRIBUTORS BE LIABLE FOR
    ANY DIRECT, INDIRECT, INCIDENTAL,\n        SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT\n        NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n
    \       HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n        CONTRACT,
    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n        OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n        EVEN IF ADVISED OF THE POSSIBILITY
    OF SUCH DAMAGE.\n        This version of this MIB module is part of RFC 5592;\n
    \       see the RFC itself for full legal notices.\"\n    REVISION     \"200906090000Z\"\n
    \   DESCRIPTION  \"The initial version, published in RFC 5592.\"\n    ::= { mib-2
    189 }\n"
  - '-- ---------------------------------------------------------- --

    '
  - '-- subtrees in the SNMP-SSH-TM-MIB

    '
  - '-- ---------------------------------------------------------- --

    '
  - 'snmpSshtmNotifications    OBJECT IDENTIFIER ::= { snmpSshtmMIB 0 }

    '
  - 'snmpSshtmObjects          OBJECT IDENTIFIER ::= { snmpSshtmMIB 1 }

    '
  - 'snmpSshtmConformance      OBJECT IDENTIFIER ::= { snmpSshtmMIB 2 }

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Objects

    '
  - '-- -------------------------------------------------------------

    '
  - "snmpSSHDomain OBJECT-IDENTITY\n    STATUS      current\n    DESCRIPTION\n        \"The
    SNMP-over-SSH transport domain.  The corresponding\n         transport address
    is of type SnmpSSHAddress.\n         When an SNMP entity uses the snmpSSHDomain
    Transport\n         Model, it must be capable of accepting messages up to\n         and
    including 8192 octets in size.  Implementation of\n         larger values is encouraged
    whenever possible.\n         The securityName prefix to be associated with the\n
    \        snmpSSHDomain is 'ssh'.  This prefix may be used by Security\n         Models
    or other components to identify which secure transport\n         infrastructure
    authenticated a securityName.\"\n    ::= { snmpDomains 7 }\n"
  - "SnmpSSHAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1a\"\n    STATUS      current\n
    \   DESCRIPTION\n        \"Represents either a hostname or IP address, along with
    a port\n         number and an optional user name.\n         The beginning of
    the address specification may contain a\n         user name followed by an '@'
    (US-ASCII character 0x40).  This\n         portion of the address will indicate
    the user name that should\n         be used when authenticating to an SSH server.
    \ The user name\n         must be encoded in UTF-8 (per [RFC4252]).  If missing,
    the\n         SNMP securityName should be used.  After the optional user\n         name
    field and '@' character comes the hostname or IP\n         address.\n         The
    hostname is always in US-ASCII (as per RFC1033);\n         internationalized hostnames
    are encoded in US-ASCII as\n         specified in RFC 3490.  The hostname is followed
    by a colon\n         ':' (US-ASCII character 0x3A) and a decimal port number in\n
    \        US-ASCII.  The name SHOULD be fully qualified whenever\n         possible.\n
    \        An IPv4 address must be in dotted decimal format followed\n         by
    a colon ':' (US-ASCII character 0x3A) and a decimal port\n         number in US-ASCII.\n
    \        An IPv6 address must be in colon-separated format, surrounded\n         by
    square brackets ('[', US-ASCII character 0x5B, and ']',\n         US-ASCII character
    0x5D), followed by a colon ':' (US-ASCII\n         character 0x3A) and a decimal
    port number in US-ASCII.\n         Values of this Textual Convention might not
    be directly usable\n         as transport-layer addressing information and may
    require\n         runtime resolution.  As such, applications that write them\n
    \        must be prepared for handling errors if such values are\n         not
    supported or cannot be resolved (if resolution occurs\n         at the time of
    the management operation).\n         The DESCRIPTION clause of TransportAddress
    objects that may\n         have snmpSSHAddress values must fully describe how
    (and\n         when) such names are to be resolved to IP addresses and vice\n
    \        versa.\n         This Textual Convention SHOULD NOT be used directly
    in\n         object definitions since it restricts addresses to a\n         specific
    format.  However, if it is used, it MAY be used\n         either on its own or
    in conjunction with\n         TransportAddressType or TransportDomain as a pair.\n
    \        When this Textual Convention is used as a syntax of an\n         index
    object, there may be issues with the limit of 128\n         sub-identifiers, which
    is specified in SMIv2 (STD 58).  It\n         is RECOMMENDED that all MIB documents
    using this Textual\n         Convention make explicit any limitations on index\n
    \        component lengths that management software must observe.\n         This
    may be done either by including SIZE constraints on\n         the index components
    or by specifying applicable\n         constraints in the conceptual row DESCRIPTION
    clause or\n         in the surrounding documentation.\n        \"\n    REFERENCE\n
    \     \"RFC 1033: DOMAIN ADMINISTRATORS OPERATIONS GUIDE\n       RFC 3490: Internationalizing
    Domain Names in Applications\n       RFC 3986: Uniform Resource Identifier (URI):
    Generic Syntax\n       RFC 4252: The Secure Shell (SSH) Authentication Protocol\"\n
    \   SYNTAX      OCTET STRING (SIZE (1..255))\n"
  - '-- The snmpSshtmSession Group

    '
  - 'snmpSshtmSession       OBJECT IDENTIFIER ::= { snmpSshtmObjects 1 }

    '
  - "snmpSshtmSessionOpens  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an openSession() request has been\n                 executed as an SSH client,
    whether it succeeded or\n                 failed.\n                \"\n    ::=
    { snmpSshtmSession 1 }\n"
  - "snmpSshtmSessionCloses  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    a closeSession() request has been\n                 executed as an SSH client,
    whether it succeeded or\n                 failed.\n                \"\n    ::=
    { snmpSshtmSession 2 }\n"
  - "snmpSshtmSessionOpenErrors  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an openSession() request\n                 failed to open a transport connection
    or failed to\n                 authenticate the server.\n                \"\n
    \   ::= { snmpSshtmSession 3 }\n"
  - "snmpSshtmSessionUserAuthFailures  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an openSession() request\n                 failed to open a session as an SSH
    client due to\n                 user-authentication failures.\n                \"\n
    \   ::= { snmpSshtmSession 4 }\n"
  - "snmpSshtmSessionNoChannels  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an openSession() request\n                 failed to open a session as an SSH
    client due to\n                 channel-open failures.\n                \"\n    ::=
    { snmpSshtmSession 5 }\n"
  - "snmpSshtmSessionNoSubsystems OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an openSession() request\n                 failed to open a session as an SSH
    client due to\n                 inability to connect to the requested subsystem.\n
    \               \"\n    ::= { snmpSshtmSession 6 }\n"
  - "snmpSshtmSessionNoSessions  OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of times
    an outgoing message was\n                 dropped because the same session was
    no longer\n                 available.\n                \"\n    ::= { snmpSshtmSession
    7 }\n"
  - "snmpSshtmSessionInvalidCaches OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS
    \  read-only\n    STATUS       current\n    DESCRIPTION \"The number of outgoing
    messages dropped because the\n                 tmStateReference referred to an
    invalid cache.\n                \"\n    ::= { snmpSshtmSession 8 }\n"
  - '-- ************************************************

    '
  - '-- snmpSshtmMIB - Conformance Information

    '
  - '-- ************************************************

    '
  - 'snmpSshtmCompliances OBJECT IDENTIFIER ::= { snmpSshtmConformance 1 }

    '
  - 'snmpSshtmGroups      OBJECT IDENTIFIER ::= { snmpSshtmConformance 2 }

    '
  - '-- ************************************************

    '
  - '-- Compliance statements

    '
  - '-- ************************************************

    '
  - "snmpSshtmCompliance MODULE-COMPLIANCE\n    STATUS      current\n    DESCRIPTION
    \"The compliance statement for SNMP engines that\n                 support the
    SNMP-SSH-TM-MIB.\"\n    MODULE\n        MANDATORY-GROUPS { snmpSshtmGroup }\n
    \   ::= { snmpSshtmCompliances 1 }\n"
  - '-- ************************************************

    '
  - '-- Units of conformance

    '
  - '-- ************************************************

    '
  - "snmpSshtmGroup OBJECT-GROUP\n    OBJECTS {\n      snmpSshtmSessionOpens,\n      snmpSshtmSessionCloses,\n
    \     snmpSshtmSessionOpenErrors,\n      snmpSshtmSessionUserAuthFailures,\n      snmpSshtmSessionNoChannels,\n
    \     snmpSshtmSessionNoSubsystems,\n      snmpSshtmSessionNoSessions,\n      snmpSshtmSessionInvalidCaches\n
    \   }\n    STATUS      current\n    DESCRIPTION \"A collection of objects for
    maintaining information\n                 of an SNMP engine that implements the
    SNMP Secure\n                 Shell Transport Model.\n                \"\n    ::=
    { snmpSshtmGroups 2 }\n"
  - 'END

    '
  title: 7.  MIB Module Definition
- contents:
  - "8.  Operational Considerations\n   The SSH Transport Model will likely not work
    in conditions where\n   remote access to the CLI has stopped working.  The SSH
    Transport\n   Model assumes that TCP and IP continue to operate correctly between\n
    \  the communicating nodes.  Failures in either node, death of the\n   deamon
    serving the communication, routing problems in the network\n   between, firewalls
    that block the traffic, and other problems can\n   prevent the SSH Transport Model
    from working.  In situations where\n   management access has to be very reliable,
    operators should consider\n   mitigating measures.  These measures may include
    dedicated\n   management-only networks, point-to-point links, and the ability
    to\n   use alternate protocols and transports.\n   To have SNMP properly utilize
    the security services provided by SSH,\n   the SSH Transport Model MUST be used
    with a Security Model that knows\n   how to process a tmStateReference, such as
    the Transport Security\n   Model for SNMP [RFC5591].\n   If the SSH Transport
    Model is configured to utilize AAA services,\n   operators should consider configuring
    support for local\n   authentication mechanisms, such as local passwords, so SNMP
    can\n   continue operating during times of network stress.\n   The SSH protocol
    has its own window mechanism, defined in RFC 4254.\n   The SSH specifications
    leave it open when window adjustment messages\n   should be created, and some
    implementations send these whenever\n   received data has been passed to the application.
    \ There are\n   noticeable bandwidth and processing overheads to handling such
    window\n   adjustment messages, which can be avoided by sending them less\n   frequently.\n
    \  The SSH protocol requires the execution of CPU-intensive calculations\n   to
    establish a session key during session establishment.  This means\n   that short-lived
    sessions become computationally expensive compared\n   to USM, which does not
    have a notion of a session key.  Other\n   transport security protocols such as
    TLS support a session-resumption\n   feature that allows reusing a cached session
    key.  Such a mechanism\n   does not exist for SSH and thus SNMP applications should
    keep SSH\n   sessions for longer time periods.\n   To initiate SSH connections,
    an entity must be configured with SSH\n   client credentials plus information
    to authenticate the server.\n   While hosts are often configured to be SSH clients,
    most\n   internetworking devices are not.  To send notifications over SSHTM,\n
    \  the internetworking device will need to be configured as an SSH\n   client.
    \ How this credential configuration is done is implementation-\n   and deployment-specific.\n"
  title: 8.  Operational Considerations
- contents:
  - "9.  Security Considerations\n   This memo describes a Transport Model that permits
    SNMP to utilize\n   SSH security services.  The security threats and how the SSH\n
    \  Transport Model mitigates those threats is covered in detail\n   throughout
    this memo.\n   The SSH Transport Model relies on SSH mutual authentication, binding\n
    \  of keys, confidentiality, and integrity.  Any authentication method\n   that
    meets the requirements of the SSH architecture will provide the\n   properties
    of mutual authentication and binding of keys.\n   SSHv2 provides perfect forward
    secrecy (PFS) for encryption keys.\n   PFS is a major design goal of SSH, and
    any well-designed key-exchange\n   algorithm will provide it.\n   The security
    implications of using SSH are covered in [RFC4251].\n   The SSH Transport Model
    has no way to verify that server\n   authentication was performed, to learn the
    host's public key in\n   advance, or to verify that the correct key is being used.
    \ The SSH\n   Transport Model simply trusts that these are properly configured
    by\n   the implementer and deployer.\n   SSH provides the \"none\" userauth method.
    \ The SSH Transport Model\n   MUST NOT be used with an SSH connection with the
    \"none\" userauth\n   method.  While SSH does support turning off confidentiality
    and\n   integrity, they MUST NOT be turned off when used with the SSH\n   Transport
    Model.\n   The SSH protocol is not always clear on whether the user name field\n
    \  must be filled in, so for some implementations, such as those using\n   GSSAPI
    authentication, it may be necessary to use a mapping algorithm\n   to transform
    an SSH identity to a tmSecurityName or to transform a\n   tmSecurityName to an
    SSH identity.\n   In other cases, the user name may not be verified by the server,
    so\n   for these implementations, it may be necessary to obtain the user\n   name
    from other credentials exchanged during the SSH exchange.\n"
  - contents:
    - "9.1.  Skipping Public Key Verification\n   Most key-exchange algorithms are
      able to authenticate the SSH\n   server's identity to the client.  However,
      for the common case of\n   Diffie-Hellman (DH) signed by public keys, this requires
      the client\n   to know the host's public key a priori and to verify that the
      correct\n   key is being used.  If this step is skipped, then authentication
      of\n   the SSH server to the SSH client is not done.  Data confidentiality\n
      \  and data integrity protection to the server still exist, but these\n   are
      of dubious value when an attacker can insert himself between the\n   client
      and the real SSH server.  Note that some userauth methods may\n   defend against
      this situation, but many of the common ones (including\n   password and keyboard-interactive)
      do not and, in fact, depend on the\n   fact that the server's identity has been
      verified (so passwords are\n   not disclosed to an attacker).\n   SSH MUST NOT
      be configured to skip public-key verification for use\n   with the SSH Transport
      Model.\n"
    title: 9.1.  Skipping Public Key Verification
  - contents:
    - "9.2.  Notification Authorization Considerations\n   SNMP Notifications are
      authorized to be sent to a receiver based on\n   the securityName used by the
      notification originator's SNMP engine.\n   This authorization is performed before
      the message is actually sent\n   and before the credentials of the remote receiver
      have been verified.\n   Thus, the credentials presented by a notification receiver
      MUST match\n   the expected value(s) for a given transport address, and ownership
      of\n   the credentials MUST be properly cryptographically verified.\n"
    title: 9.2.  Notification Authorization Considerations
  - contents:
    - "9.3.  SSH User and Key Selection\n   If a \"user@\" prefix is used within an
      SnmpSSHAddress value to specify\n   an SSH user name to use for authentication,
      then the key presented to\n   the remote entity MUST be the key expected by
      the server for the\n   \"user\".  This may be different than a locally cached
      key identified\n   by the securityName value.\n"
    title: 9.3.  SSH User and Key Selection
  - contents:
    - "9.4.  Conceptual Differences between USM and SSHTM\n   The User-based Security
      Model [RFC3414] employed symmetric\n   cryptography and user-naming conventions.
      \ SSH employs an asymmetric\n   cryptography and naming model.  Unlike USM,
      cryptographic keys will\n   be different on both sides of the SSH connection.
      \ Both sides are\n   responsible for verifying that the remote entity presents
      the right\n   key.  The optional \"user@\" prefix component of the SnmpSSHAddress\n
      \  Textual Convention allows the client SNMP stack to associate the\n   connection
      with a securityName that may be different than the SSH\n   user name presented
      to the SSH server.\n"
    title: 9.4.  Conceptual Differences between USM and SSHTM
  - contents:
    - "9.5.  The 'none' MAC Algorithm\n   SSH provides the \"none\" Message Authentication
      Code (MAC) algorithm,\n   which would allow you to turn off data integrity while
      maintaining\n   confidentiality.  However, if you do this, then an attacker
      may be\n   able to modify the data in flight, which means you effectively have\n
      \  no authentication.\n   SSH MUST NOT be configured using the \"none\" MAC
      algorithm for use\n   with the SSH Transport Model.\n"
    title: 9.5.  The 'none' MAC Algorithm
  - contents:
    - "9.6.  Use with SNMPv1/v2c Messages\n   The SNMPv1 and SNMPv2c message processing
      described in [RFC3584] (BCP\n   74) always selects the SNMPv1 or SNMPv2c Security
      Models,\n   respectively.  Both of these and the User-based Security Model\n
      \  typically used with SNMPv3 derive the securityName and securityLevel\n   from
      the SNMP message received, even when the message was received\n   over a secure
      transport.  Access control decisions are therefore made\n   based on the contents
      of the SNMP message, rather than using the\n   authenticated identity and securityLevel
      provided by the SSH\n   Transport Model.\n"
    title: 9.6.  Use with SNMPv1/v2c Messages
  - contents:
    - "9.7.  MIB Module Security\n   There are no management objects defined in this
      MIB module that have\n   a MAX-ACCESS clause of read-write and/or read-create.
      \ So, if this\n   MIB module is implemented correctly, then there is no risk
      that an\n   intruder can alter or create any management objects of this MIB\n
      \  module via direct SNMP SET operations.\n   Some of the readable objects in
      this MIB module (i.e., objects with a\n   MAX-ACCESS other than not-accessible)
      may be considered sensitive or\n   vulnerable in some network environments.
      \ It is thus important to\n   control even GET and/or NOTIFY access to these
      objects and possibly\n   to even encrypt the values of these objects when sending
      them over\n   the network via SNMP.  These are the tables and objects and their\n
      \  sensitivity/vulnerability:\n   o  The information in the snmpSshtmSession
      group is generated locally\n      when a client session is being opened or closed.
      \ This information\n      can reflect the configured capabilities of a remote
      SSH server,\n      which could be helpful to an attacker for focusing an attack.\n
      \  SNMP versions prior to SNMPv3 did not include adequate security.\n   Even
      if the network itself is secure (for example by using IPSec or\n   SSH), even
      then, there is no control as to who on the secure network\n   is allowed to
      access and GET/SET (read/change/create/delete) the\n   objects in this MIB module.\n
      \  It is RECOMMENDED that implementers consider the security features as\n   provided
      by the SNMPv3 framework (see [RFC3410], Section 8),\n   including full support
      for cryptographic mechanisms for\n   authentication and privacy, such as those
      found in the User-based\n   Security Model [RFC3414], the Transport Security
      Model [RFC5591], and\n   the SSH Transport Model described in this document.\n
      \  Further, deployment of SNMP versions prior to SNMPv3 is NOT\n   RECOMMENDED.
      \ Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable cryptographic
      security.  It is then a customer/operator\n   responsibility to ensure that
      the SNMP entity giving access to an\n   instance of this MIB module is properly
      configured to give access to\n   the objects only to those principals (users)
      that have legitimate\n   rights to indeed GET or SET (change/create/delete)
      them.\n"
    title: 9.7.  MIB Module Security
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   IANA has assigned:\n   1.  Two TCP port numbers
    in the Port Numbers registry that will be\n       the default ports for the SNMP-over-SSH
    Transport Model as\n       defined in this document, and the SNMP-over-SSH Transport
    Model\n       for notifications as defined in this document.  The assigned\n       keywords
    and port numbers are \"snmpssh\" (5161) and \"snmpssh-trap\"\n       (5162).\n
    \  2.  An SMI number (189) under mib-2, for the MIB module in this\n       document.\n
    \  3.  An SMI number (7) under snmpDomains, for the snmpSSHDomain.\n   4.  \"ssh\"
    as the corresponding prefix for the snmpSSHDomain in the\n       SNMP Transport
    Domains registry; defined in [RFC5590].\n   5.  \"snmp\" as a Connection Protocol
    Subsystem Name in the SSH\n       Protocol Parameters registry.\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   The editors would like to thank Jeffrey Hutzelman for
    sharing his SSH\n   insights, and Dave Shield for an outstanding job wordsmithing
    the\n   existing document to improve organization and clarity.\n   Additionally,
    helpful document reviews were received from Juergen\n   Schoenwaelder.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC1033]  Lottor, M., \"Domain administrators
      operations guide\",\n              RFC 1033, November 1987.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC2578]  McCloghrie, K., Ed., Perkins, D.,
      Ed., and J.\n              Schoenwaelder, Ed., \"Structure of Management Information\n
      \             Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [RFC2579]
      \ McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,
      Ed., \"Textual Conventions for SMIv2\",\n              STD 58, RFC 2579, April
      1999.\n   [RFC2580]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Conformance
      Statements for SMIv2\", STD 58, RFC 2580,\n              April 1999.\n   [RFC3411]
      \ Harrington, D., Presuhn, R., and B. Wijnen, \"An\n              Architecture
      for Describing Simple Network Management\n              Protocol (SNMP) Management
      Frameworks\", STD 62, RFC 3411,\n              December 2002.\n   [RFC3413]
      \ Levi, D., Meyer, P., and B. Stewart, \"Simple Network\n              Management
      Protocol (SNMP) Applications\", STD 62,\n              RFC 3413, December 2002.\n
      \  [RFC3414]  Blumenthal, U. and B. Wijnen, \"User-based Security Model\n              (USM)
      for version 3 of the Simple Network Management\n              Protocol (SNMPv3)\",
      STD 62, RFC 3414, December 2002.\n   [RFC3418]  Presuhn, R., \"Management Information
      Base (MIB) for the\n              Simple Network Management Protocol (SNMP)\",
      STD 62,\n              RFC 3418, December 2002.\n   [RFC3490]  Faltstrom, P.,
      Hoffman, P., and A. Costello,\n              \"Internationalizing Domain Names
      in Applications (IDNA)\",\n              RFC 3490, March 2003.\n   [RFC3584]
      \ Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n              \"Coexistence
      between Version 1, Version 2, and Version 3\n              of the Internet-standard
      Network Management Framework\",\n              BCP 74, RFC 3584, August 2003.\n
      \  [RFC4251]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n              Protocol
      Architecture\", RFC 4251, January 2006.\n   [RFC4252]  Ylonen, T. and C. Lonvick,
      \"The Secure Shell (SSH)\n              Authentication Protocol\", RFC 4252,
      January 2006.\n   [RFC4253]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n
      \             Transport Layer Protocol\", RFC 4253, January 2006.\n   [RFC4254]
      \ Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n              Connection
      Protocol\", RFC 4254, January 2006.\n   [RFC5590]  Harrington, D. and J. Schoenwaelder,
      \"Transport Subsystem\n              for the Simple Network Management Protocol
      (SNMP)\",\n              RFC 5590, June 2009.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC1994]  Simpson, W., \"PPP Challenge Handshake
      Authentication\n              Protocol (CHAP)\", RFC 1994, August 1996.\n   [RFC2865]
      \ Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n              \"Remote
      Authentication Dial In User Service (RADIUS)\",\n              RFC 2865, June
      2000.\n   [RFC3410]  Case, J., Mundy, R., Partain, D., and B. Stewart,\n              \"Introduction
      and Applicability Statements for Internet-\n              Standard Management
      Framework\", RFC 3410, December 2002.\n   [RFC3588]  Calhoun, P., Loughney,
      J., Guttman, E., Zorn, G., and J.\n              Arkko, \"Diameter Base Protocol\",
      RFC 3588, September 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and
      L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\",
      STD 66,\n              RFC 3986, January 2005.\n   [RFC4256]  Cusack, F. and
      M. Forssen, \"Generic Message Exchange\n              Authentication for the
      Secure Shell Protocol (SSH)\",\n              RFC 4256, January 2006.\n   [RFC4462]
      \ Hutzelman, J., Salowey, J., Galbraith, J., and V. Welch,\n              \"Generic
      Security Service Application Program Interface\n              (GSS-API) Authentication
      and Key Exchange for the Secure\n              Shell (SSH) Protocol\", RFC 4462,
      May 2006.\n   [RFC4742]  Wasserman, M. and T. Goddard, \"Using the NETCONF\n
      \             Configuration Protocol over Secure SHell (SSH)\", RFC 4742,\n
      \             December 2006.\n   [RFC5090]  Sterman, B., Sadolevsky, D., Schwartz,
      D., Williams, D.,\n              and W. Beck, \"RADIUS Extension for Digest
      Authentication\",\n              RFC 5090, February 2008.\n   [RFC5591]  Harrington,
      D. and W. Hardaker, \"Transport Security Model\n              for the Simple
      Network Management Protocol (SNMP)\",\n              RFC 5591, June 2009.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   David Harrington\n   Huawei Technologies (USA)\n   1700
    Alma Dr. Suite 100\n   Plano, TX 75075\n   USA\n   Phone: +1 603 436 8634\n   EMail:
    ietfdbh@comcast.net\n   Joseph Salowey\n   Cisco Systems\n   2901 3rd Ave\n   Seattle,
    WA 98121\n   USA\n   EMail: jsalowey@cisco.com\n   Wes Hardaker\n   Cobham Analytic
    Solutions\n   P.O. Box 382\n   Davis, CA  95617\n   US\n   Phone: +1 530 792 1913\n
    \  EMail: ietf@hardakers.net\n"
  title: Authors' Addresses
