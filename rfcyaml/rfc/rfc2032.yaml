- title: __initial_text__
  contents:
  - '               RTP Payload Format for H.261 Video Streams

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Abstract .............................................\
    \    1\n   2. Purpose of this document .............................    2\n  \
    \ 3. Structure of the packet stream .......................    2\n   3.1 Overview\
    \ of the ITU-T recommendation H.261 ..........    2\n   3.2 Considerations for\
    \ packetization ....................    3\n   4. Specification of the packetization\
    \ scheme ............    4\n   4.1 Usage of RTP ........................................\
    \    4\n   4.2 Recommendations for operation with hardware codecs ..    6\n  \
    \ 5. Packet loss issues ...................................    7\n   5.1 Use of\
    \ optional H.261-specific control packets ......    8\n   5.2 H.261 control packets\
    \ definition ....................    9\n   5.2.1 Full INTRA-frame Request (FIR)\
    \ packet .............    9\n   5.2.2 Negative ACKnowledgements (NACK) packet\
    \ ...........    9\n   6. Security Considerations ..............................\
    \   10\n    Authors' Addresses .....................................   10\n  \
    \  Acknowledgements .......................................   10\n    References\
    \ .............................................   11\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo describes a scheme to packetize an H.261 video stream\
    \ for\n   transport using the Real-time Transport Protocol, RTP, with any of\n\
    \   the underlying protocols that carry RTP.\n   This specification is a product\
    \ of the Audio/Video Transport working\n   group within the Internet Engineering\
    \ Task Force.  Comments are\n   solicited and should be addressed to the working\
    \ group's mailing list\n   at rem-conf@es.net and/or the authors.\n"
- title: 2.  Purpose of this document
  contents:
  - "2.  Purpose of this document\n   The ITU-T recommendation H.261 [6] specifies\
    \ the encodings used by\n   ITU-T compliant video-conference codecs. Although\
    \ these encodings\n   were originally specified for fixed data rate ISDN circuits,\n\
    \   experiments [3],[8] have shown that they can also be used over\n   packet-switched\
    \ networks such as the Internet.\n   The purpose of this memo is to specify the\
    \ RTP payload format for\n   encapsulating H.261 video streams in RTP [1].\n"
- title: 3.  Structure of the packet stream
  contents:
  - '3.  Structure of the packet stream

    '
- title: 3.1.  Overview of the ITU-T recommendation H.261
  contents:
  - "3.1.  Overview of the ITU-T recommendation H.261\n   The H.261 coding is organized\
    \ as a hierarchy of groupings.  The video\n   stream is composed of a sequence\
    \ of images, or frames, which are\n   themselves organized as a set of Groups\
    \ of Blocks (GOB). Note that\n   H.261 \"pictures\" are referred as \"frames\"\
    \ in this document.  Each GOB\n   holds a set of 3 lines of 11 macro blocks (MB).\
    \ Each MB carries\n   information on a group of 16x16 pixels: luminance information\
    \ is\n   specified for 4 blocks of 8x8 pixels, while chrominance information\n\
    \   is given by two \"red\" and \"blue\" color difference components at a\n  \
    \ resolution of only 8x8 pixels.  These components and the codes\n   representing\
    \ their sampled values are as defined in the ITU-R\n   Recommendation 601 [7].\n\
    \   This grouping is used to specify information at each level of the\n   hierarchy:\n\
    \   -    At the frame level, one specifies information such as the\n        delay\
    \ from the previous frame, the image format, and\n        various indicators.\n\
    \   -    At the GOB level, one specifies the GOB number and the\n        default\
    \ quantifier that will be used for the MBs.\n   -    At the MB level, one specifies\
    \ which blocks are present\n        and which did not change, and optionally a\
    \ quantifier and\n        motion vectors.\n   Blocks which have changed are encoded\
    \ by computing the discrete\n   cosine transform (DCT) of their coefficients,\
    \ which are then\n   quantized and Huffman encoded (Variable Length Codes).\n\
    \   The H.261 Huffman encoding includes a special \"GOB start\" pattern,\n   composed\
    \ of 15 zeroes followed by a single 1, that cannot be imitated\n   by any other\
    \ code words. This pattern is included at the beginning of\n   each GOB header\
    \ (and also at the beginning of each frame header) to\n   mark the separation\
    \ between two GOBs, and is in fact used as an\n   indicator that the current GOB\
    \ is terminated. The encoding also\n   includes a stuffing pattern, composed of\
    \ seven zeroes followed by\n   four ones; that stuffing pattern can only be entered\
    \ between the\n   encoding of MBs, or just before the GOB separator.\n"
- title: 3.2.  Considerations for packetization
  contents:
  - "3.2.  Considerations for packetization\n   H.261 codecs designed for operation\
    \ over ISDN circuits produce a bit\n   stream composed of several levels of encoding\
    \ specified by H.261 and\n   companion recommendations.  The bits resulting from\
    \ the Huffman\n   encoding are arranged in 512-bit frames, containing 2 bits of\n\
    \   synchronization, 492 bits of data and 18 bits of error correcting\n   code.\
    \  The 512-bit frames are then interlaced with an audio stream\n   and transmitted\
    \ over px64 kbps circuits according to specification\n   H.221 [5].\n   When transmitting\
    \ over the Internet, we will directly consider the\n   output of the Huffman encoding.\
    \ All the bits produced by the Huffman\n   encoding stage will be included in\
    \ the packet. We will not carry the\n   512-bit frames, as protection against\
    \ bit errors can be obtained by\n   other means. Similarly, we will not attempt\
    \ to multiplex audio and\n   video signals in the same packets, as UDP and RTP\
    \ provide a much more\n   efficient way to achieve multiplexing.\n   Directly\
    \ transmitting the result of the Huffman encoding over an\n   unreliable stream\
    \ of UDP datagrams would, however, have poor error\n   resistance characteristics.\
    \ The result of the hierachical structure\n   of H.261 bit stream is that one\
    \ needs to receive the information\n   present in the frame header to decode the\
    \ GOBs, as well as the\n   information present in the GOB header to decode the\
    \ MBs.  Without\n   precautions, this would mean that one has to receive all the\
    \ packets\n   that carry an image in order to properly decode its components.\n\
    \   If each image could be carried in a single packet, this requirement\n   would\
    \ not create a problem. However, a video image or even one GOB by\n   itself can\
    \ sometimes be too large to fit in a single packet.\n   Therefore, the MB is taken\
    \ as the unit of fragmentation.  Packets\n   must start and end on a MB boundary,\
    \ i.e. a MB cannot be split across\n   multiple packets.  Multiple MBs may be\
    \ carried in a single packet\n   when they will fit within the maximal packet\
    \ size allowed. This\n   practice is recommended to reduce the packet send rate\
    \ and packet\n   overhead.\n   To allow each packet to be processed independently\
    \ for efficient\n   resynchronization in the presence of packet losses, some state\n\
    \   information from the frame header and GOB header is carried with each\n  \
    \ packet to allow the MBs in that packet to be decoded.  This state\n   information\
    \ includes the GOB number in effect at the start of the\n   packet, the macroblock\
    \ address predictor (i.e. the last MBA encoded\n   in the previous packet), the\
    \ quantizer value in effect prior to the\n   start of this packet (GQUANT, MQUANT\
    \ or zero in case of a beginning\n   of GOB) and the reference motion vector data\
    \ (MVD) for computing the\n   true MVDs contained within this packet. The bit\
    \ stream cannot be\n   fragmented between a GOB header and MB 1 of that GOB.\n\
    \   Moreover, since the compressed MB may not fill an integer number of\n   octets,\
    \ the data header contains two three-bit integers, SBIT and\n   EBIT, to indicate\
    \ the number of unused bits in the first and last\n   octets of the H.261 data,\
    \ respectively.\n"
- title: 4.  Specification of the packetization scheme
  contents:
  - '4.  Specification of the packetization scheme

    '
- title: 4.1.  Usage of RTP
  contents:
  - "4.1.  Usage of RTP\n   The H.261 information is carried as payload data within\
    \ the RTP\n   protocol. The following fields of the RTP header are specified:\n\
    \   -    The payload type should specify H.261 payload format (see\n        the\
    \ companion RTP profile document RFC 1890).\n   -    The RTP timestamp encodes\
    \ the sampling instant of the\n        first video image contained in the RTP\
    \ data packet. If a\n        video image occupies more than one packet, the timestamp\n\
    \        will be the same on all of those packets. Packets from\n        different\
    \ video images must have different timestamps so\n        that frames may be distinguished\
    \ by the timestamp. For\n        H.261 video streams, the RTP timestamp is based\
    \ on a\n        90kHz clock. This clock rate is a multiple of the natural\n  \
    \      H.261 frame rate (i.e. 30000/1001 or approx. 29.97 Hz).\n        That way,\
    \ for each frame time, the clock is just\n        incremented by the multiple\
    \ and this removes inaccuracy\n        in calculating the timestamp. Furthermore,\
    \ the initial\n        value of the timestamp is random (unpredictable) to make\n\
    \        known-plaintext attacks on encryption more difficult, see\n        RTP\
    \ [1]. Note that if multiple frames are encoded in a\n        packet (e.g. when\
    \ there are very little changes between\n        two images), it is necessary\
    \ to calculate display times\n        for the frames after the first using the\
    \ timing\n        information in the H.261 frame header. This is required\n  \
    \      because the RTP timestamp only gives the display time of\n        the first\
    \ frame in the packet.\n   -    The marker bit of the RTP header is set to one\
    \ in the\n        last packet of a video frame, and otherwise, must be\n     \
    \   zero. Thus, it is not necessary to wait for a following\n        packet (which\
    \ contains the start code that terminates the\n        current frame) to detect\
    \ that a new frame should be\n        displayed.\n   The H.261 data will follow\
    \ the RTP header, as in:\n     0                   1                   2     \
    \              3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    .                                                               .\n    .\
    \                          RTP header                           .\n    .     \
    \                                                          .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          H.261  header                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          H.261 stream ...                     .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The H.261 header is defined as following:\n     0                   1    \
    \               2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |SBIT |EBIT |I|V| GOBN  |   MBAP  |  QUANT  |  HMVD   |  VMVD   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The fields in the H.261 header have the following meanings:\n   Start bit\
    \ position (SBIT): 3 bits\n     Number of most significant bits that should be\
    \ ignored\n     in the first data octet.\n   End bit position (EBIT): 3 bits\n\
    \     Number of least significant bits that should be ignored\n     in the last\
    \ data octet.\n   INTRA-frame encoded data (I): 1 bit\n     Set to 1 if this stream\
    \ contains only INTRA-frame coded\n     blocks. Set to 0 if this stream may or\
    \ may not contain\n     INTRA-frame coded blocks. The sense of this bit may not\n\
    \     change during the course of the RTP session.\n   Motion Vector flag (V):\
    \ 1 bit\n     Set to 0 if motion vectors are not used in this stream.\n     Set\
    \ to 1 if motion vectors may or may not be used in\n     this stream. The sense\
    \ of this bit may not change during\n     the course of the session.\n   GOB number\
    \ (GOBN): 4 bits\n     Encodes the GOB number in effect at the start of the\n\
    \     packet. Set to 0 if the packet begins with a GOB header.\n   Macroblock\
    \ address predictor (MBAP): 5 bits\n     Encodes the macroblock address predictor\
    \ (i.e. the last\n     MBA encoded in the previous packet). This predictor ranges\n\
    \     from 0-32 (to predict the valid MBAs 1-33), but because\n     the bit stream\
    \ cannot be fragmented between a GOB header\n     and MB 1, the predictor at the\
    \ start of the packet can\n     never be 0. Therefore, the range is 1-32, which\
    \ is biased\n     by -1 to fit in 5 bits. For example, if MBAP is 0, the\n   \
    \  value of the MBA predictor is 1. Set to 0 if the packet\n     begins with a\
    \ GOB header.\n   Quantizer (QUANT): 5 bits\n     Quantizer value (MQUANT or GQUANT)\
    \ in effect prior to the\n     start of this packet. Set to 0 if the packet begins\
    \ with\n     a GOB header.\n   Horizontal motion vector data (HMVD): 5 bits\n\
    \     Reference horizontal motion vector data (MVD). Set to 0\n     if V flag\
    \ is 0 or if the packet begins with a GOB header,\n     or when the MTYPE of the\
    \ last MB encoded in the previous\n     packet was not MC. HMVD is encoded as\
    \ a 2's complement\n     number, and `10000' corresponding to the value -16 is\n\
    \     forbidden (motion vector fields range from +/-15).\n   Vertical motion vector\
    \ data (VMVD): 5 bits\n     Reference vertical motion vector data (MVD). Set to\
    \ 0 if\n     V flag is 0 or if the packet begins with a GOB header, or\n     when\
    \ the MTYPE of the last MB encoded in the previous\n     packet was not MC. VMVD\
    \ is encoded as a 2's complement\n     number, and `10000' corresponding to the\
    \ value -16 is\n     forbidden (motion vector fields range from +/-15).\n   Note\
    \ that the I and V flags are hint flags, i.e. they can be inferred\n   from the\
    \ bit stream. They are included to allow decoders to make\n   optimizations that\
    \ would not be possible if these hints were not\n   provided before bit stream\
    \ was decoded.  Therefore, these bits cannot\n   change for the duration of the\
    \ stream. A conformant implementation\n   can always set V=1 and I=0.\n"
- title: 4.2.  Recommendations for operation with hardware codecs
  contents:
  - "4.2.  Recommendations for operation with hardware codecs\n   Packetizers for\
    \ hardware codecs can trivially figure out GOB\n   boundaries using the GOB-start\
    \ pattern included in the H.261 data.\n   (Note that software encoders already\
    \ know the boundaries.) The\n   cheapest packetization implementation is to packetize\
    \ at the GOB\n   level all the GOBs that fit in a packet.  But when a GOB is too\n\
    \   large, the packetizer has to parse it to do MB fragmentation. (Note\n   that\
    \ only the Huffman encoding must be parsed and that it is not\n   necessary to\
    \ fully decompress the stream, so this requires relatively\n   little processing;\
    \ example implementations can be found in some\n   public H.261 codecs such as\
    \ IVS [4] and VIC [9].) It is recommended\n   that MB level fragmentation be used\
    \ when feasible in order to obtain\n   more efficient packetization. Using this\
    \ fragmentation scheme reduces\n   the output packet rate and therefore reduces\
    \ the overhead.\n   At the receiver, the data stream can be depacketized and directed\
    \ to\n   a hardware codec's input.  If the hardware decoder operates at a\n  \
    \ fixed bit rate, synchronization may be maintained by inserting the\n   stuffing\
    \ pattern between MBs (i.e., between packets) when the packet\n   arrival rate\
    \ is slower than the bit rate.\n"
- title: 5.  Packet loss issues
  contents:
  - "5.  Packet loss issues\n   On the Internet, most packet losses are due to network\
    \ congestion\n   rather than transmission errors. Using UDP, no mechanism is available\n\
    \   at the sender to know if a packet has been successfully received. It\n   is\
    \ up to the application, i.e.  coder and decoder, to handle the\n   packet loss.\
    \ Each RTP packet includes a a sequence number field which\n   can be used to\
    \ detect packet loss.\n   H.261 uses the temporal redundancy of video to perform\
    \ compression.\n   This differential coding (or INTER-frame coding) is sensitive\
    \ to\n   packet loss. After a packet loss, parts of the image may remain\n   corrupt\
    \ until all corresponding MBs have been encoded in INTRA-frame\n   mode (i.e.\
    \ encoded independently of past frames). There are several\n   ways to mitigate\
    \ packet loss:\n   (1)  One way is to use only INTRA-frame encoding and MB level\n\
    \        conditional replenishment. That is, only MBs that change\n        (beyond\
    \ some threshold) are transmitted.\n   (2)  Another way is to adjust the INTRA-frame\
    \ encoding\n        refreshment rate according to the packet loss observed by\n\
    \        the receivers. The H.261 recommendation specifies that a\n        MB\
    \ is INTRA-frame encoded at least every 132 times it is\n        transmitted.\
    \ However, the INTRA-frame refreshment rate\n        can be raised in order to\
    \ speed the recovery when the\n        measured loss rate is significant.\n  \
    \ (3)  The fastest way to repair a corrupted image is to request\n        an INTRA-frame\
    \ coded image refreshment after a packet\n        loss is detected. One means\
    \ to accomplish this is for the\n        decoder to send to the coder a list of\
    \ packets lost. The\n        coder can decide to encode every MB of every GOB\
    \ of the\n        following video frame in INTRA-frame mode (i.e. Full\n     \
    \   INTRA-frame encoded), or if the coder can deduce from the\n        packet\
    \ sequence numbers which MBs were affected by the\n        loss, it can save bandwidth\
    \ by sending only those MBs in\n        INTRA-frame mode. This mode is particularly\
    \ efficient in\n        point-to-point connection or when the number of decoders\n\
    \        is low.  The next section specifies how the refresh\n        function\
    \ may be implemented.\n   Note that the method (1) is currently implemented in\
    \ the VIC\n   videoconferencing software [9]. Methods (2) and (3) are currently\n\
    \   implemented in the IVS videoconferencing software [4].\n"
- title: 5.1.  Use of optional H.261-specific control packets
  contents:
  - "5.1.  Use of optional H.261-specific control packets\n   This specification defines\
    \ two H.261-specific RTCP control packets,\n   \"Full INTRA-frame Request\" and\
    \ \"Negative Acknowledgement\", described\n   in the next section.  Their purpose\
    \ is to speed up refreshment of the\n   video in those situations where their\
    \ use is feasible.  Support of\n   these H.261-specific control packets by the\
    \ H.261 sender is optional;\n   in particular, early experiments have shown that\
    \ the usage of this\n   feature could have very negative effects when the number\
    \ of sites is\n   very large. Thus, these control packets should be used with\
    \ caution.\n   The H.261-specific control packets differ from normal RTCP packets\
    \ in\n   that they are not transmitted to the normal RTCP destination\n   transport\
    \ address for the RTP session (which is often a multicast\n   address).  Instead,\
    \ these control packets are sent directly via\n   unicast from the decoder to\
    \ the coder.  The destination port for\n   these control packets is the same port\
    \ that the coder uses as a\n   source port for transmitting RTP (data) packets.\
    \  Therefore, these\n   packets may be considered \"reverse\" control packets.\n\
    \   As a consequence, these control packets may only be used when no RTP\n   mixers\
    \ or translators intervene in the path from the coder to the\n   decoder.  If\
    \ such intermediate systems do intervene, the address of\n   the coder would no\
    \ longer be present as the network-level source\n   address in packets received\
    \ by the decoder, and in fact, it might not\n   be possible for the decoder to\
    \ send packets directly to the coder.\n   Some reliable multicast protocols use\
    \ similar NACK control packets\n   transmitted over the normal multicast distribution\
    \ channel, but they\n   typically use random delays to prevent a NACK implosion\
    \ problem [2].\n   The goal of such protocols is to provide reliable multicast\
    \ packet\n   delivery at the expense of delay, which is appropriate for\n   applications\
    \ such as a shared whiteboard.\n   On the other hand, interactive video transmission\
    \ is more sensitive\n   to delay and does not require full reliability.  For video\n\
    \   applications it is more effective to send the NACK control packets as\n  \
    \ soon as possible, i.e. as soon as a loss is detected, without adding\n   any\
    \ random delays. In this case, multicasting the NACK control\n   packets would\
    \ generate useless traffic between receivers since only\n   the coder will use\
    \ them.  But this method is only effective when the\n   number of receivers is\
    \ small. e.g. in IVS [4] the H.261 specific\n   control packets are used only\
    \ in point-to-point connections or in\n   point-to-multipoint connections when\
    \ there are less than 10\n   participants in the conference.\n"
- title: 5.2.  H.261 control packets definition
  contents:
  - '5.2.  H.261 control packets definition

    '
- title: 5.2.1.  Full INTRA-frame Request (FIR) packet
  contents:
  - "5.2.1.  Full INTRA-frame Request (FIR) packet\n     0                   1   \
    \                2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |V=2|P|   MBZ   |  PT=RTCP_FIR  |           length              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                              SSRC                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This packet indicates that a receiver requires a full encoded image\n   in\
    \ order to either start decoding with an entire image or to refresh\n   its image\
    \ and speed the recovery after a burst of lost packets. The\n   receiver requests\
    \ the source to force the next image in full \"INTRA-\n   frame\" coding mode,\
    \ i.e. without using differential coding. The\n   various fields are defined in\
    \ the RTP specification [1]. SSRC is the\n   synchronization source identifier\
    \ for the sender of this packet. The\n   value of the packet type (PT) identifier\
    \ is the constant RTCP_FIR\n   (192).\n"
- title: 5.2.2.  Negative ACKnowledgements (NACK) packet
  contents:
  - "5.2.2.  Negative ACKnowledgements (NACK) packet\n   The format of the NACK packet\
    \ is as follow:\n     0                   1                   2              \
    \     3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |V=2|P|\
    \   MBZ   | PT=RTCP_NACK  |           length              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                              SSRC                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              FSN              |              BLP              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The various fields T, P, PT, length and SSRC are defined in the RTP\n   specification\
    \ [1]. The value of the packet type (PT) identifier is\n   the constant RTCP_NACK\
    \ (193). SSRC is the synchronization source\n   identifier for the sender of this\
    \ packet.\n   The two remaining fields have the following meanings:\n   First\
    \ Sequence Number (FSN): 16 bits\n     Identifies the first sequence number lost.\n\
    \   Bitmask of following lost packets (BLP): 16 bits\n     A bit is set to 1 if\
    \ the corresponding packet has been lost,\n     and set to 0 otherwise. BLP is\
    \ set to 0 only if no packet\n     other than that being NACKed (using the FSN\
    \ field) has been\n     lost. BLP is set to 0x00001 if the packet corresponding\
    \ to\n     the FSN and the following packet have been lost, etc.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Thierry Turletti\n   INRIA - RODEO Project\n   2004 route\
    \ des Lucioles\n   BP 93, 06902 Sophia Antipolis\n   FRANCE\n   EMail: turletti@sophia.inria.fr\n\
    \   Christian Huitema\n   MCC 1J236B Bellcore\n   445 South Street\n   Morristown,\
    \ NJ 07960-6438\n   EMail: huitema@bellcore.com\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo is based on discussion within the AVT working\
    \ group chaired\n   by Stephen Casner. Steve McCanne, Stephen Casner, Ronan Flood,\
    \ Mark\n   Handley, Van Jacobson, Henning G.  Schulzrinne and John Wroclawski\n\
    \   provided valuable comments.  Stephen Casner and Steve McCanne also\n   helped\
    \ greatly with getting this document into readable form.\n"
- title: References
  contents:
  - "References\n   [1]  Schulzrinne, H., Casner, S., Frederick, R., and\n       \
    \ V. Jacobson, \"RTP: A Transport Protocol for Real-Time\n        Applications\"\
    , RFC 1889, January 1996.\n   [2]  Sridhar Pingali, Don Towsley and James F. Kurose,\
    \ A\n        comparison of sender-initiated and receiver-initiated\n        reliable\
    \ multicast protocols, IEEE GLOBECOM '94.\n   [3]  Thierry Turletti, H.261 software\
    \ codec for\n        videoconferencing over the Internet INRIA Research Report\n\
    \        no 1834, January 1993.\n   [4]  Thierry Turletti, INRIA Videoconferencing\
    \ tool (IVS),\n        available by anonymous ftp from zenon.inria.fr in the\n\
    \        \"rodeo/ivs/last_version\" directory. See also URL\n        <http://www.inria.fr/rodeo/ivs.html>.\n\
    \   [5]  Frame structure for Audiovisual Services for a 64 to 1920\n        kbps\
    \ Channel in Audiovisual Services ITU-T (International\n        Telecommunication\
    \ Union - Telecommunication\n        Standardisation Sector) Recommendation H.221,\
    \ 1990.\n   [6]  Video codec for audiovisual services at p x 64 kbit/s\n     \
    \   ITU-T (International Telecommunication Union -\n        Telecommunication\
    \ Standardisation Sector) Recommendation\n        H.261, 1993.\n   [7]  Digital\
    \ Methods of Transmitting Television Information\n        ITU-R (International\
    \ Telecommunication Union -\n        Radiocommunication Standardisation Sector)\
    \ Recommendation\n        601, 1986.\n   [8]  M.A Sasse, U. Bilting, C-D Schulz,\
    \ T. Turletti, Remote\n        Seminars through MultiMedia Conferencing: Experiences\n\
    \        from the MICE project, Proc. INET'94/JENC5, Prague, June\n        1994,\
    \ pp. 251/1-251/8.\n   [9]  Steve MacCanne, Van Jacobson, VIC Videoconferencing\
    \ tool,\n        available by anonymous ftp from ee.lbl.gov in the\n        \"\
    conferencing/vic\" directory.\n"
