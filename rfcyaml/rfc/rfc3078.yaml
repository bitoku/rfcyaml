- title: __initial_text__
  contents:
  - '          Microsoft Point-To-Point Encryption (MPPE) Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a standard method for\n\
    \   transporting multi-protocol datagrams over point-to-point links.\n   The PPP\
    \ Compression Control Protocol provides a method to negotiate\n   and utilize\
    \ compression protocols over PPP encapsulated links.\n   This document describes\
    \ the use of the Microsoft Point to Point\n   Encryption (MPPE) to enhance the\
    \ confidentiality of PPP-encapsulated\n   packets.\n"
- title: Specification of Requirements
  contents:
  - "Specification of Requirements\n   In this document, the key words \"MAY\", \"\
    MUST, \"MUST NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD\
    \ NOT\" are to be interpreted as\n   described in [5].\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Microsoft Point to Point Encryption scheme is a means\
    \ of\n   representing Point to Point Protocol (PPP) packets in an encrypted\n\
    \   form.\n   MPPE uses the RSA RC4 [3] algorithm to provide data confidentiality.\n\
    \   The length of the session key to be used for initializing encryption\n   tables\
    \ can be negotiated.  MPPE currently supports 40-bit and 128-bit\n   session keys.\n\
    \   MPPE session keys are changed frequently; the exact frequency depends\n  \
    \ upon the options negotiated, but may be every packet.\n   MPPE is negotiated\
    \ within option 18 [4] in the Compression Control\n   Protocol.\n"
- title: 2.  Configuration Option Format
  contents:
  - "2.  Configuration Option Format\n   Description\n      The CCP Configuration\
    \ Option negotiates the use of MPPE on the\n      link.  By default (i.e., if\
    \ the negotiation of MPPE is not\n      attempted), no encryption is used.  If,\
    \ however, MPPE negotiation\n      is attempted and fails, the link SHOULD be\
    \ terminated.\n   A summary of the CCP Configuration Option format is shown below.\
    \  The\n   fields are transmitted from left to right.\n       0              \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      Type     |    Length     |        Supported Bits         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \        Supported Bits         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  Type\n      18\n   Length\n      6\n   Supported Bits\n      This field is\
    \ 4 octets, most significant octet first.\n         3                   2    \
    \               1\n       1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6\
    \ 5 4 3 2 1 0\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             |H|                               |M|S|L|D|     |C|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ 'C' bit is used by MPPC [4] and is not discussed further in this\n   memo. \
    \ The 'D' bit is obsolete; although some older peers may attempt\n   to negotiate\
    \ this option, it SHOULD NOT be accepted.  If the 'L' bit\n   is set (corresponding\
    \ to a value of 0x20 in the least significant\n   octet), this indicates the desire\
    \ of the sender to negotiate the use\n   of 40-bit session keys.  If the 'S' bit\
    \ is set (corresponding to a\n   value of 0x40 in the least significant octet),\
    \ this indicates the\n   desire of the sender to negotiate the use of 128-bit\
    \ session keys.\n   If the 'M' bit is set (corresponding to a value of 0x80 in\
    \ the least\n   significant octet), this indicates the desire of the sender to\n\
    \   negotiate the use of 56-bit session keys.  If the 'H' bit is set\n   (corresponding\
    \ to a value of 0x01 in the most significant octet),\n   this indicates that the\
    \ sender wishes to negotiate the use of\n   stateless mode, in which the session\
    \ key is changed after the\n   transmission of each packet (see section 10, below).\
    \  In the\n   following discussion, the 'S', 'M' and 'L' bits are sometimes\n\
    \   referred to collectively as \"encryption options\".\n   All other bits are\
    \ reserved and MUST be set to 0.\n"
- title: 2.1.  Option Negotiation
  contents:
  - "2.1.  Option Negotiation\n   MPPE options are negotiated as described in [2].\
    \  In particular, the\n   negotiation initiator SHOULD request all of the options\
    \ it supports.\n   The responder SHOULD NAK with a single encryption option (note\
    \ that\n   stateless mode may always be negotiated, independent of and in\n  \
    \ addition to an encryption option).  If the responder supports more\n   than\
    \ one encryption option in the set requested by the initiator, the\n   option\
    \ selected SHOULD be the \"strongest\" option offered.\n   Informally, the strength\
    \ of the MPPE encryption options may be\n   characterized as follows:\n      STRONGEST\n\
    \         128-bit encryption ('S' bit set)\n         56-bit  encryption ('M' bit\
    \ set)\n         40-bit  encryption ('L' bit set)\n      WEAKEST\n   This characterization\
    \ takes into account the generally accepted\n   strength of the cipher.\n   The\
    \ initiator SHOULD then either send another request containing the\n   same option(s)\
    \ as the responder's NAK or cancel the negotiation,\n   dropping the connection.\n"
- title: 3.  MPPE Packets
  contents:
  - "3.  MPPE Packets\n   Before any MPPE packets are transmitted, PPP MUST reach\
    \ the Network-\n   Layer Protocol phase and the CCP Control Protocol MUST reach\
    \ the\n   Opened state.\n   Exactly one MPPE datagram is encapsulated in the PPP\
    \ Information\n   field.  The PPP Protocol field indicates type 0x00FD for all\n\
    \   encrypted datagrams.\n   The maximum length of the MPPE datagram transmitted\
    \ over a PPP link\n   is the same as the maximum length of the Information field\
    \ of a PPP\n   encapsulated packet.\n   Only packets with PPP Protocol numbers\
    \ in the range 0x0021 to 0x00FA\n   are encrypted.  Other packets are not passed\
    \ thru the MPPE processor\n   and are sent with their original PPP Protocol numbers.\n\
    \      Padding\n         It is recommended that padding not be used with MPPE.\
    \  If the\n         sender uses padding it MUST negotiate the Self-Describing-\n\
    \         Padding Configuration option [10] during LCP phase and use\n       \
    \  self-describing pads.\n      Reliability and Sequencing\n         The MPPE\
    \ scheme does not require a reliable link.  Instead, it\n         relies on a\
    \ 12-bit coherency count in each packet to keep the\n         encryption tables\
    \ synchronized.  If stateless mode has not been\n         negotiated and the coherency\
    \ count in the received packet does\n         not match the expected count, the\
    \ receiver MUST send a CCP\n         Reset-Request packet to cause the resynchronization\
    \ of the RC4\n         tables.\n         MPPE expects packets to be delivered\
    \ in sequence.\n         MPPE MAY be used over a reliable link, as described in\
    \ \"PPP\n         Reliable Transmission\" [6], but this typically just adds\n\
    \         unnecessary overhead since only the coherency count is\n         required.\n\
    \      Data Expansion\n         The MPPE scheme does not expand or compress data.\
    \  The number\n         of octets input to and output from the MPPE processor\
    \ are the\n         same.\n"
- title: 3.1.  Packet Format
  contents:
  - "3.1.  Packet Format\n   A summary of the MPPE packet format is shown below. \
    \ The fields are\n   transmitted from left to right.\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          PPP Protocol         |A|B|C|D|    Coherency Count    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Encrypted Data...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      PPP Protocol\n\
    \         The PPP Protocol field is described in the Point-to-Point\n        \
    \ Protocol Encapsulation [1].\n         When MPPE is successfully negotiated by\
    \ the PPP Compression\n         Control Protocol, the value of this field is 0x00FD.\
    \  This\n         value MAY be compressed when Protocol-Field-Compression is\n\
    \         negotiated.\n      Bit A\n         This bit indicates that the encryption\
    \ tables were initialized\n         before this packet was generated.  The receiver\
    \ MUST re-\n         initialize its tables with the current session key before\n\
    \         decrypting this packet.  This bit is referred to as the FLUSHED\n  \
    \       bit in this document.  If the stateless option has been\n         negotiated,\
    \ this bit MUST be set on every encrypted packet.\n         Note that MPPC and\
    \ MPPE both recognize the FLUSHED bit;\n         therefore, if the stateless option\
    \ is negotiated, it applies to\n         both MPPC and MPPE.\n      Bit B\n  \
    \       This bit does not have any significance in MPPE.\n      Bit C\n      \
    \   This bit does not have any significance in MPPE.\n      Bit D\n         This\
    \ bit set to 1 indicates that the packet is encrypted.  This\n         bit set\
    \ to 0 means that this packet is not encrypted.\n      Coherency Count\n     \
    \    The coherency count is used to assure that the packets are sent\n       \
    \  in proper order and that no packet has been dropped.  It is a\n         monotonically\
    \ increasing counter which incremented by 1 for\n         each packet sent.  When\
    \ the counter reaches 4095 (0x0FFF), it\n         is reset to 0.\n      Encrypted\
    \ Data\n         The encrypted data begins with the protocol field.  For\n   \
    \      example, in case of an IP packet (0x0021 followed by an IP\n         header),\
    \ the MPPE processor will first encrypt the protocol\n         field and then\
    \ encrypt the IP header.\n         If the packet contains header compression,\
    \ the MPPE processor\n         is applied AFTER header compression is performed\
    \ and MUST be\n         applied to the compressed header as well.  For example,\
    \ if a\n         packet contained the protocol type 0x002D (for a compressed\n\
    \         TCP/IP header), the MPPE processor would first encrypt 0x002D\n    \
    \     and then it would encrypt the compressed Van-Jacobsen TCP/IP\n         header.\n\
    \      Implementation Note\n         If both MPPE and MPPC are negotiated on the\
    \ same link, the MPPE\n         processor MUST be invoked after the MPPC processor\
    \ by the\n         sender and the MPPE processor MUST be invoked before the MPPC\n\
    \         processor by the receiver.\n"
- title: 4.  Initial Session Keys
  contents:
  - "4.  Initial Session Keys\n   In the current implementation, initial session keys\
    \ are derived from\n   peer credentials; however, other derivation methods are\
    \ possible.\n   For example, some authentication methods (such as Kerberos [8]\
    \ and\n   TLS [9]) produce session keys as side effects of authentication;\n \
    \  these keys may be used by MPPE in the future.  For this reason, the\n   techniques\
    \ used to derive initial MPPE session keys are described in\n   separate documents.\n"
- title: 5.  Initializing RC4 Using a Session Key
  contents:
  - "5.  Initializing RC4 Using a Session Key\n   Once an initial session key has\
    \ been derived, the RC4 context is\n   initialized as follows:\n      rc4_key(RC4Key,\
    \ Length_Of_Key, Initial_Session_Key)\n"
- title: 6.  Encrypting Data
  contents:
  - "6.  Encrypting Data\n   Once initialized, data is encrypted using the following\
    \ function and\n   transmitted with the CCP and MPPE headers.\n      EncryptedData\
    \ = rc4(RC4Key, Length_Of_Data, Data)\n"
- title: 7.  Changing Keys
  contents:
  - '7.  Changing Keys

    '
- title: 7.1.  Stateless Mode Key Changes
  contents:
  - "7.1.  Stateless Mode Key Changes\n   If stateless encryption has been negotiated,\
    \ the session key changes\n   every time the coherency count changes; i.e., on\
    \ every packet.  In\n   stateless mode, the sender MUST change its key before\
    \ encrypting and\n   transmitting each packet and the receiver MUST change its\
    \ key after\n   receiving, but before decrypting, each packet (see \"Synchronization\"\
    ,\n   below).\n"
- title: 7.2.  Stateful Mode Key Changes
  contents:
  - "7.2.  Stateful Mode Key Changes\n   If stateful encryption has been negotiated,\
    \ the sender MUST change\n   its key before encrypting and transmitting any packet\
    \ in which the\n   low order octet of the coherency count equals 0xFF (the \"\
    flag\"\n   packet), and the receiver MUST change its key after receiving, but\n\
    \   before decrypting, a \"flag\" packet (see \"Synchronization\", below).\n"
- title: 7.3.  The MPPE Key Change Algorithm
  contents:
  - "7.3.  The MPPE Key Change Algorithm\n   The following method is used to change\
    \ keys:\n      /*\n       * SessionKeyLength is 8 for 40-bit keys, 16 for 128-bit\
    \ keys.\n       *\n       * SessionKey is the same as StartKey in the first call\
    \ for\n       * a given session.\n       */\n      void\n      GetNewKeyFromSHA(\n\
    \      IN  unsigned char *StartKey,\n      IN  unsigned char *SessionKey,\n  \
    \    IN  unsigned long SessionKeyLength\n      OUT unsigned char *InterimKey )\n\
    \      {\n         unsigned char  Digest[20];\n         ZeroMemory(Digest, 20);\n\
    \         /*\n          * SHAInit(), SHAUpdate() and SHAFinal()\n          * are\
    \ an implementation of the Secure\n          * Hash Algorithm [7]\n          */\n\
    \         SHAInit(Context);\n         SHAUpdate(Context, StartKey, SessionKeyLength);\n\
    \         SHAUpdate(Context, SHApad1, 40);\n         SHAUpdate(Context, SessionKey,\
    \ SessionKeyLength);\n         SHAUpdate(Context, SHApad2, 40);\n         SHAFinal(Context,\
    \ Digest);\n         MoveMemory(InterimKey, Digest, SessionKeyLength);\n     \
    \ }\n   The RC4 tables are re-initialized using the newly created interim key:\n\
    \      rc4_key(RC4Key, Length_Of_Key, InterimKey)\n   Finally, the interim key\
    \ is encrypted using the new tables to produce\n   a new session key:\n      SessionKey\
    \ = rc4(RC4Key, Length_Of_Key, InterimKey)\n   For 40-bit session keys the most\
    \ significant three octets of the new\n   session key are now set to 0xD1, 0x26\
    \ and 0x9E respectively; for 56-\n   bit keys, the most significant octet is set\
    \ to 0xD1.\n   Finally, the RC4 tables are re-initialized using the new session\
    \ key:\n      rc4_key(RC4Key, Length_Of_Key, SessionKey)\n"
- title: 8.  Synchronization
  contents:
  - "8.  Synchronization\n   Packets may be lost during transfer.  The following sections\
    \ describe\n   synchronization for both the stateless and stateful cases.\n"
- title: 8.1.  Stateless Synchronization
  contents:
  - "8.1.  Stateless Synchronization\n   If stateless encryption has been negotiated\
    \ and the coherency count\n   in the received packet (C1) is greater than the\
    \ coherency count in\n   the last packet previously received (C2), the receiver\
    \ MUST perform N\n   = C1 - C2 key changes before decrypting the packet, in order\
    \ to\n   ensure that its session key is synchronized with the session key of\n\
    \   the sender.  Normally, the value of N will be 1; however, if\n   intervening\
    \ packets have been lost, N may be greater than 1.  For\n   example, if C1 = 5\
    \ and C2 = 02 then N = 3 key changes are required.\n   Since the FLUSHED bit is\
    \ set on every packet if stateless encryption\n   was negotiated, the transmission\
    \ of CCP Reset-Request packets is not\n   required for synchronization.\n"
- title: 8.2.  Stateful Synchronization
  contents:
  - "8.2.  Stateful Synchronization\n   If stateful encryption has been negotiated,\
    \ the sender MUST change\n   its key before encrypting and transmitting any packet\
    \ in which the\n   low order octet of the coherency count equals 0xFF (the \"\
    flag\"\n   packet), and the receiver MUST change its key after receiving, but\n\
    \   before decrypting, a \"flag\" packet.  However, the \"flag\" packet may\n\
    \   be lost.  If this happens, the low order octet of the coherency count\n  \
    \ in the received packet will be less than that in the last packet\n   previously\
    \ received.  In this case, the receiver MUST perform a key\n   change before decrypting\
    \ the newly received packet, (since the sender\n   will have changed its key before\
    \ transmitting the packet), then send\n   a CCP Reset-Request packet (see below).\
    \  It is possible that 256 or\n   more consecutive packets could be lost; the\
    \ receiver SHOULD detect\n   this condition and perform the number of key changes\
    \ necessary to\n   resynchronize with the sender.\n   If packet loss is detected\
    \ while using stateful encryption, the\n   receiver MUST drop the packet and send\
    \ a CCP Reset-Request packet\n   without data.  After transmitting the CCP Reset-Request\
    \ packet, the\n   receiver SHOULD silently discard all packets until a packet\
    \ is\n   received with the FLUSHED bit set.  On receiving a packet with the\n\
    \   FLUSHED bit set, the receiver MUST set its coherency count to the one\n  \
    \ received in that packet and re-initialize its RC4 tables using the\n   current\
    \ session key:\n      rc4_key(RC4Key, Length_Of_Key, SessionKey)\n   When the\
    \ sender receives a CCP Reset-Request packet, it MUST re-\n   initialize its own\
    \ RC4 tables using the same method and set the\n   FLUSHED bit in the next packet\
    \ sent.  Thus synchronization is\n   achieved without a CCP Reset-Ack packet.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Because of the way that the RC4 tables are reinitialized\
    \ during\n   stateful synchronization, it is possible that two packets may be\n\
    \   encrypted using the same key.  For this reason, the stateful mode\n   SHOULD\
    \ NOT be used in lossy network environments (e.g., layer two\n   tunnels on the\
    \ Internet).\n   Since the MPPE negotiation is not integrity protected, an active\n\
    \   attacker could alter the strength of the keys used by modifying the\n   Supported\
    \ Bits field of the CCP Configuration Option packet.  The\n   effects of this\
    \ attack can be minimized through appropriate peer\n   configuration, however.\n\
    \   Peers MUST NOT transmit user data until the MPPE negotiation is\n   complete.\n\
    \   It is possible that an active attacker could modify the coherency\n   count\
    \ of a packet, causing the peers to lose synchronization.\n   An active denial-of-service\
    \ attack could be mounted by methodically\n   inverting the value of the 'D' bit\
    \ in the MPPE packet header.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [1]  Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , STD\n        51, RFC 1661, July 1994.\n   [2]  Rand, D., \"The PPP Compression\
    \ Control Protocol (CCP)\", RFC\n        1962, June 1996.\n   [3]  RC4 is a proprietary\
    \ encryption algorithm available under\n        license from RSA Data Security\
    \ Inc.  For licensing information,\n        contact:\n                  RSA Data\
    \ Security, Inc.\n                  100 Marine Parkway\n                  Redwood\
    \ City, CA 94065-1031\n   [4]  Pall, G., \"Microsoft Point-to-Point Compression\
    \ (MPPC)\n        Protocol\", RFC 2118, March 1997.\n   [5]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [6]  Rand, D., \"PPP Reliable Transmission\", RFC 1663,\
    \ July 1994.\n   [7]  \"Secure Hash Standard\", Federal Information Processing\
    \ Standards\n        Publication 180-1, National Institute of Standards and\n\
    \        Technology, April 1995.\n   [8]  Kohl, J. and C. Neuman \"The Kerberos\
    \ Network Authentication\n        System (V5)\", RFC 1510, September 1993.\n \
    \  [9]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n     \
    \   2246, January 1999.\n   [10] Simpson, W., Editor, \"PPP LCP Extensions\",\
    \ RFC 1570, January\n        1994.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Anthony Bell, Richard B. Ward, Terence Spies and Thomas\
    \ Dimitri, all\n   of Microsoft Corporation, significantly contributed to the\
    \ design and\n   development of MPPE.\n   Additional thanks to Robert Friend,\
    \ Joe Davies, Jody Terrill, Archie\n   Cobbs, Mark Deuser, and Jeff Haag, for\
    \ useful feedback.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Questions about this memo can be directed to:\n \
    \  Gurdeep Singh Pall\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond,\
    \ Washington 98052\n   USA\n   Phone: +1 425 882 8080\n   Fax:   +1 425 936 7329\n\
    \   EMail: gurdeep@microsoft.com\n   Glen Zorn\n   cisco Systems\n   500 108th\
    \ Avenue N.E.\n   Suite 500\n   Bellevue, Washington 98004\n   USA\n   Phone:\
    \ +1 425 438 8218\n   Fax:   +1 425 438 1848\n   EMail: gwz@cisco.com\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
