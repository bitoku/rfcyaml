- contents:
  - '                           The GeoJSON Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   GeoJSON is a geospatial data interchange format based on JavaScript\n
    \  Object Notation (JSON).  It defines several types of JSON objects and\n   the
    manner in which they are combined to represent data about\n   geographic features,
    their properties, and their spatial extents.\n   GeoJSON uses a geographic coordinate
    reference system, World Geodetic\n   System 1984, and units of decimal degrees.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7946.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Conventions Used in This Document . . . . . . . . . . .
    .   4\n     1.3.  Specification of GeoJSON  . . . . . . . . . . . . . . . .   4\n
    \    1.4.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   5\n     1.5.
    \ Example . . . . . . . . . . . . . . . . . . . . . . . . .   5\n   2.  GeoJSON
    Text  . . . . . . . . . . . . . . . . . . . . . . . .   6\n   3.  GeoJSON Object
    \ . . . . . . . . . . . . . . . . . . . . . . .   6\n     3.1.  Geometry Object
    . . . . . . . . . . . . . . . . . . . . .   7\n       3.1.1.  Position  . . .
    . . . . . . . . . . . . . . . . . . .   7\n       3.1.2.  Point . . . . . . .
    . . . . . . . . . . . . . . . . .   8\n       3.1.3.  MultiPoint  . . . . . .
    . . . . . . . . . . . . . . .   8\n       3.1.4.  LineString  . . . . . . . .
    . . . . . . . . . . . . .   8\n       3.1.5.  MultiLineString . . . . . . . .
    . . . . . . . . . . .   8\n       3.1.6.  Polygon . . . . . . . . . . . . . .
    . . . . . . . . .   9\n       3.1.7.  MultiPolygon  . . . . . . . . . . . . .
    . . . . . . .   9\n       3.1.8.  GeometryCollection  . . . . . . . . . . . .
    . . . . .   9\n       3.1.9.  Antimeridian Cutting  . . . . . . . . . . . . .
    . . .  10\n       3.1.10. Uncertainty and Precision . . . . . . . . . . . . .
    .  11\n     3.2.  Feature Object  . . . . . . . . . . . . . . . . . . . . .  11\n
    \    3.3.  FeatureCollection Object  . . . . . . . . . . . . . . . .  12\n   4.
    \ Coordinate Reference System . . . . . . . . . . . . . . . . .  12\n   5.  Bounding
    Box  . . . . . . . . . . . . . . . . . . . . . . . .  12\n     5.1.  The Connecting
    Lines  . . . . . . . . . . . . . . . . . .  14\n     5.2.  The Antimeridian  .
    . . . . . . . . . . . . . . . . . . .  14\n     5.3.  The Poles . . . . . . .
    . . . . . . . . . . . . . . . . .  14\n   6.  Extending GeoJSON . . . . . . .
    . . . . . . . . . . . . . . .  15\n     6.1.  Foreign Members . . . . . . . .
    . . . . . . . . . . . . .  15\n   7.  GeoJSON Types Are Not Extensible  . . .
    . . . . . . . . . . .  16\n     7.1.  Semantics of GeoJSON Members and Types Are
    Not Changeable  16\n   8.  Versioning  . . . . . . . . . . . . . . . . . . . .
    . . . . .  17\n   9.  Mapping 'geo' URIs  . . . . . . . . . . . . . . . . . .
    . . .  17\n   10. Security Considerations . . . . . . . . . . . . . . . . . .
    .  18\n   11. Interoperability Considerations . . . . . . . . . . . . . . .  18\n
    \    11.1.  I-JSON . . . . . . . . . . . . . . . . . . . . . . . . .  18\n     11.2.
    \ Coordinate Precision . . . . . . . . . . . . . . . . . .  18\n   12. IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  19\n   13. References  . . . . . .
    . . . . . . . . . . . . . . . . . . .  20\n     13.1.  Normative References .
    . . . . . . . . . . . . . . . . .  20\n     13.2.  Informative References . .
    . . . . . . . . . . . . . . .  21\n   Appendix A.  Geometry Examples  . . . .
    . . . . . . . . . . . . .  22\n     A.1.  Points  . . . . . . . . . . . . . .
    . . . . . . . . . . .  22\n     A.2.  LineStrings . . . . . . . . . . . . . .
    . . . . . . . . .  22\n     A.3.  Polygons  . . . . . . . . . . . . . . . . .
    . . . . . . .  23\n     A.4.  MultiPoints . . . . . . . . . . . . . . . . . .
    . . . . .  24\n     A.5.  MultiLineStrings  . . . . . . . . . . . . . . . . .
    . . .  24\n     A.6.  MultiPolygons . . . . . . . . . . . . . . . . . . . . .
    .  25\n     A.7.  GeometryCollections . . . . . . . . . . . . . . . . . . .  26\n
    \  Appendix B.  Changes from the Pre-IETF GeoJSON Format\n                Specification
    \ . . . . . . . . . . . . . . . . . . .  26\n     B.1.  Normative Changes . .
    . . . . . . . . . . . . . . . . . .  26\n     B.2.  Informative Changes . . .
    . . . . . . . . . . . . . . . .  27\n   Appendix C.  GeoJSON Text Sequences .
    . . . . . . . . . . . . . .  27\n   Acknowledgements  . . . . . . . . . . . .
    . . . . . . . . . . . .  27\n   Authors' Addresses  . . . . . . . . . . . . .
    . . . . . . . . . .  28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   GeoJSON is a format for encoding a variety of geographic
    data\n   structures using JavaScript Object Notation (JSON) [RFC7159].  A\n   GeoJSON
    object may represent a region of space (a Geometry), a\n   spatially bounded entity
    (a Feature), or a list of Features (a\n   FeatureCollection).  GeoJSON supports
    the following geometry types:\n   Point, LineString, Polygon, MultiPoint, MultiLineString,\n
    \  MultiPolygon, and GeometryCollection.  Features in GeoJSON contain a\n   Geometry
    object and additional properties, and a FeatureCollection\n   contains a list
    of Features.\n   The format is concerned with geographic data in the broadest
    sense;\n   anything with qualities that are bounded in geographical space might\n
    \  be a Feature whether or not it is a physical structure.  The concepts\n   in
    GeoJSON are not new; they are derived from preexisting open\n   geographic information
    system standards and have been streamlined to\n   better suit web application
    development using JSON.\n   GeoJSON comprises the seven concrete geometry types
    defined in the\n   OpenGIS Simple Features Implementation Specification for SQL
    [SFSQL]:\n   0-dimensional Point and MultiPoint; 1-dimensional curve LineString\n
    \  and MultiLineString; 2-dimensional surface Polygon and MultiPolygon;\n   and
    the heterogeneous GeometryCollection.  GeoJSON representations of\n   instances
    of these geometry types are analogous to the well-known\n   binary (WKB) and well-known
    text (WKT) representations described in\n   that same specification.\n   GeoJSON
    also comprises the types Feature and FeatureCollection.\n   Feature objects in
    GeoJSON contain a Geometry object with one of the\n   above geometry types and
    additional members.  A FeatureCollection\n   object contains an array of Feature
    objects.  This structure is\n   analogous to that of the Web Feature Service (WFS)
    response to\n   GetFeatures requests specified in [WFSv1] or to a Keyhole Markup\n
    \  Language (KML) Folder of Placemarks [KMLv2.2].  Some implementations\n   of
    the WFS specification also provide GeoJSON-formatted responses to\n   GetFeature
    requests, but there is no particular service model or\n   Feature type ontology
    implied in the GeoJSON format specification.\n   Since its initial publication
    in 2008 [GJ2008], the GeoJSON format\n   specification has steadily grown in popularity.
    \ It is widely used in\n   JavaScript web-mapping libraries, JSON-based document
    databases, and\n   web APIs.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   [RFC2119].\n"
    title: 1.1.  Requirements Language
  - contents:
    - "1.2.  Conventions Used in This Document\n   The ordering of the members of
      any JSON object defined in this\n   document MUST be considered irrelevant,
      as specified by [RFC7159].\n   Some examples use the combination of a JavaScript
      single-line comment\n   (//) followed by an ellipsis (...) as placeholder notation
      for\n   content deemed irrelevant by the authors.  These placeholders must of\n
      \  course be deleted or otherwise replaced, before attempting to\n   validate
      the corresponding JSON code example.\n   Whitespace is used in the examples
      inside this document to help\n   illustrate the data structures, but it is not
      required.  Unquoted\n   whitespace is not significant in JSON.\n"
    title: 1.2.  Conventions Used in This Document
  - contents:
    - "1.3.  Specification of GeoJSON\n   This document supersedes the original GeoJSON
      format specification\n   [GJ2008].\n"
    title: 1.3.  Specification of GeoJSON
  - contents:
    - "1.4.  Definitions\n   o  JavaScript Object Notation (JSON), and the terms object,
      member,\n      name, value, array, number, true, false, and null, are to be\n
      \     interpreted as defined in [RFC7159].\n   o  Inside this document, the
      term \"geometry type\" refers to seven\n      case-sensitive strings: \"Point\",
      \"MultiPoint\", \"LineString\",\n      \"MultiLineString\", \"Polygon\", \"MultiPolygon\",
      and\n      \"GeometryCollection\".\n   o  As another shorthand notation, the
      term \"GeoJSON types\" refers to\n      nine case-sensitive strings: \"Feature\",
      \"FeatureCollection\", and\n      the geometry types listed above.\n   o  The
      word \"Collection\" in \"FeatureCollection\" and\n      \"GeometryCollection\"
      does not have any significance for the\n      semantics of array members.  The
      \"features\" and \"geometries\"\n      members, respectively, of these objects
      are standard ordered JSON\n      arrays, not unordered sets.\n"
    title: 1.4.  Definitions
  - contents:
    - "1.5.  Example\n   A GeoJSON FeatureCollection:\n   {\n       \"type\": \"FeatureCollection\",\n
      \      \"features\": [{\n           \"type\": \"Feature\",\n           \"geometry\":
      {\n               \"type\": \"Point\",\n               \"coordinates\": [102.0,
      0.5]\n           },\n           \"properties\": {\n               \"prop0\":
      \"value0\"\n           }\n       }, {\n           \"type\": \"Feature\",\n           \"geometry\":
      {\n               \"type\": \"LineString\",\n               \"coordinates\":
      [\n                   [102.0, 0.0],\n                   [103.0, 1.0],\n                   [104.0,
      0.0],\n                   [105.0, 1.0]\n               ]\n           },\n           \"properties\":
      {\n               \"prop0\": \"value0\",\n               \"prop1\": 0.0\n           }\n
      \      }, {\n           \"type\": \"Feature\",\n           \"geometry\": {\n
      \              \"type\": \"Polygon\",\n               \"coordinates\": [\n                   [\n
      \                      [100.0, 0.0],\n                       [101.0, 0.0],\n
      \                      [101.0, 1.0],\n                       [100.0, 1.0],\n
      \                      [100.0, 0.0]\n                   ]\n               ]\n
      \          },\n           \"properties\": {\n               \"prop0\": \"value0\",\n
      \              \"prop1\": {\n                   \"this\": \"that\"\n               }\n
      \          }\n       }]\n   }\n"
    title: 1.5.  Example
  title: 1.  Introduction
- contents:
  - "2.  GeoJSON Text\n   A GeoJSON text is a JSON text and consists of a single GeoJSON\n
    \  object.\n"
  title: 2.  GeoJSON Text
- contents:
  - "3.  GeoJSON Object\n   A GeoJSON object represents a Geometry, Feature, or collection
    of\n   Features.\n   o  A GeoJSON object is a JSON object.\n   o  A GeoJSON object
    has a member with the name \"type\".  The value of\n      the member MUST be one
    of the GeoJSON types.\n   o  A GeoJSON object MAY have a \"bbox\" member, the
    value of which MUST\n      be a bounding box array (see Section 5).\n   o  A GeoJSON
    object MAY have other members (see Section 6).\n"
  - contents:
    - "3.1.  Geometry Object\n   A Geometry object represents points, curves, and
      surfaces in\n   coordinate space.  Every Geometry object is a GeoJSON object
      no\n   matter where it occurs in a GeoJSON text.\n   o  The value of a Geometry
      object's \"type\" member MUST be one of the\n      seven geometry types (see
      Section 1.4).\n   o  A GeoJSON Geometry object of any type other than\n      \"GeometryCollection\"
      has a member with the name \"coordinates\".\n      The value of the \"coordinates\"
      member is an array.  The structure\n      of the elements in this array is determined
      by the type of\n      geometry.  GeoJSON processors MAY interpret Geometry objects
      with\n      empty \"coordinates\" arrays as null objects.\n"
    - contents:
      - "3.1.1.  Position\n   A position is the fundamental geometry construct.  The
        \"coordinates\"\n   member of a Geometry object is composed of either:\n   o
        \ one position in the case of a Point geometry,\n   o  an array of positions
        in the case of a LineString or MultiPoint\n      geometry,\n   o  an array
        of LineString or linear ring (see Section 3.1.6)\n      coordinates in the
        case of a Polygon or MultiLineString geometry,\n      or\n   o  an array of
        Polygon coordinates in the case of a MultiPolygon\n      geometry.\n   A position
        is an array of numbers.  There MUST be two or more\n   elements.  The first
        two elements are longitude and latitude, or\n   easting and northing, precisely
        in that order and using decimal\n   numbers.  Altitude or elevation MAY be
        included as an optional third\n   element.\n   Implementations SHOULD NOT
        extend positions beyond three elements\n   because the semantics of extra
        elements are unspecified and\n   ambiguous.  Historically, some implementations
        have used a fourth\n   element to carry a linear referencing measure (sometimes
        denoted as\n   \"M\") or a numerical timestamp, but in most situations a parser
        will\n   not be able to properly interpret these values.  The interpretation\n
        \  and meaning of additional elements is beyond the scope of this\n   specification,
        and additional elements MAY be ignored by parsers.\n   A line between two
        positions is a straight Cartesian line, the\n   shortest line between those
        two points in the coordinate reference\n   system (see Section 4).\n   In
        other words, every point on a line that does not cross the\n   antimeridian
        between a point (lon0, lat0) and (lon1, lat1) can be\n   calculated as\n   F(lon,
        lat) = (lon0 + (lon1 - lon0) * t, lat0 + (lat1 - lat0) * t)\n   with t being
        a real number greater than or equal to 0 and smaller\n   than or equal to
        1.  Note that this line may markedly differ from the\n   geodesic path along
        the curved surface of the reference ellipsoid.\n   The same applies to the
        optional height element with the proviso that\n   the direction of the height
        is as specified in the coordinate\n   reference system.\n   Note that, again,
        this does not mean that a surface with equal height\n   follows, for example,
        the curvature of a body of water.  Nor is a\n   surface of equal height perpendicular
        to a plumb line.\n   Examples of positions and geometries are provided in
        Appendix A,\n   \"Geometry Examples\".\n"
      title: 3.1.1.  Position
    - contents:
      - "3.1.2.  Point\n   For type \"Point\", the \"coordinates\" member is a single
        position.\n"
      title: 3.1.2.  Point
    - contents:
      - "3.1.3.  MultiPoint\n   For type \"MultiPoint\", the \"coordinates\" member
        is an array of\n   positions.\n"
      title: 3.1.3.  MultiPoint
    - contents:
      - "3.1.4.  LineString\n   For type \"LineString\", the \"coordinates\" member
        is an array of two or\n   more positions.\n"
      title: 3.1.4.  LineString
    - contents:
      - "3.1.5.  MultiLineString\n   For type \"MultiLineString\", the \"coordinates\"
        member is an array of\n   LineString coordinate arrays.\n"
      title: 3.1.5.  MultiLineString
    - contents:
      - "3.1.6.  Polygon\n   To specify a constraint specific to Polygons, it is useful
        to\n   introduce the concept of a linear ring:\n   o  A linear ring is a closed
        LineString with four or more positions.\n   o  The first and last positions
        are equivalent, and they MUST contain\n      identical values; their representation
        SHOULD also be identical.\n   o  A linear ring is the boundary of a surface
        or the boundary of a\n      hole in a surface.\n   o  A linear ring MUST follow
        the right-hand rule with respect to the\n      area it bounds, i.e., exterior
        rings are counterclockwise, and\n      holes are clockwise.\n   Note: the
        [GJ2008] specification did not discuss linear ring winding\n   order.  For
        backwards compatibility, parsers SHOULD NOT reject\n   Polygons that do not
        follow the right-hand rule.\n   Though a linear ring is not explicitly represented
        as a GeoJSON\n   geometry type, it leads to a canonical formulation of the
        Polygon\n   geometry type definition as follows:\n   o  For type \"Polygon\",
        the \"coordinates\" member MUST be an array of\n      linear ring coordinate
        arrays.\n   o  For Polygons with more than one of these rings, the first MUST
        be\n      the exterior ring, and any others MUST be interior rings.  The\n
        \     exterior ring bounds the surface, and the interior rings (if\n      present)
        bound holes within the surface.\n"
      title: 3.1.6.  Polygon
    - contents:
      - "3.1.7.  MultiPolygon\n   For type \"MultiPolygon\", the \"coordinates\" member
        is an array of\n   Polygon coordinate arrays.\n"
      title: 3.1.7.  MultiPolygon
    - contents:
      - "3.1.8.  GeometryCollection\n   A GeoJSON object with type \"GeometryCollection\"
        is a Geometry object.\n   A GeometryCollection has a member with the name
        \"geometries\".  The\n   value of \"geometries\" is an array.  Each element
        of this array is a\n   GeoJSON Geometry object.  It is possible for this array
        to be empty.\n   Unlike the other geometry types described above, a GeometryCollection\n
        \  can be a heterogeneous composition of smaller Geometry objects.  For\n
        \  example, a Geometry object in the shape of a lowercase roman \"i\" can\n
        \  be composed of one point and one LineString.\n   GeometryCollections have
        a different syntax from single type Geometry\n   objects (Point, LineString,
        and Polygon) and homogeneously typed\n   multipart Geometry objects (MultiPoint,
        MultiLineString, and\n   MultiPolygon) but have no different semantics.  Although
        a\n   GeometryCollection object has no \"coordinates\" member, it does have\n
        \  coordinates: the coordinates of all its parts belong to the\n   collection.
        \ The \"geometries\" member of a GeometryCollection\n   describes the parts
        of this composition.  Implementations SHOULD NOT\n   apply any additional
        semantics to the \"geometries\" array.\n   To maximize interoperability, implementations
        SHOULD avoid nested\n   GeometryCollections.  Furthermore, GeometryCollections
        composed of a\n   single part or a number of parts of a single type SHOULD
        be avoided\n   when that single part or a single object of multipart type\n
        \  (MultiPoint, MultiLineString, or MultiPolygon) could be used instead.\n"
      title: 3.1.8.  GeometryCollection
    - contents:
      - "3.1.9.  Antimeridian Cutting\n   In representing Features that cross the
        antimeridian,\n   interoperability is improved by modifying their geometry.
        \ Any\n   geometry that crosses the antimeridian SHOULD be represented by\n
        \  cutting it in two such that neither part's representation crosses the\n
        \  antimeridian.\n   For example, a line extending from 45 degrees N, 170
        degrees E across\n   the antimeridian to 45 degrees N, 170 degrees W should
        be cut in two\n   and represented as a MultiLineString.\n   {\n       \"type\":
        \"MultiLineString\",\n       \"coordinates\": [\n           [\n               [170.0,
        45.0], [180.0, 45.0]\n           ], [\n               [-180.0, 45.0], [-170.0,
        45.0]\n           ]\n       ]\n   }\n   A rectangle extending from 40 degrees
        N, 170 degrees E across the\n   antimeridian to 50 degrees N, 170 degrees
        W should be cut in two and\n   represented as a MultiPolygon.\n   {\n       \"type\":
        \"MultiPolygon\",\n       \"coordinates\": [\n           [\n               [\n
        \                  [180.0, 40.0], [180.0, 50.0], [170.0, 50.0],\n                   [170.0,
        40.0], [180.0, 40.0]\n               ]\n           ],\n           [\n               [\n
        \                  [-170.0, 40.0], [-170.0, 50.0], [-180.0, 50.0],\n                   [-180.0,
        40.0], [-170.0, 40.0]\n               ]\n           ]\n       ]\n   }\n"
      title: 3.1.9.  Antimeridian Cutting
    - contents:
      - "3.1.10.  Uncertainty and Precision\n   As in [RFC5870], the number of digits
        of the values in coordinate\n   positions MUST NOT be interpreted as an indication
        to the level of\n   uncertainty.\n"
      title: 3.1.10.  Uncertainty and Precision
    title: 3.1.  Geometry Object
  - contents:
    - "3.2.  Feature Object\n   A Feature object represents a spatially bounded thing.
      \ Every Feature\n   object is a GeoJSON object no matter where it occurs in
      a GeoJSON\n   text.\n   o  A Feature object has a \"type\" member with the value
      \"Feature\".\n   o  A Feature object has a member with the name \"geometry\".
      \ The value\n      of the geometry member SHALL be either a Geometry object
      as\n      defined above or, in the case that the Feature is unlocated, a\n      JSON
      null value.\n   o  A Feature object has a member with the name \"properties\".
      \ The\n      value of the properties member is an object (any JSON object or
      a\n      JSON null value).\n   o  If a Feature has a commonly used identifier,
      that identifier\n      SHOULD be included as a member of the Feature object
      with the name\n      \"id\", and the value of this member is either a JSON string
      or\n      number.\n"
    title: 3.2.  Feature Object
  - contents:
    - "3.3.  FeatureCollection Object\n   A GeoJSON object with the type \"FeatureCollection\"
      is a\n   FeatureCollection object.  A FeatureCollection object has a member\n
      \  with the name \"features\".  The value of \"features\" is a JSON array.\n
      \  Each element of the array is a Feature object as defined above.  It\n   is
      possible for this array to be empty.\n"
    title: 3.3.  FeatureCollection Object
  title: 3.  GeoJSON Object
- contents:
  - "4.  Coordinate Reference System\n   The coordinate reference system for all GeoJSON
    coordinates is a\n   geographic coordinate reference system, using the World Geodetic\n
    \  System 1984 (WGS 84) [WGS84] datum, with longitude and latitude units\n   of
    decimal degrees.  This is equivalent to the coordinate reference\n   system identified
    by the Open Geospatial Consortium (OGC) URN\n   urn:ogc:def:crs:OGC::CRS84.  An
    OPTIONAL third-position element SHALL\n   be the height in meters above or below
    the WGS 84 reference\n   ellipsoid.  In the absence of elevation values, applications\n
    \  sensitive to height or depth SHOULD interpret positions as being at\n   local
    ground or sea level.\n   Note: the use of alternative coordinate reference systems
    was\n   specified in [GJ2008], but it has been removed from this version of\n
    \  the specification because the use of different coordinate reference\n   systems
    -- especially in the manner specified in [GJ2008] -- has\n   proven to have interoperability
    issues.  In general, GeoJSON\n   processing software is not expected to have access
    to coordinate\n   reference system databases or to have network access to coordinate\n
    \  reference system transformation parameters.  However, where all\n   involved
    parties have a prior arrangement, alternative coordinate\n   reference systems
    can be used without risk of data being\n   misinterpreted.\n"
  title: 4.  Coordinate Reference System
- contents:
  - "5.  Bounding Box\n   A GeoJSON object MAY have a member named \"bbox\" to include\n
    \  information on the coordinate range for its Geometries, Features, or\n   FeatureCollections.
    \ The value of the bbox member MUST be an array of\n   length 2*n where n is the
    number of dimensions represented in the\n   contained geometries, with all axes
    of the most southwesterly point\n   followed by all axes of the more northeasterly
    point.  The axes order\n   of a bbox follows the axes order of geometries.\n   The
    \"bbox\" values define shapes with edges that follow lines of\n   constant longitude,
    latitude, and elevation.\n   Example of a 2D bbox member on a Feature:\n   {\n
    \      \"type\": \"Feature\",\n       \"bbox\": [-10.0, -10.0, 10.0, 10.0],\n
    \      \"geometry\": {\n           \"type\": \"Polygon\",\n           \"coordinates\":
    [\n               [\n                   [-10.0, -10.0],\n                   [10.0,
    -10.0],\n                   [10.0, 10.0],\n                   [-10.0, -10.0]\n
    \              ]\n           ]\n       }\n       //...\n   }\n   Example of a
    2D bbox member on a FeatureCollection:\n   {\n       \"type\": \"FeatureCollection\",\n
    \      \"bbox\": [100.0, 0.0, 105.0, 1.0],\n       \"features\": [\n       //...\n
    \      ]\n   }\n   Example of a 3D bbox member with a depth of 100 meters:\n   {\n
    \      \"type\": \"FeatureCollection\",\n       \"bbox\": [100.0, 0.0, -100.0,
    105.0, 1.0, 0.0],\n       \"features\": [\n       //...\n       ]\n   }\n"
  - contents:
    - "5.1.  The Connecting Lines\n   The four lines of the bounding box are defined
      fully within the\n   coordinate reference system; that is, for a box bounded
      by the values\n   \"west\", \"south\", \"east\", and \"north\", every point
      on the northernmost\n   line can be expressed as\n   (lon, lat) = (west + (east
      - west) * t, north)\n   with 0 <= t <= 1.\n"
    title: 5.1.  The Connecting Lines
  - contents:
    - "5.2.  The Antimeridian\n   Consider a set of point Features within the Fiji
      archipelago,\n   straddling the antimeridian between 16 degrees S and 20 degrees
      S.\n   The southwest corner of the box containing these Features is at 20\n
      \  degrees S and 177 degrees E, and the northwest corner is at 16\n   degrees
      S and 178 degrees W.  The antimeridian-spanning GeoJSON\n   bounding box for
      this FeatureCollection is\n   \"bbox\": [177.0, -20.0, -178.0, -16.0]\n   and
      covers 5 degrees of longitude.\n   The complementary bounding box for the same
      latitude band, not\n   crossing the antimeridian, is\n   \"bbox\": [-178.0,
      -20.0, 177.0, -16.0]\n   and covers 355 degrees of longitude.\n   The latitude
      of the northeast corner is always greater than the\n   latitude of the southwest
      corner, but bounding boxes that cross the\n   antimeridian have a northeast
      corner longitude that is less than the\n   longitude of the southwest corner.\n"
    title: 5.2.  The Antimeridian
  - contents:
    - "5.3.  The Poles\n   A bounding box that contains the North Pole extends from
      a southwest\n   corner of \"minlat\" degrees N, 180 degrees W to a northeast
      corner of\n   90 degrees N, 180 degrees E.  Viewed on a globe, this bounding
      box\n   approximates a spherical cap bounded by the \"minlat\" circle of\n   latitude.\n
      \  \"bbox\": [-180.0, minlat, 180.0, 90.0]\n   A bounding box that contains
      the South Pole extends from a southwest\n   corner of 90 degrees S, 180 degrees
      W to a northeast corner of\n   \"maxlat\" degrees S, 180 degrees E.\n   \"bbox\":
      [-180.0, -90.0, 180.0, maxlat]\n   A bounding box that just touches the North
      Pole and forms a slice of\n   an approximate spherical cap when viewed on a
      globe extends from a\n   southwest corner of \"minlat\" degrees N and \"westlon\"
      degrees E to a\n   northeast corner of 90 degrees N and \"eastlon\" degrees
      E.\n   \"bbox\": [westlon, minlat, eastlon, 90.0]\n   Similarly, a bounding
      box that just touches the South Pole and forms\n   a slice of an approximate
      spherical cap when viewed on a globe has\n   the following representation in
      GeoJSON.\n   \"bbox\": [westlon, -90.0, eastlon, maxlat]\n   Implementers MUST
      NOT use latitude values greater than 90 or less\n   than -90 to imply an extent
      that is not a spherical cap.\n"
    title: 5.3.  The Poles
  title: 5.  Bounding Box
- contents:
  - '6.  Extending GeoJSON

    '
  - contents:
    - "6.1.  Foreign Members\n   Members not described in this specification (\"foreign
      members\") MAY\n   be used in a GeoJSON document.  Note that support for foreign
      members\n   can vary across implementations, and no normative processing model\n
      \  for foreign members is defined.  Accordingly, implementations that\n   rely
      too heavily on the use of foreign members might experience\n   reduced interoperability
      with other implementations.\n   For example, in the (abridged) Feature object
      shown below\n   {\n       \"type\": \"Feature\",\n       \"id\": \"f1\",\n       \"geometry\":
      {...},\n       \"properties\": {...},\n       \"title\": \"Example Feature\"\n
      \  }\n   the name/value pair of \"title\": \"Example Feature\" is a foreign\n
      \  member.  When the value of a foreign member is an object, all the\n   descendant
      members of that object are themselves foreign members.\n   GeoJSON semantics
      do not apply to foreign members and their\n   descendants, regardless of their
      names and values.  For example, in\n   the (abridged) Feature object below\n
      \  {\n       \"type\": \"Feature\",\n       \"id\": \"f2\",\n       \"geometry\":
      {...},\n       \"properties\": {...},\n       \"centerline\": {\n           \"type\":
      \"LineString\",\n           \"coordinates\": [\n               [-170, 10],\n
      \              [170, 11]\n           ]\n       }\n   }\n   the \"centerline\"
      member is not a GeoJSON Geometry object.\n"
    title: 6.1.  Foreign Members
  title: 6.  Extending GeoJSON
- contents:
  - "7.  GeoJSON Types Are Not Extensible\n   Implementations MUST NOT extend the
    fixed set of GeoJSON types:\n   FeatureCollection, Feature, Point, LineString,
    MultiPoint, Polygon,\n   MultiLineString, MultiPolygon, and GeometryCollection.\n"
  - contents:
    - "7.1.  Semantics of GeoJSON Members and Types Are Not Changeable\n   Implementations
      MUST NOT change the semantics of GeoJSON members and\n   types.\n   The GeoJSON
      \"coordinates\" and \"geometries\" members define Geometry\n   objects.  FeatureCollection
      and Feature objects, respectively, MUST\n   NOT contain a \"coordinates\" or
      \"geometries\" member.\n   The GeoJSON \"geometry\" and \"properties\" members
      define a Feature\n   object.  FeatureCollection and Geometry objects, respectively,
      MUST\n   NOT contain a \"geometry\" or \"properties\" member.\n   The GeoJSON
      \"features\" member defines a FeatureCollection object.\n   Feature and Geometry
      objects, respectively, MUST NOT contain a\n   \"features\" member.\n"
    title: 7.1.  Semantics of GeoJSON Members and Types Are Not Changeable
  title: 7.  GeoJSON Types Are Not Extensible
- contents:
  - "8.  Versioning\n   The GeoJSON format can be extended as defined here, but no
    explicit\n   versioning scheme is defined.  A specification that alters the\n
    \  semantics of GeoJSON members or otherwise modifies the format does\n   not
    create a new version of this format; instead, it defines an\n   entirely new format
    that MUST NOT be identified as GeoJSON.\n"
  title: 8.  Versioning
- contents:
  - "9.  Mapping 'geo' URIs\n   'geo' URIs [RFC5870] identify geographic locations
    and precise (not\n   uncertain) locations can be mapped to GeoJSON Geometry objects.\n
    \  For this section, as in [RFC5870], \"lat\", \"lon\", \"alt\", and \"unc\" are\n
    \  placeholders for 'geo' URI latitude, longitude, altitude, and\n   uncertainty
    values, respectively.\n   A 'geo' URI with two coordinates and an uncertainty
    ('u') parameter\n   that is absent or zero, and a GeoJSON Point geometry may be
    mapped to\n   each other.  A GeoJSON Point is always converted to a 'geo' URI
    that\n   has no uncertainty parameter.\n   'geo' URI:\n   geo:lat,lon\n   GeoJSON:\n
    \  {\"type\": \"Point\", \"coordinates\": [lon, lat]}\n   The mapping between
    'geo' URIs and GeoJSON Points that specify\n   elevation is shown below.\n   'geo'
    URI:\n   geo:lat,lon,alt\n   GeoJSON:\n   {\"type\": \"Point\", \"coordinates\":
    [lon, lat, alt]}\n   GeoJSON has no concept of uncertainty; imprecise or uncertain
    'geo'\n   URIs thus cannot be mapped to GeoJSON geometries.\n"
  title: 9.  Mapping 'geo' URIs
- contents:
  - "10.  Security Considerations\n   GeoJSON shares security issues common to all
    JSON content types.  See\n   [RFC7159], Section 12 for additional information.
    \ GeoJSON does not\n   provide executable content.\n   GeoJSON does not provide
    privacy or integrity services.  If sensitive\n   data requires privacy or integrity
    protection, those must be provided\n   by the transport -- for example, Transport
    Layer Security (TLS) or\n   HTTPS.  There will be cases in which stored data need
    protection,\n   which is out of scope for this document.\n   As with other geographic
    data formats, e.g., [KMLv2.2], providing\n   details about the locations of sensitive
    persons, animals, habitats,\n   and facilities can expose them to unauthorized
    tracking or injury.\n   Data providers should recognize the risk of inadvertently
    identifying\n   individuals if locations in anonymized datasets are not adequately\n
    \  skewed or not sufficiently fuzzed [Sweeney] and recognize that the\n   effectiveness
    of location obscuration is limited by a number of\n   factors and is unlikely
    to be an effective defense against a\n   determined attack [RFC6772].\n"
  title: 10.  Security Considerations
- contents:
  - '11.  Interoperability Considerations

    '
  - contents:
    - "11.1.  I-JSON\n   GeoJSON texts should follow the constraints of Internet JSON
      (I-JSON)\n   [RFC7493] for maximum interoperability.\n"
    title: 11.1.  I-JSON
  - contents:
    - "11.2.  Coordinate Precision\n   The size of a GeoJSON text in bytes is a major
      interoperability\n   consideration, and precision of coordinate values has a
      large impact\n   on the size of texts.  A GeoJSON text containing many detailed\n
      \  Polygons can be inflated almost by a factor of two by increasing\n   coordinate
      precision from 6 to 15 decimal places.  For geographic\n   coordinates with
      units of degrees, 6 decimal places (a default common\n   in, e.g., sprintf)
      amounts to about 10 centimeters, a precision well\n   within that of current
      GPS systems.  Implementations should consider\n   the cost of using a greater
      precision than necessary.\n   Furthermore, the WGS 84 [WGS84] datum is a relatively
      coarse\n   approximation of the geoid, with the height varying by up to 5 m
      (but\n   generally between 2 and 3 meters) higher or lower relative to a\n   surface
      parallel to Earth's mean sea level.\n"
    title: 11.2.  Coordinate Precision
  title: 11.  Interoperability Considerations
- contents:
  - "12.  IANA Considerations\n   The media type for GeoJSON text is \"application/geo+json\"
    and is\n   registered in the \"Media Types\" registry described in [RFC6838].
    \ The\n   entry for \"application/vnd.geo+json\" in the same registry should have\n
    \  its status changed to be \"OBSOLETED\" with a pointer to the media type\n   \"application/geo+json\"
    and a reference added to this RFC.\n   Type name:  application\n   Subtype name:
    \ geo+json\n   Required parameters:  n/a\n   Optional parameters:  n/a\n   Encoding
    considerations:  binary\n   Security considerations:  See Section 10 above\n   Interoperability
    considerations:  See Section 11 above\n   Published specification:  [[RFC7946]]\n
    \  Applications that use this media type:  No known applications\n      currently
    use this media type.  This media type is intended for\n      GeoJSON applications
    currently using the \"application/\n      vnd.geo+json\" or \"application/json\"
    media types, of which there\n      are several categories: web mapping, geospatial
    databases,\n      geographic data processing APIs, data analysis and storage\n
    \     services, and data dissemination.\n   Additional information:\n      Magic
    number(s):  n/a\n      File extension(s):  .json, .geojson\n      Macintosh file
    type code:  n/a\n      Object Identifiers:  n/a\n      Windows clipboard name:
    \ GeoJSON\n      Macintosh uniform type identifier:  public.geojson conforms to\n
    \        public.json\n   Person to contact for further information:  Sean Gillies\n
    \     (sean.gillies@gmail.com)\n   Intended usage:  COMMON\n   Restrictions on
    usage:  none\n   Restrictions on usage:  none\n   Author:  see \"Authors' Addresses\"
    section of [[RFC7946]].\n   Change controller:  Internet Engineering Task Force\n"
  title: 12.  IANA Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [RFC7493]  Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI
      10.17487/RFC7493, March 2015,\n              <http://www.rfc-editor.org/info/rfc7493>.\n
      \  [WGS84]    National Imagery and Mapping Agency, \"Department of\n              Defense
      World Geodetic System 1984: Its Definition and\n              Relationships
      with Local Geodetic Systems\", Third Edition,\n              1984.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [GJ2008]   Butler, H., Daly, M., Doyle, A.,
      Gillies, S., Schaub, T.,\n              and C. Schmidt, \"The GeoJSON Format
      Specification\", June\n              2008.\n   [KMLv2.2]  Wilson, T., \"OGC
      KML\", OGC 07-147r2, Version 2.2.0, April\n              2008.\n   [RFC5870]
      \ Mayrhofer, A. and C. Spanring, \"A Uniform Resource\n              Identifier
      for Geographic Locations ('geo' URI)\",\n              RFC 5870, DOI 10.17487/RFC5870,
      June 2010,\n              <http://www.rfc-editor.org/info/rfc5870>.\n   [RFC6772]
      \ Schulzrinne, H., Ed., Tschofenig, H., Ed., Cuellar, J.,\n              Polk,
      J., Morris, J., and M. Thomson, \"Geolocation Policy:\n              A Document
      Format for Expressing Privacy Preferences for\n              Location Information\",
      RFC 6772, DOI 10.17487/RFC6772,\n              January 2013, <http://www.rfc-editor.org/info/rfc6772>.\n
      \  [RFC7464]  Williams, N., \"JavaScript Object Notation (JSON) Text\n              Sequences\",
      RFC 7464, DOI 10.17487/RFC7464, February 2015,\n              <http://www.rfc-editor.org/info/rfc7464>.\n
      \  [SFSQL]    OpenGIS Consortium, Inc., \"OpenGIS Simple Features\n              Specification
      For SQL Revision 1.1\", OGC 99-049, May 1999.\n   [Sweeney]  Sweeney, L., \"k-anonymity:
      a model for protecting\n              privacy\", International Journal on Uncertainty,
      Fuzziness\n              and Knowledge-based Systems 10 (5), 2002; 557-570,\n
      \             DOI 10.1142/S0218488502001648, 2002.\n   [WFSv1]    Vretanos,
      P., \"Web Feature Service Implementation\n              Specification\", OGC
      04-094, Version 1.1.0, May 2005.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Appendix A.  Geometry Examples\n   Each of the examples below represents a valid
    and complete GeoJSON\n   object.\n"
  - contents:
    - "A.1.  Points\n   Point coordinates are in x, y order (easting, northing for
      projected\n   coordinates, longitude, and latitude for geographic coordinates):\n
      \    {\n         \"type\": \"Point\",\n         \"coordinates\": [100.0, 0.0]\n
      \    }\n"
    title: A.1.  Points
  - contents:
    - "A.2.  LineStrings\n   Coordinates of LineString are an array of positions (see\n
      \  Section 3.1.1):\n     {\n         \"type\": \"LineString\",\n         \"coordinates\":
      [\n             [100.0, 0.0],\n             [101.0, 1.0]\n         ]\n     }\n"
    title: A.2.  LineStrings
  - contents:
    - "A.3.  Polygons\n   Coordinates of a Polygon are an array of linear ring (see\n
      \  Section 3.1.6) coordinate arrays.  The first element in the array\n   represents
      the exterior ring.  Any subsequent elements represent\n   interior rings (or
      holes).\n   No holes:\n     {\n         \"type\": \"Polygon\",\n         \"coordinates\":
      [\n             [\n                 [100.0, 0.0],\n                 [101.0,
      0.0],\n                 [101.0, 1.0],\n                 [100.0, 1.0],\n                 [100.0,
      0.0]\n             ]\n         ]\n     }\n   With holes:\n     {\n         \"type\":
      \"Polygon\",\n         \"coordinates\": [\n             [\n                 [100.0,
      0.0],\n                 [101.0, 0.0],\n                 [101.0, 1.0],\n                 [100.0,
      1.0],\n                 [100.0, 0.0]\n             ],\n             [\n                 [100.8,
      0.8],\n                 [100.8, 0.2],\n                 [100.2, 0.2],\n                 [100.2,
      0.8],\n                 [100.8, 0.8]\n             ]\n         ]\n     }\n"
    title: A.3.  Polygons
  - contents:
    - "A.4.  MultiPoints\n   Coordinates of a MultiPoint are an array of positions:\n
      \    {\n         \"type\": \"MultiPoint\",\n         \"coordinates\": [\n             [100.0,
      0.0],\n             [101.0, 1.0]\n         ]\n     }\n"
    title: A.4.  MultiPoints
  - contents:
    - "A.5.  MultiLineStrings\n   Coordinates of a MultiLineString are an array of
      LineString\n   coordinate arrays:\n     {\n         \"type\": \"MultiLineString\",\n
      \        \"coordinates\": [\n             [\n                 [100.0, 0.0],\n
      \                [101.0, 1.0]\n             ],\n             [\n                 [102.0,
      2.0],\n                 [103.0, 3.0]\n             ]\n         ]\n     }\n"
    title: A.5.  MultiLineStrings
  - contents:
    - "A.6.  MultiPolygons\n   Coordinates of a MultiPolygon are an array of Polygon
      coordinate\n   arrays:\n     {\n         \"type\": \"MultiPolygon\",\n         \"coordinates\":
      [\n             [\n                 [\n                     [102.0, 2.0],\n
      \                    [103.0, 2.0],\n                     [103.0, 3.0],\n                     [102.0,
      3.0],\n                     [102.0, 2.0]\n                 ]\n             ],\n
      \            [\n                 [\n                     [100.0, 0.0],\n                     [101.0,
      0.0],\n                     [101.0, 1.0],\n                     [100.0, 1.0],\n
      \                    [100.0, 0.0]\n                 ],\n                 [\n
      \                    [100.2, 0.2],\n                     [100.2, 0.8],\n                     [100.8,
      0.8],\n                     [100.8, 0.2],\n                     [100.2, 0.2]\n
      \                ]\n             ]\n         ]\n     }\n"
    title: A.6.  MultiPolygons
  - contents:
    - "A.7.  GeometryCollections\n   Each element in the \"geometries\" array of a
      GeometryCollection is one\n   of the Geometry objects described above:\n     {\n
      \        \"type\": \"GeometryCollection\",\n         \"geometries\": [{\n             \"type\":
      \"Point\",\n             \"coordinates\": [100.0, 0.0]\n         }, {\n             \"type\":
      \"LineString\",\n             \"coordinates\": [\n                 [101.0, 0.0],\n
      \                [102.0, 1.0]\n             ]\n         }]\n     }\n"
    title: A.7.  GeometryCollections
  title: Appendix A.  Geometry Examples
- contents:
  - "Appendix B.  Changes from the Pre-IETF GeoJSON Format Specification\n   This
    appendix briefly summarizes non-editorial changes from the 2008\n   specification
    [GJ2008].\n"
  - contents:
    - "B.1.  Normative Changes\n   o  Specification of coordinate reference systems
      has been removed,\n      i.e., the \"crs\" member of [GJ2008] is no longer used.\n
      \  o  In the absence of elevation values, applications sensitive to\n      height
      or depth SHOULD interpret positions as being at local\n      ground or sea level
      (see Section 4).\n   o  Implementations SHOULD NOT extend position arrays beyond
      3\n      elements (see Section 3.1.1).\n   o  A line between two positions is
      a straight Cartesian line (see\n      Section 3.1.1).\n   o  Polygon rings MUST
      follow the right-hand rule for orientation\n      (counterclockwise external
      rings, clockwise internal rings).\n   o  The values of a \"bbox\" array are
      \"[west, south, east, north]\", not\n      \"[minx, miny, maxx, maxy]\" (see
      Section 5).\n   o  A Feature object's \"id\" member is a string or number (see\n
      \     Section 3.2).\n   o  Extensions MAY be used, but MUST NOT change the semantics
      of\n      GeoJSON members and types (see Section 6).\n   o  GeoJSON objects
      MUST NOT contain the defining members of other\n      types (see Section 7.1).\n
      \  o  The media type for GeoJSON is \"application/geo+json\".\n"
    title: B.1.  Normative Changes
  - contents:
    - "B.2.  Informative Changes\n   o  The definition of a GeoJSON text has been
      added.\n   o  Rules for mapping 'geo' URIs have been added.\n   o  A recommendation
      of the I-JSON [RFC7493] constraints has been\n      added.\n   o  Implementers
      are cautioned about the effect of excessive\n      coordinate precision on interoperability.\n
      \  o  Interoperability concerns of GeometryCollections are noted.  These\n      objects
      should be used sparingly (see Section 3.1.8).\n"
    title: B.2.  Informative Changes
  title: Appendix B.  Changes from the Pre-IETF GeoJSON Format Specification
- contents:
  - "Appendix C.  GeoJSON Text Sequences\n   All GeoJSON objects defined in this specification
    --\n   FeatureCollection, Feature, and Geometry -- consist of exactly one\n   JSON
    object.  However, there may be circumstances in which\n   applications need to
    represent sets or sequences of these objects\n   (over and above the grouping
    of Feature objects in a\n   FeatureCollection), e.g., in order to efficiently
    \"stream\" large\n   numbers of Feature objects.  The definition of such sets
    or sequences\n   is outside the scope of this specification.\n   If such a representation
    is needed, a new media type is required that\n   has the ability to represent
    these sets or sequences.  When defining\n   such a media type, it may be useful
    to base it on \"JavaScript Object\n   Notation (JSON) Text Sequences\" [RFC7464],
    leaving the foundations of\n   how to represent multiple JSON objects to that
    specification, and\n   only defining how it applies to GeoJSON objects.\n"
  title: Appendix C.  GeoJSON Text Sequences
- contents:
  - "Acknowledgements\n   The GeoJSON format is the product of discussion on the GeoJSON\n
    \  mailing list, <http://lists.geojson.org/listinfo.cgi/\n   geojson-geojson.org>,
    before October 2015 and in the IETF's GeoJSON\n   WG after October 2015.\n   Material
    in this document was adapted with changes from\n   <http://geojson.org/geojson-spec.html>
    [GJ2008], which is licensed\n   under <http://creativecommons.org/licenses/by/3.0/us/>.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Howard Butler\n   Hobu Inc.\n   Email: howard@hobu.co\n
    \  Martin Daly\n   Cadcorp\n   Email: martin.daly@cadcorp.com\n   Allan Doyle\n
    \  Email: adoyle@intl-interfaces.com\n   Sean Gillies\n   Mapbox\n   Email: sean.gillies@gmail.com\n
    \  URI:   http://sgillies.net\n   Stefan Hagen\n   Rheinaustr. 62\n   Bonn  53225\n
    \  Germany\n   Email: stefan@hagen.link\n   URI:   http://stefan-hagen.website/\n
    \  Tim Schaub\n   Planet Labs\n   Email: tim.schaub@gmail.com\n"
  title: Authors' Addresses
