- title: __initial_text__
  contents:
  - "          Extensions to RSVP-TE for Label Switched Path (LSP)\n             \
    \    Ingress Fast Reroute (FRR) Protection\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes extensions to Resource Reservation Protocol\
    \ -\n   Traffic Engineering (RSVP-TE) for locally protecting the ingress node\n\
    \   of a Point-to-Point (P2P) or Point-to-Multipoint (P2MP) Traffic\n   Engineered\
    \ (TE) Label Switched Path (LSP).  It extends the Fast\n   Reroute (FRR) protection\
    \ for transit nodes of an LSP to the ingress\n   node of the LSP.  The procedures\
    \ described in this document are\n   experimental.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8424.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Ingress Local Protection Example  . . . . . . . .\
    \ . . . .   5\n     1.2.  Ingress Local Protection Overview . . . . . . . . .\
    \ . . .   6\n   2.  Conventions Used in This Document . . . . . . . . . . . .\
    \ . .   7\n   3.  Ingress Failure Detection . . . . . . . . . . . . . . . . .\
    \ .   7\n     3.1.  Source Detects Failure  . . . . . . . . . . . . . . . . .\
    \   7\n     3.2.  Backup and Source Detect Failure  . . . . . . . . . . . .  \
    \ 8\n   4.  Backup Forwarding State . . . . . . . . . . . . . . . . . . .   9\n\
    \     4.1.  Forwarding State for Backup LSP . . . . . . . . . . . . .   9\n  \
    \ 5.  Protocol Extensions . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 5.1.  INGRESS_PROTECTION Object . . . . . . . . . . . . . . . .  10\n      \
    \ 5.1.1.  Class Number and Class Type . . . . . . . . . . . . .  10\n       5.1.2.\
    \  Object Format . . . . . . . . . . . . . . . . . . . .  11\n       5.1.3.  Subobject:\
    \ Backup Ingress IPv4 Address  . . . . . . .  12\n       5.1.4.  Subobject: Backup\
    \ Ingress IPv6 Address  . . . . . . .  13\n       5.1.5.  Subobject: Ingress IPv4\
    \ Address . . . . . . . . . . .  13\n       5.1.6.  Subobject: Ingress IPv6 Address\
    \ . . . . . . . . . . .  13\n       5.1.7.  Subobject: TRAFFIC_DESCRIPTOR . .\
    \ . . . . . . . . . .  14\n       5.1.8.  Subobject: Label-Routes . . . . . .\
    \ . . . . . . . . .  15\n   6.  Behavior of Ingress Protection  . . . . . . .\
    \ . . . . . . . .  15\n     6.1.  Overview  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  15\n       6.1.1.  Relay-Message Method  . . . . . . . . . .\
    \ . . . . . .  15\n       6.1.2.  Proxy-Ingress Method  . . . . . . . . . . .\
    \ . . . . .  16\n     6.2.  Ingress Behavior  . . . . . . . . . . . . . . . .\
    \ . . . .  17\n       6.2.1.  Relay-Message Method  . . . . . . . . . . . . .\
    \ . . .  17\n       6.2.2.  Proxy-Ingress Method  . . . . . . . . . . . . . .\
    \ . .  18\n     6.3.  Backup Ingress Behavior . . . . . . . . . . . . . . . .\
    \ .  19\n       6.3.1.  Backup Ingress Behavior in the Off-Path Case  . . . .\
    \  20\n       6.3.2.  Backup Ingress Behavior in the On-Path Case . . . . .  22\n\
    \       6.3.3.  Failure Detection and Refresh PATH Messages . . . . .  23\n  \
    \   6.4.  Revertive Behavior  . . . . . . . . . . . . . . . . . . .  23\n    \
    \   6.4.1.  Revert to Primary Ingress . . . . . . . . . . . . . .  24\n      \
    \ 6.4.2.  Global Repair by Backup Ingress . . . . . . . . . . .  24\n   7.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  24\n   8.  Compatibility\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  24\n   9.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  25\n   10. References  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  25\n     10.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  25\n     10.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  26\n   Acknowledgements  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  26\n   Contributors  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  26\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   For an MPLS Traffic Engineered (TE) Label Switched Path\
    \ (LSP),\n   protecting the failures of its transit nodes using Fast Reroute (FRR)\n\
    \   is covered in [RFC4090] for Point-to-Point (P2P) LSPs and [RFC4875]\n   for\
    \ Point-to-Multipoint (P2MP) LSPs.  However, protecting the failure\n   of its\
    \ ingress node using FRR is not covered in either [RFC4090] or\n   [RFC4875].\
    \  The MPLS Transport Profile (MPLS-TP) Linear Protection\n   described in [RFC6378]\
    \ can provide a protection against the failure\n   of any transit node of an LSP\
    \ between the ingress node and the egress\n   node of the LSP, but it cannot protect\
    \ against the failure of the\n   ingress node.\n   To protect against the failure\
    \ of the (primary) ingress node of a\n   primary end-to-end P2MP (or P2P) TE LSP,\
    \ a typical existing solution\n   is to set up a secondary backup end-to-end P2MP\
    \ (or P2P) TE LSP.  The\n   backup LSP is from a backup ingress node to backup\
    \ egress nodes (or\n   node).  The backup ingress node is different from the primary\
    \ ingress\n   node.  The backup egress nodes (or node) are (or is) different from\n\
    \   the primary egress nodes (or node) of the primary LSP.  For a P2MP TE\n  \
    \ LSP, on each of the primary (and backup) egress nodes, a P2P LSP is\n   created\
    \ from the egress node to its primary (backup) ingress node and\n   configured\
    \ with Bidirectional Forwarding Detection (BFD).  This is\n   used to detect the\
    \ failure of the primary (backup) ingress node for\n   the receiver to switch\
    \ to the backup (or primary) egress node to\n   receive the traffic after the\
    \ primary (or backup) ingress node fails\n   when both the primary LSP and the\
    \ secondary LSP carry the traffic.\n   In addition, FRR may be used to provide\
    \ protections against the\n   failures of the transit nodes and the links of the\
    \ primary and\n   secondary end-to-end TE LSPs.\n   There are a number of issues\
    \ in this solution:\n   o  It consumes lots of network resources.  Double states\
    \ need to be\n      maintained in the network since two end-to-end TE LSPs are\n\
    \      created.  Double link bandwidth is reserved and used when both the\n  \
    \    primary and the secondary end-to-end TE LSPs carry the traffic at\n     \
    \ the same time.\n   o  More operations are needed, which include the configuration\
    \ of two\n      end-to-end TE LSPs and BFDs from each of the egress nodes to its\n\
    \      corresponding ingress node.\n   o  The detection of the failure of the\
    \ ingress node may not be\n      reliable.  Any failure on the path of the BFD\
    \ from an egress node\n      to an ingress node may cause the BFD to indicate\
    \ the failure of\n      the ingress node.\n   o  The speed of protection against\
    \ the failure of the ingress node\n      may be slow.\n   This specification defines\
    \ a simple extension to RSVP-TE for local\n   protection (FRR) of the ingress\
    \ node of a P2MP or P2P LSP to resolve\n   these issues.  Ingress local protection\
    \ and ingress FRR protection\n   will be used interchangeably.\n   Note that this\
    \ document is an Experimental RFC.  Two different\n   approaches are proposed\
    \ to transfer the information for ingress\n   protection.  They both use the same\
    \ new INGRESS_PROTECTION object,\n   which is sent in both PATH and RESV messages\
    \ between a primary\n   ingress and a backup ingress.  One approach is the Relay-Message\n\
    \   Method (refer to Sections 6.1.1 and 6.2.1), the other is the Proxy-\n   Ingress\
    \ Method (refer to Sections 6.1.2 and 6.2.2).  Each of them has\n   advantages\
    \ and disadvantages.  It is hard to decide which one is used\n   as a standard\
    \ approach now.  It is expected that the experiment on\n   the ingress local protection\
    \ with these two approaches will provide\n   quantities to help choose one.  The\
    \ quantities include the numbers on\n   control traffic, states, codes, and operations.\
    \  After one approach\n   is selected, the document will be revised to reflect\
    \ that selection\n   and any other items learned from the experiment.  The revised\n\
    \   document is expected to be submitted for publication on the standards\n  \
    \ track.\n"
- title: 1.1.  Ingress Local Protection Example
  contents:
  - "1.1.  Ingress Local Protection Example\n   Figure 1 shows an example of using\
    \ a backup P2MP LSP to locally\n   protect the ingress of a primary P2MP LSP,\
    \ which is from ingress Ia\n   to three egresses: L1, L2, and L3.  The backup\
    \ LSP is from backup\n   ingress Ib to the next hops of ingress Ia: R2 and R4.\n\
    \                      *******  *******              S Source\n              \
    \     [R2]-----[R3]-----[L1]          Ix Ingress\n                  */ &     \
    \                        Rx Transit\n                 */  &                  \
    \           Lx Egress\n                */   &                            *** Primary\
    \ LSP\n               */    &                            &&& Backup LSP across\n\
    \              */     &                                Logical Hop\n         \
    \    */      &\n            */ ********    ********  *******\n     [S]---[Ia]--------[R4]------[R5]-----[L2]\n\
    \       \\      |     &    &           *\\\n        \\     |    &    &       \
    \      *\\\n         \\    |   &    &               *\\\n          \\   |  & \
    \   &                 *\\\n           \\  | &    &                   *\\\n   \
    \         \\ |&    &                     *\\\n             [Ib]&&&           \
    \            [L3]\n                    Figure 1: Ingress Local Protection\n  \
    \ In normal operations, source S sends the traffic to primary ingress\n   Ia.\
    \  Ia imports the traffic into the primary LSP.\n   When source S detects the\
    \ failure of Ia, it switches the traffic to\n   backup ingress Ib, which imports\
    \ the traffic from S into the backup\n   LSP to Ia's next hops, R2 and R4, where\
    \ the traffic is merged into\n   the primary LSP and then sent to egresses L1,\
    \ L2, and L3.\n   Note that the backup ingress is one logical hop away from the\n\
    \   ingress.  A logical hop is a direct link or a tunnel (such as a GRE\n   tunnel)\
    \ over which RSVP-TE messages may be exchanged.\n"
- title: 1.2.  Ingress Local Protection Overview
  contents:
  - "1.2.  Ingress Local Protection Overview\n   There are four parts in ingress local\
    \ protection:\n   o  setting up the necessary backup LSP forwarding state based\
    \ on the\n      information received for ingress local protection;\n   o  detecting\
    \ the primary ingress failure and providing the fast\n      repair (as discussed\
    \ in Sections 3 and 4);\n   o  maintaining the RSVP-TE control-plane state until\
    \ a global repair\n      is done; and,\n   o  performing the global repair (see\
    \ Section 6.4.2).\n   The primary ingress of a primary LSP sends the backup ingress\
    \ the\n   information for ingress protection in a PATH message with a new\n  \
    \ INGRESS_PROTECTION object.  The backup ingress sets up the backup\n   LSP(s)\
    \ and forwarding state after receiving the necessary information\n   for ingress\
    \ protection.  Then, it sends the primary ingress the\n   status of ingress protection\
    \ in a RESV message with a new\n   INGRESS_PROTECTION object.\n   When the primary\
    \ ingress fails, the backup ingress sends or refreshes\n   the next hops of the\
    \ primary ingress the PATH messages without any\n   INGRESS_PROTECTION object\
    \ after verifying the failure.  Thus, the\n   RSVP-TE control-plane state of the\
    \ primary LSP is maintained.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 3.  Ingress Failure Detection
  contents:
  - "3.  Ingress Failure Detection\n   Exactly how to detect the failure of the ingress\
    \ is out of scope.\n   However, it is necessary to discuss different modes for\
    \ detecting the\n   failure because they determine what is the required behavior\
    \ for the\n   source and backup ingress.\n"
- title: 3.1.  Source Detects Failure
  contents:
  - "3.1.  Source Detects Failure\n   Source Detects Failure, or Source-Detect for\
    \ short, means that the\n   source is responsible for \"fast detecting\" the failure\
    \ of the primary\n   ingress of an LSP.  Fast detecting the failure means detecting\
    \ the\n   failure in a few or tens of milliseconds.  The backup ingress is\n \
    \  ready to import the traffic from the source into the backup LSP(s)\n   after\
    \ the backup LSP(s) is up.\n   In normal operations, the source sends the traffic\
    \ to the primary\n   ingress.  When the source detects the failure of the primary\
    \ ingress,\n   it switches the traffic to the backup ingress, which delivers the\n\
    \   traffic to the next hops of the primary ingress through the backup\n   LSP(s),\
    \ where the traffic is merged into the primary LSP.\n   For an LSP, after the\
    \ primary ingress fails, the backup ingress MUST\n   use a method to verify the\
    \ failure of the primary ingress before the\n   PATH message for the LSP expires\
    \ at the next hop of the primary\n   ingress.  After verifying the failure, the\
    \ backup ingress sends/\n   refreshes the PATH message to the next hop through\
    \ the backup LSP as\n   needed.  The method may verify the failure of the primary\
    \ ingress\n   slowly, such as in seconds.\n   After the primary ingress fails,\
    \ it will not be reachable after\n   routing convergence.  Thus, checking whether\
    \ the primary ingress\n   (address) is reachable is a possible method.\n   When\
    \ the previously failed primary ingress of a primary LSP becomes\n   available\
    \ again and the primary LSP has recovered from its primary\n   ingress, the source\
    \ may switch the traffic to the primary ingress\n   from the backup ingress. \
    \ An operator may control the traffic switch\n   through using a command on the\
    \ source node after seeing that the\n   primary LSP has recovered.\n"
- title: 3.2.  Backup and Source Detect Failure
  contents:
  - "3.2.  Backup and Source Detect Failure\n   Backup and Source Detect Failure,\
    \ or Backup-Source-Detect for short,\n   means that both the backup ingress and\
    \ the source are concurrently\n   responsible for fast detecting the failure of\
    \ the primary ingress.\n   Note that one of the differences between Source-Detect\
    \ and Backup-\n   Source-Detect is the following: in the former, the backup ingress\n\
    \   verifies the failure of the primary ingress slowly, such as in\n   seconds;\
    \ in the latter, the backup ingress detects the failure fast,\n   such as in a\
    \ few or tens of milliseconds.\n   In normal operations, the source sends the\
    \ traffic to the primary\n   ingress.  It switches the traffic to the backup ingress\
    \ when it\n   detects the failure of the primary ingress.\n   The backup ingress\
    \ does not import any traffic from the source into\n   the backup LSP in normal\
    \ operations.  When it detects the failure of\n   the primary ingress, it imports\
    \ the traffic from the source into the\n   backup LSP to the next hops of the\
    \ primary ingress, where the traffic\n   is merged into the primary LSP.\n   The\
    \ Source-Detect is preferred.  It is simpler than the Backup-\n   Source-Detect,\
    \ which needs both the source and the backup ingress to\n   detect the ingress\
    \ failure quickly.\n"
- title: 4.  Backup Forwarding State
  contents:
  - "4.  Backup Forwarding State\n   Before the primary ingress fails, the backup\
    \ ingress is responsible\n   for creating the necessary backup LSPs.  These LSPs\
    \ might be multiple\n   bypass P2P LSPs that avoid the ingress.  Alternately,\
    \ the backup\n   ingress could choose to use a single backup P2MP LSP as a bypass\
    \ or\n   detour to protect the primary ingress of a primary P2MP LSP.\n   The\
    \ backup ingress may be \"off path\" or \"on path\" of an LSP.  If a\n   backup\
    \ ingress is not any node of the LSP, it is off path.  If a\n   backup ingress\
    \ is a next hop of the primary ingress of the LSP, it is\n   on path.  When a\
    \ backup ingress for protecting the primary ingress is\n   configured, the backup\
    \ ingress MUST not be on the LSP except for if\n   it is the next hop of the primary\
    \ ingress.  If it is on path, the\n   primary forwarding state associated with\
    \ the primary LSP SHOULD be\n   clearly separated from the backup LSP(s) state.\n"
- title: 4.1.  Forwarding State for Backup LSP
  contents:
  - "4.1.  Forwarding State for Backup LSP\n   A forwarding entry for a backup LSP\
    \ is created on the backup ingress\n   after the LSP is set up.  Depending on\
    \ the failure-detection mode\n   (e.g., Source-Detect), it may be used to forward\
    \ received traffic or\n   simply be inactive (e.g., Backup-Source-Detect) until\
    \ required.  In\n   either case, when the primary ingress fails, this entry is\
    \ used to\n   import the traffic into the backup LSP to the next hops of the\n\
    \   primary ingress, where the traffic is merged into the primary LSP.\n   The\
    \ forwarding entry for a backup LSP is a local implementation\n   issue.  In one\
    \ device, it may have an inactive flag.  This inactive\n   forwarding entry is\
    \ not used to forward any traffic normally.  When\n   the primary ingress fails,\
    \ it is changed to active; thus, the traffic\n   from the source is imported into\
    \ the backup LSP.\n"
- title: 5.  Protocol Extensions
  contents:
  - "5.  Protocol Extensions\n   A new object, INGRESS_PROTECTION, is defined for\
    \ signaling ingress\n   local protection.  The primary ingress of a primary LSP\
    \ sends the\n   backup ingress this object in a PATH message.  In this case, the\n\
    \   object contains the information needed to set up ingress protection.\n   The\
    \ information includes:\n   o  the Backup Ingress IP Address, which indicates\
    \ the backup ingress;\n   o  the TRAFFIC_DESCRIPTOR, which describes the traffic\
    \ that the\n      primary LSP transports (this traffic is imported into the backup\n\
    \      LSP(s) on the backup ingress when the primary ingress fails);\n   o  the\
    \ Labels and Routes, which indicate the first hops of the\n      primary LSP,\
    \ each of which is paired with its label; and,\n   o  the Desire options on ingress\
    \ protection, such as a P2MP option,\n      which indicates a desire to use a\
    \ backup P2MP LSP to protect the\n      primary ingress of a primary P2MP LSP.\n\
    \   The backup ingress sends the primary ingress this object in a RESV\n   message.\
    \  In this case, the object contains the information about the\n   status on the\
    \ ingress protection.\n"
- title: 5.1.  INGRESS_PROTECTION Object
  contents:
  - '5.1.  INGRESS_PROTECTION Object

    '
- title: 5.1.1.  Class Number and Class Type
  contents:
  - "5.1.1.  Class Number and Class Type\n   The Class Number for the INGRESS_PROTECTION\
    \ object MUST be of the\n   form 0bbbbbbb to enable implementations that do not\
    \ recognize the\n   object to reject the entire message and return an \"Unknown\
    \ Object\n   Class\" error [RFC2205].  It is suggested that a Class Number value\n\
    \   from the Private Use range (124-127) [RFC3936] specified for the\n   0bbbbbbb\
    \ octet be chosen for this experiment.  It is also suggested\n   that a Class\
    \ Type value of 1 be used for this object in this\n   experiment.\n   The INGRESS_PROTECTION\
    \ object with the FAST_REROUTE object in a PATH\n   message is used to control\
    \ the backup for protecting the primary\n   ingress of a primary LSP.  The primary\
    \ ingress MUST insert this\n   object into the PATH message to be sent to the\
    \ backup ingress for\n   protecting the primary ingress.\n"
- title: 5.1.2.  Object Format
  contents:
  - "5.1.2.  Object Format\n   The INGRESS_PROTECTION object has the following format:\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Length (bytes)        |    Class-Num  |    C-Type     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \  Reserved (zero)  |   NUB   |      Flags    |    Options    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ~                         (Subobjects)                          ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        Flags\n\
    \         0x01    Ingress local protection available\n         0x02    Ingress\
    \ local protection in use\n         0x04    Bandwidth protection\n        Options\n\
    \         0x01    Revert to Ingress\n         0x02    P2MP Backup\n   For protecting\
    \ the ingress of a P2MP LSP, if the backup ingress\n   doesn't have a backup LSP\
    \ to each of the next hops of the primary\n   ingress, it SHOULD clear \"Ingress\
    \ local protection available\" and set\n   the Number of Unprotected Branches\
    \ (NUB) to the number of the next\n   hops to which there is no backup LSP.\n\
    \   The flags are used to communicate status information from the backup\n   ingress\
    \ to the primary ingress.\n   o Ingress local protection available:  The backup\
    \ ingress MUST set\n     this flag after backup LSPs are up and ready for locally\
    \ protecting\n     the primary ingress.  The backup ingress sends this to the\
    \ primary\n     ingress to indicate that the primary ingress is locally protected.\n\
    \   o Ingress local protection in use:  The backup ingress MUST set this\n   \
    \  flag when it detects a failure in the primary ingress and actively\n     redirects\
    \ the traffic into the backup LSPs.  The backup ingress\n     records this flag\
    \ and does not send any RESV messages with this\n     flag to the primary ingress\
    \ since the primary ingress is down.\n   o Bandwidth protection:  The backup ingress\
    \ MUST set this flag if the\n     backup LSPs guarantee to provide the desired\
    \ bandwidth for the\n     protected LSP against the primary ingress failure.\n\
    \   The options are used by the primary ingress to specify the desired\n   behavior\
    \ to the backup ingress.\n   o Revert to Ingress:  The primary ingress sets this\
    \ option, which\n     indicates that the traffic for the primary LSP, if successfully\n\
    \     resignaled, will be switched back to the primary ingress from the\n    \
    \ backup ingress when the primary ingress is restored.\n   o P2MP Backup:  This\
    \ option is set to ask for the backup ingress to\n     use backup P2MP LSP to\
    \ protect the primary ingress.\n   The INGRESS_PROTECTION object may contain some\
    \ subobjects of\n   following format:\n      0                   1           \
    \        2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |            Length             |Reserved (zero)|\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                  Contents / Body of Subobject               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where Type is the type of a subobject and Length is the total size of\n  \
    \ the subobject in bytes, including Type, Length, and Contents fields.\n"
- title: '5.1.3.  Subobject: Backup Ingress IPv4 Address'
  contents:
  - "5.1.3.  Subobject: Backup Ingress IPv4 Address\n   When the primary ingress of\
    \ a protected LSP sends a PATH message with\n   an INGRESS_PROTECTION object to\
    \ the backup ingress, the object MUST\n   have a Backup Ingress IPv4 Address subobject\
    \ containing an IPv4\n   address belonging to the backup ingress if IPv4 is used.\
    \  The Type of\n   the subobject is 1, and the body of the subobject is given\
    \ below:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Backup Ingress IPv4 Address (4 bytes)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Backup Ingress IPv4 Address: An IPv4 host address of backup ingress\n"
- title: '5.1.4.  Subobject: Backup Ingress IPv6 Address'
  contents:
  - "5.1.4.  Subobject: Backup Ingress IPv6 Address\n   When the primary ingress of\
    \ a protected LSP sends a PATH message with\n   an INGRESS_PROTECTION object to\
    \ the backup ingress, the object MUST\n   have a Backup Ingress IPv6 Address subobject\
    \ containing an IPv6\n   address belonging to the backup ingress if IPv6 is used.\
    \  The Type of\n   the subobject is 2, the body of the subobject is given below:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Backup Ingress IPv6 Address (16 bytes)            |\n   ~  \
    \                                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Backup Ingress IPv6 Address: An IPv6 host address of backup ingress\n"
- title: '5.1.5.  Subobject: Ingress IPv4 Address'
  contents:
  - "5.1.5.  Subobject: Ingress IPv4 Address\n   The INGRESS_PROTECTION object may\
    \ have an Ingress IPv4 Address\n   subobject containing an IPv4 address belonging\
    \ to the primary ingress\n   if IPv4 is used.  The Type of the subobject is 3.\
    \  The subobject has\n   the following body:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Ingress IPv4 Address (4 bytes)                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Ingress IPv4 Address: An IPv4 host address of ingress\n"
- title: '5.1.6.  Subobject: Ingress IPv6 Address'
  contents:
  - "5.1.6.  Subobject: Ingress IPv6 Address\n   The INGRESS_PROTECTION object may\
    \ have an Ingress IPv6 Address\n   subobject containing an IPv6 address belonging\
    \ to the primary ingress\n   if IPv6 is used.  The Type of the subobject is 4.\
    \  The subobject has\n   the following body:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Ingress IPv6 Address (16 bytes)                 |\n   ~  \
    \                                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Ingress IPv6 Address: An IPv6 host address of ingress\n"
- title: '5.1.7.  Subobject: TRAFFIC_DESCRIPTOR'
  contents:
  - "5.1.7.  Subobject: TRAFFIC_DESCRIPTOR\n   The INGRESS_PROTECTION object may have\
    \ a TRAFFIC_DESCRIPTOR subobject\n   describing the traffic to be mapped to the\
    \ backup LSP on the backup\n   ingress for locally protecting the primary ingress.\
    \  The subobject\n   types for Interface, IPv4 Prefix, IPv6 Prefix, and Application\n\
    \   Identifier are 5, 6, 7, and 8, respectively.  The subobject has the\n   following\
    \ body:\n    0                   1                   2                   3\n \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Traffic Element 1                      |\n   ~  \
    \                                                             ~\n   |        \
    \                Traffic Element n                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The TRAFFIC_DESCRIPTOR subobject may contain multiple Traffic\n   Elements\
    \ of the same type as follows:\n   o Interface Traffic:  Each of the Traffic Elements\
    \ is a 32-bit index\n     of an interface from which the traffic is imported into\
    \ the backup\n     LSP.\n   o IPv4 Prefix Traffic:  Each of the Traffic Elements\
    \ is an IPv4\n     prefix that contains an 8-bit prefix length followed by an\
    \ IPv4\n     address prefix (whose length, in bits, is specified by the prefix\n\
    \     length) that is padded to a byte boundary.\n   o IPv6 Prefix Traffic  Each\
    \ of the Traffic Elements is an IPv6\n     prefix, containing an 8-bit prefix\
    \ length followed by an IPv6\n     address prefix (whose length, in bits, is specified\
    \ by the prefix\n     length) that is padded to a byte boundary.\n   o Application\
    \ Traffic:  Each of the Traffic Elements is a 32-bit\n     identifier of an application\
    \ from which the traffic is imported\n     into the backup LSP.\n"
- title: '5.1.8.  Subobject: Label-Routes'
  contents:
  - "5.1.8.  Subobject: Label-Routes\n   The INGRESS_PROTECTION object in a PATH message\
    \ from the primary\n   ingress to the backup ingress may have a Label-Routes subobject\n\
    \   containing the labels and routes that the next hops of the ingress\n   use.\
    \  The Type of the subobject is 9.  The subobject has the\n   following body:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                           Subobjects                          ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Subobjects in Label-Routes are copied from those in the\n   RECORD_ROUTE\
    \ objects in the RESV messages that the primary ingress\n   receives from its\
    \ next hops for the primary LSP.  They MUST contain\n   the first hops of the\
    \ LSP, each of which is paired with its label.\n"
- title: 6.  Behavior of Ingress Protection
  contents:
  - '6.  Behavior of Ingress Protection

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   There are two different proposed signaling approaches to transfer\
    \ the\n   information for ingress protection.  They both use the same new\n  \
    \ INGRESS_PROTECTION object.  The object is sent in both PATH and RESV\n   messages.\n"
- title: 6.1.1.  Relay-Message Method
  contents:
  - "6.1.1.  Relay-Message Method\n   The primary ingress relays the information for\
    \ ingress protection of\n   an LSP to the backup ingress via PATH messages.  Once\
    \ the LSP is\n   created, the ingress of the LSP sends the backup ingress a PATH\n\
    \   message with an INGRESS_PROTECTION object with a Label-Routes\n   subobject,\
    \ which is populated with the next hops and labels.  This\n   provides sufficient\
    \ information for the backup ingress to create the\n   appropriate forwarding\
    \ state and backup LSP(s).\n   The ingress also sends the backup ingress all the\
    \ other PATH messages\n   for the LSP with an empty INGRESS_PROTECTION object.\
    \  An\n   INGRESS_PROTECTION object without any TRAFFIC_DESCRIPTOR subobject is\n\
    \   called an empty INGRESS_PROTECTION object.  Thus, the backup ingress\n   has\
    \ access to all the PATH messages needed for modification to\n   refresh the control-plane\
    \ state after a failure.\n   The empty INGRESS_PROTECTION object is for efficient\
    \ processing of\n   ingress protection for a P2MP LSP.  A P2MP LSP's primary ingress\
    \ may\n   have more than one PATH message, each of which is sent to a next hop\n\
    \   along a branch of the P2MP LSP.  The PATH message along a branch will\n  \
    \ be selected and sent to the backup ingress with an INGRESS_PROTECTION\n   object\
    \ containing the TRAFFIC_DESCRIPTOR subobject; all the PATH\n   messages along\
    \ the other branches will be sent to the backup ingress\n   containing an INGRESS_PROTECTION\
    \ object without any\n   TRAFFIC_DESCRIPTOR subobject (empty INGRESS_PROTECTION\
    \ object).  For\n   a P2MP LSP, the backup ingress only needs one TRAFFIC_DESCRIPTOR.\n"
- title: 6.1.2.  Proxy-Ingress Method
  contents:
  - "6.1.2.  Proxy-Ingress Method\n   Conceptually, a proxy ingress is created that\
    \ starts the RSVP\n   signaling.  The explicit path of the LSP goes from the proxy\
    \ ingress\n   to the backup ingress and then to the real ingress.  The behavior\
    \ and\n   signaling for the proxy ingress is done by the real ingress; the use\n\
    \   of a proxy-ingress address avoids problems with loop detection.  Note\n  \
    \ that the proxy ingress MUST reside within the same router as the real\n   ingress.\n\
    \                              [ Traffic Source ]       *** Primary LSP\n    \
    \                           $             $         --- Backup LSP\n         \
    \                      $             $          $$  Link\n                   \
    \            $             $\n                       [ Proxy Ingress ]  [ Backup\
    \ ]\n                       [ & Ingress     ]     |\n                        \
    \      *              |\n                              *****[ MP ]----|\n    \
    \  Figure 2: Example of a Protected LSP with a Proxy-Ingress Node\n   The backup\
    \ ingress MUST know the merge points or next hops and their\n   associated labels.\
    \  This is accomplished by having the RSVP PATH and\n   RESV messages go through\
    \ the backup ingress, although the forwarding\n   path need not go through the\
    \ backup ingress.  If the backup ingress\n   fails, the ingress simply removes\
    \ the INGRESS_PROTECTION object and\n   forwards the PATH messages to the LSP's\
    \ next hop(s).  If the ingress\n   has its LSP configured for ingress protection,\
    \ then the ingress can\n   add the backup ingress and itself to the Explicit Route\
    \ Object (ERO)\n   and start forwarding the PATH messages to the backup ingress.\n\
    \   Slightly different behavior can apply for the on-path and off-path\n   cases.\
    \  In the on-path case, the backup ingress is a next-hop node\n   after the ingress\
    \ for the LSP.  In the off-path case, the backup\n   ingress is not any next-hop\
    \ node after the ingress for all associated\n   sub-LSPs.\n   The key advantage\
    \ of this approach is that it minimizes the special\n   handling code required.\
    \  Because the backup ingress is on the\n   signaling path, it can receive various\
    \ notifications.  It easily has\n   access to all the PATH messages needed for\
    \ a modification to be sent\n   to refresh the control-plane state after a failure.\n"
- title: 6.2.  Ingress Behavior
  contents:
  - "6.2.  Ingress Behavior\n   The primary ingress MUST be configured with a couple\
    \ of pieces of\n   information for ingress protection.\n   o Backup Ingress Address:\
    \  The primary ingress MUST know the IP\n     address of the backup ingress it\
    \ wants to be used before it can use\n     the INGRESS_PROTECTION object.\n  \
    \ o Proxy-Ingress-Id (only needed for Proxy-Ingress Method):  The\n     Proxy-Ingress-Id\
    \ is only used in the RECORD_ROUTE object for\n     recording the proxy ingress.\
    \  If no Proxy-Ingress-Id is specified,\n     then a local interface address that\
    \ will not otherwise be included\n     in the RECORD_ROUTE object can be used.\
    \  A similar technique is\n     used in Section 6.1.1. of [RFC4090].\n   o Application\
    \ Traffic Identifier:  The primary ingress and backup\n     ingress MUST both\
    \ know what application traffic should be directed\n     into the LSP.  If a list\
    \ of prefixes in the TRAFFIC_DESCRIPTOR\n     subobject will not suffice, then\
    \ a commonly understood Application\n     Traffic Identifier can be sent between\
    \ the primary ingress and\n     backup ingress.  The exact meaning of the identifier\
    \ should be\n     configured similarly at both the primary ingress and backup\n\
    \     ingress.  The Application Traffic Identifier is understood within\n    \
    \ the unique context of the primary ingress and backup ingress.\n   o A Connection\
    \ between Backup Ingress and Primary Ingress:  If there\n     is not any direct\
    \ link between the primary ingress and the backup\n     ingress, a tunnel MUST\
    \ be configured between them.\n   With this additional information, the primary\
    \ ingress can create and\n   signal the necessary RSVP extensions to support ingress\
    \ protection.\n"
- title: 6.2.1.  Relay-Message Method
  contents:
  - "6.2.1.  Relay-Message Method\n   To protect the primary ingress of an LSP, the\
    \ primary ingress MUST do\n   the following after the LSP is up.\n   1.  Select\
    \ a PATH message P0 for the LSP.\n   2.  If the backup ingress is off path (the\
    \ backup ingress is not the\n       next hop of the primary ingress for P0), then\
    \ send it a PATH\n       message P0' with the content from P0 and an INGRESS_PROTECTION\n\
    \       object; else (the backup ingress is a next hop, i.e., on-path\n      \
    \ case) add an INGRESS_PROTECTION object into the existing PATH\n       message\
    \ to the backup ingress (i.e., the next hop).  The object\n       contains the\
    \ TRAFFIC_DESCRIPTOR subobject, the Backup Ingress\n       Address subobject and\
    \ the Label-Routes subobject.  The options\n       field is set to indicate whether\
    \ a backup P2MP LSP is desired.\n       The Label-Routes subobject contains the\
    \ next hops of the primary\n       ingress and their labels.  Note that for the\
    \ on-path case, there\n       is an existing PATH message to the backup ingress\
    \ (i.e., the next\n       hop), and we just add an INGRESS_PROTECTION object into\
    \ the\n       existing PATH message to be sent to the backup ingress.  We do\n\
    \       not send a separate PATH message to the backup ingress for this\n    \
    \   existing PATH message.\n   3.  For each Pi of the other PATH messages for\
    \ the LSP, send the\n       backup ingress a PATH message Pi' with the content\
    \ copied from Pi\n       and an empty INGRESS_PROTECTION object.\n   For every\
    \ PATH message Pj' (i.e., P0'/Pi') to be sent to the backup\n   ingress, it has\
    \ the same SESSION as Pj (i.e., P0/Pi).  If the backup\n   ingress is off path,\
    \ the primary ingress updates Pj' according to the\n   backup ingress as its next\
    \ hop before sending it.  It adds the backup\n   ingress to the beginning of the\
    \ ERO and sets RSVP_HOP based on the\n   interface to the backup ingress.  The\
    \ primary ingress MUST NOT set up\n   any forwarding state to the backup ingress\
    \ if the backup ingress is\n   off path.\n"
- title: 6.2.2.  Proxy-Ingress Method
  contents:
  - "6.2.2.  Proxy-Ingress Method\n   The primary ingress is responsible for starting\
    \ the RSVP signaling\n   for the proxy-ingress node.  To do this, the following\
    \ MUST be done\n   for the RSVP PATH message.\n   1.  Compute the EROs for the\
    \ LSP as normal for the ingress.\n   2.  If the selected backup ingress node is\
    \ not the first node on the\n       path (for all sub-LSPs), then insert it at\
    \ the beginning of the\n       ERO first, then the backup ingress node, and then\
    \ the ingress\n       node.\n   3.  In the PATH RECORD_ROUTE Object (RRO), instead\
    \ of recording the\n       ingress node's address, replace it with the Proxy-Ingress-Id.\n\
    \   4.  Leave the hop (HOP) object populated as usual with information\n     \
    \  for the ingress node.\n   5.  Add the INGRESS_PROTECTION object to the PATH\
    \ message.  Include\n       the Backup Ingress Address (IPv4 or IPv6) subobject\
    \ and the\n       TRAFFIC_DESCRIPTOR subobject.  Set or clear the options\n  \
    \     indicating that a backup P2MP LSP is desired.\n   6.  Optionally, add the\
    \ FAST-REROUTE object [RFC4090] to the Path\n       message.  Indicate whether\
    \ one-to-one backup is desired.\n       Indicate whether facility backup is desired.\n\
    \   7.  The RSVP PATH message is sent to the backup node as normal.\n   If the\
    \ ingress detects that it can't communicate with the backup\n   ingress, then\
    \ the ingress SHOULD instead send the PATH message to the\n   next hop indicated\
    \ in the ERO computed in step 1.  Once the ingress\n   detects that it can communicate\
    \ with the backup ingress, the ingress\n   SHOULD follow steps 1-7 to obtain ingress\
    \ failure protection.\n   When the ingress node receives an RSVP PATH message\
    \ with an\n   INGRESS_PROTECTION object and the object specifies that node as\
    \ the\n   ingress node and the Previous Hop (PHOP) as the backup ingress node,\n\
    \   the ingress node SHOULD remove the INGRESS_PROTECTION object from the\n  \
    \ PATH message before sending it out.  Additionally, the ingress node\n   MUST\
    \ store that it will install ingress forwarding state for the LSP\n   rather than\
    \ midpoint forwarding.\n   When an RSVP RESV message is received by the ingress,\
    \ it uses the\n   Next Hop (NHOP) to determine whether the message is received\
    \ from the\n   backup ingress or from a different node.  The stored associated\
    \ PATH\n   message contains an INGRESS_PROTECTION object that identifies the\n\
    \   backup ingress node.  If the RESV message is not from the backup\n   node,\
    \ then the ingress forwarding state SHOULD be set up, and the\n   INGRESS_PROTECTION\
    \ object MUST be added to the RESV before it is sent\n   to the NHOP, which SHOULD\
    \ be the backup node.  If the RESV message is\n   from the backup node, then the\
    \ LSP SHOULD be considered available for\n   use.\n   If the backup ingress node\
    \ is on the forwarding path, then a RESV is\n   received with an INGRESS_PROTECTION\
    \ object and an NHOP that matches\n   the backup ingress.  In this case, the ingress\
    \ node's address will\n   not appear after the backup ingress in the RRO.  The\
    \ ingress node\n   SHOULD set up the ingress forwarding state, just as is done\
    \ if the\n   ingress node of the LSP weren't protected.\n"
- title: 6.3.  Backup Ingress Behavior
  contents:
  - "6.3.  Backup Ingress Behavior\n   A Label Edge Router (LER) determines that the\
    \ ingress local\n   protection is requested for an LSP if the INGRESS_PROTECTION\
    \ object\n   is included in the PATH message it receives for the LSP.  The LER\
    \ can\n   further determine that it is the backup ingress if one of its\n   addresses\
    \ is in the Backup Ingress Address subobject of the\n   INGRESS_PROTECTION object.\
    \  The LER as the backup ingress will assume\n   full responsibility of the ingress\
    \ after the primary ingress fails.\n   In addition, the LER determines that it\
    \ is off path if it is not any\n   node of the LSP.  The LER determines whether\
    \ it uses the Relay-\n   Message Method or the Proxy-Ingress Method according\
    \ to\n   configurations.\n"
- title: 6.3.1.  Backup Ingress Behavior in the Off-Path Case
  contents:
  - "6.3.1.  Backup Ingress Behavior in the Off-Path Case\n   The backup ingress considers\
    \ itself a Point of Local Repair (PLR) and\n   the primary ingress its next hop,\
    \ and it provides a local protection\n   for the primary ingress.  It behaves\
    \ very similarly to a PLR\n   providing fast reroute where the primary ingress\
    \ is considered to be\n   the failure point to protect.  Where not otherwise specified,\
    \ the\n   behavior given in [RFC4090] for a PLR applies.\n   The backup ingress\
    \ MUST follow the control options specified in the\n   INGRESS_PROTECTION object\
    \ and the flags and specifications in the\n   FAST-REROUTE object.  This applies\
    \ to providing a P2MP backup if the\n   \"P2MP backup\" is set, a one-to-one backup\
    \ if \"one-to-one desired\" is\n   set, a facility backup if the \"facility backup\
    \ desired\" is set, and\n   backup paths that support both the desired bandwidth\
    \ and\n   administrative groups that are requested.\n   If multiple non-empty\
    \ INGRESS_PROTECTION objects have been received\n   via multiple PATH messages\
    \ for the same LSP, then the most recent one\n   MUST be the one used.\n   The\
    \ backup ingress creates the appropriate forwarding state for the\n   backup LSP\
    \ tunnel(s) to the merge point(s).\n   When the backup ingress sends a RESV message\
    \ to the primary ingress,\n   it MUST add an INGRESS_PROTECTION object into the\
    \ message.  It MUST\n   set or clear the flags in the object to report \"Ingress\
    \ local\n   protection available\", \"Ingress local protection in use\", and\n\
    \   \"bandwidth protection\".\n   If the backup ingress doesn't have a backup\
    \ LSP tunnel to each of the\n   merge points, it SHOULD clear \"Ingress local\
    \ protection available\"\n   and set NUB to the number of the merge points to\
    \ which there is no\n   backup LSP.\n   When the primary ingress fails, the backup\
    \ ingress redirects the\n   traffic from a source into the backup P2P LSPs or\
    \ the backup P2MP LSP\n   transmitting the traffic to the next hops of the primary\
    \ ingress,\n   where the traffic is merged into the protected LSP.\n   In this\
    \ case, the backup ingress MUST keep the PATH message with the\n   INGRESS_PROTECTION\
    \ object received from the primary ingress and the\n   RESV message with the INGRESS_PROTECTION\
    \ object to be sent to the\n   primary ingress.  The backup ingress MUST set the\
    \ \"local protection\n   in use\" flag in the RESV message, which indicates that\
    \ the backup\n   ingress is actively redirecting the traffic into the backup P2P\
    \ LSPs\n   or the backup P2MP LSP for locally protecting the primary ingress\n\
    \   failure.\n   Note that the RESV message with this piece of information will\
    \ not be\n   sent to the primary ingress because the primary ingress has failed.\n\
    \   If the backup ingress has not received any PATH messages from the\n   primary\
    \ ingress for an extended period of time (e.g., a cleanup\n   timeout interval)\
    \ and a confirmed primary ingress failure did not\n   occur, then the standard\
    \ RSVP soft-state removal SHOULD occur.  The\n   backup ingress SHALL remove the\
    \ state for the PATH message from the\n   primary ingress and either tear down\
    \ the one-to-one backup LSPs for\n   protecting the primary ingress if one-to-one\
    \ backup is used or unbind\n   the facility backup LSPs if facility backup is\
    \ used.\n   When the backup ingress receives a PATH message from the primary\n\
    \   ingress for locally protecting the primary ingress of a protected\n   LSP,\
    \ it MUST check to see if any critical information has been\n   changed.  If the\
    \ next hops of the primary ingress are changed, the\n   backup ingress SHALL update\
    \ its backup LSP(s) accordingly.\n"
- title: 6.3.1.1.  Relay-Message Method
  contents:
  - "6.3.1.1.  Relay-Message Method\n   When the backup ingress receives a PATH message\
    \ with a non-empty\n   INGRESS_PROTECTION object, it examines the object to learn\
    \ what\n   traffic associated with the LSP.  It determines the next hops to be\n\
    \   merged to by examining the Label-Routes subobject in the object.\n   The backup\
    \ ingress MUST store the PATH message received from the\n   primary ingress but\
    \ NOT forward it.\n   The backup ingress responds with a RESV message to the PATH\
    \ message\n   received from the primary ingress.  If the backup ingress is off\n\
    \   path, the LABEL object in the RESV message contains IMPLICIT-NULL.\n   If\
    \ the INGRESS_PROTECTION object is not \"empty\", the backup ingress\n   SHALL\
    \ send the RESV message with the state indicating protection is\n   available\
    \ after the backup LSP(s) are successfully established.\n"
- title: 6.3.1.2.  Proxy-Ingress Method
  contents:
  - "6.3.1.2.  Proxy-Ingress Method\n   When receiving a RESV message for an LSP from\
    \ a router that is not\n   primary ingress, the backup ingress collects the pair\
    \ of (IPv4/IPv6\n   subobject, Label subobject) in the second place to the top\
    \ pair in\n   the RECORD_ROUTE object of the message.  It determines the next\
    \ hops\n   to be merged according to the set of the pairs collected.  If a\n \
    \  Label-Routes subobject is included in the INGRESS_PROTECTION object,\n   the\
    \ included IPv4/IPv6 subobjects are used to filter the set down to\n   the specific\
    \ next hops where protection is desired.  An RESV message\n   MUST have been received\
    \ before the backup ingress can create or\n   select the appropriate backup LSP.\n\
    \   When the backup ingress receives a PATH message with the\n   INGRESS_PROTECTION\
    \ object, the backup ingress examines the object to\n   learn what traffic associated\
    \ with the LSP.  The backup ingress\n   forwards the PATH message to the ingress\
    \ node with the normal RSVP\n   changes.\n   When the backup ingress receives\
    \ a RESV message with the\n   INGRESS_PROTECTION object, the backup ingress records\
    \ an IMPLICIT-\n   NULL label in the RRO.  Then, the backup ingress forwards the\
    \ RESV\n   message to the ingress node, which is acting for the proxy ingress.\n"
- title: 6.3.2.  Backup Ingress Behavior in the On-Path Case
  contents:
  - "6.3.2.  Backup Ingress Behavior in the On-Path Case\n   An LER as the backup\
    \ ingress determines that it is on path if one of\n   its addresses is a next\
    \ hop of the primary ingress; for the Proxy-\n   Ingress Method, the primary ingress\
    \ is determined as not its next hop\n   by checking the PATH message with the\
    \ INGRESS_PROTECTION object\n   received from the primary ingress.  The LER on\
    \ path MUST send the\n   corresponding PATH messages without any INGRESS_PROTECTION\
    \ object to\n   its next hops.  It creates a number of backup P2P LSPs or a backup\n\
    \   P2MP LSP from itself to the other next hops (i.e., the next hops\n   other\
    \ than the backup ingress) of the primary ingress.  The other\n   next hops are\
    \ from the Label-Routes subobject.\n   It also creates a forwarding entry, which\
    \ sends/multicasts the\n   traffic from the source to the next hops of the backup\
    \ ingress along\n   the protected LSP when the primary ingress fails.  The traffic\
    \ is\n   described by the TRAFFIC_DESCRIPTOR.\n   After setting up all the backup\
    \ P2P LSPs or the backup P2MP LSP, the\n   backup ingress creates forwarding entry(s)\
    \ for importing the traffic\n   into the backup LSP(s) from the source when the\
    \ primary ingress\n   fails.  Then, it MUST send the primary ingress a RESV message\
    \ with an\n   INGRESS_PROTECTION object.  The object contains the state of the\n\
    \   local protection, such as having the \"local protection available\"\n   flag\
    \ set to one, which indicates that the primary ingress is locally\n   protected.\n\
    \   When the primary ingress fails, the backup ingress sends/multicasts\n   the\
    \ traffic from the source to its next hops along the protected LSP\n   and imports\
    \ the traffic into each of the backup P2P LSPs or to the\n   backup P2MP LSP transmitting\
    \ the traffic to the other next hops of\n   the primary ingress, where the traffic\
    \ is merged into a protected\n   LSP.\n   During the local repair, the backup\
    \ ingress MUST continue to send the\n   PATH messages to its next hops as before\
    \ and keep the PATH message\n   with the INGRESS_PROTECTION object received from\
    \ the primary ingress\n   and the RESV message with the INGRESS_PROTECTION object\
    \ to be sent to\n   the primary ingress.  It MUST set the \"local protection in\
    \ use\" flag\n   in the RESV message.\n"
- title: 6.3.3.  Failure Detection and Refresh PATH Messages
  contents:
  - "6.3.3.  Failure Detection and Refresh PATH Messages\n   As described in [RFC4090],\
    \ it is necessary to refresh the PATH\n   messages via the backup LSP(s).  The\
    \ backup ingress MUST wait to\n   refresh the PATH messages until it can accurately\
    \ detect that the\n   ingress node has failed.  An example of such an accurate\
    \ detection\n   would be that the IGP has no bidirectional links to the ingress\
    \ node,\n   or a BFD session to the primary ingress' loopback address has failed\n\
    \   and stayed failed after the network has reconverged.\n   As described in Section\
    \ 6.4.3 of [RFC4090], the backup ingress,\n   acting as PLR, MUST modify and send\
    \ any saved PATH messages\n   associated with the primary LSP to the corresponding\
    \ next hops\n   through backup LSP(s).  Any PATH message sent will not contain\
    \ any\n   INGRESS_PROTECTION objects.  The RSVP_HOP object in the message\n  \
    \ contains an IP source address belonging to the backup ingress.  The\n   SENDER_TEMPLATE\
    \ object has the Backup Ingress Address as its tunnel\n   sender address.\n"
- title: 6.4.  Revertive Behavior
  contents:
  - "6.4.  Revertive Behavior\n   Upon a failure event in the (primary) ingress of\
    \ a protected LSP, the\n   protected LSP is locally repaired by the backup ingress.\
    \  There are a\n   couple of basic strategies for restoring the LSP to a full\
    \ working\n   path.\n   o Revert to Primary Ingress:  When the primary ingress\
    \ is restored,\n     it resignals each of the LSPs that start from the primary\
    \ ingress.\n     The traffic for every LSP successfully resignaled is switched\
    \ back\n     to the primary ingress from the backup ingress.\n   o Global Repair\
    \ by Backup Ingress:  After determining that the\n     primary ingress of an LSP\
    \ has failed, the backup ingress computes a\n     new optimal path, signals a\
    \ new LSP along the new path, and\n     switches the traffic to the new LSP.\n"
- title: 6.4.1.  Revert to Primary Ingress
  contents:
  - "6.4.1.  Revert to Primary Ingress\n   If \"Revert to Primary Ingress\" is desired\
    \ for a protected LSP, the\n   (primary) ingress of the LSP SHOULD resignal the\
    \ LSP that starts from\n   the primary ingress after the primary ingress restores.\
    \  After the\n   LSP is resignaled successfully, the traffic SHOULD be switched\
    \ back\n   to the primary ingress from the backup ingress on the source node and\n\
    \   redirected into the LSP starting from the primary ingress.\n   The primary\
    \ ingress can specify the \"Revert to Ingress\" control\n   option in the INGRESS_PROTECTION\
    \ object in the PATH messages to the\n   backup ingress.  After receiving the\
    \ \"Revert to Ingress\" control\n   option, the backup ingress MUST stop sending/refreshing\
    \ PATH messages\n   for the protected LSP.\n"
- title: 6.4.2.  Global Repair by Backup Ingress
  contents:
  - "6.4.2.  Global Repair by Backup Ingress\n   When the backup ingress has determined\
    \ that the primary ingress of\n   the protected LSP has failed (e.g., via the\
    \ IGP), it can compute a\n   new path and signal a new LSP along the new path\
    \ so that it no longer\n   relies upon local repair.  To do this, the backup ingress\
    \ MUST use\n   the same tunnel sender address in the SENDER_TEMPLATE object and\n\
    \   allocate an LSP ID different from the one of the old LSP as the LSP\n   ID\
    \ of the new LSP.  This allows the new LSP to share resources with\n   the old\
    \ LSP.  Alternately, the backup ingress can create a new LSP\n   with no bandwidth\
    \ reservation that duplicates the path(s) of the\n   protected LSP, move traffic\
    \ to the new LSP, delete the protected LSP,\n   and then resignal the new LSP\
    \ with bandwidth.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   In principle, this document does not introduce\
    \ new security issues.\n   The security considerations pertaining to [RFC4090],\
    \ [RFC4875],\n   [RFC2205], and [RFC3209] remain relevant.\n"
- title: 8.  Compatibility
  contents:
  - "8.  Compatibility\n   This extension reuses and extends semantics and procedures\
    \ defined in\n   [RFC2205], [RFC3209], [RFC4090], and [RFC4875] to support ingress\n\
    \   protection.  The new object defined to indicate ingress protection\n   has\
    \ a Class Number of the form 0bbbbbbb.  Per [RFC2205], a node not\n   supporting\
    \ this extension will not recognize the new Class Number and\n   should respond\
    \ with an \"Unknown Object Class\" error.  The error\n   message will propagate\
    \ to the ingress, which can then take action to\n   avoid the incompatible node\
    \ as a backup ingress or may simply\n   terminate the session.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2205]  Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S.\n  \
    \            Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version 1\n    \
    \          Functional Specification\", RFC 2205, DOI 10.17487/RFC2205,\n     \
    \         September 1997, <https://www.rfc-editor.org/info/rfc2205>.\n   [RFC3209]\
    \  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and\
    \ G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\",\
    \ RFC 3209, DOI 10.17487/RFC3209, December 2001,\n              <https://www.rfc-editor.org/info/rfc3209>.\n\
    \   [RFC3936]  Kompella, K. and J. Lang, \"Procedures for Modifying the\n    \
    \          Resource reSerVation Protocol (RSVP)\", BCP 96, RFC 3936,\n       \
    \       DOI 10.17487/RFC3936, October 2004,\n              <https://www.rfc-editor.org/info/rfc3936>.\n\
    \   [RFC4090]  Pan, P., Ed., Swallow, G., Ed., and A. Atlas, Ed., \"Fast\n   \
    \           Reroute Extensions to RSVP-TE for LSP Tunnels\", RFC 4090,\n     \
    \         DOI 10.17487/RFC4090, May 2005,\n              <https://www.rfc-editor.org/info/rfc4090>.\n\
    \   [RFC4875]  Aggarwal, R., Ed., Papadimitriou, D., Ed., and S.\n           \
    \   Yasukawa, Ed., \"Extensions to Resource Reservation\n              Protocol\
    \ - Traffic Engineering (RSVP-TE) for Point-to-\n              Multipoint TE Label\
    \ Switched Paths (LSPs)\", RFC 4875,\n              DOI 10.17487/RFC4875, May\
    \ 2007,\n              <https://www.rfc-editor.org/info/rfc4875>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC6378]  Weingarten, Y., Ed., Bryant, S.,\
    \ Osborne, E., Sprecher,\n              N., and A. Fulignoli, Ed., \"MPLS Transport\
    \ Profile (MPLS-\n              TP) Linear Protection\", RFC 6378, DOI 10.17487/RFC6378,\n\
    \              October 2011, <https://www.rfc-editor.org/info/rfc6378>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Nobo Akiya, Rahul Aggarwal,\
    \ Eric\n   Osborne, Ross Callon, Loa Andersson, Daniel King, Michael Yue, Alia\n\
    \   Atlas, Olufemi Komolafe, Rob Rennison, Neil Harrison, Kannan Sampath,\n  \
    \ Gregory Mirsky, and Ronhazli Adam for their valuable comments and\n   suggestions\
    \ on this document.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people contributed significantly to the content\
    \ of this\n   document and should be considered coauthors:\n            Autumn\
    \ Liu\n            Ciena\n            United States of America\n            Email:\
    \ hliu@ciena.com\n            Zhenbin Li\n            Huawei Technologies\n  \
    \          Email: zhenbin.li@huawei.com\n            Yimin Shen\n            Juniper\
    \ Networks\n            10 Technology Park Drive\n            Westford, MA  01886\n\
    \            United States of America\n            Email: yshen@juniper.net\n\
    \            Tarek Saad\n            Cisco Systems\n            Email: tsaad@cisco.com\n\
    \            Fengman Xu\n            Verizon\n            2400 N. Glenville Dr\n\
    \            Richardson, TX  75082\n            United States of America\n   \
    \         Email: fengman.xu@verizon.com\n   The following people also contributed\
    \ to the content of this\n   document:\n           Ning So\n           Tata Communications\n\
    \           2613 Fairbourne Cir.\n           Plano, TX  75082\n           United\
    \ States of America\n           Email: ningso01@gmail.com\n           Mehmet Toy\n\
    \           Verizon\n           United States of America\n           Email: mehmet.toy@verizon.com\n\
    \           Lei Liu\n           United States of America\n           Email: liulei.kddi@gmail.com\n\
    \           Renwei Li\n           Huawei Technologies\n           2330 Central\
    \ Expressway\n           Santa Clara, CA  95050\n           United States of America\n\
    \           Email: renwei.li@huawei.com\n           Quintin Zhao\n           Huawei\
    \ Technologies\n           Boston, MA\n           United States of America\n \
    \          Email: quintin.zhao@huawei.com\n           Boris Zhang\n          \
    \ Telus Communications\n           200 Consilium Pl Floor 15\n           Toronto,\
    \ ON  M1H 3J3\n           Canada\n           Email: Boris.Zhang@telus.com\n  \
    \         Markus Jork\n           Juniper Networks\n           10 Technology Park\
    \ Drive\n           Westford, MA  01886\n           United States of America\n\
    \           Email: mjork@juniper.net\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Huaimo Chen (editor)\n   Huawei Technologies\n   Boston,\
    \ MA\n   United States of America\n   Email: huaimo.chen@huawei.com\n   Raveendra\
    \ Torvi (editor)\n   Juniper Networks\n   10 Technology Park Drive\n   Westford,\
    \ MA  01886\n   United States of America\n   Email: rtorvi@juniper.net\n"
