- title: __initial_text__
  contents:
  - '      SNMP MIB extension for Multiprotocol Interconnect over X.25

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in TCP/IP-based internets.\n   In\
    \ particular, it defines objects for managing Multiprotocol\n   Interconnect (including\
    \ IP) traffic carried over X.25.  The objects\n   defined here, along with the\
    \ objects in the \"SNMP MIB extension for\n   the Packet Layer of X.25\"[8], \"\
    SNMP MIB extension for LAPB\"[7], and\n   the \"Definitions of Managed Objects\
    \ for RS-232-like Hardware Devices\"\n   [6], combine to allow management of the\
    \ traffic over an X.25 protocol\n   stack.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. The Network Management Framework .........................\
    \    1\n   2. Objects ..................................................    2\n\
    \   2.1 Format of Definitions ...................................    2\n   3.\
    \ Overview .................................................    3\n   3.1 Scope\
    \ ...................................................    3\n   3.2 Structure of\
    \ MIB objects ................................    3\n   4. Definitions ..............................................\
    \    4\n   5. Acknowledgements .........................................   19\n\
    \   6. References ...............................................   20\n   7.\
    \ Security Considerations ...................................  21\n   8. Author's\
    \ Address .........................................   21\n"
- title: 1.  The Network Management Framework
  contents:
  - "1.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of three\n   components.  These components give the rules\
    \ for defining objects,\n   the definitions of objects, and the protocol for manipulating\n\
    \   objects.\n   The network management framework structures objects in an abstract\n\
    \   information tree. The branches of the tree name objects and the\n   leaves\
    \ of the tree contain the values manipulated to effect\n   management. This tree\
    \ is called the Management Information Base or\n   MIB. The concepts of this tree\
    \ are given in STD 16, RFC 1155, \"The\n   Structure of Management Information\"\
    \ or SMI [1]. The SMI defines the\n   trunk of the tree and the types of objects\
    \ used when defining the\n   leaves. STD 16, RFC 1212, \"Towards Concise MIB Definitions\"\
    \ [3],\n   defines a more concise description mechanism that preserves all the\n\
    \   principals of the SMI.\n   The core MIB definitions for the Internet suite\
    \ of protocols can be\n   found in STD 17, RFC 1213 [4], \"Management Information\
    \ Base for\n   Network Management of TCP/IP-based internets\".\n   STD 15, RFC\
    \ 1157 [2] defines the SNMP protocol itself. The protocol\n   defines how to manipulate\
    \ the objects in a remote MIB.\n   The tree structure of the MIB allows new objects\
    \ to be defined for\n   the purpose of experimentation and evaluation.\n"
- title: 2.  Objects
  contents:
  - "2.  Objects\n   The definition of an object in the MIB requires an object name\
    \ and\n   type.  Object names and types are defined using the subset of\n   Abstract\
    \ Syntax Notation One (ASN.1) [5] defined in the SMI [1].\n   Objects are named\
    \ using ASN.1 object identifiers, administratively\n   assigned names, to specify\
    \ object types.  The object name, together\n   with an optional object instance,\
    \ uniquely identifies a specific\n   instance of an object.  For human convenience,\
    \ we often use a textual\n   string, termed the descriptor, to refer to objects.\n\
    \   Objects also have a syntax that defines the abstract data structure\n   corresponding\
    \ to that object type.  The ASN.1 language [5] provides\n   the primitives used\
    \ for this purpose.  The SMI [1] purposely\n   restricts the ASN.1 constructs\
    \ which may be used for simplicity and\n   ease of implementation.\n"
- title: 2.1.  Format of Definitions
  contents:
  - "2.1.  Format of Definitions\n   Section 4 contains the specification of all object\
    \ types contained in\n   this MIB module.  The object types are defined using\
    \ the conventions\n   defined in the SMI, as amended by the extensions specified\
    \ in\n   \"Towards Concise MIB Definitions\" [3].\n"
- title: 3.  Overview
  contents:
  - '3.  Overview

    '
- title: 3.1.  Scope
  contents:
  - "3.1.  Scope\n   Instances of the objects defined below provide management information\n\
    \   for Multiprotocol Interconnect traffic on X.25 as defined in RFC 1356\n  \
    \ [9].  That RFC describes how X.25 can be used to exchange IP or\n   network\
    \ level protocols. The multiprotocol packets (IP, CLNP, ES-IS,\n   or SNAP) are\
    \ encapsulated in X.25 frames for transmission between\n   nodes.  All nodes that\
    \ implement RFC 1356 must implement this MIB.\n   The objects in this MIB apply\
    \ to the software in the node that\n   manages X.25 connections and performs the\
    \ protocol encapsulation.  A\n   node in this usage maybe the end node source\
    \ or destination host for\n   the packet, or it may be a router or bridge responsible\
    \ for\n   forwarding the packet.  Since RFC 1356 requires X.25, nodes that\n \
    \  implement RFC 1356 must also implement the X.25 MIB, RFC 1382.\n   This MIB\
    \ only applies to Multiprotocol Interconnect over X.25\n   service. It does not\
    \ apply to other software that may also use X.25\n   (for example PAD).  Thus\
    \ the presence, absence, or operation of such\n   software will not directly affect\
    \ any of these objects.  (However\n   connections in use by that software will\
    \ appear in the X.25 MIB).\n"
- title: 3.2.  Structure of MIB objects
  contents:
  - "3.2.  Structure of MIB objects\n   The objects of this MIB are organized into\
    \ three tables:  the\n   mioxPleTable, the mioxPeerTable, and the mioxPeerEncTable.\
    \  All\n   objects in all tables are mandatory for conformance with this MIB.\n\
    \   The mioxPleTable defines information relative to an interface used to\n  \
    \ carry Multiprotocol Interconnect traffic over X.25.  Such interfaces\n   are\
    \ identified by an ifType object in the Internet-standard MIB [4]\n   of ddn-x25\
    \ or rfc877-x25.  Interfaces of type ddn-x25 have a self\n   contained algorithm\
    \ for translating between IP addresses and X.121\n   addresses.  Interfaces of\
    \ type rfc877-x25 do not have such an\n   algorithm.  Note that not all X.25 Interfaces\
    \ will be used to carry\n   Multiprotocol Interconnect traffic. Those interfaces\
    \ not carrying\n   such traffic will not have entries in the mioxPleTable.  The\
    \ entries\n   in the mioxPleTable are only for interfaces that do carry\n   Multiprotocol\
    \ Interconnect traffic over X.25.  Entries in the\n   mioxPleTable are indexed\
    \ by ifIndex to make it easy to find the\n   mioxPleTable entry for an interface.\n\
    \   The mioxPeerTable contains information needed to contact an X.25 Peer\n  \
    \ to exchange packets.  This includes information such as the X.121\n   address\
    \ of the peer and a pointer to the X.25 call parameters needed\n   to place the\
    \ call.  The instance identifiers used for the objects in\n   this table are independent\
    \ of any interface or other tables defined\n   outside this MIB.  This table contains\
    \ the ifIndex value of the X.25\n   interface to use to call a peer.\n   The mioxPeerEncTable\
    \ contains information about the encapsulation\n   type used to communicate with\
    \ a peer.  This table is an extension of\n   the mioxPeerTable in its instance\
    \ identification. Each entry in the\n   mioxPeerTable may have zero or more entries\
    \ in this table.  This\n   table will not have any entries that do not have correspondent\n\
    \   entries in mioxPeerTable.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n          MIOX25-MIB DEFINITIONS  ::= BEGIN\n          IMPORTS\n\
    \                  Counter,\n                  TimeTicks\n                   \
    \       FROM RFC1155-SMI\n                  OBJECT-TYPE\n                    \
    \      FROM RFC-1212\n                  DisplayString, transmission,\n       \
    \           ifIndex\n                          FROM RFC1213-MIB\n            \
    \      InstancePointer\n                          FROM RFC1316-MIB\n         \
    \         X121Address\n                          FROM RFC1382-MIB\n          \
    \        PositiveInteger\n                          FROM RFC1381-MIB;\n      \
    \                    -- IP over X.25 MIB\n          miox    OBJECT IDENTIFIER\
    \ ::= { transmission 38 }\n          mioxPle         OBJECT IDENTIFIER ::= { miox\
    \ 1 }\n          mioxPeer        OBJECT IDENTIFIER ::= { miox 2 }\n          --\
    \ ###########################################################\n          --  \
    \            Ple Table\n          -- ###########################################################\n\
    \          -- Systems that implement RFC 1356 must also implement\n          --\
    \ all objects in this group.\n          mioxPleTable    OBJECT-TYPE\n        \
    \          SYNTAX  SEQUENCE OF MioxPleEntry\n                  ACCESS  not-accessible\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"This table contains information relative to\n           \
    \               an interface to an X.25 Packet Level Entity\n                \
    \          (PLE).\"\n                  ::= { mioxPle 1   }\n          mioxPleEntry\
    \    OBJECT-TYPE\n                  SYNTAX  MioxPleEntry\n                  ACCESS\
    \  not-accessible\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                          \"These objects manage the encapsulation of\n     \
    \                     other protocols within X.25.\"\n                  INDEX\
    \ { ifIndex }\n                  ::= { mioxPleTable 1 }\n          MioxPleEntry\
    \ ::= SEQUENCE {\n                  mioxPleMaxCircuits\n                     \
    \     INTEGER,\n                  mioxPleRefusedConnections\n                \
    \          Counter,\n                  mioxPleEnAddrToX121LkupFlrs\n         \
    \                 Counter,\n                  mioxPleLastFailedEnAddr\n      \
    \                    OCTET STRING,\n                  mioxPleEnAddrToX121LkupFlrTime\n\
    \                          TimeTicks,\n                  mioxPleX121ToEnAddrLkupFlrs\n\
    \                          Counter,\n                  mioxPleLastFailedX121Address\n\
    \                          X121Address,\n                  mioxPleX121ToEnAddrLkupFlrTime\n\
    \                          TimeTicks,\n                  mioxPleQbitFailures\n\
    \                          Counter,\n                  mioxPleQbitFailureRemoteAddress\n\
    \                          X121Address,\n                  mioxPleQbitFailureTime\n\
    \                          TimeTicks,\n                  mioxPleMinimumOpenTimer\n\
    \                          PositiveInteger,\n                  mioxPleInactivityTimer\n\
    \                          PositiveInteger,\n                  mioxPleHoldDownTimer\n\
    \                          PositiveInteger,\n                  mioxPleCollisionRetryTimer\n\
    \                          PositiveInteger,\n                  mioxPleDefaultPeerId\n\
    \                          InstancePointer\n                  }\n          mioxPleMaxCircuits\
    \ OBJECT-TYPE\n                  SYNTAX  INTEGER (0..2147483647)\n           \
    \       ACCESS  read-write\n                  STATUS  mandatory\n            \
    \      DESCRIPTION\n                          \"The maximum number of X.25 circuits\
    \ that\n                          can be open at one time for this interface.\n\
    \                          A value of zero indicates the interface will\n    \
    \                      not allow any additional circuits (as it may\n        \
    \                  soon be shutdown).  A value of 2147483647\n               \
    \           allows an unlimited number of circuits.\"\n                  ::= {\
    \ mioxPleEntry 1 }\n          mioxPleRefusedConnections OBJECT-TYPE\n        \
    \          SYNTAX  Counter\n                  ACCESS  read-only\n            \
    \      STATUS  mandatory\n                  DESCRIPTION\n                    \
    \      \"The number of X.25 calls from a remote\n                          systems\
    \ to this system that were cleared by\n                          this system.\
    \  The interface instance should\n                          identify the X.25\
    \ interface the call came in\n                          on.\"\n              \
    \    ::= { mioxPleEntry 2 }\n          mioxPleEnAddrToX121LkupFlrs OBJECT-TYPE\n\
    \                  SYNTAX  Counter\n                  ACCESS  read-only\n    \
    \              STATUS  mandatory\n                  DESCRIPTION\n            \
    \              \"The number of times a translation from an\n                 \
    \         Encapsulated Address to an X.121 address\n                         \
    \ failed to find a corresponding X.121\n                          address.  Encapsulated\
    \ addresses can be\n                          looked up in the mioxPeerTable or\
    \ translated\n                          via an algorithm as for the DDN.  Addresses\n\
    \                          that are successfully recognized do not\n         \
    \                 increment this counter.  Addresses that are\n              \
    \            not recognized (reflecting an abnormal\n                        \
    \  packet delivery condition) increment this\n                          counter.\n\
    \                          If an address translation fails, it may be\n      \
    \                    difficult to determine which PLE entry\n                \
    \          should count the failure.  In such cases the\n                    \
    \      first likely entry in this table should be\n                          selected.\
    \  Agents should record the failure\n                          even if they are\
    \ unsure which PLE should be\n                          associated with the failure.\"\
    \n                  ::= { mioxPleEntry 3 }\n          mioxPleLastFailedEnAddr\
    \ OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE(2..128))\n       \
    \           ACCESS  read-only\n                  STATUS  mandatory\n         \
    \         DESCRIPTION\n                          \"The last Encapsulated address\
    \ that failed\n                          to find a corresponding X.121 address\
    \ and\n                          caused mioxPleEnAddrToX121LkupFlrs to be\n  \
    \                        incremented.  The first octet of this object\n      \
    \                    contains the encapsulation type, the\n                  \
    \        remaining octets contain the address of that\n                      \
    \    type that failed.  Thus for an IP address,\n                          the\
    \ length will be five octets, the first\n                          octet will\
    \ contain 204 (hex CC), and the\n                          last four octets will\
    \ contain the IP\n                          address.  For a snap encapsulation,\
    \ the\n                          first byte would be 128 (hex 80) and the\n  \
    \                        rest of the octet string would have the snap\n      \
    \                    header.\"\n                  ::= { mioxPleEntry 4 }\n   \
    \       mioxPleEnAddrToX121LkupFlrTime OBJECT-TYPE\n                  SYNTAX \
    \ TimeTicks\n                  ACCESS  read-only\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                          \"The most recent value\
    \ of sysUpTime when the\n                          translation from an Encapsulated\
    \ Address to\n                          X.121 address failed to find a corresponding\n\
    \                          X.121 address.\"\n                  ::= { mioxPleEntry\
    \ 5 }\n          mioxPleX121ToEnAddrLkupFlrs OBJECT-TYPE\n                  SYNTAX\
    \  Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                          \"The number of times\
    \ the translation from an\n                          X.121 address to an Encapsulated\
    \ Address\n                          failed to find a corresponding Encapsulated\n\
    \                          Address.  Addresses successfully recognized\n     \
    \                     by an algorithm do not increment this\n                \
    \          counter.  This counter reflects the number\n                      \
    \    of times call acceptance encountered the\n                          abnormal\
    \ condition of not recognizing the\n                          peer.\"\n      \
    \            ::= { mioxPleEntry 6 }\n          mioxPleLastFailedX121Address OBJECT-TYPE\n\
    \                  SYNTAX  X121Address\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The last X.121 address that caused\n                    \
    \      mioxPleX121ToEnAddrLkupFlrs to increase.\"\n                  ::= { mioxPleEntry\
    \ 7 }\n          mioxPleX121ToEnAddrLkupFlrTime OBJECT-TYPE\n                \
    \  SYNTAX  TimeTicks\n                  ACCESS  read-only\n                  STATUS\
    \  mandatory\n                  DESCRIPTION\n                          \"The most\
    \ recent value of sysUpTime when the\n                          translation from\
    \ an X.121 address to an\n                          Encapsulated Address failed\
    \ to find a\n                          corresponding Encapsulated Address.\"\n\
    \                  ::= { mioxPleEntry 8 }\n          mioxPleQbitFailures OBJECT-TYPE\n\
    \                  SYNTAX  Counter\n                  ACCESS  read-only\n    \
    \              STATUS  mandatory\n                  DESCRIPTION\n            \
    \              \"The number of times a connection was closed\n               \
    \           because of a Q-bit failure.\"\n                  ::= { mioxPleEntry\
    \ 9 }\n          mioxPleQbitFailureRemoteAddress OBJECT-TYPE\n               \
    \   SYNTAX  X121Address\n                  ACCESS  read-only\n               \
    \   STATUS  mandatory\n                  DESCRIPTION\n                       \
    \   \"The remote address of the most recent\n                          (last)\
    \ connection that was closed because of\n                          a Q-bit failure.\"\
    \n                  ::= { mioxPleEntry 10 }\n          mioxPleQbitFailureTime\
    \ OBJECT-TYPE\n                  SYNTAX  TimeTicks\n                  ACCESS \
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                          \"The most recent value of sysUpTime when a\n     \
    \                     connection was closed because of a Q-bit\n             \
    \             failure.  This will also be the last time\n                    \
    \      that mioxPleQbitFailures was incremented.\"\n                  ::= { mioxPleEntry\
    \ 11 }\n          mioxPleMinimumOpenTimer OBJECT-TYPE\n                  SYNTAX\
    \  PositiveInteger\n                  ACCESS  read-write\n                  STATUS\
    \  mandatory\n                  DESCRIPTION\n                          \"The minimum\
    \ time in milliseconds this\n                          interface will keep a connection\
    \ open before\n                          allowing it to be closed.  A value of\
    \ zero\n                          indicates no timer.\"\n                  DEFVAL\
    \ { 0 }\n                  ::= { mioxPleEntry 12 }\n          mioxPleInactivityTimer\
    \ OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS\
    \  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                          \"The amount of time time in milliseconds\n       \
    \                   this interface will keep an idle connection\n            \
    \              open before closing it.  A value of\n                         \
    \ 2147483647 indicates no timer.\"\n                  DEFVAL { 10000 }\n     \
    \             ::= { mioxPleEntry 13 }\n          mioxPleHoldDownTimer    OBJECT-TYPE\n\
    \                  SYNTAX  PositiveInteger\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The hold down timer in milliseconds.  This\n            \
    \              is the minimum amount of time to wait before\n                \
    \          trying another call to a host that was\n                          previously\
    \ unsuccessful.  A value of\n                          2147483647 indicates the\
    \ host will not be\n                          retried.\"\n                  DEFVAL\
    \ { 0 }\n                  ::= { mioxPleEntry 14 }\n          mioxPleCollisionRetryTimer\
    \ OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS\
    \  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                          \"The Collision Retry Timer in milliseconds.\n    \
    \                      The time to delay between call attempts when\n        \
    \                  the maximum number of circuits is exceeded\n              \
    \            in a call attempt.\"\n                  DEFVAL { 0 }\n          \
    \        ::= { mioxPleEntry 15 }\n          mioxPleDefaultPeerId OBJECT-TYPE\n\
    \                  SYNTAX  InstancePointer\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"This identifies the instance of the index\n             \
    \             in the mioxPeerTable for the default\n                         \
    \ parameters to use with this interface.\n                          The entry\
    \ identified by this object may have\n                          a zero length\
    \ Encapsulation address and a\n                          zero length X.121 address.\n\
    \                          These default parameters are used with\n          \
    \                connections to hosts that do not have\n                     \
    \     entries in the mioxPeerTable.  Such\n                          connections\
    \ occur when using ddn-x25 IP-X.25\n                          address mapping\
    \ or when accepting\n                          connections from other hosts not\
    \ in the\n                          mioxPeerTable.\n                         \
    \ The mioxPeerEncTable entry with the same\n                          index as\
    \ the mioxPeerTable entry specifies\n                          the call encapsulation\
    \ types this PLE will\n                          accept for peers not in the mioxPeerTable.\n\
    \                          If the mioxPeerEncTable doesn't contain any\n     \
    \                     entries, this PLE will not accept calls from\n         \
    \                 entries not in the mioxPeerTable.\"\n                  ::= {\
    \ mioxPleEntry 16 }\n          -- ###########################################################\n\
    \          --              Peer Table\n          -- ###########################################################\n\
    \          -- Systems that implement RFC 1356 must also implement\n          --\
    \ all objects in this group.\n          mioxPeerTable OBJECT-TYPE\n          \
    \        SYNTAX  SEQUENCE OF MioxPeerEntry\n                  ACCESS  not-accessible\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"This table contains information about the\n             \
    \             possible peers this machine may exchange\n                     \
    \     packets with.\"\n                  ::= { mioxPeer 1 }\n          mioxPeerEntry\
    \ OBJECT-TYPE\n                  SYNTAX  MioxPeerEntry\n                  ACCESS\
    \  not-accessible\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                          \"Per peer information.\"\n                  INDEX\
    \ { mioxPeerIndex   }\n                  ::= { mioxPeerTable 1 }\n          MioxPeerEntry\
    \ ::= SEQUENCE {\n                  mioxPeerIndex\n                          PositiveInteger,\n\
    \                  mioxPeerStatus\n                          INTEGER,\n      \
    \            mioxPeerMaxCircuits\n                          PositiveInteger,\n\
    \                  mioxPeerIfIndex\n                          PositiveInteger,\n\
    \                  mioxPeerConnectSeconds\n                          Counter,\n\
    \                  mioxPeerX25CallParamId\n                          InstancePointer,\n\
    \                  mioxPeerEnAddr\n                          OCTET STRING,\n \
    \                 mioxPeerX121Address\n                          X121Address,\n\
    \                  mioxPeerX25CircuitId\n                          InstancePointer,\n\
    \                  mioxPeerDescr\n                          DisplayString\n  \
    \                }\n          mioxPeerIndex   OBJECT-TYPE\n                  SYNTAX\
    \  PositiveInteger\n                  ACCESS  read-only\n                  STATUS\
    \  mandatory\n                  DESCRIPTION\n                          \"An index\
    \ value that distinguished one entry\n                          from another.\
    \  This index is independent of\n                          any other index.\"\n\
    \                  ::= { mioxPeerEntry 1 }\n          -- Systems can claim conformance\
    \ with this MIB without\n          -- implementing sets to mioxPeerStatus with\
    \ a value of\n          -- clearCall or makeCall.\n          -- All other defined\
    \ values must be accepted.\n          -- Implementors should realize that allowing\
    \ these values\n          -- provides richer management, and implementations\n\
    \          -- are encouraged to accept these values.\n          mioxPeerStatus\
    \ OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                         \
    \         valid (1),\n                                  createRequest (2),\n \
    \                                 underCreation (3),\n                       \
    \           invalid (4),\n                                  clearCall (5),\n \
    \                                 makeCall (6)\n                             \
    \     }\n                  ACCESS  read-write\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                          \"This reports the status\
    \ of a peer entry.\n                          A value of valid indicates a normal\
    \ entry\n                          that is in use by the agent.  A value of\n\
    \                          underCreation indicates a newly created\n         \
    \                 entry which isn't yet in use because the\n                 \
    \         creating management station is still setting\n                     \
    \     values.\n                          The value of invalid indicates the entry\
    \ is\n                          no longer in use and the agent is free to\n  \
    \                        delete the entry at any time.  A management\n       \
    \                   station is also free to use an entry in the\n            \
    \              invalid state.\n                          Entries are created by\
    \ setting a value of\n                          createRequest.  Only non-existent\
    \ or invalid\n                          entries can be set to createRequest. \
    \ Upon\n                          receiving a valid createRequest, the agent\n\
    \                          will create an entry in the underCreation\n       \
    \                   state.  This object can not be set to a\n                \
    \          value of underCreation directly, entries can\n                    \
    \      only be created by setting a value of\n                          createRequest.\
    \  Entries that exist in other\n                          than the invalid state\
    \ can not be set to\n                          createRequest.\n              \
    \            Entries with a value of underCreation are\n                     \
    \     not used by the system and the management\n                          station\
    \ can change the values of other\n                          objects in the table\
    \ entry.  Management\n                          stations should also remember\
    \ to configure\n                          values in the mioxPeerEncTable with\
    \ the same\n                          peer index value as this peer entry.\n \
    \                         An entry in the underCreation state can be\n       \
    \                   set to valid or invalid.  Entries in the\n               \
    \           underCreation state will stay in that state\n                    \
    \      until 1) the agent times them out, 2) they\n                          are\
    \ set to valid, 3) they are set to\n                          invalid.  If an\
    \ agent notices an entry has\n                          been in the underCreation\
    \ state for an\n                          abnormally long time, it may decide\
    \ the\n                          management station has failed and invalidate\n\
    \                          the entry.  A prudent agent will understand\n     \
    \                     that the management station may need to wait\n         \
    \                 for human input and will allow for that\n                  \
    \        possibility in its determination of this\n                          abnormally\
    \ long period.\n                          Once a management station has completed\
    \ all\n                          fields of an entry, it will set a value of\n\
    \                          valid.  This causes the entry to be\n             \
    \             activated.\n                          Entries in the valid state\
    \ may also be set\n                          to makeCall or clearCall to make\
    \ or clear\n                          X.25 calls to the peer.  After such a set\n\
    \                          request the entry will still be in the valid\n    \
    \                      state.  Setting a value of makeCall causes\n          \
    \                the agent to initiate an X.25 call request\n                \
    \          to the peer specified by the entry.  Setting\n                    \
    \      a value of clearCall causes the agent to\n                          initiate\
    \ clearing one X.25 call present to\n                          the peer.  Each\
    \ set request will initiate\n                          another call or clear request\
    \ (up to the\n                          maximum allowed); this means that management\n\
    \                          stations that fail to get a response to a\n       \
    \                   set request should query to see if a call\n              \
    \            was in fact placed or cleared before\n                          retrying\
    \ the request.  Entries not in the\n                          valid state can\
    \ not be set to makeCall or\n                          clearCall.\n          \
    \                The values of makeCall and clearCall provide\n              \
    \            for circuit control on devices which perform\n                  \
    \        Ethernet Bridging using static circuit\n                          assignment\
    \ without address recognition;\n                          other devices which\
    \ dynamically place calls\n                          based on destination addresses\
    \ may reject\n                          such requests.\n                     \
    \     An agent that (re)creates a new entry\n                          because\
    \ of a set with createRequest, should\n                          also (re)create\
    \ a mioxPeerEncTable entry\n                          with a mioxPeerEncIndex\
    \ of 1, and a\n                          mioxPeerEncType of 204 (hex CC).\"\n\
    \                  ::= { mioxPeerEntry 2 }\n          mioxPeerMaxCircuits OBJECT-TYPE\n\
    \                  SYNTAX  PositiveInteger\n                  ACCESS  read-write\n\
    \                  STATUS    mandatory\n                  DESCRIPTION\n      \
    \                    \"The maximum number of X.25 circuits allowed\n         \
    \                 to this peer.\"\n                  DEFVAL { 1 }\n          \
    \        ::= { mioxPeerEntry 3 }\n          mioxPeerIfIndex OBJECT-TYPE\n    \
    \              SYNTAX  PositiveInteger\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The value of the ifIndex object for the\n               \
    \           interface to X.25 to use to call the peer.\"\n                  DEFVAL\
    \ { 1 }\n                  ::= { mioxPeerEntry 4 }\n          mioxPeerConnectSeconds\
    \ OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The number of seconds a call to this peer\n             \
    \             was active.  This counter will be\n                          incremented\
    \ by one for every second a\n                          connection to a peer was\
    \ open.  If two calls\n                          are open at the same time, one\
    \ second of\n                          elapsed real time will results in two\n\
    \                          seconds of connect time.\"\n                  ::= {\
    \ mioxPeerEntry 5 }\n          mioxPeerX25CallParamId OBJECT-TYPE\n          \
    \        SYNTAX  InstancePointer\n                  ACCESS  read-write\n     \
    \             STATUS  mandatory\n                  DESCRIPTION\n             \
    \             \"The instance of the index object in the\n                    \
    \      x25CallParmTable from RFC 1382 for the X.25\n                         \
    \ call parameters used to communicate with the\n                          remote\
    \ host.  The well known value {0 0}\n                          indicates no call\
    \ parameters specified.\"\n                  DEFVAL { {0 0} }\n              \
    \    ::= { mioxPeerEntry 6 }\n          mioxPeerEnAddr  OBJECT-TYPE\n        \
    \          SYNTAX    OCTET STRING (SIZE (0..128))\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The Encapsulation address of the remote\n               \
    \           host mapped by this table entry.  A length\n                     \
    \     of zero indicates the remote IP address is\n                          unknown\
    \ or unspecified for use as a PLE\n                          default.\n      \
    \                    The first octet of this object contains the\n           \
    \               encapsulation type, the remaining octets\n                   \
    \       contain an address of that type.  Thus for\n                         \
    \ an IP address, the length will be five\n                          octets, the\
    \ first octet will contain 204\n                          (hex CC), and the last\
    \ four octets will\n                          contain the IP address.  For a snap\n\
    \                          encapsulation, the first byte would be 128\n      \
    \                    (hex 80) and the rest of the octet string\n             \
    \             would have the snap header.\"\n                  DEFVAL { ''h }\n\
    \                  ::= { mioxPeerEntry 7 }\n          mioxPeerX121Address OBJECT-TYPE\n\
    \                  SYNTAX  X121Address\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The X.25 address of the remote host mapped\n            \
    \              by this table entry.  A zero length string\n                  \
    \        indicates the X.25 address is unspecified\n                         \
    \ for use as the PLE default.\"\n                  DEFVAL { ''h }\n          \
    \        ::= { mioxPeerEntry 8 }\n          -- Systems can claim conformance to\
    \ this MIB without\n          -- implementing sets to mioxPeerX25CircuitId.\n\
    \          -- However systems that use PVCs with RFC1356\n          -- are encouraged\
    \ to implement sets.\n          mioxPeerX25CircuitId OBJECT-TYPE\n           \
    \       SYNTAX  InstancePointer\n                  ACCESS  read-write\n      \
    \            STATUS  mandatory\n                  DESCRIPTION\n              \
    \            \"This object identifies the instance of the\n                  \
    \        index for the X.25 circuit open to the peer\n                       \
    \   mapped by this table entry.  The well known\n                          value\
    \ {0 0} indicates no connection\n                          currently active. \
    \ For multiple connections,\n                          this identifies the index\
    \ of a multiplexing\n                          table entry for the connections.\
    \  This can\n                          only be written to configure use of PVCs\n\
    \                          which means the identified circuit table\n        \
    \                  entry for a write must be a PVC.\"\n                  DEFVAL\
    \ { {0 0} }\n                  ::= { mioxPeerEntry 9 }\n          mioxPeerDescr\
    \   OBJECT-TYPE\n                  SYNTAX  DisplayString (SIZE (0..255))\n   \
    \               ACCESS  read-write\n                  STATUS  mandatory\n    \
    \              DESCRIPTION\n                          \"This object returns any\
    \ identification\n                          information about the peer.  An agent\
    \ may\n                          supply the comment information found in the\n\
    \                          configuration file entry for this peer.  A\n      \
    \                    zero length string indicates no information\n           \
    \               available.\"\n                  DEFVAL { ''h }\n             \
    \     ::= { mioxPeerEntry 10 }\n          -- ###########################################################\n\
    \          --              Peer Encapsulation Table\n          -- ###########################################################\n\
    \          mioxPeerEncTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF\
    \ MioxPeerEncEntry\n                  ACCESS  not-accessible\n               \
    \   STATUS  mandatory\n                  DESCRIPTION\n                       \
    \   \"This table contains the list of\n                          encapsulations\
    \ used to communicate with a\n                          peer.  This table has\
    \ two indexes, the first\n                          identifies the peer, the second\n\
    \                          distinguishes encapsulation types.\n              \
    \            The first index identifies the corresponding\n                  \
    \        entry in the mioxPeerTable.  The second\n                          index\
    \ gives the priority of the different\n                          encapsulations.\n\
    \                          The encapsulation types are ordered in\n          \
    \                priority order.  For calling a peer, the\n                  \
    \        first entry (mioxPeerEncIndex of 1) is tried\n                      \
    \    first.  If the call doesn't succeed because\n                          the\
    \ remote host clears the call due to\n                          incompatible call\
    \ user data, the next entry\n                          in the list is tried. \
    \ Each entry is tried\n                          until the list is exhausted.\n\
    \                          For answering a call, the encapsulation type\n    \
    \                      requested by the peer must be found the list\n        \
    \                  or the call will be refused.  If there are\n              \
    \            no entries in this table for a peer, all\n                      \
    \    call requests from the peer will be refused.\n                          Objects\
    \ in this table can only be set when\n                          the mioxPeerStatus\
    \ object with the same\n                          index has a value of underCreation.\
    \  When\n                          that status object is set to invalid and\n\
    \                          deleted, the entry in this table with that\n      \
    \                    peer index must also be deleted.\"\n                  ::=\
    \ { mioxPeer 2 }\n          mioxPeerEncEntry OBJECT-TYPE\n                  SYNTAX\
    \  MioxPeerEncEntry\n                  ACCESS  not-accessible\n              \
    \    STATUS  mandatory\n                  DESCRIPTION\n                      \
    \    \"Per connection information.\"\n                  INDEX { mioxPeerIndex,\
    \ mioxPeerEncIndex}\n                  ::= { mioxPeerEncTable 1 }\n          MioxPeerEncEntry\
    \ ::= SEQUENCE {\n                  mioxPeerEncIndex\n                       \
    \   PositiveInteger,\n                  mioxPeerEncType\n                    \
    \      INTEGER\n                  }\n          mioxPeerEncIndex        OBJECT-TYPE\n\
    \                  SYNTAX  PositiveInteger\n                  ACCESS  read-only\n\
    \                  STATUS    mandatory\n                  DESCRIPTION\n      \
    \                    \"The second index in the table which\n                 \
    \         distinguishes different encapsulation\n                          types.\"\
    \n                  ::= { mioxPeerEncEntry 1 }\n          mioxPeerEncType OBJECT-TYPE\n\
    \                  SYNTAX  INTEGER (0..256)\n                  ACCESS  read-write\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \                  \"The value of the encapsulation type.  For\n             \
    \             IP encapsulation this will have a value of\n                   \
    \       204 (hex CC).  For SNAP encapsulated\n                          packets,\
    \ this will have a value of 128 (hex\n                          80).  For CLNP,\
    \ ISO 8473, this will have a\n                          value of 129 (hex 81).\
    \  For ES-ES, ISO 9542,\n                          this will have a value of 130\
    \ (hex 82).  A\n                          value of 197 (hex C5) identifies the\
    \ Blacker\n                          X.25 encapsulation.  A value of 0,\n    \
    \                      identifies the Null encapsulation.\n                  \
    \        This value can only be written when the\n                          mioxPeerStatus\
    \ object with the same\n                          mioxPeerIndex has a value of\
    \ underCreation.\n                          Setting this object to a value of\
    \ 256\n                          deletes the entry.  When deleting an entry,\n\
    \                          all other entries in the mioxPeerEncTable\n       \
    \                   with the same mioxPeerIndex and with an\n                \
    \          mioxPeerEncIndex higher then the deleted\n                        \
    \  entry, will all have their mioxPeerEncIndex\n                          values\
    \ decremented by one.\"\n                  ::= { mioxPeerEncEntry 2 }\n      \
    \    -- ###########################################################\n        \
    \  END\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document was produced by the x25mib working group:\n\
    \               Fred Baker, ACC\n               Art Berggreen, ACC\n         \
    \      Frank Bieser\n               Gary Bjerke, Tandem\n               Bill Bowman,\
    \ HP\n               Christopher Bucci, Datability\n               Charles Carvalho,\
    \ ACC\n               Jeff Case, University of Tennessee at Knoxville\n      \
    \         Angela Chen, HP\n               Carson Cheung, BNR\n               Tom\
    \ Daniel, Spider Systems\n               Chuck Davin, MIT\n               Billy\
    \ Durham, Honeywell\n               Richard Fox, Synoptics\n               Doug\
    \ Geller, Data General\n               Herve Goguely, LIR Corp\n             \
    \  Andy Goldthorpe, British-Telecom\n               Walter D. Guilarte\n     \
    \          David Gurevich\n               Steve Huston, Consultant\n         \
    \      Jon Infante, ICL\n               Frank Kastenholz, FTP Software\n     \
    \          Zbigniew Kielczewski, Eicon\n               Cheryl Krupezak, Georgia\
    \ Tech\n               Mats Lindstrom, Diab Data AB\n               Andrew Malis,\
    \ BBN\n               Evan McGinnis, 3Com\n               Gary (G.P.)Mussar, BNR\n\
    \               Chandy Nilakantan, 3Com\n               Randy Pafford, Data General\n\
    \               Ragnar Paulson, The Software Group Limited\n               Dave\
    \ Perkins, Synoptics\n               Walter Pinkarschewsky, DEC\n            \
    \   Karen Quidley, Data General\n               Chris Ranch, Novell\n        \
    \       Paul S. Rarey, DHL Systems Inc.\n               Jim Roche, Newbridge Research\n\
    \               Philippe Roger, LIR Corp.\n               Timon Sloane\n     \
    \          Mike Shand, DEC\n               Brad Steina, Microcom\n           \
    \    Bob Stewart, Xyplex\n               Tom Sullivan, Data General\n        \
    \       Rodney Thayer, Sable Technology Corporation\n               Mark Therieau,\
    \ Microcom\n               Jane Thorn, Data General\n               Dean Throop,\
    \ Data General\n               Maurice Turcotte, Racal Datacom\n             \
    \  Mike Zendels, Data General\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1] Rose M., and K. McCloghrie, \"Structure and Identification\
    \ of\n       Management Information for TCP/IP-based internets\", STD 16, RFC\n\
    \       1155, Performance Systems International, Hughes LAN Systems, May\n   \
    \    1990.\n   [2] Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple\n\
    \       Network Management Protocol\", STD 15, RFC 1157, SNMP Research,\n    \
    \   Performance Systems International, Performance Systems\n       International,\
    \ MIT Laboratory for Computer Science, May 1990.\n   [3] Rose, M. and K. McCloghrie,\
    \ Editors, \"Towards Concise MIB\n       Definitions\", STD 16, RFC 1212, Performance\
    \ Systems\n       International, Hughes LAN Systems, March 1991.\n   [4] Rose\
    \ M., Editor, \"Management Information Base for Network\n       Management of\
    \ TCP/IP-based internets\", STD 17, RFC 1213.\n       Performance Systems International,\
    \ March 1991.\n   [5] \"Information processing systems - Open Systems Interconnection\
    \ -\n       Specification of Abstract Syntax Notation One (ASN.1)\",\n       International\
    \ Organization for Standardization.  International\n       Standard 8824, December,\
    \ 1987.\n   [6] Stewart, B., Editor, \"Definitions of Managed Objects for RS-232-\n\
    \       like Hardware Devices\", RFC 1317, Xyplex, Inc., April 1992.\n   [7] Throop,\
    \ D., and F. Baker, \"SNMP MIB extension for X.25 LAPB\", RFC\n       1381, Data\
    \ General Corporation, Advanced Computer Communications,\n       November 1992.\n\
    \   [8] Throop, D., Editor, \"SNMP MIB extension for the X.25 Packet\n       Layer\"\
    , RFC 1382, Data General Corporation, November 1991.\n   [9] Malis, A., Robinson,\
    \ D., and R. Ullmann \"Multiprotocol\n       Interconnect on X.25 and ISDN in\
    \ the Packet Mode\", RFC 1356, BBN\n       Communications, Computervision Systems\
    \ Integration, Process\n       Software Corporation, August 1992.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   Dean D. Throop\n   Data General Corporation\n   62 Alexander\
    \ Dr.\n   Research Triangle Park, NC 27709\n   Phone: (919) 248-6081\n   EMail:\
    \ throop@dg-rtp.dg.com\n"
