- contents:
  - ''
  title: __initial_text__
- contents:
  - 'Network File System (NFS) Upper-Layer Binding to RPC-over-RDMA Version 1

    '
  title: Network File System (NFS) Upper-Layer Binding to RPC-over-RDMA Version 1
- contents:
  - "Abstract\n   This document specifies Upper-Layer Bindings of Network File System\n
    \  (NFS) protocol versions to RPC-over-RDMA version 1, thus enabling the\n   use
    of Direct Data Placement.  This document obsoletes RFC 5667.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8267.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n   2.  Requirements Language . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Reply Size Estimation . . . . . . . . . . . . . . . . . . .
    .   5\n     3.1.  Short Reply Chunk Retry . . . . . . . . . . . . . . . . .   5\n
    \  4.  Upper-Layer Binding for NFS Versions 2 and 3  . . . . . . . .   6\n     4.1.
    \ Reply Size Estimation . . . . . . . . . . . . . . . . . .   7\n     4.2.  RPC
    Binding Considerations  . . . . . . . . . . . . . . .   7\n   5.  Upper-Layer
    Bindings for NFS Versions 2 and 3 Auxiliary\n       Protocols . . . . . . . .
    . . . . . . . . . . . . . . . . . .   7\n     5.1.  MOUNT, NLM, and NSM Protocols
    . . . . . . . . . . . . . .   8\n     5.2.  NFSACL Protocol . . . . . . . . .
    . . . . . . . . . . . .   8\n   6.  Upper-Layer Binding for NFS Version 4 . .
    . . . . . . . . . .   8\n     6.1.  DDP-Eligibility . . . . . . . . . . . . .
    . . . . . . . .   8\n     6.2.  Reply Size Estimation . . . . . . . . . . . .
    . . . . . .   9\n     6.3.  RPC Binding Considerations  . . . . . . . . . . .
    . . . .  10\n     6.4.  NFS COMPOUND Requests . . . . . . . . . . . . . . . .
    . .  10\n     6.5.  NFS Callback Requests . . . . . . . . . . . . . . . . . .
    \ 13\n     6.6.  Session-Related Considerations  . . . . . . . . . . . . .  14\n
    \    6.7.  Transport Considerations  . . . . . . . . . . . . . . . .  15\n   7.
    \ Extending NFS Upper-Layer Bindings  . . . . . . . . . . . . .  16\n   8.  Security
    Considerations . . . . . . . . . . . . . . . . . . .  16\n   9.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  17\n   10. References  . . . . . .
    . . . . . . . . . . . . . . . . . . .  17\n     10.1.  Normative References .
    . . . . . . . . . . . . . . . . .  17\n     10.2.  Informative References . .
    . . . . . . . . . . . . . . .  18\n   Appendix A.  Changes Since RFC 5667 . .
    . . . . . . . . . . . . .  20\n   Acknowledgments . . . . . . . . . . . . . .
    . . . . . . . . . . .  21\n   Author's Address  . . . . . . . . . . . . . . .
    . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The RPC-over-RDMA version 1 transport may employ Direct
    Data\n   Placement (DDP) to convey data payloads associated with RPC\n   transactions
    [RFC8166].  To enable successful interoperation, RPC\n   client and server implementations
    using RPC-over-RDMA version 1 must\n   agree which External Data Representation
    (XDR) data items and RPC\n   procedures are eligible to use DDP.\n   An Upper-Layer
    Binding specifies this agreement for one or more\n   versions of one RPC program.
    \ Other operational details, such as RPC\n   binding assignments, pairing Write
    chunks with result data items, and\n   reply size estimation, are also specified
    by this Binding.\n   This document contains material required of Upper-Layer Bindings,
    as\n   specified in [RFC8166], for the following NFS protocol versions:\n   o
    \ NFS version 2 [RFC1094]\n   o  NFS version 3 [RFC1813]\n   o  NFS version 4.0
    [RFC7530]\n   o  NFS version 4.1 [RFC5661]\n   o  NFS version 4.2 [RFC7862]\n
    \  Upper-Layer Bindings are also provided for auxiliary protocols used\n   with
    NFS versions 2 and 3 (see Section 5).\n   This document assumes the reader is
    already familiar with concepts\n   and terminology defined in [RFC8166] and the
    documents it references.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 2.  Requirements Language
- contents:
  - "3.  Reply Size Estimation\n   During the construction of each RPC Call message,
    a requester is\n   responsible for allocating appropriate resources for receiving
    the\n   corresponding Reply message.  If the requester expects the RPC Reply\n
    \  message will be larger than its inline threshold, it provides Write\n   and/or
    Reply chunks wherein the responder can place results and the\n   Reply's Payload
    stream.\n   A reply resource overrun occurs if the RPC Reply Payload stream does\n
    \  not fit into the provided Reply chunk or if no Reply chunk was\n   provided
    and the Payload stream does not fit inline.  This prevents\n   the responder from
    returning the Upper-Layer reply to the requester.\n   Therefore, reliable reply
    size estimation is necessary to ensure\n   successful interoperation.\n   In most
    cases, the NFS protocol's XDR definition provides enough\n   information to enable
    an NFS client to predict the maximum size of\n   the expected Reply message.  If
    there are variable-size data items in\n   the result, the maximum size of the
    RPC Reply message can be\n   estimated as follows:\n   o  The client requests
    only a specific portion of an object (e.g.,\n      using the \"count\" and \"offset\"
    fields in an NFS READ).\n   o  The client limits the number of results (e.g.,
    using the \"count\"\n      field of an NFS READDIR request).\n   o  The client
    has already cached the size of the whole object it is\n      about to request
    (e.g., via a previous NFS GETATTR request).\n   o  The client and server have
    negotiated a maximum size for all calls\n      and responses (e.g., using a CREATE_SESSION
    operation).\n"
  - contents:
    - "3.1.  Short Reply Chunk Retry\n   In a few cases, either the size of one or
      more returned data items or\n   the number of returned data items cannot be
      known in advance of\n   forming an RPC Call.\n   If an NFS server finds that
      the NFS client provided inadequate\n   receive resources to return the whole
      Reply, it returns an RPC-level\n   error or a transport error, such as ERR_CHUNK.\n
      \  In response to these errors, an NFS client can choose to:\n   o  terminate
      the RPC transaction immediately with an error, or\n   o  allocate a larger Reply
      chunk and send the same request as a new\n      RPC transaction (a new Transaction
      ID (XID) should be assigned to\n      the retransmitted request to avoid matching
      a cached RPC Reply\n      that caches the original error).  The NFS client should
      avoid\n      retrying the request indefinitely because a responder may return\n
      \     ERR_CHUNK for a variety of reasons.\n   Subsequent sections of this document
      discuss exactly which operations\n   might have ultimate difficulty with reply
      size estimation.  These\n   operations are eligible for \"short Reply chunk
      retry\".  Unless\n   explicitly mentioned as applicable, short Reply chunk retry
      should\n   not be used since accurate reply size estimation is problematic in\n
      \  only a few cases.  In all other cases, reply size underestimation is\n   considered
      a correctable implementation bug.\n   NFS server implementations can avoid connection
      loss by first\n   confirming that target RDMA segments are large enough to receive\n
      \  results before initiating explicit RDMA operations.\n"
    title: 3.1.  Short Reply Chunk Retry
  title: 3.  Reply Size Estimation
- contents:
  - "4.  Upper-Layer Binding for NFS Versions 2 and 3\n   The Upper-Layer Binding
    specification in this section applies to NFS\n   versions 2 [RFC1094] and 3 [RFC1813].
    \ For brevity, in this document\n   a \"Legacy NFS client\" refers to an NFS client
    using versions 2 or 3\n   of the NFS RPC program (100003) to communicate with
    an NFS server.\n   Likewise, a \"Legacy NFS server\" is an NFS server communicating
    with\n   clients using NFS versions 2 or 3.\n   The following XDR data items in
    NFS versions 2 and 3 are\n   DDP-eligible:\n   o  the opaque file data argument
    in the NFS WRITE procedure\n   o  the pathname argument in the NFS SYMLINK procedure\n
    \  o  the opaque file data result in the NFS READ procedure\n   o  the pathname
    result in the NFS READLINK procedure\n   All other argument or result data items
    in NFS versions 2 and 3 are\n   not DDP-eligible.\n   A transport error does not
    give an indication of whether the server\n   has processed the arguments of the
    RPC Call or whether the server has\n   accessed or modified client memory associated
    with that RPC.\n"
  - contents:
    - "4.1.  Reply Size Estimation\n   A Legacy NFS client determines the maximum
      reply size for each\n   operation using the criteria outlined in Section 3.
      \ There are no\n   operations in NFS versions 2 or 3 that benefit from short
      Reply chunk\n   retry.\n"
    title: 4.1.  Reply Size Estimation
  - contents:
    - "4.2.  RPC Binding Considerations\n   Legacy NFS servers traditionally listen
      for clients on UDP and TCP\n   port 2049.  Additionally, they register these
      ports with a local\n   portmapper [RFC1833] service.\n   A Legacy NFS server
      supporting RPC-over-RDMA version 1 on such a\n   network and registering itself
      with the RPC portmapper MAY choose an\n   arbitrary port or MAY use the alternative
      well-known port number for\n   its RPC-over-RDMA service (see Section 9).  The
      chosen port MAY be\n   registered with the RPC portmapper under the netids assigned
      in\n   [RFC8166].\n"
    title: 4.2.  RPC Binding Considerations
  title: 4.  Upper-Layer Binding for NFS Versions 2 and 3
- contents:
  - "5.  Upper-Layer Bindings for NFS Versions 2 and 3 Auxiliary Protocols\n   NFS
    versions 2 and 3 are typically deployed with several other\n   protocols, sometimes
    referred to as \"NFS auxiliary protocols\".  These\n   are distinct RPC programs
    that define procedures that are not part of\n   the NFS RPC program (100003).
    \ The Upper-Layer Bindings in this\n   section apply to:\n   o  versions 2 and
    3 of the MOUNT RPC program (100005) [RFC1813];\n   o  versions 1, 3, and 4 of
    the NLM (Network Lock Manager) RPC program\n      (100021) [RFC1813];\n   o  version
    1 of the NSM (Network Status Monitor) RPC program\n      (100024), which is described
    in Chapter 11 of [XNFS]; and\n   o  version 1 of the NFSACL RPC program (100227),
    which does not have\n      a public definition.  NFSACL is treated in this document
    as a de\n      facto standard, as there are several interoperating\n      implementations.\n"
  - contents:
    - "5.1.  MOUNT, NLM, and NSM Protocols\n   Historically, NFS/RDMA implementations
      have chosen to convey the\n   MOUNT, NLM, and NSM protocols via TCP.  To enable
      interoperation of\n   these protocols when NFS/RDMA is in use, a Legacy NFS
      server MUST\n   provide support for these protocols via TCP.\n"
    title: 5.1.  MOUNT, NLM, and NSM Protocols
  - contents:
    - "5.2.  NFSACL Protocol\n   Legacy clients and servers that support the NFSACL
      RPC program\n   typically convey NFSACL procedures on the same connection as
      the NFS\n   RPC program (100003).  This obviates the need for separate rpcbind\n
      \  queries to discover server support for this RPC program.\n   Access Control
      Lists (ACLs) are typically small, but even large ACLs\n   must be encoded and
      decoded to some degree.  Thus, no data item in\n   this upper-layer protocol
      is DDP-eligible.\n   For NFSACL procedures whose Replies do not include an ACL
      object, the\n   size of a Reply is determined directly from the NFSACL RPC program's\n
      \  XDR definition.\n   There is no protocol-specified size limit for NFS version
      3 ACLs, and\n   there is no mechanism in either the NFSACL or NFS RPC programs
      for a\n   Legacy client to ascertain the largest ACL a Legacy server can\n   return.
      \ Legacy client implementations should choose a maximum size\n   for ACLs based
      on their own internal limits.\n   Because an NFSACL client cannot know in advance
      how large a returned\n   ACL will be, it can use short Reply chunk retry when
      an NFSACL GETACL\n   operation encounters a transport error.\n"
    title: 5.2.  NFSACL Protocol
  title: 5.  Upper-Layer Bindings for NFS Versions 2 and 3 Auxiliary Protocols
- contents:
  - "6.  Upper-Layer Binding for NFS Version 4\n   The Upper-Layer Binding specification
    in this section applies to\n   versions of the NFS RPC program defined in NFS
    versions 4.0\n   [RFC7530], 4.1 [RFC5661], and 4.2 [RFC7862].\n"
  - contents:
    - "6.1.  DDP-Eligibility\n   Only the following XDR data items in the COMPOUND
      procedure of all\n   NFS version 4 minor versions are DDP-eligible:\n   o  The
      opaque data field in the WRITE4args structure\n   o  The linkdata field of the
      NF4LNK arm in the createtype4 union\n   o  The opaque data field in the READ4resok
      structure\n   o  The linkdata field in the READLINK4resok structure\n"
    title: 6.1.  DDP-Eligibility
  - contents:
    - "6.2.  Reply Size Estimation\n   Within NFS version 4, there are certain variable-length
      result data\n   items whose maximum size cannot be estimated by clients reliably\n
      \  because there is no protocol-specified size limit on these arrays.\n   These
      include:\n   o  the attrlist4 field;\n   o  fields containing ACLs such as fattr4_acl,
      fattr4_dacl, and\n      fattr4_sacl;\n   o  fields in the fs_locations4 and
      fs_locations_info4 data\n      structures; and\n   o  fields opaque to the NFS
      version 4 protocol that pertain to pNFS\n      (parallel NFS) layout metadata,
      such as loc_body, loh_body,\n      da_addr_body, lou_body, lrf_body, fattr_layout_types,
      and\n      fs_layout_types.\n"
    - contents:
      - "6.2.1.  Reply Size Estimation for Minor Version 0\n   The NFS version 4.0
        protocol itself does not impose any bound on the\n   size of NFS calls or
        responses.\n   Some of the data items enumerated in Section 6.2 (in particular,
        the\n   items related to ACLs and fs_locations) make it difficult to predict\n
        \  the maximum size of NFS version 4.0 Replies that interrogate\n   variable-length
        fattr4 attributes.  Client implementations might rely\n   on their own internal
        architectural limits to constrain the reply\n   size, but such limits are
        not always guaranteed to be reliable.\n   When an especially large fattr4
        result is expected, a Reply chunk\n   might be required.  An NFS version 4.0
        client can use short Reply\n   chunk retry when an NFS COMPOUND containing
        a GETATTR operation\n   encounters a transport error.\n   The use of NFS COMPOUND
        operations raises the possibility of requests\n   that combine a non-idempotent
        operation (e.g., RENAME) with a GETATTR\n   operation that requests one or
        more variable-length results.  This\n   combination should be avoided by ensuring
        that any GETATTR operation\n   that requests a result of unpredictable length
        is sent in an NFS\n   COMPOUND by itself.\n"
      title: 6.2.1.  Reply Size Estimation for Minor Version 0
    - contents:
      - "6.2.2.  Reply Size Estimation for Minor Version 1 and Newer Minor\n        Versions\n
        \  In NFS version 4.1 and newer minor versions, the csa_fore_chan_attrs\n
        \  argument of the CREATE_SESSION operation contains a\n   ca_maxresponsesize
        field.  The value in this field can be taken as\n   the absolute maximum size
        of replies generated by an NFS version 4.1\n   server.\n   This value can
        be used in cases where it is not possible to precisely\n   estimate a reply
        size upper bound.  In practice, objects such as\n   ACLs, named attributes,
        layout bodies, and security labels are much\n   smaller than this maximum.\n"
      title: 6.2.2.  Reply Size Estimation for Minor Version 1 and Newer Minor
    title: 6.2.  Reply Size Estimation
  - contents:
    - "6.3.  RPC Binding Considerations\n   NFS version 4 servers are required to
      listen on TCP port 2049, and\n   they are not required to register with an rpcbind
      service [RFC7530].\n   Therefore, an NFS version 4 server supporting RPC-over-RDMA
      version 1\n   MUST use the alternative well-known port number for its RPC-over-RDMA\n
      \  service (see Section 9).  Clients SHOULD connect to this well-known\n   port
      without consulting the RPC portmapper (as for NFS version 4 on\n   TCP transports).\n"
    title: 6.3.  RPC Binding Considerations
  - contents:
    - '6.4.  NFS COMPOUND Requests

      '
    - contents:
      - "6.4.1.  Multiple DDP-Eligible Data Items\n   An NFS version 4 COMPOUND procedure
        can contain more than one\n   operation that carries a DDP-eligible data item.
        \ An NFS version 4\n   client provides XDR Position values in each Read chunk
        to\n   disambiguate which chunk is associated with which argument data item.\n
        \  However, NFS version 4 server and client implementations must agree\n   in
        advance on how to pair Write chunks with returned result data\n   items.\n
        \  In the following list, a \"READ operation\" refers to any NFS version 4\n
        \  operation that has a DDP-eligible result data item.  The mechanism\n   specified
        in Section 4.3.2 of [RFC8166] is applied to this class of\n   operations:\n
        \  o  If an NFS version 4 client wishes all DDP-eligible items in an NFS\n
        \     Reply to be conveyed inline, it leaves the Write list empty.\n   o  The
        first chunk in the Write list MUST be used by the first READ\n      operation
        in an NFS version 4 COMPOUND procedure.  The next Write\n      chunk is used
        by the next READ operation, and so on.\n   o  If an NFS version 4 client has
        provided a matching non-empty Write\n      chunk, then the corresponding READ
        operation MUST return its\n      DDP-eligible data item using that chunk.\n
        \  o  If an NFS version 4 client has provided an empty matching Write\n      chunk,
        then the corresponding READ operation MUST return all of\n      its result
        data items inline.\n   o  If a READ operation returns a union arm that does
        not contain a\n      DDP-eligible result, and the NFS version 4 client has
        provided a\n      matching non-empty Write chunk, an NFS version 4 server
        MUST\n      return an empty Write chunk in that Write list position.\n   o
        \ If there are more READ operations than Write chunks, then\n      remaining
        NFS READ operations in an NFS version 4 COMPOUND that\n      have no matching
        Write chunk MUST return their results inline.\n"
      title: 6.4.1.  Multiple DDP-Eligible Data Items
    - contents:
      - "6.4.2.  Chunk List Complexity\n   The RPC-over-RDMA version 1 protocol does
        not place any limit on the\n   number of chunks or segments that may appear
        in Read or Write lists.\n   However, for various reasons, NFS version 4 server
        implementations\n   often have practical limits on the number of chunks or
        segments they\n   are prepared to process in a single RPC transaction conveyed
        via\n   RPC-over-RDMA version 1.\n   These implementation limits are especially
        important when Kerberos\n   integrity or privacy is in use [RFC7861].  Generic
        Security Service\n   (GSS) services increase the size of credential material
        in RPC\n   headers, potentially requiring more frequent use of Long messages.\n
        \  This can increase the complexity of chunk lists independent of the\n   NFS
        version 4 COMPOUND being conveyed.\n   In the absence of explicit knowledge
        of the server's limits, NFS\n   version 4 clients SHOULD follow the prescriptions
        listed below when\n   constructing RPC-over-RDMA version 1 messages.  NFS
        version 4 servers\n   MUST accept and process such requests.\n   o  The Read
        list can contain either a Position Zero Read chunk, one\n      Read chunk
        with a non-zero Position, or both.\n   o  The Write list can contain no more
        than one Write chunk.\n   o  Any chunk can contain up to sixteen RDMA segments.\n
        \  NFS version 4 clients wishing to send more complex chunk lists can\n   provide
        configuration interfaces to bound the complexity of NFS\n   version 4 COMPOUNDs,
        limit the number of elements in scatter-gather\n   operations, and avoid other
        sources of chunk overruns at the\n   receiving peer.\n   An NFS version 4
        server SHOULD return one of the following responses\n   to a client that has
        sent an RPC transaction via RPC-over-RDMA\n   version 1, which cannot be processed
        due to chunk list complexity\n   limits on the server:\n   o  A problem is
        detected by the transport layer while parsing the\n      transport header
        in an RPC Call message.  The server responds with\n      an RDMA_ERROR message
        with the err field set to ERR_CHUNK.\n   o  A problem is detected during XDR
        decoding of the RPC Call message\n      while the RPC layer reassembles the
        call's XDR stream.  The server\n      responds with an RPC Reply with its
        \"reply_stat\" field set to\n      MSG_ACCEPTED and its \"accept_stat\" field
        set to GARBAGE_ARGS.\n   After receiving one of these errors, an NFS version
        4 client SHOULD\n   NOT retransmit the failing request, as the result would
        be the same\n   error.  It SHOULD immediately terminate the RPC transaction\n
        \  associated with the XID in the RPC Reply.\n"
      title: 6.4.2.  Chunk List Complexity
    - contents:
      - "6.4.3.  NFS Version 4 COMPOUND Example\n   The following example shows a
        Write list with three Write chunks: A,\n   B, and C.  The NFS version 4 server
        consumes the provided Write\n   chunks by writing the results of the designated
        operations in the\n   COMPOUND request (READ and READLINK) back to each chunk.\n
        \     Write list:\n         A --> B --> C\n      NFS version 4 COMPOUND request:\n
        \        PUTFH LOOKUP READ PUTFH LOOKUP READLINK PUTFH LOOKUP READ\n                       |
        \                  |                   |\n                       v                   v
        \                  v\n                       A                   B                   C\n
        \  If the NFS version 4 client does not want to have the READLINK result\n
        \  returned via RDMA, it provides an empty Write chunk for buffer B to\n   indicate
        that the READLINK result must be returned inline.\n"
      title: 6.4.3.  NFS Version 4 COMPOUND Example
    title: 6.4.  NFS COMPOUND Requests
  - contents:
    - "6.5.  NFS Callback Requests\n   The NFS version 4 family of protocols support
      server-initiated\n   callbacks to notify NFS version 4 clients of events such
      as recalled\n   delegations.\n"
    - contents:
      - "6.5.1.  NFS Version 4.0 Callback\n   NFS version 4.0 implementations typically
        employ a separate TCP\n   connection to handle callback operations, even when
        the forward\n   channel uses an RPC-over-RDMA version 1 transport.\n   No
        operation in the NFS version 4.0 callback RPC program conveys a\n   significant
        data payload.  Therefore, no XDR data items in this RPC\n   program are DDP-eligible.\n
        \  A CB_RECALL Reply is small and fixed in size.  The CB_GETATTR Reply\n   contains
        a variable-length fattr4 data item.  See Section 6.2.1 for a\n   discussion
        of reply size prediction for this data item.\n   An NFS version 4.0 client
        advertises netids and ad hoc port addresses\n   for contacting its NFS version
        4.0 callback service using the\n   SETCLIENTID operation.\n"
      title: 6.5.1.  NFS Version 4.0 Callback
    - contents:
      - "6.5.2.  NFS Version 4.1 Callback\n   In NFS version 4.1 and newer minor versions,
        callback operations may\n   appear on the same connection as is used for NFS
        version 4 forward\n   channel client requests.  NFS version 4 clients and
        servers MUST use\n   the approach described in [RFC8167] when backchannel
        operations are\n   conveyed on RPC-over-RDMA version 1 transports.\n   The
        csa_back_chan_attrs argument of the CREATE_SESSION operation\n   contains
        a ca_maxresponsesize field.  The value in this field can be\n   taken as the
        absolute maximum size of backchannel replies generated\n   by a replying NFS
        version 4 client.\n   There are no DDP-eligible data items in callback procedures
        defined\n   in NFS versions 4.1 or 4.2.  However, some callback operations
        (such\n   as messages that convey device ID information) can be large, in
        which\n   case, a Long Call or Reply might be required.\n   When an NFS version
        4.1 client can support Long Calls in its\n   backchannel, it reports a backchannel
        ca_maxrequestsize that is\n   larger than the connection's inline thresholds.
        \ Otherwise, an NFS\n   version 4 server MUST use only Short messages to convey
        backchannel\n   operations.\n"
      title: 6.5.2.  NFS Version 4.1 Callback
    title: 6.5.  NFS Callback Requests
  - contents:
    - "6.6.  Session-Related Considerations\n   The presence of an NFS session (defined
      in [RFC5661]) has no effect\n   on the operation of RPC-over-RDMA version 1.
      \ None of the operations\n   introduced to support NFS sessions (e.g., the SEQUENCE
      operation)\n   contain DDP-eligible data items.  There is no need to match the\n
      \  number of session slots with the number of available RPC-over-RDMA\n   credits.\n
      \  However, there are a few new cases where an RPC transaction can fail.\n   For
      example, in response to an RPC request, a requester might receive\n   an RDMA_ERROR
      message with an rdma_err value of ERR_CHUNK.  These\n   situations are not different
      from existing RPC errors, which an NFS\n   session implementation is already
      prepared to handle for other\n   transports.  And as with other transports during
      such a failure,\n   there might be no SEQUENCE result available to the requester
      to\n   distinguish whether failure occurred before or after the requested\n
      \  operations were executed on the responder.\n   When a transport error occurs
      (e.g., RDMA_ERROR), the requester\n   proceeds as usual to match the incoming
      XID value to a waiting RPC\n   Call.  The RPC transaction is terminated, and
      the result status is\n   reported to the upper-layer protocol.  The requester's
      session\n   implementation then determines the session ID and slot for the failed\n
      \  request and performs slot recovery to make that slot usable again.\n   If
      this were not done, that slot could be rendered permanently\n   unavailable.\n
      \  When an NFS session is not present (for example, when NFS version 4.0\n   is
      in use), a transport error does not provide an indication of\n   whether the
      server has processed the arguments of the RPC Call or\n   whether the server
      has accessed or modified client memory associated\n   with that RPC.\n"
    title: 6.6.  Session-Related Considerations
  - contents:
    - '6.7.  Transport Considerations

      '
    - contents:
      - "6.7.1.  Congestion Avoidance\n   Section 3.1 of [RFC7530] states:\n      Where
        an NFSv4 implementation supports operation over the IP\n      network protocol,
        the supported transport layer between NFS and IP\n      MUST be an IETF standardized
        transport protocol that is specified\n      to avoid network congestion; such
        transports include TCP and the\n      Stream Control Transmission Protocol
        (SCTP).\n   Section 2.9.1 of [RFC5661] also states:\n      Even if NFSv4.1
        is used over a non-IP network protocol, it is\n      RECOMMENDED that the
        transport support congestion control.\n      It is permissible for a connectionless
        transport to be used under\n      NFSv4.1; however, reliable and in-order
        delivery of data combined\n      with congestion control by the connectionless
        transport is\n      REQUIRED.  As a consequence, UDP by itself MUST NOT be
        used as an\n      NFSv4.1 transport.\n   RPC-over-RDMA version 1 is constructed
        on a platform of RDMA Reliable\n   Connections [RFC8166] [RFC5041].  RDMA
        Reliable Connections are\n   reliable, connection-oriented transports that
        guarantee in-order\n   delivery, thus meeting all above requirements for NFS
        version 4\n   transports.\n"
      title: 6.7.1.  Congestion Avoidance
    - contents:
      - "6.7.2.  Retransmission and Keep-Alive\n   NFS version 4 client implementations
        often rely on a transport-layer\n   keep-alive mechanism to detect when an
        NFS version 4 server has\n   become unresponsive.  When an NFS server is no
        longer responsive,\n   client-side keep-alive terminates the connection, which
        in turn\n   triggers reconnection and RPC retransmission.\n   Some RDMA transports
        (such as Reliable Connections on InfiniBand)\n   have no keep-alive mechanism.
        \ Without a disconnect or new RPC\n   traffic, such connections can remain
        alive long after an NFS server\n   has become unresponsive.  Once an NFS client
        has consumed all\n   available RPC-over-RDMA credits on that transport connection,
        it will\n   forever await a Reply before sending another RPC request.\n   NFS
        version 4 clients SHOULD reserve one RPC-over-RDMA credit to use\n   for a
        periodic server or connection health assessment.  This credit\n   can be used
        to drive an RPC request on an otherwise idle connection,\n   triggering either
        a quick affirmative server response or immediate\n   connection termination.\n
        \  In addition to network partition and request loss scenarios,\n   RPC-over-RDMA
        transport connections can be terminated when a\n   Transport header is malformed,
        Reply messages are larger than receive\n   resources, or when too many RPC-over-RDMA
        messages are sent at once.\n   In such cases:\n   o  If there is a transport
        error indicated (i.e., RDMA_ERROR) before\n      the disconnect or instead
        of a disconnect, the requester MUST\n      respond to that error as prescribed
        by the specification of the\n      RPC transport.  Then, the NFS version 4
        rules for handling\n      retransmission apply.\n   o  If there is a transport
        disconnect and the responder has provided\n      no other response for a request,
        then only the NFS version 4 rules\n      for handling retransmission apply.\n"
      title: 6.7.2.  Retransmission and Keep-Alive
    title: 6.7.  Transport Considerations
  title: 6.  Upper-Layer Binding for NFS Version 4
- contents:
  - "7.  Extending NFS Upper-Layer Bindings\n   RPC programs such as NFS are required
    to have an Upper-Layer Binding\n   specification to interoperate on RPC-over-RDMA
    version 1 transports\n   [RFC8166].  Via IETF standards action, the Upper-Layer
    Binding\n   specified in this document can be extended to cover (a) versions of\n
    \  the NFS version 4 protocol specified after NFS version 4 minor\n   version
    2 or (b) separately published extensions to an existing NFS\n   version 4 minor
    version, as described in [RFC8178].\n"
  title: 7.  Extending NFS Upper-Layer Bindings
- contents:
  - "8.  Security Considerations\n   RPC-over-RDMA version 1 supports all RPC security
    models, including\n   RPCSEC_GSS security and transport-level security [RFC7861].
    \ The\n   choice of what Direct Data Placement mechanism to convey RPC argument\n
    \  and results does not affect this, since it changes only the method of\n   data
    transfer.  Because this document defines only the binding of the\n   NFS protocols
    atop [RFC8166], all relevant security considerations\n   are, therefore, to be
    described at that layer.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   The use of Direct Data Placement in NFS introduces
    a need for an\n   additional port number assignment for networks that share traditional\n
    \  UDP and TCP port spaces with RDMA services.  The iWARP protocol is\n   such
    an example [RFC5041] [RFC5040].\n   For this purpose, a set of transport protocol
    port number assignments\n   is specified by this document.  IANA has assigned
    the following ports\n   for NFS/RDMA in the IANA port registry, according to the
    guidelines\n   described in [RFC6335].\n     nfsrdma 20049 tcp  Network File System
    (NFS) over RDMA\n     nfsrdma 20049 udp  Network File System (NFS) over RDMA\n
    \    nfsrdma 20049 sctp Network File System (NFS) over RDMA\n   This document
    is listed as the reference for the nfsrdma port\n   assignments.\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC1833]  Srinivasan, R., \"Binding Protocols
      for ONC RPC Version 2\",\n              RFC 1833, DOI 10.17487/RFC1833, August
      1995,\n              <https://www.rfc-editor.org/info/rfc1833>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC5661]  Shepler,
      S., Ed., Eisler, M., Ed., and D. Noveck, Ed.,\n              \"Network File
      System (NFS) Version 4 Minor Version 1\n              Protocol\", RFC 5661,
      DOI 10.17487/RFC5661, January 2010,\n              <https://www.rfc-editor.org/info/rfc5661>.\n
      \  [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire,
      \"Internet Assigned Numbers Authority (IANA)\n              Procedures for the
      Management of the Service Name and\n              Transport Protocol Port Number
      Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC7530]  Haynes,
      T., Ed. and D. Noveck, Ed., \"Network File System\n              (NFS) Version
      4 Protocol\", RFC 7530, DOI 10.17487/RFC7530,\n              March 2015, <https://www.rfc-editor.org/info/rfc7530>.\n
      \  [RFC7861]  Adamson, A. and N. Williams, \"Remote Procedure Call (RPC)\n              Security
      Version 3\", RFC 7861, DOI 10.17487/RFC7861,\n              November 2016, <https://www.rfc-editor.org/info/rfc7861>.\n
      \  [RFC7862]  Haynes, T., \"Network File System (NFS) Version 4 Minor\n              Version
      2 Protocol\", RFC 7862, DOI 10.17487/RFC7862,\n              November 2016,
      <https://www.rfc-editor.org/info/rfc7862>.\n   [RFC8166]  Lever, C., Ed., Simpson,
      W., and T. Talpey, \"Remote Direct\n              Memory Access Transport for
      Remote Procedure Call Version\n              1\", RFC 8166, DOI 10.17487/RFC8166,
      June 2017,\n              <https://www.rfc-editor.org/info/rfc8166>.\n   [RFC8167]
      \ Lever, C., \"Bidirectional Remote Procedure Call on RPC-\n              over-RDMA
      Transports\", RFC 8167, DOI 10.17487/RFC8167,\n              June 2017, <https://www.rfc-editor.org/info/rfc8167>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC1094]  Nowicki, B., \"NFS: Network File
      System Protocol\n              specification\", RFC 1094, DOI 10.17487/RFC1094,
      March\n              1989, <https://www.rfc-editor.org/info/rfc1094>.\n   [RFC1813]
      \ Callaghan, B., Pawlowski, B., and P. Staubach, \"NFS\n              Version
      3 Protocol Specification\", RFC 1813,\n              DOI 10.17487/RFC1813, June
      1995,\n              <https://www.rfc-editor.org/info/rfc1813>.\n   [RFC5040]
      \ Recio, R., Metzler, B., Culley, P., Hilland, J., and D.\n              Garcia,
      \"A Remote Direct Memory Access Protocol\n              Specification\", RFC
      5040, DOI 10.17487/RFC5040, October\n              2007, <https://www.rfc-editor.org/info/rfc5040>.\n
      \  [RFC5041]  Shah, H., Pinkerton, J., Recio, R., and P. Culley, \"Direct\n
      \             Data Placement over Reliable Transports\", RFC 5041,\n              DOI
      10.17487/RFC5041, October 2007,\n              <https://www.rfc-editor.org/info/rfc5041>.\n
      \  [RFC5666]  Talpey, T. and B. Callaghan, \"Remote Direct Memory Access\n              Transport
      for Remote Procedure Call\", RFC 5666,\n              DOI 10.17487/RFC5666,
      January 2010,\n              <https://www.rfc-editor.org/info/rfc5666>.\n   [RFC5667]
      \ Talpey, T. and B. Callaghan, \"Network File System (NFS)\n              Direct
      Data Placement\", RFC 5667, DOI 10.17487/RFC5667,\n              January 2010,
      <https://www.rfc-editor.org/info/rfc5667>.\n   [RFC8178]  Noveck, D., \"Rules
      for NFSv4 Extensions and Minor\n              Versions\", RFC 8178, DOI 10.17487/RFC8178,
      July 2017,\n              <https://www.rfc-editor.org/info/rfc8178>.\n   [XNFS]
      \    The Open Group, \"Protocols for Interworking: XNFS, Version\n              3W\",
      Document Number C702, ISBN 1-85912-184-5, February\n              1998.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Changes Since RFC 5667\n   Corrections and updates made necessary
    by new language in [RFC8166]\n   have been introduced.  For example, references
    to deprecated features\n   of RPC-over-RDMA version 1 (such as RDMA_MSGP) and
    the use of the\n   Read list for handling RPC Replies have been removed.  The
    term\n   \"mapping\" has been replaced with the term \"binding\" or \"Upper-Layer\n
    \  Binding\" throughout the document.  Material that duplicates what is\n   in
    [RFC8166] has been deleted.\n   Material required by [RFC8166] for Upper-Layer
    Bindings that was not\n   present in [RFC5667] has been added.  A complete discussion
    of reply\n   size estimation has been introduced for all protocols covered by
    the\n   Upper-Layer Bindings in this document.\n   Technical corrections have
    been made.  For example, the mention of\n   12KB and 36KB inline thresholds has
    been removed.  The reference to a\n   nonexistent NFS version 4 SYMLINK operation
    has been replaced.\n   The discussion of NFS version 4 COMPOUND handling has been
    completed.\n   Some changes were made to the algorithm for matching DDP-eligible\n
    \  results to Write chunks.\n   Requirements to ignore extra Read or Write chunks
    have been removed\n   from the NFS versions 2 and 3 Upper-Layer Binding, as they
    conflict\n   with [RFC8166].\n   A section discussing NFS version 4 retransmission
    and connection loss\n   has been added.\n   The following additional improvements
    have been made, relative to\n   [RFC5667]:\n   o  An explicit discussion of NFS
    versions 4.0 and 4.1 backchannel\n      operation have replaced the previous treatment
    of callback\n      operations.\n   o  A section describing considerations when
    an NFS session is in use\n      has been added.\n   o  An Upper-Layer Binding
    for NFS version 4.2 has been added.\n   o  A section suggesting a mechanism for
    periodically assessing\n      connection health has been introduced.\n   o  Ambiguous
    or erroneous uses of key words from RFC 2119 have been\n      corrected.\n   o
    \ References to obsolete RFCs have been updated.\n   o  An IANA Considerations
    section has been added, which specifies the\n      port assignments for NFS/RDMA.
    \ This replaces the example\n      assignment that appeared in [RFC5666].\n   o
    \ Code excerpts have been removed, and figures have been modernized.\n"
  title: Appendix A.  Changes Since RFC 5667
- contents:
  - "Acknowledgments\n   The author gratefully acknowledges the work of Brent Callaghan
    and\n   Tom Talpey on the original NFS Direct Data Placement specification\n   [RFC5667].
    \ Tom contributed the text of Section 6.4.2.\n   Dave Noveck provided an excellent
    review, constructive suggestions,\n   and consistent navigational guidance throughout
    the process of\n   drafting this document.  Dave contributed the text of Sections
    6.6\n   and 7 and insisted on precise discussion of reply size estimation.\n   Thanks
    to Karen Deitke for her sharp observations about idempotency,\n   NFS COMPOUNDs,
    and NFS sessions.\n   Special thanks go to Transport Area Director Spencer Dawkins,
    NFSV4\n   Working Group Chair and Document Shepherd Spencer Shepler, and NFSV4\n
    \  Working Group Secretary Thomas Haynes for their support.  The author\n   also
    wishes to thank Bill Baker and Greg Marsden for their support of\n   this work.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Charles Lever\n   Oracle Corporation\n   1015 Granger Avenue\n
    \  Ann Arbor, MI  48104\n   United States of America\n   Phone: +1 248 816 6463\n
    \  Email: chuck.lever@oracle.com\n"
  title: Author's Address
