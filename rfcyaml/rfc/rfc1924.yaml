- title: __initial_text__
  contents:
  - '               A Compact Representation of IPv6 Addresses

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   IPv6 addresses, being 128 bits long, need 32 characters to write\
    \ in\n   the general case, if standard hex representation, is used, plus more\n\
    \   for any punctuation inserted (typically about another 7 characters,\n   or\
    \ 39 characters total).  This document specifies a more compact\n   representation\
    \ of IPv6 addresses, which permits encoding in a mere 20\n   bytes.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   It is always necessary to be able to write in characters\
    \ the form of\n   an address, though in actual use it is always carried in binary.\
    \  For\n   IP version 4 (IP Classic) the well known dotted quad format is used.\n\
    \   That is, 10.1.0.23 is one such address.  Each decimal integer\n   represents\
    \ a one octet of the 4 octet address, and consequently has a\n   value between\
    \ 0 and 255 (inclusive).  The written length of the\n   address varies between\
    \ 7 and 15 bytes.\n   For IPv6 however, addresses are 16 octets long [IPv6], if\
    \ the old\n   standard form were to be used, addresses would be anywhere between\
    \ 31\n   and 63 bytes, which is, of course, untenable.\n   Because of that, IPv6\
    \ had chosen to represent addresses using hex\n   digits, and use only half as\
    \ many punctuation characters, which will\n   mean addresses of between 15 and\
    \ 39 bytes, which is still quite long.\n   Further, in an attempt to save more\
    \ bytes, a special format was\n   invented, in which a single run of zero octets\
    \ can be dropped, the\n   two adjacent punctuation characters indicate this has\
    \ happened, the\n   number of missing zeroes can be deduced from the fixed size\
    \ of the\n   address.\n   In most cases, using genuine IPv6 addresses, one may\
    \ expect the\n   address as written to tend toward the upper limit of 39 octets,\
    \ as\n   long strings of zeroes are likely to be rare, and most of the other\n\
    \   groups of 4 hex digits are likely to be longer than a single non-zero\n  \
    \ digit (just as MAC addresses typically have digits spread throughout\n   their\
    \ length).\n   This document specifies a new encoding, which can always represent\n\
    \   any IPv6 address in 20 octets.  While longer than the shortest\n   possible\
    \ representation of an IPv6 address, this is barely longer\n   than half the longest\
    \ representation, and will typically be shorter\n   than the representation of\
    \ most IPv6 addresses.\n"
- title: 3. Current formats
  contents:
  - "3. Current formats\n   [AddrSpec] specifies that the preferred text representation\
    \ of IPv6\n   addresses is in one of three conventional forms.\n   The preferred\
    \ form is x:x:x:x:x:x:x:x, where the 'x's are the\n   hexadecimal values of the\
    \ eight 16-bit pieces of the address.\n   Examples:\n        FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\
    \  (39 characters)\n        1080:0:0:0:8:800:200C:417A  (25 characters)\n   The\
    \ second, or zero suppressed, form allows \"::\" to indicate multiple\n   groups\
    \ of suppressed zeroes, hence:\n        1080:0:0:0:8:800:200C:417A\n   may be\
    \ represented as\n        1080::8:800:200C:417A\n   a saving of just 5 characters\
    \ from this typical address form, and\n   still leaving 21 characters.\n   In\
    \ other cases the saving is more dramatic, in the extreme case, the\n   address:\n\
    \        0:0:0:0:0:0:0:0\n   that is, the unspecified address, can be written\
    \ as\n        ::\n   This is just 2 characters, which is a considerable saving.\
    \  However\n   such cases will rarely be encountered.\n   The third possible form\
    \ mixes the new IPv6 form with the old IPv4\n   form, and is intended mostly for\
    \ transition, when IPv4 addresses are\n   embedded into IPv6 addresses.  These\
    \ can be considerably longer than\n   the longest normal IPv6 representation,\
    \ and will eventually be phased\n   out.  Consequently they will not be considered\
    \ further here.\n"
- title: 4. The New Encoding Format
  contents:
  - "4. The New Encoding Format\n   The new standard way of writing IPv6 addresses\
    \ is to treat them as a\n   128 bit integer, encode that in base 85 notation,\
    \ then encode that\n   using 85 ASCII characters.\n"
- title: 4.1. Why 85?
  contents:
  - "4.1. Why 85?\n   2^128 is 340282366920938463463374607431768211456.  85^20 is\n\
    \   387595310845143558731231784820556640625, and thus in 20 digits of\n   base\
    \ 85 representation all possible 2^128 IPv6 addresses can clearly\n   be encoded.\n\
    \   84^20 is 305904398238499908683087849324518834176, clearly not\n   sufficient,\
    \ 21 characters would be needed to encode using base 84,\n   this wastage of notational\
    \ space cannot be tolerated.\n   On the other hand, 94^19 is just\n   30862366077815087592879016454695419904,\
    \ also insufficient to encode\n   all 2^128 different IPv6 addresses, so 20 characters\
    \ would be needed\n   even with base 94 encoding.  As there are just 94 ASCII\
    \ characters\n   (excluding control characters, space, and del) base 94 is the\
    \ largest\n   reasonable value that can be used.  Even if space were allowed,\
    \ base\n   95 would still require 20 characters.\n   Thus, any value between 85\
    \ and 94 inclusive could reasonably be\n   chosen.  Selecting 85 allows the use\
    \ of the smallest possible subset\n   of the ASCII characters, enabling more characters\
    \ to be retained for\n   other uses, eg, to delimit the address.\n"
- title: 4.2. The Character Set
  contents:
  - "4.2. The Character Set\n   The character set to encode the 85 base85 digits,\
    \ is defined to be,\n   in ascending order:\n             '0'..'9', 'A'..'Z',\
    \ 'a'..'z', '!', '#', '$', '%', '&', '(',\n             ')', '*', '+', '-', ';',\
    \ '<', '=', '>', '?', '@', '^', '_',\n             '`', '{', '|', '}', and '~'.\n\
    \   This set has been chosen with considerable care.  From the 94\n   printable\
    \ ASCII characters, the following nine were omitted:\n      '\"' and \"'\", which\
    \ allow the representation of IPv6 addresses to\n      be quoted in other environments\
    \ where some of the characters in\n      the chosen character set may, unquoted,\
    \ have other meanings.\n      ',' to allow lists of IPv6 addresses to conveniently\
    \ be written,\n      and '.' to allow an IPv6 address to end a sentence without\n\
    \      requiring it to be quoted.\n      '/' so IPv6 addresses can be written\
    \ in standard CIDR\n      address/length notation, and ':' because that causes\
    \ problems when\n      used in mail headers and URLs.\n      '[' and ']', so those\
    \ can be used to delimit IPv6 addresses when\n      represented as text strings,\
    \ as they often are for IPv4,\n      And last, '\\', because it is often difficult\
    \ to represent in a way\n      where it does not appear to be a quote character,\
    \ including in the\n      source of this document.\n"
- title: 5. Converting an IPv6 address to base 85.
  contents:
  - "5. Converting an IPv6 address to base 85.\n   The conversion process is a simple\
    \ one of division, taking the\n   remainders at each step, and dividing the quotient\
    \ again, then\n   reading up the page, as is done for any other base conversion.\n\
    \   For example, consider the address shown above\n        1080:0:0:0:8:800:200C:417A\n\
    \   In decimal, considered as a 128 bit number, that is\n   21932261930451111902915077091070067066.\n\
    \   As we divide that successively by 85 the following remainders emerge:\n  \
    \ 51, 34, 65, 57, 58, 0, 75, 53, 37, 4, 19, 61, 31, 63, 12, 66, 46, 70,\n   68,\
    \ 4.\n   Thus in base85 the address is:\n        4-68-70-46-66-12-63-31-61-19-4-37-53-75-0-58-57-65-34-51.\n\
    \   Then, when encoded as specified above, this becomes:\n        4)+k&C#VzJ4br>0wv%Yp\n\
    \   This procedure is trivially reversed to produce the binary form of\n   the\
    \ address from textually encoded format.\n"
- title: 6. Additional Benefit
  contents:
  - "6. Additional Benefit\n   Apart from generally reducing the length of an IPv6\
    \ address when\n   encode in a textual format, this scheme also has the benefit\
    \ of\n   returning IPv6 addresses to a fixed length representation, leading\n\
    \   zeroes are never omitted, thus removing the ugly and awkward variable\n  \
    \ length representation that has previously been recommended.\n"
- title: 7. Implementation Issues
  contents:
  - "7. Implementation Issues\n   Many current processors do not find 128 bit integer\
    \ arithmetic, as\n   required for this technique, a trivial operation.  This is\
    \ not\n   considered a serious drawback in the representation, but a flaw of\n\
    \   the processor designs.\n   It may be expected that future processors will\
    \ address this defect,\n   quite possibly before any significant IPv6 deployment\
    \ has been\n   accomplished.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   By encoding addresses in this form, it is less\
    \ likely that a casual\n   observer will be able to immediately detect the binary\
    \ form of the\n   address, and thus will find it harder to make immediate use\
    \ of the\n   address.  As IPv6 addresses are not intended to be learned by humans,\n\
    \   one reason for which being that they are expected to alter in\n   comparatively\
    \ short timespan, by human perception, the somewhat\n   challenging nature of\
    \ the addresses is seen as a feature.\n   Further, the appearance of the address,\
    \ as if it may be random\n   gibberish in a compressed file, makes it much harder\
    \ to detect by a\n   packet sniffer programmed to look for bypassing addresses.\n"
- title: 9. References
  contents:
  - "9. References\n   [IPv6]        Internet Protocol, Version 6 (IPv6) Specification,\n\
    \                 S. Deering, R. Hinden, RFC 1883, January 4, 1996.\n   [AddrSpec]\
    \    IP Version 6 Addressing Architecture,\n                 R. Hinden, S. Deering,\
    \ RFC 1884, January 4, 1996.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Robert Elz\n   Computer Science\n   University of Melbourne\n\
    \   Parkville, Victoria, 3052\n   Australia\n   EMail: kre@munnari.OZ.AU\n"
