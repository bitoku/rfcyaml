- title: __initial_text__
  contents:
  - "          AT&T/Neda's Efficient Short Remote Operations (ESRO)\n            \
    \       Protocol Specification Version 1.2\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This protocol has not had the benefit of IETF Working Group review,\n\
    \   but a cursory examination reveals several issues which may be\n   significant\
    \ issues for scalability.  A site considering deployment\n   should conduct a\
    \ careful analysis to ensure they understand the\n   potential impacts.\n"
- title: Abstract
  contents:
  - "Abstract\n  This document specifies the service model, the notation and protocol\n\
    \  for Efficient Short Remote Operations (ESRO). The ESRO service is\n  similar\
    \ to and is consistent with other Remote Procedure Call\n  services.  The emphasis\
    \ of ESRO service definition and the ESRO\n  protocol is on efficiency.  ESRO\
    \ is designed specifically with\n  wireless network (e.g., CDPD) usage in mind.\n\
    \  ESRO protocol provides reliable connectionless remote operation\n  services\
    \ on top of UDP (or any other non-reliable connectionless\n  transport service)\
    \ with minimum overhead.  ESRO protocol supports\n  segmentation and reassembly,\
    \ concatenation and separation as well as\n  multiplexing for service users (applications).\n\
    \  ESRO allows for trade-offs between efficiency and reliability by\n  specifying\
    \ both 2-way hand-shake and 3-way hand-shake based protocols.\n  Encoding mechanisms\
    \ for presentation of the parameters of remote\n  operations are outside the scope\
    \ of this document.  But,\n  identification (tagging) of the encoding mechanism\
    \ in use (e.g., XDR,\n  BER, PER) is supported by ESRO protocol.\n  A variety\
    \ of applications can use the ESRO protocol.  Some early\n  applications using\
    \ ESRO include efficient short message submission and\n  delivery, credit card\
    \ authorization and white pages lookup.\n"
- title: Contents
  contents:
  - "Contents\n  1  INTRODUCTION                                                 \
    \     4\n     1.1 Relationship To Existing Remote Operation Services    .    \
    \   5\n         1.1.1 ESRO and RPC    .   .   .   .   .   .   .   .   .      \
    \ 5\n         1.1.2 ESRO and ROSE   .   .   .   .   .   .   .   .   .       5\n\
    \     1.2 Overview of ESROS     .   .   .   .   .   .   .   .   .       5\n  \
    \   1.3 The Remote Operation Model    .   .   .   .   .   .   .       6\n  2 \
    \ ESRO SERVICE DEFINITIONS                                          8\n     2.1\
    \ Acknowledged Result Service Mode  .   .   .   .   .   .       9\n         2.1.1\
    \ Performer side .   .   .   .   .   .   .   .   .        9\n         2.1.2 Invoker\
    \ side    .   .   .   .   .   .   .   .   .      11\n     2.2 Non-acknowledged\
    \ Result   .   .   .   .   .   .   .   .      11\n         2.2.1 Performer side\
    \ .   .   .   .   .   .   .   .   .       12\n         2.2.2 Invoker side    .\
    \   .   .   .   .   .   .   .   .      12\n     2.3 Serialized Use of ESRO Services\
    \   .   .   .   .   .   .      12\n         2.3.1 Invoker     .   .   .   .  \
    \ .   .   .   .   .   .      12\n         2.3.2 Performer   .   .   .   .   .\
    \   .   .   .   .   .      12\n     2.4 ESROS-INVOKE Service  .   .   .   .  \
    \ .   .   .   .   .      13\n         2.4.1 Operation-value     .   .   .   .\
    \   .   .   .   .      13\n         2.4.2 Performer-address   .   .   .   .  \
    \ .   .   .   .      14\n         2.4.3 Invoker-address     .   .   .   .   .\
    \   .   .   .      14\n         2.4.4 Invoke-argument-encoding-type   .   .  \
    \ .   .   .      15\n         2.4.5 Invoke-argument     .   .   .   .   .   .\
    \   .   .      15\n         2.4.6 Invoke-ID   .   .   .   .   .   .   .   .  \
    \ .   .      15\n         2.4.7 Failure-value   .   .   .   .   .   .   .   .\
    \   .      16\n     2.5 ESROS-RESULT Service  .   .   .   .   .   .   .   .  \
    \ .      16\n         2.5.1 Result-argument-encoding-type   .   .   .   .   .\
    \      16\n         2.5.2 Result-argument     .   .   .   .   .   .   .   .  \
    \    17\n         2.5.3 Invoke-ID   .   .   .   .   .   .   .   .   .   .    \
    \  17\n         2.5.4 Failure-value   .   .   .   .   .   .   .   .   .      18\n\
    \     2.6 ESROS-ERROR Service   .   .   .   .   .   .   .   .   .      18\n  \
    \       2.6.1 Error-value     .   .   .   .   .   .   .   .   .      18\n    \
    \     2.6.2 Error-argument-encoding-type    .   .   .   .   .      19\n      \
    \   2.6.3 Error-argument .   .   .   .   .   .   .   .   .       19\n        \
    \ 2.6.4 Invoke-ID   .   .   .   .   .   .   .   .   .   .      20\n         2.6.5\
    \ Failure-value   .   .   .   .   .   .   .   .   .      20\n     2.7 ESROS-FAILURE\
    \ Service     .   .   .   .   .   .   .   .      20\n         2.7.1 Failure-value\
    \   .   .   .   .   .   .   .   .   .      21\n         2.7.2 Invoke-ID   .  \
    \ .   .   .   .   .   .   .   .   .      21\n  3  ESRO SERVICE NOTATION      \
    \                                      21\n     3.1 ES-OPERATION Notation    \
    \ .   .   .   .   .   .   .   .      22\n     3.2 Mapping of ESROS Notation  \
    \   .   .   .   .   .   .   .      22\n         3.2.1 Invocation of an Operation\
    \ .   .   .   .   .   .       22\n         3.2.2 Reply of an Operation   .   .\
    \   .   .   .   .   .      22\n  4  REMOTE OPERATIONS PROTOCOL               \
    \                        23\n     4.1 Overview of the Protocol  .   .   .   .\
    \   .   .   .   .      23\n         4.1.1 Service Provision (Invoker User)   \
    \ .   .   .   .      24\n         4.1.2 Service Provision (Performer User) . \
    \  .   .   .       24\n     4.2 Protocol Procedures   .   .   .   .   .   .  \
    \ .   .   .      25\n         4.2.1 Service Access Point (SAP) Bind Procedure\
    \   .   .      25\n         4.2.2 Invoke Service Procedure    .   .   .   .  \
    \ .   .      25\n         4.2.3 Invoke ID Assignment Procedure .   .   .   . \
    \  .       25\n         4.2.4 Functional Unit Selection Procedure     .   .  \
    \ .      26\n     4.3 Connectionless PDU Transfer For Small PDUs    .   .   .\
    \      26\n         4.3.1 Overview    .   .   .   .   .   .   .   .   .   .  \
    \    26\n         4.3.2 3-Way Handshake Functional Unit     .   .   .   .    \
    \  28\n         4.3.3 2-Way Handshake Functional Unit     .   .   .   .      35\n\
    \         4.3.4 Segmentation and Reassembly     .   .   .   .   .      40\n  \
    \   4.4 Structure and Encoding of ESROS PDUs  .   .   .   .   .      43\n    \
    \     4.4.1 ESRO-INVOKE-PDU Format .   .   .   .   .   .   .       43\n      \
    \   4.4.2 ESRO-RESULT-PDU Format .   .   .   .   .   .   .       45\n        \
    \ 4.4.3 ESRO-ERROR-PDU Format   .   .   .   .   .   .   .      46\n         4.4.4\
    \ ESRO-ACK-PDU Format     .   .   .   .   .   .   .      47\n         4.4.5 ESRO-FAILURE-PDU\
    \ Format     .   .   .   .   .   .      47\n         4.4.6 ESRO-INVOKE-SEGMENTED-PDU\
    \ Format    .   .   .   .      48\n         4.4.7 ESRO-RESULT-SEGMENTED-PDU Format\
    \    .   .   .   .      50\n         4.4.8 ESRO-ERROR-SEGMENTED-PDU Format   \
    \  .   .   .   .      51\n     4.5 Concatenation and Separation  .   .   .   .\
    \   .   .   .      52\n         4.5.1 Procedures .   .   .   .   .   .   .   .\
    \   .   .       53\n         4.5.2 ESRO-CONCATENATED-PDU format    .   .   . \
    \  .   .      53\n     4.6 ES Remote Operations Protocol Parameters  .   .   .\
    \   .      54\n         4.6.1 PDU size    .   .   .   .   .   .   .   .   .  \
    \ .      54\n         4.6.2 Timers .   .   .   .   .   .   .   .   .   .   . \
    \      55\n         4.6.3 Use of lower layers     .   .   .   .   .   .   .  \
    \    56\n  5  ACKNOWLEDGMENTS  .   .   .   .   .   .   .   .   .   .   .   . \
    \  56\n  6  SECURITY CONSIDERATIONS  .   .   .   .   .   .   .   .   .   .   56\n\
    \  7  AUTHORS' ADDRESSES   .   .   .   .   .   .   .   .   .   .   .   56\n"
- title: 1  INTRODUCTION
  contents:
  - "1  INTRODUCTION\n   Efficient Short Remote Operations (ESRO) provide an efficent\n\
    \   mechanism for realization of Remote Procedure Call.  This document\n   specifies\
    \ many aspects of ESRO including:\n     o Service Model\n     o Service Primitves\n\
    \     o A Notation for user of the Service\n     o Confirmed Connectionless Protocol\
    \ (based on a 3-way hand-shake)\n     o Unconfirmed Connectionless Protocol (based\
    \ on a 2-way hand-shake)\n"
- title: 1.1  Relationship To Existing Remote Operation Services
  contents:
  - "1.1  Relationship To Existing Remote Operation Services\n   The overall model\
    \ of ESRO is similar to and consistent with many\n   existing protocols.  ESRO's\
    \ distinguishing characteristic is\n   efficiency.\n   A brief comparison of ESRO\
    \ and Remote Procedure Calls [7] and Remote\n   Operation Service Elements [1]\
    \ follows.\n"
- title: 1.1.1  ESRO and RPC
  contents:
  - "1.1.1  ESRO and RPC\n   Remote Procedure Call (RPC) is specified in [7] (RFC-1831)\
    \ and [6]\n   (RFC-1833).\n   RPC specifications define a remote procedure model\
    \ that is\n   essentially same as ESRO. RPC's notation uses a syntax quite\n \
    \  different from that of ESRO. RPC can rely on a connection oriented or\n   connectionless\
    \ transport mechanism.  When using the connectionless\n   mechanism, the retransmission\
    \ and reliability issues are considered\n   beyond the scope of the RPC specification.\
    \  RPC is usually used in\n   combination with External Data Representation, XDR\
    \ [8] (RFC-1832).\n"
- title: 1.1.2  ESRO and ROSE
  contents:
  - "1.1.2  ESRO and ROSE\n   ROSE is specified in [1] and [2].  The service definition\
    \ for ESRO\n   Service (ESROS) specified in this document is similar ROSE's\n\
    \   Notation.  The Notation specified in this document for ESROS is\n   similar\
    \ ROSE's Notation.  The ESRO protocol specified in this\n   document is very different\
    \ from the ROSE protocol [2].\n   The operation model for ESRO Service (ESROS)\
    \ is based on Remote\n   Operations Services Element (ROSE) in [1].  In ESROS\
    \ model both\n   entities can invoke operations.\n   ESRO protocols can accomplish\
    \ short operations with much less\n   overhead than ROSE.\n"
- title: 1.2  Overview of ESROS
  contents:
  - "1.2  Overview of ESROS\n   ESROS provides a service which supports interaction\
    \ of applications\n   based on a remote operation model.  A Remote Operation is\
    \ invoked by\n   one entity; the other entity attempts to perform the Remote Operation\n\
    \   and then reports the outcome of the attempt.  The ESROS protocol is\n   designed\
    \ such that it could support many applications.\n"
- title: 1.3  The Remote Operation Model
  contents:
  - "1.3  The Remote Operation Model\n   ESROS provides for performance of operations\
    \ between two peer\n   sublayers.  Users of the ESROS assume the roles of invoker\
    \ and\n   performer which invoke and perform the operations respectively.  An\n\
    \   ESROS-User can assume both roles and be an invoker for some\n   operations\
    \ and be a performer for other operations.  The performer is\n   expected to report\
    \ either the result of the operation or an error.  A\n   result reply is sent\
    \ to the invoker if the operation is successful,\n   and an error reply is sent\
    \ if the operation is unsuccessful.  If the\n   performer is unreachable, the\
    \ ESROS sends a failure indication\n   primitive to the invoker.\n   Operations\
    \ are asynchronous and the invoker may continue to invoke\n   further operations\
    \ without waiting for a reply.  Synchronous or\n   serialized operations are also\
    \ supported as a subset and a special\n   case of asynchronous service.  By default\
    \ the ESRO service provider\n   on both invoker and performer sides supports the\
    \ asynchronous\n   operation invocation.  However, if one side is to support only\n\
    \   serialized (synchronous) mode, it should be in agreement with the\n   peer\
    \ side.\n   ESROS has no authentication mechanism.  Authentication is the\n  \
    \ responsibility of the performer (which is outside of the scope of\n   ESROS)\
    \ and the performer is not expected to honor the invoker when it\n   is not authenticated.\n\
    \   The ESROS operation model is represented in Figure 1.  In this\n   example,\
    \ the ESROS User on the left is the Invoker and the ESROS User\n   on the right\
    \ is the Performer.  The Provider is the entity providing\n   a service to the\
    \ layer above it.\n   ESROS      -------------------    -------------------  \
    \   ESROS\n   User      | Layer above ESROS |  | Layer above ESROS |    User\n\
    \   (Invoker) |                   |  |                   |  (Performer)\n    \
    \          -------------------    -------------------\n      ^               \
    \ |                      |                ^\n      |                |        \
    \              |                |\n      v                |                  \
    \    |                v\n   ESROS     -------------------    -------------------\
    \      ESROS\n   Provider |       ESROS       |  |       ESROS       |    Provider\n\
    \             -------------------    -------------------\n                   \
    \    |                      |\n                       |                      |\n\
    \                       |                      |\n             -------------------\
    \    -------------------\n            |    UDP           |   |   UDP         \
    \    |\n             -------------------    -------------------\n            \
    \         _                    _/\n                       _                _/\n\
    \                         _    .       _/\n                           _ . .* .\
    \ _/\n                             . * .* .\n                               *\
    \ . *\n                    Figure 1:  ES Remote Operation Model\n            \
    \      Invoker        Performer\n                 ESRO SAP         ESRO SAP\n\
    \                       |               |\n                       |          \
    \     |\n   ESROS-INVOKE.req.   |               | ESROS-INVOKE.ind.\n   -------->-----------|\
    \               |-------->---------\n                       |               |\n\
    \   ESROS-INVOKE-P.conf.|               |\n   --------<-----------|          \
    \     |\n                       |               |\n                       |  \
    \             |\n                       |               |\n   ESROS-RESULT.ind.\
    \   |               | ESROS-RESULT.req.\n   --------<-----------|            \
    \   |--------<---------\n                       |               |\n          \
    \             |               | ESROS-RESULT.conf.\n                       | \
    \              |-------->---------\n                       |               |\n\
    \                       |               |\n   ESROS-ERROR.ind.    |          \
    \     | ESROS-ERROR.req.\n   --------<-----------|               |--------<---------\n\
    \                       |               |\n                       |          \
    \     | ESROS-ERROR.conf.\n                       |               |-------->---------\n\
    \                       |               |\n                       |          \
    \     |\n                       |               |\n                       |  \
    \             |\n   ESROS-FAILURE.ind.  |               | ESROS-FAILURE.ind.\n\
    \   --------<-----------|               |-------->---------\n                \
    \       |               |\n             Figure 2:  Time sequence diagram for ESRO\
    \ services\n"
- title: 2  ESRO SERVICE DEFINITIONS
  contents:
  - "2  ESRO SERVICE DEFINITIONS\n   ESRO service primitives are illustrated in Figure\
    \ 2, Table 1 and\n   Table 2.  The description of services and primitives comes\
    \ in the\n   following sections.\n   ESROS-User accesses ESRO services through\
    \ Efficient Short Remote\n   Operations Service Access Point (ESRO-SAP) as shown\
    \ in Figure 2.\n   The RESULT.request, ERROR.request and FAILURE.indication service\n\
    \   primitives can be implemented in two different modes:\n    1. Acknowledged\
    \ Result, and\n    2. Non-Acknowledged Result\n                 _____________________________________________\n\
    \                 | ESRO Service   |Type                      |\n            \
    \     |________________|__________________________|\n                 | ESROS-INVOKE\
    \   |Non-confirmed             |\n                 | ESROS-INVOKE-P |Provider-initiated\
    \        |\n                 | ESROS-RESULT   |Confirmed / Non-confirmed |\n \
    \                | ESROS-ERROR    |Confirmed / Non-confirmed |\n             \
    \    | ESROS-FAILURE  |Provider initiated        |\n                 |________________|__________________________|\n\
    \                           Table 1:  ESRO Services\n   as described below.  The\
    \ difference between different modes is in\n   their reliability of service and\
    \ efficiency.  Reliability of service\n   is defined based on the understanding\
    \ of invoker and performer about\n   the success or failure of the operation on\
    \ the peer side.  Table 3\n   and Table 4 summarize understanding of performer\
    \ about success or\n   failure on invoker side in different situations.  In these\
    \ tables the\n   FAILURE.indication refers to the primitive generated by protocol\
    \ and\n   not the failure of local provider.\n"
- title: 2.1  Acknowledged Result Service Mode
  contents:
  - "2.1  Acknowledged Result Service Mode\n   In this service mode, the result is\
    \ acknowledged by invoker, but the\n   mechanism by which the acknowledgment is\
    \ accomplished may not be\n   reliable.  Table 3 summarizes the relationship between\
    \ performer and\n   invoker in success and failure cases.\n"
- title: 2.1.1  Performer side
  contents:
  - "2.1.1  Performer side\n   In this type of service, the RESULT.confirm and ERROR.confirm\n\
    \   primitives on performer side are generated if the result/error is\n   acknowledged\
    \ by invoker.\n   The FAILURE.indication on performer side is generated if result/error\n\
    \   is not acknowledged by invoker or if there is a local failure on\n   performer\
    \ side.\n   >From the protocol point of view, the FAILURE.indication might be\n\
    \   because either the result/error PDU or the ack PDU is lost.  The\n   outcome\
    \ of this is that a FAILURE.indication is not robust as the\n   operation may\
    \ have been successful from the invoker's perspective.\n   One method of compensating\
    \ for this shortcoming is having the\n   performer verify the FAILURE.indication\
    \ in a separate operation.\n   ____________________________________________________________\n\
    \   | Primitive                |Parameters                     |\n   |--------------------------+-------------------------------|\n\
    \   |                          |Operation-value                |\n   |       \
    \                   |Performer-address              |\n   | ESROS-INVOKE.request\
    \     |Invoke-argument-encoding-type  |\n   |                          |Invoke-argument\
    \                |\n   |--------------------------+-------------------------------|\n\
    \   |                          |Operation-value                |\n   |       \
    \                   |Invoker-address                |\n   | ESROS-INVOKE.indication\
    \  |Invoke-argument-encoding-type  |\n   |                          |Invoke-argument\
    \                |\n   |                          |Invoke-ID                 \
    \     |\n   |--------------------------+-------------------------------|\n   |\
    \ ESROS-INVOKE-P.confirm   |Invoke-ID                      |\n   |==========================================================|\n\
    \   |                          |                               |\n   |       \
    \                   |Result-argument-encoding-type  |\n   | ESROS-RESULT.request\
    \     |Result-argument                |\n   |                          |Invoke-ID\
    \                      |\n   |--------------------------+-------------------------------|\n\
    \   |                          |Result-argument-encoding-type  |\n   | ESROS-RESULT.indication\
    \  |Result-argument                |\n   |                          |Invoke-ID\
    \                      |\n   |--------------------------+-------------------------------|\n\
    \   | ESROS-RESULT.confirm     |Invoke-ID                      |\n   |==========================================================|\n\
    \   |                          |                               |\n   |       \
    \                   |Error-value                    |\n   |                  \
    \        |Error-argument-encoding-type   |\n   | ESROS-ERROR.request      |Error-argument\
    \                 |\n   |--------------------------+-------------------------------|\n\
    \   |                          |Error-value                    |\n   |       \
    \                   |Error-argument-encoding-type   |\n   | ESROS-ERROR.indication\
    \   |Error-argument                 |\n   |                          |Invoke-ID\
    \                      |\n   |--------------------------+-------------------------------|\n\
    \   | ESROS-ERROR.confirm      |Invoke-ID                      |\n   |==========================================================|\n\
    \   |                          |                               |\n   |       \
    \                   |Failure-value                  |\n   | ESROS-FAILURE.indication\
    \ |Invoke-ID                      |\n   |__________________________|_______________________________|\n\
    \    Table 2:  ESRO service primitives and associated parameters\n   ______________________________________________________________\n\
    \   |Service Mode        |Performer          |Invoker            |\n   |--------------------+-------------------+-------------------|\n\
    \   |Acknowledged Result |RESULT.confirm     |RESULT.indication  |\n   |     \
    \               |-------------------+-------------------|\n   |              \
    \      |FAILURE.indication |RESULT.indication  |\n   |                    | (protocol)\
    \        |                   |\n   |                    |-------------------+-------------------|\n\
    \   |                    |FAILURE.indication |FAILURE.indication |\n   |     \
    \               | (protocol)        | (protocol)        |\n   |____________________|___________________|___________________|\n\
    \    Table 3:  Success and Failure in Acknowledged Result Mode\n   __________________________________________________________________\n\
    \   |Service Mode            |Performer           |Invoker            |\n   |------------------------+--------------------+-------------------|\n\
    \   |Non-acknowledged Result |RESULT.confirm      |RESULT.indication  |\n   |\
    \                        +--------------------+-------------------|\n   |    \
    \                    |RESULT.confirm      |FAILURE.indication |\n   |        \
    \                |                    | (protocol)        |\n   |            \
    \            +--------------------+-------------------|\n   |                \
    \        |FAILURE.indication  |                   |\n   |                    \
    \    |(protocol)          |                   |\n   |                        |does\
    \ not            |---                |\n   |                        |exist   \
    \            |                   |\n   |________________________|____________________|___________________|\n\
    \    Table 4:  Success and Failure in Non-acknowledged Result Mode\n"
- title: 2.1.2  Invoker side
  contents:
  - "2.1.2  Invoker side\n   When invoker receives failure indication, the performer\
    \ has the\n   failure indication too.\n   This type of service can be implemented\
    \ by protocols based on 3-Way\n   handshaking.\n"
- title: 2.2  Non-acknowledged Result
  contents:
  - "2.2  Non-acknowledged Result\n   In this service mode the result is not acknowledged.\
    \  Table 4\n   summarizes the relationship between performer and invoker in success\n\
    \   and failure cases.\n"
- title: 2.2.1  Performer side
  contents:
  - "2.2.1  Performer side\n   In this type of service, the RESULT.confirm and ERROR.confirm\n\
    \   primitives on performer side are generated without receiving\n   additional\
    \ information from the invoker peer.  In other words, these\n   Primitives have\
    \ no protocol-related meaning and convey no\n   information, other than end-of-operation.\n\
    \   The FAILURE.indication on performer side is not generated by\n   protocol.\
    \  The only case that can generate FAILURE.indication on\n   performer side is\
    \ local failure in service provider on performer\n   side.\n"
- title: 2.2.2  Invoker side
  contents:
  - "2.2.2  Invoker side\n   The FAILURE.indication on invoker side can be the resultof\
    \ not\n   receiving result/error/failure from peer performer or it can result\n\
    \   from failure in local service provider.\n   This type of service can be implemented\
    \ by protocols based on 2-Way\n   handshaking.\n"
- title: 2.3  Serialized Use of ESRO Services
  contents:
  - "2.3  Serialized Use of ESRO Services\n   Although the ESRO Services are defined\
    \ to support asynchronous\n   operation invocation in general, they can be used\
    \ in the special case\n   of synchronous (serialized) mode too.  The serialized\
    \ use of ESRO\n   Services is implementation specific.  However, one of the possible\n\
    \   scenarios is as follows:\n"
- title: 2.3.1  Invoker
  contents:
  - "2.3.1  Invoker\n   Invokes an operation after it receives either RESULT.indication,\n\
    \   ERROR.indication, or FAILURE.indication for the previous operation.\n"
- title: 2.3.2  Performer
  contents:
  - "2.3.2  Performer\n   Considers an operation to be complete and accepts the next\
    \ operation\n   after it receives RESULT.confirm, ERROR.confirm, or\n   FAILURE.indication.\n\
    \                  Invoker        Performer\n                 ESROS AP       \
    \  ESROS AP\n                       |               |\n                      \
    \ |               |\n   ESROS-INVOKE.req.   |               | ESROS-INVOKE.ind.\n\
    \   -------->-----------|               |-------->---------\n                \
    \       |               |\n   ESROS-INVOKE-P.conf.|               |\n   --------<-----------|\
    \               |\n                       |               |\n   ESROS-FAILURE.ind.\
    \  |               |\n   --------<-----------|               |\n             \
    \          |               |\n   Figure 3:  Time sequence diagram for ESROS-INVOKE\
    \ service\n"
- title: 2.4  ESROS-INVOKE Service
  contents:
  - "2.4  ESROS-INVOKE Service\n   The ESROS-INVOKE service is used by an ESROS-User\
    \ (the invoker) to\n   cause the invocation of an OPERATION to be performed by\
    \ the other\n   ESROS-User (the performer).\n   ESROS Invoker User issues ESROS-INVOKE.request\
    \ primitive to invoke an\n   operation.\n   ESROS-INVOKE.indication primitive\
    \ provides the ESROS Performer User\n   with the parameters of the invoked operation.\n\
    \   ESRO Service Provider issues the ESROS-INVOKE-P.confirm primitive to\n   provide\
    \ the ESROS Invoker User with Invoke-ID of the invoked\n   operation.\n   The\
    \ related service structure consists of three service primitives as\n   illustrated\
    \ in Figure 3 and Table 5.\n"
- title: 2.4.1  Operation-value
  contents:
  - "2.4.1  Operation-value\n   This value is the identifier of the operation to be\
    \ invoked.  The\n   value is agreed upon between the ESROS Users.  This parameter\
    \ has to\n   be supplied by the invoker of the service.\n   ESROS Invoker User\
    \ provides the Operation-value parameter for the\n   ESROS-INVOKE.request primitive.\
    \  The Operation-value parameter of\n   ESROS-INVOKE.indication is provided to\
    \ the ESROS Performer User.\n          _____________________________________________________________\n\
    \          | Primitive                |Parameters                       |\n  \
    \        |__________________________|_________________________________|\n    \
    \      |                          |Operation-value                  |\n      \
    \    |                          |Performer-address                |\n        \
    \  | ESROS-INVOKE.request     |Invoke-argument-encoding-type    |\n          |\
    \                          |Invoke-argument                  |\n          |__________________________|_________________________________|\n\
    \          |                          |Operation-value                  |\n  \
    \        |                          |Invoker-address                  |\n    \
    \      |                          |Invoke-argument-encoding-type    |\n      \
    \    | ESROS-INVOKE.indication  |Invoke-argument                  |\n        \
    \  |                          |Invoke-ID                        |\n          |__________________________|_________________________________|\n\
    \          | ESROS-INVOKE-P.confirm   |Invoke-ID                        |\n  \
    \        |                          |Failure-value                    |\n    \
    \      |__________________________|_________________________________|\n      \
    \    | ESROS-FAILURE.indication |Invoke-ID                        |\n        \
    \  |__________________________|_________________________________|\n     Table\
    \ 5:  ESROS-INVOKE service primitives and associated parameters\n"
- title: 2.4.2  Performer-address
  contents:
  - "2.4.2  Performer-address\n   This parameter is the address of the ESROS Performer\
    \ User which\n   consists of ESRO Service Access Point (SAP) Selector, Transport\n\
    \   Service Access Point (TSAP) Selector (e.g., port number), and Network\n  \
    \ Service Access Point (NSAP) address (e.g., IP address).  This\n   parameter\
    \ has to be supplied by the invoker of the service.\n   ESROS Invoker User provides\
    \ the Performer-address parameter for the\n   ESROS-INVOKE.request primitive.\n"
- title: 2.4.3  Invoker-address
  contents:
  - "2.4.3  Invoker-address\n   This parameter is the address of the ESROS Invoker\
    \ User which\n   consists of ESRO Service Access Point (SAP) Selector, Transport\n\
    \   Service Access Point (TSAP) Selector (e.g.  port number), and Network\n  \
    \ Service Access Point (NSAP) address (e.g.  IP address).\n   The Invoker-address\
    \ parameter of ESROS-INVOKE.indication is provided\n   to the ESROS Performer\
    \ User.\n"
- title: 2.4.4  Invoke-argument-encoding-type
  contents:
  - "2.4.4  Invoke-argument-encoding-type\n   This parameter identifies the encoding\
    \ type of the Invoke-argument\n   (see next subsection).  The encoding type has\
    \ to be agreed upon\n   between ESROS Users.  This parameter has to be supplied\
    \ by the\n   invoker of the service.\n   ESROS Invoker User provides the Invoke-argument-encoding-type\n\
    \   parameter for the ESROS-INVOKE.request primitive.  The Invoke-\n   argument-encoding-type\
    \ parameter of ESROS-INVOKE.indication is\n   provided to the ESROS Performer\
    \ User.\n"
- title: 2.4.5  Invoke-argument
  contents:
  - "2.4.5  Invoke-argument\n   This parameter is the argument of the invoked operation.\
    \  The type\n   has to be agreed between the ESROS Users.  This parameter has\
    \ to be\n   supplied by the invoker of the service.  Encoding type of the\n  \
    \ Invoke-argument is specified through the Invoke-argument-encoding-\n   type\
    \ parameter (see previous subsection).\n   ESROS Invoker User provides the Invoke-argument\
    \ parameter for the\n   ESROS-INVOKE.request primitive.  The Invoke-argument parameter\
    \ of\n   ESROS-INVOKE.indication is provided to the ESROS Performer User.\n"
- title: 2.4.6  Invoke-ID
  contents:
  - "2.4.6  Invoke-ID\n   This parameter identifies the invocation of an ESROS-INVOKE\
    \ service\n   and is used to correlate this invocation with the corresponding\n\
    \   replies (ESROS-RESULT, ESROS-ERROR, and ESROS-FAILURE services.)\n   This\
    \ parameter has to be supplied by the ESROS provider.\n   This parameter distinguishes\
    \ several invocations of the service in\n   progress (asynchronous operations).\
    \  The ESROS provider may begin to\n   reuse Invoke-ID values whenever it chooses,\
    \ subject to the constraint\n   that it may not reuse an Invoke-ID value that\
    \ was previously assigned\n   to an invocation of the service for which it expects,\
    \ but has not yet\n   received a reply.  In other words, the provider does not\
    \ reuse a\n   previously used Invoke-ID unless the corresponding service is fully\n\
    \   completed.\n"
- title: 2.4.7  Failure-value
  contents:
  - "2.4.7  Failure-value\n   This parameter identifies the failure that occurred\
    \ during the\n   processing or transmission of any of the service primitives of\
    \ ESROS.\n                  Invoker        Performer\n                 ESROS AP\
    \         ESROS AP\n                       |               |\n               \
    \        |               |\n   ESROS-RESULT.ind.   |               | ESROS-RESULT.req.\n\
    \   --------<-----------|               |--------<---------\n                \
    \       |               |\n                       |               | ESROS-RESULT.conf.\n\
    \                       |               |-------->---------\n                \
    \       |               |\n                       |               | ESROS-FAILURE.ind.\n\
    \                       |               |-------->---------\n                \
    \       |               |\n   Figure 4:  Time sequence diagram for ESROS-RESULT\
    \ service\n   This parameter has to be supplied by the ESROS provider (see also\n\
    \   Section 2.7).\n"
- title: 2.5  ESROS-RESULT Service
  contents:
  - "2.5  ESROS-RESULT Service\n   The ESROS-RESULT service is used by an ESROS User\
    \ to reply to a\n   previous ESROS-INVOKE.indication in the case of a successfully\n\
    \   performed operation.  This service is either confirmed or non-\n   confirmed\
    \ based on the service mode (see Section 2).\n   The related service structure\
    \ consists of three service primitives as\n   illustrated in Figure 4 and Table\
    \ 6.\n"
- title: 2.5.1  Result-argument-encoding-type
  contents:
  - "2.5.1  Result-argument-encoding-type\n   This parameter identifies the encoding\
    \ type of the Result-argument\n   (see next subsection).  The encoding type has\
    \ to be agreed upon\n   between the ESROS Users.  This parameter has to be supplied\
    \ by the\n   ESROS Performer User.\n   ESROS Performer User provides the Result-argument-encoding-type\n\
    \   parameter for the ESROS-RESULT.request primitive.  The Result-\n   argument-encoding-type\
    \ parameter of ESROS-RESULT.indication is\n   provided to the ESROS Invoker User.\n\
    \   ______________________________________________________________\n   | Primitive\
    \                |Parameters                       |\n   |__________________________|_________________________________|\n\
    \   |                          |Result-argument-encoding-type    |\n   |     \
    \                     |Result-argument                  |\n   | ESROS-RESULT.request\
    \     |Invoke-ID                        |\n   |__________________________|_________________________________|\n\
    \   |                          |                                 |\n   |     \
    \                     |Result-argument-encoding-type    |\n   |              \
    \            |Result-argument                  |\n   | ESROS-RESULT.indication\
    \  |Invoke-ID                        |\n   |__________________________|_________________________________|\n\
    \   |                          |                                 |\n   | ESROS-RESULT.confirm\
    \     |Invoke-ID                        |\n   |                          |Failure-value\
    \                    |\n   |                          |                      \
    \           |\n   |__________________________|_________________________________|\n\
    \   | ESROS-FAILURE.indication |Invoke-ID                        |\n   |__________________________|_________________________________|\n\
    \   Table 6:  ESROS-RESULT service primitives and associated parameters\n"
- title: 2.5.2  Result-argument
  contents:
  - "2.5.2  Result-argument\n   This parameter is the result of an invoked and successfully\
    \ performed\n   operation.  The type has to be agreed between the ESROS Users.\
    \  This\n   parameter has to be supplied by the invoker of the service.  Encoding\n\
    \   type of the Result-argument is specified through the Result-\n   argument-encoding-type\
    \ parameter (see previous subsection).\n   ESROS Performer User provides the Result-argument\
    \ parameter for the\n   ESROS-RESULT.request primitive.  The Result-argument parameter\
    \ of\n   ESROS-RESULT.indication is provided to the ESROS Invoker User.\n"
- title: 2.5.3  Invoke-ID
  contents:
  - "2.5.3  Invoke-ID\n   This parameter identifies the corresponding invocation.\
    \  This\n   Invoke-ID, which is originally generated by the ESROS provider at\
    \ the\n   time of ESROS-INVOKE indication, is extracted from the Invoke ID that\n\
    \   has to be supplied by the ESROS performer User.  The value is that of\n  \
    \ the corresponding ESROS-INVOKE.indication primitive.\n                  Invoker\
    \        Performer\n                 ESROS AP         ESROS AP\n             \
    \          |               |\n                       |               |\n   ESROS-ERROR.ind.\
    \    |               | ESROS-ERROR.req.\n   --------<-----------|            \
    \   |--------<---------\n                       |               |\n          \
    \             |               | ESROS-ERROR.conf.\n                       |  \
    \             |-------->---------\n                       |               |\n\
    \                       |               | ESROS-FAILURE.ind.\n               \
    \        |               |-------->---------\n   Figure 5:  Time sequence diagram\
    \ for ESROS-ERROR service\n"
- title: 2.5.4  Failure-value
  contents:
  - "2.5.4  Failure-value\n   This parameter identifies the failure that occurred\
    \ during the\n   processing or transmission of any of the service primitives of\
    \ ESROS.\n   This parameter has to be supplied by the ESROS provider (see also\n\
    \   Section 2.7).\n"
- title: 2.6  ESROS-ERROR Service
  contents:
  - "2.6  ESROS-ERROR Service\n   The ESROS-ERROR service is used by an ESROS User\
    \ to reply to a\n   previous ESROS-INVOKE.indication in the case of an unsuccessfully\n\
    \   performed operation.  This service is either confirmed or non-\n   confirmed\
    \ based on the service mode (see Section 2).\n   The related service structure\
    \ consists of three service primitives as\n   illustrated in Figure 5 and Table\
    \ 7.\n"
- title: 2.6.1  Error-value
  contents:
  - "2.6.1  Error-value\n   This parameter identifies the error in reply to a previous\
    \ ESROS-\n   INVOKE.indication in the case of an unsuccessfully performed\n  \
    \ operation.  The value has to be agreed between the ESROS-Users.  This\n   parameter\
    \ has to be supplied by the ESROS Performer User.\n   ESROS Performer User provides\
    \ the Error-argument parameter for the\n   ESROS-ERROR.request primitive.  The\
    \ Error-argument parameter of\n   ESROS-ERROR.indication is provided to the ESROS\
    \ Invoker User.\n          ________________________________________________________\n\
    \          | Primitive                |Parameters                  |\n       \
    \   |__________________________|____________________________|\n          |   \
    \                       |Error-value                 |\n          |          \
    \                |Error-argument-encoding-type|\n          | ESROS-ERROR.request\
    \      |Error-argument              |\n          |__________________________|____________________________|\n\
    \          |                          |                            |\n       \
    \   |                          |Error-value                 |\n          |   \
    \                       |Error-argument-encoding-type|\n          | ESROS-ERROR.indication\
    \   |Error-argument              |\n          |                          |Invoke-ID\
    \                   |\n          |                          |                \
    \            |\n          |__________________________|____________________________|\n\
    \          | ESROS-ERROR.confirm      |Invoke-ID                   |\n       \
    \   |                          |Failure-value               |\n          |   \
    \                       |                            |\n          |__________________________|____________________________|\n\
    \          | ESROS-FAILURE.indication |Invoke-ID                   |\n       \
    \   |__________________________|____________________________|\n    Table 7:  ESROS-ERROR\
    \ service primitives and associated parameters\n"
- title: 2.6.2  Error-argument-encoding-type
  contents:
  - "2.6.2  Error-argument-encoding-type\n   This parameter identifies the encoding\
    \ type of the Error-argument\n   (see next subsection).  The encoding type has\
    \ to be agreed upon\n   between the ESROS Users.  This parameter has to be supplied\
    \ by the\n   ESROS Performer User.\n   ESROS Performer User provides the Error-argument-encoding-type\n\
    \   parameter for the ESROS-ERROR.request primitive.  The Error-\n   argument-encoding-type\
    \ parameter of ESROS-ERROR.indication is\n   provided to the ESROS Invoker User.\n"
- title: 2.6.3  Error-argument
  contents:
  - "2.6.3  Error-argument\n   This parameter provides additional information about\
    \ the error in\n   reply to a previous ESROS-INVOKE.indication in the case of\
    \ an\n   unsuccessfully performed operation.  The type (if any) has to be\n  \
    \ agreed between the ESROS users.  This parameter has to be supplied by\n   the\
    \ ESROS Performer User.  Encoding type of the Error-argument is\n   specified\
    \ through the Error-argument-encoding-type parameter (see\n   previous subsection).\n\
    \                  Invoker        Performer\n                 ESROS AP       \
    \  ESROS AP\n                       |               |\n                      \
    \ |               |\n   ESROS-FAILURE.ind.  |               |\n   --------<-----------|\
    \               |\n                       |               |\n                \
    \       |               | ESROS-FAILURE.ind.\n                       |       \
    \        |--------->---------\n                       |               |\n   Figure\
    \ 6:  Time sequence diagram for ESROS-FAILURE service\n   ESROS Performer User\
    \ provides the Error-argument parameter for the\n   ESROS-ERROR.request primitive.\
    \  The Error-argument parameter of\n   ESROS-ERROR.indication is provided to the\
    \ ESROS Invoker User.\n"
- title: 2.6.4  Invoke-ID
  contents:
  - "2.6.4  Invoke-ID\n   This parameter identifies the corresponding invocation.\
    \  This\n   Invoke-ID, which is originally generated by the ESROS provider at\
    \ the\n   time of the ESROS-INVOKE.indication, is extracted from the Invoke ID\n\
    \   which has to be supplied by the ESROS performer User.  The value is\n   that\
    \ of the corresponding ESROS-INVOKE.indication primitive.\n"
- title: 2.6.5  Failure-value
  contents:
  - "2.6.5  Failure-value\n   This parameter identifies the failure that occurred\
    \ during the\n   processing or transmission of any of the service primitives of\
    \ ESROS.\n   This parameter has to be supplied by the ESROS provider (see also\n\
    \   Section 2.7).\n"
- title: 2.7  ESROS-FAILURE Service
  contents:
  - "2.7  ESROS-FAILURE Service\n   The ESROS-FAILURE service is used by ESROS provider\
    \ to indicate the\n   failure in providing an ESROS-INVOKE, ESROS-RESULT, or ESROS-ERROR\n\
    \   service.\n   The related service structure consists of one service primitive\
    \ as\n   illustrated in Figure 6 and Table 8.\n          _____________________________________________\n\
    \          | Primitive                |Parameters       |\n          |__________________________|_________________|\n\
    \          |                          |Failure-value    |\n          | ESROS-FAILURE.indication\
    \ |Invoke-ID        |\n          |__________________________|_________________|\n\
    \   Table 8:  ESROS-FAILURE service primitives and associated parameters\n   \
    \       _________________________________________\n          | Failure Value |Meaning\
    \                 |\n          |_______________|________________________|\n  \
    \        | 0             |Transmission failure    |\n          | 1           \
    \  |Out of local resources  |\n          | 2             |User not responding\
    \     |\n          | 3             |Out of remote resources |\n          | 4 \
    \            |Reassembly failure      |\n          |_______________|________________________|\n\
    \             Table 9:  Encoding of Failure-value\n"
- title: 2.7.1  Failure-value
  contents:
  - "2.7.1  Failure-value\n   This parameter identifies the failure that occurred\
    \ during the\n   processing or transmission of any of the service primitives of\
    \ ESROS.\n   This parameter has to be supplied by the ESROS provider.\n   The\
    \ values for encoding of Failure-value are presented in Table 9.\n"
- title: 2.7.2  Invoke-ID
  contents:
  - "2.7.2  Invoke-ID\n   This parameter identifies the corresponding invocation.\
    \  This\n   Invoke-ID, which is originally generated by ESROS provider at the\n\
    \   time of the ESROS-INVOKE.indication, is extracted from the Invoke ID\n   which\
    \ has to be supplied by ESROS performer User.  The value is that\n   of the corresponding\
    \ ESROS-INVOKE.indication primitive.\n"
- title: 3  ESRO SERVICE NOTATION
  contents:
  - "3  ESRO SERVICE NOTATION\n   Users of ESRO services (invoker and performer) need\
    \ to agree on a\n   well defined set of parameters which are enumerated below.\n\
    \    1. The operation's Argument data type.\n    2. The operation's Result data\
    \ type.\n    3. The operation's Error data type.\n    4. The operation's value.\
    \  A specific tag which uniquely identifies\n        the operation.\n   The invoker\
    \ and the performer can specify these parameters using a\n   variety of mechanisms.\
    \  The notation specified in this section is one\n   such mechanism.  It is not\
    \ the only machanism and ESRO protocol can\n   be used independent of this notation.\n"
- title: 3.1  ES-OPERATION Notation
  contents:
  - "3.1  ES-OPERATION Notation\n   The Remote Operations and Operation Errors are\
    \ specified in this\n   section.  The notation is defined by means of the macro\
    \ facility\n   defined in [3].\n   The macros enabling the specification of operations\
    \ and errors are\n   listed in Figure 7.\n   Note that this notation is very similar\
    \ to the abstract operation\n   defined in [1].  The value form of ES-OPERATION\
    \ is always an integer.\n"
- title: 3.2  Mapping of ESROS Notation
  contents:
  - '3.2  Mapping of ESROS Notation

    '
- title: 3.2.1  Invocation of an Operation
  contents:
  - "3.2.1  Invocation of an Operation\n   An operation is mapped onto the ESRO Services.\n\
    \   The invocation of an operation is mapped on the ESRO-INVOKE service.\n   The\
    \ value assigned to the operation is mapped on the Operation-value\n   parameter\
    \ of that service.  The value of the Named-Type in the\n   ARGUMENT clause of\
    \ the OPERATION Macro is mapped on the Argument\n   parameter of that service.\n"
- title: 3.2.2  Reply of an Operation
  contents:
  - "3.2.2  Reply of an Operation\n   If an operation was successfully performed,\
    \ the reply is mapped on\n   the ESRO-RESULT service.\n   The value of the Named-Type\
    \ in the RESULT clause of the OPERATION\n   DEFINITIONS ::=\n   BEGIN\n     ES-OPERATION,\
    \ ERROR;\n     -- macro definition for operations\n     ES-OPERATION MACRO ::=\n\
    \     BEGIN\n           TYPE NOTATION   ::=     Argument Result Errors\n     \
    \      VALUE NOTATION  ::=     value (localValue INTEGER)\n           Argument\
    \        ::=     \"ARGUMENT\" NamedType | empty\n           Result          ::=\
    \     \"RESULT\" ResultType | empty\n           ResultType      ::=     NamedType\
    \ | empty\n           Errors          ::=     \"ERRORS\" \"{\"ErrorNames\"}\"\
    \ | empty\n           ErrorNames      ::=     ErrorList | empty\n           ErrorList\
    \       ::=     Error | ErrorList \",\" Error\n           Error           ::=\
    \     value (ERROR) | type\n           NamedType       ::=     identifier type\
    \ | type\n     END\n     -- macro definition for operations errors\n     ERROR\
    \ MACRO   ::=\n     BEGIN\n           TYPE NOTATION   ::=     Parameter\n    \
    \       VALUE NOTATION  ::=     value (localValue INTEGER)\n           Parameter\
    \       ::=     \"PARAMETER\" NamedType | empty\n           NamedType       ::=\
    \     identifier type | type\n     END\n   END\n            Figure 7:  ES Remote\
    \ Operation Notation\n   macro is mapped on the Result parameter of that service.\n\
    \   If an operation was not successfully performed, the reply is mapped\n   on\
    \ the ESRO-ERROR service.\n   In this case one of the errors in the Identifier\
    \ List of Error Names\n   in the ERROR clause of the OPERATION macro may be applied.\
    \  The value\n   assigned to the applied error is mapped onto the Error parameter\
    \ of\n   that service.  The value of the Named-Type in the PARAMETER clause of\n\
    \   the ERROR macro of the applied error is mapped on the Error-\n   parameter\
    \ of that service.\n"
- title: 4  REMOTE OPERATIONS PROTOCOL
  contents:
  - '4  REMOTE OPERATIONS PROTOCOL

    '
- title: 4.1  Overview of the Protocol
  contents:
  - "4.1  Overview of the Protocol\n   The ESROS protocol realizes the services defined\
    \ in the section\n   entitled ESROS Service Definitions.  Short operations are\
    \ performed\n   in a highly efficient manner.  The protocol operation is summarized\n\
    \   below and is described in detail in the following sections.\n   Two Functional\
    \ Units are defined which realize the services with 2-\n   Way handshake and 3-Way\
    \ handshake, called 2-Way Handshake Functional\n   Unit and 3-Way Handshake Functional\
    \ Unit respectively.\n   The procedures specified in this section refer to Protocol\
    \ Data Units\n   (PDUs) which are defined in Section 4.4.\n"
- title: 4.1.1  Service Provision (Invoker User)
  contents:
  - "4.1.1  Service Provision (Invoker User)\n      o An ESROS user binds to an ESRO\
    \ Service Access Point (SAP) and\n        specifies whether 3-Way or 2-Way handshake\
    \ Functional Unit is to\n        be associated with the SAP.\n      o An ESROS\
    \ user initiates the transfer of a PDU using the INVOKE\n        service.\n  \
    \    o On receipt of an ESROS-INVOKE.request service primitive from the\n    \
    \    ESROS user:\n            -- The ESROS provider generates an Invoke ID,\n\
    \            -- Communicates the Invoke-ID to the invoker of the service\n   \
    \                through the ESROS-INVOKE-P.confirm primitive,\n"
- title: 4.1.2  Service Provision (Performer User)
  contents:
  - "4.1.2  Service Provision (Performer User)\n      o An ESROS user binds to an\
    \ ESRO Service Access Point (SAP) and\n        specifies whether 3-Way or 2-Way\
    \ handshake Functional Unit is to\n        be associated with the SAP.\n     \
    \ o On receipt of an ESRO-INVOKE-PDU, the ESROS provider issues an\n        ESROS-INVOKE.indication\
    \ to the ESROS performer user.\n      o On receipt of ESROS-RESULT.request or\
    \ ESROS-ERROR.request from\n        the performer, the provider creates the ESRO-RESULT-PDU\
    \ or\n        ESRO-ERROR-PDU.\n      o In the case that the provider receives\
    \ an ESRO-ACK-PDU for the\n        transmitted ESRO-RESULT-PDU or ESRO-ERROR-PDU,\
    \ if the\n        corresponding SAP is associated with the 3-Way Handshake\n \
    \       Functional Unit, it passes an ESROS-RESULT.confirm or ESROS-\n       \
    \ ERROR.confirm to the performer user.  If the corresponding SAP\n        is associated\
    \ with the 2-Way handshake Functional Unit, the\n        ESRO-ACK-PDU is dropped\
    \ as an invalid PDU.\n      o In the case that the provider is not able to deliver\
    \ the\n        ESRO-RESULT-PDU or ESRO-ERROR-PDU, it issues an ESROS-\n      \
    \  FAILURE.indication to the performer user.  In the case that the\n        performer's\
    \ SAP is associated with the 3-Way handshake\n        Functional Unit and provider\
    \ doesn't receive the ESRO-ACK-PDU\n        for a transmitted ESRO-RESULT-PDU\
    \ or an ESRO-ERROR-PDU, it\n        passes an ESROS- FAILURE.indication to the\
    \ performer user.\n      o In the case that the performer's SAP is associated\
    \ with the\n        3-Way handshake Functional Unit and provider receives an ESRO-\n\
    \        ACK-PDU for the operation, it passes an ESROS-RESULT.confirm or\n   \
    \     ESROS-ERROR.confirm.  In the case that the performer's SAP is\n        associated\
    \ with a 2-Way handshake Functional Unit and provider\n        doesn't receive\
    \ duplicate ESROS-INVOKE-PDUs from the invoker, it\n        passes an ESROS-RESULT.confirm\
    \ or ESROS-ERROR.confirm.\n      o On receipt of an ESRO-FAILURE-PDU, the ESROS\
    \ provider issues an\n        ESROS-FAILURE.indication to the ESROS performer\
    \ user.\n"
- title: 4.2  Protocol Procedures
  contents:
  - '4.2  Protocol Procedures

    '
- title: 4.2.1  Service Access Point (SAP) Bind Procedure
  contents:
  - "4.2.1  Service Access Point (SAP) Bind Procedure\n   To access the ESRO Services,\
    \ an ESROS user binds to an ESRO Service\n   Access Point and specifies the SAP\
    \ to be associated with 3-Way\n   handshake Functional Unit or 2-Way handshake\
    \ Functional Unit.  ESROS\n   provider generates a SAP descriptor which is passed\
    \ to the user.  The\n   handshaking for all Invoke.requests addressed to that\
    \ SAP and all\n   PDUs addressed to that SAP will be either 3-Way or 2-Way based\
    \ on the\n   Functional Unit associated with SAP and specified by user at SAP\
    \ bind\n   time.\n   It is the responsibility of the ESROS peer users (invoker\
    \ and\n   performer) to address their operations to the appropriate SAP (3-Way\n\
    \   or 2-Way) based on the agreement between users.\n"
- title: 4.2.2  Invoke Service Procedure
  contents:
  - "4.2.2  Invoke Service Procedure\n   An ESROS user initiates the transfer of a\
    \ PDU using the INVOKE\n   service.\n   On receipt of an ESRO-INVOKE-PDU, the\
    \ ESROS provider sends an ESROS-\n   INVOKE.indication primitive to the ESROS\
    \ performer user.\n"
- title: 4.2.3  Invoke ID Assignment Procedure
  contents:
  - "4.2.3  Invoke ID Assignment Procedure\n   On receipt of an ESROS-INVOKE.request\
    \ primitive from the ESROS user,\n   the ESROS provider generates two invoke identifiers:\n\
    \      o Invoke-Reference-Number:  Uniquely identifies the invocation\n      \
    \  between the two peers.  This is a PDU field with a length of 8\n        bits\
    \ (see section 4.4).\n      o Invoke-ID-Parameter:  Uniquely identifies the invocation\
    \ to the\n        service user.  This Invoke-ID-Parameter is a combination of\
    \ the\n        Invoke-Reference-Number described above and the invoker address,\n\
    \        performer address, and the SAP Selector.\n   The provider communicates\
    \ the Invoke-ID-Parameter to the invoker of\n   the INVOKE service through the\
    \ ESROS-INVOKE-P.confirm primitive.\n   The Invoke-Reference-Number distinguishes\
    \ several invocations of the\n   service in progress (asynchronous operations).\
    \  It is also used as\n   segment identifier when a Service Data Unit (SDU) is\
    \ transferred\n   using segmentation and reassembly.  The ESROS provider may begin\
    \ to\n   reuse the Invoke-Reference-Number values whenever it chooses, subject\n\
    \   to the constraint that it may not reuse an Invoke-Reference-Number\n   value\
    \ that was previously assigned to an invocation of the service\n   for which it\
    \ expects, but has not yet received, a reply.  In other\n   words the provider\
    \ does not reuse a previously used Invoke-\n   Reference-Number unless the corresponding\
    \ service is fully completed.\n   The same value of the Invoke-Reference-Number\
    \ can be reused to\n   identify the invocation between different peer entities.\
    \  In that\n   case, the combination of the peer entity's address and the Invoke-\n\
    \   Reference-Number guarantees unique identification of each invocation.\n"
- title: 4.2.4  Functional Unit Selection Procedure
  contents:
  - "4.2.4  Functional Unit Selection Procedure\n   When an ESRO Services user binds\
    \ to an ESRO SAP, it associates its\n   SAP descriptor to 3-Way Handshake Functional\
    \ Unit or 2-Way Handshake\n   Functional Unit.\n   Based on the Functional Unit\
    \ associated with SAP, provider selects\n   the corresponding Functional Unit\
    \ for all Invoke Requests or PDUs\n   addressed to that SAP.\n"
- title: 4.3  Connectionless PDU Transfer For Small PDUs
  contents:
  - '4.3  Connectionless PDU Transfer For Small PDUs

    '
- title: 4.3.1  Overview
  contents:
  - "4.3.1  Overview\n   PDUs sent by UDP use port ESRO_CL_PORT. PDUs carried by UDP\
    \ are\n   restricted to CLRO_SMALL_PDU_MAX_SIZE bytes (see 4.6.1)\n   Each PDU\
    \ is encapsulated in a single UDP datagram.\n   For PDUs larger than CLRO_SMALL_PDU_MAX_SIZE\
    \ but smaller than\n   CLRO_SEGMENTED_PDU_MAX_SIZE bytes (see 4.6.1), segmentation\
    \ and\n   reassembly is used and each segment is transmitted in a UDP datagram.\n\
    \   PDUs sent using UDP may be lost, and hence a retransmission strategy\n   is\
    \ defined.  When a PDU is segmented, the retransmission strategy is\n   not applied\
    \ to individual segments (i.e., loss of one segment results\n   in retransmission\
    \ of the whole SDU).\n   The optimal UDP retransmission policy will vary with\
    \ the performance\n   of the network and the needs of the transmitter, but the\
    \ following\n   are considered:\n   The retransmission interval should be based\
    \ on prior statistics if\n   possible.  Too aggressive retransmission can easily\
    \ slow response\n   time of the network at large.  Depending on how well connected\
    \ the\n   invoker is to its performer, the minimum retransmission interval\n \
    \  should be RETRANSMISSION_INTERVAL (see 4.6.2) seconds.\n   Delivery of PDUs\
    \ is asynchronous which means the ESROS does not wait\n   for the result of a\
    \ transmitted PDU and continues delivering the next\n   PDUs.\n       ______________________________________________________\n\
    \       |From Idle to:                      |Event            |\n       |___________________________________|_________________|\n\
    \       |CL-Invoker Transition Diagram      |ESRO-INVOKE.req  |\n       | 2-way\
    \ Handshake (Connectionless)  |                 |\n       |___________________________________|_________________|\n\
    \       |CL-Invoker Transition Diagram      |ESRO-INVOKE.req  |\n       | 3-way\
    \ Handshake (Connectionless)  |                 |\n       |___________________________________|_________________|\n\
    \       |CL-Performer Transition Diagram    |INVOKE-PDU       |\n       | 3-way\
    \ Handshake (Connectionless)  |                 |\n       |___________________________________|_________________|\n\
    \       |CL-Performer Transition Diagram    |INVOKE-PDU       |\n       | 2-way\
    \ Handshake  (Connectionless) |                 |\n       |___________________________________|_________________|\n\
    \                Table 10:  ESROS Finite State Machine\n   This section describes\
    \ the ESROS protocols in terms of state\n   diagrams.  The ESROS Finite State\
    \ Machine is expressed as four\n   separate transition diagrams.  This is illustrated\
    \ in Table 10.\n   Details of each of the two transition diagrams for connectionless\n\
    \   transmission and different handshakings are described in the\n   following\
    \ sections.  The state diagrams show the state, the events,\n   the actions taken\
    \ and the resultant state.The ESROS state transition\n   diagrams for connectionless\
    \ data transmission are presented in Table\n   11, Table 12, Table 13, and Table\
    \ 14.\n   Transitions are identified by numbers on the state diagrams.  The\n\
    \   corresponding actions are listed next to each table.\n"
- title: 4.3.2  3-Way Handshake Functional Unit
  contents:
  - "4.3.2  3-Way Handshake Functional Unit\n   This unit implements the Acknowledged\
    \ Result model of ESRO Services.\n   3-Way handshaking is used in this unit.\n\
    \   The RESULT.confirm and ERROR.confirm primitives on performer are\n   generated\
    \ when ESRO-ACK-PDU is received.\n   The FAILURE.indication on performer side\
    \ is resulted from remote or\n   local failures.  Not receiving ESRO-ACK-PDU or\
    \ local failure can\n   generate FAILURE.indication primitive.\n   The FAILURE.indication\
    \ on invoker side is generated if a local\n   failure happens or a ESRO-FAILURE-PDU\
    \ is received.\n   _______________________________________________________________\n\
    \   |      State      |STA01     |STA02      |STA03    |STA04     |\n   |    \
    \             |CL Invoker|Invoke PDU |ACK-PDU  |Invoker   |\n   |Event       \
    \     |Start     |Send       |Send     |RefNu Wait|\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |U: INVOKE.request|(1) STA02 |           |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |T: INVOKE PDU    |          |(2) STA02  |         |          |\n   | Retransmit\
    \      |          |           |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |T: Last Timer    |          |(3) STA04  |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |P: Result-PDU    |          |           |         |(9) STA04 |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |P: Failure-PDU   |          |(5) STA04  |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |P: ACK-PDU       |          |(6) STA02  |         |          |\n   | (Hold\
    \ On)       |          |           |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |P: Duplicate     |          |           |(7) STA03|          |\n   |  Result-PDU\
    \     |          |           |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |T: RefNu Timer   |          |           |         |(8) STA01 |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |P: Result-PDU    |          |(4) STA03  |         |          |\n   |-----------------+----------+-----------+---------+----------+\n\
    \   |T: Inactivity    |          |           |(10)     |          |\n   | Timer\
    \           |          |           |STA04    |          |\n   |_________________|__________|___________|_________|__________|\n\
    \   Table 11:  ESROS State Transition Diagram-Connectionless Transmission,\n \
    \  3-Way HS. P = Protocol, T = Timer, U = User, I = Internal.\n   The transmission\
    \ of INVOKE, RESULT, and ERROR SDUs can be in a single\n   PDU (when it fits in\
    \ one UDP) or a sequence of segment PDUs.\n   3-Way Handshake Connectionless Transmission:\
    \  Invoker\n   For each transition number in the state diagram Table 11, the\n\
    \   corresponding actions are listed below:\n    1. INVOKE.request:\n      o Assign\
    \ Invoke-ID.\n      o Issue ESROS-INVOKE-P.confirm primitive.\n      o Assign\
    \ invoke reference number.\n      o Send operation in one ESRO-INVOKE-PDU or in\
    \ segmented INVOKE-\n        PDUs depending on the size of the operation.\n  \
    \    o Initialize retransmission counter.\n      o Initialize retransmission timer.\n\
    \    2. Invoke PDU Retransmit:\n      o Retransmit operation in one ESRO-INVOKE-PDU\
    \ or segmented PDUs\n        while number of retransmissions is less than\n  \
    \      MAX_RETRANSMISSIONS.\n      o Increment the retransmission counter.  When\
    \ MAX_RETRANSMISSIONS\n        reached, start LAST_TIMER, otherwise initialize\
    \ retransmission\n        timer.\n    3. Last Timer:\n      o Issue ESROS-FAILURE.indication\
    \ primitive.\n      o Initialize reference number timer.\n    4. ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU (or reassembled ESRO-\n       RESULT-SEGMENTED-PDU or ESRO-ERROR-SEGMENTED-PDU\
    \ when the PDU is\n       received in segmented format):\n      o Send ESRO-ACK-PDU.\n\
    \      o Issue ESROS-RESULT.indication or ESROS-ERROR.indication\n        primitive.\n\
    \      o Initialize inactivity timer.\n    5. ESRO-FAILURE-PDU:\n      o Issue\
    \ ESROS-FAILURE.indication primitive with User not\n        Responding failure\
    \ cause.\n      o Initialize reference number timer.\n    6. ESRO-ACK-PDU (Hold\
    \ on):\n      o For future use (no action).\n    7. Duplicate ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU:\n      o Initialize inactivity timer (Ignore PDU).\n    \
    \  o Send ESRO-ACK-PDU.\n    8. Invoke reference number timer:\n      o Release\
    \ the invoke reference number.\n    9. ESRO-RESULT-PDU or ESRO-ERROR-PDU:\n  \
    \    o Reset Invoke reference number timer.\n    10. Inactivity timer:\n     \
    \ o Initialize reference number timer.\n   On receipt of an ESROS-INVOKE.request,\
    \ ESROS provider generates an\n   Invoke- Reference-Number and an Invoke-ID (see\
    \ Section 4.2.3).  The\n   provider issues an ESROS-INVOKE-P.confirm primitive\
    \ and passes the\n   Invoke-ID to the invoker.\n   The ESROS provider initiates\
    \ the timer for the Invoke-ID and\n   transmits the PDU. Based on the size of\
    \ SDU, if segmentation is\n   required, the SDU is segmented and transmitted in\
    \ a sequence of\n   segmented PDUs.  If the ESRO-RESULT-PDU or ESRO-ERROR-PDU\
    \ associated\n   with the invoke ID is not received within the\n   INVOKE_PDU_RETRANSMISSION_INTERVAL\
    \ (see 4.6.2) period, the SDU is\n   retransmitted (in one PDU or segmented and\
    \ transmitted in a sequence\n   of segment PDUs).  The retransmission is repeated\
    \ for a maximum of\n   MAX_RETRANSMISSIONS unless an ESRO-RESULT-PDU or ESRO-ERROR-PDU\
    \ is\n   received.\n   If the ESRO-RESULT-PDU or ESRO-ERROR-PDU is received in\
    \ a segmented\n   format, the reassembly process reassembles the sequence of segment\n\
    \   PDUs.\n   In the case that the Hold-on ESRO-ACK-PDU is received from the\n\
    \   performer, the provider stops retransmitting the ESRO-INVOKE-PDU and\n   waits\
    \ for the ESRO- RESULT-PDU or ESRO-ERROR-PDU for a period equal\n   to the multiplication\
    \ of INVOKE_PDU_RETRANSMISSION_INTERVAL (see\n   4.6.2) and MAX_RETRANSMISSIONS\
    \ (see 4.6.2, for future use).\n   In the case that the ESRO-INVOKE-PDU is sent\
    \ MAX_RETRANSMISSIONS (see\n   4.6.2) times and no ESRO-RESULT-PDU or ESRO-ERROR-PDU\
    \ is received,\n   the ESROS provider sends an ESROS-FAILURE.indication primitive,\
    \ with\n   the Invoke-ID of the failed PDU and the Failure-value as parameters,\n\
    \   to the invoker.\n   When an ESRO-RESULT-PDU or ESRO-ERROR-PDU is received\
    \ (whether in one\n   PDU or reassembled from a sequence of segmented PDUs), the\
    \ provider\n   issues an ESROS-RESULT.indication or ESROS-ERROR.indication to\
    \ the\n   invoker user, sends an ESRO-ACK-PDU and initializes the inactivity\n\
    \   timer.  In the case that duplicate ESRO- RESULT-PDU or ESRO-ERROR-PDU\n  \
    \ ____________________________________________________________________\n   | \
    \     State      |STA01        |STA02      |STA03     |STA04      |\n   |    \
    \             |CL Performer |Invoke PDU |ACK-PDU   |Performer  |\n   |Event  \
    \          |Start        |Received   |Wait      |RefNu Wait |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |P: Invoke-PDU    |(1) STA02    |           |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |U: RESULT.req.   |             |(2) STA03  |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |P: ACK-PDU       |             |           |(3) STA04 |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |P: Invoke-PDU    |             |(4) STA02  |(6) STA03 |(7) STA04  |\n   |\
    \ Duplicate       |             |           |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |T: Result-PDU    |             |           |(5) STA03 |           |\n   |\
    \ Retransmission  |             |           |          |           |\n   | Timer\
    \           |             |           |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |I: Failure       |             |(8) STA01  |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |T: Last Time     |             |           |(9) STA04 |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |T: RefNu Timer   |             |           |          |(10) STA01 |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |P: ACK-PDU       |             |           |          |(11) STA04 |\n   |\
    \ Duplicate       |             |           |          |           |\n   |-----------------+-------------+-----------+----------+-----------|\n\
    \   |U/P: Hold On ACK |             |(12) STA02 |          |           |\n   ____________________________________________________________________\n\
    \   Table 12:  ESROS State Transition Diagram-Connectionless Transmission,\n \
    \  3-Way HS: Performer.  P = Protocol, T = Timer, U = User, I = Internal.\n  \
    \ are received, they are ignored, the inactivity timer is reset, and an\n   ESRO-ACK-PDU\
    \ is retransmitted.\n   When no duplicate ESRO-RESULT-PDU or ESRO-ERROR-PDU is\
    \ received for a\n   period equal to INACTIVITY_TIME (see 4.6.2), or in the case\
    \ of ESRO-\n   INVOKE- PDU retransmission time-out, or in the case of internal\n\
    \   failure, the provider initializes the reference number timer.  After\n   REFERENCE_NUMBER_TIME\
    \ (see 4.6.2), the reference number is released.\n   3-Way Handshake Connectionless\
    \ Transmission:  Performer\n   For each transition number in the state diagram\
    \ above, the\n   corresponding actions are listed below:\n     1. ESRO-INVOKE-PDU\
    \ (as a single PDU or a sequence of segment PDUs):\n      o Issue ESROS-INVOKE.indication\
    \ primitive.\n    2. ESROS-RESULT.request or ESROS-ERROR.request:\n      o Add\
    \ invoke reference number to the active list.\n      o Transmit ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU (in a single PDU or\n        a sequence of segment PDUs).\n\
    \      o Set ESRO-RESULT-PDU or ESRO-ERROR-PDU retransmission timer.\n    3. ESRO-ACK-PDU:\n\
    \      o Initialize invoke reference number timer.\n      o Issue ESROS-RESULT.confirm\
    \ or ESROS-ERROR.confirm.\n    4. Duplicate ESRO-INVOKE-PDU:\n      o No action\
    \ (ignore the duplicate ESRO-INVOKE-PDU).\n    5. ESRO-RESULT-PDU or ESRO-ERROR-PDU\
    \ retransmission timer:\n      o Retransmit ESRO-RESULT-PDU or ESRO-ERROR-PDU\
    \ (in a single PDU\n        or in a segmented format) while number of retransmissions\
    \ is\n        less than MAX_RETRANSMISSIONS.\n      o Increment the transmission\
    \ counter.\n    6. Duplicate ESRO-INVOKE-PDU:\n      o Retransmit ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU.\n      o Reset ESRO-RESULT-PDU or ESRO-ERROR-PDU retransmission\
    \ timer.\n      o Re-initialize the number of retransmissions counter to 1.\n\
    \    7. Duplicate ESRO-INVOKE-PDU:\n      o Reset invoke reference number timer.\n\
    \    8. Internal failure:\n      o Send ESRO-FAILURE-PDU.\n      o Release the\
    \ invoke reference number.\n    9. Last time:\n      o Issue ESROS-FAILURE.indication.\n\
    \      o Initialize invoke reference number timer.\n    10. Invoke reference number\
    \ timer:\n      o Release the invoke reference number.\n    11. Duplicate ESRO-ACK-PDU:\n\
    \      o Reset invoke reference number timer.\n    12. Hold-on ACK request:\n\
    \      o Send hold-on ESRO-ACK-PDU (for future use).\n   On receipt of an ESRO-INVOKE-PDU,\
    \ the ESROS provider issues an\n   ESROS-INVOKE.indication to the ESROS performer\
    \ user.  The provider\n   ignores the duplicate ESRO-INVOKE-PDUs.\n   In the case\
    \ of internal failure or no response from performer user,\n   the provider sends\
    \ an ESRO-FAILURE-PDU and releases the invoke\n   reference number.\n   On receipt\
    \ of a Hold-on request from the performer user, or based on\n   other information,\
    \ provider sends a Hold-on ESRO-ACK-PDU (future\n   use).\n   On receipt of either\
    \ ESROS-RESULT.request or ESROS-ERROR.request from\n   the ESROS performer user,\
    \ the ESROS provider initiates the\n   retransmission timer for the ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU and\n   transmits the ESRO-RESULT-PDU or ESRO-ERROR-PDU in\
    \ a single PDU or in\n   a sequence of segment PDUs.  If the ESRO-ACK-PDU associated\
    \ with the\n   Invoke-ID is not received within\n   RESULT_ERROR_PDU_RETRANSMISSION_INTERVAL\
    \ (see 4.6.2), the PDU is\n   retransmitted.\n   When provider is waiting for\
    \ ESRO-ACK-PDU and a duplicate ESRO-\n   INVOKE-PDU arrives, ESRO-RESULT-PDU or\
    \ ESRO-ERROR-PDU is\n   retransmitted (in a single PDU or in a sequence of segment\
    \ PDUs), the\n   retransmission timer is reset and counter for number of\n   retransmissions\
    \ is re-initialized to 1.\n   If after MAX_TRANSMISSIONS (see 4.6.2) no ESRO-ACK-PDU\
    \ is received,\n   the provider issues an ESROS-FAILURE.indication primitive,\
    \ with the\n   Invoke-ID of the failed PDU and the Failure-value as parameters,\
    \ to\n   the performer user.  Then the provider sets the reference number\n  \
    \ timer and releases the reference number after REFERENCE_NUMBER_TIME\n   (see\
    \ 4.6.2).\n   On receipt of ESRO-ACK-PDU associated with the Invoke-ID before\n\
    \   MAX_TRANSMISSIONS (see 4.6.2), the provider issues a ESROS-\n   RESULT.confirm\
    \ or ESROS-ERROR.confirm primitive and sets the\n   reference number timer and\
    \ releases the reference number after\n   REFERENCE_NUMBER_TIME (see 4.6.2).\n\
    \   The duplicate ESRO-ACK-PDU and duplicate ESRO-INVOKE-PDUs are ignored\n  \
    \ while provider waits for the reference number timer to expire.\n"
- title: 4.3.3  2-Way Handshake Functional Unit
  contents:
  - "4.3.3  2-Way Handshake Functional Unit\n   This Functional Unit implements the\
    \ Not-Acknowledged Result model of\n   ESRO Services.  2-Way handshaking is used\
    \ in this unit.\n   The RESULT.confirm and ERROR.confirm primitives on performer\
    \ side are\n   generated based on time-out, i.e.  when no duplicate ESRO-INVOKE-PDU\n\
    \   is received in a specified period of time, provider issues\n   RESULT.confirm\
    \ or ERROR.confirm primitive.\n   The FAILURE.indication on performer side is\
    \ generated as a result of\n   local failure or after time-out of retransmission\
    \ of ESRO-RESULT-PDU\n   or ESRO-ERROR-PDU.\n   The FAILURE.indication on invoker\
    \ side is generated if a local\n   failure happens or a ESRO-FAILURE-PDU is received.\n\
    \   The transmission of INVOKE, RESULT, and ERROR PDUs can be in a single\n  \
    \ PDU (when it fits in one PDU) or a sequence of segmented PDUs.\n   2-Way Handshake\
    \ Connectionless Transmission:  Invoker\n   For each transition number in the\
    \ state diagram above, the\n   corresponding actions are listed below:\n    1.\
    \ INVOKE.request:\n      o Assign Invoke-ID.\n      o Issue ESROS-INVOKE-P.confirm\
    \ primitive.\n      o Assign invoke reference number.\n      o Send ESRO-INVOKE-PDU\
    \ in a single PDU or as a sequence of\n        segment PDUs.\n      o Initialize\
    \ retransmission counter.\n      ______________________________________________________________\n\
    \      |      State              |STA01      |STA02      |STA03     |\n      |\
    \                         |2-Way HS   |Invoke PDU |Invoker   |\n      |      \
    \                   |CL Invoker |Send       |RefNu Wait|\n      |Event       \
    \             |Start      |           |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |U: INVOKE.req.           |(1) STA02  |           |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |T: Invoke PDU Retransmit |           |(2) STA02  |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |T: Last Timer            |           |(3) STA03  |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |P: Result/Error PDU      |           |(4) STA03  |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |P: Failure-PDU           |           |(5) STA03  |          |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |P: Duplicate Result PDU  |           |           |(6) STA03 |\n      |-------------------------+-----------+-----------+----------|\n\
    \      |T: RefNu Timer           |           |           |(7) STA01 |\n      |_________________________|___________|___________|__________|\n\
    \      Table 13:  ESROS State Transition Diagram-Connectionless Transmission,\n\
    \      2-Way HS: Invoker p = Protocol, T = Timer, U = User, I = Internal.\n  \
    \  2. Invoke PDU Retransmit:\n      o Retransmit ESRO-INVOKE-PDU (in a single\
    \ PDU or in a sequence of\n        segment PDUs) while number of retransmissions\
    \ is less than\n        MAX_RETRANSMISSIONS.\n      o Increment the transmission\
    \ counter.  When MAX_RETRANSMISSIONS\n        reached, start LAST_TIMER.\n   \
    \ 3. Last Timer:\n      o Issue ESROS-FAILURE.indication primitive.\n      o Initialize\
    \ reference number timer.\n    4. ESRO-RESULT-PDU or ESRO-ERROR-PDU:\n      o\
    \ Issue ESROS-RESULT.indication or ESROS-ERROR.indication\n        primitive.\n\
    \      o Initialize reference number timer.\n    5. ESRO-FAILURE-PDU:\n      o\
    \ Issue ESROS-FAILURE.indication primitive with User not\n        Responding failure\
    \ cause.\n      o Initialize reference number timer.\n    6. Duplicate ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU:\n      o Reset Invoke reference number timer.\n    7. Invoke\
    \ reference number timer:\n      o Release the invoke reference number.\n   On\
    \ receipt of an ESROS-INVOKE.request, ESROS provider generates an\n   Invoke-\
    \ Reference-Number and an Invoke-ID (see 4.2.3).  The provider\n   issues an ESROS-INVOKE-P.confirm\
    \ primitive and passes the Invoke-ID\n   to the invoker.\n   The ESROS provider\
    \ initiates the timer for the Invoke-ID and\n   transmits the PDU. The PDU is\
    \ transmitted as a single PDU or a\n   sequence of segment PDUs.  If the ESRO-\
    \ RESULT-PDU or ESRO-ERROR-PDU\n   associated with the invoke ID is not received\
    \ within the\n   INVOKE_PDU_RETRANSMISSION_INTERVAL (see 4.6.2) period, the PDU\
    \ is\n   retransmitted.  The retransmission is repeated for a maximum of\n   MAX_RETRANSMISSIONS\
    \ unless an ESRO-RESULT-PDU or ESRO-ERROR-PDU is\n   received.\n   In the case\
    \ that the ESRO-INVOKE-PDU is sent MAX_RETRANSMISSIONS (see\n   4.6.2) times and\
    \ no ESRO-RESULT-PDU or ESRO-ERROR-PDU is received,\n   the ESROS provider sends\
    \ an ESROS-FAILURE.indication primitive, with\n   the Invoke-ID of the failed\
    \ PDU and the Failure-value as parameters,\n   to the invoker.  If ESRO- FAILURE-PDU\
    \ is received, the ESROS provider\n   sends and ESROS-FAILURE.indication primitive,\
    \ with the Invoke-Id of\n   the failed PDU and the Failure- value as parameters\
    \ to the invoker.\n   When an ESRO-RESULT-PDU or ESRO-ERROR-PDU is received, the\
    \ provider\n   issues an ESROS-RESULT.indication or ESROS-ERROR.indication to\
    \ the\n   invoker user, and initializes the Reference-Number timer.  In the\n\
    \   case that duplicate ESRO-RESULT-PDU or ESRO-ERROR-PDU are received,\n   they\
    \ are ignored.  In the case of internal failure, the provider\n   initializes\
    \ the reference number timer.  After REFERENCE_NUMBER_TIME\n   (see 4.6.2), the\
    \ reference number is released.\n   2-Way Handshake Connectionless Transmission:\
    \  Performer\n   ___________________________________________________________________\n\
    \   |      State        |STA01      |STA02     |STA03     |STA04      |\n   |\
    \                   |2-Way HS CL|Invoke PDU|Result PDU|Performer  |\n   |Event\
    \              |Performer  |Received  |Retransmit|RefNu Wait |\n   |         \
    \          |Start      |          |          |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |P: Invoke-PDU      |(1) STA02  |          |          |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |P: Invoke-PDU      |           |(2) STA02 |(5) STA03 |(7) STA04  |\n   |\
    \ Duplicate         |           |          |          |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |U: RESULT.req.     |           |(3) STA03 |          |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |I: Failure         |           |(4) STA01 |          |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |T: Inactivity Timer|           |          |(6) STA04 |           |\n   |-------------------+-----------+----------+----------+-----------|\n\
    \   |T: RefNu Timer     |           |          |          |(8) STA01  |\n   ___________________________________________________________________\n\
    \   Table 14:  ESROS State Transition Diagram-Connectionless Transmission,\n \
    \  2-Way HS: Performer.  P = Protocol, T = Timer, U = User, I = Internal.\n  \
    \ For each transition number in the state diagram above, the\n   corresponding\
    \ actions are listed below:\n    1. ESRO-INVOKE-PDU (received in a single PDU\
    \ or reassembled from a\n       sequence of segment PDUs):\n      o Issue ESROS-INVOKE.indication\
    \ primitive.\n    2. Duplicate ESRO-INVOKE-PDU:\n      o No action (ignore the\
    \ duplicate ESRO-INVOKE-PDU).\n    3. EROS-RESULT.request or ESROS-ERROR.request:\n\
    \      o Add invoke reference number to the active list.\n      o Transmit ESRO-RESULT-PDU\
    \ or ESRO-ERROR-PDU (as a single PDU or\n        as a sequence of segment PDUs.)\n\
    \      o Set Inactivity timer.\n    4. Internal failure:\n      o Send ESRO-FAILURE-PDU.\n\
    \      o Release the invoke reference number.\n    5. Duplicate ESRO-INVOKE-PDU:\n\
    \      o Retransmit ESRO-RESULT-PDU or ESRO-ERROR-PDU (as a single PDU\n     \
    \   or as a sequence of segment PDUs.)\n      o Set Inactivity timer.\n    6.\
    \ Inactivity Timer:\n      o Issue ESROS-RESULT.confirm.\n      o Initialize invoke\
    \ reference number timer.\n    7. Dplicate ESRO-INVOKE-PDU:\n      o Reset invoke\
    \ reference number timer.\n    8. Invoke reference number timer:\n      o Release\
    \ the invoke reference number.\n   On receipt of an ESRO-INVOKE-PDU (as a single\
    \ PDU or reassembled from\n   a sequence of segment PDUs), the ESROS provider\
    \ issues an ESROS-\n   INVOKE.indication to the ESROS performer user.  The provider\
    \ ignores\n   the duplicate ESRO-INVOKE-PDUs.\n   In the case of internal failure\
    \ or no response from performer user,\n   the provider sends an ESRO-FAILURE-PDU\
    \ and releases the invoke\n   reference number.\n   On receipt of either ESROS-RESULT.request\
    \ or ESROS-ERROR.request from\n   the ESROS performer user, the ESROS provider\
    \ initiates the inactivity\n   timer for the ESRO- RESULT-PDU or ESRO-ERROR-PDU\
    \ and transmits the\n   ESRO-RESULT-PDU or ESRO-ERROR-PDU (in a single PDU or\
    \ as a sequence\n   of segment PDUs.)  If a duplicate ESRO-INVOKE-PDU associated\
    \ with the\n   Invoke-ID is received within INACTIVITY_TIME interval (see 4.6.2),\n\
    \   the PDU is retransmitted.\n   If no duplicate ESRO-INVOKE-PDU is received\
    \ within the\n   INACTIVITY_TIME interval (see 4.6.2), provider issues a ESROS-\n\
    \   RESULT.confirm or ESROS-ERROR.confirm primitive and sets the\n   reference\
    \ number timer and releases the reference number after\n   REFERENCE_NUMBER_TIME\
    \ (see 4.6.2).\n   The duplicate ESRO-INVOKE-PDUs are ignored while provider waits\
    \ for\n   the reference number timer to expire.\n"
- title: 4.3.4  Segmentation and Reassembly
  contents:
  - "4.3.4  Segmentation and Reassembly\n   Small ESRO Service Data Units (ESRO-SDUs)\
    \ can benefit from the\n   efficiencies of connectionless feature of ESROS (See\
    \ Section 4.3.1).\n   When an ESRO-SDU is too large to fit in a single connectionless\
    \ PDU\n   it is segmented and reassembled.  There might be similar mechanisms\n\
    \   in the upper layers with different levels of efficiency.  When in\n   addition\
    \ to the ESROS segmentation/reassembly, the upper layers are\n   capable of segmentation/reassembly\
    \ services, then the ESROS user can\n   decide whether to use ESROS segmenting/reassembly\
    \ mechanism depending\n   on the factors such as reliability of the underlying\
    \ network.\n   In the case of segmentation/reassembly in ESROS layer, transmission\n\
    \   of operation segments is not acknowledged.  This results in an\n   efficient\
    \ transmission over a reliable underlying network.  However\n   failure of one\
    \ segment results in retransmission of all segments.\n   When acknowledged segments\
    \ are desired, the ESROS user should\n   implement it using the acknowledged result\
    \ service of ESROS.\n   The ESROS segmentation/reassembly is accommodated by:\n\
    \      o Use of two additional PDU codes for segmented INVOKE PDU.\n      o Use\
    \ of one byte segmentation information, which contains\n        First/Other flag\
    \ and segment number.\n      o Use of unused bits of RESULT and ERROR PDUs to\
    \ identify a\n        segmented RESULT or ERROR PDU.\n   Segmentation and Assembly\
    \ applies to INVOKE, RESULT, and ERROR SDUs.\n   The sender of the message is\
    \ responsible for segmenting the ESRO-SDU\n   into segments that fit in CL PDUs.\
    \  The segmented ESRO-SDU is sent in\n   a sequence of segments each carrying\
    \ a segment of the SDU. The\n   Invoke-Reference-Number is a unique identifier\
    \ that is used as the\n   segment identifier which relates all segments of an\
    \ ESRO-SDU. In\n   addition to this identifier, the first segment specifies the\
    \ total\n   number of segments (number-of-segments).  Other segments have a\n\
    \   segment sequence number (segment- number).  The receiver is\n   responsible\
    \ for sequencing (based on segment-number) and reassembling\n   the entire ESRO-SDU.\n\
    \   Segmenting/Reassembling over the Connectionless ESRO Service\n   The sender\
    \ maps the original ESRO-SDU into an ordered sequence of\n   segments.  Several\
    \ ESRO-SDU segment sequences can exist over the same\n   ESROS association, distinguished\
    \ by their Invoke-Reference-Number\n   (used as segment identifier.)\n   All segments\
    \ in the sequence have the same Invoke-Reference-Number\n   assigned by sender.\n\
    \   The first segment specifies the total number of segments.  All\n   segments\
    \ in the sequence except the first one shall be sequentially\n   numbered, starting\
    \ at 1 (first segment has an implicit segment number\n   of 0).\n   Each segment\
    \ is transmitted in one UDP PDU and is sent by sender.\n   All segments of a segmented\
    \ ESRO-SDU are identified by the same\n   Invoke-Reference-Number.  For a given\
    \ operation, the receiver should\n   not impose any restrictions on the order\
    \ of arrival of segments.\n   There is no requirement that any segment content\
    \ be of\n   CLRO_SMALL_PDU_MAX_SIZE for connectionless transmission; however,\
    \ no\n   more than CLRO_MAX_PDU_SEGMENTS segments can be derived from a single\n\
    \   ESRO-SDU.\n   The receiver reassembles a sequence of segments into a single\
    \ ESRO-\n   SDU. An ESRO-SDU shall not be further processed unless all segments\n\
    \   of the ESRO-SDU are received.  Failure to receive the SDU shall be\n   determined\
    \ by the following event:\n      o Expiration of Reassembly Timer (see Section\
    \ 4.3.4).\n   In the event of the above mentioned failure, the receiver shall\n\
    \   discard a partially assembled sequence.\n   The reassembly is done as described\
    \ below:\n      o In the case of segmented Invoke ESRO-SDU, the encoding type\
    \ and\n        operation-value fields are carried in the first segment used for\n\
    \        the whole operation.  These three fields are ignored in the\n       \
    \ segments other than the first one.\n      o In the case of segmented Result\
    \ ESRO-SDU, the encoding type of\n        the first segment is used for all segments.\
    \  The encoding type\n        field of segments other than the first one are ignored.\n\
    \      o In the case of segmented Error ESRO-SDU, the encoding type and\n    \
    \    Error-value field of the first segment are used for all\n        segments.\
    \  These two fields are ignored in segments other than\n        the first one.\n\
    \   Sender sends all segments of a segmented ESRO-SDU one after the\n   other.\
    \  There is no mechanism for retransmission of a single segment.\n   In the case\
    \ that the sender receives a failure indication for a\n   segment, it means that\
    \ receiver has failed in reassembly process, and\n   the sender retransmits the\
    \ whole ESRO-SDU (all segments).\n   Reassembly Timer\n   The Reassembly Timer\
    \ is a local timer maintained by the receiver of\n   the segments that assists\
    \ in performing the reassembly function.\n   This timer determines how long a\
    \ receiver waits to receive all\n   segments of a segment sequence.\n   The Reassembly\
    \ Timer shall be started on receipt of a segment with\n   different sequence identifier\
    \ (Invoke-Reference-Number).  On receipt\n   of all segments composing a sequence,\
    \ the corresponding reassembly\n   timer shall be stopped.\n   The value of the\
    \ Reassembly Timer is defined based on the network\n   characteristics and the\
    \ number of segments.  This requires that the\n   transmission of all segments\
    \ of a single ESRO-SDU must be completed\n   within this time limit.\n"
- title: 4.4  Structure and Encoding of ESROS PDUs
  contents:
  - "4.4  Structure and Encoding of ESROS PDUs\n   Five PDU types are used in the\
    \ ESRO protocol which are described in\n   the following sections.  PDU type coding\
    \ is presented in Table 15.\n   The octets are numbered in increasing order, starting\
    \ from 1.  The\n   bits of an octet are numbered from 1 to 8, where 1 is the low-order\n\
    \   bit.\n"
- title: 4.4.1  ESRO-INVOKE-PDU Format
  contents:
  - "4.4.1  ESRO-INVOKE-PDU Format\n   Bit string format of the ESRO-INVOKE-PDU is\
    \ represented in Table 16\n   and Table 17.\n           _______________________________________\n\
    \           | PDU Name              |PDU Type Code |\n           _______________________________________\n\
    \           | ESRO-INVOKE           |0             |\n           | ESRO-RESULT\
    \           |1             |\n           | ESRO-ERROR            |2          \
    \   |\n           | ESRO-ACK              |3             |\n           | ESRO-FAILURE\
    \          |4             |\n           | ESRO-SEGMENTED-INVOKE |5           \
    \  |\n           _______________________________________\n                   Table\
    \ 15:  PDU Coding\n       __________________________________________________________\n\
    \       |Bit       |8 |            7           |6 |5 |4 |3 |2 |1 |\n       |----------+--+------------------------+--+--+--+--+--+--|\n\
    \       |Octet 1   | Performer SAP                   |0 |0 |0 |0 |\n       |----------+--+------------------------+--+--+--+--+--+--|\n\
    \       |Octet 2   | Invoke Reference Number                     |\n       |----------+--+------------------------+--+--+--+--+--+--|\n\
    \       |Octet 3   |Parameter Encoding Type    |Operation Value  |\n       |----------+--+------------------------+--+--+--+--+--+--|\n\
    \       |Octet 4   |                                             |\n       | ...\
    \      | Operation Information                       |\n       |Octet N   |  \
    \                                           |\n       |__________|_____________________________________________|\n\
    \          Table 16:  ESRO-INVOKE-PDU format. ESRO-INVOKE-PDU Type Code =\n  \
    \        0.  Note:  Invoker SAP = Performer SAP - 1.\n                       \
    \  _______________________\n                         | Value |   Meaning    |\n\
    \                         |_______|______________|\n                         |\
    \ 0     |   BER [5]    |\n                         |_______|______________|\n\
    \                         | 1     |   PER [4]    |\n                         |_______|______________|\n\
    \                         | 2     |   XDR [8]    |\n                         |_______|______________|\n\
    \                         | 3     |  Reserved    |\n                         |_______|______________|\n\
    \         Table 17:  Parameter Encoding Type for ESRO-INVOKE-PDU\n          ---------------------------------------------------------\n\
    \         |Bit     |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |\n       \
    \  |--------|-----------|-----|-----|-----|-----|-----|-----|\n         |    \
    \    | Parameter |     |     |     |     |     |     |\n         |        | Encoding\
    \  |     |     |     |     |     |     |\n         |Octet 1 | Type      |  0 \
    \ |  0  |  0  |  0  | 0   |  1  |\n         |        |           |     |     |\
    \     |     |     |     |\n         |        |           |     |     |     | \
    \    |     |     |\n         |        |           |     |     |     |     |  \
    \   |     |\n         |--------|-----------------------------------------------|\n\
    \         |Octet 2 |           Invoke Reference Number             |\n       \
    \  |--------|-----------------------------------------------|\n         |Octet\
    \ 3 |                                               |\n         |...     |   \
    \          Result-parameter                  |\n         |Octet N |          \
    \                                     |\n          ---------------------------------------------------------\n\
    \         ESRO-RESULT-PDU Type Code = 1.\n                         Table 18: \
    \ ESRO-RESULT-PDU format\n                         _______________________\n \
    \                        | Value |   Meaning    |\n                         |_______|______________|\n\
    \                         | 0     |    Basic     |\n                         |_______|______________|\n\
    \                         | 1     |   Packed     |\n                         |_______|______________|\n\
    \                         | 2     |     XDR      |\n                         |_______|______________|\n\
    \                         | 3     |  Reserved    |\n                         |_______|______________|\n\
    \          Table 19:  Parameter Encoding Type for ESRO-RESULT-PDU\n"
- title: 4.4.2  ESRO-RESULT-PDU Format
  contents:
  - "4.4.2  ESRO-RESULT-PDU Format\n   Bit string format of the ESRO-RESULT-PDU is\
    \ represented in Table 18\n   and Table 19.\n"
- title: 4.4.3  ESRO-ERROR-PDU Format
  contents:
  - "4.4.3  ESRO-ERROR-PDU Format\n   Bit string format of the ESRO-ERROR-PDU is represented\
    \ in Table 20\n   and Table 21.\n          ---------------------------------------------------------\n\
    \         |Bit     |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |\n       \
    \  |--------|-----------|-----|-----|-----|-----|-----|-----|\n         |    \
    \    | Parameter |     |     |     |     |     |     |\n         |        | Encoding\
    \  |     |     |     |     |     |     |\n         |Octet 1 | Type      |  0 \
    \ |  0  |  0  |  0  | 1   |  0  |\n         |        |           |     |     |\
    \     |     |     |     |\n         |        |           |     |     |     | \
    \    |     |     |\n         |        |           |     |     |     |     |  \
    \   |     |\n         |--------|-----------------------------------------------|\n\
    \         |Octet 2 |           Invoke Reference Number             |\n       \
    \  |--------|-----------------------------------------------|\n         |Octet\
    \ 3 |               Error Value                     |\n         |--------|-----------------------------------------------|\n\
    \         |Octet 4 |                                               |\n       \
    \  |...     |             Error parameter                   |\n         |Octet\
    \ N |                                               |\n          ---------------------------------------------------------\n\
    \         ESRO-ERROR-PDU Type Code = 2.\n                          Table 20: \
    \ ESRO-ERROR-PDU format\n                         _______________________\n  \
    \                       | Value |   Meaning    |\n                         |_______|______________|\n\
    \                         | 0     |    Basic     |\n                         |_______|______________|\n\
    \                         | 1     |   Packed     |\n                         |_______|______________|\n\
    \                         | 2     |     XDR      |\n                         |_______|______________|\n\
    \                         | 3     |  Reserved    |\n                         |_______|______________|\n\
    \               Table 21:  Parameter Encoding Type for ESRO-ERROR-PDU\n      \
    \       ---------------------------------------------------------\n          \
    \  |Bit     |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |\n            |--------|-----------------------|-----|-----|-----|-----|\n\
    \            |        | ESRO-ACK-PDU Type     |     |     |     |     |\n    \
    \        |Octet 1 |                       |  0  |  0  | 1   |  1  |\n        \
    \    |--------|-----------------------------------------------|\n            |Octet\
    \ 2 |           Invoke Reference Number             |\n             ---------------------------------------------------------\n\
    \             ESRO-ACK-PDU Type Code = 3.\n                            Table 22:\
    \  Fields of ESRO-ACK-PDU\n               _____________________________________________\n\
    \               | ESRO-ACK-PDU Type |        Meaning         |\n             \
    \  |___________________|________________________|\n               | 0        \
    \         |Complete 3-way handshake|\n               |___________________|________________________|\n\
    \               | 1                 |        Hold on         |\n             \
    \  |___________________|________________________|\n                  Table 23:\
    \  Encoding of ESRO-ACK-PDU Type\n"
- title: 4.4.4  ESRO-ACK-PDU Format
  contents:
  - "4.4.4  ESRO-ACK-PDU Format\n   Bit string format of the ESRO-ACK-PDU is represented\
    \ in Table 22 and\n   Table 23.\n"
- title: 4.4.5  ESRO-FAILURE-PDU Format
  contents:
  - "4.4.5  ESRO-FAILURE-PDU Format\n   Bit string format of the ESROS-FAILURE-PDU\
    \ is represented in Table 24\n   and Table 25.\n   The first nibble of the first\
    \ octet of ESRO-FAILURE-PDU shall be set\n   to zero.\n"
- title: 4.4.6  ESRO-INVOKE-SEGMENTED-PDU Format
  contents:
  - "4.4.6  ESRO-INVOKE-SEGMENTED-PDU Format\n   Bit string format of the ESRO-INVOKE-SEGMENTED-PDU\
    \ is represented in\n   Table 25 and Table 26.\n   Note:  Invoker SAP = Performer\
    \ SAP - 1.\n      ---------------------------------------------------------\n\
    \     |Bit     |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |\n     |--------|-----------------------|-----|-----|-----|-----|\n\
    \     |Octet 1 |         Not used      |  0  |  1  |  0  |  0  |\n     |--------|-----------------------------------------------|\n\
    \     |Octet 2 |           Invoke Reference Number             |\n     |--------|-----------------------------------------------|\n\
    \     |Octet 3 |                Failure Value                  |\n     ----------------------------------------------------------\n\
    \     ESRO-FAILURE-PDU Type Code = 4.\n                     Table 24:  ESRO-FAILURE-PDU\
    \ format\n               ________________________________________\n          \
    \     | Failure Value |       Meaning         |\n               |_______________|_______________________|\n\
    \               | 0             |Transmission failure   |\n               |_______________|_______________________|\n\
    \               | 1             |Out of local resources |\n               |_______________|_______________________|\n\
    \               | 2             | User not responding   |\n               |_______________|_______________________|\n\
    \               | 3             |Out of remote resources|\n               |_______________|_______________________|\n\
    \                 Table 25:  Encoding of failure value\n      -----------------------------------------------------------------\n\
    \     |Bit     |  8   |  7   |  6   |  5   |  4   |  3   |  2   |  1   |\n   \
    \  |--------|---------------------------|------|------|------|------|\n     |Octet\
    \ 1 | Performer Service         |  0   |  1   |  0   |  1   |\n     |        |\
    \ Access Point Selector     |      |      |      |      |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 2 |            Invoke Reference Number                    |\n   \
    \  |--------|-------------------------------------------------------|\n     |\
    \        | Parameter   |                                         |\n     |   \
    \     | Encoding    |                                         |\n     |Octet 3\
    \ | Type        |        Operation Value                  |\n     |        | \
    \            |                                         |\n     |        |    \
    \         |                                         |\n     |        |       \
    \      |                                         |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 4 |First/|                                                |\n   \
    \  |        |Other |                  Segment Number                |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 5 |                                                       |\n   \
    \  |...     |             Operation Information                     |\n     |Octet\
    \ N |                                                       |\n      ----------------------------------------------------------------|\n\
    \      ESRO-INVOKE-PDU Type Code = 5.\n                Table 26:  ESRO-INVOKE-SEGMENTED-PDU\
    \ format\n                          _______________________\n                \
    \          | Value |   Meaning    |\n                          |_______|______________|\n\
    \                          | 0     |    Basic     |\n                        \
    \  |_______|______________|\n                          | 1     |   Packed    \
    \ |\n                          |_______|______________|\n                    \
    \      | 2     |     XDR      |\n                          |_______|______________|\n\
    \                          | 3     |  Reserved    |\n                        \
    \  |_______|______________|\n     Table 27:  Parameter Encoding Type for ESRO-INVOKE-SEGMENTED-PDU\n\
    \      o For the first segment, the first/other bit is set to one, and\n     \
    \   the segment number field contains the total number of segments.\n      o For\
    \ segments other than the first one, the first/other bit is\n        set to zero,\
    \ and the segment number field has the sequence\n        number of the segment.\n\
    \   The values of the three fields Performer-SAP, Parameter-Encoding-\n   Type,\
    \ and Operation-Value of the first segment are used by performer\n   and these\
    \ fields are ignored in the segments other than the first\n   one.\n"
- title: 4.4.7  ESRO-RESULT-SEGMENTED-PDU Format
  contents:
  - "4.4.7  ESRO-RESULT-SEGMENTED-PDU Format\n   Bit string format of the ESRO-RESULT-SEGMENTED-PDU\
    \ is represented in\n   Table 28 and Table 29.\n      o For the first segment,\
    \ the first/other bit is set to one, and\n      the\n        segment number field\
    \ contains the total number of segments.\n      o For segments other than the\
    \ first one, the first/other bit is\n      set\n        to zero, and the segment\
    \ number field has the sequence number of\n        the segment.\n   The values\
    \ of the Parameter-Encoding-Type field of the first segment\n   is used by invoker\
    \ and this field is ignored in the segments other\n   than the first one.\n  \
    \    -----------------------------------------------------------------\n     |Bit\
    \     |  8   |  7   |  6   |  5   |  4   |  3   |  2   |  1   |\n     |--------|-------------|------|------|------|------|------|------|\n\
    \     |        | Parameter   |      |      |      |      |      |      |\n   \
    \  |        | Encoding    |      |      |      |      |      |      |\n     |Octet\
    \ 1 | Type        |  0   |  1   |  0   |  0   |  0   |  1   |\n     |        |\
    \             |      |      |      |      |      |      |\n     |        |   \
    \          |      |      |      |      |      |      |\n     |        |      \
    \       |      |      |      |      |      |      |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 2 |            Invoke Reference Number                    |\n   \
    \  |--------|-------------------------------------------------------|\n     |Octet\
    \ 4 |First/|                                                |\n     |        |Other\
    \ |                  Segment Number                |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 5 |                                                       |\n   \
    \  |...     |                 Result Parameter                      |\n     |Octet\
    \ N |                                                       |\n      ----------------------------------------------------------------|\n\
    \     ESRO-RESULT-SEGMENTED-PDU Type Code = 1.\n                Table 28:  ESRO-RESULT-SEGMENTED-PDU\
    \ format\n                          _______________________\n                \
    \          | Value |   Meaning    |\n                          |_______|______________|\n\
    \                          | 0     |    Basic     |\n                        \
    \  |_______|______________|\n                          | 1     |   Packed    \
    \ |\n                          |_______|______________|\n                    \
    \      | 2     |     XDR      |\n                          |_______|______________|\n\
    \                          | 3     |  Reserved    |\n                        \
    \  |_______|______________|\n     Table 29:  Parameter Encoding Type for ESRO-RESULT-SEGMENTED-PDU\n\
    \      -----------------------------------------------------------------\n   \
    \  |Bit     |  8   |  7   |  6   |  5   |  4   |  3   |  2   |  1   |\n     |--------|-------------|------|------|------|------|------|------|\n\
    \     |        | Parameter   |      |      |      |      |      |      |\n   \
    \  |        | Encoding    |      |      |      |      |      |      |\n     |Octet\
    \ 1 | Type        |  0   |  1   |  0   |  0   |  1   |  0   |\n     |        |\
    \             |      |      |      |      |      |      |\n     |        |   \
    \          |      |      |      |      |      |      |\n     |        |      \
    \       |      |      |      |      |      |      |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 2 |            Invoke Reference Number                    |\n   \
    \  |--------|-------------------------------------------------------|\n     |Octet\
    \ 3 |First/|                                                |\n     |        |Other\
    \ |                  Segment Number                |\n     |--------|-------------------------------------------------------|\n\
    \     |Octet 4 |                    Error Value                        |\n   \
    \  |--------|-------------------------------------------------------|\n     |Octet\
    \ 5 |                                                       |\n     |...     |\
    \                 Error Parameter                       |\n     |Octet N |   \
    \                                                    |\n      ----------------------------------------------------------------|\n\
    \     ESRO-ERROR-SEGMENTED-PDU Type Code = 2.\n                    Table 30: \
    \ ESRO-ERROR-SEGMENTED-PDU\n"
- title: 4.4.8  ESRO-ERROR-SEGMENTED-PDU Format
  contents:
  - "4.4.8  ESRO-ERROR-SEGMENTED-PDU Format\n   Bit string format of the ESRO-ERROR-PDU\
    \ is represented in Table 30\n   and Table 31.\n      o For the first segment,\
    \ the first/other bit is set to one, and\n        the segment number field contains\
    \ the total number of segments.\n      o For segments other than the first one,\
    \ the first/other bit is\n        set to zero, and the segment number field has\
    \ the sequence\n        number of the segment.\n   The values of the Parameter-Encoding-Type\
    \ field of the first segment\n   is used by invoker and this field is ignored\
    \ in the segments other\n   than the first one.\n"
- title: 4.5  Concatenation and Separation
  contents:
  - "4.5  Concatenation and Separation\n   The procedure for concatenation and separation\
    \ conveys multiple\n   ESRO-PDUs in one TSDU. This is accomplished by ESRO-CONCATENATED-PDU.\n\
    \                          _______________________\n                         \
    \ | Value |   Meaning    |\n                          |_______|______________|\n\
    \                          | 0     |    Basic     |\n                        \
    \  |_______|______________|\n                          | 1     |   Packed    \
    \ |\n                          |_______|______________|\n                    \
    \      | 2     |     XDR      |\n                          |_______|______________|\n\
    \                          | 3     |  Reserved    |\n                        \
    \  |_______|______________|\n      Table 31:  Parameter Encoding Type for ESRO-SEGMENTED-ERROR-PDU\n\
    \   An ESRO-CONCATENATED-PDU can contain one or more of the following\n   PDUs:\
    \  INVOKE, RESULT, ERROR, FAILURE, and ACK.\n   The ESRO-PDUs within a concatenated\
    \ set may be distinguished by means\n   of the length indicator.  A one byte length\
    \ indicator comes before\n   each ESRO-PDU.\n   The number of ESRO-PDUs in an\
    \ ESRO-CONCATENATED-PDU is bounded by the\n   maximum length of TSDU.\n"
- title: 4.5.1  Procedures
  contents:
  - "4.5.1  Procedures\n   Concatenation\n   The ESROS provider concatenates PDUs\
    \ as follows:\n      o PDU type code 8 is used.\n      o The length indicator\
    \ which is the total length of first ESRO-PDU\n        (header and data) in octets\
    \ is placed after PDU type code in\n        length indicator field of ESRO- CONCATENATED-PDU\
    \ (see Section\n        4.5.2).\n      o The first PDU (header and data) is placed\
    \ after the length\n        indicator field and in the ESRO-PDU field of ESRO-CONCATENATED-\n\
    \        PDU (see Section 4.5.2).\n      o For any additional ESRO-PDU, the length\
    \ indicator and PDUs are\n        concatenated.\n   Separation\n   When the ESRO\
    \ service provider receives a PDU with PDU type code 8,\n   it separates the concatenated\
    \ PDUs as described below:\n      o Length indicator field coming after type code\
    \ field (see\n        Section 4.5.2) specifies the total length of the first PDU\
    \ in\n        octets.\n      o The first PDU is in the ESRO-PDU field after the\
    \ length\n      indicator\n        field (see Section 4.5.2).\n      o Any additional\
    \ PDU has its length indicator field specifying the\n        total length of PDU,\
    \ followed by PDU itself (see Section 4.5.2).\n      o PDUs are separated until\
    \ the end of the ESRO-CONCATENATED-PDU is\n        reached.\n"
- title: 4.5.2  ESRO-CONCATENATED-PDU format
  contents:
  - "4.5.2  ESRO-CONCATENATED-PDU format\n   Bit string format of the ESRO-CONCATENATED-PDU\
    \ containing multiple\n   concatenated ESRO-PDUs is represented in Table  32.\n\
    \   Length Indicator field\n   This field is contained in one octet and comes\
    \ before each ESROS-PDU\n   in the concatenated PDU. The length indicated is total\
    \ length of the\n   ESRO-PDU (including header and data) coming after it in octets.\n\
    \   ESRO-PDU field\n   This field contains an ESRO-INVOKE-PDU, ESRO-RESULT-PDU,\
    \ ESRO-ERROR-\n   PDU, ESRO-FAILURE-PDU, or ESRO-ACK-PDU.\n   The length of this\
    \ field is specified by the length indicator field\n   coming before it.\n"
- title: 4.6  ES Remote Operations Protocol Parameters
  contents:
  - '4.6  ES Remote Operations Protocol Parameters

    '
- title: 4.6.1  PDU size
  contents:
  - "4.6.1  PDU size\n      o CLRO_SMALL_PDU_MAX_SIZE:\n         ________________________________________________________________\n\
    \        |Bit     |  8   |  7   |  6   |  5   |  4   |  3   |  2   |  1   |\n\
    \        |--------|---------------------------|------|------|------|------|\n\
    \        |Octet 1 |         Not used          |  1   |  0   |  0   |  0   |\n\
    \        |--------|-------------------------------------------------------|\n\
    \        |Octet 2 |                  Length Indicator                     |\n\
    \        |--------|-------------------------------------------------------|\n\
    \        |Octet 3 |                                                       |\n\
    \        |...     |                     ESRO-PDU                          |\n\
    \        |Octet N |                                                       |\n\
    \        |--------|-------------------------------------------------------|\n\
    \        |Octet   |                                                       |\n\
    \        | N+1    |                  Length Indicator                     |\n\
    \        |--------|-------------------------------------------------------|\n\
    \        |Octet   |                                                       |\n\
    \        | N+2    |                     ESRO-PDU                          |\n\
    \        | ...    |                                                       |\n\
    \        |--------|-------------------------------------------------------|\n\
    \        | ...    |                        ...                            |\n\
    \        |________|_______________________________________________________|\n\
    \        ESRO-CONCATENATED-PDU Type Code = 8.\n                     Table 32:\
    \  ESRO-CONCATENATED-PDU format\n        The value of this parameter should be\
    \ chosen based on the\n        specifics of the subnetwork in use.  For example,\
    \ in CDPD the\n        maximum size of SN-Userdata size can be up to 2048 bytes\
    \ (see\n        part 404-2.b of CDPD Specification V1.1).  Based on this value\n\
    \        and IP and UDP protocol information fields, the value of\n        CLRO_SMALL_PDU_MAX_SIZE\
    \ may be determined for CDPD. Again based\n        on the specifics of the subnetwork,\
    \ the optimum value of\n        CLRO_SMALL_PDU_MAX_SIZE may best be determined\
    \ based on field\n        experience and may be smaller than the maximum size\
    \ that the\n        subnetwork supports.\n      o CLRO_SEGMENTED_PDU_MAX_SIZE\n\
    \        The value of this parameter should be chosen based on the\n        specifics\
    \ of the subnetwork in use.  The optimum value of\n        CLRO_SEGMENTED_PDU_MAX_SIZE\
    \ may best be determined based on\n        field experience.\n      o CLRO_MAX_PDU_SEGMENTS\n\
    \        The value of this parameter should be chosen based on the\n        specifics\
    \ of the subnetwork in use.  The optimum value of\n        CLRO_MAX_PDU_SEGMENTS\
    \ may best be determined based on field\n        experience.  In any case, this\
    \ value should be smaller than 127.\n"
- title: 4.6.2  Timers
  contents:
  - "4.6.2  Timers\n      o INVOKE_PDU_RETRANSMISSION_INTERVAL:\n        The INVOKE_PDU\
    \ retransmission interval should be specified and\n        optimized based on\
    \ the characteristics of the network in use.\n      o RESULT_ERROR_PDU_RETRANSMISSION_INTERVAL:\n\
    \        The RESULT and ERROR-PDU retransmission interval should be\n        specified\
    \ and optimized based on the characteristics of the\n        network in use.\n\
    \      o MAX_RETRANSMISSIONS:\n        The maximum number of retransmissions should\
    \ be specified and\n        optimized based on the characteristics of the network\
    \ in use.\n      o INACTIVITY_TIME:\n        The minimum waiting time during which\
    \ no duplicate PDU is\n        received should be specified and optimized based\
    \ on the\n        characteristics of the network in use.\n      o REFERENCE_NUMBER_TIME:\
    \ The reference number lifetime timer\n        should be specified and optimized\
    \ based on the characteristics\n        of the network in use.\n"
- title: 4.6.3  Use of lower layers
  contents:
  - "4.6.3  Use of lower layers\n   ESRO protocol uses UDP port number 259.\n"
- title: 5  ACKNOWLEDGMENTS
  contents:
  - "5  ACKNOWLEDGMENTS\n   Development of this specification was funded by AT&T Wireless\n\
    \   Services (AWS). This protocol specification has been derived from\n   AT&T\
    \ Wireless Services' document titled:  \"Limited Size Remote\n   Operation Services\
    \ (LSROS)\", Revision 0.8, dated April 20, 1995.\n   This specification is technically\
    \ consistent with CDPD Forum's\n   Implementor's Guidelines Part 1028, Release\
    \ 1.03, June 21, 1996.\n"
- title: 6  SECURITY CONSIDERATIONS
  contents:
  - "6  SECURITY CONSIDERATIONS\n   ESROS has no authentication mechanism.  Authentication\
    \ is the\n   responsibility of the performer (which is outside of the scope of\n\
    \   ESROS) and the performer is not expected to honor the invoker when it\n  \
    \ is not authenticated.\n"
- title: 7  AUTHORS' ADDRESSES
  contents:
  - "7  AUTHORS' ADDRESSES\n   Mohsen Banan\n   Neda Communications, Inc.\n   17005\
    \ SE 31st Place\n   Bellevue, WA 98008\n   EMail: mohsen@neda.com\n   Mark S.\
    \ Taylor\n   Director of Strategic Engineering\n   AT&T Wireless Services\n  \
    \ Wireless Data Division\n   10230 NE Points Drive\n   Kirkland, WA 98033-7869\
    \ USA\n   EMail: mark.taylor@airdata.com\n   Jia-bing Cheng\n   AT&T Wireless\
    \ Services\n   Wireless Data Division\n   10230 NE Points Drive\n   Kirkland,\
    \ WA 98033-7869 USA\n   EMail: jcheng@airdata.com\n"
- title: References
  contents:
  - "References\n   [1] Remote Operations:  Model, Notation and Service Definition,\
    \ March\n        1988. Recommendation X.219.\n   [2] Remote Operations:  Protocol\
    \ Specification, March 1988.\n        Recommendation X.229.\n   [3] Specification\
    \ of Abstract Syntax Notation One, 1988.\n        Recommendation X.208.\n   [4]\
    \ Information Processing --- Open Systems\n        Interconnection --- Specification\
    \ of Packed Encoding Rules for\n        Abstract Syntax Notation One (ASN.1).\
    \ International Standard\n        8825-2.\n   [5] Information Processing --- Open\
    \ Systems\n        Interconnection --- Specification of Basic Encoding Rules for\n\
    \        Abstract Syntax Notation One (ASN.1), 1987. International\n        Standard\
    \ 8825.\n   [6] Srinivasan, R., \"Binding protocols for onc rpc version 2\".\n\
    \        RFC 1833, Sun Microsystems Inc, August 1995.\n   [7] Srinivasan, R.,\
    \ \"Rpc:  Remote procedure call protocol\n        specification version 2\". RFC\
    \ 1831, Sun Microsystems Inc, August\n        1995.\n   [8] Srinivasan, R., \"\
    Xdr:  External data representation standard\".\n        RFC 1832, Sun Microsystems\
    \ Inc, August 1995.\n"
