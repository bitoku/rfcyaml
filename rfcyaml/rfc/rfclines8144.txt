Abstract This document defines how the Prefer header field (RFC 7240) can be used by a Web Distributed Authoring and Versioning (WebDAV) client to request that certain behaviors be employed by a server while constructing a response to a request.
Furthermore, it defines the new "depth noroot" preference.
This document updates RFC 7240.
Introduction [RFC7240] defines the Prefer header field and the "return minimal" preference, which indicate that a client wishes for the server to return a minimal response to a successful request but states that what constitutes an appropriate minimal response is left solely to the discretion of the server.
Section 2 of this specification defines precisely what is expected of a server when constructing minimal responses to successful WebDAV [RFC4918] requests.
[RFC7240] also defines the "return representation" preference, which indicates that a client wishes for the server to include an entity representing the current state of the resource in the response to a successful request.
Section 3 of this specification makes recommendations on when this preference should be used by clients and extends its applicability to 412 (Precondition Failed) [RFC7232] responses.
Finally, Section 4 of this specification defines the "depth noroot" preference that can be used with HTTP methods that support the Depth header field.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This document references XML element types in the "DAV:" [RFC4918], "urn:ietf:params:xml:ns:caldav" [RFC4791], and "urn:ietf:
params:xml:ns:carddav" [RFC6352] namespaces outside of the context of an XML fragment.
Reducing WebDAV Response Verbosity with "return minimal
" Some payload bodies in responses to WebDAV requests, such as 207 (Multi Status)
[RFC4918] responses, can be quite verbose or even unnecessary at times.
This specification defines how the Prefer header field, in conjunction with its "return minimal" preference, can be used by clients to reduce the verbosity of such responses by requesting that the server omit those portions of the response that can be inferred by their absence.
Minimal PROPFIND and REPORT Responses
When a PROPFIND [RFC4918] request, or a REPORT [RFC3253] request whose report type results in a 207 (Multi Status) response, contains a Prefer header field with a preference of "return minimal", the server SHOULD omit all DAV
:propstat XML elements containing a DAV:status XML element of value 404 (Not Found)
[RFC7231] from the 207 (Multi Status) response.
If the omission of such a DAV:propstat element would result in a DAV:response XML element containing zero DAV:
propstat elements, the server MUST substitute one of the following in its place:  a DAV:propstat element consisting of an empty DAV:prop element and a DAV:status element of value 200 (OK)
[RFC7231]  a DAV:status element of value 200
The following report types are candidates that could benefit from use of the "return minimal" preference.
This list is not intended to be normative or exhaustive.
See Appendices B.1 and B.2 for examples.
When a PROPPATCH [RFC4918] request contains a Prefer header field with a preference of "return minimal", and all instructions are processed successfully, the server SHOULD return one of the following responses rather than a 207 (Multi Status) response:  204 (No Content)
(preferably with a zero length message body) See Appendix B.3 for examples.
Minimal MKCALENDAR and MKCOL Responses
Both the MKCALENDAR [RFC4791] and Extended MKCOL [RFC5689] specifications indicate that a server MAY return a message body in response to a successful request.
This specification explicitly defines the intended behavior in the presence of the Prefer header field.
When a MKCALENDAR or an extended MKCOL request contains a Prefer header field with a preference of "return minimal", and the collection is created with all requested properties being set successfully, the server SHOULD return a 201
[RFC7231] response with an empty (zero length) message body.
Note that the rationale for requiring that a minimal success response have an empty body is twofold:  [RFC4791], Section 5.3.1 states: "If a response body for a successful request is included, it MUST be a CALDAV:
[RFC5689], Section 3 states: "When an empty response body is returned with a success request status code, the client can assume that all properties were set.
See Appendix B.4 for examples.
Reducing WebDAV Roundtrips with "return representation" [RFC7240] describes the "return representation" preference as being intended to provide a means of optimizing communication between the client and server by eliminating the need for a subsequent GET request to retrieve the current representation of the resource following a modification.
This preference is equally applicable to situations where the server itself modifies a resource, and where a resource has been modified by another client.
The state changing methods PUT [RFC7231], COPY/MOVE [RFC4918], PATCH [RFC5789], and POST
[RFC5995] can be used to create or update a resource.
In some instances, such as with Calendaring Extensions to WebDAV (CalDAV) Scheduling [RFC6638], the created or updated resource representation may differ from the representation sent in the body of the request or from that referenced by the effective request URI.
In cases where the client, upon receiving a 2xx (Successful)
[RFC7231] response to its state changing request, would normally issue a subsequent GET request to retrieve the current representation of the resource, the client can instead include a Prefer header field with the "return representation" preference in the state changing request.
When a state changing request contains a Prefer header field with a preference of "return representation", and the resource is created or updated successfully, the server SHOULD include an entity representing the current state of the resource in the resulting 201 (Created) or 200
In addition to coalescing the create/update and retrieve operations into a single roundtrip, by returning the current representation of the resource in the response, the client will know that any changes to the resource were produced by the server rather than a concurrent client, thus providing a level of atomicity to the operation.
See Appendix B.5 for examples.
Frequently, clients using a state changing method such as those listed above will make them conditional by including either an If Match or an If None Match [RFC7232] header field in the request.
This is done to prevent the client from accidentally overwriting a resource whose current state has been modified by another client acting in parallel.
In cases where the client, upon receiving a 412 (Precondition Failed)
[RFC7232] response to its conditional state  changing request, would normally issue a subsequent GET request to retrieve the current representation of the resource, the client can instead include a Prefer header field with the "return representation" preference in the conditional state changing request.
When a conditional state changing request contains a Prefer header field with a preference of "return representation", and the specified condition evaluates to false, the server SHOULD include an entity representing the current state of the resource in the resulting 412 (Precondition Failed)
See Appendix B.6 for examples.
No new security considerations are introduced by use of the Prefer header field with WebDAV requests, beyond those discussed in [RFC7240] and those already inherent in those requests.
The following preference has been added to the HTTP Preferences Registry defined in Section 5.1 of [RFC7240].
The "depth noroot" preference indicates that the client wishes for the server to exclude the target (root) resource from processing by the HTTP method and only apply the HTTP method to the target resource's subordinate resources.
This preference is only intended to be used with HTTP methods whose definitions explicitly provide support for the Depth [RFC4918] header field.
Furthermore, this preference only applies when the Depth header field has a value of "1" or "infinity" (either implicitly or explicitly).
The Brief and Extended Depth Header Fields
This document is based heavily on the Brief [MSDN.aa563501] and extended Depth [MSDN.aa563950] header fields.
The behaviors described in Sections 2.1 and 2.2 are identical to those provided by the Brief header field when used with the PROPFIND [MSDN.aa580336] and PROPPATCH [MSDN.aa493854] methods, respectively.
The behavior described in Section 4 is identical to that provided by the "1,noroot" [MSDN.aa563950] and "infinity,noroot" [MSDN.aa563950]
Client and server implementations that already support the Brief header field can add support for the "return minimal" preference with nominal effort.
If a server supporting the Prefer header field receives both the Brief and Prefer header fields in a request, clients can expect the server to ignore the Brief header field and only use the Prefer header field preferences.
Typical PROPFIND Request/Response with Depth:1
This example tries to fetch one known and one unknown property from child resources.
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length:
xml version "1.0" encoding "UTF 8"?
Multi Status Content Type: application/xml; charset utf 8 Content Length: 1722 <?
xml version "1.0" encoding "utf 8"?
Minimal PROPFIND Request/Response with Depth:1
This example tries to fetch one known and one unknown property from child resources only.
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length:
189 Depth: 1 Prefer: return minimal, depth noroot <?
xml version "1.0" encoding "UTF 8"?
Multi Status Content Type: application/xml; charset utf 8 Content Length:
return minimal, depth noroot <?
xml version "1.0" encoding "utf 8"?
Minimal PROPFIND Request/Response with an Empty DAV:
This example tries to fetch an unknown property from a collection.
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length:
166 Prefer: return minimal <?
xml version "1.0" encoding "UTF 8"?
Multi Status Content Type: application/xml;
charset utf 8 Content Length:
xml version "1.0" encoding "utf 8"?
This example tries to fetch an unknown property from several resources via the DAV:expand property [RFC3253] REPORT type.
Host: webdav.example.com Content type: text/xml;
charset utf 8 Content length: 847 <?
xml version "1.0" encoding "utf 8"?
<D:property name "current user principal">
<D:property name "foobar" namespace "
property name "calendar home set" namespace "urn:
<D:property name "foobar" namespace "
property name "addressbook home set
<D:property name "foobar" namespace "
Multi Status Content Type: application/xml; charset utf 8 Content Length: 2664 <?
xml version "1.0" encoding "utf 8"?
> </C:calendar home set> <R:
This example tries to fetch an unknown property from several resources via the DAV:expand property [RFC3253] REPORT type.
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length: 847 Prefer:
xml version "1.0" encoding "utf 8"?
<D:property name "current user principal">
<D:property name "foobar" namespace "
property name "calendar home set" namespace "urn:
<D:property name "foobar" namespace "
property name "addressbook home set
<D:property name "foobar" namespace "
Multi Status Content Type: application/xml; charset utf 8 Content Length:
xml version "1.0" encoding "utf 8"?
> </C:calendar home set> <R:
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length: 199 <?
xml version "1.0" encoding "utf 8"?
Multi Status Content Type: application/xml; charset utf 8 Content Length: 297 <?
xml version "1.0" encoding "utf 8"?
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length:
199 Prefer: return minimal <?
xml version "1.0" encoding "utf 8"?
200 OK Content Length: 0 Preference Applied:
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length: 181 <?
xml version "1.0" encoding "utf 8"?
201 Created Cache Control: no cache Content Type: application/xml; charset utf 8 Content Length: 224 <?
xml version "1.0" encoding "utf 8"?
Host: webdav.example.com Content Type: application/xml;
charset utf 8 Content Length: 181 Prefer: return minimal <?
xml version "1.0" encoding "utf 8"?
201 Created Cache Control: no cache Content Length: 0
Typical Resource Creation and Retrieval via POST
Note that this request is not conditional because by using the POST [RFC5995] method, the client lets the server choose the resource URI, thereby guaranteeing that it will not modify an existing resource.
HTTP/1.1 Host: caldav.example.com Content Type: text/calendar;
charset utf 8 Content Length:
Ken Murchison":mailto:murch@example.com ATTENDEE;CN "Ken Murchison";CUTYPE
<< HTTP/1.1 201 Created Location: /container
Note that the server did not include any validator header fields (e.g., ETag) in the response, signaling that the created representation differs from the representation sent in the body of the request.
The client has to send a separate GET request to retrieve the current representation: >
<< HTTP/1.1 200 OK Content Type: text/calendar;
charset utf 8 Content Length: 541 ETag:
Ken Murchison":mailto:murch@example.com ATTENDEE;CN "Ken Murchison";CUTYPE
NEEDS ACTION;ROLE REQ PARTICIPANT;RSVP TRUE;SCHEDULE STATUS  1.2:mailto:jdoe@example.com END:
Streamlined Resource Creation and Retrieval via POST Note that this request is not conditional because by using the POST [RFC5995] method, the client lets the server choose the resource URI, thereby guaranteeing that it will not modify an existing resource.
HTTP/1.1 Host: caldav.example.com Content Type: text/calendar;
charset utf 8 Content Length: 521 Prefer: return representation
Ken Murchison":mailto:murch@example.com ATTENDEE;CN "Ken Murchison";CUTYPE
<< HTTP/1.1 201 Created Location:
/container/work/abc.ics Content Type: text/calendar; charset utf 8 Content Length: 541 Content Location: /container/work/abc.ics ETag: "nahduyejc
Ken Murchison":mailto:murch@example.com ATTENDEE;CN "Ken Murchison";CUTYPE
NEEDS ACTION;ROLE REQ PARTICIPANT;RSVP TRUE;SCHEDULE STATUS  1.2:mailto:jdoe@example.com END:
Typical Conditional Resource Update Failure and Retrieval via PUT
Host: dav.example.com Content Type: text/plain Content Length:
" Either write something worth reading or do something worth writing.
Response << HTTP/1.1 412 Precondition Failed Content Length: 0
The resource has been modified by another user agent (ETag mismatch); therefore, the client has to send a separate GET request to retrieve the current representation: >
<< HTTP/1.1 200 OK Content Type:
text/plain Content Length: 52 ETag: "789sdas
" An investment in knowledge pays the best interest.
Streamlined Conditional Resource Update Failure and Retrieval via PUT >
Host: dav.example.com Content Type: text/plain Content Length:
Either write something worth reading or do something worth writing.
Response << HTTP/1.1 412 Precondition Failed Content Type: text/plain Content Length: 52 Content Location: /container/motd.txt ETag: "
An investment in knowledge pays the best interest.
