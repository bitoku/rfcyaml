Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects that can be used to manage and monitor MIB objects and take action through events.
The Event MIB provides the ability to monitor MIB objects on the local system or on a remote system and take simple action when a trigger condition is met.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.
The SNMP Management Framework presently consists of five major components:   An overall architecture, described in RFC 2571
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155
[RFC1155], STD 16, RFC 1212 [RFC1212] and RFC 1215 [RFC1215].
The second version, called SMIv2, is described in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579
[RFC2579] and STD 58, RFC 2580
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901
[RFC1901] and RFC 1906 [RFC1906].
The third version of the message protocol is called SNMPv3 and described in RFC 1906
[RFC1906], RFC 2572 [RFC2572] and RFC 2574
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [RFC1157].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [RFC1905].
A set of fundamental applications described in RFC 2573 [RFC2573] and the view based access control mechanism described in RFC 2575
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [RFC2570].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
It may not be possible to meaningfully monitor Counter64 objects using an SMIv1 version of the MIB.
Overview With network sizes well beyond the ability of people to manage them directly,
automated, distributed management is vital.
An important aspect of such management is the ability of a system to monitor itself or for some other system to monitor it.
The Event MIB provides the ability to monitor MIB objects on the local system or on a remote system and take simple action when a trigger condition is met.
The MIB is intended to suit either a relatively powerful manager or mid  level manager, as well as a somewhat more limited self managing system.
The Event MIB is based on extensive experience with the RMON MIB [RFC1757] and provides a superset of the capabilities of the RMON alarm and event groups.
Conceptually, the key extension is the ability to allow alarms to be generated for MIB objects that are on another network element.
The Event MIB calls "triggers" what the RMON MIB called "alarms," but the concepts are the same.
Event MIB triggers maintain the RMON handling of thresholds and add the concept of booleans.
Event MIB events maintain the RMON concept of sending an SNMP notification in response to a trigger and add the concept of setting a MIB object.
The Event MIB is the successor and update to SNMPv2's Manager to  Manager MIB [RFC1451]
which was declared Historic pending this work.
The Event MIB depends on the services of the SNMPv3 Management Target and Notification MIBs [RFC2573].
The Event MIB is nicely complemented by the Distributed Management Expression MIB [RFC2982], which is the expected source of boolean objects to monitor.
Note that there is considerable overlap between the wildcard and delta sample capabilities of the Event and Expression MIBs.
A carefully planned implementation might well use common code to provide the overlapping functions.
The MIB has four sections: triggers, objects, events, and notifications.
Triggers define the conditions that lead to events.
The trigger table lists what objects are to be monitored and
how and relates each trigger to an event.
It has supplementary, companion tables for additional objects that depend on the type of test done for the trigger.
The objects table lists objects that can be added to notifications based on the trigger, the trigger test type, or the event that resulted in the notification.
The event table defines what happens when an event is triggered: sending a notification, setting a MIB object or both.
It has supplementary, companion tables for additional objects that depend on the action taken.
The notification section defines a set of generic notifications to go with the events and for Event MIB error handling, and it defines a set of objects to put in those notifications.
The following diagram describes the relationships between the tables in the Event MIB.
The Event MIB is instrumentation for a distributed management application that monitors MIB objects.
In its simplest form this application monitors individual, local MIB objects, just as an RMON probe fulfills the functions implied by RMON's alarm and event operation.
Additionally the application can monitor remote objects and wildcarded groups of objects.
Remote monitoring uses the tag service of the Management Target MIB [RFC2573] to select and access remote systems as an ordinary SNMP
Local monitoring may be via a more intimate, local interface which may, for example, bypass SNMP encoding but otherwise is functionally identical to remote SNMP operation, including the application of access control.
A self  management only system MAY not implement remote monitoring.
Wildcards indicate that the application SHOULD use a GetNext type operation to find the zero or more instances implied by a truncated object identifier, just like an ordinary SNMP based management application.
Each instance of a wildcard is treated
as if it were a separate entry, that is the instances of a wildcarded object are independent of one another.
For example, a wild carded object may trigger an event, and result in the setting of another wildcarded object.
The instance that satisfied the trigger function is used to perform the set function.
All of this takes place independently of any additional instances that may fill the wildcard.
Error handling is by notification.
These error notifications SHOULD be enabled only for the diagnosis of problems indicated by error counters.
If minimizing the probability of notification loss is a concern they SHOULD be transmitted as Inform PDUs as described in the [SNMP TARGET MIB] or directed to a log as described in the Notification Log MIB [rfcNotificationLogMIB].
Note that this does not mean the Notification Log MIB is REQUIRED, since in fact notifications usually are not lost, but that the Notification Log MIB can be helpful with this as well as other MIBs that include notifications.
Although like most MIBs this one has no explicit controls for the persistence of the values set in configuring events, a robust, polite implementation would certainly not force its managing applications to reconfigure it whenever it resets.
Again, as with most MIBs, it is implementation specific how a system provides and manages such persistence.
To speculate, one could imagine, for example, that persistence depended on the context in which the expression was configured, or perhaps system specific characteristics of the expression's owner.
Or perhaps everything in a MIB such as this one, which is clearly aimed at persistent configuration, is automatically part of a system's other persistent configuration.
Security Security of Event MIB entries depends on SNMPv3 access control for the entire MIB or for subsets based on entry owner names.
Security of monitored objects for remote access depends on the Management Target MIB [RFC2573].
Security for local access can depend on the Management Target MIB or on recording appropriate security credentials of the creator of an entry and using those to access the local objects.
These security credentials are the parameters necessary as inputs to isAccessAllowed from the Architecture for Describing SNMP Management Frameworks.
When accessing local objects without using a local target tag, the system MUST (conceptually) use isAccessAllowed to ensure that it does not violate security.
To facilitate the provisioning of access control by a security administrator for this MIB itself using the View Based Access Control Model (VACM) defined in RFC 2275
[RFC2575] for tables in which multiple users may need to independently create or modify entries, the initial index is used as an "owner index".
Such an initial index has a syntax of SnmpAdminString, and can thus be trivially mapped to a securityName or groupName as defined in VACM, in accordance with a security policy.
If a security administrator were to employ such an approach, all entries in related tables belonging to a particular user will have the same value for this initial index.
For a given user's entries in a particular table, the object identifiers for the information in these entries will have the same sub identifiers (except for the "column" sub identifier) up to the end of the encoded owner index.
To configure VACM to permit access to this portion of the table, one would create vacmViewTreeFamilyTable entries with the value of vacmViewTreeFamilySubtree including the owner index portion, and vacmViewTreeFamilyMask "wildcarding" the column sub identifier.
More elaborate configurations are possible.
IMPORTS MODULE IDENTITY, OBJECT TYPE, Integer32, Unsigned32, NOTIFICATION TYPE, Counter32, Gauge32,
FROM SNMP FRAMEWORK MIB; dismanEventMIB MODULE IDENTITY LAST UPDATED "200010160000Z"
16 October 2000 ORGANIZATION "IETF Distributed Management Working Group" CONTACT INFO "Ramanathan Kavasseri Cisco Systems,
Inc. 170 West Tasman Drive, San Jose CA 95134 1706.
Phone:  1 408 526 4527 Email: ramk@cisco.com
The MIB module for defining event triggers and actions for network management purposes."
"This is the initial version of this MIB.
current DESCRIPTION "Reasons for failures in an attempt to perform a management request.
The first group of errors, numbered less than 0, are related to problems in sending the request.
The existence of a particular error code here does not imply that all implementations are capable of sensing that error and returning that code.
The second group, numbered greater than 0, are copied directly from SNMP protocol operations and are intended to carry exactly the meanings defined for the protocol as returned in an SNMP response.
can't get to destination address
no response to SNMP request badType
the data syntax of a retrieved object as not as expected sampleOverrun
The minimum mteTriggerFrequency this system will accept.
A system may use the larger values of this minimum to lessen the impact of constant sampling.
For larger sampling intervals the system samples less often and suffers less overhead.
This object provides a way to enforce such lower overhead for all triggers created after it is set.
Unless explicitly resource limited, a system's value for this object SHOULD be 1, allowing as small as a 1 second interval for ongoing trigger sampling.
Changing this value will not invalidate an existing setting of mteTriggerFrequency."
"The maximum number of instance entries this system will support for sampling.
These are the entries that maintain state, one for each instance of each sampled object as selected by mteTriggerValueID.
Note that wildcarded objects result in multiple instances of this state.
A value of 0 indicates no preset limit, that is, the limit is dynamic based on system operation and resources.
Unless explicitly resource limited, a system's value for this object SHOULD be 0.
Changing this value will not eliminate or inhibit existing sample state but could prevent allocation of additional state information."
"The highest value of mteResourceSampleInstances that has occurred since initialization of the management system."
"The number of times this system could not take a new sample because that allocation would have exceeded the limit set by mteResourceSampleInstanceMaximum."
"The number of times an attempt to check for a trigger condition has failed.
This counts individually for each attempt in a group of targets or each attempt for a wildcarded object."
A table of management event trigger information."
current DESCRIPTION "Information about a single trigger.
Applications create and delete entries using mteTriggerEntryStatus.
The owner of this entry.
The exact semantics of this string are subject to the security policy defined by the security administrator."
A locally unique, administratively assigned name for the trigger within the scope of mteOwner."
"A description of the trigger's function and use."
"The type of trigger test to perform.
For 'boolean' and 'threshold'  tests, the object at mteTriggerValueID MUST evaluate to an integer, that is, anything that ends up encoded for transmission (that is, in BER, not ASN.1) as an integer.
For 'existence', the specific test is as selected by mteTriggerExistenceTest.
When an object appears, vanishes or changes value, the trigger fires.
If the object's appearance caused the trigger firing, the object MUST vanish before the trigger can be fired again for it, and vice versa.
If the trigger fired due to a change in the object's value, it will be fired again on every successive value change for that object.
For 'boolean', the specific test is as selected by mteTriggerBooleanTest.
If the test result is true the trigger fires.
The trigger will not fire again until the value has become false and come back to true.
For 'threshold' the test works as described below for mteTriggerThresholdStartup, mteTriggerThresholdRising, and mteTriggerThresholdFalling.
Note that combining 'boolean' and 'threshold' tests on the same object may be somewhat redundant.
"The type of sampling to perform.
An 'absoluteValue' sample requires only a single sample to be meaningful, and is exactly the value of the object at mteTriggerValueID at the sample time.
A 'deltaValue' requires two samples to be meaningful and is thus not available for testing until the second and subsequent samples after the object at mteTriggerValueID is first found to exist.
It is the difference between the two samples.
For unsigned values it is always positive, based on unsigned arithmetic.
For signed values it can be positive or negative.
For SNMP counters to be meaningful they should be sampled as a 'deltaValue'.
For 'deltaValue' mteTriggerDeltaTable contains further parameters.
If only 'existence' is set in
mteTriggerTest this object has no meaning.
"The object identifier of the MIB object to sample to see if the trigger should fire.
This may be wildcarded by truncating all or part of the instance portion, in which case the value is obtained as if with a GetNext function, checking multiple values if they exist.
If such wildcarding is applied, mteTriggerValueIDWildcard must be 'true' and if not it must be 'false'.
Bad object identifiers or a mismatch between truncating the identifier and the value of mteTriggerValueIDWildcard result in operation as one would expect when providing the wrong identifier to a Get or GetNext operation.
The Get will fail or get the wrong object.
The GetNext will indeed get whatever is next, proceeding until it runs past the initial part of the identifier and perhaps many unintended objects for confusing results.
If the value syntax of those objects is not usable, that results in a 'badType' error that terminates the scan.
Each instance that fills the wildcard is independent of any additional instances, that is, wildcarded objects operate as if there were a separate table entry for each instance that fills the wildcard without having to actually predict all possible instances ahead of time."
current DESCRIPTION "Control for whether mteTriggerValueID is to be treated as fully specified or wildcarded, with 'true' indicating wildcard.
"The tag for the target(s) from which to obtain the condition for a trigger check.
A length of 0 indicates the local system.
In this case, access to the objects indicated by mteTriggerValueID is under the security credentials of the requester that set mteTriggerEntryStatus to 'active'.
Those credentials are the input parameters for isAccessAllowed from the Architecture for Describing SNMP Management Frameworks.
Otherwise access rights are checked according to the security parameters resulting from the tag.
"The management context from which to obtain mteTriggerValueID.
This may be wildcarded by leaving characters off the end.
For example use 'Repeater' to wildcard to 'Repeater1', 'Repeater2', 'Repeater 999.87b', and so on.
To indicate such wildcarding is intended, mteTriggerContextNameWildcard must be 'true'.
Each instance that fills the wildcard is independent of any additional instances, that is, wildcarded objects operate as if there were a separate table entry for each instance that fills the wildcard without having to actually predict all possible instances ahead of time.
Operation of this feature assumes that the local system has a list of available contexts against which to apply the wildcard.
If the objects are being read from the local system, this is clearly the system's own list of contexts.
For a remote system a local version of such a list is not defined by any current standard and may not be available, so this function MAY not be supported.
"The number of seconds to wait between trigger samples.
To encourage consistency in sampling, the interval is measured from the beginning of one check to the beginning of the next and the timer is restarted immediately when it expires, not when the check completes.
If the next sample begins before the previous one completed the system may either attempt to make the check or treat this as an error condition with the error 'sampleOverrun'.
A frequency of 0 indicates instantaneous recognition of the condition.
This is not possible in many cases, but may be supported in cases where it makes sense and the system is able to do so.
This feature allows the MIB to be used in implementations where such interrupt driven behavior is possible and is not likely to be supported for all MIB objects even then since such sampling generally has to be tightly integrated into low level code.
Systems that can support this SHOULD document those cases where it can be used.
In cases where it can not, setting this object to 0 should be disallowed.
These objects are to be added to any Notification resulting from the firing of this trigger.
A list of objects may also be added based on the event or on the value of mteTriggerTest.
A length of 0 indicates no additional objects.
"A control to allow a trigger to be configured but not used.
When the value is 'false' the trigger is not sampled."
"The control that allows creation and deletion of entries.
Once made active an entry may not be modified except to delete it."
A table of management event trigger information for delta sampling."
current DESCRIPTION "Information about a single trigger's delta sampling.
Entries automatically exist in this this table for each mteTriggerEntry that has mteTriggerSampleType set to 'deltaValue'.
} mteTriggerDeltaDiscontinuityID OBJECT TYPE SYNTAX
The OBJECT IDENTIFIER (OID) of a TimeTicks, TimeStamp, or
DateAndTime object that indicates a discontinuity in the value at mteTriggerValueID.
The OID may be for a leaf object (e.g. sysUpTime.0) or may be wildcarded to match mteTriggerValueID.
This object supports normal checking for a discontinuity in a counter.
Note that if this object does not point to sysUpTime discontinuity checking MUST still check sysUpTime for an overall discontinuity.
If the object identified is not accessible the sample attempt is in error, with the error code as from an SNMP request.
Bad object identifiers or a mismatch between truncating the identifier and the value of mteDeltaDiscontinuityIDWildcard result in operation as one would expect when providing the wrong identifier to a Get operation.
The Get will fail or get the wrong object.
If the value syntax of those objects is not usable, that results in an error that terminates the sample with a 'badType' error code.
current DESCRIPTION "Control for whether mteTriggerDeltaDiscontinuityID is to be treated as fully specified or wildcarded, with 'true' indicating wildcard.
Note that the value of this object will be the same as that of the corresponding instance of mteTriggerValueIDWildcard when the corresponding mteTriggerSampleType is 'deltaValue'.
"The value 'timeTicks' indicates the mteTriggerDeltaDiscontinuityID of this row is of syntax TimeTicks.
The value 'timeStamp' indicates syntax TimeStamp.
The value 'dateAndTime' indicates syntax DateAndTime.
A table of management event trigger information for existence triggers."
current DESCRIPTION "Information about a single existence trigger.
Entries automatically exist in this this table for each mteTriggerEntry
that has 'existence' set in mteTriggerTest.
"The type of existence test to perform.
The trigger fires when the object at mteTriggerValueID is seen to go from present to absent, from absent to present, or to have it's value changed, depending on which tests are selected: present(0) when this test is selected, the trigger fires when the mteTriggerValueID object goes from absent to present.
when this test is selected, the trigger fires when the mteTriggerValueID object goes from present to absent.
changed(2) when this test is selected, the trigger fires the mteTriggerValueID object value changes.
Once the trigger has fired for either presence or absence it will not fire again for that state until the object has been to the other state.
MAX ACCESS  read write STATUS
current DESCRIPTION "Control for whether an event may be triggered when this entry is first set to 'active' and the test specified by mteTriggerExistenceTest is true.
Setting an option causes that trigger to fire when its test is true.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteObjectsName of a group of objects from mteObjectsTable.
These objects are to be added to any Notification resulting from the firing of this trigger for this test.
A list of objects may also be added based on the overall trigger, the event or other settings in mteTriggerTest.
A length of 0 indicates no additional objects.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'existence' and this trigger fires.
A length of 0 indicates no event.
A table of management event trigger information for boolean triggers."
current DESCRIPTION "Information about a single boolean trigger.
Entries automatically exist in this this table for each mteTriggerEntry
that has 'boolean' set in mteTriggerTest.
"The type of boolean comparison to perform.
The value at mteTriggerValueID is compared to mteTriggerBooleanValue, so for example if mteTriggerBooleanComparison is 'less' the result would be true if the value at mteTriggerValueID is less than the value of mteTriggerBooleanValue.
current DESCRIPTION "Control for whether an event may be triggered when this entry is first set to 'active' or
a new instance of the object at mteTriggerValueID is found and the test specified by mteTriggerBooleanComparison is true.
In that case an event is triggered if mteTriggerBooleanStartup is 'true'.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteObjectsName of a group of objects from mteObjectsTable.
These objects are to be added to any Notification resulting from the firing of this trigger for this test.
A list of objects may also be added based on the overall trigger, the event or other settings in mteTriggerTest.
A length of 0 indicates no additional objects.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'boolean' and this trigger fires.
A length of 0 indicates no event.
A table of management event trigger information for threshold triggers."
current DESCRIPTION "Information about a single threshold trigger.
Entries automatically exist in this table for each mteTriggerEntry
that has 'threshold' set in mteTriggerTest.
"The event that may be triggered when this entry is first set to 'active' and a new instance of the object at mteTriggerValueID is found.
If the first sample after this instance becomes active is greater than or equal to mteTriggerThresholdRising and mteTriggerThresholdStartup is equal to 'rising' or 'risingOrFalling', then one mteTriggerThresholdRisingEvent is triggered for that instance.
If the first sample after this entry becomes active is less than or equal to mteTriggerThresholdFalling and mteTriggerThresholdStartup is equal to 'falling' or 'risingOrFalling', then one mteTriggerThresholdRisingEvent is triggered for that instance."
A threshold value to check against if mteTriggerType is 'threshold'.
When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, one mteTriggerThresholdRisingEvent is triggered.
That event is also triggered if the first sample after this entry becomes active is greater than or equal to this threshold and
mteTriggerThresholdStartup is equal to 'rising' or 'risingOrFalling'.
After a rising event is generated, another such event is not triggered until the sampled value falls below this threshold and reaches mteTriggerThresholdFalling.
A threshold value to check against if mteTriggerType is 'threshold'.
When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, one mteTriggerThresholdFallingEvent is triggered.
That event is also triggered if the first sample after this entry becomes active is less than or equal to this threshold and
mteTriggerThresholdStartup is equal to 'falling' or 'risingOrFalling'.
After a falling event is generated, another such event is not triggered until the sampled value rises above this threshold and reaches mteTriggerThresholdRising.
A threshold value to check against if mteTriggerType is 'threshold'.
When the delta value (difference) between the current sampled value (value(n)) and the previous sampled value (value(n 1)) is greater than or equal to this threshold, and the delta value calculated at the last sampling interval (i.e. value(n 1) value(n 2)) was less than this threshold, one mteTriggerThresholdDeltaRisingEvent is triggered.
That event is also triggered if the first delta value calculated after this entry becomes active, i.e. value(2) value(1), where value(1) is the first sample taken of that instance, is greater than or equal to this threshold.
After a rising event is generated, another such event is not triggered until the delta value falls below this threshold and reaches mteTriggerThresholdDeltaFalling.
A threshold value to check against if mteTriggerType is 'threshold'.
When the delta value (difference) between the current sampled value (value(n)) and the previous sampled value (value(n 1)) is less than or equal to this threshold, and the delta value calculated at the last sampling interval (i.e. value(n 1) value(n 2)) was greater than this threshold, one mteTriggerThresholdDeltaFallingEvent is triggered.
That event is also triggered if the first delta value calculated after this entry becomes active, i.e. value(2) value(1), where value(1) is the first sample taken of that instance, is less than or equal to this threshold.
After a falling event is generated, another such event is not triggered until the delta value falls below this threshold and reaches mteTriggerThresholdDeltaRising.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteObjectsName of a group of objects from mteObjectsTable.
These objects are to be added to any Notification resulting from the firing of this trigger for this test.
A list of objects may also be added based on the overall trigger, the event or other settings in mteTriggerTest.
A length of 0 indicates no additional objects.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'threshold' and this trigger fires based on mteTriggerThresholdRising.
A length of 0 indicates no event.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'threshold' and this trigger fires based on mteTriggerThresholdFalling.
A length of 0 indicates no event.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'threshold' and this trigger fires based on mteTriggerThresholdDeltaRising.
A length of 0 indicates no event.
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteEventName of the event to invoke when mteTriggerType is 'threshold' and this trigger fires based on mteTriggerThresholdDeltaFalling.
A length of 0 indicates no event.
"A table of objects that can be added to notifications based on the trigger, trigger test, or event, as pointed to by entries in those tables."
current DESCRIPTION "A group of objects.
Applications create and delete entries using mteObjectsEntryStatus.
When adding objects to a notification they are added in the lexical order of their index in this table.
Those associated with a trigger come first, then trigger test, then event.
A locally unique, administratively assigned name for a group of objects."
An arbitrary integer for the purpose of identifying individual objects within a mteObjectsName group.
Objects within a group are placed in the notification in the numerical order of this index.
Groups are placed in the notification in the order of the selections for overall trigger, trigger test, and event.
Within trigger test they are in the same order as the numerical values of the bits defined for mteTriggerTest.
Bad object identifiers or a mismatch between truncating the identifier and the value of mteDeltaDiscontinuityIDWildcard result in operation as one would expect when providing the wrong identifier to a Get operation.
The Get will fail or get the wrong object.
If the object is not available it is omitted from the notification."
"The object identifier of a MIB object to add to a Notification that results from the firing of a trigger.
This may be wildcarded by truncating all or part of the instance portion, in which case the instance portion of the OID for obtaining this object will be the same as that used in obtaining the mteTriggerValueID that fired.
If such wildcarding is applied, mteObjectsIDWildcard must be 'true' and if not it must be 'false'.
Each instance that fills the wildcard is independent of any additional instances, that is, wildcarded objects operate as if there were a separate table entry for each instance that fills the wildcard without having to actually predict all possible instances ahead of time."
"The control that allows creation and deletion of entries.
Once made active an entry MAY not be modified except to delete it."
"The number of times an attempt to invoke an event has failed.
This counts individually for each attempt in a group of targets or each attempt for a wildcarded trigger object."
A table of management event action information."
current DESCRIPTION "Information about a single event.
Applications create and delete entries using mteEventEntryStatus.
current DESCRIPTION "A locally unique, administratively assigned name for the event."
"A description of the event's function and use."
"The actions to perform when this event occurs.
For 'notification', Traps and/or Informs are sent according to the configuration in the SNMP Notification MIB.
For 'set', an SNMP Set operation is performed according to control values in this entry.
"A control to allow an event to be configured but not used.
When the value is 'false' the event does not execute even if triggered."
"The control that allows creation and deletion of entries.
Once made active an entry MAY not be modified except to delete it."
A table of information about notifications to be sent as a consequence of management events."
current DESCRIPTION "Information about a single event's notification.
Entries automatically exist in this this table for each mteEventEntry
that has 'notification' set in mteEventActions.
The object identifier from the NOTIFICATION TYPE for the notification to use if metEventActions has 'notification' set."
MAX ACCESS  read write STATUS
current DESCRIPTION "The mteObjectsName of a group of objects from mteObjectsTable
if mteEventActions has 'notification' set.
These objects are to be added to any Notification generated by this event.
Objects may also be added based on the trigger that stimulated the event.
A length of 0 indicates no additional objects.
A table of management event action information."
Entries automatically exist in this this table for each mteEventEntry that has 'set' set in
"The object identifier from the MIB object to set if mteEventActions has 'set' set.
This object identifier may be wildcarded by leaving sub identifiers off the end, in which case nteEventSetObjectWildCard must be 'true'.
If mteEventSetObject is wildcarded the instance used to set the object to which it points is the same as the instance from the value of mteTriggerValueID that triggered the event.
Each instance that fills the wildcard is independent of any additional instances, that is, wildcarded objects operate as if there were a separate table entry for each instance that fills the wildcard without having to actually predict all possible instances ahead of time.
Bad object identifiers or a mismatch between truncating the identifier and the value of mteSetObjectWildcard result in operation as one would expect when providing the wrong identifier to a Set operation.
The Set will fail or set the wrong object.
If the value syntax of the destination object is not correct, the Set fails with the normal SNMP error code."
current DESCRIPTION "Control over whether mteEventSetObject is to be treated as fully specified or wildcarded, with 'true' indicating wildcard if mteEventActions has 'set' set.
The value to which to set the object at mteEventSetObject if mteEventActions has 'set' set."
"The tag for the target(s) at which to set the object at mteEventSetObject to mteEventSetValue if mteEventActions has 'set' set.
Systems limited to self management
MAY reject a non zero length for the value of this object.
A length of 0 indicates the local system.
In this case, access to the objects indicated by mteEventSetObject is under the security credentials of the requester that set mteTriggerEntryStatus to 'active'.
Those credentials are the input parameters for isAccessAllowed from the Architecture for Describing SNMP Management Frameworks.
Otherwise access rights are checked according to the security parameters resulting from the tag.
4 } mteEventSetContextName OBJECT TYPE
"The management context in which to set mteEventObjectID.
if mteEventActions has 'set' set.
This may be wildcarded by leaving characters off the end.
To indicate such wildcarding mteEventSetContextNameWildcard must be 'true'.
If this context name is wildcarded the value used to complete the wildcarding of mteTriggerContextName will be appended.
current DESCRIPTION "Control for whether mteEventSetContextName is to be treated as fully specified or wildcarded, with 'true' indicating wildcard if mteEventActions has 'set' set."
The name of the trigger causing the notification."
{ dismanEventMIBNotificationObjects 1 } mteHotTargetName OBJECT TYPE SYNTAX
"The context name related to the notification.
This MUST be as fully qualified as possible, including filling in wildcard information determined in processing."
"The object identifier of the destination object related to the notification.
This MUST be as fully qualified as possible, including filling in wildcard information determined in processing.
For a trigger related notification this is from mteTriggerValueID.
For a set failure this is from mteEventSetObject."
The value of the object at mteTriggerValueID when a trigger fired."
The reason for the failure of an attempt to check for a trigger condition or set an object in response to an event."
NOTIFICATION TYPE OBJECTS { mteHotTrigger, mteHotTargetName, mteHotContextName, mteHotOID, mteHotValue } STATUS
current DESCRIPTION "Notification that the trigger indicated by the object instances has fired, for triggers with mteTriggerType 'boolean' or 'existence'."
The network manager must enable this notification only with a certain fear and trembling, as it can easily crowd out more important information.
It should be used only to help diagnose a problem that has appeared in the error counters and can not be found otherwise."
The network manager must enable this notification only with a certain fear and trembling, as it can easily crowd out more important information.
It should be used only to help diagnose a problem that has appeared in the error counters and can not be found otherwise."
MODULE COMPLIANCE STATUS current DESCRIPTION
"The compliance statement for entities which implement the Event MIB."
MODULE    this module MANDATORY GROUPS { dismanEventResourceGroup, dismanEventTriggerGroup, dismanEventObjectsGroup, dismanEventEventGroup, dismanEventNotificationObjectGroup, dismanEventNotificationGroup } OBJECT mteTriggerTargetTag
MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus limiting monitoring to the local system or pre configured remote systems."
MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus limiting setting to the local system or pre configured remote systems."
MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus allowing the system not to implement wildcarding."
MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus allowing the system not to implement wildcarding."
OBJECT mteObjectsIDWildcard MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus allowing the system not to implement wildcarding."
OBJECT mteEventSetContextNameWildcard MIN ACCESS  read only DESCRIPTION
"Write access is not required, thus allowing the system not to implement wildcarding."
Units of Conformance dismanEventResourceGroup OBJECT GROUP OBJECTS { mteResourceSampleMinimum, mteResourceSampleInstanceMaximum, mteResourceSampleInstances, mteResourceSampleInstancesHigh, mteResourceSampleInstanceLacks
} STATUS current DESCRIPTION "Event resource status and control objects."
mteTriggerFalling, mteTriggerFailure, mteEventSetFailure } STATUS current DESCRIPTION "Notifications."
Security Considerations Security issues are discussed in the Security section and in the DESCRIPTION clauses of relevant objects.
Editor's Address Ramanathan Kavasseri Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134 1706
408 527 2446 EMail: ramk@cisco.com
