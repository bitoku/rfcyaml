- title: __initial_text__
  contents:
  - "Replaces: IEN 125                                         September 1981\n  \
    \                            PRE-EMPTION\nIn circuit-switching systems, once a\
    \ user has acquired a circuit, the\ncommunication bandwidth of that circuit is\
    \ dedicated, even if it is not\nused.  When the system saturates, additional circuit\
    \ set-up requests are\nblocked.  To allow high precedence users to gain access\
    \ to circuit\nresources, systems such as AUTOVON associate a precedence with each\n\
    telephone instrument.  Those instruments with high precedence can\npre-empt circuit\
    \ resources, causing lower precedence users to be cut\noff.\nIn message switching\
    \ systems such as AUTODIN I, incoming traffic is\nstored on disks  (or drums or\
    \ tape) and processed in order of\nprecedence.  If a high precedence message is\
    \ entered into the system, it\nis processed and forwarded as quickly as possible.\
    \  When the high\nprecedence message arrives at the destination message switch,\
    \ it may\npre-empt the use of the output devices on the switch, interrupting the\n\
    printing of a lower precedence message.\nIn packet switching systems, there is\
    \ little or no storage in the\ntransport system so that precedence has little\
    \ impact on delay for\nprocessing a packet.  However, when a packet switching\
    \ system reaches\nsaturation, it rejects offered traffic.  Precedence can be used\
    \ in\nsaturated packet switched systems to sort traffic queued for entry into\n\
    the system.\nIn general, precedence is a tool for deciding how to allocate resources\n\
    when systems are saturated.  In circuit switched systems, the resource\nis circuits;\
    \ in message switched systems the resource is the message\nswitch processor; and\
    \ in packet switching the resource is the packet\nswitching system itself.\nThis\
    \ capability can be realized in AUTODIN II without adding any new\nmechanisms\
    \ to TCP (except to make precedence of incoming connection\nrequests visible to\
    \ the processes which use TCP).  To allow pre-emptive\naccess to a particular\
    \ terminal, the software (i.e., THP) which supports\nterminal access to the TAC\
    \ can be configured so as to always have a\nLISTEN posted for that terminal, even\
    \ if the terminal has a connection\nin operation.  For example in the ARPANET\
    \ TENEX systems, the user TELNET\npermits a user to have many connections open\
    \ at one time - the user can\nswitch among them at will.  To the extent that this\
    \ can be done without\nviolating security requirements, one could imagine a multi-connection\n\
    THP which always leaves a LISTEN pending for incoming connection\nrequests.  If\
    \ a connection is established, the THP can decide, based on\nits precedence, whether\
    \ to pre-empt any existing connection and to\nswitch the user to the high precedence\
    \ one.\nIf the user is working with several connections of different precedence\n\
    at the same time, the THP would close or abort the lowest precedence\nPre-Emption\n\
    connection in favor of the higher precedence pre-empting one.  Then the\nTHP would\
    \ do a new LISTEN on that terminal's port in case a higher\nprecedence connection\
    \ is attempted.\nOne of the reasons for suggesting this model is that processes\
    \ are the\nusers of TCP (in general) and that TCP itself cannot cause processes\
    \ to\nbe created on behalf of an incoming connection request.  Implementations\n\
    could be realized in which TCPs accept incoming connection requests and,\nbased\
    \ on the destination port number, create appropriate server\nprocesses.  In terms\
    \ of pre-empting access to a remote terminal,\nhowever, it seems more sensible\
    \ to let the process which interfaces the\nterminal to the system mediate the\
    \ pre-emption.  If the terminal is not\nconnected or is turned off, there is no\
    \ point in creating a process to\nserve the incoming high precedence connection\
    \ request.\nFor example, suppose a routine FTP is in operation between Host X\
    \ and\nHost Y.  Host Z decides to do a flash-override FTP to Host X.  It opens\n\
    a high precedence connection via its TCP and the \"SYN\" goes out to the\nFTP\
    \ port on Host X.\nFTP always leaves one LISTEN pending to pre-empt lower precedence\
    \ remote\nusers if it cannot serve one more user (and still keep a LISTEN\npending).\
    \  In this way, the FTP is naturally in a state permitting the\nhigh precedence\
    \ connection request to be properly served, and the FTP\ncan initiate any cleaning\
    \ up that is needed to deal with the\npre-emption.\nIn general, this strategy\
    \ permits the processes using TCP to accommodate\npre-emption in the context of\
    \ the applications they support.\nA non-pre-emptable process is one that does\
    \ not have a LISTEN pending\nwhile it is serving one (or more) users.\nThe actions\
    \ taken to deal with pre-emption of TCP connections will be\napplication-process\
    \ specific and this strategy of a second (or N+1st)\nLISTEN is well suited to\
    \ the situation.\nPre-emption may also be necessary at the site initiating a high\n\
    precedence connection request.  Suppose there is a high precedence user\nwho wants\
    \ to open an FTP connection request from Host Z to Host X.  But\nall FTP and/or\
    \ TCP resources are saturated when this user tries to start\nthe user FTP process.\
    \  In this case, the operating system would have to\nknow about the precedence\
    \ of the user and would have to locally pre-empt\nresources on his behalf (e.g.,\
    \ by logging out lower precedence users).\nThis is a system issue, not specific\
    \ only to TCP.  Implementation of\npre-emption at the source could vary greatly.\
    \  Precedence may be\nassociated with a user or with a terminal.  The TCP implementation\
    \ may\nlocally pre-empt resources to serve high precedence users.  The\noperating\
    \ system may make all pre-emption decisions.\n"
