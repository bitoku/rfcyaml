- title: __initial_text__
  contents:
  - '                    Increasing TCP''s Initial Window

    '
- title: Abstract
  contents:
  - "Abstract\n   This document proposes an experiment to increase the permitted TCP\n\
    \   initial window (IW) from between 2 and 4 segments, as specified in\n   RFC\
    \ 3390, to 10 segments with a fallback to the existing\n   recommendation when\
    \ performance issues are detected.  It discusses\n   the motivation behind the\
    \ increase, the advantages and disadvantages\n   of the higher initial window,\
    \ and presents results from several\n   large-scale experiments showing that the\
    \ higher initial window\n   improves the overall performance of many web services\
    \ without\n   resulting in a congestion collapse.  The document closes with a\n\
    \   discussion of usage and deployment for further experimental purposes\n   recommended\
    \ by the IETF TCP Maintenance and Minor Extensions (TCPM)\n   working group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6928.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. TCP Modification ................................................4\n   3.\
    \ Implementation Issues ...........................................5\n   4. Background\
    \ ......................................................6\n   5. Advantages of\
    \ Larger Initial Windows ............................7\n      5.1. Reducing Latency\
    \ ...........................................7\n      5.2. Keeping Up with the\
    \ Growth of Web Object Size ..............8\n      5.3. Recovering Faster from\
    \ Loss on Under-Utilized or\n           Wireless Links .............................................8\n\
    \   6. Disadvantages of Larger Initial Windows for the Individual ......9\n  \
    \ 7. Disadvantages of Larger Initial Windows for the Network ........10\n   8.\
    \ Mitigation of Negative Impact ..................................11\n   9. Interactions\
    \ with the Retransmission Timer .....................11\n   10. Experimental Results\
    \ From Large-Scale Cluster Tests ...........11\n      10.1. The Benefits .............................................11\n\
    \      10.2. The Cost .................................................12\n  \
    \ 11. Other Studies .................................................13\n   12.\
    \ Usage and Deployment Recommendations ..........................14\n   13. Related\
    \ Proposals .............................................15\n   14. Security Considerations\
    \ .......................................16\n   15. Conclusion ....................................................16\n\
    \   16. Acknowledgments ...............................................16\n  \
    \ 17. References ....................................................16\n    \
    \  17.1. Normative References .....................................16\n      17.2.\
    \ Informative References ...................................17\n   Appendix A.\
    \ List of Concerns and Corresponding Test Results .......21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document proposes to raise the upper bound on TCP's\
    \ initial\n   window (IW) to 10 segments (maximum 14600 B).  It is patterned after\n\
    \   and borrows heavily from RFC 3390 [RFC3390] and earlier work in this\n   area.\
    \  Due to lingering concerns about possible side effects to other\n   flows sharing\
    \ the same network bottleneck, some of the\n   recommendations are conditional\
    \ on additional monitoring and\n   evaluation.\n   The primary argument in favor\
    \ of raising IW follows from the evolving\n   scale of the Internet.  Ten segments\
    \ are likely to fit into queue\n   space available at any broadband access link,\
    \ even when there are a\n   reasonable number of concurrent connections.\n   Lower\
    \ speed links can be treated with environment-specific\n   configurations, such\
    \ that they can be protected from being\n   overwhelmed by large initial window\
    \ bursts without imposing a\n   suboptimal initial window on the rest of the Internet.\n\
    \   This document reviews the advantages and disadvantages of using a\n   larger\
    \ initial window and includes summaries of several large-scale\n   experiments\
    \ showing that an initial window of 10 segments (IW10)\n   provides benefits across\
    \ the board for a variety of bandwidth (BW),\n   round-trip time (RTT), and bandwidth-delay\
    \ product (BDP) classes.\n   These results show significant benefits for increasing\
    \ IW for users\n   at much smaller data rates than had been previously anticipated.\n\
    \   However, at initial windows larger than 10, the results are mixed.\n   We\
    \ believe that these mixed results are not intrinsic but are the\n   consequence\
    \ of various implementation artifacts, including overly\n   aggressive applications\
    \ employing many simultaneous connections.\n   We recommend that all TCP implementations\
    \ have a settable TCP IW\n   parameter, as long as there is a reasonable effort\
    \ to monitor for\n   possible interactions with other Internet applications and\
    \ services\n   as described in Section 12.  Furthermore, Section 10 details why\
    \ 10\n   segments may be an appropriate value, and while that value may\n   continue\
    \ to rise in the future, this document does not include any\n   supporting evidence\
    \ for values of IW larger than 10.\n   In addition, we introduce a minor revision\
    \ to RFC 3390 and RFC 5681\n   [RFC5681] to eliminate resetting the initial window\
    \ when the SYN or\n   SYN/ACK is lost.\n   The document closes with a discussion\
    \ of the consensus from the TCPM\n   working group on the near-term usage and\
    \ deployment of IW10 in the\n   Internet.\n   A complementary set of slides for\
    \ this proposal can be found at\n   [CD10].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 2.  TCP Modification
  contents:
  - "2.  TCP Modification\n   This document proposes an increase in the permitted\
    \ upper bound for\n   TCP's initial window (IW) to 10 segments, depending on the\
    \ maximum\n   segment size (MSS).  This increase is optional: a TCP MAY start\
    \ with\n   an initial window that is smaller than 10 segments.\n   More precisely,\
    \ the upper bound for the initial window will be\n         min (10*MSS, max (2*MSS,\
    \ 14600))                            (1)\n   This upper bound for the initial\
    \ window size represents a change from\n   RFC 3390 [RFC3390], which specified\
    \ that the congestion window be\n   initialized between 2 and 4 segments, depending\
    \ on the MSS.\n   This change applies to the initial window of the connection\
    \ in the\n   first round-trip time (RTT) of data transmission during or following\n\
    \   the TCP three-way handshake.  Neither the SYN/ACK nor its ACK in the\n   three-way\
    \ handshake should increase the initial window size.\n   Note that all the test\
    \ results described in this document were based\n   on the regular Ethernet MTU\
    \ of 1500 bytes.  Future study of the\n   effect of a different MTU may be needed\
    \ to fully validate (1) above.\n   Furthermore, RFC 3390 states (and RFC 5681\
    \ [RFC5681] has similar\n   text):\n      If the SYN or SYN/ACK is lost, the initial\
    \ window used by a sender\n      after a correctly transmitted SYN MUST be one\
    \ segment consisting\n      of MSS bytes.\n   The proposed change to reduce the\
    \ default retransmission timeout\n   (RTO) to 1 second [RFC6298] increases the\
    \ chance for spurious SYN or\n   SYN/ACK retransmission, thus unnecessarily penalizing\
    \ connections\n   with RTT > 1 second if their initial window is reduced to 1\
    \ segment.\n   For this reason, it is RECOMMENDED that implementations refrain\
    \ from\n   resetting the initial window to 1 segment, unless there have been\n\
    \   more than one SYN or SYN/ACK retransmissions or true loss detection\n   has\
    \ been made.\n   TCP implementations use slow start in as many as three different\n\
    \   ways: (1) to start a new connection (the initial window); (2) to\n   restart\
    \ transmission after a long idle period (the restart window);\n   and (3) to restart\
    \ transmission after a retransmit timeout (the loss\n   window).  The change specified\
    \ in this document affects the value of\n   the initial window.  Optionally, a\
    \ TCP MAY set the restart window to\n   the minimum of the value used for the\
    \ initial window and the current\n   value of cwnd (in other words, using a larger\
    \ value for the restart\n   window should never increase the size of cwnd).  These\
    \ changes do NOT\n   change the loss window, which must remain 1 segment of MSS\
    \ bytes (to\n   permit the lowest possible window size in the case of severe\n\
    \   congestion).\n   Furthermore, to limit any negative effect that a larger initial\n\
    \   window may have on links with limited bandwidth or buffer space,\n   implementations\
    \ SHOULD fall back to RFC 3390 for the restart window\n   (RW) if any packet loss\
    \ is detected during either the initial window\n   or a restart window, and more\
    \ than 4 KB of data is sent.\n   Implementations must also follow RFC 6298 [RFC6298]\
    \ in order to avoid\n   spurious RTO as described in Section 9.\n"
- title: 3.  Implementation Issues
  contents:
  - "3.  Implementation Issues\n   The HTTP 1.1 specification allows only two simultaneous\
    \ connections\n   per domain, while web browsers open more simultaneous TCP connections\n\
    \   [Ste08], partly to circumvent the small initial window in order to\n   speed\
    \ up the loading of web pages as described above.\n   When web browsers open simultaneous\
    \ TCP connections to the same\n   destination, they are working against TCP's\
    \ congestion control\n   mechanisms [FF99].  Combining this behavior with larger\
    \ initial\n   windows further increases the burstiness and unfairness to other\n\
    \   traffic in the network.  If a larger initial window causes harm to\n   any\
    \ other flows, then local application tuning will reveal that\n   having fewer\
    \ concurrent connections yields better performance for\n   some users.  Any content\
    \ provider deploying IW10 in conjunction with\n   content distributed across multiple\
    \ domains is explicitly encouraged\n   to perform measurement experiments to detect\
    \ such problems, and to\n   consider reducing the number of concurrent connections\
    \ used to\n   retrieve their content.\n   Some implementations advertise a small\
    \ initial receive window (Table\n   2 in [Duk10]), effectively limiting how much\
    \ window a remote host may\n   use.  In order to realize the full benefit of the\
    \ large initial\n   window, implementations are encouraged to advertise an initial\n\
    \   receive window of at least 10 segments, except for the circumstances\n   where\
    \ a larger initial window is deemed harmful. (See Section 8\n   below.)\n   The\
    \ TCP Selective Acknowledgment (SACK) option [RFC2018] was thought\n   to be required\
    \ in order for the larger initial window to perform\n   well. But measurements\
    \ from both a testbed and live tests showed that\n   IW=10 without the SACK option\
    \ outperforms IW=3 with the SACK option\n   [CW10].\n"
- title: 4.  Background
  contents:
  - "4.  Background\n   The TCP congestion window was introduced as part of the congestion\n\
    \   control algorithm by Van Jacobson in 1988 [Jac88].  The initial value\n  \
    \ of one segment was used as the starting point for newly established\n   connections\
    \ to probe the available bandwidth on the network.\n   Today's Internet is dominated\
    \ by web traffic running on top of short-\n   lived TCP connections [IOR2009].\
    \  The relatively small initial window\n   has become a limiting factor for the\
    \ performance of many web\n   applications.\n   The global Internet has continued\
    \ to grow, both in speed and\n   penetration.  According to the latest report\
    \ from Akamai [AKAM10],\n   the global broadband (> 2 Mbps) adoption has surpassed\
    \ 50%,\n   propelling the average connection speed to reach 1.7 Mbps, while the\n\
    \   narrowband (< 256 Kbps) usage has dropped to 5%.  In contrast, TCP's\n   initial\
    \ window has remained 4 KB for a decade [RFC2414],\n   corresponding to a bandwidth\
    \ utilization of less than 200 Kbps per\n   connection, assuming an RTT of 200\
    \ ms.\n   A large proportion of flows on the Internet are short web\n   transactions\
    \ over TCP and complete before exiting TCP slow start.\n   Speeding up the TCP\
    \ flow startup phase, including circumventing the\n   initial window limit, has\
    \ been an area of active research (see\n   [Sch08] and Section 3.4 of [RFC6077]).\
    \  Numerous proposals exist\n   [LAJW07] [RFC4782] [PRAKS02] [PK98].  Some require\
    \ router support\n   [RFC4782] [PK98], hence are not practical for the public\
    \ Internet.\n   Others suggested bold, but often radical ideas, likely requiring\
    \ more\n   years of research before standardization and deployment.\n   In the\
    \ mean time, applications have responded to TCP's \"slow\" start.\n   Web sites\
    \ use multiple subdomains [Bel10] to circumvent HTTP 1.1\n   regulation on two\
    \ connections per physical host [RFC2616].  As of\n   today, major web browsers\
    \ open multiple connections to the same site\n   (up to six connections per domain\
    \ [Ste08] and the number is growing).\n   This trend is to remedy HTTP serialized\
    \ download to achieve\n   parallelism and higher performance.  But it also implies\
    \ that today\n   most access links are severely under-utilized, hence having multiple\n\
    \   TCP connections improves performance most of the time.  While raising\n  \
    \ the initial congestion window may cause congestion for certain users\n   of\
    \ these browsers, we argue that the browsers and other application\n   need to\
    \ respect HTTP 1.1 regulation and stop increasing the number of\n   simultaneous\
    \ TCP connections.  We believe a modest increase of the\n   initial window will\
    \ help to stop this trend and provide the best\n   interim solution to improve\
    \ overall user performance and reduce the\n   server, client, and network load.\n\
    \   Note that persistent connections and pipelining are designed to\n   address\
    \ some of the above issues with HTTP [RFC2616].  Their presence\n   does not diminish\
    \ the need for a larger initial window, e.g., data\n   from the Chrome browser\
    \ shows that 35% of HTTP requests are made on\n   new TCP connections.  Our test\
    \ data also shows significant latency\n   reduction with the large initial window\
    \ even in conjunction with\n   these two HTTP features [Duk10].\n   Also note\
    \ that packet pacing has been suggested as a possible\n   mechanism to avoid large\
    \ bursts and their associated harm [VH97].\n   Pacing is not required in this\
    \ proposal due to a strong preference\n   for a simple solution.  We suspect for\
    \ packet bursts of a moderate\n   size, packet pacing will not be necessary. \
    \ This seems to be\n   confirmed by our test results.\n   More discussion of the\
    \ increase in initial window, including the\n   choice of 10 segments, can be\
    \ found in [Duk10] and [CD10].\n"
- title: 5.  Advantages of Larger Initial Windows
  contents:
  - '5.  Advantages of Larger Initial Windows

    '
- title: 5.1 Reducing Latency
  contents:
  - "5.1 Reducing Latency\n   An increase of the initial window from 3 segments to\
    \ 10 segments\n   reduces the total transfer time for data sets greater than 4\
    \ KB by up\n   to 4 round trips.\n   The table below compares the number of round\
    \ trips between IW=3 and\n   IW=10 for different transfer sizes, assuming infinite\
    \ bandwidth, no\n   packet loss, and the standard delayed ACKs with large delayed-ACK\n\
    \   timer.\n            ---------------------------------------\n           |\
    \ total segments |   IW=3   |   IW=10   |\n            ---------------------------------------\n\
    \           |         3      |     1    |      1    |\n           |         6\
    \      |     2    |      1    |\n           |        10      |     3    |    \
    \  1    |\n           |        12      |     3    |      2    |\n           |\
    \        21      |     4    |      2    |\n           |        25      |     5\
    \    |      2    |\n           |        33      |     5    |      3    |\n   \
    \        |        46      |     6    |      3    |\n           |        51   \
    \   |     6    |      4    |\n           |        78      |     7    |      4\
    \    |\n           |        79      |     8    |      4    |\n           |   \
    \    120      |     8    |      5    |\n           |       127      |     9  \
    \  |      5    |\n            ---------------------------------------\n   For\
    \ example, with the larger initial window, a transfer of 32\n   segments of data\
    \ will require only 2 rather than 5 round trips to\n   complete.\n"
- title: 5.2.  Keeping Up with the Growth of Web Object Size
  contents:
  - "5.2.  Keeping Up with the Growth of Web Object Size\n   RFC 3390 stated that\
    \ the main motivation for increasing the initial\n   window to 4 KB was to speed\
    \ up connections that only transmit a small\n   amount of data, e.g., email and\
    \ web.  The majority of transfers back\n   then were less than 4 KB and could\
    \ be completed in a single RTT\n   [All00].\n   Since RFC 3390 was published,\
    \ web objects have gotten significantly\n   larger [Chu09] [RJ10].  Today only\
    \ a small percentage of web objects\n   (e.g., 10% of Google's search responses)\
    \ can fit in the 4 KB initial\n   window.  The average HTTP response size of gmail.com,\
    \ a highly\n   scripted web site, is 8 KB (Figure 1 in [Duk10]).  The average\
    \ web\n   page, including all static and dynamic scripted web objects on the\n\
    \   page, has seen even greater growth in size [RJ10].  HTTP pipelining\n   [RFC2616]\
    \ and new web transport protocols such as SPDY [SPDY] allow\n   multiple web objects\
    \ to be sent in a single transaction, potentially\n   benefiting from an even\
    \ larger initial window in order to transfer an\n   entire web page in a small\
    \ number of round trips.\n"
- title: 5.3.  Recovering Faster from Loss on Under-Utilized or Wireless Links
  contents:
  - "5.3.  Recovering Faster from Loss on Under-Utilized or Wireless Links\n   A greater-than-3-segment\
    \ initial window increases the chance to\n   recover packet loss through Fast\
    \ Retransmit rather than the lengthy\n   initial RTO [RFC5681].  This is because\
    \ the fast retransmit algorithm\n   requires three duplicate ACKs as an indication\
    \ that a segment has\n   been lost rather than reordered.  While newer loss recovery\n\
    \   techniques such as Limited Transmit [RFC3042] and Early Retransmit\n   [RFC5827]\
    \ have been proposed to help speeding up loss recovery from a\n   smaller window,\
    \ both algorithms can still benefit from the larger\n   initial window because\
    \ of a better chance to receive more ACKs.\n"
- title: 6.  Disadvantages of Larger Initial Windows for the Individual
  contents:
  - "6.  Disadvantages of Larger Initial Windows for the Individual\n    Connection\n\
    \   The larger bursts from an increase in the initial window may cause\n   buffer\
    \ overrun and packet drop in routers with small buffers, or\n   routers experiencing\
    \ congestion.  This could result in unnecessary\n   retransmit timeouts.  For\
    \ a large-window connection that is able to\n   recover without a retransmit timeout,\
    \ this could result in an\n   unnecessarily early transition from the slow-start\
    \ to the congestion-\n   avoidance phase of the window increase algorithm.\n \
    \  Premature segment drops are unlikely to occur in uncongested networks\n   with\
    \ sufficient buffering, or in moderately congested networks where\n   the congested\
    \ router uses active queue management (such as Random\n   Early Detection [FJ93]\
    \ [RFC2309] [RFC3150]).\n   Insufficient buffering is more likely to exist in\
    \ the access routers\n   connecting slower links.  A recent study of access router\
    \ buffer size\n   [DGHS07] reveals the majority of access routers provision enough\n\
    \   buffer for 130 ms or longer, sufficient to cover a burst of more than\n  \
    \ 10 packets at 1 Mbps speed, but possibly not sufficient for browsers\n   opening\
    \ simultaneous connections.\n   A testbed study [CW10] on the effect of the larger\
    \ initial window\n   with five simultaneously opened connections revealed that,\
    \ even with\n   limited buffer size on slow links, IW=10 still reduced the total\n\
    \   latency of web transactions, although at the cost of higher packet\n   drop\
    \ rates as compared to IW=3.\n   Some TCP connections will receive better performance\
    \ with the larger\n   initial window, even if the burstiness of the initial window\
    \ results\n   in premature segment drops.  This will be true if (1) the TCP\n\
    \   connection recovers from the segment drop without a retransmit\n   timeout,\
    \ and (2) the TCP connection is ultimately limited to a small\n   congestion window\
    \ by either network congestion or by the receiver's\n   advertised window.\n"
- title: 7.  Disadvantages of Larger Initial Windows for the Network
  contents:
  - "7.  Disadvantages of Larger Initial Windows for the Network\n   An increase in\
    \ the initial window may increase congestion in a\n   network.  However, since\
    \ the increase is one time only (at the\n   beginning of a connection), and the\
    \ rest of TCP's congestion backoff\n   mechanism remains in place, it's unlikely\
    \ the increase by itself will\n   render a network in a persistent state of congestion,\
    \ or even\n   congestion collapse.  This seems to have been confirmed by the large-\n\
    \   scale web experiments described later.\n   It should be noted that the above\
    \ may not hold if applications open a\n   large number of simultaneous connections.\n\
    \   Until this proposal is widely deployed, a fairness issue may exist\n   between\
    \ flows adopting a larger initial window vs. flows that are\n   compliant with\
    \ RFC 3390.  Although no severe unfairness has been\n   detected on all the known\
    \ tests so far, further study on this topic\n   may be warranted.\n   Some of\
    \ the discussions from RFC 3390 are still valid for IW=10.\n   Moreover, it is\
    \ worth noting that although TCP NewReno increases the\n   chance of duplicate\
    \ segments when trying to recover multiple packet\n   losses from a large window,\
    \ the wide support of the TCP Selective\n   Acknowledgment (SACK) option [RFC2018]\
    \ in all major OSes today should\n   keep the volume of duplicate segments in\
    \ check.\n   Recent measurements [Get11] provide evidence of extremely large\n\
    \   queues (in the order of one second or more) at access networks of the\n  \
    \ Internet.  While a significant part of the buffer bloat is\n   contributed by\
    \ large downloads/uploads such as video files, emails\n   with large attachments,\
    \ backups and download of movies to disk, some\n   of the problem is also caused\
    \ by web browsing of image-heavy sites\n   [Get11].  This queuing delay is generally\
    \ considered harmful for\n   responsiveness of latency-sensitive traffic such\
    \ as DNS queries,\n   Address Resolution Protocol (ARP), DHCP, Voice over IP (VoIP),\
    \ and\n   gaming.  IW=10 can exacerbate this problem when doing short\n   downloads,\
    \ such as web browsing [Get11-1].  The mitigations proposed\n   for the broader\
    \ problem of buffer bloating are also applicable in\n   this case, such as the\
    \ use of Explicit Congestion Notification (ECN),\n   Active Queue Management (AQM)\
    \ schemes [CoDel], and traffic\n   classification (QoS).\n"
- title: 8.  Mitigation of Negative Impact
  contents:
  - "8.  Mitigation of Negative Impact\n   Much of the negative impact from an increase\
    \ in the initial window is\n   likely to be felt by users behind slow links with\
    \ limited buffers.\n   The negative impact can be mitigated by hosts directly\
    \ connected to a\n   low-speed link advertising an initial receive window smaller\
    \ than 10\n   segments.  This can be achieved either through manual configuration\n\
    \   by the users or through the host stack auto-detecting the low-\n   bandwidth\
    \ links.\n   Additional suggestions to improve the end-to-end performance of slow\n\
    \   links can be found in RFC 3150 [RFC3150].\n"
- title: 9.  Interactions with the Retransmission Timer
  contents:
  - "9.  Interactions with the Retransmission Timer\n   A large initial window increases\
    \ the chance of spurious RTO on a low-\n   bandwidth path, because the packet\
    \ transmission time will dominate\n   the round-trip time.  To minimize spurious\
    \ retransmissions,\n   implementations MUST follow RFC 6298 [RFC6298] to restart\
    \ the\n   retransmission timer with the current value of RTO for each ACK\n  \
    \ received that acknowledges new data.\n   For a more detailed discussion, see\
    \ RFC 3390, Section 6.\n"
- title: 10.  Experimental Results From Large-Scale Cluster Tests
  contents:
  - "10.  Experimental Results From Large-Scale Cluster Tests\n   In this section,\
    \ we summarize our findings from large-scale Internet\n   experiments with an\
    \ initial window of 10 segments conducted via\n   Google's front-end infrastructure\
    \ serving a diverse set of\n   applications.  We present results from two data\
    \ centers, each chosen\n   because of the specific characteristics of subnets\
    \ served: AvgDC has\n   connection bandwidths closer to the worldwide average\
    \ reported in\n   [AKAM10], with a median connection speed of about 1.7 Mbps;\
    \ SlowDC\n   has a larger proportion of traffic from slow-bandwidth subnets with\n\
    \   nearly 20% of traffic from connections below 100 Kbps; and a third\n   was\
    \ below 256 Kbps.\n   Guided by measurements data, we answer two key questions:\
    \ what is the\n   latency benefit when TCP connections start with a higher initial\n\
    \   window, and on the flip side, what is the cost?\n"
- title: 10.1.  The Benefits
  contents:
  - "10.1.  The Benefits\n   The average web search latency improvement over all responses\
    \ in\n   AvgDC is 11.7% (68 ms) and 8.7% (72 ms) in SlowDC.  We further\n   analyzed\
    \ the data based on traffic characteristics and subnet\n   properties such as\
    \ bandwidth (BW), round-trip time (RTT), and\n   bandwidth-delay product (BDP).\
    \  The average response latency improved\n   across the board for a variety of\
    \ subnets with the largest benefits\n   of over 20% from high RTT and high BDP\
    \ networks, wherein most\n   responses can fit within the pipe.  Correspondingly,\
    \ responses from\n   low RTT paths experienced the smallest improvements -- about\
    \ 5%.\n   Contrary to what we expected, responses from low-bandwidth subnets\n\
    \   experienced the best latency improvements (between 10-20%) in the\n   0-56\
    \ Kbps and 56-256 Kbps buckets.  We speculate low-BW networks\n   observe improved\
    \ latency for two plausible reasons: 1) fewer slow-\n   start rounds: unlike many\
    \ large-BW networks, low-BW subnets with\n   dial-up modems have inherently large\
    \ RTTs; and 2) faster loss\n   recovery: an initial window larger than 3 segments\
    \ increases the\n   chances of a lost packet to be recovered through Fast Retransmit\
    \ as\n   opposed to a lengthy RTO.\n   Responses of different sizes benefited\
    \ to varying degrees; those\n   larger than 3 segments naturally demonstrated\
    \ larger improvements,\n   because they finished in fewer rounds in slow start\
    \ as compared to\n   the baseline.  In our experiments, response sizes less than\
    \ or equal\n   to 3 segments also demonstrated small latency benefits.\n   To\
    \ find out how individual subnets performed, we analyzed average\n   latency at\
    \ a /24 subnet level (an approximation to a user base that\n   is offered similar\
    \ set of services by a common ISP).  We find that,\n   even at the subnet granularity,\
    \ latency improved at all quantiles\n   ranging from 5-11%.\n"
- title: 10.2.  The Cost
  contents:
  - "10.2.  The Cost\n   To quantify the cost of raising the initial window, we analyzed\
    \ the\n   data specifically for subnets with low bandwidth and BDP,\n   retransmission\
    \ rates for different kinds of applications, as well as\n   latency for applications\
    \ operating with multiple concurrent TCP\n   connections.  From our measurements,\
    \ we found no evidence of negative\n   latency impacts that correlate to BW or\
    \ BDP alone, but in fact both\n   kinds of subnets demonstrated latency improvements\
    \ across averages\n   and quantiles.\n   As expected, the retransmission rate\
    \ increased modestly when\n   operating with larger initial congestion window.\
    \  The overall\n   increase in AvgDC is 0.3% (from 1.98% to 2.29%) and in SlowDC\
    \ is 0.7%\n   (from 3.54% to 4.21%).  In our investigation, with the exception\
    \ of\n   one application, the larger window resulted in a retransmission\n   increase\
    \ of less than 0.5% for services in the AvgDC.  The exception\n   is the Maps\
    \ application that operates with multiple concurrent TCP\n   connections, which\
    \ increased its retransmission rate by 0.9% in AvgDC\n   and 1.85% in SlowDC (from\
    \ 3.94% to 5.79%).\n   In our experiments, the percentage of traffic experiencing\n\
    \   retransmissions did not increase significantly, e.g., 90% of web\n   search\
    \ and maps experienced zero retransmission in SlowDC\n   (percentages are higher\
    \ for AvgDC); a break up of retransmissions by\n   percentiles indicate that most\
    \ increases come from the portion of\n   traffic already experiencing retransmissions\
    \ in the baseline with\n   initial window of 3 segments.\n   One of the worst-case\
    \ scenarios where latency can be adversely\n   impacted due to bottleneck buffer\
    \ overflow is represented by traffic\n   patterns from applications using multiple\
    \ concurrent TCP connections,\n   all operating with a large initial window. \
    \ Our investigation shows\n   that such a traffic pattern has not been a problem\
    \ in AvgDC where all\n   these applications, specifically maps and image thumbnails,\n\
    \   demonstrated improved latencies varying from 2-20%.  In the case of\n   SlowDC,\
    \ while these applications continued showing a latency\n   improvement in the\
    \ mean, their latencies in higher quantiles (96 and\n   above for maps) indicated\
    \ instances where latency with larger window\n   is worse than the baseline, e.g.,\
    \ the 99% latency for maps has\n   increased by 2.3% (80 ms) when compared to\
    \ the baseline.  There is no\n   evidence from our measurements that such a cost\
    \ on latency is a\n   result of subnet bandwidth alone.  Although we have no way\
    \ of knowing\n   from our data, we conjecture that the amount of buffering at\n\
    \   bottleneck links plays a key role in the performance of these\n   applications.\n\
    \   Further details on our experiments and analysis can be found in\n   [Duk10]\
    \ and [DCCM10].\n"
- title: 11.  Other Studies
  contents:
  - "11.  Other Studies\n   Besides the large-scale Internet experiments described\
    \ above, a\n   number of other studies have been conducted on the effects of IW10\
    \ in\n   various environments.  These tests were summarized below, with more\n\
    \   discussion in Appendix A.\n   A complete list of tests conducted, with their\
    \ results and related\n   studies, can be found at the [IW10] link.\n   1. [Sch08]\
    \ described an earlier evaluation of various Fast Startup\n      approaches, including\
    \ the \"Initial-Start\" of 10 MSS.\n   2. [DCCM10] presented the result from Google's\
    \ large-scale IW10\n      experiments, with a focus on areas with highly multiplexed\
    \ links\n      or limited broadband deployment such as Africa and South America.\n\
    \   3. [CW10] contained a testbed study on IW10 performance over slow\n      links.\
    \  It also studied how short flows with a larger initial\n      window might affect\
    \ the throughput performance of other\n      coexisting, long-lived, bulk data\
    \ transfers.\n   4. [Sch11] compared IW10 against a number of other fast startup\n\
    \      schemes, and concluded that IW10 works rather well and is also\n      quite\
    \ fair.\n   5. [JNDK10] and later [JNDK10-1] studied the effect of IW10 over\n\
    \      cellular networks.\n   6. [AERG11] studied the effect of larger sizes of\
    \ initial congestion\n      windows, among other things, on end users' page load\
    \ time from\n      Yahoo!'s Content Delivery Network.\n"
- title: 12.  Usage and Deployment Recommendations
  contents:
  - "12.  Usage and Deployment Recommendations\n   Further experiments are required\
    \ before a larger initial window shall\n   be enabled by default in the Internet.\
    \  The existing measurement\n   results indicate that this does not cause significant\
    \ harm to other\n   traffic.  However, widespread use in the Internet could reveal\
    \ issues\n   not known yet, e.g., regarding fairness or impact on latency-\n \
    \  sensitive traffic such as VoIP.\n   Therefore, special care is needed when\
    \ using this experimental TCP\n   extension, in particular on large-scale systems\
    \ originating a\n   significant amount of Internet traffic or on large numbers\
    \ of\n   individual consumer-level systems that have similar aggregate impact.\n\
    \   Anyone (stack vendors, network administrators, etc.) turning on a\n   larger\
    \ initial window SHOULD ensure that the performance is monitored\n   before and\
    \ after that change.  Key metrics to monitor are the rate of\n   packet losses,\
    \ ECN marking, and segment retransmissions during the\n   initial burst.  The\
    \ sender SHOULD cache such information about\n   connection setups using an initial\
    \ window larger than allowed by RFC\n   3390, and new connections SHOULD fall\
    \ back to the initial window\n   allowed by RFC 3390 if there is evidence of performance\
    \ issues.\n   Further experiments are needed on the design of such a cache and\n\
    \   corresponding heuristics.\n   Other relevant metrics that may indicate a need\
    \ to reduce the IW\n   include an increased overall percentage of packet loss\
    \ or segment\n   retransmissions as well as application-level metrics such as\
    \ reduced\n   data transfer completion times or impaired media quality.\n   It\
    \ is important also to take into account hosts that do not implement\n   a larger\
    \ initial window.  Furthermore, any deployment of IW10 should\n   be aware that\
    \ there are potential side effects to real-time traffic\n   (such as VoIP).  If\
    \ users observe any significant deterioration of\n   performance, they SHOULD\
    \ fall back to an initial window as allowed by\n   RFC 3390 for safety reasons.\
    \  An increased initial window MUST NOT be\n   turned on by default on systems\
    \ without such monitoring capabilities.\n   The IETF TCPM working group is very\
    \ much interested in further\n   reports from experiments with this specification\
    \ and encourages the\n   publication of such measurement data.  By now, there\
    \ are no adequate\n   studies available that either prove or do not prove the\
    \ impact of\n   IW10 to real-time traffic.  Further experimentation in this direction\n\
    \   is encouraged.\n   If no significant harm is reported, a follow-up document\
    \ may revisit\n   the question on whether a larger initial window can be safely\
    \ used by\n   default in all Internet hosts.  Resolution of these experiments\
    \ and\n   tighter specifications of the suggestions here might be grounds for\
    \ a\n   future Standards Track document on the same topic.\n   It is recognized\
    \ that if IW10 is causing harm to other traffic, that\n   this may not be readily\
    \ apparent to the software on the hosts using\n   IW10.  In some cases, a local\
    \ system or network administrator may be\n   able to detect this and to selectively\
    \ disable IW10.  In the general\n   case, however, since the harm may occur on\
    \ a remote network to other\n   cross-traffic, there may be no good way at all\
    \ for this to be\n   detected or corrected.  Current experience and analysis does\
    \ not\n   indicate whether this is a real issue, beyond a hypothetical one.  As\n\
    \   use of IW10 becomes more prevalent, monitoring and analysis of flows\n   throughout\
    \ the network will be needed to assess the impact across the\n   spectrum of scenarios\
    \ found on the real Internet.\n"
- title: 13.  Related Proposals
  contents:
  - "13.  Related Proposals\n   Two other proposals [All10] [Tou12] have been published\
    \ to raise\n   TCP's initial window size over a large timescale.  Both aim at\n\
    \   reducing the uncertain impact of a larger initial window at an\n   Internet-wide\
    \ scale.  Moreover, [Tou12] seeks an algorithm to\n   automate the adjustment\
    \ of IW safely over a long period.\n   Although a modest, static increase of IW\
    \ to 10 may address the near-\n   term need for better web performance, much work\
    \ is needed from the\n   TCP research community to find a long-term solution to\
    \ the TCP flow\n   startup problem.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   This document discusses the initial congestion\
    \ window permitted for\n   TCP connections.  Although changing this value may\
    \ cause more packet\n   loss, it is highly unlikely to lead to a persistent state\
    \ of network\n   congestion or even a congestion collapse.  Hence, it does not\
    \ raise\n   any known new security issues with TCP.\n"
- title: 15.  Conclusion
  contents:
  - "15.  Conclusion\n   This document suggests a simple change to TCP that will reduce\
    \ the\n   application latency over short-lived TCP connections or links with\n\
    \   long RTTs (saving several RTTs during the initial slow-start phase)\n   with\
    \ little or no negative impact over other flows.  Extensive tests\n   have been\
    \ conducted through both testbeds and large data centers with\n   most results\
    \ showing improved latency with only a small increase in\n   the packet retransmission\
    \ rate.  Based on these results, we believe a\n   modest increase of IW to 10\
    \ is the best solution for the near-term\n   deployment, while scaling IW over\
    \ the long run remains a challenge\n   for the TCP research community.\n"
- title: 16.  Acknowledgments
  contents:
  - "16.  Acknowledgments\n   Many people at Google have helped to make the set of\
    \ large-scale\n   tests possible.  We would especially like to acknowledge Amit\n\
    \   Agarwal, Tom Herbert, Arvind Jain, and Tiziana Refice for their major\n  \
    \ contributions.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [RFC2018]  Mathis, M., Mahdavi, J., Floyd, S.,\
    \ and A. Romanow, \"TCP\n              Selective Acknowledgment Options\", RFC\
    \ 2018, October 1996.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n           \
    \   Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3390]  Allman, M., Floyd,\
    \ S., and C. Partridge, \"Increasing TCP's\n              Initial Window\", RFC\
    \ 3390, October 2002.\n   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"\
    TCP Congestion\n              Control\", RFC 5681, September 2009.\n   [RFC5827]\
    \  Allman, M., Avrachenkov, K., Ayesta, U., Blanton, J., and\n              P.\
    \ Hurtig, \"Early Retransmit for TCP and Stream Control\n              Transmission\
    \ Protocol (SCTP)\", RFC 5827, May 2010.\n   [RFC6298]  Paxson, V., Allman, M.,\
    \ Chu, J., and M. Sargent,\n              \"Computing TCP's Retransmission Timer\"\
    , RFC 6298, June\n              2011.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [AKAM10]   Akamai Technologies, Inc., \"The\
    \ State of the Internet, 3rd\n              Quarter 2009\", January 2010, <http://www.akamai.com/html/\n\
    \              about/press/releases/2010/press_011310_1.html>.\n   [AERG11]  \
    \ Al-Fares, M., Elmeleegy, K., Reed, B., and I. Gashinsky,\n              \"Overclocking\
    \ the Yahoo! CDN for Faster Web Page Loads\",\n              Internet Measurement\
    \ Conference, November 2011.\n   [All00]    Allman, M., \"A Web Server's View\
    \ of the Transport Layer\",\n              ACM Computer Communication Review,\
    \ 30(5), October 2000.\n   [All10]    Allman, M., \"Initial Congestion Window\
    \ Specification\",\n              Work in Progress, November 2010.\n   [Bel10]\
    \    Belshe, M., \"A Client-Side Argument For Changing TCP Slow\n            \
    \  Start\", January 2010,\n              <http://sites.google.com/a/chromium.org/dev/spdy/\n\
    \              An_Argument_For_Changing_TCP_Slow_Start.pdf>.\n   [CD10]     Chu,\
    \ J. and N. Dukkipati, \"Increasing TCP's Initial\n              Window\", presented\
    \ to the IRTF ICCRG and IETF TCPM working\n              group meetings, IETF\
    \ 77, March 2010, <http://www.ietf.org/\n              proceedings/77/slides/tcpm-4.pdf>.\n\
    \   [Chu09]    Chu, J., \"Tuning TCP Parameters for the 21st Century\",\n    \
    \          presented to TCPM working group meeting, IETF 75, July\n          \
    \    2009. <http://www.ietf.org/proceedings/75/slides/tcpm-1>.\n   [CoDel]   \
    \ Nichols, K. and V. Jacobson, \"Controlling Queue Delay\",\n              ACM\
    \ QUEUE, May 6, 2012.\n   [CW10]     Chu, J. and Wang, Y., \"A Testbed Study on\
    \ IW10 vs IW3\",\n              presented to the TCPM working group meeting, IETF\
    \ 79,\n              November 2010,\n              <http://www.ietf.org/proceedings/79/slides/tcpm-0>.\n\
    \   [DCCM10]   Dukkipati, D., Cheng, Y., Chu, J., and M. Mathis,\n           \
    \   \"Increasing TCP initial window\", presented to the IRTF\n              ICCRG\
    \ meeting, IETF 78, July 2010,\n              <http://www.ietf.org/proceedings/78/slides/iccrg-3.pdf>.\n\
    \   [DGHS07]   Dischinger, M., Gummadi, K., Haeberlen, A., and S. Saroiu,\n  \
    \            \"Characterizing Residential Broadband Networks\", Internet\n   \
    \           Measurement Conference, October 24-26, 2007.\n   [Duk10]    Dukkipati,\
    \ N., Refice, T., Cheng, Y., Chu, J., Sutin, N.,\n              Agarwal, A., Herbert,\
    \ T., and J. Arvind, \"An Argument for\n              Increasing TCP's Initial\
    \ Congestion Window\", ACM SIGCOMM\n              Computer Communications Review,\
    \ vol. 40 (2010), pp. 27-33.\n              July 2010.\n   [FF99]     Floyd, S.,\
    \ and K. Fall, \"Promoting the Use of End-to-End\n              Congestion Control\
    \ in the Internet\", IEEE/ACM Transactions\n              on Networking, August\
    \ 1999.\n   [FJ93]     Floyd, S. and V. Jacobson, \"Random Early Detection\n \
    \             gateways for Congestion Avoidance\", IEEE/ACM Transactions\n   \
    \           on Networking, V.1 N.4, August 1993, p. 397-413.\n   [Get11]    Gettys,\
    \ J., \"Bufferbloat: Dark buffers in the Internet\",\n              presented\
    \ to the TSV Area meeting, IETF 80, March 2011,\n              <http://www.ietf.org/proceedings/80/slides/tsvarea-1.pdf>.\n\
    \   [Get11-1]  Gettys, J., \"IW10 Considered Harmful\", Work in Progress,\n  \
    \            August 2011.\n   [IOR2009]  Labovitz, C., Iekel-Johnson, S., McPherson,\
    \ D., Oberheide,\n              J. Jahanian, F., and M. Karir, \"Atlas Internet\
    \ Observatory\n              2009 Annual Report\", 47th NANOG Conference, October\
    \ 2009.\n   [IW10]    \"TCP IW10 links\", January 2012,\n              <http://code.google.com/speed/protocols/tcpm-IW10.html>.\n\
    \   [Jac88]    Jacobson, V., \"Congestion Avoidance and Control\", Computer\n\
    \              Communication Review, vol. 18, no. 4, pp. 314-329, Aug.\n     \
    \         1988.\n   [JNDK10]   Jarvinen, I., Nyrhinen. A., Ding, A., and M. Kojo,\
    \ \"A\n              Simulation Study on Increasing TCP's IW\", presented to the\n\
    \              IRTF ICCRG meeting, IETF 78, July 2010,\n              <http://www.ietf.org/proceedings/78/slides/iccrg-7.pdf>.\n\
    \   [JNDK10-1] Jarvinen, I., Nyrhinen. A., Ding, A., and M. Kojo, \"Effect\n \
    \             of IW and Initial RTO changes\", presented to the TCPM\n       \
    \       working group meeting, IETF 79, November 2010,\n              <http://www.ietf.org/proceedings/79/slides/tcpm-1.pdf>.\n\
    \   [LAJW07]   Liu, D., Allman, M., Jin, S., and L. Wang, \"Congestion\n     \
    \         Control Without a Startup Phase\", Protocols for Fast, Long\n      \
    \        Distance Networks (PFLDnet) Workshop, February 2007,\n              <http://www.icir.org/mallman/papers/\n\
    \              jumpstart-pfldnet07.pdf>.\n   [PK98]     Padmanabhan V.N. and R.\
    \ Katz, \"TCP Fast Start: A technique\n              for speeding up web transfers\"\
    , in Proceedings of IEEE\n              Globecom '98 Internet Mini-Conference,\
    \ 1998.\n   [PRAKS02]  Partridge, C., Rockwell, D., Allman, M., Krishnan, R.,\
    \ and\n              J. Sterbenz, \"A Swifter Start for TCP\", Technical Report\n\
    \              No. 8339, BBN Technologies, March 2002.\n   [RFC2309]  Braden,\
    \ B., Clark, D., Crowcroft, J., Davie, B., Deering,\n              S., Estrin,\
    \ D., Floyd, S., Jacobson, V., Minshall, G.,\n              Partridge, C., Peterson,\
    \ L., Ramakrishnan, K., Shenker,\n              S., Wroclawski, J., and L. Zhang,\
    \ \"Recommendations on\n              Queue Management and Congestion Avoidance\
    \ in the\n              Internet\", RFC 2309, April 1998.\n   [RFC2414]  Allman,\
    \ M., Floyd, S., and C. Partridge, \"Increasing TCP's\n              Initial Window\"\
    , RFC 2414, September 1998.\n   [RFC3042]  Allman, M., Balakrishnan, H., and S.\
    \ Floyd, \"Enhancing\n              TCP's Loss Recovery Using Limited Transmit\"\
    , RFC 3042,\n              January 2001.\n   [RFC3150]  Dawkins, S., Montenegro,\
    \ G., Kojo, M., and V. Magret,\n              \"End-to-end Performance Implications\
    \ of Slow Links\", BCP\n              48, RFC 3150, July 2001.\n   [RFC4782] \
    \ Floyd, S., Allman, M., Jain, A., and P. Sarolahti, \"Quick-\n              Start\
    \ for TCP and IP\", RFC 4782, January 2007.\n   [RFC6077]  Papadimitriou, D.,\
    \ Ed., Welzl, M., Scharf, M., and B.\n              Briscoe, \"Open Research Issues\
    \ in Internet Congestion\n              Control\", RFC 6077, February 2011.\n\
    \   [RJ10]     Ramachandran, S. and A. Jain, \"Aggregate Statistics of\n     \
    \         Size Related Metrics of Web Pages metrics\", May 2010,\n           \
    \   <http://code.google.com/speed/articles/web-metrics.html>.\n   [Sch08]    Scharf,\
    \ M., \"Quick-Start, Jump-Start, and Other Fast\n              Startup Approaches\"\
    , presented to the IRTF ICCRG meeting,\n              IETF 73, November 2008,\n\
    \              <http://www.ietf.org/proceedings/73/slides/iccrg-2.pdf>.\n   [Sch11]\
    \    Scharf, M., \"Performance and Fairness Evaluation of IW10\n             \
    \ and Other Fast Startup Schemes\", presented to the IRTF\n              ICCRG\
    \ meeting, IETF 80, March 2011,\n              <http://www.ietf.org/proceedings/80/slides/iccrg-1.pdf>.\n\
    \   [Sch11-1]  Scharf, M., \"Comparison of end-to-end and network-\n         \
    \     supported fast startup congestion control schemes\",\n              Computer\
    \ Networks, Feb. 2011,\n              <http://dx.doi.org/10.1016/j.comnet.2011.02.002>.\n\
    \   [SPDY]    \"SPDY: An experimental protocol for a faster web\",\n         \
    \     <http://dev.chromium.org/spdy>.\n   [Ste08]    Sounders S., \"Roundup on\
    \ Parallel Connections\", High\n              Performance Web Sites blog, March\
    \ 2008,\n              <http://www.stevesouders.com/blog/2008/03/20/\n       \
    \       roundup-on-parallel-connections>.\n   [Tou12]    Touch, J., \"Automating\
    \ the Initial Window in TCP\", Work in\n              Progress, July 2012.\n \
    \  [VH97]     Visweswaraiah, V. and J. Heidemann, \"Improving Restart of\n   \
    \           Idle TCP Connections\", Technical Report 97-661, University\n    \
    \          of Southern California, November 1997.\n"
- title: Appendix A.  List of Concerns and Corresponding Test Results
  contents:
  - "Appendix A.  List of Concerns and Corresponding Test Results\n   Concerns have\
    \ been raised since the initial draft of this document\n   was posted, based on\
    \ a set of large-scale experiments.  To better\n   understand the impact of a\
    \ larger initial window and in order to\n   confirm or dismiss these concerns,\
    \ additional tests have been\n   conducted using either large-scale clusters,\
    \ simulations, or real\n   testbeds.  The following attempts to compile the list\
    \ of concerns and\n   summarize findings from relevant tests.\n   o  How complete\
    \ are various tests in covering many different traffic\n      patterns?\n    \
    \  The large-scale Internet experiments conducted at Google's front-\n      end\
    \ infrastructure covered a large portfolio of services beyond\n      web search.\
    \  It included Gmail, Google Maps, Photos, News, Sites,\n      Images, etc., and\
    \ covered a wide variety of traffic sizes and\n      patterns.  One notable exception\
    \ is YouTube, because we don't\n      think the large initial window will have\
    \ much material impact,\n      either positive or negative, on bulk data services.\n\
    \      [CW10] contains some results from a testbed study on how short\n      flows\
    \ with a larger initial window might affect the throughput\n      performance\
    \ of other coexisting, long-lived, bulk data transfers.\n   o  Larger bursts from\
    \ the increase in the initial window cause\n      significantly more packet drops.\n\
    \      All the tests conducted on this subject ([Duk10] [Sch11] [Sch11-1]\n  \
    \    [CW10]) so far have shown only a modest increase of packet drops.\n     \
    \ The only exception is from the testbed study [CW10] under\n      extremely high\
    \ load and/or simultaneous opens.  But under those\n      conditions, both IW=3\
    \ and IW=10 suffered very high packet loss\n      rates.\n   o  A large initial\
    \ window may severely impact TCP performance over\n      highly multiplexed links\
    \ still common in developing regions.\n      Our large-scale experiments described\
    \ in Section 10 above also\n      covered Africa and South America.  Measurement\
    \ data from those\n      regions [DCCM10] revealed improved latency, even for\
    \ those\n      services that employ multiple simultaneous connections, at the\n\
    \      cost of a small increase in the retransmission rate.  It seems\n      that\
    \ the round-trip savings from a larger initial window more than\n      make up\
    \ the time spent on recovering more lost packets.\n      Similar phenomena have\
    \ also been observed from the testbed study\n      [CW10].\n   o  Why 10 segments?\n\
    \      Questions have been raised on how the number 10 was picked.  We\n     \
    \ have tried different sizes in our large-scale experiments, and\n      found\
    \ that 10 segments seem to give most of the benefits for the\n      services we\
    \ tested while not causing significant increase in the\n      retransmission rates.\
    \  Going forward, 10 segments may turn out to\n      be too small when the average\
    \ of web object sizes continues to\n      grow.  But a scheme to \"right size\"\
    \ the initial window\n      automatically over long timescales has yet to be developed.\n\
    \   o  More thorough analysis of the impact on slow links is needed.\n      Although\
    \ [Duk10] showed the large initial window reduced the\n      average latency even\
    \ for the dialup link class of only 56 Kbps in\n      bandwidth, more studies\
    \ were needed in order to understand the\n      effect of IW10 on slow links at\
    \ the microscopic level.  [CW10] was\n      conducted for this purpose.\n    \
    \  Testbeds in [CW10] emulated a 300 ms RTT, bottleneck link\n      bandwidth\
    \ as low as 64 Kbps, and route queue size as low as 40\n      packets.  A large\
    \ combination of test parameters were used.\n      Almost all tests showed varying\
    \ degrees of latency improvement\n      from IW=10, with only a modest increase\
    \ in the packet drop rate\n      until a very high load was injected.  The testbed\
    \ result was\n      consistent with both the large-scale data center experiments\n\
    \      [CD10] [DCCM10] and a separate study using the Network Simulation\n   \
    \   Cradle (NSC) framework [Sch11] [Sch11-1].\n   o  How will the larger initial\
    \ window affect flows with initial\n      windows of 4 KB or less?\n      Flows\
    \ with the larger initial window will likely grab more\n      bandwidth from a\
    \ bottleneck link when competing against flows with\n      smaller initial windows,\
    \ at least initially.  How long will this\n      \"unfairness\" last?  Will there\
    \ be any \"capture effect\" where flows\n      with larger initial window possess\
    \ a disproportional share of\n      bandwidth beyond just a few round trips?\n\
    \      If there is any \"unfairness\" issue from flows with different\n      initial\
    \ windows, it did not show up in the large-scale\n      experiments, as the average\
    \ latency for the bucket of all\n      responses less than 4 KB did not seem to\
    \ be affected by the\n      presence of many other larger responses employing\
    \ large initial\n      window.  As a matter of fact, they seemed to benefit from\
    \ the\n      large initial window too, as shown in Figure 7 of [Duk10].\n    \
    \  The same phenomenon seems to exist in the testbed experiments\n      [CW10].\
    \  Flows with IW=3 only suffered slightly when competing\n      against flows\
    \ with IW=10 in light to medium loads.  Under high\n      load, both flows' latency\
    \ improved when mixed together.  Also\n      long-lived, background bulk-data\
    \ flows seemed to enjoy higher\n      throughput when running against many foreground\
    \ short flows of\n      IW=10 than against short flows of IW=3.  One plausible\
    \ explanation\n      was that IW=10 enabled short flows to complete sooner, leaving\n\
    \      more room for the long-lived, background flows.\n      A study using an\
    \ NSC simulator has also concluded that IW=10 works\n      rather well and is\
    \ quite fair against IW=3 [Sch11] [Sch11-1].\n   o  How will a larger initial\
    \ window perform over cellular networks?\n      Some simulation studies [JNDK10]\
    \ [JNDK10-1] have been conducted to\n      study the effect of a larger initial\
    \ window on wireless links from\n      2G to 4G networks (EGDE/HSPA/LTE).  The\
    \ overall result seems mixed\n      in both raw performance and the fairness index.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jerry Chu\n   Google, Inc.\n   1600 Amphitheatre Parkway\n\
    \   Mountain View, CA 94043\n   USA\n   EMail: hkchu@google.com\n   Nandita Dukkipati\n\
    \   Google, Inc.\n   1600 Amphitheatre Parkway\n   Mountain View, CA 94043\n \
    \  USA\n   EMail: nanditad@google.com\n   Yuchung Cheng\n   Google, Inc.\n   1600\
    \ Amphitheatre Parkway\n   Mountain View, CA 94043\n   USA\n   EMail: ycheng@google.com\n\
    \   Matt Mathis\n   Google, Inc.\n   1600 Amphitheatre Parkway\n   Mountain View,\
    \ CA 94043\n   USA\n   EMail: mattmathis@google.com\n"
