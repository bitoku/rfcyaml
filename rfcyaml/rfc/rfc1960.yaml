- title: __initial_text__
  contents:
  - '             A String Representation of LDAP Search Filters

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   The Lightweight Directory Access Protocol (LDAP) [1] defines\
    \ a\n   network representation of a search filter transmitted to an LDAP\n   server.\
    \  Some applications may find it useful to have a common way of\n   representing\
    \ these search filters in a human-readable form.  This\n   document defines a\
    \ human-readable string format for representing LDAP\n   search filters.\n"
- title: 2.  LDAP Search Filter Definition
  contents:
  - "2.  LDAP Search Filter Definition\n   An LDAP search filter is defined in [1]\
    \ as follows:\n     Filter ::= CHOICE {\n             and                [0] SET\
    \ OF Filter,\n             or                 [1] SET OF Filter,\n           \
    \  not                [2] Filter,\n             equalityMatch      [3] AttributeValueAssertion,\n\
    \             substrings         [4] SubstringFilter,\n             greaterOrEqual\
    \     [5] AttributeValueAssertion,\n             lessOrEqual        [6] AttributeValueAssertion,\n\
    \             present            [7] AttributeType,\n             approxMatch\
    \        [8] AttributeValueAssertion\n     }\n     SubstringFilter ::= SEQUENCE\
    \ {\n             type    AttributeType,\n             SEQUENCE OF CHOICE {\n\
    \                     initial        [0] LDAPString,\n                     any\
    \            [1] LDAPString,\n                     final          [2] LDAPString\n\
    \             }\n     }\n     AttributeValueAssertion ::= SEQUENCE {\n       \
    \      attributeType   AttributeType,\n             attributeValue  AttributeValue\n\
    \     }\n     AttributeType ::= LDAPString\n     AttributeValue ::= OCTET STRING\n\
    \     LDAPString ::= OCTET STRING\n   where the LDAPString above is limited to\
    \ the IA5 character set.  The\n   AttributeType is a string representation of\
    \ the attribute type name\n   and is defined in [1].  The AttributeValue OCTET\
    \ STRING has the form\n   defined in [2].  The Filter is encoded for transmission\
    \ over a\n   network using the Basic Encoding Rules defined in [3], with\n   simplifications\
    \ described in [1].\n"
- title: 3.  String Search Filter Definition
  contents:
  - "3.  String Search Filter Definition\n   The string representation of an LDAP\
    \ search filter is defined by the\n   following grammar.  It uses a prefix format.\n\
    \     <filter> ::= '(' <filtercomp> ')'\n     <filtercomp> ::= <and> | <or> |\
    \ <not> | <item>\n     <and> ::= '&' <filterlist>\n     <or> ::= '|' <filterlist>\n\
    \     <not> ::= '!' <filter>\n     <filterlist> ::= <filter> | <filter> <filterlist>\n\
    \     <item> ::= <simple> | <present> | <substring>\n     <simple> ::= <attr>\
    \ <filtertype> <value>\n     <filtertype> ::= <equal> | <approx> | <greater> |\
    \ <less>\n     <equal> ::= '='\n     <approx> ::= '~='\n     <greater> ::= '>='\n\
    \     <less> ::= '<='\n     <present> ::= <attr> '=*'\n     <substring> ::= <attr>\
    \ '=' <initial> <any> <final>\n     <initial> ::= NULL | <value>\n     <any> ::=\
    \ '*' <starval>\n     <starval> ::= NULL | <value> '*' <starval>\n     <final>\
    \ ::= NULL | <value>\n   <attr> is a string representing an AttributeType, and\
    \ has the format\n   defined in [1].  <value> is a string representing an AttributeValue,\n\
    \   or part of one, and has the form defined in [2].  If a <value> must\n   contain\
    \ one of the characters '*' or '(' or ')', these characters\n   should be escaped\
    \ by preceding them with the backslash '\\' character.\n   Note that although\
    \ both the <substring> and <present> productions can\n   produce the 'attr=*'\
    \ construct, this construct is used only to denote\n   a presence filter.\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   This section gives a few examples of search filters written\
    \ using\n   this notation.\n     (cn=Babs Jensen)\n     (!(cn=Tim Howes))\n  \
    \   (&(objectClass=Person)(|(sn=Jensen)(cn=Babs J*)))\n     (o=univ*of*mich*)\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations are not discussed in\
    \ this memo.\n"
- title: 6.  Bibliography
  contents:
  - "6.  Bibliography\n   [1] Yeong, W., Howes, T., and S. Kille, \"Lightweight\n\
    \       Directory Access Protocol\", RFC 1777, March 1995.\n   [2] Howes, R.,\
    \ Kille, S., Yeong, W., and C. Robbins, \"The String\n       Representation of\
    \ Standard Attribute Syntaxes\", RFC 1778,\n       March 1995.\n   [3] Specification\
    \ of Basic Encoding Rules for Abstract Syntax\n       Notation One (ASN.1).  CCITT\
    \ Recommendation X.209, 1988.\n"
- title: 7.  Author's Address
  contents:
  - "7.  Author's Address\n   Tim Howes\n   University of Michigan\n   ITD Research\
    \ Systems\n   535 W William St.\n   Ann Arbor, MI 48103-4943\n   USA\n   Phone:\
    \ +1 313 747-4454\n   EMail: tim@umich.edu\n"
