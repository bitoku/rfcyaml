Abstract This document presents an ISAMKP Domain of Interpretation (DOI) for group key management to support secure group communications.
The GDOI manages group security associations, which are used by IPSEC and potentially other data security protocols running at the IP or application layers.
These security associations protect one or more key encrypting keys, traffic encrypting keys, or data shared by group members.
This document presents an ISAMKP Domain of Interpretation (DOI) for group key management called the "Group Domain of Interpretation" (GDOI).
In this group key management model, the GDOI protocol is run between a group member and a "group controller/key server" (GCKS), which establishes security associations [Section 4.6.2 RFC2401] among authorized group members.
ISAKMP defines two "phases" of negotiation [p.16 RFC2408].
The GDOI MUST be protected by a Phase 1 security association.
This document incorporates the Phase 1 security association (SA) definition from the Internet DOI [RFC2407, RFC2409].
Other possible Phase 1 security association types are noted in Appendix A.
The Phase 2 exchange is defined in this document, and proposes new payloads and exchanges according to the ISAKMP standard [p. 14 RFC2408].
There are six new payloads: 1) GDOI SA 2)
SA KEK (SAK) which follows the SA payload 3)
SA TEK (SAT) which follows the SA payload 4)
Key Download Array (KD) 5)
Sequence number (SEQ) 6) Proof of Possession (POP)
There are two new exchanges.
A Phase 2 exchange creates Re key and Data Security Protocol SAs.
The new Phase 2 exchange, called "GROUPKEY PULL," downloads keys for a group's "Re key" SA and/or "Data security" SA.
The Re key SA includes a key encrypting key, or KEK, common to the group; a Data security SA includes a data encryption key, or TEK, used by a data security protocol to encrypt or decrypt data traffic [Section 2.1 RFC2407].
The SA for the KEK or TEK includes authentication keys, encryption keys, cryptographic policy, and attributes.
The GROUPKEY PULL exchange uses "pull" behavior since the member initiates the retrieval of these SAs from a GCKS.
A datagram subsequently establishes additional Rekey and/or Data Security Protocol SAs.
The GROUPKEY PUSH datagram is "pushed" from the GCKS to the members to create or update a Re key or Data security SA.
Re key SA protects GROUPKEY PUSH messages.
Thus, a GROUPKEY PULL is necessary to establish at least one Re key SA in order to protect subsequent GROUPKEY PUSH messages.
The GCKS encrypts the GROUPKEY PUSH message using the KEK Re key SA.
GDOI accommodates the use of arrays of KEKs for group key management algorithms using the Logical Key Hierarchy (LKH) algorithm to efficiently add and remove group members [RFC2627].
Implementation of the LKH algorithm is OPTIONAL.
Although the GROUPKEY PUSH specified by this document can be used to refresh a Re key SA, the most common use of GROUPKEY PUSH is to establish a Data security SA for a data security protocol.
GDOI can accommodate future extensions to support a variety of data security protocols.
This document only specifies data security SAs for one security protocol, IPsec ESP.
A separate RFC will specify support for other data security protocols such as a future secure Real time Transport Protocol.
A security protocol uses the TEK and "owns" the data security SA in the same way that IPsec ESP uses the IKE Phase 2 keys and owns the Phase 2 SA; for GDOI, IPsec ESP uses the TEK.
Thus, GDOI is a group security association management protocol: All GDOI messages are used to create, maintain, or delete security associations for a group.
As described above, these security associations protect one or more key encrypting keys, traffic encrypting keys, or data shared by group members for multicast and groups security applications.
The keywords MUST, MUST NOT, REQUIRED, SHALL,
SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this document, are to be interpreted as described in BCP 14,
GDOI Applications Secure multicast applications include video broadcast and multicast file transfer.
In a business environment, many of these applications require network security and may use IPsec ESP to secure their data traffic.
Section 5.4.1 specifies how GDOI carries the needed SA parameters for ESP.
In this way, GDOI supports multicast ESP with group authentication of ESP packets using the shared, group key (authentication of unique sources of ESP packets is not possible).
GDOI can also secure group applications that do not use multicast transport such as video on demand.
For example, the GROUPKEY PUSH message may establish a pair wise IPsec ESP SA for a member of a subscription group without the need for key management exchanges and costly asymmetric cryptography.
Extending GDOI Not all secure multicast or multimedia applications can use IPsec ESP.
Many Real Time Transport Protocol applications, for example, require security above the IP layer to preserve RTP header compression efficiencies and transport independence
A future RTP security protocol may benefit from using GDOI to establish group SAs.
In order to add a new data security protocol, a new RFC MUST specify the data security SA parameters conveyed by GDOI for that security protocol; these parameters are listed in section 5.4.2 of this document.
Data security protocol SAs MUST protect group traffic.
GDOI provides no restriction on whether that group traffic is transmitted as unicast or multicast packets.
However, GDOI MUST NOT be used as a key management mechanism by a data security protocol when the packets protected by the data security SA are intended to be private and never become part of group communications.
GDOI Phase 1 protocol GDOI is a "phase 2" protocol which MUST be protected by a "phase 1" protocol.
The "phase 1" protocol can be any protocol which provides for the following protections: Peer Authentication Confidentiality Message Integrity
The following sections describe one such "phase 1" protocol.
Other protocols which may be potential "phase 1" protocols are described in Appendix A.
However, the use of the protocols listed there are not considered part of this document.
This document defines how the ISAKMP phase 1 exchanges as defined in [RFC2409] can be used a "phase 1" protocol for GDOI.
The following sections define characteristics of the ISAKMP phase 1 protocols that are unique for these exchanges when used for GDOI.
Section 6.1 describes how the ISAKMP Phase 1 protocols meet the requirements of a GDOI "phase 1" protocol.
The Phase 1 SA payload has a DOI value.
That value MUST be the GDOI DOI value as defined later in this document.
UDP port GDOI MUST NOT run on port 500 (the port commonly used for IKE).
IANA has assigned port 848 for the use of GDOI.
The goal of the GROUPKEY PULL exchange is to establish a Re key and/or Data security SAs at the member for a particular group.
A Phase 1 SA protects the GROUPKEY PULL; there MAY be multiple GROUPKEY PULL exchanges for a given Phase 1 SA.
The GROUPKEY PULL exchange downloads the data security keys (TEKs) and/or group key encrypting key (KEK) or KEK array under the protection of the Phase 1 SA.
There are two alternative means for authorizing the GROUPKEY PULL message.
First, the Phase 1 identity can be used to authorize the Phase 2 (GROUPKEY PULL) request for a group key.
Second, a new identity can be passed in the GROUPKEY PULL request.
The new identity could be specific to the group and use a certificate that is signed by the group owner to identify the holder as an authorized group member.
The Proof of Possession payload validates that the holder possesses the secret key associated with the Phase 2 identity.
The GROUPKEY PULL is a Phase 2 exchange.
Phase 1 computes SKEYID a which is the "key" in the keyed hash used in the GROUPKEY PULL HASH payloads.
When using the Phase 1 defined in this document, SKEYID a is derived according to [RFC2409].
As with the IKE HASH payload generation [RFC 2409 section 5.5], each GROUPKEY PULL message hashes a uniquely defined set of values.
Nonces permute the HASH and provide some protection against replay attacks.
Replay protection is important to protect the GCKS from attacks that a key management server will attract.
The GROUPKEY PULL uses nonces to guarantee "liveliness", or against replay of a recent GROUPKEY PULL message.
The replay attack is only useful in the context of the current Phase 1.
If a GROUPKEY PULL message is replayed based on a previous Phase 1, the HASH calculation will fail due to a wrong SKEYID a.
The message will fail processing before the nonce is ever evaluated.
In order for either peer to get the benefit of the replay protection, it must postpone as much processing as possible until it receives the message in the protocol that proves the peer is live.
For example, the Responder MUST NOT compute the shared Diffie Hellman number (if KE payloads were included) or install the new SAs until it receives a message with Nr included properly in the HASH payload.
Nonces require an additional message in the protocol exchange to ensure that the GCKS does not add a group member until it proves liveliness.
The GROUPKEY PULL member initiator expects to find its nonce, Ni, in the HASH of a returned message.
And the GROUPKEY PULL GKCS responder expects to see its nonce,
Nr, in the HASH of a returned message before providing group keying material as in the following exchange.
[,POP R] Hashes are computed as follows: HASH(1)
POP payload is constructed as described in Section 5.7.
Protected by the Phase 1 SA, encryption occurs after HDR HDR is an ISAKMP header payload that uses the Phase 1 cookies and a message identifier (M ID) as in IKE [RFC2409].
Note that nonces are included in the first two exchanges, with the GCKS returning only the SA policy payload before liveliness is proven.
The HASH payloads [RFC2409] prove that the peer has the Phase 1 secret (SKEYID a) and the nonce for the exchange identified by message id, M ID.
Once liveliness is established, the last message completes the real processing of downloading the KD payload.
In addition to the Nonce and HASH payloads, the member initiator identifies the group it wishes to join through the ISAKMP ID payload.
The GCKS responder informs the member of the current value of the sequence number in the SEQ payload; the sequence number orders the GROUPKEY PUSH datagrams (section 4); the member MUST check to see that the sequence number is greater than in the previous SEQ payload the member holds for the group (if it holds any) before installing any new SAs.
The SEQ payload MUST be present if the SA payload contains an SA KEK attribute.
The GCKS responder informs the member of the cryptographic policies of the group in the SA payload, which describes the DOI, KEK and/or TEK keying material, and authentication transforms.
The SPIs are also determined by the GCKS and downloaded in the SA payload chain (see section 5.2).
The SA KEK attribute contains the ISAKMP cookie pair for the Re key SA, which is not negotiated but downloaded.
The SA TEK attribute contains an SPI as defined in section 5.4 of this document.
The second message downloads this SA payload.
If a Re key SA is defined in the SA payload, then KD will contain the KEK; if one or more Data security SAs are defined in the SA payload, KD will contain the TEKs.
This is useful if there is an initial set of TEKs for the particular group and can obviate the need for future TEK GROUPKEY PUSH messages (described in section 4).
As described above, the member may establish an identity in the GROUPKEY PULL exchange in an optional CERT payload that is separate from the Phase 1 identity.
When the member passes a new CERT, a proof of possession (POP) payload accompanies it.
The POP payload demonstrates that the member or GCKS has used the very secret that authenticates it.
I is an ISAKMP SIG payload containing a hash including the nonces
Ni and Nr signed by the member, when the member passes a CERT, signed by the Group Owner to prove its authorization.
POP R contains the hash including the concatenated nonces Ni and Nr signed by the GCKS, when the GCKS passes a CERT, signed by the group owner, to prove its authority to provide keys for a particular group.
The use of the nonce pair for the POP payload, transformed through a pseudo random function (prf) and encrypted, is designed to withstand compromise of the Phase 1 key.
Implementation of the CERT and POP payloads is OPTIONAL.
If PFS is desired and the optional KE payload is used in the exchange, then both sides compute a DH secret and use it to protect the new keying material contained in KD.
The GCKS responder will xor the DH secret with the KD payload and send it to the member Initiator, which recovers the KD by repeating this operation as in the Oakley IEXTKEY procedure [RFC2412].
Implementation of the KE payload is OPTIONAL.
ISAKMP Header Initialization Cookies are used in the ISAKMP header as a weak form of denial of service protection.
The GDOI GROUPKEY PULL exchange uses cookies according to ISAKMP [RFC2408].
Next Payload identifies an ISAKMP or GDOI payload (see Section 5.0).
Major Version is 1 and Minor Version is 0 according to ISAKMP [RFC2408, Section 3.1].
The Exchange Type has value 32 for the GDOI GROUPKEY PULL exchange.
Flags, Message ID, and Length are according to ISAKMP [RFC2408, Section 3.1] 3.3.
Before a group member (GDOI initiator) contacts the GCKS, it must determine the group identifier and acceptable Phase 1 policy via an out of band method such as SDP.
Phase 1 is initiated using the GDOI DOI in the SA payload.
Once Phase 1 is complete, the initiator state machine moves to the GDOI protocol.
To construct the first GDOI message the initiator chooses Ni and creates a nonce payload, builds an identity payload including the group identifier, and generates HASH(1).
Upon receipt of the second GDOI message, the initiator validates HASH(2), extracts the nonce
Nr, and interprets the SA payload.
If the policy in the SA payload is acceptable (e.g., the security protocol and cryptographic protocols can be supported by the initiator), the initiator continues the protocol.
If the group policy uses certificates for authorization, the initiator generates a hash including Ni and Nr and signs it.
This becomes the contents of the POP payload.
If necessary, a CERT payload is constructed which holds the public key corresponding to the private key used to sign the POP payload.
The initiator constructs the third GDOI message by including the CERT and POP payloads (if needed) and creating HASH(3).
Upon receipt of the fourth GDOI message, the initiator validates HASH(4).
If the responder sent CERT and POP R payloads, the POP signature is validated.
If SEQ payload is present, the sequence number in the SEQ payload must be checked against any previously received sequence number for this group.
If it is less than the previously received number, it should be considered stale and ignored.
This could happen if two GROUPKEY PULL messages happened in parallel, and the sequence number changed between the times the results of two GROUPKEY PULL messages were returned from the GCKS.
The initiator interprets the KD key packets, matching the SPIs in the key packets to SPIs previously sent in the SA payloads identifying particular policy.
For TEKs, once the keys and policy are matched, the initiator is ready to send or receive packets matching the TEK policy.
(If policy and keys had been previously received for this TEK policy, the initiator may decide instead to ignore this TEK policy in case it is stale.)
If this group has a KEK, the KEK policy and keys are marked as ready for use.
The GCKS (responder) passively listens for incoming requests from group members.
The Phase 1 authenticates the group member and sets up the secure session with them.
Upon receipt of the first GDOI message the GCKS validates HASH(1), extracts the Ni and group identifier in the ID payload.
It verifies that its database contains the group information for the group identifier.
The GCKS constructs the second GDOI message, including a nonce
Nr, and the policy for the group in an SA payload, followed by SA TEK payloads for traffic SAs, and SA KEK policy (if the group controller will be sending Re key messages to the group).
Upon receipt of the third GDOI message the GCKS validates HASH(3).
If the initiator sent CERT and POP
I payloads, the POP signature is validated.
The GCKS constructs the fourth GDOI message, including the SEQ payload (if the GCKS sends rekey messages), the KD payload containing keys corresponding to policy previously sent in the SA TEK and SA KEK payloads, and the CERT and POP payloads (if needed).
GROUPKEY PUSH Message GDOI sends control information securely using group communications.
Typically this will be using IP multicast distribution of a GROUPKEY PUSH message but it can also be "pushed" using unicast delivery if IP multicast is not possible.
The GROUPKEY PUSH message replaces a Re key SA KEK or KEK array, and/or creates a new Data security SA.
SIG   Protected by the Re key SA KEK; encryption occurs after HDR HDR is defined below.
The SEQ payload is defined in the Payloads section.
The SA defines the policy (e.g., protection suite) and attributes (e.g., SPI) for a Re key and/or Data security SAs.
The GCKS or delegate optionally provides a CERT payload for verification of the SIG.
KD is the key download payload as described in the Payloads section.
The SIG payload is a signature of a hash of the entire message before encryption (including the header and excluding the SIG payload itself), prefixed with the string "rekey".
The prefixed string ensures that the signature of the Rekey datagram cannot be used for any other purpose in the GDOI protocol.
If the SA defines an LKH KEK array or single KEK, KD contains a KEK or KEK array for a new Re key SA, which has a new cookie pair.
When the KD payload carries a new SA KEK attribute (section 5.3), a Re key SA is replaced with a new SA having the same group identifier (ID specified in message 1 of section 3.2) and incrementing the same sequence counter, which is initialized in message 4 of section 3.2.
If the SA defines an SA TEK payload, this informs the member that a new Data security SA has been created, with keying material carried in KD (Section 5.5).
If the SA defines a large LKH KEK array (e.g., during group initialization and batched rekeying), parts of the array MAY be sent in different unique GROUPKEY PUSH datagrams.
However, each of the GROUPKEY PUSH datagrams MUST be a fully formed GROUPKEY PUSH datagram.
This results in each datagram containing a sequence number and the policy in the SA payload, which corresponds to the KEK array portion sent in the KD payload.
The GROUPKEY PUSH message is protected by the group KEK though in all cases, the GROUPKEY PUSH message carries new key downloads, among other information.
A freshly generated secret must protect the key download for the GROUPKEY PUSH message to have PFS.
This issue is for further study.
Forward and Backward Access Control
Through GROUPKEY PUSH, the GDOI supports algorithms such as LKH that have the property of denying access to a new group key by a member removed from the group (forward access control) and to an old group key by a member added to the group (backward access control).
An unrelated notion to PFS, "forward access control" and "backward access control" have been called "perfect forward security" and "perfect backward security" in the literature [RFC2627].
Group management algorithms providing forward and backward access control other than LKH have been proposed in the literature, including OFT [OFT] and Subset Difference [NNL].
These algorithms could be used with GDOI, but are not specified as a part of this document.
Support for group management algorithms is supported via the KEY MANAGEMENT ALGORITHM attribute which is sent in the SA KEK payload.
GDOI specifies one method by which LKH can be used for forward and backward access control.
Other methods of using LKH, as well as other group management algorithms such as OFT or Subset Difference may be added to GDOI as part of a later document.
Any such addition MUST be due to a Standards Action as defined in [RFC2434].
When group membership is altered using a group management algorithm new SA TEKs (and their associated keys) are usually also needed.
New SAs and keys ensure that members who were denied access can no longer participate in the group.
If forward access control is a desired property of the group, new SA TEKs and the associated key packets in the KD payload MUST NOT be included in a GROUPKEY PUSH message which changes group membership.
This is required because the SA TEK policy and the associated key packets in the KD payload are not protected with the new KEK.
A second GROUPKEY PUSH message can deliver the new SA TEKS and their associated keys because it will be protected with the new KEK, and thus will not be visible to the members who were denied access.
If forward access control policy for the group includes keeping group policy changes from members that are denied access to the group, then two sequential GROUPKEY PUSH messages changing the group KEK MUST be sent by the GCKS.
The first GROUPKEY PUSH message creates a new KEK for the group.
Group members, which are denied access, will not be able to access the new KEK, but will see the group policy since the GROUPKEY PUSH message is protected under the current KEK.
A subsequent GROUPKEY PUSH message containing the changed group policy and again changing the KEK allows complete forward access control.
A GROUPKEY PUSH message MUST NOT change the policy without creating a new KEK.
If other methods of using LKH or other group management algorithms are added to GDOI, those methods MAY remove the above restrictions requiring multiple GROUPKEY PUSH messages, providing those methods specify how forward access control policy is maintained within a single GROUPKEY PUSH message.
Delegation of Key Management GDOI supports delegation of GROUPKEY PUSH datagrams through the delegation capabilities of the PKI.
However, GDOI does not explicitly specify how the GCKS identifies delegates, but leaves this to the PKI that is used by a particular GDOI implementation.
The GCKS SHOULD NOT use the same key to sign the SIG payload in the GROUPKEY PUSH message as was used for authorization in the GROUPKEY PULL POP payload.
If the same key must be used, a different hash function SHOULD be used as a base for the POP payload than is used as a base for the SIG payload.
ISAKMP Header Initialization Unlike ISAKMP or IKE
, the cookie pair is completely determined by the GCKS.
The cookie pair in the GDOI ISAKMP header identifies the Re  key SA to differentiate the secure groups managed by a GCKS.
Thus, GDOI uses the cookie fields as an SPI.
Next Payload identifies an ISAKMP or GDOI payload (see Section 5.0).
Major Version is 1 and Minor Version is 0 according to ISAKMP [RFC2408, Section 3.1].
The Exchange Type has value 33 for the GDOI GROUPKEY PUSH message.
Flags MUST have the Encryption bit set according to [RFC2008, Section 3.1].
All other bits MUST be set to zero.
Message ID MUST be set to zero.
Length is according to ISAKMP [RFC2408, Section 3.1] 4.6.
Deletion of SAs There are times the GCKS may want to signal to receivers to delete SAs, for example at the end of a broadcast.
Deletion of keys may be accomplished by sending an ISAKMP Delete payload [RFC2408, Section 3.15] as part of a GDOI GROUPKEY PUSH message.
One or more Delete payloads MAY be placed following the SEQ payload in a GROUPKEY PUSH message.
If a GCKS has no further SAs to send to group members, the SA and KD payloads MUST be omitted from the message.
The following fields of the Delete Payload are further defined as follows:
The Domain of Interpretation field contains the GDOI DOI.
Protocol Id field contains TEK protocol
d values defined in Section 5.4 of this document.
To delete a KEK SA, the value of zero MUST be used as the protocol id.
d value can be defined in a Delete payload.
If a TEK SA and a KEK SA must be deleted, they must be sent in different Delete payloads.
GCKS Operations GCKS or its delegate may initiate a Rekey message for one of several reasons, e.g., the group membership has changed or keys are due to expire.
To begin the rekey datagram the GCKS builds an ISAKMP HDR with the correct cookie pair, and a SEQ payload that includes a sequence number which is one greater than the previous rekey datagram.
An SA payload is then added.
This is identical in structure and meaning to a SA payload sent in a GROUPKEY PULL exchange.
If there are changes to the KEK (in the case of a static KEK) or in group membership (in the case of LKH)
an SA KEK attribute is added to the SA.
If there are one or more new TEKs then SA TEK attributes are added to describe that policy.
A KD payload is then added.
This is identical in structure and meaning to a KD payload sent in a GROUPKEY PULL exchange.
If an SA KEK attribute was included in the SA payload then corresponding KEK keys (or a KEK array) is included.
TEK keys are sent for each SA TEK attribute included in the SA payload.
A CERT payload is added if the initiator needs to provide its certificate.
In the penultimate step, the initiator hashes the string "rekey" followed by the key management message already formed.
The hash is signed, placed in a SIG payload and added to the datagram.
Lastly, the payloads following the HDR are encrypted using the current KEK encryption key.
The datagram can now be sent.
Group Member Operations A group member receiving the GROUPKEY PUSH datagram matches the cookie pair in the ISAKMP HDR to an existing SA.
The message is decrypted, and the form of the datagram is validated.
This weeds out obvious ill formed messages (which may be sent as part of a Denial of Service attack on the group).
The signature of the decrypted message is then validated, possibly using the CERT payload if it is included.
The sequence number in the SEQ payload is validated to ensure that it is greater than the previously received sequence number, and that it fits within a window of acceptable values.
The SA and KD payloads are processed which results in a new GDOI Rekey SA (if the SA payload included an SA KEK attribute) and/or new IPsec SAs being added to the system.
This document specifies use of several ISAKMP payloads, which are defined in accordance with RFC2408.
The following payloads are extended or further specified.
10 Several new payload formats are required in the group security exchanges.
The Identification Payload is used to identify a group identity that will later be associated with Security Associations for the group.
A group identity may map to a specific IP multicast group, or may specify a more general identifier, such as one that represents a set of related multicast streams.
The Identification Payload is defined as follows:
The Identification Payload fields are defined as follows:  Next Payload (1 octet)
Identifier for the payload type of the next payload in the message.
If the current payload is the last in the message, this field will be zero (0).
Unused, must be zero (0).
Length, in octets, of the identification data, including the generic header.
Value describing the identity information found in the Identification Data field.
Unused, must be zero (0).
Value, as indicated by the Identification Type.
The following table lists the assigned values for the Identification Type field found in the Identification Payload.
In the context of a GDOI ID payload, ID KEY ID specifies a four (4) octet group identifier.
Security Association Payload The Security Association payload is defined in RFC 2408.
For the GDOI, it is used by the GCKS to assert security attributes for both Re key and Data security SAs. 0
The Security Association Payload fields are defined as follows:  Next Payload (1 octet)
Identifies the next payload for the GROUPKEY PULL or the GROUPKEY PUSH message as defined above.
The next payload MUST NOT be a SAK Payload or SAT Payload type, but the next non Security Association type payload.
RESERVED (1 octet)   Must be zero.
Payload Length (2 octets)   Is the octet length of the current payload including the generic header and all TEK and KEK payloads.
DOI (4 octets)   Is the GDOI, which is value 2.
Situation (4 octets)   Must be zero.
Must be either a SAK Payload or a SAT Payload.
See section 5.2.1 for a description of which circumstances are required for each payload type to be present.
RESERVED (2 octets)   Must be zero.
Payloads following the SA payload Payloads that define specific security association attributes for the KEK and/or TEKs used by the group MUST follow the SA payload.
How many of each payload is dependent upon the group policy.
There may be zero or one SAK Payloads, and zero or more SAT Payloads, where either one SAK or SAT payload MUST be present.
This latitude allows various group policies to be accommodated.
For example if the group policy does not require the use of a Re key SA, the GCKS would not need to send an SA KEK attribute to the group member since all SA updates would be performed using the Registration SA.
Alternatively, group policy might use a Re key SA but choose to download a KEK to the group member only as part of the Registration SA.
Therefore, the KEK policy (in the SA KEK attribute) would not be necessary as part of the Re key SA message SA payload.
Specifying multiple SATs allows multiple sessions to be part of the same group and multiple streams to be associated with a session (e.g., video, audio, and text) but each with individual security association policy.
The SA KEK (SAK) payload contains security attributes for the KEK method for a group and parameters specific to the GROUPKEY PULL operation.
The source and destination identities describe the identities used for the GROUPKEY PULL datagram. 0
The SAK Payload fields are defined as follows:  Next Payload (1 octet)
Identifies the next payload for the GROUPKEY PULL or the GROUPKEY PUSH message.
The only valid next payload types for this message are a SAT Payload or zero to indicate there is no SA TEK payload.
RESERVED (1 octet)   Must be zero.
Payload Length (2 octets)   Length of this payload, including the KEK attributes.
Value describing an IP protocol ID (e.g., UDP/TCP) for the rekey datagram.
SRC ID Type (1 octet)
Value describing the identity information found in the SRC Identification Data field.
Defined values are specified by the IPSEC Identification Type section in the IANA isakmpd registry [ISAKMP REG].
SRC ID Port (2 octets)   Value specifying a port associated with the source Id.
A value of zero means that the SRC ID Port field should be ignored.
SRC ID Data Len (1 octet)
Value specifying the length of the SRC Identification Data field.
SRC Identification Data (variable length)
Value, as indicated by the SRC ID Type.
DST ID Type (1 octet)
Value describing the identity information found in the DST Identification Data field.
Defined values are specified by the IPSEC Identification Type section in the IANA isakmpd registry [ISAKMP REG].
DST ID Prot (1 octet)
Value describing an IP protocol ID (e.g., UDP/TCP).
DST ID Port (2 octets)
Value specifying a port associated with the source Id.  DST ID Data Len (1 octet)
Value specifying the length of the DST Identification Data field.
DST Identification Data (variable length)
Value, as indicated by the DST ID Type.
SPI (16 octets)   Security Parameter Index for the KEK.
The SPI must be the ISAKMP Header cookie pair where the first 8 octets become the "Initiator Cookie" field of the GROUPKEY PUSH message ISAKMP HDR, and the second 8 octets become the "Responder Cookie" in the same HDR.
As described above, these cookies are assigned by the GCKS.
Defined values are specified in the following table.
If no POP algorithm is defined by the KEK policy this field must be zero.
POP Key Length (2 octets)   Length of the POP payload key.
If no POP algorithm is defined in the KEK policy, this field must be zero.
Contains KEK policy attributes associated with the group.
The following sections describe the possible attributes.
Any or all attributes may be optional, depending on the group policy.
The following attributes may be present in a SAK Payload.
The attributes must follow the format defined in ISAKMP [RFC2408] section 3.3.
In the table, attributes that are defined as TV are marked as Basic (B); attributes that are defined as TLV are marked as Variable (V).
The following attributes may only be included in a GROUPKEY PULL message:
KEK MANAGEMENT ALGORITHM, KE OAKLEY GROUP.
The KEK MANAGEMENT ALGORITHM class specifies the group KEK management algorithm used to provide forward or backward access control (i.e., used to exclude group members).
Defined values are specified in the following table.
The KEK ALGORITHM class specifies the encryption algorithm using with the KEK.
Defined values are specified in the following table.
128 255 A GDOI implementation MUST support the KEK ALG 3DES algorithm attribute.
If a KEK MANAGEMENT ALGORITHM is defined which defines multiple keys (e.g., LKH), and if the management algorithm does not specify the algorithm for those keys, then the algorithm defined by the KEK ALGORITHM attribute MUST be used for all keys which are included as part of the management.
This algorithm specifies DES using the Cipher Block Chaining (CBC) mode as described in [FIPS81].
This algorithm specifies 3DES using three independent keys as described in "Keying Option 1" in [FIPS46 3].
This algorithm specifies AES as described in [FIPS197].
The mode of operation for AES is Cipher Block Chaining (CBC) as recommended in [AES MODES].
The KEK KEY LENGTH class specifies the KEK Algorithm key length (in bits).
The KEK KEY LIFETIME class specifies the maximum time for which the KEK is valid.
The GCKS may refresh the KEK at any time before the end of the valid period.
The value is a four (4) octet number defining a valid time period in seconds.
SIG HASH ALGORITHM SIG HASH ALGORITHM specifies the SIG payload hash algorithm.
The following tables define the algorithms for SIG HASH ALGORITHM.
128 255 SIG HASH ALGORITHM is not required if the SIG ALGORITHM is SIG ALG DSS or SIG ALG ECDSS, which imply SIG HASH SHA1.
The SIG ALGORITHM class specifies the SIG payload signature algorithm.
Defined values are specified in the following table.
128 255 A GDOI implementation MUST support the following algorithm attribute: SIG ALG RSA.
This algorithm specifies the RSA digital signature algorithm as described in [RSA].
This algorithm specifies the DSS digital signature algorithm as described in [FIPS186 2].
This algorithm specifies the Elliptic Curve digital signature algorithm as described in [FIPS186 2].
The SIG KEY LENGTH class specifies the length of the SIG payload key.
The KE OAKLEY GROUP class defines the OAKLEY Group used to compute the PFS secret in the optional KE payload of the GDOI GROUPKEY PULL exchange.
This attribute uses the values assigned to Group Definitions in the IANA IPsec registry [IPSEC REG].
The SA TEK (SAT) payload contains security attributes for a single TEK associated with a group. 0
The SAT Payload fields are defined as follows:  Next Payload (1 octet)
Identifies the next payload for the GROUPKEY PULL or the GROUPKEY PUSH message.
The only valid next payload types for this message are another SAT Payload or zero to indicate there are no more security association attributes.
RESERVED (1 octet)   Must be zero.
Payload Length (2 octets)   Length of this payload, including the TEK Protocol Specific Payload.
Value specifying the Security Protocol.
Payload which describes the attributes specific for the Protocol ID.
The TEK Protocol Specific payload for ESP is as follows:
The SAT Payload fields are defined as follows:  Protocol (1 octet)
Value describing an IP protocol ID (e.g., UDP/TCP).
A value of zero means that the Protocol field should be ignored.
SRC ID Type (1 octet)
Value describing the identity information found in the SRC Identification Data field.
Defined values are specified by the IPSEC Identification Type section in the IANA isakmpd registry [ISAKMP REG].
SRC ID Port (2 octets)   Value specifying a port associated with the source Id.
A value of zero means that the SRC ID Port field should be ignored.
SRC ID Data Len (1 octet)
Value specifying the length of the SRC Identification Data field.
SRC Identification Data (variable length)
Value, as indicated by the SRC ID Type.
Set to three bytes of zero for multiple source multicast groups that use a common TEK for all senders.
DST ID Type (1 octet)
Value describing the identity information found in the DST Identification Data field.
Defined values are specified by the IPSEC Identification Type section in the IANA isakmpd registry [ISAKMP REG].
DST ID Prot (1 octet)
Value describing an IP protocol ID (e.g., UDP/TCP).
A value of zero means that the DST Id Prot field should be ignored.
DST ID Port (2 octets)
Value specifying a port associated with the source Id.
A value of zero means that the DST ID Port field should be ignored.
DST ID Data Len (1 octet)
Value specifying the length of the DST Identification Data field.
DST Identification Data (variable length)
Value, as indicated by the DST ID Type.
Value specifying which ESP transform is to be used.
The list of valid values is defined in the IPSEC ESP Transform Identifiers section of the IANA isakmpd registry [ISAKMP REG].
SPI (4 octets)   Security Parameter Index for ESP.
ESP Attributes from RFC 2407 Section 4.5.
The GDOI supports all IPSEC DOI SA Attributes for PROTO IPSEC ESP excluding the Group Description [RFC2407, section 4.5], which MUST NOT be sent by a GDOI implementation and is ignored by a GDOI implementation if received.
All mandatory IPSEC DOI attributes are mandatory in GDOI PROTO IPSEC ESP.
The Authentication Algorithm attribute of the IPSEC DOI is group authentication in GDOI.
Other Security Protocols Besides ESP, GDOI should serve to establish SAs for secure groups needed by other Security Protocols that operate at the transport, application, and internetwork layers.
These other Security Protocols, however, are in the process of being developed or do not yet exist.
The following information needs to be provided for a Security Protocol to the GDOI.
The Protocol ID for the particular Security Protocol
The method of SPI generation
The transforms, attributes and keys needed by the Security Protocol
All Security Protocols must provide the information in the bulleted list above to guide the GDOI specification for that protocol.
Definitions for the support of those Security Protocols in GDOI will be specified in separate documents.
A Security Protocol MAY protect traffic at any level of the network stack.
However, in all cases applications of the Security Protocol MUST protect traffic which MAY be shared by more than two entities.
The Key Download Payload contains group keys for the group specified in the SA Payload.
These key download payloads can have several security attributes applied to them based upon the security policy of the group as defined by the associated SA Payload.
When included as part of the Re key SA with an optional KE payload, The Key Download Payload will be xor'ed with the new Diffie Hellman shared secret.
The xor operation will begin at the "Number of Key Packets" field. 0
The Key Download Payload fields are defined as follows:  Next Payload (1 octet)
Identifier for the payload type of the next payload in the message.
If the current payload is the last in the message, then this field will be zero.
Payload Length (2 octets)   Length in octets of the current payload, including the generic payload header.
Number of Key Packets (2 octets)
Contains the total number of both TEK and Rekey arrays being passed in this data block.
Several types of key packets are defined.
Each Key Packet has the following format. 0
Key Download (KD) Type (1 octet)   Identifier for the Key Data field of this Key Packet.
Key Download Length (2 octets)   Length in octets of the Key Packet data, including the Key Packet header.
Value specifying the length in octets of the SPI as defined by the Protocol Id.  SPI (variable length)   Security Parameter Index which matches a SPI previously sent in an SAK or SAT Payload.
Key Packet Attributes (variable length)
The format of this field is specific to the value of the KD Type field.
The following sections describe the format of each KD Type.
The following attributes may be present in a TEK Download Type.
Exactly one attribute matching each type sent in the SAT payload MUST be present.
The attributes must follow the format defined in ISAKMP [RFC2408] section 3.3.
In the table, attributes defined as TV are marked as Basic (B); attributes defined as TLV are marked as Variable (V).
If no TEK key packets are included in a Registration KD payload, the group member can expect to receive the TEK as part of a Re key SA.
At least one TEK must be included in each Re key KD payload.
Multiple TEKs may be included if multiple streams associated with the SA are to be rekeyed.
The TEK ALGORITHM KEY class declares that the encryption key for this SPI is contained as the Key Packet Attribute.
The encryption algorithm that will use this key was specified in the SAT payload.
In the case that the algorithm requires multiple keys (e.g., 3DES), all keys will be included in one attribute.
DES keys will consist of 64 bits (the 56 key bits with parity bit).
Triple DES keys will be specified as a single 192 bit attribute (including parity bits) in the order that the keys are to be used for encryption (e.g., DES KEY1, DES KEY2, DES KEY3).
The TEK INTEGRITY KEY class declares that the integrity key for this SPI is contained as the Key Packet Attribute.
The integrity algorithm that will use this key was specified in the SAT payload.
Thus, GDOI assumes that both the symmetric encryption and integrity keys are pushed to the member.
SHA keys will consist of 160 bits, and MD5 keys will consist of 128 bits.
The TEK SOURCE AUTH KEY class declares that the source authentication key for this SPI is contained in the Key Packet Attribute.
The source authentication algorithm that will use this key was specified in the SAT payload.
The following attributes may be present in a KEK Download Type.
Exactly one attribute matching each type sent in the SAK payload MUST be present.
The attributes must follow the format defined in ISAKMP [RFC2408] section 3.3.
In the table, attributes defined as TV are marked as Basic (B); attributes defined as TLV are marked as Variable (V).
If the KEK key packet is included, there MUST be only one present in the KD payload.
The KEK ALGORITHM KEY class declares the encryption key for this SPI is contained in the Key Packet Attribute.
The encryption algorithm that will use this key was specified in the SAK payload.
If the mode of operation for the algorithm requires an Initialization Vector (IV), an explicit IV MUST be included in the KEK ALGORITHM KEY before the actual key.
The SIG ALGORITHM KEY class declares that the public key for this SPI is contained in the Key Packet Attribute, which may be useful when no public key infrastructure is available.
The signature algorithm that will use this key was specified in the SAK payload.
The LKH key packet is comprised of attributes representing different leaves in the LKH key tree.
The following attributes are used to pass an LKH KEK array in the KD payload.
The attributes must follow the format defined in ISAKMP [RFC2408] section 3.3.
In the table, attributes defined as TV are marked as Basic (B); attributes defined as TLV are marked as Variable (V).
If an LKH key packet is included in the KD payload, there must be only one present.
This attribute is used to download a set of keys to a group member.
It MUST NOT be included in a GROUPKEY PUSH message KD payload if the GROUPKEY PUSH is sent to more than the group member.
If an LKH DOWNLOAD ARRAY attribute is included in a KD payload, there must be only one present.
This attribute consists of a header block, followed by one or more LKH keys. 0
The KEK LKH attribute fields are defined as follows:  LKH version (1 octet)
Contains the version of the LKH protocol which the data is formatted in.
Number of LKH Keys (2 octets)
This value is the number of distinct LKH keys in this sequence.
Each LKH Key is defined as follows:
This is the position of this key in the binary tree structure used by LKH.
This is the encryption algorithm for which this key data is to be used.
This value is specified in Section 5.3.3.
Key Creation Date (4 octets)
This is the time value of when this key data was originally generated.
A time value of zero indicates that there is no time before which this key is not valid.
Key Expiration Date (4 octets)
This is the time value of when this key is no longer valid for use.
A time value of zero indicates that this key does not have an expiration time.
This is the randomly generated value to uniquely identify a key within an LKH ID.
This is the actual encryption key data, which is dependent on the Key Type algorithm for its format.
If the mode of operation for the algorithm requires an Initialization Vector (IV), an explicit IV MUST be included in the Key Data field before the actual key.
The Key Creation Date and Key expiration Dates MAY be zero.
This is necessary in the case where time synchronization within the group is not possible.
The first LKH Key structure in an LKH DOWNLOAD ARRAY attribute contains the Leaf identifier and key for the group member.
The rest of the LKH Key structures contain keys along the path of the key tree in order from the leaf, culminating in the group KEK.
This attribute is used to update the keys for a group.
It is most likely to be included in a GROUPKEY PUSH message KD payload to rekey the entire group.
This attribute consists of a header block, followed by one or more LKH keys, as defined in Section 5.5.3.1
There may be any number of UPDATE ARRAY attributes included in a KD payload. 0
LKH version (1 octet)   Contains the version of the LKH protocol which the data is formatted in.
Number of LKH Keys (2 octets)
This value is the number of distinct LKH keys in this sequence.
This is the node identifier associated with the key used to encrypt the first LKH Key.
This is the value to uniquely identify the key within the LKH ID which was used to encrypt the first LKH key.
The LKH Keys are as defined in Section 5.5.3.1.
The LKH Key structures contain keys along the path of the key tree in order from the LKH ID found in the LKH UPDATE ARRAY header, culminating in the group KEK.
The Key Data field of each LKH Key is encrypted with the LKH key preceding it in the LKH UPDATE ARRAY attribute.
The first LKH Key is encrypted under the key defined by the LKH ID and Key Handle found in the LKH UPDATE ARRAY header.
The SIG ALGORITHM KEY class declares that the public key for this SPI is contained in the Key Packet Attribute, which may be useful when no public key infrastructure is available.
The signature algorithm that will use this key was specified in the SAK payload.
The Sequence Number Payload (SEQ) provides an anti replay protection for GROUPKEY PUSH messages.
Its use is similar to the Sequence Number field defined in the IPsec ESP protocol [RFC2406]. 0
The Sequence Number Payload fields are defined as follows:  Next Payload (1 octet)
Identifier for the payload type of the next payload in the message.
If the current payload is the last in the message, then this field will be zero.
Payload Length (2 octets)   Length in octets of the current payload, including the generic payload header.
This field contains a monotonically increasing counter value for the group.
It is initialized to zero by the GCKS, and incremented in each subsequently transmitted message.
Thus the first packet sent for a given Rekey SA will have a Sequence Number of 1.
The GDOI implementation keeps a sequence counter as an attribute for the Rekey SA and increments the counter upon receipt of a GROUPKEY PUSH message.
The current value of the sequence number must be transmitted to group members as a part of the Registration SA SA payload.
A group member must keep a sliding receive window.
The window must be treated as in the ESP protocol [RFC2406] Section 3.4.3.
The Proof of Possession Payload is used as part of group membership authorization during a GDOI exchange.
The Proof of Possession Payload is identical to an ISAKMP SIG payload.
However, the usage is entirely different.
The GCKS, GCKS delegate or member signs a hash of the following values: POP HASH
Where hash() is the hash function used with the signature.
The "pop" prefix ensures that the signature of the POP payload cannot be used for any other purpose in the GDOI protocol.
The data portion of the Nonce payload (i.e., Ni b and Nr b included in the HASHs) MUST be a value between 8 and 128 bytes.
Security Considerations GDOI is a security association (SA) management protocol for groups of senders and receivers.
Unlike a data security protocol, SA management includes a key establishment protocol to securely establish keys at communication endpoints.
This protocol performs entity authentication of the GDOI member or Group Controller/Key Server (GCKS), it provides confidentiality of key management messages, and it provides source authentication of those messages.
This protocol also uses best known practices for defense against man in middle, connection hijacking, replay, reflection, and denial of service (DOS) attacks on unsecured networks [STS, RFC2522, SKEME].
GDOI assumes the network is not secure and may be under the complete control of an attacker.
GDOI assumes that the host computer is secure even though the network is insecure.
GDOI ultimately establishes keys among members of a group, which MUST be trusted to use those keys in an authorized manner according to group policy.
The security of GDOI, therefore, is as good as the degree to which group members can be trusted to protect authenticators, encryption keys, decryption keys, and message authentication keys.
There are three phases of GDOI as described in this document: an ISAKMP Phase 1 protocol, a new exchange called GROUPKEY PULL which is protected by the ISAKMP Phase 1 protocol, and a new message called GROUPKEY PUSH.
Each phase is considered separately below.
As described in this document, GDOI uses the Phase 1 exchanges defined in [RFC2409] to protect the GROUPKEY PULL exchange.
Therefore all security properties and considerations of those exchanges (as noted in [RFC2409]) are relevant for GDOI.
GDOI may inherit the problems of its ancestor protocols [FS00], such as identity exposure, absence of unidirectional authentication, or stateful cookies [PK01].
GDOI could benefit, however, from improvements to its ancestor protocols just as it benefits from years of experience and work embodied in those protocols.
To reap the benefits of future IKE improvements, however, GDOI would need to be revised in a future standards track RFC, which is beyond the scope of this specification.
Authentication Authentication is provided via the mechanisms defined in [RFC2409], namely Pre Shared Keys or Public Key encryption.
Confidentiality Confidentiality is achieved in Phase 1 through a Diffie Hellman exchange that provides keying material, and through negotiation of encryption transforms.
The Phase 1 protocol will be protecting encryption and integrity keys sent in the GROUPKEY PULL protocol.
The strength of the encryption used for Phase 1 SHOULD exceed that of the keys send in the GROUPKEY PULL protocol.
Man in the Middle Attack Protection
A successful man in the middle or connection hijacking attack foils entity authentication of one or more of the communicating entities during key establishment.
GDOI relies on Phase 1 authentication to defeat man in the middle attacks.
In a replay/reflection attack, an attacker captures messages between GDOI entities and subsequently forwards them to a GDOI entity.
Replay and reflection attacks seek to gain information from a subsequent GDOI message response or seek to disrupt the operation of a GDOI member or GCKS entity.
GDOI relies on the Phase 1 nonce mechanism in combination with a hash based message authentication code to protect against the replay or reflection of previous key management messages.
A denial of service attacker sends messages to a GDOI entity to cause that entity to perform unneeded message authentication operations.
GDOI uses the Phase 1 cookie mechanism to identify spurious messages prior to cryptographic hash processing.
This is a "weak" form of denial of service protection in that the GDOI entity must check for good cookies, which can be successfully imitated by a sophisticated attacker.
The Phase 1 cookie mechanism is stateful, and commits memory resources for cookies, but stateless cookies are a better defense against denial of service attacks.
The GROUPKEY PULL exchange allows a group member to request SAs and keys from a GCKS.
It runs as a "phase 2" protocol under protection of the Phase 1 security association.
Authentication Peer authentication is not required in the GROUPKEY PULL protocol.
It is running in the context of the Phase 1 protocol, which has previously authenticated the identity of the peer.
Message authentication is provided by HASH payloads in each message, where the HASH is defined to be over SKEYID a (derived in the Phase 1 exchange), the ISAKMP Message ID, and all payloads in the message.
Because only the two endpoints of the exchange know the SKEYID a value, this provides confidence that the peer sent the message.
Confidentiality Confidentiality is provided by the Phase 1 security association, after the manner described in [RFC2409].
Man in the Middle Attack Protection Message authentication (described above) includes a secret known only to the group member and GCKS when constructing a HASH payload.
This prevents man in the middle and connection hijacking attacks because an attacker would not be able to change the message undetected.
Replay/Reflection Attack Protection Nonces provide freshness of the GROUPKEY PULL exchange.
The group member and GCKS exchange nonce values first two messages.
These nonces are included in subsequent HASH payload calculations.
The Group member and GCKS MUST NOT perform any computationally expensive tasks before receiving a HASH with its own nonce included.
The GCKS MUST NOT update the group management state (e.g., LKH key tree) until it receives the third message in the exchange with a valid HASH payload including its own nonce.
Implementations SHOULD keep a record of recently received GROUPKEY PULL messages and reject messages that have already been processed.
This enables an early discard of the replayed messages.
Denial of Service Protection A GROUPKEY PULL message identifies its messages using a cookie pair from the Phase 1 exchange that precedes it.
The cookies provide a weak form of denial of service protection as described above, in the sense that a GROUPKEY PULL message with invalid cookies will be discarded.
The replay protection mechanisms described above provide the basis for denial of service protection.
The CERT payload in a GROUPKEY PULL exchange allows a group member or GCKS to submit a certificate containing authorization attributes to the peer as well as identifying a public/private key pair.
The GROUPKEY PULL POP payload enables authorization to be accomplished where the authorization infrastructure is different than the GROUPKEY PULL authentication infrastructure by proving that it is in possession of the private key.
The GROUPKEY PUSH exchange is a single message that allows a GCKS to send SAs and keys to group members.
This is likely to be sent to all members using an IP multicast group.
This provides an efficient rekey and group membership adjustment capability.
The GROUPKEY PULL exchange identifies a public key that is used for message authentication.
The GROUPKEY PUSH message is digitally signed using the corresponding private key held by the GCKS or its delegate.
This digital signature provides source authentication for the message.
Thus, GDOI protects the GCKS from impersonation in group environments.
The GCKS encrypts the GROUPKEY PUSH message with an encryption key that was established by the GROUPKEY PULL exchange.
Man in the Middle Attack Protection
This combination of confidentiality and message authentication services protects the GROUPKEY PUSH message from man in middle and connection hijacking attacks.
The GROUPKEY PUSH message includes a monotonically increasing sequence number to protect against replay and reflection attacks.
A group member will recognize a replayed message by comparing the sequence number to a sliding window, in the same manner as the ESP protocol uses sequence numbers.
Implementations SHOULD keep a record of recently received GROUPKEY PUSH messages and reject duplicate messages.
This enables an early discard of the replayed messages.
Denial of Service Protection A cookie pair identifies the security association for the GROUPKEY PUSH message.
The cookies thus serve as a weak form of denial of service protection for the GROUPKEY PUSH message.
The digital signature used for message authentication has a much greater computational cost than a message authentication code and could amplify the effects of a denial of service attack on GDOI members who process GROUPKEY PUSH messages.
The added cost of digital signatures is justified by the need to prevent GCKS impersonation:
If a shared symmetric key were used for GROUPKEY PUSH message authentication, then GCKS source authentication would be impossible and any member would be capable of GCKS impersonation.
The potential of the digital signature amplifying a denial of service attack is mitigated by the order of operations a group member takes, where the least expensive cryptographic operation is performed first.
The group member first decrypts the message using a symmetric cipher.
If it is a validly formed message then the sequence number is checked against the replay window.
Only if the sequence number is valid is the digital signature verified.
Thus in order for a denial of service attack to be mounted, an attacker would need to know both the symmetric encryption key used for confidentiality, and a valid sequence number.
Generally speaking this means only current group members can effectively deploy a denial of service attack.
If a group management algorithm (such as LKH) is used, forward access control may not be ensured in some cases.
This can happen if some group members are denied access to the group in the same GROUPKEY PUSH message as new policy and TEKs are delivered to the group.
As discussed in Section 4.2.1, forward access control can be maintained by sending multiple GROUPKEY PUSH messages, where the group membership changes are sent from the GCKS separate from the new policy and TEKs.
An ISAKMP DOI number is needed to identify an SA payload as a GDOI SA payload.
The IANA has assigned the value 2 to represent GDOI.
The present document defines new ISAKMP
See Section 5.0 for the payloads defined in this document, including the Next Payload values defined by the IANA to identify these payloads.
New Name spaces The present document describes many new name spaces for use in the GDOI payloads.
Those may be found in subsections under Section 5.0.
A new GDOI registry has been created for these name spaces.
Portions of name spaces marked "RESERVED" are reserved for IANA allocation.
New values MUST be added due to a Standards Action as defined in [RFC2434].
Portions of name spaces marked "Private Use"
may be allocated by implementations for their own purposes.
The IANA has assigned port 848 for use by GDOI.
Alternate GDOI Phase 1 protocols This section describes a manner in which other protocols could be used as GDOI Phase 1 protocols in place of the ISAKMP Phase 1 protocol.
However, they are not specified as a part of this document.
A separate document MUST be written in order for another protocol to be used as a GDOI Phase 1 protocol.
Other possible phase 1 protocols are also described in [GKMARCH].
Any GDOI phase 1 protocol MUST satisfy the requirements specified in Section 2 of this document.
Version 2 of the IKE protocol (IKEv2) is a work in progress [IKEv2].
That protocol seeks to simplify the IKE Phase 1 and Phase 2 protocols, and improve the security of the IKE protocol.
An IKEv2 Phase 1 negotiates an IPSEC SA during phase 1, which was not possible in IKE.
However, IKEv2 also defines a phase 2 protocol.
The phase 2 protocol is protected by the Phase 1, similar in concept to how IKE Quick Mode is protected by the IKE Phase 1 protocols in [RFC2409].
IKEv2 may not include a DOI value in the SA payload.
However, since GDOI uses a unique port, choice of a phase 2 protocol in the SA payload using a GDOI value is not necessary.
It is expected that an IKEv2 Phase 1 protocol definition could be run on the GDOI port.
The SA payload in the protocol would be specific to GDOI, or omitted if not needed at all.
The GROUPKEY PULL protocol would follow the IKEv2 Phase 1 protocol in the same manner as described in this document.
KINK Protocol A work in progress [KINK] has defined a method of encapsulating an IKE Quick Mode [RFC2409] encapsulated in Kerberos KRB AP REQ and KRB AP REP payloads.
KINK provides a low latency, computationally inexpensive, easily managed, and cryptographically sound method of setting up IPSec security associations.
The KINK message format includes a GDOI field in the KINK header.
The [KINK] document defines the DOI for the IPSEC DOI.
A new DOI for KINK could be defined which would encapsulate a GROUPKEY PULL exchange in the Kerberos KRB AP REQ and KRB AP REP payloads.
As such, GDOI would benefit from the computational efficiencies of KINK.
