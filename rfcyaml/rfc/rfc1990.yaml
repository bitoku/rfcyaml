- contents:
  - '                    The PPP Multilink Protocol (MP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document proposes a method for splitting, recombining and\n
    \  sequencing datagrams across multiple logical data links.  This work\n   was
    originally motivated by the desire to exploit multiple bearer\n   channels in
    ISDN, but is equally applicable to any situation in which\n   multiple PPP links
    connect two systems, including async links.  This\n   is accomplished by means
    of new PPP [2] options and protocols.\n   The differences between the current
    PPP Multilink specification (RFC\n   1717) and this memo are explained in Section
    11.  Any system\n   implementing the additional restrictions required by this
    memo will\n   be backwards compatible with conforming RFC 1717 implementations.\n"
  title: Abstract
- contents:
  - "Acknowledgements\n   The authors specifically wish to thank Fred Baker of ACC,
    Craig Fox\n   of Network Systems, Gerry Meyer of Spider Systems, Dan Brennan of\n
    \  Penril Datability Networks, Vernon Schryver of SGI (for the\n   comprehensive
    discussion of padding), and the members of the IP over\n   Large Public Data Networks
    and PPP Extensions working groups, for\n   much useful discussion on the subject.\n"
  title: Acknowledgements
- contents:
  - "Table of Contents\n   1. Introduction ................................................
    \   2\n   1.1. Motivation ................................................    2\n
    \  1.2. Functional Description ....................................    3\n   1.3.
    Conventions ...............................................    4\n   2. General
    Overview ............................................    4\n   3. Packet Formats
    ..............................................    7\n   3.1. Padding Considerations
    ....................................   10\n   4. Trading Buffer Space Against
    Fragment Loss ..................   10\n   4.1. Detecting Fragment Loss ...................................
    \  11\n   4.2. Buffer Space Requirements .................................   12\n
    \  5. PPP Link Control Protocol Extensions ........................   13\n   5.1.
    Configuration Option Types ................................   13\n   5.1.1. Multilink
    MRRU LCP option ...............................   14\n   5.1.2. Short Sequence
    Number Header Format Option ..............   15\n   5.1.3. Endpoint Discriminator
    Option ...........................   15\n   6. Initiating use of Multilink Headers
    .........................   19\n   7. Closing Member links ........................................
    \  20\n   8. Interaction with Other Protocols ............................   20\n
    \  9. Security Considerations .....................................   21\n   10.
    References .................................................   21\n   11. Differences
    from RFC 1717 ..................................   22\n   11.1. Negotiating Multilink,
    per se ............................   22\n   11.2. Initial Sequence Number defined
    ..........................   22\n   11.3. Default Value of the MRRU ................................
    \  22\n   11.4. Config-Nak of EID prohibited .............................   22\n
    \  11.5. Uniformity of Sequence Space .............................   22\n   11.6.
    Commencing and Abating use of Multilink Headers ..........   23\n   11.7. Manual
    Configuration and Bundle Assignment ...............   23\n   12. Authors' Addresses
    .........................................   24\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Motivation\n   Basic Rate and Primary Rate ISDN both offer the possibility
      of\n   opening multiple simultaneous channels between systems, giving users\n
      \  additional bandwidth on demand (for additional cost).  Previous\n   proposals
      for the transmission of internet protocols over ISDN have\n   stated as a goal
      the ability to make use of this capability, (e.g.,\n   Leifer et al., [1]).\n
      \  There are proposals being advanced for providing synchronization\n   between
      multiple streams at the bit level (the BONDING proposals);\n   such features
      are not as yet widely deployed, and may require\n   additional hardware for
      end system.  Thus, it may be useful to have a\n   purely software solution,
      or at least an interim measure.\n   There are other instances where bandwidth
      on demand can be exploited,\n   such as using a dialup async line at 28,800
      baud to back up a leased\n   synchronous line, or opening additional X.25 SVCs
      where the window\n   size is limited to two by international agreement.\n   The
      simplest possible algorithms of alternating packets between\n   channels on
      a space available basis (which might be called the Bank\n   Teller's algorithm)
      may have undesirable side effects due to\n   reordering of packets.\n   By means
      of a four-byte sequencing header, and simple synchronization\n   rules, one
      can split packets among parallel virtual circuits between\n   systems in such
      a way that packets do not become reordered, or at\n   least the likelihood of
      this is greatly reduced.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  Functional Description\n   The method discussed here is similar to the
      multilink protocol\n   described in ISO 7776 [4], but offers the additional
      ability to split\n   and recombine packets, thereby reducing latency, and potentially\n
      \  increase the effective maximum receive unit (MRU).  Furthermore,\n   there
      is no requirement here for acknowledged-mode operation on the\n   link layer,
      although that is optionally permitted.\n   Multilink is based on an LCP option
      negotiation that permits a system\n   to indicate to its peer that it is capable
      of combining multiple\n   physical links into a \"bundle\".  Only under exceptional
      conditions\n   would a given pair of systems require the operation of more than
      one\n   bundle connecting them.\n   Multilink is negotiated during the initial
      LCP option negotiation.  A\n   system indicates to its peer that it is willing
      to do multilink by\n   sending the multilink option as part of the initial LCP
      option\n   negotiation.  This negotiation indicates three things:\n   1.   The
      system offering the option is capable of combining multiple\n        physical
      links into one logical link;\n   2.   The system is capable of receiving upper
      layer protocol data\n        units (PDU) fragmented using the multilink header
      (described\n        later) and reassembling the fragments back into the original
      PDU\n        for processing;\n   3.   The system is capable of receiving PDUs
      of size N octets where N\n        is specified as part of the option even if
      N is larger than the\n        maximum receive unit (MRU) for a single physical
      link.\n   Once multilink has been successfully negotiated, the sending system\n
      \  is free to send PDUs encapsulated and/or fragmented with the\n   multilink
      header.\n"
    title: 1.2.  Functional Description
  - contents:
    - "1.3.  Conventions\n   The following language conventions are used in the items
      of\n   specification in this document:\n   o    MUST, SHALL or MANDATORY --
      the item is an absolute requirement\n        of the specification.\n   o    SHOULD
      or RECOMMENDED -- the item should generally be followed\n        for all but
      exceptional circumstances.\n   o    MAY or OPTIONAL -- the item is truly optional
      and may be\n        followed or ignored according to the needs of the implementor.\n"
    title: 1.3.  Conventions
  title: 1.  Introduction
- contents:
  - "2.  General Overview\n   In order to establish communications over a point-to-point
    link, each\n   end of the PPP link must first send LCP packets to configure the
    data\n   link during Link Establishment phase.  After the link has been\n   established,
    PPP provides for an Authentication phase in which the\n   authentication protocols
    can be used to determine identifiers\n   associated with each system connected
    by the link.\n   The goal of multilink operation is to coordinate multiple independent\n
    \  links between a fixed pair of systems, providing a virtual link with\n   greater
    bandwidth than any of the constituent members.  The aggregate\n   link, or bundle,
    is named by the pair of identifiers for two systems\n   connected by the multiple
    links.  A system identifier may include\n   information provided by PPP Authentication
    [3] and information\n   provided by LCP negotiation.  The bundled links can be
    different\n   physical links, as in multiple async lines, but may also be instances\n
    \  of multiplexed links, such as ISDN, X.25 or Frame Relay.  The links\n   may
    also be of different kinds, such as pairing dialup async links\n   with leased
    synchronous links.\n   We suggest that multilink operation can be modeled as a
    virtual PPP\n   link-layer entity wherein packets received over different physical\n
    \  link-layer entities are identified as belonging to a separate PPP\n   network
    protocol (the Multilink Protocol, or MP) and recombined and\n   sequenced according
    to information present in a multilink\n   fragmentation header.  All packets received
    over links identified as\n   belonging to the multilink arrangement are presented
    to the same\n   network-layer protocol processing machine, whether they have\n
    \  multilink headers or not.\n   The packets to be transmitted using the multilink
    procedure are\n   encapsulated according to the rules for PPP where the following\n
    \  options would have been manually configured:\n        o  No async control character
    Map\n        o  No Magic Number\n        o  No Link Quality Monitoring\n        o
    \ Address and Control Field Compression\n        o  Protocol Field Compression\n
    \       o  No Compound Frames\n        o  No Self-Describing-Padding\n   According
    to the rules specified in RFC1661, this means that an\n   implementation MUST
    accept reassembled packets with and without\n   leading zeroes present in the
    Protocol Field of the reassembled\n   packet.  Although it is explicitly forbidden
    below to include the\n   Address and Control fields (usually, the two bytes FF
    03) in the\n   material to be fragmented, it is a good defensive programming\n
    \  practice to accept the packet anyway, ignoring the two bytes if\n   present,
    as that is what RFC1661 specifies.\n   As a courtesy to implementations that perform
    better when certain\n   alignment obtains, it is suggested that a determination
    be made when\n   a bundle is created on whether to transmit leading zeroes by\n
    \  examining whether PFC has been negotiated on the first link admitted\n   into
    a bundle.  This determination should be kept in force so long as\n   a bundle
    persists.\n   Of course, individual links are permitted to have different settings\n
    \  for these options.  As described below, member links SHOULD negotiate\n   Self-Describing-Padding,
    even though pre-fragmented packets MUST NOT\n   be padded.  Since the Protocol
    Field Compression mode on the member\n   link allows a sending system to include
    a leading byte of zero or not\n   at its discretion, this is an alternative mechanism
    for generating\n   even-length packets.\n   LCP negotiations are not permitted
    on the bundle itself.  An\n   implementation MUST NOT transmit LCP Configure-Request,
    -Reject,\n   -Ack, -Nak, Terminate-Request or -Ack packets via the multilink\n
    \  procedure, and an implementation receiving them MUST silently discard\n   them.
    \ (By \"silently discard\" we mean to not generate any PPP packets\n   in response;
    an implementation is free to generate a log entry\n   registering the reception
    of the unexpected packet).  By contrast,\n   other LCP packets having control
    functions not associated with\n   changing the defaults for the bundle itself
    are permitted.  An\n   implementation MAY transmit LCP Code-Reject, Protocol-Reject,
    Echo-\n   Request, Echo-Reply and Discard-Request Packets.\n   The effective MRU
    for the logical-link entity is negotiated via an\n   LCP option.  It is irrelevant
    whether Network Control Protocol\n   packets are encapsulated in multilink headers
    or not, or even over\n   which link they are sent, once that link identifies itself
    as\n   belonging to a multilink arrangement.\n   Note that network protocols that
    are not sent using multilink headers\n   cannot be sequenced.  (And consequently
    will be delivered in any\n   convenient way).\n   For example, consider the case
    in Figure 1.  Link 1 has negotiated\n   network layers NL 1, NL 2, and MP between
    two systems.  The two\n   systems then negotiate MP over Link 2.\n   Frames received
    on link 1 are demultiplexed at the data link layer\n   according the PPP network
    protocol identifier and can be sent to NL\n   1, NL 2, or MP.  Link 2 will accept
    frames with all network protocol\n   identifiers that Link 1 does.\n   Frames
    received by MP are further demultiplexed at the network layer\n   according to
    the PPP network protocol identifier and sent to NL 1 or\n   NL 2.  Any frames
    received by MP for any other network layer\n   protocols are rejected using the
    normal protocol reject mechanism.\n                      Figure 1.  Multilink
    Overview.\n     Network Layer\n     -------------\n                    ______
    \          ______\n                   /      \\         /      \\\n                  |
    \ NL 1  |       |  NL 2  |\n                   \\______/         \\______/\n                     |
    | |             | | |\n                     | | +-------------o-o-o-+\n                     |
    +------+  +-----+ | | |\n                     |        |  |       | | |\n                     |
    +------o--o-------+ + |\n                     | |      |__|_        | |\n                     |
    |     /      \\      | |\n                     | |    |  MLCP  | <--- Link Layer\n
    \                    | |     \\______/    Demultiplexing\n                     |
    |        |          | |\n                     | |        |          | |\n                     |
    |        | <--- Virtual Link\n                     | |        |          | |\n
    \                    | |        |          | |\n                     | |        |
    \         | |\n                     | |        +          | |\n                  ___|_|
    \       |       ___|_|\n                 /      \\       |      /      \\\n                |
    \  LCP  |------+-----|  LCP   | <--- Link Layer\n                 \\______/              \\______/
    \      Demultiplexing\n                    |                      |\n                    |
    \                     |\n                  Link 1                 Link 2\n"
  title: 2.  General Overview
- contents:
  - "3.  Packet Formats\n   In this section we describe the layout of individual fragments,
    which\n   are the \"packets\" in the Multilink Protocol.  Network Protocol\n   packets
    are first encapsulated (but not framed) according to normal\n   PPP procedures,
    and large packets are broken up into multiple\n   segments sized appropriately
    for the multiple physical links.\n   Although it would otherwise be permitted
    by the PPP spec,\n   implementations MUST NOT include the Address and Control
    Field in the\n   logical entity to be fragmented.  A new PPP header consisting
    of the\n   Multilink Protocol Identifier, and the Multilink header is inserted\n
    \  before each section.  (Thus the first fragment of a multilink packet\n   in
    PPP will have two headers, one for the fragment, followed by the\n   header for
    the packet itself).\n   Systems implementing the multilink procedure are not required
    to\n   fragment small packets.  There is also no requirement that the\n   segments
    be of equal sizes, or that packets must be broken up at all.\n   A possible strategy
    for contending with member links of differing\n   transmission rates would be
    to divide the packets into segments\n   proportion to the transmission rates.
    \ Another strategy might be to\n   divide them into many equal fragments and distribute
    multiple\n   fragments per link, the numbers being proportional to the relative\n
    \  speeds of the links.\n   PPP multilink fragments are encapsulated using the
    protocol\n   identifier 0x00-0x3d.  Following the protocol identifier is a four\n
    \  byte header containing a sequence number, and two one bit fields\n   indicating
    that the fragment begins a packet or terminates a packet.\n   After negotiation
    of an additional PPP LCP option, the four byte\n   header may be optionally replaced
    by a two byte header with only a 12\n   bit sequence space.  Address & Control
    and Protocol ID compression\n   are assumed to be in effect.  Individual fragments
    will, therefore,\n   have the following format:\n             Figure 2:  Long
    Sequence Number Fragment Format.\n                +---------------+---------------+\n
    \  PPP Header:  | Address 0xff  | Control 0x03  |\n                +---------------+---------------+\n
    \               | PID(H)  0x00  | PID(L)  0x3d  |\n                +-+-+-+-+-+-+-+-+---------------+\n
    \  MP Header:   |B|E|0|0|0|0|0|0|sequence number|\n                +-+-+-+-+-+-+-+-+---------------+\n
    \               |      sequence number (L)      |\n                +---------------+---------------+\n
    \               |        fragment data          |\n                |               .
    \              |\n                |               .               |\n                |
    \              .               |\n                +---------------+---------------+\n
    \  PPP FCS:     |              FCS              |\n                +---------------+---------------+\n
    \            Figure 3:  Short Sequence Number Fragment Format.\n                +---------------+---------------+\n
    \  PPP Header:  | Address 0xff  | Control 0x03  |\n                +---------------+---------------+\n
    \               | PID(H)  0x00  | PID(L)  0x3d  |\n                +-+-+-+-+-------+---------------+\n
    \  MP Header:   |B|E|0|0|    sequence number    |\n                +-+-+-+-+-------+---------------+\n
    \               |    fragment data              |\n                |               .
    \              |\n                |               .               |\n                |
    \              .               |\n                +---------------+---------------+\n
    \  PPP FCS:     |              FCS              |\n                +---------------+---------------+\n
    \  The (B)eginning fragment bit is a one bit field set to 1 on the first\n   fragment
    derived from a PPP packet and set to 0 for all other\n   fragments from the same
    PPP packet.\n   The (E)nding fragment bit is a one bit field set to 1 on the last\n
    \  fragment and set to 0 for all other fragments.  A fragment may have\n   both
    the (B)eginning and (E)nding fragment bits set to 1.\n   The sequence field is
    a 24 bit or 12 bit number that is incremented\n   for every fragment transmitted.
    \ By default, the sequence field is 24\n   bits long, but can be negotiated to
    be only 12 bits with an LCP\n   configuration option described below.\n   Between
    the (E)nding fragment bit and the sequence number is a\n   reserved field, whose
    use is not currently defined, which MUST be set\n   to zero.  It is 2 bits long
    when the use of short sequence numbers\n   has been negotiated, 6 bits otherwise.\n
    \  In this multilink protocol, a single reassembly structure is\n   associated
    with the bundle.  The multilink headers are interpreted in\n   the context of
    this structure.\n   The FCS field shown in the diagram is inherited from the normal\n
    \  framing mechanism from the member link on which the packet is\n   transmitted.
    \ There is no separate FCS applied to the reconstituted\n   packet as a whole
    if transmitted in more than one fragment.\n"
  - contents:
    - "3.1.  Padding Considerations\n   Systems that support the multilink protocol
      SHOULD implement Self-\n   Describing-Padding.  A system that implements self-describing-padding\n
      \  by definition will either include the padding option in its initial\n   LCP
      Configure-Requests, or (to avoid the delay of a Configure-Reject)\n   include
      the padding option after receiving a NAK containing the\n   option.\n   A system
      that must pad its own transmissions but does not use Self-\n   Describing-Padding
      when not using multilink, MAY continue to not use\n   Self-Describing-Padding
      if it ensures by careful choice of fragment\n   lengths that only (E)nding fragments
      of packets are padded.  A system\n   MUST NOT add padding to any packet that
      cannot be recognized as\n   padded by the peer.  Non-terminal fragments MUST
      NOT be padded with\n   trailing material by any other method than Self-Describing-Padding.\n
      \  A system MUST ensure that Self-Describing-Padding as described in RFC\n   1570
      [11] is negotiated on the individual link before transmitting\n   any multilink
      data packets if it might pad non-terminal fragments or\n   if it would use network
      or compression protocols that are vulnerable\n   to padding, as described in
      RFC 1570.  If necessary, the system that\n   adds padding MUST use LCP Configure-NAK's
      to elicit a Configure-\n   Request for Self-Describing-Padding from the peer.\n
      \  Note that LCP Configure-Requests can be sent at any time on any link,\n   and
      that the peer will always respond with a Configure-Request of its\n   own.  A
      system that pads its transmissions but uses no protocols\n   other than multilink
      that are vulnerable to padding MAY delay\n   ensuring that the peer has Configure-Requested
      Self-Describing-\n   Padding until it seems desireable to negotiate the use
      of Multilink\n   itself.  This permits the interoperability of a system that
      pads with\n   older peers that support neither Multilink nor Self-Describing-\n
      \  Padding.\n"
    title: 3.1.  Padding Considerations
  title: 3.  Packet Formats
- contents:
  - "4.  Trading Buffer Space Against Fragment Loss\n   In a multilink procedure one
    channel may be delayed with respect to\n   the other channels in the bundle.  This
    can lead to fragments being\n   received out of order, thus increasing the difficulty
    in detecting\n   the loss of a fragment.  The task of estimating the amount of
    space\n   required for buffering on the receiver becomes more complex because\n
    \  of this.  In this section we discuss a technique for declaring that a\n   fragment
    is lost, with the intent of minimizing the buffer space\n   required, yet minimizing
    the number of avoidable packet losses.\n"
  - contents:
    - "4.1.  Detecting Fragment Loss\n   On each member link in a bundle, the sender
      MUST transmit fragments\n   with strictly increasing sequence numbers (modulo
      the size of the\n   sequence space).  This requirement supports a strategy for
      the\n   receiver to detect lost fragments based on comparing sequence\n   numbers.
      \ The sequence number is not reset upon each new PPP packet,\n   and a sequence
      number is consumed even for those fragments which\n   contain an entire PPP
      packet, i.e., one in which both the (B)eginning\n   and (E)nding bits are set.\n
      \  An implementation MUST set the sequence number of the first fragment\n   transmited
      on a newly-constructed bundle to zero.  (Joining a\n   secondary link to an
      exisiting bundle is invisible to the protocol,\n   and an implementation MUST
      NOT reset the sequence number space in\n   this situation).\n   The receiver
      keeps track of the incoming sequence numbers on each\n   link in a bundle and
      maintains the current minimum of the most\n   recently received sequence number
      over all the member links in the\n   bundle (call this M).  The receiver detects
      the end of a packet when\n   it receives a fragment bearing the (E)nding bit.
      \ Reassembly of the\n   packet is complete if all sequence numbers up to that
      fragment have\n   been received.\n   A lost fragment is detected when M advances
      past the sequence number\n   of a fragment bearing an (E)nding bit of a packet
      which has not been\n   completely reassembled (i.e., not all the sequence numbers
      between\n   the fragment bearing the (B)eginning bit and the fragment bearing
      the\n   (E)nding bit have been received).  This is because of the increasing\n
      \  sequence number rule over the bundle.  Any sequence number so\n   detected
      is assumed to correspond to a fragment which has been lost.\n   An implementation
      MUST assume that if a fragment bears a (B)eginning\n   bit, that the previously
      numbered fragment bore an (E)nding bit.\n   Thus if a packet is lost bearing
      the (E)nding bit, and the packet\n   whose fragment number is M contains a (B)eginning
      bit, the\n   implementation MUST discard fragments for all unassembled packets\n
      \  through M-1, but SHOULD NOT discard the fragment bearing the new\n   (B)eginning
      bit on this basis alone.\n   The detection of a lost fragment, whose sequence
      number was deduced\n   to be U, causes the receiver to discard all fragments
      up to the\n   lowest numbered fragment with an ending bit (possibly deduced)\n
      \  greater than or equal to U.  However, the quantity M may jump into\n   the
      middle of a chain of packets which can be successful completed.\n   Fragments
      may be lost due to corruption of individual packets or\n   catastrophic loss
      of the link (which may occur only in one\n   direction).  This version of the
      multilink protocol mandates no\n   specific procedures for the detection of
      failed links.  The PPP link\n   quality management facility, or the periodic
      issuance of LCP echo-\n   requests could be used to achieve this.\n   Senders
      SHOULD avoid keeping any member links idle to maximize early\n   detection of
      lost fragments by the receiver, since the value of M is\n   not incremented
      on idle links.  Senders SHOULD rotate traffic among\n   the member links if
      there isn't sufficient traffic to overflow the\n   capacity of one link to avoid
      idle links.\n   Loss of the final fragment of a transmission can cause the receiver\n
      \  to stall until new packets arrive.  The likelihood of this may be\n   decreased
      by sending a null fragment on each member link in a bundle\n   that would otherwise
      become idle immediately after having transmitted\n   a fragment bearing the
      (E)nding bit, where a null fragment is one\n   consisting only of a multilink
      header bearing both the (B)egin and\n   (E)nding bits (i.e., having no payload).
      \ Implementations concerned\n   about either wasting bandwidth or per packet
      costs are not required\n   to send null fragments and may elect to defer sending
      them until a\n   timer expires, with the marginally increased possibility of
      lengthier\n   stalls in the receiver.  The receiver SHOULD implement some type
      of\n   link idle timer to guard against indefinite stalls.\n   The increasing
      sequence per link rule prohibits the reallocation of\n   fragments queued up
      behind a failing link to a working one, a\n   practice which is not unusual
      for implementations of ISO multilink\n   over LAPB [4].\n"
    title: 4.1.  Detecting Fragment Loss
  - contents:
    - "4.2.  Buffer Space Requirements\n   There is no amount of buffering that will
      guarantee correct detection\n   of fragment loss, since an adversarial peer
      may withhold a fragment\n   on one channel and send arbitrary amounts on the
      others.  For the\n   usual case where all channels are transmitting, you can
      show that\n   there is a minimum amount below which you could not correctly
      detect\n   packet loss.  The amount depends on the relative delay between the\n
      \  channels, (D[channel-i,channel-j]), the data rate of each channel,\n   R[c],
      the maximum fragment size permitted on each channel, F[c], and\n   the total
      amount of buffering the transmitter has allocated amongst\n   the channels.\n
      \  When using PPP, the delay between channels could be estimated by\n   using
      LCP echo request and echo reply packets.  (In the case of links\n   of different
      transmission rates, the round trip times should be\n   adjusted to take this
      into account.)  The slippage for each channel\n   is defined as the bandwidth
      times the delay for that channel relative\n   to the channel with the longest
      delay, S[c] = R[c] * D[c,c-worst].\n   (S[c-worst] will be zero, of course!)\n
      \  A situation which would exacerbate sequence number skew would be one\n   in
      which there is extremely bursty traffic (almost allowing all\n   channels to
      drain), and then where the transmitter would first queue\n   up as many consecutively
      numbered packets on one link as it could,\n   then queue up the next batch on
      a second link, and so on.  Since\n   transmitters must be able to buffer at
      least a maximum- sized\n   fragment for each link (and will usually buffer up
      at least two) A\n   receiver that allocates any less than S[1] + S[2] + ...
      + S[N] + F[1]\n   + ... + F[N], will be at risk for incorrectly assuming packet
      loss,\n   and therefore, SHOULD allocate at least twice that.\n"
    title: 4.2.  Buffer Space Requirements
  title: 4.  Trading Buffer Space Against Fragment Loss
- contents:
  - "5.  PPP Link Control Protocol Extensions\n   If reliable multilink operation
    is desired, PPP Reliable Transmission\n   [6] (essentially the use of ISO LAPB)
    MUST be negotiated prior to the\n   use of the Multilink Protocol on each member
    link.\n   Whether or not reliable delivery is employed over member links, an\n
    \  implementation MUST present a signal to the NCP's running over the\n   multilink
    arrangement that a loss has occurred.\n   Compression may be used separately on
    each member link, or run over\n   the bundle (as a logical group link).  The use
    of multiple\n   compression streams under the bundle (i.e., on each link separately)\n
    \  is indicated by running the Compression Control Protocol [5] but with\n   an
    alternative PPP protocol ID.\n"
  - contents:
    - "5.1.  Configuration Option Types\n   The Multilink Protocol introduces the
      use of additional LCP\n   Configuration Options:\n        o  Multilink Maximum
      Received Reconstructed Unit\n        o  Multilink Short Sequence Number Header
      Format\n        o  Endpoint Discriminator\n"
    - contents:
      - "5.1.1.  Multilink MRRU LCP option\n                   Figure 4:  Multilink
        MRRU LCP option\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Type = 17   |   Length = 4  | Max-Receive-Reconstructed-Unit|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The presence of this LCP option indicates that the system sending it\n
        \  implements the PPP Multilink Protocol.  If not rejected, the system\n   will
        construe all packets received on this link as being able to be\n   processed
        by a common protocol machine with any other packets\n   received from the
        same peer on any other link on which this option\n   has been accepted.\n
        \  The Max-Receive-Reconstructed unit field is two octets, and specifies\n
        \  the maximum number of octets in the Information fields of reassembled\n
        \  packets.  A system MUST be able to receive the full 1500 octet\n   Information
        field of any reassembled PPP packet although it MAY\n   attempt to negotiate
        a smaller, or larger value.  The number 1500\n   here comes from the specification
        for the MRU LCP option in PPP; if\n   this requirement is changed in a future
        version of RFC 1661, the same\n   rules will apply here.\n   A system MUST
        include the LCP MRRU option in every LCP negotiation\n   intended to instantiate
        a bundle or to join an existing bundle.  If\n   the LCP MRRU option is offered
        on a link which is intended to join an\n   existing bundle, a system MUST
        offer the same Max-Receive-\n   Reconstruct-Unit value previously negotiated
        for the bundle.\n   A system MUST NOT send any multilink packets on any link
        unless its\n   peer has offered the MMRU LCP option and the system has configure-\n
        \  Ack'ed it during the most recent LCP negotiation on that link.  A\n   system
        MAY include the MMRU LCP option in a configure-NAK, if its\n   peer has not
        offered it (until, according to PPP rules, the peer\n   configure-Reject's
        it).\n   Note: the MRRU value conveyed im this option corresponds to the MRU\n
        \  of the bundle when conceptualized as a PPP entity; but the rules for\n
        \  the Multilink MRRU option are different from the LCP MRU option, as\n   some
        value MUST be offered in every LCP negotiation, and that\n   confirmation
        of this option is required prior to multilink\n   interpretation.\n"
      title: 5.1.1.  Multilink MRRU LCP option
    - contents:
      - "5.1.2.  Short Sequence Number Header Format Option\n           Figure 5:
        \ Short Sequence Number Header Format Option\n    0                   1\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Type = 18   |  Length = 2   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  This option advises the peer that the implementation wishes to\n   receive
        fragments with short, 12 bit sequence numbers.  When a peer\n   system configure-Ack's
        this option, it MUST transmit all multilink\n   packets on all links of the
        bundle with 12 bit sequence numbers or\n   configure-Reject the option.  If
        12 bit sequence numbers are desired,\n   this option MUST be negotiated when
        the bundle is instantiated, and\n   MUST be explicitly included in every LCP
        configure request offered by\n   a system when the system intends to include
        that link in an existing\n   bundle using 12 bit sequence numbers.  If this
        option is never\n   negotiated during the life of a bundle, sequence numbers
        are 24 bits\n   long.\n   An implementation wishing to transmit multilink
        fragments with short\n   sequence numbers MAY include the multilink short
        sequence number in a\n   configure-NAK to ask that the peer respond with a
        request to receive\n   short sequence numbers.  The peer is not compelled
        to respond with\n   the option.\n"
      title: 5.1.2.  Short Sequence Number Header Format Option
    - contents:
      - "5.1.3.  Endpoint Discriminator Option\n                 Figure 7:  Endpoint
        Discriminator Option\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Type = 19   |     Length    |    Class      |  Address ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The Endpoint Discriminator Option represents identification of the\n   system
        transmitting the packet.  This option advises a system that\n   the peer on
        this link could be the same as the peer on another\n   existing link.  If
        the option distinguishes this peer from all\n   others, a new bundle MUST
        be established from the link being\n   negotiated.  If this option matches
        the class and address of some\n   other peer of an existing link, the new
        link MUST be joined to the\n   bundle containing the link to the matching
        peer or MUST establish a\n   new bundle, depending on the decision tree shown
        in (1) through (4)\n   below.\n   To securely join an existing bundle, a PPP
        authentication protocol\n   [3] must be used to obtain authenticated information
        from the peer to\n   prevent a hostile peer from joining an existing bundle
        by presenting\n   a falsified discriminator option.\n   This option is not
        required for multilink operation.  If a system\n   does not receive the Multilink
        MRRU option, but does receive the\n   Endpoint Discriminator Option, and there
        is no manual configuration\n   providing outside information, the implementation
        MUST NOT assume\n   that multilink operation is being requested on this basis
        alone.\n   As there is also no requirement for authentication, there are four\n
        \  sets of scenarios:\n   (1)  No authentication, no discriminator:\n        All
        new links MUST be joined to one bundle, unless\n        there is manual configuration
        to the contrary.\n        It is also permissible to have more than one manually\n
        \       configured bundle connecting two given systems.\n   (2)  Discriminator,
        no authentication:\n        Discriminator match -> MUST join matching bundle,\n
        \       discriminator mismatch -> MUST establish new bundle.\n   (3)  No discriminator,
        authentication:\n        Authenticated match -> MUST join matching bundle,\n
        \       authenticated mismatch -> MUST establish new bundle.\n   (4)  Discriminator,
        authentication:\n        Discriminator match and authenticated match -> MUST
        join bundle,\n        discriminator mismatch -> MUST establish new bundle,\n
        \       authenticated mismatch -> MUST establish new bundle.\n   The option
        contains a Class which selects an identifier address space\n   and an Address
        which selects a unique identifier within the class\n   address space.\n   This
        identifier is expected to refer to the mechanical equipment\n   associated
        with the transmitting system.  For some classes,\n   uniqueness of the identifier
        is global and is not bounded by the\n   scope of a particular administrative
        domain.  Within each class,\n   uniqueness of address values is controlled
        by a class dependent\n   policy for assigning values.\n   Each endpoint may
        chose an identifier class without restriction.\n   Since the objective is
        to detect mismatches between endpoints\n   erroneously assumed to be alike,
        mismatch on class alone is\n   sufficient.  Although no one class is recommended,
        classes which have\n   universally unique values are preferred.\n   This option
        is not required to be supported either by the system or\n   the peer.  If
        the option is not present in a Configure-Request, the\n   system MUST NOT
        generate a Configure-Nak of this option for any\n   reason; instead it SHOULD
        behave as if it had received the option\n   with Class = 0, Address = 0.  If
        a system receives a Configure-Nak or\n   Configure-Reject of this option,
        it MUST remove it from any\n   additional Configure-Request.\n   The size
        is determined from the Length field of the element.  For\n   some classes,
        the length is fixed, for others the length is variable.\n   The option is
        invalid if the Length field indicates a size below the\n   minimum for the
        class.\n   An implementation MAY use the Endpoint Discriminator to locate\n
        \  administration or authentication records in a local database.  Such\n   use
        of this option is incidental to its purpose and is deprecated\n   when a PPP
        Authentication protocol [3] can be used instead.  Since\n   some classes permit
        the peer to generate random or locally assigned\n   address values, use of
        this option as a database key requires prior\n   agreement between peer administrators.\n
        \  The specification of the subfields are:\n   Type\n        19 = for Endpoint
        Discriminator\n   Length\n        3 + length of Address\n   Class\n        The
        Class field is one octet and indicates the identifier\n        address space.
        \ The most up-to-date values of the LCP Endpoint\n        Discriminator Class
        field are specified in the most recent\n        \"Assigned Numbers\" RFC [7].
        \ Current values are assigned as\n        follows:\n        0    Null Class\n
        \       1    Locally Assigned Address\n        2    Internet Protocol (IP)
        Address\n        3    IEEE 802.1 Globally Assigned MAC Address\n        4
        \   PPP Magic-Number Block\n        5    Public Switched Network Directory
        Number\n   Address\n        The Address field is one or more octets and indicates
        the\n        identifier address within the selected class.  The length and\n
        \       content depend on the value of the Class as follows:\n        Class
        0 - Null Class\n             Maximum Length: 0\n             Content:\n             This
        class is the default value if the option is not\n             present in a
        received Configure-Request.\n        Class 1 - Locally Assigned Address\n
        \            Maximum Length: 20\n             Content:\n             This
        class is defined to permit a local assignment in the\n             case where
        use of one of the globally unique classes is not\n             possible.  Use
        of a device serial number is suggested.  The\n             use of this class
        is deprecated since uniqueness is not\n             guaranteed.\n        Class
        2 - Internet Protocol (IP) Address\n             Fixed Length: 4\n             Content:\n
        \            An address in this class contains an IP host address as\n             defined
        in [8].\n        Class 3 - IEEE 802.1 Globally Assigned MAC Address\n             Fixed
        Length: 6\n             Content:\n             An address in this class contains
        an IEEE 802.1 MAC address\n             in canonical (802.3) format [9].  The
        address MUST have the\n             global/local assignment bit clear and
        MUST have the\n             multicast/specific bit clear.  Locally assigned
        MAC\n             addresses should be represented using Class 1.\n        Class
        4 - PPP Magic-Number Block\n             Maximum Length: 20\n             Content:\n
        \            This is not an address but a block of 1 to 5 concatenated\n             32
        bit PPP Magic-Numbers as defined in [2].  This class\n             provides
        for automatic generation of a value likely but not\n             guaranteed
        to be unique.  The same block MUST be used by an\n             endpoint continuously
        during any period in which at least\n             one link is in the LCP Open
        state.  The use of this class\n             is deprecated.\n             Note
        that PPP Magic-Numbers are used in [2] to detect\n             unexpected
        loopbacks of a link from an endpoint to itself.\n             There is a small
        probability that two distinct endpoints\n             will generate matching
        magic-numbers.  This probability is\n             geometrically reduced when
        the LCP negotiation is repeated\n             in search of the desired mismatch,
        if a peer can generate\n             uncorrelated magic-numbers.\n             As
        used here, magic-numbers are used to determine if two\n             links
        are in fact from the same peer endpoint or from two\n             distinct
        endpoints.  The numbers always match when there is\n             one endpoint.
        \ There is a small probability that the\n             numbers will match even
        if there are two endpoints.  To\n             achieve the same confidence
        that there is not a false match\n             as for LCP loopback detection,
        several uncorrelated magic-\n             numbers can be combined in one block.\n
        \       Class 5 - Public Switched Network Directory Number\n             Maximum
        Length: 15\n             Content:\n             An address in this class contains
        an octet sequence as\n             defined by I.331 (E.164) representing an
        international\n             telephone directory number suitable for use to
        access the\n             endpoint via the public switched telephone network
        [10].\n"
      title: 5.1.3.  Endpoint Discriminator Option
    title: 5.1.  Configuration Option Types
  title: 5.  PPP Link Control Protocol Extensions
- contents:
  - "6.  Initiating use of Multilink Headers\n   When the use of the Multilink protocol
    has been negotiated on a link\n   (say Y), and the link is being added to a bundle
    which currently\n   contains a single existing link (say X), a system MUST transmit
    a\n   Multilink-encapsulated packet on X before transmitting any Multilink-\n
    \  encapsulated packets on Y.\n   Since links may be added and removed from a
    bundle without destroying\n   the state associated with it, the fragment should
    be assigned the\n   appropriate (next) fragment number.  As noted earlier, the
    first\n   fragment transmitted in the life of a bundle is assigned fragment\n
    \  number 0.\n"
  title: 6.  Initiating use of Multilink Headers
- contents:
  - "7.  Closing Member links\n   Member links may be terminated according to normal
    PPP LCP procedures\n   using LCP Terminate-Request and Terminate-Ack packets on
    that member\n   link.  Since it is assumed that member links usually do not reorder\n
    \  packets, receipt of a terminate ack is sufficient to assume that any\n   multilink
    protocol packets ahead of it are at no special risk of\n   loss.\n   Receipt of
    an LCP Terminate-Request on one link does not conclude the\n   procedure on the
    remaining links.\n   So long as any member links in the bundle are active, the
    PPP state\n   for the bundle persists as a separate entity.  However, if the there\n
    \  is a unique link in the bundle, and all the other links were closed\n   gracefully
    (with Terminate-Ack), an implementation MAY cease using\n   multilink\n   headers.\n
    \  If the multilink procedure is used in conjunction with PPP reliable\n   transmission,
    and a member link is not closed gracefully, the\n   implementation should expect
    to receive packets which violate the\n   increasing sequence number rule.\n"
  title: 7.  Closing Member links
- contents:
  - "8.  Interaction with Other Protocols\n   In the common case, LCP, and the Authentication
    Control Protocol\n   would be negotiated  over each member link.  The Network
    Protocols\n   themselves and associated control exchanges would normally have
    been\n   conducted once, on the bundle.\n   In some instances it may be desirable
    for some Network Protocols to\n   be exempted from sequencing requirements, and
    if the MRU sizes of the\n   link did not cause fragmentation, those protocols
    could be sent\n   directly over the member links.\n   Although explicitly discouraged
    above, if there were several member\n   links connecting two implementations,
    and independent sequencing of\n   two protocol sets were desired, but blocking
    of one by the other was\n   not, one could describe two multilink procedures by
    assigning\n   multiple endpoint identifiers to a given system.  Each member link,\n
    \  however, would only belong to one bundle.  One could think of a\n   physical
    router as housing two logically separate implementations,\n   each of which is
    independently configured.\n   A simpler solution would be to have one link refuse
    to join the\n   bundle, by sending a Configure-Reject in response to the Multilink\n
    \  LCP option.\n"
  title: 8.  Interaction with Other Protocols
- contents:
  - "9.  Security Considerations\n   Operation of this protocol is no more and no
    less secure than\n   operation of the PPP authentication protocols [3].  The reader
    is\n   directed there for further discussion.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  References\n   [1] Leifer, D., Sheldon, S., and B. Gorsline, \"A Subnetwork
    Control\n       Protocol for ISDN Circuit-Switching\", University of Michigan\n
    \      (unpublished), March 1991.\n   [2] Simpson, W., Editor, \"The Point-to-Point
    Protocol (PPP)\", STD 51,\n       RFC 1661, Daydreamer, July 1994.\n   [3] Lloyd,
    B., and W. Simpson, \"PPP Authentication Protocols\", RFC\n       1334, Lloyd
    Internetworking, Daydreamer, October 1992.\n   [4] International Organisation
    for Standardization, \"HDLC -\n       Description of the X.25 LAPB-Compatible
    DTE Data Link\n       Procedures\", International Standard 7776, 1988\n   [5]
    Rand, D., \"The PPP Compression Control Protocol (CCP)\", PPP\n       Extensions
    Working Group, RFC 1962, June 1996.\n   [6] Rand, D., \"PPP Reliable Transmission\",
    RFC 1663, Novell, July\n       1994\n   [7] Reynolds, J., and J. Postel, \"Assigned
    Numbers\", STD 2, RFC 1700,\n       USC/Information Sciences Institute, October
    1994.\n   [8] Postel, J., Editor, \"Internet Protocol - DARPA Internet Program\n
    \      Protocol Specification\", STD 5, RFC 791, USC/Information Sciences\n       Institute,
    September 1981.\n   [9] Institute of Electrical and Electronics Engineers, Inc.,
    \"IEEE\n       Local and Metropolitan Area Networks: Overview and Architecture\",\n
    \      IEEE Std. 802-1990, 1990.\n  [10] The International Telegraph and Telephone
    Consultative Committee\n       (CCITT), \"Numbering Plan for the ISDN Area\",
    Recommendation I.331\n       (E.164), 1988.\n  [11] Simpson, W., Editor, \"PPP
    LCP Extensions\", RFC 1570, Daydreamer,\n       January 1994.\n"
  title: 10.  References
- contents:
  - "11.  Differences from RFC 1717\n   This section documents differences from RFC
    1717.  There are\n   restrictions placed on implementations that were absent in
    RFC 1717;\n   systems obeying these restrictions are fully interoperable with
    RFC\n   1717 - compliant systems.\n"
  - contents:
    - "11.1.  Negotiating Multilink, per se\n   RFC 1717 permitted either the use
      of the Short Sequence Number Header\n   Format (SSNHF) or the Maximum Reconstructed
      Receive Unit (MRRU)\n   options by themselves to indicate the intent to negotiate
      multilink.\n   This specification forbids the use of the SSNHF option by itself;
      but\n   does permit the specific of both options together.  Any\n   implementation
      which otherwise conforms to rfc1717 and also obeys\n   this restriction will
      interoperate with any RFC 1717 implementation.\n"
    title: 11.1.  Negotiating Multilink, per se
  - contents:
    - "11.2.  Initial Sequence Number defined\n   This specification requires that
      the first sequence number\n   transmitted after the virtual link has reached
      to open state be 0.\n"
    title: 11.2.  Initial Sequence Number defined
  - contents:
    - "11.3.  Default Value of the MRRU\n   This specfication removes the default
      value for the MRRU, (since it\n   must always be negotiated with some value),
      and specifies that an\n   implementation must be support an MRRU with same value
      as the default\n   MRU size for PPP.\n"
    title: 11.3.  Default Value of the MRRU
  - contents:
    - "11.4.  Config-Nak of EID prohibited\n   This specification forbids the config-Naking
      of an EID for any\n   reason.\n"
    title: 11.4.  Config-Nak of EID prohibited
  - contents:
    - "11.5.  Uniformity of Sequence Space\n   This specification requires that the
      same sequence format be employed\n   on all links in a bundle.\n"
    title: 11.5.  Uniformity of Sequence Space
  - contents:
    - "11.6.  Commencing and Abating use of Multilink Headers\n   This memo specifies
      how one should start the use of Multilink Headers\n   when a link is added,
      and under what circumstances it is safe to\n   discontinue their use.\n"
    title: 11.6.  Commencing and Abating use of Multilink Headers
  - contents:
    - "11.7.  Manual Configuration and Bundle Assignment\n   The document explicitly
      permits multiple bundles to be manually\n   configured in the absence of both
      the Endpoint Descriminator and any\n   form of authentication.\n"
    title: 11.7.  Manual Configuration and Bundle Assignment
  title: 11.  Differences from RFC 1717
- contents:
  - "13.  Authors' Addresses\n   Keith Sklower\n   Computer Science Department\n   384
    Soda Hall, Mail Stop 1776\n   University of California\n   Berkeley, CA 94720-1776\n
    \  Phone:  (510) 642-9587\n   EMail:  sklower@CS.Berkeley.EDU\n   Brian Lloyd\n
    \  Lloyd Internetworking\n   3031 Alhambra Drive\n   Cameron Park, CA 95682\n
    \  Phone: (916) 676-1147\n   EMail:  brian@lloyd.com\n   Glenn McGregor\n   Lloyd
    Internetworking\n   3031 Alhambra Drive\n   Cameron Park, CA 95682\n   Phone:
    (916) 676-1147\n   EMail: glenn@lloyd.com\n   Dave Carr\n   Newbridge Networks
    Corporation\n   600 March Road\n   P.O. Box 13600\n   Kanata, Ontario,\n   Canada,
    K2K 2E6\n   Phone:  (613) 591-3600\n   EMail:  dcarr@Newbridge.COM\n   Tom Coradetti\n
    \  Sidewalk Software\n   1190 Josephine Road\n   Roseville, MN 55113\n   Phone:
    (612) 490 7856\n   EMail: 70761.1664@compuserve.com\n"
  title: 13.  Authors' Addresses
