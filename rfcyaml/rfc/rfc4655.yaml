- title: __initial_text__
  contents:
  - '          A Path Computation Element (PCE)-Based Architecture

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Constraint-based path computation is a fundamental building block\
    \ for\n   traffic engineering systems such as Multiprotocol Label Switching\n\
    \   (MPLS) and Generalized Multiprotocol Label Switching (GMPLS)\n   networks.\
    \  Path computation in large, multi-domain, multi-region, or\n   multi-layer networks\
    \ is complex and may require special computational\n   components and cooperation\
    \ between the different network domains.\n   This document specifies the architecture\
    \ for a Path Computation\n   Element (PCE)-based model to address this problem\
    \ space.  This\n   document does not attempt to provide a detailed description\
    \ of all\n   the architectural components, but rather it describes a set of\n\
    \   building blocks for the PCE architecture from which solutions may be\n   constructed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Definitions .....................................................4\n   4.\
    \ Motivation for a PCE-Based Architecture .........................6\n      4.1.\
    \ CPU-Intensive Path Computation .............................6\n      4.2. Partial\
    \ Visibility .........................................7\n      4.3. Absence of\
    \ the TED or Use of Non-TE-Enabled IGP ............7\n      4.4. Node Outside\
    \ the Routing Domain ............................8\n      4.5. Network Element\
    \ Lacks Control Plane or Routing Capability ..8\n      4.6. Backup Path Computation\
    \ for Bandwidth Protection ...........8\n      4.7. Multi-layer Networks .......................................9\n\
    \      4.8. Path Selection Policy ......................................9\n  \
    \    4.9. Non-Motivations ...........................................10\n    \
    \       4.9.1. The Whole Internet .................................10\n      \
    \     4.9.2. Guaranteed TE LSP Establishment ....................10\n   5. Overview\
    \ of the PCE-Based Architecture .........................11\n      5.1. Composite\
    \ PCE Node ........................................11\n      5.2. External PCE\
    \ ..............................................12\n      5.3. Multiple PCE Path\
    \ Computation .............................13\n      5.4. Multiple PCE Path Computation\
    \ with Inter-PCE\n           Communication .............................................14\n\
    \      5.5. Management-Based PCE Usage ................................15\n  \
    \    5.6. Areas for Standardization .................................16\n   6.\
    \ PCE Architectural Considerations ...............................16\n      6.1.\
    \ Centralized Computation Model .............................16\n      6.2. Distributed\
    \ Computation Model .............................17\n      6.3. Synchronization\
    \ ...........................................17\n      6.4. PCE Discovery and\
    \ Load Balancing ..........................18\n      6.5. Detecting PCE Liveness\
    \ ....................................20\n      6.6. PCC-PCE and PCE-PCE Communication\
    \ .........................20\n      6.7. PCE TED Synchronization ...................................22\n\
    \      6.8. Stateful versus Stateless PCEs ............................23\n  \
    \    6.9. Monitoring ................................................25\n    \
    \  6.10. Confidentiality ..........................................25\n      6.11.\
    \ Policy ...................................................26\n           6.11.1.\
    \ PCE Policy Architecture ...........................26\n           6.11.2. Policy\
    \ Realization ................................28\n           6.11.3. Type of Policies\
    \ ..................................28\n           6.11.4. Relationship to Signaling\
    \ .........................29\n      6.12. Unsolicited Interactions .................................30\n\
    \      6.13. Relationship with Crankback ..............................30\n  \
    \ 7. The View from the Path Computation Client ......................31\n   8.\
    \ Evaluation Metrics .............................................32\n   9. Manageability\
    \ Considerations ...................................33\n      9.1. Control of\
    \ Function and Policy ............................33\n      9.2. Information and\
    \ Data Models ...............................34\n      9.3. Liveness Detection\
    \ and Monitoring .........................34\n      9.4. Verifying Correct Operation\
    \ ...............................35\n      9.5. Requirements on Other Protocols\
    \ and Functional\n           Components ................................................35\n\
    \      9.6. Impact on Network Operation ...............................36\n  \
    \    9.7. Other Considerations ......................................36\n   10.\
    \ Security Considerations .......................................37\n   11. Acknowledgements\
    \ ..............................................37\n   12. Informative References\
    \ ........................................38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Constraint-based path computation is a fundamental building\
    \ block for\n   traffic engineering in MPLS [RFC3209] and GMPLS [RFC3473] networks.\n\
    \   [RFC2702] describes requirements for traffic engineering in MPLS\n   networks,\
    \ while [RFC4105] and [RFC4216] describe traffic engineering\n   requirements\
    \ in inter-area and inter-AS environments, respectively.\n   Path computation\
    \ in large, multi-domain networks is complex and may\n   require special computational\
    \ components and cooperation between the\n   elements in different domains.  This\
    \ document specifies the\n   architecture for a Path Computation Element (PCE)-based\
    \ model to\n   address this problem space.\n   This document describes a set of\
    \ building blocks for the PCE\n   architecture from which solutions may be constructed.\
    \  For example,\n   it discusses PCE-based implementations including composite,\
    \ external,\n   and multiple PCE path computation.  Furthermore, it discusses\n\
    \   architectural considerations including centralized computation,\n   distributed\
    \ computation, synchronization, PCE discovery and load\n   balancing, detection\
    \ of PCE liveness, communication between Path\n   Computation Clients (PCCs) and\
    \ the PCE (PCC-PCE communication) and\n   PCE-PCE communication, Traffic Engineering\
    \ Database (TED)\n   synchronization, stateful and stateless PCEs, monitoring,\
    \ policy and\n   confidentiality, and evaluation metrics.\n   The model of the\
    \ Internet is to distribute network functionality\n   (e.g., routing) within the\
    \ network.  PCE functionality is not\n   intended to contradict this model and\
    \ can be used to match the model\n   exactly, for example, when the PCE functionality\
    \ coexists with each\n   Label Switching Router (LSR) in the network.  PCE is\
    \ also able to\n   augment functionality in the network where the Internet model\
    \ cannot\n   supply adequate solutions, for example, where traffic engineering\n\
    \   information is not exchanged between network domains.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   CSPF: Constraint-based Shortest Path First.\n   LER: Label\
    \ Edge Router.\n   LSDB: Link State Database.\n   LSP: Label Switched Path.\n\
    \   LSR: Label Switching Router.\n   PCC: Path Computation Client.  Any client\
    \ application requesting a\n   path computation to be performed by the Path Computation\
    \ Element.\n   PCE: Path Computation Element.  An entity (component, application,\
    \ or\n   network node) that is capable of computing a network path or route\n\
    \   based on a network graph and applying computational constraints (see\n   further\
    \ description in Section 3).\n   TED: Traffic Engineering Database, which contains\
    \ the topology and\n   resource information of the domain.  The TED may be fed\
    \ by Interior\n   Gateway Protocol (IGP) extensions or potentially by other means.\n\
    \   TE LSP: Traffic Engineering MPLS Label Switched Path.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   A Path Computation Element (PCE) is an entity that is capable\
    \ of\n   computing a network path or route based on a network graph, and of\n\
    \   applying computational constraints during the computation.  The PCE\n   entity\
    \ is an application that can be located within a network node or\n   component,\
    \ on an out-of-network server, etc.  For example, a PCE\n   would be able to compute\
    \ the path of a TE LSP by operating on the TED\n   and considering bandwidth and\
    \ other constraints applicable to the TE\n   LSP service request.\n   A domain\
    \ is any collection of network elements within a common sphere\n   of address\
    \ management or path computation responsibility.  Examples\n   of domains include\
    \ IGP areas, Autonomous Systems (ASes), and multiple\n   ASes within a Service\
    \ Provider network.  Domains of path computation\n   responsibility may also exist\
    \ as sub-domains of areas or ASes.\n   In order to fully characterize a PCE and\
    \ clarify these definitions,\n   the following important considerations must also\
    \ be examined:\n   1) Path computation is applicable in intra-domain, inter-domain,\
    \ and\n      inter-layer contexts.\n      a. Inter-domain path computation may\
    \ involve the association of\n         topology, routing, and policy information\
    \ from multiple domains\n         from which relationships may be deduced in order\
    \ to help in\n         performing path computation.\n      b. Inter-layer path\
    \ computation refers to the use of PCE where\n         multiple layers are involved\
    \ and when the objective is to\n         perform path computation at one or multiple\
    \ layers while taking\n         into account topology and resource information\
    \ at these layers.\n      Overlapping domains are not within the scope of this\
    \ document.  In\n      the inter-domain case, the domains may belong to a single\
    \ or to\n      multiple Service Providers.\n   2) a. In \"single PCE path computation\"\
    , a single PCE is used to\n         compute a given path in a domain.  There may\
    \ be multiple PCEs\n         in a domain, but only one PCE per domain is involved\
    \ in any\n         single path computation.\n      b. In \"multiple PCE path computation\"\
    , multiple PCEs are used to\n         compute a given path in a domain.\n   3)\
    \ a. \"Centralized computation model\" refers to a model whereby all\n       \
    \  paths in a domain are computed by a single, centralized PCE.\n      b. Conversely,\
    \ \"distributed computation model\" refers to the\n         computation of paths\
    \ in a domain being shared among multiple\n         PCEs.\n      Paths that span\
    \ multiple domains may be computed using the\n      distributed model with one\
    \ or more PCEs responsible for each\n      domain, or the centralized model by\
    \ defining a domain that\n      encompasses all the other domains.\n      From\
    \ these definitions, a centralized computation model inherently\n      uses single\
    \ PCE path computation.  However, a distributed\n      computation model could\
    \ use either single PCE path computation or\n      multiple PCE path computations.\
    \  There would be no such thing as a\n      centralized model that uses multiple\
    \ PCEs.\n   4) The PCE may or may not be located at the head-end of the path.\n\
    \      For example, a conventional intra-domain solution is to have path\n   \
    \   computation performed by the head-end LSR of an MPLS TE LSP; in\n      this\
    \ case, the head-end LSR contains a PCE.  But solutions also\n      exist where\
    \ other nodes on the path must contribute to the path\n      computation (for\
    \ example, loose hops), making them PCEs in their\n      own right.  At the same\
    \ time, the path computation may be made by\n      some other PCE physically distinct\
    \ from the computed path.\n   5) The path computed by the PCE may be an \"explicit\
    \ path\" (that is,\n      the full explicit path from start to destination, made\
    \ of a list\n      of strict hops) or a \"strict/loose path\" (that is, a mix\
    \ of strict\n      and loose hops comprising at least one loose hop representing\
    \ the\n      destination), where a hop may be an abstract node such as an AS.\n\
    \   6) A PCE-based path computation model does not mean to be exclusive\n    \
    \  and can be used in conjunction with other path computation models.\n      For\
    \ instance, the path of an inter-AS TE LSP may be computed using\n      a PCE-based\
    \ path computation model in some ASes, whereas the set\n      of traversed ASes\
    \ may be specified by other means (not determined\n      by a PCE).  Furthermore,\
    \ different path computation models may be\n      used for different TE LSPs.\n\
    \   7) This document does not make any assumptions about the nature or\n     \
    \ implementation of a PCE.  A PCE could be implemented on a router,\n      an\
    \ LSR, a dedicated network server, etc.  Moreover, the PCE\n      function is\
    \ orthogonal to the forwarding capability of the node on\n      which it is implemented.\n"
- title: 4.  Motivation for a PCE-Based Architecture
  contents:
  - "4.  Motivation for a PCE-Based Architecture\n   Several motivations for a PCE-based\
    \ architecture (described in\n   Section 5) are listed below.  This list is not\
    \ meant to be exhaustive\n   and is provided for the sake of illustration.\n \
    \  It should be highlighted that the aim of this section is to provide\n   some\
    \ application examples for which a PCE-based path may be suitable:\n   this also\
    \ clearly states that such a model does not aim to replace\n   existing path computation\
    \ models but would apply to specific existing\n   or future situations.\n   As\
    \ can be seen from these examples, PCE does not replace the existing\n   Internet\
    \ model where intelligence is distributed within the network.\n   Instead, it\
    \ builds on this model and makes use of distributed centers\n   of information\
    \ or computational ability.  PCE should not, therefore,\n   necessarily be seen\
    \ as a centralized, \"all-seeing oracle in the sky\",\n   but as the cooperative\
    \ operation of distributed functionality used to\n   address specific challenges\
    \ such as the computation of a shortest\n   inter-domain constrained path.\n"
- title: 4.1.  CPU-Intensive Path Computation
  contents:
  - "4.1.  CPU-Intensive Path Computation\n   There are many situations where the\
    \ computation of a path may be\n   highly CPU-intensive; examples of CPU-intensive\
    \ path computations\n   include the resolution of problems such as:\n   - Placing\
    \ a set of TE LSPs within a domain so as to optimize an\n     objective function\
    \ (for example, minimization of the maximum link\n     utilization)\n   - Multi-criteria\
    \ path computation (for example, delay and link\n     utilization, inclusion of\
    \ switching capabilities, adaptation\n     features, encoding types and optical\
    \ constraints within a GMPLS\n     optical network)\n   - Computation of minimal\
    \ cost Point to Multipoint trees (Steiner\n     trees)\n   In these situations,\
    \ it may not be possible or desirable for some\n   routers to perform path computation\
    \ because of the constraints on\n   their CPUs, in which case the path computations\
    \ may be off-loaded to\n   some other PCE(s) that may, themselves, be routers\
    \ or may be\n   dedicated PCE servers.\n"
- title: 4.2.  Partial Visibility
  contents:
  - "4.2.  Partial Visibility\n   There are several scenarios where the node responsible\
    \ for path\n   computation has limited visibility of the network topology to the\n\
    \   destination.  This limitation may occur, for instance, when an\n   ingress\
    \ router attempts to establish a TE LSP to a destination that\n   lies in a separate\
    \ domain, since TE information is not exchanged\n   across the domain boundaries.\
    \  In such cases, it is possible to use\n   loose routes to establish the TE LSP,\
    \ relying on routers at the\n   domain borders to establish the next piece of\
    \ the path.  However, it\n   is not possible to guarantee that the optimal (shortest)\
    \ path will be\n   used, or even that a viable path will be discovered except,\
    \ possibly,\n   through repeated trial and error using crankback or other signaling\n\
    \   extensions.\n   This problem of inter-domain path computation may most probably\
    \ be\n   addressed through distributed computation with cooperation among PCEs\n\
    \   within each of the domains, and potentially using crankback between\n   the\
    \ domains to dynamically resolve provisioning issues.\n   Alternatively, a central\
    \ \"all-seeing\" PCE that has access to the\n   complete set of topology information\
    \ may be used, but in this case\n   there are challenges of scalability (both\
    \ the size of the TED and the\n   responsiveness of a single PCE handling requests\
    \ for many domains)\n   and of preservation of confidentiality when the domains\
    \ belong to\n   different Service Providers.\n   Note that the issues described\
    \ here can be further highlighted in the\n   context of TE LSP reoptimization,\
    \ or the establishment of multiple\n   diverse TE LSPs for protection or load\
    \ sharing.\n"
- title: 4.3.  Absence of the TED or Use of Non-TE-Enabled IGP
  contents:
  - "4.3.  Absence of the TED or Use of Non-TE-Enabled IGP\n   The traffic engineering\
    \ database (TED) may be a large drain on the\n   resources of a network node (such\
    \ as an edge router or LER).\n   Maintaining the TED may require a lot of memory\
    \ and may require non-\n   negligible CPU activity.  The use of a distinct PCE\
    \ may be\n   appropriate in such circumstances, and a separate node can be used\
    \ to\n   establish and maintain the TED, and to make it available for path\n \
    \  computation.\n   The IGPs run within some networks are not sufficient to build\
    \ a full\n   TED.  For example, a network may run OSPF/IS-IS without the\n   OSPF-TE/ISIS-TE\
    \ extensions, or some routers in the network may not\n   support the TE extensions.\
    \  In these cases, in order to successfully\n   compute paths through the network,\
    \ the TED must be constructed or\n   supplemented through configuration action\
    \ and updated as network\n   resources are reserved or released.  Such a TED could\
    \ be distributed\n   to the routers that need to perform path computation or held\n\
    \   centrally (on a distinct node that supports PCE) for centralized\n   computation.\n"
- title: 4.4.  Node Outside the Routing Domain
  contents:
  - "4.4.  Node Outside the Routing Domain\n   An LER might not be part of the routing\
    \ domain for administrative\n   reasons (for example, a customer-edge (CE) router\
    \ connected to the\n   provider-edge (PE) router in the context of MPLS VPN [RFC4364]\
    \ and\n   for which it is desired to provide a CE to CE TE LSP path).\n   This\
    \ scenario suggests a solution that does not involve doing\n   computation on\
    \ the ingress (TE LSP head-end, CE) router, and that\n   does not rely on the\
    \ configuration of static loose hops.  In this\n   case, optimal shortest paths\
    \ cannot be guaranteed.  A solution that a\n   distinct PCE can help here.  Note\
    \ that the PCE in this case may,\n   itself, provide a path that includes loose\
    \ hops.\n"
- title: 4.5.  Network Element Lacks Control Plane or Routing Capability
  contents:
  - "4.5.  Network Element Lacks Control Plane or Routing Capability\n   It is common\
    \ in legacy optical networks for the network elements not\n   to have a control\
    \ plane or routing capability.  Such network elements\n   only have a data plane\
    \ and a management plane, and all cross-\n   connections are made from the management\
    \ plane.  It is desirable in\n   this case to run the path computation on the\
    \ PCE, and to send the\n   cross-connection commands to each node on the computed\
    \ path.  That\n   is, the PCC would be an element of the management plane, perhaps\n\
    \   residing in the Network Management System (NMS) or Operations Support\n  \
    \ System (OSS).\n   This scenario is important for Automatically Switched Optical\
    \ Network\n   (ASON)-capable networks and may also be used for interworking between\n\
    \   GMPLS-capable and GMPLS-incapable networks.\n"
- title: 4.6.  Backup Path Computation for Bandwidth Protection
  contents:
  - "4.6.  Backup Path Computation for Bandwidth Protection\n   A PCE can be used\
    \ to compute backup paths in the context of fast\n   reroute protection of TE\
    \ LSPs.  In this model, all backup TE LSPs\n   protecting a given facility are\
    \ computed in a coordinated manner by a\n   PCE.  This allows complete bandwidth\
    \ sharing between backup tunnels\n   protecting independent elements, while avoiding\
    \ any extensions to TE\n   LSP signaling.  Both centralized and distributed computation\
    \ models\n   are applicable.  In the distributed case each LSR can be a PCE to\n\
    \   compute the paths of backup tunnels to protect against the failure of\n  \
    \ adjacent network links or nodes.\n"
- title: 4.7.  Multi-layer Networks
  contents:
  - "4.7.  Multi-layer Networks\n   A server-layer network of one switching capability\
    \ may support\n   multiple networks of another (more granular) switching capability.\n\
    \   For example, a Time-Division Multiplexing (TDM) network may provide\n   connectivity\
    \ for client-layer networks such as IP, MPLS, or Layer 2\n   [MLN].\n   The server-layer\
    \ network is unlikely to provide the same connectivity\n   paradigm as the client\
    \ networks, so bandwidth granularity in the\n   server-layer network may be much\
    \ coarser than in the client-layer\n   network.  Similarly, there is likely to\
    \ be a management separation\n   between the two networks providing independent\
    \ address spaces.\n   Furthermore, where multiple client-layer networks make use\
    \ of the\n   same server-layer network, those client-layer networks may have\n\
    \   independent policies, control parameters, address spaces, and routing\n  \
    \ preferences.\n   The different client- and server-layer networks may be considered\n\
    \   distinct path computation regions within a PCE domain, so the PCE\n   architecture\
    \ is useful to allow path computation from one client-\n   layer network region,\
    \ across the server-layer network, to another\n   client-layer network region.\n\
    \   In this case, the PCEs are responsible for resolving address space\n   issues,\
    \ handling differences in policy and control parameters, and\n   coordinating\
    \ resources between the networks.  Note that, because of\n   the differences in\
    \ bandwidth granularity, connectivity across the\n   server-layer network may\
    \ be provided through virtual TE links or\n   Forwarding Adjacencies: the PCE\
    \ may offer a point of control\n   responsible for the decision to provision new\
    \ TE links or Forwarding\n   Adjacencies across the server-layer network.\n"
- title: 4.8.  Path Selection Policy
  contents:
  - "4.8.  Path Selection Policy\n   A PCE may have a local policy that impacts path\
    \ computation and\n   selection in response to a path computation request.  Such\
    \ policy may\n   act on information provided by the requesting PCC.  The result\
    \ of\n   applying such policy includes, for example, rejection of the path\n \
    \  computation request, or provision of a path that does not meet all of\n   the\
    \ requested constraints.  Further, the policy may support\n   administratively\
    \ configured paths, or selection among transit\n   providers.  Inclusion of policy\
    \ within PCE may simplify the\n   application of policy within the path computation/selection\
    \ process.\n   Similarly, a PCC may apply local policy to the selection of a PCE\
    \ to\n   compute a specific path, and to the constraints that are requested.\n\
    \   In a PCE context, the policy may be sensitive to the type of path\n   that\
    \ is being computed.  For example, a different set of policies may\n   be applied\
    \ for an intra-area or single-layer path than would be\n   provided for an inter-area\
    \ or multi-layer path.\n   Note that synchronization of policy between PCEs or\
    \ between PCCs and\n   PCEs may be necessary.  Such issues are outside the scope\
    \ of the PCE\n   architecture, but within scope for the PCE policy framework and\n\
    \   application which is described in a separate document.\n"
- title: 4.9.  Non-Motivations
  contents:
  - '4.9.  Non-Motivations

    '
- title: 4.9.1.  The Whole Internet
  contents:
  - "4.9.1.  The Whole Internet\n   PCE is not considered to be a solution that is\
    \ applicable to the\n   entire Internet.  That is, the applicability of PCE is\
    \ limited to a\n   set of domains with known relationships.  The scale of this\n\
    \   limitation is similar to the peering relationships between Service\n   Providers.\n"
- title: 4.9.2.  Guaranteed TE LSP Establishment
  contents:
  - "4.9.2.  Guaranteed TE LSP Establishment\n   When two or more paths for TE LSPs\
    \ are computed on the same set of TE\n   link state information, it is possible\
    \ that the resultant paths will\n   compete for limited resources within the network.\
    \  This may result in\n   success for only the first TE LSP to be signaled, or\
    \ it might even\n   mean that no TE LSP can be established.\n   Batch processing\
    \ of computation requests, back-off times, computation\n   of alternate paths,\
    \ and crankback can help to mitigate this sort of\n   problem, and PCE may also\
    \ improve the chances of successful TE LSP\n   setup.  However, a single, centralized\
    \ PCE is not viewed as a\n   solution that can guarantee TE LSP establishment\
    \ since the potential\n   for network failures or contention for resources still\
    \ exists where\n   the centralized TED cannot fully reflect current (i.e., real-time)\n\
    \   network state.\n"
- title: 5.  Overview of the PCE-Based Architecture
  contents:
  - "5.  Overview of the PCE-Based Architecture\n   This section gives an overview\
    \ of the architecture of the PCE model.\n   It needs to be read in conjunction\
    \ with the details provided in the\n   next section to provide a full view of\
    \ the flexibility of the model.\n"
- title: 5.1.  Composite PCE Node
  contents:
  - "5.1.  Composite PCE Node\n   Figure 1 below shows the components of a typical\
    \ composite PCE node\n   (that is, a router that also implements the PCE functionality)\
    \ that\n   utilizes path computation.  The routing protocol is used to exchange\n\
    \   TE information from which the TED is constructed.  Service requests\n   to\
    \ provision TE LSPs are received by the node and converted into\n   signaling\
    \ requests, but this conversion may require path computation\n   that is requested\
    \ from a PCE.  The PCE operates on the TED subject to\n   local policy in order\
    \ to respond with the requested path.\n                 ---------------\n    \
    \            |   ---------   | Routing   ----------\n                |  |    \
    \     |  | Protocol |          |\n                |  |   TED   |<-+----------+->\
    \        |\n                |  |         |  |          |          |\n        \
    \        |   ---------   |          |          |\n                |      |   \
    \     |          |          |\n                |      | Input  |          |  \
    \        |\n                |      v        |          |          |\n        \
    \        |   ---------   |          |          |\n                |  |       \
    \  |  |          | Adjacent |\n                |  |   PCE   |  |          |  \
    \ Node   |\n                |  |         |  |          |          |\n        \
    \        |   ---------   |          |          |\n                |      ^   \
    \     |          |          |\n                |      |Request |          |  \
    \        |\n                |      |Response|          |          |\n        \
    \        |      v        |          |          |\n                |   ---------\
    \   |          |          |\n       Service  |  |         |  | Signaling|    \
    \      |\n        Request |  |Signaling|  | Protocol |          |\n          ------+->|\
    \ Engine  |<-+----------+->        |\n                |  |         |  |      \
    \    |          |\n                |   ---------   |           ----------\n  \
    \               ---------------\n                    Figure 1.  Composite PCE\
    \ Node\n   Note that the routing adjacency between the composite PCE node and\n\
    \   any other router may be performed by means of direct connectivity or\n   any\
    \ tunneling mechanism.\n"
- title: 5.2.  External PCE
  contents:
  - "5.2.  External PCE\n   Figure 2 shows a PCE that is external to the requesting\
    \ network\n   element.  A service request is received by the head-end node, and\n\
    \   before it can initiate signaling to establish the service, it makes a\n  \
    \ path computation request to the external PCE.  The PCE uses the TED\n   subject\
    \ to local policy as input to the computation and returns a\n   response.\n  \
    \             ----------\n              |  -----   |\n              | | TED |<-+----------->\n\
    \              |  -----   |  TED synchronization\n              |    |     | \
    \ mechanism (for example, routing protocol)\n              |    |     |\n    \
    \          |    v     |\n              |  -----   |\n              | | PCE | \
    \ |\n              |  -----   |\n               ----------\n                 \
    \  ^\n                   | Request/\n                   | Response\n         \
    \          v\n      Service  ----------  Signaling   ----------\n      Request\
    \ | Head-End | Protocol   | Adjacent |\n         ---->|  Node    |<---------->|\
    \   Node   |\n               ----------              ----------\n            \
    \        Figure 2.  External PCE Node\n   Note that in this case, the node that\
    \ supports the PCE function may\n   also be an LSR or router performing forwarding\
    \ in its own right\n   (i.e., it may be a composite PCE node), but those functions\
    \ are\n   purely orthogonal to the operation of the function in the instance\n\
    \   being considered here.\n"
- title: 5.3.  Multiple PCE Path Computation
  contents:
  - "5.3.  Multiple PCE Path Computation\n   Figure 3 illustrates how multiple PCE\
    \ path computations may be\n   performed along the path of a signaled service.\
    \  As in the previous\n   example, the head-end PCC makes a request to an external\
    \ PCE, but the\n   path that is returned is such that the next network element\
    \ finds it\n   necessary to perform further computation.  This may be the case\
    \ when\n   the path returned is a partial path that does not reach the intended\n\
    \   destination or when the computed path is loose.  The downstream\n   network\
    \ element consults another PCE to establish the next hop(s) in\n   the path. \
    \ In this case, all policy decisions are made independently\n   at each PCE based\
    \ on information passed from the PCC.\n   Note that either or both PCEs in this\
    \ case could be composite PCE\n   nodes, as in Section 5.1.\n            ----------\
    \           ----------\n           |          |         |          |\n       \
    \    |   PCE    |         |   PCE    |\n           |          |         |    \
    \      |\n           |   -----  |         |   -----  |\n           |  | TED |\
    \ |         |  | TED | |\n           |   -----  |         |   -----  |\n     \
    \       ----------           ----------\n                ^                   \
    \  ^\n                | Request/            | Request/\n                | Response\
    \            | Response\n                v                     v\n   Service \
    \ --------  Signaling  ------------  Signaling  ------------\n   Request |Head-End|\
    \ Protocol  |Intermediate| Protocol  |Intermediate|\n      ---->|  Node  |<--------->|\
    \    Node    |<--------->|    Node    |\n            --------             ------------\
    \             ------------\n                 Figure 3.  Multiple PCE Path Computation\n"
- title: 5.4.  Multiple PCE Path Computation with Inter-PCE Communication
  contents:
  - "5.4.  Multiple PCE Path Computation with Inter-PCE Communication\n   The PCE\
    \ in Section 5.3 was not able to supply a full path for the\n   requested service,\
    \ and as a result the adjacent node needs to make\n   its own computation request.\
    \  As illustrated in Figure 4, the same\n   problem may be solved by introducing\
    \ inter-PCE communication, and\n   cooperation between PCEs so that the PCE consulted\
    \ by the head-end\n   network node makes a request of another PCE to help with\
    \ the\n   computation.\n             ----------                              \
    \        ----------\n            |          |   Inter-PCE Request/Response   \
    \   |          |\n            |   PCE    |<--------------------------------->|\
    \   PCE    |\n            |          |                                   |   \
    \       |\n            |   -----  |                                   |   -----\
    \  |\n            |  | TED | |                                   |  | TED | |\n\
    \            |   -----  |                                   |   -----  |\n   \
    \          ----------                                     ----------\n       \
    \          ^\n                 | Request/\n                 | Response\n     \
    \            v\n   Service  ----------  Signaling   ----------  Signaling   ----------\n\
    \   Request | Head-End | Protocol   | Adjacent | Protocol   | Adjacent |\n   \
    \   ---->|  Node    |<---------->|   Node   |<---------->|   Node   |\n      \
    \      ----------              ----------              ----------\n   Figure 4.\
    \  Multiple PCE Path Computation with Inter-PCE Communication\n   Multiple PCE\
    \ path computation with inter-PCE communication involves\n   coordination between\
    \ distinct PCEs such that the result of the\n   computation performed by one PCE\
    \ depends on path fragment information\n   supplied by other PCEs.  This model\
    \ does not provide a distributed\n   computation algorithm, but it allows distinct\
    \ PCEs to be responsible\n   for computation of parts (segments) of the path.\n\
    \   PCE-PCE communication is discussed further in Section 6.6.\n   Note that a\
    \ PCC might not see the difference between centralized\n   computation and multiple\
    \ PCE path computation with inter-PCE\n   communication.  That is, the PCC network\
    \ node or component that\n   requests the computation makes a single request and\
    \ receives a full\n   or partial path in response, but the response is actually\
    \ achieved\n   through the coordinated, cooperative efforts of more than one PCE.\n\
    \   In this model, all policy decisions may be made independently at each\n  \
    \ PCE based on computation information passed from the previous PCE.\n   Alternatively,\
    \ there may be explicit communication of policy\n   information between PCEs.\n"
- title: 5.5.  Management-Based PCE Usage
  contents:
  - "5.5.  Management-Based PCE Usage\n   It must be observed that the PCC is not\
    \ necessarily an LSR.  For\n   example, in Figure 5 the NMS supplies the head-end\
    \ LSR with a fully\n   computed explicit path for the TE LSP that it is to establish\
    \ through\n   signaling.  The NMS uses a management plane mechanism to send this\n\
    \   request and encodes the data using a representation such as the TE\n   MIB\
    \ module [RFC3812].\n   The NMS constructs the explicit path that it supplies\
    \ to the head-end\n   LSR using information provided by the operator.  It consults\
    \ the PCE,\n   which returns a path for the NMS to use.\n   Although Figure 5\
    \ shows the PCE as remote from the NMS, it could, of\n   course, be collocated\
    \ with the NMS.\n                                 -----------\n              \
    \                  |   -----   |\n            Service             |  | TED |<-+----------->\n\
    \            Request             |   -----   |  TED synchronization\n        \
    \       |                |     |     |  mechanism (for example,\n            \
    \   v                |     |     |  routing protocol)\n         -------------\
    \ Request/ |     v     |\n        |             | Response|   -----   |\n    \
    \    |     NMS     |<--------+> | PCE |  |\n        |             |         |\
    \   -----   |\n         -------------           -----------\n       Service |\n\
    \       Request |\n               v\n          ----------  Signaling   ----------\n\
    \         | Head-End | Protocol   | Adjacent |\n         |  Node    |<---------->|\
    \   Node   |\n          ----------              ----------\n                 Figure\
    \ 5.  Management-Based PCE Usage\n"
- title: 5.6.  Areas for Standardization
  contents:
  - "5.6.  Areas for Standardization\n   The following areas require standardization\
    \ within the PCE\n   architecture.\n   - communication between PCCs and PCEs,\
    \ and between cooperating PCEs,\n     including the communication of policy-related\
    \ information\n   - requirements for extending existing routing and signaling\
    \ protocols\n     in support of PCE discovery and signaling of inter-domain paths\n\
    \   - definition of metrics to evaluate path quality, scalability,\n     responsiveness,\
    \ robustness, and policy support of path computation\n     models.\n   - MIB modules\
    \ related to communication protocols, routing and\n     signaling extensions,\
    \ metrics, and PCE monitoring information\n"
- title: 6.  PCE Architectural Considerations
  contents:
  - "6.  PCE Architectural Considerations\n   This section provides a list of the\
    \ PCE architectural components.\n   Specific realizations and implementation details\
    \ (state machines or\n   algorithms, etc.) of PCE-based solutions are out of the\
    \ scope of this\n   document.\n   Note also that PCE-based path computation does\
    \ not affect in any way\n   the use of the computed paths.  For example, the use\
    \ of PCE does not\n   change the way in which Traffic Engineering LSPs are signaled,\n\
    \   maintained, and torn down, but it strictly relates to the path\n   computation\
    \ aspects of such TE LSPs.\n   This section presents an architectural view of\
    \ PCE.  That is, it\n   describes the components that exist and how they interact.\
    \  Note that\n   the architectural model, and in particular the functional model,\
    \ may\n   be perceived differently by different components of the PCE system.\n\
    \   For example, the PCC will not be aware of whether a PCE consults\n   other\
    \ PCEs.  The PCC view of the PCE architecture is discussed in\n   Section 7.\n"
- title: 6.1.  Centralized Computation Model
  contents:
  - "6.1.  Centralized Computation Model\n   A \"centralized computation model\" considers\
    \ that all path\n   computations for a given domain will be performed by a single,\n\
    \   centralized PCE.  This may be a dedicated server (for example, an\n   external\
    \ PCE node), or a designated router (for example, a composite\n   PCE node) in\
    \ the network.  In this model, all PCCs in the domain\n   would send their path\
    \ computation requests to the central PCE.  While\n   a domain in this context\
    \ might be an IGP area or AS, it might also be\n   a sub-group of network nodes\
    \ that is defined by its dependence on the\n   PCE.\n   This model has a single\
    \ point of failure: the PCE.  In order to avoid\n   this issue, the centralized\
    \ computation model may designate a backup\n   PCE that can take over the computation\
    \ responsibility in a controlled\n   manner in the event of a failure of the primary\
    \ PCE.  Any policies\n   present on the primary PCE should also be present on\
    \ the backup,\n   although the primary policies may themselves be subject to policy\n\
    \   governing how they are implemented on the backup.  Note that at any\n   moment\
    \ in time there is only one active PCE in any domain.\n"
- title: 6.2.  Distributed Computation Model
  contents:
  - "6.2.  Distributed Computation Model\n   A \"distributed computation model\" refers\
    \ to a domain or network that\n   may include multiple PCEs, and where computation\
    \ of paths is shared\n   among the PCEs.  A given path may in turn be computed\
    \ by a single PCE\n   (\"single PCE path computation\") or multiple PCEs (\"multiple\
    \ PCE path\n   computation\").  A PCC may be linked to a particular PCE or may\
    \ be\n   able to choose freely among several PCEs; the method of choice\n   between\
    \ PCEs is out of scope of this document, but see Section 6.4\n   for a discussion\
    \ of PCE discovery that affects this choice.\n   Implementation of policy should\
    \ be consistent across the set of\n   available PCEs.\n   Often, the computation\
    \ of an individual path is performed entirely by\n   a single PCE.  For example,\
    \ this is usually the case in MPLS TE\n   within a single IGP area where the ingress\
    \ LSR/composite PCE node is\n   responsible for computing the path or for contacting\
    \ an external PCE.\n   Conversely, multiple PCE path computation implies that\
    \ more than one\n   PCE is involved in the computation of a single path.  An example\
    \ of\n   this is where loose hop expansion is performed by transit\n   LSRs/composite\
    \ PCE nodes on an MPLS TE LSP.  Another example is the\n   use of multiple cooperating\
    \ PCEs to compute the path of a single TE\n   LSP across multiple domains.\n"
- title: 6.3.  Synchronization
  contents:
  - "6.3.  Synchronization\n   Often, multiple paths need to be computed to support\
    \ a single service\n   (for example, for protection or load sharing).  A PCC that\
    \ determines\n   that it requires more than one path to be computed may send a\
    \ series\n   of individual requests to the PCE.  In this case of non-synchronized\n\
    \   path computation requests, the PCE may make multiple individual path\n   computations\
    \ to generate the paths, and the PCC may send its\n   individual requests to different\
    \ PCEs.\n   Alternatively, the PCC may send a single request to a PCE asking for\n\
    \   a set of paths to be computed, but specifying that non-synchronized\n   path\
    \ computation is acceptable.  The PCE may compute each path in\n   turn exactly\
    \ as it would have done had the PCC made multiple\n   requests, and the PCE may\
    \ devolve some computations to other PCEs if\n   it chooses.  On the other hand,\
    \ the PCE is not prohibited from\n   performing all computations together in a\
    \ synchronized manner as\n   described below.\n   The PCC may also issue a single\
    \ request to the PCE asking for all the\n   paths to be computed in a synchronized\
    \ manner.  The PCE will then\n   perform simultaneous computation of the set of\
    \ requested paths.  Such\n   synchronized computation can often provide better\
    \ results.\n   The involvement of more than one PCE in the computation of a series\n\
    \   of paths is by its nature non-synchronized.  However, a set of\n   cooperating\
    \ PCEs may be synchronized under the control of a single\n   PCE.  For example,\
    \ a PCC may send a request to a PCE that invokes\n   domain-specific computations\
    \ by other PCEs before supplying a result\n   to the PCC.\n   It is desirable\
    \ to add a parameter to the PCC-PCE protocol to request\n   that the PCE supply\
    \ a set of alternate paths for use by the PCC,\n   should the establishment of\
    \ the TE LSP using the principal path fail\n   to complete.  While alternate paths\
    \ may not always be successful if\n   the first path fails, including alternate\
    \ paths in a PCE response\n   could have less overhead than having the PCC make\
    \ separate requests\n   for subsequent path computations as the need arises. \
    \ This technique\n   is used in some existing CSPF implementations.\n"
- title: 6.4.  PCE Discovery and Load Balancing
  contents:
  - "6.4.  PCE Discovery and Load Balancing\n   In order that a PCC can communicate\
    \ efficiently with a PCE, it must\n   know the location of the PCE.  That is,\
    \ it is an architectural\n   decision made here that PCC requests be targeted\
    \ to a specific PCE,\n   and not broadcast to the network for any PCE to respond.\
    \  This\n   decision means that only the selected PCE will operate on any single\n\
    \   request, and it saves network resources during request propagation\n   and\
    \ processing resources at the PCEs that are not required to\n   respond.\n   The\
    \ knowledge of the location of a PCE may be achieved through local\n   configuration\
    \ at the PCC or may rely on a protocol-based discovery\n   mechanism that may\
    \ be governed by policy.\n   Where more than one PCE is known to a PCC, the PCC\
    \ must have\n   sufficient information to select an appropriate PCE for its purposes,\n\
    \   under the control of policy.  Such a selection procedure allows for\n   load\
    \ sharing between PCEs and supports PCEs with different\n   computation capabilities\
    \ including different visibility scopes.\n   Thus, the information available to\
    \ the PCC must include details of\n   the PCE capabilities, which may be fixed\
    \ or may vary dynamically in\n   time.\n   The PCC may learn PCE capabilities\
    \ through static configuration, or\n   it may discover the information dynamically.\
    \  Note that even when the\n   location of the PCE is configured at the PCC, the\
    \ PCC may still\n   discover the PCE capabilities dynamically.  Dynamic PCE capabilities\n\
    \   cannot be configured and can only be discovered.\n   Proxy PCE advertisement\
    \ whereby the existence of a PCE is advertised\n   via a proxy PCE is a viable\
    \ alternative, should the PCE be incapable\n   of such advertisement itself. \
    \ In this case, it is a requirement that\n   the proxy adequately advertise the\
    \ PCE status and capability in a\n   timely and synchronized fashion.\n   In the\
    \ event that multiple PCEs are available to serve a particular\n   path computation\
    \ request, the PCC must select a PCE to satisfy the\n   request.  The details\
    \ of such a selection (for instance, to\n   efficiently share the computation\
    \ load across multiple PCEs or to\n   request secondary computations after partial\
    \ or failed computations)\n   are local to the PCC, may be based on policy, and\
    \ are out of the\n   scope of this document.\n   PCE capabilities that may be\
    \ advertised or configured could include\n   (and are not be limited to):\n  \
    \ - a set of constraints that it can account for (diversity, shared\n     risk\
    \ link groups (SRLGs), optical impairments, wavelength\n     continuity, etc.)\n\
    \   - computational capacity (for example, the number of computations it\n   \
    \  can perform per second)\n   - the number of switching capability layers (and\
    \ which ones)\n   - the number of path selection criteria (and which ones)\n \
    \  - whether it is a stateless PCE or it can send updates about better\n     paths\
    \ that might be available in the future\n   - whether it can compute P2MP trees\
    \ (and which types)\n   - whether it can ensure resource sharing between backup\
    \ tunnels\n   This information would help a PCC to decide which PCE to use.\n\
    \   Requirements for PCE advertisement will be documented separately.\n   Note\
    \ that there is no restriction within the architecture about how\n   location\
    \ and capabilities are advertised, and the two elements should\n   be considered\
    \ functionally distinct.\n   A PCC might also ask a PCE to perform a particular\
    \ type of service\n   without knowledge of the PCE's capabilities and receive\
    \ a response\n   that says that the PCE is unable to perform the service.  The\n\
    \   response could specify the capabilities of the PCE and might also\n   suggest\
    \ another PCE that has the requested capabilities.\n"
- title: 6.5.  Detecting PCE Liveness
  contents:
  - "6.5.  Detecting PCE Liveness\n   The ability to detect a PCE's liveness is a\
    \ mandatory piece of the\n   overall architecture and could be achieved by several\
    \ means.  If some\n   form of regular advertisement (such as through IGP extensions)\
    \ is\n   used for PCE discovery, it is expected that the PCE liveness will be\n\
    \   determined by means of status advertisement (for example, IGP\n   LSA/LSPs).\n\
    \   The inability of a PCE to service a request (perhaps due to excessive\n  \
    \ load) may be reported to the PCC through a failure message, but the\n   failure\
    \ of a PCE or the communications mechanism while processing a\n   request cannot\
    \ be reported in this way.  Furthermore, in the case of\n   excessive load, the\
    \ PCE may not have sufficient resources to send a\n   failure message.  Thus,\
    \ the PCC should employ other mechanisms, such\n   as protocol timers, to determine\
    \ the liveness of the PCE.  This is\n   particularly important in the case of\
    \ inter-domain path computation\n   where the PCE liveness may not be detected\
    \ by means of the IGP that\n   runs in the PCC's domain.\n"
- title: 6.6.  PCC-PCE and PCE-PCE Communication
  contents:
  - "6.6.  PCC-PCE and PCE-PCE Communication\n   Once the PCC has selected a PCE,\
    \ and provided that the PCE is not\n   local to the PCC, a request/response protocol\
    \ is required for the PCC\n   to communicate the path computation requests to\
    \ the PCE and for the\n   PCE to return the path computation response.  Discussion\
    \ of the\n   security requirements and implications for this protocol is provided\n\
    \   in Section 10 of this document.\n   The path computation request may include\
    \ a significant set of\n   requirements, including the following:\n   - the source\
    \ and destination of the path\n   - the bandwidth and other Quality of Service\
    \ (QoS) parameters desired\n   - resources, resource affinities, and shared risk\
    \ link groups (SRLGs)\n     to use/avoid\n   - the number of disjoint paths required\
    \ and whether near-disjoint\n     paths are acceptable\n   - the levels of resiliency,\
    \ reliability, and robustness of the path\n     resources\n   - policy-related\
    \ information\n   The level of robustness of the path resources covers a qualitative\n\
    \   assessment of the vulnerability of the resources that may be used.\n   For\
    \ example, one might grade resources based on empirical evidence\n   (mean time\
    \ between failures), on known risks (there is major building\n   work going on\
    \ near this conduit), or on prejudice (vendor X's\n   software is always crashing).\
    \  A PCC could request that only robust\n   resources be used, or it could allow\
    \ any resource.\n   In case of a positive response from the PCE, one or more paths\
    \ would\n   be returned to the requesting node.  In the event of a failure to\n\
    \   compute the desired path(s), an error is returned together with as\n   much\
    \ information as possible about the reasons for the failure(s),\n   and potentially\
    \ with advice about which constraints might be relaxed\n   so that a positive\
    \ result is more likely in a future request.\n   Note that the resultant path(s)\
    \ may be made up of a set of strict or\n   loose hops, or any combination of strict\
    \ and loose hops.  Moreover, a\n   hop may have the form of a non-explicit abstract\
    \ node.\n   A request/response protocol is also required for a PCE to communicate\n\
    \   path computation requests to another PCE and for the PCE to return\n   the\
    \ path computation response.  The path computation request may\n   include a significant\
    \ set of requirements including those defined\n   above.  In case of a positive\
    \ response from the PCE, one or more\n   paths would be returned to the requesting\
    \ PCE.  In the event of a\n   failure to compute the desired path(s), an error\
    \ is returned together\n   with as much information as possible about the reasons\
    \ for the\n   failure, and potentially advice about which constraints might be\n\
    \   relaxed so that a positive result is more likely.  Note that the\n   resultant\
    \ path(s) may be made up of a set of strict or loose hops, or\n   any combination\
    \ of strict and loose hops.  Moreover, a hop may have\n   the form of a non-explicit\
    \ abstract node.\n   An important feature of PCEs that are cooperating to compute\
    \ a path\n   is that they apply compatible or identical computation algorithms\
    \ and\n   coordinated policies.  This may require coordination through the\n \
    \  communication between the PCEs.\n   Note that when multiple PCEs cooperate\
    \ to compute a path, it is\n   important that they have a coordinated view of\
    \ the meaning of\n   constraints such as costs, resource affinities, and class\
    \ of service.\n   This is particularly significant where the PCEs are responsible\
    \ for\n   different domains.  It is assumed that this is a matter of policy\n\
    \   between domains and between PCEs.\n   No assumption is made in this architecture\
    \ about whether the PCC-PCE\n   and PCE-PCE communication protocols are identical.\n"
- title: 6.7.  PCE TED Synchronization
  contents:
  - "6.7.  PCE TED Synchronization\n   As previously described, the PCE operates on\
    \ a TED.  Information on\n   network status to build the TED may be provided in\
    \ the domain by\n   various means:\n   1) Participation in IGP distribution of\
    \ TE information.  The standard\n      method of distribution of TE information\
    \ within an IGP area is\n      through the use of extensions to the IGP [RFC3630,\
    \ RFC3748].  This\n      mechanism allows participating nodes to build a TED,\
    \ and this is\n      the standard technique, for example, within a single area\
    \ MPLS or\n      GMPLS network.  A node that hosts the PCE function may collect\
    \ TE\n      information in this way by maintaining at least one routing\n    \
    \  adjacency with a router in the domain.  The PCE node may be\n      adjacent\
    \ or non-adjacent (via some tunneling techniques) to the\n      router.  Such\
    \ a technique provides a mechanism for ensuring that\n      the TED is efficiently\
    \ synchronized with the network state and is\n      the normal case, for example,\
    \ when the PCE is co-resident with the\n      LSRs in an MPLS or GMPLS network.\n\
    \   2) Out-of-band TED synchronization.  It may not be convenient or\n      possible\
    \ for a PCE to participate in the IGPs of one or more\n      domains (for example,\
    \ when there are very many domains, when IGP\n      participation is not desired,\
    \ or when some domains are not running\n      TE-aware IGPs).  In this case, some\
    \ mechanism may need to be\n      defined to allow the PCE node to retrieve the\
    \ TED from each\n      domain.  Such a mechanism could be incremental (like the\
    \ IGP in\n      the previous case), or it could involve a bulk transfer of the\n\
    \      complete TED.  The latter might significantly limit the capability\n  \
    \    to ensure TED synchronization, which might result in an increase\n      in\
    \ the failure rate of computed paths, or the computation of sub-\n      optimal\
    \ paths.  Consideration should also be given to the impact\n      of the TED distribution\
    \ on the network and on the network node\n      within the domain that is asked\
    \ to distribute the database.  This\n      is particularly relevant in the case\
    \ of frequent network state\n      changes.\n   3) Information in the TED can\
    \ include information obtained from\n      sources other than the IGP.  For example,\
    \ information about link\n      usage policies can be configured by the operator.\
    \  Path\n      computation can also act on a far wider set of information that\n\
    \      includes data about the TE LSPs provisioned within the network.\n     \
    \ This information can include TE LSP routes, reserved bandwidth,\n      and measured\
    \ traffic volume passing through the TE LSP.\n      Such TE LSP information can\
    \ enhance TE LSP (re)optimization to\n      provide \"full network\" (re)optimization\
    \ and can allow traffic\n      fluctuations to be taken into account.  Detailed\
    \ TE LSP\n      information may also facilitate reconfiguration of the Virtual\n\
    \      Network Topology (VNT) [MLN], in which lower-layer TE LSPs, such\n    \
    \  as optical paths, provide TE links for use by the higher layer,\n      since\
    \ this reconfiguration is also a \"full network\" problem.\n   Note that synchronization\
    \ techniques may apply to both intra- and\n   inter-domain TEDs.  Furthermore,\
    \ the techniques can be mixed for use\n   in different domains.  The degree of\
    \ synchronization between the PCE\n   and the network is subject to implementation\
    \ and/or policy.  However,\n   better synchronization generally leads to paths\
    \ that are more likely\n   to succeed.\n   Note also that the PCE may have access\
    \ to only a partial TED: for\n   instance, in the case of inter-domain path computation\
    \ where each\n   such domain may be managed by different entities.  In such cases,\n\
    \   each PCE may have access to a partial TED, and cooperative techniques\n  \
    \ between PCEs may be used to achieve end-to-end path computation\n   without\
    \ any requirement that any PCE handle the complete TED related\n   to the set\
    \ of traversed domains by the TE LSP in question.\n"
- title: 6.8.  Stateful versus Stateless PCEs
  contents:
  - "6.8.  Stateful versus Stateless PCEs\n   A PCE can be either stateful or stateless.\
    \  In the former case, there\n   is a strict synchronization between the PCE and\
    \ not only the network\n   states (in term of topology and resource information),\
    \ but also the\n   set of computed paths and reserved resources in use in the\
    \ network.\n   In other words, the PCE utilizes information from the TED as well\
    \ as\n   information about existing paths (for example, TE LSPs) in the\n   network\
    \ when processing new requests.  Note that although this allows\n   for optimal\
    \ path computation and increased path computation success,\n   stateful PCEs require\
    \ reliable state synchronization mechanisms, with\n   potentially significant\
    \ control plane overhead and the maintenance of\n   a large amount of data/states\
    \ (for example, full mesh of TE LSPs).\n   For example, if there is only one PCE\
    \ in the domain, all TE LSP\n   computation is done by this PCE, which can then\
    \ track all the\n   existing TE LSPs and stay synchronized (each TE LSP state\
    \ change must\n   be tracked by the PCE).  However, this model could require\n\
    \   substantial control plane resources.  If there are multiple PCEs in\n   the\
    \ network, TE LSP computation and information are distributed among\n   PCEs and\
    \ so the resources required to perform the computations are\n   also distributed.\
    \  However, synchronization issues discussed in\n   Section 6.7 also come into\
    \ play.\n   The maintenance of a stateful database can be non-trivial.  However,\n\
    \   in a single centralized PCE environment, a stateful PCE is almost a\n   simple\
    \ matter of remembering all the TE LSPs the PCE has computed,\n   that the TE\
    \ LSPs were actually set up (if this can be known), and\n   when they were torn\
    \ down.  Out-of-band TED synchronization can also\n   be complex, with multiple\
    \ PCE setup in a distributed PCE computation\n   model, and could be prone to\
    \ race conditions, scalability concerns,\n   etc.  Even if the PCE has detailed\
    \ information on all paths,\n   priorities, and layers, taking such information\
    \ into account for path\n   computation could be highly complex.  PCEs might synchronize\
    \ state by\n   communicating with each other, but when TE LSPs are set up using\n\
    \   distributed computation performed among several PCEs, the problems of\n  \
    \ synchronization and race condition avoidance become larger and more\n   complex.\n\
    \   There is benefit in knowing which TE LSPs exist, and their routing,\n   to\
    \ support such applications as placing a high-priority TE LSP in a\n   crowded\
    \ network such that it preempts as few other TE LSPs as\n   possible (also known\
    \ as the \"minimal perturbation\" problem).  Note\n   that preempting based on\
    \ the minimum number of links might not result\n   in the smallest number of TE\
    \ LSPs being disrupted.  Another\n   application concerns the construction and\
    \ maintenance of a Virtual\n   Network Topology [MLN].  It is also helpful to\
    \ understand which other\n   TE LSPs exist in the network in order to decide how\
    \ to manage the\n   forward adjacencies that exist or need to be set up.  The\
    \ cost-\n   benefit of stateful PCE computation would be helpful to determine\
    \ if\n   the benefit in path computation is sufficient to offset the\n   additional\
    \ drain on the network and computational resources.\n   Conversely, stateless\
    \ PCEs do not have to remember any computed path\n   and each set of request(s)\
    \ is processed independently of each other.\n   For example, stateless PCEs may\
    \ compute paths based on current TED\n   information, which could be out of sync\
    \ with actual network state\n   given other recent PCE-computed paths changes.\
    \  Note that a PCC may\n   include a set of previously computed paths in its request,\
    \ in order\n   to take them into account, for instance, to avoid double bandwidth\n\
    \   accounting or to try to minimize changes (minimum perturbation\n   problem).\n\
    \   Note that the stateless PCE does operate on information about network\n  \
    \ state.  The TED contains link state and bandwidth availability\n   information\
    \ as distributed by the IGPs or collected through some\n   other means.  This\
    \ information could be further enhanced to provide\n   increased granularity and\
    \ more detail to cover, for example, the\n   current bandwidth usage on certain\
    \ links according to resource\n   affinities or forwarding equivalence classes.\
    \  Such information is,\n   however, not PCE state information and so a model\
    \ that uses it is\n   still described as stateless in the PCE context.\n   A limited\
    \ form of statefulness might be applied within an otherwise\n   stateless PCE.\
    \  The PCE may retain some context from paths it has\n   recently computed so\
    \ that it avoids suggesting the use of the same\n   resources for other TE LSPs.\n"
- title: 6.9.  Monitoring
  contents:
  - "6.9.  Monitoring\n   PCE monitoring is undoubtedly of the utmost importance in\
    \ any PCE\n   architecture.  This must include the collection of variables related\n\
    \   to the PCE status and operation.  For example, it will be necessary\n   to\
    \ understand the way in which the TED is being kept synchronized,\n   the rate\
    \ of arrival of new requests and the computation times, the\n   range of PCCs\
    \ that are using the PCE, and the operation of any PCC-\n   PCE protocol.\n"
- title: 6.10.  Confidentiality
  contents:
  - "6.10.  Confidentiality\n   As stated in [RFC4216], the case of inter-provider\
    \ TE LSP computation\n   requires the ability to compute a path while preserving\n\
    \   confidentiality across multiple Service Providers cores.  That is,\n   one\
    \ Service Provider must not be required to divulge any information\n   about its\
    \ resources or topology in order to support inter-provider TE\n   LSP path computation.\
    \  Thus, any PCE architecture solution must\n   support the ability to return\
    \ partial paths by means of loose hops\n   (for example, where each loose hop\
    \ would, for instance, identify a\n   boundary LSR).\n   This requirement is not\
    \ a security issue, but relates to Service\n   Provider policy.  Confidentiality,\
    \ integrity, and authentication of\n   PCC-PCE and PCE-PCE messages must also\
    \ be ensured and are described\n   in Section 10.\n   The ability to compute a\
    \ path at the request of the head-end PCC, but\n   to supply the path in segments\
    \ to the domain boundary PCCs, may also\n   be desirable.\n"
- title: 6.11.  Policy
  contents:
  - "6.11.  Policy\n   Policy impacts multiple aspects of the PCE architecture.  There\
    \ are\n   two applications of policy for consideration:\n   - application of policy\
    \ within an architectural entity (PCC or PCE)\n   - application of policy to PCE-related\
    \ communications\n   As directly applicable to TE LSPs, policy forms part of the\
    \ signaling\n   mechanism for the establishment of the TE LSPs and is not described\n\
    \   here.\n   It is envisioned that policy will be largely applied as a local\n\
    \   matter within each PCC and PCE.  However, this document needs to\n   define\
    \ policy models that can be supported within the PCE\n   architecture and by PCE-related\
    \ communication.\n   Some example policies include:\n   - selection of a PCE by\
    \ a PCC\n   - rejection of a request by the PCE based on the identity of the\n\
    \     requesting PCC\n   - selection by the PCE of a path or application of additional\n\
    \     constraints to a computation based on the PCC, the computation\n     target,\
    \ the time of day, etc.\n"
- title: 6.11.1.  PCE Policy Architecture
  contents:
  - "6.11.1.  PCE Policy Architecture\n   Two examples of the use of policy components\
    \ within the PCE\n   architecture are illustrated in Figures 6 and 7.  Policy\
    \ components\n   could equally be applied to the other PCE configurations shown\
    \ in\n   Section 5.  In each configuration, policy may be consulted before a\n\
    \   response is provided by a PCE and may also be consulted by the\n   PCC/PCE\
    \ that receives the response.\n   A PCE may have a local policy that impacts the\
    \ paths selected to\n   satisfy a particular PCE request.  A policy may be applied\
    \ based on\n   any information provided from a PCC.\n   In Figure 6, the policy\
    \ component is shown providing input to the PCE\n   component.  This policy component\
    \ may consult an external policy\n   database, but this is outside the scope of\
    \ this document.\n              ------------------------------\n             |\
    \                  ---------   | Routing   ----------\n             |        \
    \         |         |  | Protocol |          |\n             |               \
    \  |   TED   |<-+----------+->        |\n             |                 |    \
    \     |  |          |          |\n             |                  ---------  \
    \ |          |          |\n             |                     |        |     \
    \     |          |\n             |                     | Input  |          | \
    \         |\n             |                     v        |          |        \
    \  |\n             |   ---------      ---------   |          |          |\n  \
    \           |  | Policy  |    |         |  |          | Adjacent |\n         \
    \    |  |Component|--->|   PCE   |  |          |   Node   |\n             |  |\
    \         |    |         |  |          |          |\n             |   ---------\
    \      ---------   |          |          |\n             |                   \
    \  ^        |          |          |\n             |                     |Request\
    \ |          |          |\n             |                     |Response|     \
    \     |          |\n             |                     v        |          | \
    \         |\n             |                  ---------   |          |        \
    \  |\n    Service  |                 |         |  | Signaling|          |\n  \
    \   Request |                 |Signaling|  | Protocol |          |\n       ------+---------------->|\
    \ Engine  |<-+----------+->        |\n             |                 |       \
    \  |  |          |          |\n             |                  ---------   | \
    \          ----------\n              ------------------------------\n        \
    \    Figure 6.  Policy Component in the Composite PCE Node\n   Note that policy\
    \ information may be conveyed on the internal\n   interfaces, and on the external\
    \ protocol interfaces.\n   Figure 7 displays the case of a distinct PCE function\
    \ through the\n   example of the multiple PCE with inter-PCE communication example\n\
    \   (compare with Figure 4).  Each PCE takes input from local policy as\n   part\
    \ of the router computation/determination process.  The local\n   policy components\
    \ may consult external policy components or\n   databases, but that is out of\
    \ the scope of this document.\n   Note that policy information may be conveyed\
    \ on the external protocol\n   interfaces, including the inter-PCE interface.\n\
    \      ------------------                             ------------------\n   \
    \  |                  | Inter-PCE Request/Response|                  |\n     |\
    \       PCE        |<------------------------->|       PCE        |\n     |  \
    \                |                           |                  |\n     |  ------\
    \   -----  |                           |  ------   -----  |\n     | |Policy| |\
    \ TED | |                           | |Policy| | TED | |\n     |  ------   -----\
    \  |                           |  ------   -----  |\n      ------------------\
    \                             ------------------\n                ^\n        \
    \        | Request/\n                | Response\n                v\n   Service\
    \ ----------  Signaling   ----------  Signaling   ----------\n   Request| Head-End\
    \ | Protocol   | Adjacent | Protocol   | Adjacent |\n     ---->|  Node    |<---------->|\
    \   Node   |<---------->|   Node   |\n           ----------              ----------\
    \              ----------\n         Figure 7.  Policy Components in Multiple PCEs\n"
- title: 6.11.2.  Policy Realization
  contents:
  - "6.11.2.  Policy Realization\n   There are multiple options for how policy information\
    \ is coordinated.\n   - Policy decisions may be made by PCCs before consulting\
    \ PCEs.  This\n     type of decision includes selection of PCE, application of\n\
    \     constraints, and interpretation of service requests.\n   - Policy decisions\
    \ may be made independently at a PCE, or at each\n     cooperating PCE.  That\
    \ is, the PCE(s) may make policy decisions\n     independent of other policy decisions\
    \ made at PCCs or other PCEs.\n   - There may also be explicit communication of\
    \ policy information\n     between PCC and PCE, or between PCEs to achieve some\
    \ level of\n     coordination of policy between entities.  The type of information\n\
    \     conveyed to support policy has important implications on what\n     policies\
    \ may be applied at each PCE, and the requirements for the\n     exchange of policy\
    \ information inform the choice or implementation\n     of communication protocols\
    \ including PCC-PCE, PCE-PCE, and\n     discovery protocols.\n"
- title: 6.11.3.  Type of Policies
  contents:
  - "6.11.3.  Type of Policies\n   Within the context of PCE, we identify several\
    \ types of policies:\n   o User-specific policies operate on information that\
    \ is specific to\n     the user of a service or the service itself, that is, the\
    \ service\n     for which the path is being computed, not the computation service.\n\
    \     Examples of such information includes the contents of objects of a\n   \
    \  signaling or provisioning message, the port ID over which the\n     message\
    \ was received, a VPN ID, a reference point type, or the\n     identity of the\
    \ user initiating the request.  User-specific\n     policies could be applied\
    \ by a PCC while building a path\n     computation request, or by a PCE while\
    \ processing the request\n     provided that sufficient information is supplied\
    \ by the PCC to the\n     PCE.\n   o Request-specific policies operate on information\
    \ that is specific\n     to a path computation request and is carried in the request.\n\
    \     Examples of such information include constraints, diversities,\n     constraint\
    \ and diversity relaxation strategies, and optimization\n     functions.  Request-specific\
    \ policies directly affect the path\n     selection process because they specify\
    \ which links, nodes, path\n     segments, and/or paths are not acceptable or,\
    \ on the contrary, may\n     be desirable in the resulting paths.\n   o Domain-specific\
    \ policies operate on the identify of the domain in\n     which the requesting\
    \ PCC exists, and upon the identities of the\n     domains through which the resulting\
    \ paths are routed.  These\n     policies have the same effect as user-specific\
    \ policies, with the\n     difference that they can be applied to a group of users\
    \ rather than\n     an individual user.  One example of domain-specific policy\
    \ is a\n     restriction on what information a PCE publishes within a given\n\
    \     domain.  In such a case, PCEs in some domains may advertise just\n     their\
    \ presence, while others may advertise details regarding their\n     capabilities,\
    \ client authentication process, and computation\n     resource availability.\n"
- title: 6.11.4.  Relationship to Signaling
  contents:
  - "6.11.4.  Relationship to Signaling\n   When a path for an inter-domain TE LSP\
    \ is being computed, it is not\n   required to consider signaling plane policy.\
    \  However, failure to do\n   so may result in the TE LSP failing to be established,\
    \ or being\n   assigned fewer resources than intended resulting in a substandard\n\
    \   service.  Thus, where a PCE invoked by a head-end LSR has visibility\n   into\
    \ other domains, it should be capable of applying policy\n   considerations to\
    \ the computation and should be aware of the inter-\n   domain policy agreements.\
    \  Where path computation is the result of\n   cooperation between PCEs, each\
    \ of which is responsible for a\n   particular domain, the policy issues should,\
    \ where possible, be\n   resolved at the time of computation so that the TE LSP\
    \ is more likely\n   to be signaled successfully.  In this context, policy violation\n\
    \   during inter-domain TE LSP computation may lead to path computation\n   interruption,\
    \ about which the requester should be notified along with\n   the cause.\n"
- title: 6.12.  Unsolicited Interactions
  contents:
  - "6.12.  Unsolicited Interactions\n   It may be that the PCC-PCE communications\
    \ (see Section 6.6) can be\n   usefully extended beyond a simple request/response\
    \ interaction.  For\n   example, the PCE and PCC could exchange capabilities using\
    \ this\n   protocol.  Additionally, the protocol could be used to collect and\n\
    \   report information in support of a stateful PCE.\n   Furthermore, it may be\
    \ the case that a PCE is able to update a path\n   that it computed earlier (perhaps\
    \ in reaction to a change in the\n   network or a change in policy), and in this\
    \ case the PCE-PCC\n   communication could support an \"unsolicited\" path computation\
    \ message\n   to supply this new path to the PCC.  Note, however, that this\n\
    \   function would require that the PCE retained a record of previous\n   computations\
    \ and had a clear trigger for performing recomputations.\n   The PCC would also\
    \ need to be able to identify the new path with the\n   old path and determine\
    \ whether it should act on the new path.\n   Further, the PCC should be able to\
    \ report the outcome of such path\n   changes to the requesting PCE.  Note that\
    \ the PCE-PCC interaction is\n   not a management interaction and the PCC is not\
    \ obliged to utilize\n   any additional path supplied by the PCE.\n   These functions\
    \ fit easily within the architecture described here but\n   are left for further\
    \ discussion within separate requirements\n   documents.\n"
- title: 6.13.  Relationship with Crankback
  contents:
  - "6.13.  Relationship with Crankback\n   Crankback routing is a mechanism whereby\
    \ a failure to establish a\n   path or a failure of an existing path may be corrected\
    \ by a new path\n   computation and fresh signaling.  Crankback routing relies\
    \ on the\n   distribution of crankback information along with the failure\n  \
    \ notification so that the new computation can be performed avoiding\n   the failure\
    \ or blockage point.\n   In the context of PCE, crankback information may be passed\
    \ back to\n   the head-end where the process of computation and signaling can\
    \ be\n   repeated using the failed resource as an exclusion in the computation\n\
    \   process.  But crankback may be used to attempt to correct the problem\n  \
    \ at intermediate points along the path.  Such crankback recomputation\n   nodes\
    \ are most likely to be domain boundaries where the PCC had\n   already invoked\
    \ a PCE.  Thus, a failure within a domain is reported\n   to the ingress domain\
    \ boundary, which will attempt to compute an\n   alternate path across the domain.\
    \  Failing this, the problem may be\n   reported to the previous domain and communicated\
    \ to the ingress\n   boundary for that domain, which may attempt to select a more\n\
    \   successful path either by choosing a different entry point into the\n   next\
    \ domain, or by selecting a route through a different set of\n   domains.\n"
- title: 7.  The View from the Path Computation Client
  contents:
  - "7.  The View from the Path Computation Client\n   The view of the PCE architecture,\
    \ and particularly the functional\n   model, is subtly different from the PCC's\
    \ perspective.  This is\n   partly because the PCC has limited knowledge of the\
    \ way in which the\n   PCEs cooperate to answer its requests, but depends more\
    \ on the fact\n   that the PCC is concerned with different questions.\n   The\
    \ PCC is interested in the following:\n   - Selecting a PCE that is able to promptly\
    \ provide a computed path\n     that meets the supplied constraints.\n   - How\
    \ many computation requests will the PCC have to send? Will the\n     desired\
    \ path be computed by the first PCE contacted (possibly in\n     cooperation with\
    \ other PCEs), or will the PCC have to consult other\n     PCEs to fill in gaps\
    \ in the path?\n   - How many other path computations will need to be issued from\
    \ within\n     the network in order to establish the TE LSP?\n   This last question\
    \ might be considered out of scope for the head-end\n   LSR, but an important\
    \ constraint that the PCC may wish to apply is\n   that the path should be computed\
    \ in its entirety and supplied without\n   loose hops or non-simple abstract nodes.\n\
    \   Thus, with its limited perspective, the PCC will see Multiple PCE\n   Path\
    \ Computation (Section 5.3) as important and will distinguish two\n   subcases.\
    \  The first is as shown in Figure 3 with subsequent\n   computation requests\
    \ made by other PCCs along the path of the TE LSP.\n   In the second, multiple\
    \ computation requests are issued by the head-\n   end LSR.  On the other hand,\
    \ the PCC will not be aware of Multiple\n   PCE Path Computation with Inter-PCE\
    \ Communication (Section 5.4),\n   which it will perceive as no different from\
    \ the simple External PCE\n   Node case (Section 5.2).\n   The PCC, therefore,\
    \ will be acutely aware that a Centralized PCE\n   Model (Section 6.1) might still\
    \ require Multiple PCE Path\n   Computations with the head-end or subsequent PCCs\
    \ required to issue\n   further requests to the central PCE.  Conversely, the\
    \ PCC may be\n   protected from the Distributed PCE Model (Section 6.2) because\
    \ the\n   first PCE it consults uses inter-PCE communication to achieve a\n  \
    \ complete computation result so that no further computation requests\n   are\
    \ required.\n   These distinctions can be completely classified by determining\n\
    \   whether the computation response includes all necessary paths, and\n   whether\
    \ those paths are fully explicit (that is, containing only\n   strict hops between\
    \ simple abstract nodes).\n"
- title: 8.  Evaluation Metrics
  contents:
  - "8.  Evaluation Metrics\n   Evaluation metrics that may be used to evaluate the\
    \ efficiency and\n   applicability of any PCE-based solution are listed below.\
    \  Note that\n   these metrics are not being used to determine paths, but are\
    \ used to\n   evaluate potential solutions to the PCE architecture.\n   - Optimality:\
    \ The ability to maximize network utilization and\n     minimize cost, considering\
    \ QoS objectives, multiple regions, and\n     network layers.  Note that models\
    \ that require the sequential\n     involvement of multiple PCEs (for example,\
    \ the multiple PCE model\n     described in Section 5.3) might create path loops\
    \ unless careful\n     policy is applied.\n   - Scalability: The implications\
    \ of routing, TE LSP signaling, and PCE\n     communication overhead, such as\
    \ the number of messages and the size\n     of messages (including LSAs, crankback\
    \ information, queries,\n     distribution mechanisms, etc.).\n   - Load sharing:\
    \ The ability to allow multiple PCEs to spread the path\n     computation load\
    \ by allowing multiple PCEs each to take\n     responsibility for a subset of\
    \ the total path computation requests.\n   - Multi-path computation: The ability\
    \ to compute multiple and\n     potentially diverse paths to satisfy load-sharing\
    \ of traffic and\n     protection/restoration needs including end-to-end diversity\
    \ and\n     protection within individual domains.\n   - Reoptimization: The ability\
    \ to perform TE LSP path reoptimization.\n     This also includes the ability\
    \ to perform inter-layer correlation\n     when considering the reoptimization\
    \ at any specific layer.\n   - Path computation time: The time to compute individual\
    \ paths and\n     multiple diverse paths and to satisfy bulk path computation\n\
    \     requests.  (Note that such a metric can only be applied to problems\n  \
    \   that are not NP-complete.)\n   - Network stability: The ability to minimize\
    \ any perturbation on\n     existing TE state resulting from the computation and\
    \ establishment\n     of new TE paths.\n   - Ability to maintain accurate synchronization\
    \ between TED and\n     network topology and resource states.\n   - Speed with\
    \ which TED synchronization is achieved.\n   - Impact of the synchronization process\
    \ on the data flows in the\n     network.\n   - Ability to deal with situations\
    \ where paths satisfying a required\n     set of constraints cannot be found by\
    \ the PCE.\n   - Policy: Application of policy to the PCC-PCE and PCE-PCE\n  \
    \   communications as well as to the computation of paths that respect\n     inter-domain\
    \ TE LSP establishment policies.\n   Note that other metrics may also be considered.\
    \  Such metrics should\n   be used when evaluating a particular PCE-based architecture.\
    \  The\n   potential tradeoffs of the optimization of such metrics should be\n\
    \   evaluated (for instance, increasing the path optimality is likely to\n   have\
    \ consequences on the computation time).\n"
- title: 9.  Manageability Considerations
  contents:
  - "9.  Manageability Considerations\n   The PCE architecture introduces several\
    \ elements that are subject to\n   manageability.  The PCE itself must be managed,\
    \ as must its\n   communications with PCCs and other PCEs.  The mechanism by which\
    \ PCEs\n   and PCCs discover each other are also subject to manageability.\n \
    \  Many of the issues of manageability are already covered in other\n   sections\
    \ of this document.\n"
- title: 9.1.  Control of Function and Policy
  contents:
  - "9.1.  Control of Function and Policy\n   It must be possible to enable and disable\
    \ the PCE function at a PCE,\n   and this will lead to the PCE accepting, rejecting,\
    \ or simply not\n   receiving requests from PCCs.  Graceful shutdown of the PCE\
    \ function\n   should also be considered so that in controlled circumstances (such\n\
    \   as software upgrade) a PCE does not just 'disappear' but warns its\n   PCCs\
    \ and gracefully handles any queued computation requests (perhaps\n   by completing\
    \ them, forwarding them to another PCE, or rejecting\n   them).\n   Similarly\
    \ it must be possible to control the application of policy at\n   the PCE through\
    \ configuration.  This control may include the\n   restriction of certain functions\
    \ or algorithms, the configuration of\n   access rights and priorities for PCCs,\
    \ and the relationships with\n   other PCEs both inside and outside the domain.\n\
    \   The policy configuration interface is yet to be determined.  The\n   interface\
    \ may be purely a local matter, or it may be supported via a\n   standardized\
    \ interface (such as a MIB module).\n"
- title: 9.2.  Information and Data Models
  contents:
  - "9.2.  Information and Data Models\n   It is expected that the operations of PCEs\
    \ and PCCs will be modeled\n   and controlled through appropriate MIB modules.\
    \  The tables in the\n   new MIB modules will need to reflect the relationships\
    \ between\n   entities and to control and report on configurable options.\n  \
    \ Statistics gathering will form an important part of the operation of\n   PCEs.\
    \  The operator must be able to determine the historical\n   interactions of a\
    \ PCC with its PCEs, the performance that it has\n   seen, and the success rate\
    \ of its requests.  Similarly, it is\n   important for an operator to be able\
    \ to inspect a PCE and determine\n   its load and whether an individual PCC is\
    \ responsible for a\n   disproportionate amount of the load.  It will also be\
    \ important to be\n   able to record and inspect statistics about the communications\n\
    \   between the PCC and PCE, including issues such as malformed messages,\n  \
    \ unauthorized messages, and messages discarded because of congestion.\n   In\
    \ this respect, there is clearly an overlap between manageability\n   and security.\n\
    \   Statistics for the PCE architecture can be made available through\n   appropriate\
    \ tables in the new MIB modules.\n   The new MIB modules should also be used to\
    \ provide notifications when\n   key thresholds are crossed or when important\
    \ events occur.  Great\n   care must be exercised to ensure that the network is\
    \ not flooded with\n   Simple Network Management Protocol (SNMP) notifications.\
    \  Thus, it\n   might be inappropriate to issue a notification every time a PCE\n\
    \   receives a request to compute a path.  In any case, full control must\n  \
    \ be provided to allow notifications to be disabled using, for example,\n   the\
    \ mechanisms defined in the SNMP-NOTIFICATION-MIB module in\n   [RFC3413].\n"
- title: 9.3.  Liveness Detection and Monitoring
  contents:
  - "9.3.  Liveness Detection and Monitoring\n   Section 6.5 discusses the importance\
    \ of a PCC being able to detect\n   the liveness of a PCE.  PCE-PCC communications\
    \ techniques must enable\n   a PCC to determine the liveness of a PCE both before\
    \ it sends a\n   request and in the period between sending a request and receiving\
    \ a\n   response.\n   It is less important for a PCE to know about the liveness\
    \ of PCCs,\n   and within the simple request/response model, this is only helpful\n\
    \   - to gain a predictive view of the likely loading of a PCE in the\n     future,\
    \ or\n   - to allow a PCE to abandon processing of a received request.\n"
- title: 9.4.  Verifying Correct Operation
  contents:
  - "9.4.  Verifying Correct Operation\n   Correct operation for the PCE architecture\
    \ can be classified as\n   determining the correct point-to-point connectivity\
    \ between PCCs and\n   PCEs, and as assessing the validity of the computed paths.\
    \  The\n   former is a security issue that may be enhanced by authentication and\n\
    \   monitored through event logging and records as described in Section\n   9.1.\
    \  It may also be a routing issue to ensure that PCC-PCE\n   connectivity is possible.\n\
    \   Verifying computed paths is more complex.  The information to perform\n  \
    \ this function can, however, be made available to the operator through\n   MIB\
    \ tables, provided that full records are kept of the constraints\n   passed on\
    \ the request, the path computed and provided on the\n   response, and any additional\
    \ information supplied by the PCE such as\n   the constraint relaxation policies\
    \ applied.\n"
- title: 9.5.  Requirements on Other Protocols and Functional Components
  contents:
  - "9.5.  Requirements on Other Protocols and Functional Components\n   At the architectural\
    \ stage, it is impossible to make definitive\n   statements about the impact on\
    \ other protocols and functional\n   components since the solution's work has\
    \ not been completed.\n   However, it is possible to make some observations.\n\
    \   - Dependence on underlying transport protocols\n     PCE-PCC communications\
    \ may choose to utilize underlying protocols\n     to provide transport mechanisms.\
    \  In this case, some of the\n     manageability considerations described in the\
    \ previous sections may\n     be devolved to those protocols.\n   - Re-use of\
    \ existing protocols for discovery\n     Without prejudicing the requirements\
    \ and solutions work for PCE\n     discovery (see Section 6.4), it is possible\
    \ that use will be made\n     of existing protocols to facilitate this function.\
    \  In this case\n     some of the manageability considerations described in the\
    \ previous\n     sections may be devolved to those protocols.\n   - Impact on\
    \ LSRs and TE LSP signaling\n     The primary example of a PCC identified in this\
    \ architecture is an\n     MPLS or a GMPLS LSR.  Consideration must therefore\
    \ be given to the\n     manageability of the LSRs and the additional manageability\n\
    \     constraints applicable to the TE LSP signaling protocols.\n     In addition\
    \ to allowing the PCC management described in the\n     previous sections, an\
    \ LSR must be configurable to determine whether\n     it will use a remote PCE\
    \ at all, the options being to use hop-by-\n     hop routing or to supply the\
    \ PCE function itself.  It is likely to\n     be important to be able to distinguish\
    \ within an LSR whether the\n     route used for a TE LSP was supplied in a signaling\
    \ message from\n     another LSR, by an operator, or by a PCE, and, in the case\
    \ where it\n     was supplied in a signaling message, whether it was enhanced\
    \ or\n     expanded by a PCE.\n   - Reuse of existing policy models and mechanisms\n\
    \     As policy support mechanisms can be quite extensive, it is\n     worthwhile\
    \ to explore to what extent this prior work can be\n     leveraged and applied\
    \ to PCE.  This desire to leverage prior work\n     should not be interpreted\
    \ as a requirement to use any particular\n     solution or protocol.\n"
- title: 9.6.  Impact on Network Operation
  contents:
  - "9.6.  Impact on Network Operation\n   This architecture may have two impacts\
    \ on the operation of a network.\n   It increases TE LSP setup times while requests\
    \ are sent to and\n   processed by a remote PCE, and it may cause congestion within\
    \ the\n   network if a significant number of computation requests are issued in\n\
    \   a small period of time.  These issues are most severe in busy\n   networks\
    \ and after network failures, although the effect may be\n   mitigated if the\
    \ protection paths are precomputed or if the path\n   computation load is distributed\
    \ among a set of PCEs.\n   Issues of potential congestion during recovery from\
    \ failures may be\n   mitigated through the use of pre-established protection\
    \ schemes such\n   as fast reroute.\n   It is important that network congestion\
    \ be managed proactively\n   because it may be impossible to manage it reactively\
    \ once the network\n   is congested.  It should be possible for an operator to\
    \ rate limit\n   the requests that a PCC sends to a PCE, and a PCE should be able\
    \ to\n   report impending congestion (according to a configured threshold)\n \
    \  both to the operator and to its PCCs.\n"
- title: 9.7.  Other Considerations
  contents:
  - "9.7.  Other Considerations\n   No other management considerations have been identified.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The impact of the use of a PCE-based architecture\
    \ must be considered\n   in the light of the impact that it has on the security\
    \ of the\n   existing routing and signaling protocols and techniques in use within\n\
    \   the network.  The impact may be less likely to be an issue in the\n   case\
    \ of intra-domain use of PCE, but an increase in inter-domain\n   information\
    \ flows and the facilitation of inter-domain path\n   establishment may increase\
    \ the vulnerability to security attacks.\n   Of particular relevance are the implications\
    \ for confidentiality\n   inherent in a PCE-based architecture for multi-domain\
    \ networks.  It\n   is not necessarily the case that a multi-domain PCE solution\
    \ will\n   compromise security, but solutions MUST examine their effects in this\n\
    \   area.\n   Applicability statements for particular combinations of signaling,\n\
    \   routing and path computation techniques are expected to contain\n   detailed\
    \ security sections.\n   Note that the use of a non-local PCE (that is, one not\
    \ co-resident\n   with the PCC) does introduce additional security issues.  Most\n\
    \   notable among these are:\n   - interception of PCE requests or responses;\n\
    \   - impersonation of PCE or PCC;\n   - falsification of TE information, policy\
    \ information, or PCE\n     capabilities; and\n   - denial-of-service attacks\
    \ on PCE or PCE communication mechanisms.\n   It is expected that PCE solutions\
    \ will address these issues in detail\n   using authentication and security techniques.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The authors would like to extend their warmest thanks\
    \ to (in\n   alphabetical order) Arthi Ayyangar, Zafar Ali, Lou Berger, Mohamed\n\
    \   Boucadair, Igor Bryskin, Dean Cheng, Vivek Dubey, Kireeti Kompella,\n   Jean-Louis\
    \ Le Roux, Stephen Morris, Eiji Oki, Dimitri Papadimitriou,\n   Richard Rabbat,\
    \ Payam Torab, Takao Shimizu, and Raymond Zhang for\n   their review and suggestions.\
    \  Lou Berger provided valuable and\n   detailed contributions to the discussion\
    \ of policy in this document.\n   Thanks also to Pekka Savola, Russ Housley and\
    \ Dave Kessens for review\n   and constructive discussions during the final stages\
    \ of publication.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [RFC2702]  Awduche, D., Malcolm, J., Agogbua,\
    \ J., O'Dell, M., and J.\n              McManus, \"Requirements for Traffic Engineering\
    \ Over MPLS\",\n              RFC 2702, September 1999.\n   [RFC4364]  Rosen,\
    \ E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks (VPNs)\"\
    , RFC 4364, February 2006.\n   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li,\
    \ T., Srinivasan, V.,\n              and G. Swallow, \"RSVP-TE: Extensions to\
    \ RSVP for LSP\n              Tunnels\", RFC 3209, December 2001.\n   [RFC3630]\
    \  Katz, D., Kompella, K., and D. Yeung, \"Traffic Engineering\n             \
    \ (TE) Extensions to OSPF Version 2\", RFC 3630, September\n              2003.\n\
    \   [RFC3413]  Levi, D., Meyer, P., and B. Stewart, \"Simple Network\n       \
    \       Management Protocol (SNMP) Applications\", STD 62, RFC\n             \
    \ 3413, December 2002.\n   [RFC3473]  Berger, L., \"Generalized Multi-Protocol\
    \ Label Switching\n              (GMPLS) Signaling Resource ReserVation Protocol-Traffic\n\
    \              Engineering (RSVP-TE) Extensions\", RFC 3473, January 2003.\n \
    \  [RFC3748]  Smit, H. and T. Li, \"Intermediate System to Intermediate\n    \
    \          System (IS-IS) Extensions for Traffic Engineering (TE)\",\n       \
    \       RFC 3784, June 2004.\n   [RFC3812]  Srinivasan, C., Viswanathan, A., and\
    \ T. Nadeau,\n              \"Multiprotocol Label Switching (MPLS) Traffic Engineering\n\
    \              (TE) Management Information Base (MIB)\", RFC 3812, June\n    \
    \          2004.\n   [RFC4105]  Le Roux, J.-L., Vasseur, J.-P., and J. Boyle,\n\
    \              \"Requirements for Inter-Area MPLS Traffic Engineering\",\n   \
    \           RFC 4105, June 2005.\n   [RFC4216]  Zhang, R. and J.-P. Vasseur, \"\
    MPLS Inter-Autonomous System\n              (AS) Traffic Engineering (TE) Requirements\"\
    , RFC 4216,\n              November 2005.\n   [MLN]      Shiomoto, K., Papdimitriou,\
    \ D., Le Roux, J.-L., Vigoureux,\n              M., and D. Brungard, \"Requirements\
    \ for GMPLS-based multi-\n              region and multi-layer networks (MRN/MLN)\"\
    , Work in\n              Progress, June 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adrian Farrel\n   Old Dog Consulting\n   EMail: adrian@olddog.co.uk\n\
    \   Jean-Philippe Vasseur\n   1414 Massachussetts Avenue\n   Boxborough, MA 01719\n\
    \   USA\n   EMail: jpv@cisco.com\n   Jerry Ash\n   AT&T\n   Room MT D5-2A01\n\
    \   200 Laurel Avenue\n   Middletown, NJ 07748,\n   USA\n   Phone: (732)-420-4578\n\
    \   Fax:   (732)-368-8659\n   EMail: gash@att.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
