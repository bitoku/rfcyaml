- title: __initial_text__
  contents:
  - '                 Options for Repair of Streaming Media

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document summarizes a range of possible techniques for the\n\
    \   repair of continuous media streams subject to packet loss.  The\n   techniques\
    \ discussed include redundant transmission, retransmission,\n   interleaving and\
    \ forward error correction.  The range of\n   applicability of these techniques\
    \ is noted, together with the\n   protocol requirements and dependencies.\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   A number of applications have emerged which use RTP/UDP transport\
    \ to\n   deliver continuous media streams.  Due to the unreliable nature of\n\
    \   UDP packet delivery, the quality of the received stream will be\n   adversely\
    \ affected by packet loss.  A number of techniques exist by\n   which the effects\
    \ of packet loss may be repaired.  These techniques\n   have a wide range of applicability\
    \ and require varying degrees of\n   protocol support.  In this document, a number\
    \ of such techniques are\n   discussed, and recommendations for their applicability\
    \ made.\n   It should be noted that this document is introductory in nature, and\n\
    \   does not attempt to be comprehensive.  In particular, we restrict our\n  \
    \ discussion to repair techniques which require the involvement of the\n   sender\
    \ of a media stream, and do not discuss possibilities for\n   receiver based repair.\n\
    \   For a more detailed survey, the reader is referred to [5].\n"
- title: 2  Terminology and Protocol Framework
  contents:
  - "2  Terminology and Protocol Framework\n   A unit is defined to be a timed interval\
    \ of media data, typically\n   derived from the workings of the media coder. \
    \ A packet comprises one\n   or more units, encapsulated for transmission over\
    \ the network.  For\n   example, many audio coders operate on 20ms units, which\
    \ are typically\n   combined to produce 40ms or 80ms packets for transmission.\
    \  The\n   framework of RTP [18] is assumed.  This implies that packets have a\n\
    \   sequence number and timestamp.  The sequence number denotes the order\n  \
    \ in which packets are transmitted, and is used to detect losses.  The\n   timestamp\
    \ is used to determine the playout order of units.  Most loss\n   recovery schemes\
    \ rely on units being sent out of order, so an\n   application must use the RTP\
    \ timestamp to schedule playout.\n   The use of RTP allows for several different\
    \ media coders, with a\n   payload type field being used to distinguish between\
    \ these at the\n   receiver.  Some loss repair schemes send multiple copies of\
    \ units, at\n   different times and possibly with different encodings, to increase\n\
    \   the probability that a receiver has something to decode.  A receiver\n   is\
    \ assumed to have a `quality' ranking of the differing encodings,\n   and so is\
    \ capable of choosing the `best' unit for playout, given\n   multiple options.\n\
    \   A session is defined as interactive if the end-to-end delay is less\n   then\
    \ 250ms, including media coding and decoding, network transit and\n   host buffering.\n"
- title: 3  Network Loss Characteristics
  contents:
  - "3  Network Loss Characteristics\n   If it is desired to repair a media stream\
    \ subject to packet loss, it\n   is useful to have some knowledge of the loss\
    \ characteristics which\n   are likely to be encountered.  A number of studies\
    \ have been\n   conducted on the loss characteristics of the Mbone [2, 8, 21]\
    \ and\n   although the results vary somewhat, the broad conclusion is clear:\n\
    \   in a large conference it is inevitable that some receivers will\n   experience\
    \ packet loss.  Packet traces taken by Handley [8] show a\n   session in which\
    \ most receivers experience loss in the range 2-5%,\n   with a somewhat smaller\
    \ number seeing significantly higher loss\n   rates.  Other studies have presented\
    \ broadly similar results.\n   It has also been shown that the vast majority of\
    \ losses are of single\n   packets.  Burst losses of two or more packets are around\
    \ an order of\n   magnitude less frequent than single packet loss, although they\
    \ do\n   occur more often than would be expected from a purely random process.\n\
    \   Longer burst losses (of the order of tens of packets) occur\n   infrequently.\
    \  These results are consistent with a network where\n   small amounts of transient\
    \ congestion cause the majority of packet\n   loss.  In a few cases, a network\
    \ link is found to be severely\n   overloaded, and large amount of loss results.\n\
    \   The primary focus of a repair scheme must, therefore, be to correct\n   single\
    \ packet loss, since this is by far the most frequent\n   occurrence.  It is desirable\
    \ that losses of a relatively small number\n   of consecutive packets may also\
    \ be repaired, since such losses\n   represent a small but noticeable fraction\
    \ of observed losses.  The\n   correction of large bursts of loss is of considerably\
    \ less\n   importance.\n"
- title: 4  Loss Mitigation Schemes
  contents:
  - "4  Loss Mitigation Schemes\n   In the following sections, four loss mitigation\
    \ schemes are\n   discussed.  These schemes have been discussed in the literature\
    \ a\n   number of times, and found to be of use in a number of scenarios.\n  \
    \ Each technique is briefly described, and its advantages and\n   disadvantages\
    \ noted.\n"
- title: 4.1 Retransmission
  contents:
  - "4.1 Retransmission\n   Retransmission of lost packets is an obvious means by\
    \ which loss may\n   be repaired.  It is clearly of value in non-interactive applications,\n\
    \   with relaxed delay bounds, but the delay imposed means that it does\n   not\
    \ typically perform well for interactive use.\n   In addition to the possibly\
    \ high latency, there is a potentially\n   large bandwidth overhead to the use\
    \ of retransmission.  Not only are\n   units of data sent multiple times, but\
    \ additional control traffic\n   must flow to request the retransmission.  It\
    \ has been shown that, in\n   a large Mbone session, most packets are lost by\
    \ at least one receiver\n   [8].  In this case the overhead of requesting retransmission\
    \ for most\n   packets may be such that the use of forward error correction is\
    \ more\n   acceptable.  This leads to a natural synergy between the two\n   mechanisms,\
    \ with a forward error correction scheme being used to\n   repair all single packet\
    \ losses, and those receivers experiencing\n   burst losses, and willing to accept\
    \ the additional latency, using\n   retransmission based repair as an additional\
    \ recovery mechanism.\n   Similar mechanisms have been used in a number of reliable\
    \ multicast\n   schemes, and have received some discussion in the literature [9,\
    \ 13].\n   In order to reduce the overhead of retransmission, the retransmitted\n\
    \   units may be piggy-backed onto the ongoing transmission, using a\n   payload\
    \ format such as that described in [15].  This also allows for\n   the retransmission\
    \ to be recoded in a different format, to further\n   reduce the bandwidth overhead.\
    \  As an alternative, FEC information\n   may be sent in response to retransmission\
    \ requests [13], allowing a\n   single retransmission to potentially repair several\
    \ losses.  The\n   choice of a retransmission request algorithm which is both\
    \ timely and\n   network friendly is an area of current study.  An obvious starting\n\
    \   point is the SRM protocol [7], and experiments have been conducted\n   using\
    \ this, and with a low-delay variant, STORM [20].  This work\n   shows the trade-off\
    \ between latency and quality for retransmission\n   based repair schemes, and\
    \ illustrates that retransmission is an\n   effective approach to repair for applications\
    \ which can tolerate the\n   latency.\n   There is no standard protocol framework\
    \ for requesting retransmission\n   of streaming media.  An experimental RTP profile\
    \ extension for SRM-\n   style retransmission requests has described in [14].\n"
- title: 4.2 Forward Error Correction
  contents:
  - "4.2 Forward Error Correction\n   Forward error correction (FEC) is the means\
    \ by which repair data is\n   added to a media stream, such that packet loss can\
    \ be repaired by the\n   receiver of that stream with no further reference to\
    \ the sender.\n   There are two classes of repair data which may be added to a\
    \ stream:\n   those which are independent of the contents of the stream, and those\n\
    \   which use knowledge of the stream to improve the repair process.\n"
- title: 4.2.1 Media-Independent FEC
  contents:
  - "4.2.1 Media-Independent FEC\n   A number of media-independent FEC schemes have\
    \ been proposed for use\n   with streamed media.  These techniques add redundant\
    \ data, which is\n   transmitted in separate packets, to a media stream.  Traditionally,\n\
    \   FEC techniques are described as loss detecting and/or loss\n   correcting.\
    \  In the case of streamed media, loss detection is\n   provided by the sequence\
    \ numbers in RTP packets.\n   The redundant FEC data is typically calculated using\
    \ the mathematics\n   of finite fields [1].  The simplest of finite field is GF(2)\
    \ where\n   addition is just the eXclusive-OR operation.  Basic FEC schemes\n\
    \   transmit k data packets with n-k parity packets allowing the\n   reconstruction\
    \ of the original data from any k of the n transmitted\n   packets.  Budge et\
    \ al [4] proposed applying the XOR operation across\n   different combinations\
    \ of the media data with the redundant data\n   transmitted separately as parity\
    \ packets.  These vary the pattern of\n   packets over which the parity is calculated,\
    \ and hence have different\n   bandwidth, latency and loss repair characteristics.\n\
    \   Parity-based FEC based techniques have a significant advantage in\n   that\
    \ they are media independent, and provide exact repair for lost\n   packets. \
    \ In addition, the processing requirements are relatively\n   light, especially\
    \ when compared with some media-specific FEC\n   (redundancy) schemes which use\
    \ very low bandwidth, but high\n   complexity encodings.  The disadvantage of\
    \ parity based FEC is that\n   the codings have higher latency in comparison with\
    \ the media-specific\n   schemes discussed in following section.\n   A number\
    \ of FEC schemes exist which are based on higher-order finite\n   fields, for\
    \ example Reed-Solomon (RS) codes, which are more\n   sophisticated and computationally\
    \ demanding.  These are usually\n   structured so that they have good burst loss\
    \ protection, although\n   this typically comes at the expense of increased latency.\
    \  Dependent\n   on the observed loss patterns, such codes may give improved\n\
    \   performance, compared to parity-based FEC.\n   An RTP payload format for generic\
    \ FEC, suitable for both parity based\n   and Reed-Solomon encoded FEC is defined\
    \ in [17].\n"
- title: 4.2.2 Media-Specific FEC
  contents:
  - "4.2.2 Media-Specific FEC\n   The basis of media-specific FEC is to employ knowledge\
    \ of a media\n   compression scheme to achieve more efficient repair of a stream\
    \ than\n   can otherwise be achieved.  To repair a stream subject to packet\n\
    \   loss, it is necessary to add redundancy to that stream:  some\n   information\
    \ is added which is not required in the absence of packet\n   loss, but which\
    \ can be used to recover from that loss.\n   The nature of a media stream affects\
    \ the means by which the\n   redundancy is added.  If units of media data are\
    \ packets, or if\n   multiple units are included in a packet, it is logical to\
    \ use the\n   unit as the level of redundancy, and to send duplicate units.  By\n\
    \   recoding the redundant copy of a unit, significant bandwidth savings\n   may\
    \ be made, at the expense of additional computational complexity\n   and approximate\
    \ repair.  This approach has been advocated for use\n   with streaming audio [2,\
    \ 10] and has been shown to perform well.  An\n   RTP payload format for this\
    \ form of redundancy has been defined [15].\n   If media units span multiple packets,\
    \ for instance video, it is\n   sensible to include redundancy directly within\
    \ the output of a codec.\n   For example the proposed RTP payload for H.263+ [3]\
    \ includes multiple\n   copies of key portions of the stream, separated to avoid\
    \ the problems\n   of packet loss.  The advantages of this second approach is\n\
    \   efficiency: the codec designer knows exactly which portions of the\n   stream\
    \ are most important to protect, and low complexity since each\n   unit is coded\
    \ once only.\n   An alternative approach is to apply media-independent FEC techniques\n\
    \   to the most significant bits of a codecs output, rather than applying\n  \
    \ it over the entire packet.  Several codec descriptions include bit\n   sensitivities\
    \ that make this feasible.  This approach has low\n   computational cost and can\
    \ be tailored to represent an arbitrary\n   fraction of the transmitted data.\n\
    \   The use of media-specific FEC has the advantage of low-latency, with\n   only\
    \ a single-packet delay being added.  This makes it suitable for\n   interactive\
    \ applications, where large end-to-end delays cannot be\n   tolerated.  In a uni-directional\
    \ non-interactive environment it is\n   possible to delay sending the redundant\
    \ data, achieving improved\n   performance in the presence of burst losses [11],\
    \ at the expense of\n   additional latency.\n"
- title: 4.3 Interleaving
  contents:
  - "4.3 Interleaving\n   When the unit size is smaller than the packet size, and\
    \ end-to-end\n   delay is unimportant, interleaving [16] is a useful technique\
    \ for\n   reducing the effects of loss.  Units are resequenced before\n   transmission,\
    \ so that originally adjacent units are separated by a\n   guaranteed distance\
    \ in the transmitted stream, and returned to their\n   original order at the receiver.\
    \  Interleaving disperses the effect of\n   packet losses.  If, for example, units\
    \ are 5ms in length and packets\n   20ms (ie:  4 units per packet), then the first\
    \ packet could contain\n   units 1, 5, 9, 13; the second packet would contain\
    \ units 2, 6, 10,\n   14; and so on.  It can be seen that the loss of a single\
    \ packet from\n   an interleaved stream results in multiple small gaps in the\n\
    \   reconstructed stream, as opposed to the single large gap which would\n   occur\
    \ in a non-interleaved stream.  In many cases it is easier to\n   reconstruct\
    \ a stream with such loss patterns, although this is\n   clearly media and codec\
    \ dependent.  Note that the size of the gaps is\n   dependent on the degree of\
    \ interleaving used, and can be made\n   arbitrarily small at the expense of additional\
    \ latency.\n   The obvious disadvantage of interleaving is that it increases\n\
    \   latency.  This limits the use of this technique for interactive\n   applications,\
    \ although it performs well for non-interactive use.  The\n   major advantage\
    \ of interleaving is that it does not increase the\n   bandwidth requirements\
    \ of a stream.\n   A potential RTP payload format for interleaved data is a simple\n\
    \   extension of the redundant audio payload [15].  That payload requires\n  \
    \ that the redundant copy of a unit is sent after the primary.  If this\n   restriction\
    \ is removed, it is possible to transmit an arbitrary\n   interleaving of units\
    \ with this payload format.\n"
- title: 5  Recommendations
  contents:
  - "5  Recommendations\n   If the desired scenario is a non-interactive uni-directional\n\
    \   transmission, in the style of a radio or television broadcast,\n   latency\
    \ is of considerably less importance than reception quality.\n   In this case,\
    \ the use of interleaving, retransmission based repair or\n   FEC is appropriate.\
    \  If approximate repair is acceptable,\n   interleaving is clearly to be preferred,\
    \ since it does not increase\n   the bandwidth of a stream.  Media independent\
    \ FEC is typically the\n   next best option, since a single FEC packet has the\
    \ potential to\n   repair multiple lost packets, providing efficient transmission.\n\
    \   In an interactive session, the delay imposed by the use of\n   interleaving\
    \ and retransmission is not acceptable, and a low-latency\n   FEC scheme is the\
    \ only means of repair suitable.  The choice between\n   media independent and\
    \ media specific forward error correction is less\n   clear-cut:  media-specific\
    \ FEC can be made more efficient, but\n   requires modification to the output\
    \ of the codec.  When defining the\n   packet format for a new codec, this is\
    \ clearly an appropriate\n   technique, and should be encouraged.\n   If an existing\
    \ codec is to be used, a media independent forward error\n   correction scheme\
    \ is usually easier to implement, and can perform\n   well.  A media stream protected\
    \ in this way may be augmented with\n   retransmission based repair with minimal\
    \ overhead, providing improved\n   quality for those receivers willing to tolerate\
    \ additional delay, and\n   allowing interactivity for those receivers which desire\
    \ it.  Whilst\n   the addition of FEC data to an media stream is an effective\
    \ means by\n   which that stream may be protected against packet loss, application\n\
    \   designers should be aware that the addition of large amounts of\n   repair\
    \ data when loss is detected will increase network congestion,\n   and hence packet\
    \ loss, leading to a worsening of the problem which\n   the use of error correction\
    \ coding was intended to solve.\n   At the time of writing, there is no standard\
    \ solution to the problem\n   of congestion control for streamed media which can\
    \ be used to solve\n   this problem.  There have, however, been a number of contributions\n\
    \   which show the likely form the solution will take [12, 19].  This\n   work\
    \ typically used some form of layered encoding of data over\n   multiple channels,\
    \ with receivers joining and leaving layers in\n   response to packet-loss (which\
    \ indicates congestion).  The aim of\n   such schemes is to emulate the congestion\
    \ control behavior of a TCP\n   stream, and hence compete fairly with non-real\
    \ time traffic.  This is\n   necessary for stable network behavior in the presence\
    \ of much\n   streamed media.\n   Since streaming media applications are in use\
    \ now, without congestion\n   control, it is important to give some advice to\
    \ authors of those\n   tools as to the behavior which is acceptable, until congestion\n\
    \   control mechanisms can be deployed.  The remainder of this section\n   uses\
    \ the throughput of a TCP connection over a link with a given loss\n   rate as\
    \ an example to indicate behavior which may be classified as\n   reasonable.\n\
    \   As a number of authors have noted (eg:  [6]), the loss rate and\n   throughput\
    \ of a TCP connection are approximately related as follows:\n    T = (s * c) /\
    \ (RTT * sqrt(p))\n   where T is the observed throughput in octets per second,\
    \ s is the\n   packet size in octets, RTT is the round-trip time for the session\
    \ in\n   seconds, p is the packet loss rate and c is a constant in the range\n\
    \   0.9...1.5 (a value of 1.22 has been suggested [6]).  Using this\n   relation,\
    \ one may determine the packet loss rate which would result\n   in a given throughput\
    \ for a particular session, if a TCP connection\n   was used.\n   Whilst this\
    \ relation between packet loss rate and throughput is\n   specific to the TCP\
    \ congestion control algorithm, it also provides an\n   estimate of the acceptable\
    \ loss rate for a streaming media\n   application using the same network path,\
    \ which wishes to coexist\n   fairly with TCP traffic.  Clearly this is not sufficient\
    \ for fair\n   sharing of a link with TCP traffic, since it does not capture the\n\
    \   dynamic behavior of the connection, merely the average behavior, but\n   it\
    \ does provide one definition of \"reasonable\" behavior in the\n   absence of\
    \ real congestion control.\n   For example, an RTP audio session with DVI encoding\
    \ and 40ms data\n   packets will have 40 bytes RTP/UDP/IP header, 4 bytes codec\
    \ state and\n   160 bytes of media data, giving a packet size, s, of 204 bytes.\
    \  It\n   will send 25 packets per second, giving T = 4800.  It is possible to\n\
    \   estimate the round-trip time from RTCP reception report statistics\n   (say\
    \ 200 milliseconds for the purpose of example).  Substituting\n   these values\
    \ into the above equation, we estimate a \"reasonable\"\n   packet loss rate,\
    \ p, of 6.7%.  This would represent an upper bound on\n   the packet loss rate\
    \ which this application should be designed to\n   tolerate.\n   It should be\
    \ noted that a round trip time estimate based on RTCP\n   reception report statistics\
    \ is, at best, approximate; and that a\n   round trip time for a multicast group\
    \ can only be an `average'\n   measure.  This implies that the TCP equivalent\
    \ throughput/loss rate\n   determined by this relation will be an approximation\
    \ of the upper\n   bound to the rate a TCP connection would actually achieve.\n"
- title: 6  Security Considerations
  contents:
  - "6  Security Considerations\n   Some of the repair techniques discussed in this\
    \ document result in\n   the transmission of additional traffic to correct for\
    \ the effects of\n   packet loss.  Application designers should be aware that\
    \ the\n   transmission of large amounts of repair traffic will increase network\n\
    \   congestion, and hence packet loss, leading to a worsening of the\n   problem\
    \ which the use of error correction was intended to solve.  At\n   its worst,\
    \ this can lead to excessive network congestion and may\n   constitute a denial\
    \ of service attack.  Section 5 discusses this in\n   more detail, and provides\
    \ guidelines for prevention of this problem.\n"
- title: 7  Summary
  contents:
  - "7  Summary\n   Streaming media applications using the Internet will be subject\
    \ to\n   packet loss due to the unreliable nature of UDP packet delivery.\n  \
    \ This document has summarized the typical loss patterns seen on the\n   public\
    \ Mbone at the time of writing, and a range of techniques for\n   recovery from\
    \ such losses.  We have further discussed the need for\n   congestion control,\
    \ and provided some guidelines as to reasonable\n   behavior for streaming applications\
    \ in the interim until congestion\n   control can be deployed.\n"
- title: 8  Acknowledgments
  contents:
  - "8  Acknowledgments\n   The authors wish to thank Phil Karn and Lorenzo Vicisano\
    \ for their\n   helpful comments.\n"
- title: 9  Authors' Addresses
  contents:
  - "9  Authors' Addresses\n   Colin Perkins\n   Department of Computer Science\n\
    \   University College London\n   Gower Street\n   London WC1E 6BT\n   United\
    \ Kingdom\n   EMail: c.perkins@cs.ucl.ac.uk\n   Orion Hodson\n   Department of\
    \ Computer Science\n   University College London\n   Gower Street\n   London WC1E\
    \ 6BT\n   United Kingdom\n   EMail: o.hodson@cs.ucl.ac.uk\n"
- title: References
  contents:
  - "References\n   [1] R.E. Blahut. Theory and Practice ofError Control Codes.\n\
    \       Addison Wesley, 1983.\n   [2] J.-C. Bolot and A. Vega-Garcia. The case\
    \ for FEC based\n       error control for packet audio in the Internet. To appear\n\
    \       in ACM Multimedia Systems.\n   [3] C. Bormann, L. Cline, G. Deisher, T.\
    \ Gardos, C. Maciocco,\n       D. Newell, J. Ott, S. Wenger, and C.  Zhu. RTP\
    \ payload\n       format for the 1998 version of ITU-T reccomendation  H.263\n\
    \       video (H.263+).  Work in Progress.\n   [4] D. Budge, R. McKenzie, W. Mills,\
    \ W. Diss,  and P. Long.\n       Media-independent error correction using RTP,\
    \ Work in Progress.\n   [5] G. Carle and E. W. Biersack. Survey of error recovery\n\
    \       techniques for IP-based audio-visual multicast applications.\n       IEEE\
    \ Network, 11(6):24--36, November/December 1997.\n   [6] S. Floyd and K. Fall.\
    \ Promoting the use  of end-to-end\n       congestion control in the internet.\
    \ Submitted to IEEE/ACM\n       Transactions on Networking, February 1998.\n \
    \  [7] S. Floyd, V. Jacobson, S. McCanne, C.-G. Liu, and L. Zhang.\n       A reliable\
    \ multicast framework for light-weight sessions and\n       applications level\
    \ framing. IEEE/ACM Transactions on Networking,\n       1995.\n   [8] M. Handley.\
    \   An examination of Mbone performance.  USC/ISI\n       Research Report:  ISI/RR-97-450,\
    \ April 1997.\n   [9] M. Handley and J. Crowcroft.   Network text editor (NTE):\
    \ A\n       scalable shared text editor for the Mbone.   In Proceedings\n    \
    \   ACM SIGCOMM'97, Cannes, France, September 1997.\n  [10] V. Hardman, M. A.\
    \ Sasse, M. Handley, and  A. Watson.\n       Reliable audio for use over the Internet.\
    \    In Proceedings\n       of INET'95, 1995.\n  [11] I. Kouvelas, O. Hodson,\
    \ V. Hardman, and J.  Crowcroft.\n       Redundancy control in real-time Internet\
    \ audio conferencing.\n       In Proceedings of AVSPN'97, Aberdeen, Scotland,\
    \ September 1997.\n  [12] S. McCanne, V. Jacobson, and M. Vetterli.   Receiver-driven\n\
    \       layered multicast.  In Proceedings ACM SIGCOMM'96, Stanford,\n       CA.,\
    \ August 1996.\n  [13] J. Nonnenmacher, E. Biersack, and D. Towsley.   Parity-based\n\
    \       loss recovery for reliable multicast transmission. In\n       Proceedings\
    \ ACM SIGCOMM'97, Cannes, France, September 1997.\n  [14] P. Parnes.   RTP extension\
    \ for scalable reliable multicast,\n       Work in Progress.\n  [15] Perkins,\
    \ C., Kouvelas, I., Hodson, O., Hardman, V., Handley, M.,\n       Bolot, J-C.,\
    \ Vega-Garcia, A., and S. Fosse-Parisis, \"RTP Payload\n       for Redundant Audio\
    \ Data\", RFC 2198, September 1997.\n  [16] J.L. Ramsey. Realization of optimum\
    \ interleavers. IEEE Transactions\n       on Information Theory, IT-16:338--345,\
    \ May 1970.\n  [17] J. Rosenberg and H. Schulzrinne. An A/V profile extension\
    \ for\n       generic forward error correction in RTP.  Work in Progress.\n  [18]\
    \ Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n       \"RTP:\
    \ A transport protocol for real-time applications\",\n       RFC 1889, January\
    \ 1996.\n  [19] L. Vicisano, L. Rizzo, and Crowcroft J.  TCP-like congestion\n\
    \       control for layered multicast data transfer.  In Proceedings\n       IEEE\
    \ INFOCOM'98, 1998.\n  [20] R. X. Xu, A. C. Myers, H. Zhang,  and R. Yavatkar.\n\
    \       Resilient multicast support for continuous media applications.\n     \
    \  In Proceedingsof the 7th International Workshop on Network and\n       Operating\
    \ Systems Support for Digital Audio and Video\n       (NOSSDAV'97), Washington\
    \ University in St. Louis, Missouri,\n       May 1997.\n  [21] M. Yajnik, J. Kurose,\
    \ and D. Towsley. Packet loss correlation\n       in the Mbone multicast network.\
    \ In Proceedings IEEE Global\n       Internet Conference, November 1996.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
