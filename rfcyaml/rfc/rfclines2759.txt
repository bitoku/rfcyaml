Abstract The Point to Point Protocol (PPP) [1] provides a standard method for transporting multi protocol datagrams over point to point links.
PPP defines an extensible Link Control Protocol and a family of Network Control Protocols (NCPs) for establishing and configuring different network layer protocols.
This document describes version two of Microsoft's PPP CHAP dialect (MS CHAP V2).
MS CHAP V2 is similar to, but incompatible with, MS  CHAP version one (MS CHAP V1, described in [9]).
In particular, certain protocol fields have been deleted or reused but with different semantics.
In addition, MS CHAP V2 features mutual authentication.
The algorithms used in the generation of various MS CHAP V2 protocol fields are described in section 8.
Negotiation and hash generation examples are provided in section 9.
In this document, the key words "MAY", "MUST, "MUST NOT", "optional", "recommended", "SHOULD", and "SHOULD NOT" are to be interpreted as described in [3].
Where possible, MS CHAP V2 is consistent with both MS CHAP V1 and standard CHAP.
MS CHAP V2 provides mutual authentication between peers by piggybacking a peer challenge on the Response packet and an authenticator response on the Success packet.
The calculation of the "Windows NT compatible challenge response" sub field in the Response packet has been changed to include the peer challenge and the user name.
In MS CHAP V1, the "LAN Manager compatible challenge response" sub field was always sent in the Response packet.
This field has been replaced in MS CHAP V2 by the Peer Challenge field.
The format of the Message field in the Failure packet has been changed.
The Change Password (version 1) and Change Password (version 2)
packets are no longer supported.
They have been replaced with a single Change Password packet.
The LCP configuration for MS CHAP V2 is identical to that for standard CHAP, except that the Algorithm field has value 0x81, rather than the MD5 value 0x05.
PPP implementations which do not support MS CHAP V2, but correctly implement LCP Config Rej, should have no problem dealing with this non standard option.
The MS CHAP V2 Challenge packet is identical in format to the standard CHAP Challenge packet.
MS CHAP V2 authenticators send an 16 octet challenge Value field.
Peers need not duplicate Microsoft's algorithm for selecting the 16  octet value, but the standard guidelines on randomness [1,2,7]
Microsoft authenticators do not currently provide information in the Name field.
This may change in the future.
The MS CHAP V2 Response packet is identical in format to the standard CHAP Response packet.
However, the Value field is sub formatted differently as follows
Peer Challenge 8 octets: Reserved, must be zero 24 octets:
NT Response 1 octet :
Flags The Peer Challenge field is a 16 octet random number.
As the name implies, it is generated by the peer and is used in the calculation of the NT Response field, below.
Peers need not duplicate Microsoft's algorithm for selecting the 16 octet value, but the standard guidelines on randomness [1,2,7]
The NT Response field is an encoded function of the password, the user name, the contents of the Peer Challenge field and the received challenge as output by the routine GenerateNTResponse() (see section 8.1, below).
The Windows NT password is a string of 0 to (theoretically) 256 case sensitive Unicode [8] characters.
Current versions of Windows NT limit passwords to 14 characters, mainly for compatibility reasons; this may change in the future.
When computing the NT Response field contents, only the user name is used, without any associated Windows NT domain name.
This is true regardless of whether a Windows NT domain name is present in the Name field (see below).
The Flag field is reserved for future use and MUST be zero.
The Name field is a string of 0 to (theoretically) 256 case sensitive ASCII characters which identifies the peer's user account name.
The Windows NT domain name may prefix the user's account name (e.g. "BIGCO\johndoe" where "BIGCO" is a Windows NT domain containing the user account "johndoe").
If a domain is not provided, the backslash should also be omitted, (e.g. "johndoe").
The Success packet is identical in format to the standard CHAP Success packet.
However, the Message field contains a 42 octet authenticator response string and a printable message.
The format of the message field is illustrated below. "
S <auth string> M <message>"
The <auth string> quantity is a 20 octet number encoded in ASCII as 40 hexadecimal digits.
The hexadecimal digits A F (if present) MUST be uppercase.
This number is derived from the challenge from the Challenge packet, the Peer Challenge and NT Response fields from the Response packet, and the peer password as output by the routine GenerateAuthenticatorResponse
() (see section 8.7, below).
The authenticating peer MUST verify the authenticator response when a Success packet is received.
The method for verifying the authenticator is described in section 8.8, below.
If the authenticator response is either missing or incorrect, the peer MUST end the session.
The <message> quantity is human readable text in the appropriate charset and language [12].
The Failure packet is identical in format to the standard CHAP Failure packet.
There is, however, formatted text stored in the Message field which, contrary to the standard CHAP rules, does affect the operation of the protocol.
The Message field format is: "
E eeeeeeeeee R r C cccccccccccccccccccccccccccccccc V vvvvvvvvvv M <msg>" where The "eeeeeeeeee" is the ASCII representation of a decimal error code (need not be 10 digits) corresponding to one of those listed below, though implementations should deal with codes not on this list gracefully.
ERROR ACCT DISABLED 648 ERROR PASSWD
ERROR AUTHENTICATION FAILURE 709 ERROR CHANGING PASSWORD
The "r" is an ASCII flag set to '1' if a retry is allowed, and '0' if not.
When the authenticator sets this flag to '1' it disables short timeouts, expecting the peer to prompt the user for new credentials and resubmit the response.
The "cccccccccccccccccccccccccccccccc" is the ASCII representation of a hexadecimal challenge value.
This field MUST be exactly 32 octets long and MUST be present.
The "vvvvvvvvvv" is the ASCII representation of a decimal version code (need not be 10 digits) indicating the password changing protocol version supported on the server.
For MS CHAP V2, this value SHOULD always be 3.
<msg> is human readable text in the appropriate charset and language
The Change Password packet does not appear in either standard CHAP or MS CHAP V1.
It allows the peer to change the password on the account specified in the preceding Response packet.
The Change Password packet should be sent only if the authenticator reports ERROR PASSWD EXPIRED (E 648) in the Message field of the Failure packet.
This packet type is supported by recent versions of Windows NT 4.0, Windows 95 and Windows 98.
It is not supported by Windows NT 3.5, Windows NT 3.51, or early versions of Windows NT 4.0, Windows 95 and Windows 98.
The format of this packet is as follows:
Encrypted Hash 16 octets : Peer Challenge 8 octets : Reserved 24 octets :
NT Response 2 octet  : Flags Code 7 Identifier
The Identifier field is one octet and aids in matching requests and replies.
The value is the Identifier of the received Failure packet to which this packet responds plus 1.
This field contains the PWBLOCK form of the new Windows NT password encrypted with the old Windows NT password hash, as output by the NewPasswordEncryptedWithOldNtPasswordHash() routine (see section 8.9, below).
This field contains the old Windows NT password hash encrypted with the new Windows NT password hash, as output by the OldNtPasswordHashEncryptedWithNewNtPasswordHash() routine (see section 8.12, below).
A 16 octet random quantity, as described in the Response packet description.
Reserved 8 octets, must be zero.
The NT Response field (as described in the Response packet description), but calculated on the new password and the challenge received in the Failure packet.
This field is two octets in length.
It is a bit field of option flags where 0 is the least significant bit of the 16 bit quantity.
The routines mentioned in the text above are described in pseudocode in the following sections.
16 octet PasswordHash ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName, giving Challenge)
NtPasswordHash( Password, giving PasswordHash )
() functions are an   implementation of Secure Hash Algorithm (SHA 1) [11].
These are   available in public domain or can be licensed from   RSA Data Security,
Only the user name (as presented by the peer and   excluding any prepended domain name)   is used as input to SHAUpdate().
SHAFinal(Context, Digest) memcpy(Challenge, Digest, 8) } 8.3.
to irreversibly hash Password   into PasswordHash.
Only the password is hashed without   including any terminating 0.
Use the MD4 algorithm [5]
to irreversibly hash   PasswordHash into PasswordHashHash.
ChallengeResponse( IN  8 octet  Challenge, IN  16 octet PasswordHash, OUT 24 octet Response )
{ Set ZPasswordHash to PasswordHash zero padded to 21 octets DesEncrypt( Challenge, 1st 7 octets of ZPasswordHash, giving 1st 8 octets of Response )
DesEncrypt( Challenge, 2nd 7 octets of ZPasswordHash, giving 2nd 8 octets of Response )
DesEncrypt() DesEncrypt( IN  8 octet
Use the DES encryption algorithm [4] in ECB mode [10]   to encrypt Clear into Cypher such that Cypher can   only be decrypted back to Clear by providing Key.
Note that the DES algorithm takes as input a 64 bit   stream where the 8th, 16th, 24th, etc.
bits are   parity bits ignored by the encrypting algorithm.
Unless you write your own DES to accept 56 bit input   without parity, you will need to insert the parity bits   yourself.
{0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B, 0x65, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E
SHAFinal(Context, Digest) ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName, giving Challenge) SHAInit(Context)
Encode the value of 'Digest' as "S " followed by   40 ASCII hexadecimal digits and return it in   AuthenticatorResponse.
20 octet MyResponse set ResponseOK   FALSE GenerateAuthenticatorResponse( Password, NtResponse, PeerChallenge, AuthenticatorChallenge, UserName, giving MyResponse) if (MyResponse   ReceivedResponse) then set ResponseOK
TRUE return ResponseOK } 8.9.
{ NtPasswordHash( OldPassword, giving PasswordHash ) EncryptPwBlockWithPasswordHash
PwSize Move PwSize octets to (ClearPwBlock.
Password   PwOffset ) from Password ClearPwBlock.
such that the Cypher can only be decrypted back to Clear   by providing a Key of length KeyLength octets.
NtPasswordHash( NewPassword, giving NewPasswordHash )
( 2nd 8 octets PasswordHash, 2nd 7 octets Block, giving 2nd 8 octets Cypher )
The following sections include protocol negotiation and hash generation examples.
Here are some examples of typical negotiations.
The peer is on the left and the authenticator is on the right.
The packet sequence ID is incremented on each authentication retry response and on the change password response.
All cases where the packet sequence ID is updated are noted below.
Response retry is never allowed after Change Password.
Change Password may occur after response retry.
(Authenticator Response verification fails, peer disconnects)
(Authenticator Response verification succeeds, call continues)
(Authenticator Response verification succeeds, call continues)
Successful authentication with retry and password change
Hash Example Intermediate values for user name "User" and password "clientPass".
All numeric values are hexadecimal. 0
55 73 65 72 0 to 256 unicode char
5B 5D 7C 7D 7B 3F 2F 3E 3C 2C 60 21 32 26 26
21 40 23 24 25 5E 26
5F 2B 3A 33 7C 7E
D0 2E 43 86 BC E9 12
26 16 octet PasswordHash: 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE
NT Response: 82 30 9E CD 8D
70 8B 5E A0 8F
AA 39 81 CD 83
4A 3D 85 D6 DF 16
octet PasswordHashHash: 41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F
Example of DES Key Generation DES uses 56 bit keys, expanded to 64 bits by the insertion of parity bits.
After the parity of the key has been fixed, every eighth bit is a parity bit and the number of bits that are set (1) in each octet is odd; i.e., odd parity.
Note that many DES engines do not check parity, however, simply stripping the parity bits.
The following example illustrates the values resulting from the use of the password "MyPw" to generate a pair of DES keys (e.g., for use in the NtPasswordHashEncryptedWithBlock() described in section 8.13). 0
to 256 unicode char Password: 4D 79 50
77 16 octet PasswordHash: FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F 4E AC First
"raw" DES key (initial 7 octets of password hash):
FC 15 6A F7 ED CD 6C First parity corrected DES key (eight octets): FD 0B 5B 5E 7F 6E 34 D9 Second "raw" DES key (second 7 octets of password hash)
0E DD E3 33 7D 42 7F Second parity corrected DES key (eight octets):
0E 6E 79 67 37 EA 08 FE 10.
As an implementation detail, the authenticator SHOULD limit the number of password retries allowed to make brute force password guessing attacks more difficult.
