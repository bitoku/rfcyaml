- title: __initial_text__
  contents:
  - '        CLIENT REQUIREMENTS FOR REAL-TIME COMMUNICATION SERVICES

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo describes client requirements for real-time\
    \ communication\n   services.  This memo provides information for the Internet\
    \ community,\n   and requests discussion and suggestions for improvements.  It\
    \ does\n   not specify any standard.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   A real-time communication service provides its clients with the\n\
    \   ability to specify their performance requirements and to obtain\n   guarantees\
    \ about the satisfaction of those requirements.  In this\n   paper, we propose\
    \ a set of performance specifications that seem\n   appropriate for such services;\
    \ they include various types of delay\n   bounds, throughput bounds, and reliability\
    \ bounds.  We also describe\n   other requirements and desirable properties from\
    \ a client's\n   viewpoint, and the ways in which each requirement is to be translated\n\
    \   to make it suitable for lower levels in the protocol hierarchy.\n   Finally,\
    \ we present some examples of requirements specification, and\n   discuss some\
    \ of the possible objections to our approach.\n   This research has been supported\
    \ in part by AT&T Bell Laboratories,\n   the University of California under a\
    \ MICRO grant, and the\n   International Computer Science Institute.  The views\
    \ and conclusions\n   in this document are those of the author and should not\
    \ be\n   interpreted as representing official policies, either expressed or\n\
    \   implied, of any of the sponsoring organizations.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   We call real-time a computer communication service whose\
    \ clients are\n   allowed to specify their performance requirements and to obtain\n\
    \   guarantees about the fulfillment of those requirements.\n   Three terms in\
    \ this definition need further discussion and\n   clarification: clients, performance,\
    \ and guarantees.\n   Network architecture usually consists, at least from a logical\n\
    \   viewpoint, of a stack of protocol layers. In the context of such an\n   architecture,\
    \ the notions of client and server apply to a number of\n   different pairs of\
    \ entities: every layer (with the support of the\n   underlying layers) provides\
    \ a service to the layer immediately above\n   it and is a client of its underlying\
    \ layers.  In this paper, our\n   considerations generally apply to any client-server\
    \ pair.  However,\n   most of them particularly refer to human clients (users,\
    \ programmers)\n   and to the ways in which such clients express their communication\
    \ and\n   processing needs to the system (e.g., interactive commands,\n   application\
    \ programs).  This type of client is especially important,\n   since client needs\
    \ at lower layers can be regarded as translations of\n   the needs expressed by\
    \ human clients at the top of the hierarchy.\n   When the client is human, the\
    \ server consists of the entire\n   (distributed) system, including the hosts,\
    \ their operating systems,\n   and the networks interconnecting them.\n   As for\
    \ the generic term, performance, we will give it a fairly broad\n   meaning. \
    \ It will include not only delay and throughput, the two main\n   network performance\
    \ indices, but also reliability of message\n   delivery.  Real-time communication\
    \ is concerned with those aspects of\n   quality of service that have to do with\
    \ performance in this broad\n   sense.\n   The term guarantee in this paper has\
    \ a rather strong legal flavor.\n   When a server guarantees a given level of\
    \ performance for the\n   communications of a client, it commits itself to providing\
    \ that\n   performance and to paying appropriate penalties if the actual\n   performance\
    \ turns out to be insufficient.  On the other hand, the\n   client will have to\
    \ obey certain rules, and will not be entitled to\n   the requested performance\
    \ guarantees unless those rules are\n   scrupulously obeyed.  In other words,\
    \ client and server have to enter\n   into a contract specifying their respective\
    \ rights and duties, the\n   benefits that will accrue, the conditions under which\
    \ those benefits\n   will materialize, and the penalties they will incur for not\
    \ keeping\n   their mutual promises.  We believe that a legal viewpoint is to\
    \ be\n   adopted if serious progress in the delivery of communication services\n\
    \   (not only the real-time ones) is desired.  Utility services, as well\n   as\
    \ other kinds of service, are provided under legally binding\n   contracts, and\
    \ a mature computer communication utility cannot fail to\n   do the same.  In\
    \ the field of real-time communication, such a\n   contract will by definition\
    \ include performance guarantees.\n   Real-time services may be offered in any\
    \ kind of network or\n   internetwork. Some of their predictable applications\
    \ are:\n      (a)  digital continuous-media (motion video, audio)\n          \
    \ communication: lower bounds on throughput and upper bounds\n           on delay\
    \ or delay variability or both are needed to ensure\n           any desired level\
    \ of output quality; in the interactive case,\n           both the values of delay\
    \ and delay variabilities have to be\n           bounded; some limited message\
    \ losses are often tolerable in\n           the cases of video and voice (whenever\
    \ very high quality is\n           not required), but usually not in the case\
    \ of sound;\n      (b)  transmission of urgent messages in real-time distributed\n\
    \           systems: delay bounds are the important guarantees to be\n       \
    \    provided in these applications; losses should ideally be\n           impossible;\n\
    \      (c)  urgent electronic-mail messages and, more in general,\n          \
    \ urgent datagrams: again, delay is the obvious index to be\n           bounded\
    \ in this case, but small probabilities of losses can\n           often be tolerated;\n\
    \      (d)  transfers of large files: minimum throughput bounds are\n        \
    \   usually more important than delay bounds in this\n           application;\
    \ also, all pieces of a file must be delivered\n           with probability 1;\n\
    \      (e)  fast request-reply communication: e.g., data base queries,\n     \
    \      information retrieval requests, remote procedure calls; this\n        \
    \   is another case in which delay (more precisely, round-trip\n           delay)\
    \ is the index of primary interest; reliability\n           requirements are generally\
    \ not very stringent.\n   We conjecture that, when networks start offering well-designed\
    \ and\n   reasonably-priced real-time services, the use of such services will\n\
    \   grow beyond the expectations of most observers.  This will occur\n   primarily\
    \ because new performance needs will be induced by the\n   availability of guaranteed-performance\
    \ options.  As the history of\n   transportation and communication has repeatedly\
    \ shown, faster\n   services bring about major increases of the shipments that\
    \ are\n   perceived as urgent.  The phenomenon will be more conspicuous\n   whenever\
    \ the quality of service provided to non-real-time clients\n   will deteriorate.\
    \  It is clear from this comment that we assume that\n   real-time services will\
    \ coexist within the same networks and\n   internetworks with non-real-time communications.\
    \  Indeed, postulating\n   a world in which the two types of service are segregated\
    \ rather than\n   integrated would be unrealistic, as it would go against the\
    \ clear\n   trend towards the eventual integration of all information services.\n\
    \   For the same reason, the traffic in the network is assumed to be\n   heterogeneous,\
    \ i.e., to consist of a variety of types of messages,\n   representing a variety\
    \ of information media and their combinations,\n   with a wide spectrum of burstiness\
    \ values (from uncompressed\n   continuous fixed-rate streams to very short and\
    \ erratic bursts of\n   information).\n   This paper discusses the client requirements\
    \ and characteristics of a\n   real-time communication service.  Server requirements\
    \ and design\n   principles will be the subject of a subsequent paper.  Section\
    \ 2\n   contains some considerations about the ways in which the clients\n   specify\
    \ their requirements, and those in which a server should reply\n   to requests\
    \ for real-time services.  Performance requirements are\n   presented in Section\
    \ 3; other properties that clients may need or\n   desire are described in Section\
    \ 4.  Section 5 deals with the problem\n   of translating the requirements of\
    \ a human client or an application\n   for the equivalent lower-level ones.  In\
    \ Section 6, we briefly\n   present four examples of client requirement specifications,\
    \ and in\n   Section 7 we discuss some of the objections that can be raised\n\
    \   against our approach.\n"
- title: 2.  Client Requests and Server Replies
  contents:
  - "2.  Client Requests and Server Replies\n   No real-time service can be provided\
    \ if the client does not specify,\n   together with the requirements, the characteristics\
    \ of the expected\n   input traffic.  Describing input traffic and all the various\n\
    \   requirements entails much work on the part of a client.  Gathering\n   the\
    \ necessary information and inputting it may be very time-\n   consuming.  A well-designed\
    \ real-time communication service will\n   minimize the effort to be spent by\
    \ a client.\n   Sensible default values, the possibility of partial or incremental\n\
    \   specifications (e.g., by editing preexisting specifications), and a\n   number\
    \ of standard descriptions should be provided.  These\n   descriptions will include\
    \ characterizations of inputs (e.g., those of\n   a video stream for multimedia\
    \ conferencing, an HDTV stream, a hi-fi\n   audio stream, a file transfer stream,\
    \ and so on) and standard sets of\n   requirements.  With these aids, it might\
    \ be possible for a human\n   client to specify his or her request by a short\
    \ phrase, perhaps\n   followed by a few characters representing options or changes\
    \ to the\n   standard or default values.\n   Since requests for real-time services\
    \ may be denied because of a\n   mismatch between the client's demands and the\
    \ resources available to\n   the server, the client will appreciate being informed\
    \ about the\n   reasons for any rejection, so that the request can be modified\
    \ and\n   resubmitted, or postponed, or cancelled altogether [Herr89].  The\n\
    \   information provided by the server to a human client should be\n   meaningful,\
    \ useful, and non-redundant.  The reason for rejection\n   should be understandable\
    \ by the client (who should be assumed not to\n   know any of the details of the\
    \ operating system, of the protocols or\n   of the network) and should be accompanied\
    \ by data that will be useful\n   to the client in deciding what to do as well\
    \ as how the request ought\n   to be modified to make it successful.  If, for\
    \ example, a bound\n   specified by the client cannot be guaranteed by the server\
    \ under its\n   current load, the information returned to the client should include\n\
    \   the minimum or maximum value of the bound that the server could\n   guarantee;\
    \ the client will thus be able to decide whether that bound\n   would be acceptable\
    \ (possibly with some other modifications as well)\n   or not, and act accordingly.\n\
    \   When the client is not a human being but an application or a process,\n  \
    \ the type of a server's replies should be very different from that\n   just described\
    \ [Herr89]; another standard interface, the one between\n   an application and\
    \ a real-time service, must therefore be defined,\n   possibly in multiple, application-specific\
    \ versions.\n   Clients will also be interested in the pricing policies implemented\n\
    \   by the server: these should be fair (or at least perceived to be\n   fair)\
    \ and easy to understand. The client should be able easily to\n   estimate charges\
    \ for given performance guarantees as a function of\n   distance, time of day,\
    \ and other variables, or to obtain these\n   estimates from the server as a free\
    \ off-line service.\n"
- title: 3.  Performance Requirements
  contents:
  - "3.  Performance Requirements\n   A client can specify a service requirement using\
    \ the general form\n                               pred = TRUE,\n   where some\
    \ of the variables in predicate pred can be controlled or\n   influenced by the\
    \ server.\n   A simple and popular form of performance requirement is that\n \
    \  involving a bound.  A deterministic bound can be specified as\n           \
    \       (var <= bound) = TRUE, or var <= bound,\n   where variable var is server-controlled,\
    \ while bound is client-\n   specified.  The bounds in these expressions are upper\
    \ bounds; if  <\n   is replaced by  > , they become lower bounds.\n   When the\
    \ variable in the latter expression above is a probability, we\n   have a statistical\
    \ bound, and bound in that case is a probability\n   bound; if the predicate is\
    \ a deterministic bound, we have:\n                 Prob (var <= bound) >= probability-bound.\n\
    \   In this requirement, the variable has an upper bound, and the\n   probability\
    \ a lower bound.  Note that deterministic bounds can be\n   viewed as statistical\
    \ bounds that are satisfied with probability 1.\n   A form of bound very similar\
    \ to the statistical one is the fractional\n   bound:\n                      \
    \    Ca (var <= bound) >= b,\n   where variable var has a value for each message\
    \ in a stream, and Ca\n   is a function that counts the number of times var satisfies\
    \ the bound\n   for any a consecutive messages in the stream; this number Ca must\n\
    \   satisfy bound b.  Obviously, a fractional bound is realizable only if\n  \
    \ b <= a .  Fractional bounds will not be explicitly mentioned in the\n   sequel,\
    \ but they can be used in lieu of statistical bounds, and have\n   over these\
    \ bounds the avantages of easy verifiability and higher\n   practical interest.\n\
    \   In this section, we restrict our attention to those requirements that\n  \
    \ are likely to be the most useful to real-time clients.\n"
- title: 3.1  Delay requirements
  contents:
  - "3.1  Delay requirements\n   Depending on the application, clients may wish to\
    \ specify their delay\n   requirements in different ways [Gait90].  The delays\
    \ involved will\n   usually be those of the application-oriented messages known\
    \ to the\n   client; for instance, the delay between the beginning of the client-\n\
    \   level transmission of a video frame, file, or urgent datagram and the\n  \
    \ end of the client-level reception of the same frame, file, or urgent\n   datagram.\
    \  (In those cases, e.g., in some distributed real-time\n   systems, where message\
    \ deadlines are assigned instead of message\n   delays, we can always compute\
    \ the latter from knowledge of the former\n   and of the sending times, thereby\
    \ reducing ourselves again to a delay\n   bound requirement.)  Also, they will\
    \ be the delays of those messages\n   that are successfully delivered to the destination;\
    \ the fraction of\n   messages that are not, to which the delay bounds will not\
    \ apply, will\n   be bounded by reliability specifications.  Note that clients\
    \ will\n   express delay bounds by making implicit reference to their own\n  \
    \ clocks; the design of a real-time service for a large network will\n   have\
    \ to consider the impact on bounds enforcement of non-synchronized\n   clocks\
    \ [Verm90].  Some of the forms in which a delay requirement may\n   be specified\
    \ are\n   (i)  deterministic delay bound:\n                          Di <= Dmax\
    \  for all i,\n   the client is delivered to the destination client-level entity,\
    \ and\n   Dmax is the delay upper bound specified by the client.  In our\n   descriptions\
    \ we assume, without loss of generality, that the client\n   requesting a real-time\
    \ service is the sending client, and that the\n   destination (which could be\
    \ a remote agent of the client or another\n   user) is a third party with respect\
    \ to the establishment of the\n   particular communication being considered (In\
    \ our descriptions we\n   assume, without loss of generality, that the client\
    \ requesting a\n   real-time service is the sending client, and that the destination\n\
    \   (which could be a remote agent of the client or another user) is a\n   third\
    \ party with respect to the establishment of the particular\n   communication\
    \ being considered.);\n   (ii)  statistical delay bound:\n                   \
    \    Prob ( Di <= Dmax ) >= Zmin,\n      where Di and Dmax are defined as above,\
    \ and Zmin is the lower\n      bound of the probability of successful and timely\
    \ delivery;\n   (iii)  deterministic delay-jitter bound:\n                   Ji\
    \ = | Di - D | <= Jmax   for  all i,\n      where D is the ideal, or target delay,\
    \ Ji is the delay jitter of\n      the i-th message delivered to the destination,\
    \ and Jmax is the\n      upper jitter bound to be specified by the client together\
    \ with D;\n      note that an equivalent form of this requirement consists of\n\
    \      assigning a deterministic upper bound D + Jmax and a deterministic\n  \
    \    lower bound D - Jmax to the delays Di [Herr90];\n   (iv)  statistical delay-jitter\
    \ bound:\n                   Prob (Ji <= Jmax) >= Umin, for all i,\n      where\
    \  Umin  is the lower bound of the probability that Ji  be\n      within its limits.\n\
    \   Other forms of delay bound include bounds on average delay, delay\n   variance,\
    \ and functions of the sequence number of each message, for\n   example, Dmax(i)\
    \ for the deterministic case.  There may be\n   applications in which one of these\
    \ will be the preferred form, but,\n   since we have not found any so far, we\
    \ believe that the four types of\n   bounds listed as (i)-(iv) above will cover\
    \ the great majority of the\n   practical cases.\n"
- title: 3.2  Throughput requirements
  contents:
  - "3.2  Throughput requirements\n   The actual throughput of an information transfer\
    \ from a source to a\n   destination is bounded above by the rate at which the\
    \ source sends\n   messages into the system.  Throughput may be lower than this\
    \ rate\n   because of the possibility of unsuccessful delivery or message loss.\n\
    \   It is also bounded above by the maximum throughput, which is a\n   function\
    \ of, among other things, network load.  As the source\n   increases its input\
    \ rate, the actual throughput will grow up to a\n   limit and then stop.  Clients\
    \ concerned with the throughput of their\n   transfers will want to make sure\
    \ that saturation is never reached, or\n   is reached only with a suitably small\
    \ probability and for acceptably\n   short intervals.  Also, if the bandwidth\
    \ allocated to a transfer is\n   not constant, but varies dynamically on demand\
    \ to accommodate, at\n   least to some extent, peak requests, clients will be\
    \ interested in\n   adding an average throughput requirement, which should include\n\
    \   information about the length of the interval over which the average\n   must\
    \ be computed [Ferr89a].\n   Thus, reasonable forms for throughput requirements\
    \ appear to be the\n   following:\n   (i)  deterministic throughput bound:\n \
    \                         Ti >= Tmin, for all i,\n      where Ti is the throughput\
    \ actually provided by the server, and\n      Tmin is the lower bound of throughput\
    \ specified by the client,\n      that is, the minimum throughput the server must\
    \ offer to the\n      client;\n   (ii)  statistical throughput bound:\n      \
    \                  Prob (Ti >= Tmin) >= Vmin,\n      where Ti and Tmin are defined\
    \ as above, and Vmin is the lower\n      bound of the probability that the server\
    \ will provide a throughput\n      greater than the lower bound;\n   (iii) average\
    \ throughput bound:\n                                T >= Tave,\n      where T\
    \ is the average throughput provided by the server, Tave is\n      its lower bound\
    \ specified by the client, and both variables are\n      averaged over an interval\
    \ of duration I specified by the client;\n      the above inequality must obviously\
    \ hold for all intervals of\n      duration I, i.e., even for that over which\
    \ T is minimum.\n   One clear difference between delay bounds and throughput bounds\
    \ is\n   that, while the server is responsible for delays, the actual\n   throughputs\
    \ of a non-saturated system are dictated by the input\n   rates, which are determined\
    \ primarily by the clients (though they may\n   be influenced by the server through\
    \ flow-control mechanisms).\n"
- title: 3.3  Reliability requirements
  contents:
  - "3.3  Reliability requirements\n   The usefulness of error control via acknowledgments\
    \ and\n   retransmission in real-time applications is doubtful, especially in\n\
    \   those environments where message losses are usually higher, i.e., in\n   wide-area\
    \ networks: the additional delays caused by acknowledgment\n   and retransmission,\
    \ and out-of-sequence delivery are likely to be\n   intolerable in applications\
    \ with stringent delay bounds, such as\n   those having to do with continuous\
    \ media.  Fortunately, the loss of\n   some of the messages (e.g., video frames,\
    \ voice packets) is often\n   tolerable in these applications, but that of sound\
    \ packets is\n   generally intolerable.  In other cases, however, completeness\
    \ of\n   information delivery is essential (e.g., in file transfer\n   applications),\
    \ and traditional retransmission schemes will probably\n   have to be employed.\n\
    \   A message may be incorrect when delivered or may be lost in the\n   network,\
    \ i.e., not delivered at all.  Network unreliability (due, for\n   example, to\
    \ noise) is usually the cause of the former problem; buffer\n   overflow (due\
    \ to congestion) or node or link failure are those of the\n   latter.  The client\
    \ is not interested in this distinction: for the\n   client, the message is lost\
    \ in both cases.  Thus, the simplest form\n   in which a reliability bound may\
    \ be expressed and also, we believe,\n   the one that will be most popular, is\n\
    \              Prob (message is correctly delivered) >= Wmin,\n   where Wmin is\
    \ the lower bound of the probability of correct delivery,\n   to be specified\
    \ by the client.  The probability of message loss will\n   obviously be bounded\
    \ above by 1 - Wmin.  This is a statistical bound,\n   but, as noted in Section\
    \ 3, a deterministic reliability bound results\n   if we set Wmin = 1.\n   In\
    \ those applications in which any message delivered with a delay\n   greater than\
    \ Dmax must be discarded, the fraction of messages usable\n   by the destination\
    \ will be bounded below by Wmin Zmin.  The client\n   may actually specify the\
    \ value of this product, and let the server\n   decide the individual values of\
    \ the two bounds, possibly subject to a\n   client-assigned constraint, e.g.,\
    \ that the price of the service to\n   the client be minimum.\n   If the value\
    \ of Wmin is greater than the system's reliability (the\n   probability that a\
    \ delivered message is correct), then there is no\n   buffer space allocation\
    \ in the hosts, interfaces, switches and\n   routers or gateways that will allow\
    \ the client-specified Wmin to be\n   guaranteed.  In this case, the server uses\
    \ error correcting codes, or\n   (if the application permits) retransmission,\
    \ or duplicate messages,\n   or (if the sequencing problem discussed in Section\
    \ 4.1 can be solved\n   satisfactorily or is not a problem) multiple physical\
    \ channels for\n   the same logical channel, or has to refuse the request.\n"
- title: 4.  Other Required or Desirable Properties
  contents:
  - "4.  Other Required or Desirable Properties\n   In this section, we briefly describe\
    \ client requirements that cannot\n   be easily expressed as bounds on, but are\
    \ related to, communication\n   performance.  These include sequencing, absence\
    \ of duplications,\n   failure recovery, and service setup time. We are not concerned\
    \ here\n   with features that may be very important but have a functionality\n\
    \   (e.g., multicast capabilities) or security (e.g., client\n   authentication)\
    \ rather than a performance flavor. Requirements in\n   these areas will generally\
    \ have appreciable effects also on\n   performance; we do not discuss them only\
    \ because of space\n   limitations.\n   For a given application, some of these\
    \ properties may be required,\n   some others only desirable.  Also, some may\
    \ be best represented as\n   Boolean variables (present or absent), some others\
    \ as continuous or\n   multi-valued discrete variables, others yet as partially\
    \ qualitative\n   specifications.\n"
- title: 4.1  Sequencing
  contents:
  - "4.1  Sequencing\n   For applications involving message streams (rather than single\n\
    \   datagrams), it may be necessary or desirable that messages be\n   delivered\
    \ in sequence, even though the sequence may not be complete.\n   If the lower-level\
    \ servers are not all capable of delivering messages\n   sequentially, a resequencing\
    \ operation may have to be performed at\n   some higher level in the hierarchy.\
    \  In those cases in which\n   reliability requirements make retransmission necessary,\
    \ resequencing\n   may delay delivery of a large number of messages by relatively\
    \ long\n   times.  An adequate amount of buffer space will have to be provided\n\
    \   for this purpose at the level of the resequencer in the protocol\n   hierarchy.\n\
    \   If sequencing is not guaranteed by all servers at all levels, the\n   application\
    \ may be able to tolerate out-of-sequence messages as long\n   as their number\
    \ is small, or if the delay bound is so large that very\n   few out-of-sequence\
    \ messages have to be discarded because they are\n   too late.  The client could\
    \ be allowed to specify a bound on the\n   probability that a message be delivered\
    \ out of sequence, or to bundle\n   out-of-sequence losses with the other types\
    \ of message loss described\n   by Wmin.  The client would specify the value of\
    \ Wmin (or Wmin Zmin),\n   and the server would have to decide how much probability\
    \ to allow for\n   buffer overflow, how much for network error, and how much for\n\
    \   imperfect sequencing, taking into account the stringency of the delay\n  \
    \ bounds.\n   On the other hand, with fixed-route connections and appropriate\n\
    \   queueing and scheduling in the hosts and in the network, it is often\n   not\
    \ too hard to ensure sequenced delivery at the various layers,\n   hence also\
    \ at the top.\n"
- title: 4.2  Absence of duplications
  contents:
  - "4.2  Absence of duplications\n   Most of the discussion of sequencing applies\
    \ also to duplication of\n   messages.  It is, however, easier and faster to eliminate\n\
    \   duplications than to resequence, as long as some layer keeps track of\n  \
    \ the sequence numbers of the messages already received.  The\n   specification\
    \ of a bound may be needed only if duplications become\n   very frequent, but\
    \ this would be a symptom of serious network\n   malfunction, and should not be\
    \ dealt with in the same way as we\n   handle delays or message losses.  These\
    \ observations do not apply, of\n   course, to the case of intentional duplication\
    \ for higher\n   reliability.\n"
- title: 4.3  Failure recovery
  contents:
  - "4.3  Failure recovery\n   The contract between client and server of a real-time\
    \ service will\n   have to specify what will happen in the event of a server failure.\n\
    \   Ideally, from the client's viewpoint, failures should be perfectly\n   masked,\
    \ and service should be completely fault-tolerant.  As we have\n   already mentioned,\
    \ however, it is usually unrealistic to expect that\n   performance guarantees\
    \ can be honored even in presence of failures.\n   A little less unrealistic is\
    \ to assume that service can resume a\n   short time after a failure has disrupted\
    \ it.  In general, clients may\n   not only wish to know what will happen if a\
    \ failure occurs, but also\n   have a guaranteed upper bound on the likelihood\
    \ of such an\n   occurrence:\n                          Prob (failure) <= Fmax.\n\
    \   Different applications have different failure recovery requirements.\n   Urgent\
    \ datagrams or urgent message streams in most real-time\n   distributed systems\
    \ will probably not benefit much from recovery,\n   unless it can be made so fast\
    \ that hard deadlines may still be\n   satisfied, at least in some cases.  In\
    \ the case of video or audio\n   transmission, timely resumption of service will\
    \ normally be very\n   useful or even necessary; thus, clients may need to be\
    \ given\n   guarantees about the upper bounds of mean or maximum time to repair;\n\
    \   this may also be the case of other applications in which the\n   deadlines\
    \ are not so stringent, or where the main emphasis is on\n   throughput and/or\
    \ reliability rather than on delay.\n   In communications over multi-node routes\
    \ and/or long distances, the\n   network itself may contain several messages for\
    \ each source-\n   destination pair at the time a failure occurs.  The recovery\
    \ scheme\n   will have to solve the problems of failure notification (to all the\n\
    \   system's components involved, and possibly also to the clients) and\n   disposition\
    \ of messages in transit.  The solutions adopted may make\n   duplicate elimination\
    \ necessary even in contexts in which no\n   duplicates are ever created in the\
    \ absence of failures.\n"
- title: 4.4  Service setup time
  contents:
  - "4.4  Service setup time\n   Real-time services must be requested before they\
    \ can be used to\n   communicate [Ferr89b].  Some clients may be interested in\
    \ long-term\n   arrangements which are set up soon after the signing of a contract\n\
    \   and are kept in existence for long times (days, months, years).\n   Others,\
    \ typically for economical reasons, may wish to be allowed to\n   request services\
    \ dynamically and to avoid paying for them even when\n   not in use.  The extreme\
    \ case of short-term service is that in which\n   the client wants to send one\
    \ urgent datagram, but this is probably\n   best handled by a service broker (\"\
    the datagraph office\") using a\n   permanent setup shared by many (or all) urgent\
    \ datagrams.  In most\n   other cases, a request for a short-term or medium-term\
    \ service must\n   be processed by the server before the client is allowed to\
    \ receive\n   that service (i.e., to send messages).  Certain applications will\n\
    \   need the setup time to be short or, in any case, bounded: the maximum\n  \
    \ time the client will have to wait for a (positive or negative) reply\n   to\
    \ a request may have to be guaranteed by the server in the contract.\n"
- title: 5.  Translating Requirements
  contents:
  - "5.  Translating Requirements\n   Performance specifications and other requirements\
    \ are assigned at the\n   top level, that of the human client or application,\
    \ either explicitly\n   or implicitly (see Section 2).  To be satisfied, these\
    \ specifications\n   need the support of all the underlying layers: we believe\
    \ that a\n   real-time service cannot be implemented on top of a server at some\n\
    \   level that is unable to guarantee performance.  (Some of the other\n   requirements\
    \ can be satisfied even without this condition: for\n   example, reliable delivery\
    \ (when retransmission is acceptable) and\n   sequencing.)  Upper-level requirements\
    \ must be translated into\n   lower-level ones, so that the implementation of\
    \ the former will be\n   adequately supported.  How should this be done?\n"
- title: 5.1  Delay requirements
  contents:
  - "5.1  Delay requirements\n   The method for translating delay bounds macroscopically\
    \ depends on\n   the type of bound to be translated.  All methods have to deal\
    \ with\n   two problems: the effects of delays in the individual layers, and the\n\
    \   effects of message fragmentation on the requirements.\n   (i)  Deterministic\
    \ delay bound.  A deterministic bound on the delay\n        encountered by a message\
    \ in each layer (or group of layers) in\n        the hosts will have to be estimated\
    \ and enforced.\n        The delay bound for a server at a given level will be\
    \ obtained\n        by subtracting the delay bounds of the layers above it in\
    \ both\n        the sending and the receiving host from the original global\n\
    \        bound:\n                      Dmax' = Dmax - SUMi {d(max,i)}.\n     \
    \ Message fragmentation can be handled by recalling that delay is\n      defined\
    \ as the difference between the instant of completion of the\n      reception\
    \ of a message and the instant when its shipment began.\n      If x is the interfragment\
    \ time (assumed constant for simplicity\n      here) and f is the number of fragments\
    \ in a message, we have\n                            Dmax' = Dmax - x(f-1),\n\
    \      where Dmax' is the fragment delay bound corresponding to the\n      message\
    \ delay bound Dmax, i.e., the delay of the first fragment.\n   (ii)  Statistical\
    \ delay bound.  The statistical case is more\n         complicated.  If the bounds\
    \ on the delay in each layer\n         (or group of layers) are statistical, we\
    \ may approach the\n         problem of the messages delayed beyond the bound\n\
    \         pessimistically, in which case we shall write\n                    Zmin'\
    \ = Zmin / (PRODi {z(min,i)}),\n      where the index i spans the layers (or group\
    \ of layers) above the\n      given lower-level server, Zmin' is the probability\
    \ bound to be\n      enforced by that lower-level server, and d(max,i) and z(min,i)\
    \ are\n      the bounds for layer i.  (A layer has a sender side and a receiver\n\
    \      side at the same level in the hierarchy.)  The expression for\n      Zmin'\
    \ is pessimistic because it assumes that a message delayed\n      beyond its bound\
    \ in a layer will not be able to meet the global\n      bound Dmax.  (The expression\
    \ above and the next one assume that\n      the delays of a message in the layers\
    \ are statistically\n      independent of each other.  This assumption is usually\
    \ not valid,\n      but, in the light of the observations that follow the next\n\
    \      expression, the error should be tolerable.)\n      At the other extreme,\
    \ we have the optimistic approach, which\n      assumes that a message will not\
    \ satisfy the global bound only if\n      it is delayed beyond its local bound\
    \ in each layer:\n                Zmin' = 1 - (1 - Zmin)/(PRODi {1 - z(min,i)}).\n\
    \      The correct assumption will be somewhere in between the\n      pessimistic\
    \ and the optimistic ones.  However, in order to be able\n      to guarantee the\
    \ global bound, the system will have to choose the\n      pessimistic approach,\
    \ unless a better approximation to reality can\n      be found.  An alternative\
    \ that may turn out to be more convenient\n      is the one of considering the\
    \ bounds in the layers as\n      deterministic, in which case Zmin' will equal\
    \ Zmin, and the global\n      bound will be statistical only because the network\
    \ will guarantee\n      a statistical bound.\n      When estimating the effects\
    \ of message fragmentation, the new\n      bounds must refer to the fragment stream\
    \ as though its components\n      were independent of each other.  Assuming sequential\
    \ delivery of\n      fragments, a message is delayed beyond its bound if its last\n\
    \      fragment is delayed beyond the fragment bound.  Our goal can be\n     \
    \ achieved by imposing the same probability bound on fragments as on\n      messages\
    \ [Verm90]. Thus,\n                                Zmin' = Zmin.\n      Note that\
    \ both expressions for D prime sub max given in (i) above\n      apply to the\
    \ statistical delay bound case as well.\n   (iii) Deterministic delay-jitter bound.\
    \  For the case of layer to\n         layer translation, the discussion above\
    \ yields:\n                     Jmax' = Jmax - SUMi {j(max,i)} ,\n      where\
    \ j(max,i) is the deterministic jitter bound of the i-th layer\n      above the\
    \ given lower-level server.  When messages are fragmented,\n      the delay jitter\
    \ bound can be left unchanged:\n                                Jmax' = Jmax .\n\
    \      There would be reasons to reduce it in the case of message\n      fragmentation\
    \ only if the underlying server did not guarantee\n      sequenced delivery, and\
    \ if no resequencing of fragments were\n      provided by the corresponding reassembly\
    \ layer on the receiving\n      side.\n   (iv)  Statistical delay-jitter bound.\
    \  The interested reader will\n         be able with little effort to derive the\
    \ translation formulas\n         for this case from the definition in Section\
    \ 3.1 (iv)\n         and from the discussion in (ii) and (iii) above.\n"
- title: 5.2  Throughput requirements
  contents:
  - "5.2  Throughput requirements\n   Since all layers are in cascade, the throughput\
    \ bounds would be the\n   same for all of them if headers and sometimes trailers\
    \ were not added\n   at each layer for encapsulation or fragmentation. Thus, throughput\n\
    \   bounds have to be increased as the request travels downward through\n   the\
    \ protocol hierarchy, and the server at each layer knows by how\n   much, since\
    \ it is responsible for these additions.\n"
- title: 5.3  Reliability requirements
  contents:
  - "5.3  Reliability requirements\n   If we assume, quite realistically, that the\
    \ probability of message\n   loss in a host is extremely small, then we do not\
    \ have to change the\n   value of Wmin when we change layers.\n   The effects\
    \ of message fragmentation are similar to those on\n   statistical delay bounds,\
    \ but in a given application a message may be\n   lost even if only one of its\
    \ fragments is lost.  Thus, we have\n                        Wmin' = 1 - (1 -\
    \ Wmin)/f ,\n   where Wmin' is the lower bound of the correct delivery probability\n\
    \   for the fragment stream, and f is the number of fragments per\n   message.\
    \  The optimistic viewpoint, which is the one we adopted in\n   Section 5.1 (ii),\
    \ yields Wmin' = Wmin, and the observations made in\n   that section about the\
    \ true bound and about providing guarantees\n   apply.\n"
- title: 5.4  Other requirements
  contents:
  - "5.4  Other requirements\n   Of the requirements and desiderata discussed in Section\
    \ 4, those that\n   are specified as a Boolean value or a qualitative attribute\
    \ do not\n   have to be modified for lower-level servers unless they are satisfied\n\
    \   in some layer above those servers (e.g., no sequencing is to be\n   required\
    \ below the level where a resequencer operates).  When they\n   are represented\
    \ by a bound (e.g., one on the setup time, as described\n   in Section 4.4), then\
    \ bounds for the layers above a lower-level\n   server will have to be chosen\
    \ to calculate the corresponding bound\n   for that server.  The above discussions\
    \ of the translation of\n   performance requirements will, in most cases, provide\
    \ the necessary\n   techniques for doing these calculations.\n   The requirement\
    \ that the server give clear and useful replies to\n   client requests (see Section\
    \ 2) raises the interesting problem of\n   reverse translation, that from lower-level\
    \ to upper-level\n   specifications.  However, at least in most cases, this does\
    \ not seem\n   to be a difficult problem: all the translation formulas we have\n\
    \   written above are very easily invertible (in other words, it is\n   straightforward\
    \ to express Dmax as a function of Dmax', Zmin as a\n   function of Zmin', and\
    \ so on).\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   In this section we describe some examples of client requirements\
    \ for\n   real-time services.  Simplifying assumptions are introduced to\n   decrease\
    \ the amount of detail and increase clarity.  Our intent is to\n   determine the\
    \ usefulness of the set of requirements proposed above,\n   and to investigate\
    \ some of the problems that may arise in practical\n   cases.  An assumption underlying\
    \ all examples is that the network's\n   transmission rate is 45 Mbits/s, and\
    \ that the hosts can keep up with\n   this rate when processing messages.\n"
- title: 6.1  Interactive voice
  contents:
  - "6.1  Interactive voice\n   Let us assume that human clients are to specify the\
    \ requirements for\n   voice that is already digitized (at a 64 kbits/s rate)\
    \ and packetized\n   (packet size: 48 bytes, coinciding with the size of an ATM\
    \ cell;\n   packet transmission time: 8.53 microseconds ; packet interarrival\n\
    \   time: 6 ms).  Since the communication is interactive, deterministic\n   (and\
    \ statistical) delay bounds play a very important role.  Jitter is\n   also important,\
    \ but does not dominate the other requirements as in\n   non-interactive audio\
    \ or video communication (see Section 6.2).  The\n   minimum throughput offered\
    \ by the system must correspond to the\n   maximum input rate, i.e., 64 kbits/s;\
    \ in fact, because of header\n   overhead (5 control bytes for every 48 data bytes),\
    \ total guaranteed\n   throughput should be greater than 70.66 kbits/s, i.e.,\
    \ 8,834 bytes/s.\n   (Since the client may not know the overhead introduced by\
    \ the system,\n   the system may have to compute this value from the one given\
    \ by the\n   client, which in this case would be 8 kbytes/s.)  The minimum average\n\
    \   throughput over an interval as long as 100 s is 44% of Tmin, due to\n   the\
    \ silence periods [Brad64].\n   Voice transmission can tolerate limited packet\
    \ losses without making\n   the speech unintelligible at the receiving end.  We\
    \ assume that a\n   maximum loss of two packets out of 100 (each packet corresponding\
    \ to\n   6 ms of speech) can be tolerated even in the worst case, i.e., when\n\
    \   the two packets are consecutive.  Since packets arriving after their\n   absolute\
    \ deadline are discarded if the delay bound is to be\n   statistical, then this\
    \ maximum loss rate must include losses due to\n   lateness, i.e., 0.98 will have\
    \ to be the value of Zmin Wmin rather\n   than just that of Wmin.\n   This is\
    \ illustrated in the first column of Table Ia, which consists\n   of two subcolumns:\
    \ one is for the choice of a deterministic delay\n   bound, the other one for\
    \ that of a statistical delay bound and a\n   combined bound on the probability\
    \ of lateness or loss.  If in a row\n   there is a single entry, that entry is\
    \ the same for both subcolumns.\n   Note that the maximum setup time could be\
    \ made much longer if\n   connections had to be reserved in advance.\n   Since\
    \ voice is packetized at the client's level, we will not have to\n   worry about\
    \ the effects of fragmentation while translating the\n   requirements into their\
    \ lower-level correspondents.\n"
- title: 6.2  Non-interactive video
  contents:
  - "6.2  Non-interactive video\n   At the level of the client, the video message\
    \ stream consists of 1\n   Mbit frames, to be transmitted at the rate of 30 frames\
    \ per second.\n   Thus, the throughput bounds (both deterministic and average)\
    \ are,\n   taking into account the overhead of ATM cell headers, 4.14 Mbytes/s.\n\
    \   As in the case of interactive voice, we have two alternatives for the\n  \
    \ specification of delay bounds: the first subcolumn is for the\n   deterministic\
    \ bound case, the second for that of a statistical bound\n   on delays and a combined\
    \ probability bound on lateness or loss; the\n   latter bound is set to at most\
    \ 10 frames out of 100, i.e., three out\n   of 30.  However, the really important\
    \ bound in this case is the one\n   on delay jitter, set at 5 ms, which is roughly\
    \ equal to half of the\n   interval between two successive frames, and between\
    \ 1/4 and 1/5 of\n   the transmission time.  This dominance of the jitter bound\
    \ is the\n   reason why the other delay bounds are in parentheses.\n   If we assume\
    \ that video frames will have to be fragmented into cells\n   at some lower level\
    \ in the protocol hierarchy, then these\n   requirements must be translated at\
    \ that level into those shown in the\n   first column of Table II.  The values\
    \ of Dmax' have been calculated\n   with x = 12.8 microseconds and f = 2605 fragments/frame.\
    \  The range\n   of Wmin' and of (Zmin Wmin)' is quite wide, and achieving its\
    \ higher\n   value (a probability of 1) may turn out to be either very expensive\n\
    \   or impossible.  We observe, however, that a frame in which a packet\n   or\
    \ more are missing or have been incorrectly received does not have\n   to be discarded\
    \ but can be played with gaps or patched with the old\n   packets in lieu of the\
    \ missing or corrupted ones.  Thus, it may be\n   possible to consider an optimistic\
    \ approach (e.g., Zmin' = Zmin,\n   Wmin' = Wmin, (Zmin Wmin)' = Zmin Wmin ) as\
    \ sufficiently safe.\n"
- title: 6.3  Real-time datagram
  contents:
  - "6.3  Real-time datagram\n   A real-time datagram is, for instance, an alarm condition\
    \ to be\n   transmitted in an emergency from one machine to another (or a group\n\
    \   of others) in a distributed real-time system.  The client\n   requirements\
    \ in this case are very simple: a deterministic bound is\n   needed (we are assuming\
    \ that this is a hard-real-time context), the\n   reliability of delivery must\
    \ be very high, and the service setup time\n   should be very small.  The value\
    \ of 0.98 for Wmin in Table Ib tries\n   to account for the inevitable network\
    \ errors and to suggest that\n   retransmission should not be used as might be\
    \ necessary if we wanted\n   to have Wmin = 1, because it would be too slow. \
    \ To increase\n   reliability in this case, error correcting codes or spatial\n\
    \   redundancy will have to be resorted to instead.\n   Note that one method for\
    \ obtaining a very small setup time consists\n   of shipping such urgent datagrams\
    \ on long-lasting connections\n   previously created between the hosts involved\
    \ and with the\n   appropriate characteristics.  Note also that throughput requirements\n\
    \   cannot be defined, since we are dealing with one small message only,\n   which\
    \ may not even have to be fragmented.  Guarantees on the other\n   bounds will\
    \ fully satisfy the needs of the client in this case.\n"
- title: 6.4  File transfer
  contents:
  - "6.4  File transfer\n   Large files are to be copied from a disk to a remote disk.\
    \  We assume\n   that the receiving disk's speed is greater than or equal to the\n\
    \   sending disk's, and that the transfer could therefore proceed, in the\n  \
    \ absence of congestion, at the speed of the sending disk.  The message\n   size\
    \ equals the size of one track (11 Kbytes, including disk surface\n   overhead\
    \ such as intersector gaps), and the maximum input rate is\n   5.28 Mbits/s. \
    \ Taking into account the ATM cell headers, this rate\n   becomes 728 kbytes/s;\
    \ this is the minimum peak throughput to be\n   guaranteed by the system.  The\
    \ minimum average throughput to be\n   provided is smaller, due to head switching\
    \ times and setup delays\n   (seek times are even longer, hence need not be considered\
    \ here): we\n   set its value at 700 kbytes/s.\n   Delay bounds are much less\
    \ important in this example than in the\n   previous ones; in Table Ib, we show\
    \ deterministic and statistical\n   bounds in parentheses.  Reliability must be\
    \ eventually 1 to ensure\n   the integrity of the file's copy.  This result will\
    \ have to be\n   obtained by error correction (which will increase the throughput\n\
    \   requirements) or retransmission (which would break most delay bounds\n   if\
    \ they were selected on the basis of the first shipment only instead\n   of the\
    \ last one).\n   The second column in Table II shows the results of translating\
    \ these\n   requirements to account for message fragmentation.  The values x =\n\
    \   78.3 microseconds and f = 230 have been used to compute those of\n   Dmax'.\n"
- title: 7.  Discussion
  contents:
  - "7.  Discussion\n   In this section, we briefly discuss some of the objections\
    \ that can\n   be raised concerning our approach to real-time service requirements.\n\
    \   Some of the objections are fundamental ones: they are at least as\n   related\
    \ to the basic decisions to be made in the design of the server\n   as they are\
    \ to client requirements.\n   Objection 1: Guarantees are not necessary.\n   This\
    \ is the most radical objection, as it stems from a basic\n   disagreement with\
    \ our definition of real-time service.  The problem,\n   however, is not with\
    \ definitions or terminologies: the really\n   important question is whether a\
    \ type of service such as the one we\n   call \"real-time\" will be necessary\
    \ or at least useful in future\n   networks.  This objection is raised by the\
    \ optimists, those who\n   believe that network bandwidth will be so abundant\
    \ that congestion\n   will become a disease of the past, and that delays will\
    \ therefore be\n   small enough that the enforcement of legalistic guarantees\
    \ will not\n   be necessary.  The history of computers and communications, however,\n\
    \   does not unfortunately support these arguments, while it supports\n   those\
    \ of the pessimists.  In a situation of limited resources\n   (limited with respect\
    \ to the existing demand for them), we believe\n   that there is no serious solution\
    \ of the real-time communication\n   problem other than one based on a policy\
    \ for the allocation of\n   resources that rigorously guarantees the satisfaction\
    \ of performance\n   needs.  Even if the approaches to be adopted in practical\
    \ networks\n   will provide only approximate guarantees, it is important to devise\n\
    \   methods that offer without exceptions precisely defined bounds.\n   These\
    \ methods can at the very least be used as reference approaches\n   for comparison\
    \ and evaluation.\n   Objection 2: Real-time services are too expensive because\
    \ reservation\n   of resources is very wasteful.\n   This may be true if resources\
    \ are exclusively reserved; for example,\n   physical circuits used for bursty\
    \ traffic in a circuit-switched\n   network.  There are, however, other ways of\
    \ building real-time\n   services, based on priority mechanisms and preemption\
    \ rather than\n   exclusive reservation of resources.  With these schemes, the\
    \ real-\n   time traffic always finds the resources it needs by preempting non-\n\
    \   real-time traffic, as long as the real-time load is kept below a\n   threshold.\
    \  The threshold corresponds to the point where the demand\n   by real-time traffic\
    \ for the bottleneck resource equals the amount of\n   that resource in the system.\
    \  With this scheme, all resources not\n   used by real-time traffic can be used\
    \ at any time by local tasks and\n   non-real-time traffic.  Congestion may affect\
    \ the latter, but not\n   real-time traffic.  Thus, the only limitation is that\
    \ a network\n   cannot carry unbounded amounts of real-time traffic, and must\
    \ refuse\n   any further requests when it has reached the saturation point.\n\
    \   Objection 3: Real-time services can be built on top of non-real-time\n   servers.\n\
    \   If one accepts our interpretation of the term \"guarantee,\" one can\n   easily\
    \ see that performance guarantees cannot be provided by a\n   higher-level server\
    \ unless it can rely on real-time support by its\n   underlying server.  Since\
    \ this is true at all levels, we conclude\n   that a real-time network service\
    \ and similar services at all\n   intermediate levels are needed to provide guaranteed\
    \ performance to\n   human clients and applications.\n   Objection 4: Delay bounds\
    \ are not necessary, throughput requirements\n   suffice.\n   Guaranteeing minimum\
    \ throughput bounds does not automatically and in\n   general result in any stringent\
    \ upper bound on delay.  Delays in the\n   hosts and nodes of a packet-switching\
    \ network fluctuate because of\n   bursty real-time message streams, starting\
    \ and ending of traffic on\n   individual connections (even those with continuous,\
    \ constant-rate\n   traffic), and the behavior of scheduling algorithms.  Even\
    \ if delays\n   did not fluctuate, but had a constant value, it would be possible\
    \ for\n   a given throughput bound to be satisfied with many different constant\n\
    \   values for the delay of each message.  If delay bounds are wanted,\n   they\
    \ must be explicitly guaranteed and enforced.  (In a circuit-\n   switching network,\
    \ the circuit assigned to a connection has its own\n   throughput and its own\
    \ delay.  These values may be considered as\n   explicitly guaranteed and enforced.)\n\
    \   But are delay bounds wanted?  We believe they are in digital video\n   and\
    \ audio communication, especially in the form of delay jitter\n   bounds, and\
    \ they will be in other contexts as soon as a service which\n   can bound delays\
    \ is offered.\n   Objection 5: Satisfaction of statistical bounds is impossible\
    \ to\n   verify.\n   Strictly speaking, this objection is valid.  No matter how\
    \ many\n   packets on a connection have been delayed beyond their bound (or lost\n\
    \   or delivered with errors), it is always in principle possible for the\n  \
    \ server to redress the situation in the future and meet the given\n   statistical\
    \ requirements.  A more sensible and verifiable bound would\n   be a fractional\
    \ one (see Section 3).  For instance, such a bound\n   could be specified as follows:\
    \ out of 100 consecutive packets, no\n   less than 97 shall not be late.  In this\
    \ case, the bound is no longer\n   Zmin, a probability of 0.97, but is given by\
    \ the two values B = 97\n   and A = 100; it is not only their ratio that counts\
    \ but also their\n   individual values.\n"
- title: 8.  Conclusion
  contents:
  - "8.  Conclusion\n   This paper has presented a specification of some of the requirements\n\
    \   that human clients and applications may wish to impose on real-time\n   communications.\
    \  Though those listed seem to be among the most useful\n   and natural ones,\
    \ no attempt has been made to be exhaustive and\n   comprehensive.\n   We have\
    \ investigated delay bounds, throughput bounds, reliability\n   bounds, and other\
    \ requirements.  We have studied how the requirements\n   should be translated\
    \ from the client's level into forms suitable (and\n   correct) for lower levels,\
    \ described some examples of requirement\n   specification, and discussed some\
    \ of the objections that may be\n   raised.\n   The material in this paper covers\
    \ only part of the first phase in the\n   design of a real-time service: that\
    \ during which the various\n   requirements are assembled and examined to extract\
    \ useful suggestions\n   for the design of the server.  Server needs and design\
    \ principles\n   will be the subject of the subsequent paper mentioned several\
    \ times\n   above.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Ralf Herrtwich and Dinesh Verma contributed ideas to, and\
    \ corrected\n   mistakes in, a previous version of the manuscript.  The author\
    \ is\n   deeply indebted to them for their help and for the many discussions\n\
    \   he had with them on the topics dealt with in this paper.  The\n   comments\
    \ of Ramesh Govindan and Riccardo Gusella are also gratefully\n   acknowledged.\n"
- title: References
  contents:
  - "References\n   [Brad64]  Brady, P., \"A Technique for Investigating On-Off Patterns\n\
    \             of Speech\", Bell Systems Technical Journal, Vol. 44,\n        \
    \     Pgs. 1-22, 1964.\n   [Ferr89a] Ferrari, D., \"Real-Time Communication in\n\
    \             Packet-Switching Wide-Area Networks\", Technical Report\n      \
    \       TR-89-022, International Computer Science Institute,\n             Berkeley,\
    \ May 1989.\n   [Ferr89b] Ferrari D., and D. Verma, \"A Scheme for Real-Time Channel\n\
    \             Establishment in Wide-Area Networks\", IEEE J. Selected\n      \
    \       Areas Communications SAC-8, April 1990.\n   [Gait90]  Gaitonde, S., D.\
    \ Jacobson, and A. Pohm, \"Bounding Delay on\n             a Multifarious Token\
    \ Ring Network\", Communications of the\n             ACM, Vol. 33, No. 1, Pgs.\
    \ 20-28, January 1990.\n   [Herr89]  Herrtwich R., and U. Brandenburg, \"Accessing\
    \ and\n             Customizing Services in Distributed Systems\", Technical\n\
    \             Report TR-89-059, International Computer Science Institute,\n  \
    \           Berkeley, October 1989.\n   [Herr90]  Herrtwich, R, personal communication,\
    \ February 1990.\n   [Verm90]  Verma, D., personal communication, February 1990.\n\
    \                                 Table Ia\n                    Examples of Client\
    \ Requirements\n                           Interactive  Non-Interactive\n    \
    \                          Voice           Video\n"
- title: Delay Bounds
  contents:
  - 'Delay Bounds

    '
- title: deterministic:Dmax [ms]    200     -     (1000)    -
  contents:
  - 'deterministic:Dmax [ms]    200     -     (1000)    -

    '
- title: statistical:Dmax [ms]       -     200       -    (1000)
  contents:
  - "statistical:Dmax [ms]       -     200       -    (1000)\n            Zmin   \
    \         -     (*)       -      (*)\n"
- title: jitter:Jmax [ms]               1                5
  contents:
  - 'jitter:Jmax [ms]               1                5

    '
- title: Throughput Bounds
  contents:
  - 'Throughput Bounds

    '
- title: deterministic:Tmin [kby/s]   8.834            4140
  contents:
  - 'deterministic:Tmin [kby/s]   8.834            4140

    '
- title: average:Tave [kby/s]         3.933            4140
  contents:
  - "average:Tave [kby/s]         3.933            4140\n        I [s]           \
    \      100              100\n"
- title: Reliability Bound:Wmin     0.98   (*)     (0.90)   (*)
  contents:
  - 'Reliability Bound:Wmin     0.98   (*)     (0.90)   (*)

    '
- title: Delay&Reliability:ZminWmin  -    0.98       -      0.90
  contents:
  - 'Delay&Reliability:ZminWmin  -    0.98       -      0.90

    '
- title: Sequencing                    yes              yes
  contents:
  - 'Sequencing                    yes              yes

    '
- title: Absence of Duplications       yes              yes
  contents:
  - 'Absence of Duplications       yes              yes

    '
- title: 'Failure Recovery:'
  contents:
  - "Failure Recovery:\n max.repair time [s]           10              100\n"
- title: Max.Setup Time [s]            0.8 (o)          15 (o)
  contents:
  - 'Max.Setup Time [s]            0.8 (o)          15 (o)

    '
- title: '----------------------------------'
  contents:
  - '----------------------------------

    '
- title: (*) To be chosen by the server
  contents:
  - '(*) To be chosen by the server

    '
- title: (o) Could be much longer if advance reservations were required
  contents:
  - '(o) Could be much longer if advance reservations were required

    '
- title: (+) Could be achieved by using a preexisting connection
  contents:
  - "(+) Could be achieved by using a preexisting connection\n                   \
    \              Table Ib\n                    Examples of Client Requirements\n\
    \                           Real-Time     File\n                            Datagram\
    \   Transfer\n"
- title: Delay Bounds
  contents:
  - 'Delay Bounds

    '
- title: deterministic:Dmax [ms]        50      -   (1500)
  contents:
  - 'deterministic:Dmax [ms]        50      -   (1500)

    '
- title: statistical:Dmax [ms]           -    (1000)   -
  contents:
  - "statistical:Dmax [ms]           -    (1000)   -\n            Zmin           \
    \     -    (0.95)   -\n"
- title: jitter:Jmax [ms]                -             -
  contents:
  - 'jitter:Jmax [ms]                -             -

    '
- title: Throughput Bounds
  contents:
  - 'Throughput Bounds

    '
- title: deterministic:Tmin [kby/s]      -          728
  contents:
  - 'deterministic:Tmin [kby/s]      -          728

    '
- title: average:Tave [kby/s]            -          700
  contents:
  - "average:Tave [kby/s]            -          700\n        I [s]               \
    \    -          100\n"
- title: Reliability Bound:Wmin        0.98          1
  contents:
  - 'Reliability Bound:Wmin        0.98          1

    '
- title: Delay&Reliability:ZminWmin      -           -
  contents:
  - 'Delay&Reliability:ZminWmin      -           -

    '
- title: Sequencing                      -          yes
  contents:
  - 'Sequencing                      -          yes

    '
- title: Absence of Duplications        yes         yes
  contents:
  - 'Absence of Duplications        yes         yes

    '
- title: 'Failure Recovery:'
  contents:
  - "Failure Recovery:\n max.repair time [s]            -          100\n"
- title: Max.Setup Time [s]             0 (+)       5 (o)
  contents:
  - 'Max.Setup Time [s]             0 (+)       5 (o)

    '
- title: '----------------------------------'
  contents:
  - '----------------------------------

    '
- title: (*) To be chosen by the server
  contents:
  - '(*) To be chosen by the server

    '
- title: (o) Could be much longer if advance reservations were required
  contents:
  - '(o) Could be much longer if advance reservations were required

    '
- title: (+) Could be achieved by using a preexisting connection
  contents:
  - "(+) Could be achieved by using a preexisting connection\n                   \
    \             Table II\n                  Translation of the Requirements in Table\
    \ I\n                           Non-Interactive            File\n            \
    \                    Video               Transfer\n"
- title: Delay Bounds
  contents:
  - 'Delay Bounds

    '
- title: deterministic:Dmax' [ms]     (966)    -            -    (1482)
  contents:
  - 'deterministic:Dmax'' [ms]     (966)    -            -    (1482)

    '
- title: statistical:Dmax' [ms]         -    (966)        (982)     -
  contents:
  - "statistical:Dmax' [ms]         -    (966)        (982)     -\n            Zmin'\
    \              -     (*)         (0.95)    -\n"
- title: jitter:Jmax' [ms]                 5                    -
  contents:
  - 'jitter:Jmax'' [ms]                 5                    -

    '
- title: Reliability Bound:Wmin'      0.90-1  (*)               1
  contents:
  - 'Reliability Bound:Wmin''      0.90-1  (*)               1

    '
- title: Delay&Reliability:(ZminWmin)'  -    0.90-1             -
  contents:
  - 'Delay&Reliability:(ZminWmin)''  -    0.90-1             -

    '
- title: _____________________________________
  contents:
  - '_____________________________________

    '
- title: (*) To be chosen by the server
  contents:
  - '(*) To be chosen by the server

    '
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security considerations are not discussed in this\
    \ memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Domenico Ferrari\n   University of California\n   Computer\
    \ Science Division\n   EECS Department\n   Berkeley, CA 94720\n   Phone: (415)\
    \ 642-3806\n   EMail: ferrari@UCBVAX.BERKELEY.EDU\n"
