- title: __initial_text__
  contents:
  - "                   IP DATAGRAM REASSEMBLY ALGORITHMS\n                      \
    \       David D. Clark\n                  MIT Laboratory for Computer Science\n\
    \               Computer Systems and Communications Group\n                  \
    \             July, 1982\n     1.  Introduction\n     One of the mechanisms of\
    \ IP is fragmentation and reassembly.  Under\ncertain  circumstances,  a  datagram\
    \  originally transmitted as a single\nunit will arrive at its final destination\
    \ broken into several fragments.\nThe IP layer at the receiving host must accumulate\
    \ these fragments until\nenough have arrived to completely reconstitute  the \
    \ original  datagram.\nThe  specification  document  for IP gives a complete description\
    \ of the\nreassembly mechanism, and contains several examples.  It  also  provides\n\
    one  possible  algorithm  for  reassembly,  based  on  keeping  track of\narriving\
    \ fragments in a vector of bits.    This  document  describes  an\nalternate approach\
    \ which should prove more suitable in some machines.\n     A  superficial  examination\
    \  of  the reassembly process may suggest\nthat it is rather complicated.  First,\
    \ it is necessary to keep track  of\nall the fragments, which suggests a small\
    \ bookkeeping job.  Second, when\na  new fragment arrives, it may combine with\
    \ the existing fragments in a\nduplicate  existing  fragments,  or  partially\
    \  fill a space between two\nfragments without abutting either of them.  Thus,\
    \ it might seem that the\nreassembly  process  might  involve  designing  a  \
    \ fairly   complicated\nalgorithm that tests for a number of different options.\n\
    \     In  fact,  the  process  of  reassembly  is  extremely simple. This\ndocument\
    \ describes a way of dealing with reassembly  which  reduces  the\nbookkeeping\
    \  problem  to  a minimum, which requires for storage only one\nbuffer equal in\
    \ size to the final datagram being reassembled, which  can\nreassemble a datagram\
    \ from any number of fragments arriving in any order\nwith  any  possible  pattern\
    \  of  overlap  and duplication, and which is\nappropriate for almost any sort\
    \ of operating system.\n     The reader should consult the IP specification document\
    \ to be  sure\nthat  he  is completely familiar with the general concept of reassembly,\n\
    and the particular header fields and vocabulary  used  to  describe  the\nprocess.\n\
    \     2.  The Algorithm\n     In  order  to  define this reassembly algorithm,\
    \ it is necessary to\ndefine some terms.  A partially reassembled datagram consists\
    \ of certain\nsequences of octets that have already arrived, and certain  areas\
    \  still\nto  come.    We will refer to these missing areas as \"holes\".  Each\
    \ hole\ncan be characterized by two numbers, hole.first, the number of the first\n\
    octet in the hole, and hole.last, the number of the last  octet  in  the\nhole.\
    \    This pair of numbers we will call the \"hole descriptor\", and we\n     The\
    \  general  form  of  the  algorithm  is  as follows.  When a new\nfragment of\
    \ the datagram arrives, it will possibly fill in one  or  more\nof  the existing\
    \ holes.  We will examine each of the entries in the hole\ndescriptor list to\
    \ see whether the hole in  question  is  eliminated  by\nthis incoming fragment.\
    \  If so, we will delete that entry from the list.\nEventually, a fragment will\
    \ arrive which eliminates every entry from the\nlist.    At this point, the datagram\
    \ has been completely reassembled and\ncan be passed to higher protocol levels\
    \ for further processing.\n     The algorithm will be described in two phases.\
    \ In the  first  part,\nwe  will  show  the  sequence  of  steps  which  are executed\
    \ when a new\nfragment arrives, in order to  determine  whether  or  not  any\
    \  of  the\nexisting  holes  are  filled by the new fragment.  In the second part\
    \ of\nthis description, we will  show  a  ridiculously  simple  algorithm  for\n\
    management of the hole descriptor list.\n     3.  Fragment Processing Algorithm\n\
    \     An arriving fragment can fill any of the existing holes in a number\nof\
    \ ways.  Most simply, it can completely fill a hole.  Alternatively, it\nmay \
    \ leave some remaining space at either the beginning or the end of an\nexisting\
    \ hole.  Or finally, it can lie in  the  middle  of  an  existing\nhole,  breaking\
    \ the hole in half and leaving a smaller hole at each end.\nBecause of these possibilities,\
    \ it might seem that  a  number  of  tests\nmust  be  made  when  a  new  fragment\
    \  arrives,  leading  to  a  rather\n     We  start  the algorithm when the earliest\
    \ fragment of the datagram\narrives.  We begin by creating an empty data buffer\
    \ area and putting one\nentry in its  hole  descriptor  list,  the  entry  which\
    \  describes  the\ndatagram  as  being completely missing.  In this case, hole.first\
    \ equals\nzero, and hole.last equals infinity. (Infinity is presumably implemented\n\
    by a very large integer, greater than 576, of the implementor's choice.)\nThe\
    \ following eight steps are then used to insert each of  the  arriving\nfragments\
    \  into  the  buffer  area  where the complete datagram is being\nbuilt up.  The\
    \ arriving fragment is  described  by  fragment.first,  the\nfirst  octet  of\
    \  the fragment, and fragment.last, the last octet of the\nfragment.\n   1. Select\
    \ the next hole  descriptor  from  the  hole  descriptor\n      list.  If there\
    \ are no more entries, go to step eight.\n   2. If fragment.first is greater than\
    \ hole.last, go to step one.\n   3. If fragment.last is less than hole.first,\
    \ go to step one.\n         - (If  either  step  two  or  step three is true,\
    \ then the\n           newly arrived fragment does not overlap with the hole in\n\
    \           any way, so we need pay no  further  attention  to  this\n       \
    \    hole.  We return to the beginning of the algorithm where\n           we select\
    \ the next hole for examination.)\n   4. Delete the current entry from the hole\
    \ descriptor list.\n         - (Since  neither  step  two  nor step three was\
    \ true, the\n           newly arrived fragment does interact with this  hole \
    \ in\n           some  way.    Therefore,  the current descriptor will no\n  \
    \         longer be valid.  We will destroy it, and  in  the  next\n         \
    \  two  steps  we  will  determine  whether  or  not  it is\n           necessary\
    \ to create any new hole descriptors.)\n   5. If fragment.first is greater than\
    \ hole.first, then  create  a\n         - (If  the  test in step five is true,\
    \ then the first part\n           of the original hole is not filled by this fragment.\
    \  We\n           create a new descriptor for this smaller hole.)\n   6. If fragment.last\
    \ is less  than  hole.last  and  fragment.more\n      fragments   is  true,  then\
    \  create  a  new  hole  descriptor\n      \"new_hole\", with new_hole.first equal\
    \ to  fragment.last  plus\n      one and new_hole.last equal to hole.last.\n \
    \        - (This   test  is  the  mirror  of  step  five  with  one\n        \
    \   additional feature.  Initially, we did not know how long\n           the reassembled\
    \ datagram  would  be,  and  therefore  we\n           created   a   hole   reaching\
    \  from  zero  to  infinity.\n           Eventually, we will receive the  last\
    \  fragment  of  the\n           datagram.    At  this  point, that hole descriptor\
    \ which\n           reaches from the last octet of the  buffer  to  infinity\n\
    \           can  be discarded.  The fragment which contains the last\n       \
    \    fragment indicates this fact by a flag in  the  internet\n           header\
    \ called \"more fragments\".  The test of this bit in\n           this  statement\
    \  prevents  us from creating a descriptor\n           for the unneeded hole which\
    \ describes the space from the\n           end of the datagram to infinity.)\n\
    \   7. Go to step one.\n   8. If the hole descriptor list is now empty, the datagram\
    \ is now\n      complete.  Pass it on to the higher level protocol  processor\n\
    \      for further handling.  Otherwise, return.\n     4.  Part Two:  Managing\
    \ the Hole Descriptor List\n     The  main  complexity  in  the  eight  step \
    \ algorithm above is not\nperforming the arithmetical tests, but in adding  and\
    \  deleting  entries\nfrom  the  hole descriptor list.  One could imagine an implementation\
    \ in\nwhich the storage management package was  many  times  more  complicated\n\
    than  the rest of the algorithm, since there is no specified upper limit\non the\
    \ number of hole descriptors which will exist for a datagram during\nof  the \
    \ hole  itself.    Note  that by the definition of the reassembly\nalgorithm,\
    \ the minimum size of  a  hole  is  eight  octets.    To  store\nhole.first  and\
    \  hole.last  will presumably require two octets each.  An\nadditional two octets\
    \ will be required to thread together the entries on\nthe hole descriptor list.\
    \  This leaves at least two more octets to  deal\nwith implementation idiosyncrasies.\n\
    \     There  is  only  one obvious pitfall to this storage strategy.  One\nmust\
    \ execute the eight step algorithm above before copying the data from\nthe fragment\
    \ into the reassembly buffer.  If one were to copy  the  data\nfirst,  it might\
    \ smash one or more hole descriptors.  Once the algorithm\nabove has been run,\
    \ any hole descriptors which are about to  be  smashed\nhave already been rendered\
    \ obsolete.\n     5.  Loose Ends\n     Scattering  the  hole  descriptors throughout\
    \ the reassembly buffer\nitself requires that they be threaded onto some sort\
    \  of  list  so  that\nthey can be found.  This in turn implies that there must\
    \ be a pointer to\nthe head of the list.  In many cases, this pointer can be stored\
    \ in some\nsort  of  descriptor block which the implementation associates with\
    \ each\nreassembly buffer.  If  no  such  storage  is  available,  a  dirty  but\n\
    effective  trick  is  to  store  the  head  of the list in a part of the\ninternet\
    \ header in the reassembly buffer which is no longer needed.   An\nobvious location\
    \ is the checksum field.\n     6.  Options\n     The preceding description made\
    \ one unacceptable simplification.  It\nassumed that there were no internet options\
    \ associated with the datagram\nbeing  reassembled.    The  difficulty  with \
    \ options  is that until one\nreceives the first fragment of the datagram, one\
    \ cannot tell how big the\ninternet header will be.  This is because,  while \
    \ certain  options  are\ncopied  identically  into  every  fragment of a datagram,\
    \ other options,\nsuch as \"record route\", are put in the first fragment only.\
    \  (The \"first\nfragment\"  is  the  fragment  containing  octet  zero  of  the\
    \  original\ndatagram.)\n     Until  one  knows how big the internet header is,\
    \ one does not know\nwhere to copy the data from each fragment into  the  reassembly\
    \  buffer.\nIf  the  earliest  fragment  to arrive happens to be the first fragment,\n\
    then this is no problem.  Otherwise, there are two  solutions.    First,\none\
    \  can  leave  space in the reassembly buffer for the maximum possible\ninternet\
    \ header.  In fact, the  maximum  size  is  not  very  large,  64\noctets.   \
    \ Alternatively,  one can simply gamble that the first fragment\nwill contain\
    \ no options.  If, when the first fragment  finally  arrives,\nthere  are  options,\
    \  one  can  then  shift  the  data  in  the buffer a\nsufficient distance for\
    \ allow for them.  The only peril in  copying  the\ndata  is  that  one  will\
    \  trash  the  pointers  that  thread  the  hole\ndescriptors together.  It is\
    \ easy to see how to untrash the pointers.\n     The source and record route options\
    \ have  the  interesting  feature\nNormally,  this  is  more information than\
    \ the receiving Internet module\nneeds.  The specified procedure is to take the\
    \ return route recorded  in\nthe first fragment and ignore the other versions.\n\
    \     7.  The Complete Algorithm\n     In addition to the algorithm described\
    \ above there are two parts to\nthe reassembly process.  First, when a fragment\
    \ arrives, it is necessary\nto  find  the  reassembly  buffer  associated  with\
    \ that fragment.  This\nrequires some  mechanism  for  searching  all  the  existing\
    \  reassembly\nbuffers.   The correct reassembly buffer is identified by an equality\
    \ of\nthe following fields:  the  foreign  and  local  internet  address,  the\n\
    protocol ID, and the identification field.\n     The  final  part  of  the  algorithm\
    \  is  some  sort of timer based\nmechanism which decrements the time to  live\
    \  field  of  each  partially\nreassembled  datagram,  so that incomplete datagrams\
    \ which have outlived\ntheir usefulness can be detected and deleted.  One can\
    \ either  create  a\ndemon  which  comes alive once a second and decrements the\
    \ field in each\ndatagram by one, or one can read the  clock  when  each  first\
    \  fragment\narrives,  and  queue  some  sort  of  timer  call, using whatever\
    \ system\nmechanism is appropriate, to reap the datagram when its time has come.\n\
    \     An implementation of the complete algorithm  comprising  all  these\nparts\
    \  was  constructed  in BCPL as a test.  The complete algorithm took\nless than\
    \ one and one-half pages of listing, and generated approximately\n     The   version\
    \  of  the  algorithm  described  here  is  actually  a\nsimplification of the\
    \ author's original version, thanks to an insightful\n"
