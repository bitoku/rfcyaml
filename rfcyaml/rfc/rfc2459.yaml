- title: __initial_text__
  contents:
  - "                Internet X.509 Public Key Infrastructure\n                  \
    \    Certificate and CRL Profile\nStatus of this Memo\n   This document specifies\
    \ an Internet standards track protocol for the\n   Internet community, and requests\
    \ discussion and suggestions for\n   improvements.  Please refer to the current\
    \ edition of the \"Internet\n   Official Protocol Standards\" (STD 1) for the\
    \ standardization state\n   and status of this protocol.  Distribution of this\
    \ memo is unlimited.\nCopyright Notice\n   Copyright (C) The Internet Society\
    \ (1999).  All Rights Reserved.\nAbstract\n   This memo profiles the X.509 v3\
    \ certificate and X.509 v2 CRL for use\n   in the Internet.  An overview of the\
    \ approach and model are provided\n   as an introduction.  The X.509 v3 certificate\
    \ format is described in\n   detail, with additional information regarding the\
    \ format and\n   semantics of Internet name forms (e.g., IP addresses).  Standard\n\
    \   certificate extensions are described and one new Internet-specific\n   extension\
    \ is defined.  A required set of certificate extensions is\n   specified.  The\
    \ X.509 v2 CRL format is described and a required\n   extension set is defined\
    \ as well.  An algorithm for X.509 certificate\n   path validation is described.\
    \ Supplemental information is provided\n   describing the format of public keys\
    \ and digital signatures in X.509\n   certificates for common Internet public\
    \ key encryption algorithms\n   (i.e., RSA, DSA, and Diffie-Hellman).  ASN.1 modules\
    \ and examples are\n   provided in the appendices.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in RFC 2119.\n   Please send comments on this document\
    \ to the ietf-pkix@imc.org mail\n   list.\n                           T\bT\bT\b\
    Ta\ba\ba\bab\bb\bb\bbl\bl\bl\ble\be\be\be o\bo\bo\bof\bf\bf\bf C\bC\bC\bCo\bo\b\
    o\bon\bn\bn\bnt\bt\bt\bte\be\be\ben\bn\bn\bnt\bt\bt\bts\bs\bs\bs\n   1  Introduction\
    \ ................................................    5\n   2  Requirements and\
    \ Assumptions ................................    6\n   2.1  Communication and\
    \ Topology ................................    6\n   2.2  Acceptability Criteria\
    \ ....................................    7\n   2.3  User Expectations .........................................\
    \    7\n   2.4  Administrator Expectations ................................  \
    \  7\n   3  Overview of Approach ........................................    7\n\
    \   3.1  X.509 Version 3 Certificate ...............................    9\n  \
    \ 3.2  Certification Paths and Trust .............................   10\n   3.3\
    \  Revocation ................................................   12\n   3.4  Operational\
    \ Protocols .....................................   13\n   3.5  Management Protocols\
    \ ......................................   13\n   4  Certificate and Certificate\
    \ Extensions Profile ..............   15\n   4.1  Basic Certificate Fields ..................................\
    \   15\n   4.1.1  Certificate Fields ......................................  \
    \ 16\n   4.1.1.1  tbsCertificate ........................................   16\n\
    \   4.1.1.2  signatureAlgorithm ....................................   16\n  \
    \ 4.1.1.3  signatureValue ........................................   17\n   4.1.2\
    \  TBSCertificate ..........................................   17\n   4.1.2.1\
    \  Version ...............................................   17\n   4.1.2.2  Serial\
    \ number .........................................   18\n   4.1.2.3  Signature\
    \ .............................................   18\n   4.1.2.4  Issuer ................................................\
    \   18\n   4.1.2.5  Validity ..............................................  \
    \ 21\n   4.1.2.5.1  UTCTime .............................................   22\n\
    \   4.1.2.5.2  GeneralizedTime .....................................   22\n  \
    \ 4.1.2.6  Subject ...............................................   22\n   4.1.2.7\
    \  Subject Public Key Info ...............................   23\n   4.1.2.8  Unique\
    \ Identifiers ....................................   24\n   4.1.2.9 Extensions\
    \ .............................................   24\n   4.2  Certificate Extensions\
    \ ....................................   24\n   4.2.1  Standard Extensions .....................................\
    \   25\n   4.2.1.1  Authority Key Identifier ..............................  \
    \ 25\n   4.2.1.2  Subject Key Identifier ................................   26\n\
    \   4.2.1.3  Key Usage .............................................   27\n  \
    \ 4.2.1.4  Private Key Usage Period ..............................   29\n   4.2.1.5\
    \  Certificate Policies ..................................   29\n   4.2.1.6  Policy\
    \ Mappings .......................................   31\n   4.2.1.7  Subject Alternative\
    \ Name ..............................   32\n   4.2.1.8  Issuer Alternative Name\
    \ ...............................   34\n   4.2.1.9  Subject Directory Attributes\
    \ ..........................   34\n   4.2.1.10  Basic Constraints ....................................\
    \   35\n   4.2.1.11  Name Constraints .....................................  \
    \ 35\n   4.2.1.12  Policy Constraints ...................................   37\n\
    \   4.2.1.13  Extended key usage field .............................   38\n  \
    \ 4.2.1.14  CRL Distribution Points ..............................   39\n   4.2.2\
    \  Private Internet Extensions .............................   40\n   4.2.2.1\
    \  Authority Information Access ..........................   41\n   5  CRL and\
    \ CRL Extensions Profile ..............................   42\n   5.1  CRL Fields\
    \ ................................................   43\n   5.1.1  CertificateList\
    \ Fields ..................................   43\n   5.1.1.1  tbsCertList ...........................................\
    \   44\n   5.1.1.2  signatureAlgorithm ....................................  \
    \ 44\n   5.1.1.3  signatureValue ........................................   44\n\
    \   5.1.2  Certificate List \"To Be Signed\" .........................   44\n\
    \   5.1.2.1  Version ...............................................   45\n  \
    \ 5.1.2.2  Signature .............................................   45\n   5.1.2.3\
    \  Issuer Name ...........................................   45\n   5.1.2.4  This\
    \ Update ...........................................   45\n   5.1.2.5  Next Update\
    \ ...........................................   45\n   5.1.2.6  Revoked Certificates\
    \ ..................................   46\n   5.1.2.7  Extensions ............................................\
    \   46\n   5.2  CRL Extensions ............................................  \
    \ 46\n   5.2.1  Authority Key Identifier ................................   47\n\
    \   5.2.2  Issuer Alternative Name .................................   47\n  \
    \ 5.2.3  CRL Number ..............................................   47\n   5.2.4\
    \  Delta CRL Indicator .....................................   48\n   5.2.5  Issuing\
    \ Distribution Point ..............................   48\n   5.3  CRL Entry Extensions\
    \ ......................................   49\n   5.3.1  Reason Code .............................................\
    \   50\n   5.3.2  Hold Instruction Code ...................................  \
    \ 50\n   5.3.3  Invalidity Date .........................................   51\n\
    \   5.3.4  Certificate Issuer ......................................   51\n  \
    \ 6  Certificate Path Validation .................................   52\n   6.1\
    \  Basic Path Validation .....................................   52\n   6.2  Extending\
    \ Path Validation .................................   56\n   7  Algorithm Support\
    \ ...........................................   57\n   7.1  One-way Hash Functions\
    \ ....................................   57\n   7.1.1  MD2 One-way Hash Function\
    \ ...............................   57\n   7.1.2  MD5 One-way Hash Function ...............................\
    \   58\n   7.1.3  SHA-1 One-way Hash Function .............................  \
    \ 58\n   7.2  Signature Algorithms ......................................   58\n\
    \   7.2.1  RSA Signature Algorithm .................................   59\n  \
    \ 7.2.2  DSA Signature Algorithm .................................   60\n   7.3\
    \  Subject Public Key Algorithms .............................   60\n   7.3.1\
    \  RSA Keys ................................................   61\n   7.3.2  Diffie-Hellman\
    \ Key Exchange Key .........................   61\n   7.3.3  DSA Signature Keys\
    \ ......................................   63\n   8  References ..................................................\
    \   64\n   9  Intellectual Property Rights ................................  \
    \ 66\n   10  Security Considerations ....................................   67\n\
    \   Appendix A.  ASN.1 Structures and OIDs .........................   70\n  \
    \ A.1 Explicitly Tagged Module, 1988 Syntax ......................   70\n   A.2\
    \ Implicitly Tagged Module, 1988 Syntax ......................   84\n   Appendix\
    \ B.  1993 ASN.1 Structures and OIDs ....................   91\n   B.1 Explicitly\
    \ Tagged Module, 1993 Syntax ......................   91\n   B.2 Implicitly Tagged\
    \ Module, 1993 Syntax ......................  108\n   Appendix C.  ASN.1 Notes\
    \ .......................................  116\n   Appendix D.  Examples ..........................................\
    \  117\n   D.1  Certificate ...............................................  117\n\
    \   D.2  Certificate ...............................................  120\n  \
    \ D.3  End-Entity Certificate Using RSA ..........................  123\n   D.4\
    \  Certificate Revocation List ...............................  126\n   Appendix\
    \ E.  Authors' Addresses ................................  128\n   Appendix F.\
    \  Full Copyright Statement ..........................  129\n1  Introduction\n\
    \   This specification is one part of a family of standards for the X.509\n  \
    \ Public Key Infrastructure (PKI) for the Internet.  This specification\n   is\
    \ a standalone document; implementations of this standard may\n   proceed independent\
    \ from the other parts.\n   This specification profiles the format and semantics\
    \ of certificates\n   and certificate revocation lists for the Internet PKI. \
    \ Procedures\n   are described for processing of certification paths in the Internet\n\
    \   environment.  Encoding rules are provided for popular cryptographic\n   algorithms.\
    \  Finally, ASN.1 modules are provided in the appendices\n   for all data structures\
    \ defined or referenced.\n   The specification describes the requirements which\
    \ inspire the\n   creation of this document and the assumptions which affect its\
    \ scope\n   in Section 2.  Section 3 presents an architectural model and\n   describes\
    \ its relationship to previous IETF and ISO/IEC/ITU\n   standards.  In particular,\
    \ this document's relationship with the IETF\n   PEM specifications and the ISO/IEC/ITU\
    \ X.509 documents are described.\n   The specification profiles the X.509 version\
    \ 3 certificate in Section\n   4, and the X.509 version 2 certificate revocation\
    \ list (CRL) in\n   Section 5. The profiles include the identification of ISO/IEC/ITU\
    \ and\n   ANSI extensions which may be useful in the Internet PKI. The profiles\n\
    \   are presented in the 1988 Abstract Syntax Notation One (ASN.1) rather\n  \
    \ than the 1994 syntax used in the ISO/IEC/ITU standards.\n   This specification\
    \ also includes path validation procedures in\n   Section 6.  These procedures\
    \ are based upon the ISO/IEC/ITU\n   definition, but the presentation assumes\
    \ one or more self-signed\n   trusted CA certificates.  Implementations are required\
    \ to derive the\n   same results but are not required to use the specified procedures.\n\
    \   Section 7 of the specification describes procedures for\n   identification\
    \ and encoding of public key materials and digital\n   signatures.  Implementations\
    \ are not required to use any particular\n   cryptographic algorithms.  However,\
    \ conforming implementations which\n   use the identified algorithms are required\
    \ to identify and encode the\n   public key materials and digital signatures as\
    \ described.\n   Finally, four appendices are provided to aid implementers.  Appendix\n\
    \   A contains all ASN.1 structures defined or referenced within this\n   specification.\
    \  As above, the material is presented in the 1988\n   Abstract Syntax Notation\
    \ One (ASN.1) rather than the 1994 syntax.\n   Appendix B contains the same information\
    \ in the 1994 ASN.1 notation\n   as a service to implementers using updated toolsets.\
    \  However,\n   Appendix A takes precedence in case of conflict.  Appendix C contains\n\
    \   notes on less familiar features of the ASN.1 notation used within\n   this\
    \ specification.  Appendix D contains examples of a conforming\n   certificate\
    \ and a conforming CRL.\n2  Requirements and Assumptions\n   The goal of this\
    \ specification is to develop a profile to facilitate\n   the use of X.509 certificates\
    \ within Internet applications for those\n   communities wishing to make use of\
    \ X.509 technology. Such\n   applications may include WWW, electronic mail, user\
    \ authentication,\n   and IPsec.  In order to relieve some of the obstacles to\
    \ using X.509\n   certificates, this document defines a profile to promote the\n\
    \   development of certificate management systems; development of\n   application\
    \ tools; and interoperability determined by policy.\n   Some communities will\
    \ need to supplement, or possibly replace, this\n   profile in order to meet the\
    \ requirements of specialized application\n   domains or environments with additional\
    \ authorization, assurance, or\n   operational requirements.  However, for basic\
    \ applications, common\n   representations of frequently used attributes are defined\
    \ so that\n   application developers can obtain necessary information without\n\
    \   regard to the issuer of a particular certificate or certificate\n   revocation\
    \ list (CRL).\n   A certificate user should review the certificate policy generated\
    \ by\n   the certification authority (CA) before relying on the authentication\n\
    \   or non-repudiation services associated with the public key in a\n   particular\
    \ certificate.  To this end, this standard does not\n   prescribe legally binding\
    \ rules or duties.\n   As supplemental authorization and attribute management\
    \ tools emerge,\n   such as attribute certificates, it may be appropriate to limit\
    \ the\n   authenticated attributes that are included in a certificate.  These\n\
    \   other management tools may provide more appropriate methods of\n   conveying\
    \ many authenticated attributes.\n2.1  Communication and Topology\n   The users\
    \ of certificates will operate in a wide range of\n   environments with respect\
    \ to their communication topology, especially\n   users of secure electronic mail.\
    \  This profile supports users without\n   high bandwidth, real-time IP connectivity,\
    \ or high connection\n   availability.  In addition, the profile allows for the\
    \ presence of\n   firewall or other filtered communication.\n   This profile does\
    \ not assume the deployment of an X.500 Directory\n   system.  The profile does\
    \ not prohibit the use of an X.500 Directory,\n   but other means of distributing\
    \ certificates and certificate\n   revocation lists (CRLs) may be used.\n2.2 \
    \ Acceptability Criteria\n   The goal of the Internet Public Key Infrastructure\
    \ (PKI) is to meet\n   the needs of deterministic, automated identification, authentication,\n\
    \   access control, and authorization functions. Support for these\n   services\
    \ determines the attributes contained in the certificate as\n   well as the ancillary\
    \ control information in the certificate such as\n   policy data and certification\
    \ path constraints.\n2.3  User Expectations\n   Users of the Internet PKI are\
    \ people and processes who use client\n   software and are the subjects named\
    \ in certificates.  These uses\n   include readers and writers of electronic mail,\
    \ the clients for WWW\n   browsers, WWW servers, and the key manager for IPsec\
    \ within a router.\n   This profile recognizes the limitations of the platforms\
    \ these users\n   employ and the limitations in sophistication and attentiveness\
    \ of the\n   users themselves.  This manifests itself in minimal user\n   configuration\
    \ responsibility (e.g., trusted CA keys, rules), explicit\n   platform usage constraints\
    \ within the certificate, certification path\n   constraints which shield the\
    \ user from many malicious actions, and\n   applications which sensibly automate\
    \ validation functions.\n2.4  Administrator Expectations\n   As with user expectations,\
    \ the Internet PKI profile is structured to\n   support the individuals who generally\
    \ operate CAs.  Providing\n   administrators with unbounded choices increases\
    \ the chances that a\n   subtle CA administrator mistake will result in broad\
    \ compromise.\n   Also, unbounded choices greatly complicate the software that\
    \ shall\n   process and validate the certificates created by the CA.\n3  Overview\
    \ of Approach\n   Following is a simplified view of the architectural model assumed\
    \ by\n   the PKIX specifications.\n       +---+\n       | C |                \
    \       +------------+\n       | e | <-------------------->| End entity |\n  \
    \     | r |       Operational     +------------+\n       | t |       transactions\
    \          ^\n       |   |      and management         |  Management\n       |\
    \ / |       transactions          |  transactions\n       |   |              \
    \               |                PKI users\n       | C |                     \
    \        v\n       | R |       -------------------+--+-----------+----------------\n\
    \       | L |                          ^              ^\n       |   |        \
    \                  |              |  PKI management\n       |   |            \
    \              v              |      entities\n       | R |                  \
    \     +------+          |\n       | e | <---------------------| RA   | <---+ \
    \   |\n       | p |  Publish certificate  +------+     |    |\n       | o |  \
    \                                  |    |\n       | s |                      \
    \              |    |\n       | I |                                    v    v\n\
    \       | t |                                +------------+\n       | o | <------------------------------|\
    \     CA     |\n       | r |   Publish certificate          +------------+\n \
    \      | y |   Publish CRL                         ^\n       |   |           \
    \                            |\n       +---+                        Management\
    \     |\n                                    transactions   |\n              \
    \                                     v\n                                    \
    \           +------+\n                                               |  CA  |\n\
    \                                               +------+\n                   \
    \       Figure 1 - PKI Entities\n   The components in this model are:\n   end\
    \ entity:  user of PKI certificates and/or end user system that\n            \
    \    is the subject of a certificate;\n   CA:          certification authority;\n\
    \   RA:          registration authority, i.e., an optional system to\n       \
    \         which a CA delegates certain management functions;\n   repository: \
    \ a system or collection of distributed systems that\n                store certificates\
    \ and CRLs and serves as a means of\n                distributing these certificates\
    \ and CRLs to end\n                entities.\n3.1  X.509 Version 3 Certificate\n\
    \   Users of a public key shall be confident that the associated private\n   key\
    \ is owned by the correct remote subject (person or system) with\n   which an\
    \ encryption or digital signature mechanism will be used.\n   This confidence\
    \ is obtained through the use of public key\n   certificates, which are data structures\
    \ that bind public key values\n   to subjects.  The binding is asserted by having\
    \ a trusted CA\n   digitally sign each certificate. The CA may base this assertion\
    \ upon\n   technical means (a.k.a., proof of posession through a challenge-\n\
    \   response protocol), presentation of the private key, or on an\n   assertion\
    \ by the subject.  A certificate has a limited valid lifetime\n   which is indicated\
    \ in its signed contents.  Because a certificate's\n   signature and timeliness\
    \ can be independently checked by a\n   certificate-using client, certificates\
    \ can be distributed via\n   untrusted communications and server systems, and\
    \ can be cached in\n   unsecured storage in certificate-using systems.\n   ITU-T\
    \ X.509 (formerly CCITT X.509) or ISO/IEC/ITU 9594-8, which was\n   first published\
    \ in 1988 as part of the X.500 Directory\n   recommendations, defines a standard\
    \ certificate format [X.509]. The\n   certificate format in the 1988 standard\
    \ is called the version 1 (v1)\n   format.  When X.500 was revised in 1993, two\
    \ more fields were added,\n   resulting in the version 2 (v2) format. These two\
    \ fields may be used\n   to support directory access control.\n   The Internet\
    \ Privacy Enhanced Mail (PEM) RFCs, published in 1993,\n   include specifications\
    \ for a public key infrastructure based on X.509\n   v1 certificates [RFC 1422].\
    \  The experience gained in attempts to\n   deploy RFC 1422 made it clear that\
    \ the v1 and v2 certificate formats\n   are deficient in several respects.  Most\
    \ importantly, more fields\n   were needed to carry information which PEM design\
    \ and implementation\n   experience has proven necessary.  In response to these\
    \ new\n   requirements, ISO/IEC/ITU and ANSI X9 developed the X.509 version 3\n\
    \   (v3) certificate format.  The v3 format extends the v2 format by\n   adding\
    \ provision for additional extension fields.  Particular\n   extension field types\
    \ may be specified in standards or may be defined\n   and registered by any organization\
    \ or community. In June 1996,\n   standardization of the basic v3 format was completed\
    \ [X.509].\n   ISO/IEC/ITU and ANSI X9 have also developed standard extensions\
    \ for\n   use in the v3 extensions field [X.509][X9.55].  These extensions can\n\
    \   convey such data as additional subject identification information,\n   key\
    \ attribute information, policy information, and certification path\n   constraints.\n\
    \   However, the ISO/IEC/ITU and ANSI X9 standard extensions are very\n   broad\
    \ in their applicability.  In order to develop interoperable\n   implementations\
    \ of X.509 v3 systems for Internet use, it is necessary\n   to specify a profile\
    \ for use of the X.509 v3 extensions tailored for\n   the Internet.  It is one\
    \ goal of this document to specify a profile\n   for Internet WWW, electronic\
    \ mail, and IPsec applications.\n   Environments with additional requirements\
    \ may build on this profile\n   or may replace it.\n3.2  Certification Paths and\
    \ Trust\n   A user of a security service requiring knowledge of a public key\n\
    \   generally needs to obtain and validate a certificate containing the\n   required\
    \ public key. If the public-key user does not already hold an\n   assured copy\
    \ of the public key of the CA that signed the certificate,\n   the CA's name,\
    \ and related information (such as the validity period\n   or name constraints),\
    \ then it might need an additional certificate to\n   obtain that public key.\
    \  In general, a chain of multiple certificates\n   may be needed, comprising\
    \ a certificate of the public key owner (the\n   end entity) signed by one CA,\
    \ and zero or more additional\n   certificates of CAs signed by other CAs.  Such\
    \ chains, called\n   certification paths, are required because a public key user\
    \ is only\n   initialized with a limited number of assured CA public keys.\n \
    \  There are different ways in which CAs might be configured in order\n   for\
    \ public key users to be able to find certification paths.  For\n   PEM, RFC 1422\
    \ defined a rigid hierarchical structure of CAs.  There\n   are three types of\
    \ PEM certification authority:\n      (a)  Internet Policy Registration Authority\
    \ (IPRA):  This\n      authority, operated under the auspices of the Internet\
    \ Society,\n      acts as the root of the PEM certification hierarchy at level\
    \ 1.\n      It issues certificates only for the next level of authorities,\n \
    \     PCAs.  All certification paths start with the IPRA.\n      (b)  Policy Certification\
    \ Authorities (PCAs):  PCAs are at level 2\n      of the hierarchy, each PCA being\
    \ certified by the IPRA.  A PCA\n      shall establish and publish a statement\
    \ of its policy with respect\n      to certifying users or subordinate certification\
    \ authorities.\n      Distinct PCAs aim to satisfy different user needs. For example,\n\
    \      one PCA (an organizational PCA) might support the general\n      electronic\
    \ mail needs of commercial organizations, and another PCA\n      (a high-assurance\
    \ PCA) might have a more stringent policy designed\n      for satisfying legally\
    \ binding digital signature requirements.\n      (c)  Certification Authorities\
    \ (CAs):  CAs are at level 3 of the\n      hierarchy and can also be at lower\
    \ levels. Those at level 3 are\n      certified by PCAs.  CAs represent, for example,\
    \ particular\n      organizations, particular organizational units (e.g., departments,\n\
    \      groups, sections), or particular geographical areas.\n   RFC 1422 furthermore\
    \ has a name subordination rule which requires\n   that a CA can only issue certificates\
    \ for entities whose names are\n   subordinate (in the X.500 naming tree) to the\
    \ name of the CA itself.\n   The trust associated with a PEM certification path\
    \ is implied by the\n   PCA name. The name subordination rule ensures that CAs\
    \ below the PCA\n   are sensibly constrained as to the set of subordinate entities\
    \ they\n   can certify (e.g., a CA for an organization can only certify entities\n\
    \   in that organization's name tree). Certificate user systems are able\n   to\
    \ mechanically check that the name subordination rule has been\n   followed.\n\
    \   The RFC 1422 uses the X.509 v1 certificate formats. The limitations\n   of\
    \ X.509 v1 required imposition of several structural restrictions to\n   clearly\
    \ associate policy information or restrict the utility of\n   certificates.  These\
    \ restrictions included:\n      (a) a pure top-down hierarchy, with all certification\
    \ paths\n      starting from IPRA;\n      (b) a naming subordination rule restricting\
    \ the names of a CA's\n      subjects; and\n      (c) use of the PCA concept,\
    \ which requires knowledge of individual\n      PCAs to be built into certificate\
    \ chain verification logic.\n      Knowledge of individual PCAs was required to\
    \ determine if a chain\n      could be accepted.\n   With X.509 v3, most of the\
    \ requirements addressed by RFC 1422 can be\n   addressed using certificate extensions,\
    \ without a need to restrict\n   the CA structures used.  In particular, the certificate\
    \ extensions\n   relating to certificate policies obviate the need for PCAs and\
    \ the\n   constraint extensions obviate the need for the name subordination\n\
    \   rule.  As a result, this document supports a more flexible\n   architecture,\
    \ including:\n      (a) Certification paths may start with a public key of a CA\
    \ in a\n      user's own domain, or with the public key of the top of a\n    \
    \  hierarchy.  Starting with the public key of a CA in a user's own\n      domain\
    \ has certain advantages.  In some environments, the local\n      domain is the\
    \ most trusted.\n      (b)  Name constraints may be imposed through explicit inclusion\
    \ of\n      a name constraints extension in a certificate, but are not\n     \
    \ required.\n      (c)  Policy extensions and policy mappings replace the PCA\n\
    \      concept, which permits a greater degree of automation.  The\n      application\
    \ can determine if the certification path is acceptable\n      based on the contents\
    \ of the certificates instead of a priori\n      knowledge of PCAs. This permits\
    \ automation of certificate chain\n      processing.\n3.3  Revocation\n   When\
    \ a certificate is issued, it is expected to be in use for its\n   entire validity\
    \ period.  However, various circumstances may cause a\n   certificate to become\
    \ invalid prior to the expiration of the validity\n   period. Such circumstances\
    \ include change of name, change of\n   association between subject and CA (e.g.,\
    \ an employee terminates\n   employment with an organization), and compromise\
    \ or suspected\n   compromise of the corresponding private key.  Under such\n\
    \   circumstances, the CA needs to revoke the certificate.\n   X.509 defines one\
    \ method of certificate revocation.  This method\n   involves each CA periodically\
    \ issuing a signed data structure called\n   a certificate revocation list (CRL).\
    \  A CRL is a time stamped list\n   identifying revoked certificates which is\
    \ signed by a CA and made\n   freely available in a public repository.  Each revoked\
    \ certificate is\n   identified in a CRL by its certificate serial number. When\
    \ a\n   certificate-using system uses a certificate (e.g., for verifying a\n \
    \  remote user's digital signature), that system not only checks the\n   certificate\
    \ signature and validity but also acquires a suitably-\n   recent CRL and checks\
    \ that the certificate serial number is not on\n   that CRL.  The meaning of \"\
    suitably-recent\" may vary with local\n   policy, but it usually means the most\
    \ recently-issued CRL.  A CA\n   issues a new CRL on a regular periodic basis\
    \ (e.g., hourly, daily, or\n   weekly).  An entry is added to the CRL as part\
    \ of the next update\n   following notification of revocation. An entry may be\
    \ removed from\n   the CRL after appearing on one regularly scheduled CRL issued\
    \ beyond\n   the revoked certificate's validity period.\n   An advantage of this\
    \ revocation method is that CRLs may be\n   distributed by exactly the same means\
    \ as certificates themselves,\n   namely, via untrusted communications and server\
    \ systems.\n   One limitation of the CRL revocation method, using untrusted\n\
    \   communications and servers, is that the time granularity of\n   revocation\
    \ is limited to the CRL issue period.  For example, if a\n   revocation is reported\
    \ now, that revocation will not be reliably\n   notified to certificate-using\
    \ systems until the next periodic CRL is\n   issued -- this may be up to one hour,\
    \ one day, or one week depending\n   on the frequency that the CA issues CRLs.\n\
    \   As with the X.509 v3 certificate format, in order to facilitate\n   interoperable\
    \ implementations from multiple vendors, the X.509 v2 CRL\n   format needs to\
    \ be profiled for Internet use.  It is one goal of this\n   document to specify\
    \ that profile.  However, this profile does not\n   require CAs to issue CRLs.\
    \ Message formats and protocols supporting\n   on-line revocation notification\
    \ may be defined in other PKIX\n   specifications.  On-line methods of revocation\
    \ notification may be\n   applicable in some environments as an alternative to\
    \ the X.509 CRL.\n   On-line revocation checking may significantly reduce the\
    \ latency\n   between a revocation report and the distribution of the information\n\
    \   to relying parties.  Once the CA accepts the report as authentic and\n   valid,\
    \ any query to the on-line service will correctly reflect the\n   certificate\
    \ validation impacts of the revocation.  However, these\n   methods impose new\
    \ security requirements; the certificate validator\n   shall trust the on-line\
    \ validation service while the repository does\n   not need to be trusted.\n3.4\
    \  Operational Protocols\n   Operational protocols are required to deliver certificates\
    \ and CRLs\n   (or status information) to certificate using client systems.\n\
    \   Provision is needed for a variety of different means of certificate\n   and\
    \ CRL delivery, including distribution procedures based on LDAP,\n   HTTP, FTP,\
    \ and X.500.  Operational protocols supporting these\n   functions are defined\
    \ in other PKIX specifications.  These\n   specifications may include definitions\
    \ of message formats and\n   procedures for supporting all of the above operational\
    \ environments,\n   including definitions of or references to appropriate MIME\
    \ content\n   types.\n3.5  Management Protocols\n   Management protocols are required\
    \ to support on-line interactions\n   between PKI user and management entities.\
    \  For example, a management\n   protocol might be used between a CA and a client\
    \ system with which a\n   key pair is associated, or between two CAs which cross-certify\
    \ each\n   other.  The set of functions which potentially need to be supported\n\
    \   by management protocols include:\n      (a)  registration:  This is the process\
    \ whereby a user first makes\n      itself known to a CA (directly, or through\
    \ an RA), prior to that\n      CA issuing  a certificate or certificates for that\
    \ user.\n      (b)  initialization:  Before a client system can operate securely\n\
    \      it is necessary to install key materials which have the\n      appropriate\
    \ relationship with keys stored elsewhere in the\n      infrastructure.  For example,\
    \ the client needs to be securely\n      initialized with the public key and other\
    \ assured information of\n      the trusted CA(s), to be used in validating certificate\
    \ paths.\n      Furthermore, a client typically needs to be initialized with its\n\
    \      own key pair(s).\n      (c)  certification:  This  is the process in which\
    \ a CA issues a\n      certificate for a user's public key, and returns that certificate\n\
    \      to the user's client system and/or posts that certificate in a\n      repository.\n\
    \      (d)  key pair recovery:  As an option, user client key materials\n    \
    \  (e.g., a user's private key used for encryption purposes) may be\n      backed\
    \ up by a CA or a key backup system.  If a user needs to\n      recover these\
    \ backed up key materials (e.g., as a result of a\n      forgotten password or\
    \ a lost key chain file), an on-line protocol\n      exchange may be needed to\
    \ support such recovery.\n      (e)  key pair update:  All key pairs need to be\
    \ updated regularly,\n      i.e., replaced with a new key pair, and new certificates\
    \ issued.\n      (f)  revocation request:  An authorized person advises a CA of\
    \ an\n      abnormal situation requiring certificate revocation.\n      (g)  cross-certification:\
    \  Two CAs exchange information used in\n      establishing a cross-certificate.\
    \ A cross-certificate is a\n      certificate issued by one CA to another CA which\
    \ contains a CA\n      signature key used for issuing certificates.\n   Note that\
    \ on-line protocols are not the only way of implementing the\n   above functions.\
    \  For all functions there are off-line methods of\n   achieving the same result,\
    \ and this specification does not mandate\n   use of on-line protocols.  For example,\
    \ when hardware tokens are\n   used, many of the functions may be achieved as\
    \ part of the physical\n   token delivery.  Furthermore, some of the above functions\
    \ may be\n   combined into one protocol exchange.  In particular, two or more\
    \ of\n   the registration, initialization, and certification functions can be\n\
    \   combined into one protocol exchange.\n   The PKIX series of specifications\
    \ may define a set of standard\n   message formats supporting the above functions\
    \ in future\n   specifications.  In that case, the protocols for conveying these\n\
    \   messages in different environments (e.g., on-line, file transfer, e-\n   mail,\
    \ and WWW) will also be described in those specifications.\n4  Certificate and\
    \ Certificate Extensions Profile\n   This section presents a profile for public\
    \ key certificates that will\n   foster interoperability and a reusable PKI. \
    \ This section is based\n   upon the X.509 v3 certificate format and the standard\
    \ certificate\n   extensions defined in [X.509].  The ISO/IEC/ITU documents use\
    \ the\n   1993 version of ASN.1; while this document uses the 1988 ASN.1\n   syntax,\
    \ the encoded certificate and standard extensions are\n   equivalent.  This section\
    \ also defines private extensions required to\n   support a PKI for the Internet\
    \ community.\n   Certificates may be used in a wide range of applications and\n\
    \   environments covering a broad spectrum of interoperability goals and\n   a\
    \ broader spectrum of operational and assurance requirements.  The\n   goal of\
    \ this document is to establish a common baseline for generic\n   applications\
    \ requiring broad interoperability and limited special\n   purpose requirements.\
    \  In particular, the emphasis will be on\n   supporting the use of X.509 v3 certificates\
    \ for informal Internet\n   electronic mail, IPsec, and WWW applications.\n4.1\
    \  Basic Certificate Fields\n   The X.509 v3 certificate basic syntax is as follows.\
    \  For signature\n   calculation, the certificate is encoded using the ASN.1 distinguished\n\
    \   encoding rules (DER) [X.208].  ASN.1 DER encoding is a tag, length,\n   value\
    \ encoding system for each element.\n   Certificate  ::=  SEQUENCE  {\n      \
    \  tbsCertificate       TBSCertificate,\n        signatureAlgorithm   AlgorithmIdentifier,\n\
    \        signatureValue       BIT STRING  }\n   TBSCertificate  ::=  SEQUENCE\
    \  {\n        version         [0]  EXPLICIT Version DEFAULT v1,\n        serialNumber\
    \         CertificateSerialNumber,\n        signature            AlgorithmIdentifier,\n\
    \        issuer               Name,\n        validity             Validity,\n\
    \        subject              Name,\n        subjectPublicKeyInfo SubjectPublicKeyInfo,\n\
    \        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n          \
    \                   -- If present, version shall be v2 or v3\n        subjectUniqueID\
    \ [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                             -- If\
    \ present, version shall be v2 or v3\n        extensions      [3]  EXPLICIT Extensions\
    \ OPTIONAL\n                             -- If present, version shall be v3\n\
    \        }\n   Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }\n   CertificateSerialNumber\
    \  ::=  INTEGER\n   Validity ::= SEQUENCE {\n        notBefore      Time,\n  \
    \      notAfter       Time }\n   Time ::= CHOICE {\n        utcTime        UTCTime,\n\
    \        generalTime    GeneralizedTime }\n   UniqueIdentifier  ::=  BIT STRING\n\
    \   SubjectPublicKeyInfo  ::=  SEQUENCE  {\n        algorithm            AlgorithmIdentifier,\n\
    \        subjectPublicKey     BIT STRING  }\n   Extensions  ::=  SEQUENCE SIZE\
    \ (1..MAX) OF Extension\n   Extension  ::=  SEQUENCE  {\n        extnID      OBJECT\
    \ IDENTIFIER,\n        critical    BOOLEAN DEFAULT FALSE,\n        extnValue \
    \  OCTET STRING  }\n   The following items describe the X.509 v3 certificate for\
    \ use in the\n   Internet.\n4.1.1  Certificate Fields\n   The Certificate is a\
    \ SEQUENCE of three required fields. The fields\n   are described in detail in\
    \ the following subsections.\n4.1.1.1  tbsCertificate\n   The field contains the\
    \ names of the subject and issuer, a public key\n   associated with the subject,\
    \ a validity period, and other associated\n   information.  The fields are described\
    \ in detail in section 4.1.2;\n   the tbscertificate may also include extensions\
    \ which are described in\n   section 4.2.\n4.1.1.2  signatureAlgorithm\n   The\
    \ signatureAlgorithm field contains the identifier for the\n   cryptographic algorithm\
    \ used by the CA to sign this certificate.\n   Section 7.2 lists the supported\
    \ signature algorithms.\n   An algorithm identifier is defined by the following\
    \ ASN.1 structure:\n   AlgorithmIdentifier  ::=  SEQUENCE  {\n        algorithm\
    \               OBJECT IDENTIFIER,\n        parameters              ANY DEFINED\
    \ BY algorithm OPTIONAL  }\n   The algorithm identifier is used to identify a\
    \ cryptographic\n   algorithm.  The OBJECT IDENTIFIER component identifies the\
    \ algorithm\n   (such as DSA with SHA-1).  The contents of the optional parameters\n\
    \   field will vary according to the algorithm identified. Section 7.2\n   lists\
    \ the supported algorithms for this specification.\n   This field MUST contain\
    \ the same algorithm identifier as the\n   signature field in the sequence tbsCertificate\
    \ (see sec. 4.1.2.3).\n4.1.1.3  signatureValue\n   The signatureValue field contains\
    \ a digital signature computed upon\n   the ASN.1 DER encoded tbsCertificate.\
    \  The ASN.1 DER encoded\n   tbsCertificate is used as the input to the signature\
    \ function. This\n   signature value is then ASN.1 encoded as a BIT STRING and\
    \ included in\n   the Certificate's signature field. The details of this process\
    \ are\n   specified for each of the supported algorithms in Section 7.2.\n   By\
    \ generating this signature, a CA certifies the validity of the\n   information\
    \ in the tbsCertificate field.  In particular, the CA\n   certifies the binding\
    \ between the public key material and the subject\n   of the certificate.\n4.1.2\
    \  TBSCertificate\n   The sequence TBSCertificate contains information associated\
    \ with the\n   subject of the certificate and the CA who issued it.  Every\n \
    \  TBSCertificate contains the names of the subject and issuer, a public\n   key\
    \ associated with the subject, a validity period, a version number,\n   and a\
    \ serial number; some may contain optional unique identifier\n   fields.  The\
    \ remainder of this section describes the syntax and\n   semantics of these fields.\
    \  A TBSCertificate may also include\n   extensions.  Extensions for the Internet\
    \ PKI are described in Section\n   4.2.\n4.1.2.1  Version\n   This field describes\
    \ the version of the encoded certificate.  When\n   extensions are used, as expected\
    \ in this profile, use X.509 version 3\n   (value is 2).  If no extensions are\
    \ present, but a UniqueIdentifier\n   is present, use version 2 (value is 1).\
    \  If only basic fields are\n   present, use version 1 (the value is omitted from\
    \ the certificate as\n   the default value).\n   Implementations SHOULD be prepared\
    \ to accept any version certificate.\n   At a minimum, conforming implementations\
    \ MUST recognize version 3\n   certificates.\n   Generation of version 2 certificates\
    \ is not expected by\n   implementations based on this profile.\n4.1.2.2  Serial\
    \ number\n   The serial number is an integer assigned by the CA to each\n   certificate.\
    \  It MUST be unique for each certificate issued by a\n   given CA (i.e., the\
    \ issuer name and serial number identify a unique\n   certificate).\n4.1.2.3 \
    \ Signature\n   This field contains the algorithm identifier for the algorithm\
    \ used\n   by the CA to sign the certificate.\n   This field MUST contain the\
    \ same algorithm identifier as the\n   signatureAlgorithm field in the sequence\
    \ Certificate (see sec.\n   4.1.1.2).  The contents of the optional parameters\
    \ field will vary\n   according to the algorithm identified.  Section 7.2 lists\
    \ the\n   supported signature algorithms.\n4.1.2.4  Issuer\n   The issuer field\
    \ identifies the entity who has signed and issued the\n   certificate.  The issuer\
    \ field MUST contain a non-empty distinguished\n   name (DN).  The issuer field\
    \ is defined as the X.501 type Name.\n   [X.501] Name is defined by the following\
    \ ASN.1 structures:\n   Name ::= CHOICE {\n     RDNSequence }\n   RDNSequence\
    \ ::= SEQUENCE OF RelativeDistinguishedName\n   RelativeDistinguishedName ::=\n\
    \     SET OF AttributeTypeAndValue\n   AttributeTypeAndValue ::= SEQUENCE {\n\
    \     type     AttributeType,\n     value    AttributeValue }\n   AttributeType\
    \ ::= OBJECT IDENTIFIER\n   AttributeValue ::= ANY DEFINED BY AttributeType\n\
    \   DirectoryString ::= CHOICE {\n         teletexString           TeletexString\
    \ (SIZE (1..MAX)),\n         printableString         PrintableString (SIZE (1..MAX)),\n\
    \         universalString         UniversalString (SIZE (1..MAX)),\n         utf8String\
    \              UTF8String (SIZE (1.. MAX)),\n         bmpString              \
    \ BMPString (SIZE (1..MAX)) }\n   The Name describes a hierarchical name composed\
    \ of attributes, such\n   as country name, and corresponding values, such as US.\
    \  The type of\n   the component AttributeValue is determined by the AttributeType;\
    \ in\n   general it will be a DirectoryString.\n   The DirectoryString type is\
    \ defined as a choice of PrintableString,\n   TeletexString, BMPString, UTF8String,\
    \ and UniversalString.  The\n   UTF8String encoding is the preferred encoding,\
    \ and all certificates\n   issued after December 31, 2003 MUST use the UTF8String\
    \ encoding of\n   DirectoryString (except as noted below).  Until that date, conforming\n\
    \   CAs MUST choose from the following options when creating a\n   distinguished\
    \ name, including their own:\n      (a) if the character set is sufficient, the\
    \ string MAY be\n      represented as a PrintableString;\n      (b) failing (a),\
    \ if the BMPString character set is sufficient the\n      string MAY be represented\
    \ as a BMPString; and\n      (c) failing (a) and (b), the string MUST be represented\
    \ as a\n      UTF8String.  If (a) or (b) is satisfied, the CA MAY still choose\n\
    \      to represent the string as a UTF8String.\n   Exceptions to the December\
    \ 31, 2003 UTF8 encoding requirements are as\n   follows:\n      (a) CAs MAY issue\
    \ \"name rollover\" certificates to support an\n      orderly migration to UTF8String\
    \ encoding.  Such certificates would\n      include the CA's UTF8String encoded\
    \ name as issuer and and the old\n      name encoding as subject, or vice-versa.\n\
    \      (b) As stated in section 4.1.2.6, the subject field MUST be\n      populated\
    \ with a non-empty distinguished name matching the\n      contents of the issuer\
    \ field in all certificates issued by the\n      subject CA regardless of encoding.\n\
    \   The TeletexString and UniversalString are included for backward\n   compatibility,\
    \ and should not be used for certificates for new\n   subjects.  However, these\
    \ types may be used in certificates where the\n   name was previously established.\
    \  Certificate users SHOULD be\n   prepared to receive certificates with these\
    \ types.\n   In addition, many legacy implementations support names encoded in\
    \ the\n   ISO 8859-1 character set (Latin1String) but tag them as\n   TeletexString.\
    \  The Latin1String includes characters used in Western\n   European countries\
    \ which are not part of the TeletexString charcter\n   set.  Implementations that\
    \ process TeletexString SHOULD be prepared\n   to handle the entire ISO 8859-1\
    \ character set.[ISO 8859-1]\n   As noted above, distinguished names are composed\
    \ of attributes.  This\n   specification does not restrict the set of attribute\
    \ types that may\n   appear in names.  However, conforming implementations MUST\
    \ be\n   prepared to receive certificates with issuer names containing the set\n\
    \   of attribute types defined below.  This specification also recommends\n  \
    \ support for additional attribute types.\n   Standard sets of attributes have\
    \ been defined in the X.500 series of\n   specifications.[X.520]  Implementations\
    \ of this specification MUST be\n   prepared to receive the following standard\
    \ attribute types in issuer\n   names: country, organization, organizational-unit,\
    \ distinguished name\n   qualifier, state or province name,  and common name (e.g.,\
    \ \"Susan\n   Housley\").  In addition, implementations of this specification\
    \ SHOULD\n   be prepared to receive the following standard attribute types in\n\
    \   issuer names: locality, title,  surname, given name, initials, and\n   generation\
    \ qualifier (e.g., \"Jr.\", \"3rd\", or \"IV\").  The syntax and\n   associated\
    \ object identifiers (OIDs) for these attribute types are\n   provided in the\
    \ ASN.1 modules in Appendices A and B.\n   In addition, implementations of this\
    \ specification MUST be prepared\n   to receive the domainComponent attribute,\
    \ as defined in [RFC 2247].\n   The Domain (Nameserver) System (DNS) provides\
    \ a hierarchical resource\n   labeling system.  This attribute provides is a convenient\
    \ mechanism\n   for organizations that wish to use DNs that parallel their DNS\
    \ names.\n   This is not a replacement for the dNSName component of the\n   alternative\
    \ name field. Implementations are not required to convert\n   such names into\
    \ DNS names. The syntax and associated OID for this\n   attribute type is provided\
    \ in the ASN.1 modules in Appendices A and\n   B.\n   Certificate users MUST be\
    \ prepared to process the issuer\n   distinguished name and subject distinguished\
    \ name (see sec. 4.1.2.6)\n   fields to perform name chaining for certification\
    \ path validation\n   (see section 6). Name chaining is performed by matching\
    \ the issuer\n   distinguished name in one certificate with the subject name in\
    \ a CA\n   certificate.\n   This specification requires only a subset of the name\
    \ comparison\n   functionality specified in the X.500 series of specifications.\
    \  The\n   requirements for conforming implementations are as follows:\n     \
    \ (a) attribute values encoded in different types (e.g.,\n      PrintableString\
    \ and BMPString) may be assumed to represent\n      different strings;\n     \
    \ (b) attribute values in types other than PrintableString are case\n      sensitive\
    \ (this permits matching of attribute values as binary\n      objects);\n    \
    \  (c) attribute values in PrintableString are not case sensitive\n      (e.g.,\
    \ \"Marianne Swanson\" is the same as \"MARIANNE SWANSON\"); and\n      (d) attribute\
    \ values in PrintableString are compared after\n      removing leading and trailing\
    \ white space and converting internal\n      substrings of one or more consecutive\
    \ white space characters to a\n      single space.\n   These name comparison rules\
    \ permit a certificate user to validate\n   certificates issued using languages\
    \ or encodings unfamiliar to the\n   certificate user.\n   In addition, implementations\
    \ of this specification MAY use these\n   comparison rules to process unfamiliar\
    \ attribute types for name\n   chaining. This allows implementations to process\
    \ certificates with\n   unfamiliar attributes in the issuer name.\n   Note that\
    \ the comparison rules defined in the X.500 series of\n   specifications indicate\
    \ that the character sets used to encode data\n   in distinguished names are irrelevant.\
    \  The characters themselves are\n   compared without regard to encoding. Implementations\
    \ of the profile\n   are permitted to use the comparison algorithm defined in\
    \ the X.500\n   series.  Such an implementation will recognize a superset of name\n\
    \   matches recognized by the algorithm specified above.\n4.1.2.5  Validity\n\
    \   The certificate validity period is the time interval during which the\n  \
    \ CA warrants that it will maintain information about the status of the\n   certificate.\
    \ The field is represented as a SEQUENCE of two dates:\n   the date on which the\
    \ certificate validity period begins (notBefore)\n   and the date on which the\
    \ certificate validity period ends\n   (notAfter).  Both notBefore and notAfter\
    \ may be encoded as UTCTime or\n   GeneralizedTime.\n   CAs conforming to this\
    \ profile MUST always encode certificate\n   validity dates through the year 2049\
    \ as UTCTime; certificate validity\n   dates in 2050 or later MUST be encoded\
    \ as GeneralizedTime.\n4.1.2.5.1  UTCTime\n   The universal time type, UTCTime,\
    \ is a standard ASN.1 type intended\n   for international applications where local\
    \ time alone is not\n   adequate.  UTCTime specifies the year through the two\
    \ low order\n   digits and time is specified to the precision of one minute or\
    \ one\n   second.  UTCTime includes either Z (for Zulu, or Greenwich Mean Time)\n\
    \   or a time differential.\n   For the purposes of this profile, UTCTime values\
    \ MUST be expressed\n   Greenwich Mean Time (Zulu) and MUST include seconds (i.e.,\
    \ times are\n   YYMMDDHHMMSSZ), even where the number of seconds is zero.  Conforming\n\
    \   systems MUST interpret the year field (YY) as follows:\n      Where YY is\
    \ greater than or equal to 50, the year shall be\n      interpreted as 19YY; and\n\
    \      Where YY is less than 50, the year shall be interpreted as 20YY.\n4.1.2.5.2\
    \  GeneralizedTime\n   The generalized time type, GeneralizedTime, is a standard\
    \ ASN.1 type\n   for variable precision representation of time.  Optionally, the\n\
    \   GeneralizedTime field can include a representation of the time\n   differential\
    \ between local and Greenwich Mean Time.\n   For the purposes of this profile,\
    \ GeneralizedTime values MUST be\n   expressed Greenwich Mean Time (Zulu) and\
    \ MUST include seconds (i.e.,\n   times are YYYYMMDDHHMMSSZ), even where the number\
    \ of seconds is zero.\n   GeneralizedTime values MUST NOT include fractional seconds.\n\
    4.1.2.6  Subject\n   The subject field identifies the entity associated with the\
    \ public\n   key stored in the subject public key field.  The subject name may\
    \ be\n   carried in the subject field and/or the subjectAltName extension.  If\n\
    \   the subject is a CA (e.g., the basic constraints extension, as\n   discussed\
    \ in 4.2.1.10, is present and the value of cA is TRUE,) then\n   the subject field\
    \ MUST be populated with a non-empty distinguished\n   name matching the contents\
    \ of the issuer field (see sec. 4.1.2.4) in\n   all certificates issued by the\
    \ subject CA.  If subject naming\n   information is present only in the subjectAltName\
    \ extension (e.g., a\n   key bound only to an email address or URI), then the\
    \ subject name\n   MUST be an empty sequence and the subjectAltName extension\
    \ MUST be\n   critical.\n   Where it is non-empty, the subject field MUST contain\
    \ an X.500\n   distinguished name (DN). The DN MUST be unique for each subject\n\
    \   entity certified by the one CA as defined by the issuer name field. A\n  \
    \ CA may issue more than one certificate with the same DN to the same\n   subject\
    \ entity.\n   The subject name field is defined as the X.501 type Name.\n   Implementation\
    \ requirements for this field are those defined for the\n   issuer field (see\
    \ sec.  4.1.2.4).  When encoding attribute values of\n   type DirectoryString,\
    \ the encoding rules for the issuer field MUST be\n   implemented.  Implementations\
    \ of this specification MUST be prepared\n   to receive subject names containing\
    \ the attribute types required for\n   the issuer field.  Implementations of this\
    \ specification SHOULD be\n   prepared to receive subject names containing the\
    \ recommended\n   attribute types for the issuer field.  The syntax and associated\n\
    \   object identifiers (OIDs) for these attribute types are provided in\n   the\
    \ ASN.1 modules in Appendices A and B.  Implementations of this\n   specification\
    \ MAY use these comparison rules to process unfamiliar\n   attribute types (i.e.,\
    \ for name chaining). This allows\n   implementations to process certificates\
    \ with unfamiliar attributes in\n   the subject name.\n   In addition, legacy\
    \ implementations exist where an RFC 822 name is\n   embedded in the subject distinguished\
    \ name as an EmailAddress\n   attribute.  The attribute value for EmailAddress\
    \ is of type IA5String\n   to permit inclusion of the character '@', which is\
    \ not part of the\n   PrintableString character set.  EmailAddress attribute values\
    \ are not\n   case sensitive (e.g., \"fanfeedback@redsox.com\" is the same as\n\
    \   \"FANFEEDBACK@REDSOX.COM\").\n   Conforming implementations generating new\
    \ certificates with\n   electronic mail addresses MUST use the rfc822Name in the\
    \ subject\n   alternative name field (see sec. 4.2.1.7) to describe such\n   identities.\
    \  Simultaneous inclusion of the EmailAddress attribute in\n   the subject distinguished\
    \ name to support legacy implementations is\n   deprecated but permitted.\n4.1.2.7\
    \  Subject Public Key Info\n   This field is used to carry the public key and\
    \ identify the algorithm\n   with which the key is used. The algorithm is identified\
    \ using the\n   AlgorithmIdentifier structure specified in section 4.1.1.2. The\n\
    \   object identifiers for the supported algorithms and the methods for\n   encoding\
    \ the public key materials (public key and parameters) are\n   specified in section\
    \ 7.3.\n4.1.2.8  Unique Identifiers\n   These fields may only appear if the version\
    \ is 2 or 3 (see sec.\n   4.1.2.1).  The subject and issuer unique identifiers\
    \ are present in\n   the certificate to handle the possibility of reuse of subject\
    \ and/or\n   issuer names over time.  This profile recommends that names not be\n\
    \   reused for different entities and that Internet certificates not make\n  \
    \ use of unique identifiers.  CAs conforming to this profile SHOULD NOT\n   generate\
    \ certificates with unique identifiers.  Applications\n   conforming to this profile\
    \ SHOULD be capable of parsing unique\n   identifiers and making comparisons.\n\
    4.1.2.9  Extensions\n   This field may only appear if the version is 3 (see sec.\
    \ 4.1.2.1).\n   If present, this field is a SEQUENCE of one or more certificate\n\
    \   extensions. The format and content of certificate extensions in the\n   Internet\
    \ PKI is defined in section 4.2.\n4.2  Standard Certificate Extensions\n   The\
    \ extensions defined for X.509 v3 certificates provide methods for\n   associating\
    \ additional attributes with users or public keys and for\n   managing the certification\
    \ hierarchy.  The X.509 v3 certificate\n   format also allows communities to define\
    \ private extensions to carry\n   information unique to those communities.  Each\
    \ extension in a\n   certificate may be designated as critical or non-critical.\
    \  A\n   certificate using system MUST reject the certificate if it encounters\n\
    \   a critical extension it does not recognize; however, a non-critical\n   extension\
    \ may be ignored if it is not recognized.  The following\n   sections present\
    \ recommended extensions used within Internet\n   certificates and standard locations\
    \ for information.  Communities may\n   elect to use additional extensions; however,\
    \ caution should be\n   exercised in adopting any critical extensions in certificates\
    \ which\n   might prevent use in a general context.\n   Each extension includes\
    \ an OID and an ASN.1 structure.  When an\n   extension appears in a certificate,\
    \ the OID appears as the field\n   extnID and the corresponding ASN.1 encoded\
    \ structure is the value of\n   the octet string extnValue.  Only one instance\
    \ of a particular\n   extension may appear in a particular certificate. For example,\
    \ a\n   certificate may contain only one authority key identifier extension\n\
    \   (see sec. 4.2.1.1).  An extension includes the boolean critical, with\n  \
    \ a default value of FALSE.  The text for each extension specifies the\n   acceptable\
    \ values for the critical field.\n   Conforming CAs MUST support key identifiers\
    \ (see sec. 4.2.1.1 and\n   4.2.1.2), basic constraints (see sec. 4.2.1.10), key\
    \ usage (see sec.\n   4.2.1.3), and certificate policies (see sec. 4.2.1.5) extensions.\
    \ If\n   the CA issues certificates with an empty sequence for the subject\n \
    \  field, the CA MUST support the subject alternative name extension\n   (see\
    \ sec. 4.2.1.7).  Support for the remaining extensions is\n   OPTIONAL. Conforming\
    \ CAs may support extensions that are not\n   identified within this specification;\
    \ certificate issuers are\n   cautioned that marking such extensions as critical\
    \ may inhibit\n   interoperability.\n   At a minimum, applications conforming\
    \ to this profile MUST recognize\n   the extensions which must or may be critical\
    \ in this specification.\n   These extensions are:  key usage (see sec. 4.2.1.3),\
    \ certificate\n   policies (see sec. 4.2.1.5), the subject alternative name (see\
    \ sec.\n   4.2.1.7), basic constraints (see sec. 4.2.1.10), name constraints\n\
    \   (see sec. 4.2.1.11), policy constraints (see sec. 4.2.1.12), and\n   extended\
    \ key usage (see sec. 4.2.1.13).\n   In addition, this profile RECOMMENDS application\
    \ support for the\n   authority and subject key identifier (see sec. 4.2.1.1 and\
    \ 4.2.1.2)\n   extensions.\n4.2.1  Standard Extensions\n   This section identifies\
    \ standard certificate extensions defined in\n   [X.509] for use in the Internet\
    \ PKI.  Each extension is associated\n   with an OID defined in [X.509].  These\
    \ OIDs are members of the id-ce\n   arc, which is defined by the following:\n\
    \   id-ce   OBJECT IDENTIFIER ::=  {joint-iso-ccitt(2) ds(5) 29}\n4.2.1.1  Authority\
    \ Key Identifier\n   The authority key identifier extension provides a means of\n\
    \   identifying the public key corresponding to the private key used to\n   sign\
    \ a certificate. This extension is used where an issuer has\n   multiple signing\
    \ keys (either due to multiple concurrent key pairs or\n   due to changeover).\
    \  The identification may be based on either the\n   key identifier (the subject\
    \ key identifier in the issuer's\n   certificate) or on the issuer name and serial\
    \ number.\n   The keyIdentifier field of the authorityKeyIdentifier extension\
    \ MUST\n   be included in all certificates generated by conforming CAs to\n  \
    \ facilitate chain building.  There is one exception; where a CA\n   distributes\
    \ its public key in the form of a \"self-signed\"\n   certificate, the authority\
    \ key identifier may be omitted.  In this\n   case, the subject and authority\
    \ key identifiers would be identical.\n   The value of the keyIdentifier field\
    \ SHOULD be derived from the\n   public key used to verify the certificate's signature\
    \ or a method\n   that generates unique values.  Two common methods for generating\
    \ key\n   identifiers from the public key are described in (sec. 4.2.1.2). One\n\
    \   common method for generating unique values isdescribed in (sec.\n   4.2.1.2).\
    \  Where a key identifier has not been previously\n   established, this specification\
    \ recommends use of one of these\n   methods for generating keyIdentifiers.\n\
    \   This profile recommends support for the key identifier method by all\n   certificate\
    \ users.\n   This extension MUST NOT be marked critical.\n   id-ce-authorityKeyIdentifier\
    \ OBJECT IDENTIFIER ::=  { id-ce 35 }\n   AuthorityKeyIdentifier ::= SEQUENCE\
    \ {\n      keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n \
    \     authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n      authorityCertSerialNumber\
    \ [2] CertificateSerialNumber OPTIONAL  }\n   KeyIdentifier ::= OCTET STRING\n\
    4.2.1.2  Subject Key Identifier\n   The subject key identifier extension provides\
    \ a means of identifying\n   certificates that contain a particular public key.\n\
    \   To facilitate chain building, this extension MUST appear in all con-\n   forming\
    \ CA certificates, that is, all certificates including the\n   basic constraints\
    \ extension (see sec. 4.2.1.10) where the value of cA\n   is TRUE.  The value\
    \ of the subject key identifier MUST be the value\n   placed in the key identifier\
    \ field of the Authority Key Identifier\n   extension (see sec. 4.2.1.1) of certificates\
    \ issued by the subject of\n   this certificate.\n   For CA certificates, subject\
    \ key identifiers SHOULD be derived from\n   the public key or a method that generates\
    \ unique values.  Two common\n   methods for generating key identifiers from the\
    \ public key are:\n      (1) The keyIdentifier is composed of the 160-bit SHA-1\
    \ hash of the\n      value of the BIT STRING subjectPublicKey (excluding the tag,\n\
    \      length, and number of unused bits).\n      (2) The keyIdentifier is composed\
    \ of a four bit type field with\n      the value 0100 followed by the least significant\
    \ 60 bits of the\n      SHA-1 hash of the value of the BIT STRING subjectPublicKey.\n\
    \   One common method for generating unique values is a monotomically\n   increasing\
    \ sequence of integers.\n   For end entity certificates, the subject key identifier\
    \ extension\n   provides a means for identifying certificates containing the\n\
    \   particular public key used in an application. Where an end entity has\n  \
    \ obtained multiple certificates, especially from multiple CAs, the\n   subject\
    \ key identifier provides a means to quickly identify the set\n   of certificates\
    \ containing a particular public key. To assist\n   applications in identificiation\
    \ the appropriate end entity\n   certificate, this extension SHOULD be included\
    \ in all end entity\n   certificates.\n   For end entity certificates, subject\
    \ key identifiers SHOULD be\n   derived from the public key.  Two common methods\
    \ for generating key\n   identifiers from the public key are identifed above.\n\
    \   Where a key identifier has not been previously established, this\n   specification\
    \ recommends use of one of these methods for generating\n   keyIdentifiers.\n\
    \   This extension MUST NOT be marked critical.\n   id-ce-subjectKeyIdentifier\
    \ OBJECT IDENTIFIER ::=  { id-ce 14 }\n   SubjectKeyIdentifier ::= KeyIdentifier\n\
    4.2.1.3  Key Usage\n   The key usage extension defines the purpose (e.g., encipherment,\n\
    \   signature, certificate signing) of the key contained in the\n   certificate.\
    \  The usage restriction might be employed when a key that\n   could be used for\
    \ more than one operation is to be restricted.  For\n   example, when an RSA key\
    \ should be used only for signing, the\n   digitalSignature and/or nonRepudiation\
    \ bits would be asserted.\n   Likewise, when an RSA key should be used only for\
    \ key management, the\n   keyEncipherment bit would be asserted. When used, this\
    \ extension\n   SHOULD be marked critical.\n      id-ce-keyUsage OBJECT IDENTIFIER\
    \ ::=  { id-ce 15 }\n      KeyUsage ::= BIT STRING {\n           digitalSignature\
    \        (0),\n           nonRepudiation          (1),\n           keyEncipherment\
    \         (2),\n           dataEncipherment        (3),\n           keyAgreement\
    \            (4),\n           keyCertSign             (5),\n           cRLSign\
    \                 (6),\n           encipherOnly            (7),\n           decipherOnly\
    \            (8) }\n   Bits in the KeyUsage type are used as follows:\n      The\
    \ digitalSignature bit is asserted when the subject public key\n      is used\
    \ with a digital signature mechanism to support security\n      services other\
    \ than non-repudiation (bit 1), certificate signing\n      (bit 5), or revocation\
    \ information signing (bit 6). Digital\n      signature mechanisms are often used\
    \ for entity authentication and\n      data origin authentication with integrity.\n\
    \      The nonRepudiation bit is asserted when the subject public key is\n   \
    \   used to verify digital signatures used to provide a non-\n      repudiation\
    \ service which protects against the signing entity\n      falsely denying some\
    \ action, excluding certificate or CRL signing.\n      The keyEncipherment bit\
    \ is asserted when the subject public key is\n      used for key transport.  For\
    \ example, when an RSA key is to be\n      used for key management, then this\
    \ bit shall asserted.\n      The dataEncipherment bit is asserted when the subject\
    \ public key\n      is used for enciphering user data, other than cryptographic\
    \ keys.\n      The keyAgreement bit is asserted when the subject public key is\n\
    \      used for key agreement.  For example, when a Diffie-Hellman key is\n  \
    \    to be used for key management, then this bit shall asserted.\n      The keyCertSign\
    \ bit is asserted when the subject public key is\n      used for verifying a signature\
    \ on certificates.  This bit may only\n      be asserted in CA certificates.\n\
    \      The cRLSign bit is asserted when the subject public key is used\n     \
    \ for verifying a signature on revocation information (e.g., a CRL).\n      The\
    \ meaning of the encipherOnly bit is undefined in the absence of\n      the keyAgreement\
    \ bit.  When the encipherOnly bit is asserted and\n      the keyAgreement bit\
    \ is also set, the subject public key may be\n      used only for enciphering\
    \ data while performing key agreement.\n      The meaning of the decipherOnly\
    \ bit is undefined in the absence of\n      the keyAgreement bit.  When the decipherOnly\
    \ bit is asserted and\n      the keyAgreement bit is also set, the subject public\
    \ key may be\n      used only for deciphering data while performing key agreement.\n\
    \   This profile does not restrict the combinations of bits that may be\n   set\
    \ in an instantiation of the keyUsage extension.  However,\n   appropriate values\
    \ for keyUsage extensions for particular algorithms\n   are specified in section\
    \ 7.3.\n4.2.1.4  Private Key Usage Period\n   This profile recommends against\
    \ the use of this extension.  CAs\n   conforming to this profile MUST NOT generate\
    \ certificates with\n   critical private key usage period extensions.\n   The\
    \ private key usage period extension allows the certificate issuer\n   to specify\
    \ a different validity period for the private key than the\n   certificate. This\
    \ extension is intended for use with digital\n   signature keys.  This extension\
    \ consists of two optional components,\n   notBefore and notAfter.  The private\
    \ key associated with the\n   certificate should not be used to sign objects before\
    \ or after the\n   times specified by the two components, respectively. CAs conforming\n\
    \   to this profile MUST NOT generate certificates with private key usage\n  \
    \ period extensions unless at least one of the two components is\n   present.\n\
    \   Where used, notBefore and notAfter are represented as GeneralizedTime\n  \
    \ and MUST be specified and interpreted as defined in section\n   4.1.2.5.2.\n\
    \   id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }\n   PrivateKeyUsagePeriod\
    \ ::= SEQUENCE {\n        notBefore       [0]     GeneralizedTime OPTIONAL,\n\
    \        notAfter        [1]     GeneralizedTime OPTIONAL }\n4.2.1.5  Certificate\
    \ Policies\n   The certificate policies extension contains a sequence of one or\
    \ more\n   policy information terms, each of which consists of an object\n   identifier\
    \ (OID) and optional qualifiers.  These policy information\n   terms indicate\
    \ the policy under which the certificate has been issued\n   and the purposes\
    \ for which the certificate may be used.  Optional\n   qualifiers, which may be\
    \ present, are not expected to change the\n   definition of the policy.\n   Applications\
    \ with specific policy requirements are expected to have a\n   list of those policies\
    \ which they will accept and to compare the\n   policy OIDs in the certificate\
    \ to that list.  If this extension is\n   critical, the path validation software\
    \ MUST be able to interpret this\n   extension (including the optional qualifier),\
    \ or MUST reject the\n   certificate.\n   To promote interoperability, this profile\
    \ RECOMMENDS that policy\n   information terms consist of only an OID.  Where\
    \ an OID alone is\n   insufficient, this profile strongly recommends that use\
    \ of qualifiers\n   be limited to those identified in this section.\n   This specification\
    \ defines two policy qualifier types for use by\n   certificate policy writers\
    \ and certificate issuers. The qualifier\n   types are the CPS Pointer and User\
    \ Notice qualifiers.\n   The CPS Pointer qualifier contains a pointer to a Certification\n\
    \   Practice Statement (CPS) published by the CA.  The pointer is in the\n   form\
    \ of a URI.\n   User notice is intended for display to a relying party when a\n\
    \   certificate is used.  The application software SHOULD display all\n   user\
    \ notices in all certificates of the certification path used,\n   except that\
    \ if a notice is duplicated only one copy need be\n   displayed.  To prevent such\
    \ duplication, this qualifier SHOULD only\n   be present in end-entity certificates\
    \ and CA certificates issued to\n   other organizations.\n   The user notice has\
    \ two optional fields: the noticeRef field and the\n   explicitText field.\n \
    \     The noticeRef field, if used, names an organization and\n      identifies,\
    \ by number, a particular textual statement prepared by\n      that organization.\
    \  For example, it might identify the\n      organization \"CertsRUs\" and notice\
    \ number 1.  In a typical\n      implementation, the application software will\
    \ have a notice file\n      containing the current set of notices for CertsRUs;\
    \ the\n      application will extract the notice text from the file and display\n\
    \      it.  Messages may be multilingual, allowing the software to select\n  \
    \    the particular language message for its own environment.\n      An explicitText\
    \ field includes the textual statement directly in\n      the certificate.  The\
    \ explicitText field is a string with a\n      maximum size of 200 characters.\n\
    \   If both the noticeRef and explicitText options are included in the\n   one\
    \ qualifier and if the application software can locate the notice\n   text indicated\
    \ by the noticeRef option then that text should be\n   displayed; otherwise, the\
    \ explicitText string should be displayed.\n   id-ce-certificatePolicies OBJECT\
    \ IDENTIFIER ::=  { id-ce 32 }\n   certificatePolicies ::= SEQUENCE SIZE (1..MAX)\
    \ OF PolicyInformation\n   PolicyInformation ::= SEQUENCE {\n        policyIdentifier\
    \   CertPolicyId,\n        policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n    \
    \                            PolicyQualifierInfo OPTIONAL }\n   CertPolicyId ::=\
    \ OBJECT IDENTIFIER\n   PolicyQualifierInfo ::= SEQUENCE {\n        policyQualifierId\
    \  PolicyQualifierId,\n        qualifier          ANY DEFINED BY policyQualifierId\
    \ }\n   -- policyQualifierIds for Internet policy qualifiers\n   id-qt       \
    \   OBJECT IDENTIFIER ::=  { id-pkix 2 }\n   id-qt-cps      OBJECT IDENTIFIER\
    \ ::=  { id-qt 1 }\n   id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\n   PolicyQualifierId\
    \ ::=\n        OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\n   Qualifier ::=\
    \ CHOICE {\n        cPSuri           CPSuri,\n        userNotice       UserNotice\
    \ }\n   CPSuri ::= IA5String\n   UserNotice ::= SEQUENCE {\n        noticeRef\
    \        NoticeReference OPTIONAL,\n        explicitText     DisplayText OPTIONAL}\n\
    \   NoticeReference ::= SEQUENCE {\n        organization     DisplayText,\n  \
    \      noticeNumbers    SEQUENCE OF INTEGER }\n   DisplayText ::= CHOICE {\n \
    \       visibleString    VisibleString  (SIZE (1..200)),\n        bmpString  \
    \      BMPString      (SIZE (1..200)),\n        utf8String       UTF8String  \
    \   (SIZE (1..200)) }\n4.2.1.6  Policy Mappings\n   This extension is used in\
    \ CA certificates.  It lists one or more\n   pairs of OIDs; each pair includes\
    \ an issuerDomainPolicy and a\n   subjectDomainPolicy. The pairing indicates the\
    \ issuing CA considers\n   its issuerDomainPolicy equivalent to the subject CA's\n\
    \   subjectDomainPolicy.\n   The issuing CA's users may accept an issuerDomainPolicy\
    \ for certain\n   applications. The policy mapping tells the issuing CA's users\
    \ which\n   policies associated with the subject CA are comparable to the policy\n\
    \   they accept.\n   This extension may be supported by CAs and/or applications,\
    \ and it\n   MUST be non-critical.\n   id-ce-policyMappings OBJECT IDENTIFIER\
    \ ::=  { id-ce 33 }\n   PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE\
    \ {\n        issuerDomainPolicy      CertPolicyId,\n        subjectDomainPolicy\
    \     CertPolicyId }\n4.2.1.7  Subject Alternative Name\n   The subject alternative\
    \ names extension allows additional identities\n   to be bound to the subject\
    \ of the certificate.  Defined options\n   include an Internet electronic mail\
    \ address, a DNS name, an IP\n   address, and a uniform resource identifier (URI).\
    \  Other options\n   exist, including completely local definitions.  Multiple\
    \ name forms,\n   and multiple instances of each name form, may be included. \
    \ Whenever\n   such identities are to be bound into a certificate, the subject\n\
    \   alternative name (or issuer alternative name) extension MUST be used.\n  \
    \ Because the subject alternative name is considered to be\n   definitiviely bound\
    \ to the public key, all parts of the subject\n   alternative name MUST be verified\
    \ by the CA.\n   Further, if the only subject identity included in the certificate\
    \ is\n   an alternative name form (e.g., an electronic mail address), then the\n\
    \   subject distinguished name MUST be empty (an empty sequence), and the\n  \
    \ subjectAltName extension MUST be present. If the subject field\n   contains\
    \ an empty sequence, the subjectAltName extension MUST be\n   marked critical.\n\
    \   When the subjectAltName extension contains an Internet mail address,\n   the\
    \ address MUST be included as an rfc822Name. The format of an\n   rfc822Name is\
    \ an \"addr-spec\" as defined in RFC 822 [RFC 822]. An\n   addr-spec has the form\
    \ \"local-part@domain\". Note that an addr-spec\n   has no phrase (such as a common\
    \ name) before it, has no comment (text\n   surrounded in parentheses) after it,\
    \ and is not surrounded by \"<\" and\n   \">\". Note that while upper and lower\
    \ case letters are allowed in an\n   RFC 822 addr-spec, no significance is attached\
    \ to the case.\n   When the subjectAltName extension contains a iPAddress, the\
    \ address\n   MUST be stored in the octet string in \"network byte order,\" as\n\
    \   specified in RFC 791 [RFC 791]. The least significant bit (LSB) of\n   each\
    \ octet is the LSB of the corresponding byte in the network\n   address. For IP\
    \ Version 4, as specified in RFC 791, the octet string\n   MUST contain exactly\
    \ four octets.  For IP Version 6, as specified in\n   RFC 1883, the octet string\
    \ MUST contain exactly sixteen octets [RFC\n   1883].\n   When the subjectAltName\
    \ extension contains a domain name service\n   label, the domain name MUST be\
    \ stored in the dNSName (an IA5String).\n   The name MUST be in the \"preferred\
    \ name syntax,\" as specified by RFC\n   1034 [RFC 1034]. Note that while upper\
    \ and lower case letters are\n   allowed in domain names, no signifigance is attached\
    \ to the case.  In\n   addition, while the string \" \" is a legal domain name,\
    \ subjectAltName\n   extensions with a dNSName \" \" are not permitted.  Finally,\
    \ the use of\n   the DNS representation for Internet mail addresses (wpolk.nist.gov\n\
    \   instead of wpolk@nist.gov) is not permitted; such identities are to\n   be\
    \ encoded as rfc822Name.\n   When the subjectAltName extension contains a URI,\
    \ the name MUST be\n   stored in the uniformResourceIdentifier (an IA5String).\
    \ The name MUST\n   be a non-relative URL, and MUST follow the URL syntax and\
    \ encoding\n   rules specified in [RFC 1738].  The name must include both a scheme\n\
    \   (e.g., \"http\" or \"ftp\") and a scheme-specific-part.  The scheme-\n   specific-part\
    \ must include a fully qualified domain name or IP\n   address as the host.\n\
    \   As specified in [RFC 1738], the scheme name is not case-sensitive\n   (e.g.,\
    \ \"http\" is equivalent to \"HTTP\").  The host part is also not\n   case-sensitive,\
    \ but other components of the scheme-specific-part may\n   be case-sensitive.\
    \ When comparing URIs, conforming implementations\n   MUST compare the scheme\
    \ and host without regard to case, but assume\n   the remainder of the scheme-specific-part\
    \ is case sensitive.\n   Subject alternative names may be constrained in the same\
    \ manner as\n   subject distinguished names using the name constraints extension\
    \ as\n   described in section 4.2.1.11.\n   If the subjectAltName extension is\
    \ present, the sequence MUST contain\n   at least one entry.  Unlike the subject\
    \ field, conforming CAs MUST\n   NOT issue certificates with subjectAltNames containing\
    \ empty\n   GeneralName fields. For example, an rfc822Name is represented as an\n\
    \   IA5String. While an empty string is a valid IA5String, such an\n   rfc822Name\
    \ is not permitted by this profile.  The behavior of clients\n   that encounter\
    \ such a certificate when processing a certificication\n   path is not defined\
    \ by this profile.\n   Finally, the semantics of subject alternative names that\
    \ include\n   wildcard characters (e.g., as a placeholder for a set of names)\
    \ are\n   not addressed by this specification.  Applications with specific\n \
    \  requirements may use such names but shall define the semantics.\n      id-ce-subjectAltName\
    \ OBJECT IDENTIFIER ::=  { id-ce 17 }\n      SubjectAltName ::= GeneralNames\n\
    \      GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n      GeneralName\
    \ ::= CHOICE {\n           otherName                       [0]     OtherName,\n\
    \           rfc822Name                      [1]     IA5String,\n           dNSName\
    \                         [2]     IA5String,\n           x400Address         \
    \            [3]     ORAddress,\n           directoryName                   [4]\
    \     Name,\n           ediPartyName                    [5]     EDIPartyName,\n\
    \           uniformResourceIdentifier       [6]     IA5String,\n           iPAddress\
    \                       [7]     OCTET STRING,\n           registeredID       \
    \             [8]     OBJECT IDENTIFIER}\n      OtherName ::= SEQUENCE {\n   \
    \        type-id    OBJECT IDENTIFIER,\n           value      [0] EXPLICIT ANY\
    \ DEFINED BY type-id }\n      EDIPartyName ::= SEQUENCE {\n           nameAssigner\
    \            [0]     DirectoryString OPTIONAL,\n           partyName         \
    \      [1]     DirectoryString }\n4.2.1.8  Issuer Alternative Names\n   As with\
    \ 4.2.1.7, this extension is used to associate Internet style\n   identities with\
    \ the certificate issuer. Issuer alternative names MUST\n   be encoded as in 4.2.1.7.\n\
    \   Where present, this extension SHOULD NOT be marked critical.\n      id-ce-issuerAltName\
    \ OBJECT IDENTIFIER ::=  { id-ce 18 }\n      IssuerAltName ::= GeneralNames\n\
    4.2.1.9  Subject Directory Attributes\n   The subject directory attributes extension\
    \ is not recommended as an\n   essential part of this profile, but it may be used\
    \ in local\n   environments.  This extension MUST be non-critical.\n   id-ce-subjectDirectoryAttributes\
    \ OBJECT IDENTIFIER ::=  { id-ce 9 }\n   SubjectDirectoryAttributes ::= SEQUENCE\
    \ SIZE (1..MAX) OF Attribute\n4.2.1.10  Basic Constraints\n   The basic constraints\
    \ extension identifies whether the subject of the\n   certificate is a CA and\
    \ how deep a certification path may exist\n   through that CA.\n   The pathLenConstraint\
    \ field is meaningful only if cA is set to TRUE.\n   In this case, it gives the\
    \ maximum number of CA certificates that may\n   follow this certificate in a\
    \ certification path. A value of zero\n   indicates that only an end-entity certificate\
    \ may follow in the path.\n   Where it appears, the pathLenConstraint field MUST\
    \ be greater than or\n   equal to zero. Where pathLenConstraint does not appear,\
    \ there is no\n   limit to the allowed length of the certification path.\n   This\
    \ extension MUST appear as a critical extension in all CA\n   certificates.  This\
    \ extension SHOULD NOT appear in end entity\n   certificates.\n   id-ce-basicConstraints\
    \ OBJECT IDENTIFIER ::=  { id-ce 19 }\n   BasicConstraints ::= SEQUENCE {\n  \
    \      cA                      BOOLEAN DEFAULT FALSE,\n        pathLenConstraint\
    \       INTEGER (0..MAX) OPTIONAL }\n4.2.1.11  Name Constraints\n   The name constraints\
    \ extension, which MUST be used only in a CA\n   certificate, indicates a name\
    \ space within which all subject names in\n   subsequent certificates in a certification\
    \ path shall be located.\n   Restrictions may apply to the subject distinguished\
    \ name or subject\n   alternative names.  Restrictions apply only when the specified\
    \ name\n   form is present. If no name of the type is in the certificate, the\n\
    \   certificate is acceptable.\n   Restrictions are defined in terms of permitted\
    \ or excluded name\n   subtrees.  Any name matching a restriction in the excludedSubtrees\n\
    \   field is invalid regardless of information appearing in the\n   permittedSubtrees.\
    \  This extension MUST be critical.\n   Within this profile, the minimum and maximum\
    \ fields are not used with\n   any name forms, thus minimum is always zero, and\
    \ maximum is always\n   absent.\n   For URIs, the constraint applies to the host\
    \ part of the name. The\n   constraint may specify a host or a domain.  Examples\
    \ would be\n   \"foo.bar.com\";  and \".xyz.com\".  When the the constraint begins\
    \ with\n   a period, it may be expanded with one or more subdomains.  That is,\n\
    \   the constraint \".xyz.com\" is satisfied by both abc.xyz.com and\n   abc.def.xyz.com.\
    \  However, the constraint \".xyz.com\" is not satisfied\n   by \"xyz.com\". \
    \ When the constraint does not begin with a period, it\n   specifies a host.\n\
    \   A name constraint for Internat mail addresses may specify a\n   particular\
    \ mailbox, all addresses at a particular host, or all\n   mailboxes in a domain.\
    \  To indicate a particular mailbox, the\n   constraint is the complete mail address.\
    \  For example, \"root@xyz.com\"\n   indicates the root mailbox on the host \"\
    xyz.com\". To indicate all\n   Internet mail addresses on a particular host, the\
    \ constraint is\n   specified as the host name.  For example, the constraint \"\
    xyz.com\" is\n   satisfied by any mail address at the host \"xyz.com\". To specify\
    \ any\n   address within a domain, the constraint is specified with a leading\n\
    \   period (as with URIs).  For example, \".xyz.com\" indicates all the\n   Internet\
    \ mail addresses in the domain \"xyz.com\", but Internet mail\n   addresses on\
    \ the host \"xyz.com\".\n   DNS name restrictions are expressed as foo.bar.com.\
    \ Any subdomain\n   satisfies the name constraint. For example, www.foo.bar.com\
    \ would\n   satisfy the constraint but bigfoo.bar.com would not.\n   Legacy implementations\
    \ exist where an RFC 822 name is embedded in the\n   subject distinguished name\
    \ in an attribute of type EmailAddress (see\n   sec. 4.1.2.6). When rfc822 names\
    \ are constrained, but the certificate\n   does not include a subject alternative\
    \ name, the rfc822 name\n   constraint MUST be applied to the attribute of type\
    \ EmailAddress in\n   the subject distinguished name.  The ASN.1 syntax for EmailAddress\n\
    \   and the corresponding OID are supplied in Appendix A and B.\n   Restrictions\
    \ of the form directoryName MUST be applied to the subject\n   field in the certificate\
    \ and to the subjectAltName extensions of type\n   directoryName. Restrictions\
    \ of the form x400Address MUST be applied\n   to subjectAltName extensions of\
    \ type x400Address.\n   When applying restrictions of the form directoryName,\
    \ an\n   implementation MUST compare DN attributes.  At a minimum,\n   implementations\
    \ MUST perform the DN comparison rules specified in\n   Section 4.1.2.4.  CAs\
    \ issuing certificates with a restriction of the\n   form directoryName SHOULD\
    \ NOT rely on implementation of the full ISO\n   DN name comparison algorithm.\
    \  This implies name restrictions shall\n   be stated identically to the encoding\
    \ used in the subject field or\n   subjectAltName extension.\n   The syntax of\
    \ iPAddress MUST be as described in section 4.2.1.7 with\n   the following additions\
    \ specifically for Name Constraints.  For IPv4\n   addresses, the ipAddress field\
    \ of generalName MUST contain eight (8)\n   octets, encoded in the style of RFC\
    \ 1519 (CIDR) to represent an\n   address range.[RFC 1519]  For IPv6 addresses,\
    \ the ipAddress field\n   MUST contain 32 octets similarly encoded.  For example,\
    \ a name\n   constraint for \"class C\" subnet 10.9.8.0 shall be represented as\
    \ the\n   octets 0A 09 08 00 FF FF FF 00, representing the CIDR notation\n   10.9.8.0/255.255.255.0.\n\
    \   The syntax and semantics for name constraints for otherName,\n   ediPartyName,\
    \ and registeredID are not defined by this specification.\n      id-ce-nameConstraints\
    \ OBJECT IDENTIFIER ::=  { id-ce 30 }\n      NameConstraints ::= SEQUENCE {\n\
    \           permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n      \
    \     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n      GeneralSubtrees\
    \ ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n      GeneralSubtree ::= SEQUENCE\
    \ {\n           base                    GeneralName,\n           minimum     \
    \    [0]     BaseDistance DEFAULT 0,\n           maximum         [1]     BaseDistance\
    \ OPTIONAL }\n      BaseDistance ::= INTEGER (0..MAX)\n4.2.1.12  Policy Constraints\n\
    \   The policy constraints extension can be used in certificates issued\n   to\
    \ CAs. The policy constraints extension constrains path validation\n   in two\
    \ ways. It can be used to prohibit policy mapping or require\n   that each certificate\
    \ in a path contain an acceptable policy\n   identifier.\n   If the inhibitPolicyMapping\
    \ field is present, the value indicates the\n   number of additional certificates\
    \ that may appear in the path before\n   policy mapping is no longer permitted.\
    \  For example, a value of one\n   indicates that policy mapping may be processed\
    \ in certificates issued\n   by the subject of this certificate, but not in additional\n\
    \   certificates in the path.\n   If the requireExplicitPolicy field is present,\
    \ subsequent\n   certificates shall include an acceptable policy identifier. The\
    \ value\n   of requireExplicitPolicy indicates the number of additional\n   certificates\
    \ that may appear in the path before an explicit policy is\n   required.  An acceptable\
    \ policy identifier is the identifier of a\n   policy required by the user of\
    \ the certification path or the\n   identifier of a policy which has been declared\
    \ equivalent through\n   policy mapping.\n   Conforming CAs MUST NOT issue certificates\
    \ where policy constraints\n   is a null sequence. That is, at least one of the\
    \ inhibitPolicyMapping\n   field or the requireExplicitPolicy field MUST be present.\
    \ The\n   behavior of clients that encounter a null policy constraints field is\n\
    \   not addressed in this profile.\n   This extension may be critical or non-critical.\n\
    \   id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }\n   PolicyConstraints\
    \ ::= SEQUENCE {\n        requireExplicitPolicy           [0] SkipCerts OPTIONAL,\n\
    \        inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\n   SkipCerts\
    \ ::= INTEGER (0..MAX)\n4.2.1.13  Extended key usage field\n   This field indicates\
    \ one or more purposes for which the certified\n   public key may be used, in\
    \ addition to or in place of the basic\n   purposes indicated in the key usage\
    \ extension field.  This field is\n   defined as follows:\n   id-ce-extKeyUsage\
    \ OBJECT IDENTIFIER ::= {id-ce 37}\n   ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX)\
    \ OF KeyPurposeId\n   KeyPurposeId ::= OBJECT IDENTIFIER\n   Key purposes may\
    \ be defined by any organization with a need. Object\n   identifiers used to identify\
    \ key purposes shall be assigned in\n   accordance with IANA or ITU-T Rec. X.660\
    \ | ISO/IEC/ITU 9834-1.\n   This extension may, at the option of the certificate\
    \ issuer, be\n   either critical or non-critical.\n   If the extension is flagged\
    \ critical, then the certificate MUST be\n   used only for one of the purposes\
    \ indicated.\n   If the extension is flagged non-critical, then it indicates the\n\
    \   intended purpose or purposes of the key, and may be used in finding\n   the\
    \ correct key/certificate of an entity that has multiple\n   keys/certificates.\
    \ It is an advisory field and does not imply that\n   usage of the key is restricted\
    \ by the certification authority to the\n   purpose indicated. Certificate using\
    \ applications may nevertheless\n   require that a particular purpose be indicated\
    \ in order for the\n   certificate to be acceptable to that application.\n   If\
    \ a certificate contains both a critical key usage field and a\n   critical extended\
    \ key usage field, then both fields MUST be processed\n   independently and the\
    \ certificate MUST only be used for a purpose\n   consistent with both fields.\
    \  If there is no purpose consistent with\n   both fields, then the certificate\
    \ MUST NOT be used for any purpose.\n   The following key usage purposes are defined\
    \ by this profile:\n   id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }\n   id-kp-serverAuth\
    \              OBJECT IDENTIFIER ::=   {id-kp 1}\n   -- TLS Web server authentication\n\
    \   -- Key usage bits that may be consistent: digitalSignature,\n   --       \
    \                  keyEncipherment or keyAgreement\n   --\n   id-kp-clientAuth\
    \              OBJECT IDENTIFIER ::=   {id-kp 2}\n   -- TLS Web client authentication\n\
    \   -- Key usage bits that may be consistent: digitalSignature and/or\n   -- \
    \                           keyAgreement\n   --\n   id-kp-codeSigning        \
    \     OBJECT IDENTIFIER ::=   {id-kp 3}\n   -- Signing of downloadable executable\
    \ code\n   -- Key usage bits that may be consistent: digitalSignature\n   --\n\
    \   id-kp-emailProtection         OBJECT IDENTIFIER ::=   {id-kp 4}\n   -- E-mail\
    \ protection\n   -- Key usage bits that may be consistent: digitalSignature,\n\
    \   --                         nonRepudiation, and/or (keyEncipherment\n   --\
    \                         or keyAgreement)\n   --\n   id-kp-timeStamping    OBJECT\
    \ IDENTIFIER ::= { id-kp 8 }\n   -- Binding the hash of an object to a time from\
    \ an agreed-upon time\n   -- source. Key usage bits that may be consistent: digitalSignature,\n\
    \   --                         nonRepudiation\n4.2.1.14  CRL Distribution Points\n\
    \   The CRL distribution points extension identifies how CRL information\n   is\
    \ obtained.  The extension SHOULD be non-critical, but this profile\n   recommends\
    \ support for this extension by CAs and applications.\n   Further discussion of\
    \ CRL management is contained in section 5.\n   If the cRLDistributionPoints extension\
    \ contains a\n   DistributionPointName of type URI, the following semantics MUST\
    \ be\n   assumed: the URI is a pointer to the current CRL for the associated\n\
    \   reasons and will be issued by the associated cRLIssuer.  The expected\n  \
    \ values for the URI are those defined in 4.2.1.7. Processing rules for\n   other\
    \ values are not defined by this specification.  If the\n   distributionPoint\
    \ omits reasons, the CRL MUST include revocations for\n   all reasons. If the\
    \ distributionPoint omits cRLIssuer, the CRL MUST\n   be issued by the CA that\
    \ issued the certificate.\n   id-ce-cRLDistributionPoints OBJECT IDENTIFIER ::=\
    \  { id-ce 31 }\n   cRLDistributionPoints ::= {\n        CRLDistPointsSyntax }\n\
    \   CRLDistPointsSyntax ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\n   DistributionPoint\
    \ ::= SEQUENCE {\n        distributionPoint       [0]     DistributionPointName\
    \ OPTIONAL,\n        reasons                 [1]     ReasonFlags OPTIONAL,\n \
    \       cRLIssuer               [2]     GeneralNames OPTIONAL }\n   DistributionPointName\
    \ ::= CHOICE {\n        fullName                [0]     GeneralNames,\n      \
    \  nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\n   ReasonFlags\
    \ ::= BIT STRING {\n        unused                  (0),\n        keyCompromise\
    \           (1),\n        cACompromise            (2),\n        affiliationChanged\
    \      (3),\n        superseded              (4),\n        cessationOfOperation\
    \    (5),\n        certificateHold         (6) }\n4.2.2  Private Internet Extensions\n\
    \   This section defines one new extension for use in the Internet Public\n  \
    \ Key Infrastructure.  This extension may be used to direct\n   applications to\
    \ identify an on-line validation service supporting the\n   issuing CA.  As the\
    \ information may be available in multiple forms,\n   each extension is a sequence\
    \ of IA5String values, each of which\n   represents a URI.  The URI implicitly\
    \ specifies the location and\n   format of the information and the method for\
    \ obtaining the\n   information.\n   An object identifier is defined for the private\
    \ extension.  The\n   object identifier associated with the private extension\
    \ is defined\n   under the arc id-pe within the id-pkix name space.  Any future\n\
    \   extensions defined for the Internet PKI will also be defined under\n   the\
    \ arc id-pe.\n      id-pkix  OBJECT IDENTIFIER  ::=\n               { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n                       security(5) mechanisms(5) pkix(7)\
    \ }\n      id-pe  OBJECT IDENTIFIER  ::=  { id-pkix 1 }\n4.2.2.1  Authority Information\
    \ Access\n   The authority information access extension indicates how to access\
    \ CA\n   information and services for the issuer of the certificate in which\n\
    \   the extension appears. Information and services may include on-line\n   validation\
    \ services and CA policy data.  (The location of CRLs is not\n   specified in\
    \ this extension; that information is provided by the\n   cRLDistributionPoints\
    \ extension.)  This extension may be included in\n   subject or CA certificates,\
    \ and it MUST be non-critical.\n   id-pe-authorityInfoAccess OBJECT IDENTIFIER\
    \ ::= { id-pe 1 }\n   AuthorityInfoAccessSyntax  ::=\n           SEQUENCE SIZE\
    \ (1..MAX) OF AccessDescription\n   AccessDescription  ::=  SEQUENCE {\n     \
    \      accessMethod          OBJECT IDENTIFIER,\n           accessLocation   \
    \     GeneralName  }\n   id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n   id-ad-caIssuers\
    \ OBJECT IDENTIFIER ::= { id-ad 2 }\n   Each entry in the sequence AuthorityInfoAccessSyntax\
    \ describes the\n   format and location of additional information about the CA\
    \ who issued\n   the certificate in which this extension appears.  The type and\
    \ format\n   of the information is specified by the accessMethod field; the\n\
    \   accessLocation field specifies the location of the information.  The\n   retrieval\
    \ mechanism may be implied by the accessMethod or specified\n   by accessLocation.\n\
    \   This profile defines one OID for accessMethod. The id-ad-caIssuers\n   OID\
    \ is used when the additional information lists CAs that have\n   issued certificates\
    \ superior to the CA that issued the certificate\n   containing this extension.\
    \  The referenced CA Issuers description is\n   intended to aid certificate users\
    \ in the selection of a certification\n   path that terminates at a point trusted\
    \ by the certificate user.\n   When id-ad-caIssuers appears as accessInfoType,\
    \ the accessLocation\n   field describes the referenced description server and\
    \ the access\n   protocol to obtain the referenced description.  The accessLocation\n\
    \   field is defined as a GeneralName, which can take several forms.\n   Where\
    \ the information is available via http, ftp, or ldap,\n   accessLocation MUST\
    \ be a uniformResourceIdentifier.  Where the\n   information is available via\
    \ the directory access protocol (dap),\n   accessLocation MUST be a directoryName.\
    \ When the information is\n   available via electronic mail, accessLocation MUST\
    \ be an rfc822Name.\n   The semantics of other name forms of accessLocation (when\n\
    \   accessMethod is id-ad-caIssuers) are not defined by this\n   specification.\n\
    \   Additional access descriptors may be defined in other PKIX\n   specifications.\n\
    5  CRL and CRL Extensions Profile\n   As described above, one goal of this X.509\
    \ v2 CRL profile is to\n   foster the creation of an interoperable and reusable\
    \ Internet PKI.\n   To achieve this goal, guidelines for the use of extensions\
    \ are\n   specified, and some assumptions are made about the nature of\n   information\
    \ included in the CRL.\n   CRLs may be used in a wide range of applications and\
    \ environments\n   covering a broad spectrum of interoperability goals and an\
    \ even\n   broader spectrum of operational and assurance requirements.  This\n\
    \   profile establishes a common baseline for generic applications\n   requiring\
    \ broad interoperability.  The profile defines a baseline set\n   of information\
    \ that can be expected in every CRL.  Also, the profile\n   defines common locations\
    \ within the CRL for frequently used\n   attributes as well as common representations\
    \ for these attributes.\n   This profile does not define any private Internet\
    \ CRL extensions or\n   CRL entry extensions.\n   Environments with additional\
    \ or special purpose requirements may\n   build on this profile or may replace\
    \ it.\n   Conforming CAs are not required to issue CRLs if other revocation or\n\
    \   certificate status mechanisms are provided.  Conforming CAs that\n   issue\
    \ CRLs MUST issue version 2 CRLs, and CAs MUST include the date\n   by which the\
    \ next CRL will be issued in the nextUpdate field (see\n   sec. 5.1.2.5), the\
    \ CRL number extension (see sec. 5.2.3) and the\n   authority key identifier extension\
    \ (see sec. 5.2.1).  Conforming\n   applications are required to process version\
    \ 1 and 2 CRLs.\n5.1  CRL Fields\n   The X.509 v2 CRL syntax is as follows.  For\
    \ signature calculation,\n   the data that is to be signed is ASN.1 DER encoded.\
    \  ASN.1 DER\n   encoding is a tag, length, value encoding system for each element.\n\
    \   CertificateList  ::=  SEQUENCE  {\n        tbsCertList          TBSCertList,\n\
    \        signatureAlgorithm   AlgorithmIdentifier,\n        signatureValue   \
    \    BIT STRING  }\n   TBSCertList  ::=  SEQUENCE  {\n        version        \
    \         Version OPTIONAL,\n                                     -- if present,\
    \ shall be v2\n        signature               AlgorithmIdentifier,\n        issuer\
    \                  Name,\n        thisUpdate              Time,\n        nextUpdate\
    \              Time OPTIONAL,\n        revokedCertificates     SEQUENCE OF SEQUENCE\
    \  {\n             userCertificate         CertificateSerialNumber,\n        \
    \     revocationDate          Time,\n             crlEntryExtensions      Extensions\
    \ OPTIONAL\n                                           -- if present, shall be\
    \ v2\n                                  }  OPTIONAL,\n        crlExtensions  \
    \         [0]  EXPLICIT Extensions OPTIONAL\n                                \
    \           -- if present, shall be v2\n                                  }\n\
    \   -- Version, Time, CertificateSerialNumber, and Extensions\n   -- are all defined\
    \ in the ASN.1 in section 4.1\n   -- AlgorithmIdentifier is defined in section\
    \ 4.1.1.2\n   The following items describe the use of the X.509 v2 CRL in the\n\
    \   Internet PKI.\n5.1.1  CertificateList Fields\n   The CertificateList is a\
    \ SEQUENCE of three required fields. The\n   fields are described in detail in\
    \ the following subsections.\n5.1.1.1  tbsCertList\n   The first field in the\
    \ sequence is the tbsCertList.  This field is\n   itself a sequence containing\
    \ the name of the issuer, issue date,\n   issue date of the next list, the list\
    \ of revoked certificates, and\n   optional CRL extensions.  Further, each entry\
    \ on the revoked\n   certificate list is defined by a sequence of user certificate\
    \ serial\n   number, revocation date, and optional CRL entry extensions.\n5.1.1.2\
    \  signatureAlgorithm\n   The signatureAlgorithm field contains the algorithm\
    \ identifier for\n   the algorithm used by the CA to sign the CertificateList.\
    \  The field\n   is of type AlgorithmIdentifier, which is defined in section 4.1.1.2.\n\
    \   Section 7.2 lists the supported algorithms for this specification.\n   Conforming\
    \ CAs MUST use the algorithm identifiers presented in\n   section 7.2 when signing\
    \ with a supported signature algorithm.\n   This field MUST contain the same algorithm\
    \ identifier as the\n   signature field in the sequence tbsCertList (see sec.\
    \ 5.1.2.2).\n5.1.1.3  signatureValue\n   The signatureValue field contains a digital\
    \ signature computed upon\n   the ASN.1 DER encoded tbsCertList.  The ASN.1 DER\
    \ encoded tbsCertList\n   is used as the input to the signature function. This\
    \ signature value\n   is then ASN.1 encoded as a BIT STRING and included in the\
    \ CRL's\n   signatureValue field. The details of this process are specified for\n\
    \   each of the supported algorithms in section 7.2.\n5.1.2  Certificate List\
    \ \"To Be Signed\"\n   The certificate list to be signed, or TBSCertList, is a\
    \ SEQUENCE of\n   required and optional fields.  The required fields identify\
    \ the CRL\n   issuer, the algorithm used to sign the CRL, the date and time the\
    \ CRL\n   was issued, and the date and time by which the CA will issue the next\n\
    \   CRL.\n   Optional fields include lists of revoked certificates and CRL\n \
    \  extensions.  The revoked certificate list is optional to support the\n   case\
    \ where a CA has not revoked any unexpired certificates that it\n   has issued.\
    \  The profile requires conforming CAs to use the CRL\n   extension cRLNumber\
    \ in all CRLs issued.\n5.1.2.1  Version\n   This optional field describes the\
    \ version of the encoded CRL.  When\n   extensions are used, as required by this\
    \ profile, this field MUST be\n   present and MUST specify version 2 (the integer\
    \ value is 1).\n5.1.2.2  Signature\n   This field contains the algorithm identifier\
    \ for the algorithm used\n   to sign the CRL.  Section 7.2 lists OIDs for the\
    \ most popular\n   signature algorithms used in the Internet PKI.\n   This field\
    \ MUST contain the same algorithm identifier as the\n   signatureAlgorithm field\
    \ in the sequence CertificateList (see section\n   5.1.1.2).\n5.1.2.3  Issuer\
    \ Name\n   The issuer name identifies the entity who has signed and issued the\n\
    \   CRL.  The issuer identity is carried in the issuer name field.\n   Alternative\
    \ name forms may also appear in the issuerAltName extension\n   (see sec. 5.2.2).\
    \  The issuer name field MUST contain an X.500\n   distinguished name (DN).  The\
    \ issuer name field is defined as the\n   X.501 type Name, and MUST follow the\
    \ encoding rules for the issuer\n   name field in the certificate (see sec. 4.1.2.4).\n\
    5.1.2.4  This Update\n   This field indicates the issue date of this CRL. ThisUpdate\
    \ may be\n   encoded as UTCTime or GeneralizedTime.\n   CAs conforming to this\
    \ profile that issue CRLs MUST encode thisUpdate\n   as UTCTime for dates through\
    \ the year 2049. CAs conforming to this\n   profile that issue CRLs MUST encode\
    \ thisUpdate as GeneralizedTime for\n   dates in the year 2050 or later.\n   Where\
    \ encoded as UTCTime, thisUpdate MUST be specified and\n   interpreted as defined\
    \ in section 4.1.2.5.1.  Where encoded as\n   GeneralizedTime, thisUpdate MUST\
    \ be specified and interpreted as\n   defined in section 4.1.2.5.2.\n5.1.2.5 \
    \ Next Update\n   This field indicates the date by which the next CRL will be\
    \ issued.\n   The next CRL could be issued before the indicated date, but it will\n\
    \   not be issued any later than the indicated date. CAs SHOULD issue\n   CRLs\
    \ with a nextUpdate time equal to or later than all previous CRLs.\n   nextUpdate\
    \ may be encoded as UTCTime or GeneralizedTime.\n   This profile requires inclusion\
    \ of nextUpdate in all CRLs issued by\n   conforming CAs. Note that the ASN.1\
    \ syntax of TBSCertList describes\n   this field as OPTIONAL, which is consistent\
    \ with the ASN.1 structure\n   defined in [X.509]. The behavior of clients processing\
    \ CRLs which\n   omit nextUpdate is not specified by this profile.\n   CAs conforming\
    \ to this profile that issue CRLs MUST encode nextUpdate\n   as UTCTime for dates\
    \ through the year 2049. CAs conforming to this\n   profile that issue CRLs MUST\
    \ encode nextUpdate as GeneralizedTime for\n   dates in the year 2050 or later.\n\
    \   Where encoded as UTCTime, nextUpdate MUST be specified and\n   interpreted\
    \ as defined in section 4.1.2.5.1.  Where encoded as\n   GeneralizedTime, nextUpdate\
    \ MUST be specified and interpreted as\n   defined in section 4.1.2.5.2.\n5.1.2.6\
    \  Revoked Certificates\n   Revoked certificates are listed.  The revoked certificates\
    \ are named\n   by their serial numbers.  Certificates revoked by the CA are uniquely\n\
    \   identified by the certificate serial number.  The date on which the\n   revocation\
    \ occurred is specified.  The time for revocationDate MUST\n   be expressed as\
    \ described in section 5.1.2.4. Additional information\n   may be supplied in\
    \ CRL entry extensions; CRL entry extensions are\n   discussed in section 5.3.\n\
    5.1.2.7  Extensions\n   This field may only appear if the version is 2 (see sec.\
    \ 5.1.2.1).\n   If present, this field is a SEQUENCE of one or more CRL extensions.\n\
    \   CRL extensions are discussed in section 5.2.\n5.2  CRL Extensions\n   The\
    \ extensions defined by ANSI X9 and ISO/IEC/ITU for X.509 v2 CRLs\n   [X.509]\
    \ [X9.55] provide methods for associating additional attributes\n   with CRLs.\
    \  The X.509 v2 CRL format also allows communities to define\n   private extensions\
    \ to carry information unique to those communities.\n   Each extension in a CRL\
    \ may be designated as critical or non-\n   critical.  A CRL validation MUST fail\
    \ if it encounters a critical\n   extension which it does not know how to process.\
    \  However, an\n   unrecognized non-critical extension may be ignored.  The following\n\
    \   subsections present those extensions used within Internet CRLs.\n   Communities\
    \ may elect to include extensions in CRLs which are not\n   defined in this specification.\
    \ However, caution should be exercised\n   in adopting any critical extensions\
    \ in CRLs which might be used in a\n   general context.\n   Conforming CAs that\
    \ issue CRLs are required to include the authority\n   key identifier (see sec.\
    \ 5.2.1) and the CRL number (see sec. 5.2.3)\n   extensions in all CRLs issued.\n\
    5.2.1  Authority Key Identifier\n   The authority key identifier extension provides\
    \ a means of\n   identifying the public key corresponding to the private key used\
    \ to\n   sign a CRL.  The identification can be based on either the key\n   identifier\
    \ (the subject key identifier in the CRL signer's\n   certificate) or on the issuer\
    \ name and serial number. This extension\n   is especially useful where an issuer\
    \ has more than one signing key,\n   either due to multiple concurrent key pairs\
    \ or due to changeover.\n   Conforming CAs MUST use the key identifier method,\
    \ and MUST include\n   this extension in all CRLs issued.\n   The syntax for this\
    \ CRL extension is defined in section 4.2.1.1.\n5.2.2  Issuer Alternative Name\n\
    \   The issuer alternative names extension allows additional identities\n   to\
    \ be associated with the issuer of the CRL.  Defined options include\n   an rfc822\
    \ name (electronic mail address), a DNS name, an IP address,\n   and a URI.  Multiple\
    \ instances of a name and multiple name forms may\n   be included.  Whenever such\
    \ identities are used, the issuer\n   alternative name extension MUST be used.\n\
    \   The issuerAltName extension SHOULD NOT be marked critical.\n   The OID and\
    \ syntax for this CRL extension are defined in section\n   4.2.1.8.\n5.2.3  CRL\
    \ Number\n   The CRL number is a non-critical CRL extension which conveys a\n\
    \   monotonically increasing sequence number for each CRL issued by a CA.\n  \
    \ This extension allows users to easily determine when a particular CRL\n   supersedes\
    \ another CRL.  CAs conforming to this profile MUST include\n   this extension\
    \ in all CRLs.\n   id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }\n   cRLNumber\
    \ ::= INTEGER (0..MAX)\n5.2.4  Delta CRL Indicator\n   The delta CRL indicator\
    \ is a critical CRL extension that identifies a\n   delta-CRL.  The use of delta-CRLs\
    \ can significantly improve\n   processing time for applications which store revocation\
    \ information\n   in a format other than the CRL structure.  This allows changes\
    \ to be\n   added to the local database while ignoring unchanged information that\n\
    \   is already in the local database.\n   When a delta-CRL is issued, the CAs\
    \ MUST also issue a complete CRL.\n   The value of BaseCRLNumber identifies the\
    \ CRL number of the base CRL\n   that was used as the starting point in the generation\
    \ of this delta-\n   CRL.  The delta-CRL contains the changes between the base\
    \ CRL and the\n   current CRL issued along with the delta-CRL.  It is the decision\
    \ of a\n   CA as to whether to provide delta-CRLs.  Again, a delta-CRL MUST NOT\n\
    \   be issued without a corresponding complete CRL.  The value of\n   CRLNumber\
    \ for both the delta-CRL and the corresponding complete CRL\n   MUST be identical.\n\
    \   A CRL user constructing a locally held CRL from delta-CRLs MUST\n   consider\
    \ the constructed CRL incomplete and unusable if the CRLNumber\n   of the received\
    \ delta-CRL is more than one greater than the CRLnumber\n   of the delta-CRL last\
    \ processed.\n   id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }\n\
    \   deltaCRLIndicator ::= BaseCRLNumber\n   BaseCRLNumber ::= CRLNumber\n5.2.5\
    \  Issuing Distribution Point\n   The issuing distribution point is a critical\
    \ CRL extension that\n   identifies the CRL distribution point for a particular\
    \ CRL, and it\n   indicates whether the CRL covers revocation for end entity\n\
    \   certificates only, CA  certificates only, or a limitied set of reason\n  \
    \ codes.  Although the extension is critical, conforming\n   implementations are\
    \ not required to support this extension.\n   The CRL is signed using the CA's\
    \ private key.  CRL Distribution\n   Points do not have their own key pairs. \
    \ If the CRL is stored in the\n   X.500 Directory, it is stored in the Directory\
    \ entry corresponding to\n   the CRL distribution point, which may be different\
    \ than the Directory\n   entry of the CA.\n   The reason codes associated with\
    \ a distribution point shall be\n   specified in onlySomeReasons. If onlySomeReasons\
    \ does not appear, the\n   distribution point shall contain revocations for all\
    \ reason codes.\n   CAs may use CRL distribution points to partition the CRL on\
    \ the basis\n   of compromise and routine revocation.  In this case, the revocations\n\
    \   with reason code keyCompromise (1) and cACompromise (2) appear in one\n  \
    \ distribution point, and the revocations with other reason codes\n   appear in\
    \ another distribution point.\n   Where the issuingDistributionPoint extension\
    \ contains a URL, the\n   following semantics MUST be assumed: the object is a\
    \ pointer to the\n   most current CRL issued by this CA.  The URI schemes ftp,\
    \ http,\n   mailto [RFC1738] and ldap [RFC1778] are defined for this purpose.\n\
    \   The URI MUST be an absolute, not relative, pathname and MUST specify\n   the\
    \ host.\n   id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }\n\
    \   issuingDistributionPoint ::= SEQUENCE {\n        distributionPoint       [0]\
    \ DistributionPointName OPTIONAL,\n        onlyContainsUserCerts   [1] BOOLEAN\
    \ DEFAULT FALSE,\n        onlyContainsCACerts     [2] BOOLEAN DEFAULT FALSE,\n\
    \        onlySomeReasons         [3] ReasonFlags OPTIONAL,\n        indirectCRL\
    \             [4] BOOLEAN DEFAULT FALSE }\n5.3  CRL Entry Extensions\n   The CRL\
    \ entry extensions already defined by ANSI X9 and ISO/IEC/ITU\n   for X.509 v2\
    \ CRLs provide methods for associating additional\n   attributes with CRL entries\
    \ [X.509] [X9.55].  The X.509 v2 CRL format\n   also allows communities to define\
    \ private CRL entry extensions to\n   carry information unique to those communities.\
    \  Each extension in a\n   CRL entry may be designated as critical or non-critical.\
    \  A CRL\n   validation MUST fail if it encounters a critical CRL entry extension\n\
    \   which it does not know how to process.  However, an unrecognized\n   non-critical\
    \ CRL entry extension may be ignored.  The following\n   subsections present recommended\
    \ extensions used within Internet CRL\n   entries and standard locations for information.\
    \  Communities may\n   elect to use additional CRL entry extensions; however,\
    \ caution should\n   be exercised in adopting any critical extensions in CRL entries\
    \ which\n   might be used in a general context.\n   All CRL entry extensions used\
    \ in this specification are non-critical.\n   Support for these extensions is\
    \ optional for conforming CAs and\n   applications.  However, CAs that issue CRLs\
    \ SHOULD include reason\n   codes (see sec. 5.3.1) and invalidity dates (see sec.\
    \ 5.3.3) whenever\n   this information is available.\n5.3.1  Reason Code\n   The\
    \ reasonCode is a non-critical CRL entry extension that identifies\n   the reason\
    \ for the certificate revocation. CAs are strongly\n   encouraged to include meaningful\
    \ reason codes in CRL entries;\n   however, the reason code CRL entry extension\
    \ SHOULD be absent instead\n   of using the unspecified (0) reasonCode value.\n\
    \   id-ce-cRLReason OBJECT IDENTIFIER ::= { id-ce 21 }\n   -- reasonCode ::= {\
    \ CRLReason }\n   CRLReason ::= ENUMERATED {\n        unspecified            \
    \ (0),\n        keyCompromise           (1),\n        cACompromise           \
    \ (2),\n        affiliationChanged      (3),\n        superseded             \
    \ (4),\n        cessationOfOperation    (5),\n        certificateHold        \
    \ (6),\n        removeFromCRL           (8) }\n5.3.2  Hold Instruction Code\n\
    \   The hold instruction code is a non-critical CRL entry extension that\n   provides\
    \ a registered instruction identifier which indicates the\n   action to be taken\
    \ after encountering a certificate that has been\n   placed on hold.\n   id-ce-holdInstructionCode\
    \ OBJECT IDENTIFIER ::= { id-ce 23 }\n   holdInstructionCode ::= OBJECT IDENTIFIER\n\
    \   The following instruction codes have been defined.  Conforming\n   applications\
    \ that process this extension MUST recognize the following\n   instruction codes.\n\
    \   holdInstruction    OBJECT IDENTIFIER ::=\n                    { iso(1) member-body(2)\
    \ us(840) x9-57(10040) 2 }\n   id-holdinstruction-none   OBJECT IDENTIFIER ::=\
    \ {holdInstruction 1}\n   id-holdinstruction-callissuer\n                    \
    \         OBJECT IDENTIFIER ::= {holdInstruction 2}\n   id-holdinstruction-reject\
    \ OBJECT IDENTIFIER ::= {holdInstruction 3}\n   Conforming applications which\
    \ encounter an id-holdinstruction-\n   callissuer MUST call the certificate issuer\
    \ or reject the\n   certificate.  Conforming applications which encounter an id-\n\
    \   holdinstruction-reject MUST reject the certificate. The hold\n   instruction\
    \ id-holdinstruction-none is semantically equivalent to the\n   absence of a holdInstructionCode,\
    \ and its use is strongly deprecated\n   for the Internet PKI.\n5.3.3  Invalidity\
    \ Date\n   The invalidity date is a non-critical CRL entry extension that\n  \
    \ provides the date on which it is known or suspected that the private\n   key\
    \ was compromised or that the certificate otherwise became invalid.\n   This date\
    \ may be earlier than the revocation date in the CRL entry,\n   which is the date\
    \ at which the CA processed the revocation. When a\n   revocation is first posted\
    \ by a CA in a CRL, the invalidity date may\n   precede the date of issue of earlier\
    \ CRLs, but the revocation date\n   SHOULD NOT precede the date of issue of earlier\
    \ CRLs.  Whenever this\n   information is available, CAs are strongly encouraged\
    \ to share it\n   with CRL users.\n   The GeneralizedTime values included in this\
    \ field MUST be expressed\n   in Greenwich Mean Time (Zulu), and MUST be specified\
    \ and interpreted\n   as defined in section 4.1.2.5.2.\n   id-ce-invalidityDate\
    \ OBJECT IDENTIFIER ::= { id-ce 24 }\n   invalidityDate ::=  GeneralizedTime\n\
    5.3.4  Certificate Issuer\n   This CRL entry extension identifies the certificate\
    \ issuer associated\n   with an entry in an indirect CRL, i.e. a CRL that has\
    \ the indirectCRL\n   indicator set in its issuing distribution point extension.\
    \ If this\n   extension is not present on the first entry in an indirect CRL,\
    \ the\n   certificate issuer defaults to the CRL issuer. On subsequent entries\n\
    \   in an indirect CRL, if this extension is not present, the certificate\n  \
    \ issuer for the entry is the same as that for the preceding entry.\n   This field\
    \ is defined as follows:\n   id-ce-certificateIssuer   OBJECT IDENTIFIER ::= {\
    \ id-ce 29 }\n   certificateIssuer ::=     GeneralNames\n   If used by conforming\
    \ CAs that issue CRLs, this extension is always\n   critical.  If an implementation\
    \ ignored this extension it could not\n   correctly attribute CRL entries to certificates.\
    \  This specification\n   RECOMMENDS that implementations recognize this extension.\n\
    6  Certification Path Validation\n   Certification path validation procedures\
    \ for the Internet PKI are\n   based on section 12.4.3 of [X.509].  Certification\
    \ path processing\n   verifies the binding between the subject distinguished name\
    \ and/or\n   subject alternative name and subject public key.  The binding is\n\
    \   limited by constraints which are specified in the certificates which\n   comprise\
    \ the path. The basic constraints and policy constraints\n   extensions allow\
    \ the certification path processing logic to automate\n   the decision making\
    \ process.\n   This section describes an algorithm for validating certification\n\
    \   paths.  Conforming implementations of this specification are not\n   required\
    \ to implement this algorithm, but MUST be functionally\n   equivalent to the\
    \ external behavior resulting from this procedure.\n   Any algorithm may be used\
    \ by a particular implementation so long as\n   it derives the correct result.\n\
    \   In section 6.1, the text describes basic path validation. This text\n   assumes\
    \ that all valid paths begin with certificates issued by a\n   single \"most-trusted\
    \ CA\". The algorithm requires the public key of\n   the CA, the CA's name, the\
    \ validity period of the public key, and any\n   constraints upon the set of paths\
    \ which may be validated using this\n   key.\n   The \"most-trusted CA\" is a\
    \ matter of policy: it could be a root CA in\n   a hierarchical PKI; the CA that\
    \ issued the verifier's own\n   certificate(s); or any other CA in a network PKI.\
    \  The path\n   validation procedure is the same regardless of the choice of \"\
    most-\n   trusted CA.\"\n   section 6.2 describes extensions to the basic path\
    \ validation\n   algorithm. Two specific cases are discussed: the case where paths\
    \ may\n   begin with one of several trusted CAs; and where compatibility with\n\
    \   the PEM architecture is required.\n6.1 Basic Path Validation\n   The text\
    \ assumes that the trusted public key (and related\n   information) is contained\
    \ in a \"self-signed\" certificate. This\n   simplifies the description of the\
    \ path processing procedure.  Note\n   that the signature on the self-signed certificate\
    \ does not provide\n   any security services.  The trusted public key (and related\n\
    \   information) may be obtained in other formats; the information is\n   trusted\
    \ because of other procedures used to obtain and protect it.\n   The goal of path\
    \ validation is to verify the binding between a\n   subject distinguished name\
    \ or subject alternative name and subject\n   public key, as represented in the\
    \ \"end entity\" certificate, based on\n   the public key of the \"most-trusted\
    \ CA\".  This requires obtaining a\n   sequence of certificates that support that\
    \ binding.  The procedures\n   performed to obtain this sequence is outside the\
    \ scope of this\n   section.\n   The following text also assumes that certificates\
    \ do not use subject\n   or unique identifier fields or private critical extensions,\
    \ as\n   recommended within this profile.  However, if these components appear\n\
    \   in certificates, they MUST be processed.  Finally, policy qualifiers\n   are\
    \ also neglected for the sake of clarity.\n   A certification path is a sequence\
    \ of n certificates where:\n      * for all x in {1,(n-1)}, the subject of certificate\
    \ x is the\n      issuer of certificate x+1.\n      * certificate x=1 is the the\
    \ self-signed certificate, and\n      * certificate x=n is the end entity certificate.\n\
    \   This section assumes the following inputs are provided to the path\n   processing\
    \ logic:\n      (a)  a certification path of length n;\n      (b)  a set of initial\
    \ policy identifiers (each comprising a\n      sequence of policy element identifiers),\
    \ which identifies one or\n      more certificate policies, any one of which would\
    \ be acceptable\n      for the purposes of certification path processing, or the\
    \ special\n      value \"any-policy\";\n      (c)  the current date/time (if not\
    \ available internally to the\n      certification path processing module); and\n\
    \      (d)  the time, T, for which the validity of the path should be\n      determined.\
    \  (This may be the current date/time, or some point in\n      the past.)\n  \
    \ From the inputs, the procedure intializes five state variables:\n      (a) \
    \ acceptable policy set:  A set of certificate policy\n      identifiers comprising\
    \ the policy or policies recognized by the\n      public key user together with\
    \ policies deemed equivalent through\n      policy mapping. The initial value\
    \ of the acceptable policy set is\n      the special value \"any-policy\".\n \
    \     (b)  constrained subtrees:  A set of root names defining a set of\n    \
    \  subtrees within which all subject names in subsequent certificates\n      in\
    \ the certification path shall fall. The initial value is\n      \"unbounded\"\
    .\n      (c)  excluded subtrees:  A set of root names defining a set of\n    \
    \  subtrees within which no subject name in subsequent certificates\n      in\
    \ the certification path may fall. The initial value is \"empty\".\n      (d)\
    \  explicit policy: an integer which indicates if an explicit\n      policy identifier\
    \ is required. The integer indicates the first\n      certificate in the path\
    \ where this requirement is imposed. Once\n      set, this variable may be decreased,\
    \ but may not be increased.\n      (That is, if a certificate in the path requires\
    \ explicit policy\n      identifiers, a later certificate can not remove this\
    \ requirement.)\n      The initial value is n+1.\n      (e)  policy mapping: an\
    \ integer which indicates if policy mapping\n      is permitted.  The integer\
    \ indicates the last certificate on which\n      policy mapping may be applied.\
    \  Once set, this variable may be\n      decreased, but may not be increased.\
    \ (That is, if a certificate in\n      the path specifies policy mapping is not\
    \ permitted, it can not be\n      overriden by a later certificate.) The initial\
    \ value is n+1.\n   The actions performed by the path processing software for\
    \ each\n   certificate i=1 through n are described below.  The self-signed\n \
    \  certificate is certificate i=1, the end entity certificate is i=n.\n   The\
    \ processing is performed sequentially, so that processing\n   certificate i affects\
    \ the state variables for processing certificate\n   (i+1). Note that actions\
    \ (h) through (m) are not applied to the end\n   entity certificate (certificate\
    \ n).\n   The path processing actions to be performed are:\n      (a)  Verify\
    \ the basic certificate information, including:\n         (1) the certificate\
    \ was signed using the subject public key\n         from certificate i-1 (in the\
    \ special case i=1, this step may be\n         omitted; if not, use the subject\
    \ public key from the same\n         certificate),\n         (2) the certificate\
    \ validity period includes time T,\n         (3) the certificate had not been\
    \ revoked at time T and is not\n         currently on hold status that commenced\
    \ before time T, (this\n         may be determined by obtaining the appropriate\
    \ CRL or status\n         information, or by out-of-band mechanisms), and\n  \
    \       (4) the subject and issuer names chain correctly (that is, the\n     \
    \    issuer of this certificate was the subject of the previous\n         certificate.)\n\
    \      (b)  Verify that the subject name and subjectAltName extension\n      (critical\
    \ or noncritical) is consistent with the constrained\n      subtrees state variables.\n\
    \      (c)  Verify that the subject name and subjectAltName extension\n      (critical\
    \ or noncritical) is consistent with the excluded subtrees\n      state variables.\n\
    \      (d)  Verify that policy information is consistent with the initial\n  \
    \    policy set:\n         (1) if the explicit policy state variable is less than\
    \ or equal\n         to i, a policy identifier in the certificate shall be in\
    \ the\n         initial policy set; and\n         (2) if the policy mapping variable\
    \ is less than or equal to i,\n         the policy identifier may not be mapped.\n\
    \      (e)  Verify that policy information is consistent with the\n      acceptable\
    \ policy set:\n         (1) if the certificate policies extension is marked critical,\n\
    \         the intersection of the policies extension and the acceptable\n    \
    \     policy set shall be non-null;\n         (2) the acceptable policy set is\
    \ assigned the resulting\n         intersection as its new value.\n      (g) Verify\
    \ that the intersection of the acceptable policy set and\n      the initial policy\
    \ set is non-null.\n      (h)  Recognize and process any other critical extension\
    \ present in\n      the certificate.\n      (i) Verify that the certificate is\
    \ a CA certificate (as specified\n      in a basicConstraints extension or as\
    \ verified out-of-band).\n      (j)  If permittedSubtrees is present in the certificate,\
    \ set the\n      constrained subtrees state variable to the intersection of its\n\
    \      previous value and the value indicated in the extension field.\n      (k)\
    \  If excludedSubtrees is present in the certificate, set the\n      excluded\
    \ subtrees state variable to the union of its previous\n      value and the value\
    \ indicated in the extension field.\n      (l)  If a policy constraints extension\
    \ is included in the\n      certificate, modify the explicit policy and policy\
    \ mapping state\n      variables as follows:\n         (1) If requireExplicitPolicy\
    \ is present and has value r, the\n         explicit policy state variable is\
    \ set to the minimum of its\n         current value and the sum of r and i (the\
    \ current certificate\n         in the sequence).\n         (2) If inhibitPolicyMapping\
    \ is present and has value q, the\n         policy mapping state variable is set\
    \ to the minimum of its\n         current value and the sum of q and i (the current\
    \ certificate\n         in the sequence).\n      (m) If a key usage extension\
    \ is marked critical, ensure the\n      keyCertSign bit is set.\n   If any one\
    \ of the above checks fail, the procedure terminates,\n   returning a failure\
    \ indication and an appropriate reason.  If none of\n   the above checks fail\
    \ on the end-entity certificate, the procedure\n   terminates, returning a success\
    \ indication together with the set of\n   all policy qualifier values encountered\
    \ in the set of certificates.\n6.2 Extending Path Validation\n   The path validation\
    \ algorithm presented in 6.1 is based on several\n   simplifying assumptions (e.g.,\
    \ a single trusted CA that starts all\n   valid paths). This algorithm may be\
    \ extended for cases where the\n   assumptions do not hold.\n   This procedure\
    \ may be extended for multiple trusted CAs by providing\n   a set of self-signed\
    \ certificates to the validation module.  In this\n   case, a valid path could\
    \ begin with any one of the self-signed\n   certificates.  Limitations in the\
    \ trust paths for any particular key\n   may be incorporated into the self-signed\
    \ certificate's extensions. In\n   this way, the self-signed certificates permit\
    \ the path validation\n   module to automatically incorporate local security policy\
    \ and\n   requirements.\n   It is also possible to specify an extended version\
    \ of the above\n   certification path processing procedure which results in default\n\
    \   behavior identical to the rules of PEM [RFC 1422].  In this extended\n   version,\
    \ additional inputs to the procedure are a list of one or more\n   Policy Certification\
    \ Authorities (PCAs) names and an indicator of the\n   position in the certification\
    \ path where the PCA is expected.  At the\n   nominated PCA position, the CA name\
    \ is compared against this list.\n   If a recognized PCA name is found, then a\
    \ constraint of\n   SubordinateToCA is implicitly assumed for the remainder of\
    \ the\n   certification path and processing continues.  If no valid PCA name is\n\
    \   found, and if the certification path cannot be validated on the basis\n  \
    \ of identified policies, then the certification path is considered\n   invalid.\n\
    7  Algorithm Support\n   This section describes cryptographic algorithms which\
    \ may be used\n   with this profile.  The section describes one-way hash functions\
    \ and\n   digital signature algorithms which may be used to sign certificates\n\
    \   and CRLs, and identifies OIDs for public keys contained in a\n   certificate.\n\
    \   Conforming CAs and applications are not required to support the\n   algorithms\
    \ or algorithm identifiers described in this section.\n   However, conforming\
    \ CAs and applications that use the algorithms\n   identified here MUST support\
    \ them as specified.\n7.1  One-way Hash Functions\n   This section identifies\
    \ one-way hash functions for use in the\n   Internet PKI.  One-way hash functions\
    \ are also called message digest\n   algorithms. SHA-1 is the preferred one-way\
    \ hash function for the\n   Internet PKI.  However, PEM uses MD2 for certificates\
    \ [RFC 1422] [RFC\n   1423] and MD5 is used in other legacy applications.  For\
    \ this reason,\n   MD2 and MD5 are included in this profile.\n7.1.1  MD2 One-way\
    \ Hash Function\n   MD2 was developed by Ron Rivest for RSA Data Security. RSA\
    \ Data\n   Security has not placed the MD2 algorithm in the public domain.\n \
    \  Rather, RSA Data Security has granted license to use MD2 for non-\n   commercial\
    \ Internet Privacy-Enhanced Mail.  For this reason, MD2 may\n   continue to be\
    \ used with PEM certificates, but SHA-1 is preferred.\n   MD2 produces a 128-bit\
    \ \"hash\" of the input.  MD2 is fully described\n   in RFC 1319 [RFC 1319].\n\
    \   At the Selected Areas in Cryptography '95 conference in May 1995,\n   Rogier\
    \ and Chauvaud presented an attack on MD2 that can nearly find\n   collisions\
    \ [RC95].  Collisions occur when one can find two different\n   messages that\
    \ generate the same message digest.  A checksum operation\n   in MD2 is the only\
    \ remaining obstacle to the success of the attack.\n   For this reason, the use\
    \ of MD2 for new applications is discouraged.\n   It is still reasonable to use\
    \ MD2 to verify existing signatures, as\n   the ability to find collisions in\
    \ MD2 does not enable an attacker to\n   find new messages having a previously\
    \ computed hash value.\n7.1.2  MD5 One-way Hash Function\n   MD5 was developed\
    \ by Ron Rivest for RSA Data Security. RSA Data\n   Security has placed the MD5\
    \ algorithm in the public domain.  MD5\n   produces a 128-bit \"hash\" of the\
    \ input.  MD5 is fully described in\n   RFC 1321 [RFC 1321].\n   Den Boer and\
    \ Bosselaers [DB94] have found pseudo-collisions for MD5,\n   but there are no\
    \ other known cryptanalytic results.  The use of MD5\n   for new applications\
    \ is discouraged.  It is still reasonable to use\n   MD5 to verify existing signatures.\n\
    7.1.3  SHA-1 One-way Hash Function\n   SHA-1 was developed by the U.S. Government.\
    \  SHA-1 produces a 160-bit\n   \"hash\" of the input. SHA-1 is fully described\
    \ in FIPS 180-1 [FIPS\n   180-1].\n   SHA-1 is the one-way hash function of choice\
    \ for use with both the\n   RSA and DSA signature algorithms (see sec. 7.2).\n\
    7.2  Signature Algorithms\n   Certificates and CRLs described by this standard\
    \ may be signed with\n   any public key signature algorithm.  The certificate\
    \ or CRL indicates\n   the algorithm through an algorithm identifier which appears\
    \ in the\n   signatureAlgorithm field in a Certificate or CertificateList.  This\n\
    \   algorithm identifier is an OID and has optionally associated\n   parameters.\
    \  This section identifies algorithm identifiers and\n   parameters that shall\
    \ be used in the signatureAlgorithm field in a\n   Certificate or CertificateList.\n\
    \   RSA and DSA are the most popular signature algorithms used in the\n   Internet.\
    \  Signature algorithms are always used in conjunction with a\n   one-way hash\
    \ function identified in section 7.1.\n   The signature algorithm and one-way\
    \ hash function used to sign a\n   certificate or CRL is indicated by use of an\
    \ algorithm identifier.\n   An algorithm identifier is an OID, and may include\
    \ associated\n   parameters.  This section identifies OIDS for RSA and DSA.  The\n\
    \   contents of the parameters component for each algorithm vary; details\n  \
    \ are provided for each algorithm.\n   The data to be signed (e.g., the one-way\
    \ hash function output value)\n   is formatted for the signature algorithm to\
    \ be used.  Then, a private\n   key operation (e.g., RSA encryption) is performed\
    \ to generate the\n   signature value.  This signature value is then ASN.1 encoded\
    \ as a BIT\n   STRING and included in the Certificate or CertificateList in the\n\
    \   signature field.\n7.2.1  RSA Signature Algorithm\n   A patent statement regarding\
    \ the RSA algorithm can be found at the\n   end of this profile.\n   The RSA algorithm\
    \ is named for its inventors: Rivest, Shamir, and\n   Adleman.  This profile includes\
    \ three signature algorithms based on\n   the RSA asymmetric encryption algorithm.\
    \ The signature algorithms\n   combine RSA with either the MD2, MD5, or the SHA-1\
    \ one-way hash\n   functions.\n   The signature algorithm with MD2 and the RSA\
    \ encryption algorithm is\n   defined in PKCS #1 [RFC 2313].  As defined in RFC\
    \ 2313, the ASN.1 OID\n   used to identify this signature algorithm is:\n    \
    \    md2WithRSAEncryption OBJECT IDENTIFIER  ::=  {\n            iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1)\n            pkcs-1(1) 2  }\n   The signature\
    \ algorithm with MD5 and the RSA encryption algorithm is\n   defined in PKCS #1\
    \ [RFC 2313].  As defined in RFC 2313, the ASN.1 OID\n   used to identify this\
    \ signature algorithm is:\n        md5WithRSAEncryption OBJECT IDENTIFIER  ::=\
    \  {\n            iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n     \
    \       pkcs-1(1) 4  }\n   The signature algorithm with SHA-1 and the RSA encryption\
    \ algorithm\n   is implemented using the padding and encoding conventions described\n\
    \   in PKCS #1 [RFC 2313]. The message digest is computed using the SHA-1\n  \
    \ hash algorithm.  The ASN.1 object identifier used to identify this\n   signature\
    \ algorithm is:\n        sha-1WithRSAEncryption OBJECT IDENTIFIER  ::=  {\n  \
    \          iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n            pkcs-1(1)\
    \ 5  }\n   When any of these three OIDs appears within the ASN.1 type\n   AlgorithmIdentifier,\
    \ the parameters component of that type shall be\n   the ASN.1 type NULL.\n  \
    \ The RSA signature generation process and the encoding of the result\n   is described\
    \ in detail in RFC 2313.\n7.2.2  DSA Signature Algorithm\n   A patent statement\
    \ regarding the DSA can be found at the end of this\n   profile.\n   The Digital\
    \ Signature Algorithm (DSA) is also called the Digital\n   Signature Standard\
    \ (DSS).  DSA was developed by the U.S. Government,\n   and DSA is used in conjunction\
    \ with the the SHA-1 one-way hash\n   function.  DSA is fully described in FIPS\
    \ 186 [FIPS 186].  The ASN.1\n   OIDs used to identify this signature algorithm\
    \ are:\n           id-dsa-with-sha1 ID  ::=  {\n                   iso(1) member-body(2)\
    \ us(840) x9-57 (10040)\n                   x9cm(4) 3 }\n   Where the id-dsa-with-sha1\
    \ algorithm identifier appears as the\n   algorithm field in an AlgorithmIdentifier,\
    \ the encoding shall omit\n   the parameters field.  That is, the AlgorithmIdentifier\
    \ shall be a\n   SEQUENCE of one component - the OBJECT IDENTIFIER id-dsa-with-sha1.\n\
    \   The DSA parameters in the subjectPublicKeyInfo field of the\n   certificate\
    \ of the issuer shall apply to the verification of the\n   signature.\n   When\
    \ signing, the DSA algorithm generates two values.  These values\n   are commonly\
    \ referred to as r and s.  To easily transfer these two\n   values as one signature,\
    \ they shall be ASN.1 encoded using the\n   following ASN.1 structure:\n     \
    \      Dss-Sig-Value  ::=  SEQUENCE  {\n                   r       INTEGER,\n\
    \                   s       INTEGER  }\n7.3  Subject Public Key Algorithms\n \
    \  Certificates described by this profile may convey a public key for\n   any\
    \ public key algorithm. The certificate indicates the algorithm\n   through an\
    \ algorithm identifier.  This algorithm identifier is an OID\n   and optionally\
    \ associated parameters.\n   This section identifies preferred OIDs and parameters\
    \ for the RSA,\n   DSA, and Diffie-Hellman algorithms.  Conforming CAs shall use\
    \ the\n   identified OIDs when issuing certificates containing public keys for\n\
    \   these algorithms. Conforming applications supporting any of these\n   algorithms\
    \ shall, at a minimum, recognize the OID identified in this\n   section.\n7.3.1\
    \  RSA Keys\n   The OID rsaEncryption identifies RSA public keys.\n        pkcs-1\
    \ OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n                    \
    \   rsadsi(113549) pkcs(1) 1 }\n        rsaEncryption OBJECT IDENTIFIER ::=  {\
    \ pkcs-1 1}\n   The rsaEncryption OID is intended to be used in the algorithm\
    \ field\n   of a value of type AlgorithmIdentifier. The parameters field shall\n\
    \   have ASN.1 type NULL for this algorithm identifier.\n   The RSA public key\
    \ shall be encoded using the ASN.1 type\n   RSAPublicKey:\n      RSAPublicKey\
    \ ::= SEQUENCE {\n         modulus            INTEGER, -- n\n         publicExponent\
    \     INTEGER  -- e -- }\n   where modulus is the modulus n, and publicExponent\
    \ is the public\n   exponent e.  The DER encoded RSAPublicKey is the value of\
    \ the BIT\n   STRING subjectPublicKey.\n   This OID is used in public key certificates\
    \ for both RSA signature\n   keys and RSA encryption keys. The intended application\
    \ for the key\n   may be indicated in the key usage field (see sec. 4.2.1.3).\
    \  The use\n   of a single key for both signature and encryption purposes is not\n\
    \   recommended, but is not forbidden.\n   If the keyUsage extension is present\
    \ in an end entity certificate\n   which conveys an RSA public key, any combination\
    \ of the following\n   values may be present:  digitalSignature; nonRepudiation;\n\
    \   keyEncipherment; and dataEncipherment.  If the keyUsage extension is\n   present\
    \ in a CA certificate which conveys an RSA public key, any\n   combination of\
    \ the following values may be present:\n   digitalSignature; nonRepudiation; keyEncipherment;\
    \ dataEncipherment;\n   keyCertSign; and cRLSign.  However, this specification\
    \ RECOMMENDS\n   that if keyCertSign or cRLSign is present, both keyEncipherment\
    \ and\n   dataEncipherment should not be present.\n7.3.2  Diffie-Hellman Key Exchange\
    \ Key\n   The Diffie-Hellman OID supported by this profile is defined by ANSI\n\
    \   X9.42 [X9.42].\n        dhpublicnumber OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \                  us(840) ansi-x942(10046) number-type(2) 1 }\n   The dhpublicnumber\
    \ OID is intended to be used in the algorithm field\n   of a value of type AlgorithmIdentifier.\
    \ The parameters field of that\n   type, which has the algorithm-specific syntax\
    \ ANY DEFINED BY\n   algorithm, have the ASN.1 type DomainParameters for this\
    \ algorithm.\n        DomainParameters ::= SEQUENCE {\n              p       INTEGER,\
    \ -- odd prime, p=jq +1\n              g       INTEGER, -- generator, g\n    \
    \          q       INTEGER, -- factor of p-1\n              j       INTEGER OPTIONAL,\
    \ -- subgroup factor\n              validationParms  ValidationParms OPTIONAL\
    \ }\n        ValidationParms ::= SEQUENCE {\n              seed             BIT\
    \ STRING,\n              pgenCounter      INTEGER }\n   The fields of type DomainParameters\
    \ have the following meanings:\n      p identifies the prime p defining the Galois\
    \ field;\n      g specifies the generator of the multiplicative subgroup of order\n\
    \      g;\n      q specifies the prime factor of p-1;\n      j optionally specifies\
    \ the value that satisfies the equation\n      p=jq+1 to support the optional\
    \ verification of group parameters;\n      seed optionally specifies the bit string\
    \ parameter used as the\n      seed for the system parameter generation process;\
    \ and\n      pgenCounter optionally specifies the integer value output as part\n\
    \      of the of the system parameter prime generation process.\n   If either\
    \ of the parameter generation components (pgencounter or\n   seed) is provided,\
    \ the other shall be present as well.\n   The Diffie-Hellman public key shall\
    \ be ASN.1 encoded as an INTEGER;\n   this encoding shall be used as the contents\
    \ (i.e., the value) of the\n   subjectPublicKey component (a BIT STRING) of the\
    \ subjectPublicKeyInfo\n   data element.\n      DHPublicKey ::= INTEGER -- public\
    \ key, y = g^x mod p\n   If the keyUsage extension is present in a certificate\
    \ which conveys a\n   DH public key, the following values may be present:  keyAgreement;\n\
    \   encipherOnly; and decipherOnly.  At most one of encipherOnly and\n   decipherOnly\
    \ shall be asserted in keyUsage extension.\n7.3.3  DSA Signature Keys\n   The\
    \ Digital Signature Algorithm (DSA) is also known as the Digital\n   Signature\
    \ Standard (DSS). The DSA OID supported by this profile is\n        id-dsa ID\
    \ ::= { iso(1) member-body(2) us(840) x9-57(10040)\n                  x9cm(4)\
    \ 1 }\n   The id-dsa algorithm syntax includes optional parameters.  These\n \
    \  parameters are commonly referred to as p, q, and g.  When omitted,\n   the\
    \ parameters component shall be omitted entirely. That is, the\n   AlgorithmIdentifier\
    \ shall be a SEQUENCE of one component - the OBJECT\n   IDENTIFIER id-dsa.\n \
    \  If the DSA algorithm parameters are present in the\n   subjectPublicKeyInfo\
    \ AlgorithmIdentifier, the parameters are included\n   using the following ASN.1\
    \ structure:\n        Dss-Parms  ::=  SEQUENCE  {\n            p             INTEGER,\n\
    \            q             INTEGER,\n            g             INTEGER  }\n  \
    \ If the DSA algorithm parameters are absent from the\n   subjectPublicKeyInfo\
    \ AlgorithmIdentifier and the CA signed the\n   subject certificate using DSA,\
    \ then the certificate issuer's DSA\n   parameters apply to the subject's DSA\
    \ key.  If the DSA algorithm\n   parameters are absent from the subjectPublicKeyInfo\n\
    \   AlgorithmIdentifier and the CA signed the subject certificate using a\n  \
    \ signature algorithm other than DSA, then the subject's DSA parameters\n   are\
    \ distributed by other means.  If the subjectPublicKeyInfo\n   AlgorithmIdentifier\
    \ field omits the parameters component and the CA\n   signed the subject with\
    \ a signature algorithm other than DSA, then\n   clients shall reject the certificate.\n\
    \   When signing, DSA algorithm generates two values.  These values are\n   commonly\
    \ referred to as r and s.  To easily transfer these two values\n   as one signature,\
    \ they are ASN.1 encoded using the following ASN.1\n   structure:\n        Dss-Sig-Value\
    \  ::=  SEQUENCE  {\n            r             INTEGER,\n            s       \
    \      INTEGER  }\n   The encoded signature is conveyed as the value of the BIT\
    \ STRING\n   signature in a Certificate or CertificateList.\n   The DSA public\
    \ key shall be ASN.1 DER encoded as an INTEGER; this\n   encoding shall be used\
    \ as the contents (i.e., the value) of the\n   subjectPublicKey component (a BIT\
    \ STRING) of the SubjectPublicKeyInfo\n   data element.\n        DSAPublicKey\
    \ ::= INTEGER -- public key, Y\n   If the keyUsage extension is present in an\
    \ end entity certificate\n   which conveys a DSA public key, any combination of\
    \ the following\n   values may be present:  digitalSignature; and nonRepudiation.\n\
    \   If the keyUsage extension is present in an CA certificate which\n   conveys\
    \ a DSA public key, any combination of the following values may\n   be present:\
    \  digitalSignature; nonRepudiation; keyCertSign; and\n   cRLSign.\n8 References\n\
    \   [FIPS 180-1]  Federal Information Processing Standards Publication\n     \
    \            (FIPS PUB) 180-1, Secure Hash Standard, 17 April 1995.\n        \
    \         [Supersedes FIPS PUB 180 dated 11 May 1993.]\n   [FIPS 186]    Federal\
    \ Information Processing Standards Publication\n                 (FIPS PUB) 186,\
    \ Digital Signature Standard, 18 May\n                 1994.\n   [RC95]      \
    \  Rogier, N. and Chauvaud, P., \"The compression function\n                 of\
    \ MD2 is not collision free,\" Presented at Selected\n                 Areas in\
    \ Cryptography '95, May 1995.\n   [RFC 791]     Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n                 September 1981.\n   [RFC 822]     Crocker,\
    \ D., \"Standard for the format of ARPA Internet\n                 text messages\"\
    , STD 11, RFC 822, August 1982.\n   [RFC 1034]    Mockapetris, P., \"Domain names\
    \ - concepts and\n                 facilities\", STD 13, RFC 1034, November 1987.\n\
    \   [RFC 1319]    Kaliski, B., \"The MD2 Message-Digest Algorithm,\" RFC\n   \
    \              1319, April 1992.\n   [RFC 1321]    Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm,\" RFC\n                 1321, April 1992.\n   [RFC 1422]    Kent,\
    \ S.,  \"Privacy Enhancement for Internet Electronic\n                 Mail: Part\
    \ II: Certificate-Based Key Management,\" RFC\n                 1422, February\
    \ 1993.\n   [RFC 1423]    Balenson, D., \"Privacy Enhancement for Internet\n \
    \                Electronic Mail: Part III: Algorithms, Modes, and\n         \
    \        Identifiers,\" RFC 1423, February 1993.\n   [RFC 1519]    Fuller, V.,\
    \ Li, T., Yu, J. and K. Varadhan. \"Classless\n                 Inter-Domain Routing\
    \ (CIDR): an Address Assignment and\n                 Aggregation Strategy\",\
    \ RFC 1519, September 1993.\n   [RFC 1738]    Berners-Lee, T., Masinter L., and\
    \ M. McCahill.\n                 \"Uniform Resource Locators (URL)\", RFC 1738,\
    \ December\n                 1994.\n   [RFC 1778]    Howes, T., Kille S., Yeong,\
    \ W. and C. Robbins. \"The\n                 String Representation of Standard\
    \ Attribute Syntaxes,\"\n                 RFC 1778, March 1995.\n   [RFC 1883]\
    \    Deering, S. and R. Hinden. \"Internet Protocol, Version\n               \
    \  6 (IPv6) Specification\", RFC 1883, December 1995.\n   [RFC 2119]    Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                 Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC 2247]    Kille, S., Wahl, M., Grimstad,\
    \ A., Huber, R. and S.\n                 Sataluri. \"Using Domains in LDAP/X.500\
    \ Distinguished\n                 Names\", RFC 2247, January 1998.\n   [RFC 2277]\
    \    Alvestrand, H., \"IETF Policy on Character Sets and\n                 Languages\"\
    , RFC 2277, January 1998.\n   [RFC 2279]    Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n                 10646\", RFC 2279, January 1998.\n   [RFC 2313]\
    \    Kaliski, B., \"PKCS #1: RSA Encryption Version 1.5\", RFC\n             \
    \    2313, March 1998.\n   [SDN.701]     SDN.701, \"Message Security Protocol\
    \ 4.0\", Revision A\n                 1997-02-06.\n   [X.208]       CCITT Recommendation\
    \ X.208: Specification of Abstract\n                 Syntax Notation One (ASN.1),\
    \ 1988.\n   [X.501]       ITU-T Recommendation X.501: Information Technology -\n\
    \                 Open Systems Interconnection - The Directory: Models,\n    \
    \             1993.\n   [X.509]       ITU-T Recommendation X.509 (1997 E): Information\n\
    \                 Technology - Open Systems Interconnection - The\n          \
    \       Directory: Authentication Framework, June 1997.\n   [X.520]       ITU-T\
    \ Recommendation X.520: Information Technology -\n                 Open Systems\
    \ Interconnection - The Directory: Selected\n                 Attribute Types,\
    \ 1993.\n   [X9.42]       ANSI X9.42-199x, Public Key Cryptography for The\n \
    \                Financial Services Industry: Agreement of Symmetric\n       \
    \          Algorithm Keys Using Diffie-Hellman (Working Draft),\n            \
    \     December 1997.\n   [X9.55]       ANSI X9.55-1995, Public Key Cryptography\
    \ For The\n                 Financial Services Industry: Extensions To Public\
    \ Key\n                 Certificates And Certificate Revocation Lists, 8\n   \
    \              December, 1995.\n   [X9.57]        ANSI X9.57-199x, Public Key\
    \ Cryptography For The\n                 Financial Services Industry: Certificate\
    \ Management\n                 (Working Draft), 21 June, 1996.\n9  Intellectual\
    \ Property Rights\n   The IETF has been notified of intellectual property rights\
    \ claimed in\n   regard to some or all of the specification contained in this\n\
    \   document.  For more information consult the online list of claimed\n   rights.\n\
    \   The IETF takes no position regarding the validity or scope of any\n   intellectual\
    \ property or other rights that might be claimed to\n   pertain to the implementation\
    \ or use of the technology described in\n   this document or the extent to which\
    \ any license under such rights\n   might or might not be available; neither does\
    \ it represent that it\n   has made any effort to identify any such rights. Information\
    \ on the\n   IETF's procedures with respect to rights in standards-track and\n\
    \   standards-related documentation can be found in BCP-11. Copies of\n   claims\
    \ of rights made available for publication and any assurances of\n   licenses\
    \ to be made available, or the result of an attempt made to\n   obtain a general\
    \ license or permission for the use of such\n   proprietary rights by implementors\
    \ or users of this specification can\n   be obtained from the IETF Secretariat.\n\
    10  Security Considerations\n   The majority of this specification is devoted\
    \ to the format and\n   content of certificates and CRLs.  Since certificates\
    \ and CRLs are\n   digitally signed, no additional integrity service is necessary.\n\
    \   Neither certificates nor CRLs need be kept secret, and unrestricted\n   and\
    \ anonymous access to certificates and CRLs has no security\n   implications.\n\
    \   However, security factors outside the scope of this specification\n   will\
    \ affect the assurance provided to certificate users.  This\n   section highlights\
    \ critical issues that should be considered by\n   implementors, administrators,\
    \ and users.\n   The procedures performed by CAs and RAs to validate the binding\
    \ of\n   the subject's identity of their public key greatly affect the\n   assurance\
    \ that should be placed in the certificate.  Relying parties\n   may wish to review\
    \ the CA's certificate practice statement.  This may\n   be particularly important\
    \ when issuing certificates to other CAs.\n   The use of a single key pair for\
    \ both signature and other purposes is\n   strongly discouraged. Use of separate\
    \ key pairs for signature and key\n   management provides several benefits to\
    \ the users. The ramifications\n   associated with loss or disclosure of a signature\
    \ key are different\n   from loss or disclosure of a key management key. Using\
    \ separate key\n   pairs permits a balanced and flexible response.  Similarly,\
    \ different\n   validity periods or key lengths for each key pair may be appropriate\n\
    \   in some application environments. Unfortunately, some legacy\n   applications\
    \ (e.g., SSL) use a single key pair for signature and key\n   management.\n  \
    \ The protection afforded private keys is a critical factor in\n   maintaining\
    \ security.  On a small scale, failure of users to protect\n   their private keys\
    \ will permit an attacker to masquerade as them, or\n   decrypt their personal\
    \ information. On a larger scale, compromise of\n   a CA's private signing key\
    \ may have a catastrophic effect.  If an\n   attacker obtains the private key\
    \ unnoticed, the attacker may issue\n   bogus certificates and CRLs.  Existence\
    \ of bogus certificates and\n   CRLs will undermine confidence in the system.\
    \ If the compromise is\n   detected, all certificates issued to the CA shall be\
    \ revoked,\n   preventing services between its users and users of other CAs.\n\
    \   Rebuilding after such a compromise will be problematic, so CAs are\n   advised\
    \ to implement a combination of strong technical measures\n   (e.g., tamper-resistant\
    \ cryptographic modules) and appropriate\n   management procedures (e.g., separation\
    \ of duties) to avoid such an\n   incident.\n   Loss of a CA's private signing\
    \ key may also be problematic.  The CA\n   would not be able to produce CRLs or\
    \ perform normal key rollover.\n   CAs are advised to maintain secure backup for\
    \ signing keys.  The\n   security of the key backup procedures is a critical factor\
    \ in\n   avoiding key compromise.\n   The availability and freshness of revocation\
    \ information will affect\n   the degree of assurance that should be placed in\
    \ a certificate.\n   While certificates expire naturally, events may occur during\
    \ its\n   natural lifetime which negate the binding between the subject and\n\
    \   public key.  If revocation information is untimely or unavailable,\n   the\
    \ assurance associated with the binding is clearly reduced.\n   Similarly, implementations\
    \ of the Path Validation mechanism described\n   in section 6 that omit revocation\
    \ checking provide less assurance\n   than those that support it.\n   The path\
    \ validation algorithm depends on the certain knowledge of the\n   public keys\
    \ (and other information) about one or more trusted CAs.\n   The decision to trust\
    \ a CA is an important decision as it ultimately\n   determines the trust afforded\
    \ a certificate. The authenticated\n   distribution of trusted CA public keys\
    \ (usually in the form of a\n   \"self-signed\" certificate) is a security critical\
    \ out of band process\n   that is beyond the scope of this specification.\n  \
    \ In addition, where a key compromise or CA failure occurs for a\n   trusted CA,\
    \ the user will need to modify the information provided to\n   the path validation\
    \ routine.  Selection of too many trusted CAs will\n   make the trusted CA information\
    \ difficult to maintain.  On the other\n   hand, selection of only one trusted\
    \ CA may limit users to a closed\n   community of users until a global PKI emerges.\n\
    \   The quality of implementations that process certificates may also\n   affect\
    \ the degree of assurance provided.  The path validation\n   algorithm described\
    \ in section 6 relies upon the integrity of the\n   trusted CA information, and\
    \ especially the integrity of the public\n   keys associated with the trusted\
    \ CAs.  By substituting public keys\n   for which an attacker has the private\
    \ key, an attacker could trick\n   the user into accepting false certificates.\n\
    \   The binding between a key and certificate subject cannot be stronger\n   than\
    \ the cryptographic module implementation and algorithms used to\n   generate\
    \ the signature.  Short key lengths or weak hash algorithms\n   will limit the\
    \ utility of a certificate.  CAs are encouraged to note\n   advances in cryptology\
    \ so they can employ strong cryptographic\n   techniques.  In addition, CAs should\
    \ decline to issue certificates to\n   CAs or end entities that generate weak\
    \ signatures.\n   Inconsistent application of name comparison rules may result\
    \ in\n   acceptance of invalid X.509 certification paths, or rejection of\n  \
    \ valid ones.  The X.500 series of specifications defines rules for\n   comparing\
    \ distinguished names require comparison of strings without\n   regard to case,\
    \ character set, multi-character white space substring,\n   or leading and trailing\
    \ white space.  This specification relaxes\n   these requirements, requiring support\
    \ for binary comparison at a\n   minimum.\n   CAs shall encode the distinguished\
    \ name in the subject field of a CA\n   certificate identically to the distinguished\
    \ name in the issuer field\n   in certificates issued by the latter CA.  If CAs\
    \ use different\n   encodings, implementations of this specification may fail\
    \ to\n   recognize name chains for paths that include this certificate.  As a\n\
    \   consequence, valid paths could be rejected.\n   In addition, name constraints\
    \ for distinguished names shall be stated\n   identically to the encoding used\
    \ in the subject field or\n   subjectAltName extension.  If not, (1) name constraints\
    \ stated as\n   excludedSubTrees will not match and invalid paths will be accepted\n\
    \   and (2) name constraints expressed as permittedSubtrees will not\n   match\
    \ and valid paths will be rejected.  To avoid acceptance of\n   invalid paths,\
    \ CAs should state name constraints for distinguished\n   names as permittedSubtrees\
    \ where ever possible.\nAppendix A. Psuedo-ASN.1 Structures and OIDs\n   This\
    \ section describes data objects used by conforming PKI components\n   in an \"\
    ASN.1-like\" syntax.  This syntax is a hybrid of the 1988 and\n   1993 ASN.1 syntaxes.\
    \  The 1988 ASN.1 syntax is augmented with 1993\n   UNIVERSAL Types UniversalString,\
    \ BMPString and UTF8String.\n   The ASN.1 syntax does not permit the inclusion\
    \ of type statements in\n   the ASN.1 module, and the 1993 ASN.1 standard does\
    \ not permit use of\n   the new UNIVERSAL types in modules using the 1988 syntax.\
    \  As a\n   result, this module does not conform to either version of the ASN.1\n\
    \   standard.\n   This appendix may be converted into 1988 ASN.1 by replacing\
    \ the\n   defintions for the UNIVERSAL Types with the 1988 catch-all \"ANY\".\n\
    A.1 Explicitly Tagged Module, 1988 Syntax\nPKIX1Explicit88 {iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n  security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-explicit-88(1)}\n\
    DEFINITIONS EXPLICIT TAGS ::=\nBEGIN\n-- EXPORTS ALL --\n-- IMPORTS NONE --\n\
    -- UNIVERSAL Types defined in '93 and '98 ASN.1\n-- but required by this specification\n\
    UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING\n        -- UniversalString\
    \ is defined in ASN.1:1993\nBMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING\n\
    \      -- BMPString is the subtype of UniversalString and models\n       -- the\
    \ Basic Multilingual Plane of ISO/IEC/ITU 10646-1\nUTF8String ::= [UNIVERSAL 12]\
    \ IMPLICIT OCTET STRING\n        -- The content of this type conforms to RFC 2279.\n\
    --\n-- PKIX specific OIDs\nid-pkix  OBJECT IDENTIFIER  ::=\n         { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n                    security(5)\
    \ mechanisms(5) pkix(7) }\n-- PKIX arcs\nid-pe OBJECT IDENTIFIER  ::=  { id-pkix\
    \ 1 }\n        -- arc for private certificate extensions\nid-qt OBJECT IDENTIFIER\
    \ ::= { id-pkix 2 }\n        -- arc for policy qualifier types\nid-kp OBJECT IDENTIFIER\
    \ ::= { id-pkix 3 }\n        -- arc for extended key purpose OIDS\nid-ad OBJECT\
    \ IDENTIFIER ::= { id-pkix 48 }\n        -- arc for access descriptors\n-- policyQualifierIds\
    \ for Internet policy qualifiers\nid-qt-cps      OBJECT IDENTIFIER ::=  { id-qt\
    \ 1 }\n        -- OID for CPS qualifier\nid-qt-unotice  OBJECT IDENTIFIER ::=\
    \  { id-qt 2 }\n        -- OID for user notice qualifier\n-- access descriptor\
    \ definitions\nid-ad-ocsp      OBJECT IDENTIFIER ::= { id-ad 1 }\nid-ad-caIssuers\
    \ OBJECT IDENTIFIER ::= { id-ad 2 }\n-- attribute data types --\nAttribute   \
    \    ::=     SEQUENCE {\n        type            AttributeType,\n        values\
    \  SET OF AttributeValue\n                -- at least one value is required --\
    \ }\nAttributeType           ::=   OBJECT IDENTIFIER\nAttributeValue         \
    \ ::=   ANY\nAttributeTypeAndValue           ::=     SEQUENCE {\n        type\
    \    AttributeType,\n        value   AttributeValue }\n-- suggested naming attributes:\
    \ Definition of the following\n--  information object set may be augmented to\
    \ meet local\n--  requirements.  Note that deleting members of the set may\n--\
    \  prevent interoperability with conforming implementations.\n--  presented in\
    \ pairs: the AttributeType followed by the\n--  type definition for the corresponding\
    \ AttributeValue\n--Arc for standard naming attributes\nid-at           OBJECT\
    \ IDENTIFIER ::= {joint-iso-ccitt(2) ds(5) 4}\n-- Attributes of type NameDirectoryString\n\
    id-at-name              AttributeType   ::=     {id-at 41}\nid-at-surname    \
    \       AttributeType   ::=     {id-at 4}\nid-at-givenName         AttributeType\
    \   ::=     {id-at 42}\nid-at-initials          AttributeType   ::=     {id-at\
    \ 43}\nid-at-generationQualifier       AttributeType   ::=     {id-at 44}\nX520name\
    \        ::= CHOICE {\n      teletexString         TeletexString (SIZE (1..ub-name)),\n\
    \      printableString       PrintableString (SIZE (1..ub-name)),\n      universalString\
    \       UniversalString (SIZE (1..ub-name)),\n      utf8String            UTF8String\
    \ (SIZE (1..ub-name)),\n      bmpString             BMPString (SIZE(1..ub-name))\
    \   }\n--\nid-at-commonName        AttributeType   ::=     {id-at 3}\nX520CommonName\
    \  ::=      CHOICE {\n      teletexString         TeletexString (SIZE (1..ub-common-name)),\n\
    \      printableString       PrintableString (SIZE (1..ub-common-name)),\n   \
    \   universalString       UniversalString (SIZE (1..ub-common-name)),\n      utf8String\
    \            UTF8String (SIZE (1..ub-common-name)),\n      bmpString         \
    \    BMPString (SIZE(1..ub-common-name))   }\n--\nid-at-localityName      AttributeType\
    \   ::=     {id-at 7}\nX520LocalityName ::= CHOICE {\n      teletexString    \
    \   TeletexString (SIZE (1..ub-locality-name)),\n      printableString     PrintableString\
    \ (SIZE (1..ub-locality-name)),\n      universalString     UniversalString (SIZE\
    \ (1..ub-locality-name)),\n      utf8String          UTF8String (SIZE (1..ub-locality-name)),\n\
    \      bmpString           BMPString (SIZE(1..ub-locality-name))   }\n--\nid-at-stateOrProvinceName\
    \       AttributeType   ::=     {id-at 8}\nX520StateOrProvinceName         ::=\
    \ CHOICE {\n      teletexString       TeletexString (SIZE (1..ub-state-name)),\n\
    \      printableString     PrintableString (SIZE (1..ub-state-name)),\n      universalString\
    \     UniversalString (SIZE (1..ub-state-name)),\n      utf8String          UTF8String\
    \ (SIZE (1..ub-state-name)),\n      bmpString           BMPString (SIZE(1..ub-state-name))\
    \   }\n--\nid-at-organizationName          AttributeType   ::=     {id-at 10}\n\
    X520OrganizationName ::= CHOICE {\n  teletexString     TeletexString (SIZE (1..ub-organization-name)),\n\
    \  printableString   PrintableString (SIZE (1..ub-organization-name)),\n  universalString\
    \   UniversalString (SIZE (1..ub-organization-name)),\n  utf8String        UTF8String\
    \ (SIZE (1..ub-organization-name)),\n  bmpString         BMPString (SIZE(1..ub-organization-name))\
    \   }\n--\nid-at-organizationalUnitName    AttributeType   ::=     {id-at 11}\n\
    X520OrganizationalUnitName ::= CHOICE {\n teletexString    TeletexString (SIZE\
    \ (1..ub-organizational-unit-name)),\n printableString        PrintableString\n\
    \                      (SIZE (1..ub-organizational-unit-name)),\n universalString\
    \        UniversalString\n                      (SIZE (1..ub-organizational-unit-name)),\n\
    \ utf8String       UTF8String (SIZE (1..ub-organizational-unit-name)),\n bmpString\
    \        BMPString (SIZE(1..ub-organizational-unit-name))   }\n--\nid-at-title\
    \     AttributeType   ::=     {id-at 12}\nX520Title ::=   CHOICE {\n      teletexString\
    \         TeletexString (SIZE (1..ub-title)),\n      printableString       PrintableString\
    \ (SIZE (1..ub-title)),\n      universalString       UniversalString (SIZE (1..ub-title)),\n\
    \      utf8String            UTF8String (SIZE (1..ub-title)),\n      bmpString\
    \             BMPString (SIZE(1..ub-title))   }\n--\nid-at-dnQualifier       AttributeType\
    \   ::=     {id-at 46}\nX520dnQualifier ::=     PrintableString\nid-at-countryName\
    \       AttributeType   ::=     {id-at 6}\nX520countryName ::=     PrintableString\
    \ (SIZE (2)) -- IS 3166 codes\n -- Legacy attributes\npkcs-9 OBJECT IDENTIFIER\
    \ ::=\n       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 9 }\nemailAddress\
    \ AttributeType      ::= { pkcs-9 1 }\nPkcs9email ::= IA5String (SIZE (1..ub-emailaddress-length))\n\
    -- naming data types --\nName            ::=   CHOICE { -- only one possibility\
    \ for now --\n                                 rdnSequence  RDNSequence }\nRDNSequence\
    \     ::=   SEQUENCE OF RelativeDistinguishedName\nDistinguishedName       ::=\
    \   RDNSequence\nRelativeDistinguishedName  ::=\n                    SET SIZE\
    \ (1 .. MAX) OF AttributeTypeAndValue\n-- Directory string type --\nDirectoryString\
    \ ::= CHOICE {\n      teletexString             TeletexString (SIZE (1..MAX)),\n\
    \      printableString           PrintableString (SIZE (1..MAX)),\n      universalString\
    \           UniversalString (SIZE (1..MAX)),\n      utf8String              UTF8String\
    \ (SIZE (1..MAX)),\n      bmpString               BMPString (SIZE(1..MAX))   }\n\
    -- certificate and CRL specific structures begin here\nCertificate  ::=  SEQUENCE\
    \  {\n     tbsCertificate       TBSCertificate,\n     signatureAlgorithm   AlgorithmIdentifier,\n\
    \     signature            BIT STRING  }\nTBSCertificate  ::=  SEQUENCE  {\n \
    \    version         [0]  Version DEFAULT v1,\n     serialNumber         CertificateSerialNumber,\n\
    \     signature            AlgorithmIdentifier,\n     issuer               Name,\n\
    \     validity             Validity,\n     subject              Name,\n     subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n\
    \                          -- If present, version shall be v2 or v3\n     subjectUniqueID\
    \ [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present,\
    \ version shall be v2 or v3\n     extensions      [3]  Extensions OPTIONAL\n \
    \                         -- If present, version shall be v3 --  }\nVersion  ::=\
    \  INTEGER  {  v1(0), v2(1), v3(2)  }\nCertificateSerialNumber  ::=  INTEGER\n\
    Validity ::= SEQUENCE {\n     notBefore      Time,\n     notAfter       Time }\n\
    Time ::= CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime\
    \ }\nUniqueIdentifier  ::=  BIT STRING\nSubjectPublicKeyInfo  ::=  SEQUENCE  {\n\
    \     algorithm            AlgorithmIdentifier,\n     subjectPublicKey     BIT\
    \ STRING  }\nExtensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\nExtension \
    \ ::=  SEQUENCE  {\n     extnID      OBJECT IDENTIFIER,\n     critical    BOOLEAN\
    \ DEFAULT FALSE,\n     extnValue   OCTET STRING  }\n-- CRL structures\nCertificateList\
    \  ::=  SEQUENCE  {\n     tbsCertList          TBSCertList,\n     signatureAlgorithm\
    \   AlgorithmIdentifier,\n     signature            BIT STRING  }\nTBSCertList\
    \  ::=  SEQUENCE  {\n     version                 Version OPTIONAL,\n        \
    \                          -- if present, shall be v2\n     signature        \
    \       AlgorithmIdentifier,\n     issuer                  Name,\n     thisUpdate\
    \              Time,\n     nextUpdate              Time OPTIONAL,\n     revokedCertificates\
    \     SEQUENCE OF SEQUENCE  {\n          userCertificate         CertificateSerialNumber,\n\
    \          revocationDate          Time,\n          crlEntryExtensions      Extensions\
    \ OPTIONAL\n                                         -- if present, shall be v2\n\
    \                               }  OPTIONAL,\n     crlExtensions           [0]\
    \ Extensions OPTIONAL\n                                         -- if present,\
    \ shall be v2 -- }\n-- Version, Time, CertificateSerialNumber, and Extensions\
    \ were\n-- defined earlier for use in the certificate structure\nAlgorithmIdentifier\
    \  ::=  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n     parameters\
    \              ANY DEFINED BY algorithm OPTIONAL  }\n                        \
    \        -- contains a value of the type\n                                -- registered\
    \ for use with the\n                                -- algorithm object identifier\
    \ value\n-- Algorithm OIDs and parameter structures\npkcs-1 OBJECT IDENTIFIER\
    \ ::= {\n     iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }\nrsaEncryption\
    \ OBJECT IDENTIFIER ::=  { pkcs-1 1 }\nmd2WithRSAEncryption OBJECT IDENTIFIER\
    \  ::=  { pkcs-1 2 }\nmd5WithRSAEncryption OBJECT IDENTIFIER  ::=  { pkcs-1 4\
    \ }\nsha1WithRSAEncryption OBJECT IDENTIFIER  ::=  { pkcs-1 5 }\nid-dsa-with-sha1\
    \ OBJECT IDENTIFIER ::=  {\n     iso(1) member-body(2) us(840) x9-57 (10040) x9algorithm(4)\
    \ 3 }\nDss-Sig-Value  ::=  SEQUENCE  {\n     r       INTEGER,\n     s       INTEGER\
    \  }\ndhpublicnumber OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840)\
    \ ansi-x942(10046) number-type(2) 1 }\nDomainParameters ::= SEQUENCE {\n     p\
    \       INTEGER, -- odd prime, p=jq +1\n     g       INTEGER, -- generator, g\n\
    \     q       INTEGER, -- factor of p-1\n     j       INTEGER OPTIONAL, -- subgroup\
    \ factor, j>= 2\n     validationParms  ValidationParms OPTIONAL }\nValidationParms\
    \ ::= SEQUENCE {\n     seed             BIT STRING,\n     pgenCounter      INTEGER\
    \ }\nid-dsa OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840) x9-57(10040)\
    \ x9algorithm(4) 1 }\nDss-Parms  ::=  SEQUENCE  {\n     p             INTEGER,\n\
    \     q             INTEGER,\n     g             INTEGER  }\n-- x400 address syntax\
    \ starts here\n--      OR Names\nORAddress ::= SEQUENCE {\n   built-in-standard-attributes\
    \ BuiltInStandardAttributes,\n   built-in-domain-defined-attributes\n        \
    \                BuiltInDomainDefinedAttributes OPTIONAL,\n   -- see also teletex-domain-defined-attributes\n\
    \   extension-attributes ExtensionAttributes OPTIONAL }\n--      The OR-address\
    \ is semantically absent from the OR-name if the\n--      built-in-standard-attribute\
    \ sequence is empty and the\n--      built-in-domain-defined-attributes and extension-attributes\
    \ are\n--      both omitted.\n--      Built-in Standard Attributes\nBuiltInStandardAttributes\
    \ ::= SEQUENCE {\n   country-name CountryName OPTIONAL,\n   administration-domain-name\
    \ AdministrationDomainName OPTIONAL,\n   network-address      [0] NetworkAddress\
    \ OPTIONAL,\n   -- see also extended-network-address\n   terminal-identifier \
    \ [1] TerminalIdentifier OPTIONAL,\n   private-domain-name  [2] PrivateDomainName\
    \ OPTIONAL,\n   organization-name    [3] OrganizationName OPTIONAL,\n   -- see\
    \ also teletex-organization-name\n   numeric-user-identifier      [4] NumericUserIdentifier\
    \ OPTIONAL,\n   personal-name        [5] PersonalName OPTIONAL,\n   -- see also\
    \ teletex-personal-name\n   organizational-unit-names    [6] OrganizationalUnitNames\
    \ OPTIONAL\n   -- see also teletex-organizational-unit-names -- }\nCountryName\
    \ ::= [APPLICATION 1] CHOICE {\n   x121-dcc-code NumericString\n             \
    \   (SIZE (ub-country-name-numeric-length)),\n   iso-3166-alpha2-code PrintableString\n\
    \                (SIZE (ub-country-name-alpha-length)) }\nAdministrationDomainName\
    \ ::= [APPLICATION 2] CHOICE {\n   numeric NumericString (SIZE (0..ub-domain-name-length)),\n\
    \   printable PrintableString (SIZE (0..ub-domain-name-length)) }\nNetworkAddress\
    \ ::= X121Address  -- see also extended-network-address\nX121Address ::= NumericString\
    \ (SIZE (1..ub-x121-address-length))\nTerminalIdentifier ::= PrintableString (SIZE\
    \ (1..ub-terminal-id-length))\nPrivateDomainName ::= CHOICE {\n   numeric NumericString\
    \ (SIZE (1..ub-domain-name-length)),\n   printable PrintableString (SIZE (1..ub-domain-name-length))\
    \ }\nOrganizationName ::= PrintableString\n                            (SIZE (1..ub-organization-name-length))\n\
    -- see also teletex-organization-name\nNumericUserIdentifier ::= NumericString\n\
    \                            (SIZE (1..ub-numeric-user-id-length))\nPersonalName\
    \ ::= SET {\n   surname [0] PrintableString (SIZE (1..ub-surname-length)),\n \
    \  given-name [1] PrintableString\n                        (SIZE (1..ub-given-name-length))\
    \ OPTIONAL,\n   initials [2] PrintableString (SIZE (1..ub-initials-length)) OPTIONAL,\n\
    \   generation-qualifier [3] PrintableString\n                (SIZE (1..ub-generation-qualifier-length))\
    \ OPTIONAL }\n-- see also teletex-personal-name\nOrganizationalUnitNames ::= SEQUENCE\
    \ SIZE (1..ub-organizational-units)\n                                        OF\
    \ OrganizationalUnitName\n-- see also teletex-organizational-unit-names\nOrganizationalUnitName\
    \ ::= PrintableString (SIZE\n                        (1..ub-organizational-unit-name-length))\n\
    --      Built-in Domain-defined Attributes\nBuiltInDomainDefinedAttributes ::=\
    \ SEQUENCE SIZE\n                                (1..ub-domain-defined-attributes)\
    \ OF\n                                BuiltInDomainDefinedAttribute\nBuiltInDomainDefinedAttribute\
    \ ::= SEQUENCE {\n   type PrintableString (SIZE\n                        (1..ub-domain-defined-attribute-type-length)),\n\
    \   value PrintableString (SIZE\n                        (1..ub-domain-defined-attribute-value-length))}\n\
    --      Extension Attributes\nExtensionAttributes ::= SET SIZE (1..ub-extension-attributes)\
    \ OF\n                        ExtensionAttribute\nExtensionAttribute ::=  SEQUENCE\
    \ {\n   extension-attribute-type [0] INTEGER (0..ub-extension-attributes),\n \
    \  extension-attribute-value [1]\n                        ANY DEFINED BY extension-attribute-type\
    \ }\n-- Extension types and attribute values\n--\ncommon-name INTEGER ::= 1\n\
    CommonName ::= PrintableString (SIZE (1..ub-common-name-length))\nteletex-common-name\
    \ INTEGER ::= 2\nTeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))\n\
    teletex-organization-name INTEGER ::= 3\nTeletexOrganizationName ::=\n       \
    \         TeletexString (SIZE (1..ub-organization-name-length))\nteletex-personal-name\
    \ INTEGER ::= 4\nTeletexPersonalName ::= SET {\n   surname [0] TeletexString (SIZE\
    \ (1..ub-surname-length)),\n   given-name [1] TeletexString\n                (SIZE\
    \ (1..ub-given-name-length)) OPTIONAL,\n   initials [2] TeletexString (SIZE (1..ub-initials-length))\
    \ OPTIONAL,\n   generation-qualifier [3] TeletexString (SIZE\n               \
    \ (1..ub-generation-qualifier-length)) OPTIONAL }\nteletex-organizational-unit-names\
    \ INTEGER ::= 5\nTeletexOrganizationalUnitNames ::= SEQUENCE SIZE\n        (1..ub-organizational-units)\
    \ OF TeletexOrganizationalUnitName\nTeletexOrganizationalUnitName ::= TeletexString\n\
    \                        (SIZE (1..ub-organizational-unit-name-length))\npds-name\
    \ INTEGER ::= 7\nPDSName ::= PrintableString (SIZE (1..ub-pds-name-length))\n\
    physical-delivery-country-name INTEGER ::= 8\nPhysicalDeliveryCountryName ::=\
    \ CHOICE {\n   x121-dcc-code NumericString (SIZE (ub-country-name-numeric-length)),\n\
    \   iso-3166-alpha2-code PrintableString\n                        (SIZE (ub-country-name-alpha-length))\
    \ }\npostal-code INTEGER ::= 9\nPostalCode ::= CHOICE {\n   numeric-code NumericString\
    \ (SIZE (1..ub-postal-code-length)),\n   printable-code PrintableString (SIZE\
    \ (1..ub-postal-code-length)) }\nphysical-delivery-office-name INTEGER ::= 10\n\
    PhysicalDeliveryOfficeName ::= PDSParameter\nphysical-delivery-office-number INTEGER\
    \ ::= 11\nPhysicalDeliveryOfficeNumber ::= PDSParameter\nextension-OR-address-components\
    \ INTEGER ::= 12\nExtensionORAddressComponents ::= PDSParameter\nphysical-delivery-personal-name\
    \ INTEGER ::= 13\nPhysicalDeliveryPersonalName ::= PDSParameter\nphysical-delivery-organization-name\
    \ INTEGER ::= 14\nPhysicalDeliveryOrganizationName ::= PDSParameter\nextension-physical-delivery-address-components\
    \ INTEGER ::= 15\nExtensionPhysicalDeliveryAddressComponents ::= PDSParameter\n\
    unformatted-postal-address INTEGER ::= 16\nUnformattedPostalAddress ::= SET {\n\
    \   printable-address SEQUENCE SIZE (1..ub-pds-physical-address-lines) OF\n  \
    \         PrintableString (SIZE (1..ub-pds-parameter-length)) OPTIONAL,\n   teletex-string\
    \ TeletexString\n         (SIZE (1..ub-unformatted-address-length)) OPTIONAL }\n\
    street-address INTEGER ::= 17\nStreetAddress ::= PDSParameter\npost-office-box-address\
    \ INTEGER ::= 18\nPostOfficeBoxAddress ::= PDSParameter\nposte-restante-address\
    \ INTEGER ::= 19\nPosteRestanteAddress ::= PDSParameter\nunique-postal-name INTEGER\
    \ ::= 20\nUniquePostalName ::= PDSParameter\nlocal-postal-attributes INTEGER ::=\
    \ 21\nLocalPostalAttributes ::= PDSParameter\nPDSParameter ::= SET {\n   printable-string\
    \ PrintableString\n                (SIZE(1..ub-pds-parameter-length)) OPTIONAL,\n\
    \   teletex-string TeletexString\n                (SIZE(1..ub-pds-parameter-length))\
    \ OPTIONAL }\nextended-network-address INTEGER ::= 22\nExtendedNetworkAddress\
    \ ::= CHOICE {\n   e163-4-address SEQUENCE {\n        number [0] NumericString\
    \ (SIZE (1..ub-e163-4-number-length)),\n        sub-address [1] NumericString\n\
    \                (SIZE (1..ub-e163-4-sub-address-length)) OPTIONAL },\n   psap-address\
    \ [0] PresentationAddress }\nPresentationAddress ::= SEQUENCE {\n        pSelector\
    \       [0] EXPLICIT OCTET STRING OPTIONAL,\n        sSelector       [1] EXPLICIT\
    \ OCTET STRING OPTIONAL,\n        tSelector       [2] EXPLICIT OCTET STRING OPTIONAL,\n\
    \        nAddresses      [3] EXPLICIT SET SIZE (1..MAX) OF OCTET STRING }\nterminal-type\
    \  INTEGER ::= 23\nTerminalType ::= INTEGER {\n   telex (3),\n   teletex (4),\n\
    \   g3-facsimile (5),\n   g4-facsimile (6),\n   ia5-terminal (7),\n   videotex\
    \ (8) } (0..ub-integer-options)\n--      Extension Domain-defined Attributes\n\
    teletex-domain-defined-attributes INTEGER ::= 6\nTeletexDomainDefinedAttributes\
    \ ::= SEQUENCE SIZE\n   (1..ub-domain-defined-attributes) OF TeletexDomainDefinedAttribute\n\
    TeletexDomainDefinedAttribute ::= SEQUENCE {\n        type TeletexString\n   \
    \            (SIZE (1..ub-domain-defined-attribute-type-length)),\n        value\
    \ TeletexString\n               (SIZE (1..ub-domain-defined-attribute-value-length))\
    \ }\n--  specifications of Upper Bounds shall be regarded as mandatory\n--  from\
    \ Annex B of ITU-T X.411 Reference Definition of MTS Parameter\n--  Upper Bounds\n\
    --      Upper Bounds\nub-name INTEGER ::=     32768\nub-common-name  INTEGER ::=\
    \     64\nub-locality-name        INTEGER ::=     128\nub-state-name   INTEGER\
    \ ::=     128\nub-organization-name    INTEGER ::=     64\nub-organizational-unit-name\
    \     INTEGER ::=     64\nub-title        INTEGER ::=     64\nub-match       \
    \ INTEGER ::=     128\nub-emailaddress-length INTEGER ::= 128\nub-common-name-length\
    \ INTEGER ::= 64\nub-country-name-alpha-length INTEGER ::= 2\nub-country-name-numeric-length\
    \ INTEGER ::= 3\nub-domain-defined-attributes INTEGER ::= 4\nub-domain-defined-attribute-type-length\
    \ INTEGER ::= 8\nub-domain-defined-attribute-value-length INTEGER ::= 128\nub-domain-name-length\
    \ INTEGER ::= 16\nub-extension-attributes INTEGER ::= 256\nub-e163-4-number-length\
    \ INTEGER ::= 15\nub-e163-4-sub-address-length INTEGER ::= 40\nub-generation-qualifier-length\
    \ INTEGER ::= 3\nub-given-name-length INTEGER ::= 16\nub-initials-length INTEGER\
    \ ::= 5\nub-integer-options INTEGER ::= 256\nub-numeric-user-id-length INTEGER\
    \ ::= 32\nub-organization-name-length INTEGER ::= 64\nub-organizational-unit-name-length\
    \ INTEGER ::= 32\nub-organizational-units INTEGER ::= 4\nub-pds-name-length INTEGER\
    \ ::= 16\nub-pds-parameter-length INTEGER ::= 30\nub-pds-physical-address-lines\
    \ INTEGER ::= 6\nub-postal-code-length INTEGER ::= 16\nub-surname-length INTEGER\
    \ ::= 40\nub-terminal-id-length INTEGER ::= 24\nub-unformatted-address-length\
    \ INTEGER ::= 180\nub-x121-address-length INTEGER ::= 16\n-- Note - upper bounds\
    \ on string types, such as TeletexString, are\n-- measured in characters.  Excepting\
    \ PrintableString or IA5String, a\n-- significantly greater number of octets will\
    \ be required to hold\n-- such a value.  As a minimum, 16 octets, or twice the\
    \ specified upper\n-- bound, whichever is the larger, should be allowed for TeletexString.\n\
    -- For UTF8String or UniversalString at least four times the upper\n-- bound should\
    \ be allowed.\nEND\nA.2 Implicitly Tagged Module, 1988 Syntax\nPKIX1Implicit88\
    \ {iso(1) identified-organization(3) dod(6) internet(1)\n  security(5) mechanisms(5)\
    \ pkix(7) id-mod(0) id-pkix1-implicit-88(2)}\nDEFINITIONS IMPLICIT TAGS ::=\n\
    BEGIN\n-- EXPORTS ALL --\nIMPORTS\n        id-pkix, id-pe, id-qt, id-kp, id-qt-unotice,\
    \ id-qt-cps,\n            id-ad, id-ad-ocsp, id-ad-caIssuers,\n            --\
    \ delete following line if \"new\" types are supported --\n            BMPString,\
    \ UniversalString, UTF8String, -- end \"new\" types\n                ORAddress,\
    \ Name, RelativeDistinguishedName,\n                CertificateSerialNumber,\n\
    \                CertificateList, AlgorithmIdentifier, ub-name,\n            \
    \    Attribute, DirectoryString\n                FROM PKIX1Explicit88 {iso(1)\
    \ identified-organization(3)\n                dod(6) internet(1) security(5) mechanisms(5)\
    \ pkix(7)\n                id-mod(0) id-pkix1-explicit(1)};\n-- ISO arc for standard\
    \ certificate and CRL extensions\nid-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2)\
    \ ds(5) 29}\n-- authority key identifier OID and syntax\nid-ce-authorityKeyIdentifier\
    \ OBJECT IDENTIFIER ::=  { id-ce 35 }\nAuthorityKeyIdentifier ::= SEQUENCE {\n\
    \      keyIdentifier             [0] KeyIdentifier            OPTIONAL,\n    \
    \  authorityCertIssuer       [1] GeneralNames             OPTIONAL,\n      authorityCertSerialNumber\
    \ [2] CertificateSerialNumber  OPTIONAL }\n    -- authorityCertIssuer and authorityCertSerialNumber\
    \ shall both\n    -- be present or both be absent\nKeyIdentifier ::= OCTET STRING\n\
    -- subject key identifier OID and syntax\nid-ce-subjectKeyIdentifier OBJECT IDENTIFIER\
    \ ::=  { id-ce 14 }\nSubjectKeyIdentifier ::= KeyIdentifier\n-- key usage extension\
    \ OID and syntax\nid-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }\nKeyUsage\
    \ ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation   \
    \       (1),\n     keyEncipherment         (2),\n     dataEncipherment       \
    \ (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n\
    \     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly\
    \            (8) }\n-- private key usage period extension OID and syntax\nid-ce-privateKeyUsagePeriod\
    \ OBJECT IDENTIFIER ::=  { id-ce 16 }\nPrivateKeyUsagePeriod ::= SEQUENCE {\n\
    \     notBefore       [0]     GeneralizedTime OPTIONAL,\n     notAfter       \
    \ [1]     GeneralizedTime OPTIONAL }\n     -- either notBefore or notAfter shall\
    \ be present\n-- certificate policies extension OID and syntax\nid-ce-certificatePolicies\
    \ OBJECT IDENTIFIER ::=  { id-ce 32 }\nCertificatePolicies ::= SEQUENCE SIZE (1..MAX)\
    \ OF PolicyInformation\nPolicyInformation ::= SEQUENCE {\n     policyIdentifier\
    \   CertPolicyId,\n     policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n       \
    \      PolicyQualifierInfo OPTIONAL }\nCertPolicyId ::= OBJECT IDENTIFIER\nPolicyQualifierInfo\
    \ ::= SEQUENCE {\n       policyQualifierId  PolicyQualifierId,\n       qualifier\
    \        ANY DEFINED BY policyQualifierId }\n-- Implementations that recognize\
    \ additional policy qualifiers shall\n-- augment the following definition for\
    \ PolicyQualifierId\nPolicyQualifierId ::=\n    OBJECT IDENTIFIER ( id-qt-cps\
    \ | id-qt-unotice )\n-- CPS pointer qualifier\nCPSuri ::= IA5String\n-- user notice\
    \ qualifier\nUserNotice ::= SEQUENCE {\n     noticeRef        NoticeReference\
    \ OPTIONAL,\n     explicitText     DisplayText OPTIONAL}\nNoticeReference ::=\
    \ SEQUENCE {\n     organization     DisplayText,\n     noticeNumbers    SEQUENCE\
    \ OF INTEGER }\nDisplayText ::= CHOICE {\n     visibleString    VisibleString\
    \  (SIZE (1..200)),\n     bmpString        BMPString      (SIZE (1..200)),\n \
    \    utf8String       UTF8String     (SIZE (1..200)) }\n-- policy mapping extension\
    \ OID and syntax\nid-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }\nPolicyMappings\
    \ ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {\n     issuerDomainPolicy      CertPolicyId,\n\
    \     subjectDomainPolicy     CertPolicyId }\n-- subject alternative name extension\
    \ OID and syntax\nid-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }\nSubjectAltName\
    \ ::= GeneralNames\nGeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\nGeneralName\
    \ ::= CHOICE {\n     otherName                       [0]     AnotherName,\n  \
    \   rfc822Name                      [1]     IA5String,\n     dNSName         \
    \                [2]     IA5String,\n     x400Address                     [3]\
    \     ORAddress,\n     directoryName                   [4]     Name,\n     ediPartyName\
    \                    [5]     EDIPartyName,\n     uniformResourceIdentifier   \
    \    [6]     IA5String,\n     iPAddress                       [7]     OCTET STRING,\n\
    \     registeredID                    [8]     OBJECT IDENTIFIER }\n-- AnotherName\
    \ replaces OTHER-NAME ::= TYPE-IDENTIFIER, as\n-- TYPE-IDENTIFIER is not supported\
    \ in the '88 ASN.1 syntax\nAnotherName ::= SEQUENCE {\n     type-id    OBJECT\
    \ IDENTIFIER,\n     value      [0] EXPLICIT ANY DEFINED BY type-id }\nEDIPartyName\
    \ ::= SEQUENCE {\n     nameAssigner            [0]     DirectoryString OPTIONAL,\n\
    \     partyName               [1]     DirectoryString }\n-- issuer alternative\
    \ name extension OID and syntax\nid-ce-issuerAltName OBJECT IDENTIFIER ::=  {\
    \ id-ce 18 }\nIssuerAltName ::= GeneralNames\nid-ce-subjectDirectoryAttributes\
    \ OBJECT IDENTIFIER ::=  { id-ce 9 }\nSubjectDirectoryAttributes ::= SEQUENCE\
    \ SIZE (1..MAX) OF Attribute\n-- basic constraints extension OID and syntax\n\
    id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }\nBasicConstraints ::=\
    \ SEQUENCE {\n     cA                      BOOLEAN DEFAULT FALSE,\n     pathLenConstraint\
    \       INTEGER (0..MAX) OPTIONAL }\n-- name constraints extension OID and syntax\n\
    id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }\nNameConstraints ::=\
    \ SEQUENCE {\n     permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\
    \     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\nGeneralSubtrees\
    \ ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\nGeneralSubtree ::= SEQUENCE {\n\
    \     base                    GeneralName,\n     minimum         [0]     BaseDistance\
    \ DEFAULT 0,\n     maximum         [1]     BaseDistance OPTIONAL }\nBaseDistance\
    \ ::= INTEGER (0..MAX)\n-- policy constraints extension OID and syntax\nid-ce-policyConstraints\
    \ OBJECT IDENTIFIER ::=  { id-ce 36 }\nPolicyConstraints ::= SEQUENCE {\n    \
    \ requireExplicitPolicy           [0] SkipCerts OPTIONAL,\n     inhibitPolicyMapping\
    \            [1] SkipCerts OPTIONAL }\nSkipCerts ::= INTEGER (0..MAX)\n-- CRL\
    \ distribution points extension OID and syntax\nid-ce-cRLDistributionPoints  \
    \   OBJECT IDENTIFIER  ::=  {id-ce 31}\nCRLDistPointsSyntax ::= SEQUENCE SIZE\
    \ (1..MAX) OF DistributionPoint\nDistributionPoint ::= SEQUENCE {\n     distributionPoint\
    \       [0]     DistributionPointName OPTIONAL,\n     reasons                \
    \ [1]     ReasonFlags OPTIONAL,\n     cRLIssuer               [2]     GeneralNames\
    \ OPTIONAL }\nDistributionPointName ::= CHOICE {\n     fullName              \
    \  [0]     GeneralNames,\n     nameRelativeToCRLIssuer [1]     RelativeDistinguishedName\
    \ }\nReasonFlags ::= BIT STRING {\n     unused                  (0),\n     keyCompromise\
    \           (1),\n     cACompromise            (2),\n     affiliationChanged \
    \     (3),\n     superseded              (4),\n     cessationOfOperation    (5),\n\
    \     certificateHold         (6) }\n-- extended key usage extension OID and syntax\n\
    id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}\nExtKeyUsageSyntax ::= SEQUENCE\
    \ SIZE (1..MAX) OF KeyPurposeId\nKeyPurposeId ::= OBJECT IDENTIFIER\n-- extended\
    \ key purpose OIDs\nid-kp-serverAuth      OBJECT IDENTIFIER ::= { id-kp 1 }\n\
    id-kp-clientAuth      OBJECT IDENTIFIER ::= { id-kp 2 }\nid-kp-codeSigning   \
    \  OBJECT IDENTIFIER ::= { id-kp 3 }\nid-kp-emailProtection OBJECT IDENTIFIER\
    \ ::= { id-kp 4 }\nid-kp-ipsecEndSystem  OBJECT IDENTIFIER ::= { id-kp 5 }\nid-kp-ipsecTunnel\
    \     OBJECT IDENTIFIER ::= { id-kp 6 }\nid-kp-ipsecUser       OBJECT IDENTIFIER\
    \ ::= { id-kp 7 }\nid-kp-timeStamping    OBJECT IDENTIFIER ::= { id-kp 8 }\n--\
    \ authority info access\nid-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe\
    \ 1 }\nAuthorityInfoAccessSyntax  ::=\n        SEQUENCE SIZE (1..MAX) OF AccessDescription\n\
    AccessDescription  ::=  SEQUENCE {\n        accessMethod          OBJECT IDENTIFIER,\n\
    \        accessLocation        GeneralName  }\n-- CRL number extension OID and\
    \ syntax\nid-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }\nCRLNumber ::= INTEGER\
    \ (0..MAX)\n-- issuing distribution point extension OID and syntax\nid-ce-issuingDistributionPoint\
    \ OBJECT IDENTIFIER ::= { id-ce 28 }\nIssuingDistributionPoint ::= SEQUENCE {\n\
    \     distributionPoint       [0] DistributionPointName OPTIONAL,\n     onlyContainsUserCerts\
    \   [1] BOOLEAN DEFAULT FALSE,\n     onlyContainsCACerts     [2] BOOLEAN DEFAULT\
    \ FALSE,\n     onlySomeReasons         [3] ReasonFlags OPTIONAL,\n     indirectCRL\
    \             [4] BOOLEAN DEFAULT FALSE }\nid-ce-deltaCRLIndicator OBJECT IDENTIFIER\
    \ ::= { id-ce 27 }\n-- deltaCRLIndicator ::= BaseCRLNumber\nBaseCRLNumber ::=\
    \ CRLNumber\n-- CRL reasons extension OID and syntax\nid-ce-cRLReasons OBJECT\
    \ IDENTIFIER ::= { id-ce 21 }\nCRLReason ::= ENUMERATED {\n     unspecified  \
    \           (0),\n     keyCompromise           (1),\n     cACompromise       \
    \     (2),\n     affiliationChanged      (3),\n     superseded              (4),\n\
    \     cessationOfOperation    (5),\n     certificateHold         (6),\n     removeFromCRL\
    \           (8) }\n-- certificate issuer CRL entry extension OID and syntax\n\
    id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }\nCertificateIssuer\
    \ ::= GeneralNames\n-- hold instruction extension OID and syntax\nid-ce-holdInstructionCode\
    \ OBJECT IDENTIFIER ::= { id-ce 23 }\nHoldInstructionCode ::= OBJECT IDENTIFIER\n\
    -- ANSI x9 holdinstructions\n-- ANSI x9 arc holdinstruction arc\nholdInstruction\
    \ OBJECT IDENTIFIER ::=\n          {joint-iso-itu-t(2) member-body(2) us(840)\
    \ x9cm(10040) 2}\n-- ANSI X9 holdinstructions referenced by this standard\nid-holdinstruction-none\
    \ OBJECT IDENTIFIER  ::=\n                {holdInstruction 1} -- deprecated\n\
    id-holdinstruction-callissuer OBJECT IDENTIFIER ::=\n                {holdInstruction\
    \ 2}\nid-holdinstruction-reject OBJECT IDENTIFIER ::=\n                {holdInstruction\
    \ 3}\n-- invalidity date CRL entry extension OID and syntax\nid-ce-invalidityDate\
    \ OBJECT IDENTIFIER ::= { id-ce 24 }\nInvalidityDate ::=  GeneralizedTime\nEND\n\
    Appendix B. 1993 ASN.1 Structures and OIDs\nB.1 Explicitly Tagged Module, 1993\
    \ Syntax\nPKIX1Explicit93 {iso(1) identified-organization(3) dod(6) internet(1)\n\
    \   security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-explicit-93(3)}\nDEFINITIONS\
    \ EXPLICIT TAGS ::=\nBEGIN\n-- EXPORTS ALL --\nIMPORTS\n        authorityKeyIdentifier,\
    \ subjectKeyIdentifier, keyUsage,\n           extendedKeyUsage, privateKeyUsagePeriod,\
    \ certificatePolicies,\n           policyMappings, subjectAltName, issuerAltName,\n\
    \           basicConstraints, nameConstraints, policyConstraints,\n          \
    \ cRLDistributionPoints, subjectDirectoryAttributes,\n           cRLNumber, reasonCode,\
    \ instructionCode, invalidityDate,\n           issuingDistributionPoint, certificateIssuer,\n\
    \           deltaCRLIndicator, authorityInfoAccess, id-ce\n           FROM PKIX1Implicit93\
    \ {iso(1) identified-organization(3)\n           dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n           id-mod(0) id-pkix1-implicit-93(4)} ;\n--\n\
    \                   --  Locally defined OIDs  --\nid-pkix  OBJECT IDENTIFIER \
    \ ::=\n         { iso(1) identified-organization(3) dod(6) internet(1)\n     \
    \               security(5) mechanisms(5) pkix(7) }\n-- PKIX arcs\n-- arc for\
    \ private certificate extensions\nid-pe OBJECT IDENTIFIER  ::=  { id-pkix 1 }\n\
    \ -- arc for policy qualifier types\nid-qt OBJECT IDENTIFIER ::= { id-pkix 2 }\n\
    -- arc for extended key purpose OIDS\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3\
    \ }\n-- arc for access descriptors\nid-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n\
    -- policyQualifierIds for Internet policy qualifiers\nid-qt-cps      OBJECT IDENTIFIER\
    \ ::=  { id-qt 1 }\n        -- OID for CPS qualifier\nid-qt-unotice  OBJECT IDENTIFIER\
    \ ::=  { id-qt 2 }\n        -- OID for user notice qualifier\n-- based on excerpts\
    \ from AuthenticationFramework\n--    {joint-iso-ccitt ds(5) modules(1) authenticationFramework(7)\
    \ 2}\n               -- Public Key Certificate --\nCertificate            ::=\
    \   SIGNED { SEQUENCE {\n   version                 [0]   Version DEFAULT v1,\n\
    \   serialNumber                  CertificateSerialNumber,\n   signature     \
    \                AlgorithmIdentifier,\n   issuer                        Name,\n\
    \   validity                      Validity,\n   subject                      \
    \ Name,\n   subjectPublicKeyInfo          SubjectPublicKeyInfo,\n   issuerUniqueIdentifier\
    \  [1]   IMPLICIT UniqueIdentifier OPTIONAL,\n                              ---if\
    \ present, version shall be v2 or v3--\n   subjectUniqueIdentifier [2]   IMPLICIT\
    \ UniqueIdentifier OPTIONAL,\n                              ---if present, version\
    \ shall be v2 or v3--\n   extensions              [3]   Extensions OPTIONAL\n\
    \                              --if present, version shall be v3--}  }\nUniqueIdentifier\
    \        ::=  BIT STRING\nVersion                 ::=  INTEGER { v1(0), v2(1),\
    \ v3(2) }\nCertificateSerialNumber ::=  INTEGER\nValidity                    \
    \    ::=     SEQUENCE {\n   notBefore            Time,\n   notAfter          \
    \   Time }\nTime ::= CHOICE {\n        utcTime         UTCTime,\n        generalTime\
    \             GeneralizedTime }\nSubjectPublicKeyInfo    ::=     SEQUENCE{\n \
    \  algorithm            AlgorithmIdentifier,\n   subjectPublicKey     BIT STRING}\n\
    Extensions        ::=   SEQUENCE SIZE (1..MAX) OF Extension\nExtension       \
    \  ::=   SEQUENCE {\n   extnId            EXTENSION.&id ({ExtensionSet}),\n  \
    \ critical          BOOLEAN DEFAULT FALSE,\n   extnValue         OCTET STRING\
    \ }\n                -- contains a DER encoding of a value of type\n         \
    \       -- &ExtnType for the\n                -- extension object identified by\
    \ extnId --\n-- The following information object set is defined to constrain the\n\
    -- set of legal certificate extensions.\nExtensionSet    EXTENSION       ::= \
    \    { authorityKeyIdentifier |\n                                        subjectKeyIdentifier\
    \ |\n                                        keyUsage |\n                    \
    \                    extendedKeyUsage |\n                                    \
    \    privateKeyUsagePeriod |\n                                        certificatePolicies\
    \ |\n                                        policyMappings |\n              \
    \                          subjectAltName |\n                                \
    \        issuerAltName |\n                                        basicConstraints\
    \ |\n                                        nameConstraints |\n             \
    \                           policyConstraints |\n                            \
    \            cRLDistributionPoints |\n                                       \
    \ subjectDirectoryAttributes |\n                                        authorityInfoAccess\
    \ }\nEXTENSION       ::=     CLASS {\n   &id          OBJECT IDENTIFIER UNIQUE,\n\
    \   &ExtnType }\nWITH SYNTAX  {\n   SYNTAX               &ExtnType\n   IDENTIFIED\
    \ BY        &id }\n                  -- Certificate Revocation List --\nCertificateList\
    \ ::=    SIGNED { SEQUENCE {\n   version                Version  OPTIONAL, --\
    \ if present, shall be v2\n   signature              AlgorithmIdentifier,\n  \
    \ issuer                 Name,\n   thisUpdate             Time,\n   nextUpdate\
    \             Time OPTIONAL,\n   revokedCertificates    SEQUENCE OF SEQUENCE {\n\
    \   userCertificate        CertificateSerialNumber,\n   revocationDate       \
    \  Time,\n   crlEntryExtensions     EntryExtensions OPTIONAL } OPTIONAL,\n   crlExtensions\
    \          [0]   CRLExtensions OPTIONAL }}\nCRLExtensions        ::=        SEQUENCE\
    \ SIZE (1..MAX) OF CRLExtension\nCRLExtension         ::=        SEQUENCE {\n\
    \   extnId            EXTENSION.&id ({CRLExtensionSet}),\n   critical        \
    \  BOOLEAN DEFAULT FALSE,\n   extnValue         OCTET STRING }\n             \
    \   -- contains a DER encoding of a value of type\n                -- &ExtnType\
    \ for the\n                -- extension object identified by extnId --\n-- The\
    \ following information object set is defined to constrain the\n-- set of legal\
    \ CRL extensions.\nCRLExtensionSet EXTENSION       ::=     { authorityKeyIdentifier\
    \ |\n                                        issuerAltName |\n               \
    \                         cRLNumber |\n                                      \
    \  deltaCRLIndicator |\n                                        issuingDistributionPoint\
    \ }\n-- EXTENSION defined above for certificates\nEntryExtensions        ::= \
    \     SEQUENCE SIZE (1..MAX) OF EntryExtension\nEntryExtension         ::=   \
    \   SEQUENCE {\n   extnId            EXTENSION.&id ({EntryExtensionSet}),\n  \
    \ critical          BOOLEAN DEFAULT FALSE,\n   extnValue         OCTET STRING\
    \ }\n                -- contains a DER encoding of a value of type\n         \
    \       -- &ExtnType for the\n                -- extension object identified by\
    \ extnId --\n-- The following information object set is defined to constrain the\n\
    -- set of legal CRL entry extensions.\nEntryExtensionSet       EXTENSION     \
    \  ::=     { reasonCode |\n                                                instructionCode\
    \ |\n                                                invalidityDate |\n      \
    \                                          certificateIssuer }\n         -- information\
    \ object classes used in the defintion --\n                    -- of certificates\
    \ and CRLs --\n-- Parameterized Type SIGNED --\n  SIGNED { ToBeSigned } ::= SEQUENCE\
    \ {\n     toBeSigned  ToBeSigned,\n     algorithm   AlgorithmIdentifier,\n   \
    \  signature   BIT STRING\n  }\n-- Definition of AlgorithmIdentifier\n-- ISO definition\
    \ was:\n--\n-- AlgorithmIdentifier     ::=  SEQUENCE {\n--   algorithm       \
    \   ALGORITHM.&id({SupportedAlgorithms}),\n--   parameters         ALGORITHM.&Type({SupportedAlgorithms}\n\
    --                                         { @algorithm}) OPTIONAL }\n-- Definition\
    \ of ALGORITHM\n-- ALGORITHM    ::=     TYPE-IDENTIFIER\n-- The following PKIX\
    \ definition replaces the X.509 definition\n--\nAlgorithmIdentifier     ::=  SEQUENCE\
    \ {\n   algorithm            ALGORITHM-ID.&id({SupportedAlgorithms}),\n   parameters\
    \           ALGORITHM-ID.&Type({SupportedAlgorithms}\n                       \
    \                    { @algorithm}) OPTIONAL }\n-- Definition of ALGORITHM-ID\n\
    \ ALGORITHM-ID ::= CLASS {\n     &id    OBJECT IDENTIFIER UNIQUE,\n     &Type\
    \  OPTIONAL\n  }\n     WITH SYNTAX { OID &id [PARMS &Type] }\n-- The definition\
    \ of SupportedAlgorithms may be modified as this\n-- document does not specify\
    \ a mandatory algorithm set.  In addition,\n-- the set is specified as extensible,\
    \ since additional algorithms\n-- may be supported\nSupportedAlgorithms     ALGORITHM-ID\
    \  ::=       { ..., -- extensible\n                                          \
    \  rsaPublicKey |\n                                            rsaSHA-1  |\n \
    \                                           rsaMD5 |\n                       \
    \                     rsaMD2 |\n                                            dssPublicKey\
    \ |\n                                            dsaSHA-1 |\n                \
    \                            dhPublicKey }\n-- OIDs and parameter structures for\
    \ ALGORITHM-IDs used\n-- in this specification\nrsaPublicKey ALGORITHM-ID ::=\
    \ { OID rsaEncryption PARMS NULL }\nrsaSHA-1 ALGORITHM-ID ::= { OID sha1WithRSAEncryption\
    \ PARMS NULL }\nrsaMD5 ALGORITHM-ID ::= { OID md5WithRSAEncryption PARMS NULL\
    \  }\nrsaMD2 ALGORITHM-ID ::= { OID md2WithRSAEncryption PARMS NULL  }\ndssPublicKey\
    \ ALGORITHM-ID ::= { OID id-dsa PARMS Dss-Parms }\ndsaSHA-1 ALGORITHM-ID ::= {\
    \ OID id-dsa-with-sha1 }\ndhPublicKey ALGORITHM-ID ::= {OID dhpublicnumber PARMS\
    \ DomainParameters}\n-- algorithm identifiers and parameter structures\npkcs-1\
    \ OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\
    \ 1 }\nrsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1 }\nmd2WithRSAEncryption\
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 2 }\nmd5WithRSAEncryption OBJECT IDENTIFIER\
    \  ::=  { pkcs-1 4 }\nsha1WithRSAEncryption OBJECT IDENTIFIER  ::=  { pkcs-1 5\
    \ }\nid-dsa-with-sha1 OBJECT IDENTIFIER ::=  {\n     iso(1) member-body(2) us(840)\
    \ x9-57 (10040) x9algorithm(4) 3 }\nDss-Sig-Value  ::=  SEQUENCE  {\n     r  \
    \     INTEGER,\n     s       INTEGER  }\ndhpublicnumber OBJECT IDENTIFIER ::=\
    \ {\n     iso(1) member-body(2) us(840) ansi-x942(10046) number-type(2) 1 }\n\
    DomainParameters ::= SEQUENCE {\n     p       INTEGER, -- odd prime, p=jq +1\n\
    \     g       INTEGER, -- generator, g\n     q       INTEGER, -- factor of p-1\n\
    \     j       INTEGER OPTIONAL, -- subgroup factor, j>= 2\n     validationParms\
    \  ValidationParms OPTIONAL }\nValidationParms ::= SEQUENCE {\n     seed     \
    \        BIT STRING,\n     pgenCounter      INTEGER }\nid-dsa OBJECT IDENTIFIER\
    \ ::= {\n     iso(1) member-body(2) us(840) x9-57(10040) x9algorithm(4) 1 }\n\
    Dss-Parms  ::=  SEQUENCE  {\n     p             INTEGER,\n     q             INTEGER,\n\
    \     g             INTEGER  }\n     -- The ASN.1 in this section supports the\
    \ Name type\n     -- and the directoryAttribute extension\n-- attribute data types\
    \ --\nAttribute       ::=     SEQUENCE {\n        type            ATTRIBUTE.&id\
    \ ({SupportedAttributes}),\n        values  SET SIZE (1 .. MAX) OF ATTRIBUTE.&Type\n\
    \                        ({SupportedAttributes}{@type})}\nAttributeTypeAndValue\
    \           ::=     SEQUENCE {\n        type            ATTRIBUTE.&id ({SupportedAttributes}),\n\
    \        value   ATTRIBUTE.&Type ({SupportedAttributes}{@type})}\n-- naming data\
    \ types --\nName            ::=     CHOICE { -- only one possibility for now --\n\
    \                                        rdnSequence  RDNSequence }\nRDNSequence\
    \ ::= SEQUENCE OF RelativeDistinguishedName\nRelativeDistinguishedName       ::=\n\
    \                SET SIZE (1 .. MAX) OF AttributeTypeAndValue\nID     ::=    OBJECT\
    \ IDENTIFIER\n-- ATTRIBUTE information object class specification\n--  Note: This\
    \ has been greatly simplified for PKIX !!\nATTRIBUTE               ::=     CLASS\
    \ {\n        &Type,\n        &id                     OBJECT IDENTIFIER UNIQUE\
    \ }\nWITH SYNTAX {\n        WITH SYNTAX &Type ID &id }\n-- suggested naming attributes\n\
    --      Definition of the following information object set may be\n--    augmented\
    \ to meet local requirements.  Note that deleting\n--    members of the set may\
    \ prevent interoperability with\n--    conforming implementations.\nSupportedAttributes\
    \     ATTRIBUTE       ::=     {\n                name | commonName | surname |\
    \ givenName | initials |\n                generationQualifier | dnQualifier |\
    \ countryName |\n                localityName | stateOrProvinceName | organizationName\
    \ |\n                        organizationalUnitName | title | pkcs9email }\nname\
    \ ATTRIBUTE  ::=     {\n        WITH SYNTAX                     DirectoryString\
    \ { ub-name }\n        ID                              id-at-name }\ncommonName\
    \ ATTRIBUTE    ::=     {\n        WITH SYNTAX                     DirectoryString\
    \ {ub-common-name}\n        ID                              id-at-commonName }\n\
    surname ATTRIBUTE       ::=             {\n        WITH SYNTAX               \
    \      DirectoryString {ub-name}\n        ID                              id-at-surname\
    \ }\ngivenName ATTRIBUTE     ::=             {\n        WITH SYNTAX          \
    \           DirectoryString {ub-name}\n        ID                            \
    \  id-at-givenName }\ninitials ATTRIBUTE      ::=             {\n        WITH\
    \ SYNTAX                     DirectoryString {ub-name}\n        ID           \
    \                   id-at-initials }\ngenerationQualifier ATTRIBUTE   ::=    \
    \         {\n        WITH SYNTAX                     DirectoryString {ub-name}\n\
    \        ID                              id-at-generationQualifier}\ndnQualifier\
    \ ATTRIBUTE   ::=     {\n        WITH SYNTAX                     PrintableString\n\
    \        ID                              id-at-dnQualifier }\ncountryName ATTRIBUTE\
    \   ::=     {\n        WITH SYNTAX                     PrintableString (SIZE (2))\n\
    \                                                -- IS 3166 codes only\n     \
    \   ID                              id-at-countryName }\nlocalityName ATTRIBUTE\
    \  ::=     {\n        WITH SYNTAX             DirectoryString {ub-locality-name}\n\
    \        ID                      id-at-localityName }\nstateOrProvinceName ATTRIBUTE\
    \   ::=     {\n        WITH SYNTAX             DirectoryString {ub-state-name}\n\
    \        ID                      id-at-stateOrProvinceName }\norganizationName\
    \ ATTRIBUTE      ::=     {\n        WITH SYNTAX             DirectoryString {ub-organization-name}\n\
    \        ID                      id-at-organizationName }\norganizationalUnitName\
    \ ATTRIBUTE        ::=     {\n        WITH SYNTAX  DirectoryString {ub-organizational-unit-name}\n\
    \        ID                      id-at-organizationalUnitName }\ntitle ATTRIBUTE\
    \ ::=                     {\n        WITH SYNTAX             DirectoryString {ub-title}\n\
    \        ID                      id-at-title }\n -- Legacy attributes\npkcs9email\
    \ ATTRIBUTE ::= {\n        WITH SYNTAX                     PHGString,\n      \
    \  ID                              emailAddress }\nPHGString ::= IA5String (SIZE(1..ub-emailaddress-length))\n\
    pkcs-9 OBJECT IDENTIFIER ::=\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) 9 }\nemailAddress OBJECT IDENTIFIER ::= { pkcs-9 1 }\n    -- object\
    \ identifiers for Name type and directory attribute support\n-- Object identifier\
    \ assignments --\nid-at   OBJECT IDENTIFIER       ::=     {joint-iso-ccitt(2)\
    \ ds(5) 4}\n-- Attributes --\nid-at-commonName        OBJECT IDENTIFIER      \
    \ ::=     {id-at 3}\nid-at-surname           OBJECT IDENTIFIER       ::=     {id-at\
    \ 4}\nid-at-countryName       OBJECT IDENTIFIER       ::=     {id-at 6}\nid-at-localityName\
    \      OBJECT IDENTIFIER       ::=     {id-at 7}\nid-at-stateOrProvinceName  \
    \   OBJECT IDENTIFIER ::= {id-at 8}\nid-at-organizationName        OBJECT IDENTIFIER\
    \ ::= {id-at 10}\nid-at-organizationalUnitName  OBJECT IDENTIFIER ::= {id-at 11}\n\
    id-at-title             OBJECT IDENTIFIER       ::=     {id-at 12}\nid-at-name\
    \              OBJECT IDENTIFIER       ::=     {id-at 41}\nid-at-givenName   \
    \      OBJECT IDENTIFIER       ::=     {id-at 42}\nid-at-initials          OBJECT\
    \ IDENTIFIER       ::=     {id-at 43}\nid-at-generationQualifier   OBJECT IDENTIFIER\
    \   ::=     {id-at 44}\nid-at-dnQualifier       OBJECT IDENTIFIER       ::=  \
    \   {id-at 46}\n-- Directory string type, used extensively in Name types --\n\
    DirectoryString { INTEGER:maxSize } ::= CHOICE {\n        teletexString      \
    \     TeletexString (SIZE (1..maxSize)),\n        printableString         PrintableString\
    \ (SIZE (1..maxSize)),\n        universalString         UniversalString (SIZE\
    \ (1..maxSize)),\n        bmpString               BMPString (SIZE(1..maxSize)),\n\
    \        utf8String              UTF8String (SIZE(1..maxSize))\n             \
    \               }\n     -- End of ASN.1 for Name type and directory attribute\
    \ support --\n     -- The ASN.1 in this section supports X.400 style names   --\n\
    \     -- for implementations that use the x400Address component --\n     -- of\
    \ GeneralName.                                        --\nORAddress ::= SEQUENCE\
    \ {\n   built-in-standard-attributes BuiltInStandardAttributes,\n   built-in-domain-defined-attributes\n\
    \                        BuiltInDomainDefinedAttributes OPTIONAL,\n   -- see also\
    \ teletex-domain-defined-attributes\n   extension-attributes ExtensionAttributes\
    \ OPTIONAL }\n--  The OR-address is semantically absent from the OR-name if the\n\
    --  built-in-standard-attribute sequence is empty and the\n--  built-in-domain-defined-attributes\
    \ and extension-attributes are\n--  both omitted.\n--      Built-in Standard Attributes\n\
    BuiltInStandardAttributes ::= SEQUENCE {\n   country-name CountryName OPTIONAL,\n\
    \   administration-domain-name AdministrationDomainName OPTIONAL,\n   network-address\
    \      [0] NetworkAddress OPTIONAL,\n   -- see also extended-network-address\n\
    \   terminal-identifier  [1] TerminalIdentifier OPTIONAL,\n   private-domain-name\
    \  [2] PrivateDomainName OPTIONAL,\n   organization-name    [3] OrganizationName\
    \ OPTIONAL,\n   -- see also teletex-organization-name\n   numeric-user-identifier\
    \      [4] NumericUserIdentifier OPTIONAL,\n   personal-name        [5] PersonalName\
    \ OPTIONAL,\n   -- see also teletex-personal-name\n   organizational-unit-names\
    \    [6] OrganizationalUnitNames OPTIONAL\n   -- see also teletex-organizational-unit-names\
    \ -- }\nCountryName ::= [APPLICATION 1] CHOICE {\n   x121-dcc-code NumericString\n\
    \                (SIZE (ub-country-name-numeric-length)),\n   iso-3166-alpha2-code\
    \ PrintableString\n                (SIZE (ub-country-name-alpha-length)) }\nAdministrationDomainName\
    \ ::= [APPLICATION 2] CHOICE {\n   numeric NumericString (SIZE (0..ub-domain-name-length)),\n\
    \   printable PrintableString (SIZE (0..ub-domain-name-length)) }\nNetworkAddress\
    \ ::= X121Address\n-- see also extended-network-address\nX121Address ::= NumericString\
    \ (SIZE (1..ub-x121-address-length))\nTerminalIdentifier ::= PrintableString (SIZE\
    \ (1..ub-terminal-id-length))\nPrivateDomainName ::= CHOICE {\n   numeric NumericString\
    \ (SIZE (1..ub-domain-name-length)),\n   printable PrintableString (SIZE (1..ub-domain-name-length))\
    \ }\nOrganizationName ::= PrintableString\n                           (SIZE (1..ub-organization-name-length))\n\
    -- see also teletex-organization-name\nNumericUserIdentifier ::= NumericString\n\
    \                             (SIZE (1..ub-numeric-user-id-length))\nPersonalName\
    \ ::= SET {\n   surname    [0] PrintableString (SIZE (1..ub-surname-length)),\n\
    \   given-name [1] PrintableString\n                        (SIZE (1..ub-given-name-length))\
    \ OPTIONAL,\n   initials   [2] PrintableString\n                        (SIZE\
    \ (1..ub-initials-length)) OPTIONAL,\n   generation-qualifier [3] PrintableString\n\
    \                (SIZE (1..ub-generation-qualifier-length)) OPTIONAL}\n-- see\
    \ also teletex-personal-name\nOrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)\n\
    \                                        OF OrganizationalUnitName\n-- see also\
    \ teletex-organizational-unit-names\nOrganizationalUnitName ::= PrintableString\
    \ (SIZE\n                        (1..ub-organizational-unit-name-length))\n--\
    \      Built-in Domain-defined Attributes\nBuiltInDomainDefinedAttributes ::=\
    \ SEQUENCE SIZE\n                                (1..ub-domain-defined-attributes)\
    \ OF\n                                BuiltInDomainDefinedAttribute\nBuiltInDomainDefinedAttribute\
    \ ::= SEQUENCE {\n   type PrintableString (SIZE\n                (1..ub-domain-defined-attribute-type-length)),\n\
    \   value PrintableString (SIZE\n                (1..ub-domain-defined-attribute-value-length))\
    \ }\n--      Extension Attributes\nExtensionAttributes ::= SET SIZE (1..ub-extension-attributes)\n\
    \                                        OF ExtensionAttribute\nExtensionAttribute\
    \ ::= SEQUENCE {\n        extension-attribute-type [0] EXTENSION-ATTRIBUTE.&id\n\
    \                                        ({ExtensionAttributeTable}),\n      \
    \  extension-attribute-value [1] EXTENSION-ATTRIBUTE.&Type\n             ({ExtensionAttributeTable}\
    \ {@extension-attribute-type}) }\nEXTENSION-ATTRIBUTE ::= CLASS {\n        &id\
    \     INTEGER (0..ub-extension-attributes) UNIQUE,\n        &Type }\nWITH SYNTAX\
    \ {&Type IDENTIFIED BY &id}\nExtensionAttributeTable EXTENSION-ATTRIBUTE ::= {\n\
    \        common-name |\n        teletex-common-name |\n        teletex-organization-name\
    \ |\n        teletex-personal-name |\n        teletex-organizational-unit-names\
    \ |\n        teletex-domain-defined-attributes |\n        pds-name |\n       \
    \ physical-delivery-country-name |\n        postal-code |\n        physical-delivery-office-name\
    \ |\n        physical-delivery-office-number |\n        extension-OR-address-components\
    \ |\n        physical-delivery-personal-name |\n        physical-delivery-organization-name\
    \ |\n        extension-physical-delivery-address-components |\n        unformatted-postal-address\
    \ |\n        street-address |\n        post-office-box-address |\n        poste-restante-address\
    \ |\n        unique-postal-name |\n        local-postal-attributes |\n       \
    \ extended-network-address |\n        terminal-type }\n--      Extension Standard\
    \ Attributes\ncommon-name EXTENSION-ATTRIBUTE ::= {CommonName IDENTIFIED BY 1}\n\
    CommonName ::= PrintableString (SIZE (1..ub-common-name-length))\nteletex-common-name\
    \ EXTENSION-ATTRIBUTE ::=\n                {TeletexCommonName IDENTIFIED BY 2}\n\
    TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))\nteletex-organization-name\
    \ EXTENSION-ATTRIBUTE ::=\n                {TeletexOrganizationName IDENTIFIED\
    \ BY 3}\nTeletexOrganizationName ::=\n                TeletexString (SIZE (1..ub-organization-name-length))\n\
    teletex-personal-name EXTENSION-ATTRIBUTE ::=\n                {TeletexPersonalName\
    \ IDENTIFIED BY 4}\nTeletexPersonalName ::= SET {\n   surname [0] TeletexString\
    \ (SIZE (1..ub-surname-length)),\n   given-name [1] TeletexString\n          \
    \      (SIZE (1..ub-given-name-length)) OPTIONAL,\n   initials [2] TeletexString\
    \ (SIZE (1..ub-initials-length)) OPTIONAL,\n   generation-qualifier [3] TeletexString\
    \ (SIZE\n                (1..ub-generation-qualifier-length)) OPTIONAL }\nteletex-organizational-unit-names\
    \ EXTENSION-ATTRIBUTE ::=\n   {TeletexOrganizationalUnitNames IDENTIFIED BY 5}\n\
    TeletexOrganizationalUnitNames ::= SEQUENCE SIZE\n        (1..ub-organizational-units)\
    \ OF TeletexOrganizationalUnitName\nTeletexOrganizationalUnitName ::= TeletexString\n\
    \                        (SIZE (1..ub-organizational-unit-name-length))\npds-name\
    \ EXTENSION-ATTRIBUTE ::= {PDSName IDENTIFIED BY 7}\nPDSName ::= PrintableString\
    \ (SIZE (1..ub-pds-name-length))\nphysical-delivery-country-name EXTENSION-ATTRIBUTE\
    \ ::=\n   {PhysicalDeliveryCountryName IDENTIFIED BY 8}\nPhysicalDeliveryCountryName\
    \ ::= CHOICE {\n   x121-dcc-code NumericString (SIZE (ub-country-name-numeric-length)),\n\
    \   iso-3166-alpha2-code PrintableString\n                        (SIZE (ub-country-name-alpha-length))\
    \ }\npostal-code EXTENSION-ATTRIBUTE ::= {PostalCode IDENTIFIED BY 9}\nPostalCode\
    \ ::= CHOICE {\n   numeric-code NumericString (SIZE (1..ub-postal-code-length)),\n\
    \   printable-code PrintableString (SIZE (1..ub-postal-code-length)) }\nphysical-delivery-office-name\
    \ EXTENSION-ATTRIBUTE ::=\n                        {PhysicalDeliveryOfficeName\
    \ IDENTIFIED BY 10}\nPhysicalDeliveryOfficeName ::= PDSParameter\nphysical-delivery-office-number\
    \ EXTENSION-ATTRIBUTE ::=\n   {PhysicalDeliveryOfficeNumber IDENTIFIED BY 11}\n\
    PhysicalDeliveryOfficeNumber ::= PDSParameter\nextension-OR-address-components\
    \ EXTENSION-ATTRIBUTE ::=\n   {ExtensionORAddressComponents IDENTIFIED BY 12}\n\
    ExtensionORAddressComponents ::= PDSParameter\nphysical-delivery-personal-name\
    \ EXTENSION-ATTRIBUTE ::=\n   {PhysicalDeliveryPersonalName IDENTIFIED BY 13}\n\
    PhysicalDeliveryPersonalName ::= PDSParameter\nphysical-delivery-organization-name\
    \ EXTENSION-ATTRIBUTE ::=\n   {PhysicalDeliveryOrganizationName IDENTIFIED BY\
    \ 14}\nPhysicalDeliveryOrganizationName ::= PDSParameter\nextension-physical-delivery-address-components\
    \ EXTENSION-ATTRIBUTE ::=\n   {ExtensionPhysicalDeliveryAddressComponents IDENTIFIED\
    \ BY 15}\nExtensionPhysicalDeliveryAddressComponents ::= PDSParameter\nunformatted-postal-address\
    \ EXTENSION-ATTRIBUTE ::=\n                        {UnformattedPostalAddress IDENTIFIED\
    \ BY 16}\nUnformattedPostalAddress ::= SET {\n   printable-address SEQUENCE SIZE\
    \ (1..ub-pds-physical-address-lines) OF\n           PrintableString (SIZE (1..ub-pds-parameter-length))\
    \ OPTIONAL,\n   teletex-string TeletexString (SIZE\n                         (1..ub-unformatted-address-length))\
    \ OPTIONAL }\nstreet-address EXTENSION-ATTRIBUTE ::=\n                {StreetAddress\
    \ IDENTIFIED BY 17}\nStreetAddress ::= PDSParameter\npost-office-box-address EXTENSION-ATTRIBUTE\
    \ ::=\n                {PostOfficeBoxAddress IDENTIFIED BY 18}\nPostOfficeBoxAddress\
    \ ::= PDSParameter\nposte-restante-address EXTENSION-ATTRIBUTE ::=\n         \
    \       {PosteRestanteAddress IDENTIFIED BY 19}\nPosteRestanteAddress ::= PDSParameter\n\
    unique-postal-name EXTENSION-ATTRIBUTE ::=\n                {UniquePostalName\
    \ IDENTIFIED BY 20}\nUniquePostalName ::= PDSParameter\nlocal-postal-attributes\
    \ EXTENSION-ATTRIBUTE ::=\n                {LocalPostalAttributes IDENTIFIED BY\
    \ 21}\nLocalPostalAttributes ::= PDSParameter\nPDSParameter ::= SET {\n   printable-string\
    \ PrintableString\n            (SIZE(1..ub-pds-parameter-length)) OPTIONAL,\n\
    \   teletex-string TeletexString\n            (SIZE(1..ub-pds-parameter-length))\
    \ OPTIONAL }\nextended-network-address EXTENSION-ATTRIBUTE ::=\n             \
    \   {ExtendedNetworkAddress IDENTIFIED BY 22}\nExtendedNetworkAddress ::= CHOICE\
    \ {\n        e163-4-address SEQUENCE {\n                number [0] NumericString\n\
    \                   (SIZE (1..ub-e163-4-number-length)),\n                sub-address\
    \ [1] NumericString\n                   (SIZE (1..ub-e163-4-sub-address-length))\
    \ OPTIONAL},\n        psap-address [0] PresentationAddress }\nPresentationAddress\
    \ ::= SEQUENCE {\n        pSelector       [0] EXPLICIT OCTET STRING OPTIONAL,\n\
    \        sSelector       [1] EXPLICIT OCTET STRING OPTIONAL,\n        tSelector\
    \       [2] EXPLICIT OCTET STRING OPTIONAL,\n        nAddresses      [3] EXPLICIT\
    \ SET SIZE (1..MAX) OF OCTET STRING}\nterminal-type EXTENSION-ATTRIBUTE ::= {TerminalType\
    \ IDENTIFIED BY 23}\nTerminalType ::= INTEGER {\n   telex (3),\n   teletex (4),\n\
    \   g3-facsimile (5),\n   g4-facsimile (6),\n   ia5-terminal (7),\n   videotex\
    \ (8) } (0..ub-integer-options)\n--      Extension Domain-defined Attributes\n\
    teletex-domain-defined-attributes EXTENSION-ATTRIBUTE ::=\n   {TeletexDomainDefinedAttributes\
    \ IDENTIFIED BY 6}\nTeletexDomainDefinedAttributes ::= SEQUENCE SIZE\n   (1..ub-domain-defined-attributes)\
    \ OF TeletexDomainDefinedAttribute\nTeletexDomainDefinedAttribute ::= SEQUENCE\
    \ {\n    type TeletexString\n         (SIZE (1..ub-domain-defined-attribute-type-length)),\n\
    \    value TeletexString\n         (SIZE (1..ub-domain-defined-attribute-value-length))\
    \ }\n--  specifications of Upper Bounds\n--  shall be regarded as mandatory\n\
    --  from Annex B of ITU-T X.411\n--  Reference Definition of MTS Parameter Upper\
    \ Bounds\n--      Upper Bounds\nub-name INTEGER ::=     32768\nub-common-name\
    \  INTEGER ::=     64\nub-locality-name        INTEGER ::=     128\nub-state-name\
    \   INTEGER ::=     128\nub-organization-name    INTEGER ::=     64\nub-organizational-unit-name\
    \     INTEGER ::=     64\nub-title        INTEGER ::=     64\nub-match       \
    \ INTEGER ::=     128\nub-emailaddress-length INTEGER ::= 128\nub-common-name-length\
    \ INTEGER ::= 64\nub-country-name-alpha-length INTEGER ::= 2\nub-country-name-numeric-length\
    \ INTEGER ::= 3\nub-domain-defined-attributes INTEGER ::= 4\nub-domain-defined-attribute-type-length\
    \ INTEGER ::= 8\nub-domain-defined-attribute-value-length INTEGER ::= 128\nub-domain-name-length\
    \ INTEGER ::= 16\nub-extension-attributes INTEGER ::= 256\nub-e163-4-number-length\
    \ INTEGER ::= 15\nub-e163-4-sub-address-length INTEGER ::= 40\nub-generation-qualifier-length\
    \ INTEGER ::= 3\nub-given-name-length INTEGER ::= 16\nub-initials-length INTEGER\
    \ ::= 5\nub-integer-options INTEGER ::= 256\nub-numeric-user-id-length INTEGER\
    \ ::= 32\nub-organization-name-length INTEGER ::= 64\nub-organizational-unit-name-length\
    \ INTEGER ::= 32\nub-organizational-units INTEGER ::= 4\nub-pds-name-length INTEGER\
    \ ::= 16\nub-pds-parameter-length INTEGER ::= 30\nub-pds-physical-address-lines\
    \ INTEGER ::= 6\nub-postal-code-length INTEGER ::= 16\nub-surname-length INTEGER\
    \ ::= 40\nub-terminal-id-length INTEGER ::= 24\nub-unformatted-address-length\
    \ INTEGER ::= 180\nub-x121-address-length INTEGER ::= 16\n-- Note - upper bounds\
    \ on TeletexString are measured in characters.\n-- A significantly greater number\
    \ of octets will be required to hold\n-- such a value.  As a minimum, 16 octets,\
    \ or twice the specified upper\n-- bound, whichever is the larger, should be allowed.\n\
    END\nB.2 Implicitly Tagged Module, 1993 Syntax\nPKIX1Implicit93  {iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n   security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit-93(4)}\n\
    DEFINITIONS IMPLICIT TAGS::=\nBEGIN\n--EXPORTS ALL --\nIMPORTS\n        id-pe,\
    \ id-qt, id-kp, id-ad, id-qt-unotice,\n                ORAddress, Name, RelativeDistinguishedName,\n\
    \                CertificateSerialNumber, CertificateList,\n                AlgorithmIdentifier,\
    \ ub-name, DirectoryString,\n                Attribute, EXTENSION\n          \
    \      FROM PKIX1Explicit93 {iso(1) identified-organization(3)\n             \
    \   dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n                id-mod(0)\
    \ id-pkix1-explicit-93(3)};\n-- Key and policy information extensions --\nauthorityKeyIdentifier\
    \ EXTENSION ::= {\n        SYNTAX          AuthorityKeyIdentifier\n        IDENTIFIED\
    \ BY   id-ce-authorityKeyIdentifier }\nAuthorityKeyIdentifier ::= SEQUENCE {\n\
    \    keyIdentifier               [0] KeyIdentifier            OPTIONAL,\n    authorityCertIssuer\
    \         [1] GeneralNames             OPTIONAL,\n    authorityCertSerialNumber\
    \   [2] CertificateSerialNumber  OPTIONAL }\n        ( WITH COMPONENTS       {...,\
    \ authorityCertIssuer PRESENT,\n                                authorityCertSerialNumber\
    \ PRESENT} |\n         WITH COMPONENTS        {..., authorityCertIssuer ABSENT,\n\
    \                                authorityCertSerialNumber ABSENT} )\nKeyIdentifier\
    \ ::= OCTET STRING\nsubjectKeyIdentifier EXTENSION ::= {\n        SYNTAX     \
    \     SubjectKeyIdentifier\n        IDENTIFIED BY   id-ce-subjectKeyIdentifier\
    \ }\nSubjectKeyIdentifier ::= KeyIdentifier\nkeyUsage EXTENSION ::= {\n      \
    \  SYNTAX  KeyUsage\n        IDENTIFIED BY id-ce-keyUsage }\nKeyUsage ::= BIT\
    \ STRING {\n        digitalSignature     (0),\n        nonRepudiation       (1),\n\
    \        keyEncipherment      (2),\n        dataEncipherment     (3),\n      \
    \  keyAgreement         (4),\n        keyCertSign          (5),\n        cRLSign\
    \              (6),\n      encipherOnly         (7),\n      decipherOnly     \
    \    (8) }\nextendedKeyUsage EXTENSION ::= {\n        SYNTAX SEQUENCE SIZE (1..MAX)\
    \ OF KeyPurposeId\n        IDENTIFIED BY id-ce-extKeyUsage }\nKeyPurposeId ::=\
    \ OBJECT IDENTIFIER\n-- PKIX-defined extended key purpose OIDs\nid-kp-serverAuth\
    \      OBJECT IDENTIFIER ::= { id-kp 1 }\nid-kp-clientAuth      OBJECT IDENTIFIER\
    \ ::= { id-kp 2 }\nid-kp-codeSigning     OBJECT IDENTIFIER ::= { id-kp 3 }\nid-kp-emailProtection\
    \ OBJECT IDENTIFIER ::= { id-kp 4 }\nid-kp-ipsecEndSystem  OBJECT IDENTIFIER ::=\
    \ { id-kp 5 }\nid-kp-ipsecTunnel     OBJECT IDENTIFIER ::= { id-kp 6 }\nid-kp-ipsecUser\
    \       OBJECT IDENTIFIER ::= { id-kp 7 }\nid-kp-timeStamping    OBJECT IDENTIFIER\
    \ ::= { id-kp 8 }\nprivateKeyUsagePeriod EXTENSION ::= {\n        SYNTAX  PrivateKeyUsagePeriod\n\
    \        IDENTIFIED BY { id-ce-privateKeyUsagePeriod } }\nPrivateKeyUsagePeriod\
    \ ::= SEQUENCE {\n        notBefore       [0]     GeneralizedTime OPTIONAL,\n\
    \        notAfter        [1]     GeneralizedTime OPTIONAL }\n        ( WITH COMPONENTS\
    \       {..., notBefore PRESENT} |\n        WITH COMPONENTS         {..., notAfter\
    \ PRESENT} )\ncertificatePolicies EXTENSION ::= {\n        SYNTAX  CertificatePoliciesSyntax\n\
    \        IDENTIFIED BY id-ce-certificatePolicies }\nCertificatePoliciesSyntax\
    \ ::=\n                SEQUENCE SIZE (1..MAX) OF PolicyInformation\nPolicyInformation\
    \ ::= SEQUENCE {\n        policyIdentifier   CertPolicyId,\n        policyQualifiers\
    \   SEQUENCE SIZE (1..MAX) OF\n                PolicyQualifierInfo OPTIONAL }\n\
    CertPolicyId ::= OBJECT IDENTIFIER\nPolicyQualifierInfo ::= SEQUENCE {\n     \
    \   policyQualifierId       CERT-POLICY-QUALIFIER.&id\n                      \
    \              ({SupportedPolicyQualifiers}),\n        qualifier             \
    \  CERT-POLICY-QUALIFIER.&Qualifier\n                                    ({SupportedPolicyQualifiers}\n\
    \                                    {@policyQualifierId})OPTIONAL }\nSupportedPolicyQualifiers\
    \ CERT-POLICY-QUALIFIER ::= { noticeToUser |\n                               \
    \                       pointerToCPS }\nCERT-POLICY-QUALIFIER ::= CLASS {\n  \
    \      &id             OBJECT IDENTIFIER UNIQUE,\n        &Qualifier      OPTIONAL\
    \ }\nWITH SYNTAX {\n        POLICY-QUALIFIER-ID     &id\n        [QUALIFIER-TYPE\
    \ &Qualifier] }\npolicyMappings EXTENSION ::= {\n        SYNTAX  PolicyMappingsSyntax\n\
    \        IDENTIFIED BY id-ce-policyMappings }\nPolicyMappingsSyntax ::= SEQUENCE\
    \ SIZE (1..MAX) OF SEQUENCE {\n        issuerDomainPolicy           CertPolicyId,\n\
    \        subjectDomainPolicy          CertPolicyId }\n-- Certificate subject and\
    \ certificate issuer attributes extensions --\nsubjectAltName EXTENSION ::= {\n\
    \        SYNTAX  GeneralNames\n        IDENTIFIED BY id-ce-subjectAltName }\n\
    GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\nGeneralName ::= CHOICE\
    \ {\n        otherName                   [0] INSTANCE OF OTHER-NAME,\n       \
    \ rfc822Name                  [1] IA5String,\n        dNSName                \
    \     [2] IA5String,\n        x400Address                 [3] ORAddress,\n   \
    \     directoryName               [4] Name,\n        ediPartyName            \
    \    [5] EDIPartyName,\n        uniformResourceIdentifier   [6] IA5String,\n \
    \       iPAddress                   [7] OCTET STRING,\n        registeredID  \
    \              [8] OBJECT IDENTIFIER }\nOTHER-NAME ::= TYPE-IDENTIFIER\nEDIPartyName\
    \ ::= SEQUENCE {\n        nameAssigner        [0] DirectoryString {ub-name} OPTIONAL,\n\
    \        partyName           [1] DirectoryString {ub-name} }\nissuerAltName EXTENSION\
    \ ::= {\n        SYNTAX  GeneralNames\n        IDENTIFIED BY id-ce-issuerAltName\
    \ }\nsubjectDirectoryAttributes EXTENSION ::= {\n        SYNTAX  AttributesSyntax\n\
    \        IDENTIFIED BY id-ce-subjectDirectoryAttributes }\nAttributesSyntax ::=\
    \ SEQUENCE SIZE (1..MAX) OF Attribute\n-- Certification path constraints extensions\
    \ --\nbasicConstraints EXTENSION ::= {\n        SYNTAX  BasicConstraintsSyntax\n\
    \        IDENTIFIED BY id-ce-basicConstraints }\nBasicConstraintsSyntax ::= SEQUENCE\
    \ {\n        cA                      BOOLEAN DEFAULT FALSE,\n        pathLenConstraint\
    \       INTEGER (0..MAX) OPTIONAL }\nnameConstraints EXTENSION ::= {\n       \
    \ SYNTAX  NameConstraintsSyntax\n        IDENTIFIED BY id-ce-nameConstraints }\n\
    NameConstraintsSyntax ::= SEQUENCE {\n        permittedSubtrees       [0]    \
    \ GeneralSubtrees OPTIONAL,\n        excludedSubtrees        [1]     GeneralSubtrees\
    \ OPTIONAL }\nGeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\nGeneralSubtree\
    \ ::= SEQUENCE {\n        base                    GeneralName,\n        minimum\
    \         [0]     BaseDistance DEFAULT 0,\n        maximum         [1]     BaseDistance\
    \ OPTIONAL }\nBaseDistance ::= INTEGER (0..MAX)\npolicyConstraints EXTENSION ::=\
    \ {\n        SYNTAX  PolicyConstraintsSyntax\n        IDENTIFIED BY id-ce-policyConstraints\
    \ }\nPolicyConstraintsSyntax ::= SEQUENCE {\n        requireExplicitPolicy   [0]\
    \ SkipCerts OPTIONAL,\n        inhibitPolicyMapping    [1] SkipCerts OPTIONAL\
    \ }\nSkipCerts ::= INTEGER (0..MAX)\n-- Basic CRL extensions --\ncRLNumber EXTENSION\
    \ ::= {\n        SYNTAX  CRLNumber\n        IDENTIFIED BY id-ce-cRLNumber }\n\
    CRLNumber ::= INTEGER (0..MAX)\nreasonCode EXTENSION ::= {\n        SYNTAX  CRLReason\n\
    \        IDENTIFIED BY id-ce-reasonCode }\nCRLReason ::= ENUMERATED {\n      \
    \  unspecified             (0),\n        keyCompromise           (1),\n      \
    \  cACompromise            (2),\n        affiliationChanged      (3),\n      \
    \  superseded              (4),\n        cessationOfOperation    (5),\n      \
    \  certificateHold         (6),\n        removeFromCRL           (8) }\ninstructionCode\
    \ EXTENSION ::= {\n        SYNTAX  HoldInstruction\n        IDENTIFIED BY id-ce-instructionCode\
    \ }\nHoldInstruction ::= OBJECT IDENTIFIER\n-- holdinstructions described in this\
    \ specification, from ANSI x9\n-- ANSI x9 arc holdinstruction arc\nholdInstruction\
    \ OBJECT IDENTIFIER ::= {\n     joint-iso-ccitt(2) member-body(2) us(840) x9cm(10040)\
    \ 2}\n-- ANSI X9 holdinstructions referenced by this standard\nid-holdinstruction-none\
    \ OBJECT IDENTIFIER ::= {holdInstruction 1}\nid-holdinstruction-callissuer OBJECT\
    \ IDENTIFIER ::= {holdInstruction 2}\nid-holdinstruction-reject OBJECT IDENTIFIER\
    \ ::= {holdInstruction 3}\ninvalidityDate EXTENSION ::= {\n        SYNTAX  GeneralizedTime\n\
    \        IDENTIFIED BY id-ce-invalidityDate }\n-- CRL distribution points and\
    \ delta-CRL extensions --\ncRLDistributionPoints EXTENSION ::= {\n        SYNTAX\
    \  CRLDistPointsSyntax\n        IDENTIFIED BY id-ce-cRLDistributionPoints }\n\
    CRLDistPointsSyntax ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\nDistributionPoint\
    \ ::= SEQUENCE {\n        distributionPoint       [0]     DistributionPointName\
    \ OPTIONAL,\n        reasons         [1]     ReasonFlags OPTIONAL,\n        cRLIssuer\
    \               [2]     GeneralNames OPTIONAL }\nDistributionPointName ::= CHOICE\
    \ {\n        fullName                [0]     GeneralNames,\n        nameRelativeToCRLIssuer\
    \ [1]     RelativeDistinguishedName }\nReasonFlags ::= BIT STRING {\n        unused\
    \                  (0),\n        keyCompromise           (1),\n        caCompromise\
    \            (2),\n        affiliationChanged      (3),\n        superseded  \
    \            (4),\n        cessationOfOperation    (5),\n        certificateHold\
    \         (6) }\nissuingDistributionPoint EXTENSION ::= {\n        SYNTAX  IssuingDistPointSyntax\n\
    \        IDENTIFIED BY id-ce-issuingDistributionPoint }\nIssuingDistPointSyntax\
    \ ::= SEQUENCE {\n        distributionPoint       [0] DistributionPointName OPTIONAL,\n\
    \        onlyContainsUserCerts   [1] BOOLEAN DEFAULT FALSE,\n        onlyContainsCACerts\
    \     [2] BOOLEAN DEFAULT FALSE,\n        onlySomeReasons         [3] ReasonFlags\
    \ OPTIONAL,\n        indirectCRL             [4] BOOLEAN DEFAULT FALSE }\ncertificateIssuer\
    \ EXTENSION ::= {\n        SYNTAX          GeneralNames\n        IDENTIFIED BY\
    \ id-ce-certificateIssuer }\ndeltaCRLIndicator EXTENSION ::= {\n        SYNTAX\
    \          BaseCRLNumber\n        IDENTIFIED BY id-ce-deltaCRLIndicator }\nBaseCRLNumber\
    \ ::= CRLNumber\n-- Object identifier assignments for ISO certificate extensions\
    \ --\nid-ce   OBJECT IDENTIFIER       ::=     {joint-iso-ccitt(2) ds(5) 29}\n\
    id-ce-subjectDirectoryAttributes   OBJECT IDENTIFIER ::= {id-ce 9}\nid-ce-subjectKeyIdentifier\
    \         OBJECT IDENTIFIER ::= {id-ce 14}\nid-ce-keyUsage                   \
    \  OBJECT IDENTIFIER ::= {id-ce 15}\nid-ce-privateKeyUsagePeriod        OBJECT\
    \ IDENTIFIER ::= {id-ce 16}\nid-ce-subjectAltName               OBJECT IDENTIFIER\
    \ ::= {id-ce 17}\nid-ce-issuerAltName                OBJECT IDENTIFIER ::= {id-ce\
    \ 18}\nid-ce-basicConstraints             OBJECT IDENTIFIER ::= {id-ce 19}\nid-ce-cRLNumber\
    \                    OBJECT IDENTIFIER ::= {id-ce 20}\nid-ce-reasonCode      \
    \             OBJECT IDENTIFIER ::= {id-ce 21}\nid-ce-instructionCode        \
    \      OBJECT IDENTIFIER ::= {id-ce 23}\nid-ce-invalidityDate               OBJECT\
    \ IDENTIFIER ::= {id-ce 24}\nid-ce-deltaCRLIndicator            OBJECT IDENTIFIER\
    \ ::= {id-ce 27}\nid-ce-issuingDistributionPoint     OBJECT IDENTIFIER ::= {id-ce\
    \ 28}\nid-ce-certificateIssuer            OBJECT IDENTIFIER ::= {id-ce 29}\nid-ce-nameConstraints\
    \              OBJECT IDENTIFIER ::= {id-ce 30}\nid-ce-cRLDistributionPoints \
    \       OBJECT IDENTIFIER ::= {id-ce 31}\nid-ce-certificatePolicies          OBJECT\
    \ IDENTIFIER ::= {id-ce 32}\nid-ce-policyMappings               OBJECT IDENTIFIER\
    \ ::= {id-ce 33}\nid-ce-policyConstraints            OBJECT IDENTIFIER ::= {id-ce\
    \ 36}\nid-ce-authorityKeyIdentifier       OBJECT IDENTIFIER ::= {id-ce 35}\nid-ce-extKeyUsage\
    \                  OBJECT IDENTIFIER ::= {id-ce 37}\n-- PKIX 1 extensions\nauthorityInfoAccess\
    \ EXTENSION ::= {\n        SYNTAX  AuthorityInfoAccessSyntax\n        IDENTIFIED\
    \ BY id-pe-authorityInfoAccess }\nAuthorityInfoAccessSyntax  ::=\n        SEQUENCE\
    \ SIZE (1..MAX) OF AccessDescription\nAccessDescription  ::=  SEQUENCE {\n   \
    \     accessMethod          OBJECT IDENTIFIER,\n        accessLocation       \
    \ GeneralName  }\nid-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }\n\
    id-ad-ocsp      OBJECT IDENTIFIER ::= { id-ad 1 }\nid-ad-caIssuers OBJECT IDENTIFIER\
    \ ::= { id-ad 2 }\n-- PKIX policy qualifier definitions\nnoticeToUser CERT-POLICY-QUALIFIER\
    \ ::= {\n     POLICY-QUALIFIER-ID    id-qt-cps QUALIFIER-TYPE       CPSuri}\n\
    pointerToCPS CERT-POLICY-QUALIFIER ::= {\n     POLICY-QUALIFIER-ID    id-qt-unotice\
    \ QUALIFIER-TYPE   UserNotice}\nid-qt-cps      OBJECT IDENTIFIER ::=  { id-qt\
    \ 1 }\nid-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\nCPSuri ::= IA5String\n\
    UserNotice ::= SEQUENCE {\n     noticeRef        NoticeReference OPTIONAL,\n \
    \    explicitText     DisplayText OPTIONAL}\nNoticeReference ::= SEQUENCE {\n\
    \     organization     DisplayText,\n     noticeNumbers    SEQUENCE OF INTEGER\
    \ }\nDisplayText ::= CHOICE {\n     visibleString    VisibleString  (SIZE (1..200)),\n\
    \     bmpString        BMPString      (SIZE (1..200)),\n     utf8String      \
    \ UTF8String     (SIZE (1..200)) }\nEND\nAppendix C. ASN.1 Notes\n   The construct\
    \ \"SEQUENCE SIZE (1..MAX) OF\" appears in several ASN.1\n   constructs. A valid\
    \ ASN.1 sequence will have zero or more entries.\n   The SIZE (1..MAX) construct\
    \ constrains the sequence to have at least\n   one entry. MAX indicates the upper\
    \ bound is unspecified.\n   Implementations are free to choose an upper bound\
    \ that suits their\n   environment.\n   The construct \"positiveInt ::= INTEGER\
    \ (0..MAX)\" defines positiveInt\n   as a subtype of INTEGER containing integers\
    \ greater than or equal to\n   zero.  The upper bound is unspecified. Implementations\
    \ are free to\n   select an upper bound that suits their environment.\n   The\
    \ character string type PrintableString supports a very basic Latin\n   character\
    \ set:  the lower case letters 'a' through 'z', upper case\n   letters 'A' through\
    \ 'Z', the digits '0' through '9', eleven special\n   characters ' \" ( ) + ,\
    \ - . / : ? and space.\n   The character string type TeletexString is a superset\
    \ of\n   PrintableString.  TeletexString supports a fairly standard (ascii-\n\
    \   like) Latin character set, Latin characters with non-spacing accents\n   and\
    \ Japanese characters.\n   The character string type UniversalString supports\
    \ any of the\n   characters allowed by ISO 10646-1. ISO 10646 is the Universal\n\
    \   multiple-octet coded Character Set (UCS).  ISO 10646-1 specifes the\n   architecture\
    \ and the \"basic multilingual plane\" - a large standard\n   character set which\
    \ includes all major world character standards.\n   The character string type\
    \ UTF8String will be introduced in the 1998\n   version of ASN.1.  UTF8String\
    \ is a universal type and has been\n   assigned tag number 12.  The content of\
    \ UTF8String was defined by RFC\n   2044 and updated in RFC 2279, \"UTF-8, a transformation\
    \ Format of ISP\n   10646.\"  ISO is expected to formally add UTF8String to the\
    \ list of\n   choices for DirectoryString in 1998 as well.\n   In anticipation\
    \ of these changes, and in conformance with IETF Best\n   Practices codified in\
    \ RFC 2277, IETF Policy on Character Sets and\n   Languages, this document includes\
    \ UTF8String as a choice in\n   DirectoryString and the CPS qualifier extensions.\n\
    Appendix D. Examples\n   This section contains four examples: three certificates\
    \ and a CRL.\n   The first two certificates and the CRL comprise a minimal\n \
    \  certification path.\n   Section D.1 contains an annotated hex dump of a \"\
    self-signed\"\n   certificate issued by a CA whose distinguished name is\n   cn=us,o=gov,ou=nist.\
    \  The certificate contains a DSA public key with\n   parameters, and is signed\
    \ by the corresponding DSA private key.\n   Section D.2 contains an annotated\
    \ hex dump of an end-entity\n   certificate.  The end entity certificate contains\
    \ a DSA public key,\n   and is signed by the private key corresponding to the\
    \ \"self-signed\"\n   certificate in section D.1.\n   Section D.3 contains a dump\
    \ of an end entity certificate which\n   contains an RSA public key and is signed\
    \ with RSA and MD5.  This\n   certificate is not part of the minimal certification\
    \ path.\n   Section D.4 contains an annotated hex dump of a CRL.  The CRL is\n\
    \   issued by the CA whose distinguished name is cn=us,o=gov,ou=nist and\n   the\
    \ list of revoked certificates includes the end entity certificate\n   presented\
    \ in D.2.\nD.1 Certificate\n   This section contains an annotated hex dump of\
    \ a 699 byte version 3\n   certificate.  The certificate contains the following\
    \ information:\n   (a) the serial number is 17 (11 hex);\n   (b) the certificate\
    \ is signed with DSA and the SHA-1 hash algorithm;\n   (c) the issuer's distinguished\
    \ name is OU=nist; O=gov; C=US\n   (d) and the subject's distinguished name is\
    \ OU=nist; O=gov; C=US\n   (e) the certificate was issued on June 30, 1997 and\
    \ will expire on\n   December 31, 1997;\n   (f) the certificate contains a 1024\
    \ bit DSA public key with\n   parameters;\n   (g) the certificate contains a subject\
    \ key identifier extension; and\n   (h) the certificate is a CA certificate (as\
    \ indicated through the\n   basic constraints extension.)\n0000 30 82 02 b7  695:\
    \ SEQUENCE\n0004 30 82 02 77  631: . SEQUENCE    tbscertificate\n0008 a0 03  \
    \        3: . . [0]\n0010 02 01          1: . . . INTEGER 2\n                \
    \     : 02\n0013 02 01          1: . . INTEGER 17\n                     : 11\n\
    0016 30 09          9: . . SEQUENCE\n0018 06 07          7: . . . OID 1.2.840.10040.4.3:\
    \ dsa-with-sha\n                     : 2a 86 48 ce 38 04 03\n0027 30 2a      \
    \   42: . . SEQUENCE\n0029 31 0b         11: . . . SET\n0031 30 09          9:\
    \ . . . . SEQUENCE\n0033 06 03          3: . . . . . OID 2.5.4.6: C\n        \
    \             : 55 04 06\n0038 13 02          2: . . . . . PrintableString  'US'\n\
    \                     : 55 53\n0042 31 0c         12: . . . SET\n0044 30 0a  \
    \       10: . . . . SEQUENCE\n0046 06 03          3: . . . . . OID 2.5.4.10: O\n\
    \                     : 55 04 0a\n0051 13 03          3: . . . . . PrintableString\
    \  'gov'\n                     : 67 6f 76\n0056 31 0d         13: . . . SET\n\
    0058 30 0b         11: . . . . SEQUENCE\n0060 06 03          3: . . . . . OID\
    \ 2.5.4.11: OU\n                     : 55 04 0b\n0065 13 04          4: . . .\
    \ . . PrintableString  'nist'\n                     : 6e 69 73 74\n0071 30 1e\
    \         30: . . SEQUENCE\n0073 17 0d         13: . . . UTCTime  '970630000000Z'\n\
    \                     : 39 37 30 36 33 30 30 30 30 30 30 30 5a\n0088 17 0d   \
    \      13: . . . UTCTime  '971231000000Z'\n                     : 39 37 31 32\
    \ 33 31 30 30 30 30 30 30 5a\n0103 30 2a         42: . . SEQUENCE\n0105 31 0b\
    \         11: . . . SET\n0107 30 09          9: . . . . SEQUENCE\n0109 06 03 \
    \         3: . . . . . OID 2.5.4.6: C\n                     : 55 04 06\n0114 13\
    \ 02          2: . . . . . PrintableString  'US'\n                     : 55 53\n\
    0118 31 0c         12: . . . SET\n0120 30 0a         10: . . . . SEQUENCE\n0122\
    \ 06 03          3: . . . . . OID 2.5.4.10: O\n                     : 55 04 0a\n\
    0127 13 03          3: . . . . . PrintableString  'gov'\n                    \
    \ : 67 6f 76\n0132 31 0d         13: . . . SET\n0134 30 0b         11: . . . .\
    \ SEQUENCE\n0136 06 03          3: . . . . . OID 2.5.4.11: OU\n              \
    \       : 55 04 0b\n0141 13 04          4: . . . . . PrintableString  'nist'\n\
    \                     : 6e 69 73 74\n0147 30 82 01 b4  436: . . SEQUENCE\n0151\
    \ 30 82 01 29  297: . . . SEQUENCE\n0155 06 07          7: . . . . OID 1.2.840.10040.4.1:\
    \ dsa\n                     : 2a 86 48 ce 38 04 01\n0164 30 82 01 1c  284: . .\
    \ . . SEQUENCE\n0168 02 81 80     128: . . . . . INTEGER\n                   \
    \  : d4 38 02 c5 35 7b d5 0b a1 7e 5d 72 59 63 55 d3\n                     : 45\
    \ 56 ea e2 25 1a 6b c5 a4 ab aa 0b d4 62 b4 d2\n                     : 21 b1 95\
    \ a2 c6 01 c9 c3 fa 01 6f 79 86 83 3d 03\n                     : 61 e1 f1 92 ac\
    \ bc 03 4e 89 a3 c9 53 4a f7 e2 a6\n                     : 48 cf 42 1e 21 b1 5c\
    \ 2b 3a 7f ba be 6b 5a f7 0a\n                     : 26 d8 8e 1b eb ec bf 1e 5a\
    \ 3f 45 c0 bd 31 23 be\n                     : 69 71 a7 c2 90 fe a5 d6 80 b5 24\
    \ dc 44 9c eb 4d\n                     : f9 da f0 c8 e8 a2 4c 99 07 5c 8e 35 2b\
    \ 7d 57 8d\n0299 02 14         20: . . . . . INTEGER\n                     : a7\
    \ 83 9b f3 bd 2c 20 07 fc 4c e7 e8 9f f3 39 83\n                     : 51 0d dc\
    \ dd\n0321 02 81 80     128: . . . . . INTEGER\n                     : 0e 3b 46\
    \ 31 8a 0a 58 86 40 84 e3 a1 22 0d 88 ca\n                     : 90 88 57 64 9f\
    \ 01 21 e0 15 05 94 24 82 e2 10 90\n                     : d9 e1 4e 10 5c e7 54\
    \ 6b d4 0c 2b 1b 59 0a a0 b5\n                     : a1 7d b5 07 e3 65 7c ea 90\
    \ d8 8e 30 42 e4 85 bb\n                     : ac fa 4e 76 4b 78 0e df 6c e5 a6\
    \ e1 bd 59 77 7d\n                     : a6 97 59 c5 29 a7 b3 3f 95 3e 9d f1 59\
    \ 2d f7 42\n                     : 87 62 3f f1 b8 6f c7 3d 4b b8 8d 74 c4 ca 44\
    \ 90\n                     : cf 67 db de 14 60 97 4a d1 f7 6d 9e 09 94 c4 0d\n\
    0452 03 81 84     132: . . . BIT STRING  (0 unused bits)\n                   \
    \  : 02 81 80 aa 98 ea 13 94 a2 db f1 5b 7f 98 2f 78\n                     : e7\
    \ d8 e3 b9 71 86 f6 80 2f 40 39 c3 da 3b 4b 13\n                     : 46 26 ee\
    \ 0d 56 c5 a3 3a 39 b7 7d 33 c2 6b 5c 77\n                     : 92 f2 55 65 90\
    \ 39 cd 1a 3c 86 e1 32 eb 25 bc 91\n                     : c4 ff 80 4f 36 61 bd\
    \ cc e2 61 04 e0 7e 60 13 ca\n                     : c0 9c dd e0 ea 41 de 33 c1\
    \ f1 44 a9 bc 71 de cf\n                     : 59 d4 6e da 44 99 3c 21 64 e4 78\
    \ 54 9d d0 7b ba\n                     : 4e f5 18 4d 5e 39 30 bf e0 d1 f6 f4 83\
    \ 25 4f 14\n                     : aa 71 e1\n0587 a3 32         50: . . [3]\n\
    0589 30 30         48: . . . SEQUENCE\n0591 30 0f          9: . . . . SEQUENCE\n\
    0593 06 03          3: . . . . . OID 2.5.29.19: basicConstraints\n           \
    \          : 55 1d 13\n0598 01 01          1: . . . . . TRUE\n               \
    \      : ff\n0601 04 05          5: . . . . . OCTET STRING\n                 \
    \    : 30 03 01 01 ff\n0608 30 1d         29: . SEQUENCE\n0610 06 03         \
    \ 3: . . . . . OID 2.5.29.14: subjectKeyIdentifier\n                     : 55\
    \ 1d 0e\n0615 04 16         22: . . . . . OCTET STRING\n                     :\
    \ 04 14 e7 26 c5 54 cd 5b a3 6f 35 68 95 aa d5 ff\n                     : 1c 21\
    \ e4 22 75 d6\n0639 30 09          9: . SEQUENCE\n0641 06 07          7: . . OID\
    \ 1.2.840.10040.4.3: dsa-with-sha\n                     : 2a 86 48 ce 38 04 03\n\
    0650 03 2f         47: . BIT STRING  (0 unused bits)\n                     : 30\
    \ 2c 02 14 a0 66 c1 76 33 99 13 51 8d 93 64 2f\n                     : ca 13 73\
    \ de 79 1a 7d 33 02 14 5d 90 f6 ce 92 4a\n                     : bf 29 11 24 80\
    \ 28 a6 5a 8e 73 b6 76 02 68\nD.2 Certificate\n   This section contains an annotated\
    \ hex dump of a 730 byte version 3\n   certificate.  The certificate contains\
    \ the following information:\n   (a) the serial number is 18 (12 hex);\n   (b)\
    \ the certificate is signed with DSA and the SHA-1 hash algorithm;\n   (c) the\
    \ issuer's distinguished name is OU=nist; O=gov; C=US\n   (d) and the subject's\
    \ distinguished name is CN=Tim Polk; OU=nist;\n   O=gov; C=US\n   (e) the certificate\
    \ was valid from July 30, 1997 through December 1,\n   1997;\n   (f) the certificate\
    \ contains a 1024 bit DSA public key;\n   (g) the certificate is an end entity\
    \ certificate, as the basic\n   constraints extension is not present;\n   (h)\
    \ the certificate contains an authority key identifier extension;\n   and\n  \
    \ (i) the certificate includes one alternative name - an RFC 822\n   address.\n\
    0000 30 82 02 d6  726: SEQUENCE\n0004 30 82 02 96  662: . SEQUENCE\n0008 a0 03\
    \          3: . . [0]\n0010 02 01          1: . . . INTEGER 2\n              \
    \       : 02\n0013 02 01          1: . . INTEGER 18\n                     : 12\n\
    0016 30 09          9: . . SEQUENCE\n0018 06 07          7: . . . OID 1.2.840.10040.4.3:\
    \ dsa-with-sha\n                     : 2a 86 48 ce 38 04 03\n0027 30 2a      \
    \   42: . . SEQUENCE\n0029 31 0b         11: . . . SET\n0031 30 09          9:\
    \ . . . . SEQUENCE\n0033 06 03          3: . . . . . OID 2.5.4.6: C\n        \
    \             : 55 04 06\n0038 13 02          2: . . . . . PrintableString  'US'\n\
    \                     : 55 53\n0042 31 0c         12: . . . SET\n0044 30 0a  \
    \       10: . . . . SEQUENCE\n0046 06 03          3: . . . . . OID 2.5.4.10: O\n\
    \                     : 55 04 0a\n0051 13 03          3: . . . . . PrintableString\
    \  'gov'\n                     : 67 6f 76\n0056 31 0d         13: . . . SET\n\
    0058 30 0b         11: . . . . SEQUENCE\n0060 06 03          3: . . . . . OID\
    \ 2.5.4.11: OU\n                     : 55 04 0b\n0065 13 04          4: . . .\
    \ . . PrintableString  'nist'\n                     : 6e 69 73 74\n0071 30 1e\
    \         30: . . SEQUENCE\n0073 17 0d         13: . . . UTCTime  '970730000000Z'\n\
    \                     : 39 37 30 37 33 30 30 30 30 30 30 30 5a\n0088 17 0d   \
    \      13: . . . UTCTime  '971201000000Z'\n                     : 39 37 31 32\
    \ 30 31 30 30 30 30 30 30 5a\n0103 30 3d         61: . . SEQUENCE\n0105 31 0b\
    \         11: . . . SET\n0107 30 09          9: . . . . SEQUENCE\n0109 06 03 \
    \         3: . . . . . OID 2.5.4.6: C\n                     : 55 04 06\n0114 13\
    \ 02          2: . . . . . PrintableString  'US'\n                     : 55 53\n\
    0118 31 0c         12: . . . SET\n0120 30 0a         10: . . . . SEQUENCE\n0122\
    \ 06 03          3: . . . . . OID 2.5.4.10: O\n                     : 55 04 0a\n\
    0127 13 03          3: . . . . . PrintableString  'gov'\n                    \
    \ : 67 6f 76\n0132 31 0d         13: . . . SET\n0134 30 0b         11: . . . .\
    \ SEQUENCE\n0136 06 03          3: . . . . . OID 2.5.4.11: OU\n              \
    \       : 55 04 0b\n0141 13 04          4: . . . . . PrintableString  'nist'\n\
    \                     : 6e 69 73 74\n0147 31 11         17: . . . SET\n0149 30\
    \ 0f         15: . . . . SEQUENCE\n0151 06 03          3: . . . . . OID 2.5.4.3:\
    \ CN\n                     : 55 04 03\n0156 13 08          8: . . . . . PrintableString\
    \  'Tim Polk'\n                     : 54 69 6d 20 50 6f 6c 6b\n0166 30 82 01 b4\
    \  436: . . SEQUENCE\n0170 30 82 01 29  297: . . . SEQUENCE\n0174 06 07      \
    \    7: . . . . OID 1.2.840.10040.4.1: dsa\n                     : 2a 86 48 ce\
    \ 38 04 01\n0183 30 82 01 1c  284: . . . . SEQUENCE\n0187 02 81 80     128: .\
    \ . . . . INTEGER\n                     : d4 38 02 c5 35 7b d5 0b a1 7e 5d 72\
    \ 59 63 55 d3\n                     : 45 56 ea e2 25 1a 6b c5 a4 ab aa 0b d4 62\
    \ b4 d2\n                     : 21 b1 95 a2 c6 01 c9 c3 fa 01 6f 79 86 83 3d 03\n\
    \                     : 61 e1 f1 92 ac bc 03 4e 89 a3 c9 53 4a f7 e2 a6\n    \
    \                 : 48 cf 42 1e 21 b1 5c 2b 3a 7f ba be 6b 5a f7 0a\n        \
    \             : 26 d8 8e 1b eb ec bf 1e 5a 3f 45 c0 bd 31 23 be\n            \
    \         : 69 71 a7 c2 90 fe a5 d6 80 b5 24 dc 44 9c eb 4d\n                \
    \     : f9 da f0 c8 e8 a2 4c 99 07 5c 8e 35 2b 7d 57 8d\n0318 02 14         20:\
    \ . . . . . INTEGER\n                     : a7 83 9b f3 bd 2c 20 07 fc 4c e7 e8\
    \ 9f f3 39 83\n                     : 51 0d dc dd\n0340 02 81 80     128: . .\
    \ . . . INTEGER\n                     : 0e 3b 46 31 8a 0a 58 86 40 84 e3 a1 22\
    \ 0d 88 ca\n                     : 90 88 57 64 9f 01 21 e0 15 05 94 24 82 e2 10\
    \ 90\n                     : d9 e1 4e 10 5c e7 54 6b d4 0c 2b 1b 59 0a a0 b5\n\
    \                     : a1 7d b5 07 e3 65 7c ea 90 d8 8e 30 42 e4 85 bb\n    \
    \                 : ac fa 4e 76 4b 78 0e df 6c e5 a6 e1 bd 59 77 7d\n        \
    \             : a6 97 59 c5 29 a7 b3 3f 95 3e 9d f1 59 2d f7 42\n            \
    \         : 87 62 3f f1 b8 6f c7 3d 4b b8 8d 74 c4 ca 44 90\n                \
    \     : cf 67 db de 14 60 97 4a d1 f7 6d 9e 09 94 c4 0d\n0471 03 81 84     132:\
    \ . . . BIT STRING  (0 unused bits)\n                     : 02 81 80 a8 63 b1\
    \ 60 70 94 7e 0b 86 08 93 0c 0d\n                     : 08 12 4a 58 a9 af 9a 09\
    \ 38 54 3b 46 82 fb 85 0d\n                     : 18 8b 2a 77 f7 58 e8 f0 1d d2\
    \ 18 df fe e7 e9 35\n                     : c8 a6 1a db 8d 3d 3d f8 73 14 a9 0b\
    \ 39 c7 95 f6\n                     : 52 7d 2d 13 8c ae 03 29 3c 4e 8c b0 26 18\
    \ b6 d8\n                     : 11 1f d4 12 0c 13 ce 3f f1 c7 05 4e df e1 fc 44\n\
    \                     : fd 25 34 19 4a 81 0d dd 98 42 ac d3 b6 91 0c 7f\n    \
    \                 : 16 72 a3 a0 8a d7 01 7f fb 9c 93 e8 99 92 c8 42\n        \
    \             : 47 c6 43\n0606 a3 3e         62: . . [3]\n0608 30 3c         60:\
    \ . . . SEQUENCE\n0610 30 19         25: . . . . SEQUENCE\n0612 06 03        \
    \  3: . . . . . OID 2.5.29.17: subjectAltName\n                     : 55 1d 11\n\
    0617 04 12         18: . . . . . OCTET STRING\n                     : 30 10 81\
    \ 0e 77 70 6f 6c 6b 40 6e 69 73 74 2e 67\n                     : 6f 76\n0637 30\
    \ 1f         31: . . . . SEQUENCE\n0639 06 03          3: . . . . . OID 2.5.29.35:\
    \ subjectAltName\n                     : 55 1d 23\n0644 04 18         24: . .\
    \ . . . OCTET STRING\n                     : 30 16 80 14 e7 26 c5 54 cd 5b a3\
    \ 6f 35 68 95 aa\n                     : d5 ff 1c 21 e4 22 75 d6\n0670 30 09 \
    \         9: . SEQUENCE\n0672 06 07          7: . . OID 1.2.840.10040.4.3: dsa-with-sha\n\
    \                     : 2a 86 48 ce 38 04 03\n0681 03 2f         47: . BIT STRING\
    \  (0 unused bits)\n                     : 30 2c 02 14 3c 02 e0 ab d9 5d 05 77\
    \ 75 15 71 58\n                     : 92 29 48 c4 1c 54 df fc 02 14 5b da 53 98\
    \ 7f c5\n                     : 33 df c6 09 b2 7a e3 6f 97 70 1e 14 ed 94\nD.3\
    \ End-Entity Certificate Using RSA\n   This section contains an annotated hex\
    \ dump of a 675 byte version 3\n   certificate.  The certificate contains the\
    \ following information:\n   (a) the serial number is 256;\n   (b) the certificate\
    \ is signed with RSA and the MD2 hash algorithm;\n   (c) the issuer's distinguished\
    \ name is OU=Dept. Arquitectura de\n   Computadors; O=Universitat Politecnica\
    \ de Catalunya; C=ES\n   (d) and the subject's distinguished name is CN=Francisco\
    \ Jordan;\n   OU=Dept. Arquitectura de Computadors; O=Universitat Politecnica\
    \ de\n   Catalunya; C=ES\n   (e) the certificate was issued on May 21, 1996 and\
    \ expired on May 21,\n   1997;\n   (f) the certificate contains a 768 bit RSA\
    \ public key;\n   (g) the certificate is an end entity certificate (not a CA\n\
    \   certificate);\n   (h) the certificate includes an alternative subject name\
    \ and an\n   alternative issuer name - bothe are URLs;\n   (i) the certificate\
    \ include an authority key identifier and\n   certificate policies extensions;\
    \ and\n   (j) the certificate includes a critical key usage extension\n   specifying\
    \ the public is intended for generation of digital\n   signatures.\n0000 30 80\
    \           : SEQUENCE   (size undefined)\n0002 30 82 02 40  576: . SEQUENCE\n\
    0006 a0 03          3: . . [0]\n0008 02 01          1: . . . INTEGER 2\n     \
    \                : 02\n0011 02 02          2: . . INTEGER 256\n              \
    \       : 01 00\n0015 30 0d         13: . . SEQUENCE\n0017 06 09          9: .\
    \ . . OID 1.2.840.113549.1.1.2:\n                                       MD2WithRSAEncryption\n\
    \                     : 2a 86 48 86 f7 0d 01 01 02\n0028 05 00          0: . .\
    \ . NULL\n0030 30 68         88: . . SEQUENCE\n0032 31 0b         11: . . . SET\n\
    0034 30 09          9: . . . . SEQUENCE\n0036 06 03          3: . . . . . OID\
    \ 2.5.4.6: C\n                     : 55 04 06\n0041 13 02          2: . . . .\
    \ . PrintableString  'ES'\n                     : 45 53\n0045 31 2d         45:\
    \ . . . SET\n0047 30 2b         43: . . . . SEQUENCE\n0049 06 03          3: .\
    \ . . . . OID 2.5.4.10: O\n                     : 55 04 0a\n0054 13 24       \
    \  36: . . . . . PrintableString\n                     'Universitat Politecnica\
    \ de Catalunya'\n                     : 55 6e 69 76 65 72 73 69 74 61 74 20 50\
    \ 6f 6c 69\n                     : 74 65 63 6e 69 63 61 20 64 65 20 43 61 74 61\
    \ 6c\n                     : 75 6e 79 61\n0092 31 2a         42: . . . SET\n0094\
    \ 30 28         40: . . . . SEQUENCE\n0096 06 03          3: . . . . . OID 2.5.4.11:\
    \ OU\n                     : 55 04 0b\n0101 13 21         33: . . . . . PrintableString\n\
    \                     'OU=Dept. Arquitectura de Computadors'\n               \
    \      : 44 65 70 74 2e 20 41 72 71 75 69 74 65 63 74 75\n                   \
    \  : 72 61 20 64 65 20 43 6f 6d 70 75 74 61 64 6f 72\n                     : 73\n\
    0136 30 1e         30: . . SEQUENCE\n0138 17 0d         13: . . . UTCTime  '960521095826Z'\n\
    \                     : 39 36 30 37 32 32 31 37 33 38 30 32 5a\n0153 17 0d   \
    \      13: . . . UTCTime  '979521095826Z'\n                     : 39 37 30 37\
    \ 32 32 31 37 33 38 30 32 5a\n0168 30 81 83     112: . . SEQUENCE\n0171 31 0b\
    \         11: . . . SET\n0173 30 09          9: . . . . SEQUENCE\n0175 06 03 \
    \         3: . . . . . OID 2.5.4.6: C\n                     : 55 04 06\n0180 13\
    \ 02          2: . . . . . PrintableString  'ES'\n                     : 45 53\n\
    0184 31 2d         12: . . . SET\n0186 30 2b         16: . . . . SEQUENCE\n0188\
    \ 06 03          3: . . . . . OID 2.5.4.10: O\n                     : 55 04 0a\n\
    0193 13 24         36: . . . . . PrintableString\n                     'Universitat\
    \ Politecnica de Catalunya'\n                     : 55 6e 69 76 65 72 73 69 74\
    \ 61 74 20 50 6f 6c 69\n                     : 74 65 63 6e 69 63 61 20 64 65 20\
    \ 43 61 74 61 6c\n                     : 75 6e 79 61\n0231 31 2a         42: .\
    \ . . SET\n0233 30 28         40: . . . . SEQUENCE\n0235 06 03          3: . .\
    \ . . . OID 2.5.4.11: OU\n                     : 55 04 0b\n0240 13 21        \
    \ 33: . . . . . PrintableString\n                     'Dept. Arquitectura de Computadors'\n\
    \                     : 44 65 70 74 2e 20 41 72 71 75 69 74 65 63 74 75\n    \
    \                 : 72 61 20 64 65 20 43 6f 6d 70 75 74 61 64 6f 72\n        \
    \             : 73\n0275 31 19         22: . . . SET\n0277 30 17         20: .\
    \ . . . SEQUENCE\n0279 06 03          3: . . . . . OID 2.5.4.3: CN\n         \
    \            : 55 04 03\n0284 13 10         16: . . . . . PrintableString 'Francisco\
    \ Jordan'\n                     : 46 72 61 6e 63 69 73 63 6f 20 4a 6f 72 64 61\
    \ 6e\n0302 30 7c          2: . . SEQUENCE\n0304 30 0d         13: . . . SEQUENCE\n\
    0306 06 09          9: . . . . OID 1.2.840.113549.1.1.1: RSAEncryption\n     \
    \                : 2a 86 48 86 f7 0d 01 01 01\n0317 05 00          0: . . . .\
    \ NULL\n0319 03 6b        107: . . . BIT STRING\n                     : 00   (0\
    \ unused bits)\n                     : 30 68 02 61 00 be aa 8b 77 54 a3 af ca\
    \ 77 9f 2f\n                     : b0 cf 43 88 ff a6 6d 79 55 5b 61 8c 68 ec 48\
    \ 1e\n                     : 8a 86 38 a4 fe 19 b8 62 17 1d 9d 0f 47 2c ff 63\n\
    \                     : 8f 29 91 04 d1 52 bc 7f 67 b6 b2 8f 74 55 c1 33\n    \
    \                 : 21 6c 8f ab 01 95 24 c8 b2 73 93 9d 22 61 50 a9\n        \
    \             : 35 fb 9d 57 50 32 ef 56 52 50 93 ab b1 88 94 78\n            \
    \         : 56 15 c6 1c 8b 02 03 01 00 01\n0428 a3 81 97     151: . . [3]\n0431\
    \ 30 3c         60: . . . SEQUENCE\n0433 30 1f         31: . . . . SEQUENCE\n\
    0435 06 03          3: . . . . . OID 2.5.29.35: authorityKeyIdentifier\n     \
    \                : 55 1d 23\n0440 04 14         22: . . . . . OCTET STRING\n \
    \                    : 30 12 80 10 0e 6b 3a bf 04 ea 04 c3 0e 6b 3a bf\n     \
    \                : 04 ea 04 c3\n0464 30 19         25: . . . . SEQUENCE\n0466\
    \ 06 03          3: . . . . . OID 2.5.29.15: keyUsage\n                     :\
    \ 55 1d 0f\n0471 01 01          1: . . . . . TRUE\n0474 04 04          4: . .\
    \ . . . OCTET STRING\n                     : 03 02 07 80\n0480 30 19         25:\
    \ . . . . SEQUENCE\n0482 06 03          3: . . . . . OID 2.5.29.32: certificatePolicies\n\
    \                     : 55 1d 20\n0487 04 21         33: . . . . . OCTET STRING\n\
    \                     : 30 1f 30 1d 06 04 2a 84 80 00 30 15 30 07 06 05\n    \
    \                 : 2a 84 80 00 01 30 0a 06 05 2a 84 80 00 02 02 01\n        \
    \             : 0a\n0522 30 1c         28: . . . . SEQUENCE\n0524 06 03      \
    \    3: . . . . . OID 2.5.29.17: subjectAltName\n                     : 55 1d\
    \ 11\n0529 04 15         21: . . . . . OCTET STRING\n                     : 30\
    \ 13 86 11 68 74 74 70 3a 2f 2f 61 63 2e 75 70\n                     : 63 2e 65\
    \ 73 2f\n0552 30 19         25: . . . . SEQUENCE\n0554 06 03          3: . . .\
    \ . . OID 2.5.29.18: issuerAltName\n                     : 55 1d 12\n0559 04 12\
    \         18: . . . . . OCTET STRING\n                     : 30 14 86 12 68 74\
    \ 74 70 3a 2f 2f 77 77 77 2e 75\n                     : 70 63 2e 65\n0579 30 80\
    \           : . SEQUENCE (indefinite length)\n0581 06 07          7: . . OID\n\
    0583 05 00          0: . . NULL\n0585 00 00          0: . . end of contents marker\n\
    0587 03 81 81      47: . BIT STRING\n                     : 00      (0 unused\
    \ bits)\n                     : 5c 01 bd b5 41 88 87 7a 0e d3 0e 6b 3a bf 04 ea\n\
    \                     : 04 cb 5f 61 72 3c a3 bd 78 f5 66 17 fe 37 3a ab\n    \
    \                 : eb 67 bf b7 da a8 38 f6 33 15 71 75 2f b9 8c 91\n        \
    \             : a0 e4 87 ba 4b 43 a0 22 8f d3 a9 86 43 89 e6 50\n            \
    \         : 5c 01 bd b5 41 88 87 7a 0e d3 0e 6b 3a bf 04 ea\n                \
    \     : 04 cb 5f 61 72 3c a3 bd 78 f5 66 17 fe 37 3a ab\n                    \
    \ : eb 67 bf b7 da a8 38 f6 33 15 71 75 2f b9 8c 91\n                     : a0\
    \ e4 87 ba 4b 43 a0 22 8f d3 a9 86 43 89 e6 50\n0637 00 00          0: . . end\
    \ of contents marker\nD.4 Certificate Revocation List\n   This section contains\
    \ an annotated hex dump of a version 2 CRL with\n   one extension (cRLNumber).\
    \ The CRL was issued by OU=nist;O=gov;C=us\n   on July 7, 1996; the next scheduled\
    \ issuance was August 7, 1996.  The\n   CRL includes one revoked certificates:\
    \ serial number 18 (12 hex).\n   The CRL itself is number 18, and it was signed\
    \ with DSA and SHA-1.\n0000 30 81 ba     186: SEQUENCE\n0003 30 7c        124:\
    \ . SEQUENCE\n0005 02 01          1: . . INTEGER 1\n                     : 01\n\
    0008 30 09          9: . . SEQUENCE\n0010 06 07          7: . . . OID 1.2.840.10040.4.3:\
    \ dsa-with-sha\n                     : 2a 86 48 ce 38 04 03\n0019 30 2a      \
    \   42: . . SEQUENCE\n0021 31 0b         11: . . . SET\n0023 30 09          9:\
    \ . . . . SEQUENCE\n0025 06 03          3: . . . . . OID 2.5.4.6: C\n        \
    \             : 55 04 06\n0030 13 02          2: . . . . . PrintableString  'US'\n\
    \                     : 55 53\n0034 31 0c         12: . . . SET\n0036 30 0a  \
    \       10: . . . . SEQUENCE\n0038 06 03          3: . . . . . OID 2.5.4.10: O\n\
    \                     : 55 04 0a\n0043 13 03          3: . . . . . PrintableString\
    \  'gov'\n                     : 67 6f 76\n0048 31 0d         13: . . . SET\n\
    0050 30 0b         11: . . . . SEQUENCE\n0052 06 03          3: . . . . . OID\
    \ 2.5.4.11: OU\n                     : 55 04 0b\n0057 13 04          4: . . .\
    \ . . PrintableString  'nist'\n                     : 6e 69 73 74\n0063 17 0d\
    \         13: . . UTCTime  '970801000000Z'\n                     : 39 37 30 38\
    \ 30 31 30 30 30 30 30 30 5a\n0078 17 0d         13: . . UTCTime  '970808000000Z'\n\
    \                     : 39 37 30 38 30 38 30 30 30 30 30 30 5a\n0093 30 22   \
    \      34: . . SEQUENCE\n0095 30 20         32: . . . SEQUENCE\n0097 02 01   \
    \       1: . . . . INTEGER 18\n                     : 12\n0100 17 0d         13:\
    \ . . . . UTCTime  '970731000000Z'\n                     : 39 37 30 37 33 31 30\
    \ 30 30 30 30 30 5a\n0115 30 0c         12: . . . . SEQUENCE\n0117 30 0a     \
    \    10: . . . . . SEQUENCE\n0119 06 03          3: . . . . . . OID 2.5.29.21:\
    \ reasonCode\n                     : 55 1d 15\n0124 04 03          3: . . . .\
    \ . . OCTET STRING\n                     : 0a 01 01\n0129 30 09          9: .\
    \ SEQUENCE\n0131 06 07          7: . . OID 1.2.840.10040.4.3: dsa-with-sha\n \
    \                    : 2a 86 48 ce 38 04 03\n0140 03 2f         47: . BIT STRING\
    \  (0 unused bits)\n                     : 30 2c 02 14 9e d8 6b c1 7d c2 c4 02\
    \ f5 17 84 f9\n                     : 9f 46 7a ca cf b7 05 8a 02 14 9e 43 39 85\
    \ dc ea\n                     : 14 13 72 93 54 5d 44 44 e5 05 fe 73 9a b2\nAppendix\
    \ E. Authors' Addresses\n   Russell Housley\n   SPYRUS\n   381 Elden Street\n\
    \   Suite 1120\n   Herndon, VA 20170\n   USA\n   EMail: housley@spyrus.com\n \
    \  Warwick Ford\n   VeriSign, Inc.\n   One Alewife Center\n   Cambridge, MA 02140\n\
    \   USA\n   EMail: wford@verisign.com\n   Tim Polk\n   NIST\n   Building 820,\
    \ Room 426\n   Gaithersburg, MD 20899\n   USA\n   EMail: wpolk@nist.gov\n   David\
    \ Solo\n   Citicorp\n   666 Fifth Ave, 3rd Floor\n   New York, NY 10103\n   USA\n\
    \   EMail: david.solo@citicorp.com\nAppendix F.  Full Copyright Statement\n  \
    \ Copyright (C) The Internet Society (1999).  All Rights Reserved.\n   This document\
    \ and translations of it may be copied and furnished to\n   others, and derivative\
    \ works that comment on or otherwise explain it\n   or assist in its implementation\
    \ may be prepared, copied, published\n   and distributed, in whole or in part,\
    \ without restriction of any\n   kind, provided that the above copyright notice\
    \ and this paragraph are\n   included on all such copies and derivative works.\
    \  However, this\n   document itself may not be modified in any way, such as by\
    \ removing\n   the copyright notice or references to the Internet Society or other\n\
    \   Internet organizations, except as needed for the purpose of\n   developing\
    \ Internet standards in which case the procedures for\n   copyrights defined in\
    \ the Internet Standards process must be\n   followed, or as required to translate\
    \ it into languages other than\n   English.\n   The limited permissions granted\
    \ above are perpetual and will not be\n   revoked by the Internet Society or its\
    \ successors or assigns.\n   This document and the information contained herein\
    \ is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET\
    \ ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n\
    \   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN\
    \ WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
