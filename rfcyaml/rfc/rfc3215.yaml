- title: __initial_text__
  contents:
  - '                           LDP State Machine

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides state machine tables for ATM (Asynchronous\n\
    \   Transfer Mode) switch LSRs.  In the current LDP specification, there\n   is\
    \ no state machine specified for processing LDP messages. We think\n   that defining\
    \ a common state machine is very important for\n   interoperability between different\
    \ LDP and CR-LDP implementations.\n   We begin in section 1 by defining a list\
    \ of terminologies.  Then in\n   section 2, we propose two sets of state machine\
    \ tables for ATM switch\n   LSRs that use downstream-on-demand mode, one method\
    \ can be used for\n   non-vc merge capable ATM LSRs, while the other one can be\
    \ used for\n   the vc-merge capable ATM LSRs.  In section 3, we provides a state\n\
    \   machine for downstream unsolicited mode ATM LSRs.\n   We focus on the LDP\
    \ state machines and the associated control blocks\n   used for establishing and\
    \ maintaining LSPs.  We do not describe state\n   machines for the \"LDP controller\"\
    \ that is in charge of LDP session\n   initialization, address mapping messages\
    \ management, routing\n   interface, etc. that is defined in the LDP specification.\n\
    \   Even though the state machines in this document are specific for\n   ATM-LSR,\
    \ they can be easily adapted for other types of LSRs.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1. Terminology ...................................................\
    \  4\n   2. State Machine for Downstream-on-Demand Mode ...................  4\n\
    \   2.1 An LSR's Behavior in the Case of a Next Hop Change ...........  4\n  \
    \ 2.2. ATM Switch LSR with No VC-merge Capability ..................  5\n   2.2.1\
    \ LSP Control Block ..........................................  5\n   2.2.2 States\
    \ .....................................................  7\n   2.2.3 Events .....................................................\
    \  8\n   2.2.4 State Transitions ..........................................  9\n\
    \   2.2.5 State Machine .............................................. 10\n  \
    \ 2.2.5.1 State -- \"IDLE\" .......................................... 10\n  \
    \ 2.2.5.2 State -- \"RESPONSE_AWAITED\" .............................. 13\n  \
    \ 2.2.5.3 State -- \"ESTABLISHED\" ................................... 16\n  \
    \ 2.2.5.4 State -- \"RELEASE_AWAITED\" ............................... 21\n  \
    \ 2.2.6 Handling the Next Hop Change ............................... 23\n   2.2.6.1\
    \ Next Hop Trigger Control Block ........................... 24\n   2.2.6.2 States\
    \ ................................................... 24\n   2.2.6.3 Events ...................................................\
    \ 24\n   2.2.6.4 State Transition for next hop change ..................... 25\n\
    \   2.2.6.5 State Machine ............................................ 25\n  \
    \ 2.2.6.5.1 State -- \"IDLE\" ........................................ 25\n  \
    \ 2.2.6.5.2 State -- \"NEW_NH_RETRY\" ................................ 27\n  \
    \ 2.2.6.5.3 State -- \"NEW_NH_RESPONSE_AWAITED\" ..................... 28\n  \
    \ 2.2.7 LDP Related Message Handling ............................... 29\n   2.3.\
    \ ATM Switch LSR with VC-merge ................................ 31\n   2.3.1 VC-merge\
    \ ................................................... 31\n   2.3.2 Control Block\
    \ .............................................. 31\n   2.3.3   State Machines\
    \ for Downstream-on-demand Mode ............. 34\n   2.3.3.1 State of the Upstream\
    \ LSP Control Block's State Machine\n           for Downstream-on-demand Mode\
    \ ............................ 34\n   2.3.3.2 Events of the Upstream LSP Control\
    \ Block's State Machine\n           for Downstream-on-demand Mode ............................\
    \ 35\n   2.3.3.3 State Transitions of the Upstream LSP Control Block's State\n\
    \           Machine for Downstream-on-demand Mode .................... 36\n  \
    \ 2.3.3.4 Upstream LSP Control Block's State Machine\n           for Downstream-on-demand\
    \ Mode ............................ 37\n   2.3.3.4.1 State -- \"IDLE\" ........................................\
    \ 37\n   2.3.3.4.2 State -- \"RESPONSE_AWAITED\" ............................\
    \ 39\n   2.3.3.4.3 State -- \"ESTABLISHED\" .................................\
    \ 42\n   2.3.3.4.4 State -- \"RELEASE_AWAITED\" .............................\
    \ 45\n   2.3.3.5 State of the Downstream LSP Control Block's State Machine\n \
    \          for Downstream-on-demand Mode ............................ 47\n   2.3.3.6\
    \ Events of the Downstream LSP Control Block's State Machine\n           for Downstream-on-demand\
    \ Mode ............................ 47\n   2.3.3.7 State Transitions of the Downstream\
    \ LSP Control Block's\n           State Machine for Downstream-on-demand mode\
    \ .............. 48\n   2.3.3.8 Downstream LSP Control Block's State Machine for\n\
    \           Downstream-on-demand Mode ................................ 49\n  \
    \ 2.3.3.8.1 State -- \"IDLE\" ........................................ 48\n  \
    \ 2.3.3.8.2 State -- \"RESPONSE_AWAITED\" ............................ 50\n  \
    \ 2.3.3.8.3 State -- \"ESTABLISHED\" ................................. 52\n  \
    \ 2.3.3.9 State of the Next_Hop_Trigger_Control_Block's State\n           Machine\
    \ for Downstream-on-demand Mode .................... 53\n   2.3.3.10 Events of\
    \ the Next_Hop_Trigger_Control_Block's State\n            Machine for Downstream-on-demand\
    \ Mode ................... 53\n   2.3.3.11 State Transitions of the Next_Hop_Trigger_Control_Block's\n\
    \            State Machine for Downstream-on-demand Mode ............. 55\n  \
    \ 2.3.3.12 State Machine ........................................... 55\n   2.3.3.12.1\
    \ State -- \"IDLE\" ....................................... 55\n   2.3.3.12.2\
    \ State -- \"NEW_NH_RETRY\" ............................... 57\n   2.3.3.12.3\
    \ State -- \"NEW_NH_RESPONSE_AWAITED\" .................... 58\n   2.3.4 LDP Related\
    \ Message Processing ............................. 59\n   3. State Machine for\
    \ Downstream Unsolicited ...................... 61\n   3.1 Control Block ................................................\
    \ 61\n   3.2 States of the Upstream LSP Control Block's State Machine\n      \
    \ for Downstream Mode .......................................... 62\n   3.3 Events\
    \ of the Upstream LSP Control Block's State Machine\n       for Downstream Mode\
    \ .......................................... 62\n   3.4 State Transitions of Upstream\
    \ LSP Control Block's State\n       Machine for Downstream Mode ..................................\
    \ 64\n   3.5 Upstream LSP Control Block's State Machine for\n       Downstream\
    \ Mode .............................................. 65\n   3.5.1 : State --\
    \ \"IDLE\" .......................................... 65\n   3.5.2 : State --\
    \ \"ESTABLISHED\" ................................... 66\n   3.5.3 : State --\
    \ \"RELEASE_AWAITED\" ............................... 67\n   3.5.4 : State --\
    \ \"RESOURCE_AWAITED\" .............................. 69\n   3.6 State of the\
    \ Downstream LSP Control Block's State Machine\n       for Downstream Mode ..........................................\
    \ 70\n   3.7 Events of the Downstream LSP Control Block's State Machine\n    \
    \   for Downstream Mode .......................................... 70\n   3.8\
    \ State Transitions of Downstream LSP Control Block's State\n       Machine for\
    \ Downstream Mode .................................. 71\n   3.9 Downstream LSP\
    \ Control Block's State Machine\n       for Downstream Mode ..........................................\
    \ 71\n   3.9.1 : State -- \"IDLE\" ..........................................\
    \ 71\n   3.9.2 : State -- \"ESTABLISHED\" ...................................\
    \ 73\n   3.10 LDP Related Message Processing for downstream mode .......... 74\n\
    \   4. Security Considerations ....................................... 75\n  \
    \ 5. Acknowledgements .............................................. 76\n   6.\
    \ References .................................................... 76\n   7. Authors'\
    \ Address .............................................. 77\n   8. Full Copyright\
    \ Statement ...................................... 78\n"
- title: 1. Terminology
  contents:
  - "1. Terminology\n   -  LDP-REQUEST: LDP Label Request message\n   -  LDP-MAPPING:\
    \ LDP Label Mapping message\n   -  LDP-WITHDRAW: LDP Label Withdraw message\n\
    \   -  LDP-RELEASE: LDP Label Release message\n   -  LDP-ABORT: LDP Abort message\
    \ used to abort a LSP setup.\n   -  LDP-NAK: LDP Notification message used to\
    \ reject an LDP message.\n"
- title: 2. State Machine for Downstream-on-Demand Mode
  contents:
  - "2. State Machine for Downstream-on-Demand Mode\n   In this document, we provide\
    \ two sets of state machines: one for the\n   ATM LSR that does not have VC-merge\
    \ capability, and the other for the\n   ATM LSR that does have VC-merge capability.\n\
    \   State machine descriptions are given in terms of control blocks,\n   states,\
    \ events, response actions and state transitions.  Control\n   blocks contain\
    \ the information that is required to support handling\n   of events.  A control\
    \ block may also contain any additional\n   information that is required either\
    \ of any specific implementation or\n   in support of other required functions.\
    \  In every case, additional\n   information required to support the procedures\
    \ defined in the LDP\n   specification [4] or management objects defined in the\
    \ LDP MIB [3]\n   would be stored in a specific LDP implementation - either as\
    \ part of\n   the control block structure or in some other way.\n   The state\
    \ machines cover both independent LSP control and ordered LSP\n   control.\n \
    \  Loop detection and loop prevention messages will be processed as\n   specified\
    \ in [4].  The impact of loop detection and loop prevention\n   messages on state\
    \ transitions is left for further study.\n"
- title: 2.1 An LSR's Behavior in the Case of a Next Hop Change
  contents:
  - "2.1 An LSR's Behavior in the Case of a Next Hop Change\n   When there is a topology\
    \ change and an LSR detects a new better next\n   hop for an LSP, it may behave\
    \ in 2 different ways:\n   1) It tries to do a \"local repair\".  This means that\
    \ it extends the\n      LSP through the new next hop, releases the old path from\
    \ this LSR\n      forward and then splices into this newly extended LSP.\n   2)\
    \ If the LSP is created with the \"pinned\" option (CR-LDP[5]), the\n      LSR\
    \ ignores the new next hop change, and the LSP stays unchanged.\n      The LSR\
    \ may decide to send an LDP-MAPPING containing attributes\n      for this New\
    \ Next Hop (NH) that have changed.\n"
- title: 2.2. ATM Switch LSR with No VC-merge Capability
  contents:
  - "2.2. ATM Switch LSR with No VC-merge Capability\n   In an MPLS domain where some\
    \ ATM LSRs do not have VC-merge\n   capability, downstream-on-demand mode is required\
    \ for these ATM LSRs\n   [1].  Also, \"conservative label retention mode\" is\
    \ required in this\n   case [1].\n   For each LSP, there are 2 kinds of state\
    \ machines involved:\n   1) the LSP Control Block and its state machine that can\
    \ be used to\n      handle normal LSP setup.  It is created when the LSR receives\
    \ a\n      new LDP Request and it is deleted when the LSP of this request is\n\
    \      torn down.\n   2) the Next Hop Trigger Control Block and its state machine\
    \ that is\n      used to handle switching over to a better LSP through a different\n\
    \      next hop.  It is created when the LSR decides to switch over to a\n   \
    \   better next hop and it is deleted when the LSR finishes switching\n      over\
    \ to the better next hop.  This state machine uses a timer (and\n      has corresponding\
    \ states) to ensure that switch over occurs in a\n      timely fashion after a\
    \ routing transient has had time to\n      stabilize.\n"
- title: 2.2.1 LSP Control Block
  contents:
  - "2.2.1 LSP Control Block\n   For each LSP, an LSP Control Block is defined that\
    \ may contain the\n   following information:\n      -  Upstream Label Request\
    \ ID (assigned by the upstream LSR), that\n         is the 'Message Id' in the\
    \ Label Request Message received from\n         the upstream LSR.\n      -  Downstream\
    \ Label Request ID (assigned by this LSR itself), that\n         is 'Message Id'\
    \ in the Label Request Message sent to the\n         downstream LSR.\n      -\
    \  Upstream LDP Identifier\n      -  Downstream LDP Identifier\n      -  State\n\
    \      -  FEC\n      -  Upstream Label (assigned by this LSR)\n      -  Downstream\
    \ Label (assigned by the downstream LSR)\n      -  Trigger Control Block Pointer,\
    \ (Only used at the ingress LSR of\n         a LSP) that points to the control\
    \ block that triggers setting\n         up this LSP or tearing down this LSP.\n\
    \      -  Next Hop Control Block Pointer, that points to the control\n       \
    \  block that is used for switching over to a better LSP.\n   The following index\
    \ combinations can be used to locate a unique LSP\n   Control Block:\n      -\
    \  Downstream Label and Downstream LDP Identifier, or\n      -  Upstream Label\
    \ and Upstream LDP Identifier, or\n      -  Downstream Label Request ID and Downstream\
    \ LDP Identifier\n      -  Upstream Label Request ID and Upstream LDP Identifier\n\
    \   Here is the relationship between different control blocks, the detail\n  \
    \ definition of Next Hop Trigger Control Block is described in section\n   2.2.6.\n\
    \   For example, an LSP that transits through (LSR-A, LSR-B, LSR-C, LSR-\n   D):\n\
    \      LSR-A ----> LSR-B ---> LSR-C ---> LSR-D\n   The control blocks in LSR-A\
    \ are:\n                  +-----------------------+\n                  | Trigger\
    \ Control Block |\n                  |  (e.g, by config)     |\n             \
    \     +-----------------------+\n                             ^\n            \
    \                 |(Trigger Control block pointer)\n                         \
    \    |\n                             |\n                  +-----------------------+\n\
    \                  | LSP Control Block     |\n                  +-----------------------+\n\
    \   When LSR-B detects a better next hop to LSR-D through LSR-E,  and  it\n  \
    \ decides to switch over to it, so control blocks in LSR-B are:\n            \
    \    +-----------------------+\n                | LSP Control Block     |\n  \
    \              | (original LSP)        |\n                +-----------------------+\n\
    \             (LSP      ^  |\n              Control  |  | (Next Hop Trigger Control\
    \ Block Pointer)\n              Block    |  |\n              Pointer) |  v\n \
    \               +--------------------------------+\n                | Next Hop\
    \ Trigger Control Block |\n                +--------------------------------+\n\
    \                       ^  |\n             (Trigger  |  | (New Next Hop LSP\n\
    \               Control |  |  Control Block Pointer)\n               Block   |\
    \  |\n               Pointer)|  |\n                       |  v\n             \
    \   +------------------------+\n                | LSP Control Block      |\n \
    \               | (for LSP: LSR-B, LSR-E,|\n                |   LSR-D)       \
    \        |\n                +------------------------+\n"
- title: 2.2.2   States
  contents:
  - "2.2.2   States\n   This section describes the various states that are used in\
    \ the state\n   machine for the ATM non VC-merge LSR.\n   -- IDLE\n   This is\
    \ the initial LSP state, when the LSP Control Block is created.\n   -- RESPONSE_AWAITED\n\
    \   This state means that the LSR has received and processed an LDP-\n   REQUEST\
    \ from an upstream LSR, or it has received an internal set up\n   request.  It\
    \ has sent a new LDP-REQUEST towards a downstream LSR.\n   The LSR is waiting\
    \ for the LDP-MAPPING from the downstream LSR.\n   -- ESTABLISHED\n   This state\
    \ means that the LSR has received the LDP-MAPPING from the\n   downstream LSR\
    \ and the LSP is up and operational.\n   -- RELEASE_AWAITED\n   This state means\
    \ that the LSR has sent a LDP-WITHDRAW upstream and is\n   waiting for the LDP-RELEASE\
    \ before freeing up the label resource.\n"
- title: 2.2.3 Events
  contents:
  - "2.2.3 Events\n   -- LDP Request\n   The LSR receives an LDP-REQUEST from an upstream\
    \ LSR.\n   -- LDP Mapping\n   The LSR receives an LDP-MAPPING from a downstream\
    \ LSR.\n   -- LDP Release\n   The LSR receives an LDP-RELEASE from an upstream\
    \ LSR.\n   -- LDP Withdraw\n   The LSR receives an LDP-WITHDRAW from a downstream\
    \ LSR.\n   -- LDP Upstream Abort\n   The LSR receives an LDP-ABORT from an upstream\
    \ LSR.\n   -- LDP Downstream NAK The LSR receives an LDP-NAK (notification) from\n\
    \   an downstream LSR.\n   -- Upstream Lost\n   The LSR loses its LDP session\
    \ with an upstream LDP peer.\n   -- Downstream Lost\n   The LSR loses its LDP\
    \ session with a downstream LDP peer.\n   -- Internal SetUp\n   For some reason,\
    \ e.g. a configuration request of a traffic\n   engineering tunnel, or recognizing\
    \ a new FEC could trigger an\n   Internal SetUp event to set up a new LSP from\
    \ this node.\n   -- Internal Destroy\n   The LSR send an Internal Destroy event\
    \ to tear down an LSP.\n   -- Internal Cross-Connect\n   The LSR send an Internal\
    \ Cross-Connect to splice two LSPs into one\n   LSP.  This happens when a LSR\
    \ switches over to a better next hop.\n   -- Internal New NH\n   The LSR decides\
    \ to switch over the better next hop.\n"
- title: 2.2.4 State Transitions
  contents:
  - "2.2.4 State Transitions\n   The following diagram describes briefly the state\
    \ transitions.\n             +-------------------+\n             |           \
    \        |<-------------------+\n   +-------->|  IDLE             |          \
    \          |\n   |         |                   |----------+         |\n   |  \
    \       +-------------------+          |         |\n   |(LDP Release)      | \
    \                   |         |\n   |(LDP Upstream      |(LDP Request 1)     |\
    \         | (LDP Release)\n   | Abort             |(Internal SetUp)    |     \
    \    | (Upstream Lost)\n   |(Internal Destroy) |                    |        \
    \ |\n   |(Upstream Lost)    v                    |         |\n   |         +-------------------+\
    \          |         |\n   +---------|                   |          |        \
    \ |\n             |  RESPONSE_AWAITED |          |         |\n   +---------| \
    \                  |          |         |\n   |         +-------------------+\
    \          |         |\n   |                  |                     |        \
    \ |\n   |(Downstream Lost) |(LDP Mapping)        |         |\n   |(LDP Downstream\
    \   |                     |         |\n   | NAK)             |     +---------------+\
    \         |\n   |                  |     | (LDP Request 2)         |\n   |   \
    \               |     |                         |\n   |                  v   \
    \  v                         |\n   |         +-------------------+ (LDP Withdraw\
    \ 1)   |\n   |         |                   | (Internal Destroy) |\n   |      \
    \   |  ESTABLISHED      |------------>-------+\n   |         |               \
    \    |                    |\n   |         +-------------------+              \
    \      |\n   |                  |                               |\n   |      \
    \            |                               |\n   |                  |(LDP Withdraw\
    \ 2)               | (LDP Upstream\n   |                  |(Downstream Lost) \
    \             |  Abort)\n   |                  |                             \
    \  |\n   |                  v                               |\n   |         +-------------------+\
    \                    |\n   |         |                   |                   \
    \ |\n   +-------->| RELEASE_AWAITED   |------------>-------+\n             | \
    \                  |\n             +-------------------+\n"
- title: 2.2.5 State Machine
  contents:
  - '2.2.5 State Machine

    '
- title: 2.2.5.1 State -- "IDLE"
  contents:
  - "2.2.5.1 State -- \"IDLE\"\n   State:          IDLE\n   Event:          LDP Request\n\
    \   New State:      Depends upon the action routine.\n   Actions:\n      If this\
    \ LSR is the LSP Egress or Proxy Egress [2]\n   Then:\n      Choose an upstream\
    \ label, connect this upstream label to the local\n      IP forwarding module,\
    \ allocate the resources, send the LDP-MAPPING\n      upstream with the upstream\
    \ label, and go to the new state\n      `ESTABLISHED'.\n   else\n      Obtain\
    \ a next hop (or interface) with the FEC specified in the\n      LDP-REQUEST,\
    \ propagate the LDP-REQUEST, with newly assigned\n      Message ID by this LSR,\
    \ towards the obtained next hop, and go to\n      the new state `RESPONSE_AWAITED'.\n\
    \      If the LSR uses the independent control mode [2], choose an\n      upstream\
    \ label, connect this upstream label to the local IP\n      forwarding module,\
    \ go to the ESTABLISHED state and send an LDP-\n      MAPPING upstream with the\
    \ upstream label.\n   If unable to process the request for any reason, issue an\
    \ LDP-NAK to\n   the sender with the appropriate error code, go to IDLE and delete\
    \ the\n   LSP Control Block.\n   State:          IDLE\n   Event:          LDP\
    \ Mapping\n   New State:      IDLE\n   Actions:\n      Ignore the event.  It is\
    \ an internal implementation error.\n   State:          IDLE\n   Event:      \
    \    LDP Release\n   New State:      IDLE\n   Actions:\n      Ignore the event.\
    \  It is an internal implementation error.\n   State:          IDLE\n   Event:\
    \          LDP Withdraw\n   New State:      IDLE\n   Actions:\n      Ignore the\
    \ event.  It is an internal implementation error.\n   State:          IDLE\n \
    \  Event:          LDP Upstream Abort\n   New State:      IDLE\n   Actions:\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         IDLE\n   Event:          LDP Downstream NAK\n   New State:      IDLE\n\
    \   Actions:\n      Ignore the event.  It is an internal implementation error.\n\
    \   State:          IDLE\n   Event:          Upstream Lost\n   New State:    \
    \  IDLE\n   Actions:\n      Ignore the event.  It is an internal implementation\
    \ error.\n   State:          IDLE\n   Event:          Downstream Lost\n   New\
    \ State:      IDLE\n   Actions:\n      Ignore the event.  It is an internal implementation\
    \ error.\n   State:          IDLE\n   Event:          Internal SetUp\n   New State:\
    \      RESPONSE_AWAITED\n   Actions:\n      Set up the Trigger Control Block pointer,\n\
    \      Obtain a next hop (or interface) with the FEC specified in the\n      Internal\
    \ SetUp message, send a LDP-REQUEST towards the obtained\n      next hop, and\
    \ go to the new state `RESPONSE_AWAITED'.\n   State:          IDLE\n   Event:\
    \          Internal Destroy\n   New State:      IDLE\n   Actions:\n      Ignore.\
    \  It is an internal implementation error.\n   State:          IDLE\n   Event:\
    \          Internal Cross-Connect\n   New State:      IDLE\n   Actions:\n    \
    \  Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal New NH\n   New State:      IDLE\n   Actions:\n  \
    \    Ignore.  It is an internal implementation error.\n"
- title: 2.2.5.2 State -- "RESPONSE_AWAITED"
  contents:
  - "2.2.5.2 State -- \"RESPONSE_AWAITED\"\n   State:          RESPONSE_AWAITED\n\
    \   Event:          LDP Request\n   New State:      RESPONSE_AWAITED\n   Actions:\n\
    \      Ignore the event.  It is an internal implementation error.  A non\n   \
    \   VC merge ATM LSR must create a new LSP control block for a new LDP\n     \
    \ request.\n   State:          RESPONSE_AWAITED\n   Event:          LDP Mapping\n\
    \   New State:      ESTABLISHED\n   Actions:\n      1) If the LSP is triggered\
    \ by the local router (Trigger Control\n         Block Pointer is not zero), send\
    \ event `Internal LSP UP' to the\n         Trigger control block.\n      2) Else\
    \ If the LSR uses the ordered control mode, choose an\n         upstream label.\n\
    \      3) Connect the upstream label to the downstream label.  Allocate\n    \
    \     the resources.  Propagate the LDP-MAPPING upstream with the\n         upstream\
    \ label.\n      If unable to process the message, disconnect the upstream label\n\
    \      from the downstream label, free the upstream label, release the\n     \
    \ resources, send an LDP-RELEASE downstream and an LDP-NAK upstream\n      with\
    \ status (No Label Resources [4]), go to IDLE and delete the\n      LSP Control\
    \ Block.\n   State:          RESPONSE_AWAITED\n   Event:          LDP Release\n\
    \   New State:      IDLE\n   Actions:\n      If the LSR uses the independent control\
    \ mode, free the upstream\n      label.\n      Send an LDP-ABORT downstream, go\
    \ to IDLE and delete the LSP\n      Control Block.\n      Note: This should only\
    \ occur if the LSR uses the independent\n      control mode.  In the ordered control\
    \ mode, no upstream label\n      mapping will have been sent corresponding to\
    \ this LSP while\n      waiting for a label mapping from downstream.\n   State:\
    \          RESPONSE_AWAITED\n   Event:          LDP Withdraw\n   New State:  \
    \    RESPONSE_AWAITED\n   Actions:\n      Ignore the event.  It's a protocol error\
    \ from the downstream LSR.\n   State:          RESPONSE_AWAITED\n   Event:   \
    \       LDP Upstream Abort\n   New State:      IDLE\n   Actions:\n      If the\
    \ LSR uses the independent control mode, free the upstream\n      label.\n   \
    \   Send an LDP-ABORT downstream.\n      Delete the LSP Control Block.\n   State:\
    \          RESPONSE_AWAITED\n   Event:          LDP Downstream NAK\n   New State:\
    \      Depends on the action routine.\n   Actions:\n      1. If the LSP is triggered\
    \ by the local router (Trigger Control\n         Block Pointer is not zero), send\
    \ event `Internal LSP DOWN' to\n         the Trigger control block, go to IDLE\
    \ and delete the LSP\n         Control Block.\n      2. Else If the LSR uses the\
    \ independent control mode, send an LDP-\n         WITHDRAW upstream and go to\
    \ state `RELEASE_AWAITED'.\n      If the LSR uses the ordered control mode, send\
    \ an LDP-NAK\n      upstream, go to IDLE and delete the LSP Control Block.\n \
    \  State:          RESPONSE_AWAITED\n   Event:          Upstream Lost\n   New\
    \ State:      IDLE\n   Actions:\n      If the LSR uses the independent control\
    \ mode, free the upstream\n      label.\n      Send an LDP-ABORT downstream, go\
    \ to IDLE and delete the LSP\n      Control Block.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Downstream Lost\n   New State:      Depends on the action\
    \ routine.\n   Actions:\n      1. If the LSP is triggered by the local router\
    \ (Trigger Control\n         Block Pointer is not zero), send event `Internal\
    \ LSP DOWN' to\n         the trigger control block, go to IDLE and delete the\
    \ LSP\n         Control Block.\n      2. Else, If the LSR uses the independent\
    \ control mode, free the\n         upstream label and send an LDP-WITHDRAW upstream\
    \ and go to\n         state `RELEASE_AWAITED'.\n      If the LSR uses the ordered\
    \ control mode, send an LDP-NAK upstream\n      (with a status `No Route' [4]),\
    \ go to IDLE and delete the LSP\n      Control Block.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal SetUp\n   New State:      RESPONSE_AWAITED\n   Actions:\n\
    \      Ignore, it is an internal implementation error.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal Destroy\n   New State:      IDLE\n   Actions:\n \
    \     Send an LDP-ABORT downstream, go to IDLE and delete the LSP\n      Control\
    \ Block.\n   State:          RESPONSE_AWAITED\n   Event:          Internal Cross-Connect\n\
    \   New State:      RESPONSE_AWAITED\n   Actions:\n      Ignore the event.  It\
    \ is an internal implementation error.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal New NH\n   New State:      RESPONSE_AWAITED\n   Actions:\n\
    \      Send LDP-ABORT to the old downstream, and send LDP-REQUEST to the\n   \
    \   new next hop.\n"
- title: 2.2.5.3 State -- "ESTABLISHED"
  contents:
  - "2.2.5.3 State -- \"ESTABLISHED\"\n   State:          ESTABLISHED\n   Event: \
    \         LDP Request\n   New State:      ESTABLISHED\n   Actions:\n      Ignore\
    \ the event.  It's an internal implementation error.  For non\n      VC-merge\
    \ ATM LSR, a new LSP control block is always created for\n      each LDP request.\n\
    \   State:          ESTABLISHED\n   Event:          LDP Mapping\n   New State:\
    \      ESTABLISHED\n   Actions:\n      Process the LDP-MAPPING, that may contain\
    \ the new attributes of\n      the label mapping and then propagate the LDP-MAPPING\
    \ upstream.\n   State:          ESTABLISHED\n   Event:          LDP Release\n\
    \   New State:      IDLE\n   Actions:\n      Disconnect the upstream label from\
    \ the downstream label.\n      Free the upstream label.\n      Free the resources.\n\
    \      Send event `Internal Destroy' to the Next Hop Trigger Control\n      Block\
    \ if it was in the middle of switching over to the better next\n      hop.\n \
    \     Propagate the LDP-RELEASE downstream if the LSR is not the egress\n    \
    \  for the LSP, go to IDLE and delete the LSP Control Block.\n   State:      \
    \    ESTABLISHED\n   Event:          LDP Withdraw\n   New State:      Depends\
    \ on the action routine.\n   Actions:\n      1) Free the resources and send LDP-RELEASE\
    \ downstream.\n      2) If it is independent control mode, set the state to `IDLE',\n\
    \         create a internal LDP Request with the information in the LSP\n    \
    \     Control Block, and pass event `LDP Request' to its own state\n         machine.\n\
    \      3) Else for the ordered control mode\n         3.1) If the LSP is triggered\
    \ to be setup by itself (e.g it is\n              the ingress LSR of this LSP),\
    \ send event `Internal LSP\n              Down' to the trigger control block,\
    \ go to IDLE and delete\n              the LSP Control Block.\n         3.2) Else,\
    \ if it is triggered by the incoming LDP Request,\n              Disconnect the\
    \ upstream label from the downstream label.\n              Propagate the LDP-WITHDRAW\
    \ upstream and go to state\n              `RELEASE_AWAITED'.\n         3.3) If\
    \ the LSP is in the middle of switching over to a better\n              LSP, send\
    \ event `Internal Destroy' to the state machine of\n              its New Next\
    \ Hop LSP Control Block, go to IDLE and delete\n              the LSP Control\
    \ Block.\n   State:          ESTABLISHED\n   Event:          LDP Upstream Abort\n\
    \   New State:      ESTABLISHED\n   Actions:\n      Ignore the event.\n      Note:\
    \ This scenario can occur if the upstream LSR sends a LDP-\n      ABORT at about\
    \ the same time as the local LSR sends a LDP-MAPPING.\n      In this situation,\
    \ it should be up to exactly one of the two LSRs\n      as to whether or not the\
    \ label that was sent remains valid.  The\n      LDP specification [4] procedures\
    \ leave the choice to the upstream\n      LSR that must send an LDP-RELEASE if\
    \ it will not use the label\n      provided.\n   State:          ESTABLISHED\n\
    \   Event:          LDP Downstream NAK\n   New State:      ESTABLISHED\n   Actions:\n\
    \      Ignore the event.  It is a protocol error from the downstream LSR.\n  \
    \    The downstream LSR should always LSP-WITHDRAW to tear down the LSP\n    \
    \  when the LSP is established.\n   State:          ESTABLISHED\n   Event:   \
    \       Upstream Lost\n   New State:      IDLE\n   Actions:\n      Disconnect\
    \ the upstream label from the downstream label.\n      Free the upstream label.\n\
    \      Send event `Internal Destroy' to the Next Hop Trigger Control\n      Block\
    \ if it was in the middle of switching over to the better next\n      hop.\n \
    \     Free the resources.\n      Propagate an LDP-RELEASE downstream, go to IDLE\
    \ and delete the LSP\n      Control Block.\n   State:          ESTABLISHED\n \
    \  Event:          Downstream Lost\n   New State:      Depends on the action routine.\n\
    \   Actions:\n      1) If the LSP is triggered by the local router (Trigger Control\n\
    \         Block Pointer is not zero), send event `Internal LSP NAK' to\n     \
    \    the Trigger control block, go to IDLE and delete the LSP\n         Control\
    \ Block.\n      2) Else, disconnect the upstream label from the downstream label.\n\
    \         Propagate an LDP-WITHDRAW upstream and go to `RELEASE_AWAITED'\n   \
    \      state.\n      3) Send event `Internal Destroy' to the Next Hop Trigger\
    \ Control\n         Block if it was in the middle of switching over to the better\n\
    \         next hop.\n   State:          ESTABLISHED\n   Event:          Internal\
    \ Setup\n   New State:      ESTABLISHED\n   Actions:\n      Ignore, it is an internal\
    \ implementation error.\n   State:          ESTABLISHED\n   Event:          Internal\
    \ Destroy\n   New State:      IDLE\n   Actions:\n      Disconnect the upstream\
    \ label from the downstream label if it is\n      not the ingress of the LSP.\n\
    \      Free the resources.\n      Send an LDP-RELEASE downstream, go to IDLE and\
    \ delete the LSP\n      Control Block.\n   State:          ESTABLISHED\n   Event:\
    \          Internal Cross-Connect\n   New State:      ESTABLISHED\n   Actions:\n\
    \      Connect the upstream label to the downstream label\n      May need to send\
    \ a new LDP-MAPPING upstream with the attributes\n      from the new next hop.\n\
    \      Reset Trigger Control Block Pointer to zero.\n   State:          ESTABLISHED\n\
    \   Event:          Internal New NH\n   New State:      ESTABLISHED\n   Actions:\n\
    \      1) If the LSR was in the middle of switching over to a better next\n  \
    \       hop (Next Hop Trigger Control Block Pointer is not zero), it\n       \
    \  send `Internal New NH' to that control block.\n      2) Else, create a new\
    \ Next Hop Trigger Control Block, set Next Hop\n         Trigger Control Block\
    \ pointer to point to this control block,\n         and pass 'Internal New NH'\
    \ to this control block.\n"
- title: 2.2.5.4 State -- "RELEASE_AWAITED"
  contents:
  - "2.2.5.4 State -- \"RELEASE_AWAITED\"\n   State:          RELEASE_AWAITED\n  \
    \ Event:          LDP Request\n   New State:      RELEASE_AWAITED\n   Actions:\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         RELEASE_AWAITED\n   Event:          LDP Mapping\n   New State:     \
    \ RELEASE_AWAITED\n   Actions:\n      It is a protocol error from the downstream\
    \ LDP peer, but anyway\n      send a LDP-RELEASE downstream.\n   State:      \
    \    RELEASE_AWAITED\n   Event:          LDP Release\n   New State:      IDLE\n\
    \   Actions:\n      1) Free the upstream label\n      2) Delete the control block.\n\
    \   State:          RELEASE_AWAITED\n   Event:          LDP Withdraw\n   New State:\
    \      RELEASE_AWAITED\n   Actions:\n      It is a protocol error from the downstream\
    \ LDP peer, but send a\n      LDP- RELEASE anyway.\n   State:          RELEASE_AWAITED\n\
    \   Event:          LDP Upstream Abort\n   New State:      IDLE\n   Actions:\n\
    \      1) Free the upstream label\n      2) Delete the control block.\n   State:\
    \          RELEASE_AWAITED\n   Event:          LDP Downstream NAK\n   New State:\
    \      RELEASE_AWAITED\n   Actions:\n      Ignore the event.  Continue waiting\
    \ for the LDP-RELEASE from\n      upstream.\n   State:          RELEASE_AWAITED\n\
    \   Event:          Upstream Lost\n   New State:      IDLE\n   Actions:\n    \
    \  1) Free the upstream label\n      2) Delete the control block.\n   State: \
    \         RELEASE_AWAITED\n   Event:          Downstream Lost\n   New State: \
    \     RELEASE_AWAITED\n   Actions:\n      Ignore the event.  Continue waiting\
    \ for the LDP-RELEASE from\n      upstream.\n   State:          RELEASE_AWAITED\n\
    \   Event:          Internal SetUp\n   New State:      RELEASE_AWAITED\n   Actions:\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         RELEASE_AWAITED\n   Event:          Internal Destroy\n   New State:\
    \      RELEASE_AWAITED\n   Actions:\n      Ignore the event.  It is an internal\
    \ implementation error.\n   State:          RELEASE_AWAITED\n   Event:       \
    \   Internal Cross-Connect\n   New State:      RELEASE_AWAITED\n   Actions:\n\
    \   Ignore the event.  It is an internal implementation error.\n"
- title: 2.2.6 Handling the Next Hop Change
  contents:
  - "2.2.6 Handling the Next Hop Change\n   When an LSR detects a better next hop,\
    \ it may decides to establish a\n   new LSP through this next hop.  For example,\
    \ an LSR is configured as\n   \"local repair\", or the LSR is configured as \"\
    global repair\" and it is\n   the ingress end of a LSP.  It can then create a\
    \ Next Hop Trigger\n   Control Block and use the state machine of Next Hop Trigger\
    \ Control\n   Block to establish a new LSP through the better next hop.\n"
- title: 2.2.6.1 Next Hop Trigger Control Block
  contents:
  - "2.2.6.1 Next Hop Trigger Control Block\n   -- State\n   -- LSP Control Block\
    \ Pointer, that points to the original LSP control\n   block.\n   -- New Next\
    \ Hop LSP Control Block Pointer, that points to the LSP\n   Control Block that\
    \ is setting up an LSP through the new next hop.\n"
- title: 2.2.6.2 States
  contents:
  - "2.2.6.2 States\n   -- IDLE\n   This is the initial LSP state, when the Trigger_Control_Block\
    \ is\n   created.\n   -- NEW_NH_RETRY\n   This is the state where an LSR waits\
    \ for a retry timer to expire and\n   then tries to establish an LSP through a\
    \ new next hop.\n   -- NEW_NH_RESPONSE_AWAITED\n   This is the state where an\
    \ LSR is in the middle of establishing a new\n   LSP through a new next hop. \
    \ It has triggered a LSP control block to\n   send an LDP-REQUEST towards the\
    \ new next hop and is waiting for the\n   LDP-MAPPING.\n"
- title: 2.2.6.3 Events
  contents:
  - "2.2.6.3 Events\n   -- Internal New NH\n   The LSR detects there is a new next\
    \ hop for a FEC.\n   -- Internal Retry Timeout\n   The LSP retry timer expires.\n\
    \   -- Internal LSP UP\n   The LSP to the new Next Hop is UP\n   -- Internal LSP\
    \ NAK\n   The LSP through the new next hop could not get set up\n   -- Internal\
    \ Destroy\n   This event is triggered when the LSR lost the LDP session with its\n\
    \   upstream neighbor.\n"
- title: 2.2.6.4 State Transition for next hop change
  contents:
  - "2.2.6.4 State Transition for next hop change\n                     +---------------------+\n\
    \                     |                     |\n                     |     IDLE\
    \            |<------------+\n                     |                     |   \
    \          |\n                     +---------------------+             |\n   \
    \                           |                          |\n                   \
    \           |                          |\n                              | (Internal\
    \ New NH)        |\n                              |                          |\n\
    \                              v                          |\n                \
    \     +---------------------+             |\n                     |          \
    \           |             |\n                     |   NEW_NH_RETRY      |----------->-+\n\
    \                     |                     | (Internal   |\n                \
    \     +---------------------+  Destroy)   |\n                              | \
    \                         |\n                              |                 \
    \         |\n                              | (Internal retry timeout) |\n    \
    \                          |                          |\n                    \
    \          v                          |\n                     +---------------------+\
    \             |\n                     |                     | (Internal   |\n\
    \                     | NEW_NH_RESPONSE     |  Destroy)   |\n                \
    \     | _AWAITED            |----------->-+\n                     |          \
    \           |             |\n                     +---------------------+    \
    \         |\n                              |                          |\n    \
    \                          | (Internal LSP UP)        |\n                    \
    \          | (Internal LSP NAK)       |\n                              +------------------------>-+\n"
- title: 2.2.6.5 State Machine
  contents:
  - '2.2.6.5 State Machine

    '
- title: 2.2.6.5.1 State -- "IDLE"
  contents:
  - "2.2.6.5.1 State -- \"IDLE\"\n   State:          IDLE\n   Event:          Internal\
    \ New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n      Start the LSP retry\
    \ timer and go to the `NEW_NH_RETRY' state.\n   State:          IDLE\n   Event:\
    \          Internal retry timeout\n   New State:      IDLE\n   Actions:\n    \
    \  Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal LSP UP\n   New State:      IDLE\n   Actions:\n  \
    \    Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal LSP NAK\n   New State:      IDLE\n   Actions:\n \
    \     Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal destroy\n   New State:      IDLE\n   Actions:\n \
    \     Ignore.  It is an internal implementation error.\n"
- title: 2.2.6.5.2 State -- "NEW_NH_RETRY"
  contents:
  - "2.2.6.5.2 State -- \"NEW_NH_RETRY\"\n   State:          NEW_NH_RETRY\n   Event:\
    \          Internal New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n   \
    \   Restart the LSP retry timer.\n   State:          NEW_NH_RETRY\n   Event: \
    \         Internal retry timeout\n   New State:      Depends on action routine.\n\
    \   Actions:\n      If the new next hop is the same one as the old next hop, go\
    \ to\n      IDLE and delete the control block.\n      Otherwise, create an LSP\
    \ control block that will try to establish\n      a new LSP through the new next\
    \ hop, send event `Internal Setup' to\n      its state machine and go to NEW_NH_RESPONSE_AWAITED.\n\
    \   State:          NEW_NH_RETRY\n   Event:          Internal LSP UP\n   New State:\
    \      NEW_NH_RETRY\n   Actions:\n      Ignore.  It is an internal implementation\
    \ error.\n   State:          NEW_NH_RETRY\n   Event:          Internal LSP NAK\n\
    \   New State:      NEW_NH_RETRY\n   Actions:\n      Ignore.  It is an internal\
    \ implementation error.\n   State:          NEW_NH_RETRY\n   Event:          Internal\
    \ destroy\n   New State:      IDLE\n   Actions:\n      Stop the timer, go to IDLE\
    \ and delete the control block.\n"
- title: 2.2.6.5.3 State -- "NEW_NH_RESPONSE_AWAITED"
  contents:
  - "2.2.6.5.3 State -- \"NEW_NH_RESPONSE_AWAITED\"\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n\
    \      Restart the LSP retry timer, send `Internal destroy' to the\n      control\
    \ block of the LSP for the new next hop and go to the\n      `NEW_NH_RETRY' state.\n\
    \   State:          NEW_NH_RESPONSE_AWAITED\n   Event:          Internal retry\
    \ timeout\n   New State:      NEW_NH_RESPONSE_AWAITED\n   Actions:\n      Ignore.\
    \  It is an internal implementation error.\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal LSP UP\n   New State:      IDLE\n   Actions:\n  \
    \    Send event `Internal cross-connect' event to the LSP control block\n    \
    \  of the new next hop.\n      Send event `Internal destroy' event to the original\
    \ LSP control\n      block.\n      Then go to IDLE and delete the control block.\n\
    \   State:          NEW_NH_RESPONSE_AWAITED\n   Event:          Internal LSP NAK\n\
    \   New State:      IDLE\n   Actions:\n      Delete the control block.\n   State:\
    \          NEW_NH_RESPONSE_AWAITED\n   Event:          Internal destroy\n   New\
    \ State:      IDLE\n   Actions:\n      Send event `Internal destroy' the control\
    \ block for the new LSP\n      through the new next hop.\n"
- title: 2.2.7 LDP Related Message Handling
  contents:
  - "2.2.7 LDP Related Message Handling\n   -  If an LSR receives an LDP-REQUEST from\
    \ an upstream LSR:\n      a) If this is a duplicate request, discard the message.\
    \  A\n         duplicate request means that there is a LSP Control Block that\n\
    \         has the same FEC, Upstream Label Request ID and Upstream Label\n   \
    \      Request ID and same Upstream LDP Session Identifier.\n      b) Otherwise,\
    \ create a new LSP Control Block, store the relevant\n         information from\
    \ the message into the control block, then pass\n         the event `LDP Request'\
    \ to its state machine.\n   -  If an LSR receives an LDP-MAPPING from a downstream\
    \ LSR:\n      a) Extract the 'Label Request Message ID' field and from the LDP-\n\
    \         MAPPING.\n      b) Find an LSP Control Block that has the same Downstream\
    \ Label\n         Request ID and the same Downstream LDP Session Identifier.\n\
    \      c) If an LSP Control Block is found, pass the event `LDP Mapping'\n   \
    \      to its state machine.\n      d) If there is no matching LSP Control Block\
    \ found, then try to\n         find an LSP Control Block that has the same Downstream\
    \ Label\n         and the same Downstream LDP Session Identifier.\n      e) If\
    \ an LSP Control Block is found, pass the event `LDP Mapping'\n         to its\
    \ state machine.\n      f) Otherwise, ignore the LDP-MAPPING and send a LDP-RELEASE\n\
    \         downstream.\n   -  If an LSR receives an LDP-RELEASE from an upstream\
    \ LSR:\n      a) Find an LSP Control Block that has the same Upstream Label and\n\
    \         the same Upstream LDP Session Identifier.\n      b) If an LSP Control\
    \ Block is found, pass the event `LDP Release'\n         to its state machine.\n\
    \      c) Otherwise, ignore the message.\n   -  If an LSR receives an LDP-WITHDRAW\
    \ from a downstream LSR:\n      a) Find an LSP Control Block that has the same\
    \ Downstream Label\n         and the same Downstream LDP Session Identifier.\n\
    \      b) If an LSP Control Block is found, pass the event `LDP Withdraw'\n  \
    \       to its state machine.\n      c) Otherwise, ignore the LDP-WITHDRAW and\
    \ send a LDP-RELEASE\n         downstream.\n   -  If an upstream LDP peer is lost:\n\
    \      a) Find all the LSP Control Blocks whose upstream LDP peer is that\n  \
    \       LSR.\n      b) Then pass the event `Upstream Lost' to their state machines.\n\
    \   -  If a downstream LDP peer is lost:\n      a) Find all the LSP Control Blocks\
    \ whose downstream LDP peer is\n         that LSR.\n      b) Then pass the event\
    \ `Downstream Lost' to their state machines.\n   -  If the LSR detects a new next\
    \ hop for an FEC:\n      For each LSP that needs \"local repair\", or it needs\
    \ \"global\n      repair\" and it is the ingress of the LSP, pass event \"Internal\
    \ New\n      NH\" to its state machine.\n   -  If an LSR receives an LDP-Abort\
    \ from an upstream LSR:\n      a) Extract the LDP Request ID value from the LDP-Abort\
    \ message.\n      b) Find an LSP Control Block that has the same Upstream Label\n\
    \         Request ID and the same Upstream LDP Session Identifier.\n      c) If\
    \ an LSP Control Block is found, pass the event `LDP Upstream\n         Abort'\
    \ to its state machine.\n      d) Otherwise, ignore the message.\n   -  If the\
    \ LSR receives an LDP-NAK from a downstream LSR:\n      a) Extract the LDP Request\
    \ ID value from the LDP-NAK.\n      b) Find an LSP Control Block that has the\
    \ same Downstream Label\n         Request ID and the same Downstream LDP Session\
    \ Identifier.\n      c) If an LSP Control Block is found, pass the event `LDP\n\
    \         Downstream NAK' to its state machine.\n      d) Otherwise, ignore the\
    \ message.\n"
- title: 2.3. ATM Switch LSR with VC-merge
  contents:
  - '2.3. ATM Switch LSR with VC-merge

    '
- title: 2.3.1 VC-merge
  contents:
  - "2.3.1 VC-merge\n   A VC-merge capable LSR can map multiple incoming labels (VPI/VCI)\n\
    \   into one outgoing label.  It is possible that this LSR can only merge\n  \
    \ a limited number of incoming labels into a single outgoing label.  As\n   described\
    \ in [2], suppose, for example, that due to some hardware\n   limitation a node\
    \ is capable of merging four incoming labels into a\n   single outgoing label.\
    \  Suppose however, that this particular node\n   has six incoming labels arriving\
    \ at it for a particular FEC.  In this\n   case, this node may merge these into\
    \ two outgoing labels.\n   When an upstream LSR has a limited merging capability,\
    \ it is\n   difficult for a downstream LSR to know how many labels should be\n\
    \   assigned to each FEC.  In this case, downstream-on-demand is\n   recommended.\n"
- title: 2.3.2 Control Block
  contents:
  - "2.3.2 Control Block\n   There are 3 types of control blocks involved: Upstream\
    \ LSP Control\n   Block, Downstream LSP Control Block, and Next Hop Trigger Control\n\
    \   Block.\n   There is one Upstream LSP Control Block for each LDP-REQUEST\n\
    \   received.\n   There is one Downstream LSP Control Block for each unique LDP-REQUEST\n\
    \   sent to a downstream LSR.  There can be multiple Downstream LSP\n   Control\
    \ Blocks per FEC in an LSR.  This can be the result of an\n   upstream LSR asking\
    \ for a label for an FEC.  This LSR must assign a\n   unique upstream label and\
    \ it can not merge this upstream label into\n   an existing downstream label for\
    \ this FEC.\n   There is one Next Hop Trigger Control Block for each FEC for which\
    \ a\n   better next hop has been detected and the LSR has decided to switch\n\
    \   to this better next hop.  It could be the result of \"local repair\" or\n\
    \   \"global repair\" if the LSR is the ingress LSR of the LSP.\n   A Downstream\
    \ LSP Control Block contains a list of pointers to\n   Upstream LSP Control Blocks\
    \ or the Next Hop Trigger Control Block.\n   This means that this LSR has decided\
    \ to map the multiple labels\n   listed in the Upstream LSP Control Blocks and\
    \ the Next Hop Trigger\n   Control Block into a single label listed in the Downstream\
    \ LSP\n   Control Block.\n   An Upstream LSP Control Block may contain the following\
    \ information:\n      -  Upstream LDP Session Identifier\n      -  State\n   \
    \   -  Upstream Label (assigned by this LSR)\n      -  Downstream LSP Control\
    \ Block pointer\n      -  Upstream LDP Request ID (assigned by the upstream LSR\
    \ in\n         downstream-on-demand mode)\n      -  Next_Hop_Trigger_Block pointer\n\
    \   Upstream Label and Upstream LDP Session Identifier can be used to\n   locate\
    \ a unique Upstream LSP Control Block.\n   If an LSR is using downstream-on-demand\
    \ mode, it can use the Upstream\n   LDP Request ID and the Upstream LDP Session\
    \ Identifier to locate a\n   unique Upstream LSP Control Block.\n   An Next_Hop_Trigger\
    \ LSP Control Block may contain the following\n   information:\n      -  Upstream\
    \ LSP Control Block pointer, that points to the one that\n         is needed to\
    \ switch over to the better next hop\n      -  State\n      -  Downstream LSP\
    \ Control Block pointer\n   A Downstream LSP Control Block may contain the following\
    \ information:\n      -  FEC\n      -  State\n      -  Downstream LDP Session\
    \ Identifier\n      -  list of pointers to the Upstream LSP Control Blocks or\
    \ the\n         Trigger_Control_Blocks that are merged at this LSR for this FEC\n\
    \      -  Downstream Label (assigned by the downstream LSR)\n      -  Downstream\
    \ Label Request ID (assigned by the LSR itself if it\n         is using downstream-on-demand\
    \ mode)\n   Downstream Label, Downstream LDP Session Identifier can be used to\n\
    \   locate a unique Downstream LSP Control Block.\n   If an LSR is using downstream-on-demand\
    \ mode, it can also use the\n   Downstream Label Request ID and the Downstream\
    \ LDP Session Identifier\n   to locate a unique Downstream LSP Control Block.\n\
    \   The following diagram details the relationship between these 2 types\n   of\
    \ control blocks:\n   For example, the LSR has decided to merge 3 LDP-REQUESTs\
    \ of a FEC\n   from upstream LSR1, LSR2, LSR3 into one LDP-REQUEST and sent it\
    \ to a\n   downstream LSR4.\n   +---------------------+\n   |                \
    \     |\n   | Upstream_LSP_Control|\n   | _Block  for Upstream|------+\n   | LSR1\
    \                |      |\n   +---------------------+      |\n               \
    \                 |\n   +---------------------+      |\n   |                 \
    \    |      |\n   | Upstream_LSP_Control|      | (merged into)\n   | _Block for\
    \ Upstream |------+\n   |  LSR2               |      |\n   +---------------------+\
    \      |    +------------------------------+\n                               \
    \ |    |                              |\n   +---------------------+      +--->|\
    \ Downstream LSP Control Block |\n   | Next_Hop_Trigger_   |      |    |   for\
    \ Downstream LSR4        |\n   | LSP Control Block   |------+    |           \
    \                   |\n   |                     |           +------------------------------+\n\
    \   +---------------------+\n"
- title: 2.3.3   State Machines for Downstream-on-demand Mode
  contents:
  - "2.3.3   State Machines for Downstream-on-demand Mode\n   The following sections\
    \ describe the state machines used in\n   downstream-on-demand mode.\n"
- title: 2.3.3.1 State of the Upstream LSP Control Block's State Machine for
  contents:
  - "2.3.3.1 State of the Upstream LSP Control Block's State Machine for\n       \
    \ Downstream-on-demand Mode\n   -- IDLE\n   This is the initial LSP state.\n \
    \  -- RESPONSE_AWAITED\n   This state means that the LSR has received and processed\
    \ an LDP-\n   REQUEST from an upstream LSR, and has sent a new LDP-REQUEST towards\n\
    \   a downstream LSR.  The LSR is waiting for the LDP-MAPPING from the\n   downstream\
    \ LSR.\n   -- ESTABLISHED\n   This state means that the LSR has received the LDP-MAPPING\
    \ from the\n   downstream LSR and the LSP is up and operational.\n   -- RELEASE_AWAITED\n\
    \   This state means that the LSR has sent a LDP-WITHDRAW upstream and is\n  \
    \ waiting for the LDP-RELEASE before freeing up the label resource.\n"
- title: 2.3.3.2 Events of the Upstream LSP Control Block's State Machine for
  contents:
  - "2.3.3.2 Events of the Upstream LSP Control Block's State Machine for\n      \
    \  Downstream-on-demand Mode\n   -- LDP Request\n   The LSR receives an LDP-REQUEST\
    \ from an upstream LSR.\n   -- Internal Downstream Mapping\n   This event is sent\
    \ by one Downstream LSP Control Block's state\n   machine.  This Downstream LSP\
    \ Control Block is the merged Downstream\n   LSP Control Block of this Upstream\
    \ LSP Control Block.  The event is\n   the result of receiving an LDP-MAPPING\
    \ by the Downstream LSP Control\n   Block's state machine.\n   -- LDP Release\n\
    \   The LSR receives an LDP-RELEASE from an upstream LSR.\n   -- Internal Downstream\
    \ Withdraw\n   This event is sent by one Downstream LSP Control Block's state\n\
    \   machine.  This Downstream LSP Control Block is the merged Downstream\n   LSP\
    \ Control Block of this Upstream LSP Control Block.  The event is\n   the result\
    \ of receiving an LDP-WITHDRAW by the Downstream LSP Control\n   Block's state\
    \ machine.\n   -- LDP Upstream Abort\n   The LSR receives an LDP-ABORT from an\
    \ upstream LSR.\n   -- Internal Downstream NAK\n   This event is sent by one Downstream\
    \ LSP Control Block's state\n   machine.  This Downstream LSP Control Block is\
    \ the merged Downstream\n   LSP Control Block of this Upstream LSP Control Block.\
    \  The event is\n   the result of receiving an LDP-NAK by the Downstream LSP Control\n\
    \   Block's state machine, or it detects an error.\n   -- Upstream Lost\n   The\
    \ LSR loses the LDP session with its upstream LDP peer.\n   -- Internal New NH\n\
    \   The LSR detects there is better next hop and decides to establish the\n  \
    \ lsp through this better next hop.\n   -- Internal Re-Cross-Connect\n   This\
    \ event is used to trigger splicing into a different downstream\n   LSP.  This\
    \ can happens when it is switched over to a better LSP\n   through the new next\
    \ hop.\n"
- title: 2.3.3.3 State Transitions of the Upstream LSP Control Block's State
  contents:
  - "2.3.3.3 State Transitions of the Upstream LSP Control Block's State\n       \
    \ Machine for Downstream-on-demand Mode\n                      +-------------------+\n\
    \                      |                   |\n            +-------->|  IDLE  \
    \           |<-------------------+\n            |         |                  \
    \ |                    |\n            |         +-------------------+        \
    \            |\n            |(LDP Abort)       |                             \
    \  |\n            |(Internal         |(LDP Request)                  |\n     \
    \       | Downstream NAK)  |                               |\n            |(Upstream\
    \ Lost)   |               (Upstream Lost) |\n            |                  v\
    \                 (LDP Release) |\n            |         +-------------------+\
    \                    |\n            |         |                   |          \
    \          |\n            +---------|  RESPONSE_AWAITED |                    |\n\
    \                      |                   |                    |\n          \
    \            +-------------------+                    |\n                    \
    \           |                               |\n                              \
    \ |(Internal Downstream           |\n                               |  mapping)\
    \                     |\n                               |                    \
    \           |\n                               v                              \
    \ |\n                      +-------------------+                    |\n      \
    \                |                   |                    |\n                \
    \      |  ESTABLISHED      |------->------------+\n                      |   \
    \                |                    |\n                      +-------------------+\
    \                    |\n                               |                     \
    \          |\n                               |                               |\n\
    \                               |(Internal Downstream Withdraw) |\n          \
    \                     |(Internal Downstream NAK)      |\n                    \
    \           v                               |\n                      +-------------------+\
    \    (LDP Upstream   |\n                      |                   |     Abort)\
    \         |\n                      |RELEASE_AWAITED    |------->------------+\n\
    \                      |                   |\n                      +-------------------+\n"
- title: 2.3.3.4 Upstream LSP Control Block's State Machine for Downstream-on-
  contents:
  - "2.3.3.4 Upstream LSP Control Block's State Machine for Downstream-on-\n     \
    \   demand Mode\n"
- title: 2.3.3.4.1 State -- "IDLE"
  contents:
  - "2.3.3.4.1 State -- \"IDLE\"\n   State:          IDLE\n   Event:          LDP\
    \ Request\n   New State:      Depends upon the action routine.\n   Actions:\n\
    \      If this LSR is the LSP Egress or Proxy Egress [2],\n      Then:\n     \
    \    choose an upstream label, allocate the resources, connect this\n        \
    \ upstream label to the local IP forwarding module, send an LDP-\n         MAPPING\
    \ upstream with the upstream label and go to the state\n         `ESTABLISHED'.\n\
    \      else\n         Obtain a next hop (or interface).  Find a Downstream LSP\n\
    \         Control Block that has the same FEC and the same next hop and\n    \
    \     also is able to merge more input labels.  If not found, create\n       \
    \  a new Downstream LSP Control Block with the state `IDLE'.\n         If the\
    \ state of the Downstream LSP Control Block is\n         `ESTABLISHED', choose\
    \ an upstream label, connect the upstream\n         label with the downstream\
    \ label and send an LDP-MAPPING\n         upstream with the upstream label, and\
    \ go to the state\n         `ESTABLISHED'.\n         If the state of Downstream\
    \ LSP Control Block is not\n         `ESTABLISHED', set the state of the Upstream\
    \ LSP Control Block\n         to `RESPONSE_AWAITED'.  If the LSR use the independent\
    \ control\n         mode [2], choose an upstream label, and send an LDP-MAPPING\n\
    \         upstream.\n         Pass the event `Internal AddUpstream' to the Downstream\
    \ LSP\n         Control Block's state machine.\n      If unable to process the\
    \ request for any reason, issue an LDP-NAK\n      to the sender with the appropriate\
    \ error code, go to IDLE and\n      delete the control block.\n   State:     \
    \     IDLE\n   Event:          Internal Downstream Mapping\n   New State:    \
    \  IDLE\n   Actions:\n      Ignore the event.  It is an internal implementation\
    \ error.\n   State:          IDLE\n   Event:          LDP Release\n   New State:\
    \      IDLE\n   Actions:\n      Ignore the event.  It is an internal implementation\
    \ error.\n   State:          IDLE\n   Event:          Internal Downstream Withdraw\n\
    \   New State:      IDLE\n   Actions:\n      Ignore the event.  It is an internal\
    \ implementation error.\n   State:          IDLE\n   Event:          LDP Upstream\
    \ Abort\n   New State:      IDLE\n   Actions:\n      Ignore the event.  It is\
    \ an internal implementation error.\n   State:          IDLE\n   Event:      \
    \    Internal Downstream NAK\n   New State:      IDLE\n   Actions:\n      Ignore\
    \ the event.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Upstream Lost\n   New State:      IDLE\n   Actions:\n    \
    \  Ignore the event.  It is an internal implementation error.\n   State:     \
    \     IDLE\n   Event:          Internal Re-Cross-Connect\n   New State:      IDLE\n\
    \   Actions:\n      Ignore the event.  It is an internal implementation error.\n\
    \   State:          IDLE\n   Event:          Internal New NH\n   New State:  \
    \    IDLE\n   Actions:\n      Ignore the event.  It is an internal implementation\
    \ error.\n"
- title: 2.3.3.4.2 State -- "RESPONSE_AWAITED"
  contents:
  - "2.3.3.4.2 State -- \"RESPONSE_AWAITED\"\n   State:          RESPONSE_AWAITED\n\
    \   Event:          LDP Request\n   New State:      RESPONSE_AWAITED\n   Actions:\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         RESPONSE_AWAITED\n   Event:          Internal Downstream Mapping\n \
    \  New State:      Depends on the action routine.\n   Actions:\n      If the LSR\
    \ uses the ordered control mode, assign an upstream\n      label, connect the\
    \ upstream label to the downstream label and\n      allocate the resources, send\
    \ an LDP-MAPPING upstream with the\n      upstream label and go to `ESTABLISHED'.\n\
    \      If unable to process the message for any reason, issue an LDP-NAK\n   \
    \   upstream and an LDP-RELEASE downstream, go to IDLE and delete the\n      control\
    \ block.\n   State:          RESPONSE_AWAITED\n   Event:          LDP Release\n\
    \   New State:      RESPONSE_AWAITED\n   Actions\n      Ignore the event.  It\
    \ is a protocol error from the upstream peer.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal Downstream Withdraw\n   New State:      RESPONSE_AWAITED\n\
    \   Actions\n      Ignore the event.  It is an internal implementation error.\n\
    \   State:          RESPONSE_AWAITED\n   Event:          LDP Upstream Abort\n\
    \   New State:      IDLE\n   Actions\n      If the LSR uses the independent control\
    \ mode, free the upstream\n      label and the resources.\n      Send the event\
    \ `Internal DeleteUpstream' to its Downstream LSP\n      Control Block's state\
    \ machine.\n      Delete the control block.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal Downstream NAK\n   New State:      IDLE\n   Actions:\n\
    \      If the LSR uses the independent control mode, free the upstream\n     \
    \ label and the resources.  Then, send an LDP-WITHDRAW upstream.\n      If the\
    \ LSR uses the ordered control mode, propagate the LDP-NAK\n      upstream.\n\
    \      Delete the control block.\n   State:          RESPONSE_AWAITED\n   Event:\
    \          Upstream Lost\n   New State:      IDLE\n   Actions\n      If the LSR\
    \ uses the independent control mode, free the upstream\n      label and the resources.\n\
    \      Send the event `Internal DeleteUpstream' to its Downstream LSP\n      Control\
    \ Block's state machine.\n      Delete the control block.\n   State:         \
    \ RESPONSE_AWAITED\n   Event:          Internal Re-Cross-Connect\n   New State:\
    \      RESPONSE_AWAITED\n   Actions:\n      Ignore the event.  It is an internal\
    \ implementation error.\n   State:          RESPONSE_AWAITED\n   Event:      \
    \    Internal New NH\n   New State:      depends on the actions\n   Actions:\n\
    \      Send event `Internal DeleteUpstream' to its old downstream control\n  \
    \    block.\n      Find a Downstream LSP Control Block that has the same FEC and\
    \ the\n      same next hop and also is able to merge more input labels.  If not\n\
    \      found, create a new Downstream LSP Control Block with the state\n     \
    \ `IDLE'.\n      If the state of the Downstream LSP Control Block is `ESTABLISHED',\n\
    \      choose an upstream label, connect the upstream label with the\n      downstream\
    \ label and send an LDP-MAPPING upstream with the\n      upstream label, and go\
    \ to the state `ESTABLISHED'.\n      If the state of Downstream LSP Control Block\
    \ is not `ESTABLISHED',\n      set the state of the Upstream LSP Control Block\
    \ to\n      `RESPONSE_AWAITED'.\n      Pass the event `Internal AddUpstream' to\
    \ the new Downstream LSP\n      Control Block's state machine.\n"
- title: 2.3.3.4.3 State -- "ESTABLISHED"
  contents:
  - "2.3.3.4.3 State -- \"ESTABLISHED\"\n   State:          ESTABLISHED\n   Event:\
    \          LDP Request\n   New State:      ESTABLISHED\n   Actions\n      Ignore\
    \ the event.  It is an internal implementation error.\n   State:          ESTABLISHED\n\
    \   Event:          Internal Downstream Mapping\n   New State:      ESTABLISHED\n\
    \   Actions\n      Process the new attributes of the mapping and then propagate\
    \ the\n      LDP-MAPPING upstream.\n   State:          ESTABLISHED\n   Event:\
    \          LDP Release\n   New State:      IDLE\n   Actions\n      Disconnect\
    \ the upstream label from the downstream label, free the\n      upstream label\
    \ and resources.\n      Send the event `Internal DeleteUpstream' to its Downstream\
    \ LSP\n      Control Block's state machine.\n      Send the event `Internal Destroy'\
    \ to the Next_Hop_Trigger_Block's\n      state machine if the LSR was in the middle\
    \ of switching over to\n      the better next hop.\n      Delete the control block.\n\
    \   State:          ESTABLISHED\n   Event:          Internal Downstream Withdraw\n\
    \   New State:      Depends on the action routine.\n   Actions\n      If it uses\
    \ independent mode, set its state to `IDLE' and create a\n      internal `LDP\
    \ Request' and send to its own state machine.\n      Else\n         Disconnect\
    \ the upstream label from the downstream label.\n         Propagate the LDP-WITHDRAW\
    \ upstream and go to state\n         `RELEASE_AWAITED'.\n      Send the event\
    \ `Internal Destroy' to the Next_Hop_Trigger_Block's\n      state machine if the\
    \ LSR was in the middle of switching over to\n      the better next hop.\n   State:\
    \          ESTABLISHED\n   Event:          LDP Upstream Abort\n   New State: \
    \     ESTABLISHED\n   Actions\n      Ignore the event.\n      Note: This scenario\
    \ can occur if the upstream LSR sends a LDP-\n      ABORT at about the same time\
    \ as the local LSR sends a LDP-MAPPING.\n      In this situation, it should be\
    \ up to exactly one of the two LSRs\n      as to whether or not the label that\
    \ was sent remains valid.  The\n      LDP specification [4] procedures leave the\
    \ choice to the upstream\n      LSR that must send an LDP-RELEASE if it will not\
    \ use the label\n      provided.\n   State:          ESTABLISHED\n   Event:  \
    \        Internal Downstream NAK\n   New State:      Depends on the action routine.\n\
    \   Actions:\n      If it uses independent mode, set its state to `IDLE' and create\
    \ a\n      internal `LDP Request' and send to its own state machine.\n      Else\n\
    \         Disconnect the upstream label from the downstream label\n         Send\
    \ an LDP-WITHDRAW upstream and go to state\n         `RELEASE_AWAITED'.\n    \
    \  Send the event `Internal Destroy' to the Next_Hop_Trigger_Block's\n      state\
    \ machine if the LSR was in the middle of switching over to\n      the better\
    \ next hop.\n   State:          ESTABLISHED\n   Event:          Upstream Lost\n\
    \   New State:      IDLE\n   Actions:\n      Disconnect the upstream label from\
    \ the downstream label, free the\n      upstream label and the resources.\n  \
    \    Send the event `Internal DeleteUpstream' to its Downstream LSP\n      Control\
    \ Block's state machine.\n      Send the event `Internal Destroy' to the Next_Hop_Trigger_Block's\n\
    \      state machine if the LSR was in the middle of switching over to\n     \
    \ the better next hop.\n      Delete the control block.\n   State:          ESTABLISH\n\
    \   Event:          Internal Re-Cross-Connect\n   New State:      ESTABLISH\n\
    \   Actions:\n      Reconnect the upstream label to the new downstream label.\n\
    \      Send the event `Internal DeleteUpstream' to its old Downstream LSP\n  \
    \    Control Block's state machine.\n   State:          ESTABLISH\n   Event: \
    \         Internal New NH\n   New State:      ESTABLISH\n   Actions:\n      Create\
    \ a new Next_Hop_Trigger_Control_Block and pass event\n      `Internal New NH'\
    \ to its state machine.\n"
- title: 2.3.3.4.4 State -- "RELEASE_AWAITED"
  contents:
  - "2.3.3.4.4 State -- \"RELEASE_AWAITED\"\n   State:          RELEASE_AWAITED\n\
    \   Event:          LDP Request\n   New State:      RELEASE_AWAITED\n   Actions:\n\
    \      Ignore the event.  It is a protocol error from the upstream LSR.\n   State:\
    \          RELEASE_AWAITED\n   Event:          Internal Downstream Mapping\n \
    \  New State:      RELEASE_AWAITED\n   Actions:\n      Ignore the event.  It is\
    \ an internal implementation error.\n   State:          RELEASE_AWAITED\n   Event:\
    \          LDP Release\n   New State:      IDLE\n   Actions:\n      Free the upstream\
    \ label resource and delete the control block.\n   State:          RELEASE_AWAITED\n\
    \   Event:          Internal Downstream Withdraw\n   New State:      RELEASE_AWAITED\n\
    \   Actions:\n      Ignore the event.  It is a protocol error from the downstream\
    \ LSR.\n   State:          RELEASE_AWAITED\n   Event:          LDP Upstream Abort\n\
    \   New State:      IDLE\n   Actions:\n      Free the upstream label resource\
    \ and delete the control block.\n   State:          RELEASE_AWAITED\n   Event:\
    \          Internal Downstream NAK\n   New State:      RELEASE_AWAITED\n   Actions:\n\
    \      Ignore the event.  And continue waiting for the LDP-RELEASE.\n   State:\
    \          RELEASE_AWAITED\n   Event:          Upstream Lost\n   New State:  \
    \    IDLE\n   Actions:\n      Free the upstream label resource and delete the\
    \ control block.\n   State:          RELEASE_AWAITED\n   Event:          Internal\
    \ New NH\n   New State:      RELEASE_AWAITED\n   Actions:\n      Ignore the event.\
    \  And continue waiting for the LDP-RELEASE.\n   State:          RELEASE_AWAITED\n\
    \   Event:          Internal Re-Cross-Connect\n   New State:      RELEASE_AWAITED\n\
    \   Actions:\n      Ignore the event.  It is an internal implementation error.\n"
- title: 2.3.3.5 State of the Downstream LSP Control Block's State Machine for
  contents:
  - "2.3.3.5 State of the Downstream LSP Control Block's State Machine for\n     \
    \   Downstream-on-demand Mode\n   -- IDLE\n   This is the initial LSP state.\n\
    \   -- RESPONSE_AWAITED\n   This state means that the LSR has received an LDP-REQUEST\
    \ from an\n   upstream LSR, has processed the LDP-REQUEST, and has sent a new\
    \ LDP-\n   REQUEST towards a downstream LSR.  The LSR is waiting for the LDP-\n\
    \   MAPPING from the downstream LSR.\n   -- ESTABLISHED\n   This state means that\
    \ the LSR has received the LDP-MAPPING from the\n   downstream LSR and the LSP\
    \ is up and operational.\n"
- title: 2.3.3.6 Events of the Downstream LSP Control Block's State Machine for
  contents:
  - "2.3.3.6 Events of the Downstream LSP Control Block's State Machine for\n    \
    \    Downstream-on-demand Mode\n   -- Internal AddUpstream\n   This event is sent\
    \ by an Upstream LSP Control Block's state machine\n   when it is created.\n \
    \  -- Internal DeleteUpstream\n   This event is sent by an Upstream LSP Control\
    \ Block's state machine\n   when it is deleted.\n   -- LDP Mapping\n   The LSR\
    \ receives an LDP-MAPPING from a downstream LSR.\n   -- LDP Withdraw\n   The LSR\
    \ receives an LDP-WITHDRAW from a downstream LSR.\n   -- LDP Downstream NAK\n\
    \   The LSR receives an LDP-NAK from a downstream LSR.\n   -- Downstream Lost\n\
    \   The LSR loses the LDP session with its downstream LSR.\n"
- title: 2.3.3.7 State Transitions of the Downstream LSP Control Block's State
  contents:
  - "2.3.3.7 State Transitions of the Downstream LSP Control Block's State\n     \
    \   Machine for Downstream-on-demand mode\n               +-------------------+\n\
    \               |                   |\n               |  IDLE             |<--------------+\n\
    \               |                   |               |(last Internal\n        \
    \       +-------------------+               | DeleteUpstream)\n              \
    \          |                          |(LDP Withdraw)\n                      \
    \  |(1st Internal AddUpstream)|\n                        |                   \
    \       |(LDP Downstream\n                        v                          |\
    \ NAK)\n               +-------------------+               |(Downstream\n    \
    \           |                   |               |   Lost)\n               |  RESPONSE_AWAITED\
    \ |---------->----+\n               |                   |               |\n  \
    \             +-------------------+               |\n                        |\
    \                          |\n                        |(LDP Mapping)         \
    \    |\n                        |                          |\n               \
    \         v                          |\n               +-------------------+ \
    \              |\n               |                   |               |\n     \
    \          |  ESTABLISHED      |-------->------+\n               |           \
    \        |\n               +-------------------+\n"
- title: 2.3.3.8 Downstream LSP Control Block's State Machine for Downstream-on-
  contents:
  - "2.3.3.8 Downstream LSP Control Block's State Machine for Downstream-on-\n   \
    \     demand Mode.\n"
- title: 2.3.3.8.1 State -- "IDLE"
  contents:
  - "2.3.3.8.1 State -- \"IDLE\"\n   State:          IDLE\n   Event:          Internal\
    \ AddUpstream\n   New State:      RESPONSE_AWAITED\n   Actions\n      Initialize\
    \ the list of pointers in the Upstream LSP Control Block\n      to contain the\
    \ newly added upstream pointer.\n      Send a new LDP-REQUEST downstream and go\
    \ to the state\n      `RESPONSE_AWAITED'.\n   State:          IDLE\n   Event:\
    \          Internal DeleteUpstream\n   New State:      IDLE\n   Actions\n    \
    \  Ignore the event.  It is an internal implementation error.\n   State:     \
    \     IDLE\n   Event:          LDP Mapping\n   New State:      IDLE\n   Actions\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         IDLE\n   Event:          LDP Withdraw\n   New State:      IDLE\n   Actions\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         IDLE\n   Event:          LDP Downstream NAK\n   New State:      IDLE\n\
    \   Actions\n      Ignore the event.  It is an internal implementation error.\n\
    \   State:          IDLE\n   Event:          Downstream Lost\n   New State:  \
    \    IDLE\n   Actions\n      Ignore the event.  It is an internal implementation\
    \ error.\n"
- title: 2.3.3.8.2 State -- "RESPONSE_AWAITED"
  contents:
  - "2.3.3.8.2 State -- \"RESPONSE_AWAITED\"\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal AddUpstream\n   New State:      RESPONSE_AWAITED\n\
    \   Actions\n      Add the pointer to new Upstream LSP Control Block to the Upstream\n\
    \      LSP Control Blocks pointer list.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          Internal DeleteUpstream\n   New State:      Depend on the\
    \ action routine\n   Actions\n      Delete the Upstream LSP Control Block pointer\
    \ from the Upstream\n      LSP Control Block pointers list.\n      If the list\
    \ becomes empty, release the resources, send an LDP-\n      Abort downstream,\
    \ go to IDLE and then delete the control block.\n   State:          RESPONSE_AWAITED\n\
    \   Event:          LDP Mapping\n   New State:      ESTABLISHED\n   Actions\n\
    \      For each Upstream LSP Control Block in the Upstream LSP Control\n     \
    \ Block pointers list, pass the event `Internal Downstream Mapping'\n      to\
    \ its state machine.\n   State:          RESPONSE_AWAITED\n   Event:         \
    \ LDP Withdraw\n   New State:      RESPONSE_AWAITED\n   Actions\n      It is a\
    \ protocol error from the downstream LDP peer; send a LDP-\n      RELEASE downstream\n\
    \   State:          RESPONSE_AWAITED\n   Event:          LDP Downstream NAK\n\
    \   New State:      IDLE\n   Actions\n      For each Upstream LSP Control Block\
    \ in the Upstream LSP Control\n      Block pointers list, pass the event `Internal\
    \ Downstream NAK' to\n      its state machine.\n      Release the resources, and\
    \ delete the control block.\n   State:          RESPONSE_AWAITED\n   Event:  \
    \        Downstream Lost\n   New State:      IDLE\n   Actions\n      For each\
    \ Upstream LSP Control Block in the Upstream LSP Control\n      Block pointers\
    \ list, pass the event `Internal Downstream NAK' to\n      its state machine.\n\
    \      Release the resources, and delete the control block.\n"
- title: 2.3.3.8.3 State -- "ESTABLISHED"
  contents:
  - "2.3.3.8.3 State -- \"ESTABLISHED\"\n   State:          ESTABLISHED\n   Event:\
    \          Internal AddUpstream\n   New State:      ESTABLISHED\n   Actions\n\
    \      Add the pointer to new Upstream LSP Control Block to the Upstream\n   \
    \   LSP Control Block pointers list.\n   State:          ESTABLISHED\n   Event:\
    \          Internal DeleteUpstream\n   New State:      Depends on the action routine.\n\
    \   Actions\n      Delete the pointer of Upstream LSP Control Block from its Upstream\n\
    \      LSP Control Block pointers list.\n      If the list becomes empty, release\
    \ the resources, send an LDP-\n      RELEASE downstream, go to IDLE and then delete\
    \ the control block.\n      Otherwise, remain in the ESTABLISHED state.\n   State:\
    \          ESTABLISHED\n   Event:          LDP Mapping\n   New State:      ESTABLISHED\n\
    \   Actions\n      For each Upstream LSP Control Block in the Upstream LSP Control\n\
    \      Block pointers list, pass the event `Internal Downstream mapping'\n   \
    \   to its state machine.\n   State:          ESTABLISHED\n   Event:         \
    \ LDP Withdraw\n   New State:      IDLE\n   Actions\n      For each Upstream LSP\
    \ Control Block in the Upstream LSP Control\n      Block pointers list, pass the\
    \ event `Internal Downstream withdraw'\n      to its state machine.\n      Release\
    \ the resources, and delete the control block and send LDP-\n      RELEASE downstream.\n\
    \   State:          ESTABLISHED\n   Event:          LDP Downstream NAK\n   New\
    \ State:      ESTABLISHED\n   Actions\n      It is a protocol error from the downstream\
    \ LDP peer.\n"
- title: 2.3.3.9 State of the Next_Hop_Trigger_Control_Block's State Machine for
  contents:
  - "2.3.3.9 State of the Next_Hop_Trigger_Control_Block's State Machine for\n   \
    \     Downstream-on-demand Mode\n   -- IDLE\n   This is the initial LSP state.\n\
    \   -- NEW_NH_RETRY\n   This is the state where an LSR waits for a retry timer\
    \ to expire and\n   then tries to establish an LSP through a new next hop.\n \
    \  -- NEW_NH_RESPONSE_AWAITED\n   This state means that the LSR has sent a new\
    \ LDP-REQUEST towards a\n   downstream LSR.  The LSR is waiting for the LDP-MAPPING\
    \ from the\n   downstream LSR.\n"
- title: 2.3.3.10 Events of the Next_Hop_Trigger_Control_Block's State Machine
  contents:
  - "2.3.3.10 Events of the Next_Hop_Trigger_Control_Block's State Machine\n     \
    \    for Downstream-on-demand Mode\n   -- Internal New NH\n   Trigger to setup\
    \ an LSP through a better next hop.\n   -- Internal Downstream Mapping\n   This\
    \ event is sent by one Downstream LSP Control Block's state\n   machine.  This\
    \ Downstream LSP Control Block is the merged Downstream\n   LSP Control Block\
    \ of this Upstream LSP Control Block.  The event is\n   the result of receiving\
    \ an LDP-MAPPING by the Downstream LSP Control\n   Block's state machine.\n  \
    \ -- Internal Downstream NAK\n   This event is sent by one Downstream LSP Control\
    \ Block's state\n   machine.  This Downstream LSP Control Block is the merged\
    \ Downstream\n   LSP Control Block of this Upstream LSP Control Block.  The event\
    \ is\n   the result of receiving an LDP-NAK by the Downstream LSP Control\n  \
    \ Block's state machine, or it detects an error.\n   -- Internal Destroy This\
    \ event is used to stop the procedure of\n   switching over to the better next\
    \ hop.\n"
- title: 2.3.3.11 State Transitions of the Next_Hop_Trigger_Control_Block's State
  contents:
  - "2.3.3.11 State Transitions of the Next_Hop_Trigger_Control_Block's State\n  \
    \       Machine for Downstream-on-demand Mode\n                     +---------------------+\n\
    \                     |                     |\n                     |     IDLE\
    \            |<------------+\n                     |                     |   \
    \          |\n                     +---------------------+             |\n   \
    \                           |                          |\n                   \
    \           |                          |\n                              | (Internal\
    \ New NH)        |\n                              |                          |\n\
    \                              v                          |\n                \
    \     +---------------------+             |\n                     |          \
    \           |             |\n                     |   NEW_NH_RETRY      |----------->-+\n\
    \                     |                     | (Internal   |\n                \
    \     +---------------------+  Destroy)   |\n                              | \
    \                         |\n                              |                 \
    \         |\n                              | (Internal retry timeout) |\n    \
    \                          |                          |\n                    \
    \          v                          |\n                     +---------------------+\
    \             |\n                     |                     | (Internal   |\n\
    \                     | NEW_NH_RESPONSE     |  Destroy)   |\n                \
    \     | _AWAITED            |----------->-+\n                     |          \
    \           |             |\n                     +---------------------+    \
    \         |\n                              |                          |\n    \
    \                          | (Internal Downstream     |\n                    \
    \          |   Mapping                |\n                              | (Internal\
    \ Downstream     |\n                              |    NAK)                  |\n\
    \                              +------------------------>-+\n"
- title: 2.3.3.12 State Machine
  contents:
  - '2.3.3.12 State Machine

    '
- title: 2.3.3.12.1 State -- "IDLE"
  contents:
  - "2.3.3.12.1 State -- \"IDLE\"\n   State:          IDLE\n   Event:          Internal\
    \ New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n      Start the LSP retry\
    \ timer and go to the `NEW_NH_RETRY' state.\n   State:          IDLE\n   Event:\
    \          Internal retry timeout\n   New State:      IDLE\n   Actions:\n    \
    \  Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal Downstream Mapping\n   New State:      IDLE\n   Actions:\n\
    \      Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal Downstream NAK\n   New State:      IDLE\n   Actions:\n\
    \      Ignore.  It is an internal implementation error.\n   State:          IDLE\n\
    \   Event:          Internal destroy\n   New State:      IDLE\n   Actions:\n \
    \     Ignore.  It is an internal implementation error.\n"
- title: 2.3.3.12.2 State -- "NEW_NH_RETRY"
  contents:
  - "2.3.3.12.2 State -- \"NEW_NH_RETRY\"\n   State:          NEW_NH_RETRY\n   Event:\
    \          Internal New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n   \
    \   Restart the LSP retry timer.\n   State:          NEW_NH_RETRY\n   Event: \
    \         Internal retry timeout\n   New State:      Depends on the action routine.\n\
    \   Actions:\n      If the new next hop is the same one as the old next hop, go\
    \ to\n      IDLE and delete the control block.\n      Otherwise, go to NEW_NH_RESPONSE_AWAITED,\
    \ find a downstream LSP\n      control block that goes through the same next hop\
    \ for the same\n      FEC, if there are none, create one, and pass 'Internal\n\
    \      AddUpstream' event to its state machine.\n   State:          NEW_NH_RETRY\n\
    \   Event:          Internal Downstream Mapping\n   New State:      NEW_NH_RETRY\n\
    \   Actions:\n      Ignore.  It is an internal implementation error.\n   State:\
    \          NEW_NH_RETRY\n   Event:          Internal Downstream NAK\n   New State:\
    \      NEW_NH_RETRY\n   Actions:\n      Ignore.  It is an internal implementation\
    \ error.\n   State:          NEW_NH_RETRY\n   Event:          Internal destroy\n\
    \   New State:      IDLE\n   Actions:\n      Stop the timer and delete the control\
    \ block.\n"
- title: 2.3.3.12.3 State -- "NEW_NH_RESPONSE_AWAITED"
  contents:
  - "2.3.3.12.3 State -- \"NEW_NH_RESPONSE_AWAITED\"\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal New NH\n   New State:      NEW_NH_RETRY\n   Actions:\n\
    \      Restart the LSP retry timer and send event `Internal destroy' to\n    \
    \  the control block of the LSP for the new next hop.\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal retry timeout\n   New State:      NEW_NH_RESPONSE_AWAITED\n\
    \   Actions:\n      Ignore.  It is an internal implementation error.\n   State:\
    \          NEW_NH_RESPONSE_AWAITED\n   Event:          Internal Downstream Mapping\n\
    \   New State:      IDLE\n   Actions:\n      Send event `Internal Re-cross-connect'\
    \ event to the upstream LSP\n      control block of the new next hop.\n      Send\
    \ event `DeleteUpstream' event to the downstream LSP control\n      block of the\
    \ the new next hop, since the upstream has spliced into\n      the new next hop.\n\
    \      Delete the control block.\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal Downstream NAK\n   New State:      IDLE\n   Actions:\n\
    \      Delete the control block.\n   State:          NEW_NH_RESPONSE_AWAITED\n\
    \   Event:          Internal destroy\n   New State:      IDLE\n   Actions:\n \
    \     Send event `Internal DeleteUpstream' the control block for the new\n   \
    \   LSP through the new next hop.\n"
- title: 2.3.4 LDP Related Message Processing
  contents:
  - "2.3.4 LDP Related Message Processing\n   -  If an LSR receives an LDP-REQUEST:\n\
    \      a) If this is a duplicate request, discard the message.  A\n         duplicate\
    \ request means that there is a LSP Control Block that\n         has the same\
    \ FEC, Upstream Label Request ID and Upstream LDP\n         Session Identifier.\n\
    \      b) Otherwise, create a new Upstream LSP Control Block.  Then pass\n   \
    \      the event `LDP Request' to this Upstream LSP Control Block's\n        \
    \ state machine.\n   -  If an LSR receives an LDP-MAPPING:\n      Locate a Downstream\
    \ LSP Control Block that has the same FEC, the\n      same Downstream LDP Session\
    \ Identifier and the same Downstream\n      Label.  If a Downstream LSP Control\
    \ Block is found, pass the event\n      `LDP Mapping' to its state table.  This\
    \ could mean that the\n      attributes of label binding have changed.\n     \
    \ Otherwise, use the Downstream LDP request ID (the 'Label Request\n      Message\
    \ ID' field in the LDP-MAPPING) and Downstream LDP Session\n      Identifier to\
    \ locate the Downstream LSP Control Block and pass the\n      event `LDP Mapping'\
    \ to its state machine.  If no Downstream LSP\n      Control Block is found, ignore\
    \ the message.\n   -  If an LSR receives an LDP-RELEASE:\n      Locate an Upstream\
    \ LSP Control Block that has the same FEC, the\n      same Upstream Label, the\
    \ same Upstream LDP Session Identifier.  If\n      no Upstream LSP Control Block\
    \ is found, ignore the message.  If an\n      Upstream LSP Control Block is found,\
    \ send the event `LDP Release'\n      to its state machine.\n   -  If an LSR receives\
    \ an LDP-WITHDRAW:\n      Find a Downstream LSP Control Block that has the same\
    \ FEC, the\n      same Downstream LDP Session Identifier and the same Downstream\n\
    \      Label.  Pass the event `LDP Withdraw' to its state machines.\n   -  If\
    \ an Upstream LDP peer is lost:\n      Pass the event `Upstream Lost' to the state\
    \ machines of all the\n      Upstream LSP Control Blocks whose upstream LDP peer\
    \ is that LSR.\n   -  If a Downstream LDP peer is lost:\n      Pass the event\
    \ `Downstream Lost' to the state machines of all the\n      Downstream LSP Control\
    \ Blocks whose downstream LDP peer is that\n      LSR.\n   -  If a next hop of\
    \ an FEC is changed:\n      For all the Upstream LSP Control Blocks that are affected\
    \ by this\n      change, pass the event `Internal New NH' to their state machines.\n\
    \   -  If an LSR receives an LDP-ABORT from an upstream LSR:\n      Use the Upstream\
    \ LDP Request ID and Upstream LDP Session\n      Identifier to locate the Upstream\
    \ LSP Control Block and pass the\n      event `LDP Abort' to its state machine.\n\
    \   -  If an LSR receives an LDP-NAK from a downstream LSR:\n      Use the Downstream\
    \ LDP Request ID and Downstream Session\n      Identifier to locate a Downstream_LSP_control_block\
    \ and pass the\n      event `LDP Downstream NAK' to its state machine.\n"
- title: 3. State Machine for Downstream Unsolicited
  contents:
  - "3. State Machine for Downstream Unsolicited\n   The following sections describe\
    \ the state machines for the ATM-LSR\n   that uses downstream unsolicited mode.\n\
    \   While both independent LSP control and ordered LSP control modes are\n   possible,\
    \ only the ordered mode is taken into account, because the\n   independent LSP\
    \ control mode uses the liberal label retention mode\n   and so is considered\
    \ burning too many ATM resources.\n   In downstream unsolicited mode, multiple\
    \ path is not supported in\n   this version and will be For Further Study (FFS).\
    \  We suspect with\n   multiple next hops and Downstream mode, it is easy to get\
    \ into a loop\n   condition.\n"
- title: 3.1 Control Block
  contents:
  - "3.1 Control Block\n   There are 2 types of control blocks involved: Upstream\
    \ LSP Control\n   Block, Downstream LSP Control Block.\n   There is a list of\
    \ Upstream LSP Control Blocks for each FEC in the\n   routing table, with each\
    \ one corresponding to a LDP peer.  A Upstream\n   LSP Control Block is created\
    \ for each FEC when there is a label ready\n   to be distributed to that upstream.\
    \  It is deleted when the FEC is\n   deleted from the FEC table, or the LDP peer\
    \ disappears, or the\n   downstream label is withdrawn.\n   There is one Downstream\
    \ LSP Control Blocks for each FEC in the\n   routing table.  It is created when\
    \ the FEC is inserted into the\n   forwarding table and deleted when the FEC is\
    \ removed from the\n   forwarding table.\n   An Upstream LSP Control Block may\
    \ contain the following information:\n      -  Upstream LDP Session Identifier\n\
    \      -  State\n      -  Upstream Label (assigned by this LSR)\n      -  FEC\n\
    \   Upstream Label and Upstream LDP Session Identifier, or FEC and\n   Upstream\
    \ LDP Session Identifier can be used to locate a unique\n   Upstream LSP Control\
    \ Block.\n   A Downstream LSP Control Block may contain the following information:\n\
    \      -  FEC\n      -  State\n      -  Downstream LDP Session Identifier\n  \
    \    -  Downstream Label (assigned by the downstream LSR)\n      -  Downstream\
    \ Label Request ID (assigned by the LSR itself)\n   Downstream Label and Downstream\
    \ LDP Session Identifier, or FEC and\n   Downstream LDP Session Identifier can\
    \ be used to locate a unique\n   Downstream LSP Control Block.\n"
- title: 3.2 States of the Upstream LSP Control Block's State Machine for
  contents:
  - "3.2 States of the Upstream LSP Control Block's State Machine for\n    Downstream\
    \ Mode\n   -- IDLE\n   This is the initial LSP state.\n   -- ESTABLISHED\n   This\
    \ state means that the LSR has received the LDP-MAPPING from the\n   downstream\
    \ LSR and the LSP is up and operational.\n   -- RELEASE_AWAITED\n   This state\
    \ means that the LSR is waiting for the LDP-RELEASE in\n   respond to the LDP-WITHDRAW\
    \ sent by this LSR.\n   -- RESOURCES_AWAITED\n   This state means that the LSR\
    \ is waiting for the label resources.\n"
- title: 3.3 Events of the Upstream LSP Control Block's State Machine for
  contents:
  - "3.3 Events of the Upstream LSP Control Block's State Machine for\n    Downstream\
    \ Mode\n   -- Internal Downstream Mapping\n   This event is sent by one Downstream\
    \ LSP Control Block's state\n   machine.  The event is the result of receiving\
    \ an LDP-MAPPING by the\n   Downstream LSP Control Block's state machine.  Or\
    \ when the LDP peer\n   is discovered and there is a downstream Label available\
    \ for this FEC.\n   -- LDP Release\n   The LSR receives an LDP-RELEASE from an\
    \ upstream LSR.\n   -- Internal Withdraw\n   This event is sent by Downstream\
    \ LSP Control Block's state machine.\n   The event is the result of receiving\
    \ an LDP-WITHDRAW by the\n   Downstream LSP Control Block's state machine.\n \
    \  -- Resource Available\n   This event means the local resource (such as label)\
    \ becomes\n   available.\n   -- Delete FEC\n   This event means that the FEC is\
    \ removed from the forwarding table.\n   -- Upstream Lost\n   This event means\
    \ that the upstream LDP peer is lost.\n"
- title: 3.4 State Transitions of Upstream LSP Control Block's State Machine for
  contents:
  - "3.4 State Transitions of Upstream LSP Control Block's State Machine for\n   \
    \ Downstream Mode\n                            |\n                           \
    \ |(created when\n                            |a label is to be distributed\n\
    \                            | to the LDP peer)\n                            v\n\
    \                  +-------------------+\n                  |                \
    \   |\n                  |  IDLE             |<--------------+\n             \
    \     |                   |               |\n                  +-------------------+\
    \               |\n                           |                          |(LDP\
    \ Release)\n                           |                          |\n        \
    \                   |                          |\n                           |\
    \                          |\n                           |(Internal Downstream\
    \      |\n       +-------------------|  Mapping)                |\n       |  \
    \                 |                          |\n       |(no label resource)v \
    \                         |\n       |          +-------------------+         \
    \      |\n       |          |                   |               |\n       |  \
    \  +-----|  ESTABLISHED      |---------------+\n       |    |     |          \
    \         |               ^\n       |    |     +-------------------+         \
    \      |\n       |    |(delete FEC)   ^                         |\n       |  \
    \  |(Internal      |(Resource Available)     | (LDP Release)\n       |    |  Withdraw)\
    \    |                         | (Internal\n       |    |               |    \
    \                     |  Downstream\n       |    |               |           \
    \              |    Withdraw)\n       |    |     +-------------------+       \
    \        |\n       +--------->|                   |               |\n        \
    \    |     |RESOURCES_AWAITED  |---------------+\n            |     |        \
    \           |               |\n            |     +-------------------+       \
    \        |\n            |                                         |\n        \
    \    | (Internal Downstream Withdraw)          |(LDP Release)\n            | \
    \    +-------------------+               |\n            |     |              \
    \     |               |\n            +---->|  RELEASE_AWAITED  |---------------+\n\
    \                  |                   |\n                  +-------------------+\n"
- title: 3.5 Upstream LSP Control Block's State Machine for Downstream Mode
  contents:
  - '3.5 Upstream LSP Control Block''s State Machine for Downstream Mode

    '
- title: '3.5.1 : State -- "IDLE"'
  contents:
  - "3.5.1 : State -- \"IDLE\"\n   State:          IDLE\n   Event:          Internal\
    \ Downstream mapping\n   New State:      Depends on the action routine.\n   Actions\n\
    \      Choose an upstream label, connect the upstream label with the\n      downstream\
    \ label, propagate the LDP-MAPPING upstream and go to\n      state `ESTABLISHED'\n\
    \      If there is no resource for the upstream label, go to state\n      `RESOURCE_AWAITED'.\n\
    \   State:          IDLE\n   Event:          LDP Release\n   New State:      IDLE\n\
    \   Actions\n      Ignore the event.  It is an internal implementation error.\n\
    \   State:          IDLE\n   Event:          Internal Downstream Withdraw\n  \
    \ New State:      IDLE\n   Actions\n      Ignore the event.  It is an internal\
    \ implementation error.\n   State:          IDLE\n   Event:          Resource\
    \ Available\n   New State:      IDLE\n   Actions\n      Ignore the event.  It\
    \ is an internal implementation error.\n   State:          IDLE\n   Event:   \
    \       Delete FEC\n   New State:      IDLE\n   Actions\n      Delete the control\
    \ block.\n   State:          IDLE\n   Event:          Upstream Lost\n   New State:\
    \      IDLE\n   Actions\n      Delete the control block.\n"
- title: '3.5.2 : State -- "ESTABLISHED"'
  contents:
  - "3.5.2 : State -- \"ESTABLISHED\"\n   State:          ESTABLISHED\n   Event: \
    \         Internal Downstream Mapping\n   New State:      ESTABLISHED\n   Actions\n\
    \      Process the new attributes of the new mapping message.\n      Propagate\
    \ the LDP-MAPPING upstream.\n   State:          ESTABLISHED\n   Event:       \
    \   LDP Release\n   New State:      IDLE\n   Actions\n      Disconnect upstream\
    \ label from downstream label.\n      Release the upstream label resource\n  \
    \    Delete the control block.\n   State:          ESTABLISHED\n   Event:    \
    \      Internal Downstream Withdraw\n   New State:      RELEASE_AWAITED\n   Actions\n\
    \      Disconnect upstream label from downstream label.\n      Propagate the LDP-WITHDRAW\
    \ upstream.\n   State:          ESTABLISHED\n   Event:          Resource Available\n\
    \   New State:      ESTABLISHED\n   Actions\n      Ignore the event.  It is an\
    \ internal implementation error.\n   State:          ESTABLISHED\n   Event:  \
    \        Delete FEC\n   New State:      RELEASE_AWAITED\n   Actions\n      Send\
    \ a LDP-WITHDRAW upstream.\n   State:          ESTABLISHED\n   Event:        \
    \  Upstream Lost\n   New State:      IDLE\n   Actions\n      Release the upstream\
    \ label and delete the control block.\n"
- title: '3.5.3 : State -- "RELEASE_AWAITED"'
  contents:
  - "3.5.3 : State -- \"RELEASE_AWAITED\"\n   State:          RELEASE_AWAITED\n  \
    \ Event:          Internal Downstream Mapping\n   New State:      RELEASE_AWAITED\n\
    \   Actions\n      Ignore the message.\n   State:          RELEASE_AWAITED\n \
    \  Event:          LDP Release\n   New State:      IDLE\n   Actions\n      Release\
    \ the upstream label and delete the control block.\n   State:          RELEASE_AWAITED\n\
    \   Event:          Internal Downstream Withdraw\n   New State:      RELEASE_AWAITED\n\
    \   Actions\n      Ignore the event.\n   State:          RELEASE_AWAITED\n   Event:\
    \          Resource Available\n   New State:      RELEASE_AWAITED\n   Actions\n\
    \      Ignore the event.  It is an internal implementation error.\n   State: \
    \         RELEASE_AWAITED\n   Event:          Delete FEC\n   New State:      RELEASE_AWAITED\n\
    \   Actions\n      Do nothing.\n   State:          RELEASE_AWAITED\n   Event:\
    \          Upstream Lost\n   New State:      IDLE\n   Actions\n      Release the\
    \ upstream label and delete the control block.\n"
- title: '3.5.4 : State -- "RESOURCE_AWAITED"'
  contents:
  - "3.5.4 : State -- \"RESOURCE_AWAITED\"\n   State:          RESOURCE_AWAITED\n\
    \   Event:          Internal Downstream Mapping\n   New State:      RESOURCE_AWAITED\n\
    \   Actions\n      Ignore the message.\n   State:          RESOURCE_AWAITED\n\
    \   Event:          LDP Release\n   New State:      RESOURCE_AWAITED\n   Actions\n\
    \      Ignore the message.  It is an internal implementation error.\n   State:\
    \          RESOURCE_AWAITED\n   Event:          Internal Downstream Withdraw\n\
    \   New State:      IDLE\n   Actions\n      Delete the control block.\n   State:\
    \          RESOURCE_AWAITED\n   Event:          Resource Available\n   New State:\
    \      ESTABLISHED\n   Actions\n      Allocate an upstream label, connect the\
    \ upstream label with the\n      downstream label, and send LDP-MAPPING upstream.\n\
    \   State:          RESOURCE_AWAITED\n   Event:          Delete FEC\n   New State:\
    \      IDLE\n   Actions\n      Delete the control block.\n   State:          RESOURCE_AWAITED\n\
    \   Event:          Upstream Lost\n   New State:      IDLE\n   Actions\n     \
    \ Delete the control block.\n"
- title: 3.6 State of the Downstream LSP Control Block's State Machine for
  contents:
  - "3.6 State of the Downstream LSP Control Block's State Machine for\n    Downstream\
    \ Mode\n   -- IDLE\n   This is the initial LSP state.\n   -- ESTABLISHED\n   This\
    \ state means that the LSR has received the LDP-MAPPING from the\n   downstream\
    \ LSR.\n"
- title: 3.7 Events of the Downstream LSP Control Block's State Machine for
  contents:
  - "3.7 Events of the Downstream LSP Control Block's State Machine for\n    Downstream\
    \ Mode\n   -- LDP Mapping\n   The LSR receives an LDP-MAPPING from a downstream\
    \ LSR.\n   -- LDP Withdraw\n   The LSR receives an LDP-WITHDRAW from a downstream\
    \ LSR.\n   -- Delete FEC\n   The FEC is deleted from the forwarding table.\n \
    \  -- Next Hop Change\n   The next hop for this FEC is change to different LSR.\n\
    \   -- Downstream Lost\n   The downstream peer is gone.\n"
- title: 3.8 State Transitions of Downstream LSP Control Block's State Machine
  contents:
  - "3.8 State Transitions of Downstream LSP Control Block's State Machine\n    for\
    \ Downstream Mode\n                  |\n                  |(FEC is being added\
    \ into the forwarding table)\n                  v\n         +-------------------+\n\
    \         |                   |\n         |  IDLE             |<--------------+\n\
    \         |                   |               |\n         +-------------------+\
    \               |\n                  |                          |\n          \
    \        |                          |(LDP Withdraw)\n                  |     \
    \                     |(Internal New NH)\n                  |                \
    \          |(Downstream Lost)\n                  |  (LDP Mapping)           |\n\
    \                  |                          |\n                  v         \
    \                 |\n         +-------------------+               |\n        \
    \ |                   |               |\n         |  ESTABLISHED      |---------------+\n\
    \         |                   |\n         +-------------------+\n            \
    \      |\n                  |(FEC is deleted from the forwarding table)\n    \
    \              v\n"
- title: 3.9 Downstream LSP Control Block's State Machine for Downstream Mode
  contents:
  - '3.9 Downstream LSP Control Block''s State Machine for Downstream Mode

    '
- title: '3.9.1 : State -- "IDLE"'
  contents:
  - "3.9.1 : State -- \"IDLE\"\n   State:          IDLE\n   Event:          LDP mapping\n\
    \   New State:      ESTABLISHED\n   Actions\n      For all the LDP peers except\
    \ the downstream LSR that assigned the\n      label, create an Upstream LSP Control\
    \ Block, and pass the event\n      `Internal Downstream Mapping' to each of the\
    \ Upstream LSP Control\n      Block's state machines.\n   State:          IDLE\n\
    \   Event:          LDP withdraw\n   New State:      IDLE\n   Actions\n      \
    \   Ignore the event.  It is an internal implementation error.\n   State:    \
    \      IDLE\n   Event:          Delete FEC\n   New State:      IDLE\n   Actions\n\
    \      Delete the control block.\n   State:          IDLE\n   Event:         \
    \ Next Hop Change\n   New State:      IDLE\n   Actions\n      Ignore the event.\n\
    \   State:          IDLE\n   Event:          Downstream Lost\n   New State:  \
    \    IDLE\n   Actions\n      Ignore the event.\n"
- title: '3.9.2 : State -- "ESTABLISHED"'
  contents:
  - "3.9.2 : State -- \"ESTABLISHED\"\n   State:          ESTABLISHED\n   Event: \
    \         LDP mapping\n   New State:      ESTABLISHED\n   Actions\n      For each\
    \ Upstream_LSP_control_block of this FEC, pass event\n      `Internal downstream\
    \ mapping' to its state machine.\n   State:          ESTABLISHED\n   Event:  \
    \        LDP withdraw\n   New State:      IDLE\n   Actions\n      For each Upstream_LSP_control_block\
    \ for this FEC, pass event\n      `Internal downstream Withdraw' to its state\
    \ machine.\n      Send a LDP Withdraw downstream.\n   State:          ESTABLISHED\n\
    \   Event:          Delete FEC\n   New State:      IDLE\n   Actions\n      Send\
    \ LDP-RELEASE downstream and delete the control block.\n   State:          ESTABLISHED\n\
    \   Event:          Next Hop Change\n   New State:      IDLE\n   Actions\n   \
    \   For each Upstream_LSP_control_block for this FEC, pass event\n      `Internal\
    \ downstream Withdraw' to its state machine.\n      Send LDP-REQUEST to the new\
    \ next hop.\n   State:          ESTABLISHED\n   Event:          Downstream Lost\n\
    \   New State:      IDLE\n   Actions\n      Send LDP-WITHDRAW to all Upstream_Control_Block's\
    \ state machine of\n      this FEC.\n"
- title: 3.10 LDP Related Message Processing for downstream mode.
  contents:
  - "3.10 LDP Related Message Processing for downstream mode.\n   -  If an LSR receives\
    \ an LDP-REQUEST:\n      If there is a next hop for this FEC and there is a\n\
    \      Downstream_Control_Block for this FEC whose state is\n      `ESTABLISHED',\
    \ create a new Upstream_Control_Block and pass\n      `internal Mapping' event\
    \ to its state machine.\n   -  If an LSR receives an LDP-MAPPING:\n      Locate\
    \ a Downstream LSP Control Block that has the same FEC, the\n      same Downstream\
    \ LDP Session Identifier and the same Downstream\n      Label.  If a Downstream\
    \ LSP Control Block is found, pass the event\n      `LDP Mapping' to its state\
    \ table.  This could mean that the\n      attributes of label binding have changed.\n\
    \      Otherwise, if there is no matching Downstream LSP Control Block\n     \
    \ found, find a Downstream LSP Control Block of this FEC and its\n      next hop\
    \ is the this downstream peer, pass the event `LDP Mapping'\n      to its state\
    \ machine.\n   -  If an LSR receives an LDP-RELEASE:\n      Locate an Upstream\
    \ LSP Control Block that has the same FEC, the\n      same Upstream Label, the\
    \ same Upstream LDP Session Identifier.  If\n      no Upstream LSP Control Block\
    \ is found, ignore the message.  If an\n      Upstream LSP Control Block is found,\
    \ send the event `LDP Release'\n      to its state machine.\n   -  If an LSR receives\
    \ an LDP-WITHDRAW:\n      Find a Downstream LSP Control Block that has the same\
    \ FEC, the\n      same Downstream LDP Session Identifier and the same Downstream\n\
    \      Label.  Pass the event `LDP Withdraw' to its state machines.\n   -  If\
    \ an Upstream LDP peer is lost:\n      Pass the event `Upstream Lost' to the state\
    \ machines of all the\n      Upstream LSP Control Blocks whose upstream LDP peer\
    \ is that LSR.\n   -  If a Downstream LDP peer is lost:\n      Pass the event\
    \ `Label Withdraw' to the state machines of all the\n      Downstream LSP Control\
    \ Blocks whose the downstream LDP peer is\n      that LSR.\n   -  If a next hop\
    \ of an FEC is changed:\n      Find all the Downstream LSP Control Blocks that\
    \ has the same FEC\n      and the same next hop and pass the event `Next Hop Change'\
    \ to\n      their state machine\n   -  If there is a FEC being added to the forwarding\
    \ table\n      Create a new Downstream LSP Control Block with state `IDLE'\n \
    \  -  If the FEC is deleted from the forwarding table\n      Send the `Delete\
    \ FEC' event to the its control block.\n   -  If an LSR receives an LDP-NAK from\
    \ an  upstream LSR:\n      Ignore the message.  An LDP-NAK should never appear\
    \ in the\n      downstream-mode LSR\n   -  If an LSR receives an LDP-NAK from\
    \ a downstream LSR:\n      Ignore the message.  It is a protocol error from the\
    \ downstream\n      LSR.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   This document is provided as an informational\
    \ extension of the LDP\n   specification [4].  State machines presented here are\
    \ intended to\n   clarify procedures defined in the LDP specification, but do\
    \ not\n   supplant or override definitions and procedures provided there.\n  \
    \ Implementations of a state machine may be vulnerable to spurious\n   events\
    \ generated by an external source.  In this document, events\n   fall in two categories:\
    \ internal events and external events caused by\n   receipt of an LDP message.\n\
    \   LDP messages may be protected using mechanisms described in the LDP\n   specification.\
    \  See \"Security Considerations\" in the LDP\n   specification [4].\n   Security\
    \ considerations relating to generation of spurious internal\n   events are not\
    \ addressed in this document.\n"
- title: 5. Acknowledgements
  contents:
  - "5. Acknowledgements\n   The authors would like to acknowledge the helpful comments\
    \ and\n   suggestions of the following people: Bob Thomas, Myunghee Son and\n\
    \   Adrian Farrel.\n"
- title: 6. References
  contents:
  - "6. References\n   [1] Davie, B., Lawrence, J., McCloghrie, K., Rosen, E., Swallow,\
    \ G.,\n       Rekhter, Y. and P. Doolan, \"MPLS Using LDP and ATM Switching\"\
    ,\n       RFC 3035, January 2001.\n   [2] Rosen, E., Viswanathan, A. and R. Callon,\
    \ \"Multiprotocol Label\n       Switching Architecture\", RFC 3031, January 2001.\n\
    \   [3] Cucchiara, J., Sjostrand, H. and J. Lucianai, \"Definition of\n      \
    \ Managed Objects for the Multiprotocol Label Switching, Label\n       Distribution\
    \ Protocol (LDP)\", Work in Progress.\n   [4] Andersson, L., Doolan, P., Feldman,\
    \ F., Fredette, A. and B.\n       Thomas, \"LDP Specification\", RFC 3036, January\
    \ 2001.\n   [5] Jamoussi, B., Ed., O., Andersson, L., Callon, R., Dantu, R., Wu,\n\
    \       L., Doolan, P., Worster, T., Feldman, N., Fredette, A., Girish,\n    \
    \   M., Gray, E., Heinanen, J., Kilty, T. and A. Malis, \"Constraint-\n      \
    \ Based LSP Set up Using LDP\", RFC 3212, January 2002.\n"
- title: 7. Authors' Address
  contents:
  - "7. Authors' Address\n   Christophe Boscher\n   Alcatel\n   Le Mail\n   44700\
    \ Orvault\n   France\n   Phone: (33) 251781828\n   EMail: christophe.boscher@alcatel.fr\n\
    \   Pierrick Cheval\n   Alcatel\n   5 rue Noel-Pons\n   92734 Nanterre Cedex\n\
    \   France\n   Phone: (33) 146524027\n   EMail: pierrick.cheval@space.alcatel.fr\n\
    \   Liwen Wu\n   Cisco Systems, Inc.\n   3550 Cisco Way\n   San Jose, CA 95134\n\
    \   U.S.A\n   Phone: 408-853-4065\n   EMail: liwwu@cisco.com\n   Eric Gray\n \
    \  Sandburst Corporation\n   600 Federal Drive\n   Andover, MA 01810\n   Phone:\
    \ (978) 689-1610\n   EMail: eric.gray@sandburst.com\n"
- title: 8. Full Copyright Statement
  contents:
  - "8. Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
