Abstract JavaScript Object Notation (JSON) is a lightweight, text based, language independent data interchange format.
It was derived from the ECMAScript Programming Language Standard.
JSON defines a small set of formatting rules for the portable representation of structured data.
This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience based interoperability guidance.
Introduction JavaScript Object Notation (JSON) is a text format for the serialization of structured data.
It is derived from the object literals of JavaScript, as defined in the ECMAScript Programming Language Standard, Third Edition [ECMA 262].
JSON can represent four primitive types (strings, numbers, booleans, and null) and two structured types (objects and arrays).
A string is a sequence of zero or more Unicode characters [UNICODE].
Note that this citation references the latest version of Unicode rather than a specific release.
It is not expected that future changes in the UNICODE specification will impact the syntax of JSON.
An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array.
An array is an ordered sequence of zero or more values.
The terms "object" and "array"
come from the conventions of JavaScript.
JSON's design goals were for it to be minimal, portable, textual, and a subset of JavaScript.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The grammatical rules in this document are to be interpreted as described in [RFC5234].
This document updates [RFC4627], which describes JSON and registers the media type "application/json".
A description of JSON in ECMAScript terms appears in Version 5.1 of the ECMAScript specification [ECMA 262], Section 15.12.
JSON is also described in [ECMA 404].
All of the specifications of JSON syntax agree on the syntactic elements of the language.
In the years since the publication of RFC 4627, JSON has found very wide use.
This experience has revealed certain patterns, which, while allowed by its specifications, have caused interoperability problems.
Also, a small number of errata have been reported (see RFC Errata IDs 607 [Err607] and 3607 [Err3607]).
This document's goal is to apply the errata, remove inconsistencies with other specifications of JSON, and highlight practices that can lead to interoperability problems.
A JSON text is a sequence of tokens.
The set of tokens includes six structural characters, strings, numbers, and three literal names.
A JSON text is a serialized value.
Note that certain previous specifications of JSON constrained a JSON text to be an object or an array.
Implementations that generate only objects or arrays where a JSON text is called for will be interoperable in the sense that all implementations will accept these as conforming JSON texts.
These are the six structural characters: begin array
; } right curly bracket name separator
A JSON value MUST be an object, array, number, or string, or one of the following three literal names: false null true
The literal names MUST be lowercase.
No other literal names are allowed.
An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members).
A name is a string.
A single colon comes after each name, separating the name from the value.
A single comma separates a value from a following name.
The names within an object SHOULD be unique.
An object whose names are all unique is interoperable in the sense that all software implementations receiving that object will agree on the name value mappings.
When the names within an object are not unique, the behavior of software that receives such an object is unpredictable.
Many implementations report the last name/value pair only.
Other implementations report an error or fail to parse the object, and some implementations report all of the name/value pairs, including duplicates.
JSON parsing libraries have been observed to differ as to whether or not they make the ordering of object members visible to calling software.
Implementations whose behavior does not depend on member ordering will be interoperable in the sense that they will not be affected by these differences.
An array structure is represented as square brackets surrounding zero or more values (or elements).
Elements are separated by commas.
array   begin array [ value  ( value separator value ) ]
There is no requirement that the values in an array be of the same type.
The representation of numbers is similar to that used in most programming languages.
A number is represented in base 10 using decimal digits.
It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part.
Leading zeros are not allowed.
A fraction part is a decimal point followed by one or more digits.
An exponent part begins with the letter E in upper or lower case, which may be followed by a plus or minus sign.
The E and optional sign are followed by one or more digits.
Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted.
( digit1 9  DIGIT )
; 0 This specification allows implementations to set limits on the range and precision of numbers accepted.
Since software that implements IEEE
754 2008 binary64 (double precision) numbers [IEEE754] is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision.
A JSON number such as 1E400 or 3.141592653589793238462643383279 may indicate potential interoperability problems, since it suggests that the software that created it expects receiving software to have greater capabilities for numeric magnitude and precision than is widely available.
Note that when such software is used, numbers that are integers and are in the range
[ (2  53) 1, (2  53) 1] are interoperable in the sense that implementations will agree exactly on their numeric values.
The representation of strings is similar to conventions used in the C family of programming languages.
A string begins and ends with quotation marks.
All Unicode characters may be placed within the quotation marks, except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U 0000 through U 001F).
Any character may be escaped.
If the character is in the Basic Multilingual Plane (U 0000 through U FFFF), then it may be represented as a six character sequence: a reverse solidus, followed by the lowercase letter u, followed by four hexadecimal digits that encode the character's code point.
The hexadecimal letters A though F can be upper or lower case.
So, for example, a string containing only a single reverse solidus character may be represented as "\u005C".
Alternatively, there are two character sequence escape representations of some popular characters.
To escape an extended character that is not in the Basic Multilingual Plane, the character is represented as a 12 character sequence, encoding the UTF 16 surrogate pair.
So, for example, a string containing only the G clef character (
U 1D11E) may be represented as "\uD834\uDD1E".
; " unescaped   %x20 21 / %x23 5B / %x5D 10FFFF 8.
String and Character Issues 8.1.
Character Encoding JSON text SHALL be encoded in UTF 8, UTF 16, or UTF 32.
The default encoding is UTF 8, and JSON texts that are encoded in UTF 8 are interoperable in the sense that they will be read successfully by the maximum number of implementations; there are many implementations that cannot successfully read texts in other encodings (such as UTF 16 and UTF 32).
Implementations MUST NOT add a byte order mark to the beginning of a JSON text.
In the interests of interoperability, implementations that parse JSON texts MAY ignore the presence of a byte order mark rather than treating it as an error.
When all the strings represented in a JSON text are composed entirely of Unicode characters [UNICODE] (however escaped), then that JSON text is interoperable in the sense that all software implementations that parse it will agree on the contents of names and of string values in objects and arrays.
However, the ABNF in this specification allows member names and string values to contain bit sequences that cannot encode Unicode characters; for example, "\uDEAD" (a single unpaired UTF 16 surrogate).
Instances of this have been observed, for example, when a library truncates a UTF 16 string without checking whether the truncation split a surrogate pair.
The behavior of software that receives JSON texts containing such values is unpredictable; for example, implementations might return different values for the length of a string value or even suffer fatal runtime exceptions.
String Comparison Software implementations are typically required to test names of object members for equality.
Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings.
For example, implementations that compare strings with escaped characters unconverted may incorrectly find that "a\\b" and "a\u005Cb" are not equal.
A JSON parser transforms a JSON text into another representation.
A JSON parser MUST accept all texts that conform to the JSON grammar.
A JSON parser MAY accept non JSON forms or extensions.
An implementation may set limits on the size of texts that it accepts.
An implementation may set limits on the maximum depth of nesting.
An implementation may set limits on the range and precision of numbers.
An implementation may set limits on the length and character contents of strings.
A JSON generator produces JSON text.
The resulting text MUST strictly conform to the JSON grammar.
The MIME media type for JSON text is application/json.
Type name:  application Subtype name:  json Required parameters:  n/
a Encoding considerations:  binary Security considerations:
Interoperability considerations:  Described in [RFC7159
] Published specification:  [RFC7159] Applications that use this media type:
JSON has been used to exchange data between applications written in all of these programming languages: ActionScript, C, C#, Clojure, ColdFusion, Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML, Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.
Macintosh file type code(s): TEXT Person & email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:  none Author:
No "charset" parameter is defined for this registration.
Adding one really has no effect on compliant recipients.
Generally, there are security issues with scripting languages.
JSON is a subset of JavaScript but excludes assignment and invocation.
Since JSON's syntax is borrowed from JavaScript, it is possible to use that language's "eval()" function to parse JSON texts.
This generally constitutes an unacceptable security risk, since the text could contain executable code along with data declarations.
The same consideration applies to the use of eval() like functions in any other programming language in which JSON texts conform to that language's syntax.
Its Image member is an object whose Thumbnail member is an object and whose IDs member is an array of numbers.
Here are three small JSON texts containing only values: "Hello world!"
Contributors RFC 4627 was written by Douglas Crockford.
This document was constructed by making a relatively small number of changes to that document; thus, the vast majority of the text here is his.
Appendix A.  Changes from RFC 4627
This section lists changes between this document and the text in RFC 4627.
Changed the title and abstract of the document.
Changed the reference to [UNICODE] to be not version specific.
Added a "Specifications of JSON" section.
Added an "Introduction to This Revision" section.
Changed the definition of "JSON text" so that it can be any JSON value, removing the constraint that it be an object or array.
Added language about duplicate object member names, member ordering, and interoperability.
Clarified the absence of a requirement that values in an array be of the same JSON type.
erratum #607 from RFC 4627 to correctly align the artwork for the definition of "object".
Changed "as sequences of digits" to "in the grammar below" in the "Numbers" section, and made base 10 ness explicit.
Added language about number interoperability as a function of IEEE754, and added an IEEE754 reference.
Added language about interoperability and Unicode characters and about string comparisons.
To do this, turned the old "Encoding" section into a "String and Character Issues" section, with three subsections: "Character Encoding", "Unicode Characters", and "String Comparison".
Changed guidance in the "Parsers" section to point out that implementations may set limits on the range "and precision" of numbers.
Updated and tidied the "IANA Considerations" section.
Made a real "Security Considerations" section and lifted the text out of the previous "IANA Considerations" section.
erratum #3607 from RFC 4627 by removing the security consideration that begins "A JSON text can be safely passed" and the JavaScript code that went with that consideration.
Added a note to the "Security Considerations" section pointing out the risks of using the "eval()" function in JavaScript or any other language in which JSON texts conform to that language's syntax.
Added a note to the "IANA Considerations" clarifying the absence of a "charset" parameter for the application/json media type.
Changed "100" to 100 and added a boolean field, both in the first example.
Added examples of JSON texts with simple values, neither objects nor arrays.
Added a "Contributors" section crediting Douglas Crockford.
Added a reference to RFC 4627.
Moved the ECMAScript reference from Normative to Informative and updated it to reference ECMAScript 5.1, and added a reference to ECMA 404.
