Abstract This document describes the RELATIONAL extension to the Sieve mail filtering language defined in RFC 3028.
This extension extends existing conditional tests in Sieve to allow relational operators.
In addition to testing their content, it also allows for testing of the number of entities in header and envelope fields.
This document obsoletes RFC 3431.
The RELATIONAL extension to the Sieve mail filtering language [Sieve] provides relational operators on the address, envelope, and header tests.
This extension also provides a way of counting the entities in a message header or address field.
With this extension, the Sieve script may now determine if a field is greater than or less than a value instead of just equivalent.
One use is for the x priority field: move messages with a priority greater than 3 to the "work on later" folder.
Mail could also be sorted by the from address.
Those userids that start with 'a' 'm' go to one folder, and the rest go to another folder.
The Sieve script can also determine the number of fields in the header, or the number of addresses in a recipient field, for example, whether there are more than 5 addresses in the to and cc fields.
The capability string associated with the extension defined in this document is "relational".
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, RFC 2119.
Conventions for notations are as in [Sieve] section 1.1, including the use of [Kwds] and the use of [ABNF].
This document does not define any comparators or exempt any comparators from the require clause.
Any comparator used must be treated as defined in [Sieve].
The "i;ascii numeric" comparator, as defined in [RFC4790], MUST be supported for any implementation of this extension.
The comparator "i;ascii numeric" MUST support at least 32 bit unsigned integers.
Larger integers MAY be supported.
the "i;ascii numeric" comparator does not support negative numbers.
This document defines two new match types.
They are the VALUE match type and the COUNT match type.
The syntax is: MATCH TYPE
/ COUNT / VALUE COUNT   "
The VALUE match type does a relational comparison between strings.
The VALUE match type may be used with any comparator that returns sort information.
A value from the message is considered the left side of the relation.
A value from the test expression, the key list for address, envelope, and header tests, is the right side of the relation.
If there are multiple values on either side or both sides, the test is considered true if any pair is true.
The COUNT match type first determines the number of the specified entities in the message and does a relational comparison of the number of entities, as defined below, to the values specified in the test expression.
The COUNT match type SHOULD only be used with numeric comparators.
The Address Test counts the number of addresses (the number of "mailbox" elements, as defined in [RFC2822]) in the specified fields.
Group names are ignored, but the contained mailboxes are counted.
The Envelope Test counts the number of addresses in the specified envelope parts.
The envelope "to" will always have only one entry, which is the address of the user for whom the Sieve script is running.
Using this test, there is no way a Sieve script can determine if the message was actually sent to someone else.
The envelope "from" will be 0 if the MAIL FROM is empty, or 1 if MAIL FROM is not empty.
The Header Test counts the total number of instances of the specified fields.
This does not count individual addresses in the "to", "cc", and other recipient fields.
In all cases, if more than one field name is specified, the counts for all specified fields are added together to obtain the number for comparison.
Thus, specifying ["to", "cc"] in an address COUNT test compares the total number of "to" and "cc" addresses; if separate counts are desired, they must be done in two comparisons, perhaps joined by "allof" or "anyof".
Interaction with Other Sieve Actions
This specification adds two match types.
The VALUE match type only works with comparators that return sort information.
The COUNT match type only makes sense with numeric comparators.
There is no interaction with any other Sieve operations, nor with any known extensions.
In particular, this specification has no effect on implicit KEEP, nor on any explicit message actions.
To check the number of received fields in the header, the following test may be used: header :count "ge" :comparator "
This would evaluate to false.
But header :count "ge" :comparator "
This test counts the number of fields, not the number of addresses.
Extended Example require ["relational", "comparator i;ascii numeric", "fileinto"]; if header :value "lt" :comparator "
3431 Apart from several minor editorial/wording changes, the following list describes the notable changes to this specification since RFC 3431.
Updated references, including changing the comparator reference from the Application Configuration Access Protocol (ACAP) to the "Internet Application Protocol Collation Registry" document [RFC4790].
Updated and corrected the examples.
Added definition comments to ABNF for "gt", "lt", etc.
Clarified what RFC 2822 elements are counted in the COUNT test.
Removed the requirement to strip white space from header fields before comparing; a more general version of this requirement has been added to the Sieve base spec.
The following template specifies the IANA registration of the relational Sieve extension specified in this document:
Registration of new Sieve extension Capability name: relational Description:
Extends existing conditional tests in Sieve language to allow relational operators RFC number:
The Sieve discussion list <ietf mta filters@imc.org> 10.
An implementation MUST ensure that the test for envelope "to" only reflects the delivery to the current user.
Using this test, it MUST not be possible for a user to determine if this message was delivered to someone else.
Additional security considerations are discussed in [Sieve].
