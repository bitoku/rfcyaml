- title: __initial_text__
  contents:
  - '                Next Steps for the IP QoS Architecture

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   While there has been significant progress in the definition of\n\
    \   Quality of Service (QoS) architectures for internet networks, there\n   are\
    \ a number of aspects of QoS that appear to need further\n   elaboration as they\
    \ relate to translating a set of tools into a\n   coherent platform for end-to-end\
    \ service delivery.  This document\n   highlights the outstanding architectural\
    \ issues relating to the\n   deployment and use of QoS mechanisms within internet\
    \ networks, noting\n   those areas where further standards work may assist with\
    \ the\n   deployment of QoS internets.\n   This document is the outcome of a collaborative\
    \ exercise on the part\n   of the Internet Architecture Board.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1. Introduction ...........................................\
    \   2\n    2. State and Stateless QoS ................................   4\n \
    \   3. Next Steps for QoS Architectures .......................   6\n       3.1\
    \ QoS-Enabled Applications ...........................   7\n       3.2 The Service\
    \ Environment ............................   9\n       3.3 QoS Discovery ......................................\
    \  10\n       3.4 QoS Routing and Resource Management ................  10\n \
    \      3.5 TCP and QoS ........................................  11\n       3.6\
    \ Per-Flow States and Per-Packet classifiers .........  13\n       3.7 The Service\
    \ Set ....................................  14\n       3.8 Measuring Service Delivery\
    \ .........................  14\n       3.9 QoS Accounting .....................................\
    \  15\n       3.10 QoS Deployment Diversity ..........................  16\n \
    \      3.11 QoS Inter-Domain signaling ........................  17\n       3.12\
    \ QoS Deployment Logistics ..........................  17\n    4. The objective\
    \ of the QoS architecture ..................  18\n    5. Towards an end-to-end\
    \ QoS architecture .................  19\n    6. Conclusions ............................................\
    \  21\n    7. Security Considerations ................................  21\n \
    \   8. References .............................................  22\n    9. Acknowledgments\
    \ ........................................  23\n   10. Author's Address .......................................\
    \  23\n   11. Full Copyright Statement ...............................  24\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The default service offering associated with the Internet\
    \ is\n   characterized as a best-effort variable service response.  Within\n \
    \  this service profile the network makes no attempt to actively\n   differentiate\
    \ its service response between the traffic streams\n   generated by concurrent\
    \ users of the network.  As the load generated\n   by the active traffic flows\
    \ within the network varies, the network's\n   best effort service response will\
    \ also vary.\n   The objective of various Internet Quality of Service (QoS) efforts\
    \ is\n   to augment this base service with a number of selectable service\n  \
    \ responses.  These service responses may be distinguished from the\n   best-effort\
    \ service by some form of superior service level, or they\n   may be distinguished\
    \ by providing a predictable service response\n   which is unaffected by external\
    \ conditions such as the number of\n   concurrent traffic flows, or their generated\
    \ traffic load.\n   Any network service response is an outcome of the resources\
    \ available\n   to service a load, and the level of the load itself.  To offer\
    \ such\n   distinguished services there is not only a requirement to provide a\n\
    \   differentiated service response within the network, there is also a\n   requirement\
    \ to control the service-qualified load admitted into the\n   network, so that\
    \ the resources allocated by the network to support a\n   particular service response\
    \ are capable of providing that response\n   for the imposed load.  This combination\
    \ of admission control agents\n   and service management elements can be summarized\
    \ as \"rules plus\n   behaviors\". To use the terminology of the Differentiated\
    \ Service\n   architecture [4], this admission control function is undertaken\
    \ by a\n   traffic conditioner (an entity which performs traffic conditioning\n\
    \   functions and which may contain meters, markers, droppers, and\n   shapers),\
    \ where the actions of the conditioner are governed by\n   explicit or implicit\
    \ admission control agents.\n   As a general observation of QoS architectures,\
    \ the service load\n   control aspect of QoS is perhaps the most troubling component\
    \ of the\n   architecture.  While there are a wide array of well understood\n\
    \   service response mechanisms that are available to IP networks,\n   matching\
    \ a set of such mechanisms within a controlled environment to\n   respond to a\
    \ set of service loads to achieve a completely consistent\n   service response\
    \ remains an area of weakness within existing IP QoS\n   architectures.  The control\
    \ elements span a number of generic\n   requirements, including end-to-end application\
    \ signaling, end-to-\n   network service signaling and resource management signaling\
    \ to allow\n   policy-based control of network resources.  This control may also\n\
    \   span a particular scope, and use 'edge to edge' signaling, intended\n   to\
    \ support particular service responses within a defined network\n   scope.\n \
    \  One way of implementing this control of imposed load to match the\n   level\
    \ of available resources is through an application-driven process\n   of service\
    \ level negotiation (also known as application signaled\n   QoS).  Here, the application\
    \ first signals its service requirements\n   to the network, and the network responds\
    \ to this request.  The\n   application will proceed if the network has indicated\
    \ that it is able\n   to carry the additional load at the requested service level.\
    \  If the\n   network indicates that it cannot accommodate the service requirements\n\
    \   the application may proceed in any case, on the basis that the\n   network\
    \ will service the application's data on a best effort basis.\n   This negotiation\
    \ between the application and the network can take the\n   form of explicit negotiation\
    \ and commitment, where there is a single\n   negotiation phase, followed by a\
    \ commitment to the service level on\n   the part of the network.  This application-signaled\
    \ approach can be\n   used within the Integrated Services architecture, where\
    \ the\n   application frames its service request within the resource\n   reservation\
    \ protocol (RSVP), and then passes this request into the\n   network.  The network\
    \ can either respond positively in terms of its\n   agreement to commit to this\
    \ service profile, or it can reject the\n   request.  If the network commits to\
    \ the request with a resource\n   reservation, the application can then pass traffic\
    \ into the network\n   with the expectation that as long as the traffic remains\
    \ within the\n   traffic load profile that was originally associated with the\
    \ request,\n   the network will meet the requested service levels.  There is no\n\
    \   requirement for the application to periodically reconfirm the service\n  \
    \ reservation itself, as the interaction between RSVP and the network\n   constantly\
    \ refreshes the reservation while it remains active.  The\n   reservation remains\
    \ in force until the application explicitly\n   requests termination of the reservation,\
    \ or the network signals to\n   the application that it is unable to continue\
    \ with a service\n   commitment to the reservation [3].  There are variations\
    \ to this\n   model, including an aggregation model where a proxy agent can fold\
    \ a\n   number of application-signaled reservations into a common aggregate\n\
    \   reservation along a common sub-path, and a matching deaggregator can\n   reestablish\
    \ the collection of individual resource reservations upon\n   leaving the aggregate\
    \ region [5].  The essential feature of this\n   Integrated Services model is\
    \ the \"all or nothing\" nature of the\n   model.  Either the network commits\
    \ to the reservation, in which case\n   the requestor does not have to subsequently\
    \ monitor the network's\n   level of response to the service, or the network indicates\
    \ that it\n   cannot meet the resource reservation.\n   An alternative approach\
    \ to load control is to decouple the network\n   load control function from the\
    \ application.  This is the basis of the\n   Differentiated Services architecture.\
    \  Here, a network implements a\n   load control function as part of the function\
    \ of admission of traffic\n   into the network, admitting no more traffic within\
    \ each service\n   category as there are assumed to be resources in the network\
    \ to\n   deliver the intended service response.  Necessarily there is some\n \
    \  element of imprecision in this function given that traffic may take\n   an\
    \ arbitrary path through the network.  In terms of the interaction\n   between\
    \ the network and the application, this takes the form of a\n   service request\
    \ without prior negotiation, where the application\n   requests a particular service\
    \ response by simply marking each packet\n   with a code to indicate the desired\
    \ service.  Architecturally, this\n   approach decouples the end systems and the\
    \ network, allowing a\n   network to implement an active admission function in\
    \ order to\n   moderate the workload that is placed upon the network's resources\n\
    \   without specific reference to individual resource requests from end\n   systems.\
    \  While this decoupling of control allows a network's\n   operator greater ability\
    \ to manage its resources and a greater\n   ability to ensure the integrity of\
    \ its services, there is a greater\n   potential level of imprecision in attempting\
    \ to match applications'\n   service requirements to the network's service capabilities.\n"
- title: 2. State and Stateless QoS
  contents:
  - "2. State and Stateless QoS\n   These two approaches to load control can be characterized\
    \ as state-\n   based and stateless approaches respectively.\n   The architecture\
    \ of the Integrated Services model equates the\n   cumulative sum of honored service\
    \ requests to the current reserved\n   resource levels of the network.  In order\
    \ for a resource reservation\n   to be honored by the network, the network must\
    \ maintain some form of\n   remembered state to describe the resources that have\
    \ been reserved,\n   and the network path over which the reserved service will\
    \ operate.\n   This is to ensure integrity of the reservation.  In addition, each\n\
    \   active network element within the network path must maintain a local\n   state\
    \ that allows incoming IP packets to be correctly classified into\n   a reservation\
    \ class.  This classification allows the packet to be\n   placed into a packet\
    \ flow context that is associated with an\n   appropriate service response consistent\
    \ with the original end-to-end\n   service reservation.  This local state also\
    \ extends to the function\n   of metering packets for conformance on a flow-by-flow\
    \ basis, and the\n   additional overheads associated with maintenance of the state\
    \ of each\n   of these meters.\n   In the second approach, that of a Differentiated\
    \ Services model, the\n   packet is marked with a code to trigger the appropriate\
    \ service\n   response from the network elements that handles the packet, so that\n\
    \   there is no strict requirement to install a per-reservation state on\n   these\
    \ network elements.  Also, the end application or the service\n   requestor is\
    \ not required to provide the network with advance notice\n   relating to the\
    \ destination of the traffic, nor any indication of the\n   intended traffic profile\
    \ or the associated service profile.  In the\n   absence of such information any\
    \ form of per-application or per-path\n   resource reservation is not feasible.\
    \  In this model there is no\n   maintained per-flow state within the network.\n\
    \   The state-based Integrated Services architectural model admits the\n   potential\
    \ to support greater level of accuracy, and a finer level of\n   granularity on\
    \ the part of the network to respond to service\n   requests.  Each individual\
    \ application's service request can be used\n   to generate a reservation state\
    \ within the network that is intended\n   to prevent the resources associated\
    \ with the reservation to be\n   reassigned or otherwise preempted to service\
    \ other reservations or to\n   service best effort traffic loads.  The state-based\
    \ model is intended\n   to be exclusionary, where other traffic is displaced in\
    \ order to meet\n   the reservation's service targets.\n   As noted in RFC2208\
    \ [2], there are several areas of concern about the\n   deployment of this form\
    \ of service architecture.  With regard to\n   concerns of per-flow service scalability,\
    \ the resource requirements\n   (computational processing and memory consumption)\
    \ for running per-\n   flow resource reservations on routers increase in direct\
    \ proportion\n   to the number of separate reservations that need to be accommodated.\n\
    \   By the same token, router forwarding performance may be impacted\n   adversely\
    \ by the packet-classification and scheduling mechanisms\n   intended to provide\
    \ differentiated services for these resource-\n   reserved flows.  This service\
    \ architecture also poses some challenges\n   to the queuing mechanisms, where\
    \ there is the requirement to allocate\n   absolute levels of egress bandwidth\
    \ to individual flows, while still\n   supporting an unmanaged low priority best\
    \ effort traffic class.\n   The stateless approach to service management is more\
    \ approximate in\n   the nature of its outcomes.  Here there is no explicit negotiation\n\
    \   between the application's signaling of the service request and the\n   network's\
    \ capability to deliver a particular service response.  If\n   the network is\
    \ incapable of meeting the service request, then the\n   request simply will not\
    \ be honored.  In such a situation there is no\n   requirement for the network\
    \ to inform the application that the\n   request cannot be honored, and it is\
    \ left to the application to\n   determine if the service has not been delivered.\
    \  The major attribute\n   of this approach is that it can possess excellent scaling\
    \ properties\n   from the perspective of the network.  If the network is capable\
    \ of\n   supporting a limited number of discrete service responses, and the\n\
    \   routers uses per-packet marking to trigger the service response, then\n  \
    \ the processor and memory requirements in each router do not increase\n   in\
    \ proportion to the level of traffic passed through the router.  Of\n   course\
    \ this approach does introduce some degree of compromise in that\n   the service\
    \ response is more approximate as seen by the end client,\n   and scaling the\
    \ number of clients and applications in such an\n   environment may not necessarily\
    \ result in a highly accurate service\n   response to every client's application.\n\
    \   It is not intended to describe these service architectures in further\n  \
    \ detail within this document.  The reader is referred to RFC1633 [3]\n   for\
    \ an overview of the Integrated Services Architecture (IntServ) and\n   RFC2475\
    \ [4] for an overview of the Differentiated Services\n   architecture (DiffServ).\n\
    \   These two approaches are the endpoints of what can be seen as a\n   continuum\
    \ of control models, where the fine-grained precision of the\n   per application\
    \ invocation reservation model can be aggregated into\n   larger, more general\
    \ and potentially more approximate aggregate\n   reservation states, and the end-to-end\
    \ element-by-element reservation\n   control can be progressively approximated\
    \ by treating a collection of\n   subnetworks or an entire transit network as\
    \ an aggregate service\n   element.  There are a number of work in progress efforts\
    \ which are\n   directed towards these aggregated control models, including\n\
    \   aggregation of RSVP [5], the RSVP DCLASS Object [6] to allow\n   Differentiated\
    \ Services Code Points (DSCPs) to be carried in RSVP\n   message objects, and\
    \ operation of Integrated Services over\n   Differentiated Services networks [7].\n"
- title: 3. Next Steps for QoS Architectures
  contents:
  - "3. Next Steps for QoS Architectures\n   Both the Integrated Services architecture\
    \ and the Differentiated\n   Services architecture have some critical elements\
    \ in terms of their\n   current definition which appear to be acting as deterrents\
    \ to\n   widespread deployment.  Some of these issues will probably be\n   addressed\
    \ within the efforts to introduce aggregated control and\n   response models into\
    \ these QoS architectures, while others may\n   require further refinement through\
    \ standards-related activities.\n"
- title: 3.1 QoS-Enabled Applications
  contents:
  - "3.1 QoS-Enabled Applications\n   One of the basic areas of uncertainty with QoS\
    \ architectures is\n   whether QoS is a per-application service, whether QoS is\
    \ a\n   transport-layer option, or both.  Per-application services have\n   obvious\
    \ implications of extending the QoS architecture into some form\n   of Application\
    \ Protocol Interface (API), so that applications could\n   negotiate a QoS response\
    \ from the network and alter their behavior\n   according to the outcome of the\
    \ response.  Examples of this approach\n   include GQOS [8], and RAPI [9].  As\
    \ a transport layer option, it\n   could be envisaged that any application could\
    \ have its traffic\n   carried by some form of QoS-enabled network services by\
    \ changing the\n   host configuration, or by changing the configuration at some\
    \ other\n   network control point, without making any explicit changes to the\n\
    \   application itself.  The strength of the transport layer approach is\n   that\
    \ there is no requirement to substantially alter application\n   behavior, as\
    \ the application is itself unaware of the\n   administratively assigned QoS.\
    \  The weakness of this approach is that\n   the application is unable to communicate\
    \ what may be useful\n   information to the network or to the policy systems that\
    \ are managing\n   the network's service responses.  In the absence of such information\n\
    \   the network may provide a service response that is far superior than\n   the\
    \ application's true requirements, or far inferior than what is\n   required for\
    \ the application to function correctly.  An additional\n   weakness of a transport\
    \ level approach refers to those class of\n   applications that can adapt their\
    \ traffic profile to meet the\n   available resources within the network.  As\
    \ a transport level\n   mechanism, such network availability information as may\
    \ be available\n   to the transport level is not passed back to the application.\n\
    \   In the case of the Integrated Services architecture, this transport\n   layer\
    \ approach does not appear to be an available option, as the\n   application does\
    \ require some alteration to function correctly in\n   this environment.  The\
    \ application must be able to provide to the\n   service reservation module a\
    \ profile of its anticipated traffic, or\n   in other words the application must\
    \ be able to predict its traffic\n   load.  In addition, the application must\
    \ be able to share the\n   reservation state with the network, so that if the\
    \ network state\n   fails, the application can be informed of the failure.  The\
    \ more\n   general observation is that a network can only formulate an accurate\n\
    \   response to an application's requirements if the application is\n   willing\
    \ to offer precise statement of its traffic profile, and is\n   willing to be\
    \ policed in order to have its traffic fit within this\n   profile.\n   In the\
    \ case of the Differentiated Services architecture there is no\n   explicit provision\
    \ for the application to communicate with the\n   network regarding service levels.\
    \  This does allow the use of a\n   transport level option within the end system\
    \ that does not require\n   explicit alteration of the application to mark its\
    \ generated traffic\n   with one of the available Differentiated Services service\
    \ profiles.\n   However, whether the application is aware of such service profiles\
    \ or\n   not, there is no level of service assurance to the application in\n \
    \  such a model.  If the Differentiated Services boundary traffic\n   conditioners\
    \ enter a load shedding state, the application is not\n   signaled of this condition,\
    \ and is not explicitly aware that the\n   requested service response is not being\
    \ provided by the network.  If\n   the network itself changes state and is unable\
    \ to meet the cumulative\n   traffic loads admitted by the ingress traffic conditioners,\
    \ neither\n   the ingress traffic conditioners, nor the client applications, are\n\
    \   informed of this failure to maintain the associated service quality.\n   While\
    \ there is no explicit need to alter application behavior in this\n   architecture,\
    \ as the basic DiffServ mechanism is one that is managed\n   within the network\
    \ itself, the consequence is that an application may\n   not be aware whether\
    \ a particular service state is being delivered to\n   the application.\n   There\
    \ is potential in using an explicit signaling model, such as used\n   by IntServ,\
    \ but carrying a signal which allows the network to manage\n   the application's\
    \ traffic within an aggregated service class [6].\n   Here the application does\
    \ not pass a complete picture of its intended\n   service profile to the network,\
    \ but instead is providing some level\n   of additional information to the network\
    \ to assist in managing its\n   resources, both in terms of the generic service\
    \ class that the\n   network can associate with the application's traffic, and\
    \ the\n   intended path of the traffic through the network.\n   An additional\
    \ factor for QoS enabled applications is that of receiver\n   capability negotiation.\
    \  There is no value in the sender establishing\n   a QoS-enabled path across\
    \ a network to the receiver if the receiver\n   is incapable of absorbing the\
    \ consequent data flow.  This implies\n   that QoS enabled applications also require\
    \ some form of end-to-end\n   capability negotiation, possibly through a generic\
    \ protocol to allow\n   the sender to match its QoS requirements to the minimum\
    \ of the flow\n   resources that can be provided by the network and the flow resources\n\
    \   that can be processed by the receiver.  In the case of the Integrated\n  \
    \ services architecture the application end-to-end interaction can be\n   integrated\
    \ into the RSVP negotiation.  In the case of the\n   Differentiated Services architecture\
    \ there is no clear path of\n   integrating such receiver control into the signaling\
    \ model of the\n   architecture as it stands.\n   If high quality services are\
    \ to be provided, where `high quality' is\n   implied as being `high precision\
    \ with a fine level of granularity',\n   then the implication is that all parts\
    \ of the network that may be\n   involved with servicing the request either have\
    \ to be over-\n   provisioned such that no load state can compromise the service\n\
    \   quality, or the network element must undertake explicit allocation of\n  \
    \ resources to each flow that is associated with each service request.\n   For\
    \ end-to-end service delivery it does appear that QoS architectures\n   will need\
    \ to extend to the level of the application requesting the\n   service profile.\
    \  It appears that further refinement of the QoS\n   architecture is required\
    \ to integrate DiffServ network services into\n   an end-to-end service delivery\
    \ model, as noted in [7].\n"
- title: 3.2 The Service Environment
  contents:
  - "3.2 The Service Environment\n   The outcome of the considerations of these two\
    \ approaches to QoS\n   architecture within the network is that there appears\
    \ to be no single\n   comprehensive service environment that possesses both service\n\
    \   accuracy and scaling properties.\n   The maintained reservation state of the\
    \ Integrated Services\n   architecture and the end-to-end signaling function of\
    \ RSVP are part\n   of a service management architecture, but it is not cost effective,\n\
    \   or even feasible, to operate a per-application reservation and\n   classification\
    \ state across the high speed core of a network [2].\n   While the aggregated\
    \ behavior state of the Differentiated Services\n   architecture does offer excellent\
    \ scaling properties, the lack of\n   end-to-end signaling facilities makes such\
    \ an approach one that\n   cannot operate in isolation within any environment.\
    \  The\n   Differentiated Services architecture can be characterized as a\n  \
    \ boundary-centric operational model.  With this boundary-centric\n   architecture,\
    \ the signaling of resource availability from the\n   interior of the network\
    \ to the boundary traffic conditioners is not\n   defined, nor is the signaling\
    \ from the traffic conditioners to the\n   application that is resident on the\
    \ end system.  This has been noted\n   as an additional work item in the IntServ\
    \ operations over DiffServ\n   work, concerning \"definition of mechanisms to\
    \ efficiently and\n   dynamically provision resources in a DiffServ network region\"\
    . This\n   might include protocols by which an \"oracle\" (...) conveys\n   information\
    \ about resource availability within a DiffServ region to\n   border routers.\"\
    \ [7]\n   What appears to be required within the Differentiated Services\n   service\
    \ model is both resource availability signaling from the core\n   of the network\
    \ to the DiffServ boundary and some form of signaling\n   from the boundary to\
    \ the client application.\n"
- title: 3.3 QoS Discovery
  contents:
  - "3.3 QoS Discovery\n   There is no robust mechanism for network path discovery\
    \ with specific\n   service performance attributes.  The assumption within both\
    \ IntServ\n   and DiffServ architectures is that the best effort routing path\
    \ is\n   used, where the path is either capable of sustaining the service\n  \
    \ load, or not.\n   Assuming that the deployment of service differentiating\n\
    \   infrastructure will be piecemeal, even if only in the initial stages\n   of\
    \ a QoS rollout, such an assumption may be unwarranted.  If this is\n   the case,\
    \ then how can a host application determine if there is a\n   distinguished service\
    \ path to the destination?  No existing\n   mechanisms exist within either of\
    \ these architectures to query the\n   network for the potential to support a\
    \ specific service profile. Such\n   a query would need to examine a number of\
    \ candidate paths, rather\n   than simply examining the lowest metric routing\
    \ path, so that this\n   discovery function is likely to be associated with some\
    \ form of QoS\n   routing functionality.\n   From this perspective, there is still\
    \ further refinement that may be\n   required in the model of service discovery\
    \ and the associated task of\n   resource reservation.\n"
- title: 3.4 QoS Routing and Resource Management
  contents:
  - "3.4 QoS Routing and Resource Management\n   To date QoS routing has been developed\
    \ at some distance from the task\n   of development of QoS architectures.  The\
    \ implicit assumption within\n   the current QoS architectural models is that\
    \ the routing best effort\n   path will be used for both best effort traffic and\
    \ distinguished\n   service traffic.\n   There is no explicit architectural option\
    \ to allow the network\n   service path to be aligned along other than the single\
    \ best routing\n   metric path, so that available network resources can be efficiently\n\
    \   applied to meet service requests.  Considerations of maximizing\n   network\
    \ efficiency would imply that some form of path selection is\n   necessary within\
    \ a QoS architecture, allowing the set of service\n   requirements to be optimally\
    \ supported within the network's aggregate\n   resource capability.\n   In addition\
    \ to path selection, SPF-based interior routing protocols\n   allow for the flooding\
    \ of link metric information across all network\n   elements.  This mechanism\
    \ appears to be a productive direction to\n   provide the control-level signaling\
    \ between the interior of the\n   network and the network admission elements,\
    \ allowing the admission\n   systems to admit traffic based on current resource\
    \ availability\n   rather than on necessarily conservative statically defined\
    \ admission\n   criteria.\n   There is a more fundamental issue here concerning\
    \ resource management\n   and traffic engineering.  The approach of single path\
    \ selection with\n   static load characteristics does not match a networked environment\n\
    \   which contains a richer mesh of connectivity and dynamic load\n   characteristics.\
    \  In order to make efficient use of a rich\n   connectivity mesh, it is necessary\
    \ to be able to direct traffic with\n   a common ingress and egress point across\
    \ a set of available network\n   paths, spreading the load across a broader collection\
    \ of network\n   links.  At its basic form this is essentially a traffic engineering\n\
    \   problem.  To support this function it is necessary to calculate per-\n   path\
    \ dynamic load metrics, and allow the network's ingress system the\n   ability\
    \ to distribute incoming traffic across these paths in\n   accordance with some\
    \ model of desired traffic balance.  To apply this\n   approach to a QoS architecture\
    \ would imply that each path has some\n   form of vector of quality attributes,\
    \ and incoming traffic is\n   balanced across a subset of available paths where\
    \ the quality\n   attribute of the traffic is matched with the quality vector\
    \ of each\n   available path.  This augmentation to the semantics of the traffic\n\
    \   engineering is matched by a corresponding shift in the calculation\n   and\
    \ interpretation of the path's quality vector.  In this approach\n   what needs\
    \ to be measured is not the path's resource availability\n   level (or idle proportion),\
    \ but the path's potential to carry\n   additional traffic at a certain level\
    \ of quality. This potential\n   metric is one that allows existing lower priority\
    \ traffic to be\n   displaced to alternative paths.  The path's quality metric\
    \ can be\n   interpreted as a metric describing the displacement capability of\
    \ the\n   path, rather than a resource availability metric.\n   This area of active\
    \ network resource management, coupled with dynamic\n   network resource discovery,\
    \ and the associated control level\n   signaling to network admission systems\
    \ appears to be a topic for\n   further research at this point in time.\n"
- title: 3.5 TCP and QoS
  contents:
  - "3.5 TCP and QoS\n   A congestion-managed rate-adaptive traffic flow (such as\
    \ used by TCP)\n   uses the feedback from the ACK packet stream to time subsequent\
    \ data\n   transmissions.  The resultant traffic flow rate is an outcome of the\n\
    \   service quality provided to both the forward data packets and the\n   reverse\
    \ ACK packets.  If the ACK stream is treated by the network\n   with a different\
    \ service profile to the outgoing data packets, it\n   remains an open question\
    \ as to what extent will the data forwarding\n   service be compromised in terms\
    \ of achievable throughput.  High rates\n   of jitter on the ACK stream can cause\
    \ ACK compression, that in turn\n   will cause high burst rates on the subsequent\
    \ data send.  Such bursts\n   will stress the service capacity of the network\
    \ and will compromise\n   TCP throughput rates.\n   One way to address this is\
    \ to use some form of symmetric service,\n   where the ACK packets are handled\
    \ using the same service class as the\n   forward data packets.  If symmetric\
    \ service profiles are important\n   for TCP sessions, how can this be structured\
    \ in a fashion that does\n   not incorrectly account for service usage?  In other\
    \ words, how can\n   both directions of a TCP flow be accurately accounted to\
    \ one party?\n   Additionally, there is the interaction between the routing system\
    \ and\n   the two TCP data flows.  The Internet routing architecture does not\n\
    \   intrinsically preserve TCP flow symmetry, and the network path taken\n   by\
    \ the forward packets of a TCP session may not exactly correspond to\n   the path\
    \ used by the reverse packet flow.\n   TCP also exposes an additional performance\
    \ constraint in the manner\n   of the traffic conditioning elements in a QoS-enabled\
    \ network.\n   Traffic conditioners within QoS architectures are typically specified\n\
    \   using a rate enforcement mechanism of token buckets.  Token bucket\n   traffic\
    \ conditioners behave in a manner that is analogous to a First\n   In First Out\
    \ queue.  Such traffic conditioning systems impose tail\n   drop behavior on TCP\
    \ streams.  This tail drop behavior can produce\n   TCP timeout retransmission,\
    \ unduly penalizing the average TCP goodput\n   rate to a level that may be well\
    \ below the level specified by the\n   token bucket traffic conditioner.  Token\
    \ buckets can be considered as\n   TCP-hostile network elements.\n   The larger\
    \ issue exposed in this consideration is that provision of\n   some form of assured\
    \ service to congestion-managed traffic flows\n   requires traffic conditioning\
    \ elements that operate using weighted\n   RED-like control behaviors within the\
    \ network, with less\n   deterministic traffic patterns as an outcome.  A requirement\
    \ to\n   manage TCP burst behavior through token bucket control mechanisms is\n\
    \   most appropriately managed in the sender's TCP stack.\n   There are a number\
    \ of open areas in this topic that would benefit\n   from further research.  The\
    \ nature of the interaction between the\n   end-to-end TCP control system and\
    \ a collection of service\n   differentiation mechanisms with a network is has\
    \ a large number of\n   variables.  The issues concern the time constants of the\
    \ control\n   systems, the amplitude of feedback loops, and the extent to which\n\
    \   each control system assumes an operating model of other active\n   control\
    \ systems that are applied to the same traffic flow, and the\n   mode of convergence\
    \ to a stable operational state for each control\n   system.\n"
- title: 3.6 Per-Flow States and Per-Packet classifiers
  contents:
  - "3.6 Per-Flow States and Per-Packet classifiers\n   Both the IntServ and DiffServ\
    \ architectures use packet classifiers as\n   an intrinsic part of their architecture.\
    \  These classifiers can be\n   considered as coarse or fine level classifiers.\
    \  Fine-grained\n   classifiers can be considered as classifiers that attempt\
    \ to isolate\n   elements of traffic from an invocation of an application (a `micro-\n\
    \   flow') and use a number of fields in the IP packet header to assist\n   in\
    \ this, typically including the source and destination IP addresses\n   and source\
    \ and source and destination port addresses.  Coarse-grained\n   classifiers attempt\
    \ to isolate traffic that belongs to an aggregated\n   service state, and typically\
    \ use the DiffServ code field as the\n   classifying field.  In the case of DiffServ\
    \ there is the potential to\n   use fine-grained classifiers as part of the network\
    \ ingress element,\n   and coarse-gained classifiers within the interior of the\
    \ network.\n   Within flow-sensitive IntServ deployments, every active network\n\
    \   element that undertakes active service discrimination is requirement\n   to\
    \ operate fine-grained packet classifiers.  The granularity of the\n   classifiers\
    \ can be relaxed with the specification of aggregate\n   classifiers [5], but\
    \ at the expense of the precision and accuracy of\n   the service response.\n\
    \   Within the IntServ architecture the fine-grained classifiers are\n   defined\
    \ to the level of granularity of an individual traffic flow,\n   using the packet's\
    \ 5-tuple of (source address, destination address,\n   source port, destination\
    \ port, protocol) as the means to identify an\n   individual traffic flow.  The\
    \ DiffServ Multi-Field (MF) classifiers\n   are also able to use this 5-tuple\
    \ to map individual traffic flows\n   into supported behavior aggregates.\n  \
    \ The use of IPSEC, NAT and various forms of IP tunnels result in a\n   occlusion\
    \ of the flow identification within the IP packet header,\n   combining individual\
    \ flows into a larger aggregate state that may be\n   too coarse for the network's\
    \ service policies.  The issue with such\n   mechanisms is that they may occur\
    \ within the network path in a\n   fashion that is not visible to the end application,\
    \ compromising the\n   ability for the application to determine whether the requested\n\
    \   service profile is being delivered by the network.  In the case of\n   IPSEC\
    \ there is a proposal to carry the IPSEC Security Parameter Index\n   (SPI) in\
    \ the RSVP object [10], as a surrogate for the port addresses.\n   In the case\
    \ of NAT and various forms of IP tunnels, there appears to\n   be no coherent\
    \ way to preserve fine-grained classification\n   characteristics across NAT devices,\
    \ or across tunnel encapsulation.\n   IP packet fragmentation also affects the\
    \ ability of the network to\n   identify individual flows, as the trailing fragments\
    \ of the IP packet\n   will not include the TCP or UDP port address information.\
    \ This admits\n   the possibility of trailing fragments of a packet within a\n\
    \   distinguished service class being classified into the base best\n   effort\
    \ service category, and delaying the ultimate delivery of the IP\n   packet to\
    \ the destination until the trailing best effort delivered\n   fragments have\
    \ arrived.\n   The observation made here is that QoS services do have a number\
    \ of\n   caveats that should be placed on both the application and the\n   network.\
    \  Applications should perform path MTU discovery in order to\n   avoid packet\
    \ fragmentation.  Deployment of various forms of payload\n   encryption, header\
    \ address translation and header encapsulation\n   should be undertaken with due\
    \ attention to their potential impacts on\n   service delivery packet classifiers.\n"
- title: 3.7 The Service Set
  contents:
  - "3.7 The Service Set\n   The underlying question posed here is how many distinguished\
    \ service\n   responses are adequate to provide a functionally adequate range\
    \ of\n   service responses?\n   The Differentiated Services architecture does\
    \ not make any limiting\n   restrictions on the number of potential services that\
    \ a network\n   operator can offer.  The network operator may be limited to a\
    \ choice\n   of up to 64 discrete services in terms of the 6 bit service code\n\
    \   point in the IP header but as the mapping from service to code point\n   can\
    \ be defined by each network operator, there can be any number of\n   potential\
    \ services.\n   As always, there is such a thing as too much of a good thing,\
    \ and a\n   large number of potential services leads to a set of issues around\n\
    \   end-to-end service coherency when spanning multiple network domains.\n   A\
    \ small set of distinguished services can be supported across a large\n   set\
    \ of service providers by equipment vendors and by application\n   designers alike.\
    \  An ill-defined large set of potential services\n   often serves little productive\
    \ purpose.  This does point to a\n   potential refinement of the QoS architecture\
    \ to define a small core\n   set of service profiles as \"well-known\" service\
    \ profiles, and place\n   all other profiles within a \"private use\" category.\n"
- title: 3.8 Measuring Service Delivery
  contents:
  - "3.8 Measuring Service Delivery\n   There is a strong requirement within any QoS\
    \ architecture for network\n   management approaches that provide a coherent view\
    \ of the operating\n   state of the network.  This differs from a conventional\
    \ element-by-\n   element management view of the network in that the desire here\
    \ is to\n   be able to provide a view of the available resources along a\n   particular\
    \ path within a network, and map this view to an admission\n   control function\
    \ which can determine whether to admit a service\n   differentiated flow along\
    \ the nominated network path.\n   As well as managing the admission systems through\
    \ resource\n   availability measurement, there is a requirement to be able to\n\
    \   measure the operating parameters of the delivered service.  Such\n   measurement\
    \ methodologies are required in order to answer the\n   question of how the network\
    \ operator provides objective measurements\n   to substantiate the claim that\
    \ the delivered service quality\n   conformed to the service specifications. \
    \ Equally, there is a\n   requirement for a measurement methodology to allow the\
    \ client to\n   measure the delivered service quality so that any additional expense\n\
    \   that may be associated with the use of premium services can be\n   justified\
    \ in terms of superior application performance.\n   Such measurement methodologies\
    \ appear to fall within the realm of\n   additional refinement to the QoS architecture.\n"
- title: 3.9 QoS Accounting
  contents:
  - "3.9 QoS Accounting\n   It is reasonable to anticipate that such forms of premium\
    \ service and\n   customized service will attract an increment on the service\
    \ tariff.\n   The provision of a distinguished service is undertaken with some\n\
    \   level of additional network resources to support the service, and the\n  \
    \ tariff premium should reflect this altered resource allocation.  Not\n   only\
    \ does such an incremental tariff shift the added cost burden to\n   those clients\
    \ who are requesting a disproportionate level of\n   resources, but it provides\
    \ a means to control the level of demand for\n   premium service levels.\n   If\
    \ there are to be incremental tariffs on the use of premium\n   services, then\
    \ some accounting of the use of the premium service\n   would appear to be necessary\
    \ relating use of the service to a\n   particular client.  So far there is no\
    \ definition of such an\n   accounting model nor a definition as to how to gather\
    \ the data to\n   support the resource accounting function.\n   The impact of\
    \ this QoS service model may be quite profound to the\n   models of Internet service\
    \ provision.  The commonly adopted model in\n   both the public internet and within\
    \ enterprise networks is that of a\n   model of access, where the clients service\
    \ tariff is based on the\n   characteristics of access to the services, rather\
    \ than that of the\n   actual use of the service.  The introduction of QoS services\
    \ creates\n   a strong impetus to move to usage-based tariffs, where the tariff\
    \ is\n   based on the level of use of the network's resources.  This, in turn,\n\
    \   generates a requirement to meter resource use, which is a form of\n   usage\
    \ accounting.  This topic was been previously studied within the\n   IETF under\
    \ the topic of \"Internet Accounting\" [11], and further\n   refinement of the\
    \ concepts used in this model, as they apply to QoS\n   accounting may prove to\
    \ be a productive initial step in formulating a\n   standards-based model for\
    \ QoS accounting.\n"
- title: 3.10 QoS Deployment Diversity
  contents:
  - "3.10 QoS Deployment Diversity\n   It is extremely improbable that any single\
    \ form of service\n   differentiation technology will be rolled out across the\
    \ Internet and\n   across all enterprise networks.\n   Some networks will deploy\
    \ some form of service differentiation\n   technology while others will not. \
    \ Some of these service platforms\n   will interoperate seamlessly and other less\
    \ so.  To expect all\n   applications, host systems, network routers, network\
    \ policies, and\n   inter-provider arrangements to coalesce into a single homogeneous\n\
    \   service environment that can support a broad range of service\n   responses\
    \ is an somewhat unlikely outcome given the diverse nature of\n   the available\
    \ technologies and industry business models.  It is more\n   likely that we will\
    \ see a number of small scale deployment of service\n   differentiation mechanisms\
    \ and some efforts to bridge these\n   environments together in some way.\n  \
    \ In this heterogeneous service environment the task of service\n   capability\
    \ discovery is as critical as being able to invoke service\n   responses and measure\
    \ the service outcomes.  QoS architectures will\n   need to include protocol capabilities\
    \ in supporting service discovery\n   mechanisms.\n   In addition, such a heterogeneous\
    \ deployment environment will create\n   further scaling pressure on the operational\
    \ network as now there is\n   an additional dimension to the size of the network.\
    \  Each potential\n   path to each host is potentially qualified by the service\n\
    \   capabilities of the path.  While one path may be considered as a\n   candidate\
    \ best effort path, another path may offer a more precise\n   match between the\
    \ desired service attributes and the capabilities of\n   the path to sustain the\
    \ service.  Inter-domain policy also impacts\n   upon this path choice, where\
    \ inter-domain transit agreements may\n   specifically limit the types and total\
    \ level of quality requests than\n   may be supported between the domains.  Much\
    \ of the brunt of such\n   scaling pressures will be seen in the inter-domain\
    \ and intra-domain\n   routing domain where there are pressures to increase the\
    \ number of\n   attributes of a routing entry, and also to use the routing protocol\n\
    \   in some form of service signaling role.\n"
- title: 3.11 QoS Inter-Domain signaling
  contents:
  - "3.11 QoS Inter-Domain signaling\n   QoS Path selection is both an intra-domain\
    \ (interior) and an inter-\n   domain (exterior) issue.  Within the inter-domain\
    \ space, the current\n   routing technologies allow each domain to connect to\
    \ a number of\n   other domains, and to express its policies with respect to received\n\
    \   traffic in terms of inter-domain route object attributes.\n   Additionally,\
    \ each domain may express its policies with respect to\n   sending traffic through\
    \ the use of boundary route object filters,\n   allowing a domain to express its\
    \ preference for selecting one\n   domain's advertised routes over another.  The\
    \ inter-domain routing\n   space is a state of dynamic equilibrium between these\
    \ various route\n   policies.\n   The introduction of differentiated services\
    \ adds a further dimension\n   to this policy space.  For example, while a providers\
    \ may execute an\n   interconnection agreement with one party to exchange best\
    \ effort\n   traffic, it may execute another agreement with a second party to\n\
    \   exchange service qualified traffic.  The outcome of this form of\n   interconnection\
    \ is that the service provider will require external\n   route advertisements\
    \ to be qualified by the accepted service\n   profiles.  Generalizing from this\
    \ scenario, it is reasonable to\n   suggest that we will require the qualification\
    \ of routing\n   advertisements with some form of service quality attributes.\
    \  This\n   implies that we will require some form of quality vector-based\n \
    \  forwarding function, at least in the inter-domain space, and some\n   associated\
    \ routing protocol can pass a quality of service vector in\n   an operationally\
    \ stable fashion.\n   The implication of this requirement is that the number of\
    \ objects\n   being managed by routing systems must expand dramatically, as the\n\
    \   size and number of objects managed within the routing domain\n   increases,\
    \ and the calculation of a dynamic equilibrium of import and\n   export policies\
    \ between interconnected providers will also be subject\n   to the same level\
    \ of scaling pressure.\n   This has implications within the inter-domain forwarding\
    \ space as\n   well, as the forwarding decision in such a services differentiated\n\
    \   environment is then qualified by some form of service quality vector.\n  \
    \ This is required in order to pass exterior traffic to the appropriate\n   exterior\
    \ interconnection gateway.\n"
- title: 3.12 QoS Deployment Logistics
  contents:
  - "3.12 QoS Deployment Logistics\n   How does the widespread deployment of service-aware\
    \ networks\n   commence?  Which gets built first - host applications or network\n\
    \   infrastructure?\n   No network operator will make the significant investment\
    \ in\n   deployment and support of distinguished service infrastructure unless\n\
    \   there is a set of clients and applications available to make\n   immediate\
    \ use of such facilities.  Clients will not make the\n   investment in enhanced\
    \ services unless they see performance gains in\n   applications that are designed\
    \ to take advantage of such enhanced\n   services.  No application designer will\
    \ attempt to integrate service\n   quality features into the application unless\
    \ there is a model of\n   operation supported by widespread deployment that makes\
    \ the\n   additional investment in application complexity worthwhile and\n   clients\
    \ who are willing to purchase such applications.  With all\n   parts of the deployment\
    \ scenario waiting for the others to move,\n   widespread deployment of distinguished\
    \ services may require some\n   other external impetus.\n   Further aspects of\
    \ this deployment picture lie in the issues of\n   network provisioning and the\
    \ associated task of traffic engineering.\n   Engineering a network to meet the\
    \ demands of best effort flows\n   follows a well understood pattern of matching\
    \ network points of user\n   concentrations to content delivery network points\
    \ with best effort\n   paths.  Integrating QoS-mediated traffic engineering into\
    \ the\n   provisioning model suggests a provisioning requirement that also\n \
    \  requires input from a QoS demand model.\n"
- title: 4. The objective of the QoS architecture
  contents:
  - "4. The objective of the QoS architecture\n   What is the precise nature of the\
    \ problem that QoS is attempting to\n   solve?  Perhaps this is one of the more\
    \ fundamental questions\n   underlying the QoS effort, and the diversity of potential\
    \ responses\n   is a pointer to the breadth of scope of the QoS effort.\n   All\
    \ of the following responses form a part of the QoS intention:\n    -  To control\
    \ the network service response such that the response\n       to a specific service\
    \ element is consistent and predictable.\n    -  To control the network service\
    \ response such that a service\n       element is provided with a level of response\
    \ equal to or above a\n       guaranteed minimum.\n    -  To allow a service element\
    \ to establish in advance the service\n       response that can or will be obtained\
    \ from the network.\n    -  To control the contention for network resources such\
    \ that a\n       service element is provided with a superior level of network\n\
    \       resource.\n    -  To control the contention for network resources such\
    \ that a\n       service element does not obtain an unfair allocation of\n   \
    \    resources (to some definition of 'fairness').\n    -  To allow for efficient\
    \ total utilization of network resources\n       while servicing a spectrum of\
    \ directed network service outcomes.\n   Broadly speaking, the first three responses\
    \ can be regarded as\n   'application-centric', and the latter as 'network-centric'.\
    \  It is\n   critical to bear in mind that none of these responses can be\n  \
    \ addressed in isolation within any effective QoS architecture.  Within\n   the\
    \ end-to-end architectural model of the Internet, applications make\n   minimal\
    \ demands on the underlying IP network.  In the case of TCP,\n   the protocol\
    \ uses an end-to-end control signal approach to\n   dynamically adjust to the\
    \ prevailing network state.  QoS\n   architectures add a somewhat different constraint,\
    \ in that the\n   network is placed in an active role within the task of resource\n\
    \   allocation and service delivery, rather than being a passive object\n   that\
    \ requires end systems to adapt.\n"
- title: 5. Towards an end-to-end QoS architecture
  contents:
  - "5. Towards an end-to-end QoS architecture\n   The challenge facing the QoS architecture\
    \ lies in addressing the\n   weaknesses noted above, and in integrating the various\
    \ elements of\n   the architecture into a cohesive whole that is capable of sustaining\n\
    \   end-to-end service models across a wide diversity of internet\n   platforms.\
    \  It should be noted that such an effort may not\n   necessarily result in a\
    \ single resultant architecture, and that it is\n   possible to see a number of\
    \ end-to-end approaches based on different\n   combinations of the existing components.\n\
    \   One approach is to attempt to combine both architectures into an\n   end-to-end\
    \ model, using IntServ as the architecture which allows\n   applications to interact\
    \ with the network, and DiffServ as the\n   architecture to manage admission the\
    \ network's resources [7].  In\n   this approach, the basic tension that needs\
    \ to be resolved lies in\n   difference between the per-application view of the\
    \ IntServ\n   architecture and the network boundary-centric view of the DiffServ\n\
    \   architecture.\n   One building block for such an end-to-end service architecture\
    \ is a\n   service signaling protocol.  The RSVP signaling protocol can address\n\
    \   the needs of applications that require a per-service end-to-end\n   service\
    \ signaling environment.  The abstracted model of RSVP is that\n   of a discovery\
    \ signaling protocol that allows an application to use a\n   single transaction\
    \ to communicate its service requirements to both\n   the network and the remote\
    \ party, and through the response mechanism,\n   to allow these network elements\
    \ to commit to the service\n   requirements.  The barriers to deployment for this\
    \ model lie in an\n   element-by element approach to service commitment, implying\
    \ that each\n   network element must undertake some level of signaling and processing\n\
    \   as dictated by this imposed state.  For high precision services this\n   implies\
    \ per-flow signaling and per-flow processing to support this\n   service model.\
    \  This fine-grained high precision approach to service\n   management is seen\
    \ as imposing an unacceptable level of overhead on\n   the central core elements\
    \ of large carrier networks.\n   The DiffServ approach uses a model of abstraction\
    \ which attempts to\n   create an external view of a compound network as a single\
    \ subnetwork.\n   From this external perspective the network can be perceived\
    \ as two\n   boundary service points, ingress and egress.  The advantage of this\n\
    \   approach is that there exists the potential to eliminate the\n   requirement\
    \ for per-flow state and per-flow processing on the\n   interior elements of such\
    \ a network, and instead provide aggregate\n   service responses.\n   One approach\
    \ is for applications to use RSVP to request that their\n   flows be admitted\
    \ into the network.  If a request is accepted, it\n   would imply that there is\
    \ a committed resource reservation within the\n   IntServ-capable components of\
    \ the network, and that the service\n   requirements have been mapped into a compatible\
    \ aggregate service\n   class within the DiffServ-capable network [7].  The DiffServ\
    \ core\n   must be capable of carrying the RSVP messages across the DiffServ\n\
    \   network, so that further resource reservation is possible within the\n   IntServ\
    \ network upon egress from the DiffServ environment.  The\n   approach calls for\
    \ the DiffServ network to use per-flow multi-field\n   (MF) classifier, where\
    \ the MF classification is based on the RSVP-\n   signaled flow specification.\
    \  The service specification of the RSVP-\n   signaled resource reservation is\
    \ mapped into a compatible aggregate\n   DiffServ behavior aggregate and the MF\
    \ classifier marks packets\n   according to the selected behavior.  Alternatively\
    \ the boundary of\n   the IntServ and DiffServ networks can use the IntServ egress\
    \ to mark\n   the flow packets with the appropriate DSCP, allowing the DiffServ\n\
    \   ingress element to use the BA classifier, and dispense with the per-\n   flow\
    \ MF classifier.\n   A high precision end-to-end QoS model requires that any admission\n\
    \   failure within the DiffServ network be communicated to the end\n   application,\
    \ presumably via RSVP.  This allows the application to\n   take some form of corrective\
    \ action, either by modifying it's service\n   requirements or terminating the\
    \ application.  If the service\n   agreement between the DiffServ network is statically\
    \ provisioned,\n   then this static information can be loaded into the IntServ\
    \ boundary\n   systems, and IntServ can manage the allocation of available DiffServ\n\
    \   behavior aggregate resources.  If the service agreement is\n   dynamically\
    \ variable, some form of signaling is required between the\n   two networks to\
    \ pass this resource availability information back into\n   the RSVP signaling\
    \ environment.\n"
- title: 6. Conclusions
  contents:
  - "6. Conclusions\n   None of these observations are intended to be any reason to\
    \ condemn\n   the QoS architectures as completely impractical, nor are they\n\
    \   intended to provide any reason to believe that the efforts of\n   deploying\
    \ QoS architectures will not come to fruition.\n   What this document is intended\
    \ to illustrate is that there are still\n   a number of activities that are essential\
    \ precursors to widespread\n   deployment and use of such QoS networks, and that\
    \ there is a need to\n   fill in the missing sections with something substantial\
    \ in terms of\n   adoption of additional refinements to the existing QoS model.\n\
    \   The architectural direction that appears to offer the most promising\n   outcome\
    \ for QoS is not one of universal adoption of a single\n   architecture, but instead\
    \ use a tailored approach where aggregated\n   service elements are used in the\
    \ core of a network where scalability\n   is a major design objective and use\
    \ per-flow service elements at the\n   edge of the network where accuracy of the\
    \ service response is a\n   sustainable outcome.\n   Architecturally, this points\
    \ to no single QoS architecture, but\n   rather to a set of QoS mechanisms and\
    \ a number of ways these\n   mechanisms can be configured to interoperate in a\
    \ stable and\n   consistent fashion.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   The Internet is not an architecture that includes\
    \ a strict\n   implementation of fairness of access to the common transmission\
    \ and\n   switching resource.  The introduction of any form of fairness, and,\n\
    \   in the case of QoS, weighted fairness, implies a requirement for\n   transparency\
    \ in the implementation of the fairness contract between\n   the network provider\
    \ and the network's users.  This requires some\n   form of resource accounting\
    \ and auditing, which, in turn, requires\n   the use of authentication and access\
    \ control.  The balancing factor\n   is that a shared resource should not overtly\
    \ expose the level of\n   resource usage of any one user to any other, so that\
    \ some level of\n   secrecy is required in this environment\n   The QoS environment\
    \ also exposes the potential of theft of resources\n   through the unauthorized\
    \ admission of traffic with an associated\n   service profile.  QoS signaling\
    \ protocols which are intended to\n   undertake resource management and admission\
    \ control require the use\n   of identity authentication and integrity protection\
    \ in order to\n   mitigate this potential for theft of resources.\n   Both forms\
    \ of QoS architecture require the internal elements of the\n   network to be able\
    \ to undertake classification of traffic based on\n   some form of identification\
    \ that is carried in the packet header in\n   the clear.  Classifications systems\
    \ that use multi-field specifiers,\n   or per-flow specifiers rely on the carriage\
    \ of end-to-end packet\n   header fields being carried in the clear.  This has\
    \ conflicting\n   requirements for security architectures that attempt to mask\
    \ such\n   end-to-end identifiers within an encrypted payload.\n   QoS architectures\
    \ can be considered as a means of exerting control\n   over network resource allocation.\
    \  In the event of a rapid change in\n   resource availability (e.g. disaster)\
    \ it is an undesirable outcome if\n   the remaining resources are completely allocated\
    \ to a single class of\n   service to the exclusion of all other classes.  Such\
    \ an outcome\n   constitutes a denial of service, where the traffic control system\n\
    \   (routing) selects paths that are incapable of carrying any traffic of\n  \
    \ a particular service class.\n"
- title: 8. References
  contents:
  - "8. References\n   [1]  Bradner, S., \"The Internet Standards Process- Revision\
    \ 3\", BCP\n        9, RFC 2026, October 1996.\n   [2]  Mankin, A., Baker, F.,\
    \ Braden, R., O'Dell, M., Romanow, A.,\n        Weinrib, A. and L. Zhang, \"Resource\
    \ ReSerVation Protocol (RSVP)\n        Version 1 Applicability Statement\", RFC\
    \ 2208, September 1997.\n   [3]  Braden. R., Clark, D. and S. Shenker, \"Integrated\
    \ Services in\n        the Internet Architecture: an Overview\", RFC 1633, June\
    \ 1994.\n   [4]  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z. and W.\n\
    \        Weiss, \"An Architecture for Differentiated Services\", RFC 2475,\n \
    \       December 1998.\n   [5]  Baker, F., Iturralde, C., Le Faucher, F., Davie,\
    \ B.,\n        \"Aggregation of RSVP for IPv4 and IPv6 Reservations\", Work in\n\
    \        Progress.\n   [6]  Bernet, Y., \"Format of the RSVP DCLASS Object\",\
    \ RFC 2996,\n        November 2000.\n   [7]  Bernet, Y., Yavatkar, R., Ford, P.,\
    \ Baker, F., Zhang, L., Speer,\n        M., Braden, R., Davie, B., Wroclawski,\
    \ J. and E. Felstaine, \"A\n        Framework for Integrated Services Operation\
    \ Over DiffServ\n        Networks\", RFC 2998, November 2000.\n   [8]  \"Quality\
    \ of Service Technical Overview\", Microsoft Technical\n        Library, Microsoft\
    \ Corporation, September 1999.\n   [9]  \"Resource Reservation Protocol API (RAPI)\"\
    , Open Group Technical\n        Standard, C809 ISBN 1-85912-226-4, The Open Group,\
    \ December\n        1998.\n   [10] Berger, L. and T. O'Malley, \"RSVP Extensions\
    \ for IPSEC Data\n        Flows\", RFC 2007, September 1997.\n   [11] Mills, C.,\
    \ Hirsh, D. and G. Ruth, \"Internet Accounting:\n        Background\", RFC 1272,\
    \ November 1991.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Valuable contributions to this document came from Yoram\
    \ Bernet, Brian\n   Carpenter, Jon Crowcroft, Tony Hain and Henning Schulzrinne.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Geoff Huston\n   Telstra\n   5/490 Northbourne Ave\n\
    \   Dickson ACT 2602\n   AUSTRALIA\n   EMail: gih@telstra.net\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
