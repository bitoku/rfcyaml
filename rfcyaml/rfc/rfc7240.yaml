- contents:
  - '                         Prefer Header for HTTP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines an HTTP header field that can be used
    by a\n   client to request that certain behaviors be employed by a server\n   while
    processing a request.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7240.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Syntax Notation ............................................4\n   2.
    The Prefer Request Header Field .................................4\n      2.1.
    Examples ...................................................6\n   3. The Preference-Applied
    Response Header Field ....................7\n   4. Preference Definitions ..........................................8\n
    \     4.1. The \"respond-async\" Preference .............................8\n      4.2.
    The \"return=representation\" and \"return=minimal\"\n           Preferences ................................................9\n
    \     4.3. The \"wait\" Preference .....................................11\n      4.4.
    The \"handling=strict\" and \"handling=lenient\" Processing ...12\n   5. IANA
    Considerations ............................................13\n      5.1. The
    Registry of Preferences ...............................13\n      5.2. Initial
    Registry Contents .................................15\n   6. Security Considerations
    ........................................16\n   7. References .....................................................16\n
    \     7.1. Normative References ......................................16\n      7.2.
    Informative References ....................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Within the course of processing an HTTP request, there are
    typically\n   a range of required and optional behaviors that a server or\n   intermediary
    can employ.  These often manifest in a variety of subtle\n   and not-so-subtle
    ways within the response.\n   For example, when using the HTTP PUT method to modify
    a resource --\n   similar to that defined for the Atom Publishing Protocol [RFC5023]
    --\n   the server is given the option of returning either a complete\n   representation
    of a modified resource or a minimal response that\n   indicates only the successful
    completion of the operation.  The\n   selection of which type of response to return
    to the client generally\n   has no bearing on the successful processing of the
    request but could,\n   for instance, have an impact on what actions the client
    must take\n   after receiving the response.  That is, returning a representation
    of\n   the modified resource within the response can allow the client to\n   avoid
    sending an additional subsequent GET request.\n   Similarly, servers that process
    requests are often faced with\n   decisions about how to process requests that
    may be technically\n   invalid or incorrect but are still understandable.  It
    might be the\n   case that the server is able to overlook the technical errors
    in the\n   request but still successfully process the request.  Depending on the\n
    \  specific requirements of the application and the nature of the\n   request
    being made, the client might or might not consider such\n   lenient processing
    of its request to be appropriate.\n   While the decision of exactly which behaviors
    to apply in these cases\n   lies with the server processing the request, the server
    might wish to\n   defer to the client to specify which optional behavior is preferred.\n
    \  Currently, HTTP offers no explicitly defined means of expressing the\n   client's
    preferences regarding the optional aspects of handling of a\n   given request.
    \ While HTTP does provide the Expect header -- which\n   can be used to identify
    mandatory expectations for the processing of\n   a request -- use of the field
    to communicate optional preferences is\n   problematic:\n   1.  The semantics
    of the Expect header field are such that\n       intermediaries and servers are
    required to reject any request\n       that states unrecognized or unsupported
    expectations.\n   2.  While the Expect header field is end to end, the HTTP\n
    \      specification requires that the header be processed hop by hop.\n       That
    is, every interceding intermediary that handles a request\n       between the
    client and the origin server is required to process\n       an expectation and
    determine whether it is capable of\n       appropriately handling it.\n   The
    must-understand semantics of the Expect header make it a poor\n   choice for the
    expression of optional preferences.\n   Another option available to clients is
    to utilize Request URI\n   query-string parameters to express preferences.  However,
    any\n   mechanism that alters the URI can have undesirable effects, such as\n
    \  when caches record the altered URI.\n   As an alternative, this specification
    defines a new HTTP request\n   header field that can be used by clients to request
    that optional\n   behaviors be applied by a server during the processing the request.\n
    \  Additionally, a handful of initial preference tokens for use with the\n   new
    header are defined.\n   In this document, the key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in [RFC2119].\n"
  - contents:
    - "1.1.  Syntax Notation\n   This specification uses the Augmented Backus-Naur
      Form (ABNF)\n   notation of [RFC5234] and includes, by reference, the \"token\",\n
      \  \"word\", \"OWS\", and \"BWS\" rules and the #rule extension as defined\n
      \  within Sections 3.2.1 and 3.2.4 of [RFC7230]; as well as the\n   \"delta-seconds\"
      rule defined in Section 8.1.3 of [RFC7231].\n"
    title: 1.1.  Syntax Notation
  title: 1.  Introduction
- contents:
  - "2.  The Prefer Request Header Field\n   The Prefer request header field is used
    to indicate that particular\n   server behaviors are preferred by the client but
    are not required for\n   successful completion of the request.  Prefer is similar
    in nature to\n   the Expect header field defined by Section 6.1.2 of [RFC7231]
    with\n   the exception that servers are allowed to ignore stated preferences.\n
    \  ABNF:\n     Prefer     = \"Prefer\" \":\" 1#preference\n     preference = token
    [ BWS \"=\" BWS word ]\n                  *( OWS \";\" [ OWS parameter ] )\n     parameter
    \ = token [ BWS \"=\" BWS word ]\n   This header field is defined with an extensible
    syntax to allow for\n   future values included in the Registry of Preferences
    (Section 5.1).\n   A server that does not recognize or is unable to comply with\n
    \  particular preference tokens in the Prefer header field of a request\n   MUST
    ignore those tokens and continue processing instead of signaling\n   an error.\n
    \  Empty or zero-length values on both the preference token and within\n   parameters
    are equivalent to no value being specified at all.  The\n   following, then, are
    equivalent examples of a \"foo\" preference with a\n   single \"bar\" parameter.\n
    \    Prefer: foo; bar\n     Prefer: foo; bar=\"\"\n     Prefer: foo=\"\"; bar\n
    \  An optional set of parameters can be specified for any preference\n   token.
    \ The meaning and application of such parameters is dependent\n   on the definition
    of each preference token and the server's\n   implementation thereof.  There is
    no significance given to the\n   ordering of parameters on any given preference.\n
    \  For both preference token names and parameter names, comparison is\n   case
    insensitive while values are case sensitive regardless of\n   whether token or
    quoted-string values are used.\n   The Prefer header field is end to end and MUST
    be forwarded by a\n   proxy if the request is forwarded unless Prefer is explicitly\n
    \  identified as being hop by hop using the Connection header field\n   defined
    by [RFC7230], Section 6.1.\n   In various situations, a proxy might determine
    that it is capable of\n   honoring a preference independently of the server to
    which the\n   request has been directed.  For instance, an intervening proxy might\n
    \  be capable of providing asynchronous handling of a request using 202\n   (Accepted)
    responses independently of the origin server.  Such\n   proxies can choose to
    honor the \"respond-async\" preference on their\n   own regardless of whether
    or not the origin is capable or willing to\n   do so.\n   Individual preference
    tokens MAY define their own requirements and\n   restrictions as to whether and
    how intermediaries can apply the\n   preference to a request independently of
    the origin server.\n   A client MAY use multiple instances of the Prefer header
    field in a\n   single message, or it MAY use a single Prefer header field with\n
    \  multiple comma-separated preference tokens.  If multiple Prefer\n   header
    fields are used, it is equivalent to a single Prefer header\n   field with the
    comma-separated concatenation of all of the tokens.\n   For example, the following
    are equivalent:\n   Multiple Prefer header fields defining three distinct preference\n
    \  tokens:\n     POST /foo HTTP/1.1\n     Host: example.org\n     Prefer: respond-async,
    wait=100\n     Prefer: handling=lenient\n     Date: Tue, 20 Dec 2011 12:34:56
    GMT\n   A single Prefer header field defining the same three preference\n   tokens:\n
    \    POST /foo HTTP/1.1\n     Host: example.org\n     Prefer: handling=lenient,
    wait=100, respond-async\n     Date: Tue, 20 Dec 2011 12:34:56 GMT\n   To avoid
    any possible ambiguity, individual preference tokens SHOULD\n   NOT appear multiple
    times within a single request.  If any preference\n   is specified more than once,
    only the first instance is to be\n   considered.  All subsequent occurrences SHOULD
    be ignored without\n   signaling an error or otherwise altering the processing
    of the\n   request.  This is the only case in which the ordering of preferences\n
    \  within a request is considered to be significant.\n   Due to the inherent complexities
    involved with properly implementing\n   server-driven content negotiation, effective
    caching, and the\n   application of optional preferences, implementers are urged
    to\n   exercise caution when using preferences in a way that impacts the\n   caching
    of a response and SHOULD NOT use the Prefer header mechanism\n   for content negotiation.
    \ If a server supports the optional\n   application of a preference that might
    result in a variance to a\n   cache's handling of a response entity, a Vary header
    field MUST be\n   included in the response listing the Prefer header field regardless\n
    \  of whether the client actually used Prefer in the request.\n   Alternatively,
    the server MAY include a Vary header with the special\n   value \"*\" as defined
    by [RFC7231], Section 8.2.1.  Note, however,\n   that use of the \"Vary: *\" header
    will make it impossible for a proxy\n   to cache the response.\n   Note that while
    Preference tokens are similar in structure to HTTP\n   Expect tokens, the Prefer
    and Expect header fields serve very\n   distinct purposes and preferences cannot
    be used as expectations.\n"
  - contents:
    - "2.1.  Examples\n   The following examples illustrate the use of various preferences\n
      \  defined by this specification, as well as undefined extensions for\n   strictly
      illustrative purposes:\n   1.  Return a 202 (Accepted) response for asynchronous
      processing if\n   the request cannot be processed within 10 seconds.  An undefined\n
      \  \"priority\" preference is also specified:\n     POST /some-resource HTTP/1.1\n
      \    Host: example.org\n     Content-Type: text/plain\n     Prefer: respond-async,
      wait=10\n     Prefer: priority=5\n     {...}\n   2.  Use lenient processing:\n
      \    POST /some-resource HTTP/1.1\n     Host: example.org\n     Content-Type:
      text/plain\n     Prefer: Lenient\n     {...}\n   3.  Use of an optional, undefined
      parameter on the return=minimal\n   preference:\n     POST /some-resource HTTP/1.1\n
      \    Host: example.org\n     Content-Type: text/plain\n     Prefer: return=minimal;
      foo=\"some parameter\"\n     {...}\n"
    title: 2.1.  Examples
  title: 2.  The Prefer Request Header Field
- contents:
  - "3.  The Preference-Applied Response Header Field\n   The Preference-Applied response
    header MAY be included within a\n   response message as an indication as to which
    Prefer tokens were\n   honored by the server and applied to the processing of
    a request.\n   ABNF:\n     Preference-Applied = \"Preference-Applied\" \":\" 1#applied-pref\n
    \    applied-pref = token [ BWS \"=\" BWS word ]\n   The syntax of the Preference-Applied
    header differs from that of the\n   Prefer header in that parameters are not included.\n
    \  Use of the Preference-Applied header is only necessary when it is not\n   readily
    and obviously apparent that a server applied a given\n   preference and such ambiguity
    might have an impact on the client's\n   handling of the response.  For instance,
    when using either the\n   \"return=representation\" or \"return=minimal\" preferences,
    a client\n   application might not be capable of reliably determining if the\n
    \  preference was (or was not) applied simply by examining the payload\n   of
    the response.  In such a case, the Preference-Applied header field\n   can be
    used.\n   Request:\n     PATCH /my-document HTTP/1.1\n     Host: example.org\n
    \    Content-Type: application/example-patch\n     Prefer: return=representation\n
    \    [{\"op\": \"add\", \"path\": \"/a\", \"value\": 1}]\n   Response:\n     HTTP/1.1
    200 OK\n     Content-Type: application/json\n     Preference-Applied: return=representation\n
    \    Content-Location: /my-document\n     {\"a\": 1}\n"
  title: 3.  The Preference-Applied Response Header Field
- contents:
  - "4.  Preference Definitions\n   The following subsections define an initial set
    of preferences.\n   Additional preferences can be registered for convenience and/or
    to\n   promote reuse by other applications.  This specification establishes\n
    \  an IANA registry of preferences (see Section 5.1).\n"
  - contents:
    - "4.1.  The \"respond-async\" Preference\n   The \"respond-async\" preference
      indicates that the client prefers the\n   server to respond asynchronously to
      a response.  For instance, in the\n   case when the length of time it takes
      to generate a response will\n   exceed some arbitrary threshold established
      by the server, the server\n   can honor the \"respond-async\" preference by
      returning a 202\n   (Accepted) response.\n   ABNF:\n     respond-async = \"respond-async\"\n
      \  The key motivation for the \"respond-async\" preference is to\n   facilitate
      the operation of asynchronous request handling by allowing\n   the client to
      indicate to a server its capability and preference for\n   handling asynchronous
      responses.\n   An example request specifying the \"respond-async\" preference:\n
      \    POST /collection HTTP/1.1\n     Host: example.org\n     Content-Type: text/plain\n
      \    Prefer: respond-async\n     {Data}\n   An example asynchronous response
      using 202 (Accepted):\n     HTTP/1.1 202 Accepted\n     Location: http://example.org/collection/123\n
      \  While the 202 (Accepted) response status is defined by [RFC7231],\n   little
      guidance is given on how and when to use the response code and\n   the process
      for determining the subsequent final result of the\n   operation is left entirely
      undefined.  Therefore, whether and how any\n   given server supports asynchronous
      responses is an implementation-\n   specific detail that is considered to be
      out of the scope of this\n   specification.\n"
    title: 4.1.  The "respond-async" Preference
  - contents:
    - "4.2.  The \"return=representation\" and \"return=minimal\" Preferences\n   The
      \"return=representation\" preference indicates that the client\n   prefers that
      the server include an entity representing the current\n   state of the resource
      in the response to a successful request.\n   The \"return=minimal\" preference,
      on the other hand, indicates that\n   the client wishes the server to return
      only a minimal response to a\n   successful request.  Typically, such responses
      would utilize the 204\n   (No Content) status, but other codes MAY be used as
      appropriate, such\n   as a 200 (OK) status with a zero-length response entity.
      \ The\n   determination of what constitutes an appropriate minimal response
      is\n   solely at the discretion of the server.\n   ABNF:\n     return = \"return\"
      BWS \"=\" BWS (\"representation\" / \"minimal\")\n   When honoring the \"return=representation\"
      preference, the returned\n   representation might not be a representation of
      the effective request\n   URI when the request is affecting another resource.
      \ In such cases,\n   the Content-Location header can be used to identify the
      URI of the\n   returned representation.\n   The \"return=representation\" preference
      is intended to provide a means\n   of optimizing communication between the client
      and server by\n   eliminating the need for a subsequent GET request to retrieve
      the\n   current representation of the resource following a modification.\n   After
      successfully processing a modification request such as a POST\n   or PUT, a
      server can choose to return either an entity describing the\n   status of the
      operation or a representation of the modified resource\n   itself.  While the
      selection of which type of entity to return, if\n   any at all, is solely at
      the discretion of the server, the\n   \"return=representation\" preference --
      along with the \"return=minimal\"\n   preference defined below -- allow the
      server to take the client's\n   preferences into consideration while constructing
      the response.\n   An example request specifying the \"return=representation\"
      preference:\n     PATCH /item/123 HTTP/1.1\n     Host: example.org\n     Content-Type:
      application/example-patch\n     Prefer: return=representation\n     1c1\n     <
      ABCDEFGHIJKLMNOPQRSTUVWXYZ\n     ---\n     > BCDFGHJKLMNPQRSTVWXYZ\n   An example
      response containing the resource representation:\n     HTTP/1.1 200 OK\n     Content-Location:
      http://example.org/item/123\n     Content-Type: text/plain\n     ETag: \"d3b07384d113edec49eaa6238ad5ff00\"\n
      \    BCDFGHJKLMNPQRSTVWXYZ\n   In contrast, the \"return=minimal\" preference
      can reduce the amount of\n   data the server is required to return to the client
      following a\n   request.  This can be particularly useful, for instance, when\n
      \  communicating with limited-bandwidth mobile devices or when the\n   client
      simply does not require any further information about the\n   result of a request
      beyond knowing if it was successfully processed.\n   An example request specifying
      the \"return=minimal\" preference:\n     POST /collection HTTP/1.1\n     Host:
      example.org\n     Content-Type: text/plain\n     Prefer: return=minimal\n     {Data}\n
      \  An example minimal response:\n     HTTP/1.1 201 Created\n     Location: http://example.org/collection/123\n
      \  The \"return=minimal\" and \"return=representation\" preferences are\n   mutually
      exclusive directives.  It is anticipated that there will\n   never be a situation
      where it will make sense for a single request to\n   include both preferences.
      \ Any such requests will likely be the\n   result of a coding error within the
      client.  As such, a request\n   containing both preferences can be treated as
      though neither were\n   specified.\n"
    title: 4.2.  The "return=representation" and "return=minimal" Preferences
  - contents:
    - "4.3.  The \"wait\" Preference\n   The \"wait\" preference can be used to establish
      an upper bound on the\n   length of time, in seconds, the client expects it
      will take the\n   server to process the request once it has been received.  In
      the case\n   that generating a response will take longer than the time specified,\n
      \  the server, or proxy, can choose to utilize an asynchronous\n   processing
      model by returning -- for example -- a 202 (Accepted)\n   response.\n   ABNF:\n
      \    wait = \"wait\" BWS \"=\" BWS delta-seconds\n   It is important to consider
      that HTTP messages spend some time\n   traversing the network and being processed
      by intermediaries.  This\n   increases the length of time that a client will
      wait for a response\n   in addition to the time the server takes to process
      the request.  A\n   client that has strict timing requirements can estimate
      these factors\n   and adjust the wait value accordingly.\n   As with other preferences,
      the \"wait\" preference could be ignored.\n   Clients can abandon requests that
      take longer than they are prepared\n   to wait.\n   For example, a server receiving
      the following request might choose to\n   respond asynchronously if processing
      the request will take longer\n   than 10 seconds:\n     POST /collection HTTP/1.1\n
      \    Host: example.org\n     Content-Type: text/plain\n     Prefer: respond-async,
      wait=10\n     {Data}\n"
    title: 4.3.  The "wait" Preference
  - contents:
    - "4.4.  The \"handling=strict\" and \"handling=lenient\" Processing\n      Preferences\n
      \  The \"handling=strict\" and \"handling=lenient\" preferences indicate, at\n
      \  the server's discretion, how the client wishes the server to handle\n   potential
      error conditions that can arise in the processing of a\n   request.  For instance,
      if the payload of a request contains various\n   minor syntactical or semantic
      errors, but the server is still capable\n   of comprehending and successfully
      processing the request, a decision\n   must be made to either reject the request
      with an appropriate \"4xx\"\n   error response or go ahead with processing.
      \ The \"handling=strict\"\n   preference can be used to indicate that, while
      any particular error\n   may be recoverable, the client would prefer that the
      server reject\n   the request.  The \"handling=lenient\" preference, on the
      other hand,\n   indicates that the client wishes the server to attempt to process
      the\n   request.\n   ABNF:\n     handling = \"handling\" BWS \"=\" BWS (\"strict\"
      / \"lenient\")\n   An example request specifying the \"strict\" preference:\n
      \    POST /collection HTTP/1.1\n     Host: example.org\n     Content-Type: text/plain\n
      \    Prefer: handling=strict\n   The \"handling=strict\" and \"handling=lenient\"
      preferences are mutually\n   exclusive directives.  It is anticipated that there
      will never be a\n   situation where it will make sense for a single request
      to include\n   both preferences.  Any such requests will likely be the result
      of a\n   coding error within the client.  As such, a request containing both\n
      \  preferences can be treated as though neither were specified.\n"
    title: 4.4.  The "handling=strict" and "handling=lenient" Processing
  title: 4.  Preference Definitions
- contents:
  - "5.  IANA Considerations\n   The 'Prefer' and 'Preference-Applied' header fields
    have been added\n   to the \"Permanent Message Header Field Names\" registry defined
    in\n   [RFC3864] (http://www.iana.org/assignments/message-headers).\n      Header
    field name: Prefer\n      Applicable Protocol: HTTP\n      Status: Standard\n
    \     Author: James M Snell <jasnell@gmail.com>\n      Change controller: IETF\n
    \     Specification document: this specification, Section 2\n      Header field
    name: Preference-Applied\n      Applicable Protocol: HTTP\n      Status: Standard\n
    \     Author: James M Snell <jasnell@gmail.com>\n      Change controller: IETF\n
    \     Specification document: this specification, Section 3\n"
  - contents:
    - "5.1.  The Registry of Preferences\n   IANA has created a new registry, \"HTTP
      Preferences\", under the\n   \"Hypertext Transfer Protocol (HTTP) Parameters\"
      registry.  New\n   registrations will use the Specification Required policy
      [RFC5226].\n   The requirements for registered preferences are described in\n
      \  Section 4.\n   Registration requests consist of the completed registration
      template\n   below, typically published in the required specification.  However,\n
      \  to allow for the allocation of values prior to publication, the\n   Designated
      Expert can approve registration based on a separately\n   submitted template
      once they are satisfied that a specification will\n   be published.  Preferences
      can be registered by third parties if the\n   Designated Expert determines that
      an unregistered preference is\n   widely deployed and not likely to be registered
      in a timely manner.\n   The registration template is:\n   o  Preference: (A
      value for the Prefer request header field that\n      conforms to the syntax
      rule given in Section 2)\n   o  Value: (An enumeration or description of possible
      values for the\n      preference token).\n   o  Optional Parameters: (An enumeration
      of optional parameters, and\n      their values, associated with the preference
      token).\n   o  Description:\n   o  Reference:\n   o  Notes: [optional]\n   The
      \"Value\" and \"Optional Parameters\" fields MAY be omitted from the\n   registration
      template if the specific preference token definition\n   does not define either.\n
      \  Registration requests should be sent to the <ietf-http-wg@w3.org>\n   mailing
      list, marked clearly in the subject line (e.g., \"NEW\n   PREFERENCE - example\"
      to register an \"example\" preference).  Within\n   at most 14 days of the request,
      the Designated Expert(s) will either\n   approve or deny the registration request,
      communicating this decision\n   to the review list and IANA.  Denials should
      include an explanation\n   and, if applicable, suggestions as to how to make
      the request\n   successful.\n   The Expert Reviewer shall ensure:\n   o  That
      the requested preference name conforms to the token rule in\n      Section 2
      and that it is not identical to any other registered\n      preference name;\n
      \  o  That any associated value, parameter names, and values conform to\n      the
      relevant ABNF grammar specifications in Section 2;\n   o  That the name is appropriate
      to the specificity of the preference;\n      i.e., if the semantics are highly
      specific to a particular\n      application, the name should reflect that, so
      that more general\n      names remain available for less specific uses.\n   o
      \ That requested preferences do not constrain servers, clients, or\n      any
      intermediaries to any behavior required for successful\n      processing; and\n
      \  o  That the specification document defining the preference includes a\n      proper
      and complete discussion of any security considerations\n      relevant to the
      use of the preference.\n"
    title: 5.1.  The Registry of Preferences
  - contents:
    - "5.2.  Initial Registry Contents\n   The \"HTTP Preferences\" registry's initial
      contents are:\n   o  Preference: respond-async\n   o  Description: Indicates
      that the client prefers that the server\n      respond asynchronously to a request.\n
      \  o  Reference: [this specification], Section 4.1\n   o  Preference: return\n
      \  o  Value: One of either \"minimal\" or \"representation\"\n   o  Description:
      When the value is \"minimal\", it indicates that the\n      client prefers that
      the server return a minimal response to a\n      request.  When the value is
      \"representation\", it indicates that\n      the client prefers that the server
      include a representation of the\n      current state of the resource in response
      to a request.\n   o  Reference: [this specification], Section 4.2\n   o  Preference:
      wait\n   o  Description: Indicates an upper bound to the length of time the\n
      \     client expects it will take for the server to process the request\n      once
      it has been received.\n   o  Reference: [this specification], Section 4.3\n
      \  o  Preference: handling\n   o  Value: One of either \"strict\" or \"lenient\"\n
      \  o  Description: When value is \"strict\", it indicates that the client\n
      \     wishes the server to apply strict validation and error handling to\n      the
      processing of a request.  When the value is \"lenient\", it\n      indicates
      that the client wishes the server to apply lenient\n      validation and error
      handling to the processing of the request.\n   o  Reference: [this specification],
      Section 4.4\n"
    title: 5.2.  Initial Registry Contents
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   Specific preferences requested by a client can
    introduce security\n   considerations and concerns beyond those discussed within
    HTTP/1.1\n   [RFC7230] and its associated specification documents (see [RFC7230]\n
    \  for the list of associated works).  Implementers need to refer to the\n   specifications
    and descriptions of each preference to determine the\n   security considerations
    relevant to each.\n   A server could incur greater costs in attempting to comply
    with a\n   particular preference (for instance, the cost of providing a\n   representation
    in a response that would not ordinarily contain one;\n   or the commitment of
    resources necessary to track state for an\n   asynchronous response).  Unconditional
    compliance from a server could\n   allow the use of preferences for denial of
    service.  A server can\n   ignore an expressed preference to avoid expending resources
    that it\n   does not wish to commit.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n
      \             Procedures for Message Header Fields\", BCP 90, RFC 3864,\n              September
      2004.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing
      an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n
      \             May 2008.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented
      BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January
      2008.\n   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC
      7230, June 2014.\n   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext
      Transfer\n              Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n
      \             June 2014.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC5023]  Gregorio, J. and B. de hOra, \"The
      Atom Publishing\n              Protocol\", RFC 5023, October 2007.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   James M Snell\n   EMail: jasnell@gmail.com\n"
  title: Author's Address
