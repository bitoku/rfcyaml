- contents:
  - "          RTP Payload Format and File Storage Format for the\n  Adaptive Multi-Rate
    (AMR) and Adaptive Multi-Rate Wideband (AMR-WB)\n                              Audio
    Codecs\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies a Real-time Transport Protocol (RTP) payload\n
    \  format to be used for Adaptive Multi-Rate (AMR) and Adaptive Multi-\n   Rate
    Wideband (AMR-WB) encoded speech signals.  The payload format is\n   designed
    to be able to interoperate with existing AMR and AMR-WB\n   transport formats
    on non-IP networks.  In addition, a file format is\n   specified for transport
    of AMR and AMR-WB speech data in storage mode\n   applications such as email.
    \ Two separate media type registrations\n   are included, one for AMR and one
    for AMR-WB, specifying use of both\n   the RTP payload format and the storage
    format.  This document\n   obsoletes RFC 3267.\n Table of Contents\n   1. Introduction
    ....................................................4\n   2. Conventions and Acronyms
    ........................................4\n   3. Background on AMR/AMR-WB and
    Design Principles ..................5\n      3.1. The Adaptive Multi-Rate (AMR)
    Speech Codec .................5\n      3.2. The Adaptive Multi-Rate Wideband (AMR-WB)
    Speech Codec .....6\n      3.3. Multi-Rate Encoding and Mode Adaptation ....................6\n
    \     3.4. Voice Activity Detection and Discontinuous Transmission ....7\n      3.5.
    Support for Multi-Channel Session ..........................7\n      3.6. Unequal
    Bit-Error Detection and Protection .................8\n           3.6.1. Applying
    UEP and UED in an IP Network ...............8\n      3.7. Robustness against Packet
    Loss ............................10\n           3.7.1. Use of Forward Error Correction
    (FEC) ..............10\n           3.7.2. Use of Frame Interleaving ..........................12\n
    \     3.8. Bandwidth-Efficient or Octet-Aligned Mode .................12\n      3.9.
    AMR or AMR-WB Speech over IP Scenarios ....................13\n   4. AMR and AMR-WB
    RTP Payload Formats .............................15\n      4.1. RTP Header Usage
    ..........................................15\n      4.2. Payload Structure .........................................17\n
    \     4.3. Bandwidth-Efficient Mode ..................................17\n           4.3.1.
    The Payload Header .................................17\n           4.3.2. The
    Payload Table of Contents ......................18\n           4.3.3. Speech Data
    ........................................20\n           4.3.4. Algorithm for Forming
    the Payload ..................21\n           4.3.5. Payload Examples ...................................21\n
    \                 4.3.5.1. Single-Channel Payload Carrying a\n                           Single
    Frame ..............................21\n                  4.3.5.2. Single-Channel
    Payload Carrying\n                           Multiple Frames ...........................22\n
    \                 4.3.5.3. Multi-Channel Payload Carrying\n                           Multiple
    Frames ...........................23\n      4.4. Octet-Aligned Mode ........................................25\n
    \          4.4.1. The Payload Header .................................25\n           4.4.2.
    The Payload Table of Contents and Frame CRCs .......26\n                  4.4.2.1.
    Use of Frame CRC for UED over IP ..........28\n           4.4.3. Speech Data ........................................30\n
    \          4.4.4. Methods for Forming the Payload ....................31\n           4.4.5.
    Payload Examples ...................................32\n                  4.4.5.1.
    Basic Single-Channel Payload\n                           Carrying Multiple Frames
    ..................32\n                  4.4.5.2. Two-Channel Payload with CRC,\n
    \                          Interleaving, and Robust Sorting ..........32\n      4.5.
    Implementation Considerations .............................33\n           4.5.1.
    Decoding Validation ................................34\n   5. AMR and AMR-WB Storage
    Format ..................................35\n      5.1. Single-Channel Header
    .....................................35\n      5.2. Multi-Channel Header ......................................36\n
    \     5.3. Speech Frames .............................................37\n   6.
    Congestion Control .............................................38\n   7. Security
    Considerations ........................................38\n      7.1. Confidentiality
    ...........................................39\n      7.2. Authentication and Integrity
    ..............................39\n   8. Payload Format Parameters ......................................39\n
    \     8.1. AMR Media Type Registration ...............................40\n      8.2.
    AMR-WB Media Type Registration ............................44\n      8.3. Mapping
    Media Type Parameters into SDP ....................47\n           8.3.1. Offer-Answer
    Model Considerations ..................48\n           8.3.2. Usage of Declarative
    SDP ...........................50\n           8.3.3. Examples ...........................................51\n
    \  9. IANA Considerations ............................................53\n   10.
    Changes from RFC 3267 .........................................53\n   11. Acknowledgements
    ..............................................55\n   12. References ....................................................55\n
    \     12.1. Normative References .....................................55\n      12.2.
    Informative References ...................................56\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   This document obsoletes RFC 3267 and extends that specification
    with\n   offer/answer rules.  See Section 10 for the changes made to this\n   format
    in relation to RFC 3267.\n   This document specifies the payload format for packetization
    of AMR\n   and AMR-WB encoded speech signals into the Real-time Transport\n   Protocol
    (RTP) [8].  The payload format supports transmission of\n   multiple channels,
    multiple frames per payload, the use of fast codec\n   mode adaptation, robustness
    against packet loss and bit errors, and\n   interoperation with existing AMR and
    AMR-WB transport formats on\n   non-IP networks, as described in Section 3.\n
    \  The payload format itself is specified in Section 4.  A related file\n   format
    is specified in Section 5 for transport of AMR and AMR-WB\n   speech data in storage
    mode applications such as email.  In Section\n   8, two separate media type registrations
    are provided, one for AMR\n   and one for AMR-WB.\n   Even though this RTP payload
    format definition supports the transport\n   of both AMR and AMR-WB speech, it
    is important to remember that AMR\n   and AMR-WB are two different codecs and
    they are always handled as\n   different payload types in RTP.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Acronyms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [5].\n   The following acronyms are used in this document:\n      3GPP   -
    the Third Generation Partnership Project\n      AMR    - Adaptive Multi-Rate (Codec)\n
    \     AMR-WB - Adaptive Multi-Rate Wideband (Codec)\n      CMR    - Codec Mode
    Request\n      CN     - Comfort Noise\n      DTX    - Discontinuous Transmission\n
    \     ETSI   - European Telecommunications Standards Institute\n      FEC    -
    Forward Error Correction\n      SCR    - Source Controlled Rate Operation\n      SID
    \   - Silence Indicator (the frames containing only CN\n               parameters)\n
    \     VAD    - Voice Activity Detection\n      UED    - Unequal Error Detection\n
    \     UEP    - Unequal Error Protection\n   The term \"frame-block\" is used in
    this document to describe the\n   time-synchronized set of speech frames in a
    multi-channel AMR or\n   AMR-WB session.  In particular, in an N-channel session,
    a frame-\n   block will contain N speech frames, one from each of the channels,\n
    \  and all N speech frames represents exactly the same time period.\n   The byte
    order used in this document is network byte order, i.e., the\n   most significant
    byte first.  The bit order is also the most\n   significant bit first.  This is
    presented in all figures as having\n   the most significant bit leftmost on a
    line and with the lowest\n   number.  Some bit fields may wrap over multiple lines
    in which cases\n   the bits on the first line are more significant than the bits
    on the\n   next line.\n"
  title: 2.  Conventions and Acronyms
- contents:
  - "3.  Background on AMR/AMR-WB and Design Principles\n   AMR and AMR-WB were originally
    designed for circuit-switched mobile\n   radio systems.  Due to their flexibility
    and robustness, they are\n   also suitable for other real-time speech communication
    services over\n   packet-switched networks such as the Internet.\n   Because of
    the flexibility of these codecs, the behavior in a\n   particular application
    is controlled by several parameters that\n   select options or specify the acceptable
    values for a variable.\n   These options and variables are described in general
    terms at\n   appropriate points in the text of this specification as parameters
    to\n   be established through out-of-band means.  In Section 8, all of the\n   parameters
    are specified in the form of media subtype registrations\n   for the AMR and AMR-WB
    encodings.  The method used to signal these\n   parameters at session setup or
    to arrange prior agreement of the\n   participants is beyond the scope of this
    document; however, Section\n   8.3 provides a mapping of the parameters into the
    Session Description\n   Protocol (SDP) [11] for those applications that use SDP.\n"
  - contents:
    - "3.1.  The Adaptive Multi-Rate (AMR) Speech Codec\n   The AMR codec was originally
      developed and standardized by the\n   European Telecommunications Standards
      Institute (ETSI) for GSM\n   cellular systems.  It is now chosen by the Third
      Generation\n   Partnership Project (3GPP) as the mandatory codec for third\n
      \  generation (3G) cellular systems [1].\n   The AMR codec is a multi-mode codec
      that supports eight narrow band\n   speech encoding modes with bit rates between
      4.75 and 12.2 kbps.  The\n   sampling frequency used in AMR is 8000 Hz and the
      speech encoding is\n   performed on 20 ms speech frames.  Therefore, each encoded
      AMR speech\n   frame represents 160 samples of the original speech.\n   Among
      the eight AMR encoding modes, three are already separately\n   adopted as standards
      of their own.  Particularly, the 6.7 kbps mode\n   is adopted as PDC-EFR [18],
      the 7.4 kbps mode as IS-641 codec in TDMA\n   [17], and the 12.2 kbps mode as
      GSM-EFR [16].\n"
    title: 3.1.  The Adaptive Multi-Rate (AMR) Speech Codec
  - contents:
    - "3.2.  The Adaptive Multi-Rate Wideband (AMR-WB) Speech Codec\n   The Adaptive
      Multi-Rate Wideband (AMR-WB) speech codec [3] was\n   originally developed by
      3GPP to be used in GSM and 3G cellular\n   systems.\n   Similar to AMR, the
      AMR-WB codec is also a multi-mode speech codec.\n   AMR-WB supports nine wide
      band speech coding modes with respective\n   bit rates ranging from 6.6 to 23.85
      kbps.  The sampling frequency\n   used in AMR-WB is 16000 Hz and the speech
      processing is performed on\n   20 ms frames.  This means that each AMR-WB encoded
      frame represents\n   320 speech samples.\n"
    title: 3.2.  The Adaptive Multi-Rate Wideband (AMR-WB) Speech Codec
  - contents:
    - "3.3.  Multi-Rate Encoding and Mode Adaptation\n   The multi-rate encoding (i.e.,
      multi-mode) capability of AMR and\n   AMR-WB is designed for preserving high
      speech quality under a wide\n   range of transmission conditions.\n   With AMR
      or AMR-WB, mobile radio systems are able to use available\n   bandwidth as effectively
      as possible.  For example, in GSM it is\n   possible to dynamically adjust the
      speech encoding rate during a\n   session so as to continuously adapt to the
      varying transmission\n   conditions by dividing the fixed overall bandwidth
      between speech\n   data and error protective coding.  This enables the best
      possible\n   trade-off between speech compression rate and error tolerance.
      \ To\n   perform mode adaptation, the decoder (speech receiver) needs to\n   signal
      the encoder (speech sender) the new mode it prefers.  This\n   mode change signal
      is called Codec Mode Request or CMR.\n   Since in most sessions speech is sent
      in both directions between the\n   two ends, the mode requests from the decoder
      at one end to the\n   encoder at the other end are piggy-backed over the speech
      frames in\n   the reverse direction.  In other words, there is no out-of-band\n
      \  signaling needed for sending CMRs.\n   Every AMR or AMR-WB codec implementation
      is required to support all\n   the respective speech coding modes defined by
      the codec and must be\n   able to handle mode switching to any of the modes
      at any time.\n   However, some transport systems may impose limitations in the
      number\n   of modes supported and how often the mode can change due to bandwidth\n
      \  limitations or other constraints.  For this reason, the decoder is\n   allowed
      to indicate its acceptance of a particular mode or a subset\n   of the defined
      modes for the session using out-of-band means.\n   For example, the GSM radio
      link can only use a subset of at most four\n   different modes in a given session.
      \ This subset can be any\n   combination of the eight AMR modes for an AMR session
      or any\n   combination of the nine AMR-WB modes for an AMR-WB session.\n   Moreover,
      for better interoperability with GSM through a gateway, the\n   decoder is allowed
      to use out-of-band means to set the minimum number\n   of frames between two
      mode changes and to limit the mode change among\n   neighboring modes only.\n
      \  Section 8 specifies a set of media type parameters that may be used\n   to
      signal these mode adaptation controls at session setup.\n"
    title: 3.3.  Multi-Rate Encoding and Mode Adaptation
  - contents:
    - "3.4.  Voice Activity Detection and Discontinuous Transmission\n   Both codecs
      support voice activity detection (VAD) and generation of\n   comfort noise (CN)
      parameters during silence periods.  Hence, the\n   codecs have the option to
      reduce the number of transmitted bits and\n   packets during silence periods
      to a minimum.  The operation of\n   sending CN parameters at regular intervals
      during silence periods is\n   usually called discontinuous transmission (DTX)
      or source controlled\n   rate (SCR) operation.  The AMR or AMR-WB frames containing
      CN\n   parameters are called Silence Indicator (SID) frames.  See more\n   details
      about VAD and DTX functionality in [9] and [10].\n"
    title: 3.4.  Voice Activity Detection and Discontinuous Transmission
  - contents:
    - "3.5.  Support for Multi-Channel Session\n   Both the RTP payload format and
      the storage format defined in this\n   document support multi-channel audio
      content (e.g., a stereophonic\n   speech session).\n   Although AMR and AMR-WB
      codecs themselves do not support encoding of\n   multi-channel audio content
      into a single bit stream, they can be\n   used to separately encode and decode
      each of the individual channels.\n   To transport (or store) the separately
      encoded multi-channel content,\n   the speech frames for all channels that are
      framed and encoded for\n   the same 20 ms periods are logically collected in
      a frame-block.\n   At the session setup, out-of-band signaling must be used
      to indicate\n   the number of channels in the session, and the order of the
      speech\n   frames from different channels in each frame-block.  When using SDP\n
      \  for signaling, the number of channels is specified in the rtpmap\n   attribute
      and the order of channels carried in each frame-block is\n   implied by the
      number of channels as specified in Section 4.1 in\n   [12].\n"
    title: 3.5.  Support for Multi-Channel Session
  - contents:
    - "3.6.  Unequal Bit-Error Detection and Protection\n   The speech bits encoded
      in each AMR or AMR-WB frame have different\n   perceptual sensitivity to bit
      errors.  This property has been\n   exploited in cellular systems to achieve
      better voice quality by\n   using unequal error protection and detection (UEP
      and UED)\n   mechanisms.\n   The UEP/UED mechanisms focus the protection and
      detection of\n   corrupted bits to the perceptually most sensitive bits in an
      AMR or\n   AMR-WB frame.  In particular, speech bits in an AMR or AMR-WB frame\n
      \  are divided into class A, B, and C, where bits in class A are the\n   most
      sensitive and bits in class C the least sensitive (see Table 1\n   below for
      AMR and [4] for AMR-WB).  An AMR or AMR-WB frame is only\n   declared damaged
      if there are bit errors found in the most sensitive\n   bits, i.e., the class
      A bits.  On the other hand, it is acceptable to\n   have some bit errors in
      the other bits, i.e., class B and C bits.\n                                   Class
      A   Total speech\n                  Index   Mode       bits       bits\n                  ----------------------------------------\n
      \                   0     AMR 4.75   42          95\n                    1     AMR
      5.15   49         103\n                    2     AMR 5.9    55         118\n
      \                   3     AMR 6.7    58         134\n                    4     AMR
      7.4    61         148\n                    5     AMR 7.95   75         159\n
      \                   6     AMR 10.2   65         204\n                    7     AMR
      12.2   81         244\n                    8     AMR SID    39          39\n
      \         Table 1.  The number of class A bits for the AMR codec\n   Moreover,
      a damaged frame is still useful for error concealment at\n   the decoder since
      some of the less sensitive bits can still be used.\n   This approach can improve
      the speech quality compared to discarding\n   the damaged frame.\n"
    - contents:
      - "3.6.1.  Applying UEP and UED in an IP Network\n   To take full advantage
        of the bit-error robustness of the AMR and\n   AMR-WB codec, the RTP payload
        format is designed to facilitate\n   UEP/UED in an IP network.  It should
        be noted however that the\n   utilization of UEP and UED discussed below is
        OPTIONAL.\n   UEP/UED in an IP network can be achieved by detecting bit errors
        in\n   class A bits and tolerating bit errors in class B/C bits of the AMR\n
        \  or AMR-WB frame(s) in each RTP payload.\n   Link-layer protocols exist
        that do not discard packets containing bit\n   errors, e.g., SLIP and some
        wireless links.  With the Internet\n   traffic pattern shifting towards a
        more multimedia-centric one, more\n   link layers of such nature may emerge
        in the future.  With transport\n   layer support for partial checksums (for
        example, those supported by\n   UDP-Lite [19]), bit error tolerant AMR and
        AMR-WB traffic could\n   achieve better performance over these types of links.
        \ The\n   relationship between UDP-Lite's partial checksum at the transport\n
        \  layer and the checksum coverage provided by the link-layer frame is\n   described
        in UDP-Lite specification [19].\n   There are at least two basic approaches
        for carrying AMR and AMR-WB\n   traffic over bit error tolerant IP networks:\n
        \  a) Utilizing a partial checksum to cover the IP, transport protocol\n      (e.g.,
        UDP-Lite), RTP and payload headers, and the most important\n      speech bits
        of the payload.  The IP, UDP and RTP headers need to\n      be protected,
        and it is recommended that at least all class A bits\n      are covered by
        the checksum.\n   b) Utilizing a partial checksum to only cover the IP, transport\n
        \     protocol, RTP and payload headers, but an AMR or AMR-WB frame CRC\n
        \     to cover the class A bits of each speech frame in the RTP payload.\n
        \  In either approach, at least part of the class B/C bits are left\n   without
        error-check and thus bit error tolerance is achieved.\n      Note, it is still
        important that the network designer pays\n      attention to the class B and
        C residual bit error rate.  Though\n      less sensitive to errors than class
        A bits, class B and C bits are\n      not insignificant, and undetected errors
        in these bits cause\n      degradation in speech quality.  An example of residual
        error rates\n      considered acceptable for AMR in the Universal Mobile\n
        \     Telecommunications System (UMTS) can be found in [24] and for\n      AMR-WB
        in [25].\n   The application interface to the UEP/UED transport protocol (e.g.,\n
        \  UDP-Lite) may not provide any control over the link error rate,\n   especially
        in a gateway scenario.  Therefore, it is incumbent upon\n   the designer of
        a node with a link interface of this type to choose a\n   residual bit error
        rate that is low enough to support applications\n   such as AMR encoding when
        transmitting packets of a UEP/UED transport\n   protocol.\n   Approach 1 is
        bit efficient, flexible and simple, but comes with two\n   disadvantages,
        namely, a) bit errors in protected speech bits will\n   cause the payload
        to be discarded, and b) when transporting multiple\n   AMR or AMR-WB frames
        in a RTP payload, there is the possibility that\n   a single bit error in
        protected bits will cause all the frames to be\n   discarded.\n   These disadvantages
        can be avoided, if needed, with some overhead in\n   the form of a frame-wise
        CRC (Approach 2).  In problem a), the CRC\n   makes it possible to detect
        bit errors in class A bits and use the\n   frame for error concealment, which
        gives a small improvement in\n   speech quality.  For b), when transporting
        multiple frames in a\n   payload, the CRCs remove the possibility that a single
        bit error in a\n   class A bit will cause all the frames to be discarded.
        \ Avoiding that\n   improves the speech quality when transporting multiple
        AMR or AMR-WB\n   frames over links subject to bit errors.\n   The choice
        between the above two approaches must be made based on the\n   available bandwidth,
        and the desired tolerance to bit errors.\n   Neither solution is appropriate
        for all cases.  Section 8 defines\n   parameters that may be used at session
        setup to choose between these\n   approaches.\n"
      title: 3.6.1.  Applying UEP and UED in an IP Network
    title: 3.6.  Unequal Bit-Error Detection and Protection
  - contents:
    - "3.7.  Robustness against Packet Loss\n   The payload format supports several
      means, including forward error\n   correction (FEC) and frame interleaving,
      to increase robustness\n   against packet loss.\n"
    - contents:
      - "3.7.1.  Use of Forward Error Correction (FEC)\n   The simple scheme of repetition
        of previously sent data is one way of\n   achieving FEC.  Another possible
        scheme which is more bandwidth\n   efficient is to use payload-external FEC,
        e.g., RFC 2733 [23], which\n   generates extra packets containing repair data.
        \ The whole payload\n   can also be sorted in sensitivity order to support
        external FEC\n   schemes using UEP.  There is also a work in progress on a
        generic\n   version of such a scheme [22] that can be applied to AMR or AMR-WB\n
        \  payload transport.\n   With AMR or AMR-WB, it is possible to use the multi-rate
        capability\n   of the codec to send redundant copies of a frame using either
        the\n   same mode or another mode, e.g., one with lower bandwidth.  We\n   describe
        such a scheme next.\n   This involves the simple retransmission of previously
        transmitted\n   frame-blocks together with the current frame-block(s).  This
        is done\n   by using a sliding window to group the speech frame-blocks to
        send in\n   each payload.  Figure 1 below shows us an example.\n   --+--------+--------+--------+--------+--------+--------+--------+--\n
        \    | f(n-2) | f(n-1) |  f(n)  | f(n+1) | f(n+2) | f(n+3) | f(n+4) |\n   --+--------+--------+--------+--------+--------+--------+--------+--\n
        \    <---- p(n-1) ---->\n              <----- p(n) ----->\n                       <----
        p(n+1) ---->\n                                <---- p(n+2) ---->\n                                         <----
        p(n+3) ---->\n                                                  <---- p(n+4)
        ---->\n              Figure 1: An example of redundant transmission\n   In
        this example each frame-block is retransmitted one time in the\n   following
        RTP payload packet.  Here, f(n-2)..f(n+4) denotes a\n   sequence of speech
        frame-blocks, and p(n-1)..p(n+4) a sequence of\n   payload packets.\n   The
        use of this approach does not require signaling at the session\n   setup.
        \ However, a parameter for providing a maximum delay in\n   transmitting any
        redundant frame is defined in Section 8.  In other\n   words, the speech sender
        can choose to use this scheme without\n   consulting the receiver.  This is
        because a packet containing\n   redundant frames will not look different from
        a packet with only new\n   frames.  The receiver may receive multiple copies
        or versions\n   (encoded with different modes) of a frame for a certain timestamp
        if\n   no packet is lost.  If multiple versions of the same speech frame are\n
        \  received, it is recommended that the mode with the highest rate be\n   used
        by the speech decoder.\n   This redundancy scheme provides the same functionality
        as the one\n   described in RFC 2198, \"RTP Payload for Redundant Audio Data\"
        [27].\n   In most cases the mechanism in this payload format is more efficient\n
        \  and simpler than requiring both endpoints to support RFC 2198 in\n   addition.
        \ There are two situations in which use of RFC 2198 is\n   indicated: if the
        spread in time required between the primary and\n   redundant encodings is
        larger than the duration of 5 frames, the\n   bandwidth overhead of RFC 2198
        will be lower; or, if a non-AMR codec\n   is desired for the redundant encoding,
        the AMR payload format won't\n   be able to carry it.\n   The sender is responsible
        for selecting an appropriate amount of\n   redundancy based on feedback about
        the channel, e.g., in RTCP\n   receiver reports.  A sender should not base
        selection of FEC on the\n   CMR, as this parameter most probably was set based
        on non-IP\n   information, e.g., radio link performance measures.  The sender
        is\n   also responsible for avoiding congestion, which may be exacerbated
        by\n   redundancy (see Section 6 for more details).\n"
      title: 3.7.1.  Use of Forward Error Correction (FEC)
    - contents:
      - "3.7.2.  Use of Frame Interleaving\n   To decrease protocol overhead, the
        payload design allows several\n   speech frame-blocks to be encapsulated into
        a single RTP packet.  One\n   of the drawbacks of such an approach is that
        packet loss can cause\n   loss of several consecutive speech frame-blocks,
        which usually causes\n   clearly audible distortion in the reconstructed speech.
        \ Interleaving\n   of frame-blocks can improve the speech quality in such
        cases by\n   distributing the consecutive losses into a series of single frame-\n
        \  block losses.  However, interleaving and bundling several frame-\n   blocks
        per payload will also increase end-to-end delay and is\n   therefore not appropriate
        for all types of applications.  Streaming\n   applications will most likely
        be able to exploit interleaving to\n   improve speech quality in lossy transmission
        conditions.\n   This payload design supports the use of frame interleaving
        as an\n   option.  For the encoder (speech sender) to use frame interleaving
        in\n   its outbound RTP packets for a given session, the decoder (speech\n
        \  receiver) needs to indicate its support via out-of-band means (see\n   Section
        8).\n"
      title: 3.7.2.  Use of Frame Interleaving
    title: 3.7.  Robustness against Packet Loss
  - contents:
    - "3.8.  Bandwidth-Efficient or Octet-Aligned Mode\n   For a given session, the
      payload format can be either bandwidth\n   efficient or octet aligned, depending
      on the mode of operation that\n   is established for the session via out-of-band
      means.\n   In the octet-aligned format, all the fields in a payload, including\n
      \  payload header, table of contents entries, and speech frames\n   themselves,
      are individually aligned to octet boundaries to make\n   implementations efficient.
      \ In the bandwidth-efficient format, only\n   the full payload is octet aligned,
      so fewer padding bits are added.\n      Note, octet alignment of a field or
      payload means that the last\n      octet is padded with zeroes in the least
      significant bits to fill\n      the octet.  Also note that this padding is separate
      from padding\n      indicated by the P bit in the RTP header.\n   Between the
      two operation modes, only the octet-aligned mode has the\n   capability to use
      the robust sorting, interleaving, and frame CRC to\n   make the speech transport
      more robust to packet loss and bit errors.\n"
    title: 3.8.  Bandwidth-Efficient or Octet-Aligned Mode
  - contents:
    - "3.9.  AMR or AMR-WB Speech over IP Scenarios\n   The primary scenario for this
      payload format is IP end-to-end between\n   two terminals, as shown in Figure
      2.  This payload format is expected\n   to be useful for both conversational
      and streaming services.\n                +----------+                         +----------+\n
      \               |          |    IP/UDP/RTP/AMR or    |          |\n                |
      TERMINAL |<----------------------->| TERMINAL |\n                |          |
      \   IP/UDP/RTP/AMR-WB    |          |\n                +----------+                         +----------+\n
      \                  Figure 2: IP terminal to IP terminal scenario\n   A conversational
      service puts requirements on the payload format.\n   Low delay is one very important
      factor, i.e., few speech frame-blocks\n   per payload packet.  Low overhead
      is also required when the payload\n   format traverses low bandwidth links,
      especially as the frequency of\n   packets will be high.  For low bandwidth
      links, it is also an\n   advantage to support UED, which allows a link provider
      to reduce\n   delay and packet loss, or to reduce the utilization of link\n
      \  resources.\n   A streaming service has less strict real-time requirements
      and\n   therefore can use a larger number of frame-blocks per packet than a\n
      \  conversational service.  This reduces the overhead from IP, UDP, and\n   RTP
      headers.  However, including several frame-blocks per packet\n   makes the transmission
      more vulnerable to packet loss, so\n   interleaving may be used to reduce the
      effect that packet loss will\n   have on speech quality.  A streaming server
      handling a large number\n   of clients also needs a payload format that requires
      as few resources\n   as possible when doing packetization.  The octet-aligned
      and\n   interleaving modes require the least amount of resources, while CRC,\n
      \  robust sorting, and bandwidth-efficient modes have higher demands.\n   Another
      scenario is when AMR or AMR-WB encoded speech is transmitted\n   from a non-IP
      system (e.g., a GSM or 3GPP UMTS network) to an\n   IP/UDP/RTP VoIP terminal,
      and/or vice versa, as depicted in Figure 3.\n          AMR or AMR-WB\n          over\n
      \         I.366.{2,3} or +------+                        +----------+\n          3G
      Iu or       |      |   IP/UDP/RTP/AMR or    |          |\n          <------------->|
      \ GW  |<---------------------->| TERMINAL |\n          GSM Abis       |      |
      \  IP/UDP/RTP/AMR-WB    |          |\n          etc.           +------+                        +----------+\n
      \                            |\n           GSM/              |           IP
      network\n           3GPP UMTS network |\n                     Figure 3: GW to
      VoIP terminal scenario\n   In such a case, it is likely that the AMR or AMR-WB
      frame is\n   packetized in a different way in the non-IP network and will need
      to\n   be re-packetized into RTP at the gateway.  Also, speech frames from\n
      \  the non-IP network may come with some UEP/UED information (e.g., a\n   frame
      quality indicator) that will need to be preserved and forwarded\n   on to the
      decoder along with the speech bits.  This is specified in\n   Section 4.3.2.\n
      \  AMR's capability to do fast mode switching is exploited in some non-\n   IP
      networks to optimize speech quality.  To preserve this\n   functionality in
      scenarios including a gateway to an IP network, a\n   codec mode request (CMR)
      field is needed.  The gateway will be\n   responsible for forwarding the CMR
      between the non-IP and IP parts in\n   both directions.  The IP terminal should
      follow the CMR forwarded by\n   the gateway to optimize speech quality going
      to the non-IP decoder.\n   The mode control algorithm in the gateway must accommodate
      the delay\n   imposed by the IP network on the IP terminal's response to CMR.\n
      \  The IP terminal should not set the CMR (see Section 4.3.1), but the\n   gateway
      can set the CMR value on frames going toward the encoder in\n   the non-IP part
      to optimize speech quality from that encoder to the\n   gateway.  The gateway
      can alternatively set a lower CMR value, if\n   desired, as one means to control
      congestion on the IP network.\n   A third likely scenario is that IP/UDP/RTP
      is used as transport\n   between two non-IP systems, i.e., IP is originated
      and terminated in\n   gateways on both sides of the IP transport, as illustrated
      in Figure\n   4 below.\n   AMR or AMR-WB                                        AMR
      or AMR-WB\n   over                                                 over\n   I.366.{2,3}
      or +------+                     +------+ I.366.{2,3} or\n   3G Iu or       |
      \     |  IP/UDP/RTP/AMR or  |      | 3G Iu or\n   <------------->|  GW  |<------------------->|
      \ GW  |<------------->\n   GSM Abis       |      |  IP/UDP/RTP/AMR-WB  |      |
      GSM Abis\n   etc.           +------+                     +------+ etc.\n                      |
      \                          |\n    GSM/              |          IP network       |
      \ GSM/\n    3GPP UMTS network |                           |  3GPP UMTS network\n
      \                       Figure 4: GW to GW scenario\n   This scenario requires
      the same mechanisms for preserving UED/UEP and\n   CMR information as in the
      single gateway scenario.  In addition, the\n   CMR value may be set in packets
      received by the gateways on the IP\n   network side.  The gateway should forward
      to the non-IP side a CMR\n   value that is the minimum of three values:\n      -
      \ the CMR value it receives on the IP side;\n      -  the CMR value it calculates
      based on its reception quality on\n         the non-IP side; and\n      -  a
      CMR value it may choose for congestion control of\n         transmission on
      the IP side.\n   The details of the control algorithm are left to the implementation.\n"
    title: 3.9.  AMR or AMR-WB Speech over IP Scenarios
  title: 3.  Background on AMR/AMR-WB and Design Principles
- contents:
  - "4.  AMR and AMR-WB RTP Payload Formats\n   The AMR and AMR-WB payload formats
    have identical structure, so they\n   are specified together.  The only differences
    are in the types of\n   codec frames contained in the payload.  The payload format
    consists\n   of the RTP header, payload header, and payload data.\n"
  - contents:
    - "4.1.  RTP Header Usage\n   The format of the RTP header is specified in [8].
      \ This payload\n   format uses the fields of the header in a manner consistent
      with that\n   specification.\n   The RTP timestamp corresponds to the sampling
      instant of the first\n   sample encoded for the first frame-block in the packet.
      \ The\n   timestamp clock frequency is the same as the sampling frequency, so\n
      \  the timestamp unit is in samples.\n   The duration of one speech frame-block
      is 20 ms for both AMR and\n   AMR-WB.  For AMR, the sampling frequency is 8
      kHz, corresponding to\n   160 encoded speech samples per frame from each channel.
      \ For AMR-WB,\n   the sampling frequency is 16 kHz, corresponding to 320 samples
      per\n   frame from each channel.  Thus, the timestamp is increased by 160 for\n
      \  AMR and 320 for AMR-WB for each consecutive frame-block.\n   A packet may
      contain multiple frame-blocks of encoded speech or\n   comfort noise parameters.
      \ If interleaving is employed, the frame-\n   blocks encapsulated into a payload
      are picked according to the\n   interleaving rules as defined in Section 4.4.1.
      \ Otherwise, each\n   packet covers a period of one or more contiguous 20 ms
      frame-block\n   intervals.  In case the data from all the channels for a particular\n
      \  frame-block in the period is missing (for example, at a gateway from\n   some
      other transport format), it is possible to indicate that no data\n   is present
      for that frame-block rather than breaking a multi-frame-\n   block packet into
      two, as explained in Section 4.3.2.\n   To allow for error resiliency through
      redundant transmission, the\n   periods covered by multiple packets MAY overlap
      in time.  A receiver\n   MUST be prepared to receive any speech frame multiple
      times, in exact\n   duplicates, in different AMR rate modes, or with data present
      in one\n   packet and not present in another.  If multiple versions of the same\n
      \  speech frame are received, it is RECOMMENDED that the mode with the\n   highest
      rate be used by the speech decoder.  A given frame MUST NOT\n   be encoded as
      speech in one packet and comfort noise parameters in\n   another.\n   The payload
      length is always made an integral number of octets by\n   padding with zero
      bits if necessary.  If additional padding is\n   required to bring the payload
      length to a larger multiple of octets\n   or for some other purpose, then the
      P bit in the RTP in the header\n   may be set and padding appended as specified
      in [8].\n   The RTP header marker bit (M) SHALL be set to 1 if the first frame-\n
      \  block carried in the packet contains a speech frame which is the\n   first
      in a talkspurt.  For all other packets the marker bit SHALL be\n   set to zero
      (M=0).\n   The assignment of an RTP payload type for this new packet format
      is\n   outside the scope of this document, and will not be specified here.\n
      \  It is expected that the RTP profile under which this payload format\n   is
      being used will assign a payload type for this encoding or specify\n   that
      the payload type is to be bound dynamically.\n"
    title: 4.1.  RTP Header Usage
  - contents:
    - "4.2.  Payload Structure\n   The complete payload consists of a payload header,
      a payload table of\n   contents, and speech data representing one or more speech
      frame-\n   blocks.  The following diagram shows the general payload format\n
      \  layout:\n   +----------------+-------------------+----------------\n   |
      payload header | table of contents | speech data ...\n   +----------------+-------------------+----------------\n
      \  Payloads containing more than one speech frame-block are called\n   compound
      payloads.\n   The following sections describe the variations taken by the payload\n
      \  format depending on whether the AMR session is set up to use the\n   bandwidth-efficient
      mode or octet-aligned mode and any of the\n   OPTIONAL functions for robust
      sorting, interleaving, and frame CRCs.\n   Implementations SHOULD support both
      bandwidth-efficient and octet-\n   aligned operation to increase interoperability.\n"
    title: 4.2.  Payload Structure
  - contents:
    - '4.3.  Bandwidth-Efficient Mode

      '
    - contents:
      - "4.3.1.  The Payload Header\n   In bandwidth-efficient mode, the payload header
        simply consists of a\n   4-bit codec mode request:\n    0 1 2 3\n   +-+-+-+-+\n
        \  |  CMR  |\n   +-+-+-+-+\n   CMR (4 bits): Indicates a codec mode request
        sent to the speech\n      encoder at the site of the receiver of this payload.
        \ The value of\n      the CMR field is set to the frame type index of the
        corresponding\n      speech mode being requested.  The frame type index may
        be 0-7 for\n      AMR, as defined in Table 1a in [2], or 0-8 for AMR-WB, as
        defined\n      in Table 1a in [4].  CMR value 15 indicates that no mode request\n
        \     is present, and other values are for future use.\n   The codec mode
        request received in the CMR field is valid until the\n   next codec mode request
        is received, i.e., a newly received CMR value\n   corresponding to a speech
        mode, or NO_DATA overrides the previously\n   received CMR value corresponding
        to a speech mode or NO_DATA.\n   Therefore, if a terminal continuously wishes
        to receive frames in the\n   same mode X, it needs to set CMR=X for all its
        outbound payloads, and\n   if a terminal has no preference in which mode to
        receive, it SHOULD\n   set CMR=15 in all its outbound payloads.\n   If receiving
        a payload with a CMR value that is not a speech mode or\n   NO_DATA, the CMR
        MUST be ignored by the receiver.\n   In a multi-channel session, the codec
        mode request SHOULD be\n   interpreted by the receiver of the payload as the
        desired encoding\n   mode for all the channels in the session.\n   An IP end-point
        SHOULD NOT set the codec mode request based on packet\n   losses or other
        congestion indications, for several reasons:\n      -  The other end of the
        IP path may be a gateway to a non-IP\n         network (such as a radio link)
        that needs to set the CMR field\n         to optimize performance on that
        network.\n      -  Congestion on the IP network is managed by the IP sender,
        in\n         this case, at the other end of the IP path.  Feedback about\n
        \        congestion SHOULD be provided to that IP sender through RTCP or\n
        \        other means, and then the sender can choose to avoid congestion\n
        \        using the most appropriate mechanism.  That may include\n         adjusting
        the codec mode, but also includes adjusting the level\n         of redundancy
        or number of frames per packet.\n   The encoder SHOULD follow a received codec
        mode request, but MAY\n   change to a lower-numbered mode if it so chooses,
        for example, to\n   control congestion.\n   The CMR field MUST be set to 15
        for packets sent to a multicast\n   group.  The encoder in the speech sender
        SHOULD ignore codec mode\n   requests when sending speech to a multicast session
        but MAY use RTCP\n   feedback information as a hint that a codec mode change
        is needed.\n   The codec mode selection MAY be restricted by a session parameter
        to\n   a subset of the available modes.  If so, the requested mode MUST be\n
        \  among the signalled subset (see Section 8).  If the received CMR\n   value
        is outside the signalled subset of modes, it MUST be ignored.\n"
      title: 4.3.1.  The Payload Header
    - contents:
      - "4.3.2.  The Payload Table of Contents\n   The table of contents (ToC) consists
        of a list of ToC entries, each\n   representing a speech frame.\n   In bandwidth-efficient
        mode, a ToC entry takes the following format:\n    0 1 2 3 4 5\n   +-+-+-+-+-+-+\n
        \  |F|  FT   |Q|\n   +-+-+-+-+-+-+\n   F (1 bit): If set to 1, indicates that
        this frame is followed by\n      another speech frame in this payload; if
        set to 0, indicates that\n      this frame is the last frame in this payload.\n
        \  FT (4 bits): Frame type index, indicating either the AMR or AMR-WB\n      speech
        coding mode or comfort noise (SID) mode of the\n      corresponding frame
        carried in this payload.\n   The value of FT is defined in Table 1a in [2]
        for AMR and in Table 1a\n   in [4] for AMR-WB.  FT=14 (SPEECH_LOST, only available
        for AMR-WB)\n   and FT=15 (NO_DATA) are used to indicate frames that are either
        lost\n   or not being transmitted in this payload, respectively.\n   NO_DATA
        (FT=15) frame could mean either that no data for that frame\n   has been produced
        by the speech encoder or that no data for that\n   frame is transmitted in
        the current payload (i.e., valid data for\n   that frame could be sent in
        either an earlier or later packet).\n   If receiving a ToC entry with a FT
        value in the range 9-14 for AMR or\n   10-13 for AMR-WB, the whole packet
        SHOULD be discarded.  This is to\n   avoid the loss of data synchronization
        in the depacketization\n   process, which can result in a huge degradation
        in speech quality.\n   Note that packets containing only NO_DATA frames SHOULD
        NOT be\n   transmitted in any payload format configuration, except in the
        case\n   of interleaving.  Also, frame-blocks containing only NO_DATA frames\n
        \  at the end of a packet SHOULD NOT be transmitted in any payload\n   format
        configuration, except in the case of interleaving.  The AMR\n   SCR/DTX is
        described in [6] and AMR-WB SCR/DTX in [7].\n   The extra comfort noise frame
        types specified in table 1a in [2]\n   (i.e., GSM-EFR CN, IS-641 CN, and PDC-EFR
        CN) MUST NOT be used in\n   this payload format because the standardized AMR
        codec is only\n   required to implement the general AMR SID frame type and
        not those\n   that are native to the incorporated encodings.\n   Q (1 bit):
        Frame quality indicator.  If set to 0, indicates the\n      corresponding
        frame is severely damaged, and the receiver should\n      set the RX_TYPE
        (see [6]) to either SPEECH_BAD or SID_BAD\n      depending on the frame type
        (FT).\n   The frame quality indicator is included for interoperability with
        the\n   ATM payload format described in ITU-T I.366.2, the UMTS Iu interface\n
        \  [20], as well as other transport formats.  The frame quality\n   indicator
        enables damaged frames to be forwarded to the speech\n   decoder for error
        concealment.  This can improve the speech quality\n   more than dropping the
        damaged frames.  See Section 4.4.2.1 for more\n   details.\n   For multi-channel
        sessions, the ToC entries of all frames from a\n   frame-block are placed
        in the ToC in consecutive order as defined in\n   Section 4.1 in [12].  When
        multiple frame-blocks are present in a\n   packet in bandwidth-efficient mode,
        they will be placed in the packet\n   in order of their creation time.\n   Therefore,
        with N channels and K speech frame-blocks in a packet,\n   there MUST be N*K
        entries in the ToC, and the first N entries will be\n   from the first frame-block,
        the second N entries will be from the\n   second frame-block, and so on.\n
        \  The following figure shows an example of a ToC of three entries in a\n
        \  single-channel session using bandwidth-efficient mode.\n    0                   1\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |1|  FT   |Q|1|  FT   |Q|0|  FT   |Q|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Below is an example of how the ToC entries will appear in the ToC of\n
        \  a packet carrying three consecutive frame-blocks in a session with\n   two
        channels (L and R).\n   +----+----+----+----+----+----+\n   | 1L | 1R | 2L
        | 2R | 3L | 3R |\n   +----+----+----+----+----+----+\n   |<------->|<------->|<------->|\n
        \    Frame-    Frame-    Frame-\n     Block 1   Block 2   Block 3\n"
      title: 4.3.2.  The Payload Table of Contents
    - contents:
      - "4.3.3.  Speech Data\n   Speech data of a payload contains zero or more speech
        frames or\n   comfort noise frames, as described in the ToC of the payload.\n
        \     Note, for ToC entries with FT=14 or 15, there will be no\n      corresponding
        speech frame present in the speech data.\n   Each speech frame represents
        20 ms of speech encoded with the mode\n   indicated in the FT field of the
        corresponding ToC entry.  The length\n   of the speech frame is implicitly
        defined by the mode indicated in\n   the FT field.  The order and numbering
        notation of the bits are as\n   specified for Interface Format 1 (IF1) in
        [2] for AMR and [4] for\n   AMR-WB.  As specified there, the bits of speech
        frames have been\n   rearranged in order of decreasing sensitivity, while
        the bits of\n   comfort noise frames are in the order produced by the encoder.
        \ The\n   resulting bit sequence for a frame of length K bits is denoted d(0),\n
        \  d(1), ..., d(K-1).\n"
      title: 4.3.3.  Speech Data
    - contents:
      - "4.3.4.  Algorithm for Forming the Payload\n   The complete RTP payload in
        bandwidth-efficient mode is formed by\n   packing bits from the payload header,
        table of contents, and speech\n   frames in order (as defined by their corresponding
        ToC entries in the\n   ToC list), and to bring the payload to octet alignment,
        0 to 7\n   padding bits.  Padding bits MUST be set to zero and MUST be ignored\n
        \  on reception.  They are packed contiguously into octets beginning\n   with
        the most significant bits of the fields and the octets.\n   To be precise,
        the four-bit payload header is packed into the first\n   octet of the payload
        with bit 0 of the payload header in the most\n   significant bit of the octet.
        \ The four most significant bits\n   (numbered 0-3) of the first ToC entry
        are packed into the least\n   significant bits of the octet, ending with bit
        3 in the least\n   significant bit.  Packing continues in the second octet
        with bit 4 of\n   the first ToC entry in the most significant bit of the octet.
        \ If\n   more than one frame is contained in the payload, then packing\n   continues
        with the second and successive ToC entries.  Bit 0 of the\n   first data frame
        follows immediately after the last ToC bit,\n   proceeding through all the
        bits of the frame in numerical order.\n   Bits from any successive frames
        follow contiguously in numerical\n   order for each frame and in consecutive
        order of the frames.\n   If speech data is missing for one or more speech
        frame within the\n   sequence, because of, for example, DTX, a ToC entry with
        FT set to\n   NO_DATA SHALL be included in the ToC for each of the missing
        frames,\n   but no data bits are included in the payload for the missing frame\n
        \  (see Section 4.3.5.2 for an example).\n"
      title: 4.3.4.  Algorithm for Forming the Payload
    - contents:
      - '4.3.5.  Payload Examples

        '
      - contents:
        - "4.3.5.1.  Single-Channel Payload Carrying a Single Frame\n   The following
          diagram shows a bandwidth-efficient AMR payload from a\n   single-channel
          session carrying a single speech frame-block.\n   In the payload, no specific
          mode is requested (CMR=15), the speech\n   frame is not damaged at the IP
          origin (Q=1), and the coding mode is\n   AMR 7.4 kbps (FT=4).  The encoded
          speech bits, d(0) to d(147), are\n   arranged in descending sensitivity
          order according to [2].  Finally,\n   two padding bits (P) are added to
          the end as padding to make the\n   payload octet aligned.\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | CMR=15|0| FT=4  |1|d(0)                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                     d(147)|P|P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
        title: 4.3.5.1.  Single-Channel Payload Carrying a Single Frame
      - contents:
        - "4.3.5.2.  Single-Channel Payload Carrying Multiple Frames\n   The following
          diagram shows a single-channel, bandwidth-efficient\n   compound AMR-WB
          payload that contains four frames, of which one has\n   no speech data.
          \ The first frame is a speech frame at 6.6 kbps mode\n   (FT=0) that is
          composed of speech bits d(0) to d(131).  The second\n   frame is an AMR-WB
          SID frame (FT=9), consisting of bits g(0) to\n   g(39).  The third frame
          is a NO_DATA frame and does not carry any\n   speech information, it is
          represented in the payload by its ToC\n   entry.  The fourth frame in the
          payload is a speech frame at 8.85\n   kbps mode (FT=1), it consists of speech
          bits h(0) to h(176).\n   As shown below, the payload carries a mode request
          for the encoder on\n   the receiver's side to change its future coding mode
          to AMR-WB 8.85\n   kbps (CMR=1).  None of the frames are damaged at IP origin
          (Q=1).\n   The encoded speech and SID bits, d(0) to d(131), g(0) to g(39),
          and\n   h(0) to h(176), are arranged in the payload in descending sensitivity\n
          \  order according to [4]. (Note, no speech bits are present for the\n   third
          frame.)   Finally, seven zero bits are padded to the end to\n   make the
          payload octet aligned.\n    0                   1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | CMR=1 |1| FT=0  |1|1| FT=9  |1|1| FT=15 |1|0| FT=1  |1|d(0)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                         d(131)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |g(0)                                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |          g(39)|h(0)                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                           h(176)|P|P|P|P|P|P|P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
        title: 4.3.5.2.  Single-Channel Payload Carrying Multiple Frames
      - contents:
        - "4.3.5.3.  Multi-Channel Payload Carrying Multiple Frames\n   The following
          diagram shows a two-channel payload carrying 3 frame-\n   blocks, i.e.,
          the payload will contain 6 speech frames.\n   In the payload, all speech
          frames contain the same mode 7.4 kbps\n   (FT=4) and are not damaged at
          IP origin.  The CMR is set to 15, i.e.,\n   no specific mode is requested.
          \ The two channels are defined as left\n   (L) and right (R) in that order.
          \ The encoded speech bits is\n   designated dXY(0).. dXY(K-1), where X =
          block number, Y = channel,\n   and K is the number of speech bits for that
          mode.  Exemplifying this,\n   for frame-block 1 of the left channel, the
          encoded bits are\n   designated as d1L(0) to d1L(147).\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | CMR=15|1|1L FT=4|1|1|1R FT=4|1|1|2L FT=4|1|1|2R FT=4|1|1|3L FT|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |4|1|0|3R FT=4|1|d1L(0)                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                               d1L(147)|d1R(0) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                       d1R(147)|d2L(0)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |d2L(147|d2R(0)                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                       d2R(147)|d3L(0)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |               d3L(147)|d3R(0)                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                                                       d3R(147)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
        title: 4.3.5.3.  Multi-Channel Payload Carrying Multiple Frames
      title: 4.3.5.  Payload Examples
    title: 4.3.  Bandwidth-Efficient Mode
  - contents:
    - '4.4.  Octet-Aligned Mode

      '
    - contents:
      - "4.4.1.  The Payload Header\n   In octet-aligned mode, the payload header
        consists of a 4-bit CMR, 4\n   reserved bits, and optionally, an 8-bit interleaving
        header, as shown\n   below:\n    0                   1\n    0 1 2 3 4 5 6
        7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+- - - - - - - -\n   |  CMR  |R|R|R|R|
        \ ILL  |  ILP  |\n   +-+-+-+-+-+-+-+-+- - - - - - - -\n   CMR (4 bits): same
        as defined in Section 4.3.1.\n   R: is a reserved bit that MUST be set to
        zero.  All R bits MUST be\n      ignored by the receiver.\n   ILL (4 bits,
        unsigned integer): This is an OPTIONAL field that is\n      present only if
        interleaving is signalled out-of-band for the\n      session.  ILL=L indicates
        to the receiver that the interleaving\n      length is L+1, in number of frame-blocks.\n
        \  ILP (4 bits, unsigned integer): This is an OPTIONAL field that is\n      present
        only if interleaving is signalled.  ILP MUST take a value\n      between 0
        and ILL, inclusive, indicating the interleaving index\n      for frame-blocks
        in this payload in the interleaving group.  If\n      the value of ILP is
        found greater than ILL, the payload SHOULD be\n      discarded.\n   ILL and
        ILP fields MUST be present in each packet in a session if\n   interleaving
        is signalled for the session.  Interleaving MUST be\n   performed on a frame-block
        basis (i.e., NOT on a frame basis) in a\n   multi-channel session.\n   The
        following example illustrates the arrangement of speech frame-\n   blocks
        in an interleaving group during an interleaving session.  Here\n   we assume
        ILL=L for the interleaving group that starts at speech\n   frame-block n.
        \ We also assume that the first payload packet of the\n   interleaving group
        is s, and the number of speech frame-blocks\n   carried in each payload is
        N.  Then we will have:\n   Payload s (the first packet of this interleaving
        group):\n      ILL=L, ILP=0,\n      Carry frame-blocks: n, n+(L+1), n+2*(L+1),
        ..., n+(N-1)*(L+1)\n   Payload s+1 (the second packet of this interleaving
        group):\n      ILL=L, ILP=1,\n      frame-blocks: n+1, n+1+(L+1), n+1+2*(L+1),
        ..., n+1+(N-1)*(L+1)\n      ...\n   Payload s+L (the last packet of this interleaving
        group):\n      ILL=L, ILP=L,\n      frame-blocks: n+L, n+L+(L+1), n+L+2*(L+1),
        ..., n+L+(N-1)*(L+1)\n   The next interleaving group will start at frame-block
        n+N*(L+1).\n   There will be no interleaving effect unless the number of frame-\n
        \  blocks per packet (N) is at least 2.  Moreover, the number of frame-\n
        \  blocks per payload (N) and the value of ILL MUST NOT be changed\n   inside
        an interleaving group.  In other words, all payloads in an\n   interleaving
        group MUST have the same ILL and MUST contain the same\n   number of speech
        frame-blocks.\n   The sender of the payload MUST only apply interleaving if
        the\n   receiver has signalled its use through out-of-band means.  Since\n
        \  interleaving will increase buffering requirements at the receiver,\n   the
        receiver uses media type parameter \"interleaving=I\" to set the\n   maximum
        number of frame-blocks allowed in an interleaving group to I.\n   When performing
        interleaving, the sender MUST use a proper number of\n   frame-blocks per
        payload (N) and ILL so that the resulting size of an\n   interleaving group
        is less or equal to I, that is, N*(L+1)<=I.\n"
      title: 4.4.1.  The Payload Header
    - contents:
      - "4.4.2.  The Payload Table of Contents and Frame CRCs\n   The table of contents
        (ToC) in octet-aligned mode consists of a list\n   of ToC entries where each
        entry corresponds to a speech frame carried\n   in the payload and, optionally,
        a list of speech frame CRCs.  That\n   is, the ToC is as follows:\n   +---------------------+\n
        \  | list of ToC entries |\n   +---------------------+\n   | list of frame
        CRCs  | (optional)\n    - - - - - - - - - - -\n      Note, for ToC entries
        with FT=14 or 15, there will be no\n      corresponding speech frame or frame
        CRC present in the payload.\n   The list of ToC entries is organized in the
        same way as described for\n   bandwidth-efficient mode in 4.3.2, with the
        following exception:\n   when interleaving is used, the frame-blocks in the
        ToC will almost\n   never be placed consecutively in time.  Instead, the presence
        and\n   order of the frame-blocks in a packet will follow the pattern\n   described
        in 4.4.1.\n   The following example shows the ToC of three consecutive packets,\n
        \  each carrying three frame-blocks, in an interleaved two-channel\n   session.
        \ Here, the two channels are left (L) and right (R) with L\n   coming before
        R, and the interleaving length is 3 (i.e., ILL=2).\n   This results in the
        interleaving group size of 9 frame-blocks.\n   Packet #1\n   ---------\n   ILL=2,
        ILP=0:\n   +----+----+----+----+----+----+\n   | 1L | 1R | 4L | 4R | 7L |
        7R |\n   +----+----+----+----+----+----+\n   |<------->|<------->|<------->|\n
        \    Frame-    Frame-    Frame-\n     Block 1   Block 4   Block 7\n   Packet
        #2\n   ---------\n   ILL=2, ILP=1:\n   +----+----+----+----+----+----+\n   |
        2L | 2R | 5L | 5R | 8L | 8R |\n   +----+----+----+----+----+----+\n   |<------->|<------->|<------->|\n
        \    Frame-    Frame-    Frame-\n     Block 2   Block 5   Block 8\n   Packet
        #3\n   ---------\n   ILL=2, ILP=2:\n   +----+----+----+----+----+----+\n   |
        3L | 3R | 6L | 6R | 9L | 9R |\n   +----+----+----+----+----+----+\n   |<------->|<------->|<------->|\n
        \    Frame-    Frame-    Frame-\n     Block 3   Block 6   Block 9\n   A ToC
        entry takes the following format in octet-aligned mode:\n    0 1 2 3 4 5 6
        7\n   +-+-+-+-+-+-+-+-+\n   |F|  FT   |Q|P|P|\n   +-+-+-+-+-+-+-+-+\n   F
        (1 bit): see definition in Section 4.3.2.\n   FT (4 bits, unsigned integer):
        see definition in Section 4.3.2.\n   Q (1 bit): see definition in Section
        4.3.2.\n   P bits: padding bits, MUST be set to zero, and MUST be ignored
        on\n           reception.\n   The list of CRCs is OPTIONAL.  It only exists
        if the use of CRC is\n   signalled out-of-band for the session.  When present,
        each CRC in the\n   list is 8 bits long and corresponds to a speech frame
        (NOT a frame-\n   block) carried in the payload.  Calculation and use of the
        CRC is\n   specified in the next section.\n"
      - contents:
        - "4.4.2.1.  Use of Frame CRC for UED over IP\n   The general concept of UED/UEP
          over IP is discussed in Section 3.6.\n   This section provides more details
          on how to use the frame CRC in the\n   octet-aligned payload header together
          with a partial transport layer\n   checksum to achieve UED.\n   To achieve
          UED, one SHOULD use a transport layer checksum (for\n   example, the one
          defined in UDP-Lite [19]) to protect the IP,\n   transport protocol (e.g.,
          UDP-Lite), and RTP headers, as well as the\n   payload header and the table
          of contents in the payload.  The frame\n   CRC, when used, MUST be calculated
          only over all class A bits in the\n   AMR or AMR-WB frame.  Class B and
          C bits in the AMR or AMR-WB frame\n   MUST NOT be included in the CRC calculation
          and SHOULD NOT be covered\n   by the transport checksum.\n      Note, the
          number of class A bits for various coding modes in AMR\n      codec is specified
          as informative in [2] and is therefore copied\n      into Table 1 in Section
          3.6 to make it normative for this payload\n      format.  The number of
          class A bits for various coding modes in\n      AMR-WB codec is specified
          as normative in Table 2 in [4], and the\n      SID frame (FT=9) has 40 class
          A bits.  These definitions of class\n      A bits MUST be used for this
          payload format.\n   If the transport layer checksum or link layer checksum
          detects any\n   errors within the protected (sensitive) part, it is assumed
          that the\n   complete packet will be discarded as defined by UDP-Lite [19].\n
          \  The receiver of the payload SHOULD examine the data integrity of the\n
          \  received class A bits by re-calculating the CRC over the received\n   class
          A bits and comparing the result to the value found in the\n   received payload
          header.  If the two values mismatch, the receiver\n   SHALL consider the
          class A bits in the receiver frame damaged and\n   MUST clear the Q flag
          of the frame (i.e., set it to 0).  This will\n   subsequently cause the
          frame to be marked as SPEECH_BAD, if the FT of\n   the frame is 0..7 for
          AMR or 0..8 for AMR-WB, or SID_BAD if the FT of\n   the frame is 8 for AMR
          or 9 for AMR-WB, before it is passed to the\n   speech decoder.  See [6]
          and [7] more details.\n   The following example shows an octet-aligned ToC
          with a CRC list for\n   a payload containing 3 speech frames from a single-channel
          session\n   (assuming none of the FTs is equal to 14 or 15):\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |1|  FT#1 |Q|P|P|1|  FT#2 |Q|P|P|0|  FT#3 |Q|P|P|     CRC#1     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |     CRC#2     |     CRC#3     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Each of the CRCs takes 8 bits\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n
          \  | c0| c1| c2| c3| c4| c5| c6| c7|\n   +---+---+---+---+---+---+---+---+\n
          \  (MSB)                       (LSB)\n   and is calculated by the cyclic
          generator polynomial,\n     C(x) = 1 + x^2 + x^3 + x^4 + x^8\n   where ^
          is the exponentiation operator.\n   In binary form, the polynomial appears
          as follows: 101110001\n   (MSB..LSB).\n   The actual calculation of the
          CRC is made as follows:  First, an\n   8-bit CRC register is reset to zero:
          00000000.  For each bit over\n   which the CRC shall be calculated, an XOR
          operation is made between\n   the rightmost (LSB) bit of the CRC register
          and the bit.  The CRC\n   register is then right-shifted one step (each
          bit's significance is\n   reduced by one), inputting a \"0\" as the leftmost
          bit (MSB).  If the\n   result of the XOR operation mentioned above is a
          \"1\", then \"10111000\"\n   is bit-wise XOR-ed into the CRC register.  This
          operation is repeated\n   for each bit that the CRC should cover.  In this
          case, the first bit\n   would be d(0) for the speech frame for which the
          CRC should cover.\n   When the last bit (e.g., d(54) for AMR 5.9 according
          to Table 1 in\n   Section 3.6) has been used in this CRC calculation, the
          contents in\n   CRC register should simply be copied to the corresponding
          field in\n   the list of CRCs.\n   Fast calculation of the CRC on a general-purpose
          CPU is possible\n   using a table-driven algorithm.\n"
        title: 4.4.2.1.  Use of Frame CRC for UED over IP
      title: 4.4.2.  The Payload Table of Contents and Frame CRCs
    - contents:
      - "4.4.3.  Speech Data\n   In octet-aligned mode, speech data is carried in
        a similar way to\n   that in the bandwidth-efficient mode as discussed in
        Section 4.3.3,\n   with the following exceptions:\n      -  The last octet
        of each speech frame MUST be padded with zero\n         bits at the end if
        all bits in the octet are not used.  The\n         padding bits MUST be ignored
        on reception.  In other words,\n         each speech frame MUST be octet-aligned.\n
        \     -  When multiple speech frames are present in the speech data\n         (i.e.,
        compound payload), the speech frames are arranged either\n         one whole
        frame after another as usual, or with the octets of\n         all frames interleaved
        together at the octet level, depending\n         on the media type parameters
        negotiated for the payload type.\n         Since the bits within each frame
        are ordered with the most\n         error-sensitive bits first, interleaving
        the octets collects\n         those sensitive bits from all frames to be nearer
        the beginning\n         of the packet.  This is called \"robust sorting order\"
        which\n         allows the application of UED (such as UDP-Lite [19]) or UEP\n
        \        (such as the ULP [22]) mechanisms to the payload data.  The\n         details
        of assembling the payload are given in the next\n         section.\n   The
        use of robust sorting order for a payload type MUST be agreed via\n   out-of-band
        means.  Section 8 specifies a media type parameter for\n   this purpose.\n
        \  Note, robust sorting order MUST only be performed on the frame level\n
        \  and thus is independent of interleaving, which is at the frame-block\n
        \  level, as described in Section 4.4.1. In other words, robust sorting\n
        \  can be applied to either non-interleaved or interleaved payload\n   types.\n"
      title: 4.4.3.  Speech Data
    - contents:
      - "4.4.4.  Methods for Forming the Payload\n   Two different packetization methods,
        namely, normal order and robust\n   sorting order, exist for forming a payload
        in octet-aligned mode.  In\n   both cases, the payload header and table of
        contents are packed into\n   the payload the same way; the difference is in
        the packing of the\n   speech frames.\n   The payload begins with the payload
        header of one octet, or two\n   octets if frame interleaving is selected.
        \ The payload header is\n   followed by the table of contents consisting of
        a list of one-octet\n   ToC entries.  If frame CRCs are to be included, they
        follow the table\n   of contents with one 8-bit CRC filling each octet.  Note
        that if a\n   given frame has a ToC entry with FT=14 or 15, there will be
        no CRC\n   present.\n   The speech data follows the table of contents, or
        the CRCs if\n   present.  For packetization in the normal order, all of the
        octets\n   comprising a speech frame are appended to the payload as a unit.
        \ The\n   speech frames are packed in the same order as their corresponding
        ToC\n   entries are arranged in the ToC list, with the exception that if a\n
        \  given frame has a ToC entry with FT=14 or 15, there will be no data\n   octets
        present for that frame.\n   For packetization in robust sorting order, the
        octets of all speech\n   frames are interleaved together at the octet level.
        \ That is, the\n   data portion of the payload begins with the first octet
        of the first\n   frame, followed by the first octet of the second frame, then
        the\n   first octet of the third frame, and so on.  After the first octet
        of\n   the last frame has been appended, the cycle repeats with the second\n
        \  octet of each frame.  The process continues for as many octets as are\n
        \  present in the longest frame.  If the frames are not all the same\n   octet
        length, a shorter frame is skipped once all octets in it have\n   been appended.
        \ The order of the frames in the cycle will be\n   sequential if frame interleaving
        is not in use, or according to the\n   interleave pattern specified in the
        payload header if frame\n   interleaving is in use.  Note that if a given
        frame has a ToC entry\n   with FT=14 or 15, there will be no data octets present
        for that\n   frame, so it is skipped in the robust sorting cycle.\n   The
        UED and/or UEP is RECOMMENDED to cover at least the RTP header,\n   payload
        header, table of contents, and class A bits of a sorted\n   payload.  Exactly
        how many octets need to be covered depends on the\n   network and application.
        \ If CRCs are used together with robust\n   sorting, only the RTP header,
        the payload header, and the ToC SHOULD\n   be covered by UED/UEP.  The means
        for communicating the number of\n   octets to be covered to other layers performing
        UED/UEP is beyond the\n   scope of this specification.\n"
      title: 4.4.4.  Methods for Forming the Payload
    - contents:
      - '4.4.5.  Payload Examples

        '
      - contents:
        - "4.4.5.1.  Basic Single-Channel Payload Carrying Multiple Frames\n   The
          following diagram shows an octet aligned payload from a single\n   channel
          payload type that carries two AMR frames of 7.95 kbps coding\n   mode (FT=5).
          \ In the payload, a codec mode request is sent (CMR=6),\n   requesting the
          encoder at the receiver's side to use AMR 10.2 kbps\n   coding mode.  No
          frame CRC, interleaving, or robust sorting is in\n   use.\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | CMR=6 |R|R|R|R|1|FT#1=5 |Q|P|P|0|FT#2=5 |Q|P|P|   f1(0..7)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |   f1(8..15)   |  f1(16..23)   |  ....                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                         ...   |f1(152..158) |P|   f2(0..7)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |   f2(8..15)   |  f2(16..23)   |  ....                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                         ...   |f2(152..158) |P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Note, in the above example, the last octet in both speech frames is\n
          \  padded with one zero bit to make it octet-aligned.\n"
        title: 4.4.5.1.  Basic Single-Channel Payload Carrying Multiple Frames
      - contents:
        - "4.4.5.2.  Two-Channel Payload with CRC, Interleaving, and Robust Sorting\n
          \  This example shows an octet aligned payload from a two-channel\n   payload
          type.  Two frame-blocks, each containing two speech frames of\n   7.95 kbps
          coding mode (FT=5), are carried in this payload.\n   The two channels are
          left (L) and right (R) with L coming before R.\n   In the payload, a codec
          mode request is also sent (CMR=6), requesting\n   the encoder at the receiver's
          side to use AMR 10.2 kbps coding mode.\n   Moreover, frame CRC, robust sorting,
          and frame-block interleaving are\n   all enabled for the payload type.  The
          interleaving length is 2\n   (ILL=1), and this payload is the first one
          in an interleaving group\n   (ILP=0).\n   The first two frames in the payload
          are the L and R channel speech\n   frames of frame-block #1, consisting
          of bits f1L(0..158) and\n   f1R(0..158), respectively.  The next two frames
          are the L and R\n   channel frames of frame-block #3, consisting of bits
          f3L(0..158) and\n   f3R(0..158), respectively, due to interleaving.  For
          each of the four\n   speech frames, a CRC is calculated as CRC1L(0..7),
          CRC1R(0..7),\n   CRC3L(0..7), and CRC3R(0..7), respectively.  Finally, the
          payload is\n   robust sorted.\n    0                   1                   2
          \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | CMR=6 |R|R|R|R| ILL=1 | ILP=0 |1|FT#1L=5|Q|P|P|1|FT#1R=5|Q|P|P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |1|FT#3L=5|Q|P|P|0|FT#3R=5|Q|P|P|      CRC1L    |      CRC1R    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |      CRC3L    |      CRC3R    |   f1L(0..7)   |   f1R(0..7)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |   f3L(0..7)   |   f3R(0..7)   |  f1L(8..15)   |  f1R(8..15)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |  f3L(8..15)   |  f3R(8..15)   |  f1L(16..23)  |  f1R(16..23)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  : ...                                                           :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | f3L(144..151) | f3R(144..151) |f1L(152..158)|P|f1R(152..158)|P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |f3L(152..158)|P|f3R(152..158)|P|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Note, in the above example, the last octet in all four speech frames\n
          \  is padded with one zero bit to make it octet-aligned.\n"
        title: 4.4.5.2.  Two-Channel Payload with CRC, Interleaving, and Robust Sorting
      title: 4.4.5.  Payload Examples
    title: 4.4.  Octet-Aligned Mode
  - contents:
    - "4.5.  Implementation Considerations\n   An application implementing this payload
      format MUST understand all\n   the payload parameters in the out-of-band signaling
      used.  For\n   example, if an application uses SDP, all the SDP and media type\n
      \  parameters in this document MUST be understood.  This requirement\n   ensures
      that an implementation always can decide if it is capable or\n   not of communicating.\n
      \  No operating mode of the payload format is mandatory to implement.\n   The
      requirements of the application using the payload format should\n   be used
      to determine what to implement.  To achieve basic\n   interoperability, an implementation
      SHOULD at least implement both\n   bandwidth-efficient and octet-aligned modes
      for a single audio\n   channel.  The other operating modes: interleaving, robust
      sorting,\n   and frame-wise CRC (in both single and multi-channel) are OPTIONAL
      to\n   implement.\n   The mode-change-period, mode-change-capability, and mode-change-\n
      \  neighbor parameters are intended for signaling with GSM endpoints.\n   When
      interoperability with GSM is desired, encoders SHOULD only\n   perform codec
      mode changes to neighboring modes and in integer\n   multiples of 40 ms (two
      frame-blocks), but decoders SHOULD accept\n   codec mode changes at any time,
      i.e., for every frame-block.  The\n   encoder may arbitrarily select the initial
      phase (odd or even frame-\n   block) where codec mode changes are performed,
      but then SHOULD stick\n   to that phase as far as possible.  However, in rare
      cases, handovers\n   or other events (e.g., call forwarding) may change this
      phase and may\n   also cause mode changes to non-neighboring modes.  The decoder
      SHALL\n   therefore be prepared to accept changes also in the other phase and\n
      \  to other modes.  Section 8 specifies the usage of the parameters\n   mode-change-period
      and mode-change-capability to indicate the desired\n   behavior in applications.\n
      \  See 3GPP TS 26.103 [28] for preferred AMR and AMR-WB configurations\n   for
      operation in GSM and 3GPP UMTS networks.  In gateway scenarios,\n   encoders
      can be requested through the \"mode-set\" parameter to use a\n   limited mode-set
      that is supported by the link beyond the gateway.\n   Further, to avoid congestion
      on that link, the encoder SHOULD limit\n   the initial codec mode for a session
      to a lower mode, until at least\n   one frame-block is received with rate control
      information.\n"
    - contents:
      - "4.5.1.  Decoding Validation\n   When processing a received payload packet,
        if the receiver finds that\n   the calculated payload length, based on the
        information for the\n   payload type and the values found in the payload header
        fields, does\n   not match the size of the received packet, the receiver SHOULD\n
        \  discard the packet.  This is because decoding a packet that has\n   errors
        in its length field could severely degrade the speech quality.\n"
      title: 4.5.1.  Decoding Validation
    title: 4.5.  Implementation Considerations
  title: 4.  AMR and AMR-WB RTP Payload Formats
- contents:
  - "5.  AMR and AMR-WB Storage Format\n   The storage format is used for storing
    AMR or AMR-WB speech frames in\n   a file or as an email attachment.  Multiple
    channel content is\n   supported.\n   In general, an AMR or AMR-WB file has the
    following structure:\n   +------------------+\n   | Header           |\n   +------------------+\n
    \  | Speech frame 1   |\n   +------------------+\n   : ...              :\n   +------------------+\n
    \  | Speech frame n   |\n   +------------------+\n   Note, to preserve interoperability
    with already deployed\n   implementations, single-channel content uses a file
    header format\n   different from that of multi-channel content.\n   There also
    exists another storage format for AMR and AMR-WB that is\n   suitable for applications
    with more advanced demands on the storage\n   format, like random access or synchronization
    with video.  This\n   format is the 3GPP-specified ISO-based multimedia file format
    3GP\n   [31].  Its media type is specified by RFC 3839 [32].\n"
  - contents:
    - "5.1.  Single-Channel Header\n   A single-channel AMR or AMR-WB file header
      contains only a magic\n   number.  Different magic numbers are defined to distinguish
      AMR from\n   AMR-WB.\n   The magic number for single-channel AMR files MUST
      consist of ASCII\n   character string:\n      \"#!AMR\\n\"\n      (or 0x2321414d520a
      in hexadecimal).\n   The magic number for single-channel AMR-WB files MUST consist
      of\n   ASCII character string:\n      \"#!AMR-WB\\n\"\n      (or 0x2321414d522d57420a
      in hexadecimal).\n   Note, the \"\\n\" is an important part of the magic numbers
      and MUST be\n   included in the comparison, since, otherwise, the single-channel\n
      \  magic numbers above will become indistinguishable from those of the\n   multi-channel
      files defined in the next section.\n"
    title: 5.1.  Single-Channel Header
  - contents:
    - "5.2.  Multi-Channel Header\n   The multi-channel header consists of a magic
      number followed by a\n   32-bit channel description field, giving the multi-channel
      header the\n   following structure:\n   +------------------+\n   | magic number
      \    |\n   +------------------+\n   | chan-desc field  |\n   +------------------+\n
      \  The magic number for multi-channel AMR files MUST consist of the\n   ASCII
      character string:\n      \"#!AMR_MC1.0\\n\"\n      (or 0x2321414d525F4D43312E300a
      in hexadecimal).\n   The magic number for multi-channel AMR-WB files MUST consist
      of the\n   ASCII character string:\n      \"#!AMR-WB_MC1.0\\n\"\n      (or 0x2321414d522d57425F4D43312E300a
      in hexadecimal).\n   The version number in the magic numbers refers to the version
      of the\n   file format.\n   The 32 bit channel description field is defined
      as:\n    0                   1                   2                   3\n    0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      Reserved bits                                    | CHAN  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Reserved bits: MUST be set to 0 when written, and a reader MUST\n                  ignore
      them.\n   CHAN (4 bits, unsigned integer): Indicates the number of audio\n   channels
      contained in this storage file.  The valid values and the\n   order of the channels
      within a frame-block are specified in Section\n   4.1 in [12].\n"
    title: 5.2.  Multi-Channel Header
  - contents:
    - "5.3.  Speech Frames\n   After the file header, speech frame-blocks consecutive
      in time are\n   stored in the file.  Each frame-block contains a number of octet-\n
      \  aligned speech frames equal to the number of channels, and stored in\n   increasing
      order, starting with channel 1.\n   Each stored speech frame starts with a one-octet
      frame header with\n   the following format:\n    0 1 2 3 4 5 6 7\n   +-+-+-+-+-+-+-+-+\n
      \  |P|  FT   |Q|P|P|\n   +-+-+-+-+-+-+-+-+\n   The FT field and the Q bit are
      defined in the same way as in Section\n   4.3.2.  The P bits are padding and
      MUST be set to 0, and MUST be\n   ignored.\n   Following this one octet header
      come the speech bits as defined in\n   4.4.3.  The last octet of each frame
      is padded with zeroes, if\n   needed, to achieve octet alignment.\n   The following
      example shows an AMR frame in 5.9 kbps coding mode\n   (with 118 speech bits)
      in the storage format.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |P| FT=2  |Q|P|P|                                               |\n   +-+-+-+-+-+-+-+-+
      \                                              +\n   |                                                               |\n
      \  +          Speech bits for frame-block n, channel k             +\n   |                                                               |\n
      \  +                                                           +-+-+\n   |                                                           |P|P|\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Non-received
      speech frames or frame-blocks between SID updates during\n   non-speech periods
      MUST be stored as NO_DATA frames (frame type 15,\n   as defined in [2] and [4]).
      \ Frames or frame-blocks lost in\n   transmission MUST be stored as NO_DATA
      frames or SPEECH_LOST (frame\n   type 14, only available for AMR-WB) in complete
      frame-blocks to keep\n   synchronization with the original media.\n   Comfort
      noise frames of other types than AMR SID (FT=8) (i.e., frame\n   type 9, 10,
      and 11 for AMR) SHALL NOT be used in the AMR file format.\n"
    title: 5.3.  Speech Frames
  title: 5.  AMR and AMR-WB Storage Format
- contents:
  - "6.  Congestion Control\n   The general congestion control considerations for
    transporting RTP\n   data apply to AMR or AMR-WB speech over RTP as well.  However,
    the\n   multi-rate capability of AMR and AMR-WB speech coding may provide an\n
    \  advantage over other payload formats for controlling congestion since\n   the
    bandwidth demand can be adjusted by selecting a different coding\n   mode.\n   Another
    parameter that may impact the bandwidth demand for AMR and\n   AMR-WB is the number
    of frame-blocks that are encapsulated in each\n   RTP payload.  Packing more frame-blocks
    in each RTP payload can\n   reduce the number of packets sent and hence the overhead
    from\n   IP/UDP/RTP headers, at the expense of increased delay.\n   If forward
    error correction (FEC) is used to combat packet loss, the\n   amount of redundancy
    added by FEC will need to be regulated so that\n   the use of FEC itself does
    not cause a congestion problem.\n   It is RECOMMENDED that AMR or AMR-WB applications
    using this payload\n   format employ congestion control.  The actual mechanism
    for\n   congestion control is not specified but should be suitable for real-\n
    \  time flows, possibly \"TCP Friendly Rate Control\" [21].\n"
  title: 6.  Congestion Control
- contents:
  - "7.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the general security considerations discussed
    in [8]\n   and in any used profile, like AVP [12] or SAVP [26].\n   As this format
    transports encoded speech, the main security issues\n   include confidentiality,
    authentication, and integrity of the speech\n   itself.  The payload format itself
    does not have any built-in\n   security mechanisms.  External mechanisms, such
    as SRTP [26], need to\n   be used for this functionality.  Note that the appropriate
    mechanism\n   to provide security to RTP and the payloads following this memo
    may\n   vary.  It is dependent on the application, the transport, and the\n   signaling
    protocol employed.  Therefore, a single mechanism is not\n   sufficient, although
    if suitable the usage of SRTP [26] is\n   RECOMMENDED.  Other known mechanisms
    that may be used are IPsec [33]\n   and TLS [34] (RTP over TCP), but other alternatives
    may also exist.\n   This payload format does not exhibit any significant non-uniformity\n
    \  in the receiver side computational complexity for packet processing,\n   and
    thus is unlikely to pose a denial-of-service threat due to the\n   receipt of
    pathological data.\n"
  - contents:
    - "7.1.  Confidentiality\n   To achieve confidentiality of the encoded AMR or
      AMR-WB speech, all\n   speech data bits will need to be encrypted.  There is
      less of a need\n   to encrypt the payload header or the table of contents due
      to a) that\n   they only carry information about the requested speech mode,
      frame\n   type, and frame quality, and b) that this information could be useful\n
      \  to some third party, e.g., quality monitoring.\n   The packetization and
      unpacketization of the AMR and AMR-WB payload\n   is done only at the endpoints.
      \ Therefore encryption should be\n   performed after packet encapsulation, and
      decryption should be\n   performed before packet decapsulation.\n   Encryption
      may affect interleaving.  Specifically, a change of keys\n   should occur at
      the boundary between interleaving groups.  If it is\n   not done at that boundary
      on both endpoints, the speech quality will\n   be degraded during the complete
      interleaving group for any receiver.\n   The encryption mechanism may impact
      the robustness of the error\n   correcting mechanism.  This is discussed in
      Section 9.5 of SRTP [26].\n   From this, UED/UEP based on robust sorting may
      be difficult to apply\n   when the payload data is encrypted.\n"
    title: 7.1.  Confidentiality
  - contents:
    - "7.2.  Authentication and Integrity\n   To authenticate the sender and to protect
      the integrity of the RTP\n   packets in transit, an external mechanism has to
      be used.  As stated\n   before, it is RECOMMENDED that SRTP [26] be used for
      common\n   interoperability.  Note that the use of UED/UEP may be difficult
      to\n   combine with some integrity protection mechanisms because any bit\n   errors
      will cause the integrity check to fail.\n   Data tampering by a man-in-the-middle
      attacker could result in\n   erroneous depacketization/decoding that could lower
      the speech\n   quality or produce unintelligible communications.  Tampering
      with the\n   CMR field may result in a different speech quality than desired.\n"
    title: 7.2.  Authentication and Integrity
  title: 7.  Security Considerations
- contents:
  - "8.  Payload Format Parameters\n   This section defines the parameters that may
    be used to select\n   optional features of the AMR and AMR-WB payload formats.
    \ The\n   parameters are defined here as part of the media type registrations\n
    \  for the AMR and AMR-WB speech codecs.  The registrations are done\n   following
    RFC 4855 [15] and the media registration rules [14].\n   A mapping of the parameters
    into the Session Description Protocol\n   (SDP) [11] is also provided for those
    applications that use SDP.\n   Equivalent parameters could be defined elsewhere
    for use with control\n   protocols that do not use media types or SDP.\n   Two
    separate media type registrations are made, one for AMR and one\n   for AMR-WB,
    because they are distinct encodings that must be\n   distinguished by their own
    media type.\n   Data formats are specified for both real-time transport in RTP
    and\n   for storage type applications such as email attachments.\n"
  - contents:
    - "8.1.  AMR Media Type Registration\n   The media type for the Adaptive Multi-Rate
      (AMR) codec is allocated\n   from the IETF tree since AMR is a widely used speech
      codec in general\n   VoIP and messaging applications.  This media type registration
      covers\n   both real-time transfer via RTP and non-real-time transfers via\n
      \  stored files.\n   Note, any unspecified parameter MUST be ignored by the
      receiver.\n   Media Type name:     audio\n   Media subtype name:  AMR\n   Required
      parameters: none\n   Optional parameters:\n      These parameters apply to RTP
      transfer only.\n      octet-align: Permissible values are 0 and 1.  If 1, octet-aligned\n
      \              operation SHALL be used.  If 0 or if not present,\n               bandwidth-efficient
      operation is employed.\n      mode-set: Restricts the active codec mode set
      to a subset of all\n               modes, for example, to be able to support
      transport\n               channels such as GSM networks in gateway use cases.\n
      \              Possible values are a comma separated list of modes from\n               the
      set: 0,...,7 (see Table 1a [2]).  The SID frame type\n               8 and NO_DATA
      (frame type 15) are never included in the\n               mode set, but can
      always be used.  If mode-set is\n               specified, it MUST be abided,
      and frames encoded with\n               modes outside of the subset MUST NOT
      be sent in any RTP\n               payload or used in codec mode requests.  If
      not present,\n               all codec modes are allowed for the payload type.\n
      \     mode-change-period: Specifies a number of frame-blocks, N (1 or\n               2),
      that is the frame-block period at which codec mode\n               changes are
      allowed for the sender.  The initial phase of\n               the interval is
      arbitrary, but changes must be separated\n               by a period of N frame-blocks,
      i.e., a value of 2\n               allows the sender to change mode every second
      frame-\n               block.  The value of N SHALL be either 1 or 2.  If this\n
      \              parameter is not present, mode changes are allowed at\n               any
      time during the session, i.e., N=1.\n      mode-change-capability: Specifies
      if the client is capable to\n               transmit with a restricted mode
      change period.  The\n               parameter may take value of 1 or 2.  A value
      of 1\n               indicates that the client is not capable of restricting\n
      \              the mode change period to 2, and that the codec mode may\n               be
      changed at any point.  A value of 2 indicates that the\n               client
      has the capability to restrict the mode change\n               period to 2,
      and thus that the client can correctly\n               interoperate with a receiver
      requiring a mode-change-\n               period=2.  If this parameter is not
      present, the mode-\n               change restriction capability is not supported,
      i.e.\n               mode-change-capability=1.  To be able to interoperate\n
      \              fully with gateways to circuit switched networks (for\n               example,
      GSM networks), transmissions with restricted\n               mode changes (mode-change-capability=2)
      are required.\n               Thus, clients RECOMMENDED to have the capability
      to\n               support transmission according to\n               mode-change-capability=2.\n
      \     mode-change-neighbor: Permissible values are 0 and 1.  If 1, the\n               sender
      SHOULD only perform mode changes to the\n               neighboring modes in
      the active codec mode set.\n               Neighboring modes are the ones closest
      in bit rate to\n               the current mode, either the next higher or next
      lower\n               rate.  If 0 or if not present, change between any two\n
      \              modes in the active codec mode set is allowed.\n      maxptime:
      The maximum amount of media which can be encapsulated\n               in a payload
      packet, expressed as time in milliseconds.\n               The time is calculated
      as the sum of the time that the\n               media present in the packet
      represents.  The time SHOULD\n               be an integer multiple of the frame
      size.  If this\n               parameter is not present, the sender MAY encapsulate
      any\n               number of speech frames into one RTP packet.\n      crc:
      Permissible values are 0 and 1.  If 1, frame CRCs SHALL be\n               included
      in the payload.  If 0 or not present, CRCs\n               SHALL NOT be used.
      \ If crc=1, this also implies\n               automatically that octet-aligned
      operation SHALL be used\n               for the session.\n      robust-sorting:
      Permissible values are 0 and 1.  If 1, the\n               payload SHALL employ
      robust payload sorting.  If 0 or if\n               not present, simple payload
      sorting SHALL be used.  If\n               robust-sorting=1, this also implies
      automatically that\n               octet-aligned operation SHALL be used for
      the session.\n      interleaving: Indicates that frame-block level interleaving
      SHALL\n               be used for the session, and its value defines the\n               maximum
      number of frame-blocks allowed in an\n               interleaving group (see
      Section 4.4.1).  If this\n               parameter is not present, interleaving
      SHALL NOT be\n               used.  The presence of this parameter also implies\n
      \              automatically that octet-aligned operation SHALL be\n               used.\n
      \     ptime: see RFC 4566 [11].\n      channels: The number of audio channels.
      \ The possible values\n               (1-6) and their respective channel order
      is specified in\n               Section 4.1 in [12].  If omitted, it has the
      default\n               value of 1.\n      max-red: The maximum duration in
      milliseconds that elapses between\n               the primary (first) transmission
      of a frame and any\n               redundant transmission that the sender will
      use.  This\n               parameter allows a receiver to have a bounded delay
      when\n               redundancy is used.  Allowed values are between 0 (no\n
      \              redundancy will be used) and 65535.  If the parameter is\n               omitted,
      no limitation on the use of redundancy is\n               present.\n   Encoding
      considerations:\n        The Audio data is binary data, and must be encoded
      for non-\n        binary transport; the Base64 encoding is suitable for email.\n
      \       When used in RTP context the data is framed as defined in [14].\n   Security
      considerations:\n        See Section 7 of RFC 4867.\n   Public specification:\n
      \       RFC 4867\n        3GPP TS 26.090, 26.092, 26.093, 26.101\n   Applications
      that use this media type:\n        This media type is used in numerous applications
      needing\n        transport or storage of encoded voice.  Some examples include;\n
      \       Voice over IP, streaming media, voice messaging, and voice\n        recording
      on digital cameras.\n   Additional information:\n        The following applies
      to stored-file transfer methods:\n        Magic numbers:\n           single-channel:\n
      \             ASCII character string \"#!AMR\\n\"\n              (or 0x2321414d520a
      in hexadecimal)\n           multi-channel:\n             ASCII character string
      \"#!AMR_MC1.0\\n\"\n             (or 0x2321414d525F4D43312E300a in hexadecimal)\n
      \       File extensions: amr, AMR\n        Macintosh file type code: \"amr \"
      (fourth character is space)\n        AMR speech frames may also be stored in
      the file format \"3GP\"\n        defined in 3GPP TS 26.244 [31], which is identified
      using the\n        media types \"audio/3GPP\" or \"video/3GPP\" as registered
      by RFC\n        3839 [32].\n   Person & email address to contact for further
      information:\n        Magnus Westerlund <magnus.westerlund@ericsson.com>\n        Ari
      Lakaniemi <ari.lakaniemi@nokia.com>\n   Intended usage: COMMON.\n        This
      media type is widely used in streaming, VoIP, and messaging\n        applications
      on many types of devices.\n   Restrictions on usage:\n        When this media
      type is used in the context of transfer over\n        RTP, the RTP payload format
      specified in Section 4 SHALL be\n        used.  In all other contexts, the file
      format defined in Section\n        5 SHALL be used.\n   Author:\n        Magnus
      Westerlund <magnus.westerlund@ericsson.com>\n        Ari Lakaniemi <ari.lakaniemi@nokia.com>\n
      \  Change controller:\n        IETF Audio/Video Transport working group delegated
      from the\n        IESG.\n"
    title: 8.1.  AMR Media Type Registration
  - contents:
    - "8.2.  AMR-WB Media Type Registration\n   The media type for the Adaptive Multi-Rate
      Wideband (AMR-WB) codec is\n   allocated from the IETF tree since AMR-WB is
      a widely used speech\n   codec in general VoIP and messaging applications.  This
      media type\n   registration covers both real-time transfer via RTP and non-real-\n
      \  time transfers via stored files.\n   Note, any unspecified parameter MUST
      be ignored by the receiver.\n   Media Type name:     audio\n   Media subtype
      name:  AMR-WB\n   Required parameters: none\n   Optional parameters:\n      These
      parameters apply to RTP transfer only.\n      octet-align: Permissible values
      are 0 and 1.  If 1, octet-aligned\n               operation SHALL be used.  If
      0 or if not present,\n               bandwidth-efficient operation is employed.\n
      \     mode-set:  Restricts the active codec mode set to a subset of all\n               modes,
      for example, to be able to support transport\n               channels such as
      GSM networks in gateway use cases.\n               Possible values are a comma-separated
      list of modes from\n               the set: 0,...,8 (see Table 1a [4]).  The
      SID frame type\n               9, SPEECH_LOST (frame type 14), and NO_DATA (frame
      type\n               15) are never included in the mode set, but can always\n
      \              be used.  If mode-set is specified, it MUST be abided,\n               and
      frames encoded with modes outside of the subset MUST\n               NOT be
      sent in any RTP payload or used in codec mode\n               requests.  If
      not present, all codec modes are allowed\n               for the payload type.\n
      \     mode-change-period: Specifies a number of frame-blocks, N (1 or\n               2),
      that is the frame-block period at which codec mode\n               changes are
      allowed for the sender.  The initial phase of\n               the interval is
      arbitrary, but changes must be separated\n               by multiples of N frame-blocks,
      i.e., a value of 2\n               allows the sender to change mode every second
      frame-\n               block.  The value of N SHALL be either 1 or 2.  If this\n
      \              parameter is not present, mode changes are allowed at\n               Any
      time during the session, i.e., N=1.\n      mode-change-capability: Specifies
      if the client is capable to\n               transmit with a restricted mode
      change period.  The\n               parameter may take value of 1 or 2.  A value
      of 1\n               indicates that the client is not capable of restricting\n
      \              the mode change period to 2, and that the codec mode may\n               be
      changed at any point.  A value of 2 indicates that the\n               client
      has the capability to restrict the mode change\n               period to 2,
      and thus that the client can correctly\n               interoperate with a receiver
      requiring a mode-change-\n               period=2.  If this parameter is not
      present, the mode-\n               change restriction capability is not supported,
      i.e.\n               mode-change-capability=1.  To be able to interoperate\n
      \              fully with gateways to circuit switched networks (for\n               example,
      GSM networks), transmissions with restricted\n               mode changes (mode-change-capability=2)
      are required.\n               Thus, clients are RECOMMENDED to have the capability
      to\n               support transmission according to\n               mode-change-capability=2.\n
      \     mode-change-neighbor: Permissible values are 0 and 1.  If 1, the\n               sender
      SHOULD only perform mode changes to the\n               neighboring modes in
      the active codec mode set.\n               Neighboring modes are the ones closest
      in bit rate to\n               the current mode, either the next higher or next
      lower\n               rate.  If 0 or if not present, change between any two\n
      \              modes in the active codec mode set is allowed.\n      maxptime:
      The maximum amount of media which can be encapsulated\n               in a payload
      packet, expressed as time in milliseconds.\n               The time is calculated
      as the sum of the time that the\n               media present in the packet
      represents.  The time SHOULD\n               be an integer multiple of the frame
      size.  If this\n               parameter is not present, the sender MAY encapsulate
      any\n               number of speech frames into one RTP packet.\n      crc:
      Permissible values are 0 and 1.  If 1, frame CRCs SHALL be\n               included
      in the payload.  If 0 or not present, CRCs\n               SHALL NOT be used.
      \ If crc=1, this also implies\n               automatically that octet-aligned
      operation SHALL be used\n               for the session.\n      robust-sorting:
      Permissible values are 0 and 1.  If 1, the\n               payload SHALL employ
      robust payload sorting.  If 0 or if\n               not present, simple payload
      sorting SHALL be used.  If\n               robust-sorting=1, this also implies
      automatically that\n               octet-aligned operation SHALL be used for
      the session.\n      interleaving: Indicates that frame-block level interleaving
      SHALL\n               be used for the session, and its value defines the\n               maximum
      number of frame-blocks allowed in an\n               interleaving group (see
      Section 4.4.1).  If this\n               parameter is not present, interleaving
      SHALL NOT be\n               used.  The presence of this parameter also implies\n
      \              automatically that octet-aligned operation SHALL be\n               used.\n
      \     ptime: see RFC 2327 [11].\n      channels: The number of audio channels.
      \ The possible values\n               (1-6) and their respective channel order
      is specified in\n               Section 4.1 in [12].  If omitted, it has the
      default\n               value of 1.\n      max-red: The maximum duration in
      milliseconds that elapses between\n               the primary (first) transmission
      of a frame and any\n               redundant transmission that the sender will
      use.  This\n               parameter allows a receiver to have a bounded delay
      when\n               redundancy is used.  Allowed values are between 0 (no\n
      \              redundancy will be used) and 65535.  If the parameter is\n               omitted,
      no limitation on the use of redundancy is\n               present.\n   Encoding
      considerations:\n        The Audio data is binary data, and must be encoded
      for non-\n        binary transport; the Base64 encoding is suitable for email.\n
      \       When used in RTP context the data is framed as defined in [14].\n   Security
      considerations:\n        See Section 7 of RFC 4867.\n   Public specification:\n
      \       RFC 4867\n        3GPP TS 26.190, 26.192, 26.193, 26.201\n   Applications
      that use this media type:\n        This media type is used in numerous applications
      needing\n        transport or storage of encoded voice.  Some examples include;\n
      \       Voice over IP, streaming media, voice messaging, and voice\n        recording
      on digital cameras.\n   Additional information:\n        The following applies
      to stored-file transfer methods:\n        Magic numbers:\n          single-channel:\n
      \         ASCII character string \"#!AMR-WB\\n\"\n          (or 0x2321414d522d57420a
      in hexadecimal)\n          multi-channel:\n          ASCII character string
      \"#!AMR-WB_MC1.0\\n\"\n          (or 0x2321414d522d57425F4D43312E300a in hexadecimal)\n
      \       File extensions: awb, AWB\n        Macintosh file type code: amrw\n
      \       Object identifier or OID: none\n        AMR-WB speech frames may also
      be stored in the file format \"3GP\"\n        defined in 3GPP TS 26.244 [31]
      and identified using the media\n        type \"audio/3GPP\" or \"video/3GPP\"
      as registered by RFC 3839\n        [32].\n   Person & email address to contact
      for further information:\n        Magnus Westerlund <magnus.westerlund@ericsson.com>\n
      \       Ari Lakaniemi <ari.lakaniemi@nokia.com>\n   Intended usage: COMMON.\n
      \       This media type is widely used in streaming, VoIP, and messaging\n        applications
      on many types of devices.\n   Restrictions on usage:\n        When this media
      type is used in the context of transfer over\n        RTP, the RTP payload format
      specified in Section 4 SHALL be\n        used.  In all other contexts, the file
      format defined in Section\n        5 SHALL be used.\n   Author:\n        Magnus
      Westerlund <magnus.westerlund@ericsson.com>\n        Ari Lakaniemi <ari.lakaniemi@nokia.com>\n
      \  Change controller:\n        IETF Audio/Video Transport working group delegated
      from the\n        IESG.\n"
    title: 8.2.  AMR-WB Media Type Registration
  - contents:
    - "8.3.  Mapping Media Type Parameters into SDP\n   The information carried in
      the media type specification has a\n   specific mapping to fields in the Session
      Description Protocol (SDP)\n   [11], which is commonly used to describe RTP
      sessions.  When SDP is\n   used to specify sessions employing the AMR or AMR-WB
      codec, the\n   mapping is as follows:\n      -  The media type (\"audio\") goes
      in SDP \"m=\" as the media name.\n      -  The media subtype (payload format
      name) goes in SDP \"a=rtpmap\"\n         as the encoding name.  The RTP clock
      rate in \"a=rtpmap\" MUST be\n         8000 for AMR and 16000 for AMR-WB, and
      the encoding parameters\n         (number of channels) MUST either be explicitly
      set to N or\n         omitted, implying a default value of 1.  The values of
      N that\n         are allowed are specified in Section 4.1 in [12].\n      -
      \ The parameters \"ptime\" and \"maxptime\" go in the SDP \"a=ptime\"\n         and
      \"a=maxptime\" attributes, respectively.\n      -  Any remaining parameters
      go in the SDP \"a=fmtp\" attribute by\n         copying them directly from the
      media type parameter string as a\n         semicolon-separated list of parameter=value
      pairs.\n"
    - contents:
      - "8.3.1.  Offer-Answer Model Considerations\n   The following considerations
        apply when using SDP Offer-Answer\n   procedures to negotiate the use of AMR
        or AMR-WB payload in RTP:\n      -  Each combination of the RTP payload transport
        format\n         configuration parameters (octet-align, crc, robust-sorting,\n
        \        interleaving, and channels) is unique in its bit-pattern and\n         not
        compatible with any other combination.  When creating an\n         offer in
        an application desiring to use the more advanced\n         features (crc,
        robust-sorting, interleaving, or more than one\n         channel), the offerer
        is RECOMMENDED to also offer a payload\n         type containing only the
        octet-aligned or bandwidth-efficient\n         configuration with a single
        channel.  If multiple\n         configurations are of interest to the application,
        they may all\n         be offered; however, care should be taken not to offer
        too many\n         payload types.  An SDP answerer MUST include, in the SDP
        answer\n         for a payload type, the following parameters unmodified from\n
        \        the SDP offer (unless it removes the payload type): \"octet-\n         align\";
        \"crc\"; \"robust-sorting\"; \"interleaving\"; and\n         \"channels\".
        \ The SDP offerer and answerer MUST generate AMR or\n         AMR-WB packets
        as described by these parameters.\n      -  The \"mode-set\" parameter can
        be used to restrict the set of\n         active AMR/AMR-WB modes used in a
        session.  This functionality\n         is primarily intended for gateways
        to access networks such as\n         GSM or 3GPP UMTS, where the access network
        may be capable of\n         supporting only a subset of AMR/AMR-WB modes.
        \ The 3GPP\n         preferred codec configurations are defined in 3GPP TS
        26.103\n         [25], and it is RECOMMENDED that other networks also needing
        to\n         restrict the mode set follow the preferred codec configurations\n
        \        defined in 3GPP for greatest interoperability.\n         The parameter
        is bi-directional, i.e., the restricted set\n         applies to media both
        to be received and sent by the declaring\n         entity.  If a mode set
        was supplied in the offer, the answerer\n         SHALL return the mode-set
        unmodified or reject the payload\n         type.  However, the answerer is
        free to choose a mode-set in\n         the answer only if no mode-set was
        supplied in the offer for a\n         unicast two-peer session.  The mode-set
        in the answer is\n         binding both for offerer and answerer.  Thus, an
        offerer\n         supporting all modes and subsets SHOULD NOT include the
        mode-\n         set parameter.  For any other offerer it is RECOMMENDED to\n
        \        include each mode-set it can support as a separate payload type\n
        \        within the offer.  For multicast sessions, the answerer SHALL\n         only
        participate in the session if it supports the offered\n         mode-set.
        \ Thus, it is RECOMMENDED that any offer for a\n         multicast session
        include only the mode-set it will require the\n         answerers to support,
        and that the mode-set be likely to be\n         supported by all participants.\n
        \     -  The parameters \"mode-change-period\" and \"mode-change-\n         capability\"
        are intended to be used in sessions with gateways,\n         for example,
        when interoperating with GSM networks.  Both\n         parameters are declarative
        and are combined to allow a session\n         participant to determine if
        the payload type can be supported.\n         The mode-change-period will indicate
        what the offerer or\n         answerer requires of data it receives, while
        the mode-change-\n         capability indicates its transmission capabilities.\n
        \        A mode-change-period=2 in the offer indicates a requirement on\n
        \        the answerer to send with a mode-change period of 2, i.e.,\n         support
        mode-change-capability=2.  If the answerer requires\n         mode-change-period=2,
        it SHALL only include it in the answer if\n         the offerer either has
        indicated support with mode-change-\n         capability=2 or has indicated
        mode-change-period=2; otherwise,\n         the payload type SHALL be rejected.
        \ An offerer that supports\n         mode-change-capability=2 SHALL include
        the parameter in all\n         offers to ensure the greatest possible interoperability,
        unless\n         it includes mode-change-period=2 in the offer.  The mode-\n
        \        change-capability SHOULD be included in answers.  It is then\n         indicating
        the answerer's capability to transmit with that\n         mode-change-period
        for the provided payload format\n         configuration.  The information
        is useful in future\n         re-negotiation of the payload formats.\n      -
        \ The parameter \"mode-change-neighbor\" is a recommendation to\n         restrict
        the switching of codec modes to its neighbor and\n         SHOULD be followed.
        \ It is intended to be used in gateway\n         scenarios (for example, to
        GSM networks) where the support of\n         this parameter and the operations
        it implies improves\n         interoperability.\n         \"mode-change-neighbor\"
        is a declarative parameter.  By\n         including the parameter, the offerer
        or answerer indicates that\n         it desires to receive streams with \"mode-change-neighbor\"\n
        \        restrictions.\n      -  In most cases, the parameters \"maxptime\"
        and \"ptime\" will not\n         affect interoperability; however, the setting
        of the parameters\n         can affect the performance of the application.
        \ The SDP offer-\n         answer handling of the \"ptime\" parameter is described
        in RFC\n         3264 [13].  The \"maxptime\" parameter MUST be handled in
        the\n         same way.\n      -  The parameter \"max-red\" is a stream property
        parameter.  For\n         send-only or send-recv unicast media streams, the
        parameter\n         declares the limitation on redundancy that the stream
        sender\n         will use.  For recvonly streams, it indicates the desired
        value\n         for the stream sent to the receiver.  The answerer MAY change\n
        \        the value, but is RECOMMENDED to use the same limitation as the\n
        \        offer declares.  In the case of multicast, the offerer MAY\n         declare
        a limitation; this SHALL be answered using the same\n         value.  A media
        sender using this payload format is RECOMMENDED\n         to always include
        the \"max-red\" parameter.  This information is\n         likely to simplify
        the media stream handling in the receiver.\n         This is especially true
        if no redundancy will be used, in which\n         case \"max-red\" is set
        to 0.  As this parameter was not defined\n         originally, some senders
        will not declare this parameter even\n         if it will limit or not send
        redundancy at all.\n      -  Any unknown parameter in an offer SHALL be removed
        in the\n         answer.\n"
      title: 8.3.1.  Offer-Answer Model Considerations
    - contents:
      - "8.3.2.  Usage of Declarative SDP\n   In declarative usage, like SDP in RTSP
        [29] or SAP [30], the\n   parameters SHALL be interpreted as follows:\n   -
        \ The payload format configuration parameters (octet-align, crc,\n      robust-sorting,
        interleaving, and channels) are all declarative,\n      and a participant
        MUST use the configuration(s) that is provided\n      for the session.  More
        than one configuration may be provided if\n      necessary by declaring multiple
        RTP payload types; however, the\n      number of types should be kept small.\n
        \  -  Any restriction of the AMR or AMR-WB encoder mode-switching and\n      mode
        usage through the \"mode-set\", and \"mode-change-period\" MUST\n      be
        followed by all participants of the session.  The restriction\n      indicated
        by \"mode-change-neighbor\" SHOULD be followed.  Please\n      note that such
        restrictions may be necessary if gateways to other\n      transport systems
        like GSM participate in the session.  Failure to\n      consider such restrictions
        may result in failure for a peer behind\n      such a gateway to correctly
        receive all or parts of the session.\n      Also, if different restrictions
        are needed by different peers in\n      the same session (unless a common
        subset of the restrictions\n      exists), some peer will not be able to participate.
        \ Note that the\n      usage of mode-change-capability is meaningless when
        no negotiation\n      exists, and can thus be excluded in any declarations.\n
        \  -  Any \"maxptime\" and \"ptime\" values should be selected with care to\n
        \     ensure that the session's participants can achieve reasonable\n      performance.\n
        \  -  The usage of \"max-red\" puts a global upper limit on the usage of\n
        \     redundancy that needs to be followed by all that understand the\n      parameter.
        \ However, due to the late addition of this parameter,\n      it may be ignored
        by some implementations.\n"
      title: 8.3.2.  Usage of Declarative SDP
    - contents:
      - "8.3.3.  Examples\n   Some example SDP session descriptions utilizing AMR
        and AMR-WB\n   encodings follow.  In these examples, long a=fmtp lines are
        folded to\n   meet the column width constraints of this document; the backslash\n
        \  (\"\\\") at the end of a line and the carriage return that follows it\n
        \  should be ignored.\n   In an example of the usage of AMR in a possible
        GSM gateway-to-\n   gateway scenario, the offerer is capable of supporting
        three\n   different mode-sets and needs the mode-change-period to be 2 in\n
        \  combination with mode-change-neighbor restrictions.  The other\n   gateway
        can only support two of these mode-sets and removes the\n   payload type 97
        in the answer.  If the offering GSM gateway only\n   supports a single mode-set
        active at the same time, it should\n   consider doing the 1 out of N selection
        procedures described in\n   Section 10.2 of [13]:\n   Offer:\n    m=audio
        49120 RTP/AVP 97 98 99\n    a=rtpmap:97 AMR/8000/1\n    a=fmtp:97 mode-set=0,2,5,7;
        mode-change-period=2; \\\n      mode-change-capability=2; mode-change-neighbor=1\n
        \   a=rtpmap:98 AMR/8000/1\n    a=fmtp:98 mode-set=0,2,3,6; mode-change-period=2;
        \\\n      mode-change-capability=2; mode-change-neighbor=1\n    a=rtpmap:99
        AMR/8000/1\n    a=fmtp:99 mode-set=0,2,3,4; mode-change-period=2; \\\n      mode-change-capability=2;
        mode-change-neighbor=1\n    a=maxptime:20\n   Answer:\n    m=audio 49120 RTP/AVP
        98 99\n    a=rtpmap:98 AMR/8000/1\n    a=fmtp:98 mode-set=0,2,3,6; mode-change-period=2;
        \\<\n      mode-change-capability=2; mode-change-neighbor=1\n    a=rtpmap:99
        AMR/8000/1\n    a=fmtp:99 mode-set=0,2,3,4; mode-change-period=2; \\\n      mode-change-capability=2;
        mode-change-neighbor=1\n    a=maxptime:20\n   The following example shows
        the usage of AMR between a non-GSM\n   endpoint and a GSM gateway.  The non-GSM
        offerer requires no\n   restrictions of the mode-change-period or mode-change-neighbor,
        but\n   must signal its mode-change-capability in the offer and abide by\n
        \  those restrictions in the answer.\n   Offer:\n    m=audio 49120 RTP/AVP
        97\n    a=rtpmap:97 AMR/8000/1\n    a=fmtp:97 mode-change-capability=2\n    a=maxptime:20\n
        \  Answer:\n    m=audio 49120 RTP/AVP 97\n    a=rtpmap:97 AMR/8000/1\n    a=fmtp:97
        mode-set=0,2,4,7; mode-change-period=2; \\\n      mode-change-capability=2;
        mode-change-neighbor=1\n    a=maxptime:20\n   Example of usage of AMR-WB in
        a possible VoIP scenario where UEP may\n   be used (99) and a fallback declaration
        (98):\n    m=audio 49120 RTP/AVP 99 98\n    a=rtpmap:98 AMR-WB/16000\n    a=fmtp:98
        octet-align=1; mode-change-capability=2\n    a=rtpmap:99 AMR-WB/16000\n    a=fmtp:99
        octet-align=1; crc=1; mode-change-capability=2\n   Example of usage of AMR-WB
        in a possible streaming scenario (two\n   channel stereo):\n    m=audio 49120
        RTP/AVP 99\n    a=rtpmap:99 AMR-WB/16000/2\n    a=fmtp:99 interleaving=30\n
        \   a=maxptime:100\n   Note that the payload format (encoding) names are commonly
        shown in\n   upper case.  MIME subtypes are commonly shown in lower case.
        \ These\n   names are case-insensitive in both places.  Similarly, parameter\n
        \  names are case-insensitive both in MIME types and in the default\n   mapping
        to the SDP a=fmtp attribute.\n"
      title: 8.3.3.  Examples
    title: 8.3.  Mapping Media Type Parameters into SDP
  title: 8.  Payload Format Parameters
- contents:
  - "9.  IANA Considerations\n   Two media types (audio/AMR and audio/AMR-WB) have
    been updated; see\n   Section 8.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Changes from RFC 3267\n   The differences between RFC 3267 and this document
    are as follows:\n   -  Added clarification of behavior in regards to mode change
    period\n      and mode-change neighbor that is expected from an IP client; see\n
    \     Section 4.5.\n   -  Updated the maxptime for better clarification.  The
    sentence that\n      previously read: \"The time SHOULD be a multiple of the frame\n
    \     size.\" now says \"The time SHOULD be an integer multiple of the\n      frame
    size.\"  This should have no impact on interoperability.\n   -  Updated the definition
    of the mode-set parameter for\n      clarification.\n   -  Restricted the values
    for mode-change-period to 1 or 2, which are\n      the values used in circuit-switched
    AMR systems.\n   -  Added a new media type parameter Mode-Change-Capability that\n
    \     defaults to 1, which is the assumed behavior of any non-updated\n      implementation.
    \ This enables the offer-answer procedures to work.\n   -  Changed mode-change-neighbor
    to indicate a recommended behavior\n      rather than a required one.\n   -  Added
    an Offer-Answer Section, see Section 8.3.1.  This will have\n      implications
    on the interoperability to implementations that have\n      guessed how to perform
    offer/answer negotiation of the payload\n      parameters.\n   -  Clarified and
    aligned the unequal detection usage with the\n      published UDP-Lite specification
    in Sections 3.6.1 and 4.4.2.1.\n      This included replacing a normative statement
    about packet\n      handling with an informative paragraph with a reference to
    UDP-\n      Lite.\n   -  Clarified the bit order in the CRC calculation in Section
    4.4.2.1.\n   -  Corrected the reference in Section 5.3 for the Q and FT fields.\n
    \  -  Changed the padding bit definition in Sections 4.4.2 and 5.3 so\n      that
    it is clear that they shall be ignored.\n   -  Added a clarification that comfort
    noise frames with frame type 9,\n      10, and 11 SHALL NOT be used in the AMR
    file format.\n   -  Clarified in Section 4.3.2 that the rules about not sending\n
    \     NO_DATA frames do apply for all payload format configurations with\n      the
    exception of the interleaved mode.\n   -  The reference list has been updated
    to now published RFCs: RFC\n      3448, RFC 3550, RFC 3551, RFC 3711, RFC 3828,
    and RFC 4566.  A\n      reference to 3GPP TS 26.101 has also been added.\n   -
    \ Added notes in storage format section and media type registration\n      that
    AMR and AMR-WB frames can also be stored in the 3GP file\n      format.\n   -
    \ Added a media type parameter \"max-red\" that allows the sender to\n      declare
    a bounded usage of redundancy.  This parameter allows a\n      receiver to optimize
    its function as it will know if redundancy\n      will be used or not.  If it
    is used, the maximum extra delay\n      introduced by the sender (that is needed
    to be considered by the\n      receiver to fully utilize the redundancy) will
    be known.  The\n      addition of this parameter should have no negative effects
    on\n      older implementations as they are mandated to ignore unknown\n      parameters
    per RFC 3267.  In addition, older implementations are\n      required to operate
    as if the value of max-red is unknown and\n      possibly infinite.\n   -  Updated
    the media type registration to comply with the new\n      registration rules.\n
    \  -  Moved section on decoding validation from Security Considerations\n      to
    Implementation Considerations, where it makes more sense.\n   -  Clarified the
    application of encryption, integrity protection, and\n      authentication mechanism
    to the payload.\n"
  title: 10.  Changes from RFC 3267
- contents:
  - "11.  Acknowledgements\n   The authors would like to thank Petri Koskelainen,
    Bernhard Wimmer,\n   Tim Fingscheidt, Sanjay Gupta, Stephen Casner, and Colin
    Perkins for\n   their significant contributions made throughout the writing and\n
    \  reviewing of RFC 3267 and this replacement.  The authors would also\n   like
    to thank Richard Ejzak, Thomas Belling, and Gorry Fairhurst for\n   their input
    on this replacement of RFC 3267.\n"
  title: 11.  Acknowledgements
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]  3GPP TS 26.090, \"Adaptive Multi-Rate
      (AMR) speech transcoding\",\n        version 4.0.0 (2001-03), 3rd Generation
      Partnership Project\n        (3GPP).\n   [2]  3GPP TS 26.101, \"AMR Speech Codec
      Frame Structure\", version\n        4.1.0 (2001-06), 3rd Generation Partnership
      Project (3GPP).\n   [3]  3GPP TS 26.190 \"AMR Wideband speech codec; Transcoding\n
      \       functions\", version 5.0.0 (2001-03), 3rd Generation Partnership\n        Project
      (3GPP).\n   [4]  3GPP TS 26.201 \"AMR Wideband speech codec; Frame Structure\",\n
      \       version 5.0.0 (2001-03), 3rd Generation Partnership Project\n        (3GPP).\n
      \  [5]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
      BCP 14, RFC 2119, March 1997.\n   [6]  3GPP TS 26.093, \"AMR Speech Codec; Source
      Controlled Rate\n        operation\", version 4.0.0 (2000-12), 3rd Generation
      Partnership\n        Project (3GPP).\n   [7]  3GPP TS 26.193 \"AMR Wideband
      Speech Codec; Source Controlled\n        Rate operation\", version 5.0.0 (2001-03),
      3rd Generation\n        Partnership Project (3GPP).\n   [8]  Schulzrinne, H.,
      Casner, S., Frederick, R., and V. Jacobson,\n        \"RTP: A Transport Protocol
      for Real-Time Applications\", STD 64,\n        RFC 3550, July 2003.\n   [9]
      \ 3GPP TS 26.092, \"AMR Speech Codec; Comfort noise aspects\",\n        version
      4.0.0 (2001-03), 3rd Generation Partnership Project\n        (3GPP).\n   [10]
      3GPP TS 26.192 \"AMR Wideband speech codec; Comfort Noise\n        aspects\",
      version 5.0.0 (2001-03), 3rd Generation Partnership\n        Project (3GPP).\n
      \  [11] Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n        Description
      Protocol\", RFC 4566, July 2006.\n   [12] Schulzrinne, H. and S. Casner, \"RTP
      Profile for Audio and Video\n        Conferences with Minimal Control\", STD
      65, RFC 3551, July 2003.\n   [13] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
      Model with\n        Session Description Protocol (SDP)\", RFC 3264, June 2002.\n
      \  [14] Freed, N. and J. Klensin, \"Media Type Specifications and\n        Registration
      Procedures\", BCP 13, RFC 4288, December 2005.\n   [15] Casner, S., \"Media
      Type Registration of RTP Payload Formats\",\n        RFC 4855, February 2007.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [16] GSM 06.60, \"Enhanced Full Rate (EFR)
      speech transcoding\",\n        version 8.0.1 (2000-11), European Telecommunications
      Standards\n        Institute (ETSI).\n   [17] ANSI/TIA/EIA-136-Rev.C, part 410
      - \"TDMA Cellular/PCS Radio\n        Interface, Enhanced Full Rate Voice Codec
      (ACELP)\".  Formerly\n        IS-641.  TIA published standard, June 1 2001.\n
      \  [18] ARIB, RCR STD-27H, \"Personal Digital Cellular Telecommunication\n        System
      RCR Standard\", Association of Radio Industries and\n        Businesses (ARIB).\n
      \  [19] Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E., and G.\n        Fairhurst,
      \"The Lightweight User Datagram Protocol (UDP-Lite)\",\n        RFC 3828, July
      2004.\n   [20] 3GPP TS 25.415 \"UTRAN Iu Interface User Plane Protocols\",\n
      \       version 4.2.0 (2001-09), 3rd Generation Partnership Project\n        (3GPP).\n
      \  [21] Handley, M., Floyd, S., Padhye, J., and J. Widmer, \"TCP Friendly\n
      \       Rate Control (TFRC): Protocol Specification\", RFC 3448, January\n        2003.\n
      \  [22] Li, A., et al., \"An RTP Payload Format for Generic FEC with\n        Uneven
      Level Protection\", Work in Progress.\n   [23] Rosenberg, J. and H. Schulzrinne,
      \"An RTP Payload Format for\n        Generic Forward Error Correction\", RFC
      2733, December 1999.\n   [24] 3GPP TS 26.102, \"AMR speech codec interface to
      Iu and Uu\",\n        version 4.0.0 (2001-03), 3rd Generation Partnership Project\n
      \       (3GPP).\n   [25] 3GPP TS 26.202, \"AMR Wideband speech codec; Interface
      to Iu and\n        Uu\", version 5.0.0 (2001-03), 3rd Generation Partnership
      Project\n        (3GPP).\n   [26] Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and K.\n        Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",
      RFC\n        3711, March 2004.\n   [27] Perkins, C., Kouvelas, I., Hodson, O.,
      Hardman, V., Handley, M.,\n        Bolot, J., Vega-Garcia, A., and S. Fosse-Parisis,
      \"RTP Payload\n        for Redundant Audio Data\", RFC 2198, September 1997.\n
      \  [28] 3GPP TS 26.103, \"Speech codec list for GSM and UMTS\", version\n        5.5.0
      (2004-09), 3rd Generation Partnership Project (3GPP).\n   [29] Schulzrinne,
      H., Rao, A., and R. Lanphier, \"Real Time Streaming\n        Protocol (RTSP)\",
      RFC 2326, April 1998.\n   [30] Handley, M., Perkins, C., and E. Whelan, \"Session
      Announcement\n        Protocol\", RFC 2974, October 2000.\n   [31] 3GPP TS 26.244,
      \"3GPP file format (3GP)\", version 6.1.0 (2004-\n        09), 3rd Generation
      Partnership Project (3GPP).\n   [32] Castagno, R. and D. Singer, \"MIME Type
      Registrations for 3rd\n        Generation Partnership Project (3GPP) Multimedia
      files\", RFC\n        3839, July 2004.\n   [33] Kent, S. and K. Seo, \"Security
      Architecture for the Internet\n        Protocol\", RFC 4301, December 2005.\n
      \  [34] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n        Protocol
      Version 1.1\", RFC 4346, April 2006.\n   ETSI documents are available from <http://www.etsi.org/>.\n
      \  3GPP documents are available from <http://www.3gpp.org/>.\n   TIA documents
      are available from <http://www.tiaonline.org/>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Johan Sjoberg\n   Ericsson AB\n   SE-164 80 Stockholm,
    SWEDEN\n   Phone: +46 8 7190000\n   EMail: Johan.Sjoberg@ericsson.com\n   Magnus
    Westerlund\n   Ericsson Research\n   Ericsson AB\n   SE-164 80 Stockholm, SWEDEN\n
    \  Phone: +46 8 7190000\n   EMail: Magnus.Westerlund@ericsson.com\n   Ari Lakaniemi\n
    \  Nokia Research Center\n   P.O.Box 407\n   FIN-00045 Nokia Group, FINLAND\n
    \  Phone: +358-71-8008000\n   EMail: ari.lakaniemi@nokia.com\n   Qiaobing Xie\n
    \  Motorola, Inc.\n   1501 W. Shure Drive, 2-B8\n   Arlington Heights, IL 60004,
    USA\n   Phone: +1-847-632-3028\n   EMail: Qiaobing.Xie@motorola.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   <%ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
