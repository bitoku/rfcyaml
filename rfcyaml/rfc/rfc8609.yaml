- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                             M. Mosko
  contents:
  - "Internet Research Task Force (IRTF)                             M. Mosko\n  \
    \      Content-Centric Networking (CCNx) Messages in TLV Format\n"
- title: Abstract
  contents:
  - "Abstract\n   Content-Centric Networking (CCNx) is a network protocol that uses\
    \ a\n   hierarchical name to forward requests and to match responses to\n   requests.\
    \  This document specifies the encoding of CCNx messages in a\n   TLV packet format,\
    \ including the TLV types used by each message\n   element and the encoding of\
    \ each value.  The semantics of CCNx\n   messages follow the encoding-independent\
    \ CCNx Semantics\n   specification.\n   This document is a product of the Information\
    \ Centric Networking\n   research group (ICNRG).  The document received wide review\
    \ among\n   ICNRG participants and has two full implementations currently in\n\
    \   active use, which have informed the technical maturity of the\n   protocol\
    \ specification.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Research Task\n   Force (IRTF).\
    \  The IRTF publishes the results of Internet-related\n   research and development\
    \ activities.  These results might not be\n   suitable for deployment.  This RFC\
    \ represents the consensus of the\n   Information-Centric Networking Research\
    \ Group of the Internet\n   Research Task Force (IRTF).  Documents approved for\
    \ publication by\n   the IRSG are not candidates for any level of Internet Standard;\
    \ see\n   Section 2 of RFC 7841.\n   Information about the current status of this\
    \ document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8609.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   5\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Type-Length-Value (TLV) Packets . . . . . . . . . . . . .\
    \ . .   5\n     3.1.  Overall Packet Format . . . . . . . . . . . . . . . . .\
    \ .   7\n     3.2.  Fixed Headers . . . . . . . . . . . . . . . . . . . . . .\
    \   8\n       3.2.1.  Interest Fixed Header . . . . . . . . . . . . . . . .  \
    \ 9\n         3.2.1.1.  Interest HopLimit . . . . . . . . . . . . . . . .   9\n\
    \       3.2.2.  Content Object Fixed Header . . . . . . . . . . . . .   9\n  \
    \     3.2.3.  Interest Return Fixed Header  . . . . . . . . . . . .  10\n    \
    \     3.2.3.1.  Interest Return HopLimit  . . . . . . . . . . . .  10\n      \
    \   3.2.3.2.  Interest Return Flags . . . . . . . . . . . . . .  10\n        \
    \ 3.2.3.3.  Return Code . . . . . . . . . . . . . . . . . . .  10\n     3.3. \
    \ Global Formats  . . . . . . . . . . . . . . . . . . . . .  11\n       3.3.1.\
    \  Pad . . . . . . . . . . . . . . . . . . . . . . . . .  11\n       3.3.2.  Organization-Specific\
    \ TLVs  . . . . . . . . . . . . .  12\n       3.3.3.  Hash Format . . . . . .\
    \ . . . . . . . . . . . . . . .  12\n       3.3.4.  Link  . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  13\n     3.4.  Hop-by-Hop TLV Headers  . . . .\
    \ . . . . . . . . . . . . .  14\n       3.4.1.  Interest Lifetime . . . . . .\
    \ . . . . . . . . . . . .  14\n       3.4.2.  Recommended Cache Time  . . . .\
    \ . . . . . . . . . . .  15\n       3.4.3.  Message Hash  . . . . . . . . . .\
    \ . . . . . . . . . .  16\n     3.5.  Top-Level Types . . . . . . . . . . . .\
    \ . . . . . . . . .  17\n     3.6.  CCNx Message TLV  . . . . . . . . . . . .\
    \ . . . . . . . .  18\n       3.6.1.  Name  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  19\n         3.6.1.1.  Name Segments . . . . . . . . . . . .\
    \ . . . . . .  20\n         3.6.1.2.  Interest Payload ID . . . . . . . . . .\
    \ . . . . .  20\n       3.6.2.  Message TLVs  . . . . . . . . . . . . . . . .\
    \ . . . .  21\n         3.6.2.1.  Interest Message TLVs . . . . . . . . . . .\
    \ . . .  21\n         3.6.2.2.  Content Object Message TLVs . . . . . . . . .\
    \ . .  23\n       3.6.3.  Payload . . . . . . . . . . . . . . . . . . . . . .\
    \ .  25\n       3.6.4.  Validation  . . . . . . . . . . . . . . . . . . . . .\
    \  25\n         3.6.4.1.  Validation Algorithm  . . . . . . . . . . . . . .  25\n\
    \         3.6.4.2.  Validation Payload  . . . . . . . . . . . . . . .  32\n  \
    \ 4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  33\n    \
    \ 4.1.  Packet Type Registry  . . . . . . . . . . . . . . . . . .  33\n     4.2.\
    \  Interest Return Code Registry . . . . . . . . . . . . . .  34\n     4.3.  Hop-by-Hop\
    \ Type Registry  . . . . . . . . . . . . . . . .  35\n     4.4.  Top-Level Type\
    \ Registry . . . . . . . . . . . . . . . . .  36\n     4.5.  Name Segment Type\
    \ Registry  . . . . . . . . . . . . . . .  37\n     4.6.  Message Type Registry\
    \ . . . . . . . . . . . . . . . . . .  37\n     4.7.  Payload Type Registry .\
    \ . . . . . . . . . . . . . . . . .  38\n     4.8.  Validation Algorithm Type\
    \ Registry  . . . . . . . . . . .  39\n     4.9.  Validation-Dependent Data Type\
    \ Registry . . . . . . . . .  40\n     4.10. Hash Function Type Registry . . .\
    \ . . . . . . . . . . . .  40\n   5.  Security Considerations . . . . . . . .\
    \ . . . . . . . . . . .  41\n   6.  References  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  44\n     6.1.  Normative References  . . . . . . . . .\
    \ . . . . . . . . .  44\n     6.2.  Informative References  . . . . . . . . .\
    \ . . . . . . . .  44\n   Authors' Addresses  . . . . . . . . . . . . . . . .\
    \ . . . . . . .  46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a Type-Length-Value (TLV) packet\
    \ format and\n   the TLV type and value encodings for CCNx messages.  A full\n\
    \   description of the CCNx network protocol, providing an encoding-free\n   description\
    \ of CCNx messages and message elements, may be found in\n   [RFC8569].  CCNx\
    \ is a network protocol that uses a hierarchical name\n   to forward requests\
    \ and to match responses to requests.  It does not\n   use endpoint addresses;\
    \ the Internet Protocol does.  Restrictions in\n   a request can limit the response\
    \ by the public key of the response's\n   signer or the cryptographic hash of\
    \ the response.  Every CCNx\n   forwarder along the path does the name matching\
    \ and restriction\n   checking.  The CCNx protocol fits within the broader framework\
    \ of\n   Information-Centric Networking (ICN) protocols [RFC7927].\n   This document\
    \ describes a TLV scheme using a fixed 2-byte T and a\n   fixed 2-byte L field.\
    \  The rational for this choice is described in\n   Section 5.  Briefly, this\
    \ choice avoids multiple encodings of the\n   same value (aliases) and reduces\
    \ the work of a validator to ensure\n   compliance.  Unlike some uses of TLV in\
    \ networking, each network hop\n   must evaluate the encoding, so even small validation\
    \ latencies at\n   each hop could add up to a large overall forwarding delay.\
    \  For very\n   small packets or low-throughput links, where the extra bytes may\n\
    \   become a concern, one may use a TLV compression protocol, for\n   example,\
    \ [compress] and [CCNxz].\n   This document uses the terms CCNx Packet, CCNx Message,\
    \ and CCNx\n   Message TLV.  A CCNx Packet refers to the entire Layer 3 datagram\
    \ as\n   specified in Section 3.1.  A CCNx Message is the ABNF token defined\n\
    \   in the CCNx Semantics document [RFC8569].  A CCNx Message TLV refers\n   to\
    \ the encoding of a CCNx Message as specified in Section 3.6.\n   This document\
    \ specifies:\n   o  the CCNx Packet format,\n   o  the CCNx Message TLV format,\n\
    \   o  the TLV types used by CCNx messages,\n   o  the encoding of values for\
    \ each type,\n   o  top-level types that exist at the outermost containment,\n\
    \   o  Interest TLVs that exist within Interest containment, and\n   o  Content\
    \ Object TLVs that exist within Content Object containment.\n   This document\
    \ is supplemented by these documents:\n   o  [RFC8569], which covers message semantics\
    \ and the protocol\n      operation regarding Interest and Content Object, including\
    \ the\n      Interest Return protocol.\n   o  [CCNxURI], which covers the CCNx\
    \ URI notation.\n   The type values in Section 4 conform to the IANA-assigned\
    \ numbers for\n   the CCNx protocol.  This document uses the symbolic names defined\
    \ in\n   that section.  All TLV type values are relative to their parent\n   containers.\
    \  For example, each level of a nested TLV structure might\n   define a \"type\
    \ = 1\" with a completely different meaning.\n   Packets are represented as 32-bit\
    \ wide words using ASCII art.  Due to\n   the nested levels of TLV encoding and\
    \ the presence of optional fields\n   and variable sizes, there is no concise\
    \ way to represent all\n   possibilities.  We use the convention that ASCII art\
    \ fields enclosed\n   by vertical bars \"|\" represent exact bit widths.  Fields\
    \ with a\n   forward slash \"/\" are variable bit widths, which we typically pad\
    \ out\n   to word alignment for picture readability.\n   The document represents\
    \ the consensus of the ICN RG.  It is the first\n   ICN protocol from the RG,\
    \ created from the early CCNx protocol [nnc]\n   with significant revision and\
    \ input from the ICN community and RG\n   members.  The document has received\
    \ critical reading by several\n   members of the ICN community and the RG.  The\
    \ authors and RG chairs\n   approve of the contents.  The document is sponsored\
    \ under the IRTF\n   and is not issued by the IETF and is not an IETF standard.\
    \  This is\n   an experimental protocol and may not be suitable for any specific\n\
    \   application and the specification may change in the future.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   These definitions summarize items defined in [RFC8569]. \
    \ This\n   document defines their encodings.\n   o  Name: A hierarchically structured\
    \ variable-length identifier.  It\n      is an ordered list of path segments,\
    \ which are variable-length\n      octet strings.  In human-readable form, it\
    \ is represented in URI\n      format as \"ccnx:/path/part\".  There is no host\
    \ or query string.\n      See [CCNxURI] for complete details.\n   o  Interest:\
    \ A message requesting a Content Object with a matching\n      Name and other\
    \ optional selectors to choose from multiple objects\n      with the same Name.\
    \  Any Content Object with a Name and attributes\n      that matches the Name\
    \ and optional selectors of the Interest is\n      said to satisfy the Interest.\n\
    \   o  Content Object: A data object sent in response to an Interest\n      request.\
    \  It has an optional Name and a content payload that are\n      bound together\
    \ via cryptographic means.\n"
- title: 3.  Type-Length-Value (TLV) Packets
  contents:
  - "3.  Type-Length-Value (TLV) Packets\n   We use 16-bit Type and 16-bit Length\
    \ fields to encode TLV-based\n   packets.  This provides 65,536 different possible\
    \ types and value\n   field lengths of up to 64 KiB.  With 65,536 possible types\
    \ at each\n   level of TLV encoding, there should be sufficient space for basic\n\
    \   protocol types, while also allowing ample room for experimentation,\n   application\
    \ use, vendor extensions, and growth.  This encoding does\n   not allow for jumbo\
    \ packets beyond 64 KiB total length.  If used on a\n   media that allows for\
    \ jumbo frames, we suggest defining a media\n   adaptation envelope that allows\
    \ for multiple smaller frames.\n   +--------+------------------+---------------------------------------+\n\
    \   | Abbrev |       Name       | Description                           |\n  \
    \ +--------+------------------+---------------------------------------+\n   |\
    \ T_ORG  | Vendor Specific  | Information specific to a vendor      |\n   |  \
    \      |   Information    | implementation (Section 3.3.2).       |\n   |    \
    \    |                  |                                       |\n   | T_PAD\
    \  |     Padding      | Adds padding to a field (Section      |\n   |        |\
    \                  | 3.3.1).                               |\n   |        |  \
    \                |                                       |\n   |  n/a   |   Experimental\
    \   | Experimental use.                     |\n   +--------+------------------+---------------------------------------+\n\
    \                        Table 1: Reserved TLV Types\n   There are several global\
    \ TLV definitions that we reserve at all\n   hierarchical contexts.  The TLV types\
    \ in the range 0x1000 - 0x1FFF\n   are Reserved for Experimental Use.  The TLV\
    \ type T_ORG is also\n   Reserved for Vendor Extensions (see Section 3.3.2). \
    \ The TLV type\n   T_PAD is used to optionally pad a field out to some desired\n\
    \   alignment.\n                        1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +---------------+---------------+---------------+---------------+\n   |   \
    \           Type             |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \                    Figure 1: Type and Length encoding\n   The Length field contains\
    \ the length of the Value field in octets.\n   It does not include the length\
    \ of the Type and Length fields.  The\n   Length MAY be zero.\n   TLV structures\
    \ are nestable, allowing the Value field of one TLV\n   structure to contain additional\
    \ TLV structures.  The enclosing TLV\n   structure is called the container of\
    \ the enclosed TLV.\n   Type values are context dependent.  Within a TLV container,\
    \ one may\n   reuse previous type values for new context-dependent purposes.\n"
- title: 3.1.  Overall Packet Format
  contents:
  - "3.1.  Overall Packet Format\n   Each CCNx Packet includes the 8-byte fixed header,\
    \ described below,\n   followed by a set of TLV fields.  These fields are optional\
    \ hop-by-\n   hop headers and the Packet Payload.\n                        1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |    Version    |  PacketType   |         PacketLength          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           PacketType-specific fields          | HeaderLength  |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional hop-by-hop header TLVs                               /\n   +---------------+---------------+---------------+---------------+\n\
    \   / PacketPayload TLVs                                            /\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 2: Overall Packet Format\n   The PacketPayload of\
    \ a CCNx Packet is the protocol message itself.\n   The Content Object Hash is\
    \ computed over the PacketPayload only,\n   excluding the fixed and hop-by-hop\
    \ headers, as those might change\n   from hop to hop.  Signed information or similarity\
    \ hashes should not\n   include any of the fixed or hop-by-hop headers.  The PacketPayload\n\
    \   should be self-sufficient in the event that the fixed and hop-by-hop\n   headers\
    \ are removed.  See Message Hash (Section 3.4.3).\n   Following the CCNx Message\
    \ TLV, the PacketPayload may include\n   optional Validation TLVs.\n         \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   | CCNx Message TLV                                              /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional CCNx ValidationAlgorithm TLV                         /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional CCNx ValidationPayload TLV (ValidationAlg required)  /\n   +---------------+---------------+---------------+---------------+\n\
    \                       Figure 3: PacketPayload TLVs\n   After discarding the\
    \ fixed and hop-by-hop headers, the remaining\n   PacketPayload should be a valid\
    \ protocol message.  Therefore, the\n   PacketPayload always begins with 4 bytes\
    \ of type-length that\n   specifies the protocol message (whether it is an Interest,\
    \ Content\n   Object, or other message type) and its total length.  The embedding\n\
    \   of a self-sufficient protocol data unit inside the fixed and hop-by-\n   hop\
    \ headers allows a network stack to discard the headers and operate\n   only on\
    \ the embedded message.  It also decouples the PacketType field\n   -- which specifies\
    \ how to forward the packet -- from the\n   PacketPayload.\n   The range of bytes\
    \ protected by the Validation includes the CCNx\n   Message TLV and the ValidationAlgorithm\
    \ TLV.\n   The ContentObjectHash begins with the CCNx Message TLV and ends at\n\
    \   the tail of the CCNx Packet.\n"
- title: 3.2.  Fixed Headers
  contents:
  - "3.2.  Fixed Headers\n   In Figure 2, the fixed header fields are:\n   o  Version:\
    \ defines the version of the packet, which MUST be 1.\n   o  HeaderLength: The\
    \ length of the fixed header (8 bytes) and hop-by-\n      hop headers.  The minimum\
    \ value MUST be 8.\n   o  PacketType: describes forwarder actions to take on the\
    \ packet.\n   o  PacketLength: Total octets of packet including all headers (fixed\n\
    \      header plus hop-by-hop headers) and protocol message.\n   o  PacketType-specific\
    \ Fields: specific PacketTypes define the use of\n      these bits.\n   The PacketType\
    \ field indicates how the forwarder should process the\n   packet.  A Request\
    \ Packet (Interest) has PacketType PT_INTEREST, a\n   Response (Content Object)\
    \ has PacketType PT_CONTENT, and an Interest\n   Return has PacketType PT_RETURN.\n\
    \   HeaderLength is the number of octets from the start of the CCNx\n   Packet\
    \ (Version) to the end of the hop-by-hop headers.  PacketLength\n   is the number\
    \ of octets from the start of the packet to the end of\n   the packet.  Both lengths\
    \ have a minimum value of 8 (the fixed header\n   itself).\n   The PacketType-specific\
    \ fields are reserved bits whose use depends on\n   the PacketType.  They are\
    \ used for network-level signaling.\n"
- title: 3.2.1.  Interest Fixed Header
  contents:
  - "3.2.1.  Interest Fixed Header\n   If the PacketType is PT_INTEREST, it indicates\
    \ that the packet should\n   be forwarded following the Interest pipeline in Section\
    \ 2.4.4 of\n   [RFC8569].  For this type of packet, the Fixed Header includes\
    \ a\n   field for a HopLimit as well as Reserved and Flags fields.  The\n   Reserved\
    \ field MUST be set to 0 in an Interest.  There are currently\n   no flags defined,\
    \ so the Flags field MUST be set to 0.\n                        1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |    Version    |  PT_INTEREST  |         PacketLength          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |   HopLimit    |   Reserved    |     Flags     | HeaderLength  |\n   +---------------+---------------+---------------+---------------+\n\
    \                         Figure 4: Interest Header\n"
- title: 3.2.1.1.  Interest HopLimit
  contents:
  - "3.2.1.1.  Interest HopLimit\n   For an Interest message, the HopLimit is a counter\
    \ that is\n   decremented with each hop.  It limits the distance an Interest may\n\
    \   travel on the network.  The node originating the Interest MAY put in\n   any\
    \ value up to the maximum of 255.  Each node that receives an\n   Interest with\
    \ a HopLimit decrements the value upon reception.  If the\n   value is 0 after\
    \ the decrement, the Interest MUST NOT be forwarded\n   off the node.\n   It is\
    \ an error to receive an Interest from a remote node with the\n   HopLimit field\
    \ set to 0.\n"
- title: 3.2.2.  Content Object Fixed Header
  contents:
  - "3.2.2.  Content Object Fixed Header\n   If the PacketType is PT_CONTENT, it indicates\
    \ that the packet should\n   be forwarded following the Content Object pipeline\
    \ in Section 2.4.4\n   of [RFC8569].  A Content Object defines a Flags field;\
    \ however, there\n   are currently no flags defined, so the Flags field must be\
    \ set to 0.\n                        1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |    Version    |  PT_CONTENT   |         PacketLength          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |            Reserved           |     Flags     | HeaderLength  |\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 5: Content Object Header\n"
- title: 3.2.3.  Interest Return Fixed Header
  contents:
  - "3.2.3.  Interest Return Fixed Header\n   If the PacketType is PT_RETURN, it indicates\
    \ that the packet should\n   be processed following the Interest Return rules\
    \ in Section 10 of\n   [RFC8569].  The only difference between this Interest Return\
    \ message\n   and the original Interest is that the PacketType is changed to\n\
    \   PT_RETURN and a ReturnCode is put into the ReturnCode field.  All\n   other\
    \ fields are unchanged from the Interest packet.  The purpose of\n   this encoding\
    \ is to prevent packet length changes so no additional\n   bytes are needed to\
    \ return an Interest to the previous hop.\n                        1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |    Version    |   PT_RETURN   |         PacketLength          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |   HopLimit    |  ReturnCode   |     Flags     | HeaderLength  |\n   +---------------+---------------+---------------+---------------+\n\
    \                     Figure 6: Interest Return Header\n"
- title: 3.2.3.1.  Interest Return HopLimit
  contents:
  - "3.2.3.1.  Interest Return HopLimit\n   This is the original Interest's HopLimit,\
    \ as received before\n   decrement at the node sending the Interest Return.\n"
- title: 3.2.3.2.  Interest Return Flags
  contents:
  - "3.2.3.2.  Interest Return Flags\n   These are the original Flags as set in the\
    \ Interest.\n"
- title: 3.2.3.3.  Return Code
  contents:
  - "3.2.3.3.  Return Code\n   This section maps the Return Code name [RFC8569] to\
    \ the TLV symbolic\n   name.  Section 4.2 maps the symbolic names to numeric values.\
    \  This\n   field is set by the node creating the Interest Return.\n   A return\
    \ code of \"0\" MUST NOT be used, as it indicates that the\n   returning system\
    \ did not modify the Return Code field.\n   +-------------------------------------+-----------------------------+\n\
    \   |             Return Type             | Name in RFC 8569            |\n  \
    \ +-------------------------------------+-----------------------------+\n   |\
    \          T_RETURN_NO_ROUTE          | No Route                    |\n   |  \
    \                                   |                             |\n   |    \
    \   T_RETURN_LIMIT_EXCEEDED       | Hop Limit Exceeded          |\n   |      \
    \                               |                             |\n   |        T_RETURN_NO_RESOURCES\
    \        | No Resources                |\n   |                               \
    \      |                             |\n   |         T_RETURN_PATH_ERROR     \
    \    | Path Error                  |\n   |                                   \
    \  |                             |\n   |         T_RETURN_PROHIBITED         |\
    \ Prohibited                  |\n   |                                     |  \
    \                           |\n   |          T_RETURN_CONGESTED         | Congested\
    \                   |\n   |                                     |            \
    \                 |\n   |        T_RETURN_MTU_TOO_LARGE       | MTU too large\
    \               |\n   |                                     |                \
    \             |\n   | T_RETURN_UNSUPPORTED_HASH_RESTRICTI | Unsupported ContentObjectHa\
    \ |\n   |                  ON                 | shRestriction               |\n\
    \   |                                     |                             |\n  \
    \ |     T_RETURN_MALFORMED_INTEREST     | Malformed Interest          |\n   +-------------------------------------+-----------------------------+\n\
    \                           Table 2: Return Codes\n"
- title: 3.3.  Global Formats
  contents:
  - "3.3.  Global Formats\n   This section defines global formats that may be nested\
    \ within other\n   TLVs.\n"
- title: 3.3.1.  Pad
  contents:
  - "3.3.1.  Pad\n   The pad type may be used by sources that prefer word-aligned\
    \ data.\n   Padding 4-byte words, for example, would use a 1-byte, 2-byte, and\n\
    \   3-byte Length.  Padding 8-byte words would use a (0, 1, 2, 3, 5, 6,\n   7)-byte\
    \ Length.\n   One MUST NOT pad inside a Name.  Apart from that, a pad MAY be\n\
    \   inserted after any other TLV in the CCNx Message TLV or in the\n   ValidationAlgorithm\
    \ TLV.  In the remainder of this document, we will\n   not show optional Pad TLVs.\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |             T_PAD             |             Length            |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                 variable-length pad MUST be zeros             /\n   +---------------+---------------+---------------+---------------+\n\
    \                          Figure 7: Pad Encoding\n"
- title: 3.3.2.  Organization-Specific TLVs
  contents:
  - "3.3.2.  Organization-Specific TLVs\n   Organization-specific TLVs (also known\
    \ as Vendor TLVs) MUST use the\n   T_ORG type.  The Length field is the length\
    \ of the organization-\n   specific information plus 3.  The Value begins with\
    \ the 3 byte\n   organization number derived from the network byte order encoding\
    \ of\n   the IANA \"Private Enterprise Numbers\" registry [IANA-PEN], followed\n\
    \   by the organization-specific information.\n   A T_ORG MAY be used as a path\
    \ segment in a Name.  It is treated like\n   any other path segment.\n       \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |             T_ORG             |     Length (3+value length)   |\n   +---------------+---------------+---------------+---------------+\n\
    \   |   PEN[0]      |    PEN[1]     |     PEN[2]    |               /\n   +---------------+---------------+---------------+\
    \               +\n   /                  Vendor Specific Value               \
    \         /\n   +---------------+---------------+---------------+---------------+\n\
    \                   Figure 8: Organization-Specific TLVs\n"
- title: 3.3.3.  Hash Format
  contents:
  - "3.3.3.  Hash Format\n   Hash values are used in several fields throughout a packet.\
    \  This TLV\n   encoding is commonly embedded inside those fields to specify the\n\
    \   specific hash function used and its value.  Note that the reserved\n   TLV\
    \ types are also reserved here for user-defined experimental\n   functions.\n\
    \   The LENGTH field of the hash value MUST be less than or equal to the\n   hash\
    \ function length.  If the LENGTH is less than the full length, it\n   is taken\
    \ as the left LENGTH bytes of the hash function output.  Only\n   specified truncations\
    \ are allowed, not arbitrary truncations.\n   This nested format is used because\
    \ it allows binary comparison of\n   hash values for certain fields without a\
    \ router needing to understand\n   a new hash function.  For example, the KeyIdRestriction\
    \ is bit-wise\n   compared between an Interest's KeyIdRestriction field and a\n\
    \   ContentObject's KeyId field.  This format means the outer field\n   values\
    \ do not change with differing hash functions so a router can\n   still identify\
    \ those fields and do a binary comparison of the hash\n   TLV without need to\
    \ understand the specific hash used.  An\n   alternative approach, such as using\
    \ T_KEYID_SHA512-256, would require\n   each router keeps an up-to-date parser\
    \ and supporting user-defined\n   hash functions here would explode the parsing\
    \ state-space.\n   A CCNx entity MUST support the hash type T_SHA-256.  An entity\
    \ MAY\n   support the remaining hash types.\n                  +-----------+------------------------+\n\
    \                  |   Abbrev  |    Lengths (octets)    |\n                  +-----------+------------------------+\n\
    \                  | T_SHA-256 |           32           |\n                  |\
    \           |                        |\n                  | T_SHA-512 |      \
    \   64, 32         |\n                  |           |                        |\n\
    \                  |    n/a    | Experimental TLV types |\n                  +-----------+------------------------+\n\
    \                       Table 3: CCNx Hash Functions\n                       \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |             T_FOO             |              36               |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           T_SHA512            |               32              |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                        32-byte hash value                     /\n   +---------------+---------------+---------------+---------------+\n\
    \                Figure 9: Example nesting inside type T_FOO\n"
- title: 3.3.4.  Link
  contents:
  - "3.3.4.  Link\n   A Link is the tuple: {Name, [KeyIdRestr], [ContentObjectHashRestr]}.\n\
    \   It is a general encoding that is used in both the payload of a\n   Content\
    \ Object with PayloadType = \"Link\" and in a Content Object's\n   KeyLink field.\
    \  A Link is essentially the body of an Interest.\n                        1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   / Mandatory CCNx Name                                           /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional KeyIdRestriction                                     /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional ContentObjectHashRestriction                         /\n   +---------------+---------------+---------------+---------------+\n\
    \                         Figure 10: Link Encoding\n"
- title: 3.4.  Hop-by-Hop TLV Headers
  contents:
  - "3.4.  Hop-by-Hop TLV Headers\n   Hop-by-hop TLV headers are unordered and meaning\
    \ MUST NOT be attached\n   to their ordering.  Three hop-by-hop headers are described\
    \ in this\n   document:\n   +-------------+--------------------+--------------------------------+\n\
    \   |    Abbrev   |        Name        | Description                    |\n  \
    \ +-------------+--------------------+--------------------------------+\n   |\
    \  T_INTLIFE  | Interest Lifetime  | The time an Interest should    |\n   |  \
    \           |  (Section 3.4.1)   | stay pending at an             |\n   |    \
    \         |                    | intermediate node.             |\n   |      \
    \       |                    |                                |\n   | T_CACHETIME\
    \ | Recommended Cache  | The Recommended Cache Time for |\n   |             |\
    \   Time (Section    | Content Objects.               |\n   |             |  \
    \     3.4.2)       |                                |\n   |             |    \
    \                |                                |\n   |  T_MSGHASH  |    Message\
    \ Hash    | A cryptographic hash (Section  |\n   |             |  (Section 3.4.3)\
    \   | 3.3.3).                        |\n   +-------------+--------------------+--------------------------------+\n\
    \                     Table 4: Hop-by-Hop Header Types\n   Additional hop-by-hop\
    \ headers are defined in higher level\n   specifications such as the fragmentation\
    \ specification.\n"
- title: 3.4.1.  Interest Lifetime
  contents:
  - "3.4.1.  Interest Lifetime\n   The Interest Lifetime is the time that an Interest\
    \ should stay\n   pending at an intermediate node.  It is expressed in milliseconds\
    \ as\n   an unsigned integer in network byte order.\n   A value of 0 (encoded\
    \ as 1 byte 0x00) indicates the Interest does not\n   elicit a Content Object\
    \ response.  It should still be forwarded, but\n   no reply is expected and a\
    \ forwarder could skip creating a PIT entry.\n                        1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |          T_INTLIFE            |             Length            |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                                                               /\n   /  \
    \                    Lifetime (Length octets)                 /\n   /        \
    \                                                       /\n   +---------------+---------------+---------------+---------------+\n\
    \                   Figure 11: Interest Lifetime Encoding\n"
- title: 3.4.2.  Recommended Cache Time
  contents:
  - "3.4.2.  Recommended Cache Time\n   The Recommended Cache Time (RCT) is a measure\
    \ of the useful lifetime\n   of a Content Object as assigned by a content producer\
    \ or upstream\n   node.  It serves as a guideline to the Content Store cache in\n\
    \   determining how long to keep the Content Object.  It is a\n   recommendation\
    \ only and may be ignored by the cache.  This is in\n   contrast to the ExpiryTime\
    \ (described in Section 3.6.2.2.2) which\n   takes precedence over the RCT and\
    \ must be obeyed.\n   Because the Recommended Cache Time is an optional hop-by-hop\
    \ header\n   and not a part of the signed message, a content producer may re-issue\n\
    \   a previously signed Content Object with an updated RCT without\n   needing\
    \ to re-sign the message.  There is little ill effect from an\n   attacker changing\
    \ the RCT as the RCT serves as a guideline only.\n   The Recommended Cache Time\
    \ (a millisecond timestamp) is an unsigned\n   integer in network byte order that\
    \ indicates the time when the\n   payload expires (as the number of milliseconds\
    \ since the epoch in\n   UTC).  It is a 64-bit field.\n                      \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |         T_CACHETIME           |               8               |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                                                               /\n   /  \
    \                  Recommended Cache Time                     /\n   /        \
    \                                                       /\n   +---------------+---------------+---------------+---------------+\n\
    \                Figure 12: Recommended Cache Time Encoding\n"
- title: 3.4.3.  Message Hash
  contents:
  - "3.4.3.  Message Hash\n   Within a trusted domain, an operator may calculate the\
    \ message hash\n   at a border device and insert that value into the hop-by-hop\
    \ headers\n   of a message.  An egress device should remove the value.  This\n\
    \   permits intermediate devices within that trusted domain to match\n   against\
    \ a ContentObjectHashRestriction without calculating it at\n   every hop.\n  \
    \ The message hash is a cryptographic hash from the start of the CCNx\n   Message\
    \ TLV to the end of the packet.  It is used to match against\n   the ContentObjectHashRestriction\
    \ (Section 3.6.2.1.2).  The Message\n   Hash may be of longer length than an Interest's\
    \ restriction, in which\n   case the device should use the left bytes of the Message\
    \ Hash to\n   check against the Interest's value.\n   The Message Hash may only\
    \ carry one hash type and there may only be\n   one Message Hash header.\n   The\
    \ Message Hash header is unprotected, so this header is only of\n   practical\
    \ use within a trusted domain, such as an operator's\n   autonomous system.\n\
    \                       1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |          T_MSGHASH            |         (length + 4)          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |          hash type            |            length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                           hash value                          /\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 13: Message Hash Header\n"
- title: 3.5.  Top-Level Types
  contents:
  - "3.5.  Top-Level Types\n   The top-level TLV types listed below exist at the outermost\
    \ level of\n   a CCNx Message TLV.\n   +----------------------+------------+-------------------------------+\n\
    \   |        Abbrev        |    Name    | Description                   |\n  \
    \ +----------------------+------------+-------------------------------+\n   |\
    \      T_INTEREST      |  Interest  | An Interest MessageType.      |\n   |  \
    \                    |  (Section  |                               |\n   |    \
    \                  |    3.6)    |                               |\n   |      \
    \                |            |                               |\n   |       T_OBJECT\
    \       |  Content   | A Content Object MessageType  |\n   |                 \
    \     |   Object   |                               |\n   |                   \
    \   |  (Section  |                               |\n   |                     \
    \ |    3.6)    |                               |\n   |                      |\
    \            |                               |\n   |   T_VALIDATION_ALG   | Validation\
    \ | The method of message         |\n   |                      | Algorithm  |\
    \ verification such as a        |\n   |                      |  (Section  | Message\
    \ Integrity Check       |\n   |                      |  3.6.4.1)  | (MIC), Message\
    \ Authentication |\n   |                      |            | Code (MAC), or cryptographic\
    \  |\n   |                      |            | signature.                    |\n\
    \   |                      |            |                               |\n  \
    \ | T_VALIDATION_PAYLOAD | Validation | The validation output, such   |\n   |\
    \                      |  Payload   | as the CRC32C code or the RSA |\n   |  \
    \                    |  (Section  | signature.                    |\n   |    \
    \                  |  3.6.4.2)  |                               |\n   +----------------------+------------+-------------------------------+\n\
    \                       Table 5: CCNx Top Level Types\n"
- title: 3.6.  CCNx Message TLV
  contents:
  - "3.6.  CCNx Message TLV\n   This is the format for the CCNx Message itself.  The\
    \ CCNx Message TLV\n   is the portion of the CCNx Packet between the hop-by-hop\
    \ headers and\n   the Validation TLVs.  The figure below is an expansion of the\
    \ \"CCNx\n   Message TLV\" depicted in the beginning of Section 3.  The CCNx\n\
    \   Message TLV begins with MessageType and runs through the optional\n   Payload.\
    \  The same general format is used for both Interest and\n   Content Object messages\
    \ which are differentiated by the MessageType\n   field.  The first enclosed TLV\
    \ of a CCNx Message TLV is always the\n   Name TLV, if present.  This is followed\
    \ by an optional Message TLVs\n   and an optional Payload TLV.\n             \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |         MessageType           |         MessageLength         |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Name TLV       (Type = T_NAME)                                /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional Message TLVs   (Various Types)                       /\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional Payload TLV  (Type = T_PAYLOAD)                      /\n   +---------------+---------------+---------------+---------------+\n\
    \                   Figure 14: CCNx Message TLV Encoding\n   +-----------+---------------+---------------------------------------+\n\
    \   |   Abbrev  |      Name     | Description                           |\n  \
    \ +-----------+---------------+---------------------------------------+\n   |\
    \   T_NAME  | Name (Section | The CCNx Name requested in an         |\n   |  \
    \         |     3.6.1)    | Interest or published in a Content    |\n   |    \
    \       |               | Object.                               |\n   |      \
    \     |               |                                       |\n   | T_PAYLOAD\
    \ |    Payload    | The message payload.                  |\n   |           |\
    \    (Section   |                                       |\n   |           |  \
    \   3.6.3)    |                                       |\n   +-----------+---------------+---------------------------------------+\n\
    \                      Table 6: CCNx Message TLV Types\n"
- title: 3.6.1.  Name
  contents:
  - "3.6.1.  Name\n   A Name is a TLV encoded sequence of segments.  The table below\
    \ lists\n   the type values appropriate for these name segments.  A Name MUST\
    \ NOT\n   include Pad TLVs.\n   As described in CCNx Semantics [RFC8569], using\
    \ the CCNx URI\n   [CCNxURI] notation, a T_NAME with zero length corresponds to\
    \ \"ccnx:/\"\n   (the default route).  The message grammar does not allow the\
    \ first\n   name segment to have zero length in a CCNx Message TLV Name.  In the\n\
    \   TLV encoding, \"ccnx:/\" corresponds to T_NAME with zero length.\n       \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |            T_NAME             |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Name segment TLVs                                             /\n   +---------------+---------------+---------------+---------------+\n\
    \                         Figure 15: Name Encoding\n   +---------------+-------------+-------------------------------------+\n\
    \   | Symbolic Name |     Name    | Description                         |\n  \
    \ +---------------+-------------+-------------------------------------+\n   |\
    \ T_NAMESEGMENT |     Name    | A generic name segment.             |\n   |  \
    \             |   segment   |                                     |\n   |    \
    \           |   (Section  |                                     |\n   |      \
    \         |   3.6.1.1)  |                                     |\n   |        \
    \       |             |                                     |\n   |     T_IPID\
    \    |   Interest  | An identifier that represents the   |\n   |             \
    \  |  Payload ID | Interest Payload field. As an       |\n   |               |\
    \   (Section  | example, the Payload ID might be a  |\n   |               |  \
    \ 3.6.1.2)  | hash of the Interest Payload.  This |\n   |               |    \
    \         | provides a way to differentiate     |\n   |               |      \
    \       | between Interests based on their    |\n   |               |        \
    \     | payloads without having to parse    |\n   |               |          \
    \   | all the bytes of the payload        |\n   |               |            \
    \ | itself, and instead using only this |\n   |               |             |\
    \ Payload ID name segment.            |\n   |               |             |  \
    \                                   |\n   |   T_APP:00 -  | Application | Application-specific\
    \ payload in a   |\n   |   T_APP:4096  |  Components | name segment.  An application\
    \ may   |\n   |               |   (Section  | apply its own semantics to the 4096\
    \ |\n   |               |   3.6.1.1)  | reserved types.                     |\n\
    \   +---------------+-------------+-------------------------------------+\n  \
    \                       Table 7: CCNx Name Types\n"
- title: 3.6.1.1.  Name Segments
  contents:
  - "3.6.1.1.  Name Segments\n   4096 special application payload name segments are\
    \ allocated.  These\n   have application semantics applied to them.  A good convention\
    \ is to\n   put the application's identity in the name prior to using these name\n\
    \   segments.\n   For example, a name like \"ccnx:/foo/bar/hi\" would be encoded\
    \ as:\n                        1                   2                   3\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |            (T_NAME)           |           0x14 (20)           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |        (T_NAME_SEGMENT)       |           0x03 (3)            |\n   +---------------+---------------+---------------+---------------+\n\
    \   |       f                o               o      |(T_NAME_SEGMENT)\n   +---------------+---------------+---------------+---------------+\n\
    \   |               |            0x03 (3)           |       b       |\n   +---------------+---------------+---------------+---------------+\n\
    \   |      a                r       |           (T_NAME_SEGMENT)    |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           0x02 (2)            |       h       |       i       |\n   +---------------+---------------+---------------+---------------+\n\
    \                     Figure 16: Name Encoding Example\n"
- title: 3.6.1.2.  Interest Payload ID
  contents:
  - "3.6.1.2.  Interest Payload ID\n   The InterestPayloadID is a name segment created\
    \ by the origin of an\n   Interest to represent the Interest Payload.  This allows\
    \ the proper\n   multiplexing of Interests based on their name if they have different\n\
    \   payloads.  A common representation is to use a hash of the Interest\n   Payload\
    \ as the InterestPayloadID.\n   As part of the Value of the TLV, the InterestPayloadID\
    \ contains a\n   one-octet identifier of the method used to create the\n   InterestPayloadID\
    \ followed by a variable-length octet string.  An\n   implementation is not required\
    \ to implement any of the methods to\n   receive an Interest; the InterestPayloadID\
    \ may be treated only as an\n   opaque octet string for the purposes of multiplexing\
    \ Interests with\n   different payloads.  Only a device creating an InterestPayloadID\
    \ name\n   segment or a device verifying such a segment needs to implement the\n\
    \   algorithms.\n   It uses the encoding of hash values specified in Section 3.3.3.\n\
    \   In normal operations, we recommend displaying the InterestPayloadID\n   as\
    \ an opaque octet string in a CCNx URI, as this is the common\n   denominator\
    \ for implementation parsing.\n   The InterestPayloadID, even if it is a hash,\
    \ should not convey any\n   security context.  If a system requires confirmation\
    \ that a specific\n   entity created the InterestPayload, it should use a cryptographic\n\
    \   signature on the Interest via the ValidationAlgorithm and\n   ValidationPayload\
    \ or use its own methods inside the Interest Payload.\n"
- title: 3.6.2.  Message TLVs
  contents:
  - "3.6.2.  Message TLVs\n   Each message type (Interest or Content Object) is associated\
    \ with a\n   set of optional Message TLVs.  Additional specification documents\
    \ may\n   extend the types associated with each.\n"
- title: 3.6.2.1.  Interest Message TLVs
  contents:
  - "3.6.2.1.  Interest Message TLVs\n   There are two Message TLVs currently associated\
    \ with an Interest\n   message: the KeyIdRestriction selector and the ContentObjectHashRestr\n\
    \   selector are used to narrow the universe of acceptable Content\n   Objects\
    \ that would satisfy the Interest.\n                        1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |         MessageType           |         MessageLength         |\n   +---------------+---------------+---------------+---------------+\n\
    \   | Name TLV                                                      |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional KeyIdRestriction TLV                                 /\n   +---------------------------------------------------------------+\n\
    \   / Optional ContentObjectHashRestriction TLV                     /\n   +---------------------------------------------------------------+\n\
    \                     Figure 17: Interest Message TLVs\n   +----------------+------------------------------+-------------------+\n\
    \   |     Abbrev     |             Name             | Description       |\n  \
    \ +----------------+------------------------------+-------------------+\n   |\
    \  T_KEYIDRESTR  |  KeyIdRestriction (Section   | A representation  |\n   |  \
    \              |          3.6.2.1.1)          | (as per Section   |\n   |    \
    \            |                              | 3.3.3) of the     |\n   |      \
    \          |                              | KeyId             |\n   |        \
    \        |                              |                   |\n   | T_OBJHASHRESTR\
    \ | ContentObjectHashRestriction | A representation  |\n   |                |\
    \     (Section 3.6.2.1.2)      | (as per Section   |\n   |                |  \
    \                            | 3.3.3) of the     |\n   |                |    \
    \                          | hash of the       |\n   |                |      \
    \                        | specific Content  |\n   |                |        \
    \                      | Object that would |\n   |                |          \
    \                    | satisfy the       |\n   |                |            \
    \                  | Interest.         |\n   +----------------+------------------------------+-------------------+\n\
    \                 Table 8: CCNx Interest Message TLV Types\n"
- title: 3.6.2.1.1.  KeyIdRestriction
  contents:
  - "3.6.2.1.1.  KeyIdRestriction\n   An Interest MAY include a KeyIdRestriction selector.\
    \  This ensures\n   that only Content Objects with matching KeyIds will satisfy\
    \ the\n   Interest.  See Section 3.6.4.1.4.1 for the format of a KeyId.\n"
- title: 3.6.2.1.2.  ContentObjectHashRestriction
  contents:
  - "3.6.2.1.2.  ContentObjectHashRestriction\n   An Interest MAY contain a ContentObjectHashRestriction\
    \ selector.\n   This is the hash of the Content Object -- the self-certifying\
    \ name\n   restriction that must be verified in the network, if an Interest\n\
    \   carried this restriction (see Message Hash (Section 3.4.3)).  The\n   LENGTH\
    \ MUST be from one of the allowed values for that hash (see\n   Section 3.3.3).\n\
    \   The ContentObjectHashRestriction SHOULD be of type T_SHA-256 and of\n   length\
    \ 32 bytes.\n                        1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |        T_OBJHASHRESTR         |           (LENGTH+4)          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           hash type           |             LENGTH            |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                     LENGTH octets of hash                     /\n   +---------------+---------------+---------------+---------------+\n\
    \             Figure 18: ContentObjectHashRestriction Encoding\n"
- title: 3.6.2.2.  Content Object Message TLVs
  contents:
  - "3.6.2.2.  Content Object Message TLVs\n   The following message TLVs are currently\
    \ defined for Content Objects:\n   PayloadType (optional) and ExpiryTime (optional).\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |         MessageType           |         MessageLength         |\n   +---------------+---------------+---------------+---------------+\n\
    \   | Name TLV                                                      |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Optional PayloadType TLV                                      /\n   +---------------------------------------------------------------+\n\
    \   / Optional ExpiryTime TLV                                       /\n   +---------------------------------------------------------------+\n\
    \                  Figure 19: Content Object Message TLVs\n   +-------------+-------------+---------------------------------------+\n\
    \   |    Abbrev   |     Name    | Description                           |\n  \
    \ +-------------+-------------+---------------------------------------+\n   |\
    \ T_PAYLDTYPE | PayloadType | Indicates the type of Payload         |\n   |  \
    \           |   (Section  | contents.                             |\n   |    \
    \         |  3.6.2.2.1) |                                       |\n   |      \
    \       |             |                                       |\n   |   T_EXPIRY\
    \  |  ExpiryTime | The time at which the Payload         |\n   |             |\
    \   (Section  | expires, as expressed in the number   |\n   |             |  3.6.2.2.2)\
    \ | of milliseconds since the epoch in    |\n   |             |             |\
    \ UTC.  If missing, Content Object may  |\n   |             |             | be\
    \ used as long as desired.           |\n   +-------------+-------------+---------------------------------------+\n\
    \              Table 9: CCNx Content Object Message TLV Types\n"
- title: 3.6.2.2.1.  PayloadType
  contents:
  - "3.6.2.2.1.  PayloadType\n   The PayloadType is an octet representing the general\
    \ type of the\n   Payload TLV.\n   o  T_PAYLOADTYPE_DATA: Data (possibly encrypted)\n\
    \   o  T_PAYLOADTYPE_KEY: Key\n   o  T_PAYLOADTYPE_LINK: Link\n   The Data type\
    \ indicates that the Payload of the ContentObject is\n   opaque application bytes.\
    \  The Key type indicates that the Payload is\n   a DER-encoded public key.  The\
    \ Link type indicates that the Payload\n   is one or more Links (Section 3.3.4).\
    \  If this field is missing, a\n   Data type is assumed.\n                   \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |            T_PAYLDTYPE        |               1               |\n   +---------------+---------------+---------------+---------------+\n\
    \   |  PayloadType  |\n   +---------------+\n                      Figure 20:\
    \ PayloadType Encoding\n"
- title: 3.6.2.2.2.  ExpiryTime
  contents:
  - "3.6.2.2.2.  ExpiryTime\n   The ExpiryTime is the time at which the Payload expires,\
    \ as expressed\n   by a timestamp containing the number of milliseconds since\
    \ the epoch\n   in UTC.  It is a network byte order unsigned integer in a 64-bit\n\
    \   field.  A cache or end system should not respond with a Content\n   Object\
    \ past its ExpiryTime.  Routers forwarding a Content Object do\n   not need to\
    \ check the ExpiryTime.  If the ExpiryTime field is\n   missing, the Content Object\
    \ has no expressed expiration, and a cache\n   or end system may use the Content\
    \ Object for as long as desired.\n                        1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |           T_EXPIRY            |               8               |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                          ExpiryTime                           /\n   /  \
    \                                                             /\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 21: ExpiryTime encoding\n"
- title: 3.6.3.  Payload
  contents:
  - "3.6.3.  Payload\n   The Payload TLV contains the content of the packet.  It MAY\
    \ be of\n   zero length.  If a packet does not have any payload, this field\n\
    \   SHOULD be omitted, rather than being of zero length.\n                   \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |           T_PAYLOAD           |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                        Payload Contents                       /\n   +---------------+---------------+---------------+---------------+\n\
    \                        Figure 22: Payload Encoding\n"
- title: 3.6.4.  Validation
  contents:
  - "3.6.4.  Validation\n   Both Interests and Content Objects have the option to\
    \ include\n   information about how to validate the CCNx Message.  This information\n\
    \   is contained in two TLVs: the ValidationAlgorithm TLV and the\n   ValidationPayload\
    \ TLV.  The ValidationAlgorithm TLV specifies the\n   mechanism to be used to\
    \ verify the CCNx Message.  Examples include\n   verification with a Message Integrity\
    \ Check (MIC), a Message\n   Authentication Code (MAC), or a cryptographic signature.\
    \  The\n   ValidationPayload TLV contains the validation output, such as the\n\
    \   CRC32C code or the RSA signature.\n   An Interest would most likely only use\
    \ a MIC type of validation -- a\n   CRC, checksum, or digest.\n"
- title: 3.6.4.1.  Validation Algorithm
  contents:
  - "3.6.4.1.  Validation Algorithm\n   The ValidationAlgorithm is a set of nested\
    \ TLVs containing all of the\n   information needed to verify the message.  The\
    \ outermost container\n   has type = T_VALIDATION_ALG.  The first nested TLV defines\
    \ the\n   specific type of validation to be performed on the message.  The type\n\
    \   is identified with the \"ValidationType\" as shown in the figure below\n \
    \  and elaborated in the table below.  Nested within that container are\n   the\
    \ TLVs for any ValidationType-dependent data -- for example, a Key\n   Id, Key\
    \ Locator, etc.\n   Complete examples of several types may be found in Section\
    \ 3.6.4.1.5.\n                        1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |       T_VALIDATION_ALG        |      ValidationAlgLength      |\n   +---------------+---------------+---------------+---------------+\n\
    \   |        ValidationType         |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   / ValidationType-dependent data                                 /\n   +---------------+---------------+---------------+---------------+\n\
    \                 Figure 23: Validation Algorithm Encoding\n   +-----------------+---------------+---------------------------------+\n\
    \   |      Abbrev     |      Name     | Description                     |\n  \
    \ +-----------------+---------------+---------------------------------+\n   |\
    \     T_CRC32C    |     CRC32C    | Castagnoli CRC32 (iSCSI, ext4,  |\n   |  \
    \               |    (Section   | etc.) with normal form          |\n   |    \
    \             |   3.6.4.1.1)  | polynomial 0x1EDC6F41.          |\n   |      \
    \           |               |                                 |\n   |  T_HMAC-SHA256\
    \  |  HMAC-SHA256  | HMAC (RFC 2104) using SHA256    |\n   |                 |\
    \    (Section   | hash.                           |\n   |                 |  \
    \ 3.6.4.1.2)  |                                 |\n   |                 |    \
    \           |                                 |\n   |   T_RSA-SHA256  |   RSA-SHA256\
    \  | RSA public-key signature using  |\n   |                 |    (Section   |\
    \ SHA256 digest.                  |\n   |                 |   3.6.4.1.3)  |  \
    \                               |\n   |                 |               |    \
    \                             |\n   | T_EC-SECP-256K1 |   SECP-256K1  | Elliptic\
    \ Curve signature with   |\n   |                 |    (Section   | SECP-256K1\
    \ parameters (see      |\n   |                 |   3.6.4.1.3)  | [ECC]).     \
    \                    |\n   |                 |               |               \
    \                  |\n   | T_EC-SECP-384R1 |   SECP-384R1  | Elliptic Curve signature\
    \ with   |\n   |                 |    (Section   | SECP-384R1 parameters (see\
    \      |\n   |                 |   3.6.4.1.3)  | [ECC]).                     \
    \    |\n   +-----------------+---------------+---------------------------------+\n\
    \                      Table 10: CCNx Validation Types\n"
- title: 3.6.4.1.1.  Message Integrity Checks
  contents:
  - "3.6.4.1.1.  Message Integrity Checks\n   MICs do not require additional data\
    \ in order to perform the\n   verification.  An example is CRC32C that has a zero-length\
    \ value.\n"
- title: 3.6.4.1.2.  Message Authentication Codes
  contents:
  - "3.6.4.1.2.  Message Authentication Codes\n   MACs are useful for communication\
    \ between two trusting parties who\n   have already shared secret keys.  An example\
    \ is the HMAC algorithm.\n   A MAC uses the KeyId field to identify which shared\
    \ secret is in use.\n   The meaning of the KeyId is specific to the two parties\
    \ involved and\n   could be simply an integer to enumerate keys.  If a new MAC\
    \ requires\n   an additional field, such as an Initialization Vector, that field\n\
    \   would need to be defined as part of the updated specification.\n"
- title: 3.6.4.1.3.  Signature
  contents:
  - "3.6.4.1.3.  Signature\n   Signature type Validators specify a digest mechanism\
    \ and a signing\n   algorithm to verify the message.  Examples include an RSA\
    \ signature\n   on a SHA256 digest, an Elliptic Curve signature with SECP-256K1\n\
    \   parameters, etc.  These Validators require a KeyId and a mechanism\n   for\
    \ locating the publisher's public key (a KeyLocator) -- and\n   optionally a PublicKey\
    \ or Certificate or KeyLink.\n"
- title: 3.6.4.1.4.  Validation-Dependent Data
  contents:
  - "3.6.4.1.4.  Validation-Dependent Data\n   Different Validation Algorithms require\
    \ access to different pieces of\n   data contained in the ValidationAlgorithm\
    \ TLV.  As described above,\n   Key Ids, Key Locators, Public Keys, Certificates,\
    \ Links, and Key\n   Names all play a role in different Validation Algorithms.\
    \  Any number\n   of Validation-Dependent Data containers can be present in a\n\
    \   Validation Algorithm TLV.\n   Below is a table of CCNx ValidationType-dependent\
    \ data types:\n   +-------------+-----------------+-----------------------------------+\n\
    \   |    Abbrev   |       Name      | Description                       |\n  \
    \ +-------------+-----------------+-----------------------------------+\n   |\
    \   T_KEYID   |   SignerKeyId   | An identifier of the shared       |\n   |  \
    \           |     (Section    | secret or public key associated   |\n   |    \
    \         |   3.6.4.1.4.1)  | with a MAC or Signature.          |\n   |      \
    \       |                 |                                   |\n   | T_PUBLICKEY\
    \ |    Public Key   | DER-encoded public key.           |\n   |             |\
    \     (Section    |                                   |\n   |             |  \
    \ 3.6.4.1.4.2)  |                                   |\n   |             |    \
    \             |                                   |\n   |    T_CERT   |   Certificate\
    \   | DER-encoded X.509 certificate.    |\n   |             |     (Section   \
    \ |                                   |\n   |             |   3.6.4.1.4.3)  |\
    \                                   |\n   |             |                 |  \
    \                                 |\n   |  T_KEYLINK  |     KeyLink     | A CCNx\
    \ Link object.               |\n   |             |     (Section    |         \
    \                          |\n   |             |   3.6.4.1.4.4)  |           \
    \                        |\n   |             |                 |             \
    \                      |\n   |  T_SIGTIME  |  SignatureTime  | A millisecond timestamp\
    \           |\n   |             |     (Section    | indicating the time when the\
    \      |\n   |             |   3.6.4.1.4.5)  | signature was created.        \
    \    |\n   +-------------+-----------------+-----------------------------------+\n\
    \              Table 11: CCNx Validation-Dependent Data Types\n"
- title: 3.6.4.1.4.1.  KeyId
  contents:
  - "3.6.4.1.4.1.  KeyId\n   The KeyId for a signature is the publisher key identifier.\
    \  It is\n   similar to a Subject Key Identifier from X.509 (see Section 4.2.1.2\n\
    \   of [RFC5280]).  It should be derived from the key used to sign, such\n   as\
    \ from the SHA-256 hash of the key.  It applies to both public and\n   private\
    \ key systems and to symmetric key systems.\n   The KeyId is represented using\
    \ the hash format in Section 3.3.3.  If\n   an application protocol uses a non-hash\
    \ identifier, it should use one\n   of the reserved values.\n                \
    \        1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |            T_KEYID            |            LENGTH+4           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |          <hash type>          |             LENGTH            |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                     LENGTH octets of hash                     /\n   +---------------+---------------+---------------+---------------+\n\
    \                         Figure 24: KeyId Encoding\n"
- title: 3.6.4.1.4.2.  Public Key
  contents:
  - "3.6.4.1.4.2.  Public Key\n   A Public Key is a DER-encoded Subject Public Key\
    \ Info block, as in an\n   X.509 certificate.\n                        1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |          T_PUBLICKEY          |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                Public Key (DER-encoded SPKI)                  /\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 25: Public Key Encoding\n"
- title: 3.6.4.1.4.3.  Certificate
  contents:
  - "3.6.4.1.4.3.  Certificate\n   A Certificate is a DER-encoded X.509 certificate.\
    \  The KeyId\n   (Section 3.6.4.1.4.1) is derived from this encoding.\n      \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |            T_CERT             |            Length             |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                 Certificate (DER-encoded X.509)               /\n   +---------------+---------------+---------------+---------------+\n\
    \                      Figure 26: Certificate Encoding\n"
- title: 3.6.4.1.4.4.  KeyLink
  contents:
  - "3.6.4.1.4.4.  KeyLink\n   A KeyLink type KeyLocator is a Link.\n   The KeyLink\
    \ ContentObjectHashRestr, if included, is the digest of the\n   Content Object\
    \ identified by KeyLink, not the digest of the public\n   key.  Likewise, the\
    \ KeyIdRestr of the KeyLink is the KeyId of the\n   ContentObject, not necessarily\
    \ of the wrapped key.\n                        1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +---------------+---------------+-------------------------------+\n\
    \   |          T_KEYLINK            |            Length             |\n   +---------------+---------------+-------------------------------+\n\
    \   / Link                                                          /\n   +---------------------------------------------------------------+\n\
    \                        Figure 27: KeyLink Encoding\n"
- title: 3.6.4.1.4.5.  SignatureTime
  contents:
  - "3.6.4.1.4.5.  SignatureTime\n   The SignatureTime is a millisecond timestamp\
    \ indicating the time at\n   which a signature was created.  The signer sets this\
    \ field to the\n   current time when creating a signature.  A verifier may use\
    \ this time\n   to determine whether or not the signature was created during the\n\
    \   validity period of a key, or if it occurred in a reasonable sequence\n   with\
    \ other associated signatures.  The SignatureTime is unrelated to\n   any time\
    \ associated with the actual CCNx Message, which could have\n   been created long\
    \ before the signature.  The default behavior is to\n   always include a SignatureTime\
    \ when creating an authenticated message\n   (e.g., HMAC or RSA).\n   SignatureTime\
    \ is an unsigned integer in network byte order that\n   indicates when the signature\
    \ was created (as the number of\n   milliseconds since the epoch in UTC).  It\
    \ is a fixed 64-bit field.\n                        1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +---------------+---------------+-------------------------------+\n\
    \   |           T_SIGTIME           |               8               |\n   +---------------+---------------+-------------------------------+\n\
    \   /                         SignatureTime                         /\n   +---------------------------------------------------------------+\n\
    \                     Figure 28: SignatureTime Encoding\n"
- title: 3.6.4.1.5.  Validation Examples
  contents:
  - "3.6.4.1.5.  Validation Examples\n   As an example of a MIC-type validation, the\
    \ encoding for CRC32C\n   validation would be:\n                        1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |      T_VALIDATION_ALG         |               4               |\n   +---------------+---------------+---------------+---------------+\n\
    \   |            T_CRC32C           |               0               |\n   +---------------+---------------+---------------+---------------+\n\
    \                    Figure 29: CRC32C Encoding Example\n   As an example of a\
    \ MAC-type validation, the encoding for an HMAC\n   using a SHA256 hash would\
    \ be:\n                        1                   2                   3\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |       T_VALIDATION_ALG        |               40              |\n   +---------------+---------------+---------------+---------------+\n\
    \   |        T_HMAC-SHA256          |               36              |\n   +---------------+---------------+---------------+---------------+\n\
    \   |             T_KEYID           |               32              |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                            KeyId                              /\n   /---------------+---------------+-------------------------------+\n\
    \                  Figure 30: HMAC-SHA256 Encoding Example\n   As an example of\
    \ a Signature-type validation, the encoding for an RSA\n   public-key signature\
    \ using a SHA256 digest and Public Key would be:\n                        1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |       T_VALIDATION_ALG        |   44 octets + Variable Length |\n   +---------------+---------------+---------------+---------------+\n\
    \   |          T_RSA-SHA256         |   40 octets + Variable Length |\n   +---------------+---------------+---------------+---------------+\n\
    \   |             T_KEYID           |               32              |\n   +---------------+---------------+---------------+---------------+\n\
    \   /                            KeyId                              /\n   /---------------+---------------+-------------------------------+\n\
    \   |          T_PUBLICKEY          |  Variable Length (~160 octets)|\n   +---------------+---------------+---------------+---------------+\n\
    \   /                Public Key (DER-encoded SPKI)                  /\n   +---------------+---------------+---------------+---------------+\n\
    \                  Figure 31: RSA-SHA256 Encoding Example\n"
- title: 3.6.4.2.  Validation Payload
  contents:
  - "3.6.4.2.  Validation Payload\n                        1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   |     T_VALIDATION_PAYLOAD      |  ValidationPayloadLength      |\n   +---------------+---------------+---------------+---------------+\n\
    \   / Type-dependent data                                           /\n   +---------------+---------------+---------------+---------------+\n\
    \                  Figure 32: Validation Payload Encoding\n   The ValidationPayload\
    \ contains the validation output, such as the\n   CRC32C code or the RSA signature.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This section details each kind of CCNx protocol value\
    \ that can be\n   registered.  Each type registry can be updated by incrementally\n\
    \   expanding the type space, i.e., by allocating and reserving new\n   types.\
    \  As per [RFC8126], this section details the creation of the\n   \"Content-Centric\
    \ Networking (CCNx)\" registry and several\n   subregistries.\n"
- title: 4.1.  Packet Type Registry
  contents:
  - "4.1.  Packet Type Registry\n   IANA has created the \"CCNx Packet Types\" registry\
    \ and allocated the\n   packet types described below.  The registration procedure\
    \ is RFC\n   Required.  The Type value is 1 octet.  The range is 0x00-0xFF.\n\
    \         +------+-------------+----------------------------------+\n        \
    \ | Type |     Name    |            Reference             |\n         +------+-------------+----------------------------------+\n\
    \         | 0x00 | PT_INTEREST | Fixed Header Types (Section 3.2) |\n        \
    \ |      |             |                                  |\n         | 0x01 |\
    \  PT_CONTENT | Fixed Header Types (Section 3.2) |\n         |      |        \
    \     |                                  |\n         | 0x02 |  PT_RETURN  | Fixed\
    \ Header Types (Section 3.2) |\n         +------+-------------+----------------------------------+\n\
    \                               Packet Types\n"
- title: 4.2.  Interest Return Code Registry
  contents:
  - "4.2.  Interest Return Code Registry\n   IANA has created the \"CCNx Interest\
    \ Return Code Types\" registry and\n   allocated the Interest Return code types\
    \ described below.  The\n   registration procedure is Specification Required.\
    \  The Type value is\n   1 octet.  The range is 0x00-0xFF.\n   +------+---------------------------------------+--------------------+\n\
    \   | Type |                  Name                 |     Reference      |\n  \
    \ +------+---------------------------------------+--------------------+\n   |\
    \ 0x00 |                Reserved               |                    |\n   |  \
    \    |                                       |                    |\n   | 0x01\
    \ |           T_RETURN_NO_ROUTE           | Fixed Header Types |\n   |      |\
    \                                       | (Section 3.2.3.3)  |\n   |      |  \
    \                                     |                    |\n   | 0x02 |    \
    \    T_RETURN_LIMIT_EXCEEDED        | Fixed Header Types |\n   |      |      \
    \                                 | (Section 3.2.3.3)  |\n   |      |        \
    \                               |                    |\n   | 0x03 |         T_RETURN_NO_RESOURCES\
    \         | Fixed Header Types |\n   |      |                                \
    \       | (Section 3.2.3.3)  |\n   |      |                                  \
    \     |                    |\n   | 0x04 |          T_RETURN_PATH_ERROR       \
    \   | Fixed Header Types |\n   |      |                                      \
    \ | (Section 3.2.3.3)  |\n   |      |                                       |\
    \                    |\n   | 0x05 |          T_RETURN_PROHIBITED          | Fixed\
    \ Header Types |\n   |      |                                       | (Section\
    \ 3.2.3.3)  |\n   |      |                                       |           \
    \         |\n   | 0x06 |           T_RETURN_CONGESTED          | Fixed Header\
    \ Types |\n   |      |                                       | (Section 3.2.3.3)\
    \  |\n   |      |                                       |                    |\n\
    \   | 0x07 |         T_RETURN_MTU_TOO_LARGE        | Fixed Header Types |\n  \
    \ |      |                                       | (Section 3.2.3.3)  |\n   |\
    \      |                                       |                    |\n   | 0x08\
    \ | T_RETURN_UNSUPPORTED_HASH_RESTRICTION | Fixed Header Types |\n   |      |\
    \                                       | (Section 3.2.3.3)  |\n   |      |  \
    \                                     |                    |\n   | 0x09 |    \
    \  T_RETURN_MALFORMED_INTEREST      | Fixed Header Types |\n   |      |      \
    \                                 | (Section 3.2.3.3)  |\n   +------+---------------------------------------+--------------------+\n\
    \                        CCNx Interest Return Types\n"
- title: 4.3.  Hop-by-Hop Type Registry
  contents:
  - "4.3.  Hop-by-Hop Type Registry\n   IANA has created the \"CCNx Hop-by-Hop Types\"\
    \ registry and allocated\n   the hop-by-hop types described below.  The registration\
    \ procedure is\n   RFC Required.  The Type value is 2 octets.  The range is\n\
    \   0x0000-0xFFFF.\n   +---------------+-------------+-------------------------------------+\n\
    \   |      Type     |     Name    |              Reference              |\n  \
    \ +---------------+-------------+-------------------------------------+\n   |\
    \     0x0000    |   Reserved  |                                     |\n   |  \
    \             |             |                                     |\n   |    \
    \ 0x0001    |  T_INTLIFE  |   Hop-by-hop TLV headers (Section   |\n   |      \
    \         |             |                 3.4)                |\n   |        \
    \       |             |                                     |\n   |     0x0002\
    \    | T_CACHETIME |   Hop-by-hop TLV headers (Section   |\n   |             \
    \  |             |                 3.4)                |\n   |               |\
    \             |                                     |\n   |     0x0003    |  T_MSGHASH\
    \  |   Hop-by-hop TLV headers (Section   |\n   |               |             |\
    \                 3.4)                |\n   |               |             |  \
    \                                   |\n   |    0x0004 -   |   Reserved  |    \
    \                                 |\n   |     0x0007    |             |      \
    \                               |\n   |               |             |        \
    \                             |\n   |     0x0FFE    |    T_PAD    |         Pad\
    \ (Section 3.3.1)         |\n   |               |             |              \
    \                       |\n   |     0x0FFF    |    T_ORG    | Organization-Specific\
    \ TLVs (Section |\n   |               |             |                3.3.2)  \
    \             |\n   |               |             |                          \
    \           |\n   | 0x1000-0x1FFF |   Reserved  |     Experimental Use (Section\
    \ 3)    |\n   +---------------+-------------+-------------------------------------+\n\
    \                           CCNx Hop-by-Hop Types\n"
- title: 4.4.  Top-Level Type Registry
  contents:
  - "4.4.  Top-Level Type Registry\n   IANA has created the \"CCNx Top-Level Types\"\
    \ registry and allocated\n   the top-level types described below.  The registration\
    \ procedure is\n   RFC Required.  The Type value is 2 octets.  The range is\n\
    \   0x0000-0xFFFF.\n     +--------+----------------------+-------------------------------+\n\
    \     |  Type  |         Name         |           Reference           |\n    \
    \ +--------+----------------------+-------------------------------+\n     | 0x0000\
    \ |       Reserved       |                               |\n     |        |  \
    \                    |                               |\n     | 0x0001 |      T_INTEREST\
    \      | Top-Level Types (Section 3.5) |\n     |        |                    \
    \  |                               |\n     | 0x0002 |       T_OBJECT       | Top-Level\
    \ Types (Section 3.5) |\n     |        |                      |              \
    \                 |\n     | 0x0003 |   T_VALIDATION_ALG   | Top-Level Types (Section\
    \ 3.5) |\n     |        |                      |                             \
    \  |\n     | 0x0004 | T_VALIDATION_PAYLOAD | Top-Level Types (Section 3.5) |\n\
    \     +--------+----------------------+-------------------------------+\n    \
    \                       CCNx Top-Level Types\n"
- title: 4.5.  Name Segment Type Registry
  contents:
  - "4.5.  Name Segment Type Registry\n   IANA has created the \"CCNx Name Segment\
    \ Types\" registry and allocated\n   the name segment types described below. \
    \ The registration procedure\n   is Specification Required.  The Type value is\
    \ 2 octets.  The range is\n   0x0000-0xFFFF.\n   +--------------+------------------+---------------------------------+\n\
    \   |     Type     |       Name       |            Reference            |\n  \
    \ +--------------+------------------+---------------------------------+\n   |\
    \    0x0000    |     Reserved     |                                 |\n   |  \
    \            |                  |                                 |\n   |    0x0001\
    \    |  T_NAMESEGMENT   |       Name (Section 3.6.1)      |\n   |            \
    \  |                  |                                 |\n   |    0x0002    |\
    \      T_IPID      |       Name (Section 3.6.1)      |\n   |              |  \
    \                |                                 |\n   |   0x0010 -   |    \
    \ Reserved     |             RFC 8609            |\n   |    0x0013    |      \
    \            |                                 |\n   |              |        \
    \          |                                 |\n   |    0x0FFF    |      T_ORG\
    \       |    Organization-Specific TLVs   |\n   |              |             \
    \     |         (Section 3.3.2)         |\n   |              |               \
    \   |                                 |\n   |   0x1000 -   |    T_APP:00 -   \
    \ | Application Components (Section |\n   |    0x1FFF    |    T_APP:4096    |\
    \              3.6.1)             |\n   +--------------+------------------+---------------------------------+\n\
    \                          CCNx Name Segment Types\n"
- title: 4.6.  Message Type Registry
  contents:
  - "4.6.  Message Type Registry\n   IANA has created the \"CCNx Message Types\" registry\
    \ and registered the\n   message segment types described below.  The registration\
    \ procedure is\n   RFC Required.  The Type value is 2 octets.  The range is\n\
    \   0x0000-0xFFFF.\n   +---------------+----------------+----------------------------------+\n\
    \   |      Type     |      Name      |            Reference             |\n  \
    \ +---------------+----------------+----------------------------------+\n   |\
    \     0x0000    |     T_NAME     |   Message Types (Section 3.6)    |\n   |  \
    \             |                |                                  |\n   |    \
    \ 0x0001    |   T_PAYLOAD    |   Message Types (Section 3.6)    |\n   |      \
    \         |                |                                  |\n   |     0x0002\
    \    |  T_KEYIDRESTR  |   Message Types (Section 3.6)    |\n   |             \
    \  |                |                                  |\n   |     0x0003    |\
    \ T_OBJHASHRESTR |   Message Types (Section 3.6)    |\n   |               |  \
    \              |                                  |\n   |     0x0005    |  T_PAYLDTYPE\
    \   |   Content Object Message Types   |\n   |               |               \
    \ |        (Section 3.6.2.2)         |\n   |               |                |\
    \                                  |\n   |     0x0006    |    T_EXPIRY    |  \
    \ Content Object Message Types   |\n   |               |                |    \
    \    (Section 3.6.2.2)         |\n   |               |                |      \
    \                            |\n   |    0x0007 -   |    Reserved    |        \
    \     RFC 8609             |\n   |     0x000C    |                |          \
    \                        |\n   |               |                |            \
    \                      |\n   |     0x0FFE    |     T_PAD      |       Pad (Section\
    \ 3.3.1)        |\n   |               |                |                     \
    \             |\n   |     0x0FFF    |     T_ORG      |    Organization-Specific\
    \ TLVs    |\n   |               |                |         (Section 3.3.2)   \
    \       |\n   |               |                |                             \
    \     |\n   | 0x1000-0x1FFF |    Reserved    |   Experimental Use (Section 3)\
    \   |\n   +---------------+----------------+----------------------------------+\n\
    \                            CCNx Message Types\n"
- title: 4.7.  Payload Type Registry
  contents:
  - "4.7.  Payload Type Registry\n   IANA has created the \"CCNx Payload Types\" registry\
    \ and allocated the\n   payload types described below.  The registration procedure\
    \ is\n   Specification Required.  The Type value is 1 octet.  The range is\n \
    \  0x00-0xFF.\n     +------+--------------------+-----------------------------------+\n\
    \     | Type |        Name        |             Reference             |\n    \
    \ +------+--------------------+-----------------------------------+\n     | 0x00\
    \ | T_PAYLOADTYPE_DATA | Payload Types (Section 3.6.2.2.1) |\n     |      |  \
    \                  |                                   |\n     | 0x01 | T_PAYLOADTYPE_KEY\
    \  | Payload Types (Section 3.6.2.2.1) |\n     |      |                    | \
    \                                  |\n     | 0x02 | T_PAYLOADTYPE_LINK | Payload\
    \ Types (Section 3.6.2.2.1) |\n     +------+--------------------+-----------------------------------+\n\
    \                            CCNx Payload Types\n"
- title: 4.8.  Validation Algorithm Type Registry
  contents:
  - "4.8.  Validation Algorithm Type Registry\n   IANA has created the \"CCNx Validation\
    \ Algorithm Types\" registry and\n   allocated the validation algorithm types\
    \ described below.  The\n   registration procedure is Specification Required.\
    \  The Type value is\n   2 octets.  The range is 0x0000-0xFFFF.\n   +---------------+-----------------+---------------------------------+\n\
    \   |      Type     |       Name      |            Reference            |\n  \
    \ +---------------+-----------------+---------------------------------+\n   |\
    \     0x0000    |     Reserved    |                                 |\n   |  \
    \             |                 |                                 |\n   |    \
    \ 0x0002    |     T_CRC32C    |  Validation Algorithm (Section  |\n   |      \
    \         |                 |             3.6.4.1)            |\n   |        \
    \       |                 |                                 |\n   |     0x0004\
    \    |  T_HMAC-SHA256  |  Validation Algorithm (Section  |\n   |             \
    \  |                 |             3.6.4.1)            |\n   |               |\
    \                 |                                 |\n   |     0x0005    |  \
    \ T_RSA-SHA256  |  Validation Algorithm (Section  |\n   |               |    \
    \             |             3.6.4.1)            |\n   |               |      \
    \           |                                 |\n   |     0x0006    | T_EC-SECP-256K1\
    \ |  Validation Algorithm (Section  |\n   |               |                 |\
    \             3.6.4.1)            |\n   |               |                 |  \
    \                               |\n   |     0x0007    | T_EC-SECP-384R1 |  Validation\
    \ Algorithm (Section  |\n   |               |                 |             3.6.4.1)\
    \            |\n   |               |                 |                       \
    \          |\n   |     0x0FFE    |      T_PAD      |       Pad (Section 3.3.1)\
    \       |\n   |               |                 |                            \
    \     |\n   |     0x0FFF    |      T_ORG      |    Organization-Specific TLVs\
    \   |\n   |               |                 |         (Section 3.3.2)        \
    \ |\n   |               |                 |                                 |\n\
    \   | 0x1000-0x1FFF |     Reserved    |   Experimental Use (Section 3)  |\n  \
    \ +---------------+-----------------+---------------------------------+\n    \
    \                  CCNx Validation Algorithm Types\n"
- title: 4.9.  Validation-Dependent Data Type Registry
  contents:
  - "4.9.  Validation-Dependent Data Type Registry\n   IANA has created the \"CCNx\
    \ Validation-Dependent Data Types\" registry\n   and allocated the validation-dependent\
    \ data types described below.\n   The registration procedure is RFC Required.\
    \  The Type value is 2\n   octets.  The range is 0x0000-0xFFFF.\n   +---------------+----------------+----------------------------------+\n\
    \   |      Type     |      Name      |            Reference             |\n  \
    \ +---------------+----------------+----------------------------------+\n   |\
    \     0x0000    |    Reserved    |                                  |\n   |  \
    \             |                |                                  |\n   |    \
    \ 0x0009    |    T_KEYID     |    Validation-Dependent Data     |\n   |      \
    \         |                |       (Section 3.6.4.1.4)        |\n   |        \
    \       |                |                                  |\n   |     0x000A\
    \    | T_PUBLICKEYLOC |    Validation-Dependent Data     |\n   |             \
    \  |                |       (Section 3.6.4.1.4)        |\n   |               |\
    \                |                                  |\n   |     0x000B    |  T_PUBLICKEY\
    \   |    Validation-Dependent Data     |\n   |               |               \
    \ |       (Section 3.6.4.1.4)        |\n   |               |                |\
    \                                  |\n   |     0x000C    |     T_CERT     |  \
    \  Validation-Dependent Data     |\n   |               |                |    \
    \   (Section 3.6.4.1.4)        |\n   |               |                |      \
    \                            |\n   |     0x000D    |     T_LINK     |    Validation-Dependent\
    \ Data     |\n   |               |                |       (Section 3.6.4.1.4)\
    \        |\n   |               |                |                            \
    \      |\n   |     0x000E    |   T_KEYLINK    |    Validation-Dependent Data \
    \    |\n   |               |                |       (Section 3.6.4.1.4)      \
    \  |\n   |               |                |                                  |\n\
    \   |     0x000F    |   T_SIGTIME    |    Validation-Dependent Data     |\n  \
    \ |               |                |       (Section 3.6.4.1.4)        |\n   |\
    \               |                |                                  |\n   |  \
    \   0x0FFF    |     T_ORG      |    Organization-Specific TLVs    |\n   |    \
    \           |                |         (Section 3.3.2)          |\n   |      \
    \         |                |                                  |\n   | 0x1000-0x1FFF\
    \ |    Reserved    |   Experimental Use (Section 3)   |\n   +---------------+----------------+----------------------------------+\n\
    \                   CCNx Validation-Dependent Data Types\n"
- title: 4.10.  Hash Function Type Registry
  contents:
  - "4.10.  Hash Function Type Registry\n   IANA has created the \"CCNx Hash Function\
    \ Types\" registry and\n   allocated the hash function types described below.\
    \  The registration\n   procedure is Specification Required.  The Type value is\
    \ 2 octets.\n   The range is 0x0000-0xFFFF.\n   +---------------+-----------+---------------------------------------+\n\
    \   |      Type     |    Name   |               Reference               |\n  \
    \ +---------------+-----------+---------------------------------------+\n   |\
    \     0x0000    |  Reserved |                                       |\n   |  \
    \             |           |                                       |\n   |    \
    \ 0x0001    | T_SHA-256 |      Hash Format (Section 3.3.3)      |\n   |      \
    \         |           |                                       |\n   |     0x0002\
    \    | T_SHA-512 |      Hash Format (Section 3.3.3)      |\n   |             \
    \  |           |                                       |\n   |     0x0FFF    |\
    \   T_ORG   |  Organization-Specific TLVs (Section  |\n   |               |  \
    \         |                 3.3.2)                |\n   |               |    \
    \       |                                       |\n   | 0x1000-0x1FFF |  Reserved\
    \ |      Experimental Use (Section 3)     |\n   +---------------+-----------+---------------------------------------+\n\
    \                         CCNx Hash Function Types\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The CCNx protocol is a Layer 3 network protocol,\
    \ which may also\n   operate as an overlay using other transports such as UDP\
    \ or other\n   tunnels.  It includes intrinsic support for message authentication\n\
    \   via a signature (e.g., RSA or elliptic curve) or Message\n   Authentication\
    \ Code (e.g., HMAC).  In lieu of an authenticator, it\n   may instead use a Message\
    \ Integrity Check (e.g., SHA or CRC).  CCNx\n   does not specify an encryption\
    \ envelope; that function is left to a\n   high-layer protocol (e.g., Encrypted\
    \ Sessions in CCNx [esic]).\n   The CCNx Packet format includes the ability to\
    \ attach MICs (e.g.,\n   SHA-256 or CRC), MACs (e.g., HMAC), and Signatures (e.g.,\
    \ RSA or\n   ECDSA) to all packet types.  Because Interest packets can be sent\
    \ at\n   will, an application should carefully select when to use a given\n  \
    \ ValidationAlgorithm in an Interest to avoid DoS attacks.  MICs, for\n   example,\
    \ are inexpensive and could be used as desired, whereas MACs\n   and Signatures\
    \ are more expensive and their inappropriate use could\n   open a computational\
    \ DoS attack surface.  Applications should use an\n   explicit protocol to guide\
    \ their use of packet signatures.  As a\n   general guideline, an application\
    \ might use a MIC on an Interest to\n   detect unintentionally corrupted packets.\
    \  If one wishes to secure an\n   Interest, one should consider using an encrypted\
    \ wrapper and a\n   protocol that prevents replay attacks, especially if the Interest\
    \ is\n   being used as an actuator.  Simply using an authentication code or\n\
    \   signature does not make an Interest secure.  There are several\n   examples\
    \ in the literature on how to secure ICN-style messaging\n   [mobile] [ace].\n\
    \   As a Layer 3 protocol, this document does not describe how one\n   arrives\
    \ at keys or how one trusts keys.  The CCNx content object may\n   include a public\
    \ key embedded in the object or may use the\n   PublicKeyLocator field to point\
    \ to a public key (or public-key\n   certificate) that authenticates the message.\
    \  One key exchange\n   specification is CCNxKE [ccnxke] [mobile], which is similar\
    \ to the\n   TLS 1.3 key exchange except it is over the CCNx Layer 3 messages.\n\
    \   Trust is beyond the scope of a Layer 3 protocol and is left to\n   applications\
    \ or application frameworks.\n   The combination of an ephemeral key exchange\
    \ (e.g., CCNxKE [ccnxke])\n   and an encapsulating encryption (e.g., [esic]) provides\
    \ the\n   equivalent of a TLS tunnel.  Intermediate nodes may forward the\n  \
    \ Interests and Content Objects but have no visibility inside.  It also\n   completely\
    \ hides the internal names in those used by the encryption\n   layer.  This type\
    \ of tunneling encryption is useful for content that\n   has little or no cacheability,\
    \ as it can only be used by someone with\n   the ephemeral key.  Short-term caching\
    \ may help with lossy links or\n   mobility, but long-term caching is usually\
    \ not of interest.\n   Broadcast encryption or proxy re-encryption may be useful\
    \ for content\n   with multiple uses over time or many consumers.  There is currently\n\
    \   no recommendation for this form of encryption.\n   The specific encoding of\
    \ messages will have security implications.\n   This document uses a Type-Length-Value\
    \ (TLV) encoding.  We chose to\n   compromise between extensibility and unambiguous\
    \ encodings of types\n   and lengths.  Some TLV encodings use variable-length\
    \ T and variable-\n   length L fields to accommodate a wide gamut of values while\
    \ trying to\n   be byte efficient.  Our TLV encoding uses a fixed length 2-byte\
    \ T and\n   2-byte L.  Using fixed-length T and L fields solves two problems.\n\
    \   The first is aliases.  If one is able to encode the same value, such\n   as\
    \ 0x02 and 0x0002, in different byte lengths, then one must decide\n   if they\
    \ mean the same thing, if they are different, or if one is\n   illegal.  If they\
    \ are different, then one must always compare on the\n   buffers not the integer\
    \ equivalents.  If one is illegal, then one\n   must validate the TLV encoding\
    \ -- every field of every packet at\n   every hop.  If they are the same, then\
    \ one has the second problem:\n   how to specify packet filters.  For example,\
    \ if a name has 6 name\n   components, then there are 7 T fields and 7 L fields,\
    \ each of which\n   might have up to 4 representations of the same value.  That\
    \ would be\n   14 fields with 4 encodings each, or 1001 combinations.  It also\
    \ means\n   that one cannot compare, for example, a name via a memory function,\n\
    \   as one needs to consider that any embedded T or L might have a\n   different\
    \ format.\n   The Interest Return message has no authenticator from the previous\n\
    \   hop.  Therefore, the payload of the Interest Return should only be\n   used\
    \ locally to match an Interest.  A node should never forward that\n   Interest\
    \ payload as an Interest.  It should also verify that it sent\n   the Interest\
    \ in the Interest Return to that node and not allow anyone\n   to negate Interest\
    \ messages.\n   Caching nodes must take caution when processing content objects.\
    \  It\n   is essential that the Content Store obey the rules outlined in\n   [RFC8569]\
    \ to avoid certain types of attacks.  CCNx 1.0 has no\n   mechanism to work around\
    \ an undesired result from the network (there\n   are no \"excludes\"), so if\
    \ a cache becomes poisoned with bad content\n   it might cause problems retrieving\
    \ content.  There are three types of\n   access to content from a Content Store:\
    \ unrestricted, signature\n   restricted, and hash restricted.  If an Interest\
    \ has no restrictions,\n   then the requester is not particular about what they\
    \ get back, so any\n   matching cached object is OK.  In the hash restricted case,\
    \ the\n   requester is very specific about what they want, and the Content\n \
    \  Store (and every forward hop) can easily verify that the content\n   matches\
    \ the request.  In the signature restricted case (which is\n   often used for\
    \ initial manifest discovery), the requester only knows\n   the KeyId that signed\
    \ the content.  This case requires the closest\n   attention in the Content Store\
    \ to avoid amplifying bad data.  The\n   Content Store must only respond with\
    \ a content object if it can\n   verify the signature -- this means either the\
    \ content object carries\n   the public key inside it or the Interest carries\
    \ the public key in\n   addition to the KeyId.  If that is not the case, then\
    \ the Content\n   Store should treat the Interest as a cache miss and let an endpoint\n\
    \   respond.\n   A user-level cache could perform full signature verification\
    \ by\n   fetching a public key according to the PublicKeyLocator.  However,\n\
    \   that is not a burden we wish to impose on the forwarder.  A user-\n   level\
    \ cache could also rely on out-of-band attestation, such as the\n   cache operator\
    \ only inserting content that it knows has the correct\n   signature.\n   The\
    \ CCNx grammar allows for hash algorithm agility via the HashType.\n   It specifies\
    \ a short list of acceptable hash algorithms that should\n   be implemented at\
    \ each forwarder.  Some hash values only apply to end\n   systems, so updating\
    \ the hash algorithm does not affect forwarders --\n   they would simply match\
    \ the buffer that includes the type-length-hash\n   buffer.  Some fields, such\
    \ as the ConObjHash, must be verified at\n   each hop, so a forwarder (or related\
    \ system) must know the hash\n   algorithm, and it could cause backward compatibility\
    \ problems if the\n   hash type is updated.\n   A CCNx name uses binary matching,\
    \ whereas a URI uses a case-\n   insensitive hostname.  Some systems may also\
    \ use case-insensitive\n   matching of the URI path to a resource.  An implication\
    \ of this is\n   that human-entered CCNx names will likely have case or non-ASCII\n\
    \   symbol mismatches unless one uses a consistent URI normalization for\n   the\
    \ CCNx name.  It also means that an entity that registers a CCNx-\n   routable\
    \ prefix -- say, \"ccnx:/example.com\" -- would need separate\n   registrations\
    \ for simple variations like \"ccnx:/Example.com\".  Unless\n   this is addressed\
    \ in URI normalization and routing protocol\n   conventions, there could be phishing\
    \ attacks.\n   For a more general introduction to ICN-related security concerns\
    \ and\n   approaches, see [RFC7927] and [RFC7945].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [ace]      Shang, W., Yu, Y., Liang, T., Zhang,\
    \ B., and L. Zhang,\n              \"NDN-ACE: Access control for constrained environments\
    \ over\n              named data networking\", NDN Technical Report NDN-0036,\n\
    \              2015, <http://new.named-data.net/wp-content/uploads/2015/\n   \
    \           12/ndn-0036-1-ndn-ace.pdf>.\n   [ccnxke]   Mosko, M., Uzun, E., and\
    \ C. Wood, \"CCNx Key Exchange\n              Protocol Version 1.0\", Work in\
    \ Progress, draft-wood-icnrg-\n              ccnxkeyexchange-02, March 2017.\n\
    \   [CCNxURI]  Mosko, M. and C. Wood, \"The CCNx URI Scheme\", Work in\n     \
    \         Progress, draft-mosko-icnrg-ccnxurischeme-01, April 2016.\n   [CCNxz]\
    \    Mosko, M., \"CCNxz TLV Header Compression Experimental\n              Code\"\
    , commit f1093a2, March 2018,\n              <https://github.com/PARC/CCNxz>.\n\
    \   [compress] Mosko, M., \"Header Compression for TLV-based Packets\",\n    \
    \          ICNRG Interim Meeting, 2016,\n              <https://datatracker.ietf.org/meeting/interim-2016-icnrg-\n\
    \              02/materials/slides-interim-2016-icnrg-2-7>.\n   [ECC]      Certicom\
    \ Research, \"SEC 2: Recommended Elliptic Curve\n              Domain Parameters\"\
    , 2010,\n              <http://www.secg.org/sec2-v2.pdf>.\n   [esic]     Mosko,\
    \ M. and C. Wood, \"Encrypted Sessions In CCNx\n              (ESIC)\", Work in\
    \ Progress, draft-wood-icnrg-esic-01,\n              September 2017.\n   [IANA-PEN]\
    \ IANA, \"Private Enterprise Numbers\",\n              <http://www.iana.org/assignments/enterprise-numbers>.\n\
    \   [mobile]   Mosko, M., Uzun, E., and C. Wood, \"Mobile Sessions in\n      \
    \        Content-Centric Networks\", IFIP Networking, 2017,\n              <http://dl.ifip.org/db/conf/networking/\n\
    \              networking2017/1570334964.pdf>.\n   [nnc]      Jacobson, V., Smetters,\
    \ D., Thornton, J., Plass, M.,\n              Briggs, N., and R. Braynard, \"\
    Networking Named Content\",\n              Proceedings of the 5th international\
    \ conference on\n              Emerging networking experiments and technologies\
    \ (CoNEXT\n              '09), 2009, <http://dx.doi.org/10.1145/1658939.1658941>.\n\
    \   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n         \
    \     Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC7927]  Kutscher, D., Ed., Eum, S., Pentikousis, K., Psaras, I.,\n    \
    \          Corujo, D., Saucez, D., Schmidt, T., and M. Waehlisch,\n          \
    \    \"Information-Centric Networking (ICN) Research\n              Challenges\"\
    , RFC 7927, DOI 10.17487/RFC7927, July 2016,\n              <https://www.rfc-editor.org/info/rfc7927>.\n\
    \   [RFC7945]  Pentikousis, K., Ed., Ohlman, B., Davies, E., Spirou, S.,\n   \
    \           and G. Boggia, \"Information-Centric Networking: Evaluation\n    \
    \          and Security Considerations\", RFC 7945,\n              DOI 10.17487/RFC7945,\
    \ September 2016,\n              <https://www.rfc-editor.org/info/rfc7945>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8569]  Mosko, M., Solis, I., and C. Wood, \"Content-Centric\n        \
    \      Networking (CCNx) Semantics\", RFC 8569,\n              DOI 10.17487/RFC8569,\
    \ July 2019,\n              <https://www.rfc-editor.org/info/rfc8569>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marc Mosko\n   PARC, Inc.\n   Palo Alto, California  94304\n\
    \   United States of America\n   Phone: +01 650-812-4405\n   Email: mmosko@parc.com\n\
    \   Ignacio Solis\n   LinkedIn\n   Mountain View, California  94043\n   United\
    \ States of America\n   Email: nsolis@linkedin.com\n   Christopher A. Wood\n \
    \  University of California, Irvine\n   Irvine, California  92697\n   United States\
    \ of America\n   Phone: +01 315-806-5939\n   Email: woodc1@uci.edu\n"
