- title: __initial_text__
  contents:
  - "             Simple Network Time Protocol (SNTP) Version 4\n                \
    \         for IPv4, IPv6 and OSI\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memorandum describes the Simple Network Time Protocol (SNTP)\n\
    \   Version 4, which is an adaptation of the Network Time Protocol (NTP)\n   used\
    \ to synchronize computer clocks in the Internet. SNTP can be used\n   when the\
    \ ultimate performance of the full NTP implementation\n   described in RFC-1305\
    \ is not needed or justified. When operating with\n   current and previous NTP\
    \ and SNTP versions, SNTP Version 4 involves\n   no changes to the NTP specification\
    \ or known implementations, but\n   rather a clarification of certain design features\
    \ of NTP which allow\n   operation in a simple, stateless remote-procedure call\
    \ (RPC) mode\n   with accuracy and reliability expectations similar to the UDP/TIME\n\
    \   protocol described in RFC-868.\n   The only significant protocol change in\
    \ SNTP Version 4 over previous\n   versions of NTP and SNTP is a modified header\
    \ interpretation to\n   accommodate Internet Protocol Version 6 (IPv6) [DEE96]\
    \ and OSI\n   [COL94] addressing. However, SNTP Version 4 includes certain optional\n\
    \   extensions to the basic Version 3 model, including an anycast mode\n   and\
    \ an authentication scheme designed specifically for multicast and\n   anycast\
    \ modes. While the anycast mode extension is described in this\n   document, the\
    \ authentication scheme extension will be described in\n   another document to\
    \ be published later. Until such time that a\n   definitive specification is published,\
    \ these extensions should be\n   considered provisional.\n   This memorandum obsoletes\
    \ RFC-1769, which describes SNTP Version 3.\n   Its purpose is to correct certain\
    \ inconsistencies in the previous\n   document and to clarify header formats and\
    \ protocol operations for\n   current NTP Version 3 (IPv4) and proposed NTP Version\
    \ 4 (IPv6 and\n   OSI), which are also used for SNTP. A working knowledge of the\
    \ NTP\n   Version 3 specification RFC-1305 is not required for an\n   implementation\
    \ of SNTP.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Network Time Protocol (NTP) Version 3 specified in RFC-1305\n\
    \   [MIL92] is widely used to synchronize computer clocks in the global\n   Internet.\
    \ It provides comprehensive mechanisms to access national\n   time and frequency\
    \ dissemination services, organize the time-\n   synchronization subnet and adjust\
    \ the local clock in each\n   participating subnet peer. In most places of the\
    \ Internet of today,\n   NTP provides accuracies of 1-50 ms, depending on the\
    \ characteristics\n   of the synchronization source and network paths.\n   RFC-1305\
    \ specifies the NTP Version 3 protocol machine in terms of\n   events, states,\
    \ transition functions and actions and, in addition,\n   engineered algorithms\
    \ to improve the timekeeping quality and mitigate\n   among several synchronization\
    \ sources, some of which may be faulty.\n   To achieve accuracies in the low milliseconds\
    \ over paths spanning\n   major portions of the Internet of today, these intricate\
    \ algorithms,\n   or their functional equivalents, are necessary. However, in\
    \ many\n   cases accuracies in the order of significant fractions of a second\n\
    \   are acceptable. In such cases, simpler protocols such as the Time\n   Protocol\
    \ [POS83], have been used for this purpose. These protocols\n   usually involve\
    \ an RPC exchange where the client requests the time of\n   day and the server\
    \ returns it in seconds past some known reference\n   epoch.\n   NTP is designed\
    \ for use by clients and servers with a wide range of\n   capabilities and over\
    \ a wide range of network delays and jitter\n   characteristics. Most users of\
    \ the Internet NTP synchronization\n   subnet of today use a software package\
    \ including the full suite of\n   NTP options and algorithms, which are relatively\
    \ complex, real-time\n   applications (see http://www.eecis.udel.edu/~ntp). While\
    \ the software\n   has been ported to a wide variety of hardware platforms ranging\
    \ from\n   personal computers to supercomputers, its sheer size and complexity\n\
    \   is not appropriate for many applications. Accordingly, it is useful\n   to\
    \ explore alternative access strategies using simpler software\n   appropriate\
    \ for less stringent accuracy expectations.\n   This document describes the Simple\
    \ Network Time Protocol (SNTP)\n   Version 4, which is a simplified access strategy\
    \ for servers and\n   clients using NTP Version 3 as now specified and deployed\
    \ in the\n   Internet, as well as NTP Version 4 now under development. The access\n\
    \   paradigm is identical to the UDP/TIME Protocol and, in fact, it\n   should\
    \ be easily possible to adapt a UDP/TIME client implementation,\n   say for a\
    \ personal computer, to operate using SNTP. Moreover, SNTP is\n   also designed\
    \ to operate in a dedicated server configuration\n   including an integrated radio\
    \ clock. With careful design and control\n   of the various latencies in the system,\
    \ which is practical in a\n   dedicated design, it is possible to deliver time\
    \ accurate to the\n   order of microseconds.\n   SNTP Version 4 is designed to\
    \ coexist with existing NTP and SNTP\n   Version 3 clients and servers, as well\
    \ as proposed Version 4 clients\n   and servers. When operating with current and\
    \ previous versions of NTP\n   and SNTP, SNTP Version 4 requires no changes to\
    \ the protocol or\n   implementations now running or likely to be implemented\
    \ specifically\n   for NTP ir SNTP Version 4. To a NTP or SNTP server, NTP and\
    \ SNTP\n   clients are undistinguishable; to a NTP or SNTP client, NTP and SNTP\n\
    \   servers are undistinguishable. Like NTP servers operating in non-\n   symmetric\
    \ modes, SNTP servers are stateless and can support large\n   numbers of clients;\
    \ however, unlike most NTP clients, SNTP clients\n   normally operate with only\
    \ a single server. NTP and SNTP Version 3\n   servers can operate in unicast and\
    \ multicast modes. In addition, SNTP\n   Version 4 clients and servers can implement\
    \ extensions to operate in\n   anycast mode.\n   It is strongly recommended that\
    \ SNTP be used only at the extremities\n   of the synchronization subnet. SNTP\
    \ clients should operate only at\n   the leaves (highest stratum) of the subnet\
    \ and in configurations\n   where no NTP or SNTP client is dependent on another\
    \ SNTP client for\n   synchronization. SNTP servers should operate only at the\
    \ root\n   (stratum 1) of the subnet and then only in configurations where no\n\
    \   other source of synchronization other than a reliable radio or modem\n   time\
    \ service is available. The full degree of reliability ordinarily\n   expected\
    \ of primary servers is possible only using the redundant\n   sources, diverse\
    \ subnet paths and crafted algorithms of a full NTP\n   implementation. This extends\
    \ to the primary source of synchronization\n   itself in the form of multiple\
    \ radio or modem sources and backup\n   paths to other primary servers should\
    \ all sources fail or the\n   majority deliver incorrect time. Therefore, the\
    \ use of SNTP rather\n   than NTP in primary servers should be carefully considered.\n\
    \   An important provision in this document is the reinterpretation of\n   certain\
    \ NTP Versino 4 header fields which provide for IPv6 and OSI\n   addressing and\
    \ optional anycast extensions designed specifically for\n   multicast service.\
    \ These additions are in conjunction with the\n   proposed NTP Version 4 specification,\
    \ which will appear as a separate\n   document. The only difference between the\
    \ current NTP Version 3 and\n   proposed NTP Version 4 header formats is the interpretation\
    \ of the\n   four-octet Reference Identifier field, which is used primarily to\n\
    \   detect and avoid synchronization loops. In Version 3 and Version 4\n   primary\
    \ (stratum-1) servers, this field contains the four-character\n   ASCII reference\
    \ identifier defined later in this document. In Version\n   3 secondary servers\
    \ and clients, it contains the 32-bit IPv4 address\n   of the synchronization\
    \ source. In Version 4 secondary servers and\n   clients, it contains the low\
    \ order 32 bits of the last transmit\n   timestamp received from the synchronization\
    \ source.\n   In the case of OSI, the Connectionless Transport Service (CLTS)\
    \ is\n   used [ISO86]. Each SNTP packet is transmitted as tht TS-Userdata\n  \
    \ parameter of a T-UNITDATA Request primitive. Alternately, the header\n   can\
    \ be encapsulated in a TPDU which itself is transported using UDP\n   [DOB91].\
    \ It is not advised that NTP be operated at the upper layers\n   of the OSI stack,\
    \ such as might be inferred from [FUR94], as this\n   could seriously degrade\
    \ accuracy. With the header formats defined in\n   this document, it is in principle\
    \ possible to interwork between\n   servers and clients of one protocol family\
    \ and another, although the\n   practical difficulties may make this inadvisable.\n\
    \      In the following, indented paragraphs such as this one contain\n      information\
    \ not required by the formal protocol specification, but\n      considered good\
    \ practice in protocol implementations.\n"
- title: 2. Operating Modes and Addressing
  contents:
  - "2. Operating Modes and Addressing\n   SNTP Version 4 can operate in either unicast\
    \ (point to point),\n   multicast (point to multipoint) or anycast (multipoint\
    \ to point)\n   modes. A unicast client sends a request to a designated server\
    \ at its\n   unicast address and expects a reply from which it can determine the\n\
    \   time and, optionally, the roundtrip delay and local clock offset\n   relative\
    \ to the server. A multicast server periodically sends a\n   unsolicited message\
    \ to a designated IPv4 or IPv6 local broadcast\n   address or multicast group\
    \ address and ordinarily expects no requests\n   from clients. A multicast client\
    \ listens on this address and\n   ordinarily sends no requests. An anycast client\
    \ sends a request to a\n   designated IPv4 or IPv6 local broadcast address or\
    \ multicast group\n   address. One or more anycast servers reply with their individual\n\
    \   unicast addresses. The client binds to the first one received, then\n   continues\
    \ operation in unicast mode.\n      Multicast servers should respond to client\
    \ unicast requests, as\n      well as send unsolicited multicast messages. Multicast\
    \ clients may\n      send unicast requests in order to determine the network\n\
    \      propagation delay between the server and client and then continue\n   \
    \   operation in multicast mode.\n   In unicast mode, the client and server end-system\
    \ addresses are\n   assigned following the usual IPv4, IPv6 or OSI conventions.\
    \ In\n   multicast mode, the server uses a designated local broadcast address\n\
    \   or multicast group address. An IP local broadcast address has scope\n   limited\
    \ to a single IP subnet, since routers do not propagate IP\n   broadcast datagrams.\
    \ On the other hand, an IP multicast group address\n   has scope extending to\
    \ potentially the entire Internet. The scoping,\n   routing and group membership\
    \ procedures are determined by\n   considerations beyond the scope of this document.\
    \ For IPv4, the IANA\n   has assigned the multicast group address 224.0.1.1 for\
    \ NTP, which is\n   used both by multicast servers and anycast clients. NTP multicast\n\
    \   addresses for IPv6 and OSI have yet to be determined.\n   Multicast clients\
    \ listen on the designated local broadcast address or\n   multicast group address.\
    \ In the case of local broadcast addresses, no\n   further provisions are necessary.\
    \ In the case of IP multicast\n   addresses, the multicast client and anycast\
    \ server must implement the\n   Internet Group Management Protocol (IGMP) [DEE89],\
    \ in order that the\n   local router joins the multicast group and relays messages\
    \ to the\n   IPv4 or IPv6 multicast group addresses assigned by the IANA. Other\n\
    \   than the IP addressing conventions and IGMP, there is no difference\n   in\
    \ server or client operations with either the local broadcast\n   address or multicast\
    \ group address.\n      It is important to adjust the time-to-live (TTL) field\
    \ in the IP\n      header of multicast messages to a reasonable value, in order\
    \ to\n      limit the network resources used by this (and any other) multicast\n\
    \      service. Only multicast clients in scope will receive multicast\n     \
    \ server messages. Only cooperating anycast servers in scope will\n      reply\
    \ to a client request. The engineering principles which\n      determine the proper\
    \ value to be used are beyond the scope of this\n      document.\n   Anycast mode\
    \ is designed for use with a set of cooperating servers\n   whose addresses are\
    \ not known beforehand by the client. An anycast\n   client sends a request to\
    \ the designated local broadcast or multicast\n   group address as described below.\
    \ For this purpose, the NTP multicast\n   group address assigned by the IANA is\
    \ used. One or more anycast\n   servers listen on the designated local broadcast\
    \ address or multicast\n   group address. Each anycast server, upon receiving\
    \ a request, sends a\n   unicast reply message to the originating client. The\
    \ client then\n   binds to the first such message received and continues operation\
    \ in\n   unicast mode. Subsequent replies from other anycast servers are\n   ignored.\n\
    \      In the case of SNTP as specified herein, there is a very real\n      vulnerability\
    \ that SNTP multicast clients can be disrupted by\n      misbehaving or hostile\
    \ SNTP or NTP multicast servers elsewhere in\n      the Internet, since at present\
    \ all such servers use the same IPv4\n      multicast group address assigned by\
    \ the IANA. Where necessary,\n      access control based on the server source\
    \ address can be used to\n      select only the designated server known to and\
    \ trusted by the\n      client. The use of cryptographic authentication scheme\
    \ defined in\n      RFC-1305 is optional; however, implementors should be advised\
    \ that\n      extensions to this scheme are planned specifically for NTP\n   \
    \   multicast and anycast modes.\n      While not integral to the SNTP specification,\
    \ it is intended that\n      IP broadcast addresses will be used primarily in\
    \ IP subnets and\n      LAN segments including a fully functional NTP server with\
    \ a number\n      of dependent SNTP multicast clients on the same subnet, while\
    \ IP\n      multicast group addresses will be used only in cases where the TTL\n\
    \      is engineered specifically for each service domain.\n      In NTP Version\
    \ 3, the reference identifier was often used to\n      walk-back the synchronization\
    \ subnet to the root (primary server)\n      for management purposes. In NTP Version\
    \ 4, this feature is not\n      available, since the addresses are longer than\
    \ 32 bits. However,\n      the intent in the protocol design was to provide a\
    \ way to detect\n      and avoid loops. A peer could determine that a loop was\
    \ possible\n      by comparing the contents of this field with the IPv4 destination\n\
    \      address in the same packet. A NTP Version 4 server can accomplish\n   \
    \   the same thing by comparing the contents of this field with the\n      low\
    \ order 32 bits of the originate timestamp in the same packet.\n      There is\
    \ a small possibility of false alarm in this scheme, but\n      the false alarm\
    \ rate can be minimized by randomizing the low order\n      unused bits of the\
    \ transmit timestamp.\n"
- title: 3. NTP Timestamp Format
  contents:
  - "3. NTP Timestamp Format\n   SNTP uses the standard NTP timestamp format described\
    \ in RFC-1305 and\n   previous versions of that document. In conformance with\
    \ standard\n   Internet practice, NTP data are specified as integer or fixed-point\n\
    \   quantities, with bits numbered in big-endian fashion from 0 starting\n   at\
    \ the left, or high-order, position. Unless specified otherwise, all\n   quantities\
    \ are unsigned and may occupy the full field width with an\n   implied 0 preceding\
    \ bit 0.\n   Since NTP timestamps are cherished data and, in fact, represent the\n\
    \   main product of the protocol, a special timestamp format has been\n   established.\
    \ NTP timestamps are represented as a 64-bit unsigned\n   fixed-point number,\
    \ in seconds relative to 0h on 1 January 1900. The\n   integer part is in the\
    \ first 32 bits and the fraction part in the\n   last 32 bits. In the fraction\
    \ part, the non-significant low order can\n   be set to 0.\n      It is advisable\
    \ to fill the non-significant low order bits of the\n      timestamp with a random,\
    \ unbiased bitstring, both to avoid\n      systematic roundoff errors and as a\
    \ means of loop detection and\n      replay detection (see below). One way of\
    \ doing this is to generate\n      a random bitstring in a 64-bit word, then perform\
    \ an arithmetic\n      right shift a number of bits equal to the number of significant\n\
    \      bits of the timestamp, then add the result to the original\n      timestamp.\n\
    \   This format allows convenient multiple-precision arithmetic and\n   conversion\
    \ to UDP/TIME representation (seconds), but does complicate\n   the conversion\
    \ to ICMP Timestamp message representation, which is in\n   milliseconds. The\
    \ maximum number that can be represented is\n   4,294,967,295 seconds with a precision\
    \ of about 200 picoseconds,\n   which should be adequate for even the most exotic\
    \ requirements.\n                        1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                         Seconds                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Seconds Fraction (0-padded)                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that, since some time in 1968 (second 2,147,483,648) the most\n   significant\
    \ bit (bit 0 of the integer part) has been set and that the\n   64-bit field will\
    \ overflow some time in 2036 (second 4,294,967,296).\n   Should NTP or SNTP be\
    \ in use in 2036, some external means will be\n   necessary to qualify time relative\
    \ to 1900 and time relative to 2036\n   (and other multiples of 136 years). There\
    \ will exist a 200-picosecond\n   interval, henceforth ignored, every 136 years\
    \ when the 64-bit field\n   will be 0, which by convention is interpreted as an\
    \ invalid or\n   unavailable timestamp.\n      As the NTP timestamp format has\
    \ been in use for the last 17 years,\n      it remains a possibility that it will\
    \ be in use 40 years from now\n      when the seconds field overflows. As it is\
    \ probably inappropriate\n      to archive NTP timestamps before bit 0 was set\
    \ in 1968, a\n      convenient way to extend the useful life of NTP timestamps\
    \ is the\n      following convention: If bit 0 is set, the UTC time is in the\n\
    \      range 1968-2036 and UTC time is reckoned from 0h 0m 0s UTC on 1\n     \
    \ January 1900. If bit 0 is not set, the time is in the range 2036-\n      2104\
    \ and UTC time is reckoned from 6h 28m 16s UTC on 7 February\n      2036. Note\
    \ that when calculating the correspondence, 2000 is not a\n      leap year. Note\
    \ also that leap seconds are not counted in the\n      reckoning.\n"
- title: 4. NTP Message Format
  contents:
  - "4. NTP Message Format\n   Both NTP and SNTP are clients of the User Datagram\
    \ Protocol (UDP)\n   [POS80], which itself is a client of the Internet Protocol\
    \ (IP)\n   [DAR81]. The structure of the IP and UDP headers is described in the\n\
    \   cited specification documents and will not be detailed further here.\n   The\
    \ UDP port number assigned to NTP is 123, which should be used in\n   both the\
    \ Source Port and Destination Port fields in the UDP header.\n   The remaining\
    \ UDP header fields should be set as described in the\n   specification.\n   Below\
    \ is a description of the NTP/SNTP Version 4 message format,\n   which follows\
    \ the IP and UDP headers. This format is identical to\n   that described in RFC-1305,\
    \ with the exception of the contents of the\n   reference identifier field. The\
    \ header fields are defined as follows:\n                           1        \
    \           2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          Root Delay                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Root Dispersion                         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Reference Identifier                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                   Reference Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                   Originate Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                    Receive Timestamp (64)                     |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                    Transmit Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 Key Identifier (optional) (32)                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      |      \
    \           Message Digest (optional) (128)               |\n      |         \
    \                                                      |\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   As described in the next section, in SNTP most of these fields are\n   initialized\
    \ with pre-specified data. For completeness, the function\n   of each field is\
    \ briefly summarized below.\n   Leap Indicator (LI): This is a two-bit code warning\
    \ of an impending\n   leap second to be inserted/deleted in the last minute of\
    \ the current\n   day, with bit 0 and bit 1, respectively, coded as follows:\n\
    \      LI       Value     Meaning\n      -------------------------------------------------------\n\
    \      00       0         no warning\n      01       1         last minute has\
    \ 61 seconds\n      10       2         last minute has 59 seconds)\n      11 \
    \      3         alarm condition (clock not synchronized)\n   Version Number (VN):\
    \ This is a three-bit integer indicating the\n   NTP/SNTP version number. The\
    \ version number is 3 for Version 3 (IPv4\n   only) and 4 for Version 4 (IPv4,\
    \ IPv6 and OSI). If necessary to\n   distinguish between IPv4, IPv6 and OSI, the\
    \ encapsulating context\n   must be inspected.\n   Mode: This is a three-bit integer\
    \ indicating the mode, with values\n   defined as follows:\n      Mode     Meaning\n\
    \      ------------------------------------\n      0        reserved\n      1\
    \        symmetric active\n      2        symmetric passive\n      3        client\n\
    \      4        server\n      5        broadcast\n      6        reserved for\
    \ NTP control message\n      7        reserved for private use\n   In unicast\
    \ and anycast modes, the client sets this field to 3\n   (client) in the request\
    \ and the server sets it to 4 (server) in the\n   reply. In multicast mode, the\
    \ server sets this field to 5\n   (broadcast).\n   Stratum: This is a eight-bit\
    \ unsigned integer indicating the stratum\n   level of the local clock, with values\
    \ defined as follows:\n      Stratum  Meaning\n      ----------------------------------------------\n\
    \      0        unspecified or unavailable\n      1        primary reference (e.g.,\
    \ radio clock)\n      2-15     secondary reference (via NTP or SNTP)\n      16-255\
    \   reserved\n   Poll Interval: This is an eight-bit signed integer indicating\
    \ the\n   maximum interval between successive messages, in seconds to the\n  \
    \ nearest power of two. The values that can appear in this field\n   presently\
    \ range from 4 (16 s) to 14 (16284 s); however, most\n   applications use only\
    \ the sub-range 6 (64 s) to 10 (1024 s).\n   Precision: This is an eight-bit signed\
    \ integer indicating the\n   precision of the local clock, in seconds to the nearest\
    \ power of two.\n   The values that normally appear in this field range from -6\
    \ for\n   mains-frequency clocks to -20 for microsecond clocks found in some\n\
    \   workstations.\n   Root Delay: This is a 32-bit signed fixed-point number indicating\
    \ the\n   total roundtrip delay to the primary reference source, in seconds\n\
    \   with fraction point between bits 15 and 16. Note that this variable\n   can\
    \ take on both positive and negative values, depending on the\n   relative time\
    \ and frequency offsets. The values that normally appear\n   in this field range\
    \ from negative values of a few milliseconds to\n   positive values of several\
    \ hundred milliseconds.\n   Root Dispersion: This is a 32-bit unsigned fixed-point\
    \ number\n   indicating the nominal error relative to the primary reference\n\
    \   source, in seconds with fraction point between bits 15 and 16. The\n   values\
    \ that normally appear in this field range from 0 to several\n   hundred milliseconds.\n\
    \   Reference Identifier: This is a 32-bit bitstring identifying the\n   particular\
    \ reference source. In the case of NTP Version 3 or Version\n   4 stratum-0 (unspecified)\
    \ or stratum-1 (primary) servers, this is a\n   four-character ASCII string, left\
    \ justified and zero padded to 32\n   bits. In NTP Version 3 secondary servers,\
    \ this is the 32-bit IPv4\n   address of the reference source. In NTP Version\
    \ 4 secondary servers,\n   this is the low order 32 bits of the latest transmit\
    \ timestamp of the\n   reference source. NTP primary (stratum 1) servers should\
    \ set this\n   field to a code identifying the external reference source according\n\
    \   to the following list. If the external reference is one of those\n   listed,\
    \ the associated code should be used. Codes for sources not\n   listed can be\
    \ contrived as appropriate.\n      Code     External Reference Source\n      ----------------------------------------------------------------\n\
    \      LOCL     uncalibrated local clock used as a primary reference for\n   \
    \            a subnet without external means of synchronization\n      PPS   \
    \   atomic clock or other pulse-per-second source\n               individually\
    \ calibrated to national standards\n      ACTS     NIST dialup modem service\n\
    \      USNO     USNO modem service\n      PTB      PTB (Germany) modem service\n\
    \      TDF      Allouis (France) Radio 164 kHz\n      DCF      Mainflingen (Germany)\
    \ Radio 77.5 kHz\n      MSF      Rugby (UK) Radio 60 kHz\n      WWV      Ft. Collins\
    \ (US) Radio 2.5, 5, 10, 15, 20 MHz\n      WWVB     Boulder (US) Radio 60 kHz\n\
    \      WWVH     Kaui Hawaii (US) Radio 2.5, 5, 10, 15 MHz\n      CHU      Ottawa\
    \ (Canada) Radio 3330, 7335, 14670 kHz\n      LORC     LORAN-C radionavigation\
    \ system\n      OMEG     OMEGA radionavigation system\n      GPS      Global Positioning\
    \ Service\n      GOES     Geostationary Orbit Environment Satellite\n   Reference\
    \ Timestamp: This is the time at which the local clock was\n   last set or corrected,\
    \ in 64-bit timestamp format.\n   Originate Timestamp: This is the time at which\
    \ the request departed\n   the client for the server, in 64-bit timestamp format.\n\
    \   Receive Timestamp: This is the time at which the request arrived at\n   the\
    \ server, in 64-bit timestamp format.\n   Transmit Timestamp: This is the time\
    \ at which the reply departed the\n   server for the client, in 64-bit timestamp\
    \ format.\n   Authenticator (optional): When the NTP authentication scheme is\n\
    \   implemented, the Key Identifier and Message Digest fields contain the\n  \
    \ message authentication code (MAC) information defined in Appendix C\n   of RFC-1305.\n"
- title: 5. SNTP Client Operations
  contents:
  - "5. SNTP Client Operations\n   A SNTP client can operate in multicast mode, unicast\
    \ mode or anycast\n   mode. In multicast mode, the client sends no request and\
    \ waits for a\n   broadcast (mode 5) from a designated multicast server. In unicast\n\
    \   mode, the client sends a request (mode 3) to a designated unicast\n   server\
    \ and expects a reply (mode 4) from that server. In anycast\n   mode, the client\
    \ sends a request (mode 3) to a designated local\n   broadcast or multicast group\
    \ address and expects a reply (mode 4)\n   from one or more anycast servers. The\
    \ client uses the first reply\n   received to establish the particular server\
    \ for subsequent unicast\n   operations. Later replies from this server (duplicates)\
    \ or any other\n   server are ignored. Other than the selection of address in\
    \ the\n   request, the operations of anycast and unicast clients are identical.\n\
    \   Requests are normally sent at intervals from 64 s to 1024 s,\n   depending\
    \ on the frequency tolerance of the client clock and the\n   required accuracy.\n\
    \   A unicast or anycast client initializes the NTP message header, sends\n  \
    \ the request to the server and strips the time of day from the\n   Transmit Timestamp\
    \ field of the reply. For this purpose, all of the\n   NTP header fields shown\
    \ above can be set to 0, except the first octet\n   and (optional) Transmit Timestamp\
    \ fields. In the first octet, the LI\n   field is set to 0 (no warning) and the\
    \ Mode field is set to 3\n   (client). The VN field must agree with the version\
    \ number of the\n   NTP/SNTP server; however, Version 4 servers will also accept\
    \ previous\n   versions. Version 3 (RFC-1305) and Version 2 (RFC-1119) servers\n\
    \   already accept all previous versions, including Version 1 (RFC-1059).\n  \
    \ Note that Version 0 (RFC-959) is no longer supported by any other\n   version.\n\
    \   Since there will probably continue to be NTP and SNTP servers of all\n   four\
    \ versions interoperating in the Internet, careful consideration\n   should be\
    \ given to the version used by SNTP Version 4 clients. It is\n   recommended that\
    \ clients use the latest version known to be supported\n   by the selected server\
    \ in the interest of the highest accuracy and\n   reliability. SNTP Version 4\
    \ clients can interoperate with all\n   previous version NTP and SNTP servers,\
    \ since the header fields used\n   by SNTP clients are unchanged. Version 4 servers\
    \ are required to\n   reply in the same version as the request, so the VN field\
    \ of the\n   request also specifies the version of the reply.\n   While not necessary\
    \ in a conforming client implementation, in unicast\n   and anycast modes it highly\
    \ recommended that the transmit timestamp\n   in the request is set to the time\
    \ of day according to the client\n   clock in NTP timestamp format. This allows\
    \ a simple calculation to\n   determine the propagation delay between the server\
    \ and client and to\n   align the local clock generally within a few tens of milliseconds\n\
    \   relative to the server. In addition, this provides a simple method to\n  \
    \ verify that the server reply is in fact a legitimate response to the\n   specific\
    \ client request and avoid replays. In multicast mode, the\n   client has no information\
    \ to calculate the propagation delay or\n   determine the validity of the server,\
    \ unless the NTP authentication\n   scheme is used.\n   To calculate the roundtrip\
    \ delay d and local clock offset t relative\n   to the server, the client sets\
    \ the transmit timestamp in the request\n   to the time of day according to the\
    \ client clock in NTP timestamp\n   format. The server copies this field to the\
    \ originate timestamp in\n   the reply and sets the receive timestamp and transmit\
    \ timestamp to\n   the time of day according to the server clock in NTP timestamp\n\
    \   format.\n   When the server reply is received, the client determines a\n \
    \  Destination Timestamp variable as the time of arrival according to\n   its\
    \ clock in NTP timestamp format. The following table summarizes the\n   four timestamps.\n\
    \      Timestamp Name          ID   When Generated\n      ------------------------------------------------------------\n\
    \      Originate Timestamp     T1   time request sent by client\n      Receive\
    \ Timestamp       T2   time request received by server\n      Transmit Timestamp\
    \      T3   time reply sent by server\n      Destination Timestamp   T4   time\
    \ reply received by client\n   The roundtrip delay d and local clock offset t\
    \ are defined as\n      d = (T4 - T1) - (T2 - T3)     t = ((T2 - T1) + (T3 - T4))\
    \ / 2.\n   The following table summarizes the SNTP client operations in unicast,\n\
    \   anycast and multicast modes. The recommended error checks are shown\n   in\
    \ the Reply and Multicast columns in the table. The message should\n   be considered\
    \ valid only if all the fields shown contain values in\n   the respective ranges.\
    \ Whether to believe the message if one or more\n   of the fields marked \"ignore\"\
    \ contain invalid values is at the\n   discretion of the implementation.\n   \
    \   Field Name              Unicast/Anycast          Multicast\n             \
    \                 Request    Reply\n      ----------------------------------------------------------\n\
    \      LI                      0          0-2           0-2\n      VN        \
    \              1-4        copied from   1-4\n                                \
    \         request\n      Mode                    3          4             5\n\
    \      Stratum                 0          1-14          1-14\n      Poll     \
    \               0          ignore        ignore\n      Precision             \
    \  0          ignore        ignore\n      Root Delay              0          ignore\
    \        ignore\n      Root Dispersion         0          ignore        ignore\n\
    \      Reference Identifier    0          ignore        ignore\n      Reference\
    \ Timestamp     0          ignore        ignore\n      Originate Timestamp   \
    \  0          (see text)    ignore\n      Receive Timestamp       0          (see\
    \ text)    ignore\n      Transmit Timestamp      (see text) nonzero       nonzero\n\
    \      Authenticator           optional   optional      optional\n"
- title: 6. SNTP Server Operations
  contents:
  - "6. SNTP Server Operations\n   A SNTP Version 4 server operating with either a\
    \ NTP or SNTP client of\n   the same or previous versions retains no persistent\
    \ state. Since a\n   SNTP server ordinarily does not implement the full set of\
    \ NTP\n   algorithms intended to support redundant peers and diverse network\n\
    \   paths, a SNTP server should be operated only in conjunction with a\n   source\
    \ of external synchronization, such as a reliable radio clock or\n   telephone\
    \ modem. In this case it always operates as a primary\n   (stratum 1) server.\n\
    \   A SNTP server can operate in unicast mode, anycast mode, multicast\n   mode\
    \ or any combination of these modes. In unicast and anycast modes,\n   the server\
    \ receives a request (mode 3), modifies certain fields in\n   the NTP header,\
    \ and sends a reply (mode 4), possibly using the same\n   message buffer as the\
    \ request. In anycast mode, the server listens on\n   the designated local broadcast\
    \ or multicast group address assigned by\n   the IANA, but uses its own unicast\
    \ address in the source address\n   field of the reply. Other than the selection\
    \ of address in the reply,\n   the operations of anycast and unicast servers are\
    \ identical.\n   Multicast messages are normally sent at poll intervals from 64\
    \ s to\n   1024 s, depending on the expected frequency tolerance of the client\n\
    \   clocks and the required accuracy.\n   In unicast and anycast modes, the VN\
    \ and Poll fields of the request\n   are copied intact to the reply. If the Mode\
    \ field of the request is 3\n   (client), it is set to 4 (server) in the reply;\
    \ otherwise, this field\n   is set to 2 (symmetric passive) in order to conform\
    \ to the NTP\n   specification. This allows clients configured in symmetric active\n\
    \   (mode 1) to interoperate successfully, even if configured in possibly\n  \
    \ suboptimal ways. In multicast (unsolicited) mode, the VN field is set\n   to\
    \ 4, the Mode field is set to 5 (broadcast), and the Poll field set\n   to the\
    \ nearest integer base-2 logarithm of the poll interval.\n      Note that it is\
    \ highly desirable that, if a server supports\n      multicast mode, it also supports\
    \ unicast mode. This is so a\n      potential multicast client can calculate the\
    \ propagation delay\n      using a client/server exchange prior to regular operation\
    \ using\n      only multicast mode. If the server supports anycast mode, then\
    \ it\n      must support unicast mode. There does not seem to be a great\n   \
    \   advantage to operate both multicast and anycast modes at the same\n      time,\
    \ although the protocol specification does not forbid it.\n   In unicast and anycast\
    \ modes, the server may or may not respond if\n   not synchronized to a correctly\
    \ operating radio clock, but the\n   preferred option is to respond, since this\
    \ allows reachability to be\n   determined regardless of synchronization state.\
    \ In multicast mode,\n   the server sends broadcasts only if synchronized to a\
    \ correctly\n   operating reference clock.\n   The remaining fields of the NTP\
    \ header are set in the following way.\n   Assuming the server is synchronized\
    \ to a radio clock or other primary\n   reference source and operating correctly,\
    \ the LI field is set to 0\n   and the Stratum field is set to 1 (primary server);\
    \ if not, the\n   Stratum field is set to 0 and the LI field is set to 3. The\
    \ Precision\n   field is set to reflect the maximum reading error of the local\
    \ clock.\n   For all practical cases it is computed as the negative of the number\n\
    \   of significant bits to the right of the decimal point in the NTP\n   timestamp\
    \ format. The Root Delay and Root Dispersion fields are set\n   to 0 for a primary\
    \ server; optionally, the Root Dispersion field can\n   be set to a value corresponding\
    \ to the maximum expected error of the\n   radio clock itself. The Reference Identifier\
    \ is set to designate the\n   primary reference source, as indicated in the table\
    \ of Section 5 of\n   this document.\n   The timestamp fields are set as follows.\
    \ If the server is\n   unsynchronized or first coming up, all timestamp fields\
    \ are set to\n   zero. If synchronized, the Reference Timestamp is set to the\
    \ time the\n   last update was received from the radio clock or modem. In unicast\n\
    \   and anycast modes, the Receive Timestamp and Transmit Timestamp\n   fields\
    \ are set to the time of day when the message is sent and the\n   Originate Timestamp\
    \ field is copied unchanged from the Transmit\n   Timestamp field of the request.\
    \ It is important that this field be\n   copied intact, as a NTP client uses it\
    \ to avoid replays. In multicast\n   mode, the Originate Timestamp and Receive\
    \ Timestamp fields are set to\n   0 and the Transmit Timestamp field is set to\
    \ the time of day when the\n   message is sent. The following table summarizes\
    \ these actions.\n      Field Name              Unicast/Anycast          Multicast\n\
    \                              Request    Reply\n      ----------------------------------------------------------\n\
    \      LI                      ignore     0 or 3        0 or 3\n      VN     \
    \                 1-4        copied from   4\n                               \
    \          request\n      Mode                    3          2 or 4        5\n\
    \      Stratum                 ignore     1             1\n      Poll        \
    \            ignore     copied from   log2 poll\n                            \
    \             request       interval\n      Precision               ignore   \
    \  -log2 server  -log2 server\n                                         significant\
    \   significant\n                                         bits          bits\n\
    \      Root Delay              ignore     0             0\n      Root Dispersion\
    \         ignore     0             0\n      Reference Identifier    ignore   \
    \  source ident  source ident\n      Reference Timestamp     ignore     time of\
    \ last  time of last\n                                         radio update  radio\
    \ update\n      Originate Timestamp     ignore     copied from   0\n         \
    \                                transmit\n                                  \
    \       timestamp\n      Receive Timestamp       ignore     time of day   0\n\
    \      Transmit Timestamp      (see text) time of day   time of day\n      Authenticator\
    \           optional   optional      optional\n   There is some latitude on the\
    \ part of most clients to forgive invalid\n   timestamps, such as might occur\
    \ when first coming up or during\n   periods when the primary reference source\
    \ is inoperative. The most\n   important indicator of an unhealthy server is the\
    \ LI field, in which\n   a value of 3 indicates an unsynchronized condition. When\
    \ this value\n   is displayed, clients should discard the server message, regardless\n\
    \   of the contents of other fields.\n"
- title: 7. Configuration and Management
  contents:
  - "7. Configuration and Management\n   Initial setup for SNTP servers and clients\
    \ can be done using a\n   configuration file if a file system is available, or\
    \ a serial port if\n   not. It is intended that in-service management of NTP and\
    \ SNTP\n   Version 4 servers and clients be performed using SNMP and a suitable\n\
    \   MIB to be published later. Ordinarily, SNTP servers and clients are\n   expected\
    \ to operate with little or no site-specific configuration,\n   other than specifying\
    \ the IP address and subnet mask or OSI NSAP\n   address.\n   Unicast clients\
    \ must be provided with the designated server name or\n   address. If a server\
    \ name is used, the address of one of more DNS\n   servers must be provided. Multicast\
    \ servers and anycast clients  must\n   be provided with the TTL and local broadcast\
    \ or multicast group\n   address. Anycast servers and multicast clients may be\
    \ configured with\n   a list of address-mask pairs for access control, so that\
    \ only those\n   clients or servers known to be trusted will be used. These servers\n\
    \   and clients must implement the IGMP protocol and be provided with the\n  \
    \ local broadcast or multicast group address as well. The configuration\n   data\
    \ for cryptographic authentication is beyond the scope of this\n   document.\n\
    \   There are several scenarios which provide automatic server discovery\n   and\
    \ selection for SNTP clients with no pre-specified configuration,\n   other than\
    \ the IP address and subnet mask or OSI NSAP address. For a\n   IP subnet or LAN\
    \ segment including a fully functional NTP server, the\n   clients can be configured\
    \ for multicast mode using the local\n   broadcast address. The same approach\
    \ can be used with other servers\n   using the multicast group address. In both\
    \ cases, provision of an\n   access control list is a good way to insure only\
    \ trusted sources can\n   be used to set the local clock.\n   In another scenario\
    \ suitable for an extended network with significant\n   network propagation delays,\
    \ clients can be configured for anycast\n   mode, both upon initial startup and\
    \ after some period when the\n   currently selected unicast source has not been\
    \ heard. Following the\n   defined protocol, the client binds to the first reply\
    \ heard and\n   continues operation in unicast mode. In this mode the local clock\
    \ can\n   be automatically adjusted to compensate for the propagation delay.\n\
    \   In still another scenario suitable for any network and where\n   multicast\
    \ service is not available, the DNS can be set up with a\n   common CNAME, like\
    \ time.domain.net, and a list of address records for\n   NTP servers in the same\
    \ domain. Upon resolving time.domain.net and\n   obtaining the list, the client\
    \ selects a server at random and begins\n   operation in unicast mode with that\
    \ server. Many variations on this\n   theme are possible.\n"
- title: 8. Acknowledgements
  contents:
  - "8. Acknowledgements\n   Jeff Learman was helpful in developing the OSI model\
    \ for this\n   protocol. Ajit Thyagarajan provided valuable suggestions and\n\
    \   corrections.\n"
- title: 9. References
  contents:
  - "9. References\n   [COL94] Colella, R., R. Callon, E. Gardner, Y. Rekhter, \"\
    Guidelines\n   for OSI NSAP allocation in the Internet\", RFC 1629, NIST, May\
    \ 1994.\n   [DAR81] Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n   USC\
    \ Information Sciences Institute, September 1981.\n   [DEE89] Deering, S., \"\
    Host extensions for IP multicasting\", STD 5,\n   RFC 1112, Stanford University,\
    \ August 1989.\n   [DEE96] Deering, S., R. Hinden, \"Internet Protocol, Version\
    \ 6 (IPv6)\n   Specification\", RFC 1883, Xerox and Ipsilon, January 1996.\n \
    \  [DOB91] Dobbins, K, W. Haggerty, C. Shue, \"OSI connectionless\n   transport\
    \ services on top of UDP - Version: 1\", RFC 1240, Open\n   Software Foundation,\
    \ June 1991.\n   [EAS95] Eastlake, D., 3rd., and C. Kaufman, \"Domain Name System\n\
    \   Security Extensions\", Work in Progress.\n   [FUR94] Furniss, P., \"Octet\
    \ sequences for upper-layer OSI to support\n   basic communications applications\"\
    , RFC 1698, Consultant,\n   October 1994.\n   [HIN96] Hinden, R., and S. Deering,\
    \ \"IP Version 6 addressing\n   Architecture\", RFC 1884, Ipsilon and Xerox, January\
    \ 1996.\n   [ISO86] International Standards 8602 - Information Processing Systems\n\
    \   - OSI: Connectionless Transport Protocol Specification. International\n  \
    \ Standards Organization, December 1986.\n   [MIL92] Mills, D., \"Network Time\
    \ Protocol (Version 3) specification,\n   implementation and analysis\", RFC 1305,\
    \ University of Delaware,\n   March 1992.\n   [PAR93] Partridge, C., T. Mendez\
    \ and W. Milliken, \"Host anycasting\n   service\", RFC 1546, Bolt Beranek Newman,\
    \ November 1993.\n   [POS80] Postel, J., \"User Datagram Protocol\", STD 6, RFC\
    \ 768,\n   USC Information Sciences Institute, August 1980.\n   [POS83] Postel,\
    \ J., \"Time Protocol\", STD 26, RFC 868,\n   USC Information Sciences Institute,\
    \ May 1983.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David L. Mills\n   Electrical Engineering Department\n \
    \  University of Delaware\n   Newark, DE 19716\n   Phone: (302) 831-8247\n"
