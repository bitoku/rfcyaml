- title: __initial_text__
  contents:
  - '                            DNS Terminology

    '
- title: Abstract
  contents:
  - "Abstract\n   The Domain Name System (DNS) is defined in literally dozens of\n\
    \   different RFCs.  The terminology used by implementers and developers\n   of\
    \ DNS protocols, and by operators of DNS systems, has sometimes\n   changed in\
    \ the decades since the DNS was first defined.  This\n   document gives current\
    \ definitions for many of the terms used in the\n   DNS in a single document.\n\
    \   This document obsoletes RFC 7719 and updates RFC 2308.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8499.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Names . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  DNS Response Codes  . . . . . . . . . . . . . . . . . .\
    \ . . .  10\n   4.  DNS Transactions  . . . . . . . . . . . . . . . . . . . .\
    \ . .  11\n   5.  Resource Records  . . . . . . . . . . . . . . . . . . . . .\
    \ .  14\n   6.  DNS Servers and Clients . . . . . . . . . . . . . . . . . . .\
    \  16\n   7.  Zones . . . . . . . . . . . . . . . . . . . . . . . . . . . .  22\n\
    \   8.  Wildcards . . . . . . . . . . . . . . . . . . . . . . . . . .  27\n  \
    \ 9.  Registration Model  . . . . . . . . . . . . . . . . . . . . .  28\n   10.\
    \ General DNSSEC  . . . . . . . . . . . . . . . . . . . . . . .  30\n   11. DNSSEC\
    \ States . . . . . . . . . . . . . . . . . . . . . . . .  34\n   12. Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  36\n   13. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  36\n   14. References  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  36\n     14.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  36\n     14.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  39\n   Appendix A.  Definitions Updated by\
    \ This Document . . . . . . . .  44\n   Appendix B.  Definitions First Defined\
    \ in This Document . . . . .  44\n   Index . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  46\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  50\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  50\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Domain Name System (DNS) is a simple query-response\
    \ protocol\n   whose messages in both directions have the same format.  (Section\
    \ 2\n   gives a definition of \"public DNS\", which is often what people mean\n\
    \   when they say \"the DNS\".)  The protocol and message format are\n   defined\
    \ in [RFC1034] and [RFC1035].  These RFCs defined some terms,\n   and later documents\
    \ defined others.  Some of the terms from [RFC1034]\n   and [RFC1035] have somewhat\
    \ different meanings now than they did in\n   1987.\n   This document contains\
    \ a collection of a wide variety of DNS-related\n   terms, organized loosely by\
    \ topic.  Some of them have been precisely\n   defined in earlier RFCs, some have\
    \ been loosely defined in earlier\n   RFCs, and some are not defined in an earlier\
    \ RFC at all.\n   Other organizations sometimes define DNS-related terms their\
    \ own way.\n   For example, the WHATWG defines \"domain\" at\n   <https://url.spec.whatwg.org/>.\
    \  The Root Server System Advisory\n   Committee (RSSAC) has a good lexicon [RSSAC026].\n\
    \   Most of the definitions listed here represent the consensus\n   definition\
    \ of the DNS community -- both protocol developers and\n   operators.  Some of\
    \ the definitions differ from earlier RFCs, and\n   those differences are noted.\
    \  In this document, where the consensus\n   definition is the same as the one\
    \ in an RFC, that RFC is quoted.\n   Where the consensus definition has changed\
    \ somewhat, the RFC is\n   mentioned but the new stand-alone definition is given.\
    \  See\n   Appendix A for a list of the definitions that this document updates.\n\
    \   It is important to note that, during the development of this\n   document,\
    \ it became clear that some DNS-related terms are interpreted\n   quite differently\
    \ by different DNS experts.  Further, some terms that\n   are defined in early\
    \ DNS RFCs now have definitions that are generally\n   agreed to, but that are\
    \ different from the original definitions.\n   Therefore, this document is a substantial\
    \ revision to [RFC7719].\n   Note that there is no single consistent definition\
    \ of \"the DNS\".  It\n   can be considered to be some combination of the following:\
    \ a commonly\n   used naming scheme for objects on the Internet; a distributed\n\
    \   database representing the names and certain properties of these\n   objects;\
    \ an architecture providing distributed maintenance,\n   resilience, and loose\
    \ coherency for this database; and a simple\n   query-response protocol (as mentioned\
    \ below) implementing this\n   architecture.  Section 2 defines \"global DNS\"\
    \ and \"private DNS\" as a\n   way to deal with these differing definitions.\n\
    \   Capitalization in DNS terms is often inconsistent among RFCs and\n   various\
    \ DNS practitioners.  The capitalization used in this document\n   is a best guess\
    \ at current practices, and is not meant to indicate\n   that other capitalization\
    \ styles are wrong or archaic.  In some\n   cases, multiple styles of capitalization\
    \ are used for the same term\n   due to quoting from different RFCs.\n   Readers\
    \ should note that the terms in this document are grouped by\n   topic.  Someone\
    \ who is not already familiar with the DNS probably\n   cannot learn about the\
    \ DNS from scratch by reading this document from\n   front to back.  Instead,\
    \ skipping around may be the only way to get\n   enough context to understand\
    \ some of the definitions.  This document\n   has an index that might be useful\
    \ for readers who are attempting to\n   learn the DNS by reading this document.\n"
- title: 2.  Names
  contents:
  - "2.  Names\n   Naming system:  A naming system associates names with data.  Naming\n\
    \      systems have many significant facets that help differentiate them\n   \
    \   from each other.  Some commonly identified facets include:\n      *  Composition\
    \ of names\n      *  Format of names\n      *  Administration of names\n     \
    \ *  Types of data that can be associated with names\n      *  Types of metadata\
    \ for names\n      *  Protocol for getting data from a name\n      *  Context\
    \ for resolving a name\n      Note that this list is a small subset of facets\
    \ that people have\n      identified over time for naming systems, and the IETF\
    \ has yet to\n      agree on a good set of facets that can be used to compare\
    \ naming\n      systems.  For example, other facets might include \"protocol to\n\
    \      update data in a name\", \"privacy of names\", and \"privacy of data\n\
    \      associated with names\", but those are not as well defined as the\n   \
    \   ones listed above.  The list here is chosen because it helps\n      describe\
    \ the DNS and naming systems similar to the DNS.\n   Domain name:  An ordered\
    \ list of one or more labels.\n      Note that this is a definition independent\
    \ of the DNS RFCs\n      ([RFC1034] and [RFC1035]), and the definition here also\
    \ applies to\n      systems other than the DNS.  [RFC1034] defines the \"domain\
    \ name\n      space\" using mathematical trees and their nodes in graph theory,\n\
    \      and that definition has the same practical result as the\n      definition\
    \ here.  Any path of a directed acyclic graph can be\n      represented by a domain\
    \ name consisting of the labels of its\n      nodes, ordered by decreasing distance\
    \ from the root(s) (which is\n      the normal convention within the DNS, including\
    \ this document).  A\n      domain name whose last label identifies a root of\
    \ the graph is\n      fully qualified; other domain names whose labels form a\
    \ strict\n      prefix of a fully-qualified domain name are relative to its first\n\
    \      omitted node.\n      Also note that different IETF and non-IETF documents\
    \ have used the\n      term \"domain name\" in many different ways.  It is common\
    \ for\n      earlier documents to use \"domain name\" to mean \"names that match\n\
    \      the syntax in [RFC1035]\", but possibly with additional rules such\n  \
    \    as \"and are, or will be, resolvable in the global DNS\" or \"but\n     \
    \ only using the presentation format\".\n   Label:  An ordered list of zero or\
    \ more octets that makes up a\n      portion of a domain name.  Using graph theory,\
    \ a label identifies\n      one node in a portion of the graph of all possible\
    \ domain names.\n   Global DNS:  Using the short set of facets listed in \"Naming\
    \ system\",\n      the global DNS can be defined as follows.  Most of the rules\
    \ here\n      come from [RFC1034] and [RFC1035], although the term \"global DNS\"\
    \n      has not been defined before now.\n      Composition of names: A name in\
    \ the global DNS has one or more\n      labels.  The length of each label is between\
    \ 0 and 63 octets\n      inclusive.  In a fully-qualified domain name, the last\
    \ label in\n      the ordered list is 0 octets long; it is the only label whose\n\
    \      length may be 0 octets, and it is called the \"root\" or \"root\n     \
    \ label\".  A domain name in the global DNS has a maximum total\n      length\
    \ of 255 octets in the wire format; the root represents one\n      octet for this\
    \ calculation.  (Multicast DNS [RFC6762] allows names\n      up to 255 bytes plus\
    \ a terminating zero byte based on a different\n      interpretation of RFC 1035\
    \ and what is included in the 255\n      octets.)\n      Format of names: Names\
    \ in the global DNS are domain names.  There\n      are three formats: wire format,\
    \ presentation format, and common\n      display.\n         The basic wire format\
    \ for names in the global DNS is a list of\n         labels ordered by decreasing\
    \ distance from the root, with the\n         root label last.  Each label is preceded\
    \ by a length octet.\n         [RFC1035] also defines a compression scheme that\
    \ modifies this\n         format.\n         The presentation format for names\
    \ in the global DNS is a list\n         of labels ordered by decreasing distance\
    \ from the root, encoded\n         as ASCII, with a \".\" character between each\
    \ label.  In\n         presentation format, a fully-qualified domain name includes\
    \ the\n         root label and the associated separator dot.  For example, in\n\
    \         presentation format, a fully-qualified domain name with two\n      \
    \   non-root labels is always shown as \"example.tld.\" instead of\n         \"\
    example.tld\".  [RFC1035] defines a method for showing octets\n         that do\
    \ not display in ASCII.\n         The common display format is used in applications\
    \ and free\n         text.  It is the same as the presentation format, but showing\n\
    \         the root label and the \".\" before it is optional and is rarely\n \
    \        done.  For example, in common display format, a fully-qualified\n   \
    \      domain name with two non-root labels is usually shown as\n         \"example.tld\"\
    \ instead of \"example.tld.\".  Names in the common\n         display format are\
    \ normally written such that the\n         directionality of the writing system\
    \ presents labels by\n         decreasing distance from the root (so, in both\
    \ English and the\n         C programming language the root or Top-Level Domain\
    \ (TLD) label\n         in the ordered list is rightmost; but in Arabic, it may\
    \ be\n         leftmost, depending on local conventions).\n      Administration\
    \ of names: Administration is specified by delegation\n      (see the definition\
    \ of \"delegation\" in Section 7).  Policies for\n      administration of the\
    \ root zone in the global DNS are determined\n      by the names operational community,\
    \ which convenes itself in the\n      Internet Corporation for Assigned Names\
    \ and Numbers (ICANN).  The\n      names operational community selects the IANA\
    \ Functions Operator\n      for the global DNS root zone.  At the time of writing,\
    \ that\n      operator is Public Technical Identifiers (PTI).  (See\n      <https://pti.icann.org/>\
    \ for more information about PTI operating\n      the IANA Functions.)  The name\
    \ servers that serve the root zone\n      are provided by independent root operators.\
    \  Other zones in the\n      global DNS have their own policies for administration.\n\
    \      Types of data that can be associated with names: A name can have\n    \
    \  zero or more resource records associated with it.  There are\n      numerous\
    \ types of resource records with unique data structures\n      defined in many\
    \ different RFCs and in the IANA registry at\n      [IANA_Resource_Registry].\n\
    \      Types of metadata for names: Any name that is published in the DNS\n  \
    \    appears as a set of resource records (see the definition of\n      \"RRset\"\
    \ in Section 5).  Some names do not, themselves, have data\n      associated with\
    \ them in the DNS, but they \"appear\" in the DNS\n      anyway because they form\
    \ part of a longer name that does have data\n      associated with it (see the\
    \ definition of \"empty non-terminals\" in\n      Section 7).\n      Protocol\
    \ for getting data from a name: The protocol described in\n      [RFC1035].\n\
    \      Context for resolving a name: The global DNS root zone distributed\n  \
    \    by PTI.\n   Private DNS:  Names that use the protocol described in [RFC1035]\
    \ but\n      that do not rely on the global DNS root zone or names that are\n\
    \      otherwise not generally available on the Internet but are using\n     \
    \ the protocol described in [RFC1035].  A system can use both the\n      global\
    \ DNS and one or more private DNS systems; for example, see\n      \"Split DNS\"\
    \ in Section 6.\n      Note that domain names that do not appear in the DNS, and\
    \ that are\n      intended never to be looked up using the DNS protocol, are not\n\
    \      part of the global DNS or a private DNS even though they are\n      domain\
    \ names.\n   Multicast DNS (mDNS):  \"Multicast DNS (mDNS) provides the ability\
    \ to\n      perform DNS-like operations on the local link in the absence of\n\
    \      any conventional Unicast DNS server.  In addition, Multicast DNS\n    \
    \  designates a portion of the DNS namespace to be free for local\n      use,\
    \ without the need to pay any annual fee, and without the need\n      to set up\
    \ delegations or otherwise configure a conventional DNS\n      server to answer\
    \ for those names.\"  (Quoted from [RFC6762],\n      Abstract) Although it uses\
    \ a compatible wire format, mDNS is,\n      strictly speaking, a different protocol\
    \ than DNS.  Also, where the\n      above quote says \"a portion of the DNS namespace\"\
    , it would be\n      clearer to say \"a portion of the domain name space\".  The\
    \ names in\n      mDNS are not intended to be looked up in the DNS.\n   Locally\
    \ served DNS zone:  A locally served DNS zone is a special case\n      of private\
    \ DNS.  Names are resolved using the DNS protocol in a\n      local context. \
    \ [RFC6303] defines subdomains of IN-ADDR.ARPA that\n      are locally served\
    \ zones.  Resolution of names through locally\n      served zones may result in\
    \ ambiguous results.  For example, the\n      same name may resolve to different\
    \ results in different locally\n      served DNS zone contexts.  The context for\
    \ a locally served DNS\n      zone may be explicit, such as those that are listed\
    \ in [RFC6303]\n      and [RFC7793], or implicit, such as those defined by local\
    \ DNS\n      administration and not known to the resolution client.\n   Fully-Qualified\
    \ Domain Name (FQDN):  This is often just a clear way\n      of saying the same\
    \ thing as \"domain name of a node\", as outlined\n      above.  However, the\
    \ term is ambiguous.  Strictly speaking, a\n      fully-qualified domain name\
    \ would include every label, including\n      the zero-length label of the root:\
    \ such a name would be written\n      \"www.example.net.\" (note the terminating\
    \ dot).  But, because every\n      name eventually shares the common root, names\
    \ are often written\n      relative to the root (such as \"www.example.net\")\
    \ and are still\n      called \"fully qualified\".  This term first appeared in\
    \ [RFC819].\n      In this document, names are often written relative to the root.\n\
    \      The need for the term \"fully-qualified domain name\" comes from the\n\
    \      existence of partially qualified domain names, which are names\n      where\
    \ one or more of the last labels in the ordered list are\n      omitted (for example,\
    \ a domain name of \"www\" relative to\n      \"example.net\" identifies \"www.example.net\"\
    ).  Such relative names\n      are understood only by context.\n   Host name:\
    \  This term and its equivalent, \"hostname\", have been\n      widely used but\
    \ are not defined in [RFC1034], [RFC1035],\n      [RFC1123], or [RFC2181].  The\
    \ DNS was originally deployed into the\n      Host Tables environment as outlined\
    \ in [RFC952], and it is likely\n      that the term followed informally from\
    \ the definition there.  Over\n      time, the definition seems to have shifted.\
    \  \"Host name\" is often\n      meant to be a domain name that follows the rules\
    \ in Section 3.5 of\n      [RFC1034], which is also called the \"preferred name\
    \ syntax\".  (In\n      that syntax, every character in each label is a letter,\
    \ a digit,\n      or a hyphen).  Note that any label in a domain name can contain\n\
    \      any octet value; hostnames are generally considered to be domain\n    \
    \  names where every label follows the rules in the \"preferred name\n      syntax\"\
    , with the amendment that labels can start with ASCII\n      digits (this amendment\
    \ comes from Section 2.1 of [RFC1123]).\n      People also sometimes use the term\
    \ \"hostname\" to refer to just the\n      first label of an FQDN, such as \"\
    printer\" in\n      \"printer.admin.example.com\".  (Sometimes this is formalized\
    \ in\n      configuration in operating systems.)  In addition, people\n      sometimes\
    \ use this term to describe any name that refers to a\n      machine, and those\
    \ might include labels that do not conform to the\n      \"preferred name syntax\"\
    .\n   Top-Level Domain (TLD):  A Top-Level Domain is a zone that is one\n    \
    \  layer below the root, such as \"com\" or \"jp\".  There is nothing\n      special,\
    \ from the point of view of the DNS, about TLDs.  Most of\n      them are also\
    \ delegation-centric zones (defined in Section 7), and\n      there are significant\
    \ policy issues around their operation.  TLDs\n      are often divided into sub-groups\
    \ such as Country Code Top-Level\n      Domains (ccTLDs), Generic Top-Level Domains\
    \ (gTLDs), and others;\n      the division is a matter of policy and beyond the\
    \ scope of this\n      document.\n   Internationalized Domain Name (IDN):  The\
    \ Internationalized Domain\n      Names for Applications (IDNA) protocol is the\
    \ standard mechanism\n      for handling domain names with non-ASCII characters\
    \ in\n      applications in the DNS.  The current standard at the time of this\n\
    \      writing, normally called \"IDNA2008\", is defined in [RFC5890],\n     \
    \ [RFC5891], [RFC5892], [RFC5893], and [RFC5894].  These documents\n      define\
    \ many IDN-specific terms such as \"LDH label\", \"A-label\", and\n      \"U-label\"\
    .  [RFC6365] defines more terms that relate to\n      internationalization (some\
    \ of which relate to IDNs); [RFC6055] has\n      a much more extensive discussion\
    \ of IDNs, including some new\n      terminology.\n   Subdomain:  \"A domain is\
    \ a subdomain of another domain if it is\n      contained within that domain.\
    \  This relationship can be tested by\n      seeing if the subdomain's name ends\
    \ with the containing domain's\n      name.\"  (Quoted from [RFC1034], Section\
    \ 3.1) For example, in the\n      host name \"nnn.mmm.example.com\", both \"mmm.example.com\"\
    \ and\n      \"nnn.mmm.example.com\" are subdomains of \"example.com\".  Note\
    \ that\n      the comparisons here are done on whole labels; that is,\n      \"\
    ooo.example.com\" is not a subdomain of \"oo.example.com\".\n   Alias:  The owner\
    \ of a CNAME resource record, or a subdomain of the\n      owner of a DNAME resource\
    \ record (DNAME records are defined in\n      [RFC6672]).  See also \"canonical\
    \ name\".\n   Canonical name:  A CNAME resource record \"identifies its owner\
    \ name\n      as an alias, and specifies the corresponding canonical name in the\n\
    \      RDATA section of the RR.\"  (Quoted from [RFC1034], Section 3.6.2)\n  \
    \    This usage of the word \"canonical\" is related to the mathematical\n   \
    \   concept of \"canonical form\".\n   CNAME:  \"It has been traditional to refer\
    \ to the [owner] of a CNAME\n      record as 'a CNAME'.  This is unfortunate,\
    \ as 'CNAME' is an\n      abbreviation of 'canonical name', and the [owner] of\
    \ a CNAME\n      record is most certainly not a canonical name.\"  (Quoted from\n\
    \      [RFC2181], Section 10.1.1.  The quoted text has been changed from\n   \
    \   \"label\" to \"owner\".)\n"
- title: 3.  DNS Response Codes
  contents:
  - "3.  DNS Response Codes\n   Some of the response codes (RCODEs) that are defined\
    \ in [RFC1035]\n   have acquired their own shorthand names.  All of the RCODEs\
    \ are\n   listed at [IANA_Resource_Registry], although that list uses mixed-\n\
    \   case capitalization, while most documents use all caps.  Some of the\n   common\
    \ names for values defined in [RFC1035] are described in this\n   section.  This\
    \ section also includes an additional RCODE and a\n   general definition.  The\
    \ official list of all RCODEs is in the IANA\n   registry.\n   NOERROR:  This\
    \ RCODE appears as \"No error condition\" in Section 4.1.1\n      of [RFC1035].\n\
    \   FORMERR:  This RCODE appears as \"Format error - The name server was\n   \
    \   unable to interpret the query\" in Section 4.1.1 of [RFC1035].\n   SERVFAIL:\
    \  This RCODE appears as \"Server failure - The name server\n      was unable\
    \ to process this query due to a problem with the name\n      server\" in Section\
    \ 4.1.1 of [RFC1035].\n   NXDOMAIN:  This RCODE appears as \"Name Error [...]\
    \ this code\n      signifies that the domain name referenced in the query does\
    \ not\n      exist.\" in Section 4.1.1 of [RFC1035].  [RFC2308] established\n\
    \      NXDOMAIN as a synonym for Name Error.\n   NOTIMP:  This RCODE appears as\
    \ \"Not Implemented - The name server\n      does not support the requested kind\
    \ of query\" in Section 4.1.1 of\n      [RFC1035].\n   REFUSED:  This RCODE appears\
    \ as \"Refused - The name server refuses to\n      perform the specified operation\
    \ for policy reasons.  For example,\n      a name server may not wish to provide\
    \ the information to the\n      particular requester, or a name server may not\
    \ wish to perform a\n      particular operation (e.g., zone transfer) for particular\
    \ data.\"\n      in Section 4.1.1 of [RFC1035].\n   NODATA:  \"A pseudo RCODE\
    \ which indicates that the name is valid, for\n      the given class, but [there]\
    \ are no records of the given type.  A\n      NODATA response has to be inferred\
    \ from the answer.\"  (Quoted from\n      [RFC2308], Section 1) \"NODATA is indicated\
    \ by an answer with the\n      RCODE set to NOERROR and no relevant answers in\
    \ the Answer\n      section.  The authority section will contain an SOA record,\
    \ or\n      there will be no NS records there.\"  (Quoted from [RFC2308],\n  \
    \    Section 2.2) Note that referrals have a similar format to NODATA\n      replies;\
    \ [RFC2308] explains how to distinguish them.\n      The term \"NXRRSET\" is sometimes\
    \ used as a synonym for NODATA.\n      However, this is a mistake, given that\
    \ NXRRSET is a specific error\n      code defined in [RFC2136].\n   Negative response:\
    \  A response that indicates that a particular RRset\n      does not exist or\
    \ whose RCODE indicates that the nameserver cannot\n      answer.  Sections 2\
    \ and 7 of [RFC2308] describe the types of\n      negative responses in detail.\n"
- title: 4.  DNS Transactions
  contents:
  - "4.  DNS Transactions\n   The header of a DNS message is its first 12 octets.\
    \  Many of the\n   fields and flags in the diagrams in Sections 4.1.1 through\
    \ 4.1.3 of\n   [RFC1035] are referred to by their names in each diagram.  For\n\
    \   example, the response codes are called \"RCODEs\", the data for a\n   record\
    \ is called the \"RDATA\", and the authoritative answer bit is\n   often called\
    \ \"the AA flag\" or \"the AA bit\".\n   Class:  A class \"identifies a protocol\
    \ family or instance of a\n      protocol\".  (Quoted from [RFC1034], Section\
    \ 3.6) \"The DNS tags all\n      data with a class as well as the type, so that\
    \ we can allow\n      parallel use of different formats for data of type address.\"\
    \n      (Quoted from [RFC1034], Section 2.2) In practice, the class for\n    \
    \  nearly every query is \"IN\" (the Internet).  There are some queries\n    \
    \  for \"CH\" (the Chaos class), but they are usually for the purposes\n     \
    \ of information about the server itself rather than for a different\n      type\
    \ of address.\n   QNAME:  The most commonly used rough definition is that the\
    \ QNAME is\n      a field in the Question section of a query.  \"A standard query\n\
    \      specifies a target domain name (QNAME), query type (QTYPE), and\n     \
    \ query class (QCLASS) and asks for RRs which match.\"  (Quoted from\n      [RFC1034],\
    \ Section 3.7.1) Strictly speaking, the definition comes\n      from [RFC1035],\
    \ Section 4.1.2, where the QNAME is defined in\n      respect of the Question\
    \ section.  This definition appears to be\n      applied consistently: the discussion\
    \ of inverse queries in\n      Section 6.4.1 refers to the \"owner name of the\
    \ query RR and its\n      TTL\", because inverse queries populate the Answer section\
    \ and\n      leave the Question section empty.  (Inverse queries are deprecated\n\
    \      in [RFC3425]; thus, relevant definitions do not appear in this\n      document.)\n\
    \      However, [RFC2308] has an alternate definition that puts the QNAME\n  \
    \    in the answer (or series of answers) instead of the query.  It\n      defines\
    \ QNAME as \"...the name in the query section of an answer,\n      or where this\
    \ resolves to a CNAME, or CNAME chain, the data field\n      of the last CNAME.\
    \  The last CNAME in this sense is that which\n      contains a value which does\
    \ not resolve to another CNAME.\"  This\n      definition has a certain internal\
    \ logic, because of the way CNAME\n      substitution works and the definition\
    \ of CNAME.  If a name server\n      does not find an RRset that matches a query,\
    \ but does find the\n      same name in the same class with a CNAME record, then\
    \ the name\n      server \"includes the CNAME record in the response and restarts\
    \ the\n      query at the domain name specified in the data field of the CNAME\n\
    \      record.\"  (Quoted from [RFC1034], Section 3.6.2) This is made\n      explicit\
    \ in the resolution algorithm outlined in Section 4.3.2 of\n      [RFC1034], which\
    \ says to \"change QNAME to the canonical name in\n      the CNAME RR, and go\
    \ back to step 1\" in the case of a CNAME RR.\n      Since a CNAME record explicitly\
    \ declares that the owner name is\n      canonically named what is in the RDATA,\
    \ then there is a way to\n      view the new name (i.e., the name that was in\
    \ the RDATA of the\n      CNAME RR) as also being the QNAME.\n      However, this\
    \ creates a kind of confusion because the response to\n      a query that results\
    \ in CNAME processing contains in the echoed\n      Question section one QNAME\
    \ (the name in the original query) and a\n      second QNAME that is in the data\
    \ field of the last CNAME.  The\n      confusion comes from the iterative/recursive\
    \ mode of resolution,\n      which finally returns an answer that need not actually\
    \ have the\n      same owner name as the QNAME contained in the original query.\n\
    \      To address this potential confusion, it is helpful to distinguish\n   \
    \   between three meanings:\n      *  QNAME (original): The name actually sent\
    \ in the Question\n         section in the original query, which is always echoed\
    \ in the\n         (final) reply in the Question section when the QR bit is set\
    \ to\n         1.\n      *  QNAME (effective): A name actually resolved, which\
    \ is either\n         the name originally queried or a name received in a CNAME\
    \ chain\n         response.\n      *  QNAME (final): The name actually resolved,\
    \ which is either the\n         name actually queried or else the last name in\
    \ a CNAME chain\n         response.\n      Note that, because the definition in\
    \ [RFC2308] is actually for a\n      different concept than what was in [RFC1034],\
    \ it would have been\n      better if [RFC2308] had used a different name for\
    \ that concept.\n      In general use today, QNAME almost always means what is\
    \ defined\n      above as \"QNAME (original)\".\n   Referrals:  A type of response\
    \ in which a server, signaling that it\n      is not (completely) authoritative\
    \ for an answer, provides the\n      querying resolver with an alternative place\
    \ to send its query.\n      Referrals can be partial.\n      A referral arises\
    \ when a server is not performing recursive\n      service while answering a query.\
    \  It appears in step 3(b) of the\n      algorithm in [RFC1034], Section 4.3.2.\n\
    \      There are two types of referral response.  The first is a downward\n  \
    \    referral (sometimes described as \"delegation response\"), where the\n  \
    \    server is authoritative for some portion of the QNAME.  The\n      authority\
    \ section RRset's RDATA contains the name servers\n      specified at the referred-to\
    \ zone cut.  In normal DNS operation,\n      this kind of response is required\
    \ in order to find names beneath a\n      delegation.  The bare use of \"referral\"\
    \ means this kind of\n      referral, and many people believe that this is the\
    \ only legitimate\n      kind of referral in the DNS.\n      The second is an\
    \ upward referral (sometimes described as \"root\n      referral\"), where the\
    \ server is not authoritative for any portion\n      of the QNAME.  When this\
    \ happens, the referred-to zone in the\n      authority section is usually the\
    \ root zone (\".\").  In normal DNS\n      operation, this kind of response is\
    \ not required for resolution or\n      for correctly answering any query.  There\
    \ is no requirement that\n      any server send upward referrals.  Some people\
    \ regard upward\n      referrals as a sign of a misconfiguration or error.  Upward\n\
    \      referrals always need some sort of qualifier (such as \"upward\" or\n \
    \     \"root\") and are never identified simply by the word \"referral\".\n  \
    \    A response that has only a referral contains an empty answer\n      section.\
    \  It contains the NS RRset for the referred-to zone in the\n      Authority section.\
    \  It may contain RRs that provide addresses in\n      the additional section.\
    \  The AA bit is clear.\n      In the case where the query matches an alias, and\
    \ the server is\n      not authoritative for the target of the alias but is authoritative\n\
    \      for some name above the target of the alias, the resolution\n      algorithm\
    \ will produce a response that contains both the\n      authoritative answer for\
    \ the alias and a referral.  Such a partial\n      answer and referral response\
    \ has data in the Answer section.  It\n      has the NS RRset for the referred-to\
    \ zone in the Authority\n      section.  It may contain RRs that provide addresses\
    \ in the\n      additional section.  The AA bit is set, because the first name\
    \ in\n      the Answer section matches the QNAME and the server is\n      authoritative\
    \ for that answer (see [RFC1035], Section 4.1.1).\n"
- title: 5.  Resource Records
  contents:
  - "5.  Resource Records\n   RR:  An acronym for resource record.  (See [RFC1034],\
    \ Section 3.6.)\n   RRset:  A set of resource records \"with the same label, class\
    \ and\n      type, but with different data\" (according to [RFC2181],\n      Section\
    \ 5).  Also written as \"RRSet\" in some documents.  As a\n      clarification,\
    \ \"same label\" in this definition means \"same owner\n      name\".  In addition,\
    \ [RFC2181] states that \"the TTLs of all RRs in\n      an RRSet must be the same\"\
    .\n      Note that RRSIG resource records do not match this definition.\n    \
    \  [RFC4035] says:\n         An RRset MAY have multiple RRSIG RRs associated with\
    \ it.  Note\n         that as RRSIG RRs are closely tied to the RRsets whose\n\
    \         signatures they contain, RRSIG RRs, unlike all other DNS RR\n      \
    \   types, do not form RRsets.  In particular, the TTL values among\n        \
    \ RRSIG RRs with a common owner name do not follow the RRset\n         rules described\
    \ in [RFC2181].\n   Master file:  \"Master files are text files that contain RRs\
    \ in text\n      form.  Since the contents of a zone can be expressed in the form\n\
    \      of a list of RRs a master file is most often used to define a\n      zone,\
    \ though it can be used to list a cache's contents.\"  (Quoted\n      from [RFC1035],\
    \ Section 5) Master files are sometimes called \"zone\n      files\".\n   Presentation\
    \ format:  The text format used in master files.  This\n      format is shown\
    \ but not formally defined in [RFC1034] or\n      [RFC1035].  The term \"presentation\
    \ format\" first appears in\n      [RFC4034].\n   EDNS:  The extension mechanisms\
    \ for DNS, defined in [RFC6891].\n      Sometimes called \"EDNS0\" or \"EDNS(0)\"\
    \ to indicate the version\n      number.  EDNS allows DNS clients and servers\
    \ to specify message\n      sizes larger than the original 512 octet limit, to\
    \ expand the\n      response code space and to carry additional options that affect\n\
    \      the handling of a DNS query.\n   OPT:  A pseudo-RR (sometimes called a\
    \ \"meta-RR\") that is used only to\n      contain control information pertaining\
    \ to the question-and-answer\n      sequence of a specific transaction.  (Definition\
    \ paraphrased from\n      [RFC6891], Section 6.1.1.)  It is used by EDNS.\n  \
    \ Owner:  \"The domain name where the RR is found.\"  (Quoted from\n      [RFC1034],\
    \ Section 3.6) Often appears in the term \"owner name\".\n   SOA field names:\
    \  DNS documents, including the definitions here,\n      often refer to the fields\
    \ in the RDATA of an SOA resource record\n      by field name.  \"SOA\" stands\
    \ for \"start of a zone of authority\".\n      Those fields are defined in Section\
    \ 3.3.13 of [RFC1035].  The\n      names (in the order they appear in the SOA\
    \ RDATA) are MNAME,\n      RNAME, SERIAL, REFRESH, RETRY, EXPIRE, and MINIMUM.\
    \  Note that the\n      meaning of the MINIMUM field is updated in Section 4 of\
    \ [RFC2308];\n      the new definition is that the MINIMUM field is only \"the\
    \ TTL to\n      be used for negative responses\".  This document tends to use\
    \ field\n      names instead of terms that describe the fields.\n   TTL:  The\
    \ maximum \"time to live\" of a resource record.  \"A TTL value\n      is an unsigned\
    \ number, with a minimum value of 0, and a maximum\n      value of 2147483647.\
    \  That is, a maximum of 2^31 - 1.  When\n      transmitted, this value shall\
    \ be encoded in the less significant\n      31 bits of the 32 bit TTL field, with\
    \ the most significant, or\n      sign, bit set to zero.\"  (Quoted from [RFC2181],\
    \ Section 8) (Note\n      that [RFC1035] erroneously stated that this is a signed\
    \ integer;\n      that was fixed by [RFC2181].)\n      The TTL \"specifies the\
    \ time interval that the resource record may\n      be cached before the source\
    \ of the information should again be\n      consulted.\"  (Quoted from [RFC1035],\
    \ Section 3.2.1) Section 4.1.3\n      of the same document states: \"the time\
    \ interval (in seconds) that\n      the resource record may be cached before it\
    \ should be discarded\".\n      Despite being defined for a resource record, the\
    \ TTL of every\n      resource record in an RRset is required to be the same ([RFC2181],\n\
    \      Section 5.2).\n      The reason that the TTL is the maximum time to live\
    \ is that a\n      cache operator might decide to shorten the time to live for\n\
    \      operational purposes, such as if there is a policy to disallow TTL\n  \
    \    values over a certain number.  Some servers are known to ignore\n      the\
    \ TTL on some RRsets (such as when the authoritative data has a\n      very short\
    \ TTL) even though this is against the advice in RFC\n      1035.  An RRset can\
    \ be flushed from the cache before the end of\n      the TTL interval, at which\
    \ point, the value of the TTL becomes\n      unknown because the RRset with which\
    \ it was associated no longer\n      exists.\n      There is also the concept\
    \ of a \"default TTL\" for a zone, which can\n      be a configuration parameter\
    \ in the server software.  This is\n      often expressed by a default for the\
    \ entire server, and a default\n      for a zone using the $TTL directive in a\
    \ zone file.  The $TTL\n      directive was added to the master file format by\
    \ [RFC2308].\n   Class independent:  A resource record type whose syntax and semantics\n\
    \      are the same for every DNS class.  A resource record type that is\n   \
    \   not class independent has different meanings depending on the DNS\n      class\
    \ of the record, or the meaning is undefined for some class.\n      Most resource\
    \ record types are defined for class 1 (IN, the\n      Internet), but many are\
    \ undefined for other classes.\n   Address records:  Records whose type is A or\
    \ AAAA.  [RFC2181]\n      informally defines these as \"(A, AAAA, etc)\".  Note\
    \ that new types\n      of address records could be defined in the future.\n"
- title: 6.  DNS Servers and Clients
  contents:
  - "6.  DNS Servers and Clients\n   This section defines the terms used for the systems\
    \ that act as DNS\n   clients, DNS servers, or both.  In past RFCs, DNS servers\
    \ are\n   sometimes called \"name servers\", \"nameservers\", or just \"servers\"\
    .\n   There is no formal definition of \"DNS server\", but RFCs generally\n  \
    \ assume that it is an Internet server that listens for queries and\n   sends\
    \ responses using the DNS protocol defined in [RFC1035] and its\n   successors.\n\
    \   It is important to note that the terms \"DNS server\" and \"name server\"\n\
    \   require context in order to understand the services being provided.\n   Both\
    \ authoritative servers and recursive resolvers are often called\n   \"DNS servers\"\
    \ and \"name servers\" even though they serve different\n   roles (but may be\
    \ part of the same software package).\n   For terminology specific to the public\
    \ DNS root server system, see\n   [RSSAC026].  That document defines terms such\
    \ as \"root server\", \"root\n   server operator\", and terms that are specific\
    \ to the way that the\n   root zone of the public DNS is served.\n   Resolver:\
    \  A program \"that extract[s] information from name servers\n      in response\
    \ to client requests.\"  (Quoted from [RFC1034],\n      Section 2.4) A resolver\
    \ performs queries for a name, type, and\n      class, and receives responses.\
    \  The logical function is called\n      \"resolution\".  In practice, the term\
    \ is usually referring to some\n      specific type of resolver (some of which\
    \ are defined below), and\n      understanding the use of the term depends on\
    \ understanding the\n      context.\n      A related term is \"resolve\", which\
    \ is not formally defined in\n      [RFC1034] or [RFC1035].  An imputed definition\
    \ might be \"asking a\n      question that consists of a domain name, class, and\
    \ type, and\n      receiving some sort of response\".  Similarly, an imputed\n\
    \      definition of \"resolution\" might be \"the response received from\n  \
    \    resolving\".\n   Stub resolver:  A resolver that cannot perform all resolution\
    \ itself.\n      Stub resolvers generally depend on a recursive resolver to\n\
    \      undertake the actual resolution function.  Stub resolvers are\n      discussed\
    \ but never fully defined in Section 5.3.1 of [RFC1034].\n      They are fully\
    \ defined in Section 6.1.3.1 of [RFC1123].\n   Iterative mode:  A resolution mode\
    \ of a server that receives DNS\n      queries and responds with a referral to\
    \ another server.\n      Section 2.3 of [RFC1034] describes this as \"The server\
    \ refers the\n      client to another server and lets the client pursue the query.\"\
    \  A\n      resolver that works in iterative mode is sometimes called an\n   \
    \   \"iterative resolver\".  See also \"iterative resolution\" later in\n    \
    \  this section.\n   Recursive mode:  A resolution mode of a server that receives\
    \ DNS\n      queries and either responds to those queries from a local cache or\n\
    \      sends queries to other servers in order to get the final answers\n    \
    \  to the original queries.  Section 2.3 of [RFC1034] describes this\n      as\
    \ \"the first server pursues the query for the client at another\n      server\"\
    .  Section 4.3.1 of [RFC1034] says: \"in [recursive] mode\n      the name server\
    \ acts in the role of a resolver and returns either\n      an error or the answer,\
    \ but never referrals.\"  That same section\n      also says:\n         The recursive\
    \ mode occurs when a query with RD set arrives at a\n         server which is\
    \ willing to provide recursive service; the\n         client can verify that recursive\
    \ mode was used by checking that\n         both RA and RD are set in the reply.\n\
    \      A server operating in recursive mode may be thought of as having a\n  \
    \    name server side (which is what answers the query) and a resolver\n     \
    \ side (which performs the resolution function).  Systems operating\n      in\
    \ this mode are commonly called \"recursive servers\".  Sometimes\n      they\
    \ are called \"recursive resolvers\".  In practice, it is not\n      possible\
    \ to know in advance whether the server that one is\n      querying will also\
    \ perform recursion; both terms can be observed\n      in use interchangeably.\n\
    \   Recursive resolver:  A resolver that acts in recursive mode.  In\n      general,\
    \ a recursive resolver is expected to cache the answers it\n      receives (which\
    \ would make it a full-service resolver), but some\n      recursive resolvers\
    \ might not cache.\n      [RFC4697] tried to differentiate between a recursive\
    \ resolver and\n      an iterative resolver.\n   Recursive query:  A query with\
    \ the Recursion Desired (RD) bit set to\n      1 in the header.  (See Section\
    \ 4.1.1 of [RFC1035].)  If recursive\n      service is available and is requested\
    \ by the RD bit in the query,\n      the server uses its resolver to answer the\
    \ query.  (See\n      Section 4.3.2 of [RFC1034].)\n   Non-recursive query:  A\
    \ query with the Recursion Desired (RD) bit set\n      to 0 in the header.  A\
    \ server can answer non-recursive queries\n      using only local information:\
    \ the response contains either an\n      error, the answer, or a referral to some\
    \ other server \"closer\" to\n      the answer.  (See Section 4.3.1 of [RFC1034].)\n\
    \   Iterative resolution:  A name server may be presented with a query\n     \
    \ that can only be answered by some other server.  The two general\n      approaches\
    \ to dealing with this problem are \"recursive\", in which\n      the first server\
    \ pursues the query on behalf of the client at\n      another server, and \"iterative\"\
    , in which the server refers the\n      client to another server and lets the\
    \ client pursue the query\n      there.  (See Section 2.3 of [RFC1034].)\n   \
    \   In iterative resolution, the client repeatedly makes non-recursive\n     \
    \ queries and follows referrals and/or aliases.  The iterative\n      resolution\
    \ algorithm is described in Section 5.3.3 of [RFC1034].\n   Full resolver:  This\
    \ term is used in [RFC1035], but it is not defined\n      there.  RFC 1123 defines\
    \ a \"full-service resolver\" that may or may\n      not be what was intended\
    \ by \"full resolver\" in [RFC1035].  This\n      term is not properly defined\
    \ in any RFC.\n   Full-service resolver:  Section 6.1.3.1 of [RFC1123] defines\
    \ this\n      term to mean a resolver that acts in recursive mode with a cache\n\
    \      (and meets other requirements).\n   Priming:  \"The act of finding the\
    \ list of root servers from a\n      configuration that lists some or all of the\
    \ purported IP addresses\n      of some or all of those root servers.\"  (Quoted\
    \ from [RFC8109],\n      Section 2) In order to operate in recursive mode, a resolver\
    \ needs\n      to know the address of at least one root server.  Priming is most\n\
    \      often done from a configuration setting that contains a list of\n     \
    \ authoritative servers for the root zone.\n   Root hints:  \"Operators who manage\
    \ a DNS recursive resolver typically\n      need to configure a 'root hints file'.\
    \  This file contains the\n      names and IP addresses of the authoritative name\
    \ servers for the\n      root zone, so the software can bootstrap the DNS resolution\n\
    \      process.  For many pieces of software, this list comes built into\n   \
    \   the software.\"  (Quoted from [IANA_RootFiles]) This file is often\n     \
    \ used in priming.\n   Negative caching:  \"The storage of knowledge that something\
    \ does not\n      exist, cannot or does not give an answer.\"  (Quoted from\n\
    \      [RFC2308], Section 1)\n   Authoritative server:  \"A server that knows\
    \ the content of a DNS zone\n      from local knowledge, and thus can answer queries\
    \ about that zone\n      without needing to query other servers.\"  (Quoted from\
    \ [RFC2182],\n      Section 2) An authoritative server is named in the NS (\"\
    name\n      server\") record in a zone.  It is a system that responds to DNS\n\
    \      queries with information about zones for which it has been\n      configured\
    \ to answer with the AA flag in the response header set\n      to 1.  It is a\
    \ server that has authority over one or more DNS\n      zones.  Note that it is\
    \ possible for an authoritative server to\n      respond to a query without the\
    \ parent zone delegating authority to\n      that server.  Authoritative servers\
    \ also provide \"referrals\",\n      usually to child zones delegated from them;\
    \ these referrals have\n      the AA bit set to 0 and come with referral data\
    \ in the Authority\n      and (if needed) the Additional sections.\n   Authoritative-only\
    \ server:  A name server that only serves\n      authoritative data and ignores\
    \ requests for recursion.  It will\n      \"not normally generate any queries\
    \ of its own.  Instead it answers\n      non-recursive queries from iterative\
    \ resolvers looking for\n      information in zones it serves.\"  (Quoted from\
    \ [RFC4697],\n      Section 2.4) In this case, \"ignores requests for recursion\"\
    \ means\n      \"responds to requests for recursion with responses indicating\
    \ that\n      recursion was not performed\".\n   Zone transfer:  The act of a\
    \ client requesting a copy of a zone and\n      an authoritative server sending\
    \ the needed information.  (See\n      Section 7 for a description of zones.)\
    \  There are two common\n      standard ways to do zone transfers: the AXFR (\"\
    Authoritative\n      Transfer\") mechanism to copy the full zone (described in\n\
    \      [RFC5936], and the IXFR (\"Incremental Transfer\") mechanism to copy\n\
    \      only parts of the zone that have changed (described in [RFC1995]).\n  \
    \    Many systems use non-standard methods for zone transfer outside\n      the\
    \ DNS protocol.\n   Slave server:  See \"Secondary server\".\n   Secondary server:\
    \  \"An authoritative server which uses zone transfer\n      to retrieve the zone.\"\
    \  (Quoted from [RFC1996], Section 2.1)\n      Secondary servers are also discussed\
    \ in [RFC1034].  [RFC2182]\n      describes secondary servers in more detail.\
    \  Although early DNS\n      RFCs such as [RFC1996] referred to this as a \"slave\"\
    , the current\n      common usage has shifted to calling it a \"secondary\".\n\
    \   Master server:  See \"Primary server\".\n   Primary server:  \"Any authoritative\
    \ server configured to be the\n      source of zone transfer for one or more [secondary]\
    \ servers.\"\n      (Quoted from [RFC1996], Section 2.1) Or, more specifically,\n\
    \      [RFC2136] calls it \"an authoritative server configured to be the\n   \
    \   source of AXFR or IXFR data for one or more [secondary] servers\".\n     \
    \ Primary servers are also discussed in [RFC1034].  Although early\n      DNS\
    \ RFCs such as [RFC1996] referred to this as a \"master\", the\n      current\
    \ common usage has shifted to \"primary\".\n   Primary master:  \"The primary\
    \ master is named in the zone's SOA MNAME\n      field and optionally by an NS\
    \ RR.\"  (Quoted from [RFC1996],\n      Section 2.1) [RFC2136] defines \"primary\
    \ master\" as \"Master server\n      at the root of the AXFR/IXFR dependency graph.\
    \  The primary master\n      is named in the zone's SOA MNAME field and optionally\
    \ by an NS RR.\n      There is by definition only one primary master server per\
    \ zone.\"\n      The idea of a primary master is only used in [RFC1996] and\n\
    \      [RFC2136].  A modern interpretation of the term \"primary master\"\n  \
    \    is a server that is both authoritative for a zone and that gets\n      its\
    \ updates to the zone from configuration (such as a master file)\n      or from\
    \ UPDATE transactions.\n   Stealth server:  This is \"like a slave server except\
    \ not listed in an\n      NS RR for the zone.\"  (Quoted from [RFC1996], Section\
    \ 2.1)\n   Hidden master:  A stealth server that is a primary server for zone\n\
    \      transfers.  \"In this arrangement, the master name server that\n      processes\
    \ the updates is unavailable to general hosts on the\n      Internet; it is not\
    \ listed in the NS RRset.\"  (Quoted from\n      [RFC6781], Section 3.4.3) An\
    \ earlier RFC, [RFC4641], said that the\n      hidden master's name \"appears\
    \ in the SOA RRs MNAME field\",\n      although, in some setups, the name does\
    \ not appear at all in the\n      public DNS.  A hidden master can also be a secondary\
    \ server for\n      the zone itself.\n   Forwarding:  The process of one server\
    \ sending a DNS query with the\n      RD bit set to 1 to another server to resolve\
    \ that query.\n      Forwarding is a function of a DNS resolver; it is different\
    \ than\n      simply blindly relaying queries.\n      [RFC5625] does not give\
    \ a specific definition for forwarding, but\n      describes in detail what features\
    \ a system that forwards needs to\n      support.  Systems that forward are sometimes\
    \ called \"DNS proxies\",\n      but that term has not yet been defined (even\
    \ in [RFC5625]).\n   Forwarder:  Section 1 of [RFC2308] describes a forwarder\
    \ as \"a\n      nameserver used to resolve queries instead of directly using the\n\
    \      authoritative nameserver chain\".  [RFC2308] further says \"The\n     \
    \ forwarder typically either has better access to the internet, or\n      maintains\
    \ a bigger cache which may be shared amongst many\n      resolvers.\"  That definition\
    \ appears to suggest that forwarders\n      normally only query authoritative\
    \ servers.  In current use,\n      however, forwarders often stand between stub\
    \ resolvers and\n      recursive servers.  [RFC2308] is silent on whether a forwarder\
    \ is\n      iterative-only or can be a full-service resolver.\n   Policy-implementing\
    \ resolver:  A resolver acting in recursive mode\n      that changes some of the\
    \ answers that it returns based on policy\n      criteria, such as to prevent\
    \ access to malware sites or\n      objectionable content.  In general, a stub\
    \ resolver has no idea\n      whether upstream resolvers implement such policy\
    \ or, if they do,\n      the exact policy about what changes will be made.  In\
    \ some cases,\n      the user of the stub resolver has selected the policy-implementing\n\
    \      resolver with the explicit intention of using it to implement the\n   \
    \   policies.  In other cases, policies are imposed without the user\n      of\
    \ the stub resolver being informed.\n   Open resolver:  A full-service resolver\
    \ that accepts and processes\n      queries from any (or nearly any) client. \
    \ This is sometimes also\n      called a \"public resolver\", although the term\
    \ \"public resolver\" is\n      used more with open resolvers that are meant to\
    \ be open, as\n      compared to the vast majority of open resolvers that are\
    \ probably\n      misconfigured to be open.  Open resolvers are discussed in\n\
    \      [RFC5358].\n   Split DNS:  The terms \"split DNS\" and \"split-horizon\
    \ DNS\" have long\n      been used in the DNS community without formal definition.\
    \  In\n      general, they refer to situations in which DNS servers that are\n\
    \      authoritative for a particular set of domains provide partly or\n     \
    \ completely different answers in those domains depending on the\n      source\
    \ of the query.  The effect of this is that a domain name\n      that is notionally\
    \ globally unique nevertheless has different\n      meanings for different network\
    \ users.  This can sometimes be the\n      result of a \"view\" configuration,\
    \ described below.\n      Section 3.8 of [RFC2775] gives a related definition\
    \ that is too\n      specific to be generally useful.\n   View:  A configuration\
    \ for a DNS server that allows it to provide\n      different responses depending\
    \ on attributes of the query, such as\n      for \"split DNS\".  Typically, views\
    \ differ by the source IP address\n      of a query, but can also be based on\
    \ the destination IP address,\n      the type of query (such as AXFR), whether\
    \ it is recursive, and so\n      on.  Views are often used to provide more names\
    \ or different\n      addresses to queries from \"inside\" a protected network\
    \ than to\n      those \"outside\" that network.  Views are not a standardized\
    \ part\n      of the DNS, but they are widely implemented in server software.\n\
    \   Passive DNS:  A mechanism to collect DNS data by storing DNS\n      responses\
    \ from name servers.  Some of these systems also collect\n      the DNS queries\
    \ associated with the responses, although doing so\n      raises some privacy\
    \ concerns.  Passive DNS databases can be used\n      to answer historical questions\
    \ about DNS zones such as which\n      values were present at a given time in\
    \ the past, or when a name\n      was spotted first.  Passive DNS databases allow\
    \ searching of the\n      stored records on keys other than just the name and\
    \ type, such as\n      \"find all names which have A records of a particular value\"\
    .\n   Anycast:  \"The practice of making a particular service address\n      available\
    \ in multiple, discrete, autonomous locations, such that\n      datagrams sent\
    \ are routed to one of several available locations.\"\n      (Quoted from [RFC4786],\
    \ Section 2) See [RFC4786] for more detail\n      on Anycast and other terms that\
    \ are specific to its use.\n   Instance:  \"When anycast routing is used to allow\
    \ more than one\n      server to have the same IP address, each one of those servers\
    \ is\n      commonly referred to as an 'instance'.\"  It goes on to say: \"An\n\
    \      instance of a server, such as a root server, is often referred to\n   \
    \   as an 'Anycast instance'.\"  (Quoted from [RSSAC026])\n   Privacy-enabling\
    \ DNS server:  \"A DNS server that implements DNS over\n      TLS [RFC7858] and\
    \ may optionally implement DNS over DTLS\n      [RFC8094].\"  (Quoted from [RFC8310],\
    \ Section 2) Other types of DNS\n      servers might also be considered privacy-enabling,\
    \ such as those\n      running DNS over HTTPS [RFC8484].\n"
- title: 7.  Zones
  contents:
  - "7.  Zones\n   This section defines terms that are used when discussing zones\
    \ that\n   are being served or retrieved.\n   Zone:  \"Authoritative information\
    \ is organized into units called\n      ZONEs, and these zones can be automatically\
    \ distributed to the\n      name servers which provide redundant service for the\
    \ data in a\n      zone.\"  (Quoted from [RFC1034], Section 2.4)\n   Child:  \"\
    The entity on record that has the delegation of the domain\n      from the Parent.\"\
    \  (Quoted from [RFC7344], Section 1.1)\n   Parent:  \"The domain in which the\
    \ Child is registered.\"  (Quoted from\n      [RFC7344], Section 1.1) Earlier,\
    \ \"parent name server\" was defined\n      in [RFC0882] as \"the name server\
    \ that has authority over the place\n      in the domain name space that will\
    \ hold the new domain\".  (Note\n      that [RFC0882] was obsoleted by [RFC1034]\
    \ and [RFC1035].)\n      [RFC819] also has some description of the relationship\
    \ between\n      parents and children.\n   Origin:\n      There are two different\
    \ uses for this term:\n      (a)  \"The domain name that appears at the top of\
    \ a zone (just\n           below the cut that separates the zone from its parent)...\
    \ The\n           name of the zone is the same as the name of the domain at the\n\
    \           zone's origin.\"  (Quoted from [RFC2181], Section 6) These\n     \
    \      days, this sense of \"origin\" and \"apex\" (defined below) are\n     \
    \      often used interchangeably.\n      (b)  The domain name within which a\
    \ given relative domain name\n           appears in zone files.  Generally seen\
    \ in the context of\n           \"$ORIGIN\", which is a control entry defined\
    \ in [RFC1035],\n           Section 5.1, as part of the master file format.  For\
    \ example,\n           if the $ORIGIN is set to \"example.org.\", then a master\
    \ file\n           line for \"www\" is in fact an entry for \"www.example.org.\"\
    .\n   Apex:  The point in the tree at an owner of an SOA and corresponding\n \
    \     authoritative NS RRset.  This is also called the \"zone apex\".\n      [RFC4033]\
    \ defines it as \"the name at the child's side of a zone\n      cut\".  The \"\
    apex\" can usefully be thought of as a data-theoretic\n      description of a\
    \ tree structure, and \"origin\" is the name of the\n      same concept when it\
    \ is implemented in zone files.  The\n      distinction is not always maintained\
    \ in use, however, and one can\n      find uses that conflict subtly with this\
    \ definition.  [RFC1034]\n      uses the term \"top node of the zone\" as a synonym\
    \ of \"apex\", but\n      that term is not widely used.  These days, the first\
    \ sense of\n      \"origin\" (above) and \"apex\" are often used interchangeably.\n\
    \   Zone cut:  The delimitation point between two zones where the origin\n   \
    \   of one of the zones is the child of the other zone.\n      \"Zones are delimited\
    \ by 'zone cuts'.  Each zone cut separates a\n      'child' zone (below the cut)\
    \ from a 'parent' zone (above the\n      cut).\"  (Quoted from [RFC2181], Section\
    \ 6; note that this is\n      barely an ostensive definition.)  Section 4.2 of\
    \ [RFC1034] uses\n      \"cuts\" instead of \"zone cut\".\n   Delegation:  The\
    \ process by which a separate zone is created in the\n      name space beneath\
    \ the apex of a given domain.  Delegation happens\n      when an NS RRset is added\
    \ in the parent zone for the child origin.\n      Delegation inherently happens\
    \ at a zone cut.  The term is also\n      commonly a noun: the new zone that is\
    \ created by the act of\n      delegating.\n   Authoritative data:  \"All of the\
    \ RRs attached to all of the nodes\n      from the top node of the zone down to\
    \ leaf nodes or nodes above\n      cuts around the bottom edge of the zone.\"\
    \  (Quoted from [RFC1034],\n      Section 4.2.1) Note that this definition might\
    \ inadvertently also\n      cause any NS records that appear in the zone to be\
    \ included, even\n      those that might not truly be authoritative because there\
    \ are\n      identical NS RRs below the zone cut.  This reveals the ambiguity\n\
    \      in the notion of authoritative data, because the parent-side NS\n     \
    \ records authoritatively indicate the delegation, even though they\n      are\
    \ not themselves authoritative data.\n      [RFC4033], Section 2, defines \"Authoritative\
    \ RRset\", which is\n      related to authoritative data but has a more precise\
    \ definition.\n   Lame delegation:  \"A lame delegations exists [sic] when a nameserver\n\
    \      is delegated responsibility for providing nameservice for a zone\n    \
    \  (via NS records) but is not performing nameservice for that zone\n      (usually\
    \ because it is not set up as a primary or secondary for\n      the zone).\" \
    \ (Quoted from [RFC1912], Section 2.8) Another\n      definition is that a lame\
    \ delegation \"...happens when a name\n      server is listed in the NS records\
    \ for some domain and in fact it\n      is not a server for that domain.  Queries\
    \ are thus sent to the\n      wrong servers, who don't know nothing [sic] (at\
    \ least not as\n      expected) about the queried domain.  Furthermore, sometimes\
    \ these\n      hosts (if they exist!) don't even run name servers.\"  (Quoted\
    \ from\n      [RFC1713], Section 2.3)\n   Glue records:  \"...[Resource records]\
    \ which are not part of the\n      authoritative data [of the zone], and are address\
    \ RRs for the\n      [name] servers [in subzones].  These RRs are only necessary\
    \ if the\n      name server's name is 'below' the cut, and are only used as part\n\
    \      of a referral response.\"  Without glue \"we could be faced with the\n\
    \      situation where the NS RRs tell us that in order to learn a name\n    \
    \  server's address, we should contact the server using the address\n      we\
    \ wish to learn.\"  (Quoted from [RFC1034], Section 4.2.1)\n      A later definition\
    \ is that glue \"includes any record in a zone\n      file that is not properly\
    \ part of that zone, including nameserver\n      records of delegated sub-zones\
    \ (NS records), address records that\n      accompany those NS records (A, AAAA,\
    \ etc), and any other stray\n      data that might appear.\"  (Quoted from [RFC2181],\
    \ Section 5.4.1)\n      Although glue is sometimes used today with this wider\
    \ definition\n      in mind, the context surrounding the definition in [RFC2181]\n\
    \      suggests it is intended to apply to the use of glue within the\n      document\
    \ itself and not necessarily beyond.\n   Bailiwick:  \"In-bailiwick\" is a modifier\
    \ to describe a name server\n      whose name is either a subdomain of or (rarely)\
    \ the same as the\n      origin of the zone that contains the delegation to the\
    \ name\n      server.  In-bailiwick name servers may have glue records in their\n\
    \      parent zone (using the first of the definitions of \"glue records\"\n \
    \     in the definition above).  (The word \"bailiwick\" means the\n      district\
    \ or territory where a bailiff or policeman has\n      jurisdiction.)\n      \"\
    In-bailiwick\" names are divided into two types of names for name\n      servers:\
    \ \"in-domain\" names and \"sibling domain\" names.\n      *  In-domain: a modifier\
    \ to describe a name server whose name is\n         either subordinate to or (rarely)\
    \ the same as the owner name of\n         the NS resource records.  An in-domain\
    \ name server name needs\n         to have glue records or name resolution fails.\
    \  For example, a\n         delegation for \"child.example.com\" may have \"in-domain\"\
    \ name\n         server name \"ns.child.example.com\".\n      *  Sibling domain:\
    \ a name server's name that is either subordinate\n         to or (rarely) the\
    \ same as the zone origin and not subordinate\n         to or the same as the\
    \ owner name of the NS resource records.\n         Glue records for sibling domains\
    \ are allowed, but not\n         necessary.  For example, a delegation for \"\
    child.example.com\"\n         in \"example.com\" zone may have \"sibling\" name\
    \ server name\n         \"ns.another.example.com\".\n      \"Out-of-bailiwick\"\
    \ is the antonym of \"in-bailiwick\".  It is a\n      modifier to describe a name\
    \ server whose name is not subordinate\n      to or the same as the zone origin.\
    \  Glue records for out-of-\n      bailiwick name servers are useless.  The following\
    \ table shows\n      examples of delegation types.\n   Delegation |Parent|Name\
    \ Server Name  | Type\n   -----------+------+------------------+-----------------------------\n\
    \   com        | .    |a.gtld-servers.net|in-bailiwick / sibling domain\n   net\
    \        | .    |a.gtld-servers.net|in-bailiwick / in-domain\n   example.org|\
    \ org  |ns.example.org    |in-bailiwick / in-domain\n   example.org| org  |ns.ietf.org\
    \       |in-bailiwick / sibling domain\n   example.org| org  |ns.example.com \
    \   |out-of-bailiwick\n   example.jp | jp   |ns.example.jp     |in-bailiwick /\
    \ in-domain\n   example.jp | jp   |ns.example.ne.jp  |in-bailiwick / sibling domain\n\
    \   example.jp | jp   |ns.example.com    |out-of-bailiwick\n   Root zone:  The\
    \ zone of a DNS-based tree whose apex is the zero-\n      length label.  Also\
    \ sometimes called \"the DNS root\".\n   Empty non-terminals (ENT):  \"Domain\
    \ names that own no resource\n      records but have subdomains that do.\"  (Quoted\
    \ from [RFC4592],\n      Section 2.2.2) A typical example is in SRV records: in\
    \ the name\n      \"_sip._tcp.example.com\", it is likely that \"_tcp.example.com\"\
    \ has\n      no RRsets, but that \"_sip._tcp.example.com\" has (at least) an SRV\n\
    \      RRset.\n   Delegation-centric zone:  A zone that consists mostly of delegations\n\
    \      to child zones.  This term is used in contrast to a zone that\n      might\
    \ have some delegations to child zones but also has many data\n      resource\
    \ records for the zone itself and/or for child zones.  The\n      term is used\
    \ in [RFC4956] and [RFC5155], but it is not defined in\n      either document.\n\
    \   Occluded name:  \"The addition of a delegation point via dynamic\n      update\
    \ will render all subordinate domain names to be in a limbo,\n      still part\
    \ of the zone but not available to the lookup process.\n      The addition of\
    \ a DNAME resource record has the same impact.  The\n      subordinate names are\
    \ said to be 'occluded'.\"  (Quoted from\n      [RFC5936], Section 3.5)\n   Fast\
    \ flux DNS:  This \"occurs when a domain is [found] in DNS using A\n      records\
    \ to multiple IP addresses, each of which has a very short\n      Time-to-Live\
    \ (TTL) value associated with it.  This means that the\n      domain resolves\
    \ to varying IP addresses over a short period of\n      time.\"  (Quoted from\
    \ [RFC6561], Section 1.1.5, with a typo\n      corrected) In addition to having\
    \ legitimate uses, fast flux DNS\n      can used to deliver malware.  Because\
    \ the addresses change so\n      rapidly, it is difficult to ascertain all the\
    \ hosts.  It should be\n      noted that the technique also works with AAAA records,\
    \ but such\n      use is not frequently observed on the Internet as of this writing.\n\
    \   Reverse DNS, reverse lookup:  \"The process of mapping an address to a\n \
    \     name is generally known as a 'reverse lookup', and the\n      IN-ADDR.ARPA\
    \ and IP6.ARPA zones are said to support the 'reverse\n      DNS'.\"  (Quoted\
    \ from [RFC5855], Section 1)\n   Forward lookup:  \"Hostname-to-address translation\"\
    .  (Quoted from\n      [RFC3493], Section 6)\n   arpa: Address and Routing Parameter\
    \ Area Domain:  \"The 'arpa' domain\n      was originally established as part\
    \ of the initial deployment of\n      the DNS, to provide a transition mechanism\
    \ from the Host Tables\n      that were common in the ARPANET, as well as a home\
    \ for the IPv4\n      reverse mapping domain.  During 2000, the abbreviation was\n\
    \      redesignated to 'Address and Routing Parameter Area' in the hope\n    \
    \  of reducing confusion with the earlier network name.\"  (Quoted\n      from\
    \ [RFC3172], Section 2) .arpa is an \"infrastructure domain\", a\n      domain\
    \ whose \"role is to support the operating infrastructure of\n      the Internet\"\
    .  (Quoted from [RFC3172], Section 2) See [RFC3172]\n      for more history of\
    \ this name.\n   Service name:  \"Service names are the unique key in the Service\
    \ Name\n      and Transport Protocol Port Number registry.  This unique symbolic\n\
    \      name for a service may also be used for other purposes, such as in\n  \
    \    DNS SRV records.\"  (Quoted from [RFC6335], Section 5)\n"
- title: 8.  Wildcards
  contents:
  - "8.  Wildcards\n   Wildcard:  [RFC1034] defined \"wildcard\", but in a way that\
    \ turned out\n      to be confusing to implementers.  For an extended discussion\
    \ of\n      wildcards, including clearer definitions, see [RFC4592].  Special\n\
    \      treatment is given to RRs with owner names starting with the label\n  \
    \    \"*\".  \"Such RRs are called 'wildcards'.  Wildcard RRs can be\n      thought\
    \ of as instructions for synthesizing RRs.\"  (Quoted from\n      [RFC1034], Section\
    \ 4.3.3)\n   Asterisk label:  \"The first octet is the normal label type and length\n\
    \      for a 1-octet-long label, and the second octet is the ASCII\n      representation\
    \ [RFC20] for the '*' character.  A descriptive name\n      of a label equaling\
    \ that value is an 'asterisk label'.\"  (Quoted\n      from [RFC4592], Section\
    \ 2.1.1)\n   Wildcard domain name:  \"A 'wildcard domain name' is defined by having\n\
    \      its initial (i.e., leftmost or least significant) label, in binary\n  \
    \    format: 0000 0001 0010 1010 (binary) = 0x01 0x2a (hexadecimal)\".\n     \
    \ (Quoted from [RFC4592], Section 2.1.1) The second octet in this\n      label\
    \ is the ASCII representation for the \"*\" character.\n   Closest encloser: \
    \ \"The longest existing ancestor of a name.\"\n      (Quoted from [RFC5155],\
    \ Section 1.3) An earlier definition is \"The\n      node in the zone's tree of\
    \ existing domain names that has the most\n      labels matching the query name\
    \ (consecutively, counting from the\n      root label downward).  Each match is\
    \ a 'label match' and the order\n      of the labels is the same.\"  (Quoted from\
    \ [RFC4592],\n      Section 3.3.1)\n   Closest provable encloser:  \"The longest\
    \ ancestor of a name that can\n      be proven to exist.  Note that this is only\
    \ different from the\n      closest encloser in an Opt-Out zone.\"  (Quoted from\
    \ [RFC5155],\n      Section 1.3) See Section 10 for more on \"opt-out\".\n   Next\
    \ closer name:  \"The name one label longer than the closest\n      provable encloser\
    \ of a name.\"  (Quoted from [RFC5155],\n      Section 1.3)\n   Source of Synthesis:\
    \  \"The source of synthesis is defined in the\n      context of a query process\
    \ as that wildcard domain name\n      immediately descending from the closest\
    \ encloser, provided that\n      this wildcard domain name exists.  'Immediately\
    \ descending' means\n      that the source of synthesis has a name of the form:\n\
    \      <asterisk label>.<closest encloser>.\"\n      (Quoted from [RFC4592], Section\
    \ 3.3.1)\n"
- title: 9.  Registration Model
  contents:
  - "9.  Registration Model\n   Registry:  The administrative operation of a zone\
    \ that allows\n      registration of names within that zone.  People often use\
    \ this\n      term to refer only to those organizations that perform\n      registration\
    \ in large delegation-centric zones (such as TLDs); but\n      formally, whoever\
    \ decides what data goes into a zone is the\n      registry for that zone.  This\
    \ definition of \"registry\" is from a\n      DNS point of view; for some zones,\
    \ the policies that determine\n      what can go in the zone are decided by zones\
    \ that are\n      superordinate and not the registry operator.\n   Registrant:\
    \  An individual or organization on whose behalf a name in\n      a zone is registered\
    \ by the registry.  In many zones, the registry\n      and the registrant may\
    \ be the same entity, but in TLDs they often\n      are not.\n   Registrar:  A\
    \ service provider that acts as a go-between for\n      registrants and registries.\
    \  Not all registrations require a\n      registrar, though it is common to have\
    \ registrars involved in\n      registrations in TLDs.\n   EPP:  The Extensible\
    \ Provisioning Protocol (EPP), which is commonly\n      used for communication\
    \ of registration information between\n      registries and registrars.  EPP is\
    \ defined in [RFC5730].\n   WHOIS:  A protocol specified in [RFC3912], often used\
    \ for querying\n      registry databases.  WHOIS data is frequently used to associate\n\
    \      registration data (such as zone management contacts) with domain\n    \
    \  names.  The term \"WHOIS data\" is often used as a synonym for the\n      registry\
    \ database, even though that database may be served by\n      different protocols,\
    \ particularly RDAP.  The WHOIS protocol is\n      also used with IP address registry\
    \ data.\n   RDAP:  The Registration Data Access Protocol, defined in [RFC7480],\n\
    \      [RFC7481], [RFC7482], [RFC7483], [RFC7484], and [RFC7485].  The\n     \
    \ RDAP protocol and data format are meant as a replacement for\n      WHOIS.\n\
    \   DNS operator:  An entity responsible for running DNS servers.  For a\n   \
    \   zone's authoritative servers, the registrant may act as their own\n      DNS\
    \ operator, their registrar may do it on their behalf, or they\n      may use\
    \ a third-party operator.  For some zones, the registry\n      function is performed\
    \ by the DNS operator plus other entities who\n      decide about the allowed\
    \ contents of the zone.\n   Public suffix:  \"A domain that is controlled by a\
    \ public registry.\"\n      (Quoted from [RFC6265], Section 5.3) A common definition\
    \ for this\n      term is a domain under which subdomains can be registered by\
    \ third\n      parties and on which HTTP cookies (which are described in detail\n\
    \      in [RFC6265]) should not be set.  There is no indication in a\n      domain\
    \ name whether it is a public suffix; that can only be\n      determined by outside\
    \ means.  In fact, both a domain and a\n      subdomain of that domain can be\
    \ public suffixes.\n      There is nothing inherent in a domain name to indicate\
    \ whether it\n      is a public suffix.  One resource for identifying public suffixes\n\
    \      is the Public Suffix List (PSL) maintained by Mozilla\n      (http://publicsuffix.org/).\n\
    \      For example, at the time this document is published, the \"com.au\"\n \
    \     domain is listed as a public suffix in the PSL.  (Note that this\n     \
    \ example might change in the future.)\n      Note that the term \"public suffix\"\
    \ is controversial in the DNS\n      community for many reasons, and it may be\
    \ significantly changed in\n      the future.  One example of the difficulty of\
    \ calling a domain a\n      public suffix is that designation can change over\
    \ time as the\n      registration policy for the zone changes, such as was the\
    \ case\n      with the \"uk\" TLD in 2014.\n   Subordinate and Superordinate:\
    \  These terms are introduced in\n      [RFC5731] for use in the registration\
    \ model, but not defined\n      there.  Instead, they are given in examples. \
    \ \"For example, domain\n      name 'example.com' has a superordinate relationship\
    \ to host name\n      ns1.example.com'...  For example, host ns1.example1.com\
    \ is a\n      subordinate host of domain example1.com, but it is a not a\n   \
    \   subordinate host of domain example2.com.\"  (Quoted from [RFC5731],\n    \
    \  Section 1.1) These terms are strictly ways of referring to the\n      relationship\
    \ standing of two domains where one is a subdomain of\n      the other.\n"
- title: 10.  General DNSSEC
  contents:
  - "10.  General DNSSEC\n   Most DNSSEC terms are defined in [RFC4033], [RFC4034],\
    \ [RFC4035], and\n   [RFC5155].  The terms that have caused confusion in the DNS\
    \ community\n   are highlighted here.\n   DNSSEC-aware and DNSSEC-unaware:  These\
    \ two terms, which are used in\n      some RFCs, have not been formally defined.\
    \  However, Section 2 of\n      [RFC4033] defines many types of resolvers and\
    \ validators,\n      including \"non-validating security-aware stub resolver\"\
    ,\n      \"non-validating stub resolver\", \"security-aware name server\",\n \
    \     \"security-aware recursive name server\", \"security-aware resolver\",\n\
    \      \"security-aware stub resolver\", and \"security-oblivious\n      'anything'\"\
    .  (Note that the term \"validating resolver\", which is\n      used in some places\
    \ in DNSSEC-related documents, is also not\n      defined in those RFCs, but is\
    \ defined below.)\n   Signed zone:  \"A zone whose RRsets are signed and that\
    \ contains\n      properly constructed DNSKEY, Resource Record Signature (RRSIG),\n\
    \      Next Secure (NSEC), and (optionally) DS records.\"  (Quoted from\n    \
    \  [RFC4033], Section 2) It has been noted in other contexts that the\n      zone\
    \ itself is not really signed, but all the relevant RRsets in\n      the zone\
    \ are signed.  Nevertheless, if a zone that should be\n      signed contains any\
    \ RRsets that are not signed (or opted out),\n      those RRsets will be treated\
    \ as bogus, so the whole zone needs to\n      be handled in some way.\n      It\
    \ should also be noted that, since the publication of [RFC6840],\n      NSEC records\
    \ are no longer required for signed zones: a signed\n      zone might include\
    \ NSEC3 records instead.  [RFC7129] provides\n      additional background commentary\
    \ and some context for the NSEC and\n      NSEC3 mechanisms used by DNSSEC to\
    \ provide authenticated denial-\n      of-existence responses.  NSEC and NSEC3\
    \ are described below.\n   Unsigned zone:  Section 2 of [RFC4033] defines this\
    \ as \"a zone that\n      is not signed\".  Section 2 of [RFC4035] defines this\
    \ as a \"zone\n      that does not include these records [properly constructed\
    \ DNSKEY,\n      Resource Record Signature (RRSIG), Next Secure (NSEC), and\n\
    \      (optionally) DS records] according to the rules in this\n      section...\"\
    \ There is an important note at the end of Section 5.2\n      of [RFC4035] that\
    \ defines an additional situation in which a zone\n      is considered unsigned:\
    \ \"If the resolver does not support any of\n      the algorithms listed in an\
    \ authenticated DS RRset, then the\n      resolver will not be able to verify\
    \ the authentication path to the\n      child zone.  In this case, the resolver\
    \ SHOULD treat the child\n      zone as if it were unsigned.\"\n   NSEC:  \"The\
    \ NSEC record allows a security-aware resolver to\n      authenticate a negative\
    \ reply for either name or type\n      non-existence with the same mechanisms\
    \ used to authenticate other\n      DNS replies.\"  (Quoted from [RFC4033], Section\
    \ 3.2) In short, an\n      NSEC record provides authenticated denial of existence.\n\
    \      \"The NSEC resource record lists two separate things: the next\n      owner\
    \ name (in the canonical ordering of the zone) that contains\n      authoritative\
    \ data or a delegation point NS RRset, and the set of\n      RR types present\
    \ at the NSEC RR's owner name.\"  (Quoted from\n      Section 4 of RFC 4034)\n\
    \   NSEC3:  Like the NSEC record, the NSEC3 record also provides\n      authenticated\
    \ denial of existence; however, NSEC3 records mitigate\n      zone enumeration\
    \ and support Opt-Out.  NSEC3 resource records\n      require associated NSEC3PARAM\
    \ resource records.  NSEC3 and\n      NSEC3PARAM resource records are defined\
    \ in [RFC5155].\n      Note that [RFC6840] says that [RFC5155] \"is now considered\
    \ part of\n      the DNS Security Document Family as described by Section 10 of\n\
    \      [RFC4033]\".  This means that some of the definitions from earlier\n  \
    \    RFCs that only talk about NSEC records should probably be\n      considered\
    \ to be talking about both NSEC and NSEC3.\n   Opt-out:  \"The Opt-Out Flag indicates\
    \ whether this NSEC3 RR may cover\n      unsigned delegations.\"  (Quoted from\
    \ [RFC5155], Section 3.1.2.1)\n      Opt-out tackles the high costs of securing\
    \ a delegation to an\n      insecure zone.  When using Opt-Out, names that are\
    \ an insecure\n      delegation (and empty non-terminals that are only derived\
    \ from\n      insecure delegations) don't require an NSEC3 record or its\n   \
    \   corresponding RRSIG records.  Opt-Out NSEC3 records are not able\n      to\
    \ prove or deny the existence of the insecure delegations.\n      (Adapted from\
    \ [RFC7129], Section 5.1)\n   Insecure delegation:  \"A signed name containing\
    \ a delegation (NS\n      RRset), but lacking a DS RRset, signifying a delegation\
    \ to an\n      unsigned subzone.\"  (Quoted from [RFC4956], Section 2)\n   Zone\
    \ enumeration:  \"The practice of discovering the full content of a\n      zone\
    \ via successive queries.\"  (Quoted from [RFC5155],\n      Section 1.3) This\
    \ is also sometimes called \"zone walking\".  Zone\n      enumeration is different\
    \ from zone content guessing where the\n      guesser uses a large dictionary\
    \ of possible labels and sends\n      successive queries for them, or matches\
    \ the contents of NSEC3\n      records against such a dictionary.\n   Validation:\
    \  Validation, in the context of DNSSEC, refers to one of\n      the following:\n\
    \      *  Checking the validity of DNSSEC signatures,\n      *  Checking the validity\
    \ of DNS responses, such as those including\n         authenticated denial of\
    \ existence, or\n      *  Building an authentication chain from a trust anchor\
    \ to a DNS\n         response or individual DNS RRsets in a response\n      The\
    \ first two definitions above consider only the validity of\n      individual\
    \ DNSSEC components such as the RRSIG validity or NSEC\n      proof validity.\
    \  The third definition considers the components of\n      the entire DNSSEC authentication\
    \ chain; thus, it requires\n      \"configured knowledge of at least one authenticated\
    \ DNSKEY or DS\n      RR\" (as described in [RFC4035], Section 5).\n      [RFC4033],\
    \ Section 2, says that a \"Validating Security-Aware Stub\n      Resolver... performs\
    \ signature validation\" and uses a trust anchor\n      \"as a starting point\
    \ for building the authentication chain to a\n      signed DNS response\"; thus,\
    \ it uses the first and third\n      definitions above.  The process of validating\
    \ an RRSIG resource\n      record is described in [RFC4035], Section 5.3.\n  \
    \    [RFC5155] refers to validating responses throughout the document,\n     \
    \ in the context of hashed authenticated denial of existence; this\n      uses\
    \ the second definition above.\n      The term \"authentication\" is used interchangeably\
    \ with\n      \"validation\", in the sense of the third definition above.\n  \
    \    [RFC4033], Section 2, describes the chain linking trust anchor to\n     \
    \ DNS data as the \"authentication chain\".  A response is considered\n      to\
    \ be authentic if \"all RRsets in the Answer and Authority\n      sections of\
    \ the response [are considered] to be authentic\" (Quoted\n      from [RFC4035])\
    \ DNS data or responses deemed to be authentic or\n      validated have a security\
    \ status of \"secure\" ([RFC4035],\n      Section 4.3; [RFC4033], Section 5).\
    \  \"Authenticating both DNS keys\n      and data is a matter of local policy,\
    \ which may extend or even\n      override the [DNSSEC] protocol extensions...\"\
    \ (Quoted from\n      [RFC4033], Section 3.1)\n      The term \"verification\"\
    , when used, is usually a synonym for\n      \"validation\".\n   Validating resolver:\
    \  A security-aware recursive name server,\n      security-aware resolver, or\
    \ security-aware stub resolver that is\n      applying at least one of the definitions\
    \ of validation (above), as\n      appropriate to the resolution context.  For\
    \ the same reason that\n      the generic term \"resolver\" is sometimes ambiguous\
    \ and needs to be\n      evaluated in context (see Section 6), \"validating resolver\"\
    \ is a\n      context-sensitive term.\n   Key signing key (KSK):  DNSSEC keys\
    \ that \"only sign the apex DNSKEY\n      RRset in a zone.\"  (Quoted from [RFC6781],\
    \ Section 3.1)\n   Zone signing key (ZSK):  \"DNSSEC keys that can be used to\
    \ sign all\n      the RRsets in a zone that require signatures, other than the\
    \ apex\n      DNSKEY RRset.\"  (Quoted from [RFC6781], Section 3.1) Also note\n\
    \      that a ZSK is sometimes used to sign the apex DNSKEY RRset.\n   Combined\
    \ signing key (CSK):  \"In cases where the differentiation\n      between the\
    \ KSK and ZSK is not made, i.e., where keys have the\n      role of both KSK and\
    \ ZSK, we talk about a Single-Type Signing\n      Scheme.\"  (Quoted from [RFC6781],\
    \ Section 3.1) This is sometimes\n      called a \"combined signing key\" or \"\
    CSK\".  It is operational\n      practice, not protocol, that determines whether\
    \ a particular key\n      is a ZSK, a KSK, or a CSK.\n   Secure Entry Point (SEP):\
    \  A flag in the DNSKEY RDATA that \"can be\n      used to distinguish between\
    \ keys that are intended to be used as\n      the secure entry point into the\
    \ zone when building chains of\n      trust, i.e., they are (to be) pointed to\
    \ by parental DS RRs or\n      configured as a trust anchor....  Therefore, it\
    \ is suggested that\n      the SEP flag be set on keys that are used as KSKs and\
    \ not on keys\n      that are used as ZSKs, while in those cases where a distinction\n\
    \      between a KSK and ZSK is not made (i.e., for a Single-Type Signing\n  \
    \    Scheme), it is suggested that the SEP flag be set on all keys.\"\n      (Quoted\
    \ from [RFC6781], Section 3.2.3) Note that the SEP flag is\n      only a hint,\
    \ and its presence or absence may not be used to\n      disqualify a given DNSKEY\
    \ RR from use as a KSK or ZSK during\n      validation.\n      The original definition\
    \ of SEPs was in [RFC3757].  That definition\n      clearly indicated that the\
    \ SEP was a key, not just a bit in the\n      key.  The abstract of [RFC3757]\
    \ says: \"With the Delegation Signer\n      (DS) resource record (RR), the concept\
    \ of a public key acting as a\n      secure entry point (SEP) has been introduced.\
    \  During exchanges of\n      public keys with the parent there is a need to differentiate\
    \ SEP\n      keys from other public keys in the Domain Name System KEY (DNSKEY)\n\
    \      resource record set.  A flag bit in the DNSKEY RR is defined to\n     \
    \ indicate that DNSKEY is to be used as a SEP.\"  That definition of\n      the\
    \ SEP as a key was made obsolete by [RFC4034], and the\n      definition from\
    \ [RFC6781] is consistent with [RFC4034].\n   Trust anchor:  \"A configured DNSKEY\
    \ RR or DS RR hash of a DNSKEY RR.\n      A validating security-aware resolver\
    \ uses this public key or hash\n      as a starting point for building the authentication\
    \ chain to a\n      signed DNS response.  In general, a validating resolver will\
    \ have\n      to obtain the initial values of its trust anchors via some secure\n\
    \      or trusted means outside the DNS protocol.\"  (Quoted from\n      [RFC4033],\
    \ Section 2)\n   DNSSEC Policy (DP):  A statement that \"sets forth the security\n\
    \      requirements and standards to be implemented for a DNSSEC-signed\n    \
    \  zone.\"  (Quoted from [RFC6841], Section 2)\n   DNSSEC Practice Statement (DPS):\
    \  \"A practices disclosure document\n      that may support and be a supplemental\
    \ document to the DNSSEC\n      Policy (if such exists), and it states how the\
    \ management of a\n      given zone implements procedures and controls at a high\
    \ level.\"\n      (Quoted from [RFC6841], Section 2)\n   Hardware security module\
    \ (HSM):  A specialized piece of hardware that\n      is used to create keys for\
    \ signatures and to sign messages without\n      ever disclosing the private key.\
    \  In DNSSEC, HSMs are often used\n      to hold the private keys for KSKs and\
    \ ZSKs and to create the\n      signatures used in RRSIG records at periodic intervals.\n\
    \   Signing software:  Authoritative DNS servers that support DNSSEC\n      often\
    \ contain software that facilitates the creation and\n      maintenance of DNSSEC\
    \ signatures in zones.  There is also stand-\n      alone software that can be\
    \ used to sign a zone regardless of\n      whether the authoritative server itself\
    \ supports signing.\n      Sometimes signing software can support particular HSMs\
    \ as part of\n      the signing process.\n"
- title: 11.  DNSSEC States
  contents:
  - "11.  DNSSEC States\n   A validating resolver can determine that a response is\
    \ in one of four\n   states: secure, insecure, bogus, or indeterminate.  These\
    \ states are\n   defined in [RFC4033] and [RFC4035], although the definitions\
    \ in the\n   two documents differ a bit.  This document makes no effort to\n \
    \  reconcile the definitions in the two documents, and takes no position\n   as\
    \ to whether they need to be reconciled.\n   Section 5 of [RFC4033] says:\n  \
    \    A validating resolver can determine the following 4 states:\n      Secure:\
    \ The validating resolver has a trust anchor, has a chain\n         of trust,\
    \ and is able to verify all the signatures in the\n         response.\n      Insecure:\
    \ The validating resolver has a trust anchor, a chain\n         of trust, and,\
    \ at some delegation point, signed proof of the\n         non-existence of a DS\
    \ record.  This indicates that subsequent\n         branches in the tree are provably\
    \ insecure.  A validating\n         resolver may have a local policy to mark parts\
    \ of the domain\n         space as insecure.\n      Bogus: The validating resolver\
    \ has a trust anchor and a secure\n         delegation indicating that subsidiary\
    \ data is signed, but\n         the response fails to validate for some reason:\
    \ missing\n         signatures, expired signatures, signatures with unsupported\n\
    \         algorithms, data missing that the relevant NSEC RR says\n         should\
    \ be present, and so forth.\n      Indeterminate: There is no trust anchor that\
    \ would indicate that a\n         specific portion of the tree is secure.  This\
    \ is the default\n         operation mode.\n   Section 4.3 of [RFC4035] says:\n\
    \      A security-aware resolver must be able to distinguish between four\n  \
    \    cases:\n      Secure: An RRset for which the resolver is able to build a\
    \ chain\n          of signed DNSKEY and DS RRs from a trusted security anchor\
    \ to\n          the RRset.  In this case, the RRset should be signed and is\n\
    \          subject to signature validation, as described above.\n      Insecure:\
    \ An RRset for which the resolver knows that it has no\n         chain of signed\
    \ DNSKEY and DS RRs from any trusted starting\n         point to the RRset.  This\
    \ can occur when the target RRset lies\n         in an unsigned zone or in a descendent\
    \ [sic] of an unsigned\n         zone.  In this case, the RRset may or may not\
    \ be signed, but\n         the resolver will not be able to verify the signature.\n\
    \      Bogus: An RRset for which the resolver believes that it ought to\n    \
    \     be able to establish a chain of trust but for which it is\n         unable\
    \ to do so, either due to signatures that for some reason\n         fail to validate\
    \ or due to missing data that the relevant\n         DNSSEC RRs indicate should\
    \ be present.  This case may indicate\n         an attack but may also indicate\
    \ a configuration error or some\n         form of data corruption.\n      Indeterminate:\
    \ An RRset for which the resolver is not able to\n         determine whether the\
    \ RRset should be signed, as the resolver\n         is not able to obtain the\
    \ necessary DNSSEC RRs.  This can occur\n         when the security-aware resolver\
    \ is not able to contact\n         security-aware name servers for the relevant\
    \ zones.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   These definitions do not change any security\
    \ considerations for the\n   DNS.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [IANA_RootFiles]\n              IANA, \"Root\
    \ Files\",\n              <https://www.iana.org/domains/root/files>.\n   [RFC0882]\
    \  Mockapetris, P., \"Domain names: Concepts and facilities\",\n             \
    \ RFC 882, DOI 10.17487/RFC0882, November 1983,\n              <https://www.rfc-editor.org/info/rfc882>.\n\
    \   [RFC1034]  Mockapetris, P., \"Domain names - concepts and facilities\",\n\
    \              STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987,\n      \
    \        <https://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]  Mockapetris,\
    \ P., \"Domain names - implementation and\n              specification\", STD\
    \ 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts -\n        \
    \      Application and Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123,\
    \ October 1989,\n              <https://www.rfc-editor.org/info/rfc1123>.\n  \
    \ [RFC1912]  Barr, D., \"Common DNS Operational and Configuration\n          \
    \    Errors\", RFC 1912, DOI 10.17487/RFC1912, February 1996,\n              <https://www.rfc-editor.org/info/rfc1912>.\n\
    \   [RFC1996]  Vixie, P., \"A Mechanism for Prompt Notification of Zone\n    \
    \          Changes (DNS NOTIFY)\", RFC 1996, DOI 10.17487/RFC1996,\n         \
    \     August 1996, <https://www.rfc-editor.org/info/rfc1996>.\n   [RFC2136]  Vixie,\
    \ P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic Updates\
    \ in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI 10.17487/RFC2136,\
    \ April 1997,\n              <https://www.rfc-editor.org/info/rfc2136>.\n   [RFC2181]\
    \  Elz, R. and R. Bush, \"Clarifications to the DNS\n              Specification\"\
    , RFC 2181, DOI 10.17487/RFC2181, July 1997,\n              <https://www.rfc-editor.org/info/rfc2181>.\n\
    \   [RFC2182]  Elz, R., Bush, R., Bradner, S., and M. Patton, \"Selection\n  \
    \            and Operation of Secondary DNS Servers\", BCP 16, RFC 2182,\n   \
    \           DOI 10.17487/RFC2182, July 1997,\n              <https://www.rfc-editor.org/info/rfc2182>.\n\
    \   [RFC2308]  Andrews, M., \"Negative Caching of DNS Queries (DNS\n         \
    \     NCACHE)\", RFC 2308, DOI 10.17487/RFC2308, March 1998,\n              <https://www.rfc-editor.org/info/rfc2308>.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and\n        \
    \      S. Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, DOI 10.17487/RFC4033, March 2005,\n              <https://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and\n        \
    \      S. Rose, \"Resource Records for the DNS Security\n              Extensions\"\
    , RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <https://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and\n        \
    \      S. Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <https://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC4592]  Lewis, E., \"The Role of Wildcards in the Domain Name\n       \
    \       System\", RFC 4592, DOI 10.17487/RFC4592, July 2006,\n              <https://www.rfc-editor.org/info/rfc4592>.\n\
    \   [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS\n    \
    \          Security (DNSSEC) Hashed Authenticated Denial of\n              Existence\"\
    , RFC 5155, DOI 10.17487/RFC5155, March 2008,\n              <https://www.rfc-editor.org/info/rfc5155>.\n\
    \   [RFC5358]  Damas, J. and F. Neves, \"Preventing Use of Recursive\n       \
    \       Nameservers in Reflector Attacks\", BCP 140, RFC 5358,\n             \
    \ DOI 10.17487/RFC5358, October 2008,\n              <https://www.rfc-editor.org/info/rfc5358>.\n\
    \   [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n \
    \             STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009,\n         \
    \     <https://www.rfc-editor.org/info/rfc5730>.\n   [RFC5731]  Hollenbeck, S.,\
    \ \"Extensible Provisioning Protocol (EPP)\n              Domain Name Mapping\"\
    , STD 69, RFC 5731,\n              DOI 10.17487/RFC5731, August 2009,\n      \
    \        <https://www.rfc-editor.org/info/rfc5731>.\n   [RFC5855]  Abley, J. and\
    \ T. Manderson, \"Nameservers for IPv4 and IPv6\n              Reverse Zones\"\
    , BCP 155, RFC 5855, DOI 10.17487/RFC5855,\n              May 2010, <https://www.rfc-editor.org/info/rfc5855>.\n\
    \   [RFC5936]  Lewis, E. and A. Hoenes, Ed., \"DNS Zone Transfer Protocol\n  \
    \            (AXFR)\", RFC 5936, DOI 10.17487/RFC5936, June 2010,\n          \
    \    <https://www.rfc-editor.org/info/rfc5936>.\n   [RFC6561]  Livingood, J.,\
    \ Mody, N., and M. O'Reirdan,\n              \"Recommendations for the Remediation\
    \ of Bots in ISP\n              Networks\", RFC 6561, DOI 10.17487/RFC6561, March\
    \ 2012,\n              <https://www.rfc-editor.org/info/rfc6561>.\n   [RFC6781]\
    \  Kolkman, O., Mekking, W., and R. Gieben, \"DNSSEC\n              Operational\
    \ Practices, Version 2\", RFC 6781,\n              DOI 10.17487/RFC6781, December\
    \ 2012,\n              <https://www.rfc-editor.org/info/rfc6781>.\n   [RFC6840]\
    \  Weiler, S., Ed. and D. Blacka, Ed., \"Clarifications and\n              Implementation\
    \ Notes for DNS Security (DNSSEC)\", RFC 6840,\n              DOI 10.17487/RFC6840,\
    \ February 2013,\n              <https://www.rfc-editor.org/info/rfc6840>.\n \
    \  [RFC6841]  Ljunggren, F., Eklund Lowinder, AM., and T. Okubo, \"A\n       \
    \       Framework for DNSSEC Policies and DNSSEC Practice\n              Statements\"\
    , RFC 6841, DOI 10.17487/RFC6841, January 2013,\n              <https://www.rfc-editor.org/info/rfc6841>.\n\
    \   [RFC6891]  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n  \
    \            for DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891,\
    \ April 2013,\n              <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC7344]\
    \  Kumari, W., Gudmundsson, O., and G. Barwood, \"Automating\n              DNSSEC\
    \ Delegation Trust Maintenance\", RFC 7344,\n              DOI 10.17487/RFC7344,\
    \ September 2014,\n              <https://www.rfc-editor.org/info/rfc7344>.\n\
    \   [RFC7719]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", RFC 7719, DOI 10.17487/RFC7719, December\n              2015,\
    \ <https://www.rfc-editor.org/info/rfc7719>.\n   [RFC8310]  Dickinson, S., Gillmor,\
    \ D., and T. Reddy, \"Usage Profiles\n              for DNS over TLS and DNS over\
    \ DTLS\", RFC 8310,\n              DOI 10.17487/RFC8310, March 2018,\n       \
    \       <https://www.rfc-editor.org/info/rfc8310>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [IANA_Resource_Registry]\n              IANA,\
    \ \"Resource Record (RR) TYPEs\",\n              <https://www.iana.org/assignments/dns-parameters/>.\n\
    \   [RFC819]   Su, Z. and J. Postel, \"The Domain Naming Convention for\n    \
    \          Internet User Applications\", RFC 819,\n              DOI 10.17487/RFC0819,\
    \ August 1982,\n              <https://www.rfc-editor.org/info/rfc819>.\n   [RFC952]\
    \   Harrenstien, K., Stahl, M., and E. Feinler, \"DoD Internet\n             \
    \ host table specification\", RFC 952, DOI 10.17487/RFC0952,\n              October\
    \ 1985, <https://www.rfc-editor.org/info/rfc952>.\n   [RFC1713]  Romao, A., \"\
    Tools for DNS debugging\", FYI 27, RFC 1713,\n              DOI 10.17487/RFC1713,\
    \ November 1994,\n              <https://www.rfc-editor.org/info/rfc1713>.\n \
    \  [RFC1995]  Ohta, M., \"Incremental Zone Transfer in DNS\", RFC 1995,\n    \
    \          DOI 10.17487/RFC1995, August 1996,\n              <https://www.rfc-editor.org/info/rfc1995>.\n\
    \   [RFC2775]  Carpenter, B., \"Internet Transparency\", RFC 2775,\n         \
    \     DOI 10.17487/RFC2775, February 2000,\n              <https://www.rfc-editor.org/info/rfc2775>.\n\
    \   [RFC3172]  Huston, G., Ed., \"Management Guidelines & Operational\n      \
    \        Requirements for the Address and Routing Parameter Area\n           \
    \   Domain (\"arpa\")\", BCP 52, RFC 3172, DOI 10.17487/RFC3172,\n           \
    \   September 2001, <https://www.rfc-editor.org/info/rfc3172>.\n   [RFC3425] \
    \ Lawrence, D., \"Obsoleting IQUERY\", RFC 3425,\n              DOI 10.17487/RFC3425,\
    \ November 2002,\n              <https://www.rfc-editor.org/info/rfc3425>.\n \
    \  [RFC3493]  Gilligan, R., Thomson, S., Bound, J., McCann, J., and\n        \
    \      W. Stevens, \"Basic Socket Interface Extensions for IPv6\",\n         \
    \     RFC 3493, DOI 10.17487/RFC3493, February 2003,\n              <https://www.rfc-editor.org/info/rfc3493>.\n\
    \   [RFC3757]  Kolkman, O., Schlyter, J., and E. Lewis, \"Domain Name\n      \
    \        System KEY (DNSKEY) Resource Record (RR) Secure Entry\n             \
    \ Point (SEP) Flag\", RFC 3757, DOI 10.17487/RFC3757, April\n              2004,\
    \ <https://www.rfc-editor.org/info/rfc3757>.\n   [RFC3912]  Daigle, L., \"WHOIS\
    \ Protocol Specification\", RFC 3912,\n              DOI 10.17487/RFC3912, September\
    \ 2004,\n              <https://www.rfc-editor.org/info/rfc3912>.\n   [RFC4641]\
    \  Kolkman, O. and R. Gieben, \"DNSSEC Operational Practices\",\n            \
    \  RFC 4641, DOI 10.17487/RFC4641, September 2006,\n              <https://www.rfc-editor.org/info/rfc4641>.\n\
    \   [RFC4697]  Larson, M. and P. Barber, \"Observed DNS Resolution\n         \
    \     Misbehavior\", BCP 123, RFC 4697, DOI 10.17487/RFC4697,\n              October\
    \ 2006, <https://www.rfc-editor.org/info/rfc4697>.\n   [RFC4786]  Abley, J. and\
    \ K. Lindqvist, \"Operation of Anycast\n              Services\", BCP 126, RFC\
    \ 4786, DOI 10.17487/RFC4786,\n              December 2006, <https://www.rfc-editor.org/info/rfc4786>.\n\
    \   [RFC4956]  Arends, R., Kosters, M., and D. Blacka, \"DNS Security\n      \
    \        (DNSSEC) Opt-In\", RFC 4956, DOI 10.17487/RFC4956, July\n           \
    \   2007, <https://www.rfc-editor.org/info/rfc4956>.\n   [RFC5625]  Bellis, R.,\
    \ \"DNS Proxy Implementation Guidelines\",\n              BCP 152, RFC 5625, DOI\
    \ 10.17487/RFC5625, August 2009,\n              <https://www.rfc-editor.org/info/rfc5625>.\n\
    \   [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Definitions and Document Framework\",\n             \
    \ RFC 5890, DOI 10.17487/RFC5890, August 2010,\n              <https://www.rfc-editor.org/info/rfc5890>.\n\
    \   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n            \
    \  Applications (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891,\
    \ August 2010,\n              <https://www.rfc-editor.org/info/rfc5891>.\n   [RFC5892]\
    \  Faltstrom, P., Ed., \"The Unicode Code Points and\n              Internationalized\
    \ Domain Names for Applications (IDNA)\",\n              RFC 5892, DOI 10.17487/RFC5892,\
    \ August 2010,\n              <https://www.rfc-editor.org/info/rfc5892>.\n   [RFC5893]\
    \  Alvestrand, H., Ed. and C. Karp, \"Right-to-Left Scripts\n              for\
    \ Internationalized Domain Names for Applications\n              (IDNA)\", RFC\
    \ 5893, DOI 10.17487/RFC5893, August 2010,\n              <https://www.rfc-editor.org/info/rfc5893>.\n\
    \   [RFC5894]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Background, Explanation, and\n              Rationale\"\
    , RFC 5894, DOI 10.17487/RFC5894, August 2010,\n              <https://www.rfc-editor.org/info/rfc5894>.\n\
    \   [RFC6055]  Thaler, D., Klensin, J., and S. Cheshire, \"IAB Thoughts on\n \
    \             Encodings for Internationalized Domain Names\", RFC 6055,\n    \
    \          DOI 10.17487/RFC6055, February 2011,\n              <https://www.rfc-editor.org/info/rfc6055>.\n\
    \   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n   \
    \           DOI 10.17487/RFC6265, April 2011,\n              <https://www.rfc-editor.org/info/rfc6265>.\n\
    \   [RFC6303]  Andrews, M., \"Locally Served DNS Zones\", BCP 163,\n         \
    \     RFC 6303, DOI 10.17487/RFC6303, July 2011,\n              <https://www.rfc-editor.org/info/rfc6303>.\n\
    \   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n   \
    \           Cheshire, \"Internet Assigned Numbers Authority (IANA)\n         \
    \     Procedures for the Management of the Service Name and\n              Transport\
    \ Protocol Port Number Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335,\
    \ August 2011,\n              <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC6365]\
    \  Hoffman, P. and J. Klensin, \"Terminology Used in\n              Internationalization\
    \ in the IETF\", BCP 166, RFC 6365,\n              DOI 10.17487/RFC6365, September\
    \ 2011,\n              <https://www.rfc-editor.org/info/rfc6365>.\n   [RFC6672]\
    \  Rose, S. and W. Wijngaards, \"DNAME Redirection in the\n              DNS\"\
    , RFC 6672, DOI 10.17487/RFC6672, June 2012,\n              <https://www.rfc-editor.org/info/rfc6672>.\n\
    \   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n  \
    \            DOI 10.17487/RFC6762, February 2013,\n              <https://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC7129]  Gieben, R. and W. Mekking, \"Authenticated Denial of\n        \
    \      Existence in the DNS\", RFC 7129, DOI 10.17487/RFC7129,\n             \
    \ February 2014, <https://www.rfc-editor.org/info/rfc7129>.\n   [RFC7480]  Newton,\
    \ A., Ellacott, B., and N. Kong, \"HTTP Usage in the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7480,\n              DOI 10.17487/RFC7480,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7480>.\n   [RFC7481]\
    \  Hollenbeck, S. and N. Kong, \"Security Services for the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7481,\n              DOI 10.17487/RFC7481,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7481>.\n   [RFC7482]\
    \  Newton, A. and S. Hollenbeck, \"Registration Data Access\n              Protocol\
    \ (RDAP) Query Format\", RFC 7482,\n              DOI 10.17487/RFC7482, March\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7482>.\n   [RFC7483]\
    \  Newton, A. and S. Hollenbeck, \"JSON Responses for the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7483,\n              DOI 10.17487/RFC7483,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7483>.\n   [RFC7484]\
    \  Blanchet, M., \"Finding the Authoritative Registration Data\n             \
    \ (RDAP) Service\", RFC 7484, DOI 10.17487/RFC7484, March\n              2015,\
    \ <https://www.rfc-editor.org/info/rfc7484>.\n   [RFC7485]  Zhou, L., Kong, N.,\
    \ Shen, S., Sheng, S., and A. Servin,\n              \"Inventory and Analysis\
    \ of WHOIS Registration Objects\",\n              RFC 7485, DOI 10.17487/RFC7485,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7485>.\n   [RFC7793]\
    \  Andrews, M., \"Adding 100.64.0.0/10 Prefixes to the IPv4\n              Locally-Served\
    \ DNS Zones Registry\", BCP 163, RFC 7793,\n              DOI 10.17487/RFC7793,\
    \ May 2016,\n              <https://www.rfc-editor.org/info/rfc7793>.\n   [RFC7858]\
    \  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and\
    \ P. Hoffman, \"Specification for DNS over Transport\n              Layer Security\
    \ (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n\
    \   [RFC8094]  Reddy, T., Wing, D., and P. Patil, \"DNS over Datagram\n      \
    \        Transport Layer Security (DTLS)\", RFC 8094,\n              DOI 10.17487/RFC8094,\
    \ February 2017,\n              <https://www.rfc-editor.org/info/rfc8094>.\n \
    \  [RFC8109]  Koch, P., Larson, M., and P. Hoffman, \"Initializing a DNS\n   \
    \           Resolver with Priming Queries\", BCP 209, RFC 8109,\n            \
    \  DOI 10.17487/RFC8109, March 2017,\n              <https://www.rfc-editor.org/info/rfc8109>.\n\
    \   [RFC8484]  Hoffman, P. and P. McManus, \"DNS Queries over HTTPS\n        \
    \      (DoH)\", RFC 8484, DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n\
    \   [RSSAC026] Root Server System Advisory Committee (RSSAC), \"RSSAC\n      \
    \        Lexicon\", 2017,\n              <https://www.icann.org/en/system/files/files/\n\
    \              rssac-026-14mar17-en.pdf>.\n"
- title: Appendix A.  Definitions Updated by This Document
  contents:
  - "Appendix A.  Definitions Updated by This Document\n   The following definitions\
    \ from RFCs are updated by this document:\n   o  Forwarder in [RFC2308]\n   o\
    \  QNAME in [RFC2308]\n   o  Secure Entry Point (SEP) in [RFC3757]; note, however,\
    \ that this\n      RFC is already obsolete (see [RFC4033], [RFC4034], [RFC4035]).\n"
- title: Appendix B.  Definitions First Defined in This Document
  contents:
  - "Appendix B.  Definitions First Defined in This Document\n   The following definitions\
    \ are first defined in this document:\n   o  \"Alias\" in Section 2\n   o  \"\
    Apex\" in Section 7\n   o  \"arpa\" in Section 7\n   o  \"Bailiwick\" in Section\
    \ 7\n   o  \"Class independent\" in Section 5\n   o  \"Delegation-centric zone\"\
    \ in Section 7\n   o  \"Delegation\" in Section 7\n   o  \"DNS operator\" in Section\
    \ 9\n   o  \"DNSSEC-aware\" in Section 10\n   o  \"DNSSEC-unaware\" in Section\
    \ 10\n   o  \"Forwarding\" in Section 6\n   o  \"Full resolver\" in Section 6\n\
    \   o  \"Fully-qualified domain name\" in Section 2\n   o  \"Global DNS\" in Section\
    \ 2\n   o  \"Hardware Security Module (HSM)\" in Section 10\n   o  \"Host name\"\
    \ in Section 2\n   o  \"IDN\" in Section 2\n   o  \"In-bailiwick\" in Section\
    \ 7\n   o  \"Iterative resolution\" in Section 6\n   o  \"Label\" in Section 2\n\
    \   o  \"Locally served DNS zone\" in Section 2\n   o  \"Naming system\" in Section\
    \ 2\n   o  \"Negative response\" in Section 3\n   o  \"Non-recursive query\" in\
    \ Section 6\n   o  \"Open resolver\" in Section 6\n   o  \"Out-of-bailiwick\"\
    \ in Section 7\n   o  \"Passive DNS\" in Section 6\n   o  \"Policy-implementing\
    \ resolver\" in Section 6\n   o  \"Presentation format\" in Section 5\n   o  \"\
    Priming\" in Section 6\n   o  \"Private DNS\" in Section 2\n   o  \"Recursive\
    \ resolver\" in Section 6\n   o  \"Referrals\" in Section 4\n   o  \"Registrant\"\
    \ in Section 9\n   o  \"Registrar\" in Section 9\n   o  \"Registry\" in Section\
    \ 9\n   o  \"Root zone\" in Section 7\n   o  \"Secure Entry Point (SEP)\" in Section\
    \ 10\n   o  \"Signing software\" in Section 10\n   o  \"Split DNS\" in Section\
    \ 6\n   o  \"Stub resolver\" in Section 6\n   o  \"Subordinate\" in Section 8\n\
    \   o  \"Superordinate\" in Section 8\n   o  \"TLD\" in Section 2\n   o  \"Validating\
    \ resolver\" in Section 10\n   o  \"Validation\" in Section 10\n   o  \"View\"\
    \ in Section 6\n   o  \"Zone transfer\" in Section 6\n"
- title: Index
  contents:
  - "Index\n   A\n      Address records  16\n      Alias  9\n      Anycast  22\n \
    \     Apex  23\n      Asterisk label  27\n      Authoritative data  24\n     \
    \ Authoritative server  19\n      Authoritative-only server  19\n      arpa: Address\
    \ and Routing Parameter Area Domain  26\n   C\n      CNAME  10\n      Canonical\
    \ name  9\n      Child  22\n      Class  11\n      Class independent  16\n   \
    \   Closest encloser  27\n      Closest provable encloser  27\n      Combined\
    \ signing key (CSK)  33\n   D\n      DNS operator  29\n      DNSSEC Policy (DP)\
    \  34\n      DNSSEC Practice Statement (DPS)  34\n      DNSSEC-aware and DNSSEC-unaware\
    \  30\n      Delegation  24\n      Delegation-centric zone  26\n      Domain name\
    \  5\n   E\n      EDNS  14\n      EPP  28\n      Empty non-terminals (ENT)  26\n\
    \   F\n      FORMERR  10\n      Fast flux DNS  26\n      Forward lookup  26\n\
    \      Forwarder  21\n      Forwarding  20\n      Full resolver  18\n      Full-service\
    \ resolver  18\n      Fully-qualified domain name (FQDN)  8\n   G\n      Global\
    \ DNS  5\n      Glue records  24\n   H\n      Hardware security module (HSM) \
    \ 34\n      Hidden master  20\n      Host name  8\n   I\n      IDN  9\n      In-bailiwick\
    \  25\n      Insecure delegation  31\n      Instance  22\n      Internationalized\
    \ Domain Name  9\n      Iterative mode  17\n      Iterative resolution  18\n \
    \  K\n      Key signing key (KSK)  33\n   L\n      Label  5\n      Lame delegation\
    \  24\n      Locally served DNS zone  8\n   M\n      Master file  14\n      Master\
    \ server  19\n      Multicast DNS  7\n      mDNS  7\n   N\n      NODATA  10\n\
    \      NOERROR  10\n      NOTIMP  10\n      NS  19\n      NSEC  31\n      NSEC3\
    \  31\n      NXDOMAIN  10\n      Naming system  4\n      Negative caching  19\n\
    \      Negative response  11\n      Next closer name  28\n      Non-recursive\
    \ query  18\n   O\n      OPT  14\n      Occluded name  26\n      Open resolver\
    \  21\n      Opt-out  31\n      Origin  23\n      Out-of-bailiwick  25\n     \
    \ Owner  15\n   P\n      Parent  23\n      Passive DNS  22\n      Policy-implementing\
    \ resolver  21\n      Presentation format  14\n      Primary master  20\n    \
    \  Primary server  20\n      Priming  18\n      Privacy-enabling DNS server  22\n\
    \      Private DNS  7\n      Public suffix  29\n   Q\n      QNAME  11\n   R\n\
    \      RDAP  29\n      REFUSED  10\n      RR  14\n      RRset  14\n      Recursive\
    \ mode  17\n      Recursive query  18\n      Recursive resolver  17\n      Referrals\
    \  13\n      Registrant  28\n      Registrar  28\n      Registry  28\n      Resolver\
    \  16\n      Reverse DNS, reverse lookup  26\n      Root hints  18\n      Root\
    \ zone  26\n   S\n      SERVFAIL  10\n      SOA  14\n      SOA field names  14\n\
    \      Secondary server  19\n      Secure Entry Point (SEP)  33\n      Service\
    \ name  27\n      Signed zone  30\n      Signing software  34\n      Slave server\
    \  19\n      Source of Synthesis  28\n      Split DNS  21\n      Split-horizon\
    \ DNS  21\n      Stealth server  20\n      Stub resolver  17\n      Subdomain\
    \  9\n      Subordinate  29\n      Superordinate  29\n   T\n      TLD  9\n   \
    \   TTL  15\n      Trust anchor  34\n   U\n      Unsigned zone  30\n   V\n   \
    \   Validating resolver  33\n      Validation  32\n      View  21\n   W\n    \
    \  WHOIS  28\n      Wildcard  27\n      Wildcard domain name  27\n   Z\n     \
    \ Zone  22\n      Zone cut  23\n      Zone enumeration  31\n      Zone signing\
    \ key (ZSK)  33\n      Zone transfer  19\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The following is the Acknowledgements section of RFC 7719.\n\
    \      The authors gratefully acknowledge all of the authors of DNS-\n      related\
    \ RFCs that proceed this one.  Comments from Tony Finch,\n      Stephane Bortzmeyer,\
    \ Niall O'Reilly, Colm MacCarthaigh, Ray\n      Bellis, John Kristoff, Robert\
    \ Edmonds, Paul Wouters, Shumon Huque,\n      Paul Ebersman, David Lawrence, Matthijs\
    \ Mekking, Casey Deccio, Bob\n      Harold, Ed Lewis, John Klensin, David Black,\
    \ and many others in\n      the DNSOP Working Group helped shape RFC 7719.\n \
    \  Most of the major changes between RFC 7719 and this document came\n   from\
    \ active discussion on the DNSOP WG.  Specific people who\n   contributed material\
    \ to this document include: Bob Harold, Dick\n   Franks, Evan Hunt, John Dickinson,\
    \ Mark Andrews, Martin Hoffmann,\n   Paul Vixie, Peter Koch, Duane Wessels, Allison\
    \ Mankin, Giovane Moura,\n   Roni Even, Dan Romascanu, and Vladmir Cunat.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Hoffman\n   ICANN\n   Email: paul.hoffman@icann.org\n\
    \   Andrew Sullivan\n   Email: ajs@anvilwalrusden.com\n   Kazunori Fujiwara\n\
    \   Japan Registry Services Co., Ltd.\n   Chiyoda First Bldg. East 13F, 3-8-1\
    \ Nishi-Kanda\n   Chiyoda-ku, Tokyo  101-0065\n   Japan\n   Phone: +81 3 5215\
    \ 8451\n   Email: fujiwara@jprs.co.jp\n"
