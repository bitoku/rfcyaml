- title: __initial_text__
  contents:
  - '                       DNSSEC Roadblock Avoidance

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes problems that a Validating DNS resolver,\n\
    \   stub-resolver, or application might run into within a non-compliant\n   infrastructure.\
    \  It outlines potential detection and mitigation\n   techniques.  The scope of\
    \ the document is to create a shared approach\n   to detect and overcome network\
    \ issues that a DNSSEC software/system\n   may face.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8027.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Notation ...................................................3\n  \
    \    1.2. Background .................................................3\n    \
    \  1.3. Implementation Experiences .................................4\n      \
    \     1.3.1. Test Zone Implementation ............................4\n   2. Goals\
    \ ...........................................................4\n   3. Detecting\
    \ DNSSEC Non-compliance .................................5\n      3.1. Determining\
    \ DNSSEC Support in Recursive Resolvers ..........5\n           3.1.1. Supports\
    \ UDP Answers ................................6\n           3.1.2. Supports TCP\
    \ Answers ................................6\n           3.1.3. Supports EDNS0\
    \ ......................................6\n           3.1.4. Supports the DO Bit\
    \ .................................7\n           3.1.5. Supports the AD Bit DNSKEY\
    \ Algorithms 5 and/or 8 ....7\n           3.1.6. Returns RRSIG for Signed Answer\
    \ .....................7\n           3.1.7. Supports Querying for DNSKEY Records\
    \ ................8\n           3.1.8. Supports Querying for DS Records ....................8\n\
    \           3.1.9. Supports Negative Answers with NSEC Records .........8\n  \
    \         3.1.10. Supports Negative Answers with NSEC3 Records .......9\n    \
    \       3.1.11. Supports Queries Where DNAME Records Lead\n                  \
    \ to an Answer .......................................9\n           3.1.12. Permissive\
    \ DNSSEC .................................10\n           3.1.13. Supports Unknown\
    \ RRtypes ..........................10\n      3.2. Direct Network Queries ....................................10\n\
    \           3.2.1. Support for Remote UDP over Port 53 ................10\n  \
    \         3.2.2. Support for Remote UDP with Fragmentation ..........11\n    \
    \       3.2.3. Support for Outbound TCP over Port 53 ..............11\n      3.3.\
    \ Support for DNSKEY and DS Combinations ....................11\n   4. Aggregating\
    \ the Results ........................................12\n      4.1. Resolver\
    \ Capability Description ...........................12\n   5. Roadblock Avoidance\
    \ ............................................13\n      5.1. Partial Resolver\
    \ Usage ....................................16\n           5.1.1. Known Insecure\
    \ Lookups .............................16\n           5.1.2. Partial NSEC/NSEC3\
    \ Support .........................16\n   6. Start-Up and Network Connectivity\
    \ Issues .......................16\n      6.1. What to Do ................................................17\n\
    \   7. Quick Test .....................................................17\n  \
    \    7.1. Test Negative Answers Algorithm 5 .........................17\n    \
    \  7.2. Test Algorithm 8 ..........................................18\n      7.3.\
    \ Test Algorithm 13 .........................................18\n      7.4. Fails\
    \ When DNSSEC Does Not Validate .......................18\n   8. Security Considerations\
    \ ........................................18\n   9. Normative References ...........................................18\n\
    \   Acknowledgments ...................................................19\n  \
    \ Authors' Addresses ................................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes problems observable during DNSSEC\
    \ ([RFC4034]\n   [RFC4035]) deployment that derive from non-compliant infrastructure.\n\
    \   It poses potential detection and mitigation techniques.\n"
- title: 1.1.  Notation
  contents:
  - "1.1.  Notation\n   In this document, a \"Host Validator\" can either be a validating\
    \ stub-\n   resolver, such as a library that an application has linked in, or\
    \ a\n   validating resolver daemon running on the same machine.  It may or\n \
    \  may not be trying to use upstream caching resolvers during its own\n   resolution\
    \ process; both cases are covered by the tests defined in\n   this document.\n\
    \   The sub-variant of this is a \"Validating Forwarding Resolver\", which\n \
    \  is a resolver that is configured to use upstream Resolvers when\n   possible.\
    \  A Validating Forwarding Resolver also needs to perform the\n   tests outlined\
    \ in this document before using an upstream recursive\n   resolver.\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [RFC2119].\n"
- title: 1.2.  Background
  contents:
  - "1.2.  Background\n   Deployment of DNSSEC validation is hampered by network components\n\
    \   that make it difficult or sometimes impossible for validating\n   resolvers\
    \ to effectively obtain the DNSSEC data they need.  This can\n   occur for many\
    \ different reasons including, but not limited to, the\n   following:\n   o  Recursive\
    \ resolvers and DNS proxies [RFC5625] not being fully\n      DNSSEC compliant\n\
    \   o  Resolvers not being DNSSEC aware\n   o  \"Middleboxes\" actively blocking,\
    \ modifying, and/or restricting\n      outbound traffic to the DNS port (53) either\
    \ UDP and/or TCP\n   o  In-path network components not allowing UDP fragments\n\
    \   This document talks about ways that a Host Validator can detect the\n   state\
    \ of the network it is attached to, and ways to hopefully\n   circumvent the problems\
    \ associated with the network defects it\n   discovers.  The tests described in\
    \ this document may be performed on\n   any validating resolver to detect and\
    \ prevent problems.  While these\n   recommendations are mainly aimed at Host\
    \ Validators, it is prudent to\n   perform these tests from regular validating\
    \ resolvers, just to make\n   sure things work.\n   There are situations where\
    \ a host cannot talk directly to a Resolver;\n   the tests below cannot address\
    \ how to overcome that, and inconsistent\n   results can be seen in such cases.\
    \  This can happen, for instance,\n   when there are DNS proxies/forwarders between\
    \ the user and the actual\n   resolvers.\n"
- title: 1.3.  Implementation Experiences
  contents:
  - "1.3.  Implementation Experiences\n   Multiple lessons learned from multiple implementations\
    \ led to the\n   development of this document, including (in alphabetical order)\n\
    \   DNSSEC-Tools' DNSSEC-Check, DNSSEC_Resolver_Check, dnssec-trigger,\n   and\
    \ FCC_Grade.\n   Detecting lack of support for specified Domain Name System Key\n\
    \   (DNSKEY) algorithms and Delegation Signer (DS) digest algorithms is\n   outside\
    \ the scope of this document, but the document provides\n   information on how\
    \ to do that.  See the sample test tool:\n   <https://github.com/ogud/DNSSEC_ALG_Check>.\n\
    \   This document does describe compliance tests for algorithms 5, 7, and\n  \
    \ 13 with DS digest algorithms 1 and 2.\n"
- title: 1.3.1.  Test Zone Implementation
  contents:
  - "1.3.1.  Test Zone Implementation\n   In this document, the \"test.example.com\"\
    \ domain is used to refer to\n   DNS records that contain test records that have\
    \ known DNSSEC\n   properties associated with them.  For example, the \"badsign-\n\
    \   a.test.example.com\" domain is used below to refer to a DNS A record\n   where\
    \ the signatures published for it are invalid (i.e., they are\n   \"bad signatures\"\
    \ that should cause a validation failure).\n   At the time of this publication,\
    \ the \"test.dnssec-tools.org\" domain\n   implements all of these test records.\
    \  Thus, it may be possible to\n   replace \"test.example.com\" in this document\
    \ with \"test.dnssec-\n   tools.org\" when performing real-world tests.\n"
- title: 2.  Goals
  contents:
  - "2.  Goals\n   This document is intended to show how a Host Validator can detect\
    \ the\n   capabilities of a recursive resolver and work around any problems\n\
    \   that could potentially affect DNSSEC resolution.  This enables the\n   Host\
    \ Validator to make use of the caching functionality of the\n   recursive resolver,\
    \ which is desirable in that it decreases network\n   traffic and improves response\
    \ times.\n   A Host Validator has two choices: it can wait to determine that it\n\
    \   has problems with a recursive resolver based on the results that it\n   is\
    \ getting from real-world queries issued to it or it can proactively\n   test\
    \ for problems (Section 3) to build a workaround list ahead of\n   time (Section\
    \ 5).  There are pros and cons to both of these paths\n   that are application\
    \ specific, and this document does not attempt to\n   provide guidance about whether\
    \ proactive tests should or should not\n   be used.  Either way, DNSSEC roadblock\
    \ avoidance techniques ought to\n   be used when needed and if possible.\n   Note:\
    \ Besides being useful for Host Validators, the same tests can be\n   used for\
    \ a recursive resolver to check if its upstream connections\n   hinder DNSSEC\
    \ validation.\n"
- title: 3.  Detecting DNSSEC Non-compliance
  contents:
  - "3.  Detecting DNSSEC Non-compliance\n   This section outlines tests that a validator\
    \ should perform in order\n   to test certain features of the surrounding network.\
    \  A resolver\n   should perform these tests when first starting but MAY also\
    \ perform\n   these tests when it has detected network changes (e.g., address\n\
    \   changes, network reattachment, or etc.).\n   Note: When performing these tests\
    \ against an address, we make the\n   following assumption about that address:\
    \ it is a unicast address or\n   an anycast [RFC4786] cluster where all servers\
    \ have identical\n   configuration and connectivity.\n   Note: When performing\
    \ these tests, we also assume that the path is\n   clear of \"DNS-interfering\"\
    \ middleboxes, like firewalls, proxies, or\n   forwarders.  The presence of such\
    \ infrastructure can easily make a\n   recursive resolver appear to be functioning\
    \ improperly.  It is beyond\n   the scope of the document as how to work around\
    \ such interference,\n   although the tests defined in this document may indicate\
    \ when such\n   misbehaving middleware is causing interference.\n   Note: This\
    \ document specifies two sets of tests to perform: a\n   comprehensive one and\
    \ a fast one.  The fast one will detect most\n   common problems; thus, if the\
    \ fast one passes, then the comprehensive\n   one MAY be considered passed as\
    \ well.\n"
- title: 3.1.  Determining DNSSEC Support in Recursive Resolvers
  contents:
  - "3.1.  Determining DNSSEC Support in Recursive Resolvers\n   Ideally, a Host Validator\
    \ can make use of the caching present in\n   recursive resolvers.  This section\
    \ discusses the tests that a\n   recursive resolver MUST pass in order to be fully\
    \ usable as a DNS\n   cache.\n   Unless stated otherwise:\n   o  all of the following\
    \ tests SHOULD have the Recursion Desired (RD)\n      flag set when sending out\
    \ a query and queries SHOULD be sent over\n      UDP.\n   o  the tests MUST NOT\
    \ have the DNSSEC OK (DO) bit set or utilize any\n      of the other DNSSEC-related\
    \ requirements, like Extension\n      Mechanisms for DNS (EDNS0).\n   The tests\
    \ are designed to check for support of one feature at a time.\n"
- title: 3.1.1.  Supports UDP Answers
  contents:
  - "3.1.1.  Supports UDP Answers\n   Purpose: This tests basic DNS-over-UDP functionality\
    \ to a resolver.\n   Test: A DNS request is sent to the resolver under test for\
    \ an A\n   record for a known existing domain, such as good-a.test.example.com.\n\
    \   SUCCESS: A DNS response was received that contains an A record in the\n  \
    \ answer section.  (The data itself does not need to be checked.)\n   Note: An\
    \ implementation MAY chose not to perform the rest of the\n   tests if this test\
    \ fails, as it is highly unlikely that the resolver\n   under test will pass any\
    \ of the remaining tests.\n"
- title: 3.1.2.  Supports TCP Answers
  contents:
  - "3.1.2.  Supports TCP Answers\n   Purpose: This tests basic TCP functionality\
    \ to a resolver.\n   Test: A DNS request is sent over TCP to the resolver under\
    \ test for\n   an A record for a known existing domain, such as good-\n   a.test.example.com.\n\
    \   SUCCESS: A DNS response was received that contains an A record in the\n  \
    \ answer section.  (The data itself does not need to be checked.)\n"
- title: 3.1.3.  Supports EDNS0
  contents:
  - "3.1.3.  Supports EDNS0\n   Purpose: Test whether a resolver properly supports\
    \ the EDNS0\n   extension option.\n   Prerequisite: Supports UDP or TCP.\n   Test:\
    \ Send a request to the resolver under test for an A record for a\n   known existing\
    \ domain, such as good-a.test.example.com, with an EDNS0\n   OPT record in the\
    \ additional section.\n   SUCCESS: A DNS response was received that contains an\
    \ EDNS0 option\n   with version number 0.\n"
- title: 3.1.4.  Supports the DO Bit
  contents:
  - "3.1.4.  Supports the DO Bit\n   Purpose: This tests whether a resolver has minimal\
    \ support of the DO\n   bit.\n   Prerequisite: Supports EDNS0.\n   Test: Send\
    \ a request to the resolver under test for an A record for a\n   known existing\
    \ domain, such as good-a.test.example.com.  Set the DO\n   bit in the outgoing\
    \ query.\n   SUCCESS: A DNS response was received that contains the DO bit set.\n\
    \   Note: This only tests that the resolver set the DO bit in the\n   response.\
    \  Later tests will determine if the DO bit was actually made\n   use of.  Some\
    \ resolvers successfully pass this test because they\n   simply copy the unknown\
    \ flags into the response.  These resolvers\n   will fail the later tests.\n"
- title: 3.1.5.  Supports the AD Bit DNSKEY Algorithms 5 and/or 8
  contents:
  - "3.1.5.  Supports the AD Bit DNSKEY Algorithms 5 and/or 8\n   Purpose: This tests\
    \ whether the resolver is a validating resolver.\n   Prerequisite: Supports the\
    \ DO bit.\n   Test: Send requests to the resolver under test for an A record for\
    \ a\n   known existing domain in a DNSSEC-signed zone that is verifiable to a\n\
    \   configured trust anchor, such as good-a.test.example.com using the\n   root's\
    \ published DNSKEY or DS record as a trust anchor.  Set the DO\n   bit in the\
    \ outgoing query.  This test should be done twice: once for\n   a zone that contains\
    \ algorithm 5 (RSASHA1) and again for algorithm 8\n   (RSASHA256).\n   SUCCESS:\
    \ A DNS response was received that contains the Authentic Data\n   (AD) bit set\
    \ for algorithm 5 (RSASHA1).\n   BONUS: The AD bit is set for a resolver that\
    \ supports algorithm 8\n   (RSASHA256).\n"
- title: 3.1.6.  Returns RRSIG for Signed Answer
  contents:
  - "3.1.6.  Returns RRSIG for Signed Answer\n   Purpose: This tests whether a resolver\
    \ will properly return Resource\n   Record Signature (RRSIG) records when the\
    \ DO bit is set.\n   Prerequisite: Supports the DO bit.\n   Test: Send a request\
    \ to the resolver under test for an A record for a\n   known existing domain in\
    \ a DNSSEC-signed zone, such as good-\n   a.test.example.com.  Set the DO bit\
    \ in the outgoing query.\n   SUCCESS: A DNS response was received that contains\
    \ at least one RRSIG\n   record.\n"
- title: 3.1.7.  Supports Querying for DNSKEY Records
  contents:
  - "3.1.7.  Supports Querying for DNSKEY Records\n   Purpose: This tests whether\
    \ a resolver can query for and receive a\n   DNSKEY record from a signed zone.\n\
    \   Prerequisite: Supports the DO bit.\n   Test: Send a request to the resolver\
    \ under test for a DNSKEY record\n   that is known to exist in a signed zone,\
    \ such as test.example.com/\n   DNSKEY.  Set the DO bit in the outgoing query.\n\
    \   SUCCESS: A DNS response was received that contains a DNSKEY record in\n  \
    \ the answer section.\n   Note: Some DNSKEY Resource Record Sets (RRsets) are\
    \ large and, if the\n   network path has problems with large answers, this query\
    \ may result\n   in either a false positive or a false negative.  In general,\
    \ the\n   DNSKEY queried for should be small enough to fit into a 1220-byte\n\
    \   answer to avoid a false negative result when TCP is disabled.\n   However,\
    \ querying many zones will result in answers greater than 1220\n   bytes, so DNS\
    \ over TCP MUST be available for DNSSEC use in general.\n"
- title: 3.1.8.  Supports Querying for DS Records
  contents:
  - "3.1.8.  Supports Querying for DS Records\n   Purpose: This tests whether a resolver\
    \ can query for and receive a DS\n   record from a signed zone.\n   Prerequisite:\
    \ Supports the DO bit.\n   Test: Send a request to the resolver under test for\
    \ a DS record that\n   is known to exist in a signed zone, such as test.example.com/DS.\
    \  Set\n   the DO bit in the outgoing query.\n   SUCCESS: A DNS response was received\
    \ that contains a DS record in the\n   answer section.\n"
- title: 3.1.9.  Supports Negative Answers with NSEC Records
  contents:
  - "3.1.9.  Supports Negative Answers with NSEC Records\n   Purpose: This tests whether\
    \ a resolver properly returns NextSECure\n   (NSEC) records for a nonexisting\
    \ domain in a DNSSEC-signed zone.\n   Prerequisite: Supports the DO bit.\n   Test:\
    \ Send a request to the resolver under test for an A record that\n   is known\
    \ to not exist in an NSEC-signed zone, such as\n   nonexistent.test.example.com.\
    \  Set the DO bit in the outgoing query.\n   SUCCESS: A DNS response was received\
    \ that contains an NSEC record.\n   Note: The query issued in this test MUST be\
    \ sent to an NSEC-signed\n   zone.  Getting back appropriate NSEC3 records does\
    \ not indicate a\n   failure, but a bad test.\n"
- title: 3.1.10.  Supports Negative Answers with NSEC3 Records
  contents:
  - "3.1.10.  Supports Negative Answers with NSEC3 Records\n   Purpose: This tests\
    \ whether a resolver properly returns NSEC3 records\n   ([RFC5155]) for a nonexisting\
    \ domain in a DNSSEC-signed zone.\n   Prerequisite: Supports the DO bit.\n   Test:\
    \ Send a request to the resolver under test for an A record that\n   is known\
    \ to be nonexistent in a zone signed using NSEC3, such as\n   nonexistent.nsec3-ns.test.example.com.\
    \  Set the DO bit in the\n   outgoing query.\n   SUCCESS: A DNS response was received\
    \ that contains an NSEC3 record.\n   Bonus: If the AD bit is set, this validator\
    \ supports algorithm 7\n   (RSASHA1-NSEC3-SHA1).\n   Note: The query issued in\
    \ this test MUST be sent to an NSEC3-signed\n   zone.  Getting back appropriate\
    \ NSEC records does not indicate a\n   failure, but a bad test.\n"
- title: 3.1.11.  Supports Queries Where DNAME Records Lead to an Answer
  contents:
  - "3.1.11.  Supports Queries Where DNAME Records Lead to an Answer\n   Purpose:\
    \ This tests whether a resolver can query for an A record in a\n   zone with a\
    \ known DNAME referral for the record's parent.\n   Test: Send a request to the\
    \ resolver under test for an A record that\n   is known to exist in a signed zone\
    \ within a DNAME-referral child\n   zone, such as good-a.dname-good-ns.test.example.com.\n\
    \   SUCCESS: A DNS response was received that contains a DNAME in the\n   answer\
    \ section.  An RRSIG MUST also be received in the answer section\n   that covers\
    \ the DNAME record.\n"
- title: 3.1.12.  Permissive DNSSEC
  contents:
  - "3.1.12.  Permissive DNSSEC\n   Purpose: To see if a validating resolver is ignoring\
    \ DNSSEC\n   validation failures.\n   Prerequisite: Supports the AD bit.\n   Test:\
    \ Ask for data from a broken DNSSEC delegation, such as badsign-\n   a.test.example.com.\n\
    \   SUCCESS: A reply was received with the Rcode set to SERVFAIL.\n"
- title: 3.1.13.  Supports Unknown RRtypes
  contents:
  - "3.1.13.  Supports Unknown RRtypes\n   Purpose: Some DNS Resolvers/gateways only\
    \ support some Resource\n   Record Types (RRtypes).  This causes problems for\
    \ applications that\n   need recently defined types.\n   Prerequisite: Supports\
    \ UDP or TCP.\n   Test: Send a request for a recently defined type or an unknown\
    \ type\n   in the 20000-22000 range, that resolves to a server that will return\n\
    \   an answer for all types, such as alltypes.example.com (a server today\n  \
    \ that supports this is alltypes.res.dnssecready.org).\n   SUCCESS: A DNS response\
    \ was retrieved that contains the type\n   requested in the answer section.\n"
- title: 3.2.  Direct Network Queries
  contents:
  - "3.2.  Direct Network Queries\n   If needed, a Host Validator may need to make\
    \ direct queries to\n   authoritative servers or known Open Recursive Resolvers\
    \ in order to\n   collect data.  To do that, a number of key network features\
    \ MUST be\n   functional.\n"
- title: 3.2.1.  Support for Remote UDP over Port 53
  contents:
  - "3.2.1.  Support for Remote UDP over Port 53\n   Purpose: This tests basic UDP\
    \ functionality to outside the local\n   network.\n   Test: A DNS request is sent\
    \ to a known distant authoritative server\n   for a record known to be within\
    \ that server's authoritative data.\n   Example: send a query to the address of\
    \ ns1.test.example.com for the\n   good-a.test.example.com/A record.\n   SUCCESS:\
    \ A DNS response was received that contains an A record in the\n   answer section.\n\
    \   Note: An implementation can use the local resolvers for determining\n   the\
    \ address of the name server that is authoritative for the given\n   zone.  The\
    \ recursive bit MAY be set for this request, but it does not\n   need to be.\n"
- title: 3.2.2.  Support for Remote UDP with Fragmentation
  contents:
  - "3.2.2.  Support for Remote UDP with Fragmentation\n   Purpose: This tests if\
    \ the local network can receive fragmented UDP\n   answers.\n   Prerequisite:\
    \ Local UDP traffic > 1500 bytes in size is possible.\n   Test: A DNS request\
    \ is sent over UDP to a known distant DNS address\n   asking for a record that\
    \ has an answer larger than 2000 bytes.  For\n   example, send a query for the\
    \ test.example.com/DNSKEY record with the\n   DO bit set in the outgoing query.\n\
    \   SUCCESS: A DNS response was received that contains the large answer.\n   Note:\
    \ A failure in getting large answers over UDP is not a serious\n   problem if\
    \ TCP is working.\n"
- title: 3.2.3.  Support for Outbound TCP over Port 53
  contents:
  - "3.2.3.  Support for Outbound TCP over Port 53\n   Purpose: This tests basic TCP\
    \ functionality to outside the local\n   network.\n   Test: A DNS request is sent\
    \ over TCP to a known distant authoritative\n   server for a record known to be\
    \ within that server's authoritative\n   data.  Example: send a query to the address\
    \ of ns1.test.example.com\n   for the good-a.test.example.com/A record.\n   SUCCESS:\
    \ A DNS response was received that contains an A record in the\n   answer section.\n\
    \   Note: An implementation can use the local resolvers for determining\n   the\
    \ address of the name server that is authoritative for the given\n   zone.  The\
    \ recursive bit MAY be set for this request, but it does not\n   need to be.\n"
- title: 3.3.  Support for DNSKEY and DS Combinations
  contents:
  - "3.3.  Support for DNSKEY and DS Combinations\n   Purpose: This test can check\
    \ what algorithm combinations are\n   supported.\n   Prerequisite: Supports the\
    \ AD bit for Algorithms 5 and/or 8.\n   Test: A DNS request is sent over UDP to\
    \ the resolver under test for a\n   known combination of the DS algorithm number\
    \ (N) and DNSKEY algorithm\n   number (M) of the example form ds-N.alg-M-nsec.test.example.com.\n\
    \   Examples:\n            ds-2.alg-13-nsec.test.example.com TXT\n           \
    \      or\n            ds-4.alg-13-nsec3.test.example.com TXT\n   SUCCESS: A DNS\
    \ response is received with the AD bit set and with a\n   matching record type\
    \ in the answer section.\n   Note: For algorithms 6 and 7, NSEC is not defined;\
    \ thus, a query for\n   alg-M-nsec3 is required.  Similarly, NSEC3 is not defined\
    \ for\n   algorithms 1, 3, and 5.  Furthermore, algorithms 2, 4, 9, and 11 do\n\
    \   not currently have definitions for signed zones.\n"
- title: 4.  Aggregating the Results
  contents:
  - "4.  Aggregating the Results\n   Some conclusions can be drawn from the results\
    \ of the above tests in\n   an \"aggregated\" form.  This section defines some\
    \ labels to assign to\n   a resolver under test given the results of the tests\
    \ run against\n   them.\n"
- title: 4.1.  Resolver Capability Description
  contents:
  - "4.1.  Resolver Capability Description\n   This section will group and label certain\
    \ common results.\n   Resolvers are classified into the following broad behaviors:\n\
    \   Validator:  The resolver passes all DNSSEC tests and had the AD bit\n    \
    \  appropriately set.\n   DNSSEC-Aware:  The resolver passes all DNSSEC tests,\
    \ but it does not\n      appropriately set the AD bit on answers, indicating it\
    \ is not\n      validating.  A Host Validator will function fine using this\n\
    \      resolver as a forwarder.\n   Non-DNSSEC-Capable:  The resolver is not DNSSEC-aware\
    \ and will make\n      it hard for a Host Validator to operate behind it.  It\
    \ MAY be\n      usable to query for data that is in known insecure sections of\
    \ the\n      DNS tree.\n   Not a DNS Resolver:  This is an improperly behaving\
    \ resolver and\n      should not be used at all.\n   While it would be great if\
    \ all resolvers fell cleanly into one of the\n   broad categories above, that\
    \ is not the case.  For that reason, it is\n   necessary to augment the classification\
    \ with a more descriptive\n   result.  This is done by adding the word \"Partial\"\
    \ in front of\n   Validator/DNSSEC-aware classifications, followed by sub-descriptors\n\
    \   of what is not working.\n   Unknown:  Failed the unknown test\n   DNAME: \
    \ Failed the DNAME test\n   NSEC3:  Failed the NSEC3 test\n   TCP:  TCP not available\n\
    \   SlowBig:  UDP is size limited, but TCP fallback works\n   NoBig:  TCP not\
    \ available and UDP is size limited\n   Permissive:  Passes data known to fail\
    \ validation\n"
- title: 5.  Roadblock Avoidance
  contents:
  - "5.  Roadblock Avoidance\n   The goal of this document is to tie the above tests\
    \ and aggregations\n   to avoidance practices; however, the document does not\
    \ specify\n   exactly how to do that.\n   Once we have determined what level of\
    \ support is available in the\n   network, we can determine what must be done\
    \ in order to effectively\n   act as a validating resolver.  This section discusses\
    \ some of the\n   options available given the results from the previous sections.\n\
    \   The general fallback approach can be described by the following\n   sequence:\n\
    \      If the resolver is labeled as \"Validator\" or \"DNSSEC-aware\":\n    \
    \      Send queries through this resolver and perform local\n          validation\
    \ on the results.\n          If validation fails, try the next resolver.\n   \
    \   Else, if the resolver is labeled \"Not a DNS Resolver\" or\n      \"Non-DNSSEC-capable\"\
    :\n          Mark it as unusable and try the next resolver.\n      Else if no\
    \ more resolvers are configured and if direct queries\n      are supported:\n\
    \          1. Try iterating from the Root.\n          2. If the answer is SECURE/BOGUS:\n\
    \             Return the result of the iteration.\n          3. If the answer\
    \ is INSECURE:\n             Re-query \"Non-DNSSEC-capable\" servers and return\n\
    \             answers from them without the AD bit set to the client.\n      \
    \    This will increase the likelihood that split-view unsigned\n          answers\
    \ are found.\n      Else:\n          Return an error code and log a failure.\n\
    \   While attempting resolution through a particular recursive name\n   server\
    \ with a particular transport method that worked, any transport-\n   specific\
    \ parameters MUST be remembered in order to avoid any\n   unnecessary fallback\
    \ attempts.\n   Transport-specific parameters MUST also be remembered for each\n\
    \   authoritative name server that is queried while performing an\n   iterative\
    \ mode lookup.\n   Any transport settings that are remembered for a particular\
    \ name\n   server MUST be periodically refreshed; they should also be refreshed\n\
    \   when an error is encountered as described below.\n   For a stub resolver,\
    \ problems with the name server can manifest\n   themselves under the following\
    \ types of error conditions:\n   o  No Response, error response, or missing DNSSEC\
    \ metadata\n   o  Illegal Response: An illegal response is received, which prevents\n\
    \      the validator from fetching all the necessary records required for\n  \
    \    constructing an authentication chain.  This could result when\n      referral\
    \ loops are encountered, when any of the antecedent zone\n      delegations are\
    \ lame, when aliases are erroneously followed for\n      certain RRtypes (such\
    \ as Start of Authority (SOA), DNSKEYs, or DS\n      records), or when resource\
    \ records for certain types (e.g., DS)\n      are returned from a zone that is\
    \ not authoritative for such\n      records.\n   o  Bogus Response: A Bogus Response\
    \ is received, when the\n      cryptographic assertions in the authentication\
    \ chain do not\n      validate properly.\n   For each of the above error conditions,\
    \ a validator MAY adopt the\n   following dynamic fallback technique, preferring\
    \ a particular\n   approach if it is known to work for a given name server or\
    \ zone from\n   previous attempts.\n   o  No response, error response, or missing\
    \ DNSSEC metadata:\n      *  Retry with different EDNS0 sizes (4096, 1492, or\
    \ None).\n      *  Retry with TCP only.\n      *  Perform an iterative query starting\
    \ from the Root if the\n         previous error was returned from a lookup that\
    \ had recursion\n         enabled.\n      *  Retry using an alternative transport\
    \ method, if this\n         alternative method is known (configured) to be supported\
    \ by the\n         name server in question.\n   o  Illegal Response\n      * \
    \ Perform an iterative query starting from the Root if the\n         previous\
    \ error was returned from a lookup that had recursion\n         enabled.\n   \
    \   *  Check if any of the antecedent zones up to the closest\n         configured\
    \ trust anchor are Insecure.\n   o  Bogus Response\n      *  Perform an iterative\
    \ query starting from the Root if the\n         previous error was returned from\
    \ a lookup that had recursion\n         enabled.\n   For each fallback technique,\
    \ attempts to reach multiple potential\n   name servers should be skewed such\
    \ that the next name server is tried\n   when the previous one returns an error\
    \ or a timeout is reached.\n   The validator SHOULD remember, in its zone-specific\
    \ fallback cache,\n   any broken behavior identified for a particular zone for\
    \ a duration\n   of that zone's SOA-negative TTL.\n   The validator MAY place\
    \ name servers that exhibit broken behavior\n   into a blacklist and bypass these\
    \ name servers for all zones that\n   they are authoritative for.  The validator\
    \ MUST time out entries in\n   this name server blacklist periodically, where\
    \ this interval could be\n   set to be the same as the DNSSEC BAD cache default\
    \ TTL.\n"
- title: 5.1.  Partial Resolver Usage
  contents:
  - "5.1.  Partial Resolver Usage\n   It may be possible to use Non-DNSSEC-Capable\
    \ caching resolvers in\n   careful ways if maximum optimization is desired.  This\
    \ section\n   describes some of the advanced techniques that could be implemented\n\
    \   to use a resolver in at least a minimal way.  Most of the time, this\n   would\
    \ be unnecessary; the exception being the case where none of the\n   resolvers\
    \ are fully compliant and, thus, the choice would be to use\n   them at least\
    \ minimally or not at all (and no caching benefits would\n   be available).\n"
- title: 5.1.1.  Known Insecure Lookups
  contents:
  - "5.1.1.  Known Insecure Lookups\n   If a resolver is Non-DNSSEC-Capable but a\
    \ section of the DNS tree has\n   been determined to be Insecure [RFC4035], then\
    \ queries to this\n   section of the tree MAY be sent through the Non-DNSSEC-Capable\n\
    \   caching resolver.\n"
- title: 5.1.2.  Partial NSEC/NSEC3 Support
  contents:
  - "5.1.2.  Partial NSEC/NSEC3 Support\n   Resolvers that understand DNSSEC generally,\
    \ and understand NSEC but\n   not NSEC3, are partially usable.  These resolvers\
    \ generally also lack\n   support for unknown types, rendering them mostly useless\
    \ and to be\n   avoided.\n"
- title: 6.  Start-Up and Network Connectivity Issues
  contents:
  - "6.  Start-Up and Network Connectivity Issues\n   A number of scenarios will produce\
    \ either short-term or long-term\n   connectivity issues with respect to DNSSEC\
    \ validation.  Consider the\n   following cases:\n      Time Synchronization:\
    \ Time synchronization problems can occur when\n      a device has been off for\
    \ a period of time and the clock is no\n      longer in close synchronization\
    \ with \"real time\" or when a device\n      always has the clock set to the same\
    \ time during start-up.  This\n      will cause problems when the device needs\
    \ to resolve its source of\n      time synchronization, such as \"ntp.example.com\"\
    .\n      Changing Network Properties: A newly established network\n      connection\
    \ may change state shortly after an HTTP-based paywall\n      authentication system\
    \ has been used.  This is especially common in\n      hotel, airport, and coffee-shop\
    \ networks where DNSSEC, validation,\n      and even DNS are not functional until\
    \ the user proceeds through a\n      series of forced web pages used to enable\
    \ their network.  The\n      tests in Section 3 will produce very different results\
    \ before and\n      after the network authorization has succeeded.  APIs exist\
    \ on many\n      operating systems to detect initial network device status changes,\n\
    \      such as right after DHCP has finished, but few (none?) exist to\n     \
    \ detect that authentication through a paywall has succeeded.\n   There are only\
    \ two choices when situations like this happen:\n      Continue to perform DNSSEC\
    \ processing, which will likely result in\n      all DNS requests failing.  This\
    \ is the most secure route, but\n      causes the most operational grief for users.\n\
    \      Turn off DNSSEC support until the network proves to be usable.\n      This\
    \ allows the user to continue using the network, at the cost of\n      security.\
    \  It also allows for a denial-of-service attack if a man-\n      in-the-middle\
    \ can convince a device that DNSSEC is impossible.\n"
- title: 6.1.  What to Do
  contents:
  - "6.1.  What to Do\n   If the Host Validator detects that DNSSEC resolution is\
    \ not possible,\n   it SHOULD log the event and/or SHOULD report an error to the\
    \ user.\n   In the case where there is no user, no reporting can be performed;\n\
    \   thus, the device MAY have a policy of action, like continue or fail.\n   Until\
    \ middleboxes allow DNSSEC-protected information to traverse them\n   consistently,\
    \ software implementations may need to offer this choice\n   to let users pick\
    \ the security level they require.  Note that\n   continuing without DNSSEC protection\
    \ in the absence of a notification\n   or report could lead to situations where\
    \ users assume a level of\n   security that does not exist.\n"
- title: 7.  Quick Test
  contents:
  - "7.  Quick Test\n   The quick tests defined below make the assumption that the\
    \ questions\n   to be asked are of a real resolver; and the only real question\
    \ is:\n   \"How complete is the DNSSEC support?\".  This quick test has been\n\
    \   implemented in a few programs developed at IETF hackathons at IETF 93\n  \
    \ and IETF 94.  The programs use a common grading method.  For each\n   question\
    \ that returns an expected answer, the resolver gets a point.\n   If the AD bit\
    \ is set as expected, the resolver gets a second point.\n"
- title: 7.1.  Test Negative Answers Algorithm 5
  contents:
  - "7.1.  Test Negative Answers Algorithm 5\n   Query: realy-doesnotexist.test.example.com.\
    \  A\n   Answer: RCODE= NXDOMAIN, Empty Answer, Authority: NSEC-proof\n"
- title: 7.2.  Test Algorithm 8
  contents:
  - "7.2.  Test Algorithm 8\n   Query: alg-8-nsec3.test.example.com.  SOA\n   Answer:\
    \ RCODE= 0, Answer: SOA record\n"
- title: 7.3.  Test Algorithm 13
  contents:
  - "7.3.  Test Algorithm 13\n   Query: alg-13-nsec.test.example.com.  SOA\n   Answer:\
    \ RCODE= 0, Answer: SOA record\n"
- title: 7.4.  Fails When DNSSEC Does Not Validate
  contents:
  - "7.4.  Fails When DNSSEC Does Not Validate\n   Query: dnssec-failed.test.example.com.\
    \  SOA\n   Answer: RCODE= SERVFAIL, empty answer, and authority, AD=0\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document discusses problems that may occur\
    \ while deploying the\n   DNSSEC protocol.  It describes what may be possible\
    \ to help detect\n   and mitigate these problems.  Following the outlined suggestions\
    \ will\n   result in a more secure DNSSEC-operational environment than if DNSSEC\n\
    \   was simply disabled.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC4786]  Abley, J. and K. Lindqvist, \"Operation of Anycast\n          \
    \    Services\", BCP 126, RFC 4786, DOI 10.17487/RFC4786,\n              December\
    \ 2006, <http://www.rfc-editor.org/info/rfc4786>.\n   [RFC5155]  Laurie, B., Sisson,\
    \ G., Arends, R., and D. Blacka, \"DNS\n              Security (DNSSEC) Hashed\
    \ Authenticated Denial of\n              Existence\", RFC 5155, DOI 10.17487/RFC5155,\
    \ March 2008,\n              <http://www.rfc-editor.org/info/rfc5155>.\n   [RFC5625]\
    \  Bellis, R., \"DNS Proxy Implementation Guidelines\",\n              BCP 152,\
    \ RFC 5625, DOI 10.17487/RFC5625, August 2009,\n              <http://www.rfc-editor.org/info/rfc5625>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We thank the IESG and DNSOP working group members for their\
    \ extensive\n   comments and suggestions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Wes Hardaker\n   USC/ISI\n   P.O. Box 382\n   Davis, CA\
    \  95617\n   United States of America\n   Email: ietf@hardakers.net\n   Olafur\
    \ Gudmundsson\n   CloudFlare\n   San Francisco, CA  94107\n   United States of\
    \ America\n   Email: olafur+ietf@cloudflare.com\n   Suresh Krishnaswamy\n   Parsons\n\
    \   7110 Samuel Morse Dr\n   Columbia, MD  21046\n   United States of America\n\
    \   Email: suresh@tislabs.com\n"
