- contents:
  - '     The JavaScript Object Notation (JSON) Data Interchange Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   JavaScript Object Notation (JSON) is a lightweight, text-based,\n
    \  language-independent data interchange format.  It was derived from\n   the
    ECMAScript Programming Language Standard.  JSON defines a small\n   set of formatting
    rules for the portable representation of structured\n   data.\n   This document
    removes inconsistencies with other specifications of\n   JSON, repairs specification
    errors, and offers experience-based\n   interoperability guidance.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8259.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   4\n     1.2.  Specifications of JSON  . . . . . . . . . . . . . . . .
    .   4\n     1.3.  Introduction to This Revision . . . . . . . . . . . . . .   5\n
    \  2.  JSON Grammar  . . . . . . . . . . . . . . . . . . . . . . . .   5\n   3.
    \ Values  . . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n   4.  Objects
    . . . . . . . . . . . . . . . . . . . . . . . . . . .   6\n   5.  Arrays  . .
    . . . . . . . . . . . . . . . . . . . . . . . . .   7\n   6.  Numbers . . . .
    . . . . . . . . . . . . . . . . . . . . . . .   7\n   7.  Strings . . . . . .
    . . . . . . . . . . . . . . . . . . . . .   8\n   8.  String and Character Issues
    . . . . . . . . . . . . . . . . .   9\n     8.1.  Character Encoding  . . . .
    . . . . . . . . . . . . . . .   9\n     8.2.  Unicode Characters  . . . . . .
    . . . . . . . . . . . . .  10\n     8.3.  String Comparison . . . . . . . . .
    . . . . . . . . . . .  10\n   9.  Parsers . . . . . . . . . . . . . . . . . .
    . . . . . . . . .  10\n   10. Generators  . . . . . . . . . . . . . . . . . .
    . . . . . . .  10\n   11. IANA Considerations . . . . . . . . . . . . . . . .
    . . . . .  11\n   12. Security Considerations . . . . . . . . . . . . . . . .
    . . .  12\n   13. Examples  . . . . . . . . . . . . . . . . . . . . . . . . .
    .  12\n   14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  14\n
    \    14.1.  Normative References . . . . . . . . . . . . . . . . . .  14\n     14.2.
    \ Informative References . . . . . . . . . . . . . . . . .  14\n   Appendix A.
    \ Changes from RFC 7159  . . . . . . . . . . . . . . .  16\n   Contributors  .
    . . . . . . . . . . . . . . . . . . . . . . . . .  16\n   Author's Address  .
    . . . . . . . . . . . . . . . . . . . . . . .  16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   JavaScript Object Notation (JSON) is a text format for the\n
    \  serialization of structured data.  It is derived from the object\n   literals
    of JavaScript, as defined in the ECMAScript Programming\n   Language Standard,
    Third Edition [ECMA-262].\n   JSON can represent four primitive types (strings,
    numbers, booleans,\n   and null) and two structured types (objects and arrays).\n
    \  A string is a sequence of zero or more Unicode characters [UNICODE].\n   Note
    that this citation references the latest version of Unicode\n   rather than a
    specific release.  It is not expected that future\n   changes in the Unicode specification
    will impact the syntax of JSON.\n   An object is an unordered collection of zero
    or more name/value\n   pairs, where a name is a string and a value is a string,
    number,\n   boolean, null, object, or array.\n   An array is an ordered sequence
    of zero or more values.\n   The terms \"object\" and \"array\" come from the conventions
    of\n   JavaScript.\n   JSON's design goals were for it to be minimal, portable,
    textual, and\n   a subset of JavaScript.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in BCP\n   14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n   The
      grammatical rules in this document are to be interpreted as\n   described in
      [RFC5234].\n"
    title: 1.1.  Conventions Used in This Document
  - contents:
    - "1.2.  Specifications of JSON\n   This document replaces [RFC7159].  [RFC7159]
      obsoleted [RFC4627],\n   which originally described JSON and registered the
      media type\n   \"application/json\".\n   JSON is also described in [ECMA-404].\n
      \  The reference to ECMA-404 in the previous sentence is normative, not\n   with
      the usual meaning that implementors need to consult it in order\n   to understand
      this document, but to emphasize that there are no\n   inconsistencies in the
      definition of the term \"JSON text\" in any of\n   its specifications.  Note,
      however, that ECMA-404 allows several\n   practices that this specification
      recommends avoiding in the\n   interests of maximal interoperability.\n   The
      intent is that the grammar is the same between the two documents,\n   although
      different descriptions are used.  If there is a difference\n   found between
      them, ECMA and the IETF will work together to update\n   both documents.\n   If
      an error is found with either document, the other should be\n   examined to
      see if it has a similar error; if it does, it should be\n   fixed, if possible.\n
      \  If either document is changed in the future, ECMA and the IETF will\n   work
      together to ensure that the two documents stay aligned through\n   the change.\n"
    title: 1.2.  Specifications of JSON
  - contents:
    - "1.3.  Introduction to This Revision\n   In the years since the publication
      of RFC 4627, JSON has found very\n   wide use.  This experience has revealed
      certain patterns that, while\n   allowed by its specifications, have caused
      interoperability problems.\n   Also, a small number of errata have been reported
      regarding RFC 4627\n   (see RFC Errata IDs 607 [Err607] and 3607 [Err3607])
      and regarding\n   RFC 7159 (see RFC Errata IDs 3915 [Err3915], 4264 [Err4264],
      4336\n   [Err4336], and 4388 [Err4388]).\n   This document's goal is to apply
      the errata, remove inconsistencies\n   with other specifications of JSON, and
      highlight practices that can\n   lead to interoperability problems.\n"
    title: 1.3.  Introduction to This Revision
  title: 1.  Introduction
- contents:
  - "2.  JSON Grammar\n   A JSON text is a sequence of tokens.  The set of tokens
    includes six\n   structural characters, strings, numbers, and three literal names.\n
    \  A JSON text is a serialized value.  Note that certain previous\n   specifications
    of JSON constrained a JSON text to be an object or an\n   array.  Implementations
    that generate only objects or arrays where a\n   JSON text is called for will
    be interoperable in the sense that all\n   implementations will accept these as
    conforming JSON texts.\n      JSON-text = ws value ws\n   These are the six structural
    characters:\n      begin-array     = ws %x5B ws  ; [ left square bracket\n      begin-object
    \   = ws %x7B ws  ; { left curly bracket\n      end-array       = ws %x5D ws  ;
    ] right square bracket\n      end-object      = ws %x7D ws  ; } right curly bracket\n
    \     name-separator  = ws %x3A ws  ; : colon\n      value-separator = ws %x2C
    ws  ; , comma\n   Insignificant whitespace is allowed before or after any of the
    six\n   structural characters.\n      ws = *(\n              %x20 /              ;
    Space\n              %x09 /              ; Horizontal tab\n              %x0A
    /              ; Line feed or New line\n              %x0D )              ; Carriage
    return\n"
  title: 2.  JSON Grammar
- contents:
  - "3.  Values\n   A JSON value MUST be an object, array, number, or string, or one
    of\n   the following three literal names:\n      false\n      null\n      true\n
    \  The literal names MUST be lowercase.  No other literal names are\n   allowed.\n
    \     value = false / null / true / object / array / number / string\n      false
    = %x66.61.6c.73.65   ; false\n      null  = %x6e.75.6c.6c      ; null\n      true
    \ = %x74.72.75.65      ; true\n"
  title: 3.  Values
- contents:
  - "4.  Objects\n   An object structure is represented as a pair of curly brackets\n
    \  surrounding zero or more name/value pairs (or members).  A name is a\n   string.
    \ A single colon comes after each name, separating the name\n   from the value.
    \ A single comma separates a value from a following\n   name.  The names within
    an object SHOULD be unique.\n      object = begin-object [ member *( value-separator
    member ) ]\n               end-object\n      member = string name-separator value\n
    \  An object whose names are all unique is interoperable in the sense\n   that
    all software implementations receiving that object will agree on\n   the name-value
    mappings.  When the names within an object are not\n   unique, the behavior of
    software that receives such an object is\n   unpredictable.  Many implementations
    report the last name/value pair\n   only.  Other implementations report an error
    or fail to parse the\n   object, and some implementations report all of the name/value
    pairs,\n   including duplicates.\n   JSON parsing libraries have been observed
    to differ as to whether or\n   not they make the ordering of object members visible
    to calling\n   software.  Implementations whose behavior does not depend on member\n
    \  ordering will be interoperable in the sense that they will not be\n   affected
    by these differences.\n"
  title: 4.  Objects
- contents:
  - "5.  Arrays\n   An array structure is represented as square brackets surrounding
    zero\n   or more values (or elements).  Elements are separated by commas.\n   array
    = begin-array [ value *( value-separator value ) ] end-array\n   There is no requirement
    that the values in an array be of the same\n   type.\n"
  title: 5.  Arrays
- contents:
  - "6.  Numbers\n   The representation of numbers is similar to that used in most\n
    \  programming languages.  A number is represented in base 10 using\n   decimal
    digits.  It contains an integer component that may be\n   prefixed with an optional
    minus sign, which may be followed by a\n   fraction part and/or an exponent part.
    \ Leading zeros are not\n   allowed.\n   A fraction part is a decimal point followed
    by one or more digits.\n   An exponent part begins with the letter E in uppercase
    or lowercase,\n   which may be followed by a plus or minus sign.  The E and optional\n
    \  sign are followed by one or more digits.\n   Numeric values that cannot be
    represented in the grammar below (such\n   as Infinity and NaN) are not permitted.\n
    \     number = [ minus ] int [ frac ] [ exp ]\n      decimal-point = %x2E       ;
    .\n      digit1-9 = %x31-39         ; 1-9\n      e = %x65 / %x45            ;
    e E\n      exp = e [ minus / plus ] 1*DIGIT\n      frac = decimal-point 1*DIGIT\n
    \     int = zero / ( digit1-9 *DIGIT )\n      minus = %x2D               ; -\n
    \     plus = %x2B                ; +\n      zero = %x30                ; 0\n   This
    specification allows implementations to set limits on the range\n   and precision
    of numbers accepted.  Since software that implements\n   IEEE 754 binary64 (double
    precision) numbers [IEEE754] is generally\n   available and widely used, good
    interoperability can be achieved by\n   implementations that expect no more precision
    or range than these\n   provide, in the sense that implementations will approximate
    JSON\n   numbers within the expected precision.  A JSON number such as 1E400\n
    \  or 3.141592653589793238462643383279 may indicate potential\n   interoperability
    problems, since it suggests that the software that\n   created it expects receiving
    software to have greater capabilities\n   for numeric magnitude and precision
    than is widely available.\n   Note that when such software is used, numbers that
    are integers and\n   are in the range [-(2**53)+1, (2**53)-1] are interoperable
    in the\n   sense that implementations will agree exactly on their numeric\n   values.\n"
  title: 6.  Numbers
- contents:
  - "7.  Strings\n   The representation of strings is similar to conventions used
    in the C\n   family of programming languages.  A string begins and ends with\n
    \  quotation marks.  All Unicode characters may be placed within the\n   quotation
    marks, except for the characters that MUST be escaped:\n   quotation mark, reverse
    solidus, and the control characters (U+0000\n   through U+001F).\n   Any character
    may be escaped.  If the character is in the Basic\n   Multilingual Plane (U+0000
    through U+FFFF), then it may be\n   represented as a six-character sequence: a
    reverse solidus, followed\n   by the lowercase letter u, followed by four hexadecimal
    digits that\n   encode the character's code point.  The hexadecimal letters A
    through\n   F can be uppercase or lowercase.  So, for example, a string\n   containing
    only a single reverse solidus character may be represented\n   as \"\\u005C\".\n
    \  Alternatively, there are two-character sequence escape\n   representations
    of some popular characters.  So, for example, a\n   string containing only a single
    reverse solidus character may be\n   represented more compactly as \"\\\\\".\n
    \  To escape an extended character that is not in the Basic Multilingual\n   Plane,
    the character is represented as a 12-character sequence,\n   encoding the UTF-16
    surrogate pair.  So, for example, a string\n   containing only the G clef character
    (U+1D11E) may be represented as\n   \"\\uD834\\uDD1E\".\n      string = quotation-mark
    *char quotation-mark\n      char = unescaped /\n          escape (\n              %x22
    /          ; \"    quotation mark  U+0022\n              %x5C /          ; \\
    \   reverse solidus U+005C\n              %x2F /          ; /    solidus         U+002F\n
    \             %x62 /          ; b    backspace       U+0008\n              %x66
    /          ; f    form feed       U+000C\n              %x6E /          ; n    line
    feed       U+000A\n              %x72 /          ; r    carriage return U+000D\n
    \             %x74 /          ; t    tab             U+0009\n              %x75
    4HEXDIG )  ; uXXXX                U+XXXX\n      escape = %x5C              ; \\\n
    \     quotation-mark = %x22      ; \"\n      unescaped = %x20-21 / %x23-5B / %x5D-10FFFF\n"
  title: 7.  Strings
- contents:
  - '8.  String and Character Issues

    '
  - contents:
    - "8.1.  Character Encoding\n   JSON text exchanged between systems that are not
      part of a closed\n   ecosystem MUST be encoded using UTF-8 [RFC3629].\n   Previous
      specifications of JSON have not required the use of UTF-8\n   when transmitting
      JSON text.  However, the vast majority of JSON-\n   based software implementations
      have chosen to use the UTF-8 encoding,\n   to the extent that it is the only
      encoding that achieves\n   interoperability.\n   Implementations MUST NOT add
      a byte order mark (U+FEFF) to the\n   beginning of a networked-transmitted JSON
      text.  In the interests of\n   interoperability, implementations that parse
      JSON texts MAY ignore\n   the presence of a byte order mark rather than treating
      it as an\n   error.\n"
    title: 8.1.  Character Encoding
  - contents:
    - "8.2.  Unicode Characters\n   When all the strings represented in a JSON text
      are composed entirely\n   of Unicode characters [UNICODE] (however escaped),
      then that JSON\n   text is interoperable in the sense that all software implementations\n
      \  that parse it will agree on the contents of names and of string\n   values
      in objects and arrays.\n   However, the ABNF in this specification allows member
      names and\n   string values to contain bit sequences that cannot encode Unicode\n
      \  characters; for example, \"\\uDEAD\" (a single unpaired UTF-16\n   surrogate).
      \ Instances of this have been observed, for example, when\n   a library truncates
      a UTF-16 string without checking whether the\n   truncation split a surrogate
      pair.  The behavior of software that\n   receives JSON texts containing such
      values is unpredictable; for\n   example, implementations might return different
      values for the length\n   of a string value or even suffer fatal runtime exceptions.\n"
    title: 8.2.  Unicode Characters
  - contents:
    - "8.3.  String Comparison\n   Software implementations are typically required
      to test names of\n   object members for equality.  Implementations that transform
      the\n   textual representation into sequences of Unicode code units and then\n
      \  perform the comparison numerically, code unit by code unit, are\n   interoperable
      in the sense that implementations will agree in all\n   cases on equality or
      inequality of two strings.  For example,\n   implementations that compare strings
      with escaped characters\n   unconverted may incorrectly find that \"a\\\\b\"
      and \"a\\u005Cb\" are not\n   equal.\n"
    title: 8.3.  String Comparison
  title: 8.  String and Character Issues
- contents:
  - "9.  Parsers\n   A JSON parser transforms a JSON text into another representation.
    \ A\n   JSON parser MUST accept all texts that conform to the JSON grammar.\n
    \  A JSON parser MAY accept non-JSON forms or extensions.\n   An implementation
    may set limits on the size of texts that it\n   accepts.  An implementation may
    set limits on the maximum depth of\n   nesting.  An implementation may set limits
    on the range and precision\n   of numbers.  An implementation may set limits on
    the length and\n   character contents of strings.\n"
  title: 9.  Parsers
- contents:
  - "10.  Generators\n   A JSON generator produces JSON text.  The resulting text
    MUST\n   strictly conform to the JSON grammar.\n"
  title: 10.  Generators
- contents:
  - "11.  IANA Considerations\n   The media type for JSON text is application/json.\n
    \  Type name:  application\n   Subtype name:  json\n   Required parameters:  n/a\n
    \  Optional parameters:  n/a\n   Encoding considerations:  binary\n   Security
    considerations:  See RFC 8259, Section 12\n   Interoperability considerations:
    \ Described in RFC 8259\n   Published specification:  RFC 8259\n   Applications
    that use this media type:\n      JSON has been used to exchange data between applications
    written\n      in all of these programming languages: ActionScript, C, C#,\n      Clojure,
    ColdFusion, Common Lisp, E, Erlang, Go, Java, JavaScript,\n      Lua, Objective
    CAML, Perl, PHP, Python, Rebol, Ruby, Scala, and\n      Scheme.\n   Additional
    information:\n      Magic number(s): n/a\n      File extension(s): .json\n      Macintosh
    file type code(s): TEXT\n   Person & email address to contact for further information:\n
    \     IESG\n      <iesg@ietf.org>\n   Intended usage:  COMMON\n   Restrictions
    on usage:  none\n   Author:\n      Douglas Crockford\n      <douglas@crockford.com>\n
    \  Change controller:\n      IESG\n      <iesg@ietf.org>\n   Note:  No \"charset\"
    parameter is defined for this registration.\n      Adding one really has no effect
    on compliant recipients.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   Generally, there are security issues with scripting
    languages.  JSON\n   is a subset of JavaScript but excludes assignment and invocation.\n
    \  Since JSON's syntax is borrowed from JavaScript, it is possible to\n   use
    that language's \"eval()\" function to parse most JSON texts (but\n   not all;
    certain characters such as U+2028 LINE SEPARATOR and U+2029\n   PARAGRAPH SEPARATOR
    are legal in JSON but not JavaScript).  This\n   generally constitutes an unacceptable
    security risk, since the text\n   could contain executable code along with data
    declarations.  The same\n   consideration applies to the use of eval()-like functions
    in any\n   other programming language in which JSON texts conform to that\n   language's
    syntax.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Examples\n   This is a JSON object:\n      {\n        \"Image\": {\n            \"Width\":
    \ 800,\n            \"Height\": 600,\n            \"Title\":  \"View from 15th
    Floor\",\n            \"Thumbnail\": {\n                \"Url\":    \"http://www.example.com/image/481989943\",\n
    \               \"Height\": 125,\n                \"Width\":  100\n            },\n
    \           \"Animated\" : false,\n            \"IDs\": [116, 943, 234, 38793]\n
    \         }\n      }\n   Its Image member is an object whose Thumbnail member
    is an object and\n   whose IDs member is an array of numbers.\n   This is a JSON
    array containing two objects:\n      [\n        {\n           \"precision\": \"zip\",\n
    \          \"Latitude\":  37.7668,\n           \"Longitude\": -122.3959,\n           \"Address\":
    \  \"\",\n           \"City\":      \"SAN FRANCISCO\",\n           \"State\":
    \    \"CA\",\n           \"Zip\":       \"94107\",\n           \"Country\":   \"US\"\n
    \       },\n        {\n           \"precision\": \"zip\",\n           \"Latitude\":
    \ 37.371991,\n           \"Longitude\": -122.026020,\n           \"Address\":
    \  \"\",\n           \"City\":      \"SUNNYVALE\",\n           \"State\":     \"CA\",\n
    \          \"Zip\":       \"94085\",\n           \"Country\":   \"US\"\n        }\n
    \     ]\n   Here are three small JSON texts containing only values:\n   \"Hello
    world!\"\n   42\n   true\n"
  title: 13.  Examples
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [ECMA-404] Ecma International, \"The JSON Data
      Interchange Format\",\n              Standard ECMA-404,\n              <http://www.ecma-international.org/publications/\n
      \             standards/Ecma-404.htm>.\n   [IEEE754]  IEEE, \"IEEE Standard
      for Floating-Point Arithmetic\",\n              IEEE 754.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [UNICODE]  The Unicode Consortium,
      \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [ECMA-262] Ecma International, \"ECMAScript
      Language Specification\",\n              Standard ECMA-262, Third Edition, December
      1999,\n              <http://www.ecma-international.org/publications/files/\n
      \             ECMA-ST-ARCH/\n              ECMA-262,%203rd%20edition,%20December%201999.pdf>.\n
      \  [Err3607]  RFC Errata, Erratum ID 3607, RFC 4627,\n              <https://www.rfc-editor.org/errata/eid3607>.\n
      \  [Err3915]  RFC Errata, Erratum ID 3915, RFC 7159,\n              <https://www.rfc-editor.org/errata/eid3915>.\n
      \  [Err4264]  RFC Errata, Erratum ID 4264, RFC 7159,\n              <https://www.rfc-editor.org/errata/eid4264>.\n
      \  [Err4336]  RFC Errata, Erratum ID 4336, RFC 7159,\n              <https://www.rfc-editor.org/errata/eid4336>.\n
      \  [Err4388]  RFC Errata, Erratum ID 4388, RFC 7159,\n              <https://www.rfc-editor.org/errata/eid4388>.\n
      \  [Err607]   RFC Errata, Erratum ID 607, RFC 4627,\n              <https://www.rfc-editor.org/errata/eid607>.\n
      \  [RFC4627]  Crockford, D., \"The application/json Media Type for\n              JavaScript
      Object Notation (JSON)\", RFC 4627,\n              DOI 10.17487/RFC4627, July
      2006,\n              <https://www.rfc-editor.org/info/rfc4627>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <https://www.rfc-editor.org/info/rfc7159>.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  Changes from RFC 7159\n   This section lists changes between this
    document and the text in\n   RFC 7159.\n   o  Section 1.2 has been updated to
    reflect the removal of a JSON\n      specification from ECMA-262, to make ECMA-404
    a normative\n      reference, and to explain the particular meaning of \"normative\".\n
    \  o  Section 1.3 has been updated to reflect errata filed against\n      RFC
    7159, not RFC 4627.\n   o  Section 8.1 was changed to require the use of UTF-8
    when\n      transmitted over a network.\n   o  Section 12 has been updated to
    increase the precision of the\n      description of the security risk that follows
    from using the\n      ECMAScript \"eval()\" function.\n   o  Section 14.1 has
    been updated to include ECMA-404 as a normative\n      reference.\n   o  Section
    14.2 has been updated to remove ECMA-404, update the\n      version of ECMA-262,
    and refresh the errata list.\n"
  title: Appendix A.  Changes from RFC 7159
- contents:
  - "Contributors\n   RFC 4627 was written by Douglas Crockford.  This document was\n
    \  constructed by making a relatively small number of changes to that\n   document;
    thus, the vast majority of the text here is his.\n"
  title: Contributors
- contents:
  - "Author's Address\n   Tim Bray (editor)\n   Textuality\n   Email: tbray@textuality.com\n"
  title: Author's Address
