- title: __initial_text__
  contents:
  - '                  A YANG Data Model for IP Management

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a YANG data model for management of IP\n \
    \  implementations.  The data model includes configuration data and\n   state\
    \ data.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7277.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................2\n  \
    \    1.2. Tree Diagrams ..............................................3\n   2.\
    \ IP Data Model ...................................................3\n   3. Relationship\
    \ to the IP-MIB ......................................6\n   4. IP Management YANG\
    \ Module .......................................8\n   5. IANA Considerations ............................................24\n\
    \   6. Security Considerations ........................................24\n  \
    \ 7. Acknowledgments ................................................25\n   8.\
    \ References .....................................................25\n      8.1.\
    \ Normative References ......................................25\n      8.2. Informative\
    \ References ....................................26\n   Appendix A. Example: NETCONF\
    \ <get> Reply ..........................28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a YANG [RFC6020] data model for management\
    \ of\n   IP implementations.\n   The data model covers configuration of per-interface\
    \ IPv4 and IPv6\n   parameters, and mappings of IP addresses to link-layer addresses.\
    \  It\n   also provides information about which IP addresses are operationally\n\
    \   used, and which link-layer mappings exist.  Per-interface parameters\n   are\
    \ added through augmentation of the interface data model defined in\n   [RFC7223].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The following terms are defined in [RFC6241] and are not\
    \ redefined\n   here:\n   o  client\n   o  configuration data\n   o  server\n\
    \   o  state data\n   The following terms are defined in [RFC6020] and are not\
    \ redefined\n   here:\n   o  augment\n   o  data model\n   o  data node\n   The\
    \ terminology for describing YANG data models is found in\n   [RFC6020].\n"
- title: 1.2.  Tree Diagrams
  contents:
  - "1.2.  Tree Diagrams\n   A simplified graphical representation of the data model\
    \ is used in\n   this document.  The meaning of the symbols in these diagrams\
    \ is as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n   o\
    \  Abbreviations before data node names: \"rw\" means configuration\n      data\
    \ (read-write), and \"ro\" means state data (read-only).\n   o  Symbols after\
    \ data node names: \"?\" means an optional node, \"!\"\n      means a presence\
    \ container, and \"*\" denotes a list and leaf-list.\n   o  Parentheses enclose\
    \ choice and case nodes, and case nodes are also\n      marked with a colon (\"\
    :\").\n   o  Ellipsis (\"...\") stands for contents of subtrees that are not\n\
    \      shown.\n"
- title: 2.  IP Data Model
  contents:
  - "2.  IP Data Model\n   This document defines the YANG module \"ietf-ip\", which\
    \ augments the\n   \"interface\" and \"interface-state\" lists defined in the\n\
    \   \"ietf-interfaces\" module [RFC7223] with IP-specific data nodes, and\n  \
    \ also adds IP-specific state data.\n   The data model has the following structure\
    \ for IP configuration per\n   interface:\n     +--rw if:interfaces\n        +--rw\
    \ if:interface* [name]\n           ...\n           +--rw ipv4!\n           | \
    \ +--rw enabled?            boolean\n           |  +--rw forwarding?         boolean\n\
    \           |  +--rw mtu?                uint16\n           |  +--rw address*\
    \ [ip]\n           |  |  +--rw ip               inet:ipv4-address-no-zone\n  \
    \         |  |  +--rw (subnet)\n           |  |     +--:(prefix-length)\n    \
    \       |  |     |  +--rw ip:prefix-length?   uint8\n           |  |     +--:(netmask)\n\
    \           |  |        +--rw ip:netmask?         yang:dotted-quad\n         \
    \  |  +--rw neighbor* [ip]\n           |     +--rw ip                    inet:ipv4-address-no-zone\n\
    \           |     +--rw link-layer-address    yang:phys-address\n           +--rw\
    \ ipv6!\n              +--rw enabled?            boolean\n              +--rw\
    \ forwarding?         boolean\n              +--rw mtu?                uint32\n\
    \              +--rw address* [ip]\n              |  +--rw ip               inet:ipv6-address-no-zone\n\
    \              |  +--rw prefix-length    uint8\n              +--rw neighbor*\
    \ [ip]\n              |  +--rw ip                    inet:ipv6-address-no-zone\n\
    \              |  +--rw link-layer-address    yang:phys-address\n            \
    \  +--rw dup-addr-detect-transmits?   uint32\n              +--rw autoconf\n \
    \                +--rw create-global-addresses?        boolean\n             \
    \    +--rw create-temporary-addresses?     boolean\n                 +--rw temporary-valid-lifetime?\
    \       uint32\n                 +--rw temporary-preferred-lifetime?   uint32\n\
    \   The data model defines two configuration containers per interface --\n   \"\
    ipv4\" and \"ipv6\", representing the IPv4 and IPv6 address families.\n   In each\
    \ container, there is a leaf \"enabled\" that controls whether or\n   not the\
    \ address family is enabled on that interface, and a leaf\n   \"forwarding\" that\
    \ controls whether or not IP packet forwarding for\n   the address family is enabled\
    \ on the interface.  In each container,\n   there is also a list of configured\
    \ addresses, and a list of\n   configured mappings from IP addresses to link-layer\
    \ addresses.\n   The data model has the following structure for IP state per\n\
    \   interface:\n     +--ro if:interfaces-state\n        +--ro if:interface* [name]\n\
    \           ...\n           +--ro ipv4!\n           |  +--ro forwarding?   boolean\n\
    \           |  +--ro mtu?          uint16\n           |  +--ro address* [ip]\n\
    \           |  |  +--ro ip               inet:ipv4-address-no-zone\n         \
    \  |  |  +--ro (subnet)?\n           |  |  |  +--:(prefix-length)\n          \
    \ |  |  |  |  +--ro prefix-length?   uint8\n           |  |  |  +--:(netmask)\n\
    \           |  |  |     +--ro netmask?         yang:dotted-quad\n           |\
    \  |  +--ro origin?          ip-address-origin\n           |  +--ro neighbor*\
    \ [ip]\n           |     +--ro ip                    inet:ipv4-address-no-zone\n\
    \           |     +--ro link-layer-address?   yang:phys-address\n           |\
    \     +--ro origin?               neighbor-origin\n           +--ro ipv6!\n  \
    \            +--ro forwarding?   boolean\n              +--ro mtu?          uint32\n\
    \              +--ro address* [ip]\n              |  +--ro ip               inet:ipv6-address-no-zone\n\
    \              |  +--ro prefix-length    uint8\n              |  +--ro origin?\
    \          ip-address-origin\n              |  +--ro status?          enumeration\n\
    \              +--ro neighbor* [ip]\n                 +--ro ip               \
    \     inet:ipv6-address-no-zone\n                 +--ro link-layer-address?  \
    \ yang:phys-address\n                 +--ro origin?               neighbor-origin\n\
    \                 +--ro is-router?            empty\n                 +--ro state?\
    \                enumeration\n   The data model defines two state containers per\
    \ interface -- \"ipv4\"\n   and \"ipv6\", representing the IPv4 and IPv6 address\
    \ families.  In each\n   container, there is a leaf \"forwarding\" that indicates\
    \ whether or not\n   IP packet forwarding is enabled on that interface.  In each\n\
    \   container, there is also a list of all addresses in use and a list of\n  \
    \ known mappings from IP addresses to link-layer addresses.\n"
- title: 3.  Relationship to the IP-MIB
  contents:
  - "3.  Relationship to the IP-MIB\n   If the device implements the IP-MIB [RFC4293],\
    \ each entry in the\n   \"ipv4/address\" and \"ipv6/address\" lists is mapped\
    \ to one\n   ipAddressEntry, where the ipAddressIfIndex refers to the \"address\"\
    \n   entry's interface.\n   The IP-MIB defines objects to control IPv6 Router\
    \ Advertisement\n   messages.  The corresponding YANG data nodes are defined in\n\
    \   [ROUTING-MGMT].\n   The entries in \"ipv4/neighbor\" and \"ipv6/neighbor\"\
    \ are mapped to\n   ipNetToPhysicalTable.\n   The following tables list the YANG\
    \ data nodes with corresponding\n   objects in the IP-MIB.\n   +----------------------------------+--------------------------------+\n\
    \   | YANG data node in                | IP-MIB object                  |\n  \
    \ | /if:interfaces/if:interface      |                                |\n   +----------------------------------+--------------------------------+\n\
    \   | ipv4/enabled                     | ipv4InterfaceEnableStatus      |\n  \
    \ | ipv4/address                     | ipAddressEntry                 |\n   |\
    \ ipv4/address/ip                  | ipAddressAddrType              |\n   |  \
    \                                | ipAddressAddr                  |\n   | ipv4/neighbor\
    \                    | ipNetToPhysicalEntry           |\n   | ipv4/neighbor/ip\
    \                 | ipNetToPhysicalNetAddressType  |\n   |                   \
    \               | ipNetToPhysicalNetAddress      |\n   | ipv4/neighbor/link-layer-address\
    \ | ipNetToPhysicalPhysAddress     |\n   |                                  |\
    \                                |\n   | ipv6/enabled                     | ipv6InterfaceEnableStatus\
    \      |\n   | ipv6/forwarding                  | ipv6InterfaceForwarding    \
    \    |\n   | ipv6/address                     | ipAddressEntry               \
    \  |\n   | ipv6/address/ip                  | ipAddressAddrType              |\n\
    \   |                                  | ipAddressAddr                  |\n  \
    \ | ipv6/neighbor                    | ipNetToPhysicalEntry           |\n   |\
    \ ipv6/neighbor/link-layer-address | ipNetToPhysicalPhysAddress     |\n   | ipv6/neighbor/origin\
    \             | ipNetToPhysicalType            |\n   +----------------------------------+--------------------------------+\n\
    \    YANG Interface Configuration Data Nodes and Related IP-MIB Objects\n   +-----------------------------------+-------------------------------+\n\
    \   | YANG data node in                 | IP-MIB object                 |\n  \
    \ | /if:interfaces-state/if:interface |                               |\n   +-----------------------------------+-------------------------------+\n\
    \   | ipv4                              | ipv4InterfaceEnableStatus     |\n  \
    \ | ipv4/address                      | ipAddressEntry                |\n   |\
    \ ipv4/address/ip                   | ipAddressAddrType             |\n   |  \
    \                                 | ipAddressAddr                 |\n   | ipv4/address/origin\
    \               | ipAddressOrigin               |\n   | ipv4/neighbor        \
    \             | ipNetToPhysicalEntry          |\n   | ipv4/neighbor/ip       \
    \           | ipNetToPhysicalNetAddressType |\n   |                          \
    \         | ipNetToPhysicalNetAddress     |\n   | ipv4/neighbor/link-layer-address\
    \  | ipNetToPhysicalPhysAddress    |\n   | ipv4/neighbor/origin              |\
    \ ipNetToPhysicalType           |\n   |                                   |  \
    \                             |\n   | ipv6                              | ipv6InterfaceEnableStatus\
    \     |\n   | ipv6/forwarding                   | ipv6InterfaceForwarding    \
    \   |\n   | ipv6/address                      | ipAddressEntry               \
    \ |\n   | ipv6/address/ip                   | ipAddressAddrType             |\n\
    \   |                                   | ipAddressAddr                 |\n  \
    \ | ipv6/address/origin               | ipAddressOrigin               |\n   |\
    \ ipv6/address/status               | ipAddressStatus               |\n   | ipv6/neighbor\
    \                     | ipNetToPhysicalEntry          |\n   | ipv6/neighbor/ip\
    \                  | ipNetToPhysicalNetAddressType |\n   |                   \
    \                | ipNetToPhysicalNetAddress     |\n   | ipv6/neighbor/link-layer-address\
    \  | ipNetToPhysicalPhysAddress    |\n   | ipv6/neighbor/origin              |\
    \ ipNetToPhysicalType           |\n   | ipv6/neighbor/state               | ipNetToPhysicalState\
    \          |\n   +-----------------------------------+-------------------------------+\n\
    \        YANG Interface State Data Nodes and Related IP-MIB Objects\n"
- title: 4.  IP Management YANG Module
  contents:
  - "4.  IP Management YANG Module\n   This module imports typedefs from [RFC6991]\
    \ and [RFC7223], and it\n   references [RFC0791], [RFC0826], [RFC2460], [RFC4861],\
    \ [RFC4862],\n   [RFC4941], and [RFC7217].\n   <CODE BEGINS> file \"ietf-ip@2014-06-16.yang\"\
    \n   module ietf-ip {\n    namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n\
    \    prefix ip;\n    import ietf-interfaces {\n      prefix if;\n    }\n    import\
    \ ietf-inet-types {\n      prefix inet;\n    }\n    import ietf-yang-types {\n\
    \      prefix yang;\n    }\n    organization\n      \"IETF NETMOD (NETCONF Data\
    \ Modeling Language) Working Group\";\n    contact\n      \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n\
    \       WG List:  <mailto:netmod@ietf.org>\n       WG Chair: Thomas Nadeau\n \
    \                <mailto:tnadeau@lucidvision.com>\n       WG Chair: Juergen Schoenwaelder\n\
    \                 <mailto:j.schoenwaelder@jacobs-university.de>\n       Editor:\
    \   Martin Bjorklund\n                 <mailto:mbj@tail-f.com>\";\n    description\n\
    \      \"This module contains a collection of YANG definitions for\n       configuring\
    \ IP implementations.\n       Copyright (c) 2014 IETF Trust and the persons identified\
    \ as\n       authors of the code.  All rights reserved.\n       Redistribution\
    \ and use in source and binary forms, with or\n       without modification, is\
    \ permitted pursuant to, and subject\n       to the license terms contained in,\
    \ the Simplified BSD License\n       set forth in Section 4.c of the IETF Trust's\
    \ Legal Provisions\n       Relating to IETF Documents\n       (http://trustee.ietf.org/license-info).\n\
    \       This version of this YANG module is part of RFC 7277; see\n       the\
    \ RFC itself for full legal notices.\";\n    revision 2014-06-16 {\n      description\n\
    \        \"Initial revision.\";\n      reference\n        \"RFC 7277: A YANG Data\
    \ Model for IP Management\";\n    }\n    /*\n     * Features\n     */\n    feature\
    \ ipv4-non-contiguous-netmasks {\n      description\n        \"Indicates support\
    \ for configuring non-contiguous\n         subnet masks.\";\n    }\n    feature\
    \ ipv6-privacy-autoconf {\n      description\n        \"Indicates support for\
    \ Privacy Extensions for Stateless Address\n         Autoconfiguration in IPv6.\"\
    ;\n      reference\n        \"RFC 4941: Privacy Extensions for Stateless Address\n\
    \                   Autoconfiguration in IPv6\";\n    }\n    /*\n     * Typedefs\n\
    \     */\n    typedef ip-address-origin {\n      type enumeration {\n        enum\
    \ other {\n          description\n            \"None of the following.\";\n  \
    \      }\n        enum static {\n          description\n            \"Indicates\
    \ that the address has been statically\n             configured - for example,\
    \ using NETCONF or a Command Line\n             Interface.\";\n        }\n   \
    \     enum dhcp {\n          description\n            \"Indicates an address that\
    \ has been assigned to this\n             system by a DHCP server.\";\n      \
    \  }\n        enum link-layer {\n          description\n            \"Indicates\
    \ an address created by IPv6 stateless\n             autoconfiguration that embeds\
    \ a link-layer address in its\n             interface identifier.\";\n       \
    \ }\n        enum random {\n          description\n            \"Indicates an\
    \ address chosen by the system at\n             random, e.g., an IPv4 address\
    \ within 169.254/16, an\n             RFC 4941 temporary address, or an RFC 7217\
    \ semantically\n             opaque address.\";\n          reference\n       \
    \     \"RFC 4941: Privacy Extensions for Stateless Address\n                 \
    \      Autoconfiguration in IPv6\n             RFC 7217: A Method for Generating\
    \ Semantically Opaque\n                       Interface Identifiers with IPv6\
    \ Stateless\n                       Address Autoconfiguration (SLAAC)\";\n   \
    \     }\n      }\n      description\n        \"The origin of an address.\";\n\
    \    }\n    typedef neighbor-origin {\n      type enumeration {\n        enum\
    \ other {\n          description\n            \"None of the following.\";\n  \
    \      }\n        enum static {\n          description\n            \"Indicates\
    \ that the mapping has been statically\n             configured - for example,\
    \ using NETCONF or a Command Line\n             Interface.\";\n        }\n   \
    \     enum dynamic {\n          description\n            \"Indicates that the\
    \ mapping has been dynamically resolved\n             using, e.g., IPv4 ARP or\
    \ the IPv6 Neighbor Discovery\n             protocol.\";\n        }\n      }\n\
    \      description\n        \"The origin of a neighbor entry.\";\n    }\n    /*\n\
    \     * Configuration data nodes\n     */\n    augment \"/if:interfaces/if:interface\"\
    \ {\n      description\n        \"Parameters for configuring IP on interfaces.\n\
    \         If an interface is not capable of running IP, the server\n         must\
    \ not allow the client to configure these parameters.\";\n      container ipv4\
    \ {\n        presence\n          \"Enables IPv4 unless the 'enabled' leaf\n  \
    \         (which defaults to 'true') is set to 'false'\";\n        description\n\
    \          \"Parameters for the IPv4 address family.\";\n        leaf enabled\
    \ {\n          type boolean;\n          default true;\n          description\n\
    \            \"Controls whether IPv4 is enabled or disabled on this\n        \
    \     interface.  When IPv4 is enabled, this interface is\n             connected\
    \ to an IPv4 stack, and the interface can send\n             and receive IPv4\
    \ packets.\";\n        }\n        leaf forwarding {\n          type boolean;\n\
    \          default false;\n          description\n            \"Controls IPv4\
    \ packet forwarding of datagrams received by,\n             but not addressed\
    \ to, this interface.  IPv4 routers\n             forward datagrams.  IPv4 hosts\
    \ do not (except those\n             source-routed via the host).\";\n       \
    \ }\n        leaf mtu {\n          type uint16 {\n            range \"68..max\"\
    ;\n          }\n          units octets;\n          description\n            \"\
    The size, in octets, of the largest IPv4 packet that the\n             interface\
    \ will send and receive.\n             The server may restrict the allowed values\
    \ for this leaf,\n             depending on the interface's type.\n          \
    \   If this leaf is not configured, the operationally used MTU\n             depends\
    \ on the interface's type.\";\n          reference\n            \"RFC 791: Internet\
    \ Protocol\";\n        }\n        list address {\n          key \"ip\";\n    \
    \      description\n            \"The list of configured IPv4 addresses on the\
    \ interface.\";\n          leaf ip {\n            type inet:ipv4-address-no-zone;\n\
    \            description\n              \"The IPv4 address on the interface.\"\
    ;\n          }\n          choice subnet {\n            mandatory true;\n     \
    \       description\n              \"The subnet can be specified as a prefix-length,\
    \ or,\n               if the server supports non-contiguous netmasks, as\n   \
    \            a netmask.\";\n            leaf prefix-length {\n              type\
    \ uint8 {\n                range \"0..32\";\n              }\n              description\n\
    \                \"The length of the subnet prefix.\";\n            }\n      \
    \      leaf netmask {\n              if-feature ipv4-non-contiguous-netmasks;\n\
    \              type yang:dotted-quad;\n              description\n           \
    \     \"The subnet specified as a netmask.\";\n            }\n          }\n  \
    \      }\n        list neighbor {\n          key \"ip\";\n          description\n\
    \            \"A list of mappings from IPv4 addresses to\n             link-layer\
    \ addresses.\n             Entries in this list are used as static entries in\
    \ the\n             ARP Cache.\";\n          reference\n            \"RFC 826:\
    \ An Ethernet Address Resolution Protocol\";\n          leaf ip {\n          \
    \  type inet:ipv4-address-no-zone;\n            description\n              \"\
    The IPv4 address of the neighbor node.\";\n          }\n          leaf link-layer-address\
    \ {\n            type yang:phys-address;\n            mandatory true;\n      \
    \      description\n              \"The link-layer address of the neighbor node.\"\
    ;\n          }\n        }\n      }\n      container ipv6 {\n        presence\n\
    \          \"Enables IPv6 unless the 'enabled' leaf\n           (which defaults\
    \ to 'true') is set to 'false'\";\n        description\n          \"Parameters\
    \ for the IPv6 address family.\";\n        leaf enabled {\n          type boolean;\n\
    \          default true;\n          description\n            \"Controls whether\
    \ IPv6 is enabled or disabled on this\n             interface.  When IPv6 is enabled,\
    \ this interface is\n             connected to an IPv6 stack, and the interface\
    \ can send\n             and receive IPv6 packets.\";\n        }\n        leaf\
    \ forwarding {\n          type boolean;\n          default false;\n          description\n\
    \            \"Controls IPv6 packet forwarding of datagrams received by,\n   \
    \          but not addressed to, this interface.  IPv6 routers\n             forward\
    \ datagrams.  IPv6 hosts do not (except those\n             source-routed via\
    \ the host).\";\n          reference\n            \"RFC 4861: Neighbor Discovery\
    \ for IP version 6 (IPv6)\n                       Section 6.2.1, IsRouter\";\n\
    \        }\n        leaf mtu {\n          type uint32 {\n            range \"\
    1280..max\";\n          }\n          units octets;\n          description\n  \
    \          \"The size, in octets, of the largest IPv6 packet that the\n      \
    \       interface will send and receive.\n             The server may restrict\
    \ the allowed values for this leaf,\n             depending on the interface's\
    \ type.\n             If this leaf is not configured, the operationally used MTU\n\
    \             depends on the interface's type.\";\n          reference\n     \
    \       \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n      \
    \                 Section 5\";\n        }\n        list address {\n          key\
    \ \"ip\";\n          description\n            \"The list of configured IPv6 addresses\
    \ on the interface.\";\n          leaf ip {\n            type inet:ipv6-address-no-zone;\n\
    \            description\n              \"The IPv6 address on the interface.\"\
    ;\n          }\n          leaf prefix-length {\n            type uint8 {\n   \
    \           range \"0..128\";\n            }\n            mandatory true;\n  \
    \          description\n              \"The length of the subnet prefix.\";\n\
    \          }\n        }\n        list neighbor {\n          key \"ip\";\n    \
    \      description\n            \"A list of mappings from IPv6 addresses to\n\
    \             link-layer addresses.\n             Entries in this list are used\
    \ as static entries in the\n             Neighbor Cache.\";\n          reference\n\
    \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n     \
    \     leaf ip {\n            type inet:ipv6-address-no-zone;\n            description\n\
    \              \"The IPv6 address of the neighbor node.\";\n          }\n    \
    \      leaf link-layer-address {\n            type yang:phys-address;\n      \
    \      mandatory true;\n            description\n              \"The link-layer\
    \ address of the neighbor node.\";\n          }\n        }\n        leaf dup-addr-detect-transmits\
    \ {\n          type uint32;\n          default 1;\n          description\n   \
    \         \"The number of consecutive Neighbor Solicitation messages\n       \
    \      sent while performing Duplicate Address Detection on a\n             tentative\
    \ address.  A value of zero indicates that\n             Duplicate Address Detection\
    \ is not performed on\n             tentative addresses.  A value of one indicates\
    \ a single\n             transmission with no follow-up retransmissions.\";\n\
    \          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\"\
    ;\n        }\n        container autoconf {\n          description\n          \
    \  \"Parameters to control the autoconfiguration of IPv6\n             addresses,\
    \ as described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6\
    \ Stateless Address Autoconfiguration\";\n          leaf create-global-addresses\
    \ {\n            type boolean;\n            default true;\n            description\n\
    \              \"If enabled, the host creates global addresses as\n          \
    \     described in RFC 4862.\";\n            reference\n              \"RFC 4862:\
    \ IPv6 Stateless Address Autoconfiguration\n                         Section 5.5\"\
    ;\n          }\n          leaf create-temporary-addresses {\n            if-feature\
    \ ipv6-privacy-autoconf;\n            type boolean;\n            default false;\n\
    \            description\n              \"If enabled, the host creates temporary\
    \ addresses as\n               described in RFC 4941.\";\n            reference\n\
    \              \"RFC 4941: Privacy Extensions for Stateless Address\n        \
    \                 Autoconfiguration in IPv6\";\n          }\n          leaf temporary-valid-lifetime\
    \ {\n            if-feature ipv6-privacy-autoconf;\n            type uint32;\n\
    \            units \"seconds\";\n            default 604800;\n            description\n\
    \              \"The time period during which the temporary address\n        \
    \       is valid.\";\n            reference\n              \"RFC 4941: Privacy\
    \ Extensions for Stateless Address\n                         Autoconfiguration\
    \ in IPv6\n                         - TEMP_VALID_LIFETIME\";\n          }\n  \
    \        leaf temporary-preferred-lifetime {\n            if-feature ipv6-privacy-autoconf;\n\
    \            type uint32;\n            units \"seconds\";\n            default\
    \ 86400;\n            description\n              \"The time period during which\
    \ the temporary address is\n               preferred.\";\n            reference\n\
    \              \"RFC 4941: Privacy Extensions for Stateless Address\n        \
    \                 Autoconfiguration in IPv6\n                         - TEMP_PREFERRED_LIFETIME\"\
    ;\n          }\n        }\n      }\n    }\n    /*\n     * Operational state data\
    \ nodes\n     */\n    augment \"/if:interfaces-state/if:interface\" {\n      description\n\
    \        \"Data nodes for the operational state of IP on interfaces.\";\n    \
    \  container ipv4 {\n        presence \"Present if IPv4 is enabled on this interface\"\
    ;\n        config false;\n        description\n          \"Interface-specific\
    \ parameters for the IPv4 address family.\";\n        leaf forwarding {\n    \
    \      type boolean;\n          description\n            \"Indicates whether IPv4\
    \ packet forwarding is enabled or\n             disabled on this interface.\"\
    ;\n        }\n        leaf mtu {\n          type uint16 {\n            range \"\
    68..max\";\n          }\n          units octets;\n          description\n    \
    \        \"The size, in octets, of the largest IPv4 packet that the\n        \
    \     interface will send and receive.\";\n          reference\n            \"\
    RFC 791: Internet Protocol\";\n        }\n        list address {\n          key\
    \ \"ip\";\n          description\n            \"The list of IPv4 addresses on\
    \ the interface.\";\n          leaf ip {\n            type inet:ipv4-address-no-zone;\n\
    \            description\n              \"The IPv4 address on the interface.\"\
    ;\n          }\n          choice subnet {\n            description\n         \
    \     \"The subnet can be specified as a prefix-length, or,\n               if\
    \ the server supports non-contiguous netmasks, as\n               a netmask.\"\
    ;\n            leaf prefix-length {\n              type uint8 {\n            \
    \    range \"0..32\";\n              }\n              description\n          \
    \      \"The length of the subnet prefix.\";\n            }\n            leaf\
    \ netmask {\n              if-feature ipv4-non-contiguous-netmasks;\n        \
    \      type yang:dotted-quad;\n              description\n                \"The\
    \ subnet specified as a netmask.\";\n            }\n          }\n          leaf\
    \ origin {\n            type ip-address-origin;\n            description\n   \
    \           \"The origin of this address.\";\n          }\n        }\n       \
    \ list neighbor {\n          key \"ip\";\n          description\n            \"\
    A list of mappings from IPv4 addresses to\n             link-layer addresses.\n\
    \             This list represents the ARP Cache.\";\n          reference\n  \
    \          \"RFC 826: An Ethernet Address Resolution Protocol\";\n          leaf\
    \ ip {\n            type inet:ipv4-address-no-zone;\n            description\n\
    \              \"The IPv4 address of the neighbor node.\";\n          }\n    \
    \      leaf link-layer-address {\n            type yang:phys-address;\n      \
    \      description\n              \"The link-layer address of the neighbor node.\"\
    ;\n          }\n          leaf origin {\n            type neighbor-origin;\n \
    \           description\n              \"The origin of this neighbor entry.\"\
    ;\n          }\n        }\n      }\n      container ipv6 {\n        presence \"\
    Present if IPv6 is enabled on this interface\";\n        config false;\n     \
    \   description\n          \"Parameters for the IPv6 address family.\";\n    \
    \    leaf forwarding {\n          type boolean;\n          default false;\n  \
    \        description\n            \"Indicates whether IPv6 packet forwarding is\
    \ enabled or\n             disabled on this interface.\";\n          reference\n\
    \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n        \
    \               Section 6.2.1, IsRouter\";\n        }\n        leaf mtu {\n  \
    \        type uint32 {\n            range \"1280..max\";\n          }\n      \
    \    units octets;\n          description\n            \"The size, in octets,\
    \ of the largest IPv6 packet that the\n             interface will send and receive.\"\
    ;\n          reference\n            \"RFC 2460: Internet Protocol, Version 6 (IPv6)\
    \ Specification\n                       Section 5\";\n        }\n        list\
    \ address {\n          key \"ip\";\n          description\n            \"The list\
    \ of IPv6 addresses on the interface.\";\n          leaf ip {\n            type\
    \ inet:ipv6-address-no-zone;\n            description\n              \"The IPv6\
    \ address on the interface.\";\n          }\n          leaf prefix-length {\n\
    \            type uint8 {\n              range \"0..128\";\n            }\n  \
    \          mandatory true;\n            description\n              \"The length\
    \ of the subnet prefix.\";\n          }\n          leaf origin {\n           \
    \ type ip-address-origin;\n            description\n              \"The origin\
    \ of this address.\";\n          }\n          leaf status {\n            type\
    \ enumeration {\n              enum preferred {\n                description\n\
    \                  \"This is a valid address that can appear as the\n        \
    \           destination or source address of a packet.\";\n              }\n \
    \             enum deprecated {\n                description\n               \
    \   \"This is a valid but deprecated address that should\n                   no\
    \ longer be used as a source address in new\n                   communications,\
    \ but packets addressed to such an\n                   address are processed as\
    \ expected.\";\n              }\n              enum invalid {\n              \
    \  description\n                  \"This isn't a valid address, and it shouldn't\
    \ appear\n                   as the destination or source address of a packet.\"\
    ;\n              }\n              enum inaccessible {\n                description\n\
    \                  \"The address is not accessible because the interface\n   \
    \                to which this address is assigned is not\n                  \
    \ operational.\";\n              }\n              enum unknown {\n           \
    \     description\n                  \"The status cannot be determined for some\
    \ reason.\";\n              }\n              enum tentative {\n              \
    \  description\n                  \"The uniqueness of the address on the link\
    \ is being\n                   verified.  Addresses in this state should not be\n\
    \                   used for general communication and should only be\n      \
    \             used to determine the uniqueness of the address.\";\n          \
    \    }\n              enum duplicate {\n                description\n        \
    \          \"The address has been determined to be non-unique on\n           \
    \        the link and so must not be used.\";\n              }\n             \
    \ enum optimistic {\n                description\n                  \"The address\
    \ is available for use, subject to\n                   restrictions, while its\
    \ uniqueness on a link is\n                   being verified.\";\n           \
    \   }\n            }\n            description\n              \"The status of an\
    \ address.  Most of the states correspond\n               to states from the IPv6\
    \ Stateless Address\n               Autoconfiguration protocol.\";\n         \
    \   reference\n              \"RFC 4293: Management Information Base for the\n\
    \                         Internet Protocol (IP)\n                         - IpAddressStatusTC\n\
    \               RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      \
    \    }\n        }\n        list neighbor {\n          key \"ip\";\n          description\n\
    \            \"A list of mappings from IPv6 addresses to\n             link-layer\
    \ addresses.\n             This list represents the Neighbor Cache.\";\n     \
    \     reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\"\
    ;\n          leaf ip {\n            type inet:ipv6-address-no-zone;\n        \
    \    description\n              \"The IPv6 address of the neighbor node.\";\n\
    \          }\n          leaf link-layer-address {\n            type yang:phys-address;\n\
    \            description\n              \"The link-layer address of the neighbor\
    \ node.\";\n          }\n          leaf origin {\n            type neighbor-origin;\n\
    \            description\n              \"The origin of this neighbor entry.\"\
    ;\n          }\n          leaf is-router {\n            type empty;\n        \
    \    description\n              \"Indicates that the neighbor node acts as a router.\"\
    ;\n          }\n          leaf state {\n            type enumeration {\n     \
    \         enum incomplete {\n                description\n                  \"\
    Address resolution is in progress, and the link-layer\n                   address\
    \ of the neighbor has not yet been\n                   determined.\";\n      \
    \        }\n              enum reachable {\n                description\n    \
    \              \"Roughly speaking, the neighbor is known to have been\n      \
    \             reachable recently (within tens of seconds ago).\";\n          \
    \    }\n              enum stale {\n                description\n            \
    \      \"The neighbor is no longer known to be reachable, but\n              \
    \     until traffic is sent to the neighbor no attempt\n                   should\
    \ be made to verify its reachability.\";\n              }\n              enum\
    \ delay {\n                description\n                  \"The neighbor is no\
    \ longer known to be reachable, and\n                   traffic has recently been\
    \ sent to the neighbor.\n                   Rather than probe the neighbor immediately,\
    \ however,\n                   delay sending probes for a short while in order\
    \ to\n                   give upper-layer protocols a chance to provide\n    \
    \               reachability confirmation.\";\n              }\n             \
    \ enum probe {\n                description\n                  \"The neighbor\
    \ is no longer known to be reachable, and\n                   unicast Neighbor\
    \ Solicitation probes are being sent\n                   to verify reachability.\"\
    ;\n              }\n            }\n            description\n              \"The\
    \ Neighbor Unreachability Detection state of this\n               entry.\";\n\
    \            reference\n              \"RFC 4861: Neighbor Discovery for IP version\
    \ 6 (IPv6)\n                         Section 7.3.2\";\n          }\n        }\n\
    \      }\n    }\n   }\n   <CODE ENDS>\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document registers a URI in the \"IETF XML Registry\"\
    \ [RFC3688].\n   Following the format in RFC 3688, the following registration\
    \ has been\n   made.\n       URI: urn:ietf:params:xml:ns:yang:ietf-ip\n      \
    \ Registrant Contact: The NETMOD WG of the IETF.\n       XML: N/A; the requested\
    \ URI is an XML namespace.\n   This document registers a YANG module in the \"\
    YANG Module Names\"\n   registry [RFC6020].\n    Name:         ietf-ip\n    Namespace:\
    \    urn:ietf:params:xml:ns:yang:ietf-ip\n    Prefix:       ip\n    Reference:\
    \    RFC 7277\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The YANG module defined in this memo is designed\
    \ to be accessed via\n   the NETCONF protocol [RFC6241].  The lowest NETCONF layer\
    \ is the\n   secure transport layer and the mandatory-to-implement secure\n  \
    \ transport is SSH [RFC6242].  The NETCONF access control model\n   [RFC6536]\
    \ provides the means to restrict access for particular\n   NETCONF users to a\
    \ pre-configured subset of all available NETCONF\n   protocol operations and content.\n\
    \   There are a number of data nodes defined in the YANG module which are\n  \
    \ writable/creatable/deletable (i.e., config true, which is the\n   default).\
    \  These data nodes may be considered sensitive or vulnerable\n   in some network\
    \ environments.  Write operations (e.g., edit-config)\n   to these data nodes\
    \ without proper protection can have a negative\n   effect on network operations.\
    \  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n\
    \   ipv4/enabled and ipv6/enabled:  These leafs are used to enable or\n      disable\
    \ IPv4 and IPv6 on a specific interface.  By enabling a\n      protocol on an\
    \ interface, an attacker might be able to create an\n      unsecured path into\
    \ a node (or through it if routing is also\n      enabled).  By disabling a protocol\
    \ on an interface, an attacker\n      might be able to force packets to be routed\
    \ through some other\n      interface or deny access to some or all of the network\
    \ via that\n      protocol.\n   ipv4/address and ipv6/address:  These lists specify\
    \ the configured IP\n      addresses on an interface.  By modifying this information,\
    \ an\n      attacker can cause a node to either ignore messages destined to it\n\
    \      or accept (at least at the IP layer) messages it would otherwise\n    \
    \  ignore.  The use of filtering or security associations may reduce\n      the\
    \ potential damage in the latter case.\n   ipv4/forwarding and ipv6/forwarding:\
    \  These leafs allow a client to\n      enable or disable the forwarding functions\
    \ on the entity.  By\n      disabling the forwarding functions, an attacker would\
    \ possibly be\n      able to deny service to users.  By enabling the forwarding\n\
    \      functions, an attacker could open a conduit into an area.  This\n     \
    \ might result in the area providing transit for packets it\n      shouldn't,\
    \ or it might allow the attacker access to the area,\n      bypassing security\
    \ safeguards.\n   ipv6/autoconf:  The leafs in this branch control the\n     \
    \ autoconfiguration of IPv6 addresses and, in particular, whether or\n      not\
    \ temporary addresses are used.  By modifying the corresponding\n      leafs,\
    \ an attacker might impact the addresses used by a node and\n      thus indirectly\
    \ the privacy of the users using the node.\n   ipv4/mtu and ipv6/mtu:  Setting\
    \ these leafs to very small values can\n      be used to slow down interfaces.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The author wishes to thank Jeffrey Lange, Ladislav Lhotka,\
    \ Juergen\n   Schoenwaelder, and Dave Thaler for their helpful comments.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              September 1981.\n   [RFC2460]  Deering, S. and\
    \ R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n              January 2004.\n   [RFC4861]  Narten, T., Nordmark,\
    \ E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery for IP\
    \ version 6 (IPv6)\", RFC 4861,\n              September 2007.\n   [RFC4862] \
    \ Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address\
    \ Autoconfiguration\", RFC 4862, September 2007.\n   [RFC4941]  Narten, T., Draves,\
    \ R., and S. Krishnan, \"Privacy\n              Extensions for Stateless Address\
    \ Autoconfiguration in\n              IPv6\", RFC 4941, September 2007.\n   [RFC6020]\
    \  Bjorklund, M., \"YANG - A Data Modeling Language for the\n              Network\
    \ Configuration Protocol (NETCONF)\", RFC 6020,\n              October 2010.\n\
    \   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and A.\n          \
    \    Bierman, \"Network Configuration Protocol (NETCONF)\",\n              RFC\
    \ 6241, June 2011.\n   [RFC6991]  Schoenwaelder, J., \"Common YANG Data Types\"\
    , RFC 6991,\n              July 2013.\n   [RFC7223]  Bjorklund, M., \"A YANG Data\
    \ Model for Interface\n              Management\", RFC 7223, May 2014.\n   [XML]\
    \      Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., and\n           \
    \   F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n              Edition)\"\
    , W3C Recommendation, November 2008,\n              <http://www.w3.org/TR/xml/>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC0826]  Plummer, D., \"Ethernet Address Resolution\
    \ Protocol: Or\n              converting network protocol addresses to 48.bit\
    \ Ethernet\n              address for transmission on Ethernet hardware\", STD\
    \ 37,\n              RFC 826, November 1982.\n   [RFC4293]  Routhier, S., \"Management\
    \ Information Base for the\n              Internet Protocol (IP)\", RFC 4293,\
    \ April 2006.\n   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over\
    \ Secure\n              Shell (SSH)\", RFC 6242, June 2011.\n   [RFC6536]  Bierman,\
    \ A. and M. Bjorklund, \"Network Configuration\n              Protocol (NETCONF)\
    \ Access Control Model\", RFC 6536,\n              March 2012.\n   [RFC7217] \
    \ Gont, F., \"A Method for Generating Semantically Opaque\n              Interface\
    \ Identifiers with IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\"\
    , RFC 7217, April 2014.\n   [ROUTING-MGMT]\n              Lhotka, L., \"A YANG\
    \ Data Model for Routing Management\",\n              Work in Progress, May 2014.\n"
- title: 'Appendix A.  Example: NETCONF <get> Reply'
  contents:
  - "Appendix A.  Example: NETCONF <get> Reply\n   This section gives an example of\
    \ a reply to the NETCONF <get> request\n   for a device that implements the data\
    \ model defined in this document.\n   The example is written in XML [XML].\n \
    \  <rpc-reply\n      xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n     \
    \ message-id=\"101\">\n    <data>\n      <interfaces\n          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\
    \n          xmlns:ianaift=\"urn:ietf:params:xml:ns:yang:iana-if-type\">\n    \
    \    <interface>\n          <name>eth0</name>\n          <type>ianaift:ethernetCsmacd</type>\n\
    \          <ipv4 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\">\n            <address>\n\
    \              <ip>192.0.2.1</ip>\n              <prefix-length>24</prefix-length>\n\
    \            </address>\n          </ipv4>\n          <ipv6 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\"\
    >\n            <mtu>1280</mtu>\n            <address>\n              <ip>2001:db8::10</ip>\n\
    \              <prefix-length>32</prefix-length>\n            </address>\n   \
    \         <dup-addr-detect-transmits>0</dup-addr-detect-transmits>\n         \
    \ </ipv6>\n        </interface>\n      </interfaces>\n      <interfaces-state\n\
    \          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n          xmlns:ianaift=\"\
    urn:ietf:params:xml:ns:yang:iana-if-type\">\n        <interface>\n          <name>eth0</name>\n\
    \          <type>ianaift:ethernetCsmacd</type>\n          <!-- other parameters\
    \ from ietf-interfaces omitted -->\n          <ipv4 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\"\
    >\n            <forwarding>false</forwarding>\n            <mtu>1500</mtu>\n \
    \           <address>\n              <ip>192.0.2.1</ip>\n              <prefix-length>24</prefix-length>\n\
    \              <origin>static</origin>\n            </address>\n            <neighbor>\n\
    \              <ip>192.0.2.2</ip>\n              <link-layer-address>00:01:02:03:04:05</link-layer-address>\n\
    \            </neighbor>\n          </ipv4>\n          <ipv6 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\"\
    >\n            <forwarding>false</forwarding>\n            <mtu>1500</mtu>\n \
    \           <address>\n              <ip>2001:db8::10</ip>\n              <prefix-length>32</prefix-length>\n\
    \              <origin>static</origin>\n              <status>preferred</status>\n\
    \            </address>\n            <address>\n              <ip>2001:db8::1:100</ip>\n\
    \              <prefix-length>32</prefix-length>\n              <origin>dhcp</origin>\n\
    \              <status>preferred</status>\n            </address>\n          \
    \  <neighbor>\n              <ip>2001:db8::1</ip>\n              <link-layer-address>00:01:02:03:04:05</link-layer-address>\n\
    \              <origin>dynamic</origin>\n              <is-router/>\n        \
    \      <state>reachable</state>\n            </neighbor>\n            <neighbor>\n\
    \              <ip>2001:db8::4</ip>\n              <origin>dynamic</origin>\n\
    \              <state>incomplete</state>\n            </neighbor>\n          </ipv6>\n\
    \        </interface>\n      </interfaces-state>\n    </data>\n   </rpc-reply>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Bjorklund\n   Tail-f Systems\n   EMail: mbj@tail-f.com\n"
