- contents:
  - '         Hypertext Transfer Protocol (HTTP/1.1): Authentication

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n
    \  level protocol for distributed, collaborative, hypermedia information\n   systems.
    \ This document defines the HTTP Authentication framework.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7235.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Conformance and Error Handling .............................3\n      1.2.
    Syntax Notation ............................................3\n   2. Access Authentication
    Framework .................................3\n      2.1. Challenge and Response
    .....................................3\n      2.2. Protection Space (Realm) ...................................5\n
    \  3. Status Code Definitions .........................................6\n      3.1.
    401 Unauthorized ...........................................6\n      3.2. 407
    Proxy Authentication Required ..........................6\n   4. Header Field
    Definitions ........................................7\n      4.1. WWW-Authenticate
    ...........................................7\n      4.2. Authorization ..............................................8\n
    \     4.3. Proxy-Authenticate .........................................8\n      4.4.
    Proxy-Authorization ........................................9\n   5. IANA Considerations
    .............................................9\n      5.1. Authentication Scheme
    Registry .............................9\n           5.1.1. Procedure ...........................................9\n
    \          5.1.2. Considerations for New Authentication Schemes ......10\n      5.2.
    Status Code Registration ..................................11\n      5.3. Header
    Field Registration .................................11\n   6. Security Considerations
    ........................................12\n      6.1. Confidentiality of Credentials
    ............................12\n      6.2. Authentication Credentials and Idle
    Clients ...............12\n      6.3. Protection Spaces .........................................13\n
    \  7. Acknowledgments ................................................14\n   8.
    References .....................................................14\n      8.1.
    Normative References ......................................14\n      8.2. Informative
    References ....................................14\n   Appendix A. Changes from
    RFCs 2616 and 2617 .......................16\n   Appendix B. Imported ABNF .........................................16\n
    \  Appendix C. Collected ABNF ........................................17\n   Index
    .............................................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   HTTP provides a general framework for access control and\n
    \  authentication, via an extensible set of challenge-response\n   authentication
    schemes, which can be used by a server to challenge a\n   client request and by
    a client to provide authentication information.\n   This document defines HTTP/1.1
    authentication in terms of the\n   architecture defined in \"Hypertext Transfer
    Protocol (HTTP/1.1):\n   Message Syntax and Routing\" [RFC7230], including the
    general\n   framework previously described in \"HTTP Authentication: Basic and\n
    \  Digest Access Authentication\" [RFC2617] and the related fields and\n   status
    codes previously defined in \"Hypertext Transfer Protocol --\n   HTTP/1.1\" [RFC2616].\n
    \  The IANA Authentication Scheme Registry (Section 5.1) lists\n   registered
    authentication schemes and their corresponding\n   specifications, including the
    \"basic\" and \"digest\" authentication\n   schemes previously defined by RFC
    2617.\n"
  - contents:
    - "1.1.  Conformance and Error Handling\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in [RFC2119].\n   Conformance criteria and considerations regarding error handling
      are\n   defined in Section 2.5 of [RFC7230].\n"
    title: 1.1.  Conformance and Error Handling
  - contents:
    - "1.2.  Syntax Notation\n   This specification uses the Augmented Backus-Naur
      Form (ABNF)\n   notation of [RFC5234] with a list extension, defined in Section
      7 of\n   [RFC7230], that allows for compact definition of comma-separated\n
      \  lists using a '#' operator (similar to how the '*' operator indicates\n   repetition).
      \ Appendix B describes rules imported from other\n   documents.  Appendix C
      shows the collected grammar with all list\n   operators expanded to standard
      ABNF notation.\n"
    title: 1.2.  Syntax Notation
  title: 1.  Introduction
- contents:
  - '2.  Access Authentication Framework

    '
  - contents:
    - "2.1.  Challenge and Response\n   HTTP provides a simple challenge-response
      authentication framework\n   that can be used by a server to challenge a client
      request and by a\n   client to provide authentication information.  It uses
      a case-\n   insensitive token as a means to identify the authentication scheme,\n
      \  followed by additional information necessary for achieving\n   authentication
      via that scheme.  The latter can be either a comma-\n   separated list of parameters
      or a single sequence of characters\n   capable of holding base64-encoded information.\n
      \  Authentication parameters are name=value pairs, where the name token\n   is
      matched case-insensitively, and each parameter name MUST only\n   occur once
      per challenge.\n     auth-scheme    = token\n     auth-param     = token BWS
      \"=\" BWS ( token / quoted-string )\n     token68        = 1*( ALPHA / DIGIT
      /\n                          \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" )
      *\"=\"\n   The token68 syntax allows the 66 unreserved URI characters\n   ([RFC3986]),
      plus a few others, so that it can hold a base64,\n   base64url (URL and filename
      safe alphabet), base32, or base16 (hex)\n   encoding, with or without padding,
      but excluding whitespace\n   ([RFC4648]).\n   A 401 (Unauthorized) response
      message is used by an origin server to\n   challenge the authorization of a
      user agent, including a\n   WWW-Authenticate header field containing at least
      one challenge\n   applicable to the requested resource.\n   A 407 (Proxy Authentication
      Required) response message is used by a\n   proxy to challenge the authorization
      of a client, including a\n   Proxy-Authenticate header field containing at least
      one challenge\n   applicable to the proxy for the requested resource.\n     challenge
      \  = auth-scheme [ 1*SP ( token68 / #auth-param ) ]\n      Note: Many clients
      fail to parse a challenge that contains an\n      unknown scheme.  A workaround
      for this problem is to list well-\n      supported schemes (such as \"basic\")
      first.\n   A user agent that wishes to authenticate itself with an origin server\n
      \  -- usually, but not necessarily, after receiving a 401 (Unauthorized)\n   --
      can do so by including an Authorization header field with the\n   request.\n
      \  A client that wishes to authenticate itself with a proxy -- usually,\n   but
      not necessarily, after receiving a 407 (Proxy Authentication\n   Required) --
      can do so by including a Proxy-Authorization header\n   field with the request.\n
      \  Both the Authorization field value and the Proxy-Authorization field\n   value
      contain the client's credentials for the realm of the resource\n   being requested,
      based upon a challenge received in a response\n   (possibly at some point in
      the past).  When creating their values,\n   the user agent ought to do so by
      selecting the challenge with what it\n   considers to be the most secure auth-scheme
      that it understands,\n   obtaining credentials from the user as appropriate.
      \ Transmission of\n   credentials within header field values implies significant
      security\n   considerations regarding the confidentiality of the underlying\n
      \  connection, as described in Section 6.1.\n     credentials = auth-scheme
      [ 1*SP ( token68 / #auth-param ) ]\n   Upon receipt of a request for a protected
      resource that omits\n   credentials, contains invalid credentials (e.g., a bad
      password) or\n   partial credentials (e.g., when the authentication scheme requires\n
      \  more than one round trip), an origin server SHOULD send a 401\n   (Unauthorized)
      response that contains a WWW-Authenticate header field\n   with at least one
      (possibly new) challenge applicable to the\n   requested resource.\n   Likewise,
      upon receipt of a request that omits proxy credentials or\n   contains invalid
      or partial proxy credentials, a proxy that requires\n   authentication SHOULD
      generate a 407 (Proxy Authentication Required)\n   response that contains a
      Proxy-Authenticate header field with at\n   least one (possibly new) challenge
      applicable to the proxy.\n   A server that receives valid credentials that are
      not adequate to\n   gain access ought to respond with the 403 (Forbidden) status
      code\n   (Section 6.5.3 of [RFC7231]).\n   HTTP does not restrict applications
      to this simple challenge-response\n   framework for access authentication.  Additional
      mechanisms can be\n   used, such as authentication at the transport level or
      via message\n   encapsulation, and with additional header fields specifying\n
      \  authentication information.  However, such additional mechanisms are\n   not
      defined by this specification.\n"
    title: 2.1.  Challenge and Response
  - contents:
    - "2.2.  Protection Space (Realm)\n   The \"realm\" authentication parameter is
      reserved for use by\n   authentication schemes that wish to indicate a scope
      of protection.\n   A protection space is defined by the canonical root URI (the
      scheme\n   and authority components of the effective request URI; see Section\n
      \  5.5 of [RFC7230]) of the server being accessed, in combination with\n   the
      realm value if present.  These realms allow the protected\n   resources on a
      server to be partitioned into a set of protection\n   spaces, each with its
      own authentication scheme and/or authorization\n   database.  The realm value
      is a string, generally assigned by the\n   origin server, that can have additional
      semantics specific to the\n   authentication scheme.  Note that a response can
      have multiple\n   challenges with the same auth-scheme but with different realms.\n
      \  The protection space determines the domain over which credentials can\n   be
      automatically applied.  If a prior request has been authorized,\n   the user
      agent MAY reuse the same credentials for all other requests\n   within that
      protection space for a period of time determined by the\n   authentication scheme,
      parameters, and/or user preferences (such as a\n   configurable inactivity timeout).
      \ Unless specifically allowed by the\n   authentication scheme, a single protection
      space cannot extend\n   outside the scope of its server.\n   For historical
      reasons, a sender MUST only generate the quoted-string\n   syntax.  Recipients
      might have to support both token and\n   quoted-string syntax for maximum interoperability
      with existing\n   clients that have been accepting both notations for a long
      time.\n"
    title: 2.2.  Protection Space (Realm)
  title: 2.  Access Authentication Framework
- contents:
  - '3.  Status Code Definitions

    '
  - contents:
    - "3.1.  401 Unauthorized\n   The 401 (Unauthorized) status code indicates that
      the request has not\n   been applied because it lacks valid authentication credentials
      for\n   the target resource.  The server generating a 401 response MUST send\n
      \  a WWW-Authenticate header field (Section 4.1) containing at least one\n   challenge
      applicable to the target resource.\n   If the request included authentication
      credentials, then the 401\n   response indicates that authorization has been
      refused for those\n   credentials.  The user agent MAY repeat the request with
      a new or\n   replaced Authorization header field (Section 4.2).  If the 401\n
      \  response contains the same challenge as the prior response, and the\n   user
      agent has already attempted authentication at least once, then\n   the user
      agent SHOULD present the enclosed representation to the\n   user, since it usually
      contains relevant diagnostic information.\n"
    title: 3.1.  401 Unauthorized
  - contents:
    - "3.2.  407 Proxy Authentication Required\n   The 407 (Proxy Authentication Required)
      status code is similar to 401\n   (Unauthorized), but it indicates that the
      client needs to\n   authenticate itself in order to use a proxy.  The proxy
      MUST send a\n   Proxy-Authenticate header field (Section 4.3) containing a challenge\n
      \  applicable to that proxy for the target resource.  The client MAY\n   repeat
      the request with a new or replaced Proxy-Authorization header\n   field (Section
      4.4).\n"
    title: 3.2.  407 Proxy Authentication Required
  title: 3.  Status Code Definitions
- contents:
  - "4.  Header Field Definitions\n   This section defines the syntax and semantics
    of header fields\n   related to the HTTP authentication framework.\n"
  - contents:
    - "4.1.  WWW-Authenticate\n   The \"WWW-Authenticate\" header field indicates
      the authentication\n   scheme(s) and parameters applicable to the target resource.\n
      \    WWW-Authenticate = 1#challenge\n   A server generating a 401 (Unauthorized)
      response MUST send a\n   WWW-Authenticate header field containing at least one
      challenge.  A\n   server MAY generate a WWW-Authenticate header field in other
      response\n   messages to indicate that supplying credentials (or different\n
      \  credentials) might affect the response.\n   A proxy forwarding a response
      MUST NOT modify any WWW-Authenticate\n   fields in that response.\n   User agents
      are advised to take special care in parsing the field\n   value, as it might
      contain more than one challenge, and each\n   challenge can contain a comma-separated
      list of authentication\n   parameters.  Furthermore, the header field itself
      can occur multiple\n   times.\n   For instance:\n     WWW-Authenticate: Newauth
      realm=\"apps\", type=1,\n                       title=\"Login to \\\"apps\\\"\",
      Basic realm=\"simple\"\n   This header field contains two challenges; one for
      the \"Newauth\"\n   scheme with a realm value of \"apps\", and two additional
      parameters\n   \"type\" and \"title\", and another one for the \"Basic\" scheme
      with a\n   realm value of \"simple\".\n      Note: The challenge grammar production
      uses the list syntax as\n      well.  Therefore, a sequence of comma, whitespace,
      and comma can\n      be considered either as applying to the preceding challenge,
      or to\n      be an empty entry in the list of challenges.  In practice, this\n
      \     ambiguity does not affect the semantics of the header field value\n      and
      thus is harmless.\n"
    title: 4.1.  WWW-Authenticate
  - contents:
    - "4.2.  Authorization\n   The \"Authorization\" header field allows a user agent
      to authenticate\n   itself with an origin server -- usually, but not necessarily,
      after\n   receiving a 401 (Unauthorized) response.  Its value consists of\n
      \  credentials containing the authentication information of the user\n   agent
      for the realm of the resource being requested.\n     Authorization = credentials\n
      \  If a request is authenticated and a realm specified, the same\n   credentials
      are presumed to be valid for all other requests within\n   this realm (assuming
      that the authentication scheme itself does not\n   require otherwise, such as
      credentials that vary according to a\n   challenge value or using synchronized
      clocks).\n   A proxy forwarding a request MUST NOT modify any Authorization
      fields\n   in that request.  See Section 3.2 of [RFC7234] for details of and\n
      \  requirements pertaining to handling of the Authorization field by\n   HTTP
      caches.\n"
    title: 4.2.  Authorization
  - contents:
    - "4.3.  Proxy-Authenticate\n   The \"Proxy-Authenticate\" header field consists
      of at least one\n   challenge that indicates the authentication scheme(s) and
      parameters\n   applicable to the proxy for this effective request URI (Section
      5.5\n   of [RFC7230]).  A proxy MUST send at least one Proxy-Authenticate\n
      \  header field in each 407 (Proxy Authentication Required) response\n   that
      it generates.\n     Proxy-Authenticate = 1#challenge\n   Unlike WWW-Authenticate,
      the Proxy-Authenticate header field applies\n   only to the next outbound client
      on the response chain.  This is\n   because only the client that chose a given
      proxy is likely to have\n   the credentials necessary for authentication.  However,
      when multiple\n   proxies are used within the same administrative domain, such
      as\n   office and regional caching proxies within a large corporate network,\n
      \  it is common for credentials to be generated by the user agent and\n   passed
      through the hierarchy until consumed.  Hence, in such a\n   configuration, it
      will appear as if Proxy-Authenticate is being\n   forwarded because each proxy
      will send the same challenge set.\n   Note that the parsing considerations for
      WWW-Authenticate apply to\n   this header field as well; see Section 4.1 for
      details.\n"
    title: 4.3.  Proxy-Authenticate
  - contents:
    - "4.4.  Proxy-Authorization\n   The \"Proxy-Authorization\" header field allows
      the client to identify\n   itself (or its user) to a proxy that requires authentication.
      \ Its\n   value consists of credentials containing the authentication\n   information
      of the client for the proxy and/or realm of the resource\n   being requested.\n
      \    Proxy-Authorization = credentials\n   Unlike Authorization, the Proxy-Authorization
      header field applies\n   only to the next inbound proxy that demanded authentication
      using the\n   Proxy-Authenticate field.  When multiple proxies are used in a
      chain,\n   the Proxy-Authorization header field is consumed by the first inbound\n
      \  proxy that was expecting to receive credentials.  A proxy MAY relay\n   the
      credentials from the client request to the next proxy if that is\n   the mechanism
      by which the proxies cooperatively authenticate a given\n   request.\n"
    title: 4.4.  Proxy-Authorization
  title: 4.  Header Field Definitions
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  Authentication Scheme Registry\n   The \"Hypertext Transfer Protocol
      (HTTP) Authentication Scheme\n   Registry\" defines the namespace for the authentication
      schemes in\n   challenges and credentials.  It has been created and is now\n
      \  maintained at <http://www.iana.org/assignments/http-authschemes>.\n"
    - contents:
      - "5.1.1.  Procedure\n   Registrations MUST include the following fields:\n
        \  o  Authentication Scheme Name\n   o  Pointer to specification text\n   o
        \ Notes (optional)\n   Values to be added to this namespace require IETF Review
        (see\n   [RFC5226], Section 4.1).\n"
      title: 5.1.1.  Procedure
    - contents:
      - "5.1.2.  Considerations for New Authentication Schemes\n   There are certain
        aspects of the HTTP Authentication Framework that\n   put constraints on how
        new authentication schemes can work:\n   o  HTTP authentication is presumed
        to be stateless: all of the\n      information necessary to authenticate a
        request MUST be provided\n      in the request, rather than be dependent on
        the server remembering\n      prior requests.  Authentication based on, or
        bound to, the\n      underlying connection is outside the scope of this specification\n
        \     and inherently flawed unless steps are taken to ensure that the\n      connection
        cannot be used by any party other than the\n      authenticated user (see
        Section 2.3 of [RFC7230]).\n   o  The authentication parameter \"realm\" is
        reserved for defining\n      protection spaces as described in Section 2.2.
        \ New schemes MUST\n      NOT use it in a way incompatible with that definition.\n
        \  o  The \"token68\" notation was introduced for compatibility with\n      existing
        authentication schemes and can only be used once per\n      challenge or credential.
        \ Thus, new schemes ought to use the\n      auth-param syntax instead, because
        otherwise future extensions\n      will be impossible.\n   o  The parsing
        of challenges and credentials is defined by this\n      specification and
        cannot be modified by new authentication\n      schemes.  When the auth-param
        syntax is used, all parameters ought\n      to support both token and quoted-string
        syntax, and syntactical\n      constraints ought to be defined on the field
        value after parsing\n      (i.e., quoted-string processing).  This is necessary
        so that\n      recipients can use a generic parser that applies to all\n      authentication
        schemes.\n      Note: The fact that the value syntax for the \"realm\" parameter
        is\n      restricted to quoted-string was a bad design choice not to be\n
        \     repeated for new parameters.\n   o  Definitions of new schemes ought
        to define the treatment of\n      unknown extension parameters.  In general,
        a \"must-ignore\" rule is\n      preferable to a \"must-understand\" rule,
        because otherwise it will\n      be hard to introduce new parameters in the
        presence of legacy\n      recipients.  Furthermore, it's good to describe
        the policy for\n      defining new parameters (such as \"update the specification\"
        or\n      \"use this registry\").\n   o  Authentication schemes need to document
        whether they are usable in\n      origin-server authentication (i.e., using
        WWW-Authenticate),\n      and/or proxy authentication (i.e., using Proxy-Authenticate).\n
        \  o  The credentials carried in an Authorization header field are\n      specific
        to the user agent and, therefore, have the same effect on\n      HTTP caches
        as the \"private\" Cache-Control response directive\n      (Section 5.2.2.6
        of [RFC7234]), within the scope of the request in\n      which they appear.\n
        \     Therefore, new authentication schemes that choose not to carry\n      credentials
        in the Authorization header field (e.g., using a newly\n      defined header
        field) will need to explicitly disallow caching, by\n      mandating the use
        of either Cache-Control request directives\n      (e.g., \"no-store\", Section
        5.2.1.5 of [RFC7234]) or response\n      directives (e.g., \"private\").\n"
      title: 5.1.2.  Considerations for New Authentication Schemes
    title: 5.1.  Authentication Scheme Registry
  - contents:
    - "5.2.  Status Code Registration\n   The \"Hypertext Transfer Protocol (HTTP)
      Status Code Registry\" located\n   at <http://www.iana.org/assignments/http-status-codes>
      has been\n   updated with the registrations below:\n   +-------+-------------------------------+-------------+\n
      \  | Value | Description                   | Reference   |\n   +-------+-------------------------------+-------------+\n
      \  | 401   | Unauthorized                  | Section 3.1 |\n   | 407   | Proxy
      Authentication Required | Section 3.2 |\n   +-------+-------------------------------+-------------+\n"
    title: 5.2.  Status Code Registration
  - contents:
    - "5.3.  Header Field Registration\n   HTTP header fields are registered within
      the \"Message Headers\"\n   registry maintained at\n   <http://www.iana.org/assignments/message-headers/>.\n
      \  This document defines the following HTTP header fields, so the\n   \"Permanent
      Message Header Field Names\" registry has been updated\n   accordingly (see
      [BCP90]).\n   +---------------------+----------+----------+-------------+\n
      \  | Header Field Name   | Protocol | Status   | Reference   |\n   +---------------------+----------+----------+-------------+\n
      \  | Authorization       | http     | standard | Section 4.2 |\n   | Proxy-Authenticate
      \ | http     | standard | Section 4.3 |\n   | Proxy-Authorization | http     |
      standard | Section 4.4 |\n   | WWW-Authenticate    | http     | standard | Section
      4.1 |\n   +---------------------+----------+----------+-------------+\n   The
      change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task
      Force\".\n"
    title: 5.3.  Header Field Registration
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This section is meant to inform developers, information
    providers,\n   and users of known security concerns specific to HTTP authentication.\n
    \  More general security considerations are addressed in HTTP messaging\n   [RFC7230]
    and semantics [RFC7231].\n   Everything about the topic of HTTP authentication
    is a security\n   consideration, so the list of considerations below is not exhaustive.\n
    \  Furthermore, it is limited to security considerations regarding the\n   authentication
    framework, in general, rather than discussing all of\n   the potential considerations
    for specific authentication schemes\n   (which ought to be documented in the specifications
    that define those\n   schemes).  Various organizations maintain topical information
    and\n   links to current research on Web application security (e.g.,\n   [OWASP]),
    including common pitfalls for implementing and using the\n   authentication schemes
    found in practice.\n"
  - contents:
    - "6.1.  Confidentiality of Credentials\n   The HTTP authentication framework
      does not define a single mechanism\n   for maintaining the confidentiality of
      credentials; instead, each\n   authentication scheme defines how the credentials
      are encoded prior\n   to transmission.  While this provides flexibility for
      the development\n   of future authentication schemes, it is inadequate for the
      protection\n   of existing schemes that provide no confidentiality on their
      own, or\n   that do not sufficiently protect against replay attacks.\n   Furthermore,
      if the server expects credentials that are specific to\n   each individual user,
      the exchange of those credentials will have the\n   effect of identifying that
      user even if the content within\n   credentials remains confidential.\n   HTTP
      depends on the security properties of the underlying transport-\n   or session-level
      connection to provide confidential transmission of\n   header fields.  In other
      words, if a server limits access to\n   authenticated users using this framework,
      the server needs to ensure\n   that the connection is properly secured in accordance
      with the nature\n   of the authentication scheme used.  For example, services
      that depend\n   on individual user authentication often require a connection
      to be\n   secured with TLS (\"Transport Layer Security\", [RFC5246]) prior to\n
      \  exchanging any credentials.\n"
    title: 6.1.  Confidentiality of Credentials
  - contents:
    - "6.2.  Authentication Credentials and Idle Clients\n   Existing HTTP clients
      and user agents typically retain authentication\n   information indefinitely.
      \ HTTP does not provide a mechanism for the\n   origin server to direct clients
      to discard these cached credentials,\n   since the protocol has no awareness
      of how credentials are obtained\n   or managed by the user agent.  The mechanisms
      for expiring or\n   revoking credentials can be specified as part of an authentication\n
      \  scheme definition.\n   Circumstances under which credential caching can interfere
      with the\n   application's security model include but are not limited to:\n
      \  o  Clients that have been idle for an extended period, following\n      which
      the server might wish to cause the client to re-prompt the\n      user for credentials.\n
      \  o  Applications that include a session termination indication (such\n      as
      a \"logout\" or \"commit\" button on a page) after which the server\n      side
      of the application \"knows\" that there is no further reason\n      for the
      client to retain the credentials.\n   User agents that cache credentials are
      encouraged to provide a\n   readily accessible mechanism for discarding cached
      credentials under\n   user control.\n"
    title: 6.2.  Authentication Credentials and Idle Clients
  - contents:
    - "6.3.  Protection Spaces\n   Authentication schemes that solely rely on the
      \"realm\" mechanism for\n   establishing a protection space will expose credentials
      to all\n   resources on an origin server.  Clients that have successfully made\n
      \  authenticated requests with a resource can use the same\n   authentication
      credentials for other resources on the same origin\n   server.  This makes it
      possible for a different resource to harvest\n   authentication credentials
      for other resources.\n   This is of particular concern when an origin server
      hosts resources\n   for multiple parties under the same canonical root URI (Section
      2.2).\n   Possible mitigation strategies include restricting direct access to\n
      \  authentication credentials (i.e., not making the content of the\n   Authorization
      request header field available), and separating\n   protection spaces by using
      a different host name (or port number) for\n   each party.\n"
    title: 6.3.  Protection Spaces
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   This specification takes over the definition of the HTTP\n
    \  Authentication Framework, previously defined in RFC 2617.  We thank\n   John
    Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler, Scott D.\n   Lawrence,
    Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart for\n   their work on that
    specification.  See Section 6 of [RFC2617] for\n   further acknowledgements.\n
    \  See Section 10 of [RFC7230] for the Acknowledgments related to this\n   document
    revision.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, June 2014.\n
      \  [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              June
      2014.\n   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n
      \             Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC
      7234, June 2014.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [BCP90]    Klyne, G., Nottingham, M., and
      J. Mogul, \"Registration\n              Procedures for Message Header Fields\",
      BCP 90, RFC 3864,\n              September 2004.\n   [OWASP]    van der Stock,
      A., Ed., \"A Guide to Building Secure Web\n              Applications and Web
      Services\", The Open Web Application\n              Security Project (OWASP)
      2.0.1, July 2005,\n              <https://www.owasp.org/>.\n   [RFC2616]  Fielding,
      R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,
      P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\",
      RFC 2616, June 1999.\n   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler,
      J., Lawrence, S.,\n              Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n
      \             Authentication: Basic and Digest Access Authentication\",\n              RFC
      2617, June 1999.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter,
      \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n
      \             RFC 3986, January 2005.\n   [RFC4648]  Josefsson, S., \"The Base16,
      Base32, and Base64 Data\n              Encodings\", RFC 4648, October 2006.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246, August 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Changes from RFCs 2616 and 2617\n   The framework for HTTP Authentication
    is now defined by this\n   document, rather than RFC 2617.\n   The \"realm\" parameter
    is no longer always required on challenges;\n   consequently, the ABNF allows
    challenges without any auth parameters.\n   (Section 2)\n   The \"token68\" alternative
    to auth-param lists has been added for\n   consistency with legacy authentication
    schemes such as \"Basic\".\n   (Section 2)\n   This specification introduces the
    Authentication Scheme Registry,\n   along with considerations for new authentication
    schemes.\n   (Section 5.1)\n"
  title: Appendix A.  Changes from RFCs 2616 and 2617
- contents:
  - "Appendix B.  Imported ABNF\n   The following core rules are included by reference,
    as defined in\n   Appendix B.1 of [RFC5234]: ALPHA (letters), CR (carriage return),\n
    \  CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote),
    HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any\n   8-bit sequence
    of data), SP (space), and VCHAR (any visible US-ASCII\n   character).\n   The
    rules below are defined in [RFC7230]:\n     BWS           = <BWS, see [RFC7230],
    Section 3.2.3>\n     OWS           = <OWS, see [RFC7230], Section 3.2.3>\n     quoted-string
    = <quoted-string, see [RFC7230], Section 3.2.6>\n     token         = <token,
    see [RFC7230], Section 3.2.6>\n"
  title: Appendix B.  Imported ABNF
- contents:
  - "Appendix C.  Collected ABNF\n   In the collected ABNF below, list rules are expanded
    as per Section\n   1.2 of [RFC7230].\n   Authorization = credentials\n   BWS =
    <BWS, see [RFC7230], Section 3.2.3>\n   OWS = <OWS, see [RFC7230], Section 3.2.3>\n
    \  Proxy-Authenticate = *( \",\" OWS ) challenge *( OWS \",\" [ OWS\n    challenge
    ] )\n   Proxy-Authorization = credentials\n   WWW-Authenticate = *( \",\" OWS
    ) challenge *( OWS \",\" [ OWS challenge\n    ] )\n   auth-param = token BWS \"=\"
    BWS ( token / quoted-string )\n   auth-scheme = token\n   challenge = auth-scheme
    [ 1*SP ( token68 / [ ( \",\" / auth-param ) *(\n    OWS \",\" [ OWS auth-param
    ] ) ] ) ]\n   credentials = auth-scheme [ 1*SP ( token68 / [ ( \",\" / auth-param
    )\n    *( OWS \",\" [ OWS auth-param ] ) ] ) ]\n   quoted-string = <quoted-string,
    see [RFC7230], Section 3.2.6>\n   token = <token, see [RFC7230], Section 3.2.6>\n
    \  token68 = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\"
    )\n    *\"=\"\n"
  title: Appendix C.  Collected ABNF
- contents:
  - "Index\n   4\n      401 Unauthorized (status code)  6\n      407 Proxy Authentication
    Required (status code)  6\n   A\n      Authorization header field  8\n   C\n      Canonical
    Root URI  5\n   G\n      Grammar\n         auth-param  4\n         auth-scheme
    \ 4\n         Authorization  8\n         challenge  4\n         credentials  5\n
    \        Proxy-Authenticate  8\n         Proxy-Authorization  9\n         token68
    \ 4\n         WWW-Authenticate  7\n   P\n      Protection Space  5\n      Proxy-Authenticate
    header field  8\n      Proxy-Authorization header field  9\n   R\n      Realm
    \ 5\n   W\n      WWW-Authenticate header field  7\n"
  title: Index
- contents:
  - "Authors' Addresses\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n
    \  345 Park Ave\n   San Jose, CA  95110\n   USA\n   EMail: fielding@gbiv.com\n
    \  URI:   http://roy.gbiv.com/\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n
    \  Hafenweg 16\n   Muenster, NW  48155\n   Germany\n   EMail: julian.reschke@greenbytes.de\n
    \  URI:   http://greenbytes.de/tech/webdav/\n"
  title: Authors' Addresses
