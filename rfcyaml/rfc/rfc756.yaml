- title: __initial_text__
  contents:
  - "    The NIC Name Server--A Datagram Based Information Utility\n             \
    \            by\n   John R. Pickens, Elizabeth J. Feinler, and James E. Mathis\n\
    \                            July 1979\n                        SRI International\n\
    \               Telecommunications Sciences Center\n                         333\
    \ Ravenswood\n                  Menlo Park, California 94025\n               \
    \             Abstract\n  In this paper a new method for distributing and updating\
    \ host\nname/address information in large computer networks is described.\nThe\
    \ technique uses datagrams to provide a simple\ntransaction-based query/response\
    \ service.  A provisional service\nis being provided by the Arpanet Network Information\
    \ Center (NIC)\nand is used by mobile packet radio terminals, as well as by\n\
    several Arpanet DEC-10 hosts.  Extensions to the service are\nsuggested that would\
    \ expand the query functionality to allow more\nflexible query formats as well\
    \ as queries for service addresses.\nSeveral architectural approaches with potential\
    \ for expansion\ninto a distributed internet environment are proposed.  This\n\
    technique may be utilized in support of other distributed\napplications such as\
    \ user identification and group distribution\nfor computer based mail.\n1. INTRODUCTION\n\
    \  In large computer networks, such as the Arpanet [1],\nnetwork-wide standard\
    \ host-addressing information must be\nmaintained and distributed.  To fulfill\
    \ that need, the Arpanet\nNetwork Information Center (NIC) at SRI International\
    \ has\nmaintained, administered, and distributed the host addressing\ndata base\
    \ to Arpanet hosts since 1972 [2].\n  The most common method for maintaining an\
    \ up-to-date copy on\neach host is to bulk-transfer the entire data base to each\
    \ host\nindividually.  This technique satisfies most host addressing\nneeds on\
    \ the Arpanet today.  However, some hosts maintain neither\na complete nor a current\
    \ copy of the data base because of limited\nmemory capacity and infrequent processing\
    \ of updates.  In\naddition, with the expansion of the Arpanet into the internet\n\
    environment [3, 4], a strong need has arisen for new techniques\nto augment the\
    \ distribution of name/address information.\n  One method currently being investigated\
    \ is the dynamic\ndistribution of host-address information via a transaction-based,\n\
    inquiry-response process called the Name Server [5, 6].  To\nsupport this investigation,\
    \ the NIC has developed a provisional\nName Server that is compatible with a level\
    \ of service specified\nin the Defense Advanced Research Projects Agency (DARPA)\
    \ Internet\nexperiment [5].  The basic Name Server is described in this paper\n\
    and a set of additional functions that such a service might be\nexpected to support\
    \ is proposed.\n  The discussion is structured as follows:  Section 1 describes\n\
    the NIC Name Server and how it is derived from the NIC data base\nservice.  Section\
    \ 2 describes extensions of the name server which\n3 discusses architectural issues,\
    \ and presents some preliminary\nthoughts on how to evolve from the current centralized,\n\
    hierarchic service to a distributed Name Server service.\n2. THE NIC NAME SERVER\n\
    \  A Name Server service has been installed on SRI-KA, an Arpanet\nDEC-10.  Inquiry-response\
    \ access is via the Internet Name Server\nprotocol [5], which in turn employs\
    \ the DARPA Internet Protocol,\nIP4 [7].\n  To demonstrate the service a simple\
    \ interactive facility is\nprovided to format user input into name server requests--e.g.\
    \ a\nquery of the form !ARPANET!FOO-TENEX returns an address such as\n\"10 2 0\
    \ 9\" (NET=10, HOST=2, LOGICALHOST=0, IMP=9; for details of\nhost address formats\
    \ see [8]).\n  User access to the name server has been implemented on several\n\
    Arpanet DEC-10 TENEX and Packet Radio Network LSI-11 Terminal\nInterface Unit\
    \ (TIU) hosts [9, 10].  While the TENEX program\nserves primarily as a demonstration\
    \ vehicle, the LSI-11 program\nprovides a valuable augmentation of the TIU's host\
    \ table.  A\ntypical scenario is that when the packet radio TIU is initiated\n\
    or initialized, it contains only a minimal host table, with the\naddresses of\
    \ a few candidate name servers.  The user queries the\nname server with a simple\
    \ manual query process, and then uses the\naddress obtained to open a TELNET connection\
    \ to the desired host.\n  The information to support the name server originates\
    \ from the\nNIC's Arpanet host address data base.  An optimized version of\nthis\
    \ data base is presented to the name server upon program\ninitiation as an input\
    \ file.\n3. NAME SERVER ISSUES\n  The basic name server provides a simple address-binding\
    \ service\n[5].  In response to a datagram query [7, 11], the name server\nreturns\
    \ either an address, a list of similar names if a unique\nmatch is not found,\
    \ or an error indication.  Several useful\nadditional functions can be envisioned\
    \ for the name server such\nas service queries and broader access to host-related\n\
    information.\n3.1. Similar Names\n  An important issue to be resolved is that\
    \ of the interpretation\ngiven to the \"similar names\" response.  A standard\
    \ definition\n  If the \"similar names\" response is used primarily to provide\n\
    helpful information to a human-interface process, then it may be\nuseful to model\
    \ the behavior of the name server on the behavior\nof other known processes that\
    \ present host name information on\ndemand.  An example of this is a common implementation\
    \ of virtual\nterminal access on the Arpanet, User TELNET [12], in which three\n\
    different functions occur:\n  1. Upon termination of host name input (e.g. <CR>),\
    \ the\n     user is warned only with an audible alarm if the name\n     used is\
    \ not unique.  If the name is unique, the name is\n     completed, and the requested\
    \ operation is initiated.\n  2. In response to <ESC>, either the name will be\
    \ completed\n     if unique or the user will be warned with an audible\n     alarm\
    \ if the name is not unique.\n  3. Only in response to \"?\" will a list of similar\
    \ names be\n     printed.  \"Similar names\", in this case, means all\n     names\
    \ that begin with the same character string.  The\n     list is alphabetized.\n\
    \  In support of this style of user interface, it may be\nappropriate to return\
    \ the \"similar names\" response only when\nrequested.  Two ways to achieve this\
    \ might be either to set an\noption bit or to use \"?\" to force the similar names\
    \ response.\n3.2. Query Syntax\n  A second issue in the provision of name server\
    \ service is that\nof query syntax.  The basic level of service previously described\n\
    allows only a few query functions.  With more intelligent name\nservers, complex\
    \ queries can be supported.\n  The current Internet name server requires two fields\
    \ in the\nquery string--a network name field and a host name field.  If the\n\
    network field is non-existent, a local network query is assumed.\n  Since network\
    \ independent queries are desirable, an expanded\nquery functionality must be\
    \ specified.  One way this might be\ndone is to add to the notion of \"missing\
    \ field\", which means\n\"local\", the notion of a special character like \"*\"\
    , which means\n\"all\".\n  The semantic range of queries afforded by adopting\
    \ this\nconvention is listed below (Note: ~ is used to mean \"null\".  If\nboth\
    \ network and host fields are null the representation is \"~\n~\".  \"N\" means\
    \ \"network\" and \"H\" means \"host\"):\n~  ~    local net, local host (validity\
    \ check?)\n~  *    local net, all hosts\n~  H    local net, named host\n*  ~ \
    \   all nets, local host (inverse search)\n*  *    all nets, all hosts (probably\
    \ prohibited)\n*  H    all nets, named host\nN  ~    named net, local host (inverse\
    \ search)\nN  *    named net, all hosts\nN  H    named net, named host\n  By combining\
    \ the on-demand similar-names function, \"all\" and\n\"local\", and by allowing\
    \ \"*\" to be prefixed or appended to the\nquery string as a wild card character,\
    \ one can query as follows:\n~  SRI*?        All hosts named SRI* on local net\n\
    *  SRI*?        All hosts named SRI* on all nets\n*  *UNIX*?      All hosts named\
    \ *UNIX* on all nets\n3.3. Service Queries\n  It has been suggested that the name\
    \ server be generalized into\na binding function [13, 14].  In this context, allowing\
    \ service\nqueries is a very useful extension.  One application of this\nservice,\
    \ that exists within the Packet Radio Project at SRI, is\nthe need to find the\
    \ addresses of Hosts that support the\nLoaderServer service--a service that allows\
    \ packet radio TIUs to\nreceive executable programs via downline loading.\n  Service\
    \ querying, unlike host names querying, requires a\nmultiple response capability.\
    \  The querying process would, upon\nreceiving multiple service descriptors, attempt\
    \ to establish\naccess to each service, one at a time, until successful.\n  Service\
    \ descriptors consist of an official name, a list of\nalias names, and a network-dependent\
    \ address.  In the case of\nArpanet Internet services, this address field would\
    \ consist of\nthe host address(32 bits), port(32 bits), and protocol number(8\n\
    bits).  For Arpanet NCP services, the address would consist of a\nhost address(24\
    \ bits) and a socket(32 bits).\n  Syntactically, service queries can be derived\
    \ from host queries\nby the addition of a service name field, as below:\n    \
    \                    NET HOST SERVICE\n  A network-independent service query,\
    \ for example, can be\nrepresented as:\n                           * * SERVICE\n\
    3.4. Name Server Options\n  The concept of options has been introduced in the\
    \ discussion of\nthe \"similar names\" function.  Another group of options may\
    \ be\nused to specify the format of the reply.  At one extreme is the\ncompact,\
    \ binary, style such as exists in the basic level of\nservice.  At the other extreme\
    \ is an expanded, textual, style\nsuch as is represented by a NIC host table record\
    \ with official\nand alias names included.  Options can be envisioned that\nspecify:\n\
    \   - Binary versus text format\n   - Inclusion of each field in the reply\n \
    \  - Inclusion of official name, per field, in the reply\n   - Inclusion of alias\
    \ names, per field, in the reply\n   - Inclusion of other miscellaneous information,\
    \ such as\n     operating system, machine type, access restrictions,\n     and\
    \ so on.\nOther options can be envisioned that specify the scope of the\nsearch,\
    \ such as \"find SERVER hosts only\".  An alternate form for\nspecifying formats\
    \ might be to settle on several standard ones,\nand allow an option to select\
    \ among them.\n  Certainly, not all name servers can support all such options,\n\
    and not all options are equally useful.  Thus, the proposed list\nwill be expanded\
    \ or contracted to fit the actual needs of\nprocesses using the name server service.\n\
    3.5. MORE DATA Protocol\n  It should be noted that some of the proposed name server\n\
    extensions have the potential for generating more than a single\ndatagram's worth\
    \ of reply, since the current DARPA Internet\nProtocol limits the size which all\
    \ networks must support to 576\noctets [15].  In spite of this, the size of such\
    \ replies need not\nexist:\n  1. Disallow options that imply large replies.\n\
    \  2. Truncate the packet for large replies.\n  3. Ignore the recommended maximum\
    \ datagram size.\n  4. Utilize an alternate base protocol for such requests.\n\
    \  5. Develop a MORE DATA protocol.\nIf alternative 1 is chosen, the potential\
    \ for overflow exists,\neven with the basic level of service.  Alternative 2 implies\n\
    unpredictable behavior to the user of the name server service.\nAlternative 3\
    \ reduces the availability of the service.\nAlternative 4 is certainly possible,\
    \ but may be overkill.\n  Alternative 5 appears to be a reasonable solution and\
    \ could be\nimplemented very simply.  The name server could return, as part\n\
    of the reply, a code of the following form:\n                       +------+---------+\n\
    \                       | MORE | ID_NEXT |\n                       +------+---------+\n\
    where ID_NEXT is a name-server-chosen quantity that allows the\nname server to\
    \ find the next block of reply, the next time it is\nqueried.  This quantity may\
    \ be an internal pointer, a block\nnumber, or whatever the name server chooses.\
    \  Follow-on queries\nmay be implemented by recomputing the entire original query\
    \ and\ndiscarding output until the ID_NEXT block is reached, or by\nefficiently\
    \ storing the entire reply in a cache, fragmented into\nblocks (with appropriate\
    \ decay algorithms).\n3.6. Dynamic Updates\n  In the previous discussion, the\
    \ host name data base was assumed\nto have been a static or slowly changing entity\
    \ with an\nadministrative and manual update authority.  This model reflects\n\
    most of the network needs in the Arpanet and Internet\ncommunities.  However,\
    \ dynamic automated updating of the host\ntable may be needed in the future, especially\
    \ in mobile\nenvironments such as the Packet Radio Network.\n  In a closed user\
    \ group community (such as a local network of\nmutually trusting hosts), dynamic\
    \ updating becomes simply a\ntechnical question concerning packet formats.  In\
    \ wider\ncommunities, a mechanism to authenticate the change request must\nbe\
    \ developed; however, the authentication issue is outside the\nscope of this paper.\n\
    4. ARCHITECTURE\n  The Name Server concept is invaluable for allowing hosts with\n\
    incomplete knowledge of the network address space to obtain full\naccess to network\
    \ services.  Whether for reasons of insufficient\nkernel space or of dynamically\
    \ changing environments, the need\nfor the service is little questioned.  However,\
    \ significant\ndesign issues revolve around the methods for providing the\nservice\
    \ and for administering and updating the data base.\n  In the current NIC Name\
    \ Server, the service is centralized, and\nis supported by a data base administered\
    \ by a single authority.\nIn the long range, other architectures are possible\
    \ that present\nmore flexible ways to distribute host information within and\n\
    between networks and administrative entities.  These present\nopportunities for\
    \ dynamic, automated, approaches to the\nmaintenance and sharing of data--particularly\
    \ host name data.\n  From an evolutionary point of view, initial Name Server\n\
    services will likely exist as a centralized service, possibly\nwith one large\
    \ Name Server that has knowledge of multiple\nnetworks.  From this beginning,\
    \ an expansion in two orthogonal\ndirections can be envisioned.\n   - In the direction\
    \ of internal distribution, the name\n     server can be partitioned into multiple,\
    \ cooperating\n     processes on separate hosts.  The data base can be\n     replicated\
    \ exactly or managed as a distributed data\n     base.\n   - In the direction\
    \ of administrative distribution,\n     multiple autonomous name servers may exist\
    \ that\n     exchange data in an appropriate fashion, on a per\n     network or\
    \ other administrative basis.\n  For hosts with small host tables, caching might\
    \ be used,\nwhereby local, temporary copies would be maintained of subsets of\n\
    the addressing data base.  Such copies may be obtained either by\nremembering\
    \ previous queries made of name servers, or by\nreceiving automatic distributions\
    \ of data from name servers.  For\nmobile hosts, in which even the home network\
    \ is unknown, it would\nbe possible to maintain a very sparse table with the addresses\
    \ of\nonly a few name servers.\n  For hosts lacking even the knowledge of name\
    \ server addresses,\na very primitive name server function can be provided by\
    \ all\nnetwork hosts that would allow real name servers to be located;\ne.g.,\
    \ a query of the form \"*  *  RealNameServer\" addressed to an\narbitrarily selected\
    \ host could elicit the address of a real Name\nServer.\n  Finally, the possibility\
    \ exists for multiple name servers to\nfor example, a name server on the Arpanet\
    \ receives a query for a\nhost on the Packet Radio Network, then the Arpanet name\
    \ server\ncan conceivably query the Packet Radio Network Name Server to\nresolve\
    \ the reply.\n5. FUTURE WORK\n  The techniques discussed in this paper for providing\
    \ dynamic\naccess to and maintenance of host address information are\ngenerally\
    \ applicable to other information-providing services.\nTwo possibilities currently\
    \ under investigation at SRI include\nuser identification servers [16] and time\
    \ servers, which offer\npeople/address and time-stamp information, respectively,\
    \ as\ndatagram driven information utilities.\n  Further work is needed to refine\
    \ the implementation of the name\nserver and its using query processes.  Two items\
    \ in particular\nare direct system calls into the NIC data base management system\n\
    for general access to host information and process-level query\ninterfaces for\
    \ using processes.  The design issues for efficient\nimplementation are complex\
    \ and involve some trade-offs.  The most\nobvious trade-off is volume of network\
    \ traffic versus \"freshness\"\nof information. The local host table handler can\
    \ either send a\nmessage to the name server for every address request, or it can\n\
    use some type of local cache to remember frequently requested\nnames.  SRI is\
    \ exploring both the process-level interface for the\nLSI-11 TIU and the problems\
    \ of local host table management in\nsmall machines operating in a dynamic environment.\n\
    \  Information services such as the Name Server are integral\ncomponents of distributed\
    \ systems and applications.  However, the\neffective utilization of such services\
    \ is a relatively unstudied\nand unexplored area.  One area in which SRI plans\
    \ to study their\nimpact on distributed architectures is in computer based mail\n\
    applications.  Information utilities in this environment can\nrange from the support\
    \ of simple mailbox address queries to\ncomplex address list management needed\
    \ for inter-organizational\nand group resolution.\n6. CONCLUSION\n  A provisional\
    \ Name Server service, based on the NIC host\naddress data base was described\
    \ in this paper.  In addition, a\ncollection of design ideas for an internet Name\
    \ Server service\nhas been presented.\n  Work is continuing on the refinement\
    \ of the NIC name server\nservice.  New requirements and opportunities for functional\n\
    raised in exploring an expansion of the existing service. Such an\nexpansion is\
    \ expected to result in more useful support of\ninternet (and intranet) capability.\n\
    REFERENCES\n1.    L. G. Roberts and B. D. Wessler, \"Computer Network\n      Development\
    \ to Achieve Resource Sharing,\" in Proceedings of\n      SJCC, pp. 543-549 (AFIP,\
    \ 1970).\n2.    M. D. Kudlick and E. J. Feinler, Host Names On-line, RFC\n   \
    \   608, Stanford Research Institute, Menlo Park, California\n      (January 1974).\n\
    3.    V. G. Cerf and R. E. Kahn, \"A Protocol for Packet Network\n      Interconnection,\"\
    \ IEEE Transactions on Communication\n      Technology, Vol. COM-22, pp. 637-641\
    \ (1974)._\n4.    V. G. Cerf and P. T. Kirstein, \"Issues in Packet-Network\n\
    \      Interconnection,\" Proc. IEEE, Vol. 66, No. 11, pp.\n      1386-1408 (November\
    \ 1978).\n5.    J. Postel, Internet Name Server, IEN 89, Information\n      Sciences\
    \ Institute, Univ. of Southern Calif., Marina Del\n      Rey, California, May\
    \ 1979.\n6.    J. R. Pickens, E. J. Feinler and J. E. Mathis, An\n      Experimental\
    \ Network Information Center Name Server\n      (NICNAME), IEN 103, SRI International,\
    \ Menlo Park,\n      California (May 1979).\n7.    J. Postel, Internet Protocol,\
    \ IEN 81, Information Sciences\n      Institute, Univ. of Southern Calif., Marina\
    \ Del Rey,\n      California (February 1979).\n8.    J. Postel, Address Mappings,\
    \ IEN 91, Information Sciences\n      Institute, Univ. of Southern Calif., Marina\
    \ Del Rey,\n      California (May 1979).\n9.    R. E. Kahn, \"The Organization\
    \ of Computer Resources into a\n      Packet Radio Network,\" IEEE Transactions\
    \ on Communications,\n      Vol. COM-25, No. 1, pp. 169-178 (January 1977).\n\
    10.   R. E. Kahn, S. A. Gronemeyer, J. Burchfiel, and R. C.\n      Kunzelman,\
    \ \"Advances in Packet Radio Technology,\" Proc.\n      IEEE, Vol. 66, No. 11,\
    \ pp. 1468-1496 (November 1978).\n11.   J. Postel, User Datagram Protocol, IEN\
    \ 88, Information\n      Sciences Institute, Univ. of Southern Calif., Marina\
    \ Del\n      Rey, California (May 1979).\n12.   E. Leavitt, TENEX USER'S GUIDE,\
    \ Bolt Beranek and Newman,\n      Inc., Cambridge, Massachusetts.\n13.   R. Bressler,\
    \ A Proposed Experiment With a Message Switching\n      Protocol (section on Information\
    \ Operator), pp. 26-31, RFC\n      333, Bolt Beranek and Newman Inc, Cambridge,\
    \ Mass. (May 15,\n      1972).\n14.   Y. Dalal, Internet Meeting, January 24,25\
    \ 1979, (Group\n      Discussion).\n15.   J. Postel, Internet Meeting Notes -\
    \ 25,26 January 1979, pp.\n      12, IEN 76, Information Sciences Institute, Univ.\
    \ of\n      Southern Calif., Marina Del Rey, California (February\n      1979).\n\
    16.   E. J. Feinler, \"The Identification Data Base in a\n      Networking Environment,\"\
    \ in NTC '77 Conference Record, pp.\n      21:3 (IEEE, 1977).\n              \
    \          Table of Contents\n1. INTRODUCTION                                \
    \                 1\n2. THE NIC NAME SERVER                                  \
    \        2\n3. NAME SERVER ISSUES                                           2\n\
    \     3.1. Similar Names                                         2\n     3.2.\
    \ Query Syntax                                          3\n     3.3. Service Queries\
    \                                       4\n     3.4. Name Server Options     \
    \                              5\n     3.5. MORE DATA Protocol               \
    \                     5\n     3.6. Dynamic Updates                           \
    \            6\n4. ARCHITECTURE                                              \
    \   7\n5. FUTURE WORK                                                  8\n6. CONCLUSION\
    \                                                   8\nREFERENCES            \
    \                                          9\n"
