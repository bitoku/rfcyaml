- contents:
  - '                JSON Encoding of Data Modeled with YANG

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines encoding rules for representing configuration\n
    \  data, state data, parameters of Remote Procedure Call (RPC)\n   operations
    or actions, and notifications defined using YANG as\n   JavaScript Object Notation
    (JSON) text.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7951.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology and Notation  . . . . . . . . . . . . . . .
    . . .   3\n   3.  Properties of the JSON Encoding . . . . . . . . . . . . . .
    .   4\n   4.  Names and Namespaces  . . . . . . . . . . . . . . . . . . . .   5\n
    \  5.  Encoding of YANG Data Node Instances  . . . . . . . . . . . .   7\n     5.1.
    \ The \"leaf\" Data Node  . . . . . . . . . . . . . . . . . .   7\n     5.2.  The
    \"container\" Data Node . . . . . . . . . . . . . . . .   8\n     5.3.  The \"leaf-list\"
    Data Node . . . . . . . . . . . . . . . .   8\n     5.4.  The \"list\" Data Node
    \ . . . . . . . . . . . . . . . . . .   9\n     5.5.  The \"anydata\" Data Node
    . . . . . . . . . . . . . . . . .   9\n     5.6.  The \"anyxml\" Data Node  .
    . . . . . . . . . . . . . . . .  10\n     5.7.  Metadata Objects  . . . . . .
    . . . . . . . . . . . . . .  11\n   6.  Representing YANG Data Types in JSON Values
    . . . . . . . . .  11\n     6.1.  Numeric Types . . . . . . . . . . . . . . .
    . . . . . . .  11\n     6.2.  The \"string\" Type . . . . . . . . . . . . . .
    . . . . . .  11\n     6.3.  The \"boolean\" Type  . . . . . . . . . . . . . .
    . . . . .  11\n     6.4.  The \"enumeration\" Type  . . . . . . . . . . . . .
    . . . .  12\n     6.5.  The \"bits\" Type . . . . . . . . . . . . . . . . . .
    . . .  12\n     6.6.  The \"binary\" Type . . . . . . . . . . . . . . . . . .
    . .  12\n     6.7.  The \"leafref\" Type  . . . . . . . . . . . . . . . . . .
    .  12\n     6.8.  The \"identityref\" Type  . . . . . . . . . . . . . . . . .
    \ 12\n     6.9.  The \"empty\" Type  . . . . . . . . . . . . . . . . . . . .  13\n
    \    6.10. The \"union\" Type  . . . . . . . . . . . . . . . . . . . .  14\n     6.11.
    The \"instance-identifier\" Type  . . . . . . . . . . . . .  15\n   7.  I-JSON
    Compliance . . . . . . . . . . . . . . . . . . . . . .  15\n   8.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  16\n   9.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  16\n     9.1.  Normative References  . . .
    . . . . . . . . . . . . . . .  16\n     9.2.  Informative References  . . . .
    . . . . . . . . . . . . .  17\n   Appendix A.  A Complete Example . . . . . .
    . . . . . . . . . . .  18\n   Acknowledgements  . . . . . . . . . . . . . . .
    . . . . . . . . .  20\n   Author's Address  . . . . . . . . . . . . . . . . .
    . . . . . . .  20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Network Configuration Protocol (NETCONF) [RFC6241] uses
    XML [XML]\n   for encoding data in its Content Layer.  Other management protocols\n
    \  might want to use other encodings while still benefiting from using\n   YANG
    [RFC7950] as the data modeling language.\n   For example, the RESTCONF protocol
    [RESTCONF] supports two encodings:\n   XML (media type \"application/yang.data+xml\")
    and JavaScript Object\n   Notation (JSON) (media type \"application/yang.data+json\").\n
    \  The specification of the YANG 1.1 data modeling language [RFC7950]\n   defines
    only XML encoding of data trees, i.e., configuration data,\n   state data, input/output
    parameters of Remote Procedure Call (RPC)\n   operations or actions, and notifications.
    \ The aim of this document\n   is to define rules for encoding the same data as
    JSON text [RFC7159].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology and Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  The following terms are defined in [RFC7950]:\n   o  action\n   o  anydata\n
    \  o  anyxml\n   o  augment\n   o  container\n   o  data node\n   o  data tree\n
    \  o  identity\n   o  instance identifier\n   o  leaf\n   o  leaf-list\n   o  list\n
    \  o  module\n   o  RPC operation\n   o  submodule\n   The following terms are
    defined in [RFC6241]:\n   o  configuration data\n   o  notification\n   o  state
    data\n"
  title: 2.  Terminology and Notation
- contents:
  - "3.  Properties of the JSON Encoding\n   This document defines JSON encoding for
    YANG data trees and their\n   subtrees.  It is always assumed that the top-level
    structure in JSON-\n   encoded data is an object.\n   Instances of YANG data nodes
    (leafs, containers, leaf-lists, lists,\n   anydata nodes, and anyxml nodes) are
    encoded as members of a JSON\n   object, i.e., name/value pairs.  Section 4 defines
    how the name part\n   is formed, and the following sections deal with the value
    part.  The\n   encoding rules are identical for all types of data trees, i.e.,\n
    \  configuration data, state data, parameters of RPC operations,\n   actions,
    and notifications.\n   With the exception of \"anydata\" encoding (Section 5.5),
    all rules in\n   this document are also applicable to YANG 1.0 [RFC6020].\n   Unlike
    XML element content, JSON values carry partial type\n   information (number, string,
    boolean).  The JSON encoding is defined\n   so that this information is never
    in conflict with the data type of\n   the corresponding YANG leaf or leaf-list.\n
    \  With the exception of anyxml and schema-less anydata nodes, it is\n   possible
    to map a JSON-encoded data tree to XML encoding as defined\n   in [RFC7950], and
    vice versa.  However, such conversions require the\n   YANG data model to be available.\n
    \  In order to achieve maximum interoperability while allowing\n   implementations
    to use a variety of existing JSON parsers, the JSON\n   encoding rules follow,
    as much as possible, the constraints of the\n   I-JSON (Internet JSON) restricted
    profile [RFC7493].  Section 7\n   discusses I-JSON conformance in more detail.\n"
  title: 3.  Properties of the JSON Encoding
- contents:
  - "4.  Names and Namespaces\n   A JSON object member name MUST be in one of the
    following forms:\n   o  simple - identical to the identifier of the corresponding
    YANG\n      data node.\n   o  namespace-qualified - the data node identifier is
    prefixed with\n      the name of the module in which the data node is defined,\n
    \     separated from the data node identifier by the colon character\n      (\":\").\n
    \  The name of a module determines the namespace of all data node names\n   defined
    in that module.  If a data node is defined in a submodule,\n   then the namespace-qualified
    member name uses the name of the main\n   module to which the submodule belongs.\n
    \  ABNF syntax [RFC5234] of a member name is shown in Figure 1, where\n   the
    production for \"identifier\" is defined in Section 14 of\n   [RFC7950].\n           member-name
    = [identifier \":\"] identifier\n             Figure 1: ABNF Production for a
    JSON Member Name\n   A namespace-qualified member name MUST be used for all members
    of a\n   top-level JSON object and then also whenever the namespaces of the\n
    \  data node and its parent node are different.  In all other cases, the\n   simple
    form of the member name MUST be used.\n   For example, consider the following
    YANG module:\n   module example-foomod {\n     namespace \"http://example.com/foomod\";\n
    \    prefix \"foomod\";\n     container top {\n       leaf foo {\n         type
    uint8;\n       }\n     }\n   }\n   If the data model consists only of this module,
    then the following is\n   valid JSON-encoded configuration data:\n   {\n     \"example-foomod:top\":
    {\n       \"foo\": 54\n     }\n   }\n   Note that the member of the top-level
    object uses the namespace-\n   qualified name but the \"foo\" leaf doesn't because
    it is defined in\n   the same module as its parent container \"top\".\n   Now,
    assume that the container \"top\" is augmented from another\n   module, \"example-barmod\":\n
    \  module example-barmod {\n     namespace \"http://example.com/barmod\";\n     prefix
    \"barmod\";\n     import example-foomod {\n       prefix \"foomod\";\n     }\n
    \    augment \"/foomod:top\" {\n       leaf bar {\n         type boolean;\n       }\n
    \    }\n   }\n   Valid JSON-encoded configuration data containing both leafs may
    then\n   look like this:\n   {\n     \"example-foomod:top\": {\n       \"foo\":
    54,\n       \"example-barmod:bar\": true\n     }\n   }\n   The name of the \"bar\"
    leaf is prefixed with the namespace identifier\n   because its parent is defined
    in a different module.\n   Explicit namespace identifiers are sometimes needed
    when encoding\n   values of the \"identityref\" and \"instance-identifier\" types.
    \ The\n   same form of namespace-qualified name as defined above is then used.\n
    \  See Sections 6.8 and 6.11 for details.\n"
  title: 4.  Names and Namespaces
- contents:
  - "5.  Encoding of YANG Data Node Instances\n   Every data node instance is encoded
    as a name/value pair where the\n   name is formed from the data node identifier
    using the rules of\n   Section 4.  The value depends on the category of the data
    node, as\n   explained in the following subsections.\n   Character encoding MUST
    be UTF-8.\n"
  - contents:
    - "5.1.  The \"leaf\" Data Node\n   A leaf instance is encoded as a name/value
      pair where the value can\n   be a string, number, literal \"true\" or \"false\",
      or the special array\n   \"[null]\", depending on the type of the leaf (see
      Section 6 for the\n   type encoding rules).\n   Example: For the leaf node definition\n
      \  leaf foo {\n     type uint8;\n   }\n   the following is a valid JSON-encoded
      instance:\n   \"foo\": 123\n"
    title: 5.1.  The "leaf" Data Node
  - contents:
    - "5.2.  The \"container\" Data Node\n   A container instance is encoded as a
      name/object pair.  The\n   container's child data nodes are encoded as members
      of the object.\n   Example: For the container definition\n   container bar {\n
      \    leaf foo {\n       type uint8;\n     }\n   }\n   the following is a valid
      JSON-encoded instance:\n   \"bar\": {\n     \"foo\": 123\n   }\n"
    title: 5.2.  The "container" Data Node
  - contents:
    - "5.3.  The \"leaf-list\" Data Node\n   A leaf-list is encoded as a name/array
      pair, and the array elements\n   are values of some scalar type, which can be
      a string, number,\n   literal \"true\" or \"false\", or the special array \"[null]\",
      depending\n   on the type of the leaf-list (see Section 6 for the type encoding\n
      \  rules).\n   The ordering of array elements follows the same rules as the
      ordering\n   of XML elements representing leaf-list entries in the XML encoding.\n
      \  Specifically, the \"ordered-by\" properties (Section 7.7.7 in\n   [RFC7950])
      MUST be observed.\n   Example: For the leaf-list definition\n   leaf-list foo
      {\n     type uint8;\n   }\n   the following is a valid JSON-encoded instance:\n
      \  \"foo\": [123, 0]\n"
    title: 5.3.  The "leaf-list" Data Node
  - contents:
    - "5.4.  The \"list\" Data Node\n   A list instance is encoded as a name/array
      pair, and the array\n   elements are JSON objects.\n   The ordering of array
      elements follows the same rules as the ordering\n   of XML elements representing
      list entries in the XML encoding.\n   Specifically, the \"ordered-by\" properties
      (Section 7.7.7 in\n   [RFC7950]) MUST be observed.\n   Unlike the XML encoding,
      where list keys are required to precede any\n   other siblings within a list
      entry and appear in the order specified\n   by the data model, the order of
      members in a JSON-encoded list entry\n   is arbitrary because JSON objects are
      fundamentally unordered\n   collections of members.\n   Example: For the list
      definition\n   list bar {\n     key foo;\n     leaf foo {\n       type uint8;\n
      \    }\n     leaf baz {\n       type string;\n     }\n   }\n   the following
      is a valid JSON-encoded instance:\n   \"bar\": [\n     {\n       \"foo\": 123,\n
      \      \"baz\": \"zig\"\n     },\n     {\n       \"baz\": \"zag\",\n       \"foo\":
      0\n     }\n   ]\n"
    title: 5.4.  The "list" Data Node
  - contents:
    - "5.5.  The \"anydata\" Data Node\n   The anydata data node serves as a container
      for an arbitrary set of\n   nodes that otherwise appear as normal YANG-modeled
      data.  A data\n   model for anydata content may or may not be known at runtime.
      \ In the\n   latter case, converting JSON-encoded instances to the XML encoding\n
      \  defined in [RFC7950] may be impossible.\n   An anydata instance is encoded
      in the same way as a container, i.e.,\n   as a name/object pair.  The requirement
      that anydata content can be\n   modeled by YANG implies the following rules
      for the JSON text inside\n   the object:\n   o  It is valid I-JSON [RFC7493].\n
      \  o  All object member names satisfy the ABNF production in Figure 1.\n   o
      \ Any JSON array contains either only unique scalar values (as a\n      leaf-list;
      see Section 5.3) or only objects (as a list; see\n      Section 5.4).\n   o
      \ The \"null\" value is only allowed in the single-element array\n      \"[null]\"
      corresponding to the encoding of the \"empty\" type; see\n      Section 6.9.\n
      \  Example: For the anydata definition\n   anydata data;\n   the following is
      a valid JSON-encoded instance:\n   \"data\": {\n     \"ietf-notification:notification\":
      {\n       \"eventTime\": \"2014-07-29T13:43:01Z\",\n       \"example-event:event\":
      {\n         \"event-class\": \"fault\",\n         \"reporting-entity\": {\n
      \          \"card\": \"Ethernet0\"\n         },\n         \"severity\": \"major\"\n
      \      }\n     }\n   }\n"
    title: 5.5.  The "anydata" Data Node
  - contents:
    - "5.6.  The \"anyxml\" Data Node\n   An anyxml instance is encoded as a JSON
      name/value pair.  The value\n   MUST satisfy I-JSON constraints.\n   Example:
      For the anyxml definition\n   anyxml bar;\n   the following is a valid JSON-encoded
      instance:\n   \"bar\": [true, null, true]\n"
    title: 5.6.  The "anyxml" Data Node
  - contents:
    - "5.7.  Metadata Objects\n   Apart from instances of YANG data nodes, a JSON
      document MAY contain\n   special object members whose name starts with the \"@\"
      character\n   (COMMERCIAL AT).  Such members are used for special purposes,
      such as\n   encoding metadata [RFC7952].  The exact syntax and semantics of
      such\n   members are outside the scope of this document.\n"
    title: 5.7.  Metadata Objects
  title: 5.  Encoding of YANG Data Node Instances
- contents:
  - "6.  Representing YANG Data Types in JSON Values\n   The type of the JSON value
    in an instance of the leaf or leaf-list\n   data node depends on the type of that
    data node, as specified in the\n   following subsections.\n"
  - contents:
    - "6.1.  Numeric Types\n   A value of the \"int8\", \"int16\", \"int32\", \"uint8\",
      \"uint16\", or\n   \"uint32\" type is represented as a JSON number.\n   A value
      of the \"int64\", \"uint64\", or \"decimal64\" type is represented\n   as a
      JSON string whose content is the lexical representation of the\n   corresponding
      YANG type as specified in Sections 9.2.1 and 9.3.1 of\n   [RFC7950].\n   For
      example, if the type of the leaf \"foo\" in Section 5.1 was\n   \"uint64\" instead
      of \"uint8\", the instance would have to be encoded as\n   \"foo\": \"123\"\n
      \  The special handling of 64-bit numbers follows from the I-JSON\n   recommendation
      to encode numbers exceeding the IEEE 754-2008\n   double-precision range [IEEE754-2008]
      as strings; see Section 2.2 in\n   [RFC7493].\n"
    title: 6.1.  Numeric Types
  - contents:
    - "6.2.  The \"string\" Type\n   A \"string\" value is represented as a JSON string,
      subject to JSON\n   string encoding rules.\n"
    title: 6.2.  The "string" Type
  - contents:
    - "6.3.  The \"boolean\" Type\n   A \"boolean\" value is represented as the corresponding
      JSON literal\n   name \"true\" or \"false\".\n"
    title: 6.3.  The "boolean" Type
  - contents:
    - "6.4.  The \"enumeration\" Type\n   An \"enumeration\" value is represented
      as a JSON string -- one of the\n   names assigned by \"enum\" statements in
      YANG.\n   The representation is identical to the lexical representation of the\n
      \  \"enumeration\" type in XML; see Section 9.6 in [RFC7950].\n"
    title: 6.4.  The "enumeration" Type
  - contents:
    - "6.5.  The \"bits\" Type\n   A \"bits\" value is represented as a JSON string
      -- a space-separated\n   sequence of names of bits that are set.  The permitted
      bit names are\n   assigned by \"bit\" statements in YANG.\n   The representation
      is identical to the lexical representation of the\n   \"bits\" type; see Section
      9.7 in [RFC7950].\n"
    title: 6.5.  The "bits" Type
  - contents:
    - "6.6.  The \"binary\" Type\n   A \"binary\" value is represented as a JSON string
      -- base64 encoding\n   of arbitrary binary data.\n   The representation is identical
      to the lexical representation of the\n   \"binary\" type in XML; see Section
      9.8 in [RFC7950].\n"
    title: 6.6.  The "binary" Type
  - contents:
    - "6.7.  The \"leafref\" Type\n   A \"leafref\" value is represented using the
      same rules as the type of\n   the leaf to which the leafref value refers.\n"
    title: 6.7.  The "leafref" Type
  - contents:
    - "6.8.  The \"identityref\" Type\n   An \"identityref\" value is represented
      as a string -- the name of an\n   identity.  If the identity is defined in a
      module other than the leaf\n   node containing the identityref value, the namespace-qualified
      form\n   (Section 4) MUST be used.  Otherwise, both the simple and namespace-\n
      \  qualified forms are permitted.\n   For example, consider the following schematic
      module:\n   module example-mod {\n     ...\n     import ietf-interfaces {\n
      \      prefix if;\n     }\n     ...\n     leaf type {\n       type identityref
      {\n         base \"if:interface-type\";\n       }\n     }\n   }\n   A valid
      instance of the \"type\" leaf is then encoded as follows:\n   \"type\": \"iana-if-type:ethernetCsmacd\"\n
      \  The namespace identifier \"iana-if-type\" must be present in this case\n
      \  because the \"ethernetCsmacd\" identity is not defined in the same\n   module
      as the \"type\" leaf.\n"
    title: 6.8.  The "identityref" Type
  - contents:
    - "6.9.  The \"empty\" Type\n   An \"empty\" value is represented as \"[null]\",
      i.e., an array with the\n   \"null\" literal being its only element.  For the
      purposes of this\n   document, \"[null]\" is considered an atomic scalar value.\n
      \  This encoding of the \"empty\" type was chosen instead of using simply\n
      \  \"null\" in order to facilitate the use of empty leafs in common\n   programming
      languages where the \"null\" value of a member is treated\n   as if the member
      is not present.\n   Example: For the leaf definition\n   leaf foo {\n     type
      empty;\n   }\n   a valid instance is\n   \"foo\": [null]\n"
    title: 6.9.  The "empty" Type
  - contents:
    - "6.10.  The \"union\" Type\n   A value of the \"union\" type is encoded as the
      value of any of the\n   member types.\n   When validating a value of the \"union\"
      type, the type information\n   conveyed by the JSON encoding MUST also be taken
      into account.  JSON\n   syntax thus provides additional means for resolving
      the member type\n   of the union that are not available in XML encoding.\n   For
      example, consider the following YANG definition:\n   leaf bar {\n     type union
      {\n       type uint16;\n       type string;\n     }\n   }\n   In RESTCONF [RESTCONF],
      it is possible to set the value of \"bar\" in\n   the following way when using
      the \"application/yang.data+xml\"\n   media type:\n   <bar>13.5</bar>\n   because
      the value may be interpreted as a string, i.e., the\n   second member type of
      the union.  When using the\n   \"application/yang.data+json\" media type, however,
      this is an error:\n   \"bar\": 13.5\n   In this case, the JSON encoding indicates
      that the value is supposed\n   to be a number rather than a string, and it is
      not a valid \"uint16\"\n   value.\n   Conversely, the value of\n   \"bar\":
      \"1\"\n   is to be interpreted as a string.\n"
    title: 6.10.  The "union" Type
  - contents:
    - "6.11.  The \"instance-identifier\" Type\n   An \"instance-identifier\" value
      is encoded as a string that is\n   analogical to the lexical representation
      in XML encoding; see\n   Section 9.13.2 in [RFC7950].  However, the encoding
      of namespaces in\n   instance-identifier values follows the rules stated in
      Section 4,\n   namely:\n   o  The leftmost (top-level) data node name is always
      in the\n      namespace-qualified form.\n   o  Any subsequent data node name
      is in the namespace-qualified form\n      if the node is defined in a module
      other than its parent node, and\n      the simple form is used otherwise.  This
      rule also holds for node\n      names appearing in predicates.\n   For example,\n
      \  /ietf-interfaces:interfaces/interface[name='eth0']/ietf-ip:ipv4/ip\n   is
      a valid instance-identifier value because the data nodes\n   \"interfaces\",
      \"interface\", and \"name\" are defined in the module\n   \"ietf-interfaces\",
      whereas \"ipv4\" and \"ip\" are defined in \"ietf-ip\".\n"
    title: 6.11.  The "instance-identifier" Type
  title: 6.  Representing YANG Data Types in JSON Values
- contents:
  - "7.  I-JSON Compliance\n   I-JSON [RFC7493] is a restricted profile of JSON that
    guarantees\n   maximum interoperability for protocols that use JSON in their\n
    \  messages, no matter what JSON encoders/decoders are used in protocol\n   implementations.
    \ The encoding defined in this document therefore\n   observes the I-JSON requirements
    and recommendations as closely as\n   possible.\n   In particular, the following
    properties are guaranteed:\n   o  Character encoding is UTF-8.\n   o  Member names
    within the same JSON object are always unique.\n   o  The order of JSON object
    members is never relied upon.\n   o  Numbers of any type supported by YANG can
    be exchanged reliably.\n      See Section 6.1 for details.\n   The JSON encoding
    defined in this document deviates from I-JSON only\n   in the representation of
    the \"binary\" type.  In order to remain\n   compatible with XML encoding, the
    base64 encoding scheme is used\n   (Section 6.6), whilst I-JSON recommends base64url
    instead.\n"
  title: 7.  I-JSON Compliance
- contents:
  - "8.  Security Considerations\n   This document defines an alternative encoding
    for data modeled in the\n   YANG data modeling language.  As such, it doesn't
    contribute any new\n   security issues beyond those discussed in Section 17 of
    [RFC7950].\n   This document defines no mechanisms for signing and encrypting
    data\n   modeled with YANG.  Under normal circumstances, data security and\n   integrity
    are guaranteed by the management protocol in use, such as\n   NETCONF [RFC6241]
    or RESTCONF [RESTCONF].  If this is not the case,\n   external mechanisms, such
    as Public-Key Cryptography Standards (PKCS)\n   #7 [RFC2315] or JSON Object Signing
    and Encryption (JOSE) [RFC7515]\n   [RFC7516], need to be considered.\n   JSON
    processing is rather different from XML, and JSON parsers may\n   thus suffer
    from different types of vulnerabilities than their XML\n   counterparts.  To minimize
    these new security risks, software on the\n   receiving side SHOULD reject all
    messages that do not comply with the\n   rules of this document and reply with
    an appropriate error message to\n   the sender.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n
      \             2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7493]
      \ Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI
      10.17487/RFC7493, March 2015,\n              <http://www.rfc-editor.org/info/rfc7493>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <http://www.rfc-editor.org/info/rfc7950>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [IEEE754-2008]\n              IEEE, \"IEEE
      Standard for Floating-Point Arithmetic\",\n              IEEE 754-2008, DOI
      10.1109/IEEESTD.2008.4610935, 2008,\n              <http://standards.ieee.org/findstds/\n
      \             standard/754-2008.html>.\n   [RESTCONF] Bierman, A., Bjorklund,
      M., and K. Watsen, \"RESTCONF\n              Protocol\", Work in Progress,\n
      \             draft-ietf-netconf-restconf-16, August 2016.\n   [RFC2315]  Kaliski,
      B., \"PKCS #7: Cryptographic Message Syntax\n              Version 1.5\", RFC
      2315, DOI 10.17487/RFC2315, March 1998,\n              <http://www.rfc-editor.org/info/rfc2315>.\n
      \  [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <http://www.rfc-editor.org/info/rfc6020>.\n   [RFC7223]
      \ Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 7223, DOI 10.17487/RFC7223, May 2014,\n              <http://www.rfc-editor.org/info/rfc7223>.\n
      \  [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <http://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC7516]  Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n
      \             RFC 7516, DOI 10.17487/RFC7516, May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n
      \  [RFC7952]  Lhotka, L., \"Defining and Using Metadata with YANG\",\n              RFC
      7952, DOI 10.17487/RFC7952, August 2016,\n              <http://www.rfc-editor.org/info/rfc7952>.\n
      \  [XML]      Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n              F.
      Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth\n              Edition)\",
      World Wide Web Consortium Recommendation\n              REC-xml-20081126, November
      2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  A Complete Example\n   The JSON document shown below represents
    the same data as the reply\n   to the NETCONF <get> request appearing in Appendix
    D of [RFC7223].\n   The data model is a combination of two YANG modules:\n   \"ietf-interfaces\"
    and \"ex-vlan\" (the latter is an example module from\n   Appendix C of [RFC7223]).
    \ The \"if-mib\" feature defined in the\n   \"ietf-interfaces\" module is supported.\n
    \  {\n     \"ietf-interfaces:interfaces\": {\n       \"interface\": [\n         {\n
    \          \"name\": \"eth0\",\n           \"type\": \"iana-if-type:ethernetCsmacd\",\n
    \          \"enabled\": false\n         },\n         {\n           \"name\": \"eth1\",\n
    \          \"type\": \"iana-if-type:ethernetCsmacd\",\n           \"enabled\":
    true,\n           \"ex-vlan:vlan-tagging\": true\n         },\n         {\n           \"name\":
    \"eth1.10\",\n           \"type\": \"iana-if-type:l2vlan\",\n           \"enabled\":
    true,\n           \"ex-vlan:base-interface\": \"eth1\",\n           \"ex-vlan:vlan-id\":
    10\n         },\n         {\n           \"name\": \"lo1\",\n           \"type\":
    \"iana-if-type:softwareLoopback\",\n           \"enabled\": true\n         }\n
    \      ]\n     },\n     \"ietf-interfaces:interfaces-state\": {\n       \"interface\":
    [\n         {\n           \"name\": \"eth0\",\n           \"type\": \"iana-if-type:ethernetCsmacd\",\n
    \          \"admin-status\": \"down\",\n           \"oper-status\": \"down\",\n
    \          \"if-index\": 2,\n           \"phys-address\": \"00:01:02:03:04:05\",\n
    \          \"statistics\": {\n             \"discontinuity-time\": \"2013-04-01T03:00:00+00:00\"\n
    \          }\n         },\n         {\n           \"name\": \"eth1\",\n           \"type\":
    \"iana-if-type:ethernetCsmacd\",\n           \"admin-status\": \"up\",\n           \"oper-status\":
    \"up\",\n           \"if-index\": 7,\n           \"phys-address\": \"00:01:02:03:04:06\",\n
    \          \"higher-layer-if\": [\n             \"eth1.10\"\n           ],\n           \"statistics\":
    {\n             \"discontinuity-time\": \"2013-04-01T03:00:00+00:00\"\n           }\n
    \        },\n         {\n           \"name\": \"eth1.10\",\n           \"type\":
    \"iana-if-type:l2vlan\",\n           \"admin-status\": \"up\",\n           \"oper-status\":
    \"up\",\n           \"if-index\": 9,\n           \"lower-layer-if\": [\n             \"eth1\"\n
    \          ],\n           \"statistics\": {\n             \"discontinuity-time\":
    \"2013-04-01T03:00:00+00:00\"\n           }\n         },\n         {\n           \"name\":
    \"eth2\",\n           \"type\": \"iana-if-type:ethernetCsmacd\",\n           \"admin-status\":
    \"down\",\n           \"oper-status\": \"down\",\n           \"if-index\": 8,\n
    \          \"phys-address\": \"00:01:02:03:04:07\",\n           \"statistics\":
    {\n             \"discontinuity-time\": \"2013-04-01T03:00:00+00:00\"\n           }\n
    \        },\n         {\n           \"name\": \"lo1\",\n           \"type\": \"iana-if-type:softwareLoopback\",\n
    \          \"admin-status\": \"up\",\n           \"oper-status\": \"up\",\n           \"if-index\":
    1,\n           \"statistics\": {\n             \"discontinuity-time\": \"2013-04-01T03:00:00+00:00\"\n
    \          }\n         }\n       ]\n     }\n   }\n"
  title: Appendix A.  A Complete Example
- contents:
  - "Acknowledgements\n   The author wishes to thank Andy Bierman, Martin Bjorklund,
    Dean\n   Bogdanovic, Balazs Lengyel, Juergen Schoenwaelder, and Phil Shafer\n
    \  for their helpful comments and suggestions.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Ladislav Lhotka\n   CZ.NIC\n   Email: lhotka@nic.cz\n"
  title: Author's Address
