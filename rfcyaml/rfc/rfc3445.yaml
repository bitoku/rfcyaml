- title: __initial_text__
  contents:
  - '           Limiting the Scope of the KEY Resource Record (RR)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document limits the Domain Name System (DNS) KEY Resource Record\n\
    \   (RR) to only keys used by the Domain Name System Security Extensions\n   (DNSSEC).\
    \  The original KEY RR used sub-typing to store both DNSSEC\n   keys and arbitrary\
    \ application keys.  Storing both DNSSEC and\n   application keys with the same\
    \ record type is a mistake.  This\n   document removes application keys from the\
    \ KEY record by redefining\n   the Protocol Octet field in the KEY RR Data.  As\
    \ a result of removing\n   application keys, all but one of the flags in the KEY\
    \ record become\n   unnecessary and are redefined.  Three existing application\
    \ key sub-\n   types are changed to reserved, but the format of the KEY record\
    \ is\n   not changed.  This document updates RFC 2535.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document limits the scope of the KEY Resource Record\
    \ (RR).  The\n   KEY RR was defined in [3] and used resource record sub-typing\
    \ to hold\n   arbitrary public keys such as Email, IPSEC, DNSSEC, and TLS keys.\n\
    \   This document eliminates the existing Email, IPSEC, and TLS sub-types\n  \
    \ and prohibits the introduction of new sub-types.  DNSSEC will be the\n   only\
    \ allowable sub-type for the KEY RR (hence sub-typing is\n   essentially eliminated)\
    \ and all but one of the KEY RR flags are also\n   eliminated.\n   Section 2 presents\
    \ the motivation for restricting the KEY record and\n   Section 3 defines the\
    \ revised KEY RR.  Sections 4 and 5 summarize the\n   changes from RFC 2535 and\
    \ discuss backwards compatibility.  It is\n   important to note that this document\
    \ restricts the use of the KEY RR\n   and simplifies the flags, but does not change\
    \ the definition or use\n   of DNSSEC keys.\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in RFC 2119 [1].\n"
- title: 2. Motivation for Restricting the KEY RR
  contents:
  - "2. Motivation for Restricting the KEY RR\n   The KEY RR RDATA [3] consists of\
    \ Flags, a Protocol Octet, an\n   Algorithm type, and a Public Key.  The Protocol\
    \ Octet identifies the\n   KEY RR sub-type.  DNSSEC public keys are stored in\
    \ the KEY RR using a\n   Protocol Octet value of 3.  Email, IPSEC, and TLS keys\
    \ were also\n   stored in the KEY RR and used Protocol Octet values of 1,2, and\
    \ 4\n   (respectively).  Protocol Octet values 5-254 were available for\n   assignment\
    \ by IANA and values were requested (but not assigned) for\n   applications such\
    \ as SSH.\n   Any use of sub-typing has inherent limitations.  A resolver can\
    \ not\n   specify the desired sub-type in a DNS query and most DNS operations\n\
    \   apply only to resource records sets.  For example, a resolver can not\n  \
    \ directly request the DNSSEC subtype KEY RRs.  Instead, the resolver\n   has\
    \ to request all KEY RRs associated with a DNS name and then search\n   the set\
    \ for the desired DNSSEC sub-type.  DNSSEC signatures also\n   apply to the set\
    \ of all KEY RRs associated with the DNS name,\n   regardless of sub-type.\n \
    \  In the case of the KEY RR, the inherent sub-type limitations are\n   exacerbated\
    \ since the sub-type is used to distinguish between DNSSEC\n   keys and application\
    \ keys.  DNSSEC keys and application keys differ\n   in virtually every respect\
    \ and Section 2.1 discusses these\n   differences in more detail.  Combining these\
    \ very different types of\n   keys into a single sub-typed resource record adds\
    \ unnecessary\n   complexity and increases the potential for implementation and\n\
    \   deployment errors.  Limited experimental deployment has shown that\n   application\
    \ keys stored in KEY RRs are problematic.\n   This document addresses these issues\
    \ by removing all application keys\n   from the KEY RR.  Note that the scope of\
    \ this document is strictly\n   limited to the KEY RR and this document does not\
    \ endorse or restrict\n   the storage of application keys in other, yet undefined,\
    \ resource\n   records.\n"
- title: 2.1 Differences Between DNSSEC and Application Keys
  contents:
  - "2.1 Differences Between DNSSEC and Application Keys\n   DNSSEC keys are an essential\
    \ part of the DNSSEC protocol and are used\n   by both name servers and resolvers\
    \ in order to perform DNS tasks.  A\n   DNS zone key, used to sign and authenticate\
    \ RR sets, is the most\n   common example of a DNSSEC key.  SIG(0) [4] and TKEY\
    \ [3]  also use\n   DNSSEC keys.\n   Application keys such as Email keys, IPSEC\
    \ keys, and TLS keys are\n   simply another type of data.  These keys have no\
    \ special meaning to a\n   name server or resolver.\n   The following table summarizes\
    \ some of the differences between DNSSEC\n   keys and application keys:\n    \
    \  1.  They serve different purposes.\n      2.  They are managed by different\
    \ administrators.\n      3.  They are authenticated according to different rules.\n\
    \      4.  Nameservers use different rules when including them in\n          responses.\n\
    \      5.  Resolvers process them in different ways.\n      6.  Faults/key compromises\
    \ have different consequences.\n   1.  The purpose of a DNSSEC key is to sign\
    \ resource records\n   associated with a DNS zone (or generate DNS transaction\
    \ signatures in\n   the case of SIG(0)/TKEY).  But the purpose of an application\
    \ key is\n   specific to the application.  Application keys, such as PGP/email,\n\
    \   IPSEC, TLS, and SSH keys, are not a mandatory part of any zone and\n   the\
    \ purpose and proper use of application keys is outside the scope\n   of DNS.\n\
    \   2.  DNSSEC keys are managed by DNS administrators, but application\n   keys\
    \ are managed by application administrators.  The DNS zone\n   administrator determines\
    \ the key lifetime, handles any suspected key\n   compromises, and manages any\
    \ DNSSEC key changes.  Likewise, the\n   application administrator is responsible\
    \ for the same functions for\n   the application keys related to the application.\
    \  For example, a user\n   typically manages her own PGP key and a server manages\
    \ its own TLS\n   key.  Application key management tasks are outside the scope\
    \ of DNS\n   administration.\n   3.  DNSSEC zone keys are used to authenticate\
    \ application keys, but\n   by definition, application keys are not allowed to\
    \ authenticate DNS\n   zone keys.  A DNS zone key is either configured as a trusted\
    \ key or\n   authenticated by constructing a chain of trust in the DNS hierarchy.\n\
    \   To participate in the chain of trust, a DNS zone needs to exchange\n   zone\
    \ key information with its parent zone [3].  Application keys are\n   not configured\
    \ as trusted keys in the DNS and are never part of any\n   DNS chain of trust.\
    \  Application key data is not needed by the parent\n   and does not need to be\
    \ exchanged with the parent zone for secure DNS\n   resolution to work.  A resolver\
    \ considers an application key RRset as\n   authenticated DNS information if it\
    \ has a valid signature from the\n   local DNS zone keys, but applications could\
    \ impose additional\n   security requirements before the application key is accepted\
    \ as\n   authentic for use with the application.\n   4.  It may be useful for\
    \ nameservers to include DNS zone keys in the\n   additional section of a response,\
    \ but application keys are typically\n   not useful unless they have been specifically\
    \ requested.  For\n   example, it could be useful to include the example.com zone\
    \ key along\n   with a response that contains the www.example.com A record and\
    \ SIG\n   record.  A secure resolver will need the example.com zone key in\n \
    \  order to check the SIG and authenticate the www.example.com A record.\n   It\
    \ is typically not useful to include the IPSEC, email, and TLS keys\n   along\
    \ with the A record.  Note that by placing application keys in\n   the KEY record,\
    \ a resolver would need the IPSEC, email, TLS, and\n   other key associated with\
    \ example.com if the resolver intends to\n   authenticate the example.com zone\
    \ key (since signatures only apply to\n   the entire KEY RR set).  Depending on\
    \ the number of protocols\n   involved, the KEY RR set could grow unwieldy for\
    \ resolvers, and DNS\n   administrators to manage.\n   5.  DNS zone keys require\
    \ special handling by resolvers, but\n   application keys are treated the same\
    \ as any other type of DNS data.\n   The DNSSEC keys are of no value to end applications,\
    \ unless the\n   applications plan to do their own DNS authentication.  By definition,\n\
    \   secure resolvers are not allowed to use application keys as part of\n   the\
    \ authentication process.  Application keys have no unique meaning\n   to resolvers\
    \ and are only useful to the application requesting the\n   key.  Note that if\
    \ sub-types are used to identify the application\n   key, then either the interface\
    \ to the resolver needs to specify the\n   sub-type or the application needs to\
    \ be able to accept all KEY RRs\n   and pick out the desired sub-type.\n   6.\
    \  A fault or compromise of a DNS zone key can lead to invalid or\n   forged DNS\
    \ data, but a fault or compromise of an application key\n   should have no impact\
    \ on other DNS data.  Incorrectly adding or\n   changing a DNS zone key can invalidate\
    \ all of the DNS data in the\n   zone and in all of its subzones.  By using a\
    \ compromised key, an\n   attacker can forge data from the effected zone and for\
    \ any of its\n   sub-zones.  A fault or compromise of an application key has\n\
    \   implications for that application, but it should not have an impact\n   on\
    \ the DNS.  Note that application key faults and key compromises can\n   have\
    \ an impact on the entire DNS if the application key and DNS zone\n   keys are\
    \ both stored in the KEY RR.\n   In summary, DNSSEC keys and application keys\
    \ differ in most every\n   respect.  DNSSEC keys are an essential part of the\
    \ DNS infrastructure\n   and require special handling by DNS administrators and\
    \ DNS resolvers.\n   Application keys are simply another type of data and have\
    \ no special\n   meaning to DNS administrators or resolvers.  These two different\n\
    \   types of data do not belong in the same resource record.\n"
- title: 3. Definition of the KEY RR
  contents:
  - "3. Definition of the KEY RR\n   The KEY RR uses type 25 and is used as resource\
    \ record for storing\n   DNSSEC keys.  The RDATA for a KEY RR consists of flags,\
    \ a protocol\n   octet, the algorithm number octet, and the public key itself.\
    \  The\n   format is as follows:\n   ---------------------------------------------------------------------\n\
    \                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              flags            |   protocol    |   algorithm   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               /\n   /  \
    \                      public key                             /\n   /        \
    \                                                       /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                             KEY RR Format\n   ---------------------------------------------------------------------\n\
    \   In the flags field, all bits except bit 7 are reserved and MUST be\n   zero.\
    \  If Bit 7 (Zone bit) is set to 1, then the KEY is a DNS Zone\n   key.  If Bit\
    \ 7 is set to 0, the KEY is not a zone key.  SIG(0)/TKEY\n   are examples of DNSSEC\
    \ keys that are not zone keys.\n   The protocol field MUST be set to 3.\n   The\
    \ algorithm and public key fields are not changed.\n"
- title: 4. Changes from RFC 2535 KEY RR
  contents:
  - "4. Changes from RFC 2535 KEY RR\n   The KEY RDATA format is not changed.\n  \
    \ All flags except for the zone key flag are eliminated:\n      The A/C bits (bits\
    \ 0 and 1) are eliminated.  They MUST be set to 0\n      and MUST be ignored by\
    \ the receiver.\n      The extended flags bit (bit 3) is eliminated.  It MUST\
    \ be set to 0\n      and MUST be ignored by the receiver.\n      The host/user\
    \ bit (bit 6) is eliminated.  It MUST be set to 0 and\n      MUST be ignored by\
    \ the receiver.\n      The zone bit (bit 7) remains unchanged.\n      The signatory\
    \ field (bits 12-15) are eliminated by [5].  They MUST\n      be set to 0 and\
    \ MUST be ignored by the receiver.\n      Bits 2,4,5,8,9,10,11 remain unchanged.\
    \  They are reserved, MUST be\n      set to zero and MUST be ignored by the receiver.\n\
    \   Assignment of any future KEY RR Flag values requires a standards\n   action.\n\
    \   All Protocol Octet values except DNSSEC (3) are eliminated:\n      Value 1\
    \ (Email) is renamed to RESERVED.\n      Value 2 (IPSEC) is renamed to RESERVED.\n\
    \      Value 3 (DNSSEC) is unchanged.\n      Value 4 (TLS) is renamed to RESERVED.\n\
    \      Value 5-254 remains unchanged (reserved).\n      Value 255 (ANY) is renamed\
    \ to RESERVED.\n   The authoritative data for a zone MUST NOT include any KEY\
    \ records\n   with a protocol octet other than 3.  The registry maintained by\
    \ IANA\n   for protocol values is closed for new assignments.\n   Name servers\
    \ and resolvers SHOULD accept KEY RR sets that contain KEY\n   RRs with a value\
    \ other than 3.  If out of date DNS zones contain\n   deprecated KEY RRs with\
    \ a protocol octet value other than 3, then\n   simply dropping the deprecated\
    \ KEY RRs from the KEY RR set would\n   invalidate any associated SIG record(s)\
    \ and could create caching\n   consistency problems.  Note that KEY RRs with a\
    \ protocol octet value\n   other than 3 MUST NOT be used to authenticate DNS data.\n\
    \   The algorithm and public key fields are not changed.\n"
- title: 5. Backward Compatibility
  contents:
  - "5. Backward Compatibility\n   DNSSEC zone KEY RRs are not changed and remain\
    \ backwards compatible.\n   A properly formatted RFC 2535 zone KEY would have\
    \ all flag bits,\n   other than the Zone Bit (Bit 7), set to 0 and would have\
    \ the Protocol\n   Octet set to 3.  This remains true under the restricted KEY.\n\
    \   DNSSEC non-zone KEY RRs (SIG(0)/TKEY keys) are backwards compatible,\n   but\
    \ the distinction between host and user keys (flag bit 6) is lost.\n   No backwards\
    \ compatibility is provided for application keys.  Any\n   Email, IPSEC, or TLS\
    \ keys are now deprecated.  Storing application\n   keys in the KEY RR created\
    \ problems such as keys at the apex and\n   large RR sets and some change in the\
    \ definition and/or usage of the\n   KEY RR would have been required even if the\
    \ approach described here\n   were not adopted.\n   Overall, existing nameservers\
    \ and resolvers will continue to\n   correctly process KEY RRs with a sub-type\
    \ of DNSSEC keys.\n"
- title: 6. Storing Application Keys in the DNS
  contents:
  - "6. Storing Application Keys in the DNS\n   The scope of this document is strictly\
    \ limited to the KEY record.\n   This document prohibits storing application keys\
    \ in the KEY record,\n   but it does not endorse or restrict the storing application\
    \ keys in\n   other record types.  Other documents can describe how DNS handles\n\
    \   application keys.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   RFC 2535 created an IANA registry for DNS KEY RR Protocol\
    \ Octet\n   values.  Values 1, 2, 3, 4, and 255 were assigned by RFC 2535 and\n\
    \   values 5-254 were made available for assignment by IANA.  This\n   document\
    \ makes two sets of changes to this registry.\n   First, this document re-assigns\
    \ DNS KEY RR Protocol Octet values 1,\n   2, 4, and 255 to \"reserved\".  DNS\
    \ Key RR Protocol Octet Value 3\n   remains unchanged as \"DNSSEC\".\n   Second,\
    \ new values are no longer available for assignment by IANA and\n   this document\
    \ closes the IANA registry for DNS KEY RR Protocol Octet\n   Values.  Assignment\
    \ of any future KEY RR Protocol Octet values\n   requires a standards action.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   This document eliminates potential security problems\
    \ that could arise\n   due to the coupling of DNS zone keys and application keys.\
    \  Prior to\n   the change described in this document, a correctly authenticated\
    \ KEY\n   set could include both application keys and DNSSEC keys.  This\n   document\
    \ restricts the KEY RR to DNS security usage only.  This is an\n   attempt to\
    \ simplify the security model and make it less user-error\n   prone.  If one of\
    \ the application keys is compromised, it could be\n   used as a false zone key\
    \ to create false DNS signatures (SIG\n   records).  Resolvers that do not carefully\
    \ check the KEY sub-type\n   could believe these false signatures and incorrectly\
    \ authenticate DNS\n   data.  With this change, application keys cannot appear\
    \ in an\n   authenticated KEY set and this vulnerability is eliminated.\n   The\
    \ format and correct usage of DNSSEC keys is not changed by this\n   document\
    \ and no new security considerations are introduced.\n"
- title: 9. Normative References
  contents:
  - "9. Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]\
    \  Eastlake, D., \"Domain Name System Security Extensions\", RFC\n        2535,\
    \ March 1999.\n   [3]  Eastlake, D., \"Secret Key Establishment for DNS (TKEY\
    \ RR)\", RFC\n        2930, September 2000.\n   [4]  Eastlake, D., \"DNS Request\
    \ and Transaction Signatures\n        (SIG(0)s)\", RFC 2931, September 2000.\n\
    \   [5]  Wellington, B., \"Secure Domain Name System (DNS) Dynamic\n        Update\"\
    , RFC 3007, November 2000.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Dan Massey\n   USC Information Sciences Institute\n\
    \   3811 N. Fairfax Drive\n   Arlington, VA  22203\n   USA\n   EMail: masseyd@isi.edu\n\
    \   Scott Rose\n   National Institute for Standards and Technology\n   100 Bureau\
    \ Drive\n   Gaithersburg, MD  20899-3460\n   USA\n   EMail: scott.rose@nist.gov\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
