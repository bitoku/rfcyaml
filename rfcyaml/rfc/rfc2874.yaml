- title: __initial_text__
  contents:
  - '   DNS Extensions to Support IPv6 Address Aggregation and Renumbering

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines changes to the Domain Name System to support\n\
    \   renumberable and aggregatable IPv6 addressing.  The changes include a\n  \
    \ new resource record type to store an IPv6 address in a manner which\n   expedites\
    \ network renumbering and updated definitions of existing\n   query types that\
    \ return Internet addresses as part of additional\n   section processing.\n  \
    \ For lookups keyed on IPv6 addresses (often called reverse lookups),\n   this\
    \ document defines a new zone structure which allows a zone to be\n   used without\
    \ modification for parallel copies of an address space (as\n   for a multihomed\
    \ provider or site) and across network renumbering\n   events.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ...............................................\
    \  2\n   2.  Overview ...................................................  3\n\
    \       2.1.  Name-to-Address Lookup ...............................  4\n    \
    \   2.2.  Underlying Mechanisms for Reverse Lookups ............  4\n        \
    \   2.2.1.  Delegation on Arbitrary Boundaries .............  4\n           2.2.2.\
    \  Reusable Zones .................................  5\n   3.  Specifications\
    \ .............................................  5\n       3.1.  The A6 Record\
    \ Type ...................................  5\n           3.1.1.  Format .........................................\
    \  6\n           3.1.2.  Processing .....................................  6\n\
    \           3.1.3.  Textual Representation .........................  7\n    \
    \       3.1.4.  Name Resolution Procedure ......................  7\n       3.2.\
    \  Zone Structure for Reverse Lookups ...................  7\n   4.  Modifications\
    \ to Existing Query Types ......................  8\n   5.  Usage Illustrations\
    \ ........................................  8\n       5.1.  A6 Record Chains .....................................\
    \  9\n           5.1.1.  Authoritative Data .............................  9\n\
    \           5.1.2.  Glue ........................................... 10\n    \
    \       5.1.3.  Variations ..................................... 12\n       5.2.\
    \  Reverse Mapping Zones ................................ 13\n           5.2.1.\
    \  The TLA level .................................. 13\n           5.2.2.  The\
    \ ISP level .................................. 13\n           5.2.3.  The Site\
    \ Level ................................. 13\n       5.3.  Lookups ..............................................\
    \ 14\n       5.4.  Operational Note ..................................... 15\n\
    \   6.  Transition from RFC 1886 and Deployment Notes .............. 15\n    \
    \   6.1.  Transition from AAAA and Coexistence with A Records .. 16\n       6.2.\
    \  Transition from Nibble Labels to Binary Labels ....... 17\n   7.  Security\
    \ Considerations .................................... 17\n   8.  IANA Considerations\
    \ ........................................ 17\n   9.  Acknowledgments ............................................\
    \ 18\n   10.  References ................................................ 18\n\
    \   11.  Authors' Addresses ........................................ 19\n   12.\
    \  Full Copyright Statement .................................. 20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Maintenance of address information in the DNS is one of\
    \ several\n   obstacles which have prevented site and provider renumbering from\n\
    \   being feasible in IP version 4.  Arguments about the importance of\n   network\
    \ renumbering for the preservation of a stable routing system\n   and for other\
    \ purposes may be read in [RENUM1, RENUM2, RENUM3].  To\n   support the storage\
    \ of IPv6 addresses without impeding renumbering we\n   define the following extensions.\n\
    \   o  A new resource record type, \"A6\", is defined to map a domain name\n \
    \     to an IPv6 address, with a provision for indirection for leading\n     \
    \ \"prefix\" bits.\n   o  Existing queries that perform additional section processing\
    \ to\n      locate IPv4 addresses are redefined to do that processing for both\n\
    \      IPv4 and IPv6 addresses.\n   o  A new domain, IP6.ARPA, is defined to support\
    \ lookups based on\n      IPv6 address.\n   o  A new prefix-delegation method\
    \ is defined, relying on new DNS\n      features [BITLBL, DNAME].\n   The changes\
    \ are designed to be compatible with existing application\n   programming interfaces.\
    \  The existing support for IPv4 addresses is\n   retained.  Transition issues\
    \ related to the coexistence of both IPv4\n   and IPv6 addresses in DNS are discussed\
    \ in [TRANS].\n   This memo proposes a replacement for the specification in RFC\
    \ 1886\n   [AAAA] and a departure from current implementation practices.  The\n\
    \   changes are designed to facilitate network renumbering and\n   multihoming.\
    \  Domains employing the A6 record for IPv6 addresses can\n   insert automatically-generated\
    \ AAAA records in zone files to ease\n   transition.  It is expected that after\
    \ a reasonable period, RFC 1886\n   will become Historic.\n   The next three major\
    \ sections of this document are an overview of the\n   facilities defined or employed\
    \ by this specification, the\n   specification itself, and examples of use.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [KWORD].  The key word\n\
    \   \"SUGGESTED\" signifies a strength between MAY and SHOULD: it is\n   believed\
    \ that compliance with the suggestion has tangible benefits in\n   most instances.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   This section provides an overview of the DNS facilities for\
    \ storage\n   of IPv6 addresses and for lookups based on IPv6 address, including\n\
    \   those defined here and elsewhere.\n"
- title: 2.1.  Name-to-Address Lookup
  contents:
  - "2.1.  Name-to-Address Lookup\n   IPv6 addresses are stored in one or more A6\
    \ resource records.  A\n   single A6 record may include a complete IPv6 address,\
    \ or a contiguous\n   portion of an address and information leading to one or\
    \ more\n   prefixes.  Prefix information comprises a prefix length and a DNS\n\
    \   name which is in turn the owner of one or more A6 records defining\n   the\
    \ prefix or prefixes which are needed to form one or more complete\n   IPv6 addresses.\
    \  When the prefix length is zero, no DNS name is\n   present and all the leading\
    \ bits of the address are significant.\n   There may be multiple levels of indirection\
    \ and the existence of\n   multiple A6 records at any level multiplies the number\
    \ of IPv6\n   addresses which are formed.\n   An application looking up an IPv6\
    \ address will generally cause the\n   DNS resolver to access several A6 records,\
    \ and multiple IPv6\n   addresses may be returned even if the queried name was\
    \ the owner of\n   only one A6 record.  The authenticity of the returned address(es)\n\
    \   cannot be directly verified by DNS Security [DNSSEC].  The A6 records\n  \
    \ which contributed to the address(es) may of course be verified if\n   signed.\n\
    \   Implementers are reminded of the necessity to limit the amount of\n   work\
    \ a resolver will perform in response to a client request.  This\n   principle\
    \ MUST be extended to also limit the generation of DNS\n   requests in response\
    \ to one name-to-address (or address-to-name)\n   lookup request.\n"
- title: 2.2.  Underlying Mechanisms for Reverse Lookups
  contents:
  - "2.2.  Underlying Mechanisms for Reverse Lookups\n   This section describes the\
    \ new DNS features which this document\n   exploits.  This section is an overview,\
    \ not a specification of those\n   features.  The reader is directed to the referenced\
    \ documents for\n   more details on each.\n"
- title: 2.2.1.  Delegation on Arbitrary Boundaries
  contents:
  - "2.2.1.  Delegation on Arbitrary Boundaries\n   This new scheme for reverse lookups\
    \ relies on a new type of DNS label\n   called the \"bit-string label\" [BITLBL].\
    \  This label compactly\n   represents an arbitrary string of bits which is treated\
    \ as a\n   hierarchical sequence of one-bit domain labels.  Resource records can\n\
    \   thereby be stored at arbitrary bit-boundaries.\n   Examples in section 5 will\
    \ employ the following textual\n   representation for bit-string labels, which\
    \ is a subset of the syntax\n   defined in [BITLBL].  A base indicator \"x\" for\
    \ hexadecimal and a\n   sequence of hexadecimal digits is enclosed between \"\\\
    [\" and \"]\".  The\n   bits denoted by the digits represent a sequence of one-bit\
    \ domain\n   labels ordered from most to least significant.  (This is the opposite\n\
    \   of the order they would appear if listed one bit at a time, but it\n   appears\
    \ to be a convenient notation.)  The digit string may be\n   followed by a slash\
    \ (\"/\") and a decimal count.  If omitted, the\n   implicit count is equal to\
    \ four times the number of hexadecimal\n   digits.\n   Consecutive bit-string\
    \ labels are equivalent (up to the limit imposed\n   by the size of the bit count\
    \ field) to a single bit-string label\n   containing all the bits of the consecutive\
    \ labels in the proper\n   order.  As an example, either of the following domain\
    \ names could be\n   used in a QCLASS=IN, QTYPE=PTR query to find the name of\
    \ the node\n   with IPv6 address 3ffe:7c0:40:9:a00:20ff:fe81:2b32.\n    \\[x3FFE07C0004000090A0020FFFE812B32/128].IP6.ARPA.\n\
    \    \\[x0A0020FFFE812B32/64].\\[x0009/16].\\[x3FFE07C00040/48].IP6.ARPA.\n"
- title: 2.2.2.  Reusable Zones
  contents:
  - "2.2.2.  Reusable Zones\n   DNS address space delegation is implemented not by\
    \ zone cuts and NS\n   records, but by a new analogue to the CNAME record, called\
    \ the DNAME\n   resource record [DNAME].  The DNAME record provides alternate\
    \ naming\n   to an entire subtree of the domain name space, rather than to a\n\
    \   single node.  It causes some suffix of a queried name to be\n   substituted\
    \ with a name from the DNAME record's RDATA.\n   For example, a resolver or server\
    \ providing recursion, while looking\n   up a QNAME a.b.c.d.e.f may encounter\
    \ a DNAME record\n                        d.e.f.     DNAME     w.xy.\n   which\
    \ will cause it to look for a.b.c.w.xy.\n"
- title: 3.  Specifications
  contents:
  - '3.  Specifications

    '
- title: 3.1.  The A6 Record Type
  contents:
  - "3.1.  The A6 Record Type\n   The A6 record type is specific to the IN (Internet)\
    \ class and has\n   type number 38 (decimal).\n"
- title: 3.1.1.  Format
  contents:
  - "3.1.1.  Format\n   The RDATA portion of the A6 record contains two or three fields.\n\
    \           +-----------+------------------+-------------------+\n           |Prefix\
    \ len.|  Address suffix  |    Prefix name    |\n           | (1 octet) |  (0..16\
    \ octets)  |  (0..255 octets)  |\n           +-----------+------------------+-------------------+\n\
    \   o  A prefix length, encoded as an eight-bit unsigned integer with\n      value\
    \ between 0 and 128 inclusive.\n   o  An IPv6 address suffix, encoded in network\
    \ order (high-order octet\n      first).  There MUST be exactly enough octets\
    \ in this field to\n      contain a number of bits equal to 128 minus prefix length,\
    \ with 0\n      to 7 leading pad bits to make this field an integral number of\n\
    \      octets.  Pad bits, if present, MUST be set to zero when loading a\n   \
    \   zone file and ignored (other than for SIG [DNSSEC] verification)\n      on\
    \ reception.\n   o  The name of the prefix, encoded as a domain name.  By the\
    \ rules of\n      [DNSIS], this name MUST NOT be compressed.\n   The domain name\
    \ component SHALL NOT be present if the prefix length\n   is zero.  The address\
    \ suffix component SHALL NOT be present if the\n   prefix length is 128.\n   It\
    \ is SUGGESTED that an A6 record intended for use as a prefix for\n   other A6\
    \ records have all the insignificant trailing bits in its\n   address suffix field\
    \ set to zero.\n"
- title: 3.1.2.  Processing
  contents:
  - "3.1.2.  Processing\n   A query with QTYPE=A6 causes type A6 and type NS additional\
    \ section\n   processing for the prefix names, if any, in the RDATA field of the\
    \ A6\n   records in the answer section.  This processing SHOULD be recursively\n\
    \   applied to the prefix names of A6 records included as additional\n   data.\
    \  When space in the reply packet is a limit, inclusion of\n   additional A6 records\
    \ takes priority over NS records.\n   It is an error for an A6 record with prefix\
    \ length L1 > 0 to refer to\n   a domain name which owns an A6 record with a prefix\
    \ length L2 > L1.\n   If such a situation is encountered by a resolver, the A6\
    \ record with\n   the offending (larger) prefix length MUST be ignored.  Robustness\n\
    \   precludes signaling an error if addresses can still be formed from\n   valid\
    \ A6 records, but it is SUGGESTED that zone maintainers from time\n   to time\
    \ check all the A6 records their zones reference.\n"
- title: 3.1.3.  Textual Representation
  contents:
  - "3.1.3.  Textual Representation\n   The textual representation of the RDATA portion\
    \ of the A6 resource\n   record in a zone file comprises two or three fields separated\
    \ by\n   whitespace.\n   o  A prefix length, represented as a decimal number between\
    \ 0 and 128\n      inclusive,\n   o  the textual representation of an IPv6 address\
    \ as defined in\n      [AARCH] (although some leading and/or trailing bits may\
    \ not be\n      significant),\n   o  a domain name, if the prefix length is not\
    \ zero.\n   The domain name MUST be absent if the prefix length is zero.  The\n\
    \   IPv6 address MAY be be absent if the prefix length is 128.  A number\n   of\
    \ leading address bits equal to the prefix length SHOULD be zero,\n   either implicitly\
    \ (through the :: notation) or explicitly, as\n   specified in section 3.1.1.\n"
- title: 3.1.4.  Name Resolution Procedure
  contents:
  - "3.1.4.  Name Resolution Procedure\n   To obtain the IPv6 address or addresses\
    \ which belong to a given name,\n   a DNS client MUST obtain one or more complete\
    \ chains of A6 records,\n   each chain beginning with a record owned by the given\
    \ name and\n   including a record owned by the prefix name in that record, and\
    \ so on\n   recursively, ending with an A6 record with a prefix length of zero.\n\
    \   One IPv6 address is formed from one such chain by taking the value of\n  \
    \ each bit position from the earliest A6 record in the chain which\n   validly\
    \ covers that position, as indicated by the prefix length.  The\n   set of all\
    \ IPv6 addresses for the given name comprises the addresses\n   formed from all\
    \ complete chains of A6 records beginning at that name,\n   discarding records\
    \ which have invalid prefix lengths as defined in\n   section 3.1.2.\n   If some\
    \ A6 queries fail and others succeed, a client might obtain a\n   non-empty but\
    \ incomplete set of IPv6 addresses for a host.  In many\n   situations this may\
    \ be acceptable.  The completeness of a set of A6\n   records may always be determined\
    \ by inspection.\n"
- title: 3.2.  Zone Structure for Reverse Lookups
  contents:
  - "3.2.  Zone Structure for Reverse Lookups\n   Very little of the new scheme's\
    \ data actually appears under IP6.ARPA;\n   only the first level of delegation\
    \ needs to be under that domain.\n   More levels of delegation could be placed\
    \ under IP6.ARPA if some\n   top-level delegations were done via NS records instead\
    \ of DNAME\n   records, but this would incur some cost in renumbering ease at\
    \ the\n   level of TLAs [AGGR].  Therefore, it is declared here that all\n   address\
    \ space delegations SHOULD be done by the DNAME mechanism\n   rather than NS.\n\
    \   In addition, since uniformity in deployment will simplify maintenance\n  \
    \ of address delegations, it is SUGGESTED that address and prefix\n   information\
    \ be stored immediately below a DNS label \"IP6\".  Stated\n   another way, conformance\
    \ with this suggestion would mean that \"IP6\"\n   is the first label in the RDATA\
    \ field of DNAME records which support\n   IPv6 reverse lookups.\n   When any\
    \ \"reserved\" or \"must be zero\" bits are adjacent to a\n   delegation boundary,\
    \ the higher-level entity MUST retain those bits\n   in its own control and delegate\
    \ only the bits over which the lower-\n   level entity has authority.\n   To find\
    \ the name of a node given its IPv6 address, a DNS client MUST\n   perform a query\
    \ with QCLASS=IN, QTYPE=PTR on the name formed from the\n   128 bit address as\
    \ one or more bit-string labels [BITLBL], followed\n   by the two standard labels\
    \ \"IP6.ARPA\".  If recursive service was not\n   obtained from a server and the\
    \ desired PTR record was not returned,\n   the resolver MUST handle returned DNAME\
    \ records as specified in\n   [DNAME], and NS records as specified in [DNSCF],\
    \ and iterate.\n"
- title: 4.  Modifications to Existing Query Types
  contents:
  - "4.  Modifications to Existing Query Types\n   All existing query types that perform\
    \ type A additional section\n   processing, i.e. the name server (NS), mail exchange\
    \ (MX), and\n   mailbox (MB) query types, and the experimental AFS data base (AFSDB)\n\
    \   and route through (RT) types, must be redefined to perform type A, A6\n  \
    \ and AAAA additional section processing, with type A having the\n   highest priority\
    \ for inclusion and type AAAA the lowest.  This\n   redefinition means that a\
    \ name server may add any relevant IPv4 and\n   IPv6 address information available\
    \ locally to the additional section\n   of a response when processing any one\
    \ of the above queries.  The\n   recursive inclusion of A6 records referenced\
    \ by A6 records already\n   included in the additional section is OPTIONAL.\n"
- title: 5.  Usage Illustrations
  contents:
  - "5.  Usage Illustrations\n   This section provides examples of use of the mechanisms\
    \ defined in\n   the previous section.  All addresses and domains mentioned here\
    \ are\n   intended to be fictitious and for illustrative purposes only.\n   Example\
    \ delegations will be on 4-bit boundaries solely for\n   readability; this specification\
    \ is indifferent to bit alignment.\n   Use of the IPv6 aggregatable address format\
    \ [AGGR] is assumed in the\n   examples.\n"
- title: 5.1.  A6 Record Chains
  contents:
  - "5.1.  A6 Record Chains\n   Let's take the example of a site X that is multi-homed\
    \ to two\n   \"intermediate\" providers A and B.  The provider A is itself multi-\n\
    \   homed to two \"transit\" providers, C and D.  The provider B gets its\n  \
    \ transit service from a single provider, E.  For simplicity suppose\n   that\
    \ C, D and E all belong to the same top-level aggregate (TLA) with\n   identifier\
    \ (including format prefix) '2345', and the TLA authority at\n   ALPHA-TLA.ORG\
    \ assigns to C, D and E respectively the next level\n   aggregate (NLA) prefixes\
    \ 2345:00C0::/28, 2345:00D0::/28 and\n   2345:000E::/32.\n   C assigns the NLA\
    \ prefix 2345:00C1:CA00::/40 to A, D assigns the\n   prefix 2345:00D2:DA00::/40\
    \ to A and E assigns 2345:000E:EB00::/40 to\n   B.\n   A assigns to X the subscriber\
    \ identification '11' and B assigns the\n   subscriber identification '22'.  As\
    \ a result, the site X inherits\n   three address prefixes:\n   o  2345:00C1:CA11::/48\
    \ from A, for routes through C.\n   o  2345:00D2:DA11::/48 from A, for routes\
    \ through D.\n   o  2345:000E:EB22::/48 from B, for routes through E.\n   Let\
    \ us suppose that N is a node in the site X, that it is assigned to\n   subnet\
    \ number 1 in this site, and that it uses the interface\n   identifier '1234:5678:9ABC:DEF0'.\
    \  In our configuration, this node\n   will have three addresses:\n   o  2345:00C1:CA11:0001:1234:5678:9ABC:DEF0\n\
    \   o  2345:00D2:DA11:0001:1234:5678:9ABC:DEF0\n   o  2345:000E:EB22:0001:1234:5678:9ABC:DEF0\n"
- title: 5.1.1.  Authoritative Data
  contents:
  - "5.1.1.  Authoritative Data\n   We will assume that the site X is represented\
    \ in the DNS by the\n   domain name X.EXAMPLE, while A, B, C, D and E are represented\
    \ by\n   A.NET, B.NET, C.NET, D.NET and E.NET.  In each of these domains, we\n\
    \   assume a subdomain \"IP6\" that will hold the corresponding prefixes.\n  \
    \ The node N is identified by the domain name N.X.EXAMPLE.  The\n   following\
    \ records would then appear in X's DNS.\n          $ORIGIN X.EXAMPLE.\n      \
    \    N            A6 64 ::1234:5678:9ABC:DEF0 SUBNET-1.IP6\n          SUBNET-1.IP6\
    \ A6 48 0:0:0:1::  IP6\n          IP6          A6 48 0::0       SUBSCRIBER-X.IP6.A.NET.\n\
    \          IP6          A6 48 0::0       SUBSCRIBER-X.IP6.B.NET.\n   And elsewhere\
    \ there would appear\n        SUBSCRIBER-X.IP6.A.NET. A6 40 0:0:0011:: A.NET.IP6.C.NET.\n\
    \        SUBSCRIBER-X.IP6.A.NET. A6 40 0:0:0011:: A.NET.IP6.D.NET.\n        SUBSCRIBER-X.IP6.B.NET.\
    \ A6 40 0:0:0022:: B-NET.IP6.E.NET.\n        A.NET.IP6.C.NET. A6 28 0:0001:CA00::\
    \ C.NET.ALPHA-TLA.ORG.\n        A.NET.IP6.D.NET. A6 28 0:0002:DA00:: D.NET.ALPHA-TLA.ORG.\n\
    \        B-NET.IP6.E.NET. A6 32 0:0:EB00::    E.NET.ALPHA-TLA.ORG.\n        C.NET.ALPHA-TLA.ORG.\
    \ A6 0 2345:00C0::\n        D.NET.ALPHA-TLA.ORG. A6 0 2345:00D0::\n        E.NET.ALPHA-TLA.ORG.\
    \ A6 0 2345:000E::\n"
- title: 5.1.2.  Glue
  contents:
  - "5.1.2.  Glue\n   When, as is common, some or all DNS servers for X.EXAMPLE are\
    \ within\n   the X.EXAMPLE zone itself, the top-level zone EXAMPLE must carry\n\
    \   enough \"glue\" information to enable DNS clients to reach those\n   nameservers.\
    \  This is true in IPv6 just as in IPv4.  However, the A6\n   record affords the\
    \ DNS administrator some choices.  The glue could be\n   any of\n   o  a minimal\
    \ set of A6 records duplicated from the X.EXAMPLE zone,\n   o  a (possibly smaller)\
    \ set of records which collapse the structure\n      of that minimal set,\n  \
    \ o  or a set of A6 records with prefix length zero, giving the entire\n     \
    \ global addresses of the servers.\n   The trade-off is ease of maintenance against\
    \ robustness.  The best\n   and worst of both may be had together by implementing\
    \ either the\n   first or second option together with the third.  To illustrate\
    \ the\n   glue options, suppose that X.EXAMPLE is served by two nameservers\n\
    \   NS1.X.EXAMPLE and NS2.X.EXAMPLE, having interface identifiers\n   ::1:11:111:1111\
    \ and ::2:22:222:2222 on subnets 1 and 2 respectively.\n   Then the top-level\
    \ zone EXAMPLE would include one (or more) of the\n   following sets of A6 records\
    \ as glue.\n   $ORIGIN EXAMPLE.            ; first option\n   X              \
    \ NS NS1.X\n                   NS NS2.X\n   NS1.X           A6 64 ::1:11:111:1111\
    \ SUBNET-1.IP6.X\n   NS2.X           A6 64 ::2:22:222:2222 SUBNET-2.IP6.X\n  \
    \ SUBNET-1.IP6.X  A6 48 0:0:0:1::       IP6.X\n   SUBNET-2.IP6.X  A6 48 0:0:0:2::\
    \       IP6.X\n   IP6.X           A6 48 0::0            SUBSCRIBER-X.IP6.A.NET.\n\
    \   IP6.X           A6 48 0::0            SUBSCRIBER-X.IP6.B.NET.\n   $ORIGIN\
    \ EXAMPLE.            ; second option\n   X               NS NS1.X\n         \
    \          NS NS2.X\n   NS1.X           A6 48 ::1:1:11:111:1111 SUBSCRIBER-X.IP6.A.NET.\n\
    \                   A6 48 ::1:1:11:111:1111 SUBSCRIBER-X.IP6.B.NET.\n   NS2.X\
    \           A6 48 ::2:2:22:222:2222 SUBSCRIBER-X.IP6.A.NET.\n                \
    \   A6 48 ::2:2:22:222:2222 SUBSCRIBER-X.IP6.B.NET.\n   $ORIGIN EXAMPLE.     \
    \       ; third option\n   X               NS NS1.X\n                   NS NS2.X\n\
    \   NS1.X           A6 0  2345:00C1:CA11:1:1:11:111:1111\n                   A6\
    \ 0  2345:00D2:DA11:1:1:11:111:1111\n                   A6 0  2345:000E:EB22:1:1:11:111:1111\n\
    \   NS2.X           A6 0  2345:00C1:CA11:2:2:22:222:2222\n                   A6\
    \ 0  2345:00D2:DA11:2:2:22:222:2222\n                   A6 0  2345:000E:EB22:2:2:22:222:2222\n\
    \   The first and second glue options are robust against renumbering of\n   X.EXAMPLE's\
    \ prefixes by providers A.NET and B.NET, but will fail if\n   those providers'\
    \ own DNS is unreachable.  The glue records of the\n   third option are robust\
    \ against DNS failures elsewhere than the zones\n   EXAMPLE and X.EXAMPLE themselves,\
    \ but must be updated when X's\n   address space is renumbered.\n   If the EXAMPLE\
    \ zone includes redundant glue, for instance the union\n   of the A6 records of\
    \ the first and third options, then under normal\n   circumstances duplicate IPv6\
    \ addresses will be derived by DNS\n   clients.  But if provider DNS fails, addresses\
    \ will still be obtained\n   from the zero-prefix-length records, while if the\
    \ EXAMPLE zone lags\n   behind a renumbering of X.EXAMPLE, half of the addresses\
    \ obtained by\n   DNS clients will still be up-to-date.\n   The zero-prefix-length\
    \ glue records can of course be automatically\n   generated and/or checked in\
    \ practice.\n"
- title: 5.1.3.  Variations
  contents:
  - "5.1.3.  Variations\n   Several more-or-less arbitrary assumptions are reflected\
    \ in the above\n   structure.  All of the following choices could have been made\n\
    \   differently, according to someone's notion of convenience or an\n   agreement\
    \ between two parties.\n      First, that site X has chosen to put subnet information\
    \ in a\n      separate A6 record rather than incorporate it into each node's A6\n\
    \      records.\n      Second, that site X is referred to as \"SUBSCRIBER-X\"\
    \ by both of\n      its providers A and B.\n      Third, that site X chose to\
    \ indirect its provider information\n      through A6 records at IP6.X.EXAMPLE\
    \ containing no significant\n      bits.  An alternative would have been to replicate\
    \ each subnet\n      record for each provider.\n      Fourth, B and E used a slightly\
    \ different prefix naming convention\n      between themselves than did A, C and\
    \ D.  Each hierarchical pair of\n      network entities must arrange this naming\
    \ between themselves.\n      Fifth, that the upward prefix referral chain topped\
    \ out at ALPHA-\n      TLA.ORG.  There could have been another level which assigned\
    \ the\n      TLA values and holds A6 records containing those bits.\n   Finally,\
    \ the above structure reflects an assumption that address\n   fields assigned\
    \ by a given entity are recorded only in A6 records\n   held by that entity. \
    \ Those bits could be entered into A6 records in\n   the lower-level entity's\
    \ zone instead, thus:\n                IP6.X.EXAMPLE. A6 40 0:0:11::   IP6.A.NET.\n\
    \                IP6.X.EXAMPLE. A6 40 0:0:22::   IP6.B.NET.\n                IP6.A.NET.\
    \     A6 28 0:1:CA00:: IP6.C.NET.\n                and so on.\n   Or the higher-level\
    \ entities could hold both sorts of A6 records\n   (with different DNS owner names)\
    \ and allow the lower-level entities\n   to choose either mode of A6 chaining.\
    \  But the general principle of\n   avoiding data duplication suggests that the\
    \ proper place to store\n   assigned values is with the entity that assigned them.\n\
    \   It is possible, but not necessarily recommended, for a zone\n   maintainer\
    \ to forego the renumbering support afforded by the chaining\n   of A6 records\
    \ and to record entire IPv6 addresses within one zone\n   file.\n"
- title: 5.2.  Reverse Mapping Zones
  contents:
  - "5.2.  Reverse Mapping Zones\n   Supposing that address space assignments in the\
    \ TLAs with Format\n   Prefix (001) binary and IDs 0345, 0678 and 09AB were maintained\
    \ in\n   zones called ALPHA-TLA.ORG, BRAVO-TLA.ORG and CHARLIE-TLA.XY, then\n\
    \   the IP6.ARPA zone would include\n               $ORIGIN IP6.ARPA.\n      \
    \         \\[x234500/24]   DNAME   IP6.ALPHA-TLA.ORG.\n               \\[x267800/24]\
    \   DNAME   IP6.BRAVO-TLA.ORG.\n               \\[x29AB00/24]   DNAME   IP6.CHARLIE-TLA.XY.\n\
    \   Eight trailing zero bits have been included in each TLA ID to reflect\n  \
    \ the eight reserved bits in the current aggregatable global unicast\n   addresses\
    \ format [AGGR].\n"
- title: 5.2.1.  The TLA level
  contents:
  - "5.2.1.  The TLA level\n   ALPHA-TLA's assignments to network providers C, D and\
    \ E are reflected\n   in the reverse data as follows.\n              \\[xC/4].IP6.ALPHA-TLA.ORG.\
    \   DNAME  IP6.C.NET.\n              \\[xD/4].IP6.ALPHA-TLA.ORG.   DNAME  IP6.D.NET.\n\
    \              \\[x0E/8].IP6.ALPHA-TLA.ORG.  DNAME  IP6.E.NET.\n"
- title: 5.2.2.  The ISP level
  contents:
  - "5.2.2.  The ISP level\n   The providers A through E carry the following delegation\
    \ information\n   in their zone files.\n               \\[x1CA/12].IP6.C.NET.\
    \  DNAME  IP6.A.NET.\n               \\[x2DA/12].IP6.D.NET.  DNAME  IP6.A.NET.\n\
    \               \\[xEB/8].IP6.E.NET.    DNAME  IP6.B.NET.\n               \\[x11/8].IP6.A.NET.\
    \    DNAME  IP6.X.EXAMPLE.\n               \\[x22/8].IP6.B.NET.    DNAME  IP6.X.EXAMPLE.\n\
    \   Note that some domain names appear in the RDATA of more than one\n   DNAME\
    \ record.  In those cases, one zone is being used to map multiple\n   prefixes.\n"
- title: 5.2.3.  The Site Level
  contents:
  - "5.2.3.  The Site Level\n   Consider the customer X.EXAMPLE using IP6.X.EXAMPLE\
    \ for address-to-\n   name translations.  This domain is now referenced by two\
    \ different\n   DNAME records held by two different providers.\n           $ORIGIN\
    \ IP6.X.EXAMPLE.\n           \\[x0001/16]                    DNAME   SUBNET-1\n\
    \           \\[x123456789ABCDEF0].SUBNET-1  PTR     N.X.EXAMPLE.\n           and\
    \ so on.\n   SUBNET-1 need not have been named in a DNAME record; the subnet bits\n\
    \   could have been joined with the interface identifier.  But if subnets\n  \
    \ are treated alike in both the A6 records and in the reverse zone, it\n   will\
    \ always be possible to keep the forward and reverse definition\n   data for each\
    \ prefix in one zone.\n"
- title: 5.3.  Lookups
  contents:
  - "5.3.  Lookups\n   A DNS resolver looking for a hostname for the address\n   2345:00C1:CA11:0001:1234:5678:9ABC:DEF0\
    \ would acquire certain of the\n   DNAME records shown above and would form new\
    \ queries.  Assuming that\n   it began the process knowing servers for IP6.ARPA,\
    \ but that no server\n   it consulted provided recursion and none had other useful\
    \ additional\n   information cached, the sequence of queried names and responses\
    \ would\n   be (all with QCLASS=IN, QTYPE=PTR):\n   To a server for IP6.ARPA:\n\
    \   QNAME=\\[x234500C1CA110001123456789ABCDEF0/128].IP6.ARPA.\n        Answer:\n\
    \        \\[x234500/24].IP6.ARPA. DNAME IP6.ALPHA-TLA.ORG.\n   To a server for\
    \ IP6.ALPHA-TLA.ORG:\n   QNAME=\\[xC1CA110001123456789ABCDEF0/104].IP6.ALPHA-TLA.ORG.\n\
    \        Answer:\n        \\[xC/4].IP6.ALPHA-TLA.ORG. DNAME IP6.C.NET.\n   To\
    \ a server for IP6.C.NET.:\n   QNAME=\\[x1CA110001123456789ABCDEF0/100].IP6.C.NET.\n\
    \        Answer:\n        \\[x1CA/12].IP6.C.NET. DNAME IP6.A.NET.\n   To a server\
    \ for IP6.A.NET.:\n   QNAME=\\[x110001123456789ABCDEF0/88].IP6.A.NET.\n      \
    \  Answer:\n        \\[x11/8].IP6.A.NET. DNAME IP6.X.EXAMPLE.\n   To a server\
    \ for IP6.X.EXAMPLE.:\n   QNAME=\\[x0001123456789ABCDEF0/80].IP6.X.EXAMPLE.\n\
    \        Answer:\n        \\[x0001/16].IP6.X.EXAMPLE. DNAME SUBNET-1.IP6.X.EXAMPLE.\n\
    \        \\[x123456789ABCDEF0/64].SUBNET-1.X.EXAMPLE. PTR N.X.EXAMPLE.\n   All\
    \ the DNAME (and NS) records acquired along the way can be cached\n   to expedite\
    \ resolution of addresses topologically near to this\n   address.  And if another\
    \ global address of N.X.EXAMPLE were resolved\n   within the TTL of the final\
    \ PTR record, that record would not have to\n   be fetched again.\n"
- title: 5.4.  Operational Note
  contents:
  - "5.4.  Operational Note\n   In the illustrations in section 5.1, hierarchically\
    \ adjacent\n   entities, such as a network provider and a customer, must agree\
    \ on a\n   DNS name which will own the definition of the delegated prefix(es).\n\
    \   One simple convention would be to use a bit-string label representing\n  \
    \ exactly the bits which are assigned to the lower-level entity by the\n   higher.\
    \  For example, \"SUBSCRIBER-X\" could be replaced by \"\\[x11/8]\".\n   This\
    \ would place the A6 record(s) defining the delegated prefix at\n   exactly the\
    \ same point in the DNS tree as the DNAME record associated\n   with that delegation.\
    \  The cost of this simplification is that the\n   lower-level zone must update\
    \ its upward-pointing A6 records when it\n   is renumbered.  This cost may be\
    \ found quite acceptable in practice.\n"
- title: 6.  Transition from RFC 1886 and Deployment Notes
  contents:
  - "6.  Transition from RFC 1886 and Deployment Notes\n   When prefixes have been\
    \ \"delegated upward\" with A6 records, the\n   number of DNS resource records\
    \ required to establish a single IPv6\n   address increases by some non-trivial\
    \ factor.  Those records will\n   typically, but not necessarily, come from different\
    \ DNS zones (which\n   can independently suffer failures for all the usual reasons).\
    \  When\n   obtaining multiple IPv6 addresses together, this increase in RR count\n\
    \   will be proportionally less -- and the total size of a DNS reply\n   might\
    \ even decrease -- if the addresses are topologically clustered.\n   But the records\
    \ could still easily exceed the space available in a\n   UDP response which returns\
    \ a large RRset [DNSCLAR] to an MX, NS, or\n   SRV query, for example.  The possibilities\
    \ for overall degradation of\n   performance and reliability of DNS lookups are\
    \ numerous, and increase\n   with the number of prefix delegations involved, especially\
    \ when those\n   delegations point to records in other zones.\n   DNS Security\
    \ [DNSSEC] addresses the trustworthiness of cached data,\n   which is a problem\
    \ intrinsic to DNS, but the cost of applying this to\n   an IPv6 address is multiplied\
    \ by a factor which may be greater than\n   the number of prefix delegations involved\
    \ if different signature\n   chains must be verified for different A6 records.\
    \  If a trusted\n   centralized caching server (as in [TSIG], for example) is\
    \ used, this\n   cost might be amortized to acceptable levels.  One new phenomenon\
    \ is\n   the possibility that IPv6 addresses may be formed from a A6 records\n\
    \   from a combination of secure and unsecured zones.\n   Until more deployment\
    \ experience is gained with the A6 record, it is\n   recommended that prefix delegations\
    \ be limited to one or two levels.\n   A reasonable phasing-in mechanism would\
    \ be to start with no prefix\n   delegations (all A6 records having prefix length\
    \ 0) and then to move\n   to the use of a single level of delegation within a\
    \ single zone.  (If\n   the TTL of the \"prefix\" A6 records is kept to an appropriate\
    \ duration\n   the capability for rapid renumbering is not lost.)  More aggressively\n\
    \   flexible delegation could be introduced for a subset of hosts for\n   experimentation.\n"
- title: 6.1.  Transition from AAAA and Coexistence with A Records
  contents:
  - "6.1.  Transition from AAAA and Coexistence with A Records\n   Administrators\
    \ of zones which contain A6 records can easily\n   accommodate deployed resolvers\
    \ which understand AAAA records but not\n   A6 records.  Such administrators can\
    \ do automatic generation of AAAA\n   records for all of a zone's names which\
    \ own A6 records by a process\n   which mimics the resolution of a hostname to\
    \ an IPv6 address (see\n   section 3.1.4).  Attention must be paid to the TTL\
    \ assigned to a\n   generated AAAA record, which MUST be no more than the minimum\
    \ of the\n   TTLs of the A6 records that were used to form the IPv6 address in\n\
    \   that record.  For full robustness, those A6 records which were in\n   different\
    \ zones should be monitored for changes (in TTL or RDATA)\n   even when there\
    \ are no changes to zone for which AAAA records are\n   being generated.  If the\
    \ zone is secure [DNSSEC], the generated AAAA\n   records MUST be signed along\
    \ with the rest of the zone data.\n   A zone-specific heuristic MAY be used to\
    \ avoid generation of AAAA\n   records for A6 records which record prefixes, although\
    \ such\n   superfluous records would be relatively few in number and harmless.\n\
    \   Examples of such heuristics include omitting A6 records with a prefix\n  \
    \ length less than the largest value found in the zone file, or records\n   with\
    \ an address suffix field with a certain number of trailing zero\n   bits.\n \
    \  On the client side, when looking up and IPv6 address, the order of A6\n   and\
    \ AAAA queries MAY be configurable to be one of: A6, then AAAA;\n   AAAA, then\
    \ A6; A6 only; or both in parallel.  The default order (or\n   only order, if\
    \ not configurable) MUST be to try A6 first, then AAAA.\n   If and when the AAAA\
    \ becomes deprecated a new document will change\n   the default.\n   The guidelines\
    \ and options for precedence between IPv4 and IPv6\n   addresses are specified\
    \ in [TRANS].  All mentions of AAAA records in\n   that document are henceforth\
    \ to be interpreted as meaning A6 and/or\n   AAAA records in the order specified\
    \ in the previous paragraph.\n"
- title: 6.2.  Transition from Nibble Labels to Binary Labels
  contents:
  - "6.2.  Transition from Nibble Labels to Binary Labels\n   Implementations conforming\
    \ to RFC 1886 [AAAA] perform reverse lookups\n   as follows:\n      An IPv6 address\
    \ is represented as a name in the IP6.INT domain by\n      a sequence of nibbles\
    \ separated by dots with the suffix\n      \".IP6.INT\". The sequence of nibbles\
    \ is encoded in reverse order,\n      i.e. the low-order nibble is encoded first,\
    \ followed by the next\n      low-order nibble and so on. Each nibble is represented\
    \ by a\n      hexadecimal digit. For example, a name for the address\n      2345:00C1:CA11:0001:1234:5678:9ABC:DEF0\
    \ of the example in section\n      5.3 would be sought at the DNS name \"0.f.e.d.c.b.a.9.-\n\
    \      8.7.6.5.4.3.2.1.1.0.0.0.1.1.a.c.1.c.0.0.5.4.3.2.ip6.int.\"\n   Implementations\
    \ conforming to this specification will perform a\n   lookup of a binary label\
    \ in IP6.ARPA as specified in Section 3.2.  It\n   is RECOMMENDED that for a transition\
    \ period implementations first\n   lookup the binary label in IP6.ARPA and if\
    \ this fails try to lookup\n   the 'nibble' label in IP6.INT.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The signing authority [DNSSEC] for the A6 records\
    \ which determine an\n   IPv6 address is distributed among several entities, reflecting\
    \ the\n   delegation path of the address space which that address occupies.\n\
    \   DNS Security is fully applicable to bit-string labels and DNAME\n   records.\
    \  And just as in IPv4, verification of name-to-address\n   mappings is logically\
    \ independent of verification of address-to-name\n   mappings.\n   With or without\
    \ DNSSEC, the incomplete but non-empty address set\n   scenario of section 3.1.4\
    \ could be caused by selective interference\n   with DNS lookups.  If in some\
    \ situation this would be more harmful\n   than complete DNS failure, it might\
    \ be mitigated on the client side\n   by refusing to act on an incomplete set,\
    \ or on the server side by\n   listing all addresses in A6 records with prefix\
    \ length 0.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The A6 resource record has been assigned a Type value\
    \ of 38.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The authors would like to thank the following persons\
    \ for valuable\n   discussions and reviews:  Mark Andrews, Rob Austein, Jim Bound,\
    \ Randy\n   Bush, Brian Carpenter, David Conrad, Steve Deering, Francis Dupont,\n\
    \   Robert Elz, Bob Fink, Olafur Gudmundsson, Bob Halley, Bob Hinden,\n   Edward\
    \ Lewis, Bill Manning, Keith Moore, Thomas Narten, Erik\n   Nordmark, Mike O'Dell,\
    \ Michael Patton and Ken Powell.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [AAAA]    Thomson, S. and C. Huitema, \"DNS Extensions to\
    \ support IP\n             version 6, RFC 1886, December 1995.\n   [AARCH]   Hinden,\
    \ R. and S. Deering, \"IP Version 6 Addressing\n             Architecture\", RFC\
    \ 2373, July 1998.\n   [AGGR]    Hinden, R., O'Dell, M. and S. Deering, \"An IPv6\n\
    \             Aggregatable Global Unicast Address Format\", RFC 2374, July\n \
    \            1998.\n   [BITLBL]  Crawford, M., \"Binary Labels in the Domain Name\
    \ System\",\n             RFC 2673, August 1999.\n   [DNAME]   Crawford, M., \"\
    Non-Terminal DNS Name Redirection\", RFC\n             2672, August 1999.\n  \
    \ [DNSCLAR] Elz, R. and R. Bush, \"Clarifications to the DNS\n             Specification\"\
    , RFC 2181, July 1997.\n   [DNSIS]   Mockapetris, P., \"Domain names - implementation\
    \ and\n             specification\", STD 13, RFC 1035, November 1987.\n   [DNSSEC]\
    \  Eastlake, D. 3rd and C. Kaufman, \"Domain Name System\n             Security\
    \ Extensions\", RFC 2535, March 1999.\n   [KWORD]   Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RENUM1]  Carpenter, B. and Y. Rekhter, \"Renumbering Needs\
    \ Work\", RFC\n             1900, February 1996.\n   [RENUM2]  Ferguson, P. and\
    \ H. Berkowitz, \"Network Renumbering\n             Overview:  Why would I want\
    \ it and what is it anyway?\", RFC\n             2071, January 1997.\n   [RENUM3]\
    \  Carpenter, B., Crowcroft, J. and Y. Rekhter, \"IPv4 Address\n             Behaviour\
    \ Today\", RFC 2101, February 1997.\n   [TRANS]   Gilligan, R. and E. Nordmark,\
    \ \"Transition Mechanisms for\n             IPv6 Hosts and Routers\", RFC 1933,\
    \ April 1996.\n   [TSIG]    Vixie, P., Gudmundsson, O., Eastlake, D. 3rd and B.\n\
    \             Wellington, \"Secret Key Transaction Authentication for DNS\n  \
    \           (TSIG)\", RFC 2845, May 2000.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Matt Crawford\n   Fermilab\n   MS 368\n   PO Box\
    \ 500\n   Batavia, IL 60510\n   USA\n   Phone: +1 630 840-3461\n   EMail: crawdad@fnal.gov\n\
    \   Christian Huitema\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond,\
    \ WA 98052-6399\n   EMail: huitema@microsoft.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
