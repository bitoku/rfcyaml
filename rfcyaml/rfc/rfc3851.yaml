- title: __initial_text__
  contents:
  - "   Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1\n      \
    \                   Message Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines Secure/Multipurpose Internet Mail Extensions\n\
    \   (S/MIME) version 3.1.  S/MIME provides a consistent way to send and\n   receive\
    \ secure MIME data.  Digital signatures provide authentication,\n   message integrity,\
    \ and non-repudiation with proof of origin.\n   Encryption provides data confidentiality.\
    \  Compression can be used to\n   reduce data size.  This document obsoletes RFC\
    \ 2633.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1.  Specification Overview . . . . . . . . . . . .\
    \ . . . . .  3\n       1.2.  Terminology. . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       1.3.  Definitions. . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       1.4.  Compatibility with Prior Practice of S/MIME. . . . .\
    \ . .  5\n       1.5.  Changes Since S/MIME v3. . . . . . . . . . . . . . . .\
    \ .  5\n   2.  CMS Options. . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n       2.1.  DigestAlgorithmIdentifier. . . . . . . . . . . . . . . .  5\n\
    \       2.2.  SignatureAlgorithmIdentifier . . . . . . . . . . . . . .  6\n  \
    \     2.3.  KeyEncryptionAlgorithmIdentifier . . . . . . . . . . . .  6\n    \
    \   2.4.  General Syntax . . . . . . . . . . . . . . . . . . . . .  6\n      \
    \ 2.5.  Attributes and the SignerInfo Type . . . . . . . . . . .  7\n       2.6.\
    \  SignerIdentifier SignerInfo Type . . . . . . . . . . . . 11\n       2.7.  ContentEncryptionAlgorithmIdentifier\
    \ . . . . . . . . . . 12\n   3.  Creating S/MIME Messages . . . . . . . . . .\
    \ . . . . . . . . . 14\n       3.1.  Preparing the MIME Entity for Signing, Enveloping\n\
    \             or Compressing . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \     3.2.  The application/pkcs7-mime Type. . . . . . . . . . . . . 19\n    \
    \   3.3.  Creating an Enveloped-only Message . . . . . . . . . . . 21\n      \
    \ 3.4.  Creating a Signed-only Message . . . . . . . . . . . . . 22\n       3.5.\
    \  Creating an Compressed-only Message. . . . . . . . . . . 26\n       3.6.  Multiple\
    \ Operations. . . . . . . . . . . . . . . . . . . 27\n       3.7.  Creating a\
    \ Certificate Management Messagetoc . . . . . . 27\n       3.8.  Registration\
    \ Requests. . . . . . . . . . . . . . . . . . 28\n       3.9.  Identifying an\
    \ S/MIME Message. . . . . . . . . . . . . . 28\n   4.  Certificate Processing\
    \ . . . . . . . . . . . . . . . . . . . . 29\n       4.1.  Key Pair Generation.\
    \ . . . . . . . . . . . . . . . . . . 29\n   5.  Security Considerations. . .\
    \ . . . . . . . . . . . . . . . . . 29\n   A.  ASN.1 Module . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 31\n   B.  References . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 32\n       B.1.  Normative References . . . .\
    \ . . . . . . . . . . . . . . 32\n       B.2.  Informative References . . . .\
    \ . . . . . . . . . . . . . 34\n   C.  Acknowledgements . . . . . . . . . . .\
    \ . . . . . . . . . . . . 35\n   D.  Editor's Address . . . . . . . . . . . .\
    \ . . . . . . . . . . . 35\n       Full Copyright Statement . . . . . . . . .\
    \ . . . . . . . . . . 36\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides\
    \ a\n   consistent way to send and receive secure MIME data.  Based on the\n \
    \  popular Internet MIME standard, S/MIME provides the following\n   cryptographic\
    \ security services for electronic messaging\n   applications:  authentication,\
    \ message integrity and non-repudiation\n   of origin (using digital signatures),\
    \ and data confidentiality (using\n   encryption).\n   S/MIME can be used by traditional\
    \ mail user agents (MUAs) to add\n   cryptographic security services to mail that\
    \ is sent, and to\n   interpret cryptographic security services in mail that is\
    \ received.\n   However, S/MIME is not restricted to mail; it can be used with\
    \ any\n   transport mechanism that transports MIME data, such as HTTP.  As\n \
    \  such, S/MIME takes advantage of the object-based features of MIME and\n   allows\
    \ secure messages to be exchanged in mixed-transport systems.\n   Further, S/MIME\
    \ can be used in automated message transfer agents that\n   use cryptographic\
    \ security services that do not require any human\n   intervention, such as the\
    \ signing of software-generated documents and\n   the encryption of FAX messages\
    \ sent over the Internet.\n"
- title: 1.1.  Specification Overview
  contents:
  - "1.1.  Specification Overview\n   This document describes a protocol for adding\
    \ cryptographic signature\n   and encryption services to MIME data.  The MIME\
    \ standard [MIME-SPEC]\n   provides a general structure for the content type of\
    \ Internet\n   messages and allows extensions for new content type applications.\n\
    \   This specification defines how to create a MIME body part that has\n   been\
    \ cryptographically enhanced according to CMS [CMS], which is\n   derived from\
    \ PKCS #7 [PKCS-7].  This specification also defines the\n   application/pkcs7-mime\
    \ MIME type that can be used to transport those\n   body parts.\n   This document\
    \ also discusses how to use the multipart/signed MIME\n   type defined in [MIME-SECURE]\
    \ to transport S/MIME signed messages.\n   multipart/signed is used in conjunction\
    \ with the application/pkcs7-\n   signature MIME type, which is used to transport\
    \ a detached S/MIME\n   signature.\n   In order to create S/MIME messages, an\
    \ S/MIME agent MUST follow the\n   specifications in this document, as well as\
    \ the specifications listed\n   in the Cryptographic Message Syntax document [CMS]\
    \ [CMSALG].\n   Throughout this specification, there are requirements and\n  \
    \ recommendations made for how receiving agents handle incoming\n   messages.\
    \  There are separate requirements and recommendations for\n   how sending agents\
    \ create outgoing messages.  In general, the best\n   strategy is to \"be liberal\
    \ in what you receive and conservative in\n   what you send\".  Most of the requirements\
    \ are placed on the handling\n   of incoming messages while the recommendations\
    \ are mostly on the\n   creation of outgoing messages.\n   The separation for\
    \ requirements on receiving agents and sending\n   agents also derives from the\
    \ likelihood that there will be S/MIME\n   systems that involve software other\
    \ than traditional Internet mail\n   clients.  S/MIME can be used with any system\
    \ that transports MIME\n   data.  An automated process that sends an encrypted\
    \ message might not\n   be able to receive an encrypted message at all, for example.\
    \  Thus,\n   the requirements and recommendations for the two types of agents\
    \ are\n   listed separately when appropriate.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [MUSTSHOULD].\n"
- title: 1.3.  Definitions
  contents:
  - "1.3.  Definitions\n   For the purposes of this specification, the following definitions\n\
    \   apply.\n   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208\n\
    \   [X.208-88].\n   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209\n\
    \   [X.209-88].\n   Certificate: A type that binds an entity's name to a public\
    \ key with\n   a digital signature.\n   DER: Distinguished Encoding Rules for\
    \ ASN.1, as defined in CCITT\n   X.509 [X.509-88].\n   7-bit data: Text data with\
    \ lines less than 998 characters long, where\n   none of the characters have the\
    \ 8th bit set, and there are no NULL\n   characters.  <CR> and <LF> occur only\
    \ as part of a <CR><LF> end of\n   line delimiter.\n   8-bit data: Text data with\
    \ lines less than 998 characters, and where\n   none of the characters are NULL\
    \ characters. <CR> and <LF> occur only\n   as part of a <CR><LF> end of line delimiter.\n\
    \   Binary data: Arbitrary data.\n   Transfer Encoding: A reversible transformation\
    \ made on data so 8-bit\n   or binary data can be sent via a channel that only\
    \ transmits 7-bit\n   data.\n   Receiving agent: Software that interprets and\
    \ processes S/MIME CMS\n   objects, MIME body parts that contain CMS content types,\
    \ or both.\n   Sending agent: Software that creates S/MIME CMS content types,\
    \ MIME\n   body parts that contain CMS content types, or both.\n   S/MIME agent:\
    \ User software that is a receiving agent, a sending\n   agent, or both.\n"
- title: 1.4.  Compatibility with Prior Practice of S/MIME
  contents:
  - "1.4.  Compatibility with Prior Practice of S/MIME\n   S/MIME version 3.1 agents\
    \ SHOULD attempt to have the greatest\n   interoperability possible with agents\
    \ for prior versions of S/MIME.\n   S/MIME version 2 is described in RFC 2311\
    \ through RFC 2315, inclusive\n   and S/MIME version 3 is described in RFC 2630\
    \ through RFC 2634\n   inclusive.  RFC 2311 also has historical information about\
    \ the\n   development of S/MIME.\n"
- title: 1.5.  Changes Since S/MIME v3
  contents:
  - "1.5.  Changes Since S/MIME v3\n   The RSA public key algorithm was changed to\
    \ a MUST implement key\n   wrapping algorithm, and the Diffie-Hellman algorithm\
    \ changed to a\n   SHOULD implement.\n   The AES symmetric encryption algorithm\
    \ has been included as a SHOULD\n   implement.\n   The RSA public key algorithm\
    \ was changed to a MUST implement\n   signature algorithm.\n   Ambiguous language\
    \ about the use of \"empty\" SignedData messages to\n   transmit certificates\
    \ was clarified to reflect that transmission of\n   certificate revocation lists\
    \ is also allowed.\n   The use of binary encoding for some MIME entities is now\
    \ explicitly\n   discussed.\n   Header protection through the use of the message/rfc822\
    \ MIME type has\n   been added.\n   Use of the CompressedData CMS type is allowed,\
    \ along with required\n   MIME type and file extension additions.\n"
- title: 2.  CMS Options
  contents:
  - "2.  CMS Options\n   CMS allows for a wide variety of options in content and algorithm\n\
    \   support.  This section puts forth a number of support requirements\n   and\
    \ recommendations in order to achieve a base level of\n   interoperability among\
    \ all S/MIME implementations. [CMSALG] provides\n   additional details regarding\
    \ the use of the cryptographic algorithms.\n"
- title: 2.1.  DigestAlgorithmIdentifier
  contents:
  - "2.1.  DigestAlgorithmIdentifier\n   Sending and receiving agents MUST support\
    \ SHA-1 [CMSALG].  Receiving\n   agents SHOULD support MD5 [CMSALG] for the purpose\
    \ of providing\n   backward compatibility with MD5-digested S/MIME v2 SignedData\n\
    \   objects.\n"
- title: 2.2.  SignatureAlgorithmIdentifier
  contents:
  - "2.2.  SignatureAlgorithmIdentifier\n   Receiving agents MUST support id-dsa-with-sha1\
    \ defined in [CMSALG].\n   The algorithm parameters MUST be absent (not encoded\
    \ as NULL).\n   Receiving agents MUST support rsaEncryption, defined in [CMSALG].\n\
    \   Sending agents MUST support either id-dsa-with-sha1 or rsaEncryption.\n  \
    \ If using rsaEncryption, sending and receiving agents MUST support the\n   digest\
    \ algorithms in section 2.1 as specified.\n   Note that S/MIME v3 clients might\
    \ only implement signing or signature\n   verification using id-dsa-with-sha1,\
    \ and might also use id-dsa as an\n   AlgorithmIdentifier in this field.  Receiving\
    \ clients SHOULD\n   recognize id-dsa as equivalent to id-dsa-with-sha1, and sending\n\
    \   clients MUST use id-dsa-with-sha1 if using that algorithm.  Also note\n  \
    \ that S/MIME v2 clients are only required to verify digital signatures\n   using\
    \ the rsaEncryption algorithm with SHA-1 or MD5, and might not\n   implement id-dsa-with-sha1\
    \ or id-dsa at all.\n"
- title: 2.3.  KeyEncryptionAlgorithmIdentifier
  contents:
  - "2.3.  KeyEncryptionAlgorithmIdentifier\n   Sending and receiving agents MUST\
    \ support rsaEncryption, defined in\n   [CMSALG].\n   Sending and receiving agents\
    \ SHOULD support Diffie-Hellman defined in\n   [CMSALG], using the ephemeral-static\
    \ mode.\n   Note that S/MIME v3 clients might only implement key encryption and\n\
    \   decryption using the Diffie-Hellman algorithm.  Also note that S/MIME\n  \
    \ v2 clients are only capable of decrypting content-encryption keys\n   using\
    \ the rsaEncryption algorithm.\n"
- title: 2.4.  General Syntax
  contents:
  - "2.4.  General Syntax\n   There are several CMS content types.  Of these, only\
    \ the Data,\n   SignedData, EnvelopedData, and CompressedData content types are\n\
    \   currently used for S/MIME.\n"
- title: 2.4.1.  Data Content Type
  contents:
  - "2.4.1.  Data Content Type\n   Sending agents MUST use the id-data content type\
    \ identifier to\n   identify the \"inner\" MIME message content.  For example,\
    \ when\n   applying a digital signature to MIME data, the CMS SignedData\n   encapContentInfo\
    \ eContentType MUST include the id-data object\n   identifier and the MIME content\
    \ MUST be stored in the SignedData\n   encapContentInfo eContent OCTET STRING\
    \ (unless the sending agent is\n   using multipart/signed, in which case the eContent\
    \ is absent, per\n   section 3.4.3 of this document).  As another example, when\
    \ applying\n   encryption to MIME data, the CMS EnvelopedData encryptedContentInfo\n\
    \   contentType MUST include the id-data object identifier and the\n   encrypted\
    \ MIME content MUST be stored in the EnvelopedData\n   encryptedContentInfo encryptedContent\
    \ OCTET STRING.\n"
- title: 2.4.2.  SignedData Content Type
  contents:
  - "2.4.2.  SignedData Content Type\n   Sending agents MUST use the SignedData content\
    \ type to apply a\n   digital signature to a message or, in a degenerate case\
    \ where there\n   is no signature information, to convey certificates.  Applying\
    \ a\n   signature to a message provides authentication, message integrity,\n \
    \  and non-repudiation of origin.\n"
- title: 2.4.3.  EnvelopedData Content Type
  contents:
  - "2.4.3.  EnvelopedData Content Type\n   This content type is used to apply data\
    \ confidentiality to a message.\n   A sender needs to have access to a public\
    \ key for each intended\n   message recipient to use this service.\n"
- title: 2.4.4.  CompressedData Content Type
  contents:
  - "2.4.4.  CompressedData Content Type\n   This content type is used to apply data\
    \ compression to a message.\n   This content type does not provide authentication,\
    \ message integrity,\n   non-repudiation, or data confidentiality, and is only\
    \ used to reduce\n   message size.\n   See section 3.6 for further guidance on\
    \ the use of this type in\n   conjunction with other CMS types.\n"
- title: 2.5.  Attributes and the SignerInfo Type
  contents:
  - "2.5.  Attributes and the SignerInfo Type\n   The SignerInfo type allows the inclusion\
    \ of unsigned and signed\n   attributes to be included along with a signature.\n\
    \   Receiving agents MUST be able to handle zero or one instance of each\n   of\
    \ the signed attributes listed here.  Sending agents SHOULD generate\n   one instance\
    \ of each of the following signed attributes in each\n   S/MIME message:\n   -\
    \  signingTime (section 2.5.1 in this document)\n   -  sMIMECapabilities (section\
    \ 2.5.2 in this document)\n   -  sMIMEEncryptionKeyPreference (section 2.5.3 in\
    \ this document)\n   -  id-messageDigest (section 11.2 in [CMS])\n   -  id-contentType\
    \ (section 11.1 in [CMS])\n   Further, receiving agents SHOULD be able to handle\
    \ zero or one\n   instance in the signingCertificate signed attribute, as defined\
    \ in\n   section 5 of [ESS].\n   Sending agents SHOULD generate one instance of\
    \ the signingCertificate\n   signed attribute in each SignerInfo structure.\n\
    \   Additional attributes and values for these attributes might be\n   defined\
    \ in the future.  Receiving agents SHOULD handle attributes or\n   values that\
    \ it does not recognize in a graceful manner.\n   Interactive sending agents that\
    \ include signed attributes that are\n   not listed here SHOULD display those\
    \ attributes to the user, so that\n   the user is aware of all of the data being\
    \ signed.\n"
- title: 2.5.1.  Signing-Time Attribute
  contents:
  - "2.5.1.  Signing-Time Attribute\n   The signing-time attribute is used to convey\
    \ the time that a message\n   was signed.  The time of signing will most likely\
    \ be created by a\n   message originator and therefore is only as trustworthy\
    \ as the\n   originator.\n   Sending agents MUST encode signing time through the\
    \ year 2049 as\n   UTCTime; signing times in 2050 or later MUST be encoded as\n\
    \   GeneralizedTime.  When the UTCTime CHOICE is used, S/MIME agents MUST\n  \
    \ interpret the year field (YY) as follows:\n   if YY is greater than or equal\
    \ to 50, the year is interpreted as\n   19YY; if YY is less than 50, the year\
    \ is interpreted as 20YY.\n"
- title: 2.5.2.  SMIMECapabilities Attribute
  contents:
  - "2.5.2.  SMIMECapabilities Attribute\n   The SMIMECapabilities attribute includes\
    \ signature algorithms (such\n   as \"sha1WithRSAEncryption\"), symmetric algorithms\
    \ (such as \"DES-\n   EDE3-CBC\"), and key encipherment algorithms (such as\n\
    \   \"rsaEncryption\").  There are also several identifiers which indicate\n \
    \  support for other optional features such as binary encoding and\n   compression.\
    \  The SMIMECapabilities were designed to be flexible and\n   extensible so that,\
    \ in the future, a means of identifying other\n   capabilities and preferences\
    \ such as certificates can be added in a\n   way that will not cause current clients\
    \ to break.\n   If present, the SMIMECapabilities attribute MUST be a\n   SignedAttribute;\
    \ it MUST NOT be an UnsignedAttribute.  CMS defines\n   SignedAttributes as a\
    \ SET OF Attribute.  The SignedAttributes in a\n   signerInfo MUST NOT include\
    \ multiple instances of the\n   SMIMECapabilities attribute.  CMS defines the\
    \ ASN.1 syntax for\n   Attribute to include attrValues SET OF AttributeValue.\
    \  A\n   SMIMECapabilities attribute MUST only include a single instance of\n\
    \   AttributeValue.  There MUST NOT be zero or multiple instances of\n   AttributeValue\
    \ present in the attrValues SET OF AttributeValue.\n   The semantics of the SMIMECapabilities\
    \ attribute specify a partial\n   list as to what the client announcing the SMIMECapabilities\
    \ can\n   support.  A client does not have to list every capability it\n   supports,\
    \ and need not list all its capabilities so that the\n   capabilities list doesn't\
    \ get too long.  In an SMIMECapabilities\n   attribute, the object identifiers\
    \ (OIDs) are listed in order of their\n   preference, but SHOULD be separated\
    \ logically along the lines of\n   their categories (signature algorithms, symmetric\
    \ algorithms, key\n   encipherment algorithms, etc.)\n   The structure of the\
    \ SMIMECapabilities attribute is to facilitate\n   simple table lookups and binary\
    \ comparisons in order to determine\n   matches.  For instance, the DER-encoding\
    \ for the SMIMECapability for\n   DES EDE3 CBC MUST be identically encoded regardless\
    \ of the\n   implementation.  Because of the requirement for identical encoding,\n\
    \   individuals documenting algorithms to be used in the\n   SMIMECapabilities\
    \ attribute SHOULD explicitly document the correct\n   byte sequence for the common\
    \ cases.\n   For any capability, the associated parameters for the OID MUST\n\
    \   specify all of the parameters necessary to differentiate between two\n   instances\
    \ of the same algorithm.  For instance, the number of rounds\n   and the block\
    \ size for RC5 needs to be specified in addition to the\n   key length.\n   The\
    \ OIDs that correspond to algorithms SHOULD use the same OID as the\n   actual\
    \ algorithm, except in the case where the algorithm usage is\n   ambiguous from\
    \ the OID.  For instance, in an earlier specification,\n   rsaEncryption was ambiguous\
    \ because it could refer to either a\n   signature algorithm or a key encipherment\
    \ algorithm.  In the event\n   that an OID is ambiguous, it needs to be arbitrated\
    \ by the maintainer\n   of the registered SMIMECapabilities list as to which type\
    \ of\n   algorithm will use the OID, and a new OID MUST be allocated under the\n\
    \   smimeCapabilities OID to satisfy the other use of the OID.\n   The registered\
    \ SMIMECapabilities list specifies the parameters for\n   OIDs that need them,\
    \ most notably key lengths in the case of\n   variable-length symmetric ciphers.\
    \  In the event that there are no\n   differentiating parameters for a particular\
    \ OID, the parameters MUST\n   be omitted, and MUST NOT be encoded as NULL.\n\
    \   Additional values for the SMIMECapabilities attribute might be\n   defined\
    \ in the future.  Receiving agents MUST handle a\n   SMIMECapabilities object\
    \ that has values that it does not recognize\n   in a graceful manner.\n   Section\
    \ 2.7.1 explains a strategy for caching capabilities.\n"
- title: 2.5.2.1.  SMIMECapability For the RC2 Algorithm
  contents:
  - "2.5.2.1.  SMIMECapability For the RC2 Algorithm\n   For the RC2 algorithm preference\
    \ SMIMECapability, the capabilityID\n   MUST be set to the value rc2-cbc as defined\
    \ in [CMSALG].  The\n   parameters field MUST contain SMIMECapabilitiesParametersForRC2CBC\n\
    \   (see appendix A).\n   Please note that the SMIMECapabilitiesParametersForRC2CBC\
    \ is a single\n   INTEGER which contains the effective key length (NOT the\n \
    \  corresponding RC2 parameter version value).  So, for example, for RC2\n   with\
    \ a 128-bit effective key length, the parameter would be encoded\n   as the INTEGER\
    \ value 128, NOT the corresponding parameter version of\n   58.\n"
- title: 2.5.3.  Encryption Key Preference Attribute
  contents:
  - "2.5.3.  Encryption Key Preference Attribute\n   The encryption key preference\
    \ attribute allows the signer to\n   unambiguously describe which of the signer's\
    \ certificates has the\n   signer's preferred encryption key.  This attribute\
    \ is designed to\n   enhance behavior for interoperating with those clients that\
    \ use\n   separate keys for encryption and signing.  This attribute is used to\n\
    \   convey to anyone viewing the attribute which of the listed\n   certificates\
    \ is appropriate for encrypting a session key for future\n   encrypted messages.\n\
    \   If present, the SMIMEEncryptionKeyPreference attribute MUST be a\n   SignedAttribute;\
    \ it MUST NOT be an UnsignedAttribute.  CMS defines\n   SignedAttributes as a\
    \ SET OF Attribute.  The SignedAttributes in a\n   signerInfo MUST NOT include\
    \ multiple instances of the\n   SMIMEEncryptionKeyPreference attribute.  CMS defines\
    \ the ASN.1 syntax\n   for Attribute to include attrValues SET OF AttributeValue.\
    \  A\n   SMIMEEncryptionKeyPreference attribute MUST only include a single\n \
    \  instance of AttributeValue.  There MUST NOT be zero or multiple\n   instances\
    \ of AttributeValue present in the attrValues SET OF\n   AttributeValue.\n   The\
    \ sending agent SHOULD include the referenced certificate in the\n   set of certificates\
    \ included in the signed message if this attribute\n   is used.  The certificate\
    \ MAY be omitted if it has been previously\n   made available to the receiving\
    \ agent.  Sending agents SHOULD use\n   this attribute if the commonly used or\
    \ preferred encryption\n   certificate is not the same as the certificate used\
    \ to sign the\n   message.\n   Receiving agents SHOULD store the preference data\
    \ if the signature on\n   the message is valid and the signing time is greater\
    \ than the\n   currently stored value. (As with the SMIMECapabilities, the clock\n\
    \   skew SHOULD be checked and the data not used if the skew is too\n   great.)\
    \  Receiving agents SHOULD respect the sender's encryption key\n   preference\
    \ attribute if possible.  This, however, represents only a\n   preference and\
    \ the receiving agent can use any certificate in\n   replying to the sender that\
    \ is valid.\n   Section 2.7.1 explains a strategy for caching preference data.\n"
- title: 2.5.3.1.  Selection of Recipient Key Management Certificate
  contents:
  - "2.5.3.1.  Selection of Recipient Key Management Certificate\n   In order to determine\
    \ the key management certificate to be used when\n   sending a future CMS EnvelopedData\
    \ message for a particular\n   recipient, the following steps SHOULD be followed:\n\
    \   -  If an SMIMEEncryptionKeyPreference attribute is found in a\n      SignedData\
    \ object received from the desired recipient, this\n      identifies the X.509\
    \ certificate that SHOULD be used as the X.509\n      key management certificate\
    \ for the recipient.\n   -  If an SMIMEEncryptionKeyPreference attribute is not\
    \ found in a\n      SignedData object received from the desired recipient, the\
    \ set of\n      X.509 certificates SHOULD be searched for a X.509 certificate\
    \ with\n      the same subject name as the signing of a X.509 certificate which\n\
    \      can be used for key management.\n   -  Or use some other method of determining\
    \ the user's key management\n      key.  If a X.509 key management certificate\
    \ is not found, then\n      encryption cannot be done with the signer of the message.\
    \  If\n      multiple X.509 key management certificates are found, the S/MIME\n\
    \      agent can make an arbitrary choice between them.\n"
- title: 2.6.  SignerIdentifier SignerInfo Type
  contents:
  - "2.6.  SignerIdentifier SignerInfo Type\n   S/MIME v3.1 implementations MUST support\
    \ both issuerAndSerialNumber\n   as well as subjectKeyIdentifier.  Messages that\
    \ use the\n   subjectKeyIdentifier choice cannot be read by S/MIME v2 clients.\n\
    \   It is important to understand that some certificates use a value for\n   subjectKeyIdentifier\
    \ that is not suitable for uniquely identifying a\n   certificate.  Implementations\
    \ MUST be prepared for multiple\n   certificates for potentially different entities\
    \ to have the same\n   value for subjectKeyIdentifier, and MUST be prepared to\
    \ try each\n   matching certificate during signature verification before indicating\n\
    \   an error condition.\n"
- title: 2.7.  ContentEncryptionAlgorithmIdentifier
  contents:
  - "2.7.  ContentEncryptionAlgorithmIdentifier\n   Sending and receiving agents MUST\
    \ support encryption and decryption\n   with DES EDE3 CBC, hereinafter called\
    \ \"tripleDES\" [CMSALG].\n   Receiving agents SHOULD support encryption and decryption\
    \ using the\n   RC2 [CMSALG] or a compatible algorithm at a key size of 40 bits,\n\
    \   hereinafter called \"RC2/40\".  Sending and receiving agents SHOULD\n   support\
    \ encryption and decryption with AES [CMSAES] at a key size of\n   128, 192, and\
    \ 256 bits.\n"
- title: 2.7.1.  Deciding Which Encryption Method To Use
  contents:
  - "2.7.1.  Deciding Which Encryption Method To Use\n   When a sending agent creates\
    \ an encrypted message, it has to decide\n   which type of encryption to use.\
    \  The decision process involves using\n   information garnered from the capabilities\
    \ lists included in messages\n   received from the recipient, as well as out-of-band\
    \ information such\n   as private agreements, user preferences, legal restrictions,\
    \ and so\n   on.\n   Section 2.5.2 defines a method by which a sending agent can\n\
    \   optionally announce, among other things, its decrypting capabilities\n   in\
    \ its order of preference.  The following method for processing and\n   remembering\
    \ the encryption capabilities attribute in incoming signed\n   messages SHOULD\
    \ be used.\n   -  If the receiving agent has not yet created a list of capabilities\n\
    \      for the sender's public key, then, after verifying the signature\n    \
    \  on the incoming message and checking the timestamp, the receiving\n      agent\
    \ SHOULD create a new list containing at least the signing\n      time and the\
    \ symmetric capabilities.\n   -  If such a list already exists, the receiving\
    \ agent SHOULD verify\n      that the signing time in the incoming message is\
    \ greater than the\n      signing time stored in the list and that the signature\
    \ is valid.\n      If so, the receiving agent SHOULD update both the signing time\
    \ and\n      capabilities in the list.  Values of the signing time that lie far\n\
    \      in the future (that is, a greater discrepancy than any reasonable\n   \
    \   clock skew), or a capabilities list in messages whose signature\n      could\
    \ not be verified, MUST NOT be accepted.\n   The list of capabilities SHOULD be\
    \ stored for future use in creating\n   messages.\n   Before sending a message,\
    \ the sending agent MUST decide whether it is\n   willing to use weak encryption\
    \ for the particular data in the\n   message.  If the sending agent decides that\
    \ weak encryption is\n   unacceptable for this data, then the sending agent MUST\
    \ NOT use a\n   weak algorithm such as RC2/40.  The decision to use or not use\
    \ weak\n   encryption overrides any other decision in this section about which\n\
    \   encryption algorithm to use.\n   Sections 2.7.2.1 through 2.7.2.4 describe\
    \ the decisions a sending\n   agent SHOULD use in deciding which type of encryption\
    \ will be applied\n   to a message.  These rules are ordered, so the sending agent\
    \ SHOULD\n   make its decision in the order given.\n"
- title: '2.7.1.1.  Rule 1: Known Capabilities'
  contents:
  - "2.7.1.1.  Rule 1: Known Capabilities\n   If the sending agent has received a\
    \ set of capabilities from the\n   recipient for the message the agent is about\
    \ to encrypt, then the\n   sending agent SHOULD use that information by selecting\
    \ the first\n   capability in the list (that is, the capability most preferred\
    \ by the\n   intended recipient) that the sending agent knows how to encrypt.\
    \  The\n   sending agent SHOULD use one of the capabilities in the list if the\n\
    \   agent reasonably expects the recipient to be able to decrypt the\n   message.\n"
- title: '2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME'
  contents:
  - "2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME\n   If the\
    \ following two conditions are met:\n   -  the sending agent has no knowledge\
    \ of the encryption capabilities\n      of the recipient,\n   -  and the sending\
    \ agent has no knowledge of the version of S/MIME of\n      the recipient,\n \
    \  then the sending agent SHOULD use tripleDES because it is a stronger\n   algorithm\
    \ and is required by S/MIME v3.  If the sending agent chooses\n   not to use tripleDES\
    \ in this step, it SHOULD use RC2/40.\n"
- title: 2.7.2.  Choosing Weak Encryption
  contents:
  - "2.7.2.  Choosing Weak Encryption\n   Like all algorithms that use 40 bit keys,\
    \ RC2/40 is considered by\n   many to be weak encryption.  A sending agent that\
    \ is controlled by a\n   human SHOULD allow a human sender to determine the risks\
    \ of sending\n   data using RC2/40 or a similarly weak encryption algorithm before\n\
    \   sending the data, and possibly allow the human to use a stronger\n   encryption\
    \ method such as tripleDES.\n"
- title: 2.7.3.  Multiple Recipients
  contents:
  - "2.7.3.  Multiple Recipients\n   If a sending agent is composing an encrypted\
    \ message to a group of\n   recipients where the encryption capabilities of some\
    \ of the\n   recipients do not overlap, the sending agent is forced to send more\n\
    \   than one message.  Please note that if the sending agent chooses to\n   send\
    \ a message encrypted with a strong algorithm, and then send the\n   same message\
    \ encrypted with a weak algorithm, someone watching the\n   communications channel\
    \ could learn the contents of the strongly-\n   encrypted message simply by decrypting\
    \ the weakly-encrypted message.\n"
- title: 3.  Creating S/MIME Messages
  contents:
  - "3.  Creating S/MIME Messages\n   This section describes the S/MIME message formats\
    \ and how they are\n   created.  S/MIME messages are a combination of MIME bodies\
    \ and CMS\n   content types.  Several MIME types as well as several CMS content\n\
    \   types are used.  The data to be secured is always a canonical MIME\n   entity.\
    \  The MIME entity and other data, such as certificates and\n   algorithm identifiers,\
    \ are given to CMS processing facilities which\n   produce a CMS object.  Finally,\
    \ the CMS object is wrapped in MIME.\n   The Enhanced Security Services for S/MIME\
    \ [ESS] document provides\n   descriptions of how nested, secured S/MIME messages\
    \ are formatted.\n   ESS provides a description of how a triple-wrapped S/MIME\
    \ message is\n   formatted using multipart/signed and application/pkcs7-mime for\
    \ the\n   signatures.\n   S/MIME provides one format for enveloped-only data,\
    \ several formats\n   for signed-only data, and several formats for signed and\
    \ enveloped\n   data.  Several formats are required to accommodate several\n \
    \  environments, in particular for signed messages.  The criteria for\n   choosing\
    \ among these formats are also described.\n   The reader of this section is expected\
    \ to understand MIME as\n   described in [MIME-SPEC] and [MIME-SECURE].\n"
- title: 3.1.  Preparing the MIME Entity for Signing, Enveloping or Compressing
  contents:
  - "3.1.  Preparing the MIME Entity for Signing, Enveloping or Compressing\n   S/MIME\
    \ is used to secure MIME entities.  A MIME entity can be a sub-\n   part, sub-parts\
    \ of a message, or the whole message with all its sub-\n   parts.  A MIME entity\
    \ that is the whole message includes only the\n   MIME headers and MIME body,\
    \ and does not include the RFC-822 headers.\n   Note that S/MIME can also be used\
    \ to secure MIME entities used in\n   applications other than Internet mail. \
    \ If protection of the RFC-822\n   headers is required, the use of the message/rfc822\
    \ MIME type is\n   explained later in this section.\n   The MIME entity that is\
    \ secured and described in this section can be\n   thought of as the \"inside\"\
    \ MIME entity.  That is, it is the\n   \"innermost\" object in what is possibly\
    \ a larger MIME message.\n   Processing \"outside\" MIME entities into CMS content\
    \ types is\n   described in Section 3.2, 3.4, and elsewhere.\n   The procedure\
    \ for preparing a MIME entity is given in [MIME-SPEC].\n   The same procedure\
    \ is used here with some additional restrictions\n   when signing.  Description\
    \ of the procedures from [MIME-SPEC] are\n   repeated here, but it is suggested\
    \ that the reader refer to that\n   document for the exact procedure.  This section\
    \ also describes\n   additional requirements.\n   A single procedure is used for\
    \ creating MIME entities that are to\n   have any combination of signing, enveloping,\
    \ and compressing applied.\n   Some additional steps are recommended to defend\
    \ against known\n   corruptions that can occur during mail transport that are\
    \ of\n   particular importance for clear-signing using the multipart/signed\n\
    \   format.  It is recommended that these additional steps be performed\n   on\
    \ enveloped messages, or signed and enveloped messages, so that the\n   message\
    \ can be forwarded to any environment without modification.\n   These steps are\
    \ descriptive rather than prescriptive.  The\n   implementer is free to use any\
    \ procedure as long as the result is the\n   same.\n   Step 1.  The MIME entity\
    \ is prepared according to the local\n   conventions.\n   Step 2.  The leaf parts\
    \ of the MIME entity are converted to canonical\n   form.\n   Step 3.  Appropriate\
    \ transfer encoding is applied to the leaves of\n   the MIME entity.\n   When\
    \ an S/MIME message is received, the security services on the\n   message are\
    \ processed, and the result is the MIME entity.  That MIME\n   entity is typically\
    \ passed to a MIME-capable user agent where, it is\n   further decoded and presented\
    \ to the user or receiving application.\n   In order to protect outer, non-content\
    \ related message headers (for\n   instance, the \"Subject\", \"To\", \"From\"\
    \ and \"CC\" fields), the sending\n   client MAY wrap a full MIME message in a\
    \ message/rfc822 wrapper in\n   order to apply S/MIME security services to these\
    \ headers.  It is up\n   to the receiving client to decide how to present these\
    \ \"inner\"\n   headers along with the unprotected \"outer\" headers.\n   When\
    \ an S/MIME message is received, if the top-level protected MIME\n   entity has\
    \ a Content-Type of message/rfc822, it can be assumed that\n   the intent was\
    \ to provide header protection.  This entity SHOULD be\n   presented as the top-level\
    \ message, taking into account header\n   merging issues as previously discussed.\n"
- title: 3.1.1.  Canonicalization
  contents:
  - "3.1.1.  Canonicalization\n   Each MIME entity MUST be converted to a canonical\
    \ form that is\n   uniquely and unambiguously representable in the environment\
    \ where the\n   signature is created and the environment where the signature will\
    \ be\n   verified.  MIME entities MUST be canonicalized for enveloping and\n \
    \  compressing as well as signing.\n   The exact details of canonicalization depend\
    \ on the actual MIME type\n   and subtype of an entity, and are not described\
    \ here.  Instead, the\n   standard for the particular MIME type SHOULD be consulted.\
    \  For\n   example, canonicalization of type text/plain is different from\n  \
    \ canonicalization of audio/basic.  Other than text types, most types\n   have\
    \ only one representation regardless of computing platform or\n   environment\
    \ which can be considered their canonical representation.\n   In general, canonicalization\
    \ will be performed by the non-security\n   part of the sending agent rather than\
    \ the S/MIME implementation.\n   The most common and important canonicalization\
    \ is for text, which is\n   often represented differently in different environments.\
    \  MIME\n   entities of major type \"text\" MUST have both their line endings\
    \ and\n   character set canonicalized.  The line ending MUST be the pair of\n\
    \   characters <CR><LF>, and the charset SHOULD be a registered charset\n   [CHARSETS].\
    \  The details of the canonicalization are specified in\n   [MIME-SPEC].  The\
    \ chosen charset SHOULD be named in the charset\n   parameter so that the receiving\
    \ agent can unambiguously determine the\n   charset used.\n   Note that some charsets\
    \ such as ISO-2022 have multiple\n   representations for the same characters.\
    \  When preparing such text\n   for signing, the canonical representation specified\
    \ for the charset\n   MUST be used.\n"
- title: 3.1.2.  Transfer Encoding
  contents:
  - "3.1.2.  Transfer Encoding\n   When generating any of the secured MIME entities\
    \ below, except the\n   signing using the multipart/signed format, no transfer\
    \ encoding is\n   required at all.  S/MIME implementations MUST be able to deal\
    \ with\n   binary MIME objects.  If no Content-Transfer-Encoding header is\n \
    \  present, the transfer encoding is presumed to be 7BIT.\n   S/MIME implementations\
    \ SHOULD however use transfer encoding described\n   in section 3.1.3 for all\
    \ MIME entities they secure.  The reason for\n   securing only 7-bit MIME entities,\
    \ even for enveloped data that are\n   not exposed to the transport, is that it\
    \ allows the MIME entity to be\n   handled in any environment without changing\
    \ it.  For example, a\n   trusted gateway might remove the envelope, but not the\
    \ signature, of\n   a message, and then forward the signed message on to the end\n\
    \   recipient so that they can verify the signatures directly.  If the\n   transport\
    \ internal to the site is not 8-bit clean, such as on a\n   wide-area network\
    \ with a single mail gateway, verifying the signature\n   will not be possible\
    \ unless the original MIME entity was only 7-bit\n   data.\n   S/MIME implementations\
    \ which \"know\" that all intended recipient(s)\n   are capable of handling inner\
    \ (all but the outermost) binary MIME\n   objects SHOULD use binary encoding as\
    \ opposed to a 7-bit-safe\n   transfer encoding for the inner entities.  The use\
    \ of a 7-bit-safe\n   encoding (such as base64) would unnecessarily expand the\
    \ message\n   size.  Implementations MAY \"know\" that recipient implementations\
    \ are\n   capable of handling inner binary MIME entities either by interpreting\n\
    \   the id-cap-preferBinaryInside sMIMECapabilities attribute, by prior\n   agreement,\
    \ or by other means.\n   If one or more intended recipients are unable to handle\
    \ inner binary\n   MIME objects, or if this capability is unknown for any of the\n\
    \   intended recipients, S/MIME implementations SHOULD use transfer\n   encoding\
    \ described in section 3.1.3 for all MIME entities they\n   secure.\n"
- title: 3.1.3.  Transfer Encoding for Signing Using multipart/signed
  contents:
  - "3.1.3.  Transfer Encoding for Signing Using multipart/signed\n   If a multipart/signed\
    \ entity is ever to be transmitted over the\n   standard Internet SMTP infrastructure\
    \ or other transport that is\n   constrained to 7-bit text, it MUST have transfer\
    \ encoding applied so\n   that it is represented as 7-bit text.  MIME entities\
    \ that are 7-bit\n   data already need no transfer encoding.  Entities such as\
    \ 8-bit text\n   and binary data can be encoded with quoted-printable or base-64\n\
    \   transfer encoding.\n   The primary reason for the 7-bit requirement is that\
    \ the Internet\n   mail transport infrastructure cannot guarantee transport of\
    \ 8-bit or\n   binary data.  Even though many segments of the transport\n   infrastructure\
    \ now handle 8-bit and even binary data, it is sometimes\n   not possible to know\
    \ whether the transport path is 8-bit clean.  If a\n   mail message with 8-bit\
    \ data were to encounter a message transfer\n   agent that can not transmit 8-bit\
    \ or binary data, the agent has three\n   options, none of which are acceptable\
    \ for a clear-signed message:\n   -  The agent could change the transfer encoding;\
    \ this would\n      invalidate the signature.\n   -  The agent could transmit\
    \ the data anyway, which would most likely\n      result in the 8th bit being\
    \ corrupted; this too would invalidate\n      the signature.\n   -  The agent\
    \ could return the message to the sender.\n   [MIME-SECURE] prohibits an agent\
    \ from changing the transfer encoding\n   of the first part of a multipart/signed\
    \ message.  If a compliant\n   agent that can not transmit 8-bit or binary data\
    \ encounters a\n   multipart/signed message with 8-bit or binary data in the first\
    \ part,\n   it would have to return the message to the sender as undeliverable.\n"
- title: 3.1.4.  Sample Canonical MIME Entity
  contents:
  - "3.1.4.  Sample Canonical MIME Entity\n   This example shows a multipart/mixed\
    \ message with full transfer\n   encoding.  This message contains a text part\
    \ and an attachment.  The\n   sample message text includes characters that are\
    \ not US-ASCII and\n   thus need to be transfer encoded.  Though not shown here,\
    \ the end of\n   each line is <CR><LF>.  The line ending of the MIME headers,\
    \ the\n   text, and transfer encoded parts, all MUST be <CR><LF>.\n   Note that\
    \ this example is not of an S/MIME message.\n       Content-Type: multipart/mixed;\
    \ boundary=bar\n       --bar\n       Content-Type: text/plain; charset=iso-8859-1\n\
    \       Content-Transfer-Encoding: quoted-printable\n       =A1Hola Michael!\n\
    \       How do you like the new S/MIME specification?\n       It's generally a\
    \ good idea to encode lines that begin with\n       From=20because some mail transport\
    \ agents will insert a greater-\n       than (>) sign, thus invalidating the signature.\n\
    \       Also, in some cases it might be desirable to encode any   =20\n      \
    \ trailing whitespace that occurs on lines in order to ensure  =20\n       that\
    \ the message signature is not invalidated when passing =20\n       a gateway\
    \ that modifies such whitespace (like BITNET). =20\n       --bar\n       Content-Type:\
    \ image/jpeg\n       Content-Transfer-Encoding: base64\n       iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n\
    \       jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n   \
    \    uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n      \
    \ HOxEa44b+EI=\n       --bar--\n"
- title: 3.2.  The application/pkcs7-mime Type
  contents:
  - "3.2.  The application/pkcs7-mime Type\n   The application/pkcs7-mime type is\
    \ used to carry CMS content types\n   including EnvelopedData, SignedData, and\
    \ CompressedData.  The details\n   of constructing these entities is described\
    \ in subsequent sections.\n   This section describes the general characteristics\
    \ of the\n   application/pkcs7-mime type.\n   The carried CMS object always contains\
    \ a MIME entity that is prepared\n   as described in section 3.1 if the eContentType\
    \ is id-data.  Other\n   contents MAY be carried when the eContentType contains\
    \ different\n   values.  See [ESS] for an example of this with signed receipts.\n\
    \   Since CMS content types are binary data, in most cases base-64\n   transfer\
    \ encoding is appropriate, in particular, when used with SMTP\n   transport. \
    \ The transfer encoding used depends on the transport\n   through which the object\
    \ is to be sent, and is not a characteristic\n   of the MIME type.\n   Note that\
    \ this discussion refers to the transfer encoding of the CMS\n   object or \"\
    outside\" MIME entity.  It is completely distinct from, and\n   unrelated to,\
    \ the transfer encoding of the MIME entity secured by the\n   CMS object, the\
    \ \"inside\" object, which is described in section 3.1.\n   Because there are\
    \ several types of application/pkcs7-mime objects, a\n   sending agent SHOULD\
    \ do as much as possible to help a receiving agent\n   know about the contents\
    \ of the object without forcing the receiving\n   agent to decode the ASN.1 for\
    \ the object.  The MIME headers of all\n   application/pkcs7-mime objects SHOULD\
    \ include the optional \"smime-\n   type\" parameter, as described in the following\
    \ sections.\n"
- title: 3.2.1.  The name and filename Parameters
  contents:
  - "3.2.1.  The name and filename Parameters\n   For the application/pkcs7-mime,\
    \ sending agents SHOULD emit the\n   optional \"name\" parameter to the Content-Type\
    \ field for compatibility\n   with older systems.  Sending agents SHOULD also\
    \ emit the optional\n   Content-Disposition field [CONTDISP] with the \"filename\"\
    \ parameter.\n   If a sending agent emits the above parameters, the value of the\n\
    \   parameters SHOULD be a file name with the appropriate extension:\n   MIME\
    \ Type                                            File Extension\n   application/pkcs7-mime\
    \ (SignedData, EnvelopedData)      .p7m\n   application/pkcs7-mime (degenerate\
    \ SignedData           .p7c\n     certificate management message)\n   application/pkcs7-mime\
    \ (CompressedData)                 .p7z\n   application/pkcs7-signature (SignedData)\
    \                .p7s\n   In addition, the file name SHOULD be limited to eight\
    \ characters\n   followed by a three letter extension.  The eight character filename\n\
    \   base can be any distinct name; the use of the filename base \"smime\"\n  \
    \ SHOULD be used to indicate that the MIME entity is associated with\n   S/MIME.\n\
    \   Including a file name serves two purposes.  It facilitates easier use\n  \
    \ of S/MIME objects as files on disk.  It also can convey type\n   information\
    \ across gateways.  When a MIME entity of type\n   application/pkcs7-mime (for\
    \ example) arrives at a gateway that has no\n   special knowledge of S/MIME, it\
    \ will default the entity's MIME type\n   to application/octet-stream and treat\
    \ it as a generic attachment,\n   thus losing the type information.  However,\
    \ the suggested filename\n   for an attachment is often carried across a gateway.\
    \  This often\n   allows the receiving systems to determine the appropriate application\n\
    \   to hand the attachment off to, in this case, a stand-alone S/MIME\n   processing\
    \ application.  Note that this mechanism is provided as a\n   convenience for\
    \ implementations in certain environments.  A proper\n   S/MIME implementation\
    \ MUST use the MIME types and MUST NOT rely on\n   the file extensions.\n"
- title: 3.2.2.  The smime-type parameter
  contents:
  - "3.2.2.  The smime-type parameter\n   The application/pkcs7-mime content type\
    \ defines the optional \"smime-\n   type\" parameter.  The intent of this parameter\
    \ is to convey details\n   about the security applied (signed or enveloped) along\
    \ with\n   information about the contained content.  This specification defines\n\
    \   the following smime-types.\n   Name                   CMS type           \
    \     Inner Content\n   enveloped-data         EnvelopedData           id-data\n\
    \   signed-data            SignedData              id-data\n   certs-only    \
    \         SignedData              none\n   compressed-data        CompressedData\
    \          id-data\n   In order for consistency to be obtained with future specifications,\n\
    \   the following guidelines SHOULD be followed when assigning a new\n   smime-type\
    \ parameter.\n   1. If both signing and encryption can be applied to the content,\
    \ then\n   two values for smime-type SHOULD be assigned \"signed-*\" and\n   \"\
    encrypted-*\".  If one operation can be assigned then this can be\n   omitted.\
    \  Thus since \"certs-only\" can only be signed, \"signed-\" is\n   omitted.\n\
    \   2. A common string for a content OID SHOULD be assigned.  We use\n   \"data\"\
    \ for the id-data content OID when MIME is the inner content.\n   3. If no common\
    \ string is assigned.  Then the common string of\n   \"OID.<oid>\" is recommended\
    \ (for example, \"OID.1.3.6.1.5.5.7.6.1\"\n   would be DES40).\n   It is explicitly\
    \ intended that this field be a suitable hint for mail\n   client applications\
    \ to indicate whether a message is \"signed\" or\n   \"encrypted\" without having\
    \ to tunnel into the CMS payload.\n"
- title: 3.3.  Creating an Enveloped-only Message
  contents:
  - "3.3.  Creating an Enveloped-only Message\n   This section describes the format\
    \ for enveloping a MIME entity\n   without signing it.  It is important to note\
    \ that sending enveloped\n   but not signed messages does not provide for data\
    \ integrity.  It is\n   possible to replace ciphertext in such a way that the\
    \ processed\n   message will still be valid, but the meaning can be altered.\n\
    \   Step 1.  The MIME entity to be enveloped is prepared according to\n   section\
    \ 3.1.\n   Step 2.  The MIME entity and other required data is processed into\
    \ a\n   CMS object of type EnvelopedData.  In addition to encrypting a copy\n\
    \   of the content-encryption key for each recipient, a copy of the\n   content-encryption\
    \ key SHOULD be encrypted for the originator and\n   included in the EnvelopedData\
    \ (see [CMS] Section 6).\n   Step 3.  The EnvelopedData object is wrapped in a\
    \ CMS ContentInfo\n   object.\n   Step 4.  The ContentInfo object is inserted\
    \ into an\n   application/pkcs7-mime MIME entity.\n   The smime-type parameter\
    \ for enveloped-only messages is \"enveloped-\n   data\".  The file extension\
    \ for this type of message is \".p7m\".\n   A sample message would be:\n     \
    \  Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n        \
    \    name=smime.p7m\n       Content-Transfer-Encoding: base64\n       Content-Disposition:\
    \ attachment; filename=smime.p7m\n       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       0GhIGfHfQbnj756YT64V\n"
- title: 3.4.  Creating a Signed-only Message
  contents:
  - "3.4.  Creating a Signed-only Message\n   There are two formats for signed messages\
    \ defined for S/MIME:\n   application/pkcs7-mime with SignedData, and multipart/signed.\
    \  In\n   general, the multipart/signed form is preferred for sending, and\n \
    \  receiving agents MUST be able to handle both.\n"
- title: 3.4.1.  Choosing a Format for Signed-only Messages
  contents:
  - "3.4.1.  Choosing a Format for Signed-only Messages\n   There are no hard-and-fast\
    \ rules when a particular signed-only format\n   is chosen because it depends\
    \ on the capabilities of all the receivers\n   and the relative importance of\
    \ receivers with S/MIME facilities being\n   able to verify the signature versus\
    \ the importance of receivers\n   without S/MIME software being able to view the\
    \ message.\n   Messages signed using the multipart/signed format can always be\n\
    \   viewed by the receiver whether they have S/MIME software or not.\n   They\
    \ can also be viewed whether they are using a MIME-native user\n   agent or they\
    \ have messages translated by a gateway.  In this\n   context, \"be viewed\" means\
    \ the ability to process the message\n   essentially as if it were not a signed\
    \ message, including any other\n   MIME structure the message might have.\n  \
    \ Messages signed using the SignedData format cannot be viewed by a\n   recipient\
    \ unless they have S/MIME facilities.  However, the\n   SignedData format protects\
    \ the message content from being changed by\n   benign intermediate agents.  Such\
    \ agents might do line wrapping or\n   content-transfer encoding changes which\
    \ would break the signature.\n"
- title: 3.4.2.  Signing Using application/pkcs7-mime with SignedData
  contents:
  - "3.4.2.  Signing Using application/pkcs7-mime with SignedData\n   This signing\
    \ format uses the application/pkcs7-mime MIME type.  The\n   steps to create this\
    \ format are:\n   Step 1.  The MIME entity is prepared according to section 3.1.\n\
    \   Step 2.  The MIME entity and other required data is processed into a\n   CMS\
    \ object of type SignedData.\n   Step 3.  The SignedData object is wrapped in\
    \ a CMS ContentInfo\n   object.\n   Step 4.  The ContentInfo object is inserted\
    \ into an\n   application/pkcs7-mime MIME entity.\n   The smime-type parameter\
    \ for messages using application/pkcs7-mime\n   with SignedData is \"signed-data\"\
    .  The file extension for this type\n   of message is \".p7m\".\n   A sample message\
    \ would be:\n       Content-Type: application/pkcs7-mime; smime-type=signed-data;\n\
    \            name=smime.p7m\n       Content-Transfer-Encoding: base64\n      \
    \ Content-Disposition: attachment; filename=smime.p7m\n       567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7\n\
    \       77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH\n       HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh\n\
    \       6YT64V0GhIGfHfQbnj75\n"
- title: 3.4.3.  Signing Using the multipart/signed Format
  contents:
  - "3.4.3.  Signing Using the multipart/signed Format\n   This format is a clear-signing\
    \ format.  Recipients without any S/MIME\n   or CMS processing facilities are\
    \ able to view the message.  It makes\n   use of the multipart/signed MIME type\
    \ described in [MIME-SECURE].\n   The multipart/signed MIME type has two parts.\
    \  The first part\n   contains the MIME entity that is signed; the second part\
    \ contains the\n   \"detached signature\" CMS SignedData object in which the\n\
    \   encapContentInfo eContent field is absent.\n"
- title: 3.4.3.1.  The application/pkcs7-signature MIME Type
  contents:
  - "3.4.3.1.  The application/pkcs7-signature MIME Type\n   This MIME type always\
    \ contains a CMS ContentInfo containing a single\n   CMS object of type SignedData.\
    \  The SignedData encapContentInfo\n   eContent field MUST be absent.  The signerInfos\
    \ field contains the\n   signatures for the MIME entity.\n   The file extension\
    \ for signed-only messages using application/pkcs7-\n   signature is \".p7s\"\
    .\n"
- title: 3.4.3.2.  Creating a multipart/signed Message
  contents:
  - "3.4.3.2.  Creating a multipart/signed Message\n   Step 1.  The MIME entity to\
    \ be signed is prepared according to\n   section 3.1, taking special care for\
    \ clear-signing.\n   Step 2.  The MIME entity is presented to CMS processing in\
    \ order to\n   obtain an object of type SignedData in which the encapContentInfo\n\
    \   eContent field is absent.\n   Step 3.  The MIME entity is inserted into the\
    \ first part of a\n   multipart/signed message with no processing other than that\
    \ described\n   in section 3.1.\n   Step 4.  Transfer encoding is applied to the\
    \ \"detached signature\" CMS\n   SignedData object and it is inserted into a MIME\
    \ entity of type\n   application/pkcs7-signature.\n   Step 5.  The MIME entity\
    \ of the application/pkcs7-signature is\n   inserted into the second part of the\
    \ multipart/signed entity.\n   The multipart/signed Content type has two required\
    \ parameters: the\n   protocol parameter and the micalg parameter.\n   The protocol\
    \ parameter MUST be \"application/pkcs7-signature\".  Note\n   that quotation\
    \ marks are required around the protocol parameter\n   because MIME requires that\
    \ the \"/\" character in the parameter value\n   MUST be quoted.\n   The micalg\
    \ parameter allows for one-pass processing when the\n   signature is being verified.\
    \  The value of the micalg parameter is\n   dependent on the message digest algorithm(s)\
    \ used in the calculation\n   of the Message Integrity Check.  If multiple message\
    \ digest\n   algorithms are used they MUST be separated by commas per [MIME-\n\
    \   SECURE].  The values to be placed in the micalg parameter SHOULD be\n   from\
    \ the following:\n   Algorithm   Value\n   used\n   MD5         md5\n   SHA-1\
    \       sha1\n   SHA-256     sha256\n   SHA-384     sha384\n   SHA-512     sha512\n\
    \   Any other   (defined separately in algorithm profile or \"unknown\"\n    \
    \            if not defined)\n   (Historical note: some early implementations\
    \ of S/MIME emitted and\n   expected \"rsa-md5\" and \"rsa-sha1\" for the micalg\
    \ parameter.)\n   Receiving agents SHOULD be able to recover gracefully from a\
    \ micalg\n   parameter value that they do not recognize.\n   The SHA-256, SHA-384,\
    \ and SHA-512 algorithms [FIPS180-2] are not\n   currently recommended in S/MIME,\
    \ and are included here for\n   completeness.\n"
- title: 3.4.3.3.  Sample multipart/signed Message
  contents:
  - "3.4.3.3.  Sample multipart/signed Message\n       Content-Type: multipart/signed;\n\
    \          protocol=\"application/pkcs7-signature\";\n          micalg=sha1; boundary=boundary42\n\
    \       --boundary42\n       Content-Type: text/plain\n       This is a clear-signed\
    \ message.\n       --boundary42\n       Content-Type: application/pkcs7-signature;\
    \ name=smime.p7s\n       Content-Transfer-Encoding: base64\n       Content-Disposition:\
    \ attachment; filename=smime.p7s\n       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n\
    \       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       7GhIGfHfYT64VQbnj756\n       --boundary42--\n   The content that is digested\
    \ (the first part of the multipart/signed)\n   are the bytes:\n   43 6f 6e 74\
    \ 65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 70 6c 61 69\n   6e 0d 0a 0d 0a\
    \ 54 68 69 73 20 69 73 20 61 20 63 6c 65 61 72 2d 73 69\n   67 6e 65 64 20 6d\
    \ 65 73 73 61 67 65 2e 0d 0a\n"
- title: 3.5.  Creating an Compressed-only Message
  contents:
  - "3.5.  Creating an Compressed-only Message\n   This section describes the format\
    \ for compressing a MIME entity.\n   Please note that versions of S/MIME prior\
    \ to 3.1 did not specify any\n   use of CompressedData, and will not recognize\
    \ it.  The use of a\n   capability to indicate the ability to receive CompressedData\
    \ is\n   described in [CMSCOMPR] and is the preferred method for\n   compatibility.\n\
    \   Step 1.  The MIME entity to be compressed is prepared according to\n   section\
    \ 3.1.\n   Step 2.  The MIME entity and other required data is processed into\
    \ a\n   CMS object of type CompressedData.\n   Step 3.  The CompressedData object\
    \ is wrapped in a CMS ContentInfo\n   object.\n   Step 4.  The ContentInfo object\
    \ is inserted into an\n   application/pkcs7-mime MIME entity.\n   The smime-type\
    \ parameter for compressed-only messages is\n   \"compressed-data\".  The file\
    \ extension for this type of message is\n   \".p7z\".\n   A sample message would\
    \ be:\n       Content-Type: application/pkcs7-mime; smime-type=compressed-data;\n\
    \            name=smime.p7z\n       Content-Transfer-Encoding: base64\n      \
    \ Content-Disposition: attachment; filename=smime.p7z\n       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       0GhIGfHfQbnj756YT64V\n"
- title: 3.6.  Multiple Operations
  contents:
  - "3.6.  Multiple Operations\n   The signed-only, encrypted-only, and compressed-only\
    \ MIME formats can\n   be nested.  This works because these formats are all MIME\
    \ entities\n   that encapsulate other MIME entities.\n   An S/MIME implementation\
    \ MUST be able to receive and process\n   arbitrarily nested S/MIME within reasonable\
    \ resource limits of the\n   recipient computer.\n   It is possible to apply any\
    \ of the signing, encrypting, and\n   compressing operations in any order.  It\
    \ is up to the implementer and\n   the user to choose.  When signing first, the\
    \ signatories are then\n   securely obscured by the enveloping.  When enveloping\
    \ first the\n   signatories are exposed, but it is possible to verify signatures\n\
    \   without removing the enveloping.  This can be useful in an\n   environment\
    \ were automatic signature verification is desired, as no\n   private key material\
    \ is required to verify a signature.\n   There are security ramifications to choosing\
    \ whether to sign first or\n   encrypt first.  A recipient of a message that is\
    \ encrypted and then\n   signed can validate that the encrypted block was unaltered,\
    \ but\n   cannot determine any relationship between the signer and the\n   unencrypted\
    \ contents of the message.  A recipient of a message that\n   is signed-then-encrypted\
    \ can assume that the signed message itself\n   has not been altered, but that\
    \ a careful attacker could have changed\n   the unauthenticated portions of the\
    \ encrypted message.\n   When using compression, keep the following guidelines\
    \ in mind:\n   -  Compression of binary encoded encrypted data is discouraged,\
    \ since\n      it will not yield significant compression.  Base64 encrypted data\n\
    \      could very well benefit, however.\n   -  If a lossy compression algorithm\
    \ is used with signing, you will\n      need to compress first, then sign.\n"
- title: 3.7.  Creating a Certificate Management Message
  contents:
  - "3.7.  Creating a Certificate Management Message\n   The certificate management\
    \ message or MIME entity is used to\n   transport certificates and/or certificate\
    \ revocation lists, such as\n   in response to a registration request.\n   Step\
    \ 1.  The certificates and/or certificate revocation lists are\n   made available\
    \ to the CMS generating process which creates a CMS\n   object of type SignedData.\
    \  The SignedData encapContentInfo eContent\n   field MUST be absent and signerInfos\
    \ field MUST be empty.\n   Step 2.  The SignedData object is wrapped in a CMS\
    \ ContentInfo\n   object.\n   Step 3.  The ContentInfo object is enclosed in an\
    \ application/pkcs7-\n   mime MIME entity.\n   The smime-type parameter for a\
    \ certificate management message is\n   \"certs-only\".  The file extension for\
    \ this type of message is \".p7c\".\n"
- title: 3.8.  Registration Requests
  contents:
  - "3.8.  Registration Requests\n   A sending agent that signs messages MUST have\
    \ a certificate for the\n   signature so that a receiving agent can verify the\
    \ signature.  There\n   are many ways of getting certificates, such as through\
    \ an exchange\n   with a certificate authority, through a hardware token or diskette,\n\
    \   and so on.\n   S/MIME v2 [SMIMEV2] specified a method for \"registering\"\
    \ public keys\n   with certificate authorities using an application/pkcs10 body\
    \ part.\n   Since that time, the IETF PKIX Working Group has developed other\n\
    \   methods for requesting certificates.  However, S/MIME v3.1 does not\n   require\
    \ a particular certificate request mechanism.\n"
- title: 3.9.  Identifying an S/MIME Message
  contents:
  - "3.9.  Identifying an S/MIME Message\n   Because S/MIME takes into account interoperation\
    \ in non-MIME\n   environments, several different mechanisms are employed to carry\
    \ the\n   type information, and it becomes a bit difficult to identify S/MIME\n\
    \   messages.  The following table lists criteria for determining whether\n  \
    \ or not a message is an S/MIME message.  A message is considered an\n   S/MIME\
    \ message if it matches any of the criteria listed below.\n   The file suffix\
    \ in the table below comes from the \"name\" parameter in\n   the content-type\
    \ header, or the \"filename\" parameter on the content-\n   disposition header.\
    \  These parameters that give the file suffix are\n   not listed below as part\
    \ of the parameter section.\n   MIME type:   application/pkcs7-mime\n   parameters:\
    \  any\n   file suffix: any\n   MIME type:   multipart/signed\n   parameters:\
    \  protocol=\"application/pkcs7-signature\"\n   file suffix: any\n   MIME type:\
    \   application/octet-stream\n   parameters:  any\n   file suffix: p7m, p7s, p7c,\
    \ p7z\n"
- title: 4.  Certificate Processing
  contents:
  - "4.  Certificate Processing\n   A receiving agent MUST provide some certificate\
    \ retrieval mechanism\n   in order to gain access to certificates for recipients\
    \ of digital\n   envelopes.  This specification does not cover how S/MIME agents\n\
    \   handle certificates, only what they do after a certificate has been\n   validated\
    \ or rejected.  S/MIME certificate issues are covered in\n   [CERT31].\n   At\
    \ a minimum, for initial S/MIME deployment, a user agent could\n   automatically\
    \ generate a message to an intended recipient requesting\n   that recipient's\
    \ certificate in a signed return message.  Receiving\n   and sending agents SHOULD\
    \ also provide a mechanism to allow a user to\n   \"store and protect\" certificates\
    \ for correspondents in such a way so\n   as to guarantee their later retrieval.\n"
- title: 4.1.  Key Pair Generation
  contents:
  - "4.1.  Key Pair Generation\n   All generated key pairs MUST be generated from\
    \ a good source of non-\n   deterministic random input [RANDOM] and the private\
    \ key MUST be\n   protected in a secure fashion.\n   If an S/MIME agent needs\
    \ to generate an RSA key pair, then the S/MIME\n   agent or some related administrative\
    \ utility or function SHOULD\n   generate RSA key pairs using the following guidelines.\
    \  A user agent\n   SHOULD generate RSA key pairs at a minimum key size of 768\
    \ bits.  A\n   user agent MUST NOT generate RSA key pairs less than 512 bits long.\n\
    \   Creating keys longer than 1024 bits can cause some older S/MIME\n   receiving\
    \ agents to not be able to verify signatures, but gives\n   better security and\
    \ is therefore valuable.  A receiving agent SHOULD\n   be able to verify signatures\
    \ with keys of any size over 512 bits.\n   Some agents created in the United States\
    \ have chosen to create 512\n   bit keys in order to get more advantageous export\
    \ licenses.  However,\n   512 bit keys are considered by many to be cryptographically\
    \ insecure.\n   Implementers SHOULD be aware that multiple (active) key pairs\
    \ can be\n   associated with a single individual.  For example, one key pair can\n\
    \   be used to support confidentiality, while a different key pair can be\n  \
    \ used for authentication.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   40-bit encryption is considered weak by most\
    \ cryptographers.  Using\n   weak cryptography in S/MIME offers little actual\
    \ security over\n   sending plaintext.  However, other features of S/MIME, such\
    \ as the\n   specification of tripleDES and the ability to announce stronger\n\
    \   cryptographic capabilities to parties with whom you communicate,\n   allow\
    \ senders to create messages that use strong encryption.  Using\n   weak cryptography\
    \ is never recommended unless the only alternative is\n   no cryptography.  When\
    \ feasible, sending and receiving agents SHOULD\n   inform senders and recipients\
    \ of the relative cryptographic strength\n   of messages.\n   It is impossible\
    \ for most software or people to estimate the value of\n   a message.  Further,\
    \ it is impossible for most software or people to\n   estimate the actual cost\
    \ of decrypting a message that is encrypted\n   with a key of a particular size.\
    \  Further, it is quite difficult to\n   determine the cost of a failed decryption\
    \ if a recipient cannot\n   decode a message.  Thus, choosing between different\
    \ key sizes (or\n   choosing whether to just use plaintext) is also impossible.\
    \  However,\n   decisions based on these criteria are made all the time, and\n\
    \   therefore this specification gives a framework for using those\n   estimates\
    \ in choosing algorithms.\n   If a sending agent is sending the same message using\
    \ different\n   strengths of cryptography, an attacker watching the communications\n\
    \   channel might be able to determine the contents of the strongly-\n   encrypted\
    \ message by decrypting the weakly-encrypted version.  In\n   other words, a sender\
    \ SHOULD NOT send a copy of a message using\n   weaker cryptography than they\
    \ would use for the original of the\n   message.\n   Modification of the ciphertext\
    \ can go undetected if authentication is\n   not also used, which is the case\
    \ when sending EnvelopedData without\n   wrapping it in SignedData or enclosing\
    \ SignedData within it.\n   See RFC 3218 [MMA] for more information about thwarting\
    \ the adaptive\n   chosen ciphertext vulnerability in PKCS #1 Version 1.5\n  \
    \ implementations.\n   In some circumstances the use of the Diffie-Hellman key\
    \ agreement\n   scheme in a prime order subgroup of a large prime p is vulnerable\
    \ to\n   certain attacks known as \"small-subgroup\" attacks.  Methods exist,\n\
    \   however, to prevent these attacks.  These methods are described in\n   RFC\
    \ 2785 [DHSUB].\n"
- title: A.  ASN.1 Module
  contents:
  - 'A.  ASN.1 Module

    '
- title: SecureMimeMessageV3dot1
  contents:
  - "SecureMimeMessageV3dot1\n  { iso(1) member-body(2) us(840) rsadsi(113549)\n \
    \        pkcs(1) pkcs-9(9) smime(16) modules(0) msg-v3dot1(21) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: -- Cryptographic Message Syntax
  contents:
  - "-- Cryptographic Message Syntax\n    SubjectKeyIdentifier, IssuerAndSerialNumber,\n\
    \    RecipientKeyIdentifier\n        FROM    CryptographicMessageSyntax\n    \
    \           { iso(1) member-body(2) us(840) rsadsi(113549)\n                 pkcs(1)\
    \ pkcs-9(9) smime(16) modules(0) cms-2001(14) };\n"
- title: --  id-aa is the arc with all new authenticated and unauthenticated
  contents:
  - '--  id-aa is the arc with all new authenticated and unauthenticated

    '
- title: --  attributes produced the by S/MIME Working Group
  contents:
  - '--  attributes produced the by S/MIME Working Group

    '
- title: id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2) usa(840)
  contents:
  - "id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2) usa(840)\n        rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) attributes(2)}\n"
- title: -- S/MIME Capabilities provides a method of broadcasting the symmetric
  contents:
  - '-- S/MIME Capabilities provides a method of broadcasting the symmetric

    '
- title: -- capabilities understood.  Algorithms SHOULD be ordered by
  contents:
  - '-- capabilities understood.  Algorithms SHOULD be ordered by

    '
- title: -- preference and grouped by type
  contents:
  - '-- preference and grouped by type

    '
- title: smimeCapabilities OBJECT IDENTIFIER ::=
  contents:
  - "smimeCapabilities OBJECT IDENTIFIER ::=\n   {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 15}\n"
- title: SMIMECapability ::= SEQUENCE {
  contents:
  - "SMIMECapability ::= SEQUENCE {\n   capabilityID OBJECT IDENTIFIER,\n   parameters\
    \ ANY DEFINED BY capabilityID OPTIONAL }\n"
- title: SMIMECapabilities ::= SEQUENCE OF SMIMECapability
  contents:
  - 'SMIMECapabilities ::= SEQUENCE OF SMIMECapability

    '
- title: -- Encryption Key Preference provides a method of broadcasting the
  contents:
  - '-- Encryption Key Preference provides a method of broadcasting the

    '
- title: -- preferred encryption certificate.
  contents:
  - '-- preferred encryption certificate.

    '
- title: id-aa-encrypKeyPref OBJECT IDENTIFIER ::= {id-aa 11}
  contents:
  - 'id-aa-encrypKeyPref OBJECT IDENTIFIER ::= {id-aa 11}

    '
- title: SMIMEEncryptionKeyPreference ::= CHOICE {
  contents:
  - "SMIMEEncryptionKeyPreference ::= CHOICE {\n   issuerAndSerialNumber   [0] IssuerAndSerialNumber,\n\
    \   receipentKeyId          [1] RecipientKeyIdentifier,\n   subjectAltKeyIdentifier\
    \ [2] SubjectKeyIdentifier\n"
- title: '}'
  contents:
  - '}

    '
- title: id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n   us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 16 }\n"
- title: id-cap  OBJECT IDENTIFIER ::= { id-smime 11 }
  contents:
  - 'id-cap  OBJECT IDENTIFIER ::= { id-smime 11 }

    '
- title: -- The preferBinaryInside indicates an ability to receive messages
  contents:
  - '-- The preferBinaryInside indicates an ability to receive messages

    '
- title: -- with binary encoding inside the CMS wrapper
  contents:
  - '-- with binary encoding inside the CMS wrapper

    '
- title: id-cap-preferBinaryInside  OBJECT IDENTIFIER ::= { id-cap 1 }
  contents:
  - 'id-cap-preferBinaryInside  OBJECT IDENTIFIER ::= { id-cap 1 }

    '
- title: --  The following list the OIDs to be used with S/MIME V3
  contents:
  - '--  The following list the OIDs to be used with S/MIME V3

    '
- title: -- Signature Algorithms Not Found in [CMSALG]
  contents:
  - '-- Signature Algorithms Not Found in [CMSALG]

    '
- title: --
  contents:
  - '--

    '
- title: -- md2WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - '-- md2WithRSAEncryption OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)

    '
- title: --     2}
  contents:
  - '--     2}

    '
- title: --
  contents:
  - '--

    '
- title: -- Other Signed Attributes
  contents:
  - '-- Other Signed Attributes

    '
- title: --
  contents:
  - '--

    '
- title: -- signingTime OBJECT IDENTIFIER ::=
  contents:
  - '-- signingTime OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)

    '
- title: --     5}
  contents:
  - '--     5}

    '
- title: --    See [CMS] for a description of how to encode the attribute
  contents:
  - '--    See [CMS] for a description of how to encode the attribute

    '
- title: --    value.
  contents:
  - '--    value.

    '
- title: SMIMECapabilitiesParametersForRC2CBC ::= INTEGER
  contents:
  - 'SMIMECapabilitiesParametersForRC2CBC ::= INTEGER

    '
- title: --        (RC2 Key Length (number of bits))
  contents:
  - '--        (RC2 Key Length (number of bits))

    '
- title: END
  contents:
  - 'END

    '
- title: B.  References
  contents:
  - 'B.  References

    '
- title: B.1.  Normative References
  contents:
  - "B.1.  Normative References\n   [CERT31]      Ramsdell, B., Ed., \"S/MIME Version\
    \ 3.1 Certificate\n                 Handling\", RFC 3850, July 2004.\n   [CHARSETS]\
    \    Character sets assigned by IANA.  See\n                 http://www.iana.org/assignments/character-sets\n\
    \   [CMS]         Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC\n \
    \                3852, July 2004.\n   [CMSAES]      Schaad, J., \"Use of the Advanced\
    \ Encryption Standard\n                 (AES) Encryption Algorithm in Cryptographic\
    \ Message\n                 Syntax (CMS)\", RFC 3565, July 2003.\n   [CMSALG]\
    \      Housley, R., \"Cryptographic Message Syntax (CMS)\n                 Algorithms\"\
    , RFC 3370, August 2002.\n   [CMSCOMPR]    Gutmann, P., \"Compressed Data Content\
    \ Type for\n                 Cryptographic Message Syntax (CMS)\", RFC 3274, June\n\
    \                 2002.\n   [CONTDISP]    Troost, R., Dorner, S., and K. Moore,\
    \ \"Communicating\n                 Presentation Information in Internet Messages:\
    \ The\n                 Content-Disposition Header Field\", RFC 2183, August\n\
    \                 1997.\n   [ESS]         Hoffman, P., \"Enhanced Security Services\
    \ for S/MIME\",\n                 RFC 2634, June 1999.\n   [FIPS180-2]   \"Secure\
    \ Hash Signature Standard (SHS)\", National\n                 Institute of Standards\
    \ and Technology (NIST).  FIPS\n                 Publication 180-2.\n   [MIME-SPEC]\
    \   Freed, N. and N. Borenstein, \"Multipurpose Internet\n                 Mail\
    \ Extensions (MIME) Part One: Format of Internet\n                 Message Bodies\"\
    , RFC 2045, November 1996.\n                 Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet\n                 Mail Extensions (MIME) Part Two: Media Types\", RFC\n\
    \                 2046, November 1996.\n                 Moore, K., \"MIME (Multipurpose\
    \ Internet Mail\n                 Extensions) Part Three:  Message Header Extensions\
    \ for\n                 Non-ASCII Text\", RFC 2047, November 1996.\n         \
    \        Freed, N., Klensin, J., and J. Postel, \"Multipurpose\n             \
    \    Internet Mail Extensions (MIME) Part Four: Registration\n               \
    \  Procedures\", BCP 13, RFC 2048, November 1996.\n                 Freed, N.\
    \ and N. Borenstein, \"Multipurpose Internet\n                 Mail Extensions\
    \ (MIME) Part Five: Conformance Criteria\n                 and Examples\", RFC\
    \ 2049, November 1996.\n   [MIME-SECURE] Galvin, J., Murphy, S., Crocker, S.,\
    \ and N. Freed,\n                 \"Security Multiparts for MIME: Multipart/Signed\
    \ and\n                 Multipart/Encrypted\", RFC 1847, October 1995.\n   [MUSTSHOULD]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [X.208-88]    CCITT.  Recommendation\
    \ X.208: Specification of Abstract\n                 Syntax Notation One (ASN.1).\
    \  1988.\n   [X.209-88]    CCITT.  Recommendation X.209: Specification of Basic\n\
    \                 Encoding Rules for Abstract Syntax Notation One\n          \
    \       (ASN.1).  1988.\n   [X.509-88]    CCITT.  Recommendation X.509: The Directory\
    \ -\n                 Authentication Framework.  1988.\n"
- title: B.2.  Informative References
  contents:
  - "B.2.  Informative References\n   [DHSUB]       Zuccherato, R., \"Methods for\
    \ Avoiding the \"Small-\n                 Subgroup\" Attacks on the Diffie-Hellman\
    \ Key Agreement\n                 Method for S/MIME\", RFC 2785, March 2000.\n\
    \   [MMA]         Rescorla, E., \"Preventing the Million Message Attack on\n \
    \                Cryptographic Message Syntax\", RFC 3218, January 2002.\n   [PKCS-7]\
    \      Kaliski, B., \"PKCS #7: Cryptographic Message Syntax\n                \
    \ Version 1.5\", RFC 2315, March 1998.\n   [RANDOM]      Eastlake 3rd, D., Crocker,\
    \ S., and J. Schiller,\n                 \"Randomness Recommendations for Security\"\
    , RFC 1750,\n                 December 1994.\n   [SMIMEV2]     Dusse, S., Hoffman,\
    \ P., Ramsdell, B., Lundblade, L.,\n                 and L. Repka, \"S/MIME Version\
    \ 2 Message Specification\",\n                 RFC 2311, March 1998.\n"
- title: C.  Acknowledgements
  contents:
  - "C.  Acknowledgements\n   Many thanks go out to the other authors of the S/MIME\
    \ Version 2\n   Message Specification RFC: Steve Dusse, Paul Hoffman, Laurence\n\
    \   Lundblade and Lisa Repka.\n   A number of the members of the S/MIME Working\
    \ Group have also worked\n   very hard and contributed to this document.  Any\
    \ list of people is\n   doomed to omission, and for that I apologize.  In alphabetical\
    \ order,\n   the following people stand out in my mind due to the fact that they\n\
    \   made direct contributions to this document.\n   Tony Capel\n   Piers Chivers\n\
    \   Dave Crocker\n   Bill Flanigan\n   Peter Gutmann\n   Paul Hoffman\n   Russ\
    \ Housley\n   William Ottaway\n   John Pawling\n   Jim Schaad\n"
- title: D.  Editor's Address
  contents:
  - "D.  Editor's Address\n   Blake Ramsdell\n   Sendmail, Inc.\n   704 228th Ave\
    \ NE #775\n   Sammamish, WA  98074\n   EMail: blake@sendmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
