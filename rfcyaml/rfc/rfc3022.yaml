- title: __initial_text__
  contents:
  - '      Traditional IP Network Address Translator (Traditional NAT)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Preface
  contents:
  - "Preface\n   The NAT operation described in this document extends address\n  \
    \ translation introduced in RFC 1631 and includes a new type of network\n   address\
    \ and TCP/UDP port translation.  In addition, this document\n   corrects the Checksum\
    \ adjustment algorithm published in RFC 1631 and\n   attempts to discuss NAT operation\
    \ and limitations in detail.\n"
- title: Abstract
  contents:
  - "Abstract\n   Basic Network Address Translation or Basic NAT is a method by which\n\
    \   IP addresses are mapped from one group to another, transparent to end\n  \
    \ users.  Network Address Port Translation, or NAPT is a method by\n   which many\
    \ network addresses and their TCP/UDP (Transmission Control\n   Protocol/User\
    \ Datagram Protocol) ports are translated into a single\n   network address and\
    \ its TCP/UDP ports.  Together, these two\n   operations, referred to as traditional\
    \ NAT, provide a mechanism to\n   connect a realm with private addresses to an\
    \ external realm with\n   globally unique registered addresses.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The need for IP Address translation arises when a network's\
    \ internal\n   IP addresses cannot be used outside the network either for privacy\n\
    \   reasons or because they are invalid for use outside the network.\n   Network\
    \ topology outside a local domain can change in many ways.\n   Customers may change\
    \ providers, company backbones may be reorganized,\n   or providers may merge\
    \ or split.  Whenever external topology changes\n   with time, address assignment\
    \ for nodes within the local domain must\n   also change to reflect the external\
    \ changes.  Changes of this type\n   can be hidden from users within the domain\
    \ by centralizing changes to\n   a single address translation router.\n   Basic\
    \ Address translation would (in many cases, except as noted in\n   [NAT-TERM]\
    \ and section 6 of this document) allow hosts in a private\n   network to transparently\
    \ access the external network and enable\n   access to selective local hosts from\
    \ the outside.  Organizations with\n   a network setup predominantly for internal\
    \ use, with a need for\n   occasional external access are good candidates for\
    \ this scheme.\n   Many Small Office, Home Office (SOHO) users and telecommuting\n\
    \   employees have multiple Network nodes in their office, running\n   TCP/UDP\
    \ applications, but have a single IP address assigned to their\n   remote access\
    \ router by their service provider to access remote\n   networks.  This ever increasing\
    \ community of remote access users\n   would be benefited by NAPT, which would\
    \ permit multiple nodes in a\n   local network to simultaneously access remote\
    \ networks using the\n   single IP address assigned to their router.\n   There\
    \ are limitations to using the translation method.  It is\n   mandatory that all\
    \ requests and responses pertaining to a session be\n   routed via the same NAT\
    \ router.  One way to ascertain this would be\n   to have NAT based on a border\
    \ router that is unique to a stub domain,\n   where all IP packets are either\
    \ originated from the domain or\n   destined to the domain.  There are other ways\
    \ to ensure this with\n   multiple NAT devices.  For example, a private domain\
    \ could have two\n   distinct exit points to different providers and the session\
    \ flow from\n   the hosts in a private network could traverse through whichever\
    \ NAT\n   device has the best metric for an external host.  When one of the NAT\n\
    \   routers fail, the other could route traffic for all the connections.\n   There\
    \ is however a caveat with this approach, in that, rerouted flows\n   could fail\
    \ at the time of switchover to the new NAT router.  A way to\n   overcome this\
    \ potential problem is that the routers share the same\n   NAT configuration and\
    \ exchange state information to ensure a fail-\n   safe backup for each other.\n\
    \   Address translation is application independent and often accompanied\n   by\
    \ application specific gateways (ALGs) to perform payload monitoring\n   and alterations.\
    \  FTP is the most popular ALG resident on NAT\n   devices.  Applications requiring\
    \ ALG intervention must not have their\n   payload encoded, as doing that would\
    \ effectively disables the ALG,\n   unless the ALG has the key to decrypt the\
    \ payload.\n   This solution has the disadvantage of taking away the end-to-end\n\
    \   significance of an IP address, and making up for it with increased\n   state\
    \ in the network.  As a result, end-to-end IP network level\n   security assured\
    \ by IPSec cannot be assumed to end hosts, with a NAT\n   device enroute.  The\
    \ advantage of this approach however is that it\n   can be installed without changes\
    \ to hosts or routers.\n   Definition of terms such as \"Address Realm\", \"Transparent\
    \ Routing\",\n   \"TU Ports\", \"ALG\" and others, used throughout the document,\
    \ may be\n   found in [NAT-TERM].\n"
- title: 2. Overview of traditional NAT
  contents:
  - "2. Overview of traditional NAT\n   The Address Translation operation presented\
    \ in this document is\n   referred to as \"Traditional NAT\".  There are other\
    \ variations of NAT\n   that will not be explored in this document.  Traditional\
    \ NAT would\n   allow hosts within a private network to transparently access hosts\
    \ in\n   the external network, in most cases.  In a traditional NAT, sessions\n\
    \   are uni-directional, outbound from the private network.  Sessions in\n   the\
    \ opposite direction may be allowed on an exceptional basis using\n   static address\
    \ maps for pre-selected hosts.  Basic NAT and NAPT are\n   two variations of traditional\
    \ NAT, in that translation in Basic NAT\n   is limited to IP addresses alone,\
    \ whereas translation in NAPT is\n   extended to include IP address and Transport\
    \ identifier (such as\n   TCP/UDP port or ICMP query ID).\n   Unless mentioned\
    \ otherwise, Address Translation or NAT throughout\n   this document will pertain\
    \ to traditional NAT, namely Basic NAT as\n   well as NAPT.  Only the stub border\
    \ routers as described in figure 1\n   below may be configured to perform address\
    \ translation.\n        \\ | /                 .                             \
    \   /\n   +---------------+  WAN     .           +-----------------+/\n   |Regional\
    \ Router|----------------------|Stub Router w/NAT|---\n   +---------------+  \
    \        .           +-----------------+\\\n                              .  \
    \                    |         \\\n                              .           \
    \           |  LAN\n                              .               ---------------\n\
    \                        Stub border\n            Figure 1: Traditional NAT Configuration\n"
- title: 2.1 Overview of Basic NAT
  contents:
  - "2.1 Overview of Basic NAT\n   Basic NAT operation is as follows.  A stub domain\
    \ with a set of\n   private network addresses could be enabled to communicate\
    \ with\n   external network by dynamically mapping the set of private addresses\n\
    \   to a set of globally valid network addresses.  If the number of local\n  \
    \ nodes are less than or equal to addresses in the global set, each\n   local\
    \ address is guaranteed a global address to map to.  Otherwise,\n   nodes allowed\
    \ to have simultaneous access to external network are\n   limited by the number\
    \ of addresses in global set.  Individual local\n   addresses may be statically\
    \ mapped to specific global addresses to\n   ensure guaranteed access to the outside\
    \ or to allow access to the\n   local host from external hosts via a fixed public\
    \ address.  Multiple\n   simultaneous sessions may be initiated from a local node,\
    \ using the\n   same address mapping.\n   Addresses inside a stub domain are local\
    \ to that domain and not valid\n   outside the domain.  Thus, addresses inside\
    \ a stub domain can be\n   reused by any other stub domain.  For instance, a single\
    \ Class A\n   address could be used by many stub domains.  At each exit point\n\
    \   between a stub domain and backbone, NAT is installed.  If there is\n   more\
    \ than one exit point it is of great importance that each NAT has\n   the same\
    \ translation table.\n   For instance, in the example of figure 2, both stubs\
    \ A and B\n   internally use class A private address block 10.0.0.0/8 [RFC 1918].\n\
    \   Stub A's NAT is assigned the class C address block 198.76.29.0/24,\n   and\
    \ Stub B's NAT is assigned the class C address block\n   198.76.28.0/24.  The\
    \ class C addresses are globally unique no other\n   NAT boxes can use them.\n\
    \                                    \\ | /\n                                \
    \  +---------------+\n                                  |Regional Router|\n  \
    \                                +---------------+\n                         \
    \       WAN |           | WAN\n                                    |         \
    \  |\n                Stub A .............|....   ....|............ Stub B\n \
    \                                   |           |\n                  {s=198.76.29.7,^\
    \  |           |  v{s=198.76.29.7,\n                   d=198.76.28.4}^  |    \
    \       |  v d=198.76.28.4}\n                    +-----------------+       +-----------------+\n\
    \                    |Stub Router w/NAT|       |Stub Router w/NAT|\n         \
    \           +-----------------+       +-----------------+\n                  \
    \        |                         |\n                          |  LAN       \
    \        LAN  |\n                    -------------             -------------\n\
    \                              |                 |\n            {s=10.33.96.5,\
    \ ^  |                 |  v{s=198.76.29.7,\n             d=198.76.28.4}^ +--+\
    \             +--+ v d=10.81.13.22}\n                             |--|       \
    \      |--|\n                            /____\\           /____\\\n         \
    \                 10.33.96.5       10.81.13.22\n                      Figure 2:\
    \ Basic NAT Operation\n   When stub A host 10.33.96.5 wishes to send a packet\
    \ to stub B host\n   10.81.13.22, it uses the globally unique address 198.76.28.4\
    \ as\n   destination, and sends the packet to its primary router.  The stub\n\
    \   router has a static route for net 198.76.0.0 so the packet is\n   forwarded\
    \ to the WAN-link.  However, NAT translates the source\n   address 10.33.96.5\
    \ of the IP header to the globally unique\n   198.76.29.7 before the packet is\
    \ forwarded.  Likewise, IP packets on\n   the return path go through similar address\
    \ translations.\n   Notice that this requires no changes to hosts or routers.\
    \  For\n   instance, as far as the stub A host is concerned, 198.76.28.4 is the\n\
    \   address used by the host in stub B.  The address translations are\n   transparent\
    \ to end hosts in most cases.  Of course, this is just a\n   simple example. \
    \ There are numerous issues to be explored.\n"
- title: 2.2. Overview of NAPT
  contents:
  - "2.2. Overview of NAPT\n   Say, an organization has a private IP network and a\
    \ WAN link to a\n   service provider.  The private network's stub router is assigned\
    \ a\n   globally valid address on the WAN link and the remaining nodes in the\n\
    \   organization have IP addresses that have only local significance.  In\n  \
    \ such a case, nodes on the private network could be allowed\n   simultaneous\
    \ access to the external network, using the single\n   registered IP address with\
    \ the aid of NAPT.  NAPT would allow mapping\n   of tuples of the type (local\
    \ IP addresses, local TU port number) to\n   tuples of the type (registered IP\
    \ address, assigned TU port number).\n   This model fits the requirements of most\
    \ Small Office Home Office\n   (SOHO) groups to access external network using\
    \ a single service\n   provider assigned IP address.  This model could be extended\
    \ to allow\n   inbound access by statically mapping a local node per each service\
    \ TU\n   port of the registered IP address.\n   In the example of figure 3 below,\
    \ stub A internally uses class A\n   address block 10.0.0.0/8.  The stub router's\
    \ WAN interface is\n   assigned an IP address 138.76.28.4 by the service provider.\n\
    \                                     \\ | /\n                               \
    \    +-----------------------+\n                                   |Service Provider\
    \ Router|\n                                   +-----------------------+\n    \
    \                             WAN |\n                                     |\n\
    \                 Stub A .............|....\n                                \
    \     |\n         ^{s=138.76.28.4,sport=1024, |  v{s=138.76.29.7, sport = 23,\n\
    \         ^ d=138.76.29.7,dport=23}   |  v d=138.76.28.4, dport = 1024}\n    \
    \                     +------------------+\n                         |Stub Router\
    \ w/NAPT|\n                         +------------------+\n                   \
    \        |\n                           |  LAN\n     --------------------------------------------\n\
    \        |        ^{s=10.0.0.10,sport=3017, |  v{s=138.76.29.7, sport=23,\n  \
    \      |        ^ d=138.76.29.7,dport=23} |  v d=10.0.0.10, dport=3017}\n    \
    \    |                                  |\n       +--+      +--+             \
    \       +--+\n       |--|      |--|                    |--|\n      /____\\   \
    \ /____\\                  /____\\\n     10.0.0.1  10.0.0.2   .....        10.0.0.10\n\
    \      Figure 3: Network Address Port Translation (NAPT) Operation\n   When stub\
    \ A host 10.0.0.10 sends a telnet packet to host 138.76.29.7,\n   it uses the\
    \ globally unique address 138.76.29.7 as destination, and\n   sends the packet\
    \ to it's primary router.  The stub router has a\n   static route for the subnet\
    \ 138.76.0.0/16 so the packet is forwarded\n   to the WAN-link.  However, NAPT\
    \ translates the tuple of source\n   address 10.0.0.10 and source TCP port 3017\
    \ in the IP and TCP headers\n   into the globally unique 138.76.28.4 and a uniquely\
    \ assigned TCP\n   port, say 1024, before the packet is forwarded.  Packets on\
    \ the\n   return path go through similar address and TCP port translations for\n\
    \   the target IP address and target TCP port.  Once again, notice that\n   this\
    \ requires no changes to hosts or routers.  The translation is\n   completely\
    \ transparent.\n   In this setup, only TCP/UDP sessions are allowed and must originate\n\
    \   from the local network.  However, there are services such as DNS that\n  \
    \ demand inbound access.  There may be other services for which an\n   organization\
    \ wishes to allow inbound session access.  It is possible\n   to statically configure\
    \ a well known TU port service [RFC 1700] on\n   the stub router to be directed\
    \ to a specific node in the private\n   network.\n   In addition to TCP/UDP sessions,\
    \ ICMP messages, with the exception of\n   REDIRECT message type may also be monitored\
    \ by NAPT router.  ICMP\n   query type packets are translated similar to that\
    \ of TCP/UDP packets,\n   in that the identifier field in ICMP message header\
    \ will be uniquely\n   mapped to a query identifier of the registered IP address.\
    \  The\n   identifier field in ICMP query messages is set by Query sender and\n\
    \   returned unchanged in response message from the Query responder.  So,\n  \
    \ the tuple of (Local IP address, local ICMP query identifier) is\n   mapped to\
    \ a tuple of (registered IP address, assigned ICMP query\n   Identifier) by the\
    \ NAPT router to uniquely identify ICMP queries of\n   all types from any of the\
    \ local hosts. Modifications to ICMP error\n   messages are discussed in a later\
    \ section, as that involves\n   modifications to ICMP payload as well as the IP\
    \ and ICMP headers.\n   In NAPT setup, where the registered IP address is the\
    \ same as the IP\n   address of the stub router WAN interface, the router has\
    \ to be sure\n   to make distinction between TCP, UDP or ICMP query sessions\n\
    \   originated from itself versus those originated from the nodes on\n   local\
    \ network.  All inbound sessions (including TCP, UDP and ICMP\n   query sessions)\
    \ are assumed to be directed to the NAT router as the\n   end node, unless the\
    \ target service port is statically mapped to a\n   different node in the local\
    \ network.\n   Sessions other than TCP, UDP and ICMP query type are simply not\n\
    \   permitted from local nodes, serviced by a NAPT router.\n"
- title: 3.0. Translation phases of a session.
  contents:
  - "3.0. Translation phases of a session.\n   The translation phases with traditional\
    \ NAT are same as described in\n   [NAT-TERM].  The following sub-sections identify\
    \ items that are\n   specific to traditional NAT.\n"
- title: '3.1. Address binding:'
  contents:
  - "3.1. Address binding:\n   With Basic NAT, a private address is bound to an external\
    \ address,\n   when the first outgoing session is initiated from the private host.\n\
    \   Subsequent to that, all other outgoing sessions originating from the\n   same\
    \ private address will use the same address binding for packet\n   translation.\n\
    \   In the case of NAPT, where many private addresses are mapped to a\n   single\
    \ globally unique address, the binding would be from the tuple\n   of (private\
    \ address, private TU port) to the tuple of (assigned\n   address, assigned TU\
    \ port).  As with Basic NAT, this binding is\n   determined when the first outgoing\
    \ session is initiated by the tuple\n   of (private address, private TU port)\
    \ on the private host.  While not\n   a common practice, it is possible to have\
    \ an application on private\n   host establish multiple simultaneous sessions\
    \ originating from the\n   same tuple of (private address, private TU port). \
    \ In such a case, a\n   single binding for the tuple of (private address, private\
    \ TU port)\n   may be used for translation of packets pertaining to all sessions\n\
    \   originating from the same tuple on a host.\n"
- title: '3.2. Address lookup and translation:'
  contents:
  - "3.2. Address lookup and translation:\n   After an address binding or (address,\
    \ TU port) tuple binding in case\n   of NAPT is established, a soft state may\
    \ be maintained for each of\n   the connections using the binding.  Packets belonging\
    \ to the same\n   session will be subject to session lookup for translation purposes.\n\
    \   The exact nature of translation is discussed in the follow-on\n   section.\n"
- title: '3.3. Address unbinding:'
  contents:
  - "3.3. Address unbinding:\n   When the last session based on an address or (address,\
    \ TU port) tuple\n   binding is terminated,  the binding itself may be terminated.\n"
- title: 4.0. Packet Translations
  contents:
  - "4.0. Packet Translations\n   Packets pertaining to NAT managed sessions undergo\
    \ translation in\n   either direction.  Individual packet translation issues \
    \ are covered\n   in detail in the following sub-sections.\n"
- title: 4.1. IP, TCP, UDP and ICMP Header Manipulations
  contents:
  - "4.1. IP, TCP, UDP and ICMP Header Manipulations\n   In Basic NAT model, the IP\
    \ header of every packet must be modified.\n   This modification includes IP address\
    \ (source IP address for outbound\n   packets and destination IP address for inbound\
    \ packets) and the IP\n   checksum.\n   For TCP ([TCP]) and UDP ([UDP]) sessions,\
    \ modifications must include\n   update of checksum in the TCP/UDP headers.  This\
    \ is because TCP/UDP\n   checksum also covers a pseudo header which contains the\
    \ source and\n   destination IP addresses.  As an exception, UDP headers with\
    \ 0\n   checksum should not be modified.  As for ICMP Query packets ([ICMP]),\n\
    \   no further changes in ICMP header are required as the checksum in\n   ICMP\
    \ header does not cover IP addresses.\n   In NAPT model, modifications to IP header\
    \ are similar to that of\n   Basic NAT.  For TCP/UDP sessions, modifications must\
    \ be extended to\n   include translation of TU port (source TU port for outbound\
    \ packets\n   and destination TU port for inbound packets) in the TCP/UDP header.\n\
    \   ICMP header in ICMP Query packets must  also be modified to replace\n   the\
    \ query ID and ICMP header checksum.  Private host query ID must be\n   translated\
    \ into assigned ID on the outbound and the exact reverse on\n   the inbound. \
    \ ICMP header checksum must be corrected to account for\n   Query ID translation.\n"
- title: 4.2. Checksum Adjustment
  contents:
  - "4.2. Checksum Adjustment\n   NAT modifications are per packet based and can be\
    \ very compute\n   intensive, as they involve one or more checksum modifications\
    \ in\n   addition to simple field translations.  Luckily, we have an algorithm\n\
    \   below, which makes checksum adjustment to IP, TCP, UDP and ICMP\n   headers\
    \ very simple and efficient.  Since all these headers use a\n   one's complement\
    \ sum, it is sufficient to calculate the arithmetic\n   difference between the\
    \ before-translation and after-translation\n   addresses and add this to the checksum.\
    \  The algorithm below is\n   applicable only for even offsets (i.e., optr below\
    \ must be at an even\n   offset from start of header) and even lengths (i.e.,\
    \ olen and nlen\n   below must be even).  Sample code (in C) for this is as follows.\n\
    \   void checksumadjust(unsigned char *chksum, unsigned char *optr,\n   int olen,\
    \ unsigned char *nptr, int nlen)\n   /* assuming: unsigned char is 8 bits, long\
    \ is 32 bits.\n     - chksum points to the chksum in the packet\n     - optr points\
    \ to the old data in the packet\n     - nptr points to the new data in the packet\n\
    \   */\n   {\n     long x, old, new;\n     x=chksum[0]*256+chksum[1];\n     x=~x\
    \ & 0xFFFF;\n     while (olen)\n     {\n         old=optr[0]*256+optr[1]; optr+=2;\n\
    \         x-=old & 0xffff;\n         if (x<=0) { x--; x&=0xffff; }\n         olen-=2;\n\
    \     }\n     while (nlen)\n     {\n         new=nptr[0]*256+nptr[1]; nptr+=2;\n\
    \         x+=new & 0xffff;\n         if (x & 0x10000) { x++; x&=0xffff; }\n  \
    \       nlen-=2;\n     }\n     x=~x & 0xFFFF;\n     chksum[0]=x/256; chksum[1]=x\
    \ & 0xff;\n   }\n"
- title: 4.3. ICMP error packet modifications
  contents:
  - "4.3. ICMP error packet modifications\n   Changes to ICMP error message ([ICMP])\
    \ will include changes to IP and\n   ICMP headers on the outer layer as well as\
    \ changes to headers of the\n   packet embedded within the ICMP-error message\
    \ payload.\n   In order for NAT to be transparent to end-host, the IP address\
    \ of the\n   IP header embedded within the payload of ICMP-Error message must\
    \ be\n   modified, the checksum field of the embedded IP header must be\n   modified,\
    \ and lastly, the ICMP header checksum must also be modified\n   to reflect changes\
    \ to payload.\n   In a NAPT setup, if the IP message embedded within ICMP happens\
    \ to be\n   a TCP, UDP or ICMP Query packet, you will also need to modify the\n\
    \   appropriate TU port number within the TCP/UDP header or the Query\n   Identifier\
    \ field in the ICMP Query header.\n   Lastly, the IP header of the ICMP packet\
    \ must also be modified.\n"
- title: 4.4. FTP support
  contents:
  - "4.4. FTP support\n   One of the most popular applications, \"FTP\" ([FTP]) would\
    \ require an\n   ALG to monitor the control session payload to determine the ensuing\n\
    \   data session parameters.  FTP ALG is an integral part of most NAT\n   implementations.\n\
    \   The FTP ALG would require a special table to correct the TCP sequence\n  \
    \ and acknowledge numbers with source port FTP or destination port FTP.\n   The\
    \ table entries should have source address, destination address,\n   source port,\
    \ destination port, delta for sequence numbers and a\n   timestamp.  New entries\
    \ are created only when FTP PORT commands or\n   PASV responses are seen.  The\
    \ sequence number delta may be increased\n   or decreased for every FTP PORT command\
    \ or PASV response.  Sequence\n   numbers are incremented on the outbound and\
    \ acknowledge numbers are\n   decremented on the inbound by this delta.\n   FTP\
    \ payload translations are limited to private addresses and their\n   assigned\
    \ external addresses (encoded as individual octets in ASCII)\n   for Basic NAT.\
    \  For NAPT setup, however, the translations must be\n   extended to include the\
    \ TCP port octets (in ASCII) following the\n   address octets.\n"
- title: 4.5 DNS support
  contents:
  - "4.5 DNS support\n   Considering that sessions in a traditional NAT are predominantly\n\
    \   outbound from a private domain, DNS ALG may be obviated from use in\n   conjunction\
    \ with traditional NAT as follows.  DNS server(s) internal\n   to the private\
    \ domain maintain mapping of names to IP addresses for\n   internal hosts and\
    \ possibly some external hosts.  External DNS\n   servers maintain name mapping\
    \ for external hosts alone and not for\n   any of the internal hosts.  If the\
    \ private network does not have an\n   internal DNS server, all DNS requests may\
    \ be directed to external DNS\n   server to find address mapping for the external\
    \ hosts.\n"
- title: 4.6. IP option handling
  contents:
  - "4.6. IP option handling\n   An IP datagram with any of the IP options Record\
    \ Route, Strict Source\n   Route or Loose Source Route would involve recording\
    \ or using IP\n   addresses of intermediate routers.  A NAT intermediate router\
    \ may\n   choose not to support these options or leave the addresses\n   untranslated\
    \ while processing the options.  The result of leaving the\n   addresses untranslated\
    \ would be that private addresses along the\n   source route are exposed end to\
    \ end.  This should not jeopardize the\n   traversal path of the packet, per se,\
    \ as each router is supposed to\n   look at the next hop router only.\n"
- title: 5. Miscellaneous issues
  contents:
  - '5. Miscellaneous issues

    '
- title: 5.1. Partitioning of Local and Global Addresses
  contents:
  - "5.1. Partitioning of Local and Global Addresses\n   For NAT to operate as described\
    \ in this document, it is necessary to\n   partition the IP address space into\
    \ two parts - the private addresses\n   used internal to stub domain, and the\
    \ globally unique addresses.  Any\n   given address must either be a private address\
    \ or a global address.\n   There is no overlap.\n   The problem with overlap is\
    \ the following.  Say a host in stub A\n   wished to send packets to a host in\
    \ stub B, but the global addresses\n   of stub B overlapped the private addressees\
    \ of stub A. In this case,\n   the routers in stub A would not be able to distinguish\
    \ the global\n   address of stub B from its own private addresses.\n"
- title: 5.2. Private address space recommendation
  contents:
  - "5.2. Private address space recommendation\n   [RFC 1918] has recommendations\
    \ on address space allocation for\n   private networks.  Internet Assigned Numbers\
    \ Authority (IANA) has\n   three blocks of IP address space, namely 10.0.0.0/8,\
    \ 172.16.0.0/12,\n   and 192.168.0.0/16 for private internets.  In pre-CIDR notation,\
    \ the\n   first block is nothing but a single class A network number, while the\n\
    \   second block is a set of 16 contiguous class B networks, and the\n   third\
    \ block is a set of 256 contiguous class C networks.\n   An organization that\
    \ decides to use IP addresses in the address space\n   defined above can do so\
    \ without any coordination with IANA or an\n   Internet registry.  The address\
    \ space can thus be used privately by\n   many independent organizations at the\
    \ same time, with NAT operation\n   enabled on their border routers.\n"
- title: 5.3. Routing Across NAT
  contents:
  - "5.3. Routing Across NAT\n   The router running NAT should not advertise the private\
    \ networks to\n   the backbone.  Only the networks with global addresses may be\
    \ known\n   outside the stub.  However, global information that NAT receives from\n\
    \   the stub border router can be advertised in the stub the usual way.\n   Typically,\
    \ the NAT stub router will have a static route configured to\n   forward all external\
    \ traffic to service provider router over WAN\n   link, and the service provider\
    \ router will have a static route\n   configured to forward NAT packets (i.e.,\
    \ those whose destination IP\n   address fall within the range of NAT managed\
    \ global address list) to\n   NAT router over WAN link.\n"
- title: 5.4. Switch-over from Basic NAT to NAPT
  contents:
  - "5.4. Switch-over from Basic NAT to NAPT\n   In Basic NAT setup, when private\
    \ network nodes outnumber global\n   addresses available for mapping (say, a class\
    \ B private network\n   mapped to a class C global address block), external network\
    \ access to\n   some of the local nodes is abruptly cut off after the last global\n\
    \   address from the address list is used up.  This is very inconvenient\n   and\
    \ constraining.  Such an incident can be safely avoided by\n   optionally allowing\
    \ the Basic NAT router to switch over to NAPT setup\n   for the last global address\
    \ in the address list.  Doing this will\n   ensure that hosts on private network\
    \ will have continued,\n   uninterrupted access to the external nodes and services\
    \ for most\n   applications.  Note, however, it could be confusing if some of\
    \ the\n   applications that used to work with Basic NAT suddenly break due to\n\
    \   the switch-over to NAPT.\n"
- title: 6.0. NAT limitations
  contents:
  - "6.0. NAT limitations\n   [NAT-TERM] covers the limitations of all flavors of\
    \ NAT, broadly\n   speaking.  The following sub-sections identify limitations\
    \ specific\n   to traditional NAT.\n"
- title: 6.1. Privacy and Security
  contents:
  - "6.1. Privacy and Security\n   Traditional NAT can be viewed as providing a privacy\
    \ mechanism as\n   sessions are uni-directional from private hosts and the actual\n\
    \   addresses of the private hosts are not visible to external hosts.\n   The\
    \ same characteristic that enhances privacy potentially makes\n   debugging problems\
    \ (including security violations) more difficult. If\n   a host in private network\
    \ is abusing the Internet in some way (such\n   as trying to attack another machine\
    \ or even sending large amounts of\n   spam) it is more difficult to track the\
    \ actual source of trouble\n   because the IP address of the host is hidden in\
    \ a NAT router.\n"
- title: 6.2. ARP responses to NAT mapped global addresses on a LAN interface
  contents:
  - "6.2. ARP responses to NAT mapped global addresses on a LAN interface\n   NAT\
    \ must be enabled only on border routers of a stub domain.  The\n   examples provided\
    \ in the document to illustrate Basic NAT and NAPT\n   have maintained a WAN link\
    \ for connection to external router (i.e.,\n   service provider router) from NAT\
    \ router.  However, if the WAN link\n   were to be replaced by a LAN connection\
    \ and if part or all of the\n   global address space used for NAT mapping belongs\
    \ to the same IP\n   subnet as the LAN segment, the NAT router would be expected\
    \ to\n   provide ARP support for the address range that belongs to the same\n\
    \   subnet.  Responding to ARP requests for the NAT mapped global\n   addresses\
    \ with its own MAC address is a must in such a situation with\n   Basic NAT setup.\
    \  If the NAT router did not respond to these\n   requests, there is no other\
    \ node in the network that has ownership to\n   these addresses and hence will\
    \ go unresponded.\n   This scenario is unlikely with NAPT setup except when the\
    \ single\n   address used in NAPT mapping is not the interface address of the\
    \ NAT\n   router (as in the case of a switch-over from Basic NAT to NAPT\n   explained\
    \ in 5.4 above, for example).\n   Using an address range from a directly connected\
    \ subnet for NAT\n   address mapping would obviate static route configuration\
    \ on the\n   service provider router.\n   It is the opinion of the authors that\
    \ a LAN link to a service\n   provider router is not very common.  However, vendors\
    \ may be\n   interested to optionally support proxy ARP just in case.\n"
- title: 6.3. Translation of outbound TCP/UDP fragmented packets in NAPT setup
  contents:
  - "6.3. Translation of outbound TCP/UDP fragmented packets in NAPT setup\n   Translation\
    \ of outbound TCP/UDP fragments (i.e., those originating\n   from private hosts)\
    \ in NAPT setup are doomed to fail.  The reason is\n   as follows.  Only the first\
    \ fragment contains the TCP/UDP header that\n   would be necessary to associate\
    \ the packet to a session for\n   translation purposes.  Subsequent fragments\
    \ do not contain TCP/UDP\n   port information, but simply carry the same fragmentation\
    \ identifier\n   specified in the first fragment.  Say, two private hosts originated\n\
    \   fragmented TCP/UDP packets to the same destination host.  And, they\n   happened\
    \ to use the same fragmentation identifier.  When the target\n   host receives\
    \ the two unrelated datagrams, carrying same\n   fragmentation id, and from the\
    \ same assigned host address, it is\n   unable to determine which of the two sessions\
    \ the datagrams belong\n   to.  Consequently, both sessions will be corrupted.\n"
- title: 7.0. Current Implementations
  contents:
  - "7.0. Current Implementations\n   Many commercial implementations are available\
    \ in the industry that\n   adhere to the NAT description provided in this document.\
    \  Linux\n   public domain software contains NAT under the name of \"IP\n   masquerade\"\
    .  FreeBSD public domain software has NAPT implementation\n   running as a daemon.\
    \  Note however that Linux source is covered under\n   the GNU license and  FreeBSD\
    \ software is covered under the UC\n   Berkeley license.\n   Both Linux and FreeBSD\
    \ software are free, so you can buy CD-ROMs for\n   these for little more than\
    \ the cost of distribution.  They are also\n   available on-line from a lot of\
    \ FTP sites with the latest patches.\n"
- title: 8.0. Security Considerations
  contents:
  - "8.0. Security Considerations\n   The security considerations described in [NAT-TERM]\
    \ for all\n   variations of NATs are applicable to traditional NAT.\n"
- title: References
  contents:
  - "References\n   [NAT-TERM] Srisuresh, P. and M. Holdrege, \"IP Network Address\n\
    \              Translator (NAT) Terminology and Considerations\", RFC\n      \
    \        2663, August 1999.\n   [RFC 1918] Rekhter, Y., Moskowitz, B., Karrenberg,\
    \ D., de Groot, G.\n              and E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC 1700] Reynolds,\
    \ J. and J. Postel, \"Assigned Numbers\", STD 2, RFC\n              1700, October\
    \ 1994.\n   [RFC 1122] Braden, R., \"Requirements for Internet Hosts --\n    \
    \          Communication Layers\", STD 3, RFC 1122, October 1989.\n   [RFC 1123]\
    \ Braden, R., \"Requirements for Internet Hosts --\n              Application\
    \ and Support\", STD 3, RFC 1123, October 1989.\n   [RFC 1812] Baker, F., \"Requirements\
    \ for IP Version 4 Routers\",  RFC\n              1812, June 1995.\n   [FTP] \
    \     Postel, J. and J. Reynolds, \"FILE TRANSFER PROTOCOL\n              (FTP)\"\
    , STD 9, RFC 959, October 1985.\n   [TCP]      Defense Advanced Research Projects\
    \ Agency Information\n              Processing Techniques Office, \"TRANSMISSION\
    \ CONTROL\n              PROTOCOL (TCP) SPECIFICATION\", STD 7, RFC 793, September\n\
    \              1981.\n   [ICMP]     Postel, J., \"INTERNET CONTROL MESSAGE (ICMP)\n\
    \              SPECIFICATION\", STD 5, RFC 792, September 1981.\n   [UDP]    \
    \  Postel, J., \"User Datagram Protocol (UDP)\", STD 6, RFC\n              768,\
    \ August 1980.\n   [RFC 2101] Carpenter, B., Crowcroft, J. and Y. Rekhter, \"\
    IPv4 Address\n              Behaviour Today\", RFC 2101, February 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pyda Srisuresh\n   Jasmine Networks, Inc.\n   3061 Zanker\
    \ Road, Suite B\n   San Jose, CA 95134\n   U.S.A.\n   Phone: (408) 895-5032\n\
    \   EMail: srisuresh@yahoo.com\n   Kjeld Borch Egevang\n   Intel Denmark ApS\n\
    \   Phone: +45 44886556\n   Fax:   +45 44886051\n   EMail: kjeld.egevang@intel.com\n\
    \   http:  //www.freeyellow.com/members/kbe\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
