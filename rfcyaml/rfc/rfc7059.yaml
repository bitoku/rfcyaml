- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       S. Steffann
  contents:
  - "Independent Submission                                       S. Steffann\n  \
    \          A Comparison of IPv6-over-IPv4 Tunnel Mechanisms\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview of various ways to tunnel IPv6\n\
    \   packets over IPv4 networks.  It covers mechanisms in current use,\n   touches\
    \ on several mechanisms that are now only of historic interest,\n   and discusses\
    \ some newer tunnel mechanisms that are not widely used\n   at the time of publication.\
    \  The goal of the document is helping\n   people with an IPv6-in-IPv4 tunneling\
    \ need to select the mechanisms\n   that may apply to them.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7059.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Tunnel Mechanisms  . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n     3.1.  Configured Tunnels (Manual Tunnels / 6in4) . . . . .\
    \ . . .  7\n     3.2.  Automatic Tunneling  . . . . . . . . . . . . . . . . .\
    \ . .  8\n     3.3.  IPv6 over IPv4 without Explicit Tunnels (6over4) . . . .\
    \ .  9\n     3.4.  Generic Routing Encapsulation (GRE)  . . . . . . . . . . .\
    \ 10\n     3.5.  Connection of IPv6 Domains via IPv4 Clouds (6to4)  . . . . 10\n\
    \       3.5.1.  6to4 Provider Managed Tunnels  . . . . . . . . . . . . 11\n  \
    \   3.6.  Anything In Anything (AYIYA) . . . . . . . . . . . . . . . 12\n    \
    \ 3.7.  Intra-Site Automatic Tunnel Addressing (ISATAP)  . . . . . 13\n     3.8.\
    \  Tunneling IPv6 over UDP through NATs (Teredo)  . . . . . . 14\n     3.9.  IPv6\
    \ Rapid Deployment (6rd)  . . . . . . . . . . . . . . . 15\n     3.10. Native\
    \ IPv6 behind NAT44 CPEs (6a44) . . . . . . . . . . . 16\n     3.11. Locator/ID\
    \ Separation Protocol (LISP)  . . . . . . . . . . 16\n     3.12. Subnetwork Encapsulation\
    \ and Adaptation Layer (SEAL) . . . 18\n     3.13. Peer-to-Peer IPv6 on Any Internetwork\
    \ (6bed4)  . . . . . . 19\n   4.  Related Protocols  . . . . . . . . . . . . .\
    \ . . . . . . . . . 20\n     4.1.  Tunnel Setup Protocol (TSP)  . . . . . . .\
    \ . . . . . . . . 20\n     4.2.  SixXS Heartbeat Protocol . . . . . . . . . .\
    \ . . . . . . . 20\n     4.3.  Tunnel Information and Control Protocol (TIC) \
    \ . . . . . . 21\n   5.  Common Aspects . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 22\n     5.1.  Protocol 41 Encapsulation  . . . . . . . . . . . .\
    \ . . . . 22\n     5.2.  NAT and Firewalls  . . . . . . . . . . . . . . . . .\
    \ . . . 22\n     5.3.  MTU Considerations . . . . . . . . . . . . . . . . . .\
    \ . . 24\n     5.4.  IPv4 Addresses Embedded in IPv6 Addresses  . . . . . . .\
    \ . 25\n   6.  Evaluation of Tunnel Mechanisms  . . . . . . . . . . . . . . .\
    \ 28\n     6.1.  Efficiency of IPv4 Address Use . . . . . . . . . . . . . . 28\n\
    \     6.2.  Supported Network Topologies . . . . . . . . . . . . . . . 29\n  \
    \   6.3.  Robustness . . . . . . . . . . . . . . . . . . . . . . . . 30\n    \
    \ 6.4.  Gateway State  . . . . . . . . . . . . . . . . . . . . . . 32\n     6.5.\
    \  Performance  . . . . . . . . . . . . . . . . . . . . . . . 33\n   7.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 34\n   8.  Contributors\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 35\n   9.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 35\n   10. Informative References\
    \ . . . . . . . . . . . . . . . . . . . . 35\n   Appendix A.  Evaluation Criteria\
    \ . . . . . . . . . . . . . . . . . 40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   During the transition from IPv4 to IPv6, IPv6 islands are\
    \ separated\n   by a sea of IPv4.  Tunnels provide connectivity between these\
    \ IPv6\n   islands.  Tunnels work by encapsulating IPv6 packets inside IPv4\n\
    \   packets, as shown in the figure.\n                                       \
    \       +---------------+\n                                              |   \
    \  IPv4      |\n                                              |    Header    \
    \ |\n                                              +---------------+\n       \
    \                                       :   Optional    :\n                  \
    \                            : Encapsulation :\n                             \
    \                 :    Header     :\n            +---------------+           \
    \      +---------------+\n            |     IPv6      |                 |    \
    \ IPv6      |\n            |    Header     |                 |    Header     |\n\
    \            +---------------+                 +---------------+\n           \
    \ |   Transport   |                 |   Transport   |\n            |    Layer\
    \      |      ===>       |    Layer      |\n            |    Header     |    \
    \             |    Header     |\n            +---------------+               \
    \  +---------------+\n            |               |                 |        \
    \       |\n            ~     Data      ~                 ~     Data      ~\n \
    \           |               |                 |               |\n            +---------------+\
    \                 +---------------+\n                        Encapsulating IPv6\
    \ in IPv4\n   Various tunnel mechanisms have been proposed over time.  So many,\
    \ in\n   fact, that it is difficult to get an overview.  Some tunnel\n   mechanisms\
    \ have been abandoned by the community, others have known\n   problems, and yet\
    \ others have shown to be reliable.  Some tunnel\n   mechanisms were designed\
    \ with a particular use case in mind; others\n   are generic.  There may be documented\
    \ limitations as well as\n   limitations that have cropped up in deployment.\n\
    \   This document provides an overview of available and/or noteworthy\n   tunnel\
    \ mechanisms, with the intention to guide selection of the best\n   mechanism\
    \ for a particular purpose.  As such, the discussion of the\n   different tunnel\
    \ mechanisms is limited to the working principles of\n   the different mechanisms\
    \ and a few important details.\n   Please use the references to learn the full\
    \ details of each\n   mechanism.  For brevity, only the most relevant documents\
    \ are\n   referenced.  Refer to these for additional specifications, updates,\n\
    \   and links to older versions of protocol specifications, as well as\n   links\
    \ to more general background information.\n   The intended audience for this document\
    \ is everyone who needs a\n   connection to the IPv6 Internet at large, but is\
    \ not in the position\n   to use native (untunneled) IPv6 connectivity, and thus\
    \ needs to\n   select an appropriate tunnel mechanism.  However, when native IPv6\n\
    \   connectivity is available, this should be preferred over tunneled\n   connectivity\
    \ as per rule 7 in Section 6 of [RFC6724].  This document\n   is also intended\
    \ as a quick reference to tunnel mechanisms for the\n   IETF community.\n   The\
    \ scope of this document is limited to tunnel mechanisms for\n   providing IPv6\
    \ connectivity over an IPv4 infrastructure.  Mechanisms\n   for Virtual Private\
    \ Networks (VPNs) and security architectures such\n   as IPsec [RFC4301], as well\
    \ as IPv4-over-IPv6 tunneling, are out of\n   scope for this document as they\
    \ serve a different purpose, even if\n   they could technically be used to provide\
    \ IPv6 connectivity.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Anycast:  Mechanism to provide a service, in multiple locations\n\
    \      and/or using multiple servers, by configuring each server with the\n  \
    \    same IP address.\n   Carrier-Grade NAT (CGN):  A Network Address Translation\
    \ (see NAT)\n      device used by an ISP so multiple subscribers can be served\
    \ using\n      a single IPv4 address.\n   Dual stack:  Also known as \"dual IP\
    \ layer\".  Nodes run IPv4 and IPv6\n      side by side, and can communicate with\
    \ other dual stack nodes\n      (using IPv4 or IPv6), as well as IPv4-only nodes\
    \ (using IPv4) and\n      IPv6-only nodes (using IPv6).  Most current operating\
    \ systems are\n      set up to use IPv4 when available as well as use IPv6 when\n\
    \      available, allowing them to run in IPv4-only, IPv6-only, or dual\n    \
    \  stack mode as circumstances permit.  Except for a few things\n      concerning\
    \ the Domain Name System (DNS), there is no separate\n      specification for\
    \ dual stack beyond the specifications relevant to\n      running IPv4 and IPv6.\
    \  Dual stack is one of the three IPv4-to-\n      IPv6 transition tools; the others\
    \ are translation and tunnels.\n   Encapsulation:  Transporting a packet as data\
    \ inside another packet.\n      For instance, an IPv6 packet inside an IPv4 packet.\n\
    \   Firewall:  A device that selectively filters IP packets, allowing\n      some\
    \ protocols through but not others.  A firewall may act as a\n      switch, operating\
    \ below the IP layer, or as a router.\n   Host:  A device that communicates using\
    \ the Internet Protocol and\n      only transmits packets from its own address.\n\
    \   ISP:  Internet Service Provider; the party connecting the outside of\n   \
    \   the local network's perimeter to the public Internet.\n   MTU:  Maximum Transmission\
    \ Unit, the maximum size of a packet that\n      can be transmitted over a link\
    \ (or tunnel) without splitting it\n      into multiple fragments.\n   NAT:  Network\
    \ Address Translation or Network Address Translator.  NAT\n      makes it possible\
    \ for a number of hosts to share a single IP\n      address.  TCP and UDP port\
    \ numbers are used to distinguish the\n      traffic to/from different hosts served\
    \ by the NAT; protocols other\n      than TCP and UDP may be incompatible with\
    \ NAT due to lack of port\n      numbers.  NAT also breaks protocols that depend\
    \ on the IP\n      addresses used in some way.  Typically, NAT devices behave\
    \ as a\n      host towards the public Internet, and as a router towards the\n\
    \      internal network.\n   NBMA:  Non-Broadcast Multi-Access.  This is a network\
    \ configuration\n      in which nodes can exchange packets directly by addressing\
    \ them at\n      the desired destination.  However, broadcasts or multicasts are\n\
    \      not supported, so autodiscovery mechanisms such as IPv6 Neighbour\n   \
    \   Discovery must be modified to use unicast to work.\n   Node:  A device that\
    \ implements IP, either a host or a router; also\n      known as a system.  See\
    \ note at \"NAT\".\n   Path stretch:  The difference between the shortest path\
    \ through the\n      network and the path (tunneled) packets actually take.\n\
    \   PMTUD:  Path MTU Discovery, a method to determine the smallest MTU on\n  \
    \    the path between two nodes.  There are separate specifications for\n    \
    \  PMTUD over IPv4 [RFC1191] and IPv6 [RFC1981].\n   Router:  A device that forwards\
    \ IP packets that it didn't generate\n      itself.  See note at \"NAT\".\n  \
    \ System:  A device that implements IP, either a host or a router; a\n      network\
    \ node.\n   Translation:  The IPv6 and IPv4 headers are similar enough that it\
    \ is\n      possible to translate between them.  This allows IPv6-only hosts\n\
    \      to communicate with IPv4-only hosts.  The original specification\n    \
    \  for translating between IPv6 and IPv4 was heavily criticised by\n      the\
    \ Internet Architecture Board, but new specifications for\n      translating between\
    \ IPv6 and IPv4 were later published [RFC6145].\n      Translation is one of the\
    \ three IPv4-to-IPv6 transition tools; the\n      others are dual stack and tunnels.\n\
    \   Tunnel:  By encapsulating IPv6 packets inside IPv4 packets, IPv6-\n      capable\
    \ hosts and IPv6-capable networks isolated from other IPv6-\n      capable systems\
    \ or the IPv6 Internet at large can exchange IPv6\n      packets over IPv4-only\
    \ infrastructure.  There are numerous ways to\n      tunnel IPv6 over IPv4.  This\
    \ document compares these mechanisms.\n      Tunneling is one of the three IPv4-to-IPv6\
    \ transition tools; the\n      others are translation and dual stack.\n   Tunnel\
    \ broker:  A service that provides tunneled connectivity to the\n      IPv6 Internet,\
    \ such as SixXS [SIXXS], tunnelbroker.net\n      [TUNBROKER], and gogo6 [GOGO6].\n"
- title: 3.  Tunnel Mechanisms
  contents:
  - "3.  Tunnel Mechanisms\n   Automatic tunnels (Section 3.2), configured tunnels\
    \ (Section 3.1),\n   6over4 (Section 3.3), 6to4 (Section 3.5), the Intra-Site\
    \ Automatic\n   Tunnel Addressing Protocol (ISATAP) (Section 3.7), and 6rd\n \
    \  (Section 3.9) solve similar problems at different scales.  They all\n   encapsulate\
    \ IPv6 packets immediately inside an IPv4 packet, without\n   using additional\
    \ headers.  This is called \"protocol 41 encapsulation\"\n   (see Section 5.1),\
    \ as the Protocol field in the IPv4 header is set to\n   41 to indicate that what\
    \ follows is an IPv6 packet.\n   6to4, 6rd, ISATAP, and automatic tunneling each\
    \ generate an IPv6\n   address or range of IPv6 addresses for the host or router\
    \ running the\n   protocol based on the system's IPv4 address in one way or another\n\
    \   (see Section 5.4).  This lets 6to4, 6rd, ISATAP, and automatic\n   tunnels\
    \ determine the IPv4 destination address in the outer IPv4\n   header from the\
    \ IPv6 address of the destination, allowing for\n   automatic operation without\
    \ the need to administratively configure\n   the remote tunnel endpoint.\n   6over4\
    \ and ISATAP provide IPv6 connectivity between IPv6-capable\n   systems within\
    \ a single organisation's network that is otherwise IPv4\n   only.  6rd allows\
    \ ISPs to provide IPv6 connectivity to their\n   customers over IPv4-only last-mile\
    \ infrastructures.  6to4 directly\n   provides connectivity to the global IPv6\
    \ Internet without involving\n   an ISP.\n   Configured tunnels (Section 3.1)\
    \ also use protocol 41 encapsulation\n   but rely on manual configuration of the\
    \ remote tunnel endpoint.  (The\n   Heartbeat Protocol (Section 4.2) solves this.)\
    \  Configured tunnels\n   can be used within an organisation's network but are\
    \ typically used\n   by tunnel-broker services to provide connectivity to the\
    \ IPv6\n   Internet.  GRE (Section 3.4) is similar to configured tunnels, but\n\
    \   also supports encapsulating protocols other than IPv6.\n   AYIYA (Section\
    \ 3.6) is similar to configured tunnels and GRE but\n   typically uses a UDP header\
    \ for better compatibility with NATs and is\n   generally used with the Tunnel\
    \ Information and Control (TIC) protocol\n   (Section 4.3) to set up the tunnel\
    \ rather than rely on manual\n   configuration.  Teredo (Section 3.8), 6a44 (Section\
    \ 3.10), and 6bed4\n   (Section 3.13) are similar to 6to4, except that they are\
    \ designed to\n   work through NATs by running over UDP.  Of these, Teredo and\
    \ 6bed4\n   assume no ISP involvement and 6a44 does; 6bed4 is designed to work\n\
    \   over direct IPv4 paths between peers whenever possible.\n   The Locator/ID\
    \ Separation Protocol (LISP) (Section 3.11) is a system\n   for abstracting the\
    \ identifying function from the location function\n   of IP addresses; this allows\
    \ for the use of IPv6 for the former and\n   IPv4 for the latter.\n   The Subnetwork\
    \ Encapsulation and Adaptation Layer (SEAL)\n   (Section 3.12) and its companion\
    \ technologies (Virtual Enterprise\n   Traversal (VET), Asymmetric Extended Route\
    \ Optimization (AERO),\n   Internet Routing Overlay Network (IRON), and Routing\
    \ and Addressing\n   in Networks with Global Enterprise Recursion (RANGER)) provide\
    \ a\n   configured tunnel system for IPv6-in-IPv4 tunneling to default\n   routers\
    \ as well as automatic tunnel endpoint discovery for\n   optimisation of more-specific\
    \ routes.\n   Dual-Stack Lite [RFC6333] and MAP [MAP], both developed by the IETF\n\
    \   Softwire working group, often come up in discussions about IPv6\n   tunneling.\
    \  However, they are _not_ IPv6-in-IPv4 tunnel mechanisms.\n   They are IPv4-in-IPv6\
    \ mechanisms for providing IPv4 connectivity over\n   an IPv6 infrastructure.\n\
    \   Please refer to Section 5 for more information about issues common to\n  \
    \ many tunnel mechanisms; those issues are not discussed separately for\n   each\
    \ mechanism.  The mechanisms are discussed below in roughly\n   chronological\
    \ order.\n"
- title: 3.1.  Configured Tunnels (Manual Tunnels / 6in4)
  contents:
  - "3.1.  Configured Tunnels (Manual Tunnels / 6in4)\n   Configured and automatic\
    \ tunnels are the two oldest tunnel\n   mechanisms, originally published in \"\
    Transition Mechanisms for IPv6\n   Hosts and Routers\" [RFC1933] in 1996.  The\
    \ latest specification of\n   configured tunnels is \"Basic Transition Mechanisms\
    \ for IPv6 Hosts and\n   Routers\" [RFC4213], published in 2005.  The mechanism\
    \ is sometimes\n   called \"manual tunnels\", \"static tunnels\", \"protocol 41\
    \ tunnels\", or\n   \"6in4\".\n   Configured tunnels connect two systems in point-to-point\
    \ fashion\n   using protocol 41 encapsulation.  The configuration that the name\
    \ of\n   the mechanism alludes to consists of a remote \"tunnel endpoint\".\n\
    \   This is the IPv4 address of the system on the other side of the\n   tunnel.\
    \  When a system (potentially) has multiple IPv4 addresses, the\n   local tunnel\
    \ endpoint address may also need to be configured.\n   The need to explicitly\
    \ set up configured tunnels makes them more\n   difficult to deploy than automatic\
    \ mechanisms.  However, because\n   there is a fixed, single remote tunnel endpoint,\
    \ performance is\n   predictable and the tunnel is easy to debug.\n   In the early\
    \ days, it was not unheard of for a small network to get\n   IPv6 connectivity\
    \ from another continent.  This excessive path\n   stretch makes communication\
    \ over short geographic distances much less\n   efficient because the distance\
    \ travelled by packets may be larger\n   than the geographic distance by an order\
    \ of magnitude or more.\n   Configured tunnels are widely implemented.  Common\
    \ operating systems\n   can terminate configured tunnels, as well as IPv6-capable\
    \ routers and\n   home gateways.  The mechanism is versatile but is mostly used\
    \ between\n   isolated smaller IPv6-capable networks and the IPv6 Internet, often\n\
    \   through a \"tunnel broker\" such as tunnelbroker.net [TUNBROKER], SixXS\n\
    \   [SIXXS], or gogo6 [GOGO6].\n   [RFC4891] discusses the use of IPsec to protect\
    \ the confidentiality\n   and integrity of IPv6 traffic exchanged over configured\
    \ tunnels.\n"
- title: 3.2.  Automatic Tunneling
  contents:
  - "3.2.  Automatic Tunneling\n   Automatic tunneling is described in [RFC2893],\
    \ \"Transition Mechanisms\n   for IPv6 Hosts and Routers\", but removed in [RFC4213],\
    \ which is a\n   replacement of RFC 2893.  Configured tunnels (Section 3.1) are\n\
    \   closely related to automatic tunnels and are specified in RFCs 2893\n   and\
    \ 4213, too.  Both use protocol 41 encapsulation.\n   Hosts that are capable of\
    \ automatic tunneling use special IPv6\n   addresses: IPv4-compatible addresses.\
    \  An IPv4-compatible IPv6\n   address consists of 96 zero bits followed by the\
    \ system's IPv4\n   address.  When sending packets to destinations within the\
    \ IPv4-\n   compatible ::/96 prefix, the IPv4 destination address in the outer\n\
    \   IPv4 header is taken from the IPv4 address in the IPv4-compatible\n   IPv6\
    \ destination address.\n   Automatic tunneling has a big limitation: it only allows\
    \ for\n   communication between IPv6-capable systems that both support\n   automatic\
    \ tunneling.  There are no provisions for communicating with\n   the native IPv6\
    \ Internet.  As such, the mechanism is of almost no\n   practical use and is not\
    \ implemented in current operating systems, as\n   6to4 (Section 3.5) does what\
    \ automatic tunneling was supposed to do,\n   but it also provides connectivity\
    \ to the rest of the IPv6 Internet.\n"
- title: 3.3.  IPv6 over IPv4 without Explicit Tunnels (6over4)
  contents:
  - "3.3.  IPv6 over IPv4 without Explicit Tunnels (6over4)\n   \"Transmission of\
    \ IPv6 over IPv4 Domains without Explicit Tunnels\"\n   [RFC2529] was published\
    \ in 1999.  The mechanism is commonly known as\n   \"6over4\".\n   6over4 is designed\
    \ to work within a single organisation's IPv4\n   network, where IPv6-capable\
    \ hosts and routers are separated by IPv4-\n   only routers.  6over4 treats the\
    \ IPv4 network as a \"virtual Ethernet\"\n   for the purpose of IPv6 communication.\
    \  It uses IPv4 multicast to\n   tunnel IPv6 multicast packets.  A node's IPv4\
    \ address is included in\n   the Interface Identifier used on the virtual 6over4\
    \ interface,\n   allowing the exchange of protocol 41 encapsulated packets between\n\
    \   6over4 nodes without prior administrative configuration.\n   Because multicast\
    \ is supported, standard IPv6 Neighbour Discovery and\n   Stateless Address Autoconfiguration\
    \ [RFC4862] can be used.  Although,\n   like automatic tunnels (Section 3.2) and\
    \ other mechanisms, 6over4\n   embeds the IPv4 address of the host in the IPv6\
    \ address, the\n   destination IPv4 address in the outer IPv4 header is *not*\
    \ derived\n   from the IPv6 address embedded in the inner IPv6 header, but learnt\n\
    \   through Neighbour Discovery [RFC4861].  In effect, the IPv4 addresses\n  \
    \ of the hosts are used as link-layer addresses in the same way that\n   Media\
    \ Access Control (MAC) addresses are used on Ethernet networks.\n   One or more\
    \ routers with connectivity to the global IPv6 Internet\n   send out Router Advertisements\
    \ to provide 6over4 hosts with\n   connectivity to the rest of the IPv6 Internet.\n\
    \   6over4 has the minimal overhead for protocol 41 encapsulation and\n   doesn't\
    \ require manual configuration.  Hosts can only take advantage\n   of 6over4 if\
    \ they run the mechanism themselves.  6over4 packets can't\n   pass through a\
    \ NAT successfully, as the IPv4 address exchanged\n   through Neighbour Discovery\
    \ will be different from the one needed to\n   reach the host in question, and\
    \ because, without port numbers,\n   protocol 41 doesn't allow for multiplexing\
    \ multiple hosts using this\n   encapsulation behind a single IPv4 address.  However,\
    \ 6over4 works\n   within IPv4 domains that reside behind a NAT in their entirety\
    \ and\n   use RFC 1918 addressing.\n   Because of its reliance on IPv4 multicast\
    \ and because local IPv6\n   communication is relatively easy to facilitate using\
    \ IPv6 routers,\n   6over4 is not supported in current operating systems.  ISATAP\n\
    \   (Section 3.7) provides very similar functionality without requiring\n   IPv4\
    \ multicast capability and is implemented more widely.\n"
- title: 3.4.  Generic Routing Encapsulation (GRE)
  contents:
  - "3.4.  Generic Routing Encapsulation (GRE)\n   Generic Routing Encapsulation (GRE)\
    \ [RFC2784] is a generic point-to-\n   point tunnel mechanism that allows many\
    \ other protocols to be\n   encapsulated in IP.\n   GRE is a simple protocol that\
    \ is similar to configured tunnels\n   (Section 3.1) when used for IPv6-in-IPv4\
    \ tunneling.  The main benefit\n   of GRE is that it can encapsulate any protocol's\
    \ packets, not only\n   IPv6 packets.  The GRE header causes an extra overhead\
    \ of 8 to 16\n   bytes depending on which options are used.  GRE sets the Protocol\n\
    \   field in the IP header to 47.\n   The GRE header can optionally contain a\
    \ checksum, a key to separate\n   different traffic flows (for example, different\
    \ tunnels) between the\n   same endpoints, and a sequence number that can be used\
    \ to prevent\n   packets from being processed out of order.\n   GRE is implemented\
    \ in many routers but not in most consumer-level\n   home gateways or desktop\
    \ operating systems.\n"
- title: 3.5.  Connection of IPv6 Domains via IPv4 Clouds (6to4)
  contents:
  - "3.5.  Connection of IPv6 Domains via IPv4 Clouds (6to4)\n   6to4 is specified\
    \ in \"Connection of IPv6 Domains via IPv4 Clouds\"\n   [RFC3056].  It creates\
    \ a block of IPv6 addresses from a locally\n   configured IPv4 address by concatenating\
    \ that IPv4 address to the\n   prefix 2002::/16, resulting in a /48 IPv6 prefix.\
    \  Addresses in\n   2002::/16 are considered reachable through the tunnel interface,\
    \ so\n   the 6to4 network functions as a Non-Broadcast Multi-Access (NBMA)\n \
    \  network through which 6to4 users can communicate.  IPv6 packets are\n   encapsulated\
    \ by adding an IPv4 header with the Protocol field set to\n   41.\n   The /48\
    \ prefix allows a single system running 6to4 to act as a\n   gateway or router\
    \ for a large number of IPv6 hosts.  Alternatively,\n   an individual host may\
    \ run 6to4 and not act as a gateway or router.\n   The system running 6to4 must\
    \ have a globally reachable IPv4 address.\n   Using 6to4 with a private IPv4 address\
    \ [RFC1918] is not possible.\n   \"An Anycast Prefix for 6to4 Relay Routers\"\
    \ [RFC3068] specifies an\n   anycast mechanism for 6to4 relays that provide connectivity\
    \ between\n   the 6to4 network and the regular IPv6 Internet.  All public relays\n\
    \   share the IPv4 address 192.88.99.1, which corresponds to 2002:c058:\n   6301::.\
    \  Relays advertise reachability towards 2002::/16 to the\n   native IPv6 Internet,\
    \ so packets addressed to systems using 6to4\n   addresses are routed to the closest\
    \ gateway.  The gateway\n   encapsulates these packets and forwards them to the\
    \ IPv4 address\n   included in the IPv6 address.  Systems running 6to4 have a\
    \ default\n   route pointing to 2002:c058:6301::, so they tunnel packets addressed\n\
    \   to non-6to4 IPv6 destinations to the closest relay, which\n   decapsulates\
    \ the packet and forwards them as IPv6 packets.\n   The 6to4 protocol adds minimal\
    \ overhead for protocol 41 encapsulation\n   and requires no manual configuration\
    \ from users.  The biggest problem\n   specific to 6to4 is that it is unpredictable\
    \ which 6to4 anycast relay\n   is used.  These relays are often provided by third\
    \ parties on a best-\n   effort basis.  In practice, this has caused unpredictable\n\
    \   performance.  Traffic from the 6to4 network to the regular IPv6\n   Internet\
    \ will likely use a different 6to4 relay than the traffic in\n   the opposite\
    \ direction.  If either of those relays is not reliable,\n   then the communication\
    \ between those networks is affected.\n   Especially the lack of control over\
    \ the relay used for return traffic\n   is considered to be a problem with 6to4.\n\
    \   To avoid problems with 6to4, the IPv6 Default Address Selection\n   algorithm\
    \ [RFC6724] gives IPv4 addresses a higher preference than\n   6to4 addresses.\
    \  When making a connection, a system will prefer\n   native IPv6 over IPv4, and\
    \ IPv4 over 6to4 IPv6.  This causes 6to4 to\n   be used only when a destination\
    \ is not reachable over IPv4 and no\n   other IPv6 connectivity is available.\n\
    \   For more information about 6to4, see \"Advisory Guidelines for 6to4\n   Deployment\"\
    \ [RFC6343].\n   *Warning*:\n   Although many, if not all, 6to4 implementations\
    \ disable the mechanism\n   when the system only has an RFC 1918 address, recently\
    \ a block of\n   IPv4 addresses has been set aside for use in service-provider-\n\
    \   operated Network Address Translators, also known as Carrier-Grade\n   NATs\
    \ (CGNs).  [RFC6598] sets aside the block 100.64.0.0/10 for the\n   use between\
    \ CGNs and subscriber devices.  As 100.64.0.0/10 is not an\n   RFC 1918 address\
    \ block, systems implementing 6to4 may fail to disable\n   the mechanism, but\
    \ due to the shared nature of the 100.64.0.0/10\n   prefix, 6to4 cannot work using\
    \ these addresses.  The same issue is\n   present if an ISP decides to use regular\
    \ global unicast IPv4 address\n   space behind a CGN.\n"
- title: 3.5.1.  6to4 Provider Managed Tunnels
  contents:
  - "3.5.1.  6to4 Provider Managed Tunnels\n   [RFC6732] describes \"6to4 provider\
    \ managed tunnels\", which are a way\n   to make 6to4 work behind a CGN.  This\
    \ is accomplished by running a\n   6to4 gateway at the 6to4 gateway anycast address,\
    \ and then\n   translating the IPv6 addresses used by 6to4 users behind the CGN\
    \ to\n   IPv6 addresses from the ISP's range.  Unlike IPv4 NAT, where multiple\n\
    \   internal hosts share a single public IPv4 address, prefix translation\n  \
    \ maps entire prefixes, so each host has its own public IPv6 address\n   and can\
    \ receive incoming packets as usual.\n   However, if IPv6 applications are not\
    \ aware that translation is\n   happening (and they have no reason to expect that\
    \ it is), they may\n   not use their externally visible address in referrals,\
    \ so\n   applications that use referrals are likely to fail.  Additionally,\n\
    \   the translation is only specified for packets that flow through the\n   6to4\
    \ gateway, not for packets sent directly to other 6to4 users.  So,\n   communication\
    \ with other 6to4 users is not possible.  As such, the\n   use of 6to4 provider\
    \ managed tunnels is discouraged except as a very\n   last resort.\n"
- title: 3.6.  Anything In Anything (AYIYA)
  contents:
  - "3.6.  Anything In Anything (AYIYA)\n   AYIYA [AYIYA] is designed for use by the\
    \ SixXS [SIXXS] tunnel-broker\n   service.  For more information, see the specification\
    \ [MASSAR].\n   The AYIYA protocol defines a method for encapsulating any protocol\
    \ in\n   any other protocol.  The most common way of deploying AYIYA is to use\n\
    \   the following sequence of headers: IPv4-UDP-AYIYA-IPv6, although\n   other\
    \ combinations like IPv4-AYIYA-IPv6 or IPv6-SCTP-AYIYA-IPv4 are\n   also possible.\
    \  That document does not limit the contents nor the\n   protocol that carries\
    \ the AYIYA packets.  In this document, we only\n   look at the most common usage\
    \ (IPv4-UDP-AYIYA-IPv6) that is deployed\n   on the SixXS tunnel brokers to provide\
    \ IPv6 access to clients behind\n   NAT devices.\n   AYIYA specifies the encapsulation,\
    \ identification, checksum,\n   security, and certain management operations that\
    \ can be used once the\n   tunnel is established.  It does not specify how the\
    \ tunnel\n   configuration parameters can be negotiated.  Typically, the TIC\n\
    \   protocol described in Section 4.3 is used for that part of the tunnel\n  \
    \ setup, although the Tunnel Setup Protocol (TSP) (Section 4.1) could\n   just\
    \ as well be used.\n   AYIYA provides a point-to-point tunnel, over which the\
    \ endpoints can\n   route traffic for any source and destination.  When using\
    \ SHA-1\n   hashing for authentication, as is common when using the Automatic\n\
    \   IPv6 Connectivity Client Utility (AICCU) client with a SixXS tunnel\n   server,\
    \ the total packet overhead is 72 bytes (20 for the IPv4\n   header, 8 for UDP,\
    \ and 44 for AYIYA).\n   AYIYA provides operational commands for querying the\
    \ hostname,\n   address, contact information, software version, and last error\n\
    \   message.  An operational command to ask the other side of the tunnel\n   to\
    \ shut down is also available.  These commands in the protocol can\n   make debugging\
    \ of AYIYA tunnels easier if the tools support them.\n   The main advantage of\
    \ AYIYA is that it can provide a stable tunnel\n   through an IPv4 NAT.  The UDP\
    \ port numbers allow multiple AYIYA users\n   to share a single IPv4 address behind\
    \ a NAT.\n   The client will contact the tunnel server at regular intervals, and\n\
    \   the tunnel server will automatically adapt to changing IPv4 addresses\n  \
    \ and/or UDP port numbers.  To prevent a third party from injecting\n   rogue\
    \ packets into the tunnel, the client can optionally be\n   authenticated by using\
    \ the identity and signature fields.  A\n   timestamp is included in the AYIYA\
    \ header to guard against replay\n   attacks.\n   There is currently a single\
    \ implementation of this protocol: the\n   AICCU [AICCU] client software used\
    \ with the SixXS [SIXXS] tunnel-\n   broker service.\n"
- title: 3.7.  Intra-Site Automatic Tunnel Addressing (ISATAP)
  contents:
  - "3.7.  Intra-Site Automatic Tunnel Addressing (ISATAP)\n   ISATAP [RFC5214] uses\
    \ protocol 41 encapsulation to provide\n   connectivity between isolated IPv6-capable\
    \ nodes within an\n   organisation's internal network.  It is similar to 6over4\n\
    \   (Section 3.3), but without the requirement that the IPv4 network\n   supports\
    \ multicast; unlike 6over4, ISATAP uses a Non-Broadcast Multi-\n   Access (NBMA)\
    \ communication model and thus doesn't support\n   multicasts.  The mechanism\
    \ assigns IPv6 addresses whose Interface\n   Identifier is solely defined by a\
    \ node's IPv4 address, which is\n   assumed to be unique.\n   In order to obtain\
    \ a /64 prefix, an ISATAP host needs to send a\n   unicast Router Solicitation\
    \ to receive a unicast Router Advertisement\n   from an ISATAP router.  Without\
    \ the ability to send and receive IPv6\n   multicasts, an ISATAP host must be\
    \ configured with a Potential Router\n   List through an all-IPv4 mechanism, such\
    \ as manual setup, DHCP, or\n   the DNS.  Site administrators are encouraged to\
    \ use a DNS Fully\n   Qualified Domain Name using the convention \"isatap.domainname\"\
    \ (e.g.,\n   isatap.example.com).  Hosts will accept packets with IPv4 sender\n\
    \   addresses that are either on the Potential Router List or embedded in\n  \
    \ the IPv6 sender address.\n   The router's prefix and the IPv4 address together\
    \ define the IPv6\n   address for the ISATAP interface.  This means that precisely\
    \ one\n   ISATAP address is available for each IPv4 address.  As such, each\n\
    \   host needs to run ISATAP itself in order to enjoy ISATAP IPv6\n   connectivity.\
    \  The IPv4 address in the destination IPv6 address is\n   used to bootstrap Neighbour\
    \ Discovery.\n   [RFC5214] doesn't explicitly address the use of ISATAP using\
    \ private\n   RFC 1918 addresses.  Despite that, the mechanism seems compatible\n\
    \   with private addresses.  NAT, however, breaks the relationship\n   between\
    \ the IPv4 address embedded in the IPv6 address and would\n   therefore make communication\
    \ between ISATAP hosts impossible.  Any\n   device that can communicate with the\
    \ ISATAP hosts over IPv4 using\n   protocol 41 can participate in the IPv6 subnet.\n\
    \   ISATAP is available in Windows, Linux, and Cisco IOS.\n"
- title: 3.8.  Tunneling IPv6 over UDP through NATs (Teredo)
  contents:
  - "3.8.  Tunneling IPv6 over UDP through NATs (Teredo)\n   Teredo is specified in\
    \ [RFC4380] and a few updates; it is designed as\n   an automatic tunnel mechanism\
    \ of last resort.  It can configure an\n   IPv6 address behind most NAT devices,\
    \ but not all.  Because Teredo\n   uses encapsulation in UDP, multiple Teredo\
    \ clients can be\n   simultaneously active behind the same NAT.  For each Teredo\
    \ client, a\n   single IPv6 address is then created at the expense of a single\n\
    \   external UDP port.\n   The operation of Teredo is based on a classification\
    \ of NAT [RFC3489]\n   as established during an interaction with a Teredo server.\
    \  This\n   classification has since been obsoleted (by [RFC5389]) because it\n\
    \   assigns more properties to NAT than achieved in reality.\n   Teredo is present\
    \ in Windows XP and later and is enabled by default\n   in Windows Vista and later.\
    \  However, if IPv6 connectivity is only\n   possible through Teredo, then Windows\
    \ will not look up AAAA records\n   when resolving domain names.  This means that\
    \ Teredo is only used to\n   connect to explicit IPv6 addresses obtained through\
    \ another mechanism\n   than DNS.  An open-source implementation named Miredo\
    \ exists for\n   other platforms.\n   The performance of Teredo falls noticeably\
    \ short of that of IPv4.\n   The setup time of a connection involves finding a\
    \ Teredo relay nearby\n   the native address to encapsulate and decapsulate traffic,\
    \ and\n   finding this relay can take in the order of seconds.  This process is\n\
    \   not sufficiently reliable; Teredo fails in about 37% [TERTST] of its\n   attempts\
    \ to connect to native IPv6 destinations.  The roundtrip time\n   of traffic can\
    \ add tenths of a second, and jitter generally worsens\n   if it is dependent\
    \ on a public relay.\n   Teredo clients need to be configured with a Teredo server\
    \ when\n   setting up their local IPv6 address and when initiating a connection\n\
    \   to a native IPv6 destination.  The hostnames of the Teredo servers\n   are\
    \ usually preconfigured by the vendor of the Teredo implementation.\n   All Microsoft\
    \ Windows implementations use Teredo servers provided by\n   Microsoft by default.\n"
- title: 3.9.  IPv6 Rapid Deployment (6rd)
  contents:
  - "3.9.  IPv6 Rapid Deployment (6rd)\n   6rd [RFC5969] is used by service providers\
    \ to connect customer\n   networks behind a CPE (Customer Premises Equipment)\
    \ to the IPv6\n   Internet.\n   The structure of the 6rd protocol is based on\
    \ 6to4, and it has the\n   same minimal overhead as all protocols that use protocol\
    \ 41\n   encapsulation.  The main differences between 6rd and 6to4 are that\n\
    \   6rd is meant to be used inside a service provider's network and does\n   not\
    \ use a special IPv6 prefix but one or more prefixes routed to the\n   service\
    \ provider.  As such, 6rd users aren't immediately recognisable\n   by their IPv6\
    \ address the way 6to4 users are.  Where 6to4 uses relays\n   based on global\
    \ anycast routing, 6rd uses relays provided and\n   maintained by the service\
    \ provider.  Because of this architecture,\n   the tunnel does not traverse unknown\
    \ networks; this makes any\n   debugging much easier.\n   6rd is completely stateless\
    \ once it is configured.  The tunnel\n   endpoints can therefore be deployed using\
    \ anycast.  This is commonly\n   done for the 6rd border relays deployed by the\
    \ service provider to\n   provide redundancy.\n   Because of the different prefix,\
    \ the device used as the 6rd client\n   cannot use the hard-coded IPv6 prefix\
    \ calculation and relay addresses\n   of 6to4.  Instead, the 6rd client needs\
    \ to receive configuration\n   information to work.  In principle, 6rd nodes may\
    \ be configured in a\n   variety of ways, the most common one being through DHCP.\
    \  If the\n   client receives its IPv4 address from a DHCPv4 server, then the\
    \ 6rd\n   configuration can be included in the DHCP message exchange using the\n\
    \   6rd DHCPv4 Option defined in [RFC5969].  Manual configuration of 6rd\n   options\
    \ and configuration using [TR-069] is also possible.\n   The main advantage of\
    \ using 6rd is that it allows service providers\n   to deploy IPv6 on last-mile\
    \ access networks that for some reason\n   cannot provide native IPv6 connectivity.\
    \  It does not share the lack\n   of predictable routing that 6to4 suffers from\
    \ because all routing,\n   encapsulation, and decapsulation are done by the service\
    \ provider.\n   6rd is intended to be a service managed by an ISP or enterprise\
    \ IT\n   department that must explicitly make 6rd available for clients to be\n\
    \   able to use it.\n"
- title: 3.10.  Native IPv6 behind NAT44 CPEs (6a44)
  contents:
  - "3.10.  Native IPv6 behind NAT44 CPEs (6a44)\n   Inspired by Teredo, the 6a44\
    \ tunnel is described in \"Native IPv6\n   behind IPv4-to-IPv4 NAT Customer Premises\
    \ Equipment (6a44)\"\n   [RFC6751].  Its purpose is to enable Internet Service\
    \ Providers to\n   establish IPv6 connectivity for their customers, in spite of\
    \ the use\n   of a CPE or home gateway that is not prepared for IPv6.  The\n \
    \  infrastructure required for this is a 6a44 relay in the ISP's network\n   and\
    \ a 6a44 client in the customer's internal network.\n   6a44 was explicitly designed\
    \ to overcome the noted problems with\n   Teredo.  Where Teredo was designed as\
    \ a global solution without\n   dependency on ISP cooperation, the 6a44 tunnel\
    \ explicitly assumes ISP\n   cooperation.  Instead of using Teredo's well-known\
    \ prefix, a /48\n   prefix out of the ISP's address space is used.  A well-known\n\
    \   (anycast) IPv4 address has been assigned for the 6a44 relay to be run\n  \
    \ inside the ISP network without client configuration.  This well-known\n   address\
    \ is allocated from the same IPv4 /24 as 6to4.\n   As part of its bootstrapping,\
    \ a 6a44 client requests an address from\n   the 6a44 relay, and a regular keepalive\
    \ sent by the 6a44 client to\n   the 6a44 relay keeps mapping state in NATs and\
    \ firewalls on the path\n   alive.  Traffic passed from the native IPv6 Internet\
    \ to 6a44 is\n   encapsulated in UDP and IPv4 by the relay and decapsulated by\
    \ the\n   6a44 client; the opposite is done in the other direction.\n"
- title: 3.11.  Locator/ID Separation Protocol (LISP)
  contents:
  - "3.11.  Locator/ID Separation Protocol (LISP)\n   The Locator/ID Separation Protocol\
    \ (LISP) [RFC6830] is a protocol to\n   separate the identity of systems from\
    \ their location on the Internet\n   and/or internal network.  The addresses of\
    \ the systems are called\n   Endpoint Identifiers (EIDs), and the addresses of\
    \ the gateways are\n   called Routing Locators (RLOCs).  It is possible to use\
    \ IPv6 EIDs\n   with IPv4 RLOCs and thereby use LISP for tunneling IPv6 over IPv4.\n\
    \   LISP defines its own packet formats for encapsulation of data packets\n  \
    \ and for control messages.  All such packets are then encapsulated in\n   UDP.\
    \  Data packets use port 4341, and control packets use port 4342.\n   The LISP\
    \ specification consists of several RFCs.  The relevant ones\n   for IPv6-in-IPv4\
    \ tunneling are the base specification [RFC6830],\n   \"Interworking between Locator/ID\
    \ Separation Protocol (LISP) and Non-\n   LISP Sites\" [RFC6832], and \"Locator/ID\
    \ Separation Protocol (LISP)\n   Map-Server Interface\" [RFC6833].\n         \
    \           +----+    +----+\n                    | MS |    | MR |\n         \
    \           +----+    +----+       +-----+   /-----------\\\n                \
    \       |        |      /---| xTR |---| LISP site |\n          +------+   /------------\\\
    ---/    +-----+   \\-----------/\n          | PxTR |---| IP network |\n      \
    \    +------+   \\------------/---\\    +-----+   /-----------\\\n           \
    \                 |          \\---| xTR |---| LISP site |\n                  \
    \  /---------------\\      +-----+   \\-----------/\n                    | Non-LISP\
    \ site |\n                    \\---------------/\n                      An Example\
    \ of a LISP Deployment\n   LISP introduces new terminology and new concepts. \
    \ The relevant ones\n   for this document are:\n   ITR:  Ingress Tunnel Router,\
    \ a router encapsulating data packets at\n      the border of a LISP site\n  \
    \ ETR:  Egress Tunnel Router, a router decapsulating data packets at\n      the\
    \ border of a LISP site\n   xTR:  A router performing both the ITR and the ETR\
    \ functions\n   PITR:  Proxy ITR, a router accepting traffic from non-LISP sites,\n\
    \      encapsulating it, and tunneling it to the LISP sites\n   PETR:  Proxy ETR,\
    \ a router accepting traffic from LISP sites to send\n      it to non-LISP sites\n\
    \   PxTR:  A router performing both the PITR and the PETR functions\n   MS:  Map\
    \ Server, a server accepting RLOC registrations from ETRs\n   MR:  Map Resolver,\
    \ a server that can resolve queries for RLOCs from\n      ITRs\n   LISP ETRs register\
    \ the EID prefixes for which they can handle traffic\n   with one or more Map\
    \ Servers.  ITRs and PITRs can then query Map\n   Resolvers to determine which\
    \ RLOCs to use when sending traffic to a\n   LISP site.  PITRs advertise aggregates\
    \ of EID prefixes to the global\n   routing table and provide tunneling services\
    \ for them so that non-\n   LISP sites can reach LISP sites.  PETRs provide a\
    \ way for LISP sites\n   to send traffic to non-LISP sites.\n   LISP is a complex\
    \ protocol if only used for tunneling.  Features of\n   LISP are that ETRs can\
    \ advertise their own RLOC addresses, that one\n   site can have multiple xTRs\
    \ with independent RLOCs, and that the LISP\n   site administrator can specify\
    \ priorities and weights for those\n   RLOCs.  This provides redundancy and explicit\
    \ load balancing between\n   RLOCs.  It also allows for automatic tunneling between\
    \ different\n   sites without using a PxTR if both sites use Map Servers and Map\n\
    \   Resolvers that are interconnected, for example, by participating in\n   the\
    \ LISP Beta Network [LISPBETA].  To facilitate these\n   interconnections, the\
    \ LISP Delegated Database Tree (DDT) system is\n   available.\n   LISP is implemented\
    \ on most Cisco devices.  There are implementations\n   available for FreeBSD\
    \ and Linux, as well as a platform-independent\n   implementation in the Python\
    \ programming language.  Note that for\n   LISP to work, a mapping service not\
    \ unlike the DNS must be in place.\n"
- title: 3.12.  Subnetwork Encapsulation and Adaptation Layer (SEAL)
  contents:
  - "3.12.  Subnetwork Encapsulation and Adaptation Layer (SEAL)\n   The Subnetwork\
    \ Encapsulation and Adaptation Layer (SEAL) [SEAL]\n   (along with its companion\
    \ technologies cited therein) provides a\n   hybrid configured/automatic tunneling\
    \ system.  SEAL itself provides a\n   mid-layer of encapsulation between the inner\
    \ IPv6 header and the\n   outer IPv4 header, i.e., as IPv4-SEAL-IPv6.  SEAL can\
    \ also be used in\n   conjunction with an outer UDP encapsulation header, e.g.,\
    \ if NAT\n   traversal is necessary.\n   The SEAL tunnel endpoint creates bidirectional\
    \ configured tunnels to\n   reach default IPv6 routers, and it discovers unidirectional\
    \ automatic\n   tunnels.  SEAL tunnels can be configured over multiple underlying\n\
    \   IPv4 links whether the addresses are provisioned from public or\n   private\
    \ IPv4 addressing domains.  In that case, multihoming and\n   traffic engineering\
    \ are naturally supported.\n   SEAL provides an optional 32-bit identifier and\
    \ variable-length\n   Integrity Check Vector that can be used for packet identification,\n\
    \   message origin authentication, anti-replay, and a mid-layer\n   segmentation\
    \ and reassembly capability.  SEAL also provides a SEAL\n   Control Message Protocol\
    \ (SCMP) used for neighbour coordinations\n   between tunnel endpoints.  These\
    \ coordinations are used for functions\n   such as tunnel MTU signalling, route\
    \ optimisations, neighbour\n   reachability testing, and so on.\n   SEAL ensures\
    \ that packets that are no larger than 1500 bytes can be\n   transported through\
    \ the tunnel by using a tunnel segmentation\n   function.  IPv6 packets that are\
    \ too large to transport through the\n   tunnel whole are split into segments.\
    \  The segments are encapsulated\n   in IPv4 and reassembled into the original\
    \ IPv6 packets at the remote\n   tunnel endpoint.  SEAL also admits packets larger\
    \ than 1500 bytes\n   into the tunnel on a best-effort basis in case the path\
    \ between the\n   tunnel endpoints can support the larger size.\n   When SEAL\
    \ is used alone without its companion technologies, it can be\n   used in the\
    \ same scenarios as for GRE.  However, SEAL provides\n   advanced capabilities\
    \ that make it better suited than GRE for many\n   use cases.  There is currently\
    \ an experimental open-source\n   implementation of SEAL.\n"
- title: 3.13.  Peer-to-Peer IPv6 on Any Internetwork (6bed4)
  contents:
  - "3.13.  Peer-to-Peer IPv6 on Any Internetwork (6bed4)\n   The 6bed4 tunnel is\
    \ specified in \"6bed4: Peer-to-Peer IPv6 on Any\n   Internetwork\" [6BED4]. \
    \ A specific goal of 6bed4 is to achieve direct\n   communication between peers\
    \ when the intermediate infrastructure does\n   not prohibit it.  The advantage\
    \ of direct communication is to get a\n   performance level similar to IPv4. \
    \ The address of a 6bed4 peer is\n   formed from the publicly visible IPv4 address\
    \ and UDP port.  The\n   tunnel service used for fallback connectivity can run\
    \ anywhere --\n   perhaps at the local ISP or with a third-party service provider\
    \ for\n   6bed4, or even on a well-known address.  It is currently an NBMA\n \
    \  protocol; there are openings for expansion with multicast.\n   The setup of\
    \ 6bed4 is somewhat similar to 6to4, except that it\n   employs UDP so it can\
    \ be used behind NAT.  It also has elements found\n   in Teredo but without a\
    \ need to classify NATs and induce behaviour\n   from that.  The 6bed4 tunnel\
    \ makes no assumptions about the\n   capabilities of NAT devices beyond being\
    \ able to do straightforward\n   NAT on UDP packets.  Given this, 6bed4 can create\
    \ reliable IPv6\n   tunnels.\n   In environments where direct connections between\
    \ 6bed4 peers are\n   possible, additional path stretch compared to IPv4 communication\
    \ is\n   avoided, so 6bed4 performance comes close to IPv4 performance.  In\n\
    \   situations where it is not possible to run over the direct path\n   between\
    \ two peers because a NAT that does not conform to [RFC4787] is\n   on the path,\
    \ a fallback to a tunnel server is used.  This increases\n   path stretch and\
    \ affects scalability through its impact on roundtrip\n   times and jitter.\n\
    \   Another area where the tunnel server is needed is for connectivity\n   between\
    \ 6bed4 peers and native IPv6 hosts.  For reasons of\n   performance and scalability,\
    \ connections between 6bed4 peers are\n   preferred over connections between a\
    \ 6bed4 peer and a native IPv6\n   host.  A default address exists to support\
    \ zero-config operation, but\n   it is possible to locally configure a tunnel\
    \ server as a fallback\n   route, which then also defines the tunnel server for\
    \ the return path.\n   6bed4 has been specifically designed to support real-time\
    \ interactive\n   traffic streams, such as SIP calls, between 6bed4-supporting\
    \ end\n   points, assuming that each prefers 6bed4-to-6bed4 traffic over 6bed4-\n\
    \   to-native traffic.  Under that premise, the only hosts that need to\n   go\
    \ through a tunnel server are those that are behind a NAT with\n   Address-Dependent\
    \ Mapping or Address and Port-Dependent Mapping.  A\n   number of different implementations\
    \ of 6bed4 have been constructed\n   [6BED4] during the ongoing development of\
    \ its specification.\n"
- title: 4.  Related Protocols
  contents:
  - "4.  Related Protocols\n   The following protocols are not tunnel mechanisms,\
    \ but they can be\n   used in the configuration and/or setup phase of such protocols.\n"
- title: 4.1.  Tunnel Setup Protocol (TSP)
  contents:
  - "4.1.  Tunnel Setup Protocol (TSP)\n   The Tunnel Setup Protocol [RFC5572] specifies\
    \ a protocol for\n   negotiating the setup of a variety of tunnel encapsulations.\
    \  In this\n   document, we are only interested in the encapsulation of IPv6 in\n\
    \   IPv4.  The Tunnel Setup Protocol can negotiate these as a protocol 41\n  \
    \ encapsulated tunnel or as a UDP-encapsulated tunnel.  The tunnel\n   negotiation\
    \ is performed as an XML exchange over UDP or TCP.\n   As a TSP client exchanges\
    \ all IPv6 traffic with the same tunnel\n   server, there are no concerns caused\
    \ by NAT implementations.  The\n   only concern is to send regular keepalives,\
    \ for which ICMPv6 ping\n   messages to the tunnel server are suggested.  When\
    \ encapsulating IPv6\n   packets directly in IPv4, all protocol 41 limitations\
    \ apply.  To\n   avoid these, an additional UDP header may be used.\n   The Tunnel\
    \ Setup Protocol treats all protocols and ports for one IPv4\n   client address\
    \ as equivalent.  This suffices when protocol 41 is\n   used, but for UDP it creates\
    \ a situation where one user can set up a\n   tunnel behind NAT, and another user\
    \ could hijack the tunnel\n   privileges.\n   Open-source clients for the Tunnel\
    \ Setup Protocol and a matching\n   tunnel infrastructure are provided from the\
    \ Freenet6 tunnel service\n   [GOGO6].\n"
- title: 4.2.  SixXS Heartbeat Protocol
  contents:
  - "4.2.  SixXS Heartbeat Protocol\n   The SixXS Heartbeat Protocol [HEARTBEAT] allows\
    \ nodes that have\n   intermittent connectivity or a dynamic IPv4 address that\
    \ changes from\n   time to time to have continuing tunneled IPv6 connectivity.\
    \  One of\n   the goals of the protocol is to determine when a node is no longer\n\
    \   present at its previous IPv4 address and then stop sending tunneled\n   packets\
    \ to prevent them from being delivered to the wrong node.  The\n   Heartbeat Protocol\
    \ then allows a tunnel broker to determine a\n   client's new IPv4 address and\
    \ continue sending tunneled packets with\n   minimal interruption.\n   To accomplish\
    \ this, a node sends periodic heartbeat packets to the\n   tunnel broker.  If\
    \ the tunnel broker fails to receive valid heartbeat\n   packets, it shuts down\
    \ the tunnel in question.  Heartbeat packets\n   contain an MD5 message authentication\
    \ code and a timestamp to avoid\n   replay attacks.  The Heartbeat Protocol can\
    \ work with different\n   tunnel mechanisms, but it is often used with configured\
    \ tunnels\n   (Section 3.1).\n   The protocol is implemented in the SixXS tunnel\
    \ broker; client\n   implementations are available for common operating systems.\
    \  AYIYA\n   can be considered the successor of the Heartbeat Protocol.\n"
- title: 4.3.  Tunnel Information and Control Protocol (TIC)
  contents:
  - "4.3.  Tunnel Information and Control Protocol (TIC)\n   The Tunnel Information\
    \ and Control (TIC) protocol [TIC] is the setup\n   protocol for the [SIXXS] tunnel-broker\
    \ service.\n   With the TIC protocol, a tunnel-broker user can request a list\
    \ of\n   available tunnels and points of presence (POPs) from the tunnel-\n  \
    \ broker service.  When the user chooses one of the tunnels, the\n   configuration\
    \ parameters for that tunnel can then be requested\n   through TIC.  TIC also\
    \ provides commands to control the tunnel, for\n   example, to change the tunnel\
    \ endpoints or to enable or disable the\n   tunnel.\n   Authentication of users\
    \ is done based on username and password.\n   Certain tunnel mechanisms, such\
    \ as AYIYA (Section 3.6) and configured\n   tunnels (Section 3.1) with heartbeat\
    \ (Section 4.2), need a\n   synchronised clock between the tunnel server and the\
    \ client.  TIC\n   facilitates this by providing a server timestamp on request.\
    \  The\n   client can use that to verify that its clock is synchronised with the\n\
    \   server and show an error message to the user if it is not.\n   The TIC protocol\
    \ is implemented in the AICCU client software (see\n   [AICCU]) and in AVM Fritz!Box\
    \ home routers.\n"
- title: 5.  Common Aspects
  contents:
  - "5.  Common Aspects\n   The following are aspects common to many or all tunnel\
    \ mechanisms.\n"
- title: 5.1.  Protocol 41 Encapsulation
  contents:
  - "5.1.  Protocol 41 Encapsulation\n   The most straightforward way to encapsulate\
    \ an IPv6 packet inside an\n   IPv4 packet is by simply adding an IPv4 header\
    \ in front of the IPv6\n   header.  In this case, the Protocol field in the IPv4\
    \ header is set\n   to the value 41.  This encapsulation is also known as \"IPv6\
    \ in IPv4\"\n   and \"IP6 Encapsulation\".\n   This simple \"protocol 41\" encapsulation\
    \ is used by a number of tunnel\n   mechanisms:\n      configured tunnels (Section\
    \ 3.1)\n      automatic tunneling (Section 3.2)\n      6over4 (Section 3.3)\n\
    \      6to4 (Section 3.5)\n      ISATAP (Section 3.7)\n      6rd (Section 3.9)\n"
- title: 5.2.  NAT and Firewalls
  contents:
  - "5.2.  NAT and Firewalls\n   It is not uncommon for NATs and firewalls to block\
    \ protocol 41\n   encapsulated packets, especially at the boundary between an\n\
    \   organisation's internal network and the public Internet.  Tunnel\n   mechanisms\
    \ that don't use protocol 41 encapsulation typically employ\n   a UDP header and\
    \ are somewhat less likely to be filtered, assuming\n   that tunneling is initiated\
    \ on the LAN side.  UDP is usually\n   subjected to Network Address Port Translation\
    \ (NAPT) [RFC2663], which\n   additionally translates between internal and external\
    \ port numbers.\n   (Often, the term \"NAT\" is used where \"NAPT\" may be more\
    \ appropriate.)\n   Although protocol 41 can in principle work through NAT, there\
    \ are two\n   issues.  First, when the IPv6 address is derived from the IPv4\n\
    \   address (see Section 5.4), NATing of the outer IPv4 header breaks the\n  \
    \ relationship between the IPv4 and IPv6 addresses.  Second, because\n   protocol\
    \ 41 does not use port numbers, the number of protocol 41\n   tunnel endpoints\
    \ that can be supported behind a NAT device is equal\n   to its number of external\
    \ IPv4 addresses (see Section 6.1).  This\n   limitation also applies to GRE.\n\
    \   Tunnels that pass through a NAT device or stateful firewall need to\n   generate\
    \ traffic at regular intervals to refresh the NAT or firewall\n   mapping.  If\
    \ the mapping is lost, tunneled packets from the outside\n   won't be able to\
    \ pass through the NAT or firewall until a system\n   behind the NAT or firewall\
    \ sends a tunneled packet and the mapping is\n   re-created.  Alternatively, a\
    \ static mapping (often in the form of a\n   \"default\" or \"DMZ\" host) may\
    \ be configured manually.\n   The following tunnel mechanisms are incompatible\
    \ with NAT because\n   their addresses must be derived from a globally unique\
    \ IPv4 address:\n      automatic tunneling (Section 3.2)\n      6to4 (Section\
    \ 3.5)\n      6rd (Section 3.9)\n      LISP (Section 3.11)\n   Note that it is\
    \ common to run 6to4 or 6rd on a home gateway device\n   that also performs IPv4\
    \ NAT.  In this configuration, NAT is not\n   applied to tunneled packets, so\
    \ NAT and 6to4/6rd can coexist.\n   The following tunnel mechanisms cannot operate\
    \ between nodes on\n   opposing sides of a NAT, but they do work if _all_ nodes\
    \ are behind a\n   NAT (where RFC 1918 addresses are often used):\n      6over4\
    \ (Section 3.3)\n      ISATAP (Section 3.7)\n   The following tunnel mechanisms\
    \ may work through NAT in some\n   circumstances, but are not designed for NAT\
    \ compatibility:\n      configured tunnels (Section 3.1)\n      GRE (Section 3.4)\n\
    \   The following tunnel mechanisms are designed for NAT compatibility:\n    \
    \  AYIYA (Section 3.6)\n      Teredo (Section 3.8); but it is unreliable\n   \
    \   6a44 (Section 3.10)\n      SEAL (Section 3.12)\n      6bed4 (Section 3.13)\n\
    \   The LISP specification requires that locator addresses (the addresses\n  \
    \ in the outer IPv4 header) are globally routable public addresses.\n   A tunnel\
    \ built over UDP makes a claim on a resource, namely, an\n   external UDP port.\
    \  This may impact how well a tunnel will scale in\n   an organisation; for instance,\
    \ if every desktop runs its own tunnel\n   client over UDP, then the claim on\
    \ this resource may have some\n   impact.\n   Note that ISPs may have multiple\
    \ subscribers share a public IPv4\n   address by performing NAT (Carrier-Grade\
    \ NAT in this context).  In\n   this case, the subscribers' home gateways may\
    \ receive an address in\n   the 100.64.0.0/10 block [RFC6598].  For the purposes\
    \ of tunnel\n   mechanisms, this address block is similar to the RFC 1918 address\n\
    \   blocks.  However, tunnel implementations that are aware of NAT and\n   RFC\
    \ 1918 addresses may not recognise 100.64.0.0/10 as non-public\n   addresses and\
    \ fail to operate successfully.  The same issue is\n   present if an ISP decides\
    \ to use regular global unicast IPv4 address\n   space behind a CGN.\n"
- title: 5.3.  MTU Considerations
  contents:
  - "5.3.  MTU Considerations\n   Because of the extra IPv4 header and possible additional\
    \ headers\n   between the IPv4 and IPv6 headers, tunnels experience a reduced\n\
    \   maximum packet size (MTU) compared to native IPv6 communication.\n   Path\
    \ MTU discovery (PMTUD) should handle this in nearly all cases,\n   but filtering\
    \ of ICMPv6 \"packet too big\" messages may lead to an\n   inability to communicate\
    \ because senders of large packets fail to\n   perform PMTUD successfully.  However,\
    \ when a tunnel terminates\n   directly on the host using it, the TCP maximum\
    \ segment size (MSS)\n   option communicates the maximum packet size to the remote\
    \ endpoint,\n   so TCP-based communication may still succeed.  If not, the initial\n\
    \   TCP SYN/ACK exchange happens without issue, but then the session\n   stalls\
    \ as the larger packets containing data are lost.\n   With tunnel mechanisms where\
    \ the MTU is left unspecified, it is\n   possible for the two endpoints to have\
    \ different MTUs: typically, one\n   uses the IPv6 minimum (1280 bytes), while\
    \ the other uses the physical\n   MTU minus tunnel overhead (often 1480 bytes).\
    \  In theory, this should\n   lead to PMTUD failures because the \"big\" side\
    \ unknowingly sends\n   packets that the \"small\" side can't handle.  However,\
    \ in practice,\n   implementations handle incoming packets larger than their own\
    \ MTU\n   without issue.\n   Only when the IPv4 MTU is reduced below 1500 bytes,\
    \ for instance,\n   when using PPP over Ethernet (PPPoE, [RFC2516]), issues are\
    \ more\n   likely to arise.  So, when the possibility exists that tunneled\n \
    \  packets encounter a PPPoE link, it is prudent to set the MTU of a\n   tunnel\
    \ to no more than 1472 bytes, so that tunneled packets don't\n   have to be fragmented.\
    \  Additionally, Section 3.2.1 of [RFC4213]\n   recommends limiting the MTU of\
    \ tunnels to a minimum of 1280 bytes.\n   SEAL was specifically designed to overcome\
    \ these limitations by\n   adding the capability to fragment IPv6 packets prior\
    \ to encapsulation\n   in IPv4 and then to reassemble the fragments at the remote\
    \ tunnel\n   endpoint.  This way, the SEAL tunnel ensures that packets that are\
    \ no\n   larger than 1500 bytes will be transported to the tunnel far end even\n\
    \   if there are restricting links in the path.  SEAL can also admit\n   larger\
    \ packets into the tunnel on a best-effort basis in case the\n   path between\
    \ the tunnel endpoints can support this larger size.\n"
- title: 5.4.  IPv4 Addresses Embedded in IPv6 Addresses
  contents:
  - "5.4.  IPv4 Addresses Embedded in IPv6 Addresses\n   Many tunnel mechanisms embed\
    \ IPv4 addresses or further information in\n   the IPv6 addresses they use.  There\
    \ are two possible reasons for\n   this.  First, with an IPv4 address embedded\
    \ in the IPv6 address, the\n   outer IPv4 header can be derived without a need\
    \ to explicitly\n   configure tunnel endpoints.  Automatic tunneling, 6to4, ISATAP,\n\
    \   6bed4, and Teredo do this.  6over4 embeds the IPv4 address for the\n   second\
    \ reason; it is embedded in the Interface Identifier and thus\n   the IPv6 address\
    \ because, that way, a (presumably) globally unique\n   Interface Identifier can\
    \ be generated.\n   Automatic tunneling uses IPv4-compatible addresses in the\
    \ prefix\n   ::/96 (i.e., the first 96 bits are all zero).\n    |            \
    \         96 bits                    |        32       |\n    +------------------------------------------------+-----------------+\n\
    \    |                   0:0:0:0:0:0                  |  IPv4 address   |\n  \
    \  +------------------------------------------------+-----------------+\n    \
    \               The IPv4-Compatible Address Structure\n   Systems running 6to4\
    \ have addresses in the 6to4 prefix 2002::/16.\n    | 16 bits |       32     \
    \  |   16   |             64               |\n    +---------+----------------+--------+------------------------------+\n\
    \    |  2002   |  IPv4 address  | Subnet |        Interface ID          |\n  \
    \  +---------+----------------+--------+------------------------------+\n    \
    \                    The 6to4 Address Structure\n   Because a 6rd domain might\
    \ share a common IPv4 prefix, it is not\n   always necessary to encode all 32\
    \ bits of the IPv4 address in the 6rd\n   delegated prefix.  The bits that become\
    \ available because of this\n   optimisation can be used to provide more subnet\
    \ IDs to the user\n   and/or to use a smaller address block for the 6rd prefix.\n\
    \    |     n bits    |    o bits    |   m bits  |    128-n-o-m bits     |\n  \
    \  +---------------+--------------+-----------+-----------------------+\n    |\
    \  6rd prefix   | IPv4 prefix  | Subnet ID |     Interface ID      |\n    +---------------+--------------+-----------+-----------------------+\n\
    \    |<--- 6rd delegated prefix --->|\n                         The 6rd Address\
    \ Structure\n   6over4 uses the IPv4 address to generate a 64-bit Interface\n\
    \   Identifier, which can then be used to create a 128-bit IPv6 address\n   through\
    \ Stateless Address Autoconfiguration.\n    |       48 bits       |   16   | \
    \       32       |        32       |\n    +---------------------+--------+-----------------+-----------------+\n\
    \    | Organisation prefix | Subnet |       0:0       |  IPv4 address   |\n  \
    \  +---------------------+--------+-----------------+-----------------+\n    \
    \                   The 6over4 Address Structure\n   The ISATAP address structure\
    \ is similar to the 6over4 address\n   structure, except that the unique/local\
    \ (u) bit signifies whether the\n   IPv4 address in the Interface Identifier is\
    \ unique.  Presumably, this\n   is the case for any IPv4 address that is not as\
    \ defined in RFC 1918.\n   The group (g) bit is set to zero, and the remaining\
    \ bits are set to\n   0x00005EFE.\n    |       48 bits       |   16   |      \
    \  32       |        32       |\n    +---------------------+--------+-----------------+-----------------+\n\
    \    | Organisation prefix | Subnet |    ug00:5EFE    |  IPv4 address   |\n  \
    \  +---------------------+--------+-----------------+-----------------+\n    \
    \                   The ISATAP Address Structure\n   Teredo embeds the Teredo\
    \ server's IPv4 address, a number of flags,\n   and a UDP port number, as well\
    \ as the Teredo client's IPv4 address in\n   the IPv6 addresses it creates.  For\
    \ good measure, the UDP port and\n   client IPv4 address are \"obfuscated\" by\
    \ flipping their bits.\n    |     32 bits    |       32      |   16  |   16  |\
    \        32       |\n    +----------------+---------------+-------+-------+-----------------+\n\
    \    |     2001:0     |  Server IPv4  | Flags |  Port |   Client IPv4   |\n  \
    \  +----------------+---------------+-------+-------+-----------------+\n    \
    \                   The Teredo Address Structure\n   6a44 can be seen as a combination\
    \ of 6rd and Teredo.  The 6a44 prefix\n   is given out by an ISP.  Both the customer\
    \ site (home gateway) IPv4\n   address as well as the host's/client's RFC 1918\
    \ IPv4 address and a\n   port number are embedded in the IPv6 address.\n    |\
    \         48 bits      |        32       |   16  |        32       |\n    +----------------------+-----------------+-------+-----------------+\n\
    \    |      6a44 prefix     | Cust. site IPv4 |  Port |   Client IPv4   |\n  \
    \  +----------------------+-----------------+-------+-----------------+\n    \
    \                    The 6a44 Address Structure\n   6bed4 embeds two combinations\
    \ of an IPv4 address and UDP port\n   (together acting as a \"6bed4 address\"\
    ) in the IPv6 address.  The\n   first address is for a tunnel server that everyone\
    \ is certain to\n   reach; the other is for the direct address that most peers\
    \ should be\n   able to reach directly.  The tunnel server, however, is the only\
    \ one\n   with guaranteed access to the direct address.\n    |  32 bits |    \
    \      32         |          50             |  14   |\n    +----------+---------------------+-------------------------+-------+\n\
    \    |  prefix  |general 6bed4 address|  direct 6bed4 address   | lanIP |\n  \
    \  +----------+---------------------+-------------------------+-------+\n    \
    \                    The 6bed4 Address Structure\n   The general 6bed4 address\
    \ field conceals the well-known UDP port for\n   the 6bed4 service.  The direct\
    \ 6bed4 address field includes two extra\n   bits to adhere to the EUI-64 address\
    \ format.  The lanIP bits are free\n   for local purposes, such as creating a\
    \ DHCPv6 range.\n"
- title: 6.  Evaluation of Tunnel Mechanisms
  contents:
  - "6.  Evaluation of Tunnel Mechanisms\n   The following subsections deal with various\
    \ aspects of tunnels that\n   guide their selection.\n"
- title: 6.1.  Efficiency of IPv4 Address Use
  contents:
  - "6.1.  Efficiency of IPv4 Address Use\n   With the depletion of the IPv4 address\
    \ space, the ability to deploy a\n   tunnel mechanism behind NAT as well as the\
    \ number of IPv6\n   subscribers, subnets, and individual hosts that can be supported\n\
    \   behind a single IPv4 address have become important considerations.\n   These\
    \ issues are irrelevant to tunnel mechanisms that provide IPv6\n   connectivity\
    \ between hosts within the same administrative domain,\n   such as ISATAP or 6over4,\
    \ as they can use private IPv4 addresses.\n   This is also true for 6rd; it is\
    \ used between an ISP and its\n   customers' home gateways when the ISP has implemented\
    \ NAT.\n   6to4 cannot work behind any kind of NAT.  Most other mechanisms based\n\
    \   on protocol 41 can work behind NAT, at least in principle.  In\n   practice,\
    \ this difference is not as big because the protocol 41\n   encapsulation doesn't\
    \ provide any fields that allow a NAT to\n   demultiplex tunneled packets.  This\
    \ means that only a single protocol\n   41 tunnel endpoint can be supported for\
    \ each public IPv4 address.\n   This makes configured tunnels (as well as 6to4)\
    \ incompatible with\n   service-provider-operated NATs, where multiple subscribers\
    \ share an\n   IPv4 address.\n   Teredo, 6a44, 6bed4, AYIYA, SEAL, and TSP are\
    \ designed to work\n   through NATs and use a UDP header, so multiple tunnel endpoints\
    \ can\n   be hosted behind a single IPv4 address.  On the other hand, Teredo\n\
    \   only provides IPv6 connectivity to a single host.\n   The following table\
    \ shows how many IPv4 addresses each tunnel\n   mechanism requires and how many\
    \ IPv6 hosts it can connect.  The\n   mechanisms are listed in order of increasing\
    \ numbers of supported\n   IPv6 hosts per IPv4 address.\n   +------------+-------------+-------------+-------------+------------+\n\
    \   | Mechanism  | Tunnels per | IPv6 hosts  | Public IPv4 | NAT        |\n  \
    \ |            | IPv4 addr.  | per tunnel  | address     | compatible |\n   +------------+-------------+-------------+-------------+------------+\n\
    \   | Auto. tun. | one         | one         | required    | no         |\n  \
    \ | 6to4       | one         | multiple    | required    | no         |\n   |\
    \ LISP       | one         | multiple    | required    | no         |\n   | 6rd\
    \        | one         | multiple    | not needed  | no         |\n   | Conf.\
    \ tun. | one         | multiple    | not needed  | limited    |\n   | GRE    \
    \    | one         | multiple    | not needed  | limited    |\n   | Teredo   \
    \  | multiple    | one         | not needed  | yes (*)    |\n   | 6bed4      |\
    \ multiple    | multiple    | not needed  | yes        |\n   | 6a44       | multiple\
    \    | multiple    | not needed  | yes        |\n   | AYIYA      | multiple  \
    \  | multiple    | not needed  | yes        |\n   | SEAL       | multiple    |\
    \ multiple    | not needed  | yes        |\n   +------------+-------------+-------------+-------------+------------+\n\
    \                   Tunneled IPv6 Hosts per IPv4 Address\n   (*) Although Teredo\
    \ is designed for NAT compatibility, it doesn't\n       work through all existing\
    \ NATs.\n"
- title: 6.2.  Supported Network Topologies
  contents:
  - "6.2.  Supported Network Topologies\n   There are two ways to use an IPv6-in-IPv4\
    \ tunnel to connect to the\n   IPv6 Internet: using a point-to-point tunnel to\
    \ a tunnel broker or an\n   ISP-operated gateway, or using a Non-Broadcast Multi-Access\
    \ (NBMA)\n   tunnel and anycasted public gateways or relays.\n   The advantages\
    \ of the point-to-point model are predictable\n   performance and flexibility\
    \ regarding the IPv6 addresses used.  The\n   advantage of the NBMA model is that\
    \ traffic between two hosts or\n   networks that both use the mechanism can flow\
    \ directly without\n   passing through a gateway (direct peer-to-peer communication).\
    \  An\n   extra advantage of the NBMA model with public gateways is automatic\n\
    \   configuration and no involvement from an ISP.\n   Unfortunately, the advantages\
    \ of this NBMA public anycast model come\n   at a price: both the peer-to-peer\
    \ connectivity between tunnel users\n   and the connectivity towards the native\
    \ IPv6 Internet may suffer from\n   reliability and performance issues.\n   The\
    \ anycast mechanism allows tunnel users to utilise the nearest\n   gateway to\
    \ connect to the IPv6 Internet by simply giving each gateway\n   the same address.\
    \  Routing protocols then select the lowest-cost (and\n   presumably, shortest)\
    \ path towards a gateway.  However, this makes\n   the path taken by tunneled\
    \ packets hard to predict or influence.  It\n   is common for traffic in two directions\
    \ to use different gateways,\n   complicating debugging even further.  Because\
    \ nobody is in charge or\n   gets paid for operating a gateway, the number of\
    \ public gateways is\n   lower than would be ideal.  This increases the distance\
    \ to the\n   nearest gateway for some users.  There is also the possibility that\n\
    \   gateways encounter more traffic than they can handle.\n   The advantage of\
    \ a tunnel provided by an ISP or tunnel broker is that\n   there is a clear responsibility\
    \ for providing a good service with\n   well-maintained gateways.\n      +------------+---------------+--------------------------------+\n\
    \      | Mechanism  | Peer-to-peer  | Gateway provided by            |\n     \
    \ +------------+---------------+--------------------------------+\n      | Conf.\
    \ tun. | No            | ISP or tunnel broker           |\n      | AYIYA     \
    \ | No            | ISP or tunnel broker           |\n      | GRE        | No\
    \            | N/A                            |\n      | 6a44       | Within domain\
    \ | ISP                            |\n      | 6rd        | Within domain | ISP\
    \                            |\n      | 6over4     | Globally      | N/A     \
    \                       |\n      | ISATAP     | Within domain | Own organisation\
    \               |\n      | Teredo     | Globally      | Public               \
    \          |\n      | 6to4       | Globally      | Public or ISP             \
    \     |\n      | 6bed4      | Globally      | Public or ISP or tunnel broker |\n\
    \      | Auto. tun. | Globally      | N/A                            |\n     \
    \ | LISP       | Configurable  | ISP or tunnel broker           |\n      | SEAL\
    \       | Configurable  | ISP or tunnel broker           |\n      +------------+---------------+--------------------------------+\n\
    \                 Topologies Supported per Tunnel Mechanism\n"
- title: 6.3.  Robustness
  contents:
  - "6.3.  Robustness\n   Tunnels may fail for three main reasons: when tunneled packets\
    \ are\n   filtered, typically by a firewall; when a tunnel endpoint IPv4\n   address\
    \ changes; or when tunneled packets are filtered or because of\n   NAT issues.\n\
    \   If a tunnel endpoint gets a new address, the other side of the tunnel\n  \
    \ needs to know to send packets to the new address.  With mechanisms\n   that\
    \ derive IPv6 addresses from the IPv4 address, the previous IPv6\n   addresses\
    \ become unreachable, and new IPv6 addresses must be\n   configured.\n   Some\
    \ tunnel mechanisms don't work through NAT, or are limited when\n   working through\
    \ NAT.  NAT mappings can typically only be created by\n   traffic from the \"\
    inside\" to the \"outside\", not by traffic from\n   outside the NAT to the network\
    \ behind the NAT.\n   Point-to-point tunnel mechanisms either work consistently\
    \ or they\n   always fail.  As such, a simple ping to the other side of the tunnel\n\
    \   is sufficient to learn its state.  Also, point-to-point tunnels may\n   support\
    \ routing protocols, which can automatically reroute traffic\n   around a failed\
    \ tunnel.\n   Some tunnel mechanisms use a public gateway to reach the native\
    \ IPv6\n   Internet.  Public gateways may or may not be operational and/or\n \
    \  reachable, and they may have limited performance, depending on\n   distance\
    \ and usage.\n   Tunnel mechanisms that use a broadcast or Non-Broadcast Multi-Access\n\
    \   (NBMA) communication model may experience failures between some\n   combinations\
    \ of tunnel endpoints and not others.\n   The following table lists tunnel mechanisms\
    \ that provide connectivity\n   to the IPv6 Internet in order of decreasing robustness.\
    \  (However,\n   even less-robust mechanisms may function well in suitable\n \
    \  environments.)\n   +------------+---------------+--------------------------------------+\n\
    \   | Mechanism  | Endpoint      | Main issues                          |\n  \
    \ |            | address       |                                      |\n   |\
    \            | change        |                                      |\n   +------------+---------------+--------------------------------------+\n\
    \   | LISP       | automatic     | None                                 |\n  \
    \ | 6rd        | interrupt     | None                                 |\n   |\
    \ AYIYA      | automatic     | Transient NAT mapping issues         |\n   | Conf.\
    \ +    | interrupt     | Proto 41 filtering, competition for  |\n   |  Heartbeat\
    \ |               | NAT mappings (1)                     |\n   | Conf. tun. |\
    \ failure       | Proto 41 filtering, competition for  |\n   |            |  \
    \             | NAT mappings, address change (1)     |\n   | GRE        | failure\
    \       | Proto 47 filtering, address change   |\n   | 6a44       | interrupt\
    \     | NAT mapping towards peers            |\n   | 6bed4      | interrupt  \
    \   | NAT mapping towards peers            |\n   | 6to4       | interrupt    \
    \ | Enabled out of the box but filtered, |\n   |            |               |\
    \ gateway performance (2)              |\n   | Teredo     | interrupt     | NAT\
    \ compatibility, mapping towards   |\n   |            |               | peers\
    \ (3)                            |\n   +------------+---------------+--------------------------------------+\n\
    \              Susceptibility of Tunnel Mechanisms to Problems\n   Notes:\n  \
    \ (1):  Only one protocol 41 tunnel endpoint can receive a NAT mapping\n     \
    \    behind a NAT using a single public IPv4 address.  Additional\n         endpoints\
    \ will not receive incoming packets.  When a tunnel\n         endpoint changes\
    \ its internal address, the old NAT mapping\n         needs to time out before\
    \ a new one can be created.\n   (2):  6to4 implementations automatically disable\
    \ the mechanism when\n         the system has an RFC 1918 address.  However, 6to4\
    \ may remain\n         enabled and be non-operational when ISPs apply NAT using\n\
    \         addresses that are not as defined in RFC 1918 [RFC6598].\n   (3):  Whether\
    \ Teredo can obtain an address depends on the type of NAT\n         it detects.\
    \  Whether Teredo functions at such an address\n         depends on the accuracy\
    \ of that determination, which is founded\n         on an incomplete model of\
    \ NAT.\n   On some widely used implementations, 6to4 has been enabled by default\n\
    \   without checking whether there was connectivity to the anycasted\n   public\
    \ gateway address.  As a result, 6to4-derived connectivity to\n   the IPv6 Internet\
    \ was often found to be broken because of protocol 41\n   filtering.  Because\
    \ of this, many operating systems now try to avoid\n   using IPv6 over 6to4. \
    \ See [RFC6343].\n   Also see [TERTST] for more information about the robustness\
    \ of\n   Teredo.\n   There is not a single tunnel mechanism that is more robust\
    \ in all\n   possible ways than every other tunnel mechanism.  However, in\n \
    \  general, mechanisms that use public gateways and peer-to-peer\n   tunneling\
    \ tend to have the most issues.  Configured tunnels, on the\n   other hand, often\
    \ work very well, especially if there is no NAT on\n   the path, but they may\
    \ need administrative intervention when a tunnel\n   endpoint address changes.\n"
- title: 6.4.  Gateway State
  contents:
  - "6.4.  Gateway State\n   There is an additional consideration that is important\
    \ to operators\n   of gateways that connect IPv6-in-IPv4 tunnels to the IPv6 Internet:\n\
    \   how much state a tunnel mechanism requires.\n   6to4, 6rd, 6a44 and 6bed4\
    \ require no state at all: when encapsulating\n   IPv6 packets inside an IPv4\
    \ packet, the IPv4 destination address is\n   directly copied from bits in the\
    \ IPv6 destination address.  This\n   makes all possible tunneled destinations\
    \ directly reachable through a\n   single virtual interface.\n   Teredo relays\
    \ maintain a list of peers and are intended to service a\n   limited number of\
    \ hosts.  The Teredo server, however, is a stateless\n   gateway component.\n\
    \   With configured tunnels, GRE, AYIYA, and SEAL, there is no direct\n   mapping\
    \ from (part of) the IPv6 destination address to the IPv4\n   destination address.\
    \  A typical implementation of these mechanisms\n   has a virtual tunnel interface\
    \ for each tunnel.  Packets are\n   forwarded to the correct virtual interface\
    \ through a routing table\n   lookup.  Routing tables can grow very large and\
    \ remain fast, so the\n   number of virtual interfaces tends to be the limiting\
    \ factor for\n   tunnel gateways.  AYIYA and the SixXS Heartbeat Protocol also\
    \ keep\n   track of the reachability status of each tunnel.\n"
- title: 6.5.  Performance
  contents:
  - "6.5.  Performance\n   There are several reasons why tunneled connectivity may\
    \ perform\n   inferior to native, untunneled connectivity.  Inherently, tunnels\
    \ add\n   one or more extra headers, and therefore increase overhead.  However,\n\
    \   for an Ethernet packet of maximum size (1500 bytes), the additional\n   overhead\
    \ of an IPv4 header is only 1.3%.\n   The process of encapsulation is not inherently\
    \ slow, but in some\n   implementations, it may be.  Larger routers that normally\
    \ forward\n   packets using special-purpose hardware often don't have high-\n\
    \   performance CPUs.  If tunnel encapsulation must then be done by that\n   relatively\
    \ slow CPU, performance will be worse than regular hardware-\n   based packet\
    \ forwarding.\n   The path that tunneled packets take can be longer than the path\
    \ that\n   untunneled packets would take (i.e., increased path stretch can\n \
    \  occur).  This may or may not lead to decreased performance.\n   +------------+-----------------+----------------------+-------------+\n\
    \   | Mechanism  | Overhead        | Increased path       | Variability |\n  \
    \ |            | (bytes)         | stretch              |             |\n   +------------+-----------------+----------------------+-------------+\n\
    \   | Conf. tun. | 20              | may be large         | none        |\n  \
    \ | Auto. tun. | 20              | none                 | none        |\n   |\
    \ 6over4     | 20              | none                 | none        |\n   | GRE\
    \        | 28 - 36         | may be large         | none        |\n   | 6to4 \
    \      | 20              | may be large         | high        |\n   | AYIYA  \
    \    | 72              | may be large         | low         |\n   | ISATAP   \
    \  | 20              | none                 | none        |\n   | Teredo     |\
    \ 28 - 36         | may be large         | high        |\n   | 6rd        | 20\
    \              | small                | low         |\n   | 6a44       | 20 -\
    \ 28         | small                | low         |\n   | 6bed4      | 28    \
    \          | may be large         | high        |\n   | LISP       | 36      \
    \        | small                | low         |\n   | SEAL       | 24 - variable\
    \   | small                | low         |\n   +------------+-----------------+----------------------+-------------+\n\
    \                        Typical Tunnel Performance\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   There are many security considerations with tunneling.\
    \  An important\n   one is that through a tunnel, connectivity to the IPv6 Internet\
    \ may\n   exist even though network administrators did not intend for it to be\n\
    \   there.  \"Security Concerns with IP Tunneling\" [RFC6169] discusses\n   this\
    \ issue in detail.\n   Although, in principle, ingress filtering (BCP 38, [RFC2827])\
    \ is\n   possible with tunnels, in practice, it is relatively easy for spoofed\n\
    \   packets to make their way through a tunnel.  Not only is it often\n   easy\
    \ to spoof the outer IPv4 header and make false IPv6 packets seem\n   to originate\
    \ from a tunnel broker or gateway, it may also be possible\n   for an attacker\
    \ to route false IPv6 packets through a legitimate\n   tunnel broker or gateway.\
    \  Many tunneling protocols have various\n   means of detecting and rejecting\
    \ such packets, while others have\n   limited or no such provisions.  For instance,\
    \ see [RFC3964] for how\n   this can be addressed with 6to4.\n   So it is important\
    \ to recognise that unless special measures are\n   taken (like [RFC4301]), both\
    \ IPv4 and IPv6 addresses in tunnel\n   packets may be spoofed and cannot be relied\
    \ upon for access controls.\n   Such spoofing was used successfully to discover\
    \ IPv6-in-IPv4 tunnels\n   in [TUNDISC].\n   Tunnels may also be used by third\
    \ parties to obfuscate their\n   activities or perform amplification attacks.\
    \  To avoid contributing\n   to this problem, it is important to make sure only\
    \ locally generated\n   packets with legitimate addresses are sent out over tunnels.\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   Job Snijders contributed text to the points of comparison.\
    \  Fred\n   Templin provided the text for SEAL and contributed to the security\n\
    \   considerations.  Jeroen Massar, Brian Carpenter, Tina Tsou, John\n   Mann,\
    \ Suresh Krishnan, Victor Kuarsingh, Dan Jones, Nejc Skoberne,\n   and Fred Baker\
    \ reviewed the document and/or offered suggestions for\n   improvement.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   We wish to thank SURFnet and Rogier Spoor for commissioning\
    \ this\n   work; both their initiative and funding have helped this document to\n\
    \   be written.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [6BED4]     Van Rein, R., \"6bed4: Peer-to-Peer\
    \ IPv6 on Any\n               Internetwork\", Work in Progress, July 2013.\n \
    \  [AICCU]     SixXS, \"Automatic IPv6 Connectivity Client Utility\n         \
    \      (AICCU)\", <http://www.sixxs.net/tools/aiccu/>.\n   [AYIYA]     SixXS,\
    \ \"Anything In Anything (AYIYA)\",\n               <http://www.sixxs.net/tools/ayiya/>.\n\
    \   [GOGO6]     gogo6, \"Freenet6: Free and Easy IPv6 Connectivity\",\n      \
    \         <http://www.gogo6.com/freenet6>.\n   [HEARTBEAT] Massar, J., \"SixXS\
    \ Heartbeat Protocol\", Work in Progress,\n               June 2005.\n   [LISPBETA]\
    \  LISP4/LISP6.net, \"LISP Beta Network\",\n               <http://www.lisp4.net/beta-network/>.\n\
    \   [MAP]       Troan, O., Dec, W., Li, X., Bao, C., Matsushima, S.,\n       \
    \        Murakami, T., and T. Taylor, \"Mapping of Address and Port\n        \
    \       with Encapsulation (MAP)\", Work in Progress, August 2013.\n   [MASSAR]\
    \    Massar, J., \"AYIYA: Anything In Anything\", Work in\n               Progress,\
    \ July 2004.\n   [RFC1191]   Mogul, J. and S. Deering, \"Path MTU discovery\"\
    , RFC 1191,\n               November 1990.\n   [RFC1918]   Rekhter, Y., Moskowitz,\
    \ R., Karrenberg, D., Groot, G.,\n               and E. Lear, \"Address Allocation\
    \ for Private Internets\",\n               BCP 5, RFC 1918, February 1996.\n \
    \  [RFC1933]   Gilligan, R. and E. Nordmark, \"Transition Mechanisms for\n   \
    \            IPv6 Hosts and Routers\", RFC 1933, April 1996.\n   [RFC1981]   McCann,\
    \ J., Deering, S., and J. Mogul, \"Path MTU\n               Discovery for IP version\
    \ 6\", RFC 1981, August 1996.\n   [RFC2516]   Mamakos, L., Lidl, K., Evarts, J.,\
    \ Carrel, D., Simone,\n               D., and R. Wheeler, \"A Method for Transmitting\
    \ PPP Over\n               Ethernet (PPPoE)\", RFC 2516, February 1999.\n   [RFC2529]\
    \   Carpenter, B. and C. Jung, \"Transmission of IPv6 over\n               IPv4\
    \ Domains without Explicit Tunnels\", RFC 2529,\n               March 1999.\n\
    \   [RFC2663]   Srisuresh, P. and M. Holdrege, \"IP Network Address\n        \
    \       Translator (NAT) Terminology and Considerations\",\n               RFC\
    \ 2663, August 1999.\n   [RFC2784]   Farinacci, D., Li, T., Hanks, S., Meyer,\
    \ D., and P.\n               Traina, \"Generic Routing Encapsulation (GRE)\",\
    \ RFC 2784,\n               March 2000.\n   [RFC2827]   Ferguson, P. and D. Senie,\
    \ \"Network Ingress Filtering:\n               Defeating Denial of Service Attacks\
    \ which employ IP\n               Source Address Spoofing\", BCP 38, RFC 2827,\
    \ May 2000.\n   [RFC2893]   Gilligan, R. and E. Nordmark, \"Transition Mechanisms\
    \ for\n               IPv6 Hosts and Routers\", RFC 2893, August 2000.\n   [RFC3056]\
    \   Carpenter, B. and K. Moore, \"Connection of IPv6 Domains\n               via\
    \ IPv4 Clouds\", RFC 3056, February 2001.\n   [RFC3068]   Huitema, C., \"An Anycast\
    \ Prefix for 6to4 Relay Routers\",\n               RFC 3068, June 2001.\n   [RFC3489]\
    \   Rosenberg, J., Weinberger, J., Huitema, C., and R. Mahy,\n               \"\
    STUN - Simple Traversal of User Datagram Protocol (UDP)\n               Through\
    \ Network Address Translators (NATs)\", RFC 3489,\n               March 2003.\n\
    \   [RFC3964]   Savola, P. and C. Patel, \"Security Considerations for\n     \
    \          6to4\", RFC 3964, December 2004.\n   [RFC4213]   Nordmark, E. and R.\
    \ Gilligan, \"Basic Transition\n               Mechanisms for IPv6 Hosts and Routers\"\
    , RFC 4213,\n               October 2005.\n   [RFC4301]   Kent, S. and K. Seo,\
    \ \"Security Architecture for the\n               Internet Protocol\", RFC 4301,\
    \ December 2005.\n   [RFC4380]   Huitema, C., \"Teredo: Tunneling IPv6 over UDP\
    \ through\n               Network Address Translations (NATs)\", RFC 4380,\n \
    \              February 2006.\n   [RFC4787]   Audet, F. and C. Jennings, \"Network\
    \ Address Translation\n               (NAT) Behavioral Requirements for Unicast\
    \ UDP\", BCP 127,\n               RFC 4787, January 2007.\n   [RFC4861]   Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n               \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n               September 2007.\n   [RFC4862]\
    \   Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n               Address\
    \ Autoconfiguration\", RFC 4862, September 2007.\n   [RFC4891]   Graveman, R.,\
    \ Parthasarathy, M., Savola, P., and H.\n               Tschofenig, \"Using IPsec\
    \ to Secure IPv6-in-IPv4 Tunnels\",\n               RFC 4891, May 2007.\n   [RFC5214]\
    \   Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n               Automatic\
    \ Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n               March 2008.\n\
    \   [RFC5389]   Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n        \
    \       \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n          \
    \     October 2008.\n   [RFC5572]   Blanchet, M. and F. Parent, \"IPv6 Tunnel\
    \ Broker with the\n               Tunnel Setup Protocol (TSP)\", RFC 5572, February\
    \ 2010.\n   [RFC5969]   Townsley, W. and O. Troan, \"IPv6 Rapid Deployment on\
    \ IPv4\n               Infrastructures (6rd) -- Protocol Specification\",\n  \
    \             RFC 5969, August 2010.\n   [RFC6145]   Li, X., Bao, C., and F. Baker,\
    \ \"IP/ICMP Translation\n               Algorithm\", RFC 6145, April 2011.\n \
    \  [RFC6169]   Krishnan, S., Thaler, D., and J. Hoagland, \"Security\n       \
    \        Concerns with IP Tunneling\", RFC 6169, April 2011.\n   [RFC6333]   Durand,\
    \ A., Droms, R., Woodyatt, J., and Y. Lee, \"Dual-\n               Stack Lite\
    \ Broadband Deployments Following IPv4\n               Exhaustion\", RFC 6333,\
    \ August 2011.\n   [RFC6343]   Carpenter, B., \"Advisory Guidelines for 6to4 Deployment\"\
    ,\n               RFC 6343, August 2011.\n   [RFC6598]   Weil, J., Kuarsingh,\
    \ V., Donley, C., Liljenstolpe, C.,\n               and M. Azinger, \"IANA-Reserved\
    \ IPv4 Prefix for Shared\n               Address Space\", BCP 153, RFC 6598, April\
    \ 2012.\n   [RFC6724]   Thaler, D., Draves, R., Matsumoto, A., and T. Chown,\n\
    \               \"Default Address Selection for Internet Protocol Version\n  \
    \             6 (IPv6)\", RFC 6724, September 2012.\n   [RFC6732]   Kuarsingh,\
    \ V., Lee, Y., and O. Vautrin, \"6to4 Provider\n               Managed Tunnels\"\
    , RFC 6732, September 2012.\n   [RFC6751]   Despres, R., Carpenter, B., Wing,\
    \ D., and S. Jiang,\n               \"Native IPv6 behind IPv4-to-IPv4 NAT Customer\
    \ Premises\n               Equipment (6a44)\", RFC 6751, October 2012.\n   [RFC6830]\
    \   Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The\n              \
    \ Locator/ID Separation Protocol (LISP)\", RFC 6830,\n               January 2013.\n\
    \   [RFC6832]   Lewis, D., Meyer, D., Farinacci, D., and V. Fuller,\n        \
    \       \"Interworking between Locator/ID Separation Protocol\n              \
    \ (LISP) and Non-LISP Sites\", RFC 6832, January 2013.\n   [RFC6833]   Fuller,\
    \ V. and D. Farinacci, \"Locator/ID Separation\n               Protocol (LISP)\
    \ Map-Server Interface\", RFC 6833,\n               January 2013.\n   [SEAL] \
    \     Templin, F., \"The Subnetwork Encapsulation and Adaptation\n           \
    \    Layer (SEAL)\", Work in Progress, October 2013.\n   [SIXXS]     Massar, J.\
    \ and P. van Pelt, \"IPv6 Deployment & Tunnel\n               Broker\", <http://www.sixxs.net/>.\n\
    \   [TERTST]    Huston, G., \"Testing Teredo\", April 2011,\n               <http://www.potaroo.net/ispcol/2011-04/teredo.html>.\n\
    \   [TIC]       SixXS, \"Tunnel Information and Control protocol (TIC)\",\n  \
    \             <http://www.sixxs.net/tools/tic/>.\n   [TR-069]    The Broadband\
    \ Forum, \"CPE WAN Management Protocol\",\n               July 2011, <http://www.broadband-forum.org/technical/\n\
    \               download/TR-069_Amendment-4.pdf>.\n   [TUNBROKER] Hurricane Electric,\
    \ \"Hurricane Electric Free IPv6 Tunnel\n               Broker\", <http://www.tunnelbroker.net/>.\n\
    \   [TUNDISC]   Colitti, L., Di Battista, G., and M. Patrignani,\n           \
    \    \"IPv6-in-IPv4 tunnel discovery: methods and experimental\n             \
    \  results\", IEEE eTransactions on Network and Service\n               Management\
    \ (eTNSM), vol. 1, no. 1, p. 2-10, April 2004.\n"
- title: Appendix A.  Evaluation Criteria
  contents:
  - "Appendix A.  Evaluation Criteria\n   Each type of tunnel has specific advantages\
    \ and disadvantages.  We\n   have considered the following points when evaluating\
    \ the different\n   protocols.  Not every point is mentioned in each section where\
    \ a\n   protocol is described, only those that are specifically relevant to\n\
    \   that protocol.\n   Protocol overhead:  How much overhead does the tunneling\
    \ protocol\n      cause?  There are two factors that play a role: the number of\n\
    \      interactions to set up the tunnel and the packet header size\n      causing\
    \ a lower MTU and/or fragmentation.\n   Automatic configuration:  Does this protocol\
    \ require manual\n      configuration at the endpoints?\n   Predictability:  How\
    \ predictable is the functioning of the protocol?\n   Single host or network:\
    \  Is this protocol intended to be used by a\n      single host or by a router\
    \ that then provides IPv6 connectivity to\n      multiple hosts?\n   Load balancing:\
    \  Does the tunnel traffic have enough entropy and/or\n      \"hashability\" to\
    \ be able to be load-balanced over multiple links,\n      or do all tunnel packets\
    \ have the same outer 5-tuple?\n   Path stretch:  Does the tunnel optimise the\
    \ route, or is there a big\n      potential for a much longer path when using\
    \ the tunnel?\n   NAT traversal:  Can the tunnel pass through a NAT gateway, and\
    \ does\n      it require configuration on that NAT gateway?\n   Tunnel endpoint\
    \ mobility:  Are the IPv4 addresses of the tunnel\n      fixed, or do they adjust\
    \ automatically when an endpoint moves?\n   State:  Are the endpoints required\
    \ to keep state for the tunnel, or\n      is the tunnel stateless?\n   Network\
    \ type:  Is this network a point-to-point or NBMA type of\n      network?\n  \
    \ Purpose:  What is the intended purpose of this tunnel protocol?\n   Related\
    \ protocols:  To which protocols is this tunnel protocol\n      related?  Are\
    \ there alternatives?\n   Implementations:  Is this protocol supported on the\
    \ major operating\n      systems, routers, and firewalls?\n   Limitations:  What\
    \ are the known limitations of this protocol?\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sander Steffann\n   S.J.M. Steffann Consultancy\n   Tienwoningenweg\
    \ 46\n   Apeldoorn, Gelderland  7312 DN\n   The Netherlands\n   EMail: sander@steffann.nl\n\
    \   Iljitsch van Beijnum\n   Institute IMDEA Networks\n   Avda. del Mar Mediterraneo,\
    \ 22\n   Leganes, Madrid  28918\n   Spain\n   EMail: iljitsch@muada.com\n   Rick\
    \ van Rein\n   OpenFortress\n   Haarlebrink 5\n   Enschede, Overijssel  7544 WP\n\
    \   The Netherlands\n   EMail: rick@openfortress.nl\n"
