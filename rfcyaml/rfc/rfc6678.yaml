- title: __initial_text__
  contents:
  - "                           Requirements for a\n      Tunnel-Based Extensible\
    \ Authentication Protocol (EAP) Method\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines the requirements for a tunnel-based Extensible\n\
    \   Authentication Protocol (EAP) Method.  This tunnel method will use\n   Transport\
    \ Layer Security (TLS) to establish a secure tunnel.  The\n   tunnel will provide\
    \ support for password authentication, EAP\n   authentication, and the transport\
    \ of additional data for other\n   purposes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6678.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  4\n   3.  Use Cases  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  Password Authentication  . . . . . . . . . . . . . .\
    \ . . .  5\n     3.2.  Protection of Weak EAP Methods . . . . . . . . . . . .\
    \ . .  5\n     3.3.  Chained EAP Methods  . . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.4.  Identity Protection  . . . . . . . . . . . . . . . . . . .\
    \  6\n     3.5.  Anonymous Service Access . . . . . . . . . . . . . . . . .  7\n\
    \     3.6.  Network Endpoint Assessment  . . . . . . . . . . . . . . .  7\n  \
    \   3.7.  Client Authentication during Tunnel Establishment  . . . .  7\n    \
    \ 3.8.  Extensibility  . . . . . . . . . . . . . . . . . . . . . .  8\n     3.9.\
    \  Certificate-Less Authentication and Generic EAP Method\n           Extension\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.  Requirements . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  9\n     4.1.  General Requirements\
    \ . . . . . . . . . . . . . . . . . . .  9\n       4.1.1.  RFC Compliance . .\
    \ . . . . . . . . . . . . . . . . . .  9\n     4.2.  Tunnel Requirements  . .\
    \ . . . . . . . . . . . . . . . . . 10\n       4.2.1.  TLS Requirements . . .\
    \ . . . . . . . . . . . . . . . . 10\n         4.2.1.1.  Cipher Suites  . . .\
    \ . . . . . . . . . . . . . . . 10\n           4.2.1.1.1.  Cipher Suite Negotiation\
    \ . . . . . . . . . . . 10\n           4.2.1.1.2.  Tunnel Data Protection Algorithms\
    \  . . . . . . 10\n           4.2.1.1.3.  Tunnel Authentication and Key Establishment\
    \  . 11\n         4.2.1.2.  Tunnel Replay Protection . . . . . . . . . . . . .\
    \ 11\n         4.2.1.3.  TLS Extensions . . . . . . . . . . . . . . . . . . 11\n\
    \         4.2.1.4.  Peer Identity Privacy  . . . . . . . . . . . . . . 11\n  \
    \       4.2.1.5.  Session Resumption . . . . . . . . . . . . . . . . 12\n    \
    \   4.2.2.  Fragmentation  . . . . . . . . . . . . . . . . . . . . 12\n      \
    \ 4.2.3.  Protection of Data External to Tunnel  . . . . . . . . 12\n     4.3.\
    \  Tunnel Payload Requirements  . . . . . . . . . . . . . . . 12\n       4.3.1.\
    \  Extensible Attribute Types . . . . . . . . . . . . . . 12\n       4.3.2.  Request/Challenge\
    \ Response Operation . . . . . . . . . 13\n       4.3.3.  Indicating Criticality\
    \ of Attributes . . . . . . . . . 13\n       4.3.4.  Vendor-Specific Support \
    \ . . . . . . . . . . . . . . . 13\n       4.3.5.  Result Indication  . . . .\
    \ . . . . . . . . . . . . . . 13\n       4.3.6.  Internationalization of Display\
    \ Strings  . . . . . . . 13\n     4.4.  EAP Channel Binding Requirements . . .\
    \ . . . . . . . . . . 14\n     4.5.  Requirements Associated with Carrying Username\
    \ and\n           Passwords  . . . . . . . . . . . . . . . . . . . . . . . . 14\n\
    \       4.5.1.  Security . . . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \       4.5.1.1.  Confidentiality and Integrity  . . . . . . . . . . 14\n    \
    \     4.5.1.2.  Authentication of Server . . . . . . . . . . . . . 14\n      \
    \   4.5.1.3.  Server Certificate Revocation Checking . . . . . . 14\n       4.5.2.\
    \  Internationalization . . . . . . . . . . . . . . . . . 15\n       4.5.3.  Metadata\
    \ . . . . . . . . . . . . . . . . . . . . . . . 15\n       4.5.4.  Password Change\
    \  . . . . . . . . . . . . . . . . . . . 15\n     4.6.  Requirements Associated\
    \ with Carrying EAP Methods  . . . . 15\n       4.6.1.  Method Negotiation . .\
    \ . . . . . . . . . . . . . . . . 16\n       4.6.2.  Chained Methods  . . . .\
    \ . . . . . . . . . . . . . . . 16\n       4.6.3.  Cryptographic Binding with\
    \ the TLS Tunnel  . . . . . . 16\n       4.6.4.  Peer-Initiated EAP Authentication\
    \  . . . . . . . . . . 17\n       4.6.5.  Method Metadata  . . . . . . . . . .\
    \ . . . . . . . . . 17\n   5.  Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 18\n     5.1.  Cipher Suite Selection . . . . . . . . . . .\
    \ . . . . . . . 18\n     5.2.  Tunneled Authentication  . . . . . . . . . . .\
    \ . . . . . . 19\n     5.3.  Data External to Tunnel  . . . . . . . . . . . .\
    \ . . . . . 19\n     5.4.  Separation of TLS Tunnel and Inner Authentication\n\
    \           Termination  . . . . . . . . . . . . . . . . . . . . . . . 19\n  \
    \ 6.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n    \
    \ 6.1.  Normative References . . . . . . . . . . . . . . . . . . . 20\n     6.2.\
    \  Informative References . . . . . . . . . . . . . . . . . . 21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   An Extensible Authentication Protocol (EAP) tunnel method\
    \ is an EAP\n   method that establishes a secure tunnel and executes other EAP\n\
    \   methods under the protection of that secure tunnel.  An EAP tunnel\n   method\
    \ can be used in any lower-layer protocol that supports EAP\n   authentication.\
    \  There are several existing EAP tunnel methods that\n   use Transport Layer\
    \ Security (TLS) to establish the secure tunnel.\n   EAP methods supporting this\
    \ include Protected EAP [PEAP], Tunneled\n   Transport Layer Security EAP (TTLS)\
    \ [RFC5281] and EAP Flexible\n   Authentication via Secure Tunneling (EAP-FAST)\
    \ [RFC4851].  In\n   general, this has worked well so there is consensus to continue\
    \ to\n   use TLS as the basis for a tunnel method.  There have been various\n\
    \   reasons for employing a protected tunnel for EAP processes.  They\n   include\
    \ protecting weak authentication exchanges, such as username\n   and password.\
    \  In addition, a protected tunnel can provide means to\n   provide peer identity\
    \ protection and EAP method chaining.  Finally,\n   systems have found it useful\
    \ to transport additional types of data\n   within the protected tunnel.\n   This\
    \ document describes the requirements for a EAP tunnel method as\n   well as for\
    \ a password protocol supporting legacy password\n   verification within the tunnel\
    \ method.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   Use of each capitalized word within\
    \ a sentence or phrase carries the\n   following meaning during the EAP Method\
    \ Update (EMU) WG's method\n   selection process:\n      MUST - indicates an absolute\
    \ requirement\n      MUST NOT - indicates something absolutely prohibited\n  \
    \    SHOULD - indicates a strong recommendation of a desired result\n      SHOULD\
    \ NOT - indicates a strong recommendation against a result\n      MAY - indicates\
    \ a willingness to allow an optional outcome\n   Lowercase uses of \"MUST\", \"\
    MUST NOT\", \"SHOULD\", \"SHOULD NOT\" and\n   \"MAY\" carry their normal meaning\
    \ and are not subject to these\n   definitions.\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   To motivate and explain the requirements in this document,\
    \ a\n   representative set of use cases for the EAP tunnel method are\n   supplied\
    \ here.  It is mandatory for a candidate tunnel method to\n   support all of the\
    \ use cases that are marked below as \"MUST\".\n"
- title: 3.1.  Password Authentication
  contents:
  - "3.1.  Password Authentication\n   Many legacy systems only support user authentication\
    \ with passwords.\n   Some of these systems require transport of the actual username\
    \ and\n   password to the authentication server.  This is true for systems\n \
    \  where the authentication server does not have access to the cleartext\n   password\
    \ or a consistent transform of the cleartext password.\n   Examples of such systems\
    \ are some one-time password (OTP) systems and\n   other systems where the username\
    \ and password are submitted to an\n   external party for validation.  The tunnel\
    \ method MUST support\n   transporting cleartext username and password to the\
    \ EAP server.  It\n   MUST NOT reveal information about the username and password\
    \ to\n   parties in the communication path between the peer and the EAP\n   server.\
    \  The advantage any attacker gains against the tunnel method\n   when employing\
    \ a username and password for authentication MUST be\n   through interaction and\
    \ not computation.  The tunnel MUST support\n   protection from man-in-the-middle\
    \ attacks.  The combination of the\n   tunnel authentication and password authentication\
    \ MUST enable mutual\n   authentication.\n   Since EAP authentication occurs before\
    \ network access is granted the\n   tunnel method SHOULD enable an inner exchange\
    \ to provide support for\n   minimal password management tasks including password\
    \ change, \"new PIN\n   mode\", and \"next token mode\" required by some systems.\n"
- title: 3.2.  Protection of Weak EAP Methods
  contents:
  - "3.2.  Protection of Weak EAP Methods\n   Some existing EAP methods have vulnerabilities\
    \ that could be\n   eliminated or reduced by running them inside a protected tunnel.\
    \  For\n   example, an EAP-MD5 method does not provide mutual authentication or\n\
    \   protection from dictionary attacks.  Without extra protection, EAP\n   tunnel\
    \ methods are vulnerable to a special type of tunnel man-in-the-\n   middle (MitM)\
    \ attack [TUNNEL-MITM].  This attack is referred to as\n   \"tunnel MitM attack\"\
    \ in the remainder of this document.  The\n   additional protection needed to\
    \ thwart tunnel MitM attacks depends on\n   the inner method executed within the\
    \ tunnel.  When weak methods are\n   used, these attacks can be mitigated via\
    \ security policies that\n   require the method to be used only within a tunnel.\
    \  On the other\n   hand, a technical solution (so-called cryptographic bindings)\
    \ can be\n   used whenever the inner method derives key material and is not\n\
    \   susceptible to attacks outside a tunnel.  Only the latter mitigation\n   technique\
    \ can be made an actual requirement for EAP tunnel methods\n   (see Section 4.6.3),\
    \ while security policies are outside the scope of\n   this requirement document.\
    \  Please refer to the NIST \"Recommendation\n   for EAP Methods Used in Wireless\
    \ Network Access Authentication\"\n   [NIST-SP-800-120] and [LCN-2010] for a discussion\
    \ on security\n   policies and complete solutions for thwarting tunnel MitM attacks.\n\
    \   The tunnel method MUST support protection of weak EAP methods.\n   Cryptographic\
    \ protection from tunnel MitM attacks MUST be provided\n   for all key-generating\
    \ methods.  In combination with an appropriate\n   security policy this will thwart\
    \ MitM attacks against inner methods.\n"
- title: 3.3.  Chained EAP Methods
  contents:
  - "3.3.  Chained EAP Methods\n   Several circumstances are best addressed by using\
    \ chained EAP\n   methods.  For example, it may be desirable to authenticate the\
    \ user\n   and also authenticate the device being used.  However, chained EAP\n\
    \   methods from different conversations can be redirected into the same\n   conversation\
    \ by an attacker giving the authenticator the impression\n   that both conversations\
    \ terminate at the same endpoint.\n   Cryptographic binding can be used to bind\
    \ the results of chained key-\n   generating methods together or to an encompassing\
    \ tunnel.\n   The tunnel method MUST support chained EAP methods while including\n\
    \   protection against attacks on method chaining.\n"
- title: 3.4.  Identity Protection
  contents:
  - "3.4.  Identity Protection\n   When performing an EAP authentication, the peer\
    \ may want to protect\n   its identity and only disclose it to a trusted EAP server.\
    \  This\n   helps to maintain peer privacy.\n   The tunnel method MUST support\
    \ identity protection, therefore the\n   identity of the peer used for authentication\
    \ purposes MUST NOT be\n   obtainable by any entity other than the EAP server\
    \ terminating the\n   tunnel method.  Peer identity protection provided by the\
    \ tunnel\n   method applies to the identities that are specific to the tunnel\n\
    \   method and inner method being used.  In a roaming scenario, note that\n  \
    \ the peer may need to expose the realm portion of the EAP outer\n   identity\
    \ in the Network Access Identifier (NAI) [RFC4282] in order to\n   reach the appropriate\
    \ authentication server.\n"
- title: 3.5.  Anonymous Service Access
  contents:
  - "3.5.  Anonymous Service Access\n   When network service is provided, it is sometimes\
    \ desirable for a\n   user to gain network access in order to access limited services\
    \ for\n   emergency communication or troubleshooting information.  To avoid\n\
    \   eavesdropping, it's best to negotiate link-layer security as with any\n  \
    \ other authentication.\n   Therefore, the tunnel method SHOULD allow anonymous\
    \ peers or server-\n   only authentication, while still deriving keys that can\
    \ be used for\n   link-layer security.  The tunnel method MAY also allow for the\
    \ bypass\n   of server authentication processing on the client.\n   Foregoing\
    \ user or server authentication increases the chance of man-\n   in-the-middle\
    \ and other types of attacks that can compromise the\n   derived keys used for\
    \ link-layer security.  Therefore, passwords and\n   other sensitive information\
    \ MUST NOT be disclosed to an\n   unauthenticated server, or to a server that\
    \ is not authorized to\n   authenticate the user.\n"
- title: 3.6.  Network Endpoint Assessment
  contents:
  - "3.6.  Network Endpoint Assessment\n   The Network Endpoint Assessment (NEA) protocols\
    \ and reference model\n   described in [RFC5209] provide a standard way to check\
    \ the health\n   (\"posture\") of a device at or after the time it connects to\
    \ a\n   network.  If the device does not comply with the network's\n   requirements,\
    \ it can be denied access to the network or granted\n   limited access to remediate\
    \ itself.  EAP is a convenient place for\n   conducting an NEA exchange.\n   The\
    \ tunnel method SHOULD support carrying NEA protocols such as a\n   Posture Broker\
    \ protocol compatible with Trusted Network Connect\n   (PB-TNC) [RFC5793].  Depending\
    \ on the specifics of the tunnel method,\n   these protocols may be required to\
    \ be carried in an EAP method.\n"
- title: 3.7.  Client Authentication during Tunnel Establishment
  contents:
  - "3.7.  Client Authentication during Tunnel Establishment\n   In some cases, the\
    \ peer will have credentials that allow it to\n   authenticate during tunnel establishment.\
    \  These credentials may only\n   partially authenticate the identity of the peer\
    \ and additional\n   authentication may be required inside the tunnel.  For example,\
    \ a\n   communication device may be authenticated during tunnel\n   establishment;\
    \ in addition, user authentication may be required to\n   satisfy authentication\
    \ policy.  The tunnel method MUST be capable of\n   providing client-side authentication\
    \ during tunnel establishment.\n"
- title: 3.8.  Extensibility
  contents:
  - "3.8.  Extensibility\n   The tunnel method MUST provide extensibility so that\
    \ additional data\n   related to authentication, authorization, and network access\
    \ can be\n   carried inside the tunnel in the future.  This removes the need to\n\
    \   develop new tunneling methods for specific purposes.\n   An application for\
    \ extensibility is credential provisioning.  When a\n   peer has authenticated\
    \ with EAP, this is a convenient time to\n   distribute credentials to that peer\
    \ that may be used for later\n   authentication exchanges.  For example, the authentication\
    \ server can\n   provide a private key or shared key to the peer that can be used\
    \ by\n   the peer to perform rapid re-authentication or roaming.  In addition,\n\
    \   there have been proposals to perform enrollment within EAP, such as\n   [EAP-ENROLL].\
    \  Another use for extensibility is support for alternate\n   authentication frameworks\
    \ within the tunnel.\n"
- title: 3.9.  Certificate-Less Authentication and Generic EAP Method Extension
  contents:
  - "3.9.  Certificate-Less Authentication and Generic EAP Method Extension\n   In\
    \ some cases, the peer will not have a way to verify a server\n   certificate\
    \ and, in some cases, a server might not have a certificate\n   to verify.  Therefore,\
    \ it is desirable to support certificate-less\n   authentication.  An application\
    \ for this is credential provisioning\n   where the peer and server authenticate\
    \ each other with a shared\n   password and credentials for subsequent authentication\
    \ (e.g., a key\n   pair and certificate, or a shared key) can be passed inside\
    \ the\n   tunnel.  Another application is to extend existing EAP methods with\n\
    \   new features such as EAP channel bindings.\n   Great care must be taken when\
    \ using tunnels with no server\n   authentication for the protection of an inner\
    \ method.  For example,\n   the client may lack the appropriate trust roots to\
    \ fully authenticate\n   the server, but may still establish the tunnel to execute\
    \ an inner\n   EAP method to perform mutual authentication and key derivation.\
    \  In\n   these cases, the inner EAP method MUST provide resistance to\n   dictionary\
    \ attack and a cryptographic binding between the inner\n   method and the tunnel\
    \ method MUST be established.  Furthermore, the\n   cipher suite used to establish\
    \ the tunnel MUST derive the master key\n   using contributions from both client\
    \ and server, as in ephemeral\n   Diffie-Hellman cipher suites.\n   The tunnel\
    \ method MAY allow for certificate-less authentication.\n"
- title: 4.  Requirements
  contents:
  - '4.  Requirements

    '
- title: 4.1.  General Requirements
  contents:
  - '4.1.  General Requirements

    '
- title: 4.1.1.  RFC Compliance
  contents:
  - "4.1.1.  RFC Compliance\n   The tunnel method MUST include a Security Claims section\
    \ with all\n   security claims specified in Section 7.2 in RFC 3748 [RFC3748].\
    \  In\n   addition, it MUST meet the requirement in Sections 2.1 and 7.4 of RFC\n\
    \   3748 that tunnel methods MUST support protection against man-in-the-\n   middle\
    \ attacks.  Furthermore, the tunnel method MUST support identity\n   protection\
    \ as specified in Section 7.3 of RFC 3748.\n   The tunnel method MUST be unconditionally\
    \ compliant with RFC 4017\n   [RFC4017] (using the definition of \"unconditionally\
    \ compliant\"\n   contained in Section 1.1 of RFC 4017).  This means that the\
    \ method\n   MUST satisfy all the \"MUST\", \"MUST NOT\", \"SHOULD\", and \"SHOULD\
    \ NOT\"\n   requirements in RFC 4017.\n   The tunnel method MUST meet all the\
    \ \"MUST\" and \"SHOULD\" requirements\n   relevant to EAP methods contained in\
    \ the EAP key management framework\n   [RFC5247] or any successor.  This includes\
    \ the generation of the\n   Master Session Key (MSK), Extended Master Session\
    \ Key (EMSK),\n   Peer-Id, Server-Id, and Session-Id.  These requirements will\
    \ enable\n   the tunnel method to properly fit into the EAP key management\n \
    \  framework, maintaining all of the security properties and guarantees\n   of\
    \ that framework.\n   The tunnel method MUST NOT be tied to any single cryptographic\n\
    \   algorithm.  Instead, it MUST support run-time negotiation to select\n   among\
    \ an extensible set of cryptographic algorithms, such as\n   algorithms used with\
    \ certificates presented during tunnel\n   establishment.  This \"cryptographic\
    \ algorithm agility\" provides\n   several advantages.  Most important, when a\
    \ weakness in an algorithm\n   is discovered or increased processing power overtakes\
    \ an algorithm,\n   users can easily transition to a new algorithm.  Also, users\
    \ can\n   choose the algorithm that best meets their needs.\n   The tunnel method\
    \ MUST meet the SHOULD and MUST requirements\n   pertinent to EAP method contained\
    \ in Section 3 of RFC 4962 [RFC4962].\n   This includes: cryptographic algorithm\
    \ independence; strong, fresh\n   session keys; replay detection; keying material\
    \ confidentiality and\n   integrity; and confirmation of cipher suite selection.\n"
- title: 4.2.  Tunnel Requirements
  contents:
  - "4.2.  Tunnel Requirements\n   The following section discusses requirements for\
    \ TLS tunnel\n   establishment.\n"
- title: 4.2.1.  TLS Requirements
  contents:
  - "4.2.1.  TLS Requirements\n   The tunnel-based method MUST support TLS version\
    \ 1.2 [RFC5246] and\n   may support earlier versions greater than SSL 2.0 in order\
    \ to enable\n   the possibility of backwards compatibility.\n"
- title: 4.2.1.1.  Cipher Suites
  contents:
  - '4.2.1.1.  Cipher Suites

    '
- title: 4.2.1.1.1.  Cipher Suite Negotiation
  contents:
  - "4.2.1.1.1.  Cipher Suite Negotiation\n   Cipher suite negotiations always suffer\
    \ from downgrading attacks when\n   they are not secured by any kind of integrity\
    \ protection.  A common\n   practice is a post-negotiation integrity check in\
    \ which, as soon as\n   available, the established keys (here, the tunnel key)\
    \ are used to\n   derive integrity keys.  These integrity keys are then used by\
    \ the\n   peer and authentication server to verify whether the cipher suite\n\
    \   negotiation has been maliciously altered by another party.\n   Integrity checks\
    \ prevent downgrading attacks only if the derived\n   integrity keys and the employed\
    \ integrity algorithms cannot be broken\n   in real-time.  See Section 5.1 or\
    \ [HC07] for more information on\n   this.  Hence, the tunnel method MUST provide\
    \ integrity-protected\n   cipher suite negotiation with secure integrity algorithms\
    \ and\n   integrity keys.\n   TLS provides protected cipher suite negotiation\
    \ as long as all the\n   cipher suites supported provide authentication, key establishment,\n\
    \   and data integrity protection as discussed in Section 5.1.\n"
- title: 4.2.1.1.2.  Tunnel Data Protection Algorithms
  contents:
  - "4.2.1.1.2.  Tunnel Data Protection Algorithms\n   In order to prevent attacks\
    \ on the cryptographic algorithms employed\n   by inner authentication methods,\
    \ a tunnel protocol's protection needs\n   to provide a basic level of algorithm\
    \ strength.  The tunnel method\n   MUST provide at least one mandatory-to-implement\
    \ cipher suite that\n   provides the equivalent security of 128-bit AES for encryption\
    \ and\n   message authentication.  See Part 1 of the NIST \"Recommendation for\n\
    \   Key Management\" [NIST-SP-800-57] for a discussion of the relative\n   strengths\
    \ of common algorithms.\n"
- title: 4.2.1.1.3.  Tunnel Authentication and Key Establishment
  contents:
  - "4.2.1.1.3.  Tunnel Authentication and Key Establishment\n   A tunnel method MUST\
    \ provide unidirectional authentication from\n   authentication server to EAP\
    \ peer and mutual authentication between\n   authentication server and EAP peer.\
    \  The tunnel method MUST provide\n   at least one mandatory-to-implement cipher\
    \ suite that provides\n   certificate-based authentication of the server and provides\
    \ optional\n   certificate-based authentication of the client.  Other types of\n\
    \   authentication MAY be supported.\n   At least one mandatory-to-implement cipher\
    \ suite MUST be approved by\n   the NIST \"Draft Recommendation for Key Management\"\
    , Part 3\n   [NIST-SP-800-57p3], i.e., the cipher suite MUST be listed in Table\n\
    \   4-1, 4-2, or 4-3 in that document.\n   The mandatory-to-implement cipher suites\
    \ MUST only include cipher\n   suites that use strong cryptographic algorithms.\
    \  They MUST NOT\n   include cipher suites providing mutually anonymous authentication\
    \ or\n   static Diffie-Hellman cipher suites.\n   Other cipher suites MAY be selected\
    \ following the security\n   requirements for tunnel protocols in the NIST \"\
    Recommendation for EAP\n   Methods Used in Wireless Network Access Authentication\"\
    \n   [NIST-SP-800-120].\n"
- title: 4.2.1.2.  Tunnel Replay Protection
  contents:
  - "4.2.1.2.  Tunnel Replay Protection\n   In order to prevent replay attacks on\
    \ a tunnel protocol, the message\n   authentication MUST be generated using a\
    \ time-variant input such as\n   timestamps, sequence numbers, nonces, or a combination\
    \ of these, so\n   that any reuse of the authentication data can be detected as\
    \ invalid.\n   TLS provides sufficient replay protection to meet this requirement\
    \ as\n   long as weak cipher suites discussed in Section 5.1 are avoided.\n"
- title: 4.2.1.3.  TLS Extensions
  contents:
  - "4.2.1.3.  TLS Extensions\n   In order to meet the requirements in this document,\
    \ TLS extensions\n   MAY be used.  For example, TLS extensions may be useful in\
    \ providing\n   certificate revocation information via the TLS Online Certificate\n\
    \   Status Protocol (OCSP) extension [RFC6066] (thus meeting the\n   requirement\
    \ in Section 4.5.1.3).\n"
- title: 4.2.1.4.  Peer Identity Privacy
  contents:
  - "4.2.1.4.  Peer Identity Privacy\n   A tunnel protocol MUST support peer privacy.\
    \  This requires that the\n   username and other attributes associated with the\
    \ peer are not\n   transmitted in the clear or to an unauthenticated, unauthorized\n\
    \   party.  Peer identity protection provided by the tunnel method\n   applies\
    \ to establishment of the tunnel and protection of inner method\n   specific identities.\
    \  If applicable, the peer certificate is sent\n   confidentially (i.e., encrypted).\n"
- title: 4.2.1.5.  Session Resumption
  contents:
  - "4.2.1.5.  Session Resumption\n   The tunnel method MUST support TLS session resumption\
    \ as defined in\n   [RFC5246].  The tunnel method MAY support other methods of\
    \ session\n   resumption such as those defined in [RFC5077].\n"
- title: 4.2.2.  Fragmentation
  contents:
  - "4.2.2.  Fragmentation\n   Tunnel establishment sometimes requires the exchange\
    \ of information\n   that exceeds what can be carried in a single EAP message.\
    \  In\n   addition, information carried within the tunnel may also exceed this\n\
    \   limit.  Therefore, a tunnel method MUST support fragmentation and\n   reassembly.\n"
- title: 4.2.3.  Protection of Data External to Tunnel
  contents:
  - "4.2.3.  Protection of Data External to Tunnel\n   A man-in-the-middle attacker\
    \ can modify cleartext values such as\n   protocol version and type code information\
    \ communicated outside the\n   TLS tunnel.  The tunnel method MUST provide implicit\
    \ or explicit\n   protection of the protocol version and type code.  If modification\
    \ of\n   other information external to the tunnel can cause exploitable\n   vulnerabilities,\
    \ the tunnel method MUST provide protection against\n   modification of this additional\
    \ data.\n"
- title: 4.3.  Tunnel Payload Requirements
  contents:
  - "4.3.  Tunnel Payload Requirements\n   This section describes the payload requirements\
    \ inside the tunnel.\n   These requirements frequently express features that a\
    \ candidate\n   protocol must be capable of offering so that a deployer can decide\n\
    \   whether to make use of that feature.  This section does not state\n   requirements\
    \ about what features of each protocol must be used during\n   a deployment.\n"
- title: 4.3.1.  Extensible Attribute Types
  contents:
  - "4.3.1.  Extensible Attribute Types\n   The payload MUST be extensible.  Some\
    \ standard payload attribute\n   types will be defined to meet known requirements\
    \ listed below, such\n   as password authentication, inner EAP method, vendor-specific\n\
    \   attributes, and result indication.  Additional payload attributes MAY\n  \
    \ be defined in the future to support additional features and data\n   types.\n"
- title: 4.3.2.  Request/Challenge Response Operation
  contents:
  - "4.3.2.  Request/Challenge Response Operation\n   The payload MUST support the\
    \ request and response type of half-duplex\n   operation typical of EAP.  Multiple\
    \ attributes may be sent in a\n   single payload.  The payload MAY support transporting\
    \ multiple\n   authentications in a single payload packet.\n"
- title: 4.3.3.  Indicating Criticality of Attributes
  contents:
  - "4.3.3.  Indicating Criticality of Attributes\n   It is expected that new attributes\
    \ will be defined to be carried\n   within the tunnel method.  In some cases,\
    \ it is necessary for the\n   sender to know if the receiver did not understand\
    \ the attribute.  To\n   support this, there MUST be a way for the sender to mark\
    \ attributes\n   such that the receiver will indicate if an attribute is not\n\
    \   understood.\n"
- title: 4.3.4.  Vendor-Specific Support
  contents:
  - "4.3.4.  Vendor-Specific Support\n   The payload MUST support communication of\
    \ an extensible set of\n   vendor-specific attributes.  These attributes will\
    \ be segmented into\n   uniquely identified vendor-specific namespaces.  They\
    \ can be used for\n   experiments or vendor-specific features.\n"
- title: 4.3.5.  Result Indication
  contents:
  - "4.3.5.  Result Indication\n   The payload MUST support result indication and\
    \ its acknowledgement,\n   so both the EAP peer and server will end up with a\
    \ synchronized\n   state.  The result indication is needed after each chained\
    \ inner\n   authentication method and at the end of the authentication, so\n \
    \  separate result indications for intermediate and final results MUST\n   be\
    \ supported.\n"
- title: 4.3.6.  Internationalization of Display Strings
  contents:
  - "4.3.6.  Internationalization of Display Strings\n   The payload MAY provide a\
    \ standard attribute format that supports\n   international strings.  This attribute\
    \ format MUST support encoding\n   strings in UTF-8 [RFC3629] format.  Any strings\
    \ sent by the server\n   intended for display to the user MUST be sent in UTF-8\
    \ format and\n   SHOULD be able to be marked with language information and adapted\
    \ to\n   the user's language preference as indicated by RFC 5646 [RFC5646].\n\
    \   Note that in some cases, such as when transmitting error codes, it is\n  \
    \ acceptable to exchange numeric codes that can be translated by the\n   client\
    \ to support the particular local language.  These numeric codes\n   are not subject\
    \ to internationalization during transmission.\n"
- title: 4.4.  EAP Channel Binding Requirements
  contents:
  - "4.4.  EAP Channel Binding Requirements\n   The tunnel method MUST be capable\
    \ of meeting EAP channel binding\n   requirements described in [RFC6677].  As\
    \ discussed in [RFC5056], EAP\n   channel bindings differ from channel bindings\
    \ discussed in other\n   contexts.  Cryptographic binding between the TLS tunnel\
    \ and the inner\n   method discussed in Section 4.6.3 relates directly to the\
    \ non-EAP\n   channel binding concepts discussed in RFC 5056.\n"
- title: 4.5.  Requirements Associated with Carrying Username and Passwords
  contents:
  - "4.5.  Requirements Associated with Carrying Username and Passwords\n   This section\
    \ describes the requirements associated with tunneled\n   password authentication.\
    \  The password authentication mentioned here\n   refers to user or machine authentication\
    \ using a legacy password\n   database or verifier, such as the Lightweight Directory\
    \ Access\n   Protocol (LDAP) [RFC4511], OTP, etc.  These typically require the\n\
    \   password in its original text form in order to authenticate the peer;\n  \
    \ hence, they require the peer to send the cleartext username and\n   password\
    \ to the EAP server.\n"
- title: 4.5.1.  Security
  contents:
  - "4.5.1.  Security\n   Many internal EAP methods have the peer send its password\
    \ in the\n   clear to the EAP server.  Other methods (e.g., challenge-response\n\
    \   methods) are vulnerable to attacks if an eavesdropper can intercept\n   the\
    \ traffic.  For any such methods, the security measures in the\n   following sections\
    \ MUST be met.\n"
- title: 4.5.1.1.  Confidentiality and Integrity
  contents:
  - "4.5.1.1.  Confidentiality and Integrity\n   The cleartext password exchange MUST\
    \ be integrity and confidentiality\n   protected.  As long as the password exchange\
    \ occurs inside an\n   authenticated and encrypted tunnel, this requirement is\
    \ met.\n"
- title: 4.5.1.2.  Authentication of Server
  contents:
  - "4.5.1.2.  Authentication of Server\n   The EAP server MUST be authenticated before\
    \ the peer sends the\n   cleartext password to the server.\n"
- title: 4.5.1.3.  Server Certificate Revocation Checking
  contents:
  - "4.5.1.3.  Server Certificate Revocation Checking\n   When certificate authentication\
    \ is used during tunnel establishment,\n   the EAP peer may need to present its\
    \ password to the server before it\n   has network access to check the revocation\
    \ status of the server's\n   credentials.  Therefore, the tunnel method MUST support\
    \ mechanisms to\n   check the revocation status of a credential.  The tunnel method\n\
    \   SHOULD make use of Online Certificate Status Protocol (OCSP)\n   [RFC2560]\
    \ or Server-based Certificate Validation Protocol (SCVP)\n   [RFC5055] to obtain\
    \ the revocation status of the EAP server\n   certificate.\n"
- title: 4.5.2.  Internationalization
  contents:
  - "4.5.2.  Internationalization\n   The password authentication exchange MUST support\
    \ usernames and\n   passwords in international languages.  It MUST support encoding\
    \ of\n   username and password strings in UTF-8 [RFC3629] format.  The method\n\
    \   MUST specify how username and password normalizations and/or\n   comparisons\
    \ are performed in reference to SASLprep [RFC4013],\n   Net-UTF-8 [RFC5198], or\
    \ their replacements.\n   Any strings sent by the server intended for display\
    \ to the user MUST\n   be sent in UTF-8 format and SHOULD be able to be marked\
    \ with language\n   information and adapted to the user's language preference\
    \ as\n   indicated by RFC 5646 [RFC5646].  Note that, in some cases, such as\n\
    \   when transmitting error codes, it is acceptable to exchange numeric\n   codes\
    \ that can be translated by the client to support the particular\n   local language.\
    \  These numeric codes are not subject to\n   internationalization during transmission.\n"
- title: 4.5.3.  Metadata
  contents:
  - "4.5.3.  Metadata\n   The password authentication exchange SHOULD support additional\n\
    \   associated metadata that can be used to indicate whether the\n   authentication\
    \ is for a user or a machine.  This allows the EAP\n   server and peer to request\
    \ and negotiate authentication specifically\n   for a user or machine.  This is\
    \ useful in the case of multiple inner\n   authentications where the user and\
    \ machine both need to be\n   authenticated.\n"
- title: 4.5.4.  Password Change
  contents:
  - "4.5.4.  Password Change\n   The password authentication exchange MUST support\
    \ password change.\n   The exchange SHOULD be extensible to support other \"housekeeping\"\
    \n   functions, such as the management of PINs or other data, required by\n  \
    \ some systems.\n"
- title: 4.6.  Requirements Associated with Carrying EAP Methods
  contents:
  - "4.6.  Requirements Associated with Carrying EAP Methods\n   The tunnel method\
    \ MUST be able to carry inner EAP methods without\n   modifying them.  EAP methods\
    \ MUST NOT be redefined inside the tunnel.\n"
- title: 4.6.1.  Method Negotiation
  contents:
  - "4.6.1.  Method Negotiation\n   The tunnel method MUST support the protected negotiation\
    \ of the inner\n   EAP method.  It MUST NOT allow the inner EAP method negotiation\
    \ to be\n   manipulated by intermediaries.\n"
- title: 4.6.2.  Chained Methods
  contents:
  - "4.6.2.  Chained Methods\n   The tunnel method SHOULD support the chaining of\
    \ multiple EAP\n   methods.  The tunnel method MUST allow for the communication\
    \ of\n   intermediate results and for the verification of compound binding\n \
    \  between executed inner methods when chained methods are employed.\n"
- title: 4.6.3.  Cryptographic Binding with the TLS Tunnel
  contents:
  - "4.6.3.  Cryptographic Binding with the TLS Tunnel\n   The tunnel method MUST\
    \ provide a mechanism to bind the tunnel\n   protocol and the inner EAP method.\
    \  This property is referred to as\n   cryptographic binding.  Such bindings are\
    \ an important tool for\n   mitigating the tunnel MitM attacks [TUNNEL-MITM].\
    \  Cryptographic\n   bindings enable the complete prevention of tunnel MitM attacks\n\
    \   without the need of additional security policies, as long as the\n   inner\
    \ method derives keys and is not vulnerable to attacks outside a\n   protected\
    \ tunnel [LCN-2010].  Even though weak or non-key-deriving\n   inner methods may\
    \ be permitted.  Thus, security policies preventing\n   tunnel MitM attacks are\
    \ still necessary, and the tunnel method MUST\n   provide cryptographic bindings,\
    \ because only this allows migrating to\n   more secure, policy-independent implementations.\n\
    \   Cryptographic bindings are typically achieved by securely mixing the\n   established\
    \ keying material (say, tunnel key TK) from the tunnel\n   protocol with the established\
    \ keying material (say, method key MK)\n   from the inner authentication method(s)\
    \ in order to derive fresh\n   keying material.  If chained EAP methods are executed\
    \ in the tunnel,\n   all derived inner keys are combined with the tunnel key to\
    \ create a\n   new compound tunnel key (CTK).  In particular, CTK is used to derive\n\
    \   the EAP MSK, EMSK and other transient keys (shown as \"TEK\" below),\n   such\
    \ as transient encryption keys and integrity protection keys.  The\n   key hierarchy\
    \ for tunnel method executions that derive compound keys\n   for the purpose of\
    \ cryptographic binding is depicted in Figure 1.\n   In the case of the sequential\
    \ executions of n inner methods, a\n   chained compound key CTK_i MUST be computed\
    \ upon the completion of\n   each inner method i such that it contains the compound\
    \ key of all\n   previous inner methods, i.e., CTK_i=f(CTK_i-1, MK_i) with 0 <\
    \ i <= n\n   and CTK_0=TK, where f() is a key derivation function, such as one\n\
    \   that complies with the NIST \"Recommendation for Key Derivation Using\n  \
    \ Pseudorandom Functions\" [NIST-SP-800-108].  CTK_n SHOULD serve as the\n   key\
    \ to derive further keys.  Figure 1 depicts the key hierarchy in\n   the case\
    \ of a single inner method.  Transient keys derived from the\n   compound key\
    \ CTK are used in a cryptographic protocol to verify the\n   integrity of the\
    \ tunnel and the inner authentication method.\n                              \
    \ -----------\n                               | TK | MK |\n                  \
    \             -----------\n                                  |   |\n         \
    \                         v   v\n                                --------\n  \
    \                              | CTK  |\n                                --------\n\
    \                                    |\n                                    v\n\
    \                             ----------------\n                             |\
    \      |       |\n                             v      v       v\n            \
    \             -------  ------  -------\n                         | TEK | | MSK\
    \ | | EMSK |\n                         ------- ------- --------\n            \
    \              Figure 1: Compound Keys\n   Furthermore, all compound keys CTK_i\
    \ and all keys derived from it\n   SHOULD follow the recommendations for key derivations\
    \ and key\n   hierarchies as specified in [NIST-SP-800-108].  In particular, all\n\
    \   derived keys MUST have a lifetime assigned that does not exceed the\n   lifetime\
    \ of any key higher in the key hierarchy.  The derivation MUST\n   prevent a compromise\
    \ in one part of the system from leading to\n   compromises in other parts of\
    \ the system that relay on keys at the\n   same or higher level in the hierarchy.\n"
- title: 4.6.4.  Peer-Initiated EAP Authentication
  contents:
  - "4.6.4.  Peer-Initiated EAP Authentication\n   The tunnel method SHOULD allow\
    \ for the peer to initiate an inner EAP\n   authentication in order to meet its\
    \ policy requirements for\n   authenticating the server.\n"
- title: 4.6.5.  Method Metadata
  contents:
  - "4.6.5.  Method Metadata\n   The tunnel method SHOULD allow for the communication\
    \ of additional\n   data associated with an EAP method.  This can be used to indicate\n\
    \   whether the authentication is for a user or a machine.  This allows\n   the\
    \ EAP server and peer to request and negotiate authentication\n   specifically\
    \ for a user or machine.  This is useful in the case of\n   multiple inner EAP\
    \ authentications where the user and machine both\n   need to be authenticated.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   A tunnel method is often deployed to provide\
    \ mutual authentication\n   between EAP Peer and EAP Server and to generate key\
    \ material for use\n   in protecting lower-layer protocols.  In addition the tunnel\
    \ is used\n   to protect the communication of additional data, including peer\n\
    \   identity between the EAP Peer and EAP Server from disclosure to or\n   modification\
    \ by an attacker.  These sections cover considerations\n   that affect the ability\
    \ for a method to achieve these goals.\n"
- title: 5.1.  Cipher Suite Selection
  contents:
  - "5.1.  Cipher Suite Selection\n   TLS supports a wide range of cipher suites providing\
    \ a variety of\n   security properties.  The selection of cipher suites is critical\
    \ to\n   the security of the tunnel method.  Selection of a cipher suite with\n\
    \   weak or no authentication, such as an anonymous Diffie-Hellman-based\n   cipher\
    \ suite, will greatly increase the risk of system compromise.\n   Since a tunnel\
    \ method uses the TLS tunnel to transport data, the\n   selection of a cipher\
    \ suite with weak data encryption and integrity\n   algorithms will also increase\
    \ the vulnerability of the method to\n   attacks.\n   A tunnel protocol is prone\
    \ to downgrading attacks if the tunnel\n   protocol supports any key establishment\
    \ algorithm that can be broken\n   on-line.  In a successful downgrading attack,\
    \ an adversary breaks the\n   selected \"weak\" key establishment algorithm and\
    \ optionally the \"weak\"\n   authentication algorithm without being detected.\
    \  Here, \"weak\" refers\n   to a key establishment algorithm that can be broken\
    \ in real-time, and\n   an authentication scheme that can be broken off-line,\
    \ respectively.\n   See [HC07] for more details.  The requirements in this document\n\
    \   disapprove the use of key establishment algorithms that can be broken\n  \
    \ on-line.\n   Mutually anonymous tunnel protocols are prone to man-in-the-middle\n\
    \   attacks described in [HC07].  During such an attack, an adversary\n   establishes\
    \ one tunnel with the peer and one with the authentication\n   server, while the\
    \ peer and server believe that they established a\n   tunnel with each other.\
    \  Once both tunnels have been established, the\n   adversary can eavesdrop on\
    \ all communications within the tunnels,\n   i.e., the execution of the inner\
    \ authentication method(s).\n   Consequently, the adversary can eavesdrop on the\
    \ identifiers that are\n   exchanged as part of the EAP method, and thus the privacy\
    \ of peer\n   and/or authentication server is compromised along with any other\
    \ data\n   transmitted within the tunnels.  This document requires server\n  \
    \ authentication to avoid the risks associated with anonymous cipher\n   suites.\n"
- title: 5.2.  Tunneled Authentication
  contents:
  - "5.2.  Tunneled Authentication\n   In many cases, a tunnel method provides mutual\
    \ authentication by\n   authenticating the server during tunnel establishment\
    \ and\n   authenticating the peer within the tunnel using an EAP method.  As\n\
    \   described in [TUNNEL-MITM], this mode of operation can allow tunnel\n   man-in-the-middle\
    \ attackers to authenticate to the server as the peer\n   by tunneling the inner\
    \ EAP protocol messages to and from a peer that\n   is executing the method outside\
    \ a tunnel or with an untrustworthy\n   server.  Cryptographic binding between\
    \ the established keying\n   material from the inner authentication method(s)\
    \ and the tunnel\n   protocol verifies that the endpoints of the tunnel and the\
    \ inner\n   authentication method(s) are the same.  This can thwart the attack\
    \ if\n   the inner-method-derived keys are of sufficient strength that they\n\
    \   cannot be broken in real-time.\n   In cases where the inner authentication\
    \ method does not generate any\n   key material or only weak key material, security\
    \ policies MUST be\n   enforced such that the peer cannot execute the inner method\
    \ with the\n   same credentials outside a protective tunnel or with an untrustworthy\n\
    \   server.\n"
- title: 5.3.  Data External to Tunnel
  contents:
  - "5.3.  Data External to Tunnel\n   The tunnel method will use data that is outside\
    \ the TLS tunnel such\n   as the EAP type code or version numbers.  If an attacker\
    \ can\n   compromise the protocol by modifying these values, the tunnel method\n\
    \   MUST protect this data from modification.  In some cases, external\n   data\
    \ may not need additional protection because it is implicitly\n   verified during\
    \ the protocol operation.\n"
- title: 5.4.  Separation of TLS Tunnel and Inner Authentication Termination
  contents:
  - "5.4.  Separation of TLS Tunnel and Inner Authentication Termination\n   Terminating\
    \ the inner method at a different location than the outer\n   tunnel needs careful\
    \ consideration.  The inner method data may be\n   vulnerable to modification\
    \ and eavesdropping between the server that\n   terminates the tunnel and the\
    \ server that terminates the inner\n   method.  For example, if a cleartext password\
    \ is used, then it may be\n   sent to the inner method server in a RADIUS password\
    \ attribute, which\n   uses weak encryption that may not be suitable protection\
    \ for many\n   environments.\n   In some cases, terminating the tunnel at a different\
    \ location may\n   make it difficult for a peer to authenticate the server and\
    \ trust it\n   for further communication.  For example, if the TLS tunnel is\n\
    \   terminated by a different organization, the peer needs to be able to\n   authenticate\
    \ and authorize the tunnel server to handle secret\n   credentials that the peer\
    \ shares with the home server that terminates\n   the inner method.  This may\
    \ not meet the security policy of many\n   environments.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2560]     Myers, M., Ankney, R., Malpani,\
    \ A., Galperin, S., and\n                 C. Adams, \"X.509 Internet Public Key\
    \ Infrastructure\n                 Online Certificate Status Protocol - OCSP\"\
    , RFC 2560,\n                 June 1999.\n   [RFC3629]     Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                 10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC3748]     Aboba, B., Blunk, L., Vollbrecht, J., Carlson,\
    \ J., and\n                 H. Levkowetz, \"Extensible Authentication Protocol\n\
    \                 (EAP)\", RFC 3748, June 2004.\n   [RFC4017]     Stanley, D.,\
    \ Walker, J., and B. Aboba, \"Extensible\n                 Authentication Protocol\
    \ (EAP) Method Requirements for\n                 Wireless LANs\", RFC 4017, March\
    \ 2005.\n   [RFC4962]     Housley, R. and B. Aboba, \"Guidance for Authentication,\n\
    \                 Authorization, and Accounting (AAA) Key Management\",\n    \
    \             BCP 132, RFC 4962, July 2007.\n   [RFC5055]     Freeman, T., Housley,\
    \ R., Malpani, A., Cooper, D., and\n                 W. Polk, \"Server-Based Certificate\
    \ Validation Protocol\n                 (SCVP)\", RFC 5055, December 2007.\n \
    \  [RFC5246]     Dierks, T. and E. Rescorla, \"The Transport Layer\n         \
    \        Security (TLS) Protocol Version 1.2\", RFC 5246, August\n           \
    \      2008.\n   [RFC5247]     Aboba, B., Simon, D., and P. Eronen, \"Extensible\n\
    \                 Authentication Protocol (EAP) Key Management\n             \
    \    Framework\", RFC 5247, August 2008.\n   [RFC6677]     Hartman, S., Ed., Clancy,\
    \ T., and K. Hoeper, \"Channel\n                 Binding Support for Extensible\
    \ Authentication Protocol\n                 (EAP) Methods\", RFC 6677, July 2012.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [EAP-ENROLL]  Mahy, R., \"An Extensible Authentication\
    \ Protocol (EAP)\n                 Enrollment Method\", Work in Progress, March\
    \ 2006.\n   [HC07]        Hoeper, K. and L. Chen, \"Where EAP Security Claims\n\
    \                 Fail\", Institute for Computer Sciences, Social\n          \
    \       Informatics and Telecommunications Engineering (ICST),\n             \
    \    The Fourth International Conference on Heterogeneous\n                 Networking\
    \ for Quality, Reliability, Security and\n                 Robustness (QShine\
    \ 2007), August 2007.\n   [LCN-2010]    Hoeper, K. and L. Chen, \"An Inconvenient\
    \ Truth about\n                 Tunneled Authentications\", Proceedings of 35th\
    \ Annual\n                 IEEE Conference on Local Computer Networks (LCN 2010),\n\
    \                 September 2009.\n   [NIST-SP-800-108]\n                 Chen,\
    \ L., \"Recommendation for Key Derivation Using\n                 Pseudorandom\
    \ Functions\", Draft NIST Special Publication\n                 800-108, April\
    \ 2008.\n   [NIST-SP-800-120]\n                 Hoeper, K. and L. Chen, \"Recommendation\
    \ for EAP Methods\n                 Used in Wireless Network Access Authentication\"\
    , NIST\n                 Special Publication 800-120, September 2009.\n   [NIST-SP-800-57]\n\
    \                 Barker, E., Barker, W., Burr, W., Polk, W., and M.\n       \
    \          Smid, \"Recommendation for Key Management - Part 1:\n             \
    \    General (Revised)\", NIST Special Publication 800-57,\n                 part\
    \ 1, March 2007.\n   [NIST-SP-800-57p3]\n                 Barker, E., Burr, W.,\
    \ Jones, A., Polk, W., Rose, S.,\n                 and M. Smid, \"Recommendation\
    \ for Key Management, Part 3\n                 Application-Specific Key Management\
    \ Guidance\", Draft\n                 NIST Special Publication 800-57, part 3,\
    \ October 2008.\n   [PEAP]        Microsoft Corporation, \"[MS-PEAP]: Protected\
    \ Extensible\n                 Authentication Protocol (PEAP) Specification\"\
    , August\n                 2009, <http:// download.microsoft.com/download/9/5/E/\n\
    \                 95EF66AF-9026-4BB0-A41D-A4F81802D92C/%5BMS-\n              \
    \   PEAP%5D.pdf>.\n   [RFC4013]     Zeilenga, K., \"SASLprep: Stringprep Profile\
    \ for User\n                 Names and Passwords\", RFC 4013, February 2005.\n\
    \   [RFC4282]     Aboba, B., Beadles, M., Arkko, J., and P. Eronen, \"The\n  \
    \               Network Access Identifier\", RFC 4282, December 2005.\n   [RFC4511]\
    \     Sermersheim, J., \"Lightweight Directory Access Protocol\n             \
    \    (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC4851]     Cam-Winget,\
    \ N., McGrew, D., Salowey, J., and H.  Zhou,\n                 \"The Flexible\
    \ Authentication via Secure Tunneling\n                 Extensible Authentication\
    \ Protocol Method (EAP-FAST)\",\n                 RFC 4851, May 2007.\n   [RFC5056]\
    \     Williams, N., \"On the Use of Channel Bindings to Secure\n             \
    \    Channels\", RFC 5056, November 2007.\n   [RFC5077]     Salowey, J., Zhou,\
    \ H., Eronen, P., and H.  Tschofenig,\n                 \"Transport Layer Security\
    \ (TLS) Session Resumption\n                 without Server-Side State\", RFC\
    \ 5077, January 2008.\n   [RFC5198]     Klensin, J. and M. Padlipsky, \"Unicode\
    \ Format for\n                 Network Interchange\", RFC 5198, March 2008.\n\
    \   [RFC5209]     Sangster, P., Khosravi, H., Mani, M., Narayan, K., and\n   \
    \              J. Tardo, \"Network Endpoint Assessment (NEA): Overview\n     \
    \            and Requirements\", RFC 5209, June 2008.\n   [RFC5281]     Funk,\
    \ P. and S. Blake-Wilson, \"Extensible\n                 Authentication Protocol\
    \ Tunneled Transport Layer\n                 Security Authenticated Protocol Version\
    \ 0 (EAP-\n                 TTLSv0)\", RFC 5281, August 2008.\n   [RFC5646]  \
    \   Phillips, A. and M. Davis, \"Tags for Identifying\n                 Languages\"\
    , BCP 47, RFC 5646, September 2009.\n   [RFC5793]     Sahita, R., Hanna, S., Hurst,\
    \ R., and K. Narayan,\n                 \"PB-TNC: A Posture Broker (PB) Protocol\
    \ Compatible with\n                 Trusted Network Connect (TNC)\", RFC 5793,\
    \ March 2010.\n   [RFC6066]     Eastlake, D., \"Transport Layer Security (TLS)\n\
    \                 Extensions: Extension Definitions\", RFC 6066, January\n   \
    \              2011.\n   [TUNNEL-MITM] Asokan, N., Niemi, V., and K. Nyberg, \"\
    Man-in-the-\n                 Middle in Tunnelled Authentication Protocols\",\n\
    \                 Cryptology ePrint Archive: Report 2002/163, November\n     \
    \            2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Katrin Hoeper\n   Motorola Solutions, Inc.\n   1301 E.\
    \ Algonquin Road\n   Schaumburg, IL  60196\n   USA\n   EMail: khoeper@motorolasolutions.com\n\
    \   Stephen Hanna\n   Juniper Networks\n   3 Beverly Road\n   Bedford, MA  01730\n\
    \   USA\n   EMail: shanna@juniper.net\n   Hao Zhou\n   Cisco Systems, Inc.\n \
    \  4125 Highlander Parkway\n   Richfield, OH  44286\n   USA\n   EMail: hzhou@cisco.com\n\
    \   Joseph Salowey (editor)\n   Cisco Systems, Inc.\n   2901 3rd. Ave\n   Seattle,\
    \ WA  98121\n   USA\n   EMail: jsalowey@cisco.com\n"
