- contents:
  - '               Dissemination of Flow Specification Rules

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a new Border Gateway Protocol Network Layer\n
    \  Reachability Information (BGP NLRI) encoding format that can be used\n   to
    distribute traffic flow specifications.  This allows the routing\n   system to
    propagate information regarding more specific components of\n   the traffic aggregate
    defined by an IP destination prefix.\n   Additionally, it defines two applications
    of that encoding format:\n   one that can be used to automate inter-domain coordination
    of traffic\n   filtering, such as what is required in order to mitigate\n   (distributed)
    denial-of-service attacks, and a second application to\n   provide traffic filtering
    in the context of a BGP/MPLS VPN service.\n   The information is carried via the
    BGP, thereby reusing protocol\n   algorithms, operational experience, and administrative
    processes such\n   as inter-provider peering agreements.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Definitions of Terms Used in This Memo ..........................5\n   3.
    Flow Specifications .............................................5\n   4. Dissemination
    of Information ....................................6\n   5. Traffic Filtering
    ..............................................12\n      5.1. Order of Traffic
    Filtering Rules ..........................13\n   6. Validation Procedure ...........................................14\n
    \  7. Traffic Filtering Actions ......................................15\n   8.
    Traffic Filtering in BGP/MPLS VPN Networks .....................17\n   9. Monitoring
    .....................................................18\n   10. Security Considerations
    .......................................18\n   11. IANA Considerations ...........................................19\n
    \  12. Acknowledgments ...............................................20\n   13.
    Normative References ..........................................21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Modern IP routers contain both the capability to forward
    traffic\n   according to IP prefixes as well as to classify, shape, rate limit,\n
    \  filter, or redirect packets based on administratively defined\n   policies.\n
    \  These traffic policy mechanisms allow the router to define match\n   rules
    that operate on multiple fields of the packet header.  Actions\n   such as the
    ones described above can be associated with each rule.\n   The n-tuple consisting
    of the matching criteria defines an aggregate\n   traffic flow specification.
    \ The matching criteria can include\n   elements such as source and destination
    address prefixes, IP\n   protocol, and transport protocol port numbers.\n   This
    document defines a general procedure to encode flow\n   specification rules for
    aggregated traffic flows so that they can be\n   distributed as a BGP [RFC4271]
    NLRI.  Additionally, we define the\n   required mechanisms to utilize this definition
    to the problem of\n   immediate concern to the authors: intra- and inter-provider\n
    \  distribution of traffic filtering rules to filter (distributed)\n   denial-of-service
    (DoS) attacks.\n   By expanding routing information with flow specifications,
    the\n   routing system can take advantage of the ACL (Access Control List) or\n
    \  firewall capabilities in the router's forwarding path.  Flow\n   specifications
    can be seen as more specific routing entries to a\n   unicast prefix and are expected
    to depend upon the existing unicast\n   data information.\n   A flow specification
    received from an external autonomous system will\n   need to be validated against
    unicast routing before being accepted.\n   If the aggregate traffic flow defined
    by the unicast destination\n   prefix is forwarded to a given BGP peer, then the
    local system can\n   safely install more specific flow rules that may result in
    different\n   forwarding behavior, as requested by this system.\n   The key technology
    components required to address the class of\n   problems targeted by this document
    are:\n   1.  Efficient point-to-multipoint distribution of control plane\n       information.\n
    \  2.  Inter-domain capabilities and routing policy support.\n   3.  Tight integration
    with unicast routing, for verification\n       purposes.\n   Items 1 and 2 have
    already been addressed using BGP for other types\n   of control plane information.
    \ Close integration with BGP also makes\n   it feasible to specify a mechanism
    to automatically verify flow\n   information against unicast routing.  These factors
    are behind the\n   choice of BGP as the carrier of flow specification information.\n
    \  As with previous extensions to BGP, this specification makes it\n   possible
    to add additional information to Internet routers.  These\n   are limited in terms
    of the maximum number of data elements they can\n   hold as well as the number
    of events they are able to process in a\n   given unit of time.  The authors believe
    that, as with previous\n   extensions, service providers will be careful to keep
    information\n   levels below the maximum capacity of their devices.\n   It is
    also expected that, in many initial deployments, flow\n   specification information
    will replace existing host length route\n   advertisements rather than add additional
    information.\n   Experience with previous BGP extensions has also shown that the\n
    \  maximum capacity of BGP speakers has been gradually increased\n   according
    to expected loads.  Taking into account Internet unicast\n   routing as well as
    additional applications as they gain popularity.\n   From an operational perspective,
    the utilization of BGP as the\n   carrier for this information allows a network
    service provider to\n   reuse both internal route distribution infrastructure
    (e.g., route\n   reflector or confederation design) and existing external\n   relationships
    (e.g., inter-domain BGP sessions to a customer\n   network).\n   While it is certainly
    possible to address this problem using other\n   mechanisms, the authors believe
    that this solution offers the\n   substantial advantage of being an incremental
    addition to already\n   deployed mechanisms.\n   In current deployments, the information
    distributed by the flow-spec\n   extension is originated both manually as well
    as automatically.  The\n   latter by systems that are able to detect malicious
    flows.  When\n   automated systems are used, care should be taken to ensure their\n
    \  correctness as well as to limit the number and advertisement rate of\n   flow
    routes.\n   This specification defines required protocol extensions to address\n
    \  most common applications of IPv4 unicast and VPNv4 unicast filtering.\n   The
    same mechanism can be reused and new match criteria added to\n   address similar
    filtering needs for other BGP address families (for\n   example, IPv6 unicast).
    \ The authors believe that those would be best\n   to be addressed in a separate
    document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions of Terms Used in This Memo\n   NLRI - Network Layer Reachability
    Information\n   RIB - Routing Information Base\n   Loc-RIB - Local RIB\n   AS
    - Autonomous System number\n   VRF - Virtual Routing and Forwarding instance\n
    \  PE - Provider Edge router\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  title: 2.  Definitions of Terms Used in This Memo
- contents:
  - "3.  Flow Specifications\n   A flow specification is an n-tuple consisting of
    several matching\n   criteria that can be applied to IP traffic.  A given IP packet
    is\n   said to match the defined flow if it matches all the specified\n   criteria.\n
    \  A given flow may be associated with a set of attributes, depending on\n   the
    particular application; such attributes may or may not include\n   reachability
    information (i.e., NEXT_HOP).  Well-known or AS-specific\n   community attributes
    can be used to encode a set of predetermined\n   actions.\n   A particular application
    is identified by a specific (Address Family\n   Identifier, Subsequent Address
    Family Identifier (AFI, SAFI)) pair\n   [RFC4760] and corresponds to a distinct
    set of RIBs.  Those RIBs\n   should be treated independently from each other in
    order to assure\n   non-interference between distinct applications.\n   BGP itself
    treats the NLRI as an opaque key to an entry in its\n   databases.  Entries that
    are placed in the Loc-RIB are then\n   associated with a given set of semantics,
    which is application\n   dependent.  This is consistent with existing BGP applications.
    \ For\n   instance, IP unicast routing (AFI=1, SAFI=1) and IP multicast\n   reverse-path
    information (AFI=1, SAFI=2) are handled by BGP without\n   any particular semantics
    being associated with them until installed\n   in the Loc-RIB.\n   Standard BGP
    policy mechanisms, such as UPDATE filtering by NLRI\n   prefix and community matching,
    SHOULD apply to the newly defined\n   NLRI-type.  Network operators can also control
    propagation of such\n   routing updates by enabling or disabling the exchange
    of a particular\n   (AFI, SAFI) pair on a given BGP peering session.\n"
  title: 3.  Flow Specifications
- contents:
  - "4.  Dissemination of Information\n   We define a \"Flow Specification\" NLRI
    type that may include several\n   components such as destination prefix, source
    prefix, protocol,\n   ports, etc.  This NLRI is treated as an opaque bit string
    prefix by\n   BGP.  Each bit string identifies a key to a database entry with
    which\n   a set of attributes can be associated.\n   This NLRI information is
    encoded using MP_REACH_NLRI and\n   MP_UNREACH_NLRI attributes as defined in RFC
    4760 [RFC4760].\n   Whenever the corresponding application does not require Next-Hop\n
    \  information, this shall be encoded as a 0-octet length Next Hop in\n   the
    MP_REACH_NLRI attribute and ignored on receipt.\n   The NLRI field of the MP_REACH_NLRI
    and MP_UNREACH_NLRI is encoded as\n   a 1- or 2-octet NLRI length field followed
    by a variable-length NLRI\n   value.  The NLRI length is expressed in octets.\n
    \                     +------------------------------+\n                      |
    \   length (0xnn or 0xfn nn)  |\n                      +------------------------------+\n
    \                     |    NLRI value  (variable)    |\n                      +------------------------------+\n
    \                             flow-spec NLRI\n   If the NLRI length value is smaller
    than 240 (0xf0 hex), the length\n   field can be encoded as a single octet.  Otherwise,
    it is encoded as\n   an extended-length 2-octet value in which the most significant
    nibble\n   of the first byte is all ones.\n   In the figure above, values less-than
    240 are encoded using two hex\n   digits (0xnn).  Values above 240 are encoded
    using 3 hex digits\n   (0xfnnn).  The highest value that can be represented with
    this\n   encoding is 4095.  The value 241 is encoded as 0xf0f1.\n   The Flow specification
    NLRI-type consists of several optional\n   subcomponents.  A specific packet is
    considered to match the flow\n   specification when it matches the intersection
    (AND) of all the\n   components present in the specification.\n   The following
    component types are defined:\n      Type 1 - Destination Prefix\n         Encoding:
    <type (1 octet), prefix length (1 octet), prefix>\n         Defines the destination
    prefix to match.  Prefixes are encoded\n         as in BGP UPDATE messages, a
    length in bits is followed by\n         enough octets to contain the prefix information.\n
    \     Type 2 - Source Prefix\n         Encoding: <type (1 octet), prefix-length
    (1 octet), prefix>\n         Defines the source prefix to match.\n      Type 3
    - IP Protocol\n         Encoding: <type (1 octet), [op, value]+>\n         Contains
    a set of {operator, value} pairs that are used to\n         match the IP protocol
    value byte in IP packets.\n         The operator byte is encoded as:\n                       0
    \  1   2   3   4   5   6   7\n                     +---+---+---+---+---+---+---+---+\n
    \                    | e | a |  len  | 0 |lt |gt |eq |\n                     +---+---+---+---+---+---+---+---+\n
    \                               Numeric operator\n         e -   end-of-list bit.
    \ Set in the last {op, value} pair in the\n               list.\n         a -
    \  AND bit.  If unset, the previous term is logically ORed\n               with
    the current one.  If set, the operation is a logical\n               AND.  It
    should be unset in the first operator byte of a\n               sequence.  The
    AND operator has higher priority than OR\n               for the purposes of evaluating
    logical expressions.\n         len - The length of the value field for this operand
    is given\n               as (1 << len).\n         lt -  less than comparison between
    data and value.\n         gt -  greater than comparison between data and value.\n
    \        eq -  equality between data and value.\n         The bits lt, gt, and
    eq can be combined to produce \"less or\n         equal\", \"greater or equal\",
    and inequality values.\n      Type 4 - Port\n         Encoding: <type (1 octet),
    [op, value]+>\n         Defines a list of {operation, value} pairs that matches
    source\n         OR destination TCP/UDP ports.  This list is encoded using the\n
    \        numeric operand format defined above.  Values are encoded as 1-\n         or
    2-byte quantities.\n         Port, source port, and destination port components
    evaluate to\n         FALSE if the IP protocol field of the packet has a value
    other\n         than TCP or UDP, if the packet is fragmented and this is not\n
    \        the first fragment, or if the system in unable to locate the\n         transport
    header.  Different implementations may or may not be\n         able to decode
    the transport header in the presence of IP\n         options or Encapsulating
    Security Payload (ESP) NULL [RFC4303]\n         encryption.\n      Type 5 - Destination
    port\n         Encoding: <type (1 octet), [op, value]+>\n         Defines a list
    of {operation, value} pairs used to match the\n         destination port of a
    TCP or UDP packet.  Values are encoded as\n         1- or 2-byte quantities.\n
    \     Type 6 - Source port\n         Encoding: <type (1 octet), [op, value]+>\n
    \        Defines a list of {operation, value} pairs used to match the\n         source
    port of a TCP or UDP packet.  Values are encoded as 1-\n         or 2-byte quantities.\n
    \     Type 7 - ICMP type\n         Encoding: <type (1 octet), [op, value]+>\n
    \        Defines a list of {operation, value} pairs used to match the\n         type
    field of an ICMP packet.  Values are encoded using a\n         single byte.\n
    \        The ICMP type and code specifiers evaluate to FALSE whenever\n         the
    protocol value is not ICMP.\n      Type 8 - ICMP code\n         Encoding: <type
    (1 octet), [op, value]+>\n         Defines a list of {operation, value} pairs
    used to match the\n         code field of an ICMP packet.  Values are encoded
    using a\n         single byte.\n      Type 9 - TCP flags\n         Encoding: <type
    (1 octet), [op, bitmask]+>\n         Bitmask values can be encoded as a 1- or
    2-byte bitmask.  When\n         a single byte is specified, it matches byte 13
    of the TCP\n         header [RFC0793], which contains bits 8 though 15 of the
    4th\n         32-bit word.  When a 2-byte encoding is used, it matches bytes\n
    \        12 and 13 of the TCP header with the data offset field having a\n         \"don't
    care\" value.\n         As with port specifiers, this component evaluates to FALSE
    for\n         packets that are not TCP packets.\n         This type uses the bitmask
    operand format, which differs from\n         the numeric operator format in the
    lower nibble.\n                       0   1   2   3   4   5   6   7\n                     +---+---+---+---+---+---+---+---+\n
    \                    | e | a |  len  | 0 | 0 |not| m |\n                     +---+---+---+---+---+---+---+---+\n
    \        e, a, len -  Most significant nibble: (end-of-list bit, AND\n                      bit,
    and length field), as defined for in the\n                      numeric operator
    format.\n         not - NOT bit.  If set, logical negation of operation.\n         m
    -   Match bit.  If set, this is a bitwise match operation\n               defined
    as \"(data & value) == value\"; if unset, (data &\n               value) evaluates
    to TRUE if any of the bits in the value\n               mask are set in the data.\n
    \     Type 10 - Packet length\n         Encoding: <type (1 octet), [op, value]+>\n
    \        Match on the total IP packet length (excluding Layer 2 but\n         including
    IP header).  Values are encoded using 1- or 2-byte\n         quantities.\n      Type
    11 - DSCP (Diffserv Code Point)\n         Encoding: <type (1 octet), [op, value]+>\n
    \        Defines a list of {operation, value} pairs used to match the\n         6-bit
    DSCP field [RFC2474].  Values are encoded using a single\n         byte, where
    the two most significant bits are zero and the six\n         least significant
    bits contain the DSCP value.\n      Type 12 - Fragment\n         Encoding: <type
    (1 octet), [op, bitmask]+>\n         Uses bitmask operand format defined above.\n
    \                      0   1   2   3   4   5   6   7\n                     +---+---+---+---+---+---+---+---+\n
    \                    |   Reserved    |LF |FF |IsF|DF |\n                     +---+---+---+---+---+---+---+---+\n
    \        Bitmask values:\n         +  Bit 7 - Don't fragment (DF)\n         +
    \ Bit 6 - Is a fragment (IsF)\n         +  Bit 5 - First fragment (FF)\n         +
    \ Bit 4 - Last fragment (LF)\n   Flow specification components must follow strict
    type ordering.  A\n   given component type may or may not be present in the specification,\n
    \  but if present, it MUST precede any component of higher numeric type\n   value.\n
    \  If a given component type within a prefix in unknown, the prefix in\n   question
    cannot be used for traffic filtering purposes by the\n   receiver.  Since a flow
    specification has the semantics of a logical\n   AND of all components, if a component
    is FALSE, by definition it\n   cannot be applied.  However, for the purposes of
    BGP route\n   propagation, this prefix should still be transmitted since BGP route\n
    \  distribution is independent on NLRI semantics.\n   The <type, value> encoding
    is chosen in order to account for future\n   extensibility.\n   An example of
    a flow specification encoding for: \"all packets to\n   10.0.1/24 and TCP port
    25\".\n   +------------------+----------+----------+\n   | destination      |
    proto    | port     |\n   +------------------+----------+----------+\n   | 0x01
    18 0a 00 01 | 03 81 06 | 04 81 19 |\n   +------------------+----------+----------+\n
    \  Decode for protocol:\n   +-------+----------+------------------------------+\n
    \  | Value |          |                              |\n   +-------+----------+------------------------------+\n
    \  |  0x03 | type     |                              |\n   |  0x81 | operator
    | end-of-list, value size=1, = |\n   |  0x06 | value    |                              |\n
    \  +-------+----------+------------------------------+\n   An example of a flow
    specification encoding for: \"all packets to\n   10.0.1/24 from 192/8 and port
    {range [137, 139] or 8080}\".\n   +------------------+----------+-------------------------+\n
    \  | destination      | source   | port                    |\n   +------------------+----------+-------------------------+\n
    \  | 0x01 18 0a 01 01 | 02 08 c0 | 04 03 89 45 8b 91 1f 90 |\n   +------------------+----------+-------------------------+\n
    \  Decode for port:\n   +--------+----------+------------------------------+\n
    \  |  Value |          |                              |\n   +--------+----------+------------------------------+\n
    \  |   0x04 | type     |                              |\n   |   0x03 | operator
    | size=1, >=                   |\n   |   0x89 | value    | 137                          |\n
    \  |   0x45 | operator | &, value size=1, <=          |\n   |   0x8b | value    |
    139                          |\n   |   0x91 | operator | end-of-list, value-size=2,
    = |\n   | 0x1f90 | value    | 8080                         |\n   +--------+----------+------------------------------+\n
    \  This constitutes an NLRI with an NLRI length of 16 octets.\n   Implementations
    wishing to exchange flow specification rules MUST use\n   BGP's Capability Advertisement
    facility to exchange the Multiprotocol\n   Extension Capability Code (Code 1)
    as defined in RFC 4760 [RFC4760].\n   The (AFI, SAFI) pair carried in the Multiprotocol
    Extension\n   Capability MUST be the same as the one used to identify a particular\n
    \  application that uses this NLRI-type.\n"
  title: 4.  Dissemination of Information
- contents:
  - "5.  Traffic Filtering\n   Traffic filtering policies have been traditionally
    considered to be\n   relatively static.\n   The popularity of traffic-based, denial-of-service
    (DoS) attacks,\n   which often requires the network operator to be able to use
    traffic\n   filters for detection and mitigation, brings with it requirements\n
    \  that are not fully satisfied by existing tools.\n   Increasingly, DoS mitigation
    requires coordination among several\n   service providers in order to be able
    to identify traffic source(s)\n   and because the volumes of traffic may be such
    that they will\n   otherwise significantly affect the performance of the network.\n
    \  Several techniques are currently used to control traffic filtering of\n   DoS
    attacks.  Among those, one of the most common is to inject\n   unicast route advertisements
    corresponding to a destination prefix\n   being attacked.  One variant of this
    technique marks such route\n   advertisements with a community that gets translated
    into a discard\n   Next-Hop by the receiving router.  Other variants attract traffic
    to\n   a particular node that serves as a deterministic drop point.\n   Using
    unicast routing advertisements to distribute traffic filtering\n   information
    has the advantage of using the existing infrastructure\n   and inter-AS communication
    channels.  This can allow, for instance, a\n   service provider to accept filtering
    requests from customers for\n   address space they own.\n   There are several
    drawbacks, however.  An issue that is immediately\n   apparent is the granularity
    of filtering control: only destination\n   prefixes may be specified.  Another
    area of concern is the fact that\n   filtering information is intermingled with
    routing information.\n   The mechanism defined in this document is designed to
    address these\n   limitations.  We use the flow specification NLRI defined above
    to\n   convey information about traffic filtering rules for traffic that\n   should
    be discarded.\n   This mechanism is primarily designed to allow an upstream autonomous\n
    \  system to perform inbound filtering in their ingress routers of\n   traffic
    that a given downstream AS wishes to drop.\n   In order to achieve this goal,
    we define an application-specific NLRI\n   identifier (AFI=1, SAFI=133) along
    with specific semantic rules.\n   BGP routing updates containing this identifier
    use the flow\n   specification NLRI encoding to convey particular aggregated flows\n
    \  that require special treatment.\n   Flow routing information received via this
    (AFI, SAFI) pair is\n   subject to the validation procedure detailed below.\n"
  - contents:
    - "5.1.  Order of Traffic Filtering Rules\n   With traffic filtering rules, more
      than one rule may match a\n   particular traffic flow.  Thus, it is necessary
      to define the order\n   at which rules get matched and applied to a particular
      traffic flow.\n   This ordering function must be such that it must not depend
      on the\n   arrival order of the flow specification's rules and must be constant\n
      \  in the network.\n   The relative order of two flow specification rules is
      determined by\n   comparing their respective components.  The algorithm starts
      by\n   comparing the left-most components of the rules.  If the types\n   differ,
      the rule with lowest numeric type value has higher precedence\n   (and thus
      will match before) than the rule that doesn't contain that\n   component type.
      \ If the component types are the same, then a type-\n   specific comparison
      is performed.\n   For IP prefix values (IP destination and source prefix) precedence
      is\n   given to the lowest IP value of the common prefix length; if the\n   common
      prefix is equal, then the most specific prefix has precedence.\n   For all other
      component types, unless otherwise specified, the\n   comparison is performed
      by comparing the component data as a binary\n   string using the memcmp() function
      as defined by the ISO C standard.\n   For strings of different lengths, the
      common prefix is compared.  If\n   equal, the longest string is considered to
      have higher precedence\n   than the shorter one.\n   Pseudocode:\n   flow_rule_cmp
      (a, b)\n   {\n       comp1 = next_component(a);\n       comp2 = next_component(b);\n
      \      while (comp1 || comp2) {\n           // component_type returns infinity
      on end-of-list\n           if (component_type(comp1) < component_type(comp2))
      {\n               return A_HAS_PRECEDENCE;\n           }\n           if (component_type(comp1)
      > component_type(comp2)) {\n               return B_HAS_PRECEDENCE;\n           }\n
      \          if (component_type(comp1) == IP_DESTINATION || IP_SOURCE) {\n               common
      = MIN(prefix_length(comp1), prefix_length(comp2));\n               cmp = prefix_compare(comp1,
      comp2, common);\n               // not equal, lowest value has precedence\n
      \              // equal, longest match has precedence\n           } else {\n
      \              common =\n                  MIN(component_length(comp1), component_length(comp2));\n
      \              cmp = memcmp(data(comp1), data(comp2), common);\n               //
      not equal, lowest value has precedence\n               // equal, longest string
      has precedence\n           }\n       }\n       return EQUAL;\n   }\n"
    title: 5.1.  Order of Traffic Filtering Rules
  title: 5.  Traffic Filtering
- contents:
  - "6.  Validation Procedure\n   Flow specifications received from a BGP peer and
    that are accepted in\n   the respective Adj-RIB-In are used as input to the route
    selection\n   process.  Although the forwarding attributes of two routes for the\n
    \  same flow specification prefix may be the same, BGP is still required\n   to
    perform its path selection algorithm in order to select the\n   correct set of
    attributes to advertise.\n   The first step of the BGP Route Selection procedure
    (Section 9.1.2 of\n   [RFC4271]) is to exclude from the selection procedure routes
    that are\n   considered non-feasible.  In the context of IP routing information,\n
    \  this step is used to validate that the NEXT_HOP attribute of a given\n   route
    is resolvable.\n   The concept can be extended, in the case of flow specification
    NLRI,\n   to allow other validation procedures.\n   A flow specification NLRI
    must be validated such that it is\n   considered feasible if and only if:\n   a)
    The originator of the flow specification matches the originator of\n      the
    best-match unicast route for the destination prefix embedded\n      in the flow
    specification.\n   b) There are no more specific unicast routes, when compared
    with the\n      flow destination prefix, that have been received from a different\n
    \     neighboring AS than the best-match unicast route, which has been\n      determined
    in step a).\n   By originator of a BGP route, we mean either the BGP originator
    path\n   attribute, as used by route reflection, or the transport address of\n
    \  the BGP peer, if this path attribute is not present.\n   The underlying concept
    is that the neighboring AS that advertises the\n   best unicast route for a destination
    is allowed to advertise flow-\n   spec information that conveys a more or equally
    specific destination\n   prefix.  Thus, as long as there are no more specific
    unicast routes,\n   received from a different neighboring AS, which would be affected
    by\n   that filtering rule.\n   The neighboring AS is the immediate destination
    of the traffic\n   described by the flow specification.  If it requests these
    flows to\n   be dropped, that request can be honored without concern that it\n
    \  represents a denial of service in itself.  Supposedly, the traffic is\n   being
    dropped by the downstream autonomous system, and there is no\n   added value in
    carrying the traffic to it.\n   BGP implementations MUST also enforce that the
    AS_PATH attribute of a\n   route received via the External Border Gateway Protocol
    (eBGP)\n   contains the neighboring AS in the left-most position of the AS_PATH\n
    \  attribute.  While this rule is optional in the BGP specification, it\n   becomes
    necessary to enforce it for security reasons.\n"
  title: 6.  Validation Procedure
- contents:
  - "7.  Traffic Filtering Actions\n   This specification defines a minimum set of
    filtering actions that it\n   standardizes as BGP extended community values [RFC4360].
    \ This is not\n   meant to be an inclusive list of all the possible actions, but
    only a\n   subset that can be interpreted consistently across the network.\n   Implementations
    should provide mechanisms that map an arbitrary BGP\n   community value (normal
    or extended) to filtering actions that\n   require different mappings in different
    systems in the network.  For\n   instance, providing packets with a worse-than-best-effort,
    per-hop\n   behavior is a functionality that is likely to be implemented\n   differently
    in different systems and for which no standard behavior\n   is currently known.
    \ Rather than attempting to define it here, this\n   can be accomplished by mapping
    a user-defined community value to\n   platform-/network-specific behavior via
    user configuration.\n   The default action for a traffic filtering flow specification
    is to\n   accept IP traffic that matches that particular rule.\n      The following
    extended community values can be used to specify\n                            particular
    actions.\n        +--------+--------------------+--------------------------+\n
    \       | type   | extended community | encoding                 |\n        +--------+--------------------+--------------------------+\n
    \       | 0x8006 | traffic-rate       | 2-byte as#, 4-byte float |\n        |
    0x8007 | traffic-action     | bitmask                  |\n        | 0x8008 | redirect
    \          | 6-byte Route Target      |\n        | 0x8009 | traffic-marking    |
    DSCP value               |\n        +--------+--------------------+--------------------------+\n
    \  Traffic-rate:  The traffic-rate extended community is a non-\n      transitive
    extended community across the autonomous-system\n      boundary and uses following
    extended community encoding:\n         The first two octets carry the 2-octet
    id, which can be\n         assigned from a 2-byte AS number.  When a 4-byte AS
    number is\n         locally present, the 2 least significant bytes of such an
    AS\n         number can be used.  This value is purely informational and\n         should
    not be interpreted by the implementation.\n         The remaining 4 octets carry
    the rate information in IEEE\n         floating point [IEEE.754.1985] format,
    units being bytes per\n         second.  A traffic-rate of 0 should result on
    all traffic for\n         the particular flow to be discarded.\n   Traffic-action:
    \ The traffic-action extended community consists of 6\n      bytes of which only
    the 2 least significant bits of the 6th byte\n      (from left to right) are currently
    defined.\n                       40  41  42  43  44  45  46  47\n                     +---+---+---+---+---+---+---+---+\n
    \                    |        reserved       | S | T |\n                     +---+---+---+---+---+---+---+---+\n
    \     *  Terminal Action (bit 47): When this bit is set, the traffic\n         filtering
    engine will apply any subsequent filtering rules (as\n         defined by the
    ordering procedure).  If not set, the evaluation\n         of the traffic filter
    stops when this rule is applied.\n      *  Sample (bit 46): Enables traffic sampling
    and logging for this\n         flow specification.\n   Redirect:  The redirect
    extended community allows the traffic to be\n      redirected to a VRF routing
    instance that lists the specified\n      route-target in its import policy.  If
    several local instances\n      match this criteria, the choice between them is
    a local matter\n      (for example, the instance with the lowest Route Distinguisher\n
    \     value can be elected).  This extended community uses the same\n      encoding
    as the Route Target extended community [RFC4360].\n   Traffic Marking:  The traffic
    marking extended community instructs a\n      system to modify the DSCP bits of
    a transiting IP packet to the\n      corresponding value.  This extended community
    is encoded as a\n      sequence of 5 zero bytes followed by the DSCP value encoded
    in the\n      6 least significant bits of 6th byte.\n"
  title: 7.  Traffic Filtering Actions
- contents:
  - "8.  Traffic Filtering in BGP/MPLS VPN Networks\n   Provider-based Layer 3 VPN
    networks, such as the ones using a BGP/\n   MPLS IP VPN [RFC4364] control plane,
    have different traffic filtering\n   requirements than Internet service providers.\n
    \  In these environments, the VPN customer network often has traffic\n   filtering
    capabilities towards their external network connections\n   (e.g., firewall facing
    public network connection).  Less common is\n   the presence of traffic filtering
    capabilities between different VPN\n   attachment sites.  In an any-to-any connectivity
    model, which is the\n   default, this means that site-to-site traffic is unfiltered.\n
    \  In circumstances where a security threat does get propagated inside\n   the
    VPN customer network, there may not be readily available\n   mechanisms to provide
    mitigation via traffic filter.\n   This document proposes an additional BGP NLRI
    type (AFI=1, SAFI=134)\n   value, which can be used to propagate traffic filtering
    information\n   in a BGP/MPLS VPN environment.\n   The NLRI format for this address
    family consists of a fixed-length\n   Route Distinguisher field (8 bytes) followed
    by a flow specification,\n   following the encoding defined in this document.
    \ The NLRI length\n   field shall include both the 8 bytes of the Route Distinguisher
    as\n   well as the subsequent flow specification.\n   Propagation of this NLRI
    is controlled by matching Route Target\n   extended communities associated with
    the BGP path advertisement with\n   the VRF import policy, using the same mechanism
    as described in \"BGP/\n   MPLS IP VPNs\" [RFC4364] .\n   Flow specification rules
    received via this NLRI apply only to traffic\n   that belongs to the VRF(s) in
    which it is imported.  By default,\n   traffic received from a remote PE is switched
    via an MPLS forwarding\n   decision and is not subject to filtering.\n   Contrary
    to the behavior specified for the non-VPN NLRI, flow rules\n   are accepted by
    default, when received from remote PE routers.\n"
  title: 8.  Traffic Filtering in BGP/MPLS VPN Networks
- contents:
  - "9.  Monitoring\n   Traffic filtering applications require monitoring and traffic\n
    \  statistics facilities.  While this is an implementation-specific\n   choice,
    implementations SHOULD provide:\n   o  A mechanism to log the packet header of
    filtered traffic.\n   o  A mechanism to count the number of matches for a given
    flow\n      specification rule.\n"
  title: 9.  Monitoring
- contents:
  - "10.  Security Considerations\n   Inter-provider routing is based on a web of
    trust.  Neighboring\n   autonomous systems are trusted to advertise valid reachability\n
    \  information.  If this trust model is violated, a neighboring\n   autonomous
    system may cause a denial-of-service attack by advertising\n   reachability information
    for a given prefix for which it does not\n   provide service.\n   As long as traffic
    filtering rules are restricted to match the\n   corresponding unicast routing
    paths for the relevant prefixes, the\n   security characteristics of this proposal
    are equivalent to the\n   existing security properties of BGP unicast routing.\n
    \  Where it is not the case, this would open the door to further denial-\n   of-service
    attacks.\n   Enabling firewall-like capabilities in routers without centralized\n
    \  management could make certain failures harder to diagnose.  For\n   example,
    it is possible to allow TCP packets to pass between a pair\n   of addresses but
    not ICMP packets.  It is also possible to permit\n   packets smaller than 900
    or greater than 1000 bytes to pass between a\n   pair of addresses, but not packets
    whose length is in the range 900-\n   1000.  Such behavior may be confusing and
    these capabilities should\n   be used with care whether manually configured or
    coordinated through\n   the protocol extensions described in this document.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   A flow specification consists of a sequence of flow
    components, which\n   are identified by a an 8-bit component type.  Types must
    be assigned\n   and interpreted uniquely.  The current specification defines types
    1\n   though 12, with the value 0 being reserved.\n   For the purpose of this
    work, IANA has allocated values for two\n   SAFIs: SAFI 133 for IPv4 dissemination
    of flow specification rules\n   and SAFI 134 for VPNv4 dissemination of flow specification
    rules.\n   The following traffic filtering flow specification rules have been\n
    \  allocated by IANA from the \"BGP Extended Communities Type -\n   Experimental
    Use\" registry as follows:\n      0x8006 - Flow spec traffic-rate\n      0x8007
    - Flow spec traffic-action\n      0x8008 - Flow spec redirect\n      0x8009 -
    Flow spec traffic-remarking\n   IANA created and maintains a new registry entitled:
    \"Flow Spec\n   Component Types\".  The following component types have been\n
    \  registered:\n      Type 1 - Destination Prefix\n      Type 2 - Source Prefix\n
    \     Type 3 - IP Protocol\n      Type 4 - Port\n      Type 5 - Destination port\n
    \     Type 6 - Source port\n      Type 7 - ICMP type\n      Type 8 - ICMP code\n
    \     Type 9 - TCP flags\n      Type 10 - Packet length\n      Type 11 - DSCP\n
    \     Type 12 - Fragment\n   In order to manage the limited number space and accommodate
    several\n   usages, the following policies defined by RFC 5226 [RFC5226] are\n
    \  used:\n   +--------------+-------------------------------+\n   | Range        |
    Policy                        |\n   +--------------+-------------------------------+\n
    \  | 0            | Invalid value                 |\n   | [1 .. 12]    | Defined
    by this specification |\n   | [13 .. 127]  | Specification Required        |\n
    \  | [128 .. 255] | First Come First Served       |\n   +--------------+-------------------------------+\n
    \  The specification of a particular \"flow component type\" must clearly\n   identify
    what the criteria used to match packets forwarded by the\n   router is.  This
    criteria should be meaningful across router hops and\n   not depend on values
    that change hop-by-hop such as TTL or Layer 2\n   encapsulation.\n   The \"traffic-action\"
    extended community defined in this document has\n   46 unused bits, which can
    be used to convey additional meaning.  IANA\n   created and maintains a new registry
    entitled: \"Traffic Action\n   Fields\".  These values should be assigned via
    IETF Review rules only.\n   The following traffic-action fields have been allocated:\n
    \     47 Terminal Action\n      46 Sample\n      0-45 Unassigned\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Acknowledgments\n   The authors would like to thank Yakov Rekhter, Dennis
    Ferguson, Chris\n   Morrow, Charlie Kaufman, and David Smith for their comments.\n
    \  Chaitanya Kodeboyina helped design the flow validation procedure.\n   Steven
    Lin and Jim Washburn ironed out all the details necessary to\n   produce a working
    implementation.\n"
  title: 12.  Acknowledgments
- contents:
  - "13.  Normative References\n   [IEEE.754.1985]  Institute of Electrical and Electronics
    Engineers,\n                    \"Standard for Binary Floating-Point Arithmetic\",\n
    \                   IEEE Standard 754, August 1985.\n   [RFC0793]        Postel,
    J., \"Transmission Control Protocol\", STD 7,\n                    RFC 793, September
    1981.\n   [RFC2119]        Bradner, S., \"Key words for use in RFCs to Indicate\n
    \                   Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2474]
    \       Nichols, K., Blake, S., Baker, F., and D. Black,\n                    \"Definition
    of the Differentiated Services Field (DS\n                    Field) in the IPv4
    and IPv6 Headers\", RFC 2474,\n                    December 1998.\n   [RFC4271]
    \       Rekhter, Y., Li, T., and S. Hares, \"A Border Gateway\n                    Protocol
    4 (BGP-4)\", RFC 4271, January 2006.\n   [RFC4303]        Kent, S., \"IP Encapsulating
    Security Payload (ESP)\",\n                    RFC 4303, December 2005.\n   [RFC4360]
    \       Sangli, S., Tappan, D., and Y. Rekhter, \"BGP\n                    Extended
    Communities Attribute\", RFC 4360,\n                    February 2006.\n   [RFC4364]
    \       Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual\n                    Private
    Networks (VPNs)\", RFC 4364, February 2006.\n   [RFC4760]        Bates, T., Chandra,
    R., Katz, D., and Y. Rekhter,\n                    \"Multiprotocol Extensions
    for BGP-4\", RFC 4760,\n                    January 2007.\n   [RFC5226]        Narten,
    T. and H. Alvestrand, \"Guidelines for\n                    Writing an IANA Considerations
    Section in RFCs\",\n                    BCP 26, RFC 5226, May 2008.\n"
  title: 13.  Normative References
- contents:
  - "Authors' Addresses\n   Pedro Marques\n   Cisco Systems\n   170 West Tasman Drive\n
    \  San Jose, CA  95134\n   US\n   EMail: roque@cisco.com\n   Nischal Sheth\n   Juniper
    Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n   US\n   EMail:
    nsheth@juniper.net\n   Robert Raszuk\n   Cisco Systems\n   170 West Tasman Drive\n
    \  San Jose, CA  95134\n   US\n   EMail: raszuk@cisco.com\n   Barry Greene\n   Juniper
    Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n   US\n   EMail:
    bgreene@juniper.net\n   Jared Mauch\n   NTT America\n   101 Park Ave\n   41st
    Floor\n   New York, NY  10178\n   US\n   EMail: jmauch@us.ntt.net\n   Danny McPherson\n
    \  Arbor Networks\n   EMail: danny@arbor.net\n"
  title: Authors' Addresses
