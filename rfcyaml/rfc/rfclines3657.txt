Abstract This document specifies the conventions for using the Camellia encryption algorithm for encryption with the Cryptographic Message Syntax (CMS).
This document specifies the conventions for using the Camellia encryption algorithm [CamelliaSpec] for encryption with the Cryptographic Message Syntax (CMS) [CMS].
The relevant object identifiers (OIDs) and processing steps are provided so that Camellia may be used in the CMS specification (RFC 3369, RFC 3370) for content and key encryption.
This work was done when the first author worked for NTT.
Camellia Camellia was jointly developed by Nippon Telegraph and Telephone Corporation and Mitsubishi Electric Corporation in 2000.
Camellia specifies the 128 bit block size and 128 , 192 , and 256 bit key sizes, the same interface as the Advanced Encryption Standard (AES).
Camellia is characterized by its suitability for both software and hardware implementations as well as its high level of security.
From a practical viewpoint, it is designed to enable flexibility in software and hardware implementations on 32 bit processors widely used over the Internet and many applications, 8 bit processors used in smart cards, cryptographic hardware, embedded systems, and so on [CamelliaTech].
Moreover, its key setup time is excellent, and its key agility is superior to that of AES.
Camellia has been scrutinized by the wide cryptographic community during several projects for evaluating crypto algorithms.
In particular, Camellia was selected as a recommended cryptographic primitive by the EU NESSIE (
New European Schemes for Signatures, Integrity and Encryption) project [NESSIE] and also included in the list of cryptographic techniques for Japanese e Government systems which were selected by the Japan CRYPTREC (Cryptography Research and Evaluation Committees)
The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document (in uppercase, as shown) are to be interpreted as described in [RFC2119].
Object Identifiers for Content and Key Encryption
This section provides the OIDs and processing information necessary for Camellia to be used for content and key encryption in CMS.
Camellia is added to the set of optional symmetric encryption algorithms in CMS by providing two classes of unique object identifiers (OIDs).
One OID class defines the content encryption algorithms and the other defines the key encryption algorithms.
Thus a CMS agent can apply Camellia either for content or key encryption by selecting the corresponding object identifier, supplying the required parameter, and starting the program code.
OIDs for Content Encryption Camellia is added to the set of symmetric content encryption algorithms defined in [CMSALG].
symmetric encryption algorithm(1) camellia192 cbc(3)
symmetric encryption algorithm(1) camellia256 cbc(4)
} The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain the value of IV:
The plain text is padded according to Section 6.3 of [CMS].
The key wrap/unwrap procedures used to encrypt/decrypt a Camellia content encryption key (CEK) with a Camellia key encryption key (KEK) are specified in Section 3.
Generation and distribution of key  encryption keys are beyond the scope of this document.
} In all cases the parameters field of AlgorithmIdentifier MUST be ABSENT, because the key wrapping procedure itself defines how and when to use an IV.
The OID gives the KEK key size, but does not make any statements as to the size of the wrapped Camellia CEK.
Implementations MAY use different KEK and CEK sizes.
Implementations MUST support the CEK and the KEK having the same length.
If different lengths are supported, the KEK MUST be of equal or greater length than the CEK.
Key Wrap Algorithm Camellia key wrapping and unwrapping are done in conformance with the AES key wrap algorithm [RFC3394], because Camellia and AES have the same block and key sizes, i.e., the block size of 128 bits and key sizes of 128, 192, and 256 bits.
The following notation is used in the description of the key wrapping algorithms: Camellia(K, W)
Encrypt W using the Camellia codebook with key K Camellia 1(K, W)
Return the least significant j bits of W B1
The key encryption key K n
The number of 64 bit key data blocks s
The number of steps in the wrapping process, s
The ith plaintext key data block C[i]
The ith ciphertext data block
The contents of registers A and R[i]
after encryption step t. IV
The 64 bit initial value used during the wrapping process.
In the key wrap algorithm, the concatenation function will be used to concatenate 64 bit quantities to form the 128 bit input to the Camellia codebook.
The extraction functions will be used to split the 128 bit output from the Camellia codebook into two 64 bit quantities.
Camellia Key Wrap Key wrapping with Camellia is identical to Section 2.2.1 of [RFC3394] with "AES" replaced by "Camellia".
The inputs to the key wrapping process are the KEK and the plaintext to be wrapped.
The plaintext consists of n 64 bit blocks, containing the key data being wrapped.
The key wrapping process is described below.
Set A[0] to an initial value (see Section 3.4)
For i   1 to n R[0][i]
P[i] 2) Calculate intermediate values.
For t   1 to s, where s   6n
MSB(64, Camellia(K, A[t 1]   R[t 1][1]))
For i   1 to n 1 R[t][i]
LSB(64, Camellia(K, A[t 1]   R[t 1][1])) 3) Output the results.
For i   1 to n C[i]
An alternative description of the key wrap algorithm involves indexing rather than shifting.
This approach allows one to calculate the wrapped key in place, avoiding the rotation in the previous description.
This produces identical results and is more easily implemented in software.
Set A   IV, an initial value (see Section 3.4)
For i   1 to n R[i]
P[i] 2) Calculate intermediate values.
For j   0 to 5
For i 1 to n B   Camellia(K, A   R[i])
t where t   (n j)
For i   1 to n C[i]   R[i] 3.3.
Unwrap Key unwrapping with Camellia is identical to Section 2.2.2 of [RFC3394], with "AES" replaced by "Camellia".
The inputs to the unwrap process are the KEK and (n 1) 64 bit blocks of ciphertext consisting of previously wrapped key.
It returns n blocks of plaintext consisting of the n 64 bit blocks of the decrypted key data.
For i   1 to n R[s][i]
2) Calculate the intermediate values.
For t   s to 1 A[t 1]   MSB(64, Camellia 1(K, ((A[t]
For i   2 to n R[t 1][i]
R[t][i 1] 3) Output the results.
If A[0] is an appropriate initial value (see Section 3.4), Then For i   1 to n P[i]
Else Return an error The unwrap algorithm can also be specified as an index based operation, allowing the calculations to be carried out in place.
Again, this produces the same results as the register shifting approach.
For i   1 to n R[i]
For j   5 to 0
For i   n to 1 B   Camellia 1(K, (A ^ t)   R[i])
If A is an appropriate initial value (see Section 3.4),
Then For i   1 to n P[i]   R[i]
Else Return an error 3.4.
The initial value (IV) refers to the value assigned to A[0]
in the first step of the wrapping process.
This value is used to obtain an integrity check on the key data.
In the final step of the unwrapping process, the recovered value of A[0] is compared to the expected value of A[0].
If there is a match, the key is accepted as valid, and the unwrapping algorithm returns it.
If there is not a match, then the key is rejected, and the unwrapping algorithm returns an error.
The exact properties achieved by this integrity check depend on the definition of the initial value.
Different applications may call for somewhat different properties; for example, whether there is need to determine the integrity of key data throughout its lifecycle or just when it is unwrapped.
This specification defines a default initial value that supports integrity of the key data during the period it is wrapped (in Section 3.4.1).
Provision is also made to support alternative initial values (in Section 3.4.2).
The default initial value (IV) is defined to be the hexadecimal constant:
The use of a constant as the IV supports a strong integrity check on the key data during the period that it is wrapped.
A6A6A6A6A6A6A6A6, then the chance that the key data is corrupt is 2^ 64.
any other value, then the unwrap must return an error and not return any key data.
When the key wrap is used as part of a larger key management protocol or system, the desired scope for data integrity may be more than just the key data or the desired duration for more than just the period that it is wrapped.
Also, if the key data is not just a Camellia key, it may not always be a multiple of 64 bits.
Alternative definitions of the initial value can be used to address such problems.
According to [RFC3394], NIST will define alternative initial values in future key management publications as needed.
In order to accommodate a set of alternatives that may evolve over time, key wrap implementations that are not application specific will require some flexibility in the way that the initial value is set and tested.
SMIMECapabilities Attribute An S/MIME client SHOULD announce the set of cryptographic functions it supports by using the S/MIME capabilities attribute.
This attribute provides a partial list of OIDs of cryptographic functions and MUST be signed by the client.
The functions' OIDs SHOULD be logically separated in functional categories and MUST be ordered with respect to their preference.
[RFC2633], Section 2.5.2 defines the SMIMECapabilities signed attribute (defined as a SEQUENCE of SMIMECapability SEQUENCEs) to be used to specify a partial list of algorithms that the software announcing the SMIMECapabilities can support.
If an S/MIME client is required to support symmetric encryption with Camellia, the capabilities attribute MUST contain the Camellia OID specified above in the category of symmetric algorithms.
The parameter associated with this OID MUST be CamelliaSMimeCapability.
The SMIMECapability SEQUENCE representing Camellia MUST be DER  encoded as the following hexadecimal strings:
2a 83 08 8c 9a 4b 3d 01
2a 83 08 8c 9a 4b 3d 01
01 01 03 05 00
2a 83 08 8c 9a 4b 3d 01
01 01 04 05 00
When a sending agent creates an encrypted message, it has to decide which type of encryption algorithm to use.
In general the decision process involves information obtained from the capabilities lists included in messages received from the recipient, as well as other information such as private agreements, user preferences, legal restrictions, and so on.
If users require Camellia for symmetric encryption, it MUST be supported by the S/MIME clients on both the sending and receiving side, and it MUST be set in the user preferences.
This document specifies the use of Camellia for encrypting the content of a CMS message and for encrypting the symmetric key used to encrypt the content of a CMS message, and the other mechanisms are the same as the existing ones.
Therefore, the security considerations described in the CMS specifications [CMS][CMSALG] and the AES key wrap algorithm [RFC3394] can be applied to this document.
No security problem has been found on Camellia [CRYPTREC][NESSIE].
symmetric encryption algorithm(1) camellia192 cbc(3)
symmetric encryption algorithm(1) camellia256 cbc(4) }
Camellia IV is the parameter for all the above object identifiers.
Camellia S/MIME Capabilty parameter for all the above object   identifiers.
Camellia Key Wrap Algorithm identifiers
