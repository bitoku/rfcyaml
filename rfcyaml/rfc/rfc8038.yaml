- contents:
  - "                        Exporting MIB Variables\n         Using the IP Flow Information
    Export (IPFIX) Protocol\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a way to complement IP Flow Information\n
    \  Export (IPFIX) Data Records with Management Information Base (MIB)\n   objects,
    avoiding the need to define new IPFIX Information Elements\n   for existing MIB
    objects that are already fully specified.\n   Two IPFIX Options Templates, as
    well as a method for creating IPFIX\n   Options Templates that are used to export
    the extra data required to\n   fully describe Simple Network Management Protocol
    (SNMP) MIB objects\n   in IPFIX, are specified herein.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8038.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Motivation ......................................................5\n   3.
    Terminology .....................................................7\n   4. High-Level
    Solution Overview ....................................8\n   5. MIB Object Value
    Information Elements and the MIB Field\n      Options Template ...............................................10\n
    \     5.1. MIB Field Options Architecture ............................11\n      5.2.
    IPFIX and MIB Data Model ..................................13\n      5.3. MIB
    Field Options - Specifications and Required Fields ....15\n           5.3.1. MIB
    Field Options Template .........................16\n           5.3.2. MIB Type
    Options Template ..........................16\n      5.4. MIB Field Options Template
    Formats ........................17\n           5.4.1. Data Template Containing
    a mibObjectValue Field ....17\n           5.4.2. MIB Field Options Template .........................19\n
    \          5.4.3. MIB Field Options Data Records .....................20\n           5.4.4.
    Options Template Containing a\n                  mibObjectValue Field ...............................21\n
    \          5.4.5. MIB Field Options Template with Semantics Fields ...23\n           5.4.6.
    MIB Field Options Template with Extra MIB\n                  Object Details .....................................24\n
    \     5.5. Use of Field Order in the MIB Field Options Template ......27\n      5.6.
    Identifying the SNMP Context ..............................27\n      5.7. Template
    Management .......................................28\n           5.7.1. Large
    Messages .....................................28\n           5.7.2. Template Withdrawal
    and Reuse ......................29\n      5.8. Exporting Conceptual Rows and Tables
    ......................29\n           5.8.1. Exporting Conceptual Rows - Indexing
    ...............30\n           5.8.2. Exporting Conceptual Rows - mibObjectValueRow
    ......30\n           5.8.3. Exporting Conceptual Rows - AUGMENTS ...............36\n
    \          5.8.4. Exporting Conceptual Tables - mibObjectValueTable ..37\n           5.8.5.
    Exporting Columnar Objects: Using\n                  mibIndexIndicator ..................................38\n
    \  6. Example Use Cases ..............................................39\n      6.1.
    Non-columnar MIB Object: Established TCP Connections ......39\n      6.2. Enterprise-Specific
    MIB Object: Detailing CPU Load\n           History ...................................................42\n
    \     6.3. Exporting a Conceptual Row: The OSPF Neighbor Row .........45\n      6.4.
    Exporting Augmented Conceptual Row: Mapping IF-MIB\n           ID to Name ................................................49\n
    \     6.5. Exporting a Columnar Object: ipIfStatsInForwDatagrams .....55\n      6.6.
    Exporting a Columnar Object Indexed by Information\n           Elements: ifOutQLen
    .......................................58\n      6.7. Exporting with Multiple
    Contexts: The OSPF\n           Neighbor Row Revisited ....................................62\n
    \  7. Configuration Considerations ...................................65\n   8.
    The Collecting Process's Side ..................................66\n   9. Applicability
    ..................................................66\n   10. Security Considerations
    .......................................67\n   11. IANA Considerations ...........................................68\n
    \     11.1. New IPFIX Semantics ......................................68\n           11.1.1.
    snmpCounter .......................................68\n           11.1.2. snmpGauge
    .........................................68\n      11.2. New IPFIX Information
    Elements ...........................69\n           11.2.1. New MIB Object Value
    Information Elements .........69\n           11.2.2. New MIB Field Options Information
    Elements ........75\n           11.2.3. New MIB Type Information Elements .................79\n
    \  12. References ....................................................81\n      12.1.
    Normative References .....................................81\n      12.2. Informative
    References ...................................82\n   Acknowledgments ...................................................84\n
    \  Authors' Addresses ................................................84\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There is growing interest in using IP Flow Information Export
    (IPFIX)\n   as a push mechanism for exporting management information.  Using a\n
    \  push protocol such as IPFIX instead of a polling protocol like SNMP\n   is
    especially interesting in situations where large chunks of\n   repetitive data
    need to be exported periodically.\n   While initially targeted at different problems,
    there is a large\n   parallel between the information transported via IPFIX and
    SNMP.\n   Furthermore, certain Management Information Base (MIB) objects are\n
    \  highly relevant to Flows as they are understood today.  For example,\n   in
    the IPFIX Information Model [IANA-IPFIX], Information Elements\n   coming from
    the SNMP world have already been specified, e.g.,\n   ingressInterface and egressInterface
    both refer to the ifIndex object\n   as defined in [RFC2863].\n   In particular,
    the Management Information Base was designed as a\n   separate system of definitions;
    this opens up the possibility of\n   exporting objects defined via the MIB over
    other protocols.\n   Rather than mapping existing MIB objects to IPFIX Information\n
    \  Elements on a case-by-case basis, it would be advantageous to enable\n   the
    export of any existing or future MIB objects as part of an IPFIX\n   Data Record.
    \ This way, the duplication of Data Models [RFC3444],\n   both as SMIv2 MIB objects
    and IPFIX Information Elements, out of the\n   same Information Model [RFC3444]
    would be avoided.\n   Therefore, the primary goals of this document are:\n   o
    \ to specify a way to complement IPFIX Data Records with MIB\n      objects;\n
    \  o  to avoid the need to define new IPFIX Information Elements for\n      existing
    MIB objects that are already fully specified;\n   o  to allow the correlation
    of SNMP and IPFIX sourced data by\n      exporting them together; and\n   o  to
    allow SNMP push data from SNMP-only devices to be more easily\n      integrated
    into IPFIX-based collection infrastructures.\n"
  title: 1.  Introduction
- contents:
  - "2.  Motivation\n   The intended scope of this work is the addition of MIB variable(s)
    to\n   IPFIX Information Elements in Data Records, in order to complement\n   the
    Data Records with useful and already-standardized information.\n   Special consideration
    is given to the case of an existing\n   Template Record that needs to be augmented
    with some MIB variables\n   whose index is already present in the Template Record
    as an IPFIX\n   Information Element -- for example, a 7-tuple Data Record containing\n
    \  the ingressInterface Information Element, which needs to be augmented\n   by
    interface counters [RFC2863] that are indexed by the respective\n   ingressInterface
    values already contained in the Data Records.  See\n   Section 3 for terminology
    definitions.\n   Many Data Records contain the ingressInterface and/or the\n   egressInterface
    Information Elements.  These Information Elements\n   carry an ifIndex value,
    a MIB object defined in [RFC2863].  In order\n   to retrieve additional information
    about the identified interface, a\n   Collector could simply poll relevant objects
    from the device running\n   the Exporter via SNMP.  However, that approach has
    several problems:\n   o  It requires implementing a mediation function between
    two Data\n      Models, i.e., MIB objects and IPFIX Information Elements.\n   o
    \ Confirming the validity of simple mappings (e.g., ifIndex to\n      ifName)
    requires either checking on a regular basis that the\n      Exporter's network
    management system did not reload or imposing\n      ifIndex persistence across
    an Exporter's reload.\n   o  Synchronization problems occur because counters carried
    in\n      Data Records and counters carried in SNMP messages are retrieved\n      from
    the Exporter at different points in time and thus cannot be\n      correlated.
    \ In the best case, assuming very tight integration of\n      an IPFIX Collector
    with an SNMP polling engine, SNMP data is\n      retrieved shortly after Data
    Records have been received, which\n      implies a delay of the sum of the active
    or idle timeouts (if not\n      null) plus the time to export the Data Record
    to the Collector.\n      If, however, the SNMP data is retrieved by a generic
    Network\n      Management Station (NMS) polling interface statistics, then the\n
    \     time lag between IPFIX counters and SNMP counters can be\n      significantly
    higher.  See [RFC5102] for details regarding active\n      and idle timeouts.\n
    \  This document does not specify how to carry SNMP notifications in\n   IPFIX,
    even if the specifications in this document could potentially\n   allow this.\n
    \  Since IPFIX is a push mechanism, initiated from the Exporter with no\n   acknowledgment
    method, this specification does not provide the\n   ability to execute configuration
    changes.\n   The Distributed Management Expression MIB [RFC2982], which is a\n
    \  mechanism to create new MIB variables based on the content of\n   existing
    ones, could also be advantageous in the context of this\n   specification.  Indeed,
    newly created MIB objects (for example, the\n   link utilization MIB variable),
    created with the Distributed\n   Management Expression MIB [RFC2982], could nicely
    complement\n   Data Records.\n   Another advantage of exporting MIB objects via
    IPFIX is that IPFIX\n   would benefit from an extended series of types to be exported.
    \ The\n   simple and application-wide data types specified in SMIv2 [RFC2578],\n
    \  along with new textual conventions, can be exported within IPFIX and\n   then
    decoded in the Collector.  However, since a textual convention\n   can contain
    almost any name, this document does not extend the\n   existing \"IPFIX Information
    Elements\" subregistry [IANA-IPFIX] that\n   contains informationElementDataType.\n
    \  The overall architectural model is depicted in Figure 1.  The IPFIX\n   Exporter
    accesses the device's instrumentation, which follows the\n   specifications contained
    in MIB modules.  Other management\n   interfaces, such as the Network Configuration
    Protocol (NETCONF) or\n   the device's Command Line Interface (CLI), may provide
    access to the\n   same instrumentation.\n                +------+  +-------+  +.........+
    \ +.....+\n                | SNMP |  | IPFIX |  : NETCONF :  : CLI :\n                +------+
    \ +-------+  +.........+  +.....+\n                    |         |           |
    \         |\n              +--------------------------------------------+\n              |
    Instrumentation (specified in MIB modules) |\n              +--------------------------------------------+\n
    \                      Figure 1: Architectural Model\n"
  title: 2.  Motivation
- contents:
  - "3.  Terminology\n   IPFIX-specific terminology (Information Element, Template,\n
    \  Template Record, Options Template Record, Template Set, Collector,\n   Exporter,
    Data Record, Transport Session, Exporting Process,\n   Collecting Process, etc.)
    used in this document is defined in\n   Section 2 of [RFC7011].  As in [RFC7011],
    these IPFIX-specific terms\n   have the first letter of a word capitalized.\n
    \  This document prefers the more generic term \"Data Record\" (as opposed\n   to
    \"Flow Record\") in relation to the export of MIB objects.\n   Object Identifier
    (MIB OID)\n      An Object Identifier value is an ordered list of non-negative\n
    \     numbers.  For SMIv2, each number in the list is referred to as a\n      sub-identifier.
    \ There are at most 128 sub-identifiers in a value,\n      and each sub-identifier
    has a maximum value of 2^32 - 1\n      (4294967295 decimal).  See [RFC2578], Section
    3.5.\n   MIB Object Identifier Information Element\n      An IPFIX Information
    Element (\"mibObjectIdentifier\") that denotes\n      that a MIB Object Identifier
    (MIB OID) is exported in the\n      (Options) Data Record.  See Section 11.2.2.1.\n
    \  SMIv2 Terminology\n      The key words \"MIB module\", \"MIB object\", \"INDEX\",
    \"AUGMENTS\",\n      \"textual convention\", \"columnar object\", \"conceptual
    row\", and\n      \"conceptual table\" in this document are to be interpreted
    as\n      described in SMIv2 [RFC2578].\n   SMIv2 SYNTAX\n      The SYNTAX key
    words \"INTEGER\", \"Integer32\", \"OCTET STRING\",\n      \"OBJECT IDENTIFIER\",
    \"BITS\", \"IpAddress\", \"Counter32\", \"Gauge32\",\n      \"TimeTicks\", \"Opaque\",
    \"Counter64\", \"Unsigned32\", \"SEQUENCE\", and\n      \"SEQUENCE OF\" in this
    document are to be interpreted as described\n      in SMIv2 [RFC2578].\n   SNMP
    Context Terminology\n      The key words \"snmpEngineID\", \"contextEngineID\",
    and \"contextName\"\n      in this document are to be interpreted as described
    in [RFC3411].\n   mibObjectValue Information Elements\n      \"mibObjectValue
    Information Elements\" refers to any and all of the\n      mibObjectValue Information
    Elements generically.  Any restriction\n      or requirement in this document
    that refers to \"mibObjectValue\"\n      applies to the following Information
    Elements as defined in\n      Section 11.2.1: mibObjectValueInteger, mibObjectValueOctetString,\n
    \     mibObjectValueOID, mibObjectValueBits, mibObjectValueIPAddress,\n      mibObjectValueCounter,
    mibObjectValueGauge,\n      mibObjectValueTimeTicks, mibObjectValueUnsigned,\n
    \     mibObjectValueTable, and mibObjectValueRow.\n   Abstract Data Type\n      Abstract
    Data Types for IPFIX are defined in Section 3.1 of\n      [RFC7012].  This specification
    uses the Abstract Data Types\n      \"unsigned8\", \"unsigned32\", \"unsigned64\",
    \"signed32\", \"octetArray\",\n      \"string\", \"ipv4Address\", and \"subTemplateList\".\n
    \  IE\n      Used as shorthand for \"Information Element\" [RFC7011] in the\n
    \     figures.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n"
  title: 3.  Terminology
- contents:
  - "4.  High-Level Solution Overview\n   This document specifies a method for creating
    IPFIX Options Templates\n   that are used to export the extra data required to
    describe MIB\n   variables (see Section 5.1).\n   This allows IPFIX Templates
    to contain any combination of fields\n   defined by traditional IPFIX Information
    Element(s) and/or MIB Object\n   Identifier(s).  The MIB Object Identifiers can
    reference either\n   non-columnar or columnar MIB object(s).  Enterprise-specific
    MIB\n   Object Identifiers are also supported.\n   This document also defines
    two standard IPFIX Options Templates (see\n   Section 5.3) that are used as part
    of the mechanism to export MIB\n   object metadata:\n   o  MIB Field Options Template
    (Section 5.3.1)\n   o  MIB Type Options Template (Section 5.3.2)\n   This document
    defines three classes of new IPFIX Information\n   Elements.  These are used to
    export values from the MIB, export\n   required Object Identifier information,
    and optionally export type\n   data from a MIB module:\n   o  MIB Object Value
    Information Elements (Section 11.2.1)\n   o  MIB Field Options Information Elements
    (Section 11.2.2)\n   o  MIB Type Information Elements (Section 11.2.3)\n   Additionally,
    this document defines two new IPFIX semantics that are\n   required for the new
    Information Elements:\n   o  snmpCounter (Section 11.1.1)\n   o  snmpGauge (Section
    11.1.2)\n   Two common types defined in SMIv2 are conceptual rows and conceptual\n
    \  tables.  It is desirable that exporting a complete or partial\n   conceptual
    row be simple and efficient.  This is accomplished by\n   using IPFIX Structured
    Data [RFC6313] to reduce repetition of Object\n   Identifier and indexing data.\n
    \  To allow the use of individual columnar objects that make up a\n   conceptual
    row, a method is also specified to explain that a MIB\n   object is indexed by
    other fields in the same Data Flow.  For an\n   individually indexed mibObjectValue,
    the index fields are sent in the\n   same way as any of the other fields in the
    same Data Record and may\n   be mibObjectValue Information Element(s) or other
    existing\n   Information Element(s).\n   Also, in some cases Exporters may not
    want (or be able) to export the\n   full information on how the MIB objects being
    exported are indexed.\n   This may be because the MIB object is being used purely
    as type\n   information or the Exporting Process may not have knowledge of the\n
    \  indexing required.  Therefore, providing index information for\n   columnar
    objects is optional.\n"
  title: 4.  High-Level Solution Overview
- contents:
  - "5.  MIB Object Value Information Elements and the MIB Field Options\n    Template\n
    \  This document defines new mibObjectValue Information Elements (in\n   Section
    11.2.1).  These are used to export MIB objects as part of\n   standard IPFIX Templates.
    \ The mibObjectValue Information Elements\n   contain the actual data values.\n
    \  The Metering Process or Exporting Process may extract the data values\n   for
    mibObjectValue Information Elements from a Process that resides\n   on the same
    device or may capture or create the data required to\n   match the definition
    of the MIB object.  In particular, exporting a\n   value of a MIB object defined
    in a certain MIB module does not imply\n   that the SNMP process on the device
    supports that MIB module.\n   The main issue that arises from exporting values
    of MIB objects in\n   IPFIX is that MIB Object Identifiers do not fit into the
    standard\n   IPFIX Template format [RFC7011], as this only provides a 16-bit\n
    \  Information Element identifier.\n   The values of a MIB object could be exported
    using a MIB-specific\n   Information Element, without providing any Object Identifiers.\n
    \  However, without exporting the actual MIB OID, the full type of the\n   data
    would be unknown, and every field containing MIB object data\n   would appear
    identical.  Without knowing which OID the contents of a\n   field map to, the
    data would be incomprehensible to a Collector.\n   For the values in the mibObjectValue
    Information Elements to be\n   understandable, more meta-information about the
    mibObjectValue\n   Information Elements must be sent as part of the IPFIX export.
    \ The\n   required minimum information to understand each field that is being\n
    \  exported is provided in Section 5.3.1.\n   One approach to this problem would
    be to extend the IPFIX standard to\n   allow extended Field Specifiers so that
    metadata about fields can be\n   included in Data Templates.  This would, however,
    require a new\n   version of the IPFIX standard that may not be backward compatible.\n
    \  However, future versions of IPFIX may export the required MIB\n   metadata
    as part of newly defined IPFIX Set versions.\n   This document defines a MIB Field
    Options Template to export the\n   extra meta-information required for mibObjectValue
    Information\n   Elements.  This is a standard IPFIX Options Template Set that\n
    \  includes a minimum set of required fields (see Section 5.3.1) and may\n   include
    extra fields to provide more meta-information about one of\n   the mibObjectValue
    Information Elements.\n   The MIB Field Options export tells the Collecting Process
    the OID for\n   the MIB object type definition for the following (Template, field).\n"
  - contents:
    - "5.1.  MIB Field Options Architecture\n   Four IPFIX Sets are used together
      to export a Flow that contains\n   mibObjectValue Information Elements.  These
      are:\n   1.  A Template Set that includes the mibObjectValue Information\n       Element.\n
      \         The Template Set informs the Collector that a MIB object value\n          of
      length N will be exported.  This Set may also be an Options\n          Template
      Set.\n   2.  A MIB Field Options Template Set.\n          The MIB Field Options
      Template describes which metadata will\n          be sent for each mibObjectValue
      Information Element being\n          exported.\n   3.  A MIB Field Options Data
      Set.\n          The MIB Field Options Data Set includes the metadata for each\n
      \         MIB object (i.e., the mibObjectIdentifier or\n          mibSubIdentifier).
      \ The metadata about the mibObjectValue\n          Information Elements only
      needs to be resent as per normal\n          Template refreshes or resends.\n
      \  4.  A Data Set.\n          The Data Set contains only the actual data extracted
      from the\n          MIB or described by the MIB module.\n   Figure 2 shows the
      IPFIX Message structure for a MIB field in a\n   Template Set.\n         +-------------------------------------------------------+\n
      \        | IPFIX Message Header                                  |\n         +-------------------------------------------------------+\n
      \        | Template Set         (A)                              |\n         +-------------------------------------------------------+\n
      \        | Options Template Set (B) (MIB Field Options Template) |\n         +-------------------------------------------------------+\n
      \        | Data Set             (B) (MIB Field Options Data)     |\n         +-------------------------------------------------------+\n
      \        | Data Set             (A)                              |\n         +-------------------------------------------------------+\n
      \   Figure 2: IPFIX Message Structure for a MIB Field in a Template Set\n   The
      MIB Field Options Template defines MIB Field Options\n   Data Records.  The
      MIB Field Options Data Records annotate the Data\n   Template with mibObjectValue
      metadata.  Together, the Data Template\n   and MIB Field Options Data Records
      define the Data Records that will\n   be exported.\n   The Data Records (A)
      have a dependency on the two Templates and the\n   MIB Field Options Data Records.\n
      \  More Data Sets that use the same mibObjectValue Information Element\n   can
      then be sent in subsequent packets.\n   Figure 3 shows the relationships between
      the Sets discussed above.\n                                        +------------------------------+\n
      \                                       |MIB Field Options Template (B)|\n                                        +------------------------------+\n
      \                                       |(templateId, elementIndex)    |\n                                        +------------------------------+\n
      \                                       |        mibOID                |\n                                        +------------------------------+\n
      \                                                    |\n                                                     |
      Defines\n                                                     V\n    +------------------------+
      \             +--------------------------+\n    |    Data Template (A)   |              |MIB
      Field Options Data (B)|\n    +------------------------+              +--------------------------+\n
      \   |Field 0 - regular IE    |              |                          |\n    +------------------------+
      \             +--------------------------+\n    |Field 1-mibObjectValue  | <-----------
      | (X,1) = OID              |\n    +------------------------+   Annotates  +--------------------------+\n
      \   |Field 2-mibObjectValue  | <----------- | (X,2) = OID              |\n    +------------------------+
      \             +--------------------------+\n                |                                    |\n
      \               |------------------------------------/\n                |\n
      \               | Defines\n                |\n                V\n    +------------------------+\n
      \   |    Data Records (A)    |\n    |------------------------|\n    | Field
      0 data           |\n    +------------------------+\n    | Field 1 data           |\n
      \   +------------------------+\n    | Field 2 data           |\n    +------------------------+\n
      \                  Figure 3: Relationships between Sets\n"
    title: 5.1.  MIB Field Options Architecture
  - contents:
    - "5.2.  IPFIX and MIB Data Model\n   [RFC2578], Section 7.1 specifies that the
      SYNTAX clause for a MIB\n   object defines the abstract data structure of an
      object and what it\n   must contain:\n   \"The data structure must be one of
      the following: a base type, BITS,\n   or a textual convention.  (SEQUENCE OF
      and SEQUENCE are also possible\n   for conceptual tables, see section 7.1.12).\"\n
      \  For each of the SYNTAX clause options, this document specifies\n   exactly
      which mibObjectValue Information Element to use.\n   If a MIB object to be exported
      is a textual convention, the\n   definition of the textual convention must be
      consulted and the SYNTAX\n   clause used to determine the correct base type.
      \ This may recurse if\n   the textual convention is defined in terms of another
      textual\n   convention, but this should end at a base type.\n   If the SYNTAX
      clause contains a textual convention or sub-typing\n   (e.g., integerSubType,
      octetStringSubType) [RFC2578], the\n   mibObjectSyntax Information Element SHOULD
      be used to export this\n   detail to the Collecting Process.\n   The options
      for the SYNTAX clause are then mapped as follows:\n   +-------------+-------------------+---------------------------------+\n
      \  | Section in  | SYNTAX            | mibObjectValue Information      |\n   |
      RFC 2578    |                   | Element                         |\n   +-------------+-------------------+---------------------------------+\n
      \  | 7.1.1       | INTEGER/Integer32 | mibObjectValueInteger           |\n   |
      7.1.2       | OCTET STRING      | mibObjectValueOctetString       |\n   | 7.1.3
      \      | OBJECT IDENTIFIER | mibObjectValueOID               |\n   | 7.1.4       |
      BITS              | mibObjectValueBits              |\n   | 7.1.5       | IpAddress
      \        | mibObjectValueIPAddress         |\n   | 7.1.6       | Counter32         |
      mibObjectValueCounter           |\n   | 7.1.7       | Gauge32           | mibObjectValueGauge
      \            |\n   | 7.1.8       | TimeTicks         | mibObjectValueTimeTicks
      \        |\n   | 7.1.9       | Opaque            | mibObjectValueOctetString
      \      |\n   | 7.1.10      | Counter64         | mibObjectValueCounter           |\n
      \  | 7.1.11      | Unsigned32        | mibObjectValueUnsigned          |\n   |
      7.1.12      | SEQUENCE          | mibObjectValueRow               |\n   | 7.1.12
      \     | SEQUENCE OF       | mibObjectValueTable             |\n   +-------------+-------------------+---------------------------------+\n
      \              Table 1: SMIv2 SYNTAX to mibObjectValue Types\n   Values are
      encoded as per the standard IPFIX encoding of Abstract\n   Data Types.  The
      only new encoding reference in this document is that\n   Object Identifiers
      (OIDs) will be encoded as per ASN.1/BER [X.690] in\n   an octetArray.\n   The
      mibObjectValue and mibObjectIdentifier Information Elements are\n   standard
      IPFIX fields.  Therefore, the E bit of the mibObjectValue or\n   mibObjectIdentifier
      Information Elements is set to 0.\n   The MIB object being exported may be defined
      in an enterprise-\n   specific MIB module, but the Information Elements defined
      in this\n   standard are still exported with the E bit set to 0.  The OID being\n
      \  exported indicates that the MIB object was defined in an\n   enterprise-specific
      MIB module.\n"
    title: 5.2.  IPFIX and MIB Data Model
  - contents:
    - "5.3.  MIB Field Options - Specifications and Required Fields\n   For each mibObjectValue
      Information Element that is defined in an\n   IPFIX Template, a MIB Field Options
      Data Record will be exported that\n   provides the required minimum information
      to define the MIB object\n   that is being exported (see Section 5.3.1).\n   The
      MIB Field Options Data Records are defined in a Template referred\n   to in
      this document as a MIB Field Options Template with the format\n   specified
      in Section 5.4.\n   The MIB Field Options Template and MIB Field Options Data
      Records\n   MUST be exported in the same IPFIX Message as any Template that
      is\n   using a mibObjectValue Information Element.  Note that this places an\n
      \  implicit size constraint on the export.\n   This whole set of Templates and
      MIB Field Options Data Records MUST\n   all be exported prior to the corresponding
      Data Records that depend\n   upon them.  That is, the export order MUST be:\n
      \  1.  Data Template for mibObjectValue Information Elements (Set ID 2)\n   2.
      \ MIB Field Options Template (Set ID 3)\n   3.  MIB Field Options Data Records
      (Set ID >= 256)\n   4.  MIB Object Value Data Records (Set ID >= 256)\n   Note
      that the ID of an identical MIB Field Options Template that has\n   already
      been exported MAY be reused without exporting the Template\n   again.\n   IPFIX
      Set IDs are defined in Section 3.3.2 of [RFC7011].  A value of\n   2 indicates
      a Template Set, a value of 3 indicates an Options\n   Template Set, and values
      256 and above indicate Data Sets.\n"
    - contents:
      - "5.3.1.  MIB Field Options Template\n   Three fields are REQUIRED to unambiguously
        export a standalone\n   mibObjectValue Information Element with a MIB Field
        Options Template:\n   o  (scope) templateId [IANA-IPFIX]\n   o  (scope) informationElementIndex
        [IANA-IPFIX]\n   o  mibObjectIdentifier (Section 11.2.2.1) or mibSubIdentifier\n
        \     (Section 11.2.2.2)\n   These are the minimum fields required in a MIB
        Field Options Template\n   (see Section 5.4.2).\n   The mibObjectIdentifier
        is used to provide the OID for all\n   mibObjectValue Information Elements
        exported, except when IPFIX\n   Structured Data [RFC6313] is being used to
        export a conceptual row\n   (see Section 5.8.2).\n   While the following are
        optional, they are nevertheless RECOMMENDED\n   in certain circumstances,
        as described in the referenced sections:\n   o  mibCaptureTimeSemantics\n
        \     (discussed in Section 5.4.5; Information Element defined in\n      Section
        11.2.2.4)\n   o  mibIndexIndicator\n      (discussed in Section 5.8.5; Information
        Element defined in\n      Section 11.2.2.3)\n   o  mibContextEngineID\n      (discussed
        in Section 5.6; Information Element defined in\n      Section 11.2.2.5)\n
        \  o  mibContextName\n      (discussed in Section 5.6; Information Element
        defined in\n      Section 11.2.2.6)\n"
      title: 5.3.1.  MIB Field Options Template
    - contents:
      - "5.3.2.  MIB Type Options Template\n   There are also fields that provide
        type information from a MIB object\n   definition that MAY be exported to
        a Collecting Process.\n   Type information is statically defined in a MIB
        module; it is not\n   expected to change.  However, the additional information
        about the\n   MIB object may help a Collecting Process that does not have
        access to\n   the MIB module.\n   To export a MIB Type Options Template, the
        mibObjectIdentifier is\n   RECOMMENDED as a Scope Field so that it matches
        the MIB Field Options\n   Template.  Any combination of the other MIB Type
        fields may be\n   included.\n   o  (scope) mibObjectIdentifier (see Section
        11.2.2.1)\n   o  mibObjectName (see Section 11.2.3.1)\n   o  mibObjectDescription
        (see Section 11.2.3.2)\n   o  mibObjectSyntax (see Section 11.2.3.3)\n   o
        \ mibModuleName (see Section 11.2.3.4)\n"
      title: 5.3.2.  MIB Type Options Template
    title: 5.3.  MIB Field Options - Specifications and Required Fields
  - contents:
    - '5.4.  MIB Field Options Template Formats

      '
    - contents:
      - "5.4.1.  Data Template Containing a mibObjectValue Field\n   The Template
        Record format of a Template that uses a mibObjectValue\n   Information Element
        is identical to the standard IPFIX format as\n   defined in [RFC7011], so
        a field using a mibObjectValue Information\n   Element is specified using
        standard IPFIX Field Specifiers per\n   [RFC7011].\n   The only extra requirement
        on a Template Record using one or more\n   mibObjectValue Information Elements
        is that it MUST export the\n   required metadata specified in Section 5.3.1
        for EACH mibObjectValue\n   Information Element.\n   If multiple MIB Field
        Options Data Records that refer to a\n   mibObjectValue are received, the
        latest MUST be used.  This matches\n   the expected behavior of IPFIX Templates.\n
        \  There is a one-to-one mapping between each mibObjectValue Information\n
        \  Element and a MIB Field Options Data Record.\n   A MIB Field Options Template
        and corresponding Data Record MUST be\n   exported to provide the minimum
        required metadata.\n   Figure 4 shows an IPFIX Template Set using a mibObjectValue\n
        \  Information Element.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 2           |          Length = 16          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |         Field Count = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |0| IE = Existing IPFIX Field   |        Field Length           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |0| IE = <mibObjectValue>       |        Field Length (MIB)     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 4: IPFIX Template Set Using mibObjectValue Information Element\n
        \  Where:\n      <mibObjectValue>\n         One of the mibObjectValue IPFIX
        Information Elements that\n         denotes that MIB object data (i.e., the
        value of a MIB object)\n         will be exported in the (Options) Data Record.\n
        \        This could be any one of the mibObjectValue Information\n         Elements
        defined in Section 11.2.1: mibObjectValueInteger,\n         mibObjectValueOctetString,
        mibObjectValueOID,\n         mibObjectValueBits, mibObjectValueIPAddress,\n
        \        mibObjectValueCounter, mibObjectValueGauge,\n         mibObjectValueTimeTicks,
        mibObjectValueUnsigned,\n         mibObjectValueTable, and mibObjectValueRow.\n
        \        When a mibObjectValue Information Element is used, the MIB\n         Object
        Identifier (\"mibObjectIdentifier\") MUST be exported via\n         a MIB
        Field Options Template and MIB Field Options Data Record.\n         See Section
        5.3.1.\n      Field Length (MIB)\n         The length of the encoded MIB object
        data in the corresponding\n         Data Records, in octets.  See [RFC7011]
        for a detailed\n         definition.  Note that the Field Length can be expressed
        using\n         reduced-size encoding per [RFC7011].  Note that the Field\n
        \        Length may be encoded using variable-length encoding per\n         [RFC7011].\n"
      title: 5.4.1.  Data Template Containing a mibObjectValue Field
    - contents:
      - "5.4.2.  MIB Field Options Template\n   The MIB Field Options Template is
        a standard Options Template that\n   defines the fields that will be exported
        to provide enough metadata\n   about a mibObjectValue Information Element
        so that the Collector can\n   tie the data values in the mibObjectValue Information
        Element back to\n   the definition of the MIB object.\n   All MIB Field Options
        Templates contain the fields specified in\n   Section 5.3.1.\n   Figure 5
        shows the required fields to export a mibObjectIdentifier\n   for the MIB
        Field Options Template format.\n      0                   1                   2
        \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      Figure 5: MIB Field Options Template Format - Required Fields\n   Where:\n
        \     templateId\n         The first Scope Field is an IPFIX Information Element
        that\n         denotes that a Template Identifier will be exported as part
        of\n         the MIB Field Options Data Record.  This Template Identifier,\n
        \        paired with an index into that Template (the\n         \"informationElementIndex\"
        field), uniquely references one\n         mibObjectValue Information Element
        being exported.\n      informationElementIndex\n         The second Scope
        Field is an IPFIX Information Element that\n         denotes a zero-based
        index into the fields defined by a\n         Template.  When paired with a
        \"templateId\", this uniquely\n         references one mibObjectValue Information
        Element being\n         exported.\n      mibObjectIdentifier\n         An
        IPFIX Information Element that denotes the MIB Object\n         Identifier
        for the mibObjectValue Information Element exported\n         in the (Options)
        Template Record.\n         When a MIB Object Value Information Element is
        used, the MIB\n         Object Identifier MUST be specified in the MIB Field
        Options\n         Template Record or specified by other means.\n         The
        Object Identifier is encoded in the IPFIX Data Record in\n         ASN.1/BER
        [X.690] format.\n         Variable-length encoding SHOULD be used with the\n
        \        mibObjectIdentifier so that multiple MIB OIDs of different\n         lengths
        can be exported efficiently.  This will also allow\n         reuse of the
        MIB Field Options Template.\n         Variable-length encoding is indicated
        by the Field Length value\n         of 65535, per Sections 3.2 and 7 of [RFC7011].
        \ The RECOMMENDED\n         use of variable-length encoding for mibObjectIdentifier
        fields\n         is indicated in subsequent figures by placing 65535 in the\n
        \        relevant length fields.\n"
      title: 5.4.2.  MIB Field Options Template
    - contents:
      - "5.4.3.  MIB Field Options Data Records\n   The MIB Field Options Data Records
        conform to the Template\n   Specification in the MIB Field Options Template.
        \ There may be\n   multiple MIB Field Options Data Records exported.\n   The
        Collecting Process MUST store all received MIB Field Options Data\n   information
        for the duration of each Transport Session, because the\n   Collecting Process
        will need to refer to the extra meta-information\n   to fully decode each
        mibObjectValue Information Element.\n   Figure 6 shows the format of the exported
        MIB Field Options\n   Data Record, detailing the metadata that will be exported
        to match\n   the Template in Figure 5.\n      0                   1                   2
        \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID               |          Length = N           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        templateId             |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   VLEN        |                  mibObjectIdentifier ...      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        ... mibObjectIdentifier (continued) ...                |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        templateId             |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |    VLEN       |  mibObjectIdentifier  ...                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        ... mibObjectIdentifier (continued) ...                |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \            Figure 6: Format of MIB Field Options Data Record\n   VLEN contains
        the variable length of the mibObjectIdentifier per\n   Section 7 of [RFC7011].\n"
      title: 5.4.3.  MIB Field Options Data Records
    - contents:
      - "5.4.4.  Options Template Containing a mibObjectValue Field\n   The Options
        Template Record format of a Template that uses a\n   mibObjectValue Information
        Element is identical to the standard\n   format as defined in [RFC7011].  The
        mibObjectValue Information\n   Element is specified using standard Field Specifiers
        per [RFC7011].\n   A mibObjectValue Information Element can be either a Scope
        Field or a\n   non-Scope Field in an Options Template Record.\n   The only
        extra requirement on an Options Template Record using one or\n   more mibObjectValue
        Information Elements is that it MUST export the\n   required metadata specified
        in Section 5.3.1 for EACH mibObjectValue\n   Information Element.\n   An IPFIX
        Options Template Record MUST export a MIB Field Options\n   Template and Data
        Record to provide the minimum required metadata for\n   each mibObjectValue
        Information Element.\n   Figure 7 shows an IPFIX Options Template Set using
        an existing IPFIX\n   field as a Scope Field and with a mibObjectValueInteger
        Information\n   Element as a non-Scope Field, while Figure 8 shows an IPFIX
        Options\n   Template Set using a mibObjectValueInteger Information Element
        as a\n   Scope Field with an existing IPFIX field as a non-Scope Field.\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 18          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |         Field Count = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |      Scope Field Count = 1    |0| IE = Existing IPFIX Field   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         Figure 7: IPFIX Options Template Set Using a Non-Scope\n                        mibObjectValueInteger
        Field\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 18          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |         Field Count = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |      Scope Field Count = 1    |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = Existing IPFIX Field   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           Figure 8: IPFIX Options Template Set Using a Scope\n                        mibObjectValueInteger
        Field\n"
      title: 5.4.4.  Options Template Containing a mibObjectValue Field
    - contents:
      - "5.4.5.  MIB Field Options Template with Semantics Fields\n   A MIB Field
        Options Template MAY specify that extra Information\n   Elements will be exported
        to record how the mibObjectValue was\n   collected.\n   Alternatively, one
        of the existing IPFIX observationTime* elements\n   [IANA-IPFIX] may be exported
        to specify exactly when the value was\n   collected.\n   Figure 9 shows the
        MIB Field Options Template for a non-columnar\n   field with Semantic Data.\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibCaptureTimeSemantics|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      Figure 9: MIB Field Options Template for a Non-columnar Field\n                            with
        Semantic Data\n   Where:\n      mibObjectIdentifier\n         Note the use
        of variable-length encoding for this field.\n      mibCaptureTimeSemantics\n
        \        The MIB Capture Time Semantics IPFIX Information Element, as\n         defined
        in Section 11.2.2.4.\n         It is RECOMMENDED to include this field when
        exporting a\n         mibObjectValue Information Element that specifies counters
        or\n         statistics, particularly for situations with long-lived Flows.\n"
      title: 5.4.5.  MIB Field Options Template with Semantics Fields
    - contents:
      - "5.4.6.  MIB Field Options Template with Extra MIB Object Details\n   The
        OID exported within the mibObjectIdentifier IPFIX Information\n   Element
        provides an OID reference to a MIB object type definition\n   that will fully
        describe the MIB object data being exported.\n   However, an Exporting Process
        MAY decide to include some extra fields\n   to more fully describe the MIB
        object that is being exported with a\n   mibObjectValue Information Element.\n
        \  This can be helpful if the Collecting Process may not have access to\n
        \  the MIB module.\n   The Exporting Process can either include the fields
        with extra object\n   details as part of the MIB Field Options Template or
        export a\n   separate Options Template and a Data Record that maps MIB OIDs
        in\n   mibObjectIdentifier fields to the object details.\n   If only a few
        fields are being exported, then including extra type\n   data in the MIB Field
        Options export will be more efficient.\n   The MIB Field Options Template
        for a non-columnar field with extra\n   MIB object details is shown in Figure
        10.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 38          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |        Field Count = 7        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectSyntax        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectName          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectDescription   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibModuleName          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Figure 10: MIB Field Options Template for a Non-columnar Field\n                       with
        Extra MIB Object Details\n   Where:\n      mibObjectSyntax\n         The MIB
        object syntax string as defined in Section 11.2.3.3.\n         Note that a
        separate mibObjectSyntax Information Element is\n         required (rather
        than extend the existing \"IPFIX Information\n         Elements\" subregistry
        [IANA-IPFIX] that contains\n         informationElementDataType) because the
        SYNTAX clause could\n         contain almost any name.\n      mibObjectName\n
        \        The textual name of a mibObjectIdentifier object.\n      mibObjectDescription\n
        \        The textual description for a mibObjectIdentifier.\n      mibModuleName\n
        \        The textual name of the MIB module that defines a MIB object.\n      Note
        the use of variable-length encoding for the\n      mibObjectIdentifier, mibObjectSyntax,
        mibObjectName,\n      mibObjectDescription, and mibModuleName, since these
        are all\n      string fields.\n   The MIB details can be exported in Data
        Records specified using a\n   regular IPFIX Options Template Record [RFC7011],
        as shown in\n   Figure 11.  This may be more efficient, as the bulk of this
        data is\n   text based and SHOULD be exported only once to the Collecting
        Process\n   if there are many MIB objects being exported.  This prevents this\n
        \  large textual data from being included for every use of a\n   mibObjectValue
        Information Element.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 30          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |        Field Count = 5        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 1       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectSyntax        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectName          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibObjectDescription   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |0| IE = mibModuleName          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Figure 11: Alternative mibObjectIdentifier Options Template Set\n                            with
        Object Details\n"
      title: 5.4.6.  MIB Field Options Template with Extra MIB Object Details
    title: 5.4.  MIB Field Options Template Formats
  - contents:
    - "5.5.  Use of Field Order in the MIB Field Options Template\n   The MIB Field
      Options Template export makes use of the\n   informationElementIndex [IANA-IPFIX]
      to specify which field in the\n   Template the metadata relates to; this avoids
      any ordering\n   constraints on the Data Template.  The mibObjectValue Information\n
      \  Elements in an IPFIX export can be in any order in the export packet.\n   However,
      fields used as an INDEX MUST be in the same order as the\n   order specified
      in the INDEX clause of the conceptual row MIB object.\n   The informationElementIndex
      specifies which field in the Template\n   extra information is being provided
      for.\n   This is analogous to standard IPFIX Template Sets, which also specify\n
      \  the order of the fields and provide their type and size.\n   If the Template
      changes such that the order is different, then the\n   MIB Field Options Data
      MUST be resent to reflect the new ordering.  A\n   new Template ID MUST be used
      to reflect that the ordering has\n   changed.  Older MIB Field Options Data
      may refer to the incorrect\n   field.\n   A templateId [IANA-IPFIX] is only
      locally unique within a combination\n   of an Observation Domain and Transport
      Session.  As such, each MIB\n   Field Options Data Record can only refer to
      templateIds within the\n   same Observation Domain and session.\n"
    title: 5.5.  Use of Field Order in the MIB Field Options Template
  - contents:
    - "5.6.  Identifying the SNMP Context\n   Each MIB OID is looked up in a specific
      context, usually the default\n   context.  If exporting a MIB OID value that
      isn't in the default\n   context, then the context MUST be identified by including
      the\n   mibContextEngineID (see Section 11.2.2.5) and mibContextName (see\n
      \  Section 11.2.2.6) fields in the MIB Field Options Template and\n   associated
      MIB Field Options Data Records, or be included in the same\n   Template as the
      mibObjectValue field.\n   This context data MUST be included for each field
      that is not in the\n   default context.\n   The context information MAY be exported
      as part of the Template that\n   includes the mibObjectValue Information Element,
      or the context\n   information MAY be exported in the MIB Field Options Data
      Record that\n   refers to the field.  Context fields exported in the same Template\n
      \  MUST take precedence over those that refer to the Template.  Context\n   fields
      MUST apply to all mibObjectValue Information Elements in the\n   same Template,
      and there MUST NOT be duplicates of mibContextName or\n   mibContextEngineID
      in a Template.\n   So, a MIB Field Options Template MAY specify no context information,\n
      \  just the context engine ID or both the context engine and context\n   name.
      \ This allows the Exporter to export the bulk of data in the\n   default context
      and only tag those items that are required.\n   Since the MIB Field Options
      Template applies for all the Data Records\n   of a Template, using context fields
      in the MIB Field Options Data\n   Template requires that each mibContextEngineID
      / mibContextName pair\n   have its own Template.\n"
    title: 5.6.  Identifying the SNMP Context
  - contents:
    - "5.7.  Template Management\n   Templates are managed as per Section 8 of [RFC7011],
      with the\n   additional constraint that the MIB Field Options Template and MIB\n
      \  Field Options Data Records MUST be exported in the same IPFIX Message\n   as
      any (Options) Template Record that uses a mibObjectValue\n   Information Element.\n
      \  When exporting over a Stream Control Transmission Protocol (SCTP)\n   transport
      [RFC4960], the MIB Field Options Data Records MUST be\n   exported reliably
      and in the same SCTP stream as their associated\n   Templates per [RFC6526].\n
      \  If a Template using a mibObjectValue Information Element is resent\n   for
      any reason, the Data Records it depends on MUST be sent as well.\n   If a Template
      is replaced with a new (Options) Template, then a new\n   MIB Field Options
      Data Record MUST be sent with the replacement\n   referencing the new Template
      ID.\n   An Exporting Process SHOULD reuse MIB Field Options Template IDs when\n
      \  the Templates are identical.  Each (Options) Template Record MUST\n   still
      be accompanied by a copy of the MIB Field Options Template.\n"
    - contents:
      - "5.7.1.  Large Messages\n   The requirement to export the MIB Field Options
        Template and MIB\n   Field Options Data Records in the same IPFIX Message
        as any (Options)\n   Template Record that uses a mibObjectValue Information
        Element may\n   result in very large IPFIX Messages.\n   In environments with
        restricted Message sizes, and only when a\n   reliable SCTP transport is being
        used, the MIB Field Options\n   Template, MIB Field Options Data, Data Template,
        and Data Records MAY\n   be exported in separate Messages in the same SCTP
        stream, provided\n   that their order is maintained.\n"
      title: 5.7.1.  Large Messages
    - contents:
      - "5.7.2.  Template Withdrawal and Reuse\n   Data Records containing mibObjectValue
        Information Elements MUST NOT\n   be exported if their corresponding Data
        Template or MIB Field Options\n   Template has been withdrawn, since the MIB
        Field Options Template\n   MUST be exported in the same IPFIX Message as the
        Data Template that\n   it annotates, except as allowed by the caveat mentioned
        in\n   Section 5.7.1.\n   MIB Field Options Template IDs MUST NOT be reused
        while they are\n   required by any existing Data Templates.\n"
      title: 5.7.2.  Template Withdrawal and Reuse
    title: 5.7.  Template Management
  - contents:
    - "5.8.  Exporting Conceptual Rows and Tables\n   There are three approaches for
      an IPFIX Exporting Process to export\n   the values of columnar objects:\n   1.
      \ Ignoring the indexing of columnar objects\n   2.  Exporting conceptual rows
      / table objects using IPFIX Structured\n       Data [RFC6313]\n   3.  Exporting
      individual indexed columnar objects\n   Firstly, a subordinate columnar object
      may be used purely as a data\n   type.  In this case, there is no index information
      or relation to a\n   conceptual row object provided by the Exporting Process.\n
      \  Secondly, mibObjectValueRow or mibObjectValueTable can be used to\n   export
      partial or complete conceptual rows, using IPFIX Structured\n   Data [RFC6313].\n
      \  Thirdly, in a mixed option/data IPFIX/MIB Template, the\n   mibObjectValue
      Information Element can have the values of the INDEX\n   clause of the conceptual
      row provided by other fields in the\n   Data Record.  In this case, each mibObjectValue
      Information Element\n   must specify which other field(s) in the Template is
      providing the\n   index information.\n"
    - contents:
      - "5.8.1.  Exporting Conceptual Rows - Indexing\n   This document defines two
        forms of indexing that can be used for\n   conceptual row MIB objects:\n   Indexing
        based on IPFIX Structured Data [RFC6313] is used solely by\n   the mibObjectValueRow
        Information Element.  Each conceptual row of\n   the MIB object corresponds
        to a single Data Record exported.  The\n   index fields defined in the INDEX
        clause of the MIB object MUST all\n   be present in the same order as the
        Scope Fields.  This allows a\n   simple table export of a conceptual row MIB
        object without any extra\n   fields required to indicate which fields make
        up the conceptual row\n   INDEX.\n   Field-based indexing is used by giving
        each mibObjectValue\n   Information Element a mibIndexIndicator to flag the
        required index\n   fields.  This allows complex indexing or mixing of existing
        IPFIX\n   Information Elements with MIB fields, with minimum overhead.  It
        also\n   allows multiple columnar MIB objects from different conceptual rows\n
        \  to be exported with complete indexing in one IPFIX Template.\n"
      title: 5.8.1.  Exporting Conceptual Rows - Indexing
    - contents:
      - "5.8.2.  Exporting Conceptual Rows - mibObjectValueRow\n   The simplest approach
        to exporting a complete or partial conceptual\n   row object is done with
        the mibObjectValueRow Information Element.\n   This is an IPFIX Structured
        Data subTemplateList Information Element\n   as detailed in [RFC6313].  The
        Template specified MUST be an Options\n   Template.  It also MUST have the
        fields specified in the INDEX clause\n   of the conceptual row object as the
        Scope Fields in the MIB Field\n   Options Template and Data Set.\n   An overview
        of this architecture is given in Figure 12.  This shows\n   that the full
        MIB object type definition OID is exported for the\n   mibObjectValueRow conceptual
        row field but that the individual\n   columnar objects only require the sub-identifier
        to be exported.  To\n   make the diagram clearer, the Templates for the MIB
        Field Options\n   Templates are not shown.\n        +---------------------------+
        \   +------------------------+\n        | Data Template             |    |
        MIB Field Options Data |\n        |                           |    |                        |\n
        \       | mibObjectValueRow         |<---| OID                    |\n        +---------------------------+
        \   +------------------------+\n          |\n          | +-----------------------+
        \   +------------------------+\n          | | Options Template      |    |
        MIB Field Options Data |\n          | |                       |    |                        |\n
        \         | | Scope mibObjectValue* |<---| mibSubIdentifier       |\n          |
        |       mibObjectValue* |<---| mibSubIdentifier       |\n          | +-----------------------+
        \   +------------------------+\n          |             |\n          V             V\n
        \       +---------------------------+\n        | Data Flows                |\n
        \       |                           |\n        | subTemplateList (1 entry)
        |\n        +---------------------------+\n           Figure 12: Architecture
        for Exporting Conceptual Rows\n                          with mibObjectValueRow\n
        \  The mibIndexIndicator is not required for each individual\n   mibObjectValue
        Information Element, as mibObjectValueRow provides a\n   structure that includes
        the index details.\n   When indexing based on IPFIX Structured Data [RFC6313]
        is used, all\n   Scope Fields MUST be the INDEX objects in the same order
        as defined\n   in the INDEX clause of the conceptual row being exported.\n
        \  Each conceptual table MIB object has two related OIDs.  There is an\n   OID
        that refers to the table with the syntax of SEQUENCE OF and an\n   OID that
        refers to each entry or conceptual row with the syntax of\n   SEQUENCE.  The
        OID for the SEQUENCE of a conceptual row MUST be\n   exported.\n   For example,
        in the IF-MIB [RFC2863], the OID for ifEntry should be\n   exported rather
        than the OID for ifTable.  The OID for the table (in\n   this case, ifTable)
        can be derived by removing one sub-identifier\n   from the ifEntry OID.\n
        \  The full OID for the conceptual row MIB object type definition being\n
        \  exported with the mibObjectValueRow Information Element MUST be\n   exported.
        \ However, the fields that are members of the conceptual row\n   need not
        have the full OID of their MIB object type definition\n   exported.  Instead,
        the mibSubIdentifier Information Element can be\n   used to document which
        entry in the conceptual row the field is.\n   In this case, the exported Flow
        will contain a single complete or\n   partial row from a table inside a single
        field of the Data Record.\n   There may be MIB objects that are specified
        in the INDEX of the\n   conceptual row but not columnar objects of the same
        conceptual row;\n   for these, the Exporter MUST provide the full OID in a\n
        \  mibObjectIdentifier field.\n   So, for a conceptual row object with the
        OID \"1.2.3.4.5.6\" the OID of\n   the type definitions for columnar objects
        \"1.2.3.4.5.6.1\"\n   \"1.2.3.4.5.6.2\" can be exported with just a mibSubIdentifier
        of \"1\"\n   and \"2\", respectively.\n   The mibObjectValue Information Elements
        exported using the\n   mibObjectValueRow export MUST all either be objects
        defined in the\n   INDEX clause, columnar objects of the same conceptual row
        object, or\n   columnar objects that augment the same conceptual row.\n   The
        IPFIX Structured Data [RFC6313] subTemplateList format requires\n   the Structured
        Data Type Semantics to be specified.  Unless there is\n   a more appropriate
        option in the \"IPFIX Structured Data Types\n   Semantics\" subregistry [IANA-IPFIX],
        the \"undefined\" Structured Data\n   Type Semantics can be used.\n   Figure
        13 shows an IPFIX Template for an IPFIX Structured Data\n   [RFC6313] export
        of a conceptual row, while Figure 14 shows an IPFIX\n   Options Template for
        a complete conceptual row with five columns and\n   two index fields.  Figure
        15 shows the MIB Field Options Template for\n   a conceptual row field.  Figure
        16 shows the MIB Field Options\n   Template for the columns inside the conceptual
        row.  Figure 17 shows\n   the OID Data for the conceptual row that will be
        exported.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 2           |          Length = 12          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID = 300       |         Field Count = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |0| IE = mibObjectValueRow      |         Field Length          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \             Figure 13: IPFIX Template for a Conceptual Row\n      0                   1
        \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 30          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID = 301       |         Field Count = 5       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |      Scope Field Count = 2    |0| IE = mibObjectValue INDEX1  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = mibObjectValue INDEX2  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = mibObjectValue COLUMN3 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = mibObjectValue COLUMN4 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |0| IE = mibObjectValue COLUMN5 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        Figure 14: IPFIX Options Template for a mibObjectValueRow\n                  with
        Five Columns and Two Index Fields\n      0                   1                   2
        \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID = 302       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    Figure 15: MIB Field Options Template for a Conceptual Row Object\n   Where:\n
        \     templateId\n         The templateId for the MIB option that will be
        exported.\n      mibObjectIdentifier\n         The MIB OID for the conceptual
        row that is being exported.\n         Note the use of variable-length encoding
        for this field.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID = 303       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibSubIdentifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       Figure 16: MIB Field Options Template for Columnar Objects\n                           of
        a Conceptual Table\n   Where:\n      templateId\n         The templateId used
        will be for the Template referred to in the\n         subTemplateList of the
        mibObjectValueRow that will be exported.\n      mibSubIdentifier\n         The
        sub-identifier that specifies the columnar object's ID\n         within the
        conceptual row.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 302         |          Length = N           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID = 300       |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   VLEN        |                  mibObjectIdentifier ...      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        ... mibObjectIdentifier (continued) ...                |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \         Set ID = 303         |          Length = N           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        templateId = 301       |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |  mibSubIdentifier             |        templateId = 301       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |  informationElementIndex      |  mibSubIdentifier             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        templateId = 301       |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |  mibSubIdentifier             |        templateId = 301       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |  informationElementIndex      |  mibSubIdentifier             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        templateId = 301       |  informationElementIndex      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |  mibSubIdentifier             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         Figure 17: mibOption Data Record for the Conceptual Row\n   Where:\n
        \     mibObjectIdentifier\n         Will contain the OID for the conceptual
        row as a whole.\n      mibSubIdentifier\n         The mibSubIdentifier fields
        will contain the extra\n         sub-identifier that, when added to the OID
        for the conceptual\n         row, gives the full OID for the object.\n"
      title: 5.8.2.  Exporting Conceptual Rows - mibObjectValueRow
    - contents:
      - "5.8.3.  Exporting Conceptual Rows - AUGMENTS\n   SMIv2 defines conceptual
        rows as having either an INDEX clause or an\n   AUGMENTS clause.  Conceptual
        row definitions with an AUGMENTS clause\n   extend an existing base conceptual
        row with an INDEX clause.  It is\n   not possible in SMIv2 to augment a conceptual
        row that itself has an\n   AUGMENTS clause.  The base table and the augmentation
        have an\n   identical INDEX.\n   Since augmentations allow adding extra columns
        to existing tables, it\n   is beneficial to be able to support them easily
        in IPFIX exports of\n   conceptual rows.\n   The mibObjectValueRow OID MAY
        refer to either the base table with the\n   INDEX clause or a conceptual row
        with an AUGMENTS clause.  The\n   mibSubIdentifier in any MIB Field Options
        Data Record MUST always\n   refer to the OID exported for the mibObjectValueRow
        Information\n   Element.\n   If the mibObjectValueRow OID refers to a base
        table, then any extra\n   columns from conceptual rows with an AUGMENTS clause
        MUST have their\n   full OID exported.\n   If the mibObjectValueRow OID refers
        to a conceptual row that augments\n   another conceptual row using the AUGMENTS
        clause, then any MIB fields\n   from the original table's INDEX or columnar
        objects MUST NOT use the\n   mibSubIdentifier and MUST instead export the
        full OID in a\n   mibObjectIdentifier.\n   If the mibObjectValueRow refers
        to an augmenting conceptual row, the\n   Scope Fields of the Template used
        in the subTemplateList MUST have\n   the index fields from the base table,
        in the same order as its scope.\n   This is identical to the Scope Field requirements
        for conceptual rows\n   with an INDEX clause.\n   This flexibility is provided
        so that the conceptual rows with the\n   most columns can be exported using
        the more efficient\n   mibSubIdentifier.  For example, exporting a complete
        set of\n   augmentation columns would only require the full OIDs for the MIB\n
        \  objects in the INDEX.\n   It is possible to export MIB object columns from
        multiple augmenting\n   conceptual rows.  If this is done, then the base table
        SHOULD be used\n   as the main OID for the mibObjectValueRow.\n"
      title: 5.8.3.  Exporting Conceptual Rows - AUGMENTS
    - contents:
      - "5.8.4.  Exporting Conceptual Tables - mibObjectValueTable\n   Multiple rows
        of a conceptual table can be exported in the\n   mibObjectValueTable Information
        Element (Section 11.2.1.10).  This\n   allows a set of conceptual rows corresponding
        to a conceptual table\n   to be exported as a single field.  Therefore, a
        complete set of rows\n   can be exported as a single field with other Information
        Elements in\n   a Template.  In this fashion, several complete conceptual
        tables\n   could be exported in one packet.\n   As also specified for mibObjectValueRow
        (Section 5.8.2), the more\n   specific (i.e., full) OID of the SEQUENCE entity
        MUST be exported.\n   The format of mibObjectValueTable is identical to mibObjectValueRow,\n
        \  except that the length of the subTemplateList may be zero or more\n   entries.\n
        \  All the other, i.e., non-length, requirements for mibObjectValueRow\n   in
        Section 5.8.2 apply to mibObjectValueTable.\n   An overview of this architecture
        is given in Figure 18.  This\n   architecture is similar to the architecture
        shown in Figure 12.\n        +---------------------------+    +------------------------+\n
        \       | Data Template             |    | MIB Field Options Data |\n        |
        \                          |    |                        |\n        | mibObjectValueTable
        \      |<---| OID                    |\n        +---------------------------+
        \   +------------------------+\n          |\n          | +-----------------------+
        \   +------------------------+\n          | | Options Template      |    |
        MIB Field Options Data |\n          | |                       |    |                        |\n
        \         | | Scope mibObjectValue* |<---| mibSubIdentifier       |\n          |
        |       mibObjectValue* |<---| mibSubIdentifier       |\n          | +-----------------------+
        \   +------------------------+\n          |             |\n          V             V\n
        \       +-----------------------------+\n        | Data Flows                  |\n
        \       |                             |\n        | subTemplateList (n entries)
        |\n        |    row 1                    |\n        |    ...                      |\n
        \       |    row n                    |\n        +-----------------------------+\n
        \         Figure 18: Architecture for Exporting Conceptual Tables\n                         with
        mibObjectValueTable\n"
      title: 5.8.4.  Exporting Conceptual Tables - mibObjectValueTable
    - contents:
      - "5.8.5.  Exporting Columnar Objects: Using mibIndexIndicator\n   The other
        option for indexing a columnar object that is part of a\n   conceptual table
        is explicit indexing.  In this case, the Options\n   Template Set scope may
        contain either non-index fields or columnar\n   MIB objects from multiple
        conceptual rows being exported.  In this\n   case, each mibObjectValue Information
        Element requires the\n   mibIndexIndicator with the bits set for the fields
        that are used to\n   index that individual columnar object.\n   The index
        fields MUST be in the \"correct\" order as defined in the\n   conceptual row
        that each columnar object is a member of.\n   If a mibObjectValue Information
        Element that is being indexed using\n   mibIndexIndicator is being used as
        an Options Template Scope Field,\n   then all fields used to index that field
        MUST also be Scope Fields.\n   Figure 19 shows the MIB Field Options Template
        for an indexed MIB\n   columnar object.\n      0                   1                   2
        \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |          Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Template ID             |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibIndexIndicator      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \          Figure 19: MIB Field Options Template for an Indexed\n                            MIB
        Columnar Object\n   Where:\n      mibIndexIndicator\n         The MIB Index
        Indicator IPFIX Information Element that marks\n         which fields in the
        Data Record will act as INDEX values for\n         the exported MIB object.\n
        \        The index data for a mibObjectValue will be other fields\n         contained
        in the same Data Record.  The mibIndexIndicator marks\n         the fields
        whose value(s) should be added to the OID for the\n         MIB object type
        definition exported in mibObjectIdentifier to\n         get the OID for the
        instance of the MIB object.\n         Elements used to index MIB objects MUST
        be exported in the same\n         order as they are specified in the index
        field of the\n         conceptual table they belong to.\n      mibObjectIdentifier\n
        \        Note the use of variable-length encoding for this field.\n"
      title: '5.8.5.  Exporting Columnar Objects: Using mibIndexIndicator'
    title: 5.8.  Exporting Conceptual Rows and Tables
  title: 5.  MIB Object Value Information Elements and the MIB Field Options
- contents:
  - '6.  Example Use Cases

    '
  - contents:
    - "6.1.  Non-columnar MIB Object: Established TCP Connections\n   The number of
      established TCP connections of a remote network device\n   could be monitored
      by configuring it to periodically export the\n   number of established TCP connections
      to a centralized Collector.  In\n   this example, the Exporter would export
      an IPFIX Message every\n   30 minutes that contained Data Records detailing
      the number of\n   established TCP connections.\n   The table of data that is
      to be exported looks like:\n            +-------------------------+-----------------------+\n
      \           |        TIMESTAMP        | ESTABLISHED TCP CONN. |\n            +-------------------------+-----------------------+\n
      \           | StartTime +   0 seconds |           10          |\n            |
      StartTime +  60 seconds |           14          |\n            | StartTime +
      120 seconds |           19          |\n            | StartTime + 180 seconds
      |           16          |\n            | StartTime + 240 seconds |           23
      \         |\n            | StartTime + 300 seconds |           29          |\n
      \           +-------------------------+-----------------------+\n                   Table
      2: Established TCP Connections\n   The Template Record for such a Data Record
      will provide details for\n   the following two Information Elements:\n   1.
      \ flowStartSeconds from [IANA-IPFIX], Information Element 150: The\n       absolute
      timestamp of the first packet of this Flow.\n   2.  tcpCurrEstab from [RFC4022],
      Object ID \"1.3.6.1.2.1.6.9\": The\n       number of TCP connections for which
      the current state is either\n       ESTABLISHED or CLOSE-WAIT.\n   Figure 20
      shows the exported Template Set detailing the\n   Template Record for exporting
      the number of established TCP\n   connections.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 16          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 400       |        Field Count = 2        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|   IE = flowStartSeconds     |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|   IE = mibObjectValueGauge  |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Figure 20: Example of tcpCurrEstab Template Set\n   Figure 21
      shows the exported MIB Field Options Template Set detailing\n   the metadata
      that will be exported about the mibObjectValueGauge\n   Information Element
      in Template 400 in Template Record.\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 401       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Scope Field Count = 2        |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 21: Example of tcpCurrEstab MIB Field Options Template Set\n   Figure
      22 shows the exported MIB Field Options Data Set detailing the\n   metadata
      that will be exported about the mibObjectValueGauge\n   Information Element
      in Template 400 in Template Record.\n   The OID for the MIB object tcpCurrEstab
      from [RFC4022], Object ID\n   \"1.3.6.1.2.1.6.9\", will be encoded in ASN.1/BER
      [X.690] as\n   \"06072B060102010609\" in the Data Record, which takes 9 octets.\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 401         |          Length = 18          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 400       | informationElementIndex = 1   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 9    | mibObjectIdentifier ...                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ... mibObjectIdentifier = \"1.3.6.1.2.1.6.9\" ...         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   ... 06072B060102010609 ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      Figure 22: Example of tcpCurrEstab MIB Field Options Data Set\n   Figure
      23 shows the start of the Data Set for exporting the number of\n   established
      TCP connections (see Section 6.1).\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 400         |          Length = 52          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime +   0 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              10                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime +  60 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              14                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime + 120 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              19                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime + 180 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              16                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime + 240 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              23                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                    StartTime + 300 seconds                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              29                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               Figure 23: Example of tcpCurrEstab Data Set\n"
    title: '6.1.  Non-columnar MIB Object: Established TCP Connections'
  - contents:
    - "6.2.  Enterprise-Specific MIB Object: Detailing CPU Load History\n   For the
      sake of demonstration, an enterprise-specific MIB object from\n   the CISCO-PROCESS-MIB
      [CISCO-PROCESS-MIB] is chosen.  This example\n   would be valid with any enterprise-specific
      MIB module.\n   The CPU usage of a remote network device with one CPU could
      be\n   monitored by configuring it to periodically export CPU usage\n   information,
      i.e., the cpmCPUTotal1minRev from the proprietary\n   CISCO-PROCESS-MIB, Object
      ID \"1.3.6.1.4.1.9.9.109.1.1.1.1.7\", to a\n   centralized Collector.\n   Although
      the cpmCPUTotal1minRev MIB object is a columnar object in a\n   conceptual row,
      if there is only one CPU no extra information is\n   conveyed by providing the
      index field.  So, in this case, it is\n   acceptable to not export the cpmCPUTotalIndex
      MIB object.  If there\n   were multiple CPUs, it would be appropriate to include
      the\n   cpmCPUTotalIndex field and specify the relationship.\n   In this example,
      the Exporter would export an IPFIX Message every\n   30 minutes that contained
      Data Records detailing the CPU 1-minute\n   busy average at 1-minute intervals.\n
      \  The table of data that is to be exported looks like:\n             +-------------------------+---------------------+\n
      \            |        TIMESTAMP        | CPU BUSY PERCENTAGE |\n             +-------------------------+---------------------+\n
      \            | StartTime +   0 seconds |         10%         |\n             |
      StartTime +  60 seconds |         14%         |\n             | StartTime +
      120 seconds |         19%         |\n             | StartTime + 180 seconds
      |         16%         |\n             | StartTime + 240 seconds |         23%
      \        |\n             | StartTime + 300 seconds |         29%         |\n
      \            +-------------------------+---------------------+\n                          Table
      3: CPU Usage Data\n   The Template Record for such a Data Record will provide
      details for\n   the following two Information Elements:\n   1.  flowStartSeconds
      from [IANA-IPFIX], Information Element 150: The\n       absolute timestamp of
      the first packet of this Flow.\n   2.  A mibObjectValueGauge for cpmCPUTotal1minRev,
      the overall CPU\n       busy percentage in the last 1-minute period.\n   Figure
      24 shows the exported Template Set detailing the\n   Template Record for exporting
      CPU Load (see Section 6.2).\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 16          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 402       |        Field Count = 2        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|   IE = flowStartSeconds     |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|   IE = mibObjectValueGauge  |        Field Length = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               Figure 24: Example of CPU Load Template Set\n   Figure 25 shows
      the exported Template Set detailing the MIB Field\n   Options Template for exporting
      CPU Load (see Section 6.2).  Note:\n   This is identical to the MIB Field Options
      Template given in\n   Figure 21, so the same Template could have been reused.\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 403       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      Figure 25: Example of CPU Load MIB Field Options Template Set\n   Figure
      26 shows the exported MIB Field Options Data Set detailing the\n   metadata
      that will be exported about the mibObjectValueGauge\n   Information Element
      in Template 402 in Template Record (see\n   Section 6.2).\n   The OID for the
      cpmCPUTotal1minRev has been encoded using ASN.1/BER\n   to \"060D2B0601040109096D0101010107\"
      at 15 octets long.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 403         |          Length = 24          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 402       | informationElementIndex = 1   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 15   |  mibObjectIdentifier                     ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              \"1.3.6.1.4.1.9.9.109.1.1.1.1.7\"             ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               060D2B0601040109096D0101010107             ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                          ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Figure 26: Example of CPU Load MIB Field Options Data Set\n   Note
      that although cpmCPUTotal1minRev is 32 bits long, reduced-size\n   encoding
      [RFC7011] has been used to encode it within a single octet.\n   The encoding
      size was specified by setting the length for the\n   mibObjectValueGauge field
      to 1 octet in the main Data Template; see\n   Figure 24.\n   This example stresses
      that, even though the OID cpmCPUTotal1minRev is\n   enterprise-specific, the
      E bit for the mibObjectValueGauge and\n   mibObjectIdentifier is set to 0, because
      the mibObjectValueGauge and\n   mibObjectIdentifier Information Elements are
      not enterprise-specific.\n   That this data is from an Enterprise MIB is included
      in the OID that\n   includes an Enterprise ID.\n   The corresponding Data Set
      does not add any value for this example\n   and is therefore not displayed.\n"
    title: '6.2.  Enterprise-Specific MIB Object: Detailing CPU Load History'
  - contents:
    - "6.3.  Exporting a Conceptual Row: The OSPF Neighbor Row\n   Many conceptual
      tables are already defined in standard and\n   proprietary MIBs.  These can
      be exported with a minimum of overhead\n   by using the mibObjectValueRow.  This
      allows the Exporting Process to\n   unambiguously define the INDEX for the entire
      conceptual row as the\n   Scope Fields of an Options Template Set.  The use
      of a MIB Field\n   Options Template with mibSubIdentifier being used means that
      each\n   individual columnar object does not need to have its OID exported to\n
      \  the Collector.\n   The ospfNbrTable, defined in the OSPF MIB [RFC4750], consists
      of\n   ospfNbrEntry, which has the OID \"1.3.6.1.2.1.14.10.1\".  Each\n   mibObjectValueRow
      Data Record will therefore correspond to an\n   ospfNbrEntry.\n   The following
      fields will be exported:\n   +------------------+----------------+-------------------------+-----+\n
      \  | Object           | ID             | mibObjectValue          | Len |\n   +------------------+----------------+-------------------------+-----+\n
      \  | ospfNbrIpAddr    | ospfNbrEntry 1 | mibObjectValueIPAddress |  4  |\n   |
      ospfNbrAddress-  | ospfNbrEntry 2 | mibObjectValueInteger   |  4  |\n   | -LessIndex
      \      |                |                         |     |\n   | ospfNbrRtrId
      \    | ospfNbrEntry 3 | mibObjectValueIPAddress |  4  |\n   | ospfNbrState     |
      ospfNbrEntry 6 | mibObjectValueInteger   |  1  |\n   +------------------+----------------+-------------------------+-----+\n
      \                  Table 4: OSPF Neighbor Entry Objects\n   The OIDs that will
      be used to export this table are shown in Table 5.\n    +------------------+-----------------------+---------------------+\n
      \   | Entity           | Full OID              | Exported as         |\n    +------------------+-----------------------+---------------------+\n
      \   | ospfNbrEntry     | 1.3.6.1.2.1.14.10.1   | 1.3.6.1.2.1.14.10.1 |\n    |
      ospfNbrIpAddr    | 1.3.6.1.2.1.14.10.1.1 | 1                   |\n    | ospfNbrAddress-
      \ | 1.3.6.1.2.1.14.10.1.2 | 2                   |\n    | -LessIndex       |
      \                      |                     |\n    | ospfNbrRtrId     | 1.3.6.1.2.1.14.10.1.3
      | 3                   |\n    | ospfNbrState     | 1.3.6.1.2.1.14.10.1.6 | 6
      \                  |\n    +------------------+-----------------------+---------------------+\n
      \                           Table 5: OSPF OIDs\n   Figure 27 shows the Templates
      exported to support the\n   mibObjectValueRow.  Figure 28 shows the example
      OID Data for the\n   conceptual row exported in mibObjectValueRow.  Figure 29
      shows the\n   example data export for a few neighbors in the table; Figure 29
      also\n   shows a Data Record formatted as per IPFIX Structured Data [RFC6313]\n
      \  and using the \"undefined\" (= 0xFF) semantic from the \"IPFIX\n   Structured
      Data Types Semantics\" subregistry [IANA-IPFIX].  Note that\n   the OID for
      ospfNbrEntry has been encoded using ASN.1/BER to\n   \"06082B060102010E0A01\"
      at 10 octets long.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 12          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 500       |         Field Count = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectValueRow      |         Field Length = 16     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 501       |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = mibObjectValueIPAddress|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueIPAddress|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                     |
      \      Set ID = 3              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Length = 22          |      Template ID = 502        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Count = 3        |  Scope Field Count = 2        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = templateId             |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = informationElementIndex|        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectIdentifier    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 503       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibSubIdentifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 27: Example of ospfNbrEntry Template and Options Template Sets\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 502         |          Length = 20          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 500       | informationElementIndex = 0   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 10   | mibObjectIdentifier = \"1.3.6.1.2.1.14.10.1\"   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                  06082B060102010E0A01                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                               | Padding = 0   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 503         |          Length = 28          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 501        |  informationElementIndex = 0  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 1      |        templateId = 501       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  informationElementIndex = 1  |      mibSubIdentifier = 2     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 501        |  informationElementIndex = 2  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 3      |        templateId = 501       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  informationElementIndex = 3  |      mibSubIdentifier = 6     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Figure 28: Example of ospfNbrEntry OID Data Export\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 500         |          Length = 52          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 501         |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrIpAddr = 192.0.2.1               |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrAddressLessIndex = 0             |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrRtrId = 1.1.1.1                  |ospfNbrState=8 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 501         |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrIpAddr = 192.0.2.2               |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrAddressLessIndex = 0             |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrRtrId = 2.2.2.2                  |ospfNbrState=8 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 501         |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrIpAddr = 192.0.2.3               |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrAddressLessIndex = 0             |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrRtrId = 3.3.3.3                  |ospfNbrState=1 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Figure 29: Example of Data Export for ospfNbrEntry\n"
    title: '6.3.  Exporting a Conceptual Row: The OSPF Neighbor Row'
  - contents:
    - "6.4.  Exporting Augmented Conceptual Row: Mapping IF-MIB ID to Name\n   The
      ifTable, defined in the IF-MIB [RFC2863], is augmented by the\n   ifXTable (defined
      in the same MIB module).\n   The OID of the ifEntry is 1.3.6.1.2.1.2.2.1, which
      is encoded using\n   ASN.1/BER to \"06082B06010201020201\" at 10 octets long,
      while the OID\n   of the augmenting ifXEntry is 1.3.6.1.2.1.31.1.1.1, which
      is encoded\n   using ASN.1/BER to \"060A2B060102011F01010101\" at 12 octets
      long.\n   This example demonstrates how columnar objects from the base\n   conceptual
      row and the augmenting row can be exported in a single\n   mibObjectValueRow
      Information Element.\n   Table 6 shows the fields that will be exported.\n        +---------+------------------+-------+-------------------+\n
      \       | ifIndex | ifType           | ifMtu | ifName            |\n        +---------+------------------+-------+-------------------+\n
      \       | 1       | ethernetCsmacd:6 | 1500  | Ethernet 10       |\n        |
      2       | ethernetCsmacd:6 | 1500  | Ethernet 20       |\n        | 3       |
      ethernetCsmacd:6 | 1500  | FastEthernet 30   |\n        +---------+------------------+-------+-------------------+\n
      \                          Table 6: IF-MIB Data\n   The OIDs that will be used
      to export this table are shown in Table 7.\n   +---------+------------------------+--------------------------------+\n
      \  | Entity  | Full OID               | Exported as                    |\n   +---------+------------------------+--------------------------------+\n
      \  | ifEntry | 1.3.6.1.2.1.2.2.1      | OID   = 1.3.6.1.2.1.2.2.1      |\n   |
      ifIndex | 1.3.6.1.2.1.2.2.1.1    | subID = 1                      |\n   | ifType
      \ | 1.3.6.1.2.1.2.2.1.3    | subID = 3                      |\n   | ifMtu   |
      1.3.6.1.2.1.2.2.1.4    | subID = 4                      |\n   | ifName  | 1.3.6.1.2.1.31.1.1.1.1
      | OID   = 1.3.6.1.2.1.31.1.1.1.1 |\n   +---------+------------------------+--------------------------------+\n
      \                          Table 7: IF-MIB OIDs\n   Figure 30 shows the Templates
      exported to support the\n   mibObjectValueRow Information Element.  Figure 31
      shows the example\n   OID Data for the conceptual row exported in mibObjectValueRow
      to\n   match Table 7.  Figure 32 shows the example data export as per\n   Table
      6.\n      0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 12          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 600       |         Field Count = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectValueRow      |         Field Length = 24     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 601       |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 1       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 1       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0|IE =mibObjectValueOctetString|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                     |
      \      Set ID = 3              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Length = 22          |      Template ID = 602        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Count = 3        |   Scope Field Count = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = templateId             |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = informationElementIndex|        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectIdentifier    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 603       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibSubIdentifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \          Figure 30: Example of Augmented ifEntry Template and\n                           Options
      Template Sets\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 602         |          Length = 40          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 600       | informationElementIndex = 0   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 10   | mibObjectIdentifier ...                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              ifEntry = 1.3.6.1.2.1.2.2.1                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              06082B06010201020201             |   Padding = 0 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        templateId = 601       | informationElementIndex = 3   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 12   | mibObjectIdentifier ifName ...                |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              ifName = 1.3.6.1.2.1.31.1.1.1.1                  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              060A2B060102011F01010101                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |                  Padding = 0                  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 603         |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 601        |  informationElementIndex = 0  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 1      |        templateId = 601       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  informationElementIndex = 1  |      mibSubIdentifier = 3     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 601        |  informationElementIndex = 2  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 4      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \         Figure 31: Example of Augmented ifEntry OID Data Export\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 600         |          Length = 68          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 601         | ifIndex = 1   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ifType = 6              |        ifMtu = 1500           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Length = 11  |      ifName = Ethernet 10                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 601         | ifIndex = 2   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ifType = 6              |        ifMtu = 1500           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Length = 11  |      ifName = Ethernet 20                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 601         | ifIndex = 3   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ifType = 6              |        ifMtu = 1500           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Length = 15  |      ifName = FastEthernet 30                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        ...                                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \         Figure 32: Example of Data Export for Augmented ifEntry\n"
    title: '6.4.  Exporting Augmented Conceptual Row: Mapping IF-MIB ID to Name'
  - contents:
    - "6.5.  Exporting a Columnar Object: ipIfStatsInForwDatagrams\n   It may be that
      the full set of columnar objects that are supported by\n   a conceptual row
      are not required to be exported.  Rather than use\n   the IPFIX Structured Data
      [RFC6313] method, the mibIndexIndicator\n   method can be used to provide the
      relationship between fields.\n   This example shows the MIB objects that are
      part of the INDEX of the\n   conceptual row being exported in the correct order
      and then being\n   referred to by using mibIndexIndicator.\n   This example
      shows the export of ipIfStatsInForwDatagrams from the\n   IP-MIB [RFC4293].
      \ ipIfStatsInForwDatagrams is a columnar object that\n   is part of the ipIfStatsTable
      conceptual table.  This is comprised of\n   ipIfStatsEntry conceptual rows.\n
      \  The ipIfStatsTable conceptual table is indexed by ipIfStatsIPVersion\n   and
      ipIfStatsIfIndex.\n   The Options Template Record for the example Data Record
      contains the\n   following Information Elements:\n   1.  ipIfStatsIPVersion
      (1.3.6.1.2.1.4.31.3.1.1) (Scope Field)\n       (encoded using ASN.1/BER to \"060A2B06010201041F030101\"
      at\n       12 octets long)\n   2.  ipIfStatsIfIndex (1.3.6.1.2.1.4.31.3.1.2)
      (Scope Field)\n       (encoded using ASN.1/BER to \"060A2B06010201041F030102\"
      at\n       12 octets long)\n   3.  ipIfStatsInForwDatagrams (1.3.6.1.2.1.4.31.3.1.12)
      (non-Scope\n       Field)\n       (encoded using ASN.1/BER to \"060A2B06010201041F03010C\"
      at\n       12 octets long)\n   Note that ipIfStatsIfIndex has been reduced-size
      encoded to 2 octets\n   in the following example.  An exporting device with
      more interfaces\n   would use the full length.\n   Figure 33 shows the exported
      Options Template Set.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 701       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Scope Field Count = 2     |0|Scope 1=mibObjectValueInteger|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field 1 Length = 1    |0|Scope 2=mibObjectValueInteger|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field 1 Length = 2    |0| IE = mibObjectValueCounter  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |           Field Length = 4    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 33: Example of an Options Template for an Indexed MIB Object\n                          with
      Two Index Objects\n   Figure 34 shows the exported MIB Field Options Template
      used to\n   export the required mibObjectValue Information Element metadata.\n
      \  This example of the MIB Field Options Template includes the\n   mibIndexIndicator
      to indicate that some of the other fields in the\n   Data Records are index
      objects.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 702       |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibIndexIndicator      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 1       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 34: Example of a MIB Field Options Template for an Indexed\n                     MIB
      Object with Two Index Objects\n   Figure 35 shows the exported MIB Field Options
      Data used to export\n   the required mibObjectValue Information Element metadata.
      \ Note that\n   the first two Data Records have all their mibIndexIndicator
      bits set\n   to 0.  The third mibIndexIndicator has the value \"00000011\" to
      show\n   that the first two fields in the Data Record are the INDEXes for this\n
      \  columnar object.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 702         |          Length = 58          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 701       | informationElementIndex = 0   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Index 00000000 | VLEN = 12     | mibObjectIdentifier       ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              \"1.3.6.1.2.1.4.31.3.1.1\"                     ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               060A2B06010201041F030101                    ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |        templateId = 701       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | informationElementIndex = 1   |Index 00000000 |   VLEN = 12   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  mibObjectIdentifier = \"1.3.6.1.2.1.4.31.3.1.2\"           ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                         060A2B06010201041F030102          ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                           ... |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        templateId = 701       | informationElementIndex = 2   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Index 00000011 |  VLEN = 12   | mibObjectIdentifier      ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                  \"1.3.6.1.2.1.4.31.3.1.12\"               ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                   060A2B06010201041F03010C               ...  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 35: Example of a MIB Field Options Data Set for an Indexed\n                     MIB
      Object with Two Index Objects\n   Figure 36 shows the Data Records that export
      the values of the three\n   mibObjectValue Information Elements.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 701         |          Length = 18          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | ipVer = 1     |     ifIndex = 10              |  ...          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    InForwDatagrams = 10000                    | ipVer = 2     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    ifIndex = 10               | InForwDatagrams = 20000       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |             ...               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Figure 36: Example of a MIB Data Set for an Indexed MIB Object\n                          with
      Two Index Objects\n"
    title: '6.5.  Exporting a Columnar Object: ipIfStatsInForwDatagrams'
  - contents:
    - "6.6.  Exporting a Columnar Object Indexed by Information Elements:\n      ifOutQLen\n
      \  If a Packet Sampling (PSAMP) Packet Report [RFC5476] was generated on\n   any
      dropped packets on an interface, then it may be desirable to know\n   if the
      send queue on the output interface was full.  This could be\n   done by exporting
      the size of the send queue (ifOutQLen) in the same\n   Data Record as the PSAMP
      Packet Report.\n   The exported data looks like:\n   +-----------+-----------+---------+--------------+------------------+\n
      \  |  SRC ADDR |  DST ADDR | PKT LEN |    OUTPUT    | OUTPUT QUEUE LEN |\n   |
      \          |           |         |  INTERFACE   |   (ifOutQLen)    |\n   +-----------+-----------+---------+--------------+------------------+\n
      \  | 192.0.2.1 | 192.0.2.3 |   150   | Eth 1/0 (15) |        45        |\n   |
      192.0.2.4 | 192.0.2.9 |   350   | Eth 1/0 (15) |        45        |\n   | 192.0.2.3
      | 192.0.2.9 |   650   | Eth 1/0 (15) |        23        |\n   | 192.0.2.4 |
      192.0.2.6 |   350   | Eth 1/1 (16) |         0        |\n   +-----------+-----------+---------+--------------+------------------+\n
      \        Table 8: Packet Report with Interface Output Queue Length\n                             (ifOutQLen)
      Data\n   The ifOutQLen MIB object, defined in the IF-MIB [RFC2863], provides\n
      \  the length of the output packet queue.  This columnar object is part\n   of
      the ifEntry conceptual row and indexed by the interface index\n   (ifIndex).\n
      \  This relationship between the ifOutQLen field and the index field is\n   exported
      using mibIndexIndicator in the MIB Field Options Template.\n   The value of
      \"00001000\" flags the index fields concisely.\n   The Template Record for the
      example Data Record contains the\n   following Information Elements:\n   1.
      \ sourceIPv4Address\n   2.  destinationIPv4Address\n   3.  totalLengthIPv4\n
      \  4.  egressInterface\n   5.  ifOutQLen (indexed by egressInterface)\n   Figure
      37 shows the exported Template Set detailing the Template for\n   exporting
      a PSAMP Report with ifOutQLen.  Figures 38 and 39 show the\n   MIB Field Options
      Template and Data Record.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 28          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 703       |        Field Count = 5        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = sourceIPv4Address      |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = destinationIPv4Address |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = totalLengthIPv4        |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = egressInterface        |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectValueGauge    |        Field Length = 4       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    Figure 37: Example of Template for a PSAMP Report with ifOutQLen\n                        Indexed
      by egressInterface\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 704       |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibIndexIndicator      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 1       |0| IE = mibObjectIdentifier    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 38: Example of MIB Field Options Template for a PSAMP Report\n                 with
      ifOutQLen Indexed by egressInterface\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 704         |          Length = 21          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 703       | informationElementIndex = 4   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Index 00001000  | VLEN = 11    | mibObjectIdentifier    ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |             \"1.3.6.1.2.1.2.2.1.21\"                     ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              06092B0601020102020115                    ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      Figure 39: Example of
      MIB Field Options Data Record for a PSAMP\n             Report with ifOutQLen
      Indexed by egressInterface\n   The corresponding IPFIX Data Record is shown
      in Figure 40.  For the\n   sake of the example, the interface index of \"Eth
      1/0\" is 15 and the\n   interface index of \"Eth 1/1\" is 16.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 703         |          Length = 84          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.1                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.3                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                             150                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        15 (Eth 1/0)                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              45                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.4                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.9                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                             350                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        15 (Eth 1/0)                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              45                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.3                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.9                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                             650                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        15 (Eth 1/0)                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                              23                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.4                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          192.0.2.6                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                             350                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                        16 (Eth 1/1)                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               0                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Figure 40: Example of PSAMP Packet Report with ifOutQLen\n                        Indexed
      by egressInterface\n"
    title: '6.6.  Exporting a Columnar Object Indexed by Information Elements:'
  - contents:
    - "6.7.  Exporting with Multiple Contexts: The OSPF Neighbor Row Revisited\n   If
      the context used to export the MIB objects is the default one, no\n   extra
      context fields are required.  This example demonstrates how to\n   handle the
      case when the context needs to be specified.  It is based\n   on the previous
      example (Section 6.3).\n   The OSPF details of the conceptual row that was exported
      per\n   Section 6.3 would be suitable if there were only one OSPF process\n
      \  running at the Observation Point.  If multiple OSPF processes are\n   present,
      then they can be differentiated by also exporting the\n   mibContextEngineID
      and mibContextName.\n   The following fields will be exported:\n   +------------------+----------------+-------------------------+-----+\n
      \  | Object           | ID             | mibObjectValue          | Len |\n   +------------------+----------------+-------------------------+-----+\n
      \  | ospfNbrIpAddr    | ospfNbrEntry 1 | mibObjectValueIPAddress |  4  |\n   |
      ospfNbrAddress-  | ospfNbrEntry 2 | mibObjectValueInteger   |  4  |\n   | -LessIndex
      \      |                |                         |     |\n   | ospfNbrRtrId
      \    | ospfNbrEntry 3 | mibObjectValueIPAddress |  4  |\n   | ospfNbrState     |
      ospfNbrEntry 6 | mibObjectValueInteger   |  1  |\n   +------------------+----------------+-------------------------+-----+\n
      \                  Table 9: OSPF Neighbor Entry Objects\n   The example contextEngineID
      matches the example from [RFC3411] for\n   Acme Networks: \"'800002B804616263'H
      (enterprise 696, string \"abc\")\".\n   Figure 41 shows the Templates exported
      to support a mibObjectValueRow\n   that is defined within a context.  Figure
      42 shows the example OID\n   Data for the conceptual row exported in mibObjectValueRow.
      \ These are\n   unchanged from the previous example (Section 6.3).  Figure 43
      shows\n   the example data for two OSPF neighbors.  Although these have\n   identical
      INDEX/scope values, the context information indicates that\n   they come from
      different OSPF processes.  Note that the OID for\n   ospfNbrEntry has been encoded
      using ASN.1/BER to\n   \"06082B060102010E0A01\" at 10 octets long.\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 2           |          Length = 20          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 800       |         Field Count = 3       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibContextEngineID     |         Field Length = 8      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibContextName         |         Field Length = 4      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectValueRow      |         Field Length = 16     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 26          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 801       |        Field Count = 4        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = mibObjectValueIPAddress|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueIPAddress|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 4       |0| IE = mibObjectValueInteger  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                     |
      \      Set ID = 3              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Length = 22          |      Template ID = 802        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Count = 3        |  Scope Field Count = 2        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = templateId             |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = informationElementIndex|        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0| IE = mibObjectIdentifier    |        Field Length = 65535   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 3           |          Length = 22          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 803       |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Scope Field Count = 2       |0| IE = templateId             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = informationElementIndex|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |0| IE = mibSubIdentifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |        Field Length = 2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 41: Example of ospfNbrEntry Template and Options Template Sets\n                               with
      Context\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 802         |          Length = 20          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       Template ID = 800       | informationElementIndex = 2   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   VLEN = 10   | mibObjectIdentifier = \"1.3.6.1.2.1.14.10.1\"   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                     06082B060102010E0A01                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                               | Padding = 0   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \         Set ID = 803         |          Length = 28          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 801        |  informationElementIndex = 0  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 1      |        templateId = 801       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  informationElementIndex = 1  |      mibSubIdentifier = 2     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       templateId = 801        |  informationElementIndex = 2  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     mibSubIdentifier = 3      |        templateId = 801       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  informationElementIndex = 3  |      mibSubIdentifier = 6     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Figure 42: Example of ospfNbrEntry OID Data Export with Context\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Set ID = 800         |          Length = 60          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  mibContextEngineID = 800002B804616263                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  ... mibContextEngineID                                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  mibContextName = con1                                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 801         |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrIpAddr = 192.0.2.1               |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrAddressLessIndex = 0             |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrRtrId = 1.1.1.1                  |ospfNbrState=8 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  mibContextEngineID = 800002B804616263                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  ... mibContextEngineID                                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  mibContextName = con2                                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |Semantic=0xFF  |     Template ID = 801         |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrIpAddr = 192.0.2.2               |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrAddressLessIndex = 0             |        ...    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ospfNbrRtrId = 2.2.2.2                  |ospfNbrState=8 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Figure 43: Example of Data Export for ospfNbrEntry with Context\n"
    title: '6.7.  Exporting with Multiple Contexts: The OSPF Neighbor Row Revisited'
  title: 6.  Example Use Cases
- contents:
  - "7.  Configuration Considerations\n   When configuring a MIB OID for export, consideration
    should be given\n   to whether the SNMP context should also be configurable.  If
    a\n   non-default context is used, then it should be associated with the\n   fields
    as per Section 5.6.\n"
  title: 7.  Configuration Considerations
- contents:
  - "8.  The Collecting Process's Side\n   The specifications in Section 9 of [RFC7011]
    also apply to Collectors\n   that implement this specification.  In addition,
    the following\n   specifications should be noted:\n   o  A Collecting Process
    that implements this specification MUST store\n      the Data Records containing
    the OID object type definitions with\n      the same retention policy as Templates.\n
    \  o  A Collecting Process that implements this specification SHOULD\n      have
    access to MIB modules in order to look up the received MIB\n      Object Identifiers
    and find the full type definition and name of\n      MIB OID fields used in received
    Templates.\n   o  It should be noted that, because reduced-size encoding MAY be
    used\n      by the Exporting Process, the Collecting Process cannot assume\n      that
    a received size for a field is the maximum size it should\n      expect for that
    field.\n   o  If a Collecting Process receives a MIB Object Identifier that it\n
    \     cannot decode, it MAY log a warning.\n   o  A Collecting Process MUST support
    the three options for handling\n      columnar objects detailed in Section 5.8.\n"
  title: 8.  The Collecting Process's Side
- contents:
  - "9.  Applicability\n   Making available the many and varied items from MIB modules
    opens up\n   a wide range of possible applications for the IPFIX protocol, some\n
    \  quite different from the usual Flow information.\n   Some monitoring applications
    periodically export a mapping of\n   interface ID to interface name using IPFIX
    Options Templates.  This\n   could be expanded to include the ifInUcastPkts MIB
    object as defined\n   in the IF-MIB [RFC2863], indexed using the ingressInterface\n
    \  Information Element.  This would provide the input statistics for\n   each
    interface; these statistics can be compared to the Flow\n   information to ensure
    that the sampling rate is as expected, or, in\n   the absence of sampling, to
    ensure that all expected packets are\n   being monitored.\n"
  title: 9.  Applicability
- contents:
  - "10.  Security Considerations\n   For this extension to the IPFIX protocol, the
    same security\n   considerations as those for the IPFIX protocol apply [RFC7011].\n
    \  If the Exporter is generating or capturing the field values itself,\n   e.g.,
    using the MIB objects only as an encoding or type mechanism,\n   there are no
    extra security considerations beyond standard IPFIX.\n   However, if the Exporter
    is implemented as an SNMP manager accessing\n   an SNMP agent, it MUST authenticate
    itself to the SNMP agent\n   [RFC3414] [RFC5591] [RFC5592] [RFC6353], and the
    SNMP agent MUST\n   enforce SNMP access control rules [RFC3415] as required by
    the SNMP\n   architecture [RFC3411].\n   Access to particular MIB objects is controlled
    by the configuration\n   of the IPFIX Exporter.  This is consistent with the way
    IPFIX\n   controls access to other Information Elements in general.\n   The configuration
    of an IPFIX Exporter determines which MIB objects\n   are included in IPFIX Data
    Records sent to certain Collectors.\n   Network operators should take care that
    the only MIB objects that are\n   included in IPFIX Data Records are objects that
    the receiving\n   Collector is allowed to receive.  Note that multiple users may
    have\n   access to the data from the Collector.\n   When exporting MIB objects
    that may be considered sensitive or\n   vulnerable in some network environments
    (as mentioned in the Security\n   Considerations section of the RFC containing
    the MIB module), the\n   Exporter should consider using anonymization techniques
    per [RFC6235]\n   if the information is anonymizable.  Consumers of exported data\n
    \  should therefore be able to handle the kinds of data modifications\n   that
    are described in [RFC6235].\n"
  title: 10.  Security Considerations
- contents:
  - '11.  IANA Considerations

    '
  - contents:
    - "11.1.  New IPFIX Semantics\n   New IPFIX semantics have been allocated in IANA's
      IPFIX registry\n   [IANA-IPFIX] per Section 6 of [RFC7012], as defined in the\n
      \  subsections below.\n"
    - contents:
      - "11.1.1.  snmpCounter\n   An integral value reporting the value of a counter,
        identical to the\n   Counter32 and Counter64 semantics in [RFC2578], as determined
        by the\n   Field Length.\n   This is similar to IPFIX's totalCounter semantic,
        except that total\n   counters have an initial value of 0 but SNMP counters
        do not.\n   IANA has assigned value 7 to snmpCounter.\n"
      title: 11.1.1.  snmpCounter
    - contents:
      - "11.1.2.  snmpGauge\n   An integral value identical to the Gauge32 semantic
        in [RFC2578] and\n   the Gauge64 semantic in [RFC2856], as determined by the
        Field Length.\n   IANA has assigned value 8 to snmpGauge.\n"
      title: 11.1.2.  snmpGauge
    title: 11.1.  New IPFIX Semantics
  - contents:
    - "11.2.  New IPFIX Information Elements\n   The new Information Elements in Table
      10 have been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], as defined
      in the subsections\n   below.\n   In each case, the \"Units\" and \"Range\"
      have been left blank, since\n   these are not applicable.\n                 +-----------+---------------------------+\n
      \                | ElementId | Name                      |\n                 +-----------+---------------------------+\n
      \                | 434       | mibObjectValueInteger     |\n                 |
      435       | mibObjectValueOctetString |\n                 | 436       | mibObjectValueOID
      \        |\n                 | 437       | mibObjectValueBits        |\n                 |
      438       | mibObjectValueIPAddress   |\n                 | 439       | mibObjectValueCounter
      \    |\n                 | 440       | mibObjectValueGauge       |\n                 |
      441       | mibObjectValueTimeTicks   |\n                 | 442       | mibObjectValueUnsigned
      \   |\n                 | 443       | mibObjectValueTable       |\n                 |
      444       | mibObjectValueRow         |\n                 | 445       | mibObjectIdentifier
      \      |\n                 | 446       | mibSubIdentifier          |\n                 |
      447       | mibIndexIndicator         |\n                 | 448       | mibCaptureTimeSemantics
      \  |\n                 | 449       | mibContextEngineID        |\n                 |
      450       | mibContextName            |\n                 | 451       | mibObjectName
      \            |\n                 | 452       | mibObjectDescription      |\n
      \                | 453       | mibObjectSyntax           |\n                 |
      454       | mibModuleName             |\n                 +-----------+---------------------------+\n
      \                   Table 10: New Information Elements\n"
    - contents:
      - '11.2.1.  New MIB Object Value Information Elements

        '
      - contents:
        - "11.2.1.1.  mibObjectValueInteger\n   A new Information Element \"mibObjectValueInteger\"
          has been allocated\n   in IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that the\n      integer value of a MIB object will be exported.  The MIB
          Object\n      Identifier (\"mibObjectIdentifier\") for this field MUST be
          exported\n      in a MIB Field Option or via another means.  This Information\n
          \     Element is used for MIB objects with the Base syntax of Integer32\n
          \     and INTEGER with IPFIX reduced-size encoding used as required.\n      The
          value is encoded as per the standard IPFIX Abstract Data Type\n      of
          signed32.\n      Abstract Data Type: signed32\n      Data Type Semantics:
          quantity\n      ElementId: 434\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.1.  mibObjectValueInteger
      - contents:
        - "11.2.1.2.  mibObjectValueOctetString\n   A new Information Element \"mibObjectValueOctetString\"
          has been\n   allocated in IANA's IPFIX registry [IANA-IPFIX], with the following\n
          \  definition:\n      Description: An IPFIX Information Element that denotes
          that an\n      Octet String or Opaque value of a MIB object will be exported.\n
          \     The MIB Object Identifier (\"mibObjectIdentifier\") for this field\n
          \     MUST be exported in a MIB Field Option or via another means.  This\n
          \     Information Element is used for MIB objects with the Base syntax\n
          \     of OCTET STRING and Opaque.  The value is encoded as per the\n      standard
          IPFIX Abstract Data Type of octetArray.\n      Abstract Data Type: octetArray\n
          \     Data Type Semantics: default\n      ElementId: 435\n      Status:
          current\n      Reference: RFC 8038\n"
        title: 11.2.1.2.  mibObjectValueOctetString
      - contents:
        - "11.2.1.3.  mibObjectValueOID\n   A new Information Element \"mibObjectValueOID\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that an\n      Object Identifier or OID value of a MIB object will be exported.\n
          \     The MIB Object Identifier (\"mibObjectIdentifier\") for this field\n
          \     MUST be exported in a MIB Field Option or via another means.  This\n
          \     Information Element is used for MIB objects with the Base syntax\n
          \     of OBJECT IDENTIFIER.  Note: In this case, the\n      \"mibObjectIdentifier\"
          defines which MIB object is being exported,\n      and the \"mibObjectValueOID\"
          field will contain the OID value of\n      that MIB object.  The mibObjectValueOID
          Information Element is\n      encoded as ASN.1/BER [X.690] in an octetArray.\n
          \     Abstract Data Type: octetArray\n      Data Type Semantics: default\n
          \     ElementId: 436\n      Status: current\n      Reference: RFC 8038\n"
        title: 11.2.1.3.  mibObjectValueOID
      - contents:
        - "11.2.1.4.  mibObjectValueBits\n   A new Information Element \"mibObjectValueBits\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that a set\n      of Enumerated flags or bits from a MIB object will be
          exported.\n      The MIB Object Identifier (\"mibObjectIdentifier\") for
          this field\n      MUST be exported in a MIB Field Option or via another
          means.  This\n      Information Element is used for MIB objects with the
          Base syntax\n      of BITS.  The flags or bits are encoded as per the standard
          IPFIX\n      Abstract Data Type of octetArray, with sufficient length to\n
          \     accommodate the required number of bits.  If the number of bits is\n
          \     not an integer multiple of octets, then the most significant bits\n
          \     at the end of the octetArray MUST be set to 0.\n      Abstract Data
          Type: octetArray\n      Data Type Semantics: flags\n      ElementId: 437\n
          \     Status: current\n      Reference: RFC 8038\n"
        title: 11.2.1.4.  mibObjectValueBits
      - contents:
        - "11.2.1.5.  mibObjectValueIPAddress\n   A new Information Element \"mibObjectValueIPAddress\"
          has been\n   allocated in IANA's IPFIX registry [IANA-IPFIX], with the following\n
          \  definition:\n      Description: An IPFIX Information Element that denotes
          that the\n      IPv4 address value of a MIB object will be exported.  The
          MIB\n      Object Identifier (\"mibObjectIdentifier\") for this field MUST
          be\n      exported in a MIB Field Option or via another means.  This\n      Information
          Element is used for MIB objects with the Base syntax\n      of IpAddress.
          \ The value is encoded as per the standard IPFIX\n      Abstract Data Type
          of ipv4Address.\n      Abstract Data Type: ipv4Address\n      Data Type
          Semantics: default\n      ElementId: 438\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.5.  mibObjectValueIPAddress
      - contents:
        - "11.2.1.6.  mibObjectValueCounter\n   A new Information Element \"mibObjectValueCounter\"
          has been allocated\n   in IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that the\n      counter value of a MIB object will be exported.  The MIB
          Object\n      Identifier (\"mibObjectIdentifier\") for this field MUST be
          exported\n      in a MIB Field Option or via another means.  This Information\n
          \     Element is used for MIB objects with the Base syntax of Counter32\n
          \     or Counter64 with IPFIX reduced-size encoding used as required.\n
          \     The value is encoded as per the standard IPFIX Abstract Data Type\n
          \     of unsigned64.\n      Abstract Data Type: unsigned64\n      Data Type
          Semantics: snmpCounter\n      ElementId: 439\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.6.  mibObjectValueCounter
      - contents:
        - "11.2.1.7.  mibObjectValueGauge\n   A new Information Element \"mibObjectValueGauge\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that the\n      Gauge value of a MIB object will be exported.  The MIB Object\n
          \     Identifier (\"mibObjectIdentifier\") for this field MUST be exported\n
          \     in a MIB Field Option or via another means.  This Information\n      Element
          is used for MIB objects with the Base syntax of Gauge32.\n      The value
          is encoded as per the standard IPFIX Abstract Data Type\n      of unsigned32.
          \ This value represents a non-negative integer that\n      may increase
          or decrease but that shall never exceed a maximum\n      value or fall below
          a minimum value.\n      Abstract Data Type: unsigned32\n      Data Type
          Semantics: snmpGauge\n      ElementId: 440\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.7.  mibObjectValueGauge
      - contents:
        - "11.2.1.8.  mibObjectValueTimeTicks\n   A new Information Element \"mibObjectValueTimeTicks\"
          has been\n   allocated in IANA's IPFIX registry [IANA-IPFIX], with the following\n
          \  definition:\n      Description: An IPFIX Information Element that denotes
          that the\n      TimeTicks value of a MIB object will be exported.  The MIB
          Object\n      Identifier (\"mibObjectIdentifier\") for this field MUST be
          exported\n      in a MIB Field Option or via another means.  This Information\n
          \     Element is used for MIB objects with the Base syntax of TimeTicks.\n
          \     The value is encoded as per the standard IPFIX Abstract Data Type\n
          \     of unsigned32.\n      Abstract Data Type: unsigned32\n      Data Type
          Semantics: quantity\n      ElementId: 441\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.8.  mibObjectValueTimeTicks
      - contents:
        - "11.2.1.9.  mibObjectValueUnsigned\n   A new Information Element \"mibObjectValueUnsigned\"
          has been allocated\n   in IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that an\n      unsigned integer value of a MIB object will be exported.
          \ The MIB\n      Object Identifier (\"mibObjectIdentifier\") for this field
          MUST be\n      exported in a MIB Field Option or via another means.  This\n
          \     Information Element is used for MIB objects with the Base syntax\n
          \     of unsigned32 with IPFIX reduced-size encoding used as required.\n
          \     The value is encoded as per the standard IPFIX Abstract Data Type\n
          \     of unsigned32.\n      Abstract Data Type: unsigned32\n      Data Type
          Semantics: quantity\n      ElementId: 442\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.9.  mibObjectValueUnsigned
      - contents:
        - "11.2.1.10.  mibObjectValueTable\n   A new Information Element \"mibObjectValueTable\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that a\n      complete or partial conceptual table will be exported.  The
          MIB\n      Object Identifier (\"mibObjectIdentifier\") for this field MUST
          be\n      exported in a MIB Field Option or via another means.  This\n      Information
          Element is used for MIB objects with a syntax of\n      SEQUENCE OF.  This
          is encoded as a subTemplateList of\n      mibObjectValue Information Elements.
          \ The Template specified in\n      the subTemplateList MUST be an Options
          Template and MUST include\n      all the objects listed in the INDEX clause
          as Scope Fields.\n      Abstract Data Type: subTemplateList\n      Data
          Type Semantics: list\n      ElementId: 443\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.1.10.  mibObjectValueTable
      - contents:
        - "11.2.1.11.  mibObjectValueRow\n   A new Information Element \"mibObjectValueRow\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that a\n      single row of a conceptual table will be exported.  The MIB
          Object\n      Identifier (\"mibObjectIdentifier\") for this field MUST be
          exported\n      in a MIB Field Option or via another means.  This Information\n
          \     Element is used for MIB objects with a syntax of SEQUENCE.  This\n
          \     is encoded as a subTemplateList of mibObjectValue Information\n      Elements.
          \ The subTemplateList exported MUST contain exactly one\n      row (i.e.,
          one instance of the subTemplate).  The Template\n      specified in the
          subTemplateList MUST be an Options Template and\n      MUST include all
          the objects listed in the INDEX clause as Scope\n      Fields.\n      Abstract
          Data Type: subTemplateList\n      Data Type Semantics: list\n      ElementId:
          444\n      Status: current\n      Reference: RFC 8038\n"
        title: 11.2.1.11.  mibObjectValueRow
      title: 11.2.1.  New MIB Object Value Information Elements
    - contents:
      - '11.2.2.  New MIB Field Options Information Elements

        '
      - contents:
        - "11.2.2.1.  mibObjectIdentifier\n   A new Information Element \"mibObjectIdentifier\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An IPFIX Information Element that denotes
          that a MIB\n      Object Identifier (MIB OID) is exported in the (Options)\n
          \     Template Record.  The mibObjectIdentifier Information Element\n      contains
          the OID assigned to the MIB object type definition\n      encoded as ASN.1/BER
          [X.690].\n      Abstract Data Type: octetArray\n      Data Type Semantics:
          default\n      ElementId: 445\n      Status: current\n      Reference: RFC
          8038\n"
        title: 11.2.2.1.  mibObjectIdentifier
      - contents:
        - "11.2.2.2.  mibSubIdentifier\n   A new Information Element \"mibSubIdentifier\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: A non-negative sub-identifier of an Object
          Identifier\n      (OID).\n      Abstract Data Type: unsigned32\n      Data
          Type Semantics: identifier\n      ElementId: 446\n      Status: current\n
          \     Reference: RFC 8038\n"
        title: 11.2.2.2.  mibSubIdentifier
      - contents:
        - "11.2.2.3.  mibIndexIndicator\n   A new Information Element \"mibIndexIndicator\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: A set of bit fields that is used for marking
          the\n      Information Elements of a Data Record that serve as INDEX MIB\n
          \     objects for an indexed columnar MIB object.  Each bit represents\n
          \     an Information Element in the Data Record, with the n-th least\n      significant
          bit representing the n-th Information Element.  A bit\n      set to 1 indicates
          that the corresponding Information Element is\n      an index of the columnar
          object represented by the mibObjectValue.\n      A bit set to 0 indicates
          that this is not the case.\n      If the Data Record contains more than
          64 Information Elements, the\n      corresponding Template SHOULD be designed
          such that all index\n      fields are among the first 64 Information Elements,
          because the\n      mibIndexIndicator only contains 64 bits.  If the Data
          Record\n      contains less than 64 Information Elements, then the extra
          bits in\n      the mibIndexIndicator for which no corresponding Information\n
          \     Element exists MUST have the value 0 and must be disregarded by\n
          \     the Collector.  This Information Element may be exported with\n      IPFIX
          reduced-size encoding.\n      Abstract Data Type: unsigned64\n      Data
          Type Semantics: flags\n      ElementId: 447\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.2.3.  mibIndexIndicator
      - contents:
        - "11.2.2.4.  mibCaptureTimeSemantics\n   A new Information Element \"mibCaptureTimeSemantics\"
          has been\n   allocated in IANA's IPFIX registry [IANA-IPFIX], with the following\n
          \  definition:\n      Description: Indicates when in the lifetime of the
          Flow the MIB\n      value was retrieved from the MIB for a mibObjectIdentifier.
          \ This\n      is used to indicate if the value exported was collected from
          the\n      MIB closer to Flow creation or Flow export time and refers to
          the\n      Timestamp fields included in the same Data Record.  This field\n
          \     SHOULD be used when exporting a mibObjectValue that specifies\n      counters
          or statistics.\n      If the MIB value was sampled by SNMP prior to the
          IPFIX Metering\n      Process or Exporting Process retrieving the value
          (i.e., the data\n      is already stale) and it is important to know the
          exact sampling\n      time, then an additional observationTime* element
          should be paired\n      with the OID using IPFIX Structured Data [RFC6313].
          \ Similarly, if\n      different MIB capture times apply to different mibObjectValue\n
          \     elements within the Data Record, then individual\n      mibCaptureTimeSemantics
          Information Elements should be paired with\n      each OID using IPFIX Structured
          Data.\n      Values:\n         0  undefined\n         1  begin - The value
          for the MIB object is captured from the\n            MIB when the Flow is
          first observed\n         2  end - The value for the MIB object is captured
          from the MIB\n            when the Flow ends\n         3  export - The value
          for the MIB object is captured from the\n            MIB at export time\n
          \        4  average - The value for the MIB object is an average of\n            multiple
          captures from the MIB over the observed life of\n            the Flow\n
          \     Abstract Data Type: unsigned8\n      Data Type Semantics: identifier\n
          \     ElementId: 448\n      Status: current\n      Reference: RFC 8038\n"
        title: 11.2.2.4.  mibCaptureTimeSemantics
      - contents:
        - "11.2.2.5.  mibContextEngineID\n   A new Information Element \"mibContextEngineID\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: A mibContextEngineID that specifies the
          SNMP\n      engine ID for a MIB field being exported over IPFIX.  Definition\n
          \     as per [RFC3411], Section 3.3.\n      Abstract Data Type: octetArray\n
          \     Data Type Semantics: default\n      ElementId: 449\n      Status:
          current\n      Reference: RFC 8038\n"
        title: 11.2.2.5.  mibContextEngineID
      - contents:
        - "11.2.2.6.  mibContextName\n   A new Information Element \"mibContextName\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: An Information Element that denotes that
          a MIB\n      context name is specified for a MIB field being exported over\n
          \     IPFIX.  Reference [RFC3411], Section 3.3.\n      Abstract Data Type:
          string\n      Data Type Semantics: default\n      ElementId: 450\n      Status:
          current\n      Reference: RFC 8038\n"
        title: 11.2.2.6.  mibContextName
      title: 11.2.2.  New MIB Field Options Information Elements
    - contents:
      - '11.2.3.  New MIB Type Information Elements

        '
      - contents:
        - "11.2.3.1.  mibObjectName\n   A new Information Element \"mibObjectName\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: The name (called a descriptor in [RFC2578])
          of an\n      object type definition.\n      Abstract Data Type: string\n
          \     Data Type Semantics: default\n      ElementId: 451\n      Status:
          current\n      Reference: RFC 8038\n"
        title: 11.2.3.1.  mibObjectName
      - contents:
        - "11.2.3.2.  mibObjectDescription\n   A new Information Element \"mibObjectDescription\"
          has been allocated\n   in IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: The value of the DESCRIPTION clause of a
          MIB object\n      type definition.\n      Abstract Data Type: string\n      Data
          Type Semantics: default\n      ElementId: 452\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.3.2.  mibObjectDescription
      - contents:
        - "11.2.3.3.  mibObjectSyntax\n   A new Information Element \"mibObjectSyntax\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: The value of the SYNTAX clause of a MIB
          object type\n      definition, which may include a textual convention or
          sub-typing.\n      See [RFC2578].\n      Abstract Data Type: string\n      Data
          Type Semantics: default\n      ElementId: 453\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.3.3.  mibObjectSyntax
      - contents:
        - "11.2.3.4.  mibModuleName\n   A new Information Element \"mibModuleName\"
          has been allocated in\n   IANA's IPFIX registry [IANA-IPFIX], with the following
          definition:\n      Description: The textual name of the MIB module that
          defines a MIB\n      object.\n      Abstract Data Type: string\n      Data
          Type Semantics: default\n      ElementId: 454\n      Status: current\n      Reference:
          RFC 8038\n"
        title: 11.2.3.4.  mibModuleName
      title: 11.2.3.  New MIB Type Information Elements
    title: 11.2.  New IPFIX Information Elements
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [IANA-IPFIX]\n              IANA, \"IP Flow
      Information Export (IPFIX) Entities\",\n              <http://www.iana.org/assignments/ipfix/>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2578]  McCloghrie,
      K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder, Ed., \"Structure
      of Management Information\n              Version 2 (SMIv2)\", STD 58, RFC 2578,\n
      \             DOI 10.17487/RFC2578, April 1999,\n              <http://www.rfc-editor.org/info/rfc2578>.\n
      \  [RFC2856]  Bierman, A., McCloghrie, K., and R. Presuhn, \"Textual\n              Conventions
      for Additional High Capacity Data Types\",\n              RFC 2856, DOI 10.17487/RFC2856,
      June 2000,\n              <http://www.rfc-editor.org/info/rfc2856>.\n   [RFC3411]
      \ Harrington, D., Presuhn, R., and B. Wijnen, \"An\n              Architecture
      for Describing Simple Network Management\n              Protocol (SNMP) Management
      Frameworks\", STD 62, RFC 3411,\n              DOI 10.17487/RFC3411, December
      2002,\n              <http://www.rfc-editor.org/info/rfc3411>.\n   [RFC6526]
      \ Claise, B., Aitken, P., Johnson, A., and G. Muenz,\n              \"IP Flow
      Information Export (IPFIX) Per Stream Control\n              Transmission Protocol
      (SCTP) Stream\", RFC 6526,\n              DOI 10.17487/RFC6526, March 2012,\n
      \             <http://www.rfc-editor.org/info/rfc6526>.\n   [RFC7011]  Claise,
      B., Ed., Trammell, B., Ed., and P. Aitken,\n              \"Specification of
      the IP Flow Information Export (IPFIX)\n              Protocol for the Exchange
      of Flow Information\", STD 77,\n              RFC 7011, DOI 10.17487/RFC7011,
      September 2013,\n              <http://www.rfc-editor.org/info/rfc7011>.\n   [RFC7012]
      \ Claise, B., Ed., and B. Trammell, Ed., \"Information Model\n              for
      IP Flow Information Export (IPFIX)\", RFC 7012,\n              DOI 10.17487/RFC7012,
      September 2013,\n              <http://www.rfc-editor.org/info/rfc7012>.\n   [X.690]
      \   International Telecommunication Union, \"Information\n              Technology
      - ASN.1 encoding rules: Specification of Basic\n              Encoding Rules
      (BER), Canonical Encoding Rules (CER) and\n              Distinguished Encoding
      Rules (DER)\", ITU-T Recommendation\n              X.690, ISO/IEC 8825-1, August
      2015,\n              <https://www.itu.int/rec/T-REC-X.690>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [CISCO-PROCESS-MIB]\n              Cisco
      Systems Inc., \"CISCO-PROCESS-MIB.my: MIB for CPU and\n              process
      statistics\", <ftp://ftp.cisco.com/pub/mibs/v2/\n              CISCO-PROCESS-MIB.my>.\n
      \  [RFC2863]  McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n              MIB\",
      RFC 2863, DOI 10.17487/RFC2863, June 2000,\n              <http://www.rfc-editor.org/info/rfc2863>.\n
      \  [RFC2982]  Kavasseri, R., Ed., \"Distributed Management Expression\n              MIB\",
      RFC 2982, DOI 10.17487/RFC2982, October 2000,\n              <http://www.rfc-editor.org/info/rfc2982>.\n
      \  [RFC3414]  Blumenthal, U. and B. Wijnen, \"User-based Security Model\n              (USM)
      for version 3 of the Simple Network Management\n              Protocol (SNMPv3)\",
      STD 62, RFC 3414,\n              DOI 10.17487/RFC3414, December 2002,\n              <http://www.rfc-editor.org/info/rfc3414>.\n
      \  [RFC3415]  Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n              Access
      Control Model (VACM) for the Simple Network\n              Management Protocol
      (SNMP)\", STD 62, RFC 3415,\n              DOI 10.17487/RFC3415, December 2002,\n
      \             <http://www.rfc-editor.org/info/rfc3415>.\n   [RFC3444]  Pras,
      A. and J. Schoenwaelder, \"On the Difference between\n              Information
      Models and Data Models\", RFC 3444,\n              DOI 10.17487/RFC3444, January
      2003,\n              <http://www.rfc-editor.org/info/rfc3444>.\n   [RFC4022]
      \ Raghunarayan, R., Ed., \"Management Information Base for\n              the
      Transmission Control Protocol (TCP)\", RFC 4022,\n              DOI 10.17487/RFC4022,
      March 2005,\n              <http://www.rfc-editor.org/info/rfc4022>.\n   [RFC4293]
      \ Routhier, S., Ed., \"Management Information Base for the\n              Internet
      Protocol (IP)\", RFC 4293, DOI 10.17487/RFC4293,\n              April 2006,
      <http://www.rfc-editor.org/info/rfc4293>.\n   [RFC4750]  Joyal, D., Ed., Galecki,
      P., Ed., Giacalone, S., Ed.,\n              Coltun, R., and F. Baker, \"OSPF
      Version 2 Management\n              Information Base\", RFC 4750, DOI 10.17487/RFC4750,\n
      \             December 2006, <http://www.rfc-editor.org/info/rfc4750>.\n   [RFC4960]
      \ Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n              RFC
      4960, DOI 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n
      \  [RFC5102]  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.\n              Meyer,
      \"Information Model for IP Flow Information Export\",\n              RFC 5102,
      DOI 10.17487/RFC5102, January 2008,\n              <http://www.rfc-editor.org/info/rfc5102>.\n
      \  [RFC5476]  Claise, B., Ed., Johnson, A., and J. Quittek, \"Packet\n              Sampling
      (PSAMP) Protocol Specifications\", RFC 5476,\n              DOI 10.17487/RFC5476,
      March 2009,\n              <http://www.rfc-editor.org/info/rfc5476>.\n   [RFC5591]
      \ Harrington, D. and W. Hardaker, \"Transport Security Model\n              for
      the Simple Network Management Protocol (SNMP)\",\n              STD 78, RFC
      5591, DOI 10.17487/RFC5591, June 2009,\n              <http://www.rfc-editor.org/info/rfc5591>.\n
      \  [RFC5592]  Harrington, D., Salowey, J., and W. Hardaker, \"Secure\n              Shell
      Transport Model for the Simple Network Management\n              Protocol (SNMP)\",
      RFC 5592, DOI 10.17487/RFC5592,\n              June 2009, <http://www.rfc-editor.org/info/rfc5592>.\n
      \  [RFC6235]  Boschi, E. and B. Trammell, \"IP Flow Anonymization\n              Support\",
      RFC 6235, DOI 10.17487/RFC6235, May 2011,\n              <http://www.rfc-editor.org/info/rfc6235>.\n
      \  [RFC6313]  Claise, B., Dhandapani, G., Aitken, P., and S. Yates,\n              \"Export
      of Structured Data in IP Flow Information Export\n              (IPFIX)\", RFC
      6313, DOI 10.17487/RFC6313, July 2011,\n              <http://www.rfc-editor.org/info/rfc6313>.\n
      \  [RFC6353]  Hardaker, W., \"Transport Layer Security (TLS) Transport\n              Model
      for the Simple Network Management Protocol (SNMP)\",\n              STD 78,
      RFC 6353, DOI 10.17487/RFC6353, July 2011,\n              <http://www.rfc-editor.org/info/rfc6353>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Acknowledgments\n   The authors would like to thank Andrew Johnson for his collaboration\n
    \  on the first draft version of this document, and to thank Andrew\n   Feren
    and Brian Trammell for their detailed reviews.\n   Juergen Schoenwaelder was partly
    funded by Flamingo, a Network of\n   Excellence project (ICT-318488) supported
    by the European Commission\n   under its Seventh Framework Programme.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Paul Aitken (editor)\n   Brocade Communications Systems,
    Inc.\n   19a Canning Street, Level 3\n   Edinburgh, Scotland  EH3 8EG\n   United
    Kingdom\n   Phone: +44 203 005 0731\n   Email: paitken@brocade.com\n   Benoit
    Claise\n   Cisco Systems, Inc.\n   De Kleetlaan 6a b1\n   Diegem  1813\n   Belgium\n
    \  Phone: +32 2 704 5622\n   Email: bclaise@cisco.com\n   Srikar B S\n   Mojo
    Networks, Inc.\n   S. No. 7, Pinnac House II\n   Kothrud, Pune  411038\n   India\n
    \  Phone: +91 94 4847 6672\n   Email: srikarbs@gmail.com\n   Colin McDowall\n
    \  Brocade Communications Systems, Inc.\n   19a Canning Street, Level 3\n   Edinburgh,
    Scotland  EH3 8EG\n   United Kingdom\n   Phone: +44 203 005 0687\n   Email: cmcdowal@brocade.com\n
    \  Juergen Schoenwaelder\n   Jacobs University Bremen\n   Campus Ring 1\n   Bremen
    \ 28725\n   Germany\n   Phone: +49 421 200 3587\n   Email: j.schoenwaelder@jacobs-university.de\n"
  title: Authors' Addresses
