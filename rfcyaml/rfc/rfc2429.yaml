- title: __initial_text__
  contents:
  - "               RTP Payload Format for the 1998 Version of\n                 \
    \   ITU-T Rec. H.263 Video (H.263+)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies an RTP payload header format applicable\
    \ to\n   the transmission of video streams generated based on the 1998 version\n\
    \   of ITU-T Recommendation H.263 [4].  Because the 1998 version of H.263\n  \
    \ is a superset of the 1996 syntax, this format can also be used with\n   the\
    \ 1996 version of H.263 [3], and is recommended for this use by new\n   implementations.\
    \  This format does not replace RFC 2190, which\n   continues to be used by existing\
    \ implementations, and may be required\n   for backward compatibility in new implementations.\
    \  Implementations\n   using the new features of the 1998 version of H.263 shall\
    \ use the\n   format described in this document.\n   The 1998 version of ITU-T\
    \ Recommendation H.263 added numerous coding\n   options to improve codec performance\
    \ over the 1996 version.  The 1998\n   version is referred to as H.263+ in this\
    \ document.  Among the new\n   options, the ones with the biggest impact on the\
    \ RTP payload\n   specification and the error resilience of the video content\
    \ are the\n   slice structured mode, the independent segment decoding mode, the\n\
    \   reference picture selection mode, and the scalability mode.  This\n   section\
    \ summarizes the impact of these new coding options on\n   packetization.  Refer\
    \ to [4] for more information on coding options.\n   The slice structured mode\
    \ was added to H.263+ for three purposes: to\n   provide enhanced error resilience\
    \ capability, to make the bitstream\n   more amenable to use with an underlying\
    \ packet transport such as RTP,\n   and to minimize video delay.  The slice structured\
    \ mode supports\n   fragmentation at macroblock boundaries.\n   With the independent\
    \ segment decoding (ISD) option, a video picture\n   frame is broken into segments\
    \ and encoded in such a way that each\n   segment is independently decodable.\
    \  Utilizing ISD in a lossy network\n   environment helps to prevent the propagation\
    \ of errors from one\n   segment of the picture to others.\n   The reference picture\
    \ selection mode allows the use of an older\n   reference picture rather than\
    \ the one immediately preceding the\n   current picture.  Usually, the last transmitted\
    \ frame is implicitly\n   used as the reference picture for inter-frame prediction.\
    \  If the\n   reference picture selection mode is used, the data stream carries\n\
    \   information on what reference frame should be used, indicated by the\n   temporal\
    \ reference as an ID for that reference frame.  The reference\n   picture selection\
    \ mode can be used with or without a back channel,\n   which provides information\
    \ to the encoder about the internal status\n   of the decoder.  However, no special\
    \ provision is made herein for\n   carrying back channel information.\n   H.263+\
    \ also includes bitstream scalability as an optional coding\n   mode.  Three kinds\
    \ of scalability are defined: temporal, signal-to-\n   noise ratio (SNR), and\
    \ spatial scalability.  Temporal scalability is\n   achieved via the disposable\
    \ nature of bi-directionally predicted\n   frames, or B-frames. (A low-delay form\
    \ of temporal scalability known\n   as P-picture temporal scalability can also\
    \ be achieved by using the\n   reference picture selection mode described in the\
    \ previous\n   paragraph.)  SNR scalability permits refinement of encoded video\n\
    \   frames, thereby improving the quality (or SNR).  Spatial scalability\n   is\
    \ similar to SNR scalability except the refinement layer is twice\n   the size\
    \ of the base layer in the horizontal dimension, vertical\n   dimension, or both.\n"
- title: 2. Usage of RTP
  contents:
  - "2. Usage of RTP\n   When transmitting H.263+ video streams over the Internet,\
    \ the output\n   of the encoder can be packetized directly.  All the bits resulting\n\
    \   from the bitstream including the fixed length codes and variable\n   length\
    \ codes will be included in the packet, with the only exception\n   being that\
    \ when the payload of a packet begins with a Picture, GOB,\n   Slice, EOS, or\
    \ EOSBS start code, the first two (all-zero) bytes of\n   the start code are removed\
    \ and replaced by setting an indicator bit\n   in the payload header.\n   For\
    \ H.263+ bitstreams coded with temporal, spatial, or SNR\n   scalability, each\
    \ layer may be transported to a different network\n   address.  More specifically,\
    \ each layer may use a unique IP address\n   and port number combination.  The\
    \ temporal relations between layers\n   shall be expressed using the RTP timestamp\
    \ so that they can be\n   synchronized at the receiving ends in multicast or unicast\n\
    \   applications.\n   The H.263+ video stream will be carried as payload data\
    \ within RTP\n   packets.  A new H.263+ payload header is defined in section 4.\
    \  This\n   section defines the usage of the RTP fixed header and H.263+ video\n\
    \   packet structure.\n"
- title: 2.1 RTP Header Usage
  contents:
  - "2.1 RTP Header Usage\n   Each RTP packet starts with a fixed RTP header.  The\
    \ following fields\n   of the RTP fixed header are used for H.263+ video streams:\n\
    \   Marker bit (M bit): The Marker bit of the RTP header is set to 1 when\n  \
    \ the current packet carries the end of current frame, and is 0\n   otherwise.\n\
    \   Payload Type (PT): The Payload Type shall specify the H.263+ video\n   payload\
    \ format.\n   Timestamp: The RTP Timestamp encodes the sampling instance of the\n\
    \   first video frame data contained in the RTP data packet.  The RTP\n   timestamp\
    \ shall be the same on successive packets if a video frame\n   occupies more than\
    \ one packet.  In a multilayer scenario, all\n   pictures corresponding to the\
    \ same temporal reference should use the\n   same timestamp.  If temporal scalability\
    \ is used (if B-frames are\n   present), the timestamp may not be monotonically\
    \ increasing in the\n   RTP stream.  If B-frames are transmitted on a separate\
    \ layer and\n   address, they must be synchronized properly with the reference\n\
    \   frames.  Refer to the 1998 ITU-T Recommendation H.263 [4] for\n   information\
    \ on required transmission order to a decoder.  For an\n   H.263+ video stream,\
    \ the RTP timestamp is based on a 90 kHz clock,\n   the same as that of the RTP\
    \ payload for H.261 stream [5].  Since both\n   the H.263+ data and the RTP header\
    \ contain time information, it is\n   required that those timing information run\
    \ synchronously.  That is,\n   both the RTP timestamp and the temporal reference\
    \ (TR in the picture\n   header of H.263) should carry the same relative timing\
    \ information.\n   Any H.263+ picture clock frequency can be expressed as\n  \
    \ 1800000/(cd*cf) source pictures per second, in which cd is an integer\n   from\
    \ 1 to 127 and cf is either 1000 or 1001.  Using the 90 kHz clock\n   of the RTP\
    \ timestamp, the time increment between each coded H.263+\n   picture should therefore\
    \ be a integer multiple of (cd*cf)/20. This\n   will always be an integer for\
    \ any \"reasonable\" picture clock\n   frequency (for example, it is 3003 for\
    \ 29.97 Hz NTSC, 3600 for 25 Hz\n   PAL, 3750 for 24 Hz film, and 1500, 1250 and\
    \ 1200 for the computer\n   display update rates of 60, 72 and 75 Hz, respectively).\
    \  For RTP\n   packetization of hypothetical H.263+ bitstreams using \"unreasonable\"\
    \n   custom picture clock frequencies, mathematical rounding could become\n  \
    \ necessary for generating the RTP timestamps.\n"
- title: 2.2 Video Packet Structure
  contents:
  - "2.2 Video Packet Structure\n   A section of an H.263+ compressed bitstream is\
    \ carried as a payload\n   within each RTP packet.  For each RTP packet, the RTP\
    \ header is\n   followed by an H.263+ payload header, which is followed by a number\n\
    \   of bytes of a standard H.263+ compressed bitstream.  The size of the\n   H.263+\
    \ payload header is variable depending on the payload involved\n   as detailed\
    \ in the section 4.  The layout of the RTP H.263+ video\n   packet is shown as:\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    RTP Header                                               ...\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \  H.263+ Payload Header                                    ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    H.263+ Compressed Data Stream                            ...\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Any H.263+\
    \ start codes can be byte aligned by an encoder by using the\n   stuffing mechanisms\
    \ of H.263+.  As specified in H.263+, picture,\n   slice, and EOSBS starts codes\
    \ shall always be byte aligned, and GOB\n   and EOS start codes may be byte aligned.\
    \  For packetization purposes,\n   GOB start codes should be byte aligned; however,\
    \ since this is not\n   required in H.263+, there may be some cases where GOB\
    \ start codes are\n   not aligned, such as when transmitting existing content,\
    \ or when\n   using H.263 encoders that do not support GOB start code alignment.\n\
    \   In this case, follow-on packets (see section 5.2) should be used for\n   packetization.\n\
    \   All H.263+ start codes (Picture, GOB, Slice, EOS, and EOSBS) begin\n   with\
    \ 16 zero-valued bits.  If a start code is byte aligned and it\n   occurs at the\
    \ beginning of a packet, these two bytes shall be removed\n   from the H.263+\
    \ compressed data stream in the packetization process\n   and shall instead be\
    \ represented by setting a bit (the P bit) in the\n   payload header.\n"
- title: 3. Design Considerations
  contents:
  - "3. Design Considerations\n   The goals of this payload format are to specify\
    \ an efficient way of\n   encapsulating an H.263+ standard compliant bitstream\
    \ and to enhance\n   the resiliency towards packet losses.  Due to the large number\
    \ of\n   different possible coding schemes in H.263+, a copy of the picture\n\
    \   header with configuration information is inserted into the payload\n   header\
    \ when appropriate.  The use of that copy of the picture header\n   along with\
    \ the payload data can allow decoding of a received packet\n   even in such cases\
    \ in which another packet containing the original\n   picture header becomes lost.\n\
    \   There are a few assumptions and constraints associated with this\n   H.263+\
    \ payload header design.  The purpose of this section is to\n   point out various\
    \ design issues and also to discuss several coding\n   options provided by H.263+\
    \ that may impact the performance of\n   network-based H.263+ video.\n   o The\
    \ optional slice structured mode described in Annex K of H.263+\n     [4] enables\
    \ more flexibility for packetization.  Similar to a\n     picture segment that\
    \ begins with a GOB header, the motion vector\n     predictors in a slice are\
    \ restricted to reside within its\n     boundaries.  However, slices provide much\
    \ greater freedom in the\n     selection of the size and shape of the area which\
    \ is represented as\n     a distinct decodable region. In particular, slices can\
    \ have a size\n     which is dynamically selected to allow the data for each slice\
    \ to\n     fit into a chosen packet size. Slices can also be chosen to have a\n\
    \     rectangular shape which is conducive for minimizing the impact of\n    \
    \ errors and packet losses on motion compensated prediction.  For\n     these\
    \ reasons, the use of the slice structured mode is strongly\n     recommended\
    \ for any applications used in environments where\n     significant packet loss\
    \ occurs.\n   o In non-rectangular slice structured mode, only complete slices\n\
    \     should be included in a packet.  In other words, slices should not\n   \
    \  be fragmented across packet boundaries.  The only reasonable need\n     for\
    \ a slice to be fragmented across packet boundaries is when the\n     encoder\
    \ which generated the H.263+ data stream could not be\n     influenced by an awareness\
    \ of the packetization process (such as\n     when sending H.263+ data through\
    \ a network other than the one to\n     which the encoder is attached, as in network\
    \ gateway\n     implementations).  Optimally, each packet will contain only one\n\
    \     slice.\n   o The independent segment decoding (ISD) described in Annex R\
    \ of [4]\n     prevents any data dependency across slice or GOB boundaries in\
    \ the\n     reference picture.  It can be utilized to further improve\n     resiliency\
    \ in high loss conditions.\n   o If ISD is used in conjunction with the slice\
    \ structure, the\n     rectangular slice submode shall be enabled and the dimensions\
    \ and\n     quantity of the slices present in a frame shall remain the same\n\
    \     between each two intra-coded frames (I-frames), as required in\n     H.263+.\
    \ The individual ISD segments may also be entirely intra\n     coded from time\
    \ to time to realize quick error recovery without\n     adding the latency time\
    \ associated with sending complete INTRA-\n     pictures.\n   o When the slice\
    \ structure is not applied, the insertion of a\n     (preferably byte-aligned)\
    \ GOB header can be used to provide resync\n     boundaries in the bitstream,\
    \ as the presence of a GOB header\n     eliminates the dependency of motion vector\
    \ prediction across GOB\n     boundaries.  These resync boundaries provide natural\
    \ locations for\n     packet payload boundaries.\n   o H.263+ allows picture headers\
    \ to be sent in an abbreviated form in\n     order to prevent repetition of overhead\
    \ information that does not\n     change from picture to picture.  For resiliency,\
    \ sending a complete\n     picture header for every frame is often advisable.\
    \  This means that\n     (especially in cases with high packet loss probability\
    \ in which\n     picture header contents are not expected to be highly predictable),\n\
    \     the sender may find it advisable to always set the subfield UFEP in\n  \
    \   PLUSPTYPE to '001' in the H.263+ video bitstream.  (See [4] for the\n    \
    \ definition of the UFEP and PLUSPTYPE fields).\n   o In a multi-layer scenario,\
    \ each layer may be transmitted to a\n     different network address.  The configuration\
    \ of each layer such as\n     the enhancement layer number (ELNUM), reference\
    \ layer number\n     (RLNUM), and scalability type should be determined at the\
    \ start of\n     the session and should not change during the course of the session.\n\
    \   o All start codes can be byte aligned, and picture, slice, and EOSBS\n   \
    \  start codes are always byte aligned.  The boundaries of these\n     syntactical\
    \ elements provide ideal locations for placing packet\n     boundaries.\n   o\
    \ We assume that a maximum Picture Header size of 504 bits is\n     sufficient.\
    \  The syntax of H.263+ does not explicitly prohibit\n     larger picture header\
    \ sizes, but the use of such extremely large\n     picture headers is not expected.\n"
- title: 4. H.263+ Payload Header
  contents:
  - "4. H.263+ Payload Header\n   For H.263+ video streams, each RTP packet carries\
    \ only one H.263+\n   video packet.  The H.263+ payload header is always present\
    \ for each\n   H.263+ video packet.  The payload header is of variable length.\
    \  A 16\n   bit field of the basic payload header may be followed by an 8 bit\n\
    \   field for Video Redundancy Coding (VRC) information, and/or by a\n   variable\
    \ length extra picture header as indicated by PLEN. These\n   optional fields\
    \ appear in the order given above when present.\n   If an extra picture header\
    \ is included in the payload header, the\n   length of the picture header in number\
    \ of bytes is specified by PLEN.\n   The minimum length of the payload header\
    \ is 16 bits, corresponding to\n   PLEN equal to 0 and no VRC information present.\n\
    \   The remainder of this section defines the various components of the\n   RTP\
    \ payload header.  Section five defines the various packet types\n   that are\
    \ used to carry different types of H.263+ coded data, and\n   section six summarizes\
    \ how to distinguish between the various packet\n   types.\n"
- title: 4.1 General H.263+ payload header
  contents:
  - "4.1 General H.263+ payload header\n   The H.263+ payload header is structured\
    \ as follows:\n      0                   1\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |   RR    |P|V|   PLEN   \
    \ |PEBIT|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   RR: 5 bits\n     Reserved\
    \ bits.  Shall be zero.\n   P: 1 bit\n     Indicates the picture start or a picture\
    \ segment (GOB/Slice) start\n     or a video sequence end (EOS or EOSBS).  Two\
    \ bytes of zero bits\n     then have to be prefixed to the payload of such a packet\
    \ to compose\n     a complete picture/GOB/slice/EOS/EOSBS start code.  This bit\
    \ allows\n     the omission of the two first bytes of the start codes, thus\n\
    \     improving the compression ratio.\n   V: 1 bit\n     Indicates the presence\
    \ of an 8 bit field containing information for\n     Video Redundancy Coding (VRC),\
    \ which follows immediately after the\n     initial 16 bits of the payload header\
    \ if present.  For syntax and\n     semantics of that 8 bit VRC field see section\
    \ 4.2.\n   PLEN: 6 bits\n     Length in bytes of the extra picture header.  If\
    \ no extra picture\n     header is attached, PLEN is 0.  If PLEN>0, the extra\
    \ picture header\n     is attached immediately following the rest of the payload\
    \ header.\n     Note the length reflects the omission of the first two bytes of\
    \ the\n     picture start code (PSC).  See section 5.1.\n   PEBIT: 3 bits\n  \
    \   Indicates the number of bits that shall be ignored in the last byte\n    \
    \ of the picture header.  If PLEN is not zero, the ignored bits shall\n     be\
    \ the least significant bits of the byte.  If PLEN is zero, then\n     PEBIT shall\
    \ also be zero.\n"
- title: 4.2 Video Redundancy Coding Header Extension
  contents:
  - "4.2 Video Redundancy Coding Header Extension\n   Video Redundancy Coding (VRC)\
    \ is an optional mechanism intended to\n   improve error resilience over packet\
    \ networks.  Implementing VRC in\n   H.263+ will require the Reference Picture\
    \ Selection option described\n   in Annex N of [4].  By having multiple \"threads\"\
    \ of independently\n   inter-frame predicted pictures, damage of individual frame\
    \ will cause\n   distortions only within its own thread but leave the other threads\n\
    \   unaffected.  From time to time, all threads converge to a so-called\n   sync\
    \ frame (an INTRA picture or a non-INTRA picture which is\n   redundantly represented\
    \ within multiple threads); from this sync\n   frame, the independent threads\
    \ are started again.  For more\n   information on codec support for VRC see [7].\n\
    \   P-picture temporal scalability is another use of the reference\n   picture\
    \ selection mode and can be considered a special case of VRC in\n   which only\
    \ one copy of each sync frame may be sent.  It offers a\n   thread-based method\
    \ of temporal scalability without the increased\n   delay caused by the use of\
    \ B pictures.  In this use, sync frames sent\n   in the first thread of pictures\
    \ are also used for the prediction of a\n   second thread of pictures which fall\
    \ temporally between the sync\n   frames to increase the resulting frame rate.\
    \  In this use, the\n   pictures in the second thread can be discarded in order\
    \ to obtain a\n   reduction of bit rate or decoding complexity without harming\
    \ the\n   ability to decode later pictures.  A third or more threads can also\n\
    \   be added as well, but each thread is predicted only from the sync\n   frames\
    \ (which are sent at least in thread 0) or from frames within\n   the same thread.\n\
    \   While a VRC data stream is - like all H.263+ data - totally self-\n   contained,\
    \ it may be useful for the transport hierarchy\n   implementation to have knowledge\
    \ about the current damage status of\n   each thread.  On the Internet, this status\
    \ can easily be determined\n   by observing the marker bit, the sequence number\
    \ of the RTP header,\n   and the thread-id and a circling \"packet per thread\"\
    \ number.  The\n   latter two numbers are coded in the VRC header extension.\n\
    \   The format of the VRC header extension is as follows:\n      0 1 2 3 4 5 6\
    \ 7\n     +-+-+-+-+-+-+-+-+\n     | TID | Trun  |S|\n     +-+-+-+-+-+-+-+-+\n\
    \   TID: 3 bits\n     Thread ID.  Up to 7 threads are allowed. Each frame of H.263+\
    \ VRC\n     data will use as reference information only sync frames or frames\n\
    \     within the same thread.  By convention, thread 0 is expected to be\n   \
    \  the \"canonical\" thread, which is the thread from which the sync\n     frame\
    \ should ideally be used.  In the case of corruption or loss of\n     the thread\
    \ 0 representation, a representation of the sync frame\n     with a higher thread\
    \ number can be used by the decoder.  Lower\n     thread numbers are expected\
    \ to contain equal or better\n     representations of the sync frames than higher\
    \ thread numbers in\n     the absence of data corruption or loss.  See [7] for\
    \ a detailed\n     discussion of VRC.\n   Trun: 4 bits\n     Monotonically increasing\
    \ (modulo 16) 4 bit number counting the\n     packet number within each thread.\n\
    \   S: 1 bit\n     A bit that indicates that the packet content is for a sync\
    \ frame.\n     An encoder using VRC may send several representations of the same\n\
    \     \"sync\" picture, in order to ensure that regardless of which thread\n \
    \    of pictures is corrupted by errors or packet losses, the reception\n    \
    \ of at least one representation of a particular picture is ensured\n     (within\
    \ at least one thread).  The sync picture can then be used\n     for the prediction\
    \ of any thread.  If packet losses have not\n     occurred, then the sync frame\
    \ contents of thread 0 can be used and\n     those of other threads can be discarded\
    \ (and similarly for other\n     threads).  Thread 0 is considered the \"canonical\"\
    \ thread, the use\n     of which is preferable to all others.  The contents of\
    \ packets\n     having lower thread numbers shall be considered as having a higher\n\
    \     processing and delivery priority than those with higher thread\n     numbers.\
    \  Thus packets having lower thread numbers for a given sync\n     frame shall\
    \ be delivered first to the decoder under loss-free and\n     low-time-jitter\
    \ conditions, which will result in the discarding of\n     the sync contents of\
    \ the higher-numbered threads as specified in\n     Annex N of [4].\n"
- title: 5. Packetization schemes
  contents:
  - '5. Packetization schemes

    '
- title: 5.1 Picture Segment Packets and Sequence Ending Packets (P=1)
  contents:
  - "5.1 Picture Segment Packets and Sequence Ending Packets (P=1)\n   A picture segment\
    \ packet is defined as a packet that starts at the\n   location of a Picture,\
    \ GOB, or slice start code in the H.263+ data\n   stream.  This corresponds to\
    \ the definition of the start of a video\n   picture segment as defined in H.263+.\
    \  For such packets, P=1 always.\n   An extra picture header can sometimes be\
    \ attached in the payload\n   header of such packets.  Whenever an extra picture\
    \ header is attached\n   as signified by PLEN>0, only the last six bits of its\
    \ picture start\n   code, '100000', are included in the payload header.  A complete\n\
    \   H.263+ picture header with byte aligned picture start code can be\n   conveniently\
    \ assembled on the receiving end by prepending the sixteen\n   leading '0' bits.\n\
    \   When PLEN>0, the end bit position corresponding to the last byte of\n   the\
    \ picture header data is indicated by PEBIT.  The actual bitstream\n   data shall\
    \ begin on an 8-bit byte boundary following the payload\n   header.\n   A sequence\
    \ ending packet is defined as a packet that starts at the\n   location of an EOS\
    \ or EOSBS code in the H.263+ data stream.  This\n   delineates the end of a sequence\
    \ of H.263+ video data (more H.263+\n   video data may still follow later, however,\
    \ as specified in ITU-T\n   Recommendation H.263).  For such packets, P=1 and\
    \ PLEN=0 always.\n   The optional header extension for VRC may or may not be present\
    \ as\n   indicated by the V bit flag.\n"
- title: 5.1.1 Packets that begin with a Picture Start Code
  contents:
  - "5.1.1 Packets that begin with a Picture Start Code\n   Any packet that contains\
    \ the whole or the start of a coded picture\n   shall start at the location of\
    \ the picture start code (PSC), and\n   should normally be encapsulated with no\
    \ extra copy of the picture\n   header. In other words, normally PLEN=0 in such\
    \ a case.   However, if\n   the coded picture contains an incomplete picture header\
    \ (UFEP =\n   \"000\"), then a representation of the complete (UFEP = \"001\"\
    ) picture\n   header may be attached during packetization in order to provide\n\
    \   greater error resilience.  Thus, for packets that start at the\n   location\
    \ of a picture start code, PLEN shall be zero unless both of\n   the following\
    \ conditions apply:\n   1) The picture header in the H.263+ bitstream payload\
    \ is incomplete\n      (PLUSPTYPE present and UFEP=\"000\"), and\n   2) The additional\
    \ picture header which is attached is not incomplete\n      (UFEP=\"001\").\n\
    \   A packet which begins at the location of a Picture, GOB, slice, EOS,\n   or\
    \ EOSBS start code shall omit the first two (all zero) bytes from\n   the H.263+\
    \ bitstream, and signify their presence by setting P=1 in\n   the payload header.\n\
    \   Here is an example of encapsulating the first packet in a frame\n   (without\
    \ an attached redundant complete picture header):\n      0                   1\
    \                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   RR    |1|V|0|0|0|0|0|0|0|0|0| bitstream data without the    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | first\
    \ two 0 bytes of the PSC                                ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.1.2 Packets that begin with GBSC or SSC
  contents:
  - "5.1.2 Packets that begin with GBSC or SSC\n   For a packet that begins at the\
    \ location of a GOB or slice start\n   code, PLEN may be zero or may be nonzero,\
    \ depending on whether a\n   redundant picture header is attached to the packet.\
    \  In environments\n   with very low packet loss rates, or when picture header\
    \ contents are\n   very seldom likely to change (except as can be detected from\
    \ the GFID\n   syntax of H.263+), a redundant copy of the picture header is not\n\
    \   required. However, in less ideal circumstances a redundant picture\n   header\
    \ should be attached for enhanced error resilience, and its\n   presence is indicated\
    \ by PLEN>0.\n   Assuming a PLEN of 9 and P=1, below is an example of a packet\
    \ that\n   begins with a byte aligned GBSC or a SSC:\n      0                \
    \   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   RR    |1|V|0 0 1 0 0 1|PEBIT|1 0 0 0 0 0| picture header    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | starting\
    \ with TR, PTYPE ...                                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | ...                                           | bitstream     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | data\
    \ starting with GBSC/SSC without its first two 0 bytes   ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Notice that only the last six bits of the picture start code,\n   '100000',\
    \ are included in the payload header.  A complete H.263+\n   picture header with\
    \ byte aligned picture start code can be\n   conveniently assembled if needed\
    \ on the receiving end by prepending\n   the sixteen leading '0' bits.\n"
- title: 5.1.3 Packets that Begin with an EOS or EOSBS Code
  contents:
  - "5.1.3 Packets that Begin with an EOS or EOSBS Code\n   For a packet that begins\
    \ with an EOS or EOSBS code, PLEN shall be\n   zero, and no Picture, GOB, or Slice\
    \ start codes shall be included\n   within the same packet.  As with other packets\
    \ beginning with start\n   codes, the two all-zero bytes that begin the EOS or\
    \ EOSBS code at the\n   beginning of the packet shall be omitted, and their presence\
    \ shall be\n   indicated by setting the P bit to 1 in the payload header.\n  \
    \ System designers should be aware that some decoders may interpret the\n   loss\
    \ of a packet containing only EOS or EOSBS information as the loss\n   of essential\
    \ video data and may thus respond by not displaying some\n   subsequent video\
    \ information.  Since EOS and EOSBS codes do not\n   actually affect the decoding\
    \ of video pictures, they are somewhat\n   unnecessary to send at all.  Because\
    \ of the danger of\n   misinterpretation of the loss of such a packet (which can\
    \ be detected\n   by the sequence number), encoders are generally to be discouraged\n\
    \   from sending EOS and EOSBS.\n   Below is an example of a packet containing\
    \ an EOS code:\n      0                   1                   2\n      0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   RR    |1|V|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|0|0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   5.2 Encapsulating Follow-On Packet (P=0)\n   A Follow-on packet contains a\
    \ number of bytes of coded H.263+ data\n   which does not start at a synchronization\
    \ point.  That is, a Follow-\n   On packet does not start with a Picture, GOB,\
    \ Slice, EOS, or EOSBS\n   header, and it may or may not start at a macroblock\
    \ boundary.  Since\n   Follow-on packets do not start at synchronization points,\
    \ the data at\n   the beginning of a follow-on packet is not independently decodable.\n\
    \   For such packets, P=0 always.  If the preceding packet of a Follow-on\n  \
    \ packet got lost, the receiver may discard that Follow-on packet as\n   well\
    \ as all other following Follow-on packets.  Better behavior, of\n   course, would\
    \ be for the receiver to scan the interior of the packet\n   payload content to\
    \ determine whether any start codes are found in the\n   interior of the packet\
    \ which can be used as resync points.  The use\n   of an attached copy of a picture\
    \ header for a follow-on packet is\n   useful only if the interior of the packet\
    \ or some subsequent follow-\n   on packet contains a resync code such as a GOB\
    \ or slice start code.\n   PLEN>0 is allowed, since it may allow resync in the\
    \ interior of the\n   packet.  The decoder may also be resynchronized at the next\
    \ segment\n   or picture packet.\n   Here is an example of a follow-on packet\
    \ (with PLEN=0):\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   RR    |0|V|0|0|0|0|0|0|0|0|0| bitstream data              ...\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6. Use of this payload specification
  contents:
  - "6. Use of this payload specification\n   There is no syntactical difference between\
    \ a picture segment packet and\n   a Follow-on packet, other than the indication\
    \ P=1 for picture segment or\n   sequence ending packets and P=0 for Follow-on\
    \ packets.  See the\n   following for a summary of the entire packet types and\
    \ ways to\n   distinguish between them.\n   It is possible to distinguish between\
    \ the different packet types by\n   checking the P bit and the first 6 bits of\
    \ the payload along with the\n   header information.  The following table shows\
    \ the packet type for\n   permutations of this information (see also the picture/GOB/Slice\
    \ header\n   descriptions in H.263+ for details):\n"
- title: '--------------+--------------+----------------------+-------------------'
  contents:
  - "--------------+--------------+----------------------+-------------------\n First\
    \ 6 bits | P-Bit | PLEN |  Packet              |  Remarks\n of Payload   |(payload\
    \ hdr.)|                      |\n"
- title: '--------------+--------------+----------------------+-------------------'
  contents:
  - "--------------+--------------+----------------------+-------------------\n 100000\
    \       |   1   |  0   |  Picture             |  Typical Picture\n 100000    \
    \   |   1   | > 0  |  Picture             |  Note UFEP\n 1xxxxx       |   1  \
    \ |  0   |  GOB/Slice/EOS/EOSBS |  See possible GNs\n 1xxxxx       |   1   | >\
    \ 0  |  GOB/Slice           |  See possible GNs\n Xxxxxx       |   0   |  0  \
    \ |  Follow-on           |\n Xxxxxx       |   0   | > 0  |  Follow-on        \
    \   |  Interior Resync\n"
- title: '--------------+--------------+----------------------+-------------------'
  contents:
  - "--------------+--------------+----------------------+-------------------\n  \
    \ The details regarding the possible values of the five bit Group\n   Number (GN)\
    \ field which follows the initial \"1\" bit when the P-bit is\n   \"1\" for a\
    \ GOB, Slice, EOS, or EOSBS packet are found in section 5.2.3\n   of [4].\n  \
    \ As defined in this specification, every start of a coded frame (as\n   indicated\
    \ by the presence of a PSC) has to be encapsulated as a\n   picture segment packet.\
    \  If the whole coded picture fits into one\n   packet of reasonable size (which\
    \ is dependent on the connection\n   characteristics), this is the only type of\
    \ packet that may need to be\n   used.  Due to the high compression ratio achieved\
    \ by H.263+ it is\n   often possible to use this mechanism, especially for small\
    \ spatial\n   picture formats such as QCIF and typical Internet packet sizes around\n\
    \   1500 bytes.\n   If the complete coded frame does not fit into a single packet,\
    \ two\n   different ways for the packetization may be chosen.  In case of very\n\
    \   low or zero packet loss probability, one or more Follow-on packets\n   may\
    \ be used for coding the rest of the picture.  Doing so leads to\n   minimal coding\
    \ and packetization overhead as well as to an optimal\n   use of the maximal packet\
    \ size, but does not provide any added error\n   resilience.\n   The alternative\
    \ is to break the picture into reasonably small\n   partitions - called Segments\
    \ - (by using the Slice or GOB mechanism),\n   that do offer synchronization points.\
    \  By doing so and using the\n   Picture Segment payload with PLEN>0, decoding\
    \ of the transmitted\n   packets is possible even in such cases in which the Picture\
    \ packet\n   containing the picture header was lost (provided any necessary\n\
    \   reference picture is available). Picture Segment packets can also be\n   used\
    \ in conjunction with Follow-on packets for large segment sizes.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   RTP packets using the payload format defined in\
    \ this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [1], and any appropriate RTP profile (for example\
    \ [2]).\n   This implies that confidentiality of the media streams is achieved\
    \ by\n   encryption.  Because the data compression used with this payload\n  \
    \ format is applied end-to-end, encryption may be performed after\n   compression\
    \ so there is no conflict between the two operations.\n   A potential denial-of-service\
    \ threat exists for data encodings using\n   compression techniques that have\
    \ non-uniform receiver-end\n   computational load.  The attacker can inject pathological\
    \ datagrams\n   into the stream which are complex to decode and cause the receiver\
    \ to\n   be overloaded.  However, this encoding does not exhibit any\n   significant\
    \ non-uniformity.\n   As with any IP-based protocol, in some circumstances a receiver\
    \ may\n   be overloaded simply by the receipt of too many packets, either\n  \
    \ desired or undesired.  Network-layer authentication may be used to\n   discard\
    \ packets from undesired sources, but the processing cost of\n   the authentication\
    \ itself may be too high.  In a multicast\n   environment, pruning of specific\
    \ sources may be implemented in future\n   versions of IGMP [5] and in multicast\
    \ routing protocols to allow a\n   receiver to select which sources are allowed\
    \ to reach it.\n   A security review of this payload format found no additional\n\
    \   considerations beyond those in the RTP specification.\n"
- title: 8. Addresses of Authors
  contents:
  - "8. Addresses of Authors\n   Carsten Bormann\n   Universitaet Bremen FB3 TZI \
    \     EMail: cabo@tzi.org\n   Postfach 330440                  Phone: +49.421.218-7024\n\
    \   D-28334 Bremen, GERMANY          Fax:   +49.421.218-7000\n   Linda Cline\n\
    \   Intel Corp. M/S JF3-206          EMail: lscline@jf.intel.com\n   2111 NE 25th\
    \ Avenue              Phone: +1 503 264 3501\n   Hillsboro, OR 97124, USA    \
    \     Fax:   +1 503 264 3483\n   Gim Deisher\n   Intel Corp. M/S JF2-78      \
    \     EMail: gim.l.deisher@intel.com\n   2111 NE 25th Avenue              Phone:\
    \ +1 503 264 3758\n   Hillsboro, OR 97124, USA         Fax:   +1 503 264 9372\n\
    \   Tom Gardos\n   Intel Corp. M/S JF2-78           EMail: thomas.r.gardos@intel.com\n\
    \   2111 NE 25th Avenue              Phone: +1 503 264 6459\n   Hillsboro, OR\
    \ 97124, USA         Fax:   +1 503 264 9372\n   Christian Maciocco\n   Intel Corp.\
    \ M/S JF3-206          EMail: christian.maciocco@intel.com\n   2111 NE 25th Avenue\
    \              Phone: +1 503 264 1770\n   Hillsboro, OR 97124, USA         Fax:\
    \   +1 503 264 9428\n   Donald Newell\n   Intel Corp. M/S JF3-206          EMail:\
    \ donald.newell@intel.com\n   2111 NE 25th Avenue              Phone: +1 503 264\
    \ 9234\n   Hillsboro, OR 97124, USA         Fax:   +1 503 264 9428\n   Joerg Ott\n\
    \   Universitaet Bremen FB3 TZI      EMail: jo@tzi.org\n   Postfach 330440   \
    \               Phone: +49.421.218-7024\n   D-28334 Bremen, GERMANY          Fax:\
    \   +49.421.218-7000\n   Gary Sullivan\n   PictureTel Corp. M/S 635         EMail:\
    \ garys@pictel.com\n   100 Minuteman Road               Phone: +1 978 623 4324\n\
    \   Andover, MA 01810, USA           Fax:   +1 978 749 2804\n   Stephan Wenger\n\
    \   Technische Universitaet Berlin FB13\n   Sekr. FR 6-3                     EMail:\
    \ stewe@cs.tu-berlin.de\n   Franklinstr. 28/29               Phone: +49.30.314-73160\n\
    \   D-10587 Berlin, GERMANY          Fax:   +49.30.314-25156\n   Chad Zhu\n  \
    \ Intel Corp. M/S JF3-202          EMail: czhu@ix.netcom.com\n   2111 NE 25th\
    \ Avenue              Phone: +1 503 264 6004\n   Hillsboro, OR 97124, USA    \
    \     Fax:   +1 503 264 1805\n"
- title: 9. References
  contents:
  - "9. References\n   [1] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n\
    \       \"RTP : A Transport Protocol for Real-Time Applications\", RFC\n     \
    \  1889, January 1996.\n   [2] Schulzrinne, H., \"RTP Profile for Audio and Video\
    \ Conference with\n       Minimal Control\", RFC 1890, January 1996.\n   [3] \"\
    Video Coding for Low Bit Rate Communication,\" ITU-T\n       Recommendation H.263,\
    \ March 1996.\n   [4] \"Video Coding for Low Bit Rate Communication,\" ITU-T\n\
    \       Recommendation H.263, January 1998.\n   [5] Turletti, T. and C. Huitema,\
    \ \"RTP Payload Format for H.261 Video\n       Streams\", RFC 2032, October 1996.\n\
    \   [6] Zhu, C., \"RTP Payload Format for H.263 Video Streams\", RFC 2190,\n \
    \      September 1997.\n   [7] S. Wenger, \"Video Redundancy Coding in H.263+,\"\
    \ Proc. Audio-\n       Visual Services over Packet Networks, Aberdeen, U.K., September\n\
    \       1997.\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
