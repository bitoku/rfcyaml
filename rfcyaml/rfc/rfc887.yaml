- title: __initial_text__
  contents:
  - "                       RESOURCE LOCATION PROTOCOL\nThis note describes a resource\
    \ location protocol for use in the ARPA\nInternet.  It is most useful on networks\
    \ employing technologies which\nsupport some method of broadcast addressing, however\
    \ it may also be used\non other types of networks.  For maximum benefit, all hosts\
    \ which\nprovide significant resources or services to other hosts on the Internet\n\
    should implement this protocol.  Hosts failing to implement the Resource\nLocation\
    \ Protocol risk being ignored by other hosts which are attempting\nto locate resources\
    \ on the Internet.  This RFC specifies a draft\nstandard for the ARPA Internet\
    \ community.\nThe Resource Location Protocol (RLP) utilizes the User Datagram\
    \ Protocol\n(UDP) [1] which in turn calls on the Internet Protocol (IP) [3] to\n\
    deliver its datagrams.  See Appendix A and [6] for the appropriate port\nand protocol\
    \ number assignments.\nUnless otherwise indicated, all numeric quantities in this\
    \ document are\ndecimal numbers.\n1. Introduction\nFrom time to time, Internet\
    \ hosts are faced with the problem of\ndetermining where on the Internet some\
    \ particular network service or\nresource is being provided.  For example, this\
    \ situation will arise when\na host needs to send a packet destined for some external\
    \ network to a\ngateway on its directly connected network and does not know of\
    \ any\ngateways.  In another case, a host may need to translate a domain name\n\
    to an Internet address and not know of any name servers which it can ask\nto perform\
    \ the translation.  In these situations a host may use the\nResource Location\
    \ Protocol to determine this information.\nIn almost all cases the resource location\
    \ problem is simply a matter of\nfinding the IP address of some one (usually any)\
    \ host, either on the\ndirectly connected network or elsewhere on the Internet,\
    \ which\nunderstands a given protocol.  Most frequently, the querying host itself\n\
    understands the protocol in question.  Typically (as in the case of\nlocating\
    \ a name server), the querying host subsequently intends to\nemploy that protocol\
    \ to communicate with the located host once its\naddress is known (e.g. to request\
    \ name to address translations).  Less\nfrequently, the querying host itself does\
    \ not necessarily understand the\nprotocol in question.  Instead (as in the case\
    \ of locating a gateway),\nit is simply attempting to find some other host which\
    \ does (e.g. to\ndetermine an appropriate place to forward a packet which cannot\
    \ be\ndelivered locally).\n2. Resource Naming\nAlthough the resource location\
    \ problem can, in most cases, be reduced to\nthe problem of finding a host which\
    \ implements a given Internet based\nprotocol, locating only a particular lowest\
    \ level Internet protocol\n(i.e. one assigned a protocol number for transport\
    \ using IP) is not\ncompletely sufficient.  Many significant network services\
    \ and resources\nare provided through higher level protocols which merely utilize\
    \ the\nvarious lower level protocols for their own transport purposes (e.g. the\n\
    FTP protocol [2] employs the TCP protocol [4] for its lower level\ntransport).\
    \  Conceptually, this protocol nesting may even be carried out\nto arbitrary levels.\n\
    Consequently, the Resource Location Protocol names a resource by the\nprotocol\
    \ number assigned to its lowest level Internet transport protocol\nand by a variable\
    \ length protocol/resource specific identifier.  For\nexample, the UDP based Echo\
    \ Protocol can be named by its assigned\nprotocol number (17) and its assigned\
    \ 16-bit \"well-known\" port number\n(7).  Alternatively, the Internet Control\
    \ Message Protocol [5] (lacking\nany higher level client protocols) would be named\
    \ simply by its assigned\nprotocol number (1) and an empty protocol specific identifier.\
    \  On the\nother hand, some as yet undefined resource protocol (provided via say\n\
    TCP), might be named by the assigned protocol number (6), its 16-bit\n\"well-known\"\
    \ TCP port number, and then some additional fixed or variable\nlength identifier\
    \ specific to that TCP port.\nIn general, the components of the protocol/resource\
    \ specific identifier\nare defined to be the \"natural\" quantities used to successively\n\
    de-multiplex the protocol at each next highest protocol level.  See\nsection 5\
    \ for some sample assignments.\n3. Protocol Summary\nThe Resource Location Protocol\
    \ is a simple request/reply procedure.  The\nquerying host constructs a list of\
    \ resources which it would like to\nlocate and sends a request message on the\
    \ network.  A request message\nmay be sent either to a particular IP address and\
    \ host or, on networks\nwhich provide broadcast address capability, to the IP\
    \ address which\nrefers to all hosts on that network (see [7]).  For example,\
    \ a host\nattempting to locate a domain name server might construct a request\n\
    containing the resource name [17, 53] (referring to the Domain Name\nServer protocol\
    \ provided at \"well-known\" UDP port 53) and then broadcast\nthat request on\
    \ its local network.\nEach receiving host examines the list of resources named\
    \ in the request\npacket, determines which of the resources it provides, and returns\
    \ a\nreply message to the querying host in confirmation.  The receiving host\n\
    determines whether or not it provides a resource by successive\ndecomposition\
    \ of the resource name until either the name is exhausted or\nit encounters a\
    \ component which is not supported.  In the previous\nexample, each host on the\
    \ network receiving the broadcast request would\nexamine the resource name by\
    \ first consulting its tables to determine if\nit provided UDP service.  If this\
    \ was successful, it would then examine\nthe UDP port component of the name and\
    \ consult its UDP table to\ndetermine if it provided service on UDP port 53. \
    \ At this point the name\nwould be exhausted and if both checks were successful\
    \ the host would\nreturn a reply message to the querying host indicating support\
    \ for that\nresource.\n3.1. Request Messages\nRLP provides two basic types of\
    \ request messages which may be\ntransmitted by a querying host.  The first type\
    \ requires any host\nreceiving the request message to return a reply message only\
    \ if it\nprovides at least one of the resources named in the request list.  The\n\
    second type requires any host receiving the message to always return a\nreply\
    \ message even if it provides none of the resources named in the\nrequest list.\n\
    These two types of request messages are:\n<Who-Provides?>\n    This type requires\
    \ any host receiving the message to return an\n    appropriate reply message which\
    \ names all of the resources from the\n    request list which it provides.  If\
    \ the receiving host provides none\n    of the named resources, no reply may be\
    \ returned.\n<Do-You-Provide?>\n    This type is identical to the <Who-Provides?>\
    \ message but with the\n    extra requirement that a reply must always be returned.\
    \  When a\n    receiving host provides none of the requested resources, it simply\n\
    \    returns an empty reply list.  This empty reply list allows the\n    querying\
    \ host to immediately detect that the confirming host\n    provides none of the\
    \ named resources without having to timeout after\n    repeatedly retransmitting\
    \ the request.\nThe <Who-Provides?> request message is most typically used when\n\
    broadcasting requests to an entire IP network.  The <Do-You-Provide?>\nrequest\
    \ message, on the other hand, is most typically used when\nconfirming that a particular\
    \ host does or does not provide one or more\nspecific resources.  It may not be\
    \ broadcast (since such a request would\nflood the querying host with reply messages\
    \ from all hosts on the\nnetwork).\nIn addition to the two basic types of request\
    \ messages, an additional\ntwo variant types of request messages may also be transmitted\
    \ by a\nquerying host.  These message types provide a \"third-party\" resource\n\
    location capability.  They differ from the basic message types by\nproviding space\
    \ for an additional qualifier with each listed resource to\nidentify \"third-party\"\
    \ hosts which the confirming host believes may\nprovide the resource.  As before,\
    \ the first type requires any host\nreceiving the request message to return a\
    \ reply message only if it knows\nof some host which provides at least one of\
    \ the resources named in the\nrequest list.  The second type requires any host\
    \ receiving the message\nto always return a reply message even if it knows of\
    \ no hosts which\nprovide any of the resources named in the request list.\nThese\
    \ two remaining types of request messages are:\n<Who-Anywhere-Provides?>\n   \
    \ This message parallels the <Who-Provides?> message with the\n    \"third-party\"\
    \ variant described above.  The confirming host is\n    required to return at\
    \ least its own IP address (if it provides the\n    named resource) as well as\
    \ the IP addresses of any other hosts it\n    believes may provide the named resource.\
    \  The confirming host\n    though, may never return an IP address for a resource\
    \ which is the\n    same as an IP address listed with the resource name in the\
    \ request\n    message.  In this case it must treat the resource as if it was\n\
    \    unsupported at that IP address and omit it from any reply list.\n<Does-Anyone-Provide?>\n\
    \    This message parallels the <Do-You-Provide?> message again with the\n   \
    \ \"third-party\" variant described above.  As before, the confirming\n    host\
    \ is required to return its own IP address as well as the IP\n    addresses of\
    \ any other hosts it believes may provide the named\n    resource and is prohibited\
    \ from returning the same IP address in the\n    reply resource specifier as was\
    \ listed in the request resource\n    specifier.  As in the <Do-You-Provide?>\
    \ case and for the same\n    reason, this message also may not be broadcast.\n\
    These variant request messages permit \"smart\" hosts to supply resource\nlocation\
    \ information for networks without broadcast capability (provided\nthat all hosts\
    \ on the network always \"know\" the address of one or more\nsuch \"smart\" hosts).\
    \  They also permit resource location information for\nservices which are not\
    \ provided anywhere on a directly connected network\nto be provided by \"smart\"\
    \ gateways which have perhaps queried other\nnetworks to which they are attached\
    \ or have somehow otherwise acquired\nthe information.\nThe restriction against\
    \ returning the same IP address in a reply as was\nspecified in the request provides\
    \ a primitive mechanism for excluding\ncertain known addresses from consideration\
    \ in a reply (see section 5,\nexample 3).  It may also be used to override the\
    \ receiving host's\npreference for its own IP address in \"third-party\" replies\
    \ when this is\nrequired.\n3.2. Reply Messages\nEach of the types of request messages\
    \ has an associated type of reply\nmessage.  The basic reply message type is returned\
    \ in response to both\n<Who-Provides?> and <Do-You-Provide?> request messages\
    \ and supplies\ninformation about the resources provided by the confirming host.\
    \  The\nother reply message type is the \"third-party\" variant returned in\n\
    response to both <Who-Anywhere-Provides?> and <Does-Anyone-Provide?>\nrequest\
    \ messages and supplies information about resources provided by\nhosts known to\
    \ the confirming host.\nThese two types of reply messages are:\n<I-Provide>\n\
    \    This reply message contains a list of exactly those resources from\n    the\
    \ request list which the confirming host provides.  These\n    resources must\
    \ occur in the reply list in precisely the same order\n    as they were listed\
    \ in the request message.\n<They-Provide>\n    This reply message similarly contains\
    \ a list of exactly those\n    resources from the request list (appropriately\
    \ qualified with IP\n    addresses) which the confirming host provides or believes\
    \ another\n    host provides.  These resources again must occur in the reply list\n\
    \    in precisely the same order as they were listed in the request\n    message.\n\
    Neither type of reply message may be broadcast.\nA querying host which receives\
    \ a <They-Provide> reply message from a\nconfirming host on behalf of a third\
    \ host is not required to\nunquestioningly rely on the indirectly provided information.\
    \  This\ninformation should usually be regarded simply as a hint.  In most cases,\n\
    the querying host should transmit a specific <Do-You-Provide?> request\nto the\
    \ third host and confirm that the resource is indeed provided at\nthat IP address\
    \ before proceeding.\n4. Message Formats\nRLP messages are encapsulated in UDP\
    \ packets to take advantage of the\nmultiplexing capability provided by the UDP\
    \ source and destination ports\nand the extra reliability provided by the UDP\
    \ checksum.  Request\nmessages are sent from a convenient source port on the querying\
    \ host to\nthe assigned RLP destination port of a receiving host.  Reply messages\n\
    are returned from the assigned RLP source port of the confirming host to\nthe\
    \ appropriate destination port of the querying host as determined by\nthe source\
    \ port in the request message.\nThe format of the various RLP messages is described\
    \ in the following\ndiagrams.  All numeric quantities which occupy more than one\
    \ octet are\nstored in the messages from the high order octet to the low order\
    \ octet\nas per the usual Internet protocol standard.  All packet diagrams\nindicate\
    \ the octets of the message from left to right and then top to\nbottom as they\
    \ occur in the data portion of the encapsulating UDP\npacket.\nEach RLP packet\
    \ has the general format\n                 +--------+--------+--------+--------+\n\
    \                 |        |        |                 |\n                 |  Type\
    \  | Flags  |   Message-ID    |\n                 |        |        |        \
    \         |\n                 +--------+--------+--------+--------+\n        \
    \         |                                   -\n                 |          \
    \ Resource-List           -\n                 |                              \
    \     -\n                 +--------+--------+--------+---\\\\---+\n          \
    \       -                                   +\n                 -           Resource-List\
    \           |\n                 -                                   |\n      \
    \           +--------+--------+--------+---\\\\---+\nwhere\n<Type>\n    is a single\
    \ octet which identifies the message type.  The currently\n    defined types are:\n\
    \    0     <Who-Provides?>\n    1     <Do-You-Provide?>\n    2     <Who-Anywhere-Provides?>\n\
    \    3     <Does-Anyone-Provide?>\n    4     <I-Provide>\n    5     <They-Provide>\n\
    \    6-255 Reserved.\n<Flags>\n    is a single octet specifying possible modifications\
    \ to the standard\n    interpretation of <Type>.  Bits in this field are numbered\
    \ from left\n    to right (from most significant to least significant) beginning\
    \ with\n    bit 1.  The currently defined flag bits are:\n    Bit 1    <Local-Only>.\
    \  Requires that any reply message generated in\n             response to a request\
    \ message with this flag bit set may\n             only name IP addresses which\
    \ are on the same IP network as\n             the sender of the request message.\
    \  This flag also requires\n             that multi-homed hosts answering broadcast\
    \ <Who-Provides?>\n             requests use the appropriate local network IP\
    \ source\n             address in the returned reply.  This bit must be zero in\n\
    \             reply messages.\n    Bits 2-8 Reserved.  Must be zero.\n<Message-ID>\n\
    \    is a two octet (16-bit) value which identifies the request message.\n   \
    \ It is used simply to aid in matching requests with replies.  The\n    sending\
    \ host should initialize this field to some convenient value\n    when constructing\
    \ a request message.  The receiving host must return\n    this same value in the\
    \ <Message-ID> field of any reply message\n    generated in response to that request.\n\
    <Resource-List>\n    is the list of resources being queried or for which location\n\
    \    information is being supplied.  This list is a sequence of octets\n    beginning\
    \ at the octet following the <Message-ID> and extending\n    through the end of\
    \ the UDP packet.  The format of this field is\n    explained more fully in the\
    \ following section.  The size of this\n    list is implicitly specified by the\
    \ length of the encapsulating UDP\n    datagram.\n4.1. Resource Lists\nA <Resource-List>\
    \ consists of zero or more resource specifiers.  Each\nresource specifier is simply\
    \ a sequence of octets.  All resource\nspecifiers have a common resource name\
    \ initial format\n                 +--------+--------+--------+---\\\\---+\n \
    \                |        |        |                 |\n                 |Protocol|IDLength|\
    \   Resource-ID   |\n                 |        |        |                 |\n\
    \                 +--------+--------+--------+---\\\\---+\nwhere\n<Protocol>\n\
    \    is the protocol number assigned to the lowest level Internet\n    protocol\
    \ utilized for accessing the resource.\n<IDLength>\n    is the length of the resource\
    \ identifier associated with this\n    <Protocol>.  This length may be a fixed\
    \ or variable value depending\n    on the particular resource.  It is included\
    \ so that specifiers which\n    refer to resources which a host may not provide\
    \ can be skipped over\n    without needing to know the specific structure of the\
    \ particular\n    resource identifier.  If the <Protocol> has no associated natural\n\
    \    identifier, this length is 0.\n<Resource-ID>\n    is the qualifying identifier\
    \ used to further refine the resource\n    being queried.  If the <IDLength> field\
    \ was 0, then this field is\n    empty and occupies no space in the resource specifier.\n\
    In addition, resource specifiers in all <Who-Anywhere-Provides?>,\n<Does-Anyone-Provide?>\
    \ and <They-Provide> messages also contain an\nadditional qualifier following\
    \ the <Protocol-ID>.  This qualifier has\nthe format\n             +--------+--------+--------+--------+---//---+\n\
    \             |        |                                   |\n             |IPLength|\
    \          IP-Address-List          |\n             |        |               \
    \                    |\n             +--------+--------+--------+--------+---//---+\n\
    where\n<IPLength>\n    is the number of IP addresses containing in the following\n\
    \    <IP-Address-List> (the <IP-Address-List> field thus occupies the\n    last\
    \ 4*<IPLength> octets in its resource specifier).  In request\n    messages, this\
    \ is the maximum number of qualifying addresses which\n    may be included in\
    \ the corresponding reply resource specifier.\n    Although not particularly useful,\
    \ it may be 0 and in that case\n    provides no space for qualifying the resource\
    \ name with IP addresses\n    in the returned specifier.  In reply messages, this\
    \ is the number of\n    qualifying addresses known to provide the resource.  It\
    \ may not\n    exceed the number specified in the corresponding request specifier.\n\
    \    This field may not be 0 in a reply message unless it was supplied as\n  \
    \  0 in the request message and the confirming host would have returned\n    one\
    \ or more IP addresses had any space been provided.\n<IP-Address-List>\n    is\
    \ a list of four-octet IP addresses used to qualify the resource\n    specifier\
    \ with respect to those particular addresses.  In reply\n    messages, these are\
    \ the IP addresses of the confirming host (when\n    appropriate) and the addresses\
    \ of any other hosts known to provide\n    that resource (subject to the list\
    \ length limitations).  In request\n    messages, these are the IP addresses of\
    \ hosts for which resource\n    information may not be returned.  In such messages,\
    \ these addresses\n    should normally be initialized to some \"harmless\" value\
    \ (such as the\n    address of the querying host) unless it is intended to specifically\n\
    \    exclude the supplied addresses from consideration in any reply\n    messages.\n\
    The receiving host determines if it provides any of the resources named\nin the\
    \ request list by successively decomposing each resource name.  The\nfirst level\
    \ of decomposition is the Internet protocol number which can\npresumably be looked\
    \ up in a table to determine if that protocol is\nsupported on the host.  Subsequent\
    \ decompositions are based on previous\ncomponents until one of three events occur:\n\
    \   1. the current component identifies some aspect of the previous\n      components\
    \ which the host does not support,\n   2. the resource name from the request list\
    \ is exhausted, or\n   3. the resource name from the request list is not exhausted\
    \ but\n      the host does not expect any further components in the name\n   \
    \   given the previous components\nIn case 1, the receiving host has determined\
    \ that it does not provide\nthe named resource.  The resource specifier may not\
    \ be included in any\nreply message returned.\nIn case 2, the receiving host has\
    \ determined that it does indeed provide\nthe named resource (note: this may occur\
    \ even if the receiving host\nwould have expected the resource name to contain\
    \ more components than\nwere actually present).  The resource specifier must be\
    \ included (modulo\nIP address prohibitions) in any reply message returned.\n\
    In case 3, the receiving host has determined that it does not completely\nprovide\
    \ the named resource since name components remain which it does\nnot understand\
    \ (this might occur with specializations of or extensions\nto a known protocol\
    \ which are not universally recognized).  The resource\nspecifier may not be included\
    \ in any reply message returned.\n5. Sample Usage\nThe following scenarios illustrate\
    \ some typical uses of RLP.  In all\ncases the indicated messages are encapsulated\
    \ in a UDP datagram with the\nappropriate source and destination port numbers,\
    \ message length, and\nchecksum.  This datagram is further encapsulated in an\
    \ IP datagram with\nthe appropriate source address of the sending host and destination\n\
    address (either broadcast or individual) for the receiving host.\nAll numeric\
    \ protocol examples are as specified in the appropriate\nprotocol description\
    \ documents listed in the references.\n 1. Suppose a freshly rebooted host H wishes\
    \ to find some gateway\n    on its directly connected network to which it can\
    \ send its\n    first external packet.  It then broadcasts the request\n     \
    \   <Who-Provides?> <Flags>=<Local-Only> <Message-ID>=12345\n                \
    \    <Resource-List>={[GGP], [EGP]}\n    encoded as the 8 octet message\n    \
    \       +-----+-----+-----+-----+-----+-----+-----+-----+\n           |  0  |\
    \ 128 |   12345   |  3  |  0  |  8  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    on its local network.\n     - Gateway G1 (which understands EGP) receives\
    \ the request and\n       returns the reply\n               <I-Provide> <Flags>=none\
    \ <Message-ID>=12345\n                         <Resource-List>={[EGP]}\n     \
    \  encoded as the 6 octet message\n                  +-----+-----+-----+-----+-----+-----+\n\
    \                  |  4  |  0  |   12345   |  8  |  0  |\n                  +-----+-----+-----+-----+-----+-----+\n\
    \       to host H which then remembers that gateway G1 may be used\n       to\
    \ route traffic to the rest of the Internet.\n     -  At the same time, gateway\
    \ G2 (which understands both GGP\n       and EGP) might also receive the request\
    \ and return the reply\n               <I-Provide> <Flags>=none <Message-ID>=12345\n\
    \                      <Resource-List>={[GGP], [EGP]}\n       encoded as the 8\
    \ octet message\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            |  4  |  0  |   12345   |  3  |  0  |  8  |  0  |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \       to host H which might then also add gateway G2 to its list\n       if\
    \ it chooses.\n 2. Assume instead that host H is a stand-alone system which has\n\
    \    just encountered some fatal software error and wishes to locate\n    a crash\
    \ dump server to save its state before reloading.\n    Suppose that the crash\
    \ dump protocol on the host's local\n    network is implemented using the Trivial\
    \ File Transfer Protocol\n    (TFTP) [8].  Furthermore, suppose that the special\
    \ file name\n    \"CRASH-DUMP\" is used to indicate crash dump processing (e.g.\n\
    \    the server might locally generate a unique file name to hold\n    each dump\
    \ that it receives from a host).  Then host H might\n    broadcast the request\n\
    \            <Who-Provides?> <Flags>=none <Message-ID>=54321\n           <Resource-List>={[UDP,\
    \ TFTP, WRQ, \"CRASH-DUMP\"]}\n    encoded as the 21 octet message\n         \
    \  +-----+-----+-----+-----+-----+-----+-----+-----+\n           |  0  |  0  |\
    \   54321   |  17 |  15 |     69    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |     2     | 'C'   'R'   'A'   'S'   'H'   '-' |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           | 'D'   'U'   'M'   'P'    0  |                  \n           +-----+-----+-----+-----+-----+\
    \                  \n    to its local network (note that the file name component\
    \ is\n    explicitly terminated by a null so as not to exclude future\n    further\
    \ specialization of the crash dump protocol).\n     - Host C (which supports this\
    \ specialization of the TFTP\n       protocol) receives the request and returns\
    \ the reply\n               <I-Provide> <Flags>=none <Message-ID>=54321\n    \
    \         <Resource-List>={[UDP, TFTP, WRQ, \"CRASH-DUMP\"]}\n       encoded as\
    \ the 21 octet message\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            |  4  |  0  |   54321   |  17 |  15 |     69    |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            |     2     | 'C'   'R'   'A'   'S'   'H'   '-' |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            | 'D'   'U'   'M'   'P'    0  |                  \n            +-----+-----+-----+-----+-----+\
    \                  \n       to host H which may then proceed to send its crash\
    \ dump to\n       host C and reload.\n     - Host D (which provides TFTP service\
    \ but not the crash dump\n       specialization), however, might receive the request\
    \ and\n       determine that it provides no support for the resource\n       (since\
    \ the resource name contains components following the\n       UDP port number\
    \ which it does not understand).  It would\n       therefore return no reply to\
    \ host H. \n 3. Finally, suppose host M wishes to locate some domain name\n  \
    \  translation server (either UDP or TCP based) anywhere on the\n    Internet.\
    \  Furthermore, suppose that host M is on a IP network\n    which does not provide\
    \ broadcast address capabilities and that\n    host R is a \"known\" resource\
    \ location server for that network.\n    First, since host M prefers to find a\
    \ domain name server on its\n    own locally connected network if possible, it\
    \ sends the request\n              <Does-Anyone-Provide?> <Flags>=<Local-Only>\n\
    \                  <Message-ID>=12321 <Resource-List>=\n                {[TCP,\
    \ <DOMAIN-NAME-SERVER-PORT>] {M},\n                 [UDP, <DOMAIN-NAME-SERVER-PORT>]\
    \ {M}}\n    encoded as the 22 octet message\n        +-----+-----+-----+-----+\
    \                              \n        |  3  | 128 |   12321   |           \
    \                   \n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        |  6  |  2  |     53    |  1  |           M           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        |  17 |  2  |     53    |  1  |           M           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    to host R. \n    Host R receives the request and consults its tables for\
    \ any\n    hosts known to support either variety of domain name service.\n   \
    \ It finds entries indicating that both hosts S and T provide UDP\n    based domain\
    \ name service but that neither host is on the same\n    IP network as host H.\
    \ It must then send the negative\n    confirmation reply\n            <They-Provide>\
    \ <Flags>=none <Message-ID>=12321\n                          <Resource-List>={}\n\
    \    encoded as the 4 octet message\n                       +-----+-----+-----+-----+\n\
    \                       |  5  |  0  |   12321   |\n                       +-----+-----+-----+-----+\n\
    \    back to host M. \n    Host M, receiving this reply, might now abandon any\
    \ hope of\n    finding a server on its own network, reformat its request to\n\
    \    permit any host address, and resend\n        <Does-Anyone-Provide?> <Flags>=none\
    \ <Message-ID>=12322\n                           <Resource-List>=\n          \
    \      {[TCP, <DOMAIN-NAME-SERVER-PORT>] {M},\n                 [UDP, <DOMAIN-NAME-SERVER-PORT>]\
    \ {M}}\n    encoded as the 22 octet message\n        +-----+-----+-----+-----+\
    \                              \n        |  3  |  0  |   12322   |           \
    \                   \n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        |  6  |  2  |     53    |  1  |           M           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        |  17 |  2  |     53    |  1  |           M           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    again to host R. \n    Host R receives this new request and is no longer\
    \ constrained\n    to return only local addresses.  However, since only space\
    \ for\n    a single qualifying IP address was provided in each request\n    resource\
    \ specifier, it may not immediately return both\n    addresses.  Instead, it is\
    \ forced to return only the first\n    address and replies\n            <They-Provide>\
    \ <Flags>=none <Message-ID>=12322\n        <Resource-List>={[UDP, <DOMAIN-NAME-SERVER-PORT>]\
    \ {S}}\n    encoded as the 13 octet message\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |  5  |  0  |   12322   |  17 |  2  |     53    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |  1  |           S           |                  \n           +-----+-----+-----+-----+-----+\
    \                  \n    to Host M. \n    Host M receives the reply and (being\
    \ the suspicious sort)\n    decides to confirm it with host S. It then sends\n\
    \           <Do-You-Provide?> <Flags>=none <Message-ID>=12323\n          <Resource-List>={[UDP,\
    \ <DOMAIN-NAME-SERVER-PORT>]}\n    encoded as the 8 octet message\n          \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n           |  1  |  0  |\
    \   12323   |  17 |  2  |     53    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    to host S and receives back from host S the reply\n              <I-Provide>\
    \ <Flags>=none <Message-ID>=12323\n                          <Resource-List>={}\n\
    \    encoded as the 4 octet message\n                       +-----+-----+-----+-----+\n\
    \                       |  4  |  0  |   12323   |\n                       +-----+-----+-----+-----+\n\
    \    denying any support for UDP based domain name service.\n    In desperation\
    \ host M again queries host R, this time excluding\n    host S from consideration,\
    \ and sends the request\n        <Does-Anyone-Provide?> <Flags>=none <Message-ID>=12324\n\
    \                           <Resource-List>=\n                {[TCP, <DOMAIN-NAME-SERVER-PORT>]\
    \ {S},\n                 [UDP, <DOMAIN-NAME-SERVER-PORT>] {S}}\n    encoded as\
    \ the 22 octet message\n        +-----+-----+-----+-----+                    \
    \          \n        |  3  |  0  |   12324   |                              \n\
    \        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n        |  6\
    \  |  2  |     53    |  1  |           S           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        |  17 |  2  |     53    |  1  |           S           |\n        +-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    and this time receives the reply\n            <They-Provide> <Flags>=none\
    \ <Message-ID>=12324\n        <Resource-List>={[UDP, <DOMAIN-NAME-SERVER-PORT>]\
    \ {T}}\n    encoded as the 13 octet message\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |  5  |  0  |   12324   | 17  |  2  |     53    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |  1  |           T           |                  \n           +-----+-----+-----+-----+-----+\
    \                  \n    from host R which of course host M again insists on confirming\n\
    \    by sending the request\n           <Do-You-Provide?> <Flags>=none <Message-ID>=12325\n\
    \                           <Resource-List>=\n                  {[UDP, <DOMAIN-NAME-SERVER-PORT>]}\n\
    \    encoded as the 8 octet message\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \           |  1  |  0  |   12325   |  17 |  2  |     53    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    to host T and finally receives confirmation from host T with\n    the reply\n\
    \              <I-Provide> <Flags>=none <Message-ID>=12325\n          <Resource-List>={[UDP,\
    \ <DOMAIN-NAME-SERVER-PORT>]}\n    encoded as the 8 octet message\n          \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n           |  4  |  0  |\
    \   12325   |  17 |  2  |     53    |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \    that it indeed provides domain name translation service at UDP\n    port\
    \ 53.\nA. Assigned Numbers\nThe \"well-known\" UDP port number for the Resource\
    \ Location Protocol is\n39 (47 octal).\n                               REFERENCES\n\
    [1]   Postel, J.\n      User Datagram Protocol.\n      RFC 768, USC/Information\
    \ Sciences Institute, August, 1980.\n[2]   Postel, J.\n      File Transfer Protocol.\n\
    \      RFC 765, USC/Information Sciences Institute, June, 1980.\n[3]   Postel,\
    \ J.\n      Internet Protocol - DARPA Internet Program Protocol Specification.\n\
    \      RFC 791, USC/Information Sciences Institute, September, 1981.\n[4]   Postel,\
    \ J.\n      Transmission Control Protocol- DARPA Internet Program Protocol\n \
    \        Specification.\n      RFC 793, USC/Information Sciences Institute, September,\
    \ 1981.\n[5]   Postel, J.\n      Internet Control Message Protocol - DARPA Internet\
    \ Program\n         Protocol Specification.\n      RFC 792, USC/Information Sciences\
    \ Institute, September, 1981.\n[6]   Reynolds, J., and J. Postel.\n      Assigned\
    \ Numbers.\n      RFC 870, USC/Information Sciences Institute, October, 1983.\n\
    [7]   Gurwitz, R., and R. Hinden.\n      IP - Local Area Network Addressing Issues.\n\
    \      IEN 212, Bolt Beranek and Newman, September, 1982.\n[8]   Sollins, K.\n\
    \      The TFTP Protocol (revision 2).\n      RFC 783, MIT/Laboratory for Computer\
    \ Science, June, 1981.\n"
