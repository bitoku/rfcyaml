- title: __initial_text__
  contents:
  - '        Host Identity Protocol (HIP) Multi-Hop Routing Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies two extensions to the Host Identity Protocol\n\
    \   (HIP) to implement multi-hop routing.  The first extension allows\n   implementing\
    \ source routing in HIP.  That is, a node sending a HIP\n   packet can define\
    \ a set of nodes that the HIP packet should traverse.\n   The second extension\
    \ allows a HIP packet to carry and record the list\n   of nodes that forwarded\
    \ it.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6028.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \    2.1. Requirements Language ......................................3\n    \
    \  2.2. Definitions ................................................3\n   3. Protocol\
    \ Definitions ............................................3\n      3.1. Creating\
    \ and Processing Via Lists ..........................4\n      3.2. Creating Destination\
    \ Lists .................................4\n      3.3. Processing Destination\
    \ Lists ...............................5\n      3.4. Fragmentation Considerations\
    \ ...............................5\n   4. Packet Formats ..................................................5\n\
    \      4.1. Source and Destination Route List Parameters ...............6\n  \
    \ 5. IANA Considerations .............................................7\n   6.\
    \ Security Considerations .........................................8\n      6.1.\
    \ Forged Destination and Via Lists ...........................8\n      6.2. Forwarding\
    \ Loops ...........................................8\n   7. Acknowledgments .................................................9\n\
    \   8. References ......................................................9\n  \
    \    8.1. Normative References .......................................9\n    \
    \  8.2. Informative References .....................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When the Host Identity Protocol (HIP) [RFC5201] is used\
    \ in certain\n   contexts, nodes need the ability to perform source routing. \
    \ That is,\n   a node needs the ability to send a HIP signaling packet that will\n\
    \   traverse a set of nodes before reaching its destination.  Such\n   features\
    \ are needed, e.g., in the HIP-Based Overlay Networking\n   Environment (HIP BONE)\
    \ [HIP-BONE] or if two nodes wish to keep a\n   third, or more, HIP nodes on the\
    \ signaling path.  This document\n   defines an extension that provides HIP with\
    \ this functionality.\n   Additionally, when HIP signaling packets are routed\
    \ through multiple\n   nodes, some of these nodes (e.g., the destination host)\
    \ need the\n   ability to know the nodes that a particular packet traversed. \
    \ This\n   document defines another extension that provides HIP with this\n  \
    \ functionality.\n   These two extensions enable multi-hop routing in HIP.  Before\
    \ these\n   extensions were specified, there were standardized ways for\n   supporting\
    \ only a single intermediate node (e.g., a rendezvous server\n   [RFC5204]) between\
    \ the source of a HIP packet and its destination.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.2.  Definitions
  contents:
  - "2.2.  Definitions\n   The following terms used in this document are similar to\
    \ those\n   defined by REsource LOcation And Discovery (RELOAD) [P2PSIP-BASE]\
    \ but\n   are used here in the context of HIP.\n   Destination list:  A list of\
    \ Host Identity Tags (HITs) of the nodes\n      that a HIP packet should traverse.\n\
    \   Via list:  A list of HITs of the nodes that a HIP packet has\n      traversed.\n\
    \   Symmetric routing:  A response to a message is routed back using the\n   \
    \   same set of intermediary nodes as the original message used,\n      except\
    \ in reversed order.  Also known as symmetric recursive\n      routing.\n"
- title: 3.  Protocol Definitions
  contents:
  - "3.  Protocol Definitions\n   The multi-hop routing extensions may be used in\
    \ different contexts,\n   and whether a new HIP signaling packet should, for example,\
    \ include a\n   Via list or have different options enabled can depend on the\n\
    \   particular use case, local policies, and different protocols using\n   the\
    \ extension.  This section defines how the new parameters are\n   handled, but\
    \ when to use these extensions, or how to configure them,\n   is out of scope\
    \ for this document.\n"
- title: 3.1.  Creating and Processing Via Lists
  contents:
  - "3.1.  Creating and Processing Via Lists\n   When a node sending a HIP packet\
    \ needs to record the nodes that are\n   on the path that the HIP packet traverses,\
    \ it includes an empty\n   ROUTE_VIA parameter in the packet.\n   A node that\
    \ receives a packet with a ROUTE_VIA parameter SHOULD add\n   its own HIT to the\
    \ end of the ROUTE_VIA parameter, unless it is the\n   final recipient of the\
    \ packet.  If the node uses a different HIT on\n   the HIP association it used\
    \ for receiving the packet than for sending\n   it forward, it SHOULD also add\
    \ the receiving HIT to the route list\n   before the sending HIT.\n   If the node\
    \ is the final recipient of the packet, and the received\n   packet generates\
    \ a response HIP packet, the node checks the SYMMETRIC\n   flag from the ROUTE_VIA\
    \ parameter.  If the SYMMETRIC flag is set, the\n   node MUST create a ROUTE_DST\
    \ parameter from the ROUTE_VIA parameter,\n   as described in Section 3.2, and\
    \ include it in the response packet.\n   Also, if an intermediary node generates\
    \ a new HIP packet (e.g., an\n   error NOTIFY packet) due to a HIP packet that\
    \ had a ROUTE_VIA\n   parameter with the SYMMETRIC flag set, and the new packet\
    \ is intended\n   for the sender of the original HIP packet, the node SHOULD construct\n\
    \   and add a ROUTE_DST parameter into the new packet as in the previous\n   case.\n"
- title: 3.2.  Creating Destination Lists
  contents:
  - "3.2.  Creating Destination Lists\n   A node that needs to define the other nodes\
    \ that should be on the\n   path a HIP packet traverses adds a ROUTE_DST parameter\
    \ to the HIP\n   packet.  The node may either decide the path independently, or\
    \ it may\n   create the path based on a ROUTE_VIA parameter.  Only the originator\n\
    \   of a signed HIP packet can add a ROUTE_DST parameter to the HIP\n   packet,\
    \ and none of the nodes on the path can modify it, since the\n   parameter is\
    \ covered by the signature.\n   When a node creates a ROUTE_DST parameter due\
    \ to receiving a packet\n   with a ROUTE_VIA parameter, it copies all the HITs\
    \ in the ROUTE_VIA\n   parameter to the ROUTE_DST parameter, but in reversed order.\
    \  This\n   results in the HIP response packet being forwarded using the same\n\
    \   path as the packet for which the response was generated.  If exactly\n   the\
    \ same set of nodes should be traversed by the response packet, the\n   MUST_FOLLOW\
    \ flag (see Table 1) also SHOULD be set in the ROUTE_VIA\n   parameter (and eventually\
    \ copied to the ROUTE_DST parameter) to\n   prevent the response packet from possibly\
    \ skipping some nodes on the\n   list.\n"
- title: 3.3.  Processing Destination Lists
  contents:
  - "3.3.  Processing Destination Lists\n   When a node receives a HIP packet that\
    \ contains a ROUTE_DST\n   parameter, it first looks up its own HIT from the route\
    \ list.  If the\n   node's own HIT is not in the list and the node is not the\
    \ receiver of\n   the packet, the packet was incorrectly forwarded and MUST be\
    \ dropped.\n   If the node's HIT is in the list more than once, the list is invalid\n\
    \   and the packet MUST be dropped to avoid forwarding loops.  The next\n   hop\
    \ for the packet is the HIT after the node's own HIT in the list.\n   If the node's\
    \ HIT was the last HIT in the list, the next hop is the\n   receiver's HIT in\
    \ the HIP header.\n   If the MUST_FOLLOW flag in the ROUTE_DST parameter is not\
    \ set, the\n   node SHOULD check whether it has a valid locator for one of the\
    \ nodes\n   later in the list, or for the receiver of the packet, and it MAY\n\
    \   select such a node as the next hop.  If the MUST_FOLLOW flag is set,\n   the\
    \ node MUST NOT skip any nodes in the list.\n   If the node has a valid locator\
    \ for the next hop, it MUST forward the\n   HIP packet to the next-hop node. \
    \ If the node cannot determine a\n   valid locator for the next-hop node, it SHOULD\
    \ drop the packet and\n   SHOULD send back a NOTIFY error packet with type UNKNOWN_NEXT_HOP\n\
    \   (value 90).  The Notification Data field for the error notifications\n   SHOULD\
    \ contain the HIP header of the rejected packet and the\n   ROUTE_DST parameter.\n"
- title: 3.4.  Fragmentation Considerations
  contents:
  - "3.4.  Fragmentation Considerations\n   Via and Destination lists with multiple\
    \ HITs can substantially\n   increase the size of the HIP packets, and thus fragmentation\
    \ issues\n   (see Section 5.1.3 of [RFC5201]) should be taken into consideration\n\
    \   when these extensions are used.  Via lists in particular should be\n   used\
    \ with care, since the final size of the packet is not known\n   unless the maximum\
    \ possible amount of hops is known beforehand.  Both\n   parameters do still have\
    \ a maximum size based on the maximum number\n   of allowed HITs (see Section\
    \ 4.1).\n"
- title: 4.  Packet Formats
  contents:
  - "4.  Packet Formats\n   This memo defines two new HIP parameters that are used\
    \ for recording\n   a route via multiple nodes (ROUTE_VIA) and for defining a\
    \ route that\n   a packet should traverse by the sender of the packet (ROUTE_DST).\n\
    \   The ROUTE_DST parameter is integrity protected with the signature\n   (where\
    \ present) but ROUTE_VIA is not, so that intermediary nodes can\n   add their\
    \ own HITs to the list.  Both ROUTE_DST and ROUTE_VIA are\n   critical parameters\
    \ (as defined in Section 5.2.1 of [RFC5201]), since\n   the packet will not be\
    \ properly routed unless all nodes on the path\n   recognize the parameters.\n"
- title: 4.1.  Source and Destination Route List Parameters
  contents:
  - "4.1.  Source and Destination Route List Parameters\n      0                 \
    \  1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \           Flags             |            Reserved           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |                            HIT #1                             |\n     |  \
    \                                                             |\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     .                               .                               .\n    \
    \ .                               .                               .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |                            HIT #n                             |\n     |  \
    \                                                             |\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Type      ROUTE_DST: 4601\n               ROUTE_VIA: 64017\n     Length\
    \    length in octets, excluding Type and Length\n               (i.e., number-of-HITs\
    \ * 16 + 4)\n     Flags     bit flags that can be used for requesting special\n\
    \               handling of the parameter\n     Reserved  reserved for future\
    \ use\n     HIT       Host Identity Tag of one of the nodes on the path\n    \
    \    Figure 1.  Format of the ROUTE_VIA and ROUTE_DST Parameters\n   Figure 1\
    \ shows the format of both ROUTE_VIA and ROUTE_DST parameters.\n   The ROUTE_DST\
    \ parameter, if present, MUST have at least one HIT, but\n   the ROUTE_VIA parameter\
    \ can also have zero HITs.  The ROUTE_DST and\n   ROUTE_VIA parameters SHALL NOT\
    \ contain more than 32 HITs.  The Flags\n   field is used for requesting special\
    \ handling for Via and Destination\n   lists.  The flags defined in this document\
    \ are shown in Table 1.  The\n   Reserved field can be used by future extensions;\
    \ it MUST be zero when\n   sending and ignored when receiving this parameter.\n\
    \   +-----+-------------+-----------------------------------------------+\n  \
    \ | Pos | Name        | Purpose                                       |\n   +-----+-------------+-----------------------------------------------+\n\
    \   |  0  | SYMMETRIC   | The response packet MUST be sent with a       |\n  \
    \ |     |             | ROUTE_DST list made from the ROUTE_VIA list   |\n   |\
    \     |             | containing this flag, i.e., using symmetric   |\n   |  \
    \   |             | routing.                                      |\n   |  1 \
    \ | MUST_FOLLOW | All the nodes in a ROUTE_DST list MUST be     |\n   |     |\
    \             | traversed, i.e., even if a node would have a  |\n   |     |  \
    \           | valid locator for a node beyond the next hop, |\n   |     |    \
    \         | it MUST NOT forward the packet there but to   |\n   |     |      \
    \       | the next-hop node.                            |\n   +-----+-------------+-----------------------------------------------+\n\
    \         Table 1.  Bit Flags in ROUTE_VIA and ROUTE_DST Parameters\n   The \"\
    Pos\" column in Table 1 shows the bit position of the flag (as in\n   Figure 1)\
    \ in the Flags field, \"Name\" gives the name of the flag used\n   in this document,\
    \ and \"Purpose\" gives a brief description of the\n   meaning of that flag.\n\
    \   The flags apply to both ROUTE_VIA and ROUTE_DST parameters, and when\n   a\
    \ ROUTE_DST parameter is added to a packet because of a ROUTE_VIA\n   parameter,\
    \ the same flags MUST be copied to the ROUTE_DST parameter.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This section is to be interpreted according to [RFC5226].\n\
    \   This document updates the IANA Registry for HIP Parameter Types\n   [RFC5201]\
    \ by assigning new HIP Parameter Type values for the new HIP\n   Parameters: ROUTE_VIA\
    \ and ROUTE_DST (defined in Section 4).  This\n   document also defines a new\
    \ Notify Packet Type [RFC5201],\n   UNKNOWN_NEXT_HOP, in Section 3.3.\n   The\
    \ ROUTE_DST and ROUTE_VIA parameters utilize bit flags, for which\n   IANA has\
    \ created and now maintains a new sub-registry entitled \"HIP\n   Via Flags\"\
    \ under the \"Host Identity Protocol (HIP) Parameters\"\n   registry.  Initial\
    \ values for the registry are given in Table 1;\n   future assignments are to\
    \ be made through IETF Review or IESG\n   Approval [RFC5226].  Assignments consist\
    \ of the bit position and the\n   name of the flag.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The standard HIP mechanisms (e.g., using signatures,\
    \ puzzles, and the\n   ENCRYPTED parameter [RFC5201]) provide protection against\n\
    \   eavesdropping; replay; message insertion, deletion, and modification;\n  \
    \ and man-in-the-middle attacks.  Yet, the extensions described in this\n   document\
    \ allow nodes to route HIP messages via other nodes and hence\n   possibly try\
    \ to mount Denial-of-Service (DoS) attacks against them.\n   The following sections\
    \ describe possible attacks and means to\n   mitigate them.\n"
- title: 6.1.  Forged Destination and Via Lists
  contents:
  - "6.1.  Forged Destination and Via Lists\n   The Destination list is protected\
    \ by the HIP signature so that the\n   receiver of the message can check that\
    \ the list was indeed created by\n   the sender of the message and not modified\
    \ on the path.  Also, the\n   nodes forwarding the message MAY check the signature\
    \ of the forwarded\n   packets if they have the Host Identity (HI) of the sender\
    \ (e.g., from\n   an I2 or R1 message [RFC5201]) and drop packets whose signature\
    \ check\n   fails.  With forwarding nodes checking the signature and allowing\n\
    \   messages to be forwarded only from nodes for which there is an active\n  \
    \ HIP association, it is also possible to reliably identify attacking\n   nodes.\n\
    \   The limited amount of HITs allowed in a Destination list limits the\n   impact\
    \ of attacks using a forged Destination list, and the attacker\n   also needs\
    \ to know a set of HIP nodes that are able to route the\n   message hop-by-hop\
    \ for the attack to be effective.\n   A forged Via list results in a similar attack\
    \ as with the Destination\n   list and with similar limitations.  However, in\
    \ this attack the\n   Destination list generated from the Via list is validly\
    \ signed by the\n   responding node.  To limit the effect of this kind of attack,\
    \ a\n   responding node may further decrease the maximum acceptable number of\n\
    \   nodes in the Via lists or allow only certain HITs in the lists.\n   However,\
    \ using these mechanisms requires either good knowledge of the\n   overlay network\
    \ (i.e., maximum realistic amount of hops) or knowing\n   the HITs of all potential\
    \ nodes forwarding the messages.\n"
- title: 6.2.  Forwarding Loops
  contents:
  - "6.2.  Forwarding Loops\n   A malicious node could craft a destination route list\
    \ that contains\n   the same HIT more than once and thus create a forwarding loop.\
    \  The\n   check described in Section 3.3 should break such loops, but nodes MAY\n\
    \   in addition utilize the OVERLAY_TTL [HIP-BONE] parameter for\n   additional\
    \ protection against forwarding loops.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Tom Henderson provided valuable comments and improvement\
    \ suggestions\n   for this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5201]      Moskowitz, R., Nikander, P., Jokela, P., Ed.,\
    \ and T.\n                  Henderson, \"Host Identity Protocol\", RFC 5201, April\n\
    \                  2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC5204]      Laganier, J. and L. Eggert, \"\
    Host Identity Protocol\n                  (HIP) Rendezvous Extension\", RFC 5204,\
    \ April 2008.\n   [RFC5226]      Narten, T. and H. Alvestrand, \"Guidelines for\
    \ Writing\n                  an IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC\n                  5226, May 2008.\n   [HIP-BONE]     Camarillo, G., Nikander,\
    \ P., Hautakorpi, J., Keranen,\n                  A., and A. Johnston, \"HIP BONE:\
    \ Host Identity Protocol\n                  (HIP) Based Overlay Networking Environment\"\
    , Work in\n                  Progress, June 2010.\n   [P2PSIP-BASE]  Jennings,\
    \ C., Lowekamp, B., Ed., Rescorla, E., Baset,\n                  S., and H. Schulzrinne,\
    \ \"REsource LOcation And\n                  Discovery (RELOAD) Base Protocol\"\
    , Work in Progress,\n                  March 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n  \
    \ 02420 Jorvas\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Ari Keranen\n\
    \   Ericsson\n   Hirsalantie 11\n   02420 Jorvas\n   Finland\n   EMail: Ari.Keranen@ericsson.com\n"
