- title: __initial_text__
  contents:
  - '          THE HIGH-LEVEL ENTITY MANAGEMENT PROTOCOL (HEMP)

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   An application protocol for managing network entities\
    \ such as hosts,\n   gateways and front-end machines, is presented.  This protocol\
    \ is a\n   component of the High-Level Entity Management System (HEMS) described\n\
    \   in RFC-1021.  Readers may want to consult RFC-1021 when reading this\n   memo.\
    \  This memo also assumes a knowledge of the ISO data encoding\n   standard, ASN.1.\
    \  Distribution of this memo is unlimited.\n"
- title: PROTOCOL OVERVIEW
  contents:
  - "PROTOCOL OVERVIEW\n   The High-Level Entity Management Protocol (HEMP) provides\
    \ an\n   encapsulation system and set of services for communications between\n\
    \   applications and managed entities.  HEMP is an application protocol\n   which\
    \ relies on existing transport protocols to deliver HEMP messages\n   to their\
    \ destination(s).\n   The protocol is targeted for management interactions between\n\
    \   applications and entities.  The protocol is believed to be suitable\n   for\
    \ both monitoring and control interactions.\n   HEMP provides what the authors\
    \ believe are the three essential\n   features of a management protocol:  (1)\
    \ a standard encapsulation\n   scheme for all interactions, (2) an authentication\
    \ facility which can\n   be used both to verify messages and limit access to managed\
    \ systems,\n   and (3) the ability to encrypt messages to protect sensitive\n\
    \   information.  These features are discussed in detail in the following\n  \
    \ sections.\n"
- title: PROTOCOL OPERATION
  contents:
  - "PROTOCOL OPERATION\n   HEMP is designed to support messages; where a message\
    \ is an\n   arbitrarily long sequence of octets.\n   Five types of messages are\
    \ currently defined: request, event, reply,\n   and protocol error, and application\
    \ error messages.  Reply, protocol\n   error and application error messages are\
    \ only sent in reaction to a\n   request message, and are referred to collectively\
    \ as responses.\n   Two types of interaction are envisioned: a message exchange\
    \ between\n   an application and an entity managed by the application, and\n \
    \  unsolicited messages from an entity to the management centers\n   responsible\
    \ for managing it.\n   When an application wants to retrieve information from\
    \ an entity or\n   gives instructions to an entity, it sends a request message\
    \ to the\n   entity.  The entity replies with a response, either a reply message\n\
    \   if the request was valid, or an error message if the request was\n   invalid\
    \ (e.g., failed authentication).  It is expected that there\n   will only be one\
    \ response to a request message, although the protocol\n   does not preclude multiple\
    \ responses to a single request.\n   Protocol error messages are generated if\
    \ errors are found when\n   processing the HEMP encapsulation of the message.\
    \  The possible\n   protocol error messages are described later in this document.\
    \  Non-\n   HEMP errors (e.g., errors that occur during the processing of the\n\
    \   contents of the message) are application errors.  The existence of\n   application\
    \ error messages does not preclude the possibility that a\n   reply will have\
    \ an error message in it.  It is expected that the\n   processing agent on the\
    \ entity may have already started sending a\n   reply message before an error\
    \ in a request message is discovered.  As\n   a result, application errors found\
    \ during processing may show up in\n   the reply message instead of a separate\
    \ application error message.\n   Note that in certain situations, such as on secure\
    \ networks,\n   returning error messages may be considered undesirable.  As a\
    \ result,\n   entities are not required to send error messages, although on\n\
    \   \"friendly\" networks the use of error messages is encouraged.\n   Event messages\
    \ are unsolicited notices sent by an entity to an\n   address, which is expected\
    \ to correspond to one or more management\n   centers.  (Note that a single address\
    \ may correspond to a multicast\n   address, and thus reach multiple hosts.) \
    \ Event messages are\n   typically used to allow entities to alert management\
    \ centers of\n   important changes in their state (for example, when an interface\
    \ goes\n   down or the entity runs out of network buffers).\n"
- title: STANDARD MESSAGE FORMAT
  contents:
  - "STANDARD MESSAGE FORMAT\n   Every HEMP message is put in the general form shown\
    \ in Figure 1.\n                     +-------------------------------+\n     \
    \                :           leader              :\n                     +-------------------------------+\n\
    \                     :       encryption section      :\n                    \
    \ +-------------------------------+\n                     :    reply encryption\
    \ section   :\n                     +-------------------------------+\n      \
    \               :     authentication section    :\n                     +-------------------------------+\n\
    \                     :          common header        :\n                    \
    \ +-------------------------------+\n                     :              data\
    \             :\n                     +-------------------------------+\n    \
    \              Figure 1: General Form of HEMP Messages\n   Each message has five\
    \ components: (1) the leader, which is simply the\n   ASN.1 tag and message length;\
    \ (2) the encryption section, which\n   provides whatever information the receiver\
    \ may require to decrypt the\n   message; (3) the reply encryption section, in\
    \ which the requesting\n   application may specify the type of encryption to use\
    \ in the reply;\n   (4) the authentication section, which allows the receiver\
    \ to\n   authenticate the message; (5) the common header, which identifies the\n\
    \   message type, the HEMP version, and the message id; and (6) the data\n   section.\
    \  All four sections following the leader are also ASN.1\n   encoded.  The ASN.1\
    \ format of the message is shown in Figure 2.\n          HempMessage ::= [0] IMPLICIT\
    \ SEQUENCE {\n              [0] IMPLICIT EncryptSection OPTIONAL,\n          \
    \    [1] IMPLICIT ReplyEncryptSection OPTIONAL,\n              [2] IMPLICIT AuthenticateSection\
    \ OPTIONAL,\n              [3] IMPLICIT CommonHeader,\n              [4] IMPLICIT\
    \ Data }\n                  Figure 2: ASN.1 Format of HEMP Messages\n   The ordering\
    \ of the sections is significant.  The encryption section\n   comes first so that\
    \ all succeeding sections (which may contain\n   sensitive information) may be\
    \ encrypted.  The authentication section\n   precedes the header so that messages\
    \ which fail authentication can be\n   discarded without header processing.\n"
- title: THE ENCRYPTION SECTION
  contents:
  - 'THE ENCRYPTION SECTION

    '
- title: Need For Encryption
  contents:
  - "Need For Encryption\n   Encryption must be supported in any management scheme.\
    \  In\n   particular, a certain amount of monitoring information is potentially\n\
    \   sensitive.  For example, imagine that an entity maintains a traffic\n   matrix,\
    \ which shows the number of packets it sent to other entities.\n   Such a traffic\
    \ matrix can reveal communications patterns in an\n   organization (e.g., a corporation\
    \ or a government agency).\n   Organizations concerned with privacy may wish to\
    \ employ encryption to\n   protect such information.  Access control ensures that\
    \ only people\n   entitled to request the data are able to retrieve it, but does\
    \ not\n   protect from eavesdroppers reading the messages.  Encryption protects\n\
    \   against eavesdropping.\n   Note that encryption in HEMP does not protect against\
    \ traffic\n   analysis.  It is expected that HEMP interactions will have distinct\n\
    \   signatures such that a party which can observe traffic patterns may\n   guess\
    \ at the sort of interactions being performed, even if the data\n   being sent\
    \ is encrypted.  Organizations concerned with security at\n   this level should\
    \ additionally consider link-level encryption.\n"
- title: Format of the Encryption Section
  contents:
  - "Format of the Encryption Section\n   The encryption section contains any data\
    \ required to decrypt the\n   message.  The ASN.1 format of this section is shown\
    \ in Figure 3.\n          EncryptSection :: = IMPLICIT SEQUENCE {\n          \
    \      encryptType INTEGER,\n                encryptData ANY\n          }\n  \
    \              Figure 3: ASN.1 Format of Encryption Section\n   If the section\
    \ is omitted, then no decryption is required.  If the\n   section is present,\
    \ then the encryptType field contains a number\n   defining the encryption method\
    \ in use and encryptData contains\n   whatever data, for example a key, which\
    \ the receiver must have to\n   decrypt the remainder of the message using the\
    \ type of encryption\n   specified.\n   Currently no encryption types are assigned.\n\
    \   If the message has been encrypted, data is encrypted starting with\n   the\
    \ first octet after the encryption section.\n"
- title: THE REPLY ENCRYPTION SECTION
  contents:
  - 'THE REPLY ENCRYPTION SECTION

    '
- title: Need for Reply Encryption
  contents:
  - "Need for Reply Encryption\n   The reasons for encrypting messages have already\
    \ been discussed.\n   The reply encryption section provides the ability for management\n\
    \   agents to request that responses be encrypted even though the\n   requests\
    \ are not encrypted, or that responses be encrypted using a\n   different key\
    \ or even a different scheme from that used to encrypt\n   the request.  A good\
    \ example is a public key encryption system, where\n   the requesting application\
    \ needs to pass its public key to the\n   processing agent.\n"
- title: Format of the Reply Encryption Section
  contents:
  - "Format of the Reply Encryption Section\n   The reply encryption section contains\
    \ any data required to encrypt\n   the reply message.  The ASN.1 format of this\
    \ section is shown in\n   Figure 4.\n          ReplyEncryptSection :: = IMPLICIT\
    \ SEQUENCE {\n                replyEncryptType INTEGER,\n                replyEncryptData\
    \ ANY\n          }\n          Figure 4: ASN.1 Format of Reply Encryption Section\n\
    \   If the section is omitted, then the reply should be encrypted in the\n   manner\
    \ specified by the encryption section.  If the section is\n   present, then the\
    \ replyEncryptType field contains a number defining\n   the encryption method\
    \ to use and replyEncryptData contains whatever\n   data, for example a key, which\
    \ the receiver must have to encrypt the\n   reply message.\n   If the reply encryption\
    \ section is present, then the reply message\n   must contain an appropriate encryption\
    \ section, which indicates the\n   encryption method requested in the reply encryption\
    \ section is in\n   use.  The reply message should be encrypted starting with\
    \ the first\n   octet after the encryption section.\n   If the reply encryption\
    \ method requested is not supported by the\n   entity, the entity may not send\
    \ a reply.  It may, at the discretion\n   of the implementor, send a protocol\
    \ error message.  (See below for\n   descriptions of protocol error messages.)\n\
    \   Currently no encryption types are assigned.\n"
- title: THE AUTHENTICATION SECTION
  contents:
  - 'THE AUTHENTICATION SECTION

    '
- title: Need for Authentication
  contents:
  - "Need for Authentication\n   It is often useful for an application to be able\
    \ to confirm either\n   that a message is indeed from the entity it claims to\
    \ have originated\n   at, or that the sender of the message is accredited to make\
    \ a\n   monitoring request, or both.  An example may be useful here.\n   Consider\
    \ the situation in which an entity sends a event message to a\n   monitoring center\
    \ which indicates that a trunk link is unstable.\n   Before the monitoring center\
    \ personnel take actions to re-route\n   traffic around the bad link (or makes\
    \ a service call to get the link\n   fixed), it would be nice to confirm that\
    \ the event was indeed sent by\n   the entity, and not by a prankster.  Authentication\
    \ provides this\n   facility by allowing entities to authenticate their event\
    \ messages.\n   Another use of the authentication section is to provide access\n\
    \   control.  Requests demand processing time from the entity.  In cases\n   where\
    \ the entity is a critical node, such as a gateway, we would like\n   to be able\
    \ to limit requests to authorized applications.  We can use\n   the authentication\
    \ section to provide access control, by only\n   allowing specially authenticated\
    \ applications to request processing\n   time.\n   It should also be noted that,\
    \ in certain cases, the encryption method\n   may also implicitly authenticate\
    \ a message.  In such situations, the\n   authentication section should still\
    \ be present, but uses a type code\n   which indicates that authentication was\
    \ provided by the encryption\n   method.\n"
- title: Format of the Authentication Section
  contents:
  - "Format of the Authentication Section\n   The authentication section contains\
    \ any data required to allow the\n   receiver to authenticate the message.  The\
    \ ASN.1 format of this\n   section is shown in Figure 5.\n         AuthenticateSection\
    \ :: = IMPLICIT SEQUENCE {\n                authenticateType INTEGER,\n      \
    \          authenticateData ANY\n               }\n             Figure 5: ASN.1\
    \ Format of Authentication Section\n   If the section is omitted, then the message\
    \ is not authenticated.  If\n   the section is present, then the authenticateType\
    \ defines the type of\n   authentication used and the authenticateData contains\
    \ the\n   authenticating data.\n   This memo defines two types of authentication,\
    \ a password scheme and\n   authentication by encryption method.  For the password\
    \ scheme, the\n   AuthenticateSection has the form shown in Figure 6.\n      \
    \   AuthenticateSection :: = IMPLICIT SEQUENCE {\n                authenticateType\
    \ INTEGER { password(1) },\n                authenticateData OCTETSTRING\n   \
    \       }\n          Figure 6: ASN.1 Format of Password Authentication Section\n\
    \   The authenticateType is 1, and the password is an octet string of any\n  \
    \ length.  The system is used to validate requests to an entity.  Upon\n   receiving\
    \ a request, an entity checks the password against an entity\n   specific password\
    \ which has been assigned to the entity.  If the\n   passwords match, the request\
    \ is accepted for processing.  The scheme\n   is a slightly more powerful password\
    \ scheme than that currently used\n   for monitoring on the Internet.\n   For\
    \ authentication by encryption, the AuthenticateSection has the\n   format shown\
    \ in Figure 7.\n         AuthenticateSection :: = IMPLICIT SEQUENCE {\n      \
    \          authenticateType INTEGER { encryption(2) },\n                authenticateData\
    \ NULL\n          }\n          Figure 7: ASN.1 Format of Encryption Authentication\
    \ Section\n   This section simply indicates that authentication was implicit in\
    \ the\n   encryption method.  Recipients of such messages should confirm that\n\
    \   the encryption method does indeed provide authentication.\n   No other authentication\
    \ types are currently defined.\n   If a message fails authentication, it should\
    \ be discarded.  If the\n   type of authentication used on the message is unknown\
    \ or the section\n   is omitted, the message may be discarded or processed at\
    \ the\n   discretion of the implementation.  It is recommended that requests\n\
    \   with unknown authentication types be logged as potential intrusions,\n   but\
    \ not processed.\n"
- title: THE COMMON HEADER
  contents:
  - "THE COMMON HEADER\n   The common header contains generic information about the\
    \ message such\n   as the protocol version number and the type of request.  The\
    \ ASN.1\n   format of the common header is shown in Figure 8.\n           CommonHeader\
    \ ::= IMPLICIT SEQUENCE {\n               link IMPLICIT INTEGER,\n           \
    \    messageType IMPLICIT INTEGER,\n               messageId IMPLICIT INTEGER,\n\
    \               resourceId ANY\n           }\n                  Figure 8: ASN.1\
    \ Format of Common Header\n   The link indicates which version of HEMS is in use.\n\
    \   The messageType is a value indicating whether the message is a\n   request\
    \ (0), reply (1), event (2), protocol error (3) or application\n   error (4) message.\n\
    \   The messageId is a unique bit identifier, which is set in the request\n  \
    \ message, and echoed in the response.  It allows applications to match\n   responses\
    \ to their corresponding request.  Applications should choose\n   messageIds such\
    \ that a substantial period of time elapses before a\n   messageId is re-used\
    \ by a particular application (even across machine\n   crashes).\n   Event messages\
    \ also use the messageId field to indicate the number of\n   the current event\
    \ message.  By comparing messageId fields from events\n   lost, event values may\
    \ be detected.  The event messageId should be\n   reset to 0 on every reboot,\
    \ and by convention, the event message with\n   messageId of 0 should always be\
    \ a \"reboot\" event.  (Facilities should\n   be provided in the event message\
    \ definition to allow entities which\n   are capable of storing messageIds across\
    \ reboots to send the highest\n   messageId reached before the reboot.)\n   The\
    \ resourceId is defined for ISO compatibility and corresponds to\n   the resource\
    \ ID used by the Common Management Information Protocol to\n   identify the relevant\
    \ ISO resource.\n"
- title: DATA SECTION
  contents:
  - "DATA SECTION\n   The data section contains the message specific data.  The format\
    \ of\n   the data section is shown in Figure 9.\n                   Data ::= ANY\n\
    \                  Figure 9: ASN.1 Format of Data Section\n   The contents of\
    \ the data section is application specific and, with\n   the exception of protocol\
    \ error messages, is outside the scope of\n   this memo.\n"
- title: TRANSPORT PROTOCOL
  contents:
  - "TRANSPORT PROTOCOL\n   There has been considerable debate about the proper transport\n\
    \   protocol to use under HEMP.  Part of the problem is that HEMP is\n   being\
    \ used for two different types of interactions:  request-response\n   exchanges\
    \ and event messages.  Request-response interactions may\n   involve arbitrary\
    \ amounts of data being sent in both directions, and\n   is believed to require\
    \ a reliable transport mechanism.  Event\n   messages are typically small and\
    \ need not be reliably delivered.\n   Public opinion seems to lean towards running\
    \ HEMP over a transaction\n   protocol (see RFC-955 for a general discussion).\
    \  Unfortunately, the\n   community is still experimenting with transaction protocols,\
    \ and many\n   groups would like to be able to implement HEMP now.  Accordingly,\n\
    \   this memo defines two transport protocols for use with HEMP.\n   Groups interested\
    \ in using an implementation of HEMP and the HEMS in\n   the near future should\
    \ use a combination of the Transmission Control\n   Protocol (TCP) and the User\
    \ Datagram Protocol (UDP) under HEMP.  TCP\n   should be used for all request-response\
    \ interactions and UDP should\n   be used to send event messages.  Using UDP to\
    \ support the request-\n   response interactions is strongly discouraged.\n  \
    \ More forward looking groups are encouraged to implement HEMP over a\n   transaction\
    \ protocol, in particular, experiments are planned with the\n   Versatile Message\
    \ Transaction Protocol (VMTP).\n"
- title: PROTOCOL ERROR MESSAGES
  contents:
  - "PROTOCOL ERROR MESSAGES\n   Protocol error messages are so closely tied to the\
    \ definition of HEMP\n   that it made sense to define the contents of the data\
    \ section for\n   protocol error messages in this memo, even though the data section\
    \ is\n   generally considered application specific.\n   The data section of all\
    \ protocol error messages has the same format,\n   which is shown in Figure 10.\
    \  This format has been chosen to agree\n   with the error message format and\
    \ ASN.1 type used for language\n   processing errors in RFC-1024, and the error\
    \ codes have been chosen\n   such that they do not overlap.\n           ProtocolError\
    \ ::= [APPLICATION 0] implicit sequence {\n               protoErrorCode INTEGER,\n\
    \               protoErrorOffset INTEGER,\n               protoErrorDescribed\
    \ IA5String,\n           }\n            Figure 10: Data Section For Protocol Error\
    \ Messages\n   The protoErrorCode is a number which specifies the particular type\
    \ of\n   error encountered.  The defined codes are:\n           0 - reserved <not\
    \ used>\n           1 - ASN.1 format error.  Some error has been encountered\n\
    \           in parsing the message.  Examples of such an error are an\n      \
    \     unknown type or a violation of the ASN.1 syntax.\n           2 - Wrong HEMP\
    \ version number.  The version number in\n           the common header is invalid.\
    \  Note that this may\n           be an indication of possible network intrusion\
    \ and\n           should be logged at sites concerned with security.\n       \
    \    3 - Authentication error.  Authentication has failed.\n           This error\
    \ code is defined for completeness, but\n           implementations are *strongly*\
    \ discouraged from using\n           it.  Returning authentication failure information\
    \ may\n           aid intruders in cracking the authentication system.\n     \
    \      It is recommended taht authentication errors be logged\n           as possible\
    \ security problems.\n           4 - ReplyEncryption type not supported.  The\
    \ entity\n           does not support the encryption method requested in the\n\
    \           ReplyEncryption section.\n           5 - Decryption failed.  The entity\
    \ could not decrypt the\n           encrypted message.  Note that this means that\
    \ the\n           entity could not read the CommonHeader to find the\n       \
    \    messageId for the reply.  In this case, the messageId\n           field should\
    \ be set to 0.\n           6 - Application Failed.  Some application failure made\
    \ it\n           impossible to process the message.\n   The protoErrorOffset is\
    \ the number of the octet in which the error\n   was discovered.  The first octet\
    \ in the message is octet number 0.\n   The protoErrorDescribed field is a string\
    \ which describes the\n   particular error.  This description is expected to give\
    \ a more\n   detailed description of the particular error encountered.\n"
- title: APPENDIX OF TYPES
  contents:
  - "APPENDIX OF TYPES\n   This section lists all ASN.1 types defined in this document.\n\
    \   HEMP Types\n          HempMessage ::= [0] IMPLICIT SEQUENCE {\n          \
    \    [0] IMPLICIT EncryptSection OPTIONAL,\n              [1] IMPLICIT ReplyEncryptSection\
    \ OPTIONAL,\n              [2] IMPLICIT AuthenticateSection OPTIONAL,\n      \
    \        [3] IMPLICIT CommonHeader,\n              [4] IMPLICIT Data }\n     \
    \  EncryptSection :: = IMPLICIT SEQUENCE {\n           encryptType INTEGER,\n\
    \           encryptData ANY\n       }\n       ReplyEncryptSection :: = IMPLICIT\
    \ SEQUENCE {\n           replyEncryptType INTEGER,\n           replyEncryptData\
    \ ANY\n       }\n       AuthenticateSection :: = IMPLICIT SEQUENCE {\n       \
    \    authenticateType INTEGER,\n           authenticateData ANY\n       }\n  \
    \     CommonHeader ::= IMPLICIT SEQUENCE {\n           link IMPLICIT INTEGER,\n\
    \           messageType IMPLICIT INTEGER {\n               request(0), reply(1),\
    \ event(2),\n               protocol error (3), application error(4)\n       \
    \    }\n           messageId IMPLICIT INTEGER,\n           resourceId ANY\n  \
    \     }\n       Data ::= ANY\n"
- title: Protocol Error Types
  contents:
  - "Protocol Error Types\n       ProtocolError ::= [APPLICATION 0] implicit sequence\
    \ {\n           protoErrorCode INTEGER,\n           protoErrorOffset INTEGER,\n\
    \           protoErrorDescribed OCTETSTRING\n       }\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   ISO Standard ASN.1 (Abstract Syntax Notation 1).  It comes in\
    \ two\n   parts:\n      International Standard 8824 -- Specification (meaning,\
    \ notation)\n      International Standard 8825 -- Encoding Rules (representation)\n\
    \   The current VMTP specification is available from David Cheriton of\n   Stanford\
    \ University.\n"
