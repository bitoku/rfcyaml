- title: __initial_text__
  contents:
  - '                      DNS Security (DNSSEC) Opt-In

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   In the DNS security (DNSSEC) extensions, delegations to unsigned\n\
    \   subzones are cryptographically secured.  Maintaining this\n   cryptography\
    \ is not always practical or necessary.  This document\n   describes an experimental\
    \ \"Opt-In\" model that allows administrators\n   to omit this cryptography and\
    \ manage the cost of adopting DNSSEC with\n   large zones.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Overview . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Definitions and Terminology  . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Experimental Status  . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Protocol Additions . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n     4.1.  Server Considerations  . . . . . . . . . . . . . . . .\
    \ . .  6\n       4.1.1.  Delegations Only . . . . . . . . . . . . . . . . . .\
    \ .  6\n       4.1.2.  Insecure Delegation Responses  . . . . . . . . . . . .\
    \  6\n       4.1.3.  Dynamic Update . . . . . . . . . . . . . . . . . . . .  6\n\
    \     4.2.  Client Considerations  . . . . . . . . . . . . . . . . . .  7\n  \
    \     4.2.1.  Delegations Only . . . . . . . . . . . . . . . . . . .  7\n    \
    \   4.2.2.  Validation Process Changes . . . . . . . . . . . . . .  7\n      \
    \ 4.2.3.  NSEC Record Caching  . . . . . . . . . . . . . . . . .  8\n       4.2.4.\
    \  Use of the AD bit  . . . . . . . . . . . . . . . . . .  8\n   5.  Benefits\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n   6.  Example  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n   7.  Transition Issues\
    \  . . . . . . . . . . . . . . . . . . . . . . 11\n   8.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 11\n   9.  Acknowledgments  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 13\n   10. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 13\n     10.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 13\n     10.2. Informative References . . .\
    \ . . . . . . . . . . . . . . . 13\n   Appendix A.  Implementing Opt-In Using\
    \ \"Views\" . . . . . . . . . . 15\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   The cost to cryptographically secure delegations to unsigned\
    \ zones is\n   high for large delegation-centric zones and zones where insecure\n\
    \   delegations will be updated rapidly.  For these zones, the costs of\n   maintaining\
    \ the NextSECure (NSEC) record chain may be extremely high\n   relative to the\
    \ gain of cryptographically authenticating existence of\n   unsecured zones.\n\
    \   This document describes an experimental method of eliminating the\n   superfluous\
    \ cryptography present in secure delegations to unsigned\n   zones.  Using \"\
    Opt-In\", a zone administrator can choose to remove\n   insecure delegations from\
    \ the NSEC chain.  This is accomplished by\n   extending the semantics of the\
    \ NSEC record by using a redundant bit\n   in the type map.\n"
- title: 2.  Definitions and Terminology
  contents:
  - "2.  Definitions and Terminology\n   Throughout this document, familiarity with\
    \ the DNS system (RFC 1035\n   [1]), DNS security extensions ([4], [5], and [6],\
    \ referred to in this\n   document as \"standard DNSSEC\"), and DNSSEC terminology\
    \ (RFC 3090\n   [10]) is assumed.\n   The following abbreviations and terms are\
    \ used in this document:\n   RR:  is used to refer to a DNS resource record.\n\
    \   RRset:  refers to a Resource Record Set, as defined by [8].  In this\n   \
    \   document, the RRset is also defined to include the covering RRSIG\n      records,\
    \ if any exist.\n   signed name:  refers to a DNS name that has, at minimum, a\
    \ (signed)\n      NSEC record.\n   unsigned name:  refers to a DNS name that does\
    \ not (at least) have an\n      NSEC record.\n   covering NSEC record/RRset: \
    \ is the NSEC record used to prove\n      (non)existence of a particular name\
    \ or RRset.  This means that for\n      a RRset or name 'N', the covering NSEC\
    \ record has the name 'N', or\n      has an owner name less than 'N' and \"next\"\
    \ name greater than 'N'.\n   delegation:  refers to an NS RRset with a name different\
    \ from the\n      current zone apex (non-zone-apex), signifying a delegation to\
    \ a\n      subzone.\n   secure delegation:  refers to a signed name containing\
    \ a delegation\n      (NS RRset), and a signed DS RRset, signifying a delegation\
    \ to a\n      signed subzone.\n   insecure delegation:  refers to a signed name\
    \ containing a delegation\n      (NS RRset), but lacking a DS RRset, signifying\
    \ a delegation to an\n      unsigned subzone.\n   Opt-In insecure delegation:\
    \  refers to an unsigned name containing\n      only a delegation NS RRset.  The\
    \ covering NSEC record uses the\n      Opt-In methodology described in this document.\n\
    \   The key words \"MUST, \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY, and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [2].\n"
- title: 3.  Experimental Status
  contents:
  - "3.  Experimental Status\n   This document describes an EXPERIMENTAL extension\
    \ to DNSSEC.  It\n   interoperates with non-experimental DNSSEC using the technique\n\
    \   described in [7].  This experiment is identified with the following\n   private\
    \ algorithms (using algorithm 253):\n   \"3.optin.verisignlabs.com\":  is an alias\
    \ for DNSSEC algorithm 3, DSA,\n      and\n   \"5.optin.verisignlabs.com\":  is\
    \ an alias for DNSSEC algorithm 5,\n      RSASHA1.\n   Servers wishing to sign\
    \ and serve zones that utilize Opt-In MUST sign\n   the zone with only one or\
    \ more of these private algorithms and MUST\n   NOT use any other algorithms.\n\
    \   Resolvers MUST NOT apply the Opt-In validation rules described in\n   this\
    \ document unless a zone is signed using one or more of these\n   private algorithms.\n\
    \   This experimental protocol relaxes the restriction that validators\n   MUST\
    \ ignore the setting of the NSEC bit in the type map as specified\n   in RFC 4035\
    \ [6] Section 5.4.\n   The remainder of this document assumes that the servers\
    \ and resolvers\n   involved are aware of and are involved in this experiment.\n"
- title: 4.  Protocol Additions
  contents:
  - "4.  Protocol Additions\n   In DNSSEC, delegation NS RRsets are not signed, but\
    \ are instead\n   accompanied by an NSEC RRset of the same name and (possibly)\
    \ a DS\n   record.  The security status of the subzone is determined by the\n\
    \   presence or absence of the DS RRset, cryptographically proven by the\n   NSEC\
    \ record.  Opt-In expands this definition by allowing insecure\n   delegations\
    \ to exist within an otherwise signed zone without the\n   corresponding NSEC\
    \ record at the delegation's owner name.  These\n   insecure delegations are proven\
    \ insecure by using a covering NSEC\n   record.\n   Since this represents a change\
    \ of the interpretation of NSEC records,\n   resolvers must be able to distinguish\
    \ between RFC standard DNSSEC\n   NSEC records and Opt-In NSEC records.  This\
    \ is accomplished by\n   \"tagging\" the NSEC records that cover (or potentially\
    \ cover) insecure\n   delegation nodes.  This tag is indicated by the absence\
    \ of the NSEC\n   bit in the type map.  Since the NSEC bit in the type map merely\n\
    \   indicates the existence of the record itself, this bit is redundant\n   and\
    \ safe for use as a tag.\n   An Opt-In tagged NSEC record does not assert the\
    \ (non)existence of\n   the delegations that it covers (except for a delegation\
    \ with the same\n   name).  This allows for the addition or removal of these delegations\n\
    \   without recalculating or resigning records in the NSEC chain.\n   However,\
    \ Opt-In tagged NSEC records do assert the (non)existence of\n   other RRsets.\n\
    \   An Opt-In NSEC record MAY have the same name as an insecure\n   delegation.\
    \  In this case, the delegation is proven insecure by the\n   lack of a DS bit\
    \ in the type map, and the signed NSEC record does\n   assert the existence of\
    \ the delegation.\n   Zones using Opt-In MAY contain a mixture of Opt-In tagged\
    \ NSEC\n   records and standard DNSSEC NSEC records.  If an NSEC record is not\n\
    \   Opt-In, there MUST NOT be any insecure delegations (or any other\n   records)\
    \ between it and the RRsets indicated by the 'next domain\n   name' in the NSEC\
    \ RDATA.  If it is Opt-In, there MUST only be\n   insecure delegations between\
    \ it and the next node indicated by the\n   'next domain name' in the NSEC RDATA.\n\
    \   In summary,\n   o  An Opt-In NSEC type is identified by a zero-valued (or\
    \ not-\n      specified) NSEC bit in the type bit map of the NSEC record.\n  \
    \ o  A standard DNSSEC NSEC type is identified by a one-valued NSEC bit\n    \
    \  in the type bit map of the NSEC record.\n   and\n   o  An Opt-In NSEC record\
    \ does not assert the non-existence of a name\n      between its owner name and\
    \ \"next\" name, although it does assert\n      that any name in this span MUST\
    \ be an insecure delegation.\n   o  An Opt-In NSEC record does assert the (non)existence\
    \ of RRsets\n      with the same owner name.\n"
- title: 4.1.  Server Considerations
  contents:
  - "4.1.  Server Considerations\n   Opt-In imposes some new requirements on authoritative\
    \ DNS servers.\n"
- title: 4.1.1.  Delegations Only
  contents:
  - "4.1.1.  Delegations Only\n   This specification dictates that only insecure delegations\
    \ may exist\n   between the owner and \"next\" names of an Opt-In tagged NSEC\
    \ record.\n   Signing tools MUST NOT generate signed zones that violate this\n\
    \   restriction.  Servers MUST refuse to load and/or serve zones that\n   violate\
    \ this restriction.  Servers also MUST reject AXFR or IXFR\n   responses that\
    \ violate this restriction.\n"
- title: 4.1.2.  Insecure Delegation Responses
  contents:
  - "4.1.2.  Insecure Delegation Responses\n   When returning an Opt-In insecure delegation,\
    \ the server MUST return\n   the covering NSEC RRset in the Authority section.\n\
    \   In standard DNSSEC, NSEC records already must be returned along with\n   the\
    \ insecure delegation.  The primary difference that this proposal\n   introduces\
    \ is that the Opt-In tagged NSEC record will have a\n   different owner name from\
    \ the delegation RRset.  This may require\n   implementations to search for the\
    \ covering NSEC RRset.\n"
- title: 4.1.3.  Dynamic Update
  contents:
  - "4.1.3.  Dynamic Update\n   Opt-In changes the semantics of Secure DNS Dynamic\
    \ Update [9].  In\n   particular, it introduces the need for rules that describe\
    \ when to\n   add or remove a delegation name from the NSEC chain.  This document\n\
    \   does not attempt to define these rules.  Until these rules are\n   defined,\
    \ servers MUST NOT process DNS Dynamic Update requests against\n   zones that\
    \ use Opt-In NSEC records.  Servers SHOULD return responses\n   to update requests\
    \ with RCODE=REFUSED.\n"
- title: 4.2.  Client Considerations
  contents:
  - "4.2.  Client Considerations\n   Opt-In imposes some new requirements on security-aware\
    \ resolvers\n   (caching or otherwise).\n"
- title: 4.2.1.  Delegations Only
  contents:
  - "4.2.1.  Delegations Only\n   As stated in Section 4.1 above, this specification\
    \ restricts the\n   namespace covered by Opt-In tagged NSEC records to insecure\n\
    \   delegations only.  Clients are not expected to take any special\n   measures\
    \ to enforce this restriction; instead, it forms an underlying\n   assumption\
    \ that clients may rely on.\n"
- title: 4.2.2.  Validation Process Changes
  contents:
  - "4.2.2.  Validation Process Changes\n   This specification does not change the\
    \ resolver's resolution\n   algorithm.  However, it does change the DNSSEC validation\
    \ process.\n"
- title: 4.2.2.1.  Referrals
  contents:
  - "4.2.2.1.  Referrals\n   Resolvers MUST be able to use Opt-In tagged NSEC records\
    \ to\n   cryptographically prove the validity and security status (as\n   insecure)\
    \ of a referral.  Resolvers determine the security status of\n   the referred-to\
    \ zone as follows:\n   o  In standard DNSSEC, the security status is proven by\
    \ the existence\n      or absence of a DS RRset at the same name as the delegation.\
    \  The\n      existence of the DS RRset indicates that the referred-to zone is\n\
    \      signed.  The absence of the DS RRset is proven using a verified\n     \
    \ NSEC record of the same name that does not have the DS bit set in\n      the\
    \ type map.  This NSEC record MAY also be tagged as Opt-In.\n   o  Using Opt-In,\
    \ the security status is proven by the existence of a\n      DS record (for signed)\
    \ or the presence of a verified Opt-In tagged\n      NSEC record that covers the\
    \ delegation name.  That is, the NSEC\n      record does not have the NSEC bit\
    \ set in the type map, and the\n      delegation name falls between the NSEC's\
    \ owner and \"next\" name.\n   Using Opt-In does not substantially change the\
    \ nature of following\n   referrals within DNSSEC.  At every delegation point,\
    \ the resolver\n   will have cryptographic proof that the referred-to subzone\
    \ is signed\n   or unsigned.\n"
- title: 4.2.2.2.  Queries for DS Resource Records
  contents:
  - "4.2.2.2.  Queries for DS Resource Records\n   Since queries for DS records are\
    \ directed to the parent side of a\n   zone cut (see [5], Section 5), negative\
    \ responses to these queries\n   may be covered by an Opt-In flagged NSEC record.\n\
    \   Resolvers MUST be able to use Opt-In tagged NSEC records to\n   cryptographically\
    \ prove the validity and security status of negative\n   responses to queries\
    \ for DS records.  In particular, a NOERROR/NODATA\n   (i.e., RCODE=3, but the\
    \ answer section is empty) response to a DS\n   query may be proven by an Opt-In\
    \ flagged covering NSEC record, rather\n   than an NSEC record matching the query\
    \ name.\n"
- title: 4.2.3.  NSEC Record Caching
  contents:
  - "4.2.3.  NSEC Record Caching\n   Caching resolvers MUST be able to retrieve the\
    \ appropriate covering\n   Opt-In NSEC record when returning referrals that need\
    \ them.  This\n   requirement differs from standard DNSSEC in that the covering\
    \ NSEC\n   will not have the same owner name as the delegation.  Some\n   implementations\
    \ may have to use new methods for finding these NSEC\n   records.\n"
- title: 4.2.4.  Use of the AD bit
  contents:
  - "4.2.4.  Use of the AD bit\n   The AD bit, as defined by [3] and [6], MUST NOT\
    \ be set when:\n   o  sending a Name Error (RCODE=3) response where the covering\
    \ NSEC is\n      tagged as Opt-In.\n   o  sending an Opt-In insecure delegation\
    \ response, unless the\n      covering (Opt-In) NSEC record's owner name equals\
    \ the delegation\n      name.\n   o  sending a NOERROR/NODATA response when query\
    \ type is DS and the\n      covering NSEC is tagged as Opt-In, unless NSEC record's\
    \ owner name\n      matches the query name.\n   This rule is based on what the\
    \ Opt-In NSEC record actually proves:\n   for names that exist between the Opt-In\
    \ NSEC record's owner and\n   \"next\" names, the Opt-In NSEC record cannot prove\
    \ the non-existence\n   or existence of the name.  As such, not all data in the\
    \ response has\n   been cryptographically verified, so the AD bit cannot be set.\n"
- title: 5.  Benefits
  contents:
  - "5.  Benefits\n   Using Opt-In allows administrators of large and/or changing\n\
    \   delegation-centric zones to minimize the overhead involved in\n   maintaining\
    \ the security of the zone.\n   Opt-In accomplishes this by eliminating the need\
    \ for NSEC records for\n   insecure delegations.  This, in a zone with a large\
    \ number of\n   delegations to unsigned subzones, can lead to substantial space\n\
    \   savings (both in memory and on disk).  Additionally, Opt-In allows\n   for\
    \ the addition or removal of insecure delegations without modifying\n   the NSEC\
    \ record chain.  Zones that are frequently updating insecure\n   delegations (e.g.,\
    \ Top-Level Domains (TLDs)) can avoid the\n   substantial overhead of modifying\
    \ and resigning the affected NSEC\n   records.\n"
- title: 6.  Example
  contents:
  - "6.  Example\n   Consider the zone EXAMPLE shown below.  This is a zone where\
    \ all of\n   the NSEC records are tagged as Opt-In.\n   Example A: Fully Opt-In\
    \ Zone.\n         EXAMPLE.               SOA    ...\n         EXAMPLE.       \
    \        RRSIG  SOA ...\n         EXAMPLE.               NS     FIRST-SECURE.EXAMPLE.\n\
    \         EXAMPLE.               RRSIG  NS ...\n         EXAMPLE.            \
    \   DNSKEY ...\n         EXAMPLE.               RRSIG  DNSKEY ...\n         EXAMPLE.\
    \               NSEC   FIRST-SECURE.EXAMPLE. (\n                             \
    \          SOA NS RRSIG DNSKEY )\n         EXAMPLE.               RRSIG  NSEC\
    \ ...\n         FIRST-SECURE.EXAMPLE.  A      ...\n         FIRST-SECURE.EXAMPLE.\
    \  RRSIG  A ...\n         FIRST-SECURE.EXAMPLE.  NSEC   NOT-SECURE-2.EXAMPLE.\
    \ A RRSIG\n         FIRST-SECURE.EXAMPLE.  RRSIG  NSEC ...\n         NOT-SECURE.EXAMPLE.\
    \    NS     NS.NOT-SECURE.EXAMPLE.\n         NS.NOT-SECURE.EXAMPLE. A      ...\n\
    \         NOT-SECURE-2.EXAMPLE.  NS     NS.NOT-SECURE.EXAMPLE.\n         NOT-SECURE-2.EXAMPLE\
    \   NSEC   SECOND-SECURE.EXAMPLE NS RRSIG\n         NOT-SECURE-2.EXAMPLE   RRSIG\
    \  NSEC ...\n         SECOND-SECURE.EXAMPLE. NS     NS.ELSEWHERE.\n         SECOND-SECURE.EXAMPLE.\
    \ DS     ...\n         SECOND-SECURE.EXAMPLE. RRSIG  DS ...\n         SECOND-SECURE.EXAMPLE.\
    \ NSEC   EXAMPLE. NS RRSIG DNSKEY\n         SECOND-SECURE.EXAMPLE. RRSIG  NSEC\
    \ ...\n         UNSIGNED.EXAMPLE.      NS     NS.UNSIGNED.EXAMPLE.\n         NS.UNSIGNED.EXAMPLE.\
    \   A      ...\n                                Example A.\n   In this example,\
    \ a query for a signed RRset (e.g., \"FIRST-\n   SECURE.EXAMPLE A\") or a secure\
    \ delegation (\"WWW.SECOND-SECURE.EXAMPLE\n   A\") will result in a standard DNSSEC\
    \ response.\n   A query for a nonexistent RRset will result in a response that\n\
    \   differs from standard DNSSEC by the following: the NSEC record will\n   be\
    \ tagged as Opt-In, there may be no NSEC record proving the non-\n   existence\
    \ of a matching wildcard record, and the AD bit will not be\n   set.\n   A query\
    \ for an insecure delegation RRset (or a referral) will return\n   both the answer\
    \ (in the Authority section) and the corresponding\n   Opt-In NSEC record to prove\
    \ that it is not secure.\n   Example A.1: Response to query for WWW.UNSIGNED.EXAMPLE.\
    \  A\n         RCODE=NOERROR, AD=0\n         Answer Section:\n         Authority\
    \ Section:\n         UNSIGNED.EXAMPLE.      NS     NS.UNSIGNED.EXAMPLE\n     \
    \    SECOND-SECURE.EXAMPLE. NSEC   EXAMPLE. NS RRSIG DS\n         SECOND-SECURE.EXAMPLE.\
    \ RRSIG  NSEC ...\n         Additional Section:\n         NS.UNSIGNED.EXAMPLE.\
    \   A      ...\n                                Example A.1\n   In the Example\
    \ A.1 zone, the EXAMPLE. node MAY use either style of\n   NSEC record, because\
    \ there are no insecure delegations that occur\n   between it and the next node,\
    \ FIRST-SECURE.EXAMPLE.  In other words,\n   Example A would still be a valid\
    \ zone if the NSEC record for EXAMPLE.\n   was changed to the following RR:\n\
    \         EXAMPLE.               NSEC   FIRST-SECURE.EXAMPLE. (SOA NS\n      \
    \                                 RRSIG DNSKEY NSEC )\n   However, the other NSEC\
    \ records (FIRST-SECURE.EXAMPLE. and SECOND-\n   SECURE.EXAMPLE.)  MUST be tagged\
    \ as Opt-In because there are insecure\n   delegations in the range they define.\
    \  (NOT-SECURE.EXAMPLE. and\n   UNSIGNED.EXAMPLE., respectively).\n   NOT-SECURE-2.EXAMPLE.\
    \ is an example of an insecure delegation that is\n   part of the NSEC chain and\
    \ also covered by an Opt-In tagged NSEC\n   record.  Because NOT-SECURE-2.EXAMPLE.\
    \ is a signed name, it cannot be\n   removed from the zone without modifying and\
    \ resigning the prior NSEC\n   record.  Delegations with names that fall between\
    \ NOT-SECURE-\n   2.EXAMPLE. and SECOND-SECURE.EXAMPLE. may be added or removed\
    \ without\n   resigning any NSEC records.\n"
- title: 7.  Transition Issues
  contents:
  - "7.  Transition Issues\n   Opt-In is not backwards compatible with standard DNSSEC\
    \ and is\n   considered experimental.  Standard DNSSEC-compliant implementations\n\
    \   would not recognize Opt-In tagged NSEC records as different from\n   standard\
    \ NSEC records.  Because of this, standard DNSSEC\n   implementations, if they\
    \ were to validate Opt-In style responses,\n   would reject all Opt-In insecure\
    \ delegations within a zone as\n   invalid.  However, by only signing with private\
    \ algorithms, standard\n   DNSSEC implementations will treat Opt-In responses\
    \ as unsigned.\n   It should be noted that all elements in the resolution path\
    \ between\n   (and including) the validator and the authoritative name server\
    \ must\n   be aware of the Opt-In experiment and implement the Opt-In semantics\n\
    \   for successful validation to be possible.  In particular, this\n   includes\
    \ any caching middleboxes between the validator and\n   authoritative name server.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Opt-In allows for unsigned names, in the form\
    \ of delegations to\n   unsigned subzones, to exist within an otherwise signed\
    \ zone.  All\n   unsigned names are, by definition, insecure, and their validity\
    \ or\n   existence cannot be cryptographically proven.\n   In general:\n   o \
    \ Records with unsigned names (whether or not existing) suffer from\n      the\
    \ same vulnerabilities as records in an unsigned zone.  These\n      vulnerabilities\
    \ are described in more detail in [12] (note in\n      particular Sections 2.3,\
    \ \"Name Games\" and 2.6, \"Authenticated\n      Denial\").\n   o  Records with\
    \ signed names have the same security whether or not\n      Opt-In is used.\n\
    \   Note that with or without Opt-In, an insecure delegation may have its\n  \
    \ contents undetectably altered by an attacker.  Because of this, the\n   primary\
    \ difference in security that Opt-In introduces is the loss of\n   the ability\
    \ to prove the existence or nonexistence of an insecure\n   delegation within\
    \ the span of an Opt-In NSEC record.\n   In particular, this means that a malicious\
    \ entity may be able to\n   insert or delete records with unsigned names.  These\
    \ records are\n   normally NS records, but this also includes signed wildcard\n\
    \   expansions (while the wildcard record itself is signed, its expanded\n   name\
    \ is an unsigned name), which can be undetectably removed or used\n   to replace\
    \ an existing unsigned delegation.\n   For example, if a resolver received the\
    \ following response from the\n   example zone above:\n   Example S.1: Response\
    \ to query for WWW.DOES-NOT-EXIST.EXAMPLE.  A\n         RCODE=NOERROR\n      \
    \   Answer Section:\n         Authority Section:\n         DOES-NOT-EXIST.EXAMPLE.\
    \ NS     NS.FORGED.\n         EXAMPLE.                NSEC   FIRST-SECURE.EXAMPLE.\
    \ SOA NS \\\n                                        RRSIG DNSKEY\n         EXAMPLE.\
    \                RRSIG  NSEC ...\n         Additional Section:\n             \
    \           Attacker has forged a name\n   The resolver would have no choice but\
    \ to believe that the referral to\n   NS.FORGED. is valid.  If a wildcard existed\
    \ that would have been\n   expanded to cover \"WWW.DOES-NOT-EXIST.EXAMPLE.\",\
    \ an attacker could\n   have undetectably removed it and replaced it with the\
    \ forged\n   delegation.\n   Note that being able to add a delegation is functionally\
    \ equivalent\n   to being able to add any record type: an attacker merely has\
    \ to forge\n   a delegation to the nameserver under his/her control and place\n\
    \   whatever records are needed at the subzone apex.\n   While in particular cases,\
    \ this issue may not present a significant\n   security problem, in general it\
    \ should not be lightly dismissed.\n   Therefore, it is strongly RECOMMENDED that\
    \ Opt-In be used sparingly.\n   In particular, zone signing tools SHOULD NOT default\
    \ to Opt-In, and\n   MAY choose not to support Opt-In at all.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The contributions, suggestions, and remarks of the following\
    \ persons\n   (in alphabetic order) to this document are acknowledged:\n     \
    \ Mats Kolkman, Edward Lewis, Ted Lindgreen, Rip Loomis, Bill\n      Manning,\
    \ Dan Massey, Scott Rose, Mike Schiraldi, Jakob Schlyter,\n      Brian Wellington.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1]   Mockapetris, P., \"Domain names - implementation\
    \ and\n         specification\", STD 13, RFC 1035, November 1987.\n   [2]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",\
    \ BCP 14, RFC 2119, March 1997.\n   [3]   Wellington, B. and O. Gudmundsson, \"\
    Redefinition of DNS\n         Authenticated Data (AD) bit\", RFC 3655, November\
    \ 2003.\n   [4]   Arends, R., Austein, R., Larson, M., Massey, D., and S. Rose,\n\
    \         \"DNS Security Introduction and Requirements\", RFC 4033,\n        \
    \ March 2005.\n   [5]   Arends, R., Austein, R., Larson, M., Massey, D., and S.\
    \ Rose,\n         \"Resource Records for the DNS Security Extensions\", RFC 4034,\n\
    \         March 2005.\n   [6]   Arends, R., Austein, R., Larson, M., Massey, D.,\
    \ and S. Rose,\n         \"Protocol Modifications for the DNS Security Extensions\"\
    ,\n         RFC 4035, March 2005.\n   [7]   Blacka, D., \"DNSSEC Experiments\"\
    , RFC 4955, July 2007.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [8]   Elz, R. and R. Bush, \"Clarifications\
    \ to the DNS Specification\",\n         RFC 2181, July 1997.\n   [9]   Wellington,\
    \ B., \"Secure Domain Name System (DNS) Dynamic\n         Update\", RFC 3007,\
    \ November 2000.\n   [10]  Lewis, E., \"DNS Security Extension Clarification on\
    \ Zone\n         Status\", RFC 3090, March 2001.\n   [11]  Conrad, D., \"Indicating\
    \ Resolver Support of DNSSEC\", RFC 3225,\n         December 2001.\n   [12]  Atkins,\
    \ D. and R. Austein, \"Threat Analysis of the Domain Name\n         System (DNS)\"\
    , RFC 3833, August 2004.\n"
- title: Appendix A.  Implementing Opt-In Using "Views"
  contents:
  - "Appendix A.  Implementing Opt-In Using \"Views\"\n   In many cases, it may be\
    \ convenient to implement an Opt-In zone by\n   combining two separately maintained\
    \ \"views\" of a zone at request\n   time.  In this context, \"view\" refers to\
    \ a particular version of a\n   zone, not to any specific DNS implementation feature.\n\
    \   In this scenario, one view is the secure view, the other is the\n   insecure\
    \ (or legacy) view.  The secure view consists of an entirely\n   signed zone using\
    \ Opt-In tagged NSEC records.  The insecure view\n   contains no DNSSEC information.\
    \  It is helpful, although not\n   necessary, for the secure view to be a subset\
    \ (minus DNSSEC records)\n   of the insecure view.\n   In addition, the only RRsets\
    \ that may solely exist in the insecure\n   view are non-zone-apex NS RRsets.\
    \  That is, all non-NS RRsets (and\n   the zone apex NS RRset) MUST be signed\
    \ and in the secure view.\n   These two views may be combined at request time\
    \ to provide a virtual,\n   single Opt-In zone.  The following algorithm is used\
    \ when responding\n   to each query:\n      V_A is the secure view as described\
    \ above.\n      V_B is the insecure view as described above.\n      R_A is a response\
    \ generated from V_A, following standard DNSSEC.\n      R_B is a response generated\
    \ from V_B, following DNS resolution as\n      per RFC 1035 [1].\n      R_C is\
    \ the response generated by combining R_A with R_B, as\n      described below.\n\
    \      A query is DNSSEC-aware if it either has the DO bit [11] turned on\n  \
    \    or is for a DNSSEC-specific record type.\n   1.  If V_A is a subset of V_B\
    \ and the query is not DNSSEC-aware,\n       generate and return R_B, otherwise\n\
    \   2.  Generate R_A.\n   3.  If R_A's RCODE != NXDOMAIN, return R_A, otherwise\n\
    \   4.  Generate R_B and combine it with R_A to form R_C:\n          For each\
    \ section (ANSWER, AUTHORITY, ADDITIONAL), copy the\n          records from R_A\
    \ into R_B, EXCEPT the AUTHORITY section SOA\n          record, if R_B's RCODE\
    \ = NOERROR.\n   5.  Return R_C.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roy Arends\n   Nominet\n   Sandford Gate\n   Sandy Lane\
    \ West\n   Oxford  OX4 6LB\n   UNITED KINGDOM\n   Phone: +44 1865 332211\n   EMail:\
    \ roy@nominet.org.uk\n   Mark Kosters\n   VeriSign, Inc.\n   21355 Ridgetop Circle\n\
    \   Dulles, VA  20166\n   US\n   Phone: +1 703 948 3200\n   EMail: mkosters@verisign.com\n\
    \   URI:   http://www.verisignlabs.com\n   David Blacka\n   VeriSign, Inc.\n \
    \  21355 Ridgetop Circle\n   Dulles, VA  20166\n   US\n   Phone: +1 703 948 3200\n\
    \   EMail: davidb@verisign.com\n   URI:   http://www.verisignlabs.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
