- contents:
  - '         File Transfer Protocol HOST Command for Virtual Hosts

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The File Transfer Protocol, as defined in RFC 959, does not provide
    a\n   way for FTP clients and servers to differentiate between multiple DNS\n
    \  names that are registered for a single IP address.  This document\n   defines
    a new FTP command that provides a mechanism for FTP clients\n   and servers to
    identify individual virtual hosts on an FTP server.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7151.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Document Conventions ............................................3\n      2.1.
    Basic Tokens ...............................................3\n      2.2. Server
    Replies .............................................4\n   3. The HOST Command
    ................................................4\n      3.1. Syntax of the HOST
    Command .................................5\n      3.2. HOST Command Semantics
    .....................................7\n           3.2.1. REIN Command Semantics
    ..............................8\n           3.2.2. User-PI Usage of HOST ...............................9\n
    \          3.2.3. State Diagrams .....................................11\n      3.3.
    HOST Command Errors .......................................16\n      3.4. FEAT
    Response for HOST Command ............................17\n   4. Security Considerations
    ........................................17\n   5. IANA Considerations ............................................19\n
    \  6. References .....................................................19\n      6.1.
    Normative References ......................................19\n      6.2. Informative
    References ....................................20\n   Appendix A. Unworkable Alternatives
    ...............................21\n     A.1. Overloading the CWD Command ................................21\n
    \    A.2. Overloading the ACCT Command ...............................21\n     A.3.
    Overloading the USER Command ...............................22\n     A.4. Conclusion
    .................................................23\n   Appendix B. Acknowledgements
    ......................................23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   It is common on the Internet for many DNS names to resolve
    to a\n   single IP address.  This practice has introduced the concept of a\n   \"virtual
    host\", where a host appears to exist as an independent\n   entity but, in reality,
    shares its physical resources with one or\n   more similar hosts.\n   Such an
    arrangement presents some problems for FTP servers, because\n   an FTP server
    distinguishes incoming FTP connections by IP addresses\n   rather than DNS names.
    \ Therefore, all DNS names that share a common\n   IP address are handled by the
    same FTP server and share the same\n   Network Virtual File System (NVFS).\n   This
    means that different virtual hosts cannot offer different\n   virtual file systems
    to clients, nor can they offer different\n   authentication systems.  Any scheme
    to overcome this issue needs to\n   indicate not only the destination IP address
    but also the virtual\n   hostname that is associated with the desired virtual
    FTP server.\n   Typical user-FTP processes currently use hostnames to perform\n
    \  hostname-to-IP-address resolution and then ignore hostnames for the\n   rest
    of the FTP session; therefore, any mechanism to overcome this\n   issue would
    require modifications to the user protocol interpreter\n   (user-PI) and server
    protocol interpreter (server-PI).\n   It should be noted that this same problem
    existed for HTTP/1.0 as\n   defined in [RFC1945] and was resolved in HTTP/1.1
    as defined in\n   [RFC2616] through the addition of the Host request header field.
    \ The\n   goal of this document is to bring a similar level of feature parity\n
    \  to FTP by introducing a new HOST command that allows user-FTP\n   processes
    to specify which virtual host to connect to for a\n   server-FTP process that
    is handling requests for multiple virtual\n   hosts on a single IP address.\n"
  title: 1.  Introduction
- contents:
  - "2.  Document Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  In examples, \"C>\" and \"S>\" indicate lines sent by the client and\n   server,
    respectively.\n   This document also uses notation defined in [RFC959] and [RFC1123].\n
    \  In particular, the terms \"reply\", \"user\", \"NVFS\", \"NVT\", \"file\",\n
    \  \"pathname\", \"FTP commands\", \"DTP\", \"user-FTP process\", \"user-PI\",\n
    \  \"user-DTP\", \"server-FTP process\", \"server-PI\", \"server-DTP\", \"mode\",\n
    \  \"type\", \"control connection\", \"data connection\", and \"ASCII\", are all\n
    \  used here as defined there.\n   The required syntax is defined using the Augmented
    BNF defined in\n   [RFC5234].  Some general ABNF definitions are required throughout
    the\n   document; they will be defined in subsequent sections.\n   With the increased
    use of virtualization technologies, there may be\n   several possible definitions
    for the term \"virtual host\".  This\n   document follows the definition from
    Section 4.1.14 of [RFC3875],\n   where several virtual hosts share the same IP
    address, and hostnames\n   are used by the server-FTP process to route user-PI
    sessions to the\n   appropriate virtual host.\n"
  - contents:
    - "2.1.  Basic Tokens\n   This document imports the core definitions given in
      Appendix B of\n   [RFC5234].  There, definitions will be found for basic ABNF
      elements\n   like ALPHA, DIGIT, SP, etc.  To that, the following term is added
      for\n   use in this document.\n      TCHAR = VCHAR / SP / HTAB    ; visible
      plus white space\n   The VCHAR (from [RFC5234]) and TCHAR rules give basic character
      types\n   from varying subsets of the ASCII character set for use in various\n
      \  commands and responses.\n   Note that in ABNF, string literals are case insensitive.
      \ That\n   convention is preserved in this document and implies that FTP\n   commands
      and parameters that are added by this specification have\n   values that can
      be represented in any case.  That is, \"HOST\" is the\n   same as \"host\",
      \"Host\", \"HoSt\", etc.  Similarly, because domain names\n   are defined to
      be case insensitive, \"ftp.example.com\" is the same as\n   \"Ftp.Example.Com\",
      \"fTp.eXample.cOm\", etc.\n"
    title: 2.1.  Basic Tokens
  - contents:
    - "2.2.  Server Replies\n   Section 4.2 of [RFC959] defines the format and meaning
      of replies by\n   the server-PI to FTP commands from the user-PI.  Those reply\n
      \  conventions are used here without change.\n      error-response = error-code
      SP *TCHAR CRLF\n      error-code     = (\"4\" / \"5\") 2DIGIT\n   Implementers
      should note that the ABNF syntax used in this document\n   and other FTP-related
      documents (but that was not used in [RFC959])\n   sometimes shows replies using
      the one-line format.  Unless otherwise\n   explicitly stated, multi-line responses
      are also permitted.\n   Implementers should assume that, unless stated to the
      contrary, any\n   reply to any FTP command (including QUIT) can be of the multi-line\n
      \  format described in [RFC959].\n   Throughout this document, replies will
      be identified by the three-\n   digit code that is their first element.  Thus,
      the term \"500 reply\"\n   means a reply from the server-PI using the three-digit
      code \"500\".\n"
    title: 2.2.  Server Replies
  title: 2.  Document Conventions
- contents:
  - "3.  The HOST Command\n   A new command, \"HOST\", is added to the FTP command
    set in order to\n   allow a server-FTP process to determine to which of possibly
    many\n   virtual hosts the client wishes to connect.  If a HOST command is\n   sent,
    it MUST be issued before the user is authenticated, as this\n   will allow the
    authentication scheme and set of authorized users to\n   be dependent upon the
    virtual host that is chosen.\n   Server-FTP processes MUST treat a situation in
    which the HOST command\n   is issued more than once before the user has been authenticated
    as\n   though only the last HOST command had been sent, and return the\n   appropriate
    reply for the last HOST command.  Server-FTP processes\n   MUST treat a situation
    in which the HOST command is issued after the\n   user has been authenticated
    as an erroneous sequence of commands and\n   return a 503 reply.\n   Servers should
    note that the response to the HOST command is a\n   sensible time to send their
    \"welcome\" message.  This allows the\n   message to be personalized for any virtual
    hosts that are supported.\n   It also allows the client to determine, via the
    FEAT response, the\n   languages or representations supported by the server and
    select an\n   appropriate one via the LANG command.  See [RFC2640] for more\n
    \  information.\n   It should be noted that user-PI implementations that were
    created\n   before the introduction of the HOST command will not support this
    new\n   command.  A similar problem existed with the introduction of the Host\n
    \  header for HTTP in [RFC2616], and HTTP server implementations had to\n   determine
    how best to accommodate HTTP requests from down-level\n   clients that did not
    support the Host header.  With this in mind,\n   server-FTP processes will need
    to determine how best to accommodate\n   FTP requests from down-level FTP clients
    that do not support the HOST\n   command, but those considerations are outside
    the scope of this\n   document.\n"
  - contents:
    - "3.1.  Syntax of the HOST Command\n   The HOST command is defined as follows.
      \ Note that [RFC3986] remains\n   the normative specification for the syntactic
      form of IPv4 and IPv6\n   address literals, in order to ensure identical presentation
      in 'ftp'\n   URI hostname parts and in the protocol element specified here.\n
      \     host-command  = \"HOST\" SP hostname CRLF\n      hostname      = domain
      / IP-literal\n      domain        = sub-domain *(\".\" sub-domain)\n      sub-domain
      \   = let-dig [ldh-str]\n      let-dig       = ALPHA / DIGIT\n      ldh-str
      \      = *( ALPHA / DIGIT / \"-\" ) let-dig\n      IP-literal    = ( \"[\" IPv6address
      \"]\" ) / IPv4address\n      IPv6address   = <see [RFC3986] Section 3.2.2>\n
      \     IPv4address   = <see [RFC3986] Section 3.2.2>\n      host-response = host-ok
      / error-response\n      host-ok       = \"220\" [ SP *TCHAR ] CRLF\n   The \"hostname\"
      rule is a restricted form of the \"host\" rule specified\n   in [RFC3986].  Details
      of the additional restrictions imposed by this\n   document are given in the
      discussion of the syntax that occurs later\n   in this section; they aim at
      simplifying implementations by only\n   allowing what currently is specified
      precisely and in use on the\n   Internet.\n   As with all FTP commands, the
      \"HOST\" command word is case independent\n   and can be specified in any character
      case desired.\n   The \"hostname\" (given as a parameter) specifies the virtual
      host to\n   which access is desired.  This SHOULD be the same hostname that
      was\n   used to obtain the IP address to which the FTP control connection was\n
      \  made, after any client conversions have been completed that convert\n   an
      abbreviated or local alias to a complete (fully qualified) domain\n   name,
      but before resolving a DNS alias (owner of a CNAME resource\n   record) to its
      canonical name.\n   Internationalization of domain names is only supported through
      the\n   use of Internationalized Domain Names for Applications (IDNA)\n   \"A-labels\"
      for <sub-domain> as described in [RFC5890].  For example,\n   the following
      HOST command specifies an internationalized\n   domain name:\n      HOST xn--e1afmkfd.com\n
      \  If the user was given an IPv4 or IPv6 literal address, and\n   consequently
      was not required to derive the literal address from a\n   hostname, the client
      MAY send the HOST command with the IPv4 or IPv6\n   literal address as specified
      to it.  While it may seem\n   counterintuitive to specify a literal address
      by using the HOST\n   command after the client has already connected to the
      server using a\n   literal address, this should be expected behavior because
      a user-FTP\n   process should not be required to differentiate between a fully\n
      \  qualified domain name and an IPv4 or IPv6 network literal address.\n   That
      being said, if the IPv4 or IPv6 literal address specified by the\n   client
      does not match the literal address for the server, the server\n   MUST respond
      with a 504 reply to indicate that the IPv4 or IPv6\n   literal address is not
      valid.\n   When the hostname parameter contains a literal address, square\n
      \  brackets are expected to disambiguate IPv6 address syntax from port\n   numbers
      syntax.  Therefore, if the literal address is an IPv6\n   address, the IPv6
      address is required to be enclosed in square\n   brackets (after eliminating
      any syntax that might also -- but is not\n   required to -- be enclosed in brackets,
      and from which the server\n   deduced that a literal address had been specified).
      \ For example, the\n   following examples MAY be sent if the client had been
      instructed to\n   connect to \"192.0.2.1\", \"2001:db8::c000:201\", or \"::192.0.2.1\",\n
      \  respectively, and IPv6 syntax is preferred:\n      HOST 192.0.2.1\n      HOST
      [2001:db8::c000:201]\n      HOST [::192.0.2.1]\n   The client MUST NOT send
      the port number as part of the HOST command,\n   even when the client has been
      instructed to connect to a non-standard\n   port.  The reason for this requirement
      is that the user-PI will have\n   established a connection to the server-PI
      before the HOST command is\n   sent; therefore, specifying a different port
      with the HOST command\n   has no meaning.  For example, the server-PI MUST respond
      with a 501\n   reply if the client sends a HOST command with syntax like either
      of\n   the following examples:\n      HOST 192.0.2.1:2112\n      HOST [2001:db8::c000:201]:2112\n
      \  The hostname parameter is otherwise to be treated as a fully\n   qualified
      domain name or relative name as those terms are defined in\n   Section 3.1 of
      [RFC1034].  This implies that the name is to be\n   treated as a case-independent
      string, meaning that uppercase ASCII\n   characters are to be treated as equivalent
      to their corresponding\n   lowercase ASCII characters but otherwise preserved
      as given.  It also\n   implies some limits on the length of the parameter and
      of the\n   components that create its internal structure.  Those limits are
      not\n   altered in any way here.\n   Neither [RFC1034] nor [RFC1035] imposes
      any other restrictions upon\n   what kinds of names can be stored in the DNS.
      \ This specification,\n   however, only allows the use of names that can be
      inferred from the\n   ABNF grammar given for the \"hostname\".  Similarly, this
      specification\n   restricts address literals to the IPv4 and IPv6 address families
      well\n   established on the Internet.\n"
    title: 3.1.  Syntax of the HOST Command
  - contents:
    - "3.2.  HOST Command Semantics\n   Upon receiving the HOST command, before authenticating
      the user-PI, a\n   server-FTP process SHOULD validate that the hostname given
      represents\n   a valid virtual host for that server and, if it is valid, establish\n
      \  the appropriate environment for that virtual host.  The resultant\n   actions
      needed to create that environment are not specified here and\n   may range from
      doing nothing at all to performing a simple change of\n   working directory,
      changing authentication schemes and/or username\n   and password lists, or making
      much more elaborate state changes --\n   such as creating isolated environments
      for each FTP session.\n   The 220 reply code for the HOST command is the same
      as the code that\n   is used in the initial \"welcome\" message that is sent
      after the\n   connection is established.\n   If the hostname specified would
      normally be acceptable, but is\n   temporarily unavailable, the server-FTP process
      SHOULD respond to the\n   HOST command with a 421 reply and close the connection.\n
      \     Example:\n      The server-FTP process is shutting down, so the server-FTP
      process\n      responds to the HOST command with a 421 reply and closes the\n
      \     connection.  In this scenario, the 421 reply informs the client it\n      can
      retry at another time.\n   If the hostname specified is unknown at the server,
      or if the server\n   is otherwise unwilling to treat the particular connection
      as a\n   connection to the hostname specified, the server SHOULD respond with\n
      \  a 504 reply.\n      Examples:\n      The particular virtual host that was
      specified by the HOST command\n      is disabled at the server.  The server
      responds with a 504 reply\n      and keeps the connection open in order to allow
      the user-PI an\n      opportunity to specify another virtual host with a subsequent
      HOST\n      command.\n      Alternatively, the server-FTP process might choose
      to route all\n      connections with unknown hostnames to a different virtual
      host so\n      that no connection attempts will result in failed connections.\n
      \     This design would be implementation specific and outside the scope\n      of
      this specification.\n"
    - contents:
      - "3.2.1.  REIN Command Semantics\n   As specified in [RFC959], the REIN command
        returns the state of the\n   connection to what it was immediately after the
        transport connection\n   was opened.  This specification makes no changes
        to that behavior.\n   The effect of a HOST command MUST be reset if a REIN
        command is\n   performed, and a new HOST command MUST be issued afterwards
        in order\n   to connect to a virtual host.\n"
      title: 3.2.1.  REIN Command Semantics
    - contents:
      - "3.2.2.  User-PI Usage of HOST\n   A user-PI MUST send the HOST command after
        opening the transport\n   connection, or after any REIN command, before attempting
        to\n   authenticate the user with the USER command.  The following example\n
        \  illustrates what a typical login sequence might look like when the\n   HOST
        command is used:\n      C> HOST ftp.example.com\n      S> 220 Host accepted\n
        \     C> USER foo\n      S> 331 Password required\n      C> PASS bar\n      S>
        230 User logged in\n   If a user-PI sends an additional HOST command before
        attempting to\n   authenticate the user, a server-FTP process MUST treat the
        additional\n   HOST command as though a previous HOST command was not sent
        and\n   return the appropriate reply for the new HOST command.  For example,\n
        \  if a user specifies the wrong virtual hostname by mistake, sending a\n
        \  subsequent HOST command will rectify the error.  The following\n   example
        illustrates what the login sequence might look like when the\n   HOST command
        is sent twice before a user has been authenticated:\n      C> HOST foo.example.com\n
        \     S> 220 Host accepted\n      C> HOST bar.example.com\n      S> 220 Host
        accepted\n      C> USER foo\n      S> 331 Password required\n      C> PASS
        bar\n      S> 230 User logged in\n   The HOST command can be used in combination
        with the ACCT command to\n   differentiate between a user's various accounts
        on a specific virtual\n   host.  In this scenario, the user-PI sends a HOST
        command, which the\n   server-PI uses to route activity to the correct virtual
        host; the\n   user-PI sends credentials using the USER and PASS commands,
        which the\n   server-PI validates; then, the user-PI sends an ACCT command
        to\n   specify any additional account information for the server-PI\n   implementation.
        \ The following example illustrates a sequential\n   series of client commands
        that specify both a HOST and ACCT, with the\n   server responses omitted for
        brevity:\n      C> HOST ftp.example.com\n      C> USER foo\n      C> PASS
        bar\n      C> ACCT project1\n   This is also true when the HOST command is
        used with the AUTH and\n   ADAT commands that are discussed in [RFC2228] and
        [RFC4217].  In this\n   scenario, the user-PI sends a HOST command, which
        the server-PI uses\n   to route activity to the correct virtual host; then,
        the user-PI uses\n   the AUTH and ADAT commands to negotiate the security
        mechanism and\n   relevant authentication token(s) with the server-PI; then,
        the\n   user-PI sends user credentials using the USER and PASS commands,\n
        \  which the server-PI validates, after which the user-PI MAY send an\n   ACCT
        command to specify any additional account information for the\n   server-PI
        implementation.  The following example illustrates a\n   sequential series
        of client commands that specify both HOST and ACCT\n   commands when used
        in conjunction with the security commands that are\n   discussed in [RFC2228]
        and [RFC4217], with the server responses\n   omitted for brevity:\n      C>
        HOST ftp.example.com\n      C> AUTH <mechanism-name>\n      C> ADAT <base64data>\n
        \     C> USER foo\n      C> PASS bar\n      C> ACCT project1\n   An exception
        to the above scenario would be when a user-PI is\n   providing the hostname
        in the \"server_name\" extension of a Transport\n   Layer Security (TLS) extended
        client hello as discussed in [RFC6066].\n   When the user-PI specifies the
        hostname in the \"server_name\"\n   extension of a TLS extended client hello,
        the server-PI MUST verify\n   that the hostname in the HOST command matches
        the value of the\n   \"server_name\" extension.  The following example illustrates
        a\n   sequential series of client commands that specify the HOST command\n
        \  when used in conjunction with the TLS extensions that are discussed\n   in
        [RFC6066], with the server responses omitted for brevity:\n      C> AUTH TLS\n
        \     C> HOST ftp.example.com\n      C> USER foo\n      C> PASS bar\n   Additional
        security information about using the HOST command with the\n   security extensions
        that are discussed in [RFC2228], [RFC4217], and\n   [RFC6066] is provided
        in Section 4 of this document.\n"
      title: 3.2.2.  User-PI Usage of HOST
    - contents:
      - "3.2.3.  State Diagrams\n   The state diagrams in this section illustrate
        typical sequences for\n   command and reply interchange between the user-PI
        and server-PI.\n   These diagrams are modeled on the similar diagrams in Section
        6 of\n   [RFC959].\n   In each diagram, the (B) \"begin\" state is assumed
        to occur after the\n   transport connection has opened or after a REIN command
        has\n   succeeded.  Other commands (such as FEAT [RFC2389]) that require no\n
        \  authentication may have intervened.\n   Additionally, a three-digit reply
        indicates a precise server reply\n   code.  A single digit on a reply path
        indicates any server reply that\n   begins with that digit, except where a
        precise server reply code is\n   defined on another path.  For example, a
        single digit \"5\" will apply\n   to \"500\", \"501\", \"502\", etc., when
        those reply codes are not\n   expressly defined in the diagram.  For each
        command, there are three\n   possible outcomes: success (S), failure (F),
        or error (E).  In the\n   state diagrams below, we use the symbol \"B\" for
        \"begin\" and the\n   symbol \"W\" for \"wait for reply\".\n   For each of
        these diagrams, without any state transitions being\n   shown, a REIN command
        will return the diagram from any wait state to\n   the (B) \"begin\" state.\n
        \  The state diagram in Figure 1 shows a typical sequence of flow of\n   control
        when HOST is used with USER and PASS to log in to a\n   particular FTP virtual
        host.\n              +---+   HOST    +---+ 1,3,5\n              | B |---------->|
        W |-----------------\n              +---+           +---+                 |\n
        \                              | |                  |\n                     2,500,502
        | | 4,501,503,504    |\n                 --------------   -----------       |\n
        \               |                            |      V\n                V                   1
        \       |    +---+\n              +---+   USER    +---+-------------->| E
        |\n              |   |---------->| W | 2        |    +---+\n              +---+
        \          +---+-------   |      ^\n                               | |        |
        \ |      |\n                             3 | | 4,5    |  |      |\n                 --------------
        \  -----   |  |      |\n                |                      |  |  |      |\n
        \               |                -------------------\n                |              1|
        \     |  |  |\n                V               |      |   ------>+---+\n              +---+
        \  PASS    +---+ 2  |     |    | S |\n              |   |---------->| W |-------------->+---+\n
        \             +---+           +---+    |     |\n                                |
        \     |     |\n                                |4,5   |     |\n                                |
        \     |      --->+---+\n                                |       --------->|
        F |\n                                 ---------------->+---+\n            Figure
        1: Typical Login Sequence with HOST Command\n   After a user has logged in,
        an additional account may be required by\n   the server and specified by the
        client by using the ACCT command.\n   With this in mind, the state diagram
        in Figure 2 shows a typical\n   sequence of flow of control when HOST is used
        with USER and PASS to\n   log in to an FTP virtual host and ACCT is used to
        specify an account.\n              +---+   HOST    +---+ 1,3,5\n              |
        B |---------->| W |-----------------\n              +---+           +---+
        \                |\n                               | |                  |\n
        \                    2,500,502 | | 4,501,503,504    |\n                 --------------
        \  -------------     |\n                |                              |    |\n
        \               V                   1          |    V\n              +---+
        \  USER    +---+-------------->+---+\n              |   |---------->| W |
        2       ----->| E |\n              +---+           +---+------  |  --->+---+\n
        \                              | |       | | | |\n                             3
        | | 4,5   | | | |\n                 --------------   -----  | | | |\n                |
        \                     | | | | |\n                |                      |
        | | | |\n                |                ----------  | |\n                |
        \             1|      | |   | |\n                V               |      |
        |   | |\n              +---+   PASS    +---+ 2  |  ------->+---+\n              |
        \  |---------->| W |-------------->| S |\n              +---+           +---+
        \  ----------->+---+\n                               | |   | |     | |\n                             3
        | |4,5| |     | |\n                 --------------   --------   |  ----\n
        \               |                    | |  |  |      |\n                |                    |
        |  |  |      |\n                |                ------------       |\n                |
        \           1,3|    | |  |         |\n                V               |   2|
        |  |         V\n              +---+   ACCT    +---+--  |   ------>+---+\n
        \             |   |---------->| W | 4,5 --------->| F |\n              +---+
        \          +---+-------------->+---+\n           Figure 2: Login Sequence
        with HOST and ACCT Commands\n   The state diagram in Figure 3 shows a typical
        sequence of flow of\n   control when HOST is used with the AUTH and ADAT commands
        that are\n   discussed in [RFC2228].  (NOTE: Section 4 provides additional\n
        \  information about using the HOST command with TLS.)\n              +---+
        \  HOST    +---+ 1,3,5\n              | B |---------->| W |------------------\n
        \             +---+           +---+                  |\n                               |
        |                   |\n                     2,500,502 | | 4,501,503,504     |\n
        \                --------------   -------------      |\n                |
        \                             |     |\n                V                              |
        \    |\n              +---+   AUTH    +---+ 4,5        |     |\n              |
        \  |---------->| W |----------->|     |\n              +---+           +---+
        \           |     |\n                           334 | |             |     |\n
        \                --------------  |             |     |\n                |
        \           234 |             |     |\n                |    ------------              |
        \    |\n                V   |               4,5        |     |\n              +---+
        | ADAT    +---+----------->|     |\n              |   |---------->| W | 335
        \       |     |\n              +---+ |         +---+-----       |     |\n
        \               ^   |           |       |      |     |\n                |
        \  |           |       |      |     |\n                 -----------------------
        \      |     |\n                    |           |              |     |\n                ----
        \       235 |              |     |\n               |  --------------               |
        \    |\n               | |                             |     V\n               V
        V                  1          |   +---+\n              +---+   USER    +---+--------------->|
        E |\n              |   |---------->| W | 2          |   +---+\n              +---+
        \          +---+-------     |     ^\n                               | |        |
        \   |     |\n                             3 | | 4,5    |    |     |\n                 --------------
        \  ------  |    |     |\n                |                       | |    |
        \    |\n                |                --------------------\n                |
        \             1|       | |    |\n                V               |       |
        \ ------->+---+\n              +---+   PASS    +---+ 2   |      |   | S |\n
        \             |   |---------->| W |--------------->+---+\n              +---+
        \          +---+     |      |\n                                |       |      |\n
        \                               |4,5    |      |\n                                |
        \      |       -->+---+\n                                |        --------->|
        F |\n                                 ----------------->+---+\n         Figure
        3: Login Sequence with HOST and AUTH/ADAT Commands\n   After a user has logged
        in with the security commands that are\n   discussed in [RFC2228], an additional
        account may be required by the\n   server and specified by the client by using
        the ACCT command.  The\n   state diagram in Figure 4 shows a typical sequence
        of flow of control\n   when HOST is used with the AUTH and ADAT commands to
        log in to an FTP\n   virtual host and ACCT is used to specify an account.\n
        \             +---+   HOST    +---+ 1,3,5\n              | B |---------->|
        W |------------------\n              +---+           +---+                  |\n
        \                              | |                   |\n                     2,500,502
        | | 4,501,503,504     |\n                +--------------   --------------
        \    |\n                |                               |    |\n                V
        \                              |    |\n              +---+   AUTH    +---+
        4,5         |    |\n              |   |---------->| W |------------>|    |\n
        \             +---+           +---+             |    |\n                           334
        | |              |    |\n                 --------------  |              |
        \   |\n                |            234 |              |    |\n                |
        \   ------------               |    |\n                V   |               4,5
        \        |    |\n              +---+ | ADAT    +---+------------>|    |\n
        \             |   |---------->| W | 335         |    |\n              +---+
        |         +---+-----        |    |\n                ^   |           |       |
        \      |    |\n                |   |           |       |       |    |\n                 -----------------------
        \       |    |\n                    |           |               |    |\n                ----
        \        235|               |    |\n               |  --------------                |
        \   |\n               | |                              |    |\n               V
        V                  1           |    V\n              +---+   USER    +---+--------------->+---+\n
        \             |   |---------->| W | 2        ----->| E |\n              +---+
        \          +---+-------  |  --->+---+\n                               | |
        \       | | | |\n                             3 | | 4,5    | | | |\n                 --------------
        \  ------  | | | |\n                |                       | | | | |\n                |
        \               -----------  | |\n                |              1|       |
        |   | |\n                V               |       | |   | |\n              +---+
        \  PASS    +---+ 2   |  ------->+---+\n              |   |---------->| W |--------------->|
        S |\n              +---+           +---+   ------------>+---+\n                               |
        |   |  |     | |\n                             3 | |4,5|  |     | |\n                 --------------
        \  ---------   |  ----\n                |                    |  |  |  |      |\n
        \               |                -------------       |\n                |
        \           1,3|    |  |  |         |\n                V               |   2|
        \ |  |         V\n              +---+   ACCT    +---+--   |   ------>+---+\n
        \             |   |---------->| W | 4,5  --------->| F |\n              +---+
        \          +---+--------------->+---+\n      Figure 4: Login Sequence with
        HOST and AUTH/ADAT/ACCT Commands\n"
      title: 3.2.3.  State Diagrams
    title: 3.2.  HOST Command Semantics
  - contents:
    - "3.3.  HOST Command Errors\n   The server-PI SHOULD return a 500 or 502 reply
      if the HOST command is\n   unrecognized or unimplemented, as specified in [RFC959].
      \ For\n   example, a server-PI that predates or otherwise does not conform to\n
      \  this specification would be expected to return a 500 or 502 reply.\n   As
      discussed in Section 3 of this document, if a HOST command is sent\n   after
      a user has been authenticated, the server MUST treat the\n   situation as an
      invalid sequence of commands and return a 503 reply.\n   A 501 reply SHOULD
      be sent if the hostname given is syntactically\n   invalid, and a 504 reply
      SHOULD be sent if a syntactically valid\n   hostname is not a valid virtual
      hostname for the server.  In all such\n   cases, the server-FTP process MUST
      do one of the following:\n   a.  Ignore the HOST command and act as if a HOST
      command had not been\n       sent.  A user-FTP process MAY then send a subsequent
      HOST command\n       with a different hostname.\n   b.  Close the connection.\n
      \  A user-PI receiving a 500 or 502 reply to a HOST command SHOULD\n   assume
      that the server-PI does not implement virtual servers by using\n   the HOST
      command.  The user-PI MAY then proceed to log in as if the\n   HOST command
      had not been sent.\n   A user-PI receiving an error reply that is different
      from the errors\n   that have been described here SHOULD assume that the virtual
      HOST is\n   unavailable and terminate communications.\n   A server-PI that receives
      a USER command to begin the authentication\n   sequence without having received
      a HOST command SHOULD NOT reject the\n   USER command.  Clients that conform
      to earlier FTP specifications do\n   not send HOST commands.  In this case,
      the server MAY act as if some\n   default virtual host had been explicitly selected,
      or the server MAY\n   enter an environment that is different from that of any
      supported\n   virtual hosts, perhaps one in which a union of all available accounts\n
      \  exists and that presents an NVFS that appears to contain\n   subdirectories
      that contain the NVFS for all supported virtual hosts.\n"
    title: 3.3.  HOST Command Errors
  - contents:
    - "3.4.  FEAT Response for HOST Command\n   When replying to the FEAT command
      [RFC2389], a server-FTP process\n   that supports the HOST command MUST include
      a line containing the\n   single word \"HOST\".  This word is case insensitive,
      but it SHOULD be\n   sent in upper case so as to maximize interoperability with
      disparate\n   implementations.  That is, the response SHOULD be:\n      C> FEAT\n
      \     S> 211- <any descriptive text>\n      S>  ...\n      S>  HOST\n      S>
      \ ...\n      S> 211 End\n   The ellipses indicate placeholders where other features
      may be\n   included but are not required.  The one-space indentation of the\n
      \  feature lines is mandatory [RFC2389].\n"
    title: 3.4.  FEAT Response for HOST Command
  title: 3.  The HOST Command
- contents:
  - "4.  Security Considerations\n   As discussed in Section 3 of this document, a
    server implementation\n   MUST treat an additional HOST command that was sent
    before a user has\n   been authenticated as though a previous HOST command was
    not sent.\n   In this situation, the server implementation MUST reset the\n   authentication
    environment, as that would allow for segregation\n   between the security environments
    for each virtual host on an FTP\n   server.  The implementation details for security
    environments may\n   vary greatly based on the requirements of each server implementation\n
    \  and operating system, and those details are outside the scope of the\n   protocol
    itself.  For example, a virtual host \"foo.example.com\" on an\n   FTP server
    might use a specific username and password list, while the\n   virtual host \"bar.example.com\"
    on the same FTP server might use a\n   different username and password list.  In
    such a scenario, resetting\n   the security environment is necessary for the virtual
    servers to\n   appear to behave independently from a client perspective, while
    the\n   actual server implementation details are irrelevant at the protocol\n
    \  level.\n   Section 15.1.1 of [RFC4217] discusses the use of X.509 certificates\n
    \  for server authentication.  Taking the information from that document\n   into
    account, when securing FTP sessions with the security mechanisms\n   that are
    defined in [RFC4217], client implementations SHOULD verify\n   that the hostname
    that they specify in the parameter for the HOST\n   command matches the identity
    that is specified in the server's X.509\n   certificate in order to prevent man-in-the-middle
    attacks.\n   When the HOST command is used in combination with the FTP security\n
    \  extensions that were introduced in [RFC2228] and [RFC4217], the HOST\n   command
    SHOULD precede the security handshake when the user-PI is not\n   providing the
    \"server_name\" in the extended client hello as defined\n   in [RFC6066].  This
    allows both user-FTP and server-FTP processes to\n   map an FTP HOST with the
    correct server name in the server's\n   certificate.  If the HOST command is sent
    after the security\n   handshake, then mapping an FTP HOST to the correct security\n
    \  certificate will not take place before the secure session is\n   established.\n
    \  For example, if a server-FTP process has multiple virtual hosts\n   defined
    and no hostname has been sent from a user-FTP process, the\n   server-FTP process
    will be unable to route the connection to the\n   correct virtual host when the
    connection is established.  In this\n   situation, the server-FTP process will
    be forced to choose a virtual\n   host that will respond.  When the user-PI attempts
    to negotiate a\n   secure connection, the virtual host to which the connection
    was\n   routed will respond with its server certificate during the security\n
    \  handshake.  If the virtual host that was chosen by the server-FTP\n   process
    does not match the virtual host to which the user-FTP process\n   had intended
    to connect, the user-PI will be unable to verify the\n   server's identity as
    presented in the server certificate message.\n   However, if the user-PI is providing
    the \"server_name\" in the\n   extended client hello as defined in Section 3 of
    [RFC6066], the\n   user-PI MAY provide the HOST command after the security handshake\n
    \  because the server will be able to route the connection to the\n   correct
    virtual host based on the contents of the \"server_name\"\n   extension and the
    client will be able to verify the server's identity\n   as presented in the corresponding
    server certificate message.\n   However, the server-PI MUST verify that the name
    in the HOST command\n   matches the \"server_name\" that is provided in the extended
    client\n   hello.\n   In general, client implementations SHOULD protect user credentials
    by\n   using the FTP security extensions that were introduced in [RFC2228]\n   and
    [RFC4217]; a detailed discussion for securing FTP sessions can be\n   found in
    those documents, and a general discussion of security issues\n   related to FTP
    can be found in [RFC2577].\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   IANA has registered the following FTP extension according
    to the\n   procedure established by [RFC5797]:\n   +------+---------+-------------+------+------+----------------------+\n
    \  | cmd  | FEAT    | description | type | conf | RFC#s/References and |\n   |
    \     | Code    |             |      |      | Notes                |\n   +------+---------+-------------+------+------+----------------------+\n
    \  | HOST | HOST    | Hostname    | a    | o    | RFC 7151             |\n   +------+---------+-------------+------+------+----------------------+\n"
  title: 5.  IANA Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC959]   Postel, J. and J. Reynolds, \"File
      Transfer Protocol\n              (FTP)\", STD 9, RFC 959, October 1985.\n   [RFC1034]
      \ Mockapetris, P., \"Domain Names - Concepts and Facilities\",\n              STD
      13, RFC 1034, November 1987.\n   [RFC1035]  Mockapetris, P., \"Domain Names
      - Implementation and\n              Specification\", STD 13, RFC 1035, November
      1987.\n   [RFC1123]  Braden, R., \"Requirements for Internet Hosts - Application\n
      \             and Support\", STD 3, RFC 1123, October 1989.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC2228]  Horowitz, M. and S. Lunt, \"FTP
      Security Extensions\", RFC\n              2228, October 1997.\n   [RFC2389]
      \ Hethmon, P. and R. Elz, \"Feature negotiation mechanism for\n              the
      File Transfer Protocol\", RFC 2389, August 1998.\n   [RFC2640]  Curtin, B.,
      \"Internationalization of the File Transfer\n              Protocol\", RFC 2640,
      July 1999.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n
      \             Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n              3986,
      January 2005.\n   [RFC4217]  Ford-Hutchinson, P., \"Securing FTP with TLS\",
      RFC 4217,\n              October 2005.\n   [RFC5234]  Crocker, D. and P. Overell,
      \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC
      5234, January 2008.\n   [RFC5890]  Klensin, J., \"Internationalized Domain Names
      for\n              Applications (IDNA): Definitions and Document Framework\",\n
      \             RFC 5890, August 2010.\n   [RFC6066]  Eastlake, D., \"Transport
      Layer Security (TLS) Extensions:\n              Extension Definitions\", RFC
      6066, January 2011.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC1945]  Berners-Lee, T., Fielding, R.,
      and H. Nielsen, \"Hypertext\n              Transfer Protocol -- HTTP/1.0\",
      RFC 1945, May 1996.\n   [RFC2577]  Allman, M. and S. Ostermann, \"FTP Security\n
      \             Considerations\", RFC 2577, May 1999.\n   [RFC2616]  Fielding,
      R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach,
      P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\",
      RFC 2616, June 1999.\n   [RFC3875]  Robinson, D. and K. Coar, \"The Common Gateway
      Interface\n              (CGI) Version 1.1\", RFC 3875, October 2004.\n   [RFC5797]
      \ Klensin, J. and A. Hoenes, \"FTP Command and Extension\n              Registry\",
      RFC 5797, March 2010.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Unworkable Alternatives\n   Due to the level of scope for adding
    a new command to FTP, a brief\n   discussion of suggested alternatives to a HOST
    command and their\n   respective limitations is warranted.  The suggested alternatives
    that\n   are discussed in this appendix have been proposed in the past, but\n
    \  each of these ideas was deemed insufficient for the reasons listed\n   within
    each section of this appendix.\n"
  - contents:
    - "A.1.  Overloading the CWD Command\n   One suggested method to emulate a form
      of virtual hosts would be for\n   the client to simply send a CWD command after
      connecting, using the\n   virtual hostname as the argument to the CWD command.
      \ This would\n   allow the server-FTP process to implement the file stores of
      the\n   virtual hosts as subdirectories in its NVFS.  This suggestion is\n   simple
      in concept, and most server-FTP implementations support this\n   without requiring
      any code changes.  While this method is simple to\n   describe and implement,
      it suffers from several drawbacks:\n   a.  The CWD command is available only
      after the user-PI has\n       authenticated itself to the server-FTP process.
      \ Thus, all\n       virtual hosts would be required to share a common authentication\n
      \      scheme if they used this method.\n   b.  To make the virtual host truly
      transparent, either the server-FTP\n       process needs to be modified to include
      information that shows\n       the special nature of this first CWD command
      (negating most of\n       the advantage of this scheme), or all users must see
      the same\n       identical NVFS view upon connecting (they must connect in the\n
      \      same initial directory), or the NVFS must implement the full set\n       of
      virtual host directories at each possible initial directory\n       for any
      possible user.\n   c.  Unless the server is specially modified, a user connecting
      this\n       way to a virtual host would be able to easily move to any other\n
      \      virtual host supported at the same server-FTP process, exposing\n       the
      nature of the virtual host.\n"
    title: A.1.  Overloading the CWD Command
  - contents:
    - "A.2.  Overloading the ACCT Command\n   Another suggested method would be to
      simply overload the ACCT command\n   for FTP virtual hosts, but this proposal
      is unacceptable for several\n   reasons with regard to when the ACCT command
      is sent during the\n   request flow.  Sections 5.4 and 6 of [RFC959] document
      the request\n   flow for a login sequence as USER -> PASS -> ACCT.  This flow
      of\n   commands may be acceptable when you are considering a single user\n   having
      multiple accounts on an FTP server, but it fails to\n   differentiate between
      virtual hosts when you consider the following\n   two issues:\n   a.  The first
      problem with overloading the ACCT command is\n       certificate negotiation
      when using the FTP security extensions\n       that are documented in [RFC2228]
      and [RFC4217].  In order to\n       safeguard user credentials, negotiation
      of the security mechanism\n       and certificate must occur before login credentials
      are sent by\n       the client.  The problem with using the ACCT command in
      this\n       scenario is that there is no way of ensuring that the certificate\n
      \      matches the correct virtual host before the user credentials are\n       sent.\n
      \  b.  The second problem with overloading the ACCT command is how user\n       credentials
      are implemented for FTP virtual hosts.  FTP server\n       implementations may
      allow the use of custom user credentials on a\n       per-virtual-host basis.
      \ For example, in one particular\n       implementation the virtual host negotiation
      occurs, and then the\n       user credentials are looked up using the account
      mechanism that\n       is specific to that virtual host.  So once again the
      virtual host\n       negotiation must take place before the user credentials
      are sent.\n"
    title: A.2.  Overloading the ACCT Command
  - contents:
    - "A.3.  Overloading the USER Command\n   An additional suggestion would be to
      overload well-known syntax\n   through the existing USER command, as illustrated
      in the following\n   example:\n      C> USER foo@example.com\n      S> 331 Password
      required\n      C> PASS bar\n      S> 230 User logged in\n   In this example,
      the user \"foo\" might be attempting to log on to the\n   virtual host \"example.com\"
      on an FTP server.  This suggestion may\n   seem plausible at first, but it introduces
      several implementation\n   problems.  For example:\n   a.  Some network environments
      already use the \"username@hostname\"\n       syntax for network credentials,
      where the \"hostname\" portion\n       refers to the location of the user's
      credentials within the\n       network hierarchy.  Using the \"foo@example.com\"
      syntax, it\n       becomes difficult to differentiate between the user \"foo\"
      logging\n       into a virtual host that is named \"example.com\" on an FTP
      server\n       versus the user \"foo@example.com\" logging into an FTP server
      with\n       no specified virtual host.\n   b.  When using the FTP security
      extensions that are documented in\n       [RFC2228] and [RFC4217], negotiation
      of the security mechanism\n       and certificate must occur before login credentials
      are sent by\n       the client.  More specifically, the AUTH/ADAT commands must
      be\n       sent before the USER command in order to safeguard user\n       credentials.
      \ If you overload the USER command, there is no way\n       of ensuring that
      the certificate matches the correct virtual host\n       before the user credentials
      are sent by the client.\n"
    title: A.3.  Overloading the USER Command
  - contents:
    - "A.4.  Conclusion\n   After examining the above alternatives, and in order to
      obtain an\n   adequate emulation of \"real\" FTP servers, it was concluded that\n
      \  supporting virtual hosts will require both client and server\n   modifications.
      \ Therefore, a new FTP command seems the most likely\n   solution to provide
      the required level of support.\n"
    title: A.4.  Conclusion
  title: Appendix A.  Unworkable Alternatives
- contents:
  - "Appendix B.  Acknowledgements\n   Robert Elz and Paul Hethmon provided a detailed
    discussion of the\n   HOST command in their Internet-Draft titled \"Extensions
    to FTP\" as\n   part of their work with the FTPEXT Working Group of the IETF.
    \ Their\n   work formed the basis for much of this document, and their help has\n
    \  been greatly appreciated.  They would also like to credit Bernhard\n   Rosenkraenzer
    for having first suggested and described the HOST\n   command.\n   Several people
    have provided a wealth of constructive feedback about\n   earlier versions of
    this document that has helped to shape its\n   development; many of their suggestions
    have been incorporated, and\n   their contributions are gratefully acknowledged.
    \ There are far too\n   many to mention here, but the authors of this document
    would like to\n   specifically thank Alexey Melnikov, Alfred Hoenes, John Klensin,
    Joe\n   Touch, Paul Ford-Hutchinson, Daniel Stenberg, Mykyta Yevstifeyev,\n   Alec
    Rowell, Jaroslav Dunajsky, Wade Hilmo, Anthony Bryan, and Barry\n   Leiba for
    their assistance.\n"
  title: Appendix B.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Paul Hethmon\n   Hethmon Brothers\n   2305 Chukar Road\n
    \  Knoxville, TN  37923\n   USA\n   EMail: phethmon@hethmon.com\n   Robert McMurray\n
    \  Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA  98052\n   USA\n
    \  EMail: robmcm@microsoft.com\n"
  title: Authors' Addresses
