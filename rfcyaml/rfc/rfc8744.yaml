- title: __initial_text__
  contents:
  - ''
- title: Issues and Requirements for Server Name Identification (SNI) Encryption
  contents:
  - 'Issues and Requirements for Server Name Identification (SNI) Encryption

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the general problem of encrypting the Server\n\
    \   Name Identification (SNI) TLS parameter.  The proposed solutions hide\n  \
    \ a hidden service behind a fronting service, only disclosing the SNI\n   of the\
    \ fronting service to external observers.  This document lists\n   known attacks\
    \ against SNI encryption, discusses the current \"HTTP co-\n   tenancy\" solution,\
    \ and presents requirements for future TLS-layer\n   solutions.\n   In practice,\
    \ it may well be that no solution can meet every\n   requirement and that practical\
    \ solutions will have to make some\n   compromises.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8744.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  History of the TLS SNI Extension\n\
    \     2.1.  Unanticipated Usage of SNI Information\n     2.2.  SNI Encryption\
    \ Timeliness\n     2.3.  End-to-End Alternatives\n   3.  Security and Privacy\
    \ Requirements for SNI Encryption\n     3.1.  Mitigate Cut-and-Paste Attacks\n\
    \     3.2.  Avoid Widely Shared Secrets\n     3.3.  Prevent SNI-Based Denial-of-Service\
    \ Attacks\n     3.4.  Do Not Stick Out\n     3.5.  Maintain Forward Secrecy\n\
    \     3.6.  Enable Multi-party Security Contexts\n     3.7.  Support Multiple\
    \ Protocols\n       3.7.1.  Hiding the Application-Layer Protocol Negotiation\n\
    \       3.7.2.  Supporting Other Transports than TCP\n   4.  HTTP Co-tenancy Fronting\n\
    \     4.1.  HTTPS Tunnels\n     4.2.  Delegation Control\n     4.3.  Related Work\n\
    \   5.  Security Considerations\n   6.  IANA Considerations\n   7.  Informative\
    \ References\n   Acknowledgements\n   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Historically, adversaries have been able to monitor the\
    \ use of web\n   services through three primary channels: looking at DNS requests,\n\
    \   looking at IP addresses in packet headers, and looking at the data\n   stream\
    \ between user and services.  These channels are getting\n   progressively closed.\
    \  A growing fraction of Internet communication\n   is encrypted, mostly using\
    \ Transport Layer Security (TLS) [RFC8446].\n   Progressive deployment of solutions\
    \ like DNS over TLS [RFC7858] and\n   DNS over HTTPS [RFC8484] mitigates the disclosure\
    \ of DNS information.\n   More and more services are colocated on multiplexed\
    \ servers,\n   loosening the relation between IP address and web service.  For\n\
    \   example, in virtual hosting solutions, multiple services can be\n   hosted\
    \ as co-tenants on the same server, and the IP address and port\n   do not uniquely\
    \ identify a service.  In cloud or Content Delivery\n   Network (CDN) solutions,\
    \ a given platform hosts the services or\n   servers of a lot of organizations,\
    \ and looking up what netblock an IP\n   address belongs to reveals little.  However,\
    \ multiplexed servers rely\n   on the Server Name Information (SNI) TLS extension\
    \ [RFC6066] to\n   direct connections to the appropriate service implementation.\
    \  This\n   protocol element is transmitted in cleartext.  As the other methods\n\
    \   of monitoring get blocked, monitoring focuses on the cleartext SNI.\n   The\
    \ purpose of SNI encryption is to prevent that and aid privacy.\n   Replacing\
    \ cleartext SNI transmission by an encrypted variant will\n   improve the privacy\
    \ and reliability of TLS connections, but the\n   design of proper SNI encryption\
    \ solutions is difficult.  In the past,\n   there have been multiple attempts\
    \ at defining SNI encryption.  These\n   attempts have generally floundered, because\
    \ the simple designs fail\n   to mitigate several of the attacks listed in Section\
    \ 3.  In the\n   absence of a TLS-level solution, the most popular approach to\
    \ SNI\n   privacy for web services is HTTP-level fronting, which we discuss in\n\
    \   Section 4.\n   This document does not present the design of a solution but\
    \ provides\n   guidelines for evaluating proposed solutions.  (The review of HTTP-\n\
    \   level solutions in Section 4 is not an endorsement of these\n   solutions.)\
    \  The need for related work on the encryption of the\n   Application-Layer Protocol\
    \ Negotiation (ALPN) parameters of TLS is\n   discussed in Section 3.7.1.\n"
- title: 2.  History of the TLS SNI Extension
  contents:
  - "2.  History of the TLS SNI Extension\n   The SNI extension was specified in 2003\
    \ in [RFC3546] to facilitate\n   management of \"colocation servers\", in which\
    \ multiple services shared\n   the same IP address.  A typical example would be\
    \ multiple websites\n   served by the same web server.  The SNI extension carries\
    \ the name of\n   a specific server, enabling the TLS connection to be established\
    \ with\n   the desired server context.  The current SNI extension specification\n\
    \   can be found in [RFC6066].\n   The SNI specification allowed for different\
    \ types of server names,\n   though only the \"hostname\" variant was specified\
    \ and deployed.  In\n   that variant, the SNI extension carries the domain name\
    \ of the target\n   server.  The SNI extension is carried in cleartext in the\
    \ TLS\n   \"ClientHello\" message.\n"
- title: 2.1.  Unanticipated Usage of SNI Information
  contents:
  - "2.1.  Unanticipated Usage of SNI Information\n   The SNI was defined to facilitate\
    \ management of servers, but the\n   developers of middleboxes found out that\
    \ they could take advantage of\n   the information.  Many examples of such usage\
    \ are reviewed in\n   [RFC8404].  Other examples came out during discussions of\
    \ this\n   document.  They include:\n   *  Filtering or censoring specific services\
    \ for a variety of reasons\n   *  Content filtering by network operators or ISPs\
    \ blocking specific\n      websites, for example, to implement parental controls\
    \ or to\n      prevent access to phishing or other fraudulent websites\n   * \
    \ ISP assigning different QoS profiles to target services\n   *  Firewalls within\
    \ enterprise networks blocking websites not deemed\n      appropriate for work\n\
    \   *  Firewalls within enterprise networks exempting specific websites\n    \
    \  from man-in-the-middle (MITM) inspection, such as healthcare or\n      financial\
    \ sites for which inspection would intrude on the privacy\n      of employees\n\
    \   The SNI is probably also included in the general collection of\n   metadata\
    \ by pervasive surveillance actors [RFC7258], for example, to\n   identify services\
    \ used by surveillance targets.\n"
- title: 2.2.  SNI Encryption Timeliness
  contents:
  - "2.2.  SNI Encryption Timeliness\n   The cleartext transmission of the SNI was\
    \ not flagged as a problem in\n   the Security Considerations sections of [RFC3546],\
    \ [RFC4366], or\n   [RFC6066].  These specifications did not anticipate the alternative\n\
    \   usage described in Section 2.1.  One reason may be that, when these\n   RFCs\
    \ were written, the SNI information was available through a\n   variety of other\
    \ means, such as tracking IP addresses, DNS names, or\n   server certificates.\n\
    \   Many deployments still allocate different IP addresses to different\n   services,\
    \ so that different services can be identified by their IP\n   addresses.  However,\
    \ CDNs commonly serve a large number of services\n   through a comparatively small\
    \ number of addresses.\n   The SNI carries the domain name of the server, which\
    \ is also sent as\n   part of the DNS queries.  Most of the SNI usage described\
    \ in\n   Section 2.1 could also be implemented by monitoring DNS traffic or\n\
    \   controlling DNS usage.  But this is changing with the advent of DNS\n   resolvers\
    \ providing services like DNS over TLS [RFC7858] or DNS over\n   HTTPS [RFC8484].\n\
    \   The subjectAltName extension of type dNSName of the server\n   certificate\
    \ (or in its absence, the common name component) exposes\n   the same name as\
    \ the SNI.  In TLS versions 1.0 [RFC2246], 1.1\n   [RFC4346], and 1.2 [RFC5246],\
    \ servers send certificates in cleartext,\n   ensuring that there would be limited\
    \ benefits in hiding the SNI.\n   However, in TLS 1.3 [RFC8446], server certificates\
    \ are encrypted in\n   transit.  Note that encryption alone is insufficient to\
    \ protect\n   server certificates; see Section 3.1 for details.\n   The decoupling\
    \ of IP addresses and server names, deployment of DNS\n   privacy, and protection\
    \ of server certificate transmissions all\n   contribute to user privacy in the\
    \ face of an RFC 7258-style adversary\n   [RFC7258].  Encrypting the SNI complements\
    \ this push for privacy and\n   makes it harder to censor or otherwise provide\
    \ differential treatment\n   to specific Internet services.\n"
- title: 2.3.  End-to-End Alternatives
  contents:
  - "2.3.  End-to-End Alternatives\n   Deploying SNI encryption helps thwart most\
    \ of the unanticipated SNI\n   usages, including censorship and pervasive surveillance,\
    \ but it also\n   will break or reduce the efficacy of the operational practices\
    \ and\n   techniques implemented in middleboxes, as described in Section 2.1.\n\
    \   Most of these functions can, however, be realized by other means.\n   For\
    \ example, some DNS service providers offer customers the provision\n   to \"\
    opt in\" to filtering services for parental control and phishing\n   protection.\
    \  Per-stream QoS could be provided by a combination of\n   packet marking and\
    \ end-to-end agreements.  As SNI encryption becomes\n   common, we can expect\
    \ more deployment of such \"end-to-end\" solutions.\n   At the time of this writing,\
    \ enterprises have the option of\n   installing a firewall performing SNI filtering\
    \ to prevent connections\n   to certain websites.  With SNI encryption, this becomes\
    \ ineffective.\n   Obviously, managers could block usage of SNI encryption in\
    \ enterprise\n   computers, but this wide-scale blocking would diminish the privacy\n\
    \   protection of traffic leaving the enterprise, which may not be\n   desirable.\
    \  Enterprise managers could rely instead on filtering\n   software and management\
    \ software deployed on the enterprise's\n   computers.\n"
- title: 3.  Security and Privacy Requirements for SNI Encryption
  contents:
  - "3.  Security and Privacy Requirements for SNI Encryption\n   Over the past years,\
    \ there have been multiple proposals to add an SNI\n   encryption option in TLS.\
    \  A review of the TLS mailing list archives\n   shows that many of these proposals\
    \ appeared promising but were\n   rejected after security reviews identified plausible\
    \ attacks.  In\n   this section, we collect a list of these known attacks.\n"
- title: 3.1.  Mitigate Cut-and-Paste Attacks
  contents:
  - "3.1.  Mitigate Cut-and-Paste Attacks\n   The simplest SNI encryption designs\
    \ replace the cleartext SNI in the\n   initial TLS exchange with an encrypted\
    \ value, using a key known to\n   the multiplexed server.  Regardless of the encryption\
    \ used, these\n   designs can be broken by a simple cut-and-paste attack, which\
    \ works\n   as follows:\n   1.  The user starts a TLS connection to the multiplexed\
    \ server,\n       including an encrypted SNI value.\n   2.  The adversary observes\
    \ the exchange and copies the encrypted SNI\n       parameter.\n   3.  The adversary\
    \ starts its own connection to the multiplexed\n       server, including in its\
    \ connection parameters the encrypted SNI\n       copied from the observed exchange.\n\
    \   4.  The multiplexed server establishes the connection to the\n       protected\
    \ service, which sends its certificate, thus revealing\n       the identity of\
    \ the service.\n   One of the goals of SNI encryption is to prevent adversaries\
    \ from\n   knowing which hidden service the client is using.  Successful cut-\n\
    \   and-paste attacks break that goal by allowing adversaries to discover\n  \
    \ that service.\n"
- title: 3.2.  Avoid Widely Shared Secrets
  contents:
  - "3.2.  Avoid Widely Shared Secrets\n   It is easy to think of simple schemes in\
    \ which the SNI is encrypted\n   or hashed using a shared secret.  This symmetric\
    \ key must be known by\n   the multiplexed server and by every user of the protected\
    \ services.\n   Such schemes are thus very fragile, since the compromise of a\
    \ single\n   user would compromise the entire set of users and protected services.\n"
- title: 3.3.  Prevent SNI-Based Denial-of-Service Attacks
  contents:
  - "3.3.  Prevent SNI-Based Denial-of-Service Attacks\n   Encrypting the SNI may\
    \ create extra load for the multiplexed server.\n   Adversaries may mount denial-of-service\
    \ (DoS) attacks by generating\n   random encrypted SNI values and forcing the\
    \ multiplexed server to\n   spend resources in useless decryption attempts.\n\
    \   It may be argued that this is not an important avenue for DoS\n   attacks,\
    \ as regular TLS connection attempts also require the server\n   to perform a\
    \ number of cryptographic operations.  However, in many\n   cases, the SNI decryption\
    \ will have to be performed by a front-end\n   component with limited resources,\
    \ while the TLS operations are\n   performed by the component dedicated to their\
    \ respective services.\n   SNI-based DoS attacks could target the front-end component.\n"
- title: 3.4.  Do Not Stick Out
  contents:
  - "3.4.  Do Not Stick Out\n   In some designs, handshakes using SNI encryption can\
    \ be easily\n   differentiated from \"regular\" handshakes.  For example, some\
    \ designs\n   require specific extensions in the ClientHello packets or specific\n\
    \   values of the cleartext SNI parameter.  If adversaries can easily\n   detect\
    \ the use of SNI encryption, they could block it, or they could\n   flag the users\
    \ of SNI encryption for special treatment.\n   In the future, it might be possible\
    \ to assume that a large fraction\n   of TLS handshakes use SNI encryption.  If\
    \ that were the case, the\n   detection of SNI encryption would be a lesser concern.\
    \  However, we\n   have to assume that, in the near future, only a small fraction\
    \ of TLS\n   connections will use SNI encryption.\n   This requirement to not\
    \ stick out may be difficult to meet in\n   practice, as noted in Section 5.\n"
- title: 3.5.  Maintain Forward Secrecy
  contents:
  - "3.5.  Maintain Forward Secrecy\n   TLS 1.3 [RFC8446] is designed to provide forward\
    \ secrecy, so that\n   (for example) keys used in past sessions will not be compromised\
    \ even\n   if the private key of the server is compromised.  The general\n   concerns\
    \ about forward secrecy apply to SNI encryption as well.  For\n   example, some\
    \ proposed designs rely on a public key of the\n   multiplexed server to define\
    \ the SNI encryption key.  If the\n   corresponding private key should be compromised,\
    \ the adversaries\n   would be able to process archival records of past connections\
    \ and\n   retrieve the protected SNI used in these connections.  These designs\n\
    \   fail to maintain forward secrecy of SNI encryption.\n"
- title: 3.6.  Enable Multi-party Security Contexts
  contents:
  - "3.6.  Enable Multi-party Security Contexts\n   We can design solutions in which\
    \ a fronting service acts as a relay\n   to reach the protected service.  Some\
    \ of those solutions involve just\n   one TLS handshake between the client and\
    \ the fronting service.  The\n   master secret is verified by verifying a certificate\
    \ provided by the\n   fronting service but not by the protected service.  These\
    \ solutions\n   expose the client to a MITM attack by the fronting service.  Even\
    \ if\n   the client has some reasonable trust in this service, the possibility\n\
    \   of a MITM attack is troubling.\n   There are other classes of solutions in\
    \ which the master secret is\n   verified by verifying a certificate provided\
    \ by the protected\n   service.  These solutions offer more protection against\
    \ a MITM attack\n   by the fronting service.  The downside is that the client\
    \ will not\n   verify the identity of the fronting service, which enables fronting\n\
    \   server spoofing attacks, such as the \"honeypot\" attack discussed\n   below.\
    \  Overall, end-to-end TLS to the protected service is\n   preferable, but it\
    \ is important to also provide a way to authenticate\n   the fronting service.\n\
    \   The fronting service could be pressured by adversaries.  By design,\n   it\
    \ could be forced to deny access to the protected service or to\n   divulge which\
    \ client accessed it.  But if a MITM attack is possible,\n   the adversaries would\
    \ also be able to pressure the fronting service\n   into intercepting or spoofing\
    \ the communications between client and\n   protected service.\n   Adversaries\
    \ could also mount an attack by spoofing the fronting\n   service.  A spoofed\
    \ fronting service could act as a \"honeypot\" for\n   users of hidden services.\
    \  At a minimum, the fake server could record\n   the IP addresses of these users.\
    \  If the SNI encryption solution\n   places too much trust on the fronting server,\
    \ the fake server could\n   also serve fake content of its own choosing, including\
    \ various forms\n   of malware.\n   There are two main channels by which adversaries\
    \ can conduct this\n   attack.  Adversaries can simply try to mislead users into\
    \ believing\n   that the honeypot is a valid fronting server, especially if that\n\
    \   information is carried by word of mouth or in unprotected DNS\n   records.\
    \  Adversaries can also attempt to hijack the traffic to the\n   regular fronting\
    \ server, using, for example, spoofed DNS responses or\n   spoofed IP-level routing,\
    \ combined with a spoofed certificate.\n"
- title: 3.7.  Support Multiple Protocols
  contents:
  - "3.7.  Support Multiple Protocols\n   The SNI encryption requirement does not\
    \ stop with HTTP over TLS.\n   Multiple other applications currently use TLS,\
    \ including, for\n   example, SMTP [RFC3207], DNS [RFC7858], IMAP [RFC8314], and\
    \ the\n   Extensible Messaging and Presence Protocol (XMPP) [RFC7590].  These\n\
    \   applications, too, will benefit from SNI encryption.  HTTP-only\n   methods,\
    \ like those described in Section 4.1, would not apply there.\n   In fact, even\
    \ for the HTTPS case, the HTTPS tunneling service\n   described in Section 4.1\
    \ is compatible with HTTP 1.0 and HTTP 1.1 but\n   interacts awkwardly with the\
    \ multiple streams feature of HTTP/2\n   [RFC7540].  This points to the need for\
    \ an application-agnostic\n   solution, which would be implemented fully in the\
    \ TLS layer.\n"
- title: 3.7.1.  Hiding the Application-Layer Protocol Negotiation
  contents:
  - "3.7.1.  Hiding the Application-Layer Protocol Negotiation\n   The Application-Layer\
    \ Protocol Negotiation (ALPN) parameters of TLS\n   allow implementations to negotiate\
    \ the application-layer protocol\n   used on a given connection.  TLS provides\
    \ the ALPN values in\n   cleartext during the initial handshake.  While exposing\
    \ the ALPN does\n   not create the same privacy issues as exposing the SNI, there\
    \ is\n   still a risk.  For example, some networks may attempt to block\n   applications\
    \ that they do not understand or that they wish users\n   would not use.\n   In\
    \ a sense, ALPN filtering could be very similar to the filtering of\n   specific\
    \ port numbers exposed in some networks.  This filtering by\n   ports has given\
    \ rise to evasion tactics in which various protocols\n   are tunneled over HTTP\
    \ in order to use open ports 80 or 443.\n   Filtering by ALPN would probably beget\
    \ the same responses, in which\n   the applications just move over HTTP and only\
    \ the HTTP ALPN values\n   are used.  Applications would not need to do that if\
    \ the ALPN were\n   hidden in the same way as the SNI.\n   In addition to hiding\
    \ the SNI, it is thus desirable to also hide the\n   ALPN.  Of course, this implies\
    \ engineering trade-offs.  Using the\n   same technique for hiding the ALPN and\
    \ encrypting the SNI may result\n   in excess complexity.  It might be preferable\
    \ to encrypt these\n   independently.\n"
- title: 3.7.2.  Supporting Other Transports than TCP
  contents:
  - "3.7.2.  Supporting Other Transports than TCP\n   The TLS handshake is also used\
    \ over other transports, such as UDP\n   with both DTLS [DTLS-1.3] and QUIC [QUIC].\
    \  The requirement to\n   encrypt the SNI applies just as well for these transports\
    \ as for TLS\n   over TCP.\n   This points to a requirement for SNI encryption\
    \ mechanisms to also be\n   applicable to non-TCP transports such as DTLS or QUIC.\n"
- title: 4.  HTTP Co-tenancy Fronting
  contents:
  - "4.  HTTP Co-tenancy Fronting\n   In the absence of TLS-level SNI encryption,\
    \ many sites rely on an\n   \"HTTP co-tenancy\" solution, often referred to as\
    \ \"domain fronting\"\n   [DOMFRONT].  The TLS connection is established with\
    \ the fronting\n   server, and HTTP requests are then sent over that connection\
    \ to the\n   hidden service.  For example, the TLS SNI could be set to\n   \"\
    fronting.example.com\" (the fronting server), and HTTP requests sent\n   over\
    \ that connection could be directed to \"hidden.example.com\"\n   (accessing the\
    \ hidden service).  This solution works well in practice\n   when the fronting\
    \ server and the hidden server are \"co-tenants\" of\n   the same multiplexed\
    \ server.\n   The HTTP domain fronting solution can be deployed without\n   modification\
    \ to the TLS protocol and does not require using any\n   specific version of TLS.\
    \  There are, however, a few issues regarding\n   discovery, client implementations,\
    \ trust, and applicability:\n   *  The client has to discover that the hidden\
    \ service can be accessed\n      through the fronting server.\n   *  The client's\
    \ browser has to be directed to access the hidden\n      service through the fronting\
    \ service.\n   *  Since the TLS connection is established with the fronting service,\n\
    \      the client has no cryptographic proof that the content does, in\n     \
    \ fact, come from the hidden service.  Thus, the solution does not\n      mitigate\
    \ the context sharing issues described in Section 3.6.\n      Note that this is\
    \ already the case for co-tenanted sites.\n   *  Since this is an HTTP-level solution,\
    \ it does not protect non-HTTP\n      protocols, as discussed in Section 3.7.\n\
    \   The discovery issue is common to most SNI encryption solutions.  The\n   browser\
    \ issue was solved in [DOMFRONT] by implementing domain\n   fronting as a pluggable\
    \ transport for the Tor browser.  The multi-\n   protocol issue can be mitigated\
    \ by implementing other applications\n   over HTTP, for example, DNS over HTTPS\
    \ [RFC8484].  The trust issue,\n   however, requires specific developments.\n"
- title: 4.1.  HTTPS Tunnels
  contents:
  - "4.1.  HTTPS Tunnels\n   The HTTP domain fronting solution places a lot of trust\
    \ in the\n   fronting server.  This required trust can be reduced by tunneling\n\
    \   HTTPS in HTTPS, which effectively treats the fronting server as an\n   HTTP\
    \ proxy.  In this solution, the client establishes a TLS\n   connection to the\
    \ fronting server and then issues an HTTP connect\n   request to the hidden server.\
    \  This will establish an end-to-end\n   HTTPS-over-TLS connection between the\
    \ client and the hidden server,\n   mitigating the issues described in Section\
    \ 3.6.\n   The HTTPS-in-HTTPS solution requires double encryption of every\n \
    \  packet.  It also requires that the fronting server decrypt and relay\n   messages\
    \ to the hidden server.  Both of these requirements make the\n   implementation\
    \ onerous.\n"
- title: 4.2.  Delegation Control
  contents:
  - "4.2.  Delegation Control\n   Clients would see their privacy compromised if they\
    \ contacted the\n   wrong fronting server to access the hidden service, since\
    \ this wrong\n   server could disclose their access to adversaries.  This requires\
    \ a\n   controlled way to indicate which fronting server is acceptable by the\n\
    \   hidden service.\n   This problem is similar to the \"word of mouth\" variant\
    \ of the\n   \"fronting server spoofing\" attack described in Section 3.6.  The\n\
    \   spoofing would be performed by distributing fake advice, such as \"to\n  \
    \ reach hidden.example.com, use fake.example.com as a fronting server\",\n   when\
    \ \"fake.example.com\" is under the control of an adversary.\n   In practice,\
    \ this attack is well mitigated when the hidden service is\n   accessed through\
    \ a specialized application.  The name of the fronting\n   server can then be\
    \ programmed in the code of the application.  But\n   the attack is harder to\
    \ mitigate when the hidden service has to be\n   accessed through general-purpose\
    \ web browsers.\n   There are several proposed solutions to this problem, such\
    \ as\n   creating a special form of certificate to codify the relation between\n\
    \   the fronting and hidden server or obtaining the relation between the\n   hidden\
    \ and fronting service through the DNS, possibly using DNSSEC,\n   to avoid spoofing.\
    \  The experiment described in [DOMFRONT] solved the\n   issue by integrating\
    \ with the Lantern Internet circumvention tool.\n   We can observe that CDNs have\
    \ a similar requirement.  They need to\n   convince the client that \"www.example.com\"\
    \ can be accessed through\n   the seemingly unrelated \"cdn-node-xyz.example.net\"\
    .  Most CDNs have\n   deployed DNS-based solutions to this problem.  However,\
    \ the CDN often\n   holds the authoritative certificate of the origin.  There\
    \ is,\n   simultaneously, verification of a relationship between the origin and\n\
    \   the CDN (through the certificate) and a risk that the CDN can spoof\n   the\
    \ content from the origin.\n"
- title: 4.3.  Related Work
  contents:
  - "4.3.  Related Work\n   The ORIGIN frame defined for HTTP/2 [RFC8336] can be used\
    \ to flag\n   content provided by the hidden server.  Secondary certificate\n\
    \   authentication [HTTP2-SEC-CERTS] can be used to manage authentication\n  \
    \ of hidden server content or to perform client authentication before\n   accessing\
    \ hidden content.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document lists a number of attacks against\
    \ SNI encryption in\n   Sections 3 and 4.2 and presents a list of requirements\
    \ to mitigate\n   these attacks.  Current HTTP-based solutions described in Section\
    \ 4\n   only meet some of these requirements.  In practice, it may well be\n \
    \  that no solution can meet every requirement and that practical\n   solutions\
    \ will have to make some compromises.\n   In particular, the requirement to not\
    \ stick out, presented in\n   Section 3.4, may have to be lifted, especially for\
    \ proposed solutions\n   that could quickly reach large-scale deployments.\n \
    \  Replacing cleartext SNI transmission by an encrypted variant will\n   break\
    \ or reduce the efficacy of the operational practices and\n   techniques implemented\
    \ in middleboxes, as described in Section 2.1.\n   As explained in Section 2.3,\
    \ alternative solutions will have to be\n   developed.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [DOMFRONT] Fifield, D., Lan, C., Hynes, R., Wegmann,\
    \ P., and V.\n              Paxson, \"Blocking-resistant communication through\
    \ domain\n              fronting\", DOI 10.1515/popets-2015-0009, 2015,\n    \
    \          <https://www.bamsoftware.com/papers/fronting/>.\n   [DTLS-1.3] Rescorla,\
    \ E., Tschofenig, H., and N. Modadugu, \"The\n              Datagram Transport\
    \ Layer Security (DTLS) Protocol Version\n              1.3\", Work in Progress,\
    \ Internet-Draft, draft-ietf-tls-\n              dtls13-38, 29 May 2020,\n   \
    \           <https://tools.ietf.org/html/draft-ietf-tls-dtls13-38>.\n   [HTTP2-SEC-CERTS]\n\
    \              Bishop, M., Sullivan, N., and M. Thomson, \"Secondary\n       \
    \       Certificate Authentication in HTTP/2\", Work in Progress,\n          \
    \    Internet-Draft, draft-ietf-httpbis-http2-secondary-certs-\n             \
    \ 06, 14 May 2020, <https://tools.ietf.org/html/draft-ietf-\n              httpbis-http2-secondary-certs-06>.\n\
    \   [QUIC]     Thomson, M. and S. Turner, \"Using TLS to Secure QUIC\",\n    \
    \          Work in Progress, Internet-Draft, draft-ietf-quic-tls-29,\n       \
    \       9 June 2020,\n              <https://tools.ietf.org/html/draft-ietf-quic-tls-29>.\n\
    \   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n  \
    \            RFC 2246, DOI 10.17487/RFC2246, January 1999,\n              <https://www.rfc-editor.org/info/rfc2246>.\n\
    \   [RFC3207]  Hoffman, P., \"SMTP Service Extension for Secure SMTP over\n  \
    \            Transport Layer Security\", RFC 3207, DOI 10.17487/RFC3207,\n   \
    \           February 2002, <https://www.rfc-editor.org/info/rfc3207>.\n   [RFC3546]\
    \  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J.,\n              and\
    \ T. Wright, \"Transport Layer Security (TLS)\n              Extensions\", RFC\
    \ 3546, DOI 10.17487/RFC3546, June 2003,\n              <https://www.rfc-editor.org/info/rfc3546>.\n\
    \   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.1\", RFC 4346,\n              DOI 10.17487/RFC4346,\
    \ April 2006,\n              <https://www.rfc-editor.org/info/rfc4346>.\n   [RFC4366]\
    \  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J.,\n              and\
    \ T. Wright, \"Transport Layer Security (TLS)\n              Extensions\", RFC\
    \ 4366, DOI 10.17487/RFC4366, April 2006,\n              <https://www.rfc-editor.org/info/rfc4366>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6066]\
    \  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:\
    \ Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January\
    \ 2011,\n              <https://www.rfc-editor.org/info/rfc6066>.\n   [RFC7258]\
    \  Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n             \
    \ Attack\", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May\n              2014,\
    \ <https://www.rfc-editor.org/info/rfc7258>.\n   [RFC7540]  Belshe, M., Peon,\
    \ R., and M. Thomson, Ed., \"Hypertext\n              Transfer Protocol Version\
    \ 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540, May 2015,\n   \
    \           <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC7590]  Saint-Andre,\
    \ P. and T. Alkemade, \"Use of Transport Layer\n              Security (TLS) in\
    \ the Extensible Messaging and Presence\n              Protocol (XMPP)\", RFC\
    \ 7590, DOI 10.17487/RFC7590, June\n              2015, <https://www.rfc-editor.org/info/rfc7590>.\n\
    \   [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n    \
    \          and P. Hoffman, \"Specification for DNS over Transport\n          \
    \    Layer Security (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n           \
    \   2016, <https://www.rfc-editor.org/info/rfc7858>.\n   [RFC8314]  Moore, K.\
    \ and C. Newman, \"Cleartext Considered Obsolete:\n              Use of Transport\
    \ Layer Security (TLS) for Email Submission\n              and Access\", RFC 8314,\
    \ DOI 10.17487/RFC8314, January 2018,\n              <https://www.rfc-editor.org/info/rfc8314>.\n\
    \   [RFC8336]  Nottingham, M. and E. Nygren, \"The ORIGIN HTTP/2 Frame\",\n  \
    \            RFC 8336, DOI 10.17487/RFC8336, March 2018,\n              <https://www.rfc-editor.org/info/rfc8336>.\n\
    \   [RFC8404]  Moriarty, K., Ed. and A. Morton, Ed., \"Effects of\n          \
    \    Pervasive Encryption on Operators\", RFC 8404,\n              DOI 10.17487/RFC8404,\
    \ July 2018,\n              <https://www.rfc-editor.org/info/rfc8404>.\n   [RFC8446]\
    \  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n             \
    \ Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n\
    \   [RFC8484]  Hoffman, P. and P. McManus, \"DNS Queries over HTTPS\n        \
    \      (DoH)\", RFC 8484, DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   A large part of this document originated in discussion of\
    \ SNI\n   encryption on the TLS WG mailing list, including comments after the\n\
    \   tunneling approach was first proposed in a message to that list:\n   <https://mailarchive.ietf.org/arch/msg/tls/\n\
    \   tXvdcqnogZgqmdfCugrV8M90Ftw>.\n   Thanks to Eric Rescorla for his multiple\
    \ suggestions, reviews, and\n   edits to the successive draft versions of this\
    \ document.\n   Thanks to Daniel Kahn Gillmor for a pretty detailed review of\
    \ the\n   initial draft of this document.  Thanks to Bernard Aboba, Mike\n   Bishop,\
    \ Alissa Cooper, Roman Danyliw, Stephen Farrell, Warren Kumari,\n   Mirja Kuelewind,\
    \ Barry Leiba, Martin Rex, Adam Roach, Meral\n   Shirazipour, Martin Thomson,\
    \ Eric Vyncke, and employees of the UK\n   National Cyber Security Centre for\
    \ their reviews.  Thanks to Chris\n   Wood, Ben Kaduk, and Sean Turner for helping\
    \ move this document\n   toward publication.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Christian Huitema\n   Private Octopus Inc.\n   Friday Harbor,\
    \ WA 98250\n"
