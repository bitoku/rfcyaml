- contents:
  - '                Special Use Domain Name ''ipv4only.arpa''

    '
  title: __initial_text__
- contents:
  - "Abstract\n   NAT64 (Network Address and Protocol Translation from IPv6 Clients
    to\n   IPv4 Servers) allows client devices using IPv6 to communicate with\n   servers
    that have only IPv4 connectivity.\n   The specification for how a client discovers
    its local network's\n   NAT64 prefix (RFC 7050) defines the special name 'ipv4only.arpa'
    for\n   this purpose.  However, in its Domain Name Reservation Considerations\n
    \  section (Section 8.1), that specification (RFC 7050) indicates that\n   the
    name actually has no particularly special properties that would\n   require special
    handling.\n   Consequently, despite the well-articulated special purpose of the\n
    \  name, 'ipv4only.arpa' was not recorded in the Special-Use Domain\n   Names
    registry as a name with special properties.\n   This document updates RFC 7050.
    \ It describes the special treatment\n   required and formally declares the special
    properties of the name.\n   It also adds similar declarations for the corresponding
    reverse\n   mapping names.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8880.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Conventions and Terminology\n
    \  2.  Reasons to Declare 'ipv4only.arpa' as Special\n   3.  Consequences of 'ipv4only.arpa'
    Not Being Declared Special\n     3.1.  Consequences for Name Resolution APIs and
    Libraries\n     3.2.  Consequences for DNS64 Implementations\n   4.  Remedies\n
    \  5.  Security Considerations\n   6.  IANA Considerations\n   7.  Domain Name
    Reservation Considerations\n     7.1.  Special Use Domain Name 'ipv4only.arpa'\n
    \    7.2.  Names '170.0.0.192.in-addr.arpa' and\n           '171.0.0.192.in-addr.arpa'\n
    \      7.2.1.  ip6.arpa Reverse Mapping PTR Records\n   8.  References\n     8.1.
    \ Normative References\n     8.2.  Informative References\n   Appendix A.  Example
    BIND 9 Configuration\n   Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   NAT64 (Network Address and Protocol Translation from IPv6
    Clients to\n   IPv4 Servers) [RFC6146] allows client devices using IPv6 to\n   communicate
    with servers that have only IPv4 connectivity.\n   DNS64 (DNS Extensions for Network
    Address Translation from IPv6\n   Clients to IPv4 Servers) [RFC6147] facilitates
    use of NAT64 by\n   clients by generating synthesized IPv6 addresses for IPv4
    servers\n   that have no IPv6 address of their own, or by communicating the local\n
    \  network's NAT64 prefix to clients so that they can perform the IPv6\n   address
    synthesis themselves.\n   The specification for how a client discovers its local
    network's\n   NAT64 prefix [RFC7050] defines the special name 'ipv4only.arpa'
    for\n   this purpose, but in its Domain Name Reservation Considerations\n   section
    (Section 8.1), that specification [RFC7050] indicates that\n   the name actually
    has no particularly special properties that would\n   require special handling
    and does not request IANA to record the name\n   in the Special-Use Domain Names
    registry [SUDN].\n   Consequently, despite the well-articulated special purpose
    of the\n   name, 'ipv4only.arpa' was not recorded in the Special-Use Domain\n
    \  Names registry [SUDN] as a name with special properties.\n   This omission
    was discussed in the document \"Special-Use Domain Names\n   Problem Statement\"
    [RFC8244].\n   As a result of this omission, in cases where software needs to
    give\n   this name special treatment in order for it to work correctly, there\n
    \  was no clear mandate authorizing software authors to implement that\n   special
    treatment.  Software implementers were left with the choice\n   between not implementing
    the special behavior necessary for the name\n   queries to work correctly or implementing
    the special behavior and\n   being accused of being noncompliant with IETF DNS
    specifications.\n   This document describes the special treatment required, formally\n
    \  declares the special properties of the name, and adds similar\n   declarations
    for the corresponding reverse mapping names.\n"
  - contents:
    - "1.1.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
      interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,
      they appear in all\n   capitals, as shown here.\n"
    title: 1.1.  Conventions and Terminology
  title: 1.  Introduction
- contents:
  - "2.  Reasons to Declare 'ipv4only.arpa' as Special\n   The hostname 'ipv4only.arpa'
    is peculiar in that it was never\n   intended to be treated like a normal hostname.\n
    \  A typical client never has any reason to look up the IPv4 address\n   records
    for 'ipv4only.arpa': no normal user is ever trying to view a\n   website hosted
    at that domain name or trying to send email to an\n   email address at that domain
    name.  The name 'ipv4only.arpa' is\n   already known, by IETF specification [RFC7050],
    to have exactly two\n   IPv4 address records: 192.0.0.170 and 192.0.0.171.  No
    client ever\n   has to look up the name in order to learn those two addresses.\n
    \  In contrast, clients often look up the IPv6 AAAA address records for\n   'ipv4only.arpa',
    which is contrary to general DNS expectations, given\n   that it is already known,
    by IETF specification [RFC7050], that\n   'ipv4only.arpa' is an IPv4-only name,
    and it has no IPv6 AAAA address\n   records.  And yet, clients expect to receive,
    and do in fact receive,\n   positive answers for these IPv6 AAAA address records
    that apparently\n   should not exist.\n   This odd query behavior comes not because
    clients are using DNS to\n   learn legitimate answers from the name's legitimate
    authoritative\n   server, but because the DNS protocol has, in effect, been co-opted
    as\n   an improvised client-to-middlebox communication protocol to look for\n
    \  a DNS64/NAT64 [RFC6147] [RFC6146] gateway and, if one is present, to\n   request
    that it disclose the prefix it is using for IPv6 address\n   synthesis.\n   This
    use of specially crafted DNS queries as an improvised client-to-\n   middlebox
    communication protocol has a number of specific\n   consequences, outlined below,
    which client software needs to take\n   into account if the queries are to produce
    the desired results.  This\n   is particularly true when used on a multihomed
    host or when a VPN\n   tunnel is in use.  The name 'ipv4only.arpa' is most definitely
    a\n   special name and needs to be listed in IANA's registry along with\n   other
    DNS names that have special uses [SUDN].\n"
  title: 2.  Reasons to Declare 'ipv4only.arpa' as Special
- contents:
  - "3.  Consequences of 'ipv4only.arpa' Not Being Declared Special\n   As a result
    of the original specification [RFC7050] not formally\n   declaring 'ipv4only.arpa'
    to have special properties, there was no\n   clear mandate for DNS software to
    treat this name specially.  In\n   particular, this lack of mandate for special
    treatment is relevant\n   (a) to the name resolution APIs and libraries on client
    devices and\n   (b) to DNS64 [RFC6147] implementations.  These two aspects are\n
    \  discussed in more detail below.\n"
  - contents:
    - "3.1.  Consequences for Name Resolution APIs and Libraries\n   A serious problem
      can occur with DNS64/NAT64 when a device is\n   configured to use a recursive
      resolver other than the one it learned\n   from the network.\n   A device joining
      a NAT64 network will learn the recursive resolver\n   recommended for that network,
      typically via IPv6 Router Advertisement\n   Options [RFC8106] or via DHCPv6
      [RFC3646].  On a NAT64 network, it is\n   essential that the client use the
      DNS64 recursive resolver\n   recommended for that network, since only that recursive
      resolver can\n   be relied upon to know the appropriate prefix(es) to use for\n
      \  synthesizing IPv6 addresses that will be acceptable to that NAT64\n   gateway.\n
      \  However, it is becoming increasingly common for users to manually\n   override
      their default DNS configuration because they wish to use\n   some other public
      recursive resolver on the Internet, which may offer\n   better speed, reliability,
      or privacy than the local network's\n   default recursive resolver.  At the
      time of writing, examples of\n   widely known public recursive resolver services
      include Cloudflare\n   Public DNS [DNS1], Google Public DNS [DNS8], and Quad9
      [DNS9].\n   Another common scenario is the use of corporate or personal VPN\n
      \  client software.  Both for privacy reasons and because the local\n   network's
      recursive resolver will typically be unable to provide\n   answers for the company's
      private internal host names, VPN client\n   software usually overrides the local
      network's default configuration\n   to divert some or all DNS requests so that
      they go to the company's\n   own private internal recursive resolver instead
      of to the default\n   recursive resolver the client learned from its local network.
      \ (The\n   company's own private internal recursive resolvers typically have\n
      \  addresses that are themselves reached through the VPN tunnel, not via\n   the
      public Internet.)  As with the case described above of public\n   recursive
      resolver services, the company's private internal recursive\n   resolver cannot
      be expected to be able to synthesize IPv6 addresses\n   correctly for use with
      the local network's NAT64 gateway, because the\n   company's private internal
      recursive resolver is unlikely to be aware\n   of the NAT64 prefix in use on
      the NAT64 network to which the client\n   device is currently attached.  It
      is clear that a single recursive\n   resolver cannot meet both needs.  The local
      network's recursive\n   resolver cannot be expected to give answers for some
      unknown\n   company's private internal host names, and a company's private\n
      \  internal recursive resolver cannot be expected to give correctly\n   synthesized
      IPv6 addresses suitable for some unknown local network's\n   NAT64 gateway.\n
      \  Note that multiple NAT64 services may be simultaneously available to\n   a
      client.  For example, the local network may provide NAT64 service\n   (to allow
      an IPv6-only client device to access IPv4-only Internet\n   services), while
      at the same time, a corporate VPN may also provide\n   NAT64 service (to allow
      a client connecting via an IPv6-only VPN\n   tunnel to access IPv4-only corporate
      services).  The NAT64 address\n   synthesis prefixes for the two NAT64 services
      may be different.  In\n   this case, it is essential that the NAT64 address
      synthesis prefix\n   used on the local network be the prefix learned from the
      local\n   network's recursive resolver, and the NAT64 address synthesis prefix\n
      \  used on the VPN tunnel be the prefix learned from the VPN tunnel's\n   recursive
      resolver.\n   The difficulty here arises because DNS is being used for two\n
      \  unrelated purposes.  The first purpose is retrieving data from a\n   (nominally)
      global database, generally retrieving the IP address(es)\n   associated with
      a hostname.  The second purpose is using the DNS\n   protocol as a middlebox
      communication protocol, to interrogate the\n   local network infrastructure
      to discover the IPv6 prefix(es) in use\n   by the local NAT64 gateway for address
      synthesis.\n"
    title: 3.1.  Consequences for Name Resolution APIs and Libraries
  - contents:
    - "3.2.  Consequences for DNS64 Implementations\n   As a result of there being
      no mandate for special treatment, queries\n   for 'ipv4only.arpa' had to be
      handled normally, resulting in DNS64\n   gateways performing unnecessary queries
      to the authoritative 'arpa'\n   name servers, both unnecessary IPv6 address
      record queries (DNS qtype\n   \"AAAA\", always returning negative responses)
      and unnecessary IPv4\n   address record queries (DNS qtype \"A\", always returning
      the same\n   positive responses).\n   Having DNS64 gateways around the world
      issue these queries generated\n   additional load on the authoritative 'arpa'
      name servers, which was\n   redundant when the name 'ipv4only.arpa' is defined,
      by IETF\n   specification [RFC7050], to have exactly two IPv4 address records,\n
      \  192.0.0.170 and 192.0.0.171, and no other IPv4 or IPv6 address\n   records.\n
      \  Also, at times, for reasons that remain unclear, the authoritative\n   'arpa'
      name servers have been observed to be slow or unresponsive.\n   The failures
      of these 'ipv4only.arpa' queries result in unnecessary\n   failures of the DNS64
      gateways and of the client devices that depend\n   on them for DNS64 [RFC6147]
      address synthesis.\n   Even when the authoritative 'arpa' name servers are operating\n
      \  correctly, having to perform an unnecessary query to obtain an answer\n   that
      is already known in advance can add precious milliseconds of\n   delay, affecting
      user experience on the client devices waiting for\n   those synthesized replies.\n"
    title: 3.2.  Consequences for DNS64 Implementations
  title: 3.  Consequences of 'ipv4only.arpa' Not Being Declared Special
- contents:
  - "4.  Remedies\n   This document leverages operational experience to update the
    Domain\n   Name Reservation Considerations section [RFC6761] of the earlier\n
    \  prefix discovery specification [RFC7050] with one that more\n   accurately
    lists the actual special properties of the name\n   'ipv4only.arpa', so that software
    can legitimately implement the\n   correct behavior necessary for better performance,
    better\n   reliability, and correct operation.\n   These changes affect two bodies
    of software: (a) the name resolution\n   APIs and libraries on client devices,
    and (b) DNS64 implementations.\n   The new special rules specified in this document
    for name resolution\n   APIs and libraries state how they should select which
    recursive\n   resolver to query to learn the IPv6 address synthesis prefix in
    use\n   on a particular physical or virtual interface.  Specifically, when\n   querying
    for the name 'ipv4only.arpa', name resolution APIs and\n   libraries should use
    the recursive resolver recommended by the\n   network for the interface in question
    rather than a recursive\n   resolver configured manually, a recursive resolver
    configured by VPN\n   software, or a full-service recursive resolver running on
    the local\n   host.  Superficially, this might seem like a security issue, since\n
    \  the user might have explicitly configured the particular DNS resolver\n   they
    wish to use, and rather than using that, the name resolution\n   code ignores
    the user's stated preference and uses untrusted input\n   received from the network
    instead.  However, the 'ipv4only.arpa'\n   query is not really a DNS query in
    the usual sense; even though it\n   may look like a DNS query, it is actually
    an improvised client-to-\n   middlebox communication protocol in disguise.  For
    NAT64 to work at\n   all, it is necessary for the interface on which NAT64 translation
    is\n   being performed to tell the host the address of the DNS64 recursive\n   resolver
    the host must use to learn the NAT64 prefix being used by\n   that NAT64.  This
    is typically done via IPv6 Router Advertisement\n   Options for DNS Configuration
    [RFC8106] or via DNS Configuration\n   options for DHCPv6 [RFC3646].\n   The new
    special rules specified in this document for DNS64\n   implementations recommend
    that they avoid performing run-time network\n   queries for values that are known
    to be fixed by specification.\n   A useful property of the way NAT64 Prefix Discovery
    [RFC7050] was\n   originally specified was that it allowed for incremental deployment.\n
    \  Even if existing DNS64 gateways, that were unaware of the special\n   'ipv4only.arpa'
    name, were already deployed, once IANA created the\n   appropriate 'ipv4only.arpa'
    records, clients could begin to use the\n   new facility immediately.  Clients
    could send their special queries\n   for 'ipv4only.arpa' to an ipv4only-unaware
    DNS64 gateway, and, as a\n   side effect of its usual query processing (after
    a query to IANA's\n   servers), the DNS64 gateway would then generate the correct\n
    \  synthesized response.\n   While this was a useful transition strategy to enable
    rapid adoption,\n   it is not the ideal end situation.  For better performance,
    better\n   reliability, and lower load in IANA's servers, it is preferable for\n
    \  DNS64 gateways to be aware of the special 'ipv4only.arpa' name so\n   that
    they can avoid issuing unnecessary queries.  Network operators\n   who wish to
    provide reliable, high-performance service to their\n   customers are motivated
    to prefer DNS64 gateways that recognize the\n   special 'ipv4only.arpa' name and
    apply the appropriate optimizations.\n"
  title: 4.  Remedies
- contents:
  - "5.  Security Considerations\n   One of the known concerns with DNS64 is that
    it conflicts with\n   DNSSEC.  If DNSSEC is used to assert cryptographically that
    a name\n   has no IPv6 AAAA records, then this interferes with using DNS64\n   address
    synthesis to tell a client that those nonexistent IPv6 AAAA\n   records do exist.\n
    \  Section 3 of the DNS64 specification [RFC6147] discusses this:\n   |  ... DNS64
    receives a query with the DO bit set and the CD bit set.\n   |  In this case,
    the DNS64 is supposed to pass on all the data it\n   |  gets to the query initiator.
    \ This case will not work with DNS64,\n   |  unless the validating resolver is
    prepared to do DNS64 itself.\n   The NAT64 Prefix Discovery specification [RFC7050]
    provides the\n   mechanism for the query initiator to learn the NAT64 prefix so
    that\n   it can do its own validation and DNS64 synthesis as described above.\n
    \  With this mechanism, the client can (i) interrogate the local DNS64/\n   NAT64
    gateway (with an 'ipv4only.arpa' query) to learn the IPv6\n   address synthesis
    prefix, (ii) query for the (signed) IPv4 address\n   records for the desired hostname
    and validate the response, and then\n   (iii) perform its own IPv6 address synthesis
    locally, combining the\n   IPv6 address synthesis prefix learned from the local
    DNS64/NAT64\n   gateway with the validated DNSSEC-signed data learned from the
    global\n   Domain Name System.\n   It is conceivable that, over time, if DNSSEC
    adoption continues to\n   grow, the majority of clients could move to this validate-and-\n
    \  synthesize-locally model, which reduces the DNS64 machinery to the\n   vestigial
    role of simply responding to the 'ipv4only.arpa' query to\n   report the local
    IPv6 address synthesis prefix.  At the time of\n   publication, network operators
    have been observed \"in the wild\"\n   deploying NAT64 service with DNS recursive
    resolvers that reply to\n   'ipv4only.arpa' queries but otherwise perform no other
    NAT64 address\n   synthesis.  In no case does the client care what answer(s) the\n
    \  authoritative 'arpa' name servers might give for that query.  The\n   'ipv4only.arpa'
    query is being used purely as a local client-to-\n   middlebox communication message.\n
    \  This validate-and-synthesize-locally approach is even more attractive\n   if
    it does not create an additional dependency on the authoritative\n   'arpa' name
    servers to answer a query that is unnecessary because the\n   DNS64/NAT64 gateway
    already knows the answer before it even issues\n   the query.  Avoiding this unnecessary
    query improves performance and\n   reliability for the client and reduces unnecessary
    load for the\n   authoritative 'arpa' name servers.\n   Hardcoding the known answers
    for 'ipv4only.arpa' IPv4 address record\n   queries (DNS qtype \"A\") in recursive
    resolvers also reduces the risk\n   of malicious devices intercepting those queries
    and returning\n   incorrect answers.  Because the 'ipv4only.arpa' zone has to
    be an\n   insecure delegation (see below), DNSSEC cannot be used to protect\n
    \  these answers from tampering by malicious devices on the path.\n   With respect
    to the question of whether 'ipv4only.arpa' should be a\n   secure or insecure
    delegation, we need to consider two paths of\n   information flow through the
    network:\n   1.  The path from the server authoritative for 'ipv4only.arpa' to
    the\n       DNS64 recursive resolver\n   2.  The path from the DNS64 recursive
    resolver to the ultimate client\n   The path from the authoritative server to
    the DNS64 recursive\n   resolver (queries for IPv4 address records) need not be
    protected by\n   DNSSEC, because the DNS64 recursive resolver already knows, by\n
    \  specification, what the answers are.  In principle, if this were a\n   secure
    delegation, and 'ipv4only.arpa' were a signed zone, then the\n   path from the
    authoritative server to the DNS64 recursive resolver\n   would still work, but
    DNSSEC is not necessary here.  Run-time\n   cryptographic signatures are not needed
    to verify compile-time\n   constants.  Validating the signatures could only serve
    to introduce\n   potential failures into the system for minimal benefit.\n   The
    path from the DNS64 recursive resolver to the ultimate client\n   (queries for
    IPv6 address records) *cannot* be protected by DNSSEC\n   because the DNS64 recursive
    resolver is synthesizing IPv6 address\n   answers and does not possess the DNSSEC
    secret key required to sign\n   those answers.\n   Consequently, the 'ipv4only.arpa'
    zone MUST be an insecure delegation\n   to give DNS64/NAT64 gateways the freedom
    to synthesize answers to\n   those queries at will, without the answers being
    rejected by DNSSEC-\n   capable resolvers.  DNSSEC-capable resolvers that follow
    this\n   specification MUST NOT attempt to validate answers received in\n   response
    to queries for the IPv6 AAAA address records for\n   'ipv4only.arpa'.  Note that
    the name 'ipv4only.arpa' has no use\n   outside of being used for this special
    DNS pseudo-query used to learn\n   the DNS64/NAT64 address synthesis prefix, so
    the lack of DNSSEC\n   security for that name is not a problem.\n   The original
    NAT64 Prefix Discovery specification [RFC7050] stated,\n   incorrectly:\n   |
    \ A signed \"ipv4only.arpa.\" allows validating DNS64 servers (see\n   |  [RFC6147]
    Section 3, Case 5, for example) to detect malicious AAAA\n   |  resource records.
    \ Therefore, the zone serving the well-known name\n   |  has to be protected with
    DNSSEC.\n   This document updates the previous specification [RFC7050] to correct\n
    \  that error.  The 'ipv4only.arpa' zone MUST be an insecure delegation.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has created an insecure delegation for 'ipv4only.arpa'
    to allow\n   DNS64 recursive resolvers to create synthesized AAAA answers within\n
    \  that zone.\n   IANA has recorded the following names in the Special-Use Domain
    Names\n   registry [SUDN]:\n      ipv4only.arpa.\n      170.0.0.192.in-addr.arpa.\n
    \     171.0.0.192.in-addr.arpa.\n   IANA has recorded the following IPv4 addresses
    in the IANA IPv4\n   Special-Purpose Address Registry [SUv4]:\n      192.0.0.170\n
    \     192.0.0.171\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  Domain Name Reservation Considerations

    '
  - contents:
    - "7.1.  Special Use Domain Name 'ipv4only.arpa'\n   The name 'ipv4only.arpa'
      is defined, by IETF specification [RFC7050],\n   to have two IPv4 address records
      with rdata 192.0.0.170 and\n   192.0.0.171.\n   When queried via a DNS64 recursive
      resolver [RFC6147], the name\n   'ipv4only.arpa' is also defined to have IPv6
      AAAA records, with rdata\n   synthesized from a combination of the NAT64 IPv6
      prefix(es) and the\n   IPv4 addresses 192.0.0.170 and 192.0.0.171.  This can
      return more\n   than one pair of IPv6 addresses if there are multiple NAT64
      prefixes.\n   The name 'ipv4only.arpa' has no other IPv4 or IPv6 address records.\n
      \  There are no subdomains of 'ipv4only.arpa'.  All names falling below\n   'ipv4only.arpa'
      are defined to be nonexistent (NXDOMAIN).\n   The name 'ipv4only.arpa' is special
      to\n   a.  client software wishing to perform DNS64 address synthesis,\n   b.
      \ APIs responsible for retrieving the correct information, and\n   c.  the DNS64
      recursive resolver responding to such requests.\n   These three considerations
      are listed in items 2, 3, and 4 below:\n   1.  Normal users should never have
      reason to encounter the\n       'ipv4only.arpa' domain name.  If they do, they
      should expect\n       queries for 'ipv4only.arpa' to result in the answers required
      by\n       the specification [RFC7050].  Normal users have no need to know\n
      \      that 'ipv4only.arpa' is special.\n   2.  Application software may explicitly
      use the name 'ipv4only.arpa'\n       for DNS64/NAT64 address synthesis and expect
      to get the answers\n       required by the specification [RFC7050].  If application
      software\n       encounters the name 'ipv4only.arpa' in the normal course of\n
      \      handling user input, the application software should resolve that\n       name
      as usual and need not treat it in any special way.\n   3.  Name resolution APIs
      and libraries MUST recognize 'ipv4only.arpa'\n       as special and MUST give
      it special treatment.\n       Learning a network's NAT64 prefix is, by its nature,
      an\n       interface-specific operation, and the special DNS query used to\n
      \      learn this interface-specific NAT64 prefix MUST be sent to the\n       DNS
      recursive resolver address(es) the client learned via the\n       configuration
      machinery for that specific client interface.  The\n       NAT64 prefix is a
      per-interface property, not a per-device\n       property.\n       Regardless
      of any manual client DNS configuration, DNS overrides\n       configured by
      VPN client software, or any other mechanisms that\n       influence the choice
      of the client's recursive resolver\n       address(es) (including client devices
      that run their own local\n       recursive resolver and use the loopback address
      as their\n       configured recursive resolver address), all queries for\n       'ipv4only.arpa'
      and any subdomains of that name MUST be sent to\n       the recursive resolver
      learned from the network interface in\n       question via IPv6 Router Advertisement
      Options for DNS\n       Configuration [RFC8106], DNS Configuration options for
      DHCPv6\n       [RFC3646], or other configuration mechanisms.  Because DNS\n
      \      queries for 'ipv4only.arpa' are actually a special middlebox\n       communication
      protocol, it is essential that they go to the\n       correct middlebox for
      the interface in question, and failure to\n       honor this requirement would
      cause failure of the NAT64 Prefix\n       Discovery mechanism [RFC7050].\n       One
      implication of this is that, on multihomed devices (devices\n       that allow
      more than one logical or physical IP interface to be\n       active at the same
      time, e.g., cellular data and Wi-Fi, or one\n       physical interface plus
      a VPN connection), clients MUST use\n       interface-aware name resolution
      APIs.  On different (logical or\n       physical) interfaces, different DNS64
      answers may be received,\n       and DNS64 answers are only valid for the interface
      on which they\n       were received.  On multihomed devices (including devices
      that\n       support VPN), name resolution APIs that do not include interface\n
      \      parameters will not work reliably with NAT64.  On single-homed\n       devices,
      interface-unaware name resolution APIs are acceptable\n       since when only
      one interface can be active at a time, there is\n       no need to specify an
      interface.\n       DNSSEC-capable resolvers MUST NOT attempt to validate answers\n
      \      received in response to queries for the IPv6 AAAA address records\n       for
      'ipv4only.arpa' since, by definition, any such answers are\n       generated
      by the local network's DNS64/NAT64 gateway, not the\n       authoritative server
      responsible for that name.\n   4.  For the purposes of this section, recursive
      resolvers fall into\n       two categories.  The first category is traditional
      recursive\n       resolvers, which includes *forwarding* recursive resolvers,
      as\n       commonly implemented in residential home gateways, and\n       *iterative*
      recursive resolvers, as commonly deployed by ISPs.\n       The second category
      is DNS64 recursive resolvers, whose purpose\n       is to synthesize IPv6 address
      records.  These may be *forwarding*\n       DNS64 recursive resolvers or *iterative*
      DNS64 recursive\n       resolvers, and they work in partnership with a companion
      NAT64\n       gateway to communicate the appropriate NAT64 address synthesis\n
      \      prefix to clients.  More information on these terms can be found\n       in
      the DNS Terminology document [RFC8499].\n       Traditional forwarding recursive
      resolvers SHOULD NOT recognize\n       'ipv4only.arpa' as special or give that
      name, or subdomains of\n       that name, any special treatment.  The rationale
      for this is that\n       a traditional forwarding recursive resolver, such as
      built in to\n       a residential home gateway, may itself be downstream of
      a DNS64\n       recursive resolver.  Passing through the 'ipv4only.arpa' queries\n
      \      to the upstream DNS64 recursive resolver will allow the correct\n       NAT64
      prefix to be discovered.\n       Traditional iterative recursive resolvers that
      are not explicitly\n       configured to synthesize IPv6 prefixes on behalf
      of a companion\n       NAT64 gateway need not recognize 'ipv4only.arpa' as special
      or\n       take any special action.\n       Forwarding or iterative recursive
      resolvers that have been\n       explicitly configured to perform DNS64 address
      synthesis in\n       support of a companion NAT64 gateway (i.e., \"DNS64 recursive\n
      \      resolvers\") MUST recognize 'ipv4only.arpa' as special.  The\n       authoritative
      name servers for 'ipv4only.arpa' cannot be expected\n       to know the local
      network's NAT64 address synthesis prefix, so\n       consulting the authoritative
      name servers for IPv6 address\n       records for 'ipv4only.arpa' is futile.
      \ All DNS64 recursive\n       resolvers MUST recognize 'ipv4only.arpa' (and
      all of its\n       subdomains) as special, and they MUST NOT attempt to look
      up NS\n       records for 'ipv4only.arpa' or otherwise query authoritative name\n
      \      servers in an attempt to resolve this name.  Instead, DNS64\n       recursive
      resolvers MUST act as authoritative for this zone, by\n       generating immediate
      responses for all queries for\n       'ipv4only.arpa' (and any subdomain of
      'ipv4only.arpa'), with the\n       one exception of queries for the DS record.
      \ Queries for the DS\n       record are resolved the usual way to allow a client
      to securely\n       verify that the 'ipv4only.arpa' zone has an insecure delegation.\n
      \      Note that this exception is not expected to receive widespread\n       usage,
      since any client compliant with this specification already\n       knows that
      'ipv4only.arpa' is an insecure delegation and will not\n       attempt DNSSEC
      validation for this name.\n       DNS64 recursive resolvers MUST generate the
      192.0.0.170 and\n       192.0.0.171 responses for IPv4 address queries (DNS
      qtype \"A\"),\n       the appropriate synthesized IPv6 address record responses
      for\n       IPv6 address queries (DNS qtype \"AAAA\"), and a negative\n       (\"no
      error no answer\") response for all other query types except\n       DS.\n       For
      all subdomains of 'ipv4only.arpa', DNS64 recursive resolvers\n       MUST generate
      immediate NXDOMAIN responses.  All names falling\n       below 'ipv4only.arpa'
      are defined to be nonexistent.\n       An example configuration for BIND 9 showing
      how to achieve the\n       desired result is given in Appendix A.\n       Note
      that this is *not* a locally served zone in the usual sense\n       of that
      term [RFC6303] because this rule applies *only* to DNS64\n       recursive resolvers,
      not to traditional forwarding or iterative\n       recursive resolvers.\n   5.
      \ Authoritative name server software need not recognize\n       'ipv4only.arpa'
      as special or handle it in any special way.\n   6.  Generally speaking, operators
      of authoritative name servers need\n       not know anything about the name
      'ipv4only.arpa', just as they do\n       not need to know anything about any
      other names they are not\n       responsible for.  Only the administrators of
      the 'arpa' namespace\n       need to be aware of this name's purpose and how
      it should be\n       configured.  In particular, 'ipv4only.arpa' MUST have the\n
      \      required records, and MUST be an insecure delegation, to allow\n       DNS64
      recursive resolvers to create synthesized AAAA answers\n       within that zone.
      \ Making the 'ipv4only.arpa' zone a secure\n       delegation would make it
      impossible for DNS64 recursive resolvers\n       to create synthesized AAAA
      answers that will be accepted by\n       DNSSEC validating clients, thereby
      defeating the entire purpose\n       of the 'ipv4only.arpa' name.\n   7.  DNS
      Registries/Registrars need not know anything about the name\n       'ipv4only.arpa',
      just as they do not need to know anything about\n       any other name they
      are not responsible for.\n"
    title: 7.1.  Special Use Domain Name 'ipv4only.arpa'
  - contents:
    - "7.2.  Names '170.0.0.192.in-addr.arpa' and '171.0.0.192.in-addr.arpa'\n   Since
      the IPv4 addresses 192.0.0.170 and 192.0.0.171 are defined to\n   be special,
      and are listed in the IANA IPv4 Special-Purpose Address\n   Registry [SUv4],
      the corresponding reverse mapping names in the\n   in-addr.arpa domain are similarly
      special.\n   The name '170.0.0.192.in-addr.arpa' is defined, by IETF specification\n
      \  [RFC7050], to have only one DNS record, type PTR, with rdata\n   'ipv4only.arpa'.\n
      \  The name '171.0.0.192.in-addr.arpa' is defined, by IETF specification\n   [RFC7050],
      to have only one DNS record, type PTR, with rdata\n   'ipv4only.arpa'.\n   There
      are no subdomains of '170.0.0.192.in-addr.arpa' or\n   '171.0.0.192.in-addr.arpa'.
      \ All names falling below these names are\n   defined to be nonexistent (NXDOMAIN).\n
      \  Practically speaking, these two names are rarely used, but to the\n   extent
      that they may be, they are special only to resolver APIs and\n   libraries,
      as described in item 3 below:\n   1.  Normal users should never have reason
      to encounter these two\n       reverse mapping names.  However, if they do,
      queries for these\n       reverse mapping names should return the expected answer\n
      \      'ipv4only.arpa'.  Normal users have no need to know that these\n       reverse
      mapping names are special.\n   2.  Application software SHOULD NOT recognize
      these two reverse\n       mapping names as special and SHOULD NOT treat them
      differently.\n       For example, if the user were to issue the Unix command\n
      \      \"host 192.0.0.170\", then the \"host\" command should call the name\n
      \      resolution API or library as usual and display the result that is\n       returned.\n
      \  3.  Name resolution APIs and libraries SHOULD recognize these two\n       reverse
      mapping names as special and generate the required\n       responses locally.
      \ For the names '170.0.0.192.in-addr.arpa' and\n       '171.0.0.192.in-addr.arpa',
      PTR queries yield the result\n       'ipv4only.arpa'; all other query types
      yield a negative\n       (\"no error no answer\") response.  For all subdomains
      of these two\n       reverse mapping domains, all queries yield an NXDOMAIN
      response.\n       All names falling below these two reverse mapping domains
      are\n       defined to be nonexistent.\n       This local self-contained generation
      of these responses is to\n       avoid placing unnecessary load on the authoritative\n
      \      'in-addr.arpa' name servers.\n   4.  Recursive resolvers SHOULD NOT recognize
      these two reverse\n       mapping names as special and SHOULD NOT, by default,
      give them\n       any special treatment.\n   5.  Authoritative name server software
      need not recognize these two\n       reverse mapping names as special or handle
      them in any special\n       way.\n   6.  Generally speaking, most operators
      of authoritative name servers\n       need not know anything about these two
      reverse mapping names,\n       just as they do not need to know anything about
      any other names\n       they are not responsible for.  Only the operators of
      the\n       authoritative name servers for these two reverse mapping names\n
      \      need to be aware that these names are special, and require fixed\n       answers
      specified by IETF specification.\n   7.  DNS Registries/Registrars need not
      know anything about these two\n       reverse mapping names, just as they do
      not need to know anything\n       about any other name they are not responsible
      for.\n"
    - contents:
      - "7.2.1.  ip6.arpa Reverse Mapping PTR Records\n   For all IPv6 addresses synthesized
        by a DNS64 recursive resolver, the\n   DNS64 recursive resolver is responsible
        for synthesizing the\n   appropriate 'ip6.arpa' reverse mapping PTR records
        too, if it chooses\n   to provide reverse mapping PTR records.  The same applies
        to the\n   synthesized IPv6 addresses corresponding to the IPv4 addresses\n
        \  192.0.0.170 and 192.0.0.171.\n   Generally, a DNS64 recursive resolver
        synthesizes appropriate\n   'ip6.arpa' reverse mapping PTR records by extracting
        the embedded\n   IPv4 address from the encoded IPv6 address, performing a
        reverse\n   mapping PTR query for that IPv4 address, and then synthesizing
        a\n   corresponding 'ip6.arpa' reverse mapping PTR record containing the\n
        \  same rdata.\n   In the case of synthesized IPv6 addresses corresponding
        to the IPv4\n   addresses 192.0.0.170 and 192.0.0.171, the DNS64 recursive
        resolver\n   does not issue reverse mapping queries for those IPv4 addresses,
        but\n   instead, according to rule 3 above, immediately returns the answer\n
        \  'ipv4only.arpa'.\n   In the case of a client that uses the 'ipv4only.arpa'
        query to\n   discover the IPv6 prefixes in use by the local NAT64 gateway,
        and\n   then proceeds to perform its own address synthesis locally (which
        has\n   benefits such as allowing DNSSEC validation), that client MUST also\n
        \  synthesize 'ip6.arpa' reverse mapping PTR records for those\n   discovered
        prefix(es), according to the rules above: When a client's\n   name resolution
        APIs and libraries receive a request to look up an\n   'ip6.arpa' reverse
        mapping PTR record for an address that falls\n   within one of the discovered
        NAT64 address synthesis prefixes, the\n   software extracts the embedded IPv4
        address and then, for IPv4\n   addresses 192.0.0.170 and 192.0.0.171, returns
        the fixed answer\n   'ipv4only.arpa', and for all other IPv4 addresses, performs
        a reverse\n   mapping PTR query for the IPv4 address and then synthesizes
        a\n   corresponding 'ip6.arpa' reverse mapping PTR record containing the\n
        \  same rdata.\n"
      title: 7.2.1.  ip6.arpa Reverse Mapping PTR Records
    title: 7.2.  Names '170.0.0.192.in-addr.arpa' and '171.0.0.192.in-addr.arpa'
  title: 7.  Domain Name Reservation Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3646]  Droms, R., Ed., \"DNS Configuration options for Dynamic\n              Host
      Configuration Protocol for IPv6 (DHCPv6)\", RFC 3646,\n              DOI 10.17487/RFC3646,
      December 2003,\n              <https://www.rfc-editor.org/info/rfc3646>.\n   [RFC6146]
      \ Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:
      Network Address and Protocol Translation from IPv6\n              Clients to
      IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146,\n              April 2011, <https://www.rfc-editor.org/info/rfc6146>.\n
      \  [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,
      \"DNS64: DNS Extensions for Network Address\n              Translation from
      IPv6 Clients to IPv4 Servers\", RFC 6147,\n              DOI 10.17487/RFC6147,
      April 2011,\n              <https://www.rfc-editor.org/info/rfc6147>.\n   [RFC6761]
      \ Cheshire, S. and M. Krochmal, \"Special-Use Domain Names\",\n              RFC
      6761, DOI 10.17487/RFC6761, February 2013,\n              <https://www.rfc-editor.org/info/rfc6761>.\n
      \  [RFC7050]  Savolainen, T., Korhonen, J., and D. Wing, \"Discovery of\n              the
      IPv6 Prefix Used for IPv6 Address Synthesis\",\n              RFC 7050, DOI
      10.17487/RFC7050, November 2013,\n              <https://www.rfc-editor.org/info/rfc7050>.\n
      \  [RFC8106]  Jeong, J., Park, S., Beloeil, L., and S. Madanapalli,\n              \"IPv6
      Router Advertisement Options for DNS Configuration\",\n              RFC 8106,
      DOI 10.17487/RFC8106, March 2017,\n              <https://www.rfc-editor.org/info/rfc8106>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC6303]  Andrews, M., \"Locally Served DNS
      Zones\", BCP 163,\n              RFC 6303, DOI 10.17487/RFC6303, July 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6303>.\n   [RFC8244]  Lemon,
      T., Droms, R., and W. Kumari, \"Special-Use Domain\n              Names Problem
      Statement\", RFC 8244, DOI 10.17487/RFC8244,\n              October 2017, <https://www.rfc-editor.org/info/rfc8244>.\n
      \  [RFC8499]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n              Terminology\",
      BCP 219, RFC 8499, DOI 10.17487/RFC8499,\n              January 2019, <https://www.rfc-editor.org/info/rfc8499>.\n
      \  [SUDN]     IANA, \"Special-Use Domain Names\",\n              <https://www.iana.org/assignments/special-use-domain-\n
      \             names/>.\n   [SUv4]     IANA, \"IANA IPv4 Special-Purpose Address
      Registry\",\n              <https://www.iana.org/assignments/iana-ipv4-special-\n
      \             registry/>.\n   [DNS1]     Cloudflare, \"1.1.1.1 - The free app
      that makes your\n              Internet safer.\", <https://1.1.1.1/>.\n   [DNS8]
      \    Google, \"Google Public DNS\",\n              <https://developers.google.com/speed/public-dns/>.\n
      \  [DNS9]     Quad9, \"Internet Security and Privacy In a Few Easy\n              Steps\",
      <https://quad9.net/>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Example BIND 9 Configuration\n   A BIND 9 recursive resolver can
    be configured to act as authoritative\n   for the necessary DNS64 names as described
    below.\n   In /etc/named.conf, the following line is added:\n      zone \"ipv4only.arpa\"
    \           { type master; file \"ipv4only\"; };\n   The file /var/named/ipv4only
    is created with the following content:\n      $TTL 86400               ; Default
    TTL 24 hours\n      @ IN SOA nameserver.example. admin.nameserver.example. (\n
    \              2016052400      ; Serial\n               7200            ; Refresh
    ( 7200 = 2 hours)\n               3600            ; Retry   ( 3600 = 1 hour)\n
    \              15724800        ; Expire  (15724800 = 6 months)\n               60
    \             ; Minimum\n               )\n      @ IN NS  nameserver.example.\n
    \     @ IN A    192.0.0.170\n      @ IN A    192.0.0.171\n      @ IN AAAA 64:ff9b::192.0.0.170
    ; If not using Well-Known Prefix\n      @ IN AAAA 64:ff9b::192.0.0.171 ; place
    chosen NAT64 prefix here\n"
  title: Appendix A.  Example BIND 9 Configuration
- contents:
  - "Acknowledgements\n   Thanks to Jouni Korhonen, Teemu Savolainen, and Dan Wing,
    for\n   devising the NAT64 Prefix Discovery mechanism [RFC7050] and for their\n
    \  feedback on this document.\n   Thanks to Geoff Huston for his feedback on this
    document.\n   Thanks to Erik Kline for pointing out that the in-addr.arpa names
    are\n   special, too.\n   Thanks to Mark Andrews for conclusively pointing out
    the reasons why\n   the 'ipv4only.arpa' zone must be an insecure delegation in
    order for\n   the NAT64 Prefix Discovery mechanism [RFC7050] to work and for many\n
    \  other very helpful comments.\n   Thanks particularly to Lorenzo Colitti for
    an especially spirited\n   hallway discussion at IETF 96 in Berlin, which lead
    directly to\n   significant improvements in how this document presents the issues.\n
    \  Thanks to Scott Bradner, Bernie Volz, Barry Leiba, Mirja Kuehlewind,\n   Suresh
    Krishnan, Benjamin Kaduk, Roman Danyliw, Eric Vyncke, and the\n   other IESG reviewers
    for their thoughtful feedback.\n   Thanks to Dave Thaler and Warren Kumari for
    generously helping\n   shepherd this document through the publication process.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Inc.\n   One Apple Park Way\n
    \  Cupertino, California 95014\n   United States of America\n   Phone: +1 (408)
    996-1010\n   Email: cheshire@apple.com\n   David Schinazi\n   Google LLC\n   1600
    Amphitheatre Parkway\n   Mountain View, California 94043\n"
  title: Authors' Addresses
