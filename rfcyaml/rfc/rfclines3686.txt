Abstract This document describes the use of Advanced Encryption Standard (AES) Counter Mode, with an explicit initialization vector, as an IPsec Encapsulating Security Payload (ESP) confidentiality mechanism.
The National Institute of Standards and Technology (NIST) recently selected the Advanced Encryption Standard (AES) [AES], also known as Rijndael.
The AES is a block cipher, and it can be used in many different modes.
This document describes the use of AES Counter Mode (AES CTR), with an explicit initialization vector (IV), as an IPsec Encapsulating Security Payload (ESP)
This document does not provide an overview of IPsec.
However, information about how the various components of IPsec and the way in which they collectively provide security services is available in [ARCH] and [ROADMAP].
Conventions Used In This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [STDWORDS].
This section contains a brief description of the relevant characteristics of the AES block cipher.
Implementation requirements are also discussed.
Counter Mode NIST has defined five modes of operation for AES and other FIPS  approved block ciphers [MODES].
Each of these modes has different characteristics.
The five modes are: ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher FeedBack), OFB (Output FeedBack), and CTR (Counter).
Only AES Counter mode (AES CTR) is discussed in this specification.
AES CTR requires the encryptor to generate a unique per packet value, and communicate this value to the decryptor.
This specification calls this per packet value an initialization vector (IV).
The same IV and key combination MUST NOT be used more than once.
The encryptor can generate the IV in any manner that ensures uniqueness.
Common approaches to IV generation include incrementing a counter for each packet and linear feedback shift registers (LFSRs).
This specification calls for the use of a nonce for additional protection against precomputation attacks.
The nonce value need not be secret.
However, the nonce MUST be unpredictable prior to the establishment of the IPsec security association that is making use of AES CTR.
AES CTR has many properties that make it an attractive encryption algorithm for in high speed networking.
AES CTR uses the AES block cipher to create a stream cipher.
Data is encrypted and decrypted by XORing with the key stream produced by AES encrypting sequential counter block values.
AES CTR is easy to implement, and AES CTR can be pipelined and parallelized.
AES CTR also supports key stream precomputation.
Pipelining is possible because AES has multiple rounds (see section 2.2).
A hardware implementation (and some software implementations) can create a pipeline by unwinding the loop implied by this round structure.
For example, after a 16 octet block has been input, one round later another 16 octet block can be input, and so on.
In AES  CTR, these inputs are the sequential counter block values used to generate the key stream.
Multiple independent AES encrypt implementations can also be used to improve performance.
For example, one could use two AES encrypt implementations in parallel, to process a sequence of counter block values, doubling the effective throughput.
The sender can precompute the key stream.
Since the key stream does not depend on any data in the packet, the key stream can be precomputed once the nonce and IV are assigned.
This precomputation can reduce packet latency.
The receiver cannot perform similar precomputation because the IV will not be known before the packet arrives.
AES CTR uses the only AES encrypt operation (for both encryption and decryption), making AES CTR implementations smaller than implementations of many other AES modes.
When used correctly, AES CTR provides a high level of confidentiality.
Unfortunately, AES CTR is easy to use incorrectly.
Being a stream cipher, any reuse of the per packet value, called the IV, with the same nonce and key is catastrophic.
An IV collision immediately leaks information about the plaintext in both packets.
For this reason, it is inappropriate to use this mode of operation with static keys.
Extraordinary measures would be needed to prevent reuse of an IV value with the static key across power cycles.
To be safe, implementations MUST use fresh keys with AES CTR.
The Internet Key Exchange (IKE)
[IKE] protocol can be used to establish fresh keys.
IKE can also provide the nonce value.
With AES CTR, it is trivial to use a valid ciphertext to forge other (valid to the decryptor) ciphertexts.
Thus, it is equally catastrophic to use AES CTR without a companion authentication function.
Implementations MUST use AES CTR in conjunction with an authentication function, such as HMAC SHA 1 96 [HMAC SHA].
To encrypt a payload with AES CTR, the encryptor partitions the plaintext, PT, into 128 bit blocks.
The final block need not be 128 bits; it can be less.
Each PT block is XORed with a block of the key stream to generate the ciphertext, CT.
The AES encryption of each counter block results in 128 bits of key stream.
The most significant 96 bits of the counter block are set to the nonce value, which is 32 bits, followed by the per packet IV value, which is 64 bits.
The least significant 32 bits of the counter block are initially set to one.
This counter value is incremented by one to generate subsequent counter blocks, each resulting in another 128 bits of key stream.
The encryption of n plaintext blocks can be summarized as: CTRBLK :  NONCE
The AES() function performs AES encryption with the fresh key.
The TRUNC() function truncates the output of the AES encrypt operation to the same length as the final plaintext block, returning the most significant bits.
The decryption of n ciphertext blocks can be summarized as: CTRBLK :  NONCE
Key Size and Rounds AES supports three key sizes: 128 bits, 192 bits, and 256 bits.
The default key size is 128 bits, and all implementations MUST support this key size.
Implementations MAY also support key sizes of 192 bits and 256 bits.
AES uses a different number of rounds for each of the defined key sizes.
When a 128 bit key is used, implementations MUST use 10 rounds.
When a 192 bit key is used, implementations MUST use 12 rounds.
When a 256 bit key is used, implementations MUST use 14 rounds.
The AES has a block size of 128 bits (16 octets).
As such, when using AES CTR, each AES encrypt operation generates 128 bits of key stream.
AES CTR encryption is the XOR of the key stream with the plaintext.
AES CTR decryption is the XOR of the key stream with the ciphertext.
If the generated key stream is longer than the plaintext or ciphertext, the extra key stream bits are simply discarded.
For this reason, AES CTR does not require the plaintext to be padded to a multiple of the block size.
However, to provide limited traffic flow confidentiality, padding MAY be included, as specified in [ESP].
The ESP payload is comprised of the IV followed by the ciphertext.
The payload field, as defined in [ESP], is structured as shown in Figure 1. 0
ESP Payload Encrypted with AES CTR 3.1.
The AES CTR IV field MUST be eight octets.
The IV MUST be chosen by the encryptor in a manner that ensures that the same IV value is used only once for a given key.
The encryptor can generate the IV in any manner that ensures uniqueness.
Common approaches to IV generation include incrementing a counter for each packet and linear feedback shift registers (LFSRs).
Including the IV in each packet ensures that the decryptor can generate the key stream needed for decryption, even when some packets are lost or reordered.
The encrypted payload contains the ciphertext.
AES CTR mode does not require plaintext padding.
However, ESP does require padding to 32 bit word align the authentication data.
The padding, Pad Length, and the Next Header MUST be concatenated with the plaintext before performing encryption, as described in [ESP].
Since it is trivial to construct a forgery AES CTR ciphertext from a valid AES CTR ciphertext, AES CTR implementations MUST employ a non  NULL ESP authentication method.
[HMAC SHA] is a likely choice.
Each packet conveys the IV that is necessary to construct the sequence of counter blocks used to generate the key stream necessary to decrypt the payload.
The AES counter block cipher block is 128 bits.
Figure 2 shows the format of the counter block. 0
The components of the counter block are as follows:
The Nonce field is 32 bits.
As the name implies, the nonce is a single use value.
That is, a fresh nonce value MUST be assigned for each security association.
It MUST be assigned at the beginning of the security association.
The nonce value need not be secret, but it MUST be unpredictable prior to the beginning of the security association.
The IV field is 64 bits.
As described in section 3.1, the IV MUST be chosen by the encryptor in a manner that ensures that the same IV value is used only once for a given key.
The block counter field is the least significant 32 bits of the counter block.
The block counter begins with the value of one, and it is incremented to generate subsequent portions of the key stream.
The block counter is a 32 bit big endian integer value.
Using the encryption process described in section 2.1, this construction permits each packet to consist of up to: (2^32
68,719,476,720 octets This construction can produce enough key stream for each packet sufficient to handle any IPv6 jumbogram [JUMBO].
This section describes the conventions used to generate keying material and nonces for use with AES CTR using the Internet Key Exchange (IKE) [IKE] protocol.
The identifiers and attributes needed to negotiate a security association which uses AES CTR are also defined.
Keying Material and Nonces As described in section 2.1, implementations MUST use fresh keys with AES CTR.
IKE can be used to establish fresh keys.
This section describes the conventions for obtaining the unpredictable nonce value from IKE.
Note that this convention provides a nonce value that is secret as well as unpredictable.
IKE makes use of a pseudo random function (PRF) to derive keying material.
The PRF is used iteratively to derive keying material of arbitrary size, called KEYMAT.
Keying material is extracted from the output string without regard to boundaries.
The size of the requested KEYMAT MUST be four octets longer than is needed for the associated AES key.
The keying material is used as follows:
AES CTR with a 128 bit key The KEYMAT requested for each AES CTR key is 20 octets.
The first 16 octets are the 128 bit AES key, and the remaining four octets are used as the nonce value in the counter block.
AES CTR with a 192 bit key
The KEYMAT requested for each AES CTR key is 28 octets.
The first 24 octets are the 192 bit AES key, and the remaining four octets are used as the nonce value in the counter block.
AES CTR with a 256 bit key
The KEYMAT requested for each AES CTR key is 36 octets.
The first 32 octets are the 256 bit AES key, and the remaining four octets are used as the nonce value in the counter block.
This document does not specify the conventions for using AES CTR for IKE Phase 1 negotiations.
For AES CTR to be used in this manner, a separate specification is needed, and an Encryption Algorithm Identifier needs to be assigned.
Phase 2 Identifier For IKE Phase 2 negotiations, IANA has assigned an ESP Transform Identifier of 13 for AES CTR with an explicit IV.
Since the AES supports three key lengths, the Key Length attribute MUST be specified in the IKE Phase 2 exchange [DOI].
The Key Length attribute MUST have a value of 128, 192, or 256.
This section contains nine test vectors, which can be used to confirm that an implementation has correctly implemented AES CTR.
The first three test vectors use AES with a 128 bit key; the next three test vectors use AES with a 192 bit key; and the last three test vectors use AES with a 256 bit key.
00 30 00 00 00 00 00 00 00 00 00
B7 60 33 28 DB C2 93 1B 41 0E 16 C8 06 7E 62
7E 24 06 78 17 FA E0 D7 43 D6 CE 1F
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter Block (1): 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00
FB 3F 0C EF 52 CF 41 DF E4 FF 2A C4 8D 5C A0
28 Test Vector #3: Encrypting 36 octets using AES CTR with 128 bit key AES Key
: 76 91 BE 03 5E 50 20 A8 AC 6E 61
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter Block (1): 00 E0 01 7B 27 77 7F 3F 4A 17 86 F0 00 00 00 01
: C1 CE 4A AB 9B 2A FB DE C7 4F 58 E2 E3 D6 7C D8 Counter Block (2): 00 E0 01 7B 27
77 7F 3F 4A 17 86 F0 00 00
: 00 E0 01 7B 27 77 7F 3F 4A 17 86 F0 00 00 00 03
: C1 CF 48 A8 9F 2F FD D9 CF 46 52 E9 EF DB 72 D7 : 45 40 A4 2B DE 6D 78 36 D5 9A 5C EA AE F3 10 53 : 25 B2 07 2F Test Vector #4:
C9 F5 79 C1 75 F9 3E 3B FB 0E
ED : 86 3D 06 CC FD B7 85 15
48 36 73 3C 14 7D 6D
7C 5C B2 40 1B 3D C3 3C 19 E7 34 08 19 E0 F6 9C : 67 8C 3D B8 E6 F6 A9 1A AES CTR
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter Block (1): 00 96 B0 3B 02 0C
6E AD C2 CB 50 0D 00 00
35 76 D6 A0 F1 7D 3C C3 90 Counter Block (2):
00 96 B0 3B 02
6E AD C2 CB 50 0D 00
FA E4 5E E9 E5 1F
45 32 43 FC 60 9B 23 32 7E DF AA FA 71 31 CD 9F : 84 90 70 1C 5A D4 A7 9C FC 1F E0 FF 42 F4 FB 00
5C BD 60 27 8D CC 09 12
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter Block (1):
00 07 BD FD 5C BD
60 27 8D CC 09 12 00 00 00 01
60 27 8D CC 09 12 00 00 00 02
AB EE 09 35 Test Vector #7:
1D B0 6F 4C 8A 05
42 C8 69 6F 6C :
6A 81 AF 1E EC 96 B4 D3 7F C1 D6 89 E6 C1 C1 04
: 00 00 00 60
60 DB 56 72 C9 7A A8 F0 B2 00 00
14 5A D0 1D BF 82 4E C7 56 08 63 DC 71 E3 E0 C0 Test Vector
58 79 EF F8 86 : C6 6D D5 1A 5B 6A 99
74 4B 50 59 0C 87 A2 38 84
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter block (1): 00 FA AC 24 C1
58 5E F1 5A 43 D8 75 00 00 00 01
0A 00 8C 43 BC A6 Counter block (2)
: 00 FA AC 24 C1 58 5E F1 5A 43 D8 75 00 00 00 02
F0 5E 23 1B 38 94 61 2C 49 EE 00
0B 80 4E B2 A9 :
83 9D 6A 55 30 83 1D
93 44 AF 1C Test Vector #9:
7C E6 91 48 E4 F1 72 6E 2F 43
AA 62 D9 F8 05
53 2E DF F1 EE D6 87
70 A1 C1 11 48
0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter block (1): 00 1C C5 B7 51
A5 1D 70 A1 C1 11 48 00 00
50 81 19 0E BD F0 C6 7C 9E 4D 26
C7 41 A5 Counter block (2): 00 1C C5 B7 51
A5 1D 70 A1 C1 11 48 00 00
A4 16 CD 95 71 7C EB 10 EC 95 DA AE 9F CB 19 00 Counter block (3): 00 1C C5 B7 51 A5 1D 70 A1 C1 11 48 00 00 00 03
94 46 2A CA 4F AA : B4 07 DF 86 65 69 FD 07 F4 8C C0 B5 83 D6 07 1F : 1E C0 E6 B8 7.
Security Considerations When used properly, AES CTR mode provides strong confidentiality.
Bellare, Desai, Jokipii, Rogaway show in [BDJR] that the privacy guarantees provided by counter mode are at least as strong as those for CBC mode when using the same block cipher.
Unfortunately, it is very easy to misuse this counter mode.
If counter block values are ever used for more that one packet with the same key, then the same key stream will be used to encrypt both packets, and the confidentiality guarantees are voided.
What happens if the encryptor XORs the same key stream with two different plaintexts?
Suppose two plaintext byte sequences P1, P2, P3 and Q1, Q2, Q3 are both encrypted with key stream K1, K2, K3.
The two corresponding ciphertexts are: (P1 XOR K1), (P2 XOR K2), (P3 XOR K3)
(Q1 XOR K1), (Q2 XOR K2),
If both of these two ciphertext streams are exposed to an attacker, then a catastrophic failure of confidentiality results, since: (P1 XOR K1)
P1 XOR Q1 (P2 XOR K2)
P2 XOR Q2 (P3 XOR K3)
Once the attacker obtains the two plaintexts XORed together, it is relatively straightforward to separate them.
Thus, using any stream cipher, including AES CTR, to encrypt two plaintexts under the same key stream leaks the plaintext.
Therefore, stream ciphers, including AES CTR, should not be used with static keys.
It is inappropriate to use AES CTR with static keys.
Extraordinary measures would be needed to prevent reuse of a counter block value with the static key across power cycles.
To be safe, ESP implementations MUST use fresh keys with AES CTR.
The Internet Key Exchange (IKE) protocol [IKE] can be used to establish fresh keys.
IKE can also be used to establish the nonce at the beginning of the security association.
When IKE is used to establish fresh keys between two peer entities, separate keys are established for the two traffic flows.
When a mechanism other than IKE is used to establish fresh keys, and that mechanism establishes only a single key to encrypt packets, then there is a high probability that the peers will select the same IV values for some packets.
Thus, to avoid counter block collisions, ESP implementations that permit use of the same key for encrypting outbound traffic and decrypting incoming traffic with the same peer MUST ensure that the two peers assign different Nonce values to the security association.
Data forgery is trivial with CTR mode.
The demonstration of this attack is similar to the key stream reuse discussion above.
If a known plaintext byte sequence P1, P2, P3 is encrypted with key stream K1, K2, K3, then the attacker can replace the plaintext with one of his own choosing.
The ciphertext is: (P1 XOR K1), (P2 XOR K2), (P3 XOR K3)
Decryption of the attacker generated ciphertext will yield exactly what the attacker intended: (Q1 XOR P1), (Q2 XOR P2), (Q3 XOR P3)
Accordingly, ESP implementations MUST use of AES CTR in conjunction with ESP authentication.
Additionally, since AES has a 128 bit block size, regardless of the mode employed, the ciphertext generated by AES encryption becomes distinguishable from random values after 2^64 blocks are encrypted with a single key.
Since ESP with Enhanced Sequence Numbers allows for up to 2^64 packets in a single security association, there is real potential for more than 2^64 blocks to be encrypted with one key.
Therefore, implementations SHOULD generate a fresh key before
2^64 blocks are encrypted with the same key.
Note that ESP with 32  bit Sequence Numbers will not exceed
even if all of the packets are maximum length
There are fairly generic precomputation attacks against all block cipher modes that allow a meet in the middle attack against the key.
These attacks require the creation and searching of huge tables of ciphertext associated with known plaintext and known keys.
Assuming that the memory and processor resources are available for a precomputation attack, then the theoretical strength of AES CTR (and any other block cipher mode) is limited to 2^(n/2) bits, where n is the number of bits in the key.
The use of long keys is the best countermeasure to precomputation attacks.
Therefore, implementations that employ 128 bit AES keys should take precautions to make the precomputation attacks more difficult.
The unpredictable nonce value in the counter block significantly increases the size of the table that the attacker must compute to mount a successful attack.
In the development of this specification, the use of the ESP sequence number field instead of an explicit IV field was considered.
This selection is not a cryptographic security issue, as either approach will prevent counter block collisions.
In a very conservative model of encryption security, at most 2^64 blocks ought to be encrypted with AES CTR under a single key.
Under this constraint, no more than 64 bits are needed to identify each packet within a security association.
Since the ESP extended sequence number is 64 bits, it is an obvious candidate for use as an implicit IV.
This would dictate a single method for the assignment of per packet value in the counter block.
The use of an explicit IV does not dictate such a method, which is desirable for several reasons.
Only the encryptor can ensure that the value is not used for more than one packet, so there is no advantage to selecting a mechanism that allows the decryptor to determine whether counter block values collide.
Damage from the collision is done, whether the decryptor detects it or not.
Allows adders, LFSRs, and any other technique that meets the time budget of the encryptor, so long as the technique results in a unique value for each packet.
Adders are simple and straightforward to implement, but due to carries, they do not execute in constant time.
LFSRs offer an alternative that executes in constant time.
Complexity is in control of the implementer.
Further, the decision made by the implementer of the encryptor does not make the decryptor more (or less) complex.
When the encryptor has more than one cryptographic hardware device, an IV prefix can be assigned to each device, ensuring that collisions will not occur.
Yet, since the decryptor does not need to examine IV structure, the decryptor is unaffected by the IV structure selected by the encryptor.
One cannot make use of the same technique with the ESP sequence numbers, because the semantics for them require sequential value generation.
Assurance boundaries are very important to implementations that will be evaluated against the FIPS Pub 140 1 or FIPS Pub 140 2
The assignment of the per packet counter block value needs to be inside the assurance boundary.
Some implementations assign the sequence number inside the assurance boundary, but others do not.
A sequence number collision does not have the dire consequences, but, as described in section 6, a collision in counter block values has disastrous consequences.
Coupling with the sequence number is possible in those architectures where the sequence number assignment is performed within the assurance boundary.
In this situation, the sequence number and the IV field will contain the same value.
Decoupling from the sequence number is possible in those architectures where the sequence number assignment is performed outside the assurance boundary.
The use of an explicit IV field directly follows from the decoupling of the sequence number and the per packet counter block value.
The overhead associated with 64 bits for the IV field is acceptable.
This overhead is significantly less than the overhead associated with Cipher Block Chaining (CBC) mode.
As normally employed, CBC requires a full block for the IV and, on average, half of a block for padding.
AES CTR with an explicit IV has about one third of the overhead as AES CBC, and the overhead is constant for each packet.
The inclusion of the nonce provides a weak countermeasure against precomputation attacks.
For this countermeasure to be effective, the attacker must not be able to predict the value of the nonce well in advance of security association establishment.
The use of long keys provides a strong countermeasure to precomputation attacks, and AES offers key sizes that thwart these attacks for many decades to come.
A 28 bit block counter value is sufficient for the generation of a key stream to encrypt the largest possible IPv6 jumbogram [JUMBO]; however, a 32 bit field is used.
This size is convenient for both hardware and software implementations.
IANA Considerations IANA has assigned 13 as the ESP transform number for AES CTR with an explicit IV.
