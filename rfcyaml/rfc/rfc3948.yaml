- contents:
  - '                 UDP Encapsulation of IPsec ESP Packets

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This protocol specification defines methods to encapsulate and\n
    \  decapsulate IP Encapsulating Security Payload (ESP) packets inside\n   UDP
    packets for traversing Network Address Translators.  ESP\n   encapsulation, as
    defined in this document, can be used in both IPv4\n   and IPv6 scenarios.  Whenever
    negotiated, encapsulation is used with\n   Internet Key Exchange (IKE).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Packet Formats . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n       2.1.  UDP-Encapsulated ESP Header Format . . . . . . . . .
    . .  3\n       2.2.  IKE Header Format for Port 4500  . . . . . . . . . . . .
    \ 4\n       2.3.  NAT-Keepalive Packet Format  . . . . . . . . . . . . . .  4\n
    \  3.  Encapsulation and Decapsulation Procedures . . . . . . . . . .  5\n       3.1.
    \ Auxiliary Procedures . . . . . . . . . . . . . . . . . .  5\n             3.1.1.
    \ Tunnel Mode Decapsulation NAT Procedure  . . . .  5\n             3.1.2.  Transport
    Mode Decapsulation NAT Procedure . . .  5\n       3.2.  Transport Mode ESP Encapsulation
    . . . . . . . . . . . .  6\n       3.3.  Transport Mode ESP Decapsulation . .
    . . . . . . . . . .  6\n       3.4.  Tunnel Mode ESP Encapsulation  . . . . .
    . . . . . . . .  7\n       3.5.  Tunnel Mode ESP Decapsulation  . . . . . . .
    . . . . . .  7\n   4.  NAT Keepalive Procedure  . . . . . . . . . . . . . . .
    . . . .  7\n   5.  Security Considerations  . . . . . . . . . . . . . . . . .
    . .  8\n       5.1.  Tunnel Mode Conflict . . . . . . . . . . . . . . . . . .
    \ 8\n       5.2.  Transport Mode Conflict  . . . . . . . . . . . . . . . .  9\n
    \  6.  IAB Considerations . . . . . . . . . . . . . . . . . . . . . . 10\n   7.
    \ Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 11\n   8.  References
    . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n       8.1.  Normative
    References . . . . . . . . . . . . . . . . . . 11\n       8.2.  Informative References
    . . . . . . . . . . . . . . . . . 11\n   A.  Clarification of Potential NAT Multiple
    Client Solutions . . . 12\n       Authors' Addresses . . . . . . . . . . . . .
    . . . . . . . . . 14\n       Full Copyright Statement . . . . . . . . . . . .
    . . . . . . . 15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This protocol specification defines methods to encapsulate
    and\n   decapsulate ESP packets inside UDP packets for traversing Network\n   Address
    Translators (NATs) (see [RFC3715], section 2.2, case i).  The\n   UDP port numbers
    are the same as those used by IKE traffic, as\n   defined in [RFC3947].\n   The
    sharing of the port numbers for both IKE and UDP encapsulated ESP\n   traffic
    was selected because it offers better scaling (only one NAT\n   mapping in the
    NAT; no need to send separate IKE keepalives), easier\n   configuration (only
    one port to be configured in firewalls), and\n   easier implementation.\n   A
    client's needs should determine whether transport mode or tunnel\n   mode is to
    be supported (see [RFC3715], Section 3, \"Telecommuter\n   scenario\").  L2TP/IPsec
    clients MUST support the modes as defined in\n   [RFC3193].  IPsec tunnel mode
    clients MUST support tunnel mode.\n   An IKE implementation supporting this protocol
    specification MUST NOT\n   use the ESP SPI field zero for ESP packets.  This ensures
    that IKE\n   packets and ESP packets can be distinguished from each other.\n   As
    defined in this document, UDP encapsulation of ESP packets is\n   written in terms
    of IPv4 headers.  There is no technical reason why\n   an IPv6 header could not
    be used as the outer header and/or as the\n   inner header.\n   Because the protection
    of the outer IP addresses in IPsec AH is\n   inherently incompatible with NAT,
    the IPsec AH was left out of the\n   scope of this protocol specification.  This
    protocol also assumes\n   that IKE (IKEv1 [RFC2401] or IKEv2 [IKEv2]) is used
    to negotiate the\n   IPsec SAs.  Manual keying is not supported.\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - '2.  Packet Formats

    '
  - contents:
    - "2.1.  UDP-Encapsulated ESP Header Format\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |        Source Port            |      Destination Port         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Length              |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      ESP header [RFC2406]                     |\n   ~                                                               ~\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The UDP header is a standard [RFC0768] header, where\n   o  the Source Port
      and Destination Port MUST be the same as that used\n      by IKE traffic,\n
      \  o  the IPv4 UDP Checksum SHOULD be transmitted as a zero value, and\n   o
      \ receivers MUST NOT depend on the UDP checksum being a zero value.\n   The
      SPI field in the ESP header MUST NOT be a zero value.\n"
    title: 2.1.  UDP-Encapsulated ESP Header Format
  - contents:
    - "2.2.  IKE Header Format for Port 4500\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |        Source Port            |      Destination Port         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Length              |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Non-ESP Marker                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      IKE header [RFC2409]                     |\n   ~                                                               ~\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The UDP header is a standard [RFC0768] header and is used as defined\n   in
      [RFC3947].  This document does not set any new requirements for\n   the checksum
      handling of an IKE packet.\n   A Non-ESP Marker is 4 zero-valued bytes aligning
      with the SPI field\n   of an ESP packet.\n"
    title: 2.2.  IKE Header Format for Port 4500
  - contents:
    - "2.3.  NAT-Keepalive Packet Format\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |        Source Port            |      Destination Port         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Length              |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    0xFF       |\n   +-+-+-+-+-+-+-+-+\n   The UDP header is a standard
      [RFC0768] header, where\n   o  the Source Port and Destination Port MUST be
      the same as used by\n      UDP-ESP encapsulation of Section 2.1,\n   o  the
      IPv4 UDP Checksum SHOULD be transmitted as a zero value, and\n   o  receivers
      MUST NOT depend upon the UDP checksum being a zero\n      value.\n   The sender
      MUST use a one-octet-long payload with the value 0xFF.\n   The receiver SHOULD
      ignore a received NAT-keepalive packet.\n"
    title: 2.3.  NAT-Keepalive Packet Format
  title: 2.  Packet Formats
- contents:
  - '3.  Encapsulation and Decapsulation Procedures

    '
  - contents:
    - '3.1.  Auxiliary Procedures

      '
    - contents:
      - "3.1.1.  Tunnel Mode Decapsulation NAT Procedure\n   When a tunnel mode has
        been used to transmit packets (see [RFC3715],\n   section 3, criteria \"Mode
        support\" and \"Telecommuter scenario\"), the\n   inner IP header can contain
        addresses that are not suitable for the\n   current network.  This procedure
        defines how these addresses are to\n   be converted to suitable addresses
        for the current network.\n   Depending on local policy, one of the following
        MUST be done:\n   1.  If a valid source IP address space has been defined
        in the policy\n       for the encapsulated packets from the peer, check that
        the source\n       IP address of the inner packet is valid according to the
        policy.\n   2.  If an address has been assigned for the remote peer, check
        that\n       the source IP address used in the inner packet is the assigned
        IP\n       address.\n   3.  NAT is performed for the packet, making it suitable
        for transport\n       in the local network.\n"
      title: 3.1.1.  Tunnel Mode Decapsulation NAT Procedure
    - contents:
      - "3.1.2.  Transport Mode Decapsulation NAT Procedure\n   When a transport mode
        has been used to transmit packets, contained\n   TCP or UDP headers will have
        incorrect checksums due to the change of\n   parts of the IP header during
        transit.  This procedure defines how to\n   fix these checksums (see [RFC3715],
        section 2.1, case b).\n   Depending on local policy, one of the following
        MUST be done:\n   1.  If the protocol header after the ESP header is a TCP/UDP
        header\n       and the peer's real source and destination IP address have
        been\n       received according to [RFC3947], incrementally recompute the\n
        \      TCP/UDP checksum:\n       *  Subtract the IP source address in the
        received packet from the\n          checksum.\n       *  Add the real IP source
        address received via IKE to the\n          checksum (obtained from the NAT-OA)\n
        \      *  Subtract the IP destination address in the received packet\n          from
        the checksum.\n       *  Add the real IP destination address received via
        IKE to the\n          checksum (obtained from the NAT-OA).\n       Note: If
        the received and real address are the same for a given\n       address (e.g.,
        say the source address), the operations cancel and\n       don't need to be
        performed.\n   2.  If the protocol header after the ESP header is a TCP/UDP
        header,\n       recompute the checksum field in the TCP/UDP header.\n   3.
        \ If the protocol header after the ESP header is a UDP header, set\n       the
        checksum field to zero in the UDP header.  If the protocol\n       after the
        ESP header is a TCP header, and if there is an option\n       to flag to the
        stack that the TCP checksum does not need to be\n       computed, then that
        flag MAY be used.  This SHOULD only be done\n       for transport mode, and
        if the packet is integrity protected.\n       Tunnel mode TCP checksums MUST
        be verified.  (This is not a\n       violation to the spirit of section 4.2.2.7
        in [RFC1122] because a\n       checksum is being generated by the sender and
        verified by the\n       receiver.  That checksum is the integrity over the
        packet\n       performed by IPsec.)\n   In addition an implementation MAY
        fix any contained protocols that\n   have been broken by NAT (see [RFC3715],
        section 2.1, case g).\n"
      title: 3.1.2.  Transport Mode Decapsulation NAT Procedure
    title: 3.1.  Auxiliary Procedures
  - contents:
    - "3.2.  Transport Mode ESP Encapsulation\n                 BEFORE APPLYING ESP/UDP\n
      \           ----------------------------\n      IPv4  |orig IP hdr  |     |
      \     |\n            |(any options)| TCP | Data |\n            ----------------------------\n
      \                AFTER APPLYING ESP/UDP\n            -------------------------------------------------------\n
      \     IPv4  |orig IP hdr  | UDP | ESP |     |      |   ESP   | ESP|\n            |(any
      options)| Hdr | Hdr | TCP | Data | Trailer |Auth|\n            -------------------------------------------------------\n
      \                                     |<----- encrypted ---->|\n                                |<------
      authenticated ----->|\n   1.  Ordinary ESP encapsulation procedure is used.\n
      \  2.  A properly formatted UDP header is inserted where shown.\n   3.  The
      Total Length, Protocol, and Header Checksum (for IPv4) fields\n       in the
      IP header are edited to match the resulting IP packet.\n"
    title: 3.2.  Transport Mode ESP Encapsulation
  - contents:
    - "3.3.  Transport Mode ESP Decapsulation\n   1.  The UDP header is removed from
      the packet.\n   2.  The Total Length, Protocol, and Header Checksum (for IPv4)
      fields\n       in the new IP header are edited to match the resulting IP packet.\n
      \  3.  Ordinary ESP decapsulation procedure is used.\n   4.  Transport mode
      decapsulation NAT procedure is used.\n"
    title: 3.3.  Transport Mode ESP Decapsulation
  - contents:
    - "3.4.  Tunnel Mode ESP Encapsulation\n                 BEFORE APPLYING ESP/UDP\n
      \           ----------------------------\n      IPv4  |orig IP hdr  |     |
      \     |\n            |(any options)| TCP | Data |\n            ----------------------------\n
      \                AFTER APPLYING ESP/UDP\n        --------------------------------------------------------------\n
      \  IPv4 |new h.| UDP | ESP |orig IP hdr  |     |      |   ESP   | ESP|\n        |(opts)|
      Hdr | Hdr |(any options)| TCP | Data | Trailer |Auth|\n        --------------------------------------------------------------\n
      \                          |<------------ encrypted ----------->|\n                     |<-------------
      authenticated ------------>|\n   1.  Ordinary ESP encapsulation procedure is
      used.\n   2.  A properly formatted UDP header is inserted where shown.\n   3.
      \ The Total Length, Protocol, and Header Checksum (for IPv4) fields\n   in the
      new IP header are edited to match the resulting IP packet.\n"
    title: 3.4.  Tunnel Mode ESP Encapsulation
  - contents:
    - "3.5.  Tunnel Mode ESP Decapsulation\n   1.  The UDP header is removed from
      the packet.\n   2.  The Total Length, Protocol, and Header Checksum (for IPv4)
      fields\n       in the new IP header are edited to match the resulting IP packet.\n
      \  3.  Ordinary ESP decapsulation procedure is used.\n   4.  Tunnel mode decapsulation
      NAT procedure is used.\n"
    title: 3.5.  Tunnel Mode ESP Decapsulation
  title: 3.  Encapsulation and Decapsulation Procedures
- contents:
  - "4.  NAT Keepalive Procedure\n   The sole purpose of sending NAT-keepalive packets
    is to keep NAT\n   mappings alive for the duration of a connection between the
    peers\n   (see [RFC3715], Section 2.2, case j).  Reception of NAT-keepalive\n
    \  packets MUST NOT be used to detect whether a connection is live.\n   A peer
    MAY send a NAT-keepalive packet if one or more phase I or\n   phase II SAs exist
    between the peers, or if such an SA has existed at\n   most N minutes earlier.
    \ N is a locally configurable parameter with a\n   default value of 5 minutes.\n
    \  A peer SHOULD send a NAT-keepalive packet if a need for it is\n   detected
    according to [RFC3947] and if no other packet to the peer\n   has been sent in
    M seconds.  M is a locally configurable parameter\n   with a default value of
    20 seconds.\n"
  title: 4.  NAT Keepalive Procedure
- contents:
  - '5.  Security Considerations

    '
  - contents:
    - "5.1.  Tunnel Mode Conflict\n   Implementors are warned that it is possible
      for remote peers to\n   negotiate entries that overlap in an SGW (security gateway),
      an issue\n   affecting tunnel mode (see [RFC3715], section 2.1, case e).\n             +----+
      \           \\ /\n             |    |-------------|----\\\n             +----+
      \           / \\    \\\n             Ari's           NAT 1     \\\n             Laptop
      \                    \\\n            10.1.2.3                     \\\n             +----+
      \           \\ /        \\       +----+          +----+\n             |    |-------------|----------+------|
      \   |----------|    |\n             +----+            / \\                +----+
      \         +----+\n             Bob's           NAT 2                  SGW           Suzy's\n
      \            Laptop                                               Server\n            10.1.2.3\n
      \  Because SGW will now see two possible SAs that lead to 10.1.2.3, it\n   can
      become confused about where to send packets coming from Suzy's\n   server.  Implementors
      MUST devise ways of preventing this from\n   occurring.\n   It is RECOMMENDED
      that SGW either assign locally unique IP addresses\n   to Ari's and Bob's laptop
      (by using a protocol such as DHCP over\n   IPsec) or use NAT to change Ari's
      and Bob's laptop source IP\n   addresses to these locally unique addresses before
      sending packets\n   forward to Suzy's server.  This covers the \"Scaling\" criteria
      of\n   section 3 in [RFC3715].\n   Please see Appendix A.\n"
    title: 5.1.  Tunnel Mode Conflict
  - contents:
    - "5.2.  Transport Mode Conflict\n   Another similar issue may occur in transport
      mode, with 2 clients,\n   Ari and Bob, behind the same NAT talking securely
      to the same server\n   (see [RFC3715], Section 2.1, case e).\n   Cliff wants
      to talk in the clear to the same server.\n             +----+\n             |
      \   |\n             +----+ \\\n             Ari's   \\\n             Laptop
      \  \\\n            10.1.2.3   \\\n             +----+    \\ /                +----+\n
      \            |    |-----+-----------------|    |\n             +----+    / \\
      \               +----+\n             Bob's     NAT                Server\n             Laptop
      \  /\n            10.1.2.4 /\n                    /\n            +----+ /\n
      \           |    |/\n            +----+\n            Cliff's\n            Laptop\n
      \          10.1.2.5\n   Now, transport SAs on the server will look like this:\n
      \  To Ari: Server to NAT, <traffic desc1>, UDP encap <4500, Y>\n   To Bob: Server
      to NAT, <traffic desc2>, UDP encap <4500, Z>\n   Cliff's traffic is in the clear,
      so there is no SA.\n   <traffic desc> is the protocol and port information.
      \ The UDP encap\n   ports are the ports used in UDP-encapsulated ESP format
      of section\n   2.1.  Y,Z are the dynamic ports assigned by the NAT during the
      IKE\n   negotiation.  So IKE traffic from Ari's laptop goes out on UDP\n   <4500,4500>.
      \ It reaches the server as UDP <Y,4500>, where Y is the\n   dynamically assigned
      port.\n   If the <traffic desc1> overlaps <traffic desc2>, then simple filter\n
      \  lookups may not be sufficient to determine which SA has to be used to\n   send
      traffic.  Implementations MUST handle this situation, either by\n   disallowing
      conflicting connections, or by other means.\n   Assume now that Cliff wants
      to connect to the server in the clear.\n   This is going to be difficult to
      configure, as the server already has\n   a policy (from Server to the NAT's
      external address) for securing\n   <traffic desc>.  For totally non-overlapping
      traffic descriptions,\n   this is possible.\n   Sample server policy could be
      as follows:\n   To Ari: Server to NAT, All UDP, secure\n   To Bob: Server to
      NAT, All TCP, secure\n   To Cliff: Server to NAT, ALL ICMP, clear text\n   Note
      that this policy also lets Ari and Bob send cleartext ICMP to\n   the server.\n
      \  The server sees all clients behind the NAT as the same IP address, so\n   setting
      up different policies for the same traffic descriptor is in\n   principle impossible.\n
      \  A problematic example of configuration on the server is as follows:\n   Server
      to NAT, TCP, secure (for Ari and Bob)\n   Server to NAT, TCP, clear (for Cliff)\n
      \  The server cannot enforce his policy, as it is possible that\n   misbehaving
      Bob sends traffic in the clear.  This is\n   indistinguishable from when Cliff
      sends traffic in the clear.  So it\n   is impossible to guarantee security from
      some clients behind a NAT,\n   while allowing clear text from different clients
      behind the SAME NAT.\n   If the server's security policy allows this, however,
      it can do\n   best-effort security: If the client from behind the NAT initiates\n
      \  security, his connection will be secured.  If he sends in the clear,\n   the
      server will still accept that clear text.\n   For security guarantees, the above
      problematic scenario MUST NOT be\n   allowed on servers.  For best effort security,
      this scenario MAY be\n   used.\n   Please see Appendix A.\n"
    title: 5.2.  Transport Mode Conflict
  title: 5.  Security Considerations
- contents:
  - "6.  IAB Considerations\n   The UNSAF [RFC3424] questions are addressed by the
    IPsec-NAT\n   compatibility requirements document [RFC3715].\n"
  title: 6.  IAB Considerations
- contents:
  - "7.  Acknowledgments\n   Thanks to Tero Kivinen and William Dixon, who contributed
    actively to\n   this document.\n   Thanks to Joern Sierwald, Tamir Zegman, Tatu
    Ylonen, and Santeri\n   Paavolainen, who contributed to the early documents about
    NAT\n   traversal.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\",
      STD 6, RFC 768,\n              August 1980.\n   [RFC2119]  Bradner, S., \"Key
      words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,
      RFC 2119, March 1997.\n   [RFC2401]  Kent, S. and R. Atkinson, \"Security Architecture
      for the\n              Internet Protocol\", RFC 2401, November 1998.\n   [RFC2406]
      \ Kent, S. and R. Atkinson, \"IP Encapsulating Security\n              Payload
      (ESP)\", RFC 2406, November 1998.\n   [RFC2409]  Harkins, D. and D. Carrel,
      \"The Internet Key Exchange\n              (IKE)\", RFC 2409, November 1998.\n
      \  [RFC3947]  Kivinen, T., \"Negotiation of NAT-Traversal in the IKE\",\n              RFC
      3947, January 2005.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC1122]  Braden, R., \"Requirements for
      Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122, October
      1989.\n   [RFC3193]  Patel, B., Aboba, B., Dixon, W., Zorn, G., and S. Booth,\n
      \             \"Securing L2TP using IPsec\", RFC 3193, November 2001.\n   [RFC3424]
      \ Daigle, L. and IAB, \"IAB Considerations for UNilateral\n              Self-Address
      Fixing (UNSAF) Across Network Address\n              Translation\", RFC 3424,
      November 2002.\n   [RFC3715]  Aboba, B. and W. Dixon, \"IPsec-Network Address
      Translation\n              (NAT) Compatibility Requirements\", RFC 3715, March
      2004.\n   [IKEv2]    Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\",\n
      \             Work in Progress, October 2004.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Clarification of Potential NAT Multiple Client Solutions\n   This
    appendix provides clarification about potential solutions to the\n   problem of
    multiple clients behind the same NAT simultaneously\n   connecting to the same
    destination IP address.\n   Sections 5.1 and 5.2 say that you MUST avoid this
    problem.  As this\n   is not a matter of wire protocol, but a matter local implementation,\n
    \  the mechanisms do not belong in the protocol specification itself.\n   They
    are instead listed in this appendix.\n   Choosing an option will likely depend
    on the scenarios for which one\n   uses/supports IPsec NAT-T.  This list is not
    meant to be exhaustive,\n   so other solutions may exist.  We first describe the
    generic choices\n   that solve the problem for all upper-layer protocols.\n   Generic
    choices for ESP transport mode:\n   Tr1) Implement a built-in NAT (network address
    translation) above\n   IPsec decapsulation.\n   Tr2) Implement a built-in NAPT
    (network address port translation)\n   above IPsec decapsulation.\n   Tr3) An
    initiator may decide not to request transport mode once NAT\n   is detected and
    may instead request a tunnel-mode SA.  This may be a\n   retry after transport
    mode is denied by the responder, or the\n   initiator may choose to propose a
    tunnel SA initially.  This is no\n   more difficult than knowing whether to propose
    transport mode or\n   tunnel mode without NAT.  If for some reason the responder
    prefers or\n   requires tunnel mode for NAT traversal, it must reject the quick
    mode\n   SA proposal for transport mode.\n   Generic choices for ESP tunnel mode:\n
    \  Tn1) Same as Tr1.\n   Tn2) Same as Tr2.\n   Tn3) This option is possible if
    an initiator can be assigned an\n   address through its tunnel SA, with the responder
    using DHCP.  The\n   initiator may initially request an internal address via the\n
    \  DHCP-IPsec method, regardless of whether it knows it is behind a NAT.\n   It
    may re-initiate an IKE quick mode negotiation for DHCP tunnel SA\n   after the
    responder fails the quick mode SA transport mode proposal.\n   This happens either
    when a NAT-OA payload is sent or because it\n   discovers from NAT-D that the
    initiator is behind a NAT and its local\n   configuration/policy will only accept
    a NAT connection when being\n   assigned an address through DHCP-IPsec.\n   There
    are also implementation choices that offer limited\n   interoperability.  Implementors
    should specify which applications or\n   protocols should work if these options
    are selected.  Note that\n   neither Tr4 nor Tn4, as described below, are expected
    to work with\n   TCP traffic.\n   Limited interoperability choices for ESP transport
    mode:\n   Tr4) Implement upper-layer protocol awareness of the inbound and\n   outbound
    IPsec SA so that it doesn't use the source IP and the source\n   port as the session
    identifier (e.g., an L2TP session ID mapped to\n   the IPsec SA pair that doesn't
    use the UDP source port or the source\n   IP address for peer uniqueness).\n   Tr5)
    Implement application integration with IKE initiation so that it\n   can rebind
    to a different source port if the IKE quick mode SA\n   proposal is rejected by
    the responder; then it can repropose the new\n   QM selector.\n   Limited interoperability
    choices for ESP tunnel mode:\n   Tn4) Same as Tr4.\n"
  title: Appendix A.  Clarification of Potential NAT Multiple Client Solutions
- contents:
  - "Authors' Addresses\n   Ari Huttunen\n   F-Secure Corporation\n   Tammasaarenkatu
    7\n   HELSINKI  FIN-00181\n   FI\n   EMail: Ari.Huttunen@F-Secure.com\n   Brian
    Swander\n   Microsoft\n   One Microsoft Way\n   Redmond, WA  98052\n   US\n   EMail:
    briansw@microsoft.com\n   Victor Volpe\n   Cisco Systems\n   124 Grove Street\n
    \  Suite 205\n   Franklin, MA  02038\n   US\n   EMail: vvolpe@cisco.com\n   Larry
    DiBurro\n   Nortel Networks\n   80 Central Street\n   Boxborough, MA  01719\n
    \  US\n   EMail: ldiburro@nortelnetworks.com\n   Markus Stenberg\n   FI\n   EMail:
    markus.stenberg@iki.fi\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
