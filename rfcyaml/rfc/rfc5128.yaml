- title: __initial_text__
  contents:
  - "           State of Peer-to-Peer (P2P) Communication across\n               \
    \    Network Address Translators (NATs)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo documents the various methods known to be in use by\n\
    \   applications to establish direct communication in the presence of\n   Network\
    \ Address Translators (NATs) at the current time.  Although\n   this memo is intended\
    \ to be mainly descriptive, the Security\n   Considerations section makes some\
    \ purely advisory recommendations\n   about how to deal with security vulnerabilities\
    \ the applications\n   could inadvertently create when using the methods described.\
    \  This\n   memo covers NAT traversal approaches used by both TCP- and UDP-based\n\
    \   applications.  This memo is not an endorsement of the methods\n   described,\
    \ but merely an attempt to capture them in a document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Scope ..........................................3\n\
    \   2. Terminology and Conventions Used ................................4\n  \
    \    2.1. Endpoint ...................................................5\n    \
    \  2.2. Endpoint Mapping ...........................................5\n      2.3.\
    \ Endpoint-Independent Mapping ...............................5\n      2.4. Endpoint-Dependent\
    \ Mapping .................................5\n      2.5. Endpoint-Independent\
    \ Filtering .............................6\n      2.6. Endpoint-Dependent Filtering\
    \ ...............................6\n      2.7. P2P Application ............................................7\n\
    \      2.8. NAT-Friendly P2P Application ...............................7\n  \
    \    2.9. Endpoint-Independent Mapping NAT (EIM-NAT) .................7\n    \
    \  2.10. Hairpinning ...............................................7\n   3. Techniques\
    \ Used by P2P Applications to Traverse NATs ............7\n      3.1. Relaying\
    \ ...................................................8\n      3.2. Connection\
    \ Reversal ........................................9\n      3.3. UDP Hole Punching\
    \ .........................................11\n           3.3.1. Peers behind\
    \ Different NATs ........................12\n           3.3.2. Peers behind the\
    \ Same NAT ..........................14\n           3.3.3. Peers Separated by\
    \ Multiple NATs ...................16\n      3.4. TCP Hole Punching .........................................18\n\
    \      3.5. UDP Port Number Prediction ................................19\n  \
    \    3.6. TCP Port Number Prediction ................................21\n   4.\
    \ Recent Work on NAT Traversal ...................................22\n   5. Summary\
    \ of Observations ........................................23\n      5.1. TCP/UDP\
    \ Hole Punching .....................................23\n      5.2. NATs Employing\
    \ Endpoint-Dependent Mapping .................23\n      5.3. Peer Discovery ............................................24\n\
    \      5.4. Hairpinning ...............................................24\n  \
    \ 6. Security Considerations ........................................24\n    \
    \  6.1. Lack of Authentication Can Cause Connection Hijacking .....24\n      6.2.\
    \ Denial-of-Service Attacks .................................25\n      6.3. Man-in-the-Middle\
    \ Attacks .................................26\n      6.4. Security Impact from\
    \ EIM-NAT Devices ......................26\n   7. Acknowledgments ................................................27\n\
    \   8. References .....................................................27\n  \
    \    8.1. Normative References ......................................27\n    \
    \  8.2. Informative References ....................................27\n"
- title: 1.  Introduction and Scope
  contents:
  - "1.  Introduction and Scope\n   The present-day Internet has seen ubiquitous deployment\
    \ of Network\n   Address Translators (NATs).  There are a variety of NAT devices\
    \ and a\n   variety of network topologies utilizing NAT devices in deployments.\n\
    \   The asymmetric addressing and connectivity regimes established by\n   these\
    \ NAT devices have created unique problems for peer-to-peer (P2P)\n   applications\
    \ and protocols, such as teleconferencing and multiplayer\n   online gaming. \
    \ These issues are likely to persist even into the IPv6\n   world.  During the\
    \ transition to IPv6, some form of NAT may be\n   required to enable IPv4-only\
    \ nodes to communicate with IPv6-only\n   nodes [NAT-PT], although the appropriate\
    \ protocols and guidelines for\n   this use of NAT are still unresolved [NAT-PT-HIST].\
    \  Even a future\n   \"pure IPv6 world\" may still include firewalls, which employ\
    \ similar\n   filtering behavior of NATs but without the address translation\n\
    \   [V6-CPE-SEC].  The filtering behavior interferes with the functioning\n  \
    \ of P2P applications.  For this reason, IPv6 applications that use the\n   techniques\
    \ described in this document for NAT traversal may also work\n   with some firewalls\
    \ that have filtering behavior similar to NATs.\n   Currently deployed NAT devices\
    \ are designed primarily around the\n   client/server paradigm, in which relatively\
    \ anonymous client machines\n   inside a private network initiate connections\
    \ to public servers with\n   stable IP addresses and DNS names.  NAT devices encountered\
    \ en route\n   provide dynamic address assignment for the client machines.  The\n\
    \   illusion of anonymity (private IP addresses) and inaccessibility of\n   the\
    \ internal hosts behind a NAT device is not a problem for\n   applications such\
    \ as Web browsers, which only need to initiate\n   outgoing connections.  This\
    \ illusion of anonymity and inaccessibility\n   is sometimes perceived as a privacy\
    \ benefit.  As noted in Section 2.2\n   of [RFC4941], this perceived privacy may\
    \ be illusory in a majority of\n   cases utilizing Small-Office-Home-Office (SOHO)\
    \ NATs.\n   In the peer-to-peer paradigm, Internet hosts that would normally be\n\
    \   considered \"clients\" not only initiate sessions to peer nodes, but\n   also\
    \ accept sessions initiated by peer nodes.  The initiator and the\n   responder\
    \ might lie behind different NAT devices with neither\n   endpoint having a permanent\
    \ IP address or other form of public\n   network presence.  A common online gaming\
    \ architecture, for example,\n   involves all participating application hosts\
    \ contacting a publicly\n   addressable rendezvous server for registering themselves\
    \ and\n   discovering peer hosts.  Subsequent to the communication with the\n\
    \   rendezvous server, the hosts establish direct connections with each\n   other\
    \ for fast and efficient propagation of updates during game play.\n   Similarly,\
    \ a file sharing application might contact a well-known\n   rendezvous server\
    \ for resource discovery or searching, but establish\n   direct connections with\
    \ peer hosts for data transfer.  NAT devices\n   create problems for peer-to-peer\
    \ connections because hosts behind a\n   NAT device normally have no permanently\
    \ visible public ports on the\n   Internet to which incoming TCP or UDP connections\
    \ from other peers\n   can be directed.  RFC 3235 [NAT-APPL] briefly addresses\
    \ this issue.\n   NAT traversal strategies that involve explicit signaling between\n\
    \   applications and NAT devices, namely [NAT-PMP], [NSIS-NSLP], [SOCKS],\n  \
    \ [RSIP], [MIDCOM], and [UPNP] are out of the scope of this document.\n   These\
    \ techniques, if available, are a complement to the techniques\n   described in\
    \ the document.  [UNSAF] is in scope.\n   In this document, we summarize the currently\
    \ known methods by which\n   applications work around the presence of NAT devices,\
    \ without\n   directly altering the NAT devices.  The techniques described predate\n\
    \   BEHAVE documents ([BEH-UDP], [BEH-TCP], and [BEH-ICMP]).  The scope\n   of\
    \ the document is restricted to describing currently known\n   techniques used\
    \ to establish 2-way communication between endpoints of\n   an application.  Discussion\
    \ of timeouts, RST processing, keepalives,\n   and so forth that concern a running\
    \ session are outside the scope of\n   this document.  The scope is also restricted\
    \ to describing techniques\n   for TCP- and UDP-based applications.  It is not\
    \ the objective of this\n   document to provide solutions to NAT traversal problems\
    \ for\n   applications in general [BEH-APP] or to a specific class of\n   applications\
    \ [ICE].\n"
- title: 2.  Terminology and Conventions Used
  contents:
  - "2.  Terminology and Conventions Used\n   In this document, the IP addresses 192.0.2.1,\
    \ 192.0.2.128, and\n   192.0.2.254 are used as example public IP addresses [RFC3330].\n\
    \   Although these addresses are all from the same /24 network, this is a\n  \
    \ limitation of the example addresses available in [RFC3330].  In\n   practice,\
    \ these addresses would be on different networks.  As for the\n   notation for\
    \ ports usage, all clients use ports in the range of\n   1-2000 and servers use\
    \ ports in the range of 20000-21000.  NAT\n   devices use ports 30000 and above\
    \ for endpoint mapping.\n   Readers are urged to refer to [NAT-TERM] for information\
    \ on NAT\n   taxonomy and terminology.  Unless prefixed with a NAT type or\n \
    \  explicitly stated otherwise, the term NAT, used throughout this\n   document,\
    \ refers to Traditional NAT [NAT-TRAD].  Traditional NAT has\n   two variations,\
    \ namely, Basic NAT and Network Address Port Translator\n   (NAPT).  Of these,\
    \ NAPT is by far the most commonly deployed NAT\n   device.  NAPT allows multiple\
    \ private hosts to share a single public\n   IP address simultaneously.\n   An\
    \ issue of relevance to P2P applications is how the NAT behaves when\n   an internal\
    \ host initiates multiple simultaneous sessions from a\n   single endpoint (private\
    \ IP, private port) to multiple distinct\n   endpoints on the external network.\n\
    \   [STUN] further classifies NAT implementations using the terms \"Full\n   Cone\"\
    , \"Restricted Cone\", \"Port Restricted Cone\", and \"Symmetric\".\n   Unfortunately,\
    \ this terminology has been the source of much\n   confusion.  For this reason,\
    \ this document adapts terminology from\n   [BEH-UDP] to distinguish between NAT\
    \ implementations.\n   Listed below are terms used throughout this document.\n"
- title: 2.1.  Endpoint
  contents:
  - "2.1.  Endpoint\n   An endpoint is a session-specific tuple on an end host.  An\
    \ endpoint\n   may be represented differently for each IP protocol.  For example,\
    \ a\n   UDP or TCP session endpoint is represented as a tuple of (IP address,\n\
    \   UDP/TCP port).\n"
- title: 2.2.  Endpoint Mapping
  contents:
  - "2.2.  Endpoint Mapping\n   When a host in a private realm initiates an outgoing\
    \ session to a\n   host in the public realm through a NAT device, the NAT device\
    \ assigns\n   a public endpoint to translate the private endpoint so that\n  \
    \ subsequent response packets from the external host can be received by\n   the\
    \ NAT, translated, and forwarded to the private endpoint.  The\n   assignment\
    \ by the NAT device to translate a private endpoint to a\n   public endpoint and\
    \ vice versa is called Endpoint Mapping.  NAT uses\n   Endpoint Mapping to perform\
    \ translation for the duration of the\n   session.\n"
- title: 2.3.  Endpoint-Independent Mapping
  contents:
  - "2.3.  Endpoint-Independent Mapping\n   \"Endpoint-Independent Mapping\" is defined\
    \ in [BEH-UDP] as follows:\n        The NAT reuses the port mapping for subsequent\
    \ packets sent from\n        the same internal IP address and port (X:x) to any\
    \ external IP\n        address and port.\n"
- title: 2.4.  Endpoint-Dependent Mapping
  contents:
  - "2.4.  Endpoint-Dependent Mapping\n   \"Endpoint-Dependent Mapping\" refers to\
    \ the combination of \"Address-\n   Dependent Mapping\" and \"Address and Port-Dependent\
    \ Mapping\" as\n   defined in [BEH-UDP]:\n   Address-Dependent Mapping\n     \
    \   The NAT reuses the port mapping for subsequent packets sent from\n       \
    \ the same internal IP address and port (X:x) to the same external\n        IP\
    \ address, regardless of the external port.\n   Address and Port-Dependent Mapping\n\
    \        The NAT reuses the port mapping for subsequent packets sent from\n  \
    \      the same internal IP address and port (X:x) to the same external\n    \
    \    IP address and port while the mapping is still active.\n"
- title: 2.5.  Endpoint-Independent Filtering
  contents:
  - "2.5.  Endpoint-Independent Filtering\n   \"Endpoint-Independent Filtering\" is\
    \ defined in [BEH-UDP] as follows:\n        The NAT filters out only packets not\
    \ destined to the internal\n        address and port X:x, regardless of the external\
    \ IP address and\n        port source (Z:z).  The NAT forwards any packets destined\
    \ to\n        X:x.  In other words, sending packets from the internal side of\n\
    \        the NAT to any external IP address is sufficient to allow any\n     \
    \   packets back to the internal endpoint.\n   A NAT device employing the combination\
    \ of \"Endpoint-Independent\n   Mapping\" and \"Endpoint-Independent Filtering\"\
    \ will accept incoming\n   traffic to a mapped public port from ANY external endpoint\
    \ on the\n   public network.\n"
- title: 2.6.  Endpoint-Dependent Filtering
  contents:
  - "2.6.  Endpoint-Dependent Filtering\n   \"Endpoint-Dependent Filtering\" refers\
    \ to the combination of \"Address-\n   Dependent Filtering\" and \"Address and\
    \ Port-Dependent Filtering\" as\n   defined in [BEH-UDP].\n   Address-Dependent\
    \ Filtering\n        The NAT filters out packets not destined to the internal\
    \ address\n        X:x.  Additionally, the NAT will filter out packets from Y:y\n\
    \        destined for the internal endpoint X:x if X:x has not sent\n        packets\
    \ to Y:any previously (independently of the port used by\n        Y).  In other\
    \ words, for receiving packets from a specific\n        external endpoint, it\
    \ is necessary for the internal endpoint to\n        send packets first to that\
    \ specific external endpoint's IP\n        address.\n   Address and Port-Dependent\
    \ Filtering\n        The NAT filters out packets not destined for the internal\n\
    \        address X:x.  Additionally, the NAT will filter out packets from\n  \
    \      Y:y destined for the internal endpoint X:x if X:x has not sent\n      \
    \  packets to Y:y previously.  In other words, for receiving\n        packets\
    \ from a specific external endpoint, it is necessary for\n        the internal\
    \ endpoint to send packets first to that external\n        endpoint's IP address\
    \ and port.\n   A NAT device employing \"Endpoint-Dependent Filtering\" will accept\n\
    \   incoming traffic to a mapped public port from only a restricted set\n   of\
    \ external endpoints on the public network.\n"
- title: 2.7.  P2P Application
  contents:
  - "2.7.  P2P Application\n   A P2P application is an application that uses the same\
    \ endpoint to\n   initiate outgoing sessions to peering hosts as well as accept\n\
    \   incoming sessions from peering hosts.  A P2P application may use\n   multiple\
    \ endpoints for peer-to-peer communication.\n"
- title: 2.8.  NAT-Friendly P2P Application
  contents:
  - "2.8.  NAT-Friendly P2P Application\n   A NAT-friendly P2P application is a P2P\
    \ application that is designed\n   to work effectively even as peering nodes are\
    \ located in distinct IP\n   address realms, connected by one or more NATs.\n\
    \   One common way P2P applications establish peering sessions and remain\n  \
    \ NAT-friendly is by using a publicly addressable rendezvous server for\n   registration\
    \ and peer discovery purposes.\n"
- title: 2.9. Endpoint-Independent Mapping NAT (EIM-NAT)
  contents:
  - "2.9. Endpoint-Independent Mapping NAT (EIM-NAT)\n   An Endpoint-Independent Mapping\
    \ NAT (EIM-NAT, for short) is a NAT\n   device employing Endpoint-Independent\
    \ Mapping.  An EIM-NAT can have\n   any type of filtering behavior.  BEHAVE-compliant\
    \ NAT devices are\n   good examples of EIM-NAT devices.  A NAT device employing\
    \ Address-\n   Dependent Mapping is an example of a NAT device that is not EIM-NAT.\n"
- title: 2.10.  Hairpinning
  contents:
  - "2.10.  Hairpinning\n   Hairpinning is defined in [BEH-UDP] as follows:\n    \
    \    If two hosts (called X1 and X2) are behind the same NAT and\n        exchanging\
    \ traffic, the NAT may allocate an address on the\n        outside of the NAT\
    \ for X2, called X2':x2'.  If X1 sends traffic\n        to X2':x2', it goes to\
    \ the NAT, which must relay the traffic\n        from X1 to X2.  This is referred\
    \ to as hairpinning.\n   Not all currently deployed NATs support hairpinning.\n"
- title: 3.  Techniques Used by P2P Applications to Traverse NATs
  contents:
  - "3.  Techniques Used by P2P Applications to Traverse NATs\n   This section reviews\
    \ in detail the currently known techniques for\n   implementing peer-to-peer communication\
    \ over existing NAT devices,\n   from the perspective of the application or protocol\
    \ designer.\n"
- title: 3.1.  Relaying
  contents:
  - "3.1.  Relaying\n   The most reliable, but least efficient, method of implementing\
    \ peer-\n   to-peer communication in the presence of a NAT device is to make the\n\
    \   peer-to-peer communication look to the network like client/server\n   communication\
    \ through relaying.  Consider the scenario in figure 1.\n   Two client hosts,\
    \ A and B, have each initiated TCP or UDP connections\n   to a well-known rendezvous\
    \ server S.  The Rendezvous Server S has a\n   publicly addressable IP address\
    \ and is used for the purposes of\n   registration, discovery, and relay.  Hosts\
    \ behind NAT register with\n   the server.  Peer hosts can discover hosts behind\
    \ NATs and relay all\n   end-to-end messages using the server.  The clients reside\
    \ on separate\n   private networks, and their respective NAT devices prevent either\n\
    \   client from directly initiating a connection to the other.\n             \
    \              Registry, Discovery\n                           Combined with Relay\n\
    \                                 Server S\n                            192.0.2.128:20001\n\
    \                                     |\n        +----------------------------+----------------------------+\n\
    \        | ^ Registry/              ^   ^ Registry/              ^ |\n       \
    \ | | Relay-Req Session(A-S) |   | Relay-Req Session(B-S) | |\n        | | 192.0.2.128:20001\
    \      |   |  192.0.2.128:20001     | |\n        | | 192.0.2.1:62000        |\
    \   |  192.0.2.254:31000     | |\n        |                                  \
    \                       |\n      +--------------+                            \
    \     +--------------+\n      | 192.0.2.1    |                               \
    \  | 192.0.2.254  |\n      |              |                                 |\
    \              |\n      |    NAT A     |                                 |   \
    \ NAT B     |\n      +--------------+                                 +--------------+\n\
    \        |                                                         |\n       \
    \ | ^ Registry/              ^   ^ Registry/              ^ |\n        | | Relay-Req\
    \ Session(A-S) |   | Relay-Req Session(B-S) | |\n        | |  192.0.2.128:20001\
    \     |   |  192.0.2.128:20001     | |\n        | |     10.0.0.1:1234      | \
    \  |     10.1.1.3:1234      | |\n        |                                   \
    \                      |\n     Client A                                      \
    \           Client B\n     10.0.0.1:1234                                     \
    \   10.1.1.3:1234\n         Figure 1: Use of a Relay Server to communicate with\
    \ peers\n   Instead of attempting a direct connection, the two clients can simply\n\
    \   use the server S to relay messages between them.  For example, to\n   send\
    \ a message to client B, client A simply sends the message to\n   server S along\
    \ its already established client/server connection, and\n   server S then sends\
    \ the message on to client B using its existing\n   client/server connection with\
    \ B.\n   This method has the advantage that it will always work as long as\n \
    \  both clients have connectivity to the server.  The enroute NAT device\n   is\
    \ not required to be EIM-NAT.  The obvious disadvantages of relaying\n   are that\
    \ it consumes the server's processing power and network\n   bandwidth, and communication\
    \ latency between the peering clients is\n   likely to be increased even if the\
    \ server has sufficient I/O\n   bandwidth and is located correctly topology-wise.\
    \  The TURN protocol\n   [TURN] defines a method of implementing application agnostic,\n\
    \   session-oriented, packet relay in a relatively secure fashion.\n"
- title: 3.2.  Connection Reversal
  contents:
  - "3.2.  Connection Reversal\n   The following connection reversal technique for\
    \ a direct\n   communication works only when one of the peers is behind a NAT\
    \ device\n   and the other is not.  For example, consider the scenario in figure\n\
    \   2.  Client A is behind a NAT, but client B has a publicly addressable\n  \
    \ IP address.  Rendezvous Server S has a publicly addressable IP\n   address and\
    \ is used for the purposes of registration and discovery.\n   Hosts behind a NAT\
    \ register their endpoints with the server.  Peer\n   hosts discover endpoints\
    \ of hosts behind a NAT using the server.\n                          Registry\
    \ and Discovery\n                                 Server S\n                 \
    \           192.0.2.128:20001\n                                     |\n      \
    \  +----------------------------+----------------------------+\n        | ^ Registry\
    \ Session(A-S) ^     ^ Registry Session(B-S) ^ |\n        | | 192.0.2.128:20001\
    \     |     |  192.0.2.128:20001    | |\n        | | 192.0.2.1:62000       | \
    \    |  192.0.2.254:1234     | |\n        |                                  \
    \                       |\n        | ^ P2P Session (A-B)     ^     |  P2P Session\
    \ (B-A)    | |\n        | | 192.0.2.254:1234      |     |  192.0.2.1:62000   \
    \   | |\n        | | 192.0.2.1:62000       |     v  192.0.2.254:1234     v |\n\
    \        |                                                         |\n      +--------------+\
    \                                            |\n      | 192.0.2.1    |       \
    \                                     |\n      |              |              \
    \                              |\n      |    NAT A     |                     \
    \                       |\n      +--------------+                            \
    \                |\n        |                                                \
    \         |\n        | ^ Registry Session(A-S) ^                             \
    \  |\n        | |  192.0.2.128:20001    |                               |\n  \
    \      | |     10.0.0.1:1234     |                               |\n        |\
    \                                                         |\n        | ^ P2P Session\
    \ (A-B)     ^                               |\n        | |  192.0.2.254:1234 \
    \    |                               |\n        | |     10.0.0.1:1234     |  \
    \                             |\n        |                                   \
    \                      |\n     Private Client A                              \
    \   Public Client B\n     10.0.0.1:1234                                    192.0.2.254:1234\n\
    \           Figure 2: Connection reversal using Rendezvous server\n   Client A\
    \ has private IP address 10.0.0.1, and the application is\n   using TCP port 1234.\
    \  This client has established a connection with\n   server S at public IP address\
    \ 192.0.2.128 and port 20001.  NAT A has\n   assigned TCP port 62000, at its own\
    \ public IP address 192.0.2.1, to\n   serve as the temporary public endpoint address\
    \ for A's session with\n   S; therefore, server S believes that client A is at\
    \ IP address\n   192.0.2.1 using port 62000.  Client B, however, has its own permanent\n\
    \   IP address, 192.0.2.254, and the application on B is accepting TCP\n   connections\
    \ at port 1234.\n   Now suppose client B wishes to establish a direct communication\n\
    \   session with client A.  B might first attempt to contact client A\n   either\
    \ at the address client A believes itself to have, namely,\n   10.0.0.1:1234,\
    \ or at the address of A as observed by server S,\n   namely, 192.0.2.1:62000.\
    \  In either case, the connection will fail.\n   In the first case, traffic directed\
    \ to IP address 10.0.0.1 will\n   simply be dropped by the network because 10.0.0.1\
    \ is not a publicly\n   routable IP address.  In the second case, the TCP SYN\
    \ request from B\n   will arrive at NAT A directed to port 62000, but NAT A will\
    \ reject\n   the connection request because only outgoing connections are allowed.\n\
    \   After attempting and failing to establish a direct connection to A,\n   client\
    \ B can use server S to relay a request to client A to initiate\n   a \"reversed\"\
    \ connection to client B.  Client A, upon receiving this\n   relayed request through\
    \ S, opens a TCP connection to client B at B's\n   public IP address and port\
    \ number.  NAT A allows the connection to\n   proceed because it is originating\
    \ inside the firewall, and client B\n   can receive the connection because it\
    \ is not behind a NAT device.\n   A variety of current peer-to-peer applications\
    \ implement this\n   technique.  Its main limitation, of course, is that it only\
    \ works so\n   long as only one of the communicating peers is behind a NAT device.\n\
    \   If the NAT device is EIM-NAT, the public client can contact external\n   server\
    \ S to determine the specific public endpoint from which to\n   expect Client-A-originated\
    \ connection and allow connections from just\n   those endpoints.  If the NAT\
    \ device is EIM-NAT, the public client can\n   contact the external server S to\
    \ determine the specific public\n   endpoint from which to expect connections\
    \ originated by client A, and\n   allow connections from just that endpoint. \
    \ If the NAT device is not\n   EIM-NAT, the public client cannot know the specific\
    \ public endpoint\n   from which to expect connections originated by client A.\
    \  In the\n   increasingly common case where both peers can be behind NATs, the\n\
    \   Connection Reversal method fails.  Connection Reversal is not a\n   general\
    \ solution to the peer-to-peer connection problem.  If neither\n   a \"forward\"\
    \ nor a \"reverse\" connection can be established,\n   applications often fall\
    \ back to another mechanism such as relaying.\n"
- title: 3.3.  UDP Hole Punching
  contents:
  - "3.3.  UDP Hole Punching\n   UDP hole punching relies on the properties of EIM-NATs\
    \ to allow\n   appropriately designed peer-to-peer applications to \"punch holes\"\
    \n   through the NAT device(s) enroute and establish direct connectivity\n   with\
    \ each other, even when both communicating hosts lie behind NAT\n   devices. \
    \ When one of the hosts is behind a NAT that is not EIM-NAT,\n   the peering host\
    \ cannot predictably know the mapped endpoint to which\n   to initiate a connection.\
    \  Further, the application on the host\n   behind non-EIM-NAT would be unable\
    \ to reuse an already established\n   endpoint mapping for communication with\
    \ different external\n   destinations, and the hole punching technique would fail.\n\
    \   This technique was mentioned briefly in Section 5.1 of RFC 3027\n   [NAT-PROT],\
    \ first described in [KEGEL], and used in some recent\n   protocols [TEREDO, ICE].\
    \  Readers may refer to Section 3.4 for\n   details on \"TCP hole punching\".\n\
    \   We will consider two specific scenarios, and how applications are\n   designed\
    \ to handle both of them gracefully.  In the first situation,\n   representing\
    \ the common case, two clients desiring direct peer-to-\n   peer communication\
    \ reside behind two different NATs.  In the second,\n   the two clients actually\
    \ reside behind the same NAT, but do not\n   necessarily know that they do.\n"
- title: 3.3.1.  Peers behind Different NATs
  contents:
  - "3.3.1.  Peers behind Different NATs\n   Consider the scenario in figure 3.  Clients\
    \ A and B both have private\n   IP addresses and lie behind different NAT devices.\
    \  Rendezvous Server\n   S has a publicly addressable IP address and is used for\
    \ the purposes\n   of registration, discovery, and limited relay.  Hosts behind\
    \ a NAT\n   register their public endpoints with the server.  Peer hosts discover\n\
    \   the public endpoints of hosts behind a NAT using the server.  Unlike\n   in\
    \ Section 3.1, peer hosts use the server to relay just connection\n   initiation\
    \ control messages, instead of end-to-end messages.\n   The peer-to-peer application\
    \ running on clients A and B use UDP port\n   1234.  The rendezvous server S uses\
    \ UDP port 20001.  A and B have\n   each initiated UDP communication sessions\
    \ with server S, causing NAT\n   A to assign its own public UDP port 62000 for\
    \ A's session with S, and\n   causing NAT B to assign its port 31000 to B's session\
    \ with S,\n   respectively.\n                      Registry and Discovery Combined\n\
    \                            with Limited Relay\n                            \
    \     Server S\n                             192.0.2.128:20001\n             \
    \                        |\n        +----------------------------+----------------------------+\n\
    \        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |\n       \
    \ | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |\n        | | 192.0.2.1:62000\
    \       |     |  192.0.2.254:31000    | |\n        |                         \
    \                                |\n        | ^ P2P Session (A-B)     ^     ^\
    \  P2P Session (B-A)    ^ |\n        | | 192.0.2.254:31000     |     |  192.0.2.1:62000\
    \      | |\n        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    |\
    \ |\n        |                                                         |\n   \
    \   +--------------+                                 +--------------+\n      |\
    \ 192.0.2.1    |                                 | 192.0.2.254  |\n      |   \
    \           |                                 |              |\n      | EIM-NAT\
    \ A    |                                 | EIM-NAT B    |\n      +--------------+\
    \                                 +--------------+\n        |                \
    \                                         |\n        | ^ Registry Session(A-S)\
    \ ^     ^ Registry Session(B-S) ^ |\n        | |  192.0.2.128:20001    |     |\
    \  192.0.2.128:20001    | |\n        | |     10.0.0.1:1234     |     |     10.1.1.3:1234\
    \     | |\n        |                                                         |\n\
    \        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |\n       \
    \ | |  192.0.2.254:31000    |     |  192.0.2.1:62000      | |\n        | |   \
    \  10.0.0.1:1234     |     |     10.1.1.3:1234     | |\n        |            \
    \                                             |\n     Client A               \
    \                                  Client B\n     10.0.0.1:1234              \
    \                          10.1.1.3:1234\n         Figure 3: UDP Hole Punching\
    \ to set up direct connectivity\n   Now suppose that client A wants to establish\
    \ a UDP communication\n   session directly with client B.  If A simply starts\
    \ sending UDP\n   messages to B's public endpoint 192.0.2.254:31000, then NAT\
    \ B will\n   typically discard these incoming messages (unless it employs\n  \
    \ Endpoint-Independent Filtering), because the source address and port\n   number\
    \ do not match those of S, with which the original outgoing\n   session was established.\
    \  Similarly, if B simply starts sending UDP\n   messages to A's public endpoint,\
    \ then NAT A will typically discard\n   these messages.\n   Suppose A starts sending\
    \ UDP messages to B's public endpoint, and\n   simultaneously relays a request\
    \ through server S to B, asking B to\n   start sending UDP messages to A's public\
    \ endpoint.  A's outgoing\n   messages directed to B's public endpoint (192.0.2.254:31000)\
    \ cause\n   EIM-NAT A to open up a new communication session between A's private\n\
    \   endpoint and B's public endpoint.  At the same time, B's messages to\n   A's\
    \ public endpoint (192.0.2.1:62000) cause EIM-NAT B to open up a\n   new communication\
    \ session between B's private endpoint and A's public\n   endpoint.  Once the\
    \ new UDP sessions have been opened up in each\n   direction, clients A and B\
    \ can communicate with each other directly\n   without further burden on the server\
    \ S.  Server S, which helps with\n   relaying connection initiation requests to\
    \ peer nodes behind NAT\n   devices, ends up like an \"introduction\" server to\
    \ peer hosts.\n   The UDP hole punching technique has several useful properties.\
    \  Once\n   a direct peer-to-peer UDP connection has been established between\
    \ two\n   clients behind NAT devices, either party on that connection can in\n\
    \   turn take over the role of \"introducer\" and help the other party\n   establish\
    \ peer-to-peer connections with additional peers, minimizing\n   the load on the\
    \ initial introduction server S.  The application does\n   not need to attempt\
    \ to detect the kind of NAT device it is behind,\n   since the procedure above\
    \ will establish peer-to-peer communication\n   channels equally well if either\
    \ or both clients do not happen to be\n   behind a NAT device.  The UDP hole punching\
    \ technique even works\n   automatically with multiple NATs, where one or both\
    \ clients are\n   distant from the public Internet via two or more levels of address\n\
    \   translation.\n"
- title: 3.3.2.  Peers behind the Same NAT
  contents:
  - "3.3.2.  Peers behind the Same NAT\n   Now consider the scenario in which the\
    \ two clients (probably\n   unknowingly) happen to reside behind the same EIM-NAT,\
    \ and are\n   therefore located in the same private IP address space, as in figure\n\
    \   4.  A well-known Rendezvous Server S has a publicly addressable IP\n   address\
    \ and is used for the purposes of registration, discovery, and\n   limited relay.\
    \  Hosts behind the NAT register with the server.  Peer\n   hosts discover hosts\
    \ behind the NAT using the server and relay\n   messages using the server.  Unlike\
    \ in Section 3.1, peer hosts use the\n   server to relay just control messages,\
    \ instead of all end-to-end\n   messages.\n   Client A has established a UDP session\
    \ with server S, to which the\n   common EIM-NAT has assigned public port number\
    \ 62000.  Client B has\n   similarly established a session with S, to which the\
    \ EIM-NAT has\n   assigned public port number 62001.\n                     Registry\
    \ and Discovery Combined\n                           with Limited Relay\n    \
    \                            Server S\n                            192.0.2.128:20001\n\
    \                                    |\n         ^ Registry Session(A-S) ^  |\
    \ ^ Registry Session(B-S) ^\n         | 192.0.2.128:20001     |  | |  192.0.2.128:20001\
    \    |\n         | 192.0.2.1:62000       |  | |  192.0.2.1:62001      |\n    \
    \                                |\n                             +--------------+\n\
    \                             | 192.0.2.1    |\n                             |\
    \              |\n                             |   EIM-NAT    |\n            \
    \                 +--------------+\n                                    |\n  \
    \    +-----------------------------+----------------------------+\n      | ^ Registry\
    \ Session(A-S) ^      ^ Registry Session(B-S) ^ |\n      | |  192.0.2.128:20001\
    \    |      |  192.0.2.128:20001    | |\n      | |     10.0.0.1:1234     |   \
    \   |     10.1.1.3:1234     | |\n      |                                     \
    \                     |\n      | ^ P2P Session-try1(A-B) ^      ^ P2P Session-try1(B-A)\
    \ ^ |\n      | | 192.0.2.1:62001       |      |  192.0.2.1:62000      | |\n  \
    \    | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |\n      |   \
    \                                                       |\n      | ^ P2P Session-try2(A-B)\
    \ ^      ^ P2P Session-try2(B-A) ^ |\n      | |     10.1.1.3:1234     |      |\
    \     10.0.0.1:1234     | |\n      | |     10.0.0.1:1234     |      |     10.1.1.3:1234\
    \     | |\n      |                                                          |\n\
    \   Client A                                                   Client B\n   10.0.0.1:1234\
    \                                         10.1.1.3:1234\n   Figure 4: Use of local\
    \ and public endpoints to communicate with peers\n   Suppose that A and B use\
    \ the UDP hole punching technique as outlined\n   above to establish a communication\
    \ channel using server S as an\n   introducer.  Then A and B will learn each other's\
    \ public endpoints as\n   observed by server S, and start sending each other messages\
    \ at those\n   public endpoints.  The two clients will be able to communicate\
    \ with\n   each other this way as long as the NAT allows hosts on the internal\n\
    \   network to open translated UDP sessions with other internal hosts and\n  \
    \ not just with external hosts.  This situation is referred to as\n   \"Hairpinning\"\
    , because packets arriving at the NAT from the private\n   network are translated\
    \ and then looped back to the private network\n   rather than being passed through\
    \ to the public network.\n   For example, consider P2P session-try1 above.  When\
    \ A sends a UDP\n   packet to B's public endpoint, the packet initially has a\
    \ source\n   endpoint of 10.0.0.1:1234 and a destination endpoint of\n   192.0.2.1:62001.\
    \  The NAT receives this packet, translates it to have\n   a source endpoint of\
    \ 192.0.2.1:62000 and a destination endpoint of\n   10.1.1.3:1234, and then forwards\
    \ it on to B.\n   Even if the NAT device supports hairpinning, this translation\
    \ and\n   forwarding step is clearly unnecessary in this situation, and adds\n\
    \   latency to the dialog between A and B, besides burdening the NAT.\n   The\
    \ solution to this problem is straightforward and is described as\n   follows.\n\
    \   When A and B initially exchange address information through the\n   Rendezvous\
    \ server S, they include their own IP addresses and port\n   numbers as \"observed\"\
    \ by themselves, as well as their public\n   endpoints as observed by S.  The\
    \ clients then simultaneously start\n   sending packets to each other at each\
    \ of the alternative addresses\n   they know about, and use the first address\
    \ that leads to successful\n   communication.  If the two clients are behind the\
    \ same NAT, as is the\n   case in figure 4 above, then the packets directed to\
    \ their private\n   endpoints (as attempted using P2P session-try2) are likely\
    \ to arrive\n   first, resulting in a direct communication channel not involving\
    \ the\n   NAT.  If the two clients are behind different NATs, then the packets\n\
    \   directed to their private endpoints will fail to reach each other at\n   all,\
    \ but the clients will hopefully establish connectivity using\n   their respective\
    \ public endpoints.  It is important that these\n   packets be authenticated in\
    \ some way, however, since in the case of\n   different NATs it is entirely possible\
    \ for A's messages directed at\n   B's private endpoint to reach some other, unrelated\
    \ node on A's\n   private network, or vice versa.\n   The [ICE] protocol employs\
    \ this technique effectively, in that\n   multiple candidate endpoints (both private\
    \ and public) are\n   communicated between peering end hosts during an offer/answer\n\
    \   exchange.  Endpoints that offer the most efficient end-to-end\n   connection(s)\
    \ are selected eventually for end-to-end data transfer.\n"
- title: 3.3.3.  Peers Separated by Multiple NATs
  contents:
  - "3.3.3.  Peers Separated by Multiple NATs\n   In some topologies involving multiple\
    \ NAT devices, it is not possible\n   for two clients to establish an \"optimal\"\
    \ P2P route between them\n   without specific knowledge of the topology.  Consider\
    \ for example the\n   scenario in figure 5.\n                     Registry and\
    \ Discovery Combined\n                           with Limited Relay\n        \
    \                        Server S\n                           192.0.2.128:20001\n\
    \                                   |\n         ^ Registry Session(A-S) ^ | ^\
    \ Registry Session(B-S) ^\n         | 192.0.2.128:20001     | | | 192.0.2.128:20001\
    \     |\n         | 192.0.2.1:62000       | | | 192.0.2.1:62001       |\n    \
    \                               |\n                            +--------------+\n\
    \                            | 192.0.2.1    |\n                            | \
    \             |\n                            |  EIM-NAT X   |\n              \
    \              | (Supporting  |\n                            | Hairpinning) |\n\
    \                            +--------------+\n                              \
    \     |\n      +----------------------------+----------------------------+\n \
    \     | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |\n      | | \
    \ 192.0.2.128:20001    |     |  192.0.2.128:20001    | |\n      | |  192.168.1.1:30000\
    \    |     |  192.168.1.2:31000    | |\n      |                              \
    \                           |\n      | ^ P2P Session (A-B)     ^     ^ P2P Session\
    \ (B-A)     ^ |\n      | |  192.0.2.1:62001      |     |  192.0.2.1:62000    \
    \  | |\n      | |  192.168.1.1:30000    |     |  192.168.1.2:31000    | |\n  \
    \    |                                                         |\n   +--------------+\
    \                                  +--------------+\n   | 192.168.1.1  |     \
    \                             | 192.168.1.2  |\n   |              |          \
    \                        |              |\n   | EIM-NAT A    |               \
    \                   | EIM-NAT B    |\n   +--------------+                    \
    \              +--------------+\n       |                                    \
    \                    |\n       | ^ Registry Session(A-S) ^    ^ Registry Session(B-S)\
    \ ^ |\n       | |  192.0.2.128:20001    |    |  192.0.2.128:20001    | |\n   \
    \    | |     10.0.0.1:1234     |    |     10.1.1.3:1234     | |\n       |    \
    \                                                    |\n       | ^ P2P Session\
    \ (A-B)     ^    ^  P2P Session (B-A)    ^ |\n       | |  192.0.2.1:62001    \
    \  |    |  192.0.2.1:62000      | |\n       | |     10.0.0.1:1234     |    | \
    \    10.1.1.3:1234     | |\n       |                                         \
    \               |\n   Client A                                               \
    \   Client B\n   10.0.0.1:1234                                        10.1.1.3:1234\n\
    \      Figure 5: Use of Hairpinning in setting up direct communication\n   Suppose\
    \ NAT X is an EIM-NAT deployed by a large Internet Service\n   Provider (ISP)\
    \ to multiplex many customers onto a few public IP\n   addresses, and NATs A and\
    \ B are small consumer NAT gateways deployed\n   independently by two of the ISP's\
    \ customers to multiplex their\n   private home networks onto their respective\
    \ ISP-provided IP\n   addresses.  Only server S and NAT X have globally routable\
    \ IP\n   addresses; the \"public\" IP addresses used by NAT A and NAT B are\n\
    \   actually private to the ISP's addressing realm, while client A's and\n   B's\
    \ addresses in turn are private to the addressing realms of NATs A\n   and B,\
    \ respectively.  Just as in the previous section, server S is\n   used for the\
    \ purposes of registration, discovery, and limited relay.\n   Peer hosts use the\
    \ server to relay connection initiation control\n   messages, instead of all end-to-end\
    \ messages.\n   Now suppose clients A and B attempt to establish a direct peer-to-\n\
    \   peer UDP connection.  The optimal method would be for client A to\n   send\
    \ messages to client B's public address at NAT B,\n   192.168.1.2:31000 in the\
    \ ISP's addressing realm, and for client B to\n   send messages to A's public\
    \ address at NAT B, namely,\n   192.168.1.1:30000.  Unfortunately, A and B have\
    \ no way to learn these\n   addresses, because server S only sees the \"global\"\
    \ public endpoints\n   of the clients, 192.0.2.1:62000 and 192.0.2.1:62001.  Even\
    \ if A and B\n   had some way to learn these addresses, there is still no guarantee\n\
    \   that they would be usable because the address assignments in the\n   ISP's\
    \ private addressing realm might conflict with unrelated address\n   assignments\
    \ in the clients' private realms.  The clients therefore\n   have no choice but\
    \ to use their global public endpoints as seen by S\n   for their P2P communication,\
    \ and rely on NAT X to provide\n   hairpinning.\n"
- title: 3.4.  TCP Hole Punching
  contents:
  - "3.4.  TCP Hole Punching\n   In this section, we will discuss the \"TCP hole punching\"\
    \ technique\n   used for establishing direct TCP connection between a pair of\
    \ nodes\n   that are both behind EIM-NAT devices.  Just as with UDP hole\n   punching,\
    \ TCP hole punching relies on the properties of EIM-NATs to\n   allow appropriately\
    \ designed peer-to-peer applications to \"punch\n   holes\" through the NAT device\
    \ and establish direct connectivity with\n   each other, even when both communicating\
    \ hosts lie behind NAT\n   devices.  This technique is also known sometimes as\
    \ \"Simultaneous TCP\n   Open\".\n   Most TCP sessions start with one endpoint\
    \ sending a SYN packet, to\n   which the other party responds with a SYN-ACK packet.\
    \  It is\n   permissible, however, for two endpoints to start a TCP session by\n\
    \   simultaneously sending each other SYN packets, to which each party\n   subsequently\
    \ responds with a separate ACK.  This procedure is known\n   as \"Simultaneous\
    \ TCP Open\" technique and may be found in figure 6 of\n   the original TCP specification\
    \ ([TCP]).  However, \"Simultaneous TCP\n   Open\" is not implemented correctly\
    \ on many systems, including NAT\n   devices.\n   If a NAT device receives a TCP\
    \ SYN packet from outside the private\n   network attempting to initiate an incoming\
    \ TCP connection, the NAT\n   device will normally reject the connection attempt\
    \ by either dropping\n   the SYN packet or sending back a TCP RST (connection\
    \ reset) packet.\n   In the case of SYN timeout or connection reset, the application\n\
    \   endpoint will continue to resend a SYN packet, until the peer does\n   the\
    \ same from its end.\n   Let us consider the case where a NAT device supports\
    \ \"Simultaneous\n   TCP Open\" sessions.  When a SYN packet arrives with source\
    \ and\n   destination endpoints that correspond to a TCP session that the NAT\n\
    \   device believes is already active, then the NAT device would allow\n   the\
    \ packet to pass through.  In particular, if the NAT device has\n   just recently\
    \ seen and transmitted an outgoing SYN packet with the\n   same address and port\
    \ numbers, then it will consider the session\n   active and allow the incoming\
    \ SYN through.  If clients A and B can\n   each initiate an outgoing TCP connection\
    \ with the other client timed\n   so that each client's outgoing SYN passes through\
    \ its local NAT\n   device before either SYN reaches the opposite NAT device,\
    \ then a\n   working peer-to-peer TCP connection will result.\n   This technique\
    \ may not always work reliably for the following\n   reason(s).  If either node's\
    \ SYN packet arrives at the remote NAT\n   device too quickly (before the peering\
    \ node had a chance to send the\n   SYN packet), then the remote NAT device may\
    \ either drop the SYN\n   packet or reject the SYN with a RST packet.  This could\
    \ cause the\n   local NAT device in turn to close the new NAT session immediately\
    \ or\n   initiate end-of-session timeout (refer to Section 2.6 of [NAT-TERM])\n\
    \   so as to close the NAT session at the end of the timeout.  Even as\n   both\
    \ peering nodes simultaneously initiate continued SYN\n   retransmission attempts,\
    \ some remote NAT devices might not let the\n   incoming SYNs through if the NAT\
    \ session is in an end-of-session\n   timeout state.  This in turn would prevent\
    \ the TCP connection from\n   being established.\n   In reality, the majority\
    \ of NAT devices (more than 50%) support\n   Endpoint-Independent Mapping and\
    \ do not send ICMP errors or RSTs in\n   response to unsolicited incoming SYNs.\
    \  As a result, the Simultaneous\n   TCP Open technique does work across NAT devices\
    \ in the majority of\n   TCP connection attempts ([P2P-NAT], [TCP-CHARACT]).\n"
- title: 3.5.  UDP Port Number Prediction
  contents:
  - "3.5.  UDP Port Number Prediction\n   A variant of the UDP hole punching technique\
    \ exists that allows\n   peer-to-peer UDP sessions to be created in the presence\
    \ of some NATs\n   implementing Endpoint-Dependent Mapping.  This method is sometimes\n\
    \   called the \"N+1\" technique [BIDIR] and is explored in detail by\n   Takeda\
    \ [SYM-STUN].  The method works by analyzing the behavior of the\n   NAT and attempting\
    \ to predict the public port numbers it will assign\n   to future sessions.  The\
    \ public ports assigned are often predictable\n   because most NATs assign mapping\
    \ ports in sequence.\n   Consider the scenario in figure 6.  Two clients, A and\
    \ B, each behind\n   a separate NAT, have established separate UDP connections\
    \ with\n   rendezvous server S.  Rendezvous server S has a publicly addressable\n\
    \   IP address and is used for the purposes of registration and\n   discovery.\
    \  Hosts behind a NAT register their endpoints with the\n   server.  Peer hosts\
    \ discover endpoints of the hosts behind NAT using\n   the server.\n         \
    \                 Registry and Discovery\n                                 Server\
    \ S\n                             192.0.2.128:20001\n                        \
    \             |\n                                     |\n        +----------------------------+----------------------------+\n\
    \        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |\n       \
    \ | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |\n        | | 192.0.2.1:62000\
    \       |     |  192.0.2.254:31000    | |\n        |                         \
    \                                |\n        | ^ P2P Session (A-B)     ^     ^\
    \  P2P Session (B-A)    ^ |\n        | | 192.0.2.254:31001     |     |  192.0.2.1:62001\
    \      | |\n        | | 192.0.2.1:62001       |     |  192.0.2.254:31001    |\
    \ |\n        |                                                         |\n   +---------------------+\
    \                       +--------------------+\n   | 192.0.2.1           |   \
    \                    |        192.0.2.254 |\n   |                     |      \
    \                 |                    |\n   |    NAT A            |         \
    \              |        NAT B       |\n   | (Endpoint-Dependent |            \
    \           | (Endpoint-Dependent|\n   |  Mapping)           |               \
    \        |  Mapping)          |\n   +---------------------+                  \
    \     +--------------------+\n        |                                      \
    \                   |\n        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S)\
    \ ^ |\n        | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |\n \
    \       | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |\n        |\
    \                                                         |\n        | ^ P2P Session\
    \ (A-B)     ^     ^ P2P Session (B-A)     ^ |\n        | |  192.0.2.254:31001\
    \    |     |  192.0.2.1:62001      | |\n        | |     10.0.0.1:1234     |  \
    \   |     10.1.1.3:1234     | |\n        |                                   \
    \                      |\n     Client A                                      \
    \           Client B\n     10.0.0.1:1234                                     \
    \   10.1.1.3:1234\n        Figure 6: UDP Port Prediction to set up direct connectivity\n\
    \   NAT A has assigned its UDP port 62000 to the communication session\n   between\
    \ A and S, and NAT B has assigned its port 31000 to the session\n   between B\
    \ and S.  By communicating with server S, A and B learn each\n   other's public\
    \ endpoints as observed by S.  Client A now starts\n   sending UDP messages to\
    \ port 31001 at address 192.0.2.254 (note the\n   port number increment), and\
    \ client B simultaneously starts sending\n   messages to port 62001 at address\
    \ 192.0.2.1.  If NATs A and B assign\n   port numbers to new sessions sequentially,\
    \ and if not much time has\n   passed since the A-S and B-S sessions were initiated,\
    \ then a working\n   bidirectional communication channel between A and B should\
    \ result.\n   A's messages to B cause NAT A to open up a new session, to which\
    \ NAT\n   A will (hopefully) assign public port number 62001, because 62001 is\n\
    \   next in sequence after the port number 62000 it previously assigned\n   to\
    \ the session between A and S.  Similarly, B's messages to A will\n   cause NAT\
    \ B to open a new session, to which it will (hopefully)\n   assign port number\
    \ 31001.  If both clients have correctly guessed the\n   port numbers each NAT\
    \ assigns to the new sessions, then a\n   bidirectional UDP communication channel\
    \ will have been established.\n   Clearly, there are many things that can cause\
    \ this trick to fail.  If\n   the predicted port number at either NAT already\
    \ happens to be in use\n   by an unrelated session, then the NAT will skip over\
    \ that port number\n   and the connection attempt will fail.  If either NAT sometimes\
    \ or\n   always chooses port numbers non-sequentially, then the trick will\n \
    \  fail.  If a different client behind NAT A (or B, respectively) opens\n   up\
    \ a new outgoing UDP connection to any external destination after A\n   (B) establishes\
    \ its connection with S but before sending its first\n   message to B (A), then\
    \ the unrelated client will inadvertently\n   \"steal\" the desired port number.\
    \  This trick is therefore much less\n   likely to work when either NAT involved\
    \ is under load.\n   Since in practice an application implementing this trick\
    \ would still\n   need to work even when one of the NATs employs Endpoint-Independent\n\
    \   Mapping, the application would need to detect beforehand what kind of\n  \
    \ NAT is involved on either end and modify its behavior accordingly,\n   increasing\
    \ the complexity of the algorithm and the general\n   brittleness of the network.\
    \  Finally, port number prediction has\n   little chance of working if either\
    \ client is behind two or more\n   levels of NAT and the NAT(s) closest to the\
    \ client employs Endpoint-\n   Dependent Mapping.\n"
- title: 3.6.  TCP Port Number Prediction
  contents:
  - "3.6.  TCP Port Number Prediction\n   This is a variant of the \"TCP Hole Punching\"\
    \ technique to set up\n   direct peer-to-peer TCP sessions across NATs employing\
    \ Address-\n   Dependent Mapping.\n   Unfortunately, this trick may be even more\
    \ fragile and timing-\n   sensitive than the UDP port number prediction trick\
    \ described\n   earlier.  First, predicting the public port a NAT would assign\
    \ could\n   be wrong.  In addition, if either client's SYN arrives at the\n  \
    \ opposite NAT device too quickly, then the remote NAT device may\n   reject the\
    \ SYN with a RST packet, causing the local NAT device in\n   turn to close the\
    \ new session and make future SYN retransmission\n   attempts using the same port\
    \ numbers futile.\n"
- title: 4.  Recent Work on NAT Traversal
  contents:
  - "4.  Recent Work on NAT Traversal\n   [P2P-NAT] has a detailed discussion on the\
    \ UDP and TCP hole punching\n   techniques for NAT traversal.  [P2P-NAT] also\
    \ lists empirical results\n   from running a test program [NAT-CHECK] across a\
    \ number of commercial\n   NAT devices.  The results indicate that UDP hole punching\
    \ works\n   widely on more than 80% of the NAT devices, whereas TCP hole punching\n\
    \   works on just over 60% of the NAT devices tested.  The results also\n   indicate\
    \ that TCP or UDP hairpinning is not yet widely available on\n   commercial NAT\
    \ devices, as less than 25% of the devices passed the\n   tests ([NAT-CHECK])\
    \ for Hairpinning.  Readers may also refer to\n   [JENN-RESULT] and [SAIK-RESULT]\
    \ for empirical test results in\n   classifying publicly available NAT devices.\
    \  [JENN-RESULT] provides\n   results of NAT classification using tests spanning\
    \ across different\n   IP protocols.  [SAIK-RESULT] focuses exclusively on classifying\
    \ NAT\n   devices by the TCP behavioral characteristics.\n   [TCP-CHARACT] and\
    \ [NAT-BLASTER] focus on TCP hole punching, exploring\n   and comparing several\
    \ alternative approaches.  [NAT-BLASTER] takes an\n   analytical approach, analyzing\
    \ different cases of observed NAT\n   behavior and ways applications might address\
    \ them.  [TCP-CHARACT]\n   adopts a more empirical approach, measuring the commonality\
    \ of\n   different types of NAT behavior relevant to TCP hole punching.  This\n\
    \   work finds that using more sophisticated techniques than those used\n   in\
    \ [P2P-NAT], up to 88% of currently deployed NATs can support TCP\n   hole punching.\n\
    \   [TEREDO] is a NAT traversal service that uses relay technology to\n   connect\
    \ IPv4 nodes behind NAT devices to IPv6 nodes, external to the\n   NAT devices.\
    \  [TEREDO] provides for peer communication across NAT\n   devices by tunneling\
    \ packets over UDP, across the NAT device(s) to a\n   relay node.  Teredo relays\
    \ act as Rendezvous servers to relay traffic\n   from private IPv4 nodes to the\
    \ nodes in the external realm and vice\n   versa.\n   [ICE] is a NAT traversal\
    \ protocol for setting up media sessions\n   between peer nodes for a class of\
    \ multi-media applications.  [ICE]\n   requires peering nodes to run the Simple\
    \ Traversal of the UDP\n   Protocol through NAT (STUN) protocol [STUN] on the\
    \ same port number\n   used to terminate media session(s).  Applications that\
    \ use signaling\n   protocols such as SIP ([SIP]) may embed the NAT traversal\
    \ attributes\n   for the media session within the signaling sessions and use the\n\
    \   offer/answer type of exchange between peer nodes to set up end-to-end\n  \
    \ media session(s) across NAT devices.  [ICE-TCP] is an extension of\n   ICE for\
    \ TCP-based media sessions.\n   A number of online gaming and media-over-IP applications,\
    \ including\n   Instant Messaging applications, use the techniques described in\
    \ the\n   document for peer-to-peer connection establishment.  Some\n   applications\
    \ may use multiple distinct rendezvous servers for\n   registration, discovery,\
    \ and relay functions for load balancing,\n   among other reasons.  For example,\
    \ the well-known media-over-IP\n   application \"Skype\" uses a central public\
    \ server for login and\n   different public servers for end-to-end relay function.\n"
- title: 5.  Summary of Observations
  contents:
  - '5.  Summary of Observations

    '
- title: 5.1.  TCP/UDP Hole Punching
  contents:
  - "5.1.  TCP/UDP Hole Punching\n   TCP/UDP hole punching appears to be the most\
    \ efficient existing\n   method of establishing direct TCP/UDP peer-to-peer communication\n\
    \   between two nodes that are both behind NATs.  This technique has been\n  \
    \ used with a wide variety of existing NATs.  However, applications may\n   need\
    \ to prepare to fall back to simple relaying when direct\n   communication cannot\
    \ be established.\n   The TCP/UDP hole punching technique has a caveat in that\
    \ it works\n   only when the traversing NAT is EIM-NAT.  When the NAT device enroute\n\
    \   is not EIM-NAT, the application is unable to reuse an already\n   established\
    \ endpoint mapping for communication with different\n   external destinations\
    \ and the technique would fail.  However, many of\n   the NAT devices deployed\
    \ in the Internet are EIM-NAT devices.  That\n   makes the TCP/UDP hole punching\
    \ technique broadly applicable\n   [P2P-NAT].  Nevertheless, a substantial fraction\
    \ of deployed NATs do\n   employ Endpoint-Dependent Mapping and do not support\
    \ the TCP/UDP hole\n   punching technique.\n"
- title: 5.2.  NATs Employing Endpoint-Dependent Mapping
  contents:
  - "5.2.  NATs Employing Endpoint-Dependent Mapping\n   NATs Employing Endpoint-Dependent\
    \ Mapping weren't a problem with\n   client-server applications such as Web browsers,\
    \ which only need to\n   initiate outgoing connections.  However, in recent times,\
    \ P2P\n   applications such as Instant Messaging and Voice-over-IP have been in\n\
    \   wide use.  NATs employing Endpoint-Dependent Mapping are not suitable\n  \
    \ for P2P applications as techniques such as TCP/UDP hole punching will\n   not\
    \ work across these NAT devices.\n"
- title: 5.3.  Peer Discovery
  contents:
  - "5.3.  Peer Discovery\n   Application peers may be present within the same NAT\
    \ domain or\n   external to the NAT domain.  In order for all peers (those within\
    \ or\n   external to the NAT domain) to discover the application endpoint, an\n\
    \   application may choose to register its private endpoints in addition\n   to\
    \ public endpoints with the rendezvous server.\n"
- title: 5.4.  Hairpinning
  contents:
  - "5.4.  Hairpinning\n   Support for hairpinning is highly beneficial to allow hosts\
    \ behind\n   EIM-NAT to communicate with other hosts behind the same NAT device\n\
    \   through their public, possibly translated, endpoints.  Support for\n   hairpinning\
    \ is particularly useful in the case of large-capacity NATs\n   deployed as the\
    \ first level of a multi-level NAT scenario.  As\n   described in Section 3.3.3,\
    \ hosts behind the same first-level NAT but\n   different second-level NATs do\
    \ not have a way to communicate with\n   each other using TCP/UDP hole punching\
    \ techniques, unless the first-\n   level NAT also supports hairpinning.  This\
    \ would be the case even\n   when all NAT devices in a deployment preserve endpoint\
    \ identities.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document does not inherently create new\
    \ security issues.\n   Nevertheless, security risks may be present in the techniques\n\
    \   described.  This section describes security risks the applications\n   could\
    \ inadvertently create in attempting to support direct\n   communication across\
    \ NAT devices.\n"
- title: 6.1.  Lack of Authentication Can Cause Connection Hijacking
  contents:
  - "6.1.  Lack of Authentication Can Cause Connection Hijacking\n   Applications\
    \ must use appropriate authentication mechanisms to\n   protect their connections\
    \ from accidental confusion with other\n   connections as well as from malicious\
    \ connection hijacking or\n   denial-of-service attacks.  Applications effectively\
    \ must interact\n   with multiple distinct IP address domains, but are not generally\n\
    \   aware of the exact topology or administrative policies defining these\n  \
    \ address domains.  While attempting to establish connections via\n   TCP/UDP\
    \ hole punching, applications send packets that may frequently\n   arrive at an\
    \ entirely different host than the intended one.\n   For example, many consumer-level\
    \ NAT devices provide Dynamic Host\n   Configuration Protocol (DHCP) services\
    \ that are configured by default\n   to hand out site-local IP addresses in a\
    \ particular address range.\n   Say, a particular consumer NAT device, by default,\
    \ hands out IP\n   addresses starting with 192.168.1.100.  Most private home networks\n\
    \   using that NAT device will have a host with that IP address, and many\n  \
    \ of these networks will probably have a host at address 192.168.1.101\n   as\
    \ well.  If host A at address 192.168.1.101 on one private network\n   attempts\
    \ to establish a connection by UDP hole punching with host B\n   at 192.168.1.100\
    \ on a different private network, then as part of this\n   process host A will\
    \ send discovery packets to address 192.168.1.100\n   on its local network, and\
    \ host B will send discovery packets to\n   address 192.168.1.101 on its network.\
    \  Clearly, these discovery\n   packets will not reach the intended machine since\
    \ the two hosts are\n   on different private networks, but they are very likely\
    \ to reach SOME\n   machine on these respective networks at the standard UDP port\
    \ numbers\n   used by this application, potentially causing confusion, especially\n\
    \   if the application is also running on those other machines and does\n   not\
    \ properly authenticate its messages.\n   This risk due to aliasing is therefore\
    \ present even without a\n   malicious attacker.  If one endpoint, say, host A,\
    \ is actually\n   malicious, then without proper authentication the attacker could\n\
    \   cause host B to connect and interact in unintended ways with another\n   host\
    \ on its private network having the same IP address as the\n   attacker's (purported)\
    \ private address.  Since the two endpoint hosts\n   A and B presumably discovered\
    \ each other through a public rendezvous\n   server S, providing registration,\
    \ discovery, and limited relay\n   services, and neither S nor B has any means\
    \ to verify A's reported\n   private address, applications may be advised to assume\
    \ that any IP\n   address they find to be suspect until they successfully establish\n\
    \   authenticated two-way communication.\n"
- title: 6.2.  Denial-of-Service Attacks
  contents:
  - "6.2.  Denial-of-Service Attacks\n   Applications and the public servers that\
    \ support them must protect\n   themselves against denial-of-service attacks,\
    \ and ensure that they\n   cannot be used by an attacker to mount denial-of-service\
    \ attacks\n   against other targets.  To protect themselves, applications and\n\
    \   servers must avoid taking any action requiring significant local\n   processing\
    \ or storage resources until authenticated two-way\n   communication is established.\
    \  To avoid being used as a tool for\n   denial-of-service attacks, applications\
    \ and servers must minimize the\n   amount and rate of traffic they send to any\
    \ newly discovered IP\n   address until after authenticated two-way communication\
    \ is\n   established with the intended target.\n   For example, applications that\
    \ register with a public rendezvous\n   server can claim to have any private IP\
    \ address, or perhaps multiple\n   IP addresses.  A well-connected host or group\
    \ of hosts that can\n   collectively attract a substantial volume of connection\
    \ attempts\n   (e.g., by offering to serve popular content) could mount a denial-\n\
    \   of-service attack on a target host C simply by including C's IP\n   address\
    \ in its own list of IP addresses it registers with the\n   rendezvous server.\
    \  There is no way the rendezvous server can verify\n   the IP addresses, since\
    \ they could well be legitimate private network\n   addresses useful to other\
    \ hosts for establishing network-local\n   communication.  The application protocol\
    \ must therefore be designed\n   to size- and rate-limit traffic to unverified\
    \ IP addresses in order\n   to avoid the potential damage such a concentration\
    \ effect could\n   cause.\n"
- title: 6.3.  Man-in-the-Middle Attacks
  contents:
  - "6.3.  Man-in-the-Middle Attacks\n   Any network device on the path between a\
    \ client and a public\n   rendezvous server can mount a variety of man-in-the-middle\
    \ attacks by\n   pretending to be a NAT.  For example, suppose host A attempts\
    \ to\n   register with rendezvous server S, but a network-snooping attacker is\n\
    \   able to observe this registration request.  The attacker could then\n   flood\
    \ server S with requests that are identical to the client's\n   original request\
    \ except with a modified source IP address, such as\n   the IP address of the\
    \ attacker itself.  If the attacker can convince\n   the server to register the\
    \ client using the attacker's IP address,\n   then the attacker can make itself\
    \ an active component on the path of\n   all future traffic from the server AND\
    \ other hosts to the original\n   client, even if the attacker was originally\
    \ only able to snoop the\n   path from the client to the server.\n   The client\
    \ cannot protect itself from this attack by authenticating\n   its source IP address\
    \ to the rendezvous server, because in order to\n   be NAT-friendly the application\
    \ must allow intervening NATs to change\n   the source address silently.  This\
    \ appears to be an inherent security\n   weakness of the NAT paradigm.  The only\
    \ defense against such an\n   attack is for the client to authenticate and potentially\
    \ encrypt the\n   actual content of its communication using appropriate higher-level\n\
    \   identities, so that the interposed attacker is not able to take\n   advantage\
    \ of its position.  Even if all application-level\n   communication is authenticated\
    \ and encrypted, however, this attack\n   could still be used as a traffic analysis\
    \ tool for observing who the\n   client is communicating with.\n"
- title: 6.4.  Security Impact from EIM-NAT Devices
  contents:
  - "6.4.  Security Impact from EIM-NAT Devices\n   Designing NAT devices to preserve\
    \ endpoint identities does not weaken\n   the security provided by the NAT device.\
    \  For example, a NAT device\n   employing Endpoint-Independent Mapping and Endpoint-Dependent\n\
    \   Filtering is no more \"promiscuous\" than a NAT device employing\n   Endpoint-Dependent\
    \ Mapping and Endpoint-Dependent Filtering.\n   Filtering incoming traffic aggressively\
    \ using Endpoint-Dependent\n   Filtering while employing Endpoint-Independent\
    \ Mapping allows a NAT\n   device to be friendly to applications without compromising\
    \ the\n   principle of rejecting unsolicited incoming traffic.\n   Endpoint-Independent\
    \ Mapping could arguably increase the\n   predictability of traffic emerging from\
    \ the NAT device, by revealing\n   the relationships between different TCP/UDP\
    \ sessions and hence about\n   the behavior of applications running within the\
    \ enclave.  This\n   predictability could conceivably be useful to an attacker\
    \ in\n   exploiting other network- or application-level vulnerabilities.  If\n\
    \   the security requirements of a particular deployment scenario are so\n   critical\
    \ that such subtle information channels are of concern, then\n   perhaps the NAT\
    \ device was not to have been configured to allow\n   unrestricted outgoing TCP/UDP\
    \ traffic in the first place.  A NAT\n   device configured to allow communication\
    \ originating from specific\n   applications at specific ports, or via tightly\
    \ controlled\n   application-level gateways, may accomplish the security requirements\n\
    \   of such deployment scenarios.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors wish to thank Henrik Bergstrom, David Anderson,\
    \ Christian\n   Huitema, Dan Wing, Eric Rescorla, and other BEHAVE work group\
    \ members\n   for their valuable feedback on early versions of this document.\
    \  The\n   authors also wish to thank Francois Audet, Kaushik Biswas, Spencer\n\
    \   Dawkins, Bruce Lowekamp, and Brian Stucker for agreeing to be\n   technical\
    \ reviewers for this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [NAT-TERM]    Srisuresh, P. and M. Holdrege, \"\
    IP Network Address\n                 Translator (NAT) Terminology and Considerations\"\
    , RFC\n                 2663, August 1999.\n   [NAT-TRAD]    Srisuresh, P. and\
    \ K. Egevang, \"Traditional IP Network\n                 Address Translator (Traditional\
    \ NAT)\", RFC 3022,\n                 January 2001.\n   [BEH-UDP]     Audet, F.,\
    \ Ed., and C. Jennings, \"Network Address\n                 Translation (NAT)\
    \ Behavioral Requirements for Unicast\n                 UDP\", BCP 127, RFC 4787,\
    \ January 2007.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [BEH-APP]     Ford, B., Srisuresh, P., and D.\
    \ Kegel, \"Application\n                 Design Guidelines for Traversal through\
    \ Network Address\n                 Translators\", Work in Progress, March 2007.\n\
    \   [BEH-ICMP]    Srisuresh, P., Ford, B., Sivakumar, S., and S. Guha,\n     \
    \            \"NAT Behavioral Requirements for ICMP protocol\", Work\n       \
    \          in Progress, February 2008.\n   [BEH-TCP]     Guha, S., Biswas, K.,\
    \ Ford, B., Sivakumar, S., and P.\n                 Srisuresh, \"NAT Behavioral\
    \ Requirements for TCP\", Work\n                 in Progress, April 2007.\n  \
    \ [BIDIR]       Peer-to-Peer Working Group, NAT/Firewall Working\n           \
    \      Committee, \"Bidirectional Peer-to-Peer Communication\n               \
    \  with Interposing Firewalls and NATs\", August 2001.\n                 http://www.peer-to-peerwg.org/tech/nat/\n\
    \   [ICE]         Rosenberg, J., \"Interactive Connectivity Establishment\n  \
    \               (ICE): A Methodology for Network Address Translator\n        \
    \         (NAT) Traversal for Offer/Answer Protocols\", Work in\n            \
    \     Progress, October 2007.\n   [ICE-TCP]     Rosenberg, J., \"TCP Candidates\
    \ with Interactive\n                 Connectivity Establishment (ICE)\", Work\
    \ in Progress,\n                 July 2007.\n   [JENN-RESULT] Jennings, C., \"\
    NAT Classification Test Results\", Work\n                 in Progress, July 2007.\n\
    \   [KEGEL]       Kegel, D., \"NAT and Peer-to-Peer Networking\", July\n     \
    \            1999. http://www.alumni.caltech.edu/~dank/peer-nat.html\n   [MIDCOM]\
    \      Srisuresh, P., Kuthan, J., Rosenberg, J., Molitor, A.,\n              \
    \   and A. Rayhan, \"Middlebox communication architecture\n                 and\
    \ framework\", RFC 3303, August 2002.\n   [NAT-APPL]    Senie, D., \"Network Address\
    \ Translator (NAT)-Friendly\n                 Application Design Guidelines\"\
    , RFC 3235, January 2002.\n   [NAT-BLASTER] Biggadike, A., Ferullo, D., Wilson,\
    \ G., and Perrig, A.,\n                 \"Establishing TCP Connections Between\
    \ Hosts Behind\n                 NATs\", ACM SIGCOMM ASIA Workshop, April 2005.\n\
    \   [NAT-CHECK]   Ford, B., \"NAT check Program\" available online as\n      \
    \           http://midcom-p2p.sourceforge.net, February 2005.\n   [NAT-PMP]  \
    \   Cheshire, S., Krochmal, M., and K. Sekar, \"NAT Port\n                 Mapping\
    \ Protocol (NAT-PMP)\", Work in Progress, October\n                 2006.\n  \
    \ [NAT-PROT]    Holdrege, M. and P. Srisuresh, \"Protocol Complications\n    \
    \             with the IP Network Address Translator\", RFC 3027,\n          \
    \       January 2001.\n   [NAT-PT]      Tsirtsis, G. and P. Srisuresh, \"Network\
    \ Address\n                 Translation - Protocol Translation (NAT-PT)\", RFC\
    \ 2766,\n                 February 2000.\n   [NAT-PT-HIST] Aoun, C. and E. Davies,\
    \ \"Reasons to Move the Network\n                 Address Translator - Protocol\
    \ Translator (NAT-PT) to\n                 Historic Status\", RFC 4966, July 2007.\n\
    \   [NSIS-NSLP]   Stiemerling, M., Tschofenig, H., Aoun, C., and E.\n        \
    \         Davies, \"NAT/Firewall NSIS Signaling Layer Protocol\n             \
    \    (NSLP)\", Work in Progress, July 2007.\n   [P2P-NAT]     Ford, B., Srisuresh,\
    \ P., and Kegel, D., \"Peer-to-Peer\n                 Communication Across Network\
    \ Address Translators\",\n                 Proceedings of the USENIX Annual Technical\
    \ Conference\n                 (Anaheim, CA), April 2005.\n   [RFC3330]     IANA,\
    \ \"Special-Use IPv4 Addresses\", RFC 3330, September\n                 2002.\n\
    \   [RFC4941]     Narten, T., Draves, R., and S. Krishnan, \"Privacy\n       \
    \          Extensions for Stateless Address Autoconfiguration in\n           \
    \      IPv6\", RFC 4941, September 2007.\n   [RSIP]        Borella, M., Lo, J.,\
    \ Grabelsky, D., and G. Montenegro,\n                 \"Realm Specific IP: Framework\"\
    , RFC 3102, October 2001.\n   [SAIK-RESULT] Guha, Saikat,  \"NAT STUNT Results\"\
    \ available online as\n                 https://www.guha.cc/saikat/stunt-results.php.\n\
    \   [SIP]         Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n           \
    \      Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n                \
    \ and E. Schooler, \"SIP:  Session Initiation Protocol\",\n                 RFC\
    \ 3261, June 2002.\n   [SOCKS]       Leech, M., Ganis, M., Lee, Y., Kuris, R.,\
    \ Koblas, D.,\n                 and L. Jones, \"SOCKS Protocol Version 5\", RFC\
    \ 1928,\n                 March 1996.\n   [STUN]        Rosenberg, J., Weinberger,\
    \ J., Huitema, C., and R.\n                 Mahy, \"STUN - Simple Traversal of\
    \ User Datagram\n                 Protocol (UDP) Through Network Address Translators\n\
    \                 (NATs)\", RFC 3489, March 2003.\n   [SYM-STUN]    Takeda, Y.,\
    \ \"Symmetric NAT Traversal using STUN\", Work\n                 in Progress,\
    \ June 2003.\n   [TCP]         Postel, J., \"Transmission Control Protocol\",\
    \ STD 7, RFC\n                 793, September 1981.\n   [TCP-CHARACT] Guha, S.,\
    \ and Francis, P., \"Characterization and\n                 Measurement of TCP\
    \ Traversal through NATs and\n                 Firewalls\", Proceedings of Internet\
    \ Measurement\n                 Conference (IMC), Berkeley, CA, October 2005,\
    \ pp. 199-\n                 211.\n   [TEREDO]      Huitema, C., \"Teredo: Tunneling\
    \ IPv6 over UDP through\n                 Network Address Translations (NATs)\"\
    , RFC 4380,\n                 February 2006.\n   [TURN]        Rosenberg, J.,\
    \ Mahy, R., and P. Matthews, \"Traversal\n                 Using Relays around\
    \ NAT (TURN): Relay Extensions to\n                 Session Traversal Utilities\
    \ for NAT (STUN)\", Work in\n                 Progress, January 2008.\n   [UNSAF]\
    \       Daigle, L., Ed., and IAB, \"IAB Considerations for\n                 UNilateral\
    \ Self-Address Fixing (UNSAF) Across Network\n                 Address Translation\"\
    , RFC 3424, November 2002.\n   [UPNP]        UPnP Forum, \"Internet Gateway Device\
    \ (IGD) Standardized\n                 Device Control Protocol V 1.0\", November\
    \ 2001,\n                 http://www.upnp.org/standardizeddcps/igd.asp\n   [V6-CPE-SEC]\
    \  Woodyatt, J., \"Recommended Simple Security Capabilities\n                \
    \ in Customer Premises Equipment for Providing\n                 Residential IPv6\
    \ Internet Service\", Work in Progress,\n                 June 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pyda Srisuresh\n   Kazeon Systems, Inc.\n   1161 San Antonio\
    \ Rd.\n   Mountain View, CA 94043\n   USA\n   Phone: (408)836-4773\n   EMail:\
    \ srisuresh@yahoo.com\n   Bryan Ford\n   Laboratory for Computer Science\n   Massachusetts\
    \ Institute of Technology\n   77 Massachusetts Ave.\n   Cambridge, MA 02139\n\
    \   USA\n   Phone: (617) 253-5261\n   EMail: baford@mit.edu\n   Web: http://www.brynosaurus.com/\n\
    \   Dan Kegel\n   Kegel.com\n   901 S. Sycamore Ave.\n   Los Angeles, CA 90036\n\
    \   USA\n   Phone: 323 931-6717\n   EMail: dank@kegel.com\n   Web: http://www.kegel.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
